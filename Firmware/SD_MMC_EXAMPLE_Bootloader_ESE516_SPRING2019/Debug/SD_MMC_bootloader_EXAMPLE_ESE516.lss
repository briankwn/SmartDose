
SD_MMC_bootloader_EXAMPLE_ESE516.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00007d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000990  200001dc  00007f40  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000b6c  000088d0  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   000478a0  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a4b  00000000  00000000  00067afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001108b  00000000  00000000  0006e548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b60  00000000  00000000  0007f5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010f0  00000000  00000000  00080133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020340  00000000  00000000  00081223  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000163d2  00000000  00000000  000a1563  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000939e2  00000000  00000000  000b7935  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027dc  00000000  00000000  0014b318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 2b 00 20 4d 36 00 00 49 36 00 00 49 36 00 00     p+. M6..I6..I6..
	...
      2c:	49 36 00 00 00 00 00 00 00 00 00 00 49 36 00 00     I6..........I6..
      3c:	49 36 00 00 49 36 00 00 49 36 00 00 49 36 00 00     I6..I6..I6..I6..
      4c:	49 36 00 00 49 36 00 00 49 36 00 00 49 36 00 00     I6..I6..I6..I6..
      5c:	49 36 00 00 49 36 00 00 a1 20 00 00 b1 20 00 00     I6..I6... ... ..
      6c:	c1 20 00 00 d1 20 00 00 e1 20 00 00 f1 20 00 00     . ... ... ... ..
      7c:	49 36 00 00 49 36 00 00 49 36 00 00 49 36 00 00     I6..I6..I6..I6..
      8c:	49 36 00 00 49 36 00 00 00 00 00 00 00 00 00 00     I6..I6..........
      9c:	49 36 00 00 49 36 00 00 49 36 00 00 49 36 00 00     I6..I6..I6..I6..
      ac:	49 36 00 00 00 00 00 00                             I6......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00007d64 	.word	0x00007d64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00007d64 	.word	0x00007d64
     10c:	00007d64 	.word	0x00007d64
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000033d9 	.word	0x000033d9
     140:	00005af9 	.word	0x00005af9
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	46c6      	mov	lr, r8
     184:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     186:	2303      	movs	r3, #3
     188:	0007      	movs	r7, r0
     18a:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     18c:	6813      	ldr	r3, [r2, #0]
     18e:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
     190:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
     192:	2903      	cmp	r1, #3
     194:	d902      	bls.n	19c <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     196:	4244      	negs	r4, r0
     198:	2003      	movs	r0, #3
     19a:	4004      	ands	r4, r0
	}

	if (temp_length) {
     19c:	2c00      	cmp	r4, #0
     19e:	d016      	beq.n	1ce <crc32_recalculate+0x4e>
		length -= temp_length;
     1a0:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
     1a2:	1d3e      	adds	r6, r7, #4
     1a4:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
     1a6:	00e0      	lsls	r0, r4, #3
     1a8:	4240      	negs	r0, r0
     1aa:	3020      	adds	r0, #32
     1ac:	40c5      	lsrs	r5, r0
	crc ^= data;
     1ae:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
     1b0:	00e0      	lsls	r0, r4, #3
     1b2:	d019      	beq.n	1e8 <crc32_recalculate+0x68>
		if (crc & 1) {
     1b4:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1b6:	4d27      	ldr	r5, [pc, #156]	; (254 <crc32_recalculate+0xd4>)
     1b8:	e003      	b.n	1c2 <crc32_recalculate+0x42>
			crc >>= 1;
     1ba:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     1bc:	3801      	subs	r0, #1
     1be:	2800      	cmp	r0, #0
     1c0:	d004      	beq.n	1cc <crc32_recalculate+0x4c>
		if (crc & 1) {
     1c2:	421c      	tst	r4, r3
     1c4:	d0f9      	beq.n	1ba <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1c6:	085b      	lsrs	r3, r3, #1
     1c8:	406b      	eors	r3, r5
     1ca:	e7f7      	b.n	1bc <crc32_recalculate+0x3c>
		word = *(word_ptr++);
     1cc:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     1ce:	2003      	movs	r0, #3
     1d0:	000c      	movs	r4, r1
     1d2:	4384      	bics	r4, r0

	if (temp_length) {
     1d4:	d01e      	beq.n	214 <crc32_recalculate+0x94>
		length -= temp_length;
     1d6:	1b08      	subs	r0, r1, r4
     1d8:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
     1da:	0889      	lsrs	r1, r1, #2
     1dc:	4688      	mov	r8, r1
     1de:	003e      	movs	r6, r7
     1e0:	000d      	movs	r5, r1
		if (crc & 1) {
     1e2:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1e4:	4c1b      	ldr	r4, [pc, #108]	; (254 <crc32_recalculate+0xd4>)

		while (temp_length--) {
     1e6:	e00b      	b.n	200 <crc32_recalculate+0x80>
		word = *(word_ptr++);
     1e8:	0037      	movs	r7, r6
     1ea:	e7f0      	b.n	1ce <crc32_recalculate+0x4e>
			crc >>= 1;
     1ec:	085b      	lsrs	r3, r3, #1
     1ee:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     1f0:	2900      	cmp	r1, #0
     1f2:	d004      	beq.n	1fe <crc32_recalculate+0x7e>
		if (crc & 1) {
     1f4:	4218      	tst	r0, r3
     1f6:	d0f9      	beq.n	1ec <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1f8:	085b      	lsrs	r3, r3, #1
     1fa:	4063      	eors	r3, r4
     1fc:	e7f7      	b.n	1ee <crc32_recalculate+0x6e>
     1fe:	3604      	adds	r6, #4
		while (temp_length--) {
     200:	3d01      	subs	r5, #1
     202:	d303      	bcc.n	20c <crc32_recalculate+0x8c>
	crc ^= data;
     204:	6831      	ldr	r1, [r6, #0]
     206:	404b      	eors	r3, r1
     208:	2120      	movs	r1, #32
     20a:	e7f3      	b.n	1f4 <crc32_recalculate+0x74>
     20c:	4641      	mov	r1, r8
     20e:	0089      	lsls	r1, r1, #2
     210:	187f      	adds	r7, r7, r1
		length -= temp_length;
     212:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
     214:	2900      	cmp	r1, #0
     216:	d017      	beq.n	248 <crc32_recalculate+0xc8>
		word = *word_ptr;
     218:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     21a:	00c8      	lsls	r0, r1, #3
     21c:	4240      	negs	r0, r0
     21e:	3020      	adds	r0, #32
     220:	2501      	movs	r5, #1
     222:	426d      	negs	r5, r5
     224:	40c5      	lsrs	r5, r0
     226:	0028      	movs	r0, r5
     228:	4020      	ands	r0, r4
	crc ^= data;
     22a:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
     22c:	00c9      	lsls	r1, r1, #3
     22e:	d00b      	beq.n	248 <crc32_recalculate+0xc8>
		if (crc & 1) {
     230:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     232:	4c08      	ldr	r4, [pc, #32]	; (254 <crc32_recalculate+0xd4>)
     234:	e003      	b.n	23e <crc32_recalculate+0xbe>
			crc >>= 1;
     236:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     238:	3901      	subs	r1, #1
     23a:	2900      	cmp	r1, #0
     23c:	d004      	beq.n	248 <crc32_recalculate+0xc8>
		if (crc & 1) {
     23e:	4218      	tst	r0, r3
     240:	d0f9      	beq.n	236 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     242:	085b      	lsrs	r3, r3, #1
     244:	4063      	eors	r3, r4
     246:	e7f7      	b.n	238 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     248:	43db      	mvns	r3, r3
     24a:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
     24c:	2000      	movs	r0, #0
     24e:	bc04      	pop	{r2}
     250:	4690      	mov	r8, r2
     252:	bdf0      	pop	{r4, r5, r6, r7, pc}
     254:	edb88320 	.word	0xedb88320

00000258 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     25c:	ac01      	add	r4, sp, #4
     25e:	2501      	movs	r5, #1
     260:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     262:	2700      	movs	r7, #0
     264:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     266:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     268:	0021      	movs	r1, r4
     26a:	2017      	movs	r0, #23
     26c:	4e06      	ldr	r6, [pc, #24]	; (288 <system_board_init+0x30>)
     26e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     270:	2280      	movs	r2, #128	; 0x80
     272:	0412      	lsls	r2, r2, #16
     274:	4b05      	ldr	r3, [pc, #20]	; (28c <system_board_init+0x34>)
     276:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     278:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     27a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     27c:	0021      	movs	r1, r4
     27e:	2037      	movs	r0, #55	; 0x37
     280:	47b0      	blx	r6
}
     282:	b003      	add	sp, #12
     284:	bdf0      	pop	{r4, r5, r6, r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	00001ac1 	.word	0x00001ac1
     28c:	41004400 	.word	0x41004400

00000290 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     290:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     292:	4a1e      	ldr	r2, [pc, #120]	; (30c <nvm_set_config+0x7c>)
     294:	69d3      	ldr	r3, [r2, #28]
     296:	2104      	movs	r1, #4
     298:	430b      	orrs	r3, r1
     29a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     29c:	4b1c      	ldr	r3, [pc, #112]	; (310 <nvm_set_config+0x80>)
     29e:	2220      	movs	r2, #32
     2a0:	32ff      	adds	r2, #255	; 0xff
     2a2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2a4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     2a6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     2a8:	07d2      	lsls	r2, r2, #31
     2aa:	d401      	bmi.n	2b0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     2ac:	0018      	movs	r0, r3
     2ae:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     2b0:	7803      	ldrb	r3, [r0, #0]
     2b2:	021b      	lsls	r3, r3, #8
     2b4:	22c0      	movs	r2, #192	; 0xc0
     2b6:	0092      	lsls	r2, r2, #2
     2b8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     2ba:	7841      	ldrb	r1, [r0, #1]
     2bc:	01c9      	lsls	r1, r1, #7
     2be:	22ff      	movs	r2, #255	; 0xff
     2c0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     2c2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     2c4:	7881      	ldrb	r1, [r0, #2]
     2c6:	0049      	lsls	r1, r1, #1
     2c8:	221e      	movs	r2, #30
     2ca:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     2cc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     2ce:	78c2      	ldrb	r2, [r0, #3]
     2d0:	0492      	lsls	r2, r2, #18
     2d2:	2180      	movs	r1, #128	; 0x80
     2d4:	02c9      	lsls	r1, r1, #11
     2d6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     2d8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     2da:	7902      	ldrb	r2, [r0, #4]
     2dc:	0412      	lsls	r2, r2, #16
     2de:	21c0      	movs	r1, #192	; 0xc0
     2e0:	0289      	lsls	r1, r1, #10
     2e2:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     2e4:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     2e6:	4a0a      	ldr	r2, [pc, #40]	; (310 <nvm_set_config+0x80>)
     2e8:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     2ea:	6893      	ldr	r3, [r2, #8]
     2ec:	035b      	lsls	r3, r3, #13
     2ee:	0f5b      	lsrs	r3, r3, #29
     2f0:	4908      	ldr	r1, [pc, #32]	; (314 <nvm_set_config+0x84>)
     2f2:	2408      	movs	r4, #8
     2f4:	409c      	lsls	r4, r3
     2f6:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     2f8:	6893      	ldr	r3, [r2, #8]
     2fa:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     2fc:	7843      	ldrb	r3, [r0, #1]
     2fe:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     300:	8b13      	ldrh	r3, [r2, #24]
     302:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     304:	0fdb      	lsrs	r3, r3, #31
     306:	011b      	lsls	r3, r3, #4
     308:	e7d0      	b.n	2ac <nvm_set_config+0x1c>
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	40000400 	.word	0x40000400
     310:	41004000 	.word	0x41004000
     314:	200001f8 	.word	0x200001f8

00000318 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     318:	b530      	push	{r4, r5, lr}
     31a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     31c:	4a22      	ldr	r2, [pc, #136]	; (3a8 <nvm_execute_command+0x90>)
     31e:	8810      	ldrh	r0, [r2, #0]
     320:	8853      	ldrh	r3, [r2, #2]
     322:	4343      	muls	r3, r0
     324:	428b      	cmp	r3, r1
     326:	d206      	bcs.n	336 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     328:	2280      	movs	r2, #128	; 0x80
     32a:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     32c:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     32e:	4b1f      	ldr	r3, [pc, #124]	; (3ac <nvm_execute_command+0x94>)
     330:	18cb      	adds	r3, r1, r3
     332:	4293      	cmp	r3, r2
     334:	d80e      	bhi.n	354 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     336:	4b1e      	ldr	r3, [pc, #120]	; (3b0 <nvm_execute_command+0x98>)
     338:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     33a:	2280      	movs	r2, #128	; 0x80
     33c:	02d2      	lsls	r2, r2, #11
     33e:	432a      	orrs	r2, r5
     340:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     342:	2220      	movs	r2, #32
     344:	32ff      	adds	r2, #255	; 0xff
     346:	831a      	strh	r2, [r3, #24]
     348:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     34a:	07db      	lsls	r3, r3, #31
     34c:	d403      	bmi.n	356 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     34e:	4b18      	ldr	r3, [pc, #96]	; (3b0 <nvm_execute_command+0x98>)
     350:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     352:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     354:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     356:	2c45      	cmp	r4, #69	; 0x45
     358:	d822      	bhi.n	3a0 <nvm_execute_command+0x88>
     35a:	00a3      	lsls	r3, r4, #2
     35c:	4a15      	ldr	r2, [pc, #84]	; (3b4 <nvm_execute_command+0x9c>)
     35e:	58d3      	ldr	r3, [r2, r3]
     360:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     362:	4b13      	ldr	r3, [pc, #76]	; (3b0 <nvm_execute_command+0x98>)
     364:	8b1b      	ldrh	r3, [r3, #24]
     366:	05db      	lsls	r3, r3, #23
     368:	d503      	bpl.n	372 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     36a:	4b11      	ldr	r3, [pc, #68]	; (3b0 <nvm_execute_command+0x98>)
     36c:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     36e:	2010      	movs	r0, #16
     370:	e7f0      	b.n	354 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     372:	0889      	lsrs	r1, r1, #2
     374:	0049      	lsls	r1, r1, #1
     376:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <nvm_execute_command+0x98>)
     378:	61d9      	str	r1, [r3, #28]
			break;
     37a:	e003      	b.n	384 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     37c:	0889      	lsrs	r1, r1, #2
     37e:	0049      	lsls	r1, r1, #1
     380:	4b0b      	ldr	r3, [pc, #44]	; (3b0 <nvm_execute_command+0x98>)
     382:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     384:	20a5      	movs	r0, #165	; 0xa5
     386:	0200      	lsls	r0, r0, #8
     388:	4304      	orrs	r4, r0
     38a:	4b09      	ldr	r3, [pc, #36]	; (3b0 <nvm_execute_command+0x98>)
     38c:	801c      	strh	r4, [r3, #0]
     38e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     390:	2201      	movs	r2, #1
     392:	7d0b      	ldrb	r3, [r1, #20]
     394:	4213      	tst	r3, r2
     396:	d0fc      	beq.n	392 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <nvm_execute_command+0x98>)
     39a:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     39c:	2000      	movs	r0, #0
     39e:	e7d9      	b.n	354 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     3a0:	4b03      	ldr	r3, [pc, #12]	; (3b0 <nvm_execute_command+0x98>)
     3a2:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     3a4:	2017      	movs	r0, #23
     3a6:	e7d5      	b.n	354 <nvm_execute_command+0x3c>
     3a8:	200001f8 	.word	0x200001f8
     3ac:	ff7fc000 	.word	0xff7fc000
     3b0:	41004000 	.word	0x41004000
     3b4:	00006f60 	.word	0x00006f60

000003b8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     3ba:	4b25      	ldr	r3, [pc, #148]	; (450 <nvm_write_buffer+0x98>)
     3bc:	881d      	ldrh	r5, [r3, #0]
     3be:	885b      	ldrh	r3, [r3, #2]
     3c0:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     3c2:	2418      	movs	r4, #24
	if (destination_address >
     3c4:	4283      	cmp	r3, r0
     3c6:	d201      	bcs.n	3cc <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     3c8:	0020      	movs	r0, r4
     3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     3cc:	1e6b      	subs	r3, r5, #1
     3ce:	4218      	tst	r0, r3
     3d0:	d1fa      	bne.n	3c8 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     3d2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     3d4:	4295      	cmp	r5, r2
     3d6:	d3f7      	bcc.n	3c8 <nvm_write_buffer+0x10>
     3d8:	4b1e      	ldr	r3, [pc, #120]	; (454 <nvm_write_buffer+0x9c>)
     3da:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3dc:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     3de:	07db      	lsls	r3, r3, #31
     3e0:	d5f2      	bpl.n	3c8 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     3e2:	4c1d      	ldr	r4, [pc, #116]	; (458 <nvm_write_buffer+0xa0>)
     3e4:	4b1b      	ldr	r3, [pc, #108]	; (454 <nvm_write_buffer+0x9c>)
     3e6:	801c      	strh	r4, [r3, #0]
     3e8:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     3ea:	2401      	movs	r4, #1
     3ec:	7d2b      	ldrb	r3, [r5, #20]
     3ee:	4223      	tst	r3, r4
     3f0:	d0fc      	beq.n	3ec <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3f2:	2420      	movs	r4, #32
     3f4:	34ff      	adds	r4, #255	; 0xff
     3f6:	4b17      	ldr	r3, [pc, #92]	; (454 <nvm_write_buffer+0x9c>)
     3f8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     3fa:	2a00      	cmp	r2, #0
     3fc:	d022      	beq.n	444 <nvm_write_buffer+0x8c>
     3fe:	2301      	movs	r3, #1
     400:	0005      	movs	r5, r0
     402:	439d      	bics	r5, r3
     404:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     406:	1e57      	subs	r7, r2, #1
     408:	e009      	b.n	41e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     40a:	18ce      	adds	r6, r1, r3
     40c:	7876      	ldrb	r6, [r6, #1]
     40e:	0236      	lsls	r6, r6, #8
     410:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     412:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     414:	3302      	adds	r3, #2
     416:	b29b      	uxth	r3, r3
     418:	3502      	adds	r5, #2
     41a:	429a      	cmp	r2, r3
     41c:	d904      	bls.n	428 <nvm_write_buffer+0x70>
		data = buffer[i];
     41e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     420:	42bb      	cmp	r3, r7
     422:	dbf2      	blt.n	40a <nvm_write_buffer+0x52>
		data = buffer[i];
     424:	b2a4      	uxth	r4, r4
     426:	e7f4      	b.n	412 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     428:	4b09      	ldr	r3, [pc, #36]	; (450 <nvm_write_buffer+0x98>)
     42a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     42c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     42e:	2b00      	cmp	r3, #0
     430:	d1ca      	bne.n	3c8 <nvm_write_buffer+0x10>
     432:	2a3f      	cmp	r2, #63	; 0x3f
     434:	d8c8      	bhi.n	3c8 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     436:	2200      	movs	r2, #0
     438:	0001      	movs	r1, r0
     43a:	2004      	movs	r0, #4
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <nvm_write_buffer+0xa4>)
     43e:	4798      	blx	r3
     440:	0004      	movs	r4, r0
     442:	e7c1      	b.n	3c8 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     444:	4b02      	ldr	r3, [pc, #8]	; (450 <nvm_write_buffer+0x98>)
     446:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     448:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     44a:	2b00      	cmp	r3, #0
     44c:	d0f3      	beq.n	436 <nvm_write_buffer+0x7e>
     44e:	e7bb      	b.n	3c8 <nvm_write_buffer+0x10>
     450:	200001f8 	.word	0x200001f8
     454:	41004000 	.word	0x41004000
     458:	ffffa544 	.word	0xffffa544
     45c:	00000319 	.word	0x00000319

00000460 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     460:	4b13      	ldr	r3, [pc, #76]	; (4b0 <nvm_erase_row+0x50>)
     462:	881a      	ldrh	r2, [r3, #0]
     464:	885b      	ldrh	r3, [r3, #2]
     466:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     468:	2118      	movs	r1, #24
	if (row_address >
     46a:	4283      	cmp	r3, r0
     46c:	d201      	bcs.n	472 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     46e:	0008      	movs	r0, r1
     470:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     472:	0092      	lsls	r2, r2, #2
     474:	3a01      	subs	r2, #1
     476:	4210      	tst	r0, r2
     478:	d1f9      	bne.n	46e <nvm_erase_row+0xe>
     47a:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <nvm_erase_row+0x54>)
     47c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     47e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     480:	07db      	lsls	r3, r3, #31
     482:	d5f4      	bpl.n	46e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     484:	4b0b      	ldr	r3, [pc, #44]	; (4b4 <nvm_erase_row+0x54>)
     486:	2220      	movs	r2, #32
     488:	32ff      	adds	r2, #255	; 0xff
     48a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     48c:	0880      	lsrs	r0, r0, #2
     48e:	0040      	lsls	r0, r0, #1
     490:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     492:	4a09      	ldr	r2, [pc, #36]	; (4b8 <nvm_erase_row+0x58>)
     494:	801a      	strh	r2, [r3, #0]
     496:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     498:	2201      	movs	r2, #1
     49a:	7d0b      	ldrb	r3, [r1, #20]
     49c:	4213      	tst	r3, r2
     49e:	d0fc      	beq.n	49a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     4a0:	4b04      	ldr	r3, [pc, #16]	; (4b4 <nvm_erase_row+0x54>)
     4a2:	8b19      	ldrh	r1, [r3, #24]
     4a4:	201c      	movs	r0, #28
     4a6:	4001      	ands	r1, r0
	return STATUS_OK;
     4a8:	1e48      	subs	r0, r1, #1
     4aa:	4181      	sbcs	r1, r0
     4ac:	0089      	lsls	r1, r1, #2
     4ae:	e7de      	b.n	46e <nvm_erase_row+0xe>
     4b0:	200001f8 	.word	0x200001f8
     4b4:	41004000 	.word	0x41004000
     4b8:	ffffa502 	.word	0xffffa502

000004bc <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4bc:	4b13      	ldr	r3, [pc, #76]	; (50c <nvm_get_parameters+0x50>)
     4be:	2220      	movs	r2, #32
     4c0:	32ff      	adds	r2, #255	; 0xff
     4c2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     4c4:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     4c6:	034a      	lsls	r2, r1, #13
     4c8:	0f52      	lsrs	r2, r2, #29
     4ca:	2308      	movs	r3, #8
     4cc:	4093      	lsls	r3, r2
	parameters->page_size =
     4ce:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     4d0:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     4d2:	4b0f      	ldr	r3, [pc, #60]	; (510 <nvm_get_parameters+0x54>)
     4d4:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     4d6:	065b      	lsls	r3, r3, #25
     4d8:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     4da:	2b07      	cmp	r3, #7
     4dc:	d010      	beq.n	500 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     4de:	2206      	movs	r2, #6
     4e0:	1ad2      	subs	r2, r2, r3
     4e2:	2304      	movs	r3, #4
     4e4:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     4e6:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     4e8:	4b09      	ldr	r3, [pc, #36]	; (510 <nvm_get_parameters+0x54>)
     4ea:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     4ec:	2207      	movs	r2, #7
     4ee:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     4f0:	2b07      	cmp	r3, #7
     4f2:	d008      	beq.n	506 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     4f4:	2207      	movs	r2, #7
     4f6:	1ad2      	subs	r2, r2, r3
     4f8:	2304      	movs	r3, #4
     4fa:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     4fc:	6083      	str	r3, [r0, #8]
	}
}
     4fe:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     500:	2300      	movs	r3, #0
     502:	6043      	str	r3, [r0, #4]
     504:	e7f0      	b.n	4e8 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
     506:	2300      	movs	r3, #0
     508:	6083      	str	r3, [r0, #8]
     50a:	e7f8      	b.n	4fe <nvm_get_parameters+0x42>
     50c:	41004000 	.word	0x41004000
     510:	00804000 	.word	0x00804000

00000514 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     514:	b510      	push	{r4, lr}
     516:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     518:	7c03      	ldrb	r3, [r0, #16]
     51a:	2b00      	cmp	r3, #0
     51c:	d005      	beq.n	52a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     51e:	6883      	ldr	r3, [r0, #8]
     520:	1c58      	adds	r0, r3, #1
     522:	68e1      	ldr	r1, [r4, #12]
     524:	4b07      	ldr	r3, [pc, #28]	; (544 <advance_pointer+0x30>)
     526:	4798      	blx	r3
     528:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     52a:	6863      	ldr	r3, [r4, #4]
     52c:	1c58      	adds	r0, r3, #1
     52e:	68e1      	ldr	r1, [r4, #12]
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <advance_pointer+0x30>)
     532:	4798      	blx	r3
     534:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     536:	68a3      	ldr	r3, [r4, #8]
     538:	1a59      	subs	r1, r3, r1
     53a:	424a      	negs	r2, r1
     53c:	414a      	adcs	r2, r1
     53e:	7422      	strb	r2, [r4, #16]
 }
     540:	bd10      	pop	{r4, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	00005c05 	.word	0x00005c05

00000548 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	0005      	movs	r5, r0
     54c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     54e:	2014      	movs	r0, #20
     550:	4b04      	ldr	r3, [pc, #16]	; (564 <circular_buf_init+0x1c>)
     552:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     554:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     556:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     558:	2300      	movs	r3, #0
     55a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     55c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     55e:	7403      	strb	r3, [r0, #16]
 }
     560:	bd70      	pop	{r4, r5, r6, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	00005e81 	.word	0x00005e81

00000568 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     568:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     56a:	6803      	ldr	r3, [r0, #0]
     56c:	6842      	ldr	r2, [r0, #4]
     56e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     570:	4b01      	ldr	r3, [pc, #4]	; (578 <circular_buf_put+0x10>)
     572:	4798      	blx	r3
 }
     574:	bd10      	pop	{r4, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	00000515 	.word	0x00000515

0000057c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     57c:	7c02      	ldrb	r2, [r0, #16]
     57e:	2300      	movs	r3, #0
     580:	2a00      	cmp	r2, #0
     582:	d105      	bne.n	590 <circular_buf_empty+0x14>
     584:	6843      	ldr	r3, [r0, #4]
     586:	6880      	ldr	r0, [r0, #8]
     588:	1a1b      	subs	r3, r3, r0
     58a:	4258      	negs	r0, r3
     58c:	4143      	adcs	r3, r0
     58e:	b2db      	uxtb	r3, r3
     590:	0018      	movs	r0, r3
 }
     592:	4770      	bx	lr

00000594 <circular_buf_get>:
 {
     594:	b570      	push	{r4, r5, r6, lr}
     596:	0004      	movs	r4, r0
     598:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     59a:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <circular_buf_get+0x30>)
     59c:	4798      	blx	r3
     59e:	2800      	cmp	r0, #0
     5a0:	d10d      	bne.n	5be <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     5a2:	6823      	ldr	r3, [r4, #0]
     5a4:	68a2      	ldr	r2, [r4, #8]
     5a6:	5c9b      	ldrb	r3, [r3, r2]
     5a8:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     5aa:	2300      	movs	r3, #0
     5ac:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     5ae:	68a3      	ldr	r3, [r4, #8]
     5b0:	1c58      	adds	r0, r3, #1
     5b2:	68e1      	ldr	r1, [r4, #12]
     5b4:	4b04      	ldr	r3, [pc, #16]	; (5c8 <circular_buf_get+0x34>)
     5b6:	4798      	blx	r3
     5b8:	60a1      	str	r1, [r4, #8]
		 r = 0;
     5ba:	2000      	movs	r0, #0
 }
     5bc:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     5be:	2001      	movs	r0, #1
     5c0:	4240      	negs	r0, r0
	 return r;
     5c2:	e7fb      	b.n	5bc <circular_buf_get+0x28>
     5c4:	0000057d 	.word	0x0000057d
     5c8:	00005c05 	.word	0x00005c05

000005cc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	0005      	movs	r5, r0
     5d2:	000e      	movs	r6, r1
	uint16_t temp = 0;
     5d4:	2200      	movs	r2, #0
     5d6:	466b      	mov	r3, sp
     5d8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     5da:	4c06      	ldr	r4, [pc, #24]	; (5f4 <usart_serial_getchar+0x28>)
     5dc:	466b      	mov	r3, sp
     5de:	1d99      	adds	r1, r3, #6
     5e0:	0028      	movs	r0, r5
     5e2:	47a0      	blx	r4
     5e4:	2800      	cmp	r0, #0
     5e6:	d1f9      	bne.n	5dc <usart_serial_getchar+0x10>

	*c = temp;
     5e8:	466b      	mov	r3, sp
     5ea:	3306      	adds	r3, #6
     5ec:	881b      	ldrh	r3, [r3, #0]
     5ee:	7033      	strb	r3, [r6, #0]
}
     5f0:	b002      	add	sp, #8
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	00002bb1 	.word	0x00002bb1

000005f8 <usart_serial_putchar>:
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     5fc:	b28c      	uxth	r4, r1
     5fe:	4e03      	ldr	r6, [pc, #12]	; (60c <usart_serial_putchar+0x14>)
     600:	0021      	movs	r1, r4
     602:	0028      	movs	r0, r5
     604:	47b0      	blx	r6
     606:	2800      	cmp	r0, #0
     608:	d1fa      	bne.n	600 <usart_serial_putchar+0x8>
}
     60a:	bd70      	pop	{r4, r5, r6, pc}
     60c:	00002b85 	.word	0x00002b85

00000610 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     610:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <usart_write_callback+0x1c>)
     614:	6818      	ldr	r0, [r3, #0]
     616:	4906      	ldr	r1, [pc, #24]	; (630 <usart_write_callback+0x20>)
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <usart_write_callback+0x24>)
     61a:	4798      	blx	r3
     61c:	1c43      	adds	r3, r0, #1
     61e:	d004      	beq.n	62a <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     620:	2201      	movs	r2, #1
     622:	4903      	ldr	r1, [pc, #12]	; (630 <usart_write_callback+0x20>)
     624:	4804      	ldr	r0, [pc, #16]	; (638 <usart_write_callback+0x28>)
     626:	4b05      	ldr	r3, [pc, #20]	; (63c <usart_write_callback+0x2c>)
     628:	4798      	blx	r3
	}
	
}
     62a:	bd10      	pop	{r4, pc}
     62c:	20000b30 	.word	0x20000b30
     630:	20000b2c 	.word	0x20000b2c
     634:	00000595 	.word	0x00000595
     638:	200002f0 	.word	0x200002f0
     63c:	00002cc5 	.word	0x00002cc5

00000640 <InitializeSerialConsole>:
{
     640:	b570      	push	{r4, r5, r6, lr}
     642:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     644:	2580      	movs	r5, #128	; 0x80
     646:	00ed      	lsls	r5, r5, #3
     648:	0029      	movs	r1, r5
     64a:	483f      	ldr	r0, [pc, #252]	; (748 <InitializeSerialConsole+0x108>)
     64c:	4c3f      	ldr	r4, [pc, #252]	; (74c <InitializeSerialConsole+0x10c>)
     64e:	47a0      	blx	r4
     650:	4b3f      	ldr	r3, [pc, #252]	; (750 <InitializeSerialConsole+0x110>)
     652:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     654:	0029      	movs	r1, r5
     656:	483f      	ldr	r0, [pc, #252]	; (754 <InitializeSerialConsole+0x114>)
     658:	47a0      	blx	r4
     65a:	4b3f      	ldr	r3, [pc, #252]	; (758 <InitializeSerialConsole+0x118>)
     65c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     65e:	2380      	movs	r3, #128	; 0x80
     660:	05db      	lsls	r3, r3, #23
     662:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     664:	2300      	movs	r3, #0
     666:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     668:	22ff      	movs	r2, #255	; 0xff
     66a:	4669      	mov	r1, sp
     66c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     66e:	2200      	movs	r2, #0
     670:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     672:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     674:	2101      	movs	r1, #1
     676:	2024      	movs	r0, #36	; 0x24
     678:	466c      	mov	r4, sp
     67a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     67c:	3001      	adds	r0, #1
     67e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     680:	3125      	adds	r1, #37	; 0x25
     682:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     684:	3101      	adds	r1, #1
     686:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     688:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     68a:	3105      	adds	r1, #5
     68c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     68e:	3101      	adds	r1, #1
     690:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     692:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     694:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     696:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     698:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     69a:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     69c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     69e:	2313      	movs	r3, #19
     6a0:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     6a2:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     6a4:	23e1      	movs	r3, #225	; 0xe1
     6a6:	025b      	lsls	r3, r3, #9
     6a8:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     6aa:	23c4      	movs	r3, #196	; 0xc4
     6ac:	039b      	lsls	r3, r3, #14
     6ae:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     6b0:	2301      	movs	r3, #1
     6b2:	425b      	negs	r3, r3
     6b4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     6b6:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     6b8:	4b28      	ldr	r3, [pc, #160]	; (75c <InitializeSerialConsole+0x11c>)
     6ba:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     6bc:	4b28      	ldr	r3, [pc, #160]	; (760 <InitializeSerialConsole+0x120>)
     6be:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     6c0:	4d28      	ldr	r5, [pc, #160]	; (764 <InitializeSerialConsole+0x124>)
     6c2:	4c29      	ldr	r4, [pc, #164]	; (768 <InitializeSerialConsole+0x128>)
     6c4:	466a      	mov	r2, sp
     6c6:	4929      	ldr	r1, [pc, #164]	; (76c <InitializeSerialConsole+0x12c>)
     6c8:	0028      	movs	r0, r5
     6ca:	47a0      	blx	r4
     6cc:	2800      	cmp	r0, #0
     6ce:	d1f9      	bne.n	6c4 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     6d0:	4d24      	ldr	r5, [pc, #144]	; (764 <InitializeSerialConsole+0x124>)
     6d2:	4b27      	ldr	r3, [pc, #156]	; (770 <InitializeSerialConsole+0x130>)
     6d4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     6d6:	4a27      	ldr	r2, [pc, #156]	; (774 <InitializeSerialConsole+0x134>)
     6d8:	4b27      	ldr	r3, [pc, #156]	; (778 <InitializeSerialConsole+0x138>)
     6da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6dc:	4a27      	ldr	r2, [pc, #156]	; (77c <InitializeSerialConsole+0x13c>)
     6de:	4b28      	ldr	r3, [pc, #160]	; (780 <InitializeSerialConsole+0x140>)
     6e0:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6e2:	4e28      	ldr	r6, [pc, #160]	; (784 <InitializeSerialConsole+0x144>)
     6e4:	6833      	ldr	r3, [r6, #0]
     6e6:	6898      	ldr	r0, [r3, #8]
     6e8:	2100      	movs	r1, #0
     6ea:	4c27      	ldr	r4, [pc, #156]	; (788 <InitializeSerialConsole+0x148>)
     6ec:	47a0      	blx	r4
	setbuf(stdin, NULL);
     6ee:	6833      	ldr	r3, [r6, #0]
     6f0:	6858      	ldr	r0, [r3, #4]
     6f2:	2100      	movs	r1, #0
     6f4:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6f6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     6f8:	0020      	movs	r0, r4
     6fa:	4b24      	ldr	r3, [pc, #144]	; (78c <InitializeSerialConsole+0x14c>)
     6fc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6fe:	231f      	movs	r3, #31
     700:	4018      	ands	r0, r3
     702:	3b1e      	subs	r3, #30
     704:	4083      	lsls	r3, r0
     706:	4a22      	ldr	r2, [pc, #136]	; (790 <InitializeSerialConsole+0x150>)
     708:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     70a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     70c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     70e:	2b00      	cmp	r3, #0
     710:	d1fc      	bne.n	70c <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     712:	6823      	ldr	r3, [r4, #0]
     714:	2202      	movs	r2, #2
     716:	4313      	orrs	r3, r2
     718:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     71a:	4c12      	ldr	r4, [pc, #72]	; (764 <InitializeSerialConsole+0x124>)
     71c:	2200      	movs	r2, #0
     71e:	491d      	ldr	r1, [pc, #116]	; (794 <InitializeSerialConsole+0x154>)
     720:	0020      	movs	r0, r4
     722:	4d1d      	ldr	r5, [pc, #116]	; (798 <InitializeSerialConsole+0x158>)
     724:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     726:	2201      	movs	r2, #1
     728:	491c      	ldr	r1, [pc, #112]	; (79c <InitializeSerialConsole+0x15c>)
     72a:	0020      	movs	r0, r4
     72c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     72e:	2231      	movs	r2, #49	; 0x31
     730:	5ca3      	ldrb	r3, [r4, r2]
     732:	2103      	movs	r1, #3
     734:	430b      	orrs	r3, r1
     736:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     738:	3a30      	subs	r2, #48	; 0x30
     73a:	4919      	ldr	r1, [pc, #100]	; (7a0 <InitializeSerialConsole+0x160>)
     73c:	0020      	movs	r0, r4
     73e:	4b19      	ldr	r3, [pc, #100]	; (7a4 <InitializeSerialConsole+0x164>)
     740:	4798      	blx	r3
}
     742:	b010      	add	sp, #64	; 0x40
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	2000072c 	.word	0x2000072c
     74c:	00000549 	.word	0x00000549
     750:	20000324 	.word	0x20000324
     754:	2000032c 	.word	0x2000032c
     758:	20000b30 	.word	0x20000b30
     75c:	002a0003 	.word	0x002a0003
     760:	002b0003 	.word	0x002b0003
     764:	200002f0 	.word	0x200002f0
     768:	00002841 	.word	0x00002841
     76c:	42001800 	.word	0x42001800
     770:	20000b5c 	.word	0x20000b5c
     774:	000005f9 	.word	0x000005f9
     778:	20000b58 	.word	0x20000b58
     77c:	000005cd 	.word	0x000005cd
     780:	20000b54 	.word	0x20000b54
     784:	2000000c 	.word	0x2000000c
     788:	00006019 	.word	0x00006019
     78c:	00002071 	.word	0x00002071
     790:	e000e100 	.word	0xe000e100
     794:	00000611 	.word	0x00000611
     798:	00002cad 	.word	0x00002cad
     79c:	00000855 	.word	0x00000855
     7a0:	20000328 	.word	0x20000328
     7a4:	00002ce5 	.word	0x00002ce5

000007a8 <DeinitializeSerialConsole>:
{
     7a8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7aa:	4d0a      	ldr	r5, [pc, #40]	; (7d4 <DeinitializeSerialConsole+0x2c>)
     7ac:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7ae:	0020      	movs	r0, r4
     7b0:	4b09      	ldr	r3, [pc, #36]	; (7d8 <DeinitializeSerialConsole+0x30>)
     7b2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7b4:	231f      	movs	r3, #31
     7b6:	4018      	ands	r0, r3
     7b8:	3b1e      	subs	r3, #30
     7ba:	4083      	lsls	r3, r0
     7bc:	2280      	movs	r2, #128	; 0x80
     7be:	4907      	ldr	r1, [pc, #28]	; (7dc <DeinitializeSerialConsole+0x34>)
     7c0:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7c4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7c6:	2b00      	cmp	r3, #0
     7c8:	d1fc      	bne.n	7c4 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     7ca:	6823      	ldr	r3, [r4, #0]
     7cc:	2202      	movs	r2, #2
     7ce:	4393      	bics	r3, r2
     7d0:	6023      	str	r3, [r4, #0]
}
     7d2:	bd70      	pop	{r4, r5, r6, pc}
     7d4:	200002f0 	.word	0x200002f0
     7d8:	00002071 	.word	0x00002071
     7dc:	e000e100 	.word	0xe000e100

000007e0 <SerialConsoleWriteString>:
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	46c6      	mov	lr, r8
     7e4:	b500      	push	{lr}
     7e6:	0005      	movs	r5, r0
     7e8:	2400      	movs	r4, #0
	if(string != NULL)
     7ea:	2800      	cmp	r0, #0
     7ec:	d012      	beq.n	814 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     7ee:	4e11      	ldr	r6, [pc, #68]	; (834 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     7f0:	4f11      	ldr	r7, [pc, #68]	; (838 <SerialConsoleWriteString+0x58>)
     7f2:	4b12      	ldr	r3, [pc, #72]	; (83c <SerialConsoleWriteString+0x5c>)
     7f4:	4698      	mov	r8, r3
     7f6:	e003      	b.n	800 <SerialConsoleWriteString+0x20>
     7f8:	5d29      	ldrb	r1, [r5, r4]
     7fa:	6838      	ldr	r0, [r7, #0]
     7fc:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     7fe:	3401      	adds	r4, #1
     800:	0028      	movs	r0, r5
     802:	47b0      	blx	r6
     804:	4284      	cmp	r4, r0
     806:	d3f7      	bcc.n	7f8 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     808:	2101      	movs	r1, #1
     80a:	480d      	ldr	r0, [pc, #52]	; (840 <SerialConsoleWriteString+0x60>)
     80c:	4b0d      	ldr	r3, [pc, #52]	; (844 <SerialConsoleWriteString+0x64>)
     80e:	4798      	blx	r3
     810:	2800      	cmp	r0, #0
     812:	d002      	beq.n	81a <SerialConsoleWriteString+0x3a>
}
     814:	bc04      	pop	{r2}
     816:	4690      	mov	r8, r2
     818:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     81a:	4c0b      	ldr	r4, [pc, #44]	; (848 <SerialConsoleWriteString+0x68>)
     81c:	4b06      	ldr	r3, [pc, #24]	; (838 <SerialConsoleWriteString+0x58>)
     81e:	6818      	ldr	r0, [r3, #0]
     820:	0021      	movs	r1, r4
     822:	4b0a      	ldr	r3, [pc, #40]	; (84c <SerialConsoleWriteString+0x6c>)
     824:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     826:	2201      	movs	r2, #1
     828:	0021      	movs	r1, r4
     82a:	4805      	ldr	r0, [pc, #20]	; (840 <SerialConsoleWriteString+0x60>)
     82c:	4b08      	ldr	r3, [pc, #32]	; (850 <SerialConsoleWriteString+0x70>)
     82e:	4798      	blx	r3
}
     830:	e7f0      	b.n	814 <SerialConsoleWriteString+0x34>
     832:	46c0      	nop			; (mov r8, r8)
     834:	00006199 	.word	0x00006199
     838:	20000b30 	.word	0x20000b30
     83c:	00000569 	.word	0x00000569
     840:	200002f0 	.word	0x200002f0
     844:	00002d05 	.word	0x00002d05
     848:	20000b2c 	.word	0x20000b2c
     84c:	00000595 	.word	0x00000595
     850:	00002cc5 	.word	0x00002cc5

00000854 <usart_read_callback>:
{
     854:	b510      	push	{r4, lr}
     856:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     858:	4c0d      	ldr	r4, [pc, #52]	; (890 <usart_read_callback+0x3c>)
     85a:	0020      	movs	r0, r4
     85c:	4b0d      	ldr	r3, [pc, #52]	; (894 <usart_read_callback+0x40>)
     85e:	4798      	blx	r3
	if(latestRx == 0x08)
     860:	7823      	ldrb	r3, [r4, #0]
     862:	2b08      	cmp	r3, #8
     864:	d00c      	beq.n	880 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     866:	4c0a      	ldr	r4, [pc, #40]	; (890 <usart_read_callback+0x3c>)
     868:	7821      	ldrb	r1, [r4, #0]
     86a:	4b0b      	ldr	r3, [pc, #44]	; (898 <usart_read_callback+0x44>)
     86c:	6818      	ldr	r0, [r3, #0]
     86e:	4b0b      	ldr	r3, [pc, #44]	; (89c <usart_read_callback+0x48>)
     870:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     872:	2201      	movs	r2, #1
     874:	0021      	movs	r1, r4
     876:	480a      	ldr	r0, [pc, #40]	; (8a0 <usart_read_callback+0x4c>)
     878:	4b0a      	ldr	r3, [pc, #40]	; (8a4 <usart_read_callback+0x50>)
     87a:	4798      	blx	r3
}
     87c:	b002      	add	sp, #8
     87e:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     880:	a801      	add	r0, sp, #4
     882:	3318      	adds	r3, #24
     884:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     886:	3b18      	subs	r3, #24
     888:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <usart_read_callback+0x40>)
     88c:	4798      	blx	r3
     88e:	e7ea      	b.n	866 <usart_read_callback+0x12>
     890:	20000328 	.word	0x20000328
     894:	000007e1 	.word	0x000007e1
     898:	20000324 	.word	0x20000324
     89c:	00000569 	.word	0x00000569
     8a0:	200002f0 	.word	0x200002f0
     8a4:	00002ce5 	.word	0x00002ce5

000008a8 <setLogLevel>:
	currentDebugLevel = debugLevel;
     8a8:	4b01      	ldr	r3, [pc, #4]	; (8b0 <setLogLevel+0x8>)
     8aa:	7018      	strb	r0, [r3, #0]
}
     8ac:	4770      	bx	lr
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	200001fe 	.word	0x200001fe

000008b4 <LogMessage>:
{
     8b4:	b40e      	push	{r1, r2, r3}
     8b6:	b500      	push	{lr}
     8b8:	b096      	sub	sp, #88	; 0x58
		if (level>=currentDebugLevel)
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <LogMessage+0x2c>)
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	4283      	cmp	r3, r0
     8c0:	d903      	bls.n	8ca <LogMessage+0x16>
};
     8c2:	b016      	add	sp, #88	; 0x58
     8c4:	bc08      	pop	{r3}
     8c6:	b003      	add	sp, #12
     8c8:	4718      	bx	r3
			va_start(aptr, format);
     8ca:	aa18      	add	r2, sp, #96	; 0x60
     8cc:	9201      	str	r2, [sp, #4]
			vsprintf(buffer, format, aptr);
     8ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
     8d0:	a802      	add	r0, sp, #8
     8d2:	4b04      	ldr	r3, [pc, #16]	; (8e4 <LogMessage+0x30>)
     8d4:	4798      	blx	r3
			SerialConsoleWriteString(buffer);
     8d6:	a802      	add	r0, sp, #8
     8d8:	4b03      	ldr	r3, [pc, #12]	; (8e8 <LogMessage+0x34>)
     8da:	4798      	blx	r3
};
     8dc:	e7f1      	b.n	8c2 <LogMessage+0xe>
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	200001fe 	.word	0x200001fe
     8e4:	000063bd 	.word	0x000063bd
     8e8:	000007e1 	.word	0x000007e1

000008ec <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     8ec:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     8ee:	4b06      	ldr	r3, [pc, #24]	; (908 <sd_mmc_configure_slot+0x1c>)
     8f0:	6819      	ldr	r1, [r3, #0]
     8f2:	7f8b      	ldrb	r3, [r1, #30]
     8f4:	1e5a      	subs	r2, r3, #1
     8f6:	4193      	sbcs	r3, r2
     8f8:	b2db      	uxtb	r3, r3
     8fa:	7b4a      	ldrb	r2, [r1, #13]
     8fc:	6809      	ldr	r1, [r1, #0]
     8fe:	4803      	ldr	r0, [pc, #12]	; (90c <sd_mmc_configure_slot+0x20>)
     900:	7800      	ldrb	r0, [r0, #0]
     902:	4c03      	ldr	r4, [pc, #12]	; (910 <sd_mmc_configure_slot+0x24>)
     904:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     906:	bd10      	pop	{r4, pc}
     908:	20000200 	.word	0x20000200
     90c:	20000228 	.word	0x20000228
     910:	000015a9 	.word	0x000015a9

00000914 <sd_mmc_select_slot>:
{
     914:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     916:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     918:	2800      	cmp	r0, #0
     91a:	d001      	beq.n	920 <sd_mmc_select_slot+0xc>
}
     91c:	0018      	movs	r0, r3
     91e:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     920:	4b0e      	ldr	r3, [pc, #56]	; (95c <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     922:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     924:	3b03      	subs	r3, #3
     926:	2b01      	cmp	r3, #1
     928:	d90d      	bls.n	946 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     92a:	2200      	movs	r2, #0
     92c:	4b0c      	ldr	r3, [pc, #48]	; (960 <sd_mmc_select_slot+0x4c>)
     92e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     930:	4c0a      	ldr	r4, [pc, #40]	; (95c <sd_mmc_select_slot+0x48>)
     932:	4b0c      	ldr	r3, [pc, #48]	; (964 <sd_mmc_select_slot+0x50>)
     934:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     936:	4b0c      	ldr	r3, [pc, #48]	; (968 <sd_mmc_select_slot+0x54>)
     938:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     93a:	7aa3      	ldrb	r3, [r4, #10]
     93c:	3b02      	subs	r3, #2
     93e:	4258      	negs	r0, r3
     940:	4143      	adcs	r3, r0
     942:	b2db      	uxtb	r3, r3
     944:	e7ea      	b.n	91c <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     946:	4b05      	ldr	r3, [pc, #20]	; (95c <sd_mmc_select_slot+0x48>)
     948:	2202      	movs	r2, #2
     94a:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     94c:	4a07      	ldr	r2, [pc, #28]	; (96c <sd_mmc_select_slot+0x58>)
     94e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     950:	2201      	movs	r2, #1
     952:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     954:	2200      	movs	r2, #0
     956:	779a      	strb	r2, [r3, #30]
     958:	e7e7      	b.n	92a <sd_mmc_select_slot+0x16>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	20000204 	.word	0x20000204
     960:	20000228 	.word	0x20000228
     964:	20000200 	.word	0x20000200
     968:	000008ed 	.word	0x000008ed
     96c:	00061a80 	.word	0x00061a80

00000970 <sd_mmc_cmd13>:
{
     970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     972:	4d09      	ldr	r5, [pc, #36]	; (998 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     974:	4f09      	ldr	r7, [pc, #36]	; (99c <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     976:	4e0a      	ldr	r6, [pc, #40]	; (9a0 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     978:	2100      	movs	r1, #0
     97a:	480a      	ldr	r0, [pc, #40]	; (9a4 <sd_mmc_cmd13+0x34>)
     97c:	47b8      	blx	r7
     97e:	1e04      	subs	r4, r0, #0
     980:	d007      	beq.n	992 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     982:	47b0      	blx	r6
     984:	23ff      	movs	r3, #255	; 0xff
     986:	4203      	tst	r3, r0
     988:	d003      	beq.n	992 <sd_mmc_cmd13+0x22>
     98a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     98c:	2d00      	cmp	r5, #0
     98e:	d1f3      	bne.n	978 <sd_mmc_cmd13+0x8>
			return false;
     990:	2400      	movs	r4, #0
}
     992:	0020      	movs	r0, r4
     994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00030d41 	.word	0x00030d41
     99c:	000017ed 	.word	0x000017ed
     9a0:	00001805 	.word	0x00001805
     9a4:	00001b0d 	.word	0x00001b0d

000009a8 <sd_mmc_cmd9_spi>:
{
     9a8:	b510      	push	{r4, lr}
     9aa:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     9ac:	4b0c      	ldr	r3, [pc, #48]	; (9e0 <sd_mmc_cmd9_spi+0x38>)
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	8919      	ldrh	r1, [r3, #8]
     9b2:	0409      	lsls	r1, r1, #16
     9b4:	2301      	movs	r3, #1
     9b6:	9300      	str	r3, [sp, #0]
     9b8:	2210      	movs	r2, #16
     9ba:	480a      	ldr	r0, [pc, #40]	; (9e4 <sd_mmc_cmd9_spi+0x3c>)
     9bc:	4c0a      	ldr	r4, [pc, #40]	; (9e8 <sd_mmc_cmd9_spi+0x40>)
     9be:	47a0      	blx	r4
     9c0:	2800      	cmp	r0, #0
     9c2:	d101      	bne.n	9c8 <sd_mmc_cmd9_spi+0x20>
}
     9c4:	b002      	add	sp, #8
     9c6:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <sd_mmc_cmd9_spi+0x38>)
     9ca:	6818      	ldr	r0, [r3, #0]
     9cc:	300e      	adds	r0, #14
     9ce:	2101      	movs	r1, #1
     9d0:	4b06      	ldr	r3, [pc, #24]	; (9ec <sd_mmc_cmd9_spi+0x44>)
     9d2:	4798      	blx	r3
     9d4:	2800      	cmp	r0, #0
     9d6:	d0f5      	beq.n	9c4 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <sd_mmc_cmd9_spi+0x48>)
     9da:	4798      	blx	r3
     9dc:	e7f2      	b.n	9c4 <sd_mmc_cmd9_spi+0x1c>
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	20000200 	.word	0x20000200
     9e4:	00081109 	.word	0x00081109
     9e8:	0000165d 	.word	0x0000165d
     9ec:	00001889 	.word	0x00001889
     9f0:	00001915 	.word	0x00001915

000009f4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     9f4:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <sd_mmc_deselect_slot+0x14>)
     9f8:	781b      	ldrb	r3, [r3, #0]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d000      	beq.n	a00 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     9fe:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     a00:	2000      	movs	r0, #0
     a02:	4b02      	ldr	r3, [pc, #8]	; (a0c <sd_mmc_deselect_slot+0x18>)
     a04:	4798      	blx	r3
}
     a06:	e7fa      	b.n	9fe <sd_mmc_deselect_slot+0xa>
     a08:	20000228 	.word	0x20000228
     a0c:	000015fd 	.word	0x000015fd

00000a10 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     a10:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     a12:	2204      	movs	r2, #4
     a14:	4b03      	ldr	r3, [pc, #12]	; (a24 <sd_mmc_init+0x14>)
     a16:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     a18:	32fb      	adds	r2, #251	; 0xfb
     a1a:	4b03      	ldr	r3, [pc, #12]	; (a28 <sd_mmc_init+0x18>)
     a1c:	701a      	strb	r2, [r3, #0]
	driver_init();
     a1e:	4b03      	ldr	r3, [pc, #12]	; (a2c <sd_mmc_init+0x1c>)
     a20:	4798      	blx	r3
}
     a22:	bd10      	pop	{r4, pc}
     a24:	20000204 	.word	0x20000204
     a28:	20000228 	.word	0x20000228
     a2c:	000014a9 	.word	0x000014a9

00000a30 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     a30:	b5f0      	push	{r4, r5, r6, r7, lr}
     a32:	46c6      	mov	lr, r8
     a34:	b500      	push	{lr}
     a36:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     a38:	4bcb      	ldr	r3, [pc, #812]	; (d68 <sd_mmc_check+0x338>)
     a3a:	4798      	blx	r3
     a3c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     a3e:	2801      	cmp	r0, #1
     a40:	d006      	beq.n	a50 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     a42:	4bca      	ldr	r3, [pc, #808]	; (d6c <sd_mmc_check+0x33c>)
     a44:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     a46:	0020      	movs	r0, r4
     a48:	b008      	add	sp, #32
     a4a:	bc04      	pop	{r2}
     a4c:	4690      	mov	r8, r2
     a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     a50:	4bc7      	ldr	r3, [pc, #796]	; (d70 <sd_mmc_check+0x340>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	2201      	movs	r2, #1
     a56:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     a58:	2200      	movs	r2, #0
     a5a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     a5c:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     a5e:	4bc5      	ldr	r3, [pc, #788]	; (d74 <sd_mmc_check+0x344>)
     a60:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a62:	2100      	movs	r1, #0
     a64:	2088      	movs	r0, #136	; 0x88
     a66:	0140      	lsls	r0, r0, #5
     a68:	4bc3      	ldr	r3, [pc, #780]	; (d78 <sd_mmc_check+0x348>)
     a6a:	4798      	blx	r3
     a6c:	2800      	cmp	r0, #0
     a6e:	d107      	bne.n	a80 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     a70:	4bbf      	ldr	r3, [pc, #764]	; (d70 <sd_mmc_check+0x340>)
     a72:	681b      	ldr	r3, [r3, #0]
     a74:	2203      	movs	r2, #3
     a76:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     a78:	4bbc      	ldr	r3, [pc, #752]	; (d6c <sd_mmc_check+0x33c>)
     a7a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     a7c:	2403      	movs	r4, #3
     a7e:	e7e2      	b.n	a46 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a80:	21d5      	movs	r1, #213	; 0xd5
     a82:	0049      	lsls	r1, r1, #1
     a84:	48bd      	ldr	r0, [pc, #756]	; (d7c <sd_mmc_check+0x34c>)
     a86:	4bbc      	ldr	r3, [pc, #752]	; (d78 <sd_mmc_check+0x348>)
     a88:	4798      	blx	r3
	*v2 = 0;
     a8a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a8c:	2800      	cmp	r0, #0
     a8e:	d125      	bne.n	adc <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a90:	4bb7      	ldr	r3, [pc, #732]	; (d70 <sd_mmc_check+0x340>)
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	7adb      	ldrb	r3, [r3, #11]
     a96:	07db      	lsls	r3, r3, #31
     a98:	d500      	bpl.n	a9c <sd_mmc_check+0x6c>
     a9a:	e1eb      	b.n	e74 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a9c:	4bb4      	ldr	r3, [pc, #720]	; (d70 <sd_mmc_check+0x340>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	7ada      	ldrb	r2, [r3, #11]
     aa2:	2309      	movs	r3, #9
     aa4:	4013      	ands	r3, r2
     aa6:	2b01      	cmp	r3, #1
     aa8:	d10f      	bne.n	aca <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     aaa:	2180      	movs	r1, #128	; 0x80
     aac:	0089      	lsls	r1, r1, #2
     aae:	48b4      	ldr	r0, [pc, #720]	; (d80 <sd_mmc_check+0x350>)
     ab0:	4bb1      	ldr	r3, [pc, #708]	; (d78 <sd_mmc_check+0x348>)
     ab2:	4798      	blx	r3
     ab4:	2800      	cmp	r0, #0
     ab6:	d0db      	beq.n	a70 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ab8:	4bad      	ldr	r3, [pc, #692]	; (d70 <sd_mmc_check+0x340>)
     aba:	681b      	ldr	r3, [r3, #0]
     abc:	7adb      	ldrb	r3, [r3, #11]
     abe:	07db      	lsls	r3, r3, #31
     ac0:	d503      	bpl.n	aca <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     ac2:	4bb0      	ldr	r3, [pc, #704]	; (d84 <sd_mmc_check+0x354>)
     ac4:	4798      	blx	r3
     ac6:	2800      	cmp	r0, #0
     ac8:	d0d2      	beq.n	a70 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     aca:	4baf      	ldr	r3, [pc, #700]	; (d88 <sd_mmc_check+0x358>)
     acc:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     ace:	4ba8      	ldr	r3, [pc, #672]	; (d70 <sd_mmc_check+0x340>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	2200      	movs	r2, #0
     ad4:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     ad6:	4ba5      	ldr	r3, [pc, #660]	; (d6c <sd_mmc_check+0x33c>)
     ad8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     ada:	e7b4      	b.n	a46 <sd_mmc_check+0x16>
	resp = driver_get_response();
     adc:	4bab      	ldr	r3, [pc, #684]	; (d8c <sd_mmc_check+0x35c>)
     ade:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     ae0:	1c43      	adds	r3, r0, #1
     ae2:	d100      	bne.n	ae6 <sd_mmc_check+0xb6>
     ae4:	e1c4      	b.n	e70 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     ae6:	0500      	lsls	r0, r0, #20
     ae8:	0d00      	lsrs	r0, r0, #20
     aea:	23d5      	movs	r3, #213	; 0xd5
     aec:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     aee:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     af0:	4298      	cmp	r0, r3
     af2:	d1bd      	bne.n	a70 <sd_mmc_check+0x40>
     af4:	e7cc      	b.n	a90 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     af6:	2100      	movs	r1, #0
     af8:	48a5      	ldr	r0, [pc, #660]	; (d90 <sd_mmc_check+0x360>)
     afa:	4b9f      	ldr	r3, [pc, #636]	; (d78 <sd_mmc_check+0x348>)
     afc:	4798      	blx	r3
     afe:	2800      	cmp	r0, #0
     b00:	d119      	bne.n	b36 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     b02:	4b9b      	ldr	r3, [pc, #620]	; (d70 <sd_mmc_check+0x340>)
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	2202      	movs	r2, #2
     b08:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     b0a:	2100      	movs	r1, #0
     b0c:	2088      	movs	r0, #136	; 0x88
     b0e:	0140      	lsls	r0, r0, #5
     b10:	4b99      	ldr	r3, [pc, #612]	; (d78 <sd_mmc_check+0x348>)
     b12:	4798      	blx	r3
     b14:	2800      	cmp	r0, #0
     b16:	d0ab      	beq.n	a70 <sd_mmc_check+0x40>
     b18:	4d9e      	ldr	r5, [pc, #632]	; (d94 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     b1a:	4f97      	ldr	r7, [pc, #604]	; (d78 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     b1c:	4e9b      	ldr	r6, [pc, #620]	; (d8c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     b1e:	2100      	movs	r1, #0
     b20:	489d      	ldr	r0, [pc, #628]	; (d98 <sd_mmc_check+0x368>)
     b22:	47b8      	blx	r7
     b24:	2800      	cmp	r0, #0
     b26:	d0a3      	beq.n	a70 <sd_mmc_check+0x40>
		resp = driver_get_response();
     b28:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b2a:	07c3      	lsls	r3, r0, #31
     b2c:	d57d      	bpl.n	c2a <sd_mmc_check+0x1fa>
     b2e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     b30:	2d00      	cmp	r5, #0
     b32:	d1f4      	bne.n	b1e <sd_mmc_check+0xee>
     b34:	e79c      	b.n	a70 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     b36:	4b95      	ldr	r3, [pc, #596]	; (d8c <sd_mmc_check+0x35c>)
     b38:	4798      	blx	r3
     b3a:	0043      	lsls	r3, r0, #1
     b3c:	d505      	bpl.n	b4a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     b3e:	4b8c      	ldr	r3, [pc, #560]	; (d70 <sd_mmc_check+0x340>)
     b40:	681a      	ldr	r2, [r3, #0]
     b42:	7ad3      	ldrb	r3, [r2, #11]
     b44:	2108      	movs	r1, #8
     b46:	430b      	orrs	r3, r1
     b48:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     b4a:	2100      	movs	r1, #0
     b4c:	4893      	ldr	r0, [pc, #588]	; (d9c <sd_mmc_check+0x36c>)
     b4e:	4b8a      	ldr	r3, [pc, #552]	; (d78 <sd_mmc_check+0x348>)
     b50:	4798      	blx	r3
     b52:	2800      	cmp	r0, #0
     b54:	d08c      	beq.n	a70 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b56:	4b86      	ldr	r3, [pc, #536]	; (d70 <sd_mmc_check+0x340>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	7adb      	ldrb	r3, [r3, #11]
     b5c:	07da      	lsls	r2, r3, #31
     b5e:	d400      	bmi.n	b62 <sd_mmc_check+0x132>
     b60:	e1a4      	b.n	eac <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     b62:	4b8f      	ldr	r3, [pc, #572]	; (da0 <sd_mmc_check+0x370>)
     b64:	4798      	blx	r3
     b66:	2800      	cmp	r0, #0
     b68:	d082      	beq.n	a70 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     b6a:	4b81      	ldr	r3, [pc, #516]	; (d70 <sd_mmc_check+0x340>)
     b6c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b6e:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     b70:	2107      	movs	r1, #7
     b72:	4019      	ands	r1, r3
     b74:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b76:	488b      	ldr	r0, [pc, #556]	; (da4 <sd_mmc_check+0x374>)
     b78:	5808      	ldr	r0, [r1, r0]
     b7a:	21fa      	movs	r1, #250	; 0xfa
     b7c:	0089      	lsls	r1, r1, #2
     b7e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     b80:	065b      	lsls	r3, r3, #25
     b82:	0f1b      	lsrs	r3, r3, #28
     b84:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b86:	4888      	ldr	r0, [pc, #544]	; (da8 <sd_mmc_check+0x378>)
     b88:	581b      	ldr	r3, [r3, r0]
     b8a:	434b      	muls	r3, r1
     b8c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     b8e:	7b93      	ldrb	r3, [r2, #14]
     b90:	099b      	lsrs	r3, r3, #6
     b92:	d000      	beq.n	b96 <sd_mmc_check+0x166>
     b94:	e13c      	b.n	e10 <sd_mmc_check+0x3e0>
     b96:	7d91      	ldrb	r1, [r2, #22]
     b98:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b9a:	7d53      	ldrb	r3, [r2, #21]
     b9c:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b9e:	7d10      	ldrb	r0, [r2, #20]
     ba0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ba2:	4303      	orrs	r3, r0
     ba4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ba6:	7e10      	ldrb	r0, [r2, #24]
     ba8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     baa:	7dd1      	ldrb	r1, [r2, #23]
     bac:	0049      	lsls	r1, r1, #1
     bae:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     bb0:	051b      	lsls	r3, r3, #20
     bb2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     bb4:	3301      	adds	r3, #1
     bb6:	2107      	movs	r1, #7
     bb8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     bba:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     bbc:	408b      	lsls	r3, r1
     bbe:	7cd0      	ldrb	r0, [r2, #19]
     bc0:	210f      	movs	r1, #15
     bc2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     bc4:	408b      	lsls	r3, r1
				/ 1024;
     bc6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     bc8:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     bca:	8911      	ldrh	r1, [r2, #8]
     bcc:	0409      	lsls	r1, r1, #16
     bce:	4877      	ldr	r0, [pc, #476]	; (dac <sd_mmc_check+0x37c>)
     bd0:	4b69      	ldr	r3, [pc, #420]	; (d78 <sd_mmc_check+0x348>)
     bd2:	4798      	blx	r3
     bd4:	2800      	cmp	r0, #0
     bd6:	d100      	bne.n	bda <sd_mmc_check+0x1aa>
     bd8:	e74a      	b.n	a70 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     bda:	2301      	movs	r3, #1
     bdc:	9300      	str	r3, [sp, #0]
     bde:	2208      	movs	r2, #8
     be0:	2100      	movs	r1, #0
     be2:	4873      	ldr	r0, [pc, #460]	; (db0 <sd_mmc_check+0x380>)
     be4:	4d73      	ldr	r5, [pc, #460]	; (db4 <sd_mmc_check+0x384>)
     be6:	47a8      	blx	r5
     be8:	2800      	cmp	r0, #0
     bea:	d100      	bne.n	bee <sd_mmc_check+0x1be>
     bec:	e740      	b.n	a70 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     bee:	2101      	movs	r1, #1
     bf0:	a806      	add	r0, sp, #24
     bf2:	4b71      	ldr	r3, [pc, #452]	; (db8 <sd_mmc_check+0x388>)
     bf4:	4798      	blx	r3
     bf6:	2800      	cmp	r0, #0
     bf8:	d100      	bne.n	bfc <sd_mmc_check+0x1cc>
     bfa:	e739      	b.n	a70 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     bfc:	4b6f      	ldr	r3, [pc, #444]	; (dbc <sd_mmc_check+0x38c>)
     bfe:	4798      	blx	r3
     c00:	2800      	cmp	r0, #0
     c02:	d100      	bne.n	c06 <sd_mmc_check+0x1d6>
     c04:	e734      	b.n	a70 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c06:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	220f      	movs	r2, #15
     c0c:	4013      	ands	r3, r2
     c0e:	2b01      	cmp	r3, #1
     c10:	d100      	bne.n	c14 <sd_mmc_check+0x1e4>
     c12:	e119      	b.n	e48 <sd_mmc_check+0x418>
     c14:	2b00      	cmp	r3, #0
     c16:	d100      	bne.n	c1a <sd_mmc_check+0x1ea>
     c18:	e109      	b.n	e2e <sd_mmc_check+0x3fe>
     c1a:	2b02      	cmp	r3, #2
     c1c:	d100      	bne.n	c20 <sd_mmc_check+0x1f0>
     c1e:	e118      	b.n	e52 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     c20:	4b53      	ldr	r3, [pc, #332]	; (d70 <sd_mmc_check+0x340>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	2210      	movs	r2, #16
     c26:	731a      	strb	r2, [r3, #12]
     c28:	e105      	b.n	e36 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     c2a:	2100      	movs	r1, #0
     c2c:	4858      	ldr	r0, [pc, #352]	; (d90 <sd_mmc_check+0x360>)
     c2e:	4b52      	ldr	r3, [pc, #328]	; (d78 <sd_mmc_check+0x348>)
     c30:	4798      	blx	r3
     c32:	2800      	cmp	r0, #0
     c34:	d100      	bne.n	c38 <sd_mmc_check+0x208>
     c36:	e71b      	b.n	a70 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     c38:	4b54      	ldr	r3, [pc, #336]	; (d8c <sd_mmc_check+0x35c>)
     c3a:	4798      	blx	r3
     c3c:	23c0      	movs	r3, #192	; 0xc0
     c3e:	05db      	lsls	r3, r3, #23
     c40:	4018      	ands	r0, r3
     c42:	2380      	movs	r3, #128	; 0x80
     c44:	05db      	lsls	r3, r3, #23
     c46:	4298      	cmp	r0, r3
     c48:	d105      	bne.n	c56 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     c4a:	4b49      	ldr	r3, [pc, #292]	; (d70 <sd_mmc_check+0x340>)
     c4c:	681a      	ldr	r2, [r3, #0]
     c4e:	7ad1      	ldrb	r1, [r2, #11]
     c50:	2308      	movs	r3, #8
     c52:	430b      	orrs	r3, r1
     c54:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     c56:	2100      	movs	r1, #0
     c58:	4850      	ldr	r0, [pc, #320]	; (d9c <sd_mmc_check+0x36c>)
     c5a:	4b47      	ldr	r3, [pc, #284]	; (d78 <sd_mmc_check+0x348>)
     c5c:	4798      	blx	r3
     c5e:	2800      	cmp	r0, #0
     c60:	d100      	bne.n	c64 <sd_mmc_check+0x234>
     c62:	e705      	b.n	a70 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     c64:	4b4e      	ldr	r3, [pc, #312]	; (da0 <sd_mmc_check+0x370>)
     c66:	4798      	blx	r3
     c68:	2800      	cmp	r0, #0
     c6a:	d100      	bne.n	c6e <sd_mmc_check+0x23e>
     c6c:	e700      	b.n	a70 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c6e:	4b40      	ldr	r3, [pc, #256]	; (d70 <sd_mmc_check+0x340>)
     c70:	681a      	ldr	r2, [r3, #0]
     c72:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     c74:	069b      	lsls	r3, r3, #26
     c76:	0f1b      	lsrs	r3, r3, #28
     c78:	2b02      	cmp	r3, #2
     c7a:	d100      	bne.n	c7e <sd_mmc_check+0x24e>
     c7c:	e0a8      	b.n	dd0 <sd_mmc_check+0x3a0>
     c7e:	d907      	bls.n	c90 <sd_mmc_check+0x260>
     c80:	2b03      	cmp	r3, #3
     c82:	d100      	bne.n	c86 <sd_mmc_check+0x256>
     c84:	e0a7      	b.n	dd6 <sd_mmc_check+0x3a6>
     c86:	2b04      	cmp	r3, #4
     c88:	d104      	bne.n	c94 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     c8a:	2340      	movs	r3, #64	; 0x40
     c8c:	7313      	strb	r3, [r2, #12]
     c8e:	e003      	b.n	c98 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c90:	2b01      	cmp	r3, #1
     c92:	d066      	beq.n	d62 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     c94:	2312      	movs	r3, #18
     c96:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c98:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c9a:	0659      	lsls	r1, r3, #25
     c9c:	0f09      	lsrs	r1, r1, #28
     c9e:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     ca0:	2007      	movs	r0, #7
     ca2:	4003      	ands	r3, r0
     ca4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     ca6:	483f      	ldr	r0, [pc, #252]	; (da4 <sd_mmc_check+0x374>)
     ca8:	5818      	ldr	r0, [r3, r0]
     caa:	23fa      	movs	r3, #250	; 0xfa
     cac:	009b      	lsls	r3, r3, #2
     cae:	4343      	muls	r3, r0
     cb0:	4843      	ldr	r0, [pc, #268]	; (dc0 <sd_mmc_check+0x390>)
     cb2:	5809      	ldr	r1, [r1, r0]
     cb4:	434b      	muls	r3, r1
     cb6:	6013      	str	r3, [r2, #0]
     cb8:	7d91      	ldrb	r1, [r2, #22]
     cba:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cbc:	7d53      	ldrb	r3, [r2, #21]
     cbe:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cc0:	7d10      	ldrb	r0, [r2, #20]
     cc2:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cc4:	4303      	orrs	r3, r0
     cc6:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     cc8:	051b      	lsls	r3, r3, #20
     cca:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     ccc:	493d      	ldr	r1, [pc, #244]	; (dc4 <sd_mmc_check+0x394>)
     cce:	428b      	cmp	r3, r1
     cd0:	d00f      	beq.n	cf2 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cd2:	7e10      	ldrb	r0, [r2, #24]
     cd4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cd6:	7dd1      	ldrb	r1, [r2, #23]
     cd8:	0049      	lsls	r1, r1, #1
     cda:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     cdc:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     cde:	2007      	movs	r0, #7
     ce0:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     ce2:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     ce4:	408b      	lsls	r3, r1
     ce6:	7cd1      	ldrb	r1, [r2, #19]
     ce8:	3008      	adds	r0, #8
     cea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     cec:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     cee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     cf0:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     cf2:	7b13      	ldrb	r3, [r2, #12]
     cf4:	2b3f      	cmp	r3, #63	; 0x3f
     cf6:	d97b      	bls.n	df0 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     cf8:	2100      	movs	r1, #0
     cfa:	9100      	str	r1, [sp, #0]
     cfc:	2301      	movs	r3, #1
     cfe:	2280      	movs	r2, #128	; 0x80
     d00:	0092      	lsls	r2, r2, #2
     d02:	4831      	ldr	r0, [pc, #196]	; (dc8 <sd_mmc_check+0x398>)
     d04:	4d2b      	ldr	r5, [pc, #172]	; (db4 <sd_mmc_check+0x384>)
     d06:	47a8      	blx	r5
     d08:	2800      	cmp	r0, #0
     d0a:	d100      	bne.n	d0e <sd_mmc_check+0x2de>
     d0c:	e6b0      	b.n	a70 <sd_mmc_check+0x40>
     d0e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     d10:	4e2e      	ldr	r6, [pc, #184]	; (dcc <sd_mmc_check+0x39c>)
     d12:	a805      	add	r0, sp, #20
     d14:	47b0      	blx	r6
     d16:	2800      	cmp	r0, #0
     d18:	d100      	bne.n	d1c <sd_mmc_check+0x2ec>
     d1a:	e6a9      	b.n	a70 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     d1c:	3501      	adds	r5, #1
     d1e:	b2ad      	uxth	r5, r5
     d20:	2d32      	cmp	r5, #50	; 0x32
     d22:	d1f6      	bne.n	d12 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     d24:	4b12      	ldr	r3, [pc, #72]	; (d70 <sd_mmc_check+0x340>)
     d26:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d28:	7d8a      	ldrb	r2, [r1, #22]
     d2a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d2c:	7d4b      	ldrb	r3, [r1, #21]
     d2e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d30:	7d09      	ldrb	r1, [r1, #20]
     d32:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d34:	430b      	orrs	r3, r1
     d36:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     d38:	051b      	lsls	r3, r3, #20
     d3a:	0d1b      	lsrs	r3, r3, #20
     d3c:	4a21      	ldr	r2, [pc, #132]	; (dc4 <sd_mmc_check+0x394>)
     d3e:	4293      	cmp	r3, r2
     d40:	d154      	bne.n	dec <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     d42:	4e22      	ldr	r6, [pc, #136]	; (dcc <sd_mmc_check+0x39c>)
     d44:	a806      	add	r0, sp, #24
     d46:	47b0      	blx	r6
     d48:	2800      	cmp	r0, #0
     d4a:	d100      	bne.n	d4e <sd_mmc_check+0x31e>
     d4c:	e690      	b.n	a70 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     d4e:	3501      	adds	r5, #1
     d50:	b2ad      	uxth	r5, r5
     d52:	2d35      	cmp	r5, #53	; 0x35
     d54:	d9f6      	bls.n	d44 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     d56:	4b06      	ldr	r3, [pc, #24]	; (d70 <sd_mmc_check+0x340>)
     d58:	681a      	ldr	r2, [r3, #0]
     d5a:	9b06      	ldr	r3, [sp, #24]
     d5c:	085b      	lsrs	r3, r3, #1
     d5e:	6053      	str	r3, [r2, #4]
     d60:	e044      	b.n	dec <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     d62:	2314      	movs	r3, #20
     d64:	7313      	strb	r3, [r2, #12]
     d66:	e797      	b.n	c98 <sd_mmc_check+0x268>
     d68:	00000915 	.word	0x00000915
     d6c:	000009f5 	.word	0x000009f5
     d70:	20000200 	.word	0x20000200
     d74:	00001625 	.word	0x00001625
     d78:	000017ed 	.word	0x000017ed
     d7c:	00005508 	.word	0x00005508
     d80:	00001110 	.word	0x00001110
     d84:	00000971 	.word	0x00000971
     d88:	000008ed 	.word	0x000008ed
     d8c:	00001805 	.word	0x00001805
     d90:	0000053a 	.word	0x0000053a
     d94:	00001bef 	.word	0x00001bef
     d98:	00001101 	.word	0x00001101
     d9c:	0000113b 	.word	0x0000113b
     da0:	000009a9 	.word	0x000009a9
     da4:	000070b8 	.word	0x000070b8
     da8:	000070d4 	.word	0x000070d4
     dac:	00001137 	.word	0x00001137
     db0:	00081133 	.word	0x00081133
     db4:	0000165d 	.word	0x0000165d
     db8:	00001889 	.word	0x00001889
     dbc:	00001915 	.word	0x00001915
     dc0:	00007078 	.word	0x00007078
     dc4:	00000fff 	.word	0x00000fff
     dc8:	00081108 	.word	0x00081108
     dcc:	00001811 	.word	0x00001811
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     dd0:	2322      	movs	r3, #34	; 0x22
     dd2:	7313      	strb	r3, [r2, #12]
     dd4:	e760      	b.n	c98 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     dd6:	2330      	movs	r3, #48	; 0x30
     dd8:	7313      	strb	r3, [r2, #12]
     dda:	e75d      	b.n	c98 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     ddc:	a806      	add	r0, sp, #24
     dde:	4b36      	ldr	r3, [pc, #216]	; (eb8 <sd_mmc_check+0x488>)
     de0:	4798      	blx	r3
     de2:	2800      	cmp	r0, #0
     de4:	d100      	bne.n	de8 <sd_mmc_check+0x3b8>
     de6:	e643      	b.n	a70 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     de8:	3501      	adds	r5, #1
     dea:	b2ad      	uxth	r5, r5
     dec:	2d7f      	cmp	r5, #127	; 0x7f
     dee:	d9f5      	bls.n	ddc <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     df0:	2180      	movs	r1, #128	; 0x80
     df2:	0089      	lsls	r1, r1, #2
     df4:	4831      	ldr	r0, [pc, #196]	; (ebc <sd_mmc_check+0x48c>)
     df6:	4b32      	ldr	r3, [pc, #200]	; (ec0 <sd_mmc_check+0x490>)
     df8:	4798      	blx	r3
     dfa:	2800      	cmp	r0, #0
     dfc:	d100      	bne.n	e00 <sd_mmc_check+0x3d0>
     dfe:	e637      	b.n	a70 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     e00:	4b30      	ldr	r3, [pc, #192]	; (ec4 <sd_mmc_check+0x494>)
     e02:	4798      	blx	r3
     e04:	2800      	cmp	r0, #0
     e06:	d100      	bne.n	e0a <sd_mmc_check+0x3da>
     e08:	e632      	b.n	a70 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     e0a:	4b2f      	ldr	r3, [pc, #188]	; (ec8 <sd_mmc_check+0x498>)
     e0c:	4798      	blx	r3
     e0e:	e65e      	b.n	ace <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e10:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e12:	7d93      	ldrb	r3, [r2, #22]
     e14:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e16:	7d51      	ldrb	r1, [r2, #21]
     e18:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e1a:	430b      	orrs	r3, r1
     e1c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     e1e:	029b      	lsls	r3, r3, #10
				* 512;
     e20:	085b      	lsrs	r3, r3, #1
     e22:	2180      	movs	r1, #128	; 0x80
     e24:	0089      	lsls	r1, r1, #2
     e26:	468c      	mov	ip, r1
     e28:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     e2a:	6053      	str	r3, [r2, #4]
     e2c:	e6cd      	b.n	bca <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     e2e:	4b27      	ldr	r3, [pc, #156]	; (ecc <sd_mmc_check+0x49c>)
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	2210      	movs	r2, #16
     e34:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e36:	4b25      	ldr	r3, [pc, #148]	; (ecc <sd_mmc_check+0x49c>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	7adb      	ldrb	r3, [r3, #11]
     e3c:	2209      	movs	r2, #9
     e3e:	4013      	ands	r3, r2
     e40:	2b01      	cmp	r3, #1
     e42:	d000      	beq.n	e46 <sd_mmc_check+0x416>
     e44:	e638      	b.n	ab8 <sd_mmc_check+0x88>
     e46:	e630      	b.n	aaa <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     e48:	4b20      	ldr	r3, [pc, #128]	; (ecc <sd_mmc_check+0x49c>)
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	221a      	movs	r2, #26
     e4e:	731a      	strb	r2, [r3, #12]
     e50:	e7f1      	b.n	e36 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e52:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     e54:	789b      	ldrb	r3, [r3, #2]
     e56:	09db      	lsrs	r3, r3, #7
     e58:	2b01      	cmp	r3, #1
     e5a:	d104      	bne.n	e66 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     e5c:	4b1b      	ldr	r3, [pc, #108]	; (ecc <sd_mmc_check+0x49c>)
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	2230      	movs	r2, #48	; 0x30
     e62:	731a      	strb	r2, [r3, #12]
     e64:	e7e7      	b.n	e36 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     e66:	4b19      	ldr	r3, [pc, #100]	; (ecc <sd_mmc_check+0x49c>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2220      	movs	r2, #32
     e6c:	731a      	strb	r2, [r3, #12]
     e6e:	e7e2      	b.n	e36 <sd_mmc_check+0x406>
	*v2 = 0;
     e70:	2600      	movs	r6, #0
     e72:	e60d      	b.n	a90 <sd_mmc_check+0x60>
     e74:	1e73      	subs	r3, r6, #1
     e76:	419e      	sbcs	r6, r3
     e78:	07b3      	lsls	r3, r6, #30
     e7a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e7c:	4d14      	ldr	r5, [pc, #80]	; (ed0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e7e:	4f10      	ldr	r7, [pc, #64]	; (ec0 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e80:	46b8      	mov	r8, r7
		resp = driver_get_response();
     e82:	4e14      	ldr	r6, [pc, #80]	; (ed4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e84:	2100      	movs	r1, #0
     e86:	4814      	ldr	r0, [pc, #80]	; (ed8 <sd_mmc_check+0x4a8>)
     e88:	47b8      	blx	r7
     e8a:	2800      	cmp	r0, #0
     e8c:	d100      	bne.n	e90 <sd_mmc_check+0x460>
     e8e:	e638      	b.n	b02 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e90:	9903      	ldr	r1, [sp, #12]
     e92:	4812      	ldr	r0, [pc, #72]	; (edc <sd_mmc_check+0x4ac>)
     e94:	47c0      	blx	r8
     e96:	2800      	cmp	r0, #0
     e98:	d100      	bne.n	e9c <sd_mmc_check+0x46c>
     e9a:	e632      	b.n	b02 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e9c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e9e:	07c3      	lsls	r3, r0, #31
     ea0:	d400      	bmi.n	ea4 <sd_mmc_check+0x474>
     ea2:	e628      	b.n	af6 <sd_mmc_check+0xc6>
     ea4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     ea6:	2d00      	cmp	r5, #0
     ea8:	d1ec      	bne.n	e84 <sd_mmc_check+0x454>
     eaa:	e62a      	b.n	b02 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     eac:	2209      	movs	r2, #9
     eae:	4013      	ands	r3, r2
     eb0:	2b01      	cmp	r3, #1
     eb2:	d000      	beq.n	eb6 <sd_mmc_check+0x486>
     eb4:	e609      	b.n	aca <sd_mmc_check+0x9a>
     eb6:	e5f8      	b.n	aaa <sd_mmc_check+0x7a>
     eb8:	00001811 	.word	0x00001811
     ebc:	00001110 	.word	0x00001110
     ec0:	000017ed 	.word	0x000017ed
     ec4:	00000971 	.word	0x00000971
     ec8:	000008ed 	.word	0x000008ed
     ecc:	20000200 	.word	0x20000200
     ed0:	00001bef 	.word	0x00001bef
     ed4:	00001805 	.word	0x00001805
     ed8:	00001137 	.word	0x00001137
     edc:	00001129 	.word	0x00001129

00000ee0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     ee0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ee2:	4b06      	ldr	r3, [pc, #24]	; (efc <sd_mmc_get_type+0x1c>)
     ee4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     ee6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ee8:	2800      	cmp	r0, #0
     eea:	d001      	beq.n	ef0 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     eec:	0018      	movs	r0, r3
     eee:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     ef0:	4b03      	ldr	r3, [pc, #12]	; (f00 <sd_mmc_get_type+0x20>)
     ef2:	4798      	blx	r3
	return sd_mmc_card->type;
     ef4:	4b03      	ldr	r3, [pc, #12]	; (f04 <sd_mmc_get_type+0x24>)
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	7adb      	ldrb	r3, [r3, #11]
     efa:	e7f7      	b.n	eec <sd_mmc_get_type+0xc>
     efc:	00000915 	.word	0x00000915
     f00:	000009f5 	.word	0x000009f5
     f04:	20000200 	.word	0x20000200

00000f08 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     f08:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f0a:	4b06      	ldr	r3, [pc, #24]	; (f24 <sd_mmc_get_capacity+0x1c>)
     f0c:	4798      	blx	r3
		return 0;
     f0e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f10:	2800      	cmp	r0, #0
     f12:	d001      	beq.n	f18 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     f14:	0018      	movs	r0, r3
     f16:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     f18:	4b03      	ldr	r3, [pc, #12]	; (f28 <sd_mmc_get_capacity+0x20>)
     f1a:	4798      	blx	r3
	return sd_mmc_card->capacity;
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <sd_mmc_get_capacity+0x24>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	685b      	ldr	r3, [r3, #4]
     f22:	e7f7      	b.n	f14 <sd_mmc_get_capacity+0xc>
     f24:	00000915 	.word	0x00000915
     f28:	000009f5 	.word	0x000009f5
     f2c:	20000200 	.word	0x20000200

00000f30 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     f30:	2000      	movs	r0, #0
     f32:	4770      	bx	lr

00000f34 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	b082      	sub	sp, #8
     f38:	000e      	movs	r6, r1
     f3a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     f3c:	4b16      	ldr	r3, [pc, #88]	; (f98 <sd_mmc_init_read_blocks+0x64>)
     f3e:	4798      	blx	r3
     f40:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     f42:	d002      	beq.n	f4a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     f44:	0020      	movs	r0, r4
     f46:	b002      	add	sp, #8
     f48:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     f4a:	4b14      	ldr	r3, [pc, #80]	; (f9c <sd_mmc_init_read_blocks+0x68>)
     f4c:	4798      	blx	r3
     f4e:	2800      	cmp	r0, #0
     f50:	d017      	beq.n	f82 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     f52:	2d01      	cmp	r5, #1
     f54:	d919      	bls.n	f8a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     f56:	4812      	ldr	r0, [pc, #72]	; (fa0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     f58:	4b12      	ldr	r3, [pc, #72]	; (fa4 <sd_mmc_init_read_blocks+0x70>)
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	7adb      	ldrb	r3, [r3, #11]
     f5e:	071b      	lsls	r3, r3, #28
     f60:	d400      	bmi.n	f64 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     f62:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     f64:	2301      	movs	r3, #1
     f66:	9300      	str	r3, [sp, #0]
     f68:	002b      	movs	r3, r5
     f6a:	2280      	movs	r2, #128	; 0x80
     f6c:	0092      	lsls	r2, r2, #2
     f6e:	0031      	movs	r1, r6
     f70:	4e0d      	ldr	r6, [pc, #52]	; (fa8 <sd_mmc_init_read_blocks+0x74>)
     f72:	47b0      	blx	r6
     f74:	2800      	cmp	r0, #0
     f76:	d00a      	beq.n	f8e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     f78:	4b0c      	ldr	r3, [pc, #48]	; (fac <sd_mmc_init_read_blocks+0x78>)
     f7a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     f7c:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <sd_mmc_init_read_blocks+0x7c>)
     f7e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     f80:	e7e0      	b.n	f44 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     f82:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <sd_mmc_init_read_blocks+0x80>)
     f84:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f86:	3405      	adds	r4, #5
     f88:	e7dc      	b.n	f44 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     f8a:	480b      	ldr	r0, [pc, #44]	; (fb8 <sd_mmc_init_read_blocks+0x84>)
     f8c:	e7e4      	b.n	f58 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     f8e:	4b09      	ldr	r3, [pc, #36]	; (fb4 <sd_mmc_init_read_blocks+0x80>)
     f90:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f92:	2405      	movs	r4, #5
     f94:	e7d6      	b.n	f44 <sd_mmc_init_read_blocks+0x10>
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000915 	.word	0x00000915
     f9c:	00000971 	.word	0x00000971
     fa0:	00101112 	.word	0x00101112
     fa4:	20000200 	.word	0x20000200
     fa8:	0000165d 	.word	0x0000165d
     fac:	20000224 	.word	0x20000224
     fb0:	20000226 	.word	0x20000226
     fb4:	000009f5 	.word	0x000009f5
     fb8:	00081111 	.word	0x00081111

00000fbc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     fbc:	b510      	push	{r4, lr}
     fbe:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     fc0:	4b07      	ldr	r3, [pc, #28]	; (fe0 <sd_mmc_start_read_blocks+0x24>)
     fc2:	4798      	blx	r3
     fc4:	2800      	cmp	r0, #0
     fc6:	d104      	bne.n	fd2 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     fc8:	2200      	movs	r2, #0
     fca:	4b06      	ldr	r3, [pc, #24]	; (fe4 <sd_mmc_start_read_blocks+0x28>)
     fcc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     fce:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     fd0:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     fd2:	4a04      	ldr	r2, [pc, #16]	; (fe4 <sd_mmc_start_read_blocks+0x28>)
     fd4:	8813      	ldrh	r3, [r2, #0]
     fd6:	1b1c      	subs	r4, r3, r4
     fd8:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     fda:	2000      	movs	r0, #0
     fdc:	e7f8      	b.n	fd0 <sd_mmc_start_read_blocks+0x14>
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	00001889 	.word	0x00001889
     fe4:	20000224 	.word	0x20000224

00000fe8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     fe8:	b510      	push	{r4, lr}
     fea:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     fec:	4b14      	ldr	r3, [pc, #80]	; (1040 <sd_mmc_wait_end_of_read_blocks+0x58>)
     fee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ff0:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     ff2:	2800      	cmp	r0, #0
     ff4:	d101      	bne.n	ffa <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     ff6:	0018      	movs	r0, r3
     ff8:	bd10      	pop	{r4, pc}
	if (abort) {
     ffa:	2c00      	cmp	r4, #0
     ffc:	d010      	beq.n	1020 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     ffe:	2200      	movs	r2, #0
    1000:	4b10      	ldr	r3, [pc, #64]	; (1044 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1002:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1004:	4b10      	ldr	r3, [pc, #64]	; (1048 <sd_mmc_wait_end_of_read_blocks+0x60>)
    1006:	881b      	ldrh	r3, [r3, #0]
    1008:	2b01      	cmp	r3, #1
    100a:	d00f      	beq.n	102c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    100c:	2100      	movs	r1, #0
    100e:	480f      	ldr	r0, [pc, #60]	; (104c <sd_mmc_wait_end_of_read_blocks+0x64>)
    1010:	4b0f      	ldr	r3, [pc, #60]	; (1050 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1012:	4798      	blx	r3
    1014:	2800      	cmp	r0, #0
    1016:	d00d      	beq.n	1034 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1018:	4b0e      	ldr	r3, [pc, #56]	; (1054 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    101a:	4798      	blx	r3
	return SD_MMC_OK;
    101c:	2300      	movs	r3, #0
    101e:	e7ea      	b.n	ff6 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1020:	4b08      	ldr	r3, [pc, #32]	; (1044 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1022:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1024:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1026:	2a00      	cmp	r2, #0
    1028:	d0ec      	beq.n	1004 <sd_mmc_wait_end_of_read_blocks+0x1c>
    102a:	e7e4      	b.n	ff6 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    102c:	4b09      	ldr	r3, [pc, #36]	; (1054 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    102e:	4798      	blx	r3
		return SD_MMC_OK;
    1030:	2300      	movs	r3, #0
    1032:	e7e0      	b.n	ff6 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1034:	2100      	movs	r1, #0
    1036:	4805      	ldr	r0, [pc, #20]	; (104c <sd_mmc_wait_end_of_read_blocks+0x64>)
    1038:	4b05      	ldr	r3, [pc, #20]	; (1050 <sd_mmc_wait_end_of_read_blocks+0x68>)
    103a:	4798      	blx	r3
    103c:	e7ec      	b.n	1018 <sd_mmc_wait_end_of_read_blocks+0x30>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00001915 	.word	0x00001915
    1044:	20000224 	.word	0x20000224
    1048:	20000226 	.word	0x20000226
    104c:	0000310c 	.word	0x0000310c
    1050:	000017ed 	.word	0x000017ed
    1054:	000009f5 	.word	0x000009f5

00001058 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1058:	b570      	push	{r4, r5, r6, lr}
    105a:	b082      	sub	sp, #8
    105c:	000e      	movs	r6, r1
    105e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1060:	4b11      	ldr	r3, [pc, #68]	; (10a8 <sd_mmc_init_write_blocks+0x50>)
    1062:	4798      	blx	r3
    1064:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    1066:	d116      	bne.n	1096 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1068:	2d01      	cmp	r5, #1
    106a:	d917      	bls.n	109c <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    106c:	480f      	ldr	r0, [pc, #60]	; (10ac <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    106e:	4b10      	ldr	r3, [pc, #64]	; (10b0 <sd_mmc_init_write_blocks+0x58>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	7adb      	ldrb	r3, [r3, #11]
    1074:	071b      	lsls	r3, r3, #28
    1076:	d400      	bmi.n	107a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1078:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    107a:	2301      	movs	r3, #1
    107c:	9300      	str	r3, [sp, #0]
    107e:	002b      	movs	r3, r5
    1080:	2280      	movs	r2, #128	; 0x80
    1082:	0092      	lsls	r2, r2, #2
    1084:	0031      	movs	r1, r6
    1086:	4e0b      	ldr	r6, [pc, #44]	; (10b4 <sd_mmc_init_write_blocks+0x5c>)
    1088:	47b0      	blx	r6
    108a:	2800      	cmp	r0, #0
    108c:	d008      	beq.n	10a0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    108e:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <sd_mmc_init_write_blocks+0x60>)
    1090:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1092:	4b0a      	ldr	r3, [pc, #40]	; (10bc <sd_mmc_init_write_blocks+0x64>)
    1094:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1096:	0020      	movs	r0, r4
    1098:	b002      	add	sp, #8
    109a:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    109c:	4808      	ldr	r0, [pc, #32]	; (10c0 <sd_mmc_init_write_blocks+0x68>)
    109e:	e7e6      	b.n	106e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    10a0:	4b08      	ldr	r3, [pc, #32]	; (10c4 <sd_mmc_init_write_blocks+0x6c>)
    10a2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    10a4:	2405      	movs	r4, #5
    10a6:	e7f6      	b.n	1096 <sd_mmc_init_write_blocks+0x3e>
    10a8:	00000915 	.word	0x00000915
    10ac:	00109119 	.word	0x00109119
    10b0:	20000200 	.word	0x20000200
    10b4:	0000165d 	.word	0x0000165d
    10b8:	20000224 	.word	0x20000224
    10bc:	20000226 	.word	0x20000226
    10c0:	00089118 	.word	0x00089118
    10c4:	000009f5 	.word	0x000009f5

000010c8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    10c8:	b510      	push	{r4, lr}
    10ca:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    10cc:	4b07      	ldr	r3, [pc, #28]	; (10ec <sd_mmc_start_write_blocks+0x24>)
    10ce:	4798      	blx	r3
    10d0:	2800      	cmp	r0, #0
    10d2:	d104      	bne.n	10de <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    10d4:	2200      	movs	r2, #0
    10d6:	4b06      	ldr	r3, [pc, #24]	; (10f0 <sd_mmc_start_write_blocks+0x28>)
    10d8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    10da:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    10dc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    10de:	4a04      	ldr	r2, [pc, #16]	; (10f0 <sd_mmc_start_write_blocks+0x28>)
    10e0:	8813      	ldrh	r3, [r2, #0]
    10e2:	1b1c      	subs	r4, r3, r4
    10e4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    10e6:	2000      	movs	r0, #0
    10e8:	e7f8      	b.n	10dc <sd_mmc_start_write_blocks+0x14>
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	00001919 	.word	0x00001919
    10f0:	20000224 	.word	0x20000224

000010f4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    10f8:	4b0e      	ldr	r3, [pc, #56]	; (1134 <sd_mmc_wait_end_of_write_blocks+0x40>)
    10fa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    10fc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    10fe:	2800      	cmp	r0, #0
    1100:	d101      	bne.n	1106 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1102:	0018      	movs	r0, r3
    1104:	bd10      	pop	{r4, pc}
	if (abort) {
    1106:	2c00      	cmp	r4, #0
    1108:	d00a      	beq.n	1120 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    110a:	2200      	movs	r2, #0
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <sd_mmc_wait_end_of_write_blocks+0x44>)
    110e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1110:	4b0a      	ldr	r3, [pc, #40]	; (113c <sd_mmc_wait_end_of_write_blocks+0x48>)
    1112:	881b      	ldrh	r3, [r3, #0]
    1114:	2b01      	cmp	r3, #1
    1116:	d009      	beq.n	112c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1118:	4b09      	ldr	r3, [pc, #36]	; (1140 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    111a:	4798      	blx	r3
	return SD_MMC_OK;
    111c:	2300      	movs	r3, #0
    111e:	e7f0      	b.n	1102 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <sd_mmc_wait_end_of_write_blocks+0x44>)
    1122:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1124:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1126:	2a00      	cmp	r2, #0
    1128:	d0f2      	beq.n	1110 <sd_mmc_wait_end_of_write_blocks+0x1c>
    112a:	e7ea      	b.n	1102 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    112e:	4798      	blx	r3
		return SD_MMC_OK;
    1130:	2300      	movs	r3, #0
    1132:	e7e6      	b.n	1102 <sd_mmc_wait_end_of_write_blocks+0xe>
    1134:	00001999 	.word	0x00001999
    1138:	20000224 	.word	0x20000224
    113c:	20000226 	.word	0x20000226
    1140:	000009f5 	.word	0x000009f5

00001144 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    1144:	b510      	push	{r4, lr}
    1146:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    1148:	4b0f      	ldr	r3, [pc, #60]	; (1188 <sd_mmc_test_unit_ready+0x44>)
    114a:	4798      	blx	r3
    114c:	2801      	cmp	r0, #1
    114e:	d019      	beq.n	1184 <sd_mmc_test_unit_ready+0x40>
    1150:	2800      	cmp	r0, #0
    1152:	d003      	beq.n	115c <sd_mmc_test_unit_ready+0x18>
    1154:	2802      	cmp	r0, #2
    1156:	d010      	beq.n	117a <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    1158:	2001      	movs	r0, #1
	}
}
    115a:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    115c:	4b0b      	ldr	r3, [pc, #44]	; (118c <sd_mmc_test_unit_ready+0x48>)
    115e:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    1160:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    1162:	2b00      	cmp	r3, #0
    1164:	d1f9      	bne.n	115a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    1166:	0020      	movs	r0, r4
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <sd_mmc_test_unit_ready+0x4c>)
    116a:	4798      	blx	r3
    116c:	0003      	movs	r3, r0
    116e:	2003      	movs	r0, #3
    1170:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    1172:	4243      	negs	r3, r0
    1174:	4158      	adcs	r0, r3
    1176:	0040      	lsls	r0, r0, #1
    1178:	e7ef      	b.n	115a <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    117a:	2200      	movs	r2, #0
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <sd_mmc_test_unit_ready+0x48>)
    117e:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    1180:	2002      	movs	r0, #2
    1182:	e7ea      	b.n	115a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    1184:	2003      	movs	r0, #3
    1186:	e7e8      	b.n	115a <sd_mmc_test_unit_ready+0x16>
    1188:	00000a31 	.word	0x00000a31
    118c:	2000022c 	.word	0x2000022c
    1190:	00000ee1 	.word	0x00000ee1

00001194 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1194:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    1196:	2000      	movs	r0, #0
    1198:	4b01      	ldr	r3, [pc, #4]	; (11a0 <sd_mmc_test_unit_ready_0+0xc>)
    119a:	4798      	blx	r3
}
    119c:	bd10      	pop	{r4, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00001145 	.word	0x00001145

000011a4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    11a4:	b570      	push	{r4, r5, r6, lr}
    11a6:	0004      	movs	r4, r0
    11a8:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    11aa:	4b04      	ldr	r3, [pc, #16]	; (11bc <sd_mmc_read_capacity+0x18>)
    11ac:	4798      	blx	r3
    11ae:	0040      	lsls	r0, r0, #1
    11b0:	3801      	subs	r0, #1
    11b2:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    11b4:	0020      	movs	r0, r4
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <sd_mmc_read_capacity+0x1c>)
    11b8:	4798      	blx	r3
}
    11ba:	bd70      	pop	{r4, r5, r6, pc}
    11bc:	00000f09 	.word	0x00000f09
    11c0:	00001145 	.word	0x00001145

000011c4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    11c4:	b510      	push	{r4, lr}
    11c6:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    11c8:	2000      	movs	r0, #0
    11ca:	4b01      	ldr	r3, [pc, #4]	; (11d0 <sd_mmc_read_capacity_0+0xc>)
    11cc:	4798      	blx	r3
}
    11ce:	bd10      	pop	{r4, pc}
    11d0:	000011a5 	.word	0x000011a5

000011d4 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    11d4:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    11d6:	2000      	movs	r0, #0
    11d8:	4b01      	ldr	r3, [pc, #4]	; (11e0 <sd_mmc_wr_protect_0+0xc>)
    11da:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00000f31 	.word	0x00000f31

000011e4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    11e4:	b510      	push	{r4, lr}
    11e6:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    11e8:	2201      	movs	r2, #1
    11ea:	4b0c      	ldr	r3, [pc, #48]	; (121c <sd_mmc_mem_2_ram+0x38>)
    11ec:	4798      	blx	r3
    11ee:	2800      	cmp	r0, #0
    11f0:	d004      	beq.n	11fc <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    11f2:	3802      	subs	r0, #2
    11f4:	4243      	negs	r3, r0
    11f6:	4158      	adcs	r0, r3
    11f8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    11fa:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    11fc:	2101      	movs	r1, #1
    11fe:	0020      	movs	r0, r4
    1200:	4b07      	ldr	r3, [pc, #28]	; (1220 <sd_mmc_mem_2_ram+0x3c>)
    1202:	4798      	blx	r3
    1204:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1206:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1208:	2b00      	cmp	r3, #0
    120a:	d1f6      	bne.n	11fa <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    120c:	2000      	movs	r0, #0
    120e:	4b05      	ldr	r3, [pc, #20]	; (1224 <sd_mmc_mem_2_ram+0x40>)
    1210:	4798      	blx	r3
    1212:	1e43      	subs	r3, r0, #1
    1214:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    1216:	b2c0      	uxtb	r0, r0
    1218:	e7ef      	b.n	11fa <sd_mmc_mem_2_ram+0x16>
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00000f35 	.word	0x00000f35
    1220:	00000fbd 	.word	0x00000fbd
    1224:	00000fe9 	.word	0x00000fe9

00001228 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1228:	b510      	push	{r4, lr}
    122a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    122c:	0001      	movs	r1, r0
    122e:	2000      	movs	r0, #0
    1230:	4b01      	ldr	r3, [pc, #4]	; (1238 <sd_mmc_mem_2_ram_0+0x10>)
    1232:	4798      	blx	r3
}
    1234:	bd10      	pop	{r4, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	000011e5 	.word	0x000011e5

0000123c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    123c:	b510      	push	{r4, lr}
    123e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1240:	2201      	movs	r2, #1
    1242:	4b0c      	ldr	r3, [pc, #48]	; (1274 <sd_mmc_ram_2_mem+0x38>)
    1244:	4798      	blx	r3
    1246:	2800      	cmp	r0, #0
    1248:	d004      	beq.n	1254 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    124a:	3802      	subs	r0, #2
    124c:	4243      	negs	r3, r0
    124e:	4158      	adcs	r0, r3
    1250:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    1252:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1254:	2101      	movs	r1, #1
    1256:	0020      	movs	r0, r4
    1258:	4b07      	ldr	r3, [pc, #28]	; (1278 <sd_mmc_ram_2_mem+0x3c>)
    125a:	4798      	blx	r3
    125c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    125e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1260:	2b00      	cmp	r3, #0
    1262:	d1f6      	bne.n	1252 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    1264:	2000      	movs	r0, #0
    1266:	4b05      	ldr	r3, [pc, #20]	; (127c <sd_mmc_ram_2_mem+0x40>)
    1268:	4798      	blx	r3
    126a:	1e43      	subs	r3, r0, #1
    126c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    126e:	b2c0      	uxtb	r0, r0
    1270:	e7ef      	b.n	1252 <sd_mmc_ram_2_mem+0x16>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	00001059 	.word	0x00001059
    1278:	000010c9 	.word	0x000010c9
    127c:	000010f5 	.word	0x000010f5

00001280 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1280:	b510      	push	{r4, lr}
    1282:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    1284:	0001      	movs	r1, r0
    1286:	2000      	movs	r0, #0
    1288:	4b01      	ldr	r3, [pc, #4]	; (1290 <sd_mmc_ram_2_mem_0+0x10>)
    128a:	4798      	blx	r3
}
    128c:	bd10      	pop	{r4, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	0000123d 	.word	0x0000123d

00001294 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    1294:	b500      	push	{lr}
    1296:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    1298:	466b      	mov	r3, sp
    129a:	1dd9      	adds	r1, r3, #7
    129c:	23ff      	movs	r3, #255	; 0xff
    129e:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    12a0:	2201      	movs	r2, #1
    12a2:	480b      	ldr	r0, [pc, #44]	; (12d0 <sd_mmc_spi_start_write_block+0x3c>)
    12a4:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <sd_mmc_spi_start_write_block+0x40>)
    12a6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    12a8:	4b0b      	ldr	r3, [pc, #44]	; (12d8 <sd_mmc_spi_start_write_block+0x44>)
    12aa:	881b      	ldrh	r3, [r3, #0]
    12ac:	2b01      	cmp	r3, #1
    12ae:	d00a      	beq.n	12c6 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    12b0:	22fc      	movs	r2, #252	; 0xfc
    12b2:	466b      	mov	r3, sp
    12b4:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    12b6:	2201      	movs	r2, #1
    12b8:	466b      	mov	r3, sp
    12ba:	1d99      	adds	r1, r3, #6
    12bc:	4804      	ldr	r0, [pc, #16]	; (12d0 <sd_mmc_spi_start_write_block+0x3c>)
    12be:	4b05      	ldr	r3, [pc, #20]	; (12d4 <sd_mmc_spi_start_write_block+0x40>)
    12c0:	4798      	blx	r3
}
    12c2:	b003      	add	sp, #12
    12c4:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    12c6:	22fe      	movs	r2, #254	; 0xfe
    12c8:	466b      	mov	r3, sp
    12ca:	719a      	strb	r2, [r3, #6]
    12cc:	e7f3      	b.n	12b6 <sd_mmc_spi_start_write_block+0x22>
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	20000230 	.word	0x20000230
    12d4:	000025a5 	.word	0x000025a5
    12d8:	20000274 	.word	0x20000274

000012dc <sd_mmc_spi_wait_busy>:
{
    12dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12de:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    12e0:	466b      	mov	r3, sp
    12e2:	1ddc      	adds	r4, r3, #7
    12e4:	23ff      	movs	r3, #255	; 0xff
    12e6:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12e8:	4e12      	ldr	r6, [pc, #72]	; (1334 <sd_mmc_spi_wait_busy+0x58>)
    12ea:	2201      	movs	r2, #1
    12ec:	0021      	movs	r1, r4
    12ee:	0030      	movs	r0, r6
    12f0:	4d11      	ldr	r5, [pc, #68]	; (1338 <sd_mmc_spi_wait_busy+0x5c>)
    12f2:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12f4:	23ff      	movs	r3, #255	; 0xff
    12f6:	2201      	movs	r2, #1
    12f8:	0021      	movs	r1, r4
    12fa:	0030      	movs	r0, r6
    12fc:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12fe:	23ff      	movs	r3, #255	; 0xff
    1300:	2201      	movs	r2, #1
    1302:	0021      	movs	r1, r4
    1304:	0030      	movs	r0, r6
    1306:	47a8      	blx	r5
    1308:	4c0c      	ldr	r4, [pc, #48]	; (133c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    130a:	466b      	mov	r3, sp
    130c:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    130e:	4e09      	ldr	r6, [pc, #36]	; (1334 <sd_mmc_spi_wait_busy+0x58>)
    1310:	4f09      	ldr	r7, [pc, #36]	; (1338 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    1312:	782b      	ldrb	r3, [r5, #0]
    1314:	2bff      	cmp	r3, #255	; 0xff
    1316:	d009      	beq.n	132c <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1318:	23ff      	movs	r3, #255	; 0xff
    131a:	2201      	movs	r2, #1
    131c:	0029      	movs	r1, r5
    131e:	0030      	movs	r0, r6
    1320:	47b8      	blx	r7
    1322:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    1324:	2c00      	cmp	r4, #0
    1326:	d1f4      	bne.n	1312 <sd_mmc_spi_wait_busy+0x36>
			return false;
    1328:	2000      	movs	r0, #0
    132a:	e000      	b.n	132e <sd_mmc_spi_wait_busy+0x52>
	return true;
    132c:	2001      	movs	r0, #1
}
    132e:	b003      	add	sp, #12
    1330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	20000230 	.word	0x20000230
    1338:	000023dd 	.word	0x000023dd
    133c:	00030d40 	.word	0x00030d40

00001340 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    1340:	b570      	push	{r4, r5, r6, lr}
    1342:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    1344:	4b14      	ldr	r3, [pc, #80]	; (1398 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    1346:	881c      	ldrh	r4, [r3, #0]
    1348:	2c01      	cmp	r4, #1
    134a:	d023      	beq.n	1394 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    134c:	4b13      	ldr	r3, [pc, #76]	; (139c <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    134e:	8819      	ldrh	r1, [r3, #0]
    1350:	4b13      	ldr	r3, [pc, #76]	; (13a0 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    1352:	6818      	ldr	r0, [r3, #0]
    1354:	4b13      	ldr	r3, [pc, #76]	; (13a4 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    1356:	4798      	blx	r3
		return true; // It is not the End of multi write
    1358:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    135a:	4284      	cmp	r4, r0
    135c:	d902      	bls.n	1364 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    135e:	0018      	movs	r0, r3
    1360:	b002      	add	sp, #8
    1362:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    1364:	466b      	mov	r3, sp
    1366:	1ddc      	adds	r4, r3, #7
    1368:	23ff      	movs	r3, #255	; 0xff
    136a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    136c:	4e0e      	ldr	r6, [pc, #56]	; (13a8 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    136e:	2201      	movs	r2, #1
    1370:	0021      	movs	r1, r4
    1372:	0030      	movs	r0, r6
    1374:	4d0d      	ldr	r5, [pc, #52]	; (13ac <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    1376:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    1378:	23fd      	movs	r3, #253	; 0xfd
    137a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    137c:	2201      	movs	r2, #1
    137e:	0021      	movs	r1, r4
    1380:	0030      	movs	r0, r6
    1382:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    1384:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    1386:	4798      	blx	r3
    1388:	1e03      	subs	r3, r0, #0
    138a:	d1e8      	bne.n	135e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    138c:	2105      	movs	r1, #5
    138e:	4a09      	ldr	r2, [pc, #36]	; (13b4 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    1390:	7011      	strb	r1, [r2, #0]
		return false;
    1392:	e7e4      	b.n	135e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    1394:	2301      	movs	r3, #1
    1396:	e7e2      	b.n	135e <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1398:	20000274 	.word	0x20000274
    139c:	2000026c 	.word	0x2000026c
    13a0:	2000027c 	.word	0x2000027c
    13a4:	00005af9 	.word	0x00005af9
    13a8:	20000230 	.word	0x20000230
    13ac:	000025a5 	.word	0x000025a5
    13b0:	000012dd 	.word	0x000012dd
    13b4:	20000273 	.word	0x20000273

000013b8 <sd_mmc_spi_start_read_block>:
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	b083      	sub	sp, #12
	token = 0;
    13bc:	2200      	movs	r2, #0
    13be:	466b      	mov	r3, sp
    13c0:	71da      	strb	r2, [r3, #7]
    13c2:	4c14      	ldr	r4, [pc, #80]	; (1414 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    13c4:	466b      	mov	r3, sp
    13c6:	1ddd      	adds	r5, r3, #7
    13c8:	4e13      	ldr	r6, [pc, #76]	; (1418 <sd_mmc_spi_start_read_block+0x60>)
    13ca:	4f14      	ldr	r7, [pc, #80]	; (141c <sd_mmc_spi_start_read_block+0x64>)
    13cc:	23ff      	movs	r3, #255	; 0xff
    13ce:	2201      	movs	r2, #1
    13d0:	0029      	movs	r1, r5
    13d2:	0030      	movs	r0, r6
    13d4:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    13d6:	782b      	ldrb	r3, [r5, #0]
    13d8:	220f      	movs	r2, #15
    13da:	0019      	movs	r1, r3
    13dc:	4391      	bics	r1, r2
    13de:	1e0a      	subs	r2, r1, #0
    13e0:	d009      	beq.n	13f6 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    13e2:	2bfe      	cmp	r3, #254	; 0xfe
    13e4:	d013      	beq.n	140e <sd_mmc_spi_start_read_block+0x56>
    13e6:	3c01      	subs	r4, #1
		if (i-- == 0) {
    13e8:	2c00      	cmp	r4, #0
    13ea:	d1ef      	bne.n	13cc <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    13ec:	2204      	movs	r2, #4
    13ee:	4b0c      	ldr	r3, [pc, #48]	; (1420 <sd_mmc_spi_start_read_block+0x68>)
    13f0:	701a      	strb	r2, [r3, #0]
			return false;
    13f2:	2000      	movs	r0, #0
    13f4:	e00c      	b.n	1410 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    13f6:	075b      	lsls	r3, r3, #29
    13f8:	d004      	beq.n	1404 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    13fa:	3207      	adds	r2, #7
    13fc:	4b08      	ldr	r3, [pc, #32]	; (1420 <sd_mmc_spi_start_read_block+0x68>)
    13fe:	701a      	strb	r2, [r3, #0]
			return false;
    1400:	2000      	movs	r0, #0
    1402:	e005      	b.n	1410 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    1404:	220b      	movs	r2, #11
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <sd_mmc_spi_start_read_block+0x68>)
    1408:	701a      	strb	r2, [r3, #0]
			return false;
    140a:	2000      	movs	r0, #0
    140c:	e000      	b.n	1410 <sd_mmc_spi_start_read_block+0x58>
	return true;
    140e:	2001      	movs	r0, #1
}
    1410:	b003      	add	sp, #12
    1412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1414:	0007a120 	.word	0x0007a120
    1418:	20000230 	.word	0x20000230
    141c:	000023dd 	.word	0x000023dd
    1420:	20000273 	.word	0x20000273

00001424 <sd_mmc_spi_stop_write_block>:
{
    1424:	b530      	push	{r4, r5, lr}
    1426:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1428:	a901      	add	r1, sp, #4
    142a:	2301      	movs	r3, #1
    142c:	425b      	negs	r3, r3
    142e:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1430:	4d14      	ldr	r5, [pc, #80]	; (1484 <sd_mmc_spi_stop_write_block+0x60>)
    1432:	2202      	movs	r2, #2
    1434:	0028      	movs	r0, r5
    1436:	4b14      	ldr	r3, [pc, #80]	; (1488 <sd_mmc_spi_stop_write_block+0x64>)
    1438:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    143a:	466b      	mov	r3, sp
    143c:	1ddc      	adds	r4, r3, #7
    143e:	23ff      	movs	r3, #255	; 0xff
    1440:	2201      	movs	r2, #1
    1442:	0021      	movs	r1, r4
    1444:	0028      	movs	r0, r5
    1446:	4d11      	ldr	r5, [pc, #68]	; (148c <sd_mmc_spi_stop_write_block+0x68>)
    1448:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    144a:	7822      	ldrb	r2, [r4, #0]
    144c:	2311      	movs	r3, #17
    144e:	4013      	ands	r3, r2
    1450:	2b01      	cmp	r3, #1
    1452:	d005      	beq.n	1460 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1454:	2201      	movs	r2, #1
    1456:	4b0e      	ldr	r3, [pc, #56]	; (1490 <sd_mmc_spi_stop_write_block+0x6c>)
    1458:	701a      	strb	r2, [r3, #0]
		return false;
    145a:	2000      	movs	r0, #0
}
    145c:	b003      	add	sp, #12
    145e:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    1460:	231e      	movs	r3, #30
    1462:	401a      	ands	r2, r3
    1464:	2a04      	cmp	r2, #4
    1466:	d00b      	beq.n	1480 <sd_mmc_spi_stop_write_block+0x5c>
    1468:	2a0a      	cmp	r2, #10
    146a:	d104      	bne.n	1476 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    146c:	3a02      	subs	r2, #2
    146e:	4b08      	ldr	r3, [pc, #32]	; (1490 <sd_mmc_spi_stop_write_block+0x6c>)
    1470:	701a      	strb	r2, [r3, #0]
		return false;
    1472:	2000      	movs	r0, #0
    1474:	e7f2      	b.n	145c <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    1476:	220a      	movs	r2, #10
    1478:	4b05      	ldr	r3, [pc, #20]	; (1490 <sd_mmc_spi_stop_write_block+0x6c>)
    147a:	701a      	strb	r2, [r3, #0]
		return false;
    147c:	2000      	movs	r0, #0
    147e:	e7ed      	b.n	145c <sd_mmc_spi_stop_write_block+0x38>
	return true;
    1480:	2001      	movs	r0, #1
    1482:	e7eb      	b.n	145c <sd_mmc_spi_stop_write_block+0x38>
    1484:	20000230 	.word	0x20000230
    1488:	000025a5 	.word	0x000025a5
    148c:	000023dd 	.word	0x000023dd
    1490:	20000273 	.word	0x20000273

00001494 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    1494:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    1496:	4802      	ldr	r0, [pc, #8]	; (14a0 <sd_mmc_deinit+0xc>)
    1498:	4b02      	ldr	r3, [pc, #8]	; (14a4 <sd_mmc_deinit+0x10>)
    149a:	4798      	blx	r3
}
    149c:	bd10      	pop	{r4, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	20000230 	.word	0x20000230
    14a4:	00002101 	.word	0x00002101

000014a8 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    14a8:	b570      	push	{r4, r5, r6, lr}
    14aa:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    14ac:	2300      	movs	r3, #0
    14ae:	4a2d      	ldr	r2, [pc, #180]	; (1564 <sd_mmc_spi_init+0xbc>)
    14b0:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    14b2:	ac02      	add	r4, sp, #8
    14b4:	2501      	movs	r5, #1
    14b6:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    14b8:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    14ba:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    14bc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    14be:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    14c0:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    14c2:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    14c4:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    14c6:	2224      	movs	r2, #36	; 0x24
    14c8:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    14ca:	3a18      	subs	r2, #24
    14cc:	2100      	movs	r1, #0
    14ce:	a808      	add	r0, sp, #32
    14d0:	4b25      	ldr	r3, [pc, #148]	; (1568 <sd_mmc_spi_init+0xc0>)
    14d2:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    14d4:	2380      	movs	r3, #128	; 0x80
    14d6:	025b      	lsls	r3, r3, #9
    14d8:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    14da:	4b24      	ldr	r3, [pc, #144]	; (156c <sd_mmc_spi_init+0xc4>)
    14dc:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    14de:	4b24      	ldr	r3, [pc, #144]	; (1570 <sd_mmc_spi_init+0xc8>)
    14e0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    14e2:	4b24      	ldr	r3, [pc, #144]	; (1574 <sd_mmc_spi_init+0xcc>)
    14e4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    14e6:	4b24      	ldr	r3, [pc, #144]	; (1578 <sd_mmc_spi_init+0xd0>)
    14e8:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    14ea:	4b24      	ldr	r3, [pc, #144]	; (157c <sd_mmc_spi_init+0xd4>)
    14ec:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    14ee:	4e24      	ldr	r6, [pc, #144]	; (1580 <sd_mmc_spi_init+0xd8>)
    14f0:	0022      	movs	r2, r4
    14f2:	4924      	ldr	r1, [pc, #144]	; (1584 <sd_mmc_spi_init+0xdc>)
    14f4:	0030      	movs	r0, r6
    14f6:	4b24      	ldr	r3, [pc, #144]	; (1588 <sd_mmc_spi_init+0xe0>)
    14f8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14fa:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14fc:	0020      	movs	r0, r4
    14fe:	4b23      	ldr	r3, [pc, #140]	; (158c <sd_mmc_spi_init+0xe4>)
    1500:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1502:	231f      	movs	r3, #31
    1504:	4018      	ands	r0, r3
    1506:	4085      	lsls	r5, r0
    1508:	4b21      	ldr	r3, [pc, #132]	; (1590 <sd_mmc_spi_init+0xe8>)
    150a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    150c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    150e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1510:	2b00      	cmp	r3, #0
    1512:	d1fc      	bne.n	150e <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1514:	6823      	ldr	r3, [r4, #0]
    1516:	2202      	movs	r2, #2
    1518:	4313      	orrs	r3, r2
    151a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    151c:	4a1d      	ldr	r2, [pc, #116]	; (1594 <sd_mmc_spi_init+0xec>)
    151e:	2300      	movs	r3, #0
    1520:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    1522:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    1524:	491c      	ldr	r1, [pc, #112]	; (1598 <sd_mmc_spi_init+0xf0>)
    1526:	7808      	ldrb	r0, [r1, #0]
    1528:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    152a:	4c1c      	ldr	r4, [pc, #112]	; (159c <sd_mmc_spi_init+0xf4>)
    152c:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    152e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1530:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1532:	a901      	add	r1, sp, #4
    1534:	2201      	movs	r2, #1
    1536:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1538:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    153a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    153c:	4b18      	ldr	r3, [pc, #96]	; (15a0 <sd_mmc_spi_init+0xf8>)
    153e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1540:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1542:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1544:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1546:	2900      	cmp	r1, #0
    1548:	d104      	bne.n	1554 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    154a:	0953      	lsrs	r3, r2, #5
    154c:	01db      	lsls	r3, r3, #7
    154e:	4915      	ldr	r1, [pc, #84]	; (15a4 <sd_mmc_spi_init+0xfc>)
    1550:	468c      	mov	ip, r1
    1552:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1554:	211f      	movs	r1, #31
    1556:	4011      	ands	r1, r2
    1558:	2201      	movs	r2, #1
    155a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    155c:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    155e:	b010      	add	sp, #64	; 0x40
    1560:	bd70      	pop	{r4, r5, r6, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	20000273 	.word	0x20000273
    1568:	00005e95 	.word	0x00005e95
    156c:	00100002 	.word	0x00100002
    1570:	00110002 	.word	0x00110002
    1574:	00120002 	.word	0x00120002
    1578:	00130002 	.word	0x00130002
    157c:	00061a80 	.word	0x00061a80
    1580:	20000230 	.word	0x20000230
    1584:	42000c00 	.word	0x42000c00
    1588:	00002205 	.word	0x00002205
    158c:	00002071 	.word	0x00002071
    1590:	e000e100 	.word	0xe000e100
    1594:	20000280 	.word	0x20000280
    1598:	20000008 	.word	0x20000008
    159c:	20000270 	.word	0x20000270
    15a0:	00001ac1 	.word	0x00001ac1
    15a4:	41004400 	.word	0x41004400

000015a8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    15a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15aa:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15ac:	2200      	movs	r2, #0
    15ae:	4b0d      	ldr	r3, [pc, #52]	; (15e4 <sd_mmc_spi_select_device+0x3c>)
    15b0:	701a      	strb	r2, [r3, #0]
    15b2:	000c      	movs	r4, r1
    15b4:	4b0c      	ldr	r3, [pc, #48]	; (15e8 <sd_mmc_spi_select_device+0x40>)
    15b6:	4299      	cmp	r1, r3
    15b8:	d900      	bls.n	15bc <sd_mmc_spi_select_device+0x14>
    15ba:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    15bc:	4d0b      	ldr	r5, [pc, #44]	; (15ec <sd_mmc_spi_select_device+0x44>)
    15be:	4e0c      	ldr	r6, [pc, #48]	; (15f0 <sd_mmc_spi_select_device+0x48>)
    15c0:	e001      	b.n	15c6 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    15c2:	08e3      	lsrs	r3, r4, #3
    15c4:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    15c6:	0021      	movs	r1, r4
    15c8:	0028      	movs	r0, r5
    15ca:	47b0      	blx	r6
    15cc:	2817      	cmp	r0, #23
    15ce:	d0f8      	beq.n	15c2 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    15d0:	0079      	lsls	r1, r7, #1
    15d2:	19cf      	adds	r7, r1, r7
    15d4:	4907      	ldr	r1, [pc, #28]	; (15f4 <sd_mmc_spi_select_device+0x4c>)
    15d6:	19c9      	adds	r1, r1, r7
    15d8:	2201      	movs	r2, #1
    15da:	4804      	ldr	r0, [pc, #16]	; (15ec <sd_mmc_spi_select_device+0x44>)
    15dc:	4b06      	ldr	r3, [pc, #24]	; (15f8 <sd_mmc_spi_select_device+0x50>)
    15de:	4798      	blx	r3
}
    15e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	20000273 	.word	0x20000273
    15e8:	00989680 	.word	0x00989680
    15ec:	20000230 	.word	0x20000230
    15f0:	0000214d 	.word	0x0000214d
    15f4:	20000270 	.word	0x20000270
    15f8:	000024b1 	.word	0x000024b1

000015fc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    15fc:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15fe:	2200      	movs	r2, #0
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <sd_mmc_spi_deselect_device+0x18>)
    1602:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1604:	0041      	lsls	r1, r0, #1
    1606:	1808      	adds	r0, r1, r0
    1608:	4903      	ldr	r1, [pc, #12]	; (1618 <sd_mmc_spi_deselect_device+0x1c>)
    160a:	1809      	adds	r1, r1, r0
    160c:	4803      	ldr	r0, [pc, #12]	; (161c <sd_mmc_spi_deselect_device+0x20>)
    160e:	4b04      	ldr	r3, [pc, #16]	; (1620 <sd_mmc_spi_deselect_device+0x24>)
    1610:	4798      	blx	r3
}
    1612:	bd10      	pop	{r4, pc}
    1614:	20000273 	.word	0x20000273
    1618:	20000270 	.word	0x20000270
    161c:	20000230 	.word	0x20000230
    1620:	000024b1 	.word	0x000024b1

00001624 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    1624:	b570      	push	{r4, r5, r6, lr}
    1626:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1628:	22ff      	movs	r2, #255	; 0xff
    162a:	466b      	mov	r3, sp
    162c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    162e:	2200      	movs	r2, #0
    1630:	4b07      	ldr	r3, [pc, #28]	; (1650 <sd_mmc_spi_send_clock+0x2c>)
    1632:	701a      	strb	r2, [r3, #0]
    1634:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    1636:	4e07      	ldr	r6, [pc, #28]	; (1654 <sd_mmc_spi_send_clock+0x30>)
    1638:	4d07      	ldr	r5, [pc, #28]	; (1658 <sd_mmc_spi_send_clock+0x34>)
    163a:	2201      	movs	r2, #1
    163c:	466b      	mov	r3, sp
    163e:	1dd9      	adds	r1, r3, #7
    1640:	0030      	movs	r0, r6
    1642:	47a8      	blx	r5
    1644:	3c01      	subs	r4, #1
    1646:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    1648:	2c00      	cmp	r4, #0
    164a:	d1f6      	bne.n	163a <sd_mmc_spi_send_clock+0x16>
	}
}
    164c:	b002      	add	sp, #8
    164e:	bd70      	pop	{r4, r5, r6, pc}
    1650:	20000273 	.word	0x20000273
    1654:	20000230 	.word	0x20000230
    1658:	000025a5 	.word	0x000025a5

0000165c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	46c6      	mov	lr, r8
    1660:	b500      	push	{lr}
    1662:	b086      	sub	sp, #24
    1664:	4680      	mov	r8, r0
    1666:	9200      	str	r2, [sp, #0]
    1668:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    166a:	22ff      	movs	r2, #255	; 0xff
    166c:	230f      	movs	r3, #15
    166e:	a802      	add	r0, sp, #8
    1670:	4684      	mov	ip, r0
    1672:	4463      	add	r3, ip
    1674:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1676:	2200      	movs	r2, #0
    1678:	4b53      	ldr	r3, [pc, #332]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    167a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    167c:	ab04      	add	r3, sp, #16
    167e:	323f      	adds	r2, #63	; 0x3f
    1680:	4640      	mov	r0, r8
    1682:	4002      	ands	r2, r0
    1684:	2040      	movs	r0, #64	; 0x40
    1686:	4302      	orrs	r2, r0
    1688:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    168a:	0e0a      	lsrs	r2, r1, #24
    168c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    168e:	0c0a      	lsrs	r2, r1, #16
    1690:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    1692:	0a0a      	lsrs	r2, r1, #8
    1694:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    1696:	7119      	strb	r1, [r3, #4]
    1698:	2700      	movs	r7, #0
	crc = 0;
    169a:	2300      	movs	r3, #0
		value = *buf++;
    169c:	a904      	add	r1, sp, #16
    169e:	2208      	movs	r2, #8
				crc ^= 0x09;
    16a0:	2409      	movs	r4, #9
    16a2:	e011      	b.n	16c8 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    16a4:	0076      	lsls	r6, r6, #1
    16a6:	b2f6      	uxtb	r6, r6
    16a8:	3801      	subs	r0, #1
    16aa:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    16ac:	2800      	cmp	r0, #0
    16ae:	d008      	beq.n	16c2 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    16b0:	005b      	lsls	r3, r3, #1
    16b2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    16b4:	001d      	movs	r5, r3
    16b6:	4075      	eors	r5, r6
    16b8:	062d      	lsls	r5, r5, #24
    16ba:	d5f3      	bpl.n	16a4 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    16bc:	4063      	eors	r3, r4
    16be:	b2db      	uxtb	r3, r3
    16c0:	e7f0      	b.n	16a4 <sd_mmc_spi_adtc_start+0x48>
    16c2:	3701      	adds	r7, #1
	while (size--) {
    16c4:	2f05      	cmp	r7, #5
    16c6:	d002      	beq.n	16ce <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    16c8:	5c7e      	ldrb	r6, [r7, r1]
    16ca:	0010      	movs	r0, r2
    16cc:	e7f0      	b.n	16b0 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    16ce:	005b      	lsls	r3, r3, #1
    16d0:	2201      	movs	r2, #1
    16d2:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    16d4:	ac04      	add	r4, sp, #16
    16d6:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    16d8:	4e3c      	ldr	r6, [pc, #240]	; (17cc <sd_mmc_spi_adtc_start+0x170>)
    16da:	2201      	movs	r2, #1
    16dc:	210f      	movs	r1, #15
    16de:	ab02      	add	r3, sp, #8
    16e0:	469c      	mov	ip, r3
    16e2:	4461      	add	r1, ip
    16e4:	0030      	movs	r0, r6
    16e6:	4f3a      	ldr	r7, [pc, #232]	; (17d0 <sd_mmc_spi_adtc_start+0x174>)
    16e8:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    16ea:	2206      	movs	r2, #6
    16ec:	0021      	movs	r1, r4
    16ee:	0030      	movs	r0, r6
    16f0:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    16f2:	ab02      	add	r3, sp, #8
    16f4:	1dd9      	adds	r1, r3, #7
    16f6:	23ff      	movs	r3, #255	; 0xff
    16f8:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    16fa:	2201      	movs	r2, #1
    16fc:	0030      	movs	r0, r6
    16fe:	4e35      	ldr	r6, [pc, #212]	; (17d4 <sd_mmc_spi_adtc_start+0x178>)
    1700:	47b0      	blx	r6
    1702:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1704:	ab02      	add	r3, sp, #8
    1706:	1dde      	adds	r6, r3, #7
    1708:	4f30      	ldr	r7, [pc, #192]	; (17cc <sd_mmc_spi_adtc_start+0x170>)
    170a:	4d32      	ldr	r5, [pc, #200]	; (17d4 <sd_mmc_spi_adtc_start+0x178>)
    170c:	23ff      	movs	r3, #255	; 0xff
    170e:	2201      	movs	r2, #1
    1710:	0031      	movs	r1, r6
    1712:	0038      	movs	r0, r7
    1714:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    1716:	7833      	ldrb	r3, [r6, #0]
    1718:	b25a      	sxtb	r2, r3
    171a:	2a00      	cmp	r2, #0
    171c:	da0b      	bge.n	1736 <sd_mmc_spi_adtc_start+0xda>
    171e:	3c01      	subs	r4, #1
    1720:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    1722:	2c00      	cmp	r4, #0
    1724:	d1f2      	bne.n	170c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    1726:	2202      	movs	r2, #2
    1728:	4b27      	ldr	r3, [pc, #156]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    172a:	701a      	strb	r2, [r3, #0]
			return false;
    172c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    172e:	b006      	add	sp, #24
    1730:	bc04      	pop	{r2}
    1732:	4690      	mov	r8, r2
    1734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    1736:	4a28      	ldr	r2, [pc, #160]	; (17d8 <sd_mmc_spi_adtc_start+0x17c>)
    1738:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    173a:	071a      	lsls	r2, r3, #28
    173c:	d41a      	bmi.n	1774 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    173e:	075a      	lsls	r2, r3, #29
    1740:	d41d      	bmi.n	177e <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    1742:	2201      	movs	r2, #1
    1744:	4393      	bics	r3, r2
    1746:	d11f      	bne.n	1788 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    1748:	4643      	mov	r3, r8
    174a:	049b      	lsls	r3, r3, #18
    174c:	d420      	bmi.n	1790 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    174e:	4643      	mov	r3, r8
    1750:	059b      	lsls	r3, r3, #22
    1752:	d425      	bmi.n	17a0 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    1754:	4643      	mov	r3, r8
    1756:	055b      	lsls	r3, r3, #21
    1758:	d42b      	bmi.n	17b2 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    175a:	4b20      	ldr	r3, [pc, #128]	; (17dc <sd_mmc_spi_adtc_start+0x180>)
    175c:	466a      	mov	r2, sp
    175e:	8812      	ldrh	r2, [r2, #0]
    1760:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    1762:	4b1f      	ldr	r3, [pc, #124]	; (17e0 <sd_mmc_spi_adtc_start+0x184>)
    1764:	466a      	mov	r2, sp
    1766:	8892      	ldrh	r2, [r2, #4]
    1768:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    176a:	2200      	movs	r2, #0
    176c:	4b1d      	ldr	r3, [pc, #116]	; (17e4 <sd_mmc_spi_adtc_start+0x188>)
    176e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1770:	2001      	movs	r0, #1
    1772:	e7dc      	b.n	172e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    1774:	2206      	movs	r2, #6
    1776:	4b14      	ldr	r3, [pc, #80]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    1778:	701a      	strb	r2, [r3, #0]
		return false;
    177a:	2000      	movs	r0, #0
    177c:	e7d7      	b.n	172e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    177e:	2209      	movs	r2, #9
    1780:	4b11      	ldr	r3, [pc, #68]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    1782:	701a      	strb	r2, [r3, #0]
		return false;
    1784:	2000      	movs	r0, #0
    1786:	e7d2      	b.n	172e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1788:	4b0f      	ldr	r3, [pc, #60]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    178a:	701a      	strb	r2, [r3, #0]
		return false;
    178c:	2000      	movs	r0, #0
    178e:	e7ce      	b.n	172e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1790:	4b15      	ldr	r3, [pc, #84]	; (17e8 <sd_mmc_spi_adtc_start+0x18c>)
    1792:	4798      	blx	r3
    1794:	2800      	cmp	r0, #0
    1796:	d1da      	bne.n	174e <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1798:	2203      	movs	r2, #3
    179a:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <sd_mmc_spi_adtc_start+0x16c>)
    179c:	701a      	strb	r2, [r3, #0]
			return false;
    179e:	e7c6      	b.n	172e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    17a0:	490d      	ldr	r1, [pc, #52]	; (17d8 <sd_mmc_spi_adtc_start+0x17c>)
    17a2:	2300      	movs	r3, #0
    17a4:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    17a6:	33ff      	adds	r3, #255	; 0xff
    17a8:	2201      	movs	r2, #1
    17aa:	4808      	ldr	r0, [pc, #32]	; (17cc <sd_mmc_spi_adtc_start+0x170>)
    17ac:	4e09      	ldr	r6, [pc, #36]	; (17d4 <sd_mmc_spi_adtc_start+0x178>)
    17ae:	47b0      	blx	r6
    17b0:	e7d0      	b.n	1754 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    17b2:	4e09      	ldr	r6, [pc, #36]	; (17d8 <sd_mmc_spi_adtc_start+0x17c>)
    17b4:	23ff      	movs	r3, #255	; 0xff
    17b6:	2204      	movs	r2, #4
    17b8:	0031      	movs	r1, r6
    17ba:	4804      	ldr	r0, [pc, #16]	; (17cc <sd_mmc_spi_adtc_start+0x170>)
    17bc:	4f05      	ldr	r7, [pc, #20]	; (17d4 <sd_mmc_spi_adtc_start+0x178>)
    17be:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    17c0:	6833      	ldr	r3, [r6, #0]
    17c2:	ba1b      	rev	r3, r3
    17c4:	6033      	str	r3, [r6, #0]
    17c6:	e7c8      	b.n	175a <sd_mmc_spi_adtc_start+0xfe>
    17c8:	20000273 	.word	0x20000273
    17cc:	20000230 	.word	0x20000230
    17d0:	000025a5 	.word	0x000025a5
    17d4:	000023dd 	.word	0x000023dd
    17d8:	20000278 	.word	0x20000278
    17dc:	2000026c 	.word	0x2000026c
    17e0:	20000274 	.word	0x20000274
    17e4:	2000027c 	.word	0x2000027c
    17e8:	000012dd 	.word	0x000012dd

000017ec <sd_mmc_spi_send_cmd>:
{
    17ec:	b510      	push	{r4, lr}
    17ee:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    17f0:	2300      	movs	r3, #0
    17f2:	9300      	str	r3, [sp, #0]
    17f4:	2200      	movs	r2, #0
    17f6:	4c02      	ldr	r4, [pc, #8]	; (1800 <sd_mmc_spi_send_cmd+0x14>)
    17f8:	47a0      	blx	r4
}
    17fa:	b002      	add	sp, #8
    17fc:	bd10      	pop	{r4, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	0000165d 	.word	0x0000165d

00001804 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1804:	4b01      	ldr	r3, [pc, #4]	; (180c <sd_mmc_spi_get_response+0x8>)
    1806:	6818      	ldr	r0, [r3, #0]
}
    1808:	4770      	bx	lr
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	20000278 	.word	0x20000278

00001810 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1810:	b510      	push	{r4, lr}
    1812:	b084      	sub	sp, #16
    1814:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1816:	2200      	movs	r2, #0
    1818:	4b14      	ldr	r3, [pc, #80]	; (186c <sd_mmc_spi_read_word+0x5c>)
    181a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    181c:	4b14      	ldr	r3, [pc, #80]	; (1870 <sd_mmc_spi_read_word+0x60>)
    181e:	8819      	ldrh	r1, [r3, #0]
    1820:	4b14      	ldr	r3, [pc, #80]	; (1874 <sd_mmc_spi_read_word+0x64>)
    1822:	6818      	ldr	r0, [r3, #0]
    1824:	4b14      	ldr	r3, [pc, #80]	; (1878 <sd_mmc_spi_read_word+0x68>)
    1826:	4798      	blx	r3
    1828:	2900      	cmp	r1, #0
    182a:	d103      	bne.n	1834 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    182c:	4b13      	ldr	r3, [pc, #76]	; (187c <sd_mmc_spi_read_word+0x6c>)
    182e:	4798      	blx	r3
    1830:	2800      	cmp	r0, #0
    1832:	d010      	beq.n	1856 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1834:	23ff      	movs	r3, #255	; 0xff
    1836:	2204      	movs	r2, #4
    1838:	a901      	add	r1, sp, #4
    183a:	4811      	ldr	r0, [pc, #68]	; (1880 <sd_mmc_spi_read_word+0x70>)
    183c:	4c11      	ldr	r4, [pc, #68]	; (1884 <sd_mmc_spi_read_word+0x74>)
    183e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1840:	4b0c      	ldr	r3, [pc, #48]	; (1874 <sd_mmc_spi_read_word+0x64>)
    1842:	681a      	ldr	r2, [r3, #0]
    1844:	1d10      	adds	r0, r2, #4
    1846:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1848:	4b09      	ldr	r3, [pc, #36]	; (1870 <sd_mmc_spi_read_word+0x60>)
    184a:	8819      	ldrh	r1, [r3, #0]
    184c:	4b0a      	ldr	r3, [pc, #40]	; (1878 <sd_mmc_spi_read_word+0x68>)
    184e:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1850:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1852:	2900      	cmp	r1, #0
    1854:	d001      	beq.n	185a <sd_mmc_spi_read_word+0x4a>
}
    1856:	b004      	add	sp, #16
    1858:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    185a:	23ff      	movs	r3, #255	; 0xff
    185c:	2202      	movs	r2, #2
    185e:	a903      	add	r1, sp, #12
    1860:	4807      	ldr	r0, [pc, #28]	; (1880 <sd_mmc_spi_read_word+0x70>)
    1862:	4c08      	ldr	r4, [pc, #32]	; (1884 <sd_mmc_spi_read_word+0x74>)
    1864:	47a0      	blx	r4
	return true;
    1866:	2001      	movs	r0, #1
    1868:	e7f5      	b.n	1856 <sd_mmc_spi_read_word+0x46>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	20000273 	.word	0x20000273
    1870:	2000026c 	.word	0x2000026c
    1874:	2000027c 	.word	0x2000027c
    1878:	00005c05 	.word	0x00005c05
    187c:	000013b9 	.word	0x000013b9
    1880:	20000230 	.word	0x20000230
    1884:	000023dd 	.word	0x000023dd

00001888 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1888:	b5f0      	push	{r4, r5, r6, r7, lr}
    188a:	46de      	mov	lr, fp
    188c:	4657      	mov	r7, sl
    188e:	4646      	mov	r6, r8
    1890:	b5c0      	push	{r6, r7, lr}
    1892:	b082      	sub	sp, #8
    1894:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1896:	2200      	movs	r2, #0
    1898:	4b17      	ldr	r3, [pc, #92]	; (18f8 <sd_mmc_spi_start_read_blocks+0x70>)
    189a:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    189c:	1e4c      	subs	r4, r1, #1
    189e:	b2a4      	uxth	r4, r4
    18a0:	2900      	cmp	r1, #0
    18a2:	d026      	beq.n	18f2 <sd_mmc_spi_start_read_blocks+0x6a>
    18a4:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    18a6:	4b15      	ldr	r3, [pc, #84]	; (18fc <sd_mmc_spi_start_read_blocks+0x74>)
    18a8:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    18aa:	4f15      	ldr	r7, [pc, #84]	; (1900 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    18ac:	47d0      	blx	sl
    18ae:	4680      	mov	r8, r0
    18b0:	2800      	cmp	r0, #0
    18b2:	d017      	beq.n	18e4 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    18b4:	883a      	ldrh	r2, [r7, #0]
    18b6:	465b      	mov	r3, fp
    18b8:	1999      	adds	r1, r3, r6
    18ba:	23ff      	movs	r3, #255	; 0xff
    18bc:	4811      	ldr	r0, [pc, #68]	; (1904 <sd_mmc_spi_start_read_blocks+0x7c>)
    18be:	4d12      	ldr	r5, [pc, #72]	; (1908 <sd_mmc_spi_start_read_blocks+0x80>)
    18c0:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    18c2:	883b      	ldrh	r3, [r7, #0]
    18c4:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    18c6:	4a11      	ldr	r2, [pc, #68]	; (190c <sd_mmc_spi_start_read_blocks+0x84>)
    18c8:	6811      	ldr	r1, [r2, #0]
    18ca:	468c      	mov	ip, r1
    18cc:	4463      	add	r3, ip
    18ce:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    18d0:	23ff      	movs	r3, #255	; 0xff
    18d2:	2202      	movs	r2, #2
    18d4:	a901      	add	r1, sp, #4
    18d6:	480b      	ldr	r0, [pc, #44]	; (1904 <sd_mmc_spi_start_read_blocks+0x7c>)
    18d8:	47a8      	blx	r5
	while (nb_block--) {
    18da:	3c01      	subs	r4, #1
    18dc:	b2a4      	uxth	r4, r4
    18de:	4b0c      	ldr	r3, [pc, #48]	; (1910 <sd_mmc_spi_start_read_blocks+0x88>)
    18e0:	429c      	cmp	r4, r3
    18e2:	d1e3      	bne.n	18ac <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    18e4:	4640      	mov	r0, r8
    18e6:	b002      	add	sp, #8
    18e8:	bc1c      	pop	{r2, r3, r4}
    18ea:	4690      	mov	r8, r2
    18ec:	469a      	mov	sl, r3
    18ee:	46a3      	mov	fp, r4
    18f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    18f2:	2301      	movs	r3, #1
    18f4:	4698      	mov	r8, r3
    18f6:	e7f5      	b.n	18e4 <sd_mmc_spi_start_read_blocks+0x5c>
    18f8:	20000273 	.word	0x20000273
    18fc:	000013b9 	.word	0x000013b9
    1900:	2000026c 	.word	0x2000026c
    1904:	20000230 	.word	0x20000230
    1908:	000023dd 	.word	0x000023dd
    190c:	2000027c 	.word	0x2000027c
    1910:	0000ffff 	.word	0x0000ffff

00001914 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    1914:	2001      	movs	r0, #1
    1916:	4770      	bx	lr

00001918 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	46c6      	mov	lr, r8
    191c:	b500      	push	{lr}
    191e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1920:	2200      	movs	r2, #0
    1922:	4b15      	ldr	r3, [pc, #84]	; (1978 <sd_mmc_spi_start_write_blocks+0x60>)
    1924:	701a      	strb	r2, [r3, #0]
	pos = 0;
    1926:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1928:	4f14      	ldr	r7, [pc, #80]	; (197c <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    192a:	4e15      	ldr	r6, [pc, #84]	; (1980 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    192c:	e000      	b.n	1930 <sd_mmc_spi_start_write_blocks+0x18>
{
    192e:	0021      	movs	r1, r4
	while (nb_block--) {
    1930:	1e4c      	subs	r4, r1, #1
    1932:	b2a4      	uxth	r4, r4
    1934:	2900      	cmp	r1, #0
    1936:	d01b      	beq.n	1970 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1938:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    193a:	8832      	ldrh	r2, [r6, #0]
    193c:	4643      	mov	r3, r8
    193e:	1959      	adds	r1, r3, r5
    1940:	4810      	ldr	r0, [pc, #64]	; (1984 <sd_mmc_spi_start_write_blocks+0x6c>)
    1942:	4b11      	ldr	r3, [pc, #68]	; (1988 <sd_mmc_spi_start_write_blocks+0x70>)
    1944:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    1946:	8833      	ldrh	r3, [r6, #0]
    1948:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    194a:	4a10      	ldr	r2, [pc, #64]	; (198c <sd_mmc_spi_start_write_blocks+0x74>)
    194c:	6811      	ldr	r1, [r2, #0]
    194e:	468c      	mov	ip, r1
    1950:	4463      	add	r3, ip
    1952:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1954:	4b0e      	ldr	r3, [pc, #56]	; (1990 <sd_mmc_spi_start_write_blocks+0x78>)
    1956:	4798      	blx	r3
    1958:	2800      	cmp	r0, #0
    195a:	d00a      	beq.n	1972 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    195c:	2c00      	cmp	r4, #0
    195e:	d0e6      	beq.n	192e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1960:	4b0c      	ldr	r3, [pc, #48]	; (1994 <sd_mmc_spi_start_write_blocks+0x7c>)
    1962:	4798      	blx	r3
    1964:	2800      	cmp	r0, #0
    1966:	d1e2      	bne.n	192e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1968:	2205      	movs	r2, #5
    196a:	4b03      	ldr	r3, [pc, #12]	; (1978 <sd_mmc_spi_start_write_blocks+0x60>)
    196c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    196e:	e000      	b.n	1972 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1970:	2001      	movs	r0, #1
}
    1972:	bc04      	pop	{r2}
    1974:	4690      	mov	r8, r2
    1976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1978:	20000273 	.word	0x20000273
    197c:	00001295 	.word	0x00001295
    1980:	2000026c 	.word	0x2000026c
    1984:	20000230 	.word	0x20000230
    1988:	000025a5 	.word	0x000025a5
    198c:	2000027c 	.word	0x2000027c
    1990:	00001425 	.word	0x00001425
    1994:	000012dd 	.word	0x000012dd

00001998 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1998:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    199c:	4798      	blx	r3
    199e:	2800      	cmp	r0, #0
    19a0:	d103      	bne.n	19aa <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    19a2:	2205      	movs	r2, #5
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    19a6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    19a8:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    19aa:	4b03      	ldr	r3, [pc, #12]	; (19b8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    19ac:	4798      	blx	r3
    19ae:	e7fb      	b.n	19a8 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    19b0:	000012dd 	.word	0x000012dd
    19b4:	20000273 	.word	0x20000273
    19b8:	00001341 	.word	0x00001341

000019bc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    19bc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    19be:	2301      	movs	r3, #1
    19c0:	2800      	cmp	r0, #0
    19c2:	d001      	beq.n	19c8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    19c4:	0018      	movs	r0, r3
    19c6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    19c8:	4b01      	ldr	r3, [pc, #4]	; (19d0 <mem_test_unit_ready+0x14>)
    19ca:	4798      	blx	r3
    19cc:	0003      	movs	r3, r0
    19ce:	e7f9      	b.n	19c4 <mem_test_unit_ready+0x8>
    19d0:	00001195 	.word	0x00001195

000019d4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    19d4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    19d6:	2301      	movs	r3, #1
    19d8:	2800      	cmp	r0, #0
    19da:	d001      	beq.n	19e0 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    19dc:	0018      	movs	r0, r3
    19de:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    19e0:	0008      	movs	r0, r1
    19e2:	4b02      	ldr	r3, [pc, #8]	; (19ec <mem_read_capacity+0x18>)
    19e4:	4798      	blx	r3
    19e6:	0003      	movs	r3, r0
    19e8:	e7f8      	b.n	19dc <mem_read_capacity+0x8>
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	000011c5 	.word	0x000011c5

000019f0 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    19f0:	4243      	negs	r3, r0
    19f2:	4158      	adcs	r0, r3
    19f4:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    19f6:	4770      	bx	lr

000019f8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    19f8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    19fa:	2301      	movs	r3, #1
    19fc:	2800      	cmp	r0, #0
    19fe:	d001      	beq.n	1a04 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    1a00:	0018      	movs	r0, r3
    1a02:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1a04:	4b01      	ldr	r3, [pc, #4]	; (1a0c <mem_wr_protect+0x14>)
    1a06:	4798      	blx	r3
    1a08:	0003      	movs	r3, r0
    1a0a:	e7f9      	b.n	1a00 <mem_wr_protect+0x8>
    1a0c:	000011d5 	.word	0x000011d5

00001a10 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1a10:	b510      	push	{r4, lr}
    1a12:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1a14:	2301      	movs	r3, #1
    1a16:	2800      	cmp	r0, #0
    1a18:	d001      	beq.n	1a1e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1a1a:	0018      	movs	r0, r3
    1a1c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1a1e:	0011      	movs	r1, r2
    1a20:	0020      	movs	r0, r4
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <memory_2_ram+0x1c>)
    1a24:	4798      	blx	r3
    1a26:	0003      	movs	r3, r0
    1a28:	e7f7      	b.n	1a1a <memory_2_ram+0xa>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	00001229 	.word	0x00001229

00001a30 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1a30:	b510      	push	{r4, lr}
    1a32:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1a34:	2301      	movs	r3, #1
    1a36:	2800      	cmp	r0, #0
    1a38:	d001      	beq.n	1a3e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    1a3a:	0018      	movs	r0, r3
    1a3c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1a3e:	0011      	movs	r1, r2
    1a40:	0020      	movs	r0, r4
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <ram_2_memory+0x1c>)
    1a44:	4798      	blx	r3
    1a46:	0003      	movs	r3, r0
    1a48:	e7f7      	b.n	1a3a <ram_2_memory+0xa>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	00001281 	.word	0x00001281

00001a50 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1a50:	4b0c      	ldr	r3, [pc, #48]	; (1a84 <cpu_irq_enter_critical+0x34>)
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d106      	bne.n	1a66 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a58:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d007      	beq.n	1a70 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a60:	2200      	movs	r2, #0
    1a62:	4b09      	ldr	r3, [pc, #36]	; (1a88 <cpu_irq_enter_critical+0x38>)
    1a64:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a66:	4a07      	ldr	r2, [pc, #28]	; (1a84 <cpu_irq_enter_critical+0x34>)
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	3301      	adds	r3, #1
    1a6c:	6013      	str	r3, [r2, #0]
}
    1a6e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1a70:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a72:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a76:	2200      	movs	r2, #0
    1a78:	4b04      	ldr	r3, [pc, #16]	; (1a8c <cpu_irq_enter_critical+0x3c>)
    1a7a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a7c:	3201      	adds	r2, #1
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <cpu_irq_enter_critical+0x38>)
    1a80:	701a      	strb	r2, [r3, #0]
    1a82:	e7f0      	b.n	1a66 <cpu_irq_enter_critical+0x16>
    1a84:	20000284 	.word	0x20000284
    1a88:	20000288 	.word	0x20000288
    1a8c:	20000009 	.word	0x20000009

00001a90 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <cpu_irq_leave_critical+0x24>)
    1a92:	681a      	ldr	r2, [r3, #0]
    1a94:	3a01      	subs	r2, #1
    1a96:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d109      	bne.n	1ab2 <cpu_irq_leave_critical+0x22>
    1a9e:	4b06      	ldr	r3, [pc, #24]	; (1ab8 <cpu_irq_leave_critical+0x28>)
    1aa0:	781b      	ldrb	r3, [r3, #0]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d005      	beq.n	1ab2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1aa6:	2201      	movs	r2, #1
    1aa8:	4b04      	ldr	r3, [pc, #16]	; (1abc <cpu_irq_leave_critical+0x2c>)
    1aaa:	701a      	strb	r2, [r3, #0]
    1aac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ab0:	b662      	cpsie	i
	}
}
    1ab2:	4770      	bx	lr
    1ab4:	20000284 	.word	0x20000284
    1ab8:	20000288 	.word	0x20000288
    1abc:	20000009 	.word	0x20000009

00001ac0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ac0:	b500      	push	{lr}
    1ac2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ac4:	ab01      	add	r3, sp, #4
    1ac6:	2280      	movs	r2, #128	; 0x80
    1ac8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1aca:	780a      	ldrb	r2, [r1, #0]
    1acc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1ace:	784a      	ldrb	r2, [r1, #1]
    1ad0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1ad2:	788a      	ldrb	r2, [r1, #2]
    1ad4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1ad6:	0019      	movs	r1, r3
    1ad8:	4b01      	ldr	r3, [pc, #4]	; (1ae0 <port_pin_set_config+0x20>)
    1ada:	4798      	blx	r3
}
    1adc:	b003      	add	sp, #12
    1ade:	bd00      	pop	{pc}
    1ae0:	000035e9 	.word	0x000035e9

00001ae4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1ae4:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1ae6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1ae8:	b25b      	sxtb	r3, r3
    1aea:	2b00      	cmp	r3, #0
    1aec:	dbfb      	blt.n	1ae6 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1aee:	8813      	ldrh	r3, [r2, #0]
    1af0:	2102      	movs	r1, #2
    1af2:	430b      	orrs	r3, r1
    1af4:	8013      	strh	r3, [r2, #0]
}
    1af6:	4770      	bx	lr

00001af8 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1af8:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1afa:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1afc:	b25b      	sxtb	r3, r3
    1afe:	2b00      	cmp	r3, #0
    1b00:	dbfb      	blt.n	1afa <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1b02:	23c1      	movs	r3, #193	; 0xc1
    1b04:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1b06:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1b08:	8813      	ldrh	r3, [r2, #0]
    1b0a:	2102      	movs	r1, #2
    1b0c:	438b      	bics	r3, r1
    1b0e:	8013      	strh	r3, [r2, #0]
}
    1b10:	4770      	bx	lr
	...

00001b14 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b18:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1b1a:	4b06      	ldr	r3, [pc, #24]	; (1b34 <rtc_calendar_reset+0x20>)
    1b1c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1b1e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b20:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1b22:	b25b      	sxtb	r3, r3
    1b24:	2b00      	cmp	r3, #0
    1b26:	dbfb      	blt.n	1b20 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1b28:	882b      	ldrh	r3, [r5, #0]
    1b2a:	2201      	movs	r2, #1
    1b2c:	4313      	orrs	r3, r2
    1b2e:	802b      	strh	r3, [r5, #0]
}
    1b30:	bd70      	pop	{r4, r5, r6, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	00001af9 	.word	0x00001af9

00001b38 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1b38:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1b3a:	88cb      	ldrh	r3, [r1, #6]
    1b3c:	88c2      	ldrh	r2, [r0, #6]
    1b3e:	1a9a      	subs	r2, r3, r2
    1b40:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1b42:	794b      	ldrb	r3, [r1, #5]
    1b44:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1b46:	790c      	ldrb	r4, [r1, #4]
    1b48:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1b4a:	4323      	orrs	r3, r4
    1b4c:	788c      	ldrb	r4, [r1, #2]
    1b4e:	0324      	lsls	r4, r4, #12
    1b50:	4323      	orrs	r3, r4
    1b52:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1b54:	7902      	ldrb	r2, [r0, #4]
    1b56:	2a00      	cmp	r2, #0
    1b58:	d105      	bne.n	1b66 <rtc_calendar_time_to_register_value+0x2e>
    1b5a:	78ca      	ldrb	r2, [r1, #3]
    1b5c:	2a00      	cmp	r2, #0
    1b5e:	d002      	beq.n	1b66 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1b60:	2280      	movs	r2, #128	; 0x80
    1b62:	0252      	lsls	r2, r2, #9
    1b64:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1b66:	7848      	ldrb	r0, [r1, #1]
    1b68:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1b6a:	780a      	ldrb	r2, [r1, #0]
    1b6c:	4310      	orrs	r0, r2
    1b6e:	4318      	orrs	r0, r3

	return register_value;
}
    1b70:	bd10      	pop	{r4, pc}

00001b72 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1b72:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b74:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1b76:	88c4      	ldrh	r4, [r0, #6]
    1b78:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b7a:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1b7c:	018b      	lsls	r3, r1, #6
    1b7e:	0f1b      	lsrs	r3, r3, #28
    1b80:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1b82:	028b      	lsls	r3, r1, #10
    1b84:	0edb      	lsrs	r3, r3, #27
    1b86:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1b88:	7903      	ldrb	r3, [r0, #4]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d10c      	bne.n	1ba8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1b8e:	040b      	lsls	r3, r1, #16
    1b90:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1b92:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1b94:	03cb      	lsls	r3, r1, #15
    1b96:	0fdb      	lsrs	r3, r3, #31
    1b98:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1b9a:	0988      	lsrs	r0, r1, #6
    1b9c:	233f      	movs	r3, #63	; 0x3f
    1b9e:	4018      	ands	r0, r3
    1ba0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1ba2:	4019      	ands	r1, r3
    1ba4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1ba6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1ba8:	03cb      	lsls	r3, r1, #15
    1baa:	0edb      	lsrs	r3, r3, #27
    1bac:	7093      	strb	r3, [r2, #2]
    1bae:	e7f4      	b.n	1b9a <rtc_calendar_register_value_to_time+0x28>

00001bb0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1bb0:	b510      	push	{r4, lr}
    1bb2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bb4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1bb6:	7941      	ldrb	r1, [r0, #5]
    1bb8:	2900      	cmp	r1, #0
    1bba:	d006      	beq.n	1bca <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1bbc:	8859      	ldrh	r1, [r3, #2]
    1bbe:	0449      	lsls	r1, r1, #17
    1bc0:	d50b      	bpl.n	1bda <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1bc2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1bc4:	4b0a      	ldr	r3, [pc, #40]	; (1bf0 <rtc_calendar_get_time+0x40>)
    1bc6:	4798      	blx	r3
}
    1bc8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1bca:	490a      	ldr	r1, [pc, #40]	; (1bf4 <rtc_calendar_get_time+0x44>)
    1bcc:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1bce:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1bd0:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1bd2:	b249      	sxtb	r1, r1
    1bd4:	2900      	cmp	r1, #0
    1bd6:	dbfb      	blt.n	1bd0 <rtc_calendar_get_time+0x20>
    1bd8:	e7f3      	b.n	1bc2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1bda:	8859      	ldrh	r1, [r3, #2]
    1bdc:	24c0      	movs	r4, #192	; 0xc0
    1bde:	0224      	lsls	r4, r4, #8
    1be0:	4321      	orrs	r1, r4
    1be2:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1be4:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1be6:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1be8:	b249      	sxtb	r1, r1
    1bea:	2900      	cmp	r1, #0
    1bec:	dbfb      	blt.n	1be6 <rtc_calendar_get_time+0x36>
    1bee:	e7e8      	b.n	1bc2 <rtc_calendar_get_time+0x12>
    1bf0:	00001b73 	.word	0x00001b73
    1bf4:	ffff8000 	.word	0xffff8000

00001bf8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1bf8:	b570      	push	{r4, r5, r6, lr}
    1bfa:	000d      	movs	r5, r1
    1bfc:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1bfe:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1c00:	2a01      	cmp	r2, #1
    1c02:	d901      	bls.n	1c08 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1c04:	0018      	movs	r0, r3
    1c06:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1c08:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1c0a:	4b06      	ldr	r3, [pc, #24]	; (1c24 <rtc_calendar_set_alarm+0x2c>)
    1c0c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1c0e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1c10:	b25b      	sxtb	r3, r3
    1c12:	2b00      	cmp	r3, #0
    1c14:	dbfb      	blt.n	1c0e <rtc_calendar_set_alarm+0x16>
    1c16:	00e4      	lsls	r4, r4, #3
    1c18:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1c1a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1c1c:	7a2b      	ldrb	r3, [r5, #8]
    1c1e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1c20:	2300      	movs	r3, #0
    1c22:	e7ef      	b.n	1c04 <rtc_calendar_set_alarm+0xc>
    1c24:	00001b39 	.word	0x00001b39

00001c28 <rtc_calendar_init>:
{
    1c28:	b530      	push	{r4, r5, lr}
    1c2a:	b083      	sub	sp, #12
    1c2c:	0005      	movs	r5, r0
    1c2e:	0014      	movs	r4, r2
	module->hw = hw;
    1c30:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1c32:	4a1c      	ldr	r2, [pc, #112]	; (1ca4 <rtc_calendar_init+0x7c>)
    1c34:	6993      	ldr	r3, [r2, #24]
    1c36:	2120      	movs	r1, #32
    1c38:	430b      	orrs	r3, r1
    1c3a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1c3c:	a901      	add	r1, sp, #4
    1c3e:	2302      	movs	r3, #2
    1c40:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1c42:	2004      	movs	r0, #4
    1c44:	4b18      	ldr	r3, [pc, #96]	; (1ca8 <rtc_calendar_init+0x80>)
    1c46:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1c48:	2004      	movs	r0, #4
    1c4a:	4b18      	ldr	r3, [pc, #96]	; (1cac <rtc_calendar_init+0x84>)
    1c4c:	4798      	blx	r3
	rtc_calendar_reset(module);
    1c4e:	0028      	movs	r0, r5
    1c50:	4b17      	ldr	r3, [pc, #92]	; (1cb0 <rtc_calendar_init+0x88>)
    1c52:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1c54:	7923      	ldrb	r3, [r4, #4]
    1c56:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1c58:	78e3      	ldrb	r3, [r4, #3]
    1c5a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1c5c:	88e3      	ldrh	r3, [r4, #6]
    1c5e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1c60:	4b14      	ldr	r3, [pc, #80]	; (1cb4 <rtc_calendar_init+0x8c>)
    1c62:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1c64:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1c66:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1c68:	7921      	ldrb	r1, [r4, #4]
    1c6a:	2900      	cmp	r1, #0
    1c6c:	d017      	beq.n	1c9e <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1c6e:	2108      	movs	r1, #8
    1c70:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1c72:	78a1      	ldrb	r1, [r4, #2]
    1c74:	2900      	cmp	r1, #0
    1c76:	d001      	beq.n	1c7c <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1c78:	2180      	movs	r1, #128	; 0x80
    1c7a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1c7c:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1c7e:	78e3      	ldrb	r3, [r4, #3]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d004      	beq.n	1c8e <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1c84:	8853      	ldrh	r3, [r2, #2]
    1c86:	2180      	movs	r1, #128	; 0x80
    1c88:	01c9      	lsls	r1, r1, #7
    1c8a:	430b      	orrs	r3, r1
    1c8c:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1c8e:	0021      	movs	r1, r4
    1c90:	3108      	adds	r1, #8
    1c92:	2200      	movs	r2, #0
    1c94:	0028      	movs	r0, r5
    1c96:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <rtc_calendar_init+0x90>)
    1c98:	4798      	blx	r3
}
    1c9a:	b003      	add	sp, #12
    1c9c:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c9e:	2148      	movs	r1, #72	; 0x48
    1ca0:	430b      	orrs	r3, r1
    1ca2:	e7e6      	b.n	1c72 <rtc_calendar_init+0x4a>
    1ca4:	40000400 	.word	0x40000400
    1ca8:	000034f1 	.word	0x000034f1
    1cac:	00003465 	.word	0x00003465
    1cb0:	00001b15 	.word	0x00001b15
    1cb4:	20000b34 	.word	0x20000b34
    1cb8:	00001bf9 	.word	0x00001bf9

00001cbc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cbe:	46de      	mov	lr, fp
    1cc0:	4657      	mov	r7, sl
    1cc2:	464e      	mov	r6, r9
    1cc4:	4645      	mov	r5, r8
    1cc6:	b5e0      	push	{r5, r6, r7, lr}
    1cc8:	b087      	sub	sp, #28
    1cca:	4680      	mov	r8, r0
    1ccc:	9104      	str	r1, [sp, #16]
    1cce:	0016      	movs	r6, r2
    1cd0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cd2:	2200      	movs	r2, #0
    1cd4:	2300      	movs	r3, #0
    1cd6:	2100      	movs	r1, #0
    1cd8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1cda:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cdc:	2001      	movs	r0, #1
    1cde:	0021      	movs	r1, r4
    1ce0:	9600      	str	r6, [sp, #0]
    1ce2:	9701      	str	r7, [sp, #4]
    1ce4:	465c      	mov	r4, fp
    1ce6:	9403      	str	r4, [sp, #12]
    1ce8:	4644      	mov	r4, r8
    1cea:	9405      	str	r4, [sp, #20]
    1cec:	e013      	b.n	1d16 <long_division+0x5a>
    1cee:	2420      	movs	r4, #32
    1cf0:	1a64      	subs	r4, r4, r1
    1cf2:	0005      	movs	r5, r0
    1cf4:	40e5      	lsrs	r5, r4
    1cf6:	46a8      	mov	r8, r5
    1cf8:	e014      	b.n	1d24 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1cfa:	9c00      	ldr	r4, [sp, #0]
    1cfc:	9d01      	ldr	r5, [sp, #4]
    1cfe:	1b12      	subs	r2, r2, r4
    1d00:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1d02:	465c      	mov	r4, fp
    1d04:	464d      	mov	r5, r9
    1d06:	432c      	orrs	r4, r5
    1d08:	46a3      	mov	fp, r4
    1d0a:	9c03      	ldr	r4, [sp, #12]
    1d0c:	4645      	mov	r5, r8
    1d0e:	432c      	orrs	r4, r5
    1d10:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1d12:	3901      	subs	r1, #1
    1d14:	d325      	bcc.n	1d62 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1d16:	2420      	movs	r4, #32
    1d18:	4264      	negs	r4, r4
    1d1a:	190c      	adds	r4, r1, r4
    1d1c:	d4e7      	bmi.n	1cee <long_division+0x32>
    1d1e:	0005      	movs	r5, r0
    1d20:	40a5      	lsls	r5, r4
    1d22:	46a8      	mov	r8, r5
    1d24:	0004      	movs	r4, r0
    1d26:	408c      	lsls	r4, r1
    1d28:	46a1      	mov	r9, r4
		r = r << 1;
    1d2a:	1892      	adds	r2, r2, r2
    1d2c:	415b      	adcs	r3, r3
    1d2e:	0014      	movs	r4, r2
    1d30:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d32:	9e05      	ldr	r6, [sp, #20]
    1d34:	464f      	mov	r7, r9
    1d36:	403e      	ands	r6, r7
    1d38:	46b4      	mov	ip, r6
    1d3a:	9e04      	ldr	r6, [sp, #16]
    1d3c:	4647      	mov	r7, r8
    1d3e:	403e      	ands	r6, r7
    1d40:	46b2      	mov	sl, r6
    1d42:	4666      	mov	r6, ip
    1d44:	4657      	mov	r7, sl
    1d46:	433e      	orrs	r6, r7
    1d48:	d003      	beq.n	1d52 <long_division+0x96>
			r |= 0x01;
    1d4a:	0006      	movs	r6, r0
    1d4c:	4326      	orrs	r6, r4
    1d4e:	0032      	movs	r2, r6
    1d50:	002b      	movs	r3, r5
		if (r >= d) {
    1d52:	9c00      	ldr	r4, [sp, #0]
    1d54:	9d01      	ldr	r5, [sp, #4]
    1d56:	429d      	cmp	r5, r3
    1d58:	d8db      	bhi.n	1d12 <long_division+0x56>
    1d5a:	d1ce      	bne.n	1cfa <long_division+0x3e>
    1d5c:	4294      	cmp	r4, r2
    1d5e:	d8d8      	bhi.n	1d12 <long_division+0x56>
    1d60:	e7cb      	b.n	1cfa <long_division+0x3e>
    1d62:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1d64:	4658      	mov	r0, fp
    1d66:	0019      	movs	r1, r3
    1d68:	b007      	add	sp, #28
    1d6a:	bc3c      	pop	{r2, r3, r4, r5}
    1d6c:	4690      	mov	r8, r2
    1d6e:	4699      	mov	r9, r3
    1d70:	46a2      	mov	sl, r4
    1d72:	46ab      	mov	fp, r5
    1d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d76 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d76:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d78:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d7a:	2340      	movs	r3, #64	; 0x40
    1d7c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d7e:	4281      	cmp	r1, r0
    1d80:	d202      	bcs.n	1d88 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d82:	0018      	movs	r0, r3
    1d84:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d86:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d88:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d8a:	1c63      	adds	r3, r4, #1
    1d8c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d8e:	4288      	cmp	r0, r1
    1d90:	d9f9      	bls.n	1d86 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d92:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d94:	2cff      	cmp	r4, #255	; 0xff
    1d96:	d8f4      	bhi.n	1d82 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d98:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d9a:	2300      	movs	r3, #0
    1d9c:	e7f1      	b.n	1d82 <_sercom_get_sync_baud_val+0xc>
	...

00001da0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da2:	b083      	sub	sp, #12
    1da4:	000f      	movs	r7, r1
    1da6:	0016      	movs	r6, r2
    1da8:	aa08      	add	r2, sp, #32
    1daa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1dac:	0004      	movs	r4, r0
    1dae:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1db0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1db2:	42bc      	cmp	r4, r7
    1db4:	d902      	bls.n	1dbc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1db6:	0010      	movs	r0, r2
    1db8:	b003      	add	sp, #12
    1dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d114      	bne.n	1dea <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1dc0:	0002      	movs	r2, r0
    1dc2:	0008      	movs	r0, r1
    1dc4:	2100      	movs	r1, #0
    1dc6:	4c19      	ldr	r4, [pc, #100]	; (1e2c <_sercom_get_async_baud_val+0x8c>)
    1dc8:	47a0      	blx	r4
    1dca:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1dcc:	003a      	movs	r2, r7
    1dce:	2300      	movs	r3, #0
    1dd0:	2000      	movs	r0, #0
    1dd2:	4c17      	ldr	r4, [pc, #92]	; (1e30 <_sercom_get_async_baud_val+0x90>)
    1dd4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1dd6:	2200      	movs	r2, #0
    1dd8:	2301      	movs	r3, #1
    1dda:	1a12      	subs	r2, r2, r0
    1ddc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1dde:	0c12      	lsrs	r2, r2, #16
    1de0:	041b      	lsls	r3, r3, #16
    1de2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1de4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1de6:	2200      	movs	r2, #0
    1de8:	e7e5      	b.n	1db6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1dea:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1dec:	2b01      	cmp	r3, #1
    1dee:	d1f9      	bne.n	1de4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1df0:	000a      	movs	r2, r1
    1df2:	2300      	movs	r3, #0
    1df4:	2100      	movs	r1, #0
    1df6:	4c0d      	ldr	r4, [pc, #52]	; (1e2c <_sercom_get_async_baud_val+0x8c>)
    1df8:	47a0      	blx	r4
    1dfa:	0002      	movs	r2, r0
    1dfc:	000b      	movs	r3, r1
    1dfe:	9200      	str	r2, [sp, #0]
    1e00:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1e02:	0038      	movs	r0, r7
    1e04:	2100      	movs	r1, #0
    1e06:	4c0a      	ldr	r4, [pc, #40]	; (1e30 <_sercom_get_async_baud_val+0x90>)
    1e08:	47a0      	blx	r4
    1e0a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1e0c:	2380      	movs	r3, #128	; 0x80
    1e0e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e10:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1e12:	4298      	cmp	r0, r3
    1e14:	d8cf      	bhi.n	1db6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1e16:	0f79      	lsrs	r1, r7, #29
    1e18:	00f8      	lsls	r0, r7, #3
    1e1a:	9a00      	ldr	r2, [sp, #0]
    1e1c:	9b01      	ldr	r3, [sp, #4]
    1e1e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1e20:	00ea      	lsls	r2, r5, #3
    1e22:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1e24:	b2d2      	uxtb	r2, r2
    1e26:	0352      	lsls	r2, r2, #13
    1e28:	432a      	orrs	r2, r5
    1e2a:	e7db      	b.n	1de4 <_sercom_get_async_baud_val+0x44>
    1e2c:	00005de5 	.word	0x00005de5
    1e30:	00001cbd 	.word	0x00001cbd

00001e34 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e34:	b510      	push	{r4, lr}
    1e36:	b082      	sub	sp, #8
    1e38:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e3a:	4b0e      	ldr	r3, [pc, #56]	; (1e74 <sercom_set_gclk_generator+0x40>)
    1e3c:	781b      	ldrb	r3, [r3, #0]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d007      	beq.n	1e52 <sercom_set_gclk_generator+0x1e>
    1e42:	2900      	cmp	r1, #0
    1e44:	d105      	bne.n	1e52 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1e46:	4b0b      	ldr	r3, [pc, #44]	; (1e74 <sercom_set_gclk_generator+0x40>)
    1e48:	785b      	ldrb	r3, [r3, #1]
    1e4a:	4283      	cmp	r3, r0
    1e4c:	d010      	beq.n	1e70 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e4e:	201d      	movs	r0, #29
    1e50:	e00c      	b.n	1e6c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1e52:	a901      	add	r1, sp, #4
    1e54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e56:	2013      	movs	r0, #19
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <sercom_set_gclk_generator+0x44>)
    1e5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e5c:	2013      	movs	r0, #19
    1e5e:	4b07      	ldr	r3, [pc, #28]	; (1e7c <sercom_set_gclk_generator+0x48>)
    1e60:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e62:	4b04      	ldr	r3, [pc, #16]	; (1e74 <sercom_set_gclk_generator+0x40>)
    1e64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e66:	2201      	movs	r2, #1
    1e68:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e6a:	2000      	movs	r0, #0
}
    1e6c:	b002      	add	sp, #8
    1e6e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e70:	2000      	movs	r0, #0
    1e72:	e7fb      	b.n	1e6c <sercom_set_gclk_generator+0x38>
    1e74:	2000028c 	.word	0x2000028c
    1e78:	000034f1 	.word	0x000034f1
    1e7c:	00003465 	.word	0x00003465

00001e80 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e80:	4b40      	ldr	r3, [pc, #256]	; (1f84 <_sercom_get_default_pad+0x104>)
    1e82:	4298      	cmp	r0, r3
    1e84:	d031      	beq.n	1eea <_sercom_get_default_pad+0x6a>
    1e86:	d90a      	bls.n	1e9e <_sercom_get_default_pad+0x1e>
    1e88:	4b3f      	ldr	r3, [pc, #252]	; (1f88 <_sercom_get_default_pad+0x108>)
    1e8a:	4298      	cmp	r0, r3
    1e8c:	d04d      	beq.n	1f2a <_sercom_get_default_pad+0xaa>
    1e8e:	4b3f      	ldr	r3, [pc, #252]	; (1f8c <_sercom_get_default_pad+0x10c>)
    1e90:	4298      	cmp	r0, r3
    1e92:	d05a      	beq.n	1f4a <_sercom_get_default_pad+0xca>
    1e94:	4b3e      	ldr	r3, [pc, #248]	; (1f90 <_sercom_get_default_pad+0x110>)
    1e96:	4298      	cmp	r0, r3
    1e98:	d037      	beq.n	1f0a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e9a:	2000      	movs	r0, #0
}
    1e9c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e9e:	4b3d      	ldr	r3, [pc, #244]	; (1f94 <_sercom_get_default_pad+0x114>)
    1ea0:	4298      	cmp	r0, r3
    1ea2:	d00c      	beq.n	1ebe <_sercom_get_default_pad+0x3e>
    1ea4:	4b3c      	ldr	r3, [pc, #240]	; (1f98 <_sercom_get_default_pad+0x118>)
    1ea6:	4298      	cmp	r0, r3
    1ea8:	d1f7      	bne.n	1e9a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eaa:	2901      	cmp	r1, #1
    1eac:	d017      	beq.n	1ede <_sercom_get_default_pad+0x5e>
    1eae:	2900      	cmp	r1, #0
    1eb0:	d05d      	beq.n	1f6e <_sercom_get_default_pad+0xee>
    1eb2:	2902      	cmp	r1, #2
    1eb4:	d015      	beq.n	1ee2 <_sercom_get_default_pad+0x62>
    1eb6:	2903      	cmp	r1, #3
    1eb8:	d015      	beq.n	1ee6 <_sercom_get_default_pad+0x66>
	return 0;
    1eba:	2000      	movs	r0, #0
    1ebc:	e7ee      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ebe:	2901      	cmp	r1, #1
    1ec0:	d007      	beq.n	1ed2 <_sercom_get_default_pad+0x52>
    1ec2:	2900      	cmp	r1, #0
    1ec4:	d051      	beq.n	1f6a <_sercom_get_default_pad+0xea>
    1ec6:	2902      	cmp	r1, #2
    1ec8:	d005      	beq.n	1ed6 <_sercom_get_default_pad+0x56>
    1eca:	2903      	cmp	r1, #3
    1ecc:	d005      	beq.n	1eda <_sercom_get_default_pad+0x5a>
	return 0;
    1ece:	2000      	movs	r0, #0
    1ed0:	e7e4      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ed2:	4832      	ldr	r0, [pc, #200]	; (1f9c <_sercom_get_default_pad+0x11c>)
    1ed4:	e7e2      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1ed6:	4832      	ldr	r0, [pc, #200]	; (1fa0 <_sercom_get_default_pad+0x120>)
    1ed8:	e7e0      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1eda:	4832      	ldr	r0, [pc, #200]	; (1fa4 <_sercom_get_default_pad+0x124>)
    1edc:	e7de      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1ede:	4832      	ldr	r0, [pc, #200]	; (1fa8 <_sercom_get_default_pad+0x128>)
    1ee0:	e7dc      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1ee2:	4832      	ldr	r0, [pc, #200]	; (1fac <_sercom_get_default_pad+0x12c>)
    1ee4:	e7da      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1ee6:	4832      	ldr	r0, [pc, #200]	; (1fb0 <_sercom_get_default_pad+0x130>)
    1ee8:	e7d8      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1eea:	2901      	cmp	r1, #1
    1eec:	d007      	beq.n	1efe <_sercom_get_default_pad+0x7e>
    1eee:	2900      	cmp	r1, #0
    1ef0:	d03f      	beq.n	1f72 <_sercom_get_default_pad+0xf2>
    1ef2:	2902      	cmp	r1, #2
    1ef4:	d005      	beq.n	1f02 <_sercom_get_default_pad+0x82>
    1ef6:	2903      	cmp	r1, #3
    1ef8:	d005      	beq.n	1f06 <_sercom_get_default_pad+0x86>
	return 0;
    1efa:	2000      	movs	r0, #0
    1efc:	e7ce      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1efe:	482d      	ldr	r0, [pc, #180]	; (1fb4 <_sercom_get_default_pad+0x134>)
    1f00:	e7cc      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f02:	482d      	ldr	r0, [pc, #180]	; (1fb8 <_sercom_get_default_pad+0x138>)
    1f04:	e7ca      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f06:	482d      	ldr	r0, [pc, #180]	; (1fbc <_sercom_get_default_pad+0x13c>)
    1f08:	e7c8      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f0a:	2901      	cmp	r1, #1
    1f0c:	d007      	beq.n	1f1e <_sercom_get_default_pad+0x9e>
    1f0e:	2900      	cmp	r1, #0
    1f10:	d031      	beq.n	1f76 <_sercom_get_default_pad+0xf6>
    1f12:	2902      	cmp	r1, #2
    1f14:	d005      	beq.n	1f22 <_sercom_get_default_pad+0xa2>
    1f16:	2903      	cmp	r1, #3
    1f18:	d005      	beq.n	1f26 <_sercom_get_default_pad+0xa6>
	return 0;
    1f1a:	2000      	movs	r0, #0
    1f1c:	e7be      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f1e:	4828      	ldr	r0, [pc, #160]	; (1fc0 <_sercom_get_default_pad+0x140>)
    1f20:	e7bc      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f22:	4828      	ldr	r0, [pc, #160]	; (1fc4 <_sercom_get_default_pad+0x144>)
    1f24:	e7ba      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f26:	4828      	ldr	r0, [pc, #160]	; (1fc8 <_sercom_get_default_pad+0x148>)
    1f28:	e7b8      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f2a:	2901      	cmp	r1, #1
    1f2c:	d007      	beq.n	1f3e <_sercom_get_default_pad+0xbe>
    1f2e:	2900      	cmp	r1, #0
    1f30:	d023      	beq.n	1f7a <_sercom_get_default_pad+0xfa>
    1f32:	2902      	cmp	r1, #2
    1f34:	d005      	beq.n	1f42 <_sercom_get_default_pad+0xc2>
    1f36:	2903      	cmp	r1, #3
    1f38:	d005      	beq.n	1f46 <_sercom_get_default_pad+0xc6>
	return 0;
    1f3a:	2000      	movs	r0, #0
    1f3c:	e7ae      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f3e:	4823      	ldr	r0, [pc, #140]	; (1fcc <_sercom_get_default_pad+0x14c>)
    1f40:	e7ac      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f42:	4823      	ldr	r0, [pc, #140]	; (1fd0 <_sercom_get_default_pad+0x150>)
    1f44:	e7aa      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f46:	4823      	ldr	r0, [pc, #140]	; (1fd4 <_sercom_get_default_pad+0x154>)
    1f48:	e7a8      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f4a:	2901      	cmp	r1, #1
    1f4c:	d007      	beq.n	1f5e <_sercom_get_default_pad+0xde>
    1f4e:	2900      	cmp	r1, #0
    1f50:	d015      	beq.n	1f7e <_sercom_get_default_pad+0xfe>
    1f52:	2902      	cmp	r1, #2
    1f54:	d005      	beq.n	1f62 <_sercom_get_default_pad+0xe2>
    1f56:	2903      	cmp	r1, #3
    1f58:	d005      	beq.n	1f66 <_sercom_get_default_pad+0xe6>
	return 0;
    1f5a:	2000      	movs	r0, #0
    1f5c:	e79e      	b.n	1e9c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f5e:	481e      	ldr	r0, [pc, #120]	; (1fd8 <_sercom_get_default_pad+0x158>)
    1f60:	e79c      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f62:	481e      	ldr	r0, [pc, #120]	; (1fdc <_sercom_get_default_pad+0x15c>)
    1f64:	e79a      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f66:	481e      	ldr	r0, [pc, #120]	; (1fe0 <_sercom_get_default_pad+0x160>)
    1f68:	e798      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f6a:	481e      	ldr	r0, [pc, #120]	; (1fe4 <_sercom_get_default_pad+0x164>)
    1f6c:	e796      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f6e:	2003      	movs	r0, #3
    1f70:	e794      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f72:	481d      	ldr	r0, [pc, #116]	; (1fe8 <_sercom_get_default_pad+0x168>)
    1f74:	e792      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f76:	481d      	ldr	r0, [pc, #116]	; (1fec <_sercom_get_default_pad+0x16c>)
    1f78:	e790      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f7a:	481d      	ldr	r0, [pc, #116]	; (1ff0 <_sercom_get_default_pad+0x170>)
    1f7c:	e78e      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f7e:	481d      	ldr	r0, [pc, #116]	; (1ff4 <_sercom_get_default_pad+0x174>)
    1f80:	e78c      	b.n	1e9c <_sercom_get_default_pad+0x1c>
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	42001000 	.word	0x42001000
    1f88:	42001800 	.word	0x42001800
    1f8c:	42001c00 	.word	0x42001c00
    1f90:	42001400 	.word	0x42001400
    1f94:	42000800 	.word	0x42000800
    1f98:	42000c00 	.word	0x42000c00
    1f9c:	00050003 	.word	0x00050003
    1fa0:	00060003 	.word	0x00060003
    1fa4:	00070003 	.word	0x00070003
    1fa8:	00010003 	.word	0x00010003
    1fac:	001e0003 	.word	0x001e0003
    1fb0:	001f0003 	.word	0x001f0003
    1fb4:	00090003 	.word	0x00090003
    1fb8:	000a0003 	.word	0x000a0003
    1fbc:	000b0003 	.word	0x000b0003
    1fc0:	00110003 	.word	0x00110003
    1fc4:	00120003 	.word	0x00120003
    1fc8:	00130003 	.word	0x00130003
    1fcc:	000d0003 	.word	0x000d0003
    1fd0:	000e0003 	.word	0x000e0003
    1fd4:	000f0003 	.word	0x000f0003
    1fd8:	00170003 	.word	0x00170003
    1fdc:	00180003 	.word	0x00180003
    1fe0:	00190003 	.word	0x00190003
    1fe4:	00040003 	.word	0x00040003
    1fe8:	00080003 	.word	0x00080003
    1fec:	00100003 	.word	0x00100003
    1ff0:	000c0003 	.word	0x000c0003
    1ff4:	00160003 	.word	0x00160003

00001ff8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ff8:	b530      	push	{r4, r5, lr}
    1ffa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ffc:	4b0b      	ldr	r3, [pc, #44]	; (202c <STACK_SIZE+0x2c>)
    1ffe:	466a      	mov	r2, sp
    2000:	cb32      	ldmia	r3!, {r1, r4, r5}
    2002:	c232      	stmia	r2!, {r1, r4, r5}
    2004:	cb32      	ldmia	r3!, {r1, r4, r5}
    2006:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2008:	9b00      	ldr	r3, [sp, #0]
    200a:	4283      	cmp	r3, r0
    200c:	d00b      	beq.n	2026 <STACK_SIZE+0x26>
    200e:	2301      	movs	r3, #1
    2010:	009a      	lsls	r2, r3, #2
    2012:	4669      	mov	r1, sp
    2014:	5852      	ldr	r2, [r2, r1]
    2016:	4282      	cmp	r2, r0
    2018:	d006      	beq.n	2028 <STACK_SIZE+0x28>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    201a:	3301      	adds	r3, #1
    201c:	2b06      	cmp	r3, #6
    201e:	d1f7      	bne.n	2010 <STACK_SIZE+0x10>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2020:	2000      	movs	r0, #0
}
    2022:	b007      	add	sp, #28
    2024:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2026:	2300      	movs	r3, #0
			return i;
    2028:	b2d8      	uxtb	r0, r3
    202a:	e7fa      	b.n	2022 <STACK_SIZE+0x22>
    202c:	00007114 	.word	0x00007114

00002030 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2030:	4770      	bx	lr
	...

00002034 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2036:	4b0a      	ldr	r3, [pc, #40]	; (2060 <_sercom_set_handler+0x2c>)
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	2b00      	cmp	r3, #0
    203c:	d10c      	bne.n	2058 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    203e:	4f09      	ldr	r7, [pc, #36]	; (2064 <_sercom_set_handler+0x30>)
    2040:	4e09      	ldr	r6, [pc, #36]	; (2068 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2042:	4d0a      	ldr	r5, [pc, #40]	; (206c <_sercom_set_handler+0x38>)
    2044:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2046:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2048:	195a      	adds	r2, r3, r5
    204a:	6014      	str	r4, [r2, #0]
    204c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    204e:	2b18      	cmp	r3, #24
    2050:	d1f9      	bne.n	2046 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2052:	2201      	movs	r2, #1
    2054:	4b02      	ldr	r3, [pc, #8]	; (2060 <_sercom_set_handler+0x2c>)
    2056:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2058:	0080      	lsls	r0, r0, #2
    205a:	4b02      	ldr	r3, [pc, #8]	; (2064 <_sercom_set_handler+0x30>)
    205c:	50c1      	str	r1, [r0, r3]
}
    205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2060:	2000028e 	.word	0x2000028e
    2064:	20000290 	.word	0x20000290
    2068:	00002031 	.word	0x00002031
    206c:	20000b38 	.word	0x20000b38

00002070 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2070:	b500      	push	{lr}
    2072:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2074:	2309      	movs	r3, #9
    2076:	466a      	mov	r2, sp
    2078:	7013      	strb	r3, [r2, #0]
    207a:	3301      	adds	r3, #1
    207c:	7053      	strb	r3, [r2, #1]
    207e:	3301      	adds	r3, #1
    2080:	7093      	strb	r3, [r2, #2]
    2082:	3301      	adds	r3, #1
    2084:	70d3      	strb	r3, [r2, #3]
    2086:	3301      	adds	r3, #1
    2088:	7113      	strb	r3, [r2, #4]
    208a:	3301      	adds	r3, #1
    208c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    208e:	4b03      	ldr	r3, [pc, #12]	; (209c <_sercom_get_interrupt_vector+0x2c>)
    2090:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2092:	466b      	mov	r3, sp
    2094:	5618      	ldrsb	r0, [r3, r0]
}
    2096:	b003      	add	sp, #12
    2098:	bd00      	pop	{pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	00001ff9 	.word	0x00001ff9

000020a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    20a0:	b510      	push	{r4, lr}
    20a2:	4b02      	ldr	r3, [pc, #8]	; (20ac <SERCOM0_Handler+0xc>)
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	2000      	movs	r0, #0
    20a8:	4798      	blx	r3
    20aa:	bd10      	pop	{r4, pc}
    20ac:	20000290 	.word	0x20000290

000020b0 <SERCOM1_Handler>:
    20b0:	b510      	push	{r4, lr}
    20b2:	4b02      	ldr	r3, [pc, #8]	; (20bc <SERCOM1_Handler+0xc>)
    20b4:	685b      	ldr	r3, [r3, #4]
    20b6:	2001      	movs	r0, #1
    20b8:	4798      	blx	r3
    20ba:	bd10      	pop	{r4, pc}
    20bc:	20000290 	.word	0x20000290

000020c0 <SERCOM2_Handler>:
    20c0:	b510      	push	{r4, lr}
    20c2:	4b02      	ldr	r3, [pc, #8]	; (20cc <SERCOM2_Handler+0xc>)
    20c4:	689b      	ldr	r3, [r3, #8]
    20c6:	2002      	movs	r0, #2
    20c8:	4798      	blx	r3
    20ca:	bd10      	pop	{r4, pc}
    20cc:	20000290 	.word	0x20000290

000020d0 <SERCOM3_Handler>:
    20d0:	b510      	push	{r4, lr}
    20d2:	4b02      	ldr	r3, [pc, #8]	; (20dc <SERCOM3_Handler+0xc>)
    20d4:	68db      	ldr	r3, [r3, #12]
    20d6:	2003      	movs	r0, #3
    20d8:	4798      	blx	r3
    20da:	bd10      	pop	{r4, pc}
    20dc:	20000290 	.word	0x20000290

000020e0 <SERCOM4_Handler>:
    20e0:	b510      	push	{r4, lr}
    20e2:	4b02      	ldr	r3, [pc, #8]	; (20ec <SERCOM4_Handler+0xc>)
    20e4:	691b      	ldr	r3, [r3, #16]
    20e6:	2004      	movs	r0, #4
    20e8:	4798      	blx	r3
    20ea:	bd10      	pop	{r4, pc}
    20ec:	20000290 	.word	0x20000290

000020f0 <SERCOM5_Handler>:
    20f0:	b510      	push	{r4, lr}
    20f2:	4b02      	ldr	r3, [pc, #8]	; (20fc <SERCOM5_Handler+0xc>)
    20f4:	695b      	ldr	r3, [r3, #20]
    20f6:	2005      	movs	r0, #5
    20f8:	4798      	blx	r3
    20fa:	bd10      	pop	{r4, pc}
    20fc:	20000290 	.word	0x20000290

00002100 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    2100:	b570      	push	{r4, r5, r6, lr}
    2102:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2104:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2106:	0020      	movs	r0, r4
    2108:	4b0e      	ldr	r3, [pc, #56]	; (2144 <spi_reset+0x44>)
    210a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    210c:	231f      	movs	r3, #31
    210e:	4018      	ands	r0, r3
    2110:	3b1e      	subs	r3, #30
    2112:	4083      	lsls	r3, r0
    2114:	2280      	movs	r2, #128	; 0x80
    2116:	490c      	ldr	r1, [pc, #48]	; (2148 <spi_reset+0x48>)
    2118:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    211a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    211c:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    211e:	2b00      	cmp	r3, #0
    2120:	d1fc      	bne.n	211c <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2122:	338f      	adds	r3, #143	; 0x8f
    2124:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2126:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2128:	6823      	ldr	r3, [r4, #0]
    212a:	2202      	movs	r2, #2
    212c:	4393      	bics	r3, r2
    212e:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2130:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2132:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2134:	2b00      	cmp	r3, #0
    2136:	d1fc      	bne.n	2132 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2138:	6823      	ldr	r3, [r4, #0]
    213a:	2201      	movs	r2, #1
    213c:	4313      	orrs	r3, r2
    213e:	6023      	str	r3, [r4, #0]
}
    2140:	bd70      	pop	{r4, r5, r6, pc}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	00002071 	.word	0x00002071
    2148:	e000e100 	.word	0xe000e100

0000214c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    214c:	b570      	push	{r4, r5, r6, lr}
    214e:	b082      	sub	sp, #8
    2150:	0005      	movs	r5, r0
    2152:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2154:	2200      	movs	r2, #0
    2156:	466b      	mov	r3, sp
    2158:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    215a:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    215c:	0030      	movs	r0, r6
    215e:	4b24      	ldr	r3, [pc, #144]	; (21f0 <spi_set_baudrate+0xa4>)
    2160:	4798      	blx	r3
    2162:	231f      	movs	r3, #31
    2164:	4018      	ands	r0, r3
    2166:	3b1e      	subs	r3, #30
    2168:	4083      	lsls	r3, r0
    216a:	2280      	movs	r2, #128	; 0x80
    216c:	4921      	ldr	r1, [pc, #132]	; (21f4 <spi_set_baudrate+0xa8>)
    216e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2170:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2172:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2174:	2b00      	cmp	r3, #0
    2176:	d1fc      	bne.n	2172 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2178:	338f      	adds	r3, #143	; 0x8f
    217a:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    217c:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    217e:	6833      	ldr	r3, [r6, #0]
    2180:	2202      	movs	r2, #2
    2182:	4393      	bics	r3, r2
    2184:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2186:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2188:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    218a:	2b00      	cmp	r3, #0
    218c:	d1fc      	bne.n	2188 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    218e:	4b1a      	ldr	r3, [pc, #104]	; (21f8 <spi_set_baudrate+0xac>)
    2190:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2192:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2194:	b2c0      	uxtb	r0, r0
    2196:	4b19      	ldr	r3, [pc, #100]	; (21fc <spi_set_baudrate+0xb0>)
    2198:	4798      	blx	r3
    219a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    219c:	466b      	mov	r3, sp
    219e:	1d9a      	adds	r2, r3, #6
    21a0:	0020      	movs	r0, r4
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <spi_set_baudrate+0xb4>)
    21a4:	4798      	blx	r3
    21a6:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    21a8:	d003      	beq.n	21b2 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    21aa:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    21ac:	0020      	movs	r0, r4
    21ae:	b002      	add	sp, #8
    21b0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    21b2:	466b      	mov	r3, sp
    21b4:	3306      	adds	r3, #6
    21b6:	781b      	ldrb	r3, [r3, #0]
    21b8:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21ba:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21bc:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    21be:	2b00      	cmp	r3, #0
    21c0:	d1fc      	bne.n	21bc <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    21c2:	0030      	movs	r0, r6
    21c4:	4b0a      	ldr	r3, [pc, #40]	; (21f0 <spi_set_baudrate+0xa4>)
    21c6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21c8:	231f      	movs	r3, #31
    21ca:	4018      	ands	r0, r3
    21cc:	3b1e      	subs	r3, #30
    21ce:	4083      	lsls	r3, r0
    21d0:	4a08      	ldr	r2, [pc, #32]	; (21f4 <spi_set_baudrate+0xa8>)
    21d2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21d4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21d6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    21d8:	2b00      	cmp	r3, #0
    21da:	d1fc      	bne.n	21d6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    21dc:	6833      	ldr	r3, [r6, #0]
    21de:	2202      	movs	r2, #2
    21e0:	4313      	orrs	r3, r2
    21e2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21e4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21e6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    21e8:	2b00      	cmp	r3, #0
    21ea:	d1fc      	bne.n	21e6 <spi_set_baudrate+0x9a>
    21ec:	e7de      	b.n	21ac <spi_set_baudrate+0x60>
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	00002071 	.word	0x00002071
    21f4:	e000e100 	.word	0xe000e100
    21f8:	00001ff9 	.word	0x00001ff9
    21fc:	0000350d 	.word	0x0000350d
    2200:	00001d77 	.word	0x00001d77

00002204 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	b08b      	sub	sp, #44	; 0x2c
    2208:	0005      	movs	r5, r0
    220a:	000c      	movs	r4, r1
    220c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    220e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2210:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    2212:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2214:	079b      	lsls	r3, r3, #30
    2216:	d501      	bpl.n	221c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2218:	b00b      	add	sp, #44	; 0x2c
    221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    221c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    221e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2220:	07db      	lsls	r3, r3, #31
    2222:	d4f9      	bmi.n	2218 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2224:	0008      	movs	r0, r1
    2226:	4b60      	ldr	r3, [pc, #384]	; (23a8 <spi_init+0x1a4>)
    2228:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    222a:	4a60      	ldr	r2, [pc, #384]	; (23ac <spi_init+0x1a8>)
    222c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    222e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2230:	2301      	movs	r3, #1
    2232:	40bb      	lsls	r3, r7
    2234:	430b      	orrs	r3, r1
    2236:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2238:	a909      	add	r1, sp, #36	; 0x24
    223a:	2724      	movs	r7, #36	; 0x24
    223c:	5df3      	ldrb	r3, [r6, r7]
    223e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2240:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2242:	b2c3      	uxtb	r3, r0
    2244:	9301      	str	r3, [sp, #4]
    2246:	0018      	movs	r0, r3
    2248:	4b59      	ldr	r3, [pc, #356]	; (23b0 <spi_init+0x1ac>)
    224a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    224c:	9801      	ldr	r0, [sp, #4]
    224e:	4b59      	ldr	r3, [pc, #356]	; (23b4 <spi_init+0x1b0>)
    2250:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2252:	5df0      	ldrb	r0, [r6, r7]
    2254:	2100      	movs	r1, #0
    2256:	4b58      	ldr	r3, [pc, #352]	; (23b8 <spi_init+0x1b4>)
    2258:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    225a:	7833      	ldrb	r3, [r6, #0]
    225c:	2b01      	cmp	r3, #1
    225e:	d038      	beq.n	22d2 <spi_init+0xce>
    2260:	002b      	movs	r3, r5
    2262:	330c      	adds	r3, #12
    2264:	0029      	movs	r1, r5
    2266:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    2268:	2200      	movs	r2, #0
    226a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    226c:	428b      	cmp	r3, r1
    226e:	d1fc      	bne.n	226a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    2270:	2300      	movs	r3, #0
    2272:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2274:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2276:	2400      	movs	r4, #0
    2278:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    227a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    227c:	3336      	adds	r3, #54	; 0x36
    227e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    2280:	3301      	adds	r3, #1
    2282:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2284:	3301      	adds	r3, #1
    2286:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    2288:	3b35      	subs	r3, #53	; 0x35
    228a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    228c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    228e:	6828      	ldr	r0, [r5, #0]
    2290:	4b45      	ldr	r3, [pc, #276]	; (23a8 <spi_init+0x1a4>)
    2292:	4798      	blx	r3
    2294:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2296:	4949      	ldr	r1, [pc, #292]	; (23bc <spi_init+0x1b8>)
    2298:	4b49      	ldr	r3, [pc, #292]	; (23c0 <spi_init+0x1bc>)
    229a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    229c:	00bf      	lsls	r7, r7, #2
    229e:	4b49      	ldr	r3, [pc, #292]	; (23c4 <spi_init+0x1c0>)
    22a0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    22a2:	682f      	ldr	r7, [r5, #0]
    22a4:	ab04      	add	r3, sp, #16
    22a6:	2280      	movs	r2, #128	; 0x80
    22a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22aa:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22ac:	3a7f      	subs	r2, #127	; 0x7f
    22ae:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    22b0:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    22b2:	7833      	ldrb	r3, [r6, #0]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d102      	bne.n	22be <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    22b8:	2200      	movs	r2, #0
    22ba:	ab04      	add	r3, sp, #16
    22bc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    22be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    22c0:	9305      	str	r3, [sp, #20]
    22c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    22c4:	9306      	str	r3, [sp, #24]
    22c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    22c8:	9307      	str	r3, [sp, #28]
    22ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
    22cc:	9308      	str	r3, [sp, #32]
    22ce:	2400      	movs	r4, #0
    22d0:	e00b      	b.n	22ea <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    22d2:	6823      	ldr	r3, [r4, #0]
    22d4:	220c      	movs	r2, #12
    22d6:	4313      	orrs	r3, r2
    22d8:	6023      	str	r3, [r4, #0]
    22da:	e7c1      	b.n	2260 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    22dc:	0038      	movs	r0, r7
    22de:	4b3a      	ldr	r3, [pc, #232]	; (23c8 <spi_init+0x1c4>)
    22e0:	4798      	blx	r3
    22e2:	e00a      	b.n	22fa <spi_init+0xf6>
    22e4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    22e6:	2c04      	cmp	r4, #4
    22e8:	d010      	beq.n	230c <spi_init+0x108>
    22ea:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    22ec:	00a3      	lsls	r3, r4, #2
    22ee:	aa02      	add	r2, sp, #8
    22f0:	200c      	movs	r0, #12
    22f2:	1812      	adds	r2, r2, r0
    22f4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    22f6:	2800      	cmp	r0, #0
    22f8:	d0f0      	beq.n	22dc <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    22fa:	1c43      	adds	r3, r0, #1
    22fc:	d0f2      	beq.n	22e4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    22fe:	a904      	add	r1, sp, #16
    2300:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2302:	0c00      	lsrs	r0, r0, #16
    2304:	b2c0      	uxtb	r0, r0
    2306:	4b31      	ldr	r3, [pc, #196]	; (23cc <spi_init+0x1c8>)
    2308:	4798      	blx	r3
    230a:	e7eb      	b.n	22e4 <spi_init+0xe0>
	module->mode             = config->mode;
    230c:	7833      	ldrb	r3, [r6, #0]
    230e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    2310:	7c33      	ldrb	r3, [r6, #16]
    2312:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2314:	7cb3      	ldrb	r3, [r6, #18]
    2316:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2318:	7d33      	ldrb	r3, [r6, #20]
    231a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    231c:	2200      	movs	r2, #0
    231e:	ab02      	add	r3, sp, #8
    2320:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2322:	7833      	ldrb	r3, [r6, #0]
    2324:	2b01      	cmp	r3, #1
    2326:	d028      	beq.n	237a <spi_init+0x176>
	ctrla |= config->transfer_mode;
    2328:	6873      	ldr	r3, [r6, #4]
    232a:	68b2      	ldr	r2, [r6, #8]
    232c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    232e:	68f2      	ldr	r2, [r6, #12]
    2330:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    2332:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2334:	7c72      	ldrb	r2, [r6, #17]
    2336:	2a00      	cmp	r2, #0
    2338:	d103      	bne.n	2342 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    233a:	4a25      	ldr	r2, [pc, #148]	; (23d0 <spi_init+0x1cc>)
    233c:	7892      	ldrb	r2, [r2, #2]
    233e:	0792      	lsls	r2, r2, #30
    2340:	d501      	bpl.n	2346 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2342:	2280      	movs	r2, #128	; 0x80
    2344:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    2346:	7cb2      	ldrb	r2, [r6, #18]
    2348:	2a00      	cmp	r2, #0
    234a:	d002      	beq.n	2352 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    234c:	2280      	movs	r2, #128	; 0x80
    234e:	0292      	lsls	r2, r2, #10
    2350:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    2352:	7cf2      	ldrb	r2, [r6, #19]
    2354:	2a00      	cmp	r2, #0
    2356:	d002      	beq.n	235e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2358:	2280      	movs	r2, #128	; 0x80
    235a:	0092      	lsls	r2, r2, #2
    235c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    235e:	7d32      	ldrb	r2, [r6, #20]
    2360:	2a00      	cmp	r2, #0
    2362:	d002      	beq.n	236a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2364:	2280      	movs	r2, #128	; 0x80
    2366:	0192      	lsls	r2, r2, #6
    2368:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    236a:	683a      	ldr	r2, [r7, #0]
    236c:	4313      	orrs	r3, r2
    236e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	430b      	orrs	r3, r1
    2374:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    2376:	2000      	movs	r0, #0
    2378:	e74e      	b.n	2218 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    237a:	6828      	ldr	r0, [r5, #0]
    237c:	4b0a      	ldr	r3, [pc, #40]	; (23a8 <spi_init+0x1a4>)
    237e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2380:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2382:	b2c0      	uxtb	r0, r0
    2384:	4b13      	ldr	r3, [pc, #76]	; (23d4 <spi_init+0x1d0>)
    2386:	4798      	blx	r3
    2388:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    238a:	ab02      	add	r3, sp, #8
    238c:	1d9a      	adds	r2, r3, #6
    238e:	69b0      	ldr	r0, [r6, #24]
    2390:	4b11      	ldr	r3, [pc, #68]	; (23d8 <spi_init+0x1d4>)
    2392:	4798      	blx	r3
    2394:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2396:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2398:	2b00      	cmp	r3, #0
    239a:	d000      	beq.n	239e <spi_init+0x19a>
    239c:	e73c      	b.n	2218 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    239e:	ab02      	add	r3, sp, #8
    23a0:	3306      	adds	r3, #6
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	733b      	strb	r3, [r7, #12]
    23a6:	e7bf      	b.n	2328 <spi_init+0x124>
    23a8:	00001ff9 	.word	0x00001ff9
    23ac:	40000400 	.word	0x40000400
    23b0:	000034f1 	.word	0x000034f1
    23b4:	00003465 	.word	0x00003465
    23b8:	00001e35 	.word	0x00001e35
    23bc:	00002671 	.word	0x00002671
    23c0:	00002035 	.word	0x00002035
    23c4:	20000b38 	.word	0x20000b38
    23c8:	00001e81 	.word	0x00001e81
    23cc:	000035e9 	.word	0x000035e9
    23d0:	41002000 	.word	0x41002000
    23d4:	0000350d 	.word	0x0000350d
    23d8:	00001d77 	.word	0x00001d77

000023dc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	46d6      	mov	lr, sl
    23e0:	4647      	mov	r7, r8
    23e2:	b580      	push	{r7, lr}
    23e4:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    23e6:	2438      	movs	r4, #56	; 0x38
    23e8:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    23ea:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    23ec:	2d05      	cmp	r5, #5
    23ee:	d002      	beq.n	23f6 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    23f0:	3412      	adds	r4, #18
	if (length == 0) {
    23f2:	2a00      	cmp	r2, #0
    23f4:	d105      	bne.n	2402 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    23f6:	0020      	movs	r0, r4
    23f8:	b003      	add	sp, #12
    23fa:	bc0c      	pop	{r2, r3}
    23fc:	4690      	mov	r8, r2
    23fe:	469a      	mov	sl, r3
    2400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    2402:	79c4      	ldrb	r4, [r0, #7]
    2404:	2c00      	cmp	r4, #0
    2406:	d144      	bne.n	2492 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2408:	341c      	adds	r4, #28
    240a:	e7f4      	b.n	23f6 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    240c:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    240e:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    2410:	423c      	tst	r4, r7
    2412:	d0fc      	beq.n	240e <spi_read_buffer_wait+0x32>
    2414:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2416:	423c      	tst	r4, r7
    2418:	d01a      	beq.n	2450 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    241a:	4644      	mov	r4, r8
    241c:	62ac      	str	r4, [r5, #40]	; 0x28
    241e:	e017      	b.n	2450 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2420:	7984      	ldrb	r4, [r0, #6]
    2422:	2c01      	cmp	r4, #1
    2424:	d026      	beq.n	2474 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2426:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2428:	b2ec      	uxtb	r4, r5
    242a:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    242c:	9c01      	ldr	r4, [sp, #4]
    242e:	2c00      	cmp	r4, #0
    2430:	d13a      	bne.n	24a8 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    2432:	1c75      	adds	r5, r6, #1
    2434:	b2ad      	uxth	r5, r5
    2436:	4664      	mov	r4, ip
    2438:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    243a:	7984      	ldrb	r4, [r0, #6]
    243c:	2c01      	cmp	r4, #1
    243e:	d01e      	beq.n	247e <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    2440:	002e      	movs	r6, r5
	while (length--) {
    2442:	3a01      	subs	r2, #1
    2444:	b292      	uxth	r2, r2
    2446:	4552      	cmp	r2, sl
    2448:	d01f      	beq.n	248a <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    244a:	7944      	ldrb	r4, [r0, #5]
    244c:	2c01      	cmp	r4, #1
    244e:	d0dd      	beq.n	240c <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2450:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2452:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    2454:	421c      	tst	r4, r3
    2456:	d0fc      	beq.n	2452 <spi_read_buffer_wait+0x76>
    2458:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    245a:	421c      	tst	r4, r3
    245c:	d017      	beq.n	248e <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    245e:	8b6c      	ldrh	r4, [r5, #26]
    2460:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    2462:	2400      	movs	r4, #0
    2464:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2466:	4664      	mov	r4, ip
    2468:	421c      	tst	r4, r3
    246a:	d0d9      	beq.n	2420 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    246c:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    246e:	241e      	movs	r4, #30
    2470:	9401      	str	r4, [sp, #4]
    2472:	e7d5      	b.n	2420 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2474:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2476:	05e4      	lsls	r4, r4, #23
    2478:	0de4      	lsrs	r4, r4, #23
    247a:	46a4      	mov	ip, r4
    247c:	e7d6      	b.n	242c <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    247e:	3602      	adds	r6, #2
    2480:	b2b6      	uxth	r6, r6
    2482:	4664      	mov	r4, ip
    2484:	0a24      	lsrs	r4, r4, #8
    2486:	554c      	strb	r4, [r1, r5]
    2488:	e7db      	b.n	2442 <spi_read_buffer_wait+0x66>
    248a:	9c01      	ldr	r4, [sp, #4]
    248c:	e7b3      	b.n	23f6 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    248e:	2410      	movs	r4, #16
    2490:	e7b1      	b.n	23f6 <spi_read_buffer_wait+0x1a>
	while (length--) {
    2492:	3a01      	subs	r2, #1
    2494:	b292      	uxth	r2, r2
    2496:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2498:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    249a:	05db      	lsls	r3, r3, #23
    249c:	0ddb      	lsrs	r3, r3, #23
    249e:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    24a0:	2304      	movs	r3, #4
	while (length--) {
    24a2:	4c02      	ldr	r4, [pc, #8]	; (24ac <spi_read_buffer_wait+0xd0>)
    24a4:	46a2      	mov	sl, r4
    24a6:	e7d0      	b.n	244a <spi_read_buffer_wait+0x6e>
    24a8:	9c01      	ldr	r4, [sp, #4]
    24aa:	e7a4      	b.n	23f6 <spi_read_buffer_wait+0x1a>
    24ac:	0000ffff 	.word	0x0000ffff

000024b0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    24b0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    24b2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    24b4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    24b6:	2c01      	cmp	r4, #1
    24b8:	d001      	beq.n	24be <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    24ba:	0018      	movs	r0, r3
    24bc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    24be:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    24c0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    24c2:	2c00      	cmp	r4, #0
    24c4:	d1f9      	bne.n	24ba <spi_select_slave+0xa>
		if (select) {
    24c6:	2a00      	cmp	r2, #0
    24c8:	d058      	beq.n	257c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    24ca:	784b      	ldrb	r3, [r1, #1]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d044      	beq.n	255a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24d0:	6803      	ldr	r3, [r0, #0]
    24d2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    24d4:	07db      	lsls	r3, r3, #31
    24d6:	d410      	bmi.n	24fa <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    24d8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24de:	2900      	cmp	r1, #0
    24e0:	d104      	bne.n	24ec <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    24e2:	0953      	lsrs	r3, r2, #5
    24e4:	01db      	lsls	r3, r3, #7
    24e6:	492e      	ldr	r1, [pc, #184]	; (25a0 <spi_select_slave+0xf0>)
    24e8:	468c      	mov	ip, r1
    24ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24ec:	211f      	movs	r1, #31
    24ee:	4011      	ands	r1, r2
    24f0:	2201      	movs	r2, #1
    24f2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    24f4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    24f6:	2305      	movs	r3, #5
    24f8:	e7df      	b.n	24ba <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24fa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24fc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    24fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2500:	2c00      	cmp	r4, #0
    2502:	d104      	bne.n	250e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2504:	0953      	lsrs	r3, r2, #5
    2506:	01db      	lsls	r3, r3, #7
    2508:	4c25      	ldr	r4, [pc, #148]	; (25a0 <spi_select_slave+0xf0>)
    250a:	46a4      	mov	ip, r4
    250c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    250e:	241f      	movs	r4, #31
    2510:	4014      	ands	r4, r2
    2512:	2201      	movs	r2, #1
    2514:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2516:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2518:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    251a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    251c:	07d2      	lsls	r2, r2, #31
    251e:	d501      	bpl.n	2524 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2520:	788a      	ldrb	r2, [r1, #2]
    2522:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2524:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2526:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2528:	2a00      	cmp	r2, #0
    252a:	d1c6      	bne.n	24ba <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    252c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    252e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2530:	7e13      	ldrb	r3, [r2, #24]
    2532:	420b      	tst	r3, r1
    2534:	d0fc      	beq.n	2530 <spi_select_slave+0x80>
    2536:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2538:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    253a:	0749      	lsls	r1, r1, #29
    253c:	d5bd      	bpl.n	24ba <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    253e:	8b53      	ldrh	r3, [r2, #26]
    2540:	075b      	lsls	r3, r3, #29
    2542:	d501      	bpl.n	2548 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2544:	2304      	movs	r3, #4
    2546:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2548:	7983      	ldrb	r3, [r0, #6]
    254a:	2b01      	cmp	r3, #1
    254c:	d002      	beq.n	2554 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    254e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2550:	2300      	movs	r3, #0
    2552:	e7b2      	b.n	24ba <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2554:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2556:	2300      	movs	r3, #0
    2558:	e7af      	b.n	24ba <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    255a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    255c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    255e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2560:	2900      	cmp	r1, #0
    2562:	d104      	bne.n	256e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2564:	0953      	lsrs	r3, r2, #5
    2566:	01db      	lsls	r3, r3, #7
    2568:	490d      	ldr	r1, [pc, #52]	; (25a0 <spi_select_slave+0xf0>)
    256a:	468c      	mov	ip, r1
    256c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    256e:	211f      	movs	r1, #31
    2570:	4011      	ands	r1, r2
    2572:	2201      	movs	r2, #1
    2574:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2576:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2578:	2300      	movs	r3, #0
    257a:	e79e      	b.n	24ba <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    257c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    257e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2580:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2582:	2900      	cmp	r1, #0
    2584:	d104      	bne.n	2590 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2586:	0953      	lsrs	r3, r2, #5
    2588:	01db      	lsls	r3, r3, #7
    258a:	4905      	ldr	r1, [pc, #20]	; (25a0 <spi_select_slave+0xf0>)
    258c:	468c      	mov	ip, r1
    258e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2590:	211f      	movs	r1, #31
    2592:	4011      	ands	r1, r2
    2594:	2201      	movs	r2, #1
    2596:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2598:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    259a:	2300      	movs	r3, #0
    259c:	e78d      	b.n	24ba <spi_select_slave+0xa>
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	41004400 	.word	0x41004400

000025a4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	46de      	mov	lr, fp
    25a8:	4657      	mov	r7, sl
    25aa:	464e      	mov	r6, r9
    25ac:	4645      	mov	r5, r8
    25ae:	b5e0      	push	{r5, r6, r7, lr}
    25b0:	b083      	sub	sp, #12
    25b2:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    25b4:	2338      	movs	r3, #56	; 0x38
    25b6:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    25b8:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    25ba:	2c05      	cmp	r4, #5
    25bc:	d002      	beq.n	25c4 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    25be:	3312      	adds	r3, #18
	if (length == 0) {
    25c0:	2a00      	cmp	r2, #0
    25c2:	d14b      	bne.n	265c <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    25c4:	0018      	movs	r0, r3
    25c6:	b003      	add	sp, #12
    25c8:	bc3c      	pop	{r2, r3, r4, r5}
    25ca:	4690      	mov	r8, r2
    25cc:	4699      	mov	r9, r3
    25ce:	46a2      	mov	sl, r4
    25d0:	46ab      	mov	fp, r5
    25d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    25d4:	3702      	adds	r7, #2
    25d6:	b2bf      	uxth	r7, r7
    25d8:	4641      	mov	r1, r8
    25da:	4653      	mov	r3, sl
    25dc:	5c59      	ldrb	r1, [r3, r1]
    25de:	0209      	lsls	r1, r1, #8
    25e0:	465b      	mov	r3, fp
    25e2:	430b      	orrs	r3, r1
    25e4:	e018      	b.n	2618 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25e6:	7983      	ldrb	r3, [r0, #6]
    25e8:	2b01      	cmp	r3, #1
    25ea:	d02a      	beq.n	2642 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    25ee:	3e01      	subs	r6, #1
    25f0:	b2b6      	uxth	r6, r6
    25f2:	4566      	cmp	r6, ip
    25f4:	d027      	beq.n	2646 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25f6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25f8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    25fa:	4223      	tst	r3, r4
    25fc:	d0fc      	beq.n	25f8 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    25fe:	1c7b      	adds	r3, r7, #1
    2600:	b29b      	uxth	r3, r3
    2602:	4698      	mov	r8, r3
    2604:	4653      	mov	r3, sl
    2606:	5ddb      	ldrb	r3, [r3, r7]
    2608:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    260a:	7981      	ldrb	r1, [r0, #6]
    260c:	2901      	cmp	r1, #1
    260e:	d0e1      	beq.n	25d4 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    2610:	4669      	mov	r1, sp
    2612:	80cb      	strh	r3, [r1, #6]
    2614:	88cb      	ldrh	r3, [r1, #6]
    2616:	4647      	mov	r7, r8
    2618:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    261a:	4221      	tst	r1, r4
    261c:	d002      	beq.n	2624 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    261e:	05db      	lsls	r3, r3, #23
    2620:	0ddb      	lsrs	r3, r3, #23
    2622:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2624:	79c3      	ldrb	r3, [r0, #7]
    2626:	2b00      	cmp	r3, #0
    2628:	d0e1      	beq.n	25ee <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    262a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    262c:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    262e:	422b      	tst	r3, r5
    2630:	d0fc      	beq.n	262c <spi_write_buffer_wait+0x88>
    2632:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    2634:	422b      	tst	r3, r5
    2636:	d0da      	beq.n	25ee <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2638:	8b53      	ldrh	r3, [r2, #26]
    263a:	422b      	tst	r3, r5
    263c:	d0d3      	beq.n	25e6 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    263e:	8355      	strh	r5, [r2, #26]
    2640:	e7d1      	b.n	25e6 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2642:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2644:	e7d3      	b.n	25ee <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    2646:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    2648:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    264a:	2a01      	cmp	r2, #1
    264c:	d1ba      	bne.n	25c4 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    264e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2650:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2652:	7e0b      	ldrb	r3, [r1, #24]
    2654:	4213      	tst	r3, r2
    2656:	d0fc      	beq.n	2652 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    2658:	2300      	movs	r3, #0
    265a:	e7b3      	b.n	25c4 <spi_write_buffer_wait+0x20>
	while (length--) {
    265c:	3a01      	subs	r2, #1
    265e:	b296      	uxth	r6, r2
    2660:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    2662:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    2664:	2504      	movs	r5, #4
	while (length--) {
    2666:	4b01      	ldr	r3, [pc, #4]	; (266c <spi_write_buffer_wait+0xc8>)
    2668:	469c      	mov	ip, r3
    266a:	e7c4      	b.n	25f6 <spi_write_buffer_wait+0x52>
    266c:	0000ffff 	.word	0x0000ffff

00002670 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2672:	0080      	lsls	r0, r0, #2
    2674:	4b70      	ldr	r3, [pc, #448]	; (2838 <_spi_interrupt_handler+0x1c8>)
    2676:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2678:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    267a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    267c:	5ce7      	ldrb	r7, [r4, r3]
    267e:	2236      	movs	r2, #54	; 0x36
    2680:	5ca2      	ldrb	r2, [r4, r2]
    2682:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2684:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    2686:	7db5      	ldrb	r5, [r6, #22]
    2688:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    268a:	07eb      	lsls	r3, r5, #31
    268c:	d502      	bpl.n	2694 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    268e:	7963      	ldrb	r3, [r4, #5]
    2690:	2b01      	cmp	r3, #1
    2692:	d01e      	beq.n	26d2 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2694:	076b      	lsls	r3, r5, #29
    2696:	d511      	bpl.n	26bc <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2698:	8b73      	ldrh	r3, [r6, #26]
    269a:	075b      	lsls	r3, r3, #29
    269c:	d55a      	bpl.n	2754 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    269e:	7a63      	ldrb	r3, [r4, #9]
    26a0:	2b01      	cmp	r3, #1
    26a2:	d008      	beq.n	26b6 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    26a4:	221e      	movs	r2, #30
    26a6:	2338      	movs	r3, #56	; 0x38
    26a8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    26aa:	3b35      	subs	r3, #53	; 0x35
    26ac:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    26ae:	3302      	adds	r3, #2
    26b0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    26b2:	073b      	lsls	r3, r7, #28
    26b4:	d44a      	bmi.n	274c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    26b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    26b8:	2304      	movs	r3, #4
    26ba:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    26bc:	07ab      	lsls	r3, r5, #30
    26be:	d503      	bpl.n	26c8 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    26c0:	7963      	ldrb	r3, [r4, #5]
    26c2:	2b01      	cmp	r3, #1
    26c4:	d100      	bne.n	26c8 <_spi_interrupt_handler+0x58>
    26c6:	e097      	b.n	27f8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    26c8:	b26d      	sxtb	r5, r5
    26ca:	2d00      	cmp	r5, #0
    26cc:	da00      	bge.n	26d0 <_spi_interrupt_handler+0x60>
    26ce:	e0a9      	b.n	2824 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    26d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    26d2:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    26d4:	2b00      	cmp	r3, #0
    26d6:	d022      	beq.n	271e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    26d8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    26da:	2b00      	cmp	r3, #0
    26dc:	d0da      	beq.n	2694 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26de:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    26e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    26e2:	7813      	ldrb	r3, [r2, #0]
    26e4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    26e6:	1c50      	adds	r0, r2, #1
    26e8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26ea:	79a0      	ldrb	r0, [r4, #6]
    26ec:	2801      	cmp	r0, #1
    26ee:	d027      	beq.n	2740 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    26f0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    26f2:	05db      	lsls	r3, r3, #23
    26f4:	0ddb      	lsrs	r3, r3, #23
    26f6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    26f8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    26fa:	3b01      	subs	r3, #1
    26fc:	b29b      	uxth	r3, r3
    26fe:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    2700:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2702:	b29b      	uxth	r3, r3
    2704:	2b00      	cmp	r3, #0
    2706:	d1c5      	bne.n	2694 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2708:	3301      	adds	r3, #1
    270a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    270c:	7a63      	ldrb	r3, [r4, #9]
    270e:	2b01      	cmp	r3, #1
    2710:	d1c0      	bne.n	2694 <_spi_interrupt_handler+0x24>
    2712:	79e3      	ldrb	r3, [r4, #7]
    2714:	2b00      	cmp	r3, #0
    2716:	d1bd      	bne.n	2694 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2718:	3302      	adds	r3, #2
    271a:	75b3      	strb	r3, [r6, #22]
    271c:	e7ba      	b.n	2694 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    271e:	4b47      	ldr	r3, [pc, #284]	; (283c <_spi_interrupt_handler+0x1cc>)
    2720:	881b      	ldrh	r3, [r3, #0]
    2722:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2724:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2726:	3b01      	subs	r3, #1
    2728:	b29b      	uxth	r3, r3
    272a:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    272c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    272e:	b29b      	uxth	r3, r3
    2730:	2b00      	cmp	r3, #0
    2732:	d101      	bne.n	2738 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2734:	3301      	adds	r3, #1
    2736:	7533      	strb	r3, [r6, #20]
		if (0
    2738:	7963      	ldrb	r3, [r4, #5]
    273a:	2b01      	cmp	r3, #1
    273c:	d0cc      	beq.n	26d8 <_spi_interrupt_handler+0x68>
    273e:	e7a9      	b.n	2694 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2740:	7850      	ldrb	r0, [r2, #1]
    2742:	0200      	lsls	r0, r0, #8
    2744:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    2746:	3202      	adds	r2, #2
    2748:	62e2      	str	r2, [r4, #44]	; 0x2c
    274a:	e7d2      	b.n	26f2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    274c:	0020      	movs	r0, r4
    274e:	69a3      	ldr	r3, [r4, #24]
    2750:	4798      	blx	r3
    2752:	e7b0      	b.n	26b6 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    2754:	7a63      	ldrb	r3, [r4, #9]
    2756:	2b01      	cmp	r3, #1
    2758:	d028      	beq.n	27ac <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    275a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    275e:	05db      	lsls	r3, r3, #23
    2760:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2762:	b2da      	uxtb	r2, r3
    2764:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2766:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    2768:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    276a:	1c51      	adds	r1, r2, #1
    276c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    276e:	79a1      	ldrb	r1, [r4, #6]
    2770:	2901      	cmp	r1, #1
    2772:	d034      	beq.n	27de <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    2774:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2776:	3b01      	subs	r3, #1
    2778:	b29b      	uxth	r3, r3
    277a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    277c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    277e:	b29b      	uxth	r3, r3
    2780:	2b00      	cmp	r3, #0
    2782:	d000      	beq.n	2786 <_spi_interrupt_handler+0x116>
    2784:	e79a      	b.n	26bc <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    2786:	2200      	movs	r2, #0
    2788:	3338      	adds	r3, #56	; 0x38
    278a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    278c:	3b34      	subs	r3, #52	; 0x34
    278e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2790:	7a63      	ldrb	r3, [r4, #9]
    2792:	2b02      	cmp	r3, #2
    2794:	d029      	beq.n	27ea <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    2796:	7a63      	ldrb	r3, [r4, #9]
    2798:	2b00      	cmp	r3, #0
    279a:	d000      	beq.n	279e <_spi_interrupt_handler+0x12e>
    279c:	e78e      	b.n	26bc <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    279e:	07bb      	lsls	r3, r7, #30
    27a0:	d400      	bmi.n	27a4 <_spi_interrupt_handler+0x134>
    27a2:	e78b      	b.n	26bc <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    27a4:	0020      	movs	r0, r4
    27a6:	6923      	ldr	r3, [r4, #16]
    27a8:	4798      	blx	r3
    27aa:	e787      	b.n	26bc <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    27ac:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    27ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    27b0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27b2:	3b01      	subs	r3, #1
    27b4:	b29b      	uxth	r3, r3
    27b6:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    27b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27ba:	b29b      	uxth	r3, r3
    27bc:	2b00      	cmp	r3, #0
    27be:	d000      	beq.n	27c2 <_spi_interrupt_handler+0x152>
    27c0:	e77c      	b.n	26bc <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    27c2:	3304      	adds	r3, #4
    27c4:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    27c6:	2200      	movs	r2, #0
    27c8:	3334      	adds	r3, #52	; 0x34
    27ca:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    27cc:	3b35      	subs	r3, #53	; 0x35
    27ce:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    27d0:	07fb      	lsls	r3, r7, #31
    27d2:	d400      	bmi.n	27d6 <_spi_interrupt_handler+0x166>
    27d4:	e772      	b.n	26bc <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    27d6:	0020      	movs	r0, r4
    27d8:	68e3      	ldr	r3, [r4, #12]
    27da:	4798      	blx	r3
    27dc:	e76e      	b.n	26bc <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    27de:	0a1b      	lsrs	r3, r3, #8
    27e0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    27e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27e4:	3301      	adds	r3, #1
    27e6:	62a3      	str	r3, [r4, #40]	; 0x28
    27e8:	e7c4      	b.n	2774 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    27ea:	077b      	lsls	r3, r7, #29
    27ec:	d400      	bmi.n	27f0 <_spi_interrupt_handler+0x180>
    27ee:	e765      	b.n	26bc <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    27f0:	0020      	movs	r0, r4
    27f2:	6963      	ldr	r3, [r4, #20]
    27f4:	4798      	blx	r3
    27f6:	e761      	b.n	26bc <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    27f8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    27fa:	2b01      	cmp	r3, #1
    27fc:	d000      	beq.n	2800 <_spi_interrupt_handler+0x190>
    27fe:	e763      	b.n	26c8 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2800:	79e3      	ldrb	r3, [r4, #7]
    2802:	2b00      	cmp	r3, #0
    2804:	d000      	beq.n	2808 <_spi_interrupt_handler+0x198>
    2806:	e75f      	b.n	26c8 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2808:	3302      	adds	r3, #2
    280a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    280c:	3301      	adds	r3, #1
    280e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    2810:	2200      	movs	r2, #0
    2812:	3335      	adds	r3, #53	; 0x35
    2814:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2816:	07fb      	lsls	r3, r7, #31
    2818:	d400      	bmi.n	281c <_spi_interrupt_handler+0x1ac>
    281a:	e755      	b.n	26c8 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    281c:	0020      	movs	r0, r4
    281e:	68e3      	ldr	r3, [r4, #12]
    2820:	4798      	blx	r3
    2822:	e751      	b.n	26c8 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2824:	2380      	movs	r3, #128	; 0x80
    2826:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2828:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    282a:	067b      	lsls	r3, r7, #25
    282c:	d400      	bmi.n	2830 <_spi_interrupt_handler+0x1c0>
    282e:	e74f      	b.n	26d0 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2830:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2832:	0020      	movs	r0, r4
    2834:	4798      	blx	r3
}
    2836:	e74b      	b.n	26d0 <_spi_interrupt_handler+0x60>
    2838:	20000b38 	.word	0x20000b38
    283c:	20000b50 	.word	0x20000b50

00002840 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	46de      	mov	lr, fp
    2844:	4657      	mov	r7, sl
    2846:	464e      	mov	r6, r9
    2848:	4645      	mov	r5, r8
    284a:	b5e0      	push	{r5, r6, r7, lr}
    284c:	b091      	sub	sp, #68	; 0x44
    284e:	0005      	movs	r5, r0
    2850:	000c      	movs	r4, r1
    2852:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2854:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2856:	0008      	movs	r0, r1
    2858:	4bbc      	ldr	r3, [pc, #752]	; (2b4c <usart_init+0x30c>)
    285a:	4798      	blx	r3
    285c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    285e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2860:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2862:	07db      	lsls	r3, r3, #31
    2864:	d506      	bpl.n	2874 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2866:	b011      	add	sp, #68	; 0x44
    2868:	bc3c      	pop	{r2, r3, r4, r5}
    286a:	4690      	mov	r8, r2
    286c:	4699      	mov	r9, r3
    286e:	46a2      	mov	sl, r4
    2870:	46ab      	mov	fp, r5
    2872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2874:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2876:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2878:	079b      	lsls	r3, r3, #30
    287a:	d4f4      	bmi.n	2866 <usart_init+0x26>
    287c:	49b4      	ldr	r1, [pc, #720]	; (2b50 <usart_init+0x310>)
    287e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2880:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2882:	2301      	movs	r3, #1
    2884:	40bb      	lsls	r3, r7
    2886:	4303      	orrs	r3, r0
    2888:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    288a:	a90f      	add	r1, sp, #60	; 0x3c
    288c:	272d      	movs	r7, #45	; 0x2d
    288e:	5df3      	ldrb	r3, [r6, r7]
    2890:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2892:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2894:	b2d3      	uxtb	r3, r2
    2896:	9302      	str	r3, [sp, #8]
    2898:	0018      	movs	r0, r3
    289a:	4bae      	ldr	r3, [pc, #696]	; (2b54 <usart_init+0x314>)
    289c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    289e:	9802      	ldr	r0, [sp, #8]
    28a0:	4bad      	ldr	r3, [pc, #692]	; (2b58 <usart_init+0x318>)
    28a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    28a4:	5df0      	ldrb	r0, [r6, r7]
    28a6:	2100      	movs	r1, #0
    28a8:	4bac      	ldr	r3, [pc, #688]	; (2b5c <usart_init+0x31c>)
    28aa:	4798      	blx	r3
	module->character_size = config->character_size;
    28ac:	7af3      	ldrb	r3, [r6, #11]
    28ae:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    28b0:	2324      	movs	r3, #36	; 0x24
    28b2:	5cf3      	ldrb	r3, [r6, r3]
    28b4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    28b6:	2325      	movs	r3, #37	; 0x25
    28b8:	5cf3      	ldrb	r3, [r6, r3]
    28ba:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    28bc:	7ef3      	ldrb	r3, [r6, #27]
    28be:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    28c0:	7f33      	ldrb	r3, [r6, #28]
    28c2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28c4:	682b      	ldr	r3, [r5, #0]
    28c6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    28c8:	0018      	movs	r0, r3
    28ca:	4ba0      	ldr	r3, [pc, #640]	; (2b4c <usart_init+0x30c>)
    28cc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    28ce:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    28d0:	2200      	movs	r2, #0
    28d2:	230e      	movs	r3, #14
    28d4:	a906      	add	r1, sp, #24
    28d6:	468c      	mov	ip, r1
    28d8:	4463      	add	r3, ip
    28da:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    28dc:	8a32      	ldrh	r2, [r6, #16]
    28de:	9202      	str	r2, [sp, #8]
    28e0:	2380      	movs	r3, #128	; 0x80
    28e2:	01db      	lsls	r3, r3, #7
    28e4:	429a      	cmp	r2, r3
    28e6:	d100      	bne.n	28ea <usart_init+0xaa>
    28e8:	e09e      	b.n	2a28 <usart_init+0x1e8>
    28ea:	d90f      	bls.n	290c <usart_init+0xcc>
    28ec:	23c0      	movs	r3, #192	; 0xc0
    28ee:	01db      	lsls	r3, r3, #7
    28f0:	9a02      	ldr	r2, [sp, #8]
    28f2:	429a      	cmp	r2, r3
    28f4:	d100      	bne.n	28f8 <usart_init+0xb8>
    28f6:	e092      	b.n	2a1e <usart_init+0x1de>
    28f8:	2380      	movs	r3, #128	; 0x80
    28fa:	021b      	lsls	r3, r3, #8
    28fc:	429a      	cmp	r2, r3
    28fe:	d000      	beq.n	2902 <usart_init+0xc2>
    2900:	e11f      	b.n	2b42 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2902:	2303      	movs	r3, #3
    2904:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2906:	2300      	movs	r3, #0
    2908:	9307      	str	r3, [sp, #28]
    290a:	e008      	b.n	291e <usart_init+0xde>
	switch (config->sample_rate) {
    290c:	2380      	movs	r3, #128	; 0x80
    290e:	019b      	lsls	r3, r3, #6
    2910:	429a      	cmp	r2, r3
    2912:	d000      	beq.n	2916 <usart_init+0xd6>
    2914:	e115      	b.n	2b42 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2916:	2310      	movs	r3, #16
    2918:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    291a:	3b0f      	subs	r3, #15
    291c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    291e:	6833      	ldr	r3, [r6, #0]
    2920:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2922:	68f3      	ldr	r3, [r6, #12]
    2924:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2926:	6973      	ldr	r3, [r6, #20]
    2928:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    292a:	7e33      	ldrb	r3, [r6, #24]
    292c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    292e:	2326      	movs	r3, #38	; 0x26
    2930:	5cf3      	ldrb	r3, [r6, r3]
    2932:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2934:	6873      	ldr	r3, [r6, #4]
    2936:	4699      	mov	r9, r3
	switch (transfer_mode)
    2938:	2b00      	cmp	r3, #0
    293a:	d100      	bne.n	293e <usart_init+0xfe>
    293c:	e0a0      	b.n	2a80 <usart_init+0x240>
    293e:	2380      	movs	r3, #128	; 0x80
    2940:	055b      	lsls	r3, r3, #21
    2942:	4599      	cmp	r9, r3
    2944:	d100      	bne.n	2948 <usart_init+0x108>
    2946:	e084      	b.n	2a52 <usart_init+0x212>
	if(config->encoding_format_enable) {
    2948:	7e73      	ldrb	r3, [r6, #25]
    294a:	2b00      	cmp	r3, #0
    294c:	d002      	beq.n	2954 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    294e:	7eb3      	ldrb	r3, [r6, #26]
    2950:	4642      	mov	r2, r8
    2952:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2954:	682a      	ldr	r2, [r5, #0]
    2956:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2958:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    295a:	2b00      	cmp	r3, #0
    295c:	d1fc      	bne.n	2958 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    295e:	330e      	adds	r3, #14
    2960:	aa06      	add	r2, sp, #24
    2962:	4694      	mov	ip, r2
    2964:	4463      	add	r3, ip
    2966:	881b      	ldrh	r3, [r3, #0]
    2968:	4642      	mov	r2, r8
    296a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    296c:	9b05      	ldr	r3, [sp, #20]
    296e:	9a03      	ldr	r2, [sp, #12]
    2970:	4313      	orrs	r3, r2
    2972:	9a04      	ldr	r2, [sp, #16]
    2974:	4313      	orrs	r3, r2
    2976:	464a      	mov	r2, r9
    2978:	4313      	orrs	r3, r2
    297a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    297c:	465b      	mov	r3, fp
    297e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2980:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2982:	4653      	mov	r3, sl
    2984:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2986:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2988:	2327      	movs	r3, #39	; 0x27
    298a:	5cf3      	ldrb	r3, [r6, r3]
    298c:	2b00      	cmp	r3, #0
    298e:	d101      	bne.n	2994 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2990:	3304      	adds	r3, #4
    2992:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2994:	7e73      	ldrb	r3, [r6, #25]
    2996:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2998:	7f32      	ldrb	r2, [r6, #28]
    299a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    299c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    299e:	7f72      	ldrb	r2, [r6, #29]
    29a0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    29a2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29a4:	2224      	movs	r2, #36	; 0x24
    29a6:	5cb2      	ldrb	r2, [r6, r2]
    29a8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    29aa:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    29ac:	2225      	movs	r2, #37	; 0x25
    29ae:	5cb2      	ldrb	r2, [r6, r2]
    29b0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29b2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    29b4:	7ab1      	ldrb	r1, [r6, #10]
    29b6:	7af2      	ldrb	r2, [r6, #11]
    29b8:	4311      	orrs	r1, r2
    29ba:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    29bc:	8933      	ldrh	r3, [r6, #8]
    29be:	2bff      	cmp	r3, #255	; 0xff
    29c0:	d100      	bne.n	29c4 <usart_init+0x184>
    29c2:	e081      	b.n	2ac8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    29c4:	2280      	movs	r2, #128	; 0x80
    29c6:	0452      	lsls	r2, r2, #17
    29c8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    29ca:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    29cc:	232c      	movs	r3, #44	; 0x2c
    29ce:	5cf3      	ldrb	r3, [r6, r3]
    29d0:	2b00      	cmp	r3, #0
    29d2:	d103      	bne.n	29dc <usart_init+0x19c>
    29d4:	4b62      	ldr	r3, [pc, #392]	; (2b60 <usart_init+0x320>)
    29d6:	789b      	ldrb	r3, [r3, #2]
    29d8:	079b      	lsls	r3, r3, #30
    29da:	d501      	bpl.n	29e0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    29dc:	2380      	movs	r3, #128	; 0x80
    29de:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    29e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29e4:	2b00      	cmp	r3, #0
    29e6:	d1fc      	bne.n	29e2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    29e8:	4643      	mov	r3, r8
    29ea:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    29ec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29f0:	2b00      	cmp	r3, #0
    29f2:	d1fc      	bne.n	29ee <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    29f4:	4643      	mov	r3, r8
    29f6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    29f8:	ab0e      	add	r3, sp, #56	; 0x38
    29fa:	2280      	movs	r2, #128	; 0x80
    29fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29fe:	2200      	movs	r2, #0
    2a00:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2a02:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2a04:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2a06:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2a08:	930a      	str	r3, [sp, #40]	; 0x28
    2a0a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2a0c:	930b      	str	r3, [sp, #44]	; 0x2c
    2a0e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2a10:	930c      	str	r3, [sp, #48]	; 0x30
    2a12:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	930d      	str	r3, [sp, #52]	; 0x34
    2a18:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a1a:	ae0a      	add	r6, sp, #40	; 0x28
    2a1c:	e063      	b.n	2ae6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a1e:	2308      	movs	r3, #8
    2a20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2a22:	3b07      	subs	r3, #7
    2a24:	9307      	str	r3, [sp, #28]
    2a26:	e77a      	b.n	291e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2a28:	6833      	ldr	r3, [r6, #0]
    2a2a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2a2c:	68f3      	ldr	r3, [r6, #12]
    2a2e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2a30:	6973      	ldr	r3, [r6, #20]
    2a32:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a34:	7e33      	ldrb	r3, [r6, #24]
    2a36:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a38:	2326      	movs	r3, #38	; 0x26
    2a3a:	5cf3      	ldrb	r3, [r6, r3]
    2a3c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2a3e:	6873      	ldr	r3, [r6, #4]
    2a40:	4699      	mov	r9, r3
	switch (transfer_mode)
    2a42:	2b00      	cmp	r3, #0
    2a44:	d018      	beq.n	2a78 <usart_init+0x238>
    2a46:	2380      	movs	r3, #128	; 0x80
    2a48:	055b      	lsls	r3, r3, #21
    2a4a:	4599      	cmp	r9, r3
    2a4c:	d001      	beq.n	2a52 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2a4e:	2000      	movs	r0, #0
    2a50:	e025      	b.n	2a9e <usart_init+0x25e>
			if (!config->use_external_clock) {
    2a52:	2327      	movs	r3, #39	; 0x27
    2a54:	5cf3      	ldrb	r3, [r6, r3]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d000      	beq.n	2a5c <usart_init+0x21c>
    2a5a:	e775      	b.n	2948 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2a5c:	6a33      	ldr	r3, [r6, #32]
    2a5e:	001f      	movs	r7, r3
    2a60:	b2c0      	uxtb	r0, r0
    2a62:	4b40      	ldr	r3, [pc, #256]	; (2b64 <usart_init+0x324>)
    2a64:	4798      	blx	r3
    2a66:	0001      	movs	r1, r0
    2a68:	220e      	movs	r2, #14
    2a6a:	ab06      	add	r3, sp, #24
    2a6c:	469c      	mov	ip, r3
    2a6e:	4462      	add	r2, ip
    2a70:	0038      	movs	r0, r7
    2a72:	4b3d      	ldr	r3, [pc, #244]	; (2b68 <usart_init+0x328>)
    2a74:	4798      	blx	r3
    2a76:	e012      	b.n	2a9e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a78:	2308      	movs	r3, #8
    2a7a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a7c:	2300      	movs	r3, #0
    2a7e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2a80:	2327      	movs	r3, #39	; 0x27
    2a82:	5cf3      	ldrb	r3, [r6, r3]
    2a84:	2b00      	cmp	r3, #0
    2a86:	d00e      	beq.n	2aa6 <usart_init+0x266>
				status_code =
    2a88:	9b06      	ldr	r3, [sp, #24]
    2a8a:	9300      	str	r3, [sp, #0]
    2a8c:	9b07      	ldr	r3, [sp, #28]
    2a8e:	220e      	movs	r2, #14
    2a90:	a906      	add	r1, sp, #24
    2a92:	468c      	mov	ip, r1
    2a94:	4462      	add	r2, ip
    2a96:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a98:	6a30      	ldr	r0, [r6, #32]
    2a9a:	4f34      	ldr	r7, [pc, #208]	; (2b6c <usart_init+0x32c>)
    2a9c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a9e:	2800      	cmp	r0, #0
    2aa0:	d000      	beq.n	2aa4 <usart_init+0x264>
    2aa2:	e6e0      	b.n	2866 <usart_init+0x26>
    2aa4:	e750      	b.n	2948 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2aa6:	6a33      	ldr	r3, [r6, #32]
    2aa8:	001f      	movs	r7, r3
    2aaa:	b2c0      	uxtb	r0, r0
    2aac:	4b2d      	ldr	r3, [pc, #180]	; (2b64 <usart_init+0x324>)
    2aae:	4798      	blx	r3
    2ab0:	0001      	movs	r1, r0
				status_code =
    2ab2:	9b06      	ldr	r3, [sp, #24]
    2ab4:	9300      	str	r3, [sp, #0]
    2ab6:	9b07      	ldr	r3, [sp, #28]
    2ab8:	220e      	movs	r2, #14
    2aba:	a806      	add	r0, sp, #24
    2abc:	4684      	mov	ip, r0
    2abe:	4462      	add	r2, ip
    2ac0:	0038      	movs	r0, r7
    2ac2:	4f2a      	ldr	r7, [pc, #168]	; (2b6c <usart_init+0x32c>)
    2ac4:	47b8      	blx	r7
    2ac6:	e7ea      	b.n	2a9e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2ac8:	7ef3      	ldrb	r3, [r6, #27]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d100      	bne.n	2ad0 <usart_init+0x290>
    2ace:	e77d      	b.n	29cc <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2ad0:	2380      	movs	r3, #128	; 0x80
    2ad2:	04db      	lsls	r3, r3, #19
    2ad4:	431f      	orrs	r7, r3
    2ad6:	e779      	b.n	29cc <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2ad8:	0020      	movs	r0, r4
    2ada:	4b25      	ldr	r3, [pc, #148]	; (2b70 <usart_init+0x330>)
    2adc:	4798      	blx	r3
    2ade:	e007      	b.n	2af0 <usart_init+0x2b0>
    2ae0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2ae2:	2f04      	cmp	r7, #4
    2ae4:	d00d      	beq.n	2b02 <usart_init+0x2c2>
    2ae6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ae8:	00bb      	lsls	r3, r7, #2
    2aea:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2aec:	2800      	cmp	r0, #0
    2aee:	d0f3      	beq.n	2ad8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2af0:	1c43      	adds	r3, r0, #1
    2af2:	d0f5      	beq.n	2ae0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2af4:	a90e      	add	r1, sp, #56	; 0x38
    2af6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2af8:	0c00      	lsrs	r0, r0, #16
    2afa:	b2c0      	uxtb	r0, r0
    2afc:	4b1d      	ldr	r3, [pc, #116]	; (2b74 <usart_init+0x334>)
    2afe:	4798      	blx	r3
    2b00:	e7ee      	b.n	2ae0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2b02:	2300      	movs	r3, #0
    2b04:	60eb      	str	r3, [r5, #12]
    2b06:	612b      	str	r3, [r5, #16]
    2b08:	616b      	str	r3, [r5, #20]
    2b0a:	61ab      	str	r3, [r5, #24]
    2b0c:	61eb      	str	r3, [r5, #28]
    2b0e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2b10:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2b12:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2b14:	2200      	movs	r2, #0
    2b16:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2b18:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2b1a:	3330      	adds	r3, #48	; 0x30
    2b1c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2b1e:	3301      	adds	r3, #1
    2b20:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2b22:	3301      	adds	r3, #1
    2b24:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2b26:	3301      	adds	r3, #1
    2b28:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2b2a:	6828      	ldr	r0, [r5, #0]
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <usart_init+0x30c>)
    2b2e:	4798      	blx	r3
    2b30:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2b32:	4911      	ldr	r1, [pc, #68]	; (2b78 <usart_init+0x338>)
    2b34:	4b11      	ldr	r3, [pc, #68]	; (2b7c <usart_init+0x33c>)
    2b36:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2b38:	00a4      	lsls	r4, r4, #2
    2b3a:	4b11      	ldr	r3, [pc, #68]	; (2b80 <usart_init+0x340>)
    2b3c:	50e5      	str	r5, [r4, r3]
	return status_code;
    2b3e:	2000      	movs	r0, #0
    2b40:	e691      	b.n	2866 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2b42:	2310      	movs	r3, #16
    2b44:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b46:	2300      	movs	r3, #0
    2b48:	9307      	str	r3, [sp, #28]
    2b4a:	e6e8      	b.n	291e <usart_init+0xde>
    2b4c:	00001ff9 	.word	0x00001ff9
    2b50:	40000400 	.word	0x40000400
    2b54:	000034f1 	.word	0x000034f1
    2b58:	00003465 	.word	0x00003465
    2b5c:	00001e35 	.word	0x00001e35
    2b60:	41002000 	.word	0x41002000
    2b64:	0000350d 	.word	0x0000350d
    2b68:	00001d77 	.word	0x00001d77
    2b6c:	00001da1 	.word	0x00001da1
    2b70:	00001e81 	.word	0x00001e81
    2b74:	000035e9 	.word	0x000035e9
    2b78:	00002d21 	.word	0x00002d21
    2b7c:	00002035 	.word	0x00002035
    2b80:	20000b38 	.word	0x20000b38

00002b84 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2b84:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2b86:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2b88:	2a00      	cmp	r2, #0
    2b8a:	d101      	bne.n	2b90 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2b8c:	0018      	movs	r0, r3
    2b8e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2b90:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2b92:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b94:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2b96:	2a00      	cmp	r2, #0
    2b98:	d1f8      	bne.n	2b8c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b9a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b9c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2b9e:	2a00      	cmp	r2, #0
    2ba0:	d1fc      	bne.n	2b9c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2ba2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2ba4:	2102      	movs	r1, #2
    2ba6:	7e1a      	ldrb	r2, [r3, #24]
    2ba8:	420a      	tst	r2, r1
    2baa:	d0fc      	beq.n	2ba6 <usart_write_wait+0x22>
	return STATUS_OK;
    2bac:	2300      	movs	r3, #0
    2bae:	e7ed      	b.n	2b8c <usart_write_wait+0x8>

00002bb0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2bb0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2bb2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2bb4:	2a00      	cmp	r2, #0
    2bb6:	d101      	bne.n	2bbc <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2bb8:	0018      	movs	r0, r3
    2bba:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2bbc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2bbe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2bc0:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2bc2:	2a00      	cmp	r2, #0
    2bc4:	d1f8      	bne.n	2bb8 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bc6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2bc8:	7e10      	ldrb	r0, [r2, #24]
    2bca:	0740      	lsls	r0, r0, #29
    2bcc:	d5f4      	bpl.n	2bb8 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2bce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d1fc      	bne.n	2bce <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2bd4:	8b53      	ldrh	r3, [r2, #26]
    2bd6:	b2db      	uxtb	r3, r3
	if (error_code) {
    2bd8:	0698      	lsls	r0, r3, #26
    2bda:	d01d      	beq.n	2c18 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2bdc:	0798      	lsls	r0, r3, #30
    2bde:	d503      	bpl.n	2be8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2be0:	2302      	movs	r3, #2
    2be2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2be4:	3318      	adds	r3, #24
    2be6:	e7e7      	b.n	2bb8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2be8:	0758      	lsls	r0, r3, #29
    2bea:	d503      	bpl.n	2bf4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2bec:	2304      	movs	r3, #4
    2bee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2bf0:	331a      	adds	r3, #26
    2bf2:	e7e1      	b.n	2bb8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2bf4:	07d8      	lsls	r0, r3, #31
    2bf6:	d503      	bpl.n	2c00 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2bf8:	2301      	movs	r3, #1
    2bfa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2bfc:	3312      	adds	r3, #18
    2bfe:	e7db      	b.n	2bb8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2c00:	06d8      	lsls	r0, r3, #27
    2c02:	d503      	bpl.n	2c0c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2c04:	2310      	movs	r3, #16
    2c06:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2c08:	3332      	adds	r3, #50	; 0x32
    2c0a:	e7d5      	b.n	2bb8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2c0c:	069b      	lsls	r3, r3, #26
    2c0e:	d503      	bpl.n	2c18 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2c10:	2320      	movs	r3, #32
    2c12:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2c14:	3321      	adds	r3, #33	; 0x21
    2c16:	e7cf      	b.n	2bb8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2c18:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2c1a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2c1c:	2300      	movs	r3, #0
    2c1e:	e7cb      	b.n	2bb8 <usart_read_wait+0x8>

00002c20 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c22:	0006      	movs	r6, r0
    2c24:	000c      	movs	r4, r1
    2c26:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c28:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2c2a:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <_usart_write_buffer+0x34>)
    2c2c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2c2e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2c30:	b29b      	uxth	r3, r3
    2c32:	2b00      	cmp	r3, #0
    2c34:	d003      	beq.n	2c3e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2c36:	4b08      	ldr	r3, [pc, #32]	; (2c58 <_usart_write_buffer+0x38>)
    2c38:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c3a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2c3e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2c40:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_usart_write_buffer+0x38>)
    2c42:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2c44:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2c46:	2205      	movs	r2, #5
    2c48:	2333      	movs	r3, #51	; 0x33
    2c4a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2c4c:	3b32      	subs	r3, #50	; 0x32
    2c4e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2c50:	2000      	movs	r0, #0
    2c52:	e7f3      	b.n	2c3c <_usart_write_buffer+0x1c>
    2c54:	00001a51 	.word	0x00001a51
    2c58:	00001a91 	.word	0x00001a91

00002c5c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c5e:	0004      	movs	r4, r0
    2c60:	000d      	movs	r5, r1
    2c62:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c64:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2c66:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <_usart_read_buffer+0x48>)
    2c68:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2c6a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2c6c:	b29b      	uxth	r3, r3
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d003      	beq.n	2c7a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2c72:	4b0d      	ldr	r3, [pc, #52]	; (2ca8 <_usart_read_buffer+0x4c>)
    2c74:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c76:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2c7a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2c7c:	4b0a      	ldr	r3, [pc, #40]	; (2ca8 <_usart_read_buffer+0x4c>)
    2c7e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2c80:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2c82:	2205      	movs	r2, #5
    2c84:	2332      	movs	r3, #50	; 0x32
    2c86:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2c88:	3b2e      	subs	r3, #46	; 0x2e
    2c8a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2c8c:	7a23      	ldrb	r3, [r4, #8]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d001      	beq.n	2c96 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c92:	2320      	movs	r3, #32
    2c94:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2c96:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2c98:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d0ec      	beq.n	2c78 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2c9e:	2308      	movs	r3, #8
    2ca0:	75bb      	strb	r3, [r7, #22]
    2ca2:	e7e9      	b.n	2c78 <_usart_read_buffer+0x1c>
    2ca4:	00001a51 	.word	0x00001a51
    2ca8:	00001a91 	.word	0x00001a91

00002cac <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2cac:	1c93      	adds	r3, r2, #2
    2cae:	009b      	lsls	r3, r3, #2
    2cb0:	18c3      	adds	r3, r0, r3
    2cb2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2cb4:	2130      	movs	r1, #48	; 0x30
    2cb6:	2301      	movs	r3, #1
    2cb8:	4093      	lsls	r3, r2
    2cba:	001a      	movs	r2, r3
    2cbc:	5c43      	ldrb	r3, [r0, r1]
    2cbe:	4313      	orrs	r3, r2
    2cc0:	5443      	strb	r3, [r0, r1]
}
    2cc2:	4770      	bx	lr

00002cc4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2cc4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2cc6:	2317      	movs	r3, #23
	if (length == 0) {
    2cc8:	2a00      	cmp	r2, #0
    2cca:	d101      	bne.n	2cd0 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2ccc:	0018      	movs	r0, r3
    2cce:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2cd0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2cd2:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2cd4:	2c00      	cmp	r4, #0
    2cd6:	d0f9      	beq.n	2ccc <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2cd8:	4b01      	ldr	r3, [pc, #4]	; (2ce0 <usart_write_buffer_job+0x1c>)
    2cda:	4798      	blx	r3
    2cdc:	0003      	movs	r3, r0
    2cde:	e7f5      	b.n	2ccc <usart_write_buffer_job+0x8>
    2ce0:	00002c21 	.word	0x00002c21

00002ce4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2ce4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2ce6:	2317      	movs	r3, #23
	if (length == 0) {
    2ce8:	2a00      	cmp	r2, #0
    2cea:	d101      	bne.n	2cf0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2cec:	0018      	movs	r0, r3
    2cee:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2cf0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2cf2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2cf4:	2c00      	cmp	r4, #0
    2cf6:	d0f9      	beq.n	2cec <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2cf8:	4b01      	ldr	r3, [pc, #4]	; (2d00 <usart_read_buffer_job+0x1c>)
    2cfa:	4798      	blx	r3
    2cfc:	0003      	movs	r3, r0
    2cfe:	e7f5      	b.n	2cec <usart_read_buffer_job+0x8>
    2d00:	00002c5d 	.word	0x00002c5d

00002d04 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2d04:	2900      	cmp	r1, #0
    2d06:	d003      	beq.n	2d10 <usart_get_job_status+0xc>
    2d08:	2901      	cmp	r1, #1
    2d0a:	d005      	beq.n	2d18 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2d0c:	2017      	movs	r0, #23
    2d0e:	e002      	b.n	2d16 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2d10:	2332      	movs	r3, #50	; 0x32
    2d12:	5cc0      	ldrb	r0, [r0, r3]
    2d14:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2d16:	4770      	bx	lr
			status_code = module->tx_status;
    2d18:	2333      	movs	r3, #51	; 0x33
    2d1a:	5cc0      	ldrb	r0, [r0, r3]
    2d1c:	b2c0      	uxtb	r0, r0
			break;
    2d1e:	e7fa      	b.n	2d16 <usart_get_job_status+0x12>

00002d20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2d22:	0080      	lsls	r0, r0, #2
    2d24:	4b62      	ldr	r3, [pc, #392]	; (2eb0 <_usart_interrupt_handler+0x190>)
    2d26:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2d28:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d2a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d1fc      	bne.n	2d2a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2d30:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2d32:	7da6      	ldrb	r6, [r4, #22]
    2d34:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2d36:	2330      	movs	r3, #48	; 0x30
    2d38:	5ceb      	ldrb	r3, [r5, r3]
    2d3a:	2231      	movs	r2, #49	; 0x31
    2d3c:	5caf      	ldrb	r7, [r5, r2]
    2d3e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2d40:	07f3      	lsls	r3, r6, #31
    2d42:	d522      	bpl.n	2d8a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2d44:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2d46:	b29b      	uxth	r3, r3
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d01c      	beq.n	2d86 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2d4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2d4e:	7813      	ldrb	r3, [r2, #0]
    2d50:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2d52:	1c51      	adds	r1, r2, #1
    2d54:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d56:	7969      	ldrb	r1, [r5, #5]
    2d58:	2901      	cmp	r1, #1
    2d5a:	d00e      	beq.n	2d7a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2d5c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2d5e:	05db      	lsls	r3, r3, #23
    2d60:	0ddb      	lsrs	r3, r3, #23
    2d62:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2d64:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2d66:	3b01      	subs	r3, #1
    2d68:	b29b      	uxth	r3, r3
    2d6a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d10c      	bne.n	2d8a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d70:	3301      	adds	r3, #1
    2d72:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2d74:	3301      	adds	r3, #1
    2d76:	75a3      	strb	r3, [r4, #22]
    2d78:	e007      	b.n	2d8a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d7a:	7851      	ldrb	r1, [r2, #1]
    2d7c:	0209      	lsls	r1, r1, #8
    2d7e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2d80:	3202      	adds	r2, #2
    2d82:	62aa      	str	r2, [r5, #40]	; 0x28
    2d84:	e7eb      	b.n	2d5e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d86:	2301      	movs	r3, #1
    2d88:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2d8a:	07b3      	lsls	r3, r6, #30
    2d8c:	d506      	bpl.n	2d9c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2d8e:	2302      	movs	r3, #2
    2d90:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2d92:	2200      	movs	r2, #0
    2d94:	3331      	adds	r3, #49	; 0x31
    2d96:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2d98:	07fb      	lsls	r3, r7, #31
    2d9a:	d41a      	bmi.n	2dd2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2d9c:	0773      	lsls	r3, r6, #29
    2d9e:	d565      	bpl.n	2e6c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2da0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2da2:	b29b      	uxth	r3, r3
    2da4:	2b00      	cmp	r3, #0
    2da6:	d05f      	beq.n	2e68 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2da8:	8b63      	ldrh	r3, [r4, #26]
    2daa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2dac:	071a      	lsls	r2, r3, #28
    2dae:	d414      	bmi.n	2dda <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2db0:	223f      	movs	r2, #63	; 0x3f
    2db2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2db4:	2b00      	cmp	r3, #0
    2db6:	d034      	beq.n	2e22 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2db8:	079a      	lsls	r2, r3, #30
    2dba:	d511      	bpl.n	2de0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2dbc:	221a      	movs	r2, #26
    2dbe:	2332      	movs	r3, #50	; 0x32
    2dc0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2dc2:	3b30      	subs	r3, #48	; 0x30
    2dc4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2dc6:	077b      	lsls	r3, r7, #29
    2dc8:	d550      	bpl.n	2e6c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2dca:	0028      	movs	r0, r5
    2dcc:	696b      	ldr	r3, [r5, #20]
    2dce:	4798      	blx	r3
    2dd0:	e04c      	b.n	2e6c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2dd2:	0028      	movs	r0, r5
    2dd4:	68eb      	ldr	r3, [r5, #12]
    2dd6:	4798      	blx	r3
    2dd8:	e7e0      	b.n	2d9c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2dda:	2237      	movs	r2, #55	; 0x37
    2ddc:	4013      	ands	r3, r2
    2dde:	e7e9      	b.n	2db4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2de0:	075a      	lsls	r2, r3, #29
    2de2:	d505      	bpl.n	2df0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2de4:	221e      	movs	r2, #30
    2de6:	2332      	movs	r3, #50	; 0x32
    2de8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2dea:	3b2e      	subs	r3, #46	; 0x2e
    2dec:	8363      	strh	r3, [r4, #26]
    2dee:	e7ea      	b.n	2dc6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2df0:	07da      	lsls	r2, r3, #31
    2df2:	d505      	bpl.n	2e00 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2df4:	2213      	movs	r2, #19
    2df6:	2332      	movs	r3, #50	; 0x32
    2df8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2dfa:	3b31      	subs	r3, #49	; 0x31
    2dfc:	8363      	strh	r3, [r4, #26]
    2dfe:	e7e2      	b.n	2dc6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2e00:	06da      	lsls	r2, r3, #27
    2e02:	d505      	bpl.n	2e10 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2e04:	2242      	movs	r2, #66	; 0x42
    2e06:	2332      	movs	r3, #50	; 0x32
    2e08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2e0a:	3b22      	subs	r3, #34	; 0x22
    2e0c:	8363      	strh	r3, [r4, #26]
    2e0e:	e7da      	b.n	2dc6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2e10:	2220      	movs	r2, #32
    2e12:	421a      	tst	r2, r3
    2e14:	d0d7      	beq.n	2dc6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2e16:	3221      	adds	r2, #33	; 0x21
    2e18:	2332      	movs	r3, #50	; 0x32
    2e1a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2e1c:	3b12      	subs	r3, #18
    2e1e:	8363      	strh	r3, [r4, #26]
    2e20:	e7d1      	b.n	2dc6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2e22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2e24:	05db      	lsls	r3, r3, #23
    2e26:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2e28:	b2da      	uxtb	r2, r3
    2e2a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2e2c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2e2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2e30:	1c51      	adds	r1, r2, #1
    2e32:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2e34:	7969      	ldrb	r1, [r5, #5]
    2e36:	2901      	cmp	r1, #1
    2e38:	d010      	beq.n	2e5c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2e3a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2e3c:	3b01      	subs	r3, #1
    2e3e:	b29b      	uxth	r3, r3
    2e40:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2e42:	2b00      	cmp	r3, #0
    2e44:	d112      	bne.n	2e6c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2e46:	3304      	adds	r3, #4
    2e48:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2e4a:	2200      	movs	r2, #0
    2e4c:	332e      	adds	r3, #46	; 0x2e
    2e4e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2e50:	07bb      	lsls	r3, r7, #30
    2e52:	d50b      	bpl.n	2e6c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2e54:	0028      	movs	r0, r5
    2e56:	692b      	ldr	r3, [r5, #16]
    2e58:	4798      	blx	r3
    2e5a:	e007      	b.n	2e6c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2e5c:	0a1b      	lsrs	r3, r3, #8
    2e5e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2e60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2e62:	3301      	adds	r3, #1
    2e64:	626b      	str	r3, [r5, #36]	; 0x24
    2e66:	e7e8      	b.n	2e3a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2e68:	2304      	movs	r3, #4
    2e6a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2e6c:	06f3      	lsls	r3, r6, #27
    2e6e:	d504      	bpl.n	2e7a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2e70:	2310      	movs	r3, #16
    2e72:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2e74:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2e76:	06fb      	lsls	r3, r7, #27
    2e78:	d40e      	bmi.n	2e98 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2e7a:	06b3      	lsls	r3, r6, #26
    2e7c:	d504      	bpl.n	2e88 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2e7e:	2320      	movs	r3, #32
    2e80:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e82:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2e84:	073b      	lsls	r3, r7, #28
    2e86:	d40b      	bmi.n	2ea0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e88:	0733      	lsls	r3, r6, #28
    2e8a:	d504      	bpl.n	2e96 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e8c:	2308      	movs	r3, #8
    2e8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e92:	06bb      	lsls	r3, r7, #26
    2e94:	d408      	bmi.n	2ea8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2e98:	0028      	movs	r0, r5
    2e9a:	69eb      	ldr	r3, [r5, #28]
    2e9c:	4798      	blx	r3
    2e9e:	e7ec      	b.n	2e7a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2ea0:	0028      	movs	r0, r5
    2ea2:	69ab      	ldr	r3, [r5, #24]
    2ea4:	4798      	blx	r3
    2ea6:	e7ef      	b.n	2e88 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2ea8:	6a2b      	ldr	r3, [r5, #32]
    2eaa:	0028      	movs	r0, r5
    2eac:	4798      	blx	r3
}
    2eae:	e7f2      	b.n	2e96 <_usart_interrupt_handler+0x176>
    2eb0:	20000b38 	.word	0x20000b38

00002eb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2eb4:	b510      	push	{r4, lr}
	switch (clock_source) {
    2eb6:	2808      	cmp	r0, #8
    2eb8:	d803      	bhi.n	2ec2 <system_clock_source_get_hz+0xe>
    2eba:	0080      	lsls	r0, r0, #2
    2ebc:	4b1c      	ldr	r3, [pc, #112]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2ebe:	581b      	ldr	r3, [r3, r0]
    2ec0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2ec2:	2000      	movs	r0, #0
    2ec4:	e032      	b.n	2f2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2ec6:	4b1b      	ldr	r3, [pc, #108]	; (2f34 <system_clock_source_get_hz+0x80>)
    2ec8:	6918      	ldr	r0, [r3, #16]
    2eca:	e02f      	b.n	2f2c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ecc:	4b1a      	ldr	r3, [pc, #104]	; (2f38 <system_clock_source_get_hz+0x84>)
    2ece:	6a1b      	ldr	r3, [r3, #32]
    2ed0:	059b      	lsls	r3, r3, #22
    2ed2:	0f9b      	lsrs	r3, r3, #30
    2ed4:	4819      	ldr	r0, [pc, #100]	; (2f3c <system_clock_source_get_hz+0x88>)
    2ed6:	40d8      	lsrs	r0, r3
    2ed8:	e028      	b.n	2f2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2eda:	4b16      	ldr	r3, [pc, #88]	; (2f34 <system_clock_source_get_hz+0x80>)
    2edc:	6958      	ldr	r0, [r3, #20]
    2ede:	e025      	b.n	2f2c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ee0:	4b14      	ldr	r3, [pc, #80]	; (2f34 <system_clock_source_get_hz+0x80>)
    2ee2:	681b      	ldr	r3, [r3, #0]
			return 0;
    2ee4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ee6:	079b      	lsls	r3, r3, #30
    2ee8:	d520      	bpl.n	2f2c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2eea:	4913      	ldr	r1, [pc, #76]	; (2f38 <system_clock_source_get_hz+0x84>)
    2eec:	2210      	movs	r2, #16
    2eee:	68cb      	ldr	r3, [r1, #12]
    2ef0:	421a      	tst	r2, r3
    2ef2:	d0fc      	beq.n	2eee <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2ef4:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <system_clock_source_get_hz+0x80>)
    2ef6:	681a      	ldr	r2, [r3, #0]
    2ef8:	2324      	movs	r3, #36	; 0x24
    2efa:	4013      	ands	r3, r2
    2efc:	2b04      	cmp	r3, #4
    2efe:	d001      	beq.n	2f04 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2f00:	480f      	ldr	r0, [pc, #60]	; (2f40 <system_clock_source_get_hz+0x8c>)
    2f02:	e013      	b.n	2f2c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f04:	2000      	movs	r0, #0
    2f06:	4b0f      	ldr	r3, [pc, #60]	; (2f44 <system_clock_source_get_hz+0x90>)
    2f08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2f0a:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <system_clock_source_get_hz+0x80>)
    2f0c:	689b      	ldr	r3, [r3, #8]
    2f0e:	041b      	lsls	r3, r3, #16
    2f10:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f12:	4358      	muls	r0, r3
    2f14:	e00a      	b.n	2f2c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f16:	2350      	movs	r3, #80	; 0x50
    2f18:	4a07      	ldr	r2, [pc, #28]	; (2f38 <system_clock_source_get_hz+0x84>)
    2f1a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2f1c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f1e:	075b      	lsls	r3, r3, #29
    2f20:	d504      	bpl.n	2f2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2f22:	4b04      	ldr	r3, [pc, #16]	; (2f34 <system_clock_source_get_hz+0x80>)
    2f24:	68d8      	ldr	r0, [r3, #12]
    2f26:	e001      	b.n	2f2c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2f28:	2080      	movs	r0, #128	; 0x80
    2f2a:	0200      	lsls	r0, r0, #8
	}
}
    2f2c:	bd10      	pop	{r4, pc}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	0000712c 	.word	0x0000712c
    2f34:	200002a8 	.word	0x200002a8
    2f38:	40000800 	.word	0x40000800
    2f3c:	007a1200 	.word	0x007a1200
    2f40:	02dc6c00 	.word	0x02dc6c00
    2f44:	0000350d 	.word	0x0000350d

00002f48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f4a:	490c      	ldr	r1, [pc, #48]	; (2f7c <system_clock_source_osc8m_set_config+0x34>)
    2f4c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f4e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f52:	7840      	ldrb	r0, [r0, #1]
    2f54:	2201      	movs	r2, #1
    2f56:	4010      	ands	r0, r2
    2f58:	0180      	lsls	r0, r0, #6
    2f5a:	2640      	movs	r6, #64	; 0x40
    2f5c:	43b3      	bics	r3, r6
    2f5e:	4303      	orrs	r3, r0
    2f60:	402a      	ands	r2, r5
    2f62:	01d2      	lsls	r2, r2, #7
    2f64:	2080      	movs	r0, #128	; 0x80
    2f66:	4383      	bics	r3, r0
    2f68:	4313      	orrs	r3, r2
    2f6a:	2203      	movs	r2, #3
    2f6c:	4022      	ands	r2, r4
    2f6e:	0212      	lsls	r2, r2, #8
    2f70:	4803      	ldr	r0, [pc, #12]	; (2f80 <system_clock_source_osc8m_set_config+0x38>)
    2f72:	4003      	ands	r3, r0
    2f74:	4313      	orrs	r3, r2
    2f76:	620b      	str	r3, [r1, #32]
}
    2f78:	bd70      	pop	{r4, r5, r6, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	40000800 	.word	0x40000800
    2f80:	fffffcff 	.word	0xfffffcff

00002f84 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f86:	46de      	mov	lr, fp
    2f88:	4657      	mov	r7, sl
    2f8a:	464e      	mov	r6, r9
    2f8c:	4645      	mov	r5, r8
    2f8e:	b5e0      	push	{r5, r6, r7, lr}
    2f90:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2f92:	4b26      	ldr	r3, [pc, #152]	; (302c <system_clock_source_xosc32k_set_config+0xa8>)
    2f94:	469b      	mov	fp, r3
    2f96:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2f98:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2f9a:	7800      	ldrb	r0, [r0, #0]
    2f9c:	4242      	negs	r2, r0
    2f9e:	4142      	adcs	r2, r0
    2fa0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2fa2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2fa4:	78ca      	ldrb	r2, [r1, #3]
    2fa6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2fa8:	790a      	ldrb	r2, [r1, #4]
    2faa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2fac:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2fae:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2fb0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2fb2:	688a      	ldr	r2, [r1, #8]
    2fb4:	491e      	ldr	r1, [pc, #120]	; (3030 <system_clock_source_xosc32k_set_config+0xac>)
    2fb6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2fb8:	2101      	movs	r1, #1
    2fba:	464a      	mov	r2, r9
    2fbc:	0092      	lsls	r2, r2, #2
    2fbe:	4691      	mov	r9, r2
    2fc0:	2204      	movs	r2, #4
    2fc2:	4393      	bics	r3, r2
    2fc4:	464a      	mov	r2, r9
    2fc6:	4313      	orrs	r3, r2
    2fc8:	4642      	mov	r2, r8
    2fca:	400a      	ands	r2, r1
    2fcc:	00d2      	lsls	r2, r2, #3
    2fce:	4690      	mov	r8, r2
    2fd0:	2208      	movs	r2, #8
    2fd2:	4393      	bics	r3, r2
    2fd4:	4642      	mov	r2, r8
    2fd6:	4313      	orrs	r3, r2
    2fd8:	4662      	mov	r2, ip
    2fda:	400a      	ands	r2, r1
    2fdc:	0112      	lsls	r2, r2, #4
    2fde:	4694      	mov	ip, r2
    2fe0:	2210      	movs	r2, #16
    2fe2:	4393      	bics	r3, r2
    2fe4:	4662      	mov	r2, ip
    2fe6:	4313      	orrs	r3, r2
    2fe8:	4008      	ands	r0, r1
    2fea:	0140      	lsls	r0, r0, #5
    2fec:	2220      	movs	r2, #32
    2fee:	4393      	bics	r3, r2
    2ff0:	4303      	orrs	r3, r0
    2ff2:	400f      	ands	r7, r1
    2ff4:	01bf      	lsls	r7, r7, #6
    2ff6:	2040      	movs	r0, #64	; 0x40
    2ff8:	4383      	bics	r3, r0
    2ffa:	433b      	orrs	r3, r7
    2ffc:	400e      	ands	r6, r1
    2ffe:	01f6      	lsls	r6, r6, #7
    3000:	3040      	adds	r0, #64	; 0x40
    3002:	4383      	bics	r3, r0
    3004:	4333      	orrs	r3, r6
    3006:	3879      	subs	r0, #121	; 0x79
    3008:	4005      	ands	r5, r0
    300a:	022d      	lsls	r5, r5, #8
    300c:	4809      	ldr	r0, [pc, #36]	; (3034 <system_clock_source_xosc32k_set_config+0xb0>)
    300e:	4003      	ands	r3, r0
    3010:	432b      	orrs	r3, r5
    3012:	4021      	ands	r1, r4
    3014:	0309      	lsls	r1, r1, #12
    3016:	4808      	ldr	r0, [pc, #32]	; (3038 <system_clock_source_xosc32k_set_config+0xb4>)
    3018:	4003      	ands	r3, r0
    301a:	430b      	orrs	r3, r1
    301c:	465a      	mov	r2, fp
    301e:	8293      	strh	r3, [r2, #20]
}
    3020:	bc3c      	pop	{r2, r3, r4, r5}
    3022:	4690      	mov	r8, r2
    3024:	4699      	mov	r9, r3
    3026:	46a2      	mov	sl, r4
    3028:	46ab      	mov	fp, r5
    302a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    302c:	40000800 	.word	0x40000800
    3030:	200002a8 	.word	0x200002a8
    3034:	fffff8ff 	.word	0xfffff8ff
    3038:	ffffefff 	.word	0xffffefff

0000303c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    303c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    303e:	7a03      	ldrb	r3, [r0, #8]
    3040:	069b      	lsls	r3, r3, #26
    3042:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3044:	8942      	ldrh	r2, [r0, #10]
    3046:	0592      	lsls	r2, r2, #22
    3048:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    304a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    304c:	4918      	ldr	r1, [pc, #96]	; (30b0 <system_clock_source_dfll_set_config+0x74>)
    304e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3050:	7983      	ldrb	r3, [r0, #6]
    3052:	79c2      	ldrb	r2, [r0, #7]
    3054:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3056:	8842      	ldrh	r2, [r0, #2]
    3058:	8884      	ldrh	r4, [r0, #4]
    305a:	4322      	orrs	r2, r4
    305c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    305e:	7842      	ldrb	r2, [r0, #1]
    3060:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    3062:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3064:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3066:	7803      	ldrb	r3, [r0, #0]
    3068:	2b04      	cmp	r3, #4
    306a:	d011      	beq.n	3090 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    306c:	2b20      	cmp	r3, #32
    306e:	d10e      	bne.n	308e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3070:	7b03      	ldrb	r3, [r0, #12]
    3072:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3074:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3076:	4313      	orrs	r3, r2
    3078:	89c2      	ldrh	r2, [r0, #14]
    307a:	0412      	lsls	r2, r2, #16
    307c:	490d      	ldr	r1, [pc, #52]	; (30b4 <system_clock_source_dfll_set_config+0x78>)
    307e:	400a      	ands	r2, r1
    3080:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3082:	4a0b      	ldr	r2, [pc, #44]	; (30b0 <system_clock_source_dfll_set_config+0x74>)
    3084:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3086:	6811      	ldr	r1, [r2, #0]
    3088:	4b0b      	ldr	r3, [pc, #44]	; (30b8 <system_clock_source_dfll_set_config+0x7c>)
    308a:	430b      	orrs	r3, r1
    308c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    308e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3090:	7b03      	ldrb	r3, [r0, #12]
    3092:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3094:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3096:	4313      	orrs	r3, r2
    3098:	89c2      	ldrh	r2, [r0, #14]
    309a:	0412      	lsls	r2, r2, #16
    309c:	4905      	ldr	r1, [pc, #20]	; (30b4 <system_clock_source_dfll_set_config+0x78>)
    309e:	400a      	ands	r2, r1
    30a0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    30a2:	4a03      	ldr	r2, [pc, #12]	; (30b0 <system_clock_source_dfll_set_config+0x74>)
    30a4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    30a6:	6813      	ldr	r3, [r2, #0]
    30a8:	2104      	movs	r1, #4
    30aa:	430b      	orrs	r3, r1
    30ac:	6013      	str	r3, [r2, #0]
    30ae:	e7ee      	b.n	308e <system_clock_source_dfll_set_config+0x52>
    30b0:	200002a8 	.word	0x200002a8
    30b4:	03ff0000 	.word	0x03ff0000
    30b8:	00000424 	.word	0x00000424

000030bc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    30bc:	2808      	cmp	r0, #8
    30be:	d803      	bhi.n	30c8 <system_clock_source_enable+0xc>
    30c0:	0080      	lsls	r0, r0, #2
    30c2:	4b25      	ldr	r3, [pc, #148]	; (3158 <system_clock_source_enable+0x9c>)
    30c4:	581b      	ldr	r3, [r3, r0]
    30c6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    30c8:	2017      	movs	r0, #23
    30ca:	e044      	b.n	3156 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    30cc:	4a23      	ldr	r2, [pc, #140]	; (315c <system_clock_source_enable+0xa0>)
    30ce:	6a13      	ldr	r3, [r2, #32]
    30d0:	2102      	movs	r1, #2
    30d2:	430b      	orrs	r3, r1
    30d4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    30d6:	2000      	movs	r0, #0
    30d8:	e03d      	b.n	3156 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    30da:	4a20      	ldr	r2, [pc, #128]	; (315c <system_clock_source_enable+0xa0>)
    30dc:	6993      	ldr	r3, [r2, #24]
    30de:	2102      	movs	r1, #2
    30e0:	430b      	orrs	r3, r1
    30e2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    30e4:	2000      	movs	r0, #0
		break;
    30e6:	e036      	b.n	3156 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    30e8:	4a1c      	ldr	r2, [pc, #112]	; (315c <system_clock_source_enable+0xa0>)
    30ea:	8a13      	ldrh	r3, [r2, #16]
    30ec:	2102      	movs	r1, #2
    30ee:	430b      	orrs	r3, r1
    30f0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    30f2:	2000      	movs	r0, #0
		break;
    30f4:	e02f      	b.n	3156 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    30f6:	4a19      	ldr	r2, [pc, #100]	; (315c <system_clock_source_enable+0xa0>)
    30f8:	8a93      	ldrh	r3, [r2, #20]
    30fa:	2102      	movs	r1, #2
    30fc:	430b      	orrs	r3, r1
    30fe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3100:	2000      	movs	r0, #0
		break;
    3102:	e028      	b.n	3156 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3104:	4916      	ldr	r1, [pc, #88]	; (3160 <system_clock_source_enable+0xa4>)
    3106:	680b      	ldr	r3, [r1, #0]
    3108:	2202      	movs	r2, #2
    310a:	4313      	orrs	r3, r2
    310c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    310e:	4b13      	ldr	r3, [pc, #76]	; (315c <system_clock_source_enable+0xa0>)
    3110:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3112:	0019      	movs	r1, r3
    3114:	320e      	adds	r2, #14
    3116:	68cb      	ldr	r3, [r1, #12]
    3118:	421a      	tst	r2, r3
    311a:	d0fc      	beq.n	3116 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    311c:	4a10      	ldr	r2, [pc, #64]	; (3160 <system_clock_source_enable+0xa4>)
    311e:	6891      	ldr	r1, [r2, #8]
    3120:	4b0e      	ldr	r3, [pc, #56]	; (315c <system_clock_source_enable+0xa0>)
    3122:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3124:	6852      	ldr	r2, [r2, #4]
    3126:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3128:	2200      	movs	r2, #0
    312a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    312c:	0019      	movs	r1, r3
    312e:	3210      	adds	r2, #16
    3130:	68cb      	ldr	r3, [r1, #12]
    3132:	421a      	tst	r2, r3
    3134:	d0fc      	beq.n	3130 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3136:	4b0a      	ldr	r3, [pc, #40]	; (3160 <system_clock_source_enable+0xa4>)
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	b29b      	uxth	r3, r3
    313c:	4a07      	ldr	r2, [pc, #28]	; (315c <system_clock_source_enable+0xa0>)
    313e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3140:	2000      	movs	r0, #0
    3142:	e008      	b.n	3156 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3144:	4905      	ldr	r1, [pc, #20]	; (315c <system_clock_source_enable+0xa0>)
    3146:	2244      	movs	r2, #68	; 0x44
    3148:	5c8b      	ldrb	r3, [r1, r2]
    314a:	2002      	movs	r0, #2
    314c:	4303      	orrs	r3, r0
    314e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3150:	2000      	movs	r0, #0
		break;
    3152:	e000      	b.n	3156 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3154:	2000      	movs	r0, #0
}
    3156:	4770      	bx	lr
    3158:	00007150 	.word	0x00007150
    315c:	40000800 	.word	0x40000800
    3160:	200002a8 	.word	0x200002a8

00003164 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3164:	b5f0      	push	{r4, r5, r6, r7, lr}
    3166:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3168:	22c2      	movs	r2, #194	; 0xc2
    316a:	00d2      	lsls	r2, r2, #3
    316c:	4b45      	ldr	r3, [pc, #276]	; (3284 <system_clock_init+0x120>)
    316e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3170:	4a45      	ldr	r2, [pc, #276]	; (3288 <system_clock_init+0x124>)
    3172:	6853      	ldr	r3, [r2, #4]
    3174:	211e      	movs	r1, #30
    3176:	438b      	bics	r3, r1
    3178:	391a      	subs	r1, #26
    317a:	430b      	orrs	r3, r1
    317c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    317e:	2202      	movs	r2, #2
    3180:	ab01      	add	r3, sp, #4
    3182:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3184:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3186:	4d41      	ldr	r5, [pc, #260]	; (328c <system_clock_init+0x128>)
    3188:	b2e0      	uxtb	r0, r4
    318a:	a901      	add	r1, sp, #4
    318c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    318e:	3401      	adds	r4, #1
    3190:	2c25      	cmp	r4, #37	; 0x25
    3192:	d1f9      	bne.n	3188 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3194:	a80a      	add	r0, sp, #40	; 0x28
    3196:	2300      	movs	r3, #0
    3198:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    319a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    319c:	2280      	movs	r2, #128	; 0x80
    319e:	0212      	lsls	r2, r2, #8
    31a0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    31a2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    31a4:	2201      	movs	r2, #1
    31a6:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    31a8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    31aa:	2106      	movs	r1, #6
    31ac:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    31ae:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    31b0:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    31b2:	4b37      	ldr	r3, [pc, #220]	; (3290 <system_clock_init+0x12c>)
    31b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    31b6:	2005      	movs	r0, #5
    31b8:	4b36      	ldr	r3, [pc, #216]	; (3294 <system_clock_init+0x130>)
    31ba:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    31bc:	4931      	ldr	r1, [pc, #196]	; (3284 <system_clock_init+0x120>)
    31be:	2202      	movs	r2, #2
    31c0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    31c2:	421a      	tst	r2, r3
    31c4:	d0fc      	beq.n	31c0 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    31c6:	ab05      	add	r3, sp, #20
    31c8:	2100      	movs	r1, #0
    31ca:	2200      	movs	r2, #0
    31cc:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    31ce:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    31d0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    31d2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    31d4:	313f      	adds	r1, #63	; 0x3f
    31d6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    31d8:	393b      	subs	r1, #59	; 0x3b
    31da:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    31dc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    31de:	4b2e      	ldr	r3, [pc, #184]	; (3298 <system_clock_init+0x134>)
    31e0:	681b      	ldr	r3, [r3, #0]
    31e2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    31e4:	2b3f      	cmp	r3, #63	; 0x3f
    31e6:	d04b      	beq.n	3280 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    31e8:	a805      	add	r0, sp, #20
    31ea:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    31ec:	23b7      	movs	r3, #183	; 0xb7
    31ee:	00db      	lsls	r3, r3, #3
    31f0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    31f2:	2303      	movs	r3, #3
    31f4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    31f6:	331c      	adds	r3, #28
    31f8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    31fa:	4b28      	ldr	r3, [pc, #160]	; (329c <system_clock_init+0x138>)
    31fc:	4798      	blx	r3
	config->on_demand       = true;
    31fe:	a804      	add	r0, sp, #16
    3200:	2501      	movs	r5, #1
    3202:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3204:	2600      	movs	r6, #0
    3206:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3208:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    320a:	4b25      	ldr	r3, [pc, #148]	; (32a0 <system_clock_init+0x13c>)
    320c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    320e:	2006      	movs	r0, #6
    3210:	4f20      	ldr	r7, [pc, #128]	; (3294 <system_clock_init+0x130>)
    3212:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3214:	4b23      	ldr	r3, [pc, #140]	; (32a4 <system_clock_init+0x140>)
    3216:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3218:	ac01      	add	r4, sp, #4
    321a:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    321c:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    321e:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    3220:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3222:	2305      	movs	r3, #5
    3224:	7023      	strb	r3, [r4, #0]
    3226:	0021      	movs	r1, r4
    3228:	2001      	movs	r0, #1
    322a:	4b1f      	ldr	r3, [pc, #124]	; (32a8 <system_clock_init+0x144>)
    322c:	4798      	blx	r3
    322e:	2001      	movs	r0, #1
    3230:	4b1e      	ldr	r3, [pc, #120]	; (32ac <system_clock_init+0x148>)
    3232:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3234:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3236:	0021      	movs	r1, r4
    3238:	2000      	movs	r0, #0
    323a:	4b14      	ldr	r3, [pc, #80]	; (328c <system_clock_init+0x128>)
    323c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    323e:	2000      	movs	r0, #0
    3240:	4b1b      	ldr	r3, [pc, #108]	; (32b0 <system_clock_init+0x14c>)
    3242:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3244:	2007      	movs	r0, #7
    3246:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3248:	490e      	ldr	r1, [pc, #56]	; (3284 <system_clock_init+0x120>)
    324a:	22d0      	movs	r2, #208	; 0xd0
    324c:	68cb      	ldr	r3, [r1, #12]
    324e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3250:	2bd0      	cmp	r3, #208	; 0xd0
    3252:	d1fb      	bne.n	324c <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    3254:	4a17      	ldr	r2, [pc, #92]	; (32b4 <system_clock_init+0x150>)
    3256:	2300      	movs	r3, #0
    3258:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    325a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    325c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    325e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3260:	a901      	add	r1, sp, #4
    3262:	2201      	movs	r2, #1
    3264:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3266:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    3268:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    326a:	3307      	adds	r3, #7
    326c:	700b      	strb	r3, [r1, #0]
    326e:	720a      	strb	r2, [r1, #8]
    3270:	2000      	movs	r0, #0
    3272:	4b0d      	ldr	r3, [pc, #52]	; (32a8 <system_clock_init+0x144>)
    3274:	4798      	blx	r3
    3276:	2000      	movs	r0, #0
    3278:	4b0c      	ldr	r3, [pc, #48]	; (32ac <system_clock_init+0x148>)
    327a:	4798      	blx	r3
#endif
}
    327c:	b00f      	add	sp, #60	; 0x3c
    327e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3280:	3b20      	subs	r3, #32
    3282:	e7b1      	b.n	31e8 <system_clock_init+0x84>
    3284:	40000800 	.word	0x40000800
    3288:	41004000 	.word	0x41004000
    328c:	000034f1 	.word	0x000034f1
    3290:	00002f85 	.word	0x00002f85
    3294:	000030bd 	.word	0x000030bd
    3298:	00806024 	.word	0x00806024
    329c:	0000303d 	.word	0x0000303d
    32a0:	00002f49 	.word	0x00002f49
    32a4:	000032b9 	.word	0x000032b9
    32a8:	000032dd 	.word	0x000032dd
    32ac:	00003395 	.word	0x00003395
    32b0:	00003465 	.word	0x00003465
    32b4:	40000400 	.word	0x40000400

000032b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    32b8:	4a06      	ldr	r2, [pc, #24]	; (32d4 <system_gclk_init+0x1c>)
    32ba:	6993      	ldr	r3, [r2, #24]
    32bc:	2108      	movs	r1, #8
    32be:	430b      	orrs	r3, r1
    32c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    32c2:	2201      	movs	r2, #1
    32c4:	4b04      	ldr	r3, [pc, #16]	; (32d8 <system_gclk_init+0x20>)
    32c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    32c8:	0019      	movs	r1, r3
    32ca:	780b      	ldrb	r3, [r1, #0]
    32cc:	4213      	tst	r3, r2
    32ce:	d1fc      	bne.n	32ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    32d0:	4770      	bx	lr
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	40000400 	.word	0x40000400
    32d8:	40000c00 	.word	0x40000c00

000032dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    32dc:	b570      	push	{r4, r5, r6, lr}
    32de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    32e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    32e2:	780d      	ldrb	r5, [r1, #0]
    32e4:	022d      	lsls	r5, r5, #8
    32e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    32e8:	784b      	ldrb	r3, [r1, #1]
    32ea:	2b00      	cmp	r3, #0
    32ec:	d002      	beq.n	32f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    32ee:	2380      	movs	r3, #128	; 0x80
    32f0:	02db      	lsls	r3, r3, #11
    32f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    32f4:	7a4b      	ldrb	r3, [r1, #9]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d002      	beq.n	3300 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    32fa:	2380      	movs	r3, #128	; 0x80
    32fc:	031b      	lsls	r3, r3, #12
    32fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3300:	6848      	ldr	r0, [r1, #4]
    3302:	2801      	cmp	r0, #1
    3304:	d910      	bls.n	3328 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3306:	1e43      	subs	r3, r0, #1
    3308:	4218      	tst	r0, r3
    330a:	d134      	bne.n	3376 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    330c:	2802      	cmp	r0, #2
    330e:	d930      	bls.n	3372 <system_gclk_gen_set_config+0x96>
    3310:	2302      	movs	r3, #2
    3312:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3314:	3201      	adds	r2, #1
						mask <<= 1) {
    3316:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3318:	4298      	cmp	r0, r3
    331a:	d8fb      	bhi.n	3314 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    331c:	0212      	lsls	r2, r2, #8
    331e:	4332      	orrs	r2, r6
    3320:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3322:	2380      	movs	r3, #128	; 0x80
    3324:	035b      	lsls	r3, r3, #13
    3326:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3328:	7a0b      	ldrb	r3, [r1, #8]
    332a:	2b00      	cmp	r3, #0
    332c:	d002      	beq.n	3334 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    332e:	2380      	movs	r3, #128	; 0x80
    3330:	039b      	lsls	r3, r3, #14
    3332:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3334:	4a13      	ldr	r2, [pc, #76]	; (3384 <system_gclk_gen_set_config+0xa8>)
    3336:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3338:	b25b      	sxtb	r3, r3
    333a:	2b00      	cmp	r3, #0
    333c:	dbfb      	blt.n	3336 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    333e:	4b12      	ldr	r3, [pc, #72]	; (3388 <system_gclk_gen_set_config+0xac>)
    3340:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3342:	4b12      	ldr	r3, [pc, #72]	; (338c <system_gclk_gen_set_config+0xb0>)
    3344:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3346:	4a0f      	ldr	r2, [pc, #60]	; (3384 <system_gclk_gen_set_config+0xa8>)
    3348:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    334a:	b25b      	sxtb	r3, r3
    334c:	2b00      	cmp	r3, #0
    334e:	dbfb      	blt.n	3348 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3350:	4b0c      	ldr	r3, [pc, #48]	; (3384 <system_gclk_gen_set_config+0xa8>)
    3352:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3354:	001a      	movs	r2, r3
    3356:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3358:	b25b      	sxtb	r3, r3
    335a:	2b00      	cmp	r3, #0
    335c:	dbfb      	blt.n	3356 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    335e:	4a09      	ldr	r2, [pc, #36]	; (3384 <system_gclk_gen_set_config+0xa8>)
    3360:	6853      	ldr	r3, [r2, #4]
    3362:	2180      	movs	r1, #128	; 0x80
    3364:	0249      	lsls	r1, r1, #9
    3366:	400b      	ands	r3, r1
    3368:	431d      	orrs	r5, r3
    336a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    336c:	4b08      	ldr	r3, [pc, #32]	; (3390 <system_gclk_gen_set_config+0xb4>)
    336e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3370:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3372:	2200      	movs	r2, #0
    3374:	e7d2      	b.n	331c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3376:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3378:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    337a:	2380      	movs	r3, #128	; 0x80
    337c:	029b      	lsls	r3, r3, #10
    337e:	431d      	orrs	r5, r3
    3380:	e7d2      	b.n	3328 <system_gclk_gen_set_config+0x4c>
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	40000c00 	.word	0x40000c00
    3388:	00001a51 	.word	0x00001a51
    338c:	40000c08 	.word	0x40000c08
    3390:	00001a91 	.word	0x00001a91

00003394 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3394:	b510      	push	{r4, lr}
    3396:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3398:	4a0b      	ldr	r2, [pc, #44]	; (33c8 <system_gclk_gen_enable+0x34>)
    339a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    339c:	b25b      	sxtb	r3, r3
    339e:	2b00      	cmp	r3, #0
    33a0:	dbfb      	blt.n	339a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    33a2:	4b0a      	ldr	r3, [pc, #40]	; (33cc <system_gclk_gen_enable+0x38>)
    33a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33a6:	4b0a      	ldr	r3, [pc, #40]	; (33d0 <system_gclk_gen_enable+0x3c>)
    33a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33aa:	4a07      	ldr	r2, [pc, #28]	; (33c8 <system_gclk_gen_enable+0x34>)
    33ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33ae:	b25b      	sxtb	r3, r3
    33b0:	2b00      	cmp	r3, #0
    33b2:	dbfb      	blt.n	33ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    33b4:	4a04      	ldr	r2, [pc, #16]	; (33c8 <system_gclk_gen_enable+0x34>)
    33b6:	6851      	ldr	r1, [r2, #4]
    33b8:	2380      	movs	r3, #128	; 0x80
    33ba:	025b      	lsls	r3, r3, #9
    33bc:	430b      	orrs	r3, r1
    33be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    33c0:	4b04      	ldr	r3, [pc, #16]	; (33d4 <system_gclk_gen_enable+0x40>)
    33c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33c4:	bd10      	pop	{r4, pc}
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	40000c00 	.word	0x40000c00
    33cc:	00001a51 	.word	0x00001a51
    33d0:	40000c04 	.word	0x40000c04
    33d4:	00001a91 	.word	0x00001a91

000033d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    33d8:	b570      	push	{r4, r5, r6, lr}
    33da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33dc:	4a1a      	ldr	r2, [pc, #104]	; (3448 <system_gclk_gen_get_hz+0x70>)
    33de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33e0:	b25b      	sxtb	r3, r3
    33e2:	2b00      	cmp	r3, #0
    33e4:	dbfb      	blt.n	33de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    33e6:	4b19      	ldr	r3, [pc, #100]	; (344c <system_gclk_gen_get_hz+0x74>)
    33e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33ea:	4b19      	ldr	r3, [pc, #100]	; (3450 <system_gclk_gen_get_hz+0x78>)
    33ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33ee:	4a16      	ldr	r2, [pc, #88]	; (3448 <system_gclk_gen_get_hz+0x70>)
    33f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33f2:	b25b      	sxtb	r3, r3
    33f4:	2b00      	cmp	r3, #0
    33f6:	dbfb      	blt.n	33f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    33f8:	4e13      	ldr	r6, [pc, #76]	; (3448 <system_gclk_gen_get_hz+0x70>)
    33fa:	6870      	ldr	r0, [r6, #4]
    33fc:	04c0      	lsls	r0, r0, #19
    33fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3400:	4b14      	ldr	r3, [pc, #80]	; (3454 <system_gclk_gen_get_hz+0x7c>)
    3402:	4798      	blx	r3
    3404:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3406:	4b12      	ldr	r3, [pc, #72]	; (3450 <system_gclk_gen_get_hz+0x78>)
    3408:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    340a:	6876      	ldr	r6, [r6, #4]
    340c:	02f6      	lsls	r6, r6, #11
    340e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3410:	4b11      	ldr	r3, [pc, #68]	; (3458 <system_gclk_gen_get_hz+0x80>)
    3412:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3414:	4a0c      	ldr	r2, [pc, #48]	; (3448 <system_gclk_gen_get_hz+0x70>)
    3416:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3418:	b25b      	sxtb	r3, r3
    341a:	2b00      	cmp	r3, #0
    341c:	dbfb      	blt.n	3416 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    341e:	4b0a      	ldr	r3, [pc, #40]	; (3448 <system_gclk_gen_get_hz+0x70>)
    3420:	689c      	ldr	r4, [r3, #8]
    3422:	0224      	lsls	r4, r4, #8
    3424:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3426:	4b0d      	ldr	r3, [pc, #52]	; (345c <system_gclk_gen_get_hz+0x84>)
    3428:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    342a:	2e00      	cmp	r6, #0
    342c:	d107      	bne.n	343e <system_gclk_gen_get_hz+0x66>
    342e:	2c01      	cmp	r4, #1
    3430:	d907      	bls.n	3442 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3432:	0021      	movs	r1, r4
    3434:	0028      	movs	r0, r5
    3436:	4b0a      	ldr	r3, [pc, #40]	; (3460 <system_gclk_gen_get_hz+0x88>)
    3438:	4798      	blx	r3
    343a:	0005      	movs	r5, r0
    343c:	e001      	b.n	3442 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    343e:	3401      	adds	r4, #1
    3440:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3442:	0028      	movs	r0, r5
    3444:	bd70      	pop	{r4, r5, r6, pc}
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	40000c00 	.word	0x40000c00
    344c:	00001a51 	.word	0x00001a51
    3450:	40000c04 	.word	0x40000c04
    3454:	00002eb5 	.word	0x00002eb5
    3458:	40000c08 	.word	0x40000c08
    345c:	00001a91 	.word	0x00001a91
    3460:	00005af9 	.word	0x00005af9

00003464 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3464:	b510      	push	{r4, lr}
    3466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3468:	4b06      	ldr	r3, [pc, #24]	; (3484 <system_gclk_chan_enable+0x20>)
    346a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    346c:	4b06      	ldr	r3, [pc, #24]	; (3488 <system_gclk_chan_enable+0x24>)
    346e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3470:	4a06      	ldr	r2, [pc, #24]	; (348c <system_gclk_chan_enable+0x28>)
    3472:	8853      	ldrh	r3, [r2, #2]
    3474:	2180      	movs	r1, #128	; 0x80
    3476:	01c9      	lsls	r1, r1, #7
    3478:	430b      	orrs	r3, r1
    347a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    347c:	4b04      	ldr	r3, [pc, #16]	; (3490 <system_gclk_chan_enable+0x2c>)
    347e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3480:	bd10      	pop	{r4, pc}
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	00001a51 	.word	0x00001a51
    3488:	40000c02 	.word	0x40000c02
    348c:	40000c00 	.word	0x40000c00
    3490:	00001a91 	.word	0x00001a91

00003494 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3494:	b510      	push	{r4, lr}
    3496:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3498:	4b0f      	ldr	r3, [pc, #60]	; (34d8 <system_gclk_chan_disable+0x44>)
    349a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    349c:	4b0f      	ldr	r3, [pc, #60]	; (34dc <system_gclk_chan_disable+0x48>)
    349e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    34a0:	4a0f      	ldr	r2, [pc, #60]	; (34e0 <system_gclk_chan_disable+0x4c>)
    34a2:	8853      	ldrh	r3, [r2, #2]
    34a4:	051b      	lsls	r3, r3, #20
    34a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    34a8:	8853      	ldrh	r3, [r2, #2]
    34aa:	490e      	ldr	r1, [pc, #56]	; (34e4 <system_gclk_chan_disable+0x50>)
    34ac:	400b      	ands	r3, r1
    34ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    34b0:	8853      	ldrh	r3, [r2, #2]
    34b2:	490d      	ldr	r1, [pc, #52]	; (34e8 <system_gclk_chan_disable+0x54>)
    34b4:	400b      	ands	r3, r1
    34b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    34b8:	0011      	movs	r1, r2
    34ba:	2280      	movs	r2, #128	; 0x80
    34bc:	01d2      	lsls	r2, r2, #7
    34be:	884b      	ldrh	r3, [r1, #2]
    34c0:	4213      	tst	r3, r2
    34c2:	d1fc      	bne.n	34be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    34c4:	4906      	ldr	r1, [pc, #24]	; (34e0 <system_gclk_chan_disable+0x4c>)
    34c6:	884a      	ldrh	r2, [r1, #2]
    34c8:	0203      	lsls	r3, r0, #8
    34ca:	4806      	ldr	r0, [pc, #24]	; (34e4 <system_gclk_chan_disable+0x50>)
    34cc:	4002      	ands	r2, r0
    34ce:	4313      	orrs	r3, r2
    34d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    34d2:	4b06      	ldr	r3, [pc, #24]	; (34ec <system_gclk_chan_disable+0x58>)
    34d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34d6:	bd10      	pop	{r4, pc}
    34d8:	00001a51 	.word	0x00001a51
    34dc:	40000c02 	.word	0x40000c02
    34e0:	40000c00 	.word	0x40000c00
    34e4:	fffff0ff 	.word	0xfffff0ff
    34e8:	ffffbfff 	.word	0xffffbfff
    34ec:	00001a91 	.word	0x00001a91

000034f0 <system_gclk_chan_set_config>:
{
    34f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    34f2:	780c      	ldrb	r4, [r1, #0]
    34f4:	0224      	lsls	r4, r4, #8
    34f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    34f8:	4b02      	ldr	r3, [pc, #8]	; (3504 <system_gclk_chan_set_config+0x14>)
    34fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    34fc:	b2a4      	uxth	r4, r4
    34fe:	4b02      	ldr	r3, [pc, #8]	; (3508 <system_gclk_chan_set_config+0x18>)
    3500:	805c      	strh	r4, [r3, #2]
}
    3502:	bd10      	pop	{r4, pc}
    3504:	00003495 	.word	0x00003495
    3508:	40000c00 	.word	0x40000c00

0000350c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    350c:	b510      	push	{r4, lr}
    350e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3510:	4b06      	ldr	r3, [pc, #24]	; (352c <system_gclk_chan_get_hz+0x20>)
    3512:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3514:	4b06      	ldr	r3, [pc, #24]	; (3530 <system_gclk_chan_get_hz+0x24>)
    3516:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3518:	4b06      	ldr	r3, [pc, #24]	; (3534 <system_gclk_chan_get_hz+0x28>)
    351a:	885c      	ldrh	r4, [r3, #2]
    351c:	0524      	lsls	r4, r4, #20
    351e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3520:	4b05      	ldr	r3, [pc, #20]	; (3538 <system_gclk_chan_get_hz+0x2c>)
    3522:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3524:	0020      	movs	r0, r4
    3526:	4b05      	ldr	r3, [pc, #20]	; (353c <system_gclk_chan_get_hz+0x30>)
    3528:	4798      	blx	r3
}
    352a:	bd10      	pop	{r4, pc}
    352c:	00001a51 	.word	0x00001a51
    3530:	40000c02 	.word	0x40000c02
    3534:	40000c00 	.word	0x40000c00
    3538:	00001a91 	.word	0x00001a91
    353c:	000033d9 	.word	0x000033d9

00003540 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3540:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3542:	78d3      	ldrb	r3, [r2, #3]
    3544:	2b00      	cmp	r3, #0
    3546:	d135      	bne.n	35b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3548:	7813      	ldrb	r3, [r2, #0]
    354a:	2b80      	cmp	r3, #128	; 0x80
    354c:	d029      	beq.n	35a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    354e:	061b      	lsls	r3, r3, #24
    3550:	2480      	movs	r4, #128	; 0x80
    3552:	0264      	lsls	r4, r4, #9
    3554:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3556:	7854      	ldrb	r4, [r2, #1]
    3558:	2502      	movs	r5, #2
    355a:	43ac      	bics	r4, r5
    355c:	d106      	bne.n	356c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    355e:	7894      	ldrb	r4, [r2, #2]
    3560:	2c00      	cmp	r4, #0
    3562:	d120      	bne.n	35a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3564:	2480      	movs	r4, #128	; 0x80
    3566:	02a4      	lsls	r4, r4, #10
    3568:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    356a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    356c:	7854      	ldrb	r4, [r2, #1]
    356e:	3c01      	subs	r4, #1
    3570:	2c01      	cmp	r4, #1
    3572:	d91c      	bls.n	35ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3574:	040d      	lsls	r5, r1, #16
    3576:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3578:	24a0      	movs	r4, #160	; 0xa0
    357a:	05e4      	lsls	r4, r4, #23
    357c:	432c      	orrs	r4, r5
    357e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3580:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3582:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3584:	24d0      	movs	r4, #208	; 0xd0
    3586:	0624      	lsls	r4, r4, #24
    3588:	432c      	orrs	r4, r5
    358a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    358c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    358e:	78d4      	ldrb	r4, [r2, #3]
    3590:	2c00      	cmp	r4, #0
    3592:	d122      	bne.n	35da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3594:	035b      	lsls	r3, r3, #13
    3596:	d51c      	bpl.n	35d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3598:	7893      	ldrb	r3, [r2, #2]
    359a:	2b01      	cmp	r3, #1
    359c:	d01e      	beq.n	35dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    359e:	6141      	str	r1, [r0, #20]
    35a0:	e017      	b.n	35d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    35a2:	2300      	movs	r3, #0
    35a4:	e7d7      	b.n	3556 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    35a6:	24c0      	movs	r4, #192	; 0xc0
    35a8:	02e4      	lsls	r4, r4, #11
    35aa:	4323      	orrs	r3, r4
    35ac:	e7dd      	b.n	356a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    35ae:	4c0d      	ldr	r4, [pc, #52]	; (35e4 <_system_pinmux_config+0xa4>)
    35b0:	4023      	ands	r3, r4
    35b2:	e7df      	b.n	3574 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    35b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35b6:	040c      	lsls	r4, r1, #16
    35b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35ba:	23a0      	movs	r3, #160	; 0xa0
    35bc:	05db      	lsls	r3, r3, #23
    35be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35c4:	23d0      	movs	r3, #208	; 0xd0
    35c6:	061b      	lsls	r3, r3, #24
    35c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    35cc:	78d3      	ldrb	r3, [r2, #3]
    35ce:	2b00      	cmp	r3, #0
    35d0:	d103      	bne.n	35da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    35d2:	7853      	ldrb	r3, [r2, #1]
    35d4:	3b01      	subs	r3, #1
    35d6:	2b01      	cmp	r3, #1
    35d8:	d902      	bls.n	35e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    35da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    35dc:	6181      	str	r1, [r0, #24]
    35de:	e7f8      	b.n	35d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    35e0:	6081      	str	r1, [r0, #8]
}
    35e2:	e7fa      	b.n	35da <_system_pinmux_config+0x9a>
    35e4:	fffbffff 	.word	0xfffbffff

000035e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    35e8:	b510      	push	{r4, lr}
    35ea:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    35ec:	09c1      	lsrs	r1, r0, #7
		return NULL;
    35ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    35f0:	2900      	cmp	r1, #0
    35f2:	d104      	bne.n	35fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    35f4:	0943      	lsrs	r3, r0, #5
    35f6:	01db      	lsls	r3, r3, #7
    35f8:	4905      	ldr	r1, [pc, #20]	; (3610 <system_pinmux_pin_set_config+0x28>)
    35fa:	468c      	mov	ip, r1
    35fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    35fe:	241f      	movs	r4, #31
    3600:	4020      	ands	r0, r4
    3602:	2101      	movs	r1, #1
    3604:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3606:	0018      	movs	r0, r3
    3608:	4b02      	ldr	r3, [pc, #8]	; (3614 <system_pinmux_pin_set_config+0x2c>)
    360a:	4798      	blx	r3
}
    360c:	bd10      	pop	{r4, pc}
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	41004400 	.word	0x41004400
    3614:	00003541 	.word	0x00003541

00003618 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3618:	4770      	bx	lr
	...

0000361c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    361c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <system_init+0x18>)
    3620:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3622:	4b05      	ldr	r3, [pc, #20]	; (3638 <system_init+0x1c>)
    3624:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3626:	4b05      	ldr	r3, [pc, #20]	; (363c <system_init+0x20>)
    3628:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    362a:	4b05      	ldr	r3, [pc, #20]	; (3640 <system_init+0x24>)
    362c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    362e:	4b05      	ldr	r3, [pc, #20]	; (3644 <system_init+0x28>)
    3630:	4798      	blx	r3
}
    3632:	bd10      	pop	{r4, pc}
    3634:	00003165 	.word	0x00003165
    3638:	00000259 	.word	0x00000259
    363c:	00003619 	.word	0x00003619
    3640:	00003619 	.word	0x00003619
    3644:	00003619 	.word	0x00003619

00003648 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3648:	e7fe      	b.n	3648 <Dummy_Handler>
	...

0000364c <Reset_Handler>:
{
    364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    364e:	4a2a      	ldr	r2, [pc, #168]	; (36f8 <Reset_Handler+0xac>)
    3650:	4b2a      	ldr	r3, [pc, #168]	; (36fc <Reset_Handler+0xb0>)
    3652:	429a      	cmp	r2, r3
    3654:	d011      	beq.n	367a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3656:	001a      	movs	r2, r3
    3658:	4b29      	ldr	r3, [pc, #164]	; (3700 <Reset_Handler+0xb4>)
    365a:	429a      	cmp	r2, r3
    365c:	d20d      	bcs.n	367a <Reset_Handler+0x2e>
    365e:	4a29      	ldr	r2, [pc, #164]	; (3704 <Reset_Handler+0xb8>)
    3660:	3303      	adds	r3, #3
    3662:	1a9b      	subs	r3, r3, r2
    3664:	089b      	lsrs	r3, r3, #2
    3666:	3301      	adds	r3, #1
    3668:	009b      	lsls	r3, r3, #2
    366a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    366c:	4823      	ldr	r0, [pc, #140]	; (36fc <Reset_Handler+0xb0>)
    366e:	4922      	ldr	r1, [pc, #136]	; (36f8 <Reset_Handler+0xac>)
    3670:	588c      	ldr	r4, [r1, r2]
    3672:	5084      	str	r4, [r0, r2]
    3674:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3676:	429a      	cmp	r2, r3
    3678:	d1fa      	bne.n	3670 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    367a:	4a23      	ldr	r2, [pc, #140]	; (3708 <Reset_Handler+0xbc>)
    367c:	4b23      	ldr	r3, [pc, #140]	; (370c <Reset_Handler+0xc0>)
    367e:	429a      	cmp	r2, r3
    3680:	d20a      	bcs.n	3698 <Reset_Handler+0x4c>
    3682:	43d3      	mvns	r3, r2
    3684:	4921      	ldr	r1, [pc, #132]	; (370c <Reset_Handler+0xc0>)
    3686:	185b      	adds	r3, r3, r1
    3688:	2103      	movs	r1, #3
    368a:	438b      	bics	r3, r1
    368c:	3304      	adds	r3, #4
    368e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3690:	2100      	movs	r1, #0
    3692:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3694:	4293      	cmp	r3, r2
    3696:	d1fc      	bne.n	3692 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3698:	4a1d      	ldr	r2, [pc, #116]	; (3710 <Reset_Handler+0xc4>)
    369a:	21ff      	movs	r1, #255	; 0xff
    369c:	4b1d      	ldr	r3, [pc, #116]	; (3714 <Reset_Handler+0xc8>)
    369e:	438b      	bics	r3, r1
    36a0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    36a2:	39fd      	subs	r1, #253	; 0xfd
    36a4:	2390      	movs	r3, #144	; 0x90
    36a6:	005b      	lsls	r3, r3, #1
    36a8:	4a1b      	ldr	r2, [pc, #108]	; (3718 <Reset_Handler+0xcc>)
    36aa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    36ac:	4a1b      	ldr	r2, [pc, #108]	; (371c <Reset_Handler+0xd0>)
    36ae:	78d3      	ldrb	r3, [r2, #3]
    36b0:	2503      	movs	r5, #3
    36b2:	43ab      	bics	r3, r5
    36b4:	2402      	movs	r4, #2
    36b6:	4323      	orrs	r3, r4
    36b8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    36ba:	78d3      	ldrb	r3, [r2, #3]
    36bc:	270c      	movs	r7, #12
    36be:	43bb      	bics	r3, r7
    36c0:	2608      	movs	r6, #8
    36c2:	4333      	orrs	r3, r6
    36c4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    36c6:	4b16      	ldr	r3, [pc, #88]	; (3720 <Reset_Handler+0xd4>)
    36c8:	7b98      	ldrb	r0, [r3, #14]
    36ca:	2230      	movs	r2, #48	; 0x30
    36cc:	4390      	bics	r0, r2
    36ce:	2220      	movs	r2, #32
    36d0:	4310      	orrs	r0, r2
    36d2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    36d4:	7b99      	ldrb	r1, [r3, #14]
    36d6:	43b9      	bics	r1, r7
    36d8:	4331      	orrs	r1, r6
    36da:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    36dc:	7b9a      	ldrb	r2, [r3, #14]
    36de:	43aa      	bics	r2, r5
    36e0:	4322      	orrs	r2, r4
    36e2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    36e4:	4a0f      	ldr	r2, [pc, #60]	; (3724 <Reset_Handler+0xd8>)
    36e6:	6853      	ldr	r3, [r2, #4]
    36e8:	2180      	movs	r1, #128	; 0x80
    36ea:	430b      	orrs	r3, r1
    36ec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    36ee:	4b0e      	ldr	r3, [pc, #56]	; (3728 <Reset_Handler+0xdc>)
    36f0:	4798      	blx	r3
        main();
    36f2:	4b0e      	ldr	r3, [pc, #56]	; (372c <Reset_Handler+0xe0>)
    36f4:	4798      	blx	r3
    36f6:	e7fe      	b.n	36f6 <Reset_Handler+0xaa>
    36f8:	00007d64 	.word	0x00007d64
    36fc:	20000000 	.word	0x20000000
    3700:	200001dc 	.word	0x200001dc
    3704:	20000004 	.word	0x20000004
    3708:	200001dc 	.word	0x200001dc
    370c:	20000b6c 	.word	0x20000b6c
    3710:	e000ed00 	.word	0xe000ed00
    3714:	00000000 	.word	0x00000000
    3718:	41007000 	.word	0x41007000
    371c:	41005000 	.word	0x41005000
    3720:	41004800 	.word	0x41004800
    3724:	41004000 	.word	0x41004000
    3728:	00005e39 	.word	0x00005e39
    372c:	000057c9 	.word	0x000057c9

00003730 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	46c6      	mov	lr, r8
    3734:	b500      	push	{lr}
    3736:	000c      	movs	r4, r1
    3738:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    373a:	2800      	cmp	r0, #0
    373c:	d10f      	bne.n	375e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    373e:	2a00      	cmp	r2, #0
    3740:	dd11      	ble.n	3766 <_read+0x36>
    3742:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3744:	4e09      	ldr	r6, [pc, #36]	; (376c <_read+0x3c>)
    3746:	4d0a      	ldr	r5, [pc, #40]	; (3770 <_read+0x40>)
    3748:	6830      	ldr	r0, [r6, #0]
    374a:	0021      	movs	r1, r4
    374c:	682b      	ldr	r3, [r5, #0]
    374e:	4798      	blx	r3
		ptr++;
    3750:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3752:	42bc      	cmp	r4, r7
    3754:	d1f8      	bne.n	3748 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3756:	4640      	mov	r0, r8
    3758:	bc04      	pop	{r2}
    375a:	4690      	mov	r8, r2
    375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    375e:	2301      	movs	r3, #1
    3760:	425b      	negs	r3, r3
    3762:	4698      	mov	r8, r3
    3764:	e7f7      	b.n	3756 <_read+0x26>
	for (; len > 0; --len) {
    3766:	4680      	mov	r8, r0
    3768:	e7f5      	b.n	3756 <_read+0x26>
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	20000b5c 	.word	0x20000b5c
    3770:	20000b54 	.word	0x20000b54

00003774 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3774:	b5f0      	push	{r4, r5, r6, r7, lr}
    3776:	46c6      	mov	lr, r8
    3778:	b500      	push	{lr}
    377a:	000e      	movs	r6, r1
    377c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    377e:	3801      	subs	r0, #1
    3780:	2802      	cmp	r0, #2
    3782:	d810      	bhi.n	37a6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3784:	2a00      	cmp	r2, #0
    3786:	d011      	beq.n	37ac <_write+0x38>
    3788:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    378a:	4b0c      	ldr	r3, [pc, #48]	; (37bc <_write+0x48>)
    378c:	4698      	mov	r8, r3
    378e:	4f0c      	ldr	r7, [pc, #48]	; (37c0 <_write+0x4c>)
    3790:	4643      	mov	r3, r8
    3792:	6818      	ldr	r0, [r3, #0]
    3794:	5d31      	ldrb	r1, [r6, r4]
    3796:	683b      	ldr	r3, [r7, #0]
    3798:	4798      	blx	r3
    379a:	2800      	cmp	r0, #0
    379c:	db08      	blt.n	37b0 <_write+0x3c>
			return -1;
		}
		++nChars;
    379e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    37a0:	42a5      	cmp	r5, r4
    37a2:	d1f5      	bne.n	3790 <_write+0x1c>
    37a4:	e006      	b.n	37b4 <_write+0x40>
		return -1;
    37a6:	2401      	movs	r4, #1
    37a8:	4264      	negs	r4, r4
    37aa:	e003      	b.n	37b4 <_write+0x40>
	for (; len != 0; --len) {
    37ac:	0014      	movs	r4, r2
    37ae:	e001      	b.n	37b4 <_write+0x40>
			return -1;
    37b0:	2401      	movs	r4, #1
    37b2:	4264      	negs	r4, r4
	}
	return nChars;
}
    37b4:	0020      	movs	r0, r4
    37b6:	bc04      	pop	{r2}
    37b8:	4690      	mov	r8, r2
    37ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37bc:	20000b5c 	.word	0x20000b5c
    37c0:	20000b58 	.word	0x20000b58

000037c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    37c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    37c6:	4a06      	ldr	r2, [pc, #24]	; (37e0 <_sbrk+0x1c>)
    37c8:	6812      	ldr	r2, [r2, #0]
    37ca:	2a00      	cmp	r2, #0
    37cc:	d004      	beq.n	37d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    37ce:	4a04      	ldr	r2, [pc, #16]	; (37e0 <_sbrk+0x1c>)
    37d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    37d2:	18c3      	adds	r3, r0, r3
    37d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    37d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    37d8:	4902      	ldr	r1, [pc, #8]	; (37e4 <_sbrk+0x20>)
    37da:	4a01      	ldr	r2, [pc, #4]	; (37e0 <_sbrk+0x1c>)
    37dc:	6011      	str	r1, [r2, #0]
    37de:	e7f6      	b.n	37ce <_sbrk+0xa>
    37e0:	200002c0 	.word	0x200002c0
    37e4:	20002b70 	.word	0x20002b70

000037e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    37e8:	2001      	movs	r0, #1
    37ea:	4240      	negs	r0, r0
    37ec:	4770      	bx	lr

000037ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    37ee:	2380      	movs	r3, #128	; 0x80
    37f0:	019b      	lsls	r3, r3, #6
    37f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    37f4:	2000      	movs	r0, #0
    37f6:	4770      	bx	lr

000037f8 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    37f8:	2000      	movs	r0, #0
    37fa:	4770      	bx	lr

000037fc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    37fc:	b530      	push	{r4, r5, lr}
    37fe:	b087      	sub	sp, #28
    3800:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3802:	aa01      	add	r2, sp, #4
    3804:	23a0      	movs	r3, #160	; 0xa0
    3806:	011b      	lsls	r3, r3, #4
    3808:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    380a:	2300      	movs	r3, #0
    380c:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    380e:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3810:	21fa      	movs	r1, #250	; 0xfa
    3812:	00c9      	lsls	r1, r1, #3
    3814:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3816:	2101      	movs	r1, #1
    3818:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    381a:	2004      	movs	r0, #4
    381c:	7210      	strb	r0, [r2, #8]
    381e:	7253      	strb	r3, [r2, #9]
    3820:	7293      	strb	r3, [r2, #10]
    3822:	72d3      	strb	r3, [r2, #11]
    3824:	7311      	strb	r1, [r2, #12]
    3826:	7351      	strb	r1, [r2, #13]
    3828:	4b14      	ldr	r3, [pc, #80]	; (387c <disk_initialize+0x80>)
    382a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    382c:	2306      	movs	r3, #6
    382e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3830:	4d13      	ldr	r5, [pc, #76]	; (3880 <disk_initialize+0x84>)
    3832:	4914      	ldr	r1, [pc, #80]	; (3884 <disk_initialize+0x88>)
    3834:	0028      	movs	r0, r5
    3836:	4b14      	ldr	r3, [pc, #80]	; (3888 <disk_initialize+0x8c>)
    3838:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    383a:	0028      	movs	r0, r5
    383c:	4b13      	ldr	r3, [pc, #76]	; (388c <disk_initialize+0x90>)
    383e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3840:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    3842:	2c01      	cmp	r4, #1
    3844:	d901      	bls.n	384a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3846:	b007      	add	sp, #28
    3848:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    384a:	0020      	movs	r0, r4
    384c:	4b10      	ldr	r3, [pc, #64]	; (3890 <disk_initialize+0x94>)
    384e:	4798      	blx	r3
    3850:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3852:	2803      	cmp	r0, #3
    3854:	d106      	bne.n	3864 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    3856:	0020      	movs	r0, r4
    3858:	4b0d      	ldr	r3, [pc, #52]	; (3890 <disk_initialize+0x94>)
    385a:	4798      	blx	r3
    385c:	0003      	movs	r3, r0
		return STA_NOINIT;
    385e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3860:	2b03      	cmp	r3, #3
    3862:	d0f0      	beq.n	3846 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3864:	2b00      	cmp	r3, #0
    3866:	d106      	bne.n	3876 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3868:	0020      	movs	r0, r4
    386a:	4b0a      	ldr	r3, [pc, #40]	; (3894 <disk_initialize+0x98>)
    386c:	4798      	blx	r3
	return 0;
    386e:	1e43      	subs	r3, r0, #1
    3870:	4198      	sbcs	r0, r3
    3872:	0080      	lsls	r0, r0, #2
    3874:	e7e7      	b.n	3846 <disk_initialize+0x4a>
		return STA_NOINIT;
    3876:	2001      	movs	r0, #1
    3878:	e7e5      	b.n	3846 <disk_initialize+0x4a>
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	000007de 	.word	0x000007de
    3880:	20000b60 	.word	0x20000b60
    3884:	40001400 	.word	0x40001400
    3888:	00001c29 	.word	0x00001c29
    388c:	00001ae5 	.word	0x00001ae5
    3890:	000019bd 	.word	0x000019bd
    3894:	000019f9 	.word	0x000019f9

00003898 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3898:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    389a:	4b05      	ldr	r3, [pc, #20]	; (38b0 <disk_status+0x18>)
    389c:	4798      	blx	r3
    389e:	1e03      	subs	r3, r0, #0
    38a0:	d004      	beq.n	38ac <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    38a2:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    38a4:	2b02      	cmp	r3, #2
    38a6:	d000      	beq.n	38aa <disk_status+0x12>
	default:
		return STA_NOINIT;
    38a8:	3802      	subs	r0, #2
	}
}
    38aa:	bd10      	pop	{r4, pc}
		return 0;
    38ac:	2000      	movs	r0, #0
    38ae:	e7fc      	b.n	38aa <disk_status+0x12>
    38b0:	000019bd 	.word	0x000019bd

000038b4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    38b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38b6:	46de      	mov	lr, fp
    38b8:	464f      	mov	r7, r9
    38ba:	4646      	mov	r6, r8
    38bc:	b5c0      	push	{r6, r7, lr}
    38be:	b084      	sub	sp, #16
    38c0:	9001      	str	r0, [sp, #4]
    38c2:	000d      	movs	r5, r1
    38c4:	0014      	movs	r4, r2
    38c6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    38c8:	4b18      	ldr	r3, [pc, #96]	; (392c <disk_read+0x78>)
    38ca:	4798      	blx	r3
    38cc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    38ce:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    38d0:	2e00      	cmp	r6, #0
    38d2:	d105      	bne.n	38e0 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    38d4:	b004      	add	sp, #16
    38d6:	bc1c      	pop	{r2, r3, r4}
    38d8:	4690      	mov	r8, r2
    38da:	4699      	mov	r9, r3
    38dc:	46a3      	mov	fp, r4
    38de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    38e0:	a903      	add	r1, sp, #12
    38e2:	9801      	ldr	r0, [sp, #4]
    38e4:	4b12      	ldr	r3, [pc, #72]	; (3930 <disk_read+0x7c>)
    38e6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    38e8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    38ea:	0032      	movs	r2, r6
    38ec:	437a      	muls	r2, r7
    38ee:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    38f0:	9b03      	ldr	r3, [sp, #12]
    38f2:	3301      	adds	r3, #1
    38f4:	4373      	muls	r3, r6
		return RES_PARERR;
    38f6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    38f8:	429a      	cmp	r2, r3
    38fa:	d8eb      	bhi.n	38d4 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    38fc:	2f00      	cmp	r7, #0
    38fe:	d011      	beq.n	3924 <disk_read+0x70>
    3900:	0273      	lsls	r3, r6, #9
    3902:	4698      	mov	r8, r3
    3904:	1c7b      	adds	r3, r7, #1
    3906:	469b      	mov	fp, r3
    3908:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    390a:	4e0a      	ldr	r6, [pc, #40]	; (3934 <disk_read+0x80>)
    390c:	002a      	movs	r2, r5
    390e:	0021      	movs	r1, r4
    3910:	9801      	ldr	r0, [sp, #4]
    3912:	47b0      	blx	r6
    3914:	2800      	cmp	r0, #0
    3916:	d107      	bne.n	3928 <disk_read+0x74>
    3918:	3701      	adds	r7, #1
    391a:	444c      	add	r4, r9
    391c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    391e:	455f      	cmp	r7, fp
    3920:	d1f4      	bne.n	390c <disk_read+0x58>
    3922:	e7d7      	b.n	38d4 <disk_read+0x20>
	return RES_OK;
    3924:	2000      	movs	r0, #0
    3926:	e7d5      	b.n	38d4 <disk_read+0x20>
			return RES_ERROR;
    3928:	2001      	movs	r0, #1
    392a:	e7d3      	b.n	38d4 <disk_read+0x20>
    392c:	000019f1 	.word	0x000019f1
    3930:	000019d5 	.word	0x000019d5
    3934:	00001a11 	.word	0x00001a11

00003938 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3938:	b5f0      	push	{r4, r5, r6, r7, lr}
    393a:	46de      	mov	lr, fp
    393c:	464f      	mov	r7, r9
    393e:	4646      	mov	r6, r8
    3940:	b5c0      	push	{r6, r7, lr}
    3942:	b084      	sub	sp, #16
    3944:	9001      	str	r0, [sp, #4]
    3946:	000d      	movs	r5, r1
    3948:	0014      	movs	r4, r2
    394a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    394c:	4b18      	ldr	r3, [pc, #96]	; (39b0 <disk_write+0x78>)
    394e:	4798      	blx	r3
    3950:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3952:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3954:	2e00      	cmp	r6, #0
    3956:	d105      	bne.n	3964 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3958:	b004      	add	sp, #16
    395a:	bc1c      	pop	{r2, r3, r4}
    395c:	4690      	mov	r8, r2
    395e:	4699      	mov	r9, r3
    3960:	46a3      	mov	fp, r4
    3962:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3964:	a903      	add	r1, sp, #12
    3966:	9801      	ldr	r0, [sp, #4]
    3968:	4b12      	ldr	r3, [pc, #72]	; (39b4 <disk_write+0x7c>)
    396a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    396c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    396e:	0032      	movs	r2, r6
    3970:	437a      	muls	r2, r7
    3972:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3974:	9b03      	ldr	r3, [sp, #12]
    3976:	3301      	adds	r3, #1
    3978:	4373      	muls	r3, r6
		return RES_PARERR;
    397a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    397c:	429a      	cmp	r2, r3
    397e:	d8eb      	bhi.n	3958 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3980:	2f00      	cmp	r7, #0
    3982:	d011      	beq.n	39a8 <disk_write+0x70>
    3984:	0273      	lsls	r3, r6, #9
    3986:	4698      	mov	r8, r3
    3988:	1c7b      	adds	r3, r7, #1
    398a:	469b      	mov	fp, r3
    398c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    398e:	4e0a      	ldr	r6, [pc, #40]	; (39b8 <disk_write+0x80>)
    3990:	002a      	movs	r2, r5
    3992:	0021      	movs	r1, r4
    3994:	9801      	ldr	r0, [sp, #4]
    3996:	47b0      	blx	r6
    3998:	2800      	cmp	r0, #0
    399a:	d107      	bne.n	39ac <disk_write+0x74>
    399c:	3701      	adds	r7, #1
    399e:	444c      	add	r4, r9
    39a0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    39a2:	455f      	cmp	r7, fp
    39a4:	d1f4      	bne.n	3990 <disk_write+0x58>
    39a6:	e7d7      	b.n	3958 <disk_write+0x20>
	return RES_OK;
    39a8:	2000      	movs	r0, #0
    39aa:	e7d5      	b.n	3958 <disk_write+0x20>
			return RES_ERROR;
    39ac:	2001      	movs	r0, #1
    39ae:	e7d3      	b.n	3958 <disk_write+0x20>
    39b0:	000019f1 	.word	0x000019f1
    39b4:	000019d5 	.word	0x000019d5
    39b8:	00001a31 	.word	0x00001a31

000039bc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    39bc:	b510      	push	{r4, lr}
    39be:	b082      	sub	sp, #8
    39c0:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    39c2:	2901      	cmp	r1, #1
    39c4:	d00b      	beq.n	39de <disk_ioctl+0x22>
    39c6:	2900      	cmp	r1, #0
    39c8:	d020      	beq.n	3a0c <disk_ioctl+0x50>
    39ca:	2902      	cmp	r1, #2
    39cc:	d00f      	beq.n	39ee <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    39ce:	2004      	movs	r0, #4
	switch (ctrl) {
    39d0:	2903      	cmp	r1, #3
    39d2:	d102      	bne.n	39da <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    39d4:	2301      	movs	r3, #1
    39d6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    39d8:	2000      	movs	r0, #0
	}

	return res;
}
    39da:	b002      	add	sp, #8
    39dc:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    39de:	a901      	add	r1, sp, #4
    39e0:	4b0e      	ldr	r3, [pc, #56]	; (3a1c <disk_ioctl+0x60>)
    39e2:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    39e4:	9b01      	ldr	r3, [sp, #4]
    39e6:	3301      	adds	r3, #1
    39e8:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    39ea:	2000      	movs	r0, #0
	break;
    39ec:	e7f5      	b.n	39da <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    39ee:	4b0c      	ldr	r3, [pc, #48]	; (3a20 <disk_ioctl+0x64>)
    39f0:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    39f2:	1e43      	subs	r3, r0, #1
    39f4:	b2db      	uxtb	r3, r3
    39f6:	2b01      	cmp	r3, #1
    39f8:	d904      	bls.n	3a04 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    39fa:	1f03      	subs	r3, r0, #4
    39fc:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    39fe:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3a00:	4213      	tst	r3, r2
    3a02:	d1ea      	bne.n	39da <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3a04:	2300      	movs	r3, #0
    3a06:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3a08:	2000      	movs	r0, #0
	break;
    3a0a:	e7e6      	b.n	39da <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3a0c:	4b05      	ldr	r3, [pc, #20]	; (3a24 <disk_ioctl+0x68>)
    3a0e:	4798      	blx	r3
    3a10:	2800      	cmp	r0, #0
    3a12:	d001      	beq.n	3a18 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3a14:	2003      	movs	r0, #3
    3a16:	e7e0      	b.n	39da <disk_ioctl+0x1e>
			res = RES_OK;
    3a18:	2000      	movs	r0, #0
    3a1a:	e7de      	b.n	39da <disk_ioctl+0x1e>
    3a1c:	000019d5 	.word	0x000019d5
    3a20:	000019f1 	.word	0x000019f1
    3a24:	000019bd 	.word	0x000019bd

00003a28 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3a28:	b500      	push	{lr}
    3a2a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3a2c:	4669      	mov	r1, sp
    3a2e:	480f      	ldr	r0, [pc, #60]	; (3a6c <get_fattime+0x44>)
    3a30:	4b0f      	ldr	r3, [pc, #60]	; (3a70 <get_fattime+0x48>)
    3a32:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3a34:	466b      	mov	r3, sp
    3a36:	7958      	ldrb	r0, [r3, #5]
    3a38:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3a3a:	791b      	ldrb	r3, [r3, #4]
    3a3c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3a3e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3a40:	466b      	mov	r3, sp
    3a42:	789b      	ldrb	r3, [r3, #2]
    3a44:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    3a46:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3a48:	466b      	mov	r3, sp
    3a4a:	785b      	ldrb	r3, [r3, #1]
    3a4c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3a4e:	4318      	orrs	r0, r3
    3a50:	466b      	mov	r3, sp
    3a52:	781b      	ldrb	r3, [r3, #0]
    3a54:	085b      	lsrs	r3, r3, #1
    3a56:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3a58:	466b      	mov	r3, sp
    3a5a:	88db      	ldrh	r3, [r3, #6]
    3a5c:	4a05      	ldr	r2, [pc, #20]	; (3a74 <get_fattime+0x4c>)
    3a5e:	4694      	mov	ip, r2
    3a60:	4463      	add	r3, ip
    3a62:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3a64:	4318      	orrs	r0, r3

	return ul_time;
}
    3a66:	b003      	add	sp, #12
    3a68:	bd00      	pop	{pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	20000b60 	.word	0x20000b60
    3a70:	00001bb1 	.word	0x00001bb1
    3a74:	fffff844 	.word	0xfffff844

00003a78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3a78:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3a7a:	2a00      	cmp	r2, #0
    3a7c:	d005      	beq.n	3a8a <mem_cpy+0x12>
    3a7e:	2300      	movs	r3, #0
		*d++ = *s++;
    3a80:	5ccc      	ldrb	r4, [r1, r3]
    3a82:	54c4      	strb	r4, [r0, r3]
    3a84:	3301      	adds	r3, #1
	while (cnt--)
    3a86:	4293      	cmp	r3, r2
    3a88:	d1fa      	bne.n	3a80 <mem_cpy+0x8>
}
    3a8a:	bd10      	pop	{r4, pc}

00003a8c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3a8c:	2a00      	cmp	r2, #0
    3a8e:	d005      	beq.n	3a9c <mem_set+0x10>
    3a90:	0003      	movs	r3, r0
    3a92:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3a94:	7019      	strb	r1, [r3, #0]
    3a96:	3301      	adds	r3, #1
	while (cnt--)
    3a98:	4293      	cmp	r3, r2
    3a9a:	d1fb      	bne.n	3a94 <mem_set+0x8>
}
    3a9c:	4770      	bx	lr

00003a9e <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3a9e:	0002      	movs	r2, r0
	clst -= 2;
    3aa0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3aa2:	6983      	ldr	r3, [r0, #24]
    3aa4:	3b02      	subs	r3, #2
    3aa6:	2000      	movs	r0, #0
    3aa8:	4299      	cmp	r1, r3
    3aaa:	d203      	bcs.n	3ab4 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3aac:	7890      	ldrb	r0, [r2, #2]
    3aae:	4341      	muls	r1, r0
    3ab0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3ab2:	1808      	adds	r0, r1, r0
}
    3ab4:	4770      	bx	lr

00003ab6 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3ab6:	0002      	movs	r2, r0
    3ab8:	0001      	movs	r1, r0
    3aba:	310b      	adds	r1, #11
	BYTE sum = 0;
    3abc:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3abe:	0843      	lsrs	r3, r0, #1
    3ac0:	01c0      	lsls	r0, r0, #7
    3ac2:	4303      	orrs	r3, r0
    3ac4:	7810      	ldrb	r0, [r2, #0]
    3ac6:	1818      	adds	r0, r3, r0
    3ac8:	b2c0      	uxtb	r0, r0
    3aca:	3201      	adds	r2, #1
    3acc:	428a      	cmp	r2, r1
    3ace:	d1f6      	bne.n	3abe <sum_sfn+0x8>
	return sum;
}
    3ad0:	4770      	bx	lr
	...

00003ad4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3ad4:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3ad6:	2800      	cmp	r0, #0
    3ad8:	d010      	beq.n	3afc <validate+0x28>
    3ada:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3adc:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3ade:	2a00      	cmp	r2, #0
    3ae0:	d101      	bne.n	3ae6 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3ae2:	0018      	movs	r0, r3
    3ae4:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3ae6:	88c2      	ldrh	r2, [r0, #6]
    3ae8:	428a      	cmp	r2, r1
    3aea:	d1fa      	bne.n	3ae2 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3aec:	7840      	ldrb	r0, [r0, #1]
    3aee:	4b04      	ldr	r3, [pc, #16]	; (3b00 <validate+0x2c>)
    3af0:	4798      	blx	r3
		return FR_NOT_READY;
    3af2:	2303      	movs	r3, #3
	return FR_OK;
    3af4:	07c0      	lsls	r0, r0, #31
    3af6:	17c0      	asrs	r0, r0, #31
    3af8:	4003      	ands	r3, r0
    3afa:	e7f2      	b.n	3ae2 <validate+0xe>
		return FR_INVALID_OBJECT;
    3afc:	2309      	movs	r3, #9
    3afe:	e7f0      	b.n	3ae2 <validate+0xe>
    3b00:	00003899 	.word	0x00003899

00003b04 <check_fs>:
{
    3b04:	b570      	push	{r4, r5, r6, lr}
    3b06:	0004      	movs	r4, r0
    3b08:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3b0a:	0001      	movs	r1, r0
    3b0c:	3130      	adds	r1, #48	; 0x30
    3b0e:	7840      	ldrb	r0, [r0, #1]
    3b10:	2301      	movs	r3, #1
    3b12:	4d1f      	ldr	r5, [pc, #124]	; (3b90 <check_fs+0x8c>)
    3b14:	47a8      	blx	r5
		return 3;
    3b16:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3b18:	2800      	cmp	r0, #0
    3b1a:	d001      	beq.n	3b20 <check_fs+0x1c>
}
    3b1c:	0018      	movs	r0, r3
    3b1e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3b20:	4b1c      	ldr	r3, [pc, #112]	; (3b94 <check_fs+0x90>)
    3b22:	5ce3      	ldrb	r3, [r4, r3]
    3b24:	021b      	lsls	r3, r3, #8
    3b26:	4a1c      	ldr	r2, [pc, #112]	; (3b98 <check_fs+0x94>)
    3b28:	5ca2      	ldrb	r2, [r4, r2]
    3b2a:	431a      	orrs	r2, r3
    3b2c:	491b      	ldr	r1, [pc, #108]	; (3b9c <check_fs+0x98>)
    3b2e:	b212      	sxth	r2, r2
		return 2;
    3b30:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3b32:	428a      	cmp	r2, r1
    3b34:	d1f2      	bne.n	3b1c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3b36:	3367      	adds	r3, #103	; 0x67
    3b38:	5ce3      	ldrb	r3, [r4, r3]
    3b3a:	061b      	lsls	r3, r3, #24
    3b3c:	2268      	movs	r2, #104	; 0x68
    3b3e:	5ca2      	ldrb	r2, [r4, r2]
    3b40:	0412      	lsls	r2, r2, #16
    3b42:	4313      	orrs	r3, r2
    3b44:	2266      	movs	r2, #102	; 0x66
    3b46:	5ca2      	ldrb	r2, [r4, r2]
    3b48:	4313      	orrs	r3, r2
    3b4a:	2267      	movs	r2, #103	; 0x67
    3b4c:	5ca2      	ldrb	r2, [r4, r2]
    3b4e:	0212      	lsls	r2, r2, #8
    3b50:	4313      	orrs	r3, r2
    3b52:	021b      	lsls	r3, r3, #8
    3b54:	0a1b      	lsrs	r3, r3, #8
    3b56:	4a12      	ldr	r2, [pc, #72]	; (3ba0 <check_fs+0x9c>)
    3b58:	4293      	cmp	r3, r2
    3b5a:	d016      	beq.n	3b8a <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3b5c:	2385      	movs	r3, #133	; 0x85
    3b5e:	5ce3      	ldrb	r3, [r4, r3]
    3b60:	061b      	lsls	r3, r3, #24
    3b62:	2284      	movs	r2, #132	; 0x84
    3b64:	5ca2      	ldrb	r2, [r4, r2]
    3b66:	0412      	lsls	r2, r2, #16
    3b68:	4313      	orrs	r3, r2
    3b6a:	2282      	movs	r2, #130	; 0x82
    3b6c:	5ca2      	ldrb	r2, [r4, r2]
    3b6e:	4313      	orrs	r3, r2
    3b70:	2283      	movs	r2, #131	; 0x83
    3b72:	5ca2      	ldrb	r2, [r4, r2]
    3b74:	0212      	lsls	r2, r2, #8
    3b76:	4313      	orrs	r3, r2
    3b78:	021b      	lsls	r3, r3, #8
    3b7a:	0a1b      	lsrs	r3, r3, #8
    3b7c:	4a09      	ldr	r2, [pc, #36]	; (3ba4 <check_fs+0xa0>)
    3b7e:	4694      	mov	ip, r2
    3b80:	4463      	add	r3, ip
    3b82:	1e58      	subs	r0, r3, #1
    3b84:	4183      	sbcs	r3, r0
		return 3;
    3b86:	b2db      	uxtb	r3, r3
    3b88:	e7c8      	b.n	3b1c <check_fs+0x18>
		return 0;
    3b8a:	2300      	movs	r3, #0
    3b8c:	e7c6      	b.n	3b1c <check_fs+0x18>
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	000038b5 	.word	0x000038b5
    3b94:	0000022f 	.word	0x0000022f
    3b98:	0000022e 	.word	0x0000022e
    3b9c:	ffffaa55 	.word	0xffffaa55
    3ba0:	00544146 	.word	0x00544146
    3ba4:	ffabbeba 	.word	0xffabbeba

00003ba8 <chk_mounted>:
{
    3ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3baa:	46d6      	mov	lr, sl
    3bac:	464f      	mov	r7, r9
    3bae:	4646      	mov	r6, r8
    3bb0:	b5c0      	push	{r6, r7, lr}
    3bb2:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3bb4:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3bb6:	781c      	ldrb	r4, [r3, #0]
    3bb8:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3bba:	2c09      	cmp	r4, #9
    3bbc:	d80e      	bhi.n	3bdc <chk_mounted+0x34>
    3bbe:	785a      	ldrb	r2, [r3, #1]
    3bc0:	2a3a      	cmp	r2, #58	; 0x3a
    3bc2:	d001      	beq.n	3bc8 <chk_mounted+0x20>
    3bc4:	2400      	movs	r4, #0
    3bc6:	e00a      	b.n	3bde <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3bc8:	3302      	adds	r3, #2
    3bca:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3bcc:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3bce:	2c07      	cmp	r4, #7
    3bd0:	d905      	bls.n	3bde <chk_mounted+0x36>
}
    3bd2:	bc1c      	pop	{r2, r3, r4}
    3bd4:	4690      	mov	r8, r2
    3bd6:	4699      	mov	r9, r3
    3bd8:	46a2      	mov	sl, r4
    3bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bdc:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3bde:	00a3      	lsls	r3, r4, #2
    3be0:	4ac5      	ldr	r2, [pc, #788]	; (3ef8 <chk_mounted+0x350>)
    3be2:	589e      	ldr	r6, [r3, r2]
    3be4:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3be6:	2e00      	cmp	r6, #0
    3be8:	d100      	bne.n	3bec <chk_mounted+0x44>
    3bea:	e0e8      	b.n	3dbe <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3bec:	7833      	ldrb	r3, [r6, #0]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d00d      	beq.n	3c0e <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3bf2:	7870      	ldrb	r0, [r6, #1]
    3bf4:	4bc1      	ldr	r3, [pc, #772]	; (3efc <chk_mounted+0x354>)
    3bf6:	4798      	blx	r3
    3bf8:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3bfa:	07c2      	lsls	r2, r0, #31
    3bfc:	d407      	bmi.n	3c0e <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3bfe:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3c00:	2d00      	cmp	r5, #0
    3c02:	d0e6      	beq.n	3bd2 <chk_mounted+0x2a>
    3c04:	075b      	lsls	r3, r3, #29
    3c06:	d400      	bmi.n	3c0a <chk_mounted+0x62>
    3c08:	e0db      	b.n	3dc2 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3c0a:	300a      	adds	r0, #10
    3c0c:	e7e1      	b.n	3bd2 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3c0e:	2300      	movs	r3, #0
    3c10:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3c12:	b2e0      	uxtb	r0, r4
    3c14:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3c16:	4bba      	ldr	r3, [pc, #744]	; (3f00 <chk_mounted+0x358>)
    3c18:	4798      	blx	r3
    3c1a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3c1c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3c1e:	07da      	lsls	r2, r3, #31
    3c20:	d4d7      	bmi.n	3bd2 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3c22:	2d00      	cmp	r5, #0
    3c24:	d002      	beq.n	3c2c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3c26:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3c28:	075b      	lsls	r3, r3, #29
    3c2a:	d4d2      	bmi.n	3bd2 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3c2c:	2100      	movs	r1, #0
    3c2e:	0030      	movs	r0, r6
    3c30:	4bb4      	ldr	r3, [pc, #720]	; (3f04 <chk_mounted+0x35c>)
    3c32:	4798      	blx	r3
    3c34:	0003      	movs	r3, r0
    3c36:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3c38:	2801      	cmp	r0, #1
    3c3a:	d100      	bne.n	3c3e <chk_mounted+0x96>
    3c3c:	e09a      	b.n	3d74 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3c3e:	2b03      	cmp	r3, #3
    3c40:	d100      	bne.n	3c44 <chk_mounted+0x9c>
    3c42:	e0c0      	b.n	3dc6 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3c44:	200d      	movs	r0, #13
    3c46:	2b00      	cmp	r3, #0
    3c48:	d1c3      	bne.n	3bd2 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3c4a:	333c      	adds	r3, #60	; 0x3c
    3c4c:	5cf2      	ldrb	r2, [r6, r3]
    3c4e:	0212      	lsls	r2, r2, #8
    3c50:	3b01      	subs	r3, #1
    3c52:	5cf3      	ldrb	r3, [r6, r3]
    3c54:	4313      	orrs	r3, r2
    3c56:	2280      	movs	r2, #128	; 0x80
    3c58:	0092      	lsls	r2, r2, #2
    3c5a:	b21b      	sxth	r3, r3
    3c5c:	4293      	cmp	r3, r2
    3c5e:	d1b8      	bne.n	3bd2 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3c60:	2347      	movs	r3, #71	; 0x47
    3c62:	5cf3      	ldrb	r3, [r6, r3]
    3c64:	021b      	lsls	r3, r3, #8
    3c66:	3abb      	subs	r2, #187	; 0xbb
    3c68:	3aff      	subs	r2, #255	; 0xff
    3c6a:	5cb5      	ldrb	r5, [r6, r2]
    3c6c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3c6e:	d10d      	bne.n	3c8c <chk_mounted+0xe4>
    3c70:	2357      	movs	r3, #87	; 0x57
    3c72:	5cf5      	ldrb	r5, [r6, r3]
    3c74:	062d      	lsls	r5, r5, #24
    3c76:	3b01      	subs	r3, #1
    3c78:	5cf3      	ldrb	r3, [r6, r3]
    3c7a:	041b      	lsls	r3, r3, #16
    3c7c:	431d      	orrs	r5, r3
    3c7e:	2354      	movs	r3, #84	; 0x54
    3c80:	5cf3      	ldrb	r3, [r6, r3]
    3c82:	431d      	orrs	r5, r3
    3c84:	2355      	movs	r3, #85	; 0x55
    3c86:	5cf3      	ldrb	r3, [r6, r3]
    3c88:	021b      	lsls	r3, r3, #8
    3c8a:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3c8c:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3c8e:	2340      	movs	r3, #64	; 0x40
    3c90:	5cf2      	ldrb	r2, [r6, r3]
    3c92:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3c94:	1e53      	subs	r3, r2, #1
    3c96:	200d      	movs	r0, #13
    3c98:	2b01      	cmp	r3, #1
    3c9a:	d89a      	bhi.n	3bd2 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3c9c:	233d      	movs	r3, #61	; 0x3d
    3c9e:	5cf1      	ldrb	r1, [r6, r3]
    3ca0:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3ca2:	2900      	cmp	r1, #0
    3ca4:	d095      	beq.n	3bd2 <chk_mounted+0x2a>
    3ca6:	1e4b      	subs	r3, r1, #1
    3ca8:	4219      	tst	r1, r3
    3caa:	d192      	bne.n	3bd2 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3cac:	2342      	movs	r3, #66	; 0x42
    3cae:	5cf3      	ldrb	r3, [r6, r3]
    3cb0:	021b      	lsls	r3, r3, #8
    3cb2:	3034      	adds	r0, #52	; 0x34
    3cb4:	5c30      	ldrb	r0, [r6, r0]
    3cb6:	4318      	orrs	r0, r3
    3cb8:	4680      	mov	r8, r0
    3cba:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3cbc:	200d      	movs	r0, #13
    3cbe:	4643      	mov	r3, r8
    3cc0:	071b      	lsls	r3, r3, #28
    3cc2:	d000      	beq.n	3cc6 <chk_mounted+0x11e>
    3cc4:	e785      	b.n	3bd2 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3cc6:	2344      	movs	r3, #68	; 0x44
    3cc8:	5cf3      	ldrb	r3, [r6, r3]
    3cca:	021b      	lsls	r3, r3, #8
    3ccc:	3036      	adds	r0, #54	; 0x36
    3cce:	5c30      	ldrb	r0, [r6, r0]
    3cd0:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3cd2:	d10d      	bne.n	3cf0 <chk_mounted+0x148>
    3cd4:	3353      	adds	r3, #83	; 0x53
    3cd6:	5cf3      	ldrb	r3, [r6, r3]
    3cd8:	061b      	lsls	r3, r3, #24
    3cda:	2052      	movs	r0, #82	; 0x52
    3cdc:	5c30      	ldrb	r0, [r6, r0]
    3cde:	0400      	lsls	r0, r0, #16
    3ce0:	4303      	orrs	r3, r0
    3ce2:	2050      	movs	r0, #80	; 0x50
    3ce4:	5c30      	ldrb	r0, [r6, r0]
    3ce6:	4303      	orrs	r3, r0
    3ce8:	2051      	movs	r0, #81	; 0x51
    3cea:	5c30      	ldrb	r0, [r6, r0]
    3cec:	0200      	lsls	r0, r0, #8
    3cee:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3cf0:	203f      	movs	r0, #63	; 0x3f
    3cf2:	5c30      	ldrb	r0, [r6, r0]
    3cf4:	0200      	lsls	r0, r0, #8
    3cf6:	273e      	movs	r7, #62	; 0x3e
    3cf8:	5df7      	ldrb	r7, [r6, r7]
    3cfa:	4307      	orrs	r7, r0
    3cfc:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3cfe:	200d      	movs	r0, #13
    3d00:	2f00      	cmp	r7, #0
    3d02:	d100      	bne.n	3d06 <chk_mounted+0x15e>
    3d04:	e765      	b.n	3bd2 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3d06:	436a      	muls	r2, r5
    3d08:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3d0a:	4642      	mov	r2, r8
    3d0c:	0917      	lsrs	r7, r2, #4
    3d0e:	4457      	add	r7, sl
    3d10:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3d12:	42bb      	cmp	r3, r7
    3d14:	d200      	bcs.n	3d18 <chk_mounted+0x170>
    3d16:	e75c      	b.n	3bd2 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3d18:	1bd8      	subs	r0, r3, r7
    3d1a:	4b7b      	ldr	r3, [pc, #492]	; (3f08 <chk_mounted+0x360>)
    3d1c:	4798      	blx	r3
    3d1e:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3d20:	200d      	movs	r0, #13
    3d22:	2b00      	cmp	r3, #0
    3d24:	d100      	bne.n	3d28 <chk_mounted+0x180>
    3d26:	e754      	b.n	3bd2 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3d28:	4a78      	ldr	r2, [pc, #480]	; (3f0c <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3d2a:	429a      	cmp	r2, r3
    3d2c:	4192      	sbcs	r2, r2
    3d2e:	4252      	negs	r2, r2
    3d30:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3d32:	4977      	ldr	r1, [pc, #476]	; (3f10 <chk_mounted+0x368>)
    3d34:	428b      	cmp	r3, r1
    3d36:	d848      	bhi.n	3dca <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3d38:	3302      	adds	r3, #2
    3d3a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3d3c:	19e7      	adds	r7, r4, r7
    3d3e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3d40:	4454      	add	r4, sl
    3d42:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3d44:	200d      	movs	r0, #13
    3d46:	4641      	mov	r1, r8
    3d48:	2900      	cmp	r1, #0
    3d4a:	d100      	bne.n	3d4e <chk_mounted+0x1a6>
    3d4c:	e741      	b.n	3bd2 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3d4e:	444c      	add	r4, r9
    3d50:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3d52:	2a02      	cmp	r2, #2
    3d54:	d12c      	bne.n	3db0 <chk_mounted+0x208>
    3d56:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d58:	496e      	ldr	r1, [pc, #440]	; (3f14 <chk_mounted+0x36c>)
    3d5a:	468c      	mov	ip, r1
    3d5c:	4463      	add	r3, ip
    3d5e:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3d60:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d62:	429d      	cmp	r5, r3
    3d64:	d200      	bcs.n	3d68 <chk_mounted+0x1c0>
    3d66:	e734      	b.n	3bd2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3d68:	2301      	movs	r3, #1
    3d6a:	425b      	negs	r3, r3
    3d6c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3d6e:	2300      	movs	r3, #0
    3d70:	60f3      	str	r3, [r6, #12]
    3d72:	e0b6      	b.n	3ee2 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3d74:	33f2      	adds	r3, #242	; 0xf2
    3d76:	33ff      	adds	r3, #255	; 0xff
    3d78:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3d7a:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d100      	bne.n	3d82 <chk_mounted+0x1da>
    3d80:	e727      	b.n	3bd2 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3d82:	23fa      	movs	r3, #250	; 0xfa
    3d84:	33ff      	adds	r3, #255	; 0xff
    3d86:	5cf4      	ldrb	r4, [r6, r3]
    3d88:	0624      	lsls	r4, r4, #24
    3d8a:	3b01      	subs	r3, #1
    3d8c:	5cf3      	ldrb	r3, [r6, r3]
    3d8e:	041b      	lsls	r3, r3, #16
    3d90:	431c      	orrs	r4, r3
    3d92:	23fb      	movs	r3, #251	; 0xfb
    3d94:	005b      	lsls	r3, r3, #1
    3d96:	5cf3      	ldrb	r3, [r6, r3]
    3d98:	431c      	orrs	r4, r3
    3d9a:	23f8      	movs	r3, #248	; 0xf8
    3d9c:	33ff      	adds	r3, #255	; 0xff
    3d9e:	5cf2      	ldrb	r2, [r6, r3]
    3da0:	0212      	lsls	r2, r2, #8
    3da2:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3da4:	0021      	movs	r1, r4
    3da6:	0030      	movs	r0, r6
    3da8:	4b56      	ldr	r3, [pc, #344]	; (3f04 <chk_mounted+0x35c>)
    3daa:	4798      	blx	r3
    3dac:	0003      	movs	r3, r0
    3dae:	e746      	b.n	3c3e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3db0:	2103      	movs	r1, #3
    3db2:	4359      	muls	r1, r3
    3db4:	0849      	lsrs	r1, r1, #1
    3db6:	2001      	movs	r0, #1
    3db8:	4003      	ands	r3, r0
    3dba:	18cb      	adds	r3, r1, r3
    3dbc:	e7cc      	b.n	3d58 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3dbe:	200c      	movs	r0, #12
    3dc0:	e707      	b.n	3bd2 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3dc2:	2000      	movs	r0, #0
    3dc4:	e705      	b.n	3bd2 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3dc6:	2001      	movs	r0, #1
    3dc8:	e703      	b.n	3bd2 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3dca:	3302      	adds	r3, #2
    3dcc:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3dce:	19e7      	adds	r7, r4, r7
    3dd0:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3dd2:	4652      	mov	r2, sl
    3dd4:	18a2      	adds	r2, r4, r2
    3dd6:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3dd8:	200d      	movs	r0, #13
    3dda:	4642      	mov	r2, r8
    3ddc:	2a00      	cmp	r2, #0
    3dde:	d000      	beq.n	3de2 <chk_mounted+0x23a>
    3de0:	e6f7      	b.n	3bd2 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3de2:	225f      	movs	r2, #95	; 0x5f
    3de4:	5cb2      	ldrb	r2, [r6, r2]
    3de6:	0612      	lsls	r2, r2, #24
    3de8:	215e      	movs	r1, #94	; 0x5e
    3dea:	5c71      	ldrb	r1, [r6, r1]
    3dec:	0409      	lsls	r1, r1, #16
    3dee:	430a      	orrs	r2, r1
    3df0:	215c      	movs	r1, #92	; 0x5c
    3df2:	5c71      	ldrb	r1, [r6, r1]
    3df4:	430a      	orrs	r2, r1
    3df6:	215d      	movs	r1, #93	; 0x5d
    3df8:	5c71      	ldrb	r1, [r6, r1]
    3dfa:	0209      	lsls	r1, r1, #8
    3dfc:	430a      	orrs	r2, r1
    3dfe:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3e00:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3e02:	4a44      	ldr	r2, [pc, #272]	; (3f14 <chk_mounted+0x36c>)
    3e04:	4694      	mov	ip, r2
    3e06:	4463      	add	r3, ip
    3e08:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3e0a:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3e0c:	429d      	cmp	r5, r3
    3e0e:	d200      	bcs.n	3e12 <chk_mounted+0x26a>
    3e10:	e6df      	b.n	3bd2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3e12:	2301      	movs	r3, #1
    3e14:	425b      	negs	r3, r3
    3e16:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3e18:	2300      	movs	r3, #0
    3e1a:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3e1c:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3e1e:	3361      	adds	r3, #97	; 0x61
    3e20:	5cf3      	ldrb	r3, [r6, r3]
    3e22:	021b      	lsls	r3, r3, #8
    3e24:	2260      	movs	r2, #96	; 0x60
    3e26:	5cb2      	ldrb	r2, [r6, r2]
    3e28:	431a      	orrs	r2, r3
    3e2a:	1912      	adds	r2, r2, r4
    3e2c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3e2e:	0031      	movs	r1, r6
    3e30:	3130      	adds	r1, #48	; 0x30
    3e32:	7870      	ldrb	r0, [r6, #1]
    3e34:	2301      	movs	r3, #1
    3e36:	4c38      	ldr	r4, [pc, #224]	; (3f18 <chk_mounted+0x370>)
    3e38:	47a0      	blx	r4
    3e3a:	2203      	movs	r2, #3
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d150      	bne.n	3ee2 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3e40:	4b36      	ldr	r3, [pc, #216]	; (3f1c <chk_mounted+0x374>)
    3e42:	5cf2      	ldrb	r2, [r6, r3]
    3e44:	0212      	lsls	r2, r2, #8
    3e46:	4b36      	ldr	r3, [pc, #216]	; (3f20 <chk_mounted+0x378>)
    3e48:	5cf3      	ldrb	r3, [r6, r3]
    3e4a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3e4c:	4935      	ldr	r1, [pc, #212]	; (3f24 <chk_mounted+0x37c>)
    3e4e:	b21b      	sxth	r3, r3
    3e50:	2203      	movs	r2, #3
    3e52:	428b      	cmp	r3, r1
    3e54:	d145      	bne.n	3ee2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3e56:	2333      	movs	r3, #51	; 0x33
    3e58:	5cf3      	ldrb	r3, [r6, r3]
    3e5a:	061b      	lsls	r3, r3, #24
    3e5c:	322f      	adds	r2, #47	; 0x2f
    3e5e:	5cb2      	ldrb	r2, [r6, r2]
    3e60:	0412      	lsls	r2, r2, #16
    3e62:	4313      	orrs	r3, r2
    3e64:	2230      	movs	r2, #48	; 0x30
    3e66:	5cb2      	ldrb	r2, [r6, r2]
    3e68:	4313      	orrs	r3, r2
    3e6a:	2231      	movs	r2, #49	; 0x31
    3e6c:	5cb2      	ldrb	r2, [r6, r2]
    3e6e:	0212      	lsls	r2, r2, #8
    3e70:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3e72:	492d      	ldr	r1, [pc, #180]	; (3f28 <chk_mounted+0x380>)
    3e74:	2203      	movs	r2, #3
    3e76:	428b      	cmp	r3, r1
    3e78:	d133      	bne.n	3ee2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3e7a:	4b2c      	ldr	r3, [pc, #176]	; (3f2c <chk_mounted+0x384>)
    3e7c:	5cf3      	ldrb	r3, [r6, r3]
    3e7e:	061b      	lsls	r3, r3, #24
    3e80:	4a2b      	ldr	r2, [pc, #172]	; (3f30 <chk_mounted+0x388>)
    3e82:	5cb2      	ldrb	r2, [r6, r2]
    3e84:	0412      	lsls	r2, r2, #16
    3e86:	4313      	orrs	r3, r2
    3e88:	2285      	movs	r2, #133	; 0x85
    3e8a:	0092      	lsls	r2, r2, #2
    3e8c:	5cb2      	ldrb	r2, [r6, r2]
    3e8e:	4313      	orrs	r3, r2
    3e90:	4a28      	ldr	r2, [pc, #160]	; (3f34 <chk_mounted+0x38c>)
    3e92:	5cb2      	ldrb	r2, [r6, r2]
    3e94:	0212      	lsls	r2, r2, #8
    3e96:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3e98:	4927      	ldr	r1, [pc, #156]	; (3f38 <chk_mounted+0x390>)
    3e9a:	2203      	movs	r2, #3
    3e9c:	428b      	cmp	r3, r1
    3e9e:	d120      	bne.n	3ee2 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3ea0:	4b26      	ldr	r3, [pc, #152]	; (3f3c <chk_mounted+0x394>)
    3ea2:	5cf3      	ldrb	r3, [r6, r3]
    3ea4:	061b      	lsls	r3, r3, #24
    3ea6:	4a26      	ldr	r2, [pc, #152]	; (3f40 <chk_mounted+0x398>)
    3ea8:	5cb2      	ldrb	r2, [r6, r2]
    3eaa:	0412      	lsls	r2, r2, #16
    3eac:	4313      	orrs	r3, r2
    3eae:	2287      	movs	r2, #135	; 0x87
    3eb0:	0092      	lsls	r2, r2, #2
    3eb2:	5cb2      	ldrb	r2, [r6, r2]
    3eb4:	4313      	orrs	r3, r2
    3eb6:	4a23      	ldr	r2, [pc, #140]	; (3f44 <chk_mounted+0x39c>)
    3eb8:	5cb2      	ldrb	r2, [r6, r2]
    3eba:	0212      	lsls	r2, r2, #8
    3ebc:	4313      	orrs	r3, r2
    3ebe:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3ec0:	4b21      	ldr	r3, [pc, #132]	; (3f48 <chk_mounted+0x3a0>)
    3ec2:	5cf3      	ldrb	r3, [r6, r3]
    3ec4:	061b      	lsls	r3, r3, #24
    3ec6:	4a21      	ldr	r2, [pc, #132]	; (3f4c <chk_mounted+0x3a4>)
    3ec8:	5cb2      	ldrb	r2, [r6, r2]
    3eca:	0412      	lsls	r2, r2, #16
    3ecc:	4313      	orrs	r3, r2
    3ece:	2286      	movs	r2, #134	; 0x86
    3ed0:	0092      	lsls	r2, r2, #2
    3ed2:	5cb2      	ldrb	r2, [r6, r2]
    3ed4:	4313      	orrs	r3, r2
    3ed6:	4a1e      	ldr	r2, [pc, #120]	; (3f50 <chk_mounted+0x3a8>)
    3ed8:	5cb2      	ldrb	r2, [r6, r2]
    3eda:	0212      	lsls	r2, r2, #8
    3edc:	4313      	orrs	r3, r2
    3ede:	6133      	str	r3, [r6, #16]
    3ee0:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3ee2:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3ee4:	4a1b      	ldr	r2, [pc, #108]	; (3f54 <chk_mounted+0x3ac>)
    3ee6:	8813      	ldrh	r3, [r2, #0]
    3ee8:	3301      	adds	r3, #1
    3eea:	b29b      	uxth	r3, r3
    3eec:	8013      	strh	r3, [r2, #0]
    3eee:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3ef0:	2000      	movs	r0, #0
    3ef2:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3ef4:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3ef6:	e66c      	b.n	3bd2 <chk_mounted+0x2a>
    3ef8:	200002c4 	.word	0x200002c4
    3efc:	00003899 	.word	0x00003899
    3f00:	000037fd 	.word	0x000037fd
    3f04:	00003b05 	.word	0x00003b05
    3f08:	00005af9 	.word	0x00005af9
    3f0c:	00000ff5 	.word	0x00000ff5
    3f10:	0000fff5 	.word	0x0000fff5
    3f14:	000001ff 	.word	0x000001ff
    3f18:	000038b5 	.word	0x000038b5
    3f1c:	0000022f 	.word	0x0000022f
    3f20:	0000022e 	.word	0x0000022e
    3f24:	ffffaa55 	.word	0xffffaa55
    3f28:	41615252 	.word	0x41615252
    3f2c:	00000217 	.word	0x00000217
    3f30:	00000216 	.word	0x00000216
    3f34:	00000215 	.word	0x00000215
    3f38:	61417272 	.word	0x61417272
    3f3c:	0000021f 	.word	0x0000021f
    3f40:	0000021e 	.word	0x0000021e
    3f44:	0000021d 	.word	0x0000021d
    3f48:	0000021b 	.word	0x0000021b
    3f4c:	0000021a 	.word	0x0000021a
    3f50:	00000219 	.word	0x00000219
    3f54:	200002e4 	.word	0x200002e4

00003f58 <move_window>:
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5a:	46ce      	mov	lr, r9
    3f5c:	b500      	push	{lr}
    3f5e:	b082      	sub	sp, #8
    3f60:	0004      	movs	r4, r0
    3f62:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3f64:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3f66:	428d      	cmp	r5, r1
    3f68:	d03f      	beq.n	3fea <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f6a:	7903      	ldrb	r3, [r0, #4]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d107      	bne.n	3f80 <move_window+0x28>
	return FR_OK;
    3f70:	2300      	movs	r3, #0
		if (sector) {
    3f72:	2f00      	cmp	r7, #0
    3f74:	d12c      	bne.n	3fd0 <move_window+0x78>
}
    3f76:	0018      	movs	r0, r3
    3f78:	b002      	add	sp, #8
    3f7a:	bc04      	pop	{r2}
    3f7c:	4691      	mov	r9, r2
    3f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f80:	2330      	movs	r3, #48	; 0x30
    3f82:	469c      	mov	ip, r3
    3f84:	4484      	add	ip, r0
    3f86:	4663      	mov	r3, ip
    3f88:	4661      	mov	r1, ip
    3f8a:	9301      	str	r3, [sp, #4]
    3f8c:	7840      	ldrb	r0, [r0, #1]
    3f8e:	2301      	movs	r3, #1
    3f90:	002a      	movs	r2, r5
    3f92:	4e17      	ldr	r6, [pc, #92]	; (3ff0 <move_window+0x98>)
    3f94:	47b0      	blx	r6
				return FR_DISK_ERR;
    3f96:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f98:	2800      	cmp	r0, #0
    3f9a:	d1ec      	bne.n	3f76 <move_window+0x1e>
			fs->wflag = 0;
    3f9c:	2300      	movs	r3, #0
    3f9e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3fa0:	6a23      	ldr	r3, [r4, #32]
    3fa2:	69e2      	ldr	r2, [r4, #28]
    3fa4:	4694      	mov	ip, r2
    3fa6:	4463      	add	r3, ip
    3fa8:	429d      	cmp	r5, r3
    3faa:	d2e1      	bcs.n	3f70 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fac:	78e6      	ldrb	r6, [r4, #3]
    3fae:	2e01      	cmp	r6, #1
    3fb0:	d9de      	bls.n	3f70 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3fb2:	4b0f      	ldr	r3, [pc, #60]	; (3ff0 <move_window+0x98>)
    3fb4:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3fb6:	69e3      	ldr	r3, [r4, #28]
    3fb8:	469c      	mov	ip, r3
    3fba:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3fbc:	7860      	ldrb	r0, [r4, #1]
    3fbe:	2301      	movs	r3, #1
    3fc0:	002a      	movs	r2, r5
    3fc2:	9901      	ldr	r1, [sp, #4]
    3fc4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fc6:	3e01      	subs	r6, #1
    3fc8:	b2f6      	uxtb	r6, r6
    3fca:	2e01      	cmp	r6, #1
    3fcc:	d1f3      	bne.n	3fb6 <move_window+0x5e>
    3fce:	e7cf      	b.n	3f70 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3fd0:	0021      	movs	r1, r4
    3fd2:	3130      	adds	r1, #48	; 0x30
    3fd4:	7860      	ldrb	r0, [r4, #1]
    3fd6:	3301      	adds	r3, #1
    3fd8:	003a      	movs	r2, r7
    3fda:	4d06      	ldr	r5, [pc, #24]	; (3ff4 <move_window+0x9c>)
    3fdc:	47a8      	blx	r5
				return FR_DISK_ERR;
    3fde:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3fe0:	2800      	cmp	r0, #0
    3fe2:	d1c8      	bne.n	3f76 <move_window+0x1e>
			fs->winsect = sector;
    3fe4:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3fe6:	2300      	movs	r3, #0
    3fe8:	e7c5      	b.n	3f76 <move_window+0x1e>
    3fea:	2300      	movs	r3, #0
    3fec:	e7c3      	b.n	3f76 <move_window+0x1e>
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	00003939 	.word	0x00003939
    3ff4:	000038b5 	.word	0x000038b5

00003ff8 <get_fat>:
{
    3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ffa:	0005      	movs	r5, r0
    3ffc:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3ffe:	2901      	cmp	r1, #1
    4000:	d974      	bls.n	40ec <get_fat+0xf4>
		return 1;
    4002:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    4004:	69ab      	ldr	r3, [r5, #24]
    4006:	4299      	cmp	r1, r3
    4008:	d271      	bcs.n	40ee <get_fat+0xf6>
	switch (fs->fs_type) {
    400a:	782b      	ldrb	r3, [r5, #0]
    400c:	2b02      	cmp	r3, #2
    400e:	d034      	beq.n	407a <get_fat+0x82>
    4010:	2b03      	cmp	r3, #3
    4012:	d049      	beq.n	40a8 <get_fat+0xb0>
    4014:	2b01      	cmp	r3, #1
    4016:	d002      	beq.n	401e <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4018:	2001      	movs	r0, #1
    401a:	4240      	negs	r0, r0
    401c:	e067      	b.n	40ee <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    401e:	084e      	lsrs	r6, r1, #1
    4020:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4022:	0a71      	lsrs	r1, r6, #9
    4024:	6a2b      	ldr	r3, [r5, #32]
    4026:	469c      	mov	ip, r3
    4028:	4461      	add	r1, ip
    402a:	0028      	movs	r0, r5
    402c:	4b30      	ldr	r3, [pc, #192]	; (40f0 <get_fat+0xf8>)
    402e:	4798      	blx	r3
    4030:	2800      	cmp	r0, #0
    4032:	d002      	beq.n	403a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4034:	2001      	movs	r0, #1
    4036:	4240      	negs	r0, r0
    4038:	e059      	b.n	40ee <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    403a:	05f3      	lsls	r3, r6, #23
    403c:	0ddb      	lsrs	r3, r3, #23
    403e:	18eb      	adds	r3, r5, r3
    4040:	3330      	adds	r3, #48	; 0x30
    4042:	781f      	ldrb	r7, [r3, #0]
    4044:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4046:	0a71      	lsrs	r1, r6, #9
    4048:	6a2b      	ldr	r3, [r5, #32]
    404a:	469c      	mov	ip, r3
    404c:	4461      	add	r1, ip
    404e:	0028      	movs	r0, r5
    4050:	4b27      	ldr	r3, [pc, #156]	; (40f0 <get_fat+0xf8>)
    4052:	4798      	blx	r3
    4054:	2800      	cmp	r0, #0
    4056:	d002      	beq.n	405e <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4058:	2001      	movs	r0, #1
    405a:	4240      	negs	r0, r0
    405c:	e047      	b.n	40ee <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    405e:	05f6      	lsls	r6, r6, #23
    4060:	0df6      	lsrs	r6, r6, #23
    4062:	19ad      	adds	r5, r5, r6
    4064:	3530      	adds	r5, #48	; 0x30
    4066:	7828      	ldrb	r0, [r5, #0]
    4068:	0200      	lsls	r0, r0, #8
    406a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    406c:	07e3      	lsls	r3, r4, #31
    406e:	d501      	bpl.n	4074 <get_fat+0x7c>
    4070:	0900      	lsrs	r0, r0, #4
    4072:	e03c      	b.n	40ee <get_fat+0xf6>
    4074:	0500      	lsls	r0, r0, #20
    4076:	0d00      	lsrs	r0, r0, #20
    4078:	e039      	b.n	40ee <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    407a:	0a09      	lsrs	r1, r1, #8
    407c:	6a2b      	ldr	r3, [r5, #32]
    407e:	469c      	mov	ip, r3
    4080:	4461      	add	r1, ip
    4082:	0028      	movs	r0, r5
    4084:	4b1a      	ldr	r3, [pc, #104]	; (40f0 <get_fat+0xf8>)
    4086:	4798      	blx	r3
    4088:	2800      	cmp	r0, #0
    408a:	d002      	beq.n	4092 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    408c:	2001      	movs	r0, #1
    408e:	4240      	negs	r0, r0
    4090:	e02d      	b.n	40ee <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    4092:	0064      	lsls	r4, r4, #1
    4094:	23ff      	movs	r3, #255	; 0xff
    4096:	005b      	lsls	r3, r3, #1
    4098:	401c      	ands	r4, r3
		return LD_WORD(p);
    409a:	192d      	adds	r5, r5, r4
    409c:	3530      	adds	r5, #48	; 0x30
    409e:	786b      	ldrb	r3, [r5, #1]
    40a0:	021b      	lsls	r3, r3, #8
    40a2:	7828      	ldrb	r0, [r5, #0]
    40a4:	4318      	orrs	r0, r3
    40a6:	e022      	b.n	40ee <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    40a8:	09c9      	lsrs	r1, r1, #7
    40aa:	6a2b      	ldr	r3, [r5, #32]
    40ac:	469c      	mov	ip, r3
    40ae:	4461      	add	r1, ip
    40b0:	0028      	movs	r0, r5
    40b2:	4b0f      	ldr	r3, [pc, #60]	; (40f0 <get_fat+0xf8>)
    40b4:	4798      	blx	r3
    40b6:	2800      	cmp	r0, #0
    40b8:	d002      	beq.n	40c0 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    40ba:	2001      	movs	r0, #1
    40bc:	4240      	negs	r0, r0
    40be:	e016      	b.n	40ee <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    40c0:	00a4      	lsls	r4, r4, #2
    40c2:	23fe      	movs	r3, #254	; 0xfe
    40c4:	005b      	lsls	r3, r3, #1
    40c6:	401c      	ands	r4, r3
    40c8:	0023      	movs	r3, r4
    40ca:	3330      	adds	r3, #48	; 0x30
    40cc:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    40ce:	78d8      	ldrb	r0, [r3, #3]
    40d0:	0600      	lsls	r0, r0, #24
    40d2:	789a      	ldrb	r2, [r3, #2]
    40d4:	0412      	lsls	r2, r2, #16
    40d6:	4310      	orrs	r0, r2
    40d8:	192c      	adds	r4, r5, r4
    40da:	3430      	adds	r4, #48	; 0x30
    40dc:	7822      	ldrb	r2, [r4, #0]
    40de:	4310      	orrs	r0, r2
    40e0:	785b      	ldrb	r3, [r3, #1]
    40e2:	021b      	lsls	r3, r3, #8
    40e4:	4318      	orrs	r0, r3
    40e6:	0100      	lsls	r0, r0, #4
    40e8:	0900      	lsrs	r0, r0, #4
    40ea:	e000      	b.n	40ee <get_fat+0xf6>
		return 1;
    40ec:	2001      	movs	r0, #1
}
    40ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40f0:	00003f59 	.word	0x00003f59

000040f4 <dir_sdi>:
{
    40f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40f6:	0004      	movs	r4, r0
    40f8:	000d      	movs	r5, r1
	dj->index = idx;
    40fa:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    40fc:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    40fe:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    4100:	2901      	cmp	r1, #1
    4102:	d003      	beq.n	410c <dir_sdi+0x18>
    4104:	6823      	ldr	r3, [r4, #0]
    4106:	699a      	ldr	r2, [r3, #24]
    4108:	4291      	cmp	r1, r2
    410a:	d300      	bcc.n	410e <dir_sdi+0x1a>
}
    410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    410e:	2900      	cmp	r1, #0
    4110:	d119      	bne.n	4146 <dir_sdi+0x52>
    4112:	781a      	ldrb	r2, [r3, #0]
    4114:	2a03      	cmp	r2, #3
    4116:	d013      	beq.n	4140 <dir_sdi+0x4c>
		dj->clust = clst;
    4118:	2200      	movs	r2, #0
    411a:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    411c:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    411e:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4120:	42aa      	cmp	r2, r5
    4122:	d9f3      	bls.n	410c <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4124:	092a      	lsrs	r2, r5, #4
    4126:	b292      	uxth	r2, r2
    4128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    412a:	189b      	adds	r3, r3, r2
    412c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    412e:	6823      	ldr	r3, [r4, #0]
    4130:	3330      	adds	r3, #48	; 0x30
    4132:	220f      	movs	r2, #15
    4134:	4015      	ands	r5, r2
    4136:	016d      	lsls	r5, r5, #5
    4138:	195d      	adds	r5, r3, r5
    413a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    413c:	2000      	movs	r0, #0
    413e:	e7e5      	b.n	410c <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4140:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4142:	2900      	cmp	r1, #0
    4144:	d0e8      	beq.n	4118 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4146:	789e      	ldrb	r6, [r3, #2]
    4148:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    414a:	42b5      	cmp	r5, r6
    414c:	d313      	bcc.n	4176 <dir_sdi+0x82>
    414e:	1bad      	subs	r5, r5, r6
    4150:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    4152:	4f10      	ldr	r7, [pc, #64]	; (4194 <dir_sdi+0xa0>)
    4154:	e000      	b.n	4158 <dir_sdi+0x64>
    4156:	001d      	movs	r5, r3
    4158:	6820      	ldr	r0, [r4, #0]
    415a:	47b8      	blx	r7
    415c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    415e:	1c43      	adds	r3, r0, #1
    4160:	d012      	beq.n	4188 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4162:	2801      	cmp	r0, #1
    4164:	d912      	bls.n	418c <dir_sdi+0x98>
    4166:	6823      	ldr	r3, [r4, #0]
    4168:	699b      	ldr	r3, [r3, #24]
    416a:	4298      	cmp	r0, r3
    416c:	d210      	bcs.n	4190 <dir_sdi+0x9c>
    416e:	1bab      	subs	r3, r5, r6
    4170:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4172:	42b5      	cmp	r5, r6
    4174:	d2ef      	bcs.n	4156 <dir_sdi+0x62>
		dj->clust = clst;
    4176:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4178:	6820      	ldr	r0, [r4, #0]
    417a:	4b07      	ldr	r3, [pc, #28]	; (4198 <dir_sdi+0xa4>)
    417c:	4798      	blx	r3
    417e:	092b      	lsrs	r3, r5, #4
    4180:	b29b      	uxth	r3, r3
    4182:	1818      	adds	r0, r3, r0
    4184:	6120      	str	r0, [r4, #16]
    4186:	e7d2      	b.n	412e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4188:	2001      	movs	r0, #1
    418a:	e7bf      	b.n	410c <dir_sdi+0x18>
				return FR_INT_ERR;
    418c:	2002      	movs	r0, #2
    418e:	e7bd      	b.n	410c <dir_sdi+0x18>
    4190:	2002      	movs	r0, #2
    4192:	e7bb      	b.n	410c <dir_sdi+0x18>
    4194:	00003ff9 	.word	0x00003ff9
    4198:	00003a9f 	.word	0x00003a9f

0000419c <put_fat>:
{
    419c:	b5f0      	push	{r4, r5, r6, r7, lr}
    419e:	46c6      	mov	lr, r8
    41a0:	b500      	push	{lr}
    41a2:	0007      	movs	r7, r0
    41a4:	000c      	movs	r4, r1
    41a6:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    41a8:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    41aa:	2901      	cmp	r1, #1
    41ac:	d902      	bls.n	41b4 <put_fat+0x18>
    41ae:	6983      	ldr	r3, [r0, #24]
    41b0:	4299      	cmp	r1, r3
    41b2:	d303      	bcc.n	41bc <put_fat+0x20>
}
    41b4:	0028      	movs	r0, r5
    41b6:	bc04      	pop	{r2}
    41b8:	4690      	mov	r8, r2
    41ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    41bc:	7803      	ldrb	r3, [r0, #0]
    41be:	2b02      	cmp	r3, #2
    41c0:	d053      	beq.n	426a <put_fat+0xce>
    41c2:	2b03      	cmp	r3, #3
    41c4:	d063      	beq.n	428e <put_fat+0xf2>
			res = FR_INT_ERR;
    41c6:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    41c8:	2b01      	cmp	r3, #1
    41ca:	d002      	beq.n	41d2 <put_fat+0x36>
		fs->wflag = 1;
    41cc:	2301      	movs	r3, #1
    41ce:	713b      	strb	r3, [r7, #4]
    41d0:	e7f0      	b.n	41b4 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    41d2:	084b      	lsrs	r3, r1, #1
    41d4:	4698      	mov	r8, r3
    41d6:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    41d8:	4643      	mov	r3, r8
    41da:	0a59      	lsrs	r1, r3, #9
    41dc:	6a03      	ldr	r3, [r0, #32]
    41de:	469c      	mov	ip, r3
    41e0:	4461      	add	r1, ip
    41e2:	4b3b      	ldr	r3, [pc, #236]	; (42d0 <put_fat+0x134>)
    41e4:	4798      	blx	r3
    41e6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    41e8:	d1f0      	bne.n	41cc <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    41ea:	4643      	mov	r3, r8
    41ec:	05db      	lsls	r3, r3, #23
    41ee:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    41f0:	07e2      	lsls	r2, r4, #31
    41f2:	d51f      	bpl.n	4234 <put_fat+0x98>
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	3330      	adds	r3, #48	; 0x30
    41f8:	7819      	ldrb	r1, [r3, #0]
    41fa:	220f      	movs	r2, #15
    41fc:	400a      	ands	r2, r1
    41fe:	0131      	lsls	r1, r6, #4
    4200:	20ff      	movs	r0, #255	; 0xff
    4202:	0100      	lsls	r0, r0, #4
    4204:	4001      	ands	r1, r0
    4206:	430a      	orrs	r2, r1
    4208:	701a      	strb	r2, [r3, #0]
			bc++;
    420a:	4644      	mov	r4, r8
    420c:	3401      	adds	r4, #1
			fs->wflag = 1;
    420e:	2301      	movs	r3, #1
    4210:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4212:	0a61      	lsrs	r1, r4, #9
    4214:	6a3b      	ldr	r3, [r7, #32]
    4216:	469c      	mov	ip, r3
    4218:	4461      	add	r1, ip
    421a:	0038      	movs	r0, r7
    421c:	4b2c      	ldr	r3, [pc, #176]	; (42d0 <put_fat+0x134>)
    421e:	4798      	blx	r3
			if (res != FR_OK) break;
    4220:	2800      	cmp	r0, #0
    4222:	d151      	bne.n	42c8 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4224:	05e4      	lsls	r4, r4, #23
    4226:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4228:	0936      	lsrs	r6, r6, #4
    422a:	b2f6      	uxtb	r6, r6
    422c:	193c      	adds	r4, r7, r4
    422e:	3430      	adds	r4, #48	; 0x30
    4230:	7026      	strb	r6, [r4, #0]
			break;
    4232:	e7cb      	b.n	41cc <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4234:	18fb      	adds	r3, r7, r3
    4236:	3330      	adds	r3, #48	; 0x30
    4238:	701e      	strb	r6, [r3, #0]
			bc++;
    423a:	4644      	mov	r4, r8
    423c:	3401      	adds	r4, #1
			fs->wflag = 1;
    423e:	2301      	movs	r3, #1
    4240:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4242:	0a61      	lsrs	r1, r4, #9
    4244:	6a3b      	ldr	r3, [r7, #32]
    4246:	469c      	mov	ip, r3
    4248:	4461      	add	r1, ip
    424a:	0038      	movs	r0, r7
    424c:	4b20      	ldr	r3, [pc, #128]	; (42d0 <put_fat+0x134>)
    424e:	4798      	blx	r3
			if (res != FR_OK) break;
    4250:	2800      	cmp	r0, #0
    4252:	d13b      	bne.n	42cc <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4254:	05e4      	lsls	r4, r4, #23
    4256:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4258:	193b      	adds	r3, r7, r4
    425a:	3330      	adds	r3, #48	; 0x30
    425c:	781b      	ldrb	r3, [r3, #0]
    425e:	220f      	movs	r2, #15
    4260:	4393      	bics	r3, r2
    4262:	0536      	lsls	r6, r6, #20
    4264:	0f36      	lsrs	r6, r6, #28
    4266:	431e      	orrs	r6, r3
    4268:	e7e0      	b.n	422c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    426a:	0a09      	lsrs	r1, r1, #8
    426c:	6a03      	ldr	r3, [r0, #32]
    426e:	469c      	mov	ip, r3
    4270:	4461      	add	r1, ip
    4272:	4b17      	ldr	r3, [pc, #92]	; (42d0 <put_fat+0x134>)
    4274:	4798      	blx	r3
    4276:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4278:	d1a8      	bne.n	41cc <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    427a:	0063      	lsls	r3, r4, #1
    427c:	24ff      	movs	r4, #255	; 0xff
    427e:	0064      	lsls	r4, r4, #1
    4280:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4282:	18fb      	adds	r3, r7, r3
    4284:	3330      	adds	r3, #48	; 0x30
    4286:	701e      	strb	r6, [r3, #0]
    4288:	0a36      	lsrs	r6, r6, #8
    428a:	705e      	strb	r6, [r3, #1]
			break;
    428c:	e79e      	b.n	41cc <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    428e:	09c9      	lsrs	r1, r1, #7
    4290:	6a03      	ldr	r3, [r0, #32]
    4292:	469c      	mov	ip, r3
    4294:	4461      	add	r1, ip
    4296:	4b0e      	ldr	r3, [pc, #56]	; (42d0 <put_fat+0x134>)
    4298:	4798      	blx	r3
    429a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    429c:	d196      	bne.n	41cc <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    429e:	00a4      	lsls	r4, r4, #2
    42a0:	23fe      	movs	r3, #254	; 0xfe
    42a2:	005b      	lsls	r3, r3, #1
    42a4:	401c      	ands	r4, r3
    42a6:	0022      	movs	r2, r4
    42a8:	3230      	adds	r2, #48	; 0x30
    42aa:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    42ac:	78d3      	ldrb	r3, [r2, #3]
    42ae:	193c      	adds	r4, r7, r4
    42b0:	3430      	adds	r4, #48	; 0x30
    42b2:	091b      	lsrs	r3, r3, #4
    42b4:	071b      	lsls	r3, r3, #28
    42b6:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    42b8:	7026      	strb	r6, [r4, #0]
    42ba:	0a33      	lsrs	r3, r6, #8
    42bc:	7053      	strb	r3, [r2, #1]
    42be:	0c33      	lsrs	r3, r6, #16
    42c0:	7093      	strb	r3, [r2, #2]
    42c2:	0e36      	lsrs	r6, r6, #24
    42c4:	70d6      	strb	r6, [r2, #3]
			break;
    42c6:	e781      	b.n	41cc <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    42c8:	0005      	movs	r5, r0
    42ca:	e77f      	b.n	41cc <put_fat+0x30>
    42cc:	0005      	movs	r5, r0
    42ce:	e77d      	b.n	41cc <put_fat+0x30>
    42d0:	00003f59 	.word	0x00003f59

000042d4 <create_chain>:
{
    42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d6:	46c6      	mov	lr, r8
    42d8:	b500      	push	{lr}
    42da:	0005      	movs	r5, r0
    42dc:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    42de:	2900      	cmp	r1, #0
    42e0:	d107      	bne.n	42f2 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    42e2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    42e4:	2e00      	cmp	r6, #0
    42e6:	d00d      	beq.n	4304 <create_chain+0x30>
    42e8:	6983      	ldr	r3, [r0, #24]
    42ea:	429e      	cmp	r6, r3
    42ec:	d30b      	bcc.n	4306 <create_chain+0x32>
    42ee:	2601      	movs	r6, #1
    42f0:	e009      	b.n	4306 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    42f2:	4b26      	ldr	r3, [pc, #152]	; (438c <create_chain+0xb8>)
    42f4:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    42f6:	2801      	cmp	r0, #1
    42f8:	d93d      	bls.n	4376 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    42fa:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    42fc:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    42fe:	4298      	cmp	r0, r3
    4300:	d201      	bcs.n	4306 <create_chain+0x32>
    4302:	e03d      	b.n	4380 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4304:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4306:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4308:	4f20      	ldr	r7, [pc, #128]	; (438c <create_chain+0xb8>)
    430a:	e00a      	b.n	4322 <create_chain+0x4e>
    430c:	0021      	movs	r1, r4
    430e:	0028      	movs	r0, r5
    4310:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4312:	2800      	cmp	r0, #0
    4314:	d00d      	beq.n	4332 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4316:	1c43      	adds	r3, r0, #1
    4318:	d032      	beq.n	4380 <create_chain+0xac>
    431a:	2801      	cmp	r0, #1
    431c:	d030      	beq.n	4380 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    431e:	42b4      	cmp	r4, r6
    4320:	d02d      	beq.n	437e <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4322:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4324:	69ab      	ldr	r3, [r5, #24]
    4326:	429c      	cmp	r4, r3
    4328:	d3f0      	bcc.n	430c <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    432a:	2e01      	cmp	r6, #1
    432c:	d925      	bls.n	437a <create_chain+0xa6>
			ncl = 2;
    432e:	2402      	movs	r4, #2
    4330:	e7ec      	b.n	430c <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4332:	4a17      	ldr	r2, [pc, #92]	; (4390 <create_chain+0xbc>)
    4334:	0021      	movs	r1, r4
    4336:	0028      	movs	r0, r5
    4338:	4b16      	ldr	r3, [pc, #88]	; (4394 <create_chain+0xc0>)
    433a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    433c:	2800      	cmp	r0, #0
    433e:	d113      	bne.n	4368 <create_chain+0x94>
    4340:	4643      	mov	r3, r8
    4342:	2b00      	cmp	r3, #0
    4344:	d109      	bne.n	435a <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4346:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4348:	692b      	ldr	r3, [r5, #16]
    434a:	1c5a      	adds	r2, r3, #1
    434c:	d01b      	beq.n	4386 <create_chain+0xb2>
			fs->free_clust--;
    434e:	3b01      	subs	r3, #1
    4350:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4352:	2301      	movs	r3, #1
    4354:	716b      	strb	r3, [r5, #5]
    4356:	0020      	movs	r0, r4
    4358:	e012      	b.n	4380 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    435a:	0022      	movs	r2, r4
    435c:	4641      	mov	r1, r8
    435e:	0028      	movs	r0, r5
    4360:	4b0c      	ldr	r3, [pc, #48]	; (4394 <create_chain+0xc0>)
    4362:	4798      	blx	r3
	if (res == FR_OK) {
    4364:	2800      	cmp	r0, #0
    4366:	d0ee      	beq.n	4346 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4368:	3801      	subs	r0, #1
    436a:	4242      	negs	r2, r0
    436c:	4142      	adcs	r2, r0
    436e:	4250      	negs	r0, r2
    4370:	2301      	movs	r3, #1
    4372:	4318      	orrs	r0, r3
    4374:	e004      	b.n	4380 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4376:	2001      	movs	r0, #1
    4378:	e002      	b.n	4380 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    437a:	2000      	movs	r0, #0
    437c:	e000      	b.n	4380 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    437e:	2000      	movs	r0, #0
}
    4380:	bc04      	pop	{r2}
    4382:	4690      	mov	r8, r2
    4384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4386:	0020      	movs	r0, r4
    4388:	e7fa      	b.n	4380 <create_chain+0xac>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	00003ff9 	.word	0x00003ff9
    4390:	0fffffff 	.word	0x0fffffff
    4394:	0000419d 	.word	0x0000419d

00004398 <remove_chain>:
{
    4398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439a:	46ce      	mov	lr, r9
    439c:	4647      	mov	r7, r8
    439e:	b580      	push	{r7, lr}
    43a0:	0004      	movs	r4, r0
    43a2:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    43a4:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    43a6:	2901      	cmp	r1, #1
    43a8:	d902      	bls.n	43b0 <remove_chain+0x18>
    43aa:	69a3      	ldr	r3, [r4, #24]
    43ac:	4299      	cmp	r1, r3
    43ae:	d303      	bcc.n	43b8 <remove_chain+0x20>
}
    43b0:	bc0c      	pop	{r2, r3}
    43b2:	4690      	mov	r8, r2
    43b4:	4699      	mov	r9, r3
    43b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    43b8:	4f13      	ldr	r7, [pc, #76]	; (4408 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    43ba:	4b14      	ldr	r3, [pc, #80]	; (440c <remove_chain+0x74>)
    43bc:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    43be:	2301      	movs	r3, #1
    43c0:	4699      	mov	r9, r3
    43c2:	e003      	b.n	43cc <remove_chain+0x34>
    43c4:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    43c6:	69a3      	ldr	r3, [r4, #24]
    43c8:	42b3      	cmp	r3, r6
    43ca:	d9f1      	bls.n	43b0 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    43cc:	0029      	movs	r1, r5
    43ce:	0020      	movs	r0, r4
    43d0:	47b8      	blx	r7
    43d2:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    43d4:	d011      	beq.n	43fa <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    43d6:	2801      	cmp	r0, #1
    43d8:	d011      	beq.n	43fe <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    43da:	1c43      	adds	r3, r0, #1
    43dc:	d011      	beq.n	4402 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    43de:	2200      	movs	r2, #0
    43e0:	0029      	movs	r1, r5
    43e2:	0020      	movs	r0, r4
    43e4:	47c0      	blx	r8
			if (res != FR_OK) break;
    43e6:	2800      	cmp	r0, #0
    43e8:	d1e2      	bne.n	43b0 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    43ea:	6923      	ldr	r3, [r4, #16]
    43ec:	1c5a      	adds	r2, r3, #1
    43ee:	d0e9      	beq.n	43c4 <remove_chain+0x2c>
				fs->free_clust++;
    43f0:	3301      	adds	r3, #1
    43f2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    43f4:	464b      	mov	r3, r9
    43f6:	7163      	strb	r3, [r4, #5]
    43f8:	e7e4      	b.n	43c4 <remove_chain+0x2c>
    43fa:	2000      	movs	r0, #0
    43fc:	e7d8      	b.n	43b0 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    43fe:	2002      	movs	r0, #2
    4400:	e7d6      	b.n	43b0 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4402:	2001      	movs	r0, #1
    4404:	e7d4      	b.n	43b0 <remove_chain+0x18>
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	00003ff9 	.word	0x00003ff9
    440c:	0000419d 	.word	0x0000419d

00004410 <dir_next>:
{
    4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4412:	46d6      	mov	lr, sl
    4414:	4647      	mov	r7, r8
    4416:	b580      	push	{r7, lr}
    4418:	0006      	movs	r6, r0
    441a:	000d      	movs	r5, r1
	i = dj->index + 1;
    441c:	88c4      	ldrh	r4, [r0, #6]
    441e:	3401      	adds	r4, #1
    4420:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4422:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4424:	2c00      	cmp	r4, #0
    4426:	d103      	bne.n	4430 <dir_next+0x20>
}
    4428:	bc0c      	pop	{r2, r3}
    442a:	4690      	mov	r8, r2
    442c:	469a      	mov	sl, r3
    442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4430:	6933      	ldr	r3, [r6, #16]
    4432:	2b00      	cmp	r3, #0
    4434:	d0f8      	beq.n	4428 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4436:	270f      	movs	r7, #15
    4438:	4027      	ands	r7, r4
    443a:	d10f      	bne.n	445c <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    443c:	3301      	adds	r3, #1
    443e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4440:	68f1      	ldr	r1, [r6, #12]
    4442:	2900      	cmp	r1, #0
    4444:	d104      	bne.n	4450 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4446:	6833      	ldr	r3, [r6, #0]
    4448:	891b      	ldrh	r3, [r3, #8]
    444a:	42a3      	cmp	r3, r4
    444c:	d9ec      	bls.n	4428 <dir_next+0x18>
    444e:	e005      	b.n	445c <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4450:	6830      	ldr	r0, [r6, #0]
    4452:	7883      	ldrb	r3, [r0, #2]
    4454:	3b01      	subs	r3, #1
    4456:	0922      	lsrs	r2, r4, #4
    4458:	421a      	tst	r2, r3
    445a:	d007      	beq.n	446c <dir_next+0x5c>
	dj->index = i;
    445c:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    445e:	6833      	ldr	r3, [r6, #0]
    4460:	3330      	adds	r3, #48	; 0x30
    4462:	017f      	lsls	r7, r7, #5
    4464:	19df      	adds	r7, r3, r7
    4466:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4468:	2000      	movs	r0, #0
    446a:	e7dd      	b.n	4428 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    446c:	4b2c      	ldr	r3, [pc, #176]	; (4520 <dir_next+0x110>)
    446e:	4798      	blx	r3
    4470:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4472:	2002      	movs	r0, #2
    4474:	4643      	mov	r3, r8
    4476:	2b01      	cmp	r3, #1
    4478:	d9d6      	bls.n	4428 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    447a:	3301      	adds	r3, #1
    447c:	d04b      	beq.n	4516 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    447e:	6833      	ldr	r3, [r6, #0]
    4480:	699a      	ldr	r2, [r3, #24]
    4482:	4590      	cmp	r8, r2
    4484:	d33f      	bcc.n	4506 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4486:	3002      	adds	r0, #2
    4488:	2d00      	cmp	r5, #0
    448a:	d0cd      	beq.n	4428 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    448c:	68f1      	ldr	r1, [r6, #12]
    448e:	0018      	movs	r0, r3
    4490:	4b24      	ldr	r3, [pc, #144]	; (4524 <dir_next+0x114>)
    4492:	4798      	blx	r3
    4494:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4496:	2007      	movs	r0, #7
    4498:	4643      	mov	r3, r8
    449a:	2b00      	cmp	r3, #0
    449c:	d0c4      	beq.n	4428 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    449e:	3805      	subs	r0, #5
    44a0:	2b01      	cmp	r3, #1
    44a2:	d0c1      	beq.n	4428 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    44a4:	3801      	subs	r0, #1
    44a6:	3301      	adds	r3, #1
    44a8:	d0be      	beq.n	4428 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    44aa:	2100      	movs	r1, #0
    44ac:	6830      	ldr	r0, [r6, #0]
    44ae:	4b1e      	ldr	r3, [pc, #120]	; (4528 <dir_next+0x118>)
    44b0:	4798      	blx	r3
    44b2:	0003      	movs	r3, r0
    44b4:	2001      	movs	r0, #1
    44b6:	2b00      	cmp	r3, #0
    44b8:	d1b6      	bne.n	4428 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    44ba:	6830      	ldr	r0, [r6, #0]
    44bc:	3030      	adds	r0, #48	; 0x30
    44be:	2280      	movs	r2, #128	; 0x80
    44c0:	0092      	lsls	r2, r2, #2
    44c2:	2100      	movs	r1, #0
    44c4:	4b19      	ldr	r3, [pc, #100]	; (452c <dir_next+0x11c>)
    44c6:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    44c8:	6835      	ldr	r5, [r6, #0]
    44ca:	4641      	mov	r1, r8
    44cc:	0028      	movs	r0, r5
    44ce:	4b18      	ldr	r3, [pc, #96]	; (4530 <dir_next+0x120>)
    44d0:	4798      	blx	r3
    44d2:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44d4:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    44d6:	2301      	movs	r3, #1
    44d8:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44da:	6833      	ldr	r3, [r6, #0]
    44dc:	789a      	ldrb	r2, [r3, #2]
    44de:	42aa      	cmp	r2, r5
    44e0:	d90e      	bls.n	4500 <dir_next+0xf0>
						dj->fs->wflag = 1;
    44e2:	4652      	mov	r2, sl
    44e4:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    44e6:	2100      	movs	r1, #0
    44e8:	6830      	ldr	r0, [r6, #0]
    44ea:	4b0f      	ldr	r3, [pc, #60]	; (4528 <dir_next+0x118>)
    44ec:	4798      	blx	r3
    44ee:	2800      	cmp	r0, #0
    44f0:	d113      	bne.n	451a <dir_next+0x10a>
						dj->fs->winsect++;
    44f2:	6832      	ldr	r2, [r6, #0]
    44f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    44f6:	3301      	adds	r3, #1
    44f8:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44fa:	3501      	adds	r5, #1
    44fc:	b2ed      	uxtb	r5, r5
    44fe:	e7ec      	b.n	44da <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4502:	1b52      	subs	r2, r2, r5
    4504:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4506:	4643      	mov	r3, r8
    4508:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    450a:	4641      	mov	r1, r8
    450c:	6830      	ldr	r0, [r6, #0]
    450e:	4b08      	ldr	r3, [pc, #32]	; (4530 <dir_next+0x120>)
    4510:	4798      	blx	r3
    4512:	6130      	str	r0, [r6, #16]
    4514:	e7a2      	b.n	445c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4516:	2001      	movs	r0, #1
    4518:	e786      	b.n	4428 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    451a:	2001      	movs	r0, #1
    451c:	e784      	b.n	4428 <dir_next+0x18>
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	00003ff9 	.word	0x00003ff9
    4524:	000042d5 	.word	0x000042d5
    4528:	00003f59 	.word	0x00003f59
    452c:	00003a8d 	.word	0x00003a8d
    4530:	00003a9f 	.word	0x00003a9f

00004534 <dir_find>:
{
    4534:	b5f0      	push	{r4, r5, r6, r7, lr}
    4536:	46de      	mov	lr, fp
    4538:	4657      	mov	r7, sl
    453a:	464e      	mov	r6, r9
    453c:	4645      	mov	r5, r8
    453e:	b5e0      	push	{r5, r6, r7, lr}
    4540:	b083      	sub	sp, #12
    4542:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4544:	2100      	movs	r1, #0
    4546:	4b5a      	ldr	r3, [pc, #360]	; (46b0 <dir_find+0x17c>)
    4548:	4798      	blx	r3
    454a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    454c:	d000      	beq.n	4550 <dir_find+0x1c>
    454e:	e09e      	b.n	468e <dir_find+0x15a>
    4550:	23ff      	movs	r3, #255	; 0xff
    4552:	4699      	mov	r9, r3
    4554:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4556:	4b57      	ldr	r3, [pc, #348]	; (46b4 <dir_find+0x180>)
    4558:	469b      	mov	fp, r3
    455a:	e01b      	b.n	4594 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    455c:	2b0f      	cmp	r3, #15
    455e:	d030      	beq.n	45c2 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4560:	4653      	mov	r3, sl
    4562:	2b00      	cmp	r3, #0
    4564:	d105      	bne.n	4572 <dir_find+0x3e>
    4566:	0020      	movs	r0, r4
    4568:	4b53      	ldr	r3, [pc, #332]	; (46b8 <dir_find+0x184>)
    456a:	4798      	blx	r3
    456c:	4581      	cmp	r9, r0
    456e:	d100      	bne.n	4572 <dir_find+0x3e>
    4570:	e08d      	b.n	468e <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4572:	2301      	movs	r3, #1
    4574:	425b      	negs	r3, r3
    4576:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4578:	69a8      	ldr	r0, [r5, #24]
    457a:	7ac3      	ldrb	r3, [r0, #11]
    457c:	07db      	lsls	r3, r3, #31
    457e:	d400      	bmi.n	4582 <dir_find+0x4e>
    4580:	e07d      	b.n	467e <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4582:	23ff      	movs	r3, #255	; 0xff
    4584:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4586:	2100      	movs	r1, #0
    4588:	0028      	movs	r0, r5
    458a:	4b4c      	ldr	r3, [pc, #304]	; (46bc <dir_find+0x188>)
    458c:	4798      	blx	r3
    458e:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4590:	d000      	beq.n	4594 <dir_find+0x60>
    4592:	e07c      	b.n	468e <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4594:	6929      	ldr	r1, [r5, #16]
    4596:	6828      	ldr	r0, [r5, #0]
    4598:	47d8      	blx	fp
    459a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    459c:	d177      	bne.n	468e <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    459e:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    45a0:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    45a2:	2e00      	cmp	r6, #0
    45a4:	d100      	bne.n	45a8 <dir_find+0x74>
    45a6:	e080      	b.n	46aa <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    45a8:	7ae2      	ldrb	r2, [r4, #11]
    45aa:	233f      	movs	r3, #63	; 0x3f
    45ac:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    45ae:	2ee5      	cmp	r6, #229	; 0xe5
    45b0:	d100      	bne.n	45b4 <dir_find+0x80>
    45b2:	e077      	b.n	46a4 <dir_find+0x170>
    45b4:	0712      	lsls	r2, r2, #28
    45b6:	d5d1      	bpl.n	455c <dir_find+0x28>
    45b8:	2b0f      	cmp	r3, #15
    45ba:	d002      	beq.n	45c2 <dir_find+0x8e>
			ord = 0xFF;
    45bc:	23ff      	movs	r3, #255	; 0xff
    45be:	469a      	mov	sl, r3
    45c0:	e7e1      	b.n	4586 <dir_find+0x52>
				if (dj->lfn) {
    45c2:	69ef      	ldr	r7, [r5, #28]
    45c4:	2f00      	cmp	r7, #0
    45c6:	d0de      	beq.n	4586 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    45c8:	0673      	lsls	r3, r6, #25
    45ca:	d518      	bpl.n	45fe <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    45cc:	7b63      	ldrb	r3, [r4, #13]
    45ce:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    45d0:	2340      	movs	r3, #64	; 0x40
    45d2:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    45d4:	88eb      	ldrh	r3, [r5, #6]
    45d6:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45d8:	7b63      	ldrb	r3, [r4, #13]
    45da:	9300      	str	r3, [sp, #0]
    45dc:	22ff      	movs	r2, #255	; 0xff
    45de:	4692      	mov	sl, r2
    45e0:	454b      	cmp	r3, r9
    45e2:	d1d0      	bne.n	4586 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    45e4:	7823      	ldrb	r3, [r4, #0]
    45e6:	3abf      	subs	r2, #191	; 0xbf
    45e8:	4393      	bics	r3, r2
    45ea:	3b01      	subs	r3, #1
    45ec:	005a      	lsls	r2, r3, #1
    45ee:	18d2      	adds	r2, r2, r3
    45f0:	0092      	lsls	r2, r2, #2
    45f2:	4692      	mov	sl, r2
    45f4:	449a      	add	sl, r3
	s = 0; wc = 1;
    45f6:	2201      	movs	r2, #1
    45f8:	2300      	movs	r3, #0
    45fa:	4699      	mov	r9, r3
    45fc:	e01d      	b.n	463a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45fe:	45b2      	cmp	sl, r6
    4600:	d0ea      	beq.n	45d8 <dir_find+0xa4>
    4602:	23ff      	movs	r3, #255	; 0xff
    4604:	469a      	mov	sl, r3
    4606:	e7be      	b.n	4586 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4608:	4b2d      	ldr	r3, [pc, #180]	; (46c0 <dir_find+0x18c>)
    460a:	4798      	blx	r3
    460c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    460e:	4653      	mov	r3, sl
    4610:	2bfe      	cmp	r3, #254	; 0xfe
    4612:	d81f      	bhi.n	4654 <dir_find+0x120>
    4614:	2301      	movs	r3, #1
    4616:	4453      	add	r3, sl
    4618:	4698      	mov	r8, r3
    461a:	4653      	mov	r3, sl
    461c:	005b      	lsls	r3, r3, #1
    461e:	5bd8      	ldrh	r0, [r3, r7]
    4620:	4b27      	ldr	r3, [pc, #156]	; (46c0 <dir_find+0x18c>)
    4622:	4798      	blx	r3
    4624:	0002      	movs	r2, r0
    4626:	9b01      	ldr	r3, [sp, #4]
    4628:	4283      	cmp	r3, r0
    462a:	d113      	bne.n	4654 <dir_find+0x120>
    462c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    462e:	2301      	movs	r3, #1
    4630:	469c      	mov	ip, r3
    4632:	44e1      	add	r9, ip
    4634:	464b      	mov	r3, r9
    4636:	2b0d      	cmp	r3, #13
    4638:	d011      	beq.n	465e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    463a:	4b22      	ldr	r3, [pc, #136]	; (46c4 <dir_find+0x190>)
    463c:	4649      	mov	r1, r9
    463e:	5cc9      	ldrb	r1, [r1, r3]
    4640:	1863      	adds	r3, r4, r1
    4642:	785b      	ldrb	r3, [r3, #1]
    4644:	021b      	lsls	r3, r3, #8
    4646:	5c60      	ldrb	r0, [r4, r1]
    4648:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    464a:	2a00      	cmp	r2, #0
    464c:	d1dc      	bne.n	4608 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    464e:	4b1e      	ldr	r3, [pc, #120]	; (46c8 <dir_find+0x194>)
    4650:	4298      	cmp	r0, r3
    4652:	d0ec      	beq.n	462e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4654:	9b00      	ldr	r3, [sp, #0]
    4656:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4658:	23ff      	movs	r3, #255	; 0xff
    465a:	469a      	mov	sl, r3
    465c:	e793      	b.n	4586 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    465e:	7823      	ldrb	r3, [r4, #0]
    4660:	065b      	lsls	r3, r3, #25
    4662:	d506      	bpl.n	4672 <dir_find+0x13e>
    4664:	2a00      	cmp	r2, #0
    4666:	d004      	beq.n	4672 <dir_find+0x13e>
    4668:	4653      	mov	r3, sl
    466a:	005b      	lsls	r3, r3, #1
    466c:	5bdb      	ldrh	r3, [r3, r7]
    466e:	2b00      	cmp	r3, #0
    4670:	d1f0      	bne.n	4654 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4672:	3e01      	subs	r6, #1
    4674:	b2f3      	uxtb	r3, r6
    4676:	469a      	mov	sl, r3
    4678:	9b00      	ldr	r3, [sp, #0]
    467a:	4699      	mov	r9, r3
    467c:	e783      	b.n	4586 <dir_find+0x52>
    467e:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4680:	5ce1      	ldrb	r1, [r4, r3]
    4682:	5cc2      	ldrb	r2, [r0, r3]
    4684:	4291      	cmp	r1, r2
    4686:	d10a      	bne.n	469e <dir_find+0x16a>
    4688:	3301      	adds	r3, #1
    468a:	2b0b      	cmp	r3, #11
    468c:	d1f8      	bne.n	4680 <dir_find+0x14c>
}
    468e:	0038      	movs	r0, r7
    4690:	b003      	add	sp, #12
    4692:	bc3c      	pop	{r2, r3, r4, r5}
    4694:	4690      	mov	r8, r2
    4696:	4699      	mov	r9, r3
    4698:	46a2      	mov	sl, r4
    469a:	46ab      	mov	fp, r5
    469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    469e:	23ff      	movs	r3, #255	; 0xff
    46a0:	469a      	mov	sl, r3
    46a2:	e770      	b.n	4586 <dir_find+0x52>
			ord = 0xFF;
    46a4:	23ff      	movs	r3, #255	; 0xff
    46a6:	469a      	mov	sl, r3
    46a8:	e76d      	b.n	4586 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    46aa:	2704      	movs	r7, #4
    46ac:	e7ef      	b.n	468e <dir_find+0x15a>
    46ae:	46c0      	nop			; (mov r8, r8)
    46b0:	000040f5 	.word	0x000040f5
    46b4:	00003f59 	.word	0x00003f59
    46b8:	00003ab7 	.word	0x00003ab7
    46bc:	00004411 	.word	0x00004411
    46c0:	000054d1 	.word	0x000054d1
    46c4:	00007174 	.word	0x00007174
    46c8:	0000ffff 	.word	0x0000ffff

000046cc <dir_register>:
{
    46cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ce:	46de      	mov	lr, fp
    46d0:	4657      	mov	r7, sl
    46d2:	464e      	mov	r6, r9
    46d4:	4645      	mov	r5, r8
    46d6:	b5e0      	push	{r5, r6, r7, lr}
    46d8:	b089      	sub	sp, #36	; 0x24
    46da:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    46dc:	6987      	ldr	r7, [r0, #24]
    46de:	69c3      	ldr	r3, [r0, #28]
    46e0:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    46e2:	ad05      	add	r5, sp, #20
    46e4:	220c      	movs	r2, #12
    46e6:	0039      	movs	r1, r7
    46e8:	0028      	movs	r0, r5
    46ea:	4ba7      	ldr	r3, [pc, #668]	; (4988 <dir_register+0x2bc>)
    46ec:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    46ee:	7aeb      	ldrb	r3, [r5, #11]
    46f0:	07db      	lsls	r3, r3, #31
    46f2:	d400      	bmi.n	46f6 <dir_register+0x2a>
    46f4:	e070      	b.n	47d8 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    46f6:	2300      	movs	r3, #0
    46f8:	72fb      	strb	r3, [r7, #11]
    46fa:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    46fc:	220b      	movs	r2, #11
    46fe:	a905      	add	r1, sp, #20
    4700:	0038      	movs	r0, r7
    4702:	4ba1      	ldr	r3, [pc, #644]	; (4988 <dir_register+0x2bc>)
    4704:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4706:	2301      	movs	r3, #1
		ns[i--] = c;
    4708:	ad03      	add	r5, sp, #12
    470a:	001e      	movs	r6, r3
    470c:	46a0      	mov	r8, r4
    470e:	e049      	b.n	47a4 <dir_register+0xd8>
    4710:	3801      	subs	r0, #1
    4712:	1829      	adds	r1, r5, r0
    4714:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4716:	091b      	lsrs	r3, r3, #4
    4718:	b29b      	uxth	r3, r3
	} while (seq);
    471a:	2b00      	cmp	r3, #0
    471c:	d007      	beq.n	472e <dir_register+0x62>
		c = (seq % 16) + '0';
    471e:	0021      	movs	r1, r4
    4720:	4019      	ands	r1, r3
    4722:	000a      	movs	r2, r1
    4724:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4726:	2a39      	cmp	r2, #57	; 0x39
    4728:	d9f2      	bls.n	4710 <dir_register+0x44>
    472a:	3207      	adds	r2, #7
    472c:	e7f0      	b.n	4710 <dir_register+0x44>
	ns[i] = '~';
    472e:	337e      	adds	r3, #126	; 0x7e
    4730:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4732:	2800      	cmp	r0, #0
    4734:	d00a      	beq.n	474c <dir_register+0x80>
    4736:	783b      	ldrb	r3, [r7, #0]
    4738:	2b20      	cmp	r3, #32
    473a:	d009      	beq.n	4750 <dir_register+0x84>
    473c:	2300      	movs	r3, #0
    473e:	3301      	adds	r3, #1
    4740:	4298      	cmp	r0, r3
    4742:	d007      	beq.n	4754 <dir_register+0x88>
    4744:	5cfa      	ldrb	r2, [r7, r3]
    4746:	2a20      	cmp	r2, #32
    4748:	d1f9      	bne.n	473e <dir_register+0x72>
    474a:	e009      	b.n	4760 <dir_register+0x94>
    474c:	0003      	movs	r3, r0
    474e:	e007      	b.n	4760 <dir_register+0x94>
    4750:	2300      	movs	r3, #0
    4752:	e005      	b.n	4760 <dir_register+0x94>
    4754:	0003      	movs	r3, r0
    4756:	e003      	b.n	4760 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4758:	54fa      	strb	r2, [r7, r3]
    475a:	3301      	adds	r3, #1
	} while (j < 8);
    475c:	2b07      	cmp	r3, #7
    475e:	d805      	bhi.n	476c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4760:	2220      	movs	r2, #32
    4762:	2807      	cmp	r0, #7
    4764:	d8f8      	bhi.n	4758 <dir_register+0x8c>
    4766:	5c2a      	ldrb	r2, [r5, r0]
    4768:	3001      	adds	r0, #1
    476a:	e7f5      	b.n	4758 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    476c:	4640      	mov	r0, r8
    476e:	4b87      	ldr	r3, [pc, #540]	; (498c <dir_register+0x2c0>)
    4770:	4798      	blx	r3
			if (res != FR_OK) break;
    4772:	2800      	cmp	r0, #0
    4774:	d11c      	bne.n	47b0 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4776:	3601      	adds	r6, #1
    4778:	b2b6      	uxth	r6, r6
    477a:	2e64      	cmp	r6, #100	; 0x64
    477c:	d015      	beq.n	47aa <dir_register+0xde>
	mem_cpy(dst, src, 11);
    477e:	220b      	movs	r2, #11
    4780:	a905      	add	r1, sp, #20
    4782:	0038      	movs	r0, r7
    4784:	4b80      	ldr	r3, [pc, #512]	; (4988 <dir_register+0x2bc>)
    4786:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4788:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    478a:	2e05      	cmp	r6, #5
    478c:	d90a      	bls.n	47a4 <dir_register+0xd8>
    478e:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4790:	085a      	lsrs	r2, r3, #1
    4792:	03db      	lsls	r3, r3, #15
    4794:	4313      	orrs	r3, r2
    4796:	880a      	ldrh	r2, [r1, #0]
    4798:	189b      	adds	r3, r3, r2
    479a:	b29b      	uxth	r3, r3
    479c:	3102      	adds	r1, #2
    479e:	880a      	ldrh	r2, [r1, #0]
    47a0:	2a00      	cmp	r2, #0
    47a2:	d1f5      	bne.n	4790 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    47a4:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    47a6:	240f      	movs	r4, #15
    47a8:	e7b9      	b.n	471e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    47aa:	2307      	movs	r3, #7
    47ac:	4698      	mov	r8, r3
    47ae:	e006      	b.n	47be <dir_register+0xf2>
    47b0:	4644      	mov	r4, r8
    47b2:	4680      	mov	r8, r0
    47b4:	2e64      	cmp	r6, #100	; 0x64
    47b6:	d100      	bne.n	47ba <dir_register+0xee>
    47b8:	e0a5      	b.n	4906 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    47ba:	2804      	cmp	r0, #4
    47bc:	d007      	beq.n	47ce <dir_register+0x102>
}
    47be:	4640      	mov	r0, r8
    47c0:	b009      	add	sp, #36	; 0x24
    47c2:	bc3c      	pop	{r2, r3, r4, r5}
    47c4:	4690      	mov	r8, r2
    47c6:	4699      	mov	r9, r3
    47c8:	46a2      	mov	sl, r4
    47ca:	46ab      	mov	fp, r5
    47cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    47ce:	ab05      	add	r3, sp, #20
    47d0:	7adb      	ldrb	r3, [r3, #11]
    47d2:	72fb      	strb	r3, [r7, #11]
    47d4:	4653      	mov	r3, sl
    47d6:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    47d8:	ab05      	add	r3, sp, #20
    47da:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    47dc:	2201      	movs	r2, #1
    47de:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    47e0:	079b      	lsls	r3, r3, #30
    47e2:	d511      	bpl.n	4808 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    47e4:	4653      	mov	r3, sl
    47e6:	881b      	ldrh	r3, [r3, #0]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d01b      	beq.n	4824 <dir_register+0x158>
    47ec:	2000      	movs	r0, #0
    47ee:	4652      	mov	r2, sl
    47f0:	3001      	adds	r0, #1
    47f2:	b280      	uxth	r0, r0
    47f4:	0043      	lsls	r3, r0, #1
    47f6:	5a9b      	ldrh	r3, [r3, r2]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d1f9      	bne.n	47f0 <dir_register+0x124>
		ne = (ne + 25) / 13;
    47fc:	3019      	adds	r0, #25
    47fe:	210d      	movs	r1, #13
    4800:	4b63      	ldr	r3, [pc, #396]	; (4990 <dir_register+0x2c4>)
    4802:	4798      	blx	r3
    4804:	b283      	uxth	r3, r0
    4806:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4808:	2100      	movs	r1, #0
    480a:	0020      	movs	r0, r4
    480c:	4b61      	ldr	r3, [pc, #388]	; (4994 <dir_register+0x2c8>)
    480e:	4798      	blx	r3
    4810:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4812:	2800      	cmp	r0, #0
    4814:	d1d3      	bne.n	47be <dir_register+0xf2>
    4816:	4682      	mov	sl, r0
    4818:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    481a:	4f5f      	ldr	r7, [pc, #380]	; (4998 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    481c:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    481e:	4b5f      	ldr	r3, [pc, #380]	; (499c <dir_register+0x2d0>)
    4820:	4699      	mov	r9, r3
    4822:	e00b      	b.n	483c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4824:	2000      	movs	r0, #0
    4826:	e7e9      	b.n	47fc <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4828:	1c6b      	adds	r3, r5, #1
    482a:	b29b      	uxth	r3, r3
    482c:	459b      	cmp	fp, r3
    482e:	d06d      	beq.n	490c <dir_register+0x240>
    4830:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4832:	2101      	movs	r1, #1
    4834:	0020      	movs	r0, r4
    4836:	47c8      	blx	r9
	} while (res == FR_OK);
    4838:	2800      	cmp	r0, #0
    483a:	d112      	bne.n	4862 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    483c:	6921      	ldr	r1, [r4, #16]
    483e:	6820      	ldr	r0, [r4, #0]
    4840:	47b8      	blx	r7
		if (res != FR_OK) break;
    4842:	2800      	cmp	r0, #0
    4844:	d000      	beq.n	4848 <dir_register+0x17c>
    4846:	e098      	b.n	497a <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4848:	6963      	ldr	r3, [r4, #20]
    484a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    484c:	2be5      	cmp	r3, #229	; 0xe5
    484e:	d001      	beq.n	4854 <dir_register+0x188>
    4850:	2b00      	cmp	r3, #0
    4852:	d104      	bne.n	485e <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4854:	2d00      	cmp	r5, #0
    4856:	d1e7      	bne.n	4828 <dir_register+0x15c>
    4858:	88e3      	ldrh	r3, [r4, #6]
    485a:	469a      	mov	sl, r3
    485c:	e7e4      	b.n	4828 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    485e:	0035      	movs	r5, r6
    4860:	e7e7      	b.n	4832 <dir_register+0x166>
    4862:	4680      	mov	r8, r0
    4864:	e7ab      	b.n	47be <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4866:	4651      	mov	r1, sl
    4868:	0020      	movs	r0, r4
    486a:	4b4a      	ldr	r3, [pc, #296]	; (4994 <dir_register+0x2c8>)
    486c:	4798      	blx	r3
    486e:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4870:	2800      	cmp	r0, #0
    4872:	d1a4      	bne.n	47be <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4874:	69a0      	ldr	r0, [r4, #24]
    4876:	4b4a      	ldr	r3, [pc, #296]	; (49a0 <dir_register+0x2d4>)
    4878:	4798      	blx	r3
    487a:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    487c:	46a8      	mov	r8, r5
    487e:	e01f      	b.n	48c0 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4880:	0022      	movs	r2, r4
    4882:	e067      	b.n	4954 <dir_register+0x288>
    4884:	465e      	mov	r6, fp
    4886:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4888:	4946      	ldr	r1, [pc, #280]	; (49a4 <dir_register+0x2d8>)
    488a:	428b      	cmp	r3, r1
    488c:	d003      	beq.n	4896 <dir_register+0x1ca>
    488e:	0052      	lsls	r2, r2, #1
    4890:	5b93      	ldrh	r3, [r2, r6]
    4892:	2b00      	cmp	r3, #0
    4894:	d103      	bne.n	489e <dir_register+0x1d2>
    4896:	2340      	movs	r3, #64	; 0x40
    4898:	464a      	mov	r2, r9
    489a:	431a      	orrs	r2, r3
    489c:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    489e:	464b      	mov	r3, r9
    48a0:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    48a2:	2301      	movs	r3, #1
    48a4:	6822      	ldr	r2, [r4, #0]
    48a6:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    48a8:	2100      	movs	r1, #0
    48aa:	0020      	movs	r0, r4
    48ac:	4b3b      	ldr	r3, [pc, #236]	; (499c <dir_register+0x2d0>)
    48ae:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    48b0:	2800      	cmp	r0, #0
    48b2:	d166      	bne.n	4982 <dir_register+0x2b6>
    48b4:	4645      	mov	r5, r8
    48b6:	3d01      	subs	r5, #1
    48b8:	b2ab      	uxth	r3, r5
    48ba:	4698      	mov	r8, r3
    48bc:	2b00      	cmp	r3, #0
    48be:	d027      	beq.n	4910 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    48c0:	6921      	ldr	r1, [r4, #16]
    48c2:	6820      	ldr	r0, [r4, #0]
    48c4:	4b34      	ldr	r3, [pc, #208]	; (4998 <dir_register+0x2cc>)
    48c6:	4798      	blx	r3
				if (res != FR_OK) break;
    48c8:	2800      	cmp	r0, #0
    48ca:	d158      	bne.n	497e <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    48cc:	69e6      	ldr	r6, [r4, #28]
    48ce:	6960      	ldr	r0, [r4, #20]
    48d0:	4643      	mov	r3, r8
    48d2:	466a      	mov	r2, sp
    48d4:	70d3      	strb	r3, [r2, #3]
    48d6:	78d3      	ldrb	r3, [r2, #3]
    48d8:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    48da:	7913      	ldrb	r3, [r2, #4]
    48dc:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    48de:	230f      	movs	r3, #15
    48e0:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    48e2:	2300      	movs	r3, #0
    48e4:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    48e6:	7683      	strb	r3, [r0, #26]
    48e8:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    48ea:	464b      	mov	r3, r9
    48ec:	3b01      	subs	r3, #1
    48ee:	005a      	lsls	r2, r3, #1
    48f0:	18d2      	adds	r2, r2, r3
    48f2:	0092      	lsls	r2, r2, #2
    48f4:	18d2      	adds	r2, r2, r3
    48f6:	492c      	ldr	r1, [pc, #176]	; (49a8 <dir_register+0x2dc>)
    48f8:	000d      	movs	r5, r1
    48fa:	350d      	adds	r5, #13
	s = wc = 0;
    48fc:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    48fe:	4f29      	ldr	r7, [pc, #164]	; (49a4 <dir_register+0x2d8>)
    4900:	46b3      	mov	fp, r6
    4902:	46a4      	mov	ip, r4
    4904:	e029      	b.n	495a <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4906:	2307      	movs	r3, #7
    4908:	4698      	mov	r8, r3
    490a:	e758      	b.n	47be <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    490c:	2b01      	cmp	r3, #1
    490e:	d8aa      	bhi.n	4866 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4910:	6921      	ldr	r1, [r4, #16]
    4912:	6820      	ldr	r0, [r4, #0]
    4914:	4b20      	ldr	r3, [pc, #128]	; (4998 <dir_register+0x2cc>)
    4916:	4798      	blx	r3
    4918:	4680      	mov	r8, r0
		if (res == FR_OK) {
    491a:	2800      	cmp	r0, #0
    491c:	d000      	beq.n	4920 <dir_register+0x254>
    491e:	e74e      	b.n	47be <dir_register+0xf2>
			dir = dj->dir;
    4920:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4922:	2220      	movs	r2, #32
    4924:	2100      	movs	r1, #0
    4926:	0028      	movs	r0, r5
    4928:	4b20      	ldr	r3, [pc, #128]	; (49ac <dir_register+0x2e0>)
    492a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    492c:	220b      	movs	r2, #11
    492e:	69a1      	ldr	r1, [r4, #24]
    4930:	0028      	movs	r0, r5
    4932:	4b15      	ldr	r3, [pc, #84]	; (4988 <dir_register+0x2bc>)
    4934:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4936:	69a3      	ldr	r3, [r4, #24]
    4938:	7ada      	ldrb	r2, [r3, #11]
    493a:	2318      	movs	r3, #24
    493c:	4013      	ands	r3, r2
    493e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4940:	6823      	ldr	r3, [r4, #0]
    4942:	2201      	movs	r2, #1
    4944:	711a      	strb	r2, [r3, #4]
    4946:	e73a      	b.n	47be <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4948:	780c      	ldrb	r4, [r1, #0]
    494a:	26ff      	movs	r6, #255	; 0xff
    494c:	5506      	strb	r6, [r0, r4]
    494e:	1904      	adds	r4, r0, r4
    4950:	26ff      	movs	r6, #255	; 0xff
    4952:	7066      	strb	r6, [r4, #1]
    4954:	3101      	adds	r1, #1
	} while (++s < 13);
    4956:	42a9      	cmp	r1, r5
    4958:	d094      	beq.n	4884 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    495a:	42bb      	cmp	r3, r7
    495c:	d0f4      	beq.n	4948 <dir_register+0x27c>
    495e:	1c54      	adds	r4, r2, #1
    4960:	0052      	lsls	r2, r2, #1
    4962:	465b      	mov	r3, fp
    4964:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4966:	780a      	ldrb	r2, [r1, #0]
    4968:	5483      	strb	r3, [r0, r2]
    496a:	1882      	adds	r2, r0, r2
    496c:	0a1e      	lsrs	r6, r3, #8
    496e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4970:	2b00      	cmp	r3, #0
    4972:	d185      	bne.n	4880 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4974:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4976:	003b      	movs	r3, r7
    4978:	e7ec      	b.n	4954 <dir_register+0x288>
    497a:	4680      	mov	r8, r0
    497c:	e71f      	b.n	47be <dir_register+0xf2>
    497e:	4680      	mov	r8, r0
    4980:	e71d      	b.n	47be <dir_register+0xf2>
    4982:	4680      	mov	r8, r0
    4984:	e71b      	b.n	47be <dir_register+0xf2>
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	00003a79 	.word	0x00003a79
    498c:	00004535 	.word	0x00004535
    4990:	00005c0d 	.word	0x00005c0d
    4994:	000040f5 	.word	0x000040f5
    4998:	00003f59 	.word	0x00003f59
    499c:	00004411 	.word	0x00004411
    49a0:	00003ab7 	.word	0x00003ab7
    49a4:	0000ffff 	.word	0x0000ffff
    49a8:	00007174 	.word	0x00007174
    49ac:	00003a8d 	.word	0x00003a8d

000049b0 <sync>:
{
    49b0:	b570      	push	{r4, r5, r6, lr}
    49b2:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    49b4:	2100      	movs	r1, #0
    49b6:	4b2c      	ldr	r3, [pc, #176]	; (4a68 <sync+0xb8>)
    49b8:	4798      	blx	r3
	if (res == FR_OK) {
    49ba:	2800      	cmp	r0, #0
    49bc:	d10a      	bne.n	49d4 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    49be:	7823      	ldrb	r3, [r4, #0]
    49c0:	2b03      	cmp	r3, #3
    49c2:	d008      	beq.n	49d6 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    49c4:	7860      	ldrb	r0, [r4, #1]
    49c6:	2200      	movs	r2, #0
    49c8:	2100      	movs	r1, #0
    49ca:	4b28      	ldr	r3, [pc, #160]	; (4a6c <sync+0xbc>)
    49cc:	4798      	blx	r3
    49ce:	1e43      	subs	r3, r0, #1
    49d0:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    49d2:	b2c0      	uxtb	r0, r0
}
    49d4:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    49d6:	7963      	ldrb	r3, [r4, #5]
    49d8:	2b00      	cmp	r3, #0
    49da:	d0f3      	beq.n	49c4 <sync+0x14>
			fs->winsect = 0;
    49dc:	2600      	movs	r6, #0
    49de:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    49e0:	0025      	movs	r5, r4
    49e2:	3530      	adds	r5, #48	; 0x30
    49e4:	2280      	movs	r2, #128	; 0x80
    49e6:	0092      	lsls	r2, r2, #2
    49e8:	2100      	movs	r1, #0
    49ea:	0028      	movs	r0, r5
    49ec:	4b20      	ldr	r3, [pc, #128]	; (4a70 <sync+0xc0>)
    49ee:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    49f0:	2255      	movs	r2, #85	; 0x55
    49f2:	4b20      	ldr	r3, [pc, #128]	; (4a74 <sync+0xc4>)
    49f4:	54e2      	strb	r2, [r4, r3]
    49f6:	3255      	adds	r2, #85	; 0x55
    49f8:	4b1f      	ldr	r3, [pc, #124]	; (4a78 <sync+0xc8>)
    49fa:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    49fc:	3bde      	subs	r3, #222	; 0xde
    49fe:	3bff      	subs	r3, #255	; 0xff
    4a00:	3a7a      	subs	r2, #122	; 0x7a
    4a02:	54a3      	strb	r3, [r4, r2]
    4a04:	3201      	adds	r2, #1
    4a06:	54a3      	strb	r3, [r4, r2]
    4a08:	330f      	adds	r3, #15
    4a0a:	3201      	adds	r2, #1
    4a0c:	54a3      	strb	r3, [r4, r2]
    4a0e:	320f      	adds	r2, #15
    4a10:	2133      	movs	r1, #51	; 0x33
    4a12:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4a14:	313f      	adds	r1, #63	; 0x3f
    4a16:	2085      	movs	r0, #133	; 0x85
    4a18:	0080      	lsls	r0, r0, #2
    4a1a:	5421      	strb	r1, [r4, r0]
    4a1c:	4817      	ldr	r0, [pc, #92]	; (4a7c <sync+0xcc>)
    4a1e:	5421      	strb	r1, [r4, r0]
    4a20:	4917      	ldr	r1, [pc, #92]	; (4a80 <sync+0xd0>)
    4a22:	5462      	strb	r2, [r4, r1]
    4a24:	4a17      	ldr	r2, [pc, #92]	; (4a84 <sync+0xd4>)
    4a26:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4a28:	6923      	ldr	r3, [r4, #16]
    4a2a:	3201      	adds	r2, #1
    4a2c:	54a3      	strb	r3, [r4, r2]
    4a2e:	0a19      	lsrs	r1, r3, #8
    4a30:	4a15      	ldr	r2, [pc, #84]	; (4a88 <sync+0xd8>)
    4a32:	54a1      	strb	r1, [r4, r2]
    4a34:	0c19      	lsrs	r1, r3, #16
    4a36:	4a15      	ldr	r2, [pc, #84]	; (4a8c <sync+0xdc>)
    4a38:	54a1      	strb	r1, [r4, r2]
    4a3a:	0e1b      	lsrs	r3, r3, #24
    4a3c:	4a14      	ldr	r2, [pc, #80]	; (4a90 <sync+0xe0>)
    4a3e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4a40:	68e3      	ldr	r3, [r4, #12]
    4a42:	3201      	adds	r2, #1
    4a44:	54a3      	strb	r3, [r4, r2]
    4a46:	0a19      	lsrs	r1, r3, #8
    4a48:	4a12      	ldr	r2, [pc, #72]	; (4a94 <sync+0xe4>)
    4a4a:	54a1      	strb	r1, [r4, r2]
    4a4c:	0c19      	lsrs	r1, r3, #16
    4a4e:	4a12      	ldr	r2, [pc, #72]	; (4a98 <sync+0xe8>)
    4a50:	54a1      	strb	r1, [r4, r2]
    4a52:	0e1b      	lsrs	r3, r3, #24
    4a54:	4a11      	ldr	r2, [pc, #68]	; (4a9c <sync+0xec>)
    4a56:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4a58:	7860      	ldrb	r0, [r4, #1]
    4a5a:	2301      	movs	r3, #1
    4a5c:	6962      	ldr	r2, [r4, #20]
    4a5e:	0029      	movs	r1, r5
    4a60:	4d0f      	ldr	r5, [pc, #60]	; (4aa0 <sync+0xf0>)
    4a62:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4a64:	7166      	strb	r6, [r4, #5]
    4a66:	e7ad      	b.n	49c4 <sync+0x14>
    4a68:	00003f59 	.word	0x00003f59
    4a6c:	000039bd 	.word	0x000039bd
    4a70:	00003a8d 	.word	0x00003a8d
    4a74:	0000022e 	.word	0x0000022e
    4a78:	0000022f 	.word	0x0000022f
    4a7c:	00000215 	.word	0x00000215
    4a80:	00000216 	.word	0x00000216
    4a84:	00000217 	.word	0x00000217
    4a88:	00000219 	.word	0x00000219
    4a8c:	0000021a 	.word	0x0000021a
    4a90:	0000021b 	.word	0x0000021b
    4a94:	0000021d 	.word	0x0000021d
    4a98:	0000021e 	.word	0x0000021e
    4a9c:	0000021f 	.word	0x0000021f
    4aa0:	00003939 	.word	0x00003939

00004aa4 <follow_path>:
{
    4aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aa6:	46de      	mov	lr, fp
    4aa8:	4657      	mov	r7, sl
    4aaa:	464e      	mov	r6, r9
    4aac:	4645      	mov	r5, r8
    4aae:	b5e0      	push	{r5, r6, r7, lr}
    4ab0:	b083      	sub	sp, #12
    4ab2:	4682      	mov	sl, r0
    4ab4:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4ab6:	780b      	ldrb	r3, [r1, #0]
    4ab8:	2b2f      	cmp	r3, #47	; 0x2f
    4aba:	d00f      	beq.n	4adc <follow_path+0x38>
    4abc:	2b5c      	cmp	r3, #92	; 0x5c
    4abe:	d00d      	beq.n	4adc <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4ac0:	2300      	movs	r3, #0
    4ac2:	4652      	mov	r2, sl
    4ac4:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4ac6:	782b      	ldrb	r3, [r5, #0]
    4ac8:	4657      	mov	r7, sl
    4aca:	2b1f      	cmp	r3, #31
    4acc:	d809      	bhi.n	4ae2 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4ace:	2100      	movs	r1, #0
    4ad0:	4650      	mov	r0, sl
    4ad2:	4bb2      	ldr	r3, [pc, #712]	; (4d9c <follow_path+0x2f8>)
    4ad4:	4798      	blx	r3
		dj->dir = 0;
    4ad6:	2300      	movs	r3, #0
    4ad8:	617b      	str	r3, [r7, #20]
    4ada:	e13a      	b.n	4d52 <follow_path+0x2ae>
		path++;
    4adc:	3501      	adds	r5, #1
    4ade:	e7ef      	b.n	4ac0 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4ae0:	3501      	adds	r5, #1
    4ae2:	7828      	ldrb	r0, [r5, #0]
    4ae4:	282f      	cmp	r0, #47	; 0x2f
    4ae6:	d0fb      	beq.n	4ae0 <follow_path+0x3c>
    4ae8:	285c      	cmp	r0, #92	; 0x5c
    4aea:	d0f9      	beq.n	4ae0 <follow_path+0x3c>
	lfn = dj->lfn;
    4aec:	69fb      	ldr	r3, [r7, #28]
    4aee:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4af0:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4af2:	281f      	cmp	r0, #31
    4af4:	d800      	bhi.n	4af8 <follow_path+0x54>
    4af6:	e13b      	b.n	4d70 <follow_path+0x2cc>
    4af8:	282f      	cmp	r0, #47	; 0x2f
    4afa:	d100      	bne.n	4afe <follow_path+0x5a>
    4afc:	e13b      	b.n	4d76 <follow_path+0x2d2>
    4afe:	285c      	cmp	r0, #92	; 0x5c
    4b00:	d100      	bne.n	4b04 <follow_path+0x60>
    4b02:	e13b      	b.n	4d7c <follow_path+0x2d8>
    4b04:	1c6e      	adds	r6, r5, #1
    4b06:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4b08:	2380      	movs	r3, #128	; 0x80
    4b0a:	005b      	lsls	r3, r3, #1
    4b0c:	4698      	mov	r8, r3
    4b0e:	46bb      	mov	fp, r7
    4b10:	002b      	movs	r3, r5
    4b12:	0025      	movs	r5, r4
    4b14:	0034      	movs	r4, r6
    4b16:	4656      	mov	r6, sl
    4b18:	4699      	mov	r9, r3
    4b1a:	e011      	b.n	4b40 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d135      	bne.n	4b8c <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4b20:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4b22:	1c6b      	adds	r3, r5, #1
    4b24:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4b26:	281f      	cmp	r0, #31
    4b28:	d91e      	bls.n	4b68 <follow_path+0xc4>
    4b2a:	282f      	cmp	r0, #47	; 0x2f
    4b2c:	d100      	bne.n	4b30 <follow_path+0x8c>
    4b2e:	e128      	b.n	4d82 <follow_path+0x2de>
    4b30:	285c      	cmp	r0, #92	; 0x5c
    4b32:	d100      	bne.n	4b36 <follow_path+0x92>
    4b34:	e142      	b.n	4dbc <follow_path+0x318>
    4b36:	3602      	adds	r6, #2
    4b38:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4b3a:	4543      	cmp	r3, r8
    4b3c:	d026      	beq.n	4b8c <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4b3e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4b40:	2101      	movs	r1, #1
    4b42:	4b97      	ldr	r3, [pc, #604]	; (4da0 <follow_path+0x2fc>)
    4b44:	4798      	blx	r3
    4b46:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4b48:	d020      	beq.n	4b8c <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4b4a:	287f      	cmp	r0, #127	; 0x7f
    4b4c:	d8e8      	bhi.n	4b20 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4b4e:	2822      	cmp	r0, #34	; 0x22
    4b50:	d100      	bne.n	4b54 <follow_path+0xb0>
    4b52:	e0fd      	b.n	4d50 <follow_path+0x2ac>
    4b54:	232a      	movs	r3, #42	; 0x2a
    4b56:	4a93      	ldr	r2, [pc, #588]	; (4da4 <follow_path+0x300>)
    4b58:	b29f      	uxth	r7, r3
    4b5a:	428f      	cmp	r7, r1
    4b5c:	d0de      	beq.n	4b1c <follow_path+0x78>
    4b5e:	3201      	adds	r2, #1
    4b60:	7813      	ldrb	r3, [r2, #0]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d1f8      	bne.n	4b58 <follow_path+0xb4>
    4b66:	e7db      	b.n	4b20 <follow_path+0x7c>
    4b68:	002c      	movs	r4, r5
    4b6a:	465f      	mov	r7, fp
    4b6c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4b6e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4b70:	2604      	movs	r6, #4
    4b72:	e10b      	b.n	4d8c <follow_path+0x2e8>
		di--;
    4b74:	3c01      	subs	r4, #1
    4b76:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4b78:	2c00      	cmp	r4, #0
    4b7a:	d100      	bne.n	4b7e <follow_path+0xda>
    4b7c:	e0e8      	b.n	4d50 <follow_path+0x2ac>
		w = lfn[di-1];
    4b7e:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4b80:	2a20      	cmp	r2, #32
    4b82:	d0f7      	beq.n	4b74 <follow_path+0xd0>
    4b84:	2a2e      	cmp	r2, #46	; 0x2e
    4b86:	d0f5      	beq.n	4b74 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4b88:	2c00      	cmp	r4, #0
    4b8a:	d101      	bne.n	4b90 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4b8c:	2006      	movs	r0, #6
	return res;
    4b8e:	e0e0      	b.n	4d52 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4b90:	0063      	lsls	r3, r4, #1
    4b92:	4698      	mov	r8, r3
    4b94:	2300      	movs	r3, #0
    4b96:	4652      	mov	r2, sl
    4b98:	4641      	mov	r1, r8
    4b9a:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4b9c:	220b      	movs	r2, #11
    4b9e:	2120      	movs	r1, #32
    4ba0:	69b8      	ldr	r0, [r7, #24]
    4ba2:	4b81      	ldr	r3, [pc, #516]	; (4da8 <follow_path+0x304>)
    4ba4:	4798      	blx	r3
    4ba6:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4ba8:	2300      	movs	r3, #0
    4baa:	e001      	b.n	4bb0 <follow_path+0x10c>
    4bac:	3301      	adds	r3, #1
    4bae:	3202      	adds	r2, #2
    4bb0:	8811      	ldrh	r1, [r2, #0]
    4bb2:	2920      	cmp	r1, #32
    4bb4:	d0fa      	beq.n	4bac <follow_path+0x108>
    4bb6:	292e      	cmp	r1, #46	; 0x2e
    4bb8:	d0f8      	beq.n	4bac <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d001      	beq.n	4bc2 <follow_path+0x11e>
    4bbe:	2203      	movs	r2, #3
    4bc0:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4bc2:	4652      	mov	r2, sl
    4bc4:	4442      	add	r2, r8
    4bc6:	3a02      	subs	r2, #2
    4bc8:	8812      	ldrh	r2, [r2, #0]
    4bca:	2a2e      	cmp	r2, #46	; 0x2e
    4bcc:	d009      	beq.n	4be2 <follow_path+0x13e>
    4bce:	4642      	mov	r2, r8
    4bd0:	3a04      	subs	r2, #4
    4bd2:	4452      	add	r2, sl
    4bd4:	3c01      	subs	r4, #1
    4bd6:	2c00      	cmp	r4, #0
    4bd8:	d003      	beq.n	4be2 <follow_path+0x13e>
    4bda:	3a02      	subs	r2, #2
    4bdc:	8851      	ldrh	r1, [r2, #2]
    4bde:	292e      	cmp	r1, #46	; 0x2e
    4be0:	d1f8      	bne.n	4bd4 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4be2:	2208      	movs	r2, #8
    4be4:	9201      	str	r2, [sp, #4]
    4be6:	2200      	movs	r2, #0
    4be8:	4693      	mov	fp, r2
    4bea:	4691      	mov	r9, r2
    4bec:	46a0      	mov	r8, r4
    4bee:	e006      	b.n	4bfe <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4bf0:	4544      	cmp	r4, r8
    4bf2:	d100      	bne.n	4bf6 <follow_path+0x152>
    4bf4:	e0e6      	b.n	4dc4 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4bf6:	2303      	movs	r3, #3
    4bf8:	431e      	orrs	r6, r3
    4bfa:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4bfc:	0023      	movs	r3, r4
    4bfe:	1c5c      	adds	r4, r3, #1
    4c00:	005b      	lsls	r3, r3, #1
    4c02:	4652      	mov	r2, sl
    4c04:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4c06:	2800      	cmp	r0, #0
    4c08:	d02c      	beq.n	4c64 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4c0a:	2820      	cmp	r0, #32
    4c0c:	d0f3      	beq.n	4bf6 <follow_path+0x152>
    4c0e:	282e      	cmp	r0, #46	; 0x2e
    4c10:	d0ee      	beq.n	4bf0 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4c12:	9b01      	ldr	r3, [sp, #4]
    4c14:	459b      	cmp	fp, r3
    4c16:	d219      	bcs.n	4c4c <follow_path+0x1a8>
    4c18:	4544      	cmp	r4, r8
    4c1a:	d100      	bne.n	4c1e <follow_path+0x17a>
    4c1c:	e0d2      	b.n	4dc4 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4c1e:	287f      	cmp	r0, #127	; 0x7f
    4c20:	d85e      	bhi.n	4ce0 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4c22:	282b      	cmp	r0, #43	; 0x2b
    4c24:	d06e      	beq.n	4d04 <follow_path+0x260>
    4c26:	232c      	movs	r3, #44	; 0x2c
    4c28:	4a60      	ldr	r2, [pc, #384]	; (4dac <follow_path+0x308>)
    4c2a:	b299      	uxth	r1, r3
    4c2c:	4281      	cmp	r1, r0
    4c2e:	d067      	beq.n	4d00 <follow_path+0x25c>
    4c30:	3201      	adds	r2, #1
    4c32:	7813      	ldrb	r3, [r2, #0]
    4c34:	2b00      	cmp	r3, #0
    4c36:	d1f8      	bne.n	4c2a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4c38:	0003      	movs	r3, r0
    4c3a:	3b41      	subs	r3, #65	; 0x41
    4c3c:	b29b      	uxth	r3, r3
    4c3e:	2b19      	cmp	r3, #25
    4c40:	d86c      	bhi.n	4d1c <follow_path+0x278>
					b |= 2;
    4c42:	2302      	movs	r3, #2
    4c44:	464a      	mov	r2, r9
    4c46:	431a      	orrs	r2, r3
    4c48:	4691      	mov	r9, r2
    4c4a:	e05f      	b.n	4d0c <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    4c4c:	9b01      	ldr	r3, [sp, #4]
    4c4e:	2b0b      	cmp	r3, #11
    4c50:	d03b      	beq.n	4cca <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4c52:	4544      	cmp	r4, r8
    4c54:	d100      	bne.n	4c58 <follow_path+0x1b4>
    4c56:	e0b9      	b.n	4dcc <follow_path+0x328>
    4c58:	2303      	movs	r3, #3
    4c5a:	431e      	orrs	r6, r3
    4c5c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4c5e:	4544      	cmp	r4, r8
    4c60:	d800      	bhi.n	4c64 <follow_path+0x1c0>
    4c62:	e0b3      	b.n	4dcc <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4c64:	69bb      	ldr	r3, [r7, #24]
    4c66:	781a      	ldrb	r2, [r3, #0]
    4c68:	2ae5      	cmp	r2, #229	; 0xe5
    4c6a:	d036      	beq.n	4cda <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4c6c:	9b01      	ldr	r3, [sp, #4]
    4c6e:	2b08      	cmp	r3, #8
    4c70:	d060      	beq.n	4d34 <follow_path+0x290>
    4c72:	230c      	movs	r3, #12
    4c74:	464a      	mov	r2, r9
    4c76:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4c78:	2b0c      	cmp	r3, #12
    4c7a:	d060      	beq.n	4d3e <follow_path+0x29a>
    4c7c:	43d2      	mvns	r2, r2
    4c7e:	0792      	lsls	r2, r2, #30
    4c80:	d05d      	beq.n	4d3e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4c82:	07b2      	lsls	r2, r6, #30
    4c84:	d406      	bmi.n	4c94 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4c86:	2203      	movs	r2, #3
    4c88:	4649      	mov	r1, r9
    4c8a:	400a      	ands	r2, r1
    4c8c:	2a01      	cmp	r2, #1
    4c8e:	d059      	beq.n	4d44 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4c90:	2b04      	cmp	r3, #4
    4c92:	d05a      	beq.n	4d4a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4c94:	69bb      	ldr	r3, [r7, #24]
    4c96:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4c98:	0038      	movs	r0, r7
    4c9a:	4b45      	ldr	r3, [pc, #276]	; (4db0 <follow_path+0x30c>)
    4c9c:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4c9e:	69bb      	ldr	r3, [r7, #24]
    4ca0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4ca2:	2800      	cmp	r0, #0
    4ca4:	d15c      	bne.n	4d60 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4ca6:	075b      	lsls	r3, r3, #29
    4ca8:	d453      	bmi.n	4d52 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4caa:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4cac:	7ad3      	ldrb	r3, [r2, #11]
    4cae:	06db      	lsls	r3, r3, #27
    4cb0:	d55c      	bpl.n	4d6c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4cb2:	7d51      	ldrb	r1, [r2, #21]
    4cb4:	0209      	lsls	r1, r1, #8
    4cb6:	7d13      	ldrb	r3, [r2, #20]
    4cb8:	430b      	orrs	r3, r1
    4cba:	041b      	lsls	r3, r3, #16
    4cbc:	7ed1      	ldrb	r1, [r2, #27]
    4cbe:	0209      	lsls	r1, r1, #8
    4cc0:	7e92      	ldrb	r2, [r2, #26]
    4cc2:	430a      	orrs	r2, r1
    4cc4:	4313      	orrs	r3, r2
    4cc6:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4cc8:	e70b      	b.n	4ae2 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4cca:	2303      	movs	r3, #3
    4ccc:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4cce:	69bb      	ldr	r3, [r7, #24]
    4cd0:	781a      	ldrb	r2, [r3, #0]
    4cd2:	2ae5      	cmp	r2, #229	; 0xe5
    4cd4:	d1cd      	bne.n	4c72 <follow_path+0x1ce>
    4cd6:	220b      	movs	r2, #11
    4cd8:	9201      	str	r2, [sp, #4]
    4cda:	2205      	movs	r2, #5
    4cdc:	701a      	strb	r2, [r3, #0]
    4cde:	e7c5      	b.n	4c6c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4ce0:	2100      	movs	r1, #0
    4ce2:	4b2f      	ldr	r3, [pc, #188]	; (4da0 <follow_path+0x2fc>)
    4ce4:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4ce6:	2800      	cmp	r0, #0
    4ce8:	d100      	bne.n	4cec <follow_path+0x248>
    4cea:	e079      	b.n	4de0 <follow_path+0x33c>
    4cec:	4b31      	ldr	r3, [pc, #196]	; (4db4 <follow_path+0x310>)
    4cee:	469c      	mov	ip, r3
    4cf0:	4460      	add	r0, ip
    4cf2:	3880      	subs	r0, #128	; 0x80
    4cf4:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4cf6:	2302      	movs	r3, #2
    4cf8:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4cfa:	2800      	cmp	r0, #0
    4cfc:	d002      	beq.n	4d04 <follow_path+0x260>
    4cfe:	e790      	b.n	4c22 <follow_path+0x17e>
    4d00:	2b00      	cmp	r3, #0
    4d02:	d099      	beq.n	4c38 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4d04:	2303      	movs	r3, #3
    4d06:	431e      	orrs	r6, r3
    4d08:	b2f6      	uxtb	r6, r6
    4d0a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4d0c:	69bb      	ldr	r3, [r7, #24]
    4d0e:	465a      	mov	r2, fp
    4d10:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4d12:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4d14:	2201      	movs	r2, #1
    4d16:	4694      	mov	ip, r2
    4d18:	44e3      	add	fp, ip
    4d1a:	e770      	b.n	4bfe <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4d1c:	0003      	movs	r3, r0
    4d1e:	3b61      	subs	r3, #97	; 0x61
    4d20:	b29b      	uxth	r3, r3
    4d22:	2b19      	cmp	r3, #25
    4d24:	d8f2      	bhi.n	4d0c <follow_path+0x268>
						b |= 1; w -= 0x20;
    4d26:	2301      	movs	r3, #1
    4d28:	464a      	mov	r2, r9
    4d2a:	431a      	orrs	r2, r3
    4d2c:	4691      	mov	r9, r2
    4d2e:	3820      	subs	r0, #32
    4d30:	b280      	uxth	r0, r0
    4d32:	e7eb      	b.n	4d0c <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4d34:	464b      	mov	r3, r9
    4d36:	009b      	lsls	r3, r3, #2
    4d38:	b2db      	uxtb	r3, r3
    4d3a:	4699      	mov	r9, r3
    4d3c:	e799      	b.n	4c72 <follow_path+0x1ce>
		cf |= NS_LFN;
    4d3e:	2202      	movs	r2, #2
    4d40:	4316      	orrs	r6, r2
    4d42:	e79e      	b.n	4c82 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4d44:	320f      	adds	r2, #15
    4d46:	4316      	orrs	r6, r2
    4d48:	e7a2      	b.n	4c90 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4d4a:	3304      	adds	r3, #4
    4d4c:	431e      	orrs	r6, r3
    4d4e:	e7a1      	b.n	4c94 <follow_path+0x1f0>
    4d50:	2006      	movs	r0, #6
}
    4d52:	b003      	add	sp, #12
    4d54:	bc3c      	pop	{r2, r3, r4, r5}
    4d56:	4690      	mov	r8, r2
    4d58:	4699      	mov	r9, r3
    4d5a:	46a2      	mov	sl, r4
    4d5c:	46ab      	mov	fp, r5
    4d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4d60:	2804      	cmp	r0, #4
    4d62:	d1f6      	bne.n	4d52 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4d64:	075b      	lsls	r3, r3, #29
    4d66:	d4f4      	bmi.n	4d52 <follow_path+0x2ae>
    4d68:	3001      	adds	r0, #1
    4d6a:	e7f2      	b.n	4d52 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4d6c:	2005      	movs	r0, #5
    4d6e:	e7f0      	b.n	4d52 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4d70:	2301      	movs	r3, #1
	si = di = 0;
    4d72:	2400      	movs	r4, #0
    4d74:	e6fb      	b.n	4b6e <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4d76:	2301      	movs	r3, #1
	si = di = 0;
    4d78:	2400      	movs	r4, #0
    4d7a:	e005      	b.n	4d88 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4d7c:	2301      	movs	r3, #1
	si = di = 0;
    4d7e:	2400      	movs	r4, #0
    4d80:	e002      	b.n	4d88 <follow_path+0x2e4>
    4d82:	002c      	movs	r4, r5
    4d84:	465f      	mov	r7, fp
    4d86:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4d88:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4d8a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4d8c:	2c00      	cmp	r4, #0
    4d8e:	d0df      	beq.n	4d50 <follow_path+0x2ac>
    4d90:	4b09      	ldr	r3, [pc, #36]	; (4db8 <follow_path+0x314>)
    4d92:	18e3      	adds	r3, r4, r3
    4d94:	005b      	lsls	r3, r3, #1
    4d96:	4453      	add	r3, sl
    4d98:	e6f1      	b.n	4b7e <follow_path+0xda>
    4d9a:	46c0      	nop			; (mov r8, r8)
    4d9c:	000040f5 	.word	0x000040f5
    4da0:	00005489 	.word	0x00005489
    4da4:	00007205 	.word	0x00007205
    4da8:	00003a8d 	.word	0x00003a8d
    4dac:	00007211 	.word	0x00007211
    4db0:	00004535 	.word	0x00004535
    4db4:	00007184 	.word	0x00007184
    4db8:	7fffffff 	.word	0x7fffffff
    4dbc:	002c      	movs	r4, r5
    4dbe:	465f      	mov	r7, fp
    4dc0:	464d      	mov	r5, r9
    4dc2:	e7e1      	b.n	4d88 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4dc4:	9b01      	ldr	r3, [sp, #4]
    4dc6:	2b0b      	cmp	r3, #11
    4dc8:	d100      	bne.n	4dcc <follow_path+0x328>
    4dca:	e77e      	b.n	4cca <follow_path+0x226>
			b <<= 2; continue;
    4dcc:	464b      	mov	r3, r9
    4dce:	009b      	lsls	r3, r3, #2
    4dd0:	b2db      	uxtb	r3, r3
    4dd2:	4699      	mov	r9, r3
    4dd4:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4dd6:	220b      	movs	r2, #11
    4dd8:	9201      	str	r2, [sp, #4]
    4dda:	3a03      	subs	r2, #3
    4ddc:	4693      	mov	fp, r2
    4dde:	e70e      	b.n	4bfe <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4de0:	2302      	movs	r3, #2
    4de2:	431e      	orrs	r6, r3
    4de4:	e78e      	b.n	4d04 <follow_path+0x260>
    4de6:	46c0      	nop			; (mov r8, r8)

00004de8 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4de8:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4dea:	2807      	cmp	r0, #7
    4dec:	d901      	bls.n	4df2 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4dee:	0018      	movs	r0, r3
    4df0:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4df2:	0083      	lsls	r3, r0, #2
    4df4:	4a07      	ldr	r2, [pc, #28]	; (4e14 <f_mount+0x2c>)
    4df6:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d001      	beq.n	4e00 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4dfc:	2200      	movs	r2, #0
    4dfe:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4e00:	2900      	cmp	r1, #0
    4e02:	d001      	beq.n	4e08 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4e04:	2300      	movs	r3, #0
    4e06:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4e08:	0080      	lsls	r0, r0, #2
    4e0a:	4b02      	ldr	r3, [pc, #8]	; (4e14 <f_mount+0x2c>)
    4e0c:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4e0e:	2300      	movs	r3, #0
    4e10:	e7ed      	b.n	4dee <f_mount+0x6>
    4e12:	46c0      	nop			; (mov r8, r8)
    4e14:	200002c4 	.word	0x200002c4

00004e18 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e1a:	46c6      	mov	lr, r8
    4e1c:	b500      	push	{lr}
    4e1e:	4c59      	ldr	r4, [pc, #356]	; (4f84 <f_open+0x16c>)
    4e20:	44a5      	add	sp, r4
    4e22:	0005      	movs	r5, r0
    4e24:	9101      	str	r1, [sp, #4]
    4e26:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4e28:	2300      	movs	r3, #0
    4e2a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4e2c:	261f      	movs	r6, #31
    4e2e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4e30:	221e      	movs	r2, #30
    4e32:	403a      	ands	r2, r7
    4e34:	a985      	add	r1, sp, #532	; 0x214
    4e36:	a801      	add	r0, sp, #4
    4e38:	4b53      	ldr	r3, [pc, #332]	; (4f88 <f_open+0x170>)
    4e3a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4e3c:	ab82      	add	r3, sp, #520	; 0x208
    4e3e:	938b      	str	r3, [sp, #556]	; 0x22c
    4e40:	ab02      	add	r3, sp, #8
    4e42:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4e44:	2800      	cmp	r0, #0
    4e46:	d006      	beq.n	4e56 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4e48:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4e4a:	231c      	movs	r3, #28
    4e4c:	423b      	tst	r3, r7
    4e4e:	d145      	bne.n	4edc <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4e50:	2800      	cmp	r0, #0
    4e52:	d13d      	bne.n	4ed0 <f_open+0xb8>
    4e54:	e00c      	b.n	4e70 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4e56:	9901      	ldr	r1, [sp, #4]
    4e58:	a885      	add	r0, sp, #532	; 0x214
    4e5a:	4b4c      	ldr	r3, [pc, #304]	; (4f8c <f_open+0x174>)
    4e5c:	4798      	blx	r3
	dir = dj.dir;
    4e5e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4e60:	2800      	cmp	r0, #0
    4e62:	d1f2      	bne.n	4e4a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4e64:	2c00      	cmp	r4, #0
    4e66:	d100      	bne.n	4e6a <f_open+0x52>
    4e68:	e086      	b.n	4f78 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4e6a:	231c      	movs	r3, #28
    4e6c:	423b      	tst	r3, r7
    4e6e:	d146      	bne.n	4efe <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4e70:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4e72:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4e74:	06da      	lsls	r2, r3, #27
    4e76:	d42b      	bmi.n	4ed0 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e78:	07ba      	lsls	r2, r7, #30
    4e7a:	d502      	bpl.n	4e82 <f_open+0x6a>
					res = FR_DENIED;
    4e7c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e7e:	07db      	lsls	r3, r3, #31
    4e80:	d426      	bmi.n	4ed0 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4e82:	073b      	lsls	r3, r7, #28
    4e84:	d501      	bpl.n	4e8a <f_open+0x72>
			mode |= FA__WRITTEN;
    4e86:	2320      	movs	r3, #32
    4e88:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4e8a:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e8e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4e90:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4e92:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4e94:	7d62      	ldrb	r2, [r4, #21]
    4e96:	0212      	lsls	r2, r2, #8
    4e98:	7d23      	ldrb	r3, [r4, #20]
    4e9a:	4313      	orrs	r3, r2
    4e9c:	041b      	lsls	r3, r3, #16
    4e9e:	7ee1      	ldrb	r1, [r4, #27]
    4ea0:	0209      	lsls	r1, r1, #8
    4ea2:	7ea2      	ldrb	r2, [r4, #26]
    4ea4:	430a      	orrs	r2, r1
    4ea6:	4313      	orrs	r3, r2
    4ea8:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4eaa:	7fe3      	ldrb	r3, [r4, #31]
    4eac:	061b      	lsls	r3, r3, #24
    4eae:	7fa2      	ldrb	r2, [r4, #30]
    4eb0:	0412      	lsls	r2, r2, #16
    4eb2:	4313      	orrs	r3, r2
    4eb4:	7f22      	ldrb	r2, [r4, #28]
    4eb6:	4313      	orrs	r3, r2
    4eb8:	7f62      	ldrb	r2, [r4, #29]
    4eba:	0212      	lsls	r2, r2, #8
    4ebc:	4313      	orrs	r3, r2
    4ebe:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4ec0:	2300      	movs	r3, #0
    4ec2:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4ec4:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4ec6:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4ec8:	602b      	str	r3, [r5, #0]
    4eca:	88db      	ldrh	r3, [r3, #6]
    4ecc:	80ab      	strh	r3, [r5, #4]
    4ece:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4ed0:	238e      	movs	r3, #142	; 0x8e
    4ed2:	009b      	lsls	r3, r3, #2
    4ed4:	449d      	add	sp, r3
    4ed6:	bc04      	pop	{r2}
    4ed8:	4690      	mov	r8, r2
    4eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4edc:	2804      	cmp	r0, #4
    4ede:	d005      	beq.n	4eec <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4ee0:	2308      	movs	r3, #8
    4ee2:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4ee4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d0d3      	beq.n	4e92 <f_open+0x7a>
    4eea:	e7f1      	b.n	4ed0 <f_open+0xb8>
				res = dir_register(&dj);
    4eec:	a885      	add	r0, sp, #532	; 0x214
    4eee:	4b28      	ldr	r3, [pc, #160]	; (4f90 <f_open+0x178>)
    4ef0:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4ef2:	2308      	movs	r3, #8
    4ef4:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4ef6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4ef8:	2800      	cmp	r0, #0
    4efa:	d008      	beq.n	4f0e <f_open+0xf6>
    4efc:	e7e8      	b.n	4ed0 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4efe:	7ae3      	ldrb	r3, [r4, #11]
    4f00:	2211      	movs	r2, #17
				res = FR_DENIED;
    4f02:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4f04:	421a      	tst	r2, r3
    4f06:	d1e3      	bne.n	4ed0 <f_open+0xb8>
					res = FR_EXIST;
    4f08:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4f0a:	077b      	lsls	r3, r7, #29
    4f0c:	d4e0      	bmi.n	4ed0 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4f0e:	0733      	lsls	r3, r6, #28
    4f10:	d5bb      	bpl.n	4e8a <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4f12:	4b20      	ldr	r3, [pc, #128]	; (4f94 <f_open+0x17c>)
    4f14:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4f16:	73a0      	strb	r0, [r4, #14]
    4f18:	0a03      	lsrs	r3, r0, #8
    4f1a:	73e3      	strb	r3, [r4, #15]
    4f1c:	0c03      	lsrs	r3, r0, #16
    4f1e:	7423      	strb	r3, [r4, #16]
    4f20:	0e00      	lsrs	r0, r0, #24
    4f22:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4f24:	2300      	movs	r3, #0
    4f26:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4f28:	7723      	strb	r3, [r4, #28]
    4f2a:	7763      	strb	r3, [r4, #29]
    4f2c:	77a3      	strb	r3, [r4, #30]
    4f2e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4f30:	7d62      	ldrb	r2, [r4, #21]
    4f32:	0212      	lsls	r2, r2, #8
    4f34:	7d27      	ldrb	r7, [r4, #20]
    4f36:	4317      	orrs	r7, r2
    4f38:	043f      	lsls	r7, r7, #16
    4f3a:	7ee1      	ldrb	r1, [r4, #27]
    4f3c:	0209      	lsls	r1, r1, #8
    4f3e:	7ea2      	ldrb	r2, [r4, #26]
    4f40:	430a      	orrs	r2, r1
    4f42:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4f44:	76a3      	strb	r3, [r4, #26]
    4f46:	76e3      	strb	r3, [r4, #27]
    4f48:	7523      	strb	r3, [r4, #20]
    4f4a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4f4c:	9885      	ldr	r0, [sp, #532]	; 0x214
    4f4e:	3301      	adds	r3, #1
    4f50:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4f52:	2f00      	cmp	r7, #0
    4f54:	d097      	beq.n	4e86 <f_open+0x6e>
				dw = dj.fs->winsect;
    4f56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4f58:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4f5a:	0039      	movs	r1, r7
    4f5c:	4b0e      	ldr	r3, [pc, #56]	; (4f98 <f_open+0x180>)
    4f5e:	4798      	blx	r3
				if (res == FR_OK) {
    4f60:	2800      	cmp	r0, #0
    4f62:	d1b5      	bne.n	4ed0 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4f64:	9885      	ldr	r0, [sp, #532]	; 0x214
    4f66:	3f01      	subs	r7, #1
    4f68:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4f6a:	4641      	mov	r1, r8
    4f6c:	4b0b      	ldr	r3, [pc, #44]	; (4f9c <f_open+0x184>)
    4f6e:	4798      	blx	r3
	if (res == FR_OK) {
    4f70:	2800      	cmp	r0, #0
    4f72:	d100      	bne.n	4f76 <f_open+0x15e>
    4f74:	e787      	b.n	4e86 <f_open+0x6e>
    4f76:	e7ab      	b.n	4ed0 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f78:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4f7a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f7c:	423b      	tst	r3, r7
    4f7e:	d0b2      	beq.n	4ee6 <f_open+0xce>
			res = FR_INVALID_NAME;
    4f80:	2006      	movs	r0, #6
    4f82:	e7ad      	b.n	4ee0 <f_open+0xc8>
    4f84:	fffffdc8 	.word	0xfffffdc8
    4f88:	00003ba9 	.word	0x00003ba9
    4f8c:	00004aa5 	.word	0x00004aa5
    4f90:	000046cd 	.word	0x000046cd
    4f94:	00003a29 	.word	0x00003a29
    4f98:	00004399 	.word	0x00004399
    4f9c:	00003f59 	.word	0x00003f59

00004fa0 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fa2:	46de      	mov	lr, fp
    4fa4:	4657      	mov	r7, sl
    4fa6:	464e      	mov	r6, r9
    4fa8:	4645      	mov	r5, r8
    4faa:	b5e0      	push	{r5, r6, r7, lr}
    4fac:	b083      	sub	sp, #12
    4fae:	0004      	movs	r4, r0
    4fb0:	000f      	movs	r7, r1
    4fb2:	0015      	movs	r5, r2
    4fb4:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    4fb6:	2300      	movs	r3, #0
    4fb8:	464a      	mov	r2, r9
    4fba:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    4fbc:	8881      	ldrh	r1, [r0, #4]
    4fbe:	6800      	ldr	r0, [r0, #0]
    4fc0:	4b5e      	ldr	r3, [pc, #376]	; (513c <f_read+0x19c>)
    4fc2:	4798      	blx	r3
    4fc4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4fc6:	2800      	cmp	r0, #0
    4fc8:	d000      	beq.n	4fcc <f_read+0x2c>
    4fca:	e0af      	b.n	512c <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4fcc:	79a3      	ldrb	r3, [r4, #6]
    4fce:	b25a      	sxtb	r2, r3
    4fd0:	2a00      	cmp	r2, #0
    4fd2:	da00      	bge.n	4fd6 <f_read+0x36>
    4fd4:	e0a8      	b.n	5128 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4fd6:	07db      	lsls	r3, r3, #31
    4fd8:	d402      	bmi.n	4fe0 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4fda:	2307      	movs	r3, #7
    4fdc:	9300      	str	r3, [sp, #0]
    4fde:	e0a5      	b.n	512c <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    4fe0:	68e3      	ldr	r3, [r4, #12]
    4fe2:	68a2      	ldr	r2, [r4, #8]
    4fe4:	1a9e      	subs	r6, r3, r2
    4fe6:	42ae      	cmp	r6, r5
    4fe8:	d900      	bls.n	4fec <f_read+0x4c>
    4fea:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    4fec:	2e00      	cmp	r6, #0
    4fee:	d153      	bne.n	5098 <f_read+0xf8>
    4ff0:	e09c      	b.n	512c <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    4ff2:	6961      	ldr	r1, [r4, #20]
    4ff4:	4b52      	ldr	r3, [pc, #328]	; (5140 <f_read+0x1a0>)
    4ff6:	4798      	blx	r3
    4ff8:	e05c      	b.n	50b4 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4ffa:	79a2      	ldrb	r2, [r4, #6]
    4ffc:	2380      	movs	r3, #128	; 0x80
    4ffe:	425b      	negs	r3, r3
    5000:	4313      	orrs	r3, r2
    5002:	71a3      	strb	r3, [r4, #6]
    5004:	2302      	movs	r3, #2
    5006:	9300      	str	r3, [sp, #0]
    5008:	e090      	b.n	512c <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    500a:	79a2      	ldrb	r2, [r4, #6]
    500c:	2380      	movs	r3, #128	; 0x80
    500e:	425b      	negs	r3, r3
    5010:	4313      	orrs	r3, r2
    5012:	71a3      	strb	r3, [r4, #6]
    5014:	2301      	movs	r3, #1
    5016:	9300      	str	r3, [sp, #0]
    5018:	e088      	b.n	512c <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    501a:	79a2      	ldrb	r2, [r4, #6]
    501c:	2380      	movs	r3, #128	; 0x80
    501e:	425b      	negs	r3, r3
    5020:	4313      	orrs	r3, r2
    5022:	71a3      	strb	r3, [r4, #6]
    5024:	2302      	movs	r3, #2
    5026:	9300      	str	r3, [sp, #0]
    5028:	e080      	b.n	512c <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    502a:	79a2      	ldrb	r2, [r4, #6]
    502c:	2380      	movs	r3, #128	; 0x80
    502e:	425b      	negs	r3, r3
    5030:	4313      	orrs	r3, r2
    5032:	71a3      	strb	r3, [r4, #6]
    5034:	2301      	movs	r3, #1
    5036:	9300      	str	r3, [sp, #0]
    5038:	e078      	b.n	512c <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    503a:	3130      	adds	r1, #48	; 0x30
    503c:	0240      	lsls	r0, r0, #9
    503e:	1838      	adds	r0, r7, r0
    5040:	2280      	movs	r2, #128	; 0x80
    5042:	0092      	lsls	r2, r2, #2
    5044:	4b3f      	ldr	r3, [pc, #252]	; (5144 <f_read+0x1a4>)
    5046:	4798      	blx	r3
    5048:	e063      	b.n	5112 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    504a:	4643      	mov	r3, r8
    504c:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    504e:	68a3      	ldr	r3, [r4, #8]
    5050:	05dd      	lsls	r5, r3, #23
    5052:	0ded      	lsrs	r5, r5, #23
    5054:	2380      	movs	r3, #128	; 0x80
    5056:	009b      	lsls	r3, r3, #2
    5058:	1b5d      	subs	r5, r3, r5
    505a:	42b5      	cmp	r5, r6
    505c:	d900      	bls.n	5060 <f_read+0xc0>
    505e:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    5060:	69a1      	ldr	r1, [r4, #24]
    5062:	6820      	ldr	r0, [r4, #0]
    5064:	4b38      	ldr	r3, [pc, #224]	; (5148 <f_read+0x1a8>)
    5066:	4798      	blx	r3
    5068:	2800      	cmp	r0, #0
    506a:	d155      	bne.n	5118 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    506c:	68a3      	ldr	r3, [r4, #8]
    506e:	05d9      	lsls	r1, r3, #23
    5070:	0dc9      	lsrs	r1, r1, #23
    5072:	3130      	adds	r1, #48	; 0x30
    5074:	6823      	ldr	r3, [r4, #0]
    5076:	469c      	mov	ip, r3
    5078:	4461      	add	r1, ip
    507a:	002a      	movs	r2, r5
    507c:	0038      	movs	r0, r7
    507e:	4b31      	ldr	r3, [pc, #196]	; (5144 <f_read+0x1a4>)
    5080:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    5082:	197f      	adds	r7, r7, r5
    5084:	68a3      	ldr	r3, [r4, #8]
    5086:	195b      	adds	r3, r3, r5
    5088:	60a3      	str	r3, [r4, #8]
    508a:	464b      	mov	r3, r9
    508c:	681b      	ldr	r3, [r3, #0]
    508e:	195b      	adds	r3, r3, r5
    5090:	464a      	mov	r2, r9
    5092:	6013      	str	r3, [r2, #0]
    5094:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    5096:	d049      	beq.n	512c <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    5098:	68a3      	ldr	r3, [r4, #8]
    509a:	05da      	lsls	r2, r3, #23
    509c:	d1d7      	bne.n	504e <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    509e:	6820      	ldr	r0, [r4, #0]
    50a0:	7882      	ldrb	r2, [r0, #2]
    50a2:	3a01      	subs	r2, #1
    50a4:	0a5d      	lsrs	r5, r3, #9
    50a6:	4015      	ands	r5, r2
    50a8:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    50aa:	2d00      	cmp	r5, #0
    50ac:	d107      	bne.n	50be <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    50ae:	2b00      	cmp	r3, #0
    50b0:	d19f      	bne.n	4ff2 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    50b2:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    50b4:	2801      	cmp	r0, #1
    50b6:	d9a0      	bls.n	4ffa <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    50b8:	1c43      	adds	r3, r0, #1
    50ba:	d0a6      	beq.n	500a <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    50bc:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    50be:	6823      	ldr	r3, [r4, #0]
    50c0:	469a      	mov	sl, r3
    50c2:	6961      	ldr	r1, [r4, #20]
    50c4:	0018      	movs	r0, r3
    50c6:	4b21      	ldr	r3, [pc, #132]	; (514c <f_read+0x1ac>)
    50c8:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    50ca:	2800      	cmp	r0, #0
    50cc:	d0a5      	beq.n	501a <f_read+0x7a>
			sect += csect;
    50ce:	4680      	mov	r8, r0
    50d0:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    50d2:	0a73      	lsrs	r3, r6, #9
    50d4:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    50d6:	d0b8      	beq.n	504a <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    50d8:	4653      	mov	r3, sl
    50da:	789b      	ldrb	r3, [r3, #2]
    50dc:	465a      	mov	r2, fp
    50de:	18aa      	adds	r2, r5, r2
    50e0:	429a      	cmp	r2, r3
    50e2:	d901      	bls.n	50e8 <f_read+0x148>
					cc = fp->fs->csize - csect;
    50e4:	1b5b      	subs	r3, r3, r5
    50e6:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    50e8:	465b      	mov	r3, fp
    50ea:	466a      	mov	r2, sp
    50ec:	71d3      	strb	r3, [r2, #7]
    50ee:	79d3      	ldrb	r3, [r2, #7]
    50f0:	4652      	mov	r2, sl
    50f2:	7850      	ldrb	r0, [r2, #1]
    50f4:	4642      	mov	r2, r8
    50f6:	0039      	movs	r1, r7
    50f8:	4d15      	ldr	r5, [pc, #84]	; (5150 <f_read+0x1b0>)
    50fa:	47a8      	blx	r5
    50fc:	2800      	cmp	r0, #0
    50fe:	d194      	bne.n	502a <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    5100:	6821      	ldr	r1, [r4, #0]
    5102:	790b      	ldrb	r3, [r1, #4]
    5104:	2b00      	cmp	r3, #0
    5106:	d004      	beq.n	5112 <f_read+0x172>
    5108:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    510a:	4642      	mov	r2, r8
    510c:	1a98      	subs	r0, r3, r2
    510e:	4583      	cmp	fp, r0
    5110:	d893      	bhi.n	503a <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    5112:	465b      	mov	r3, fp
    5114:	025d      	lsls	r5, r3, #9
				continue;
    5116:	e7b4      	b.n	5082 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    5118:	79a2      	ldrb	r2, [r4, #6]
    511a:	2380      	movs	r3, #128	; 0x80
    511c:	425b      	negs	r3, r3
    511e:	4313      	orrs	r3, r2
    5120:	71a3      	strb	r3, [r4, #6]
    5122:	2301      	movs	r3, #1
    5124:	9300      	str	r3, [sp, #0]
    5126:	e001      	b.n	512c <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5128:	2302      	movs	r3, #2
    512a:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    512c:	9800      	ldr	r0, [sp, #0]
    512e:	b003      	add	sp, #12
    5130:	bc3c      	pop	{r2, r3, r4, r5}
    5132:	4690      	mov	r8, r2
    5134:	4699      	mov	r9, r3
    5136:	46a2      	mov	sl, r4
    5138:	46ab      	mov	fp, r5
    513a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    513c:	00003ad5 	.word	0x00003ad5
    5140:	00003ff9 	.word	0x00003ff9
    5144:	00003a79 	.word	0x00003a79
    5148:	00003f59 	.word	0x00003f59
    514c:	00003a9f 	.word	0x00003a9f
    5150:	000038b5 	.word	0x000038b5

00005154 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5154:	b5f0      	push	{r4, r5, r6, r7, lr}
    5156:	46de      	mov	lr, fp
    5158:	4657      	mov	r7, sl
    515a:	464e      	mov	r6, r9
    515c:	4645      	mov	r5, r8
    515e:	b5e0      	push	{r5, r6, r7, lr}
    5160:	b083      	sub	sp, #12
    5162:	0004      	movs	r4, r0
    5164:	000d      	movs	r5, r1
    5166:	0016      	movs	r6, r2
    5168:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    516a:	2300      	movs	r3, #0
    516c:	464a      	mov	r2, r9
    516e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5170:	8881      	ldrh	r1, [r0, #4]
    5172:	6800      	ldr	r0, [r0, #0]
    5174:	4b7f      	ldr	r3, [pc, #508]	; (5374 <f_write+0x220>)
    5176:	4798      	blx	r3
    5178:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    517a:	2800      	cmp	r0, #0
    517c:	d000      	beq.n	5180 <f_write+0x2c>
    517e:	e0f1      	b.n	5364 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5180:	79a3      	ldrb	r3, [r4, #6]
    5182:	b25a      	sxtb	r2, r3
    5184:	2a00      	cmp	r2, #0
    5186:	da00      	bge.n	518a <f_write+0x36>
    5188:	e0ea      	b.n	5360 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    518a:	079b      	lsls	r3, r3, #30
    518c:	d402      	bmi.n	5194 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    518e:	2307      	movs	r3, #7
    5190:	9300      	str	r3, [sp, #0]
    5192:	e0e7      	b.n	5364 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    5194:	68e3      	ldr	r3, [r4, #12]
    5196:	199a      	adds	r2, r3, r6
    5198:	4293      	cmp	r3, r2
    519a:	d810      	bhi.n	51be <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    519c:	2e00      	cmp	r6, #0
    519e:	d00e      	beq.n	51be <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    51a0:	002f      	movs	r7, r5
    51a2:	e07b      	b.n	529c <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    51a4:	2100      	movs	r1, #0
    51a6:	4b74      	ldr	r3, [pc, #464]	; (5378 <f_write+0x224>)
    51a8:	4798      	blx	r3
    51aa:	0003      	movs	r3, r0
    51ac:	6120      	str	r0, [r4, #16]
    51ae:	e003      	b.n	51b8 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    51b0:	6961      	ldr	r1, [r4, #20]
    51b2:	4b71      	ldr	r3, [pc, #452]	; (5378 <f_write+0x224>)
    51b4:	4798      	blx	r3
    51b6:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    51b8:	2b00      	cmp	r3, #0
    51ba:	d000      	beq.n	51be <f_write+0x6a>
    51bc:	e080      	b.n	52c0 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    51be:	68a3      	ldr	r3, [r4, #8]
    51c0:	68e2      	ldr	r2, [r4, #12]
    51c2:	4293      	cmp	r3, r2
    51c4:	d900      	bls.n	51c8 <f_write+0x74>
    51c6:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    51c8:	79a3      	ldrb	r3, [r4, #6]
    51ca:	2220      	movs	r2, #32
    51cc:	4313      	orrs	r3, r2
    51ce:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    51d0:	e0c8      	b.n	5364 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    51d2:	79a2      	ldrb	r2, [r4, #6]
    51d4:	3b81      	subs	r3, #129	; 0x81
    51d6:	4313      	orrs	r3, r2
    51d8:	71a3      	strb	r3, [r4, #6]
    51da:	2302      	movs	r3, #2
    51dc:	9300      	str	r3, [sp, #0]
    51de:	e0c1      	b.n	5364 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    51e0:	79a2      	ldrb	r2, [r4, #6]
    51e2:	3b7f      	subs	r3, #127	; 0x7f
    51e4:	4313      	orrs	r3, r2
    51e6:	71a3      	strb	r3, [r4, #6]
    51e8:	2301      	movs	r3, #1
    51ea:	9300      	str	r3, [sp, #0]
    51ec:	e0ba      	b.n	5364 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    51ee:	2100      	movs	r1, #0
    51f0:	4b62      	ldr	r3, [pc, #392]	; (537c <f_write+0x228>)
    51f2:	4798      	blx	r3
    51f4:	2800      	cmp	r0, #0
    51f6:	d06d      	beq.n	52d4 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    51f8:	79a2      	ldrb	r2, [r4, #6]
    51fa:	2380      	movs	r3, #128	; 0x80
    51fc:	425b      	negs	r3, r3
    51fe:	4313      	orrs	r3, r2
    5200:	71a3      	strb	r3, [r4, #6]
    5202:	2301      	movs	r3, #1
    5204:	9300      	str	r3, [sp, #0]
    5206:	e0ad      	b.n	5364 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5208:	79a2      	ldrb	r2, [r4, #6]
    520a:	2380      	movs	r3, #128	; 0x80
    520c:	425b      	negs	r3, r3
    520e:	4313      	orrs	r3, r2
    5210:	71a3      	strb	r3, [r4, #6]
    5212:	2302      	movs	r3, #2
    5214:	9300      	str	r3, [sp, #0]
    5216:	e0a5      	b.n	5364 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5218:	79a2      	ldrb	r2, [r4, #6]
    521a:	2380      	movs	r3, #128	; 0x80
    521c:	425b      	negs	r3, r3
    521e:	4313      	orrs	r3, r2
    5220:	71a3      	strb	r3, [r4, #6]
    5222:	2301      	movs	r3, #1
    5224:	9300      	str	r3, [sp, #0]
    5226:	e09d      	b.n	5364 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5228:	0240      	lsls	r0, r0, #9
    522a:	1839      	adds	r1, r7, r0
    522c:	3330      	adds	r3, #48	; 0x30
    522e:	0018      	movs	r0, r3
    5230:	2280      	movs	r2, #128	; 0x80
    5232:	0092      	lsls	r2, r2, #2
    5234:	4b52      	ldr	r3, [pc, #328]	; (5380 <f_write+0x22c>)
    5236:	4798      	blx	r3
					fp->fs->wflag = 0;
    5238:	2300      	movs	r3, #0
    523a:	6822      	ldr	r2, [r4, #0]
    523c:	7113      	strb	r3, [r2, #4]
    523e:	e072      	b.n	5326 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5240:	68a3      	ldr	r3, [r4, #8]
    5242:	68e2      	ldr	r2, [r4, #12]
    5244:	4293      	cmp	r3, r2
    5246:	d271      	bcs.n	532c <f_write+0x1d8>
			fp->dsect = sect;
    5248:	4643      	mov	r3, r8
    524a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    524c:	68a3      	ldr	r3, [r4, #8]
    524e:	05dd      	lsls	r5, r3, #23
    5250:	0ded      	lsrs	r5, r5, #23
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	009b      	lsls	r3, r3, #2
    5256:	1b5d      	subs	r5, r3, r5
    5258:	42b5      	cmp	r5, r6
    525a:	d900      	bls.n	525e <f_write+0x10a>
    525c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    525e:	69a1      	ldr	r1, [r4, #24]
    5260:	6820      	ldr	r0, [r4, #0]
    5262:	4b46      	ldr	r3, [pc, #280]	; (537c <f_write+0x228>)
    5264:	4798      	blx	r3
    5266:	2800      	cmp	r0, #0
    5268:	d172      	bne.n	5350 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    526a:	68a3      	ldr	r3, [r4, #8]
    526c:	05d8      	lsls	r0, r3, #23
    526e:	0dc0      	lsrs	r0, r0, #23
    5270:	3030      	adds	r0, #48	; 0x30
    5272:	6823      	ldr	r3, [r4, #0]
    5274:	469c      	mov	ip, r3
    5276:	4460      	add	r0, ip
    5278:	002a      	movs	r2, r5
    527a:	0039      	movs	r1, r7
    527c:	4b40      	ldr	r3, [pc, #256]	; (5380 <f_write+0x22c>)
    527e:	4798      	blx	r3
		fp->fs->wflag = 1;
    5280:	2301      	movs	r3, #1
    5282:	6822      	ldr	r2, [r4, #0]
    5284:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    5286:	197f      	adds	r7, r7, r5
    5288:	68a3      	ldr	r3, [r4, #8]
    528a:	195b      	adds	r3, r3, r5
    528c:	60a3      	str	r3, [r4, #8]
    528e:	464b      	mov	r3, r9
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	195b      	adds	r3, r3, r5
    5294:	464a      	mov	r2, r9
    5296:	6013      	str	r3, [r2, #0]
    5298:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    529a:	d090      	beq.n	51be <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    529c:	68a3      	ldr	r3, [r4, #8]
    529e:	05da      	lsls	r2, r3, #23
    52a0:	d1d4      	bne.n	524c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    52a2:	6820      	ldr	r0, [r4, #0]
    52a4:	7882      	ldrb	r2, [r0, #2]
    52a6:	3a01      	subs	r2, #1
    52a8:	0a5d      	lsrs	r5, r3, #9
    52aa:	4015      	ands	r5, r2
    52ac:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    52ae:	2d00      	cmp	r5, #0
    52b0:	d10b      	bne.n	52ca <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    52b2:	2b00      	cmp	r3, #0
    52b4:	d000      	beq.n	52b8 <f_write+0x164>
    52b6:	e77b      	b.n	51b0 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    52b8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    52ba:	2b00      	cmp	r3, #0
    52bc:	d100      	bne.n	52c0 <f_write+0x16c>
    52be:	e771      	b.n	51a4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    52c0:	2b01      	cmp	r3, #1
    52c2:	d086      	beq.n	51d2 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    52c4:	1c5a      	adds	r2, r3, #1
    52c6:	d08b      	beq.n	51e0 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    52c8:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    52ca:	6820      	ldr	r0, [r4, #0]
    52cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    52ce:	69a2      	ldr	r2, [r4, #24]
    52d0:	4293      	cmp	r3, r2
    52d2:	d08c      	beq.n	51ee <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    52d4:	6823      	ldr	r3, [r4, #0]
    52d6:	469a      	mov	sl, r3
    52d8:	6961      	ldr	r1, [r4, #20]
    52da:	0018      	movs	r0, r3
    52dc:	4b29      	ldr	r3, [pc, #164]	; (5384 <f_write+0x230>)
    52de:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    52e0:	2800      	cmp	r0, #0
    52e2:	d091      	beq.n	5208 <f_write+0xb4>
			sect += csect;
    52e4:	4680      	mov	r8, r0
    52e6:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    52e8:	0a73      	lsrs	r3, r6, #9
    52ea:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    52ec:	d0a8      	beq.n	5240 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    52ee:	4653      	mov	r3, sl
    52f0:	789b      	ldrb	r3, [r3, #2]
    52f2:	465a      	mov	r2, fp
    52f4:	18aa      	adds	r2, r5, r2
    52f6:	429a      	cmp	r2, r3
    52f8:	d901      	bls.n	52fe <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    52fa:	1b5b      	subs	r3, r3, r5
    52fc:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    52fe:	465b      	mov	r3, fp
    5300:	466a      	mov	r2, sp
    5302:	71d3      	strb	r3, [r2, #7]
    5304:	79d3      	ldrb	r3, [r2, #7]
    5306:	4652      	mov	r2, sl
    5308:	7850      	ldrb	r0, [r2, #1]
    530a:	4642      	mov	r2, r8
    530c:	0039      	movs	r1, r7
    530e:	4d1e      	ldr	r5, [pc, #120]	; (5388 <f_write+0x234>)
    5310:	47a8      	blx	r5
    5312:	2800      	cmp	r0, #0
    5314:	d000      	beq.n	5318 <f_write+0x1c4>
    5316:	e77f      	b.n	5218 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5318:	6823      	ldr	r3, [r4, #0]
    531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    531c:	4641      	mov	r1, r8
    531e:	1a50      	subs	r0, r2, r1
    5320:	4583      	cmp	fp, r0
    5322:	d900      	bls.n	5326 <f_write+0x1d2>
    5324:	e780      	b.n	5228 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5326:	465b      	mov	r3, fp
    5328:	025d      	lsls	r5, r3, #9
				continue;
    532a:	e7ac      	b.n	5286 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    532c:	2100      	movs	r1, #0
    532e:	4650      	mov	r0, sl
    5330:	4b12      	ldr	r3, [pc, #72]	; (537c <f_write+0x228>)
    5332:	4798      	blx	r3
    5334:	2800      	cmp	r0, #0
    5336:	d103      	bne.n	5340 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5338:	6823      	ldr	r3, [r4, #0]
    533a:	4642      	mov	r2, r8
    533c:	62da      	str	r2, [r3, #44]	; 0x2c
    533e:	e783      	b.n	5248 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5340:	79a2      	ldrb	r2, [r4, #6]
    5342:	2380      	movs	r3, #128	; 0x80
    5344:	425b      	negs	r3, r3
    5346:	4313      	orrs	r3, r2
    5348:	71a3      	strb	r3, [r4, #6]
    534a:	2301      	movs	r3, #1
    534c:	9300      	str	r3, [sp, #0]
    534e:	e009      	b.n	5364 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5350:	79a2      	ldrb	r2, [r4, #6]
    5352:	2380      	movs	r3, #128	; 0x80
    5354:	425b      	negs	r3, r3
    5356:	4313      	orrs	r3, r2
    5358:	71a3      	strb	r3, [r4, #6]
    535a:	2301      	movs	r3, #1
    535c:	9300      	str	r3, [sp, #0]
    535e:	e001      	b.n	5364 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5360:	2302      	movs	r3, #2
    5362:	9300      	str	r3, [sp, #0]
}
    5364:	9800      	ldr	r0, [sp, #0]
    5366:	b003      	add	sp, #12
    5368:	bc3c      	pop	{r2, r3, r4, r5}
    536a:	4690      	mov	r8, r2
    536c:	4699      	mov	r9, r3
    536e:	46a2      	mov	sl, r4
    5370:	46ab      	mov	fp, r5
    5372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5374:	00003ad5 	.word	0x00003ad5
    5378:	000042d5 	.word	0x000042d5
    537c:	00003f59 	.word	0x00003f59
    5380:	00003a79 	.word	0x00003a79
    5384:	00003a9f 	.word	0x00003a9f
    5388:	00003939 	.word	0x00003939

0000538c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    538c:	b570      	push	{r4, r5, r6, lr}
    538e:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5390:	8881      	ldrh	r1, [r0, #4]
    5392:	6800      	ldr	r0, [r0, #0]
    5394:	4b1c      	ldr	r3, [pc, #112]	; (5408 <f_sync+0x7c>)
    5396:	4798      	blx	r3
	if (res == FR_OK) {
    5398:	2800      	cmp	r0, #0
    539a:	d102      	bne.n	53a2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    539c:	79a3      	ldrb	r3, [r4, #6]
    539e:	069b      	lsls	r3, r3, #26
    53a0:	d400      	bmi.n	53a4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    53a2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    53a4:	69e1      	ldr	r1, [r4, #28]
    53a6:	6820      	ldr	r0, [r4, #0]
    53a8:	4b18      	ldr	r3, [pc, #96]	; (540c <f_sync+0x80>)
    53aa:	4798      	blx	r3
			if (res == FR_OK) {
    53ac:	2800      	cmp	r0, #0
    53ae:	d1f8      	bne.n	53a2 <f_sync+0x16>
				dir = fp->dir_ptr;
    53b0:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    53b2:	7aeb      	ldrb	r3, [r5, #11]
    53b4:	2220      	movs	r2, #32
    53b6:	4313      	orrs	r3, r2
    53b8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    53ba:	7b23      	ldrb	r3, [r4, #12]
    53bc:	772b      	strb	r3, [r5, #28]
    53be:	89a3      	ldrh	r3, [r4, #12]
    53c0:	0a1b      	lsrs	r3, r3, #8
    53c2:	776b      	strb	r3, [r5, #29]
    53c4:	89e3      	ldrh	r3, [r4, #14]
    53c6:	77ab      	strb	r3, [r5, #30]
    53c8:	7be3      	ldrb	r3, [r4, #15]
    53ca:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    53cc:	7c23      	ldrb	r3, [r4, #16]
    53ce:	76ab      	strb	r3, [r5, #26]
    53d0:	8a23      	ldrh	r3, [r4, #16]
    53d2:	0a1b      	lsrs	r3, r3, #8
    53d4:	76eb      	strb	r3, [r5, #27]
    53d6:	8a63      	ldrh	r3, [r4, #18]
    53d8:	752b      	strb	r3, [r5, #20]
    53da:	8a63      	ldrh	r3, [r4, #18]
    53dc:	0a1b      	lsrs	r3, r3, #8
    53de:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    53e0:	4b0b      	ldr	r3, [pc, #44]	; (5410 <f_sync+0x84>)
    53e2:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    53e4:	75a8      	strb	r0, [r5, #22]
    53e6:	0a03      	lsrs	r3, r0, #8
    53e8:	75eb      	strb	r3, [r5, #23]
    53ea:	0c03      	lsrs	r3, r0, #16
    53ec:	762b      	strb	r3, [r5, #24]
    53ee:	0e00      	lsrs	r0, r0, #24
    53f0:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    53f2:	79a3      	ldrb	r3, [r4, #6]
    53f4:	2220      	movs	r2, #32
    53f6:	4393      	bics	r3, r2
    53f8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    53fa:	2301      	movs	r3, #1
    53fc:	6822      	ldr	r2, [r4, #0]
    53fe:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5400:	6820      	ldr	r0, [r4, #0]
    5402:	4b04      	ldr	r3, [pc, #16]	; (5414 <f_sync+0x88>)
    5404:	4798      	blx	r3
    5406:	e7cc      	b.n	53a2 <f_sync+0x16>
    5408:	00003ad5 	.word	0x00003ad5
    540c:	00003f59 	.word	0x00003f59
    5410:	00003a29 	.word	0x00003a29
    5414:	000049b1 	.word	0x000049b1

00005418 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5418:	b510      	push	{r4, lr}
    541a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    541c:	4b03      	ldr	r3, [pc, #12]	; (542c <f_close+0x14>)
    541e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5420:	2800      	cmp	r0, #0
    5422:	d101      	bne.n	5428 <f_close+0x10>
    5424:	2300      	movs	r3, #0
    5426:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5428:	bd10      	pop	{r4, pc}
    542a:	46c0      	nop			; (mov r8, r8)
    542c:	0000538d 	.word	0x0000538d

00005430 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    5430:	b510      	push	{r4, lr}
    5432:	b082      	sub	sp, #8
    5434:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    5436:	466b      	mov	r3, sp
    5438:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    543a:	ab01      	add	r3, sp, #4
    543c:	2201      	movs	r2, #1
    543e:	4669      	mov	r1, sp
    5440:	0020      	movs	r0, r4
    5442:	4c05      	ldr	r4, [pc, #20]	; (5458 <f_putc+0x28>)
    5444:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    5446:	9b01      	ldr	r3, [sp, #4]
    5448:	1e58      	subs	r0, r3, #1
    544a:	1e43      	subs	r3, r0, #1
    544c:	4198      	sbcs	r0, r3
    544e:	4240      	negs	r0, r0
    5450:	2301      	movs	r3, #1
    5452:	4318      	orrs	r0, r3
}
    5454:	b002      	add	sp, #8
    5456:	bd10      	pop	{r4, pc}
    5458:	00005155 	.word	0x00005155

0000545c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    545e:	0006      	movs	r6, r0
    5460:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    5462:	7800      	ldrb	r0, [r0, #0]
    5464:	2800      	cmp	r0, #0
    5466:	d00b      	beq.n	5480 <f_puts+0x24>
    5468:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    546a:	4f06      	ldr	r7, [pc, #24]	; (5484 <f_puts+0x28>)
    546c:	0029      	movs	r1, r5
    546e:	47b8      	blx	r7
    5470:	1c43      	adds	r3, r0, #1
    5472:	d004      	beq.n	547e <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    5474:	3401      	adds	r4, #1
    5476:	5d30      	ldrb	r0, [r6, r4]
    5478:	2800      	cmp	r0, #0
    547a:	d1f7      	bne.n	546c <f_puts+0x10>
    547c:	0020      	movs	r0, r4
	}
	return n;
}
    547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    5480:	2000      	movs	r0, #0
    5482:	e7fc      	b.n	547e <f_puts+0x22>
    5484:	00005431 	.word	0x00005431

00005488 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5488:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    548a:	287f      	cmp	r0, #127	; 0x7f
    548c:	d911      	bls.n	54b2 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    548e:	2900      	cmp	r1, #0
    5490:	d111      	bne.n	54b6 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5492:	28c7      	cmp	r0, #199	; 0xc7
    5494:	d017      	beq.n	54c6 <ff_convert+0x3e>
    5496:	4a0d      	ldr	r2, [pc, #52]	; (54cc <ff_convert+0x44>)
    5498:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    549a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    549c:	8811      	ldrh	r1, [r2, #0]
    549e:	4281      	cmp	r1, r0
    54a0:	d004      	beq.n	54ac <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    54a2:	3301      	adds	r3, #1
    54a4:	b29b      	uxth	r3, r3
    54a6:	3202      	adds	r2, #2
    54a8:	2b80      	cmp	r3, #128	; 0x80
    54aa:	d1f7      	bne.n	549c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    54ac:	3380      	adds	r3, #128	; 0x80
    54ae:	20ff      	movs	r0, #255	; 0xff
    54b0:	4003      	ands	r3, r0
		}
	}

	return c;
}
    54b2:	0018      	movs	r0, r3
    54b4:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    54b6:	2300      	movs	r3, #0
    54b8:	28ff      	cmp	r0, #255	; 0xff
    54ba:	d8fa      	bhi.n	54b2 <ff_convert+0x2a>
    54bc:	3880      	subs	r0, #128	; 0x80
    54be:	0040      	lsls	r0, r0, #1
    54c0:	4b02      	ldr	r3, [pc, #8]	; (54cc <ff_convert+0x44>)
    54c2:	5ac3      	ldrh	r3, [r0, r3]
    54c4:	e7f5      	b.n	54b2 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    54c6:	2300      	movs	r3, #0
    54c8:	e7f0      	b.n	54ac <ff_convert+0x24>
    54ca:	46c0      	nop			; (mov r8, r8)
    54cc:	00007218 	.word	0x00007218

000054d0 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54d0:	2861      	cmp	r0, #97	; 0x61
    54d2:	d014      	beq.n	54fe <ff_wtoupper+0x2e>
    54d4:	4b0b      	ldr	r3, [pc, #44]	; (5504 <ff_wtoupper+0x34>)
    54d6:	3304      	adds	r3, #4
    54d8:	2101      	movs	r1, #1
    54da:	2262      	movs	r2, #98	; 0x62
    54dc:	4290      	cmp	r0, r2
    54de:	d007      	beq.n	54f0 <ff_wtoupper+0x20>
    54e0:	3101      	adds	r1, #1
    54e2:	3302      	adds	r3, #2
    54e4:	1e9a      	subs	r2, r3, #2
    54e6:	8812      	ldrh	r2, [r2, #0]
    54e8:	2a00      	cmp	r2, #0
    54ea:	d1f7      	bne.n	54dc <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    54ec:	0003      	movs	r3, r0
    54ee:	e004      	b.n	54fa <ff_wtoupper+0x2a>
    54f0:	1e03      	subs	r3, r0, #0
    54f2:	d002      	beq.n	54fa <ff_wtoupper+0x2a>
    54f4:	0049      	lsls	r1, r1, #1
    54f6:	4b04      	ldr	r3, [pc, #16]	; (5508 <ff_wtoupper+0x38>)
    54f8:	5acb      	ldrh	r3, [r1, r3]
}
    54fa:	0018      	movs	r0, r3
    54fc:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54fe:	2100      	movs	r1, #0
    5500:	e7f8      	b.n	54f4 <ff_wtoupper+0x24>
    5502:	46c0      	nop			; (mov r8, r8)
    5504:	00007318 	.word	0x00007318
    5508:	000074f8 	.word	0x000074f8

0000550c <configure_nvm>:
applicationCodeEntry();
}


void configure_nvm(void)
{
    550c:	b500      	push	{lr}
    550e:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5510:	2200      	movs	r2, #0
    5512:	466b      	mov	r3, sp
    5514:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    5516:	4b07      	ldr	r3, [pc, #28]	; (5534 <configure_nvm+0x28>)
    5518:	685b      	ldr	r3, [r3, #4]
    551a:	06db      	lsls	r3, r3, #27
    551c:	0f1b      	lsrs	r3, r3, #28
    551e:	4669      	mov	r1, sp
    5520:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    5522:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    5524:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    5526:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    5528:	4668      	mov	r0, sp
    552a:	4b03      	ldr	r3, [pc, #12]	; (5538 <configure_nvm+0x2c>)
    552c:	4798      	blx	r3
}
    552e:	b003      	add	sp, #12
    5530:	bd00      	pop	{pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	41004000 	.word	0x41004000
    5538:	00000291 	.word	0x00000291

0000553c <update_firmware>:


int8_t update_firmware(uint32_t crc_from_file){
    553c:	b5f0      	push	{r4, r5, r6, r7, lr}
    553e:	46de      	mov	lr, fp
    5540:	4657      	mov	r7, sl
    5542:	464e      	mov	r6, r9
    5544:	4645      	mov	r5, r8
    5546:	b5e0      	push	{r5, r6, r7, lr}
    5548:	b099      	sub	sp, #100	; 0x64
    554a:	af00      	add	r7, sp, #0
    554c:	60b8      	str	r0, [r7, #8]
	//returns -1 if update failed, 0 if successful and ready to jump
	//find all necessary addresses to start at
			setLogLevel(LOG_INFO_LVL);
    554e:	2000      	movs	r0, #0
    5550:	4b80      	ldr	r3, [pc, #512]	; (5754 <update_firmware+0x218>)
    5552:	4798      	blx	r3
	//bomb entire application code region
	
	//for firmware image
			//start of params test
			char firmware_file_name[] = "0:app.bin";
    5554:	233c      	movs	r3, #60	; 0x3c
    5556:	2218      	movs	r2, #24
    5558:	18ba      	adds	r2, r7, r2
    555a:	18d4      	adds	r4, r2, r3
    555c:	4b7e      	ldr	r3, [pc, #504]	; (5758 <update_firmware+0x21c>)
    555e:	0022      	movs	r2, r4
    5560:	cb03      	ldmia	r3!, {r0, r1}
    5562:	c203      	stmia	r2!, {r0, r1}
    5564:	881b      	ldrh	r3, [r3, #0]
    5566:	8013      	strh	r3, [r2, #0]
			FIL firmware_file;
			FRESULT res;
			int8_t successful_update = 1;

			// OPEN params.csv
			SerialConsoleWriteString("READING app.bin \r\n");
    5568:	487c      	ldr	r0, [pc, #496]	; (575c <update_firmware+0x220>)
    556a:	4b7d      	ldr	r3, [pc, #500]	; (5760 <update_firmware+0x224>)
    556c:	4798      	blx	r3
			firmware_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0' ;
    556e:	2330      	movs	r3, #48	; 0x30
    5570:	7023      	strb	r3, [r4, #0]
			res = f_open(&firmware_file, (char const *)firmware_file_name, FA_READ);
    5572:	2201      	movs	r2, #1
    5574:	0021      	movs	r1, r4
    5576:	3b18      	subs	r3, #24
    5578:	2018      	movs	r0, #24
    557a:	1838      	adds	r0, r7, r0
    557c:	18c0      	adds	r0, r0, r3
    557e:	4b79      	ldr	r3, [pc, #484]	; (5764 <update_firmware+0x228>)
    5580:	4798      	blx	r3
			int8_t successful_update = 1;
    5582:	2301      	movs	r3, #1
    5584:	60fb      	str	r3, [r7, #12]
			if (res != FR_OK) {
    5586:	2800      	cmp	r0, #0
    5588:	d143      	bne.n	5612 <update_firmware+0xd6>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
				//set result to -1, file not read correctly
				successful_update = -1;
			}

			configure_nvm();
    558a:	4b77      	ldr	r3, [pc, #476]	; (5768 <update_firmware+0x22c>)
    558c:	4798      	blx	r3
			struct nvm_parameters parameters;
			
			nvm_get_parameters 	( &parameters);				// To fetch parameter From out Device
    558e:	230c      	movs	r3, #12
    5590:	2218      	movs	r2, #24
    5592:	18ba      	adds	r2, r7, r2
    5594:	18d0      	adds	r0, r2, r3
    5596:	4b75      	ldr	r3, [pc, #468]	; (576c <update_firmware+0x230>)
    5598:	4798      	blx	r3
			SerialConsoleWriteString("GOT NVM PARAMETERS \r\n");
    559a:	4875      	ldr	r0, [pc, #468]	; (5770 <update_firmware+0x234>)
    559c:	4d70      	ldr	r5, [pc, #448]	; (5760 <update_firmware+0x224>)
    559e:	47a8      	blx	r5
			uint32_t page_size = parameters.page_size;		//Number of bytes per page --//page size is 64 bytes 
    55a0:	2324      	movs	r3, #36	; 0x24
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	781b      	ldrb	r3, [r3, #0]
    55a6:	001e      	movs	r6, r3
    55a8:	613b      	str	r3, [r7, #16]
    55aa:	607b      	str	r3, [r7, #4]
			uint32_t row_size = page_size * 4;//1028;				//Calculate row size from page size in bytes 
    55ac:	009b      	lsls	r3, r3, #2
    55ae:	4699      	mov	r9, r3
			uint32_t total_rows = parameters.nvm_number_of_pages /4 - (APP_START_ADDRESS/row_size);	
    55b0:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
    55b2:	08a4      	lsrs	r4, r4, #2
    55b4:	0019      	movs	r1, r3
    55b6:	20b0      	movs	r0, #176	; 0xb0
    55b8:	0200      	lsls	r0, r0, #8
    55ba:	4b6e      	ldr	r3, [pc, #440]	; (5774 <update_firmware+0x238>)
    55bc:	4798      	blx	r3
    55be:	1a24      	subs	r4, r4, r0
	
			uint32_t row_address = APP_START_ADDRESS;		//Start Address
			LogMessage(LOG_INFO_LVL,"PAGE SIZE IS %d bytes\r\n",page_size);
    55c0:	0032      	movs	r2, r6
    55c2:	496d      	ldr	r1, [pc, #436]	; (5778 <update_firmware+0x23c>)
    55c4:	2000      	movs	r0, #0
    55c6:	4e6d      	ldr	r6, [pc, #436]	; (577c <update_firmware+0x240>)
    55c8:	47b0      	blx	r6
			LogMessage(LOG_INFO_LVL,"ROW  SIZE IS %d bytes\r\n",row_size);
    55ca:	464a      	mov	r2, r9
    55cc:	496c      	ldr	r1, [pc, #432]	; (5780 <update_firmware+0x244>)
    55ce:	2000      	movs	r0, #0
    55d0:	47b0      	blx	r6
			uint32_t crc_on_block=0;
			uint32_t crc_on_nvm=0;
    55d2:	2300      	movs	r3, #0
    55d4:	623b      	str	r3, [r7, #32]
			PM->APBBMASK.reg |= mask;
    55d6:	4a6b      	ldr	r2, [pc, #428]	; (5784 <update_firmware+0x248>)
    55d8:	69d3      	ldr	r3, [r2, #28]
    55da:	2102      	movs	r1, #2
    55dc:	430b      	orrs	r3, r1
    55de:	61d3      	str	r3, [r2, #28]
			
			dsu_crc32_init();								//Initializing CRC
			
			SerialConsoleWriteString("ERASING APPLICATION CODE \r\n");			
    55e0:	4869      	ldr	r0, [pc, #420]	; (5788 <update_firmware+0x24c>)
    55e2:	47a8      	blx	r5
			for (uint16_t i ; i < total_rows ; i++){ //using total rows means we delete the entire nvm instead of just enough to fit the new program in
    55e4:	2500      	movs	r5, #0
    55e6:	0028      	movs	r0, r5
    55e8:	42ac      	cmp	r4, r5
    55ea:	d925      	bls.n	5638 <update_firmware+0xfc>
				res = nvm_erase_row(row_address + (i * row_size));
    55ec:	4e67      	ldr	r6, [pc, #412]	; (578c <update_firmware+0x250>)
    55ee:	46a0      	mov	r8, r4
    55f0:	464c      	mov	r4, r9
    55f2:	4360      	muls	r0, r4
    55f4:	23b0      	movs	r3, #176	; 0xb0
    55f6:	021b      	lsls	r3, r3, #8
    55f8:	469c      	mov	ip, r3
    55fa:	4460      	add	r0, ip
    55fc:	47b0      	blx	r6
				if (res != STATUS_OK) {
    55fe:	2800      	cmp	r0, #0
    5600:	d110      	bne.n	5624 <update_firmware+0xe8>
			for (uint16_t i ; i < total_rows ; i++){ //using total rows means we delete the entire nvm instead of just enough to fit the new program in
    5602:	3501      	adds	r5, #1
    5604:	b2ad      	uxth	r5, r5
    5606:	0028      	movs	r0, r5
    5608:	45a8      	cmp	r8, r5
    560a:	d8f2      	bhi.n	55f2 <update_firmware+0xb6>
    560c:	46a1      	mov	r9, r4
    560e:	4644      	mov	r4, r8
    5610:	e012      	b.n	5638 <update_firmware+0xfc>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
    5612:	0002      	movs	r2, r0
    5614:	495e      	ldr	r1, [pc, #376]	; (5790 <update_firmware+0x254>)
    5616:	2000      	movs	r0, #0
    5618:	4b58      	ldr	r3, [pc, #352]	; (577c <update_firmware+0x240>)
    561a:	4798      	blx	r3
				successful_update = -1;
    561c:	2301      	movs	r3, #1
    561e:	425b      	negs	r3, r3
    5620:	60fb      	str	r3, [r7, #12]
    5622:	e7b2      	b.n	558a <update_firmware+0x4e>
    5624:	46a1      	mov	r9, r4
    5626:	4644      	mov	r4, r8
					LogMessage(LOG_INFO_LVL ,"[FAIL: NVM ROW DELETION] res %d\r\n", res);
    5628:	0002      	movs	r2, r0
    562a:	495a      	ldr	r1, [pc, #360]	; (5794 <update_firmware+0x258>)
    562c:	2000      	movs	r0, #0
    562e:	4b53      	ldr	r3, [pc, #332]	; (577c <update_firmware+0x240>)
    5630:	4798      	blx	r3
					successful_update = -1; //set result to -1, erase not performed correctly
    5632:	2301      	movs	r3, #1
    5634:	425b      	negs	r3, r3
    5636:	60fb      	str	r3, [r7, #12]
					break; //this will just move to write, need a better solution since jumping doesn't seem happy 
				}
			}
			
			SerialConsoleWriteString("STARTING MOVE BLOCKS \r\n");
    5638:	4857      	ldr	r0, [pc, #348]	; (5798 <update_firmware+0x25c>)
    563a:	4b49      	ldr	r3, [pc, #292]	; (5760 <update_firmware+0x224>)
    563c:	4798      	blx	r3
			UINT br;
			char block[page_size];	
    563e:	693b      	ldr	r3, [r7, #16]
    5640:	3307      	adds	r3, #7
    5642:	08db      	lsrs	r3, r3, #3
    5644:	00db      	lsls	r3, r3, #3
    5646:	466a      	mov	r2, sp
    5648:	1ad3      	subs	r3, r2, r3
    564a:	469d      	mov	sp, r3
    564c:	466e      	mov	r6, sp
			//while(!f_eof(&firmware_file)) // While not end of Firmware file 
			for (uint32_t i ; i < (total_rows * 4) ; i++)
    564e:	00a4      	lsls	r4, r4, #2
    5650:	d033      	beq.n	56ba <update_firmware+0x17e>
    5652:	2300      	movs	r3, #0
    5654:	4698      	mov	r8, r3
    5656:	25b0      	movs	r5, #176	; 0xb0
    5658:	022d      	lsls	r5, r5, #8
			{
					SerialConsoleWriteString("MOVING BLOCKS \r\n");
    565a:	4b41      	ldr	r3, [pc, #260]	; (5760 <update_firmware+0x224>)
    565c:	469b      	mov	fp, r3
								
					res = f_read (&firmware_file,block, page_size, &br);
    565e:	4b4f      	ldr	r3, [pc, #316]	; (579c <update_firmware+0x260>)
    5660:	469a      	mov	sl, r3
    5662:	617e      	str	r6, [r7, #20]
    5664:	4643      	mov	r3, r8
    5666:	603b      	str	r3, [r7, #0]
    5668:	46a0      	mov	r8, r4
    566a:	687c      	ldr	r4, [r7, #4]
					SerialConsoleWriteString("MOVING BLOCKS \r\n");
    566c:	484c      	ldr	r0, [pc, #304]	; (57a0 <update_firmware+0x264>)
    566e:	47d8      	blx	fp
					res = f_read (&firmware_file,block, page_size, &br);
    5670:	231c      	movs	r3, #28
    5672:	18fb      	adds	r3, r7, r3
    5674:	0022      	movs	r2, r4
    5676:	6979      	ldr	r1, [r7, #20]
    5678:	2018      	movs	r0, #24
    567a:	2618      	movs	r6, #24
    567c:	46b4      	mov	ip, r6
    567e:	44bc      	add	ip, r7
    5680:	4460      	add	r0, ip
    5682:	47d0      	blx	sl
					if (res != FR_OK) {
    5684:	2800      	cmp	r0, #0
    5686:	d10e      	bne.n	56a6 <update_firmware+0x16a>
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					
					// Writing block on NVM
					res = nvm_write_buffer(row_address + (page_size * i), block, page_size);
    5688:	8a3a      	ldrh	r2, [r7, #16]
    568a:	6979      	ldr	r1, [r7, #20]
    568c:	0028      	movs	r0, r5
    568e:	4b45      	ldr	r3, [pc, #276]	; (57a4 <update_firmware+0x268>)
    5690:	4798      	blx	r3
					if (res != STATUS_OK) {
    5692:	2800      	cmp	r0, #0
    5694:	d12a      	bne.n	56ec <update_firmware+0x1b0>
			for (uint32_t i ; i < (total_rows * 4) ; i++)
    5696:	683b      	ldr	r3, [r7, #0]
    5698:	3301      	adds	r3, #1
    569a:	603b      	str	r3, [r7, #0]
    569c:	192d      	adds	r5, r5, r4
    569e:	4543      	cmp	r3, r8
    56a0:	d1e4      	bne.n	566c <update_firmware+0x130>
    56a2:	4644      	mov	r4, r8
    56a4:	e009      	b.n	56ba <update_firmware+0x17e>
    56a6:	4644      	mov	r4, r8
						LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
    56a8:	69fb      	ldr	r3, [r7, #28]
    56aa:	0002      	movs	r2, r0
    56ac:	493e      	ldr	r1, [pc, #248]	; (57a8 <update_firmware+0x26c>)
    56ae:	2000      	movs	r0, #0
    56b0:	4d32      	ldr	r5, [pc, #200]	; (577c <update_firmware+0x240>)
    56b2:	47a8      	blx	r5
						successful_update = -1; //set result to -1, file not read correctly
    56b4:	2301      	movs	r3, #1
    56b6:	425b      	negs	r3, r3
    56b8:	60fb      	str	r3, [r7, #12]
						LogMessage(LOG_INFO_LVL ,"[FAIL: WRITE ON BUFFER] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
			}
			f_close(&firmware_file); // we're done with this now, although we could do this after the check
    56ba:	2318      	movs	r3, #24
    56bc:	2218      	movs	r2, #24
    56be:	18ba      	adds	r2, r7, r2
    56c0:	18d0      	adds	r0, r2, r3
    56c2:	4b3a      	ldr	r3, [pc, #232]	; (57ac <update_firmware+0x270>)
    56c4:	4798      	blx	r3
			
			//calculate CRC on NVM
			for (uint32_t i ; i < (total_rows * 4) ; i++){
    56c6:	2600      	movs	r6, #0
    56c8:	42a6      	cmp	r6, r4
    56ca:	d221      	bcs.n	5710 <update_firmware+0x1d4>
				res = crc32_recalculate(row_address,row_size,&crc_on_nvm);
    56cc:	4d38      	ldr	r5, [pc, #224]	; (57b0 <update_firmware+0x274>)
    56ce:	46c8      	mov	r8, r9
    56d0:	2308      	movs	r3, #8
    56d2:	2218      	movs	r2, #24
    56d4:	18ba      	adds	r2, r7, r2
    56d6:	18d2      	adds	r2, r2, r3
    56d8:	4641      	mov	r1, r8
    56da:	20b0      	movs	r0, #176	; 0xb0
    56dc:	0200      	lsls	r0, r0, #8
    56de:	47a8      	blx	r5
				if (res != STATUS_OK) {
    56e0:	2800      	cmp	r0, #0
    56e2:	d10d      	bne.n	5700 <update_firmware+0x1c4>
			for (uint32_t i ; i < (total_rows * 4) ; i++){
    56e4:	3601      	adds	r6, #1
    56e6:	42a6      	cmp	r6, r4
    56e8:	d1f2      	bne.n	56d0 <update_firmware+0x194>
    56ea:	e011      	b.n	5710 <update_firmware+0x1d4>
    56ec:	4644      	mov	r4, r8
						LogMessage(LOG_INFO_LVL ,"[FAIL: WRITE ON BUFFER] res %d\r\n", res);
    56ee:	0002      	movs	r2, r0
    56f0:	4930      	ldr	r1, [pc, #192]	; (57b4 <update_firmware+0x278>)
    56f2:	2000      	movs	r0, #0
    56f4:	4b21      	ldr	r3, [pc, #132]	; (577c <update_firmware+0x240>)
    56f6:	4798      	blx	r3
						successful_update = -1; //set result to -1, file not read correctly
    56f8:	2301      	movs	r3, #1
    56fa:	425b      	negs	r3, r3
    56fc:	60fb      	str	r3, [r7, #12]
						break;
    56fe:	e7dc      	b.n	56ba <update_firmware+0x17e>
					LogMessage(LOG_INFO_LVL ,"[FAIL: CRC ON NVM] res %d\r\n", res);
    5700:	0002      	movs	r2, r0
    5702:	492d      	ldr	r1, [pc, #180]	; (57b8 <update_firmware+0x27c>)
    5704:	2000      	movs	r0, #0
    5706:	4b1d      	ldr	r3, [pc, #116]	; (577c <update_firmware+0x240>)
    5708:	4798      	blx	r3
					successful_update = -1; //set result to -1, file not read correctly
    570a:	2301      	movs	r3, #1
    570c:	425b      	negs	r3, r3
    570e:	60fb      	str	r3, [r7, #12]
					break;
				}
			}
			
			// CHECKING IF CRCs match
			if (crc_on_nvm == crc_from_file){ //we can rework this as a single if, just inverted							
    5710:	6a3b      	ldr	r3, [r7, #32]
    5712:	68ba      	ldr	r2, [r7, #8]
    5714:	4293      	cmp	r3, r2
    5716:	d10b      	bne.n	5730 <update_firmware+0x1f4>
	//for firmware image in nvm
	//read from nvm to buffer
	//crc buffer
	
	//compare crcs and return accordingly
	SerialConsoleWriteString("RETURNING FROM FIRMWARE UPDATE \r\n");
    5718:	4828      	ldr	r0, [pc, #160]	; (57bc <update_firmware+0x280>)
    571a:	4b11      	ldr	r3, [pc, #68]	; (5760 <update_firmware+0x224>)
    571c:	4798      	blx	r3
	return successful_update;
    571e:	68f8      	ldr	r0, [r7, #12]
    5720:	46bd      	mov	sp, r7
    5722:	b019      	add	sp, #100	; 0x64
    5724:	bc3c      	pop	{r2, r3, r4, r5}
    5726:	4690      	mov	r8, r2
    5728:	4699      	mov	r9, r3
    572a:	46a2      	mov	sl, r4
    572c:	46ab      	mov	fp, r5
    572e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				LogMessage(LOG_INFO_LVL ,"[FAIL: CRC DID NOT MATCH]\r\n");
    5730:	4923      	ldr	r1, [pc, #140]	; (57c0 <update_firmware+0x284>)
    5732:	2000      	movs	r0, #0
    5734:	4c11      	ldr	r4, [pc, #68]	; (577c <update_firmware+0x240>)
    5736:	47a0      	blx	r4
				LogMessage(LOG_INFO_LVL ,"[FAIL: %d\r\n", crc_on_nvm);
    5738:	4d22      	ldr	r5, [pc, #136]	; (57c4 <update_firmware+0x288>)
    573a:	6a3a      	ldr	r2, [r7, #32]
    573c:	0029      	movs	r1, r5
    573e:	2000      	movs	r0, #0
    5740:	47a0      	blx	r4
				LogMessage(LOG_INFO_LVL ,"[FAIL: %d\r\n", crc_from_file);
    5742:	68ba      	ldr	r2, [r7, #8]
    5744:	0029      	movs	r1, r5
    5746:	2000      	movs	r0, #0
    5748:	47a0      	blx	r4
				successful_update = -1; // we can theoretically use this as an informal jump, only continue if previous steps were successful
    574a:	2301      	movs	r3, #1
    574c:	425b      	negs	r3, r3
    574e:	60fb      	str	r3, [r7, #12]
    5750:	e7e2      	b.n	5718 <update_firmware+0x1dc>
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	000008a9 	.word	0x000008a9
    5758:	00007b94 	.word	0x00007b94
    575c:	000079c8 	.word	0x000079c8
    5760:	000007e1 	.word	0x000007e1
    5764:	00004e19 	.word	0x00004e19
    5768:	0000550d 	.word	0x0000550d
    576c:	000004bd 	.word	0x000004bd
    5770:	00007a0c 	.word	0x00007a0c
    5774:	00005af9 	.word	0x00005af9
    5778:	00007a24 	.word	0x00007a24
    577c:	000008b5 	.word	0x000008b5
    5780:	00007a3c 	.word	0x00007a3c
    5784:	40000400 	.word	0x40000400
    5788:	00007a54 	.word	0x00007a54
    578c:	00000461 	.word	0x00000461
    5790:	000079dc 	.word	0x000079dc
    5794:	00007a70 	.word	0x00007a70
    5798:	00007a94 	.word	0x00007a94
    579c:	00004fa1 	.word	0x00004fa1
    57a0:	00007aac 	.word	0x00007aac
    57a4:	000003b9 	.word	0x000003b9
    57a8:	00007ac0 	.word	0x00007ac0
    57ac:	00005419 	.word	0x00005419
    57b0:	00000181 	.word	0x00000181
    57b4:	00007b08 	.word	0x00007b08
    57b8:	00007b2c 	.word	0x00007b2c
    57bc:	00007b70 	.word	0x00007b70
    57c0:	00007b48 	.word	0x00007b48
    57c4:	00007b64 	.word	0x00007b64

000057c8 <main>:
{
    57c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ca:	4c95      	ldr	r4, [pc, #596]	; (5a20 <main+0x258>)
    57cc:	44a5      	add	sp, r4
    57ce:	af00      	add	r7, sp, #0
	char test_file_name[] = "0:sd_mmc_test.txt";
    57d0:	23af      	movs	r3, #175	; 0xaf
    57d2:	009b      	lsls	r3, r3, #2
    57d4:	2208      	movs	r2, #8
    57d6:	18ba      	adds	r2, r7, r2
    57d8:	18d2      	adds	r2, r2, r3
    57da:	4b92      	ldr	r3, [pc, #584]	; (5a24 <main+0x25c>)
    57dc:	cb13      	ldmia	r3!, {r0, r1, r4}
    57de:	c213      	stmia	r2!, {r0, r1, r4}
    57e0:	0011      	movs	r1, r2
    57e2:	681a      	ldr	r2, [r3, #0]
    57e4:	600a      	str	r2, [r1, #0]
    57e6:	889b      	ldrh	r3, [r3, #4]
    57e8:	808b      	strh	r3, [r1, #4]
	system_init();
    57ea:	4b8f      	ldr	r3, [pc, #572]	; (5a28 <main+0x260>)
    57ec:	4798      	blx	r3
	delay_init();
    57ee:	4b8f      	ldr	r3, [pc, #572]	; (5a2c <main+0x264>)
    57f0:	4798      	blx	r3
	InitializeSerialConsole();
    57f2:	4b8f      	ldr	r3, [pc, #572]	; (5a30 <main+0x268>)
    57f4:	4798      	blx	r3
	cpu_irq_enable();
    57f6:	4c8f      	ldr	r4, [pc, #572]	; (5a34 <main+0x26c>)
    57f8:	2501      	movs	r5, #1
    57fa:	7025      	strb	r5, [r4, #0]
    57fc:	f3bf 8f5f 	dmb	sy
    5800:	b662      	cpsie	i
	sd_mmc_init();
    5802:	4b8d      	ldr	r3, [pc, #564]	; (5a38 <main+0x270>)
    5804:	4798      	blx	r3
	cpu_irq_enable();
    5806:	7025      	strb	r5, [r4, #0]
    5808:	f3bf 8f5f 	dmb	sy
    580c:	b662      	cpsie	i
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    580e:	488b      	ldr	r0, [pc, #556]	; (5a3c <main+0x274>)
    5810:	4c8b      	ldr	r4, [pc, #556]	; (5a40 <main+0x278>)
    5812:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    5814:	488b      	ldr	r0, [pc, #556]	; (5a44 <main+0x27c>)
    5816:	47a0      	blx	r4
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    5818:	4c89      	ldr	r4, [pc, #548]	; (5a40 <main+0x278>)
				SerialConsoleWriteString("Card install FAIL\n\r");
    581a:	0025      	movs	r5, r4
    581c:	e060      	b.n	58e0 <main+0x118>
    581e:	488a      	ldr	r0, [pc, #552]	; (5a48 <main+0x280>)
    5820:	47a8      	blx	r5
				SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    5822:	488a      	ldr	r0, [pc, #552]	; (5a4c <main+0x284>)
    5824:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    5826:	4e8a      	ldr	r6, [pc, #552]	; (5a50 <main+0x288>)
    5828:	2000      	movs	r0, #0
    582a:	47b0      	blx	r6
    582c:	2802      	cmp	r0, #2
    582e:	d1fb      	bne.n	5828 <main+0x60>
			status = sd_mmc_test_unit_ready(0);
    5830:	2000      	movs	r0, #0
    5832:	4b88      	ldr	r3, [pc, #544]	; (5a54 <main+0x28c>)
    5834:	4798      	blx	r3
			if (CTRL_FAIL == status) {
    5836:	2801      	cmp	r0, #1
    5838:	d0f1      	beq.n	581e <main+0x56>
		} while (CTRL_GOOD != status);
    583a:	2800      	cmp	r0, #0
    583c:	d1f8      	bne.n	5830 <main+0x68>
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    583e:	4886      	ldr	r0, [pc, #536]	; (5a58 <main+0x290>)
    5840:	4b7f      	ldr	r3, [pc, #508]	; (5a40 <main+0x278>)
    5842:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    5844:	228c      	movs	r2, #140	; 0x8c
    5846:	0092      	lsls	r2, r2, #2
    5848:	2100      	movs	r1, #0
    584a:	238c      	movs	r3, #140	; 0x8c
    584c:	2008      	movs	r0, #8
    584e:	1838      	adds	r0, r7, r0
    5850:	18c0      	adds	r0, r0, r3
    5852:	4b82      	ldr	r3, [pc, #520]	; (5a5c <main+0x294>)
    5854:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5856:	238c      	movs	r3, #140	; 0x8c
    5858:	2208      	movs	r2, #8
    585a:	18ba      	adds	r2, r7, r2
    585c:	18d1      	adds	r1, r2, r3
    585e:	2000      	movs	r0, #0
    5860:	4b7f      	ldr	r3, [pc, #508]	; (5a60 <main+0x298>)
    5862:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    5864:	280b      	cmp	r0, #11
    5866:	d03e      	beq.n	58e6 <main+0x11e>
		SerialConsoleWriteString("[OK]\r\n");
    5868:	487e      	ldr	r0, [pc, #504]	; (5a64 <main+0x29c>)
    586a:	4e75      	ldr	r6, [pc, #468]	; (5a40 <main+0x278>)
    586c:	47b0      	blx	r6
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    586e:	487e      	ldr	r0, [pc, #504]	; (5a68 <main+0x2a0>)
    5870:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    5872:	23af      	movs	r3, #175	; 0xaf
    5874:	009b      	lsls	r3, r3, #2
    5876:	2208      	movs	r2, #8
    5878:	18ba      	adds	r2, r7, r2
    587a:	18d1      	adds	r1, r2, r3
    587c:	2330      	movs	r3, #48	; 0x30
    587e:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    5880:	220a      	movs	r2, #10
    5882:	3338      	adds	r3, #56	; 0x38
    5884:	2008      	movs	r0, #8
    5886:	1838      	adds	r0, r7, r0
    5888:	18c0      	adds	r0, r0, r3
    588a:	4b78      	ldr	r3, [pc, #480]	; (5a6c <main+0x2a4>)
    588c:	4798      	blx	r3
		if (res != FR_OK) {
    588e:	2800      	cmp	r0, #0
    5890:	d02f      	beq.n	58f2 <main+0x12a>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5892:	0002      	movs	r2, r0
    5894:	4976      	ldr	r1, [pc, #472]	; (5a70 <main+0x2a8>)
    5896:	2000      	movs	r0, #0
    5898:	4b76      	ldr	r3, [pc, #472]	; (5a74 <main+0x2ac>)
    589a:	4798      	blx	r3
		SerialConsoleWriteString("Please unplug the card.\n\r");
    589c:	4876      	ldr	r0, [pc, #472]	; (5a78 <main+0x2b0>)
    589e:	4e68      	ldr	r6, [pc, #416]	; (5a40 <main+0x278>)
    58a0:	47b0      	blx	r6
		delay_s(1); //Delay to allow text to print
    58a2:	20fa      	movs	r0, #250	; 0xfa
    58a4:	0080      	lsls	r0, r0, #2
    58a6:	4b75      	ldr	r3, [pc, #468]	; (5a7c <main+0x2b4>)
    58a8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    58aa:	b672      	cpsid	i
    58ac:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    58b0:	2200      	movs	r2, #0
    58b2:	4b60      	ldr	r3, [pc, #384]	; (5a34 <main+0x26c>)
    58b4:	701a      	strb	r2, [r3, #0]
		DeinitializeSerialConsole();
    58b6:	4b72      	ldr	r3, [pc, #456]	; (5a80 <main+0x2b8>)
    58b8:	4798      	blx	r3
		sd_mmc_deinit();
    58ba:	4b72      	ldr	r3, [pc, #456]	; (5a84 <main+0x2bc>)
    58bc:	4798      	blx	r3
		SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    58be:	4872      	ldr	r0, [pc, #456]	; (5a88 <main+0x2c0>)
    58c0:	47b0      	blx	r6
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    58c2:	23b0      	movs	r3, #176	; 0xb0
    58c4:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    58c6:	681a      	ldr	r2, [r3, #0]
    58c8:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    58cc:	4a6f      	ldr	r2, [pc, #444]	; (5a8c <main+0x2c4>)
    58ce:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    58d0:	4b6f      	ldr	r3, [pc, #444]	; (5a90 <main+0x2c8>)
applicationCodeEntry();
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    58d6:	4e5e      	ldr	r6, [pc, #376]	; (5a50 <main+0x288>)
    58d8:	2000      	movs	r0, #0
    58da:	47b0      	blx	r6
    58dc:	2802      	cmp	r0, #2
    58de:	d1fb      	bne.n	58d8 <main+0x110>
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    58e0:	486c      	ldr	r0, [pc, #432]	; (5a94 <main+0x2cc>)
    58e2:	47a0      	blx	r4
    58e4:	e7a4      	b.n	5830 <main+0x68>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    58e6:	220b      	movs	r2, #11
    58e8:	4961      	ldr	r1, [pc, #388]	; (5a70 <main+0x2a8>)
    58ea:	2000      	movs	r0, #0
    58ec:	4b61      	ldr	r3, [pc, #388]	; (5a74 <main+0x2ac>)
    58ee:	4798      	blx	r3
			goto main_end_of_test;
    58f0:	e7d4      	b.n	589c <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    58f2:	485c      	ldr	r0, [pc, #368]	; (5a64 <main+0x29c>)
    58f4:	4e52      	ldr	r6, [pc, #328]	; (5a40 <main+0x278>)
    58f6:	47b0      	blx	r6
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    58f8:	4867      	ldr	r0, [pc, #412]	; (5a98 <main+0x2d0>)
    58fa:	47b0      	blx	r6
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    58fc:	2368      	movs	r3, #104	; 0x68
    58fe:	2208      	movs	r2, #8
    5900:	18ba      	adds	r2, r7, r2
    5902:	18d1      	adds	r1, r2, r3
    5904:	4865      	ldr	r0, [pc, #404]	; (5a9c <main+0x2d4>)
    5906:	4b66      	ldr	r3, [pc, #408]	; (5aa0 <main+0x2d8>)
    5908:	4798      	blx	r3
    590a:	2800      	cmp	r0, #0
    590c:	d10a      	bne.n	5924 <main+0x15c>
			f_close(&file_object);
    590e:	2368      	movs	r3, #104	; 0x68
    5910:	2208      	movs	r2, #8
    5912:	18ba      	adds	r2, r7, r2
    5914:	18d0      	adds	r0, r2, r3
    5916:	4b63      	ldr	r3, [pc, #396]	; (5aa4 <main+0x2dc>)
    5918:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    591a:	4963      	ldr	r1, [pc, #396]	; (5aa8 <main+0x2e0>)
    591c:	2000      	movs	r0, #0
    591e:	4b55      	ldr	r3, [pc, #340]	; (5a74 <main+0x2ac>)
    5920:	4798      	blx	r3
			goto main_end_of_test;
    5922:	e7bb      	b.n	589c <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    5924:	484f      	ldr	r0, [pc, #316]	; (5a64 <main+0x29c>)
    5926:	4e46      	ldr	r6, [pc, #280]	; (5a40 <main+0x278>)
    5928:	47b0      	blx	r6
		f_close(&file_object); //Close file
    592a:	2368      	movs	r3, #104	; 0x68
    592c:	2208      	movs	r2, #8
    592e:	18ba      	adds	r2, r7, r2
    5930:	18d0      	adds	r0, r2, r3
    5932:	4b5c      	ldr	r3, [pc, #368]	; (5aa4 <main+0x2dc>)
    5934:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    5936:	485d      	ldr	r0, [pc, #372]	; (5aac <main+0x2e4>)
    5938:	47b0      	blx	r6
		char params_file_name[] = "params.csv";
    593a:	230c      	movs	r3, #12
    593c:	18fa      	adds	r2, r7, r3
    593e:	4b5c      	ldr	r3, [pc, #368]	; (5ab0 <main+0x2e8>)
    5940:	cb03      	ldmia	r3!, {r0, r1}
    5942:	c203      	stmia	r2!, {r0, r1}
    5944:	0011      	movs	r1, r2
    5946:	881a      	ldrh	r2, [r3, #0]
    5948:	800a      	strh	r2, [r1, #0]
    594a:	789b      	ldrb	r3, [r3, #2]
    594c:	708b      	strb	r3, [r1, #2]
		SerialConsoleWriteString("Opening params.csv\r\n");
    594e:	4859      	ldr	r0, [pc, #356]	; (5ab4 <main+0x2ec>)
    5950:	47b0      	blx	r6
		res = f_open(&params_file, (char const *)params_file_name, FA_READ);
    5952:	2201      	movs	r2, #1
    5954:	230c      	movs	r3, #12
    5956:	18f9      	adds	r1, r7, r3
    5958:	3304      	adds	r3, #4
    595a:	2008      	movs	r0, #8
    595c:	1838      	adds	r0, r7, r0
    595e:	18c0      	adds	r0, r0, r3
    5960:	4b42      	ldr	r3, [pc, #264]	; (5a6c <main+0x2a4>)
    5962:	4798      	blx	r3
    5964:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    5966:	d004      	beq.n	5972 <main+0x1aa>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
    5968:	4953      	ldr	r1, [pc, #332]	; (5ab8 <main+0x2f0>)
    596a:	2000      	movs	r0, #0
    596c:	4b41      	ldr	r3, [pc, #260]	; (5a74 <main+0x2ac>)
    596e:	4798      	blx	r3
			goto main_end_of_test;
    5970:	e794      	b.n	589c <main+0xd4>
		res = f_read (&params_file,(char const *)params, 50, &br);
    5972:	2308      	movs	r3, #8
    5974:	18fb      	adds	r3, r7, r3
    5976:	2232      	movs	r2, #50	; 0x32
    5978:	2134      	movs	r1, #52	; 0x34
    597a:	2008      	movs	r0, #8
    597c:	469c      	mov	ip, r3
    597e:	4461      	add	r1, ip
    5980:	3008      	adds	r0, #8
    5982:	469c      	mov	ip, r3
    5984:	4460      	add	r0, ip
    5986:	4e4d      	ldr	r6, [pc, #308]	; (5abc <main+0x2f4>)
    5988:	47b0      	blx	r6
    598a:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    598c:	d004      	beq.n	5998 <main+0x1d0>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
    598e:	494c      	ldr	r1, [pc, #304]	; (5ac0 <main+0x2f8>)
    5990:	2000      	movs	r0, #0
    5992:	4b38      	ldr	r3, [pc, #224]	; (5a74 <main+0x2ac>)
    5994:	4798      	blx	r3
			goto main_end_of_test;
    5996:	e781      	b.n	589c <main+0xd4>
		LogMessage(LOG_INFO_LVL ,"[Bytes read from params.csv: ] %d\r\n", br);
    5998:	68ba      	ldr	r2, [r7, #8]
    599a:	494a      	ldr	r1, [pc, #296]	; (5ac4 <main+0x2fc>)
    599c:	2000      	movs	r0, #0
    599e:	4b35      	ldr	r3, [pc, #212]	; (5a74 <main+0x2ac>)
    59a0:	4798      	blx	r3
		f_close(&params_file);		
    59a2:	2310      	movs	r3, #16
    59a4:	2208      	movs	r2, #8
    59a6:	18ba      	adds	r2, r7, r2
    59a8:	18d0      	adds	r0, r2, r3
    59aa:	4b3e      	ldr	r3, [pc, #248]	; (5aa4 <main+0x2dc>)
    59ac:	4798      	blx	r3
		char * flag = strtok(params, ",");
    59ae:	4e46      	ldr	r6, [pc, #280]	; (5ac8 <main+0x300>)
    59b0:	0031      	movs	r1, r6
    59b2:	2334      	movs	r3, #52	; 0x34
    59b4:	2208      	movs	r2, #8
    59b6:	18ba      	adds	r2, r7, r2
    59b8:	18d0      	adds	r0, r2, r3
    59ba:	4b44      	ldr	r3, [pc, #272]	; (5acc <main+0x304>)
    59bc:	4798      	blx	r3
    59be:	6038      	str	r0, [r7, #0]
		char * string_crc_from_file = strtok(NULL, ",");
    59c0:	0031      	movs	r1, r6
    59c2:	2000      	movs	r0, #0
    59c4:	4b41      	ldr	r3, [pc, #260]	; (5acc <main+0x304>)
    59c6:	4798      	blx	r3
		uint32_t crc_from_file = strtoul(string_crc_from_file,useless,16); // could theoretically do this backwards and it'd be cleaner
    59c8:	2210      	movs	r2, #16
    59ca:	2100      	movs	r1, #0
    59cc:	4b40      	ldr	r3, [pc, #256]	; (5ad0 <main+0x308>)
    59ce:	4798      	blx	r3
    59d0:	6078      	str	r0, [r7, #4]
		SerialConsoleWriteString("Reading from params.csv \r\n");
    59d2:	4840      	ldr	r0, [pc, #256]	; (5ad4 <main+0x30c>)
    59d4:	4e1a      	ldr	r6, [pc, #104]	; (5a40 <main+0x278>)
    59d6:	47b0      	blx	r6
		SerialConsoleWriteString(flag);
    59d8:	6838      	ldr	r0, [r7, #0]
    59da:	47b0      	blx	r6
		SerialConsoleWriteString("\r\n");
    59dc:	483e      	ldr	r0, [pc, #248]	; (5ad8 <main+0x310>)
    59de:	47b0      	blx	r6
		SerialConsoleWriteString(crc_from_file);
    59e0:	6878      	ldr	r0, [r7, #4]
    59e2:	47b0      	blx	r6
		SerialConsoleWriteString("\r\n");
    59e4:	483c      	ldr	r0, [pc, #240]	; (5ad8 <main+0x310>)
    59e6:	47b0      	blx	r6
	return (port_base->IN.reg & pin_mask);
    59e8:	4b3c      	ldr	r3, [pc, #240]	; (5adc <main+0x314>)
    59ea:	6a1b      	ldr	r3, [r3, #32]
		if(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    59ec:	021b      	lsls	r3, r3, #8
    59ee:	d50c      	bpl.n	5a0a <main+0x242>
		else if(strcmp("1",flag)==0){ 
    59f0:	6839      	ldr	r1, [r7, #0]
    59f2:	483b      	ldr	r0, [pc, #236]	; (5ae0 <main+0x318>)
    59f4:	4b3b      	ldr	r3, [pc, #236]	; (5ae4 <main+0x31c>)
    59f6:	4798      	blx	r3
    59f8:	2800      	cmp	r0, #0
    59fa:	d10d      	bne.n	5a18 <main+0x250>
				SerialConsoleWriteString("Update Flag was set: UPDATING FIRMWARE \r\n");
    59fc:	483a      	ldr	r0, [pc, #232]	; (5ae8 <main+0x320>)
    59fe:	4b10      	ldr	r3, [pc, #64]	; (5a40 <main+0x278>)
    5a00:	4798      	blx	r3
				update_firmware(crc_from_file);
    5a02:	6878      	ldr	r0, [r7, #4]
    5a04:	4b39      	ldr	r3, [pc, #228]	; (5aec <main+0x324>)
    5a06:	4798      	blx	r3
    5a08:	e748      	b.n	589c <main+0xd4>
				SerialConsoleWriteString("Button was pressed: UPDATING FIRMWARE \r\n");
    5a0a:	4839      	ldr	r0, [pc, #228]	; (5af0 <main+0x328>)
    5a0c:	4b0c      	ldr	r3, [pc, #48]	; (5a40 <main+0x278>)
    5a0e:	4798      	blx	r3
				update_firmware(crc_from_file);
    5a10:	6878      	ldr	r0, [r7, #4]
    5a12:	4b36      	ldr	r3, [pc, #216]	; (5aec <main+0x324>)
    5a14:	4798      	blx	r3
    5a16:	e741      	b.n	589c <main+0xd4>
				SerialConsoleWriteString("NO REASON TO UPDATE : JUMPING TO APPLICATION \r\n");
    5a18:	4836      	ldr	r0, [pc, #216]	; (5af4 <main+0x32c>)
    5a1a:	4b09      	ldr	r3, [pc, #36]	; (5a40 <main+0x278>)
    5a1c:	4798      	blx	r3
    5a1e:	e73d      	b.n	589c <main+0xd4>
    5a20:	fffffd24 	.word	0xfffffd24
    5a24:	000079a8 	.word	0x000079a8
    5a28:	0000361d 	.word	0x0000361d
    5a2c:	00000115 	.word	0x00000115
    5a30:	00000641 	.word	0x00000641
    5a34:	20000009 	.word	0x20000009
    5a38:	00000a11 	.word	0x00000a11
    5a3c:	000076d8 	.word	0x000076d8
    5a40:	000007e1 	.word	0x000007e1
    5a44:	000076f4 	.word	0x000076f4
    5a48:	00007744 	.word	0x00007744
    5a4c:	00007758 	.word	0x00007758
    5a50:	00000a31 	.word	0x00000a31
    5a54:	00001145 	.word	0x00001145
    5a58:	00007780 	.word	0x00007780
    5a5c:	00005e95 	.word	0x00005e95
    5a60:	00004de9 	.word	0x00004de9
    5a64:	000077ac 	.word	0x000077ac
    5a68:	000077b4 	.word	0x000077b4
    5a6c:	00004e19 	.word	0x00004e19
    5a70:	0000779c 	.word	0x0000779c
    5a74:	000008b5 	.word	0x000008b5
    5a78:	00007970 	.word	0x00007970
    5a7c:	00000155 	.word	0x00000155
    5a80:	000007a9 	.word	0x000007a9
    5a84:	00001495 	.word	0x00001495
    5a88:	0000798c 	.word	0x0000798c
    5a8c:	e000ed00 	.word	0xe000ed00
    5a90:	0000b004 	.word	0x0000b004
    5a94:	0000771c 	.word	0x0000771c
    5a98:	000077d0 	.word	0x000077d0
    5a9c:	000077f4 	.word	0x000077f4
    5aa0:	0000545d 	.word	0x0000545d
    5aa4:	00005419 	.word	0x00005419
    5aa8:	00007808 	.word	0x00007808
    5aac:	00007814 	.word	0x00007814
    5ab0:	000079bc 	.word	0x000079bc
    5ab4:	0000782c 	.word	0x0000782c
    5ab8:	00007844 	.word	0x00007844
    5abc:	00004fa1 	.word	0x00004fa1
    5ac0:	00007870 	.word	0x00007870
    5ac4:	000078a0 	.word	0x000078a0
    5ac8:	000078c4 	.word	0x000078c4
    5acc:	000061a9 	.word	0x000061a9
    5ad0:	00006365 	.word	0x00006365
    5ad4:	000078c8 	.word	0x000078c8
    5ad8:	000079d8 	.word	0x000079d8
    5adc:	41004480 	.word	0x41004480
    5ae0:	00007910 	.word	0x00007910
    5ae4:	00006185 	.word	0x00006185
    5ae8:	00007914 	.word	0x00007914
    5aec:	0000553d 	.word	0x0000553d
    5af0:	000078e4 	.word	0x000078e4
    5af4:	00007940 	.word	0x00007940

00005af8 <__udivsi3>:
    5af8:	2200      	movs	r2, #0
    5afa:	0843      	lsrs	r3, r0, #1
    5afc:	428b      	cmp	r3, r1
    5afe:	d374      	bcc.n	5bea <__udivsi3+0xf2>
    5b00:	0903      	lsrs	r3, r0, #4
    5b02:	428b      	cmp	r3, r1
    5b04:	d35f      	bcc.n	5bc6 <__udivsi3+0xce>
    5b06:	0a03      	lsrs	r3, r0, #8
    5b08:	428b      	cmp	r3, r1
    5b0a:	d344      	bcc.n	5b96 <__udivsi3+0x9e>
    5b0c:	0b03      	lsrs	r3, r0, #12
    5b0e:	428b      	cmp	r3, r1
    5b10:	d328      	bcc.n	5b64 <__udivsi3+0x6c>
    5b12:	0c03      	lsrs	r3, r0, #16
    5b14:	428b      	cmp	r3, r1
    5b16:	d30d      	bcc.n	5b34 <__udivsi3+0x3c>
    5b18:	22ff      	movs	r2, #255	; 0xff
    5b1a:	0209      	lsls	r1, r1, #8
    5b1c:	ba12      	rev	r2, r2
    5b1e:	0c03      	lsrs	r3, r0, #16
    5b20:	428b      	cmp	r3, r1
    5b22:	d302      	bcc.n	5b2a <__udivsi3+0x32>
    5b24:	1212      	asrs	r2, r2, #8
    5b26:	0209      	lsls	r1, r1, #8
    5b28:	d065      	beq.n	5bf6 <__udivsi3+0xfe>
    5b2a:	0b03      	lsrs	r3, r0, #12
    5b2c:	428b      	cmp	r3, r1
    5b2e:	d319      	bcc.n	5b64 <__udivsi3+0x6c>
    5b30:	e000      	b.n	5b34 <__udivsi3+0x3c>
    5b32:	0a09      	lsrs	r1, r1, #8
    5b34:	0bc3      	lsrs	r3, r0, #15
    5b36:	428b      	cmp	r3, r1
    5b38:	d301      	bcc.n	5b3e <__udivsi3+0x46>
    5b3a:	03cb      	lsls	r3, r1, #15
    5b3c:	1ac0      	subs	r0, r0, r3
    5b3e:	4152      	adcs	r2, r2
    5b40:	0b83      	lsrs	r3, r0, #14
    5b42:	428b      	cmp	r3, r1
    5b44:	d301      	bcc.n	5b4a <__udivsi3+0x52>
    5b46:	038b      	lsls	r3, r1, #14
    5b48:	1ac0      	subs	r0, r0, r3
    5b4a:	4152      	adcs	r2, r2
    5b4c:	0b43      	lsrs	r3, r0, #13
    5b4e:	428b      	cmp	r3, r1
    5b50:	d301      	bcc.n	5b56 <__udivsi3+0x5e>
    5b52:	034b      	lsls	r3, r1, #13
    5b54:	1ac0      	subs	r0, r0, r3
    5b56:	4152      	adcs	r2, r2
    5b58:	0b03      	lsrs	r3, r0, #12
    5b5a:	428b      	cmp	r3, r1
    5b5c:	d301      	bcc.n	5b62 <__udivsi3+0x6a>
    5b5e:	030b      	lsls	r3, r1, #12
    5b60:	1ac0      	subs	r0, r0, r3
    5b62:	4152      	adcs	r2, r2
    5b64:	0ac3      	lsrs	r3, r0, #11
    5b66:	428b      	cmp	r3, r1
    5b68:	d301      	bcc.n	5b6e <__udivsi3+0x76>
    5b6a:	02cb      	lsls	r3, r1, #11
    5b6c:	1ac0      	subs	r0, r0, r3
    5b6e:	4152      	adcs	r2, r2
    5b70:	0a83      	lsrs	r3, r0, #10
    5b72:	428b      	cmp	r3, r1
    5b74:	d301      	bcc.n	5b7a <__udivsi3+0x82>
    5b76:	028b      	lsls	r3, r1, #10
    5b78:	1ac0      	subs	r0, r0, r3
    5b7a:	4152      	adcs	r2, r2
    5b7c:	0a43      	lsrs	r3, r0, #9
    5b7e:	428b      	cmp	r3, r1
    5b80:	d301      	bcc.n	5b86 <__udivsi3+0x8e>
    5b82:	024b      	lsls	r3, r1, #9
    5b84:	1ac0      	subs	r0, r0, r3
    5b86:	4152      	adcs	r2, r2
    5b88:	0a03      	lsrs	r3, r0, #8
    5b8a:	428b      	cmp	r3, r1
    5b8c:	d301      	bcc.n	5b92 <__udivsi3+0x9a>
    5b8e:	020b      	lsls	r3, r1, #8
    5b90:	1ac0      	subs	r0, r0, r3
    5b92:	4152      	adcs	r2, r2
    5b94:	d2cd      	bcs.n	5b32 <__udivsi3+0x3a>
    5b96:	09c3      	lsrs	r3, r0, #7
    5b98:	428b      	cmp	r3, r1
    5b9a:	d301      	bcc.n	5ba0 <__udivsi3+0xa8>
    5b9c:	01cb      	lsls	r3, r1, #7
    5b9e:	1ac0      	subs	r0, r0, r3
    5ba0:	4152      	adcs	r2, r2
    5ba2:	0983      	lsrs	r3, r0, #6
    5ba4:	428b      	cmp	r3, r1
    5ba6:	d301      	bcc.n	5bac <__udivsi3+0xb4>
    5ba8:	018b      	lsls	r3, r1, #6
    5baa:	1ac0      	subs	r0, r0, r3
    5bac:	4152      	adcs	r2, r2
    5bae:	0943      	lsrs	r3, r0, #5
    5bb0:	428b      	cmp	r3, r1
    5bb2:	d301      	bcc.n	5bb8 <__udivsi3+0xc0>
    5bb4:	014b      	lsls	r3, r1, #5
    5bb6:	1ac0      	subs	r0, r0, r3
    5bb8:	4152      	adcs	r2, r2
    5bba:	0903      	lsrs	r3, r0, #4
    5bbc:	428b      	cmp	r3, r1
    5bbe:	d301      	bcc.n	5bc4 <__udivsi3+0xcc>
    5bc0:	010b      	lsls	r3, r1, #4
    5bc2:	1ac0      	subs	r0, r0, r3
    5bc4:	4152      	adcs	r2, r2
    5bc6:	08c3      	lsrs	r3, r0, #3
    5bc8:	428b      	cmp	r3, r1
    5bca:	d301      	bcc.n	5bd0 <__udivsi3+0xd8>
    5bcc:	00cb      	lsls	r3, r1, #3
    5bce:	1ac0      	subs	r0, r0, r3
    5bd0:	4152      	adcs	r2, r2
    5bd2:	0883      	lsrs	r3, r0, #2
    5bd4:	428b      	cmp	r3, r1
    5bd6:	d301      	bcc.n	5bdc <__udivsi3+0xe4>
    5bd8:	008b      	lsls	r3, r1, #2
    5bda:	1ac0      	subs	r0, r0, r3
    5bdc:	4152      	adcs	r2, r2
    5bde:	0843      	lsrs	r3, r0, #1
    5be0:	428b      	cmp	r3, r1
    5be2:	d301      	bcc.n	5be8 <__udivsi3+0xf0>
    5be4:	004b      	lsls	r3, r1, #1
    5be6:	1ac0      	subs	r0, r0, r3
    5be8:	4152      	adcs	r2, r2
    5bea:	1a41      	subs	r1, r0, r1
    5bec:	d200      	bcs.n	5bf0 <__udivsi3+0xf8>
    5bee:	4601      	mov	r1, r0
    5bf0:	4152      	adcs	r2, r2
    5bf2:	4610      	mov	r0, r2
    5bf4:	4770      	bx	lr
    5bf6:	e7ff      	b.n	5bf8 <__udivsi3+0x100>
    5bf8:	b501      	push	{r0, lr}
    5bfa:	2000      	movs	r0, #0
    5bfc:	f000 f8f0 	bl	5de0 <__aeabi_idiv0>
    5c00:	bd02      	pop	{r1, pc}
    5c02:	46c0      	nop			; (mov r8, r8)

00005c04 <__aeabi_uidivmod>:
    5c04:	2900      	cmp	r1, #0
    5c06:	d0f7      	beq.n	5bf8 <__udivsi3+0x100>
    5c08:	e776      	b.n	5af8 <__udivsi3>
    5c0a:	4770      	bx	lr

00005c0c <__divsi3>:
    5c0c:	4603      	mov	r3, r0
    5c0e:	430b      	orrs	r3, r1
    5c10:	d47f      	bmi.n	5d12 <__divsi3+0x106>
    5c12:	2200      	movs	r2, #0
    5c14:	0843      	lsrs	r3, r0, #1
    5c16:	428b      	cmp	r3, r1
    5c18:	d374      	bcc.n	5d04 <__divsi3+0xf8>
    5c1a:	0903      	lsrs	r3, r0, #4
    5c1c:	428b      	cmp	r3, r1
    5c1e:	d35f      	bcc.n	5ce0 <__divsi3+0xd4>
    5c20:	0a03      	lsrs	r3, r0, #8
    5c22:	428b      	cmp	r3, r1
    5c24:	d344      	bcc.n	5cb0 <__divsi3+0xa4>
    5c26:	0b03      	lsrs	r3, r0, #12
    5c28:	428b      	cmp	r3, r1
    5c2a:	d328      	bcc.n	5c7e <__divsi3+0x72>
    5c2c:	0c03      	lsrs	r3, r0, #16
    5c2e:	428b      	cmp	r3, r1
    5c30:	d30d      	bcc.n	5c4e <__divsi3+0x42>
    5c32:	22ff      	movs	r2, #255	; 0xff
    5c34:	0209      	lsls	r1, r1, #8
    5c36:	ba12      	rev	r2, r2
    5c38:	0c03      	lsrs	r3, r0, #16
    5c3a:	428b      	cmp	r3, r1
    5c3c:	d302      	bcc.n	5c44 <__divsi3+0x38>
    5c3e:	1212      	asrs	r2, r2, #8
    5c40:	0209      	lsls	r1, r1, #8
    5c42:	d065      	beq.n	5d10 <__divsi3+0x104>
    5c44:	0b03      	lsrs	r3, r0, #12
    5c46:	428b      	cmp	r3, r1
    5c48:	d319      	bcc.n	5c7e <__divsi3+0x72>
    5c4a:	e000      	b.n	5c4e <__divsi3+0x42>
    5c4c:	0a09      	lsrs	r1, r1, #8
    5c4e:	0bc3      	lsrs	r3, r0, #15
    5c50:	428b      	cmp	r3, r1
    5c52:	d301      	bcc.n	5c58 <__divsi3+0x4c>
    5c54:	03cb      	lsls	r3, r1, #15
    5c56:	1ac0      	subs	r0, r0, r3
    5c58:	4152      	adcs	r2, r2
    5c5a:	0b83      	lsrs	r3, r0, #14
    5c5c:	428b      	cmp	r3, r1
    5c5e:	d301      	bcc.n	5c64 <__divsi3+0x58>
    5c60:	038b      	lsls	r3, r1, #14
    5c62:	1ac0      	subs	r0, r0, r3
    5c64:	4152      	adcs	r2, r2
    5c66:	0b43      	lsrs	r3, r0, #13
    5c68:	428b      	cmp	r3, r1
    5c6a:	d301      	bcc.n	5c70 <__divsi3+0x64>
    5c6c:	034b      	lsls	r3, r1, #13
    5c6e:	1ac0      	subs	r0, r0, r3
    5c70:	4152      	adcs	r2, r2
    5c72:	0b03      	lsrs	r3, r0, #12
    5c74:	428b      	cmp	r3, r1
    5c76:	d301      	bcc.n	5c7c <__divsi3+0x70>
    5c78:	030b      	lsls	r3, r1, #12
    5c7a:	1ac0      	subs	r0, r0, r3
    5c7c:	4152      	adcs	r2, r2
    5c7e:	0ac3      	lsrs	r3, r0, #11
    5c80:	428b      	cmp	r3, r1
    5c82:	d301      	bcc.n	5c88 <__divsi3+0x7c>
    5c84:	02cb      	lsls	r3, r1, #11
    5c86:	1ac0      	subs	r0, r0, r3
    5c88:	4152      	adcs	r2, r2
    5c8a:	0a83      	lsrs	r3, r0, #10
    5c8c:	428b      	cmp	r3, r1
    5c8e:	d301      	bcc.n	5c94 <__divsi3+0x88>
    5c90:	028b      	lsls	r3, r1, #10
    5c92:	1ac0      	subs	r0, r0, r3
    5c94:	4152      	adcs	r2, r2
    5c96:	0a43      	lsrs	r3, r0, #9
    5c98:	428b      	cmp	r3, r1
    5c9a:	d301      	bcc.n	5ca0 <__divsi3+0x94>
    5c9c:	024b      	lsls	r3, r1, #9
    5c9e:	1ac0      	subs	r0, r0, r3
    5ca0:	4152      	adcs	r2, r2
    5ca2:	0a03      	lsrs	r3, r0, #8
    5ca4:	428b      	cmp	r3, r1
    5ca6:	d301      	bcc.n	5cac <__divsi3+0xa0>
    5ca8:	020b      	lsls	r3, r1, #8
    5caa:	1ac0      	subs	r0, r0, r3
    5cac:	4152      	adcs	r2, r2
    5cae:	d2cd      	bcs.n	5c4c <__divsi3+0x40>
    5cb0:	09c3      	lsrs	r3, r0, #7
    5cb2:	428b      	cmp	r3, r1
    5cb4:	d301      	bcc.n	5cba <__divsi3+0xae>
    5cb6:	01cb      	lsls	r3, r1, #7
    5cb8:	1ac0      	subs	r0, r0, r3
    5cba:	4152      	adcs	r2, r2
    5cbc:	0983      	lsrs	r3, r0, #6
    5cbe:	428b      	cmp	r3, r1
    5cc0:	d301      	bcc.n	5cc6 <__divsi3+0xba>
    5cc2:	018b      	lsls	r3, r1, #6
    5cc4:	1ac0      	subs	r0, r0, r3
    5cc6:	4152      	adcs	r2, r2
    5cc8:	0943      	lsrs	r3, r0, #5
    5cca:	428b      	cmp	r3, r1
    5ccc:	d301      	bcc.n	5cd2 <__divsi3+0xc6>
    5cce:	014b      	lsls	r3, r1, #5
    5cd0:	1ac0      	subs	r0, r0, r3
    5cd2:	4152      	adcs	r2, r2
    5cd4:	0903      	lsrs	r3, r0, #4
    5cd6:	428b      	cmp	r3, r1
    5cd8:	d301      	bcc.n	5cde <__divsi3+0xd2>
    5cda:	010b      	lsls	r3, r1, #4
    5cdc:	1ac0      	subs	r0, r0, r3
    5cde:	4152      	adcs	r2, r2
    5ce0:	08c3      	lsrs	r3, r0, #3
    5ce2:	428b      	cmp	r3, r1
    5ce4:	d301      	bcc.n	5cea <__divsi3+0xde>
    5ce6:	00cb      	lsls	r3, r1, #3
    5ce8:	1ac0      	subs	r0, r0, r3
    5cea:	4152      	adcs	r2, r2
    5cec:	0883      	lsrs	r3, r0, #2
    5cee:	428b      	cmp	r3, r1
    5cf0:	d301      	bcc.n	5cf6 <__divsi3+0xea>
    5cf2:	008b      	lsls	r3, r1, #2
    5cf4:	1ac0      	subs	r0, r0, r3
    5cf6:	4152      	adcs	r2, r2
    5cf8:	0843      	lsrs	r3, r0, #1
    5cfa:	428b      	cmp	r3, r1
    5cfc:	d301      	bcc.n	5d02 <__divsi3+0xf6>
    5cfe:	004b      	lsls	r3, r1, #1
    5d00:	1ac0      	subs	r0, r0, r3
    5d02:	4152      	adcs	r2, r2
    5d04:	1a41      	subs	r1, r0, r1
    5d06:	d200      	bcs.n	5d0a <__divsi3+0xfe>
    5d08:	4601      	mov	r1, r0
    5d0a:	4152      	adcs	r2, r2
    5d0c:	4610      	mov	r0, r2
    5d0e:	4770      	bx	lr
    5d10:	e05d      	b.n	5dce <__divsi3+0x1c2>
    5d12:	0fca      	lsrs	r2, r1, #31
    5d14:	d000      	beq.n	5d18 <__divsi3+0x10c>
    5d16:	4249      	negs	r1, r1
    5d18:	1003      	asrs	r3, r0, #32
    5d1a:	d300      	bcc.n	5d1e <__divsi3+0x112>
    5d1c:	4240      	negs	r0, r0
    5d1e:	4053      	eors	r3, r2
    5d20:	2200      	movs	r2, #0
    5d22:	469c      	mov	ip, r3
    5d24:	0903      	lsrs	r3, r0, #4
    5d26:	428b      	cmp	r3, r1
    5d28:	d32d      	bcc.n	5d86 <__divsi3+0x17a>
    5d2a:	0a03      	lsrs	r3, r0, #8
    5d2c:	428b      	cmp	r3, r1
    5d2e:	d312      	bcc.n	5d56 <__divsi3+0x14a>
    5d30:	22fc      	movs	r2, #252	; 0xfc
    5d32:	0189      	lsls	r1, r1, #6
    5d34:	ba12      	rev	r2, r2
    5d36:	0a03      	lsrs	r3, r0, #8
    5d38:	428b      	cmp	r3, r1
    5d3a:	d30c      	bcc.n	5d56 <__divsi3+0x14a>
    5d3c:	0189      	lsls	r1, r1, #6
    5d3e:	1192      	asrs	r2, r2, #6
    5d40:	428b      	cmp	r3, r1
    5d42:	d308      	bcc.n	5d56 <__divsi3+0x14a>
    5d44:	0189      	lsls	r1, r1, #6
    5d46:	1192      	asrs	r2, r2, #6
    5d48:	428b      	cmp	r3, r1
    5d4a:	d304      	bcc.n	5d56 <__divsi3+0x14a>
    5d4c:	0189      	lsls	r1, r1, #6
    5d4e:	d03a      	beq.n	5dc6 <__divsi3+0x1ba>
    5d50:	1192      	asrs	r2, r2, #6
    5d52:	e000      	b.n	5d56 <__divsi3+0x14a>
    5d54:	0989      	lsrs	r1, r1, #6
    5d56:	09c3      	lsrs	r3, r0, #7
    5d58:	428b      	cmp	r3, r1
    5d5a:	d301      	bcc.n	5d60 <__divsi3+0x154>
    5d5c:	01cb      	lsls	r3, r1, #7
    5d5e:	1ac0      	subs	r0, r0, r3
    5d60:	4152      	adcs	r2, r2
    5d62:	0983      	lsrs	r3, r0, #6
    5d64:	428b      	cmp	r3, r1
    5d66:	d301      	bcc.n	5d6c <__divsi3+0x160>
    5d68:	018b      	lsls	r3, r1, #6
    5d6a:	1ac0      	subs	r0, r0, r3
    5d6c:	4152      	adcs	r2, r2
    5d6e:	0943      	lsrs	r3, r0, #5
    5d70:	428b      	cmp	r3, r1
    5d72:	d301      	bcc.n	5d78 <__divsi3+0x16c>
    5d74:	014b      	lsls	r3, r1, #5
    5d76:	1ac0      	subs	r0, r0, r3
    5d78:	4152      	adcs	r2, r2
    5d7a:	0903      	lsrs	r3, r0, #4
    5d7c:	428b      	cmp	r3, r1
    5d7e:	d301      	bcc.n	5d84 <__divsi3+0x178>
    5d80:	010b      	lsls	r3, r1, #4
    5d82:	1ac0      	subs	r0, r0, r3
    5d84:	4152      	adcs	r2, r2
    5d86:	08c3      	lsrs	r3, r0, #3
    5d88:	428b      	cmp	r3, r1
    5d8a:	d301      	bcc.n	5d90 <__divsi3+0x184>
    5d8c:	00cb      	lsls	r3, r1, #3
    5d8e:	1ac0      	subs	r0, r0, r3
    5d90:	4152      	adcs	r2, r2
    5d92:	0883      	lsrs	r3, r0, #2
    5d94:	428b      	cmp	r3, r1
    5d96:	d301      	bcc.n	5d9c <__divsi3+0x190>
    5d98:	008b      	lsls	r3, r1, #2
    5d9a:	1ac0      	subs	r0, r0, r3
    5d9c:	4152      	adcs	r2, r2
    5d9e:	d2d9      	bcs.n	5d54 <__divsi3+0x148>
    5da0:	0843      	lsrs	r3, r0, #1
    5da2:	428b      	cmp	r3, r1
    5da4:	d301      	bcc.n	5daa <__divsi3+0x19e>
    5da6:	004b      	lsls	r3, r1, #1
    5da8:	1ac0      	subs	r0, r0, r3
    5daa:	4152      	adcs	r2, r2
    5dac:	1a41      	subs	r1, r0, r1
    5dae:	d200      	bcs.n	5db2 <__divsi3+0x1a6>
    5db0:	4601      	mov	r1, r0
    5db2:	4663      	mov	r3, ip
    5db4:	4152      	adcs	r2, r2
    5db6:	105b      	asrs	r3, r3, #1
    5db8:	4610      	mov	r0, r2
    5dba:	d301      	bcc.n	5dc0 <__divsi3+0x1b4>
    5dbc:	4240      	negs	r0, r0
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d500      	bpl.n	5dc4 <__divsi3+0x1b8>
    5dc2:	4249      	negs	r1, r1
    5dc4:	4770      	bx	lr
    5dc6:	4663      	mov	r3, ip
    5dc8:	105b      	asrs	r3, r3, #1
    5dca:	d300      	bcc.n	5dce <__divsi3+0x1c2>
    5dcc:	4240      	negs	r0, r0
    5dce:	b501      	push	{r0, lr}
    5dd0:	2000      	movs	r0, #0
    5dd2:	f000 f805 	bl	5de0 <__aeabi_idiv0>
    5dd6:	bd02      	pop	{r1, pc}

00005dd8 <__aeabi_idivmod>:
    5dd8:	2900      	cmp	r1, #0
    5dda:	d0f8      	beq.n	5dce <__divsi3+0x1c2>
    5ddc:	e716      	b.n	5c0c <__divsi3>
    5dde:	4770      	bx	lr

00005de0 <__aeabi_idiv0>:
    5de0:	4770      	bx	lr
    5de2:	46c0      	nop			; (mov r8, r8)

00005de4 <__aeabi_lmul>:
    5de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5de6:	46ce      	mov	lr, r9
    5de8:	4647      	mov	r7, r8
    5dea:	0415      	lsls	r5, r2, #16
    5dec:	0c2d      	lsrs	r5, r5, #16
    5dee:	002e      	movs	r6, r5
    5df0:	b580      	push	{r7, lr}
    5df2:	0407      	lsls	r7, r0, #16
    5df4:	0c14      	lsrs	r4, r2, #16
    5df6:	0c3f      	lsrs	r7, r7, #16
    5df8:	4699      	mov	r9, r3
    5dfa:	0c03      	lsrs	r3, r0, #16
    5dfc:	437e      	muls	r6, r7
    5dfe:	435d      	muls	r5, r3
    5e00:	4367      	muls	r7, r4
    5e02:	4363      	muls	r3, r4
    5e04:	197f      	adds	r7, r7, r5
    5e06:	0c34      	lsrs	r4, r6, #16
    5e08:	19e4      	adds	r4, r4, r7
    5e0a:	469c      	mov	ip, r3
    5e0c:	42a5      	cmp	r5, r4
    5e0e:	d903      	bls.n	5e18 <__aeabi_lmul+0x34>
    5e10:	2380      	movs	r3, #128	; 0x80
    5e12:	025b      	lsls	r3, r3, #9
    5e14:	4698      	mov	r8, r3
    5e16:	44c4      	add	ip, r8
    5e18:	464b      	mov	r3, r9
    5e1a:	4351      	muls	r1, r2
    5e1c:	4343      	muls	r3, r0
    5e1e:	0436      	lsls	r6, r6, #16
    5e20:	0c36      	lsrs	r6, r6, #16
    5e22:	0c25      	lsrs	r5, r4, #16
    5e24:	0424      	lsls	r4, r4, #16
    5e26:	4465      	add	r5, ip
    5e28:	19a4      	adds	r4, r4, r6
    5e2a:	1859      	adds	r1, r3, r1
    5e2c:	1949      	adds	r1, r1, r5
    5e2e:	0020      	movs	r0, r4
    5e30:	bc0c      	pop	{r2, r3}
    5e32:	4690      	mov	r8, r2
    5e34:	4699      	mov	r9, r3
    5e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005e38 <__libc_init_array>:
    5e38:	b570      	push	{r4, r5, r6, lr}
    5e3a:	2600      	movs	r6, #0
    5e3c:	4d0c      	ldr	r5, [pc, #48]	; (5e70 <__libc_init_array+0x38>)
    5e3e:	4c0d      	ldr	r4, [pc, #52]	; (5e74 <__libc_init_array+0x3c>)
    5e40:	1b64      	subs	r4, r4, r5
    5e42:	10a4      	asrs	r4, r4, #2
    5e44:	42a6      	cmp	r6, r4
    5e46:	d109      	bne.n	5e5c <__libc_init_array+0x24>
    5e48:	2600      	movs	r6, #0
    5e4a:	f001 ff7b 	bl	7d44 <_init>
    5e4e:	4d0a      	ldr	r5, [pc, #40]	; (5e78 <__libc_init_array+0x40>)
    5e50:	4c0a      	ldr	r4, [pc, #40]	; (5e7c <__libc_init_array+0x44>)
    5e52:	1b64      	subs	r4, r4, r5
    5e54:	10a4      	asrs	r4, r4, #2
    5e56:	42a6      	cmp	r6, r4
    5e58:	d105      	bne.n	5e66 <__libc_init_array+0x2e>
    5e5a:	bd70      	pop	{r4, r5, r6, pc}
    5e5c:	00b3      	lsls	r3, r6, #2
    5e5e:	58eb      	ldr	r3, [r5, r3]
    5e60:	4798      	blx	r3
    5e62:	3601      	adds	r6, #1
    5e64:	e7ee      	b.n	5e44 <__libc_init_array+0xc>
    5e66:	00b3      	lsls	r3, r6, #2
    5e68:	58eb      	ldr	r3, [r5, r3]
    5e6a:	4798      	blx	r3
    5e6c:	3601      	adds	r6, #1
    5e6e:	e7f2      	b.n	5e56 <__libc_init_array+0x1e>
    5e70:	00007d50 	.word	0x00007d50
    5e74:	00007d50 	.word	0x00007d50
    5e78:	00007d50 	.word	0x00007d50
    5e7c:	00007d54 	.word	0x00007d54

00005e80 <malloc>:
    5e80:	b510      	push	{r4, lr}
    5e82:	4b03      	ldr	r3, [pc, #12]	; (5e90 <malloc+0x10>)
    5e84:	0001      	movs	r1, r0
    5e86:	6818      	ldr	r0, [r3, #0]
    5e88:	f000 f856 	bl	5f38 <_malloc_r>
    5e8c:	bd10      	pop	{r4, pc}
    5e8e:	46c0      	nop			; (mov r8, r8)
    5e90:	2000000c 	.word	0x2000000c

00005e94 <memset>:
    5e94:	0003      	movs	r3, r0
    5e96:	1882      	adds	r2, r0, r2
    5e98:	4293      	cmp	r3, r2
    5e9a:	d100      	bne.n	5e9e <memset+0xa>
    5e9c:	4770      	bx	lr
    5e9e:	7019      	strb	r1, [r3, #0]
    5ea0:	3301      	adds	r3, #1
    5ea2:	e7f9      	b.n	5e98 <memset+0x4>

00005ea4 <_free_r>:
    5ea4:	b570      	push	{r4, r5, r6, lr}
    5ea6:	0005      	movs	r5, r0
    5ea8:	2900      	cmp	r1, #0
    5eaa:	d010      	beq.n	5ece <_free_r+0x2a>
    5eac:	1f0c      	subs	r4, r1, #4
    5eae:	6823      	ldr	r3, [r4, #0]
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	da00      	bge.n	5eb6 <_free_r+0x12>
    5eb4:	18e4      	adds	r4, r4, r3
    5eb6:	0028      	movs	r0, r5
    5eb8:	f000 fc56 	bl	6768 <__malloc_lock>
    5ebc:	4a1d      	ldr	r2, [pc, #116]	; (5f34 <_free_r+0x90>)
    5ebe:	6813      	ldr	r3, [r2, #0]
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d105      	bne.n	5ed0 <_free_r+0x2c>
    5ec4:	6063      	str	r3, [r4, #4]
    5ec6:	6014      	str	r4, [r2, #0]
    5ec8:	0028      	movs	r0, r5
    5eca:	f000 fc4e 	bl	676a <__malloc_unlock>
    5ece:	bd70      	pop	{r4, r5, r6, pc}
    5ed0:	42a3      	cmp	r3, r4
    5ed2:	d909      	bls.n	5ee8 <_free_r+0x44>
    5ed4:	6821      	ldr	r1, [r4, #0]
    5ed6:	1860      	adds	r0, r4, r1
    5ed8:	4283      	cmp	r3, r0
    5eda:	d1f3      	bne.n	5ec4 <_free_r+0x20>
    5edc:	6818      	ldr	r0, [r3, #0]
    5ede:	685b      	ldr	r3, [r3, #4]
    5ee0:	1841      	adds	r1, r0, r1
    5ee2:	6021      	str	r1, [r4, #0]
    5ee4:	e7ee      	b.n	5ec4 <_free_r+0x20>
    5ee6:	0013      	movs	r3, r2
    5ee8:	685a      	ldr	r2, [r3, #4]
    5eea:	2a00      	cmp	r2, #0
    5eec:	d001      	beq.n	5ef2 <_free_r+0x4e>
    5eee:	42a2      	cmp	r2, r4
    5ef0:	d9f9      	bls.n	5ee6 <_free_r+0x42>
    5ef2:	6819      	ldr	r1, [r3, #0]
    5ef4:	1858      	adds	r0, r3, r1
    5ef6:	42a0      	cmp	r0, r4
    5ef8:	d10b      	bne.n	5f12 <_free_r+0x6e>
    5efa:	6820      	ldr	r0, [r4, #0]
    5efc:	1809      	adds	r1, r1, r0
    5efe:	1858      	adds	r0, r3, r1
    5f00:	6019      	str	r1, [r3, #0]
    5f02:	4282      	cmp	r2, r0
    5f04:	d1e0      	bne.n	5ec8 <_free_r+0x24>
    5f06:	6810      	ldr	r0, [r2, #0]
    5f08:	6852      	ldr	r2, [r2, #4]
    5f0a:	1841      	adds	r1, r0, r1
    5f0c:	6019      	str	r1, [r3, #0]
    5f0e:	605a      	str	r2, [r3, #4]
    5f10:	e7da      	b.n	5ec8 <_free_r+0x24>
    5f12:	42a0      	cmp	r0, r4
    5f14:	d902      	bls.n	5f1c <_free_r+0x78>
    5f16:	230c      	movs	r3, #12
    5f18:	602b      	str	r3, [r5, #0]
    5f1a:	e7d5      	b.n	5ec8 <_free_r+0x24>
    5f1c:	6821      	ldr	r1, [r4, #0]
    5f1e:	1860      	adds	r0, r4, r1
    5f20:	4282      	cmp	r2, r0
    5f22:	d103      	bne.n	5f2c <_free_r+0x88>
    5f24:	6810      	ldr	r0, [r2, #0]
    5f26:	6852      	ldr	r2, [r2, #4]
    5f28:	1841      	adds	r1, r0, r1
    5f2a:	6021      	str	r1, [r4, #0]
    5f2c:	6062      	str	r2, [r4, #4]
    5f2e:	605c      	str	r4, [r3, #4]
    5f30:	e7ca      	b.n	5ec8 <_free_r+0x24>
    5f32:	46c0      	nop			; (mov r8, r8)
    5f34:	200002e8 	.word	0x200002e8

00005f38 <_malloc_r>:
    5f38:	2303      	movs	r3, #3
    5f3a:	b570      	push	{r4, r5, r6, lr}
    5f3c:	1ccd      	adds	r5, r1, #3
    5f3e:	439d      	bics	r5, r3
    5f40:	3508      	adds	r5, #8
    5f42:	0006      	movs	r6, r0
    5f44:	2d0c      	cmp	r5, #12
    5f46:	d21e      	bcs.n	5f86 <_malloc_r+0x4e>
    5f48:	250c      	movs	r5, #12
    5f4a:	42a9      	cmp	r1, r5
    5f4c:	d81d      	bhi.n	5f8a <_malloc_r+0x52>
    5f4e:	0030      	movs	r0, r6
    5f50:	f000 fc0a 	bl	6768 <__malloc_lock>
    5f54:	4a25      	ldr	r2, [pc, #148]	; (5fec <_malloc_r+0xb4>)
    5f56:	6814      	ldr	r4, [r2, #0]
    5f58:	0021      	movs	r1, r4
    5f5a:	2900      	cmp	r1, #0
    5f5c:	d119      	bne.n	5f92 <_malloc_r+0x5a>
    5f5e:	4c24      	ldr	r4, [pc, #144]	; (5ff0 <_malloc_r+0xb8>)
    5f60:	6823      	ldr	r3, [r4, #0]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d103      	bne.n	5f6e <_malloc_r+0x36>
    5f66:	0030      	movs	r0, r6
    5f68:	f000 f844 	bl	5ff4 <_sbrk_r>
    5f6c:	6020      	str	r0, [r4, #0]
    5f6e:	0029      	movs	r1, r5
    5f70:	0030      	movs	r0, r6
    5f72:	f000 f83f 	bl	5ff4 <_sbrk_r>
    5f76:	1c43      	adds	r3, r0, #1
    5f78:	d12c      	bne.n	5fd4 <_malloc_r+0x9c>
    5f7a:	230c      	movs	r3, #12
    5f7c:	0030      	movs	r0, r6
    5f7e:	6033      	str	r3, [r6, #0]
    5f80:	f000 fbf3 	bl	676a <__malloc_unlock>
    5f84:	e003      	b.n	5f8e <_malloc_r+0x56>
    5f86:	2d00      	cmp	r5, #0
    5f88:	dadf      	bge.n	5f4a <_malloc_r+0x12>
    5f8a:	230c      	movs	r3, #12
    5f8c:	6033      	str	r3, [r6, #0]
    5f8e:	2000      	movs	r0, #0
    5f90:	bd70      	pop	{r4, r5, r6, pc}
    5f92:	680b      	ldr	r3, [r1, #0]
    5f94:	1b5b      	subs	r3, r3, r5
    5f96:	d41a      	bmi.n	5fce <_malloc_r+0x96>
    5f98:	2b0b      	cmp	r3, #11
    5f9a:	d903      	bls.n	5fa4 <_malloc_r+0x6c>
    5f9c:	600b      	str	r3, [r1, #0]
    5f9e:	18cc      	adds	r4, r1, r3
    5fa0:	6025      	str	r5, [r4, #0]
    5fa2:	e003      	b.n	5fac <_malloc_r+0x74>
    5fa4:	428c      	cmp	r4, r1
    5fa6:	d10e      	bne.n	5fc6 <_malloc_r+0x8e>
    5fa8:	6863      	ldr	r3, [r4, #4]
    5faa:	6013      	str	r3, [r2, #0]
    5fac:	0030      	movs	r0, r6
    5fae:	f000 fbdc 	bl	676a <__malloc_unlock>
    5fb2:	0020      	movs	r0, r4
    5fb4:	2207      	movs	r2, #7
    5fb6:	300b      	adds	r0, #11
    5fb8:	1d23      	adds	r3, r4, #4
    5fba:	4390      	bics	r0, r2
    5fbc:	1ac3      	subs	r3, r0, r3
    5fbe:	d0e7      	beq.n	5f90 <_malloc_r+0x58>
    5fc0:	425a      	negs	r2, r3
    5fc2:	50e2      	str	r2, [r4, r3]
    5fc4:	e7e4      	b.n	5f90 <_malloc_r+0x58>
    5fc6:	684b      	ldr	r3, [r1, #4]
    5fc8:	6063      	str	r3, [r4, #4]
    5fca:	000c      	movs	r4, r1
    5fcc:	e7ee      	b.n	5fac <_malloc_r+0x74>
    5fce:	000c      	movs	r4, r1
    5fd0:	6849      	ldr	r1, [r1, #4]
    5fd2:	e7c2      	b.n	5f5a <_malloc_r+0x22>
    5fd4:	2303      	movs	r3, #3
    5fd6:	1cc4      	adds	r4, r0, #3
    5fd8:	439c      	bics	r4, r3
    5fda:	42a0      	cmp	r0, r4
    5fdc:	d0e0      	beq.n	5fa0 <_malloc_r+0x68>
    5fde:	1a21      	subs	r1, r4, r0
    5fe0:	0030      	movs	r0, r6
    5fe2:	f000 f807 	bl	5ff4 <_sbrk_r>
    5fe6:	1c43      	adds	r3, r0, #1
    5fe8:	d1da      	bne.n	5fa0 <_malloc_r+0x68>
    5fea:	e7c6      	b.n	5f7a <_malloc_r+0x42>
    5fec:	200002e8 	.word	0x200002e8
    5ff0:	200002ec 	.word	0x200002ec

00005ff4 <_sbrk_r>:
    5ff4:	2300      	movs	r3, #0
    5ff6:	b570      	push	{r4, r5, r6, lr}
    5ff8:	4c06      	ldr	r4, [pc, #24]	; (6014 <_sbrk_r+0x20>)
    5ffa:	0005      	movs	r5, r0
    5ffc:	0008      	movs	r0, r1
    5ffe:	6023      	str	r3, [r4, #0]
    6000:	f7fd fbe0 	bl	37c4 <_sbrk>
    6004:	1c43      	adds	r3, r0, #1
    6006:	d103      	bne.n	6010 <_sbrk_r+0x1c>
    6008:	6823      	ldr	r3, [r4, #0]
    600a:	2b00      	cmp	r3, #0
    600c:	d000      	beq.n	6010 <_sbrk_r+0x1c>
    600e:	602b      	str	r3, [r5, #0]
    6010:	bd70      	pop	{r4, r5, r6, pc}
    6012:	46c0      	nop			; (mov r8, r8)
    6014:	20000b68 	.word	0x20000b68

00006018 <setbuf>:
    6018:	424a      	negs	r2, r1
    601a:	414a      	adcs	r2, r1
    601c:	2380      	movs	r3, #128	; 0x80
    601e:	b510      	push	{r4, lr}
    6020:	0052      	lsls	r2, r2, #1
    6022:	00db      	lsls	r3, r3, #3
    6024:	f000 f802 	bl	602c <setvbuf>
    6028:	bd10      	pop	{r4, pc}
	...

0000602c <setvbuf>:
    602c:	b5f0      	push	{r4, r5, r6, r7, lr}
    602e:	001d      	movs	r5, r3
    6030:	4b4f      	ldr	r3, [pc, #316]	; (6170 <setvbuf+0x144>)
    6032:	b085      	sub	sp, #20
    6034:	681e      	ldr	r6, [r3, #0]
    6036:	0004      	movs	r4, r0
    6038:	000f      	movs	r7, r1
    603a:	9200      	str	r2, [sp, #0]
    603c:	2e00      	cmp	r6, #0
    603e:	d005      	beq.n	604c <setvbuf+0x20>
    6040:	69b3      	ldr	r3, [r6, #24]
    6042:	2b00      	cmp	r3, #0
    6044:	d102      	bne.n	604c <setvbuf+0x20>
    6046:	0030      	movs	r0, r6
    6048:	f000 fabc 	bl	65c4 <__sinit>
    604c:	4b49      	ldr	r3, [pc, #292]	; (6174 <setvbuf+0x148>)
    604e:	429c      	cmp	r4, r3
    6050:	d150      	bne.n	60f4 <setvbuf+0xc8>
    6052:	6874      	ldr	r4, [r6, #4]
    6054:	9b00      	ldr	r3, [sp, #0]
    6056:	2b02      	cmp	r3, #2
    6058:	d005      	beq.n	6066 <setvbuf+0x3a>
    605a:	2b01      	cmp	r3, #1
    605c:	d900      	bls.n	6060 <setvbuf+0x34>
    605e:	e084      	b.n	616a <setvbuf+0x13e>
    6060:	2d00      	cmp	r5, #0
    6062:	da00      	bge.n	6066 <setvbuf+0x3a>
    6064:	e081      	b.n	616a <setvbuf+0x13e>
    6066:	0021      	movs	r1, r4
    6068:	0030      	movs	r0, r6
    606a:	f000 fa3d 	bl	64e8 <_fflush_r>
    606e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6070:	2900      	cmp	r1, #0
    6072:	d008      	beq.n	6086 <setvbuf+0x5a>
    6074:	0023      	movs	r3, r4
    6076:	3344      	adds	r3, #68	; 0x44
    6078:	4299      	cmp	r1, r3
    607a:	d002      	beq.n	6082 <setvbuf+0x56>
    607c:	0030      	movs	r0, r6
    607e:	f7ff ff11 	bl	5ea4 <_free_r>
    6082:	2300      	movs	r3, #0
    6084:	6363      	str	r3, [r4, #52]	; 0x34
    6086:	2300      	movs	r3, #0
    6088:	61a3      	str	r3, [r4, #24]
    608a:	6063      	str	r3, [r4, #4]
    608c:	89a3      	ldrh	r3, [r4, #12]
    608e:	061b      	lsls	r3, r3, #24
    6090:	d503      	bpl.n	609a <setvbuf+0x6e>
    6092:	6921      	ldr	r1, [r4, #16]
    6094:	0030      	movs	r0, r6
    6096:	f7ff ff05 	bl	5ea4 <_free_r>
    609a:	89a3      	ldrh	r3, [r4, #12]
    609c:	4a36      	ldr	r2, [pc, #216]	; (6178 <setvbuf+0x14c>)
    609e:	4013      	ands	r3, r2
    60a0:	81a3      	strh	r3, [r4, #12]
    60a2:	9b00      	ldr	r3, [sp, #0]
    60a4:	2b02      	cmp	r3, #2
    60a6:	d05a      	beq.n	615e <setvbuf+0x132>
    60a8:	ab03      	add	r3, sp, #12
    60aa:	aa02      	add	r2, sp, #8
    60ac:	0021      	movs	r1, r4
    60ae:	0030      	movs	r0, r6
    60b0:	f000 fb20 	bl	66f4 <__swhatbuf_r>
    60b4:	89a3      	ldrh	r3, [r4, #12]
    60b6:	4318      	orrs	r0, r3
    60b8:	81a0      	strh	r0, [r4, #12]
    60ba:	2d00      	cmp	r5, #0
    60bc:	d124      	bne.n	6108 <setvbuf+0xdc>
    60be:	9d02      	ldr	r5, [sp, #8]
    60c0:	0028      	movs	r0, r5
    60c2:	f7ff fedd 	bl	5e80 <malloc>
    60c6:	9501      	str	r5, [sp, #4]
    60c8:	1e07      	subs	r7, r0, #0
    60ca:	d142      	bne.n	6152 <setvbuf+0x126>
    60cc:	9b02      	ldr	r3, [sp, #8]
    60ce:	9301      	str	r3, [sp, #4]
    60d0:	42ab      	cmp	r3, r5
    60d2:	d139      	bne.n	6148 <setvbuf+0x11c>
    60d4:	2001      	movs	r0, #1
    60d6:	4240      	negs	r0, r0
    60d8:	2302      	movs	r3, #2
    60da:	89a2      	ldrh	r2, [r4, #12]
    60dc:	4313      	orrs	r3, r2
    60de:	81a3      	strh	r3, [r4, #12]
    60e0:	2300      	movs	r3, #0
    60e2:	60a3      	str	r3, [r4, #8]
    60e4:	0023      	movs	r3, r4
    60e6:	3347      	adds	r3, #71	; 0x47
    60e8:	6023      	str	r3, [r4, #0]
    60ea:	6123      	str	r3, [r4, #16]
    60ec:	2301      	movs	r3, #1
    60ee:	6163      	str	r3, [r4, #20]
    60f0:	b005      	add	sp, #20
    60f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60f4:	4b21      	ldr	r3, [pc, #132]	; (617c <setvbuf+0x150>)
    60f6:	429c      	cmp	r4, r3
    60f8:	d101      	bne.n	60fe <setvbuf+0xd2>
    60fa:	68b4      	ldr	r4, [r6, #8]
    60fc:	e7aa      	b.n	6054 <setvbuf+0x28>
    60fe:	4b20      	ldr	r3, [pc, #128]	; (6180 <setvbuf+0x154>)
    6100:	429c      	cmp	r4, r3
    6102:	d1a7      	bne.n	6054 <setvbuf+0x28>
    6104:	68f4      	ldr	r4, [r6, #12]
    6106:	e7a5      	b.n	6054 <setvbuf+0x28>
    6108:	2f00      	cmp	r7, #0
    610a:	d0d9      	beq.n	60c0 <setvbuf+0x94>
    610c:	69b3      	ldr	r3, [r6, #24]
    610e:	2b00      	cmp	r3, #0
    6110:	d102      	bne.n	6118 <setvbuf+0xec>
    6112:	0030      	movs	r0, r6
    6114:	f000 fa56 	bl	65c4 <__sinit>
    6118:	9b00      	ldr	r3, [sp, #0]
    611a:	2b01      	cmp	r3, #1
    611c:	d103      	bne.n	6126 <setvbuf+0xfa>
    611e:	89a3      	ldrh	r3, [r4, #12]
    6120:	9a00      	ldr	r2, [sp, #0]
    6122:	431a      	orrs	r2, r3
    6124:	81a2      	strh	r2, [r4, #12]
    6126:	2008      	movs	r0, #8
    6128:	89a3      	ldrh	r3, [r4, #12]
    612a:	6027      	str	r7, [r4, #0]
    612c:	6127      	str	r7, [r4, #16]
    612e:	6165      	str	r5, [r4, #20]
    6130:	4018      	ands	r0, r3
    6132:	d018      	beq.n	6166 <setvbuf+0x13a>
    6134:	2001      	movs	r0, #1
    6136:	4018      	ands	r0, r3
    6138:	2300      	movs	r3, #0
    613a:	4298      	cmp	r0, r3
    613c:	d011      	beq.n	6162 <setvbuf+0x136>
    613e:	426d      	negs	r5, r5
    6140:	60a3      	str	r3, [r4, #8]
    6142:	61a5      	str	r5, [r4, #24]
    6144:	0018      	movs	r0, r3
    6146:	e7d3      	b.n	60f0 <setvbuf+0xc4>
    6148:	9801      	ldr	r0, [sp, #4]
    614a:	f7ff fe99 	bl	5e80 <malloc>
    614e:	1e07      	subs	r7, r0, #0
    6150:	d0c0      	beq.n	60d4 <setvbuf+0xa8>
    6152:	2380      	movs	r3, #128	; 0x80
    6154:	89a2      	ldrh	r2, [r4, #12]
    6156:	9d01      	ldr	r5, [sp, #4]
    6158:	4313      	orrs	r3, r2
    615a:	81a3      	strh	r3, [r4, #12]
    615c:	e7d6      	b.n	610c <setvbuf+0xe0>
    615e:	2000      	movs	r0, #0
    6160:	e7ba      	b.n	60d8 <setvbuf+0xac>
    6162:	60a5      	str	r5, [r4, #8]
    6164:	e7c4      	b.n	60f0 <setvbuf+0xc4>
    6166:	60a0      	str	r0, [r4, #8]
    6168:	e7c2      	b.n	60f0 <setvbuf+0xc4>
    616a:	2001      	movs	r0, #1
    616c:	4240      	negs	r0, r0
    616e:	e7bf      	b.n	60f0 <setvbuf+0xc4>
    6170:	2000000c 	.word	0x2000000c
    6174:	00007bc4 	.word	0x00007bc4
    6178:	fffff35c 	.word	0xfffff35c
    617c:	00007be4 	.word	0x00007be4
    6180:	00007ba4 	.word	0x00007ba4

00006184 <strcmp>:
    6184:	7802      	ldrb	r2, [r0, #0]
    6186:	780b      	ldrb	r3, [r1, #0]
    6188:	2a00      	cmp	r2, #0
    618a:	d003      	beq.n	6194 <strcmp+0x10>
    618c:	3001      	adds	r0, #1
    618e:	3101      	adds	r1, #1
    6190:	429a      	cmp	r2, r3
    6192:	d0f7      	beq.n	6184 <strcmp>
    6194:	1ad0      	subs	r0, r2, r3
    6196:	4770      	bx	lr

00006198 <strlen>:
    6198:	2300      	movs	r3, #0
    619a:	5cc2      	ldrb	r2, [r0, r3]
    619c:	3301      	adds	r3, #1
    619e:	2a00      	cmp	r2, #0
    61a0:	d1fb      	bne.n	619a <strlen+0x2>
    61a2:	1e58      	subs	r0, r3, #1
    61a4:	4770      	bx	lr
	...

000061a8 <strtok>:
    61a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61aa:	4b12      	ldr	r3, [pc, #72]	; (61f4 <strtok+0x4c>)
    61ac:	0006      	movs	r6, r0
    61ae:	681d      	ldr	r5, [r3, #0]
    61b0:	000f      	movs	r7, r1
    61b2:	6dac      	ldr	r4, [r5, #88]	; 0x58
    61b4:	2c00      	cmp	r4, #0
    61b6:	d116      	bne.n	61e6 <strtok+0x3e>
    61b8:	2050      	movs	r0, #80	; 0x50
    61ba:	f7ff fe61 	bl	5e80 <malloc>
    61be:	65a8      	str	r0, [r5, #88]	; 0x58
    61c0:	6004      	str	r4, [r0, #0]
    61c2:	6044      	str	r4, [r0, #4]
    61c4:	6084      	str	r4, [r0, #8]
    61c6:	60c4      	str	r4, [r0, #12]
    61c8:	6104      	str	r4, [r0, #16]
    61ca:	6144      	str	r4, [r0, #20]
    61cc:	6184      	str	r4, [r0, #24]
    61ce:	6284      	str	r4, [r0, #40]	; 0x28
    61d0:	62c4      	str	r4, [r0, #44]	; 0x2c
    61d2:	6304      	str	r4, [r0, #48]	; 0x30
    61d4:	6344      	str	r4, [r0, #52]	; 0x34
    61d6:	6384      	str	r4, [r0, #56]	; 0x38
    61d8:	63c4      	str	r4, [r0, #60]	; 0x3c
    61da:	6404      	str	r4, [r0, #64]	; 0x40
    61dc:	6444      	str	r4, [r0, #68]	; 0x44
    61de:	6484      	str	r4, [r0, #72]	; 0x48
    61e0:	64c4      	str	r4, [r0, #76]	; 0x4c
    61e2:	7704      	strb	r4, [r0, #28]
    61e4:	6244      	str	r4, [r0, #36]	; 0x24
    61e6:	6daa      	ldr	r2, [r5, #88]	; 0x58
    61e8:	0039      	movs	r1, r7
    61ea:	0030      	movs	r0, r6
    61ec:	2301      	movs	r3, #1
    61ee:	f000 f803 	bl	61f8 <__strtok_r>
    61f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61f4:	2000000c 	.word	0x2000000c

000061f8 <__strtok_r>:
    61f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61fa:	2800      	cmp	r0, #0
    61fc:	d104      	bne.n	6208 <__strtok_r+0x10>
    61fe:	6810      	ldr	r0, [r2, #0]
    6200:	2800      	cmp	r0, #0
    6202:	d101      	bne.n	6208 <__strtok_r+0x10>
    6204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6206:	0020      	movs	r0, r4
    6208:	000e      	movs	r6, r1
    620a:	7805      	ldrb	r5, [r0, #0]
    620c:	1c44      	adds	r4, r0, #1
    620e:	7837      	ldrb	r7, [r6, #0]
    6210:	2f00      	cmp	r7, #0
    6212:	d104      	bne.n	621e <__strtok_r+0x26>
    6214:	2d00      	cmp	r5, #0
    6216:	d110      	bne.n	623a <__strtok_r+0x42>
    6218:	6015      	str	r5, [r2, #0]
    621a:	0028      	movs	r0, r5
    621c:	e7f2      	b.n	6204 <__strtok_r+0xc>
    621e:	3601      	adds	r6, #1
    6220:	42bd      	cmp	r5, r7
    6222:	d1f4      	bne.n	620e <__strtok_r+0x16>
    6224:	2b00      	cmp	r3, #0
    6226:	d1ee      	bne.n	6206 <__strtok_r+0xe>
    6228:	6014      	str	r4, [r2, #0]
    622a:	7003      	strb	r3, [r0, #0]
    622c:	e7ea      	b.n	6204 <__strtok_r+0xc>
    622e:	0033      	movs	r3, r6
    6230:	e00e      	b.n	6250 <__strtok_r+0x58>
    6232:	3501      	adds	r5, #1
    6234:	001c      	movs	r4, r3
    6236:	2f00      	cmp	r7, #0
    6238:	d102      	bne.n	6240 <__strtok_r+0x48>
    623a:	000d      	movs	r5, r1
    623c:	7826      	ldrb	r6, [r4, #0]
    623e:	1c63      	adds	r3, r4, #1
    6240:	782f      	ldrb	r7, [r5, #0]
    6242:	42be      	cmp	r6, r7
    6244:	d1f5      	bne.n	6232 <__strtok_r+0x3a>
    6246:	2e00      	cmp	r6, #0
    6248:	d0f1      	beq.n	622e <__strtok_r+0x36>
    624a:	2400      	movs	r4, #0
    624c:	1e59      	subs	r1, r3, #1
    624e:	700c      	strb	r4, [r1, #0]
    6250:	6013      	str	r3, [r2, #0]
    6252:	e7d7      	b.n	6204 <__strtok_r+0xc>

00006254 <_strtoul_l.isra.0>:
    6254:	b5f0      	push	{r4, r5, r6, r7, lr}
    6256:	001f      	movs	r7, r3
    6258:	000e      	movs	r6, r1
    625a:	b087      	sub	sp, #28
    625c:	9005      	str	r0, [sp, #20]
    625e:	9103      	str	r1, [sp, #12]
    6260:	9201      	str	r2, [sp, #4]
    6262:	980c      	ldr	r0, [sp, #48]	; 0x30
    6264:	7834      	ldrb	r4, [r6, #0]
    6266:	f000 fa42 	bl	66ee <__locale_ctype_ptr_l>
    626a:	2208      	movs	r2, #8
    626c:	1900      	adds	r0, r0, r4
    626e:	7843      	ldrb	r3, [r0, #1]
    6270:	1c75      	adds	r5, r6, #1
    6272:	4013      	ands	r3, r2
    6274:	d10c      	bne.n	6290 <_strtoul_l.isra.0+0x3c>
    6276:	2c2d      	cmp	r4, #45	; 0x2d
    6278:	d10c      	bne.n	6294 <_strtoul_l.isra.0+0x40>
    627a:	3301      	adds	r3, #1
    627c:	782c      	ldrb	r4, [r5, #0]
    627e:	9302      	str	r3, [sp, #8]
    6280:	1cb5      	adds	r5, r6, #2
    6282:	2f00      	cmp	r7, #0
    6284:	d00c      	beq.n	62a0 <_strtoul_l.isra.0+0x4c>
    6286:	2f10      	cmp	r7, #16
    6288:	d114      	bne.n	62b4 <_strtoul_l.isra.0+0x60>
    628a:	2c30      	cmp	r4, #48	; 0x30
    628c:	d00a      	beq.n	62a4 <_strtoul_l.isra.0+0x50>
    628e:	e011      	b.n	62b4 <_strtoul_l.isra.0+0x60>
    6290:	002e      	movs	r6, r5
    6292:	e7e6      	b.n	6262 <_strtoul_l.isra.0+0xe>
    6294:	9302      	str	r3, [sp, #8]
    6296:	2c2b      	cmp	r4, #43	; 0x2b
    6298:	d1f3      	bne.n	6282 <_strtoul_l.isra.0+0x2e>
    629a:	782c      	ldrb	r4, [r5, #0]
    629c:	1cb5      	adds	r5, r6, #2
    629e:	e7f0      	b.n	6282 <_strtoul_l.isra.0+0x2e>
    62a0:	2c30      	cmp	r4, #48	; 0x30
    62a2:	d12f      	bne.n	6304 <_strtoul_l.isra.0+0xb0>
    62a4:	2220      	movs	r2, #32
    62a6:	782b      	ldrb	r3, [r5, #0]
    62a8:	4393      	bics	r3, r2
    62aa:	2b58      	cmp	r3, #88	; 0x58
    62ac:	d154      	bne.n	6358 <_strtoul_l.isra.0+0x104>
    62ae:	2710      	movs	r7, #16
    62b0:	786c      	ldrb	r4, [r5, #1]
    62b2:	3502      	adds	r5, #2
    62b4:	2001      	movs	r0, #1
    62b6:	0039      	movs	r1, r7
    62b8:	4240      	negs	r0, r0
    62ba:	f7ff fc1d 	bl	5af8 <__udivsi3>
    62be:	0006      	movs	r6, r0
    62c0:	2001      	movs	r0, #1
    62c2:	0039      	movs	r1, r7
    62c4:	4240      	negs	r0, r0
    62c6:	f7ff fc9d 	bl	5c04 <__aeabi_uidivmod>
    62ca:	2300      	movs	r3, #0
    62cc:	9104      	str	r1, [sp, #16]
    62ce:	2101      	movs	r1, #1
    62d0:	2201      	movs	r2, #1
    62d2:	0018      	movs	r0, r3
    62d4:	468c      	mov	ip, r1
    62d6:	4252      	negs	r2, r2
    62d8:	0021      	movs	r1, r4
    62da:	3930      	subs	r1, #48	; 0x30
    62dc:	2909      	cmp	r1, #9
    62de:	d813      	bhi.n	6308 <_strtoul_l.isra.0+0xb4>
    62e0:	000c      	movs	r4, r1
    62e2:	42a7      	cmp	r7, r4
    62e4:	dd1e      	ble.n	6324 <_strtoul_l.isra.0+0xd0>
    62e6:	2b00      	cmp	r3, #0
    62e8:	db1a      	blt.n	6320 <_strtoul_l.isra.0+0xcc>
    62ea:	0013      	movs	r3, r2
    62ec:	4286      	cmp	r6, r0
    62ee:	d306      	bcc.n	62fe <_strtoul_l.isra.0+0xaa>
    62f0:	d102      	bne.n	62f8 <_strtoul_l.isra.0+0xa4>
    62f2:	9904      	ldr	r1, [sp, #16]
    62f4:	42a1      	cmp	r1, r4
    62f6:	db02      	blt.n	62fe <_strtoul_l.isra.0+0xaa>
    62f8:	4663      	mov	r3, ip
    62fa:	4378      	muls	r0, r7
    62fc:	1820      	adds	r0, r4, r0
    62fe:	782c      	ldrb	r4, [r5, #0]
    6300:	3501      	adds	r5, #1
    6302:	e7e9      	b.n	62d8 <_strtoul_l.isra.0+0x84>
    6304:	270a      	movs	r7, #10
    6306:	e7d5      	b.n	62b4 <_strtoul_l.isra.0+0x60>
    6308:	0021      	movs	r1, r4
    630a:	3941      	subs	r1, #65	; 0x41
    630c:	2919      	cmp	r1, #25
    630e:	d801      	bhi.n	6314 <_strtoul_l.isra.0+0xc0>
    6310:	3c37      	subs	r4, #55	; 0x37
    6312:	e7e6      	b.n	62e2 <_strtoul_l.isra.0+0x8e>
    6314:	0021      	movs	r1, r4
    6316:	3961      	subs	r1, #97	; 0x61
    6318:	2919      	cmp	r1, #25
    631a:	d803      	bhi.n	6324 <_strtoul_l.isra.0+0xd0>
    631c:	3c57      	subs	r4, #87	; 0x57
    631e:	e7e0      	b.n	62e2 <_strtoul_l.isra.0+0x8e>
    6320:	0013      	movs	r3, r2
    6322:	e7ec      	b.n	62fe <_strtoul_l.isra.0+0xaa>
    6324:	2b00      	cmp	r3, #0
    6326:	da09      	bge.n	633c <_strtoul_l.isra.0+0xe8>
    6328:	2322      	movs	r3, #34	; 0x22
    632a:	2001      	movs	r0, #1
    632c:	9a05      	ldr	r2, [sp, #20]
    632e:	4240      	negs	r0, r0
    6330:	6013      	str	r3, [r2, #0]
    6332:	9b01      	ldr	r3, [sp, #4]
    6334:	2b00      	cmp	r3, #0
    6336:	d10b      	bne.n	6350 <_strtoul_l.isra.0+0xfc>
    6338:	b007      	add	sp, #28
    633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    633c:	9a02      	ldr	r2, [sp, #8]
    633e:	2a00      	cmp	r2, #0
    6340:	d000      	beq.n	6344 <_strtoul_l.isra.0+0xf0>
    6342:	4240      	negs	r0, r0
    6344:	9a01      	ldr	r2, [sp, #4]
    6346:	2a00      	cmp	r2, #0
    6348:	d0f6      	beq.n	6338 <_strtoul_l.isra.0+0xe4>
    634a:	9a03      	ldr	r2, [sp, #12]
    634c:	2b00      	cmp	r3, #0
    634e:	d000      	beq.n	6352 <_strtoul_l.isra.0+0xfe>
    6350:	1e6a      	subs	r2, r5, #1
    6352:	9b01      	ldr	r3, [sp, #4]
    6354:	601a      	str	r2, [r3, #0]
    6356:	e7ef      	b.n	6338 <_strtoul_l.isra.0+0xe4>
    6358:	2430      	movs	r4, #48	; 0x30
    635a:	2f00      	cmp	r7, #0
    635c:	d1aa      	bne.n	62b4 <_strtoul_l.isra.0+0x60>
    635e:	3708      	adds	r7, #8
    6360:	e7a8      	b.n	62b4 <_strtoul_l.isra.0+0x60>
	...

00006364 <strtoul>:
    6364:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6366:	0013      	movs	r3, r2
    6368:	4a06      	ldr	r2, [pc, #24]	; (6384 <strtoul+0x20>)
    636a:	0005      	movs	r5, r0
    636c:	6810      	ldr	r0, [r2, #0]
    636e:	6a04      	ldr	r4, [r0, #32]
    6370:	2c00      	cmp	r4, #0
    6372:	d100      	bne.n	6376 <strtoul+0x12>
    6374:	4c04      	ldr	r4, [pc, #16]	; (6388 <strtoul+0x24>)
    6376:	000a      	movs	r2, r1
    6378:	9400      	str	r4, [sp, #0]
    637a:	0029      	movs	r1, r5
    637c:	f7ff ff6a 	bl	6254 <_strtoul_l.isra.0>
    6380:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	2000000c 	.word	0x2000000c
    6388:	20000070 	.word	0x20000070

0000638c <_vsiprintf_r>:
    638c:	b530      	push	{r4, r5, lr}
    638e:	b09b      	sub	sp, #108	; 0x6c
    6390:	9100      	str	r1, [sp, #0]
    6392:	9104      	str	r1, [sp, #16]
    6394:	4908      	ldr	r1, [pc, #32]	; (63b8 <_vsiprintf_r+0x2c>)
    6396:	466d      	mov	r5, sp
    6398:	9102      	str	r1, [sp, #8]
    639a:	9105      	str	r1, [sp, #20]
    639c:	2101      	movs	r1, #1
    639e:	2482      	movs	r4, #130	; 0x82
    63a0:	4249      	negs	r1, r1
    63a2:	81e9      	strh	r1, [r5, #14]
    63a4:	00a4      	lsls	r4, r4, #2
    63a6:	4669      	mov	r1, sp
    63a8:	81ac      	strh	r4, [r5, #12]
    63aa:	f000 fa41 	bl	6830 <_svfiprintf_r>
    63ae:	2300      	movs	r3, #0
    63b0:	9a00      	ldr	r2, [sp, #0]
    63b2:	7013      	strb	r3, [r2, #0]
    63b4:	b01b      	add	sp, #108	; 0x6c
    63b6:	bd30      	pop	{r4, r5, pc}
    63b8:	7fffffff 	.word	0x7fffffff

000063bc <vsiprintf>:
    63bc:	b510      	push	{r4, lr}
    63be:	0013      	movs	r3, r2
    63c0:	000a      	movs	r2, r1
    63c2:	0001      	movs	r1, r0
    63c4:	4802      	ldr	r0, [pc, #8]	; (63d0 <vsiprintf+0x14>)
    63c6:	6800      	ldr	r0, [r0, #0]
    63c8:	f7ff ffe0 	bl	638c <_vsiprintf_r>
    63cc:	bd10      	pop	{r4, pc}
    63ce:	46c0      	nop			; (mov r8, r8)
    63d0:	2000000c 	.word	0x2000000c

000063d4 <__sflush_r>:
    63d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    63d6:	898a      	ldrh	r2, [r1, #12]
    63d8:	0005      	movs	r5, r0
    63da:	000c      	movs	r4, r1
    63dc:	0713      	lsls	r3, r2, #28
    63de:	d460      	bmi.n	64a2 <__sflush_r+0xce>
    63e0:	684b      	ldr	r3, [r1, #4]
    63e2:	2b00      	cmp	r3, #0
    63e4:	dc04      	bgt.n	63f0 <__sflush_r+0x1c>
    63e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    63e8:	2b00      	cmp	r3, #0
    63ea:	dc01      	bgt.n	63f0 <__sflush_r+0x1c>
    63ec:	2000      	movs	r0, #0
    63ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    63f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    63f2:	2f00      	cmp	r7, #0
    63f4:	d0fa      	beq.n	63ec <__sflush_r+0x18>
    63f6:	2300      	movs	r3, #0
    63f8:	682e      	ldr	r6, [r5, #0]
    63fa:	602b      	str	r3, [r5, #0]
    63fc:	2380      	movs	r3, #128	; 0x80
    63fe:	015b      	lsls	r3, r3, #5
    6400:	401a      	ands	r2, r3
    6402:	d034      	beq.n	646e <__sflush_r+0x9a>
    6404:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6406:	89a3      	ldrh	r3, [r4, #12]
    6408:	075b      	lsls	r3, r3, #29
    640a:	d506      	bpl.n	641a <__sflush_r+0x46>
    640c:	6863      	ldr	r3, [r4, #4]
    640e:	1ac0      	subs	r0, r0, r3
    6410:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6412:	2b00      	cmp	r3, #0
    6414:	d001      	beq.n	641a <__sflush_r+0x46>
    6416:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6418:	1ac0      	subs	r0, r0, r3
    641a:	0002      	movs	r2, r0
    641c:	6a21      	ldr	r1, [r4, #32]
    641e:	2300      	movs	r3, #0
    6420:	0028      	movs	r0, r5
    6422:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6424:	47b8      	blx	r7
    6426:	89a1      	ldrh	r1, [r4, #12]
    6428:	1c43      	adds	r3, r0, #1
    642a:	d106      	bne.n	643a <__sflush_r+0x66>
    642c:	682b      	ldr	r3, [r5, #0]
    642e:	2b1d      	cmp	r3, #29
    6430:	d831      	bhi.n	6496 <__sflush_r+0xc2>
    6432:	4a2c      	ldr	r2, [pc, #176]	; (64e4 <__sflush_r+0x110>)
    6434:	40da      	lsrs	r2, r3
    6436:	07d3      	lsls	r3, r2, #31
    6438:	d52d      	bpl.n	6496 <__sflush_r+0xc2>
    643a:	2300      	movs	r3, #0
    643c:	6063      	str	r3, [r4, #4]
    643e:	6923      	ldr	r3, [r4, #16]
    6440:	6023      	str	r3, [r4, #0]
    6442:	04cb      	lsls	r3, r1, #19
    6444:	d505      	bpl.n	6452 <__sflush_r+0x7e>
    6446:	1c43      	adds	r3, r0, #1
    6448:	d102      	bne.n	6450 <__sflush_r+0x7c>
    644a:	682b      	ldr	r3, [r5, #0]
    644c:	2b00      	cmp	r3, #0
    644e:	d100      	bne.n	6452 <__sflush_r+0x7e>
    6450:	6560      	str	r0, [r4, #84]	; 0x54
    6452:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6454:	602e      	str	r6, [r5, #0]
    6456:	2900      	cmp	r1, #0
    6458:	d0c8      	beq.n	63ec <__sflush_r+0x18>
    645a:	0023      	movs	r3, r4
    645c:	3344      	adds	r3, #68	; 0x44
    645e:	4299      	cmp	r1, r3
    6460:	d002      	beq.n	6468 <__sflush_r+0x94>
    6462:	0028      	movs	r0, r5
    6464:	f7ff fd1e 	bl	5ea4 <_free_r>
    6468:	2000      	movs	r0, #0
    646a:	6360      	str	r0, [r4, #52]	; 0x34
    646c:	e7bf      	b.n	63ee <__sflush_r+0x1a>
    646e:	2301      	movs	r3, #1
    6470:	6a21      	ldr	r1, [r4, #32]
    6472:	0028      	movs	r0, r5
    6474:	47b8      	blx	r7
    6476:	1c43      	adds	r3, r0, #1
    6478:	d1c5      	bne.n	6406 <__sflush_r+0x32>
    647a:	682b      	ldr	r3, [r5, #0]
    647c:	2b00      	cmp	r3, #0
    647e:	d0c2      	beq.n	6406 <__sflush_r+0x32>
    6480:	2b1d      	cmp	r3, #29
    6482:	d001      	beq.n	6488 <__sflush_r+0xb4>
    6484:	2b16      	cmp	r3, #22
    6486:	d101      	bne.n	648c <__sflush_r+0xb8>
    6488:	602e      	str	r6, [r5, #0]
    648a:	e7af      	b.n	63ec <__sflush_r+0x18>
    648c:	2340      	movs	r3, #64	; 0x40
    648e:	89a2      	ldrh	r2, [r4, #12]
    6490:	4313      	orrs	r3, r2
    6492:	81a3      	strh	r3, [r4, #12]
    6494:	e7ab      	b.n	63ee <__sflush_r+0x1a>
    6496:	2340      	movs	r3, #64	; 0x40
    6498:	430b      	orrs	r3, r1
    649a:	2001      	movs	r0, #1
    649c:	81a3      	strh	r3, [r4, #12]
    649e:	4240      	negs	r0, r0
    64a0:	e7a5      	b.n	63ee <__sflush_r+0x1a>
    64a2:	690f      	ldr	r7, [r1, #16]
    64a4:	2f00      	cmp	r7, #0
    64a6:	d0a1      	beq.n	63ec <__sflush_r+0x18>
    64a8:	680b      	ldr	r3, [r1, #0]
    64aa:	600f      	str	r7, [r1, #0]
    64ac:	1bdb      	subs	r3, r3, r7
    64ae:	9301      	str	r3, [sp, #4]
    64b0:	2300      	movs	r3, #0
    64b2:	0792      	lsls	r2, r2, #30
    64b4:	d100      	bne.n	64b8 <__sflush_r+0xe4>
    64b6:	694b      	ldr	r3, [r1, #20]
    64b8:	60a3      	str	r3, [r4, #8]
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	2b00      	cmp	r3, #0
    64be:	dc00      	bgt.n	64c2 <__sflush_r+0xee>
    64c0:	e794      	b.n	63ec <__sflush_r+0x18>
    64c2:	9b01      	ldr	r3, [sp, #4]
    64c4:	003a      	movs	r2, r7
    64c6:	6a21      	ldr	r1, [r4, #32]
    64c8:	0028      	movs	r0, r5
    64ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    64cc:	47b0      	blx	r6
    64ce:	2800      	cmp	r0, #0
    64d0:	dc03      	bgt.n	64da <__sflush_r+0x106>
    64d2:	2340      	movs	r3, #64	; 0x40
    64d4:	89a2      	ldrh	r2, [r4, #12]
    64d6:	4313      	orrs	r3, r2
    64d8:	e7df      	b.n	649a <__sflush_r+0xc6>
    64da:	9b01      	ldr	r3, [sp, #4]
    64dc:	183f      	adds	r7, r7, r0
    64de:	1a1b      	subs	r3, r3, r0
    64e0:	9301      	str	r3, [sp, #4]
    64e2:	e7ea      	b.n	64ba <__sflush_r+0xe6>
    64e4:	20400001 	.word	0x20400001

000064e8 <_fflush_r>:
    64e8:	690b      	ldr	r3, [r1, #16]
    64ea:	b570      	push	{r4, r5, r6, lr}
    64ec:	0005      	movs	r5, r0
    64ee:	000c      	movs	r4, r1
    64f0:	2b00      	cmp	r3, #0
    64f2:	d101      	bne.n	64f8 <_fflush_r+0x10>
    64f4:	2000      	movs	r0, #0
    64f6:	bd70      	pop	{r4, r5, r6, pc}
    64f8:	2800      	cmp	r0, #0
    64fa:	d004      	beq.n	6506 <_fflush_r+0x1e>
    64fc:	6983      	ldr	r3, [r0, #24]
    64fe:	2b00      	cmp	r3, #0
    6500:	d101      	bne.n	6506 <_fflush_r+0x1e>
    6502:	f000 f85f 	bl	65c4 <__sinit>
    6506:	4b0b      	ldr	r3, [pc, #44]	; (6534 <_fflush_r+0x4c>)
    6508:	429c      	cmp	r4, r3
    650a:	d109      	bne.n	6520 <_fflush_r+0x38>
    650c:	686c      	ldr	r4, [r5, #4]
    650e:	220c      	movs	r2, #12
    6510:	5ea3      	ldrsh	r3, [r4, r2]
    6512:	2b00      	cmp	r3, #0
    6514:	d0ee      	beq.n	64f4 <_fflush_r+0xc>
    6516:	0021      	movs	r1, r4
    6518:	0028      	movs	r0, r5
    651a:	f7ff ff5b 	bl	63d4 <__sflush_r>
    651e:	e7ea      	b.n	64f6 <_fflush_r+0xe>
    6520:	4b05      	ldr	r3, [pc, #20]	; (6538 <_fflush_r+0x50>)
    6522:	429c      	cmp	r4, r3
    6524:	d101      	bne.n	652a <_fflush_r+0x42>
    6526:	68ac      	ldr	r4, [r5, #8]
    6528:	e7f1      	b.n	650e <_fflush_r+0x26>
    652a:	4b04      	ldr	r3, [pc, #16]	; (653c <_fflush_r+0x54>)
    652c:	429c      	cmp	r4, r3
    652e:	d1ee      	bne.n	650e <_fflush_r+0x26>
    6530:	68ec      	ldr	r4, [r5, #12]
    6532:	e7ec      	b.n	650e <_fflush_r+0x26>
    6534:	00007bc4 	.word	0x00007bc4
    6538:	00007be4 	.word	0x00007be4
    653c:	00007ba4 	.word	0x00007ba4

00006540 <_cleanup_r>:
    6540:	b510      	push	{r4, lr}
    6542:	4902      	ldr	r1, [pc, #8]	; (654c <_cleanup_r+0xc>)
    6544:	f000 f8b2 	bl	66ac <_fwalk_reent>
    6548:	bd10      	pop	{r4, pc}
    654a:	46c0      	nop			; (mov r8, r8)
    654c:	000064e9 	.word	0x000064e9

00006550 <std.isra.0>:
    6550:	2300      	movs	r3, #0
    6552:	b510      	push	{r4, lr}
    6554:	0004      	movs	r4, r0
    6556:	6003      	str	r3, [r0, #0]
    6558:	6043      	str	r3, [r0, #4]
    655a:	6083      	str	r3, [r0, #8]
    655c:	8181      	strh	r1, [r0, #12]
    655e:	6643      	str	r3, [r0, #100]	; 0x64
    6560:	81c2      	strh	r2, [r0, #14]
    6562:	6103      	str	r3, [r0, #16]
    6564:	6143      	str	r3, [r0, #20]
    6566:	6183      	str	r3, [r0, #24]
    6568:	0019      	movs	r1, r3
    656a:	2208      	movs	r2, #8
    656c:	305c      	adds	r0, #92	; 0x5c
    656e:	f7ff fc91 	bl	5e94 <memset>
    6572:	4b05      	ldr	r3, [pc, #20]	; (6588 <std.isra.0+0x38>)
    6574:	6224      	str	r4, [r4, #32]
    6576:	6263      	str	r3, [r4, #36]	; 0x24
    6578:	4b04      	ldr	r3, [pc, #16]	; (658c <std.isra.0+0x3c>)
    657a:	62a3      	str	r3, [r4, #40]	; 0x28
    657c:	4b04      	ldr	r3, [pc, #16]	; (6590 <std.isra.0+0x40>)
    657e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6580:	4b04      	ldr	r3, [pc, #16]	; (6594 <std.isra.0+0x44>)
    6582:	6323      	str	r3, [r4, #48]	; 0x30
    6584:	bd10      	pop	{r4, pc}
    6586:	46c0      	nop			; (mov r8, r8)
    6588:	00006d49 	.word	0x00006d49
    658c:	00006d71 	.word	0x00006d71
    6590:	00006da9 	.word	0x00006da9
    6594:	00006dd5 	.word	0x00006dd5

00006598 <__sfmoreglue>:
    6598:	b570      	push	{r4, r5, r6, lr}
    659a:	2568      	movs	r5, #104	; 0x68
    659c:	1e4a      	subs	r2, r1, #1
    659e:	4355      	muls	r5, r2
    65a0:	000e      	movs	r6, r1
    65a2:	0029      	movs	r1, r5
    65a4:	3174      	adds	r1, #116	; 0x74
    65a6:	f7ff fcc7 	bl	5f38 <_malloc_r>
    65aa:	1e04      	subs	r4, r0, #0
    65ac:	d008      	beq.n	65c0 <__sfmoreglue+0x28>
    65ae:	2100      	movs	r1, #0
    65b0:	002a      	movs	r2, r5
    65b2:	6001      	str	r1, [r0, #0]
    65b4:	6046      	str	r6, [r0, #4]
    65b6:	300c      	adds	r0, #12
    65b8:	60a0      	str	r0, [r4, #8]
    65ba:	3268      	adds	r2, #104	; 0x68
    65bc:	f7ff fc6a 	bl	5e94 <memset>
    65c0:	0020      	movs	r0, r4
    65c2:	bd70      	pop	{r4, r5, r6, pc}

000065c4 <__sinit>:
    65c4:	6983      	ldr	r3, [r0, #24]
    65c6:	b513      	push	{r0, r1, r4, lr}
    65c8:	0004      	movs	r4, r0
    65ca:	2b00      	cmp	r3, #0
    65cc:	d128      	bne.n	6620 <__sinit+0x5c>
    65ce:	6483      	str	r3, [r0, #72]	; 0x48
    65d0:	64c3      	str	r3, [r0, #76]	; 0x4c
    65d2:	6503      	str	r3, [r0, #80]	; 0x50
    65d4:	4b13      	ldr	r3, [pc, #76]	; (6624 <__sinit+0x60>)
    65d6:	4a14      	ldr	r2, [pc, #80]	; (6628 <__sinit+0x64>)
    65d8:	681b      	ldr	r3, [r3, #0]
    65da:	6282      	str	r2, [r0, #40]	; 0x28
    65dc:	9301      	str	r3, [sp, #4]
    65de:	4298      	cmp	r0, r3
    65e0:	d101      	bne.n	65e6 <__sinit+0x22>
    65e2:	2301      	movs	r3, #1
    65e4:	6183      	str	r3, [r0, #24]
    65e6:	0020      	movs	r0, r4
    65e8:	f000 f820 	bl	662c <__sfp>
    65ec:	6060      	str	r0, [r4, #4]
    65ee:	0020      	movs	r0, r4
    65f0:	f000 f81c 	bl	662c <__sfp>
    65f4:	60a0      	str	r0, [r4, #8]
    65f6:	0020      	movs	r0, r4
    65f8:	f000 f818 	bl	662c <__sfp>
    65fc:	2200      	movs	r2, #0
    65fe:	60e0      	str	r0, [r4, #12]
    6600:	2104      	movs	r1, #4
    6602:	6860      	ldr	r0, [r4, #4]
    6604:	f7ff ffa4 	bl	6550 <std.isra.0>
    6608:	2201      	movs	r2, #1
    660a:	2109      	movs	r1, #9
    660c:	68a0      	ldr	r0, [r4, #8]
    660e:	f7ff ff9f 	bl	6550 <std.isra.0>
    6612:	2202      	movs	r2, #2
    6614:	2112      	movs	r1, #18
    6616:	68e0      	ldr	r0, [r4, #12]
    6618:	f7ff ff9a 	bl	6550 <std.isra.0>
    661c:	2301      	movs	r3, #1
    661e:	61a3      	str	r3, [r4, #24]
    6620:	bd13      	pop	{r0, r1, r4, pc}
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	00007ba0 	.word	0x00007ba0
    6628:	00006541 	.word	0x00006541

0000662c <__sfp>:
    662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    662e:	4b1e      	ldr	r3, [pc, #120]	; (66a8 <__sfp+0x7c>)
    6630:	0007      	movs	r7, r0
    6632:	681e      	ldr	r6, [r3, #0]
    6634:	69b3      	ldr	r3, [r6, #24]
    6636:	2b00      	cmp	r3, #0
    6638:	d102      	bne.n	6640 <__sfp+0x14>
    663a:	0030      	movs	r0, r6
    663c:	f7ff ffc2 	bl	65c4 <__sinit>
    6640:	3648      	adds	r6, #72	; 0x48
    6642:	68b4      	ldr	r4, [r6, #8]
    6644:	6873      	ldr	r3, [r6, #4]
    6646:	3b01      	subs	r3, #1
    6648:	d504      	bpl.n	6654 <__sfp+0x28>
    664a:	6833      	ldr	r3, [r6, #0]
    664c:	2b00      	cmp	r3, #0
    664e:	d007      	beq.n	6660 <__sfp+0x34>
    6650:	6836      	ldr	r6, [r6, #0]
    6652:	e7f6      	b.n	6642 <__sfp+0x16>
    6654:	220c      	movs	r2, #12
    6656:	5ea5      	ldrsh	r5, [r4, r2]
    6658:	2d00      	cmp	r5, #0
    665a:	d00d      	beq.n	6678 <__sfp+0x4c>
    665c:	3468      	adds	r4, #104	; 0x68
    665e:	e7f2      	b.n	6646 <__sfp+0x1a>
    6660:	2104      	movs	r1, #4
    6662:	0038      	movs	r0, r7
    6664:	f7ff ff98 	bl	6598 <__sfmoreglue>
    6668:	6030      	str	r0, [r6, #0]
    666a:	2800      	cmp	r0, #0
    666c:	d1f0      	bne.n	6650 <__sfp+0x24>
    666e:	230c      	movs	r3, #12
    6670:	0004      	movs	r4, r0
    6672:	603b      	str	r3, [r7, #0]
    6674:	0020      	movs	r0, r4
    6676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6678:	2301      	movs	r3, #1
    667a:	0020      	movs	r0, r4
    667c:	425b      	negs	r3, r3
    667e:	81e3      	strh	r3, [r4, #14]
    6680:	3302      	adds	r3, #2
    6682:	81a3      	strh	r3, [r4, #12]
    6684:	6665      	str	r5, [r4, #100]	; 0x64
    6686:	6025      	str	r5, [r4, #0]
    6688:	60a5      	str	r5, [r4, #8]
    668a:	6065      	str	r5, [r4, #4]
    668c:	6125      	str	r5, [r4, #16]
    668e:	6165      	str	r5, [r4, #20]
    6690:	61a5      	str	r5, [r4, #24]
    6692:	2208      	movs	r2, #8
    6694:	0029      	movs	r1, r5
    6696:	305c      	adds	r0, #92	; 0x5c
    6698:	f7ff fbfc 	bl	5e94 <memset>
    669c:	6365      	str	r5, [r4, #52]	; 0x34
    669e:	63a5      	str	r5, [r4, #56]	; 0x38
    66a0:	64a5      	str	r5, [r4, #72]	; 0x48
    66a2:	64e5      	str	r5, [r4, #76]	; 0x4c
    66a4:	e7e6      	b.n	6674 <__sfp+0x48>
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	00007ba0 	.word	0x00007ba0

000066ac <_fwalk_reent>:
    66ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    66ae:	0004      	movs	r4, r0
    66b0:	0007      	movs	r7, r0
    66b2:	2600      	movs	r6, #0
    66b4:	9101      	str	r1, [sp, #4]
    66b6:	3448      	adds	r4, #72	; 0x48
    66b8:	2c00      	cmp	r4, #0
    66ba:	d101      	bne.n	66c0 <_fwalk_reent+0x14>
    66bc:	0030      	movs	r0, r6
    66be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    66c0:	6863      	ldr	r3, [r4, #4]
    66c2:	68a5      	ldr	r5, [r4, #8]
    66c4:	9300      	str	r3, [sp, #0]
    66c6:	9b00      	ldr	r3, [sp, #0]
    66c8:	3b01      	subs	r3, #1
    66ca:	9300      	str	r3, [sp, #0]
    66cc:	d501      	bpl.n	66d2 <_fwalk_reent+0x26>
    66ce:	6824      	ldr	r4, [r4, #0]
    66d0:	e7f2      	b.n	66b8 <_fwalk_reent+0xc>
    66d2:	89ab      	ldrh	r3, [r5, #12]
    66d4:	2b01      	cmp	r3, #1
    66d6:	d908      	bls.n	66ea <_fwalk_reent+0x3e>
    66d8:	220e      	movs	r2, #14
    66da:	5eab      	ldrsh	r3, [r5, r2]
    66dc:	3301      	adds	r3, #1
    66de:	d004      	beq.n	66ea <_fwalk_reent+0x3e>
    66e0:	0029      	movs	r1, r5
    66e2:	0038      	movs	r0, r7
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	4798      	blx	r3
    66e8:	4306      	orrs	r6, r0
    66ea:	3568      	adds	r5, #104	; 0x68
    66ec:	e7eb      	b.n	66c6 <_fwalk_reent+0x1a>

000066ee <__locale_ctype_ptr_l>:
    66ee:	30ec      	adds	r0, #236	; 0xec
    66f0:	6800      	ldr	r0, [r0, #0]
    66f2:	4770      	bx	lr

000066f4 <__swhatbuf_r>:
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	000e      	movs	r6, r1
    66f8:	001d      	movs	r5, r3
    66fa:	230e      	movs	r3, #14
    66fc:	5ec9      	ldrsh	r1, [r1, r3]
    66fe:	b090      	sub	sp, #64	; 0x40
    6700:	0014      	movs	r4, r2
    6702:	2900      	cmp	r1, #0
    6704:	da07      	bge.n	6716 <__swhatbuf_r+0x22>
    6706:	2300      	movs	r3, #0
    6708:	602b      	str	r3, [r5, #0]
    670a:	89b3      	ldrh	r3, [r6, #12]
    670c:	061b      	lsls	r3, r3, #24
    670e:	d411      	bmi.n	6734 <__swhatbuf_r+0x40>
    6710:	2380      	movs	r3, #128	; 0x80
    6712:	00db      	lsls	r3, r3, #3
    6714:	e00f      	b.n	6736 <__swhatbuf_r+0x42>
    6716:	aa01      	add	r2, sp, #4
    6718:	f000 fb94 	bl	6e44 <_fstat_r>
    671c:	2800      	cmp	r0, #0
    671e:	dbf2      	blt.n	6706 <__swhatbuf_r+0x12>
    6720:	22f0      	movs	r2, #240	; 0xf0
    6722:	9b02      	ldr	r3, [sp, #8]
    6724:	0212      	lsls	r2, r2, #8
    6726:	4013      	ands	r3, r2
    6728:	4a05      	ldr	r2, [pc, #20]	; (6740 <__swhatbuf_r+0x4c>)
    672a:	189b      	adds	r3, r3, r2
    672c:	425a      	negs	r2, r3
    672e:	4153      	adcs	r3, r2
    6730:	602b      	str	r3, [r5, #0]
    6732:	e7ed      	b.n	6710 <__swhatbuf_r+0x1c>
    6734:	2340      	movs	r3, #64	; 0x40
    6736:	2000      	movs	r0, #0
    6738:	6023      	str	r3, [r4, #0]
    673a:	b010      	add	sp, #64	; 0x40
    673c:	bd70      	pop	{r4, r5, r6, pc}
    673e:	46c0      	nop			; (mov r8, r8)
    6740:	ffffe000 	.word	0xffffe000

00006744 <__ascii_mbtowc>:
    6744:	b082      	sub	sp, #8
    6746:	2900      	cmp	r1, #0
    6748:	d100      	bne.n	674c <__ascii_mbtowc+0x8>
    674a:	a901      	add	r1, sp, #4
    674c:	1e10      	subs	r0, r2, #0
    674e:	d006      	beq.n	675e <__ascii_mbtowc+0x1a>
    6750:	2b00      	cmp	r3, #0
    6752:	d006      	beq.n	6762 <__ascii_mbtowc+0x1e>
    6754:	7813      	ldrb	r3, [r2, #0]
    6756:	600b      	str	r3, [r1, #0]
    6758:	7810      	ldrb	r0, [r2, #0]
    675a:	1e43      	subs	r3, r0, #1
    675c:	4198      	sbcs	r0, r3
    675e:	b002      	add	sp, #8
    6760:	4770      	bx	lr
    6762:	2002      	movs	r0, #2
    6764:	4240      	negs	r0, r0
    6766:	e7fa      	b.n	675e <__ascii_mbtowc+0x1a>

00006768 <__malloc_lock>:
    6768:	4770      	bx	lr

0000676a <__malloc_unlock>:
    676a:	4770      	bx	lr

0000676c <__ssputs_r>:
    676c:	b5f0      	push	{r4, r5, r6, r7, lr}
    676e:	688e      	ldr	r6, [r1, #8]
    6770:	b085      	sub	sp, #20
    6772:	0007      	movs	r7, r0
    6774:	000c      	movs	r4, r1
    6776:	9203      	str	r2, [sp, #12]
    6778:	9301      	str	r3, [sp, #4]
    677a:	429e      	cmp	r6, r3
    677c:	d839      	bhi.n	67f2 <__ssputs_r+0x86>
    677e:	2390      	movs	r3, #144	; 0x90
    6780:	898a      	ldrh	r2, [r1, #12]
    6782:	00db      	lsls	r3, r3, #3
    6784:	421a      	tst	r2, r3
    6786:	d034      	beq.n	67f2 <__ssputs_r+0x86>
    6788:	2503      	movs	r5, #3
    678a:	6909      	ldr	r1, [r1, #16]
    678c:	6823      	ldr	r3, [r4, #0]
    678e:	1a5b      	subs	r3, r3, r1
    6790:	9302      	str	r3, [sp, #8]
    6792:	6963      	ldr	r3, [r4, #20]
    6794:	9802      	ldr	r0, [sp, #8]
    6796:	435d      	muls	r5, r3
    6798:	0feb      	lsrs	r3, r5, #31
    679a:	195d      	adds	r5, r3, r5
    679c:	9b01      	ldr	r3, [sp, #4]
    679e:	106d      	asrs	r5, r5, #1
    67a0:	3301      	adds	r3, #1
    67a2:	181b      	adds	r3, r3, r0
    67a4:	42ab      	cmp	r3, r5
    67a6:	d900      	bls.n	67aa <__ssputs_r+0x3e>
    67a8:	001d      	movs	r5, r3
    67aa:	0553      	lsls	r3, r2, #21
    67ac:	d532      	bpl.n	6814 <__ssputs_r+0xa8>
    67ae:	0029      	movs	r1, r5
    67b0:	0038      	movs	r0, r7
    67b2:	f7ff fbc1 	bl	5f38 <_malloc_r>
    67b6:	1e06      	subs	r6, r0, #0
    67b8:	d109      	bne.n	67ce <__ssputs_r+0x62>
    67ba:	230c      	movs	r3, #12
    67bc:	603b      	str	r3, [r7, #0]
    67be:	2340      	movs	r3, #64	; 0x40
    67c0:	2001      	movs	r0, #1
    67c2:	89a2      	ldrh	r2, [r4, #12]
    67c4:	4240      	negs	r0, r0
    67c6:	4313      	orrs	r3, r2
    67c8:	81a3      	strh	r3, [r4, #12]
    67ca:	b005      	add	sp, #20
    67cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ce:	9a02      	ldr	r2, [sp, #8]
    67d0:	6921      	ldr	r1, [r4, #16]
    67d2:	f000 fb68 	bl	6ea6 <memcpy>
    67d6:	89a3      	ldrh	r3, [r4, #12]
    67d8:	4a14      	ldr	r2, [pc, #80]	; (682c <__ssputs_r+0xc0>)
    67da:	401a      	ands	r2, r3
    67dc:	2380      	movs	r3, #128	; 0x80
    67de:	4313      	orrs	r3, r2
    67e0:	81a3      	strh	r3, [r4, #12]
    67e2:	9b02      	ldr	r3, [sp, #8]
    67e4:	6126      	str	r6, [r4, #16]
    67e6:	18f6      	adds	r6, r6, r3
    67e8:	6026      	str	r6, [r4, #0]
    67ea:	6165      	str	r5, [r4, #20]
    67ec:	9e01      	ldr	r6, [sp, #4]
    67ee:	1aed      	subs	r5, r5, r3
    67f0:	60a5      	str	r5, [r4, #8]
    67f2:	9b01      	ldr	r3, [sp, #4]
    67f4:	42b3      	cmp	r3, r6
    67f6:	d200      	bcs.n	67fa <__ssputs_r+0x8e>
    67f8:	001e      	movs	r6, r3
    67fa:	0032      	movs	r2, r6
    67fc:	9903      	ldr	r1, [sp, #12]
    67fe:	6820      	ldr	r0, [r4, #0]
    6800:	f000 fb5a 	bl	6eb8 <memmove>
    6804:	68a3      	ldr	r3, [r4, #8]
    6806:	2000      	movs	r0, #0
    6808:	1b9b      	subs	r3, r3, r6
    680a:	60a3      	str	r3, [r4, #8]
    680c:	6823      	ldr	r3, [r4, #0]
    680e:	199e      	adds	r6, r3, r6
    6810:	6026      	str	r6, [r4, #0]
    6812:	e7da      	b.n	67ca <__ssputs_r+0x5e>
    6814:	002a      	movs	r2, r5
    6816:	0038      	movs	r0, r7
    6818:	f000 fb60 	bl	6edc <_realloc_r>
    681c:	1e06      	subs	r6, r0, #0
    681e:	d1e0      	bne.n	67e2 <__ssputs_r+0x76>
    6820:	6921      	ldr	r1, [r4, #16]
    6822:	0038      	movs	r0, r7
    6824:	f7ff fb3e 	bl	5ea4 <_free_r>
    6828:	e7c7      	b.n	67ba <__ssputs_r+0x4e>
    682a:	46c0      	nop			; (mov r8, r8)
    682c:	fffffb7f 	.word	0xfffffb7f

00006830 <_svfiprintf_r>:
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	b09f      	sub	sp, #124	; 0x7c
    6834:	9002      	str	r0, [sp, #8]
    6836:	9305      	str	r3, [sp, #20]
    6838:	898b      	ldrh	r3, [r1, #12]
    683a:	000f      	movs	r7, r1
    683c:	0016      	movs	r6, r2
    683e:	061b      	lsls	r3, r3, #24
    6840:	d511      	bpl.n	6866 <_svfiprintf_r+0x36>
    6842:	690b      	ldr	r3, [r1, #16]
    6844:	2b00      	cmp	r3, #0
    6846:	d10e      	bne.n	6866 <_svfiprintf_r+0x36>
    6848:	2140      	movs	r1, #64	; 0x40
    684a:	f7ff fb75 	bl	5f38 <_malloc_r>
    684e:	6038      	str	r0, [r7, #0]
    6850:	6138      	str	r0, [r7, #16]
    6852:	2800      	cmp	r0, #0
    6854:	d105      	bne.n	6862 <_svfiprintf_r+0x32>
    6856:	230c      	movs	r3, #12
    6858:	9a02      	ldr	r2, [sp, #8]
    685a:	3801      	subs	r0, #1
    685c:	6013      	str	r3, [r2, #0]
    685e:	b01f      	add	sp, #124	; 0x7c
    6860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6862:	2340      	movs	r3, #64	; 0x40
    6864:	617b      	str	r3, [r7, #20]
    6866:	2300      	movs	r3, #0
    6868:	ad06      	add	r5, sp, #24
    686a:	616b      	str	r3, [r5, #20]
    686c:	3320      	adds	r3, #32
    686e:	766b      	strb	r3, [r5, #25]
    6870:	3310      	adds	r3, #16
    6872:	76ab      	strb	r3, [r5, #26]
    6874:	0034      	movs	r4, r6
    6876:	7823      	ldrb	r3, [r4, #0]
    6878:	2b00      	cmp	r3, #0
    687a:	d147      	bne.n	690c <_svfiprintf_r+0xdc>
    687c:	1ba3      	subs	r3, r4, r6
    687e:	9304      	str	r3, [sp, #16]
    6880:	d00d      	beq.n	689e <_svfiprintf_r+0x6e>
    6882:	1ba3      	subs	r3, r4, r6
    6884:	0032      	movs	r2, r6
    6886:	0039      	movs	r1, r7
    6888:	9802      	ldr	r0, [sp, #8]
    688a:	f7ff ff6f 	bl	676c <__ssputs_r>
    688e:	1c43      	adds	r3, r0, #1
    6890:	d100      	bne.n	6894 <_svfiprintf_r+0x64>
    6892:	e0b5      	b.n	6a00 <_svfiprintf_r+0x1d0>
    6894:	696a      	ldr	r2, [r5, #20]
    6896:	9b04      	ldr	r3, [sp, #16]
    6898:	4694      	mov	ip, r2
    689a:	4463      	add	r3, ip
    689c:	616b      	str	r3, [r5, #20]
    689e:	7823      	ldrb	r3, [r4, #0]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d100      	bne.n	68a6 <_svfiprintf_r+0x76>
    68a4:	e0ac      	b.n	6a00 <_svfiprintf_r+0x1d0>
    68a6:	2201      	movs	r2, #1
    68a8:	2300      	movs	r3, #0
    68aa:	4252      	negs	r2, r2
    68ac:	606a      	str	r2, [r5, #4]
    68ae:	a902      	add	r1, sp, #8
    68b0:	3254      	adds	r2, #84	; 0x54
    68b2:	1852      	adds	r2, r2, r1
    68b4:	3401      	adds	r4, #1
    68b6:	602b      	str	r3, [r5, #0]
    68b8:	60eb      	str	r3, [r5, #12]
    68ba:	60ab      	str	r3, [r5, #8]
    68bc:	7013      	strb	r3, [r2, #0]
    68be:	65ab      	str	r3, [r5, #88]	; 0x58
    68c0:	4e58      	ldr	r6, [pc, #352]	; (6a24 <_svfiprintf_r+0x1f4>)
    68c2:	2205      	movs	r2, #5
    68c4:	7821      	ldrb	r1, [r4, #0]
    68c6:	0030      	movs	r0, r6
    68c8:	f000 fae2 	bl	6e90 <memchr>
    68cc:	1c62      	adds	r2, r4, #1
    68ce:	2800      	cmp	r0, #0
    68d0:	d120      	bne.n	6914 <_svfiprintf_r+0xe4>
    68d2:	6829      	ldr	r1, [r5, #0]
    68d4:	06cb      	lsls	r3, r1, #27
    68d6:	d504      	bpl.n	68e2 <_svfiprintf_r+0xb2>
    68d8:	2353      	movs	r3, #83	; 0x53
    68da:	ae02      	add	r6, sp, #8
    68dc:	3020      	adds	r0, #32
    68de:	199b      	adds	r3, r3, r6
    68e0:	7018      	strb	r0, [r3, #0]
    68e2:	070b      	lsls	r3, r1, #28
    68e4:	d504      	bpl.n	68f0 <_svfiprintf_r+0xc0>
    68e6:	2353      	movs	r3, #83	; 0x53
    68e8:	202b      	movs	r0, #43	; 0x2b
    68ea:	ae02      	add	r6, sp, #8
    68ec:	199b      	adds	r3, r3, r6
    68ee:	7018      	strb	r0, [r3, #0]
    68f0:	7823      	ldrb	r3, [r4, #0]
    68f2:	2b2a      	cmp	r3, #42	; 0x2a
    68f4:	d016      	beq.n	6924 <_svfiprintf_r+0xf4>
    68f6:	2000      	movs	r0, #0
    68f8:	210a      	movs	r1, #10
    68fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68fc:	7822      	ldrb	r2, [r4, #0]
    68fe:	3a30      	subs	r2, #48	; 0x30
    6900:	2a09      	cmp	r2, #9
    6902:	d955      	bls.n	69b0 <_svfiprintf_r+0x180>
    6904:	2800      	cmp	r0, #0
    6906:	d015      	beq.n	6934 <_svfiprintf_r+0x104>
    6908:	9309      	str	r3, [sp, #36]	; 0x24
    690a:	e013      	b.n	6934 <_svfiprintf_r+0x104>
    690c:	2b25      	cmp	r3, #37	; 0x25
    690e:	d0b5      	beq.n	687c <_svfiprintf_r+0x4c>
    6910:	3401      	adds	r4, #1
    6912:	e7b0      	b.n	6876 <_svfiprintf_r+0x46>
    6914:	2301      	movs	r3, #1
    6916:	1b80      	subs	r0, r0, r6
    6918:	4083      	lsls	r3, r0
    691a:	6829      	ldr	r1, [r5, #0]
    691c:	0014      	movs	r4, r2
    691e:	430b      	orrs	r3, r1
    6920:	602b      	str	r3, [r5, #0]
    6922:	e7cd      	b.n	68c0 <_svfiprintf_r+0x90>
    6924:	9b05      	ldr	r3, [sp, #20]
    6926:	1d18      	adds	r0, r3, #4
    6928:	681b      	ldr	r3, [r3, #0]
    692a:	9005      	str	r0, [sp, #20]
    692c:	2b00      	cmp	r3, #0
    692e:	db39      	blt.n	69a4 <_svfiprintf_r+0x174>
    6930:	9309      	str	r3, [sp, #36]	; 0x24
    6932:	0014      	movs	r4, r2
    6934:	7823      	ldrb	r3, [r4, #0]
    6936:	2b2e      	cmp	r3, #46	; 0x2e
    6938:	d10b      	bne.n	6952 <_svfiprintf_r+0x122>
    693a:	7863      	ldrb	r3, [r4, #1]
    693c:	1c62      	adds	r2, r4, #1
    693e:	2b2a      	cmp	r3, #42	; 0x2a
    6940:	d13e      	bne.n	69c0 <_svfiprintf_r+0x190>
    6942:	9b05      	ldr	r3, [sp, #20]
    6944:	3402      	adds	r4, #2
    6946:	1d1a      	adds	r2, r3, #4
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	9205      	str	r2, [sp, #20]
    694c:	2b00      	cmp	r3, #0
    694e:	db34      	blt.n	69ba <_svfiprintf_r+0x18a>
    6950:	9307      	str	r3, [sp, #28]
    6952:	4e35      	ldr	r6, [pc, #212]	; (6a28 <_svfiprintf_r+0x1f8>)
    6954:	7821      	ldrb	r1, [r4, #0]
    6956:	2203      	movs	r2, #3
    6958:	0030      	movs	r0, r6
    695a:	f000 fa99 	bl	6e90 <memchr>
    695e:	2800      	cmp	r0, #0
    6960:	d006      	beq.n	6970 <_svfiprintf_r+0x140>
    6962:	2340      	movs	r3, #64	; 0x40
    6964:	1b80      	subs	r0, r0, r6
    6966:	4083      	lsls	r3, r0
    6968:	682a      	ldr	r2, [r5, #0]
    696a:	3401      	adds	r4, #1
    696c:	4313      	orrs	r3, r2
    696e:	602b      	str	r3, [r5, #0]
    6970:	7821      	ldrb	r1, [r4, #0]
    6972:	2206      	movs	r2, #6
    6974:	482d      	ldr	r0, [pc, #180]	; (6a2c <_svfiprintf_r+0x1fc>)
    6976:	1c66      	adds	r6, r4, #1
    6978:	7629      	strb	r1, [r5, #24]
    697a:	f000 fa89 	bl	6e90 <memchr>
    697e:	2800      	cmp	r0, #0
    6980:	d046      	beq.n	6a10 <_svfiprintf_r+0x1e0>
    6982:	4b2b      	ldr	r3, [pc, #172]	; (6a30 <_svfiprintf_r+0x200>)
    6984:	2b00      	cmp	r3, #0
    6986:	d12f      	bne.n	69e8 <_svfiprintf_r+0x1b8>
    6988:	6829      	ldr	r1, [r5, #0]
    698a:	9b05      	ldr	r3, [sp, #20]
    698c:	2207      	movs	r2, #7
    698e:	05c9      	lsls	r1, r1, #23
    6990:	d528      	bpl.n	69e4 <_svfiprintf_r+0x1b4>
    6992:	189b      	adds	r3, r3, r2
    6994:	4393      	bics	r3, r2
    6996:	3308      	adds	r3, #8
    6998:	9305      	str	r3, [sp, #20]
    699a:	696b      	ldr	r3, [r5, #20]
    699c:	9a03      	ldr	r2, [sp, #12]
    699e:	189b      	adds	r3, r3, r2
    69a0:	616b      	str	r3, [r5, #20]
    69a2:	e767      	b.n	6874 <_svfiprintf_r+0x44>
    69a4:	425b      	negs	r3, r3
    69a6:	60eb      	str	r3, [r5, #12]
    69a8:	2302      	movs	r3, #2
    69aa:	430b      	orrs	r3, r1
    69ac:	602b      	str	r3, [r5, #0]
    69ae:	e7c0      	b.n	6932 <_svfiprintf_r+0x102>
    69b0:	434b      	muls	r3, r1
    69b2:	3401      	adds	r4, #1
    69b4:	189b      	adds	r3, r3, r2
    69b6:	2001      	movs	r0, #1
    69b8:	e7a0      	b.n	68fc <_svfiprintf_r+0xcc>
    69ba:	2301      	movs	r3, #1
    69bc:	425b      	negs	r3, r3
    69be:	e7c7      	b.n	6950 <_svfiprintf_r+0x120>
    69c0:	2300      	movs	r3, #0
    69c2:	0014      	movs	r4, r2
    69c4:	200a      	movs	r0, #10
    69c6:	001a      	movs	r2, r3
    69c8:	606b      	str	r3, [r5, #4]
    69ca:	7821      	ldrb	r1, [r4, #0]
    69cc:	3930      	subs	r1, #48	; 0x30
    69ce:	2909      	cmp	r1, #9
    69d0:	d903      	bls.n	69da <_svfiprintf_r+0x1aa>
    69d2:	2b00      	cmp	r3, #0
    69d4:	d0bd      	beq.n	6952 <_svfiprintf_r+0x122>
    69d6:	9207      	str	r2, [sp, #28]
    69d8:	e7bb      	b.n	6952 <_svfiprintf_r+0x122>
    69da:	4342      	muls	r2, r0
    69dc:	3401      	adds	r4, #1
    69de:	1852      	adds	r2, r2, r1
    69e0:	2301      	movs	r3, #1
    69e2:	e7f2      	b.n	69ca <_svfiprintf_r+0x19a>
    69e4:	3307      	adds	r3, #7
    69e6:	e7d5      	b.n	6994 <_svfiprintf_r+0x164>
    69e8:	ab05      	add	r3, sp, #20
    69ea:	9300      	str	r3, [sp, #0]
    69ec:	003a      	movs	r2, r7
    69ee:	4b11      	ldr	r3, [pc, #68]	; (6a34 <_svfiprintf_r+0x204>)
    69f0:	0029      	movs	r1, r5
    69f2:	9802      	ldr	r0, [sp, #8]
    69f4:	e000      	b.n	69f8 <_svfiprintf_r+0x1c8>
    69f6:	bf00      	nop
    69f8:	9003      	str	r0, [sp, #12]
    69fa:	9b03      	ldr	r3, [sp, #12]
    69fc:	3301      	adds	r3, #1
    69fe:	d1cc      	bne.n	699a <_svfiprintf_r+0x16a>
    6a00:	89bb      	ldrh	r3, [r7, #12]
    6a02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6a04:	065b      	lsls	r3, r3, #25
    6a06:	d400      	bmi.n	6a0a <_svfiprintf_r+0x1da>
    6a08:	e729      	b.n	685e <_svfiprintf_r+0x2e>
    6a0a:	2001      	movs	r0, #1
    6a0c:	4240      	negs	r0, r0
    6a0e:	e726      	b.n	685e <_svfiprintf_r+0x2e>
    6a10:	ab05      	add	r3, sp, #20
    6a12:	9300      	str	r3, [sp, #0]
    6a14:	003a      	movs	r2, r7
    6a16:	4b07      	ldr	r3, [pc, #28]	; (6a34 <_svfiprintf_r+0x204>)
    6a18:	0029      	movs	r1, r5
    6a1a:	9802      	ldr	r0, [sp, #8]
    6a1c:	f000 f87a 	bl	6b14 <_printf_i>
    6a20:	e7ea      	b.n	69f8 <_svfiprintf_r+0x1c8>
    6a22:	46c0      	nop			; (mov r8, r8)
    6a24:	00007c0e 	.word	0x00007c0e
    6a28:	00007c14 	.word	0x00007c14
    6a2c:	00007c18 	.word	0x00007c18
    6a30:	00000000 	.word	0x00000000
    6a34:	0000676d 	.word	0x0000676d

00006a38 <_printf_common>:
    6a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6a3a:	0015      	movs	r5, r2
    6a3c:	9301      	str	r3, [sp, #4]
    6a3e:	688a      	ldr	r2, [r1, #8]
    6a40:	690b      	ldr	r3, [r1, #16]
    6a42:	9000      	str	r0, [sp, #0]
    6a44:	000c      	movs	r4, r1
    6a46:	4293      	cmp	r3, r2
    6a48:	da00      	bge.n	6a4c <_printf_common+0x14>
    6a4a:	0013      	movs	r3, r2
    6a4c:	0022      	movs	r2, r4
    6a4e:	602b      	str	r3, [r5, #0]
    6a50:	3243      	adds	r2, #67	; 0x43
    6a52:	7812      	ldrb	r2, [r2, #0]
    6a54:	2a00      	cmp	r2, #0
    6a56:	d001      	beq.n	6a5c <_printf_common+0x24>
    6a58:	3301      	adds	r3, #1
    6a5a:	602b      	str	r3, [r5, #0]
    6a5c:	6823      	ldr	r3, [r4, #0]
    6a5e:	069b      	lsls	r3, r3, #26
    6a60:	d502      	bpl.n	6a68 <_printf_common+0x30>
    6a62:	682b      	ldr	r3, [r5, #0]
    6a64:	3302      	adds	r3, #2
    6a66:	602b      	str	r3, [r5, #0]
    6a68:	2706      	movs	r7, #6
    6a6a:	6823      	ldr	r3, [r4, #0]
    6a6c:	401f      	ands	r7, r3
    6a6e:	d027      	beq.n	6ac0 <_printf_common+0x88>
    6a70:	0023      	movs	r3, r4
    6a72:	3343      	adds	r3, #67	; 0x43
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	1e5a      	subs	r2, r3, #1
    6a78:	4193      	sbcs	r3, r2
    6a7a:	6822      	ldr	r2, [r4, #0]
    6a7c:	0692      	lsls	r2, r2, #26
    6a7e:	d430      	bmi.n	6ae2 <_printf_common+0xaa>
    6a80:	0022      	movs	r2, r4
    6a82:	9901      	ldr	r1, [sp, #4]
    6a84:	3243      	adds	r2, #67	; 0x43
    6a86:	9800      	ldr	r0, [sp, #0]
    6a88:	9e08      	ldr	r6, [sp, #32]
    6a8a:	47b0      	blx	r6
    6a8c:	1c43      	adds	r3, r0, #1
    6a8e:	d025      	beq.n	6adc <_printf_common+0xa4>
    6a90:	2306      	movs	r3, #6
    6a92:	6820      	ldr	r0, [r4, #0]
    6a94:	682a      	ldr	r2, [r5, #0]
    6a96:	68e1      	ldr	r1, [r4, #12]
    6a98:	4003      	ands	r3, r0
    6a9a:	2500      	movs	r5, #0
    6a9c:	2b04      	cmp	r3, #4
    6a9e:	d103      	bne.n	6aa8 <_printf_common+0x70>
    6aa0:	1a8d      	subs	r5, r1, r2
    6aa2:	43eb      	mvns	r3, r5
    6aa4:	17db      	asrs	r3, r3, #31
    6aa6:	401d      	ands	r5, r3
    6aa8:	68a3      	ldr	r3, [r4, #8]
    6aaa:	6922      	ldr	r2, [r4, #16]
    6aac:	4293      	cmp	r3, r2
    6aae:	dd01      	ble.n	6ab4 <_printf_common+0x7c>
    6ab0:	1a9b      	subs	r3, r3, r2
    6ab2:	18ed      	adds	r5, r5, r3
    6ab4:	2700      	movs	r7, #0
    6ab6:	42bd      	cmp	r5, r7
    6ab8:	d120      	bne.n	6afc <_printf_common+0xc4>
    6aba:	2000      	movs	r0, #0
    6abc:	e010      	b.n	6ae0 <_printf_common+0xa8>
    6abe:	3701      	adds	r7, #1
    6ac0:	68e3      	ldr	r3, [r4, #12]
    6ac2:	682a      	ldr	r2, [r5, #0]
    6ac4:	1a9b      	subs	r3, r3, r2
    6ac6:	429f      	cmp	r7, r3
    6ac8:	dad2      	bge.n	6a70 <_printf_common+0x38>
    6aca:	0022      	movs	r2, r4
    6acc:	2301      	movs	r3, #1
    6ace:	3219      	adds	r2, #25
    6ad0:	9901      	ldr	r1, [sp, #4]
    6ad2:	9800      	ldr	r0, [sp, #0]
    6ad4:	9e08      	ldr	r6, [sp, #32]
    6ad6:	47b0      	blx	r6
    6ad8:	1c43      	adds	r3, r0, #1
    6ada:	d1f0      	bne.n	6abe <_printf_common+0x86>
    6adc:	2001      	movs	r0, #1
    6ade:	4240      	negs	r0, r0
    6ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ae2:	2030      	movs	r0, #48	; 0x30
    6ae4:	18e1      	adds	r1, r4, r3
    6ae6:	3143      	adds	r1, #67	; 0x43
    6ae8:	7008      	strb	r0, [r1, #0]
    6aea:	0021      	movs	r1, r4
    6aec:	1c5a      	adds	r2, r3, #1
    6aee:	3145      	adds	r1, #69	; 0x45
    6af0:	7809      	ldrb	r1, [r1, #0]
    6af2:	18a2      	adds	r2, r4, r2
    6af4:	3243      	adds	r2, #67	; 0x43
    6af6:	3302      	adds	r3, #2
    6af8:	7011      	strb	r1, [r2, #0]
    6afa:	e7c1      	b.n	6a80 <_printf_common+0x48>
    6afc:	0022      	movs	r2, r4
    6afe:	2301      	movs	r3, #1
    6b00:	321a      	adds	r2, #26
    6b02:	9901      	ldr	r1, [sp, #4]
    6b04:	9800      	ldr	r0, [sp, #0]
    6b06:	9e08      	ldr	r6, [sp, #32]
    6b08:	47b0      	blx	r6
    6b0a:	1c43      	adds	r3, r0, #1
    6b0c:	d0e6      	beq.n	6adc <_printf_common+0xa4>
    6b0e:	3701      	adds	r7, #1
    6b10:	e7d1      	b.n	6ab6 <_printf_common+0x7e>
	...

00006b14 <_printf_i>:
    6b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b16:	b08b      	sub	sp, #44	; 0x2c
    6b18:	9206      	str	r2, [sp, #24]
    6b1a:	000a      	movs	r2, r1
    6b1c:	3243      	adds	r2, #67	; 0x43
    6b1e:	9307      	str	r3, [sp, #28]
    6b20:	9005      	str	r0, [sp, #20]
    6b22:	9204      	str	r2, [sp, #16]
    6b24:	7e0a      	ldrb	r2, [r1, #24]
    6b26:	000c      	movs	r4, r1
    6b28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b2a:	2a6e      	cmp	r2, #110	; 0x6e
    6b2c:	d100      	bne.n	6b30 <_printf_i+0x1c>
    6b2e:	e08f      	b.n	6c50 <_printf_i+0x13c>
    6b30:	d817      	bhi.n	6b62 <_printf_i+0x4e>
    6b32:	2a63      	cmp	r2, #99	; 0x63
    6b34:	d02c      	beq.n	6b90 <_printf_i+0x7c>
    6b36:	d808      	bhi.n	6b4a <_printf_i+0x36>
    6b38:	2a00      	cmp	r2, #0
    6b3a:	d100      	bne.n	6b3e <_printf_i+0x2a>
    6b3c:	e099      	b.n	6c72 <_printf_i+0x15e>
    6b3e:	2a58      	cmp	r2, #88	; 0x58
    6b40:	d054      	beq.n	6bec <_printf_i+0xd8>
    6b42:	0026      	movs	r6, r4
    6b44:	3642      	adds	r6, #66	; 0x42
    6b46:	7032      	strb	r2, [r6, #0]
    6b48:	e029      	b.n	6b9e <_printf_i+0x8a>
    6b4a:	2a64      	cmp	r2, #100	; 0x64
    6b4c:	d001      	beq.n	6b52 <_printf_i+0x3e>
    6b4e:	2a69      	cmp	r2, #105	; 0x69
    6b50:	d1f7      	bne.n	6b42 <_printf_i+0x2e>
    6b52:	6821      	ldr	r1, [r4, #0]
    6b54:	681a      	ldr	r2, [r3, #0]
    6b56:	0608      	lsls	r0, r1, #24
    6b58:	d523      	bpl.n	6ba2 <_printf_i+0x8e>
    6b5a:	1d11      	adds	r1, r2, #4
    6b5c:	6019      	str	r1, [r3, #0]
    6b5e:	6815      	ldr	r5, [r2, #0]
    6b60:	e025      	b.n	6bae <_printf_i+0x9a>
    6b62:	2a73      	cmp	r2, #115	; 0x73
    6b64:	d100      	bne.n	6b68 <_printf_i+0x54>
    6b66:	e088      	b.n	6c7a <_printf_i+0x166>
    6b68:	d808      	bhi.n	6b7c <_printf_i+0x68>
    6b6a:	2a6f      	cmp	r2, #111	; 0x6f
    6b6c:	d029      	beq.n	6bc2 <_printf_i+0xae>
    6b6e:	2a70      	cmp	r2, #112	; 0x70
    6b70:	d1e7      	bne.n	6b42 <_printf_i+0x2e>
    6b72:	2220      	movs	r2, #32
    6b74:	6809      	ldr	r1, [r1, #0]
    6b76:	430a      	orrs	r2, r1
    6b78:	6022      	str	r2, [r4, #0]
    6b7a:	e003      	b.n	6b84 <_printf_i+0x70>
    6b7c:	2a75      	cmp	r2, #117	; 0x75
    6b7e:	d020      	beq.n	6bc2 <_printf_i+0xae>
    6b80:	2a78      	cmp	r2, #120	; 0x78
    6b82:	d1de      	bne.n	6b42 <_printf_i+0x2e>
    6b84:	0022      	movs	r2, r4
    6b86:	2178      	movs	r1, #120	; 0x78
    6b88:	3245      	adds	r2, #69	; 0x45
    6b8a:	7011      	strb	r1, [r2, #0]
    6b8c:	4a6c      	ldr	r2, [pc, #432]	; (6d40 <_printf_i+0x22c>)
    6b8e:	e030      	b.n	6bf2 <_printf_i+0xde>
    6b90:	000e      	movs	r6, r1
    6b92:	681a      	ldr	r2, [r3, #0]
    6b94:	3642      	adds	r6, #66	; 0x42
    6b96:	1d11      	adds	r1, r2, #4
    6b98:	6019      	str	r1, [r3, #0]
    6b9a:	6813      	ldr	r3, [r2, #0]
    6b9c:	7033      	strb	r3, [r6, #0]
    6b9e:	2301      	movs	r3, #1
    6ba0:	e079      	b.n	6c96 <_printf_i+0x182>
    6ba2:	0649      	lsls	r1, r1, #25
    6ba4:	d5d9      	bpl.n	6b5a <_printf_i+0x46>
    6ba6:	1d11      	adds	r1, r2, #4
    6ba8:	6019      	str	r1, [r3, #0]
    6baa:	2300      	movs	r3, #0
    6bac:	5ed5      	ldrsh	r5, [r2, r3]
    6bae:	2d00      	cmp	r5, #0
    6bb0:	da03      	bge.n	6bba <_printf_i+0xa6>
    6bb2:	232d      	movs	r3, #45	; 0x2d
    6bb4:	9a04      	ldr	r2, [sp, #16]
    6bb6:	426d      	negs	r5, r5
    6bb8:	7013      	strb	r3, [r2, #0]
    6bba:	4b62      	ldr	r3, [pc, #392]	; (6d44 <_printf_i+0x230>)
    6bbc:	270a      	movs	r7, #10
    6bbe:	9303      	str	r3, [sp, #12]
    6bc0:	e02f      	b.n	6c22 <_printf_i+0x10e>
    6bc2:	6820      	ldr	r0, [r4, #0]
    6bc4:	6819      	ldr	r1, [r3, #0]
    6bc6:	0605      	lsls	r5, r0, #24
    6bc8:	d503      	bpl.n	6bd2 <_printf_i+0xbe>
    6bca:	1d08      	adds	r0, r1, #4
    6bcc:	6018      	str	r0, [r3, #0]
    6bce:	680d      	ldr	r5, [r1, #0]
    6bd0:	e005      	b.n	6bde <_printf_i+0xca>
    6bd2:	0640      	lsls	r0, r0, #25
    6bd4:	d5f9      	bpl.n	6bca <_printf_i+0xb6>
    6bd6:	680d      	ldr	r5, [r1, #0]
    6bd8:	1d08      	adds	r0, r1, #4
    6bda:	6018      	str	r0, [r3, #0]
    6bdc:	b2ad      	uxth	r5, r5
    6bde:	4b59      	ldr	r3, [pc, #356]	; (6d44 <_printf_i+0x230>)
    6be0:	2708      	movs	r7, #8
    6be2:	9303      	str	r3, [sp, #12]
    6be4:	2a6f      	cmp	r2, #111	; 0x6f
    6be6:	d018      	beq.n	6c1a <_printf_i+0x106>
    6be8:	270a      	movs	r7, #10
    6bea:	e016      	b.n	6c1a <_printf_i+0x106>
    6bec:	3145      	adds	r1, #69	; 0x45
    6bee:	700a      	strb	r2, [r1, #0]
    6bf0:	4a54      	ldr	r2, [pc, #336]	; (6d44 <_printf_i+0x230>)
    6bf2:	9203      	str	r2, [sp, #12]
    6bf4:	681a      	ldr	r2, [r3, #0]
    6bf6:	6821      	ldr	r1, [r4, #0]
    6bf8:	1d10      	adds	r0, r2, #4
    6bfa:	6018      	str	r0, [r3, #0]
    6bfc:	6815      	ldr	r5, [r2, #0]
    6bfe:	0608      	lsls	r0, r1, #24
    6c00:	d522      	bpl.n	6c48 <_printf_i+0x134>
    6c02:	07cb      	lsls	r3, r1, #31
    6c04:	d502      	bpl.n	6c0c <_printf_i+0xf8>
    6c06:	2320      	movs	r3, #32
    6c08:	4319      	orrs	r1, r3
    6c0a:	6021      	str	r1, [r4, #0]
    6c0c:	2710      	movs	r7, #16
    6c0e:	2d00      	cmp	r5, #0
    6c10:	d103      	bne.n	6c1a <_printf_i+0x106>
    6c12:	2320      	movs	r3, #32
    6c14:	6822      	ldr	r2, [r4, #0]
    6c16:	439a      	bics	r2, r3
    6c18:	6022      	str	r2, [r4, #0]
    6c1a:	0023      	movs	r3, r4
    6c1c:	2200      	movs	r2, #0
    6c1e:	3343      	adds	r3, #67	; 0x43
    6c20:	701a      	strb	r2, [r3, #0]
    6c22:	6863      	ldr	r3, [r4, #4]
    6c24:	60a3      	str	r3, [r4, #8]
    6c26:	2b00      	cmp	r3, #0
    6c28:	db5c      	blt.n	6ce4 <_printf_i+0x1d0>
    6c2a:	2204      	movs	r2, #4
    6c2c:	6821      	ldr	r1, [r4, #0]
    6c2e:	4391      	bics	r1, r2
    6c30:	6021      	str	r1, [r4, #0]
    6c32:	2d00      	cmp	r5, #0
    6c34:	d158      	bne.n	6ce8 <_printf_i+0x1d4>
    6c36:	9e04      	ldr	r6, [sp, #16]
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d064      	beq.n	6d06 <_printf_i+0x1f2>
    6c3c:	0026      	movs	r6, r4
    6c3e:	9b03      	ldr	r3, [sp, #12]
    6c40:	3642      	adds	r6, #66	; 0x42
    6c42:	781b      	ldrb	r3, [r3, #0]
    6c44:	7033      	strb	r3, [r6, #0]
    6c46:	e05e      	b.n	6d06 <_printf_i+0x1f2>
    6c48:	0648      	lsls	r0, r1, #25
    6c4a:	d5da      	bpl.n	6c02 <_printf_i+0xee>
    6c4c:	b2ad      	uxth	r5, r5
    6c4e:	e7d8      	b.n	6c02 <_printf_i+0xee>
    6c50:	6809      	ldr	r1, [r1, #0]
    6c52:	681a      	ldr	r2, [r3, #0]
    6c54:	0608      	lsls	r0, r1, #24
    6c56:	d505      	bpl.n	6c64 <_printf_i+0x150>
    6c58:	1d11      	adds	r1, r2, #4
    6c5a:	6019      	str	r1, [r3, #0]
    6c5c:	6813      	ldr	r3, [r2, #0]
    6c5e:	6962      	ldr	r2, [r4, #20]
    6c60:	601a      	str	r2, [r3, #0]
    6c62:	e006      	b.n	6c72 <_printf_i+0x15e>
    6c64:	0649      	lsls	r1, r1, #25
    6c66:	d5f7      	bpl.n	6c58 <_printf_i+0x144>
    6c68:	1d11      	adds	r1, r2, #4
    6c6a:	6019      	str	r1, [r3, #0]
    6c6c:	6813      	ldr	r3, [r2, #0]
    6c6e:	8aa2      	ldrh	r2, [r4, #20]
    6c70:	801a      	strh	r2, [r3, #0]
    6c72:	2300      	movs	r3, #0
    6c74:	9e04      	ldr	r6, [sp, #16]
    6c76:	6123      	str	r3, [r4, #16]
    6c78:	e054      	b.n	6d24 <_printf_i+0x210>
    6c7a:	681a      	ldr	r2, [r3, #0]
    6c7c:	1d11      	adds	r1, r2, #4
    6c7e:	6019      	str	r1, [r3, #0]
    6c80:	6816      	ldr	r6, [r2, #0]
    6c82:	2100      	movs	r1, #0
    6c84:	6862      	ldr	r2, [r4, #4]
    6c86:	0030      	movs	r0, r6
    6c88:	f000 f902 	bl	6e90 <memchr>
    6c8c:	2800      	cmp	r0, #0
    6c8e:	d001      	beq.n	6c94 <_printf_i+0x180>
    6c90:	1b80      	subs	r0, r0, r6
    6c92:	6060      	str	r0, [r4, #4]
    6c94:	6863      	ldr	r3, [r4, #4]
    6c96:	6123      	str	r3, [r4, #16]
    6c98:	2300      	movs	r3, #0
    6c9a:	9a04      	ldr	r2, [sp, #16]
    6c9c:	7013      	strb	r3, [r2, #0]
    6c9e:	e041      	b.n	6d24 <_printf_i+0x210>
    6ca0:	6923      	ldr	r3, [r4, #16]
    6ca2:	0032      	movs	r2, r6
    6ca4:	9906      	ldr	r1, [sp, #24]
    6ca6:	9805      	ldr	r0, [sp, #20]
    6ca8:	9d07      	ldr	r5, [sp, #28]
    6caa:	47a8      	blx	r5
    6cac:	1c43      	adds	r3, r0, #1
    6cae:	d043      	beq.n	6d38 <_printf_i+0x224>
    6cb0:	6823      	ldr	r3, [r4, #0]
    6cb2:	2500      	movs	r5, #0
    6cb4:	079b      	lsls	r3, r3, #30
    6cb6:	d40f      	bmi.n	6cd8 <_printf_i+0x1c4>
    6cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6cba:	68e0      	ldr	r0, [r4, #12]
    6cbc:	4298      	cmp	r0, r3
    6cbe:	da3d      	bge.n	6d3c <_printf_i+0x228>
    6cc0:	0018      	movs	r0, r3
    6cc2:	e03b      	b.n	6d3c <_printf_i+0x228>
    6cc4:	0022      	movs	r2, r4
    6cc6:	2301      	movs	r3, #1
    6cc8:	3219      	adds	r2, #25
    6cca:	9906      	ldr	r1, [sp, #24]
    6ccc:	9805      	ldr	r0, [sp, #20]
    6cce:	9e07      	ldr	r6, [sp, #28]
    6cd0:	47b0      	blx	r6
    6cd2:	1c43      	adds	r3, r0, #1
    6cd4:	d030      	beq.n	6d38 <_printf_i+0x224>
    6cd6:	3501      	adds	r5, #1
    6cd8:	68e3      	ldr	r3, [r4, #12]
    6cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6cdc:	1a9b      	subs	r3, r3, r2
    6cde:	429d      	cmp	r5, r3
    6ce0:	dbf0      	blt.n	6cc4 <_printf_i+0x1b0>
    6ce2:	e7e9      	b.n	6cb8 <_printf_i+0x1a4>
    6ce4:	2d00      	cmp	r5, #0
    6ce6:	d0a9      	beq.n	6c3c <_printf_i+0x128>
    6ce8:	9e04      	ldr	r6, [sp, #16]
    6cea:	0028      	movs	r0, r5
    6cec:	0039      	movs	r1, r7
    6cee:	f7fe ff89 	bl	5c04 <__aeabi_uidivmod>
    6cf2:	9b03      	ldr	r3, [sp, #12]
    6cf4:	3e01      	subs	r6, #1
    6cf6:	5c5b      	ldrb	r3, [r3, r1]
    6cf8:	0028      	movs	r0, r5
    6cfa:	7033      	strb	r3, [r6, #0]
    6cfc:	0039      	movs	r1, r7
    6cfe:	f7fe fefb 	bl	5af8 <__udivsi3>
    6d02:	1e05      	subs	r5, r0, #0
    6d04:	d1f1      	bne.n	6cea <_printf_i+0x1d6>
    6d06:	2f08      	cmp	r7, #8
    6d08:	d109      	bne.n	6d1e <_printf_i+0x20a>
    6d0a:	6823      	ldr	r3, [r4, #0]
    6d0c:	07db      	lsls	r3, r3, #31
    6d0e:	d506      	bpl.n	6d1e <_printf_i+0x20a>
    6d10:	6863      	ldr	r3, [r4, #4]
    6d12:	6922      	ldr	r2, [r4, #16]
    6d14:	4293      	cmp	r3, r2
    6d16:	dc02      	bgt.n	6d1e <_printf_i+0x20a>
    6d18:	2330      	movs	r3, #48	; 0x30
    6d1a:	3e01      	subs	r6, #1
    6d1c:	7033      	strb	r3, [r6, #0]
    6d1e:	9b04      	ldr	r3, [sp, #16]
    6d20:	1b9b      	subs	r3, r3, r6
    6d22:	6123      	str	r3, [r4, #16]
    6d24:	9b07      	ldr	r3, [sp, #28]
    6d26:	aa09      	add	r2, sp, #36	; 0x24
    6d28:	9300      	str	r3, [sp, #0]
    6d2a:	0021      	movs	r1, r4
    6d2c:	9b06      	ldr	r3, [sp, #24]
    6d2e:	9805      	ldr	r0, [sp, #20]
    6d30:	f7ff fe82 	bl	6a38 <_printf_common>
    6d34:	1c43      	adds	r3, r0, #1
    6d36:	d1b3      	bne.n	6ca0 <_printf_i+0x18c>
    6d38:	2001      	movs	r0, #1
    6d3a:	4240      	negs	r0, r0
    6d3c:	b00b      	add	sp, #44	; 0x2c
    6d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d40:	00007c30 	.word	0x00007c30
    6d44:	00007c1f 	.word	0x00007c1f

00006d48 <__sread>:
    6d48:	b570      	push	{r4, r5, r6, lr}
    6d4a:	000c      	movs	r4, r1
    6d4c:	250e      	movs	r5, #14
    6d4e:	5f49      	ldrsh	r1, [r1, r5]
    6d50:	f000 f8ea 	bl	6f28 <_read_r>
    6d54:	2800      	cmp	r0, #0
    6d56:	db03      	blt.n	6d60 <__sread+0x18>
    6d58:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6d5a:	181b      	adds	r3, r3, r0
    6d5c:	6563      	str	r3, [r4, #84]	; 0x54
    6d5e:	bd70      	pop	{r4, r5, r6, pc}
    6d60:	89a3      	ldrh	r3, [r4, #12]
    6d62:	4a02      	ldr	r2, [pc, #8]	; (6d6c <__sread+0x24>)
    6d64:	4013      	ands	r3, r2
    6d66:	81a3      	strh	r3, [r4, #12]
    6d68:	e7f9      	b.n	6d5e <__sread+0x16>
    6d6a:	46c0      	nop			; (mov r8, r8)
    6d6c:	ffffefff 	.word	0xffffefff

00006d70 <__swrite>:
    6d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d72:	001f      	movs	r7, r3
    6d74:	898b      	ldrh	r3, [r1, #12]
    6d76:	0005      	movs	r5, r0
    6d78:	000c      	movs	r4, r1
    6d7a:	0016      	movs	r6, r2
    6d7c:	05db      	lsls	r3, r3, #23
    6d7e:	d505      	bpl.n	6d8c <__swrite+0x1c>
    6d80:	230e      	movs	r3, #14
    6d82:	5ec9      	ldrsh	r1, [r1, r3]
    6d84:	2200      	movs	r2, #0
    6d86:	2302      	movs	r3, #2
    6d88:	f000 f86e 	bl	6e68 <_lseek_r>
    6d8c:	89a3      	ldrh	r3, [r4, #12]
    6d8e:	4a05      	ldr	r2, [pc, #20]	; (6da4 <__swrite+0x34>)
    6d90:	0028      	movs	r0, r5
    6d92:	4013      	ands	r3, r2
    6d94:	81a3      	strh	r3, [r4, #12]
    6d96:	0032      	movs	r2, r6
    6d98:	230e      	movs	r3, #14
    6d9a:	5ee1      	ldrsh	r1, [r4, r3]
    6d9c:	003b      	movs	r3, r7
    6d9e:	f000 f82b 	bl	6df8 <_write_r>
    6da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6da4:	ffffefff 	.word	0xffffefff

00006da8 <__sseek>:
    6da8:	b570      	push	{r4, r5, r6, lr}
    6daa:	000c      	movs	r4, r1
    6dac:	250e      	movs	r5, #14
    6dae:	5f49      	ldrsh	r1, [r1, r5]
    6db0:	f000 f85a 	bl	6e68 <_lseek_r>
    6db4:	89a3      	ldrh	r3, [r4, #12]
    6db6:	1c42      	adds	r2, r0, #1
    6db8:	d103      	bne.n	6dc2 <__sseek+0x1a>
    6dba:	4a05      	ldr	r2, [pc, #20]	; (6dd0 <__sseek+0x28>)
    6dbc:	4013      	ands	r3, r2
    6dbe:	81a3      	strh	r3, [r4, #12]
    6dc0:	bd70      	pop	{r4, r5, r6, pc}
    6dc2:	2280      	movs	r2, #128	; 0x80
    6dc4:	0152      	lsls	r2, r2, #5
    6dc6:	4313      	orrs	r3, r2
    6dc8:	81a3      	strh	r3, [r4, #12]
    6dca:	6560      	str	r0, [r4, #84]	; 0x54
    6dcc:	e7f8      	b.n	6dc0 <__sseek+0x18>
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	ffffefff 	.word	0xffffefff

00006dd4 <__sclose>:
    6dd4:	b510      	push	{r4, lr}
    6dd6:	230e      	movs	r3, #14
    6dd8:	5ec9      	ldrsh	r1, [r1, r3]
    6dda:	f000 f821 	bl	6e20 <_close_r>
    6dde:	bd10      	pop	{r4, pc}

00006de0 <__ascii_wctomb>:
    6de0:	1e0b      	subs	r3, r1, #0
    6de2:	d004      	beq.n	6dee <__ascii_wctomb+0xe>
    6de4:	2aff      	cmp	r2, #255	; 0xff
    6de6:	d904      	bls.n	6df2 <__ascii_wctomb+0x12>
    6de8:	238a      	movs	r3, #138	; 0x8a
    6dea:	6003      	str	r3, [r0, #0]
    6dec:	3b8b      	subs	r3, #139	; 0x8b
    6dee:	0018      	movs	r0, r3
    6df0:	4770      	bx	lr
    6df2:	700a      	strb	r2, [r1, #0]
    6df4:	2301      	movs	r3, #1
    6df6:	e7fa      	b.n	6dee <__ascii_wctomb+0xe>

00006df8 <_write_r>:
    6df8:	b570      	push	{r4, r5, r6, lr}
    6dfa:	0005      	movs	r5, r0
    6dfc:	0008      	movs	r0, r1
    6dfe:	0011      	movs	r1, r2
    6e00:	2200      	movs	r2, #0
    6e02:	4c06      	ldr	r4, [pc, #24]	; (6e1c <_write_r+0x24>)
    6e04:	6022      	str	r2, [r4, #0]
    6e06:	001a      	movs	r2, r3
    6e08:	f7fc fcb4 	bl	3774 <_write>
    6e0c:	1c43      	adds	r3, r0, #1
    6e0e:	d103      	bne.n	6e18 <_write_r+0x20>
    6e10:	6823      	ldr	r3, [r4, #0]
    6e12:	2b00      	cmp	r3, #0
    6e14:	d000      	beq.n	6e18 <_write_r+0x20>
    6e16:	602b      	str	r3, [r5, #0]
    6e18:	bd70      	pop	{r4, r5, r6, pc}
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	20000b68 	.word	0x20000b68

00006e20 <_close_r>:
    6e20:	2300      	movs	r3, #0
    6e22:	b570      	push	{r4, r5, r6, lr}
    6e24:	4c06      	ldr	r4, [pc, #24]	; (6e40 <_close_r+0x20>)
    6e26:	0005      	movs	r5, r0
    6e28:	0008      	movs	r0, r1
    6e2a:	6023      	str	r3, [r4, #0]
    6e2c:	f7fc fcdc 	bl	37e8 <_close>
    6e30:	1c43      	adds	r3, r0, #1
    6e32:	d103      	bne.n	6e3c <_close_r+0x1c>
    6e34:	6823      	ldr	r3, [r4, #0]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d000      	beq.n	6e3c <_close_r+0x1c>
    6e3a:	602b      	str	r3, [r5, #0]
    6e3c:	bd70      	pop	{r4, r5, r6, pc}
    6e3e:	46c0      	nop			; (mov r8, r8)
    6e40:	20000b68 	.word	0x20000b68

00006e44 <_fstat_r>:
    6e44:	2300      	movs	r3, #0
    6e46:	b570      	push	{r4, r5, r6, lr}
    6e48:	4c06      	ldr	r4, [pc, #24]	; (6e64 <_fstat_r+0x20>)
    6e4a:	0005      	movs	r5, r0
    6e4c:	0008      	movs	r0, r1
    6e4e:	0011      	movs	r1, r2
    6e50:	6023      	str	r3, [r4, #0]
    6e52:	f7fc fccc 	bl	37ee <_fstat>
    6e56:	1c43      	adds	r3, r0, #1
    6e58:	d103      	bne.n	6e62 <_fstat_r+0x1e>
    6e5a:	6823      	ldr	r3, [r4, #0]
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d000      	beq.n	6e62 <_fstat_r+0x1e>
    6e60:	602b      	str	r3, [r5, #0]
    6e62:	bd70      	pop	{r4, r5, r6, pc}
    6e64:	20000b68 	.word	0x20000b68

00006e68 <_lseek_r>:
    6e68:	b570      	push	{r4, r5, r6, lr}
    6e6a:	0005      	movs	r5, r0
    6e6c:	0008      	movs	r0, r1
    6e6e:	0011      	movs	r1, r2
    6e70:	2200      	movs	r2, #0
    6e72:	4c06      	ldr	r4, [pc, #24]	; (6e8c <_lseek_r+0x24>)
    6e74:	6022      	str	r2, [r4, #0]
    6e76:	001a      	movs	r2, r3
    6e78:	f7fc fcbe 	bl	37f8 <_lseek>
    6e7c:	1c43      	adds	r3, r0, #1
    6e7e:	d103      	bne.n	6e88 <_lseek_r+0x20>
    6e80:	6823      	ldr	r3, [r4, #0]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d000      	beq.n	6e88 <_lseek_r+0x20>
    6e86:	602b      	str	r3, [r5, #0]
    6e88:	bd70      	pop	{r4, r5, r6, pc}
    6e8a:	46c0      	nop			; (mov r8, r8)
    6e8c:	20000b68 	.word	0x20000b68

00006e90 <memchr>:
    6e90:	b2c9      	uxtb	r1, r1
    6e92:	1882      	adds	r2, r0, r2
    6e94:	4290      	cmp	r0, r2
    6e96:	d101      	bne.n	6e9c <memchr+0xc>
    6e98:	2000      	movs	r0, #0
    6e9a:	4770      	bx	lr
    6e9c:	7803      	ldrb	r3, [r0, #0]
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d0fb      	beq.n	6e9a <memchr+0xa>
    6ea2:	3001      	adds	r0, #1
    6ea4:	e7f6      	b.n	6e94 <memchr+0x4>

00006ea6 <memcpy>:
    6ea6:	2300      	movs	r3, #0
    6ea8:	b510      	push	{r4, lr}
    6eaa:	429a      	cmp	r2, r3
    6eac:	d100      	bne.n	6eb0 <memcpy+0xa>
    6eae:	bd10      	pop	{r4, pc}
    6eb0:	5ccc      	ldrb	r4, [r1, r3]
    6eb2:	54c4      	strb	r4, [r0, r3]
    6eb4:	3301      	adds	r3, #1
    6eb6:	e7f8      	b.n	6eaa <memcpy+0x4>

00006eb8 <memmove>:
    6eb8:	b510      	push	{r4, lr}
    6eba:	4288      	cmp	r0, r1
    6ebc:	d902      	bls.n	6ec4 <memmove+0xc>
    6ebe:	188b      	adds	r3, r1, r2
    6ec0:	4298      	cmp	r0, r3
    6ec2:	d308      	bcc.n	6ed6 <memmove+0x1e>
    6ec4:	2300      	movs	r3, #0
    6ec6:	429a      	cmp	r2, r3
    6ec8:	d007      	beq.n	6eda <memmove+0x22>
    6eca:	5ccc      	ldrb	r4, [r1, r3]
    6ecc:	54c4      	strb	r4, [r0, r3]
    6ece:	3301      	adds	r3, #1
    6ed0:	e7f9      	b.n	6ec6 <memmove+0xe>
    6ed2:	5c8b      	ldrb	r3, [r1, r2]
    6ed4:	5483      	strb	r3, [r0, r2]
    6ed6:	3a01      	subs	r2, #1
    6ed8:	d2fb      	bcs.n	6ed2 <memmove+0x1a>
    6eda:	bd10      	pop	{r4, pc}

00006edc <_realloc_r>:
    6edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ede:	0007      	movs	r7, r0
    6ee0:	000d      	movs	r5, r1
    6ee2:	0016      	movs	r6, r2
    6ee4:	2900      	cmp	r1, #0
    6ee6:	d105      	bne.n	6ef4 <_realloc_r+0x18>
    6ee8:	0011      	movs	r1, r2
    6eea:	f7ff f825 	bl	5f38 <_malloc_r>
    6eee:	0004      	movs	r4, r0
    6ef0:	0020      	movs	r0, r4
    6ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ef4:	2a00      	cmp	r2, #0
    6ef6:	d103      	bne.n	6f00 <_realloc_r+0x24>
    6ef8:	f7fe ffd4 	bl	5ea4 <_free_r>
    6efc:	0034      	movs	r4, r6
    6efe:	e7f7      	b.n	6ef0 <_realloc_r+0x14>
    6f00:	f000 f826 	bl	6f50 <_malloc_usable_size_r>
    6f04:	002c      	movs	r4, r5
    6f06:	4286      	cmp	r6, r0
    6f08:	d9f2      	bls.n	6ef0 <_realloc_r+0x14>
    6f0a:	0031      	movs	r1, r6
    6f0c:	0038      	movs	r0, r7
    6f0e:	f7ff f813 	bl	5f38 <_malloc_r>
    6f12:	1e04      	subs	r4, r0, #0
    6f14:	d0ec      	beq.n	6ef0 <_realloc_r+0x14>
    6f16:	0029      	movs	r1, r5
    6f18:	0032      	movs	r2, r6
    6f1a:	f7ff ffc4 	bl	6ea6 <memcpy>
    6f1e:	0029      	movs	r1, r5
    6f20:	0038      	movs	r0, r7
    6f22:	f7fe ffbf 	bl	5ea4 <_free_r>
    6f26:	e7e3      	b.n	6ef0 <_realloc_r+0x14>

00006f28 <_read_r>:
    6f28:	b570      	push	{r4, r5, r6, lr}
    6f2a:	0005      	movs	r5, r0
    6f2c:	0008      	movs	r0, r1
    6f2e:	0011      	movs	r1, r2
    6f30:	2200      	movs	r2, #0
    6f32:	4c06      	ldr	r4, [pc, #24]	; (6f4c <_read_r+0x24>)
    6f34:	6022      	str	r2, [r4, #0]
    6f36:	001a      	movs	r2, r3
    6f38:	f7fc fbfa 	bl	3730 <_read>
    6f3c:	1c43      	adds	r3, r0, #1
    6f3e:	d103      	bne.n	6f48 <_read_r+0x20>
    6f40:	6823      	ldr	r3, [r4, #0]
    6f42:	2b00      	cmp	r3, #0
    6f44:	d000      	beq.n	6f48 <_read_r+0x20>
    6f46:	602b      	str	r3, [r5, #0]
    6f48:	bd70      	pop	{r4, r5, r6, pc}
    6f4a:	46c0      	nop			; (mov r8, r8)
    6f4c:	20000b68 	.word	0x20000b68

00006f50 <_malloc_usable_size_r>:
    6f50:	1f0b      	subs	r3, r1, #4
    6f52:	681b      	ldr	r3, [r3, #0]
    6f54:	1f18      	subs	r0, r3, #4
    6f56:	2b00      	cmp	r3, #0
    6f58:	da01      	bge.n	6f5e <_malloc_usable_size_r+0xe>
    6f5a:	580b      	ldr	r3, [r1, r0]
    6f5c:	18c0      	adds	r0, r0, r3
    6f5e:	4770      	bx	lr
    6f60:	000003a0 	.word	0x000003a0
    6f64:	000003a0 	.word	0x000003a0
    6f68:	0000037c 	.word	0x0000037c
    6f6c:	000003a0 	.word	0x000003a0
    6f70:	0000037c 	.word	0x0000037c
    6f74:	00000362 	.word	0x00000362
    6f78:	00000362 	.word	0x00000362
    6f7c:	000003a0 	.word	0x000003a0
    6f80:	000003a0 	.word	0x000003a0
    6f84:	000003a0 	.word	0x000003a0
    6f88:	000003a0 	.word	0x000003a0
    6f8c:	000003a0 	.word	0x000003a0
    6f90:	000003a0 	.word	0x000003a0
    6f94:	000003a0 	.word	0x000003a0
    6f98:	000003a0 	.word	0x000003a0
    6f9c:	000003a0 	.word	0x000003a0
    6fa0:	000003a0 	.word	0x000003a0
    6fa4:	000003a0 	.word	0x000003a0
    6fa8:	000003a0 	.word	0x000003a0
    6fac:	000003a0 	.word	0x000003a0
    6fb0:	000003a0 	.word	0x000003a0
    6fb4:	000003a0 	.word	0x000003a0
    6fb8:	000003a0 	.word	0x000003a0
    6fbc:	000003a0 	.word	0x000003a0
    6fc0:	000003a0 	.word	0x000003a0
    6fc4:	000003a0 	.word	0x000003a0
    6fc8:	000003a0 	.word	0x000003a0
    6fcc:	000003a0 	.word	0x000003a0
    6fd0:	000003a0 	.word	0x000003a0
    6fd4:	000003a0 	.word	0x000003a0
    6fd8:	000003a0 	.word	0x000003a0
    6fdc:	000003a0 	.word	0x000003a0
    6fe0:	000003a0 	.word	0x000003a0
    6fe4:	000003a0 	.word	0x000003a0
    6fe8:	000003a0 	.word	0x000003a0
    6fec:	000003a0 	.word	0x000003a0
    6ff0:	000003a0 	.word	0x000003a0
    6ff4:	000003a0 	.word	0x000003a0
    6ff8:	000003a0 	.word	0x000003a0
    6ffc:	000003a0 	.word	0x000003a0
    7000:	000003a0 	.word	0x000003a0
    7004:	000003a0 	.word	0x000003a0
    7008:	000003a0 	.word	0x000003a0
    700c:	000003a0 	.word	0x000003a0
    7010:	000003a0 	.word	0x000003a0
    7014:	000003a0 	.word	0x000003a0
    7018:	000003a0 	.word	0x000003a0
    701c:	000003a0 	.word	0x000003a0
    7020:	000003a0 	.word	0x000003a0
    7024:	000003a0 	.word	0x000003a0
    7028:	000003a0 	.word	0x000003a0
    702c:	000003a0 	.word	0x000003a0
    7030:	000003a0 	.word	0x000003a0
    7034:	000003a0 	.word	0x000003a0
    7038:	000003a0 	.word	0x000003a0
    703c:	000003a0 	.word	0x000003a0
    7040:	000003a0 	.word	0x000003a0
    7044:	000003a0 	.word	0x000003a0
    7048:	000003a0 	.word	0x000003a0
    704c:	000003a0 	.word	0x000003a0
    7050:	000003a0 	.word	0x000003a0
    7054:	000003a0 	.word	0x000003a0
    7058:	000003a0 	.word	0x000003a0
    705c:	000003a0 	.word	0x000003a0
    7060:	0000037c 	.word	0x0000037c
    7064:	0000037c 	.word	0x0000037c
    7068:	00000384 	.word	0x00000384
    706c:	00000384 	.word	0x00000384
    7070:	00000384 	.word	0x00000384
    7074:	00000384 	.word	0x00000384

00007078 <mmc_trans_multipliers>:
    7078:	00000000 0000000a 0000000c 0000000d     ................
    7088:	0000000f 00000014 0000001a 0000001e     ................
    7098:	00000023 00000028 0000002d 00000034     #...(...-...4...
    70a8:	00000037 0000003c 00000046 00000050     7...<...F...P...

000070b8 <sd_mmc_trans_units>:
    70b8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000070d4 <sd_trans_multipliers>:
    70d4:	00000000 0000000a 0000000c 0000000d     ................
    70e4:	0000000f 00000014 00000019 0000001e     ................
    70f4:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7104:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7114:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    7124:	42001800 42001c00 00002ec6 00002ec2     ...B...B........
    7134:	00002ec2 00002f28 00002f28 00002eda     ....(/..(/......
    7144:	00002ecc 00002ee0 00002f16 000030e8     ........./...0..
    7154:	000030c8 000030c8 00003154 000030da     .0...0..T1...0..
    7164:	000030f6 000030cc 00003104 00003144     .0...0...1..D1..

00007174 <LfnOfs>:
    7174:	07050301 12100e09 1c181614 0000001e     ................

00007184 <excvt.4558>:
    7184:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    7194:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    71a4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    71b4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    71c4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    71d4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    71e4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    71f4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    7204:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    7214:	00005d5b                                []..

00007218 <Tbl>:
    7218:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    7228:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    7238:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    7248:	00d600ff 00f800dc 00d800a3 019200d7     ................
    7258:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    7268:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    7278:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    7288:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    7298:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    72a8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    72b8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    72c8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    72d8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    72e8:	00da00de 00d900db 00dd00fd 00b400af     ................
    72f8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    7308:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00007318 <tbl_lower.4308>:
    7318:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    7328:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    7338:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    7348:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    7358:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    7368:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    7378:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    7388:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    7398:	01050103 01090107 010d010b 0111010f     ................
    73a8:	01150113 01190117 011d011b 0121011f     ..............!.
    73b8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    73c8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    73d8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    73e8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    73f8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7408:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7418:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7428:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7438:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7448:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    7458:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7468:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    7478:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    7488:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    7498:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    74a8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    74b8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    74c8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    74d8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    74e8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000074f8 <tbl_upper.4309>:
    74f8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7508:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7518:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7528:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7538:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7548:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    7558:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7568:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    7578:	01040102 01080106 010c010a 0110010e     ................
    7588:	01140112 01180116 011c011a 0120011e     .............. .
    7598:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    75a8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    75b8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    75c8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    75d8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    75e8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    75f8:	03940393 03960395 03980397 039a0399     ................
    7608:	039c039b 039e039d 03a0039f 03a303a1     ................
    7618:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7628:	04120411 04140413 04160415 04180417     ................
    7638:	041a0419 041c041b 041e041d 0420041f     .............. .
    7648:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    7658:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7668:	04030402 04050404 04070406 04090408     ................
    7678:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    7688:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    7698:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    76a8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    76b8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    76c8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    76d8:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    76e8:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    76f8:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    7708:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    7718:	000d0a2d 61656c50 70206573 2067756c     -...Please plug 
    7728:	53206e61 4d4d2f44 61632043 69206472     an SD/MMC card i
    7738:	6c73206e 0a2e746f 0000000d 64726143     n slot......Card
    7748:	736e6920 6c6c6174 49414620 000d0a4c      install FAIL...
    7758:	61656c50 75206573 756c706e 6e612067     Please unplug an
    7768:	65722064 756c702d 68742067 61632065     d re-plug the ca
    7778:	0a2e6472 0000000d 6e756f4d 69642074     rd......Mount di
    7788:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    7798:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    77a8:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    77b8:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    77c8:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    77d8:	73657420 69662074 2820656c 75705f66      test file (f_pu
    77e8:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    77f8:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    7808:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    7818:	20736920 63637573 66737365 0a2e6c75      is successful..
    7828:	0000000d 6e65704f 20676e69 61726170     ....Opening para
    7838:	632e736d 0a0d7673 00000000 4941465b     ms.csv......[FAI
    7848:	43203a4c 646c756f 746f6e20 65706f20     L: Could not ope
    7858:	6170206e 736d6172 6c696620 72205d65     n params file] r
    7868:	25207365 000a0d64 4941465b 43203a4c     es %d...[FAIL: C
    7878:	646c756f 746f6e20 61657220 61502064     ould not read Pa
    7888:	656d6172 73726574 6c694620 72205d65     rameters File] r
    7898:	25207365 000a0d64 7479425b 72207365     es %d...[Bytes r
    78a8:	20646165 6d6f7266 72617020 2e736d61     ead from params.
    78b8:	3a767363 25205d20 000a0d64 0000002c     csv: ] %d...,...
    78c8:	64616552 20676e69 6d6f7266 72617020     Reading from par
    78d8:	2e736d61 20767363 00000a0d 74747542     ams.csv ....Butt
    78e8:	77206e6f 70207361 73736572 203a6465     on was pressed: 
    78f8:	41445055 474e4954 52494620 5241574d     UPDATING FIRMWAR
    7908:	0a0d2045 00000000 00000031 61647055     E ......1...Upda
    7918:	46206574 2067616c 20736177 3a746573     te Flag was set:
    7928:	44505520 4e495441 49462047 41574d52      UPDATING FIRMWA
    7938:	0d204552 0000000a 52204f4e 4f534145     RE .....NO REASO
    7948:	4f54204e 44505520 20455441 554a203a     N TO UPDATE : JU
    7958:	4e49504d 4f542047 50504120 4143494c     MPING TO APPLICA
    7968:	4e4f4954 000a0d20 61656c50 75206573     TION ...Please u
    7978:	756c706e 68742067 61632065 0a2e6472     nplug the card..
    7988:	0000000d 35455345 2d203631 49584520     ....ESE516 - EXI
    7998:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....
    79a8:	64733a30 636d6d5f 7365745f 78742e74     0:sd_mmc_test.tx
    79b8:	00000074 61726170 632e736d 00007673     t...params.csv..
    79c8:	44414552 20474e49 2e707061 206e6962     READING app.bin 
    79d8:	00000a0d 4941465b 43203a4c 646c756f     ....[FAIL: Could
    79e8:	746f6e20 65706f20 6946206e 61776d72      not open Firmwa
    79f8:	46206572 5d656c69 73657220 0d642520     re File] res %d.
    7a08:	0000000a 20544f47 204d564e 41524150     ....GOT NVM PARA
    7a18:	4554454d 0d205352 0000000a 45474150     METERS .....PAGE
    7a28:	5a495320 53492045 20642520 65747962      SIZE IS %d byte
    7a38:	000a0d73 20574f52 5a495320 53492045     s...ROW  SIZE IS
    7a48:	20642520 65747962 000a0d73 53415245      %d bytes...ERAS
    7a58:	20474e49 4c505041 54414349 204e4f49     ING APPLICATION 
    7a68:	45444f43 000a0d20 4941465b 4e203a4c     CODE ...[FAIL: N
    7a78:	52204d56 4420574f 54454c45 5d4e4f49     VM ROW DELETION]
    7a88:	73657220 0d642520 0000000a 52415453      res %d.....STAR
    7a98:	474e4954 564f4d20 4c422045 534b434f     TING MOVE BLOCKS
    7aa8:	000a0d20 49564f4d 4220474e 4b434f4c      ...MOVING BLOCK
    7ab8:	0a0d2053 00000000 4941465b 43203a4c     S ......[FAIL: C
    7ac8:	646c756f 746f6e20 61657220 6c422064     ould not read Bl
    7ad8:	206b636f 6d6f7266 72694620 7261776d     ock from Firmwar
    7ae8:	69462065 205d656c 20736572 202c6425     e File] res %d, 
    7af8:	65747962 65722073 25206461 000a0d64     bytes read %d...
    7b08:	4941465b 57203a4c 45544952 204e4f20     [FAIL: WRITE ON 
    7b18:	46465542 205d5245 20736572 0a0d6425     BUFFER] res %d..
    7b28:	00000000 4941465b 43203a4c 4f204352     ....[FAIL: CRC O
    7b38:	564e204e 72205d4d 25207365 000a0d64     N NVM] res %d...
    7b48:	4941465b 43203a4c 44204352 4e204449     [FAIL: CRC DID N
    7b58:	4d20544f 48435441 000a0d5d 4941465b     OT MATCH]...[FAI
    7b68:	25203a4c 000a0d64 55544552 4e494e52     L: %d...RETURNIN
    7b78:	52462047 46204d4f 574d5249 20455241     G FROM FIRMWARE 
    7b88:	41445055 0d204554 0000000a 70613a30     UPDATE .....0:ap
    7b98:	69622e70 0000006e                       p.bin...

00007ba0 <_global_impure_ptr>:
    7ba0:	20000010                                ... 

00007ba4 <__sf_fake_stderr>:
	...

00007bc4 <__sf_fake_stdin>:
	...

00007be4 <__sf_fake_stdout>:
	...
    7c04:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    7c14:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    7c24:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    7c34:	37363534 62613938 66656463 20200000              456789abcdef.

00007c41 <_ctype_>:
    7c41:	20202000 20202020 28282020 20282828     .         ((((( 
    7c51:	20202020 20202020 20202020 20202020                     
    7c61:	10108820 10101010 10101010 10101010      ...............
    7c71:	04040410 04040404 10040404 10101010     ................
    7c81:	41411010 41414141 01010101 01010101     ..AAAAAA........
    7c91:	01010101 01010101 01010101 10101010     ................
    7ca1:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7cb1:	02020202 02020202 02020202 10101010     ................
    7cc1:	00000020 00000000 00000000 00000000      ...............
	...

00007d44 <_init>:
    7d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d46:	46c0      	nop			; (mov r8, r8)
    7d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d4a:	bc08      	pop	{r3}
    7d4c:	469e      	mov	lr, r3
    7d4e:	4770      	bx	lr

00007d50 <__init_array_start>:
    7d50:	000000dd 	.word	0x000000dd

00007d54 <_fini>:
    7d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7d5a:	bc08      	pop	{r3}
    7d5c:	469e      	mov	lr, r3
    7d5e:	4770      	bx	lr

00007d60 <__fini_array_start>:
    7d60:	000000b5 	.word	0x000000b5
