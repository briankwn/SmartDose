
SD_MMC_bootloader_EXAMPLE_ESE516.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007928  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00007928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000990  20000070  00007998  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000a00  00008328  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00049166  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d5d  00000000  00000000  00069257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010cca  00000000  00000000  0006ffb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  00080c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001098  00000000  00000000  000817fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002092e  00000000  00000000  00082896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000170e1  00000000  00000000  000a31c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009396c  00000000  00000000  000ba2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002670  00000000  00000000  0014dc14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2a 00 20 45 36 00 00 41 36 00 00 41 36 00 00     .*. E6..A6..A6..
	...
      2c:	41 36 00 00 00 00 00 00 00 00 00 00 41 36 00 00     A6..........A6..
      3c:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
      4c:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
      5c:	41 36 00 00 41 36 00 00 99 20 00 00 a9 20 00 00     A6..A6... ... ..
      6c:	b9 20 00 00 c9 20 00 00 d9 20 00 00 e9 20 00 00     . ... ... ... ..
      7c:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
      8c:	41 36 00 00 41 36 00 00 00 00 00 00 00 00 00 00     A6..A6..........
      9c:	41 36 00 00 41 36 00 00 41 36 00 00 41 36 00 00     A6..A6..A6..A6..
      ac:	41 36 00 00 00 00 00 00                             A6......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00007928 	.word	0x00007928

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00007928 	.word	0x00007928
     10c:	00007928 	.word	0x00007928
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000033d1 	.word	0x000033d1
     140:	000059c1 	.word	0x000059c1
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     184:	ac01      	add	r4, sp, #4
     186:	2501      	movs	r5, #1
     188:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18a:	2700      	movs	r7, #0
     18c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     18e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     190:	0021      	movs	r1, r4
     192:	2017      	movs	r0, #23
     194:	4e06      	ldr	r6, [pc, #24]	; (1b0 <system_board_init+0x30>)
     196:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     198:	2280      	movs	r2, #128	; 0x80
     19a:	0412      	lsls	r2, r2, #16
     19c:	4b05      	ldr	r3, [pc, #20]	; (1b4 <system_board_init+0x34>)
     19e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a4:	0021      	movs	r1, r4
     1a6:	2037      	movs	r0, #55	; 0x37
     1a8:	47b0      	blx	r6
}
     1aa:	b003      	add	sp, #12
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00001ab9 	.word	0x00001ab9
     1b4:	41004400 	.word	0x41004400

000001b8 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     1b8:	b570      	push	{r4, r5, r6, lr}
     1ba:	0004      	movs	r4, r0
     1bc:	000e      	movs	r6, r1
     1be:	0015      	movs	r5, r2
	if (addr & 0x00000003) {
		return STATUS_ERR_BAD_ADDRESS;
     1c0:	2018      	movs	r0, #24
	if (addr & 0x00000003) {
     1c2:	07a3      	lsls	r3, r4, #30
     1c4:	d000      	beq.n	1c8 <dsu_crc32_cal+0x10>
	DSU->STATUSA.reg = DSU_STATUSA_DONE;

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
	system_interrupt_enable_global();
	return STATUS_OK;
     1c6:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ca:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     1ce:	2200      	movs	r2, #0
     1d0:	4b1b      	ldr	r3, [pc, #108]	; (240 <dsu_crc32_cal+0x88>)
     1d2:	701a      	strb	r2, [r3, #0]
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     1d4:	2122      	movs	r1, #34	; 0x22
     1d6:	4249      	negs	r1, r1
     1d8:	3009      	adds	r0, #9
     1da:	4b1a      	ldr	r3, [pc, #104]	; (244 <dsu_crc32_cal+0x8c>)
     1dc:	4798      	blx	r3
	DSU->DATA.reg = *pcrc32;
     1de:	4b1a      	ldr	r3, [pc, #104]	; (248 <dsu_crc32_cal+0x90>)
     1e0:	682a      	ldr	r2, [r5, #0]
     1e2:	60da      	str	r2, [r3, #12]
	DSU->ADDR.reg = addr;
     1e4:	605c      	str	r4, [r3, #4]
	DSU->LENGTH.reg = len;
     1e6:	609e      	str	r6, [r3, #8]
	DSU->CTRL.bit.CRC = 1;
     1e8:	781a      	ldrb	r2, [r3, #0]
     1ea:	2104      	movs	r1, #4
     1ec:	430a      	orrs	r2, r1
     1ee:	701a      	strb	r2, [r3, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     1f0:	0019      	movs	r1, r3
     1f2:	2201      	movs	r2, #1
     1f4:	784b      	ldrb	r3, [r1, #1]
     1f6:	4213      	tst	r3, r2
     1f8:	d0fc      	beq.n	1f4 <dsu_crc32_cal+0x3c>
	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     1fa:	4b13      	ldr	r3, [pc, #76]	; (248 <dsu_crc32_cal+0x90>)
     1fc:	785b      	ldrb	r3, [r3, #1]
     1fe:	075b      	lsls	r3, r3, #29
     200:	d50c      	bpl.n	21c <dsu_crc32_cal+0x64>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     202:	2122      	movs	r1, #34	; 0x22
     204:	4249      	negs	r1, r1
     206:	2021      	movs	r0, #33	; 0x21
     208:	4b10      	ldr	r3, [pc, #64]	; (24c <dsu_crc32_cal+0x94>)
     20a:	4798      	blx	r3
	cpu_irq_enable();
     20c:	2201      	movs	r2, #1
     20e:	4b0c      	ldr	r3, [pc, #48]	; (240 <dsu_crc32_cal+0x88>)
     210:	701a      	strb	r2, [r3, #0]
     212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     216:	b662      	cpsie	i
		return STATUS_ERR_IO;
     218:	2010      	movs	r0, #16
     21a:	e7d4      	b.n	1c6 <dsu_crc32_cal+0xe>
	*pcrc32 = DSU->DATA.reg;
     21c:	4b0a      	ldr	r3, [pc, #40]	; (248 <dsu_crc32_cal+0x90>)
     21e:	68da      	ldr	r2, [r3, #12]
     220:	602a      	str	r2, [r5, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     222:	2401      	movs	r4, #1
     224:	705c      	strb	r4, [r3, #1]
	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     226:	2122      	movs	r1, #34	; 0x22
     228:	4249      	negs	r1, r1
     22a:	2021      	movs	r0, #33	; 0x21
     22c:	4b07      	ldr	r3, [pc, #28]	; (24c <dsu_crc32_cal+0x94>)
     22e:	4798      	blx	r3
     230:	4b03      	ldr	r3, [pc, #12]	; (240 <dsu_crc32_cal+0x88>)
     232:	701c      	strb	r4, [r3, #0]
     234:	f3bf 8f5f 	dmb	sy
     238:	b662      	cpsie	i
	return STATUS_OK;
     23a:	2000      	movs	r0, #0
     23c:	e7c3      	b.n	1c6 <dsu_crc32_cal+0xe>
     23e:	46c0      	nop			; (mov r8, r8)
     240:	20000009 	.word	0x20000009
     244:	000004ad 	.word	0x000004ad
     248:	41002000 	.word	0x41002000
     24c:	0000044d 	.word	0x0000044d

00000250 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     250:	b530      	push	{r4, r5, lr}
     252:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     254:	4a22      	ldr	r2, [pc, #136]	; (2e0 <nvm_execute_command+0x90>)
     256:	8810      	ldrh	r0, [r2, #0]
     258:	8853      	ldrh	r3, [r2, #2]
     25a:	4343      	muls	r3, r0
     25c:	428b      	cmp	r3, r1
     25e:	d206      	bcs.n	26e <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     260:	2280      	movs	r2, #128	; 0x80
     262:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     264:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     266:	4b1f      	ldr	r3, [pc, #124]	; (2e4 <nvm_execute_command+0x94>)
     268:	18cb      	adds	r3, r1, r3
     26a:	4293      	cmp	r3, r2
     26c:	d80e      	bhi.n	28c <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     26e:	4b1e      	ldr	r3, [pc, #120]	; (2e8 <nvm_execute_command+0x98>)
     270:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     272:	2280      	movs	r2, #128	; 0x80
     274:	02d2      	lsls	r2, r2, #11
     276:	432a      	orrs	r2, r5
     278:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     27a:	2220      	movs	r2, #32
     27c:	32ff      	adds	r2, #255	; 0xff
     27e:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     280:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     282:	07db      	lsls	r3, r3, #31
     284:	d403      	bmi.n	28e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     286:	4b18      	ldr	r3, [pc, #96]	; (2e8 <nvm_execute_command+0x98>)
     288:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     28a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     28c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     28e:	2c45      	cmp	r4, #69	; 0x45
     290:	d822      	bhi.n	2d8 <nvm_execute_command+0x88>
     292:	00a3      	lsls	r3, r4, #2
     294:	4a15      	ldr	r2, [pc, #84]	; (2ec <nvm_execute_command+0x9c>)
     296:	58d3      	ldr	r3, [r2, r3]
     298:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     29a:	4b13      	ldr	r3, [pc, #76]	; (2e8 <nvm_execute_command+0x98>)
     29c:	8b1b      	ldrh	r3, [r3, #24]
     29e:	05db      	lsls	r3, r3, #23
     2a0:	d503      	bpl.n	2aa <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     2a2:	4b11      	ldr	r3, [pc, #68]	; (2e8 <nvm_execute_command+0x98>)
     2a4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     2a6:	2010      	movs	r0, #16
     2a8:	e7f0      	b.n	28c <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2aa:	0889      	lsrs	r1, r1, #2
     2ac:	0049      	lsls	r1, r1, #1
     2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <nvm_execute_command+0x98>)
     2b0:	61d9      	str	r1, [r3, #28]
			break;
     2b2:	e003      	b.n	2bc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2b4:	0889      	lsrs	r1, r1, #2
     2b6:	0049      	lsls	r1, r1, #1
     2b8:	4b0b      	ldr	r3, [pc, #44]	; (2e8 <nvm_execute_command+0x98>)
     2ba:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     2bc:	20a5      	movs	r0, #165	; 0xa5
     2be:	0200      	lsls	r0, r0, #8
     2c0:	4304      	orrs	r4, r0
     2c2:	4b09      	ldr	r3, [pc, #36]	; (2e8 <nvm_execute_command+0x98>)
     2c4:	801c      	strh	r4, [r3, #0]
     2c6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     2c8:	2201      	movs	r2, #1
     2ca:	7d0b      	ldrb	r3, [r1, #20]
     2cc:	4213      	tst	r3, r2
     2ce:	d0fc      	beq.n	2ca <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     2d0:	4b05      	ldr	r3, [pc, #20]	; (2e8 <nvm_execute_command+0x98>)
     2d2:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     2d4:	2000      	movs	r0, #0
     2d6:	e7d9      	b.n	28c <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     2d8:	4b03      	ldr	r3, [pc, #12]	; (2e8 <nvm_execute_command+0x98>)
     2da:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     2dc:	2017      	movs	r0, #23
     2de:	e7d5      	b.n	28c <nvm_execute_command+0x3c>
     2e0:	2000008c 	.word	0x2000008c
     2e4:	ff7fc000 	.word	0xff7fc000
     2e8:	41004000 	.word	0x41004000
     2ec:	00006cb0 	.word	0x00006cb0

000002f0 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     2f2:	4b25      	ldr	r3, [pc, #148]	; (388 <nvm_write_buffer+0x98>)
     2f4:	881d      	ldrh	r5, [r3, #0]
     2f6:	885b      	ldrh	r3, [r3, #2]
     2f8:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     2fa:	2418      	movs	r4, #24
	if (destination_address >
     2fc:	4283      	cmp	r3, r0
     2fe:	d201      	bcs.n	304 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     300:	0020      	movs	r0, r4
     302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     304:	1e6b      	subs	r3, r5, #1
     306:	4218      	tst	r0, r3
     308:	d1fa      	bne.n	300 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     30a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     30c:	4295      	cmp	r5, r2
     30e:	d3f7      	bcc.n	300 <nvm_write_buffer+0x10>
     310:	4b1e      	ldr	r3, [pc, #120]	; (38c <nvm_write_buffer+0x9c>)
     312:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     314:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     316:	07db      	lsls	r3, r3, #31
     318:	d5f2      	bpl.n	300 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     31a:	4c1d      	ldr	r4, [pc, #116]	; (390 <nvm_write_buffer+0xa0>)
     31c:	4b1b      	ldr	r3, [pc, #108]	; (38c <nvm_write_buffer+0x9c>)
     31e:	801c      	strh	r4, [r3, #0]
     320:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     322:	2401      	movs	r4, #1
     324:	7d2b      	ldrb	r3, [r5, #20]
     326:	4223      	tst	r3, r4
     328:	d0fc      	beq.n	324 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     32a:	2420      	movs	r4, #32
     32c:	34ff      	adds	r4, #255	; 0xff
     32e:	4b17      	ldr	r3, [pc, #92]	; (38c <nvm_write_buffer+0x9c>)
     330:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     332:	2a00      	cmp	r2, #0
     334:	d022      	beq.n	37c <nvm_write_buffer+0x8c>
     336:	2301      	movs	r3, #1
     338:	0005      	movs	r5, r0
     33a:	439d      	bics	r5, r3
     33c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     33e:	1e57      	subs	r7, r2, #1
     340:	e009      	b.n	356 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     342:	18ce      	adds	r6, r1, r3
     344:	7876      	ldrb	r6, [r6, #1]
     346:	0236      	lsls	r6, r6, #8
     348:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     34a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     34c:	3302      	adds	r3, #2
     34e:	b29b      	uxth	r3, r3
     350:	3502      	adds	r5, #2
     352:	429a      	cmp	r2, r3
     354:	d904      	bls.n	360 <nvm_write_buffer+0x70>
		data = buffer[i];
     356:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     358:	42bb      	cmp	r3, r7
     35a:	dbf2      	blt.n	342 <nvm_write_buffer+0x52>
		data = buffer[i];
     35c:	b2a4      	uxth	r4, r4
     35e:	e7f4      	b.n	34a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <nvm_write_buffer+0x98>)
     362:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     364:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     366:	2b00      	cmp	r3, #0
     368:	d1ca      	bne.n	300 <nvm_write_buffer+0x10>
     36a:	2a3f      	cmp	r2, #63	; 0x3f
     36c:	d8c8      	bhi.n	300 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     36e:	2200      	movs	r2, #0
     370:	0001      	movs	r1, r0
     372:	2004      	movs	r0, #4
     374:	4b07      	ldr	r3, [pc, #28]	; (394 <nvm_write_buffer+0xa4>)
     376:	4798      	blx	r3
     378:	0004      	movs	r4, r0
     37a:	e7c1      	b.n	300 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     37c:	4b02      	ldr	r3, [pc, #8]	; (388 <nvm_write_buffer+0x98>)
     37e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     380:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     382:	2b00      	cmp	r3, #0
     384:	d0f3      	beq.n	36e <nvm_write_buffer+0x7e>
     386:	e7bb      	b.n	300 <nvm_write_buffer+0x10>
     388:	2000008c 	.word	0x2000008c
     38c:	41004000 	.word	0x41004000
     390:	ffffa544 	.word	0xffffa544
     394:	00000251 	.word	0x00000251

00000398 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     398:	4b13      	ldr	r3, [pc, #76]	; (3e8 <nvm_erase_row+0x50>)
     39a:	881a      	ldrh	r2, [r3, #0]
     39c:	885b      	ldrh	r3, [r3, #2]
     39e:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     3a0:	2118      	movs	r1, #24
	if (row_address >
     3a2:	4283      	cmp	r3, r0
     3a4:	d201      	bcs.n	3aa <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     3a6:	0008      	movs	r0, r1
     3a8:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     3aa:	0092      	lsls	r2, r2, #2
     3ac:	3a01      	subs	r2, #1
     3ae:	4210      	tst	r0, r2
     3b0:	d1f9      	bne.n	3a6 <nvm_erase_row+0xe>
     3b2:	4b0e      	ldr	r3, [pc, #56]	; (3ec <nvm_erase_row+0x54>)
     3b4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3b6:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     3b8:	07db      	lsls	r3, r3, #31
     3ba:	d5f4      	bpl.n	3a6 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3bc:	4b0b      	ldr	r3, [pc, #44]	; (3ec <nvm_erase_row+0x54>)
     3be:	2220      	movs	r2, #32
     3c0:	32ff      	adds	r2, #255	; 0xff
     3c2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     3c4:	0880      	lsrs	r0, r0, #2
     3c6:	0040      	lsls	r0, r0, #1
     3c8:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     3ca:	4a09      	ldr	r2, [pc, #36]	; (3f0 <nvm_erase_row+0x58>)
     3cc:	801a      	strh	r2, [r3, #0]
     3ce:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     3d0:	2201      	movs	r2, #1
     3d2:	7d0b      	ldrb	r3, [r1, #20]
     3d4:	4213      	tst	r3, r2
     3d6:	d0fc      	beq.n	3d2 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     3d8:	4b04      	ldr	r3, [pc, #16]	; (3ec <nvm_erase_row+0x54>)
     3da:	8b19      	ldrh	r1, [r3, #24]
     3dc:	201c      	movs	r0, #28
     3de:	4001      	ands	r1, r0
	return STATUS_OK;
     3e0:	1e48      	subs	r0, r1, #1
     3e2:	4181      	sbcs	r1, r0
     3e4:	0089      	lsls	r1, r1, #2
     3e6:	e7de      	b.n	3a6 <nvm_erase_row+0xe>
     3e8:	2000008c 	.word	0x2000008c
     3ec:	41004000 	.word	0x41004000
     3f0:	ffffa502 	.word	0xffffa502

000003f4 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3f4:	4b13      	ldr	r3, [pc, #76]	; (444 <nvm_get_parameters+0x50>)
     3f6:	2220      	movs	r2, #32
     3f8:	32ff      	adds	r2, #255	; 0xff
     3fa:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     3fc:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     3fe:	034a      	lsls	r2, r1, #13
     400:	0f52      	lsrs	r2, r2, #29
     402:	2308      	movs	r3, #8
     404:	4093      	lsls	r3, r2
	parameters->page_size =
     406:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     408:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     40a:	4b0f      	ldr	r3, [pc, #60]	; (448 <nvm_get_parameters+0x54>)
     40c:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     40e:	065b      	lsls	r3, r3, #25
     410:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     412:	2b07      	cmp	r3, #7
     414:	d010      	beq.n	438 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     416:	2206      	movs	r2, #6
     418:	1ad2      	subs	r2, r2, r3
     41a:	2304      	movs	r3, #4
     41c:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     41e:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     420:	4b09      	ldr	r3, [pc, #36]	; (448 <nvm_get_parameters+0x54>)
     422:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     424:	2207      	movs	r2, #7
     426:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     428:	2b07      	cmp	r3, #7
     42a:	d008      	beq.n	43e <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     42c:	2207      	movs	r2, #7
     42e:	1ad2      	subs	r2, r2, r3
     430:	2304      	movs	r3, #4
     432:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     434:	6083      	str	r3, [r0, #8]
	}
}
     436:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     438:	2300      	movs	r3, #0
     43a:	6043      	str	r3, [r0, #4]
     43c:	e7f0      	b.n	420 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
     43e:	2300      	movs	r3, #0
     440:	6083      	str	r3, [r0, #8]
     442:	e7f8      	b.n	436 <nvm_get_parameters+0x42>
     444:	41004000 	.word	0x41004000
     448:	00804000 	.word	0x00804000

0000044c <system_peripheral_lock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     44c:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     44e:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     450:	428a      	cmp	r2, r1
     452:	d001      	beq.n	458 <system_peripheral_lock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     454:	0018      	movs	r0, r3
     456:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     458:	3308      	adds	r3, #8
     45a:	4003      	ands	r3, r0
	switch (register_pos) {
     45c:	04c0      	lsls	r0, r0, #19
     45e:	0e00      	lsrs	r0, r0, #24
     460:	2801      	cmp	r0, #1
     462:	d00d      	beq.n	480 <system_peripheral_lock+0x34>
     464:	2800      	cmp	r0, #0
     466:	d003      	beq.n	470 <system_peripheral_lock+0x24>
     468:	2802      	cmp	r0, #2
     46a:	d011      	beq.n	490 <system_peripheral_lock+0x44>
			return STATUS_ERR_INVALID_ARG;
     46c:	2317      	movs	r3, #23
     46e:	e7f1      	b.n	454 <system_peripheral_lock+0x8>
			PAC0->WPSET.reg = (1 << register_bit_pos);
     470:	2201      	movs	r2, #1
     472:	409a      	lsls	r2, r3
     474:	0013      	movs	r3, r2
     476:	2280      	movs	r2, #128	; 0x80
     478:	05d2      	lsls	r2, r2, #23
     47a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     47c:	2300      	movs	r3, #0
			break;
     47e:	e7e9      	b.n	454 <system_peripheral_lock+0x8>
			PAC1->WPSET.reg = (1 << register_bit_pos);
     480:	2201      	movs	r2, #1
     482:	409a      	lsls	r2, r3
     484:	0013      	movs	r3, r2
     486:	2282      	movs	r2, #130	; 0x82
     488:	05d2      	lsls	r2, r2, #23
     48a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     48c:	2300      	movs	r3, #0
			break;
     48e:	e7e1      	b.n	454 <system_peripheral_lock+0x8>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     490:	4805      	ldr	r0, [pc, #20]	; (4a8 <system_peripheral_lock+0x5c>)
     492:	6a01      	ldr	r1, [r0, #32]
     494:	2201      	movs	r2, #1
     496:	4311      	orrs	r1, r2
     498:	6201      	str	r1, [r0, #32]
			PAC2->WPSET.reg = (1 << register_bit_pos);
     49a:	409a      	lsls	r2, r3
     49c:	2384      	movs	r3, #132	; 0x84
     49e:	05db      	lsls	r3, r3, #23
     4a0:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
     4a2:	2300      	movs	r3, #0
			break;
     4a4:	e7d6      	b.n	454 <system_peripheral_lock+0x8>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	40000400 	.word	0x40000400

000004ac <system_peripheral_unlock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     4ac:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4ae:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     4b0:	428a      	cmp	r2, r1
     4b2:	d001      	beq.n	4b8 <system_peripheral_unlock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     4b4:	0018      	movs	r0, r3
     4b6:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     4b8:	3308      	adds	r3, #8
     4ba:	4003      	ands	r3, r0
	switch (register_pos) {
     4bc:	04c0      	lsls	r0, r0, #19
     4be:	0e00      	lsrs	r0, r0, #24
     4c0:	2801      	cmp	r0, #1
     4c2:	d00d      	beq.n	4e0 <system_peripheral_unlock+0x34>
     4c4:	2800      	cmp	r0, #0
     4c6:	d003      	beq.n	4d0 <system_peripheral_unlock+0x24>
     4c8:	2802      	cmp	r0, #2
     4ca:	d011      	beq.n	4f0 <system_peripheral_unlock+0x44>
			return STATUS_ERR_INVALID_ARG;
     4cc:	2317      	movs	r3, #23
     4ce:	e7f1      	b.n	4b4 <system_peripheral_unlock+0x8>
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     4d0:	2201      	movs	r2, #1
     4d2:	409a      	lsls	r2, r3
     4d4:	0013      	movs	r3, r2
     4d6:	2280      	movs	r2, #128	; 0x80
     4d8:	05d2      	lsls	r2, r2, #23
     4da:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     4dc:	2300      	movs	r3, #0
			break;
     4de:	e7e9      	b.n	4b4 <system_peripheral_unlock+0x8>
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     4e0:	2201      	movs	r2, #1
     4e2:	409a      	lsls	r2, r3
     4e4:	0013      	movs	r3, r2
     4e6:	2282      	movs	r2, #130	; 0x82
     4e8:	05d2      	lsls	r2, r2, #23
     4ea:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     4ec:	2300      	movs	r3, #0
			break;
     4ee:	e7e1      	b.n	4b4 <system_peripheral_unlock+0x8>
     4f0:	4805      	ldr	r0, [pc, #20]	; (508 <system_peripheral_unlock+0x5c>)
     4f2:	6a01      	ldr	r1, [r0, #32]
     4f4:	2201      	movs	r2, #1
     4f6:	4311      	orrs	r1, r2
     4f8:	6201      	str	r1, [r0, #32]
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     4fa:	409a      	lsls	r2, r3
     4fc:	2384      	movs	r3, #132	; 0x84
     4fe:	05db      	lsls	r3, r3, #23
     500:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
     502:	2300      	movs	r3, #0
			break;
     504:	e7d6      	b.n	4b4 <system_peripheral_unlock+0x8>
     506:	46c0      	nop			; (mov r8, r8)
     508:	40000400 	.word	0x40000400

0000050c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     50c:	b510      	push	{r4, lr}
     50e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     510:	7c03      	ldrb	r3, [r0, #16]
     512:	2b00      	cmp	r3, #0
     514:	d005      	beq.n	522 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     516:	6883      	ldr	r3, [r0, #8]
     518:	1c58      	adds	r0, r3, #1
     51a:	68e1      	ldr	r1, [r4, #12]
     51c:	4b07      	ldr	r3, [pc, #28]	; (53c <advance_pointer+0x30>)
     51e:	4798      	blx	r3
     520:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     522:	6863      	ldr	r3, [r4, #4]
     524:	1c58      	adds	r0, r3, #1
     526:	68e1      	ldr	r1, [r4, #12]
     528:	4b04      	ldr	r3, [pc, #16]	; (53c <advance_pointer+0x30>)
     52a:	4798      	blx	r3
     52c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     52e:	68a3      	ldr	r3, [r4, #8]
     530:	1a59      	subs	r1, r3, r1
     532:	424a      	negs	r2, r1
     534:	414a      	adcs	r2, r1
     536:	7422      	strb	r2, [r4, #16]
 }
     538:	bd10      	pop	{r4, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	00005acd 	.word	0x00005acd

00000540 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     540:	b570      	push	{r4, r5, r6, lr}
     542:	0005      	movs	r5, r0
     544:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     546:	2014      	movs	r0, #20
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <circular_buf_init+0x1c>)
     54a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     54c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     54e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     550:	2300      	movs	r3, #0
     552:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     554:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     556:	7403      	strb	r3, [r0, #16]
 }
     558:	bd70      	pop	{r4, r5, r6, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00005d49 	.word	0x00005d49

00000560 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     560:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     562:	6803      	ldr	r3, [r0, #0]
     564:	6842      	ldr	r2, [r0, #4]
     566:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     568:	4b01      	ldr	r3, [pc, #4]	; (570 <circular_buf_put+0x10>)
     56a:	4798      	blx	r3
 }
     56c:	bd10      	pop	{r4, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	0000050d 	.word	0x0000050d

00000574 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     574:	7c02      	ldrb	r2, [r0, #16]
     576:	2300      	movs	r3, #0
     578:	2a00      	cmp	r2, #0
     57a:	d105      	bne.n	588 <circular_buf_empty+0x14>
     57c:	6843      	ldr	r3, [r0, #4]
     57e:	6880      	ldr	r0, [r0, #8]
     580:	1a1b      	subs	r3, r3, r0
     582:	4258      	negs	r0, r3
     584:	4143      	adcs	r3, r0
     586:	b2db      	uxtb	r3, r3
     588:	0018      	movs	r0, r3
 }
     58a:	4770      	bx	lr

0000058c <circular_buf_get>:
 {
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	0004      	movs	r4, r0
     590:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <circular_buf_get+0x30>)
     594:	4798      	blx	r3
     596:	2800      	cmp	r0, #0
     598:	d10d      	bne.n	5b6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     59a:	6823      	ldr	r3, [r4, #0]
     59c:	68a2      	ldr	r2, [r4, #8]
     59e:	5c9b      	ldrb	r3, [r3, r2]
     5a0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     5a2:	2300      	movs	r3, #0
     5a4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     5a6:	68a3      	ldr	r3, [r4, #8]
     5a8:	1c58      	adds	r0, r3, #1
     5aa:	68e1      	ldr	r1, [r4, #12]
     5ac:	4b04      	ldr	r3, [pc, #16]	; (5c0 <circular_buf_get+0x34>)
     5ae:	4798      	blx	r3
     5b0:	60a1      	str	r1, [r4, #8]
		 r = 0;
     5b2:	2000      	movs	r0, #0
 }
     5b4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     5b6:	2001      	movs	r0, #1
     5b8:	4240      	negs	r0, r0
	 return r;
     5ba:	e7fb      	b.n	5b4 <circular_buf_get+0x28>
     5bc:	00000575 	.word	0x00000575
     5c0:	00005acd 	.word	0x00005acd

000005c4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	0005      	movs	r5, r0
     5ca:	000e      	movs	r6, r1
	uint16_t temp = 0;
     5cc:	2200      	movs	r2, #0
     5ce:	466b      	mov	r3, sp
     5d0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     5d2:	4c06      	ldr	r4, [pc, #24]	; (5ec <usart_serial_getchar+0x28>)
     5d4:	466b      	mov	r3, sp
     5d6:	1d99      	adds	r1, r3, #6
     5d8:	0028      	movs	r0, r5
     5da:	47a0      	blx	r4
     5dc:	2800      	cmp	r0, #0
     5de:	d1f9      	bne.n	5d4 <usart_serial_getchar+0x10>

	*c = temp;
     5e0:	466b      	mov	r3, sp
     5e2:	3306      	adds	r3, #6
     5e4:	881b      	ldrh	r3, [r3, #0]
     5e6:	7033      	strb	r3, [r6, #0]
}
     5e8:	b002      	add	sp, #8
     5ea:	bd70      	pop	{r4, r5, r6, pc}
     5ec:	00002ba9 	.word	0x00002ba9

000005f0 <usart_serial_putchar>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     5f4:	b28c      	uxth	r4, r1
     5f6:	4e03      	ldr	r6, [pc, #12]	; (604 <usart_serial_putchar+0x14>)
     5f8:	0021      	movs	r1, r4
     5fa:	0028      	movs	r0, r5
     5fc:	47b0      	blx	r6
     5fe:	2800      	cmp	r0, #0
     600:	d1fa      	bne.n	5f8 <usart_serial_putchar+0x8>
}
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	00002b7d 	.word	0x00002b7d

00000608 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     608:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <usart_write_callback+0x1c>)
     60c:	6818      	ldr	r0, [r3, #0]
     60e:	4906      	ldr	r1, [pc, #24]	; (628 <usart_write_callback+0x20>)
     610:	4b06      	ldr	r3, [pc, #24]	; (62c <usart_write_callback+0x24>)
     612:	4798      	blx	r3
     614:	1c43      	adds	r3, r0, #1
     616:	d004      	beq.n	622 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     618:	2201      	movs	r2, #1
     61a:	4903      	ldr	r1, [pc, #12]	; (628 <usart_write_callback+0x20>)
     61c:	4804      	ldr	r0, [pc, #16]	; (630 <usart_write_callback+0x28>)
     61e:	4b05      	ldr	r3, [pc, #20]	; (634 <usart_write_callback+0x2c>)
     620:	4798      	blx	r3
	}
	
}
     622:	bd10      	pop	{r4, pc}
     624:	200009c4 	.word	0x200009c4
     628:	200009c0 	.word	0x200009c0
     62c:	0000058d 	.word	0x0000058d
     630:	20000184 	.word	0x20000184
     634:	00002cbd 	.word	0x00002cbd

00000638 <InitializeSerialConsole>:
{
     638:	b570      	push	{r4, r5, r6, lr}
     63a:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     63c:	2580      	movs	r5, #128	; 0x80
     63e:	00ed      	lsls	r5, r5, #3
     640:	0029      	movs	r1, r5
     642:	483f      	ldr	r0, [pc, #252]	; (740 <InitializeSerialConsole+0x108>)
     644:	4c3f      	ldr	r4, [pc, #252]	; (744 <InitializeSerialConsole+0x10c>)
     646:	47a0      	blx	r4
     648:	4b3f      	ldr	r3, [pc, #252]	; (748 <InitializeSerialConsole+0x110>)
     64a:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     64c:	0029      	movs	r1, r5
     64e:	483f      	ldr	r0, [pc, #252]	; (74c <InitializeSerialConsole+0x114>)
     650:	47a0      	blx	r4
     652:	4b3f      	ldr	r3, [pc, #252]	; (750 <InitializeSerialConsole+0x118>)
     654:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     656:	2380      	movs	r3, #128	; 0x80
     658:	05db      	lsls	r3, r3, #23
     65a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     65c:	2300      	movs	r3, #0
     65e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     660:	22ff      	movs	r2, #255	; 0xff
     662:	4669      	mov	r1, sp
     664:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     666:	2200      	movs	r2, #0
     668:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     66a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     66c:	2101      	movs	r1, #1
     66e:	2024      	movs	r0, #36	; 0x24
     670:	466c      	mov	r4, sp
     672:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     674:	3001      	adds	r0, #1
     676:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     678:	3125      	adds	r1, #37	; 0x25
     67a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     67c:	3101      	adds	r1, #1
     67e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     680:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     682:	3105      	adds	r1, #5
     684:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     686:	3101      	adds	r1, #1
     688:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     68a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     68c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     68e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     690:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     692:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     694:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     696:	2313      	movs	r3, #19
     698:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     69a:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     69c:	23e1      	movs	r3, #225	; 0xe1
     69e:	025b      	lsls	r3, r3, #9
     6a0:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     6a2:	23c4      	movs	r3, #196	; 0xc4
     6a4:	039b      	lsls	r3, r3, #14
     6a6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     6a8:	2301      	movs	r3, #1
     6aa:	425b      	negs	r3, r3
     6ac:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     6ae:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     6b0:	4b28      	ldr	r3, [pc, #160]	; (754 <InitializeSerialConsole+0x11c>)
     6b2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     6b4:	4b28      	ldr	r3, [pc, #160]	; (758 <InitializeSerialConsole+0x120>)
     6b6:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     6b8:	4d28      	ldr	r5, [pc, #160]	; (75c <InitializeSerialConsole+0x124>)
     6ba:	4c29      	ldr	r4, [pc, #164]	; (760 <InitializeSerialConsole+0x128>)
     6bc:	466a      	mov	r2, sp
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <InitializeSerialConsole+0x12c>)
     6c0:	0028      	movs	r0, r5
     6c2:	47a0      	blx	r4
     6c4:	2800      	cmp	r0, #0
     6c6:	d1f9      	bne.n	6bc <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     6c8:	4d24      	ldr	r5, [pc, #144]	; (75c <InitializeSerialConsole+0x124>)
     6ca:	4b27      	ldr	r3, [pc, #156]	; (768 <InitializeSerialConsole+0x130>)
     6cc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     6ce:	4a27      	ldr	r2, [pc, #156]	; (76c <InitializeSerialConsole+0x134>)
     6d0:	4b27      	ldr	r3, [pc, #156]	; (770 <InitializeSerialConsole+0x138>)
     6d2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6d4:	4a27      	ldr	r2, [pc, #156]	; (774 <InitializeSerialConsole+0x13c>)
     6d6:	4b28      	ldr	r3, [pc, #160]	; (778 <InitializeSerialConsole+0x140>)
     6d8:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6da:	4e28      	ldr	r6, [pc, #160]	; (77c <InitializeSerialConsole+0x144>)
     6dc:	6833      	ldr	r3, [r6, #0]
     6de:	6898      	ldr	r0, [r3, #8]
     6e0:	2100      	movs	r1, #0
     6e2:	4c27      	ldr	r4, [pc, #156]	; (780 <InitializeSerialConsole+0x148>)
     6e4:	47a0      	blx	r4
	setbuf(stdin, NULL);
     6e6:	6833      	ldr	r3, [r6, #0]
     6e8:	6858      	ldr	r0, [r3, #4]
     6ea:	2100      	movs	r1, #0
     6ec:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6ee:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     6f0:	0020      	movs	r0, r4
     6f2:	4b24      	ldr	r3, [pc, #144]	; (784 <InitializeSerialConsole+0x14c>)
     6f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6f6:	231f      	movs	r3, #31
     6f8:	4018      	ands	r0, r3
     6fa:	3b1e      	subs	r3, #30
     6fc:	4083      	lsls	r3, r0
     6fe:	4a22      	ldr	r2, [pc, #136]	; (788 <InitializeSerialConsole+0x150>)
     700:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     702:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     704:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     706:	2b00      	cmp	r3, #0
     708:	d1fc      	bne.n	704 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     70a:	6823      	ldr	r3, [r4, #0]
     70c:	2202      	movs	r2, #2
     70e:	4313      	orrs	r3, r2
     710:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     712:	4c12      	ldr	r4, [pc, #72]	; (75c <InitializeSerialConsole+0x124>)
     714:	2200      	movs	r2, #0
     716:	491d      	ldr	r1, [pc, #116]	; (78c <InitializeSerialConsole+0x154>)
     718:	0020      	movs	r0, r4
     71a:	4d1d      	ldr	r5, [pc, #116]	; (790 <InitializeSerialConsole+0x158>)
     71c:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     71e:	2201      	movs	r2, #1
     720:	491c      	ldr	r1, [pc, #112]	; (794 <InitializeSerialConsole+0x15c>)
     722:	0020      	movs	r0, r4
     724:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     726:	2231      	movs	r2, #49	; 0x31
     728:	5ca3      	ldrb	r3, [r4, r2]
     72a:	2103      	movs	r1, #3
     72c:	430b      	orrs	r3, r1
     72e:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     730:	3a30      	subs	r2, #48	; 0x30
     732:	4919      	ldr	r1, [pc, #100]	; (798 <InitializeSerialConsole+0x160>)
     734:	0020      	movs	r0, r4
     736:	4b19      	ldr	r3, [pc, #100]	; (79c <InitializeSerialConsole+0x164>)
     738:	4798      	blx	r3
}
     73a:	b010      	add	sp, #64	; 0x40
     73c:	bd70      	pop	{r4, r5, r6, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	200005c0 	.word	0x200005c0
     744:	00000541 	.word	0x00000541
     748:	200001b8 	.word	0x200001b8
     74c:	200001c0 	.word	0x200001c0
     750:	200009c4 	.word	0x200009c4
     754:	002a0003 	.word	0x002a0003
     758:	002b0003 	.word	0x002b0003
     75c:	20000184 	.word	0x20000184
     760:	00002839 	.word	0x00002839
     764:	42001800 	.word	0x42001800
     768:	200009f0 	.word	0x200009f0
     76c:	000005f1 	.word	0x000005f1
     770:	200009ec 	.word	0x200009ec
     774:	000005c5 	.word	0x000005c5
     778:	200009e8 	.word	0x200009e8
     77c:	2000000c 	.word	0x2000000c
     780:	00005ee1 	.word	0x00005ee1
     784:	00002069 	.word	0x00002069
     788:	e000e100 	.word	0xe000e100
     78c:	00000609 	.word	0x00000609
     790:	00002ca5 	.word	0x00002ca5
     794:	0000084d 	.word	0x0000084d
     798:	200001bc 	.word	0x200001bc
     79c:	00002cdd 	.word	0x00002cdd

000007a0 <DeinitializeSerialConsole>:
{
     7a0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7a2:	4d0a      	ldr	r5, [pc, #40]	; (7cc <DeinitializeSerialConsole+0x2c>)
     7a4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7a6:	0020      	movs	r0, r4
     7a8:	4b09      	ldr	r3, [pc, #36]	; (7d0 <DeinitializeSerialConsole+0x30>)
     7aa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     7ac:	231f      	movs	r3, #31
     7ae:	4018      	ands	r0, r3
     7b0:	3b1e      	subs	r3, #30
     7b2:	4083      	lsls	r3, r0
     7b4:	2280      	movs	r2, #128	; 0x80
     7b6:	4907      	ldr	r1, [pc, #28]	; (7d4 <DeinitializeSerialConsole+0x34>)
     7b8:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7ba:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     7bc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7be:	2b00      	cmp	r3, #0
     7c0:	d1fc      	bne.n	7bc <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     7c2:	6823      	ldr	r3, [r4, #0]
     7c4:	2202      	movs	r2, #2
     7c6:	4393      	bics	r3, r2
     7c8:	6023      	str	r3, [r4, #0]
}
     7ca:	bd70      	pop	{r4, r5, r6, pc}
     7cc:	20000184 	.word	0x20000184
     7d0:	00002069 	.word	0x00002069
     7d4:	e000e100 	.word	0xe000e100

000007d8 <SerialConsoleWriteString>:
{
     7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7da:	46c6      	mov	lr, r8
     7dc:	b500      	push	{lr}
     7de:	0005      	movs	r5, r0
     7e0:	2400      	movs	r4, #0
	if(string != NULL)
     7e2:	2800      	cmp	r0, #0
     7e4:	d012      	beq.n	80c <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     7e6:	4e11      	ldr	r6, [pc, #68]	; (82c <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     7e8:	4f11      	ldr	r7, [pc, #68]	; (830 <SerialConsoleWriteString+0x58>)
     7ea:	4b12      	ldr	r3, [pc, #72]	; (834 <SerialConsoleWriteString+0x5c>)
     7ec:	4698      	mov	r8, r3
     7ee:	e003      	b.n	7f8 <SerialConsoleWriteString+0x20>
     7f0:	5d29      	ldrb	r1, [r5, r4]
     7f2:	6838      	ldr	r0, [r7, #0]
     7f4:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     7f6:	3401      	adds	r4, #1
     7f8:	0028      	movs	r0, r5
     7fa:	47b0      	blx	r6
     7fc:	4284      	cmp	r4, r0
     7fe:	d3f7      	bcc.n	7f0 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     800:	2101      	movs	r1, #1
     802:	480d      	ldr	r0, [pc, #52]	; (838 <SerialConsoleWriteString+0x60>)
     804:	4b0d      	ldr	r3, [pc, #52]	; (83c <SerialConsoleWriteString+0x64>)
     806:	4798      	blx	r3
     808:	2800      	cmp	r0, #0
     80a:	d002      	beq.n	812 <SerialConsoleWriteString+0x3a>
}
     80c:	bc04      	pop	{r2}
     80e:	4690      	mov	r8, r2
     810:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     812:	4c0b      	ldr	r4, [pc, #44]	; (840 <SerialConsoleWriteString+0x68>)
     814:	4b06      	ldr	r3, [pc, #24]	; (830 <SerialConsoleWriteString+0x58>)
     816:	6818      	ldr	r0, [r3, #0]
     818:	0021      	movs	r1, r4
     81a:	4b0a      	ldr	r3, [pc, #40]	; (844 <SerialConsoleWriteString+0x6c>)
     81c:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     81e:	2201      	movs	r2, #1
     820:	0021      	movs	r1, r4
     822:	4805      	ldr	r0, [pc, #20]	; (838 <SerialConsoleWriteString+0x60>)
     824:	4b08      	ldr	r3, [pc, #32]	; (848 <SerialConsoleWriteString+0x70>)
     826:	4798      	blx	r3
}
     828:	e7f0      	b.n	80c <SerialConsoleWriteString+0x34>
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	00006061 	.word	0x00006061
     830:	200009c4 	.word	0x200009c4
     834:	00000561 	.word	0x00000561
     838:	20000184 	.word	0x20000184
     83c:	00002cfd 	.word	0x00002cfd
     840:	200009c0 	.word	0x200009c0
     844:	0000058d 	.word	0x0000058d
     848:	00002cbd 	.word	0x00002cbd

0000084c <usart_read_callback>:
{
     84c:	b510      	push	{r4, lr}
     84e:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     850:	4c0d      	ldr	r4, [pc, #52]	; (888 <usart_read_callback+0x3c>)
     852:	0020      	movs	r0, r4
     854:	4b0d      	ldr	r3, [pc, #52]	; (88c <usart_read_callback+0x40>)
     856:	4798      	blx	r3
	if(latestRx == 0x08)
     858:	7823      	ldrb	r3, [r4, #0]
     85a:	2b08      	cmp	r3, #8
     85c:	d00c      	beq.n	878 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     85e:	4c0a      	ldr	r4, [pc, #40]	; (888 <usart_read_callback+0x3c>)
     860:	7821      	ldrb	r1, [r4, #0]
     862:	4b0b      	ldr	r3, [pc, #44]	; (890 <usart_read_callback+0x44>)
     864:	6818      	ldr	r0, [r3, #0]
     866:	4b0b      	ldr	r3, [pc, #44]	; (894 <usart_read_callback+0x48>)
     868:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     86a:	2201      	movs	r2, #1
     86c:	0021      	movs	r1, r4
     86e:	480a      	ldr	r0, [pc, #40]	; (898 <usart_read_callback+0x4c>)
     870:	4b0a      	ldr	r3, [pc, #40]	; (89c <usart_read_callback+0x50>)
     872:	4798      	blx	r3
}
     874:	b002      	add	sp, #8
     876:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     878:	a801      	add	r0, sp, #4
     87a:	3318      	adds	r3, #24
     87c:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     87e:	3b18      	subs	r3, #24
     880:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     882:	4b02      	ldr	r3, [pc, #8]	; (88c <usart_read_callback+0x40>)
     884:	4798      	blx	r3
     886:	e7ea      	b.n	85e <usart_read_callback+0x12>
     888:	200001bc 	.word	0x200001bc
     88c:	000007d9 	.word	0x000007d9
     890:	200001b8 	.word	0x200001b8
     894:	00000561 	.word	0x00000561
     898:	20000184 	.word	0x20000184
     89c:	00002cdd 	.word	0x00002cdd

000008a0 <setLogLevel>:
	currentDebugLevel = debugLevel;
     8a0:	4b01      	ldr	r3, [pc, #4]	; (8a8 <setLogLevel+0x8>)
     8a2:	7018      	strb	r0, [r3, #0]
}
     8a4:	4770      	bx	lr
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	20000092 	.word	0x20000092

000008ac <LogMessage>:
{
     8ac:	b40e      	push	{r1, r2, r3}
     8ae:	b500      	push	{lr}
     8b0:	b096      	sub	sp, #88	; 0x58
		if (level>=currentDebugLevel)
     8b2:	4b09      	ldr	r3, [pc, #36]	; (8d8 <LogMessage+0x2c>)
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	4283      	cmp	r3, r0
     8b8:	d903      	bls.n	8c2 <LogMessage+0x16>
};
     8ba:	b016      	add	sp, #88	; 0x58
     8bc:	bc08      	pop	{r3}
     8be:	b003      	add	sp, #12
     8c0:	4718      	bx	r3
			va_start(aptr, format);
     8c2:	aa18      	add	r2, sp, #96	; 0x60
     8c4:	9201      	str	r2, [sp, #4]
			vsprintf(buffer, format, aptr);
     8c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
     8c8:	a802      	add	r0, sp, #8
     8ca:	4b04      	ldr	r3, [pc, #16]	; (8dc <LogMessage+0x30>)
     8cc:	4798      	blx	r3
			SerialConsoleWriteString(buffer);
     8ce:	a802      	add	r0, sp, #8
     8d0:	4b03      	ldr	r3, [pc, #12]	; (8e0 <LogMessage+0x34>)
     8d2:	4798      	blx	r3
};
     8d4:	e7f1      	b.n	8ba <LogMessage+0xe>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	20000092 	.word	0x20000092
     8dc:	0000614d 	.word	0x0000614d
     8e0:	000007d9 	.word	0x000007d9

000008e4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     8e4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <sd_mmc_configure_slot+0x1c>)
     8e8:	6819      	ldr	r1, [r3, #0]
     8ea:	7f8b      	ldrb	r3, [r1, #30]
     8ec:	1e5a      	subs	r2, r3, #1
     8ee:	4193      	sbcs	r3, r2
     8f0:	b2db      	uxtb	r3, r3
     8f2:	7b4a      	ldrb	r2, [r1, #13]
     8f4:	6809      	ldr	r1, [r1, #0]
     8f6:	4803      	ldr	r0, [pc, #12]	; (904 <sd_mmc_configure_slot+0x20>)
     8f8:	7800      	ldrb	r0, [r0, #0]
     8fa:	4c03      	ldr	r4, [pc, #12]	; (908 <sd_mmc_configure_slot+0x24>)
     8fc:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     8fe:	bd10      	pop	{r4, pc}
     900:	20000094 	.word	0x20000094
     904:	200000bc 	.word	0x200000bc
     908:	000015a1 	.word	0x000015a1

0000090c <sd_mmc_select_slot>:
{
     90c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     90e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     910:	2800      	cmp	r0, #0
     912:	d001      	beq.n	918 <sd_mmc_select_slot+0xc>
}
     914:	0018      	movs	r0, r3
     916:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     918:	4b0e      	ldr	r3, [pc, #56]	; (954 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     91a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     91c:	3b03      	subs	r3, #3
     91e:	2b01      	cmp	r3, #1
     920:	d90d      	bls.n	93e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     922:	2200      	movs	r2, #0
     924:	4b0c      	ldr	r3, [pc, #48]	; (958 <sd_mmc_select_slot+0x4c>)
     926:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     928:	4c0a      	ldr	r4, [pc, #40]	; (954 <sd_mmc_select_slot+0x48>)
     92a:	4b0c      	ldr	r3, [pc, #48]	; (95c <sd_mmc_select_slot+0x50>)
     92c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     92e:	4b0c      	ldr	r3, [pc, #48]	; (960 <sd_mmc_select_slot+0x54>)
     930:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     932:	7aa3      	ldrb	r3, [r4, #10]
     934:	3b02      	subs	r3, #2
     936:	4258      	negs	r0, r3
     938:	4143      	adcs	r3, r0
     93a:	b2db      	uxtb	r3, r3
     93c:	e7ea      	b.n	914 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <sd_mmc_select_slot+0x48>)
     940:	2202      	movs	r2, #2
     942:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     944:	4a07      	ldr	r2, [pc, #28]	; (964 <sd_mmc_select_slot+0x58>)
     946:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     948:	2201      	movs	r2, #1
     94a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     94c:	2200      	movs	r2, #0
     94e:	779a      	strb	r2, [r3, #30]
     950:	e7e7      	b.n	922 <sd_mmc_select_slot+0x16>
     952:	46c0      	nop			; (mov r8, r8)
     954:	20000098 	.word	0x20000098
     958:	200000bc 	.word	0x200000bc
     95c:	20000094 	.word	0x20000094
     960:	000008e5 	.word	0x000008e5
     964:	00061a80 	.word	0x00061a80

00000968 <sd_mmc_cmd13>:
{
     968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96a:	4d09      	ldr	r5, [pc, #36]	; (990 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     96c:	4f09      	ldr	r7, [pc, #36]	; (994 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     96e:	4e0a      	ldr	r6, [pc, #40]	; (998 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     970:	2100      	movs	r1, #0
     972:	480a      	ldr	r0, [pc, #40]	; (99c <sd_mmc_cmd13+0x34>)
     974:	47b8      	blx	r7
     976:	1e04      	subs	r4, r0, #0
     978:	d007      	beq.n	98a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     97a:	47b0      	blx	r6
     97c:	23ff      	movs	r3, #255	; 0xff
     97e:	4203      	tst	r3, r0
     980:	d003      	beq.n	98a <sd_mmc_cmd13+0x22>
     982:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     984:	2d00      	cmp	r5, #0
     986:	d1f3      	bne.n	970 <sd_mmc_cmd13+0x8>
			return false;
     988:	2400      	movs	r4, #0
}
     98a:	0020      	movs	r0, r4
     98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     98e:	46c0      	nop			; (mov r8, r8)
     990:	00030d41 	.word	0x00030d41
     994:	000017e5 	.word	0x000017e5
     998:	000017fd 	.word	0x000017fd
     99c:	00001b0d 	.word	0x00001b0d

000009a0 <sd_mmc_cmd9_spi>:
{
     9a0:	b510      	push	{r4, lr}
     9a2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     9a4:	4b0c      	ldr	r3, [pc, #48]	; (9d8 <sd_mmc_cmd9_spi+0x38>)
     9a6:	681b      	ldr	r3, [r3, #0]
     9a8:	8919      	ldrh	r1, [r3, #8]
     9aa:	0409      	lsls	r1, r1, #16
     9ac:	2301      	movs	r3, #1
     9ae:	9300      	str	r3, [sp, #0]
     9b0:	2210      	movs	r2, #16
     9b2:	480a      	ldr	r0, [pc, #40]	; (9dc <sd_mmc_cmd9_spi+0x3c>)
     9b4:	4c0a      	ldr	r4, [pc, #40]	; (9e0 <sd_mmc_cmd9_spi+0x40>)
     9b6:	47a0      	blx	r4
     9b8:	2800      	cmp	r0, #0
     9ba:	d101      	bne.n	9c0 <sd_mmc_cmd9_spi+0x20>
}
     9bc:	b002      	add	sp, #8
     9be:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     9c0:	4b05      	ldr	r3, [pc, #20]	; (9d8 <sd_mmc_cmd9_spi+0x38>)
     9c2:	6818      	ldr	r0, [r3, #0]
     9c4:	300e      	adds	r0, #14
     9c6:	2101      	movs	r1, #1
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <sd_mmc_cmd9_spi+0x44>)
     9ca:	4798      	blx	r3
     9cc:	2800      	cmp	r0, #0
     9ce:	d0f5      	beq.n	9bc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     9d0:	4b05      	ldr	r3, [pc, #20]	; (9e8 <sd_mmc_cmd9_spi+0x48>)
     9d2:	4798      	blx	r3
     9d4:	e7f2      	b.n	9bc <sd_mmc_cmd9_spi+0x1c>
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	20000094 	.word	0x20000094
     9dc:	00081109 	.word	0x00081109
     9e0:	00001655 	.word	0x00001655
     9e4:	00001881 	.word	0x00001881
     9e8:	0000190d 	.word	0x0000190d

000009ec <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     9ec:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     9ee:	4b04      	ldr	r3, [pc, #16]	; (a00 <sd_mmc_deselect_slot+0x14>)
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d000      	beq.n	9f8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     9f6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     9f8:	2000      	movs	r0, #0
     9fa:	4b02      	ldr	r3, [pc, #8]	; (a04 <sd_mmc_deselect_slot+0x18>)
     9fc:	4798      	blx	r3
}
     9fe:	e7fa      	b.n	9f6 <sd_mmc_deselect_slot+0xa>
     a00:	200000bc 	.word	0x200000bc
     a04:	000015f5 	.word	0x000015f5

00000a08 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     a08:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     a0a:	2204      	movs	r2, #4
     a0c:	4b03      	ldr	r3, [pc, #12]	; (a1c <sd_mmc_init+0x14>)
     a0e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     a10:	32fb      	adds	r2, #251	; 0xfb
     a12:	4b03      	ldr	r3, [pc, #12]	; (a20 <sd_mmc_init+0x18>)
     a14:	701a      	strb	r2, [r3, #0]
	driver_init();
     a16:	4b03      	ldr	r3, [pc, #12]	; (a24 <sd_mmc_init+0x1c>)
     a18:	4798      	blx	r3
}
     a1a:	bd10      	pop	{r4, pc}
     a1c:	20000098 	.word	0x20000098
     a20:	200000bc 	.word	0x200000bc
     a24:	000014a1 	.word	0x000014a1

00000a28 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46c6      	mov	lr, r8
     a2c:	b500      	push	{lr}
     a2e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     a30:	4bcb      	ldr	r3, [pc, #812]	; (d60 <sd_mmc_check+0x338>)
     a32:	4798      	blx	r3
     a34:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     a36:	2801      	cmp	r0, #1
     a38:	d006      	beq.n	a48 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     a3a:	4bca      	ldr	r3, [pc, #808]	; (d64 <sd_mmc_check+0x33c>)
     a3c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     a3e:	0020      	movs	r0, r4
     a40:	b008      	add	sp, #32
     a42:	bc04      	pop	{r2}
     a44:	4690      	mov	r8, r2
     a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     a48:	4bc7      	ldr	r3, [pc, #796]	; (d68 <sd_mmc_check+0x340>)
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	2201      	movs	r2, #1
     a4e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     a50:	2200      	movs	r2, #0
     a52:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     a54:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     a56:	4bc5      	ldr	r3, [pc, #788]	; (d6c <sd_mmc_check+0x344>)
     a58:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a5a:	2100      	movs	r1, #0
     a5c:	2088      	movs	r0, #136	; 0x88
     a5e:	0140      	lsls	r0, r0, #5
     a60:	4bc3      	ldr	r3, [pc, #780]	; (d70 <sd_mmc_check+0x348>)
     a62:	4798      	blx	r3
     a64:	2800      	cmp	r0, #0
     a66:	d107      	bne.n	a78 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     a68:	4bbf      	ldr	r3, [pc, #764]	; (d68 <sd_mmc_check+0x340>)
     a6a:	681b      	ldr	r3, [r3, #0]
     a6c:	2203      	movs	r2, #3
     a6e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     a70:	4bbc      	ldr	r3, [pc, #752]	; (d64 <sd_mmc_check+0x33c>)
     a72:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     a74:	2403      	movs	r4, #3
     a76:	e7e2      	b.n	a3e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a78:	21d5      	movs	r1, #213	; 0xd5
     a7a:	0049      	lsls	r1, r1, #1
     a7c:	48bd      	ldr	r0, [pc, #756]	; (d74 <sd_mmc_check+0x34c>)
     a7e:	4bbc      	ldr	r3, [pc, #752]	; (d70 <sd_mmc_check+0x348>)
     a80:	4798      	blx	r3
	*v2 = 0;
     a82:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a84:	2800      	cmp	r0, #0
     a86:	d125      	bne.n	ad4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a88:	4bb7      	ldr	r3, [pc, #732]	; (d68 <sd_mmc_check+0x340>)
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	7adb      	ldrb	r3, [r3, #11]
     a8e:	07db      	lsls	r3, r3, #31
     a90:	d500      	bpl.n	a94 <sd_mmc_check+0x6c>
     a92:	e1eb      	b.n	e6c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a94:	4bb4      	ldr	r3, [pc, #720]	; (d68 <sd_mmc_check+0x340>)
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	7ada      	ldrb	r2, [r3, #11]
     a9a:	2309      	movs	r3, #9
     a9c:	4013      	ands	r3, r2
     a9e:	2b01      	cmp	r3, #1
     aa0:	d10f      	bne.n	ac2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     aa2:	2180      	movs	r1, #128	; 0x80
     aa4:	0089      	lsls	r1, r1, #2
     aa6:	48b4      	ldr	r0, [pc, #720]	; (d78 <sd_mmc_check+0x350>)
     aa8:	4bb1      	ldr	r3, [pc, #708]	; (d70 <sd_mmc_check+0x348>)
     aaa:	4798      	blx	r3
     aac:	2800      	cmp	r0, #0
     aae:	d0db      	beq.n	a68 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ab0:	4bad      	ldr	r3, [pc, #692]	; (d68 <sd_mmc_check+0x340>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	7adb      	ldrb	r3, [r3, #11]
     ab6:	07db      	lsls	r3, r3, #31
     ab8:	d503      	bpl.n	ac2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     aba:	4bb0      	ldr	r3, [pc, #704]	; (d7c <sd_mmc_check+0x354>)
     abc:	4798      	blx	r3
     abe:	2800      	cmp	r0, #0
     ac0:	d0d2      	beq.n	a68 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     ac2:	4baf      	ldr	r3, [pc, #700]	; (d80 <sd_mmc_check+0x358>)
     ac4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     ac6:	4ba8      	ldr	r3, [pc, #672]	; (d68 <sd_mmc_check+0x340>)
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	2200      	movs	r2, #0
     acc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     ace:	4ba5      	ldr	r3, [pc, #660]	; (d64 <sd_mmc_check+0x33c>)
     ad0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     ad2:	e7b4      	b.n	a3e <sd_mmc_check+0x16>
	resp = driver_get_response();
     ad4:	4bab      	ldr	r3, [pc, #684]	; (d84 <sd_mmc_check+0x35c>)
     ad6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     ad8:	1c43      	adds	r3, r0, #1
     ada:	d100      	bne.n	ade <sd_mmc_check+0xb6>
     adc:	e1c4      	b.n	e68 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     ade:	0500      	lsls	r0, r0, #20
     ae0:	0d00      	lsrs	r0, r0, #20
     ae2:	23d5      	movs	r3, #213	; 0xd5
     ae4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     ae6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     ae8:	4298      	cmp	r0, r3
     aea:	d1bd      	bne.n	a68 <sd_mmc_check+0x40>
     aec:	e7cc      	b.n	a88 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     aee:	2100      	movs	r1, #0
     af0:	48a5      	ldr	r0, [pc, #660]	; (d88 <sd_mmc_check+0x360>)
     af2:	4b9f      	ldr	r3, [pc, #636]	; (d70 <sd_mmc_check+0x348>)
     af4:	4798      	blx	r3
     af6:	2800      	cmp	r0, #0
     af8:	d119      	bne.n	b2e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     afa:	4b9b      	ldr	r3, [pc, #620]	; (d68 <sd_mmc_check+0x340>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	2202      	movs	r2, #2
     b00:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     b02:	2100      	movs	r1, #0
     b04:	2088      	movs	r0, #136	; 0x88
     b06:	0140      	lsls	r0, r0, #5
     b08:	4b99      	ldr	r3, [pc, #612]	; (d70 <sd_mmc_check+0x348>)
     b0a:	4798      	blx	r3
     b0c:	2800      	cmp	r0, #0
     b0e:	d0ab      	beq.n	a68 <sd_mmc_check+0x40>
     b10:	4d9e      	ldr	r5, [pc, #632]	; (d8c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     b12:	4f97      	ldr	r7, [pc, #604]	; (d70 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     b14:	4e9b      	ldr	r6, [pc, #620]	; (d84 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     b16:	2100      	movs	r1, #0
     b18:	489d      	ldr	r0, [pc, #628]	; (d90 <sd_mmc_check+0x368>)
     b1a:	47b8      	blx	r7
     b1c:	2800      	cmp	r0, #0
     b1e:	d0a3      	beq.n	a68 <sd_mmc_check+0x40>
		resp = driver_get_response();
     b20:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b22:	07c3      	lsls	r3, r0, #31
     b24:	d57d      	bpl.n	c22 <sd_mmc_check+0x1fa>
     b26:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     b28:	2d00      	cmp	r5, #0
     b2a:	d1f4      	bne.n	b16 <sd_mmc_check+0xee>
     b2c:	e79c      	b.n	a68 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     b2e:	4b95      	ldr	r3, [pc, #596]	; (d84 <sd_mmc_check+0x35c>)
     b30:	4798      	blx	r3
     b32:	0043      	lsls	r3, r0, #1
     b34:	d505      	bpl.n	b42 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     b36:	4b8c      	ldr	r3, [pc, #560]	; (d68 <sd_mmc_check+0x340>)
     b38:	681a      	ldr	r2, [r3, #0]
     b3a:	7ad3      	ldrb	r3, [r2, #11]
     b3c:	2108      	movs	r1, #8
     b3e:	430b      	orrs	r3, r1
     b40:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     b42:	2100      	movs	r1, #0
     b44:	4893      	ldr	r0, [pc, #588]	; (d94 <sd_mmc_check+0x36c>)
     b46:	4b8a      	ldr	r3, [pc, #552]	; (d70 <sd_mmc_check+0x348>)
     b48:	4798      	blx	r3
     b4a:	2800      	cmp	r0, #0
     b4c:	d08c      	beq.n	a68 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b4e:	4b86      	ldr	r3, [pc, #536]	; (d68 <sd_mmc_check+0x340>)
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	7adb      	ldrb	r3, [r3, #11]
     b54:	07da      	lsls	r2, r3, #31
     b56:	d400      	bmi.n	b5a <sd_mmc_check+0x132>
     b58:	e1a4      	b.n	ea4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     b5a:	4b8f      	ldr	r3, [pc, #572]	; (d98 <sd_mmc_check+0x370>)
     b5c:	4798      	blx	r3
     b5e:	2800      	cmp	r0, #0
     b60:	d082      	beq.n	a68 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     b62:	4b81      	ldr	r3, [pc, #516]	; (d68 <sd_mmc_check+0x340>)
     b64:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b66:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     b68:	2107      	movs	r1, #7
     b6a:	4019      	ands	r1, r3
     b6c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b6e:	488b      	ldr	r0, [pc, #556]	; (d9c <sd_mmc_check+0x374>)
     b70:	5808      	ldr	r0, [r1, r0]
     b72:	21fa      	movs	r1, #250	; 0xfa
     b74:	0089      	lsls	r1, r1, #2
     b76:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     b78:	065b      	lsls	r3, r3, #25
     b7a:	0f1b      	lsrs	r3, r3, #28
     b7c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b7e:	4888      	ldr	r0, [pc, #544]	; (da0 <sd_mmc_check+0x378>)
     b80:	581b      	ldr	r3, [r3, r0]
     b82:	434b      	muls	r3, r1
     b84:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     b86:	7b93      	ldrb	r3, [r2, #14]
     b88:	099b      	lsrs	r3, r3, #6
     b8a:	d000      	beq.n	b8e <sd_mmc_check+0x166>
     b8c:	e13c      	b.n	e08 <sd_mmc_check+0x3e0>
     b8e:	7d91      	ldrb	r1, [r2, #22]
     b90:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b92:	7d53      	ldrb	r3, [r2, #21]
     b94:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b96:	7d10      	ldrb	r0, [r2, #20]
     b98:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b9a:	4303      	orrs	r3, r0
     b9c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b9e:	7e10      	ldrb	r0, [r2, #24]
     ba0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ba2:	7dd1      	ldrb	r1, [r2, #23]
     ba4:	0049      	lsls	r1, r1, #1
     ba6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     ba8:	051b      	lsls	r3, r3, #20
     baa:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     bac:	3301      	adds	r3, #1
     bae:	2107      	movs	r1, #7
     bb0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     bb2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     bb4:	408b      	lsls	r3, r1
     bb6:	7cd0      	ldrb	r0, [r2, #19]
     bb8:	210f      	movs	r1, #15
     bba:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     bbc:	408b      	lsls	r3, r1
				/ 1024;
     bbe:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     bc0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     bc2:	8911      	ldrh	r1, [r2, #8]
     bc4:	0409      	lsls	r1, r1, #16
     bc6:	4877      	ldr	r0, [pc, #476]	; (da4 <sd_mmc_check+0x37c>)
     bc8:	4b69      	ldr	r3, [pc, #420]	; (d70 <sd_mmc_check+0x348>)
     bca:	4798      	blx	r3
     bcc:	2800      	cmp	r0, #0
     bce:	d100      	bne.n	bd2 <sd_mmc_check+0x1aa>
     bd0:	e74a      	b.n	a68 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     bd2:	2301      	movs	r3, #1
     bd4:	9300      	str	r3, [sp, #0]
     bd6:	2208      	movs	r2, #8
     bd8:	2100      	movs	r1, #0
     bda:	4873      	ldr	r0, [pc, #460]	; (da8 <sd_mmc_check+0x380>)
     bdc:	4d73      	ldr	r5, [pc, #460]	; (dac <sd_mmc_check+0x384>)
     bde:	47a8      	blx	r5
     be0:	2800      	cmp	r0, #0
     be2:	d100      	bne.n	be6 <sd_mmc_check+0x1be>
     be4:	e740      	b.n	a68 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     be6:	2101      	movs	r1, #1
     be8:	a806      	add	r0, sp, #24
     bea:	4b71      	ldr	r3, [pc, #452]	; (db0 <sd_mmc_check+0x388>)
     bec:	4798      	blx	r3
     bee:	2800      	cmp	r0, #0
     bf0:	d100      	bne.n	bf4 <sd_mmc_check+0x1cc>
     bf2:	e739      	b.n	a68 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     bf4:	4b6f      	ldr	r3, [pc, #444]	; (db4 <sd_mmc_check+0x38c>)
     bf6:	4798      	blx	r3
     bf8:	2800      	cmp	r0, #0
     bfa:	d100      	bne.n	bfe <sd_mmc_check+0x1d6>
     bfc:	e734      	b.n	a68 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     bfe:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	220f      	movs	r2, #15
     c04:	4013      	ands	r3, r2
     c06:	2b01      	cmp	r3, #1
     c08:	d100      	bne.n	c0c <sd_mmc_check+0x1e4>
     c0a:	e119      	b.n	e40 <sd_mmc_check+0x418>
     c0c:	2b00      	cmp	r3, #0
     c0e:	d100      	bne.n	c12 <sd_mmc_check+0x1ea>
     c10:	e109      	b.n	e26 <sd_mmc_check+0x3fe>
     c12:	2b02      	cmp	r3, #2
     c14:	d100      	bne.n	c18 <sd_mmc_check+0x1f0>
     c16:	e118      	b.n	e4a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     c18:	4b53      	ldr	r3, [pc, #332]	; (d68 <sd_mmc_check+0x340>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	2210      	movs	r2, #16
     c1e:	731a      	strb	r2, [r3, #12]
     c20:	e105      	b.n	e2e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     c22:	2100      	movs	r1, #0
     c24:	4858      	ldr	r0, [pc, #352]	; (d88 <sd_mmc_check+0x360>)
     c26:	4b52      	ldr	r3, [pc, #328]	; (d70 <sd_mmc_check+0x348>)
     c28:	4798      	blx	r3
     c2a:	2800      	cmp	r0, #0
     c2c:	d100      	bne.n	c30 <sd_mmc_check+0x208>
     c2e:	e71b      	b.n	a68 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     c30:	4b54      	ldr	r3, [pc, #336]	; (d84 <sd_mmc_check+0x35c>)
     c32:	4798      	blx	r3
     c34:	23c0      	movs	r3, #192	; 0xc0
     c36:	05db      	lsls	r3, r3, #23
     c38:	4018      	ands	r0, r3
     c3a:	2380      	movs	r3, #128	; 0x80
     c3c:	05db      	lsls	r3, r3, #23
     c3e:	4298      	cmp	r0, r3
     c40:	d105      	bne.n	c4e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     c42:	4b49      	ldr	r3, [pc, #292]	; (d68 <sd_mmc_check+0x340>)
     c44:	681a      	ldr	r2, [r3, #0]
     c46:	7ad1      	ldrb	r1, [r2, #11]
     c48:	2308      	movs	r3, #8
     c4a:	430b      	orrs	r3, r1
     c4c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     c4e:	2100      	movs	r1, #0
     c50:	4850      	ldr	r0, [pc, #320]	; (d94 <sd_mmc_check+0x36c>)
     c52:	4b47      	ldr	r3, [pc, #284]	; (d70 <sd_mmc_check+0x348>)
     c54:	4798      	blx	r3
     c56:	2800      	cmp	r0, #0
     c58:	d100      	bne.n	c5c <sd_mmc_check+0x234>
     c5a:	e705      	b.n	a68 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     c5c:	4b4e      	ldr	r3, [pc, #312]	; (d98 <sd_mmc_check+0x370>)
     c5e:	4798      	blx	r3
     c60:	2800      	cmp	r0, #0
     c62:	d100      	bne.n	c66 <sd_mmc_check+0x23e>
     c64:	e700      	b.n	a68 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c66:	4b40      	ldr	r3, [pc, #256]	; (d68 <sd_mmc_check+0x340>)
     c68:	681a      	ldr	r2, [r3, #0]
     c6a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     c6c:	069b      	lsls	r3, r3, #26
     c6e:	0f1b      	lsrs	r3, r3, #28
     c70:	2b02      	cmp	r3, #2
     c72:	d100      	bne.n	c76 <sd_mmc_check+0x24e>
     c74:	e0a8      	b.n	dc8 <sd_mmc_check+0x3a0>
     c76:	d907      	bls.n	c88 <sd_mmc_check+0x260>
     c78:	2b03      	cmp	r3, #3
     c7a:	d100      	bne.n	c7e <sd_mmc_check+0x256>
     c7c:	e0a7      	b.n	dce <sd_mmc_check+0x3a6>
     c7e:	2b04      	cmp	r3, #4
     c80:	d104      	bne.n	c8c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     c82:	2340      	movs	r3, #64	; 0x40
     c84:	7313      	strb	r3, [r2, #12]
     c86:	e003      	b.n	c90 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c88:	2b01      	cmp	r3, #1
     c8a:	d066      	beq.n	d5a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     c8c:	2312      	movs	r3, #18
     c8e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c90:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c92:	0659      	lsls	r1, r3, #25
     c94:	0f09      	lsrs	r1, r1, #28
     c96:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c98:	2007      	movs	r0, #7
     c9a:	4003      	ands	r3, r0
     c9c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c9e:	483f      	ldr	r0, [pc, #252]	; (d9c <sd_mmc_check+0x374>)
     ca0:	5818      	ldr	r0, [r3, r0]
     ca2:	23fa      	movs	r3, #250	; 0xfa
     ca4:	009b      	lsls	r3, r3, #2
     ca6:	4343      	muls	r3, r0
     ca8:	4843      	ldr	r0, [pc, #268]	; (db8 <sd_mmc_check+0x390>)
     caa:	5809      	ldr	r1, [r1, r0]
     cac:	434b      	muls	r3, r1
     cae:	6013      	str	r3, [r2, #0]
     cb0:	7d91      	ldrb	r1, [r2, #22]
     cb2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cb4:	7d53      	ldrb	r3, [r2, #21]
     cb6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cb8:	7d10      	ldrb	r0, [r2, #20]
     cba:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cbc:	4303      	orrs	r3, r0
     cbe:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     cc0:	051b      	lsls	r3, r3, #20
     cc2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     cc4:	493d      	ldr	r1, [pc, #244]	; (dbc <sd_mmc_check+0x394>)
     cc6:	428b      	cmp	r3, r1
     cc8:	d00f      	beq.n	cea <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cca:	7e10      	ldrb	r0, [r2, #24]
     ccc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cce:	7dd1      	ldrb	r1, [r2, #23]
     cd0:	0049      	lsls	r1, r1, #1
     cd2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     cd4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     cd6:	2007      	movs	r0, #7
     cd8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     cda:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     cdc:	408b      	lsls	r3, r1
     cde:	7cd1      	ldrb	r1, [r2, #19]
     ce0:	3008      	adds	r0, #8
     ce2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     ce4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     ce6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     ce8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     cea:	7b13      	ldrb	r3, [r2, #12]
     cec:	2b3f      	cmp	r3, #63	; 0x3f
     cee:	d97b      	bls.n	de8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     cf0:	2100      	movs	r1, #0
     cf2:	9100      	str	r1, [sp, #0]
     cf4:	2301      	movs	r3, #1
     cf6:	2280      	movs	r2, #128	; 0x80
     cf8:	0092      	lsls	r2, r2, #2
     cfa:	4831      	ldr	r0, [pc, #196]	; (dc0 <sd_mmc_check+0x398>)
     cfc:	4d2b      	ldr	r5, [pc, #172]	; (dac <sd_mmc_check+0x384>)
     cfe:	47a8      	blx	r5
     d00:	2800      	cmp	r0, #0
     d02:	d100      	bne.n	d06 <sd_mmc_check+0x2de>
     d04:	e6b0      	b.n	a68 <sd_mmc_check+0x40>
     d06:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     d08:	4e2e      	ldr	r6, [pc, #184]	; (dc4 <sd_mmc_check+0x39c>)
     d0a:	a805      	add	r0, sp, #20
     d0c:	47b0      	blx	r6
     d0e:	2800      	cmp	r0, #0
     d10:	d100      	bne.n	d14 <sd_mmc_check+0x2ec>
     d12:	e6a9      	b.n	a68 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     d14:	3501      	adds	r5, #1
     d16:	b2ad      	uxth	r5, r5
     d18:	2d32      	cmp	r5, #50	; 0x32
     d1a:	d1f6      	bne.n	d0a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     d1c:	4b12      	ldr	r3, [pc, #72]	; (d68 <sd_mmc_check+0x340>)
     d1e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d20:	7d8a      	ldrb	r2, [r1, #22]
     d22:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d24:	7d4b      	ldrb	r3, [r1, #21]
     d26:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d28:	7d09      	ldrb	r1, [r1, #20]
     d2a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d2c:	430b      	orrs	r3, r1
     d2e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     d30:	051b      	lsls	r3, r3, #20
     d32:	0d1b      	lsrs	r3, r3, #20
     d34:	4a21      	ldr	r2, [pc, #132]	; (dbc <sd_mmc_check+0x394>)
     d36:	4293      	cmp	r3, r2
     d38:	d154      	bne.n	de4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     d3a:	4e22      	ldr	r6, [pc, #136]	; (dc4 <sd_mmc_check+0x39c>)
     d3c:	a806      	add	r0, sp, #24
     d3e:	47b0      	blx	r6
     d40:	2800      	cmp	r0, #0
     d42:	d100      	bne.n	d46 <sd_mmc_check+0x31e>
     d44:	e690      	b.n	a68 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     d46:	3501      	adds	r5, #1
     d48:	b2ad      	uxth	r5, r5
     d4a:	2d35      	cmp	r5, #53	; 0x35
     d4c:	d9f6      	bls.n	d3c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     d4e:	4b06      	ldr	r3, [pc, #24]	; (d68 <sd_mmc_check+0x340>)
     d50:	681a      	ldr	r2, [r3, #0]
     d52:	9b06      	ldr	r3, [sp, #24]
     d54:	085b      	lsrs	r3, r3, #1
     d56:	6053      	str	r3, [r2, #4]
     d58:	e044      	b.n	de4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     d5a:	2314      	movs	r3, #20
     d5c:	7313      	strb	r3, [r2, #12]
     d5e:	e797      	b.n	c90 <sd_mmc_check+0x268>
     d60:	0000090d 	.word	0x0000090d
     d64:	000009ed 	.word	0x000009ed
     d68:	20000094 	.word	0x20000094
     d6c:	0000161d 	.word	0x0000161d
     d70:	000017e5 	.word	0x000017e5
     d74:	00005508 	.word	0x00005508
     d78:	00001110 	.word	0x00001110
     d7c:	00000969 	.word	0x00000969
     d80:	000008e5 	.word	0x000008e5
     d84:	000017fd 	.word	0x000017fd
     d88:	0000053a 	.word	0x0000053a
     d8c:	00001bef 	.word	0x00001bef
     d90:	00001101 	.word	0x00001101
     d94:	0000113b 	.word	0x0000113b
     d98:	000009a1 	.word	0x000009a1
     d9c:	00006e08 	.word	0x00006e08
     da0:	00006e24 	.word	0x00006e24
     da4:	00001137 	.word	0x00001137
     da8:	00081133 	.word	0x00081133
     dac:	00001655 	.word	0x00001655
     db0:	00001881 	.word	0x00001881
     db4:	0000190d 	.word	0x0000190d
     db8:	00006dc8 	.word	0x00006dc8
     dbc:	00000fff 	.word	0x00000fff
     dc0:	00081108 	.word	0x00081108
     dc4:	00001809 	.word	0x00001809
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     dc8:	2322      	movs	r3, #34	; 0x22
     dca:	7313      	strb	r3, [r2, #12]
     dcc:	e760      	b.n	c90 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     dce:	2330      	movs	r3, #48	; 0x30
     dd0:	7313      	strb	r3, [r2, #12]
     dd2:	e75d      	b.n	c90 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     dd4:	a806      	add	r0, sp, #24
     dd6:	4b36      	ldr	r3, [pc, #216]	; (eb0 <sd_mmc_check+0x488>)
     dd8:	4798      	blx	r3
     dda:	2800      	cmp	r0, #0
     ddc:	d100      	bne.n	de0 <sd_mmc_check+0x3b8>
     dde:	e643      	b.n	a68 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     de0:	3501      	adds	r5, #1
     de2:	b2ad      	uxth	r5, r5
     de4:	2d7f      	cmp	r5, #127	; 0x7f
     de6:	d9f5      	bls.n	dd4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     de8:	2180      	movs	r1, #128	; 0x80
     dea:	0089      	lsls	r1, r1, #2
     dec:	4831      	ldr	r0, [pc, #196]	; (eb4 <sd_mmc_check+0x48c>)
     dee:	4b32      	ldr	r3, [pc, #200]	; (eb8 <sd_mmc_check+0x490>)
     df0:	4798      	blx	r3
     df2:	2800      	cmp	r0, #0
     df4:	d100      	bne.n	df8 <sd_mmc_check+0x3d0>
     df6:	e637      	b.n	a68 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     df8:	4b30      	ldr	r3, [pc, #192]	; (ebc <sd_mmc_check+0x494>)
     dfa:	4798      	blx	r3
     dfc:	2800      	cmp	r0, #0
     dfe:	d100      	bne.n	e02 <sd_mmc_check+0x3da>
     e00:	e632      	b.n	a68 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     e02:	4b2f      	ldr	r3, [pc, #188]	; (ec0 <sd_mmc_check+0x498>)
     e04:	4798      	blx	r3
     e06:	e65e      	b.n	ac6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e08:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e0a:	7d93      	ldrb	r3, [r2, #22]
     e0c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e0e:	7d51      	ldrb	r1, [r2, #21]
     e10:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e12:	430b      	orrs	r3, r1
     e14:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     e16:	029b      	lsls	r3, r3, #10
				* 512;
     e18:	085b      	lsrs	r3, r3, #1
     e1a:	2180      	movs	r1, #128	; 0x80
     e1c:	0089      	lsls	r1, r1, #2
     e1e:	468c      	mov	ip, r1
     e20:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     e22:	6053      	str	r3, [r2, #4]
     e24:	e6cd      	b.n	bc2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     e26:	4b27      	ldr	r3, [pc, #156]	; (ec4 <sd_mmc_check+0x49c>)
     e28:	681b      	ldr	r3, [r3, #0]
     e2a:	2210      	movs	r2, #16
     e2c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e2e:	4b25      	ldr	r3, [pc, #148]	; (ec4 <sd_mmc_check+0x49c>)
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	7adb      	ldrb	r3, [r3, #11]
     e34:	2209      	movs	r2, #9
     e36:	4013      	ands	r3, r2
     e38:	2b01      	cmp	r3, #1
     e3a:	d000      	beq.n	e3e <sd_mmc_check+0x416>
     e3c:	e638      	b.n	ab0 <sd_mmc_check+0x88>
     e3e:	e630      	b.n	aa2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     e40:	4b20      	ldr	r3, [pc, #128]	; (ec4 <sd_mmc_check+0x49c>)
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	221a      	movs	r2, #26
     e46:	731a      	strb	r2, [r3, #12]
     e48:	e7f1      	b.n	e2e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e4a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     e4c:	789b      	ldrb	r3, [r3, #2]
     e4e:	09db      	lsrs	r3, r3, #7
     e50:	2b01      	cmp	r3, #1
     e52:	d104      	bne.n	e5e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     e54:	4b1b      	ldr	r3, [pc, #108]	; (ec4 <sd_mmc_check+0x49c>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	2230      	movs	r2, #48	; 0x30
     e5a:	731a      	strb	r2, [r3, #12]
     e5c:	e7e7      	b.n	e2e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     e5e:	4b19      	ldr	r3, [pc, #100]	; (ec4 <sd_mmc_check+0x49c>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	2220      	movs	r2, #32
     e64:	731a      	strb	r2, [r3, #12]
     e66:	e7e2      	b.n	e2e <sd_mmc_check+0x406>
	*v2 = 0;
     e68:	2600      	movs	r6, #0
     e6a:	e60d      	b.n	a88 <sd_mmc_check+0x60>
     e6c:	1e73      	subs	r3, r6, #1
     e6e:	419e      	sbcs	r6, r3
     e70:	07b3      	lsls	r3, r6, #30
     e72:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e74:	4d14      	ldr	r5, [pc, #80]	; (ec8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e76:	4f10      	ldr	r7, [pc, #64]	; (eb8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e78:	46b8      	mov	r8, r7
		resp = driver_get_response();
     e7a:	4e14      	ldr	r6, [pc, #80]	; (ecc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e7c:	2100      	movs	r1, #0
     e7e:	4814      	ldr	r0, [pc, #80]	; (ed0 <sd_mmc_check+0x4a8>)
     e80:	47b8      	blx	r7
     e82:	2800      	cmp	r0, #0
     e84:	d100      	bne.n	e88 <sd_mmc_check+0x460>
     e86:	e638      	b.n	afa <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e88:	9903      	ldr	r1, [sp, #12]
     e8a:	4812      	ldr	r0, [pc, #72]	; (ed4 <sd_mmc_check+0x4ac>)
     e8c:	47c0      	blx	r8
     e8e:	2800      	cmp	r0, #0
     e90:	d100      	bne.n	e94 <sd_mmc_check+0x46c>
     e92:	e632      	b.n	afa <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e94:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e96:	07c3      	lsls	r3, r0, #31
     e98:	d400      	bmi.n	e9c <sd_mmc_check+0x474>
     e9a:	e628      	b.n	aee <sd_mmc_check+0xc6>
     e9c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e9e:	2d00      	cmp	r5, #0
     ea0:	d1ec      	bne.n	e7c <sd_mmc_check+0x454>
     ea2:	e62a      	b.n	afa <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     ea4:	2209      	movs	r2, #9
     ea6:	4013      	ands	r3, r2
     ea8:	2b01      	cmp	r3, #1
     eaa:	d000      	beq.n	eae <sd_mmc_check+0x486>
     eac:	e609      	b.n	ac2 <sd_mmc_check+0x9a>
     eae:	e5f8      	b.n	aa2 <sd_mmc_check+0x7a>
     eb0:	00001809 	.word	0x00001809
     eb4:	00001110 	.word	0x00001110
     eb8:	000017e5 	.word	0x000017e5
     ebc:	00000969 	.word	0x00000969
     ec0:	000008e5 	.word	0x000008e5
     ec4:	20000094 	.word	0x20000094
     ec8:	00001bef 	.word	0x00001bef
     ecc:	000017fd 	.word	0x000017fd
     ed0:	00001137 	.word	0x00001137
     ed4:	00001129 	.word	0x00001129

00000ed8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     ed8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <sd_mmc_get_type+0x1c>)
     edc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     ede:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ee0:	2800      	cmp	r0, #0
     ee2:	d001      	beq.n	ee8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     ee4:	0018      	movs	r0, r3
     ee6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     ee8:	4b03      	ldr	r3, [pc, #12]	; (ef8 <sd_mmc_get_type+0x20>)
     eea:	4798      	blx	r3
	return sd_mmc_card->type;
     eec:	4b03      	ldr	r3, [pc, #12]	; (efc <sd_mmc_get_type+0x24>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	7adb      	ldrb	r3, [r3, #11]
     ef2:	e7f7      	b.n	ee4 <sd_mmc_get_type+0xc>
     ef4:	0000090d 	.word	0x0000090d
     ef8:	000009ed 	.word	0x000009ed
     efc:	20000094 	.word	0x20000094

00000f00 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     f00:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f02:	4b06      	ldr	r3, [pc, #24]	; (f1c <sd_mmc_get_capacity+0x1c>)
     f04:	4798      	blx	r3
		return 0;
     f06:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     f08:	2800      	cmp	r0, #0
     f0a:	d001      	beq.n	f10 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     f0c:	0018      	movs	r0, r3
     f0e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     f10:	4b03      	ldr	r3, [pc, #12]	; (f20 <sd_mmc_get_capacity+0x20>)
     f12:	4798      	blx	r3
	return sd_mmc_card->capacity;
     f14:	4b03      	ldr	r3, [pc, #12]	; (f24 <sd_mmc_get_capacity+0x24>)
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	685b      	ldr	r3, [r3, #4]
     f1a:	e7f7      	b.n	f0c <sd_mmc_get_capacity+0xc>
     f1c:	0000090d 	.word	0x0000090d
     f20:	000009ed 	.word	0x000009ed
     f24:	20000094 	.word	0x20000094

00000f28 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     f28:	2000      	movs	r0, #0
     f2a:	4770      	bx	lr

00000f2c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	b082      	sub	sp, #8
     f30:	000e      	movs	r6, r1
     f32:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     f34:	4b16      	ldr	r3, [pc, #88]	; (f90 <sd_mmc_init_read_blocks+0x64>)
     f36:	4798      	blx	r3
     f38:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     f3a:	d002      	beq.n	f42 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     f3c:	0020      	movs	r0, r4
     f3e:	b002      	add	sp, #8
     f40:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     f42:	4b14      	ldr	r3, [pc, #80]	; (f94 <sd_mmc_init_read_blocks+0x68>)
     f44:	4798      	blx	r3
     f46:	2800      	cmp	r0, #0
     f48:	d017      	beq.n	f7a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     f4a:	2d01      	cmp	r5, #1
     f4c:	d919      	bls.n	f82 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     f4e:	4812      	ldr	r0, [pc, #72]	; (f98 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     f50:	4b12      	ldr	r3, [pc, #72]	; (f9c <sd_mmc_init_read_blocks+0x70>)
     f52:	681b      	ldr	r3, [r3, #0]
     f54:	7adb      	ldrb	r3, [r3, #11]
     f56:	071b      	lsls	r3, r3, #28
     f58:	d400      	bmi.n	f5c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     f5a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     f5c:	2301      	movs	r3, #1
     f5e:	9300      	str	r3, [sp, #0]
     f60:	002b      	movs	r3, r5
     f62:	2280      	movs	r2, #128	; 0x80
     f64:	0092      	lsls	r2, r2, #2
     f66:	0031      	movs	r1, r6
     f68:	4e0d      	ldr	r6, [pc, #52]	; (fa0 <sd_mmc_init_read_blocks+0x74>)
     f6a:	47b0      	blx	r6
     f6c:	2800      	cmp	r0, #0
     f6e:	d00a      	beq.n	f86 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     f70:	4b0c      	ldr	r3, [pc, #48]	; (fa4 <sd_mmc_init_read_blocks+0x78>)
     f72:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     f74:	4b0c      	ldr	r3, [pc, #48]	; (fa8 <sd_mmc_init_read_blocks+0x7c>)
     f76:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     f78:	e7e0      	b.n	f3c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     f7a:	4b0c      	ldr	r3, [pc, #48]	; (fac <sd_mmc_init_read_blocks+0x80>)
     f7c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f7e:	3405      	adds	r4, #5
     f80:	e7dc      	b.n	f3c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     f82:	480b      	ldr	r0, [pc, #44]	; (fb0 <sd_mmc_init_read_blocks+0x84>)
     f84:	e7e4      	b.n	f50 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     f86:	4b09      	ldr	r3, [pc, #36]	; (fac <sd_mmc_init_read_blocks+0x80>)
     f88:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f8a:	2405      	movs	r4, #5
     f8c:	e7d6      	b.n	f3c <sd_mmc_init_read_blocks+0x10>
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	0000090d 	.word	0x0000090d
     f94:	00000969 	.word	0x00000969
     f98:	00101112 	.word	0x00101112
     f9c:	20000094 	.word	0x20000094
     fa0:	00001655 	.word	0x00001655
     fa4:	200000b8 	.word	0x200000b8
     fa8:	200000ba 	.word	0x200000ba
     fac:	000009ed 	.word	0x000009ed
     fb0:	00081111 	.word	0x00081111

00000fb4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     fb4:	b510      	push	{r4, lr}
     fb6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     fb8:	4b07      	ldr	r3, [pc, #28]	; (fd8 <sd_mmc_start_read_blocks+0x24>)
     fba:	4798      	blx	r3
     fbc:	2800      	cmp	r0, #0
     fbe:	d104      	bne.n	fca <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     fc0:	2200      	movs	r2, #0
     fc2:	4b06      	ldr	r3, [pc, #24]	; (fdc <sd_mmc_start_read_blocks+0x28>)
     fc4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     fc6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     fc8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     fca:	4a04      	ldr	r2, [pc, #16]	; (fdc <sd_mmc_start_read_blocks+0x28>)
     fcc:	8813      	ldrh	r3, [r2, #0]
     fce:	1b1c      	subs	r4, r3, r4
     fd0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     fd2:	2000      	movs	r0, #0
     fd4:	e7f8      	b.n	fc8 <sd_mmc_start_read_blocks+0x14>
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	00001881 	.word	0x00001881
     fdc:	200000b8 	.word	0x200000b8

00000fe0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     fe0:	b510      	push	{r4, lr}
     fe2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     fe4:	4b14      	ldr	r3, [pc, #80]	; (1038 <sd_mmc_wait_end_of_read_blocks+0x58>)
     fe6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     fe8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     fea:	2800      	cmp	r0, #0
     fec:	d101      	bne.n	ff2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     fee:	0018      	movs	r0, r3
     ff0:	bd10      	pop	{r4, pc}
	if (abort) {
     ff2:	2c00      	cmp	r4, #0
     ff4:	d010      	beq.n	1018 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     ff6:	2200      	movs	r2, #0
     ff8:	4b10      	ldr	r3, [pc, #64]	; (103c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     ffa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     ffc:	4b10      	ldr	r3, [pc, #64]	; (1040 <sd_mmc_wait_end_of_read_blocks+0x60>)
     ffe:	881b      	ldrh	r3, [r3, #0]
    1000:	2b01      	cmp	r3, #1
    1002:	d00f      	beq.n	1024 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1004:	2100      	movs	r1, #0
    1006:	480f      	ldr	r0, [pc, #60]	; (1044 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1008:	4b0f      	ldr	r3, [pc, #60]	; (1048 <sd_mmc_wait_end_of_read_blocks+0x68>)
    100a:	4798      	blx	r3
    100c:	2800      	cmp	r0, #0
    100e:	d00d      	beq.n	102c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1010:	4b0e      	ldr	r3, [pc, #56]	; (104c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1012:	4798      	blx	r3
	return SD_MMC_OK;
    1014:	2300      	movs	r3, #0
    1016:	e7ea      	b.n	fee <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1018:	4b08      	ldr	r3, [pc, #32]	; (103c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    101a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    101c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    101e:	2a00      	cmp	r2, #0
    1020:	d0ec      	beq.n	ffc <sd_mmc_wait_end_of_read_blocks+0x1c>
    1022:	e7e4      	b.n	fee <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    1024:	4b09      	ldr	r3, [pc, #36]	; (104c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1026:	4798      	blx	r3
		return SD_MMC_OK;
    1028:	2300      	movs	r3, #0
    102a:	e7e0      	b.n	fee <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    102c:	2100      	movs	r1, #0
    102e:	4805      	ldr	r0, [pc, #20]	; (1044 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1030:	4b05      	ldr	r3, [pc, #20]	; (1048 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1032:	4798      	blx	r3
    1034:	e7ec      	b.n	1010 <sd_mmc_wait_end_of_read_blocks+0x30>
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	0000190d 	.word	0x0000190d
    103c:	200000b8 	.word	0x200000b8
    1040:	200000ba 	.word	0x200000ba
    1044:	0000310c 	.word	0x0000310c
    1048:	000017e5 	.word	0x000017e5
    104c:	000009ed 	.word	0x000009ed

00001050 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1050:	b570      	push	{r4, r5, r6, lr}
    1052:	b082      	sub	sp, #8
    1054:	000e      	movs	r6, r1
    1056:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1058:	4b11      	ldr	r3, [pc, #68]	; (10a0 <sd_mmc_init_write_blocks+0x50>)
    105a:	4798      	blx	r3
    105c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    105e:	d116      	bne.n	108e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1060:	2d01      	cmp	r5, #1
    1062:	d917      	bls.n	1094 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1064:	480f      	ldr	r0, [pc, #60]	; (10a4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1066:	4b10      	ldr	r3, [pc, #64]	; (10a8 <sd_mmc_init_write_blocks+0x58>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	7adb      	ldrb	r3, [r3, #11]
    106c:	071b      	lsls	r3, r3, #28
    106e:	d400      	bmi.n	1072 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1070:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1072:	2301      	movs	r3, #1
    1074:	9300      	str	r3, [sp, #0]
    1076:	002b      	movs	r3, r5
    1078:	2280      	movs	r2, #128	; 0x80
    107a:	0092      	lsls	r2, r2, #2
    107c:	0031      	movs	r1, r6
    107e:	4e0b      	ldr	r6, [pc, #44]	; (10ac <sd_mmc_init_write_blocks+0x5c>)
    1080:	47b0      	blx	r6
    1082:	2800      	cmp	r0, #0
    1084:	d008      	beq.n	1098 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1086:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <sd_mmc_init_write_blocks+0x60>)
    1088:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    108a:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <sd_mmc_init_write_blocks+0x64>)
    108c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    108e:	0020      	movs	r0, r4
    1090:	b002      	add	sp, #8
    1092:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1094:	4808      	ldr	r0, [pc, #32]	; (10b8 <sd_mmc_init_write_blocks+0x68>)
    1096:	e7e6      	b.n	1066 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    1098:	4b08      	ldr	r3, [pc, #32]	; (10bc <sd_mmc_init_write_blocks+0x6c>)
    109a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    109c:	2405      	movs	r4, #5
    109e:	e7f6      	b.n	108e <sd_mmc_init_write_blocks+0x3e>
    10a0:	0000090d 	.word	0x0000090d
    10a4:	00109119 	.word	0x00109119
    10a8:	20000094 	.word	0x20000094
    10ac:	00001655 	.word	0x00001655
    10b0:	200000b8 	.word	0x200000b8
    10b4:	200000ba 	.word	0x200000ba
    10b8:	00089118 	.word	0x00089118
    10bc:	000009ed 	.word	0x000009ed

000010c0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    10c0:	b510      	push	{r4, lr}
    10c2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    10c4:	4b07      	ldr	r3, [pc, #28]	; (10e4 <sd_mmc_start_write_blocks+0x24>)
    10c6:	4798      	blx	r3
    10c8:	2800      	cmp	r0, #0
    10ca:	d104      	bne.n	10d6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    10cc:	2200      	movs	r2, #0
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <sd_mmc_start_write_blocks+0x28>)
    10d0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    10d2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    10d4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    10d6:	4a04      	ldr	r2, [pc, #16]	; (10e8 <sd_mmc_start_write_blocks+0x28>)
    10d8:	8813      	ldrh	r3, [r2, #0]
    10da:	1b1c      	subs	r4, r3, r4
    10dc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    10de:	2000      	movs	r0, #0
    10e0:	e7f8      	b.n	10d4 <sd_mmc_start_write_blocks+0x14>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	00001911 	.word	0x00001911
    10e8:	200000b8 	.word	0x200000b8

000010ec <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    10ec:	b510      	push	{r4, lr}
    10ee:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    10f0:	4b0e      	ldr	r3, [pc, #56]	; (112c <sd_mmc_wait_end_of_write_blocks+0x40>)
    10f2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    10f4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    10f6:	2800      	cmp	r0, #0
    10f8:	d101      	bne.n	10fe <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    10fa:	0018      	movs	r0, r3
    10fc:	bd10      	pop	{r4, pc}
	if (abort) {
    10fe:	2c00      	cmp	r4, #0
    1100:	d00a      	beq.n	1118 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1102:	2200      	movs	r2, #0
    1104:	4b0a      	ldr	r3, [pc, #40]	; (1130 <sd_mmc_wait_end_of_write_blocks+0x44>)
    1106:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1108:	4b0a      	ldr	r3, [pc, #40]	; (1134 <sd_mmc_wait_end_of_write_blocks+0x48>)
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	2b01      	cmp	r3, #1
    110e:	d009      	beq.n	1124 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1110:	4b09      	ldr	r3, [pc, #36]	; (1138 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1112:	4798      	blx	r3
	return SD_MMC_OK;
    1114:	2300      	movs	r3, #0
    1116:	e7f0      	b.n	10fa <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1118:	4b05      	ldr	r3, [pc, #20]	; (1130 <sd_mmc_wait_end_of_write_blocks+0x44>)
    111a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    111c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    111e:	2a00      	cmp	r2, #0
    1120:	d0f2      	beq.n	1108 <sd_mmc_wait_end_of_write_blocks+0x1c>
    1122:	e7ea      	b.n	10fa <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1126:	4798      	blx	r3
		return SD_MMC_OK;
    1128:	2300      	movs	r3, #0
    112a:	e7e6      	b.n	10fa <sd_mmc_wait_end_of_write_blocks+0xe>
    112c:	00001991 	.word	0x00001991
    1130:	200000b8 	.word	0x200000b8
    1134:	200000ba 	.word	0x200000ba
    1138:	000009ed 	.word	0x000009ed

0000113c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    113c:	b510      	push	{r4, lr}
    113e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    1140:	4b0f      	ldr	r3, [pc, #60]	; (1180 <sd_mmc_test_unit_ready+0x44>)
    1142:	4798      	blx	r3
    1144:	2801      	cmp	r0, #1
    1146:	d019      	beq.n	117c <sd_mmc_test_unit_ready+0x40>
    1148:	2800      	cmp	r0, #0
    114a:	d003      	beq.n	1154 <sd_mmc_test_unit_ready+0x18>
    114c:	2802      	cmp	r0, #2
    114e:	d010      	beq.n	1172 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    1150:	2001      	movs	r0, #1
	}
}
    1152:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    1154:	4b0b      	ldr	r3, [pc, #44]	; (1184 <sd_mmc_test_unit_ready+0x48>)
    1156:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    1158:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    115a:	2b00      	cmp	r3, #0
    115c:	d1f9      	bne.n	1152 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    115e:	0020      	movs	r0, r4
    1160:	4b09      	ldr	r3, [pc, #36]	; (1188 <sd_mmc_test_unit_ready+0x4c>)
    1162:	4798      	blx	r3
    1164:	0003      	movs	r3, r0
    1166:	2003      	movs	r0, #3
    1168:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    116a:	4243      	negs	r3, r0
    116c:	4158      	adcs	r0, r3
    116e:	0040      	lsls	r0, r0, #1
    1170:	e7ef      	b.n	1152 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    1172:	2200      	movs	r2, #0
    1174:	4b03      	ldr	r3, [pc, #12]	; (1184 <sd_mmc_test_unit_ready+0x48>)
    1176:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    1178:	2002      	movs	r0, #2
    117a:	e7ea      	b.n	1152 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    117c:	2003      	movs	r0, #3
    117e:	e7e8      	b.n	1152 <sd_mmc_test_unit_ready+0x16>
    1180:	00000a29 	.word	0x00000a29
    1184:	200000c0 	.word	0x200000c0
    1188:	00000ed9 	.word	0x00000ed9

0000118c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    118c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    118e:	2000      	movs	r0, #0
    1190:	4b01      	ldr	r3, [pc, #4]	; (1198 <sd_mmc_test_unit_ready_0+0xc>)
    1192:	4798      	blx	r3
}
    1194:	bd10      	pop	{r4, pc}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	0000113d 	.word	0x0000113d

0000119c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	0004      	movs	r4, r0
    11a0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <sd_mmc_read_capacity+0x18>)
    11a4:	4798      	blx	r3
    11a6:	0040      	lsls	r0, r0, #1
    11a8:	3801      	subs	r0, #1
    11aa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    11ac:	0020      	movs	r0, r4
    11ae:	4b02      	ldr	r3, [pc, #8]	; (11b8 <sd_mmc_read_capacity+0x1c>)
    11b0:	4798      	blx	r3
}
    11b2:	bd70      	pop	{r4, r5, r6, pc}
    11b4:	00000f01 	.word	0x00000f01
    11b8:	0000113d 	.word	0x0000113d

000011bc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    11bc:	b510      	push	{r4, lr}
    11be:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    11c0:	2000      	movs	r0, #0
    11c2:	4b01      	ldr	r3, [pc, #4]	; (11c8 <sd_mmc_read_capacity_0+0xc>)
    11c4:	4798      	blx	r3
}
    11c6:	bd10      	pop	{r4, pc}
    11c8:	0000119d 	.word	0x0000119d

000011cc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    11cc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    11ce:	2000      	movs	r0, #0
    11d0:	4b01      	ldr	r3, [pc, #4]	; (11d8 <sd_mmc_wr_protect_0+0xc>)
    11d2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	00000f29 	.word	0x00000f29

000011dc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    11dc:	b510      	push	{r4, lr}
    11de:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    11e0:	2201      	movs	r2, #1
    11e2:	4b0c      	ldr	r3, [pc, #48]	; (1214 <sd_mmc_mem_2_ram+0x38>)
    11e4:	4798      	blx	r3
    11e6:	2800      	cmp	r0, #0
    11e8:	d004      	beq.n	11f4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    11ea:	3802      	subs	r0, #2
    11ec:	4243      	negs	r3, r0
    11ee:	4158      	adcs	r0, r3
    11f0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    11f2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    11f4:	2101      	movs	r1, #1
    11f6:	0020      	movs	r0, r4
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <sd_mmc_mem_2_ram+0x3c>)
    11fa:	4798      	blx	r3
    11fc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    11fe:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1200:	2b00      	cmp	r3, #0
    1202:	d1f6      	bne.n	11f2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1204:	2000      	movs	r0, #0
    1206:	4b05      	ldr	r3, [pc, #20]	; (121c <sd_mmc_mem_2_ram+0x40>)
    1208:	4798      	blx	r3
    120a:	1e43      	subs	r3, r0, #1
    120c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    120e:	b2c0      	uxtb	r0, r0
    1210:	e7ef      	b.n	11f2 <sd_mmc_mem_2_ram+0x16>
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	00000f2d 	.word	0x00000f2d
    1218:	00000fb5 	.word	0x00000fb5
    121c:	00000fe1 	.word	0x00000fe1

00001220 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1220:	b510      	push	{r4, lr}
    1222:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    1224:	0001      	movs	r1, r0
    1226:	2000      	movs	r0, #0
    1228:	4b01      	ldr	r3, [pc, #4]	; (1230 <sd_mmc_mem_2_ram_0+0x10>)
    122a:	4798      	blx	r3
}
    122c:	bd10      	pop	{r4, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	000011dd 	.word	0x000011dd

00001234 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1234:	b510      	push	{r4, lr}
    1236:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1238:	2201      	movs	r2, #1
    123a:	4b0c      	ldr	r3, [pc, #48]	; (126c <sd_mmc_ram_2_mem+0x38>)
    123c:	4798      	blx	r3
    123e:	2800      	cmp	r0, #0
    1240:	d004      	beq.n	124c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    1242:	3802      	subs	r0, #2
    1244:	4243      	negs	r3, r0
    1246:	4158      	adcs	r0, r3
    1248:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    124a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    124c:	2101      	movs	r1, #1
    124e:	0020      	movs	r0, r4
    1250:	4b07      	ldr	r3, [pc, #28]	; (1270 <sd_mmc_ram_2_mem+0x3c>)
    1252:	4798      	blx	r3
    1254:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1256:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1258:	2b00      	cmp	r3, #0
    125a:	d1f6      	bne.n	124a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    125c:	2000      	movs	r0, #0
    125e:	4b05      	ldr	r3, [pc, #20]	; (1274 <sd_mmc_ram_2_mem+0x40>)
    1260:	4798      	blx	r3
    1262:	1e43      	subs	r3, r0, #1
    1264:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    1266:	b2c0      	uxtb	r0, r0
    1268:	e7ef      	b.n	124a <sd_mmc_ram_2_mem+0x16>
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	00001051 	.word	0x00001051
    1270:	000010c1 	.word	0x000010c1
    1274:	000010ed 	.word	0x000010ed

00001278 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1278:	b510      	push	{r4, lr}
    127a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    127c:	0001      	movs	r1, r0
    127e:	2000      	movs	r0, #0
    1280:	4b01      	ldr	r3, [pc, #4]	; (1288 <sd_mmc_ram_2_mem_0+0x10>)
    1282:	4798      	blx	r3
}
    1284:	bd10      	pop	{r4, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	00001235 	.word	0x00001235

0000128c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    128c:	b500      	push	{lr}
    128e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    1290:	466b      	mov	r3, sp
    1292:	1dd9      	adds	r1, r3, #7
    1294:	23ff      	movs	r3, #255	; 0xff
    1296:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    1298:	2201      	movs	r2, #1
    129a:	480b      	ldr	r0, [pc, #44]	; (12c8 <sd_mmc_spi_start_write_block+0x3c>)
    129c:	4b0b      	ldr	r3, [pc, #44]	; (12cc <sd_mmc_spi_start_write_block+0x40>)
    129e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    12a0:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <sd_mmc_spi_start_write_block+0x44>)
    12a2:	881b      	ldrh	r3, [r3, #0]
    12a4:	2b01      	cmp	r3, #1
    12a6:	d00a      	beq.n	12be <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    12a8:	22fc      	movs	r2, #252	; 0xfc
    12aa:	466b      	mov	r3, sp
    12ac:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    12ae:	2201      	movs	r2, #1
    12b0:	466b      	mov	r3, sp
    12b2:	1d99      	adds	r1, r3, #6
    12b4:	4804      	ldr	r0, [pc, #16]	; (12c8 <sd_mmc_spi_start_write_block+0x3c>)
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <sd_mmc_spi_start_write_block+0x40>)
    12b8:	4798      	blx	r3
}
    12ba:	b003      	add	sp, #12
    12bc:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    12be:	22fe      	movs	r2, #254	; 0xfe
    12c0:	466b      	mov	r3, sp
    12c2:	719a      	strb	r2, [r3, #6]
    12c4:	e7f3      	b.n	12ae <sd_mmc_spi_start_write_block+0x22>
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	200000c4 	.word	0x200000c4
    12cc:	0000259d 	.word	0x0000259d
    12d0:	20000108 	.word	0x20000108

000012d4 <sd_mmc_spi_wait_busy>:
{
    12d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    12d8:	466b      	mov	r3, sp
    12da:	1ddc      	adds	r4, r3, #7
    12dc:	23ff      	movs	r3, #255	; 0xff
    12de:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12e0:	4e12      	ldr	r6, [pc, #72]	; (132c <sd_mmc_spi_wait_busy+0x58>)
    12e2:	2201      	movs	r2, #1
    12e4:	0021      	movs	r1, r4
    12e6:	0030      	movs	r0, r6
    12e8:	4d11      	ldr	r5, [pc, #68]	; (1330 <sd_mmc_spi_wait_busy+0x5c>)
    12ea:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12ec:	23ff      	movs	r3, #255	; 0xff
    12ee:	2201      	movs	r2, #1
    12f0:	0021      	movs	r1, r4
    12f2:	0030      	movs	r0, r6
    12f4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12f6:	23ff      	movs	r3, #255	; 0xff
    12f8:	2201      	movs	r2, #1
    12fa:	0021      	movs	r1, r4
    12fc:	0030      	movs	r0, r6
    12fe:	47a8      	blx	r5
    1300:	4c0c      	ldr	r4, [pc, #48]	; (1334 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    1302:	466b      	mov	r3, sp
    1304:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1306:	4e09      	ldr	r6, [pc, #36]	; (132c <sd_mmc_spi_wait_busy+0x58>)
    1308:	4f09      	ldr	r7, [pc, #36]	; (1330 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    130a:	782b      	ldrb	r3, [r5, #0]
    130c:	2bff      	cmp	r3, #255	; 0xff
    130e:	d009      	beq.n	1324 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1310:	23ff      	movs	r3, #255	; 0xff
    1312:	2201      	movs	r2, #1
    1314:	0029      	movs	r1, r5
    1316:	0030      	movs	r0, r6
    1318:	47b8      	blx	r7
    131a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    131c:	2c00      	cmp	r4, #0
    131e:	d1f4      	bne.n	130a <sd_mmc_spi_wait_busy+0x36>
			return false;
    1320:	2000      	movs	r0, #0
    1322:	e000      	b.n	1326 <sd_mmc_spi_wait_busy+0x52>
	return true;
    1324:	2001      	movs	r0, #1
}
    1326:	b003      	add	sp, #12
    1328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	200000c4 	.word	0x200000c4
    1330:	000023d5 	.word	0x000023d5
    1334:	00030d40 	.word	0x00030d40

00001338 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    1338:	b570      	push	{r4, r5, r6, lr}
    133a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    133c:	4b14      	ldr	r3, [pc, #80]	; (1390 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    133e:	881c      	ldrh	r4, [r3, #0]
    1340:	2c01      	cmp	r4, #1
    1342:	d023      	beq.n	138c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    1344:	4b13      	ldr	r3, [pc, #76]	; (1394 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    1346:	8819      	ldrh	r1, [r3, #0]
    1348:	4b13      	ldr	r3, [pc, #76]	; (1398 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    134a:	6818      	ldr	r0, [r3, #0]
    134c:	4b13      	ldr	r3, [pc, #76]	; (139c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    134e:	4798      	blx	r3
		return true; // It is not the End of multi write
    1350:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    1352:	4284      	cmp	r4, r0
    1354:	d902      	bls.n	135c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    1356:	0018      	movs	r0, r3
    1358:	b002      	add	sp, #8
    135a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    135c:	466b      	mov	r3, sp
    135e:	1ddc      	adds	r4, r3, #7
    1360:	23ff      	movs	r3, #255	; 0xff
    1362:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1364:	4e0e      	ldr	r6, [pc, #56]	; (13a0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    1366:	2201      	movs	r2, #1
    1368:	0021      	movs	r1, r4
    136a:	0030      	movs	r0, r6
    136c:	4d0d      	ldr	r5, [pc, #52]	; (13a4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    136e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    1370:	23fd      	movs	r3, #253	; 0xfd
    1372:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1374:	2201      	movs	r2, #1
    1376:	0021      	movs	r1, r4
    1378:	0030      	movs	r0, r6
    137a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    137c:	4b0a      	ldr	r3, [pc, #40]	; (13a8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    137e:	4798      	blx	r3
    1380:	1e03      	subs	r3, r0, #0
    1382:	d1e8      	bne.n	1356 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1384:	2105      	movs	r1, #5
    1386:	4a09      	ldr	r2, [pc, #36]	; (13ac <sd_mmc_spi_stop_multiwrite_block+0x74>)
    1388:	7011      	strb	r1, [r2, #0]
		return false;
    138a:	e7e4      	b.n	1356 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    138c:	2301      	movs	r3, #1
    138e:	e7e2      	b.n	1356 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1390:	20000108 	.word	0x20000108
    1394:	20000100 	.word	0x20000100
    1398:	20000110 	.word	0x20000110
    139c:	000059c1 	.word	0x000059c1
    13a0:	200000c4 	.word	0x200000c4
    13a4:	0000259d 	.word	0x0000259d
    13a8:	000012d5 	.word	0x000012d5
    13ac:	20000107 	.word	0x20000107

000013b0 <sd_mmc_spi_start_read_block>:
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	b083      	sub	sp, #12
	token = 0;
    13b4:	2200      	movs	r2, #0
    13b6:	466b      	mov	r3, sp
    13b8:	71da      	strb	r2, [r3, #7]
    13ba:	4c14      	ldr	r4, [pc, #80]	; (140c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    13bc:	466b      	mov	r3, sp
    13be:	1ddd      	adds	r5, r3, #7
    13c0:	4e13      	ldr	r6, [pc, #76]	; (1410 <sd_mmc_spi_start_read_block+0x60>)
    13c2:	4f14      	ldr	r7, [pc, #80]	; (1414 <sd_mmc_spi_start_read_block+0x64>)
    13c4:	23ff      	movs	r3, #255	; 0xff
    13c6:	2201      	movs	r2, #1
    13c8:	0029      	movs	r1, r5
    13ca:	0030      	movs	r0, r6
    13cc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    13ce:	782b      	ldrb	r3, [r5, #0]
    13d0:	220f      	movs	r2, #15
    13d2:	0019      	movs	r1, r3
    13d4:	4391      	bics	r1, r2
    13d6:	1e0a      	subs	r2, r1, #0
    13d8:	d009      	beq.n	13ee <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    13da:	2bfe      	cmp	r3, #254	; 0xfe
    13dc:	d013      	beq.n	1406 <sd_mmc_spi_start_read_block+0x56>
    13de:	3c01      	subs	r4, #1
		if (i-- == 0) {
    13e0:	2c00      	cmp	r4, #0
    13e2:	d1ef      	bne.n	13c4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    13e4:	2204      	movs	r2, #4
    13e6:	4b0c      	ldr	r3, [pc, #48]	; (1418 <sd_mmc_spi_start_read_block+0x68>)
    13e8:	701a      	strb	r2, [r3, #0]
			return false;
    13ea:	2000      	movs	r0, #0
    13ec:	e00c      	b.n	1408 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    13ee:	075b      	lsls	r3, r3, #29
    13f0:	d004      	beq.n	13fc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    13f2:	3207      	adds	r2, #7
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <sd_mmc_spi_start_read_block+0x68>)
    13f6:	701a      	strb	r2, [r3, #0]
			return false;
    13f8:	2000      	movs	r0, #0
    13fa:	e005      	b.n	1408 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    13fc:	220b      	movs	r2, #11
    13fe:	4b06      	ldr	r3, [pc, #24]	; (1418 <sd_mmc_spi_start_read_block+0x68>)
    1400:	701a      	strb	r2, [r3, #0]
			return false;
    1402:	2000      	movs	r0, #0
    1404:	e000      	b.n	1408 <sd_mmc_spi_start_read_block+0x58>
	return true;
    1406:	2001      	movs	r0, #1
}
    1408:	b003      	add	sp, #12
    140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    140c:	0007a120 	.word	0x0007a120
    1410:	200000c4 	.word	0x200000c4
    1414:	000023d5 	.word	0x000023d5
    1418:	20000107 	.word	0x20000107

0000141c <sd_mmc_spi_stop_write_block>:
{
    141c:	b530      	push	{r4, r5, lr}
    141e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1420:	a901      	add	r1, sp, #4
    1422:	2301      	movs	r3, #1
    1424:	425b      	negs	r3, r3
    1426:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1428:	4d14      	ldr	r5, [pc, #80]	; (147c <sd_mmc_spi_stop_write_block+0x60>)
    142a:	2202      	movs	r2, #2
    142c:	0028      	movs	r0, r5
    142e:	4b14      	ldr	r3, [pc, #80]	; (1480 <sd_mmc_spi_stop_write_block+0x64>)
    1430:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    1432:	466b      	mov	r3, sp
    1434:	1ddc      	adds	r4, r3, #7
    1436:	23ff      	movs	r3, #255	; 0xff
    1438:	2201      	movs	r2, #1
    143a:	0021      	movs	r1, r4
    143c:	0028      	movs	r0, r5
    143e:	4d11      	ldr	r5, [pc, #68]	; (1484 <sd_mmc_spi_stop_write_block+0x68>)
    1440:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    1442:	7822      	ldrb	r2, [r4, #0]
    1444:	2311      	movs	r3, #17
    1446:	4013      	ands	r3, r2
    1448:	2b01      	cmp	r3, #1
    144a:	d005      	beq.n	1458 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    144c:	2201      	movs	r2, #1
    144e:	4b0e      	ldr	r3, [pc, #56]	; (1488 <sd_mmc_spi_stop_write_block+0x6c>)
    1450:	701a      	strb	r2, [r3, #0]
		return false;
    1452:	2000      	movs	r0, #0
}
    1454:	b003      	add	sp, #12
    1456:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    1458:	231e      	movs	r3, #30
    145a:	401a      	ands	r2, r3
    145c:	2a04      	cmp	r2, #4
    145e:	d00b      	beq.n	1478 <sd_mmc_spi_stop_write_block+0x5c>
    1460:	2a0a      	cmp	r2, #10
    1462:	d104      	bne.n	146e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    1464:	3a02      	subs	r2, #2
    1466:	4b08      	ldr	r3, [pc, #32]	; (1488 <sd_mmc_spi_stop_write_block+0x6c>)
    1468:	701a      	strb	r2, [r3, #0]
		return false;
    146a:	2000      	movs	r0, #0
    146c:	e7f2      	b.n	1454 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    146e:	220a      	movs	r2, #10
    1470:	4b05      	ldr	r3, [pc, #20]	; (1488 <sd_mmc_spi_stop_write_block+0x6c>)
    1472:	701a      	strb	r2, [r3, #0]
		return false;
    1474:	2000      	movs	r0, #0
    1476:	e7ed      	b.n	1454 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    1478:	2001      	movs	r0, #1
    147a:	e7eb      	b.n	1454 <sd_mmc_spi_stop_write_block+0x38>
    147c:	200000c4 	.word	0x200000c4
    1480:	0000259d 	.word	0x0000259d
    1484:	000023d5 	.word	0x000023d5
    1488:	20000107 	.word	0x20000107

0000148c <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    148c:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    148e:	4802      	ldr	r0, [pc, #8]	; (1498 <sd_mmc_deinit+0xc>)
    1490:	4b02      	ldr	r3, [pc, #8]	; (149c <sd_mmc_deinit+0x10>)
    1492:	4798      	blx	r3
}
    1494:	bd10      	pop	{r4, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	200000c4 	.word	0x200000c4
    149c:	000020f9 	.word	0x000020f9

000014a0 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    14a4:	2300      	movs	r3, #0
    14a6:	4a2d      	ldr	r2, [pc, #180]	; (155c <sd_mmc_spi_init+0xbc>)
    14a8:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    14aa:	ac02      	add	r4, sp, #8
    14ac:	2501      	movs	r5, #1
    14ae:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    14b0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    14b2:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    14b4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    14b6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    14b8:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    14ba:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    14bc:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    14be:	2224      	movs	r2, #36	; 0x24
    14c0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    14c2:	3a18      	subs	r2, #24
    14c4:	2100      	movs	r1, #0
    14c6:	a808      	add	r0, sp, #32
    14c8:	4b25      	ldr	r3, [pc, #148]	; (1560 <sd_mmc_spi_init+0xc0>)
    14ca:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    14cc:	2380      	movs	r3, #128	; 0x80
    14ce:	025b      	lsls	r3, r3, #9
    14d0:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    14d2:	4b24      	ldr	r3, [pc, #144]	; (1564 <sd_mmc_spi_init+0xc4>)
    14d4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    14d6:	4b24      	ldr	r3, [pc, #144]	; (1568 <sd_mmc_spi_init+0xc8>)
    14d8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    14da:	4b24      	ldr	r3, [pc, #144]	; (156c <sd_mmc_spi_init+0xcc>)
    14dc:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    14de:	4b24      	ldr	r3, [pc, #144]	; (1570 <sd_mmc_spi_init+0xd0>)
    14e0:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    14e2:	4b24      	ldr	r3, [pc, #144]	; (1574 <sd_mmc_spi_init+0xd4>)
    14e4:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    14e6:	4e24      	ldr	r6, [pc, #144]	; (1578 <sd_mmc_spi_init+0xd8>)
    14e8:	0022      	movs	r2, r4
    14ea:	4924      	ldr	r1, [pc, #144]	; (157c <sd_mmc_spi_init+0xdc>)
    14ec:	0030      	movs	r0, r6
    14ee:	4b24      	ldr	r3, [pc, #144]	; (1580 <sd_mmc_spi_init+0xe0>)
    14f0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14f2:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14f4:	0020      	movs	r0, r4
    14f6:	4b23      	ldr	r3, [pc, #140]	; (1584 <sd_mmc_spi_init+0xe4>)
    14f8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14fa:	231f      	movs	r3, #31
    14fc:	4018      	ands	r0, r3
    14fe:	4085      	lsls	r5, r0
    1500:	4b21      	ldr	r3, [pc, #132]	; (1588 <sd_mmc_spi_init+0xe8>)
    1502:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1504:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1506:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1508:	2b00      	cmp	r3, #0
    150a:	d1fc      	bne.n	1506 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    150c:	6823      	ldr	r3, [r4, #0]
    150e:	2202      	movs	r2, #2
    1510:	4313      	orrs	r3, r2
    1512:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1514:	4a1d      	ldr	r2, [pc, #116]	; (158c <sd_mmc_spi_init+0xec>)
    1516:	2300      	movs	r3, #0
    1518:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    151a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    151c:	491c      	ldr	r1, [pc, #112]	; (1590 <sd_mmc_spi_init+0xf0>)
    151e:	7808      	ldrb	r0, [r1, #0]
    1520:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1522:	4c1c      	ldr	r4, [pc, #112]	; (1594 <sd_mmc_spi_init+0xf4>)
    1524:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1526:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1528:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    152a:	a901      	add	r1, sp, #4
    152c:	2201      	movs	r2, #1
    152e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1530:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1532:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1534:	4b18      	ldr	r3, [pc, #96]	; (1598 <sd_mmc_spi_init+0xf8>)
    1536:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1538:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    153a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    153c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    153e:	2900      	cmp	r1, #0
    1540:	d104      	bne.n	154c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    1542:	0953      	lsrs	r3, r2, #5
    1544:	01db      	lsls	r3, r3, #7
    1546:	4915      	ldr	r1, [pc, #84]	; (159c <sd_mmc_spi_init+0xfc>)
    1548:	468c      	mov	ip, r1
    154a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    154c:	211f      	movs	r1, #31
    154e:	4011      	ands	r1, r2
    1550:	2201      	movs	r2, #1
    1552:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1554:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    1556:	b010      	add	sp, #64	; 0x40
    1558:	bd70      	pop	{r4, r5, r6, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	20000107 	.word	0x20000107
    1560:	00005d5d 	.word	0x00005d5d
    1564:	00100002 	.word	0x00100002
    1568:	00110002 	.word	0x00110002
    156c:	00120002 	.word	0x00120002
    1570:	00130002 	.word	0x00130002
    1574:	00061a80 	.word	0x00061a80
    1578:	200000c4 	.word	0x200000c4
    157c:	42000c00 	.word	0x42000c00
    1580:	000021fd 	.word	0x000021fd
    1584:	00002069 	.word	0x00002069
    1588:	e000e100 	.word	0xe000e100
    158c:	20000114 	.word	0x20000114
    1590:	20000008 	.word	0x20000008
    1594:	20000104 	.word	0x20000104
    1598:	00001ab9 	.word	0x00001ab9
    159c:	41004400 	.word	0x41004400

000015a0 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a2:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15a4:	2200      	movs	r2, #0
    15a6:	4b0d      	ldr	r3, [pc, #52]	; (15dc <sd_mmc_spi_select_device+0x3c>)
    15a8:	701a      	strb	r2, [r3, #0]
    15aa:	000c      	movs	r4, r1
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <sd_mmc_spi_select_device+0x40>)
    15ae:	4299      	cmp	r1, r3
    15b0:	d900      	bls.n	15b4 <sd_mmc_spi_select_device+0x14>
    15b2:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    15b4:	4d0b      	ldr	r5, [pc, #44]	; (15e4 <sd_mmc_spi_select_device+0x44>)
    15b6:	4e0c      	ldr	r6, [pc, #48]	; (15e8 <sd_mmc_spi_select_device+0x48>)
    15b8:	e001      	b.n	15be <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    15ba:	08e3      	lsrs	r3, r4, #3
    15bc:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    15be:	0021      	movs	r1, r4
    15c0:	0028      	movs	r0, r5
    15c2:	47b0      	blx	r6
    15c4:	2817      	cmp	r0, #23
    15c6:	d0f8      	beq.n	15ba <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    15c8:	0079      	lsls	r1, r7, #1
    15ca:	19cf      	adds	r7, r1, r7
    15cc:	4907      	ldr	r1, [pc, #28]	; (15ec <sd_mmc_spi_select_device+0x4c>)
    15ce:	19c9      	adds	r1, r1, r7
    15d0:	2201      	movs	r2, #1
    15d2:	4804      	ldr	r0, [pc, #16]	; (15e4 <sd_mmc_spi_select_device+0x44>)
    15d4:	4b06      	ldr	r3, [pc, #24]	; (15f0 <sd_mmc_spi_select_device+0x50>)
    15d6:	4798      	blx	r3
}
    15d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	20000107 	.word	0x20000107
    15e0:	00989680 	.word	0x00989680
    15e4:	200000c4 	.word	0x200000c4
    15e8:	00002145 	.word	0x00002145
    15ec:	20000104 	.word	0x20000104
    15f0:	000024a9 	.word	0x000024a9

000015f4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    15f4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15f6:	2200      	movs	r2, #0
    15f8:	4b04      	ldr	r3, [pc, #16]	; (160c <sd_mmc_spi_deselect_device+0x18>)
    15fa:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    15fc:	0041      	lsls	r1, r0, #1
    15fe:	1808      	adds	r0, r1, r0
    1600:	4903      	ldr	r1, [pc, #12]	; (1610 <sd_mmc_spi_deselect_device+0x1c>)
    1602:	1809      	adds	r1, r1, r0
    1604:	4803      	ldr	r0, [pc, #12]	; (1614 <sd_mmc_spi_deselect_device+0x20>)
    1606:	4b04      	ldr	r3, [pc, #16]	; (1618 <sd_mmc_spi_deselect_device+0x24>)
    1608:	4798      	blx	r3
}
    160a:	bd10      	pop	{r4, pc}
    160c:	20000107 	.word	0x20000107
    1610:	20000104 	.word	0x20000104
    1614:	200000c4 	.word	0x200000c4
    1618:	000024a9 	.word	0x000024a9

0000161c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1620:	22ff      	movs	r2, #255	; 0xff
    1622:	466b      	mov	r3, sp
    1624:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1626:	2200      	movs	r2, #0
    1628:	4b07      	ldr	r3, [pc, #28]	; (1648 <sd_mmc_spi_send_clock+0x2c>)
    162a:	701a      	strb	r2, [r3, #0]
    162c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    162e:	4e07      	ldr	r6, [pc, #28]	; (164c <sd_mmc_spi_send_clock+0x30>)
    1630:	4d07      	ldr	r5, [pc, #28]	; (1650 <sd_mmc_spi_send_clock+0x34>)
    1632:	2201      	movs	r2, #1
    1634:	466b      	mov	r3, sp
    1636:	1dd9      	adds	r1, r3, #7
    1638:	0030      	movs	r0, r6
    163a:	47a8      	blx	r5
    163c:	3c01      	subs	r4, #1
    163e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    1640:	2c00      	cmp	r4, #0
    1642:	d1f6      	bne.n	1632 <sd_mmc_spi_send_clock+0x16>
	}
}
    1644:	b002      	add	sp, #8
    1646:	bd70      	pop	{r4, r5, r6, pc}
    1648:	20000107 	.word	0x20000107
    164c:	200000c4 	.word	0x200000c4
    1650:	0000259d 	.word	0x0000259d

00001654 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	46c6      	mov	lr, r8
    1658:	b500      	push	{lr}
    165a:	b086      	sub	sp, #24
    165c:	4680      	mov	r8, r0
    165e:	9200      	str	r2, [sp, #0]
    1660:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    1662:	22ff      	movs	r2, #255	; 0xff
    1664:	230f      	movs	r3, #15
    1666:	a802      	add	r0, sp, #8
    1668:	4684      	mov	ip, r0
    166a:	4463      	add	r3, ip
    166c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    166e:	2200      	movs	r2, #0
    1670:	4b53      	ldr	r3, [pc, #332]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    1672:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    1674:	ab04      	add	r3, sp, #16
    1676:	323f      	adds	r2, #63	; 0x3f
    1678:	4640      	mov	r0, r8
    167a:	4002      	ands	r2, r0
    167c:	2040      	movs	r0, #64	; 0x40
    167e:	4302      	orrs	r2, r0
    1680:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    1682:	0e0a      	lsrs	r2, r1, #24
    1684:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    1686:	0c0a      	lsrs	r2, r1, #16
    1688:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    168a:	0a0a      	lsrs	r2, r1, #8
    168c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    168e:	7119      	strb	r1, [r3, #4]
    1690:	2700      	movs	r7, #0
	crc = 0;
    1692:	2300      	movs	r3, #0
		value = *buf++;
    1694:	a904      	add	r1, sp, #16
    1696:	2208      	movs	r2, #8
				crc ^= 0x09;
    1698:	2409      	movs	r4, #9
    169a:	e011      	b.n	16c0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    169c:	0076      	lsls	r6, r6, #1
    169e:	b2f6      	uxtb	r6, r6
    16a0:	3801      	subs	r0, #1
    16a2:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    16a4:	2800      	cmp	r0, #0
    16a6:	d008      	beq.n	16ba <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    16a8:	005b      	lsls	r3, r3, #1
    16aa:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    16ac:	001d      	movs	r5, r3
    16ae:	4075      	eors	r5, r6
    16b0:	062d      	lsls	r5, r5, #24
    16b2:	d5f3      	bpl.n	169c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    16b4:	4063      	eors	r3, r4
    16b6:	b2db      	uxtb	r3, r3
    16b8:	e7f0      	b.n	169c <sd_mmc_spi_adtc_start+0x48>
    16ba:	3701      	adds	r7, #1
	while (size--) {
    16bc:	2f05      	cmp	r7, #5
    16be:	d002      	beq.n	16c6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    16c0:	5c7e      	ldrb	r6, [r7, r1]
    16c2:	0010      	movs	r0, r2
    16c4:	e7f0      	b.n	16a8 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    16c6:	005b      	lsls	r3, r3, #1
    16c8:	2201      	movs	r2, #1
    16ca:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    16cc:	ac04      	add	r4, sp, #16
    16ce:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    16d0:	4e3c      	ldr	r6, [pc, #240]	; (17c4 <sd_mmc_spi_adtc_start+0x170>)
    16d2:	2201      	movs	r2, #1
    16d4:	210f      	movs	r1, #15
    16d6:	ab02      	add	r3, sp, #8
    16d8:	469c      	mov	ip, r3
    16da:	4461      	add	r1, ip
    16dc:	0030      	movs	r0, r6
    16de:	4f3a      	ldr	r7, [pc, #232]	; (17c8 <sd_mmc_spi_adtc_start+0x174>)
    16e0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    16e2:	2206      	movs	r2, #6
    16e4:	0021      	movs	r1, r4
    16e6:	0030      	movs	r0, r6
    16e8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    16ea:	ab02      	add	r3, sp, #8
    16ec:	1dd9      	adds	r1, r3, #7
    16ee:	23ff      	movs	r3, #255	; 0xff
    16f0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    16f2:	2201      	movs	r2, #1
    16f4:	0030      	movs	r0, r6
    16f6:	4e35      	ldr	r6, [pc, #212]	; (17cc <sd_mmc_spi_adtc_start+0x178>)
    16f8:	47b0      	blx	r6
    16fa:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    16fc:	ab02      	add	r3, sp, #8
    16fe:	1dde      	adds	r6, r3, #7
    1700:	4f30      	ldr	r7, [pc, #192]	; (17c4 <sd_mmc_spi_adtc_start+0x170>)
    1702:	4d32      	ldr	r5, [pc, #200]	; (17cc <sd_mmc_spi_adtc_start+0x178>)
    1704:	23ff      	movs	r3, #255	; 0xff
    1706:	2201      	movs	r2, #1
    1708:	0031      	movs	r1, r6
    170a:	0038      	movs	r0, r7
    170c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    170e:	7833      	ldrb	r3, [r6, #0]
    1710:	b25a      	sxtb	r2, r3
    1712:	2a00      	cmp	r2, #0
    1714:	da0b      	bge.n	172e <sd_mmc_spi_adtc_start+0xda>
    1716:	3c01      	subs	r4, #1
    1718:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    171a:	2c00      	cmp	r4, #0
    171c:	d1f2      	bne.n	1704 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    171e:	2202      	movs	r2, #2
    1720:	4b27      	ldr	r3, [pc, #156]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    1722:	701a      	strb	r2, [r3, #0]
			return false;
    1724:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1726:	b006      	add	sp, #24
    1728:	bc04      	pop	{r2}
    172a:	4690      	mov	r8, r2
    172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    172e:	4a28      	ldr	r2, [pc, #160]	; (17d0 <sd_mmc_spi_adtc_start+0x17c>)
    1730:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    1732:	071a      	lsls	r2, r3, #28
    1734:	d41a      	bmi.n	176c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    1736:	075a      	lsls	r2, r3, #29
    1738:	d41d      	bmi.n	1776 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    173a:	2201      	movs	r2, #1
    173c:	4393      	bics	r3, r2
    173e:	d11f      	bne.n	1780 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    1740:	4643      	mov	r3, r8
    1742:	049b      	lsls	r3, r3, #18
    1744:	d420      	bmi.n	1788 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    1746:	4643      	mov	r3, r8
    1748:	059b      	lsls	r3, r3, #22
    174a:	d425      	bmi.n	1798 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    174c:	4643      	mov	r3, r8
    174e:	055b      	lsls	r3, r3, #21
    1750:	d42b      	bmi.n	17aa <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    1752:	4b20      	ldr	r3, [pc, #128]	; (17d4 <sd_mmc_spi_adtc_start+0x180>)
    1754:	466a      	mov	r2, sp
    1756:	8812      	ldrh	r2, [r2, #0]
    1758:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    175a:	4b1f      	ldr	r3, [pc, #124]	; (17d8 <sd_mmc_spi_adtc_start+0x184>)
    175c:	466a      	mov	r2, sp
    175e:	8892      	ldrh	r2, [r2, #4]
    1760:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    1762:	2200      	movs	r2, #0
    1764:	4b1d      	ldr	r3, [pc, #116]	; (17dc <sd_mmc_spi_adtc_start+0x188>)
    1766:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1768:	2001      	movs	r0, #1
    176a:	e7dc      	b.n	1726 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    176c:	2206      	movs	r2, #6
    176e:	4b14      	ldr	r3, [pc, #80]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    1770:	701a      	strb	r2, [r3, #0]
		return false;
    1772:	2000      	movs	r0, #0
    1774:	e7d7      	b.n	1726 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    1776:	2209      	movs	r2, #9
    1778:	4b11      	ldr	r3, [pc, #68]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    177a:	701a      	strb	r2, [r3, #0]
		return false;
    177c:	2000      	movs	r0, #0
    177e:	e7d2      	b.n	1726 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1780:	4b0f      	ldr	r3, [pc, #60]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    1782:	701a      	strb	r2, [r3, #0]
		return false;
    1784:	2000      	movs	r0, #0
    1786:	e7ce      	b.n	1726 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1788:	4b15      	ldr	r3, [pc, #84]	; (17e0 <sd_mmc_spi_adtc_start+0x18c>)
    178a:	4798      	blx	r3
    178c:	2800      	cmp	r0, #0
    178e:	d1da      	bne.n	1746 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1790:	2203      	movs	r2, #3
    1792:	4b0b      	ldr	r3, [pc, #44]	; (17c0 <sd_mmc_spi_adtc_start+0x16c>)
    1794:	701a      	strb	r2, [r3, #0]
			return false;
    1796:	e7c6      	b.n	1726 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1798:	490d      	ldr	r1, [pc, #52]	; (17d0 <sd_mmc_spi_adtc_start+0x17c>)
    179a:	2300      	movs	r3, #0
    179c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    179e:	33ff      	adds	r3, #255	; 0xff
    17a0:	2201      	movs	r2, #1
    17a2:	4808      	ldr	r0, [pc, #32]	; (17c4 <sd_mmc_spi_adtc_start+0x170>)
    17a4:	4e09      	ldr	r6, [pc, #36]	; (17cc <sd_mmc_spi_adtc_start+0x178>)
    17a6:	47b0      	blx	r6
    17a8:	e7d0      	b.n	174c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    17aa:	4e09      	ldr	r6, [pc, #36]	; (17d0 <sd_mmc_spi_adtc_start+0x17c>)
    17ac:	23ff      	movs	r3, #255	; 0xff
    17ae:	2204      	movs	r2, #4
    17b0:	0031      	movs	r1, r6
    17b2:	4804      	ldr	r0, [pc, #16]	; (17c4 <sd_mmc_spi_adtc_start+0x170>)
    17b4:	4f05      	ldr	r7, [pc, #20]	; (17cc <sd_mmc_spi_adtc_start+0x178>)
    17b6:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    17b8:	6833      	ldr	r3, [r6, #0]
    17ba:	ba1b      	rev	r3, r3
    17bc:	6033      	str	r3, [r6, #0]
    17be:	e7c8      	b.n	1752 <sd_mmc_spi_adtc_start+0xfe>
    17c0:	20000107 	.word	0x20000107
    17c4:	200000c4 	.word	0x200000c4
    17c8:	0000259d 	.word	0x0000259d
    17cc:	000023d5 	.word	0x000023d5
    17d0:	2000010c 	.word	0x2000010c
    17d4:	20000100 	.word	0x20000100
    17d8:	20000108 	.word	0x20000108
    17dc:	20000110 	.word	0x20000110
    17e0:	000012d5 	.word	0x000012d5

000017e4 <sd_mmc_spi_send_cmd>:
{
    17e4:	b510      	push	{r4, lr}
    17e6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    17e8:	2300      	movs	r3, #0
    17ea:	9300      	str	r3, [sp, #0]
    17ec:	2200      	movs	r2, #0
    17ee:	4c02      	ldr	r4, [pc, #8]	; (17f8 <sd_mmc_spi_send_cmd+0x14>)
    17f0:	47a0      	blx	r4
}
    17f2:	b002      	add	sp, #8
    17f4:	bd10      	pop	{r4, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	00001655 	.word	0x00001655

000017fc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    17fc:	4b01      	ldr	r3, [pc, #4]	; (1804 <sd_mmc_spi_get_response+0x8>)
    17fe:	6818      	ldr	r0, [r3, #0]
}
    1800:	4770      	bx	lr
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	2000010c 	.word	0x2000010c

00001808 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1808:	b510      	push	{r4, lr}
    180a:	b084      	sub	sp, #16
    180c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    180e:	2200      	movs	r2, #0
    1810:	4b14      	ldr	r3, [pc, #80]	; (1864 <sd_mmc_spi_read_word+0x5c>)
    1812:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1814:	4b14      	ldr	r3, [pc, #80]	; (1868 <sd_mmc_spi_read_word+0x60>)
    1816:	8819      	ldrh	r1, [r3, #0]
    1818:	4b14      	ldr	r3, [pc, #80]	; (186c <sd_mmc_spi_read_word+0x64>)
    181a:	6818      	ldr	r0, [r3, #0]
    181c:	4b14      	ldr	r3, [pc, #80]	; (1870 <sd_mmc_spi_read_word+0x68>)
    181e:	4798      	blx	r3
    1820:	2900      	cmp	r1, #0
    1822:	d103      	bne.n	182c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1824:	4b13      	ldr	r3, [pc, #76]	; (1874 <sd_mmc_spi_read_word+0x6c>)
    1826:	4798      	blx	r3
    1828:	2800      	cmp	r0, #0
    182a:	d010      	beq.n	184e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    182c:	23ff      	movs	r3, #255	; 0xff
    182e:	2204      	movs	r2, #4
    1830:	a901      	add	r1, sp, #4
    1832:	4811      	ldr	r0, [pc, #68]	; (1878 <sd_mmc_spi_read_word+0x70>)
    1834:	4c11      	ldr	r4, [pc, #68]	; (187c <sd_mmc_spi_read_word+0x74>)
    1836:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1838:	4b0c      	ldr	r3, [pc, #48]	; (186c <sd_mmc_spi_read_word+0x64>)
    183a:	681a      	ldr	r2, [r3, #0]
    183c:	1d10      	adds	r0, r2, #4
    183e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1840:	4b09      	ldr	r3, [pc, #36]	; (1868 <sd_mmc_spi_read_word+0x60>)
    1842:	8819      	ldrh	r1, [r3, #0]
    1844:	4b0a      	ldr	r3, [pc, #40]	; (1870 <sd_mmc_spi_read_word+0x68>)
    1846:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1848:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    184a:	2900      	cmp	r1, #0
    184c:	d001      	beq.n	1852 <sd_mmc_spi_read_word+0x4a>
}
    184e:	b004      	add	sp, #16
    1850:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1852:	23ff      	movs	r3, #255	; 0xff
    1854:	2202      	movs	r2, #2
    1856:	a903      	add	r1, sp, #12
    1858:	4807      	ldr	r0, [pc, #28]	; (1878 <sd_mmc_spi_read_word+0x70>)
    185a:	4c08      	ldr	r4, [pc, #32]	; (187c <sd_mmc_spi_read_word+0x74>)
    185c:	47a0      	blx	r4
	return true;
    185e:	2001      	movs	r0, #1
    1860:	e7f5      	b.n	184e <sd_mmc_spi_read_word+0x46>
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	20000107 	.word	0x20000107
    1868:	20000100 	.word	0x20000100
    186c:	20000110 	.word	0x20000110
    1870:	00005acd 	.word	0x00005acd
    1874:	000013b1 	.word	0x000013b1
    1878:	200000c4 	.word	0x200000c4
    187c:	000023d5 	.word	0x000023d5

00001880 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	46de      	mov	lr, fp
    1884:	4657      	mov	r7, sl
    1886:	4646      	mov	r6, r8
    1888:	b5c0      	push	{r6, r7, lr}
    188a:	b082      	sub	sp, #8
    188c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    188e:	2200      	movs	r2, #0
    1890:	4b17      	ldr	r3, [pc, #92]	; (18f0 <sd_mmc_spi_start_read_blocks+0x70>)
    1892:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1894:	1e4c      	subs	r4, r1, #1
    1896:	b2a4      	uxth	r4, r4
    1898:	2900      	cmp	r1, #0
    189a:	d026      	beq.n	18ea <sd_mmc_spi_start_read_blocks+0x6a>
    189c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    189e:	4b15      	ldr	r3, [pc, #84]	; (18f4 <sd_mmc_spi_start_read_blocks+0x74>)
    18a0:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    18a2:	4f15      	ldr	r7, [pc, #84]	; (18f8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    18a4:	47d0      	blx	sl
    18a6:	4680      	mov	r8, r0
    18a8:	2800      	cmp	r0, #0
    18aa:	d017      	beq.n	18dc <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    18ac:	883a      	ldrh	r2, [r7, #0]
    18ae:	465b      	mov	r3, fp
    18b0:	1999      	adds	r1, r3, r6
    18b2:	23ff      	movs	r3, #255	; 0xff
    18b4:	4811      	ldr	r0, [pc, #68]	; (18fc <sd_mmc_spi_start_read_blocks+0x7c>)
    18b6:	4d12      	ldr	r5, [pc, #72]	; (1900 <sd_mmc_spi_start_read_blocks+0x80>)
    18b8:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    18ba:	883b      	ldrh	r3, [r7, #0]
    18bc:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    18be:	4a11      	ldr	r2, [pc, #68]	; (1904 <sd_mmc_spi_start_read_blocks+0x84>)
    18c0:	6811      	ldr	r1, [r2, #0]
    18c2:	468c      	mov	ip, r1
    18c4:	4463      	add	r3, ip
    18c6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    18c8:	23ff      	movs	r3, #255	; 0xff
    18ca:	2202      	movs	r2, #2
    18cc:	a901      	add	r1, sp, #4
    18ce:	480b      	ldr	r0, [pc, #44]	; (18fc <sd_mmc_spi_start_read_blocks+0x7c>)
    18d0:	47a8      	blx	r5
	while (nb_block--) {
    18d2:	3c01      	subs	r4, #1
    18d4:	b2a4      	uxth	r4, r4
    18d6:	4b0c      	ldr	r3, [pc, #48]	; (1908 <sd_mmc_spi_start_read_blocks+0x88>)
    18d8:	429c      	cmp	r4, r3
    18da:	d1e3      	bne.n	18a4 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    18dc:	4640      	mov	r0, r8
    18de:	b002      	add	sp, #8
    18e0:	bc1c      	pop	{r2, r3, r4}
    18e2:	4690      	mov	r8, r2
    18e4:	469a      	mov	sl, r3
    18e6:	46a3      	mov	fp, r4
    18e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    18ea:	2301      	movs	r3, #1
    18ec:	4698      	mov	r8, r3
    18ee:	e7f5      	b.n	18dc <sd_mmc_spi_start_read_blocks+0x5c>
    18f0:	20000107 	.word	0x20000107
    18f4:	000013b1 	.word	0x000013b1
    18f8:	20000100 	.word	0x20000100
    18fc:	200000c4 	.word	0x200000c4
    1900:	000023d5 	.word	0x000023d5
    1904:	20000110 	.word	0x20000110
    1908:	0000ffff 	.word	0x0000ffff

0000190c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    190c:	2001      	movs	r0, #1
    190e:	4770      	bx	lr

00001910 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
    1912:	46c6      	mov	lr, r8
    1914:	b500      	push	{lr}
    1916:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1918:	2200      	movs	r2, #0
    191a:	4b15      	ldr	r3, [pc, #84]	; (1970 <sd_mmc_spi_start_write_blocks+0x60>)
    191c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    191e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1920:	4f14      	ldr	r7, [pc, #80]	; (1974 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1922:	4e15      	ldr	r6, [pc, #84]	; (1978 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1924:	e000      	b.n	1928 <sd_mmc_spi_start_write_blocks+0x18>
{
    1926:	0021      	movs	r1, r4
	while (nb_block--) {
    1928:	1e4c      	subs	r4, r1, #1
    192a:	b2a4      	uxth	r4, r4
    192c:	2900      	cmp	r1, #0
    192e:	d01b      	beq.n	1968 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1930:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1932:	8832      	ldrh	r2, [r6, #0]
    1934:	4643      	mov	r3, r8
    1936:	1959      	adds	r1, r3, r5
    1938:	4810      	ldr	r0, [pc, #64]	; (197c <sd_mmc_spi_start_write_blocks+0x6c>)
    193a:	4b11      	ldr	r3, [pc, #68]	; (1980 <sd_mmc_spi_start_write_blocks+0x70>)
    193c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    193e:	8833      	ldrh	r3, [r6, #0]
    1940:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1942:	4a10      	ldr	r2, [pc, #64]	; (1984 <sd_mmc_spi_start_write_blocks+0x74>)
    1944:	6811      	ldr	r1, [r2, #0]
    1946:	468c      	mov	ip, r1
    1948:	4463      	add	r3, ip
    194a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    194c:	4b0e      	ldr	r3, [pc, #56]	; (1988 <sd_mmc_spi_start_write_blocks+0x78>)
    194e:	4798      	blx	r3
    1950:	2800      	cmp	r0, #0
    1952:	d00a      	beq.n	196a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1954:	2c00      	cmp	r4, #0
    1956:	d0e6      	beq.n	1926 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1958:	4b0c      	ldr	r3, [pc, #48]	; (198c <sd_mmc_spi_start_write_blocks+0x7c>)
    195a:	4798      	blx	r3
    195c:	2800      	cmp	r0, #0
    195e:	d1e2      	bne.n	1926 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1960:	2205      	movs	r2, #5
    1962:	4b03      	ldr	r3, [pc, #12]	; (1970 <sd_mmc_spi_start_write_blocks+0x60>)
    1964:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1966:	e000      	b.n	196a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1968:	2001      	movs	r0, #1
}
    196a:	bc04      	pop	{r2}
    196c:	4690      	mov	r8, r2
    196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1970:	20000107 	.word	0x20000107
    1974:	0000128d 	.word	0x0000128d
    1978:	20000100 	.word	0x20000100
    197c:	200000c4 	.word	0x200000c4
    1980:	0000259d 	.word	0x0000259d
    1984:	20000110 	.word	0x20000110
    1988:	0000141d 	.word	0x0000141d
    198c:	000012d5 	.word	0x000012d5

00001990 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1990:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1994:	4798      	blx	r3
    1996:	2800      	cmp	r0, #0
    1998:	d103      	bne.n	19a2 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    199a:	2205      	movs	r2, #5
    199c:	4b03      	ldr	r3, [pc, #12]	; (19ac <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    199e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    19a0:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    19a2:	4b03      	ldr	r3, [pc, #12]	; (19b0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    19a4:	4798      	blx	r3
    19a6:	e7fb      	b.n	19a0 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    19a8:	000012d5 	.word	0x000012d5
    19ac:	20000107 	.word	0x20000107
    19b0:	00001339 	.word	0x00001339

000019b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    19b4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    19b6:	2301      	movs	r3, #1
    19b8:	2800      	cmp	r0, #0
    19ba:	d001      	beq.n	19c0 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    19bc:	0018      	movs	r0, r3
    19be:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    19c0:	4b01      	ldr	r3, [pc, #4]	; (19c8 <mem_test_unit_ready+0x14>)
    19c2:	4798      	blx	r3
    19c4:	0003      	movs	r3, r0
    19c6:	e7f9      	b.n	19bc <mem_test_unit_ready+0x8>
    19c8:	0000118d 	.word	0x0000118d

000019cc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    19cc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    19ce:	2301      	movs	r3, #1
    19d0:	2800      	cmp	r0, #0
    19d2:	d001      	beq.n	19d8 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    19d4:	0018      	movs	r0, r3
    19d6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    19d8:	0008      	movs	r0, r1
    19da:	4b02      	ldr	r3, [pc, #8]	; (19e4 <mem_read_capacity+0x18>)
    19dc:	4798      	blx	r3
    19de:	0003      	movs	r3, r0
    19e0:	e7f8      	b.n	19d4 <mem_read_capacity+0x8>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	000011bd 	.word	0x000011bd

000019e8 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    19e8:	4243      	negs	r3, r0
    19ea:	4158      	adcs	r0, r3
    19ec:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    19ee:	4770      	bx	lr

000019f0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    19f0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    19f2:	2301      	movs	r3, #1
    19f4:	2800      	cmp	r0, #0
    19f6:	d001      	beq.n	19fc <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    19f8:	0018      	movs	r0, r3
    19fa:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    19fc:	4b01      	ldr	r3, [pc, #4]	; (1a04 <mem_wr_protect+0x14>)
    19fe:	4798      	blx	r3
    1a00:	0003      	movs	r3, r0
    1a02:	e7f9      	b.n	19f8 <mem_wr_protect+0x8>
    1a04:	000011cd 	.word	0x000011cd

00001a08 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    1a08:	b510      	push	{r4, lr}
    1a0a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1a0c:	2301      	movs	r3, #1
    1a0e:	2800      	cmp	r0, #0
    1a10:	d001      	beq.n	1a16 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1a12:	0018      	movs	r0, r3
    1a14:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1a16:	0011      	movs	r1, r2
    1a18:	0020      	movs	r0, r4
    1a1a:	4b02      	ldr	r3, [pc, #8]	; (1a24 <memory_2_ram+0x1c>)
    1a1c:	4798      	blx	r3
    1a1e:	0003      	movs	r3, r0
    1a20:	e7f7      	b.n	1a12 <memory_2_ram+0xa>
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	00001221 	.word	0x00001221

00001a28 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    1a28:	b510      	push	{r4, lr}
    1a2a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1a2c:	2301      	movs	r3, #1
    1a2e:	2800      	cmp	r0, #0
    1a30:	d001      	beq.n	1a36 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    1a32:	0018      	movs	r0, r3
    1a34:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1a36:	0011      	movs	r1, r2
    1a38:	0020      	movs	r0, r4
    1a3a:	4b02      	ldr	r3, [pc, #8]	; (1a44 <ram_2_memory+0x1c>)
    1a3c:	4798      	blx	r3
    1a3e:	0003      	movs	r3, r0
    1a40:	e7f7      	b.n	1a32 <ram_2_memory+0xa>
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	00001279 	.word	0x00001279

00001a48 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1a48:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <cpu_irq_enter_critical+0x34>)
    1a4a:	681b      	ldr	r3, [r3, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d106      	bne.n	1a5e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a50:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1a54:	2b00      	cmp	r3, #0
    1a56:	d007      	beq.n	1a68 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a58:	2200      	movs	r2, #0
    1a5a:	4b09      	ldr	r3, [pc, #36]	; (1a80 <cpu_irq_enter_critical+0x38>)
    1a5c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a5e:	4a07      	ldr	r2, [pc, #28]	; (1a7c <cpu_irq_enter_critical+0x34>)
    1a60:	6813      	ldr	r3, [r2, #0]
    1a62:	3301      	adds	r3, #1
    1a64:	6013      	str	r3, [r2, #0]
}
    1a66:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1a68:	b672      	cpsid	i
    1a6a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a6e:	2200      	movs	r2, #0
    1a70:	4b04      	ldr	r3, [pc, #16]	; (1a84 <cpu_irq_enter_critical+0x3c>)
    1a72:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a74:	3201      	adds	r2, #1
    1a76:	4b02      	ldr	r3, [pc, #8]	; (1a80 <cpu_irq_enter_critical+0x38>)
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	e7f0      	b.n	1a5e <cpu_irq_enter_critical+0x16>
    1a7c:	20000118 	.word	0x20000118
    1a80:	2000011c 	.word	0x2000011c
    1a84:	20000009 	.word	0x20000009

00001a88 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <cpu_irq_leave_critical+0x24>)
    1a8a:	681a      	ldr	r2, [r3, #0]
    1a8c:	3a01      	subs	r2, #1
    1a8e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d109      	bne.n	1aaa <cpu_irq_leave_critical+0x22>
    1a96:	4b06      	ldr	r3, [pc, #24]	; (1ab0 <cpu_irq_leave_critical+0x28>)
    1a98:	781b      	ldrb	r3, [r3, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d005      	beq.n	1aaa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a9e:	2201      	movs	r2, #1
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <cpu_irq_leave_critical+0x2c>)
    1aa2:	701a      	strb	r2, [r3, #0]
    1aa4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1aa8:	b662      	cpsie	i
	}
}
    1aaa:	4770      	bx	lr
    1aac:	20000118 	.word	0x20000118
    1ab0:	2000011c 	.word	0x2000011c
    1ab4:	20000009 	.word	0x20000009

00001ab8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ab8:	b500      	push	{lr}
    1aba:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1abc:	ab01      	add	r3, sp, #4
    1abe:	2280      	movs	r2, #128	; 0x80
    1ac0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1ac2:	780a      	ldrb	r2, [r1, #0]
    1ac4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1ac6:	784a      	ldrb	r2, [r1, #1]
    1ac8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1aca:	788a      	ldrb	r2, [r1, #2]
    1acc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1ace:	0019      	movs	r1, r3
    1ad0:	4b01      	ldr	r3, [pc, #4]	; (1ad8 <port_pin_set_config+0x20>)
    1ad2:	4798      	blx	r3
}
    1ad4:	b003      	add	sp, #12
    1ad6:	bd00      	pop	{pc}
    1ad8:	000035e1 	.word	0x000035e1

00001adc <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1adc:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1ade:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1ae0:	b25b      	sxtb	r3, r3
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	dbfb      	blt.n	1ade <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1ae6:	8813      	ldrh	r3, [r2, #0]
    1ae8:	2102      	movs	r1, #2
    1aea:	430b      	orrs	r3, r1
    1aec:	8013      	strh	r3, [r2, #0]
}
    1aee:	4770      	bx	lr

00001af0 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1af0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1af2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1af4:	b25b      	sxtb	r3, r3
    1af6:	2b00      	cmp	r3, #0
    1af8:	dbfb      	blt.n	1af2 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1afa:	23c1      	movs	r3, #193	; 0xc1
    1afc:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1afe:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1b00:	8813      	ldrh	r3, [r2, #0]
    1b02:	2102      	movs	r1, #2
    1b04:	438b      	bics	r3, r1
    1b06:	8013      	strh	r3, [r2, #0]
}
    1b08:	4770      	bx	lr
	...

00001b0c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b10:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1b12:	4b06      	ldr	r3, [pc, #24]	; (1b2c <rtc_calendar_reset+0x20>)
    1b14:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1b16:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b18:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1b1a:	b25b      	sxtb	r3, r3
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	dbfb      	blt.n	1b18 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1b20:	882b      	ldrh	r3, [r5, #0]
    1b22:	2201      	movs	r2, #1
    1b24:	4313      	orrs	r3, r2
    1b26:	802b      	strh	r3, [r5, #0]
}
    1b28:	bd70      	pop	{r4, r5, r6, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00001af1 	.word	0x00001af1

00001b30 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1b30:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1b32:	88cb      	ldrh	r3, [r1, #6]
    1b34:	88c2      	ldrh	r2, [r0, #6]
    1b36:	1a9a      	subs	r2, r3, r2
    1b38:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1b3a:	794b      	ldrb	r3, [r1, #5]
    1b3c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1b3e:	790c      	ldrb	r4, [r1, #4]
    1b40:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1b42:	4323      	orrs	r3, r4
    1b44:	788c      	ldrb	r4, [r1, #2]
    1b46:	0324      	lsls	r4, r4, #12
    1b48:	4323      	orrs	r3, r4
    1b4a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1b4c:	7902      	ldrb	r2, [r0, #4]
    1b4e:	2a00      	cmp	r2, #0
    1b50:	d105      	bne.n	1b5e <rtc_calendar_time_to_register_value+0x2e>
    1b52:	78ca      	ldrb	r2, [r1, #3]
    1b54:	2a00      	cmp	r2, #0
    1b56:	d002      	beq.n	1b5e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1b58:	2280      	movs	r2, #128	; 0x80
    1b5a:	0252      	lsls	r2, r2, #9
    1b5c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1b5e:	7848      	ldrb	r0, [r1, #1]
    1b60:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1b62:	780a      	ldrb	r2, [r1, #0]
    1b64:	4310      	orrs	r0, r2
    1b66:	4318      	orrs	r0, r3

	return register_value;
}
    1b68:	bd10      	pop	{r4, pc}

00001b6a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1b6a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b6c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1b6e:	88c4      	ldrh	r4, [r0, #6]
    1b70:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b72:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1b74:	018b      	lsls	r3, r1, #6
    1b76:	0f1b      	lsrs	r3, r3, #28
    1b78:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1b7a:	028b      	lsls	r3, r1, #10
    1b7c:	0edb      	lsrs	r3, r3, #27
    1b7e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1b80:	7903      	ldrb	r3, [r0, #4]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d10c      	bne.n	1ba0 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1b86:	040b      	lsls	r3, r1, #16
    1b88:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1b8a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1b8c:	03cb      	lsls	r3, r1, #15
    1b8e:	0fdb      	lsrs	r3, r3, #31
    1b90:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1b92:	0988      	lsrs	r0, r1, #6
    1b94:	233f      	movs	r3, #63	; 0x3f
    1b96:	4018      	ands	r0, r3
    1b98:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1b9a:	4019      	ands	r1, r3
    1b9c:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1b9e:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1ba0:	03cb      	lsls	r3, r1, #15
    1ba2:	0edb      	lsrs	r3, r3, #27
    1ba4:	7093      	strb	r3, [r2, #2]
    1ba6:	e7f4      	b.n	1b92 <rtc_calendar_register_value_to_time+0x28>

00001ba8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1ba8:	b510      	push	{r4, lr}
    1baa:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bac:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1bae:	7941      	ldrb	r1, [r0, #5]
    1bb0:	2900      	cmp	r1, #0
    1bb2:	d006      	beq.n	1bc2 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1bb4:	8859      	ldrh	r1, [r3, #2]
    1bb6:	0449      	lsls	r1, r1, #17
    1bb8:	d50b      	bpl.n	1bd2 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1bba:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1bbc:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <rtc_calendar_get_time+0x40>)
    1bbe:	4798      	blx	r3
}
    1bc0:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1bc2:	490a      	ldr	r1, [pc, #40]	; (1bec <rtc_calendar_get_time+0x44>)
    1bc4:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1bc6:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1bc8:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1bca:	b249      	sxtb	r1, r1
    1bcc:	2900      	cmp	r1, #0
    1bce:	dbfb      	blt.n	1bc8 <rtc_calendar_get_time+0x20>
    1bd0:	e7f3      	b.n	1bba <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1bd2:	8859      	ldrh	r1, [r3, #2]
    1bd4:	24c0      	movs	r4, #192	; 0xc0
    1bd6:	0224      	lsls	r4, r4, #8
    1bd8:	4321      	orrs	r1, r4
    1bda:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1bdc:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1bde:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1be0:	b249      	sxtb	r1, r1
    1be2:	2900      	cmp	r1, #0
    1be4:	dbfb      	blt.n	1bde <rtc_calendar_get_time+0x36>
    1be6:	e7e8      	b.n	1bba <rtc_calendar_get_time+0x12>
    1be8:	00001b6b 	.word	0x00001b6b
    1bec:	ffff8000 	.word	0xffff8000

00001bf0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	000d      	movs	r5, r1
    1bf4:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1bf6:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1bf8:	2a01      	cmp	r2, #1
    1bfa:	d901      	bls.n	1c00 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1bfc:	0018      	movs	r0, r3
    1bfe:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1c00:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <rtc_calendar_set_alarm+0x2c>)
    1c04:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1c06:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1c08:	b25b      	sxtb	r3, r3
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	dbfb      	blt.n	1c06 <rtc_calendar_set_alarm+0x16>
    1c0e:	00e4      	lsls	r4, r4, #3
    1c10:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1c12:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1c14:	7a2b      	ldrb	r3, [r5, #8]
    1c16:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1c18:	2300      	movs	r3, #0
    1c1a:	e7ef      	b.n	1bfc <rtc_calendar_set_alarm+0xc>
    1c1c:	00001b31 	.word	0x00001b31

00001c20 <rtc_calendar_init>:
{
    1c20:	b530      	push	{r4, r5, lr}
    1c22:	b083      	sub	sp, #12
    1c24:	0005      	movs	r5, r0
    1c26:	0014      	movs	r4, r2
	module->hw = hw;
    1c28:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1c2a:	4a1c      	ldr	r2, [pc, #112]	; (1c9c <rtc_calendar_init+0x7c>)
    1c2c:	6993      	ldr	r3, [r2, #24]
    1c2e:	2120      	movs	r1, #32
    1c30:	430b      	orrs	r3, r1
    1c32:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1c34:	a901      	add	r1, sp, #4
    1c36:	2302      	movs	r3, #2
    1c38:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1c3a:	2004      	movs	r0, #4
    1c3c:	4b18      	ldr	r3, [pc, #96]	; (1ca0 <rtc_calendar_init+0x80>)
    1c3e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1c40:	2004      	movs	r0, #4
    1c42:	4b18      	ldr	r3, [pc, #96]	; (1ca4 <rtc_calendar_init+0x84>)
    1c44:	4798      	blx	r3
	rtc_calendar_reset(module);
    1c46:	0028      	movs	r0, r5
    1c48:	4b17      	ldr	r3, [pc, #92]	; (1ca8 <rtc_calendar_init+0x88>)
    1c4a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1c4c:	7923      	ldrb	r3, [r4, #4]
    1c4e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1c50:	78e3      	ldrb	r3, [r4, #3]
    1c52:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1c54:	88e3      	ldrh	r3, [r4, #6]
    1c56:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1c58:	4b14      	ldr	r3, [pc, #80]	; (1cac <rtc_calendar_init+0x8c>)
    1c5a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1c5c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1c5e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1c60:	7921      	ldrb	r1, [r4, #4]
    1c62:	2900      	cmp	r1, #0
    1c64:	d017      	beq.n	1c96 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1c66:	2108      	movs	r1, #8
    1c68:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1c6a:	78a1      	ldrb	r1, [r4, #2]
    1c6c:	2900      	cmp	r1, #0
    1c6e:	d001      	beq.n	1c74 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1c70:	2180      	movs	r1, #128	; 0x80
    1c72:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1c74:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1c76:	78e3      	ldrb	r3, [r4, #3]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d004      	beq.n	1c86 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1c7c:	8853      	ldrh	r3, [r2, #2]
    1c7e:	2180      	movs	r1, #128	; 0x80
    1c80:	01c9      	lsls	r1, r1, #7
    1c82:	430b      	orrs	r3, r1
    1c84:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1c86:	0021      	movs	r1, r4
    1c88:	3108      	adds	r1, #8
    1c8a:	2200      	movs	r2, #0
    1c8c:	0028      	movs	r0, r5
    1c8e:	4b08      	ldr	r3, [pc, #32]	; (1cb0 <rtc_calendar_init+0x90>)
    1c90:	4798      	blx	r3
}
    1c92:	b003      	add	sp, #12
    1c94:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c96:	2148      	movs	r1, #72	; 0x48
    1c98:	430b      	orrs	r3, r1
    1c9a:	e7e6      	b.n	1c6a <rtc_calendar_init+0x4a>
    1c9c:	40000400 	.word	0x40000400
    1ca0:	000034e9 	.word	0x000034e9
    1ca4:	0000345d 	.word	0x0000345d
    1ca8:	00001b0d 	.word	0x00001b0d
    1cac:	200009c8 	.word	0x200009c8
    1cb0:	00001bf1 	.word	0x00001bf1

00001cb4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	46de      	mov	lr, fp
    1cb8:	4657      	mov	r7, sl
    1cba:	464e      	mov	r6, r9
    1cbc:	4645      	mov	r5, r8
    1cbe:	b5e0      	push	{r5, r6, r7, lr}
    1cc0:	b087      	sub	sp, #28
    1cc2:	4680      	mov	r8, r0
    1cc4:	9104      	str	r1, [sp, #16]
    1cc6:	0016      	movs	r6, r2
    1cc8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cca:	2200      	movs	r2, #0
    1ccc:	2300      	movs	r3, #0
    1cce:	2100      	movs	r1, #0
    1cd0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1cd2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cd4:	2001      	movs	r0, #1
    1cd6:	0021      	movs	r1, r4
    1cd8:	9600      	str	r6, [sp, #0]
    1cda:	9701      	str	r7, [sp, #4]
    1cdc:	465c      	mov	r4, fp
    1cde:	9403      	str	r4, [sp, #12]
    1ce0:	4644      	mov	r4, r8
    1ce2:	9405      	str	r4, [sp, #20]
    1ce4:	e013      	b.n	1d0e <long_division+0x5a>
    1ce6:	2420      	movs	r4, #32
    1ce8:	1a64      	subs	r4, r4, r1
    1cea:	0005      	movs	r5, r0
    1cec:	40e5      	lsrs	r5, r4
    1cee:	46a8      	mov	r8, r5
    1cf0:	e014      	b.n	1d1c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1cf2:	9c00      	ldr	r4, [sp, #0]
    1cf4:	9d01      	ldr	r5, [sp, #4]
    1cf6:	1b12      	subs	r2, r2, r4
    1cf8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1cfa:	465c      	mov	r4, fp
    1cfc:	464d      	mov	r5, r9
    1cfe:	432c      	orrs	r4, r5
    1d00:	46a3      	mov	fp, r4
    1d02:	9c03      	ldr	r4, [sp, #12]
    1d04:	4645      	mov	r5, r8
    1d06:	432c      	orrs	r4, r5
    1d08:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1d0a:	3901      	subs	r1, #1
    1d0c:	d325      	bcc.n	1d5a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1d0e:	2420      	movs	r4, #32
    1d10:	4264      	negs	r4, r4
    1d12:	190c      	adds	r4, r1, r4
    1d14:	d4e7      	bmi.n	1ce6 <long_division+0x32>
    1d16:	0005      	movs	r5, r0
    1d18:	40a5      	lsls	r5, r4
    1d1a:	46a8      	mov	r8, r5
    1d1c:	0004      	movs	r4, r0
    1d1e:	408c      	lsls	r4, r1
    1d20:	46a1      	mov	r9, r4
		r = r << 1;
    1d22:	1892      	adds	r2, r2, r2
    1d24:	415b      	adcs	r3, r3
    1d26:	0014      	movs	r4, r2
    1d28:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d2a:	9e05      	ldr	r6, [sp, #20]
    1d2c:	464f      	mov	r7, r9
    1d2e:	403e      	ands	r6, r7
    1d30:	46b4      	mov	ip, r6
    1d32:	9e04      	ldr	r6, [sp, #16]
    1d34:	4647      	mov	r7, r8
    1d36:	403e      	ands	r6, r7
    1d38:	46b2      	mov	sl, r6
    1d3a:	4666      	mov	r6, ip
    1d3c:	4657      	mov	r7, sl
    1d3e:	433e      	orrs	r6, r7
    1d40:	d003      	beq.n	1d4a <long_division+0x96>
			r |= 0x01;
    1d42:	0006      	movs	r6, r0
    1d44:	4326      	orrs	r6, r4
    1d46:	0032      	movs	r2, r6
    1d48:	002b      	movs	r3, r5
		if (r >= d) {
    1d4a:	9c00      	ldr	r4, [sp, #0]
    1d4c:	9d01      	ldr	r5, [sp, #4]
    1d4e:	429d      	cmp	r5, r3
    1d50:	d8db      	bhi.n	1d0a <long_division+0x56>
    1d52:	d1ce      	bne.n	1cf2 <long_division+0x3e>
    1d54:	4294      	cmp	r4, r2
    1d56:	d8d8      	bhi.n	1d0a <long_division+0x56>
    1d58:	e7cb      	b.n	1cf2 <long_division+0x3e>
    1d5a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1d5c:	4658      	mov	r0, fp
    1d5e:	0019      	movs	r1, r3
    1d60:	b007      	add	sp, #28
    1d62:	bc3c      	pop	{r2, r3, r4, r5}
    1d64:	4690      	mov	r8, r2
    1d66:	4699      	mov	r9, r3
    1d68:	46a2      	mov	sl, r4
    1d6a:	46ab      	mov	fp, r5
    1d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d6e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d6e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d70:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d72:	2340      	movs	r3, #64	; 0x40
    1d74:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d76:	4281      	cmp	r1, r0
    1d78:	d202      	bcs.n	1d80 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d7a:	0018      	movs	r0, r3
    1d7c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d7e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d80:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d82:	1c63      	adds	r3, r4, #1
    1d84:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d86:	4288      	cmp	r0, r1
    1d88:	d9f9      	bls.n	1d7e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d8a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d8c:	2cff      	cmp	r4, #255	; 0xff
    1d8e:	d8f4      	bhi.n	1d7a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d90:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d92:	2300      	movs	r3, #0
    1d94:	e7f1      	b.n	1d7a <_sercom_get_sync_baud_val+0xc>
	...

00001d98 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9a:	b083      	sub	sp, #12
    1d9c:	000f      	movs	r7, r1
    1d9e:	0016      	movs	r6, r2
    1da0:	aa08      	add	r2, sp, #32
    1da2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1da4:	0004      	movs	r4, r0
    1da6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1da8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1daa:	42bc      	cmp	r4, r7
    1dac:	d902      	bls.n	1db4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1dae:	0010      	movs	r0, r2
    1db0:	b003      	add	sp, #12
    1db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1db4:	2b00      	cmp	r3, #0
    1db6:	d114      	bne.n	1de2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1db8:	0002      	movs	r2, r0
    1dba:	0008      	movs	r0, r1
    1dbc:	2100      	movs	r1, #0
    1dbe:	4c19      	ldr	r4, [pc, #100]	; (1e24 <_sercom_get_async_baud_val+0x8c>)
    1dc0:	47a0      	blx	r4
    1dc2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1dc4:	003a      	movs	r2, r7
    1dc6:	2300      	movs	r3, #0
    1dc8:	2000      	movs	r0, #0
    1dca:	4c17      	ldr	r4, [pc, #92]	; (1e28 <_sercom_get_async_baud_val+0x90>)
    1dcc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1dce:	2200      	movs	r2, #0
    1dd0:	2301      	movs	r3, #1
    1dd2:	1a12      	subs	r2, r2, r0
    1dd4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1dd6:	0c12      	lsrs	r2, r2, #16
    1dd8:	041b      	lsls	r3, r3, #16
    1dda:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ddc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1dde:	2200      	movs	r2, #0
    1de0:	e7e5      	b.n	1dae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1de2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1de4:	2b01      	cmp	r3, #1
    1de6:	d1f9      	bne.n	1ddc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1de8:	000a      	movs	r2, r1
    1dea:	2300      	movs	r3, #0
    1dec:	2100      	movs	r1, #0
    1dee:	4c0d      	ldr	r4, [pc, #52]	; (1e24 <_sercom_get_async_baud_val+0x8c>)
    1df0:	47a0      	blx	r4
    1df2:	0002      	movs	r2, r0
    1df4:	000b      	movs	r3, r1
    1df6:	9200      	str	r2, [sp, #0]
    1df8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1dfa:	0038      	movs	r0, r7
    1dfc:	2100      	movs	r1, #0
    1dfe:	4c0a      	ldr	r4, [pc, #40]	; (1e28 <_sercom_get_async_baud_val+0x90>)
    1e00:	47a0      	blx	r4
    1e02:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1e04:	2380      	movs	r3, #128	; 0x80
    1e06:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e08:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1e0a:	4298      	cmp	r0, r3
    1e0c:	d8cf      	bhi.n	1dae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1e0e:	0f79      	lsrs	r1, r7, #29
    1e10:	00f8      	lsls	r0, r7, #3
    1e12:	9a00      	ldr	r2, [sp, #0]
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1e18:	00ea      	lsls	r2, r5, #3
    1e1a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1e1c:	b2d2      	uxtb	r2, r2
    1e1e:	0352      	lsls	r2, r2, #13
    1e20:	432a      	orrs	r2, r5
    1e22:	e7db      	b.n	1ddc <_sercom_get_async_baud_val+0x44>
    1e24:	00005cad 	.word	0x00005cad
    1e28:	00001cb5 	.word	0x00001cb5

00001e2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e2c:	b510      	push	{r4, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e32:	4b0e      	ldr	r3, [pc, #56]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d007      	beq.n	1e4a <sercom_set_gclk_generator+0x1e>
    1e3a:	2900      	cmp	r1, #0
    1e3c:	d105      	bne.n	1e4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1e3e:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e40:	785b      	ldrb	r3, [r3, #1]
    1e42:	4283      	cmp	r3, r0
    1e44:	d010      	beq.n	1e68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e46:	201d      	movs	r0, #29
    1e48:	e00c      	b.n	1e64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1e4a:	a901      	add	r1, sp, #4
    1e4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e4e:	2013      	movs	r0, #19
    1e50:	4b07      	ldr	r3, [pc, #28]	; (1e70 <sercom_set_gclk_generator+0x44>)
    1e52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e54:	2013      	movs	r0, #19
    1e56:	4b07      	ldr	r3, [pc, #28]	; (1e74 <sercom_set_gclk_generator+0x48>)
    1e58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <sercom_set_gclk_generator+0x40>)
    1e5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e5e:	2201      	movs	r2, #1
    1e60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e62:	2000      	movs	r0, #0
}
    1e64:	b002      	add	sp, #8
    1e66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e68:	2000      	movs	r0, #0
    1e6a:	e7fb      	b.n	1e64 <sercom_set_gclk_generator+0x38>
    1e6c:	20000120 	.word	0x20000120
    1e70:	000034e9 	.word	0x000034e9
    1e74:	0000345d 	.word	0x0000345d

00001e78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e78:	4b40      	ldr	r3, [pc, #256]	; (1f7c <_sercom_get_default_pad+0x104>)
    1e7a:	4298      	cmp	r0, r3
    1e7c:	d031      	beq.n	1ee2 <_sercom_get_default_pad+0x6a>
    1e7e:	d90a      	bls.n	1e96 <_sercom_get_default_pad+0x1e>
    1e80:	4b3f      	ldr	r3, [pc, #252]	; (1f80 <_sercom_get_default_pad+0x108>)
    1e82:	4298      	cmp	r0, r3
    1e84:	d04d      	beq.n	1f22 <_sercom_get_default_pad+0xaa>
    1e86:	4b3f      	ldr	r3, [pc, #252]	; (1f84 <_sercom_get_default_pad+0x10c>)
    1e88:	4298      	cmp	r0, r3
    1e8a:	d05a      	beq.n	1f42 <_sercom_get_default_pad+0xca>
    1e8c:	4b3e      	ldr	r3, [pc, #248]	; (1f88 <_sercom_get_default_pad+0x110>)
    1e8e:	4298      	cmp	r0, r3
    1e90:	d037      	beq.n	1f02 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e92:	2000      	movs	r0, #0
}
    1e94:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e96:	4b3d      	ldr	r3, [pc, #244]	; (1f8c <_sercom_get_default_pad+0x114>)
    1e98:	4298      	cmp	r0, r3
    1e9a:	d00c      	beq.n	1eb6 <_sercom_get_default_pad+0x3e>
    1e9c:	4b3c      	ldr	r3, [pc, #240]	; (1f90 <_sercom_get_default_pad+0x118>)
    1e9e:	4298      	cmp	r0, r3
    1ea0:	d1f7      	bne.n	1e92 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ea2:	2901      	cmp	r1, #1
    1ea4:	d017      	beq.n	1ed6 <_sercom_get_default_pad+0x5e>
    1ea6:	2900      	cmp	r1, #0
    1ea8:	d05d      	beq.n	1f66 <_sercom_get_default_pad+0xee>
    1eaa:	2902      	cmp	r1, #2
    1eac:	d015      	beq.n	1eda <_sercom_get_default_pad+0x62>
    1eae:	2903      	cmp	r1, #3
    1eb0:	d015      	beq.n	1ede <_sercom_get_default_pad+0x66>
	return 0;
    1eb2:	2000      	movs	r0, #0
    1eb4:	e7ee      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eb6:	2901      	cmp	r1, #1
    1eb8:	d007      	beq.n	1eca <_sercom_get_default_pad+0x52>
    1eba:	2900      	cmp	r1, #0
    1ebc:	d051      	beq.n	1f62 <_sercom_get_default_pad+0xea>
    1ebe:	2902      	cmp	r1, #2
    1ec0:	d005      	beq.n	1ece <_sercom_get_default_pad+0x56>
    1ec2:	2903      	cmp	r1, #3
    1ec4:	d005      	beq.n	1ed2 <_sercom_get_default_pad+0x5a>
	return 0;
    1ec6:	2000      	movs	r0, #0
    1ec8:	e7e4      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eca:	4832      	ldr	r0, [pc, #200]	; (1f94 <_sercom_get_default_pad+0x11c>)
    1ecc:	e7e2      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ece:	4832      	ldr	r0, [pc, #200]	; (1f98 <_sercom_get_default_pad+0x120>)
    1ed0:	e7e0      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ed2:	4832      	ldr	r0, [pc, #200]	; (1f9c <_sercom_get_default_pad+0x124>)
    1ed4:	e7de      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ed6:	4832      	ldr	r0, [pc, #200]	; (1fa0 <_sercom_get_default_pad+0x128>)
    1ed8:	e7dc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1eda:	4832      	ldr	r0, [pc, #200]	; (1fa4 <_sercom_get_default_pad+0x12c>)
    1edc:	e7da      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ede:	4832      	ldr	r0, [pc, #200]	; (1fa8 <_sercom_get_default_pad+0x130>)
    1ee0:	e7d8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1ee2:	2901      	cmp	r1, #1
    1ee4:	d007      	beq.n	1ef6 <_sercom_get_default_pad+0x7e>
    1ee6:	2900      	cmp	r1, #0
    1ee8:	d03f      	beq.n	1f6a <_sercom_get_default_pad+0xf2>
    1eea:	2902      	cmp	r1, #2
    1eec:	d005      	beq.n	1efa <_sercom_get_default_pad+0x82>
    1eee:	2903      	cmp	r1, #3
    1ef0:	d005      	beq.n	1efe <_sercom_get_default_pad+0x86>
	return 0;
    1ef2:	2000      	movs	r0, #0
    1ef4:	e7ce      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ef6:	482d      	ldr	r0, [pc, #180]	; (1fac <_sercom_get_default_pad+0x134>)
    1ef8:	e7cc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1efa:	482d      	ldr	r0, [pc, #180]	; (1fb0 <_sercom_get_default_pad+0x138>)
    1efc:	e7ca      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1efe:	482d      	ldr	r0, [pc, #180]	; (1fb4 <_sercom_get_default_pad+0x13c>)
    1f00:	e7c8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f02:	2901      	cmp	r1, #1
    1f04:	d007      	beq.n	1f16 <_sercom_get_default_pad+0x9e>
    1f06:	2900      	cmp	r1, #0
    1f08:	d031      	beq.n	1f6e <_sercom_get_default_pad+0xf6>
    1f0a:	2902      	cmp	r1, #2
    1f0c:	d005      	beq.n	1f1a <_sercom_get_default_pad+0xa2>
    1f0e:	2903      	cmp	r1, #3
    1f10:	d005      	beq.n	1f1e <_sercom_get_default_pad+0xa6>
	return 0;
    1f12:	2000      	movs	r0, #0
    1f14:	e7be      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f16:	4828      	ldr	r0, [pc, #160]	; (1fb8 <_sercom_get_default_pad+0x140>)
    1f18:	e7bc      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f1a:	4828      	ldr	r0, [pc, #160]	; (1fbc <_sercom_get_default_pad+0x144>)
    1f1c:	e7ba      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f1e:	4828      	ldr	r0, [pc, #160]	; (1fc0 <_sercom_get_default_pad+0x148>)
    1f20:	e7b8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f22:	2901      	cmp	r1, #1
    1f24:	d007      	beq.n	1f36 <_sercom_get_default_pad+0xbe>
    1f26:	2900      	cmp	r1, #0
    1f28:	d023      	beq.n	1f72 <_sercom_get_default_pad+0xfa>
    1f2a:	2902      	cmp	r1, #2
    1f2c:	d005      	beq.n	1f3a <_sercom_get_default_pad+0xc2>
    1f2e:	2903      	cmp	r1, #3
    1f30:	d005      	beq.n	1f3e <_sercom_get_default_pad+0xc6>
	return 0;
    1f32:	2000      	movs	r0, #0
    1f34:	e7ae      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f36:	4823      	ldr	r0, [pc, #140]	; (1fc4 <_sercom_get_default_pad+0x14c>)
    1f38:	e7ac      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f3a:	4823      	ldr	r0, [pc, #140]	; (1fc8 <_sercom_get_default_pad+0x150>)
    1f3c:	e7aa      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f3e:	4823      	ldr	r0, [pc, #140]	; (1fcc <_sercom_get_default_pad+0x154>)
    1f40:	e7a8      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f42:	2901      	cmp	r1, #1
    1f44:	d007      	beq.n	1f56 <_sercom_get_default_pad+0xde>
    1f46:	2900      	cmp	r1, #0
    1f48:	d015      	beq.n	1f76 <_sercom_get_default_pad+0xfe>
    1f4a:	2902      	cmp	r1, #2
    1f4c:	d005      	beq.n	1f5a <_sercom_get_default_pad+0xe2>
    1f4e:	2903      	cmp	r1, #3
    1f50:	d005      	beq.n	1f5e <_sercom_get_default_pad+0xe6>
	return 0;
    1f52:	2000      	movs	r0, #0
    1f54:	e79e      	b.n	1e94 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f56:	481e      	ldr	r0, [pc, #120]	; (1fd0 <_sercom_get_default_pad+0x158>)
    1f58:	e79c      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f5a:	481e      	ldr	r0, [pc, #120]	; (1fd4 <_sercom_get_default_pad+0x15c>)
    1f5c:	e79a      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f5e:	481e      	ldr	r0, [pc, #120]	; (1fd8 <_sercom_get_default_pad+0x160>)
    1f60:	e798      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f62:	481e      	ldr	r0, [pc, #120]	; (1fdc <_sercom_get_default_pad+0x164>)
    1f64:	e796      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f66:	2003      	movs	r0, #3
    1f68:	e794      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f6a:	481d      	ldr	r0, [pc, #116]	; (1fe0 <_sercom_get_default_pad+0x168>)
    1f6c:	e792      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f6e:	481d      	ldr	r0, [pc, #116]	; (1fe4 <_sercom_get_default_pad+0x16c>)
    1f70:	e790      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f72:	481d      	ldr	r0, [pc, #116]	; (1fe8 <_sercom_get_default_pad+0x170>)
    1f74:	e78e      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f76:	481d      	ldr	r0, [pc, #116]	; (1fec <_sercom_get_default_pad+0x174>)
    1f78:	e78c      	b.n	1e94 <_sercom_get_default_pad+0x1c>
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	42001000 	.word	0x42001000
    1f80:	42001800 	.word	0x42001800
    1f84:	42001c00 	.word	0x42001c00
    1f88:	42001400 	.word	0x42001400
    1f8c:	42000800 	.word	0x42000800
    1f90:	42000c00 	.word	0x42000c00
    1f94:	00050003 	.word	0x00050003
    1f98:	00060003 	.word	0x00060003
    1f9c:	00070003 	.word	0x00070003
    1fa0:	00010003 	.word	0x00010003
    1fa4:	001e0003 	.word	0x001e0003
    1fa8:	001f0003 	.word	0x001f0003
    1fac:	00090003 	.word	0x00090003
    1fb0:	000a0003 	.word	0x000a0003
    1fb4:	000b0003 	.word	0x000b0003
    1fb8:	00110003 	.word	0x00110003
    1fbc:	00120003 	.word	0x00120003
    1fc0:	00130003 	.word	0x00130003
    1fc4:	000d0003 	.word	0x000d0003
    1fc8:	000e0003 	.word	0x000e0003
    1fcc:	000f0003 	.word	0x000f0003
    1fd0:	00170003 	.word	0x00170003
    1fd4:	00180003 	.word	0x00180003
    1fd8:	00190003 	.word	0x00190003
    1fdc:	00040003 	.word	0x00040003
    1fe0:	00080003 	.word	0x00080003
    1fe4:	00100003 	.word	0x00100003
    1fe8:	000c0003 	.word	0x000c0003
    1fec:	00160003 	.word	0x00160003

00001ff0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ff0:	b530      	push	{r4, r5, lr}
    1ff2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ff4:	4b0b      	ldr	r3, [pc, #44]	; (2024 <STACK_SIZE+0x24>)
    1ff6:	466a      	mov	r2, sp
    1ff8:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ffa:	c232      	stmia	r2!, {r1, r4, r5}
    1ffc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ffe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2000:	9b00      	ldr	r3, [sp, #0]
    2002:	4283      	cmp	r3, r0
    2004:	d00b      	beq.n	201e <STACK_SIZE+0x1e>
    2006:	2301      	movs	r3, #1
    2008:	009a      	lsls	r2, r3, #2
    200a:	4669      	mov	r1, sp
    200c:	5852      	ldr	r2, [r2, r1]
    200e:	4282      	cmp	r2, r0
    2010:	d006      	beq.n	2020 <STACK_SIZE+0x20>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2012:	3301      	adds	r3, #1
    2014:	2b06      	cmp	r3, #6
    2016:	d1f7      	bne.n	2008 <STACK_SIZE+0x8>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2018:	2000      	movs	r0, #0
}
    201a:	b007      	add	sp, #28
    201c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    201e:	2300      	movs	r3, #0
			return i;
    2020:	b2d8      	uxtb	r0, r3
    2022:	e7fa      	b.n	201a <STACK_SIZE+0x1a>
    2024:	00006e64 	.word	0x00006e64

00002028 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2028:	4770      	bx	lr
	...

0000202c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    202e:	4b0a      	ldr	r3, [pc, #40]	; (2058 <_sercom_set_handler+0x2c>)
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2b00      	cmp	r3, #0
    2034:	d10c      	bne.n	2050 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2036:	4f09      	ldr	r7, [pc, #36]	; (205c <_sercom_set_handler+0x30>)
    2038:	4e09      	ldr	r6, [pc, #36]	; (2060 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    203a:	4d0a      	ldr	r5, [pc, #40]	; (2064 <_sercom_set_handler+0x38>)
    203c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    203e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2040:	195a      	adds	r2, r3, r5
    2042:	6014      	str	r4, [r2, #0]
    2044:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2046:	2b18      	cmp	r3, #24
    2048:	d1f9      	bne.n	203e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    204a:	2201      	movs	r2, #1
    204c:	4b02      	ldr	r3, [pc, #8]	; (2058 <_sercom_set_handler+0x2c>)
    204e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2050:	0080      	lsls	r0, r0, #2
    2052:	4b02      	ldr	r3, [pc, #8]	; (205c <_sercom_set_handler+0x30>)
    2054:	50c1      	str	r1, [r0, r3]
}
    2056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2058:	20000122 	.word	0x20000122
    205c:	20000124 	.word	0x20000124
    2060:	00002029 	.word	0x00002029
    2064:	200009cc 	.word	0x200009cc

00002068 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2068:	b500      	push	{lr}
    206a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    206c:	2309      	movs	r3, #9
    206e:	466a      	mov	r2, sp
    2070:	7013      	strb	r3, [r2, #0]
    2072:	3301      	adds	r3, #1
    2074:	7053      	strb	r3, [r2, #1]
    2076:	3301      	adds	r3, #1
    2078:	7093      	strb	r3, [r2, #2]
    207a:	3301      	adds	r3, #1
    207c:	70d3      	strb	r3, [r2, #3]
    207e:	3301      	adds	r3, #1
    2080:	7113      	strb	r3, [r2, #4]
    2082:	3301      	adds	r3, #1
    2084:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <_sercom_get_interrupt_vector+0x2c>)
    2088:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    208a:	466b      	mov	r3, sp
    208c:	5618      	ldrsb	r0, [r3, r0]
}
    208e:	b003      	add	sp, #12
    2090:	bd00      	pop	{pc}
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	00001ff1 	.word	0x00001ff1

00002098 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2098:	b510      	push	{r4, lr}
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <SERCOM0_Handler+0xc>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	2000      	movs	r0, #0
    20a0:	4798      	blx	r3
    20a2:	bd10      	pop	{r4, pc}
    20a4:	20000124 	.word	0x20000124

000020a8 <SERCOM1_Handler>:
    20a8:	b510      	push	{r4, lr}
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <SERCOM1_Handler+0xc>)
    20ac:	685b      	ldr	r3, [r3, #4]
    20ae:	2001      	movs	r0, #1
    20b0:	4798      	blx	r3
    20b2:	bd10      	pop	{r4, pc}
    20b4:	20000124 	.word	0x20000124

000020b8 <SERCOM2_Handler>:
    20b8:	b510      	push	{r4, lr}
    20ba:	4b02      	ldr	r3, [pc, #8]	; (20c4 <SERCOM2_Handler+0xc>)
    20bc:	689b      	ldr	r3, [r3, #8]
    20be:	2002      	movs	r0, #2
    20c0:	4798      	blx	r3
    20c2:	bd10      	pop	{r4, pc}
    20c4:	20000124 	.word	0x20000124

000020c8 <SERCOM3_Handler>:
    20c8:	b510      	push	{r4, lr}
    20ca:	4b02      	ldr	r3, [pc, #8]	; (20d4 <SERCOM3_Handler+0xc>)
    20cc:	68db      	ldr	r3, [r3, #12]
    20ce:	2003      	movs	r0, #3
    20d0:	4798      	blx	r3
    20d2:	bd10      	pop	{r4, pc}
    20d4:	20000124 	.word	0x20000124

000020d8 <SERCOM4_Handler>:
    20d8:	b510      	push	{r4, lr}
    20da:	4b02      	ldr	r3, [pc, #8]	; (20e4 <SERCOM4_Handler+0xc>)
    20dc:	691b      	ldr	r3, [r3, #16]
    20de:	2004      	movs	r0, #4
    20e0:	4798      	blx	r3
    20e2:	bd10      	pop	{r4, pc}
    20e4:	20000124 	.word	0x20000124

000020e8 <SERCOM5_Handler>:
    20e8:	b510      	push	{r4, lr}
    20ea:	4b02      	ldr	r3, [pc, #8]	; (20f4 <SERCOM5_Handler+0xc>)
    20ec:	695b      	ldr	r3, [r3, #20]
    20ee:	2005      	movs	r0, #5
    20f0:	4798      	blx	r3
    20f2:	bd10      	pop	{r4, pc}
    20f4:	20000124 	.word	0x20000124

000020f8 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20fc:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    20fe:	0020      	movs	r0, r4
    2100:	4b0e      	ldr	r3, [pc, #56]	; (213c <spi_reset+0x44>)
    2102:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2104:	231f      	movs	r3, #31
    2106:	4018      	ands	r0, r3
    2108:	3b1e      	subs	r3, #30
    210a:	4083      	lsls	r3, r0
    210c:	2280      	movs	r2, #128	; 0x80
    210e:	490c      	ldr	r1, [pc, #48]	; (2140 <spi_reset+0x48>)
    2110:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2112:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2114:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    2116:	2b00      	cmp	r3, #0
    2118:	d1fc      	bne.n	2114 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    211a:	338f      	adds	r3, #143	; 0x8f
    211c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    211e:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2120:	6823      	ldr	r3, [r4, #0]
    2122:	2202      	movs	r2, #2
    2124:	4393      	bics	r3, r2
    2126:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2128:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    212a:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    212c:	2b00      	cmp	r3, #0
    212e:	d1fc      	bne.n	212a <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2130:	6823      	ldr	r3, [r4, #0]
    2132:	2201      	movs	r2, #1
    2134:	4313      	orrs	r3, r2
    2136:	6023      	str	r3, [r4, #0]
}
    2138:	bd70      	pop	{r4, r5, r6, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00002069 	.word	0x00002069
    2140:	e000e100 	.word	0xe000e100

00002144 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    2144:	b570      	push	{r4, r5, r6, lr}
    2146:	b082      	sub	sp, #8
    2148:	0005      	movs	r5, r0
    214a:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    214c:	2200      	movs	r2, #0
    214e:	466b      	mov	r3, sp
    2150:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    2152:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2154:	0030      	movs	r0, r6
    2156:	4b24      	ldr	r3, [pc, #144]	; (21e8 <spi_set_baudrate+0xa4>)
    2158:	4798      	blx	r3
    215a:	231f      	movs	r3, #31
    215c:	4018      	ands	r0, r3
    215e:	3b1e      	subs	r3, #30
    2160:	4083      	lsls	r3, r0
    2162:	2280      	movs	r2, #128	; 0x80
    2164:	4921      	ldr	r1, [pc, #132]	; (21ec <spi_set_baudrate+0xa8>)
    2166:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2168:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    216a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    216c:	2b00      	cmp	r3, #0
    216e:	d1fc      	bne.n	216a <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2170:	338f      	adds	r3, #143	; 0x8f
    2172:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2174:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2176:	6833      	ldr	r3, [r6, #0]
    2178:	2202      	movs	r2, #2
    217a:	4393      	bics	r3, r2
    217c:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    217e:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2180:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2182:	2b00      	cmp	r3, #0
    2184:	d1fc      	bne.n	2180 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2186:	4b1a      	ldr	r3, [pc, #104]	; (21f0 <spi_set_baudrate+0xac>)
    2188:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    218a:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    218c:	b2c0      	uxtb	r0, r0
    218e:	4b19      	ldr	r3, [pc, #100]	; (21f4 <spi_set_baudrate+0xb0>)
    2190:	4798      	blx	r3
    2192:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2194:	466b      	mov	r3, sp
    2196:	1d9a      	adds	r2, r3, #6
    2198:	0020      	movs	r0, r4
    219a:	4b17      	ldr	r3, [pc, #92]	; (21f8 <spi_set_baudrate+0xb4>)
    219c:	4798      	blx	r3
    219e:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    21a0:	d003      	beq.n	21aa <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    21a2:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    21a4:	0020      	movs	r0, r4
    21a6:	b002      	add	sp, #8
    21a8:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    21aa:	466b      	mov	r3, sp
    21ac:	3306      	adds	r3, #6
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21b2:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21b4:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    21b6:	2b00      	cmp	r3, #0
    21b8:	d1fc      	bne.n	21b4 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    21ba:	0030      	movs	r0, r6
    21bc:	4b0a      	ldr	r3, [pc, #40]	; (21e8 <spi_set_baudrate+0xa4>)
    21be:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21c0:	231f      	movs	r3, #31
    21c2:	4018      	ands	r0, r3
    21c4:	3b1e      	subs	r3, #30
    21c6:	4083      	lsls	r3, r0
    21c8:	4a08      	ldr	r2, [pc, #32]	; (21ec <spi_set_baudrate+0xa8>)
    21ca:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21cc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21ce:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    21d0:	2b00      	cmp	r3, #0
    21d2:	d1fc      	bne.n	21ce <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    21d4:	6833      	ldr	r3, [r6, #0]
    21d6:	2202      	movs	r2, #2
    21d8:	4313      	orrs	r3, r2
    21da:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    21dc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    21de:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    21e0:	2b00      	cmp	r3, #0
    21e2:	d1fc      	bne.n	21de <spi_set_baudrate+0x9a>
    21e4:	e7de      	b.n	21a4 <spi_set_baudrate+0x60>
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	00002069 	.word	0x00002069
    21ec:	e000e100 	.word	0xe000e100
    21f0:	00001ff1 	.word	0x00001ff1
    21f4:	00003505 	.word	0x00003505
    21f8:	00001d6f 	.word	0x00001d6f

000021fc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	b08b      	sub	sp, #44	; 0x2c
    2200:	0005      	movs	r5, r0
    2202:	000c      	movs	r4, r1
    2204:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2206:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2208:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    220a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    220c:	079b      	lsls	r3, r3, #30
    220e:	d501      	bpl.n	2214 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2210:	b00b      	add	sp, #44	; 0x2c
    2212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2214:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    2216:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2218:	07db      	lsls	r3, r3, #31
    221a:	d4f9      	bmi.n	2210 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    221c:	0008      	movs	r0, r1
    221e:	4b60      	ldr	r3, [pc, #384]	; (23a0 <spi_init+0x1a4>)
    2220:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    2222:	4a60      	ldr	r2, [pc, #384]	; (23a4 <spi_init+0x1a8>)
    2224:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2226:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2228:	2301      	movs	r3, #1
    222a:	40bb      	lsls	r3, r7
    222c:	430b      	orrs	r3, r1
    222e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2230:	a909      	add	r1, sp, #36	; 0x24
    2232:	2724      	movs	r7, #36	; 0x24
    2234:	5df3      	ldrb	r3, [r6, r7]
    2236:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2238:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    223a:	b2c3      	uxtb	r3, r0
    223c:	9301      	str	r3, [sp, #4]
    223e:	0018      	movs	r0, r3
    2240:	4b59      	ldr	r3, [pc, #356]	; (23a8 <spi_init+0x1ac>)
    2242:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2244:	9801      	ldr	r0, [sp, #4]
    2246:	4b59      	ldr	r3, [pc, #356]	; (23ac <spi_init+0x1b0>)
    2248:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    224a:	5df0      	ldrb	r0, [r6, r7]
    224c:	2100      	movs	r1, #0
    224e:	4b58      	ldr	r3, [pc, #352]	; (23b0 <spi_init+0x1b4>)
    2250:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2252:	7833      	ldrb	r3, [r6, #0]
    2254:	2b01      	cmp	r3, #1
    2256:	d038      	beq.n	22ca <spi_init+0xce>
    2258:	002b      	movs	r3, r5
    225a:	330c      	adds	r3, #12
    225c:	0029      	movs	r1, r5
    225e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    2260:	2200      	movs	r2, #0
    2262:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2264:	428b      	cmp	r3, r1
    2266:	d1fc      	bne.n	2262 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    2268:	2300      	movs	r3, #0
    226a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    226c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    226e:	2400      	movs	r4, #0
    2270:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2272:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2274:	3336      	adds	r3, #54	; 0x36
    2276:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    2278:	3301      	adds	r3, #1
    227a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    227c:	3301      	adds	r3, #1
    227e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    2280:	3b35      	subs	r3, #53	; 0x35
    2282:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2284:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2286:	6828      	ldr	r0, [r5, #0]
    2288:	4b45      	ldr	r3, [pc, #276]	; (23a0 <spi_init+0x1a4>)
    228a:	4798      	blx	r3
    228c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    228e:	4949      	ldr	r1, [pc, #292]	; (23b4 <spi_init+0x1b8>)
    2290:	4b49      	ldr	r3, [pc, #292]	; (23b8 <spi_init+0x1bc>)
    2292:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2294:	00bf      	lsls	r7, r7, #2
    2296:	4b49      	ldr	r3, [pc, #292]	; (23bc <spi_init+0x1c0>)
    2298:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    229a:	682f      	ldr	r7, [r5, #0]
    229c:	ab04      	add	r3, sp, #16
    229e:	2280      	movs	r2, #128	; 0x80
    22a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22a2:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22a4:	3a7f      	subs	r2, #127	; 0x7f
    22a6:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    22a8:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    22aa:	7833      	ldrb	r3, [r6, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d102      	bne.n	22b6 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    22b0:	2200      	movs	r2, #0
    22b2:	ab04      	add	r3, sp, #16
    22b4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    22b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    22b8:	9305      	str	r3, [sp, #20]
    22ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    22bc:	9306      	str	r3, [sp, #24]
    22be:	6b33      	ldr	r3, [r6, #48]	; 0x30
    22c0:	9307      	str	r3, [sp, #28]
    22c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    22c4:	9308      	str	r3, [sp, #32]
    22c6:	2400      	movs	r4, #0
    22c8:	e00b      	b.n	22e2 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    22ca:	6823      	ldr	r3, [r4, #0]
    22cc:	220c      	movs	r2, #12
    22ce:	4313      	orrs	r3, r2
    22d0:	6023      	str	r3, [r4, #0]
    22d2:	e7c1      	b.n	2258 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    22d4:	0038      	movs	r0, r7
    22d6:	4b3a      	ldr	r3, [pc, #232]	; (23c0 <spi_init+0x1c4>)
    22d8:	4798      	blx	r3
    22da:	e00a      	b.n	22f2 <spi_init+0xf6>
    22dc:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    22de:	2c04      	cmp	r4, #4
    22e0:	d010      	beq.n	2304 <spi_init+0x108>
    22e2:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    22e4:	00a3      	lsls	r3, r4, #2
    22e6:	aa02      	add	r2, sp, #8
    22e8:	200c      	movs	r0, #12
    22ea:	1812      	adds	r2, r2, r0
    22ec:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    22ee:	2800      	cmp	r0, #0
    22f0:	d0f0      	beq.n	22d4 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    22f2:	1c43      	adds	r3, r0, #1
    22f4:	d0f2      	beq.n	22dc <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    22f6:	a904      	add	r1, sp, #16
    22f8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    22fa:	0c00      	lsrs	r0, r0, #16
    22fc:	b2c0      	uxtb	r0, r0
    22fe:	4b31      	ldr	r3, [pc, #196]	; (23c4 <spi_init+0x1c8>)
    2300:	4798      	blx	r3
    2302:	e7eb      	b.n	22dc <spi_init+0xe0>
	module->mode             = config->mode;
    2304:	7833      	ldrb	r3, [r6, #0]
    2306:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    2308:	7c33      	ldrb	r3, [r6, #16]
    230a:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    230c:	7cb3      	ldrb	r3, [r6, #18]
    230e:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2310:	7d33      	ldrb	r3, [r6, #20]
    2312:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    2314:	2200      	movs	r2, #0
    2316:	ab02      	add	r3, sp, #8
    2318:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    231a:	7833      	ldrb	r3, [r6, #0]
    231c:	2b01      	cmp	r3, #1
    231e:	d028      	beq.n	2372 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    2320:	6873      	ldr	r3, [r6, #4]
    2322:	68b2      	ldr	r2, [r6, #8]
    2324:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    2326:	68f2      	ldr	r2, [r6, #12]
    2328:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    232a:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    232c:	7c72      	ldrb	r2, [r6, #17]
    232e:	2a00      	cmp	r2, #0
    2330:	d103      	bne.n	233a <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2332:	4a25      	ldr	r2, [pc, #148]	; (23c8 <spi_init+0x1cc>)
    2334:	7892      	ldrb	r2, [r2, #2]
    2336:	0792      	lsls	r2, r2, #30
    2338:	d501      	bpl.n	233e <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    233a:	2280      	movs	r2, #128	; 0x80
    233c:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    233e:	7cb2      	ldrb	r2, [r6, #18]
    2340:	2a00      	cmp	r2, #0
    2342:	d002      	beq.n	234a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2344:	2280      	movs	r2, #128	; 0x80
    2346:	0292      	lsls	r2, r2, #10
    2348:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    234a:	7cf2      	ldrb	r2, [r6, #19]
    234c:	2a00      	cmp	r2, #0
    234e:	d002      	beq.n	2356 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2350:	2280      	movs	r2, #128	; 0x80
    2352:	0092      	lsls	r2, r2, #2
    2354:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    2356:	7d32      	ldrb	r2, [r6, #20]
    2358:	2a00      	cmp	r2, #0
    235a:	d002      	beq.n	2362 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    235c:	2280      	movs	r2, #128	; 0x80
    235e:	0192      	lsls	r2, r2, #6
    2360:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    2362:	683a      	ldr	r2, [r7, #0]
    2364:	4313      	orrs	r3, r2
    2366:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2368:	687b      	ldr	r3, [r7, #4]
    236a:	430b      	orrs	r3, r1
    236c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    236e:	2000      	movs	r0, #0
    2370:	e74e      	b.n	2210 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2372:	6828      	ldr	r0, [r5, #0]
    2374:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <spi_init+0x1a4>)
    2376:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2378:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    237a:	b2c0      	uxtb	r0, r0
    237c:	4b13      	ldr	r3, [pc, #76]	; (23cc <spi_init+0x1d0>)
    237e:	4798      	blx	r3
    2380:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2382:	ab02      	add	r3, sp, #8
    2384:	1d9a      	adds	r2, r3, #6
    2386:	69b0      	ldr	r0, [r6, #24]
    2388:	4b11      	ldr	r3, [pc, #68]	; (23d0 <spi_init+0x1d4>)
    238a:	4798      	blx	r3
    238c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    238e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2390:	2b00      	cmp	r3, #0
    2392:	d000      	beq.n	2396 <spi_init+0x19a>
    2394:	e73c      	b.n	2210 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    2396:	ab02      	add	r3, sp, #8
    2398:	3306      	adds	r3, #6
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	733b      	strb	r3, [r7, #12]
    239e:	e7bf      	b.n	2320 <spi_init+0x124>
    23a0:	00001ff1 	.word	0x00001ff1
    23a4:	40000400 	.word	0x40000400
    23a8:	000034e9 	.word	0x000034e9
    23ac:	0000345d 	.word	0x0000345d
    23b0:	00001e2d 	.word	0x00001e2d
    23b4:	00002669 	.word	0x00002669
    23b8:	0000202d 	.word	0x0000202d
    23bc:	200009cc 	.word	0x200009cc
    23c0:	00001e79 	.word	0x00001e79
    23c4:	000035e1 	.word	0x000035e1
    23c8:	41002000 	.word	0x41002000
    23cc:	00003505 	.word	0x00003505
    23d0:	00001d6f 	.word	0x00001d6f

000023d4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	46d6      	mov	lr, sl
    23d8:	4647      	mov	r7, r8
    23da:	b580      	push	{r7, lr}
    23dc:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    23de:	2438      	movs	r4, #56	; 0x38
    23e0:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    23e2:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    23e4:	2d05      	cmp	r5, #5
    23e6:	d002      	beq.n	23ee <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    23e8:	3412      	adds	r4, #18
	if (length == 0) {
    23ea:	2a00      	cmp	r2, #0
    23ec:	d105      	bne.n	23fa <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    23ee:	0020      	movs	r0, r4
    23f0:	b003      	add	sp, #12
    23f2:	bc0c      	pop	{r2, r3}
    23f4:	4690      	mov	r8, r2
    23f6:	469a      	mov	sl, r3
    23f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    23fa:	79c4      	ldrb	r4, [r0, #7]
    23fc:	2c00      	cmp	r4, #0
    23fe:	d144      	bne.n	248a <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2400:	341c      	adds	r4, #28
    2402:	e7f4      	b.n	23ee <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2404:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2406:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    2408:	423c      	tst	r4, r7
    240a:	d0fc      	beq.n	2406 <spi_read_buffer_wait+0x32>
    240c:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    240e:	423c      	tst	r4, r7
    2410:	d01a      	beq.n	2448 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2412:	4644      	mov	r4, r8
    2414:	62ac      	str	r4, [r5, #40]	; 0x28
    2416:	e017      	b.n	2448 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2418:	7984      	ldrb	r4, [r0, #6]
    241a:	2c01      	cmp	r4, #1
    241c:	d026      	beq.n	246c <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    241e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2420:	b2ec      	uxtb	r4, r5
    2422:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    2424:	9c01      	ldr	r4, [sp, #4]
    2426:	2c00      	cmp	r4, #0
    2428:	d13a      	bne.n	24a0 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    242a:	1c75      	adds	r5, r6, #1
    242c:	b2ad      	uxth	r5, r5
    242e:	4664      	mov	r4, ip
    2430:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2432:	7984      	ldrb	r4, [r0, #6]
    2434:	2c01      	cmp	r4, #1
    2436:	d01e      	beq.n	2476 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    2438:	002e      	movs	r6, r5
	while (length--) {
    243a:	3a01      	subs	r2, #1
    243c:	b292      	uxth	r2, r2
    243e:	4552      	cmp	r2, sl
    2440:	d01f      	beq.n	2482 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    2442:	7944      	ldrb	r4, [r0, #5]
    2444:	2c01      	cmp	r4, #1
    2446:	d0dd      	beq.n	2404 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2448:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    244a:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    244c:	421c      	tst	r4, r3
    244e:	d0fc      	beq.n	244a <spi_read_buffer_wait+0x76>
    2450:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    2452:	421c      	tst	r4, r3
    2454:	d017      	beq.n	2486 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2456:	8b6c      	ldrh	r4, [r5, #26]
    2458:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    245a:	2400      	movs	r4, #0
    245c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    245e:	4664      	mov	r4, ip
    2460:	421c      	tst	r4, r3
    2462:	d0d9      	beq.n	2418 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2464:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    2466:	241e      	movs	r4, #30
    2468:	9401      	str	r4, [sp, #4]
    246a:	e7d5      	b.n	2418 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    246c:	6aac      	ldr	r4, [r5, #40]	; 0x28
    246e:	05e4      	lsls	r4, r4, #23
    2470:	0de4      	lsrs	r4, r4, #23
    2472:	46a4      	mov	ip, r4
    2474:	e7d6      	b.n	2424 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    2476:	3602      	adds	r6, #2
    2478:	b2b6      	uxth	r6, r6
    247a:	4664      	mov	r4, ip
    247c:	0a24      	lsrs	r4, r4, #8
    247e:	554c      	strb	r4, [r1, r5]
    2480:	e7db      	b.n	243a <spi_read_buffer_wait+0x66>
    2482:	9c01      	ldr	r4, [sp, #4]
    2484:	e7b3      	b.n	23ee <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    2486:	2410      	movs	r4, #16
    2488:	e7b1      	b.n	23ee <spi_read_buffer_wait+0x1a>
	while (length--) {
    248a:	3a01      	subs	r2, #1
    248c:	b292      	uxth	r2, r2
    248e:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2490:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2492:	05db      	lsls	r3, r3, #23
    2494:	0ddb      	lsrs	r3, r3, #23
    2496:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    2498:	2304      	movs	r3, #4
	while (length--) {
    249a:	4c02      	ldr	r4, [pc, #8]	; (24a4 <spi_read_buffer_wait+0xd0>)
    249c:	46a2      	mov	sl, r4
    249e:	e7d0      	b.n	2442 <spi_read_buffer_wait+0x6e>
    24a0:	9c01      	ldr	r4, [sp, #4]
    24a2:	e7a4      	b.n	23ee <spi_read_buffer_wait+0x1a>
    24a4:	0000ffff 	.word	0x0000ffff

000024a8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    24a8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    24aa:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    24ac:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    24ae:	2c01      	cmp	r4, #1
    24b0:	d001      	beq.n	24b6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    24b2:	0018      	movs	r0, r3
    24b4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    24b6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    24b8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    24ba:	2c00      	cmp	r4, #0
    24bc:	d1f9      	bne.n	24b2 <spi_select_slave+0xa>
		if (select) {
    24be:	2a00      	cmp	r2, #0
    24c0:	d058      	beq.n	2574 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    24c2:	784b      	ldrb	r3, [r1, #1]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d044      	beq.n	2552 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24c8:	6803      	ldr	r3, [r0, #0]
    24ca:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    24cc:	07db      	lsls	r3, r3, #31
    24ce:	d410      	bmi.n	24f2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    24d0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24d6:	2900      	cmp	r1, #0
    24d8:	d104      	bne.n	24e4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    24da:	0953      	lsrs	r3, r2, #5
    24dc:	01db      	lsls	r3, r3, #7
    24de:	492e      	ldr	r1, [pc, #184]	; (2598 <spi_select_slave+0xf0>)
    24e0:	468c      	mov	ip, r1
    24e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24e4:	211f      	movs	r1, #31
    24e6:	4011      	ands	r1, r2
    24e8:	2201      	movs	r2, #1
    24ea:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    24ec:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    24ee:	2305      	movs	r3, #5
    24f0:	e7df      	b.n	24b2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24f2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24f4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    24f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24f8:	2c00      	cmp	r4, #0
    24fa:	d104      	bne.n	2506 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    24fc:	0953      	lsrs	r3, r2, #5
    24fe:	01db      	lsls	r3, r3, #7
    2500:	4c25      	ldr	r4, [pc, #148]	; (2598 <spi_select_slave+0xf0>)
    2502:	46a4      	mov	ip, r4
    2504:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2506:	241f      	movs	r4, #31
    2508:	4014      	ands	r4, r2
    250a:	2201      	movs	r2, #1
    250c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    250e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2510:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2512:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2514:	07d2      	lsls	r2, r2, #31
    2516:	d501      	bpl.n	251c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2518:	788a      	ldrb	r2, [r1, #2]
    251a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    251c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    251e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2520:	2a00      	cmp	r2, #0
    2522:	d1c6      	bne.n	24b2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2524:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    2526:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2528:	7e13      	ldrb	r3, [r2, #24]
    252a:	420b      	tst	r3, r1
    252c:	d0fc      	beq.n	2528 <spi_select_slave+0x80>
    252e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2530:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    2532:	0749      	lsls	r1, r1, #29
    2534:	d5bd      	bpl.n	24b2 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2536:	8b53      	ldrh	r3, [r2, #26]
    2538:	075b      	lsls	r3, r3, #29
    253a:	d501      	bpl.n	2540 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    253c:	2304      	movs	r3, #4
    253e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2540:	7983      	ldrb	r3, [r0, #6]
    2542:	2b01      	cmp	r3, #1
    2544:	d002      	beq.n	254c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2546:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2548:	2300      	movs	r3, #0
    254a:	e7b2      	b.n	24b2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    254c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    254e:	2300      	movs	r3, #0
    2550:	e7af      	b.n	24b2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2552:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2554:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2556:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2558:	2900      	cmp	r1, #0
    255a:	d104      	bne.n	2566 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    255c:	0953      	lsrs	r3, r2, #5
    255e:	01db      	lsls	r3, r3, #7
    2560:	490d      	ldr	r1, [pc, #52]	; (2598 <spi_select_slave+0xf0>)
    2562:	468c      	mov	ip, r1
    2564:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2566:	211f      	movs	r1, #31
    2568:	4011      	ands	r1, r2
    256a:	2201      	movs	r2, #1
    256c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    256e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2570:	2300      	movs	r3, #0
    2572:	e79e      	b.n	24b2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2574:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2576:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2578:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    257a:	2900      	cmp	r1, #0
    257c:	d104      	bne.n	2588 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    257e:	0953      	lsrs	r3, r2, #5
    2580:	01db      	lsls	r3, r3, #7
    2582:	4905      	ldr	r1, [pc, #20]	; (2598 <spi_select_slave+0xf0>)
    2584:	468c      	mov	ip, r1
    2586:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2588:	211f      	movs	r1, #31
    258a:	4011      	ands	r1, r2
    258c:	2201      	movs	r2, #1
    258e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2590:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2592:	2300      	movs	r3, #0
    2594:	e78d      	b.n	24b2 <spi_select_slave+0xa>
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	41004400 	.word	0x41004400

0000259c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
    259e:	46de      	mov	lr, fp
    25a0:	4657      	mov	r7, sl
    25a2:	464e      	mov	r6, r9
    25a4:	4645      	mov	r5, r8
    25a6:	b5e0      	push	{r5, r6, r7, lr}
    25a8:	b083      	sub	sp, #12
    25aa:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    25ac:	2338      	movs	r3, #56	; 0x38
    25ae:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    25b0:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    25b2:	2c05      	cmp	r4, #5
    25b4:	d002      	beq.n	25bc <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    25b6:	3312      	adds	r3, #18
	if (length == 0) {
    25b8:	2a00      	cmp	r2, #0
    25ba:	d14b      	bne.n	2654 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    25bc:	0018      	movs	r0, r3
    25be:	b003      	add	sp, #12
    25c0:	bc3c      	pop	{r2, r3, r4, r5}
    25c2:	4690      	mov	r8, r2
    25c4:	4699      	mov	r9, r3
    25c6:	46a2      	mov	sl, r4
    25c8:	46ab      	mov	fp, r5
    25ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    25cc:	3702      	adds	r7, #2
    25ce:	b2bf      	uxth	r7, r7
    25d0:	4641      	mov	r1, r8
    25d2:	4653      	mov	r3, sl
    25d4:	5c59      	ldrb	r1, [r3, r1]
    25d6:	0209      	lsls	r1, r1, #8
    25d8:	465b      	mov	r3, fp
    25da:	430b      	orrs	r3, r1
    25dc:	e018      	b.n	2610 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25de:	7983      	ldrb	r3, [r0, #6]
    25e0:	2b01      	cmp	r3, #1
    25e2:	d02a      	beq.n	263a <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    25e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    25e6:	3e01      	subs	r6, #1
    25e8:	b2b6      	uxth	r6, r6
    25ea:	4566      	cmp	r6, ip
    25ec:	d027      	beq.n	263e <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25ee:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    25f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    25f2:	4223      	tst	r3, r4
    25f4:	d0fc      	beq.n	25f0 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    25f6:	1c7b      	adds	r3, r7, #1
    25f8:	b29b      	uxth	r3, r3
    25fa:	4698      	mov	r8, r3
    25fc:	4653      	mov	r3, sl
    25fe:	5ddb      	ldrb	r3, [r3, r7]
    2600:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2602:	7981      	ldrb	r1, [r0, #6]
    2604:	2901      	cmp	r1, #1
    2606:	d0e1      	beq.n	25cc <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    2608:	4669      	mov	r1, sp
    260a:	80cb      	strh	r3, [r1, #6]
    260c:	88cb      	ldrh	r3, [r1, #6]
    260e:	4647      	mov	r7, r8
    2610:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2612:	4221      	tst	r1, r4
    2614:	d002      	beq.n	261c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2616:	05db      	lsls	r3, r3, #23
    2618:	0ddb      	lsrs	r3, r3, #23
    261a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    261c:	79c3      	ldrb	r3, [r0, #7]
    261e:	2b00      	cmp	r3, #0
    2620:	d0e1      	beq.n	25e6 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2622:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2624:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    2626:	422b      	tst	r3, r5
    2628:	d0fc      	beq.n	2624 <spi_write_buffer_wait+0x88>
    262a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    262c:	422b      	tst	r3, r5
    262e:	d0da      	beq.n	25e6 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2630:	8b53      	ldrh	r3, [r2, #26]
    2632:	422b      	tst	r3, r5
    2634:	d0d3      	beq.n	25de <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2636:	8355      	strh	r5, [r2, #26]
    2638:	e7d1      	b.n	25de <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    263a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    263c:	e7d3      	b.n	25e6 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    263e:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    2640:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    2642:	2a01      	cmp	r2, #1
    2644:	d1ba      	bne.n	25bc <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2646:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2648:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    264a:	7e0b      	ldrb	r3, [r1, #24]
    264c:	4213      	tst	r3, r2
    264e:	d0fc      	beq.n	264a <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    2650:	2300      	movs	r3, #0
    2652:	e7b3      	b.n	25bc <spi_write_buffer_wait+0x20>
	while (length--) {
    2654:	3a01      	subs	r2, #1
    2656:	b296      	uxth	r6, r2
    2658:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    265a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    265c:	2504      	movs	r5, #4
	while (length--) {
    265e:	4b01      	ldr	r3, [pc, #4]	; (2664 <spi_write_buffer_wait+0xc8>)
    2660:	469c      	mov	ip, r3
    2662:	e7c4      	b.n	25ee <spi_write_buffer_wait+0x52>
    2664:	0000ffff 	.word	0x0000ffff

00002668 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    266a:	0080      	lsls	r0, r0, #2
    266c:	4b70      	ldr	r3, [pc, #448]	; (2830 <_spi_interrupt_handler+0x1c8>)
    266e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2670:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2672:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2674:	5ce7      	ldrb	r7, [r4, r3]
    2676:	2236      	movs	r2, #54	; 0x36
    2678:	5ca2      	ldrb	r2, [r4, r2]
    267a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    267c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    267e:	7db5      	ldrb	r5, [r6, #22]
    2680:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2682:	07eb      	lsls	r3, r5, #31
    2684:	d502      	bpl.n	268c <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2686:	7963      	ldrb	r3, [r4, #5]
    2688:	2b01      	cmp	r3, #1
    268a:	d01e      	beq.n	26ca <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    268c:	076b      	lsls	r3, r5, #29
    268e:	d511      	bpl.n	26b4 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2690:	8b73      	ldrh	r3, [r6, #26]
    2692:	075b      	lsls	r3, r3, #29
    2694:	d55a      	bpl.n	274c <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2696:	7a63      	ldrb	r3, [r4, #9]
    2698:	2b01      	cmp	r3, #1
    269a:	d008      	beq.n	26ae <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    269c:	221e      	movs	r2, #30
    269e:	2338      	movs	r3, #56	; 0x38
    26a0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    26a2:	3b35      	subs	r3, #53	; 0x35
    26a4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    26a6:	3302      	adds	r3, #2
    26a8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    26aa:	073b      	lsls	r3, r7, #28
    26ac:	d44a      	bmi.n	2744 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    26ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    26b0:	2304      	movs	r3, #4
    26b2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    26b4:	07ab      	lsls	r3, r5, #30
    26b6:	d503      	bpl.n	26c0 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    26b8:	7963      	ldrb	r3, [r4, #5]
    26ba:	2b01      	cmp	r3, #1
    26bc:	d100      	bne.n	26c0 <_spi_interrupt_handler+0x58>
    26be:	e097      	b.n	27f0 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    26c0:	b26d      	sxtb	r5, r5
    26c2:	2d00      	cmp	r5, #0
    26c4:	da00      	bge.n	26c8 <_spi_interrupt_handler+0x60>
    26c6:	e0a9      	b.n	281c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    26c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    26ca:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    26cc:	2b00      	cmp	r3, #0
    26ce:	d022      	beq.n	2716 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    26d0:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    26d2:	2b00      	cmp	r3, #0
    26d4:	d0da      	beq.n	268c <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26d6:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    26d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    26da:	7813      	ldrb	r3, [r2, #0]
    26dc:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    26de:	1c50      	adds	r0, r2, #1
    26e0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26e2:	79a0      	ldrb	r0, [r4, #6]
    26e4:	2801      	cmp	r0, #1
    26e6:	d027      	beq.n	2738 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    26e8:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    26ea:	05db      	lsls	r3, r3, #23
    26ec:	0ddb      	lsrs	r3, r3, #23
    26ee:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    26f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    26f2:	3b01      	subs	r3, #1
    26f4:	b29b      	uxth	r3, r3
    26f6:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    26f8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    26fa:	b29b      	uxth	r3, r3
    26fc:	2b00      	cmp	r3, #0
    26fe:	d1c5      	bne.n	268c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2700:	3301      	adds	r3, #1
    2702:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2704:	7a63      	ldrb	r3, [r4, #9]
    2706:	2b01      	cmp	r3, #1
    2708:	d1c0      	bne.n	268c <_spi_interrupt_handler+0x24>
    270a:	79e3      	ldrb	r3, [r4, #7]
    270c:	2b00      	cmp	r3, #0
    270e:	d1bd      	bne.n	268c <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2710:	3302      	adds	r3, #2
    2712:	75b3      	strb	r3, [r6, #22]
    2714:	e7ba      	b.n	268c <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    2716:	4b47      	ldr	r3, [pc, #284]	; (2834 <_spi_interrupt_handler+0x1cc>)
    2718:	881b      	ldrh	r3, [r3, #0]
    271a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    271c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    271e:	3b01      	subs	r3, #1
    2720:	b29b      	uxth	r3, r3
    2722:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2724:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2726:	b29b      	uxth	r3, r3
    2728:	2b00      	cmp	r3, #0
    272a:	d101      	bne.n	2730 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    272c:	3301      	adds	r3, #1
    272e:	7533      	strb	r3, [r6, #20]
		if (0
    2730:	7963      	ldrb	r3, [r4, #5]
    2732:	2b01      	cmp	r3, #1
    2734:	d0cc      	beq.n	26d0 <_spi_interrupt_handler+0x68>
    2736:	e7a9      	b.n	268c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2738:	7850      	ldrb	r0, [r2, #1]
    273a:	0200      	lsls	r0, r0, #8
    273c:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    273e:	3202      	adds	r2, #2
    2740:	62e2      	str	r2, [r4, #44]	; 0x2c
    2742:	e7d2      	b.n	26ea <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2744:	0020      	movs	r0, r4
    2746:	69a3      	ldr	r3, [r4, #24]
    2748:	4798      	blx	r3
    274a:	e7b0      	b.n	26ae <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    274c:	7a63      	ldrb	r3, [r4, #9]
    274e:	2b01      	cmp	r3, #1
    2750:	d028      	beq.n	27a4 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2752:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2756:	05db      	lsls	r3, r3, #23
    2758:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    275a:	b2da      	uxtb	r2, r3
    275c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    275e:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    2760:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2762:	1c51      	adds	r1, r2, #1
    2764:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2766:	79a1      	ldrb	r1, [r4, #6]
    2768:	2901      	cmp	r1, #1
    276a:	d034      	beq.n	27d6 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    276c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    276e:	3b01      	subs	r3, #1
    2770:	b29b      	uxth	r3, r3
    2772:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2774:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2776:	b29b      	uxth	r3, r3
    2778:	2b00      	cmp	r3, #0
    277a:	d000      	beq.n	277e <_spi_interrupt_handler+0x116>
    277c:	e79a      	b.n	26b4 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    277e:	2200      	movs	r2, #0
    2780:	3338      	adds	r3, #56	; 0x38
    2782:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2784:	3b34      	subs	r3, #52	; 0x34
    2786:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2788:	7a63      	ldrb	r3, [r4, #9]
    278a:	2b02      	cmp	r3, #2
    278c:	d029      	beq.n	27e2 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    278e:	7a63      	ldrb	r3, [r4, #9]
    2790:	2b00      	cmp	r3, #0
    2792:	d000      	beq.n	2796 <_spi_interrupt_handler+0x12e>
    2794:	e78e      	b.n	26b4 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2796:	07bb      	lsls	r3, r7, #30
    2798:	d400      	bmi.n	279c <_spi_interrupt_handler+0x134>
    279a:	e78b      	b.n	26b4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    279c:	0020      	movs	r0, r4
    279e:	6923      	ldr	r3, [r4, #16]
    27a0:	4798      	blx	r3
    27a2:	e787      	b.n	26b4 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    27a4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    27a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    27a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27aa:	3b01      	subs	r3, #1
    27ac:	b29b      	uxth	r3, r3
    27ae:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    27b0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    27b2:	b29b      	uxth	r3, r3
    27b4:	2b00      	cmp	r3, #0
    27b6:	d000      	beq.n	27ba <_spi_interrupt_handler+0x152>
    27b8:	e77c      	b.n	26b4 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    27ba:	3304      	adds	r3, #4
    27bc:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    27be:	2200      	movs	r2, #0
    27c0:	3334      	adds	r3, #52	; 0x34
    27c2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    27c4:	3b35      	subs	r3, #53	; 0x35
    27c6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    27c8:	07fb      	lsls	r3, r7, #31
    27ca:	d400      	bmi.n	27ce <_spi_interrupt_handler+0x166>
    27cc:	e772      	b.n	26b4 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    27ce:	0020      	movs	r0, r4
    27d0:	68e3      	ldr	r3, [r4, #12]
    27d2:	4798      	blx	r3
    27d4:	e76e      	b.n	26b4 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    27d6:	0a1b      	lsrs	r3, r3, #8
    27d8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    27da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27dc:	3301      	adds	r3, #1
    27de:	62a3      	str	r3, [r4, #40]	; 0x28
    27e0:	e7c4      	b.n	276c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    27e2:	077b      	lsls	r3, r7, #29
    27e4:	d400      	bmi.n	27e8 <_spi_interrupt_handler+0x180>
    27e6:	e765      	b.n	26b4 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    27e8:	0020      	movs	r0, r4
    27ea:	6963      	ldr	r3, [r4, #20]
    27ec:	4798      	blx	r3
    27ee:	e761      	b.n	26b4 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    27f0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    27f2:	2b01      	cmp	r3, #1
    27f4:	d000      	beq.n	27f8 <_spi_interrupt_handler+0x190>
    27f6:	e763      	b.n	26c0 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    27f8:	79e3      	ldrb	r3, [r4, #7]
    27fa:	2b00      	cmp	r3, #0
    27fc:	d000      	beq.n	2800 <_spi_interrupt_handler+0x198>
    27fe:	e75f      	b.n	26c0 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2800:	3302      	adds	r3, #2
    2802:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2804:	3301      	adds	r3, #1
    2806:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    2808:	2200      	movs	r2, #0
    280a:	3335      	adds	r3, #53	; 0x35
    280c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    280e:	07fb      	lsls	r3, r7, #31
    2810:	d400      	bmi.n	2814 <_spi_interrupt_handler+0x1ac>
    2812:	e755      	b.n	26c0 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2814:	0020      	movs	r0, r4
    2816:	68e3      	ldr	r3, [r4, #12]
    2818:	4798      	blx	r3
    281a:	e751      	b.n	26c0 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    281c:	2380      	movs	r3, #128	; 0x80
    281e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2820:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2822:	067b      	lsls	r3, r7, #25
    2824:	d400      	bmi.n	2828 <_spi_interrupt_handler+0x1c0>
    2826:	e74f      	b.n	26c8 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2828:	6a63      	ldr	r3, [r4, #36]	; 0x24
    282a:	0020      	movs	r0, r4
    282c:	4798      	blx	r3
}
    282e:	e74b      	b.n	26c8 <_spi_interrupt_handler+0x60>
    2830:	200009cc 	.word	0x200009cc
    2834:	200009e4 	.word	0x200009e4

00002838 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2838:	b5f0      	push	{r4, r5, r6, r7, lr}
    283a:	46de      	mov	lr, fp
    283c:	4657      	mov	r7, sl
    283e:	464e      	mov	r6, r9
    2840:	4645      	mov	r5, r8
    2842:	b5e0      	push	{r5, r6, r7, lr}
    2844:	b091      	sub	sp, #68	; 0x44
    2846:	0005      	movs	r5, r0
    2848:	000c      	movs	r4, r1
    284a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    284c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    284e:	0008      	movs	r0, r1
    2850:	4bbc      	ldr	r3, [pc, #752]	; (2b44 <usart_init+0x30c>)
    2852:	4798      	blx	r3
    2854:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2856:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2858:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    285a:	07db      	lsls	r3, r3, #31
    285c:	d506      	bpl.n	286c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    285e:	b011      	add	sp, #68	; 0x44
    2860:	bc3c      	pop	{r2, r3, r4, r5}
    2862:	4690      	mov	r8, r2
    2864:	4699      	mov	r9, r3
    2866:	46a2      	mov	sl, r4
    2868:	46ab      	mov	fp, r5
    286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    286c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    286e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2870:	079b      	lsls	r3, r3, #30
    2872:	d4f4      	bmi.n	285e <usart_init+0x26>
    2874:	49b4      	ldr	r1, [pc, #720]	; (2b48 <usart_init+0x310>)
    2876:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2878:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    287a:	2301      	movs	r3, #1
    287c:	40bb      	lsls	r3, r7
    287e:	4303      	orrs	r3, r0
    2880:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2882:	a90f      	add	r1, sp, #60	; 0x3c
    2884:	272d      	movs	r7, #45	; 0x2d
    2886:	5df3      	ldrb	r3, [r6, r7]
    2888:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    288a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    288c:	b2d3      	uxtb	r3, r2
    288e:	9302      	str	r3, [sp, #8]
    2890:	0018      	movs	r0, r3
    2892:	4bae      	ldr	r3, [pc, #696]	; (2b4c <usart_init+0x314>)
    2894:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2896:	9802      	ldr	r0, [sp, #8]
    2898:	4bad      	ldr	r3, [pc, #692]	; (2b50 <usart_init+0x318>)
    289a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    289c:	5df0      	ldrb	r0, [r6, r7]
    289e:	2100      	movs	r1, #0
    28a0:	4bac      	ldr	r3, [pc, #688]	; (2b54 <usart_init+0x31c>)
    28a2:	4798      	blx	r3
	module->character_size = config->character_size;
    28a4:	7af3      	ldrb	r3, [r6, #11]
    28a6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    28a8:	2324      	movs	r3, #36	; 0x24
    28aa:	5cf3      	ldrb	r3, [r6, r3]
    28ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    28ae:	2325      	movs	r3, #37	; 0x25
    28b0:	5cf3      	ldrb	r3, [r6, r3]
    28b2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    28b4:	7ef3      	ldrb	r3, [r6, #27]
    28b6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    28b8:	7f33      	ldrb	r3, [r6, #28]
    28ba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28bc:	682b      	ldr	r3, [r5, #0]
    28be:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    28c0:	0018      	movs	r0, r3
    28c2:	4ba0      	ldr	r3, [pc, #640]	; (2b44 <usart_init+0x30c>)
    28c4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    28c6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    28c8:	2200      	movs	r2, #0
    28ca:	230e      	movs	r3, #14
    28cc:	a906      	add	r1, sp, #24
    28ce:	468c      	mov	ip, r1
    28d0:	4463      	add	r3, ip
    28d2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    28d4:	8a32      	ldrh	r2, [r6, #16]
    28d6:	9202      	str	r2, [sp, #8]
    28d8:	2380      	movs	r3, #128	; 0x80
    28da:	01db      	lsls	r3, r3, #7
    28dc:	429a      	cmp	r2, r3
    28de:	d100      	bne.n	28e2 <usart_init+0xaa>
    28e0:	e09e      	b.n	2a20 <usart_init+0x1e8>
    28e2:	d90f      	bls.n	2904 <usart_init+0xcc>
    28e4:	23c0      	movs	r3, #192	; 0xc0
    28e6:	01db      	lsls	r3, r3, #7
    28e8:	9a02      	ldr	r2, [sp, #8]
    28ea:	429a      	cmp	r2, r3
    28ec:	d100      	bne.n	28f0 <usart_init+0xb8>
    28ee:	e092      	b.n	2a16 <usart_init+0x1de>
    28f0:	2380      	movs	r3, #128	; 0x80
    28f2:	021b      	lsls	r3, r3, #8
    28f4:	429a      	cmp	r2, r3
    28f6:	d000      	beq.n	28fa <usart_init+0xc2>
    28f8:	e11f      	b.n	2b3a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    28fa:	2303      	movs	r3, #3
    28fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28fe:	2300      	movs	r3, #0
    2900:	9307      	str	r3, [sp, #28]
    2902:	e008      	b.n	2916 <usart_init+0xde>
	switch (config->sample_rate) {
    2904:	2380      	movs	r3, #128	; 0x80
    2906:	019b      	lsls	r3, r3, #6
    2908:	429a      	cmp	r2, r3
    290a:	d000      	beq.n	290e <usart_init+0xd6>
    290c:	e115      	b.n	2b3a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    290e:	2310      	movs	r3, #16
    2910:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2912:	3b0f      	subs	r3, #15
    2914:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2916:	6833      	ldr	r3, [r6, #0]
    2918:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    291a:	68f3      	ldr	r3, [r6, #12]
    291c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    291e:	6973      	ldr	r3, [r6, #20]
    2920:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2922:	7e33      	ldrb	r3, [r6, #24]
    2924:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2926:	2326      	movs	r3, #38	; 0x26
    2928:	5cf3      	ldrb	r3, [r6, r3]
    292a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    292c:	6873      	ldr	r3, [r6, #4]
    292e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2930:	2b00      	cmp	r3, #0
    2932:	d100      	bne.n	2936 <usart_init+0xfe>
    2934:	e0a0      	b.n	2a78 <usart_init+0x240>
    2936:	2380      	movs	r3, #128	; 0x80
    2938:	055b      	lsls	r3, r3, #21
    293a:	4599      	cmp	r9, r3
    293c:	d100      	bne.n	2940 <usart_init+0x108>
    293e:	e084      	b.n	2a4a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2940:	7e73      	ldrb	r3, [r6, #25]
    2942:	2b00      	cmp	r3, #0
    2944:	d002      	beq.n	294c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2946:	7eb3      	ldrb	r3, [r6, #26]
    2948:	4642      	mov	r2, r8
    294a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    294c:	682a      	ldr	r2, [r5, #0]
    294e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2950:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2952:	2b00      	cmp	r3, #0
    2954:	d1fc      	bne.n	2950 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2956:	330e      	adds	r3, #14
    2958:	aa06      	add	r2, sp, #24
    295a:	4694      	mov	ip, r2
    295c:	4463      	add	r3, ip
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	4642      	mov	r2, r8
    2962:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2964:	9b05      	ldr	r3, [sp, #20]
    2966:	9a03      	ldr	r2, [sp, #12]
    2968:	4313      	orrs	r3, r2
    296a:	9a04      	ldr	r2, [sp, #16]
    296c:	4313      	orrs	r3, r2
    296e:	464a      	mov	r2, r9
    2970:	4313      	orrs	r3, r2
    2972:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2974:	465b      	mov	r3, fp
    2976:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2978:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    297a:	4653      	mov	r3, sl
    297c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    297e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2980:	2327      	movs	r3, #39	; 0x27
    2982:	5cf3      	ldrb	r3, [r6, r3]
    2984:	2b00      	cmp	r3, #0
    2986:	d101      	bne.n	298c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2988:	3304      	adds	r3, #4
    298a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    298c:	7e73      	ldrb	r3, [r6, #25]
    298e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2990:	7f32      	ldrb	r2, [r6, #28]
    2992:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2994:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2996:	7f72      	ldrb	r2, [r6, #29]
    2998:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    299a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    299c:	2224      	movs	r2, #36	; 0x24
    299e:	5cb2      	ldrb	r2, [r6, r2]
    29a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    29a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    29a4:	2225      	movs	r2, #37	; 0x25
    29a6:	5cb2      	ldrb	r2, [r6, r2]
    29a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    29ac:	7ab1      	ldrb	r1, [r6, #10]
    29ae:	7af2      	ldrb	r2, [r6, #11]
    29b0:	4311      	orrs	r1, r2
    29b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    29b4:	8933      	ldrh	r3, [r6, #8]
    29b6:	2bff      	cmp	r3, #255	; 0xff
    29b8:	d100      	bne.n	29bc <usart_init+0x184>
    29ba:	e081      	b.n	2ac0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    29bc:	2280      	movs	r2, #128	; 0x80
    29be:	0452      	lsls	r2, r2, #17
    29c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    29c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    29c4:	232c      	movs	r3, #44	; 0x2c
    29c6:	5cf3      	ldrb	r3, [r6, r3]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d103      	bne.n	29d4 <usart_init+0x19c>
    29cc:	4b62      	ldr	r3, [pc, #392]	; (2b58 <usart_init+0x320>)
    29ce:	789b      	ldrb	r3, [r3, #2]
    29d0:	079b      	lsls	r3, r3, #30
    29d2:	d501      	bpl.n	29d8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    29d4:	2380      	movs	r3, #128	; 0x80
    29d6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    29d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29dc:	2b00      	cmp	r3, #0
    29de:	d1fc      	bne.n	29da <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    29e0:	4643      	mov	r3, r8
    29e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    29e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29e8:	2b00      	cmp	r3, #0
    29ea:	d1fc      	bne.n	29e6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    29ec:	4643      	mov	r3, r8
    29ee:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    29f0:	ab0e      	add	r3, sp, #56	; 0x38
    29f2:	2280      	movs	r2, #128	; 0x80
    29f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29f6:	2200      	movs	r2, #0
    29f8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    29fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    29fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    29fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2a00:	930a      	str	r3, [sp, #40]	; 0x28
    2a02:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2a04:	930b      	str	r3, [sp, #44]	; 0x2c
    2a06:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2a08:	930c      	str	r3, [sp, #48]	; 0x30
    2a0a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2a0c:	9302      	str	r3, [sp, #8]
    2a0e:	930d      	str	r3, [sp, #52]	; 0x34
    2a10:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a12:	ae0a      	add	r6, sp, #40	; 0x28
    2a14:	e063      	b.n	2ade <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a16:	2308      	movs	r3, #8
    2a18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2a1a:	3b07      	subs	r3, #7
    2a1c:	9307      	str	r3, [sp, #28]
    2a1e:	e77a      	b.n	2916 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2a20:	6833      	ldr	r3, [r6, #0]
    2a22:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2a24:	68f3      	ldr	r3, [r6, #12]
    2a26:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2a28:	6973      	ldr	r3, [r6, #20]
    2a2a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a2c:	7e33      	ldrb	r3, [r6, #24]
    2a2e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a30:	2326      	movs	r3, #38	; 0x26
    2a32:	5cf3      	ldrb	r3, [r6, r3]
    2a34:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2a36:	6873      	ldr	r3, [r6, #4]
    2a38:	4699      	mov	r9, r3
	switch (transfer_mode)
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d018      	beq.n	2a70 <usart_init+0x238>
    2a3e:	2380      	movs	r3, #128	; 0x80
    2a40:	055b      	lsls	r3, r3, #21
    2a42:	4599      	cmp	r9, r3
    2a44:	d001      	beq.n	2a4a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2a46:	2000      	movs	r0, #0
    2a48:	e025      	b.n	2a96 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2a4a:	2327      	movs	r3, #39	; 0x27
    2a4c:	5cf3      	ldrb	r3, [r6, r3]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d000      	beq.n	2a54 <usart_init+0x21c>
    2a52:	e775      	b.n	2940 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2a54:	6a33      	ldr	r3, [r6, #32]
    2a56:	001f      	movs	r7, r3
    2a58:	b2c0      	uxtb	r0, r0
    2a5a:	4b40      	ldr	r3, [pc, #256]	; (2b5c <usart_init+0x324>)
    2a5c:	4798      	blx	r3
    2a5e:	0001      	movs	r1, r0
    2a60:	220e      	movs	r2, #14
    2a62:	ab06      	add	r3, sp, #24
    2a64:	469c      	mov	ip, r3
    2a66:	4462      	add	r2, ip
    2a68:	0038      	movs	r0, r7
    2a6a:	4b3d      	ldr	r3, [pc, #244]	; (2b60 <usart_init+0x328>)
    2a6c:	4798      	blx	r3
    2a6e:	e012      	b.n	2a96 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a70:	2308      	movs	r3, #8
    2a72:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a74:	2300      	movs	r3, #0
    2a76:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2a78:	2327      	movs	r3, #39	; 0x27
    2a7a:	5cf3      	ldrb	r3, [r6, r3]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d00e      	beq.n	2a9e <usart_init+0x266>
				status_code =
    2a80:	9b06      	ldr	r3, [sp, #24]
    2a82:	9300      	str	r3, [sp, #0]
    2a84:	9b07      	ldr	r3, [sp, #28]
    2a86:	220e      	movs	r2, #14
    2a88:	a906      	add	r1, sp, #24
    2a8a:	468c      	mov	ip, r1
    2a8c:	4462      	add	r2, ip
    2a8e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a90:	6a30      	ldr	r0, [r6, #32]
    2a92:	4f34      	ldr	r7, [pc, #208]	; (2b64 <usart_init+0x32c>)
    2a94:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a96:	2800      	cmp	r0, #0
    2a98:	d000      	beq.n	2a9c <usart_init+0x264>
    2a9a:	e6e0      	b.n	285e <usart_init+0x26>
    2a9c:	e750      	b.n	2940 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a9e:	6a33      	ldr	r3, [r6, #32]
    2aa0:	001f      	movs	r7, r3
    2aa2:	b2c0      	uxtb	r0, r0
    2aa4:	4b2d      	ldr	r3, [pc, #180]	; (2b5c <usart_init+0x324>)
    2aa6:	4798      	blx	r3
    2aa8:	0001      	movs	r1, r0
				status_code =
    2aaa:	9b06      	ldr	r3, [sp, #24]
    2aac:	9300      	str	r3, [sp, #0]
    2aae:	9b07      	ldr	r3, [sp, #28]
    2ab0:	220e      	movs	r2, #14
    2ab2:	a806      	add	r0, sp, #24
    2ab4:	4684      	mov	ip, r0
    2ab6:	4462      	add	r2, ip
    2ab8:	0038      	movs	r0, r7
    2aba:	4f2a      	ldr	r7, [pc, #168]	; (2b64 <usart_init+0x32c>)
    2abc:	47b8      	blx	r7
    2abe:	e7ea      	b.n	2a96 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2ac0:	7ef3      	ldrb	r3, [r6, #27]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d100      	bne.n	2ac8 <usart_init+0x290>
    2ac6:	e77d      	b.n	29c4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2ac8:	2380      	movs	r3, #128	; 0x80
    2aca:	04db      	lsls	r3, r3, #19
    2acc:	431f      	orrs	r7, r3
    2ace:	e779      	b.n	29c4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2ad0:	0020      	movs	r0, r4
    2ad2:	4b25      	ldr	r3, [pc, #148]	; (2b68 <usart_init+0x330>)
    2ad4:	4798      	blx	r3
    2ad6:	e007      	b.n	2ae8 <usart_init+0x2b0>
    2ad8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2ada:	2f04      	cmp	r7, #4
    2adc:	d00d      	beq.n	2afa <usart_init+0x2c2>
    2ade:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ae0:	00bb      	lsls	r3, r7, #2
    2ae2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2ae4:	2800      	cmp	r0, #0
    2ae6:	d0f3      	beq.n	2ad0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2ae8:	1c43      	adds	r3, r0, #1
    2aea:	d0f5      	beq.n	2ad8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2aec:	a90e      	add	r1, sp, #56	; 0x38
    2aee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2af0:	0c00      	lsrs	r0, r0, #16
    2af2:	b2c0      	uxtb	r0, r0
    2af4:	4b1d      	ldr	r3, [pc, #116]	; (2b6c <usart_init+0x334>)
    2af6:	4798      	blx	r3
    2af8:	e7ee      	b.n	2ad8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2afa:	2300      	movs	r3, #0
    2afc:	60eb      	str	r3, [r5, #12]
    2afe:	612b      	str	r3, [r5, #16]
    2b00:	616b      	str	r3, [r5, #20]
    2b02:	61ab      	str	r3, [r5, #24]
    2b04:	61eb      	str	r3, [r5, #28]
    2b06:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2b08:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2b0a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2b0c:	2200      	movs	r2, #0
    2b0e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2b10:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2b12:	3330      	adds	r3, #48	; 0x30
    2b14:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2b16:	3301      	adds	r3, #1
    2b18:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2b1a:	3301      	adds	r3, #1
    2b1c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2b1e:	3301      	adds	r3, #1
    2b20:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2b22:	6828      	ldr	r0, [r5, #0]
    2b24:	4b07      	ldr	r3, [pc, #28]	; (2b44 <usart_init+0x30c>)
    2b26:	4798      	blx	r3
    2b28:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2b2a:	4911      	ldr	r1, [pc, #68]	; (2b70 <usart_init+0x338>)
    2b2c:	4b11      	ldr	r3, [pc, #68]	; (2b74 <usart_init+0x33c>)
    2b2e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2b30:	00a4      	lsls	r4, r4, #2
    2b32:	4b11      	ldr	r3, [pc, #68]	; (2b78 <usart_init+0x340>)
    2b34:	50e5      	str	r5, [r4, r3]
	return status_code;
    2b36:	2000      	movs	r0, #0
    2b38:	e691      	b.n	285e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2b3a:	2310      	movs	r3, #16
    2b3c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b3e:	2300      	movs	r3, #0
    2b40:	9307      	str	r3, [sp, #28]
    2b42:	e6e8      	b.n	2916 <usart_init+0xde>
    2b44:	00001ff1 	.word	0x00001ff1
    2b48:	40000400 	.word	0x40000400
    2b4c:	000034e9 	.word	0x000034e9
    2b50:	0000345d 	.word	0x0000345d
    2b54:	00001e2d 	.word	0x00001e2d
    2b58:	41002000 	.word	0x41002000
    2b5c:	00003505 	.word	0x00003505
    2b60:	00001d6f 	.word	0x00001d6f
    2b64:	00001d99 	.word	0x00001d99
    2b68:	00001e79 	.word	0x00001e79
    2b6c:	000035e1 	.word	0x000035e1
    2b70:	00002d19 	.word	0x00002d19
    2b74:	0000202d 	.word	0x0000202d
    2b78:	200009cc 	.word	0x200009cc

00002b7c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2b7c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2b7e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2b80:	2a00      	cmp	r2, #0
    2b82:	d101      	bne.n	2b88 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2b84:	0018      	movs	r0, r3
    2b86:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2b88:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2b8a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b8c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2b8e:	2a00      	cmp	r2, #0
    2b90:	d1f8      	bne.n	2b84 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b92:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b94:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2b96:	2a00      	cmp	r2, #0
    2b98:	d1fc      	bne.n	2b94 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2b9a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2b9c:	2102      	movs	r1, #2
    2b9e:	7e1a      	ldrb	r2, [r3, #24]
    2ba0:	420a      	tst	r2, r1
    2ba2:	d0fc      	beq.n	2b9e <usart_write_wait+0x22>
	return STATUS_OK;
    2ba4:	2300      	movs	r3, #0
    2ba6:	e7ed      	b.n	2b84 <usart_write_wait+0x8>

00002ba8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2ba8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2baa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2bac:	2a00      	cmp	r2, #0
    2bae:	d101      	bne.n	2bb4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2bb0:	0018      	movs	r0, r3
    2bb2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2bb4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2bb6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2bb8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2bba:	2a00      	cmp	r2, #0
    2bbc:	d1f8      	bne.n	2bb0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bbe:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2bc0:	7e10      	ldrb	r0, [r2, #24]
    2bc2:	0740      	lsls	r0, r0, #29
    2bc4:	d5f4      	bpl.n	2bb0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2bc6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d1fc      	bne.n	2bc6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2bcc:	8b53      	ldrh	r3, [r2, #26]
    2bce:	b2db      	uxtb	r3, r3
	if (error_code) {
    2bd0:	0698      	lsls	r0, r3, #26
    2bd2:	d01d      	beq.n	2c10 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2bd4:	0798      	lsls	r0, r3, #30
    2bd6:	d503      	bpl.n	2be0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2bd8:	2302      	movs	r3, #2
    2bda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2bdc:	3318      	adds	r3, #24
    2bde:	e7e7      	b.n	2bb0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2be0:	0758      	lsls	r0, r3, #29
    2be2:	d503      	bpl.n	2bec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2be4:	2304      	movs	r3, #4
    2be6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2be8:	331a      	adds	r3, #26
    2bea:	e7e1      	b.n	2bb0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2bec:	07d8      	lsls	r0, r3, #31
    2bee:	d503      	bpl.n	2bf8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2bf0:	2301      	movs	r3, #1
    2bf2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2bf4:	3312      	adds	r3, #18
    2bf6:	e7db      	b.n	2bb0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2bf8:	06d8      	lsls	r0, r3, #27
    2bfa:	d503      	bpl.n	2c04 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2bfc:	2310      	movs	r3, #16
    2bfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2c00:	3332      	adds	r3, #50	; 0x32
    2c02:	e7d5      	b.n	2bb0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2c04:	069b      	lsls	r3, r3, #26
    2c06:	d503      	bpl.n	2c10 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2c08:	2320      	movs	r3, #32
    2c0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2c0c:	3321      	adds	r3, #33	; 0x21
    2c0e:	e7cf      	b.n	2bb0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2c10:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2c12:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2c14:	2300      	movs	r3, #0
    2c16:	e7cb      	b.n	2bb0 <usart_read_wait+0x8>

00002c18 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c1a:	0006      	movs	r6, r0
    2c1c:	000c      	movs	r4, r1
    2c1e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c20:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2c22:	4b0a      	ldr	r3, [pc, #40]	; (2c4c <_usart_write_buffer+0x34>)
    2c24:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2c26:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2c28:	b29b      	uxth	r3, r3
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d003      	beq.n	2c36 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2c2e:	4b08      	ldr	r3, [pc, #32]	; (2c50 <_usart_write_buffer+0x38>)
    2c30:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c32:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2c36:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2c38:	4b05      	ldr	r3, [pc, #20]	; (2c50 <_usart_write_buffer+0x38>)
    2c3a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2c3c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2c3e:	2205      	movs	r2, #5
    2c40:	2333      	movs	r3, #51	; 0x33
    2c42:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2c44:	3b32      	subs	r3, #50	; 0x32
    2c46:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2c48:	2000      	movs	r0, #0
    2c4a:	e7f3      	b.n	2c34 <_usart_write_buffer+0x1c>
    2c4c:	00001a49 	.word	0x00001a49
    2c50:	00001a89 	.word	0x00001a89

00002c54 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c56:	0004      	movs	r4, r0
    2c58:	000d      	movs	r5, r1
    2c5a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c5c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2c5e:	4b0f      	ldr	r3, [pc, #60]	; (2c9c <_usart_read_buffer+0x48>)
    2c60:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2c62:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2c64:	b29b      	uxth	r3, r3
    2c66:	2b00      	cmp	r3, #0
    2c68:	d003      	beq.n	2c72 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2c6a:	4b0d      	ldr	r3, [pc, #52]	; (2ca0 <_usart_read_buffer+0x4c>)
    2c6c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c6e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2c72:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2c74:	4b0a      	ldr	r3, [pc, #40]	; (2ca0 <_usart_read_buffer+0x4c>)
    2c76:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2c78:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2c7a:	2205      	movs	r2, #5
    2c7c:	2332      	movs	r3, #50	; 0x32
    2c7e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2c80:	3b2e      	subs	r3, #46	; 0x2e
    2c82:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2c84:	7a23      	ldrb	r3, [r4, #8]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d001      	beq.n	2c8e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c8a:	2320      	movs	r3, #32
    2c8c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2c8e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2c90:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2c92:	2b00      	cmp	r3, #0
    2c94:	d0ec      	beq.n	2c70 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2c96:	2308      	movs	r3, #8
    2c98:	75bb      	strb	r3, [r7, #22]
    2c9a:	e7e9      	b.n	2c70 <_usart_read_buffer+0x1c>
    2c9c:	00001a49 	.word	0x00001a49
    2ca0:	00001a89 	.word	0x00001a89

00002ca4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2ca4:	1c93      	adds	r3, r2, #2
    2ca6:	009b      	lsls	r3, r3, #2
    2ca8:	18c3      	adds	r3, r0, r3
    2caa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2cac:	2130      	movs	r1, #48	; 0x30
    2cae:	2301      	movs	r3, #1
    2cb0:	4093      	lsls	r3, r2
    2cb2:	001a      	movs	r2, r3
    2cb4:	5c43      	ldrb	r3, [r0, r1]
    2cb6:	4313      	orrs	r3, r2
    2cb8:	5443      	strb	r3, [r0, r1]
}
    2cba:	4770      	bx	lr

00002cbc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2cbc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2cbe:	2317      	movs	r3, #23
	if (length == 0) {
    2cc0:	2a00      	cmp	r2, #0
    2cc2:	d101      	bne.n	2cc8 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2cc4:	0018      	movs	r0, r3
    2cc6:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2cc8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2cca:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2ccc:	2c00      	cmp	r4, #0
    2cce:	d0f9      	beq.n	2cc4 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <usart_write_buffer_job+0x1c>)
    2cd2:	4798      	blx	r3
    2cd4:	0003      	movs	r3, r0
    2cd6:	e7f5      	b.n	2cc4 <usart_write_buffer_job+0x8>
    2cd8:	00002c19 	.word	0x00002c19

00002cdc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2cdc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2cde:	2317      	movs	r3, #23
	if (length == 0) {
    2ce0:	2a00      	cmp	r2, #0
    2ce2:	d101      	bne.n	2ce8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2ce4:	0018      	movs	r0, r3
    2ce6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2ce8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2cea:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2cec:	2c00      	cmp	r4, #0
    2cee:	d0f9      	beq.n	2ce4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2cf0:	4b01      	ldr	r3, [pc, #4]	; (2cf8 <usart_read_buffer_job+0x1c>)
    2cf2:	4798      	blx	r3
    2cf4:	0003      	movs	r3, r0
    2cf6:	e7f5      	b.n	2ce4 <usart_read_buffer_job+0x8>
    2cf8:	00002c55 	.word	0x00002c55

00002cfc <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2cfc:	2900      	cmp	r1, #0
    2cfe:	d003      	beq.n	2d08 <usart_get_job_status+0xc>
    2d00:	2901      	cmp	r1, #1
    2d02:	d005      	beq.n	2d10 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2d04:	2017      	movs	r0, #23
    2d06:	e002      	b.n	2d0e <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2d08:	2332      	movs	r3, #50	; 0x32
    2d0a:	5cc0      	ldrb	r0, [r0, r3]
    2d0c:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2d0e:	4770      	bx	lr
			status_code = module->tx_status;
    2d10:	2333      	movs	r3, #51	; 0x33
    2d12:	5cc0      	ldrb	r0, [r0, r3]
    2d14:	b2c0      	uxtb	r0, r0
			break;
    2d16:	e7fa      	b.n	2d0e <usart_get_job_status+0x12>

00002d18 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2d1a:	0080      	lsls	r0, r0, #2
    2d1c:	4b62      	ldr	r3, [pc, #392]	; (2ea8 <_usart_interrupt_handler+0x190>)
    2d1e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2d20:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2d22:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2d24:	2b00      	cmp	r3, #0
    2d26:	d1fc      	bne.n	2d22 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2d28:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2d2a:	7da6      	ldrb	r6, [r4, #22]
    2d2c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2d2e:	2330      	movs	r3, #48	; 0x30
    2d30:	5ceb      	ldrb	r3, [r5, r3]
    2d32:	2231      	movs	r2, #49	; 0x31
    2d34:	5caf      	ldrb	r7, [r5, r2]
    2d36:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2d38:	07f3      	lsls	r3, r6, #31
    2d3a:	d522      	bpl.n	2d82 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2d3c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2d3e:	b29b      	uxth	r3, r3
    2d40:	2b00      	cmp	r3, #0
    2d42:	d01c      	beq.n	2d7e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2d44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2d46:	7813      	ldrb	r3, [r2, #0]
    2d48:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2d4a:	1c51      	adds	r1, r2, #1
    2d4c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d4e:	7969      	ldrb	r1, [r5, #5]
    2d50:	2901      	cmp	r1, #1
    2d52:	d00e      	beq.n	2d72 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2d54:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2d56:	05db      	lsls	r3, r3, #23
    2d58:	0ddb      	lsrs	r3, r3, #23
    2d5a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2d5c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2d5e:	3b01      	subs	r3, #1
    2d60:	b29b      	uxth	r3, r3
    2d62:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2d64:	2b00      	cmp	r3, #0
    2d66:	d10c      	bne.n	2d82 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d68:	3301      	adds	r3, #1
    2d6a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2d6c:	3301      	adds	r3, #1
    2d6e:	75a3      	strb	r3, [r4, #22]
    2d70:	e007      	b.n	2d82 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d72:	7851      	ldrb	r1, [r2, #1]
    2d74:	0209      	lsls	r1, r1, #8
    2d76:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2d78:	3202      	adds	r2, #2
    2d7a:	62aa      	str	r2, [r5, #40]	; 0x28
    2d7c:	e7eb      	b.n	2d56 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d7e:	2301      	movs	r3, #1
    2d80:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2d82:	07b3      	lsls	r3, r6, #30
    2d84:	d506      	bpl.n	2d94 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2d86:	2302      	movs	r3, #2
    2d88:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2d8a:	2200      	movs	r2, #0
    2d8c:	3331      	adds	r3, #49	; 0x31
    2d8e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2d90:	07fb      	lsls	r3, r7, #31
    2d92:	d41a      	bmi.n	2dca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2d94:	0773      	lsls	r3, r6, #29
    2d96:	d565      	bpl.n	2e64 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2d98:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d9a:	b29b      	uxth	r3, r3
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d05f      	beq.n	2e60 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2da0:	8b63      	ldrh	r3, [r4, #26]
    2da2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2da4:	071a      	lsls	r2, r3, #28
    2da6:	d414      	bmi.n	2dd2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2da8:	223f      	movs	r2, #63	; 0x3f
    2daa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2dac:	2b00      	cmp	r3, #0
    2dae:	d034      	beq.n	2e1a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2db0:	079a      	lsls	r2, r3, #30
    2db2:	d511      	bpl.n	2dd8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2db4:	221a      	movs	r2, #26
    2db6:	2332      	movs	r3, #50	; 0x32
    2db8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2dba:	3b30      	subs	r3, #48	; 0x30
    2dbc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2dbe:	077b      	lsls	r3, r7, #29
    2dc0:	d550      	bpl.n	2e64 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2dc2:	0028      	movs	r0, r5
    2dc4:	696b      	ldr	r3, [r5, #20]
    2dc6:	4798      	blx	r3
    2dc8:	e04c      	b.n	2e64 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2dca:	0028      	movs	r0, r5
    2dcc:	68eb      	ldr	r3, [r5, #12]
    2dce:	4798      	blx	r3
    2dd0:	e7e0      	b.n	2d94 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2dd2:	2237      	movs	r2, #55	; 0x37
    2dd4:	4013      	ands	r3, r2
    2dd6:	e7e9      	b.n	2dac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2dd8:	075a      	lsls	r2, r3, #29
    2dda:	d505      	bpl.n	2de8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2ddc:	221e      	movs	r2, #30
    2dde:	2332      	movs	r3, #50	; 0x32
    2de0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2de2:	3b2e      	subs	r3, #46	; 0x2e
    2de4:	8363      	strh	r3, [r4, #26]
    2de6:	e7ea      	b.n	2dbe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2de8:	07da      	lsls	r2, r3, #31
    2dea:	d505      	bpl.n	2df8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2dec:	2213      	movs	r2, #19
    2dee:	2332      	movs	r3, #50	; 0x32
    2df0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2df2:	3b31      	subs	r3, #49	; 0x31
    2df4:	8363      	strh	r3, [r4, #26]
    2df6:	e7e2      	b.n	2dbe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2df8:	06da      	lsls	r2, r3, #27
    2dfa:	d505      	bpl.n	2e08 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2dfc:	2242      	movs	r2, #66	; 0x42
    2dfe:	2332      	movs	r3, #50	; 0x32
    2e00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2e02:	3b22      	subs	r3, #34	; 0x22
    2e04:	8363      	strh	r3, [r4, #26]
    2e06:	e7da      	b.n	2dbe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2e08:	2220      	movs	r2, #32
    2e0a:	421a      	tst	r2, r3
    2e0c:	d0d7      	beq.n	2dbe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2e0e:	3221      	adds	r2, #33	; 0x21
    2e10:	2332      	movs	r3, #50	; 0x32
    2e12:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2e14:	3b12      	subs	r3, #18
    2e16:	8363      	strh	r3, [r4, #26]
    2e18:	e7d1      	b.n	2dbe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2e1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2e1c:	05db      	lsls	r3, r3, #23
    2e1e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2e20:	b2da      	uxtb	r2, r3
    2e22:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2e24:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2e26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2e28:	1c51      	adds	r1, r2, #1
    2e2a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2e2c:	7969      	ldrb	r1, [r5, #5]
    2e2e:	2901      	cmp	r1, #1
    2e30:	d010      	beq.n	2e54 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2e32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2e34:	3b01      	subs	r3, #1
    2e36:	b29b      	uxth	r3, r3
    2e38:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d112      	bne.n	2e64 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2e3e:	3304      	adds	r3, #4
    2e40:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2e42:	2200      	movs	r2, #0
    2e44:	332e      	adds	r3, #46	; 0x2e
    2e46:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2e48:	07bb      	lsls	r3, r7, #30
    2e4a:	d50b      	bpl.n	2e64 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2e4c:	0028      	movs	r0, r5
    2e4e:	692b      	ldr	r3, [r5, #16]
    2e50:	4798      	blx	r3
    2e52:	e007      	b.n	2e64 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2e54:	0a1b      	lsrs	r3, r3, #8
    2e56:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2e58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2e5a:	3301      	adds	r3, #1
    2e5c:	626b      	str	r3, [r5, #36]	; 0x24
    2e5e:	e7e8      	b.n	2e32 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2e60:	2304      	movs	r3, #4
    2e62:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2e64:	06f3      	lsls	r3, r6, #27
    2e66:	d504      	bpl.n	2e72 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2e68:	2310      	movs	r3, #16
    2e6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2e6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2e6e:	06fb      	lsls	r3, r7, #27
    2e70:	d40e      	bmi.n	2e90 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2e72:	06b3      	lsls	r3, r6, #26
    2e74:	d504      	bpl.n	2e80 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2e76:	2320      	movs	r3, #32
    2e78:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e7a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2e7c:	073b      	lsls	r3, r7, #28
    2e7e:	d40b      	bmi.n	2e98 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e80:	0733      	lsls	r3, r6, #28
    2e82:	d504      	bpl.n	2e8e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e84:	2308      	movs	r3, #8
    2e86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e8a:	06bb      	lsls	r3, r7, #26
    2e8c:	d408      	bmi.n	2ea0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2e90:	0028      	movs	r0, r5
    2e92:	69eb      	ldr	r3, [r5, #28]
    2e94:	4798      	blx	r3
    2e96:	e7ec      	b.n	2e72 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2e98:	0028      	movs	r0, r5
    2e9a:	69ab      	ldr	r3, [r5, #24]
    2e9c:	4798      	blx	r3
    2e9e:	e7ef      	b.n	2e80 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2ea0:	6a2b      	ldr	r3, [r5, #32]
    2ea2:	0028      	movs	r0, r5
    2ea4:	4798      	blx	r3
}
    2ea6:	e7f2      	b.n	2e8e <_usart_interrupt_handler+0x176>
    2ea8:	200009cc 	.word	0x200009cc

00002eac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2eac:	b510      	push	{r4, lr}
	switch (clock_source) {
    2eae:	2808      	cmp	r0, #8
    2eb0:	d803      	bhi.n	2eba <system_clock_source_get_hz+0xe>
    2eb2:	0080      	lsls	r0, r0, #2
    2eb4:	4b1c      	ldr	r3, [pc, #112]	; (2f28 <system_clock_source_get_hz+0x7c>)
    2eb6:	581b      	ldr	r3, [r3, r0]
    2eb8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2eba:	2000      	movs	r0, #0
    2ebc:	e032      	b.n	2f24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2ebe:	4b1b      	ldr	r3, [pc, #108]	; (2f2c <system_clock_source_get_hz+0x80>)
    2ec0:	6918      	ldr	r0, [r3, #16]
    2ec2:	e02f      	b.n	2f24 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ec4:	4b1a      	ldr	r3, [pc, #104]	; (2f30 <system_clock_source_get_hz+0x84>)
    2ec6:	6a1b      	ldr	r3, [r3, #32]
    2ec8:	059b      	lsls	r3, r3, #22
    2eca:	0f9b      	lsrs	r3, r3, #30
    2ecc:	4819      	ldr	r0, [pc, #100]	; (2f34 <system_clock_source_get_hz+0x88>)
    2ece:	40d8      	lsrs	r0, r3
    2ed0:	e028      	b.n	2f24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2ed2:	4b16      	ldr	r3, [pc, #88]	; (2f2c <system_clock_source_get_hz+0x80>)
    2ed4:	6958      	ldr	r0, [r3, #20]
    2ed6:	e025      	b.n	2f24 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ed8:	4b14      	ldr	r3, [pc, #80]	; (2f2c <system_clock_source_get_hz+0x80>)
    2eda:	681b      	ldr	r3, [r3, #0]
			return 0;
    2edc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ede:	079b      	lsls	r3, r3, #30
    2ee0:	d520      	bpl.n	2f24 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ee2:	4913      	ldr	r1, [pc, #76]	; (2f30 <system_clock_source_get_hz+0x84>)
    2ee4:	2210      	movs	r2, #16
    2ee6:	68cb      	ldr	r3, [r1, #12]
    2ee8:	421a      	tst	r2, r3
    2eea:	d0fc      	beq.n	2ee6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2eec:	4b0f      	ldr	r3, [pc, #60]	; (2f2c <system_clock_source_get_hz+0x80>)
    2eee:	681a      	ldr	r2, [r3, #0]
    2ef0:	2324      	movs	r3, #36	; 0x24
    2ef2:	4013      	ands	r3, r2
    2ef4:	2b04      	cmp	r3, #4
    2ef6:	d001      	beq.n	2efc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2ef8:	480f      	ldr	r0, [pc, #60]	; (2f38 <system_clock_source_get_hz+0x8c>)
    2efa:	e013      	b.n	2f24 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2efc:	2000      	movs	r0, #0
    2efe:	4b0f      	ldr	r3, [pc, #60]	; (2f3c <system_clock_source_get_hz+0x90>)
    2f00:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2f02:	4b0a      	ldr	r3, [pc, #40]	; (2f2c <system_clock_source_get_hz+0x80>)
    2f04:	689b      	ldr	r3, [r3, #8]
    2f06:	041b      	lsls	r3, r3, #16
    2f08:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f0a:	4358      	muls	r0, r3
    2f0c:	e00a      	b.n	2f24 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f0e:	2350      	movs	r3, #80	; 0x50
    2f10:	4a07      	ldr	r2, [pc, #28]	; (2f30 <system_clock_source_get_hz+0x84>)
    2f12:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2f14:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f16:	075b      	lsls	r3, r3, #29
    2f18:	d504      	bpl.n	2f24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2f1a:	4b04      	ldr	r3, [pc, #16]	; (2f2c <system_clock_source_get_hz+0x80>)
    2f1c:	68d8      	ldr	r0, [r3, #12]
    2f1e:	e001      	b.n	2f24 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2f20:	2080      	movs	r0, #128	; 0x80
    2f22:	0200      	lsls	r0, r0, #8
	}
}
    2f24:	bd10      	pop	{r4, pc}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	00006e7c 	.word	0x00006e7c
    2f2c:	2000013c 	.word	0x2000013c
    2f30:	40000800 	.word	0x40000800
    2f34:	007a1200 	.word	0x007a1200
    2f38:	02dc6c00 	.word	0x02dc6c00
    2f3c:	00003505 	.word	0x00003505

00002f40 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f40:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f42:	490c      	ldr	r1, [pc, #48]	; (2f74 <system_clock_source_osc8m_set_config+0x34>)
    2f44:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f46:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f48:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f4a:	7840      	ldrb	r0, [r0, #1]
    2f4c:	2201      	movs	r2, #1
    2f4e:	4010      	ands	r0, r2
    2f50:	0180      	lsls	r0, r0, #6
    2f52:	2640      	movs	r6, #64	; 0x40
    2f54:	43b3      	bics	r3, r6
    2f56:	4303      	orrs	r3, r0
    2f58:	402a      	ands	r2, r5
    2f5a:	01d2      	lsls	r2, r2, #7
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	4383      	bics	r3, r0
    2f60:	4313      	orrs	r3, r2
    2f62:	2203      	movs	r2, #3
    2f64:	4022      	ands	r2, r4
    2f66:	0212      	lsls	r2, r2, #8
    2f68:	4803      	ldr	r0, [pc, #12]	; (2f78 <system_clock_source_osc8m_set_config+0x38>)
    2f6a:	4003      	ands	r3, r0
    2f6c:	4313      	orrs	r3, r2
    2f6e:	620b      	str	r3, [r1, #32]
}
    2f70:	bd70      	pop	{r4, r5, r6, pc}
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	40000800 	.word	0x40000800
    2f78:	fffffcff 	.word	0xfffffcff

00002f7c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	46de      	mov	lr, fp
    2f80:	4657      	mov	r7, sl
    2f82:	464e      	mov	r6, r9
    2f84:	4645      	mov	r5, r8
    2f86:	b5e0      	push	{r5, r6, r7, lr}
    2f88:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2f8a:	4b26      	ldr	r3, [pc, #152]	; (3024 <system_clock_source_xosc32k_set_config+0xa8>)
    2f8c:	469b      	mov	fp, r3
    2f8e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2f90:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2f92:	7800      	ldrb	r0, [r0, #0]
    2f94:	4242      	negs	r2, r0
    2f96:	4142      	adcs	r2, r0
    2f98:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2f9a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2f9c:	78ca      	ldrb	r2, [r1, #3]
    2f9e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2fa0:	790a      	ldrb	r2, [r1, #4]
    2fa2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2fa4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2fa6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2fa8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2faa:	688a      	ldr	r2, [r1, #8]
    2fac:	491e      	ldr	r1, [pc, #120]	; (3028 <system_clock_source_xosc32k_set_config+0xac>)
    2fae:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2fb0:	2101      	movs	r1, #1
    2fb2:	464a      	mov	r2, r9
    2fb4:	0092      	lsls	r2, r2, #2
    2fb6:	4691      	mov	r9, r2
    2fb8:	2204      	movs	r2, #4
    2fba:	4393      	bics	r3, r2
    2fbc:	464a      	mov	r2, r9
    2fbe:	4313      	orrs	r3, r2
    2fc0:	4642      	mov	r2, r8
    2fc2:	400a      	ands	r2, r1
    2fc4:	00d2      	lsls	r2, r2, #3
    2fc6:	4690      	mov	r8, r2
    2fc8:	2208      	movs	r2, #8
    2fca:	4393      	bics	r3, r2
    2fcc:	4642      	mov	r2, r8
    2fce:	4313      	orrs	r3, r2
    2fd0:	4662      	mov	r2, ip
    2fd2:	400a      	ands	r2, r1
    2fd4:	0112      	lsls	r2, r2, #4
    2fd6:	4694      	mov	ip, r2
    2fd8:	2210      	movs	r2, #16
    2fda:	4393      	bics	r3, r2
    2fdc:	4662      	mov	r2, ip
    2fde:	4313      	orrs	r3, r2
    2fe0:	4008      	ands	r0, r1
    2fe2:	0140      	lsls	r0, r0, #5
    2fe4:	2220      	movs	r2, #32
    2fe6:	4393      	bics	r3, r2
    2fe8:	4303      	orrs	r3, r0
    2fea:	400f      	ands	r7, r1
    2fec:	01bf      	lsls	r7, r7, #6
    2fee:	2040      	movs	r0, #64	; 0x40
    2ff0:	4383      	bics	r3, r0
    2ff2:	433b      	orrs	r3, r7
    2ff4:	400e      	ands	r6, r1
    2ff6:	01f6      	lsls	r6, r6, #7
    2ff8:	3040      	adds	r0, #64	; 0x40
    2ffa:	4383      	bics	r3, r0
    2ffc:	4333      	orrs	r3, r6
    2ffe:	3879      	subs	r0, #121	; 0x79
    3000:	4005      	ands	r5, r0
    3002:	022d      	lsls	r5, r5, #8
    3004:	4809      	ldr	r0, [pc, #36]	; (302c <system_clock_source_xosc32k_set_config+0xb0>)
    3006:	4003      	ands	r3, r0
    3008:	432b      	orrs	r3, r5
    300a:	4021      	ands	r1, r4
    300c:	0309      	lsls	r1, r1, #12
    300e:	4808      	ldr	r0, [pc, #32]	; (3030 <system_clock_source_xosc32k_set_config+0xb4>)
    3010:	4003      	ands	r3, r0
    3012:	430b      	orrs	r3, r1
    3014:	465a      	mov	r2, fp
    3016:	8293      	strh	r3, [r2, #20]
}
    3018:	bc3c      	pop	{r2, r3, r4, r5}
    301a:	4690      	mov	r8, r2
    301c:	4699      	mov	r9, r3
    301e:	46a2      	mov	sl, r4
    3020:	46ab      	mov	fp, r5
    3022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3024:	40000800 	.word	0x40000800
    3028:	2000013c 	.word	0x2000013c
    302c:	fffff8ff 	.word	0xfffff8ff
    3030:	ffffefff 	.word	0xffffefff

00003034 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3034:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3036:	7a03      	ldrb	r3, [r0, #8]
    3038:	069b      	lsls	r3, r3, #26
    303a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    303c:	8942      	ldrh	r2, [r0, #10]
    303e:	0592      	lsls	r2, r2, #22
    3040:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3042:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3044:	4918      	ldr	r1, [pc, #96]	; (30a8 <system_clock_source_dfll_set_config+0x74>)
    3046:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3048:	7983      	ldrb	r3, [r0, #6]
    304a:	79c2      	ldrb	r2, [r0, #7]
    304c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    304e:	8842      	ldrh	r2, [r0, #2]
    3050:	8884      	ldrh	r4, [r0, #4]
    3052:	4322      	orrs	r2, r4
    3054:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3056:	7842      	ldrb	r2, [r0, #1]
    3058:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    305a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    305c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    305e:	7803      	ldrb	r3, [r0, #0]
    3060:	2b04      	cmp	r3, #4
    3062:	d011      	beq.n	3088 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3064:	2b20      	cmp	r3, #32
    3066:	d10e      	bne.n	3086 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3068:	7b03      	ldrb	r3, [r0, #12]
    306a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    306c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    306e:	4313      	orrs	r3, r2
    3070:	89c2      	ldrh	r2, [r0, #14]
    3072:	0412      	lsls	r2, r2, #16
    3074:	490d      	ldr	r1, [pc, #52]	; (30ac <system_clock_source_dfll_set_config+0x78>)
    3076:	400a      	ands	r2, r1
    3078:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    307a:	4a0b      	ldr	r2, [pc, #44]	; (30a8 <system_clock_source_dfll_set_config+0x74>)
    307c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    307e:	6811      	ldr	r1, [r2, #0]
    3080:	4b0b      	ldr	r3, [pc, #44]	; (30b0 <system_clock_source_dfll_set_config+0x7c>)
    3082:	430b      	orrs	r3, r1
    3084:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3086:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3088:	7b03      	ldrb	r3, [r0, #12]
    308a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    308c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    308e:	4313      	orrs	r3, r2
    3090:	89c2      	ldrh	r2, [r0, #14]
    3092:	0412      	lsls	r2, r2, #16
    3094:	4905      	ldr	r1, [pc, #20]	; (30ac <system_clock_source_dfll_set_config+0x78>)
    3096:	400a      	ands	r2, r1
    3098:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    309a:	4a03      	ldr	r2, [pc, #12]	; (30a8 <system_clock_source_dfll_set_config+0x74>)
    309c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    309e:	6813      	ldr	r3, [r2, #0]
    30a0:	2104      	movs	r1, #4
    30a2:	430b      	orrs	r3, r1
    30a4:	6013      	str	r3, [r2, #0]
    30a6:	e7ee      	b.n	3086 <system_clock_source_dfll_set_config+0x52>
    30a8:	2000013c 	.word	0x2000013c
    30ac:	03ff0000 	.word	0x03ff0000
    30b0:	00000424 	.word	0x00000424

000030b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    30b4:	2808      	cmp	r0, #8
    30b6:	d803      	bhi.n	30c0 <system_clock_source_enable+0xc>
    30b8:	0080      	lsls	r0, r0, #2
    30ba:	4b25      	ldr	r3, [pc, #148]	; (3150 <system_clock_source_enable+0x9c>)
    30bc:	581b      	ldr	r3, [r3, r0]
    30be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    30c0:	2017      	movs	r0, #23
    30c2:	e044      	b.n	314e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    30c4:	4a23      	ldr	r2, [pc, #140]	; (3154 <system_clock_source_enable+0xa0>)
    30c6:	6a13      	ldr	r3, [r2, #32]
    30c8:	2102      	movs	r1, #2
    30ca:	430b      	orrs	r3, r1
    30cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    30ce:	2000      	movs	r0, #0
    30d0:	e03d      	b.n	314e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    30d2:	4a20      	ldr	r2, [pc, #128]	; (3154 <system_clock_source_enable+0xa0>)
    30d4:	6993      	ldr	r3, [r2, #24]
    30d6:	2102      	movs	r1, #2
    30d8:	430b      	orrs	r3, r1
    30da:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    30dc:	2000      	movs	r0, #0
		break;
    30de:	e036      	b.n	314e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    30e0:	4a1c      	ldr	r2, [pc, #112]	; (3154 <system_clock_source_enable+0xa0>)
    30e2:	8a13      	ldrh	r3, [r2, #16]
    30e4:	2102      	movs	r1, #2
    30e6:	430b      	orrs	r3, r1
    30e8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    30ea:	2000      	movs	r0, #0
		break;
    30ec:	e02f      	b.n	314e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    30ee:	4a19      	ldr	r2, [pc, #100]	; (3154 <system_clock_source_enable+0xa0>)
    30f0:	8a93      	ldrh	r3, [r2, #20]
    30f2:	2102      	movs	r1, #2
    30f4:	430b      	orrs	r3, r1
    30f6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    30f8:	2000      	movs	r0, #0
		break;
    30fa:	e028      	b.n	314e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    30fc:	4916      	ldr	r1, [pc, #88]	; (3158 <system_clock_source_enable+0xa4>)
    30fe:	680b      	ldr	r3, [r1, #0]
    3100:	2202      	movs	r2, #2
    3102:	4313      	orrs	r3, r2
    3104:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3106:	4b13      	ldr	r3, [pc, #76]	; (3154 <system_clock_source_enable+0xa0>)
    3108:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    310a:	0019      	movs	r1, r3
    310c:	320e      	adds	r2, #14
    310e:	68cb      	ldr	r3, [r1, #12]
    3110:	421a      	tst	r2, r3
    3112:	d0fc      	beq.n	310e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3114:	4a10      	ldr	r2, [pc, #64]	; (3158 <system_clock_source_enable+0xa4>)
    3116:	6891      	ldr	r1, [r2, #8]
    3118:	4b0e      	ldr	r3, [pc, #56]	; (3154 <system_clock_source_enable+0xa0>)
    311a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    311c:	6852      	ldr	r2, [r2, #4]
    311e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3120:	2200      	movs	r2, #0
    3122:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3124:	0019      	movs	r1, r3
    3126:	3210      	adds	r2, #16
    3128:	68cb      	ldr	r3, [r1, #12]
    312a:	421a      	tst	r2, r3
    312c:	d0fc      	beq.n	3128 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    312e:	4b0a      	ldr	r3, [pc, #40]	; (3158 <system_clock_source_enable+0xa4>)
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	b29b      	uxth	r3, r3
    3134:	4a07      	ldr	r2, [pc, #28]	; (3154 <system_clock_source_enable+0xa0>)
    3136:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3138:	2000      	movs	r0, #0
    313a:	e008      	b.n	314e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    313c:	4905      	ldr	r1, [pc, #20]	; (3154 <system_clock_source_enable+0xa0>)
    313e:	2244      	movs	r2, #68	; 0x44
    3140:	5c8b      	ldrb	r3, [r1, r2]
    3142:	2002      	movs	r0, #2
    3144:	4303      	orrs	r3, r0
    3146:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3148:	2000      	movs	r0, #0
		break;
    314a:	e000      	b.n	314e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    314c:	2000      	movs	r0, #0
}
    314e:	4770      	bx	lr
    3150:	00006ea0 	.word	0x00006ea0
    3154:	40000800 	.word	0x40000800
    3158:	2000013c 	.word	0x2000013c

0000315c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    315c:	b5f0      	push	{r4, r5, r6, r7, lr}
    315e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3160:	22c2      	movs	r2, #194	; 0xc2
    3162:	00d2      	lsls	r2, r2, #3
    3164:	4b45      	ldr	r3, [pc, #276]	; (327c <system_clock_init+0x120>)
    3166:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3168:	4a45      	ldr	r2, [pc, #276]	; (3280 <system_clock_init+0x124>)
    316a:	6853      	ldr	r3, [r2, #4]
    316c:	211e      	movs	r1, #30
    316e:	438b      	bics	r3, r1
    3170:	391a      	subs	r1, #26
    3172:	430b      	orrs	r3, r1
    3174:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3176:	2202      	movs	r2, #2
    3178:	ab01      	add	r3, sp, #4
    317a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    317c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    317e:	4d41      	ldr	r5, [pc, #260]	; (3284 <system_clock_init+0x128>)
    3180:	b2e0      	uxtb	r0, r4
    3182:	a901      	add	r1, sp, #4
    3184:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3186:	3401      	adds	r4, #1
    3188:	2c25      	cmp	r4, #37	; 0x25
    318a:	d1f9      	bne.n	3180 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    318c:	a80a      	add	r0, sp, #40	; 0x28
    318e:	2300      	movs	r3, #0
    3190:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    3192:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3194:	2280      	movs	r2, #128	; 0x80
    3196:	0212      	lsls	r2, r2, #8
    3198:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    319a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    319c:	2201      	movs	r2, #1
    319e:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    31a0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    31a2:	2106      	movs	r1, #6
    31a4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    31a6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    31a8:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    31aa:	4b37      	ldr	r3, [pc, #220]	; (3288 <system_clock_init+0x12c>)
    31ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    31ae:	2005      	movs	r0, #5
    31b0:	4b36      	ldr	r3, [pc, #216]	; (328c <system_clock_init+0x130>)
    31b2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    31b4:	4931      	ldr	r1, [pc, #196]	; (327c <system_clock_init+0x120>)
    31b6:	2202      	movs	r2, #2
    31b8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    31ba:	421a      	tst	r2, r3
    31bc:	d0fc      	beq.n	31b8 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    31be:	ab05      	add	r3, sp, #20
    31c0:	2100      	movs	r1, #0
    31c2:	2200      	movs	r2, #0
    31c4:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    31c6:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    31c8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    31ca:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    31cc:	313f      	adds	r1, #63	; 0x3f
    31ce:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    31d0:	393b      	subs	r1, #59	; 0x3b
    31d2:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    31d4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    31d6:	4b2e      	ldr	r3, [pc, #184]	; (3290 <system_clock_init+0x134>)
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    31dc:	2b3f      	cmp	r3, #63	; 0x3f
    31de:	d04b      	beq.n	3278 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    31e0:	a805      	add	r0, sp, #20
    31e2:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    31e4:	23b7      	movs	r3, #183	; 0xb7
    31e6:	00db      	lsls	r3, r3, #3
    31e8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    31ea:	2303      	movs	r3, #3
    31ec:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    31ee:	331c      	adds	r3, #28
    31f0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    31f2:	4b28      	ldr	r3, [pc, #160]	; (3294 <system_clock_init+0x138>)
    31f4:	4798      	blx	r3
	config->on_demand       = true;
    31f6:	a804      	add	r0, sp, #16
    31f8:	2501      	movs	r5, #1
    31fa:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    31fc:	2600      	movs	r6, #0
    31fe:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3200:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3202:	4b25      	ldr	r3, [pc, #148]	; (3298 <system_clock_init+0x13c>)
    3204:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3206:	2006      	movs	r0, #6
    3208:	4f20      	ldr	r7, [pc, #128]	; (328c <system_clock_init+0x130>)
    320a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    320c:	4b23      	ldr	r3, [pc, #140]	; (329c <system_clock_init+0x140>)
    320e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3210:	ac01      	add	r4, sp, #4
    3212:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    3214:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3216:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    3218:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    321a:	2305      	movs	r3, #5
    321c:	7023      	strb	r3, [r4, #0]
    321e:	0021      	movs	r1, r4
    3220:	2001      	movs	r0, #1
    3222:	4b1f      	ldr	r3, [pc, #124]	; (32a0 <system_clock_init+0x144>)
    3224:	4798      	blx	r3
    3226:	2001      	movs	r0, #1
    3228:	4b1e      	ldr	r3, [pc, #120]	; (32a4 <system_clock_init+0x148>)
    322a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    322c:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    322e:	0021      	movs	r1, r4
    3230:	2000      	movs	r0, #0
    3232:	4b14      	ldr	r3, [pc, #80]	; (3284 <system_clock_init+0x128>)
    3234:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3236:	2000      	movs	r0, #0
    3238:	4b1b      	ldr	r3, [pc, #108]	; (32a8 <system_clock_init+0x14c>)
    323a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    323c:	2007      	movs	r0, #7
    323e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3240:	490e      	ldr	r1, [pc, #56]	; (327c <system_clock_init+0x120>)
    3242:	22d0      	movs	r2, #208	; 0xd0
    3244:	68cb      	ldr	r3, [r1, #12]
    3246:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3248:	2bd0      	cmp	r3, #208	; 0xd0
    324a:	d1fb      	bne.n	3244 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    324c:	4a17      	ldr	r2, [pc, #92]	; (32ac <system_clock_init+0x150>)
    324e:	2300      	movs	r3, #0
    3250:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3252:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3254:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3256:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3258:	a901      	add	r1, sp, #4
    325a:	2201      	movs	r2, #1
    325c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    325e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    3260:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3262:	3307      	adds	r3, #7
    3264:	700b      	strb	r3, [r1, #0]
    3266:	720a      	strb	r2, [r1, #8]
    3268:	2000      	movs	r0, #0
    326a:	4b0d      	ldr	r3, [pc, #52]	; (32a0 <system_clock_init+0x144>)
    326c:	4798      	blx	r3
    326e:	2000      	movs	r0, #0
    3270:	4b0c      	ldr	r3, [pc, #48]	; (32a4 <system_clock_init+0x148>)
    3272:	4798      	blx	r3
#endif
}
    3274:	b00f      	add	sp, #60	; 0x3c
    3276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3278:	3b20      	subs	r3, #32
    327a:	e7b1      	b.n	31e0 <system_clock_init+0x84>
    327c:	40000800 	.word	0x40000800
    3280:	41004000 	.word	0x41004000
    3284:	000034e9 	.word	0x000034e9
    3288:	00002f7d 	.word	0x00002f7d
    328c:	000030b5 	.word	0x000030b5
    3290:	00806024 	.word	0x00806024
    3294:	00003035 	.word	0x00003035
    3298:	00002f41 	.word	0x00002f41
    329c:	000032b1 	.word	0x000032b1
    32a0:	000032d5 	.word	0x000032d5
    32a4:	0000338d 	.word	0x0000338d
    32a8:	0000345d 	.word	0x0000345d
    32ac:	40000400 	.word	0x40000400

000032b0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    32b0:	4a06      	ldr	r2, [pc, #24]	; (32cc <system_gclk_init+0x1c>)
    32b2:	6993      	ldr	r3, [r2, #24]
    32b4:	2108      	movs	r1, #8
    32b6:	430b      	orrs	r3, r1
    32b8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    32ba:	2201      	movs	r2, #1
    32bc:	4b04      	ldr	r3, [pc, #16]	; (32d0 <system_gclk_init+0x20>)
    32be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    32c0:	0019      	movs	r1, r3
    32c2:	780b      	ldrb	r3, [r1, #0]
    32c4:	4213      	tst	r3, r2
    32c6:	d1fc      	bne.n	32c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    32c8:	4770      	bx	lr
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	40000400 	.word	0x40000400
    32d0:	40000c00 	.word	0x40000c00

000032d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    32d4:	b570      	push	{r4, r5, r6, lr}
    32d6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    32d8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    32da:	780d      	ldrb	r5, [r1, #0]
    32dc:	022d      	lsls	r5, r5, #8
    32de:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    32e0:	784b      	ldrb	r3, [r1, #1]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d002      	beq.n	32ec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    32e6:	2380      	movs	r3, #128	; 0x80
    32e8:	02db      	lsls	r3, r3, #11
    32ea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    32ec:	7a4b      	ldrb	r3, [r1, #9]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d002      	beq.n	32f8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    32f2:	2380      	movs	r3, #128	; 0x80
    32f4:	031b      	lsls	r3, r3, #12
    32f6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    32f8:	6848      	ldr	r0, [r1, #4]
    32fa:	2801      	cmp	r0, #1
    32fc:	d910      	bls.n	3320 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    32fe:	1e43      	subs	r3, r0, #1
    3300:	4218      	tst	r0, r3
    3302:	d134      	bne.n	336e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3304:	2802      	cmp	r0, #2
    3306:	d930      	bls.n	336a <system_gclk_gen_set_config+0x96>
    3308:	2302      	movs	r3, #2
    330a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    330c:	3201      	adds	r2, #1
						mask <<= 1) {
    330e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3310:	4298      	cmp	r0, r3
    3312:	d8fb      	bhi.n	330c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3314:	0212      	lsls	r2, r2, #8
    3316:	4332      	orrs	r2, r6
    3318:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    331a:	2380      	movs	r3, #128	; 0x80
    331c:	035b      	lsls	r3, r3, #13
    331e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3320:	7a0b      	ldrb	r3, [r1, #8]
    3322:	2b00      	cmp	r3, #0
    3324:	d002      	beq.n	332c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3326:	2380      	movs	r3, #128	; 0x80
    3328:	039b      	lsls	r3, r3, #14
    332a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    332c:	4a13      	ldr	r2, [pc, #76]	; (337c <system_gclk_gen_set_config+0xa8>)
    332e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3330:	b25b      	sxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	dbfb      	blt.n	332e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3336:	4b12      	ldr	r3, [pc, #72]	; (3380 <system_gclk_gen_set_config+0xac>)
    3338:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    333a:	4b12      	ldr	r3, [pc, #72]	; (3384 <system_gclk_gen_set_config+0xb0>)
    333c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    333e:	4a0f      	ldr	r2, [pc, #60]	; (337c <system_gclk_gen_set_config+0xa8>)
    3340:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3342:	b25b      	sxtb	r3, r3
    3344:	2b00      	cmp	r3, #0
    3346:	dbfb      	blt.n	3340 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3348:	4b0c      	ldr	r3, [pc, #48]	; (337c <system_gclk_gen_set_config+0xa8>)
    334a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    334c:	001a      	movs	r2, r3
    334e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3350:	b25b      	sxtb	r3, r3
    3352:	2b00      	cmp	r3, #0
    3354:	dbfb      	blt.n	334e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3356:	4a09      	ldr	r2, [pc, #36]	; (337c <system_gclk_gen_set_config+0xa8>)
    3358:	6853      	ldr	r3, [r2, #4]
    335a:	2180      	movs	r1, #128	; 0x80
    335c:	0249      	lsls	r1, r1, #9
    335e:	400b      	ands	r3, r1
    3360:	431d      	orrs	r5, r3
    3362:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3364:	4b08      	ldr	r3, [pc, #32]	; (3388 <system_gclk_gen_set_config+0xb4>)
    3366:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3368:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    336a:	2200      	movs	r2, #0
    336c:	e7d2      	b.n	3314 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    336e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3370:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3372:	2380      	movs	r3, #128	; 0x80
    3374:	029b      	lsls	r3, r3, #10
    3376:	431d      	orrs	r5, r3
    3378:	e7d2      	b.n	3320 <system_gclk_gen_set_config+0x4c>
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	40000c00 	.word	0x40000c00
    3380:	00001a49 	.word	0x00001a49
    3384:	40000c08 	.word	0x40000c08
    3388:	00001a89 	.word	0x00001a89

0000338c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    338c:	b510      	push	{r4, lr}
    338e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3390:	4a0b      	ldr	r2, [pc, #44]	; (33c0 <system_gclk_gen_enable+0x34>)
    3392:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3394:	b25b      	sxtb	r3, r3
    3396:	2b00      	cmp	r3, #0
    3398:	dbfb      	blt.n	3392 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    339a:	4b0a      	ldr	r3, [pc, #40]	; (33c4 <system_gclk_gen_enable+0x38>)
    339c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    339e:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <system_gclk_gen_enable+0x3c>)
    33a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33a2:	4a07      	ldr	r2, [pc, #28]	; (33c0 <system_gclk_gen_enable+0x34>)
    33a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33a6:	b25b      	sxtb	r3, r3
    33a8:	2b00      	cmp	r3, #0
    33aa:	dbfb      	blt.n	33a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    33ac:	4a04      	ldr	r2, [pc, #16]	; (33c0 <system_gclk_gen_enable+0x34>)
    33ae:	6851      	ldr	r1, [r2, #4]
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	025b      	lsls	r3, r3, #9
    33b4:	430b      	orrs	r3, r1
    33b6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    33b8:	4b04      	ldr	r3, [pc, #16]	; (33cc <system_gclk_gen_enable+0x40>)
    33ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33bc:	bd10      	pop	{r4, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	40000c00 	.word	0x40000c00
    33c4:	00001a49 	.word	0x00001a49
    33c8:	40000c04 	.word	0x40000c04
    33cc:	00001a89 	.word	0x00001a89

000033d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33d4:	4a1a      	ldr	r2, [pc, #104]	; (3440 <system_gclk_gen_get_hz+0x70>)
    33d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33d8:	b25b      	sxtb	r3, r3
    33da:	2b00      	cmp	r3, #0
    33dc:	dbfb      	blt.n	33d6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    33de:	4b19      	ldr	r3, [pc, #100]	; (3444 <system_gclk_gen_get_hz+0x74>)
    33e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33e2:	4b19      	ldr	r3, [pc, #100]	; (3448 <system_gclk_gen_get_hz+0x78>)
    33e4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33e6:	4a16      	ldr	r2, [pc, #88]	; (3440 <system_gclk_gen_get_hz+0x70>)
    33e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33ea:	b25b      	sxtb	r3, r3
    33ec:	2b00      	cmp	r3, #0
    33ee:	dbfb      	blt.n	33e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    33f0:	4e13      	ldr	r6, [pc, #76]	; (3440 <system_gclk_gen_get_hz+0x70>)
    33f2:	6870      	ldr	r0, [r6, #4]
    33f4:	04c0      	lsls	r0, r0, #19
    33f6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    33f8:	4b14      	ldr	r3, [pc, #80]	; (344c <system_gclk_gen_get_hz+0x7c>)
    33fa:	4798      	blx	r3
    33fc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33fe:	4b12      	ldr	r3, [pc, #72]	; (3448 <system_gclk_gen_get_hz+0x78>)
    3400:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3402:	6876      	ldr	r6, [r6, #4]
    3404:	02f6      	lsls	r6, r6, #11
    3406:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3408:	4b11      	ldr	r3, [pc, #68]	; (3450 <system_gclk_gen_get_hz+0x80>)
    340a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    340c:	4a0c      	ldr	r2, [pc, #48]	; (3440 <system_gclk_gen_get_hz+0x70>)
    340e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3410:	b25b      	sxtb	r3, r3
    3412:	2b00      	cmp	r3, #0
    3414:	dbfb      	blt.n	340e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3416:	4b0a      	ldr	r3, [pc, #40]	; (3440 <system_gclk_gen_get_hz+0x70>)
    3418:	689c      	ldr	r4, [r3, #8]
    341a:	0224      	lsls	r4, r4, #8
    341c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    341e:	4b0d      	ldr	r3, [pc, #52]	; (3454 <system_gclk_gen_get_hz+0x84>)
    3420:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3422:	2e00      	cmp	r6, #0
    3424:	d107      	bne.n	3436 <system_gclk_gen_get_hz+0x66>
    3426:	2c01      	cmp	r4, #1
    3428:	d907      	bls.n	343a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    342a:	0021      	movs	r1, r4
    342c:	0028      	movs	r0, r5
    342e:	4b0a      	ldr	r3, [pc, #40]	; (3458 <system_gclk_gen_get_hz+0x88>)
    3430:	4798      	blx	r3
    3432:	0005      	movs	r5, r0
    3434:	e001      	b.n	343a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3436:	3401      	adds	r4, #1
    3438:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    343a:	0028      	movs	r0, r5
    343c:	bd70      	pop	{r4, r5, r6, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	40000c00 	.word	0x40000c00
    3444:	00001a49 	.word	0x00001a49
    3448:	40000c04 	.word	0x40000c04
    344c:	00002ead 	.word	0x00002ead
    3450:	40000c08 	.word	0x40000c08
    3454:	00001a89 	.word	0x00001a89
    3458:	000059c1 	.word	0x000059c1

0000345c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    345c:	b510      	push	{r4, lr}
    345e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3460:	4b06      	ldr	r3, [pc, #24]	; (347c <system_gclk_chan_enable+0x20>)
    3462:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3464:	4b06      	ldr	r3, [pc, #24]	; (3480 <system_gclk_chan_enable+0x24>)
    3466:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3468:	4a06      	ldr	r2, [pc, #24]	; (3484 <system_gclk_chan_enable+0x28>)
    346a:	8853      	ldrh	r3, [r2, #2]
    346c:	2180      	movs	r1, #128	; 0x80
    346e:	01c9      	lsls	r1, r1, #7
    3470:	430b      	orrs	r3, r1
    3472:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3474:	4b04      	ldr	r3, [pc, #16]	; (3488 <system_gclk_chan_enable+0x2c>)
    3476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3478:	bd10      	pop	{r4, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	00001a49 	.word	0x00001a49
    3480:	40000c02 	.word	0x40000c02
    3484:	40000c00 	.word	0x40000c00
    3488:	00001a89 	.word	0x00001a89

0000348c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    348c:	b510      	push	{r4, lr}
    348e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3490:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <system_gclk_chan_disable+0x44>)
    3492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3494:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <system_gclk_chan_disable+0x48>)
    3496:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3498:	4a0f      	ldr	r2, [pc, #60]	; (34d8 <system_gclk_chan_disable+0x4c>)
    349a:	8853      	ldrh	r3, [r2, #2]
    349c:	051b      	lsls	r3, r3, #20
    349e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    34a0:	8853      	ldrh	r3, [r2, #2]
    34a2:	490e      	ldr	r1, [pc, #56]	; (34dc <system_gclk_chan_disable+0x50>)
    34a4:	400b      	ands	r3, r1
    34a6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    34a8:	8853      	ldrh	r3, [r2, #2]
    34aa:	490d      	ldr	r1, [pc, #52]	; (34e0 <system_gclk_chan_disable+0x54>)
    34ac:	400b      	ands	r3, r1
    34ae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    34b0:	0011      	movs	r1, r2
    34b2:	2280      	movs	r2, #128	; 0x80
    34b4:	01d2      	lsls	r2, r2, #7
    34b6:	884b      	ldrh	r3, [r1, #2]
    34b8:	4213      	tst	r3, r2
    34ba:	d1fc      	bne.n	34b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    34bc:	4906      	ldr	r1, [pc, #24]	; (34d8 <system_gclk_chan_disable+0x4c>)
    34be:	884a      	ldrh	r2, [r1, #2]
    34c0:	0203      	lsls	r3, r0, #8
    34c2:	4806      	ldr	r0, [pc, #24]	; (34dc <system_gclk_chan_disable+0x50>)
    34c4:	4002      	ands	r2, r0
    34c6:	4313      	orrs	r3, r2
    34c8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    34ca:	4b06      	ldr	r3, [pc, #24]	; (34e4 <system_gclk_chan_disable+0x58>)
    34cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34ce:	bd10      	pop	{r4, pc}
    34d0:	00001a49 	.word	0x00001a49
    34d4:	40000c02 	.word	0x40000c02
    34d8:	40000c00 	.word	0x40000c00
    34dc:	fffff0ff 	.word	0xfffff0ff
    34e0:	ffffbfff 	.word	0xffffbfff
    34e4:	00001a89 	.word	0x00001a89

000034e8 <system_gclk_chan_set_config>:
{
    34e8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    34ea:	780c      	ldrb	r4, [r1, #0]
    34ec:	0224      	lsls	r4, r4, #8
    34ee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    34f0:	4b02      	ldr	r3, [pc, #8]	; (34fc <system_gclk_chan_set_config+0x14>)
    34f2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    34f4:	b2a4      	uxth	r4, r4
    34f6:	4b02      	ldr	r3, [pc, #8]	; (3500 <system_gclk_chan_set_config+0x18>)
    34f8:	805c      	strh	r4, [r3, #2]
}
    34fa:	bd10      	pop	{r4, pc}
    34fc:	0000348d 	.word	0x0000348d
    3500:	40000c00 	.word	0x40000c00

00003504 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3504:	b510      	push	{r4, lr}
    3506:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3508:	4b06      	ldr	r3, [pc, #24]	; (3524 <system_gclk_chan_get_hz+0x20>)
    350a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    350c:	4b06      	ldr	r3, [pc, #24]	; (3528 <system_gclk_chan_get_hz+0x24>)
    350e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3510:	4b06      	ldr	r3, [pc, #24]	; (352c <system_gclk_chan_get_hz+0x28>)
    3512:	885c      	ldrh	r4, [r3, #2]
    3514:	0524      	lsls	r4, r4, #20
    3516:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3518:	4b05      	ldr	r3, [pc, #20]	; (3530 <system_gclk_chan_get_hz+0x2c>)
    351a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    351c:	0020      	movs	r0, r4
    351e:	4b05      	ldr	r3, [pc, #20]	; (3534 <system_gclk_chan_get_hz+0x30>)
    3520:	4798      	blx	r3
}
    3522:	bd10      	pop	{r4, pc}
    3524:	00001a49 	.word	0x00001a49
    3528:	40000c02 	.word	0x40000c02
    352c:	40000c00 	.word	0x40000c00
    3530:	00001a89 	.word	0x00001a89
    3534:	000033d1 	.word	0x000033d1

00003538 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3538:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    353a:	78d3      	ldrb	r3, [r2, #3]
    353c:	2b00      	cmp	r3, #0
    353e:	d135      	bne.n	35ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3540:	7813      	ldrb	r3, [r2, #0]
    3542:	2b80      	cmp	r3, #128	; 0x80
    3544:	d029      	beq.n	359a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3546:	061b      	lsls	r3, r3, #24
    3548:	2480      	movs	r4, #128	; 0x80
    354a:	0264      	lsls	r4, r4, #9
    354c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    354e:	7854      	ldrb	r4, [r2, #1]
    3550:	2502      	movs	r5, #2
    3552:	43ac      	bics	r4, r5
    3554:	d106      	bne.n	3564 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3556:	7894      	ldrb	r4, [r2, #2]
    3558:	2c00      	cmp	r4, #0
    355a:	d120      	bne.n	359e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    355c:	2480      	movs	r4, #128	; 0x80
    355e:	02a4      	lsls	r4, r4, #10
    3560:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3562:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3564:	7854      	ldrb	r4, [r2, #1]
    3566:	3c01      	subs	r4, #1
    3568:	2c01      	cmp	r4, #1
    356a:	d91c      	bls.n	35a6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    356c:	040d      	lsls	r5, r1, #16
    356e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3570:	24a0      	movs	r4, #160	; 0xa0
    3572:	05e4      	lsls	r4, r4, #23
    3574:	432c      	orrs	r4, r5
    3576:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3578:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    357a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    357c:	24d0      	movs	r4, #208	; 0xd0
    357e:	0624      	lsls	r4, r4, #24
    3580:	432c      	orrs	r4, r5
    3582:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3584:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3586:	78d4      	ldrb	r4, [r2, #3]
    3588:	2c00      	cmp	r4, #0
    358a:	d122      	bne.n	35d2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    358c:	035b      	lsls	r3, r3, #13
    358e:	d51c      	bpl.n	35ca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3590:	7893      	ldrb	r3, [r2, #2]
    3592:	2b01      	cmp	r3, #1
    3594:	d01e      	beq.n	35d4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3596:	6141      	str	r1, [r0, #20]
    3598:	e017      	b.n	35ca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    359a:	2300      	movs	r3, #0
    359c:	e7d7      	b.n	354e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    359e:	24c0      	movs	r4, #192	; 0xc0
    35a0:	02e4      	lsls	r4, r4, #11
    35a2:	4323      	orrs	r3, r4
    35a4:	e7dd      	b.n	3562 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    35a6:	4c0d      	ldr	r4, [pc, #52]	; (35dc <_system_pinmux_config+0xa4>)
    35a8:	4023      	ands	r3, r4
    35aa:	e7df      	b.n	356c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    35ac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35ae:	040c      	lsls	r4, r1, #16
    35b0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35b2:	23a0      	movs	r3, #160	; 0xa0
    35b4:	05db      	lsls	r3, r3, #23
    35b6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35b8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    35ba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    35bc:	23d0      	movs	r3, #208	; 0xd0
    35be:	061b      	lsls	r3, r3, #24
    35c0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    35c2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    35c4:	78d3      	ldrb	r3, [r2, #3]
    35c6:	2b00      	cmp	r3, #0
    35c8:	d103      	bne.n	35d2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    35ca:	7853      	ldrb	r3, [r2, #1]
    35cc:	3b01      	subs	r3, #1
    35ce:	2b01      	cmp	r3, #1
    35d0:	d902      	bls.n	35d8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    35d2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    35d4:	6181      	str	r1, [r0, #24]
    35d6:	e7f8      	b.n	35ca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    35d8:	6081      	str	r1, [r0, #8]
}
    35da:	e7fa      	b.n	35d2 <_system_pinmux_config+0x9a>
    35dc:	fffbffff 	.word	0xfffbffff

000035e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    35e0:	b510      	push	{r4, lr}
    35e2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    35e4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    35e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    35e8:	2900      	cmp	r1, #0
    35ea:	d104      	bne.n	35f6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    35ec:	0943      	lsrs	r3, r0, #5
    35ee:	01db      	lsls	r3, r3, #7
    35f0:	4905      	ldr	r1, [pc, #20]	; (3608 <system_pinmux_pin_set_config+0x28>)
    35f2:	468c      	mov	ip, r1
    35f4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    35f6:	241f      	movs	r4, #31
    35f8:	4020      	ands	r0, r4
    35fa:	2101      	movs	r1, #1
    35fc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    35fe:	0018      	movs	r0, r3
    3600:	4b02      	ldr	r3, [pc, #8]	; (360c <system_pinmux_pin_set_config+0x2c>)
    3602:	4798      	blx	r3
}
    3604:	bd10      	pop	{r4, pc}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	41004400 	.word	0x41004400
    360c:	00003539 	.word	0x00003539

00003610 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3610:	4770      	bx	lr
	...

00003614 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3614:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3616:	4b05      	ldr	r3, [pc, #20]	; (362c <system_init+0x18>)
    3618:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    361a:	4b05      	ldr	r3, [pc, #20]	; (3630 <system_init+0x1c>)
    361c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <system_init+0x20>)
    3620:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3622:	4b05      	ldr	r3, [pc, #20]	; (3638 <system_init+0x24>)
    3624:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3626:	4b05      	ldr	r3, [pc, #20]	; (363c <system_init+0x28>)
    3628:	4798      	blx	r3
}
    362a:	bd10      	pop	{r4, pc}
    362c:	0000315d 	.word	0x0000315d
    3630:	00000181 	.word	0x00000181
    3634:	00003611 	.word	0x00003611
    3638:	00003611 	.word	0x00003611
    363c:	00003611 	.word	0x00003611

00003640 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3640:	e7fe      	b.n	3640 <Dummy_Handler>
	...

00003644 <Reset_Handler>:
{
    3644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3646:	4a2a      	ldr	r2, [pc, #168]	; (36f0 <Reset_Handler+0xac>)
    3648:	4b2a      	ldr	r3, [pc, #168]	; (36f4 <Reset_Handler+0xb0>)
    364a:	429a      	cmp	r2, r3
    364c:	d011      	beq.n	3672 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    364e:	001a      	movs	r2, r3
    3650:	4b29      	ldr	r3, [pc, #164]	; (36f8 <Reset_Handler+0xb4>)
    3652:	429a      	cmp	r2, r3
    3654:	d20d      	bcs.n	3672 <Reset_Handler+0x2e>
    3656:	4a29      	ldr	r2, [pc, #164]	; (36fc <Reset_Handler+0xb8>)
    3658:	3303      	adds	r3, #3
    365a:	1a9b      	subs	r3, r3, r2
    365c:	089b      	lsrs	r3, r3, #2
    365e:	3301      	adds	r3, #1
    3660:	009b      	lsls	r3, r3, #2
    3662:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3664:	4823      	ldr	r0, [pc, #140]	; (36f4 <Reset_Handler+0xb0>)
    3666:	4922      	ldr	r1, [pc, #136]	; (36f0 <Reset_Handler+0xac>)
    3668:	588c      	ldr	r4, [r1, r2]
    366a:	5084      	str	r4, [r0, r2]
    366c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    366e:	429a      	cmp	r2, r3
    3670:	d1fa      	bne.n	3668 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3672:	4a23      	ldr	r2, [pc, #140]	; (3700 <Reset_Handler+0xbc>)
    3674:	4b23      	ldr	r3, [pc, #140]	; (3704 <Reset_Handler+0xc0>)
    3676:	429a      	cmp	r2, r3
    3678:	d20a      	bcs.n	3690 <Reset_Handler+0x4c>
    367a:	43d3      	mvns	r3, r2
    367c:	4921      	ldr	r1, [pc, #132]	; (3704 <Reset_Handler+0xc0>)
    367e:	185b      	adds	r3, r3, r1
    3680:	2103      	movs	r1, #3
    3682:	438b      	bics	r3, r1
    3684:	3304      	adds	r3, #4
    3686:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3688:	2100      	movs	r1, #0
    368a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    368c:	4293      	cmp	r3, r2
    368e:	d1fc      	bne.n	368a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3690:	4a1d      	ldr	r2, [pc, #116]	; (3708 <Reset_Handler+0xc4>)
    3692:	21ff      	movs	r1, #255	; 0xff
    3694:	4b1d      	ldr	r3, [pc, #116]	; (370c <Reset_Handler+0xc8>)
    3696:	438b      	bics	r3, r1
    3698:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    369a:	39fd      	subs	r1, #253	; 0xfd
    369c:	2390      	movs	r3, #144	; 0x90
    369e:	005b      	lsls	r3, r3, #1
    36a0:	4a1b      	ldr	r2, [pc, #108]	; (3710 <Reset_Handler+0xcc>)
    36a2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    36a4:	4a1b      	ldr	r2, [pc, #108]	; (3714 <Reset_Handler+0xd0>)
    36a6:	78d3      	ldrb	r3, [r2, #3]
    36a8:	2503      	movs	r5, #3
    36aa:	43ab      	bics	r3, r5
    36ac:	2402      	movs	r4, #2
    36ae:	4323      	orrs	r3, r4
    36b0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    36b2:	78d3      	ldrb	r3, [r2, #3]
    36b4:	270c      	movs	r7, #12
    36b6:	43bb      	bics	r3, r7
    36b8:	2608      	movs	r6, #8
    36ba:	4333      	orrs	r3, r6
    36bc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    36be:	4b16      	ldr	r3, [pc, #88]	; (3718 <Reset_Handler+0xd4>)
    36c0:	7b98      	ldrb	r0, [r3, #14]
    36c2:	2230      	movs	r2, #48	; 0x30
    36c4:	4390      	bics	r0, r2
    36c6:	2220      	movs	r2, #32
    36c8:	4310      	orrs	r0, r2
    36ca:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    36cc:	7b99      	ldrb	r1, [r3, #14]
    36ce:	43b9      	bics	r1, r7
    36d0:	4331      	orrs	r1, r6
    36d2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    36d4:	7b9a      	ldrb	r2, [r3, #14]
    36d6:	43aa      	bics	r2, r5
    36d8:	4322      	orrs	r2, r4
    36da:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    36dc:	4a0f      	ldr	r2, [pc, #60]	; (371c <Reset_Handler+0xd8>)
    36de:	6853      	ldr	r3, [r2, #4]
    36e0:	2180      	movs	r1, #128	; 0x80
    36e2:	430b      	orrs	r3, r1
    36e4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    36e6:	4b0e      	ldr	r3, [pc, #56]	; (3720 <Reset_Handler+0xdc>)
    36e8:	4798      	blx	r3
        main();
    36ea:	4b0e      	ldr	r3, [pc, #56]	; (3724 <Reset_Handler+0xe0>)
    36ec:	4798      	blx	r3
    36ee:	e7fe      	b.n	36ee <Reset_Handler+0xaa>
    36f0:	00007928 	.word	0x00007928
    36f4:	20000000 	.word	0x20000000
    36f8:	20000070 	.word	0x20000070
    36fc:	20000004 	.word	0x20000004
    3700:	20000070 	.word	0x20000070
    3704:	20000a00 	.word	0x20000a00
    3708:	e000ed00 	.word	0xe000ed00
    370c:	00000000 	.word	0x00000000
    3710:	41007000 	.word	0x41007000
    3714:	41005000 	.word	0x41005000
    3718:	41004800 	.word	0x41004800
    371c:	41004000 	.word	0x41004000
    3720:	00005d01 	.word	0x00005d01
    3724:	00005695 	.word	0x00005695

00003728 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	46c6      	mov	lr, r8
    372c:	b500      	push	{lr}
    372e:	000c      	movs	r4, r1
    3730:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3732:	2800      	cmp	r0, #0
    3734:	d10f      	bne.n	3756 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3736:	2a00      	cmp	r2, #0
    3738:	dd11      	ble.n	375e <_read+0x36>
    373a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    373c:	4e09      	ldr	r6, [pc, #36]	; (3764 <_read+0x3c>)
    373e:	4d0a      	ldr	r5, [pc, #40]	; (3768 <_read+0x40>)
    3740:	6830      	ldr	r0, [r6, #0]
    3742:	0021      	movs	r1, r4
    3744:	682b      	ldr	r3, [r5, #0]
    3746:	4798      	blx	r3
		ptr++;
    3748:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    374a:	42bc      	cmp	r4, r7
    374c:	d1f8      	bne.n	3740 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    374e:	4640      	mov	r0, r8
    3750:	bc04      	pop	{r2}
    3752:	4690      	mov	r8, r2
    3754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3756:	2301      	movs	r3, #1
    3758:	425b      	negs	r3, r3
    375a:	4698      	mov	r8, r3
    375c:	e7f7      	b.n	374e <_read+0x26>
	for (; len > 0; --len) {
    375e:	4680      	mov	r8, r0
    3760:	e7f5      	b.n	374e <_read+0x26>
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	200009f0 	.word	0x200009f0
    3768:	200009e8 	.word	0x200009e8

0000376c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    376c:	b5f0      	push	{r4, r5, r6, r7, lr}
    376e:	46c6      	mov	lr, r8
    3770:	b500      	push	{lr}
    3772:	000e      	movs	r6, r1
    3774:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3776:	3801      	subs	r0, #1
    3778:	2802      	cmp	r0, #2
    377a:	d810      	bhi.n	379e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    377c:	2a00      	cmp	r2, #0
    377e:	d011      	beq.n	37a4 <_write+0x38>
    3780:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3782:	4b0c      	ldr	r3, [pc, #48]	; (37b4 <_write+0x48>)
    3784:	4698      	mov	r8, r3
    3786:	4f0c      	ldr	r7, [pc, #48]	; (37b8 <_write+0x4c>)
    3788:	4643      	mov	r3, r8
    378a:	6818      	ldr	r0, [r3, #0]
    378c:	5d31      	ldrb	r1, [r6, r4]
    378e:	683b      	ldr	r3, [r7, #0]
    3790:	4798      	blx	r3
    3792:	2800      	cmp	r0, #0
    3794:	db08      	blt.n	37a8 <_write+0x3c>
			return -1;
		}
		++nChars;
    3796:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3798:	42a5      	cmp	r5, r4
    379a:	d1f5      	bne.n	3788 <_write+0x1c>
    379c:	e006      	b.n	37ac <_write+0x40>
		return -1;
    379e:	2401      	movs	r4, #1
    37a0:	4264      	negs	r4, r4
    37a2:	e003      	b.n	37ac <_write+0x40>
	for (; len != 0; --len) {
    37a4:	0014      	movs	r4, r2
    37a6:	e001      	b.n	37ac <_write+0x40>
			return -1;
    37a8:	2401      	movs	r4, #1
    37aa:	4264      	negs	r4, r4
	}
	return nChars;
}
    37ac:	0020      	movs	r0, r4
    37ae:	bc04      	pop	{r2}
    37b0:	4690      	mov	r8, r2
    37b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37b4:	200009f0 	.word	0x200009f0
    37b8:	200009ec 	.word	0x200009ec

000037bc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    37bc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    37be:	4a06      	ldr	r2, [pc, #24]	; (37d8 <_sbrk+0x1c>)
    37c0:	6812      	ldr	r2, [r2, #0]
    37c2:	2a00      	cmp	r2, #0
    37c4:	d004      	beq.n	37d0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    37c6:	4a04      	ldr	r2, [pc, #16]	; (37d8 <_sbrk+0x1c>)
    37c8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    37ca:	18c3      	adds	r3, r0, r3
    37cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    37ce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    37d0:	4902      	ldr	r1, [pc, #8]	; (37dc <_sbrk+0x20>)
    37d2:	4a01      	ldr	r2, [pc, #4]	; (37d8 <_sbrk+0x1c>)
    37d4:	6011      	str	r1, [r2, #0]
    37d6:	e7f6      	b.n	37c6 <_sbrk+0xa>
    37d8:	20000154 	.word	0x20000154
    37dc:	20002a00 	.word	0x20002a00

000037e0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    37e0:	2001      	movs	r0, #1
    37e2:	4240      	negs	r0, r0
    37e4:	4770      	bx	lr

000037e6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    37e6:	2380      	movs	r3, #128	; 0x80
    37e8:	019b      	lsls	r3, r3, #6
    37ea:	604b      	str	r3, [r1, #4]

	return 0;
}
    37ec:	2000      	movs	r0, #0
    37ee:	4770      	bx	lr

000037f0 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    37f0:	2000      	movs	r0, #0
    37f2:	4770      	bx	lr

000037f4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    37f4:	b530      	push	{r4, r5, lr}
    37f6:	b087      	sub	sp, #28
    37f8:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    37fa:	aa01      	add	r2, sp, #4
    37fc:	23a0      	movs	r3, #160	; 0xa0
    37fe:	011b      	lsls	r3, r3, #4
    3800:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3802:	2300      	movs	r3, #0
    3804:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3806:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3808:	21fa      	movs	r1, #250	; 0xfa
    380a:	00c9      	lsls	r1, r1, #3
    380c:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    380e:	2101      	movs	r1, #1
    3810:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3812:	2004      	movs	r0, #4
    3814:	7210      	strb	r0, [r2, #8]
    3816:	7253      	strb	r3, [r2, #9]
    3818:	7293      	strb	r3, [r2, #10]
    381a:	72d3      	strb	r3, [r2, #11]
    381c:	7311      	strb	r1, [r2, #12]
    381e:	7351      	strb	r1, [r2, #13]
    3820:	4b14      	ldr	r3, [pc, #80]	; (3874 <disk_initialize+0x80>)
    3822:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3824:	2306      	movs	r3, #6
    3826:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3828:	4d13      	ldr	r5, [pc, #76]	; (3878 <disk_initialize+0x84>)
    382a:	4914      	ldr	r1, [pc, #80]	; (387c <disk_initialize+0x88>)
    382c:	0028      	movs	r0, r5
    382e:	4b14      	ldr	r3, [pc, #80]	; (3880 <disk_initialize+0x8c>)
    3830:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3832:	0028      	movs	r0, r5
    3834:	4b13      	ldr	r3, [pc, #76]	; (3884 <disk_initialize+0x90>)
    3836:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3838:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    383a:	2c01      	cmp	r4, #1
    383c:	d901      	bls.n	3842 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    383e:	b007      	add	sp, #28
    3840:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3842:	0020      	movs	r0, r4
    3844:	4b10      	ldr	r3, [pc, #64]	; (3888 <disk_initialize+0x94>)
    3846:	4798      	blx	r3
    3848:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    384a:	2803      	cmp	r0, #3
    384c:	d106      	bne.n	385c <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    384e:	0020      	movs	r0, r4
    3850:	4b0d      	ldr	r3, [pc, #52]	; (3888 <disk_initialize+0x94>)
    3852:	4798      	blx	r3
    3854:	0003      	movs	r3, r0
		return STA_NOINIT;
    3856:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3858:	2b03      	cmp	r3, #3
    385a:	d0f0      	beq.n	383e <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    385c:	2b00      	cmp	r3, #0
    385e:	d106      	bne.n	386e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3860:	0020      	movs	r0, r4
    3862:	4b0a      	ldr	r3, [pc, #40]	; (388c <disk_initialize+0x98>)
    3864:	4798      	blx	r3
	return 0;
    3866:	1e43      	subs	r3, r0, #1
    3868:	4198      	sbcs	r0, r3
    386a:	0080      	lsls	r0, r0, #2
    386c:	e7e7      	b.n	383e <disk_initialize+0x4a>
		return STA_NOINIT;
    386e:	2001      	movs	r0, #1
    3870:	e7e5      	b.n	383e <disk_initialize+0x4a>
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	000007de 	.word	0x000007de
    3878:	200009f4 	.word	0x200009f4
    387c:	40001400 	.word	0x40001400
    3880:	00001c21 	.word	0x00001c21
    3884:	00001add 	.word	0x00001add
    3888:	000019b5 	.word	0x000019b5
    388c:	000019f1 	.word	0x000019f1

00003890 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3890:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3892:	4b05      	ldr	r3, [pc, #20]	; (38a8 <disk_status+0x18>)
    3894:	4798      	blx	r3
    3896:	1e03      	subs	r3, r0, #0
    3898:	d004      	beq.n	38a4 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    389a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    389c:	2b02      	cmp	r3, #2
    389e:	d000      	beq.n	38a2 <disk_status+0x12>
	default:
		return STA_NOINIT;
    38a0:	3802      	subs	r0, #2
	}
}
    38a2:	bd10      	pop	{r4, pc}
		return 0;
    38a4:	2000      	movs	r0, #0
    38a6:	e7fc      	b.n	38a2 <disk_status+0x12>
    38a8:	000019b5 	.word	0x000019b5

000038ac <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	46de      	mov	lr, fp
    38b0:	464f      	mov	r7, r9
    38b2:	4646      	mov	r6, r8
    38b4:	b5c0      	push	{r6, r7, lr}
    38b6:	b084      	sub	sp, #16
    38b8:	9001      	str	r0, [sp, #4]
    38ba:	000d      	movs	r5, r1
    38bc:	0014      	movs	r4, r2
    38be:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    38c0:	4b18      	ldr	r3, [pc, #96]	; (3924 <disk_read+0x78>)
    38c2:	4798      	blx	r3
    38c4:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    38c6:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    38c8:	2e00      	cmp	r6, #0
    38ca:	d105      	bne.n	38d8 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    38cc:	b004      	add	sp, #16
    38ce:	bc1c      	pop	{r2, r3, r4}
    38d0:	4690      	mov	r8, r2
    38d2:	4699      	mov	r9, r3
    38d4:	46a3      	mov	fp, r4
    38d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    38d8:	a903      	add	r1, sp, #12
    38da:	9801      	ldr	r0, [sp, #4]
    38dc:	4b12      	ldr	r3, [pc, #72]	; (3928 <disk_read+0x7c>)
    38de:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    38e0:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    38e2:	0032      	movs	r2, r6
    38e4:	437a      	muls	r2, r7
    38e6:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    38e8:	9b03      	ldr	r3, [sp, #12]
    38ea:	3301      	adds	r3, #1
    38ec:	4373      	muls	r3, r6
		return RES_PARERR;
    38ee:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    38f0:	429a      	cmp	r2, r3
    38f2:	d8eb      	bhi.n	38cc <disk_read+0x20>
	for (i = 0; i < count; i++) {
    38f4:	2f00      	cmp	r7, #0
    38f6:	d011      	beq.n	391c <disk_read+0x70>
    38f8:	0273      	lsls	r3, r6, #9
    38fa:	4698      	mov	r8, r3
    38fc:	1c7b      	adds	r3, r7, #1
    38fe:	469b      	mov	fp, r3
    3900:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3902:	4e0a      	ldr	r6, [pc, #40]	; (392c <disk_read+0x80>)
    3904:	002a      	movs	r2, r5
    3906:	0021      	movs	r1, r4
    3908:	9801      	ldr	r0, [sp, #4]
    390a:	47b0      	blx	r6
    390c:	2800      	cmp	r0, #0
    390e:	d107      	bne.n	3920 <disk_read+0x74>
    3910:	3701      	adds	r7, #1
    3912:	444c      	add	r4, r9
    3914:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3916:	455f      	cmp	r7, fp
    3918:	d1f4      	bne.n	3904 <disk_read+0x58>
    391a:	e7d7      	b.n	38cc <disk_read+0x20>
	return RES_OK;
    391c:	2000      	movs	r0, #0
    391e:	e7d5      	b.n	38cc <disk_read+0x20>
			return RES_ERROR;
    3920:	2001      	movs	r0, #1
    3922:	e7d3      	b.n	38cc <disk_read+0x20>
    3924:	000019e9 	.word	0x000019e9
    3928:	000019cd 	.word	0x000019cd
    392c:	00001a09 	.word	0x00001a09

00003930 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3930:	b5f0      	push	{r4, r5, r6, r7, lr}
    3932:	46de      	mov	lr, fp
    3934:	464f      	mov	r7, r9
    3936:	4646      	mov	r6, r8
    3938:	b5c0      	push	{r6, r7, lr}
    393a:	b084      	sub	sp, #16
    393c:	9001      	str	r0, [sp, #4]
    393e:	000d      	movs	r5, r1
    3940:	0014      	movs	r4, r2
    3942:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3944:	4b18      	ldr	r3, [pc, #96]	; (39a8 <disk_write+0x78>)
    3946:	4798      	blx	r3
    3948:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    394a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    394c:	2e00      	cmp	r6, #0
    394e:	d105      	bne.n	395c <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3950:	b004      	add	sp, #16
    3952:	bc1c      	pop	{r2, r3, r4}
    3954:	4690      	mov	r8, r2
    3956:	4699      	mov	r9, r3
    3958:	46a3      	mov	fp, r4
    395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    395c:	a903      	add	r1, sp, #12
    395e:	9801      	ldr	r0, [sp, #4]
    3960:	4b12      	ldr	r3, [pc, #72]	; (39ac <disk_write+0x7c>)
    3962:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3964:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3966:	0032      	movs	r2, r6
    3968:	437a      	muls	r2, r7
    396a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    396c:	9b03      	ldr	r3, [sp, #12]
    396e:	3301      	adds	r3, #1
    3970:	4373      	muls	r3, r6
		return RES_PARERR;
    3972:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3974:	429a      	cmp	r2, r3
    3976:	d8eb      	bhi.n	3950 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3978:	2f00      	cmp	r7, #0
    397a:	d011      	beq.n	39a0 <disk_write+0x70>
    397c:	0273      	lsls	r3, r6, #9
    397e:	4698      	mov	r8, r3
    3980:	1c7b      	adds	r3, r7, #1
    3982:	469b      	mov	fp, r3
    3984:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3986:	4e0a      	ldr	r6, [pc, #40]	; (39b0 <disk_write+0x80>)
    3988:	002a      	movs	r2, r5
    398a:	0021      	movs	r1, r4
    398c:	9801      	ldr	r0, [sp, #4]
    398e:	47b0      	blx	r6
    3990:	2800      	cmp	r0, #0
    3992:	d107      	bne.n	39a4 <disk_write+0x74>
    3994:	3701      	adds	r7, #1
    3996:	444c      	add	r4, r9
    3998:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    399a:	455f      	cmp	r7, fp
    399c:	d1f4      	bne.n	3988 <disk_write+0x58>
    399e:	e7d7      	b.n	3950 <disk_write+0x20>
	return RES_OK;
    39a0:	2000      	movs	r0, #0
    39a2:	e7d5      	b.n	3950 <disk_write+0x20>
			return RES_ERROR;
    39a4:	2001      	movs	r0, #1
    39a6:	e7d3      	b.n	3950 <disk_write+0x20>
    39a8:	000019e9 	.word	0x000019e9
    39ac:	000019cd 	.word	0x000019cd
    39b0:	00001a29 	.word	0x00001a29

000039b4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    39b4:	b510      	push	{r4, lr}
    39b6:	b082      	sub	sp, #8
    39b8:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    39ba:	2901      	cmp	r1, #1
    39bc:	d00b      	beq.n	39d6 <disk_ioctl+0x22>
    39be:	2900      	cmp	r1, #0
    39c0:	d020      	beq.n	3a04 <disk_ioctl+0x50>
    39c2:	2902      	cmp	r1, #2
    39c4:	d00f      	beq.n	39e6 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    39c6:	2004      	movs	r0, #4
	switch (ctrl) {
    39c8:	2903      	cmp	r1, #3
    39ca:	d102      	bne.n	39d2 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    39cc:	2301      	movs	r3, #1
    39ce:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    39d0:	2000      	movs	r0, #0
	}

	return res;
}
    39d2:	b002      	add	sp, #8
    39d4:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    39d6:	a901      	add	r1, sp, #4
    39d8:	4b0e      	ldr	r3, [pc, #56]	; (3a14 <disk_ioctl+0x60>)
    39da:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	3301      	adds	r3, #1
    39e0:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    39e2:	2000      	movs	r0, #0
	break;
    39e4:	e7f5      	b.n	39d2 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    39e6:	4b0c      	ldr	r3, [pc, #48]	; (3a18 <disk_ioctl+0x64>)
    39e8:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    39ea:	1e43      	subs	r3, r0, #1
    39ec:	b2db      	uxtb	r3, r3
    39ee:	2b01      	cmp	r3, #1
    39f0:	d904      	bls.n	39fc <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    39f2:	1f03      	subs	r3, r0, #4
    39f4:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    39f6:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    39f8:	4213      	tst	r3, r2
    39fa:	d1ea      	bne.n	39d2 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    39fc:	2300      	movs	r3, #0
    39fe:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3a00:	2000      	movs	r0, #0
	break;
    3a02:	e7e6      	b.n	39d2 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3a04:	4b05      	ldr	r3, [pc, #20]	; (3a1c <disk_ioctl+0x68>)
    3a06:	4798      	blx	r3
    3a08:	2800      	cmp	r0, #0
    3a0a:	d001      	beq.n	3a10 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3a0c:	2003      	movs	r0, #3
    3a0e:	e7e0      	b.n	39d2 <disk_ioctl+0x1e>
			res = RES_OK;
    3a10:	2000      	movs	r0, #0
    3a12:	e7de      	b.n	39d2 <disk_ioctl+0x1e>
    3a14:	000019cd 	.word	0x000019cd
    3a18:	000019e9 	.word	0x000019e9
    3a1c:	000019b5 	.word	0x000019b5

00003a20 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3a20:	b500      	push	{lr}
    3a22:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3a24:	4669      	mov	r1, sp
    3a26:	480f      	ldr	r0, [pc, #60]	; (3a64 <get_fattime+0x44>)
    3a28:	4b0f      	ldr	r3, [pc, #60]	; (3a68 <get_fattime+0x48>)
    3a2a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3a2c:	466b      	mov	r3, sp
    3a2e:	7958      	ldrb	r0, [r3, #5]
    3a30:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3a32:	791b      	ldrb	r3, [r3, #4]
    3a34:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3a36:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3a38:	466b      	mov	r3, sp
    3a3a:	789b      	ldrb	r3, [r3, #2]
    3a3c:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    3a3e:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3a40:	466b      	mov	r3, sp
    3a42:	785b      	ldrb	r3, [r3, #1]
    3a44:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3a46:	4318      	orrs	r0, r3
    3a48:	466b      	mov	r3, sp
    3a4a:	781b      	ldrb	r3, [r3, #0]
    3a4c:	085b      	lsrs	r3, r3, #1
    3a4e:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3a50:	466b      	mov	r3, sp
    3a52:	88db      	ldrh	r3, [r3, #6]
    3a54:	4a05      	ldr	r2, [pc, #20]	; (3a6c <get_fattime+0x4c>)
    3a56:	4694      	mov	ip, r2
    3a58:	4463      	add	r3, ip
    3a5a:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3a5c:	4318      	orrs	r0, r3

	return ul_time;
}
    3a5e:	b003      	add	sp, #12
    3a60:	bd00      	pop	{pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	200009f4 	.word	0x200009f4
    3a68:	00001ba9 	.word	0x00001ba9
    3a6c:	fffff844 	.word	0xfffff844

00003a70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3a70:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3a72:	2a00      	cmp	r2, #0
    3a74:	d005      	beq.n	3a82 <mem_cpy+0x12>
    3a76:	2300      	movs	r3, #0
		*d++ = *s++;
    3a78:	5ccc      	ldrb	r4, [r1, r3]
    3a7a:	54c4      	strb	r4, [r0, r3]
    3a7c:	3301      	adds	r3, #1
	while (cnt--)
    3a7e:	4293      	cmp	r3, r2
    3a80:	d1fa      	bne.n	3a78 <mem_cpy+0x8>
}
    3a82:	bd10      	pop	{r4, pc}

00003a84 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3a84:	2a00      	cmp	r2, #0
    3a86:	d005      	beq.n	3a94 <mem_set+0x10>
    3a88:	0003      	movs	r3, r0
    3a8a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3a8c:	7019      	strb	r1, [r3, #0]
    3a8e:	3301      	adds	r3, #1
	while (cnt--)
    3a90:	4293      	cmp	r3, r2
    3a92:	d1fb      	bne.n	3a8c <mem_set+0x8>
}
    3a94:	4770      	bx	lr

00003a96 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3a96:	0002      	movs	r2, r0
	clst -= 2;
    3a98:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3a9a:	6983      	ldr	r3, [r0, #24]
    3a9c:	3b02      	subs	r3, #2
    3a9e:	2000      	movs	r0, #0
    3aa0:	4299      	cmp	r1, r3
    3aa2:	d203      	bcs.n	3aac <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3aa4:	7890      	ldrb	r0, [r2, #2]
    3aa6:	4341      	muls	r1, r0
    3aa8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3aaa:	1808      	adds	r0, r1, r0
}
    3aac:	4770      	bx	lr

00003aae <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3aae:	0002      	movs	r2, r0
    3ab0:	0001      	movs	r1, r0
    3ab2:	310b      	adds	r1, #11
	BYTE sum = 0;
    3ab4:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3ab6:	0843      	lsrs	r3, r0, #1
    3ab8:	01c0      	lsls	r0, r0, #7
    3aba:	4303      	orrs	r3, r0
    3abc:	7810      	ldrb	r0, [r2, #0]
    3abe:	1818      	adds	r0, r3, r0
    3ac0:	b2c0      	uxtb	r0, r0
    3ac2:	3201      	adds	r2, #1
    3ac4:	428a      	cmp	r2, r1
    3ac6:	d1f6      	bne.n	3ab6 <sum_sfn+0x8>
	return sum;
}
    3ac8:	4770      	bx	lr
	...

00003acc <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3acc:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3ace:	2800      	cmp	r0, #0
    3ad0:	d010      	beq.n	3af4 <validate+0x28>
    3ad2:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3ad4:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3ad6:	2a00      	cmp	r2, #0
    3ad8:	d101      	bne.n	3ade <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3ada:	0018      	movs	r0, r3
    3adc:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3ade:	88c2      	ldrh	r2, [r0, #6]
    3ae0:	428a      	cmp	r2, r1
    3ae2:	d1fa      	bne.n	3ada <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3ae4:	7840      	ldrb	r0, [r0, #1]
    3ae6:	4b04      	ldr	r3, [pc, #16]	; (3af8 <validate+0x2c>)
    3ae8:	4798      	blx	r3
		return FR_NOT_READY;
    3aea:	2303      	movs	r3, #3
	return FR_OK;
    3aec:	07c0      	lsls	r0, r0, #31
    3aee:	17c0      	asrs	r0, r0, #31
    3af0:	4003      	ands	r3, r0
    3af2:	e7f2      	b.n	3ada <validate+0xe>
		return FR_INVALID_OBJECT;
    3af4:	2309      	movs	r3, #9
    3af6:	e7f0      	b.n	3ada <validate+0xe>
    3af8:	00003891 	.word	0x00003891

00003afc <check_fs>:
{
    3afc:	b570      	push	{r4, r5, r6, lr}
    3afe:	0004      	movs	r4, r0
    3b00:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3b02:	0001      	movs	r1, r0
    3b04:	3130      	adds	r1, #48	; 0x30
    3b06:	7840      	ldrb	r0, [r0, #1]
    3b08:	2301      	movs	r3, #1
    3b0a:	4d1f      	ldr	r5, [pc, #124]	; (3b88 <check_fs+0x8c>)
    3b0c:	47a8      	blx	r5
		return 3;
    3b0e:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3b10:	2800      	cmp	r0, #0
    3b12:	d001      	beq.n	3b18 <check_fs+0x1c>
}
    3b14:	0018      	movs	r0, r3
    3b16:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3b18:	4b1c      	ldr	r3, [pc, #112]	; (3b8c <check_fs+0x90>)
    3b1a:	5ce3      	ldrb	r3, [r4, r3]
    3b1c:	021b      	lsls	r3, r3, #8
    3b1e:	4a1c      	ldr	r2, [pc, #112]	; (3b90 <check_fs+0x94>)
    3b20:	5ca2      	ldrb	r2, [r4, r2]
    3b22:	431a      	orrs	r2, r3
    3b24:	491b      	ldr	r1, [pc, #108]	; (3b94 <check_fs+0x98>)
    3b26:	b212      	sxth	r2, r2
		return 2;
    3b28:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3b2a:	428a      	cmp	r2, r1
    3b2c:	d1f2      	bne.n	3b14 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3b2e:	3367      	adds	r3, #103	; 0x67
    3b30:	5ce3      	ldrb	r3, [r4, r3]
    3b32:	061b      	lsls	r3, r3, #24
    3b34:	2268      	movs	r2, #104	; 0x68
    3b36:	5ca2      	ldrb	r2, [r4, r2]
    3b38:	0412      	lsls	r2, r2, #16
    3b3a:	4313      	orrs	r3, r2
    3b3c:	2266      	movs	r2, #102	; 0x66
    3b3e:	5ca2      	ldrb	r2, [r4, r2]
    3b40:	4313      	orrs	r3, r2
    3b42:	2267      	movs	r2, #103	; 0x67
    3b44:	5ca2      	ldrb	r2, [r4, r2]
    3b46:	0212      	lsls	r2, r2, #8
    3b48:	4313      	orrs	r3, r2
    3b4a:	021b      	lsls	r3, r3, #8
    3b4c:	0a1b      	lsrs	r3, r3, #8
    3b4e:	4a12      	ldr	r2, [pc, #72]	; (3b98 <check_fs+0x9c>)
    3b50:	4293      	cmp	r3, r2
    3b52:	d016      	beq.n	3b82 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3b54:	2385      	movs	r3, #133	; 0x85
    3b56:	5ce3      	ldrb	r3, [r4, r3]
    3b58:	061b      	lsls	r3, r3, #24
    3b5a:	2284      	movs	r2, #132	; 0x84
    3b5c:	5ca2      	ldrb	r2, [r4, r2]
    3b5e:	0412      	lsls	r2, r2, #16
    3b60:	4313      	orrs	r3, r2
    3b62:	2282      	movs	r2, #130	; 0x82
    3b64:	5ca2      	ldrb	r2, [r4, r2]
    3b66:	4313      	orrs	r3, r2
    3b68:	2283      	movs	r2, #131	; 0x83
    3b6a:	5ca2      	ldrb	r2, [r4, r2]
    3b6c:	0212      	lsls	r2, r2, #8
    3b6e:	4313      	orrs	r3, r2
    3b70:	021b      	lsls	r3, r3, #8
    3b72:	0a1b      	lsrs	r3, r3, #8
    3b74:	4a09      	ldr	r2, [pc, #36]	; (3b9c <check_fs+0xa0>)
    3b76:	4694      	mov	ip, r2
    3b78:	4463      	add	r3, ip
    3b7a:	1e58      	subs	r0, r3, #1
    3b7c:	4183      	sbcs	r3, r0
		return 3;
    3b7e:	b2db      	uxtb	r3, r3
    3b80:	e7c8      	b.n	3b14 <check_fs+0x18>
		return 0;
    3b82:	2300      	movs	r3, #0
    3b84:	e7c6      	b.n	3b14 <check_fs+0x18>
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	000038ad 	.word	0x000038ad
    3b8c:	0000022f 	.word	0x0000022f
    3b90:	0000022e 	.word	0x0000022e
    3b94:	ffffaa55 	.word	0xffffaa55
    3b98:	00544146 	.word	0x00544146
    3b9c:	ffabbeba 	.word	0xffabbeba

00003ba0 <chk_mounted>:
{
    3ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba2:	46d6      	mov	lr, sl
    3ba4:	464f      	mov	r7, r9
    3ba6:	4646      	mov	r6, r8
    3ba8:	b5c0      	push	{r6, r7, lr}
    3baa:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3bac:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3bae:	781c      	ldrb	r4, [r3, #0]
    3bb0:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3bb2:	2c09      	cmp	r4, #9
    3bb4:	d80e      	bhi.n	3bd4 <chk_mounted+0x34>
    3bb6:	785a      	ldrb	r2, [r3, #1]
    3bb8:	2a3a      	cmp	r2, #58	; 0x3a
    3bba:	d001      	beq.n	3bc0 <chk_mounted+0x20>
    3bbc:	2400      	movs	r4, #0
    3bbe:	e00a      	b.n	3bd6 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3bc0:	3302      	adds	r3, #2
    3bc2:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3bc4:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3bc6:	2c07      	cmp	r4, #7
    3bc8:	d905      	bls.n	3bd6 <chk_mounted+0x36>
}
    3bca:	bc1c      	pop	{r2, r3, r4}
    3bcc:	4690      	mov	r8, r2
    3bce:	4699      	mov	r9, r3
    3bd0:	46a2      	mov	sl, r4
    3bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd4:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3bd6:	00a3      	lsls	r3, r4, #2
    3bd8:	4ac5      	ldr	r2, [pc, #788]	; (3ef0 <chk_mounted+0x350>)
    3bda:	589e      	ldr	r6, [r3, r2]
    3bdc:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3bde:	2e00      	cmp	r6, #0
    3be0:	d100      	bne.n	3be4 <chk_mounted+0x44>
    3be2:	e0e8      	b.n	3db6 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3be4:	7833      	ldrb	r3, [r6, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d00d      	beq.n	3c06 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3bea:	7870      	ldrb	r0, [r6, #1]
    3bec:	4bc1      	ldr	r3, [pc, #772]	; (3ef4 <chk_mounted+0x354>)
    3bee:	4798      	blx	r3
    3bf0:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3bf2:	07c2      	lsls	r2, r0, #31
    3bf4:	d407      	bmi.n	3c06 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3bf6:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3bf8:	2d00      	cmp	r5, #0
    3bfa:	d0e6      	beq.n	3bca <chk_mounted+0x2a>
    3bfc:	075b      	lsls	r3, r3, #29
    3bfe:	d400      	bmi.n	3c02 <chk_mounted+0x62>
    3c00:	e0db      	b.n	3dba <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3c02:	300a      	adds	r0, #10
    3c04:	e7e1      	b.n	3bca <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3c06:	2300      	movs	r3, #0
    3c08:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3c0a:	b2e0      	uxtb	r0, r4
    3c0c:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3c0e:	4bba      	ldr	r3, [pc, #744]	; (3ef8 <chk_mounted+0x358>)
    3c10:	4798      	blx	r3
    3c12:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3c14:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3c16:	07da      	lsls	r2, r3, #31
    3c18:	d4d7      	bmi.n	3bca <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3c1a:	2d00      	cmp	r5, #0
    3c1c:	d002      	beq.n	3c24 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3c1e:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3c20:	075b      	lsls	r3, r3, #29
    3c22:	d4d2      	bmi.n	3bca <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3c24:	2100      	movs	r1, #0
    3c26:	0030      	movs	r0, r6
    3c28:	4bb4      	ldr	r3, [pc, #720]	; (3efc <chk_mounted+0x35c>)
    3c2a:	4798      	blx	r3
    3c2c:	0003      	movs	r3, r0
    3c2e:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3c30:	2801      	cmp	r0, #1
    3c32:	d100      	bne.n	3c36 <chk_mounted+0x96>
    3c34:	e09a      	b.n	3d6c <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3c36:	2b03      	cmp	r3, #3
    3c38:	d100      	bne.n	3c3c <chk_mounted+0x9c>
    3c3a:	e0c0      	b.n	3dbe <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3c3c:	200d      	movs	r0, #13
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d1c3      	bne.n	3bca <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3c42:	333c      	adds	r3, #60	; 0x3c
    3c44:	5cf2      	ldrb	r2, [r6, r3]
    3c46:	0212      	lsls	r2, r2, #8
    3c48:	3b01      	subs	r3, #1
    3c4a:	5cf3      	ldrb	r3, [r6, r3]
    3c4c:	4313      	orrs	r3, r2
    3c4e:	2280      	movs	r2, #128	; 0x80
    3c50:	0092      	lsls	r2, r2, #2
    3c52:	b21b      	sxth	r3, r3
    3c54:	4293      	cmp	r3, r2
    3c56:	d1b8      	bne.n	3bca <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3c58:	2347      	movs	r3, #71	; 0x47
    3c5a:	5cf3      	ldrb	r3, [r6, r3]
    3c5c:	021b      	lsls	r3, r3, #8
    3c5e:	3abb      	subs	r2, #187	; 0xbb
    3c60:	3aff      	subs	r2, #255	; 0xff
    3c62:	5cb5      	ldrb	r5, [r6, r2]
    3c64:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3c66:	d10d      	bne.n	3c84 <chk_mounted+0xe4>
    3c68:	2357      	movs	r3, #87	; 0x57
    3c6a:	5cf5      	ldrb	r5, [r6, r3]
    3c6c:	062d      	lsls	r5, r5, #24
    3c6e:	3b01      	subs	r3, #1
    3c70:	5cf3      	ldrb	r3, [r6, r3]
    3c72:	041b      	lsls	r3, r3, #16
    3c74:	431d      	orrs	r5, r3
    3c76:	2354      	movs	r3, #84	; 0x54
    3c78:	5cf3      	ldrb	r3, [r6, r3]
    3c7a:	431d      	orrs	r5, r3
    3c7c:	2355      	movs	r3, #85	; 0x55
    3c7e:	5cf3      	ldrb	r3, [r6, r3]
    3c80:	021b      	lsls	r3, r3, #8
    3c82:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3c84:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3c86:	2340      	movs	r3, #64	; 0x40
    3c88:	5cf2      	ldrb	r2, [r6, r3]
    3c8a:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3c8c:	1e53      	subs	r3, r2, #1
    3c8e:	200d      	movs	r0, #13
    3c90:	2b01      	cmp	r3, #1
    3c92:	d89a      	bhi.n	3bca <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3c94:	233d      	movs	r3, #61	; 0x3d
    3c96:	5cf1      	ldrb	r1, [r6, r3]
    3c98:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3c9a:	2900      	cmp	r1, #0
    3c9c:	d095      	beq.n	3bca <chk_mounted+0x2a>
    3c9e:	1e4b      	subs	r3, r1, #1
    3ca0:	4219      	tst	r1, r3
    3ca2:	d192      	bne.n	3bca <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3ca4:	2342      	movs	r3, #66	; 0x42
    3ca6:	5cf3      	ldrb	r3, [r6, r3]
    3ca8:	021b      	lsls	r3, r3, #8
    3caa:	3034      	adds	r0, #52	; 0x34
    3cac:	5c30      	ldrb	r0, [r6, r0]
    3cae:	4318      	orrs	r0, r3
    3cb0:	4680      	mov	r8, r0
    3cb2:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3cb4:	200d      	movs	r0, #13
    3cb6:	4643      	mov	r3, r8
    3cb8:	071b      	lsls	r3, r3, #28
    3cba:	d000      	beq.n	3cbe <chk_mounted+0x11e>
    3cbc:	e785      	b.n	3bca <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3cbe:	2344      	movs	r3, #68	; 0x44
    3cc0:	5cf3      	ldrb	r3, [r6, r3]
    3cc2:	021b      	lsls	r3, r3, #8
    3cc4:	3036      	adds	r0, #54	; 0x36
    3cc6:	5c30      	ldrb	r0, [r6, r0]
    3cc8:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3cca:	d10d      	bne.n	3ce8 <chk_mounted+0x148>
    3ccc:	3353      	adds	r3, #83	; 0x53
    3cce:	5cf3      	ldrb	r3, [r6, r3]
    3cd0:	061b      	lsls	r3, r3, #24
    3cd2:	2052      	movs	r0, #82	; 0x52
    3cd4:	5c30      	ldrb	r0, [r6, r0]
    3cd6:	0400      	lsls	r0, r0, #16
    3cd8:	4303      	orrs	r3, r0
    3cda:	2050      	movs	r0, #80	; 0x50
    3cdc:	5c30      	ldrb	r0, [r6, r0]
    3cde:	4303      	orrs	r3, r0
    3ce0:	2051      	movs	r0, #81	; 0x51
    3ce2:	5c30      	ldrb	r0, [r6, r0]
    3ce4:	0200      	lsls	r0, r0, #8
    3ce6:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3ce8:	203f      	movs	r0, #63	; 0x3f
    3cea:	5c30      	ldrb	r0, [r6, r0]
    3cec:	0200      	lsls	r0, r0, #8
    3cee:	273e      	movs	r7, #62	; 0x3e
    3cf0:	5df7      	ldrb	r7, [r6, r7]
    3cf2:	4307      	orrs	r7, r0
    3cf4:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3cf6:	200d      	movs	r0, #13
    3cf8:	2f00      	cmp	r7, #0
    3cfa:	d100      	bne.n	3cfe <chk_mounted+0x15e>
    3cfc:	e765      	b.n	3bca <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3cfe:	436a      	muls	r2, r5
    3d00:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3d02:	4642      	mov	r2, r8
    3d04:	0917      	lsrs	r7, r2, #4
    3d06:	4457      	add	r7, sl
    3d08:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3d0a:	42bb      	cmp	r3, r7
    3d0c:	d200      	bcs.n	3d10 <chk_mounted+0x170>
    3d0e:	e75c      	b.n	3bca <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3d10:	1bd8      	subs	r0, r3, r7
    3d12:	4b7b      	ldr	r3, [pc, #492]	; (3f00 <chk_mounted+0x360>)
    3d14:	4798      	blx	r3
    3d16:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3d18:	200d      	movs	r0, #13
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d100      	bne.n	3d20 <chk_mounted+0x180>
    3d1e:	e754      	b.n	3bca <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3d20:	4a78      	ldr	r2, [pc, #480]	; (3f04 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3d22:	429a      	cmp	r2, r3
    3d24:	4192      	sbcs	r2, r2
    3d26:	4252      	negs	r2, r2
    3d28:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3d2a:	4977      	ldr	r1, [pc, #476]	; (3f08 <chk_mounted+0x368>)
    3d2c:	428b      	cmp	r3, r1
    3d2e:	d848      	bhi.n	3dc2 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3d30:	3302      	adds	r3, #2
    3d32:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3d34:	19e7      	adds	r7, r4, r7
    3d36:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3d38:	4454      	add	r4, sl
    3d3a:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3d3c:	200d      	movs	r0, #13
    3d3e:	4641      	mov	r1, r8
    3d40:	2900      	cmp	r1, #0
    3d42:	d100      	bne.n	3d46 <chk_mounted+0x1a6>
    3d44:	e741      	b.n	3bca <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3d46:	444c      	add	r4, r9
    3d48:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3d4a:	2a02      	cmp	r2, #2
    3d4c:	d12c      	bne.n	3da8 <chk_mounted+0x208>
    3d4e:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d50:	496e      	ldr	r1, [pc, #440]	; (3f0c <chk_mounted+0x36c>)
    3d52:	468c      	mov	ip, r1
    3d54:	4463      	add	r3, ip
    3d56:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3d58:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d5a:	429d      	cmp	r5, r3
    3d5c:	d200      	bcs.n	3d60 <chk_mounted+0x1c0>
    3d5e:	e734      	b.n	3bca <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3d60:	2301      	movs	r3, #1
    3d62:	425b      	negs	r3, r3
    3d64:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3d66:	2300      	movs	r3, #0
    3d68:	60f3      	str	r3, [r6, #12]
    3d6a:	e0b6      	b.n	3eda <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3d6c:	33f2      	adds	r3, #242	; 0xf2
    3d6e:	33ff      	adds	r3, #255	; 0xff
    3d70:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3d72:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3d74:	2b00      	cmp	r3, #0
    3d76:	d100      	bne.n	3d7a <chk_mounted+0x1da>
    3d78:	e727      	b.n	3bca <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3d7a:	23fa      	movs	r3, #250	; 0xfa
    3d7c:	33ff      	adds	r3, #255	; 0xff
    3d7e:	5cf4      	ldrb	r4, [r6, r3]
    3d80:	0624      	lsls	r4, r4, #24
    3d82:	3b01      	subs	r3, #1
    3d84:	5cf3      	ldrb	r3, [r6, r3]
    3d86:	041b      	lsls	r3, r3, #16
    3d88:	431c      	orrs	r4, r3
    3d8a:	23fb      	movs	r3, #251	; 0xfb
    3d8c:	005b      	lsls	r3, r3, #1
    3d8e:	5cf3      	ldrb	r3, [r6, r3]
    3d90:	431c      	orrs	r4, r3
    3d92:	23f8      	movs	r3, #248	; 0xf8
    3d94:	33ff      	adds	r3, #255	; 0xff
    3d96:	5cf2      	ldrb	r2, [r6, r3]
    3d98:	0212      	lsls	r2, r2, #8
    3d9a:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3d9c:	0021      	movs	r1, r4
    3d9e:	0030      	movs	r0, r6
    3da0:	4b56      	ldr	r3, [pc, #344]	; (3efc <chk_mounted+0x35c>)
    3da2:	4798      	blx	r3
    3da4:	0003      	movs	r3, r0
    3da6:	e746      	b.n	3c36 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3da8:	2103      	movs	r1, #3
    3daa:	4359      	muls	r1, r3
    3dac:	0849      	lsrs	r1, r1, #1
    3dae:	2001      	movs	r0, #1
    3db0:	4003      	ands	r3, r0
    3db2:	18cb      	adds	r3, r1, r3
    3db4:	e7cc      	b.n	3d50 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3db6:	200c      	movs	r0, #12
    3db8:	e707      	b.n	3bca <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3dba:	2000      	movs	r0, #0
    3dbc:	e705      	b.n	3bca <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3dbe:	2001      	movs	r0, #1
    3dc0:	e703      	b.n	3bca <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3dc2:	3302      	adds	r3, #2
    3dc4:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3dc6:	19e7      	adds	r7, r4, r7
    3dc8:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3dca:	4652      	mov	r2, sl
    3dcc:	18a2      	adds	r2, r4, r2
    3dce:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3dd0:	200d      	movs	r0, #13
    3dd2:	4642      	mov	r2, r8
    3dd4:	2a00      	cmp	r2, #0
    3dd6:	d000      	beq.n	3dda <chk_mounted+0x23a>
    3dd8:	e6f7      	b.n	3bca <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3dda:	225f      	movs	r2, #95	; 0x5f
    3ddc:	5cb2      	ldrb	r2, [r6, r2]
    3dde:	0612      	lsls	r2, r2, #24
    3de0:	215e      	movs	r1, #94	; 0x5e
    3de2:	5c71      	ldrb	r1, [r6, r1]
    3de4:	0409      	lsls	r1, r1, #16
    3de6:	430a      	orrs	r2, r1
    3de8:	215c      	movs	r1, #92	; 0x5c
    3dea:	5c71      	ldrb	r1, [r6, r1]
    3dec:	430a      	orrs	r2, r1
    3dee:	215d      	movs	r1, #93	; 0x5d
    3df0:	5c71      	ldrb	r1, [r6, r1]
    3df2:	0209      	lsls	r1, r1, #8
    3df4:	430a      	orrs	r2, r1
    3df6:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3df8:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3dfa:	4a44      	ldr	r2, [pc, #272]	; (3f0c <chk_mounted+0x36c>)
    3dfc:	4694      	mov	ip, r2
    3dfe:	4463      	add	r3, ip
    3e00:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3e02:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3e04:	429d      	cmp	r5, r3
    3e06:	d200      	bcs.n	3e0a <chk_mounted+0x26a>
    3e08:	e6df      	b.n	3bca <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3e0a:	2301      	movs	r3, #1
    3e0c:	425b      	negs	r3, r3
    3e0e:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3e10:	2300      	movs	r3, #0
    3e12:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3e14:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3e16:	3361      	adds	r3, #97	; 0x61
    3e18:	5cf3      	ldrb	r3, [r6, r3]
    3e1a:	021b      	lsls	r3, r3, #8
    3e1c:	2260      	movs	r2, #96	; 0x60
    3e1e:	5cb2      	ldrb	r2, [r6, r2]
    3e20:	431a      	orrs	r2, r3
    3e22:	1912      	adds	r2, r2, r4
    3e24:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3e26:	0031      	movs	r1, r6
    3e28:	3130      	adds	r1, #48	; 0x30
    3e2a:	7870      	ldrb	r0, [r6, #1]
    3e2c:	2301      	movs	r3, #1
    3e2e:	4c38      	ldr	r4, [pc, #224]	; (3f10 <chk_mounted+0x370>)
    3e30:	47a0      	blx	r4
    3e32:	2203      	movs	r2, #3
    3e34:	2800      	cmp	r0, #0
    3e36:	d150      	bne.n	3eda <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3e38:	4b36      	ldr	r3, [pc, #216]	; (3f14 <chk_mounted+0x374>)
    3e3a:	5cf2      	ldrb	r2, [r6, r3]
    3e3c:	0212      	lsls	r2, r2, #8
    3e3e:	4b36      	ldr	r3, [pc, #216]	; (3f18 <chk_mounted+0x378>)
    3e40:	5cf3      	ldrb	r3, [r6, r3]
    3e42:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3e44:	4935      	ldr	r1, [pc, #212]	; (3f1c <chk_mounted+0x37c>)
    3e46:	b21b      	sxth	r3, r3
    3e48:	2203      	movs	r2, #3
    3e4a:	428b      	cmp	r3, r1
    3e4c:	d145      	bne.n	3eda <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3e4e:	2333      	movs	r3, #51	; 0x33
    3e50:	5cf3      	ldrb	r3, [r6, r3]
    3e52:	061b      	lsls	r3, r3, #24
    3e54:	322f      	adds	r2, #47	; 0x2f
    3e56:	5cb2      	ldrb	r2, [r6, r2]
    3e58:	0412      	lsls	r2, r2, #16
    3e5a:	4313      	orrs	r3, r2
    3e5c:	2230      	movs	r2, #48	; 0x30
    3e5e:	5cb2      	ldrb	r2, [r6, r2]
    3e60:	4313      	orrs	r3, r2
    3e62:	2231      	movs	r2, #49	; 0x31
    3e64:	5cb2      	ldrb	r2, [r6, r2]
    3e66:	0212      	lsls	r2, r2, #8
    3e68:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3e6a:	492d      	ldr	r1, [pc, #180]	; (3f20 <chk_mounted+0x380>)
    3e6c:	2203      	movs	r2, #3
    3e6e:	428b      	cmp	r3, r1
    3e70:	d133      	bne.n	3eda <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3e72:	4b2c      	ldr	r3, [pc, #176]	; (3f24 <chk_mounted+0x384>)
    3e74:	5cf3      	ldrb	r3, [r6, r3]
    3e76:	061b      	lsls	r3, r3, #24
    3e78:	4a2b      	ldr	r2, [pc, #172]	; (3f28 <chk_mounted+0x388>)
    3e7a:	5cb2      	ldrb	r2, [r6, r2]
    3e7c:	0412      	lsls	r2, r2, #16
    3e7e:	4313      	orrs	r3, r2
    3e80:	2285      	movs	r2, #133	; 0x85
    3e82:	0092      	lsls	r2, r2, #2
    3e84:	5cb2      	ldrb	r2, [r6, r2]
    3e86:	4313      	orrs	r3, r2
    3e88:	4a28      	ldr	r2, [pc, #160]	; (3f2c <chk_mounted+0x38c>)
    3e8a:	5cb2      	ldrb	r2, [r6, r2]
    3e8c:	0212      	lsls	r2, r2, #8
    3e8e:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3e90:	4927      	ldr	r1, [pc, #156]	; (3f30 <chk_mounted+0x390>)
    3e92:	2203      	movs	r2, #3
    3e94:	428b      	cmp	r3, r1
    3e96:	d120      	bne.n	3eda <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3e98:	4b26      	ldr	r3, [pc, #152]	; (3f34 <chk_mounted+0x394>)
    3e9a:	5cf3      	ldrb	r3, [r6, r3]
    3e9c:	061b      	lsls	r3, r3, #24
    3e9e:	4a26      	ldr	r2, [pc, #152]	; (3f38 <chk_mounted+0x398>)
    3ea0:	5cb2      	ldrb	r2, [r6, r2]
    3ea2:	0412      	lsls	r2, r2, #16
    3ea4:	4313      	orrs	r3, r2
    3ea6:	2287      	movs	r2, #135	; 0x87
    3ea8:	0092      	lsls	r2, r2, #2
    3eaa:	5cb2      	ldrb	r2, [r6, r2]
    3eac:	4313      	orrs	r3, r2
    3eae:	4a23      	ldr	r2, [pc, #140]	; (3f3c <chk_mounted+0x39c>)
    3eb0:	5cb2      	ldrb	r2, [r6, r2]
    3eb2:	0212      	lsls	r2, r2, #8
    3eb4:	4313      	orrs	r3, r2
    3eb6:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3eb8:	4b21      	ldr	r3, [pc, #132]	; (3f40 <chk_mounted+0x3a0>)
    3eba:	5cf3      	ldrb	r3, [r6, r3]
    3ebc:	061b      	lsls	r3, r3, #24
    3ebe:	4a21      	ldr	r2, [pc, #132]	; (3f44 <chk_mounted+0x3a4>)
    3ec0:	5cb2      	ldrb	r2, [r6, r2]
    3ec2:	0412      	lsls	r2, r2, #16
    3ec4:	4313      	orrs	r3, r2
    3ec6:	2286      	movs	r2, #134	; 0x86
    3ec8:	0092      	lsls	r2, r2, #2
    3eca:	5cb2      	ldrb	r2, [r6, r2]
    3ecc:	4313      	orrs	r3, r2
    3ece:	4a1e      	ldr	r2, [pc, #120]	; (3f48 <chk_mounted+0x3a8>)
    3ed0:	5cb2      	ldrb	r2, [r6, r2]
    3ed2:	0212      	lsls	r2, r2, #8
    3ed4:	4313      	orrs	r3, r2
    3ed6:	6133      	str	r3, [r6, #16]
    3ed8:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3eda:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3edc:	4a1b      	ldr	r2, [pc, #108]	; (3f4c <chk_mounted+0x3ac>)
    3ede:	8813      	ldrh	r3, [r2, #0]
    3ee0:	3301      	adds	r3, #1
    3ee2:	b29b      	uxth	r3, r3
    3ee4:	8013      	strh	r3, [r2, #0]
    3ee6:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3ee8:	2000      	movs	r0, #0
    3eea:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3eec:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3eee:	e66c      	b.n	3bca <chk_mounted+0x2a>
    3ef0:	20000158 	.word	0x20000158
    3ef4:	00003891 	.word	0x00003891
    3ef8:	000037f5 	.word	0x000037f5
    3efc:	00003afd 	.word	0x00003afd
    3f00:	000059c1 	.word	0x000059c1
    3f04:	00000ff5 	.word	0x00000ff5
    3f08:	0000fff5 	.word	0x0000fff5
    3f0c:	000001ff 	.word	0x000001ff
    3f10:	000038ad 	.word	0x000038ad
    3f14:	0000022f 	.word	0x0000022f
    3f18:	0000022e 	.word	0x0000022e
    3f1c:	ffffaa55 	.word	0xffffaa55
    3f20:	41615252 	.word	0x41615252
    3f24:	00000217 	.word	0x00000217
    3f28:	00000216 	.word	0x00000216
    3f2c:	00000215 	.word	0x00000215
    3f30:	61417272 	.word	0x61417272
    3f34:	0000021f 	.word	0x0000021f
    3f38:	0000021e 	.word	0x0000021e
    3f3c:	0000021d 	.word	0x0000021d
    3f40:	0000021b 	.word	0x0000021b
    3f44:	0000021a 	.word	0x0000021a
    3f48:	00000219 	.word	0x00000219
    3f4c:	20000178 	.word	0x20000178

00003f50 <move_window>:
{
    3f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f52:	46ce      	mov	lr, r9
    3f54:	b500      	push	{lr}
    3f56:	b082      	sub	sp, #8
    3f58:	0004      	movs	r4, r0
    3f5a:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3f5c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3f5e:	428d      	cmp	r5, r1
    3f60:	d03f      	beq.n	3fe2 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3f62:	7903      	ldrb	r3, [r0, #4]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d107      	bne.n	3f78 <move_window+0x28>
	return FR_OK;
    3f68:	2300      	movs	r3, #0
		if (sector) {
    3f6a:	2f00      	cmp	r7, #0
    3f6c:	d12c      	bne.n	3fc8 <move_window+0x78>
}
    3f6e:	0018      	movs	r0, r3
    3f70:	b002      	add	sp, #8
    3f72:	bc04      	pop	{r2}
    3f74:	4691      	mov	r9, r2
    3f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f78:	2330      	movs	r3, #48	; 0x30
    3f7a:	469c      	mov	ip, r3
    3f7c:	4484      	add	ip, r0
    3f7e:	4663      	mov	r3, ip
    3f80:	4661      	mov	r1, ip
    3f82:	9301      	str	r3, [sp, #4]
    3f84:	7840      	ldrb	r0, [r0, #1]
    3f86:	2301      	movs	r3, #1
    3f88:	002a      	movs	r2, r5
    3f8a:	4e17      	ldr	r6, [pc, #92]	; (3fe8 <move_window+0x98>)
    3f8c:	47b0      	blx	r6
				return FR_DISK_ERR;
    3f8e:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f90:	2800      	cmp	r0, #0
    3f92:	d1ec      	bne.n	3f6e <move_window+0x1e>
			fs->wflag = 0;
    3f94:	2300      	movs	r3, #0
    3f96:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f98:	6a23      	ldr	r3, [r4, #32]
    3f9a:	69e2      	ldr	r2, [r4, #28]
    3f9c:	4694      	mov	ip, r2
    3f9e:	4463      	add	r3, ip
    3fa0:	429d      	cmp	r5, r3
    3fa2:	d2e1      	bcs.n	3f68 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fa4:	78e6      	ldrb	r6, [r4, #3]
    3fa6:	2e01      	cmp	r6, #1
    3fa8:	d9de      	bls.n	3f68 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3faa:	4b0f      	ldr	r3, [pc, #60]	; (3fe8 <move_window+0x98>)
    3fac:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3fae:	69e3      	ldr	r3, [r4, #28]
    3fb0:	469c      	mov	ip, r3
    3fb2:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3fb4:	7860      	ldrb	r0, [r4, #1]
    3fb6:	2301      	movs	r3, #1
    3fb8:	002a      	movs	r2, r5
    3fba:	9901      	ldr	r1, [sp, #4]
    3fbc:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3fbe:	3e01      	subs	r6, #1
    3fc0:	b2f6      	uxtb	r6, r6
    3fc2:	2e01      	cmp	r6, #1
    3fc4:	d1f3      	bne.n	3fae <move_window+0x5e>
    3fc6:	e7cf      	b.n	3f68 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3fc8:	0021      	movs	r1, r4
    3fca:	3130      	adds	r1, #48	; 0x30
    3fcc:	7860      	ldrb	r0, [r4, #1]
    3fce:	3301      	adds	r3, #1
    3fd0:	003a      	movs	r2, r7
    3fd2:	4d06      	ldr	r5, [pc, #24]	; (3fec <move_window+0x9c>)
    3fd4:	47a8      	blx	r5
				return FR_DISK_ERR;
    3fd6:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3fd8:	2800      	cmp	r0, #0
    3fda:	d1c8      	bne.n	3f6e <move_window+0x1e>
			fs->winsect = sector;
    3fdc:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3fde:	2300      	movs	r3, #0
    3fe0:	e7c5      	b.n	3f6e <move_window+0x1e>
    3fe2:	2300      	movs	r3, #0
    3fe4:	e7c3      	b.n	3f6e <move_window+0x1e>
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	00003931 	.word	0x00003931
    3fec:	000038ad 	.word	0x000038ad

00003ff0 <get_fat>:
{
    3ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ff2:	0005      	movs	r5, r0
    3ff4:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3ff6:	2901      	cmp	r1, #1
    3ff8:	d974      	bls.n	40e4 <get_fat+0xf4>
		return 1;
    3ffa:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3ffc:	69ab      	ldr	r3, [r5, #24]
    3ffe:	4299      	cmp	r1, r3
    4000:	d271      	bcs.n	40e6 <get_fat+0xf6>
	switch (fs->fs_type) {
    4002:	782b      	ldrb	r3, [r5, #0]
    4004:	2b02      	cmp	r3, #2
    4006:	d034      	beq.n	4072 <get_fat+0x82>
    4008:	2b03      	cmp	r3, #3
    400a:	d049      	beq.n	40a0 <get_fat+0xb0>
    400c:	2b01      	cmp	r3, #1
    400e:	d002      	beq.n	4016 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4010:	2001      	movs	r0, #1
    4012:	4240      	negs	r0, r0
    4014:	e067      	b.n	40e6 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    4016:	084e      	lsrs	r6, r1, #1
    4018:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    401a:	0a71      	lsrs	r1, r6, #9
    401c:	6a2b      	ldr	r3, [r5, #32]
    401e:	469c      	mov	ip, r3
    4020:	4461      	add	r1, ip
    4022:	0028      	movs	r0, r5
    4024:	4b30      	ldr	r3, [pc, #192]	; (40e8 <get_fat+0xf8>)
    4026:	4798      	blx	r3
    4028:	2800      	cmp	r0, #0
    402a:	d002      	beq.n	4032 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    402c:	2001      	movs	r0, #1
    402e:	4240      	negs	r0, r0
    4030:	e059      	b.n	40e6 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    4032:	05f3      	lsls	r3, r6, #23
    4034:	0ddb      	lsrs	r3, r3, #23
    4036:	18eb      	adds	r3, r5, r3
    4038:	3330      	adds	r3, #48	; 0x30
    403a:	781f      	ldrb	r7, [r3, #0]
    403c:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    403e:	0a71      	lsrs	r1, r6, #9
    4040:	6a2b      	ldr	r3, [r5, #32]
    4042:	469c      	mov	ip, r3
    4044:	4461      	add	r1, ip
    4046:	0028      	movs	r0, r5
    4048:	4b27      	ldr	r3, [pc, #156]	; (40e8 <get_fat+0xf8>)
    404a:	4798      	blx	r3
    404c:	2800      	cmp	r0, #0
    404e:	d002      	beq.n	4056 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4050:	2001      	movs	r0, #1
    4052:	4240      	negs	r0, r0
    4054:	e047      	b.n	40e6 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4056:	05f6      	lsls	r6, r6, #23
    4058:	0df6      	lsrs	r6, r6, #23
    405a:	19ad      	adds	r5, r5, r6
    405c:	3530      	adds	r5, #48	; 0x30
    405e:	7828      	ldrb	r0, [r5, #0]
    4060:	0200      	lsls	r0, r0, #8
    4062:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4064:	07e3      	lsls	r3, r4, #31
    4066:	d501      	bpl.n	406c <get_fat+0x7c>
    4068:	0900      	lsrs	r0, r0, #4
    406a:	e03c      	b.n	40e6 <get_fat+0xf6>
    406c:	0500      	lsls	r0, r0, #20
    406e:	0d00      	lsrs	r0, r0, #20
    4070:	e039      	b.n	40e6 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4072:	0a09      	lsrs	r1, r1, #8
    4074:	6a2b      	ldr	r3, [r5, #32]
    4076:	469c      	mov	ip, r3
    4078:	4461      	add	r1, ip
    407a:	0028      	movs	r0, r5
    407c:	4b1a      	ldr	r3, [pc, #104]	; (40e8 <get_fat+0xf8>)
    407e:	4798      	blx	r3
    4080:	2800      	cmp	r0, #0
    4082:	d002      	beq.n	408a <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4084:	2001      	movs	r0, #1
    4086:	4240      	negs	r0, r0
    4088:	e02d      	b.n	40e6 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    408a:	0064      	lsls	r4, r4, #1
    408c:	23ff      	movs	r3, #255	; 0xff
    408e:	005b      	lsls	r3, r3, #1
    4090:	401c      	ands	r4, r3
		return LD_WORD(p);
    4092:	192d      	adds	r5, r5, r4
    4094:	3530      	adds	r5, #48	; 0x30
    4096:	786b      	ldrb	r3, [r5, #1]
    4098:	021b      	lsls	r3, r3, #8
    409a:	7828      	ldrb	r0, [r5, #0]
    409c:	4318      	orrs	r0, r3
    409e:	e022      	b.n	40e6 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    40a0:	09c9      	lsrs	r1, r1, #7
    40a2:	6a2b      	ldr	r3, [r5, #32]
    40a4:	469c      	mov	ip, r3
    40a6:	4461      	add	r1, ip
    40a8:	0028      	movs	r0, r5
    40aa:	4b0f      	ldr	r3, [pc, #60]	; (40e8 <get_fat+0xf8>)
    40ac:	4798      	blx	r3
    40ae:	2800      	cmp	r0, #0
    40b0:	d002      	beq.n	40b8 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    40b2:	2001      	movs	r0, #1
    40b4:	4240      	negs	r0, r0
    40b6:	e016      	b.n	40e6 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    40b8:	00a4      	lsls	r4, r4, #2
    40ba:	23fe      	movs	r3, #254	; 0xfe
    40bc:	005b      	lsls	r3, r3, #1
    40be:	401c      	ands	r4, r3
    40c0:	0023      	movs	r3, r4
    40c2:	3330      	adds	r3, #48	; 0x30
    40c4:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    40c6:	78d8      	ldrb	r0, [r3, #3]
    40c8:	0600      	lsls	r0, r0, #24
    40ca:	789a      	ldrb	r2, [r3, #2]
    40cc:	0412      	lsls	r2, r2, #16
    40ce:	4310      	orrs	r0, r2
    40d0:	192c      	adds	r4, r5, r4
    40d2:	3430      	adds	r4, #48	; 0x30
    40d4:	7822      	ldrb	r2, [r4, #0]
    40d6:	4310      	orrs	r0, r2
    40d8:	785b      	ldrb	r3, [r3, #1]
    40da:	021b      	lsls	r3, r3, #8
    40dc:	4318      	orrs	r0, r3
    40de:	0100      	lsls	r0, r0, #4
    40e0:	0900      	lsrs	r0, r0, #4
    40e2:	e000      	b.n	40e6 <get_fat+0xf6>
		return 1;
    40e4:	2001      	movs	r0, #1
}
    40e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40e8:	00003f51 	.word	0x00003f51

000040ec <dir_sdi>:
{
    40ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ee:	0004      	movs	r4, r0
    40f0:	000d      	movs	r5, r1
	dj->index = idx;
    40f2:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    40f4:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    40f6:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    40f8:	2901      	cmp	r1, #1
    40fa:	d003      	beq.n	4104 <dir_sdi+0x18>
    40fc:	6823      	ldr	r3, [r4, #0]
    40fe:	699a      	ldr	r2, [r3, #24]
    4100:	4291      	cmp	r1, r2
    4102:	d300      	bcc.n	4106 <dir_sdi+0x1a>
}
    4104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4106:	2900      	cmp	r1, #0
    4108:	d119      	bne.n	413e <dir_sdi+0x52>
    410a:	781a      	ldrb	r2, [r3, #0]
    410c:	2a03      	cmp	r2, #3
    410e:	d013      	beq.n	4138 <dir_sdi+0x4c>
		dj->clust = clst;
    4110:	2200      	movs	r2, #0
    4112:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4114:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    4116:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4118:	42aa      	cmp	r2, r5
    411a:	d9f3      	bls.n	4104 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    411c:	092a      	lsrs	r2, r5, #4
    411e:	b292      	uxth	r2, r2
    4120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4122:	189b      	adds	r3, r3, r2
    4124:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4126:	6823      	ldr	r3, [r4, #0]
    4128:	3330      	adds	r3, #48	; 0x30
    412a:	220f      	movs	r2, #15
    412c:	4015      	ands	r5, r2
    412e:	016d      	lsls	r5, r5, #5
    4130:	195d      	adds	r5, r3, r5
    4132:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4134:	2000      	movs	r0, #0
    4136:	e7e5      	b.n	4104 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4138:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    413a:	2900      	cmp	r1, #0
    413c:	d0e8      	beq.n	4110 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    413e:	789e      	ldrb	r6, [r3, #2]
    4140:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4142:	42b5      	cmp	r5, r6
    4144:	d313      	bcc.n	416e <dir_sdi+0x82>
    4146:	1bad      	subs	r5, r5, r6
    4148:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    414a:	4f10      	ldr	r7, [pc, #64]	; (418c <dir_sdi+0xa0>)
    414c:	e000      	b.n	4150 <dir_sdi+0x64>
    414e:	001d      	movs	r5, r3
    4150:	6820      	ldr	r0, [r4, #0]
    4152:	47b8      	blx	r7
    4154:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4156:	1c43      	adds	r3, r0, #1
    4158:	d012      	beq.n	4180 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    415a:	2801      	cmp	r0, #1
    415c:	d912      	bls.n	4184 <dir_sdi+0x98>
    415e:	6823      	ldr	r3, [r4, #0]
    4160:	699b      	ldr	r3, [r3, #24]
    4162:	4298      	cmp	r0, r3
    4164:	d210      	bcs.n	4188 <dir_sdi+0x9c>
    4166:	1bab      	subs	r3, r5, r6
    4168:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    416a:	42b5      	cmp	r5, r6
    416c:	d2ef      	bcs.n	414e <dir_sdi+0x62>
		dj->clust = clst;
    416e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4170:	6820      	ldr	r0, [r4, #0]
    4172:	4b07      	ldr	r3, [pc, #28]	; (4190 <dir_sdi+0xa4>)
    4174:	4798      	blx	r3
    4176:	092b      	lsrs	r3, r5, #4
    4178:	b29b      	uxth	r3, r3
    417a:	1818      	adds	r0, r3, r0
    417c:	6120      	str	r0, [r4, #16]
    417e:	e7d2      	b.n	4126 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4180:	2001      	movs	r0, #1
    4182:	e7bf      	b.n	4104 <dir_sdi+0x18>
				return FR_INT_ERR;
    4184:	2002      	movs	r0, #2
    4186:	e7bd      	b.n	4104 <dir_sdi+0x18>
    4188:	2002      	movs	r0, #2
    418a:	e7bb      	b.n	4104 <dir_sdi+0x18>
    418c:	00003ff1 	.word	0x00003ff1
    4190:	00003a97 	.word	0x00003a97

00004194 <put_fat>:
{
    4194:	b5f0      	push	{r4, r5, r6, r7, lr}
    4196:	46c6      	mov	lr, r8
    4198:	b500      	push	{lr}
    419a:	0007      	movs	r7, r0
    419c:	000c      	movs	r4, r1
    419e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    41a0:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    41a2:	2901      	cmp	r1, #1
    41a4:	d902      	bls.n	41ac <put_fat+0x18>
    41a6:	6983      	ldr	r3, [r0, #24]
    41a8:	4299      	cmp	r1, r3
    41aa:	d303      	bcc.n	41b4 <put_fat+0x20>
}
    41ac:	0028      	movs	r0, r5
    41ae:	bc04      	pop	{r2}
    41b0:	4690      	mov	r8, r2
    41b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    41b4:	7803      	ldrb	r3, [r0, #0]
    41b6:	2b02      	cmp	r3, #2
    41b8:	d053      	beq.n	4262 <put_fat+0xce>
    41ba:	2b03      	cmp	r3, #3
    41bc:	d063      	beq.n	4286 <put_fat+0xf2>
			res = FR_INT_ERR;
    41be:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    41c0:	2b01      	cmp	r3, #1
    41c2:	d002      	beq.n	41ca <put_fat+0x36>
		fs->wflag = 1;
    41c4:	2301      	movs	r3, #1
    41c6:	713b      	strb	r3, [r7, #4]
    41c8:	e7f0      	b.n	41ac <put_fat+0x18>
			bc = clst; bc += bc / 2;
    41ca:	084b      	lsrs	r3, r1, #1
    41cc:	4698      	mov	r8, r3
    41ce:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    41d0:	4643      	mov	r3, r8
    41d2:	0a59      	lsrs	r1, r3, #9
    41d4:	6a03      	ldr	r3, [r0, #32]
    41d6:	469c      	mov	ip, r3
    41d8:	4461      	add	r1, ip
    41da:	4b3b      	ldr	r3, [pc, #236]	; (42c8 <put_fat+0x134>)
    41dc:	4798      	blx	r3
    41de:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    41e0:	d1f0      	bne.n	41c4 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    41e2:	4643      	mov	r3, r8
    41e4:	05db      	lsls	r3, r3, #23
    41e6:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    41e8:	07e2      	lsls	r2, r4, #31
    41ea:	d51f      	bpl.n	422c <put_fat+0x98>
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	3330      	adds	r3, #48	; 0x30
    41f0:	7819      	ldrb	r1, [r3, #0]
    41f2:	220f      	movs	r2, #15
    41f4:	400a      	ands	r2, r1
    41f6:	0131      	lsls	r1, r6, #4
    41f8:	20ff      	movs	r0, #255	; 0xff
    41fa:	0100      	lsls	r0, r0, #4
    41fc:	4001      	ands	r1, r0
    41fe:	430a      	orrs	r2, r1
    4200:	701a      	strb	r2, [r3, #0]
			bc++;
    4202:	4644      	mov	r4, r8
    4204:	3401      	adds	r4, #1
			fs->wflag = 1;
    4206:	2301      	movs	r3, #1
    4208:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    420a:	0a61      	lsrs	r1, r4, #9
    420c:	6a3b      	ldr	r3, [r7, #32]
    420e:	469c      	mov	ip, r3
    4210:	4461      	add	r1, ip
    4212:	0038      	movs	r0, r7
    4214:	4b2c      	ldr	r3, [pc, #176]	; (42c8 <put_fat+0x134>)
    4216:	4798      	blx	r3
			if (res != FR_OK) break;
    4218:	2800      	cmp	r0, #0
    421a:	d151      	bne.n	42c0 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    421c:	05e4      	lsls	r4, r4, #23
    421e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4220:	0936      	lsrs	r6, r6, #4
    4222:	b2f6      	uxtb	r6, r6
    4224:	193c      	adds	r4, r7, r4
    4226:	3430      	adds	r4, #48	; 0x30
    4228:	7026      	strb	r6, [r4, #0]
			break;
    422a:	e7cb      	b.n	41c4 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    422c:	18fb      	adds	r3, r7, r3
    422e:	3330      	adds	r3, #48	; 0x30
    4230:	701e      	strb	r6, [r3, #0]
			bc++;
    4232:	4644      	mov	r4, r8
    4234:	3401      	adds	r4, #1
			fs->wflag = 1;
    4236:	2301      	movs	r3, #1
    4238:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    423a:	0a61      	lsrs	r1, r4, #9
    423c:	6a3b      	ldr	r3, [r7, #32]
    423e:	469c      	mov	ip, r3
    4240:	4461      	add	r1, ip
    4242:	0038      	movs	r0, r7
    4244:	4b20      	ldr	r3, [pc, #128]	; (42c8 <put_fat+0x134>)
    4246:	4798      	blx	r3
			if (res != FR_OK) break;
    4248:	2800      	cmp	r0, #0
    424a:	d13b      	bne.n	42c4 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    424c:	05e4      	lsls	r4, r4, #23
    424e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4250:	193b      	adds	r3, r7, r4
    4252:	3330      	adds	r3, #48	; 0x30
    4254:	781b      	ldrb	r3, [r3, #0]
    4256:	220f      	movs	r2, #15
    4258:	4393      	bics	r3, r2
    425a:	0536      	lsls	r6, r6, #20
    425c:	0f36      	lsrs	r6, r6, #28
    425e:	431e      	orrs	r6, r3
    4260:	e7e0      	b.n	4224 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4262:	0a09      	lsrs	r1, r1, #8
    4264:	6a03      	ldr	r3, [r0, #32]
    4266:	469c      	mov	ip, r3
    4268:	4461      	add	r1, ip
    426a:	4b17      	ldr	r3, [pc, #92]	; (42c8 <put_fat+0x134>)
    426c:	4798      	blx	r3
    426e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4270:	d1a8      	bne.n	41c4 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4272:	0063      	lsls	r3, r4, #1
    4274:	24ff      	movs	r4, #255	; 0xff
    4276:	0064      	lsls	r4, r4, #1
    4278:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    427a:	18fb      	adds	r3, r7, r3
    427c:	3330      	adds	r3, #48	; 0x30
    427e:	701e      	strb	r6, [r3, #0]
    4280:	0a36      	lsrs	r6, r6, #8
    4282:	705e      	strb	r6, [r3, #1]
			break;
    4284:	e79e      	b.n	41c4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4286:	09c9      	lsrs	r1, r1, #7
    4288:	6a03      	ldr	r3, [r0, #32]
    428a:	469c      	mov	ip, r3
    428c:	4461      	add	r1, ip
    428e:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <put_fat+0x134>)
    4290:	4798      	blx	r3
    4292:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4294:	d196      	bne.n	41c4 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4296:	00a4      	lsls	r4, r4, #2
    4298:	23fe      	movs	r3, #254	; 0xfe
    429a:	005b      	lsls	r3, r3, #1
    429c:	401c      	ands	r4, r3
    429e:	0022      	movs	r2, r4
    42a0:	3230      	adds	r2, #48	; 0x30
    42a2:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    42a4:	78d3      	ldrb	r3, [r2, #3]
    42a6:	193c      	adds	r4, r7, r4
    42a8:	3430      	adds	r4, #48	; 0x30
    42aa:	091b      	lsrs	r3, r3, #4
    42ac:	071b      	lsls	r3, r3, #28
    42ae:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    42b0:	7026      	strb	r6, [r4, #0]
    42b2:	0a33      	lsrs	r3, r6, #8
    42b4:	7053      	strb	r3, [r2, #1]
    42b6:	0c33      	lsrs	r3, r6, #16
    42b8:	7093      	strb	r3, [r2, #2]
    42ba:	0e36      	lsrs	r6, r6, #24
    42bc:	70d6      	strb	r6, [r2, #3]
			break;
    42be:	e781      	b.n	41c4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    42c0:	0005      	movs	r5, r0
    42c2:	e77f      	b.n	41c4 <put_fat+0x30>
    42c4:	0005      	movs	r5, r0
    42c6:	e77d      	b.n	41c4 <put_fat+0x30>
    42c8:	00003f51 	.word	0x00003f51

000042cc <create_chain>:
{
    42cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ce:	46c6      	mov	lr, r8
    42d0:	b500      	push	{lr}
    42d2:	0005      	movs	r5, r0
    42d4:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    42d6:	2900      	cmp	r1, #0
    42d8:	d107      	bne.n	42ea <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    42da:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    42dc:	2e00      	cmp	r6, #0
    42de:	d00d      	beq.n	42fc <create_chain+0x30>
    42e0:	6983      	ldr	r3, [r0, #24]
    42e2:	429e      	cmp	r6, r3
    42e4:	d30b      	bcc.n	42fe <create_chain+0x32>
    42e6:	2601      	movs	r6, #1
    42e8:	e009      	b.n	42fe <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    42ea:	4b26      	ldr	r3, [pc, #152]	; (4384 <create_chain+0xb8>)
    42ec:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    42ee:	2801      	cmp	r0, #1
    42f0:	d93d      	bls.n	436e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    42f2:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    42f4:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    42f6:	4298      	cmp	r0, r3
    42f8:	d201      	bcs.n	42fe <create_chain+0x32>
    42fa:	e03d      	b.n	4378 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    42fc:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    42fe:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4300:	4f20      	ldr	r7, [pc, #128]	; (4384 <create_chain+0xb8>)
    4302:	e00a      	b.n	431a <create_chain+0x4e>
    4304:	0021      	movs	r1, r4
    4306:	0028      	movs	r0, r5
    4308:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    430a:	2800      	cmp	r0, #0
    430c:	d00d      	beq.n	432a <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    430e:	1c43      	adds	r3, r0, #1
    4310:	d032      	beq.n	4378 <create_chain+0xac>
    4312:	2801      	cmp	r0, #1
    4314:	d030      	beq.n	4378 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4316:	42b4      	cmp	r4, r6
    4318:	d02d      	beq.n	4376 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    431a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    431c:	69ab      	ldr	r3, [r5, #24]
    431e:	429c      	cmp	r4, r3
    4320:	d3f0      	bcc.n	4304 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4322:	2e01      	cmp	r6, #1
    4324:	d925      	bls.n	4372 <create_chain+0xa6>
			ncl = 2;
    4326:	2402      	movs	r4, #2
    4328:	e7ec      	b.n	4304 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    432a:	4a17      	ldr	r2, [pc, #92]	; (4388 <create_chain+0xbc>)
    432c:	0021      	movs	r1, r4
    432e:	0028      	movs	r0, r5
    4330:	4b16      	ldr	r3, [pc, #88]	; (438c <create_chain+0xc0>)
    4332:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4334:	2800      	cmp	r0, #0
    4336:	d113      	bne.n	4360 <create_chain+0x94>
    4338:	4643      	mov	r3, r8
    433a:	2b00      	cmp	r3, #0
    433c:	d109      	bne.n	4352 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    433e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4340:	692b      	ldr	r3, [r5, #16]
    4342:	1c5a      	adds	r2, r3, #1
    4344:	d01b      	beq.n	437e <create_chain+0xb2>
			fs->free_clust--;
    4346:	3b01      	subs	r3, #1
    4348:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    434a:	2301      	movs	r3, #1
    434c:	716b      	strb	r3, [r5, #5]
    434e:	0020      	movs	r0, r4
    4350:	e012      	b.n	4378 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4352:	0022      	movs	r2, r4
    4354:	4641      	mov	r1, r8
    4356:	0028      	movs	r0, r5
    4358:	4b0c      	ldr	r3, [pc, #48]	; (438c <create_chain+0xc0>)
    435a:	4798      	blx	r3
	if (res == FR_OK) {
    435c:	2800      	cmp	r0, #0
    435e:	d0ee      	beq.n	433e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4360:	3801      	subs	r0, #1
    4362:	4242      	negs	r2, r0
    4364:	4142      	adcs	r2, r0
    4366:	4250      	negs	r0, r2
    4368:	2301      	movs	r3, #1
    436a:	4318      	orrs	r0, r3
    436c:	e004      	b.n	4378 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    436e:	2001      	movs	r0, #1
    4370:	e002      	b.n	4378 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4372:	2000      	movs	r0, #0
    4374:	e000      	b.n	4378 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4376:	2000      	movs	r0, #0
}
    4378:	bc04      	pop	{r2}
    437a:	4690      	mov	r8, r2
    437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    437e:	0020      	movs	r0, r4
    4380:	e7fa      	b.n	4378 <create_chain+0xac>
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	00003ff1 	.word	0x00003ff1
    4388:	0fffffff 	.word	0x0fffffff
    438c:	00004195 	.word	0x00004195

00004390 <remove_chain>:
{
    4390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4392:	46ce      	mov	lr, r9
    4394:	4647      	mov	r7, r8
    4396:	b580      	push	{r7, lr}
    4398:	0004      	movs	r4, r0
    439a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    439c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    439e:	2901      	cmp	r1, #1
    43a0:	d902      	bls.n	43a8 <remove_chain+0x18>
    43a2:	69a3      	ldr	r3, [r4, #24]
    43a4:	4299      	cmp	r1, r3
    43a6:	d303      	bcc.n	43b0 <remove_chain+0x20>
}
    43a8:	bc0c      	pop	{r2, r3}
    43aa:	4690      	mov	r8, r2
    43ac:	4699      	mov	r9, r3
    43ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    43b0:	4f13      	ldr	r7, [pc, #76]	; (4400 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    43b2:	4b14      	ldr	r3, [pc, #80]	; (4404 <remove_chain+0x74>)
    43b4:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    43b6:	2301      	movs	r3, #1
    43b8:	4699      	mov	r9, r3
    43ba:	e003      	b.n	43c4 <remove_chain+0x34>
    43bc:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    43be:	69a3      	ldr	r3, [r4, #24]
    43c0:	42b3      	cmp	r3, r6
    43c2:	d9f1      	bls.n	43a8 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    43c4:	0029      	movs	r1, r5
    43c6:	0020      	movs	r0, r4
    43c8:	47b8      	blx	r7
    43ca:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    43cc:	d011      	beq.n	43f2 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    43ce:	2801      	cmp	r0, #1
    43d0:	d011      	beq.n	43f6 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    43d2:	1c43      	adds	r3, r0, #1
    43d4:	d011      	beq.n	43fa <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    43d6:	2200      	movs	r2, #0
    43d8:	0029      	movs	r1, r5
    43da:	0020      	movs	r0, r4
    43dc:	47c0      	blx	r8
			if (res != FR_OK) break;
    43de:	2800      	cmp	r0, #0
    43e0:	d1e2      	bne.n	43a8 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    43e2:	6923      	ldr	r3, [r4, #16]
    43e4:	1c5a      	adds	r2, r3, #1
    43e6:	d0e9      	beq.n	43bc <remove_chain+0x2c>
				fs->free_clust++;
    43e8:	3301      	adds	r3, #1
    43ea:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    43ec:	464b      	mov	r3, r9
    43ee:	7163      	strb	r3, [r4, #5]
    43f0:	e7e4      	b.n	43bc <remove_chain+0x2c>
    43f2:	2000      	movs	r0, #0
    43f4:	e7d8      	b.n	43a8 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    43f6:	2002      	movs	r0, #2
    43f8:	e7d6      	b.n	43a8 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    43fa:	2001      	movs	r0, #1
    43fc:	e7d4      	b.n	43a8 <remove_chain+0x18>
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	00003ff1 	.word	0x00003ff1
    4404:	00004195 	.word	0x00004195

00004408 <dir_next>:
{
    4408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    440a:	46d6      	mov	lr, sl
    440c:	4647      	mov	r7, r8
    440e:	b580      	push	{r7, lr}
    4410:	0006      	movs	r6, r0
    4412:	000d      	movs	r5, r1
	i = dj->index + 1;
    4414:	88c4      	ldrh	r4, [r0, #6]
    4416:	3401      	adds	r4, #1
    4418:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    441a:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    441c:	2c00      	cmp	r4, #0
    441e:	d103      	bne.n	4428 <dir_next+0x20>
}
    4420:	bc0c      	pop	{r2, r3}
    4422:	4690      	mov	r8, r2
    4424:	469a      	mov	sl, r3
    4426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4428:	6933      	ldr	r3, [r6, #16]
    442a:	2b00      	cmp	r3, #0
    442c:	d0f8      	beq.n	4420 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    442e:	270f      	movs	r7, #15
    4430:	4027      	ands	r7, r4
    4432:	d10f      	bne.n	4454 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4434:	3301      	adds	r3, #1
    4436:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4438:	68f1      	ldr	r1, [r6, #12]
    443a:	2900      	cmp	r1, #0
    443c:	d104      	bne.n	4448 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    443e:	6833      	ldr	r3, [r6, #0]
    4440:	891b      	ldrh	r3, [r3, #8]
    4442:	42a3      	cmp	r3, r4
    4444:	d9ec      	bls.n	4420 <dir_next+0x18>
    4446:	e005      	b.n	4454 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4448:	6830      	ldr	r0, [r6, #0]
    444a:	7883      	ldrb	r3, [r0, #2]
    444c:	3b01      	subs	r3, #1
    444e:	0922      	lsrs	r2, r4, #4
    4450:	421a      	tst	r2, r3
    4452:	d007      	beq.n	4464 <dir_next+0x5c>
	dj->index = i;
    4454:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4456:	6833      	ldr	r3, [r6, #0]
    4458:	3330      	adds	r3, #48	; 0x30
    445a:	017f      	lsls	r7, r7, #5
    445c:	19df      	adds	r7, r3, r7
    445e:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4460:	2000      	movs	r0, #0
    4462:	e7dd      	b.n	4420 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4464:	4b2c      	ldr	r3, [pc, #176]	; (4518 <dir_next+0x110>)
    4466:	4798      	blx	r3
    4468:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    446a:	2002      	movs	r0, #2
    446c:	4643      	mov	r3, r8
    446e:	2b01      	cmp	r3, #1
    4470:	d9d6      	bls.n	4420 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4472:	3301      	adds	r3, #1
    4474:	d04b      	beq.n	450e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4476:	6833      	ldr	r3, [r6, #0]
    4478:	699a      	ldr	r2, [r3, #24]
    447a:	4590      	cmp	r8, r2
    447c:	d33f      	bcc.n	44fe <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    447e:	3002      	adds	r0, #2
    4480:	2d00      	cmp	r5, #0
    4482:	d0cd      	beq.n	4420 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4484:	68f1      	ldr	r1, [r6, #12]
    4486:	0018      	movs	r0, r3
    4488:	4b24      	ldr	r3, [pc, #144]	; (451c <dir_next+0x114>)
    448a:	4798      	blx	r3
    448c:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    448e:	2007      	movs	r0, #7
    4490:	4643      	mov	r3, r8
    4492:	2b00      	cmp	r3, #0
    4494:	d0c4      	beq.n	4420 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4496:	3805      	subs	r0, #5
    4498:	2b01      	cmp	r3, #1
    449a:	d0c1      	beq.n	4420 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    449c:	3801      	subs	r0, #1
    449e:	3301      	adds	r3, #1
    44a0:	d0be      	beq.n	4420 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    44a2:	2100      	movs	r1, #0
    44a4:	6830      	ldr	r0, [r6, #0]
    44a6:	4b1e      	ldr	r3, [pc, #120]	; (4520 <dir_next+0x118>)
    44a8:	4798      	blx	r3
    44aa:	0003      	movs	r3, r0
    44ac:	2001      	movs	r0, #1
    44ae:	2b00      	cmp	r3, #0
    44b0:	d1b6      	bne.n	4420 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    44b2:	6830      	ldr	r0, [r6, #0]
    44b4:	3030      	adds	r0, #48	; 0x30
    44b6:	2280      	movs	r2, #128	; 0x80
    44b8:	0092      	lsls	r2, r2, #2
    44ba:	2100      	movs	r1, #0
    44bc:	4b19      	ldr	r3, [pc, #100]	; (4524 <dir_next+0x11c>)
    44be:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    44c0:	6835      	ldr	r5, [r6, #0]
    44c2:	4641      	mov	r1, r8
    44c4:	0028      	movs	r0, r5
    44c6:	4b18      	ldr	r3, [pc, #96]	; (4528 <dir_next+0x120>)
    44c8:	4798      	blx	r3
    44ca:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44cc:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    44ce:	2301      	movs	r3, #1
    44d0:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44d2:	6833      	ldr	r3, [r6, #0]
    44d4:	789a      	ldrb	r2, [r3, #2]
    44d6:	42aa      	cmp	r2, r5
    44d8:	d90e      	bls.n	44f8 <dir_next+0xf0>
						dj->fs->wflag = 1;
    44da:	4652      	mov	r2, sl
    44dc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    44de:	2100      	movs	r1, #0
    44e0:	6830      	ldr	r0, [r6, #0]
    44e2:	4b0f      	ldr	r3, [pc, #60]	; (4520 <dir_next+0x118>)
    44e4:	4798      	blx	r3
    44e6:	2800      	cmp	r0, #0
    44e8:	d113      	bne.n	4512 <dir_next+0x10a>
						dj->fs->winsect++;
    44ea:	6832      	ldr	r2, [r6, #0]
    44ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    44ee:	3301      	adds	r3, #1
    44f0:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    44f2:	3501      	adds	r5, #1
    44f4:	b2ed      	uxtb	r5, r5
    44f6:	e7ec      	b.n	44d2 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    44f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44fa:	1b52      	subs	r2, r2, r5
    44fc:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    44fe:	4643      	mov	r3, r8
    4500:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4502:	4641      	mov	r1, r8
    4504:	6830      	ldr	r0, [r6, #0]
    4506:	4b08      	ldr	r3, [pc, #32]	; (4528 <dir_next+0x120>)
    4508:	4798      	blx	r3
    450a:	6130      	str	r0, [r6, #16]
    450c:	e7a2      	b.n	4454 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    450e:	2001      	movs	r0, #1
    4510:	e786      	b.n	4420 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4512:	2001      	movs	r0, #1
    4514:	e784      	b.n	4420 <dir_next+0x18>
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	00003ff1 	.word	0x00003ff1
    451c:	000042cd 	.word	0x000042cd
    4520:	00003f51 	.word	0x00003f51
    4524:	00003a85 	.word	0x00003a85
    4528:	00003a97 	.word	0x00003a97

0000452c <dir_find>:
{
    452c:	b5f0      	push	{r4, r5, r6, r7, lr}
    452e:	46de      	mov	lr, fp
    4530:	4657      	mov	r7, sl
    4532:	464e      	mov	r6, r9
    4534:	4645      	mov	r5, r8
    4536:	b5e0      	push	{r5, r6, r7, lr}
    4538:	b083      	sub	sp, #12
    453a:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    453c:	2100      	movs	r1, #0
    453e:	4b5a      	ldr	r3, [pc, #360]	; (46a8 <dir_find+0x17c>)
    4540:	4798      	blx	r3
    4542:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4544:	d000      	beq.n	4548 <dir_find+0x1c>
    4546:	e09e      	b.n	4686 <dir_find+0x15a>
    4548:	23ff      	movs	r3, #255	; 0xff
    454a:	4699      	mov	r9, r3
    454c:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    454e:	4b57      	ldr	r3, [pc, #348]	; (46ac <dir_find+0x180>)
    4550:	469b      	mov	fp, r3
    4552:	e01b      	b.n	458c <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4554:	2b0f      	cmp	r3, #15
    4556:	d030      	beq.n	45ba <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4558:	4653      	mov	r3, sl
    455a:	2b00      	cmp	r3, #0
    455c:	d105      	bne.n	456a <dir_find+0x3e>
    455e:	0020      	movs	r0, r4
    4560:	4b53      	ldr	r3, [pc, #332]	; (46b0 <dir_find+0x184>)
    4562:	4798      	blx	r3
    4564:	4581      	cmp	r9, r0
    4566:	d100      	bne.n	456a <dir_find+0x3e>
    4568:	e08d      	b.n	4686 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    456a:	2301      	movs	r3, #1
    456c:	425b      	negs	r3, r3
    456e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4570:	69a8      	ldr	r0, [r5, #24]
    4572:	7ac3      	ldrb	r3, [r0, #11]
    4574:	07db      	lsls	r3, r3, #31
    4576:	d400      	bmi.n	457a <dir_find+0x4e>
    4578:	e07d      	b.n	4676 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    457a:	23ff      	movs	r3, #255	; 0xff
    457c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    457e:	2100      	movs	r1, #0
    4580:	0028      	movs	r0, r5
    4582:	4b4c      	ldr	r3, [pc, #304]	; (46b4 <dir_find+0x188>)
    4584:	4798      	blx	r3
    4586:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4588:	d000      	beq.n	458c <dir_find+0x60>
    458a:	e07c      	b.n	4686 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    458c:	6929      	ldr	r1, [r5, #16]
    458e:	6828      	ldr	r0, [r5, #0]
    4590:	47d8      	blx	fp
    4592:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4594:	d177      	bne.n	4686 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4596:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4598:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    459a:	2e00      	cmp	r6, #0
    459c:	d100      	bne.n	45a0 <dir_find+0x74>
    459e:	e080      	b.n	46a2 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    45a0:	7ae2      	ldrb	r2, [r4, #11]
    45a2:	233f      	movs	r3, #63	; 0x3f
    45a4:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    45a6:	2ee5      	cmp	r6, #229	; 0xe5
    45a8:	d100      	bne.n	45ac <dir_find+0x80>
    45aa:	e077      	b.n	469c <dir_find+0x170>
    45ac:	0712      	lsls	r2, r2, #28
    45ae:	d5d1      	bpl.n	4554 <dir_find+0x28>
    45b0:	2b0f      	cmp	r3, #15
    45b2:	d002      	beq.n	45ba <dir_find+0x8e>
			ord = 0xFF;
    45b4:	23ff      	movs	r3, #255	; 0xff
    45b6:	469a      	mov	sl, r3
    45b8:	e7e1      	b.n	457e <dir_find+0x52>
				if (dj->lfn) {
    45ba:	69ef      	ldr	r7, [r5, #28]
    45bc:	2f00      	cmp	r7, #0
    45be:	d0de      	beq.n	457e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    45c0:	0673      	lsls	r3, r6, #25
    45c2:	d518      	bpl.n	45f6 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    45c4:	7b63      	ldrb	r3, [r4, #13]
    45c6:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    45c8:	2340      	movs	r3, #64	; 0x40
    45ca:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    45cc:	88eb      	ldrh	r3, [r5, #6]
    45ce:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45d0:	7b63      	ldrb	r3, [r4, #13]
    45d2:	9300      	str	r3, [sp, #0]
    45d4:	22ff      	movs	r2, #255	; 0xff
    45d6:	4692      	mov	sl, r2
    45d8:	454b      	cmp	r3, r9
    45da:	d1d0      	bne.n	457e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    45dc:	7823      	ldrb	r3, [r4, #0]
    45de:	3abf      	subs	r2, #191	; 0xbf
    45e0:	4393      	bics	r3, r2
    45e2:	3b01      	subs	r3, #1
    45e4:	005a      	lsls	r2, r3, #1
    45e6:	18d2      	adds	r2, r2, r3
    45e8:	0092      	lsls	r2, r2, #2
    45ea:	4692      	mov	sl, r2
    45ec:	449a      	add	sl, r3
	s = 0; wc = 1;
    45ee:	2201      	movs	r2, #1
    45f0:	2300      	movs	r3, #0
    45f2:	4699      	mov	r9, r3
    45f4:	e01d      	b.n	4632 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45f6:	45b2      	cmp	sl, r6
    45f8:	d0ea      	beq.n	45d0 <dir_find+0xa4>
    45fa:	23ff      	movs	r3, #255	; 0xff
    45fc:	469a      	mov	sl, r3
    45fe:	e7be      	b.n	457e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4600:	4b2d      	ldr	r3, [pc, #180]	; (46b8 <dir_find+0x18c>)
    4602:	4798      	blx	r3
    4604:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4606:	4653      	mov	r3, sl
    4608:	2bfe      	cmp	r3, #254	; 0xfe
    460a:	d81f      	bhi.n	464c <dir_find+0x120>
    460c:	2301      	movs	r3, #1
    460e:	4453      	add	r3, sl
    4610:	4698      	mov	r8, r3
    4612:	4653      	mov	r3, sl
    4614:	005b      	lsls	r3, r3, #1
    4616:	5bd8      	ldrh	r0, [r3, r7]
    4618:	4b27      	ldr	r3, [pc, #156]	; (46b8 <dir_find+0x18c>)
    461a:	4798      	blx	r3
    461c:	0002      	movs	r2, r0
    461e:	9b01      	ldr	r3, [sp, #4]
    4620:	4283      	cmp	r3, r0
    4622:	d113      	bne.n	464c <dir_find+0x120>
    4624:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4626:	2301      	movs	r3, #1
    4628:	469c      	mov	ip, r3
    462a:	44e1      	add	r9, ip
    462c:	464b      	mov	r3, r9
    462e:	2b0d      	cmp	r3, #13
    4630:	d011      	beq.n	4656 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4632:	4b22      	ldr	r3, [pc, #136]	; (46bc <dir_find+0x190>)
    4634:	4649      	mov	r1, r9
    4636:	5cc9      	ldrb	r1, [r1, r3]
    4638:	1863      	adds	r3, r4, r1
    463a:	785b      	ldrb	r3, [r3, #1]
    463c:	021b      	lsls	r3, r3, #8
    463e:	5c60      	ldrb	r0, [r4, r1]
    4640:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4642:	2a00      	cmp	r2, #0
    4644:	d1dc      	bne.n	4600 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4646:	4b1e      	ldr	r3, [pc, #120]	; (46c0 <dir_find+0x194>)
    4648:	4298      	cmp	r0, r3
    464a:	d0ec      	beq.n	4626 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    464c:	9b00      	ldr	r3, [sp, #0]
    464e:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4650:	23ff      	movs	r3, #255	; 0xff
    4652:	469a      	mov	sl, r3
    4654:	e793      	b.n	457e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4656:	7823      	ldrb	r3, [r4, #0]
    4658:	065b      	lsls	r3, r3, #25
    465a:	d506      	bpl.n	466a <dir_find+0x13e>
    465c:	2a00      	cmp	r2, #0
    465e:	d004      	beq.n	466a <dir_find+0x13e>
    4660:	4653      	mov	r3, sl
    4662:	005b      	lsls	r3, r3, #1
    4664:	5bdb      	ldrh	r3, [r3, r7]
    4666:	2b00      	cmp	r3, #0
    4668:	d1f0      	bne.n	464c <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    466a:	3e01      	subs	r6, #1
    466c:	b2f3      	uxtb	r3, r6
    466e:	469a      	mov	sl, r3
    4670:	9b00      	ldr	r3, [sp, #0]
    4672:	4699      	mov	r9, r3
    4674:	e783      	b.n	457e <dir_find+0x52>
    4676:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4678:	5ce1      	ldrb	r1, [r4, r3]
    467a:	5cc2      	ldrb	r2, [r0, r3]
    467c:	4291      	cmp	r1, r2
    467e:	d10a      	bne.n	4696 <dir_find+0x16a>
    4680:	3301      	adds	r3, #1
    4682:	2b0b      	cmp	r3, #11
    4684:	d1f8      	bne.n	4678 <dir_find+0x14c>
}
    4686:	0038      	movs	r0, r7
    4688:	b003      	add	sp, #12
    468a:	bc3c      	pop	{r2, r3, r4, r5}
    468c:	4690      	mov	r8, r2
    468e:	4699      	mov	r9, r3
    4690:	46a2      	mov	sl, r4
    4692:	46ab      	mov	fp, r5
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4696:	23ff      	movs	r3, #255	; 0xff
    4698:	469a      	mov	sl, r3
    469a:	e770      	b.n	457e <dir_find+0x52>
			ord = 0xFF;
    469c:	23ff      	movs	r3, #255	; 0xff
    469e:	469a      	mov	sl, r3
    46a0:	e76d      	b.n	457e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    46a2:	2704      	movs	r7, #4
    46a4:	e7ef      	b.n	4686 <dir_find+0x15a>
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	000040ed 	.word	0x000040ed
    46ac:	00003f51 	.word	0x00003f51
    46b0:	00003aaf 	.word	0x00003aaf
    46b4:	00004409 	.word	0x00004409
    46b8:	000054c9 	.word	0x000054c9
    46bc:	00006ec4 	.word	0x00006ec4
    46c0:	0000ffff 	.word	0x0000ffff

000046c4 <dir_register>:
{
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	46de      	mov	lr, fp
    46c8:	4657      	mov	r7, sl
    46ca:	464e      	mov	r6, r9
    46cc:	4645      	mov	r5, r8
    46ce:	b5e0      	push	{r5, r6, r7, lr}
    46d0:	b089      	sub	sp, #36	; 0x24
    46d2:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    46d4:	6987      	ldr	r7, [r0, #24]
    46d6:	69c3      	ldr	r3, [r0, #28]
    46d8:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    46da:	ad05      	add	r5, sp, #20
    46dc:	220c      	movs	r2, #12
    46de:	0039      	movs	r1, r7
    46e0:	0028      	movs	r0, r5
    46e2:	4ba7      	ldr	r3, [pc, #668]	; (4980 <dir_register+0x2bc>)
    46e4:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    46e6:	7aeb      	ldrb	r3, [r5, #11]
    46e8:	07db      	lsls	r3, r3, #31
    46ea:	d400      	bmi.n	46ee <dir_register+0x2a>
    46ec:	e070      	b.n	47d0 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    46ee:	2300      	movs	r3, #0
    46f0:	72fb      	strb	r3, [r7, #11]
    46f2:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    46f4:	220b      	movs	r2, #11
    46f6:	a905      	add	r1, sp, #20
    46f8:	0038      	movs	r0, r7
    46fa:	4ba1      	ldr	r3, [pc, #644]	; (4980 <dir_register+0x2bc>)
    46fc:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    46fe:	2301      	movs	r3, #1
		ns[i--] = c;
    4700:	ad03      	add	r5, sp, #12
    4702:	001e      	movs	r6, r3
    4704:	46a0      	mov	r8, r4
    4706:	e049      	b.n	479c <dir_register+0xd8>
    4708:	3801      	subs	r0, #1
    470a:	1829      	adds	r1, r5, r0
    470c:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    470e:	091b      	lsrs	r3, r3, #4
    4710:	b29b      	uxth	r3, r3
	} while (seq);
    4712:	2b00      	cmp	r3, #0
    4714:	d007      	beq.n	4726 <dir_register+0x62>
		c = (seq % 16) + '0';
    4716:	0021      	movs	r1, r4
    4718:	4019      	ands	r1, r3
    471a:	000a      	movs	r2, r1
    471c:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    471e:	2a39      	cmp	r2, #57	; 0x39
    4720:	d9f2      	bls.n	4708 <dir_register+0x44>
    4722:	3207      	adds	r2, #7
    4724:	e7f0      	b.n	4708 <dir_register+0x44>
	ns[i] = '~';
    4726:	337e      	adds	r3, #126	; 0x7e
    4728:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    472a:	2800      	cmp	r0, #0
    472c:	d00a      	beq.n	4744 <dir_register+0x80>
    472e:	783b      	ldrb	r3, [r7, #0]
    4730:	2b20      	cmp	r3, #32
    4732:	d009      	beq.n	4748 <dir_register+0x84>
    4734:	2300      	movs	r3, #0
    4736:	3301      	adds	r3, #1
    4738:	4298      	cmp	r0, r3
    473a:	d007      	beq.n	474c <dir_register+0x88>
    473c:	5cfa      	ldrb	r2, [r7, r3]
    473e:	2a20      	cmp	r2, #32
    4740:	d1f9      	bne.n	4736 <dir_register+0x72>
    4742:	e009      	b.n	4758 <dir_register+0x94>
    4744:	0003      	movs	r3, r0
    4746:	e007      	b.n	4758 <dir_register+0x94>
    4748:	2300      	movs	r3, #0
    474a:	e005      	b.n	4758 <dir_register+0x94>
    474c:	0003      	movs	r3, r0
    474e:	e003      	b.n	4758 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4750:	54fa      	strb	r2, [r7, r3]
    4752:	3301      	adds	r3, #1
	} while (j < 8);
    4754:	2b07      	cmp	r3, #7
    4756:	d805      	bhi.n	4764 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4758:	2220      	movs	r2, #32
    475a:	2807      	cmp	r0, #7
    475c:	d8f8      	bhi.n	4750 <dir_register+0x8c>
    475e:	5c2a      	ldrb	r2, [r5, r0]
    4760:	3001      	adds	r0, #1
    4762:	e7f5      	b.n	4750 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4764:	4640      	mov	r0, r8
    4766:	4b87      	ldr	r3, [pc, #540]	; (4984 <dir_register+0x2c0>)
    4768:	4798      	blx	r3
			if (res != FR_OK) break;
    476a:	2800      	cmp	r0, #0
    476c:	d11c      	bne.n	47a8 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    476e:	3601      	adds	r6, #1
    4770:	b2b6      	uxth	r6, r6
    4772:	2e64      	cmp	r6, #100	; 0x64
    4774:	d015      	beq.n	47a2 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4776:	220b      	movs	r2, #11
    4778:	a905      	add	r1, sp, #20
    477a:	0038      	movs	r0, r7
    477c:	4b80      	ldr	r3, [pc, #512]	; (4980 <dir_register+0x2bc>)
    477e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4780:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4782:	2e05      	cmp	r6, #5
    4784:	d90a      	bls.n	479c <dir_register+0xd8>
    4786:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4788:	085a      	lsrs	r2, r3, #1
    478a:	03db      	lsls	r3, r3, #15
    478c:	4313      	orrs	r3, r2
    478e:	880a      	ldrh	r2, [r1, #0]
    4790:	189b      	adds	r3, r3, r2
    4792:	b29b      	uxth	r3, r3
    4794:	3102      	adds	r1, #2
    4796:	880a      	ldrh	r2, [r1, #0]
    4798:	2a00      	cmp	r2, #0
    479a:	d1f5      	bne.n	4788 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    479c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    479e:	240f      	movs	r4, #15
    47a0:	e7b9      	b.n	4716 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    47a2:	2307      	movs	r3, #7
    47a4:	4698      	mov	r8, r3
    47a6:	e006      	b.n	47b6 <dir_register+0xf2>
    47a8:	4644      	mov	r4, r8
    47aa:	4680      	mov	r8, r0
    47ac:	2e64      	cmp	r6, #100	; 0x64
    47ae:	d100      	bne.n	47b2 <dir_register+0xee>
    47b0:	e0a5      	b.n	48fe <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    47b2:	2804      	cmp	r0, #4
    47b4:	d007      	beq.n	47c6 <dir_register+0x102>
}
    47b6:	4640      	mov	r0, r8
    47b8:	b009      	add	sp, #36	; 0x24
    47ba:	bc3c      	pop	{r2, r3, r4, r5}
    47bc:	4690      	mov	r8, r2
    47be:	4699      	mov	r9, r3
    47c0:	46a2      	mov	sl, r4
    47c2:	46ab      	mov	fp, r5
    47c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    47c6:	ab05      	add	r3, sp, #20
    47c8:	7adb      	ldrb	r3, [r3, #11]
    47ca:	72fb      	strb	r3, [r7, #11]
    47cc:	4653      	mov	r3, sl
    47ce:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    47d0:	ab05      	add	r3, sp, #20
    47d2:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    47d4:	2201      	movs	r2, #1
    47d6:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    47d8:	079b      	lsls	r3, r3, #30
    47da:	d511      	bpl.n	4800 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    47dc:	4653      	mov	r3, sl
    47de:	881b      	ldrh	r3, [r3, #0]
    47e0:	2b00      	cmp	r3, #0
    47e2:	d01b      	beq.n	481c <dir_register+0x158>
    47e4:	2000      	movs	r0, #0
    47e6:	4652      	mov	r2, sl
    47e8:	3001      	adds	r0, #1
    47ea:	b280      	uxth	r0, r0
    47ec:	0043      	lsls	r3, r0, #1
    47ee:	5a9b      	ldrh	r3, [r3, r2]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d1f9      	bne.n	47e8 <dir_register+0x124>
		ne = (ne + 25) / 13;
    47f4:	3019      	adds	r0, #25
    47f6:	210d      	movs	r1, #13
    47f8:	4b63      	ldr	r3, [pc, #396]	; (4988 <dir_register+0x2c4>)
    47fa:	4798      	blx	r3
    47fc:	b283      	uxth	r3, r0
    47fe:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4800:	2100      	movs	r1, #0
    4802:	0020      	movs	r0, r4
    4804:	4b61      	ldr	r3, [pc, #388]	; (498c <dir_register+0x2c8>)
    4806:	4798      	blx	r3
    4808:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    480a:	2800      	cmp	r0, #0
    480c:	d1d3      	bne.n	47b6 <dir_register+0xf2>
    480e:	4682      	mov	sl, r0
    4810:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4812:	4f5f      	ldr	r7, [pc, #380]	; (4990 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4814:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4816:	4b5f      	ldr	r3, [pc, #380]	; (4994 <dir_register+0x2d0>)
    4818:	4699      	mov	r9, r3
    481a:	e00b      	b.n	4834 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    481c:	2000      	movs	r0, #0
    481e:	e7e9      	b.n	47f4 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4820:	1c6b      	adds	r3, r5, #1
    4822:	b29b      	uxth	r3, r3
    4824:	459b      	cmp	fp, r3
    4826:	d06d      	beq.n	4904 <dir_register+0x240>
    4828:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    482a:	2101      	movs	r1, #1
    482c:	0020      	movs	r0, r4
    482e:	47c8      	blx	r9
	} while (res == FR_OK);
    4830:	2800      	cmp	r0, #0
    4832:	d112      	bne.n	485a <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4834:	6921      	ldr	r1, [r4, #16]
    4836:	6820      	ldr	r0, [r4, #0]
    4838:	47b8      	blx	r7
		if (res != FR_OK) break;
    483a:	2800      	cmp	r0, #0
    483c:	d000      	beq.n	4840 <dir_register+0x17c>
    483e:	e098      	b.n	4972 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4840:	6963      	ldr	r3, [r4, #20]
    4842:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4844:	2be5      	cmp	r3, #229	; 0xe5
    4846:	d001      	beq.n	484c <dir_register+0x188>
    4848:	2b00      	cmp	r3, #0
    484a:	d104      	bne.n	4856 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    484c:	2d00      	cmp	r5, #0
    484e:	d1e7      	bne.n	4820 <dir_register+0x15c>
    4850:	88e3      	ldrh	r3, [r4, #6]
    4852:	469a      	mov	sl, r3
    4854:	e7e4      	b.n	4820 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4856:	0035      	movs	r5, r6
    4858:	e7e7      	b.n	482a <dir_register+0x166>
    485a:	4680      	mov	r8, r0
    485c:	e7ab      	b.n	47b6 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    485e:	4651      	mov	r1, sl
    4860:	0020      	movs	r0, r4
    4862:	4b4a      	ldr	r3, [pc, #296]	; (498c <dir_register+0x2c8>)
    4864:	4798      	blx	r3
    4866:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4868:	2800      	cmp	r0, #0
    486a:	d1a4      	bne.n	47b6 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    486c:	69a0      	ldr	r0, [r4, #24]
    486e:	4b4a      	ldr	r3, [pc, #296]	; (4998 <dir_register+0x2d4>)
    4870:	4798      	blx	r3
    4872:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4874:	46a8      	mov	r8, r5
    4876:	e01f      	b.n	48b8 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4878:	0022      	movs	r2, r4
    487a:	e067      	b.n	494c <dir_register+0x288>
    487c:	465e      	mov	r6, fp
    487e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4880:	4946      	ldr	r1, [pc, #280]	; (499c <dir_register+0x2d8>)
    4882:	428b      	cmp	r3, r1
    4884:	d003      	beq.n	488e <dir_register+0x1ca>
    4886:	0052      	lsls	r2, r2, #1
    4888:	5b93      	ldrh	r3, [r2, r6]
    488a:	2b00      	cmp	r3, #0
    488c:	d103      	bne.n	4896 <dir_register+0x1d2>
    488e:	2340      	movs	r3, #64	; 0x40
    4890:	464a      	mov	r2, r9
    4892:	431a      	orrs	r2, r3
    4894:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4896:	464b      	mov	r3, r9
    4898:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    489a:	2301      	movs	r3, #1
    489c:	6822      	ldr	r2, [r4, #0]
    489e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    48a0:	2100      	movs	r1, #0
    48a2:	0020      	movs	r0, r4
    48a4:	4b3b      	ldr	r3, [pc, #236]	; (4994 <dir_register+0x2d0>)
    48a6:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    48a8:	2800      	cmp	r0, #0
    48aa:	d166      	bne.n	497a <dir_register+0x2b6>
    48ac:	4645      	mov	r5, r8
    48ae:	3d01      	subs	r5, #1
    48b0:	b2ab      	uxth	r3, r5
    48b2:	4698      	mov	r8, r3
    48b4:	2b00      	cmp	r3, #0
    48b6:	d027      	beq.n	4908 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    48b8:	6921      	ldr	r1, [r4, #16]
    48ba:	6820      	ldr	r0, [r4, #0]
    48bc:	4b34      	ldr	r3, [pc, #208]	; (4990 <dir_register+0x2cc>)
    48be:	4798      	blx	r3
				if (res != FR_OK) break;
    48c0:	2800      	cmp	r0, #0
    48c2:	d158      	bne.n	4976 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    48c4:	69e6      	ldr	r6, [r4, #28]
    48c6:	6960      	ldr	r0, [r4, #20]
    48c8:	4643      	mov	r3, r8
    48ca:	466a      	mov	r2, sp
    48cc:	70d3      	strb	r3, [r2, #3]
    48ce:	78d3      	ldrb	r3, [r2, #3]
    48d0:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    48d2:	7913      	ldrb	r3, [r2, #4]
    48d4:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    48d6:	230f      	movs	r3, #15
    48d8:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    48da:	2300      	movs	r3, #0
    48dc:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    48de:	7683      	strb	r3, [r0, #26]
    48e0:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    48e2:	464b      	mov	r3, r9
    48e4:	3b01      	subs	r3, #1
    48e6:	005a      	lsls	r2, r3, #1
    48e8:	18d2      	adds	r2, r2, r3
    48ea:	0092      	lsls	r2, r2, #2
    48ec:	18d2      	adds	r2, r2, r3
    48ee:	492c      	ldr	r1, [pc, #176]	; (49a0 <dir_register+0x2dc>)
    48f0:	000d      	movs	r5, r1
    48f2:	350d      	adds	r5, #13
	s = wc = 0;
    48f4:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    48f6:	4f29      	ldr	r7, [pc, #164]	; (499c <dir_register+0x2d8>)
    48f8:	46b3      	mov	fp, r6
    48fa:	46a4      	mov	ip, r4
    48fc:	e029      	b.n	4952 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    48fe:	2307      	movs	r3, #7
    4900:	4698      	mov	r8, r3
    4902:	e758      	b.n	47b6 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4904:	2b01      	cmp	r3, #1
    4906:	d8aa      	bhi.n	485e <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4908:	6921      	ldr	r1, [r4, #16]
    490a:	6820      	ldr	r0, [r4, #0]
    490c:	4b20      	ldr	r3, [pc, #128]	; (4990 <dir_register+0x2cc>)
    490e:	4798      	blx	r3
    4910:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4912:	2800      	cmp	r0, #0
    4914:	d000      	beq.n	4918 <dir_register+0x254>
    4916:	e74e      	b.n	47b6 <dir_register+0xf2>
			dir = dj->dir;
    4918:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    491a:	2220      	movs	r2, #32
    491c:	2100      	movs	r1, #0
    491e:	0028      	movs	r0, r5
    4920:	4b20      	ldr	r3, [pc, #128]	; (49a4 <dir_register+0x2e0>)
    4922:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4924:	220b      	movs	r2, #11
    4926:	69a1      	ldr	r1, [r4, #24]
    4928:	0028      	movs	r0, r5
    492a:	4b15      	ldr	r3, [pc, #84]	; (4980 <dir_register+0x2bc>)
    492c:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    492e:	69a3      	ldr	r3, [r4, #24]
    4930:	7ada      	ldrb	r2, [r3, #11]
    4932:	2318      	movs	r3, #24
    4934:	4013      	ands	r3, r2
    4936:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4938:	6823      	ldr	r3, [r4, #0]
    493a:	2201      	movs	r2, #1
    493c:	711a      	strb	r2, [r3, #4]
    493e:	e73a      	b.n	47b6 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4940:	780c      	ldrb	r4, [r1, #0]
    4942:	26ff      	movs	r6, #255	; 0xff
    4944:	5506      	strb	r6, [r0, r4]
    4946:	1904      	adds	r4, r0, r4
    4948:	26ff      	movs	r6, #255	; 0xff
    494a:	7066      	strb	r6, [r4, #1]
    494c:	3101      	adds	r1, #1
	} while (++s < 13);
    494e:	42a9      	cmp	r1, r5
    4950:	d094      	beq.n	487c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4952:	42bb      	cmp	r3, r7
    4954:	d0f4      	beq.n	4940 <dir_register+0x27c>
    4956:	1c54      	adds	r4, r2, #1
    4958:	0052      	lsls	r2, r2, #1
    495a:	465b      	mov	r3, fp
    495c:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    495e:	780a      	ldrb	r2, [r1, #0]
    4960:	5483      	strb	r3, [r0, r2]
    4962:	1882      	adds	r2, r0, r2
    4964:	0a1e      	lsrs	r6, r3, #8
    4966:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4968:	2b00      	cmp	r3, #0
    496a:	d185      	bne.n	4878 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    496c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    496e:	003b      	movs	r3, r7
    4970:	e7ec      	b.n	494c <dir_register+0x288>
    4972:	4680      	mov	r8, r0
    4974:	e71f      	b.n	47b6 <dir_register+0xf2>
    4976:	4680      	mov	r8, r0
    4978:	e71d      	b.n	47b6 <dir_register+0xf2>
    497a:	4680      	mov	r8, r0
    497c:	e71b      	b.n	47b6 <dir_register+0xf2>
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	00003a71 	.word	0x00003a71
    4984:	0000452d 	.word	0x0000452d
    4988:	00005ad5 	.word	0x00005ad5
    498c:	000040ed 	.word	0x000040ed
    4990:	00003f51 	.word	0x00003f51
    4994:	00004409 	.word	0x00004409
    4998:	00003aaf 	.word	0x00003aaf
    499c:	0000ffff 	.word	0x0000ffff
    49a0:	00006ec4 	.word	0x00006ec4
    49a4:	00003a85 	.word	0x00003a85

000049a8 <sync>:
{
    49a8:	b570      	push	{r4, r5, r6, lr}
    49aa:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    49ac:	2100      	movs	r1, #0
    49ae:	4b2c      	ldr	r3, [pc, #176]	; (4a60 <sync+0xb8>)
    49b0:	4798      	blx	r3
	if (res == FR_OK) {
    49b2:	2800      	cmp	r0, #0
    49b4:	d10a      	bne.n	49cc <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    49b6:	7823      	ldrb	r3, [r4, #0]
    49b8:	2b03      	cmp	r3, #3
    49ba:	d008      	beq.n	49ce <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    49bc:	7860      	ldrb	r0, [r4, #1]
    49be:	2200      	movs	r2, #0
    49c0:	2100      	movs	r1, #0
    49c2:	4b28      	ldr	r3, [pc, #160]	; (4a64 <sync+0xbc>)
    49c4:	4798      	blx	r3
    49c6:	1e43      	subs	r3, r0, #1
    49c8:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    49ca:	b2c0      	uxtb	r0, r0
}
    49cc:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    49ce:	7963      	ldrb	r3, [r4, #5]
    49d0:	2b00      	cmp	r3, #0
    49d2:	d0f3      	beq.n	49bc <sync+0x14>
			fs->winsect = 0;
    49d4:	2600      	movs	r6, #0
    49d6:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    49d8:	0025      	movs	r5, r4
    49da:	3530      	adds	r5, #48	; 0x30
    49dc:	2280      	movs	r2, #128	; 0x80
    49de:	0092      	lsls	r2, r2, #2
    49e0:	2100      	movs	r1, #0
    49e2:	0028      	movs	r0, r5
    49e4:	4b20      	ldr	r3, [pc, #128]	; (4a68 <sync+0xc0>)
    49e6:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    49e8:	2255      	movs	r2, #85	; 0x55
    49ea:	4b20      	ldr	r3, [pc, #128]	; (4a6c <sync+0xc4>)
    49ec:	54e2      	strb	r2, [r4, r3]
    49ee:	3255      	adds	r2, #85	; 0x55
    49f0:	4b1f      	ldr	r3, [pc, #124]	; (4a70 <sync+0xc8>)
    49f2:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    49f4:	3bde      	subs	r3, #222	; 0xde
    49f6:	3bff      	subs	r3, #255	; 0xff
    49f8:	3a7a      	subs	r2, #122	; 0x7a
    49fa:	54a3      	strb	r3, [r4, r2]
    49fc:	3201      	adds	r2, #1
    49fe:	54a3      	strb	r3, [r4, r2]
    4a00:	330f      	adds	r3, #15
    4a02:	3201      	adds	r2, #1
    4a04:	54a3      	strb	r3, [r4, r2]
    4a06:	320f      	adds	r2, #15
    4a08:	2133      	movs	r1, #51	; 0x33
    4a0a:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4a0c:	313f      	adds	r1, #63	; 0x3f
    4a0e:	2085      	movs	r0, #133	; 0x85
    4a10:	0080      	lsls	r0, r0, #2
    4a12:	5421      	strb	r1, [r4, r0]
    4a14:	4817      	ldr	r0, [pc, #92]	; (4a74 <sync+0xcc>)
    4a16:	5421      	strb	r1, [r4, r0]
    4a18:	4917      	ldr	r1, [pc, #92]	; (4a78 <sync+0xd0>)
    4a1a:	5462      	strb	r2, [r4, r1]
    4a1c:	4a17      	ldr	r2, [pc, #92]	; (4a7c <sync+0xd4>)
    4a1e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4a20:	6923      	ldr	r3, [r4, #16]
    4a22:	3201      	adds	r2, #1
    4a24:	54a3      	strb	r3, [r4, r2]
    4a26:	0a19      	lsrs	r1, r3, #8
    4a28:	4a15      	ldr	r2, [pc, #84]	; (4a80 <sync+0xd8>)
    4a2a:	54a1      	strb	r1, [r4, r2]
    4a2c:	0c19      	lsrs	r1, r3, #16
    4a2e:	4a15      	ldr	r2, [pc, #84]	; (4a84 <sync+0xdc>)
    4a30:	54a1      	strb	r1, [r4, r2]
    4a32:	0e1b      	lsrs	r3, r3, #24
    4a34:	4a14      	ldr	r2, [pc, #80]	; (4a88 <sync+0xe0>)
    4a36:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4a38:	68e3      	ldr	r3, [r4, #12]
    4a3a:	3201      	adds	r2, #1
    4a3c:	54a3      	strb	r3, [r4, r2]
    4a3e:	0a19      	lsrs	r1, r3, #8
    4a40:	4a12      	ldr	r2, [pc, #72]	; (4a8c <sync+0xe4>)
    4a42:	54a1      	strb	r1, [r4, r2]
    4a44:	0c19      	lsrs	r1, r3, #16
    4a46:	4a12      	ldr	r2, [pc, #72]	; (4a90 <sync+0xe8>)
    4a48:	54a1      	strb	r1, [r4, r2]
    4a4a:	0e1b      	lsrs	r3, r3, #24
    4a4c:	4a11      	ldr	r2, [pc, #68]	; (4a94 <sync+0xec>)
    4a4e:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4a50:	7860      	ldrb	r0, [r4, #1]
    4a52:	2301      	movs	r3, #1
    4a54:	6962      	ldr	r2, [r4, #20]
    4a56:	0029      	movs	r1, r5
    4a58:	4d0f      	ldr	r5, [pc, #60]	; (4a98 <sync+0xf0>)
    4a5a:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4a5c:	7166      	strb	r6, [r4, #5]
    4a5e:	e7ad      	b.n	49bc <sync+0x14>
    4a60:	00003f51 	.word	0x00003f51
    4a64:	000039b5 	.word	0x000039b5
    4a68:	00003a85 	.word	0x00003a85
    4a6c:	0000022e 	.word	0x0000022e
    4a70:	0000022f 	.word	0x0000022f
    4a74:	00000215 	.word	0x00000215
    4a78:	00000216 	.word	0x00000216
    4a7c:	00000217 	.word	0x00000217
    4a80:	00000219 	.word	0x00000219
    4a84:	0000021a 	.word	0x0000021a
    4a88:	0000021b 	.word	0x0000021b
    4a8c:	0000021d 	.word	0x0000021d
    4a90:	0000021e 	.word	0x0000021e
    4a94:	0000021f 	.word	0x0000021f
    4a98:	00003931 	.word	0x00003931

00004a9c <follow_path>:
{
    4a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9e:	46de      	mov	lr, fp
    4aa0:	4657      	mov	r7, sl
    4aa2:	464e      	mov	r6, r9
    4aa4:	4645      	mov	r5, r8
    4aa6:	b5e0      	push	{r5, r6, r7, lr}
    4aa8:	b083      	sub	sp, #12
    4aaa:	4682      	mov	sl, r0
    4aac:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4aae:	780b      	ldrb	r3, [r1, #0]
    4ab0:	2b2f      	cmp	r3, #47	; 0x2f
    4ab2:	d00f      	beq.n	4ad4 <follow_path+0x38>
    4ab4:	2b5c      	cmp	r3, #92	; 0x5c
    4ab6:	d00d      	beq.n	4ad4 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4ab8:	2300      	movs	r3, #0
    4aba:	4652      	mov	r2, sl
    4abc:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4abe:	782b      	ldrb	r3, [r5, #0]
    4ac0:	4657      	mov	r7, sl
    4ac2:	2b1f      	cmp	r3, #31
    4ac4:	d809      	bhi.n	4ada <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4ac6:	2100      	movs	r1, #0
    4ac8:	4650      	mov	r0, sl
    4aca:	4bb2      	ldr	r3, [pc, #712]	; (4d94 <follow_path+0x2f8>)
    4acc:	4798      	blx	r3
		dj->dir = 0;
    4ace:	2300      	movs	r3, #0
    4ad0:	617b      	str	r3, [r7, #20]
    4ad2:	e13a      	b.n	4d4a <follow_path+0x2ae>
		path++;
    4ad4:	3501      	adds	r5, #1
    4ad6:	e7ef      	b.n	4ab8 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4ad8:	3501      	adds	r5, #1
    4ada:	7828      	ldrb	r0, [r5, #0]
    4adc:	282f      	cmp	r0, #47	; 0x2f
    4ade:	d0fb      	beq.n	4ad8 <follow_path+0x3c>
    4ae0:	285c      	cmp	r0, #92	; 0x5c
    4ae2:	d0f9      	beq.n	4ad8 <follow_path+0x3c>
	lfn = dj->lfn;
    4ae4:	69fb      	ldr	r3, [r7, #28]
    4ae6:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4ae8:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4aea:	281f      	cmp	r0, #31
    4aec:	d800      	bhi.n	4af0 <follow_path+0x54>
    4aee:	e13b      	b.n	4d68 <follow_path+0x2cc>
    4af0:	282f      	cmp	r0, #47	; 0x2f
    4af2:	d100      	bne.n	4af6 <follow_path+0x5a>
    4af4:	e13b      	b.n	4d6e <follow_path+0x2d2>
    4af6:	285c      	cmp	r0, #92	; 0x5c
    4af8:	d100      	bne.n	4afc <follow_path+0x60>
    4afa:	e13b      	b.n	4d74 <follow_path+0x2d8>
    4afc:	1c6e      	adds	r6, r5, #1
    4afe:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4b00:	2380      	movs	r3, #128	; 0x80
    4b02:	005b      	lsls	r3, r3, #1
    4b04:	4698      	mov	r8, r3
    4b06:	46bb      	mov	fp, r7
    4b08:	002b      	movs	r3, r5
    4b0a:	0025      	movs	r5, r4
    4b0c:	0034      	movs	r4, r6
    4b0e:	4656      	mov	r6, sl
    4b10:	4699      	mov	r9, r3
    4b12:	e011      	b.n	4b38 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4b14:	2b00      	cmp	r3, #0
    4b16:	d135      	bne.n	4b84 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4b18:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4b1a:	1c6b      	adds	r3, r5, #1
    4b1c:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4b1e:	281f      	cmp	r0, #31
    4b20:	d91e      	bls.n	4b60 <follow_path+0xc4>
    4b22:	282f      	cmp	r0, #47	; 0x2f
    4b24:	d100      	bne.n	4b28 <follow_path+0x8c>
    4b26:	e128      	b.n	4d7a <follow_path+0x2de>
    4b28:	285c      	cmp	r0, #92	; 0x5c
    4b2a:	d100      	bne.n	4b2e <follow_path+0x92>
    4b2c:	e142      	b.n	4db4 <follow_path+0x318>
    4b2e:	3602      	adds	r6, #2
    4b30:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4b32:	4543      	cmp	r3, r8
    4b34:	d026      	beq.n	4b84 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4b36:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4b38:	2101      	movs	r1, #1
    4b3a:	4b97      	ldr	r3, [pc, #604]	; (4d98 <follow_path+0x2fc>)
    4b3c:	4798      	blx	r3
    4b3e:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4b40:	d020      	beq.n	4b84 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4b42:	287f      	cmp	r0, #127	; 0x7f
    4b44:	d8e8      	bhi.n	4b18 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4b46:	2822      	cmp	r0, #34	; 0x22
    4b48:	d100      	bne.n	4b4c <follow_path+0xb0>
    4b4a:	e0fd      	b.n	4d48 <follow_path+0x2ac>
    4b4c:	232a      	movs	r3, #42	; 0x2a
    4b4e:	4a93      	ldr	r2, [pc, #588]	; (4d9c <follow_path+0x300>)
    4b50:	b29f      	uxth	r7, r3
    4b52:	428f      	cmp	r7, r1
    4b54:	d0de      	beq.n	4b14 <follow_path+0x78>
    4b56:	3201      	adds	r2, #1
    4b58:	7813      	ldrb	r3, [r2, #0]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	d1f8      	bne.n	4b50 <follow_path+0xb4>
    4b5e:	e7db      	b.n	4b18 <follow_path+0x7c>
    4b60:	002c      	movs	r4, r5
    4b62:	465f      	mov	r7, fp
    4b64:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4b66:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4b68:	2604      	movs	r6, #4
    4b6a:	e10b      	b.n	4d84 <follow_path+0x2e8>
		di--;
    4b6c:	3c01      	subs	r4, #1
    4b6e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4b70:	2c00      	cmp	r4, #0
    4b72:	d100      	bne.n	4b76 <follow_path+0xda>
    4b74:	e0e8      	b.n	4d48 <follow_path+0x2ac>
		w = lfn[di-1];
    4b76:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4b78:	2a20      	cmp	r2, #32
    4b7a:	d0f7      	beq.n	4b6c <follow_path+0xd0>
    4b7c:	2a2e      	cmp	r2, #46	; 0x2e
    4b7e:	d0f5      	beq.n	4b6c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4b80:	2c00      	cmp	r4, #0
    4b82:	d101      	bne.n	4b88 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4b84:	2006      	movs	r0, #6
	return res;
    4b86:	e0e0      	b.n	4d4a <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4b88:	0063      	lsls	r3, r4, #1
    4b8a:	4698      	mov	r8, r3
    4b8c:	2300      	movs	r3, #0
    4b8e:	4652      	mov	r2, sl
    4b90:	4641      	mov	r1, r8
    4b92:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4b94:	220b      	movs	r2, #11
    4b96:	2120      	movs	r1, #32
    4b98:	69b8      	ldr	r0, [r7, #24]
    4b9a:	4b81      	ldr	r3, [pc, #516]	; (4da0 <follow_path+0x304>)
    4b9c:	4798      	blx	r3
    4b9e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4ba0:	2300      	movs	r3, #0
    4ba2:	e001      	b.n	4ba8 <follow_path+0x10c>
    4ba4:	3301      	adds	r3, #1
    4ba6:	3202      	adds	r2, #2
    4ba8:	8811      	ldrh	r1, [r2, #0]
    4baa:	2920      	cmp	r1, #32
    4bac:	d0fa      	beq.n	4ba4 <follow_path+0x108>
    4bae:	292e      	cmp	r1, #46	; 0x2e
    4bb0:	d0f8      	beq.n	4ba4 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d001      	beq.n	4bba <follow_path+0x11e>
    4bb6:	2203      	movs	r2, #3
    4bb8:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4bba:	4652      	mov	r2, sl
    4bbc:	4442      	add	r2, r8
    4bbe:	3a02      	subs	r2, #2
    4bc0:	8812      	ldrh	r2, [r2, #0]
    4bc2:	2a2e      	cmp	r2, #46	; 0x2e
    4bc4:	d009      	beq.n	4bda <follow_path+0x13e>
    4bc6:	4642      	mov	r2, r8
    4bc8:	3a04      	subs	r2, #4
    4bca:	4452      	add	r2, sl
    4bcc:	3c01      	subs	r4, #1
    4bce:	2c00      	cmp	r4, #0
    4bd0:	d003      	beq.n	4bda <follow_path+0x13e>
    4bd2:	3a02      	subs	r2, #2
    4bd4:	8851      	ldrh	r1, [r2, #2]
    4bd6:	292e      	cmp	r1, #46	; 0x2e
    4bd8:	d1f8      	bne.n	4bcc <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4bda:	2208      	movs	r2, #8
    4bdc:	9201      	str	r2, [sp, #4]
    4bde:	2200      	movs	r2, #0
    4be0:	4693      	mov	fp, r2
    4be2:	4691      	mov	r9, r2
    4be4:	46a0      	mov	r8, r4
    4be6:	e006      	b.n	4bf6 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4be8:	4544      	cmp	r4, r8
    4bea:	d100      	bne.n	4bee <follow_path+0x152>
    4bec:	e0e6      	b.n	4dbc <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4bee:	2303      	movs	r3, #3
    4bf0:	431e      	orrs	r6, r3
    4bf2:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4bf4:	0023      	movs	r3, r4
    4bf6:	1c5c      	adds	r4, r3, #1
    4bf8:	005b      	lsls	r3, r3, #1
    4bfa:	4652      	mov	r2, sl
    4bfc:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4bfe:	2800      	cmp	r0, #0
    4c00:	d02c      	beq.n	4c5c <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4c02:	2820      	cmp	r0, #32
    4c04:	d0f3      	beq.n	4bee <follow_path+0x152>
    4c06:	282e      	cmp	r0, #46	; 0x2e
    4c08:	d0ee      	beq.n	4be8 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4c0a:	9b01      	ldr	r3, [sp, #4]
    4c0c:	459b      	cmp	fp, r3
    4c0e:	d219      	bcs.n	4c44 <follow_path+0x1a8>
    4c10:	4544      	cmp	r4, r8
    4c12:	d100      	bne.n	4c16 <follow_path+0x17a>
    4c14:	e0d2      	b.n	4dbc <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4c16:	287f      	cmp	r0, #127	; 0x7f
    4c18:	d85e      	bhi.n	4cd8 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4c1a:	282b      	cmp	r0, #43	; 0x2b
    4c1c:	d06e      	beq.n	4cfc <follow_path+0x260>
    4c1e:	232c      	movs	r3, #44	; 0x2c
    4c20:	4a60      	ldr	r2, [pc, #384]	; (4da4 <follow_path+0x308>)
    4c22:	b299      	uxth	r1, r3
    4c24:	4281      	cmp	r1, r0
    4c26:	d067      	beq.n	4cf8 <follow_path+0x25c>
    4c28:	3201      	adds	r2, #1
    4c2a:	7813      	ldrb	r3, [r2, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d1f8      	bne.n	4c22 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4c30:	0003      	movs	r3, r0
    4c32:	3b41      	subs	r3, #65	; 0x41
    4c34:	b29b      	uxth	r3, r3
    4c36:	2b19      	cmp	r3, #25
    4c38:	d86c      	bhi.n	4d14 <follow_path+0x278>
					b |= 2;
    4c3a:	2302      	movs	r3, #2
    4c3c:	464a      	mov	r2, r9
    4c3e:	431a      	orrs	r2, r3
    4c40:	4691      	mov	r9, r2
    4c42:	e05f      	b.n	4d04 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    4c44:	9b01      	ldr	r3, [sp, #4]
    4c46:	2b0b      	cmp	r3, #11
    4c48:	d03b      	beq.n	4cc2 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4c4a:	4544      	cmp	r4, r8
    4c4c:	d100      	bne.n	4c50 <follow_path+0x1b4>
    4c4e:	e0b9      	b.n	4dc4 <follow_path+0x328>
    4c50:	2303      	movs	r3, #3
    4c52:	431e      	orrs	r6, r3
    4c54:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4c56:	4544      	cmp	r4, r8
    4c58:	d800      	bhi.n	4c5c <follow_path+0x1c0>
    4c5a:	e0b3      	b.n	4dc4 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4c5c:	69bb      	ldr	r3, [r7, #24]
    4c5e:	781a      	ldrb	r2, [r3, #0]
    4c60:	2ae5      	cmp	r2, #229	; 0xe5
    4c62:	d036      	beq.n	4cd2 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4c64:	9b01      	ldr	r3, [sp, #4]
    4c66:	2b08      	cmp	r3, #8
    4c68:	d060      	beq.n	4d2c <follow_path+0x290>
    4c6a:	230c      	movs	r3, #12
    4c6c:	464a      	mov	r2, r9
    4c6e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4c70:	2b0c      	cmp	r3, #12
    4c72:	d060      	beq.n	4d36 <follow_path+0x29a>
    4c74:	43d2      	mvns	r2, r2
    4c76:	0792      	lsls	r2, r2, #30
    4c78:	d05d      	beq.n	4d36 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4c7a:	07b2      	lsls	r2, r6, #30
    4c7c:	d406      	bmi.n	4c8c <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4c7e:	2203      	movs	r2, #3
    4c80:	4649      	mov	r1, r9
    4c82:	400a      	ands	r2, r1
    4c84:	2a01      	cmp	r2, #1
    4c86:	d059      	beq.n	4d3c <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4c88:	2b04      	cmp	r3, #4
    4c8a:	d05a      	beq.n	4d42 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4c8c:	69bb      	ldr	r3, [r7, #24]
    4c8e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4c90:	0038      	movs	r0, r7
    4c92:	4b45      	ldr	r3, [pc, #276]	; (4da8 <follow_path+0x30c>)
    4c94:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4c96:	69bb      	ldr	r3, [r7, #24]
    4c98:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4c9a:	2800      	cmp	r0, #0
    4c9c:	d15c      	bne.n	4d58 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4c9e:	075b      	lsls	r3, r3, #29
    4ca0:	d453      	bmi.n	4d4a <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4ca2:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4ca4:	7ad3      	ldrb	r3, [r2, #11]
    4ca6:	06db      	lsls	r3, r3, #27
    4ca8:	d55c      	bpl.n	4d64 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4caa:	7d51      	ldrb	r1, [r2, #21]
    4cac:	0209      	lsls	r1, r1, #8
    4cae:	7d13      	ldrb	r3, [r2, #20]
    4cb0:	430b      	orrs	r3, r1
    4cb2:	041b      	lsls	r3, r3, #16
    4cb4:	7ed1      	ldrb	r1, [r2, #27]
    4cb6:	0209      	lsls	r1, r1, #8
    4cb8:	7e92      	ldrb	r2, [r2, #26]
    4cba:	430a      	orrs	r2, r1
    4cbc:	4313      	orrs	r3, r2
    4cbe:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4cc0:	e70b      	b.n	4ada <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4cc2:	2303      	movs	r3, #3
    4cc4:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4cc6:	69bb      	ldr	r3, [r7, #24]
    4cc8:	781a      	ldrb	r2, [r3, #0]
    4cca:	2ae5      	cmp	r2, #229	; 0xe5
    4ccc:	d1cd      	bne.n	4c6a <follow_path+0x1ce>
    4cce:	220b      	movs	r2, #11
    4cd0:	9201      	str	r2, [sp, #4]
    4cd2:	2205      	movs	r2, #5
    4cd4:	701a      	strb	r2, [r3, #0]
    4cd6:	e7c5      	b.n	4c64 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4cd8:	2100      	movs	r1, #0
    4cda:	4b2f      	ldr	r3, [pc, #188]	; (4d98 <follow_path+0x2fc>)
    4cdc:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4cde:	2800      	cmp	r0, #0
    4ce0:	d100      	bne.n	4ce4 <follow_path+0x248>
    4ce2:	e079      	b.n	4dd8 <follow_path+0x33c>
    4ce4:	4b31      	ldr	r3, [pc, #196]	; (4dac <follow_path+0x310>)
    4ce6:	469c      	mov	ip, r3
    4ce8:	4460      	add	r0, ip
    4cea:	3880      	subs	r0, #128	; 0x80
    4cec:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4cee:	2302      	movs	r3, #2
    4cf0:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d002      	beq.n	4cfc <follow_path+0x260>
    4cf6:	e790      	b.n	4c1a <follow_path+0x17e>
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d099      	beq.n	4c30 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4cfc:	2303      	movs	r3, #3
    4cfe:	431e      	orrs	r6, r3
    4d00:	b2f6      	uxtb	r6, r6
    4d02:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4d04:	69bb      	ldr	r3, [r7, #24]
    4d06:	465a      	mov	r2, fp
    4d08:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4d0a:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4d0c:	2201      	movs	r2, #1
    4d0e:	4694      	mov	ip, r2
    4d10:	44e3      	add	fp, ip
    4d12:	e770      	b.n	4bf6 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4d14:	0003      	movs	r3, r0
    4d16:	3b61      	subs	r3, #97	; 0x61
    4d18:	b29b      	uxth	r3, r3
    4d1a:	2b19      	cmp	r3, #25
    4d1c:	d8f2      	bhi.n	4d04 <follow_path+0x268>
						b |= 1; w -= 0x20;
    4d1e:	2301      	movs	r3, #1
    4d20:	464a      	mov	r2, r9
    4d22:	431a      	orrs	r2, r3
    4d24:	4691      	mov	r9, r2
    4d26:	3820      	subs	r0, #32
    4d28:	b280      	uxth	r0, r0
    4d2a:	e7eb      	b.n	4d04 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4d2c:	464b      	mov	r3, r9
    4d2e:	009b      	lsls	r3, r3, #2
    4d30:	b2db      	uxtb	r3, r3
    4d32:	4699      	mov	r9, r3
    4d34:	e799      	b.n	4c6a <follow_path+0x1ce>
		cf |= NS_LFN;
    4d36:	2202      	movs	r2, #2
    4d38:	4316      	orrs	r6, r2
    4d3a:	e79e      	b.n	4c7a <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4d3c:	320f      	adds	r2, #15
    4d3e:	4316      	orrs	r6, r2
    4d40:	e7a2      	b.n	4c88 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4d42:	3304      	adds	r3, #4
    4d44:	431e      	orrs	r6, r3
    4d46:	e7a1      	b.n	4c8c <follow_path+0x1f0>
    4d48:	2006      	movs	r0, #6
}
    4d4a:	b003      	add	sp, #12
    4d4c:	bc3c      	pop	{r2, r3, r4, r5}
    4d4e:	4690      	mov	r8, r2
    4d50:	4699      	mov	r9, r3
    4d52:	46a2      	mov	sl, r4
    4d54:	46ab      	mov	fp, r5
    4d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4d58:	2804      	cmp	r0, #4
    4d5a:	d1f6      	bne.n	4d4a <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4d5c:	075b      	lsls	r3, r3, #29
    4d5e:	d4f4      	bmi.n	4d4a <follow_path+0x2ae>
    4d60:	3001      	adds	r0, #1
    4d62:	e7f2      	b.n	4d4a <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4d64:	2005      	movs	r0, #5
    4d66:	e7f0      	b.n	4d4a <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4d68:	2301      	movs	r3, #1
	si = di = 0;
    4d6a:	2400      	movs	r4, #0
    4d6c:	e6fb      	b.n	4b66 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4d6e:	2301      	movs	r3, #1
	si = di = 0;
    4d70:	2400      	movs	r4, #0
    4d72:	e005      	b.n	4d80 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4d74:	2301      	movs	r3, #1
	si = di = 0;
    4d76:	2400      	movs	r4, #0
    4d78:	e002      	b.n	4d80 <follow_path+0x2e4>
    4d7a:	002c      	movs	r4, r5
    4d7c:	465f      	mov	r7, fp
    4d7e:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4d80:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4d82:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4d84:	2c00      	cmp	r4, #0
    4d86:	d0df      	beq.n	4d48 <follow_path+0x2ac>
    4d88:	4b09      	ldr	r3, [pc, #36]	; (4db0 <follow_path+0x314>)
    4d8a:	18e3      	adds	r3, r4, r3
    4d8c:	005b      	lsls	r3, r3, #1
    4d8e:	4453      	add	r3, sl
    4d90:	e6f1      	b.n	4b76 <follow_path+0xda>
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	000040ed 	.word	0x000040ed
    4d98:	00005481 	.word	0x00005481
    4d9c:	00006f55 	.word	0x00006f55
    4da0:	00003a85 	.word	0x00003a85
    4da4:	00006f61 	.word	0x00006f61
    4da8:	0000452d 	.word	0x0000452d
    4dac:	00006ed4 	.word	0x00006ed4
    4db0:	7fffffff 	.word	0x7fffffff
    4db4:	002c      	movs	r4, r5
    4db6:	465f      	mov	r7, fp
    4db8:	464d      	mov	r5, r9
    4dba:	e7e1      	b.n	4d80 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4dbc:	9b01      	ldr	r3, [sp, #4]
    4dbe:	2b0b      	cmp	r3, #11
    4dc0:	d100      	bne.n	4dc4 <follow_path+0x328>
    4dc2:	e77e      	b.n	4cc2 <follow_path+0x226>
			b <<= 2; continue;
    4dc4:	464b      	mov	r3, r9
    4dc6:	009b      	lsls	r3, r3, #2
    4dc8:	b2db      	uxtb	r3, r3
    4dca:	4699      	mov	r9, r3
    4dcc:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4dce:	220b      	movs	r2, #11
    4dd0:	9201      	str	r2, [sp, #4]
    4dd2:	3a03      	subs	r2, #3
    4dd4:	4693      	mov	fp, r2
    4dd6:	e70e      	b.n	4bf6 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4dd8:	2302      	movs	r3, #2
    4dda:	431e      	orrs	r6, r3
    4ddc:	e78e      	b.n	4cfc <follow_path+0x260>
    4dde:	46c0      	nop			; (mov r8, r8)

00004de0 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4de0:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4de2:	2807      	cmp	r0, #7
    4de4:	d901      	bls.n	4dea <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4de6:	0018      	movs	r0, r3
    4de8:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4dea:	0083      	lsls	r3, r0, #2
    4dec:	4a07      	ldr	r2, [pc, #28]	; (4e0c <f_mount+0x2c>)
    4dee:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4df0:	2b00      	cmp	r3, #0
    4df2:	d001      	beq.n	4df8 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4df4:	2200      	movs	r2, #0
    4df6:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4df8:	2900      	cmp	r1, #0
    4dfa:	d001      	beq.n	4e00 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4dfc:	2300      	movs	r3, #0
    4dfe:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4e00:	0080      	lsls	r0, r0, #2
    4e02:	4b02      	ldr	r3, [pc, #8]	; (4e0c <f_mount+0x2c>)
    4e04:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4e06:	2300      	movs	r3, #0
    4e08:	e7ed      	b.n	4de6 <f_mount+0x6>
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	20000158 	.word	0x20000158

00004e10 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e12:	46c6      	mov	lr, r8
    4e14:	b500      	push	{lr}
    4e16:	4c59      	ldr	r4, [pc, #356]	; (4f7c <f_open+0x16c>)
    4e18:	44a5      	add	sp, r4
    4e1a:	0005      	movs	r5, r0
    4e1c:	9101      	str	r1, [sp, #4]
    4e1e:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4e20:	2300      	movs	r3, #0
    4e22:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4e24:	261f      	movs	r6, #31
    4e26:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4e28:	221e      	movs	r2, #30
    4e2a:	403a      	ands	r2, r7
    4e2c:	a985      	add	r1, sp, #532	; 0x214
    4e2e:	a801      	add	r0, sp, #4
    4e30:	4b53      	ldr	r3, [pc, #332]	; (4f80 <f_open+0x170>)
    4e32:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4e34:	ab82      	add	r3, sp, #520	; 0x208
    4e36:	938b      	str	r3, [sp, #556]	; 0x22c
    4e38:	ab02      	add	r3, sp, #8
    4e3a:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d006      	beq.n	4e4e <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4e40:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4e42:	231c      	movs	r3, #28
    4e44:	423b      	tst	r3, r7
    4e46:	d145      	bne.n	4ed4 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4e48:	2800      	cmp	r0, #0
    4e4a:	d13d      	bne.n	4ec8 <f_open+0xb8>
    4e4c:	e00c      	b.n	4e68 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4e4e:	9901      	ldr	r1, [sp, #4]
    4e50:	a885      	add	r0, sp, #532	; 0x214
    4e52:	4b4c      	ldr	r3, [pc, #304]	; (4f84 <f_open+0x174>)
    4e54:	4798      	blx	r3
	dir = dj.dir;
    4e56:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4e58:	2800      	cmp	r0, #0
    4e5a:	d1f2      	bne.n	4e42 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4e5c:	2c00      	cmp	r4, #0
    4e5e:	d100      	bne.n	4e62 <f_open+0x52>
    4e60:	e086      	b.n	4f70 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4e62:	231c      	movs	r3, #28
    4e64:	423b      	tst	r3, r7
    4e66:	d146      	bne.n	4ef6 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4e68:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4e6a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4e6c:	06da      	lsls	r2, r3, #27
    4e6e:	d42b      	bmi.n	4ec8 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e70:	07ba      	lsls	r2, r7, #30
    4e72:	d502      	bpl.n	4e7a <f_open+0x6a>
					res = FR_DENIED;
    4e74:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e76:	07db      	lsls	r3, r3, #31
    4e78:	d426      	bmi.n	4ec8 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4e7a:	073b      	lsls	r3, r7, #28
    4e7c:	d501      	bpl.n	4e82 <f_open+0x72>
			mode |= FA__WRITTEN;
    4e7e:	2320      	movs	r3, #32
    4e80:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4e82:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e86:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4e88:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4e8a:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4e8c:	7d62      	ldrb	r2, [r4, #21]
    4e8e:	0212      	lsls	r2, r2, #8
    4e90:	7d23      	ldrb	r3, [r4, #20]
    4e92:	4313      	orrs	r3, r2
    4e94:	041b      	lsls	r3, r3, #16
    4e96:	7ee1      	ldrb	r1, [r4, #27]
    4e98:	0209      	lsls	r1, r1, #8
    4e9a:	7ea2      	ldrb	r2, [r4, #26]
    4e9c:	430a      	orrs	r2, r1
    4e9e:	4313      	orrs	r3, r2
    4ea0:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4ea2:	7fe3      	ldrb	r3, [r4, #31]
    4ea4:	061b      	lsls	r3, r3, #24
    4ea6:	7fa2      	ldrb	r2, [r4, #30]
    4ea8:	0412      	lsls	r2, r2, #16
    4eaa:	4313      	orrs	r3, r2
    4eac:	7f22      	ldrb	r2, [r4, #28]
    4eae:	4313      	orrs	r3, r2
    4eb0:	7f62      	ldrb	r2, [r4, #29]
    4eb2:	0212      	lsls	r2, r2, #8
    4eb4:	4313      	orrs	r3, r2
    4eb6:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4eb8:	2300      	movs	r3, #0
    4eba:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4ebc:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4ebe:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4ec0:	602b      	str	r3, [r5, #0]
    4ec2:	88db      	ldrh	r3, [r3, #6]
    4ec4:	80ab      	strh	r3, [r5, #4]
    4ec6:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4ec8:	238e      	movs	r3, #142	; 0x8e
    4eca:	009b      	lsls	r3, r3, #2
    4ecc:	449d      	add	sp, r3
    4ece:	bc04      	pop	{r2}
    4ed0:	4690      	mov	r8, r2
    4ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4ed4:	2804      	cmp	r0, #4
    4ed6:	d005      	beq.n	4ee4 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4ed8:	2308      	movs	r3, #8
    4eda:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4edc:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4ede:	2800      	cmp	r0, #0
    4ee0:	d0d3      	beq.n	4e8a <f_open+0x7a>
    4ee2:	e7f1      	b.n	4ec8 <f_open+0xb8>
				res = dir_register(&dj);
    4ee4:	a885      	add	r0, sp, #532	; 0x214
    4ee6:	4b28      	ldr	r3, [pc, #160]	; (4f88 <f_open+0x178>)
    4ee8:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4eea:	2308      	movs	r3, #8
    4eec:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4eee:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d008      	beq.n	4f06 <f_open+0xf6>
    4ef4:	e7e8      	b.n	4ec8 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4ef6:	7ae3      	ldrb	r3, [r4, #11]
    4ef8:	2211      	movs	r2, #17
				res = FR_DENIED;
    4efa:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4efc:	421a      	tst	r2, r3
    4efe:	d1e3      	bne.n	4ec8 <f_open+0xb8>
					res = FR_EXIST;
    4f00:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4f02:	077b      	lsls	r3, r7, #29
    4f04:	d4e0      	bmi.n	4ec8 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4f06:	0733      	lsls	r3, r6, #28
    4f08:	d5bb      	bpl.n	4e82 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4f0a:	4b20      	ldr	r3, [pc, #128]	; (4f8c <f_open+0x17c>)
    4f0c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4f0e:	73a0      	strb	r0, [r4, #14]
    4f10:	0a03      	lsrs	r3, r0, #8
    4f12:	73e3      	strb	r3, [r4, #15]
    4f14:	0c03      	lsrs	r3, r0, #16
    4f16:	7423      	strb	r3, [r4, #16]
    4f18:	0e00      	lsrs	r0, r0, #24
    4f1a:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4f1c:	2300      	movs	r3, #0
    4f1e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4f20:	7723      	strb	r3, [r4, #28]
    4f22:	7763      	strb	r3, [r4, #29]
    4f24:	77a3      	strb	r3, [r4, #30]
    4f26:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4f28:	7d62      	ldrb	r2, [r4, #21]
    4f2a:	0212      	lsls	r2, r2, #8
    4f2c:	7d27      	ldrb	r7, [r4, #20]
    4f2e:	4317      	orrs	r7, r2
    4f30:	043f      	lsls	r7, r7, #16
    4f32:	7ee1      	ldrb	r1, [r4, #27]
    4f34:	0209      	lsls	r1, r1, #8
    4f36:	7ea2      	ldrb	r2, [r4, #26]
    4f38:	430a      	orrs	r2, r1
    4f3a:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4f3c:	76a3      	strb	r3, [r4, #26]
    4f3e:	76e3      	strb	r3, [r4, #27]
    4f40:	7523      	strb	r3, [r4, #20]
    4f42:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4f44:	9885      	ldr	r0, [sp, #532]	; 0x214
    4f46:	3301      	adds	r3, #1
    4f48:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4f4a:	2f00      	cmp	r7, #0
    4f4c:	d097      	beq.n	4e7e <f_open+0x6e>
				dw = dj.fs->winsect;
    4f4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4f50:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4f52:	0039      	movs	r1, r7
    4f54:	4b0e      	ldr	r3, [pc, #56]	; (4f90 <f_open+0x180>)
    4f56:	4798      	blx	r3
				if (res == FR_OK) {
    4f58:	2800      	cmp	r0, #0
    4f5a:	d1b5      	bne.n	4ec8 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4f5c:	9885      	ldr	r0, [sp, #532]	; 0x214
    4f5e:	3f01      	subs	r7, #1
    4f60:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4f62:	4641      	mov	r1, r8
    4f64:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <f_open+0x184>)
    4f66:	4798      	blx	r3
	if (res == FR_OK) {
    4f68:	2800      	cmp	r0, #0
    4f6a:	d100      	bne.n	4f6e <f_open+0x15e>
    4f6c:	e787      	b.n	4e7e <f_open+0x6e>
    4f6e:	e7ab      	b.n	4ec8 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f70:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4f72:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f74:	423b      	tst	r3, r7
    4f76:	d0b2      	beq.n	4ede <f_open+0xce>
			res = FR_INVALID_NAME;
    4f78:	2006      	movs	r0, #6
    4f7a:	e7ad      	b.n	4ed8 <f_open+0xc8>
    4f7c:	fffffdc8 	.word	0xfffffdc8
    4f80:	00003ba1 	.word	0x00003ba1
    4f84:	00004a9d 	.word	0x00004a9d
    4f88:	000046c5 	.word	0x000046c5
    4f8c:	00003a21 	.word	0x00003a21
    4f90:	00004391 	.word	0x00004391
    4f94:	00003f51 	.word	0x00003f51

00004f98 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9a:	46de      	mov	lr, fp
    4f9c:	4657      	mov	r7, sl
    4f9e:	464e      	mov	r6, r9
    4fa0:	4645      	mov	r5, r8
    4fa2:	b5e0      	push	{r5, r6, r7, lr}
    4fa4:	b083      	sub	sp, #12
    4fa6:	0004      	movs	r4, r0
    4fa8:	000f      	movs	r7, r1
    4faa:	0015      	movs	r5, r2
    4fac:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    4fae:	2300      	movs	r3, #0
    4fb0:	464a      	mov	r2, r9
    4fb2:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    4fb4:	8881      	ldrh	r1, [r0, #4]
    4fb6:	6800      	ldr	r0, [r0, #0]
    4fb8:	4b5e      	ldr	r3, [pc, #376]	; (5134 <f_read+0x19c>)
    4fba:	4798      	blx	r3
    4fbc:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4fbe:	2800      	cmp	r0, #0
    4fc0:	d000      	beq.n	4fc4 <f_read+0x2c>
    4fc2:	e0af      	b.n	5124 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4fc4:	79a3      	ldrb	r3, [r4, #6]
    4fc6:	b25a      	sxtb	r2, r3
    4fc8:	2a00      	cmp	r2, #0
    4fca:	da00      	bge.n	4fce <f_read+0x36>
    4fcc:	e0a8      	b.n	5120 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4fce:	07db      	lsls	r3, r3, #31
    4fd0:	d402      	bmi.n	4fd8 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4fd2:	2307      	movs	r3, #7
    4fd4:	9300      	str	r3, [sp, #0]
    4fd6:	e0a5      	b.n	5124 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    4fd8:	68e3      	ldr	r3, [r4, #12]
    4fda:	68a2      	ldr	r2, [r4, #8]
    4fdc:	1a9e      	subs	r6, r3, r2
    4fde:	42ae      	cmp	r6, r5
    4fe0:	d900      	bls.n	4fe4 <f_read+0x4c>
    4fe2:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    4fe4:	2e00      	cmp	r6, #0
    4fe6:	d153      	bne.n	5090 <f_read+0xf8>
    4fe8:	e09c      	b.n	5124 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    4fea:	6961      	ldr	r1, [r4, #20]
    4fec:	4b52      	ldr	r3, [pc, #328]	; (5138 <f_read+0x1a0>)
    4fee:	4798      	blx	r3
    4ff0:	e05c      	b.n	50ac <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4ff2:	79a2      	ldrb	r2, [r4, #6]
    4ff4:	2380      	movs	r3, #128	; 0x80
    4ff6:	425b      	negs	r3, r3
    4ff8:	4313      	orrs	r3, r2
    4ffa:	71a3      	strb	r3, [r4, #6]
    4ffc:	2302      	movs	r3, #2
    4ffe:	9300      	str	r3, [sp, #0]
    5000:	e090      	b.n	5124 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5002:	79a2      	ldrb	r2, [r4, #6]
    5004:	2380      	movs	r3, #128	; 0x80
    5006:	425b      	negs	r3, r3
    5008:	4313      	orrs	r3, r2
    500a:	71a3      	strb	r3, [r4, #6]
    500c:	2301      	movs	r3, #1
    500e:	9300      	str	r3, [sp, #0]
    5010:	e088      	b.n	5124 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5012:	79a2      	ldrb	r2, [r4, #6]
    5014:	2380      	movs	r3, #128	; 0x80
    5016:	425b      	negs	r3, r3
    5018:	4313      	orrs	r3, r2
    501a:	71a3      	strb	r3, [r4, #6]
    501c:	2302      	movs	r3, #2
    501e:	9300      	str	r3, [sp, #0]
    5020:	e080      	b.n	5124 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    5022:	79a2      	ldrb	r2, [r4, #6]
    5024:	2380      	movs	r3, #128	; 0x80
    5026:	425b      	negs	r3, r3
    5028:	4313      	orrs	r3, r2
    502a:	71a3      	strb	r3, [r4, #6]
    502c:	2301      	movs	r3, #1
    502e:	9300      	str	r3, [sp, #0]
    5030:	e078      	b.n	5124 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    5032:	3130      	adds	r1, #48	; 0x30
    5034:	0240      	lsls	r0, r0, #9
    5036:	1838      	adds	r0, r7, r0
    5038:	2280      	movs	r2, #128	; 0x80
    503a:	0092      	lsls	r2, r2, #2
    503c:	4b3f      	ldr	r3, [pc, #252]	; (513c <f_read+0x1a4>)
    503e:	4798      	blx	r3
    5040:	e063      	b.n	510a <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    5042:	4643      	mov	r3, r8
    5044:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    5046:	68a3      	ldr	r3, [r4, #8]
    5048:	05dd      	lsls	r5, r3, #23
    504a:	0ded      	lsrs	r5, r5, #23
    504c:	2380      	movs	r3, #128	; 0x80
    504e:	009b      	lsls	r3, r3, #2
    5050:	1b5d      	subs	r5, r3, r5
    5052:	42b5      	cmp	r5, r6
    5054:	d900      	bls.n	5058 <f_read+0xc0>
    5056:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    5058:	69a1      	ldr	r1, [r4, #24]
    505a:	6820      	ldr	r0, [r4, #0]
    505c:	4b38      	ldr	r3, [pc, #224]	; (5140 <f_read+0x1a8>)
    505e:	4798      	blx	r3
    5060:	2800      	cmp	r0, #0
    5062:	d155      	bne.n	5110 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    5064:	68a3      	ldr	r3, [r4, #8]
    5066:	05d9      	lsls	r1, r3, #23
    5068:	0dc9      	lsrs	r1, r1, #23
    506a:	3130      	adds	r1, #48	; 0x30
    506c:	6823      	ldr	r3, [r4, #0]
    506e:	469c      	mov	ip, r3
    5070:	4461      	add	r1, ip
    5072:	002a      	movs	r2, r5
    5074:	0038      	movs	r0, r7
    5076:	4b31      	ldr	r3, [pc, #196]	; (513c <f_read+0x1a4>)
    5078:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    507a:	197f      	adds	r7, r7, r5
    507c:	68a3      	ldr	r3, [r4, #8]
    507e:	195b      	adds	r3, r3, r5
    5080:	60a3      	str	r3, [r4, #8]
    5082:	464b      	mov	r3, r9
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	195b      	adds	r3, r3, r5
    5088:	464a      	mov	r2, r9
    508a:	6013      	str	r3, [r2, #0]
    508c:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    508e:	d049      	beq.n	5124 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    5090:	68a3      	ldr	r3, [r4, #8]
    5092:	05da      	lsls	r2, r3, #23
    5094:	d1d7      	bne.n	5046 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    5096:	6820      	ldr	r0, [r4, #0]
    5098:	7882      	ldrb	r2, [r0, #2]
    509a:	3a01      	subs	r2, #1
    509c:	0a5d      	lsrs	r5, r3, #9
    509e:	4015      	ands	r5, r2
    50a0:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    50a2:	2d00      	cmp	r5, #0
    50a4:	d107      	bne.n	50b6 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    50a6:	2b00      	cmp	r3, #0
    50a8:	d19f      	bne.n	4fea <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    50aa:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    50ac:	2801      	cmp	r0, #1
    50ae:	d9a0      	bls.n	4ff2 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    50b0:	1c43      	adds	r3, r0, #1
    50b2:	d0a6      	beq.n	5002 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    50b4:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    50b6:	6823      	ldr	r3, [r4, #0]
    50b8:	469a      	mov	sl, r3
    50ba:	6961      	ldr	r1, [r4, #20]
    50bc:	0018      	movs	r0, r3
    50be:	4b21      	ldr	r3, [pc, #132]	; (5144 <f_read+0x1ac>)
    50c0:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    50c2:	2800      	cmp	r0, #0
    50c4:	d0a5      	beq.n	5012 <f_read+0x7a>
			sect += csect;
    50c6:	4680      	mov	r8, r0
    50c8:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    50ca:	0a73      	lsrs	r3, r6, #9
    50cc:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    50ce:	d0b8      	beq.n	5042 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    50d0:	4653      	mov	r3, sl
    50d2:	789b      	ldrb	r3, [r3, #2]
    50d4:	465a      	mov	r2, fp
    50d6:	18aa      	adds	r2, r5, r2
    50d8:	429a      	cmp	r2, r3
    50da:	d901      	bls.n	50e0 <f_read+0x148>
					cc = fp->fs->csize - csect;
    50dc:	1b5b      	subs	r3, r3, r5
    50de:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    50e0:	465b      	mov	r3, fp
    50e2:	466a      	mov	r2, sp
    50e4:	71d3      	strb	r3, [r2, #7]
    50e6:	79d3      	ldrb	r3, [r2, #7]
    50e8:	4652      	mov	r2, sl
    50ea:	7850      	ldrb	r0, [r2, #1]
    50ec:	4642      	mov	r2, r8
    50ee:	0039      	movs	r1, r7
    50f0:	4d15      	ldr	r5, [pc, #84]	; (5148 <f_read+0x1b0>)
    50f2:	47a8      	blx	r5
    50f4:	2800      	cmp	r0, #0
    50f6:	d194      	bne.n	5022 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    50f8:	6821      	ldr	r1, [r4, #0]
    50fa:	790b      	ldrb	r3, [r1, #4]
    50fc:	2b00      	cmp	r3, #0
    50fe:	d004      	beq.n	510a <f_read+0x172>
    5100:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5102:	4642      	mov	r2, r8
    5104:	1a98      	subs	r0, r3, r2
    5106:	4583      	cmp	fp, r0
    5108:	d893      	bhi.n	5032 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    510a:	465b      	mov	r3, fp
    510c:	025d      	lsls	r5, r3, #9
				continue;
    510e:	e7b4      	b.n	507a <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    5110:	79a2      	ldrb	r2, [r4, #6]
    5112:	2380      	movs	r3, #128	; 0x80
    5114:	425b      	negs	r3, r3
    5116:	4313      	orrs	r3, r2
    5118:	71a3      	strb	r3, [r4, #6]
    511a:	2301      	movs	r3, #1
    511c:	9300      	str	r3, [sp, #0]
    511e:	e001      	b.n	5124 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5120:	2302      	movs	r3, #2
    5122:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    5124:	9800      	ldr	r0, [sp, #0]
    5126:	b003      	add	sp, #12
    5128:	bc3c      	pop	{r2, r3, r4, r5}
    512a:	4690      	mov	r8, r2
    512c:	4699      	mov	r9, r3
    512e:	46a2      	mov	sl, r4
    5130:	46ab      	mov	fp, r5
    5132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5134:	00003acd 	.word	0x00003acd
    5138:	00003ff1 	.word	0x00003ff1
    513c:	00003a71 	.word	0x00003a71
    5140:	00003f51 	.word	0x00003f51
    5144:	00003a97 	.word	0x00003a97
    5148:	000038ad 	.word	0x000038ad

0000514c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    514c:	b5f0      	push	{r4, r5, r6, r7, lr}
    514e:	46de      	mov	lr, fp
    5150:	4657      	mov	r7, sl
    5152:	464e      	mov	r6, r9
    5154:	4645      	mov	r5, r8
    5156:	b5e0      	push	{r5, r6, r7, lr}
    5158:	b083      	sub	sp, #12
    515a:	0004      	movs	r4, r0
    515c:	000d      	movs	r5, r1
    515e:	0016      	movs	r6, r2
    5160:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    5162:	2300      	movs	r3, #0
    5164:	464a      	mov	r2, r9
    5166:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5168:	8881      	ldrh	r1, [r0, #4]
    516a:	6800      	ldr	r0, [r0, #0]
    516c:	4b7f      	ldr	r3, [pc, #508]	; (536c <f_write+0x220>)
    516e:	4798      	blx	r3
    5170:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5172:	2800      	cmp	r0, #0
    5174:	d000      	beq.n	5178 <f_write+0x2c>
    5176:	e0f1      	b.n	535c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5178:	79a3      	ldrb	r3, [r4, #6]
    517a:	b25a      	sxtb	r2, r3
    517c:	2a00      	cmp	r2, #0
    517e:	da00      	bge.n	5182 <f_write+0x36>
    5180:	e0ea      	b.n	5358 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    5182:	079b      	lsls	r3, r3, #30
    5184:	d402      	bmi.n	518c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    5186:	2307      	movs	r3, #7
    5188:	9300      	str	r3, [sp, #0]
    518a:	e0e7      	b.n	535c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    518c:	68e3      	ldr	r3, [r4, #12]
    518e:	199a      	adds	r2, r3, r6
    5190:	4293      	cmp	r3, r2
    5192:	d810      	bhi.n	51b6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    5194:	2e00      	cmp	r6, #0
    5196:	d00e      	beq.n	51b6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5198:	002f      	movs	r7, r5
    519a:	e07b      	b.n	5294 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    519c:	2100      	movs	r1, #0
    519e:	4b74      	ldr	r3, [pc, #464]	; (5370 <f_write+0x224>)
    51a0:	4798      	blx	r3
    51a2:	0003      	movs	r3, r0
    51a4:	6120      	str	r0, [r4, #16]
    51a6:	e003      	b.n	51b0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    51a8:	6961      	ldr	r1, [r4, #20]
    51aa:	4b71      	ldr	r3, [pc, #452]	; (5370 <f_write+0x224>)
    51ac:	4798      	blx	r3
    51ae:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    51b0:	2b00      	cmp	r3, #0
    51b2:	d000      	beq.n	51b6 <f_write+0x6a>
    51b4:	e080      	b.n	52b8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    51b6:	68a3      	ldr	r3, [r4, #8]
    51b8:	68e2      	ldr	r2, [r4, #12]
    51ba:	4293      	cmp	r3, r2
    51bc:	d900      	bls.n	51c0 <f_write+0x74>
    51be:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    51c0:	79a3      	ldrb	r3, [r4, #6]
    51c2:	2220      	movs	r2, #32
    51c4:	4313      	orrs	r3, r2
    51c6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    51c8:	e0c8      	b.n	535c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    51ca:	79a2      	ldrb	r2, [r4, #6]
    51cc:	3b81      	subs	r3, #129	; 0x81
    51ce:	4313      	orrs	r3, r2
    51d0:	71a3      	strb	r3, [r4, #6]
    51d2:	2302      	movs	r3, #2
    51d4:	9300      	str	r3, [sp, #0]
    51d6:	e0c1      	b.n	535c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    51d8:	79a2      	ldrb	r2, [r4, #6]
    51da:	3b7f      	subs	r3, #127	; 0x7f
    51dc:	4313      	orrs	r3, r2
    51de:	71a3      	strb	r3, [r4, #6]
    51e0:	2301      	movs	r3, #1
    51e2:	9300      	str	r3, [sp, #0]
    51e4:	e0ba      	b.n	535c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    51e6:	2100      	movs	r1, #0
    51e8:	4b62      	ldr	r3, [pc, #392]	; (5374 <f_write+0x228>)
    51ea:	4798      	blx	r3
    51ec:	2800      	cmp	r0, #0
    51ee:	d06d      	beq.n	52cc <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    51f0:	79a2      	ldrb	r2, [r4, #6]
    51f2:	2380      	movs	r3, #128	; 0x80
    51f4:	425b      	negs	r3, r3
    51f6:	4313      	orrs	r3, r2
    51f8:	71a3      	strb	r3, [r4, #6]
    51fa:	2301      	movs	r3, #1
    51fc:	9300      	str	r3, [sp, #0]
    51fe:	e0ad      	b.n	535c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5200:	79a2      	ldrb	r2, [r4, #6]
    5202:	2380      	movs	r3, #128	; 0x80
    5204:	425b      	negs	r3, r3
    5206:	4313      	orrs	r3, r2
    5208:	71a3      	strb	r3, [r4, #6]
    520a:	2302      	movs	r3, #2
    520c:	9300      	str	r3, [sp, #0]
    520e:	e0a5      	b.n	535c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5210:	79a2      	ldrb	r2, [r4, #6]
    5212:	2380      	movs	r3, #128	; 0x80
    5214:	425b      	negs	r3, r3
    5216:	4313      	orrs	r3, r2
    5218:	71a3      	strb	r3, [r4, #6]
    521a:	2301      	movs	r3, #1
    521c:	9300      	str	r3, [sp, #0]
    521e:	e09d      	b.n	535c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5220:	0240      	lsls	r0, r0, #9
    5222:	1839      	adds	r1, r7, r0
    5224:	3330      	adds	r3, #48	; 0x30
    5226:	0018      	movs	r0, r3
    5228:	2280      	movs	r2, #128	; 0x80
    522a:	0092      	lsls	r2, r2, #2
    522c:	4b52      	ldr	r3, [pc, #328]	; (5378 <f_write+0x22c>)
    522e:	4798      	blx	r3
					fp->fs->wflag = 0;
    5230:	2300      	movs	r3, #0
    5232:	6822      	ldr	r2, [r4, #0]
    5234:	7113      	strb	r3, [r2, #4]
    5236:	e072      	b.n	531e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5238:	68a3      	ldr	r3, [r4, #8]
    523a:	68e2      	ldr	r2, [r4, #12]
    523c:	4293      	cmp	r3, r2
    523e:	d271      	bcs.n	5324 <f_write+0x1d8>
			fp->dsect = sect;
    5240:	4643      	mov	r3, r8
    5242:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5244:	68a3      	ldr	r3, [r4, #8]
    5246:	05dd      	lsls	r5, r3, #23
    5248:	0ded      	lsrs	r5, r5, #23
    524a:	2380      	movs	r3, #128	; 0x80
    524c:	009b      	lsls	r3, r3, #2
    524e:	1b5d      	subs	r5, r3, r5
    5250:	42b5      	cmp	r5, r6
    5252:	d900      	bls.n	5256 <f_write+0x10a>
    5254:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5256:	69a1      	ldr	r1, [r4, #24]
    5258:	6820      	ldr	r0, [r4, #0]
    525a:	4b46      	ldr	r3, [pc, #280]	; (5374 <f_write+0x228>)
    525c:	4798      	blx	r3
    525e:	2800      	cmp	r0, #0
    5260:	d172      	bne.n	5348 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    5262:	68a3      	ldr	r3, [r4, #8]
    5264:	05d8      	lsls	r0, r3, #23
    5266:	0dc0      	lsrs	r0, r0, #23
    5268:	3030      	adds	r0, #48	; 0x30
    526a:	6823      	ldr	r3, [r4, #0]
    526c:	469c      	mov	ip, r3
    526e:	4460      	add	r0, ip
    5270:	002a      	movs	r2, r5
    5272:	0039      	movs	r1, r7
    5274:	4b40      	ldr	r3, [pc, #256]	; (5378 <f_write+0x22c>)
    5276:	4798      	blx	r3
		fp->fs->wflag = 1;
    5278:	2301      	movs	r3, #1
    527a:	6822      	ldr	r2, [r4, #0]
    527c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    527e:	197f      	adds	r7, r7, r5
    5280:	68a3      	ldr	r3, [r4, #8]
    5282:	195b      	adds	r3, r3, r5
    5284:	60a3      	str	r3, [r4, #8]
    5286:	464b      	mov	r3, r9
    5288:	681b      	ldr	r3, [r3, #0]
    528a:	195b      	adds	r3, r3, r5
    528c:	464a      	mov	r2, r9
    528e:	6013      	str	r3, [r2, #0]
    5290:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    5292:	d090      	beq.n	51b6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    5294:	68a3      	ldr	r3, [r4, #8]
    5296:	05da      	lsls	r2, r3, #23
    5298:	d1d4      	bne.n	5244 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    529a:	6820      	ldr	r0, [r4, #0]
    529c:	7882      	ldrb	r2, [r0, #2]
    529e:	3a01      	subs	r2, #1
    52a0:	0a5d      	lsrs	r5, r3, #9
    52a2:	4015      	ands	r5, r2
    52a4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    52a6:	2d00      	cmp	r5, #0
    52a8:	d10b      	bne.n	52c2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    52aa:	2b00      	cmp	r3, #0
    52ac:	d000      	beq.n	52b0 <f_write+0x164>
    52ae:	e77b      	b.n	51a8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    52b0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    52b2:	2b00      	cmp	r3, #0
    52b4:	d100      	bne.n	52b8 <f_write+0x16c>
    52b6:	e771      	b.n	519c <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    52b8:	2b01      	cmp	r3, #1
    52ba:	d086      	beq.n	51ca <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    52bc:	1c5a      	adds	r2, r3, #1
    52be:	d08b      	beq.n	51d8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    52c0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    52c2:	6820      	ldr	r0, [r4, #0]
    52c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    52c6:	69a2      	ldr	r2, [r4, #24]
    52c8:	4293      	cmp	r3, r2
    52ca:	d08c      	beq.n	51e6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    52cc:	6823      	ldr	r3, [r4, #0]
    52ce:	469a      	mov	sl, r3
    52d0:	6961      	ldr	r1, [r4, #20]
    52d2:	0018      	movs	r0, r3
    52d4:	4b29      	ldr	r3, [pc, #164]	; (537c <f_write+0x230>)
    52d6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    52d8:	2800      	cmp	r0, #0
    52da:	d091      	beq.n	5200 <f_write+0xb4>
			sect += csect;
    52dc:	4680      	mov	r8, r0
    52de:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    52e0:	0a73      	lsrs	r3, r6, #9
    52e2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    52e4:	d0a8      	beq.n	5238 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    52e6:	4653      	mov	r3, sl
    52e8:	789b      	ldrb	r3, [r3, #2]
    52ea:	465a      	mov	r2, fp
    52ec:	18aa      	adds	r2, r5, r2
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    52f2:	1b5b      	subs	r3, r3, r5
    52f4:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    52f6:	465b      	mov	r3, fp
    52f8:	466a      	mov	r2, sp
    52fa:	71d3      	strb	r3, [r2, #7]
    52fc:	79d3      	ldrb	r3, [r2, #7]
    52fe:	4652      	mov	r2, sl
    5300:	7850      	ldrb	r0, [r2, #1]
    5302:	4642      	mov	r2, r8
    5304:	0039      	movs	r1, r7
    5306:	4d1e      	ldr	r5, [pc, #120]	; (5380 <f_write+0x234>)
    5308:	47a8      	blx	r5
    530a:	2800      	cmp	r0, #0
    530c:	d000      	beq.n	5310 <f_write+0x1c4>
    530e:	e77f      	b.n	5210 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5310:	6823      	ldr	r3, [r4, #0]
    5312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5314:	4641      	mov	r1, r8
    5316:	1a50      	subs	r0, r2, r1
    5318:	4583      	cmp	fp, r0
    531a:	d900      	bls.n	531e <f_write+0x1d2>
    531c:	e780      	b.n	5220 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    531e:	465b      	mov	r3, fp
    5320:	025d      	lsls	r5, r3, #9
				continue;
    5322:	e7ac      	b.n	527e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5324:	2100      	movs	r1, #0
    5326:	4650      	mov	r0, sl
    5328:	4b12      	ldr	r3, [pc, #72]	; (5374 <f_write+0x228>)
    532a:	4798      	blx	r3
    532c:	2800      	cmp	r0, #0
    532e:	d103      	bne.n	5338 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5330:	6823      	ldr	r3, [r4, #0]
    5332:	4642      	mov	r2, r8
    5334:	62da      	str	r2, [r3, #44]	; 0x2c
    5336:	e783      	b.n	5240 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5338:	79a2      	ldrb	r2, [r4, #6]
    533a:	2380      	movs	r3, #128	; 0x80
    533c:	425b      	negs	r3, r3
    533e:	4313      	orrs	r3, r2
    5340:	71a3      	strb	r3, [r4, #6]
    5342:	2301      	movs	r3, #1
    5344:	9300      	str	r3, [sp, #0]
    5346:	e009      	b.n	535c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5348:	79a2      	ldrb	r2, [r4, #6]
    534a:	2380      	movs	r3, #128	; 0x80
    534c:	425b      	negs	r3, r3
    534e:	4313      	orrs	r3, r2
    5350:	71a3      	strb	r3, [r4, #6]
    5352:	2301      	movs	r3, #1
    5354:	9300      	str	r3, [sp, #0]
    5356:	e001      	b.n	535c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5358:	2302      	movs	r3, #2
    535a:	9300      	str	r3, [sp, #0]
}
    535c:	9800      	ldr	r0, [sp, #0]
    535e:	b003      	add	sp, #12
    5360:	bc3c      	pop	{r2, r3, r4, r5}
    5362:	4690      	mov	r8, r2
    5364:	4699      	mov	r9, r3
    5366:	46a2      	mov	sl, r4
    5368:	46ab      	mov	fp, r5
    536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    536c:	00003acd 	.word	0x00003acd
    5370:	000042cd 	.word	0x000042cd
    5374:	00003f51 	.word	0x00003f51
    5378:	00003a71 	.word	0x00003a71
    537c:	00003a97 	.word	0x00003a97
    5380:	00003931 	.word	0x00003931

00005384 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5384:	b570      	push	{r4, r5, r6, lr}
    5386:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5388:	8881      	ldrh	r1, [r0, #4]
    538a:	6800      	ldr	r0, [r0, #0]
    538c:	4b1c      	ldr	r3, [pc, #112]	; (5400 <f_sync+0x7c>)
    538e:	4798      	blx	r3
	if (res == FR_OK) {
    5390:	2800      	cmp	r0, #0
    5392:	d102      	bne.n	539a <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5394:	79a3      	ldrb	r3, [r4, #6]
    5396:	069b      	lsls	r3, r3, #26
    5398:	d400      	bmi.n	539c <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    539a:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    539c:	69e1      	ldr	r1, [r4, #28]
    539e:	6820      	ldr	r0, [r4, #0]
    53a0:	4b18      	ldr	r3, [pc, #96]	; (5404 <f_sync+0x80>)
    53a2:	4798      	blx	r3
			if (res == FR_OK) {
    53a4:	2800      	cmp	r0, #0
    53a6:	d1f8      	bne.n	539a <f_sync+0x16>
				dir = fp->dir_ptr;
    53a8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    53aa:	7aeb      	ldrb	r3, [r5, #11]
    53ac:	2220      	movs	r2, #32
    53ae:	4313      	orrs	r3, r2
    53b0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    53b2:	7b23      	ldrb	r3, [r4, #12]
    53b4:	772b      	strb	r3, [r5, #28]
    53b6:	89a3      	ldrh	r3, [r4, #12]
    53b8:	0a1b      	lsrs	r3, r3, #8
    53ba:	776b      	strb	r3, [r5, #29]
    53bc:	89e3      	ldrh	r3, [r4, #14]
    53be:	77ab      	strb	r3, [r5, #30]
    53c0:	7be3      	ldrb	r3, [r4, #15]
    53c2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    53c4:	7c23      	ldrb	r3, [r4, #16]
    53c6:	76ab      	strb	r3, [r5, #26]
    53c8:	8a23      	ldrh	r3, [r4, #16]
    53ca:	0a1b      	lsrs	r3, r3, #8
    53cc:	76eb      	strb	r3, [r5, #27]
    53ce:	8a63      	ldrh	r3, [r4, #18]
    53d0:	752b      	strb	r3, [r5, #20]
    53d2:	8a63      	ldrh	r3, [r4, #18]
    53d4:	0a1b      	lsrs	r3, r3, #8
    53d6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    53d8:	4b0b      	ldr	r3, [pc, #44]	; (5408 <f_sync+0x84>)
    53da:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    53dc:	75a8      	strb	r0, [r5, #22]
    53de:	0a03      	lsrs	r3, r0, #8
    53e0:	75eb      	strb	r3, [r5, #23]
    53e2:	0c03      	lsrs	r3, r0, #16
    53e4:	762b      	strb	r3, [r5, #24]
    53e6:	0e00      	lsrs	r0, r0, #24
    53e8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    53ea:	79a3      	ldrb	r3, [r4, #6]
    53ec:	2220      	movs	r2, #32
    53ee:	4393      	bics	r3, r2
    53f0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    53f2:	2301      	movs	r3, #1
    53f4:	6822      	ldr	r2, [r4, #0]
    53f6:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    53f8:	6820      	ldr	r0, [r4, #0]
    53fa:	4b04      	ldr	r3, [pc, #16]	; (540c <f_sync+0x88>)
    53fc:	4798      	blx	r3
    53fe:	e7cc      	b.n	539a <f_sync+0x16>
    5400:	00003acd 	.word	0x00003acd
    5404:	00003f51 	.word	0x00003f51
    5408:	00003a21 	.word	0x00003a21
    540c:	000049a9 	.word	0x000049a9

00005410 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5410:	b510      	push	{r4, lr}
    5412:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5414:	4b03      	ldr	r3, [pc, #12]	; (5424 <f_close+0x14>)
    5416:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5418:	2800      	cmp	r0, #0
    541a:	d101      	bne.n	5420 <f_close+0x10>
    541c:	2300      	movs	r3, #0
    541e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5420:	bd10      	pop	{r4, pc}
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	00005385 	.word	0x00005385

00005428 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    5428:	b510      	push	{r4, lr}
    542a:	b082      	sub	sp, #8
    542c:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    542e:	466b      	mov	r3, sp
    5430:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    5432:	ab01      	add	r3, sp, #4
    5434:	2201      	movs	r2, #1
    5436:	4669      	mov	r1, sp
    5438:	0020      	movs	r0, r4
    543a:	4c05      	ldr	r4, [pc, #20]	; (5450 <f_putc+0x28>)
    543c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    543e:	9b01      	ldr	r3, [sp, #4]
    5440:	1e58      	subs	r0, r3, #1
    5442:	1e43      	subs	r3, r0, #1
    5444:	4198      	sbcs	r0, r3
    5446:	4240      	negs	r0, r0
    5448:	2301      	movs	r3, #1
    544a:	4318      	orrs	r0, r3
}
    544c:	b002      	add	sp, #8
    544e:	bd10      	pop	{r4, pc}
    5450:	0000514d 	.word	0x0000514d

00005454 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5456:	0006      	movs	r6, r0
    5458:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    545a:	7800      	ldrb	r0, [r0, #0]
    545c:	2800      	cmp	r0, #0
    545e:	d00b      	beq.n	5478 <f_puts+0x24>
    5460:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    5462:	4f06      	ldr	r7, [pc, #24]	; (547c <f_puts+0x28>)
    5464:	0029      	movs	r1, r5
    5466:	47b8      	blx	r7
    5468:	1c43      	adds	r3, r0, #1
    546a:	d004      	beq.n	5476 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    546c:	3401      	adds	r4, #1
    546e:	5d30      	ldrb	r0, [r6, r4]
    5470:	2800      	cmp	r0, #0
    5472:	d1f7      	bne.n	5464 <f_puts+0x10>
    5474:	0020      	movs	r0, r4
	}
	return n;
}
    5476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    5478:	2000      	movs	r0, #0
    547a:	e7fc      	b.n	5476 <f_puts+0x22>
    547c:	00005429 	.word	0x00005429

00005480 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5480:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5482:	287f      	cmp	r0, #127	; 0x7f
    5484:	d911      	bls.n	54aa <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5486:	2900      	cmp	r1, #0
    5488:	d111      	bne.n	54ae <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    548a:	28c7      	cmp	r0, #199	; 0xc7
    548c:	d017      	beq.n	54be <ff_convert+0x3e>
    548e:	4a0d      	ldr	r2, [pc, #52]	; (54c4 <ff_convert+0x44>)
    5490:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5492:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5494:	8811      	ldrh	r1, [r2, #0]
    5496:	4281      	cmp	r1, r0
    5498:	d004      	beq.n	54a4 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    549a:	3301      	adds	r3, #1
    549c:	b29b      	uxth	r3, r3
    549e:	3202      	adds	r2, #2
    54a0:	2b80      	cmp	r3, #128	; 0x80
    54a2:	d1f7      	bne.n	5494 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    54a4:	3380      	adds	r3, #128	; 0x80
    54a6:	20ff      	movs	r0, #255	; 0xff
    54a8:	4003      	ands	r3, r0
		}
	}

	return c;
}
    54aa:	0018      	movs	r0, r3
    54ac:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    54ae:	2300      	movs	r3, #0
    54b0:	28ff      	cmp	r0, #255	; 0xff
    54b2:	d8fa      	bhi.n	54aa <ff_convert+0x2a>
    54b4:	3880      	subs	r0, #128	; 0x80
    54b6:	0040      	lsls	r0, r0, #1
    54b8:	4b02      	ldr	r3, [pc, #8]	; (54c4 <ff_convert+0x44>)
    54ba:	5ac3      	ldrh	r3, [r0, r3]
    54bc:	e7f5      	b.n	54aa <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    54be:	2300      	movs	r3, #0
    54c0:	e7f0      	b.n	54a4 <ff_convert+0x24>
    54c2:	46c0      	nop			; (mov r8, r8)
    54c4:	00006f68 	.word	0x00006f68

000054c8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54c8:	2861      	cmp	r0, #97	; 0x61
    54ca:	d014      	beq.n	54f6 <ff_wtoupper+0x2e>
    54cc:	4b0b      	ldr	r3, [pc, #44]	; (54fc <ff_wtoupper+0x34>)
    54ce:	3304      	adds	r3, #4
    54d0:	2101      	movs	r1, #1
    54d2:	2262      	movs	r2, #98	; 0x62
    54d4:	4290      	cmp	r0, r2
    54d6:	d007      	beq.n	54e8 <ff_wtoupper+0x20>
    54d8:	3101      	adds	r1, #1
    54da:	3302      	adds	r3, #2
    54dc:	1e9a      	subs	r2, r3, #2
    54de:	8812      	ldrh	r2, [r2, #0]
    54e0:	2a00      	cmp	r2, #0
    54e2:	d1f7      	bne.n	54d4 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    54e4:	0003      	movs	r3, r0
    54e6:	e004      	b.n	54f2 <ff_wtoupper+0x2a>
    54e8:	1e03      	subs	r3, r0, #0
    54ea:	d002      	beq.n	54f2 <ff_wtoupper+0x2a>
    54ec:	0049      	lsls	r1, r1, #1
    54ee:	4b04      	ldr	r3, [pc, #16]	; (5500 <ff_wtoupper+0x38>)
    54f0:	5acb      	ldrh	r3, [r1, r3]
}
    54f2:	0018      	movs	r0, r3
    54f4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54f6:	2100      	movs	r1, #0
    54f8:	e7f8      	b.n	54ec <ff_wtoupper+0x24>
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	00007068 	.word	0x00007068
    5500:	00007248 	.word	0x00007248

00005504 <update_firmware>:

/// Jump to application
applicationCodeEntry();
}

int8_t update_firmware(){
    5504:	b5f0      	push	{r4, r5, r6, r7, lr}
    5506:	46d6      	mov	lr, sl
    5508:	464f      	mov	r7, r9
    550a:	4646      	mov	r6, r8
    550c:	b5c0      	push	{r6, r7, lr}
    550e:	b090      	sub	sp, #64	; 0x40
    5510:	af00      	add	r7, sp, #0
	//returns -1 if update failed, 0 if successful and ready to jump
	//find all necessary addresses to start at
			setLogLevel(LOG_INFO_LVL);
    5512:	2000      	movs	r0, #0
    5514:	4b49      	ldr	r3, [pc, #292]	; (563c <update_firmware+0x138>)
    5516:	4798      	blx	r3
	//bomb entire application code region
	
	//for firmware image
			//start of params test
			char firmware_file_name[] = "0:app.bin";
    5518:	2334      	movs	r3, #52	; 0x34
    551a:	18fc      	adds	r4, r7, r3
    551c:	4b48      	ldr	r3, [pc, #288]	; (5640 <update_firmware+0x13c>)
    551e:	0022      	movs	r2, r4
    5520:	cb03      	ldmia	r3!, {r0, r1}
    5522:	c203      	stmia	r2!, {r0, r1}
    5524:	881b      	ldrh	r3, [r3, #0]
    5526:	8013      	strh	r3, [r2, #0]
			FIL firmware_file;
			FRESULT res;
			int8_t successful_update = -1;

			// OPEN params.csv
			SerialConsoleWriteString("READING app.bin \r\n");
    5528:	4846      	ldr	r0, [pc, #280]	; (5644 <update_firmware+0x140>)
    552a:	4b47      	ldr	r3, [pc, #284]	; (5648 <update_firmware+0x144>)
    552c:	4798      	blx	r3
			firmware_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0' ;
    552e:	2330      	movs	r3, #48	; 0x30
    5530:	7023      	strb	r3, [r4, #0]
			res = f_open(&firmware_file, (char const *)firmware_file_name, FA_READ);
    5532:	2201      	movs	r2, #1
    5534:	0021      	movs	r1, r4
    5536:	3b20      	subs	r3, #32
    5538:	18f8      	adds	r0, r7, r3
    553a:	4b44      	ldr	r3, [pc, #272]	; (564c <update_firmware+0x148>)
    553c:	4798      	blx	r3
			if (res != FR_OK) {
    553e:	2800      	cmp	r0, #0
    5540:	d154      	bne.n	55ec <update_firmware+0xe8>
				successful_update = -1;
			}

			struct nvm_parameters  *const  	parameters;
			
			nvm_get_parameters 	( &parameters);				// To fetch parameter From out Device
    5542:	230c      	movs	r3, #12
    5544:	18f8      	adds	r0, r7, r3
    5546:	4b42      	ldr	r3, [pc, #264]	; (5650 <update_firmware+0x14c>)
    5548:	4798      	blx	r3
			SerialConsoleWriteString("GOT NVM PARAMETERS \r\n");
    554a:	4842      	ldr	r0, [pc, #264]	; (5654 <update_firmware+0x150>)
    554c:	4d3e      	ldr	r5, [pc, #248]	; (5648 <update_firmware+0x144>)
    554e:	47a8      	blx	r5
			uint32_t page_size = parameters->page_size;		//Number of bytes per page
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	781a      	ldrb	r2, [r3, #0]
			uint32_t row_size = page_size * 4;				//Calculate row size from page size in bytes 			
    5554:	0094      	lsls	r4, r2, #2
			char block[row_size];		
    5556:	1de3      	adds	r3, r4, #7
    5558:	08db      	lsrs	r3, r3, #3
    555a:	00db      	lsls	r3, r3, #3
    555c:	4669      	mov	r1, sp
    555e:	1acb      	subs	r3, r1, r3
    5560:	469d      	mov	sp, r3
    5562:	466e      	mov	r6, sp
			uint32_t row_address = APP_START_ADDRESS;		//Start Address
			LogMessage(LOG_INFO_LVL,"PAGE SIZE IS %d bytes\r\n",page_size);
    5564:	493c      	ldr	r1, [pc, #240]	; (5658 <update_firmware+0x154>)
    5566:	2000      	movs	r0, #0
    5568:	4b3c      	ldr	r3, [pc, #240]	; (565c <update_firmware+0x158>)
    556a:	4698      	mov	r8, r3
    556c:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL,"ROW  SIZE IS %d bytes\r\n",row_size);
    556e:	0022      	movs	r2, r4
    5570:	493b      	ldr	r1, [pc, #236]	; (5660 <update_firmware+0x15c>)
    5572:	2000      	movs	r0, #0
    5574:	47c0      	blx	r8
			uint32_t crc_on_block=0;
    5576:	2300      	movs	r3, #0
    5578:	60bb      	str	r3, [r7, #8]
			uint32_t crc_on_nvm=0;
    557a:	607b      	str	r3, [r7, #4]
			PM->APBBMASK.reg |= mask;
    557c:	4a39      	ldr	r2, [pc, #228]	; (5664 <update_firmware+0x160>)
    557e:	69d3      	ldr	r3, [r2, #28]
    5580:	2102      	movs	r1, #2
    5582:	430b      	orrs	r3, r1
    5584:	61d3      	str	r3, [r2, #28]
			dsu_crc32_init();								//Initializing CRC
			
			SerialConsoleWriteString("STARTING MOVE BLOCKS \r\n");
    5586:	4838      	ldr	r0, [pc, #224]	; (5668 <update_firmware+0x164>)
    5588:	47a8      	blx	r5
			UINT br;
			while(!f_eof(&firmware_file)) // While not end of Firmware file 
    558a:	69ba      	ldr	r2, [r7, #24]
    558c:	69fb      	ldr	r3, [r7, #28]
    558e:	429a      	cmp	r2, r3
    5590:	d038      	beq.n	5604 <update_firmware+0x100>
    5592:	2580      	movs	r5, #128	; 0x80
    5594:	036d      	lsls	r5, r5, #13
			{
					res = f_read (&firmware_file,block, row_size, &br);
    5596:	4b35      	ldr	r3, [pc, #212]	; (566c <update_firmware+0x168>)
    5598:	4698      	mov	r8, r3
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					
					// Calculate CRC on block
					res= dsu_crc32_cal(block,row_size,&crc_on_block);
    559a:	4b35      	ldr	r3, [pc, #212]	; (5670 <update_firmware+0x16c>)
    559c:	4699      	mov	r9, r3
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC ON Buffer] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					//Erase Row From NVM
					nvm_erase_row (row_address);
    559e:	4b35      	ldr	r3, [pc, #212]	; (5674 <update_firmware+0x170>)
    55a0:	469a      	mov	sl, r3
					res = f_read (&firmware_file,block, row_size, &br);
    55a2:	003b      	movs	r3, r7
    55a4:	0022      	movs	r2, r4
    55a6:	0031      	movs	r1, r6
    55a8:	2010      	movs	r0, #16
    55aa:	1838      	adds	r0, r7, r0
    55ac:	47c0      	blx	r8
					if (res != FR_OK) {
    55ae:	2800      	cmp	r0, #0
    55b0:	d122      	bne.n	55f8 <update_firmware+0xf4>
					res= dsu_crc32_cal(block,row_size,&crc_on_block);
    55b2:	2308      	movs	r3, #8
    55b4:	18fa      	adds	r2, r7, r3
    55b6:	0021      	movs	r1, r4
    55b8:	0030      	movs	r0, r6
    55ba:	47c8      	blx	r9
					if (res != STATUS_OK) {
    55bc:	2800      	cmp	r0, #0
    55be:	d131      	bne.n	5624 <update_firmware+0x120>
					nvm_erase_row (row_address);
    55c0:	0028      	movs	r0, r5
    55c2:	47d0      	blx	sl
						LogMessage(LOG_INFO_LVL ,"[FAIL: NVM ROW DELETION] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					// Writing block on NVM 	
					nvm_write_buffer (row_address, block, row_size);
    55c4:	b2a2      	uxth	r2, r4
    55c6:	0031      	movs	r1, r6
    55c8:	0028      	movs	r0, r5
    55ca:	4b2b      	ldr	r3, [pc, #172]	; (5678 <update_firmware+0x174>)
    55cc:	4798      	blx	r3
						break;
					}
					
					
					//calculate CRC on NVM
					dsu_crc32_cal(row_address,row_size,&crc_on_nvm); 
    55ce:	1d3a      	adds	r2, r7, #4
    55d0:	0021      	movs	r1, r4
    55d2:	0028      	movs	r0, r5
    55d4:	4b26      	ldr	r3, [pc, #152]	; (5670 <update_firmware+0x16c>)
    55d6:	4798      	blx	r3
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					
					// CHECKING IF CRCs match
					if (crc_on_nvm == crc_on_block){
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	68ba      	ldr	r2, [r7, #8]
    55dc:	4293      	cmp	r3, r2
    55de:	d127      	bne.n	5630 <update_firmware+0x12c>
						row_address = row_address + row_size;
    55e0:	192d      	adds	r5, r5, r4
			while(!f_eof(&firmware_file)) // While not end of Firmware file 
    55e2:	69ba      	ldr	r2, [r7, #24]
    55e4:	69fb      	ldr	r3, [r7, #28]
    55e6:	429a      	cmp	r2, r3
    55e8:	d1db      	bne.n	55a2 <update_firmware+0x9e>
    55ea:	e00b      	b.n	5604 <update_firmware+0x100>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
    55ec:	0002      	movs	r2, r0
    55ee:	4923      	ldr	r1, [pc, #140]	; (567c <update_firmware+0x178>)
    55f0:	2000      	movs	r0, #0
    55f2:	4b1a      	ldr	r3, [pc, #104]	; (565c <update_firmware+0x158>)
    55f4:	4798      	blx	r3
    55f6:	e7a4      	b.n	5542 <update_firmware+0x3e>
						LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
    55f8:	683b      	ldr	r3, [r7, #0]
    55fa:	0002      	movs	r2, r0
    55fc:	4920      	ldr	r1, [pc, #128]	; (5680 <update_firmware+0x17c>)
    55fe:	2000      	movs	r0, #0
    5600:	4c16      	ldr	r4, [pc, #88]	; (565c <update_firmware+0x158>)
    5602:	47a0      	blx	r4
						break;
						//Plan B
					}	
			}	
				
			f_close(&firmware_file); // Read a block
    5604:	2310      	movs	r3, #16
    5606:	18f8      	adds	r0, r7, r3
    5608:	4b1e      	ldr	r3, [pc, #120]	; (5684 <update_firmware+0x180>)
    560a:	4798      	blx	r3
	//for firmware image in nvm
	//read from nvm to buffer
	//crc buffer
	
	//compare crcs and return accordingly
	SerialConsoleWriteString("RETURNING FROM FIRMWARE UPDATE \r\n");
    560c:	481e      	ldr	r0, [pc, #120]	; (5688 <update_firmware+0x184>)
    560e:	4b0e      	ldr	r3, [pc, #56]	; (5648 <update_firmware+0x144>)
    5610:	4798      	blx	r3
	return successful_update;
    5612:	2001      	movs	r0, #1
    5614:	4240      	negs	r0, r0
    5616:	46bd      	mov	sp, r7
    5618:	b010      	add	sp, #64	; 0x40
    561a:	bc1c      	pop	{r2, r3, r4}
    561c:	4690      	mov	r8, r2
    561e:	4699      	mov	r9, r3
    5620:	46a2      	mov	sl, r4
    5622:	bdf0      	pop	{r4, r5, r6, r7, pc}
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC ON Buffer] res %d\r\n", res);
    5624:	0002      	movs	r2, r0
    5626:	4919      	ldr	r1, [pc, #100]	; (568c <update_firmware+0x188>)
    5628:	2000      	movs	r0, #0
    562a:	4b0c      	ldr	r3, [pc, #48]	; (565c <update_firmware+0x158>)
    562c:	4798      	blx	r3
						break;
    562e:	e7e9      	b.n	5604 <update_firmware+0x100>
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC DID NOT MATCH]\r\n");
    5630:	4917      	ldr	r1, [pc, #92]	; (5690 <update_firmware+0x18c>)
    5632:	2000      	movs	r0, #0
    5634:	4b09      	ldr	r3, [pc, #36]	; (565c <update_firmware+0x158>)
    5636:	4798      	blx	r3
						break;
    5638:	e7e4      	b.n	5604 <update_firmware+0x100>
    563a:	46c0      	nop			; (mov r8, r8)
    563c:	000008a1 	.word	0x000008a1
    5640:	00007864 	.word	0x00007864
    5644:	00007718 	.word	0x00007718
    5648:	000007d9 	.word	0x000007d9
    564c:	00004e11 	.word	0x00004e11
    5650:	000003f5 	.word	0x000003f5
    5654:	0000775c 	.word	0x0000775c
    5658:	00007774 	.word	0x00007774
    565c:	000008ad 	.word	0x000008ad
    5660:	0000778c 	.word	0x0000778c
    5664:	40000400 	.word	0x40000400
    5668:	000077a4 	.word	0x000077a4
    566c:	00004f99 	.word	0x00004f99
    5670:	000001b9 	.word	0x000001b9
    5674:	00000399 	.word	0x00000399
    5678:	000002f1 	.word	0x000002f1
    567c:	0000772c 	.word	0x0000772c
    5680:	000077bc 	.word	0x000077bc
    5684:	00005411 	.word	0x00005411
    5688:	00007840 	.word	0x00007840
    568c:	00007804 	.word	0x00007804
    5690:	00007824 	.word	0x00007824

00005694 <main>:
{
    5694:	b5f0      	push	{r4, r5, r6, r7, lr}
    5696:	4c95      	ldr	r4, [pc, #596]	; (58ec <main+0x258>)
    5698:	44a5      	add	sp, r4
    569a:	af00      	add	r7, sp, #0
	char test_file_name[] = "0:sd_mmc_test.txt";
    569c:	23af      	movs	r3, #175	; 0xaf
    569e:	009b      	lsls	r3, r3, #2
    56a0:	2208      	movs	r2, #8
    56a2:	18ba      	adds	r2, r7, r2
    56a4:	18d2      	adds	r2, r2, r3
    56a6:	4b92      	ldr	r3, [pc, #584]	; (58f0 <main+0x25c>)
    56a8:	cb13      	ldmia	r3!, {r0, r1, r4}
    56aa:	c213      	stmia	r2!, {r0, r1, r4}
    56ac:	0011      	movs	r1, r2
    56ae:	681a      	ldr	r2, [r3, #0]
    56b0:	600a      	str	r2, [r1, #0]
    56b2:	889b      	ldrh	r3, [r3, #4]
    56b4:	808b      	strh	r3, [r1, #4]
	system_init();
    56b6:	4b8f      	ldr	r3, [pc, #572]	; (58f4 <main+0x260>)
    56b8:	4798      	blx	r3
	delay_init();
    56ba:	4b8f      	ldr	r3, [pc, #572]	; (58f8 <main+0x264>)
    56bc:	4798      	blx	r3
	InitializeSerialConsole();
    56be:	4b8f      	ldr	r3, [pc, #572]	; (58fc <main+0x268>)
    56c0:	4798      	blx	r3
	cpu_irq_enable();
    56c2:	4c8f      	ldr	r4, [pc, #572]	; (5900 <main+0x26c>)
    56c4:	2501      	movs	r5, #1
    56c6:	7025      	strb	r5, [r4, #0]
    56c8:	f3bf 8f5f 	dmb	sy
    56cc:	b662      	cpsie	i
	sd_mmc_init();
    56ce:	4b8d      	ldr	r3, [pc, #564]	; (5904 <main+0x270>)
    56d0:	4798      	blx	r3
	cpu_irq_enable();
    56d2:	7025      	strb	r5, [r4, #0]
    56d4:	f3bf 8f5f 	dmb	sy
    56d8:	b662      	cpsie	i
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    56da:	488b      	ldr	r0, [pc, #556]	; (5908 <main+0x274>)
    56dc:	4c8b      	ldr	r4, [pc, #556]	; (590c <main+0x278>)
    56de:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    56e0:	488b      	ldr	r0, [pc, #556]	; (5910 <main+0x27c>)
    56e2:	47a0      	blx	r4
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    56e4:	4c89      	ldr	r4, [pc, #548]	; (590c <main+0x278>)
				SerialConsoleWriteString("Card install FAIL\n\r");
    56e6:	0025      	movs	r5, r4
    56e8:	e060      	b.n	57ac <main+0x118>
    56ea:	488a      	ldr	r0, [pc, #552]	; (5914 <main+0x280>)
    56ec:	47a8      	blx	r5
				SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    56ee:	488a      	ldr	r0, [pc, #552]	; (5918 <main+0x284>)
    56f0:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    56f2:	4e8a      	ldr	r6, [pc, #552]	; (591c <main+0x288>)
    56f4:	2000      	movs	r0, #0
    56f6:	47b0      	blx	r6
    56f8:	2802      	cmp	r0, #2
    56fa:	d1fb      	bne.n	56f4 <main+0x60>
			status = sd_mmc_test_unit_ready(0);
    56fc:	2000      	movs	r0, #0
    56fe:	4b88      	ldr	r3, [pc, #544]	; (5920 <main+0x28c>)
    5700:	4798      	blx	r3
			if (CTRL_FAIL == status) {
    5702:	2801      	cmp	r0, #1
    5704:	d0f1      	beq.n	56ea <main+0x56>
		} while (CTRL_GOOD != status);
    5706:	2800      	cmp	r0, #0
    5708:	d1f8      	bne.n	56fc <main+0x68>
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    570a:	4886      	ldr	r0, [pc, #536]	; (5924 <main+0x290>)
    570c:	4b7f      	ldr	r3, [pc, #508]	; (590c <main+0x278>)
    570e:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    5710:	228c      	movs	r2, #140	; 0x8c
    5712:	0092      	lsls	r2, r2, #2
    5714:	2100      	movs	r1, #0
    5716:	238c      	movs	r3, #140	; 0x8c
    5718:	2008      	movs	r0, #8
    571a:	1838      	adds	r0, r7, r0
    571c:	18c0      	adds	r0, r0, r3
    571e:	4b82      	ldr	r3, [pc, #520]	; (5928 <main+0x294>)
    5720:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5722:	238c      	movs	r3, #140	; 0x8c
    5724:	2208      	movs	r2, #8
    5726:	18ba      	adds	r2, r7, r2
    5728:	18d1      	adds	r1, r2, r3
    572a:	2000      	movs	r0, #0
    572c:	4b7f      	ldr	r3, [pc, #508]	; (592c <main+0x298>)
    572e:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    5730:	280b      	cmp	r0, #11
    5732:	d03e      	beq.n	57b2 <main+0x11e>
		SerialConsoleWriteString("[OK]\r\n");
    5734:	487e      	ldr	r0, [pc, #504]	; (5930 <main+0x29c>)
    5736:	4e75      	ldr	r6, [pc, #468]	; (590c <main+0x278>)
    5738:	47b0      	blx	r6
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    573a:	487e      	ldr	r0, [pc, #504]	; (5934 <main+0x2a0>)
    573c:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    573e:	23af      	movs	r3, #175	; 0xaf
    5740:	009b      	lsls	r3, r3, #2
    5742:	2208      	movs	r2, #8
    5744:	18ba      	adds	r2, r7, r2
    5746:	18d1      	adds	r1, r2, r3
    5748:	2330      	movs	r3, #48	; 0x30
    574a:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    574c:	220a      	movs	r2, #10
    574e:	3338      	adds	r3, #56	; 0x38
    5750:	2008      	movs	r0, #8
    5752:	1838      	adds	r0, r7, r0
    5754:	18c0      	adds	r0, r0, r3
    5756:	4b78      	ldr	r3, [pc, #480]	; (5938 <main+0x2a4>)
    5758:	4798      	blx	r3
		if (res != FR_OK) {
    575a:	2800      	cmp	r0, #0
    575c:	d02f      	beq.n	57be <main+0x12a>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    575e:	0002      	movs	r2, r0
    5760:	4976      	ldr	r1, [pc, #472]	; (593c <main+0x2a8>)
    5762:	2000      	movs	r0, #0
    5764:	4b76      	ldr	r3, [pc, #472]	; (5940 <main+0x2ac>)
    5766:	4798      	blx	r3
		SerialConsoleWriteString("Please unplug the card.\n\r");
    5768:	4876      	ldr	r0, [pc, #472]	; (5944 <main+0x2b0>)
    576a:	4e68      	ldr	r6, [pc, #416]	; (590c <main+0x278>)
    576c:	47b0      	blx	r6
		delay_s(1); //Delay to allow text to print
    576e:	20fa      	movs	r0, #250	; 0xfa
    5770:	0080      	lsls	r0, r0, #2
    5772:	4b75      	ldr	r3, [pc, #468]	; (5948 <main+0x2b4>)
    5774:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    5776:	b672      	cpsid	i
    5778:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    577c:	2200      	movs	r2, #0
    577e:	4b60      	ldr	r3, [pc, #384]	; (5900 <main+0x26c>)
    5780:	701a      	strb	r2, [r3, #0]
		DeinitializeSerialConsole();
    5782:	4b72      	ldr	r3, [pc, #456]	; (594c <main+0x2b8>)
    5784:	4798      	blx	r3
		sd_mmc_deinit();
    5786:	4b72      	ldr	r3, [pc, #456]	; (5950 <main+0x2bc>)
    5788:	4798      	blx	r3
		SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    578a:	4872      	ldr	r0, [pc, #456]	; (5954 <main+0x2c0>)
    578c:	47b0      	blx	r6
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    578e:	2380      	movs	r3, #128	; 0x80
    5790:	035b      	lsls	r3, r3, #13
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5792:	681a      	ldr	r2, [r3, #0]
    5794:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5798:	4a6f      	ldr	r2, [pc, #444]	; (5958 <main+0x2c4>)
    579a:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    579c:	4b6f      	ldr	r3, [pc, #444]	; (595c <main+0x2c8>)
applicationCodeEntry();
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    57a2:	4e5e      	ldr	r6, [pc, #376]	; (591c <main+0x288>)
    57a4:	2000      	movs	r0, #0
    57a6:	47b0      	blx	r6
    57a8:	2802      	cmp	r0, #2
    57aa:	d1fb      	bne.n	57a4 <main+0x110>
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    57ac:	486c      	ldr	r0, [pc, #432]	; (5960 <main+0x2cc>)
    57ae:	47a0      	blx	r4
    57b0:	e7a4      	b.n	56fc <main+0x68>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    57b2:	220b      	movs	r2, #11
    57b4:	4961      	ldr	r1, [pc, #388]	; (593c <main+0x2a8>)
    57b6:	2000      	movs	r0, #0
    57b8:	4b61      	ldr	r3, [pc, #388]	; (5940 <main+0x2ac>)
    57ba:	4798      	blx	r3
			goto main_end_of_test;
    57bc:	e7d4      	b.n	5768 <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    57be:	485c      	ldr	r0, [pc, #368]	; (5930 <main+0x29c>)
    57c0:	4e52      	ldr	r6, [pc, #328]	; (590c <main+0x278>)
    57c2:	47b0      	blx	r6
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    57c4:	4867      	ldr	r0, [pc, #412]	; (5964 <main+0x2d0>)
    57c6:	47b0      	blx	r6
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    57c8:	2368      	movs	r3, #104	; 0x68
    57ca:	2208      	movs	r2, #8
    57cc:	18ba      	adds	r2, r7, r2
    57ce:	18d1      	adds	r1, r2, r3
    57d0:	4865      	ldr	r0, [pc, #404]	; (5968 <main+0x2d4>)
    57d2:	4b66      	ldr	r3, [pc, #408]	; (596c <main+0x2d8>)
    57d4:	4798      	blx	r3
    57d6:	2800      	cmp	r0, #0
    57d8:	d10a      	bne.n	57f0 <main+0x15c>
			f_close(&file_object);
    57da:	2368      	movs	r3, #104	; 0x68
    57dc:	2208      	movs	r2, #8
    57de:	18ba      	adds	r2, r7, r2
    57e0:	18d0      	adds	r0, r2, r3
    57e2:	4b63      	ldr	r3, [pc, #396]	; (5970 <main+0x2dc>)
    57e4:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    57e6:	4963      	ldr	r1, [pc, #396]	; (5974 <main+0x2e0>)
    57e8:	2000      	movs	r0, #0
    57ea:	4b55      	ldr	r3, [pc, #340]	; (5940 <main+0x2ac>)
    57ec:	4798      	blx	r3
			goto main_end_of_test;
    57ee:	e7bb      	b.n	5768 <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    57f0:	484f      	ldr	r0, [pc, #316]	; (5930 <main+0x29c>)
    57f2:	4e46      	ldr	r6, [pc, #280]	; (590c <main+0x278>)
    57f4:	47b0      	blx	r6
		f_close(&file_object); //Close file
    57f6:	2368      	movs	r3, #104	; 0x68
    57f8:	2208      	movs	r2, #8
    57fa:	18ba      	adds	r2, r7, r2
    57fc:	18d0      	adds	r0, r2, r3
    57fe:	4b5c      	ldr	r3, [pc, #368]	; (5970 <main+0x2dc>)
    5800:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    5802:	485d      	ldr	r0, [pc, #372]	; (5978 <main+0x2e4>)
    5804:	47b0      	blx	r6
		char params_file_name[] = "params.csv";
    5806:	230c      	movs	r3, #12
    5808:	18fa      	adds	r2, r7, r3
    580a:	4b5c      	ldr	r3, [pc, #368]	; (597c <main+0x2e8>)
    580c:	cb03      	ldmia	r3!, {r0, r1}
    580e:	c203      	stmia	r2!, {r0, r1}
    5810:	0011      	movs	r1, r2
    5812:	881a      	ldrh	r2, [r3, #0]
    5814:	800a      	strh	r2, [r1, #0]
    5816:	789b      	ldrb	r3, [r3, #2]
    5818:	708b      	strb	r3, [r1, #2]
		SerialConsoleWriteString("Opening params.csv\r\n");
    581a:	4859      	ldr	r0, [pc, #356]	; (5980 <main+0x2ec>)
    581c:	47b0      	blx	r6
		res = f_open(&params_file, (char const *)params_file_name, FA_READ);
    581e:	2201      	movs	r2, #1
    5820:	230c      	movs	r3, #12
    5822:	18f9      	adds	r1, r7, r3
    5824:	3304      	adds	r3, #4
    5826:	2008      	movs	r0, #8
    5828:	1838      	adds	r0, r7, r0
    582a:	18c0      	adds	r0, r0, r3
    582c:	4b42      	ldr	r3, [pc, #264]	; (5938 <main+0x2a4>)
    582e:	4798      	blx	r3
    5830:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    5832:	d004      	beq.n	583e <main+0x1aa>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
    5834:	4953      	ldr	r1, [pc, #332]	; (5984 <main+0x2f0>)
    5836:	2000      	movs	r0, #0
    5838:	4b41      	ldr	r3, [pc, #260]	; (5940 <main+0x2ac>)
    583a:	4798      	blx	r3
			goto main_end_of_test;
    583c:	e794      	b.n	5768 <main+0xd4>
		res = f_read (&params_file,(char const *)params, 50, &br);
    583e:	2308      	movs	r3, #8
    5840:	18fb      	adds	r3, r7, r3
    5842:	2232      	movs	r2, #50	; 0x32
    5844:	2134      	movs	r1, #52	; 0x34
    5846:	2008      	movs	r0, #8
    5848:	469c      	mov	ip, r3
    584a:	4461      	add	r1, ip
    584c:	3008      	adds	r0, #8
    584e:	469c      	mov	ip, r3
    5850:	4460      	add	r0, ip
    5852:	4e4d      	ldr	r6, [pc, #308]	; (5988 <main+0x2f4>)
    5854:	47b0      	blx	r6
    5856:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    5858:	d004      	beq.n	5864 <main+0x1d0>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
    585a:	494c      	ldr	r1, [pc, #304]	; (598c <main+0x2f8>)
    585c:	2000      	movs	r0, #0
    585e:	4b38      	ldr	r3, [pc, #224]	; (5940 <main+0x2ac>)
    5860:	4798      	blx	r3
			goto main_end_of_test;
    5862:	e781      	b.n	5768 <main+0xd4>
		LogMessage(LOG_INFO_LVL ,"[Bytes read from params.csv: ] %d\r\n", br);
    5864:	68ba      	ldr	r2, [r7, #8]
    5866:	494a      	ldr	r1, [pc, #296]	; (5990 <main+0x2fc>)
    5868:	2000      	movs	r0, #0
    586a:	4b35      	ldr	r3, [pc, #212]	; (5940 <main+0x2ac>)
    586c:	4798      	blx	r3
		f_close(&params_file);		
    586e:	2310      	movs	r3, #16
    5870:	2208      	movs	r2, #8
    5872:	18ba      	adds	r2, r7, r2
    5874:	18d0      	adds	r0, r2, r3
    5876:	4b3e      	ldr	r3, [pc, #248]	; (5970 <main+0x2dc>)
    5878:	4798      	blx	r3
		char * flag = strtok(params, ",");
    587a:	4e46      	ldr	r6, [pc, #280]	; (5994 <main+0x300>)
    587c:	0031      	movs	r1, r6
    587e:	2334      	movs	r3, #52	; 0x34
    5880:	2208      	movs	r2, #8
    5882:	18ba      	adds	r2, r7, r2
    5884:	18d0      	adds	r0, r2, r3
    5886:	4b44      	ldr	r3, [pc, #272]	; (5998 <main+0x304>)
    5888:	4798      	blx	r3
    588a:	6078      	str	r0, [r7, #4]
		char * crc_from_file = strtok(NULL, ",");
    588c:	0031      	movs	r1, r6
    588e:	2000      	movs	r0, #0
    5890:	4b41      	ldr	r3, [pc, #260]	; (5998 <main+0x304>)
    5892:	4798      	blx	r3
    5894:	6038      	str	r0, [r7, #0]
		SerialConsoleWriteString("Reading from params.csv \r\n");
    5896:	4841      	ldr	r0, [pc, #260]	; (599c <main+0x308>)
    5898:	4b1c      	ldr	r3, [pc, #112]	; (590c <main+0x278>)
    589a:	4798      	blx	r3
		SerialConsoleWriteString(flag);
    589c:	6878      	ldr	r0, [r7, #4]
    589e:	4b1b      	ldr	r3, [pc, #108]	; (590c <main+0x278>)
    58a0:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    58a2:	4e3f      	ldr	r6, [pc, #252]	; (59a0 <main+0x30c>)
    58a4:	0030      	movs	r0, r6
    58a6:	4b19      	ldr	r3, [pc, #100]	; (590c <main+0x278>)
    58a8:	4798      	blx	r3
		SerialConsoleWriteString(crc_from_file);
    58aa:	6838      	ldr	r0, [r7, #0]
    58ac:	4b17      	ldr	r3, [pc, #92]	; (590c <main+0x278>)
    58ae:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    58b0:	0030      	movs	r0, r6
    58b2:	4b16      	ldr	r3, [pc, #88]	; (590c <main+0x278>)
    58b4:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    58b6:	4b3b      	ldr	r3, [pc, #236]	; (59a4 <main+0x310>)
    58b8:	6a1b      	ldr	r3, [r3, #32]
		if(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    58ba:	021b      	lsls	r3, r3, #8
    58bc:	d50b      	bpl.n	58d6 <main+0x242>
		else if(strcmp("1",flag)==0){ 
    58be:	6879      	ldr	r1, [r7, #4]
    58c0:	4839      	ldr	r0, [pc, #228]	; (59a8 <main+0x314>)
    58c2:	4b3a      	ldr	r3, [pc, #232]	; (59ac <main+0x318>)
    58c4:	4798      	blx	r3
    58c6:	2800      	cmp	r0, #0
    58c8:	d10b      	bne.n	58e2 <main+0x24e>
				SerialConsoleWriteString("Update Flag was set: UPDATING FIRMWARE \r\n");
    58ca:	4839      	ldr	r0, [pc, #228]	; (59b0 <main+0x31c>)
    58cc:	4b0f      	ldr	r3, [pc, #60]	; (590c <main+0x278>)
    58ce:	4798      	blx	r3
				update_firmware();
    58d0:	4b38      	ldr	r3, [pc, #224]	; (59b4 <main+0x320>)
    58d2:	4798      	blx	r3
    58d4:	e748      	b.n	5768 <main+0xd4>
				SerialConsoleWriteString("Button was pressed: UPDATING FIRMWARE \r\n");
    58d6:	4838      	ldr	r0, [pc, #224]	; (59b8 <main+0x324>)
    58d8:	4b0c      	ldr	r3, [pc, #48]	; (590c <main+0x278>)
    58da:	4798      	blx	r3
				update_firmware();
    58dc:	4b35      	ldr	r3, [pc, #212]	; (59b4 <main+0x320>)
    58de:	4798      	blx	r3
    58e0:	e742      	b.n	5768 <main+0xd4>
				SerialConsoleWriteString("NO REASON TO UPDATE : JUMPING TO APPLICATION \r\n");
    58e2:	4836      	ldr	r0, [pc, #216]	; (59bc <main+0x328>)
    58e4:	4b09      	ldr	r3, [pc, #36]	; (590c <main+0x278>)
    58e6:	4798      	blx	r3
    58e8:	e73e      	b.n	5768 <main+0xd4>
    58ea:	46c0      	nop			; (mov r8, r8)
    58ec:	fffffd24 	.word	0xfffffd24
    58f0:	000076f8 	.word	0x000076f8
    58f4:	00003615 	.word	0x00003615
    58f8:	00000115 	.word	0x00000115
    58fc:	00000639 	.word	0x00000639
    5900:	20000009 	.word	0x20000009
    5904:	00000a09 	.word	0x00000a09
    5908:	00007428 	.word	0x00007428
    590c:	000007d9 	.word	0x000007d9
    5910:	00007444 	.word	0x00007444
    5914:	00007494 	.word	0x00007494
    5918:	000074a8 	.word	0x000074a8
    591c:	00000a29 	.word	0x00000a29
    5920:	0000113d 	.word	0x0000113d
    5924:	000074d0 	.word	0x000074d0
    5928:	00005d5d 	.word	0x00005d5d
    592c:	00004de1 	.word	0x00004de1
    5930:	000074fc 	.word	0x000074fc
    5934:	00007504 	.word	0x00007504
    5938:	00004e11 	.word	0x00004e11
    593c:	000074ec 	.word	0x000074ec
    5940:	000008ad 	.word	0x000008ad
    5944:	000076c0 	.word	0x000076c0
    5948:	00000155 	.word	0x00000155
    594c:	000007a1 	.word	0x000007a1
    5950:	0000148d 	.word	0x0000148d
    5954:	000076dc 	.word	0x000076dc
    5958:	e000ed00 	.word	0xe000ed00
    595c:	00100004 	.word	0x00100004
    5960:	0000746c 	.word	0x0000746c
    5964:	00007520 	.word	0x00007520
    5968:	00007544 	.word	0x00007544
    596c:	00005455 	.word	0x00005455
    5970:	00005411 	.word	0x00005411
    5974:	00007558 	.word	0x00007558
    5978:	00007564 	.word	0x00007564
    597c:	0000770c 	.word	0x0000770c
    5980:	0000757c 	.word	0x0000757c
    5984:	00007594 	.word	0x00007594
    5988:	00004f99 	.word	0x00004f99
    598c:	000075c0 	.word	0x000075c0
    5990:	000075f0 	.word	0x000075f0
    5994:	00007614 	.word	0x00007614
    5998:	00006071 	.word	0x00006071
    599c:	00007618 	.word	0x00007618
    59a0:	00007728 	.word	0x00007728
    59a4:	41004480 	.word	0x41004480
    59a8:	00007660 	.word	0x00007660
    59ac:	0000604d 	.word	0x0000604d
    59b0:	00007664 	.word	0x00007664
    59b4:	00005505 	.word	0x00005505
    59b8:	00007634 	.word	0x00007634
    59bc:	00007690 	.word	0x00007690

000059c0 <__udivsi3>:
    59c0:	2200      	movs	r2, #0
    59c2:	0843      	lsrs	r3, r0, #1
    59c4:	428b      	cmp	r3, r1
    59c6:	d374      	bcc.n	5ab2 <__udivsi3+0xf2>
    59c8:	0903      	lsrs	r3, r0, #4
    59ca:	428b      	cmp	r3, r1
    59cc:	d35f      	bcc.n	5a8e <__udivsi3+0xce>
    59ce:	0a03      	lsrs	r3, r0, #8
    59d0:	428b      	cmp	r3, r1
    59d2:	d344      	bcc.n	5a5e <__udivsi3+0x9e>
    59d4:	0b03      	lsrs	r3, r0, #12
    59d6:	428b      	cmp	r3, r1
    59d8:	d328      	bcc.n	5a2c <__udivsi3+0x6c>
    59da:	0c03      	lsrs	r3, r0, #16
    59dc:	428b      	cmp	r3, r1
    59de:	d30d      	bcc.n	59fc <__udivsi3+0x3c>
    59e0:	22ff      	movs	r2, #255	; 0xff
    59e2:	0209      	lsls	r1, r1, #8
    59e4:	ba12      	rev	r2, r2
    59e6:	0c03      	lsrs	r3, r0, #16
    59e8:	428b      	cmp	r3, r1
    59ea:	d302      	bcc.n	59f2 <__udivsi3+0x32>
    59ec:	1212      	asrs	r2, r2, #8
    59ee:	0209      	lsls	r1, r1, #8
    59f0:	d065      	beq.n	5abe <__udivsi3+0xfe>
    59f2:	0b03      	lsrs	r3, r0, #12
    59f4:	428b      	cmp	r3, r1
    59f6:	d319      	bcc.n	5a2c <__udivsi3+0x6c>
    59f8:	e000      	b.n	59fc <__udivsi3+0x3c>
    59fa:	0a09      	lsrs	r1, r1, #8
    59fc:	0bc3      	lsrs	r3, r0, #15
    59fe:	428b      	cmp	r3, r1
    5a00:	d301      	bcc.n	5a06 <__udivsi3+0x46>
    5a02:	03cb      	lsls	r3, r1, #15
    5a04:	1ac0      	subs	r0, r0, r3
    5a06:	4152      	adcs	r2, r2
    5a08:	0b83      	lsrs	r3, r0, #14
    5a0a:	428b      	cmp	r3, r1
    5a0c:	d301      	bcc.n	5a12 <__udivsi3+0x52>
    5a0e:	038b      	lsls	r3, r1, #14
    5a10:	1ac0      	subs	r0, r0, r3
    5a12:	4152      	adcs	r2, r2
    5a14:	0b43      	lsrs	r3, r0, #13
    5a16:	428b      	cmp	r3, r1
    5a18:	d301      	bcc.n	5a1e <__udivsi3+0x5e>
    5a1a:	034b      	lsls	r3, r1, #13
    5a1c:	1ac0      	subs	r0, r0, r3
    5a1e:	4152      	adcs	r2, r2
    5a20:	0b03      	lsrs	r3, r0, #12
    5a22:	428b      	cmp	r3, r1
    5a24:	d301      	bcc.n	5a2a <__udivsi3+0x6a>
    5a26:	030b      	lsls	r3, r1, #12
    5a28:	1ac0      	subs	r0, r0, r3
    5a2a:	4152      	adcs	r2, r2
    5a2c:	0ac3      	lsrs	r3, r0, #11
    5a2e:	428b      	cmp	r3, r1
    5a30:	d301      	bcc.n	5a36 <__udivsi3+0x76>
    5a32:	02cb      	lsls	r3, r1, #11
    5a34:	1ac0      	subs	r0, r0, r3
    5a36:	4152      	adcs	r2, r2
    5a38:	0a83      	lsrs	r3, r0, #10
    5a3a:	428b      	cmp	r3, r1
    5a3c:	d301      	bcc.n	5a42 <__udivsi3+0x82>
    5a3e:	028b      	lsls	r3, r1, #10
    5a40:	1ac0      	subs	r0, r0, r3
    5a42:	4152      	adcs	r2, r2
    5a44:	0a43      	lsrs	r3, r0, #9
    5a46:	428b      	cmp	r3, r1
    5a48:	d301      	bcc.n	5a4e <__udivsi3+0x8e>
    5a4a:	024b      	lsls	r3, r1, #9
    5a4c:	1ac0      	subs	r0, r0, r3
    5a4e:	4152      	adcs	r2, r2
    5a50:	0a03      	lsrs	r3, r0, #8
    5a52:	428b      	cmp	r3, r1
    5a54:	d301      	bcc.n	5a5a <__udivsi3+0x9a>
    5a56:	020b      	lsls	r3, r1, #8
    5a58:	1ac0      	subs	r0, r0, r3
    5a5a:	4152      	adcs	r2, r2
    5a5c:	d2cd      	bcs.n	59fa <__udivsi3+0x3a>
    5a5e:	09c3      	lsrs	r3, r0, #7
    5a60:	428b      	cmp	r3, r1
    5a62:	d301      	bcc.n	5a68 <__udivsi3+0xa8>
    5a64:	01cb      	lsls	r3, r1, #7
    5a66:	1ac0      	subs	r0, r0, r3
    5a68:	4152      	adcs	r2, r2
    5a6a:	0983      	lsrs	r3, r0, #6
    5a6c:	428b      	cmp	r3, r1
    5a6e:	d301      	bcc.n	5a74 <__udivsi3+0xb4>
    5a70:	018b      	lsls	r3, r1, #6
    5a72:	1ac0      	subs	r0, r0, r3
    5a74:	4152      	adcs	r2, r2
    5a76:	0943      	lsrs	r3, r0, #5
    5a78:	428b      	cmp	r3, r1
    5a7a:	d301      	bcc.n	5a80 <__udivsi3+0xc0>
    5a7c:	014b      	lsls	r3, r1, #5
    5a7e:	1ac0      	subs	r0, r0, r3
    5a80:	4152      	adcs	r2, r2
    5a82:	0903      	lsrs	r3, r0, #4
    5a84:	428b      	cmp	r3, r1
    5a86:	d301      	bcc.n	5a8c <__udivsi3+0xcc>
    5a88:	010b      	lsls	r3, r1, #4
    5a8a:	1ac0      	subs	r0, r0, r3
    5a8c:	4152      	adcs	r2, r2
    5a8e:	08c3      	lsrs	r3, r0, #3
    5a90:	428b      	cmp	r3, r1
    5a92:	d301      	bcc.n	5a98 <__udivsi3+0xd8>
    5a94:	00cb      	lsls	r3, r1, #3
    5a96:	1ac0      	subs	r0, r0, r3
    5a98:	4152      	adcs	r2, r2
    5a9a:	0883      	lsrs	r3, r0, #2
    5a9c:	428b      	cmp	r3, r1
    5a9e:	d301      	bcc.n	5aa4 <__udivsi3+0xe4>
    5aa0:	008b      	lsls	r3, r1, #2
    5aa2:	1ac0      	subs	r0, r0, r3
    5aa4:	4152      	adcs	r2, r2
    5aa6:	0843      	lsrs	r3, r0, #1
    5aa8:	428b      	cmp	r3, r1
    5aaa:	d301      	bcc.n	5ab0 <__udivsi3+0xf0>
    5aac:	004b      	lsls	r3, r1, #1
    5aae:	1ac0      	subs	r0, r0, r3
    5ab0:	4152      	adcs	r2, r2
    5ab2:	1a41      	subs	r1, r0, r1
    5ab4:	d200      	bcs.n	5ab8 <__udivsi3+0xf8>
    5ab6:	4601      	mov	r1, r0
    5ab8:	4152      	adcs	r2, r2
    5aba:	4610      	mov	r0, r2
    5abc:	4770      	bx	lr
    5abe:	e7ff      	b.n	5ac0 <__udivsi3+0x100>
    5ac0:	b501      	push	{r0, lr}
    5ac2:	2000      	movs	r0, #0
    5ac4:	f000 f8f0 	bl	5ca8 <__aeabi_idiv0>
    5ac8:	bd02      	pop	{r1, pc}
    5aca:	46c0      	nop			; (mov r8, r8)

00005acc <__aeabi_uidivmod>:
    5acc:	2900      	cmp	r1, #0
    5ace:	d0f7      	beq.n	5ac0 <__udivsi3+0x100>
    5ad0:	e776      	b.n	59c0 <__udivsi3>
    5ad2:	4770      	bx	lr

00005ad4 <__divsi3>:
    5ad4:	4603      	mov	r3, r0
    5ad6:	430b      	orrs	r3, r1
    5ad8:	d47f      	bmi.n	5bda <__divsi3+0x106>
    5ada:	2200      	movs	r2, #0
    5adc:	0843      	lsrs	r3, r0, #1
    5ade:	428b      	cmp	r3, r1
    5ae0:	d374      	bcc.n	5bcc <__divsi3+0xf8>
    5ae2:	0903      	lsrs	r3, r0, #4
    5ae4:	428b      	cmp	r3, r1
    5ae6:	d35f      	bcc.n	5ba8 <__divsi3+0xd4>
    5ae8:	0a03      	lsrs	r3, r0, #8
    5aea:	428b      	cmp	r3, r1
    5aec:	d344      	bcc.n	5b78 <__divsi3+0xa4>
    5aee:	0b03      	lsrs	r3, r0, #12
    5af0:	428b      	cmp	r3, r1
    5af2:	d328      	bcc.n	5b46 <__divsi3+0x72>
    5af4:	0c03      	lsrs	r3, r0, #16
    5af6:	428b      	cmp	r3, r1
    5af8:	d30d      	bcc.n	5b16 <__divsi3+0x42>
    5afa:	22ff      	movs	r2, #255	; 0xff
    5afc:	0209      	lsls	r1, r1, #8
    5afe:	ba12      	rev	r2, r2
    5b00:	0c03      	lsrs	r3, r0, #16
    5b02:	428b      	cmp	r3, r1
    5b04:	d302      	bcc.n	5b0c <__divsi3+0x38>
    5b06:	1212      	asrs	r2, r2, #8
    5b08:	0209      	lsls	r1, r1, #8
    5b0a:	d065      	beq.n	5bd8 <__divsi3+0x104>
    5b0c:	0b03      	lsrs	r3, r0, #12
    5b0e:	428b      	cmp	r3, r1
    5b10:	d319      	bcc.n	5b46 <__divsi3+0x72>
    5b12:	e000      	b.n	5b16 <__divsi3+0x42>
    5b14:	0a09      	lsrs	r1, r1, #8
    5b16:	0bc3      	lsrs	r3, r0, #15
    5b18:	428b      	cmp	r3, r1
    5b1a:	d301      	bcc.n	5b20 <__divsi3+0x4c>
    5b1c:	03cb      	lsls	r3, r1, #15
    5b1e:	1ac0      	subs	r0, r0, r3
    5b20:	4152      	adcs	r2, r2
    5b22:	0b83      	lsrs	r3, r0, #14
    5b24:	428b      	cmp	r3, r1
    5b26:	d301      	bcc.n	5b2c <__divsi3+0x58>
    5b28:	038b      	lsls	r3, r1, #14
    5b2a:	1ac0      	subs	r0, r0, r3
    5b2c:	4152      	adcs	r2, r2
    5b2e:	0b43      	lsrs	r3, r0, #13
    5b30:	428b      	cmp	r3, r1
    5b32:	d301      	bcc.n	5b38 <__divsi3+0x64>
    5b34:	034b      	lsls	r3, r1, #13
    5b36:	1ac0      	subs	r0, r0, r3
    5b38:	4152      	adcs	r2, r2
    5b3a:	0b03      	lsrs	r3, r0, #12
    5b3c:	428b      	cmp	r3, r1
    5b3e:	d301      	bcc.n	5b44 <__divsi3+0x70>
    5b40:	030b      	lsls	r3, r1, #12
    5b42:	1ac0      	subs	r0, r0, r3
    5b44:	4152      	adcs	r2, r2
    5b46:	0ac3      	lsrs	r3, r0, #11
    5b48:	428b      	cmp	r3, r1
    5b4a:	d301      	bcc.n	5b50 <__divsi3+0x7c>
    5b4c:	02cb      	lsls	r3, r1, #11
    5b4e:	1ac0      	subs	r0, r0, r3
    5b50:	4152      	adcs	r2, r2
    5b52:	0a83      	lsrs	r3, r0, #10
    5b54:	428b      	cmp	r3, r1
    5b56:	d301      	bcc.n	5b5c <__divsi3+0x88>
    5b58:	028b      	lsls	r3, r1, #10
    5b5a:	1ac0      	subs	r0, r0, r3
    5b5c:	4152      	adcs	r2, r2
    5b5e:	0a43      	lsrs	r3, r0, #9
    5b60:	428b      	cmp	r3, r1
    5b62:	d301      	bcc.n	5b68 <__divsi3+0x94>
    5b64:	024b      	lsls	r3, r1, #9
    5b66:	1ac0      	subs	r0, r0, r3
    5b68:	4152      	adcs	r2, r2
    5b6a:	0a03      	lsrs	r3, r0, #8
    5b6c:	428b      	cmp	r3, r1
    5b6e:	d301      	bcc.n	5b74 <__divsi3+0xa0>
    5b70:	020b      	lsls	r3, r1, #8
    5b72:	1ac0      	subs	r0, r0, r3
    5b74:	4152      	adcs	r2, r2
    5b76:	d2cd      	bcs.n	5b14 <__divsi3+0x40>
    5b78:	09c3      	lsrs	r3, r0, #7
    5b7a:	428b      	cmp	r3, r1
    5b7c:	d301      	bcc.n	5b82 <__divsi3+0xae>
    5b7e:	01cb      	lsls	r3, r1, #7
    5b80:	1ac0      	subs	r0, r0, r3
    5b82:	4152      	adcs	r2, r2
    5b84:	0983      	lsrs	r3, r0, #6
    5b86:	428b      	cmp	r3, r1
    5b88:	d301      	bcc.n	5b8e <__divsi3+0xba>
    5b8a:	018b      	lsls	r3, r1, #6
    5b8c:	1ac0      	subs	r0, r0, r3
    5b8e:	4152      	adcs	r2, r2
    5b90:	0943      	lsrs	r3, r0, #5
    5b92:	428b      	cmp	r3, r1
    5b94:	d301      	bcc.n	5b9a <__divsi3+0xc6>
    5b96:	014b      	lsls	r3, r1, #5
    5b98:	1ac0      	subs	r0, r0, r3
    5b9a:	4152      	adcs	r2, r2
    5b9c:	0903      	lsrs	r3, r0, #4
    5b9e:	428b      	cmp	r3, r1
    5ba0:	d301      	bcc.n	5ba6 <__divsi3+0xd2>
    5ba2:	010b      	lsls	r3, r1, #4
    5ba4:	1ac0      	subs	r0, r0, r3
    5ba6:	4152      	adcs	r2, r2
    5ba8:	08c3      	lsrs	r3, r0, #3
    5baa:	428b      	cmp	r3, r1
    5bac:	d301      	bcc.n	5bb2 <__divsi3+0xde>
    5bae:	00cb      	lsls	r3, r1, #3
    5bb0:	1ac0      	subs	r0, r0, r3
    5bb2:	4152      	adcs	r2, r2
    5bb4:	0883      	lsrs	r3, r0, #2
    5bb6:	428b      	cmp	r3, r1
    5bb8:	d301      	bcc.n	5bbe <__divsi3+0xea>
    5bba:	008b      	lsls	r3, r1, #2
    5bbc:	1ac0      	subs	r0, r0, r3
    5bbe:	4152      	adcs	r2, r2
    5bc0:	0843      	lsrs	r3, r0, #1
    5bc2:	428b      	cmp	r3, r1
    5bc4:	d301      	bcc.n	5bca <__divsi3+0xf6>
    5bc6:	004b      	lsls	r3, r1, #1
    5bc8:	1ac0      	subs	r0, r0, r3
    5bca:	4152      	adcs	r2, r2
    5bcc:	1a41      	subs	r1, r0, r1
    5bce:	d200      	bcs.n	5bd2 <__divsi3+0xfe>
    5bd0:	4601      	mov	r1, r0
    5bd2:	4152      	adcs	r2, r2
    5bd4:	4610      	mov	r0, r2
    5bd6:	4770      	bx	lr
    5bd8:	e05d      	b.n	5c96 <__divsi3+0x1c2>
    5bda:	0fca      	lsrs	r2, r1, #31
    5bdc:	d000      	beq.n	5be0 <__divsi3+0x10c>
    5bde:	4249      	negs	r1, r1
    5be0:	1003      	asrs	r3, r0, #32
    5be2:	d300      	bcc.n	5be6 <__divsi3+0x112>
    5be4:	4240      	negs	r0, r0
    5be6:	4053      	eors	r3, r2
    5be8:	2200      	movs	r2, #0
    5bea:	469c      	mov	ip, r3
    5bec:	0903      	lsrs	r3, r0, #4
    5bee:	428b      	cmp	r3, r1
    5bf0:	d32d      	bcc.n	5c4e <__divsi3+0x17a>
    5bf2:	0a03      	lsrs	r3, r0, #8
    5bf4:	428b      	cmp	r3, r1
    5bf6:	d312      	bcc.n	5c1e <__divsi3+0x14a>
    5bf8:	22fc      	movs	r2, #252	; 0xfc
    5bfa:	0189      	lsls	r1, r1, #6
    5bfc:	ba12      	rev	r2, r2
    5bfe:	0a03      	lsrs	r3, r0, #8
    5c00:	428b      	cmp	r3, r1
    5c02:	d30c      	bcc.n	5c1e <__divsi3+0x14a>
    5c04:	0189      	lsls	r1, r1, #6
    5c06:	1192      	asrs	r2, r2, #6
    5c08:	428b      	cmp	r3, r1
    5c0a:	d308      	bcc.n	5c1e <__divsi3+0x14a>
    5c0c:	0189      	lsls	r1, r1, #6
    5c0e:	1192      	asrs	r2, r2, #6
    5c10:	428b      	cmp	r3, r1
    5c12:	d304      	bcc.n	5c1e <__divsi3+0x14a>
    5c14:	0189      	lsls	r1, r1, #6
    5c16:	d03a      	beq.n	5c8e <__divsi3+0x1ba>
    5c18:	1192      	asrs	r2, r2, #6
    5c1a:	e000      	b.n	5c1e <__divsi3+0x14a>
    5c1c:	0989      	lsrs	r1, r1, #6
    5c1e:	09c3      	lsrs	r3, r0, #7
    5c20:	428b      	cmp	r3, r1
    5c22:	d301      	bcc.n	5c28 <__divsi3+0x154>
    5c24:	01cb      	lsls	r3, r1, #7
    5c26:	1ac0      	subs	r0, r0, r3
    5c28:	4152      	adcs	r2, r2
    5c2a:	0983      	lsrs	r3, r0, #6
    5c2c:	428b      	cmp	r3, r1
    5c2e:	d301      	bcc.n	5c34 <__divsi3+0x160>
    5c30:	018b      	lsls	r3, r1, #6
    5c32:	1ac0      	subs	r0, r0, r3
    5c34:	4152      	adcs	r2, r2
    5c36:	0943      	lsrs	r3, r0, #5
    5c38:	428b      	cmp	r3, r1
    5c3a:	d301      	bcc.n	5c40 <__divsi3+0x16c>
    5c3c:	014b      	lsls	r3, r1, #5
    5c3e:	1ac0      	subs	r0, r0, r3
    5c40:	4152      	adcs	r2, r2
    5c42:	0903      	lsrs	r3, r0, #4
    5c44:	428b      	cmp	r3, r1
    5c46:	d301      	bcc.n	5c4c <__divsi3+0x178>
    5c48:	010b      	lsls	r3, r1, #4
    5c4a:	1ac0      	subs	r0, r0, r3
    5c4c:	4152      	adcs	r2, r2
    5c4e:	08c3      	lsrs	r3, r0, #3
    5c50:	428b      	cmp	r3, r1
    5c52:	d301      	bcc.n	5c58 <__divsi3+0x184>
    5c54:	00cb      	lsls	r3, r1, #3
    5c56:	1ac0      	subs	r0, r0, r3
    5c58:	4152      	adcs	r2, r2
    5c5a:	0883      	lsrs	r3, r0, #2
    5c5c:	428b      	cmp	r3, r1
    5c5e:	d301      	bcc.n	5c64 <__divsi3+0x190>
    5c60:	008b      	lsls	r3, r1, #2
    5c62:	1ac0      	subs	r0, r0, r3
    5c64:	4152      	adcs	r2, r2
    5c66:	d2d9      	bcs.n	5c1c <__divsi3+0x148>
    5c68:	0843      	lsrs	r3, r0, #1
    5c6a:	428b      	cmp	r3, r1
    5c6c:	d301      	bcc.n	5c72 <__divsi3+0x19e>
    5c6e:	004b      	lsls	r3, r1, #1
    5c70:	1ac0      	subs	r0, r0, r3
    5c72:	4152      	adcs	r2, r2
    5c74:	1a41      	subs	r1, r0, r1
    5c76:	d200      	bcs.n	5c7a <__divsi3+0x1a6>
    5c78:	4601      	mov	r1, r0
    5c7a:	4663      	mov	r3, ip
    5c7c:	4152      	adcs	r2, r2
    5c7e:	105b      	asrs	r3, r3, #1
    5c80:	4610      	mov	r0, r2
    5c82:	d301      	bcc.n	5c88 <__divsi3+0x1b4>
    5c84:	4240      	negs	r0, r0
    5c86:	2b00      	cmp	r3, #0
    5c88:	d500      	bpl.n	5c8c <__divsi3+0x1b8>
    5c8a:	4249      	negs	r1, r1
    5c8c:	4770      	bx	lr
    5c8e:	4663      	mov	r3, ip
    5c90:	105b      	asrs	r3, r3, #1
    5c92:	d300      	bcc.n	5c96 <__divsi3+0x1c2>
    5c94:	4240      	negs	r0, r0
    5c96:	b501      	push	{r0, lr}
    5c98:	2000      	movs	r0, #0
    5c9a:	f000 f805 	bl	5ca8 <__aeabi_idiv0>
    5c9e:	bd02      	pop	{r1, pc}

00005ca0 <__aeabi_idivmod>:
    5ca0:	2900      	cmp	r1, #0
    5ca2:	d0f8      	beq.n	5c96 <__divsi3+0x1c2>
    5ca4:	e716      	b.n	5ad4 <__divsi3>
    5ca6:	4770      	bx	lr

00005ca8 <__aeabi_idiv0>:
    5ca8:	4770      	bx	lr
    5caa:	46c0      	nop			; (mov r8, r8)

00005cac <__aeabi_lmul>:
    5cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cae:	46ce      	mov	lr, r9
    5cb0:	4647      	mov	r7, r8
    5cb2:	0415      	lsls	r5, r2, #16
    5cb4:	0c2d      	lsrs	r5, r5, #16
    5cb6:	002e      	movs	r6, r5
    5cb8:	b580      	push	{r7, lr}
    5cba:	0407      	lsls	r7, r0, #16
    5cbc:	0c14      	lsrs	r4, r2, #16
    5cbe:	0c3f      	lsrs	r7, r7, #16
    5cc0:	4699      	mov	r9, r3
    5cc2:	0c03      	lsrs	r3, r0, #16
    5cc4:	437e      	muls	r6, r7
    5cc6:	435d      	muls	r5, r3
    5cc8:	4367      	muls	r7, r4
    5cca:	4363      	muls	r3, r4
    5ccc:	197f      	adds	r7, r7, r5
    5cce:	0c34      	lsrs	r4, r6, #16
    5cd0:	19e4      	adds	r4, r4, r7
    5cd2:	469c      	mov	ip, r3
    5cd4:	42a5      	cmp	r5, r4
    5cd6:	d903      	bls.n	5ce0 <__aeabi_lmul+0x34>
    5cd8:	2380      	movs	r3, #128	; 0x80
    5cda:	025b      	lsls	r3, r3, #9
    5cdc:	4698      	mov	r8, r3
    5cde:	44c4      	add	ip, r8
    5ce0:	464b      	mov	r3, r9
    5ce2:	4351      	muls	r1, r2
    5ce4:	4343      	muls	r3, r0
    5ce6:	0436      	lsls	r6, r6, #16
    5ce8:	0c36      	lsrs	r6, r6, #16
    5cea:	0c25      	lsrs	r5, r4, #16
    5cec:	0424      	lsls	r4, r4, #16
    5cee:	4465      	add	r5, ip
    5cf0:	19a4      	adds	r4, r4, r6
    5cf2:	1859      	adds	r1, r3, r1
    5cf4:	1949      	adds	r1, r1, r5
    5cf6:	0020      	movs	r0, r4
    5cf8:	bc0c      	pop	{r2, r3}
    5cfa:	4690      	mov	r8, r2
    5cfc:	4699      	mov	r9, r3
    5cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005d00 <__libc_init_array>:
    5d00:	b570      	push	{r4, r5, r6, lr}
    5d02:	2600      	movs	r6, #0
    5d04:	4d0c      	ldr	r5, [pc, #48]	; (5d38 <__libc_init_array+0x38>)
    5d06:	4c0d      	ldr	r4, [pc, #52]	; (5d3c <__libc_init_array+0x3c>)
    5d08:	1b64      	subs	r4, r4, r5
    5d0a:	10a4      	asrs	r4, r4, #2
    5d0c:	42a6      	cmp	r6, r4
    5d0e:	d109      	bne.n	5d24 <__libc_init_array+0x24>
    5d10:	2600      	movs	r6, #0
    5d12:	f001 fdf9 	bl	7908 <_init>
    5d16:	4d0a      	ldr	r5, [pc, #40]	; (5d40 <__libc_init_array+0x40>)
    5d18:	4c0a      	ldr	r4, [pc, #40]	; (5d44 <__libc_init_array+0x44>)
    5d1a:	1b64      	subs	r4, r4, r5
    5d1c:	10a4      	asrs	r4, r4, #2
    5d1e:	42a6      	cmp	r6, r4
    5d20:	d105      	bne.n	5d2e <__libc_init_array+0x2e>
    5d22:	bd70      	pop	{r4, r5, r6, pc}
    5d24:	00b3      	lsls	r3, r6, #2
    5d26:	58eb      	ldr	r3, [r5, r3]
    5d28:	4798      	blx	r3
    5d2a:	3601      	adds	r6, #1
    5d2c:	e7ee      	b.n	5d0c <__libc_init_array+0xc>
    5d2e:	00b3      	lsls	r3, r6, #2
    5d30:	58eb      	ldr	r3, [r5, r3]
    5d32:	4798      	blx	r3
    5d34:	3601      	adds	r6, #1
    5d36:	e7f2      	b.n	5d1e <__libc_init_array+0x1e>
    5d38:	00007914 	.word	0x00007914
    5d3c:	00007914 	.word	0x00007914
    5d40:	00007914 	.word	0x00007914
    5d44:	00007918 	.word	0x00007918

00005d48 <malloc>:
    5d48:	b510      	push	{r4, lr}
    5d4a:	4b03      	ldr	r3, [pc, #12]	; (5d58 <malloc+0x10>)
    5d4c:	0001      	movs	r1, r0
    5d4e:	6818      	ldr	r0, [r3, #0]
    5d50:	f000 f856 	bl	5e00 <_malloc_r>
    5d54:	bd10      	pop	{r4, pc}
    5d56:	46c0      	nop			; (mov r8, r8)
    5d58:	2000000c 	.word	0x2000000c

00005d5c <memset>:
    5d5c:	0003      	movs	r3, r0
    5d5e:	1882      	adds	r2, r0, r2
    5d60:	4293      	cmp	r3, r2
    5d62:	d100      	bne.n	5d66 <memset+0xa>
    5d64:	4770      	bx	lr
    5d66:	7019      	strb	r1, [r3, #0]
    5d68:	3301      	adds	r3, #1
    5d6a:	e7f9      	b.n	5d60 <memset+0x4>

00005d6c <_free_r>:
    5d6c:	b570      	push	{r4, r5, r6, lr}
    5d6e:	0005      	movs	r5, r0
    5d70:	2900      	cmp	r1, #0
    5d72:	d010      	beq.n	5d96 <_free_r+0x2a>
    5d74:	1f0c      	subs	r4, r1, #4
    5d76:	6823      	ldr	r3, [r4, #0]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	da00      	bge.n	5d7e <_free_r+0x12>
    5d7c:	18e4      	adds	r4, r4, r3
    5d7e:	0028      	movs	r0, r5
    5d80:	f000 fba6 	bl	64d0 <__malloc_lock>
    5d84:	4a1d      	ldr	r2, [pc, #116]	; (5dfc <_free_r+0x90>)
    5d86:	6813      	ldr	r3, [r2, #0]
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d105      	bne.n	5d98 <_free_r+0x2c>
    5d8c:	6063      	str	r3, [r4, #4]
    5d8e:	6014      	str	r4, [r2, #0]
    5d90:	0028      	movs	r0, r5
    5d92:	f000 fb9e 	bl	64d2 <__malloc_unlock>
    5d96:	bd70      	pop	{r4, r5, r6, pc}
    5d98:	42a3      	cmp	r3, r4
    5d9a:	d909      	bls.n	5db0 <_free_r+0x44>
    5d9c:	6821      	ldr	r1, [r4, #0]
    5d9e:	1860      	adds	r0, r4, r1
    5da0:	4283      	cmp	r3, r0
    5da2:	d1f3      	bne.n	5d8c <_free_r+0x20>
    5da4:	6818      	ldr	r0, [r3, #0]
    5da6:	685b      	ldr	r3, [r3, #4]
    5da8:	1841      	adds	r1, r0, r1
    5daa:	6021      	str	r1, [r4, #0]
    5dac:	e7ee      	b.n	5d8c <_free_r+0x20>
    5dae:	0013      	movs	r3, r2
    5db0:	685a      	ldr	r2, [r3, #4]
    5db2:	2a00      	cmp	r2, #0
    5db4:	d001      	beq.n	5dba <_free_r+0x4e>
    5db6:	42a2      	cmp	r2, r4
    5db8:	d9f9      	bls.n	5dae <_free_r+0x42>
    5dba:	6819      	ldr	r1, [r3, #0]
    5dbc:	1858      	adds	r0, r3, r1
    5dbe:	42a0      	cmp	r0, r4
    5dc0:	d10b      	bne.n	5dda <_free_r+0x6e>
    5dc2:	6820      	ldr	r0, [r4, #0]
    5dc4:	1809      	adds	r1, r1, r0
    5dc6:	1858      	adds	r0, r3, r1
    5dc8:	6019      	str	r1, [r3, #0]
    5dca:	4282      	cmp	r2, r0
    5dcc:	d1e0      	bne.n	5d90 <_free_r+0x24>
    5dce:	6810      	ldr	r0, [r2, #0]
    5dd0:	6852      	ldr	r2, [r2, #4]
    5dd2:	1841      	adds	r1, r0, r1
    5dd4:	6019      	str	r1, [r3, #0]
    5dd6:	605a      	str	r2, [r3, #4]
    5dd8:	e7da      	b.n	5d90 <_free_r+0x24>
    5dda:	42a0      	cmp	r0, r4
    5ddc:	d902      	bls.n	5de4 <_free_r+0x78>
    5dde:	230c      	movs	r3, #12
    5de0:	602b      	str	r3, [r5, #0]
    5de2:	e7d5      	b.n	5d90 <_free_r+0x24>
    5de4:	6821      	ldr	r1, [r4, #0]
    5de6:	1860      	adds	r0, r4, r1
    5de8:	4282      	cmp	r2, r0
    5dea:	d103      	bne.n	5df4 <_free_r+0x88>
    5dec:	6810      	ldr	r0, [r2, #0]
    5dee:	6852      	ldr	r2, [r2, #4]
    5df0:	1841      	adds	r1, r0, r1
    5df2:	6021      	str	r1, [r4, #0]
    5df4:	6062      	str	r2, [r4, #4]
    5df6:	605c      	str	r4, [r3, #4]
    5df8:	e7ca      	b.n	5d90 <_free_r+0x24>
    5dfa:	46c0      	nop			; (mov r8, r8)
    5dfc:	2000017c 	.word	0x2000017c

00005e00 <_malloc_r>:
    5e00:	2303      	movs	r3, #3
    5e02:	b570      	push	{r4, r5, r6, lr}
    5e04:	1ccd      	adds	r5, r1, #3
    5e06:	439d      	bics	r5, r3
    5e08:	3508      	adds	r5, #8
    5e0a:	0006      	movs	r6, r0
    5e0c:	2d0c      	cmp	r5, #12
    5e0e:	d21e      	bcs.n	5e4e <_malloc_r+0x4e>
    5e10:	250c      	movs	r5, #12
    5e12:	42a9      	cmp	r1, r5
    5e14:	d81d      	bhi.n	5e52 <_malloc_r+0x52>
    5e16:	0030      	movs	r0, r6
    5e18:	f000 fb5a 	bl	64d0 <__malloc_lock>
    5e1c:	4a25      	ldr	r2, [pc, #148]	; (5eb4 <_malloc_r+0xb4>)
    5e1e:	6814      	ldr	r4, [r2, #0]
    5e20:	0021      	movs	r1, r4
    5e22:	2900      	cmp	r1, #0
    5e24:	d119      	bne.n	5e5a <_malloc_r+0x5a>
    5e26:	4c24      	ldr	r4, [pc, #144]	; (5eb8 <_malloc_r+0xb8>)
    5e28:	6823      	ldr	r3, [r4, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d103      	bne.n	5e36 <_malloc_r+0x36>
    5e2e:	0030      	movs	r0, r6
    5e30:	f000 f844 	bl	5ebc <_sbrk_r>
    5e34:	6020      	str	r0, [r4, #0]
    5e36:	0029      	movs	r1, r5
    5e38:	0030      	movs	r0, r6
    5e3a:	f000 f83f 	bl	5ebc <_sbrk_r>
    5e3e:	1c43      	adds	r3, r0, #1
    5e40:	d12c      	bne.n	5e9c <_malloc_r+0x9c>
    5e42:	230c      	movs	r3, #12
    5e44:	0030      	movs	r0, r6
    5e46:	6033      	str	r3, [r6, #0]
    5e48:	f000 fb43 	bl	64d2 <__malloc_unlock>
    5e4c:	e003      	b.n	5e56 <_malloc_r+0x56>
    5e4e:	2d00      	cmp	r5, #0
    5e50:	dadf      	bge.n	5e12 <_malloc_r+0x12>
    5e52:	230c      	movs	r3, #12
    5e54:	6033      	str	r3, [r6, #0]
    5e56:	2000      	movs	r0, #0
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	680b      	ldr	r3, [r1, #0]
    5e5c:	1b5b      	subs	r3, r3, r5
    5e5e:	d41a      	bmi.n	5e96 <_malloc_r+0x96>
    5e60:	2b0b      	cmp	r3, #11
    5e62:	d903      	bls.n	5e6c <_malloc_r+0x6c>
    5e64:	600b      	str	r3, [r1, #0]
    5e66:	18cc      	adds	r4, r1, r3
    5e68:	6025      	str	r5, [r4, #0]
    5e6a:	e003      	b.n	5e74 <_malloc_r+0x74>
    5e6c:	428c      	cmp	r4, r1
    5e6e:	d10e      	bne.n	5e8e <_malloc_r+0x8e>
    5e70:	6863      	ldr	r3, [r4, #4]
    5e72:	6013      	str	r3, [r2, #0]
    5e74:	0030      	movs	r0, r6
    5e76:	f000 fb2c 	bl	64d2 <__malloc_unlock>
    5e7a:	0020      	movs	r0, r4
    5e7c:	2207      	movs	r2, #7
    5e7e:	300b      	adds	r0, #11
    5e80:	1d23      	adds	r3, r4, #4
    5e82:	4390      	bics	r0, r2
    5e84:	1ac3      	subs	r3, r0, r3
    5e86:	d0e7      	beq.n	5e58 <_malloc_r+0x58>
    5e88:	425a      	negs	r2, r3
    5e8a:	50e2      	str	r2, [r4, r3]
    5e8c:	e7e4      	b.n	5e58 <_malloc_r+0x58>
    5e8e:	684b      	ldr	r3, [r1, #4]
    5e90:	6063      	str	r3, [r4, #4]
    5e92:	000c      	movs	r4, r1
    5e94:	e7ee      	b.n	5e74 <_malloc_r+0x74>
    5e96:	000c      	movs	r4, r1
    5e98:	6849      	ldr	r1, [r1, #4]
    5e9a:	e7c2      	b.n	5e22 <_malloc_r+0x22>
    5e9c:	2303      	movs	r3, #3
    5e9e:	1cc4      	adds	r4, r0, #3
    5ea0:	439c      	bics	r4, r3
    5ea2:	42a0      	cmp	r0, r4
    5ea4:	d0e0      	beq.n	5e68 <_malloc_r+0x68>
    5ea6:	1a21      	subs	r1, r4, r0
    5ea8:	0030      	movs	r0, r6
    5eaa:	f000 f807 	bl	5ebc <_sbrk_r>
    5eae:	1c43      	adds	r3, r0, #1
    5eb0:	d1da      	bne.n	5e68 <_malloc_r+0x68>
    5eb2:	e7c6      	b.n	5e42 <_malloc_r+0x42>
    5eb4:	2000017c 	.word	0x2000017c
    5eb8:	20000180 	.word	0x20000180

00005ebc <_sbrk_r>:
    5ebc:	2300      	movs	r3, #0
    5ebe:	b570      	push	{r4, r5, r6, lr}
    5ec0:	4c06      	ldr	r4, [pc, #24]	; (5edc <_sbrk_r+0x20>)
    5ec2:	0005      	movs	r5, r0
    5ec4:	0008      	movs	r0, r1
    5ec6:	6023      	str	r3, [r4, #0]
    5ec8:	f7fd fc78 	bl	37bc <_sbrk>
    5ecc:	1c43      	adds	r3, r0, #1
    5ece:	d103      	bne.n	5ed8 <_sbrk_r+0x1c>
    5ed0:	6823      	ldr	r3, [r4, #0]
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d000      	beq.n	5ed8 <_sbrk_r+0x1c>
    5ed6:	602b      	str	r3, [r5, #0]
    5ed8:	bd70      	pop	{r4, r5, r6, pc}
    5eda:	46c0      	nop			; (mov r8, r8)
    5edc:	200009fc 	.word	0x200009fc

00005ee0 <setbuf>:
    5ee0:	424a      	negs	r2, r1
    5ee2:	414a      	adcs	r2, r1
    5ee4:	2380      	movs	r3, #128	; 0x80
    5ee6:	b510      	push	{r4, lr}
    5ee8:	0052      	lsls	r2, r2, #1
    5eea:	00db      	lsls	r3, r3, #3
    5eec:	f000 f802 	bl	5ef4 <setvbuf>
    5ef0:	bd10      	pop	{r4, pc}
	...

00005ef4 <setvbuf>:
    5ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef6:	001d      	movs	r5, r3
    5ef8:	4b4f      	ldr	r3, [pc, #316]	; (6038 <setvbuf+0x144>)
    5efa:	b085      	sub	sp, #20
    5efc:	681e      	ldr	r6, [r3, #0]
    5efe:	0004      	movs	r4, r0
    5f00:	000f      	movs	r7, r1
    5f02:	9200      	str	r2, [sp, #0]
    5f04:	2e00      	cmp	r6, #0
    5f06:	d005      	beq.n	5f14 <setvbuf+0x20>
    5f08:	69b3      	ldr	r3, [r6, #24]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d102      	bne.n	5f14 <setvbuf+0x20>
    5f0e:	0030      	movs	r0, r6
    5f10:	f000 fa20 	bl	6354 <__sinit>
    5f14:	4b49      	ldr	r3, [pc, #292]	; (603c <setvbuf+0x148>)
    5f16:	429c      	cmp	r4, r3
    5f18:	d150      	bne.n	5fbc <setvbuf+0xc8>
    5f1a:	6874      	ldr	r4, [r6, #4]
    5f1c:	9b00      	ldr	r3, [sp, #0]
    5f1e:	2b02      	cmp	r3, #2
    5f20:	d005      	beq.n	5f2e <setvbuf+0x3a>
    5f22:	2b01      	cmp	r3, #1
    5f24:	d900      	bls.n	5f28 <setvbuf+0x34>
    5f26:	e084      	b.n	6032 <setvbuf+0x13e>
    5f28:	2d00      	cmp	r5, #0
    5f2a:	da00      	bge.n	5f2e <setvbuf+0x3a>
    5f2c:	e081      	b.n	6032 <setvbuf+0x13e>
    5f2e:	0021      	movs	r1, r4
    5f30:	0030      	movs	r0, r6
    5f32:	f000 f9a1 	bl	6278 <_fflush_r>
    5f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f38:	2900      	cmp	r1, #0
    5f3a:	d008      	beq.n	5f4e <setvbuf+0x5a>
    5f3c:	0023      	movs	r3, r4
    5f3e:	3344      	adds	r3, #68	; 0x44
    5f40:	4299      	cmp	r1, r3
    5f42:	d002      	beq.n	5f4a <setvbuf+0x56>
    5f44:	0030      	movs	r0, r6
    5f46:	f7ff ff11 	bl	5d6c <_free_r>
    5f4a:	2300      	movs	r3, #0
    5f4c:	6363      	str	r3, [r4, #52]	; 0x34
    5f4e:	2300      	movs	r3, #0
    5f50:	61a3      	str	r3, [r4, #24]
    5f52:	6063      	str	r3, [r4, #4]
    5f54:	89a3      	ldrh	r3, [r4, #12]
    5f56:	061b      	lsls	r3, r3, #24
    5f58:	d503      	bpl.n	5f62 <setvbuf+0x6e>
    5f5a:	6921      	ldr	r1, [r4, #16]
    5f5c:	0030      	movs	r0, r6
    5f5e:	f7ff ff05 	bl	5d6c <_free_r>
    5f62:	89a3      	ldrh	r3, [r4, #12]
    5f64:	4a36      	ldr	r2, [pc, #216]	; (6040 <setvbuf+0x14c>)
    5f66:	4013      	ands	r3, r2
    5f68:	81a3      	strh	r3, [r4, #12]
    5f6a:	9b00      	ldr	r3, [sp, #0]
    5f6c:	2b02      	cmp	r3, #2
    5f6e:	d05a      	beq.n	6026 <setvbuf+0x132>
    5f70:	ab03      	add	r3, sp, #12
    5f72:	aa02      	add	r2, sp, #8
    5f74:	0021      	movs	r1, r4
    5f76:	0030      	movs	r0, r6
    5f78:	f000 fa82 	bl	6480 <__swhatbuf_r>
    5f7c:	89a3      	ldrh	r3, [r4, #12]
    5f7e:	4318      	orrs	r0, r3
    5f80:	81a0      	strh	r0, [r4, #12]
    5f82:	2d00      	cmp	r5, #0
    5f84:	d124      	bne.n	5fd0 <setvbuf+0xdc>
    5f86:	9d02      	ldr	r5, [sp, #8]
    5f88:	0028      	movs	r0, r5
    5f8a:	f7ff fedd 	bl	5d48 <malloc>
    5f8e:	9501      	str	r5, [sp, #4]
    5f90:	1e07      	subs	r7, r0, #0
    5f92:	d142      	bne.n	601a <setvbuf+0x126>
    5f94:	9b02      	ldr	r3, [sp, #8]
    5f96:	9301      	str	r3, [sp, #4]
    5f98:	42ab      	cmp	r3, r5
    5f9a:	d139      	bne.n	6010 <setvbuf+0x11c>
    5f9c:	2001      	movs	r0, #1
    5f9e:	4240      	negs	r0, r0
    5fa0:	2302      	movs	r3, #2
    5fa2:	89a2      	ldrh	r2, [r4, #12]
    5fa4:	4313      	orrs	r3, r2
    5fa6:	81a3      	strh	r3, [r4, #12]
    5fa8:	2300      	movs	r3, #0
    5faa:	60a3      	str	r3, [r4, #8]
    5fac:	0023      	movs	r3, r4
    5fae:	3347      	adds	r3, #71	; 0x47
    5fb0:	6023      	str	r3, [r4, #0]
    5fb2:	6123      	str	r3, [r4, #16]
    5fb4:	2301      	movs	r3, #1
    5fb6:	6163      	str	r3, [r4, #20]
    5fb8:	b005      	add	sp, #20
    5fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fbc:	4b21      	ldr	r3, [pc, #132]	; (6044 <setvbuf+0x150>)
    5fbe:	429c      	cmp	r4, r3
    5fc0:	d101      	bne.n	5fc6 <setvbuf+0xd2>
    5fc2:	68b4      	ldr	r4, [r6, #8]
    5fc4:	e7aa      	b.n	5f1c <setvbuf+0x28>
    5fc6:	4b20      	ldr	r3, [pc, #128]	; (6048 <setvbuf+0x154>)
    5fc8:	429c      	cmp	r4, r3
    5fca:	d1a7      	bne.n	5f1c <setvbuf+0x28>
    5fcc:	68f4      	ldr	r4, [r6, #12]
    5fce:	e7a5      	b.n	5f1c <setvbuf+0x28>
    5fd0:	2f00      	cmp	r7, #0
    5fd2:	d0d9      	beq.n	5f88 <setvbuf+0x94>
    5fd4:	69b3      	ldr	r3, [r6, #24]
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d102      	bne.n	5fe0 <setvbuf+0xec>
    5fda:	0030      	movs	r0, r6
    5fdc:	f000 f9ba 	bl	6354 <__sinit>
    5fe0:	9b00      	ldr	r3, [sp, #0]
    5fe2:	2b01      	cmp	r3, #1
    5fe4:	d103      	bne.n	5fee <setvbuf+0xfa>
    5fe6:	89a3      	ldrh	r3, [r4, #12]
    5fe8:	9a00      	ldr	r2, [sp, #0]
    5fea:	431a      	orrs	r2, r3
    5fec:	81a2      	strh	r2, [r4, #12]
    5fee:	2008      	movs	r0, #8
    5ff0:	89a3      	ldrh	r3, [r4, #12]
    5ff2:	6027      	str	r7, [r4, #0]
    5ff4:	6127      	str	r7, [r4, #16]
    5ff6:	6165      	str	r5, [r4, #20]
    5ff8:	4018      	ands	r0, r3
    5ffa:	d018      	beq.n	602e <setvbuf+0x13a>
    5ffc:	2001      	movs	r0, #1
    5ffe:	4018      	ands	r0, r3
    6000:	2300      	movs	r3, #0
    6002:	4298      	cmp	r0, r3
    6004:	d011      	beq.n	602a <setvbuf+0x136>
    6006:	426d      	negs	r5, r5
    6008:	60a3      	str	r3, [r4, #8]
    600a:	61a5      	str	r5, [r4, #24]
    600c:	0018      	movs	r0, r3
    600e:	e7d3      	b.n	5fb8 <setvbuf+0xc4>
    6010:	9801      	ldr	r0, [sp, #4]
    6012:	f7ff fe99 	bl	5d48 <malloc>
    6016:	1e07      	subs	r7, r0, #0
    6018:	d0c0      	beq.n	5f9c <setvbuf+0xa8>
    601a:	2380      	movs	r3, #128	; 0x80
    601c:	89a2      	ldrh	r2, [r4, #12]
    601e:	9d01      	ldr	r5, [sp, #4]
    6020:	4313      	orrs	r3, r2
    6022:	81a3      	strh	r3, [r4, #12]
    6024:	e7d6      	b.n	5fd4 <setvbuf+0xe0>
    6026:	2000      	movs	r0, #0
    6028:	e7ba      	b.n	5fa0 <setvbuf+0xac>
    602a:	60a5      	str	r5, [r4, #8]
    602c:	e7c4      	b.n	5fb8 <setvbuf+0xc4>
    602e:	60a0      	str	r0, [r4, #8]
    6030:	e7c2      	b.n	5fb8 <setvbuf+0xc4>
    6032:	2001      	movs	r0, #1
    6034:	4240      	negs	r0, r0
    6036:	e7bf      	b.n	5fb8 <setvbuf+0xc4>
    6038:	2000000c 	.word	0x2000000c
    603c:	00007894 	.word	0x00007894
    6040:	fffff35c 	.word	0xfffff35c
    6044:	000078b4 	.word	0x000078b4
    6048:	00007874 	.word	0x00007874

0000604c <strcmp>:
    604c:	7802      	ldrb	r2, [r0, #0]
    604e:	780b      	ldrb	r3, [r1, #0]
    6050:	2a00      	cmp	r2, #0
    6052:	d003      	beq.n	605c <strcmp+0x10>
    6054:	3001      	adds	r0, #1
    6056:	3101      	adds	r1, #1
    6058:	429a      	cmp	r2, r3
    605a:	d0f7      	beq.n	604c <strcmp>
    605c:	1ad0      	subs	r0, r2, r3
    605e:	4770      	bx	lr

00006060 <strlen>:
    6060:	2300      	movs	r3, #0
    6062:	5cc2      	ldrb	r2, [r0, r3]
    6064:	3301      	adds	r3, #1
    6066:	2a00      	cmp	r2, #0
    6068:	d1fb      	bne.n	6062 <strlen+0x2>
    606a:	1e58      	subs	r0, r3, #1
    606c:	4770      	bx	lr
	...

00006070 <strtok>:
    6070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6072:	4b12      	ldr	r3, [pc, #72]	; (60bc <strtok+0x4c>)
    6074:	0006      	movs	r6, r0
    6076:	681d      	ldr	r5, [r3, #0]
    6078:	000f      	movs	r7, r1
    607a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    607c:	2c00      	cmp	r4, #0
    607e:	d116      	bne.n	60ae <strtok+0x3e>
    6080:	2050      	movs	r0, #80	; 0x50
    6082:	f7ff fe61 	bl	5d48 <malloc>
    6086:	65a8      	str	r0, [r5, #88]	; 0x58
    6088:	6004      	str	r4, [r0, #0]
    608a:	6044      	str	r4, [r0, #4]
    608c:	6084      	str	r4, [r0, #8]
    608e:	60c4      	str	r4, [r0, #12]
    6090:	6104      	str	r4, [r0, #16]
    6092:	6144      	str	r4, [r0, #20]
    6094:	6184      	str	r4, [r0, #24]
    6096:	6284      	str	r4, [r0, #40]	; 0x28
    6098:	62c4      	str	r4, [r0, #44]	; 0x2c
    609a:	6304      	str	r4, [r0, #48]	; 0x30
    609c:	6344      	str	r4, [r0, #52]	; 0x34
    609e:	6384      	str	r4, [r0, #56]	; 0x38
    60a0:	63c4      	str	r4, [r0, #60]	; 0x3c
    60a2:	6404      	str	r4, [r0, #64]	; 0x40
    60a4:	6444      	str	r4, [r0, #68]	; 0x44
    60a6:	6484      	str	r4, [r0, #72]	; 0x48
    60a8:	64c4      	str	r4, [r0, #76]	; 0x4c
    60aa:	7704      	strb	r4, [r0, #28]
    60ac:	6244      	str	r4, [r0, #36]	; 0x24
    60ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
    60b0:	0039      	movs	r1, r7
    60b2:	0030      	movs	r0, r6
    60b4:	2301      	movs	r3, #1
    60b6:	f000 f803 	bl	60c0 <__strtok_r>
    60ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60bc:	2000000c 	.word	0x2000000c

000060c0 <__strtok_r>:
    60c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60c2:	2800      	cmp	r0, #0
    60c4:	d104      	bne.n	60d0 <__strtok_r+0x10>
    60c6:	6810      	ldr	r0, [r2, #0]
    60c8:	2800      	cmp	r0, #0
    60ca:	d101      	bne.n	60d0 <__strtok_r+0x10>
    60cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ce:	0020      	movs	r0, r4
    60d0:	000e      	movs	r6, r1
    60d2:	7805      	ldrb	r5, [r0, #0]
    60d4:	1c44      	adds	r4, r0, #1
    60d6:	7837      	ldrb	r7, [r6, #0]
    60d8:	2f00      	cmp	r7, #0
    60da:	d104      	bne.n	60e6 <__strtok_r+0x26>
    60dc:	2d00      	cmp	r5, #0
    60de:	d110      	bne.n	6102 <__strtok_r+0x42>
    60e0:	6015      	str	r5, [r2, #0]
    60e2:	0028      	movs	r0, r5
    60e4:	e7f2      	b.n	60cc <__strtok_r+0xc>
    60e6:	3601      	adds	r6, #1
    60e8:	42bd      	cmp	r5, r7
    60ea:	d1f4      	bne.n	60d6 <__strtok_r+0x16>
    60ec:	2b00      	cmp	r3, #0
    60ee:	d1ee      	bne.n	60ce <__strtok_r+0xe>
    60f0:	6014      	str	r4, [r2, #0]
    60f2:	7003      	strb	r3, [r0, #0]
    60f4:	e7ea      	b.n	60cc <__strtok_r+0xc>
    60f6:	0033      	movs	r3, r6
    60f8:	e00e      	b.n	6118 <__strtok_r+0x58>
    60fa:	3501      	adds	r5, #1
    60fc:	001c      	movs	r4, r3
    60fe:	2f00      	cmp	r7, #0
    6100:	d102      	bne.n	6108 <__strtok_r+0x48>
    6102:	000d      	movs	r5, r1
    6104:	7826      	ldrb	r6, [r4, #0]
    6106:	1c63      	adds	r3, r4, #1
    6108:	782f      	ldrb	r7, [r5, #0]
    610a:	42be      	cmp	r6, r7
    610c:	d1f5      	bne.n	60fa <__strtok_r+0x3a>
    610e:	2e00      	cmp	r6, #0
    6110:	d0f1      	beq.n	60f6 <__strtok_r+0x36>
    6112:	2400      	movs	r4, #0
    6114:	1e59      	subs	r1, r3, #1
    6116:	700c      	strb	r4, [r1, #0]
    6118:	6013      	str	r3, [r2, #0]
    611a:	e7d7      	b.n	60cc <__strtok_r+0xc>

0000611c <_vsiprintf_r>:
    611c:	b530      	push	{r4, r5, lr}
    611e:	b09b      	sub	sp, #108	; 0x6c
    6120:	9100      	str	r1, [sp, #0]
    6122:	9104      	str	r1, [sp, #16]
    6124:	4908      	ldr	r1, [pc, #32]	; (6148 <_vsiprintf_r+0x2c>)
    6126:	466d      	mov	r5, sp
    6128:	9102      	str	r1, [sp, #8]
    612a:	9105      	str	r1, [sp, #20]
    612c:	2101      	movs	r1, #1
    612e:	2482      	movs	r4, #130	; 0x82
    6130:	4249      	negs	r1, r1
    6132:	81e9      	strh	r1, [r5, #14]
    6134:	00a4      	lsls	r4, r4, #2
    6136:	4669      	mov	r1, sp
    6138:	81ac      	strh	r4, [r5, #12]
    613a:	f000 fa2d 	bl	6598 <_svfiprintf_r>
    613e:	2300      	movs	r3, #0
    6140:	9a00      	ldr	r2, [sp, #0]
    6142:	7013      	strb	r3, [r2, #0]
    6144:	b01b      	add	sp, #108	; 0x6c
    6146:	bd30      	pop	{r4, r5, pc}
    6148:	7fffffff 	.word	0x7fffffff

0000614c <vsiprintf>:
    614c:	b510      	push	{r4, lr}
    614e:	0013      	movs	r3, r2
    6150:	000a      	movs	r2, r1
    6152:	0001      	movs	r1, r0
    6154:	4802      	ldr	r0, [pc, #8]	; (6160 <vsiprintf+0x14>)
    6156:	6800      	ldr	r0, [r0, #0]
    6158:	f7ff ffe0 	bl	611c <_vsiprintf_r>
    615c:	bd10      	pop	{r4, pc}
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	2000000c 	.word	0x2000000c

00006164 <__sflush_r>:
    6164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6166:	898a      	ldrh	r2, [r1, #12]
    6168:	0005      	movs	r5, r0
    616a:	000c      	movs	r4, r1
    616c:	0713      	lsls	r3, r2, #28
    616e:	d460      	bmi.n	6232 <__sflush_r+0xce>
    6170:	684b      	ldr	r3, [r1, #4]
    6172:	2b00      	cmp	r3, #0
    6174:	dc04      	bgt.n	6180 <__sflush_r+0x1c>
    6176:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6178:	2b00      	cmp	r3, #0
    617a:	dc01      	bgt.n	6180 <__sflush_r+0x1c>
    617c:	2000      	movs	r0, #0
    617e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6180:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6182:	2f00      	cmp	r7, #0
    6184:	d0fa      	beq.n	617c <__sflush_r+0x18>
    6186:	2300      	movs	r3, #0
    6188:	682e      	ldr	r6, [r5, #0]
    618a:	602b      	str	r3, [r5, #0]
    618c:	2380      	movs	r3, #128	; 0x80
    618e:	015b      	lsls	r3, r3, #5
    6190:	401a      	ands	r2, r3
    6192:	d034      	beq.n	61fe <__sflush_r+0x9a>
    6194:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6196:	89a3      	ldrh	r3, [r4, #12]
    6198:	075b      	lsls	r3, r3, #29
    619a:	d506      	bpl.n	61aa <__sflush_r+0x46>
    619c:	6863      	ldr	r3, [r4, #4]
    619e:	1ac0      	subs	r0, r0, r3
    61a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61a2:	2b00      	cmp	r3, #0
    61a4:	d001      	beq.n	61aa <__sflush_r+0x46>
    61a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    61a8:	1ac0      	subs	r0, r0, r3
    61aa:	0002      	movs	r2, r0
    61ac:	6a21      	ldr	r1, [r4, #32]
    61ae:	2300      	movs	r3, #0
    61b0:	0028      	movs	r0, r5
    61b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    61b4:	47b8      	blx	r7
    61b6:	89a1      	ldrh	r1, [r4, #12]
    61b8:	1c43      	adds	r3, r0, #1
    61ba:	d106      	bne.n	61ca <__sflush_r+0x66>
    61bc:	682b      	ldr	r3, [r5, #0]
    61be:	2b1d      	cmp	r3, #29
    61c0:	d831      	bhi.n	6226 <__sflush_r+0xc2>
    61c2:	4a2c      	ldr	r2, [pc, #176]	; (6274 <__sflush_r+0x110>)
    61c4:	40da      	lsrs	r2, r3
    61c6:	07d3      	lsls	r3, r2, #31
    61c8:	d52d      	bpl.n	6226 <__sflush_r+0xc2>
    61ca:	2300      	movs	r3, #0
    61cc:	6063      	str	r3, [r4, #4]
    61ce:	6923      	ldr	r3, [r4, #16]
    61d0:	6023      	str	r3, [r4, #0]
    61d2:	04cb      	lsls	r3, r1, #19
    61d4:	d505      	bpl.n	61e2 <__sflush_r+0x7e>
    61d6:	1c43      	adds	r3, r0, #1
    61d8:	d102      	bne.n	61e0 <__sflush_r+0x7c>
    61da:	682b      	ldr	r3, [r5, #0]
    61dc:	2b00      	cmp	r3, #0
    61de:	d100      	bne.n	61e2 <__sflush_r+0x7e>
    61e0:	6560      	str	r0, [r4, #84]	; 0x54
    61e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    61e4:	602e      	str	r6, [r5, #0]
    61e6:	2900      	cmp	r1, #0
    61e8:	d0c8      	beq.n	617c <__sflush_r+0x18>
    61ea:	0023      	movs	r3, r4
    61ec:	3344      	adds	r3, #68	; 0x44
    61ee:	4299      	cmp	r1, r3
    61f0:	d002      	beq.n	61f8 <__sflush_r+0x94>
    61f2:	0028      	movs	r0, r5
    61f4:	f7ff fdba 	bl	5d6c <_free_r>
    61f8:	2000      	movs	r0, #0
    61fa:	6360      	str	r0, [r4, #52]	; 0x34
    61fc:	e7bf      	b.n	617e <__sflush_r+0x1a>
    61fe:	2301      	movs	r3, #1
    6200:	6a21      	ldr	r1, [r4, #32]
    6202:	0028      	movs	r0, r5
    6204:	47b8      	blx	r7
    6206:	1c43      	adds	r3, r0, #1
    6208:	d1c5      	bne.n	6196 <__sflush_r+0x32>
    620a:	682b      	ldr	r3, [r5, #0]
    620c:	2b00      	cmp	r3, #0
    620e:	d0c2      	beq.n	6196 <__sflush_r+0x32>
    6210:	2b1d      	cmp	r3, #29
    6212:	d001      	beq.n	6218 <__sflush_r+0xb4>
    6214:	2b16      	cmp	r3, #22
    6216:	d101      	bne.n	621c <__sflush_r+0xb8>
    6218:	602e      	str	r6, [r5, #0]
    621a:	e7af      	b.n	617c <__sflush_r+0x18>
    621c:	2340      	movs	r3, #64	; 0x40
    621e:	89a2      	ldrh	r2, [r4, #12]
    6220:	4313      	orrs	r3, r2
    6222:	81a3      	strh	r3, [r4, #12]
    6224:	e7ab      	b.n	617e <__sflush_r+0x1a>
    6226:	2340      	movs	r3, #64	; 0x40
    6228:	430b      	orrs	r3, r1
    622a:	2001      	movs	r0, #1
    622c:	81a3      	strh	r3, [r4, #12]
    622e:	4240      	negs	r0, r0
    6230:	e7a5      	b.n	617e <__sflush_r+0x1a>
    6232:	690f      	ldr	r7, [r1, #16]
    6234:	2f00      	cmp	r7, #0
    6236:	d0a1      	beq.n	617c <__sflush_r+0x18>
    6238:	680b      	ldr	r3, [r1, #0]
    623a:	600f      	str	r7, [r1, #0]
    623c:	1bdb      	subs	r3, r3, r7
    623e:	9301      	str	r3, [sp, #4]
    6240:	2300      	movs	r3, #0
    6242:	0792      	lsls	r2, r2, #30
    6244:	d100      	bne.n	6248 <__sflush_r+0xe4>
    6246:	694b      	ldr	r3, [r1, #20]
    6248:	60a3      	str	r3, [r4, #8]
    624a:	9b01      	ldr	r3, [sp, #4]
    624c:	2b00      	cmp	r3, #0
    624e:	dc00      	bgt.n	6252 <__sflush_r+0xee>
    6250:	e794      	b.n	617c <__sflush_r+0x18>
    6252:	9b01      	ldr	r3, [sp, #4]
    6254:	003a      	movs	r2, r7
    6256:	6a21      	ldr	r1, [r4, #32]
    6258:	0028      	movs	r0, r5
    625a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    625c:	47b0      	blx	r6
    625e:	2800      	cmp	r0, #0
    6260:	dc03      	bgt.n	626a <__sflush_r+0x106>
    6262:	2340      	movs	r3, #64	; 0x40
    6264:	89a2      	ldrh	r2, [r4, #12]
    6266:	4313      	orrs	r3, r2
    6268:	e7df      	b.n	622a <__sflush_r+0xc6>
    626a:	9b01      	ldr	r3, [sp, #4]
    626c:	183f      	adds	r7, r7, r0
    626e:	1a1b      	subs	r3, r3, r0
    6270:	9301      	str	r3, [sp, #4]
    6272:	e7ea      	b.n	624a <__sflush_r+0xe6>
    6274:	20400001 	.word	0x20400001

00006278 <_fflush_r>:
    6278:	690b      	ldr	r3, [r1, #16]
    627a:	b570      	push	{r4, r5, r6, lr}
    627c:	0005      	movs	r5, r0
    627e:	000c      	movs	r4, r1
    6280:	2b00      	cmp	r3, #0
    6282:	d101      	bne.n	6288 <_fflush_r+0x10>
    6284:	2000      	movs	r0, #0
    6286:	bd70      	pop	{r4, r5, r6, pc}
    6288:	2800      	cmp	r0, #0
    628a:	d004      	beq.n	6296 <_fflush_r+0x1e>
    628c:	6983      	ldr	r3, [r0, #24]
    628e:	2b00      	cmp	r3, #0
    6290:	d101      	bne.n	6296 <_fflush_r+0x1e>
    6292:	f000 f85f 	bl	6354 <__sinit>
    6296:	4b0b      	ldr	r3, [pc, #44]	; (62c4 <_fflush_r+0x4c>)
    6298:	429c      	cmp	r4, r3
    629a:	d109      	bne.n	62b0 <_fflush_r+0x38>
    629c:	686c      	ldr	r4, [r5, #4]
    629e:	220c      	movs	r2, #12
    62a0:	5ea3      	ldrsh	r3, [r4, r2]
    62a2:	2b00      	cmp	r3, #0
    62a4:	d0ee      	beq.n	6284 <_fflush_r+0xc>
    62a6:	0021      	movs	r1, r4
    62a8:	0028      	movs	r0, r5
    62aa:	f7ff ff5b 	bl	6164 <__sflush_r>
    62ae:	e7ea      	b.n	6286 <_fflush_r+0xe>
    62b0:	4b05      	ldr	r3, [pc, #20]	; (62c8 <_fflush_r+0x50>)
    62b2:	429c      	cmp	r4, r3
    62b4:	d101      	bne.n	62ba <_fflush_r+0x42>
    62b6:	68ac      	ldr	r4, [r5, #8]
    62b8:	e7f1      	b.n	629e <_fflush_r+0x26>
    62ba:	4b04      	ldr	r3, [pc, #16]	; (62cc <_fflush_r+0x54>)
    62bc:	429c      	cmp	r4, r3
    62be:	d1ee      	bne.n	629e <_fflush_r+0x26>
    62c0:	68ec      	ldr	r4, [r5, #12]
    62c2:	e7ec      	b.n	629e <_fflush_r+0x26>
    62c4:	00007894 	.word	0x00007894
    62c8:	000078b4 	.word	0x000078b4
    62cc:	00007874 	.word	0x00007874

000062d0 <_cleanup_r>:
    62d0:	b510      	push	{r4, lr}
    62d2:	4902      	ldr	r1, [pc, #8]	; (62dc <_cleanup_r+0xc>)
    62d4:	f000 f8b2 	bl	643c <_fwalk_reent>
    62d8:	bd10      	pop	{r4, pc}
    62da:	46c0      	nop			; (mov r8, r8)
    62dc:	00006279 	.word	0x00006279

000062e0 <std.isra.0>:
    62e0:	2300      	movs	r3, #0
    62e2:	b510      	push	{r4, lr}
    62e4:	0004      	movs	r4, r0
    62e6:	6003      	str	r3, [r0, #0]
    62e8:	6043      	str	r3, [r0, #4]
    62ea:	6083      	str	r3, [r0, #8]
    62ec:	8181      	strh	r1, [r0, #12]
    62ee:	6643      	str	r3, [r0, #100]	; 0x64
    62f0:	81c2      	strh	r2, [r0, #14]
    62f2:	6103      	str	r3, [r0, #16]
    62f4:	6143      	str	r3, [r0, #20]
    62f6:	6183      	str	r3, [r0, #24]
    62f8:	0019      	movs	r1, r3
    62fa:	2208      	movs	r2, #8
    62fc:	305c      	adds	r0, #92	; 0x5c
    62fe:	f7ff fd2d 	bl	5d5c <memset>
    6302:	4b05      	ldr	r3, [pc, #20]	; (6318 <std.isra.0+0x38>)
    6304:	6224      	str	r4, [r4, #32]
    6306:	6263      	str	r3, [r4, #36]	; 0x24
    6308:	4b04      	ldr	r3, [pc, #16]	; (631c <std.isra.0+0x3c>)
    630a:	62a3      	str	r3, [r4, #40]	; 0x28
    630c:	4b04      	ldr	r3, [pc, #16]	; (6320 <std.isra.0+0x40>)
    630e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6310:	4b04      	ldr	r3, [pc, #16]	; (6324 <std.isra.0+0x44>)
    6312:	6323      	str	r3, [r4, #48]	; 0x30
    6314:	bd10      	pop	{r4, pc}
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	00006ab1 	.word	0x00006ab1
    631c:	00006ad9 	.word	0x00006ad9
    6320:	00006b11 	.word	0x00006b11
    6324:	00006b3d 	.word	0x00006b3d

00006328 <__sfmoreglue>:
    6328:	b570      	push	{r4, r5, r6, lr}
    632a:	2568      	movs	r5, #104	; 0x68
    632c:	1e4a      	subs	r2, r1, #1
    632e:	4355      	muls	r5, r2
    6330:	000e      	movs	r6, r1
    6332:	0029      	movs	r1, r5
    6334:	3174      	adds	r1, #116	; 0x74
    6336:	f7ff fd63 	bl	5e00 <_malloc_r>
    633a:	1e04      	subs	r4, r0, #0
    633c:	d008      	beq.n	6350 <__sfmoreglue+0x28>
    633e:	2100      	movs	r1, #0
    6340:	002a      	movs	r2, r5
    6342:	6001      	str	r1, [r0, #0]
    6344:	6046      	str	r6, [r0, #4]
    6346:	300c      	adds	r0, #12
    6348:	60a0      	str	r0, [r4, #8]
    634a:	3268      	adds	r2, #104	; 0x68
    634c:	f7ff fd06 	bl	5d5c <memset>
    6350:	0020      	movs	r0, r4
    6352:	bd70      	pop	{r4, r5, r6, pc}

00006354 <__sinit>:
    6354:	6983      	ldr	r3, [r0, #24]
    6356:	b513      	push	{r0, r1, r4, lr}
    6358:	0004      	movs	r4, r0
    635a:	2b00      	cmp	r3, #0
    635c:	d128      	bne.n	63b0 <__sinit+0x5c>
    635e:	6483      	str	r3, [r0, #72]	; 0x48
    6360:	64c3      	str	r3, [r0, #76]	; 0x4c
    6362:	6503      	str	r3, [r0, #80]	; 0x50
    6364:	4b13      	ldr	r3, [pc, #76]	; (63b4 <__sinit+0x60>)
    6366:	4a14      	ldr	r2, [pc, #80]	; (63b8 <__sinit+0x64>)
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	6282      	str	r2, [r0, #40]	; 0x28
    636c:	9301      	str	r3, [sp, #4]
    636e:	4298      	cmp	r0, r3
    6370:	d101      	bne.n	6376 <__sinit+0x22>
    6372:	2301      	movs	r3, #1
    6374:	6183      	str	r3, [r0, #24]
    6376:	0020      	movs	r0, r4
    6378:	f000 f820 	bl	63bc <__sfp>
    637c:	6060      	str	r0, [r4, #4]
    637e:	0020      	movs	r0, r4
    6380:	f000 f81c 	bl	63bc <__sfp>
    6384:	60a0      	str	r0, [r4, #8]
    6386:	0020      	movs	r0, r4
    6388:	f000 f818 	bl	63bc <__sfp>
    638c:	2200      	movs	r2, #0
    638e:	60e0      	str	r0, [r4, #12]
    6390:	2104      	movs	r1, #4
    6392:	6860      	ldr	r0, [r4, #4]
    6394:	f7ff ffa4 	bl	62e0 <std.isra.0>
    6398:	2201      	movs	r2, #1
    639a:	2109      	movs	r1, #9
    639c:	68a0      	ldr	r0, [r4, #8]
    639e:	f7ff ff9f 	bl	62e0 <std.isra.0>
    63a2:	2202      	movs	r2, #2
    63a4:	2112      	movs	r1, #18
    63a6:	68e0      	ldr	r0, [r4, #12]
    63a8:	f7ff ff9a 	bl	62e0 <std.isra.0>
    63ac:	2301      	movs	r3, #1
    63ae:	61a3      	str	r3, [r4, #24]
    63b0:	bd13      	pop	{r0, r1, r4, pc}
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	00007870 	.word	0x00007870
    63b8:	000062d1 	.word	0x000062d1

000063bc <__sfp>:
    63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63be:	4b1e      	ldr	r3, [pc, #120]	; (6438 <__sfp+0x7c>)
    63c0:	0007      	movs	r7, r0
    63c2:	681e      	ldr	r6, [r3, #0]
    63c4:	69b3      	ldr	r3, [r6, #24]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d102      	bne.n	63d0 <__sfp+0x14>
    63ca:	0030      	movs	r0, r6
    63cc:	f7ff ffc2 	bl	6354 <__sinit>
    63d0:	3648      	adds	r6, #72	; 0x48
    63d2:	68b4      	ldr	r4, [r6, #8]
    63d4:	6873      	ldr	r3, [r6, #4]
    63d6:	3b01      	subs	r3, #1
    63d8:	d504      	bpl.n	63e4 <__sfp+0x28>
    63da:	6833      	ldr	r3, [r6, #0]
    63dc:	2b00      	cmp	r3, #0
    63de:	d007      	beq.n	63f0 <__sfp+0x34>
    63e0:	6836      	ldr	r6, [r6, #0]
    63e2:	e7f6      	b.n	63d2 <__sfp+0x16>
    63e4:	220c      	movs	r2, #12
    63e6:	5ea5      	ldrsh	r5, [r4, r2]
    63e8:	2d00      	cmp	r5, #0
    63ea:	d00d      	beq.n	6408 <__sfp+0x4c>
    63ec:	3468      	adds	r4, #104	; 0x68
    63ee:	e7f2      	b.n	63d6 <__sfp+0x1a>
    63f0:	2104      	movs	r1, #4
    63f2:	0038      	movs	r0, r7
    63f4:	f7ff ff98 	bl	6328 <__sfmoreglue>
    63f8:	6030      	str	r0, [r6, #0]
    63fa:	2800      	cmp	r0, #0
    63fc:	d1f0      	bne.n	63e0 <__sfp+0x24>
    63fe:	230c      	movs	r3, #12
    6400:	0004      	movs	r4, r0
    6402:	603b      	str	r3, [r7, #0]
    6404:	0020      	movs	r0, r4
    6406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6408:	2301      	movs	r3, #1
    640a:	0020      	movs	r0, r4
    640c:	425b      	negs	r3, r3
    640e:	81e3      	strh	r3, [r4, #14]
    6410:	3302      	adds	r3, #2
    6412:	81a3      	strh	r3, [r4, #12]
    6414:	6665      	str	r5, [r4, #100]	; 0x64
    6416:	6025      	str	r5, [r4, #0]
    6418:	60a5      	str	r5, [r4, #8]
    641a:	6065      	str	r5, [r4, #4]
    641c:	6125      	str	r5, [r4, #16]
    641e:	6165      	str	r5, [r4, #20]
    6420:	61a5      	str	r5, [r4, #24]
    6422:	2208      	movs	r2, #8
    6424:	0029      	movs	r1, r5
    6426:	305c      	adds	r0, #92	; 0x5c
    6428:	f7ff fc98 	bl	5d5c <memset>
    642c:	6365      	str	r5, [r4, #52]	; 0x34
    642e:	63a5      	str	r5, [r4, #56]	; 0x38
    6430:	64a5      	str	r5, [r4, #72]	; 0x48
    6432:	64e5      	str	r5, [r4, #76]	; 0x4c
    6434:	e7e6      	b.n	6404 <__sfp+0x48>
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	00007870 	.word	0x00007870

0000643c <_fwalk_reent>:
    643c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    643e:	0004      	movs	r4, r0
    6440:	0007      	movs	r7, r0
    6442:	2600      	movs	r6, #0
    6444:	9101      	str	r1, [sp, #4]
    6446:	3448      	adds	r4, #72	; 0x48
    6448:	2c00      	cmp	r4, #0
    644a:	d101      	bne.n	6450 <_fwalk_reent+0x14>
    644c:	0030      	movs	r0, r6
    644e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6450:	6863      	ldr	r3, [r4, #4]
    6452:	68a5      	ldr	r5, [r4, #8]
    6454:	9300      	str	r3, [sp, #0]
    6456:	9b00      	ldr	r3, [sp, #0]
    6458:	3b01      	subs	r3, #1
    645a:	9300      	str	r3, [sp, #0]
    645c:	d501      	bpl.n	6462 <_fwalk_reent+0x26>
    645e:	6824      	ldr	r4, [r4, #0]
    6460:	e7f2      	b.n	6448 <_fwalk_reent+0xc>
    6462:	89ab      	ldrh	r3, [r5, #12]
    6464:	2b01      	cmp	r3, #1
    6466:	d908      	bls.n	647a <_fwalk_reent+0x3e>
    6468:	220e      	movs	r2, #14
    646a:	5eab      	ldrsh	r3, [r5, r2]
    646c:	3301      	adds	r3, #1
    646e:	d004      	beq.n	647a <_fwalk_reent+0x3e>
    6470:	0029      	movs	r1, r5
    6472:	0038      	movs	r0, r7
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	4798      	blx	r3
    6478:	4306      	orrs	r6, r0
    647a:	3568      	adds	r5, #104	; 0x68
    647c:	e7eb      	b.n	6456 <_fwalk_reent+0x1a>
	...

00006480 <__swhatbuf_r>:
    6480:	b570      	push	{r4, r5, r6, lr}
    6482:	000e      	movs	r6, r1
    6484:	001d      	movs	r5, r3
    6486:	230e      	movs	r3, #14
    6488:	5ec9      	ldrsh	r1, [r1, r3]
    648a:	b090      	sub	sp, #64	; 0x40
    648c:	0014      	movs	r4, r2
    648e:	2900      	cmp	r1, #0
    6490:	da07      	bge.n	64a2 <__swhatbuf_r+0x22>
    6492:	2300      	movs	r3, #0
    6494:	602b      	str	r3, [r5, #0]
    6496:	89b3      	ldrh	r3, [r6, #12]
    6498:	061b      	lsls	r3, r3, #24
    649a:	d411      	bmi.n	64c0 <__swhatbuf_r+0x40>
    649c:	2380      	movs	r3, #128	; 0x80
    649e:	00db      	lsls	r3, r3, #3
    64a0:	e00f      	b.n	64c2 <__swhatbuf_r+0x42>
    64a2:	aa01      	add	r2, sp, #4
    64a4:	f000 fb76 	bl	6b94 <_fstat_r>
    64a8:	2800      	cmp	r0, #0
    64aa:	dbf2      	blt.n	6492 <__swhatbuf_r+0x12>
    64ac:	22f0      	movs	r2, #240	; 0xf0
    64ae:	9b02      	ldr	r3, [sp, #8]
    64b0:	0212      	lsls	r2, r2, #8
    64b2:	4013      	ands	r3, r2
    64b4:	4a05      	ldr	r2, [pc, #20]	; (64cc <__swhatbuf_r+0x4c>)
    64b6:	189b      	adds	r3, r3, r2
    64b8:	425a      	negs	r2, r3
    64ba:	4153      	adcs	r3, r2
    64bc:	602b      	str	r3, [r5, #0]
    64be:	e7ed      	b.n	649c <__swhatbuf_r+0x1c>
    64c0:	2340      	movs	r3, #64	; 0x40
    64c2:	2000      	movs	r0, #0
    64c4:	6023      	str	r3, [r4, #0]
    64c6:	b010      	add	sp, #64	; 0x40
    64c8:	bd70      	pop	{r4, r5, r6, pc}
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	ffffe000 	.word	0xffffe000

000064d0 <__malloc_lock>:
    64d0:	4770      	bx	lr

000064d2 <__malloc_unlock>:
    64d2:	4770      	bx	lr

000064d4 <__ssputs_r>:
    64d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64d6:	688e      	ldr	r6, [r1, #8]
    64d8:	b085      	sub	sp, #20
    64da:	0007      	movs	r7, r0
    64dc:	000c      	movs	r4, r1
    64de:	9203      	str	r2, [sp, #12]
    64e0:	9301      	str	r3, [sp, #4]
    64e2:	429e      	cmp	r6, r3
    64e4:	d839      	bhi.n	655a <__ssputs_r+0x86>
    64e6:	2390      	movs	r3, #144	; 0x90
    64e8:	898a      	ldrh	r2, [r1, #12]
    64ea:	00db      	lsls	r3, r3, #3
    64ec:	421a      	tst	r2, r3
    64ee:	d034      	beq.n	655a <__ssputs_r+0x86>
    64f0:	2503      	movs	r5, #3
    64f2:	6909      	ldr	r1, [r1, #16]
    64f4:	6823      	ldr	r3, [r4, #0]
    64f6:	1a5b      	subs	r3, r3, r1
    64f8:	9302      	str	r3, [sp, #8]
    64fa:	6963      	ldr	r3, [r4, #20]
    64fc:	9802      	ldr	r0, [sp, #8]
    64fe:	435d      	muls	r5, r3
    6500:	0feb      	lsrs	r3, r5, #31
    6502:	195d      	adds	r5, r3, r5
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	106d      	asrs	r5, r5, #1
    6508:	3301      	adds	r3, #1
    650a:	181b      	adds	r3, r3, r0
    650c:	42ab      	cmp	r3, r5
    650e:	d900      	bls.n	6512 <__ssputs_r+0x3e>
    6510:	001d      	movs	r5, r3
    6512:	0553      	lsls	r3, r2, #21
    6514:	d532      	bpl.n	657c <__ssputs_r+0xa8>
    6516:	0029      	movs	r1, r5
    6518:	0038      	movs	r0, r7
    651a:	f7ff fc71 	bl	5e00 <_malloc_r>
    651e:	1e06      	subs	r6, r0, #0
    6520:	d109      	bne.n	6536 <__ssputs_r+0x62>
    6522:	230c      	movs	r3, #12
    6524:	603b      	str	r3, [r7, #0]
    6526:	2340      	movs	r3, #64	; 0x40
    6528:	2001      	movs	r0, #1
    652a:	89a2      	ldrh	r2, [r4, #12]
    652c:	4240      	negs	r0, r0
    652e:	4313      	orrs	r3, r2
    6530:	81a3      	strh	r3, [r4, #12]
    6532:	b005      	add	sp, #20
    6534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6536:	9a02      	ldr	r2, [sp, #8]
    6538:	6921      	ldr	r1, [r4, #16]
    653a:	f000 fb5c 	bl	6bf6 <memcpy>
    653e:	89a3      	ldrh	r3, [r4, #12]
    6540:	4a14      	ldr	r2, [pc, #80]	; (6594 <__ssputs_r+0xc0>)
    6542:	401a      	ands	r2, r3
    6544:	2380      	movs	r3, #128	; 0x80
    6546:	4313      	orrs	r3, r2
    6548:	81a3      	strh	r3, [r4, #12]
    654a:	9b02      	ldr	r3, [sp, #8]
    654c:	6126      	str	r6, [r4, #16]
    654e:	18f6      	adds	r6, r6, r3
    6550:	6026      	str	r6, [r4, #0]
    6552:	6165      	str	r5, [r4, #20]
    6554:	9e01      	ldr	r6, [sp, #4]
    6556:	1aed      	subs	r5, r5, r3
    6558:	60a5      	str	r5, [r4, #8]
    655a:	9b01      	ldr	r3, [sp, #4]
    655c:	42b3      	cmp	r3, r6
    655e:	d200      	bcs.n	6562 <__ssputs_r+0x8e>
    6560:	001e      	movs	r6, r3
    6562:	0032      	movs	r2, r6
    6564:	9903      	ldr	r1, [sp, #12]
    6566:	6820      	ldr	r0, [r4, #0]
    6568:	f000 fb4e 	bl	6c08 <memmove>
    656c:	68a3      	ldr	r3, [r4, #8]
    656e:	2000      	movs	r0, #0
    6570:	1b9b      	subs	r3, r3, r6
    6572:	60a3      	str	r3, [r4, #8]
    6574:	6823      	ldr	r3, [r4, #0]
    6576:	199e      	adds	r6, r3, r6
    6578:	6026      	str	r6, [r4, #0]
    657a:	e7da      	b.n	6532 <__ssputs_r+0x5e>
    657c:	002a      	movs	r2, r5
    657e:	0038      	movs	r0, r7
    6580:	f000 fb54 	bl	6c2c <_realloc_r>
    6584:	1e06      	subs	r6, r0, #0
    6586:	d1e0      	bne.n	654a <__ssputs_r+0x76>
    6588:	6921      	ldr	r1, [r4, #16]
    658a:	0038      	movs	r0, r7
    658c:	f7ff fbee 	bl	5d6c <_free_r>
    6590:	e7c7      	b.n	6522 <__ssputs_r+0x4e>
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	fffffb7f 	.word	0xfffffb7f

00006598 <_svfiprintf_r>:
    6598:	b5f0      	push	{r4, r5, r6, r7, lr}
    659a:	b09f      	sub	sp, #124	; 0x7c
    659c:	9002      	str	r0, [sp, #8]
    659e:	9305      	str	r3, [sp, #20]
    65a0:	898b      	ldrh	r3, [r1, #12]
    65a2:	000f      	movs	r7, r1
    65a4:	0016      	movs	r6, r2
    65a6:	061b      	lsls	r3, r3, #24
    65a8:	d511      	bpl.n	65ce <_svfiprintf_r+0x36>
    65aa:	690b      	ldr	r3, [r1, #16]
    65ac:	2b00      	cmp	r3, #0
    65ae:	d10e      	bne.n	65ce <_svfiprintf_r+0x36>
    65b0:	2140      	movs	r1, #64	; 0x40
    65b2:	f7ff fc25 	bl	5e00 <_malloc_r>
    65b6:	6038      	str	r0, [r7, #0]
    65b8:	6138      	str	r0, [r7, #16]
    65ba:	2800      	cmp	r0, #0
    65bc:	d105      	bne.n	65ca <_svfiprintf_r+0x32>
    65be:	230c      	movs	r3, #12
    65c0:	9a02      	ldr	r2, [sp, #8]
    65c2:	3801      	subs	r0, #1
    65c4:	6013      	str	r3, [r2, #0]
    65c6:	b01f      	add	sp, #124	; 0x7c
    65c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65ca:	2340      	movs	r3, #64	; 0x40
    65cc:	617b      	str	r3, [r7, #20]
    65ce:	2300      	movs	r3, #0
    65d0:	ad06      	add	r5, sp, #24
    65d2:	616b      	str	r3, [r5, #20]
    65d4:	3320      	adds	r3, #32
    65d6:	766b      	strb	r3, [r5, #25]
    65d8:	3310      	adds	r3, #16
    65da:	76ab      	strb	r3, [r5, #26]
    65dc:	0034      	movs	r4, r6
    65de:	7823      	ldrb	r3, [r4, #0]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d147      	bne.n	6674 <_svfiprintf_r+0xdc>
    65e4:	1ba3      	subs	r3, r4, r6
    65e6:	9304      	str	r3, [sp, #16]
    65e8:	d00d      	beq.n	6606 <_svfiprintf_r+0x6e>
    65ea:	1ba3      	subs	r3, r4, r6
    65ec:	0032      	movs	r2, r6
    65ee:	0039      	movs	r1, r7
    65f0:	9802      	ldr	r0, [sp, #8]
    65f2:	f7ff ff6f 	bl	64d4 <__ssputs_r>
    65f6:	1c43      	adds	r3, r0, #1
    65f8:	d100      	bne.n	65fc <_svfiprintf_r+0x64>
    65fa:	e0b5      	b.n	6768 <_svfiprintf_r+0x1d0>
    65fc:	696a      	ldr	r2, [r5, #20]
    65fe:	9b04      	ldr	r3, [sp, #16]
    6600:	4694      	mov	ip, r2
    6602:	4463      	add	r3, ip
    6604:	616b      	str	r3, [r5, #20]
    6606:	7823      	ldrb	r3, [r4, #0]
    6608:	2b00      	cmp	r3, #0
    660a:	d100      	bne.n	660e <_svfiprintf_r+0x76>
    660c:	e0ac      	b.n	6768 <_svfiprintf_r+0x1d0>
    660e:	2201      	movs	r2, #1
    6610:	2300      	movs	r3, #0
    6612:	4252      	negs	r2, r2
    6614:	606a      	str	r2, [r5, #4]
    6616:	a902      	add	r1, sp, #8
    6618:	3254      	adds	r2, #84	; 0x54
    661a:	1852      	adds	r2, r2, r1
    661c:	3401      	adds	r4, #1
    661e:	602b      	str	r3, [r5, #0]
    6620:	60eb      	str	r3, [r5, #12]
    6622:	60ab      	str	r3, [r5, #8]
    6624:	7013      	strb	r3, [r2, #0]
    6626:	65ab      	str	r3, [r5, #88]	; 0x58
    6628:	4e58      	ldr	r6, [pc, #352]	; (678c <_svfiprintf_r+0x1f4>)
    662a:	2205      	movs	r2, #5
    662c:	7821      	ldrb	r1, [r4, #0]
    662e:	0030      	movs	r0, r6
    6630:	f000 fad6 	bl	6be0 <memchr>
    6634:	1c62      	adds	r2, r4, #1
    6636:	2800      	cmp	r0, #0
    6638:	d120      	bne.n	667c <_svfiprintf_r+0xe4>
    663a:	6829      	ldr	r1, [r5, #0]
    663c:	06cb      	lsls	r3, r1, #27
    663e:	d504      	bpl.n	664a <_svfiprintf_r+0xb2>
    6640:	2353      	movs	r3, #83	; 0x53
    6642:	ae02      	add	r6, sp, #8
    6644:	3020      	adds	r0, #32
    6646:	199b      	adds	r3, r3, r6
    6648:	7018      	strb	r0, [r3, #0]
    664a:	070b      	lsls	r3, r1, #28
    664c:	d504      	bpl.n	6658 <_svfiprintf_r+0xc0>
    664e:	2353      	movs	r3, #83	; 0x53
    6650:	202b      	movs	r0, #43	; 0x2b
    6652:	ae02      	add	r6, sp, #8
    6654:	199b      	adds	r3, r3, r6
    6656:	7018      	strb	r0, [r3, #0]
    6658:	7823      	ldrb	r3, [r4, #0]
    665a:	2b2a      	cmp	r3, #42	; 0x2a
    665c:	d016      	beq.n	668c <_svfiprintf_r+0xf4>
    665e:	2000      	movs	r0, #0
    6660:	210a      	movs	r1, #10
    6662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6664:	7822      	ldrb	r2, [r4, #0]
    6666:	3a30      	subs	r2, #48	; 0x30
    6668:	2a09      	cmp	r2, #9
    666a:	d955      	bls.n	6718 <_svfiprintf_r+0x180>
    666c:	2800      	cmp	r0, #0
    666e:	d015      	beq.n	669c <_svfiprintf_r+0x104>
    6670:	9309      	str	r3, [sp, #36]	; 0x24
    6672:	e013      	b.n	669c <_svfiprintf_r+0x104>
    6674:	2b25      	cmp	r3, #37	; 0x25
    6676:	d0b5      	beq.n	65e4 <_svfiprintf_r+0x4c>
    6678:	3401      	adds	r4, #1
    667a:	e7b0      	b.n	65de <_svfiprintf_r+0x46>
    667c:	2301      	movs	r3, #1
    667e:	1b80      	subs	r0, r0, r6
    6680:	4083      	lsls	r3, r0
    6682:	6829      	ldr	r1, [r5, #0]
    6684:	0014      	movs	r4, r2
    6686:	430b      	orrs	r3, r1
    6688:	602b      	str	r3, [r5, #0]
    668a:	e7cd      	b.n	6628 <_svfiprintf_r+0x90>
    668c:	9b05      	ldr	r3, [sp, #20]
    668e:	1d18      	adds	r0, r3, #4
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	9005      	str	r0, [sp, #20]
    6694:	2b00      	cmp	r3, #0
    6696:	db39      	blt.n	670c <_svfiprintf_r+0x174>
    6698:	9309      	str	r3, [sp, #36]	; 0x24
    669a:	0014      	movs	r4, r2
    669c:	7823      	ldrb	r3, [r4, #0]
    669e:	2b2e      	cmp	r3, #46	; 0x2e
    66a0:	d10b      	bne.n	66ba <_svfiprintf_r+0x122>
    66a2:	7863      	ldrb	r3, [r4, #1]
    66a4:	1c62      	adds	r2, r4, #1
    66a6:	2b2a      	cmp	r3, #42	; 0x2a
    66a8:	d13e      	bne.n	6728 <_svfiprintf_r+0x190>
    66aa:	9b05      	ldr	r3, [sp, #20]
    66ac:	3402      	adds	r4, #2
    66ae:	1d1a      	adds	r2, r3, #4
    66b0:	681b      	ldr	r3, [r3, #0]
    66b2:	9205      	str	r2, [sp, #20]
    66b4:	2b00      	cmp	r3, #0
    66b6:	db34      	blt.n	6722 <_svfiprintf_r+0x18a>
    66b8:	9307      	str	r3, [sp, #28]
    66ba:	4e35      	ldr	r6, [pc, #212]	; (6790 <_svfiprintf_r+0x1f8>)
    66bc:	7821      	ldrb	r1, [r4, #0]
    66be:	2203      	movs	r2, #3
    66c0:	0030      	movs	r0, r6
    66c2:	f000 fa8d 	bl	6be0 <memchr>
    66c6:	2800      	cmp	r0, #0
    66c8:	d006      	beq.n	66d8 <_svfiprintf_r+0x140>
    66ca:	2340      	movs	r3, #64	; 0x40
    66cc:	1b80      	subs	r0, r0, r6
    66ce:	4083      	lsls	r3, r0
    66d0:	682a      	ldr	r2, [r5, #0]
    66d2:	3401      	adds	r4, #1
    66d4:	4313      	orrs	r3, r2
    66d6:	602b      	str	r3, [r5, #0]
    66d8:	7821      	ldrb	r1, [r4, #0]
    66da:	2206      	movs	r2, #6
    66dc:	482d      	ldr	r0, [pc, #180]	; (6794 <_svfiprintf_r+0x1fc>)
    66de:	1c66      	adds	r6, r4, #1
    66e0:	7629      	strb	r1, [r5, #24]
    66e2:	f000 fa7d 	bl	6be0 <memchr>
    66e6:	2800      	cmp	r0, #0
    66e8:	d046      	beq.n	6778 <_svfiprintf_r+0x1e0>
    66ea:	4b2b      	ldr	r3, [pc, #172]	; (6798 <_svfiprintf_r+0x200>)
    66ec:	2b00      	cmp	r3, #0
    66ee:	d12f      	bne.n	6750 <_svfiprintf_r+0x1b8>
    66f0:	6829      	ldr	r1, [r5, #0]
    66f2:	9b05      	ldr	r3, [sp, #20]
    66f4:	2207      	movs	r2, #7
    66f6:	05c9      	lsls	r1, r1, #23
    66f8:	d528      	bpl.n	674c <_svfiprintf_r+0x1b4>
    66fa:	189b      	adds	r3, r3, r2
    66fc:	4393      	bics	r3, r2
    66fe:	3308      	adds	r3, #8
    6700:	9305      	str	r3, [sp, #20]
    6702:	696b      	ldr	r3, [r5, #20]
    6704:	9a03      	ldr	r2, [sp, #12]
    6706:	189b      	adds	r3, r3, r2
    6708:	616b      	str	r3, [r5, #20]
    670a:	e767      	b.n	65dc <_svfiprintf_r+0x44>
    670c:	425b      	negs	r3, r3
    670e:	60eb      	str	r3, [r5, #12]
    6710:	2302      	movs	r3, #2
    6712:	430b      	orrs	r3, r1
    6714:	602b      	str	r3, [r5, #0]
    6716:	e7c0      	b.n	669a <_svfiprintf_r+0x102>
    6718:	434b      	muls	r3, r1
    671a:	3401      	adds	r4, #1
    671c:	189b      	adds	r3, r3, r2
    671e:	2001      	movs	r0, #1
    6720:	e7a0      	b.n	6664 <_svfiprintf_r+0xcc>
    6722:	2301      	movs	r3, #1
    6724:	425b      	negs	r3, r3
    6726:	e7c7      	b.n	66b8 <_svfiprintf_r+0x120>
    6728:	2300      	movs	r3, #0
    672a:	0014      	movs	r4, r2
    672c:	200a      	movs	r0, #10
    672e:	001a      	movs	r2, r3
    6730:	606b      	str	r3, [r5, #4]
    6732:	7821      	ldrb	r1, [r4, #0]
    6734:	3930      	subs	r1, #48	; 0x30
    6736:	2909      	cmp	r1, #9
    6738:	d903      	bls.n	6742 <_svfiprintf_r+0x1aa>
    673a:	2b00      	cmp	r3, #0
    673c:	d0bd      	beq.n	66ba <_svfiprintf_r+0x122>
    673e:	9207      	str	r2, [sp, #28]
    6740:	e7bb      	b.n	66ba <_svfiprintf_r+0x122>
    6742:	4342      	muls	r2, r0
    6744:	3401      	adds	r4, #1
    6746:	1852      	adds	r2, r2, r1
    6748:	2301      	movs	r3, #1
    674a:	e7f2      	b.n	6732 <_svfiprintf_r+0x19a>
    674c:	3307      	adds	r3, #7
    674e:	e7d5      	b.n	66fc <_svfiprintf_r+0x164>
    6750:	ab05      	add	r3, sp, #20
    6752:	9300      	str	r3, [sp, #0]
    6754:	003a      	movs	r2, r7
    6756:	4b11      	ldr	r3, [pc, #68]	; (679c <_svfiprintf_r+0x204>)
    6758:	0029      	movs	r1, r5
    675a:	9802      	ldr	r0, [sp, #8]
    675c:	e000      	b.n	6760 <_svfiprintf_r+0x1c8>
    675e:	bf00      	nop
    6760:	9003      	str	r0, [sp, #12]
    6762:	9b03      	ldr	r3, [sp, #12]
    6764:	3301      	adds	r3, #1
    6766:	d1cc      	bne.n	6702 <_svfiprintf_r+0x16a>
    6768:	89bb      	ldrh	r3, [r7, #12]
    676a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    676c:	065b      	lsls	r3, r3, #25
    676e:	d400      	bmi.n	6772 <_svfiprintf_r+0x1da>
    6770:	e729      	b.n	65c6 <_svfiprintf_r+0x2e>
    6772:	2001      	movs	r0, #1
    6774:	4240      	negs	r0, r0
    6776:	e726      	b.n	65c6 <_svfiprintf_r+0x2e>
    6778:	ab05      	add	r3, sp, #20
    677a:	9300      	str	r3, [sp, #0]
    677c:	003a      	movs	r2, r7
    677e:	4b07      	ldr	r3, [pc, #28]	; (679c <_svfiprintf_r+0x204>)
    6780:	0029      	movs	r1, r5
    6782:	9802      	ldr	r0, [sp, #8]
    6784:	f000 f87a 	bl	687c <_printf_i>
    6788:	e7ea      	b.n	6760 <_svfiprintf_r+0x1c8>
    678a:	46c0      	nop			; (mov r8, r8)
    678c:	000078d4 	.word	0x000078d4
    6790:	000078da 	.word	0x000078da
    6794:	000078de 	.word	0x000078de
    6798:	00000000 	.word	0x00000000
    679c:	000064d5 	.word	0x000064d5

000067a0 <_printf_common>:
    67a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67a2:	0015      	movs	r5, r2
    67a4:	9301      	str	r3, [sp, #4]
    67a6:	688a      	ldr	r2, [r1, #8]
    67a8:	690b      	ldr	r3, [r1, #16]
    67aa:	9000      	str	r0, [sp, #0]
    67ac:	000c      	movs	r4, r1
    67ae:	4293      	cmp	r3, r2
    67b0:	da00      	bge.n	67b4 <_printf_common+0x14>
    67b2:	0013      	movs	r3, r2
    67b4:	0022      	movs	r2, r4
    67b6:	602b      	str	r3, [r5, #0]
    67b8:	3243      	adds	r2, #67	; 0x43
    67ba:	7812      	ldrb	r2, [r2, #0]
    67bc:	2a00      	cmp	r2, #0
    67be:	d001      	beq.n	67c4 <_printf_common+0x24>
    67c0:	3301      	adds	r3, #1
    67c2:	602b      	str	r3, [r5, #0]
    67c4:	6823      	ldr	r3, [r4, #0]
    67c6:	069b      	lsls	r3, r3, #26
    67c8:	d502      	bpl.n	67d0 <_printf_common+0x30>
    67ca:	682b      	ldr	r3, [r5, #0]
    67cc:	3302      	adds	r3, #2
    67ce:	602b      	str	r3, [r5, #0]
    67d0:	2706      	movs	r7, #6
    67d2:	6823      	ldr	r3, [r4, #0]
    67d4:	401f      	ands	r7, r3
    67d6:	d027      	beq.n	6828 <_printf_common+0x88>
    67d8:	0023      	movs	r3, r4
    67da:	3343      	adds	r3, #67	; 0x43
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	1e5a      	subs	r2, r3, #1
    67e0:	4193      	sbcs	r3, r2
    67e2:	6822      	ldr	r2, [r4, #0]
    67e4:	0692      	lsls	r2, r2, #26
    67e6:	d430      	bmi.n	684a <_printf_common+0xaa>
    67e8:	0022      	movs	r2, r4
    67ea:	9901      	ldr	r1, [sp, #4]
    67ec:	3243      	adds	r2, #67	; 0x43
    67ee:	9800      	ldr	r0, [sp, #0]
    67f0:	9e08      	ldr	r6, [sp, #32]
    67f2:	47b0      	blx	r6
    67f4:	1c43      	adds	r3, r0, #1
    67f6:	d025      	beq.n	6844 <_printf_common+0xa4>
    67f8:	2306      	movs	r3, #6
    67fa:	6820      	ldr	r0, [r4, #0]
    67fc:	682a      	ldr	r2, [r5, #0]
    67fe:	68e1      	ldr	r1, [r4, #12]
    6800:	4003      	ands	r3, r0
    6802:	2500      	movs	r5, #0
    6804:	2b04      	cmp	r3, #4
    6806:	d103      	bne.n	6810 <_printf_common+0x70>
    6808:	1a8d      	subs	r5, r1, r2
    680a:	43eb      	mvns	r3, r5
    680c:	17db      	asrs	r3, r3, #31
    680e:	401d      	ands	r5, r3
    6810:	68a3      	ldr	r3, [r4, #8]
    6812:	6922      	ldr	r2, [r4, #16]
    6814:	4293      	cmp	r3, r2
    6816:	dd01      	ble.n	681c <_printf_common+0x7c>
    6818:	1a9b      	subs	r3, r3, r2
    681a:	18ed      	adds	r5, r5, r3
    681c:	2700      	movs	r7, #0
    681e:	42bd      	cmp	r5, r7
    6820:	d120      	bne.n	6864 <_printf_common+0xc4>
    6822:	2000      	movs	r0, #0
    6824:	e010      	b.n	6848 <_printf_common+0xa8>
    6826:	3701      	adds	r7, #1
    6828:	68e3      	ldr	r3, [r4, #12]
    682a:	682a      	ldr	r2, [r5, #0]
    682c:	1a9b      	subs	r3, r3, r2
    682e:	429f      	cmp	r7, r3
    6830:	dad2      	bge.n	67d8 <_printf_common+0x38>
    6832:	0022      	movs	r2, r4
    6834:	2301      	movs	r3, #1
    6836:	3219      	adds	r2, #25
    6838:	9901      	ldr	r1, [sp, #4]
    683a:	9800      	ldr	r0, [sp, #0]
    683c:	9e08      	ldr	r6, [sp, #32]
    683e:	47b0      	blx	r6
    6840:	1c43      	adds	r3, r0, #1
    6842:	d1f0      	bne.n	6826 <_printf_common+0x86>
    6844:	2001      	movs	r0, #1
    6846:	4240      	negs	r0, r0
    6848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    684a:	2030      	movs	r0, #48	; 0x30
    684c:	18e1      	adds	r1, r4, r3
    684e:	3143      	adds	r1, #67	; 0x43
    6850:	7008      	strb	r0, [r1, #0]
    6852:	0021      	movs	r1, r4
    6854:	1c5a      	adds	r2, r3, #1
    6856:	3145      	adds	r1, #69	; 0x45
    6858:	7809      	ldrb	r1, [r1, #0]
    685a:	18a2      	adds	r2, r4, r2
    685c:	3243      	adds	r2, #67	; 0x43
    685e:	3302      	adds	r3, #2
    6860:	7011      	strb	r1, [r2, #0]
    6862:	e7c1      	b.n	67e8 <_printf_common+0x48>
    6864:	0022      	movs	r2, r4
    6866:	2301      	movs	r3, #1
    6868:	321a      	adds	r2, #26
    686a:	9901      	ldr	r1, [sp, #4]
    686c:	9800      	ldr	r0, [sp, #0]
    686e:	9e08      	ldr	r6, [sp, #32]
    6870:	47b0      	blx	r6
    6872:	1c43      	adds	r3, r0, #1
    6874:	d0e6      	beq.n	6844 <_printf_common+0xa4>
    6876:	3701      	adds	r7, #1
    6878:	e7d1      	b.n	681e <_printf_common+0x7e>
	...

0000687c <_printf_i>:
    687c:	b5f0      	push	{r4, r5, r6, r7, lr}
    687e:	b08b      	sub	sp, #44	; 0x2c
    6880:	9206      	str	r2, [sp, #24]
    6882:	000a      	movs	r2, r1
    6884:	3243      	adds	r2, #67	; 0x43
    6886:	9307      	str	r3, [sp, #28]
    6888:	9005      	str	r0, [sp, #20]
    688a:	9204      	str	r2, [sp, #16]
    688c:	7e0a      	ldrb	r2, [r1, #24]
    688e:	000c      	movs	r4, r1
    6890:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6892:	2a6e      	cmp	r2, #110	; 0x6e
    6894:	d100      	bne.n	6898 <_printf_i+0x1c>
    6896:	e08f      	b.n	69b8 <_printf_i+0x13c>
    6898:	d817      	bhi.n	68ca <_printf_i+0x4e>
    689a:	2a63      	cmp	r2, #99	; 0x63
    689c:	d02c      	beq.n	68f8 <_printf_i+0x7c>
    689e:	d808      	bhi.n	68b2 <_printf_i+0x36>
    68a0:	2a00      	cmp	r2, #0
    68a2:	d100      	bne.n	68a6 <_printf_i+0x2a>
    68a4:	e099      	b.n	69da <_printf_i+0x15e>
    68a6:	2a58      	cmp	r2, #88	; 0x58
    68a8:	d054      	beq.n	6954 <_printf_i+0xd8>
    68aa:	0026      	movs	r6, r4
    68ac:	3642      	adds	r6, #66	; 0x42
    68ae:	7032      	strb	r2, [r6, #0]
    68b0:	e029      	b.n	6906 <_printf_i+0x8a>
    68b2:	2a64      	cmp	r2, #100	; 0x64
    68b4:	d001      	beq.n	68ba <_printf_i+0x3e>
    68b6:	2a69      	cmp	r2, #105	; 0x69
    68b8:	d1f7      	bne.n	68aa <_printf_i+0x2e>
    68ba:	6821      	ldr	r1, [r4, #0]
    68bc:	681a      	ldr	r2, [r3, #0]
    68be:	0608      	lsls	r0, r1, #24
    68c0:	d523      	bpl.n	690a <_printf_i+0x8e>
    68c2:	1d11      	adds	r1, r2, #4
    68c4:	6019      	str	r1, [r3, #0]
    68c6:	6815      	ldr	r5, [r2, #0]
    68c8:	e025      	b.n	6916 <_printf_i+0x9a>
    68ca:	2a73      	cmp	r2, #115	; 0x73
    68cc:	d100      	bne.n	68d0 <_printf_i+0x54>
    68ce:	e088      	b.n	69e2 <_printf_i+0x166>
    68d0:	d808      	bhi.n	68e4 <_printf_i+0x68>
    68d2:	2a6f      	cmp	r2, #111	; 0x6f
    68d4:	d029      	beq.n	692a <_printf_i+0xae>
    68d6:	2a70      	cmp	r2, #112	; 0x70
    68d8:	d1e7      	bne.n	68aa <_printf_i+0x2e>
    68da:	2220      	movs	r2, #32
    68dc:	6809      	ldr	r1, [r1, #0]
    68de:	430a      	orrs	r2, r1
    68e0:	6022      	str	r2, [r4, #0]
    68e2:	e003      	b.n	68ec <_printf_i+0x70>
    68e4:	2a75      	cmp	r2, #117	; 0x75
    68e6:	d020      	beq.n	692a <_printf_i+0xae>
    68e8:	2a78      	cmp	r2, #120	; 0x78
    68ea:	d1de      	bne.n	68aa <_printf_i+0x2e>
    68ec:	0022      	movs	r2, r4
    68ee:	2178      	movs	r1, #120	; 0x78
    68f0:	3245      	adds	r2, #69	; 0x45
    68f2:	7011      	strb	r1, [r2, #0]
    68f4:	4a6c      	ldr	r2, [pc, #432]	; (6aa8 <_printf_i+0x22c>)
    68f6:	e030      	b.n	695a <_printf_i+0xde>
    68f8:	000e      	movs	r6, r1
    68fa:	681a      	ldr	r2, [r3, #0]
    68fc:	3642      	adds	r6, #66	; 0x42
    68fe:	1d11      	adds	r1, r2, #4
    6900:	6019      	str	r1, [r3, #0]
    6902:	6813      	ldr	r3, [r2, #0]
    6904:	7033      	strb	r3, [r6, #0]
    6906:	2301      	movs	r3, #1
    6908:	e079      	b.n	69fe <_printf_i+0x182>
    690a:	0649      	lsls	r1, r1, #25
    690c:	d5d9      	bpl.n	68c2 <_printf_i+0x46>
    690e:	1d11      	adds	r1, r2, #4
    6910:	6019      	str	r1, [r3, #0]
    6912:	2300      	movs	r3, #0
    6914:	5ed5      	ldrsh	r5, [r2, r3]
    6916:	2d00      	cmp	r5, #0
    6918:	da03      	bge.n	6922 <_printf_i+0xa6>
    691a:	232d      	movs	r3, #45	; 0x2d
    691c:	9a04      	ldr	r2, [sp, #16]
    691e:	426d      	negs	r5, r5
    6920:	7013      	strb	r3, [r2, #0]
    6922:	4b62      	ldr	r3, [pc, #392]	; (6aac <_printf_i+0x230>)
    6924:	270a      	movs	r7, #10
    6926:	9303      	str	r3, [sp, #12]
    6928:	e02f      	b.n	698a <_printf_i+0x10e>
    692a:	6820      	ldr	r0, [r4, #0]
    692c:	6819      	ldr	r1, [r3, #0]
    692e:	0605      	lsls	r5, r0, #24
    6930:	d503      	bpl.n	693a <_printf_i+0xbe>
    6932:	1d08      	adds	r0, r1, #4
    6934:	6018      	str	r0, [r3, #0]
    6936:	680d      	ldr	r5, [r1, #0]
    6938:	e005      	b.n	6946 <_printf_i+0xca>
    693a:	0640      	lsls	r0, r0, #25
    693c:	d5f9      	bpl.n	6932 <_printf_i+0xb6>
    693e:	680d      	ldr	r5, [r1, #0]
    6940:	1d08      	adds	r0, r1, #4
    6942:	6018      	str	r0, [r3, #0]
    6944:	b2ad      	uxth	r5, r5
    6946:	4b59      	ldr	r3, [pc, #356]	; (6aac <_printf_i+0x230>)
    6948:	2708      	movs	r7, #8
    694a:	9303      	str	r3, [sp, #12]
    694c:	2a6f      	cmp	r2, #111	; 0x6f
    694e:	d018      	beq.n	6982 <_printf_i+0x106>
    6950:	270a      	movs	r7, #10
    6952:	e016      	b.n	6982 <_printf_i+0x106>
    6954:	3145      	adds	r1, #69	; 0x45
    6956:	700a      	strb	r2, [r1, #0]
    6958:	4a54      	ldr	r2, [pc, #336]	; (6aac <_printf_i+0x230>)
    695a:	9203      	str	r2, [sp, #12]
    695c:	681a      	ldr	r2, [r3, #0]
    695e:	6821      	ldr	r1, [r4, #0]
    6960:	1d10      	adds	r0, r2, #4
    6962:	6018      	str	r0, [r3, #0]
    6964:	6815      	ldr	r5, [r2, #0]
    6966:	0608      	lsls	r0, r1, #24
    6968:	d522      	bpl.n	69b0 <_printf_i+0x134>
    696a:	07cb      	lsls	r3, r1, #31
    696c:	d502      	bpl.n	6974 <_printf_i+0xf8>
    696e:	2320      	movs	r3, #32
    6970:	4319      	orrs	r1, r3
    6972:	6021      	str	r1, [r4, #0]
    6974:	2710      	movs	r7, #16
    6976:	2d00      	cmp	r5, #0
    6978:	d103      	bne.n	6982 <_printf_i+0x106>
    697a:	2320      	movs	r3, #32
    697c:	6822      	ldr	r2, [r4, #0]
    697e:	439a      	bics	r2, r3
    6980:	6022      	str	r2, [r4, #0]
    6982:	0023      	movs	r3, r4
    6984:	2200      	movs	r2, #0
    6986:	3343      	adds	r3, #67	; 0x43
    6988:	701a      	strb	r2, [r3, #0]
    698a:	6863      	ldr	r3, [r4, #4]
    698c:	60a3      	str	r3, [r4, #8]
    698e:	2b00      	cmp	r3, #0
    6990:	db5c      	blt.n	6a4c <_printf_i+0x1d0>
    6992:	2204      	movs	r2, #4
    6994:	6821      	ldr	r1, [r4, #0]
    6996:	4391      	bics	r1, r2
    6998:	6021      	str	r1, [r4, #0]
    699a:	2d00      	cmp	r5, #0
    699c:	d158      	bne.n	6a50 <_printf_i+0x1d4>
    699e:	9e04      	ldr	r6, [sp, #16]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d064      	beq.n	6a6e <_printf_i+0x1f2>
    69a4:	0026      	movs	r6, r4
    69a6:	9b03      	ldr	r3, [sp, #12]
    69a8:	3642      	adds	r6, #66	; 0x42
    69aa:	781b      	ldrb	r3, [r3, #0]
    69ac:	7033      	strb	r3, [r6, #0]
    69ae:	e05e      	b.n	6a6e <_printf_i+0x1f2>
    69b0:	0648      	lsls	r0, r1, #25
    69b2:	d5da      	bpl.n	696a <_printf_i+0xee>
    69b4:	b2ad      	uxth	r5, r5
    69b6:	e7d8      	b.n	696a <_printf_i+0xee>
    69b8:	6809      	ldr	r1, [r1, #0]
    69ba:	681a      	ldr	r2, [r3, #0]
    69bc:	0608      	lsls	r0, r1, #24
    69be:	d505      	bpl.n	69cc <_printf_i+0x150>
    69c0:	1d11      	adds	r1, r2, #4
    69c2:	6019      	str	r1, [r3, #0]
    69c4:	6813      	ldr	r3, [r2, #0]
    69c6:	6962      	ldr	r2, [r4, #20]
    69c8:	601a      	str	r2, [r3, #0]
    69ca:	e006      	b.n	69da <_printf_i+0x15e>
    69cc:	0649      	lsls	r1, r1, #25
    69ce:	d5f7      	bpl.n	69c0 <_printf_i+0x144>
    69d0:	1d11      	adds	r1, r2, #4
    69d2:	6019      	str	r1, [r3, #0]
    69d4:	6813      	ldr	r3, [r2, #0]
    69d6:	8aa2      	ldrh	r2, [r4, #20]
    69d8:	801a      	strh	r2, [r3, #0]
    69da:	2300      	movs	r3, #0
    69dc:	9e04      	ldr	r6, [sp, #16]
    69de:	6123      	str	r3, [r4, #16]
    69e0:	e054      	b.n	6a8c <_printf_i+0x210>
    69e2:	681a      	ldr	r2, [r3, #0]
    69e4:	1d11      	adds	r1, r2, #4
    69e6:	6019      	str	r1, [r3, #0]
    69e8:	6816      	ldr	r6, [r2, #0]
    69ea:	2100      	movs	r1, #0
    69ec:	6862      	ldr	r2, [r4, #4]
    69ee:	0030      	movs	r0, r6
    69f0:	f000 f8f6 	bl	6be0 <memchr>
    69f4:	2800      	cmp	r0, #0
    69f6:	d001      	beq.n	69fc <_printf_i+0x180>
    69f8:	1b80      	subs	r0, r0, r6
    69fa:	6060      	str	r0, [r4, #4]
    69fc:	6863      	ldr	r3, [r4, #4]
    69fe:	6123      	str	r3, [r4, #16]
    6a00:	2300      	movs	r3, #0
    6a02:	9a04      	ldr	r2, [sp, #16]
    6a04:	7013      	strb	r3, [r2, #0]
    6a06:	e041      	b.n	6a8c <_printf_i+0x210>
    6a08:	6923      	ldr	r3, [r4, #16]
    6a0a:	0032      	movs	r2, r6
    6a0c:	9906      	ldr	r1, [sp, #24]
    6a0e:	9805      	ldr	r0, [sp, #20]
    6a10:	9d07      	ldr	r5, [sp, #28]
    6a12:	47a8      	blx	r5
    6a14:	1c43      	adds	r3, r0, #1
    6a16:	d043      	beq.n	6aa0 <_printf_i+0x224>
    6a18:	6823      	ldr	r3, [r4, #0]
    6a1a:	2500      	movs	r5, #0
    6a1c:	079b      	lsls	r3, r3, #30
    6a1e:	d40f      	bmi.n	6a40 <_printf_i+0x1c4>
    6a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a22:	68e0      	ldr	r0, [r4, #12]
    6a24:	4298      	cmp	r0, r3
    6a26:	da3d      	bge.n	6aa4 <_printf_i+0x228>
    6a28:	0018      	movs	r0, r3
    6a2a:	e03b      	b.n	6aa4 <_printf_i+0x228>
    6a2c:	0022      	movs	r2, r4
    6a2e:	2301      	movs	r3, #1
    6a30:	3219      	adds	r2, #25
    6a32:	9906      	ldr	r1, [sp, #24]
    6a34:	9805      	ldr	r0, [sp, #20]
    6a36:	9e07      	ldr	r6, [sp, #28]
    6a38:	47b0      	blx	r6
    6a3a:	1c43      	adds	r3, r0, #1
    6a3c:	d030      	beq.n	6aa0 <_printf_i+0x224>
    6a3e:	3501      	adds	r5, #1
    6a40:	68e3      	ldr	r3, [r4, #12]
    6a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a44:	1a9b      	subs	r3, r3, r2
    6a46:	429d      	cmp	r5, r3
    6a48:	dbf0      	blt.n	6a2c <_printf_i+0x1b0>
    6a4a:	e7e9      	b.n	6a20 <_printf_i+0x1a4>
    6a4c:	2d00      	cmp	r5, #0
    6a4e:	d0a9      	beq.n	69a4 <_printf_i+0x128>
    6a50:	9e04      	ldr	r6, [sp, #16]
    6a52:	0028      	movs	r0, r5
    6a54:	0039      	movs	r1, r7
    6a56:	f7ff f839 	bl	5acc <__aeabi_uidivmod>
    6a5a:	9b03      	ldr	r3, [sp, #12]
    6a5c:	3e01      	subs	r6, #1
    6a5e:	5c5b      	ldrb	r3, [r3, r1]
    6a60:	0028      	movs	r0, r5
    6a62:	7033      	strb	r3, [r6, #0]
    6a64:	0039      	movs	r1, r7
    6a66:	f7fe ffab 	bl	59c0 <__udivsi3>
    6a6a:	1e05      	subs	r5, r0, #0
    6a6c:	d1f1      	bne.n	6a52 <_printf_i+0x1d6>
    6a6e:	2f08      	cmp	r7, #8
    6a70:	d109      	bne.n	6a86 <_printf_i+0x20a>
    6a72:	6823      	ldr	r3, [r4, #0]
    6a74:	07db      	lsls	r3, r3, #31
    6a76:	d506      	bpl.n	6a86 <_printf_i+0x20a>
    6a78:	6863      	ldr	r3, [r4, #4]
    6a7a:	6922      	ldr	r2, [r4, #16]
    6a7c:	4293      	cmp	r3, r2
    6a7e:	dc02      	bgt.n	6a86 <_printf_i+0x20a>
    6a80:	2330      	movs	r3, #48	; 0x30
    6a82:	3e01      	subs	r6, #1
    6a84:	7033      	strb	r3, [r6, #0]
    6a86:	9b04      	ldr	r3, [sp, #16]
    6a88:	1b9b      	subs	r3, r3, r6
    6a8a:	6123      	str	r3, [r4, #16]
    6a8c:	9b07      	ldr	r3, [sp, #28]
    6a8e:	aa09      	add	r2, sp, #36	; 0x24
    6a90:	9300      	str	r3, [sp, #0]
    6a92:	0021      	movs	r1, r4
    6a94:	9b06      	ldr	r3, [sp, #24]
    6a96:	9805      	ldr	r0, [sp, #20]
    6a98:	f7ff fe82 	bl	67a0 <_printf_common>
    6a9c:	1c43      	adds	r3, r0, #1
    6a9e:	d1b3      	bne.n	6a08 <_printf_i+0x18c>
    6aa0:	2001      	movs	r0, #1
    6aa2:	4240      	negs	r0, r0
    6aa4:	b00b      	add	sp, #44	; 0x2c
    6aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aa8:	000078f6 	.word	0x000078f6
    6aac:	000078e5 	.word	0x000078e5

00006ab0 <__sread>:
    6ab0:	b570      	push	{r4, r5, r6, lr}
    6ab2:	000c      	movs	r4, r1
    6ab4:	250e      	movs	r5, #14
    6ab6:	5f49      	ldrsh	r1, [r1, r5]
    6ab8:	f000 f8de 	bl	6c78 <_read_r>
    6abc:	2800      	cmp	r0, #0
    6abe:	db03      	blt.n	6ac8 <__sread+0x18>
    6ac0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ac2:	181b      	adds	r3, r3, r0
    6ac4:	6563      	str	r3, [r4, #84]	; 0x54
    6ac6:	bd70      	pop	{r4, r5, r6, pc}
    6ac8:	89a3      	ldrh	r3, [r4, #12]
    6aca:	4a02      	ldr	r2, [pc, #8]	; (6ad4 <__sread+0x24>)
    6acc:	4013      	ands	r3, r2
    6ace:	81a3      	strh	r3, [r4, #12]
    6ad0:	e7f9      	b.n	6ac6 <__sread+0x16>
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	ffffefff 	.word	0xffffefff

00006ad8 <__swrite>:
    6ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ada:	001f      	movs	r7, r3
    6adc:	898b      	ldrh	r3, [r1, #12]
    6ade:	0005      	movs	r5, r0
    6ae0:	000c      	movs	r4, r1
    6ae2:	0016      	movs	r6, r2
    6ae4:	05db      	lsls	r3, r3, #23
    6ae6:	d505      	bpl.n	6af4 <__swrite+0x1c>
    6ae8:	230e      	movs	r3, #14
    6aea:	5ec9      	ldrsh	r1, [r1, r3]
    6aec:	2200      	movs	r2, #0
    6aee:	2302      	movs	r3, #2
    6af0:	f000 f862 	bl	6bb8 <_lseek_r>
    6af4:	89a3      	ldrh	r3, [r4, #12]
    6af6:	4a05      	ldr	r2, [pc, #20]	; (6b0c <__swrite+0x34>)
    6af8:	0028      	movs	r0, r5
    6afa:	4013      	ands	r3, r2
    6afc:	81a3      	strh	r3, [r4, #12]
    6afe:	0032      	movs	r2, r6
    6b00:	230e      	movs	r3, #14
    6b02:	5ee1      	ldrsh	r1, [r4, r3]
    6b04:	003b      	movs	r3, r7
    6b06:	f000 f81f 	bl	6b48 <_write_r>
    6b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b0c:	ffffefff 	.word	0xffffefff

00006b10 <__sseek>:
    6b10:	b570      	push	{r4, r5, r6, lr}
    6b12:	000c      	movs	r4, r1
    6b14:	250e      	movs	r5, #14
    6b16:	5f49      	ldrsh	r1, [r1, r5]
    6b18:	f000 f84e 	bl	6bb8 <_lseek_r>
    6b1c:	89a3      	ldrh	r3, [r4, #12]
    6b1e:	1c42      	adds	r2, r0, #1
    6b20:	d103      	bne.n	6b2a <__sseek+0x1a>
    6b22:	4a05      	ldr	r2, [pc, #20]	; (6b38 <__sseek+0x28>)
    6b24:	4013      	ands	r3, r2
    6b26:	81a3      	strh	r3, [r4, #12]
    6b28:	bd70      	pop	{r4, r5, r6, pc}
    6b2a:	2280      	movs	r2, #128	; 0x80
    6b2c:	0152      	lsls	r2, r2, #5
    6b2e:	4313      	orrs	r3, r2
    6b30:	81a3      	strh	r3, [r4, #12]
    6b32:	6560      	str	r0, [r4, #84]	; 0x54
    6b34:	e7f8      	b.n	6b28 <__sseek+0x18>
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	ffffefff 	.word	0xffffefff

00006b3c <__sclose>:
    6b3c:	b510      	push	{r4, lr}
    6b3e:	230e      	movs	r3, #14
    6b40:	5ec9      	ldrsh	r1, [r1, r3]
    6b42:	f000 f815 	bl	6b70 <_close_r>
    6b46:	bd10      	pop	{r4, pc}

00006b48 <_write_r>:
    6b48:	b570      	push	{r4, r5, r6, lr}
    6b4a:	0005      	movs	r5, r0
    6b4c:	0008      	movs	r0, r1
    6b4e:	0011      	movs	r1, r2
    6b50:	2200      	movs	r2, #0
    6b52:	4c06      	ldr	r4, [pc, #24]	; (6b6c <_write_r+0x24>)
    6b54:	6022      	str	r2, [r4, #0]
    6b56:	001a      	movs	r2, r3
    6b58:	f7fc fe08 	bl	376c <_write>
    6b5c:	1c43      	adds	r3, r0, #1
    6b5e:	d103      	bne.n	6b68 <_write_r+0x20>
    6b60:	6823      	ldr	r3, [r4, #0]
    6b62:	2b00      	cmp	r3, #0
    6b64:	d000      	beq.n	6b68 <_write_r+0x20>
    6b66:	602b      	str	r3, [r5, #0]
    6b68:	bd70      	pop	{r4, r5, r6, pc}
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	200009fc 	.word	0x200009fc

00006b70 <_close_r>:
    6b70:	2300      	movs	r3, #0
    6b72:	b570      	push	{r4, r5, r6, lr}
    6b74:	4c06      	ldr	r4, [pc, #24]	; (6b90 <_close_r+0x20>)
    6b76:	0005      	movs	r5, r0
    6b78:	0008      	movs	r0, r1
    6b7a:	6023      	str	r3, [r4, #0]
    6b7c:	f7fc fe30 	bl	37e0 <_close>
    6b80:	1c43      	adds	r3, r0, #1
    6b82:	d103      	bne.n	6b8c <_close_r+0x1c>
    6b84:	6823      	ldr	r3, [r4, #0]
    6b86:	2b00      	cmp	r3, #0
    6b88:	d000      	beq.n	6b8c <_close_r+0x1c>
    6b8a:	602b      	str	r3, [r5, #0]
    6b8c:	bd70      	pop	{r4, r5, r6, pc}
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	200009fc 	.word	0x200009fc

00006b94 <_fstat_r>:
    6b94:	2300      	movs	r3, #0
    6b96:	b570      	push	{r4, r5, r6, lr}
    6b98:	4c06      	ldr	r4, [pc, #24]	; (6bb4 <_fstat_r+0x20>)
    6b9a:	0005      	movs	r5, r0
    6b9c:	0008      	movs	r0, r1
    6b9e:	0011      	movs	r1, r2
    6ba0:	6023      	str	r3, [r4, #0]
    6ba2:	f7fc fe20 	bl	37e6 <_fstat>
    6ba6:	1c43      	adds	r3, r0, #1
    6ba8:	d103      	bne.n	6bb2 <_fstat_r+0x1e>
    6baa:	6823      	ldr	r3, [r4, #0]
    6bac:	2b00      	cmp	r3, #0
    6bae:	d000      	beq.n	6bb2 <_fstat_r+0x1e>
    6bb0:	602b      	str	r3, [r5, #0]
    6bb2:	bd70      	pop	{r4, r5, r6, pc}
    6bb4:	200009fc 	.word	0x200009fc

00006bb8 <_lseek_r>:
    6bb8:	b570      	push	{r4, r5, r6, lr}
    6bba:	0005      	movs	r5, r0
    6bbc:	0008      	movs	r0, r1
    6bbe:	0011      	movs	r1, r2
    6bc0:	2200      	movs	r2, #0
    6bc2:	4c06      	ldr	r4, [pc, #24]	; (6bdc <_lseek_r+0x24>)
    6bc4:	6022      	str	r2, [r4, #0]
    6bc6:	001a      	movs	r2, r3
    6bc8:	f7fc fe12 	bl	37f0 <_lseek>
    6bcc:	1c43      	adds	r3, r0, #1
    6bce:	d103      	bne.n	6bd8 <_lseek_r+0x20>
    6bd0:	6823      	ldr	r3, [r4, #0]
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d000      	beq.n	6bd8 <_lseek_r+0x20>
    6bd6:	602b      	str	r3, [r5, #0]
    6bd8:	bd70      	pop	{r4, r5, r6, pc}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	200009fc 	.word	0x200009fc

00006be0 <memchr>:
    6be0:	b2c9      	uxtb	r1, r1
    6be2:	1882      	adds	r2, r0, r2
    6be4:	4290      	cmp	r0, r2
    6be6:	d101      	bne.n	6bec <memchr+0xc>
    6be8:	2000      	movs	r0, #0
    6bea:	4770      	bx	lr
    6bec:	7803      	ldrb	r3, [r0, #0]
    6bee:	428b      	cmp	r3, r1
    6bf0:	d0fb      	beq.n	6bea <memchr+0xa>
    6bf2:	3001      	adds	r0, #1
    6bf4:	e7f6      	b.n	6be4 <memchr+0x4>

00006bf6 <memcpy>:
    6bf6:	2300      	movs	r3, #0
    6bf8:	b510      	push	{r4, lr}
    6bfa:	429a      	cmp	r2, r3
    6bfc:	d100      	bne.n	6c00 <memcpy+0xa>
    6bfe:	bd10      	pop	{r4, pc}
    6c00:	5ccc      	ldrb	r4, [r1, r3]
    6c02:	54c4      	strb	r4, [r0, r3]
    6c04:	3301      	adds	r3, #1
    6c06:	e7f8      	b.n	6bfa <memcpy+0x4>

00006c08 <memmove>:
    6c08:	b510      	push	{r4, lr}
    6c0a:	4288      	cmp	r0, r1
    6c0c:	d902      	bls.n	6c14 <memmove+0xc>
    6c0e:	188b      	adds	r3, r1, r2
    6c10:	4298      	cmp	r0, r3
    6c12:	d308      	bcc.n	6c26 <memmove+0x1e>
    6c14:	2300      	movs	r3, #0
    6c16:	429a      	cmp	r2, r3
    6c18:	d007      	beq.n	6c2a <memmove+0x22>
    6c1a:	5ccc      	ldrb	r4, [r1, r3]
    6c1c:	54c4      	strb	r4, [r0, r3]
    6c1e:	3301      	adds	r3, #1
    6c20:	e7f9      	b.n	6c16 <memmove+0xe>
    6c22:	5c8b      	ldrb	r3, [r1, r2]
    6c24:	5483      	strb	r3, [r0, r2]
    6c26:	3a01      	subs	r2, #1
    6c28:	d2fb      	bcs.n	6c22 <memmove+0x1a>
    6c2a:	bd10      	pop	{r4, pc}

00006c2c <_realloc_r>:
    6c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c2e:	0007      	movs	r7, r0
    6c30:	000d      	movs	r5, r1
    6c32:	0016      	movs	r6, r2
    6c34:	2900      	cmp	r1, #0
    6c36:	d105      	bne.n	6c44 <_realloc_r+0x18>
    6c38:	0011      	movs	r1, r2
    6c3a:	f7ff f8e1 	bl	5e00 <_malloc_r>
    6c3e:	0004      	movs	r4, r0
    6c40:	0020      	movs	r0, r4
    6c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c44:	2a00      	cmp	r2, #0
    6c46:	d103      	bne.n	6c50 <_realloc_r+0x24>
    6c48:	f7ff f890 	bl	5d6c <_free_r>
    6c4c:	0034      	movs	r4, r6
    6c4e:	e7f7      	b.n	6c40 <_realloc_r+0x14>
    6c50:	f000 f826 	bl	6ca0 <_malloc_usable_size_r>
    6c54:	002c      	movs	r4, r5
    6c56:	4286      	cmp	r6, r0
    6c58:	d9f2      	bls.n	6c40 <_realloc_r+0x14>
    6c5a:	0031      	movs	r1, r6
    6c5c:	0038      	movs	r0, r7
    6c5e:	f7ff f8cf 	bl	5e00 <_malloc_r>
    6c62:	1e04      	subs	r4, r0, #0
    6c64:	d0ec      	beq.n	6c40 <_realloc_r+0x14>
    6c66:	0029      	movs	r1, r5
    6c68:	0032      	movs	r2, r6
    6c6a:	f7ff ffc4 	bl	6bf6 <memcpy>
    6c6e:	0029      	movs	r1, r5
    6c70:	0038      	movs	r0, r7
    6c72:	f7ff f87b 	bl	5d6c <_free_r>
    6c76:	e7e3      	b.n	6c40 <_realloc_r+0x14>

00006c78 <_read_r>:
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	0005      	movs	r5, r0
    6c7c:	0008      	movs	r0, r1
    6c7e:	0011      	movs	r1, r2
    6c80:	2200      	movs	r2, #0
    6c82:	4c06      	ldr	r4, [pc, #24]	; (6c9c <_read_r+0x24>)
    6c84:	6022      	str	r2, [r4, #0]
    6c86:	001a      	movs	r2, r3
    6c88:	f7fc fd4e 	bl	3728 <_read>
    6c8c:	1c43      	adds	r3, r0, #1
    6c8e:	d103      	bne.n	6c98 <_read_r+0x20>
    6c90:	6823      	ldr	r3, [r4, #0]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d000      	beq.n	6c98 <_read_r+0x20>
    6c96:	602b      	str	r3, [r5, #0]
    6c98:	bd70      	pop	{r4, r5, r6, pc}
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	200009fc 	.word	0x200009fc

00006ca0 <_malloc_usable_size_r>:
    6ca0:	1f0b      	subs	r3, r1, #4
    6ca2:	681b      	ldr	r3, [r3, #0]
    6ca4:	1f18      	subs	r0, r3, #4
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	da01      	bge.n	6cae <_malloc_usable_size_r+0xe>
    6caa:	580b      	ldr	r3, [r1, r0]
    6cac:	18c0      	adds	r0, r0, r3
    6cae:	4770      	bx	lr
    6cb0:	000002d8 	.word	0x000002d8
    6cb4:	000002d8 	.word	0x000002d8
    6cb8:	000002b4 	.word	0x000002b4
    6cbc:	000002d8 	.word	0x000002d8
    6cc0:	000002b4 	.word	0x000002b4
    6cc4:	0000029a 	.word	0x0000029a
    6cc8:	0000029a 	.word	0x0000029a
    6ccc:	000002d8 	.word	0x000002d8
    6cd0:	000002d8 	.word	0x000002d8
    6cd4:	000002d8 	.word	0x000002d8
    6cd8:	000002d8 	.word	0x000002d8
    6cdc:	000002d8 	.word	0x000002d8
    6ce0:	000002d8 	.word	0x000002d8
    6ce4:	000002d8 	.word	0x000002d8
    6ce8:	000002d8 	.word	0x000002d8
    6cec:	000002d8 	.word	0x000002d8
    6cf0:	000002d8 	.word	0x000002d8
    6cf4:	000002d8 	.word	0x000002d8
    6cf8:	000002d8 	.word	0x000002d8
    6cfc:	000002d8 	.word	0x000002d8
    6d00:	000002d8 	.word	0x000002d8
    6d04:	000002d8 	.word	0x000002d8
    6d08:	000002d8 	.word	0x000002d8
    6d0c:	000002d8 	.word	0x000002d8
    6d10:	000002d8 	.word	0x000002d8
    6d14:	000002d8 	.word	0x000002d8
    6d18:	000002d8 	.word	0x000002d8
    6d1c:	000002d8 	.word	0x000002d8
    6d20:	000002d8 	.word	0x000002d8
    6d24:	000002d8 	.word	0x000002d8
    6d28:	000002d8 	.word	0x000002d8
    6d2c:	000002d8 	.word	0x000002d8
    6d30:	000002d8 	.word	0x000002d8
    6d34:	000002d8 	.word	0x000002d8
    6d38:	000002d8 	.word	0x000002d8
    6d3c:	000002d8 	.word	0x000002d8
    6d40:	000002d8 	.word	0x000002d8
    6d44:	000002d8 	.word	0x000002d8
    6d48:	000002d8 	.word	0x000002d8
    6d4c:	000002d8 	.word	0x000002d8
    6d50:	000002d8 	.word	0x000002d8
    6d54:	000002d8 	.word	0x000002d8
    6d58:	000002d8 	.word	0x000002d8
    6d5c:	000002d8 	.word	0x000002d8
    6d60:	000002d8 	.word	0x000002d8
    6d64:	000002d8 	.word	0x000002d8
    6d68:	000002d8 	.word	0x000002d8
    6d6c:	000002d8 	.word	0x000002d8
    6d70:	000002d8 	.word	0x000002d8
    6d74:	000002d8 	.word	0x000002d8
    6d78:	000002d8 	.word	0x000002d8
    6d7c:	000002d8 	.word	0x000002d8
    6d80:	000002d8 	.word	0x000002d8
    6d84:	000002d8 	.word	0x000002d8
    6d88:	000002d8 	.word	0x000002d8
    6d8c:	000002d8 	.word	0x000002d8
    6d90:	000002d8 	.word	0x000002d8
    6d94:	000002d8 	.word	0x000002d8
    6d98:	000002d8 	.word	0x000002d8
    6d9c:	000002d8 	.word	0x000002d8
    6da0:	000002d8 	.word	0x000002d8
    6da4:	000002d8 	.word	0x000002d8
    6da8:	000002d8 	.word	0x000002d8
    6dac:	000002d8 	.word	0x000002d8
    6db0:	000002b4 	.word	0x000002b4
    6db4:	000002b4 	.word	0x000002b4
    6db8:	000002bc 	.word	0x000002bc
    6dbc:	000002bc 	.word	0x000002bc
    6dc0:	000002bc 	.word	0x000002bc
    6dc4:	000002bc 	.word	0x000002bc

00006dc8 <mmc_trans_multipliers>:
    6dc8:	00000000 0000000a 0000000c 0000000d     ................
    6dd8:	0000000f 00000014 0000001a 0000001e     ................
    6de8:	00000023 00000028 0000002d 00000034     #...(...-...4...
    6df8:	00000037 0000003c 00000046 00000050     7...<...F...P...

00006e08 <sd_mmc_trans_units>:
    6e08:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00006e24 <sd_trans_multipliers>:
    6e24:	00000000 0000000a 0000000c 0000000d     ................
    6e34:	0000000f 00000014 00000019 0000001e     ................
    6e44:	00000023 00000028 0000002d 00000032     #...(...-...2...
    6e54:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6e64:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    6e74:	42001800 42001c00 00002ebe 00002eba     ...B...B........
    6e84:	00002eba 00002f20 00002f20 00002ed2     .... /.. /......
    6e94:	00002ec4 00002ed8 00002f0e 000030e0     ........./...0..
    6ea4:	000030c0 000030c0 0000314c 000030d2     .0...0..L1...0..
    6eb4:	000030ee 000030c4 000030fc 0000313c     .0...0...0..<1..

00006ec4 <LfnOfs>:
    6ec4:	07050301 12100e09 1c181614 0000001e     ................

00006ed4 <excvt.4558>:
    6ed4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    6ee4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    6ef4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    6f04:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    6f14:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    6f24:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    6f34:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    6f44:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6f54:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    6f64:	00005d5b                                []..

00006f68 <Tbl>:
    6f68:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6f78:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6f88:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6f98:	00d600ff 00f800dc 00d800a3 019200d7     ................
    6fa8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6fb8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    6fc8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    6fd8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    6fe8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    6ff8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    7008:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    7018:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    7028:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    7038:	00da00de 00d900db 00dd00fd 00b400af     ................
    7048:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    7058:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00007068 <tbl_lower.4308>:
    7068:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    7078:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    7088:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    7098:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    70a8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    70b8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    70c8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    70d8:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    70e8:	01050103 01090107 010d010b 0111010f     ................
    70f8:	01150113 01190117 011d011b 0121011f     ..............!.
    7108:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    7118:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    7128:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7138:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7148:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7158:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7168:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7178:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7188:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7198:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    71a8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    71b8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    71c8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    71d8:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    71e8:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    71f8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    7208:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    7218:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    7228:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7238:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007248 <tbl_upper.4309>:
    7248:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7258:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7268:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7278:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7288:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7298:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    72a8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    72b8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    72c8:	01040102 01080106 010c010a 0110010e     ................
    72d8:	01140112 01180116 011c011a 0120011e     .............. .
    72e8:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    72f8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    7308:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    7318:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    7328:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7338:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7348:	03940393 03960395 03980397 039a0399     ................
    7358:	039c039b 039e039d 03a0039f 03a303a1     ................
    7368:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7378:	04120411 04140413 04160415 04180417     ................
    7388:	041a0419 041c041b 041e041d 0420041f     .............. .
    7398:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    73a8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    73b8:	04030402 04050404 04070406 04090408     ................
    73c8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    73d8:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    73e8:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    73f8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    7408:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    7418:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    7428:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    7438:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    7448:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    7458:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    7468:	000d0a2d 61656c50 70206573 2067756c     -...Please plug 
    7478:	53206e61 4d4d2f44 61632043 69206472     an SD/MMC card i
    7488:	6c73206e 0a2e746f 0000000d 64726143     n slot......Card
    7498:	736e6920 6c6c6174 49414620 000d0a4c      install FAIL...
    74a8:	61656c50 75206573 756c706e 6e612067     Please unplug an
    74b8:	65722064 756c702d 68742067 61632065     d re-plug the ca
    74c8:	0a2e6472 0000000d 6e756f4d 69642074     rd......Mount di
    74d8:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    74e8:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    74f8:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    7508:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    7518:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    7528:	73657420 69662074 2820656c 75705f66      test file (f_pu
    7538:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    7548:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    7558:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    7568:	20736920 63637573 66737365 0a2e6c75      is successful..
    7578:	0000000d 6e65704f 20676e69 61726170     ....Opening para
    7588:	632e736d 0a0d7673 00000000 4941465b     ms.csv......[FAI
    7598:	43203a4c 646c756f 746f6e20 65706f20     L: Could not ope
    75a8:	6170206e 736d6172 6c696620 72205d65     n params file] r
    75b8:	25207365 000a0d64 4941465b 43203a4c     es %d...[FAIL: C
    75c8:	646c756f 746f6e20 61657220 61502064     ould not read Pa
    75d8:	656d6172 73726574 6c694620 72205d65     rameters File] r
    75e8:	25207365 000a0d64 7479425b 72207365     es %d...[Bytes r
    75f8:	20646165 6d6f7266 72617020 2e736d61     ead from params.
    7608:	3a767363 25205d20 000a0d64 0000002c     csv: ] %d...,...
    7618:	64616552 20676e69 6d6f7266 72617020     Reading from par
    7628:	2e736d61 20767363 00000a0d 74747542     ams.csv ....Butt
    7638:	77206e6f 70207361 73736572 203a6465     on was pressed: 
    7648:	41445055 474e4954 52494620 5241574d     UPDATING FIRMWAR
    7658:	0a0d2045 00000000 00000031 61647055     E ......1...Upda
    7668:	46206574 2067616c 20736177 3a746573     te Flag was set:
    7678:	44505520 4e495441 49462047 41574d52      UPDATING FIRMWA
    7688:	0d204552 0000000a 52204f4e 4f534145     RE .....NO REASO
    7698:	4f54204e 44505520 20455441 554a203a     N TO UPDATE : JU
    76a8:	4e49504d 4f542047 50504120 4143494c     MPING TO APPLICA
    76b8:	4e4f4954 000a0d20 61656c50 75206573     TION ...Please u
    76c8:	756c706e 68742067 61632065 0a2e6472     nplug the card..
    76d8:	0000000d 35455345 2d203631 49584520     ....ESE516 - EXI
    76e8:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....
    76f8:	64733a30 636d6d5f 7365745f 78742e74     0:sd_mmc_test.tx
    7708:	00000074 61726170 632e736d 00007673     t...params.csv..
    7718:	44414552 20474e49 2e707061 206e6962     READING app.bin 
    7728:	00000a0d 4941465b 43203a4c 646c756f     ....[FAIL: Could
    7738:	746f6e20 65706f20 6946206e 61776d72      not open Firmwa
    7748:	46206572 5d656c69 73657220 0d642520     re File] res %d.
    7758:	0000000a 20544f47 204d564e 41524150     ....GOT NVM PARA
    7768:	4554454d 0d205352 0000000a 45474150     METERS .....PAGE
    7778:	5a495320 53492045 20642520 65747962      SIZE IS %d byte
    7788:	000a0d73 20574f52 5a495320 53492045     s...ROW  SIZE IS
    7798:	20642520 65747962 000a0d73 52415453      %d bytes...STAR
    77a8:	474e4954 564f4d20 4c422045 534b434f     TING MOVE BLOCKS
    77b8:	000a0d20 4941465b 43203a4c 646c756f      ...[FAIL: Could
    77c8:	746f6e20 61657220 6c422064 206b636f      not read Block 
    77d8:	6d6f7266 72694620 7261776d 69462065     from Firmware Fi
    77e8:	205d656c 20736572 202c6425 65747962     le] res %d, byte
    77f8:	65722073 25206461 000a0d64 4941465b     s read %d...[FAI
    7808:	43203a4c 4f204352 7542204e 72656666     L: CRC ON Buffer
    7818:	6572205d 64252073 00000a0d 4941465b     ] res %d....[FAI
    7828:	43203a4c 44204352 4e204449 4d20544f     L: CRC DID NOT M
    7838:	48435441 000a0d5d 55544552 4e494e52     ATCH]...RETURNIN
    7848:	52462047 46204d4f 574d5249 20455241     G FROM FIRMWARE 
    7858:	41445055 0d204554 0000000a 70613a30     UPDATE .....0:ap
    7868:	69622e70 0000006e                       p.bin...

00007870 <_global_impure_ptr>:
    7870:	20000010                                ... 

00007874 <__sf_fake_stderr>:
	...

00007894 <__sf_fake_stdin>:
	...

000078b4 <__sf_fake_stdout>:
	...
    78d4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    78e4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    78f4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7904:	00006665                                ef..

00007908 <_init>:
    7908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    790a:	46c0      	nop			; (mov r8, r8)
    790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    790e:	bc08      	pop	{r3}
    7910:	469e      	mov	lr, r3
    7912:	4770      	bx	lr

00007914 <__init_array_start>:
    7914:	000000dd 	.word	0x000000dd

00007918 <_fini>:
    7918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    791a:	46c0      	nop			; (mov r8, r8)
    791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    791e:	bc08      	pop	{r3}
    7920:	469e      	mov	lr, r3
    7922:	4770      	bx	lr

00007924 <__fini_array_start>:
    7924:	000000b5 	.word	0x000000b5
