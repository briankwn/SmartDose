
SD_MMC_bootloader_EXAMPLE_ESE516.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007880  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00007880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000990  20000070  000078f0  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000a00  00008280  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000467df  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069f2  00000000  00000000  000668d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010d6e  00000000  00000000  0006d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b58  00000000  00000000  0007e030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010a0  00000000  00000000  0007eb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020331  00000000  00000000  0007fc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000162d0  00000000  00000000  0009ff59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009392c  00000000  00000000  000b6229  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002640  00000000  00000000  00149b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2a 00 20 d9 35 00 00 d5 35 00 00 d5 35 00 00     .*. .5...5...5..
	...
      2c:	d5 35 00 00 00 00 00 00 00 00 00 00 d5 35 00 00     .5...........5..
      3c:	d5 35 00 00 d5 35 00 00 d5 35 00 00 d5 35 00 00     .5...5...5...5..
      4c:	d5 35 00 00 d5 35 00 00 d5 35 00 00 d5 35 00 00     .5...5...5...5..
      5c:	d5 35 00 00 d5 35 00 00 2d 20 00 00 3d 20 00 00     .5...5..- ..= ..
      6c:	4d 20 00 00 5d 20 00 00 6d 20 00 00 7d 20 00 00     M ..] ..m ..} ..
      7c:	d5 35 00 00 d5 35 00 00 d5 35 00 00 d5 35 00 00     .5...5...5...5..
      8c:	d5 35 00 00 d5 35 00 00 00 00 00 00 00 00 00 00     .5...5..........
      9c:	d5 35 00 00 d5 35 00 00 d5 35 00 00 d5 35 00 00     .5...5...5...5..
      ac:	d5 35 00 00 00 00 00 00                             .5......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00007880 	.word	0x00007880

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00007880 	.word	0x00007880
     10c:	00007880 	.word	0x00007880
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003365 	.word	0x00003365
     140:	0000590d 	.word	0x0000590d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	46c6      	mov	lr, r8
     184:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     186:	2303      	movs	r3, #3
     188:	0007      	movs	r7, r0
     18a:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     18c:	6813      	ldr	r3, [r2, #0]
     18e:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
     190:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
     192:	2903      	cmp	r1, #3
     194:	d902      	bls.n	19c <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     196:	4244      	negs	r4, r0
     198:	2003      	movs	r0, #3
     19a:	4004      	ands	r4, r0
	}

	if (temp_length) {
     19c:	2c00      	cmp	r4, #0
     19e:	d016      	beq.n	1ce <crc32_recalculate+0x4e>
		length -= temp_length;
     1a0:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
     1a2:	1d3e      	adds	r6, r7, #4
     1a4:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
     1a6:	00e0      	lsls	r0, r4, #3
     1a8:	4240      	negs	r0, r0
     1aa:	3020      	adds	r0, #32
     1ac:	40c5      	lsrs	r5, r0
	crc ^= data;
     1ae:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
     1b0:	00e0      	lsls	r0, r4, #3
     1b2:	d019      	beq.n	1e8 <crc32_recalculate+0x68>
		if (crc & 1) {
     1b4:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1b6:	4d27      	ldr	r5, [pc, #156]	; (254 <crc32_recalculate+0xd4>)
     1b8:	e003      	b.n	1c2 <crc32_recalculate+0x42>
			crc >>= 1;
     1ba:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     1bc:	3801      	subs	r0, #1
     1be:	2800      	cmp	r0, #0
     1c0:	d004      	beq.n	1cc <crc32_recalculate+0x4c>
		if (crc & 1) {
     1c2:	421c      	tst	r4, r3
     1c4:	d0f9      	beq.n	1ba <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1c6:	085b      	lsrs	r3, r3, #1
     1c8:	406b      	eors	r3, r5
     1ca:	e7f7      	b.n	1bc <crc32_recalculate+0x3c>
		word = *(word_ptr++);
     1cc:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     1ce:	2003      	movs	r0, #3
     1d0:	000c      	movs	r4, r1
     1d2:	4384      	bics	r4, r0

	if (temp_length) {
     1d4:	d01e      	beq.n	214 <crc32_recalculate+0x94>
		length -= temp_length;
     1d6:	1b08      	subs	r0, r1, r4
     1d8:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
     1da:	0889      	lsrs	r1, r1, #2
     1dc:	4688      	mov	r8, r1
     1de:	003e      	movs	r6, r7
     1e0:	000d      	movs	r5, r1
		if (crc & 1) {
     1e2:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1e4:	4c1b      	ldr	r4, [pc, #108]	; (254 <crc32_recalculate+0xd4>)

		while (temp_length--) {
     1e6:	e00b      	b.n	200 <crc32_recalculate+0x80>
		word = *(word_ptr++);
     1e8:	0037      	movs	r7, r6
     1ea:	e7f0      	b.n	1ce <crc32_recalculate+0x4e>
			crc >>= 1;
     1ec:	085b      	lsrs	r3, r3, #1
     1ee:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     1f0:	2900      	cmp	r1, #0
     1f2:	d004      	beq.n	1fe <crc32_recalculate+0x7e>
		if (crc & 1) {
     1f4:	4218      	tst	r0, r3
     1f6:	d0f9      	beq.n	1ec <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1f8:	085b      	lsrs	r3, r3, #1
     1fa:	4063      	eors	r3, r4
     1fc:	e7f7      	b.n	1ee <crc32_recalculate+0x6e>
     1fe:	3604      	adds	r6, #4
		while (temp_length--) {
     200:	3d01      	subs	r5, #1
     202:	d303      	bcc.n	20c <crc32_recalculate+0x8c>
	crc ^= data;
     204:	6831      	ldr	r1, [r6, #0]
     206:	404b      	eors	r3, r1
     208:	2120      	movs	r1, #32
     20a:	e7f3      	b.n	1f4 <crc32_recalculate+0x74>
     20c:	4641      	mov	r1, r8
     20e:	0089      	lsls	r1, r1, #2
     210:	187f      	adds	r7, r7, r1
		length -= temp_length;
     212:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
     214:	2900      	cmp	r1, #0
     216:	d017      	beq.n	248 <crc32_recalculate+0xc8>
		word = *word_ptr;
     218:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     21a:	00c8      	lsls	r0, r1, #3
     21c:	4240      	negs	r0, r0
     21e:	3020      	adds	r0, #32
     220:	2501      	movs	r5, #1
     222:	426d      	negs	r5, r5
     224:	40c5      	lsrs	r5, r0
     226:	0028      	movs	r0, r5
     228:	4020      	ands	r0, r4
	crc ^= data;
     22a:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
     22c:	00c9      	lsls	r1, r1, #3
     22e:	d00b      	beq.n	248 <crc32_recalculate+0xc8>
		if (crc & 1) {
     230:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     232:	4c08      	ldr	r4, [pc, #32]	; (254 <crc32_recalculate+0xd4>)
     234:	e003      	b.n	23e <crc32_recalculate+0xbe>
			crc >>= 1;
     236:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     238:	3901      	subs	r1, #1
     23a:	2900      	cmp	r1, #0
     23c:	d004      	beq.n	248 <crc32_recalculate+0xc8>
		if (crc & 1) {
     23e:	4218      	tst	r0, r3
     240:	d0f9      	beq.n	236 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     242:	085b      	lsrs	r3, r3, #1
     244:	4063      	eors	r3, r4
     246:	e7f7      	b.n	238 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     248:	43db      	mvns	r3, r3
     24a:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
     24c:	2000      	movs	r0, #0
     24e:	bc04      	pop	{r2}
     250:	4690      	mov	r8, r2
     252:	bdf0      	pop	{r4, r5, r6, r7, pc}
     254:	edb88320 	.word	0xedb88320

00000258 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     25c:	ac01      	add	r4, sp, #4
     25e:	2501      	movs	r5, #1
     260:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     262:	2700      	movs	r7, #0
     264:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     266:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     268:	0021      	movs	r1, r4
     26a:	2017      	movs	r0, #23
     26c:	4e06      	ldr	r6, [pc, #24]	; (288 <system_board_init+0x30>)
     26e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     270:	2280      	movs	r2, #128	; 0x80
     272:	0412      	lsls	r2, r2, #16
     274:	4b05      	ldr	r3, [pc, #20]	; (28c <system_board_init+0x34>)
     276:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     278:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     27a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     27c:	0021      	movs	r1, r4
     27e:	2037      	movs	r0, #55	; 0x37
     280:	47b0      	blx	r6
}
     282:	b003      	add	sp, #12
     284:	bdf0      	pop	{r4, r5, r6, r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	00001a4d 	.word	0x00001a4d
     28c:	41004400 	.word	0x41004400

00000290 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     290:	b530      	push	{r4, r5, lr}
     292:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     294:	4a22      	ldr	r2, [pc, #136]	; (320 <nvm_execute_command+0x90>)
     296:	8810      	ldrh	r0, [r2, #0]
     298:	8853      	ldrh	r3, [r2, #2]
     29a:	4343      	muls	r3, r0
     29c:	428b      	cmp	r3, r1
     29e:	d206      	bcs.n	2ae <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     2a0:	2280      	movs	r2, #128	; 0x80
     2a2:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     2a4:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     2a6:	4b1f      	ldr	r3, [pc, #124]	; (324 <nvm_execute_command+0x94>)
     2a8:	18cb      	adds	r3, r1, r3
     2aa:	4293      	cmp	r3, r2
     2ac:	d80e      	bhi.n	2cc <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     2ae:	4b1e      	ldr	r3, [pc, #120]	; (328 <nvm_execute_command+0x98>)
     2b0:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     2b2:	2280      	movs	r2, #128	; 0x80
     2b4:	02d2      	lsls	r2, r2, #11
     2b6:	432a      	orrs	r2, r5
     2b8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     2ba:	2220      	movs	r2, #32
     2bc:	32ff      	adds	r2, #255	; 0xff
     2be:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2c0:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     2c2:	07db      	lsls	r3, r3, #31
     2c4:	d403      	bmi.n	2ce <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     2c6:	4b18      	ldr	r3, [pc, #96]	; (328 <nvm_execute_command+0x98>)
     2c8:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     2ca:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     2cc:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     2ce:	2c45      	cmp	r4, #69	; 0x45
     2d0:	d822      	bhi.n	318 <nvm_execute_command+0x88>
     2d2:	00a3      	lsls	r3, r4, #2
     2d4:	4a15      	ldr	r2, [pc, #84]	; (32c <nvm_execute_command+0x9c>)
     2d6:	58d3      	ldr	r3, [r2, r3]
     2d8:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     2da:	4b13      	ldr	r3, [pc, #76]	; (328 <nvm_execute_command+0x98>)
     2dc:	8b1b      	ldrh	r3, [r3, #24]
     2de:	05db      	lsls	r3, r3, #23
     2e0:	d503      	bpl.n	2ea <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     2e2:	4b11      	ldr	r3, [pc, #68]	; (328 <nvm_execute_command+0x98>)
     2e4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     2e6:	2010      	movs	r0, #16
     2e8:	e7f0      	b.n	2cc <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2ea:	0889      	lsrs	r1, r1, #2
     2ec:	0049      	lsls	r1, r1, #1
     2ee:	4b0e      	ldr	r3, [pc, #56]	; (328 <nvm_execute_command+0x98>)
     2f0:	61d9      	str	r1, [r3, #28]
			break;
     2f2:	e003      	b.n	2fc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2f4:	0889      	lsrs	r1, r1, #2
     2f6:	0049      	lsls	r1, r1, #1
     2f8:	4b0b      	ldr	r3, [pc, #44]	; (328 <nvm_execute_command+0x98>)
     2fa:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     2fc:	20a5      	movs	r0, #165	; 0xa5
     2fe:	0200      	lsls	r0, r0, #8
     300:	4304      	orrs	r4, r0
     302:	4b09      	ldr	r3, [pc, #36]	; (328 <nvm_execute_command+0x98>)
     304:	801c      	strh	r4, [r3, #0]
     306:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     308:	2201      	movs	r2, #1
     30a:	7d0b      	ldrb	r3, [r1, #20]
     30c:	4213      	tst	r3, r2
     30e:	d0fc      	beq.n	30a <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     310:	4b05      	ldr	r3, [pc, #20]	; (328 <nvm_execute_command+0x98>)
     312:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     314:	2000      	movs	r0, #0
     316:	e7d9      	b.n	2cc <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     318:	4b03      	ldr	r3, [pc, #12]	; (328 <nvm_execute_command+0x98>)
     31a:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     31c:	2017      	movs	r0, #23
     31e:	e7d5      	b.n	2cc <nvm_execute_command+0x3c>
     320:	2000008c 	.word	0x2000008c
     324:	ff7fc000 	.word	0xff7fc000
     328:	41004000 	.word	0x41004000
     32c:	00006bfc 	.word	0x00006bfc

00000330 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     332:	4b25      	ldr	r3, [pc, #148]	; (3c8 <nvm_write_buffer+0x98>)
     334:	881d      	ldrh	r5, [r3, #0]
     336:	885b      	ldrh	r3, [r3, #2]
     338:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     33a:	2418      	movs	r4, #24
	if (destination_address >
     33c:	4283      	cmp	r3, r0
     33e:	d201      	bcs.n	344 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     340:	0020      	movs	r0, r4
     342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     344:	1e6b      	subs	r3, r5, #1
     346:	4218      	tst	r0, r3
     348:	d1fa      	bne.n	340 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     34a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     34c:	4295      	cmp	r5, r2
     34e:	d3f7      	bcc.n	340 <nvm_write_buffer+0x10>
     350:	4b1e      	ldr	r3, [pc, #120]	; (3cc <nvm_write_buffer+0x9c>)
     352:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     354:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     356:	07db      	lsls	r3, r3, #31
     358:	d5f2      	bpl.n	340 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     35a:	4c1d      	ldr	r4, [pc, #116]	; (3d0 <nvm_write_buffer+0xa0>)
     35c:	4b1b      	ldr	r3, [pc, #108]	; (3cc <nvm_write_buffer+0x9c>)
     35e:	801c      	strh	r4, [r3, #0]
     360:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     362:	2401      	movs	r4, #1
     364:	7d2b      	ldrb	r3, [r5, #20]
     366:	4223      	tst	r3, r4
     368:	d0fc      	beq.n	364 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     36a:	2420      	movs	r4, #32
     36c:	34ff      	adds	r4, #255	; 0xff
     36e:	4b17      	ldr	r3, [pc, #92]	; (3cc <nvm_write_buffer+0x9c>)
     370:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     372:	2a00      	cmp	r2, #0
     374:	d022      	beq.n	3bc <nvm_write_buffer+0x8c>
     376:	2301      	movs	r3, #1
     378:	0005      	movs	r5, r0
     37a:	439d      	bics	r5, r3
     37c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     37e:	1e57      	subs	r7, r2, #1
     380:	e009      	b.n	396 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     382:	18ce      	adds	r6, r1, r3
     384:	7876      	ldrb	r6, [r6, #1]
     386:	0236      	lsls	r6, r6, #8
     388:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     38a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     38c:	3302      	adds	r3, #2
     38e:	b29b      	uxth	r3, r3
     390:	3502      	adds	r5, #2
     392:	429a      	cmp	r2, r3
     394:	d904      	bls.n	3a0 <nvm_write_buffer+0x70>
		data = buffer[i];
     396:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     398:	42bb      	cmp	r3, r7
     39a:	dbf2      	blt.n	382 <nvm_write_buffer+0x52>
		data = buffer[i];
     39c:	b2a4      	uxth	r4, r4
     39e:	e7f4      	b.n	38a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3a0:	4b09      	ldr	r3, [pc, #36]	; (3c8 <nvm_write_buffer+0x98>)
     3a2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     3a4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3a6:	2b00      	cmp	r3, #0
     3a8:	d1ca      	bne.n	340 <nvm_write_buffer+0x10>
     3aa:	2a3f      	cmp	r2, #63	; 0x3f
     3ac:	d8c8      	bhi.n	340 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     3ae:	2200      	movs	r2, #0
     3b0:	0001      	movs	r1, r0
     3b2:	2004      	movs	r0, #4
     3b4:	4b07      	ldr	r3, [pc, #28]	; (3d4 <nvm_write_buffer+0xa4>)
     3b6:	4798      	blx	r3
     3b8:	0004      	movs	r4, r0
     3ba:	e7c1      	b.n	340 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3bc:	4b02      	ldr	r3, [pc, #8]	; (3c8 <nvm_write_buffer+0x98>)
     3be:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     3c0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3c2:	2b00      	cmp	r3, #0
     3c4:	d0f3      	beq.n	3ae <nvm_write_buffer+0x7e>
     3c6:	e7bb      	b.n	340 <nvm_write_buffer+0x10>
     3c8:	2000008c 	.word	0x2000008c
     3cc:	41004000 	.word	0x41004000
     3d0:	ffffa544 	.word	0xffffa544
     3d4:	00000291 	.word	0x00000291

000003d8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     3d8:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     3da:	4b18      	ldr	r3, [pc, #96]	; (43c <nvm_read_buffer+0x64>)
     3dc:	881d      	ldrh	r5, [r3, #0]
     3de:	885b      	ldrh	r3, [r3, #2]
     3e0:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     3e2:	2418      	movs	r4, #24
	if (source_address >
     3e4:	4283      	cmp	r3, r0
     3e6:	d201      	bcs.n	3ec <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     3e8:	0020      	movs	r0, r4
     3ea:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     3ec:	1e6b      	subs	r3, r5, #1
     3ee:	4218      	tst	r0, r3
     3f0:	d1fa      	bne.n	3e8 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     3f2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     3f4:	4295      	cmp	r5, r2
     3f6:	d3f7      	bcc.n	3e8 <nvm_read_buffer+0x10>
     3f8:	4b11      	ldr	r3, [pc, #68]	; (440 <nvm_read_buffer+0x68>)
     3fa:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3fc:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     3fe:	07db      	lsls	r3, r3, #31
     400:	d5f2      	bpl.n	3e8 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     402:	2420      	movs	r4, #32
     404:	34ff      	adds	r4, #255	; 0xff
     406:	4b0e      	ldr	r3, [pc, #56]	; (440 <nvm_read_buffer+0x68>)
     408:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     40a:	2a00      	cmp	r2, #0
     40c:	d014      	beq.n	438 <nvm_read_buffer+0x60>
     40e:	2301      	movs	r3, #1
     410:	4398      	bics	r0, r3
     412:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     414:	1e56      	subs	r6, r2, #1
     416:	e004      	b.n	422 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     418:	3302      	adds	r3, #2
     41a:	b29b      	uxth	r3, r3
     41c:	3002      	adds	r0, #2
     41e:	429a      	cmp	r2, r3
     420:	d908      	bls.n	434 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     422:	8804      	ldrh	r4, [r0, #0]
     424:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     426:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     428:	42b3      	cmp	r3, r6
     42a:	daf5      	bge.n	418 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     42c:	18cd      	adds	r5, r1, r3
     42e:	0a24      	lsrs	r4, r4, #8
     430:	706c      	strb	r4, [r5, #1]
     432:	e7f1      	b.n	418 <nvm_read_buffer+0x40>
	return STATUS_OK;
     434:	2400      	movs	r4, #0
     436:	e7d7      	b.n	3e8 <nvm_read_buffer+0x10>
     438:	2400      	movs	r4, #0
     43a:	e7d5      	b.n	3e8 <nvm_read_buffer+0x10>
     43c:	2000008c 	.word	0x2000008c
     440:	41004000 	.word	0x41004000

00000444 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     444:	4b13      	ldr	r3, [pc, #76]	; (494 <nvm_erase_row+0x50>)
     446:	881a      	ldrh	r2, [r3, #0]
     448:	885b      	ldrh	r3, [r3, #2]
     44a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     44c:	2118      	movs	r1, #24
	if (row_address >
     44e:	4283      	cmp	r3, r0
     450:	d201      	bcs.n	456 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     452:	0008      	movs	r0, r1
     454:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     456:	0092      	lsls	r2, r2, #2
     458:	3a01      	subs	r2, #1
     45a:	4210      	tst	r0, r2
     45c:	d1f9      	bne.n	452 <nvm_erase_row+0xe>
     45e:	4b0e      	ldr	r3, [pc, #56]	; (498 <nvm_erase_row+0x54>)
     460:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     462:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     464:	07db      	lsls	r3, r3, #31
     466:	d5f4      	bpl.n	452 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     468:	4b0b      	ldr	r3, [pc, #44]	; (498 <nvm_erase_row+0x54>)
     46a:	2220      	movs	r2, #32
     46c:	32ff      	adds	r2, #255	; 0xff
     46e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     470:	0880      	lsrs	r0, r0, #2
     472:	0040      	lsls	r0, r0, #1
     474:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     476:	4a09      	ldr	r2, [pc, #36]	; (49c <nvm_erase_row+0x58>)
     478:	801a      	strh	r2, [r3, #0]
     47a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     47c:	2201      	movs	r2, #1
     47e:	7d0b      	ldrb	r3, [r1, #20]
     480:	4213      	tst	r3, r2
     482:	d0fc      	beq.n	47e <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <nvm_erase_row+0x54>)
     486:	8b19      	ldrh	r1, [r3, #24]
     488:	201c      	movs	r0, #28
     48a:	4001      	ands	r1, r0
	return STATUS_OK;
     48c:	1e48      	subs	r0, r1, #1
     48e:	4181      	sbcs	r1, r0
     490:	0089      	lsls	r1, r1, #2
     492:	e7de      	b.n	452 <nvm_erase_row+0xe>
     494:	2000008c 	.word	0x2000008c
     498:	41004000 	.word	0x41004000
     49c:	ffffa502 	.word	0xffffa502

000004a0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     4a0:	b510      	push	{r4, lr}
     4a2:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     4a4:	7c03      	ldrb	r3, [r0, #16]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d005      	beq.n	4b6 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     4aa:	6883      	ldr	r3, [r0, #8]
     4ac:	1c58      	adds	r0, r3, #1
     4ae:	68e1      	ldr	r1, [r4, #12]
     4b0:	4b07      	ldr	r3, [pc, #28]	; (4d0 <advance_pointer+0x30>)
     4b2:	4798      	blx	r3
     4b4:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     4b6:	6863      	ldr	r3, [r4, #4]
     4b8:	1c58      	adds	r0, r3, #1
     4ba:	68e1      	ldr	r1, [r4, #12]
     4bc:	4b04      	ldr	r3, [pc, #16]	; (4d0 <advance_pointer+0x30>)
     4be:	4798      	blx	r3
     4c0:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4c2:	68a3      	ldr	r3, [r4, #8]
     4c4:	1a59      	subs	r1, r3, r1
     4c6:	424a      	negs	r2, r1
     4c8:	414a      	adcs	r2, r1
     4ca:	7422      	strb	r2, [r4, #16]
 }
     4cc:	bd10      	pop	{r4, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00005a19 	.word	0x00005a19

000004d4 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	0005      	movs	r5, r0
     4d8:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     4da:	2014      	movs	r0, #20
     4dc:	4b04      	ldr	r3, [pc, #16]	; (4f0 <circular_buf_init+0x1c>)
     4de:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     4e0:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     4e2:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     4e4:	2300      	movs	r3, #0
     4e6:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     4e8:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     4ea:	7403      	strb	r3, [r0, #16]
 }
     4ec:	bd70      	pop	{r4, r5, r6, pc}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	00005c95 	.word	0x00005c95

000004f4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     4f4:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     4f6:	6803      	ldr	r3, [r0, #0]
     4f8:	6842      	ldr	r2, [r0, #4]
     4fa:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     4fc:	4b01      	ldr	r3, [pc, #4]	; (504 <circular_buf_put+0x10>)
     4fe:	4798      	blx	r3
 }
     500:	bd10      	pop	{r4, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	000004a1 	.word	0x000004a1

00000508 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     508:	7c02      	ldrb	r2, [r0, #16]
     50a:	2300      	movs	r3, #0
     50c:	2a00      	cmp	r2, #0
     50e:	d105      	bne.n	51c <circular_buf_empty+0x14>
     510:	6843      	ldr	r3, [r0, #4]
     512:	6880      	ldr	r0, [r0, #8]
     514:	1a1b      	subs	r3, r3, r0
     516:	4258      	negs	r0, r3
     518:	4143      	adcs	r3, r0
     51a:	b2db      	uxtb	r3, r3
     51c:	0018      	movs	r0, r3
 }
     51e:	4770      	bx	lr

00000520 <circular_buf_get>:
 {
     520:	b570      	push	{r4, r5, r6, lr}
     522:	0004      	movs	r4, r0
     524:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     526:	4b0a      	ldr	r3, [pc, #40]	; (550 <circular_buf_get+0x30>)
     528:	4798      	blx	r3
     52a:	2800      	cmp	r0, #0
     52c:	d10d      	bne.n	54a <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     52e:	6823      	ldr	r3, [r4, #0]
     530:	68a2      	ldr	r2, [r4, #8]
     532:	5c9b      	ldrb	r3, [r3, r2]
     534:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     536:	2300      	movs	r3, #0
     538:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     53a:	68a3      	ldr	r3, [r4, #8]
     53c:	1c58      	adds	r0, r3, #1
     53e:	68e1      	ldr	r1, [r4, #12]
     540:	4b04      	ldr	r3, [pc, #16]	; (554 <circular_buf_get+0x34>)
     542:	4798      	blx	r3
     544:	60a1      	str	r1, [r4, #8]
		 r = 0;
     546:	2000      	movs	r0, #0
 }
     548:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     54a:	2001      	movs	r0, #1
     54c:	4240      	negs	r0, r0
	 return r;
     54e:	e7fb      	b.n	548 <circular_buf_get+0x28>
     550:	00000509 	.word	0x00000509
     554:	00005a19 	.word	0x00005a19

00000558 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	b082      	sub	sp, #8
     55c:	0005      	movs	r5, r0
     55e:	000e      	movs	r6, r1
	uint16_t temp = 0;
     560:	2200      	movs	r2, #0
     562:	466b      	mov	r3, sp
     564:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     566:	4c06      	ldr	r4, [pc, #24]	; (580 <usart_serial_getchar+0x28>)
     568:	466b      	mov	r3, sp
     56a:	1d99      	adds	r1, r3, #6
     56c:	0028      	movs	r0, r5
     56e:	47a0      	blx	r4
     570:	2800      	cmp	r0, #0
     572:	d1f9      	bne.n	568 <usart_serial_getchar+0x10>

	*c = temp;
     574:	466b      	mov	r3, sp
     576:	3306      	adds	r3, #6
     578:	881b      	ldrh	r3, [r3, #0]
     57a:	7033      	strb	r3, [r6, #0]
}
     57c:	b002      	add	sp, #8
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	00002b3d 	.word	0x00002b3d

00000584 <usart_serial_putchar>:
{
     584:	b570      	push	{r4, r5, r6, lr}
     586:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     588:	b28c      	uxth	r4, r1
     58a:	4e03      	ldr	r6, [pc, #12]	; (598 <usart_serial_putchar+0x14>)
     58c:	0021      	movs	r1, r4
     58e:	0028      	movs	r0, r5
     590:	47b0      	blx	r6
     592:	2800      	cmp	r0, #0
     594:	d1fa      	bne.n	58c <usart_serial_putchar+0x8>
}
     596:	bd70      	pop	{r4, r5, r6, pc}
     598:	00002b11 	.word	0x00002b11

0000059c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     59c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <usart_write_callback+0x1c>)
     5a0:	6818      	ldr	r0, [r3, #0]
     5a2:	4906      	ldr	r1, [pc, #24]	; (5bc <usart_write_callback+0x20>)
     5a4:	4b06      	ldr	r3, [pc, #24]	; (5c0 <usart_write_callback+0x24>)
     5a6:	4798      	blx	r3
     5a8:	1c43      	adds	r3, r0, #1
     5aa:	d004      	beq.n	5b6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     5ac:	2201      	movs	r2, #1
     5ae:	4903      	ldr	r1, [pc, #12]	; (5bc <usart_write_callback+0x20>)
     5b0:	4804      	ldr	r0, [pc, #16]	; (5c4 <usart_write_callback+0x28>)
     5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <usart_write_callback+0x2c>)
     5b4:	4798      	blx	r3
	}
	
}
     5b6:	bd10      	pop	{r4, pc}
     5b8:	200009c4 	.word	0x200009c4
     5bc:	200009c0 	.word	0x200009c0
     5c0:	00000521 	.word	0x00000521
     5c4:	20000184 	.word	0x20000184
     5c8:	00002c51 	.word	0x00002c51

000005cc <InitializeSerialConsole>:
{
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     5d0:	2580      	movs	r5, #128	; 0x80
     5d2:	00ed      	lsls	r5, r5, #3
     5d4:	0029      	movs	r1, r5
     5d6:	483f      	ldr	r0, [pc, #252]	; (6d4 <InitializeSerialConsole+0x108>)
     5d8:	4c3f      	ldr	r4, [pc, #252]	; (6d8 <InitializeSerialConsole+0x10c>)
     5da:	47a0      	blx	r4
     5dc:	4b3f      	ldr	r3, [pc, #252]	; (6dc <InitializeSerialConsole+0x110>)
     5de:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     5e0:	0029      	movs	r1, r5
     5e2:	483f      	ldr	r0, [pc, #252]	; (6e0 <InitializeSerialConsole+0x114>)
     5e4:	47a0      	blx	r4
     5e6:	4b3f      	ldr	r3, [pc, #252]	; (6e4 <InitializeSerialConsole+0x118>)
     5e8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5ea:	2380      	movs	r3, #128	; 0x80
     5ec:	05db      	lsls	r3, r3, #23
     5ee:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5f0:	2300      	movs	r3, #0
     5f2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     5f4:	22ff      	movs	r2, #255	; 0xff
     5f6:	4669      	mov	r1, sp
     5f8:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     5fa:	2200      	movs	r2, #0
     5fc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     5fe:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     600:	2101      	movs	r1, #1
     602:	2024      	movs	r0, #36	; 0x24
     604:	466c      	mov	r4, sp
     606:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     608:	3001      	adds	r0, #1
     60a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     60c:	3125      	adds	r1, #37	; 0x25
     60e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     610:	3101      	adds	r1, #1
     612:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     614:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     616:	3105      	adds	r1, #5
     618:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     61a:	3101      	adds	r1, #1
     61c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     61e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     620:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     622:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     624:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     626:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     628:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     62a:	2313      	movs	r3, #19
     62c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     62e:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     630:	23e1      	movs	r3, #225	; 0xe1
     632:	025b      	lsls	r3, r3, #9
     634:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     636:	23c4      	movs	r3, #196	; 0xc4
     638:	039b      	lsls	r3, r3, #14
     63a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     63c:	2301      	movs	r3, #1
     63e:	425b      	negs	r3, r3
     640:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     642:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     644:	4b28      	ldr	r3, [pc, #160]	; (6e8 <InitializeSerialConsole+0x11c>)
     646:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     648:	4b28      	ldr	r3, [pc, #160]	; (6ec <InitializeSerialConsole+0x120>)
     64a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     64c:	4d28      	ldr	r5, [pc, #160]	; (6f0 <InitializeSerialConsole+0x124>)
     64e:	4c29      	ldr	r4, [pc, #164]	; (6f4 <InitializeSerialConsole+0x128>)
     650:	466a      	mov	r2, sp
     652:	4929      	ldr	r1, [pc, #164]	; (6f8 <InitializeSerialConsole+0x12c>)
     654:	0028      	movs	r0, r5
     656:	47a0      	blx	r4
     658:	2800      	cmp	r0, #0
     65a:	d1f9      	bne.n	650 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     65c:	4d24      	ldr	r5, [pc, #144]	; (6f0 <InitializeSerialConsole+0x124>)
     65e:	4b27      	ldr	r3, [pc, #156]	; (6fc <InitializeSerialConsole+0x130>)
     660:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     662:	4a27      	ldr	r2, [pc, #156]	; (700 <InitializeSerialConsole+0x134>)
     664:	4b27      	ldr	r3, [pc, #156]	; (704 <InitializeSerialConsole+0x138>)
     666:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     668:	4a27      	ldr	r2, [pc, #156]	; (708 <InitializeSerialConsole+0x13c>)
     66a:	4b28      	ldr	r3, [pc, #160]	; (70c <InitializeSerialConsole+0x140>)
     66c:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     66e:	4e28      	ldr	r6, [pc, #160]	; (710 <InitializeSerialConsole+0x144>)
     670:	6833      	ldr	r3, [r6, #0]
     672:	6898      	ldr	r0, [r3, #8]
     674:	2100      	movs	r1, #0
     676:	4c27      	ldr	r4, [pc, #156]	; (714 <InitializeSerialConsole+0x148>)
     678:	47a0      	blx	r4
	setbuf(stdin, NULL);
     67a:	6833      	ldr	r3, [r6, #0]
     67c:	6858      	ldr	r0, [r3, #4]
     67e:	2100      	movs	r1, #0
     680:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     682:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     684:	0020      	movs	r0, r4
     686:	4b24      	ldr	r3, [pc, #144]	; (718 <InitializeSerialConsole+0x14c>)
     688:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     68a:	231f      	movs	r3, #31
     68c:	4018      	ands	r0, r3
     68e:	3b1e      	subs	r3, #30
     690:	4083      	lsls	r3, r0
     692:	4a22      	ldr	r2, [pc, #136]	; (71c <InitializeSerialConsole+0x150>)
     694:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     696:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     698:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     69a:	2b00      	cmp	r3, #0
     69c:	d1fc      	bne.n	698 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     69e:	6823      	ldr	r3, [r4, #0]
     6a0:	2202      	movs	r2, #2
     6a2:	4313      	orrs	r3, r2
     6a4:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     6a6:	4c12      	ldr	r4, [pc, #72]	; (6f0 <InitializeSerialConsole+0x124>)
     6a8:	2200      	movs	r2, #0
     6aa:	491d      	ldr	r1, [pc, #116]	; (720 <InitializeSerialConsole+0x154>)
     6ac:	0020      	movs	r0, r4
     6ae:	4d1d      	ldr	r5, [pc, #116]	; (724 <InitializeSerialConsole+0x158>)
     6b0:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     6b2:	2201      	movs	r2, #1
     6b4:	491c      	ldr	r1, [pc, #112]	; (728 <InitializeSerialConsole+0x15c>)
     6b6:	0020      	movs	r0, r4
     6b8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6ba:	2231      	movs	r2, #49	; 0x31
     6bc:	5ca3      	ldrb	r3, [r4, r2]
     6be:	2103      	movs	r1, #3
     6c0:	430b      	orrs	r3, r1
     6c2:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     6c4:	3a30      	subs	r2, #48	; 0x30
     6c6:	4919      	ldr	r1, [pc, #100]	; (72c <InitializeSerialConsole+0x160>)
     6c8:	0020      	movs	r0, r4
     6ca:	4b19      	ldr	r3, [pc, #100]	; (730 <InitializeSerialConsole+0x164>)
     6cc:	4798      	blx	r3
}
     6ce:	b010      	add	sp, #64	; 0x40
     6d0:	bd70      	pop	{r4, r5, r6, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	200005c0 	.word	0x200005c0
     6d8:	000004d5 	.word	0x000004d5
     6dc:	200001b8 	.word	0x200001b8
     6e0:	200001c0 	.word	0x200001c0
     6e4:	200009c4 	.word	0x200009c4
     6e8:	002a0003 	.word	0x002a0003
     6ec:	002b0003 	.word	0x002b0003
     6f0:	20000184 	.word	0x20000184
     6f4:	000027cd 	.word	0x000027cd
     6f8:	42001800 	.word	0x42001800
     6fc:	200009f0 	.word	0x200009f0
     700:	00000585 	.word	0x00000585
     704:	200009ec 	.word	0x200009ec
     708:	00000559 	.word	0x00000559
     70c:	200009e8 	.word	0x200009e8
     710:	2000000c 	.word	0x2000000c
     714:	00005e2d 	.word	0x00005e2d
     718:	00001ffd 	.word	0x00001ffd
     71c:	e000e100 	.word	0xe000e100
     720:	0000059d 	.word	0x0000059d
     724:	00002c39 	.word	0x00002c39
     728:	000007e1 	.word	0x000007e1
     72c:	200001bc 	.word	0x200001bc
     730:	00002c71 	.word	0x00002c71

00000734 <DeinitializeSerialConsole>:
{
     734:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     736:	4d0a      	ldr	r5, [pc, #40]	; (760 <DeinitializeSerialConsole+0x2c>)
     738:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     73a:	0020      	movs	r0, r4
     73c:	4b09      	ldr	r3, [pc, #36]	; (764 <DeinitializeSerialConsole+0x30>)
     73e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     740:	231f      	movs	r3, #31
     742:	4018      	ands	r0, r3
     744:	3b1e      	subs	r3, #30
     746:	4083      	lsls	r3, r0
     748:	2280      	movs	r2, #128	; 0x80
     74a:	4907      	ldr	r1, [pc, #28]	; (768 <DeinitializeSerialConsole+0x34>)
     74c:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     74e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     750:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     752:	2b00      	cmp	r3, #0
     754:	d1fc      	bne.n	750 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     756:	6823      	ldr	r3, [r4, #0]
     758:	2202      	movs	r2, #2
     75a:	4393      	bics	r3, r2
     75c:	6023      	str	r3, [r4, #0]
}
     75e:	bd70      	pop	{r4, r5, r6, pc}
     760:	20000184 	.word	0x20000184
     764:	00001ffd 	.word	0x00001ffd
     768:	e000e100 	.word	0xe000e100

0000076c <SerialConsoleWriteString>:
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	46c6      	mov	lr, r8
     770:	b500      	push	{lr}
     772:	0005      	movs	r5, r0
     774:	2400      	movs	r4, #0
	if(string != NULL)
     776:	2800      	cmp	r0, #0
     778:	d012      	beq.n	7a0 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     77a:	4e11      	ldr	r6, [pc, #68]	; (7c0 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     77c:	4f11      	ldr	r7, [pc, #68]	; (7c4 <SerialConsoleWriteString+0x58>)
     77e:	4b12      	ldr	r3, [pc, #72]	; (7c8 <SerialConsoleWriteString+0x5c>)
     780:	4698      	mov	r8, r3
     782:	e003      	b.n	78c <SerialConsoleWriteString+0x20>
     784:	5d29      	ldrb	r1, [r5, r4]
     786:	6838      	ldr	r0, [r7, #0]
     788:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     78a:	3401      	adds	r4, #1
     78c:	0028      	movs	r0, r5
     78e:	47b0      	blx	r6
     790:	4284      	cmp	r4, r0
     792:	d3f7      	bcc.n	784 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     794:	2101      	movs	r1, #1
     796:	480d      	ldr	r0, [pc, #52]	; (7cc <SerialConsoleWriteString+0x60>)
     798:	4b0d      	ldr	r3, [pc, #52]	; (7d0 <SerialConsoleWriteString+0x64>)
     79a:	4798      	blx	r3
     79c:	2800      	cmp	r0, #0
     79e:	d002      	beq.n	7a6 <SerialConsoleWriteString+0x3a>
}
     7a0:	bc04      	pop	{r2}
     7a2:	4690      	mov	r8, r2
     7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     7a6:	4c0b      	ldr	r4, [pc, #44]	; (7d4 <SerialConsoleWriteString+0x68>)
     7a8:	4b06      	ldr	r3, [pc, #24]	; (7c4 <SerialConsoleWriteString+0x58>)
     7aa:	6818      	ldr	r0, [r3, #0]
     7ac:	0021      	movs	r1, r4
     7ae:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <SerialConsoleWriteString+0x6c>)
     7b0:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     7b2:	2201      	movs	r2, #1
     7b4:	0021      	movs	r1, r4
     7b6:	4805      	ldr	r0, [pc, #20]	; (7cc <SerialConsoleWriteString+0x60>)
     7b8:	4b08      	ldr	r3, [pc, #32]	; (7dc <SerialConsoleWriteString+0x70>)
     7ba:	4798      	blx	r3
}
     7bc:	e7f0      	b.n	7a0 <SerialConsoleWriteString+0x34>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00005fad 	.word	0x00005fad
     7c4:	200009c4 	.word	0x200009c4
     7c8:	000004f5 	.word	0x000004f5
     7cc:	20000184 	.word	0x20000184
     7d0:	00002c91 	.word	0x00002c91
     7d4:	200009c0 	.word	0x200009c0
     7d8:	00000521 	.word	0x00000521
     7dc:	00002c51 	.word	0x00002c51

000007e0 <usart_read_callback>:
{
     7e0:	b510      	push	{r4, lr}
     7e2:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     7e4:	4c0d      	ldr	r4, [pc, #52]	; (81c <usart_read_callback+0x3c>)
     7e6:	0020      	movs	r0, r4
     7e8:	4b0d      	ldr	r3, [pc, #52]	; (820 <usart_read_callback+0x40>)
     7ea:	4798      	blx	r3
	if(latestRx == 0x08)
     7ec:	7823      	ldrb	r3, [r4, #0]
     7ee:	2b08      	cmp	r3, #8
     7f0:	d00c      	beq.n	80c <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     7f2:	4c0a      	ldr	r4, [pc, #40]	; (81c <usart_read_callback+0x3c>)
     7f4:	7821      	ldrb	r1, [r4, #0]
     7f6:	4b0b      	ldr	r3, [pc, #44]	; (824 <usart_read_callback+0x44>)
     7f8:	6818      	ldr	r0, [r3, #0]
     7fa:	4b0b      	ldr	r3, [pc, #44]	; (828 <usart_read_callback+0x48>)
     7fc:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     7fe:	2201      	movs	r2, #1
     800:	0021      	movs	r1, r4
     802:	480a      	ldr	r0, [pc, #40]	; (82c <usart_read_callback+0x4c>)
     804:	4b0a      	ldr	r3, [pc, #40]	; (830 <usart_read_callback+0x50>)
     806:	4798      	blx	r3
}
     808:	b002      	add	sp, #8
     80a:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     80c:	a801      	add	r0, sp, #4
     80e:	3318      	adds	r3, #24
     810:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     812:	3b18      	subs	r3, #24
     814:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     816:	4b02      	ldr	r3, [pc, #8]	; (820 <usart_read_callback+0x40>)
     818:	4798      	blx	r3
     81a:	e7ea      	b.n	7f2 <usart_read_callback+0x12>
     81c:	200001bc 	.word	0x200001bc
     820:	0000076d 	.word	0x0000076d
     824:	200001b8 	.word	0x200001b8
     828:	000004f5 	.word	0x000004f5
     82c:	20000184 	.word	0x20000184
     830:	00002c71 	.word	0x00002c71

00000834 <setLogLevel>:
	currentDebugLevel = debugLevel;
     834:	4b01      	ldr	r3, [pc, #4]	; (83c <setLogLevel+0x8>)
     836:	7018      	strb	r0, [r3, #0]
}
     838:	4770      	bx	lr
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	20000092 	.word	0x20000092

00000840 <LogMessage>:
{
     840:	b40e      	push	{r1, r2, r3}
     842:	b500      	push	{lr}
     844:	b096      	sub	sp, #88	; 0x58
		if (level>=currentDebugLevel)
     846:	4b09      	ldr	r3, [pc, #36]	; (86c <LogMessage+0x2c>)
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	4283      	cmp	r3, r0
     84c:	d903      	bls.n	856 <LogMessage+0x16>
};
     84e:	b016      	add	sp, #88	; 0x58
     850:	bc08      	pop	{r3}
     852:	b003      	add	sp, #12
     854:	4718      	bx	r3
			va_start(aptr, format);
     856:	aa18      	add	r2, sp, #96	; 0x60
     858:	9201      	str	r2, [sp, #4]
			vsprintf(buffer, format, aptr);
     85a:	9917      	ldr	r1, [sp, #92]	; 0x5c
     85c:	a802      	add	r0, sp, #8
     85e:	4b04      	ldr	r3, [pc, #16]	; (870 <LogMessage+0x30>)
     860:	4798      	blx	r3
			SerialConsoleWriteString(buffer);
     862:	a802      	add	r0, sp, #8
     864:	4b03      	ldr	r3, [pc, #12]	; (874 <LogMessage+0x34>)
     866:	4798      	blx	r3
};
     868:	e7f1      	b.n	84e <LogMessage+0xe>
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	20000092 	.word	0x20000092
     870:	00006099 	.word	0x00006099
     874:	0000076d 	.word	0x0000076d

00000878 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     878:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     87a:	4b06      	ldr	r3, [pc, #24]	; (894 <sd_mmc_configure_slot+0x1c>)
     87c:	6819      	ldr	r1, [r3, #0]
     87e:	7f8b      	ldrb	r3, [r1, #30]
     880:	1e5a      	subs	r2, r3, #1
     882:	4193      	sbcs	r3, r2
     884:	b2db      	uxtb	r3, r3
     886:	7b4a      	ldrb	r2, [r1, #13]
     888:	6809      	ldr	r1, [r1, #0]
     88a:	4803      	ldr	r0, [pc, #12]	; (898 <sd_mmc_configure_slot+0x20>)
     88c:	7800      	ldrb	r0, [r0, #0]
     88e:	4c03      	ldr	r4, [pc, #12]	; (89c <sd_mmc_configure_slot+0x24>)
     890:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     892:	bd10      	pop	{r4, pc}
     894:	20000094 	.word	0x20000094
     898:	200000bc 	.word	0x200000bc
     89c:	00001535 	.word	0x00001535

000008a0 <sd_mmc_select_slot>:
{
     8a0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     8a2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     8a4:	2800      	cmp	r0, #0
     8a6:	d001      	beq.n	8ac <sd_mmc_select_slot+0xc>
}
     8a8:	0018      	movs	r0, r3
     8aa:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     8ac:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     8ae:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     8b0:	3b03      	subs	r3, #3
     8b2:	2b01      	cmp	r3, #1
     8b4:	d90d      	bls.n	8d2 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     8b6:	2200      	movs	r2, #0
     8b8:	4b0c      	ldr	r3, [pc, #48]	; (8ec <sd_mmc_select_slot+0x4c>)
     8ba:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     8bc:	4c0a      	ldr	r4, [pc, #40]	; (8e8 <sd_mmc_select_slot+0x48>)
     8be:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <sd_mmc_select_slot+0x50>)
     8c0:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     8c2:	4b0c      	ldr	r3, [pc, #48]	; (8f4 <sd_mmc_select_slot+0x54>)
     8c4:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     8c6:	7aa3      	ldrb	r3, [r4, #10]
     8c8:	3b02      	subs	r3, #2
     8ca:	4258      	negs	r0, r3
     8cc:	4143      	adcs	r3, r0
     8ce:	b2db      	uxtb	r3, r3
     8d0:	e7ea      	b.n	8a8 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     8d2:	4b05      	ldr	r3, [pc, #20]	; (8e8 <sd_mmc_select_slot+0x48>)
     8d4:	2202      	movs	r2, #2
     8d6:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     8d8:	4a07      	ldr	r2, [pc, #28]	; (8f8 <sd_mmc_select_slot+0x58>)
     8da:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     8dc:	2201      	movs	r2, #1
     8de:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     8e0:	2200      	movs	r2, #0
     8e2:	779a      	strb	r2, [r3, #30]
     8e4:	e7e7      	b.n	8b6 <sd_mmc_select_slot+0x16>
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	20000098 	.word	0x20000098
     8ec:	200000bc 	.word	0x200000bc
     8f0:	20000094 	.word	0x20000094
     8f4:	00000879 	.word	0x00000879
     8f8:	00061a80 	.word	0x00061a80

000008fc <sd_mmc_cmd13>:
{
     8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fe:	4d09      	ldr	r5, [pc, #36]	; (924 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     900:	4f09      	ldr	r7, [pc, #36]	; (928 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     902:	4e0a      	ldr	r6, [pc, #40]	; (92c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     904:	2100      	movs	r1, #0
     906:	480a      	ldr	r0, [pc, #40]	; (930 <sd_mmc_cmd13+0x34>)
     908:	47b8      	blx	r7
     90a:	1e04      	subs	r4, r0, #0
     90c:	d007      	beq.n	91e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     90e:	47b0      	blx	r6
     910:	23ff      	movs	r3, #255	; 0xff
     912:	4203      	tst	r3, r0
     914:	d003      	beq.n	91e <sd_mmc_cmd13+0x22>
     916:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     918:	2d00      	cmp	r5, #0
     91a:	d1f3      	bne.n	904 <sd_mmc_cmd13+0x8>
			return false;
     91c:	2400      	movs	r4, #0
}
     91e:	0020      	movs	r0, r4
     920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	00030d41 	.word	0x00030d41
     928:	00001779 	.word	0x00001779
     92c:	00001791 	.word	0x00001791
     930:	00001b0d 	.word	0x00001b0d

00000934 <sd_mmc_cmd9_spi>:
{
     934:	b510      	push	{r4, lr}
     936:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     938:	4b0c      	ldr	r3, [pc, #48]	; (96c <sd_mmc_cmd9_spi+0x38>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	8919      	ldrh	r1, [r3, #8]
     93e:	0409      	lsls	r1, r1, #16
     940:	2301      	movs	r3, #1
     942:	9300      	str	r3, [sp, #0]
     944:	2210      	movs	r2, #16
     946:	480a      	ldr	r0, [pc, #40]	; (970 <sd_mmc_cmd9_spi+0x3c>)
     948:	4c0a      	ldr	r4, [pc, #40]	; (974 <sd_mmc_cmd9_spi+0x40>)
     94a:	47a0      	blx	r4
     94c:	2800      	cmp	r0, #0
     94e:	d101      	bne.n	954 <sd_mmc_cmd9_spi+0x20>
}
     950:	b002      	add	sp, #8
     952:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <sd_mmc_cmd9_spi+0x38>)
     956:	6818      	ldr	r0, [r3, #0]
     958:	300e      	adds	r0, #14
     95a:	2101      	movs	r1, #1
     95c:	4b06      	ldr	r3, [pc, #24]	; (978 <sd_mmc_cmd9_spi+0x44>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d0f5      	beq.n	950 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     964:	4b05      	ldr	r3, [pc, #20]	; (97c <sd_mmc_cmd9_spi+0x48>)
     966:	4798      	blx	r3
     968:	e7f2      	b.n	950 <sd_mmc_cmd9_spi+0x1c>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	20000094 	.word	0x20000094
     970:	00081109 	.word	0x00081109
     974:	000015e9 	.word	0x000015e9
     978:	00001815 	.word	0x00001815
     97c:	000018a1 	.word	0x000018a1

00000980 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     980:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     982:	4b04      	ldr	r3, [pc, #16]	; (994 <sd_mmc_deselect_slot+0x14>)
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d000      	beq.n	98c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     98a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     98c:	2000      	movs	r0, #0
     98e:	4b02      	ldr	r3, [pc, #8]	; (998 <sd_mmc_deselect_slot+0x18>)
     990:	4798      	blx	r3
}
     992:	e7fa      	b.n	98a <sd_mmc_deselect_slot+0xa>
     994:	200000bc 	.word	0x200000bc
     998:	00001589 	.word	0x00001589

0000099c <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     99c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     99e:	2204      	movs	r2, #4
     9a0:	4b03      	ldr	r3, [pc, #12]	; (9b0 <sd_mmc_init+0x14>)
     9a2:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     9a4:	32fb      	adds	r2, #251	; 0xfb
     9a6:	4b03      	ldr	r3, [pc, #12]	; (9b4 <sd_mmc_init+0x18>)
     9a8:	701a      	strb	r2, [r3, #0]
	driver_init();
     9aa:	4b03      	ldr	r3, [pc, #12]	; (9b8 <sd_mmc_init+0x1c>)
     9ac:	4798      	blx	r3
}
     9ae:	bd10      	pop	{r4, pc}
     9b0:	20000098 	.word	0x20000098
     9b4:	200000bc 	.word	0x200000bc
     9b8:	00001435 	.word	0x00001435

000009bc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9be:	46c6      	mov	lr, r8
     9c0:	b500      	push	{lr}
     9c2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     9c4:	4bcb      	ldr	r3, [pc, #812]	; (cf4 <sd_mmc_check+0x338>)
     9c6:	4798      	blx	r3
     9c8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     9ca:	2801      	cmp	r0, #1
     9cc:	d006      	beq.n	9dc <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     9ce:	4bca      	ldr	r3, [pc, #808]	; (cf8 <sd_mmc_check+0x33c>)
     9d0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     9d2:	0020      	movs	r0, r4
     9d4:	b008      	add	sp, #32
     9d6:	bc04      	pop	{r2}
     9d8:	4690      	mov	r8, r2
     9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     9dc:	4bc7      	ldr	r3, [pc, #796]	; (cfc <sd_mmc_check+0x340>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	2201      	movs	r2, #1
     9e2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     9e4:	2200      	movs	r2, #0
     9e6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     9e8:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     9ea:	4bc5      	ldr	r3, [pc, #788]	; (d00 <sd_mmc_check+0x344>)
     9ec:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9ee:	2100      	movs	r1, #0
     9f0:	2088      	movs	r0, #136	; 0x88
     9f2:	0140      	lsls	r0, r0, #5
     9f4:	4bc3      	ldr	r3, [pc, #780]	; (d04 <sd_mmc_check+0x348>)
     9f6:	4798      	blx	r3
     9f8:	2800      	cmp	r0, #0
     9fa:	d107      	bne.n	a0c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     9fc:	4bbf      	ldr	r3, [pc, #764]	; (cfc <sd_mmc_check+0x340>)
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	2203      	movs	r2, #3
     a02:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     a04:	4bbc      	ldr	r3, [pc, #752]	; (cf8 <sd_mmc_check+0x33c>)
     a06:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     a08:	2403      	movs	r4, #3
     a0a:	e7e2      	b.n	9d2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a0c:	21d5      	movs	r1, #213	; 0xd5
     a0e:	0049      	lsls	r1, r1, #1
     a10:	48bd      	ldr	r0, [pc, #756]	; (d08 <sd_mmc_check+0x34c>)
     a12:	4bbc      	ldr	r3, [pc, #752]	; (d04 <sd_mmc_check+0x348>)
     a14:	4798      	blx	r3
	*v2 = 0;
     a16:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a18:	2800      	cmp	r0, #0
     a1a:	d125      	bne.n	a68 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a1c:	4bb7      	ldr	r3, [pc, #732]	; (cfc <sd_mmc_check+0x340>)
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	7adb      	ldrb	r3, [r3, #11]
     a22:	07db      	lsls	r3, r3, #31
     a24:	d500      	bpl.n	a28 <sd_mmc_check+0x6c>
     a26:	e1eb      	b.n	e00 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a28:	4bb4      	ldr	r3, [pc, #720]	; (cfc <sd_mmc_check+0x340>)
     a2a:	681b      	ldr	r3, [r3, #0]
     a2c:	7ada      	ldrb	r2, [r3, #11]
     a2e:	2309      	movs	r3, #9
     a30:	4013      	ands	r3, r2
     a32:	2b01      	cmp	r3, #1
     a34:	d10f      	bne.n	a56 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a36:	2180      	movs	r1, #128	; 0x80
     a38:	0089      	lsls	r1, r1, #2
     a3a:	48b4      	ldr	r0, [pc, #720]	; (d0c <sd_mmc_check+0x350>)
     a3c:	4bb1      	ldr	r3, [pc, #708]	; (d04 <sd_mmc_check+0x348>)
     a3e:	4798      	blx	r3
     a40:	2800      	cmp	r0, #0
     a42:	d0db      	beq.n	9fc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a44:	4bad      	ldr	r3, [pc, #692]	; (cfc <sd_mmc_check+0x340>)
     a46:	681b      	ldr	r3, [r3, #0]
     a48:	7adb      	ldrb	r3, [r3, #11]
     a4a:	07db      	lsls	r3, r3, #31
     a4c:	d503      	bpl.n	a56 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     a4e:	4bb0      	ldr	r3, [pc, #704]	; (d10 <sd_mmc_check+0x354>)
     a50:	4798      	blx	r3
     a52:	2800      	cmp	r0, #0
     a54:	d0d2      	beq.n	9fc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a56:	4baf      	ldr	r3, [pc, #700]	; (d14 <sd_mmc_check+0x358>)
     a58:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     a5a:	4ba8      	ldr	r3, [pc, #672]	; (cfc <sd_mmc_check+0x340>)
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	2200      	movs	r2, #0
     a60:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     a62:	4ba5      	ldr	r3, [pc, #660]	; (cf8 <sd_mmc_check+0x33c>)
     a64:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     a66:	e7b4      	b.n	9d2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     a68:	4bab      	ldr	r3, [pc, #684]	; (d18 <sd_mmc_check+0x35c>)
     a6a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     a6c:	1c43      	adds	r3, r0, #1
     a6e:	d100      	bne.n	a72 <sd_mmc_check+0xb6>
     a70:	e1c4      	b.n	dfc <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a72:	0500      	lsls	r0, r0, #20
     a74:	0d00      	lsrs	r0, r0, #20
     a76:	23d5      	movs	r3, #213	; 0xd5
     a78:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     a7a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a7c:	4298      	cmp	r0, r3
     a7e:	d1bd      	bne.n	9fc <sd_mmc_check+0x40>
     a80:	e7cc      	b.n	a1c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a82:	2100      	movs	r1, #0
     a84:	48a5      	ldr	r0, [pc, #660]	; (d1c <sd_mmc_check+0x360>)
     a86:	4b9f      	ldr	r3, [pc, #636]	; (d04 <sd_mmc_check+0x348>)
     a88:	4798      	blx	r3
     a8a:	2800      	cmp	r0, #0
     a8c:	d119      	bne.n	ac2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     a8e:	4b9b      	ldr	r3, [pc, #620]	; (cfc <sd_mmc_check+0x340>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	2202      	movs	r2, #2
     a94:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a96:	2100      	movs	r1, #0
     a98:	2088      	movs	r0, #136	; 0x88
     a9a:	0140      	lsls	r0, r0, #5
     a9c:	4b99      	ldr	r3, [pc, #612]	; (d04 <sd_mmc_check+0x348>)
     a9e:	4798      	blx	r3
     aa0:	2800      	cmp	r0, #0
     aa2:	d0ab      	beq.n	9fc <sd_mmc_check+0x40>
     aa4:	4d9e      	ldr	r5, [pc, #632]	; (d20 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     aa6:	4f97      	ldr	r7, [pc, #604]	; (d04 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     aa8:	4e9b      	ldr	r6, [pc, #620]	; (d18 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     aaa:	2100      	movs	r1, #0
     aac:	489d      	ldr	r0, [pc, #628]	; (d24 <sd_mmc_check+0x368>)
     aae:	47b8      	blx	r7
     ab0:	2800      	cmp	r0, #0
     ab2:	d0a3      	beq.n	9fc <sd_mmc_check+0x40>
		resp = driver_get_response();
     ab4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     ab6:	07c3      	lsls	r3, r0, #31
     ab8:	d57d      	bpl.n	bb6 <sd_mmc_check+0x1fa>
     aba:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     abc:	2d00      	cmp	r5, #0
     abe:	d1f4      	bne.n	aaa <sd_mmc_check+0xee>
     ac0:	e79c      	b.n	9fc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     ac2:	4b95      	ldr	r3, [pc, #596]	; (d18 <sd_mmc_check+0x35c>)
     ac4:	4798      	blx	r3
     ac6:	0043      	lsls	r3, r0, #1
     ac8:	d505      	bpl.n	ad6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     aca:	4b8c      	ldr	r3, [pc, #560]	; (cfc <sd_mmc_check+0x340>)
     acc:	681a      	ldr	r2, [r3, #0]
     ace:	7ad3      	ldrb	r3, [r2, #11]
     ad0:	2108      	movs	r1, #8
     ad2:	430b      	orrs	r3, r1
     ad4:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ad6:	2100      	movs	r1, #0
     ad8:	4893      	ldr	r0, [pc, #588]	; (d28 <sd_mmc_check+0x36c>)
     ada:	4b8a      	ldr	r3, [pc, #552]	; (d04 <sd_mmc_check+0x348>)
     adc:	4798      	blx	r3
     ade:	2800      	cmp	r0, #0
     ae0:	d08c      	beq.n	9fc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ae2:	4b86      	ldr	r3, [pc, #536]	; (cfc <sd_mmc_check+0x340>)
     ae4:	681b      	ldr	r3, [r3, #0]
     ae6:	7adb      	ldrb	r3, [r3, #11]
     ae8:	07da      	lsls	r2, r3, #31
     aea:	d400      	bmi.n	aee <sd_mmc_check+0x132>
     aec:	e1a4      	b.n	e38 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     aee:	4b8f      	ldr	r3, [pc, #572]	; (d2c <sd_mmc_check+0x370>)
     af0:	4798      	blx	r3
     af2:	2800      	cmp	r0, #0
     af4:	d082      	beq.n	9fc <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     af6:	4b81      	ldr	r3, [pc, #516]	; (cfc <sd_mmc_check+0x340>)
     af8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     afa:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     afc:	2107      	movs	r1, #7
     afe:	4019      	ands	r1, r3
     b00:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b02:	488b      	ldr	r0, [pc, #556]	; (d30 <sd_mmc_check+0x374>)
     b04:	5808      	ldr	r0, [r1, r0]
     b06:	21fa      	movs	r1, #250	; 0xfa
     b08:	0089      	lsls	r1, r1, #2
     b0a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     b0c:	065b      	lsls	r3, r3, #25
     b0e:	0f1b      	lsrs	r3, r3, #28
     b10:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b12:	4888      	ldr	r0, [pc, #544]	; (d34 <sd_mmc_check+0x378>)
     b14:	581b      	ldr	r3, [r3, r0]
     b16:	434b      	muls	r3, r1
     b18:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     b1a:	7b93      	ldrb	r3, [r2, #14]
     b1c:	099b      	lsrs	r3, r3, #6
     b1e:	d000      	beq.n	b22 <sd_mmc_check+0x166>
     b20:	e13c      	b.n	d9c <sd_mmc_check+0x3e0>
     b22:	7d91      	ldrb	r1, [r2, #22]
     b24:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b26:	7d53      	ldrb	r3, [r2, #21]
     b28:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b2a:	7d10      	ldrb	r0, [r2, #20]
     b2c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b2e:	4303      	orrs	r3, r0
     b30:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b32:	7e10      	ldrb	r0, [r2, #24]
     b34:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b36:	7dd1      	ldrb	r1, [r2, #23]
     b38:	0049      	lsls	r1, r1, #1
     b3a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     b3c:	051b      	lsls	r3, r3, #20
     b3e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b40:	3301      	adds	r3, #1
     b42:	2107      	movs	r1, #7
     b44:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     b46:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b48:	408b      	lsls	r3, r1
     b4a:	7cd0      	ldrb	r0, [r2, #19]
     b4c:	210f      	movs	r1, #15
     b4e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     b50:	408b      	lsls	r3, r1
				/ 1024;
     b52:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     b54:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     b56:	8911      	ldrh	r1, [r2, #8]
     b58:	0409      	lsls	r1, r1, #16
     b5a:	4877      	ldr	r0, [pc, #476]	; (d38 <sd_mmc_check+0x37c>)
     b5c:	4b69      	ldr	r3, [pc, #420]	; (d04 <sd_mmc_check+0x348>)
     b5e:	4798      	blx	r3
     b60:	2800      	cmp	r0, #0
     b62:	d100      	bne.n	b66 <sd_mmc_check+0x1aa>
     b64:	e74a      	b.n	9fc <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     b66:	2301      	movs	r3, #1
     b68:	9300      	str	r3, [sp, #0]
     b6a:	2208      	movs	r2, #8
     b6c:	2100      	movs	r1, #0
     b6e:	4873      	ldr	r0, [pc, #460]	; (d3c <sd_mmc_check+0x380>)
     b70:	4d73      	ldr	r5, [pc, #460]	; (d40 <sd_mmc_check+0x384>)
     b72:	47a8      	blx	r5
     b74:	2800      	cmp	r0, #0
     b76:	d100      	bne.n	b7a <sd_mmc_check+0x1be>
     b78:	e740      	b.n	9fc <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     b7a:	2101      	movs	r1, #1
     b7c:	a806      	add	r0, sp, #24
     b7e:	4b71      	ldr	r3, [pc, #452]	; (d44 <sd_mmc_check+0x388>)
     b80:	4798      	blx	r3
     b82:	2800      	cmp	r0, #0
     b84:	d100      	bne.n	b88 <sd_mmc_check+0x1cc>
     b86:	e739      	b.n	9fc <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     b88:	4b6f      	ldr	r3, [pc, #444]	; (d48 <sd_mmc_check+0x38c>)
     b8a:	4798      	blx	r3
     b8c:	2800      	cmp	r0, #0
     b8e:	d100      	bne.n	b92 <sd_mmc_check+0x1d6>
     b90:	e734      	b.n	9fc <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b92:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	220f      	movs	r2, #15
     b98:	4013      	ands	r3, r2
     b9a:	2b01      	cmp	r3, #1
     b9c:	d100      	bne.n	ba0 <sd_mmc_check+0x1e4>
     b9e:	e119      	b.n	dd4 <sd_mmc_check+0x418>
     ba0:	2b00      	cmp	r3, #0
     ba2:	d100      	bne.n	ba6 <sd_mmc_check+0x1ea>
     ba4:	e109      	b.n	dba <sd_mmc_check+0x3fe>
     ba6:	2b02      	cmp	r3, #2
     ba8:	d100      	bne.n	bac <sd_mmc_check+0x1f0>
     baa:	e118      	b.n	dde <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     bac:	4b53      	ldr	r3, [pc, #332]	; (cfc <sd_mmc_check+0x340>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	2210      	movs	r2, #16
     bb2:	731a      	strb	r2, [r3, #12]
     bb4:	e105      	b.n	dc2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     bb6:	2100      	movs	r1, #0
     bb8:	4858      	ldr	r0, [pc, #352]	; (d1c <sd_mmc_check+0x360>)
     bba:	4b52      	ldr	r3, [pc, #328]	; (d04 <sd_mmc_check+0x348>)
     bbc:	4798      	blx	r3
     bbe:	2800      	cmp	r0, #0
     bc0:	d100      	bne.n	bc4 <sd_mmc_check+0x208>
     bc2:	e71b      	b.n	9fc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     bc4:	4b54      	ldr	r3, [pc, #336]	; (d18 <sd_mmc_check+0x35c>)
     bc6:	4798      	blx	r3
     bc8:	23c0      	movs	r3, #192	; 0xc0
     bca:	05db      	lsls	r3, r3, #23
     bcc:	4018      	ands	r0, r3
     bce:	2380      	movs	r3, #128	; 0x80
     bd0:	05db      	lsls	r3, r3, #23
     bd2:	4298      	cmp	r0, r3
     bd4:	d105      	bne.n	be2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     bd6:	4b49      	ldr	r3, [pc, #292]	; (cfc <sd_mmc_check+0x340>)
     bd8:	681a      	ldr	r2, [r3, #0]
     bda:	7ad1      	ldrb	r1, [r2, #11]
     bdc:	2308      	movs	r3, #8
     bde:	430b      	orrs	r3, r1
     be0:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     be2:	2100      	movs	r1, #0
     be4:	4850      	ldr	r0, [pc, #320]	; (d28 <sd_mmc_check+0x36c>)
     be6:	4b47      	ldr	r3, [pc, #284]	; (d04 <sd_mmc_check+0x348>)
     be8:	4798      	blx	r3
     bea:	2800      	cmp	r0, #0
     bec:	d100      	bne.n	bf0 <sd_mmc_check+0x234>
     bee:	e705      	b.n	9fc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     bf0:	4b4e      	ldr	r3, [pc, #312]	; (d2c <sd_mmc_check+0x370>)
     bf2:	4798      	blx	r3
     bf4:	2800      	cmp	r0, #0
     bf6:	d100      	bne.n	bfa <sd_mmc_check+0x23e>
     bf8:	e700      	b.n	9fc <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bfa:	4b40      	ldr	r3, [pc, #256]	; (cfc <sd_mmc_check+0x340>)
     bfc:	681a      	ldr	r2, [r3, #0]
     bfe:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     c00:	069b      	lsls	r3, r3, #26
     c02:	0f1b      	lsrs	r3, r3, #28
     c04:	2b02      	cmp	r3, #2
     c06:	d100      	bne.n	c0a <sd_mmc_check+0x24e>
     c08:	e0a8      	b.n	d5c <sd_mmc_check+0x3a0>
     c0a:	d907      	bls.n	c1c <sd_mmc_check+0x260>
     c0c:	2b03      	cmp	r3, #3
     c0e:	d100      	bne.n	c12 <sd_mmc_check+0x256>
     c10:	e0a7      	b.n	d62 <sd_mmc_check+0x3a6>
     c12:	2b04      	cmp	r3, #4
     c14:	d104      	bne.n	c20 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     c16:	2340      	movs	r3, #64	; 0x40
     c18:	7313      	strb	r3, [r2, #12]
     c1a:	e003      	b.n	c24 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c1c:	2b01      	cmp	r3, #1
     c1e:	d066      	beq.n	cee <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     c20:	2312      	movs	r3, #18
     c22:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c24:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c26:	0659      	lsls	r1, r3, #25
     c28:	0f09      	lsrs	r1, r1, #28
     c2a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c2c:	2007      	movs	r0, #7
     c2e:	4003      	ands	r3, r0
     c30:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c32:	483f      	ldr	r0, [pc, #252]	; (d30 <sd_mmc_check+0x374>)
     c34:	5818      	ldr	r0, [r3, r0]
     c36:	23fa      	movs	r3, #250	; 0xfa
     c38:	009b      	lsls	r3, r3, #2
     c3a:	4343      	muls	r3, r0
     c3c:	4843      	ldr	r0, [pc, #268]	; (d4c <sd_mmc_check+0x390>)
     c3e:	5809      	ldr	r1, [r1, r0]
     c40:	434b      	muls	r3, r1
     c42:	6013      	str	r3, [r2, #0]
     c44:	7d91      	ldrb	r1, [r2, #22]
     c46:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c48:	7d53      	ldrb	r3, [r2, #21]
     c4a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c4c:	7d10      	ldrb	r0, [r2, #20]
     c4e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c50:	4303      	orrs	r3, r0
     c52:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     c54:	051b      	lsls	r3, r3, #20
     c56:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     c58:	493d      	ldr	r1, [pc, #244]	; (d50 <sd_mmc_check+0x394>)
     c5a:	428b      	cmp	r3, r1
     c5c:	d00f      	beq.n	c7e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c5e:	7e10      	ldrb	r0, [r2, #24]
     c60:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c62:	7dd1      	ldrb	r1, [r2, #23]
     c64:	0049      	lsls	r1, r1, #1
     c66:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c68:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     c6a:	2007      	movs	r0, #7
     c6c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c6e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c70:	408b      	lsls	r3, r1
     c72:	7cd1      	ldrb	r1, [r2, #19]
     c74:	3008      	adds	r0, #8
     c76:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c78:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     c7a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c7c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     c7e:	7b13      	ldrb	r3, [r2, #12]
     c80:	2b3f      	cmp	r3, #63	; 0x3f
     c82:	d97b      	bls.n	d7c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c84:	2100      	movs	r1, #0
     c86:	9100      	str	r1, [sp, #0]
     c88:	2301      	movs	r3, #1
     c8a:	2280      	movs	r2, #128	; 0x80
     c8c:	0092      	lsls	r2, r2, #2
     c8e:	4831      	ldr	r0, [pc, #196]	; (d54 <sd_mmc_check+0x398>)
     c90:	4d2b      	ldr	r5, [pc, #172]	; (d40 <sd_mmc_check+0x384>)
     c92:	47a8      	blx	r5
     c94:	2800      	cmp	r0, #0
     c96:	d100      	bne.n	c9a <sd_mmc_check+0x2de>
     c98:	e6b0      	b.n	9fc <sd_mmc_check+0x40>
     c9a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     c9c:	4e2e      	ldr	r6, [pc, #184]	; (d58 <sd_mmc_check+0x39c>)
     c9e:	a805      	add	r0, sp, #20
     ca0:	47b0      	blx	r6
     ca2:	2800      	cmp	r0, #0
     ca4:	d100      	bne.n	ca8 <sd_mmc_check+0x2ec>
     ca6:	e6a9      	b.n	9fc <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     ca8:	3501      	adds	r5, #1
     caa:	b2ad      	uxth	r5, r5
     cac:	2d32      	cmp	r5, #50	; 0x32
     cae:	d1f6      	bne.n	c9e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     cb0:	4b12      	ldr	r3, [pc, #72]	; (cfc <sd_mmc_check+0x340>)
     cb2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cb4:	7d8a      	ldrb	r2, [r1, #22]
     cb6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cb8:	7d4b      	ldrb	r3, [r1, #21]
     cba:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cbc:	7d09      	ldrb	r1, [r1, #20]
     cbe:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cc0:	430b      	orrs	r3, r1
     cc2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     cc4:	051b      	lsls	r3, r3, #20
     cc6:	0d1b      	lsrs	r3, r3, #20
     cc8:	4a21      	ldr	r2, [pc, #132]	; (d50 <sd_mmc_check+0x394>)
     cca:	4293      	cmp	r3, r2
     ccc:	d154      	bne.n	d78 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     cce:	4e22      	ldr	r6, [pc, #136]	; (d58 <sd_mmc_check+0x39c>)
     cd0:	a806      	add	r0, sp, #24
     cd2:	47b0      	blx	r6
     cd4:	2800      	cmp	r0, #0
     cd6:	d100      	bne.n	cda <sd_mmc_check+0x31e>
     cd8:	e690      	b.n	9fc <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cda:	3501      	adds	r5, #1
     cdc:	b2ad      	uxth	r5, r5
     cde:	2d35      	cmp	r5, #53	; 0x35
     ce0:	d9f6      	bls.n	cd0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     ce2:	4b06      	ldr	r3, [pc, #24]	; (cfc <sd_mmc_check+0x340>)
     ce4:	681a      	ldr	r2, [r3, #0]
     ce6:	9b06      	ldr	r3, [sp, #24]
     ce8:	085b      	lsrs	r3, r3, #1
     cea:	6053      	str	r3, [r2, #4]
     cec:	e044      	b.n	d78 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     cee:	2314      	movs	r3, #20
     cf0:	7313      	strb	r3, [r2, #12]
     cf2:	e797      	b.n	c24 <sd_mmc_check+0x268>
     cf4:	000008a1 	.word	0x000008a1
     cf8:	00000981 	.word	0x00000981
     cfc:	20000094 	.word	0x20000094
     d00:	000015b1 	.word	0x000015b1
     d04:	00001779 	.word	0x00001779
     d08:	00005508 	.word	0x00005508
     d0c:	00001110 	.word	0x00001110
     d10:	000008fd 	.word	0x000008fd
     d14:	00000879 	.word	0x00000879
     d18:	00001791 	.word	0x00001791
     d1c:	0000053a 	.word	0x0000053a
     d20:	00001bef 	.word	0x00001bef
     d24:	00001101 	.word	0x00001101
     d28:	0000113b 	.word	0x0000113b
     d2c:	00000935 	.word	0x00000935
     d30:	00006d54 	.word	0x00006d54
     d34:	00006d70 	.word	0x00006d70
     d38:	00001137 	.word	0x00001137
     d3c:	00081133 	.word	0x00081133
     d40:	000015e9 	.word	0x000015e9
     d44:	00001815 	.word	0x00001815
     d48:	000018a1 	.word	0x000018a1
     d4c:	00006d14 	.word	0x00006d14
     d50:	00000fff 	.word	0x00000fff
     d54:	00081108 	.word	0x00081108
     d58:	0000179d 	.word	0x0000179d
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     d5c:	2322      	movs	r3, #34	; 0x22
     d5e:	7313      	strb	r3, [r2, #12]
     d60:	e760      	b.n	c24 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     d62:	2330      	movs	r3, #48	; 0x30
     d64:	7313      	strb	r3, [r2, #12]
     d66:	e75d      	b.n	c24 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     d68:	a806      	add	r0, sp, #24
     d6a:	4b36      	ldr	r3, [pc, #216]	; (e44 <sd_mmc_check+0x488>)
     d6c:	4798      	blx	r3
     d6e:	2800      	cmp	r0, #0
     d70:	d100      	bne.n	d74 <sd_mmc_check+0x3b8>
     d72:	e643      	b.n	9fc <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d74:	3501      	adds	r5, #1
     d76:	b2ad      	uxth	r5, r5
     d78:	2d7f      	cmp	r5, #127	; 0x7f
     d7a:	d9f5      	bls.n	d68 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d7c:	2180      	movs	r1, #128	; 0x80
     d7e:	0089      	lsls	r1, r1, #2
     d80:	4831      	ldr	r0, [pc, #196]	; (e48 <sd_mmc_check+0x48c>)
     d82:	4b32      	ldr	r3, [pc, #200]	; (e4c <sd_mmc_check+0x490>)
     d84:	4798      	blx	r3
     d86:	2800      	cmp	r0, #0
     d88:	d100      	bne.n	d8c <sd_mmc_check+0x3d0>
     d8a:	e637      	b.n	9fc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     d8c:	4b30      	ldr	r3, [pc, #192]	; (e50 <sd_mmc_check+0x494>)
     d8e:	4798      	blx	r3
     d90:	2800      	cmp	r0, #0
     d92:	d100      	bne.n	d96 <sd_mmc_check+0x3da>
     d94:	e632      	b.n	9fc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d96:	4b2f      	ldr	r3, [pc, #188]	; (e54 <sd_mmc_check+0x498>)
     d98:	4798      	blx	r3
     d9a:	e65e      	b.n	a5a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d9c:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d9e:	7d93      	ldrb	r3, [r2, #22]
     da0:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     da2:	7d51      	ldrb	r1, [r2, #21]
     da4:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     da6:	430b      	orrs	r3, r1
     da8:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     daa:	029b      	lsls	r3, r3, #10
				* 512;
     dac:	085b      	lsrs	r3, r3, #1
     dae:	2180      	movs	r1, #128	; 0x80
     db0:	0089      	lsls	r1, r1, #2
     db2:	468c      	mov	ip, r1
     db4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     db6:	6053      	str	r3, [r2, #4]
     db8:	e6cd      	b.n	b56 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     dba:	4b27      	ldr	r3, [pc, #156]	; (e58 <sd_mmc_check+0x49c>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	2210      	movs	r2, #16
     dc0:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dc2:	4b25      	ldr	r3, [pc, #148]	; (e58 <sd_mmc_check+0x49c>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	7adb      	ldrb	r3, [r3, #11]
     dc8:	2209      	movs	r2, #9
     dca:	4013      	ands	r3, r2
     dcc:	2b01      	cmp	r3, #1
     dce:	d000      	beq.n	dd2 <sd_mmc_check+0x416>
     dd0:	e638      	b.n	a44 <sd_mmc_check+0x88>
     dd2:	e630      	b.n	a36 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     dd4:	4b20      	ldr	r3, [pc, #128]	; (e58 <sd_mmc_check+0x49c>)
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	221a      	movs	r2, #26
     dda:	731a      	strb	r2, [r3, #12]
     ddc:	e7f1      	b.n	dc2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dde:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     de0:	789b      	ldrb	r3, [r3, #2]
     de2:	09db      	lsrs	r3, r3, #7
     de4:	2b01      	cmp	r3, #1
     de6:	d104      	bne.n	df2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     de8:	4b1b      	ldr	r3, [pc, #108]	; (e58 <sd_mmc_check+0x49c>)
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	2230      	movs	r2, #48	; 0x30
     dee:	731a      	strb	r2, [r3, #12]
     df0:	e7e7      	b.n	dc2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     df2:	4b19      	ldr	r3, [pc, #100]	; (e58 <sd_mmc_check+0x49c>)
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	2220      	movs	r2, #32
     df8:	731a      	strb	r2, [r3, #12]
     dfa:	e7e2      	b.n	dc2 <sd_mmc_check+0x406>
	*v2 = 0;
     dfc:	2600      	movs	r6, #0
     dfe:	e60d      	b.n	a1c <sd_mmc_check+0x60>
     e00:	1e73      	subs	r3, r6, #1
     e02:	419e      	sbcs	r6, r3
     e04:	07b3      	lsls	r3, r6, #30
     e06:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e08:	4d14      	ldr	r5, [pc, #80]	; (e5c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e0a:	4f10      	ldr	r7, [pc, #64]	; (e4c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e0c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     e0e:	4e14      	ldr	r6, [pc, #80]	; (e60 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e10:	2100      	movs	r1, #0
     e12:	4814      	ldr	r0, [pc, #80]	; (e64 <sd_mmc_check+0x4a8>)
     e14:	47b8      	blx	r7
     e16:	2800      	cmp	r0, #0
     e18:	d100      	bne.n	e1c <sd_mmc_check+0x460>
     e1a:	e638      	b.n	a8e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e1c:	9903      	ldr	r1, [sp, #12]
     e1e:	4812      	ldr	r0, [pc, #72]	; (e68 <sd_mmc_check+0x4ac>)
     e20:	47c0      	blx	r8
     e22:	2800      	cmp	r0, #0
     e24:	d100      	bne.n	e28 <sd_mmc_check+0x46c>
     e26:	e632      	b.n	a8e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e28:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e2a:	07c3      	lsls	r3, r0, #31
     e2c:	d400      	bmi.n	e30 <sd_mmc_check+0x474>
     e2e:	e628      	b.n	a82 <sd_mmc_check+0xc6>
     e30:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e32:	2d00      	cmp	r5, #0
     e34:	d1ec      	bne.n	e10 <sd_mmc_check+0x454>
     e36:	e62a      	b.n	a8e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e38:	2209      	movs	r2, #9
     e3a:	4013      	ands	r3, r2
     e3c:	2b01      	cmp	r3, #1
     e3e:	d000      	beq.n	e42 <sd_mmc_check+0x486>
     e40:	e609      	b.n	a56 <sd_mmc_check+0x9a>
     e42:	e5f8      	b.n	a36 <sd_mmc_check+0x7a>
     e44:	0000179d 	.word	0x0000179d
     e48:	00001110 	.word	0x00001110
     e4c:	00001779 	.word	0x00001779
     e50:	000008fd 	.word	0x000008fd
     e54:	00000879 	.word	0x00000879
     e58:	20000094 	.word	0x20000094
     e5c:	00001bef 	.word	0x00001bef
     e60:	00001791 	.word	0x00001791
     e64:	00001137 	.word	0x00001137
     e68:	00001129 	.word	0x00001129

00000e6c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     e6c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e6e:	4b06      	ldr	r3, [pc, #24]	; (e88 <sd_mmc_get_type+0x1c>)
     e70:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     e72:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e74:	2800      	cmp	r0, #0
     e76:	d001      	beq.n	e7c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     e78:	0018      	movs	r0, r3
     e7a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e7c:	4b03      	ldr	r3, [pc, #12]	; (e8c <sd_mmc_get_type+0x20>)
     e7e:	4798      	blx	r3
	return sd_mmc_card->type;
     e80:	4b03      	ldr	r3, [pc, #12]	; (e90 <sd_mmc_get_type+0x24>)
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	7adb      	ldrb	r3, [r3, #11]
     e86:	e7f7      	b.n	e78 <sd_mmc_get_type+0xc>
     e88:	000008a1 	.word	0x000008a1
     e8c:	00000981 	.word	0x00000981
     e90:	20000094 	.word	0x20000094

00000e94 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     e94:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e96:	4b06      	ldr	r3, [pc, #24]	; (eb0 <sd_mmc_get_capacity+0x1c>)
     e98:	4798      	blx	r3
		return 0;
     e9a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e9c:	2800      	cmp	r0, #0
     e9e:	d001      	beq.n	ea4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     ea0:	0018      	movs	r0, r3
     ea2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     ea4:	4b03      	ldr	r3, [pc, #12]	; (eb4 <sd_mmc_get_capacity+0x20>)
     ea6:	4798      	blx	r3
	return sd_mmc_card->capacity;
     ea8:	4b03      	ldr	r3, [pc, #12]	; (eb8 <sd_mmc_get_capacity+0x24>)
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	685b      	ldr	r3, [r3, #4]
     eae:	e7f7      	b.n	ea0 <sd_mmc_get_capacity+0xc>
     eb0:	000008a1 	.word	0x000008a1
     eb4:	00000981 	.word	0x00000981
     eb8:	20000094 	.word	0x20000094

00000ebc <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     ebc:	2000      	movs	r0, #0
     ebe:	4770      	bx	lr

00000ec0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	b082      	sub	sp, #8
     ec4:	000e      	movs	r6, r1
     ec6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ec8:	4b16      	ldr	r3, [pc, #88]	; (f24 <sd_mmc_init_read_blocks+0x64>)
     eca:	4798      	blx	r3
     ecc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ece:	d002      	beq.n	ed6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ed0:	0020      	movs	r0, r4
     ed2:	b002      	add	sp, #8
     ed4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     ed6:	4b14      	ldr	r3, [pc, #80]	; (f28 <sd_mmc_init_read_blocks+0x68>)
     ed8:	4798      	blx	r3
     eda:	2800      	cmp	r0, #0
     edc:	d017      	beq.n	f0e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     ede:	2d01      	cmp	r5, #1
     ee0:	d919      	bls.n	f16 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     ee2:	4812      	ldr	r0, [pc, #72]	; (f2c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     ee4:	4b12      	ldr	r3, [pc, #72]	; (f30 <sd_mmc_init_read_blocks+0x70>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	7adb      	ldrb	r3, [r3, #11]
     eea:	071b      	lsls	r3, r3, #28
     eec:	d400      	bmi.n	ef0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     eee:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ef0:	2301      	movs	r3, #1
     ef2:	9300      	str	r3, [sp, #0]
     ef4:	002b      	movs	r3, r5
     ef6:	2280      	movs	r2, #128	; 0x80
     ef8:	0092      	lsls	r2, r2, #2
     efa:	0031      	movs	r1, r6
     efc:	4e0d      	ldr	r6, [pc, #52]	; (f34 <sd_mmc_init_read_blocks+0x74>)
     efe:	47b0      	blx	r6
     f00:	2800      	cmp	r0, #0
     f02:	d00a      	beq.n	f1a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <sd_mmc_init_read_blocks+0x78>)
     f06:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     f08:	4b0c      	ldr	r3, [pc, #48]	; (f3c <sd_mmc_init_read_blocks+0x7c>)
     f0a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     f0c:	e7e0      	b.n	ed0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     f0e:	4b0c      	ldr	r3, [pc, #48]	; (f40 <sd_mmc_init_read_blocks+0x80>)
     f10:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f12:	3405      	adds	r4, #5
     f14:	e7dc      	b.n	ed0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     f16:	480b      	ldr	r0, [pc, #44]	; (f44 <sd_mmc_init_read_blocks+0x84>)
     f18:	e7e4      	b.n	ee4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     f1a:	4b09      	ldr	r3, [pc, #36]	; (f40 <sd_mmc_init_read_blocks+0x80>)
     f1c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f1e:	2405      	movs	r4, #5
     f20:	e7d6      	b.n	ed0 <sd_mmc_init_read_blocks+0x10>
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	000008a1 	.word	0x000008a1
     f28:	000008fd 	.word	0x000008fd
     f2c:	00101112 	.word	0x00101112
     f30:	20000094 	.word	0x20000094
     f34:	000015e9 	.word	0x000015e9
     f38:	200000b8 	.word	0x200000b8
     f3c:	200000ba 	.word	0x200000ba
     f40:	00000981 	.word	0x00000981
     f44:	00081111 	.word	0x00081111

00000f48 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     f48:	b510      	push	{r4, lr}
     f4a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <sd_mmc_start_read_blocks+0x24>)
     f4e:	4798      	blx	r3
     f50:	2800      	cmp	r0, #0
     f52:	d104      	bne.n	f5e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     f54:	2200      	movs	r2, #0
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <sd_mmc_start_read_blocks+0x28>)
     f58:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     f5a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     f5c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     f5e:	4a04      	ldr	r2, [pc, #16]	; (f70 <sd_mmc_start_read_blocks+0x28>)
     f60:	8813      	ldrh	r3, [r2, #0]
     f62:	1b1c      	subs	r4, r3, r4
     f64:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     f66:	2000      	movs	r0, #0
     f68:	e7f8      	b.n	f5c <sd_mmc_start_read_blocks+0x14>
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00001815 	.word	0x00001815
     f70:	200000b8 	.word	0x200000b8

00000f74 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     f74:	b510      	push	{r4, lr}
     f76:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     f78:	4b14      	ldr	r3, [pc, #80]	; (fcc <sd_mmc_wait_end_of_read_blocks+0x58>)
     f7a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f7c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     f7e:	2800      	cmp	r0, #0
     f80:	d101      	bne.n	f86 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     f82:	0018      	movs	r0, r3
     f84:	bd10      	pop	{r4, pc}
	if (abort) {
     f86:	2c00      	cmp	r4, #0
     f88:	d010      	beq.n	fac <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     f8a:	2200      	movs	r2, #0
     f8c:	4b10      	ldr	r3, [pc, #64]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f8e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     f90:	4b10      	ldr	r3, [pc, #64]	; (fd4 <sd_mmc_wait_end_of_read_blocks+0x60>)
     f92:	881b      	ldrh	r3, [r3, #0]
     f94:	2b01      	cmp	r3, #1
     f96:	d00f      	beq.n	fb8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     f98:	2100      	movs	r1, #0
     f9a:	480f      	ldr	r0, [pc, #60]	; (fd8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f9c:	4b0f      	ldr	r3, [pc, #60]	; (fdc <sd_mmc_wait_end_of_read_blocks+0x68>)
     f9e:	4798      	blx	r3
     fa0:	2800      	cmp	r0, #0
     fa2:	d00d      	beq.n	fc0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     fa4:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     fa6:	4798      	blx	r3
	return SD_MMC_OK;
     fa8:	2300      	movs	r3, #0
     faa:	e7ea      	b.n	f82 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     fac:	4b08      	ldr	r3, [pc, #32]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     fae:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     fb0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     fb2:	2a00      	cmp	r2, #0
     fb4:	d0ec      	beq.n	f90 <sd_mmc_wait_end_of_read_blocks+0x1c>
     fb6:	e7e4      	b.n	f82 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     fb8:	4b09      	ldr	r3, [pc, #36]	; (fe0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     fba:	4798      	blx	r3
		return SD_MMC_OK;
     fbc:	2300      	movs	r3, #0
     fbe:	e7e0      	b.n	f82 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     fc0:	2100      	movs	r1, #0
     fc2:	4805      	ldr	r0, [pc, #20]	; (fd8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     fc4:	4b05      	ldr	r3, [pc, #20]	; (fdc <sd_mmc_wait_end_of_read_blocks+0x68>)
     fc6:	4798      	blx	r3
     fc8:	e7ec      	b.n	fa4 <sd_mmc_wait_end_of_read_blocks+0x30>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	000018a1 	.word	0x000018a1
     fd0:	200000b8 	.word	0x200000b8
     fd4:	200000ba 	.word	0x200000ba
     fd8:	0000310c 	.word	0x0000310c
     fdc:	00001779 	.word	0x00001779
     fe0:	00000981 	.word	0x00000981

00000fe4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fe4:	b570      	push	{r4, r5, r6, lr}
     fe6:	b082      	sub	sp, #8
     fe8:	000e      	movs	r6, r1
     fea:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     fec:	4b11      	ldr	r3, [pc, #68]	; (1034 <sd_mmc_init_write_blocks+0x50>)
     fee:	4798      	blx	r3
     ff0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ff2:	d116      	bne.n	1022 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     ff4:	2d01      	cmp	r5, #1
     ff6:	d917      	bls.n	1028 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     ff8:	480f      	ldr	r0, [pc, #60]	; (1038 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     ffa:	4b10      	ldr	r3, [pc, #64]	; (103c <sd_mmc_init_write_blocks+0x58>)
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	7adb      	ldrb	r3, [r3, #11]
    1000:	071b      	lsls	r3, r3, #28
    1002:	d400      	bmi.n	1006 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1004:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1006:	2301      	movs	r3, #1
    1008:	9300      	str	r3, [sp, #0]
    100a:	002b      	movs	r3, r5
    100c:	2280      	movs	r2, #128	; 0x80
    100e:	0092      	lsls	r2, r2, #2
    1010:	0031      	movs	r1, r6
    1012:	4e0b      	ldr	r6, [pc, #44]	; (1040 <sd_mmc_init_write_blocks+0x5c>)
    1014:	47b0      	blx	r6
    1016:	2800      	cmp	r0, #0
    1018:	d008      	beq.n	102c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <sd_mmc_init_write_blocks+0x60>)
    101c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    101e:	4b0a      	ldr	r3, [pc, #40]	; (1048 <sd_mmc_init_write_blocks+0x64>)
    1020:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1022:	0020      	movs	r0, r4
    1024:	b002      	add	sp, #8
    1026:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1028:	4808      	ldr	r0, [pc, #32]	; (104c <sd_mmc_init_write_blocks+0x68>)
    102a:	e7e6      	b.n	ffa <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    102c:	4b08      	ldr	r3, [pc, #32]	; (1050 <sd_mmc_init_write_blocks+0x6c>)
    102e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1030:	2405      	movs	r4, #5
    1032:	e7f6      	b.n	1022 <sd_mmc_init_write_blocks+0x3e>
    1034:	000008a1 	.word	0x000008a1
    1038:	00109119 	.word	0x00109119
    103c:	20000094 	.word	0x20000094
    1040:	000015e9 	.word	0x000015e9
    1044:	200000b8 	.word	0x200000b8
    1048:	200000ba 	.word	0x200000ba
    104c:	00089118 	.word	0x00089118
    1050:	00000981 	.word	0x00000981

00001054 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1054:	b510      	push	{r4, lr}
    1056:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1058:	4b07      	ldr	r3, [pc, #28]	; (1078 <sd_mmc_start_write_blocks+0x24>)
    105a:	4798      	blx	r3
    105c:	2800      	cmp	r0, #0
    105e:	d104      	bne.n	106a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1060:	2200      	movs	r2, #0
    1062:	4b06      	ldr	r3, [pc, #24]	; (107c <sd_mmc_start_write_blocks+0x28>)
    1064:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1066:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1068:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    106a:	4a04      	ldr	r2, [pc, #16]	; (107c <sd_mmc_start_write_blocks+0x28>)
    106c:	8813      	ldrh	r3, [r2, #0]
    106e:	1b1c      	subs	r4, r3, r4
    1070:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1072:	2000      	movs	r0, #0
    1074:	e7f8      	b.n	1068 <sd_mmc_start_write_blocks+0x14>
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	000018a5 	.word	0x000018a5
    107c:	200000b8 	.word	0x200000b8

00001080 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1080:	b510      	push	{r4, lr}
    1082:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1084:	4b0e      	ldr	r3, [pc, #56]	; (10c0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1086:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1088:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    108a:	2800      	cmp	r0, #0
    108c:	d101      	bne.n	1092 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    108e:	0018      	movs	r0, r3
    1090:	bd10      	pop	{r4, pc}
	if (abort) {
    1092:	2c00      	cmp	r4, #0
    1094:	d00a      	beq.n	10ac <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1096:	2200      	movs	r2, #0
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    109a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    109c:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    109e:	881b      	ldrh	r3, [r3, #0]
    10a0:	2b01      	cmp	r3, #1
    10a2:	d009      	beq.n	10b8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    10a4:	4b09      	ldr	r3, [pc, #36]	; (10cc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    10a6:	4798      	blx	r3
	return SD_MMC_OK;
    10a8:	2300      	movs	r3, #0
    10aa:	e7f0      	b.n	108e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    10ac:	4b05      	ldr	r3, [pc, #20]	; (10c4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    10ae:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    10b0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    10b2:	2a00      	cmp	r2, #0
    10b4:	d0f2      	beq.n	109c <sd_mmc_wait_end_of_write_blocks+0x1c>
    10b6:	e7ea      	b.n	108e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    10b8:	4b04      	ldr	r3, [pc, #16]	; (10cc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    10ba:	4798      	blx	r3
		return SD_MMC_OK;
    10bc:	2300      	movs	r3, #0
    10be:	e7e6      	b.n	108e <sd_mmc_wait_end_of_write_blocks+0xe>
    10c0:	00001925 	.word	0x00001925
    10c4:	200000b8 	.word	0x200000b8
    10c8:	200000ba 	.word	0x200000ba
    10cc:	00000981 	.word	0x00000981

000010d0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    10d0:	b510      	push	{r4, lr}
    10d2:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    10d4:	4b0f      	ldr	r3, [pc, #60]	; (1114 <sd_mmc_test_unit_ready+0x44>)
    10d6:	4798      	blx	r3
    10d8:	2801      	cmp	r0, #1
    10da:	d019      	beq.n	1110 <sd_mmc_test_unit_ready+0x40>
    10dc:	2800      	cmp	r0, #0
    10de:	d003      	beq.n	10e8 <sd_mmc_test_unit_ready+0x18>
    10e0:	2802      	cmp	r0, #2
    10e2:	d010      	beq.n	1106 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    10e4:	2001      	movs	r0, #1
	}
}
    10e6:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    10e8:	4b0b      	ldr	r3, [pc, #44]	; (1118 <sd_mmc_test_unit_ready+0x48>)
    10ea:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    10ec:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    10ee:	2b00      	cmp	r3, #0
    10f0:	d1f9      	bne.n	10e6 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    10f2:	0020      	movs	r0, r4
    10f4:	4b09      	ldr	r3, [pc, #36]	; (111c <sd_mmc_test_unit_ready+0x4c>)
    10f6:	4798      	blx	r3
    10f8:	0003      	movs	r3, r0
    10fa:	2003      	movs	r0, #3
    10fc:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    10fe:	4243      	negs	r3, r0
    1100:	4158      	adcs	r0, r3
    1102:	0040      	lsls	r0, r0, #1
    1104:	e7ef      	b.n	10e6 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    1106:	2200      	movs	r2, #0
    1108:	4b03      	ldr	r3, [pc, #12]	; (1118 <sd_mmc_test_unit_ready+0x48>)
    110a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    110c:	2002      	movs	r0, #2
    110e:	e7ea      	b.n	10e6 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    1110:	2003      	movs	r0, #3
    1112:	e7e8      	b.n	10e6 <sd_mmc_test_unit_ready+0x16>
    1114:	000009bd 	.word	0x000009bd
    1118:	200000c0 	.word	0x200000c0
    111c:	00000e6d 	.word	0x00000e6d

00001120 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1120:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    1122:	2000      	movs	r0, #0
    1124:	4b01      	ldr	r3, [pc, #4]	; (112c <sd_mmc_test_unit_ready_0+0xc>)
    1126:	4798      	blx	r3
}
    1128:	bd10      	pop	{r4, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	000010d1 	.word	0x000010d1

00001130 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	0004      	movs	r4, r0
    1134:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1136:	4b04      	ldr	r3, [pc, #16]	; (1148 <sd_mmc_read_capacity+0x18>)
    1138:	4798      	blx	r3
    113a:	0040      	lsls	r0, r0, #1
    113c:	3801      	subs	r0, #1
    113e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    1140:	0020      	movs	r0, r4
    1142:	4b02      	ldr	r3, [pc, #8]	; (114c <sd_mmc_read_capacity+0x1c>)
    1144:	4798      	blx	r3
}
    1146:	bd70      	pop	{r4, r5, r6, pc}
    1148:	00000e95 	.word	0x00000e95
    114c:	000010d1 	.word	0x000010d1

00001150 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1150:	b510      	push	{r4, lr}
    1152:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    1154:	2000      	movs	r0, #0
    1156:	4b01      	ldr	r3, [pc, #4]	; (115c <sd_mmc_read_capacity_0+0xc>)
    1158:	4798      	blx	r3
}
    115a:	bd10      	pop	{r4, pc}
    115c:	00001131 	.word	0x00001131

00001160 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    1160:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    1162:	2000      	movs	r0, #0
    1164:	4b01      	ldr	r3, [pc, #4]	; (116c <sd_mmc_wr_protect_0+0xc>)
    1166:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    1168:	bd10      	pop	{r4, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00000ebd 	.word	0x00000ebd

00001170 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1170:	b510      	push	{r4, lr}
    1172:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1174:	2201      	movs	r2, #1
    1176:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <sd_mmc_mem_2_ram+0x38>)
    1178:	4798      	blx	r3
    117a:	2800      	cmp	r0, #0
    117c:	d004      	beq.n	1188 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    117e:	3802      	subs	r0, #2
    1180:	4243      	negs	r3, r0
    1182:	4158      	adcs	r0, r3
    1184:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    1186:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1188:	2101      	movs	r1, #1
    118a:	0020      	movs	r0, r4
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <sd_mmc_mem_2_ram+0x3c>)
    118e:	4798      	blx	r3
    1190:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1192:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1194:	2b00      	cmp	r3, #0
    1196:	d1f6      	bne.n	1186 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1198:	2000      	movs	r0, #0
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <sd_mmc_mem_2_ram+0x40>)
    119c:	4798      	blx	r3
    119e:	1e43      	subs	r3, r0, #1
    11a0:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    11a2:	b2c0      	uxtb	r0, r0
    11a4:	e7ef      	b.n	1186 <sd_mmc_mem_2_ram+0x16>
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	00000ec1 	.word	0x00000ec1
    11ac:	00000f49 	.word	0x00000f49
    11b0:	00000f75 	.word	0x00000f75

000011b4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    11b4:	b510      	push	{r4, lr}
    11b6:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    11b8:	0001      	movs	r1, r0
    11ba:	2000      	movs	r0, #0
    11bc:	4b01      	ldr	r3, [pc, #4]	; (11c4 <sd_mmc_mem_2_ram_0+0x10>)
    11be:	4798      	blx	r3
}
    11c0:	bd10      	pop	{r4, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	00001171 	.word	0x00001171

000011c8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    11c8:	b510      	push	{r4, lr}
    11ca:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    11cc:	2201      	movs	r2, #1
    11ce:	4b0c      	ldr	r3, [pc, #48]	; (1200 <sd_mmc_ram_2_mem+0x38>)
    11d0:	4798      	blx	r3
    11d2:	2800      	cmp	r0, #0
    11d4:	d004      	beq.n	11e0 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    11d6:	3802      	subs	r0, #2
    11d8:	4243      	negs	r3, r0
    11da:	4158      	adcs	r0, r3
    11dc:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    11de:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11e0:	2101      	movs	r1, #1
    11e2:	0020      	movs	r0, r4
    11e4:	4b07      	ldr	r3, [pc, #28]	; (1204 <sd_mmc_ram_2_mem+0x3c>)
    11e6:	4798      	blx	r3
    11e8:	0003      	movs	r3, r0
		return CTRL_FAIL;
    11ea:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11ec:	2b00      	cmp	r3, #0
    11ee:	d1f6      	bne.n	11de <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    11f0:	2000      	movs	r0, #0
    11f2:	4b05      	ldr	r3, [pc, #20]	; (1208 <sd_mmc_ram_2_mem+0x40>)
    11f4:	4798      	blx	r3
    11f6:	1e43      	subs	r3, r0, #1
    11f8:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    11fa:	b2c0      	uxtb	r0, r0
    11fc:	e7ef      	b.n	11de <sd_mmc_ram_2_mem+0x16>
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	00000fe5 	.word	0x00000fe5
    1204:	00001055 	.word	0x00001055
    1208:	00001081 	.word	0x00001081

0000120c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    120c:	b510      	push	{r4, lr}
    120e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    1210:	0001      	movs	r1, r0
    1212:	2000      	movs	r0, #0
    1214:	4b01      	ldr	r3, [pc, #4]	; (121c <sd_mmc_ram_2_mem_0+0x10>)
    1216:	4798      	blx	r3
}
    1218:	bd10      	pop	{r4, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	000011c9 	.word	0x000011c9

00001220 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    1220:	b500      	push	{lr}
    1222:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    1224:	466b      	mov	r3, sp
    1226:	1dd9      	adds	r1, r3, #7
    1228:	23ff      	movs	r3, #255	; 0xff
    122a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    122c:	2201      	movs	r2, #1
    122e:	480b      	ldr	r0, [pc, #44]	; (125c <sd_mmc_spi_start_write_block+0x3c>)
    1230:	4b0b      	ldr	r3, [pc, #44]	; (1260 <sd_mmc_spi_start_write_block+0x40>)
    1232:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    1234:	4b0b      	ldr	r3, [pc, #44]	; (1264 <sd_mmc_spi_start_write_block+0x44>)
    1236:	881b      	ldrh	r3, [r3, #0]
    1238:	2b01      	cmp	r3, #1
    123a:	d00a      	beq.n	1252 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    123c:	22fc      	movs	r2, #252	; 0xfc
    123e:	466b      	mov	r3, sp
    1240:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    1242:	2201      	movs	r2, #1
    1244:	466b      	mov	r3, sp
    1246:	1d99      	adds	r1, r3, #6
    1248:	4804      	ldr	r0, [pc, #16]	; (125c <sd_mmc_spi_start_write_block+0x3c>)
    124a:	4b05      	ldr	r3, [pc, #20]	; (1260 <sd_mmc_spi_start_write_block+0x40>)
    124c:	4798      	blx	r3
}
    124e:	b003      	add	sp, #12
    1250:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    1252:	22fe      	movs	r2, #254	; 0xfe
    1254:	466b      	mov	r3, sp
    1256:	719a      	strb	r2, [r3, #6]
    1258:	e7f3      	b.n	1242 <sd_mmc_spi_start_write_block+0x22>
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	200000c4 	.word	0x200000c4
    1260:	00002531 	.word	0x00002531
    1264:	20000108 	.word	0x20000108

00001268 <sd_mmc_spi_wait_busy>:
{
    1268:	b5f0      	push	{r4, r5, r6, r7, lr}
    126a:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    126c:	466b      	mov	r3, sp
    126e:	1ddc      	adds	r4, r3, #7
    1270:	23ff      	movs	r3, #255	; 0xff
    1272:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1274:	4e12      	ldr	r6, [pc, #72]	; (12c0 <sd_mmc_spi_wait_busy+0x58>)
    1276:	2201      	movs	r2, #1
    1278:	0021      	movs	r1, r4
    127a:	0030      	movs	r0, r6
    127c:	4d11      	ldr	r5, [pc, #68]	; (12c4 <sd_mmc_spi_wait_busy+0x5c>)
    127e:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1280:	23ff      	movs	r3, #255	; 0xff
    1282:	2201      	movs	r2, #1
    1284:	0021      	movs	r1, r4
    1286:	0030      	movs	r0, r6
    1288:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    128a:	23ff      	movs	r3, #255	; 0xff
    128c:	2201      	movs	r2, #1
    128e:	0021      	movs	r1, r4
    1290:	0030      	movs	r0, r6
    1292:	47a8      	blx	r5
    1294:	4c0c      	ldr	r4, [pc, #48]	; (12c8 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    1296:	466b      	mov	r3, sp
    1298:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    129a:	4e09      	ldr	r6, [pc, #36]	; (12c0 <sd_mmc_spi_wait_busy+0x58>)
    129c:	4f09      	ldr	r7, [pc, #36]	; (12c4 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    129e:	782b      	ldrb	r3, [r5, #0]
    12a0:	2bff      	cmp	r3, #255	; 0xff
    12a2:	d009      	beq.n	12b8 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    12a4:	23ff      	movs	r3, #255	; 0xff
    12a6:	2201      	movs	r2, #1
    12a8:	0029      	movs	r1, r5
    12aa:	0030      	movs	r0, r6
    12ac:	47b8      	blx	r7
    12ae:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    12b0:	2c00      	cmp	r4, #0
    12b2:	d1f4      	bne.n	129e <sd_mmc_spi_wait_busy+0x36>
			return false;
    12b4:	2000      	movs	r0, #0
    12b6:	e000      	b.n	12ba <sd_mmc_spi_wait_busy+0x52>
	return true;
    12b8:	2001      	movs	r0, #1
}
    12ba:	b003      	add	sp, #12
    12bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	200000c4 	.word	0x200000c4
    12c4:	00002369 	.word	0x00002369
    12c8:	00030d40 	.word	0x00030d40

000012cc <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    12cc:	b570      	push	{r4, r5, r6, lr}
    12ce:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    12d0:	4b14      	ldr	r3, [pc, #80]	; (1324 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    12d2:	881c      	ldrh	r4, [r3, #0]
    12d4:	2c01      	cmp	r4, #1
    12d6:	d023      	beq.n	1320 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    12d8:	4b13      	ldr	r3, [pc, #76]	; (1328 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    12da:	8819      	ldrh	r1, [r3, #0]
    12dc:	4b13      	ldr	r3, [pc, #76]	; (132c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    12de:	6818      	ldr	r0, [r3, #0]
    12e0:	4b13      	ldr	r3, [pc, #76]	; (1330 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    12e2:	4798      	blx	r3
		return true; // It is not the End of multi write
    12e4:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    12e6:	4284      	cmp	r4, r0
    12e8:	d902      	bls.n	12f0 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    12ea:	0018      	movs	r0, r3
    12ec:	b002      	add	sp, #8
    12ee:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    12f0:	466b      	mov	r3, sp
    12f2:	1ddc      	adds	r4, r3, #7
    12f4:	23ff      	movs	r3, #255	; 0xff
    12f6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    12f8:	4e0e      	ldr	r6, [pc, #56]	; (1334 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    12fa:	2201      	movs	r2, #1
    12fc:	0021      	movs	r1, r4
    12fe:	0030      	movs	r0, r6
    1300:	4d0d      	ldr	r5, [pc, #52]	; (1338 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    1302:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    1304:	23fd      	movs	r3, #253	; 0xfd
    1306:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1308:	2201      	movs	r2, #1
    130a:	0021      	movs	r1, r4
    130c:	0030      	movs	r0, r6
    130e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    1310:	4b0a      	ldr	r3, [pc, #40]	; (133c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    1312:	4798      	blx	r3
    1314:	1e03      	subs	r3, r0, #0
    1316:	d1e8      	bne.n	12ea <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1318:	2105      	movs	r1, #5
    131a:	4a09      	ldr	r2, [pc, #36]	; (1340 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    131c:	7011      	strb	r1, [r2, #0]
		return false;
    131e:	e7e4      	b.n	12ea <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    1320:	2301      	movs	r3, #1
    1322:	e7e2      	b.n	12ea <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1324:	20000108 	.word	0x20000108
    1328:	20000100 	.word	0x20000100
    132c:	20000110 	.word	0x20000110
    1330:	0000590d 	.word	0x0000590d
    1334:	200000c4 	.word	0x200000c4
    1338:	00002531 	.word	0x00002531
    133c:	00001269 	.word	0x00001269
    1340:	20000107 	.word	0x20000107

00001344 <sd_mmc_spi_start_read_block>:
{
    1344:	b5f0      	push	{r4, r5, r6, r7, lr}
    1346:	b083      	sub	sp, #12
	token = 0;
    1348:	2200      	movs	r2, #0
    134a:	466b      	mov	r3, sp
    134c:	71da      	strb	r2, [r3, #7]
    134e:	4c14      	ldr	r4, [pc, #80]	; (13a0 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    1350:	466b      	mov	r3, sp
    1352:	1ddd      	adds	r5, r3, #7
    1354:	4e13      	ldr	r6, [pc, #76]	; (13a4 <sd_mmc_spi_start_read_block+0x60>)
    1356:	4f14      	ldr	r7, [pc, #80]	; (13a8 <sd_mmc_spi_start_read_block+0x64>)
    1358:	23ff      	movs	r3, #255	; 0xff
    135a:	2201      	movs	r2, #1
    135c:	0029      	movs	r1, r5
    135e:	0030      	movs	r0, r6
    1360:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    1362:	782b      	ldrb	r3, [r5, #0]
    1364:	220f      	movs	r2, #15
    1366:	0019      	movs	r1, r3
    1368:	4391      	bics	r1, r2
    136a:	1e0a      	subs	r2, r1, #0
    136c:	d009      	beq.n	1382 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    136e:	2bfe      	cmp	r3, #254	; 0xfe
    1370:	d013      	beq.n	139a <sd_mmc_spi_start_read_block+0x56>
    1372:	3c01      	subs	r4, #1
		if (i-- == 0) {
    1374:	2c00      	cmp	r4, #0
    1376:	d1ef      	bne.n	1358 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    1378:	2204      	movs	r2, #4
    137a:	4b0c      	ldr	r3, [pc, #48]	; (13ac <sd_mmc_spi_start_read_block+0x68>)
    137c:	701a      	strb	r2, [r3, #0]
			return false;
    137e:	2000      	movs	r0, #0
    1380:	e00c      	b.n	139c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    1382:	075b      	lsls	r3, r3, #29
    1384:	d004      	beq.n	1390 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    1386:	3207      	adds	r2, #7
    1388:	4b08      	ldr	r3, [pc, #32]	; (13ac <sd_mmc_spi_start_read_block+0x68>)
    138a:	701a      	strb	r2, [r3, #0]
			return false;
    138c:	2000      	movs	r0, #0
    138e:	e005      	b.n	139c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    1390:	220b      	movs	r2, #11
    1392:	4b06      	ldr	r3, [pc, #24]	; (13ac <sd_mmc_spi_start_read_block+0x68>)
    1394:	701a      	strb	r2, [r3, #0]
			return false;
    1396:	2000      	movs	r0, #0
    1398:	e000      	b.n	139c <sd_mmc_spi_start_read_block+0x58>
	return true;
    139a:	2001      	movs	r0, #1
}
    139c:	b003      	add	sp, #12
    139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a0:	0007a120 	.word	0x0007a120
    13a4:	200000c4 	.word	0x200000c4
    13a8:	00002369 	.word	0x00002369
    13ac:	20000107 	.word	0x20000107

000013b0 <sd_mmc_spi_stop_write_block>:
{
    13b0:	b530      	push	{r4, r5, lr}
    13b2:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    13b4:	a901      	add	r1, sp, #4
    13b6:	2301      	movs	r3, #1
    13b8:	425b      	negs	r3, r3
    13ba:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    13bc:	4d14      	ldr	r5, [pc, #80]	; (1410 <sd_mmc_spi_stop_write_block+0x60>)
    13be:	2202      	movs	r2, #2
    13c0:	0028      	movs	r0, r5
    13c2:	4b14      	ldr	r3, [pc, #80]	; (1414 <sd_mmc_spi_stop_write_block+0x64>)
    13c4:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    13c6:	466b      	mov	r3, sp
    13c8:	1ddc      	adds	r4, r3, #7
    13ca:	23ff      	movs	r3, #255	; 0xff
    13cc:	2201      	movs	r2, #1
    13ce:	0021      	movs	r1, r4
    13d0:	0028      	movs	r0, r5
    13d2:	4d11      	ldr	r5, [pc, #68]	; (1418 <sd_mmc_spi_stop_write_block+0x68>)
    13d4:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    13d6:	7822      	ldrb	r2, [r4, #0]
    13d8:	2311      	movs	r3, #17
    13da:	4013      	ands	r3, r2
    13dc:	2b01      	cmp	r3, #1
    13de:	d005      	beq.n	13ec <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    13e0:	2201      	movs	r2, #1
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <sd_mmc_spi_stop_write_block+0x6c>)
    13e4:	701a      	strb	r2, [r3, #0]
		return false;
    13e6:	2000      	movs	r0, #0
}
    13e8:	b003      	add	sp, #12
    13ea:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    13ec:	231e      	movs	r3, #30
    13ee:	401a      	ands	r2, r3
    13f0:	2a04      	cmp	r2, #4
    13f2:	d00b      	beq.n	140c <sd_mmc_spi_stop_write_block+0x5c>
    13f4:	2a0a      	cmp	r2, #10
    13f6:	d104      	bne.n	1402 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    13f8:	3a02      	subs	r2, #2
    13fa:	4b08      	ldr	r3, [pc, #32]	; (141c <sd_mmc_spi_stop_write_block+0x6c>)
    13fc:	701a      	strb	r2, [r3, #0]
		return false;
    13fe:	2000      	movs	r0, #0
    1400:	e7f2      	b.n	13e8 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    1402:	220a      	movs	r2, #10
    1404:	4b05      	ldr	r3, [pc, #20]	; (141c <sd_mmc_spi_stop_write_block+0x6c>)
    1406:	701a      	strb	r2, [r3, #0]
		return false;
    1408:	2000      	movs	r0, #0
    140a:	e7ed      	b.n	13e8 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    140c:	2001      	movs	r0, #1
    140e:	e7eb      	b.n	13e8 <sd_mmc_spi_stop_write_block+0x38>
    1410:	200000c4 	.word	0x200000c4
    1414:	00002531 	.word	0x00002531
    1418:	00002369 	.word	0x00002369
    141c:	20000107 	.word	0x20000107

00001420 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    1420:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    1422:	4802      	ldr	r0, [pc, #8]	; (142c <sd_mmc_deinit+0xc>)
    1424:	4b02      	ldr	r3, [pc, #8]	; (1430 <sd_mmc_deinit+0x10>)
    1426:	4798      	blx	r3
}
    1428:	bd10      	pop	{r4, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	200000c4 	.word	0x200000c4
    1430:	0000208d 	.word	0x0000208d

00001434 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1438:	2300      	movs	r3, #0
    143a:	4a2d      	ldr	r2, [pc, #180]	; (14f0 <sd_mmc_spi_init+0xbc>)
    143c:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    143e:	ac02      	add	r4, sp, #8
    1440:	2501      	movs	r5, #1
    1442:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1444:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1446:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1448:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    144a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    144c:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    144e:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1450:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1452:	2224      	movs	r2, #36	; 0x24
    1454:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1456:	3a18      	subs	r2, #24
    1458:	2100      	movs	r1, #0
    145a:	a808      	add	r0, sp, #32
    145c:	4b25      	ldr	r3, [pc, #148]	; (14f4 <sd_mmc_spi_init+0xc0>)
    145e:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    1460:	2380      	movs	r3, #128	; 0x80
    1462:	025b      	lsls	r3, r3, #9
    1464:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    1466:	4b24      	ldr	r3, [pc, #144]	; (14f8 <sd_mmc_spi_init+0xc4>)
    1468:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    146a:	4b24      	ldr	r3, [pc, #144]	; (14fc <sd_mmc_spi_init+0xc8>)
    146c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    146e:	4b24      	ldr	r3, [pc, #144]	; (1500 <sd_mmc_spi_init+0xcc>)
    1470:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    1472:	4b24      	ldr	r3, [pc, #144]	; (1504 <sd_mmc_spi_init+0xd0>)
    1474:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    1476:	4b24      	ldr	r3, [pc, #144]	; (1508 <sd_mmc_spi_init+0xd4>)
    1478:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    147a:	4e24      	ldr	r6, [pc, #144]	; (150c <sd_mmc_spi_init+0xd8>)
    147c:	0022      	movs	r2, r4
    147e:	4924      	ldr	r1, [pc, #144]	; (1510 <sd_mmc_spi_init+0xdc>)
    1480:	0030      	movs	r0, r6
    1482:	4b24      	ldr	r3, [pc, #144]	; (1514 <sd_mmc_spi_init+0xe0>)
    1484:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1486:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1488:	0020      	movs	r0, r4
    148a:	4b23      	ldr	r3, [pc, #140]	; (1518 <sd_mmc_spi_init+0xe4>)
    148c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    148e:	231f      	movs	r3, #31
    1490:	4018      	ands	r0, r3
    1492:	4085      	lsls	r5, r0
    1494:	4b21      	ldr	r3, [pc, #132]	; (151c <sd_mmc_spi_init+0xe8>)
    1496:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1498:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    149a:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    149c:	2b00      	cmp	r3, #0
    149e:	d1fc      	bne.n	149a <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    14a0:	6823      	ldr	r3, [r4, #0]
    14a2:	2202      	movs	r2, #2
    14a4:	4313      	orrs	r3, r2
    14a6:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    14a8:	4a1d      	ldr	r2, [pc, #116]	; (1520 <sd_mmc_spi_init+0xec>)
    14aa:	2300      	movs	r3, #0
    14ac:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    14ae:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    14b0:	491c      	ldr	r1, [pc, #112]	; (1524 <sd_mmc_spi_init+0xf0>)
    14b2:	7808      	ldrb	r0, [r1, #0]
    14b4:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    14b6:	4c1c      	ldr	r4, [pc, #112]	; (1528 <sd_mmc_spi_init+0xf4>)
    14b8:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    14ba:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    14bc:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    14be:	a901      	add	r1, sp, #4
    14c0:	2201      	movs	r2, #1
    14c2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    14c4:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    14c6:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    14c8:	4b18      	ldr	r3, [pc, #96]	; (152c <sd_mmc_spi_init+0xf8>)
    14ca:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    14cc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14ce:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14d0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14d2:	2900      	cmp	r1, #0
    14d4:	d104      	bne.n	14e0 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    14d6:	0953      	lsrs	r3, r2, #5
    14d8:	01db      	lsls	r3, r3, #7
    14da:	4915      	ldr	r1, [pc, #84]	; (1530 <sd_mmc_spi_init+0xfc>)
    14dc:	468c      	mov	ip, r1
    14de:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14e0:	211f      	movs	r1, #31
    14e2:	4011      	ands	r1, r2
    14e4:	2201      	movs	r2, #1
    14e6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    14e8:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    14ea:	b010      	add	sp, #64	; 0x40
    14ec:	bd70      	pop	{r4, r5, r6, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	20000107 	.word	0x20000107
    14f4:	00005ca9 	.word	0x00005ca9
    14f8:	00100002 	.word	0x00100002
    14fc:	00110002 	.word	0x00110002
    1500:	00120002 	.word	0x00120002
    1504:	00130002 	.word	0x00130002
    1508:	00061a80 	.word	0x00061a80
    150c:	200000c4 	.word	0x200000c4
    1510:	42000c00 	.word	0x42000c00
    1514:	00002191 	.word	0x00002191
    1518:	00001ffd 	.word	0x00001ffd
    151c:	e000e100 	.word	0xe000e100
    1520:	20000114 	.word	0x20000114
    1524:	20000008 	.word	0x20000008
    1528:	20000104 	.word	0x20000104
    152c:	00001a4d 	.word	0x00001a4d
    1530:	41004400 	.word	0x41004400

00001534 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1536:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1538:	2200      	movs	r2, #0
    153a:	4b0d      	ldr	r3, [pc, #52]	; (1570 <sd_mmc_spi_select_device+0x3c>)
    153c:	701a      	strb	r2, [r3, #0]
    153e:	000c      	movs	r4, r1
    1540:	4b0c      	ldr	r3, [pc, #48]	; (1574 <sd_mmc_spi_select_device+0x40>)
    1542:	4299      	cmp	r1, r3
    1544:	d900      	bls.n	1548 <sd_mmc_spi_select_device+0x14>
    1546:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1548:	4d0b      	ldr	r5, [pc, #44]	; (1578 <sd_mmc_spi_select_device+0x44>)
    154a:	4e0c      	ldr	r6, [pc, #48]	; (157c <sd_mmc_spi_select_device+0x48>)
    154c:	e001      	b.n	1552 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    154e:	08e3      	lsrs	r3, r4, #3
    1550:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1552:	0021      	movs	r1, r4
    1554:	0028      	movs	r0, r5
    1556:	47b0      	blx	r6
    1558:	2817      	cmp	r0, #23
    155a:	d0f8      	beq.n	154e <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    155c:	0079      	lsls	r1, r7, #1
    155e:	19cf      	adds	r7, r1, r7
    1560:	4907      	ldr	r1, [pc, #28]	; (1580 <sd_mmc_spi_select_device+0x4c>)
    1562:	19c9      	adds	r1, r1, r7
    1564:	2201      	movs	r2, #1
    1566:	4804      	ldr	r0, [pc, #16]	; (1578 <sd_mmc_spi_select_device+0x44>)
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <sd_mmc_spi_select_device+0x50>)
    156a:	4798      	blx	r3
}
    156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	20000107 	.word	0x20000107
    1574:	00989680 	.word	0x00989680
    1578:	200000c4 	.word	0x200000c4
    157c:	000020d9 	.word	0x000020d9
    1580:	20000104 	.word	0x20000104
    1584:	0000243d 	.word	0x0000243d

00001588 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    1588:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    158a:	2200      	movs	r2, #0
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <sd_mmc_spi_deselect_device+0x18>)
    158e:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    1590:	0041      	lsls	r1, r0, #1
    1592:	1808      	adds	r0, r1, r0
    1594:	4903      	ldr	r1, [pc, #12]	; (15a4 <sd_mmc_spi_deselect_device+0x1c>)
    1596:	1809      	adds	r1, r1, r0
    1598:	4803      	ldr	r0, [pc, #12]	; (15a8 <sd_mmc_spi_deselect_device+0x20>)
    159a:	4b04      	ldr	r3, [pc, #16]	; (15ac <sd_mmc_spi_deselect_device+0x24>)
    159c:	4798      	blx	r3
}
    159e:	bd10      	pop	{r4, pc}
    15a0:	20000107 	.word	0x20000107
    15a4:	20000104 	.word	0x20000104
    15a8:	200000c4 	.word	0x200000c4
    15ac:	0000243d 	.word	0x0000243d

000015b0 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    15b0:	b570      	push	{r4, r5, r6, lr}
    15b2:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    15b4:	22ff      	movs	r2, #255	; 0xff
    15b6:	466b      	mov	r3, sp
    15b8:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15ba:	2200      	movs	r2, #0
    15bc:	4b07      	ldr	r3, [pc, #28]	; (15dc <sd_mmc_spi_send_clock+0x2c>)
    15be:	701a      	strb	r2, [r3, #0]
    15c0:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    15c2:	4e07      	ldr	r6, [pc, #28]	; (15e0 <sd_mmc_spi_send_clock+0x30>)
    15c4:	4d07      	ldr	r5, [pc, #28]	; (15e4 <sd_mmc_spi_send_clock+0x34>)
    15c6:	2201      	movs	r2, #1
    15c8:	466b      	mov	r3, sp
    15ca:	1dd9      	adds	r1, r3, #7
    15cc:	0030      	movs	r0, r6
    15ce:	47a8      	blx	r5
    15d0:	3c01      	subs	r4, #1
    15d2:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    15d4:	2c00      	cmp	r4, #0
    15d6:	d1f6      	bne.n	15c6 <sd_mmc_spi_send_clock+0x16>
	}
}
    15d8:	b002      	add	sp, #8
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	20000107 	.word	0x20000107
    15e0:	200000c4 	.word	0x200000c4
    15e4:	00002531 	.word	0x00002531

000015e8 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	46c6      	mov	lr, r8
    15ec:	b500      	push	{lr}
    15ee:	b086      	sub	sp, #24
    15f0:	4680      	mov	r8, r0
    15f2:	9200      	str	r2, [sp, #0]
    15f4:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    15f6:	22ff      	movs	r2, #255	; 0xff
    15f8:	230f      	movs	r3, #15
    15fa:	a802      	add	r0, sp, #8
    15fc:	4684      	mov	ip, r0
    15fe:	4463      	add	r3, ip
    1600:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1602:	2200      	movs	r2, #0
    1604:	4b53      	ldr	r3, [pc, #332]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    1606:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    1608:	ab04      	add	r3, sp, #16
    160a:	323f      	adds	r2, #63	; 0x3f
    160c:	4640      	mov	r0, r8
    160e:	4002      	ands	r2, r0
    1610:	2040      	movs	r0, #64	; 0x40
    1612:	4302      	orrs	r2, r0
    1614:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    1616:	0e0a      	lsrs	r2, r1, #24
    1618:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    161a:	0c0a      	lsrs	r2, r1, #16
    161c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    161e:	0a0a      	lsrs	r2, r1, #8
    1620:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    1622:	7119      	strb	r1, [r3, #4]
    1624:	2700      	movs	r7, #0
	crc = 0;
    1626:	2300      	movs	r3, #0
		value = *buf++;
    1628:	a904      	add	r1, sp, #16
    162a:	2208      	movs	r2, #8
				crc ^= 0x09;
    162c:	2409      	movs	r4, #9
    162e:	e011      	b.n	1654 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    1630:	0076      	lsls	r6, r6, #1
    1632:	b2f6      	uxtb	r6, r6
    1634:	3801      	subs	r0, #1
    1636:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1638:	2800      	cmp	r0, #0
    163a:	d008      	beq.n	164e <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    163c:	005b      	lsls	r3, r3, #1
    163e:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    1640:	001d      	movs	r5, r3
    1642:	4075      	eors	r5, r6
    1644:	062d      	lsls	r5, r5, #24
    1646:	d5f3      	bpl.n	1630 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    1648:	4063      	eors	r3, r4
    164a:	b2db      	uxtb	r3, r3
    164c:	e7f0      	b.n	1630 <sd_mmc_spi_adtc_start+0x48>
    164e:	3701      	adds	r7, #1
	while (size--) {
    1650:	2f05      	cmp	r7, #5
    1652:	d002      	beq.n	165a <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    1654:	5c7e      	ldrb	r6, [r7, r1]
    1656:	0010      	movs	r0, r2
    1658:	e7f0      	b.n	163c <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    165a:	005b      	lsls	r3, r3, #1
    165c:	2201      	movs	r2, #1
    165e:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    1660:	ac04      	add	r4, sp, #16
    1662:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1664:	4e3c      	ldr	r6, [pc, #240]	; (1758 <sd_mmc_spi_adtc_start+0x170>)
    1666:	2201      	movs	r2, #1
    1668:	210f      	movs	r1, #15
    166a:	ab02      	add	r3, sp, #8
    166c:	469c      	mov	ip, r3
    166e:	4461      	add	r1, ip
    1670:	0030      	movs	r0, r6
    1672:	4f3a      	ldr	r7, [pc, #232]	; (175c <sd_mmc_spi_adtc_start+0x174>)
    1674:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    1676:	2206      	movs	r2, #6
    1678:	0021      	movs	r1, r4
    167a:	0030      	movs	r0, r6
    167c:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    167e:	ab02      	add	r3, sp, #8
    1680:	1dd9      	adds	r1, r3, #7
    1682:	23ff      	movs	r3, #255	; 0xff
    1684:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1686:	2201      	movs	r2, #1
    1688:	0030      	movs	r0, r6
    168a:	4e35      	ldr	r6, [pc, #212]	; (1760 <sd_mmc_spi_adtc_start+0x178>)
    168c:	47b0      	blx	r6
    168e:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1690:	ab02      	add	r3, sp, #8
    1692:	1dde      	adds	r6, r3, #7
    1694:	4f30      	ldr	r7, [pc, #192]	; (1758 <sd_mmc_spi_adtc_start+0x170>)
    1696:	4d32      	ldr	r5, [pc, #200]	; (1760 <sd_mmc_spi_adtc_start+0x178>)
    1698:	23ff      	movs	r3, #255	; 0xff
    169a:	2201      	movs	r2, #1
    169c:	0031      	movs	r1, r6
    169e:	0038      	movs	r0, r7
    16a0:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    16a2:	7833      	ldrb	r3, [r6, #0]
    16a4:	b25a      	sxtb	r2, r3
    16a6:	2a00      	cmp	r2, #0
    16a8:	da0b      	bge.n	16c2 <sd_mmc_spi_adtc_start+0xda>
    16aa:	3c01      	subs	r4, #1
    16ac:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    16ae:	2c00      	cmp	r4, #0
    16b0:	d1f2      	bne.n	1698 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    16b2:	2202      	movs	r2, #2
    16b4:	4b27      	ldr	r3, [pc, #156]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    16b6:	701a      	strb	r2, [r3, #0]
			return false;
    16b8:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    16ba:	b006      	add	sp, #24
    16bc:	bc04      	pop	{r2}
    16be:	4690      	mov	r8, r2
    16c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    16c2:	4a28      	ldr	r2, [pc, #160]	; (1764 <sd_mmc_spi_adtc_start+0x17c>)
    16c4:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    16c6:	071a      	lsls	r2, r3, #28
    16c8:	d41a      	bmi.n	1700 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    16ca:	075a      	lsls	r2, r3, #29
    16cc:	d41d      	bmi.n	170a <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    16ce:	2201      	movs	r2, #1
    16d0:	4393      	bics	r3, r2
    16d2:	d11f      	bne.n	1714 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    16d4:	4643      	mov	r3, r8
    16d6:	049b      	lsls	r3, r3, #18
    16d8:	d420      	bmi.n	171c <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    16da:	4643      	mov	r3, r8
    16dc:	059b      	lsls	r3, r3, #22
    16de:	d425      	bmi.n	172c <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    16e0:	4643      	mov	r3, r8
    16e2:	055b      	lsls	r3, r3, #21
    16e4:	d42b      	bmi.n	173e <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    16e6:	4b20      	ldr	r3, [pc, #128]	; (1768 <sd_mmc_spi_adtc_start+0x180>)
    16e8:	466a      	mov	r2, sp
    16ea:	8812      	ldrh	r2, [r2, #0]
    16ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    16ee:	4b1f      	ldr	r3, [pc, #124]	; (176c <sd_mmc_spi_adtc_start+0x184>)
    16f0:	466a      	mov	r2, sp
    16f2:	8892      	ldrh	r2, [r2, #4]
    16f4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    16f6:	2200      	movs	r2, #0
    16f8:	4b1d      	ldr	r3, [pc, #116]	; (1770 <sd_mmc_spi_adtc_start+0x188>)
    16fa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    16fc:	2001      	movs	r0, #1
    16fe:	e7dc      	b.n	16ba <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    1700:	2206      	movs	r2, #6
    1702:	4b14      	ldr	r3, [pc, #80]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    1704:	701a      	strb	r2, [r3, #0]
		return false;
    1706:	2000      	movs	r0, #0
    1708:	e7d7      	b.n	16ba <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    170a:	2209      	movs	r2, #9
    170c:	4b11      	ldr	r3, [pc, #68]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    170e:	701a      	strb	r2, [r3, #0]
		return false;
    1710:	2000      	movs	r0, #0
    1712:	e7d2      	b.n	16ba <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1714:	4b0f      	ldr	r3, [pc, #60]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    1716:	701a      	strb	r2, [r3, #0]
		return false;
    1718:	2000      	movs	r0, #0
    171a:	e7ce      	b.n	16ba <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    171c:	4b15      	ldr	r3, [pc, #84]	; (1774 <sd_mmc_spi_adtc_start+0x18c>)
    171e:	4798      	blx	r3
    1720:	2800      	cmp	r0, #0
    1722:	d1da      	bne.n	16da <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1724:	2203      	movs	r2, #3
    1726:	4b0b      	ldr	r3, [pc, #44]	; (1754 <sd_mmc_spi_adtc_start+0x16c>)
    1728:	701a      	strb	r2, [r3, #0]
			return false;
    172a:	e7c6      	b.n	16ba <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    172c:	490d      	ldr	r1, [pc, #52]	; (1764 <sd_mmc_spi_adtc_start+0x17c>)
    172e:	2300      	movs	r3, #0
    1730:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    1732:	33ff      	adds	r3, #255	; 0xff
    1734:	2201      	movs	r2, #1
    1736:	4808      	ldr	r0, [pc, #32]	; (1758 <sd_mmc_spi_adtc_start+0x170>)
    1738:	4e09      	ldr	r6, [pc, #36]	; (1760 <sd_mmc_spi_adtc_start+0x178>)
    173a:	47b0      	blx	r6
    173c:	e7d0      	b.n	16e0 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    173e:	4e09      	ldr	r6, [pc, #36]	; (1764 <sd_mmc_spi_adtc_start+0x17c>)
    1740:	23ff      	movs	r3, #255	; 0xff
    1742:	2204      	movs	r2, #4
    1744:	0031      	movs	r1, r6
    1746:	4804      	ldr	r0, [pc, #16]	; (1758 <sd_mmc_spi_adtc_start+0x170>)
    1748:	4f05      	ldr	r7, [pc, #20]	; (1760 <sd_mmc_spi_adtc_start+0x178>)
    174a:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    174c:	6833      	ldr	r3, [r6, #0]
    174e:	ba1b      	rev	r3, r3
    1750:	6033      	str	r3, [r6, #0]
    1752:	e7c8      	b.n	16e6 <sd_mmc_spi_adtc_start+0xfe>
    1754:	20000107 	.word	0x20000107
    1758:	200000c4 	.word	0x200000c4
    175c:	00002531 	.word	0x00002531
    1760:	00002369 	.word	0x00002369
    1764:	2000010c 	.word	0x2000010c
    1768:	20000100 	.word	0x20000100
    176c:	20000108 	.word	0x20000108
    1770:	20000110 	.word	0x20000110
    1774:	00001269 	.word	0x00001269

00001778 <sd_mmc_spi_send_cmd>:
{
    1778:	b510      	push	{r4, lr}
    177a:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    177c:	2300      	movs	r3, #0
    177e:	9300      	str	r3, [sp, #0]
    1780:	2200      	movs	r2, #0
    1782:	4c02      	ldr	r4, [pc, #8]	; (178c <sd_mmc_spi_send_cmd+0x14>)
    1784:	47a0      	blx	r4
}
    1786:	b002      	add	sp, #8
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	000015e9 	.word	0x000015e9

00001790 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1790:	4b01      	ldr	r3, [pc, #4]	; (1798 <sd_mmc_spi_get_response+0x8>)
    1792:	6818      	ldr	r0, [r3, #0]
}
    1794:	4770      	bx	lr
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	2000010c 	.word	0x2000010c

0000179c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    179c:	b510      	push	{r4, lr}
    179e:	b084      	sub	sp, #16
    17a0:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    17a2:	2200      	movs	r2, #0
    17a4:	4b14      	ldr	r3, [pc, #80]	; (17f8 <sd_mmc_spi_read_word+0x5c>)
    17a6:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17a8:	4b14      	ldr	r3, [pc, #80]	; (17fc <sd_mmc_spi_read_word+0x60>)
    17aa:	8819      	ldrh	r1, [r3, #0]
    17ac:	4b14      	ldr	r3, [pc, #80]	; (1800 <sd_mmc_spi_read_word+0x64>)
    17ae:	6818      	ldr	r0, [r3, #0]
    17b0:	4b14      	ldr	r3, [pc, #80]	; (1804 <sd_mmc_spi_read_word+0x68>)
    17b2:	4798      	blx	r3
    17b4:	2900      	cmp	r1, #0
    17b6:	d103      	bne.n	17c0 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    17b8:	4b13      	ldr	r3, [pc, #76]	; (1808 <sd_mmc_spi_read_word+0x6c>)
    17ba:	4798      	blx	r3
    17bc:	2800      	cmp	r0, #0
    17be:	d010      	beq.n	17e2 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    17c0:	23ff      	movs	r3, #255	; 0xff
    17c2:	2204      	movs	r2, #4
    17c4:	a901      	add	r1, sp, #4
    17c6:	4811      	ldr	r0, [pc, #68]	; (180c <sd_mmc_spi_read_word+0x70>)
    17c8:	4c11      	ldr	r4, [pc, #68]	; (1810 <sd_mmc_spi_read_word+0x74>)
    17ca:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    17cc:	4b0c      	ldr	r3, [pc, #48]	; (1800 <sd_mmc_spi_read_word+0x64>)
    17ce:	681a      	ldr	r2, [r3, #0]
    17d0:	1d10      	adds	r0, r2, #4
    17d2:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17d4:	4b09      	ldr	r3, [pc, #36]	; (17fc <sd_mmc_spi_read_word+0x60>)
    17d6:	8819      	ldrh	r1, [r3, #0]
    17d8:	4b0a      	ldr	r3, [pc, #40]	; (1804 <sd_mmc_spi_read_word+0x68>)
    17da:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    17dc:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17de:	2900      	cmp	r1, #0
    17e0:	d001      	beq.n	17e6 <sd_mmc_spi_read_word+0x4a>
}
    17e2:	b004      	add	sp, #16
    17e4:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    17e6:	23ff      	movs	r3, #255	; 0xff
    17e8:	2202      	movs	r2, #2
    17ea:	a903      	add	r1, sp, #12
    17ec:	4807      	ldr	r0, [pc, #28]	; (180c <sd_mmc_spi_read_word+0x70>)
    17ee:	4c08      	ldr	r4, [pc, #32]	; (1810 <sd_mmc_spi_read_word+0x74>)
    17f0:	47a0      	blx	r4
	return true;
    17f2:	2001      	movs	r0, #1
    17f4:	e7f5      	b.n	17e2 <sd_mmc_spi_read_word+0x46>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	20000107 	.word	0x20000107
    17fc:	20000100 	.word	0x20000100
    1800:	20000110 	.word	0x20000110
    1804:	00005a19 	.word	0x00005a19
    1808:	00001345 	.word	0x00001345
    180c:	200000c4 	.word	0x200000c4
    1810:	00002369 	.word	0x00002369

00001814 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1814:	b5f0      	push	{r4, r5, r6, r7, lr}
    1816:	46de      	mov	lr, fp
    1818:	4657      	mov	r7, sl
    181a:	4646      	mov	r6, r8
    181c:	b5c0      	push	{r6, r7, lr}
    181e:	b082      	sub	sp, #8
    1820:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1822:	2200      	movs	r2, #0
    1824:	4b17      	ldr	r3, [pc, #92]	; (1884 <sd_mmc_spi_start_read_blocks+0x70>)
    1826:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1828:	1e4c      	subs	r4, r1, #1
    182a:	b2a4      	uxth	r4, r4
    182c:	2900      	cmp	r1, #0
    182e:	d026      	beq.n	187e <sd_mmc_spi_start_read_blocks+0x6a>
    1830:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    1832:	4b15      	ldr	r3, [pc, #84]	; (1888 <sd_mmc_spi_start_read_blocks+0x74>)
    1834:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1836:	4f15      	ldr	r7, [pc, #84]	; (188c <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1838:	47d0      	blx	sl
    183a:	4680      	mov	r8, r0
    183c:	2800      	cmp	r0, #0
    183e:	d017      	beq.n	1870 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1840:	883a      	ldrh	r2, [r7, #0]
    1842:	465b      	mov	r3, fp
    1844:	1999      	adds	r1, r3, r6
    1846:	23ff      	movs	r3, #255	; 0xff
    1848:	4811      	ldr	r0, [pc, #68]	; (1890 <sd_mmc_spi_start_read_blocks+0x7c>)
    184a:	4d12      	ldr	r5, [pc, #72]	; (1894 <sd_mmc_spi_start_read_blocks+0x80>)
    184c:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    184e:	883b      	ldrh	r3, [r7, #0]
    1850:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1852:	4a11      	ldr	r2, [pc, #68]	; (1898 <sd_mmc_spi_start_read_blocks+0x84>)
    1854:	6811      	ldr	r1, [r2, #0]
    1856:	468c      	mov	ip, r1
    1858:	4463      	add	r3, ip
    185a:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    185c:	23ff      	movs	r3, #255	; 0xff
    185e:	2202      	movs	r2, #2
    1860:	a901      	add	r1, sp, #4
    1862:	480b      	ldr	r0, [pc, #44]	; (1890 <sd_mmc_spi_start_read_blocks+0x7c>)
    1864:	47a8      	blx	r5
	while (nb_block--) {
    1866:	3c01      	subs	r4, #1
    1868:	b2a4      	uxth	r4, r4
    186a:	4b0c      	ldr	r3, [pc, #48]	; (189c <sd_mmc_spi_start_read_blocks+0x88>)
    186c:	429c      	cmp	r4, r3
    186e:	d1e3      	bne.n	1838 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    1870:	4640      	mov	r0, r8
    1872:	b002      	add	sp, #8
    1874:	bc1c      	pop	{r2, r3, r4}
    1876:	4690      	mov	r8, r2
    1878:	469a      	mov	sl, r3
    187a:	46a3      	mov	fp, r4
    187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    187e:	2301      	movs	r3, #1
    1880:	4698      	mov	r8, r3
    1882:	e7f5      	b.n	1870 <sd_mmc_spi_start_read_blocks+0x5c>
    1884:	20000107 	.word	0x20000107
    1888:	00001345 	.word	0x00001345
    188c:	20000100 	.word	0x20000100
    1890:	200000c4 	.word	0x200000c4
    1894:	00002369 	.word	0x00002369
    1898:	20000110 	.word	0x20000110
    189c:	0000ffff 	.word	0x0000ffff

000018a0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    18a0:	2001      	movs	r0, #1
    18a2:	4770      	bx	lr

000018a4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    18a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a6:	46c6      	mov	lr, r8
    18a8:	b500      	push	{lr}
    18aa:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    18ac:	2200      	movs	r2, #0
    18ae:	4b15      	ldr	r3, [pc, #84]	; (1904 <sd_mmc_spi_start_write_blocks+0x60>)
    18b0:	701a      	strb	r2, [r3, #0]
	pos = 0;
    18b2:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    18b4:	4f14      	ldr	r7, [pc, #80]	; (1908 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    18b6:	4e15      	ldr	r6, [pc, #84]	; (190c <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    18b8:	e000      	b.n	18bc <sd_mmc_spi_start_write_blocks+0x18>
{
    18ba:	0021      	movs	r1, r4
	while (nb_block--) {
    18bc:	1e4c      	subs	r4, r1, #1
    18be:	b2a4      	uxth	r4, r4
    18c0:	2900      	cmp	r1, #0
    18c2:	d01b      	beq.n	18fc <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    18c4:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    18c6:	8832      	ldrh	r2, [r6, #0]
    18c8:	4643      	mov	r3, r8
    18ca:	1959      	adds	r1, r3, r5
    18cc:	4810      	ldr	r0, [pc, #64]	; (1910 <sd_mmc_spi_start_write_blocks+0x6c>)
    18ce:	4b11      	ldr	r3, [pc, #68]	; (1914 <sd_mmc_spi_start_write_blocks+0x70>)
    18d0:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    18d2:	8833      	ldrh	r3, [r6, #0]
    18d4:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    18d6:	4a10      	ldr	r2, [pc, #64]	; (1918 <sd_mmc_spi_start_write_blocks+0x74>)
    18d8:	6811      	ldr	r1, [r2, #0]
    18da:	468c      	mov	ip, r1
    18dc:	4463      	add	r3, ip
    18de:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    18e0:	4b0e      	ldr	r3, [pc, #56]	; (191c <sd_mmc_spi_start_write_blocks+0x78>)
    18e2:	4798      	blx	r3
    18e4:	2800      	cmp	r0, #0
    18e6:	d00a      	beq.n	18fe <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    18e8:	2c00      	cmp	r4, #0
    18ea:	d0e6      	beq.n	18ba <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    18ec:	4b0c      	ldr	r3, [pc, #48]	; (1920 <sd_mmc_spi_start_write_blocks+0x7c>)
    18ee:	4798      	blx	r3
    18f0:	2800      	cmp	r0, #0
    18f2:	d1e2      	bne.n	18ba <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    18f4:	2205      	movs	r2, #5
    18f6:	4b03      	ldr	r3, [pc, #12]	; (1904 <sd_mmc_spi_start_write_blocks+0x60>)
    18f8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    18fa:	e000      	b.n	18fe <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    18fc:	2001      	movs	r0, #1
}
    18fe:	bc04      	pop	{r2}
    1900:	4690      	mov	r8, r2
    1902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1904:	20000107 	.word	0x20000107
    1908:	00001221 	.word	0x00001221
    190c:	20000100 	.word	0x20000100
    1910:	200000c4 	.word	0x200000c4
    1914:	00002531 	.word	0x00002531
    1918:	20000110 	.word	0x20000110
    191c:	000013b1 	.word	0x000013b1
    1920:	00001269 	.word	0x00001269

00001924 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1924:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1928:	4798      	blx	r3
    192a:	2800      	cmp	r0, #0
    192c:	d103      	bne.n	1936 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    192e:	2205      	movs	r2, #5
    1930:	4b03      	ldr	r3, [pc, #12]	; (1940 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    1932:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1934:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1936:	4b03      	ldr	r3, [pc, #12]	; (1944 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1938:	4798      	blx	r3
    193a:	e7fb      	b.n	1934 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    193c:	00001269 	.word	0x00001269
    1940:	20000107 	.word	0x20000107
    1944:	000012cd 	.word	0x000012cd

00001948 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    1948:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    194a:	2301      	movs	r3, #1
    194c:	2800      	cmp	r0, #0
    194e:	d001      	beq.n	1954 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1950:	0018      	movs	r0, r3
    1952:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1954:	4b01      	ldr	r3, [pc, #4]	; (195c <mem_test_unit_ready+0x14>)
    1956:	4798      	blx	r3
    1958:	0003      	movs	r3, r0
    195a:	e7f9      	b.n	1950 <mem_test_unit_ready+0x8>
    195c:	00001121 	.word	0x00001121

00001960 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1960:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1962:	2301      	movs	r3, #1
    1964:	2800      	cmp	r0, #0
    1966:	d001      	beq.n	196c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1968:	0018      	movs	r0, r3
    196a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    196c:	0008      	movs	r0, r1
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <mem_read_capacity+0x18>)
    1970:	4798      	blx	r3
    1972:	0003      	movs	r3, r0
    1974:	e7f8      	b.n	1968 <mem_read_capacity+0x8>
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	00001151 	.word	0x00001151

0000197c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    197c:	4243      	negs	r3, r0
    197e:	4158      	adcs	r0, r3
    1980:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1982:	4770      	bx	lr

00001984 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1984:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1986:	2301      	movs	r3, #1
    1988:	2800      	cmp	r0, #0
    198a:	d001      	beq.n	1990 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    198c:	0018      	movs	r0, r3
    198e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1990:	4b01      	ldr	r3, [pc, #4]	; (1998 <mem_wr_protect+0x14>)
    1992:	4798      	blx	r3
    1994:	0003      	movs	r3, r0
    1996:	e7f9      	b.n	198c <mem_wr_protect+0x8>
    1998:	00001161 	.word	0x00001161

0000199c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    199c:	b510      	push	{r4, lr}
    199e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    19a0:	2301      	movs	r3, #1
    19a2:	2800      	cmp	r0, #0
    19a4:	d001      	beq.n	19aa <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    19a6:	0018      	movs	r0, r3
    19a8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    19aa:	0011      	movs	r1, r2
    19ac:	0020      	movs	r0, r4
    19ae:	4b02      	ldr	r3, [pc, #8]	; (19b8 <memory_2_ram+0x1c>)
    19b0:	4798      	blx	r3
    19b2:	0003      	movs	r3, r0
    19b4:	e7f7      	b.n	19a6 <memory_2_ram+0xa>
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	000011b5 	.word	0x000011b5

000019bc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    19bc:	b510      	push	{r4, lr}
    19be:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    19c0:	2301      	movs	r3, #1
    19c2:	2800      	cmp	r0, #0
    19c4:	d001      	beq.n	19ca <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    19c6:	0018      	movs	r0, r3
    19c8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    19ca:	0011      	movs	r1, r2
    19cc:	0020      	movs	r0, r4
    19ce:	4b02      	ldr	r3, [pc, #8]	; (19d8 <ram_2_memory+0x1c>)
    19d0:	4798      	blx	r3
    19d2:	0003      	movs	r3, r0
    19d4:	e7f7      	b.n	19c6 <ram_2_memory+0xa>
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	0000120d 	.word	0x0000120d

000019dc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    19dc:	4b0c      	ldr	r3, [pc, #48]	; (1a10 <cpu_irq_enter_critical+0x34>)
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d106      	bne.n	19f2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19e4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    19e8:	2b00      	cmp	r3, #0
    19ea:	d007      	beq.n	19fc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    19ec:	2200      	movs	r2, #0
    19ee:	4b09      	ldr	r3, [pc, #36]	; (1a14 <cpu_irq_enter_critical+0x38>)
    19f0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    19f2:	4a07      	ldr	r2, [pc, #28]	; (1a10 <cpu_irq_enter_critical+0x34>)
    19f4:	6813      	ldr	r3, [r2, #0]
    19f6:	3301      	adds	r3, #1
    19f8:	6013      	str	r3, [r2, #0]
}
    19fa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    19fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    19fe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a02:	2200      	movs	r2, #0
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <cpu_irq_enter_critical+0x3c>)
    1a06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a08:	3201      	adds	r2, #1
    1a0a:	4b02      	ldr	r3, [pc, #8]	; (1a14 <cpu_irq_enter_critical+0x38>)
    1a0c:	701a      	strb	r2, [r3, #0]
    1a0e:	e7f0      	b.n	19f2 <cpu_irq_enter_critical+0x16>
    1a10:	20000118 	.word	0x20000118
    1a14:	2000011c 	.word	0x2000011c
    1a18:	20000009 	.word	0x20000009

00001a1c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a1c:	4b08      	ldr	r3, [pc, #32]	; (1a40 <cpu_irq_leave_critical+0x24>)
    1a1e:	681a      	ldr	r2, [r3, #0]
    1a20:	3a01      	subs	r2, #1
    1a22:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d109      	bne.n	1a3e <cpu_irq_leave_critical+0x22>
    1a2a:	4b06      	ldr	r3, [pc, #24]	; (1a44 <cpu_irq_leave_critical+0x28>)
    1a2c:	781b      	ldrb	r3, [r3, #0]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d005      	beq.n	1a3e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a32:	2201      	movs	r2, #1
    1a34:	4b04      	ldr	r3, [pc, #16]	; (1a48 <cpu_irq_leave_critical+0x2c>)
    1a36:	701a      	strb	r2, [r3, #0]
    1a38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a3c:	b662      	cpsie	i
	}
}
    1a3e:	4770      	bx	lr
    1a40:	20000118 	.word	0x20000118
    1a44:	2000011c 	.word	0x2000011c
    1a48:	20000009 	.word	0x20000009

00001a4c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a4c:	b500      	push	{lr}
    1a4e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a50:	ab01      	add	r3, sp, #4
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a56:	780a      	ldrb	r2, [r1, #0]
    1a58:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a5a:	784a      	ldrb	r2, [r1, #1]
    1a5c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a5e:	788a      	ldrb	r2, [r1, #2]
    1a60:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a62:	0019      	movs	r1, r3
    1a64:	4b01      	ldr	r3, [pc, #4]	; (1a6c <port_pin_set_config+0x20>)
    1a66:	4798      	blx	r3
}
    1a68:	b003      	add	sp, #12
    1a6a:	bd00      	pop	{pc}
    1a6c:	00003575 	.word	0x00003575

00001a70 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a70:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a72:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a74:	b25b      	sxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	dbfb      	blt.n	1a72 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1a7a:	8813      	ldrh	r3, [r2, #0]
    1a7c:	2102      	movs	r1, #2
    1a7e:	430b      	orrs	r3, r1
    1a80:	8013      	strh	r3, [r2, #0]
}
    1a82:	4770      	bx	lr

00001a84 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a84:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a86:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dbfb      	blt.n	1a86 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1a8e:	23c1      	movs	r3, #193	; 0xc1
    1a90:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1a92:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a94:	8813      	ldrh	r3, [r2, #0]
    1a96:	2102      	movs	r1, #2
    1a98:	438b      	bics	r3, r1
    1a9a:	8013      	strh	r3, [r2, #0]
}
    1a9c:	4770      	bx	lr
	...

00001aa0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1aa4:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1aa6:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <rtc_calendar_reset+0x20>)
    1aa8:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1aaa:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1aac:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1aae:	b25b      	sxtb	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	dbfb      	blt.n	1aac <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1ab4:	882b      	ldrh	r3, [r5, #0]
    1ab6:	2201      	movs	r2, #1
    1ab8:	4313      	orrs	r3, r2
    1aba:	802b      	strh	r3, [r5, #0]
}
    1abc:	bd70      	pop	{r4, r5, r6, pc}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	00001a85 	.word	0x00001a85

00001ac4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1ac4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1ac6:	88cb      	ldrh	r3, [r1, #6]
    1ac8:	88c2      	ldrh	r2, [r0, #6]
    1aca:	1a9a      	subs	r2, r3, r2
    1acc:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1ace:	794b      	ldrb	r3, [r1, #5]
    1ad0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1ad2:	790c      	ldrb	r4, [r1, #4]
    1ad4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1ad6:	4323      	orrs	r3, r4
    1ad8:	788c      	ldrb	r4, [r1, #2]
    1ada:	0324      	lsls	r4, r4, #12
    1adc:	4323      	orrs	r3, r4
    1ade:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1ae0:	7902      	ldrb	r2, [r0, #4]
    1ae2:	2a00      	cmp	r2, #0
    1ae4:	d105      	bne.n	1af2 <rtc_calendar_time_to_register_value+0x2e>
    1ae6:	78ca      	ldrb	r2, [r1, #3]
    1ae8:	2a00      	cmp	r2, #0
    1aea:	d002      	beq.n	1af2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1aec:	2280      	movs	r2, #128	; 0x80
    1aee:	0252      	lsls	r2, r2, #9
    1af0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1af2:	7848      	ldrb	r0, [r1, #1]
    1af4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1af6:	780a      	ldrb	r2, [r1, #0]
    1af8:	4310      	orrs	r0, r2
    1afa:	4318      	orrs	r0, r3

	return register_value;
}
    1afc:	bd10      	pop	{r4, pc}

00001afe <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1afe:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b00:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1b02:	88c4      	ldrh	r4, [r0, #6]
    1b04:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b06:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1b08:	018b      	lsls	r3, r1, #6
    1b0a:	0f1b      	lsrs	r3, r3, #28
    1b0c:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1b0e:	028b      	lsls	r3, r1, #10
    1b10:	0edb      	lsrs	r3, r3, #27
    1b12:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1b14:	7903      	ldrb	r3, [r0, #4]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d10c      	bne.n	1b34 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1b1a:	040b      	lsls	r3, r1, #16
    1b1c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1b1e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1b20:	03cb      	lsls	r3, r1, #15
    1b22:	0fdb      	lsrs	r3, r3, #31
    1b24:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1b26:	0988      	lsrs	r0, r1, #6
    1b28:	233f      	movs	r3, #63	; 0x3f
    1b2a:	4018      	ands	r0, r3
    1b2c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1b2e:	4019      	ands	r1, r3
    1b30:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1b32:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1b34:	03cb      	lsls	r3, r1, #15
    1b36:	0edb      	lsrs	r3, r3, #27
    1b38:	7093      	strb	r3, [r2, #2]
    1b3a:	e7f4      	b.n	1b26 <rtc_calendar_register_value_to_time+0x28>

00001b3c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1b3c:	b510      	push	{r4, lr}
    1b3e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b40:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1b42:	7941      	ldrb	r1, [r0, #5]
    1b44:	2900      	cmp	r1, #0
    1b46:	d006      	beq.n	1b56 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1b48:	8859      	ldrh	r1, [r3, #2]
    1b4a:	0449      	lsls	r1, r1, #17
    1b4c:	d50b      	bpl.n	1b66 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1b4e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1b50:	4b0a      	ldr	r3, [pc, #40]	; (1b7c <rtc_calendar_get_time+0x40>)
    1b52:	4798      	blx	r3
}
    1b54:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1b56:	490a      	ldr	r1, [pc, #40]	; (1b80 <rtc_calendar_get_time+0x44>)
    1b58:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b5a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b5c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b5e:	b249      	sxtb	r1, r1
    1b60:	2900      	cmp	r1, #0
    1b62:	dbfb      	blt.n	1b5c <rtc_calendar_get_time+0x20>
    1b64:	e7f3      	b.n	1b4e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1b66:	8859      	ldrh	r1, [r3, #2]
    1b68:	24c0      	movs	r4, #192	; 0xc0
    1b6a:	0224      	lsls	r4, r4, #8
    1b6c:	4321      	orrs	r1, r4
    1b6e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b70:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b72:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b74:	b249      	sxtb	r1, r1
    1b76:	2900      	cmp	r1, #0
    1b78:	dbfb      	blt.n	1b72 <rtc_calendar_get_time+0x36>
    1b7a:	e7e8      	b.n	1b4e <rtc_calendar_get_time+0x12>
    1b7c:	00001aff 	.word	0x00001aff
    1b80:	ffff8000 	.word	0xffff8000

00001b84 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1b84:	b570      	push	{r4, r5, r6, lr}
    1b86:	000d      	movs	r5, r1
    1b88:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1b8a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1b8c:	2a01      	cmp	r2, #1
    1b8e:	d901      	bls.n	1b94 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1b90:	0018      	movs	r0, r3
    1b92:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1b94:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <rtc_calendar_set_alarm+0x2c>)
    1b98:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b9a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1b9c:	b25b      	sxtb	r3, r3
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	dbfb      	blt.n	1b9a <rtc_calendar_set_alarm+0x16>
    1ba2:	00e4      	lsls	r4, r4, #3
    1ba4:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1ba6:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1ba8:	7a2b      	ldrb	r3, [r5, #8]
    1baa:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1bac:	2300      	movs	r3, #0
    1bae:	e7ef      	b.n	1b90 <rtc_calendar_set_alarm+0xc>
    1bb0:	00001ac5 	.word	0x00001ac5

00001bb4 <rtc_calendar_init>:
{
    1bb4:	b530      	push	{r4, r5, lr}
    1bb6:	b083      	sub	sp, #12
    1bb8:	0005      	movs	r5, r0
    1bba:	0014      	movs	r4, r2
	module->hw = hw;
    1bbc:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1bbe:	4a1c      	ldr	r2, [pc, #112]	; (1c30 <rtc_calendar_init+0x7c>)
    1bc0:	6993      	ldr	r3, [r2, #24]
    1bc2:	2120      	movs	r1, #32
    1bc4:	430b      	orrs	r3, r1
    1bc6:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1bc8:	a901      	add	r1, sp, #4
    1bca:	2302      	movs	r3, #2
    1bcc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1bce:	2004      	movs	r0, #4
    1bd0:	4b18      	ldr	r3, [pc, #96]	; (1c34 <rtc_calendar_init+0x80>)
    1bd2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1bd4:	2004      	movs	r0, #4
    1bd6:	4b18      	ldr	r3, [pc, #96]	; (1c38 <rtc_calendar_init+0x84>)
    1bd8:	4798      	blx	r3
	rtc_calendar_reset(module);
    1bda:	0028      	movs	r0, r5
    1bdc:	4b17      	ldr	r3, [pc, #92]	; (1c3c <rtc_calendar_init+0x88>)
    1bde:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1be0:	7923      	ldrb	r3, [r4, #4]
    1be2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1be4:	78e3      	ldrb	r3, [r4, #3]
    1be6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1be8:	88e3      	ldrh	r3, [r4, #6]
    1bea:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1bec:	4b14      	ldr	r3, [pc, #80]	; (1c40 <rtc_calendar_init+0x8c>)
    1bee:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1bf0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bf2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1bf4:	7921      	ldrb	r1, [r4, #4]
    1bf6:	2900      	cmp	r1, #0
    1bf8:	d017      	beq.n	1c2a <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bfa:	2108      	movs	r1, #8
    1bfc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1bfe:	78a1      	ldrb	r1, [r4, #2]
    1c00:	2900      	cmp	r1, #0
    1c02:	d001      	beq.n	1c08 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1c04:	2180      	movs	r1, #128	; 0x80
    1c06:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1c08:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1c0a:	78e3      	ldrb	r3, [r4, #3]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d004      	beq.n	1c1a <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1c10:	8853      	ldrh	r3, [r2, #2]
    1c12:	2180      	movs	r1, #128	; 0x80
    1c14:	01c9      	lsls	r1, r1, #7
    1c16:	430b      	orrs	r3, r1
    1c18:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1c1a:	0021      	movs	r1, r4
    1c1c:	3108      	adds	r1, #8
    1c1e:	2200      	movs	r2, #0
    1c20:	0028      	movs	r0, r5
    1c22:	4b08      	ldr	r3, [pc, #32]	; (1c44 <rtc_calendar_init+0x90>)
    1c24:	4798      	blx	r3
}
    1c26:	b003      	add	sp, #12
    1c28:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c2a:	2148      	movs	r1, #72	; 0x48
    1c2c:	430b      	orrs	r3, r1
    1c2e:	e7e6      	b.n	1bfe <rtc_calendar_init+0x4a>
    1c30:	40000400 	.word	0x40000400
    1c34:	0000347d 	.word	0x0000347d
    1c38:	000033f1 	.word	0x000033f1
    1c3c:	00001aa1 	.word	0x00001aa1
    1c40:	200009c8 	.word	0x200009c8
    1c44:	00001b85 	.word	0x00001b85

00001c48 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4a:	46de      	mov	lr, fp
    1c4c:	4657      	mov	r7, sl
    1c4e:	464e      	mov	r6, r9
    1c50:	4645      	mov	r5, r8
    1c52:	b5e0      	push	{r5, r6, r7, lr}
    1c54:	b087      	sub	sp, #28
    1c56:	4680      	mov	r8, r0
    1c58:	9104      	str	r1, [sp, #16]
    1c5a:	0016      	movs	r6, r2
    1c5c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1c5e:	2200      	movs	r2, #0
    1c60:	2300      	movs	r3, #0
    1c62:	2100      	movs	r1, #0
    1c64:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1c66:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1c68:	2001      	movs	r0, #1
    1c6a:	0021      	movs	r1, r4
    1c6c:	9600      	str	r6, [sp, #0]
    1c6e:	9701      	str	r7, [sp, #4]
    1c70:	465c      	mov	r4, fp
    1c72:	9403      	str	r4, [sp, #12]
    1c74:	4644      	mov	r4, r8
    1c76:	9405      	str	r4, [sp, #20]
    1c78:	e013      	b.n	1ca2 <long_division+0x5a>
    1c7a:	2420      	movs	r4, #32
    1c7c:	1a64      	subs	r4, r4, r1
    1c7e:	0005      	movs	r5, r0
    1c80:	40e5      	lsrs	r5, r4
    1c82:	46a8      	mov	r8, r5
    1c84:	e014      	b.n	1cb0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1c86:	9c00      	ldr	r4, [sp, #0]
    1c88:	9d01      	ldr	r5, [sp, #4]
    1c8a:	1b12      	subs	r2, r2, r4
    1c8c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1c8e:	465c      	mov	r4, fp
    1c90:	464d      	mov	r5, r9
    1c92:	432c      	orrs	r4, r5
    1c94:	46a3      	mov	fp, r4
    1c96:	9c03      	ldr	r4, [sp, #12]
    1c98:	4645      	mov	r5, r8
    1c9a:	432c      	orrs	r4, r5
    1c9c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1c9e:	3901      	subs	r1, #1
    1ca0:	d325      	bcc.n	1cee <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1ca2:	2420      	movs	r4, #32
    1ca4:	4264      	negs	r4, r4
    1ca6:	190c      	adds	r4, r1, r4
    1ca8:	d4e7      	bmi.n	1c7a <long_division+0x32>
    1caa:	0005      	movs	r5, r0
    1cac:	40a5      	lsls	r5, r4
    1cae:	46a8      	mov	r8, r5
    1cb0:	0004      	movs	r4, r0
    1cb2:	408c      	lsls	r4, r1
    1cb4:	46a1      	mov	r9, r4
		r = r << 1;
    1cb6:	1892      	adds	r2, r2, r2
    1cb8:	415b      	adcs	r3, r3
    1cba:	0014      	movs	r4, r2
    1cbc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1cbe:	9e05      	ldr	r6, [sp, #20]
    1cc0:	464f      	mov	r7, r9
    1cc2:	403e      	ands	r6, r7
    1cc4:	46b4      	mov	ip, r6
    1cc6:	9e04      	ldr	r6, [sp, #16]
    1cc8:	4647      	mov	r7, r8
    1cca:	403e      	ands	r6, r7
    1ccc:	46b2      	mov	sl, r6
    1cce:	4666      	mov	r6, ip
    1cd0:	4657      	mov	r7, sl
    1cd2:	433e      	orrs	r6, r7
    1cd4:	d003      	beq.n	1cde <long_division+0x96>
			r |= 0x01;
    1cd6:	0006      	movs	r6, r0
    1cd8:	4326      	orrs	r6, r4
    1cda:	0032      	movs	r2, r6
    1cdc:	002b      	movs	r3, r5
		if (r >= d) {
    1cde:	9c00      	ldr	r4, [sp, #0]
    1ce0:	9d01      	ldr	r5, [sp, #4]
    1ce2:	429d      	cmp	r5, r3
    1ce4:	d8db      	bhi.n	1c9e <long_division+0x56>
    1ce6:	d1ce      	bne.n	1c86 <long_division+0x3e>
    1ce8:	4294      	cmp	r4, r2
    1cea:	d8d8      	bhi.n	1c9e <long_division+0x56>
    1cec:	e7cb      	b.n	1c86 <long_division+0x3e>
    1cee:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1cf0:	4658      	mov	r0, fp
    1cf2:	0019      	movs	r1, r3
    1cf4:	b007      	add	sp, #28
    1cf6:	bc3c      	pop	{r2, r3, r4, r5}
    1cf8:	4690      	mov	r8, r2
    1cfa:	4699      	mov	r9, r3
    1cfc:	46a2      	mov	sl, r4
    1cfe:	46ab      	mov	fp, r5
    1d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d02 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d02:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d04:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d06:	2340      	movs	r3, #64	; 0x40
    1d08:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d0a:	4281      	cmp	r1, r0
    1d0c:	d202      	bcs.n	1d14 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d0e:	0018      	movs	r0, r3
    1d10:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d12:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d14:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d16:	1c63      	adds	r3, r4, #1
    1d18:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d1a:	4288      	cmp	r0, r1
    1d1c:	d9f9      	bls.n	1d12 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d1e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d20:	2cff      	cmp	r4, #255	; 0xff
    1d22:	d8f4      	bhi.n	1d0e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d24:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d26:	2300      	movs	r3, #0
    1d28:	e7f1      	b.n	1d0e <_sercom_get_sync_baud_val+0xc>
	...

00001d2c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2e:	b083      	sub	sp, #12
    1d30:	000f      	movs	r7, r1
    1d32:	0016      	movs	r6, r2
    1d34:	aa08      	add	r2, sp, #32
    1d36:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1d38:	0004      	movs	r4, r0
    1d3a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d3c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1d3e:	42bc      	cmp	r4, r7
    1d40:	d902      	bls.n	1d48 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1d42:	0010      	movs	r0, r2
    1d44:	b003      	add	sp, #12
    1d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d114      	bne.n	1d76 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1d4c:	0002      	movs	r2, r0
    1d4e:	0008      	movs	r0, r1
    1d50:	2100      	movs	r1, #0
    1d52:	4c19      	ldr	r4, [pc, #100]	; (1db8 <_sercom_get_async_baud_val+0x8c>)
    1d54:	47a0      	blx	r4
    1d56:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1d58:	003a      	movs	r2, r7
    1d5a:	2300      	movs	r3, #0
    1d5c:	2000      	movs	r0, #0
    1d5e:	4c17      	ldr	r4, [pc, #92]	; (1dbc <_sercom_get_async_baud_val+0x90>)
    1d60:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d62:	2200      	movs	r2, #0
    1d64:	2301      	movs	r3, #1
    1d66:	1a12      	subs	r2, r2, r0
    1d68:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d6a:	0c12      	lsrs	r2, r2, #16
    1d6c:	041b      	lsls	r3, r3, #16
    1d6e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d70:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1d72:	2200      	movs	r2, #0
    1d74:	e7e5      	b.n	1d42 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1d76:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d78:	2b01      	cmp	r3, #1
    1d7a:	d1f9      	bne.n	1d70 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1d7c:	000a      	movs	r2, r1
    1d7e:	2300      	movs	r3, #0
    1d80:	2100      	movs	r1, #0
    1d82:	4c0d      	ldr	r4, [pc, #52]	; (1db8 <_sercom_get_async_baud_val+0x8c>)
    1d84:	47a0      	blx	r4
    1d86:	0002      	movs	r2, r0
    1d88:	000b      	movs	r3, r1
    1d8a:	9200      	str	r2, [sp, #0]
    1d8c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1d8e:	0038      	movs	r0, r7
    1d90:	2100      	movs	r1, #0
    1d92:	4c0a      	ldr	r4, [pc, #40]	; (1dbc <_sercom_get_async_baud_val+0x90>)
    1d94:	47a0      	blx	r4
    1d96:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1d98:	2380      	movs	r3, #128	; 0x80
    1d9a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d9c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1d9e:	4298      	cmp	r0, r3
    1da0:	d8cf      	bhi.n	1d42 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1da2:	0f79      	lsrs	r1, r7, #29
    1da4:	00f8      	lsls	r0, r7, #3
    1da6:	9a00      	ldr	r2, [sp, #0]
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1dac:	00ea      	lsls	r2, r5, #3
    1dae:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1db0:	b2d2      	uxtb	r2, r2
    1db2:	0352      	lsls	r2, r2, #13
    1db4:	432a      	orrs	r2, r5
    1db6:	e7db      	b.n	1d70 <_sercom_get_async_baud_val+0x44>
    1db8:	00005bf9 	.word	0x00005bf9
    1dbc:	00001c49 	.word	0x00001c49

00001dc0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1dc0:	b510      	push	{r4, lr}
    1dc2:	b082      	sub	sp, #8
    1dc4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1dc6:	4b0e      	ldr	r3, [pc, #56]	; (1e00 <sercom_set_gclk_generator+0x40>)
    1dc8:	781b      	ldrb	r3, [r3, #0]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d007      	beq.n	1dde <sercom_set_gclk_generator+0x1e>
    1dce:	2900      	cmp	r1, #0
    1dd0:	d105      	bne.n	1dde <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1dd2:	4b0b      	ldr	r3, [pc, #44]	; (1e00 <sercom_set_gclk_generator+0x40>)
    1dd4:	785b      	ldrb	r3, [r3, #1]
    1dd6:	4283      	cmp	r3, r0
    1dd8:	d010      	beq.n	1dfc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1dda:	201d      	movs	r0, #29
    1ddc:	e00c      	b.n	1df8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1dde:	a901      	add	r1, sp, #4
    1de0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1de2:	2013      	movs	r0, #19
    1de4:	4b07      	ldr	r3, [pc, #28]	; (1e04 <sercom_set_gclk_generator+0x44>)
    1de6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1de8:	2013      	movs	r0, #19
    1dea:	4b07      	ldr	r3, [pc, #28]	; (1e08 <sercom_set_gclk_generator+0x48>)
    1dec:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1dee:	4b04      	ldr	r3, [pc, #16]	; (1e00 <sercom_set_gclk_generator+0x40>)
    1df0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1df2:	2201      	movs	r2, #1
    1df4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1df6:	2000      	movs	r0, #0
}
    1df8:	b002      	add	sp, #8
    1dfa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1dfc:	2000      	movs	r0, #0
    1dfe:	e7fb      	b.n	1df8 <sercom_set_gclk_generator+0x38>
    1e00:	20000120 	.word	0x20000120
    1e04:	0000347d 	.word	0x0000347d
    1e08:	000033f1 	.word	0x000033f1

00001e0c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e0c:	4b40      	ldr	r3, [pc, #256]	; (1f10 <_sercom_get_default_pad+0x104>)
    1e0e:	4298      	cmp	r0, r3
    1e10:	d031      	beq.n	1e76 <_sercom_get_default_pad+0x6a>
    1e12:	d90a      	bls.n	1e2a <_sercom_get_default_pad+0x1e>
    1e14:	4b3f      	ldr	r3, [pc, #252]	; (1f14 <_sercom_get_default_pad+0x108>)
    1e16:	4298      	cmp	r0, r3
    1e18:	d04d      	beq.n	1eb6 <_sercom_get_default_pad+0xaa>
    1e1a:	4b3f      	ldr	r3, [pc, #252]	; (1f18 <_sercom_get_default_pad+0x10c>)
    1e1c:	4298      	cmp	r0, r3
    1e1e:	d05a      	beq.n	1ed6 <_sercom_get_default_pad+0xca>
    1e20:	4b3e      	ldr	r3, [pc, #248]	; (1f1c <_sercom_get_default_pad+0x110>)
    1e22:	4298      	cmp	r0, r3
    1e24:	d037      	beq.n	1e96 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e26:	2000      	movs	r0, #0
}
    1e28:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e2a:	4b3d      	ldr	r3, [pc, #244]	; (1f20 <_sercom_get_default_pad+0x114>)
    1e2c:	4298      	cmp	r0, r3
    1e2e:	d00c      	beq.n	1e4a <_sercom_get_default_pad+0x3e>
    1e30:	4b3c      	ldr	r3, [pc, #240]	; (1f24 <_sercom_get_default_pad+0x118>)
    1e32:	4298      	cmp	r0, r3
    1e34:	d1f7      	bne.n	1e26 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e36:	2901      	cmp	r1, #1
    1e38:	d017      	beq.n	1e6a <_sercom_get_default_pad+0x5e>
    1e3a:	2900      	cmp	r1, #0
    1e3c:	d05d      	beq.n	1efa <_sercom_get_default_pad+0xee>
    1e3e:	2902      	cmp	r1, #2
    1e40:	d015      	beq.n	1e6e <_sercom_get_default_pad+0x62>
    1e42:	2903      	cmp	r1, #3
    1e44:	d015      	beq.n	1e72 <_sercom_get_default_pad+0x66>
	return 0;
    1e46:	2000      	movs	r0, #0
    1e48:	e7ee      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e4a:	2901      	cmp	r1, #1
    1e4c:	d007      	beq.n	1e5e <_sercom_get_default_pad+0x52>
    1e4e:	2900      	cmp	r1, #0
    1e50:	d051      	beq.n	1ef6 <_sercom_get_default_pad+0xea>
    1e52:	2902      	cmp	r1, #2
    1e54:	d005      	beq.n	1e62 <_sercom_get_default_pad+0x56>
    1e56:	2903      	cmp	r1, #3
    1e58:	d005      	beq.n	1e66 <_sercom_get_default_pad+0x5a>
	return 0;
    1e5a:	2000      	movs	r0, #0
    1e5c:	e7e4      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e5e:	4832      	ldr	r0, [pc, #200]	; (1f28 <_sercom_get_default_pad+0x11c>)
    1e60:	e7e2      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e62:	4832      	ldr	r0, [pc, #200]	; (1f2c <_sercom_get_default_pad+0x120>)
    1e64:	e7e0      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e66:	4832      	ldr	r0, [pc, #200]	; (1f30 <_sercom_get_default_pad+0x124>)
    1e68:	e7de      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e6a:	4832      	ldr	r0, [pc, #200]	; (1f34 <_sercom_get_default_pad+0x128>)
    1e6c:	e7dc      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e6e:	4832      	ldr	r0, [pc, #200]	; (1f38 <_sercom_get_default_pad+0x12c>)
    1e70:	e7da      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e72:	4832      	ldr	r0, [pc, #200]	; (1f3c <_sercom_get_default_pad+0x130>)
    1e74:	e7d8      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e76:	2901      	cmp	r1, #1
    1e78:	d007      	beq.n	1e8a <_sercom_get_default_pad+0x7e>
    1e7a:	2900      	cmp	r1, #0
    1e7c:	d03f      	beq.n	1efe <_sercom_get_default_pad+0xf2>
    1e7e:	2902      	cmp	r1, #2
    1e80:	d005      	beq.n	1e8e <_sercom_get_default_pad+0x82>
    1e82:	2903      	cmp	r1, #3
    1e84:	d005      	beq.n	1e92 <_sercom_get_default_pad+0x86>
	return 0;
    1e86:	2000      	movs	r0, #0
    1e88:	e7ce      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e8a:	482d      	ldr	r0, [pc, #180]	; (1f40 <_sercom_get_default_pad+0x134>)
    1e8c:	e7cc      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e8e:	482d      	ldr	r0, [pc, #180]	; (1f44 <_sercom_get_default_pad+0x138>)
    1e90:	e7ca      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e92:	482d      	ldr	r0, [pc, #180]	; (1f48 <_sercom_get_default_pad+0x13c>)
    1e94:	e7c8      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1e96:	2901      	cmp	r1, #1
    1e98:	d007      	beq.n	1eaa <_sercom_get_default_pad+0x9e>
    1e9a:	2900      	cmp	r1, #0
    1e9c:	d031      	beq.n	1f02 <_sercom_get_default_pad+0xf6>
    1e9e:	2902      	cmp	r1, #2
    1ea0:	d005      	beq.n	1eae <_sercom_get_default_pad+0xa2>
    1ea2:	2903      	cmp	r1, #3
    1ea4:	d005      	beq.n	1eb2 <_sercom_get_default_pad+0xa6>
	return 0;
    1ea6:	2000      	movs	r0, #0
    1ea8:	e7be      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eaa:	4828      	ldr	r0, [pc, #160]	; (1f4c <_sercom_get_default_pad+0x140>)
    1eac:	e7bc      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1eae:	4828      	ldr	r0, [pc, #160]	; (1f50 <_sercom_get_default_pad+0x144>)
    1eb0:	e7ba      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1eb2:	4828      	ldr	r0, [pc, #160]	; (1f54 <_sercom_get_default_pad+0x148>)
    1eb4:	e7b8      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1eb6:	2901      	cmp	r1, #1
    1eb8:	d007      	beq.n	1eca <_sercom_get_default_pad+0xbe>
    1eba:	2900      	cmp	r1, #0
    1ebc:	d023      	beq.n	1f06 <_sercom_get_default_pad+0xfa>
    1ebe:	2902      	cmp	r1, #2
    1ec0:	d005      	beq.n	1ece <_sercom_get_default_pad+0xc2>
    1ec2:	2903      	cmp	r1, #3
    1ec4:	d005      	beq.n	1ed2 <_sercom_get_default_pad+0xc6>
	return 0;
    1ec6:	2000      	movs	r0, #0
    1ec8:	e7ae      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eca:	4823      	ldr	r0, [pc, #140]	; (1f58 <_sercom_get_default_pad+0x14c>)
    1ecc:	e7ac      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1ece:	4823      	ldr	r0, [pc, #140]	; (1f5c <_sercom_get_default_pad+0x150>)
    1ed0:	e7aa      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1ed2:	4823      	ldr	r0, [pc, #140]	; (1f60 <_sercom_get_default_pad+0x154>)
    1ed4:	e7a8      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1ed6:	2901      	cmp	r1, #1
    1ed8:	d007      	beq.n	1eea <_sercom_get_default_pad+0xde>
    1eda:	2900      	cmp	r1, #0
    1edc:	d015      	beq.n	1f0a <_sercom_get_default_pad+0xfe>
    1ede:	2902      	cmp	r1, #2
    1ee0:	d005      	beq.n	1eee <_sercom_get_default_pad+0xe2>
    1ee2:	2903      	cmp	r1, #3
    1ee4:	d005      	beq.n	1ef2 <_sercom_get_default_pad+0xe6>
	return 0;
    1ee6:	2000      	movs	r0, #0
    1ee8:	e79e      	b.n	1e28 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eea:	481e      	ldr	r0, [pc, #120]	; (1f64 <_sercom_get_default_pad+0x158>)
    1eec:	e79c      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1eee:	481e      	ldr	r0, [pc, #120]	; (1f68 <_sercom_get_default_pad+0x15c>)
    1ef0:	e79a      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1ef2:	481e      	ldr	r0, [pc, #120]	; (1f6c <_sercom_get_default_pad+0x160>)
    1ef4:	e798      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1ef6:	481e      	ldr	r0, [pc, #120]	; (1f70 <_sercom_get_default_pad+0x164>)
    1ef8:	e796      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1efa:	2003      	movs	r0, #3
    1efc:	e794      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1efe:	481d      	ldr	r0, [pc, #116]	; (1f74 <_sercom_get_default_pad+0x168>)
    1f00:	e792      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1f02:	481d      	ldr	r0, [pc, #116]	; (1f78 <_sercom_get_default_pad+0x16c>)
    1f04:	e790      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1f06:	481d      	ldr	r0, [pc, #116]	; (1f7c <_sercom_get_default_pad+0x170>)
    1f08:	e78e      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1f0a:	481d      	ldr	r0, [pc, #116]	; (1f80 <_sercom_get_default_pad+0x174>)
    1f0c:	e78c      	b.n	1e28 <_sercom_get_default_pad+0x1c>
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	42001000 	.word	0x42001000
    1f14:	42001800 	.word	0x42001800
    1f18:	42001c00 	.word	0x42001c00
    1f1c:	42001400 	.word	0x42001400
    1f20:	42000800 	.word	0x42000800
    1f24:	42000c00 	.word	0x42000c00
    1f28:	00050003 	.word	0x00050003
    1f2c:	00060003 	.word	0x00060003
    1f30:	00070003 	.word	0x00070003
    1f34:	00010003 	.word	0x00010003
    1f38:	001e0003 	.word	0x001e0003
    1f3c:	001f0003 	.word	0x001f0003
    1f40:	00090003 	.word	0x00090003
    1f44:	000a0003 	.word	0x000a0003
    1f48:	000b0003 	.word	0x000b0003
    1f4c:	00110003 	.word	0x00110003
    1f50:	00120003 	.word	0x00120003
    1f54:	00130003 	.word	0x00130003
    1f58:	000d0003 	.word	0x000d0003
    1f5c:	000e0003 	.word	0x000e0003
    1f60:	000f0003 	.word	0x000f0003
    1f64:	00170003 	.word	0x00170003
    1f68:	00180003 	.word	0x00180003
    1f6c:	00190003 	.word	0x00190003
    1f70:	00040003 	.word	0x00040003
    1f74:	00080003 	.word	0x00080003
    1f78:	00100003 	.word	0x00100003
    1f7c:	000c0003 	.word	0x000c0003
    1f80:	00160003 	.word	0x00160003

00001f84 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f84:	b530      	push	{r4, r5, lr}
    1f86:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f88:	4b0b      	ldr	r3, [pc, #44]	; (1fb8 <_sercom_get_sercom_inst_index+0x34>)
    1f8a:	466a      	mov	r2, sp
    1f8c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f8e:	c232      	stmia	r2!, {r1, r4, r5}
    1f90:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f92:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f94:	9b00      	ldr	r3, [sp, #0]
    1f96:	4283      	cmp	r3, r0
    1f98:	d00b      	beq.n	1fb2 <_sercom_get_sercom_inst_index+0x2e>
    1f9a:	2301      	movs	r3, #1
    1f9c:	009a      	lsls	r2, r3, #2
    1f9e:	4669      	mov	r1, sp
    1fa0:	5852      	ldr	r2, [r2, r1]
    1fa2:	4282      	cmp	r2, r0
    1fa4:	d006      	beq.n	1fb4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fa6:	3301      	adds	r3, #1
    1fa8:	2b06      	cmp	r3, #6
    1faa:	d1f7      	bne.n	1f9c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1fac:	2000      	movs	r0, #0
}
    1fae:	b007      	add	sp, #28
    1fb0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fb2:	2300      	movs	r3, #0
			return i;
    1fb4:	b2d8      	uxtb	r0, r3
    1fb6:	e7fa      	b.n	1fae <_sercom_get_sercom_inst_index+0x2a>
    1fb8:	00006db0 	.word	0x00006db0

00001fbc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1fbc:	4770      	bx	lr
	...

00001fc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1fc2:	4b0a      	ldr	r3, [pc, #40]	; (1fec <_sercom_set_handler+0x2c>)
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d10c      	bne.n	1fe4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fca:	4f09      	ldr	r7, [pc, #36]	; (1ff0 <_sercom_set_handler+0x30>)
    1fcc:	4e09      	ldr	r6, [pc, #36]	; (1ff4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1fce:	4d0a      	ldr	r5, [pc, #40]	; (1ff8 <_sercom_set_handler+0x38>)
    1fd0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fd2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1fd4:	195a      	adds	r2, r3, r5
    1fd6:	6014      	str	r4, [r2, #0]
    1fd8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fda:	2b18      	cmp	r3, #24
    1fdc:	d1f9      	bne.n	1fd2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1fde:	2201      	movs	r2, #1
    1fe0:	4b02      	ldr	r3, [pc, #8]	; (1fec <_sercom_set_handler+0x2c>)
    1fe2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1fe4:	0080      	lsls	r0, r0, #2
    1fe6:	4b02      	ldr	r3, [pc, #8]	; (1ff0 <_sercom_set_handler+0x30>)
    1fe8:	50c1      	str	r1, [r0, r3]
}
    1fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fec:	20000122 	.word	0x20000122
    1ff0:	20000124 	.word	0x20000124
    1ff4:	00001fbd 	.word	0x00001fbd
    1ff8:	200009cc 	.word	0x200009cc

00001ffc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ffc:	b500      	push	{lr}
    1ffe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2000:	2309      	movs	r3, #9
    2002:	466a      	mov	r2, sp
    2004:	7013      	strb	r3, [r2, #0]
    2006:	3301      	adds	r3, #1
    2008:	7053      	strb	r3, [r2, #1]
    200a:	3301      	adds	r3, #1
    200c:	7093      	strb	r3, [r2, #2]
    200e:	3301      	adds	r3, #1
    2010:	70d3      	strb	r3, [r2, #3]
    2012:	3301      	adds	r3, #1
    2014:	7113      	strb	r3, [r2, #4]
    2016:	3301      	adds	r3, #1
    2018:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    201a:	4b03      	ldr	r3, [pc, #12]	; (2028 <STACK_SIZE+0x28>)
    201c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    201e:	466b      	mov	r3, sp
    2020:	5618      	ldrsb	r0, [r3, r0]
}
    2022:	b003      	add	sp, #12
    2024:	bd00      	pop	{pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	00001f85 	.word	0x00001f85

0000202c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    202c:	b510      	push	{r4, lr}
    202e:	4b02      	ldr	r3, [pc, #8]	; (2038 <SERCOM0_Handler+0xc>)
    2030:	681b      	ldr	r3, [r3, #0]
    2032:	2000      	movs	r0, #0
    2034:	4798      	blx	r3
    2036:	bd10      	pop	{r4, pc}
    2038:	20000124 	.word	0x20000124

0000203c <SERCOM1_Handler>:
    203c:	b510      	push	{r4, lr}
    203e:	4b02      	ldr	r3, [pc, #8]	; (2048 <SERCOM1_Handler+0xc>)
    2040:	685b      	ldr	r3, [r3, #4]
    2042:	2001      	movs	r0, #1
    2044:	4798      	blx	r3
    2046:	bd10      	pop	{r4, pc}
    2048:	20000124 	.word	0x20000124

0000204c <SERCOM2_Handler>:
    204c:	b510      	push	{r4, lr}
    204e:	4b02      	ldr	r3, [pc, #8]	; (2058 <SERCOM2_Handler+0xc>)
    2050:	689b      	ldr	r3, [r3, #8]
    2052:	2002      	movs	r0, #2
    2054:	4798      	blx	r3
    2056:	bd10      	pop	{r4, pc}
    2058:	20000124 	.word	0x20000124

0000205c <SERCOM3_Handler>:
    205c:	b510      	push	{r4, lr}
    205e:	4b02      	ldr	r3, [pc, #8]	; (2068 <SERCOM3_Handler+0xc>)
    2060:	68db      	ldr	r3, [r3, #12]
    2062:	2003      	movs	r0, #3
    2064:	4798      	blx	r3
    2066:	bd10      	pop	{r4, pc}
    2068:	20000124 	.word	0x20000124

0000206c <SERCOM4_Handler>:
    206c:	b510      	push	{r4, lr}
    206e:	4b02      	ldr	r3, [pc, #8]	; (2078 <SERCOM4_Handler+0xc>)
    2070:	691b      	ldr	r3, [r3, #16]
    2072:	2004      	movs	r0, #4
    2074:	4798      	blx	r3
    2076:	bd10      	pop	{r4, pc}
    2078:	20000124 	.word	0x20000124

0000207c <SERCOM5_Handler>:
    207c:	b510      	push	{r4, lr}
    207e:	4b02      	ldr	r3, [pc, #8]	; (2088 <SERCOM5_Handler+0xc>)
    2080:	695b      	ldr	r3, [r3, #20]
    2082:	2005      	movs	r0, #5
    2084:	4798      	blx	r3
    2086:	bd10      	pop	{r4, pc}
    2088:	20000124 	.word	0x20000124

0000208c <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    208c:	b570      	push	{r4, r5, r6, lr}
    208e:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2090:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2092:	0020      	movs	r0, r4
    2094:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <spi_reset+0x44>)
    2096:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2098:	231f      	movs	r3, #31
    209a:	4018      	ands	r0, r3
    209c:	3b1e      	subs	r3, #30
    209e:	4083      	lsls	r3, r0
    20a0:	2280      	movs	r2, #128	; 0x80
    20a2:	490c      	ldr	r1, [pc, #48]	; (20d4 <spi_reset+0x48>)
    20a4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20a6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20a8:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    20aa:	2b00      	cmp	r3, #0
    20ac:	d1fc      	bne.n	20a8 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    20ae:	338f      	adds	r3, #143	; 0x8f
    20b0:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    20b2:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20b4:	6823      	ldr	r3, [r4, #0]
    20b6:	2202      	movs	r2, #2
    20b8:	4393      	bics	r3, r2
    20ba:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20bc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20be:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    20c0:	2b00      	cmp	r3, #0
    20c2:	d1fc      	bne.n	20be <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    20c4:	6823      	ldr	r3, [r4, #0]
    20c6:	2201      	movs	r2, #1
    20c8:	4313      	orrs	r3, r2
    20ca:	6023      	str	r3, [r4, #0]
}
    20cc:	bd70      	pop	{r4, r5, r6, pc}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	00001ffd 	.word	0x00001ffd
    20d4:	e000e100 	.word	0xe000e100

000020d8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
    20da:	b082      	sub	sp, #8
    20dc:	0005      	movs	r5, r0
    20de:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    20e0:	2200      	movs	r2, #0
    20e2:	466b      	mov	r3, sp
    20e4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    20e6:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    20e8:	0030      	movs	r0, r6
    20ea:	4b24      	ldr	r3, [pc, #144]	; (217c <spi_set_baudrate+0xa4>)
    20ec:	4798      	blx	r3
    20ee:	231f      	movs	r3, #31
    20f0:	4018      	ands	r0, r3
    20f2:	3b1e      	subs	r3, #30
    20f4:	4083      	lsls	r3, r0
    20f6:	2280      	movs	r2, #128	; 0x80
    20f8:	4921      	ldr	r1, [pc, #132]	; (2180 <spi_set_baudrate+0xa8>)
    20fa:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20fc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20fe:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2100:	2b00      	cmp	r3, #0
    2102:	d1fc      	bne.n	20fe <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2104:	338f      	adds	r3, #143	; 0x8f
    2106:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2108:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    210a:	6833      	ldr	r3, [r6, #0]
    210c:	2202      	movs	r2, #2
    210e:	4393      	bics	r3, r2
    2110:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2112:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2114:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2116:	2b00      	cmp	r3, #0
    2118:	d1fc      	bne.n	2114 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    211a:	4b1a      	ldr	r3, [pc, #104]	; (2184 <spi_set_baudrate+0xac>)
    211c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    211e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2120:	b2c0      	uxtb	r0, r0
    2122:	4b19      	ldr	r3, [pc, #100]	; (2188 <spi_set_baudrate+0xb0>)
    2124:	4798      	blx	r3
    2126:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2128:	466b      	mov	r3, sp
    212a:	1d9a      	adds	r2, r3, #6
    212c:	0020      	movs	r0, r4
    212e:	4b17      	ldr	r3, [pc, #92]	; (218c <spi_set_baudrate+0xb4>)
    2130:	4798      	blx	r3
    2132:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    2134:	d003      	beq.n	213e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    2136:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    2138:	0020      	movs	r0, r4
    213a:	b002      	add	sp, #8
    213c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    213e:	466b      	mov	r3, sp
    2140:	3306      	adds	r3, #6
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2146:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2148:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    214a:	2b00      	cmp	r3, #0
    214c:	d1fc      	bne.n	2148 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    214e:	0030      	movs	r0, r6
    2150:	4b0a      	ldr	r3, [pc, #40]	; (217c <spi_set_baudrate+0xa4>)
    2152:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2154:	231f      	movs	r3, #31
    2156:	4018      	ands	r0, r3
    2158:	3b1e      	subs	r3, #30
    215a:	4083      	lsls	r3, r0
    215c:	4a08      	ldr	r2, [pc, #32]	; (2180 <spi_set_baudrate+0xa8>)
    215e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2160:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2162:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2164:	2b00      	cmp	r3, #0
    2166:	d1fc      	bne.n	2162 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2168:	6833      	ldr	r3, [r6, #0]
    216a:	2202      	movs	r2, #2
    216c:	4313      	orrs	r3, r2
    216e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2170:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2172:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2174:	2b00      	cmp	r3, #0
    2176:	d1fc      	bne.n	2172 <spi_set_baudrate+0x9a>
    2178:	e7de      	b.n	2138 <spi_set_baudrate+0x60>
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	00001ffd 	.word	0x00001ffd
    2180:	e000e100 	.word	0xe000e100
    2184:	00001f85 	.word	0x00001f85
    2188:	00003499 	.word	0x00003499
    218c:	00001d03 	.word	0x00001d03

00002190 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	b08b      	sub	sp, #44	; 0x2c
    2194:	0005      	movs	r5, r0
    2196:	000c      	movs	r4, r1
    2198:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    219a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    219c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    219e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    21a0:	079b      	lsls	r3, r3, #30
    21a2:	d501      	bpl.n	21a8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    21a4:	b00b      	add	sp, #44	; 0x2c
    21a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    21a8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    21aa:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    21ac:	07db      	lsls	r3, r3, #31
    21ae:	d4f9      	bmi.n	21a4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    21b0:	0008      	movs	r0, r1
    21b2:	4b60      	ldr	r3, [pc, #384]	; (2334 <spi_init+0x1a4>)
    21b4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    21b6:	4a60      	ldr	r2, [pc, #384]	; (2338 <spi_init+0x1a8>)
    21b8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    21ba:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    21bc:	2301      	movs	r3, #1
    21be:	40bb      	lsls	r3, r7
    21c0:	430b      	orrs	r3, r1
    21c2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    21c4:	a909      	add	r1, sp, #36	; 0x24
    21c6:	2724      	movs	r7, #36	; 0x24
    21c8:	5df3      	ldrb	r3, [r6, r7]
    21ca:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    21cc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    21ce:	b2c3      	uxtb	r3, r0
    21d0:	9301      	str	r3, [sp, #4]
    21d2:	0018      	movs	r0, r3
    21d4:	4b59      	ldr	r3, [pc, #356]	; (233c <spi_init+0x1ac>)
    21d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    21d8:	9801      	ldr	r0, [sp, #4]
    21da:	4b59      	ldr	r3, [pc, #356]	; (2340 <spi_init+0x1b0>)
    21dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    21de:	5df0      	ldrb	r0, [r6, r7]
    21e0:	2100      	movs	r1, #0
    21e2:	4b58      	ldr	r3, [pc, #352]	; (2344 <spi_init+0x1b4>)
    21e4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    21e6:	7833      	ldrb	r3, [r6, #0]
    21e8:	2b01      	cmp	r3, #1
    21ea:	d038      	beq.n	225e <spi_init+0xce>
    21ec:	002b      	movs	r3, r5
    21ee:	330c      	adds	r3, #12
    21f0:	0029      	movs	r1, r5
    21f2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    21f4:	2200      	movs	r2, #0
    21f6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    21f8:	428b      	cmp	r3, r1
    21fa:	d1fc      	bne.n	21f6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    21fc:	2300      	movs	r3, #0
    21fe:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2200:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2202:	2400      	movs	r4, #0
    2204:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2206:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2208:	3336      	adds	r3, #54	; 0x36
    220a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    220c:	3301      	adds	r3, #1
    220e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2210:	3301      	adds	r3, #1
    2212:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    2214:	3b35      	subs	r3, #53	; 0x35
    2216:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2218:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    221a:	6828      	ldr	r0, [r5, #0]
    221c:	4b45      	ldr	r3, [pc, #276]	; (2334 <spi_init+0x1a4>)
    221e:	4798      	blx	r3
    2220:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2222:	4949      	ldr	r1, [pc, #292]	; (2348 <spi_init+0x1b8>)
    2224:	4b49      	ldr	r3, [pc, #292]	; (234c <spi_init+0x1bc>)
    2226:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2228:	00bf      	lsls	r7, r7, #2
    222a:	4b49      	ldr	r3, [pc, #292]	; (2350 <spi_init+0x1c0>)
    222c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    222e:	682f      	ldr	r7, [r5, #0]
    2230:	ab04      	add	r3, sp, #16
    2232:	2280      	movs	r2, #128	; 0x80
    2234:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2236:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2238:	3a7f      	subs	r2, #127	; 0x7f
    223a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    223c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    223e:	7833      	ldrb	r3, [r6, #0]
    2240:	2b00      	cmp	r3, #0
    2242:	d102      	bne.n	224a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2244:	2200      	movs	r2, #0
    2246:	ab04      	add	r3, sp, #16
    2248:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    224a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    224c:	9305      	str	r3, [sp, #20]
    224e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2250:	9306      	str	r3, [sp, #24]
    2252:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2254:	9307      	str	r3, [sp, #28]
    2256:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2258:	9308      	str	r3, [sp, #32]
    225a:	2400      	movs	r4, #0
    225c:	e00b      	b.n	2276 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    225e:	6823      	ldr	r3, [r4, #0]
    2260:	220c      	movs	r2, #12
    2262:	4313      	orrs	r3, r2
    2264:	6023      	str	r3, [r4, #0]
    2266:	e7c1      	b.n	21ec <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2268:	0038      	movs	r0, r7
    226a:	4b3a      	ldr	r3, [pc, #232]	; (2354 <spi_init+0x1c4>)
    226c:	4798      	blx	r3
    226e:	e00a      	b.n	2286 <spi_init+0xf6>
    2270:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2272:	2c04      	cmp	r4, #4
    2274:	d010      	beq.n	2298 <spi_init+0x108>
    2276:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2278:	00a3      	lsls	r3, r4, #2
    227a:	aa02      	add	r2, sp, #8
    227c:	200c      	movs	r0, #12
    227e:	1812      	adds	r2, r2, r0
    2280:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2282:	2800      	cmp	r0, #0
    2284:	d0f0      	beq.n	2268 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    2286:	1c43      	adds	r3, r0, #1
    2288:	d0f2      	beq.n	2270 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    228a:	a904      	add	r1, sp, #16
    228c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    228e:	0c00      	lsrs	r0, r0, #16
    2290:	b2c0      	uxtb	r0, r0
    2292:	4b31      	ldr	r3, [pc, #196]	; (2358 <spi_init+0x1c8>)
    2294:	4798      	blx	r3
    2296:	e7eb      	b.n	2270 <spi_init+0xe0>
	module->mode             = config->mode;
    2298:	7833      	ldrb	r3, [r6, #0]
    229a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    229c:	7c33      	ldrb	r3, [r6, #16]
    229e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    22a0:	7cb3      	ldrb	r3, [r6, #18]
    22a2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    22a4:	7d33      	ldrb	r3, [r6, #20]
    22a6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    22a8:	2200      	movs	r2, #0
    22aa:	ab02      	add	r3, sp, #8
    22ac:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    22ae:	7833      	ldrb	r3, [r6, #0]
    22b0:	2b01      	cmp	r3, #1
    22b2:	d028      	beq.n	2306 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    22b4:	6873      	ldr	r3, [r6, #4]
    22b6:	68b2      	ldr	r2, [r6, #8]
    22b8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    22ba:	68f2      	ldr	r2, [r6, #12]
    22bc:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    22be:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    22c0:	7c72      	ldrb	r2, [r6, #17]
    22c2:	2a00      	cmp	r2, #0
    22c4:	d103      	bne.n	22ce <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    22c6:	4a25      	ldr	r2, [pc, #148]	; (235c <spi_init+0x1cc>)
    22c8:	7892      	ldrb	r2, [r2, #2]
    22ca:	0792      	lsls	r2, r2, #30
    22cc:	d501      	bpl.n	22d2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    22d2:	7cb2      	ldrb	r2, [r6, #18]
    22d4:	2a00      	cmp	r2, #0
    22d6:	d002      	beq.n	22de <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    22d8:	2280      	movs	r2, #128	; 0x80
    22da:	0292      	lsls	r2, r2, #10
    22dc:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    22de:	7cf2      	ldrb	r2, [r6, #19]
    22e0:	2a00      	cmp	r2, #0
    22e2:	d002      	beq.n	22ea <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    22e4:	2280      	movs	r2, #128	; 0x80
    22e6:	0092      	lsls	r2, r2, #2
    22e8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    22ea:	7d32      	ldrb	r2, [r6, #20]
    22ec:	2a00      	cmp	r2, #0
    22ee:	d002      	beq.n	22f6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0192      	lsls	r2, r2, #6
    22f4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    22f6:	683a      	ldr	r2, [r7, #0]
    22f8:	4313      	orrs	r3, r2
    22fa:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	430b      	orrs	r3, r1
    2300:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    2302:	2000      	movs	r0, #0
    2304:	e74e      	b.n	21a4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2306:	6828      	ldr	r0, [r5, #0]
    2308:	4b0a      	ldr	r3, [pc, #40]	; (2334 <spi_init+0x1a4>)
    230a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    230c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    230e:	b2c0      	uxtb	r0, r0
    2310:	4b13      	ldr	r3, [pc, #76]	; (2360 <spi_init+0x1d0>)
    2312:	4798      	blx	r3
    2314:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2316:	ab02      	add	r3, sp, #8
    2318:	1d9a      	adds	r2, r3, #6
    231a:	69b0      	ldr	r0, [r6, #24]
    231c:	4b11      	ldr	r3, [pc, #68]	; (2364 <spi_init+0x1d4>)
    231e:	4798      	blx	r3
    2320:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2322:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2324:	2b00      	cmp	r3, #0
    2326:	d000      	beq.n	232a <spi_init+0x19a>
    2328:	e73c      	b.n	21a4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    232a:	ab02      	add	r3, sp, #8
    232c:	3306      	adds	r3, #6
    232e:	781b      	ldrb	r3, [r3, #0]
    2330:	733b      	strb	r3, [r7, #12]
    2332:	e7bf      	b.n	22b4 <spi_init+0x124>
    2334:	00001f85 	.word	0x00001f85
    2338:	40000400 	.word	0x40000400
    233c:	0000347d 	.word	0x0000347d
    2340:	000033f1 	.word	0x000033f1
    2344:	00001dc1 	.word	0x00001dc1
    2348:	000025fd 	.word	0x000025fd
    234c:	00001fc1 	.word	0x00001fc1
    2350:	200009cc 	.word	0x200009cc
    2354:	00001e0d 	.word	0x00001e0d
    2358:	00003575 	.word	0x00003575
    235c:	41002000 	.word	0x41002000
    2360:	00003499 	.word	0x00003499
    2364:	00001d03 	.word	0x00001d03

00002368 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2368:	b5f0      	push	{r4, r5, r6, r7, lr}
    236a:	46d6      	mov	lr, sl
    236c:	4647      	mov	r7, r8
    236e:	b580      	push	{r7, lr}
    2370:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2372:	2438      	movs	r4, #56	; 0x38
    2374:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2376:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2378:	2d05      	cmp	r5, #5
    237a:	d002      	beq.n	2382 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    237c:	3412      	adds	r4, #18
	if (length == 0) {
    237e:	2a00      	cmp	r2, #0
    2380:	d105      	bne.n	238e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2382:	0020      	movs	r0, r4
    2384:	b003      	add	sp, #12
    2386:	bc0c      	pop	{r2, r3}
    2388:	4690      	mov	r8, r2
    238a:	469a      	mov	sl, r3
    238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    238e:	79c4      	ldrb	r4, [r0, #7]
    2390:	2c00      	cmp	r4, #0
    2392:	d144      	bne.n	241e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2394:	341c      	adds	r4, #28
    2396:	e7f4      	b.n	2382 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2398:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    239a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    239c:	423c      	tst	r4, r7
    239e:	d0fc      	beq.n	239a <spi_read_buffer_wait+0x32>
    23a0:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    23a2:	423c      	tst	r4, r7
    23a4:	d01a      	beq.n	23dc <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    23a6:	4644      	mov	r4, r8
    23a8:	62ac      	str	r4, [r5, #40]	; 0x28
    23aa:	e017      	b.n	23dc <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23ac:	7984      	ldrb	r4, [r0, #6]
    23ae:	2c01      	cmp	r4, #1
    23b0:	d026      	beq.n	2400 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    23b2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    23b4:	b2ec      	uxtb	r4, r5
    23b6:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    23b8:	9c01      	ldr	r4, [sp, #4]
    23ba:	2c00      	cmp	r4, #0
    23bc:	d13a      	bne.n	2434 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    23be:	1c75      	adds	r5, r6, #1
    23c0:	b2ad      	uxth	r5, r5
    23c2:	4664      	mov	r4, ip
    23c4:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23c6:	7984      	ldrb	r4, [r0, #6]
    23c8:	2c01      	cmp	r4, #1
    23ca:	d01e      	beq.n	240a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    23cc:	002e      	movs	r6, r5
	while (length--) {
    23ce:	3a01      	subs	r2, #1
    23d0:	b292      	uxth	r2, r2
    23d2:	4552      	cmp	r2, sl
    23d4:	d01f      	beq.n	2416 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    23d6:	7944      	ldrb	r4, [r0, #5]
    23d8:	2c01      	cmp	r4, #1
    23da:	d0dd      	beq.n	2398 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23dc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23de:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    23e0:	421c      	tst	r4, r3
    23e2:	d0fc      	beq.n	23de <spi_read_buffer_wait+0x76>
    23e4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    23e6:	421c      	tst	r4, r3
    23e8:	d017      	beq.n	241a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23ea:	8b6c      	ldrh	r4, [r5, #26]
    23ec:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    23ee:	2400      	movs	r4, #0
    23f0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23f2:	4664      	mov	r4, ip
    23f4:	421c      	tst	r4, r3
    23f6:	d0d9      	beq.n	23ac <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    23f8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    23fa:	241e      	movs	r4, #30
    23fc:	9401      	str	r4, [sp, #4]
    23fe:	e7d5      	b.n	23ac <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2400:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2402:	05e4      	lsls	r4, r4, #23
    2404:	0de4      	lsrs	r4, r4, #23
    2406:	46a4      	mov	ip, r4
    2408:	e7d6      	b.n	23b8 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    240a:	3602      	adds	r6, #2
    240c:	b2b6      	uxth	r6, r6
    240e:	4664      	mov	r4, ip
    2410:	0a24      	lsrs	r4, r4, #8
    2412:	554c      	strb	r4, [r1, r5]
    2414:	e7db      	b.n	23ce <spi_read_buffer_wait+0x66>
    2416:	9c01      	ldr	r4, [sp, #4]
    2418:	e7b3      	b.n	2382 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    241a:	2410      	movs	r4, #16
    241c:	e7b1      	b.n	2382 <spi_read_buffer_wait+0x1a>
	while (length--) {
    241e:	3a01      	subs	r2, #1
    2420:	b292      	uxth	r2, r2
    2422:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2424:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2426:	05db      	lsls	r3, r3, #23
    2428:	0ddb      	lsrs	r3, r3, #23
    242a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    242c:	2304      	movs	r3, #4
	while (length--) {
    242e:	4c02      	ldr	r4, [pc, #8]	; (2438 <spi_read_buffer_wait+0xd0>)
    2430:	46a2      	mov	sl, r4
    2432:	e7d0      	b.n	23d6 <spi_read_buffer_wait+0x6e>
    2434:	9c01      	ldr	r4, [sp, #4]
    2436:	e7a4      	b.n	2382 <spi_read_buffer_wait+0x1a>
    2438:	0000ffff 	.word	0x0000ffff

0000243c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    243c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    243e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2440:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2442:	2c01      	cmp	r4, #1
    2444:	d001      	beq.n	244a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2446:	0018      	movs	r0, r3
    2448:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    244a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    244c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    244e:	2c00      	cmp	r4, #0
    2450:	d1f9      	bne.n	2446 <spi_select_slave+0xa>
		if (select) {
    2452:	2a00      	cmp	r2, #0
    2454:	d058      	beq.n	2508 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2456:	784b      	ldrb	r3, [r1, #1]
    2458:	2b00      	cmp	r3, #0
    245a:	d044      	beq.n	24e6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    245c:	6803      	ldr	r3, [r0, #0]
    245e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2460:	07db      	lsls	r3, r3, #31
    2462:	d410      	bmi.n	2486 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2464:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2466:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2468:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    246a:	2900      	cmp	r1, #0
    246c:	d104      	bne.n	2478 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    246e:	0953      	lsrs	r3, r2, #5
    2470:	01db      	lsls	r3, r3, #7
    2472:	492e      	ldr	r1, [pc, #184]	; (252c <spi_select_slave+0xf0>)
    2474:	468c      	mov	ip, r1
    2476:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2478:	211f      	movs	r1, #31
    247a:	4011      	ands	r1, r2
    247c:	2201      	movs	r2, #1
    247e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2480:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2482:	2305      	movs	r3, #5
    2484:	e7df      	b.n	2446 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2486:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2488:	09d4      	lsrs	r4, r2, #7
		return NULL;
    248a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    248c:	2c00      	cmp	r4, #0
    248e:	d104      	bne.n	249a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2490:	0953      	lsrs	r3, r2, #5
    2492:	01db      	lsls	r3, r3, #7
    2494:	4c25      	ldr	r4, [pc, #148]	; (252c <spi_select_slave+0xf0>)
    2496:	46a4      	mov	ip, r4
    2498:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    249a:	241f      	movs	r4, #31
    249c:	4014      	ands	r4, r2
    249e:	2201      	movs	r2, #1
    24a0:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    24a2:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    24a4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    24a8:	07d2      	lsls	r2, r2, #31
    24aa:	d501      	bpl.n	24b0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    24ac:	788a      	ldrb	r2, [r1, #2]
    24ae:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    24b0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    24b2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    24b4:	2a00      	cmp	r2, #0
    24b6:	d1c6      	bne.n	2446 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    24b8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    24ba:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24bc:	7e13      	ldrb	r3, [r2, #24]
    24be:	420b      	tst	r3, r1
    24c0:	d0fc      	beq.n	24bc <spi_select_slave+0x80>
    24c2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    24c4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    24c6:	0749      	lsls	r1, r1, #29
    24c8:	d5bd      	bpl.n	2446 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24ca:	8b53      	ldrh	r3, [r2, #26]
    24cc:	075b      	lsls	r3, r3, #29
    24ce:	d501      	bpl.n	24d4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    24d0:	2304      	movs	r3, #4
    24d2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24d4:	7983      	ldrb	r3, [r0, #6]
    24d6:	2b01      	cmp	r3, #1
    24d8:	d002      	beq.n	24e0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24dc:	2300      	movs	r3, #0
    24de:	e7b2      	b.n	2446 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24e2:	2300      	movs	r3, #0
    24e4:	e7af      	b.n	2446 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24e6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24ec:	2900      	cmp	r1, #0
    24ee:	d104      	bne.n	24fa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    24f0:	0953      	lsrs	r3, r2, #5
    24f2:	01db      	lsls	r3, r3, #7
    24f4:	490d      	ldr	r1, [pc, #52]	; (252c <spi_select_slave+0xf0>)
    24f6:	468c      	mov	ip, r1
    24f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24fa:	211f      	movs	r1, #31
    24fc:	4011      	ands	r1, r2
    24fe:	2201      	movs	r2, #1
    2500:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2502:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2504:	2300      	movs	r3, #0
    2506:	e79e      	b.n	2446 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2508:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    250a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    250c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    250e:	2900      	cmp	r1, #0
    2510:	d104      	bne.n	251c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2512:	0953      	lsrs	r3, r2, #5
    2514:	01db      	lsls	r3, r3, #7
    2516:	4905      	ldr	r1, [pc, #20]	; (252c <spi_select_slave+0xf0>)
    2518:	468c      	mov	ip, r1
    251a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    251c:	211f      	movs	r1, #31
    251e:	4011      	ands	r1, r2
    2520:	2201      	movs	r2, #1
    2522:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2524:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2526:	2300      	movs	r3, #0
    2528:	e78d      	b.n	2446 <spi_select_slave+0xa>
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	41004400 	.word	0x41004400

00002530 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2530:	b5f0      	push	{r4, r5, r6, r7, lr}
    2532:	46de      	mov	lr, fp
    2534:	4657      	mov	r7, sl
    2536:	464e      	mov	r6, r9
    2538:	4645      	mov	r5, r8
    253a:	b5e0      	push	{r5, r6, r7, lr}
    253c:	b083      	sub	sp, #12
    253e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2540:	2338      	movs	r3, #56	; 0x38
    2542:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2544:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2546:	2c05      	cmp	r4, #5
    2548:	d002      	beq.n	2550 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    254a:	3312      	adds	r3, #18
	if (length == 0) {
    254c:	2a00      	cmp	r2, #0
    254e:	d14b      	bne.n	25e8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2550:	0018      	movs	r0, r3
    2552:	b003      	add	sp, #12
    2554:	bc3c      	pop	{r2, r3, r4, r5}
    2556:	4690      	mov	r8, r2
    2558:	4699      	mov	r9, r3
    255a:	46a2      	mov	sl, r4
    255c:	46ab      	mov	fp, r5
    255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    2560:	3702      	adds	r7, #2
    2562:	b2bf      	uxth	r7, r7
    2564:	4641      	mov	r1, r8
    2566:	4653      	mov	r3, sl
    2568:	5c59      	ldrb	r1, [r3, r1]
    256a:	0209      	lsls	r1, r1, #8
    256c:	465b      	mov	r3, fp
    256e:	430b      	orrs	r3, r1
    2570:	e018      	b.n	25a4 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2572:	7983      	ldrb	r3, [r0, #6]
    2574:	2b01      	cmp	r3, #1
    2576:	d02a      	beq.n	25ce <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2578:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    257a:	3e01      	subs	r6, #1
    257c:	b2b6      	uxth	r6, r6
    257e:	4566      	cmp	r6, ip
    2580:	d027      	beq.n	25d2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2582:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2584:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    2586:	4223      	tst	r3, r4
    2588:	d0fc      	beq.n	2584 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    258a:	1c7b      	adds	r3, r7, #1
    258c:	b29b      	uxth	r3, r3
    258e:	4698      	mov	r8, r3
    2590:	4653      	mov	r3, sl
    2592:	5ddb      	ldrb	r3, [r3, r7]
    2594:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2596:	7981      	ldrb	r1, [r0, #6]
    2598:	2901      	cmp	r1, #1
    259a:	d0e1      	beq.n	2560 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    259c:	4669      	mov	r1, sp
    259e:	80cb      	strh	r3, [r1, #6]
    25a0:	88cb      	ldrh	r3, [r1, #6]
    25a2:	4647      	mov	r7, r8
    25a4:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    25a6:	4221      	tst	r1, r4
    25a8:	d002      	beq.n	25b0 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    25aa:	05db      	lsls	r3, r3, #23
    25ac:	0ddb      	lsrs	r3, r3, #23
    25ae:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    25b0:	79c3      	ldrb	r3, [r0, #7]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d0e1      	beq.n	257a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25b6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    25b8:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    25ba:	422b      	tst	r3, r5
    25bc:	d0fc      	beq.n	25b8 <spi_write_buffer_wait+0x88>
    25be:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    25c0:	422b      	tst	r3, r5
    25c2:	d0da      	beq.n	257a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25c4:	8b53      	ldrh	r3, [r2, #26]
    25c6:	422b      	tst	r3, r5
    25c8:	d0d3      	beq.n	2572 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25ca:	8355      	strh	r5, [r2, #26]
    25cc:	e7d1      	b.n	2572 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    25ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25d0:	e7d3      	b.n	257a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    25d2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    25d4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    25d6:	2a01      	cmp	r2, #1
    25d8:	d1ba      	bne.n	2550 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25da:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    25dc:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25de:	7e0b      	ldrb	r3, [r1, #24]
    25e0:	4213      	tst	r3, r2
    25e2:	d0fc      	beq.n	25de <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    25e4:	2300      	movs	r3, #0
    25e6:	e7b3      	b.n	2550 <spi_write_buffer_wait+0x20>
	while (length--) {
    25e8:	3a01      	subs	r2, #1
    25ea:	b296      	uxth	r6, r2
    25ec:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    25ee:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    25f0:	2504      	movs	r5, #4
	while (length--) {
    25f2:	4b01      	ldr	r3, [pc, #4]	; (25f8 <spi_write_buffer_wait+0xc8>)
    25f4:	469c      	mov	ip, r3
    25f6:	e7c4      	b.n	2582 <spi_write_buffer_wait+0x52>
    25f8:	0000ffff 	.word	0x0000ffff

000025fc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    25fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    25fe:	0080      	lsls	r0, r0, #2
    2600:	4b70      	ldr	r3, [pc, #448]	; (27c4 <_spi_interrupt_handler+0x1c8>)
    2602:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2604:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2606:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2608:	5ce7      	ldrb	r7, [r4, r3]
    260a:	2236      	movs	r2, #54	; 0x36
    260c:	5ca2      	ldrb	r2, [r4, r2]
    260e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2610:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    2612:	7db5      	ldrb	r5, [r6, #22]
    2614:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2616:	07eb      	lsls	r3, r5, #31
    2618:	d502      	bpl.n	2620 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    261a:	7963      	ldrb	r3, [r4, #5]
    261c:	2b01      	cmp	r3, #1
    261e:	d01e      	beq.n	265e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2620:	076b      	lsls	r3, r5, #29
    2622:	d511      	bpl.n	2648 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2624:	8b73      	ldrh	r3, [r6, #26]
    2626:	075b      	lsls	r3, r3, #29
    2628:	d55a      	bpl.n	26e0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    262a:	7a63      	ldrb	r3, [r4, #9]
    262c:	2b01      	cmp	r3, #1
    262e:	d008      	beq.n	2642 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2630:	221e      	movs	r2, #30
    2632:	2338      	movs	r3, #56	; 0x38
    2634:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2636:	3b35      	subs	r3, #53	; 0x35
    2638:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    263a:	3302      	adds	r3, #2
    263c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    263e:	073b      	lsls	r3, r7, #28
    2640:	d44a      	bmi.n	26d8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2642:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2644:	2304      	movs	r3, #4
    2646:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2648:	07ab      	lsls	r3, r5, #30
    264a:	d503      	bpl.n	2654 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    264c:	7963      	ldrb	r3, [r4, #5]
    264e:	2b01      	cmp	r3, #1
    2650:	d100      	bne.n	2654 <_spi_interrupt_handler+0x58>
    2652:	e097      	b.n	2784 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2654:	b26d      	sxtb	r5, r5
    2656:	2d00      	cmp	r5, #0
    2658:	da00      	bge.n	265c <_spi_interrupt_handler+0x60>
    265a:	e0a9      	b.n	27b0 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    265c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    265e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2660:	2b00      	cmp	r3, #0
    2662:	d022      	beq.n	26aa <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2664:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2666:	2b00      	cmp	r3, #0
    2668:	d0da      	beq.n	2620 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    266a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    266c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    266e:	7813      	ldrb	r3, [r2, #0]
    2670:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    2672:	1c50      	adds	r0, r2, #1
    2674:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2676:	79a0      	ldrb	r0, [r4, #6]
    2678:	2801      	cmp	r0, #1
    267a:	d027      	beq.n	26cc <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    267c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    267e:	05db      	lsls	r3, r3, #23
    2680:	0ddb      	lsrs	r3, r3, #23
    2682:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2684:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2686:	3b01      	subs	r3, #1
    2688:	b29b      	uxth	r3, r3
    268a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    268c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    268e:	b29b      	uxth	r3, r3
    2690:	2b00      	cmp	r3, #0
    2692:	d1c5      	bne.n	2620 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2694:	3301      	adds	r3, #1
    2696:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2698:	7a63      	ldrb	r3, [r4, #9]
    269a:	2b01      	cmp	r3, #1
    269c:	d1c0      	bne.n	2620 <_spi_interrupt_handler+0x24>
    269e:	79e3      	ldrb	r3, [r4, #7]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d1bd      	bne.n	2620 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    26a4:	3302      	adds	r3, #2
    26a6:	75b3      	strb	r3, [r6, #22]
    26a8:	e7ba      	b.n	2620 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    26aa:	4b47      	ldr	r3, [pc, #284]	; (27c8 <_spi_interrupt_handler+0x1cc>)
    26ac:	881b      	ldrh	r3, [r3, #0]
    26ae:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    26b0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    26b2:	3b01      	subs	r3, #1
    26b4:	b29b      	uxth	r3, r3
    26b6:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    26b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    26ba:	b29b      	uxth	r3, r3
    26bc:	2b00      	cmp	r3, #0
    26be:	d101      	bne.n	26c4 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    26c0:	3301      	adds	r3, #1
    26c2:	7533      	strb	r3, [r6, #20]
		if (0
    26c4:	7963      	ldrb	r3, [r4, #5]
    26c6:	2b01      	cmp	r3, #1
    26c8:	d0cc      	beq.n	2664 <_spi_interrupt_handler+0x68>
    26ca:	e7a9      	b.n	2620 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    26cc:	7850      	ldrb	r0, [r2, #1]
    26ce:	0200      	lsls	r0, r0, #8
    26d0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    26d2:	3202      	adds	r2, #2
    26d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    26d6:	e7d2      	b.n	267e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    26d8:	0020      	movs	r0, r4
    26da:	69a3      	ldr	r3, [r4, #24]
    26dc:	4798      	blx	r3
    26de:	e7b0      	b.n	2642 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    26e0:	7a63      	ldrb	r3, [r4, #9]
    26e2:	2b01      	cmp	r3, #1
    26e4:	d028      	beq.n	2738 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26e6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    26e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ea:	05db      	lsls	r3, r3, #23
    26ec:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    26ee:	b2da      	uxtb	r2, r3
    26f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    26f2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    26f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26f6:	1c51      	adds	r1, r2, #1
    26f8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26fa:	79a1      	ldrb	r1, [r4, #6]
    26fc:	2901      	cmp	r1, #1
    26fe:	d034      	beq.n	276a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    2700:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2702:	3b01      	subs	r3, #1
    2704:	b29b      	uxth	r3, r3
    2706:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2708:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    270a:	b29b      	uxth	r3, r3
    270c:	2b00      	cmp	r3, #0
    270e:	d000      	beq.n	2712 <_spi_interrupt_handler+0x116>
    2710:	e79a      	b.n	2648 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    2712:	2200      	movs	r2, #0
    2714:	3338      	adds	r3, #56	; 0x38
    2716:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2718:	3b34      	subs	r3, #52	; 0x34
    271a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    271c:	7a63      	ldrb	r3, [r4, #9]
    271e:	2b02      	cmp	r3, #2
    2720:	d029      	beq.n	2776 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    2722:	7a63      	ldrb	r3, [r4, #9]
    2724:	2b00      	cmp	r3, #0
    2726:	d000      	beq.n	272a <_spi_interrupt_handler+0x12e>
    2728:	e78e      	b.n	2648 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    272a:	07bb      	lsls	r3, r7, #30
    272c:	d400      	bmi.n	2730 <_spi_interrupt_handler+0x134>
    272e:	e78b      	b.n	2648 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2730:	0020      	movs	r0, r4
    2732:	6923      	ldr	r3, [r4, #16]
    2734:	4798      	blx	r3
    2736:	e787      	b.n	2648 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2738:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    273c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    273e:	3b01      	subs	r3, #1
    2740:	b29b      	uxth	r3, r3
    2742:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2744:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2746:	b29b      	uxth	r3, r3
    2748:	2b00      	cmp	r3, #0
    274a:	d000      	beq.n	274e <_spi_interrupt_handler+0x152>
    274c:	e77c      	b.n	2648 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    274e:	3304      	adds	r3, #4
    2750:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    2752:	2200      	movs	r2, #0
    2754:	3334      	adds	r3, #52	; 0x34
    2756:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2758:	3b35      	subs	r3, #53	; 0x35
    275a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    275c:	07fb      	lsls	r3, r7, #31
    275e:	d400      	bmi.n	2762 <_spi_interrupt_handler+0x166>
    2760:	e772      	b.n	2648 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2762:	0020      	movs	r0, r4
    2764:	68e3      	ldr	r3, [r4, #12]
    2766:	4798      	blx	r3
    2768:	e76e      	b.n	2648 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    276a:	0a1b      	lsrs	r3, r3, #8
    276c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    276e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2770:	3301      	adds	r3, #1
    2772:	62a3      	str	r3, [r4, #40]	; 0x28
    2774:	e7c4      	b.n	2700 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2776:	077b      	lsls	r3, r7, #29
    2778:	d400      	bmi.n	277c <_spi_interrupt_handler+0x180>
    277a:	e765      	b.n	2648 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    277c:	0020      	movs	r0, r4
    277e:	6963      	ldr	r3, [r4, #20]
    2780:	4798      	blx	r3
    2782:	e761      	b.n	2648 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2784:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2786:	2b01      	cmp	r3, #1
    2788:	d000      	beq.n	278c <_spi_interrupt_handler+0x190>
    278a:	e763      	b.n	2654 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    278c:	79e3      	ldrb	r3, [r4, #7]
    278e:	2b00      	cmp	r3, #0
    2790:	d000      	beq.n	2794 <_spi_interrupt_handler+0x198>
    2792:	e75f      	b.n	2654 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2794:	3302      	adds	r3, #2
    2796:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2798:	3301      	adds	r3, #1
    279a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    279c:	2200      	movs	r2, #0
    279e:	3335      	adds	r3, #53	; 0x35
    27a0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    27a2:	07fb      	lsls	r3, r7, #31
    27a4:	d400      	bmi.n	27a8 <_spi_interrupt_handler+0x1ac>
    27a6:	e755      	b.n	2654 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    27a8:	0020      	movs	r0, r4
    27aa:	68e3      	ldr	r3, [r4, #12]
    27ac:	4798      	blx	r3
    27ae:	e751      	b.n	2654 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    27b0:	2380      	movs	r3, #128	; 0x80
    27b2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    27b4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    27b6:	067b      	lsls	r3, r7, #25
    27b8:	d400      	bmi.n	27bc <_spi_interrupt_handler+0x1c0>
    27ba:	e74f      	b.n	265c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    27bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27be:	0020      	movs	r0, r4
    27c0:	4798      	blx	r3
}
    27c2:	e74b      	b.n	265c <_spi_interrupt_handler+0x60>
    27c4:	200009cc 	.word	0x200009cc
    27c8:	200009e4 	.word	0x200009e4

000027cc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    27cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ce:	46de      	mov	lr, fp
    27d0:	4657      	mov	r7, sl
    27d2:	464e      	mov	r6, r9
    27d4:	4645      	mov	r5, r8
    27d6:	b5e0      	push	{r5, r6, r7, lr}
    27d8:	b091      	sub	sp, #68	; 0x44
    27da:	0005      	movs	r5, r0
    27dc:	000c      	movs	r4, r1
    27de:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    27e0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27e2:	0008      	movs	r0, r1
    27e4:	4bbc      	ldr	r3, [pc, #752]	; (2ad8 <usart_init+0x30c>)
    27e6:	4798      	blx	r3
    27e8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27ea:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    27ec:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27ee:	07db      	lsls	r3, r3, #31
    27f0:	d506      	bpl.n	2800 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    27f2:	b011      	add	sp, #68	; 0x44
    27f4:	bc3c      	pop	{r2, r3, r4, r5}
    27f6:	4690      	mov	r8, r2
    27f8:	4699      	mov	r9, r3
    27fa:	46a2      	mov	sl, r4
    27fc:	46ab      	mov	fp, r5
    27fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2800:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2802:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2804:	079b      	lsls	r3, r3, #30
    2806:	d4f4      	bmi.n	27f2 <usart_init+0x26>
    2808:	49b4      	ldr	r1, [pc, #720]	; (2adc <usart_init+0x310>)
    280a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    280c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    280e:	2301      	movs	r3, #1
    2810:	40bb      	lsls	r3, r7
    2812:	4303      	orrs	r3, r0
    2814:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2816:	a90f      	add	r1, sp, #60	; 0x3c
    2818:	272d      	movs	r7, #45	; 0x2d
    281a:	5df3      	ldrb	r3, [r6, r7]
    281c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    281e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2820:	b2d3      	uxtb	r3, r2
    2822:	9302      	str	r3, [sp, #8]
    2824:	0018      	movs	r0, r3
    2826:	4bae      	ldr	r3, [pc, #696]	; (2ae0 <usart_init+0x314>)
    2828:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    282a:	9802      	ldr	r0, [sp, #8]
    282c:	4bad      	ldr	r3, [pc, #692]	; (2ae4 <usart_init+0x318>)
    282e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2830:	5df0      	ldrb	r0, [r6, r7]
    2832:	2100      	movs	r1, #0
    2834:	4bac      	ldr	r3, [pc, #688]	; (2ae8 <usart_init+0x31c>)
    2836:	4798      	blx	r3
	module->character_size = config->character_size;
    2838:	7af3      	ldrb	r3, [r6, #11]
    283a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    283c:	2324      	movs	r3, #36	; 0x24
    283e:	5cf3      	ldrb	r3, [r6, r3]
    2840:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2842:	2325      	movs	r3, #37	; 0x25
    2844:	5cf3      	ldrb	r3, [r6, r3]
    2846:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2848:	7ef3      	ldrb	r3, [r6, #27]
    284a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    284c:	7f33      	ldrb	r3, [r6, #28]
    284e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2850:	682b      	ldr	r3, [r5, #0]
    2852:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2854:	0018      	movs	r0, r3
    2856:	4ba0      	ldr	r3, [pc, #640]	; (2ad8 <usart_init+0x30c>)
    2858:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    285a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    285c:	2200      	movs	r2, #0
    285e:	230e      	movs	r3, #14
    2860:	a906      	add	r1, sp, #24
    2862:	468c      	mov	ip, r1
    2864:	4463      	add	r3, ip
    2866:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2868:	8a32      	ldrh	r2, [r6, #16]
    286a:	9202      	str	r2, [sp, #8]
    286c:	2380      	movs	r3, #128	; 0x80
    286e:	01db      	lsls	r3, r3, #7
    2870:	429a      	cmp	r2, r3
    2872:	d100      	bne.n	2876 <usart_init+0xaa>
    2874:	e09e      	b.n	29b4 <usart_init+0x1e8>
    2876:	d90f      	bls.n	2898 <usart_init+0xcc>
    2878:	23c0      	movs	r3, #192	; 0xc0
    287a:	01db      	lsls	r3, r3, #7
    287c:	9a02      	ldr	r2, [sp, #8]
    287e:	429a      	cmp	r2, r3
    2880:	d100      	bne.n	2884 <usart_init+0xb8>
    2882:	e092      	b.n	29aa <usart_init+0x1de>
    2884:	2380      	movs	r3, #128	; 0x80
    2886:	021b      	lsls	r3, r3, #8
    2888:	429a      	cmp	r2, r3
    288a:	d000      	beq.n	288e <usart_init+0xc2>
    288c:	e11f      	b.n	2ace <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    288e:	2303      	movs	r3, #3
    2890:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2892:	2300      	movs	r3, #0
    2894:	9307      	str	r3, [sp, #28]
    2896:	e008      	b.n	28aa <usart_init+0xde>
	switch (config->sample_rate) {
    2898:	2380      	movs	r3, #128	; 0x80
    289a:	019b      	lsls	r3, r3, #6
    289c:	429a      	cmp	r2, r3
    289e:	d000      	beq.n	28a2 <usart_init+0xd6>
    28a0:	e115      	b.n	2ace <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28a2:	2310      	movs	r3, #16
    28a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    28a6:	3b0f      	subs	r3, #15
    28a8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    28aa:	6833      	ldr	r3, [r6, #0]
    28ac:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    28ae:	68f3      	ldr	r3, [r6, #12]
    28b0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    28b2:	6973      	ldr	r3, [r6, #20]
    28b4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28b6:	7e33      	ldrb	r3, [r6, #24]
    28b8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28ba:	2326      	movs	r3, #38	; 0x26
    28bc:	5cf3      	ldrb	r3, [r6, r3]
    28be:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    28c0:	6873      	ldr	r3, [r6, #4]
    28c2:	4699      	mov	r9, r3
	switch (transfer_mode)
    28c4:	2b00      	cmp	r3, #0
    28c6:	d100      	bne.n	28ca <usart_init+0xfe>
    28c8:	e0a0      	b.n	2a0c <usart_init+0x240>
    28ca:	2380      	movs	r3, #128	; 0x80
    28cc:	055b      	lsls	r3, r3, #21
    28ce:	4599      	cmp	r9, r3
    28d0:	d100      	bne.n	28d4 <usart_init+0x108>
    28d2:	e084      	b.n	29de <usart_init+0x212>
	if(config->encoding_format_enable) {
    28d4:	7e73      	ldrb	r3, [r6, #25]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d002      	beq.n	28e0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    28da:	7eb3      	ldrb	r3, [r6, #26]
    28dc:	4642      	mov	r2, r8
    28de:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28e0:	682a      	ldr	r2, [r5, #0]
    28e2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    28e4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28e6:	2b00      	cmp	r3, #0
    28e8:	d1fc      	bne.n	28e4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    28ea:	330e      	adds	r3, #14
    28ec:	aa06      	add	r2, sp, #24
    28ee:	4694      	mov	ip, r2
    28f0:	4463      	add	r3, ip
    28f2:	881b      	ldrh	r3, [r3, #0]
    28f4:	4642      	mov	r2, r8
    28f6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    28f8:	9b05      	ldr	r3, [sp, #20]
    28fa:	9a03      	ldr	r2, [sp, #12]
    28fc:	4313      	orrs	r3, r2
    28fe:	9a04      	ldr	r2, [sp, #16]
    2900:	4313      	orrs	r3, r2
    2902:	464a      	mov	r2, r9
    2904:	4313      	orrs	r3, r2
    2906:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2908:	465b      	mov	r3, fp
    290a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    290c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    290e:	4653      	mov	r3, sl
    2910:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2912:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2914:	2327      	movs	r3, #39	; 0x27
    2916:	5cf3      	ldrb	r3, [r6, r3]
    2918:	2b00      	cmp	r3, #0
    291a:	d101      	bne.n	2920 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    291c:	3304      	adds	r3, #4
    291e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2920:	7e73      	ldrb	r3, [r6, #25]
    2922:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2924:	7f32      	ldrb	r2, [r6, #28]
    2926:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2928:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    292a:	7f72      	ldrb	r2, [r6, #29]
    292c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    292e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2930:	2224      	movs	r2, #36	; 0x24
    2932:	5cb2      	ldrb	r2, [r6, r2]
    2934:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2936:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2938:	2225      	movs	r2, #37	; 0x25
    293a:	5cb2      	ldrb	r2, [r6, r2]
    293c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    293e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2940:	7ab1      	ldrb	r1, [r6, #10]
    2942:	7af2      	ldrb	r2, [r6, #11]
    2944:	4311      	orrs	r1, r2
    2946:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2948:	8933      	ldrh	r3, [r6, #8]
    294a:	2bff      	cmp	r3, #255	; 0xff
    294c:	d100      	bne.n	2950 <usart_init+0x184>
    294e:	e081      	b.n	2a54 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2950:	2280      	movs	r2, #128	; 0x80
    2952:	0452      	lsls	r2, r2, #17
    2954:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2956:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2958:	232c      	movs	r3, #44	; 0x2c
    295a:	5cf3      	ldrb	r3, [r6, r3]
    295c:	2b00      	cmp	r3, #0
    295e:	d103      	bne.n	2968 <usart_init+0x19c>
    2960:	4b62      	ldr	r3, [pc, #392]	; (2aec <usart_init+0x320>)
    2962:	789b      	ldrb	r3, [r3, #2]
    2964:	079b      	lsls	r3, r3, #30
    2966:	d501      	bpl.n	296c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2968:	2380      	movs	r3, #128	; 0x80
    296a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    296c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    296e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2970:	2b00      	cmp	r3, #0
    2972:	d1fc      	bne.n	296e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2974:	4643      	mov	r3, r8
    2976:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2978:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    297a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    297c:	2b00      	cmp	r3, #0
    297e:	d1fc      	bne.n	297a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2980:	4643      	mov	r3, r8
    2982:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2984:	ab0e      	add	r3, sp, #56	; 0x38
    2986:	2280      	movs	r2, #128	; 0x80
    2988:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    298a:	2200      	movs	r2, #0
    298c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    298e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2990:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2992:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2994:	930a      	str	r3, [sp, #40]	; 0x28
    2996:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2998:	930b      	str	r3, [sp, #44]	; 0x2c
    299a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    299c:	930c      	str	r3, [sp, #48]	; 0x30
    299e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    29a0:	9302      	str	r3, [sp, #8]
    29a2:	930d      	str	r3, [sp, #52]	; 0x34
    29a4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29a6:	ae0a      	add	r6, sp, #40	; 0x28
    29a8:	e063      	b.n	2a72 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    29aa:	2308      	movs	r3, #8
    29ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    29ae:	3b07      	subs	r3, #7
    29b0:	9307      	str	r3, [sp, #28]
    29b2:	e77a      	b.n	28aa <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    29b4:	6833      	ldr	r3, [r6, #0]
    29b6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    29b8:	68f3      	ldr	r3, [r6, #12]
    29ba:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    29bc:	6973      	ldr	r3, [r6, #20]
    29be:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    29c0:	7e33      	ldrb	r3, [r6, #24]
    29c2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    29c4:	2326      	movs	r3, #38	; 0x26
    29c6:	5cf3      	ldrb	r3, [r6, r3]
    29c8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    29ca:	6873      	ldr	r3, [r6, #4]
    29cc:	4699      	mov	r9, r3
	switch (transfer_mode)
    29ce:	2b00      	cmp	r3, #0
    29d0:	d018      	beq.n	2a04 <usart_init+0x238>
    29d2:	2380      	movs	r3, #128	; 0x80
    29d4:	055b      	lsls	r3, r3, #21
    29d6:	4599      	cmp	r9, r3
    29d8:	d001      	beq.n	29de <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    29da:	2000      	movs	r0, #0
    29dc:	e025      	b.n	2a2a <usart_init+0x25e>
			if (!config->use_external_clock) {
    29de:	2327      	movs	r3, #39	; 0x27
    29e0:	5cf3      	ldrb	r3, [r6, r3]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d000      	beq.n	29e8 <usart_init+0x21c>
    29e6:	e775      	b.n	28d4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    29e8:	6a33      	ldr	r3, [r6, #32]
    29ea:	001f      	movs	r7, r3
    29ec:	b2c0      	uxtb	r0, r0
    29ee:	4b40      	ldr	r3, [pc, #256]	; (2af0 <usart_init+0x324>)
    29f0:	4798      	blx	r3
    29f2:	0001      	movs	r1, r0
    29f4:	220e      	movs	r2, #14
    29f6:	ab06      	add	r3, sp, #24
    29f8:	469c      	mov	ip, r3
    29fa:	4462      	add	r2, ip
    29fc:	0038      	movs	r0, r7
    29fe:	4b3d      	ldr	r3, [pc, #244]	; (2af4 <usart_init+0x328>)
    2a00:	4798      	blx	r3
    2a02:	e012      	b.n	2a2a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a04:	2308      	movs	r3, #8
    2a06:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a08:	2300      	movs	r3, #0
    2a0a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2a0c:	2327      	movs	r3, #39	; 0x27
    2a0e:	5cf3      	ldrb	r3, [r6, r3]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d00e      	beq.n	2a32 <usart_init+0x266>
				status_code =
    2a14:	9b06      	ldr	r3, [sp, #24]
    2a16:	9300      	str	r3, [sp, #0]
    2a18:	9b07      	ldr	r3, [sp, #28]
    2a1a:	220e      	movs	r2, #14
    2a1c:	a906      	add	r1, sp, #24
    2a1e:	468c      	mov	ip, r1
    2a20:	4462      	add	r2, ip
    2a22:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a24:	6a30      	ldr	r0, [r6, #32]
    2a26:	4f34      	ldr	r7, [pc, #208]	; (2af8 <usart_init+0x32c>)
    2a28:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d000      	beq.n	2a30 <usart_init+0x264>
    2a2e:	e6e0      	b.n	27f2 <usart_init+0x26>
    2a30:	e750      	b.n	28d4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a32:	6a33      	ldr	r3, [r6, #32]
    2a34:	001f      	movs	r7, r3
    2a36:	b2c0      	uxtb	r0, r0
    2a38:	4b2d      	ldr	r3, [pc, #180]	; (2af0 <usart_init+0x324>)
    2a3a:	4798      	blx	r3
    2a3c:	0001      	movs	r1, r0
				status_code =
    2a3e:	9b06      	ldr	r3, [sp, #24]
    2a40:	9300      	str	r3, [sp, #0]
    2a42:	9b07      	ldr	r3, [sp, #28]
    2a44:	220e      	movs	r2, #14
    2a46:	a806      	add	r0, sp, #24
    2a48:	4684      	mov	ip, r0
    2a4a:	4462      	add	r2, ip
    2a4c:	0038      	movs	r0, r7
    2a4e:	4f2a      	ldr	r7, [pc, #168]	; (2af8 <usart_init+0x32c>)
    2a50:	47b8      	blx	r7
    2a52:	e7ea      	b.n	2a2a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2a54:	7ef3      	ldrb	r3, [r6, #27]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d100      	bne.n	2a5c <usart_init+0x290>
    2a5a:	e77d      	b.n	2958 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2a5c:	2380      	movs	r3, #128	; 0x80
    2a5e:	04db      	lsls	r3, r3, #19
    2a60:	431f      	orrs	r7, r3
    2a62:	e779      	b.n	2958 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2a64:	0020      	movs	r0, r4
    2a66:	4b25      	ldr	r3, [pc, #148]	; (2afc <usart_init+0x330>)
    2a68:	4798      	blx	r3
    2a6a:	e007      	b.n	2a7c <usart_init+0x2b0>
    2a6c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a6e:	2f04      	cmp	r7, #4
    2a70:	d00d      	beq.n	2a8e <usart_init+0x2c2>
    2a72:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a74:	00bb      	lsls	r3, r7, #2
    2a76:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2a78:	2800      	cmp	r0, #0
    2a7a:	d0f3      	beq.n	2a64 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d0f5      	beq.n	2a6c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2a80:	a90e      	add	r1, sp, #56	; 0x38
    2a82:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2a84:	0c00      	lsrs	r0, r0, #16
    2a86:	b2c0      	uxtb	r0, r0
    2a88:	4b1d      	ldr	r3, [pc, #116]	; (2b00 <usart_init+0x334>)
    2a8a:	4798      	blx	r3
    2a8c:	e7ee      	b.n	2a6c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2a8e:	2300      	movs	r3, #0
    2a90:	60eb      	str	r3, [r5, #12]
    2a92:	612b      	str	r3, [r5, #16]
    2a94:	616b      	str	r3, [r5, #20]
    2a96:	61ab      	str	r3, [r5, #24]
    2a98:	61eb      	str	r3, [r5, #28]
    2a9a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2a9c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2a9e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2aa0:	2200      	movs	r2, #0
    2aa2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2aa4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2aa6:	3330      	adds	r3, #48	; 0x30
    2aa8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2aaa:	3301      	adds	r3, #1
    2aac:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2aae:	3301      	adds	r3, #1
    2ab0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2ab2:	3301      	adds	r3, #1
    2ab4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2ab6:	6828      	ldr	r0, [r5, #0]
    2ab8:	4b07      	ldr	r3, [pc, #28]	; (2ad8 <usart_init+0x30c>)
    2aba:	4798      	blx	r3
    2abc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2abe:	4911      	ldr	r1, [pc, #68]	; (2b04 <usart_init+0x338>)
    2ac0:	4b11      	ldr	r3, [pc, #68]	; (2b08 <usart_init+0x33c>)
    2ac2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2ac4:	00a4      	lsls	r4, r4, #2
    2ac6:	4b11      	ldr	r3, [pc, #68]	; (2b0c <usart_init+0x340>)
    2ac8:	50e5      	str	r5, [r4, r3]
	return status_code;
    2aca:	2000      	movs	r0, #0
    2acc:	e691      	b.n	27f2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2ace:	2310      	movs	r3, #16
    2ad0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2ad2:	2300      	movs	r3, #0
    2ad4:	9307      	str	r3, [sp, #28]
    2ad6:	e6e8      	b.n	28aa <usart_init+0xde>
    2ad8:	00001f85 	.word	0x00001f85
    2adc:	40000400 	.word	0x40000400
    2ae0:	0000347d 	.word	0x0000347d
    2ae4:	000033f1 	.word	0x000033f1
    2ae8:	00001dc1 	.word	0x00001dc1
    2aec:	41002000 	.word	0x41002000
    2af0:	00003499 	.word	0x00003499
    2af4:	00001d03 	.word	0x00001d03
    2af8:	00001d2d 	.word	0x00001d2d
    2afc:	00001e0d 	.word	0x00001e0d
    2b00:	00003575 	.word	0x00003575
    2b04:	00002cad 	.word	0x00002cad
    2b08:	00001fc1 	.word	0x00001fc1
    2b0c:	200009cc 	.word	0x200009cc

00002b10 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2b10:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2b12:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2b14:	2a00      	cmp	r2, #0
    2b16:	d101      	bne.n	2b1c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2b18:	0018      	movs	r0, r3
    2b1a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2b1c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2b1e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b20:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2b22:	2a00      	cmp	r2, #0
    2b24:	d1f8      	bne.n	2b18 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b26:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b28:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2b2a:	2a00      	cmp	r2, #0
    2b2c:	d1fc      	bne.n	2b28 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2b2e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2b30:	2102      	movs	r1, #2
    2b32:	7e1a      	ldrb	r2, [r3, #24]
    2b34:	420a      	tst	r2, r1
    2b36:	d0fc      	beq.n	2b32 <usart_write_wait+0x22>
	return STATUS_OK;
    2b38:	2300      	movs	r3, #0
    2b3a:	e7ed      	b.n	2b18 <usart_write_wait+0x8>

00002b3c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2b3c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2b3e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2b40:	2a00      	cmp	r2, #0
    2b42:	d101      	bne.n	2b48 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2b44:	0018      	movs	r0, r3
    2b46:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2b48:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2b4a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b4c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2b4e:	2a00      	cmp	r2, #0
    2b50:	d1f8      	bne.n	2b44 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b52:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2b54:	7e10      	ldrb	r0, [r2, #24]
    2b56:	0740      	lsls	r0, r0, #29
    2b58:	d5f4      	bpl.n	2b44 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2b5a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d1fc      	bne.n	2b5a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b60:	8b53      	ldrh	r3, [r2, #26]
    2b62:	b2db      	uxtb	r3, r3
	if (error_code) {
    2b64:	0698      	lsls	r0, r3, #26
    2b66:	d01d      	beq.n	2ba4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2b68:	0798      	lsls	r0, r3, #30
    2b6a:	d503      	bpl.n	2b74 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b6c:	2302      	movs	r3, #2
    2b6e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2b70:	3318      	adds	r3, #24
    2b72:	e7e7      	b.n	2b44 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b74:	0758      	lsls	r0, r3, #29
    2b76:	d503      	bpl.n	2b80 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b78:	2304      	movs	r3, #4
    2b7a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2b7c:	331a      	adds	r3, #26
    2b7e:	e7e1      	b.n	2b44 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b80:	07d8      	lsls	r0, r3, #31
    2b82:	d503      	bpl.n	2b8c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b84:	2301      	movs	r3, #1
    2b86:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2b88:	3312      	adds	r3, #18
    2b8a:	e7db      	b.n	2b44 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b8c:	06d8      	lsls	r0, r3, #27
    2b8e:	d503      	bpl.n	2b98 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b90:	2310      	movs	r3, #16
    2b92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2b94:	3332      	adds	r3, #50	; 0x32
    2b96:	e7d5      	b.n	2b44 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b98:	069b      	lsls	r3, r3, #26
    2b9a:	d503      	bpl.n	2ba4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b9c:	2320      	movs	r3, #32
    2b9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2ba0:	3321      	adds	r3, #33	; 0x21
    2ba2:	e7cf      	b.n	2b44 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2ba4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2ba6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2ba8:	2300      	movs	r3, #0
    2baa:	e7cb      	b.n	2b44 <usart_read_wait+0x8>

00002bac <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bae:	0006      	movs	r6, r0
    2bb0:	000c      	movs	r4, r1
    2bb2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bb4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2bb6:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <_usart_write_buffer+0x34>)
    2bb8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2bba:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2bbc:	b29b      	uxth	r3, r3
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d003      	beq.n	2bca <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2bc2:	4b08      	ldr	r3, [pc, #32]	; (2be4 <_usart_write_buffer+0x38>)
    2bc4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2bc6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2bca:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2bcc:	4b05      	ldr	r3, [pc, #20]	; (2be4 <_usart_write_buffer+0x38>)
    2bce:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2bd0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2bd2:	2205      	movs	r2, #5
    2bd4:	2333      	movs	r3, #51	; 0x33
    2bd6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2bd8:	3b32      	subs	r3, #50	; 0x32
    2bda:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2bdc:	2000      	movs	r0, #0
    2bde:	e7f3      	b.n	2bc8 <_usart_write_buffer+0x1c>
    2be0:	000019dd 	.word	0x000019dd
    2be4:	00001a1d 	.word	0x00001a1d

00002be8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bea:	0004      	movs	r4, r0
    2bec:	000d      	movs	r5, r1
    2bee:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bf0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2bf2:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <_usart_read_buffer+0x48>)
    2bf4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2bf6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2bf8:	b29b      	uxth	r3, r3
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d003      	beq.n	2c06 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2bfe:	4b0d      	ldr	r3, [pc, #52]	; (2c34 <_usart_read_buffer+0x4c>)
    2c00:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2c02:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2c06:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <_usart_read_buffer+0x4c>)
    2c0a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2c0c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2c0e:	2205      	movs	r2, #5
    2c10:	2332      	movs	r3, #50	; 0x32
    2c12:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2c14:	3b2e      	subs	r3, #46	; 0x2e
    2c16:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2c18:	7a23      	ldrb	r3, [r4, #8]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d001      	beq.n	2c22 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c1e:	2320      	movs	r3, #32
    2c20:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2c22:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2c24:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2c26:	2b00      	cmp	r3, #0
    2c28:	d0ec      	beq.n	2c04 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2c2a:	2308      	movs	r3, #8
    2c2c:	75bb      	strb	r3, [r7, #22]
    2c2e:	e7e9      	b.n	2c04 <_usart_read_buffer+0x1c>
    2c30:	000019dd 	.word	0x000019dd
    2c34:	00001a1d 	.word	0x00001a1d

00002c38 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2c38:	1c93      	adds	r3, r2, #2
    2c3a:	009b      	lsls	r3, r3, #2
    2c3c:	18c3      	adds	r3, r0, r3
    2c3e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2c40:	2130      	movs	r1, #48	; 0x30
    2c42:	2301      	movs	r3, #1
    2c44:	4093      	lsls	r3, r2
    2c46:	001a      	movs	r2, r3
    2c48:	5c43      	ldrb	r3, [r0, r1]
    2c4a:	4313      	orrs	r3, r2
    2c4c:	5443      	strb	r3, [r0, r1]
}
    2c4e:	4770      	bx	lr

00002c50 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2c50:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2c52:	2317      	movs	r3, #23
	if (length == 0) {
    2c54:	2a00      	cmp	r2, #0
    2c56:	d101      	bne.n	2c5c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2c58:	0018      	movs	r0, r3
    2c5a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2c5c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2c5e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2c60:	2c00      	cmp	r4, #0
    2c62:	d0f9      	beq.n	2c58 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2c64:	4b01      	ldr	r3, [pc, #4]	; (2c6c <usart_write_buffer_job+0x1c>)
    2c66:	4798      	blx	r3
    2c68:	0003      	movs	r3, r0
    2c6a:	e7f5      	b.n	2c58 <usart_write_buffer_job+0x8>
    2c6c:	00002bad 	.word	0x00002bad

00002c70 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2c70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2c72:	2317      	movs	r3, #23
	if (length == 0) {
    2c74:	2a00      	cmp	r2, #0
    2c76:	d101      	bne.n	2c7c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2c78:	0018      	movs	r0, r3
    2c7a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2c7c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2c7e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2c80:	2c00      	cmp	r4, #0
    2c82:	d0f9      	beq.n	2c78 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2c84:	4b01      	ldr	r3, [pc, #4]	; (2c8c <usart_read_buffer_job+0x1c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	e7f5      	b.n	2c78 <usart_read_buffer_job+0x8>
    2c8c:	00002be9 	.word	0x00002be9

00002c90 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2c90:	2900      	cmp	r1, #0
    2c92:	d003      	beq.n	2c9c <usart_get_job_status+0xc>
    2c94:	2901      	cmp	r1, #1
    2c96:	d005      	beq.n	2ca4 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2c98:	2017      	movs	r0, #23
    2c9a:	e002      	b.n	2ca2 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2c9c:	2332      	movs	r3, #50	; 0x32
    2c9e:	5cc0      	ldrb	r0, [r0, r3]
    2ca0:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2ca2:	4770      	bx	lr
			status_code = module->tx_status;
    2ca4:	2333      	movs	r3, #51	; 0x33
    2ca6:	5cc0      	ldrb	r0, [r0, r3]
    2ca8:	b2c0      	uxtb	r0, r0
			break;
    2caa:	e7fa      	b.n	2ca2 <usart_get_job_status+0x12>

00002cac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2cae:	0080      	lsls	r0, r0, #2
    2cb0:	4b62      	ldr	r3, [pc, #392]	; (2e3c <_usart_interrupt_handler+0x190>)
    2cb2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2cb4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2cb6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d1fc      	bne.n	2cb6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2cbc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2cbe:	7da6      	ldrb	r6, [r4, #22]
    2cc0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2cc2:	2330      	movs	r3, #48	; 0x30
    2cc4:	5ceb      	ldrb	r3, [r5, r3]
    2cc6:	2231      	movs	r2, #49	; 0x31
    2cc8:	5caf      	ldrb	r7, [r5, r2]
    2cca:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ccc:	07f3      	lsls	r3, r6, #31
    2cce:	d522      	bpl.n	2d16 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2cd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2cd2:	b29b      	uxth	r3, r3
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d01c      	beq.n	2d12 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2cda:	7813      	ldrb	r3, [r2, #0]
    2cdc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2cde:	1c51      	adds	r1, r2, #1
    2ce0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ce2:	7969      	ldrb	r1, [r5, #5]
    2ce4:	2901      	cmp	r1, #1
    2ce6:	d00e      	beq.n	2d06 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ce8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2cea:	05db      	lsls	r3, r3, #23
    2cec:	0ddb      	lsrs	r3, r3, #23
    2cee:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2cf0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2cf2:	3b01      	subs	r3, #1
    2cf4:	b29b      	uxth	r3, r3
    2cf6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d10c      	bne.n	2d16 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2cfc:	3301      	adds	r3, #1
    2cfe:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2d00:	3301      	adds	r3, #1
    2d02:	75a3      	strb	r3, [r4, #22]
    2d04:	e007      	b.n	2d16 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d06:	7851      	ldrb	r1, [r2, #1]
    2d08:	0209      	lsls	r1, r1, #8
    2d0a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2d0c:	3202      	adds	r2, #2
    2d0e:	62aa      	str	r2, [r5, #40]	; 0x28
    2d10:	e7eb      	b.n	2cea <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d12:	2301      	movs	r3, #1
    2d14:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2d16:	07b3      	lsls	r3, r6, #30
    2d18:	d506      	bpl.n	2d28 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2d1a:	2302      	movs	r3, #2
    2d1c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2d1e:	2200      	movs	r2, #0
    2d20:	3331      	adds	r3, #49	; 0x31
    2d22:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2d24:	07fb      	lsls	r3, r7, #31
    2d26:	d41a      	bmi.n	2d5e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2d28:	0773      	lsls	r3, r6, #29
    2d2a:	d565      	bpl.n	2df8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2d2c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d2e:	b29b      	uxth	r3, r3
    2d30:	2b00      	cmp	r3, #0
    2d32:	d05f      	beq.n	2df4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d34:	8b63      	ldrh	r3, [r4, #26]
    2d36:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2d38:	071a      	lsls	r2, r3, #28
    2d3a:	d414      	bmi.n	2d66 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d3c:	223f      	movs	r2, #63	; 0x3f
    2d3e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2d40:	2b00      	cmp	r3, #0
    2d42:	d034      	beq.n	2dae <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2d44:	079a      	lsls	r2, r3, #30
    2d46:	d511      	bpl.n	2d6c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2d48:	221a      	movs	r2, #26
    2d4a:	2332      	movs	r3, #50	; 0x32
    2d4c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2d4e:	3b30      	subs	r3, #48	; 0x30
    2d50:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2d52:	077b      	lsls	r3, r7, #29
    2d54:	d550      	bpl.n	2df8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d56:	0028      	movs	r0, r5
    2d58:	696b      	ldr	r3, [r5, #20]
    2d5a:	4798      	blx	r3
    2d5c:	e04c      	b.n	2df8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2d5e:	0028      	movs	r0, r5
    2d60:	68eb      	ldr	r3, [r5, #12]
    2d62:	4798      	blx	r3
    2d64:	e7e0      	b.n	2d28 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2d66:	2237      	movs	r2, #55	; 0x37
    2d68:	4013      	ands	r3, r2
    2d6a:	e7e9      	b.n	2d40 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2d6c:	075a      	lsls	r2, r3, #29
    2d6e:	d505      	bpl.n	2d7c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2d70:	221e      	movs	r2, #30
    2d72:	2332      	movs	r3, #50	; 0x32
    2d74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2d76:	3b2e      	subs	r3, #46	; 0x2e
    2d78:	8363      	strh	r3, [r4, #26]
    2d7a:	e7ea      	b.n	2d52 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2d7c:	07da      	lsls	r2, r3, #31
    2d7e:	d505      	bpl.n	2d8c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2d80:	2213      	movs	r2, #19
    2d82:	2332      	movs	r3, #50	; 0x32
    2d84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2d86:	3b31      	subs	r3, #49	; 0x31
    2d88:	8363      	strh	r3, [r4, #26]
    2d8a:	e7e2      	b.n	2d52 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2d8c:	06da      	lsls	r2, r3, #27
    2d8e:	d505      	bpl.n	2d9c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2d90:	2242      	movs	r2, #66	; 0x42
    2d92:	2332      	movs	r3, #50	; 0x32
    2d94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2d96:	3b22      	subs	r3, #34	; 0x22
    2d98:	8363      	strh	r3, [r4, #26]
    2d9a:	e7da      	b.n	2d52 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2d9c:	2220      	movs	r2, #32
    2d9e:	421a      	tst	r2, r3
    2da0:	d0d7      	beq.n	2d52 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2da2:	3221      	adds	r2, #33	; 0x21
    2da4:	2332      	movs	r3, #50	; 0x32
    2da6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2da8:	3b12      	subs	r3, #18
    2daa:	8363      	strh	r3, [r4, #26]
    2dac:	e7d1      	b.n	2d52 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2dae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2db0:	05db      	lsls	r3, r3, #23
    2db2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2db4:	b2da      	uxtb	r2, r3
    2db6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2db8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2dba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2dbc:	1c51      	adds	r1, r2, #1
    2dbe:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2dc0:	7969      	ldrb	r1, [r5, #5]
    2dc2:	2901      	cmp	r1, #1
    2dc4:	d010      	beq.n	2de8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2dc6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2dc8:	3b01      	subs	r3, #1
    2dca:	b29b      	uxth	r3, r3
    2dcc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d112      	bne.n	2df8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2dd2:	3304      	adds	r3, #4
    2dd4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2dd6:	2200      	movs	r2, #0
    2dd8:	332e      	adds	r3, #46	; 0x2e
    2dda:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2ddc:	07bb      	lsls	r3, r7, #30
    2dde:	d50b      	bpl.n	2df8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2de0:	0028      	movs	r0, r5
    2de2:	692b      	ldr	r3, [r5, #16]
    2de4:	4798      	blx	r3
    2de6:	e007      	b.n	2df8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2de8:	0a1b      	lsrs	r3, r3, #8
    2dea:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2dec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2dee:	3301      	adds	r3, #1
    2df0:	626b      	str	r3, [r5, #36]	; 0x24
    2df2:	e7e8      	b.n	2dc6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2df4:	2304      	movs	r3, #4
    2df6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2df8:	06f3      	lsls	r3, r6, #27
    2dfa:	d504      	bpl.n	2e06 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2dfc:	2310      	movs	r3, #16
    2dfe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2e00:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2e02:	06fb      	lsls	r3, r7, #27
    2e04:	d40e      	bmi.n	2e24 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2e06:	06b3      	lsls	r3, r6, #26
    2e08:	d504      	bpl.n	2e14 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2e0a:	2320      	movs	r3, #32
    2e0c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e0e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2e10:	073b      	lsls	r3, r7, #28
    2e12:	d40b      	bmi.n	2e2c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e14:	0733      	lsls	r3, r6, #28
    2e16:	d504      	bpl.n	2e22 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e18:	2308      	movs	r3, #8
    2e1a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e1c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e1e:	06bb      	lsls	r3, r7, #26
    2e20:	d408      	bmi.n	2e34 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2e24:	0028      	movs	r0, r5
    2e26:	69eb      	ldr	r3, [r5, #28]
    2e28:	4798      	blx	r3
    2e2a:	e7ec      	b.n	2e06 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2e2c:	0028      	movs	r0, r5
    2e2e:	69ab      	ldr	r3, [r5, #24]
    2e30:	4798      	blx	r3
    2e32:	e7ef      	b.n	2e14 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2e34:	6a2b      	ldr	r3, [r5, #32]
    2e36:	0028      	movs	r0, r5
    2e38:	4798      	blx	r3
}
    2e3a:	e7f2      	b.n	2e22 <_usart_interrupt_handler+0x176>
    2e3c:	200009cc 	.word	0x200009cc

00002e40 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e40:	b510      	push	{r4, lr}
	switch (clock_source) {
    2e42:	2808      	cmp	r0, #8
    2e44:	d803      	bhi.n	2e4e <system_clock_source_get_hz+0xe>
    2e46:	0080      	lsls	r0, r0, #2
    2e48:	4b1c      	ldr	r3, [pc, #112]	; (2ebc <system_clock_source_get_hz+0x7c>)
    2e4a:	581b      	ldr	r3, [r3, r0]
    2e4c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2e4e:	2000      	movs	r0, #0
    2e50:	e032      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2e52:	4b1b      	ldr	r3, [pc, #108]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2e54:	6918      	ldr	r0, [r3, #16]
    2e56:	e02f      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2e58:	4b1a      	ldr	r3, [pc, #104]	; (2ec4 <system_clock_source_get_hz+0x84>)
    2e5a:	6a1b      	ldr	r3, [r3, #32]
    2e5c:	059b      	lsls	r3, r3, #22
    2e5e:	0f9b      	lsrs	r3, r3, #30
    2e60:	4819      	ldr	r0, [pc, #100]	; (2ec8 <system_clock_source_get_hz+0x88>)
    2e62:	40d8      	lsrs	r0, r3
    2e64:	e028      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2e66:	4b16      	ldr	r3, [pc, #88]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2e68:	6958      	ldr	r0, [r3, #20]
    2e6a:	e025      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e6c:	4b14      	ldr	r3, [pc, #80]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2e6e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2e70:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e72:	079b      	lsls	r3, r3, #30
    2e74:	d520      	bpl.n	2eb8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e76:	4913      	ldr	r1, [pc, #76]	; (2ec4 <system_clock_source_get_hz+0x84>)
    2e78:	2210      	movs	r2, #16
    2e7a:	68cb      	ldr	r3, [r1, #12]
    2e7c:	421a      	tst	r2, r3
    2e7e:	d0fc      	beq.n	2e7a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2e80:	4b0f      	ldr	r3, [pc, #60]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2e82:	681a      	ldr	r2, [r3, #0]
    2e84:	2324      	movs	r3, #36	; 0x24
    2e86:	4013      	ands	r3, r2
    2e88:	2b04      	cmp	r3, #4
    2e8a:	d001      	beq.n	2e90 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2e8c:	480f      	ldr	r0, [pc, #60]	; (2ecc <system_clock_source_get_hz+0x8c>)
    2e8e:	e013      	b.n	2eb8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e90:	2000      	movs	r0, #0
    2e92:	4b0f      	ldr	r3, [pc, #60]	; (2ed0 <system_clock_source_get_hz+0x90>)
    2e94:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2e96:	4b0a      	ldr	r3, [pc, #40]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2e98:	689b      	ldr	r3, [r3, #8]
    2e9a:	041b      	lsls	r3, r3, #16
    2e9c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e9e:	4358      	muls	r0, r3
    2ea0:	e00a      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ea2:	2350      	movs	r3, #80	; 0x50
    2ea4:	4a07      	ldr	r2, [pc, #28]	; (2ec4 <system_clock_source_get_hz+0x84>)
    2ea6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2ea8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2eaa:	075b      	lsls	r3, r3, #29
    2eac:	d504      	bpl.n	2eb8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2eae:	4b04      	ldr	r3, [pc, #16]	; (2ec0 <system_clock_source_get_hz+0x80>)
    2eb0:	68d8      	ldr	r0, [r3, #12]
    2eb2:	e001      	b.n	2eb8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2eb4:	2080      	movs	r0, #128	; 0x80
    2eb6:	0200      	lsls	r0, r0, #8
	}
}
    2eb8:	bd10      	pop	{r4, pc}
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	00006dc8 	.word	0x00006dc8
    2ec0:	2000013c 	.word	0x2000013c
    2ec4:	40000800 	.word	0x40000800
    2ec8:	007a1200 	.word	0x007a1200
    2ecc:	02dc6c00 	.word	0x02dc6c00
    2ed0:	00003499 	.word	0x00003499

00002ed4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ed4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2ed6:	490c      	ldr	r1, [pc, #48]	; (2f08 <system_clock_source_osc8m_set_config+0x34>)
    2ed8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2eda:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2edc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2ede:	7840      	ldrb	r0, [r0, #1]
    2ee0:	2201      	movs	r2, #1
    2ee2:	4010      	ands	r0, r2
    2ee4:	0180      	lsls	r0, r0, #6
    2ee6:	2640      	movs	r6, #64	; 0x40
    2ee8:	43b3      	bics	r3, r6
    2eea:	4303      	orrs	r3, r0
    2eec:	402a      	ands	r2, r5
    2eee:	01d2      	lsls	r2, r2, #7
    2ef0:	2080      	movs	r0, #128	; 0x80
    2ef2:	4383      	bics	r3, r0
    2ef4:	4313      	orrs	r3, r2
    2ef6:	2203      	movs	r2, #3
    2ef8:	4022      	ands	r2, r4
    2efa:	0212      	lsls	r2, r2, #8
    2efc:	4803      	ldr	r0, [pc, #12]	; (2f0c <system_clock_source_osc8m_set_config+0x38>)
    2efe:	4003      	ands	r3, r0
    2f00:	4313      	orrs	r3, r2
    2f02:	620b      	str	r3, [r1, #32]
}
    2f04:	bd70      	pop	{r4, r5, r6, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	40000800 	.word	0x40000800
    2f0c:	fffffcff 	.word	0xfffffcff

00002f10 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f12:	46de      	mov	lr, fp
    2f14:	4657      	mov	r7, sl
    2f16:	464e      	mov	r6, r9
    2f18:	4645      	mov	r5, r8
    2f1a:	b5e0      	push	{r5, r6, r7, lr}
    2f1c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2f1e:	4b26      	ldr	r3, [pc, #152]	; (2fb8 <system_clock_source_xosc32k_set_config+0xa8>)
    2f20:	469b      	mov	fp, r3
    2f22:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2f24:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2f26:	7800      	ldrb	r0, [r0, #0]
    2f28:	4242      	negs	r2, r0
    2f2a:	4142      	adcs	r2, r0
    2f2c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2f2e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2f30:	78ca      	ldrb	r2, [r1, #3]
    2f32:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2f34:	790a      	ldrb	r2, [r1, #4]
    2f36:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2f38:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2f3a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2f3c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2f3e:	688a      	ldr	r2, [r1, #8]
    2f40:	491e      	ldr	r1, [pc, #120]	; (2fbc <system_clock_source_xosc32k_set_config+0xac>)
    2f42:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2f44:	2101      	movs	r1, #1
    2f46:	464a      	mov	r2, r9
    2f48:	0092      	lsls	r2, r2, #2
    2f4a:	4691      	mov	r9, r2
    2f4c:	2204      	movs	r2, #4
    2f4e:	4393      	bics	r3, r2
    2f50:	464a      	mov	r2, r9
    2f52:	4313      	orrs	r3, r2
    2f54:	4642      	mov	r2, r8
    2f56:	400a      	ands	r2, r1
    2f58:	00d2      	lsls	r2, r2, #3
    2f5a:	4690      	mov	r8, r2
    2f5c:	2208      	movs	r2, #8
    2f5e:	4393      	bics	r3, r2
    2f60:	4642      	mov	r2, r8
    2f62:	4313      	orrs	r3, r2
    2f64:	4662      	mov	r2, ip
    2f66:	400a      	ands	r2, r1
    2f68:	0112      	lsls	r2, r2, #4
    2f6a:	4694      	mov	ip, r2
    2f6c:	2210      	movs	r2, #16
    2f6e:	4393      	bics	r3, r2
    2f70:	4662      	mov	r2, ip
    2f72:	4313      	orrs	r3, r2
    2f74:	4008      	ands	r0, r1
    2f76:	0140      	lsls	r0, r0, #5
    2f78:	2220      	movs	r2, #32
    2f7a:	4393      	bics	r3, r2
    2f7c:	4303      	orrs	r3, r0
    2f7e:	400f      	ands	r7, r1
    2f80:	01bf      	lsls	r7, r7, #6
    2f82:	2040      	movs	r0, #64	; 0x40
    2f84:	4383      	bics	r3, r0
    2f86:	433b      	orrs	r3, r7
    2f88:	400e      	ands	r6, r1
    2f8a:	01f6      	lsls	r6, r6, #7
    2f8c:	3040      	adds	r0, #64	; 0x40
    2f8e:	4383      	bics	r3, r0
    2f90:	4333      	orrs	r3, r6
    2f92:	3879      	subs	r0, #121	; 0x79
    2f94:	4005      	ands	r5, r0
    2f96:	022d      	lsls	r5, r5, #8
    2f98:	4809      	ldr	r0, [pc, #36]	; (2fc0 <system_clock_source_xosc32k_set_config+0xb0>)
    2f9a:	4003      	ands	r3, r0
    2f9c:	432b      	orrs	r3, r5
    2f9e:	4021      	ands	r1, r4
    2fa0:	0309      	lsls	r1, r1, #12
    2fa2:	4808      	ldr	r0, [pc, #32]	; (2fc4 <system_clock_source_xosc32k_set_config+0xb4>)
    2fa4:	4003      	ands	r3, r0
    2fa6:	430b      	orrs	r3, r1
    2fa8:	465a      	mov	r2, fp
    2faa:	8293      	strh	r3, [r2, #20]
}
    2fac:	bc3c      	pop	{r2, r3, r4, r5}
    2fae:	4690      	mov	r8, r2
    2fb0:	4699      	mov	r9, r3
    2fb2:	46a2      	mov	sl, r4
    2fb4:	46ab      	mov	fp, r5
    2fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb8:	40000800 	.word	0x40000800
    2fbc:	2000013c 	.word	0x2000013c
    2fc0:	fffff8ff 	.word	0xfffff8ff
    2fc4:	ffffefff 	.word	0xffffefff

00002fc8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2fc8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2fca:	7a03      	ldrb	r3, [r0, #8]
    2fcc:	069b      	lsls	r3, r3, #26
    2fce:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2fd0:	8942      	ldrh	r2, [r0, #10]
    2fd2:	0592      	lsls	r2, r2, #22
    2fd4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2fd6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2fd8:	4918      	ldr	r1, [pc, #96]	; (303c <system_clock_source_dfll_set_config+0x74>)
    2fda:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2fdc:	7983      	ldrb	r3, [r0, #6]
    2fde:	79c2      	ldrb	r2, [r0, #7]
    2fe0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2fe2:	8842      	ldrh	r2, [r0, #2]
    2fe4:	8884      	ldrh	r4, [r0, #4]
    2fe6:	4322      	orrs	r2, r4
    2fe8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2fea:	7842      	ldrb	r2, [r0, #1]
    2fec:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2fee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ff0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2ff2:	7803      	ldrb	r3, [r0, #0]
    2ff4:	2b04      	cmp	r3, #4
    2ff6:	d011      	beq.n	301c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ff8:	2b20      	cmp	r3, #32
    2ffa:	d10e      	bne.n	301a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ffc:	7b03      	ldrb	r3, [r0, #12]
    2ffe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3000:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3002:	4313      	orrs	r3, r2
    3004:	89c2      	ldrh	r2, [r0, #14]
    3006:	0412      	lsls	r2, r2, #16
    3008:	490d      	ldr	r1, [pc, #52]	; (3040 <system_clock_source_dfll_set_config+0x78>)
    300a:	400a      	ands	r2, r1
    300c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    300e:	4a0b      	ldr	r2, [pc, #44]	; (303c <system_clock_source_dfll_set_config+0x74>)
    3010:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3012:	6811      	ldr	r1, [r2, #0]
    3014:	4b0b      	ldr	r3, [pc, #44]	; (3044 <system_clock_source_dfll_set_config+0x7c>)
    3016:	430b      	orrs	r3, r1
    3018:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    301a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    301c:	7b03      	ldrb	r3, [r0, #12]
    301e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3020:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3022:	4313      	orrs	r3, r2
    3024:	89c2      	ldrh	r2, [r0, #14]
    3026:	0412      	lsls	r2, r2, #16
    3028:	4905      	ldr	r1, [pc, #20]	; (3040 <system_clock_source_dfll_set_config+0x78>)
    302a:	400a      	ands	r2, r1
    302c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    302e:	4a03      	ldr	r2, [pc, #12]	; (303c <system_clock_source_dfll_set_config+0x74>)
    3030:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3032:	6813      	ldr	r3, [r2, #0]
    3034:	2104      	movs	r1, #4
    3036:	430b      	orrs	r3, r1
    3038:	6013      	str	r3, [r2, #0]
    303a:	e7ee      	b.n	301a <system_clock_source_dfll_set_config+0x52>
    303c:	2000013c 	.word	0x2000013c
    3040:	03ff0000 	.word	0x03ff0000
    3044:	00000424 	.word	0x00000424

00003048 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3048:	2808      	cmp	r0, #8
    304a:	d803      	bhi.n	3054 <system_clock_source_enable+0xc>
    304c:	0080      	lsls	r0, r0, #2
    304e:	4b25      	ldr	r3, [pc, #148]	; (30e4 <system_clock_source_enable+0x9c>)
    3050:	581b      	ldr	r3, [r3, r0]
    3052:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3054:	2017      	movs	r0, #23
    3056:	e044      	b.n	30e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3058:	4a23      	ldr	r2, [pc, #140]	; (30e8 <system_clock_source_enable+0xa0>)
    305a:	6a13      	ldr	r3, [r2, #32]
    305c:	2102      	movs	r1, #2
    305e:	430b      	orrs	r3, r1
    3060:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3062:	2000      	movs	r0, #0
    3064:	e03d      	b.n	30e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3066:	4a20      	ldr	r2, [pc, #128]	; (30e8 <system_clock_source_enable+0xa0>)
    3068:	6993      	ldr	r3, [r2, #24]
    306a:	2102      	movs	r1, #2
    306c:	430b      	orrs	r3, r1
    306e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3070:	2000      	movs	r0, #0
		break;
    3072:	e036      	b.n	30e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3074:	4a1c      	ldr	r2, [pc, #112]	; (30e8 <system_clock_source_enable+0xa0>)
    3076:	8a13      	ldrh	r3, [r2, #16]
    3078:	2102      	movs	r1, #2
    307a:	430b      	orrs	r3, r1
    307c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    307e:	2000      	movs	r0, #0
		break;
    3080:	e02f      	b.n	30e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3082:	4a19      	ldr	r2, [pc, #100]	; (30e8 <system_clock_source_enable+0xa0>)
    3084:	8a93      	ldrh	r3, [r2, #20]
    3086:	2102      	movs	r1, #2
    3088:	430b      	orrs	r3, r1
    308a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    308c:	2000      	movs	r0, #0
		break;
    308e:	e028      	b.n	30e2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3090:	4916      	ldr	r1, [pc, #88]	; (30ec <system_clock_source_enable+0xa4>)
    3092:	680b      	ldr	r3, [r1, #0]
    3094:	2202      	movs	r2, #2
    3096:	4313      	orrs	r3, r2
    3098:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    309a:	4b13      	ldr	r3, [pc, #76]	; (30e8 <system_clock_source_enable+0xa0>)
    309c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    309e:	0019      	movs	r1, r3
    30a0:	320e      	adds	r2, #14
    30a2:	68cb      	ldr	r3, [r1, #12]
    30a4:	421a      	tst	r2, r3
    30a6:	d0fc      	beq.n	30a2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    30a8:	4a10      	ldr	r2, [pc, #64]	; (30ec <system_clock_source_enable+0xa4>)
    30aa:	6891      	ldr	r1, [r2, #8]
    30ac:	4b0e      	ldr	r3, [pc, #56]	; (30e8 <system_clock_source_enable+0xa0>)
    30ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    30b0:	6852      	ldr	r2, [r2, #4]
    30b2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    30b4:	2200      	movs	r2, #0
    30b6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    30b8:	0019      	movs	r1, r3
    30ba:	3210      	adds	r2, #16
    30bc:	68cb      	ldr	r3, [r1, #12]
    30be:	421a      	tst	r2, r3
    30c0:	d0fc      	beq.n	30bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    30c2:	4b0a      	ldr	r3, [pc, #40]	; (30ec <system_clock_source_enable+0xa4>)
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	b29b      	uxth	r3, r3
    30c8:	4a07      	ldr	r2, [pc, #28]	; (30e8 <system_clock_source_enable+0xa0>)
    30ca:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    30cc:	2000      	movs	r0, #0
    30ce:	e008      	b.n	30e2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    30d0:	4905      	ldr	r1, [pc, #20]	; (30e8 <system_clock_source_enable+0xa0>)
    30d2:	2244      	movs	r2, #68	; 0x44
    30d4:	5c8b      	ldrb	r3, [r1, r2]
    30d6:	2002      	movs	r0, #2
    30d8:	4303      	orrs	r3, r0
    30da:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    30dc:	2000      	movs	r0, #0
		break;
    30de:	e000      	b.n	30e2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    30e0:	2000      	movs	r0, #0
}
    30e2:	4770      	bx	lr
    30e4:	00006dec 	.word	0x00006dec
    30e8:	40000800 	.word	0x40000800
    30ec:	2000013c 	.word	0x2000013c

000030f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    30f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30f2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    30f4:	22c2      	movs	r2, #194	; 0xc2
    30f6:	00d2      	lsls	r2, r2, #3
    30f8:	4b45      	ldr	r3, [pc, #276]	; (3210 <system_clock_init+0x120>)
    30fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    30fc:	4a45      	ldr	r2, [pc, #276]	; (3214 <system_clock_init+0x124>)
    30fe:	6853      	ldr	r3, [r2, #4]
    3100:	211e      	movs	r1, #30
    3102:	438b      	bics	r3, r1
    3104:	391a      	subs	r1, #26
    3106:	430b      	orrs	r3, r1
    3108:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    310a:	2202      	movs	r2, #2
    310c:	ab01      	add	r3, sp, #4
    310e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3110:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3112:	4d41      	ldr	r5, [pc, #260]	; (3218 <system_clock_init+0x128>)
    3114:	b2e0      	uxtb	r0, r4
    3116:	a901      	add	r1, sp, #4
    3118:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    311a:	3401      	adds	r4, #1
    311c:	2c25      	cmp	r4, #37	; 0x25
    311e:	d1f9      	bne.n	3114 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3120:	a80a      	add	r0, sp, #40	; 0x28
    3122:	2300      	movs	r3, #0
    3124:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    3126:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    3128:	2280      	movs	r2, #128	; 0x80
    312a:	0212      	lsls	r2, r2, #8
    312c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    312e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3130:	2201      	movs	r2, #1
    3132:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    3134:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3136:	2106      	movs	r1, #6
    3138:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    313a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    313c:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    313e:	4b37      	ldr	r3, [pc, #220]	; (321c <system_clock_init+0x12c>)
    3140:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3142:	2005      	movs	r0, #5
    3144:	4b36      	ldr	r3, [pc, #216]	; (3220 <system_clock_init+0x130>)
    3146:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3148:	4931      	ldr	r1, [pc, #196]	; (3210 <system_clock_init+0x120>)
    314a:	2202      	movs	r2, #2
    314c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    314e:	421a      	tst	r2, r3
    3150:	d0fc      	beq.n	314c <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3152:	ab05      	add	r3, sp, #20
    3154:	2100      	movs	r1, #0
    3156:	2200      	movs	r2, #0
    3158:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    315a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    315c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    315e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3160:	313f      	adds	r1, #63	; 0x3f
    3162:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3164:	393b      	subs	r1, #59	; 0x3b
    3166:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3168:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    316a:	4b2e      	ldr	r3, [pc, #184]	; (3224 <system_clock_init+0x134>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3170:	2b3f      	cmp	r3, #63	; 0x3f
    3172:	d04b      	beq.n	320c <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3174:	a805      	add	r0, sp, #20
    3176:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3178:	23b7      	movs	r3, #183	; 0xb7
    317a:	00db      	lsls	r3, r3, #3
    317c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    317e:	2303      	movs	r3, #3
    3180:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3182:	331c      	adds	r3, #28
    3184:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3186:	4b28      	ldr	r3, [pc, #160]	; (3228 <system_clock_init+0x138>)
    3188:	4798      	blx	r3
	config->on_demand       = true;
    318a:	a804      	add	r0, sp, #16
    318c:	2501      	movs	r5, #1
    318e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3190:	2600      	movs	r6, #0
    3192:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3194:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3196:	4b25      	ldr	r3, [pc, #148]	; (322c <system_clock_init+0x13c>)
    3198:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    319a:	2006      	movs	r0, #6
    319c:	4f20      	ldr	r7, [pc, #128]	; (3220 <system_clock_init+0x130>)
    319e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    31a0:	4b23      	ldr	r3, [pc, #140]	; (3230 <system_clock_init+0x140>)
    31a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    31a4:	ac01      	add	r4, sp, #4
    31a6:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    31a8:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    31aa:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    31ac:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    31ae:	2305      	movs	r3, #5
    31b0:	7023      	strb	r3, [r4, #0]
    31b2:	0021      	movs	r1, r4
    31b4:	2001      	movs	r0, #1
    31b6:	4b1f      	ldr	r3, [pc, #124]	; (3234 <system_clock_init+0x144>)
    31b8:	4798      	blx	r3
    31ba:	2001      	movs	r0, #1
    31bc:	4b1e      	ldr	r3, [pc, #120]	; (3238 <system_clock_init+0x148>)
    31be:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    31c0:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    31c2:	0021      	movs	r1, r4
    31c4:	2000      	movs	r0, #0
    31c6:	4b14      	ldr	r3, [pc, #80]	; (3218 <system_clock_init+0x128>)
    31c8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    31ca:	2000      	movs	r0, #0
    31cc:	4b1b      	ldr	r3, [pc, #108]	; (323c <system_clock_init+0x14c>)
    31ce:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    31d0:	2007      	movs	r0, #7
    31d2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    31d4:	490e      	ldr	r1, [pc, #56]	; (3210 <system_clock_init+0x120>)
    31d6:	22d0      	movs	r2, #208	; 0xd0
    31d8:	68cb      	ldr	r3, [r1, #12]
    31da:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    31dc:	2bd0      	cmp	r3, #208	; 0xd0
    31de:	d1fb      	bne.n	31d8 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    31e0:	4a17      	ldr	r2, [pc, #92]	; (3240 <system_clock_init+0x150>)
    31e2:	2300      	movs	r3, #0
    31e4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    31e6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    31e8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    31ea:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    31ec:	a901      	add	r1, sp, #4
    31ee:	2201      	movs	r2, #1
    31f0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    31f2:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    31f4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    31f6:	3307      	adds	r3, #7
    31f8:	700b      	strb	r3, [r1, #0]
    31fa:	720a      	strb	r2, [r1, #8]
    31fc:	2000      	movs	r0, #0
    31fe:	4b0d      	ldr	r3, [pc, #52]	; (3234 <system_clock_init+0x144>)
    3200:	4798      	blx	r3
    3202:	2000      	movs	r0, #0
    3204:	4b0c      	ldr	r3, [pc, #48]	; (3238 <system_clock_init+0x148>)
    3206:	4798      	blx	r3
#endif
}
    3208:	b00f      	add	sp, #60	; 0x3c
    320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    320c:	3b20      	subs	r3, #32
    320e:	e7b1      	b.n	3174 <system_clock_init+0x84>
    3210:	40000800 	.word	0x40000800
    3214:	41004000 	.word	0x41004000
    3218:	0000347d 	.word	0x0000347d
    321c:	00002f11 	.word	0x00002f11
    3220:	00003049 	.word	0x00003049
    3224:	00806024 	.word	0x00806024
    3228:	00002fc9 	.word	0x00002fc9
    322c:	00002ed5 	.word	0x00002ed5
    3230:	00003245 	.word	0x00003245
    3234:	00003269 	.word	0x00003269
    3238:	00003321 	.word	0x00003321
    323c:	000033f1 	.word	0x000033f1
    3240:	40000400 	.word	0x40000400

00003244 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3244:	4a06      	ldr	r2, [pc, #24]	; (3260 <system_gclk_init+0x1c>)
    3246:	6993      	ldr	r3, [r2, #24]
    3248:	2108      	movs	r1, #8
    324a:	430b      	orrs	r3, r1
    324c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    324e:	2201      	movs	r2, #1
    3250:	4b04      	ldr	r3, [pc, #16]	; (3264 <system_gclk_init+0x20>)
    3252:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3254:	0019      	movs	r1, r3
    3256:	780b      	ldrb	r3, [r1, #0]
    3258:	4213      	tst	r3, r2
    325a:	d1fc      	bne.n	3256 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    325c:	4770      	bx	lr
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	40000400 	.word	0x40000400
    3264:	40000c00 	.word	0x40000c00

00003268 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    326c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    326e:	780d      	ldrb	r5, [r1, #0]
    3270:	022d      	lsls	r5, r5, #8
    3272:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3274:	784b      	ldrb	r3, [r1, #1]
    3276:	2b00      	cmp	r3, #0
    3278:	d002      	beq.n	3280 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    327a:	2380      	movs	r3, #128	; 0x80
    327c:	02db      	lsls	r3, r3, #11
    327e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3280:	7a4b      	ldrb	r3, [r1, #9]
    3282:	2b00      	cmp	r3, #0
    3284:	d002      	beq.n	328c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3286:	2380      	movs	r3, #128	; 0x80
    3288:	031b      	lsls	r3, r3, #12
    328a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    328c:	6848      	ldr	r0, [r1, #4]
    328e:	2801      	cmp	r0, #1
    3290:	d910      	bls.n	32b4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3292:	1e43      	subs	r3, r0, #1
    3294:	4218      	tst	r0, r3
    3296:	d134      	bne.n	3302 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3298:	2802      	cmp	r0, #2
    329a:	d930      	bls.n	32fe <system_gclk_gen_set_config+0x96>
    329c:	2302      	movs	r3, #2
    329e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    32a0:	3201      	adds	r2, #1
						mask <<= 1) {
    32a2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    32a4:	4298      	cmp	r0, r3
    32a6:	d8fb      	bhi.n	32a0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    32a8:	0212      	lsls	r2, r2, #8
    32aa:	4332      	orrs	r2, r6
    32ac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    32ae:	2380      	movs	r3, #128	; 0x80
    32b0:	035b      	lsls	r3, r3, #13
    32b2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    32b4:	7a0b      	ldrb	r3, [r1, #8]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d002      	beq.n	32c0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    32ba:	2380      	movs	r3, #128	; 0x80
    32bc:	039b      	lsls	r3, r3, #14
    32be:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32c0:	4a13      	ldr	r2, [pc, #76]	; (3310 <system_gclk_gen_set_config+0xa8>)
    32c2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    32c4:	b25b      	sxtb	r3, r3
    32c6:	2b00      	cmp	r3, #0
    32c8:	dbfb      	blt.n	32c2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    32ca:	4b12      	ldr	r3, [pc, #72]	; (3314 <system_gclk_gen_set_config+0xac>)
    32cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    32ce:	4b12      	ldr	r3, [pc, #72]	; (3318 <system_gclk_gen_set_config+0xb0>)
    32d0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32d2:	4a0f      	ldr	r2, [pc, #60]	; (3310 <system_gclk_gen_set_config+0xa8>)
    32d4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    32d6:	b25b      	sxtb	r3, r3
    32d8:	2b00      	cmp	r3, #0
    32da:	dbfb      	blt.n	32d4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    32dc:	4b0c      	ldr	r3, [pc, #48]	; (3310 <system_gclk_gen_set_config+0xa8>)
    32de:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32e0:	001a      	movs	r2, r3
    32e2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    32e4:	b25b      	sxtb	r3, r3
    32e6:	2b00      	cmp	r3, #0
    32e8:	dbfb      	blt.n	32e2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    32ea:	4a09      	ldr	r2, [pc, #36]	; (3310 <system_gclk_gen_set_config+0xa8>)
    32ec:	6853      	ldr	r3, [r2, #4]
    32ee:	2180      	movs	r1, #128	; 0x80
    32f0:	0249      	lsls	r1, r1, #9
    32f2:	400b      	ands	r3, r1
    32f4:	431d      	orrs	r5, r3
    32f6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    32f8:	4b08      	ldr	r3, [pc, #32]	; (331c <system_gclk_gen_set_config+0xb4>)
    32fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32fc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    32fe:	2200      	movs	r2, #0
    3300:	e7d2      	b.n	32a8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3302:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3304:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3306:	2380      	movs	r3, #128	; 0x80
    3308:	029b      	lsls	r3, r3, #10
    330a:	431d      	orrs	r5, r3
    330c:	e7d2      	b.n	32b4 <system_gclk_gen_set_config+0x4c>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	40000c00 	.word	0x40000c00
    3314:	000019dd 	.word	0x000019dd
    3318:	40000c08 	.word	0x40000c08
    331c:	00001a1d 	.word	0x00001a1d

00003320 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3320:	b510      	push	{r4, lr}
    3322:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3324:	4a0b      	ldr	r2, [pc, #44]	; (3354 <system_gclk_gen_enable+0x34>)
    3326:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3328:	b25b      	sxtb	r3, r3
    332a:	2b00      	cmp	r3, #0
    332c:	dbfb      	blt.n	3326 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    332e:	4b0a      	ldr	r3, [pc, #40]	; (3358 <system_gclk_gen_enable+0x38>)
    3330:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3332:	4b0a      	ldr	r3, [pc, #40]	; (335c <system_gclk_gen_enable+0x3c>)
    3334:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3336:	4a07      	ldr	r2, [pc, #28]	; (3354 <system_gclk_gen_enable+0x34>)
    3338:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    333a:	b25b      	sxtb	r3, r3
    333c:	2b00      	cmp	r3, #0
    333e:	dbfb      	blt.n	3338 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3340:	4a04      	ldr	r2, [pc, #16]	; (3354 <system_gclk_gen_enable+0x34>)
    3342:	6851      	ldr	r1, [r2, #4]
    3344:	2380      	movs	r3, #128	; 0x80
    3346:	025b      	lsls	r3, r3, #9
    3348:	430b      	orrs	r3, r1
    334a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    334c:	4b04      	ldr	r3, [pc, #16]	; (3360 <system_gclk_gen_enable+0x40>)
    334e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3350:	bd10      	pop	{r4, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	40000c00 	.word	0x40000c00
    3358:	000019dd 	.word	0x000019dd
    335c:	40000c04 	.word	0x40000c04
    3360:	00001a1d 	.word	0x00001a1d

00003364 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3368:	4a1a      	ldr	r2, [pc, #104]	; (33d4 <system_gclk_gen_get_hz+0x70>)
    336a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    336c:	b25b      	sxtb	r3, r3
    336e:	2b00      	cmp	r3, #0
    3370:	dbfb      	blt.n	336a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3372:	4b19      	ldr	r3, [pc, #100]	; (33d8 <system_gclk_gen_get_hz+0x74>)
    3374:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3376:	4b19      	ldr	r3, [pc, #100]	; (33dc <system_gclk_gen_get_hz+0x78>)
    3378:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    337a:	4a16      	ldr	r2, [pc, #88]	; (33d4 <system_gclk_gen_get_hz+0x70>)
    337c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    337e:	b25b      	sxtb	r3, r3
    3380:	2b00      	cmp	r3, #0
    3382:	dbfb      	blt.n	337c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3384:	4e13      	ldr	r6, [pc, #76]	; (33d4 <system_gclk_gen_get_hz+0x70>)
    3386:	6870      	ldr	r0, [r6, #4]
    3388:	04c0      	lsls	r0, r0, #19
    338a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    338c:	4b14      	ldr	r3, [pc, #80]	; (33e0 <system_gclk_gen_get_hz+0x7c>)
    338e:	4798      	blx	r3
    3390:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3392:	4b12      	ldr	r3, [pc, #72]	; (33dc <system_gclk_gen_get_hz+0x78>)
    3394:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3396:	6876      	ldr	r6, [r6, #4]
    3398:	02f6      	lsls	r6, r6, #11
    339a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    339c:	4b11      	ldr	r3, [pc, #68]	; (33e4 <system_gclk_gen_get_hz+0x80>)
    339e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    33a0:	4a0c      	ldr	r2, [pc, #48]	; (33d4 <system_gclk_gen_get_hz+0x70>)
    33a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    33a4:	b25b      	sxtb	r3, r3
    33a6:	2b00      	cmp	r3, #0
    33a8:	dbfb      	blt.n	33a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <system_gclk_gen_get_hz+0x70>)
    33ac:	689c      	ldr	r4, [r3, #8]
    33ae:	0224      	lsls	r4, r4, #8
    33b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    33b2:	4b0d      	ldr	r3, [pc, #52]	; (33e8 <system_gclk_gen_get_hz+0x84>)
    33b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    33b6:	2e00      	cmp	r6, #0
    33b8:	d107      	bne.n	33ca <system_gclk_gen_get_hz+0x66>
    33ba:	2c01      	cmp	r4, #1
    33bc:	d907      	bls.n	33ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    33be:	0021      	movs	r1, r4
    33c0:	0028      	movs	r0, r5
    33c2:	4b0a      	ldr	r3, [pc, #40]	; (33ec <system_gclk_gen_get_hz+0x88>)
    33c4:	4798      	blx	r3
    33c6:	0005      	movs	r5, r0
    33c8:	e001      	b.n	33ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    33ca:	3401      	adds	r4, #1
    33cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    33ce:	0028      	movs	r0, r5
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	40000c00 	.word	0x40000c00
    33d8:	000019dd 	.word	0x000019dd
    33dc:	40000c04 	.word	0x40000c04
    33e0:	00002e41 	.word	0x00002e41
    33e4:	40000c08 	.word	0x40000c08
    33e8:	00001a1d 	.word	0x00001a1d
    33ec:	0000590d 	.word	0x0000590d

000033f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    33f0:	b510      	push	{r4, lr}
    33f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    33f4:	4b06      	ldr	r3, [pc, #24]	; (3410 <system_gclk_chan_enable+0x20>)
    33f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    33f8:	4b06      	ldr	r3, [pc, #24]	; (3414 <system_gclk_chan_enable+0x24>)
    33fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    33fc:	4a06      	ldr	r2, [pc, #24]	; (3418 <system_gclk_chan_enable+0x28>)
    33fe:	8853      	ldrh	r3, [r2, #2]
    3400:	2180      	movs	r1, #128	; 0x80
    3402:	01c9      	lsls	r1, r1, #7
    3404:	430b      	orrs	r3, r1
    3406:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3408:	4b04      	ldr	r3, [pc, #16]	; (341c <system_gclk_chan_enable+0x2c>)
    340a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    340c:	bd10      	pop	{r4, pc}
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	000019dd 	.word	0x000019dd
    3414:	40000c02 	.word	0x40000c02
    3418:	40000c00 	.word	0x40000c00
    341c:	00001a1d 	.word	0x00001a1d

00003420 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3420:	b510      	push	{r4, lr}
    3422:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3424:	4b0f      	ldr	r3, [pc, #60]	; (3464 <system_gclk_chan_disable+0x44>)
    3426:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3428:	4b0f      	ldr	r3, [pc, #60]	; (3468 <system_gclk_chan_disable+0x48>)
    342a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    342c:	4a0f      	ldr	r2, [pc, #60]	; (346c <system_gclk_chan_disable+0x4c>)
    342e:	8853      	ldrh	r3, [r2, #2]
    3430:	051b      	lsls	r3, r3, #20
    3432:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3434:	8853      	ldrh	r3, [r2, #2]
    3436:	490e      	ldr	r1, [pc, #56]	; (3470 <system_gclk_chan_disable+0x50>)
    3438:	400b      	ands	r3, r1
    343a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    343c:	8853      	ldrh	r3, [r2, #2]
    343e:	490d      	ldr	r1, [pc, #52]	; (3474 <system_gclk_chan_disable+0x54>)
    3440:	400b      	ands	r3, r1
    3442:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3444:	0011      	movs	r1, r2
    3446:	2280      	movs	r2, #128	; 0x80
    3448:	01d2      	lsls	r2, r2, #7
    344a:	884b      	ldrh	r3, [r1, #2]
    344c:	4213      	tst	r3, r2
    344e:	d1fc      	bne.n	344a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3450:	4906      	ldr	r1, [pc, #24]	; (346c <system_gclk_chan_disable+0x4c>)
    3452:	884a      	ldrh	r2, [r1, #2]
    3454:	0203      	lsls	r3, r0, #8
    3456:	4806      	ldr	r0, [pc, #24]	; (3470 <system_gclk_chan_disable+0x50>)
    3458:	4002      	ands	r2, r0
    345a:	4313      	orrs	r3, r2
    345c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    345e:	4b06      	ldr	r3, [pc, #24]	; (3478 <system_gclk_chan_disable+0x58>)
    3460:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3462:	bd10      	pop	{r4, pc}
    3464:	000019dd 	.word	0x000019dd
    3468:	40000c02 	.word	0x40000c02
    346c:	40000c00 	.word	0x40000c00
    3470:	fffff0ff 	.word	0xfffff0ff
    3474:	ffffbfff 	.word	0xffffbfff
    3478:	00001a1d 	.word	0x00001a1d

0000347c <system_gclk_chan_set_config>:
{
    347c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    347e:	780c      	ldrb	r4, [r1, #0]
    3480:	0224      	lsls	r4, r4, #8
    3482:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <system_gclk_chan_set_config+0x14>)
    3486:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3488:	b2a4      	uxth	r4, r4
    348a:	4b02      	ldr	r3, [pc, #8]	; (3494 <system_gclk_chan_set_config+0x18>)
    348c:	805c      	strh	r4, [r3, #2]
}
    348e:	bd10      	pop	{r4, pc}
    3490:	00003421 	.word	0x00003421
    3494:	40000c00 	.word	0x40000c00

00003498 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3498:	b510      	push	{r4, lr}
    349a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    349c:	4b06      	ldr	r3, [pc, #24]	; (34b8 <system_gclk_chan_get_hz+0x20>)
    349e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    34a0:	4b06      	ldr	r3, [pc, #24]	; (34bc <system_gclk_chan_get_hz+0x24>)
    34a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    34a4:	4b06      	ldr	r3, [pc, #24]	; (34c0 <system_gclk_chan_get_hz+0x28>)
    34a6:	885c      	ldrh	r4, [r3, #2]
    34a8:	0524      	lsls	r4, r4, #20
    34aa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    34ac:	4b05      	ldr	r3, [pc, #20]	; (34c4 <system_gclk_chan_get_hz+0x2c>)
    34ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    34b0:	0020      	movs	r0, r4
    34b2:	4b05      	ldr	r3, [pc, #20]	; (34c8 <system_gclk_chan_get_hz+0x30>)
    34b4:	4798      	blx	r3
}
    34b6:	bd10      	pop	{r4, pc}
    34b8:	000019dd 	.word	0x000019dd
    34bc:	40000c02 	.word	0x40000c02
    34c0:	40000c00 	.word	0x40000c00
    34c4:	00001a1d 	.word	0x00001a1d
    34c8:	00003365 	.word	0x00003365

000034cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    34cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    34ce:	78d3      	ldrb	r3, [r2, #3]
    34d0:	2b00      	cmp	r3, #0
    34d2:	d135      	bne.n	3540 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    34d4:	7813      	ldrb	r3, [r2, #0]
    34d6:	2b80      	cmp	r3, #128	; 0x80
    34d8:	d029      	beq.n	352e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    34da:	061b      	lsls	r3, r3, #24
    34dc:	2480      	movs	r4, #128	; 0x80
    34de:	0264      	lsls	r4, r4, #9
    34e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    34e2:	7854      	ldrb	r4, [r2, #1]
    34e4:	2502      	movs	r5, #2
    34e6:	43ac      	bics	r4, r5
    34e8:	d106      	bne.n	34f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    34ea:	7894      	ldrb	r4, [r2, #2]
    34ec:	2c00      	cmp	r4, #0
    34ee:	d120      	bne.n	3532 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    34f0:	2480      	movs	r4, #128	; 0x80
    34f2:	02a4      	lsls	r4, r4, #10
    34f4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    34f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    34f8:	7854      	ldrb	r4, [r2, #1]
    34fa:	3c01      	subs	r4, #1
    34fc:	2c01      	cmp	r4, #1
    34fe:	d91c      	bls.n	353a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3500:	040d      	lsls	r5, r1, #16
    3502:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3504:	24a0      	movs	r4, #160	; 0xa0
    3506:	05e4      	lsls	r4, r4, #23
    3508:	432c      	orrs	r4, r5
    350a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    350c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    350e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3510:	24d0      	movs	r4, #208	; 0xd0
    3512:	0624      	lsls	r4, r4, #24
    3514:	432c      	orrs	r4, r5
    3516:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3518:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    351a:	78d4      	ldrb	r4, [r2, #3]
    351c:	2c00      	cmp	r4, #0
    351e:	d122      	bne.n	3566 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3520:	035b      	lsls	r3, r3, #13
    3522:	d51c      	bpl.n	355e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3524:	7893      	ldrb	r3, [r2, #2]
    3526:	2b01      	cmp	r3, #1
    3528:	d01e      	beq.n	3568 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    352a:	6141      	str	r1, [r0, #20]
    352c:	e017      	b.n	355e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    352e:	2300      	movs	r3, #0
    3530:	e7d7      	b.n	34e2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3532:	24c0      	movs	r4, #192	; 0xc0
    3534:	02e4      	lsls	r4, r4, #11
    3536:	4323      	orrs	r3, r4
    3538:	e7dd      	b.n	34f6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    353a:	4c0d      	ldr	r4, [pc, #52]	; (3570 <_system_pinmux_config+0xa4>)
    353c:	4023      	ands	r3, r4
    353e:	e7df      	b.n	3500 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3540:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3542:	040c      	lsls	r4, r1, #16
    3544:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3546:	23a0      	movs	r3, #160	; 0xa0
    3548:	05db      	lsls	r3, r3, #23
    354a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    354c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    354e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3550:	23d0      	movs	r3, #208	; 0xd0
    3552:	061b      	lsls	r3, r3, #24
    3554:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3556:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3558:	78d3      	ldrb	r3, [r2, #3]
    355a:	2b00      	cmp	r3, #0
    355c:	d103      	bne.n	3566 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    355e:	7853      	ldrb	r3, [r2, #1]
    3560:	3b01      	subs	r3, #1
    3562:	2b01      	cmp	r3, #1
    3564:	d902      	bls.n	356c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3566:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3568:	6181      	str	r1, [r0, #24]
    356a:	e7f8      	b.n	355e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    356c:	6081      	str	r1, [r0, #8]
}
    356e:	e7fa      	b.n	3566 <_system_pinmux_config+0x9a>
    3570:	fffbffff 	.word	0xfffbffff

00003574 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3574:	b510      	push	{r4, lr}
    3576:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3578:	09c1      	lsrs	r1, r0, #7
		return NULL;
    357a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    357c:	2900      	cmp	r1, #0
    357e:	d104      	bne.n	358a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3580:	0943      	lsrs	r3, r0, #5
    3582:	01db      	lsls	r3, r3, #7
    3584:	4905      	ldr	r1, [pc, #20]	; (359c <system_pinmux_pin_set_config+0x28>)
    3586:	468c      	mov	ip, r1
    3588:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    358a:	241f      	movs	r4, #31
    358c:	4020      	ands	r0, r4
    358e:	2101      	movs	r1, #1
    3590:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3592:	0018      	movs	r0, r3
    3594:	4b02      	ldr	r3, [pc, #8]	; (35a0 <system_pinmux_pin_set_config+0x2c>)
    3596:	4798      	blx	r3
}
    3598:	bd10      	pop	{r4, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	41004400 	.word	0x41004400
    35a0:	000034cd 	.word	0x000034cd

000035a4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    35a4:	4770      	bx	lr
	...

000035a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    35a8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    35aa:	4b05      	ldr	r3, [pc, #20]	; (35c0 <system_init+0x18>)
    35ac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    35ae:	4b05      	ldr	r3, [pc, #20]	; (35c4 <system_init+0x1c>)
    35b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    35b2:	4b05      	ldr	r3, [pc, #20]	; (35c8 <system_init+0x20>)
    35b4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    35b6:	4b05      	ldr	r3, [pc, #20]	; (35cc <system_init+0x24>)
    35b8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    35ba:	4b05      	ldr	r3, [pc, #20]	; (35d0 <system_init+0x28>)
    35bc:	4798      	blx	r3
}
    35be:	bd10      	pop	{r4, pc}
    35c0:	000030f1 	.word	0x000030f1
    35c4:	00000259 	.word	0x00000259
    35c8:	000035a5 	.word	0x000035a5
    35cc:	000035a5 	.word	0x000035a5
    35d0:	000035a5 	.word	0x000035a5

000035d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    35d4:	e7fe      	b.n	35d4 <Dummy_Handler>
	...

000035d8 <Reset_Handler>:
{
    35d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    35da:	4a2a      	ldr	r2, [pc, #168]	; (3684 <Reset_Handler+0xac>)
    35dc:	4b2a      	ldr	r3, [pc, #168]	; (3688 <Reset_Handler+0xb0>)
    35de:	429a      	cmp	r2, r3
    35e0:	d011      	beq.n	3606 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    35e2:	001a      	movs	r2, r3
    35e4:	4b29      	ldr	r3, [pc, #164]	; (368c <Reset_Handler+0xb4>)
    35e6:	429a      	cmp	r2, r3
    35e8:	d20d      	bcs.n	3606 <Reset_Handler+0x2e>
    35ea:	4a29      	ldr	r2, [pc, #164]	; (3690 <Reset_Handler+0xb8>)
    35ec:	3303      	adds	r3, #3
    35ee:	1a9b      	subs	r3, r3, r2
    35f0:	089b      	lsrs	r3, r3, #2
    35f2:	3301      	adds	r3, #1
    35f4:	009b      	lsls	r3, r3, #2
    35f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    35f8:	4823      	ldr	r0, [pc, #140]	; (3688 <Reset_Handler+0xb0>)
    35fa:	4922      	ldr	r1, [pc, #136]	; (3684 <Reset_Handler+0xac>)
    35fc:	588c      	ldr	r4, [r1, r2]
    35fe:	5084      	str	r4, [r0, r2]
    3600:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3602:	429a      	cmp	r2, r3
    3604:	d1fa      	bne.n	35fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3606:	4a23      	ldr	r2, [pc, #140]	; (3694 <Reset_Handler+0xbc>)
    3608:	4b23      	ldr	r3, [pc, #140]	; (3698 <Reset_Handler+0xc0>)
    360a:	429a      	cmp	r2, r3
    360c:	d20a      	bcs.n	3624 <Reset_Handler+0x4c>
    360e:	43d3      	mvns	r3, r2
    3610:	4921      	ldr	r1, [pc, #132]	; (3698 <Reset_Handler+0xc0>)
    3612:	185b      	adds	r3, r3, r1
    3614:	2103      	movs	r1, #3
    3616:	438b      	bics	r3, r1
    3618:	3304      	adds	r3, #4
    361a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    361c:	2100      	movs	r1, #0
    361e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3620:	4293      	cmp	r3, r2
    3622:	d1fc      	bne.n	361e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3624:	4a1d      	ldr	r2, [pc, #116]	; (369c <Reset_Handler+0xc4>)
    3626:	21ff      	movs	r1, #255	; 0xff
    3628:	4b1d      	ldr	r3, [pc, #116]	; (36a0 <Reset_Handler+0xc8>)
    362a:	438b      	bics	r3, r1
    362c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    362e:	39fd      	subs	r1, #253	; 0xfd
    3630:	2390      	movs	r3, #144	; 0x90
    3632:	005b      	lsls	r3, r3, #1
    3634:	4a1b      	ldr	r2, [pc, #108]	; (36a4 <Reset_Handler+0xcc>)
    3636:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3638:	4a1b      	ldr	r2, [pc, #108]	; (36a8 <Reset_Handler+0xd0>)
    363a:	78d3      	ldrb	r3, [r2, #3]
    363c:	2503      	movs	r5, #3
    363e:	43ab      	bics	r3, r5
    3640:	2402      	movs	r4, #2
    3642:	4323      	orrs	r3, r4
    3644:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3646:	78d3      	ldrb	r3, [r2, #3]
    3648:	270c      	movs	r7, #12
    364a:	43bb      	bics	r3, r7
    364c:	2608      	movs	r6, #8
    364e:	4333      	orrs	r3, r6
    3650:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3652:	4b16      	ldr	r3, [pc, #88]	; (36ac <Reset_Handler+0xd4>)
    3654:	7b98      	ldrb	r0, [r3, #14]
    3656:	2230      	movs	r2, #48	; 0x30
    3658:	4390      	bics	r0, r2
    365a:	2220      	movs	r2, #32
    365c:	4310      	orrs	r0, r2
    365e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3660:	7b99      	ldrb	r1, [r3, #14]
    3662:	43b9      	bics	r1, r7
    3664:	4331      	orrs	r1, r6
    3666:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3668:	7b9a      	ldrb	r2, [r3, #14]
    366a:	43aa      	bics	r2, r5
    366c:	4322      	orrs	r2, r4
    366e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3670:	4a0f      	ldr	r2, [pc, #60]	; (36b0 <Reset_Handler+0xd8>)
    3672:	6853      	ldr	r3, [r2, #4]
    3674:	2180      	movs	r1, #128	; 0x80
    3676:	430b      	orrs	r3, r1
    3678:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    367a:	4b0e      	ldr	r3, [pc, #56]	; (36b4 <Reset_Handler+0xdc>)
    367c:	4798      	blx	r3
        main();
    367e:	4b0e      	ldr	r3, [pc, #56]	; (36b8 <Reset_Handler+0xe0>)
    3680:	4798      	blx	r3
    3682:	e7fe      	b.n	3682 <Reset_Handler+0xaa>
    3684:	00007880 	.word	0x00007880
    3688:	20000000 	.word	0x20000000
    368c:	20000070 	.word	0x20000070
    3690:	20000004 	.word	0x20000004
    3694:	20000070 	.word	0x20000070
    3698:	20000a00 	.word	0x20000a00
    369c:	e000ed00 	.word	0xe000ed00
    36a0:	00000000 	.word	0x00000000
    36a4:	41007000 	.word	0x41007000
    36a8:	41005000 	.word	0x41005000
    36ac:	41004800 	.word	0x41004800
    36b0:	41004000 	.word	0x41004000
    36b4:	00005c4d 	.word	0x00005c4d
    36b8:	000055e1 	.word	0x000055e1

000036bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36be:	46c6      	mov	lr, r8
    36c0:	b500      	push	{lr}
    36c2:	000c      	movs	r4, r1
    36c4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    36c6:	2800      	cmp	r0, #0
    36c8:	d10f      	bne.n	36ea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    36ca:	2a00      	cmp	r2, #0
    36cc:	dd11      	ble.n	36f2 <_read+0x36>
    36ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    36d0:	4e09      	ldr	r6, [pc, #36]	; (36f8 <_read+0x3c>)
    36d2:	4d0a      	ldr	r5, [pc, #40]	; (36fc <_read+0x40>)
    36d4:	6830      	ldr	r0, [r6, #0]
    36d6:	0021      	movs	r1, r4
    36d8:	682b      	ldr	r3, [r5, #0]
    36da:	4798      	blx	r3
		ptr++;
    36dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    36de:	42bc      	cmp	r4, r7
    36e0:	d1f8      	bne.n	36d4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    36e2:	4640      	mov	r0, r8
    36e4:	bc04      	pop	{r2}
    36e6:	4690      	mov	r8, r2
    36e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    36ea:	2301      	movs	r3, #1
    36ec:	425b      	negs	r3, r3
    36ee:	4698      	mov	r8, r3
    36f0:	e7f7      	b.n	36e2 <_read+0x26>
	for (; len > 0; --len) {
    36f2:	4680      	mov	r8, r0
    36f4:	e7f5      	b.n	36e2 <_read+0x26>
    36f6:	46c0      	nop			; (mov r8, r8)
    36f8:	200009f0 	.word	0x200009f0
    36fc:	200009e8 	.word	0x200009e8

00003700 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3700:	b5f0      	push	{r4, r5, r6, r7, lr}
    3702:	46c6      	mov	lr, r8
    3704:	b500      	push	{lr}
    3706:	000e      	movs	r6, r1
    3708:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    370a:	3801      	subs	r0, #1
    370c:	2802      	cmp	r0, #2
    370e:	d810      	bhi.n	3732 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3710:	2a00      	cmp	r2, #0
    3712:	d011      	beq.n	3738 <_write+0x38>
    3714:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3716:	4b0c      	ldr	r3, [pc, #48]	; (3748 <_write+0x48>)
    3718:	4698      	mov	r8, r3
    371a:	4f0c      	ldr	r7, [pc, #48]	; (374c <_write+0x4c>)
    371c:	4643      	mov	r3, r8
    371e:	6818      	ldr	r0, [r3, #0]
    3720:	5d31      	ldrb	r1, [r6, r4]
    3722:	683b      	ldr	r3, [r7, #0]
    3724:	4798      	blx	r3
    3726:	2800      	cmp	r0, #0
    3728:	db08      	blt.n	373c <_write+0x3c>
			return -1;
		}
		++nChars;
    372a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    372c:	42a5      	cmp	r5, r4
    372e:	d1f5      	bne.n	371c <_write+0x1c>
    3730:	e006      	b.n	3740 <_write+0x40>
		return -1;
    3732:	2401      	movs	r4, #1
    3734:	4264      	negs	r4, r4
    3736:	e003      	b.n	3740 <_write+0x40>
	for (; len != 0; --len) {
    3738:	0014      	movs	r4, r2
    373a:	e001      	b.n	3740 <_write+0x40>
			return -1;
    373c:	2401      	movs	r4, #1
    373e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3740:	0020      	movs	r0, r4
    3742:	bc04      	pop	{r2}
    3744:	4690      	mov	r8, r2
    3746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3748:	200009f0 	.word	0x200009f0
    374c:	200009ec 	.word	0x200009ec

00003750 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3750:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3752:	4a06      	ldr	r2, [pc, #24]	; (376c <_sbrk+0x1c>)
    3754:	6812      	ldr	r2, [r2, #0]
    3756:	2a00      	cmp	r2, #0
    3758:	d004      	beq.n	3764 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    375a:	4a04      	ldr	r2, [pc, #16]	; (376c <_sbrk+0x1c>)
    375c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    375e:	18c3      	adds	r3, r0, r3
    3760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3762:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3764:	4902      	ldr	r1, [pc, #8]	; (3770 <_sbrk+0x20>)
    3766:	4a01      	ldr	r2, [pc, #4]	; (376c <_sbrk+0x1c>)
    3768:	6011      	str	r1, [r2, #0]
    376a:	e7f6      	b.n	375a <_sbrk+0xa>
    376c:	20000154 	.word	0x20000154
    3770:	20002a00 	.word	0x20002a00

00003774 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3774:	2001      	movs	r0, #1
    3776:	4240      	negs	r0, r0
    3778:	4770      	bx	lr

0000377a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    377a:	2380      	movs	r3, #128	; 0x80
    377c:	019b      	lsls	r3, r3, #6
    377e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3780:	2000      	movs	r0, #0
    3782:	4770      	bx	lr

00003784 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3784:	2000      	movs	r0, #0
    3786:	4770      	bx	lr

00003788 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3788:	b530      	push	{r4, r5, lr}
    378a:	b087      	sub	sp, #28
    378c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    378e:	aa01      	add	r2, sp, #4
    3790:	23a0      	movs	r3, #160	; 0xa0
    3792:	011b      	lsls	r3, r3, #4
    3794:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3796:	2300      	movs	r3, #0
    3798:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    379a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    379c:	21fa      	movs	r1, #250	; 0xfa
    379e:	00c9      	lsls	r1, r1, #3
    37a0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    37a2:	2101      	movs	r1, #1
    37a4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    37a6:	2004      	movs	r0, #4
    37a8:	7210      	strb	r0, [r2, #8]
    37aa:	7253      	strb	r3, [r2, #9]
    37ac:	7293      	strb	r3, [r2, #10]
    37ae:	72d3      	strb	r3, [r2, #11]
    37b0:	7311      	strb	r1, [r2, #12]
    37b2:	7351      	strb	r1, [r2, #13]
    37b4:	4b14      	ldr	r3, [pc, #80]	; (3808 <disk_initialize+0x80>)
    37b6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    37b8:	2306      	movs	r3, #6
    37ba:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    37bc:	4d13      	ldr	r5, [pc, #76]	; (380c <disk_initialize+0x84>)
    37be:	4914      	ldr	r1, [pc, #80]	; (3810 <disk_initialize+0x88>)
    37c0:	0028      	movs	r0, r5
    37c2:	4b14      	ldr	r3, [pc, #80]	; (3814 <disk_initialize+0x8c>)
    37c4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    37c6:	0028      	movs	r0, r5
    37c8:	4b13      	ldr	r3, [pc, #76]	; (3818 <disk_initialize+0x90>)
    37ca:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    37cc:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    37ce:	2c01      	cmp	r4, #1
    37d0:	d901      	bls.n	37d6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    37d2:	b007      	add	sp, #28
    37d4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    37d6:	0020      	movs	r0, r4
    37d8:	4b10      	ldr	r3, [pc, #64]	; (381c <disk_initialize+0x94>)
    37da:	4798      	blx	r3
    37dc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    37de:	2803      	cmp	r0, #3
    37e0:	d106      	bne.n	37f0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    37e2:	0020      	movs	r0, r4
    37e4:	4b0d      	ldr	r3, [pc, #52]	; (381c <disk_initialize+0x94>)
    37e6:	4798      	blx	r3
    37e8:	0003      	movs	r3, r0
		return STA_NOINIT;
    37ea:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    37ec:	2b03      	cmp	r3, #3
    37ee:	d0f0      	beq.n	37d2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    37f0:	2b00      	cmp	r3, #0
    37f2:	d106      	bne.n	3802 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    37f4:	0020      	movs	r0, r4
    37f6:	4b0a      	ldr	r3, [pc, #40]	; (3820 <disk_initialize+0x98>)
    37f8:	4798      	blx	r3
	return 0;
    37fa:	1e43      	subs	r3, r0, #1
    37fc:	4198      	sbcs	r0, r3
    37fe:	0080      	lsls	r0, r0, #2
    3800:	e7e7      	b.n	37d2 <disk_initialize+0x4a>
		return STA_NOINIT;
    3802:	2001      	movs	r0, #1
    3804:	e7e5      	b.n	37d2 <disk_initialize+0x4a>
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	000007de 	.word	0x000007de
    380c:	200009f4 	.word	0x200009f4
    3810:	40001400 	.word	0x40001400
    3814:	00001bb5 	.word	0x00001bb5
    3818:	00001a71 	.word	0x00001a71
    381c:	00001949 	.word	0x00001949
    3820:	00001985 	.word	0x00001985

00003824 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3824:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3826:	4b05      	ldr	r3, [pc, #20]	; (383c <disk_status+0x18>)
    3828:	4798      	blx	r3
    382a:	1e03      	subs	r3, r0, #0
    382c:	d004      	beq.n	3838 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    382e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3830:	2b02      	cmp	r3, #2
    3832:	d000      	beq.n	3836 <disk_status+0x12>
	default:
		return STA_NOINIT;
    3834:	3802      	subs	r0, #2
	}
}
    3836:	bd10      	pop	{r4, pc}
		return 0;
    3838:	2000      	movs	r0, #0
    383a:	e7fc      	b.n	3836 <disk_status+0x12>
    383c:	00001949 	.word	0x00001949

00003840 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3840:	b5f0      	push	{r4, r5, r6, r7, lr}
    3842:	46de      	mov	lr, fp
    3844:	464f      	mov	r7, r9
    3846:	4646      	mov	r6, r8
    3848:	b5c0      	push	{r6, r7, lr}
    384a:	b084      	sub	sp, #16
    384c:	9001      	str	r0, [sp, #4]
    384e:	000d      	movs	r5, r1
    3850:	0014      	movs	r4, r2
    3852:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3854:	4b18      	ldr	r3, [pc, #96]	; (38b8 <disk_read+0x78>)
    3856:	4798      	blx	r3
    3858:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    385a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    385c:	2e00      	cmp	r6, #0
    385e:	d105      	bne.n	386c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3860:	b004      	add	sp, #16
    3862:	bc1c      	pop	{r2, r3, r4}
    3864:	4690      	mov	r8, r2
    3866:	4699      	mov	r9, r3
    3868:	46a3      	mov	fp, r4
    386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    386c:	a903      	add	r1, sp, #12
    386e:	9801      	ldr	r0, [sp, #4]
    3870:	4b12      	ldr	r3, [pc, #72]	; (38bc <disk_read+0x7c>)
    3872:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3874:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3876:	0032      	movs	r2, r6
    3878:	437a      	muls	r2, r7
    387a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    387c:	9b03      	ldr	r3, [sp, #12]
    387e:	3301      	adds	r3, #1
    3880:	4373      	muls	r3, r6
		return RES_PARERR;
    3882:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3884:	429a      	cmp	r2, r3
    3886:	d8eb      	bhi.n	3860 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3888:	2f00      	cmp	r7, #0
    388a:	d011      	beq.n	38b0 <disk_read+0x70>
    388c:	0273      	lsls	r3, r6, #9
    388e:	4698      	mov	r8, r3
    3890:	1c7b      	adds	r3, r7, #1
    3892:	469b      	mov	fp, r3
    3894:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3896:	4e0a      	ldr	r6, [pc, #40]	; (38c0 <disk_read+0x80>)
    3898:	002a      	movs	r2, r5
    389a:	0021      	movs	r1, r4
    389c:	9801      	ldr	r0, [sp, #4]
    389e:	47b0      	blx	r6
    38a0:	2800      	cmp	r0, #0
    38a2:	d107      	bne.n	38b4 <disk_read+0x74>
    38a4:	3701      	adds	r7, #1
    38a6:	444c      	add	r4, r9
    38a8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    38aa:	455f      	cmp	r7, fp
    38ac:	d1f4      	bne.n	3898 <disk_read+0x58>
    38ae:	e7d7      	b.n	3860 <disk_read+0x20>
	return RES_OK;
    38b0:	2000      	movs	r0, #0
    38b2:	e7d5      	b.n	3860 <disk_read+0x20>
			return RES_ERROR;
    38b4:	2001      	movs	r0, #1
    38b6:	e7d3      	b.n	3860 <disk_read+0x20>
    38b8:	0000197d 	.word	0x0000197d
    38bc:	00001961 	.word	0x00001961
    38c0:	0000199d 	.word	0x0000199d

000038c4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    38c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c6:	46de      	mov	lr, fp
    38c8:	464f      	mov	r7, r9
    38ca:	4646      	mov	r6, r8
    38cc:	b5c0      	push	{r6, r7, lr}
    38ce:	b084      	sub	sp, #16
    38d0:	9001      	str	r0, [sp, #4]
    38d2:	000d      	movs	r5, r1
    38d4:	0014      	movs	r4, r2
    38d6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    38d8:	4b18      	ldr	r3, [pc, #96]	; (393c <disk_write+0x78>)
    38da:	4798      	blx	r3
    38dc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    38de:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    38e0:	2e00      	cmp	r6, #0
    38e2:	d105      	bne.n	38f0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    38e4:	b004      	add	sp, #16
    38e6:	bc1c      	pop	{r2, r3, r4}
    38e8:	4690      	mov	r8, r2
    38ea:	4699      	mov	r9, r3
    38ec:	46a3      	mov	fp, r4
    38ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    38f0:	a903      	add	r1, sp, #12
    38f2:	9801      	ldr	r0, [sp, #4]
    38f4:	4b12      	ldr	r3, [pc, #72]	; (3940 <disk_write+0x7c>)
    38f6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    38f8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    38fa:	0032      	movs	r2, r6
    38fc:	437a      	muls	r2, r7
    38fe:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3900:	9b03      	ldr	r3, [sp, #12]
    3902:	3301      	adds	r3, #1
    3904:	4373      	muls	r3, r6
		return RES_PARERR;
    3906:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3908:	429a      	cmp	r2, r3
    390a:	d8eb      	bhi.n	38e4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    390c:	2f00      	cmp	r7, #0
    390e:	d011      	beq.n	3934 <disk_write+0x70>
    3910:	0273      	lsls	r3, r6, #9
    3912:	4698      	mov	r8, r3
    3914:	1c7b      	adds	r3, r7, #1
    3916:	469b      	mov	fp, r3
    3918:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    391a:	4e0a      	ldr	r6, [pc, #40]	; (3944 <disk_write+0x80>)
    391c:	002a      	movs	r2, r5
    391e:	0021      	movs	r1, r4
    3920:	9801      	ldr	r0, [sp, #4]
    3922:	47b0      	blx	r6
    3924:	2800      	cmp	r0, #0
    3926:	d107      	bne.n	3938 <disk_write+0x74>
    3928:	3701      	adds	r7, #1
    392a:	444c      	add	r4, r9
    392c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    392e:	455f      	cmp	r7, fp
    3930:	d1f4      	bne.n	391c <disk_write+0x58>
    3932:	e7d7      	b.n	38e4 <disk_write+0x20>
	return RES_OK;
    3934:	2000      	movs	r0, #0
    3936:	e7d5      	b.n	38e4 <disk_write+0x20>
			return RES_ERROR;
    3938:	2001      	movs	r0, #1
    393a:	e7d3      	b.n	38e4 <disk_write+0x20>
    393c:	0000197d 	.word	0x0000197d
    3940:	00001961 	.word	0x00001961
    3944:	000019bd 	.word	0x000019bd

00003948 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3948:	b510      	push	{r4, lr}
    394a:	b082      	sub	sp, #8
    394c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    394e:	2901      	cmp	r1, #1
    3950:	d00b      	beq.n	396a <disk_ioctl+0x22>
    3952:	2900      	cmp	r1, #0
    3954:	d020      	beq.n	3998 <disk_ioctl+0x50>
    3956:	2902      	cmp	r1, #2
    3958:	d00f      	beq.n	397a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    395a:	2004      	movs	r0, #4
	switch (ctrl) {
    395c:	2903      	cmp	r1, #3
    395e:	d102      	bne.n	3966 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3960:	2301      	movs	r3, #1
    3962:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3964:	2000      	movs	r0, #0
	}

	return res;
}
    3966:	b002      	add	sp, #8
    3968:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    396a:	a901      	add	r1, sp, #4
    396c:	4b0e      	ldr	r3, [pc, #56]	; (39a8 <disk_ioctl+0x60>)
    396e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3970:	9b01      	ldr	r3, [sp, #4]
    3972:	3301      	adds	r3, #1
    3974:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3976:	2000      	movs	r0, #0
	break;
    3978:	e7f5      	b.n	3966 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    397a:	4b0c      	ldr	r3, [pc, #48]	; (39ac <disk_ioctl+0x64>)
    397c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    397e:	1e43      	subs	r3, r0, #1
    3980:	b2db      	uxtb	r3, r3
    3982:	2b01      	cmp	r3, #1
    3984:	d904      	bls.n	3990 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3986:	1f03      	subs	r3, r0, #4
    3988:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    398a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    398c:	4213      	tst	r3, r2
    398e:	d1ea      	bne.n	3966 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3990:	2300      	movs	r3, #0
    3992:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3994:	2000      	movs	r0, #0
	break;
    3996:	e7e6      	b.n	3966 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3998:	4b05      	ldr	r3, [pc, #20]	; (39b0 <disk_ioctl+0x68>)
    399a:	4798      	blx	r3
    399c:	2800      	cmp	r0, #0
    399e:	d001      	beq.n	39a4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    39a0:	2003      	movs	r0, #3
    39a2:	e7e0      	b.n	3966 <disk_ioctl+0x1e>
			res = RES_OK;
    39a4:	2000      	movs	r0, #0
    39a6:	e7de      	b.n	3966 <disk_ioctl+0x1e>
    39a8:	00001961 	.word	0x00001961
    39ac:	0000197d 	.word	0x0000197d
    39b0:	00001949 	.word	0x00001949

000039b4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    39b4:	b500      	push	{lr}
    39b6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    39b8:	4669      	mov	r1, sp
    39ba:	480f      	ldr	r0, [pc, #60]	; (39f8 <get_fattime+0x44>)
    39bc:	4b0f      	ldr	r3, [pc, #60]	; (39fc <get_fattime+0x48>)
    39be:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    39c0:	466b      	mov	r3, sp
    39c2:	7958      	ldrb	r0, [r3, #5]
    39c4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    39c6:	791b      	ldrb	r3, [r3, #4]
    39c8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    39ca:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    39cc:	466b      	mov	r3, sp
    39ce:	789b      	ldrb	r3, [r3, #2]
    39d0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    39d2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    39d4:	466b      	mov	r3, sp
    39d6:	785b      	ldrb	r3, [r3, #1]
    39d8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    39da:	4318      	orrs	r0, r3
    39dc:	466b      	mov	r3, sp
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	085b      	lsrs	r3, r3, #1
    39e2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    39e4:	466b      	mov	r3, sp
    39e6:	88db      	ldrh	r3, [r3, #6]
    39e8:	4a05      	ldr	r2, [pc, #20]	; (3a00 <get_fattime+0x4c>)
    39ea:	4694      	mov	ip, r2
    39ec:	4463      	add	r3, ip
    39ee:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    39f0:	4318      	orrs	r0, r3

	return ul_time;
}
    39f2:	b003      	add	sp, #12
    39f4:	bd00      	pop	{pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	200009f4 	.word	0x200009f4
    39fc:	00001b3d 	.word	0x00001b3d
    3a00:	fffff844 	.word	0xfffff844

00003a04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3a04:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3a06:	2a00      	cmp	r2, #0
    3a08:	d005      	beq.n	3a16 <mem_cpy+0x12>
    3a0a:	2300      	movs	r3, #0
		*d++ = *s++;
    3a0c:	5ccc      	ldrb	r4, [r1, r3]
    3a0e:	54c4      	strb	r4, [r0, r3]
    3a10:	3301      	adds	r3, #1
	while (cnt--)
    3a12:	4293      	cmp	r3, r2
    3a14:	d1fa      	bne.n	3a0c <mem_cpy+0x8>
}
    3a16:	bd10      	pop	{r4, pc}

00003a18 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3a18:	2a00      	cmp	r2, #0
    3a1a:	d005      	beq.n	3a28 <mem_set+0x10>
    3a1c:	0003      	movs	r3, r0
    3a1e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3a20:	7019      	strb	r1, [r3, #0]
    3a22:	3301      	adds	r3, #1
	while (cnt--)
    3a24:	4293      	cmp	r3, r2
    3a26:	d1fb      	bne.n	3a20 <mem_set+0x8>
}
    3a28:	4770      	bx	lr

00003a2a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3a2a:	0002      	movs	r2, r0
	clst -= 2;
    3a2c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3a2e:	6983      	ldr	r3, [r0, #24]
    3a30:	3b02      	subs	r3, #2
    3a32:	2000      	movs	r0, #0
    3a34:	4299      	cmp	r1, r3
    3a36:	d203      	bcs.n	3a40 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3a38:	7890      	ldrb	r0, [r2, #2]
    3a3a:	4341      	muls	r1, r0
    3a3c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3a3e:	1808      	adds	r0, r1, r0
}
    3a40:	4770      	bx	lr

00003a42 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3a42:	0002      	movs	r2, r0
    3a44:	0001      	movs	r1, r0
    3a46:	310b      	adds	r1, #11
	BYTE sum = 0;
    3a48:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3a4a:	0843      	lsrs	r3, r0, #1
    3a4c:	01c0      	lsls	r0, r0, #7
    3a4e:	4303      	orrs	r3, r0
    3a50:	7810      	ldrb	r0, [r2, #0]
    3a52:	1818      	adds	r0, r3, r0
    3a54:	b2c0      	uxtb	r0, r0
    3a56:	3201      	adds	r2, #1
    3a58:	428a      	cmp	r2, r1
    3a5a:	d1f6      	bne.n	3a4a <sum_sfn+0x8>
	return sum;
}
    3a5c:	4770      	bx	lr
	...

00003a60 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3a60:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3a62:	2800      	cmp	r0, #0
    3a64:	d010      	beq.n	3a88 <validate+0x28>
    3a66:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3a68:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3a6a:	2a00      	cmp	r2, #0
    3a6c:	d101      	bne.n	3a72 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3a6e:	0018      	movs	r0, r3
    3a70:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3a72:	88c2      	ldrh	r2, [r0, #6]
    3a74:	428a      	cmp	r2, r1
    3a76:	d1fa      	bne.n	3a6e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3a78:	7840      	ldrb	r0, [r0, #1]
    3a7a:	4b04      	ldr	r3, [pc, #16]	; (3a8c <validate+0x2c>)
    3a7c:	4798      	blx	r3
		return FR_NOT_READY;
    3a7e:	2303      	movs	r3, #3
	return FR_OK;
    3a80:	07c0      	lsls	r0, r0, #31
    3a82:	17c0      	asrs	r0, r0, #31
    3a84:	4003      	ands	r3, r0
    3a86:	e7f2      	b.n	3a6e <validate+0xe>
		return FR_INVALID_OBJECT;
    3a88:	2309      	movs	r3, #9
    3a8a:	e7f0      	b.n	3a6e <validate+0xe>
    3a8c:	00003825 	.word	0x00003825

00003a90 <check_fs>:
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	0004      	movs	r4, r0
    3a94:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3a96:	0001      	movs	r1, r0
    3a98:	3130      	adds	r1, #48	; 0x30
    3a9a:	7840      	ldrb	r0, [r0, #1]
    3a9c:	2301      	movs	r3, #1
    3a9e:	4d1f      	ldr	r5, [pc, #124]	; (3b1c <check_fs+0x8c>)
    3aa0:	47a8      	blx	r5
		return 3;
    3aa2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d001      	beq.n	3aac <check_fs+0x1c>
}
    3aa8:	0018      	movs	r0, r3
    3aaa:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3aac:	4b1c      	ldr	r3, [pc, #112]	; (3b20 <check_fs+0x90>)
    3aae:	5ce3      	ldrb	r3, [r4, r3]
    3ab0:	021b      	lsls	r3, r3, #8
    3ab2:	4a1c      	ldr	r2, [pc, #112]	; (3b24 <check_fs+0x94>)
    3ab4:	5ca2      	ldrb	r2, [r4, r2]
    3ab6:	431a      	orrs	r2, r3
    3ab8:	491b      	ldr	r1, [pc, #108]	; (3b28 <check_fs+0x98>)
    3aba:	b212      	sxth	r2, r2
		return 2;
    3abc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3abe:	428a      	cmp	r2, r1
    3ac0:	d1f2      	bne.n	3aa8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3ac2:	3367      	adds	r3, #103	; 0x67
    3ac4:	5ce3      	ldrb	r3, [r4, r3]
    3ac6:	061b      	lsls	r3, r3, #24
    3ac8:	2268      	movs	r2, #104	; 0x68
    3aca:	5ca2      	ldrb	r2, [r4, r2]
    3acc:	0412      	lsls	r2, r2, #16
    3ace:	4313      	orrs	r3, r2
    3ad0:	2266      	movs	r2, #102	; 0x66
    3ad2:	5ca2      	ldrb	r2, [r4, r2]
    3ad4:	4313      	orrs	r3, r2
    3ad6:	2267      	movs	r2, #103	; 0x67
    3ad8:	5ca2      	ldrb	r2, [r4, r2]
    3ada:	0212      	lsls	r2, r2, #8
    3adc:	4313      	orrs	r3, r2
    3ade:	021b      	lsls	r3, r3, #8
    3ae0:	0a1b      	lsrs	r3, r3, #8
    3ae2:	4a12      	ldr	r2, [pc, #72]	; (3b2c <check_fs+0x9c>)
    3ae4:	4293      	cmp	r3, r2
    3ae6:	d016      	beq.n	3b16 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3ae8:	2385      	movs	r3, #133	; 0x85
    3aea:	5ce3      	ldrb	r3, [r4, r3]
    3aec:	061b      	lsls	r3, r3, #24
    3aee:	2284      	movs	r2, #132	; 0x84
    3af0:	5ca2      	ldrb	r2, [r4, r2]
    3af2:	0412      	lsls	r2, r2, #16
    3af4:	4313      	orrs	r3, r2
    3af6:	2282      	movs	r2, #130	; 0x82
    3af8:	5ca2      	ldrb	r2, [r4, r2]
    3afa:	4313      	orrs	r3, r2
    3afc:	2283      	movs	r2, #131	; 0x83
    3afe:	5ca2      	ldrb	r2, [r4, r2]
    3b00:	0212      	lsls	r2, r2, #8
    3b02:	4313      	orrs	r3, r2
    3b04:	021b      	lsls	r3, r3, #8
    3b06:	0a1b      	lsrs	r3, r3, #8
    3b08:	4a09      	ldr	r2, [pc, #36]	; (3b30 <check_fs+0xa0>)
    3b0a:	4694      	mov	ip, r2
    3b0c:	4463      	add	r3, ip
    3b0e:	1e58      	subs	r0, r3, #1
    3b10:	4183      	sbcs	r3, r0
		return 3;
    3b12:	b2db      	uxtb	r3, r3
    3b14:	e7c8      	b.n	3aa8 <check_fs+0x18>
		return 0;
    3b16:	2300      	movs	r3, #0
    3b18:	e7c6      	b.n	3aa8 <check_fs+0x18>
    3b1a:	46c0      	nop			; (mov r8, r8)
    3b1c:	00003841 	.word	0x00003841
    3b20:	0000022f 	.word	0x0000022f
    3b24:	0000022e 	.word	0x0000022e
    3b28:	ffffaa55 	.word	0xffffaa55
    3b2c:	00544146 	.word	0x00544146
    3b30:	ffabbeba 	.word	0xffabbeba

00003b34 <chk_mounted>:
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	46d6      	mov	lr, sl
    3b38:	464f      	mov	r7, r9
    3b3a:	4646      	mov	r6, r8
    3b3c:	b5c0      	push	{r6, r7, lr}
    3b3e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3b40:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3b42:	781c      	ldrb	r4, [r3, #0]
    3b44:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3b46:	2c09      	cmp	r4, #9
    3b48:	d80e      	bhi.n	3b68 <chk_mounted+0x34>
    3b4a:	785a      	ldrb	r2, [r3, #1]
    3b4c:	2a3a      	cmp	r2, #58	; 0x3a
    3b4e:	d001      	beq.n	3b54 <chk_mounted+0x20>
    3b50:	2400      	movs	r4, #0
    3b52:	e00a      	b.n	3b6a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3b54:	3302      	adds	r3, #2
    3b56:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3b58:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3b5a:	2c07      	cmp	r4, #7
    3b5c:	d905      	bls.n	3b6a <chk_mounted+0x36>
}
    3b5e:	bc1c      	pop	{r2, r3, r4}
    3b60:	4690      	mov	r8, r2
    3b62:	4699      	mov	r9, r3
    3b64:	46a2      	mov	sl, r4
    3b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b68:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3b6a:	00a3      	lsls	r3, r4, #2
    3b6c:	4ac5      	ldr	r2, [pc, #788]	; (3e84 <chk_mounted+0x350>)
    3b6e:	589e      	ldr	r6, [r3, r2]
    3b70:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3b72:	2e00      	cmp	r6, #0
    3b74:	d100      	bne.n	3b78 <chk_mounted+0x44>
    3b76:	e0e8      	b.n	3d4a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3b78:	7833      	ldrb	r3, [r6, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d00d      	beq.n	3b9a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3b7e:	7870      	ldrb	r0, [r6, #1]
    3b80:	4bc1      	ldr	r3, [pc, #772]	; (3e88 <chk_mounted+0x354>)
    3b82:	4798      	blx	r3
    3b84:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3b86:	07c2      	lsls	r2, r0, #31
    3b88:	d407      	bmi.n	3b9a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3b8a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3b8c:	2d00      	cmp	r5, #0
    3b8e:	d0e6      	beq.n	3b5e <chk_mounted+0x2a>
    3b90:	075b      	lsls	r3, r3, #29
    3b92:	d400      	bmi.n	3b96 <chk_mounted+0x62>
    3b94:	e0db      	b.n	3d4e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3b96:	300a      	adds	r0, #10
    3b98:	e7e1      	b.n	3b5e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3b9a:	2300      	movs	r3, #0
    3b9c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3b9e:	b2e0      	uxtb	r0, r4
    3ba0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3ba2:	4bba      	ldr	r3, [pc, #744]	; (3e8c <chk_mounted+0x358>)
    3ba4:	4798      	blx	r3
    3ba6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3ba8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3baa:	07da      	lsls	r2, r3, #31
    3bac:	d4d7      	bmi.n	3b5e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3bae:	2d00      	cmp	r5, #0
    3bb0:	d002      	beq.n	3bb8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3bb2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3bb4:	075b      	lsls	r3, r3, #29
    3bb6:	d4d2      	bmi.n	3b5e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3bb8:	2100      	movs	r1, #0
    3bba:	0030      	movs	r0, r6
    3bbc:	4bb4      	ldr	r3, [pc, #720]	; (3e90 <chk_mounted+0x35c>)
    3bbe:	4798      	blx	r3
    3bc0:	0003      	movs	r3, r0
    3bc2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3bc4:	2801      	cmp	r0, #1
    3bc6:	d100      	bne.n	3bca <chk_mounted+0x96>
    3bc8:	e09a      	b.n	3d00 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3bca:	2b03      	cmp	r3, #3
    3bcc:	d100      	bne.n	3bd0 <chk_mounted+0x9c>
    3bce:	e0c0      	b.n	3d52 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3bd0:	200d      	movs	r0, #13
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d1c3      	bne.n	3b5e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3bd6:	333c      	adds	r3, #60	; 0x3c
    3bd8:	5cf2      	ldrb	r2, [r6, r3]
    3bda:	0212      	lsls	r2, r2, #8
    3bdc:	3b01      	subs	r3, #1
    3bde:	5cf3      	ldrb	r3, [r6, r3]
    3be0:	4313      	orrs	r3, r2
    3be2:	2280      	movs	r2, #128	; 0x80
    3be4:	0092      	lsls	r2, r2, #2
    3be6:	b21b      	sxth	r3, r3
    3be8:	4293      	cmp	r3, r2
    3bea:	d1b8      	bne.n	3b5e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3bec:	2347      	movs	r3, #71	; 0x47
    3bee:	5cf3      	ldrb	r3, [r6, r3]
    3bf0:	021b      	lsls	r3, r3, #8
    3bf2:	3abb      	subs	r2, #187	; 0xbb
    3bf4:	3aff      	subs	r2, #255	; 0xff
    3bf6:	5cb5      	ldrb	r5, [r6, r2]
    3bf8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3bfa:	d10d      	bne.n	3c18 <chk_mounted+0xe4>
    3bfc:	2357      	movs	r3, #87	; 0x57
    3bfe:	5cf5      	ldrb	r5, [r6, r3]
    3c00:	062d      	lsls	r5, r5, #24
    3c02:	3b01      	subs	r3, #1
    3c04:	5cf3      	ldrb	r3, [r6, r3]
    3c06:	041b      	lsls	r3, r3, #16
    3c08:	431d      	orrs	r5, r3
    3c0a:	2354      	movs	r3, #84	; 0x54
    3c0c:	5cf3      	ldrb	r3, [r6, r3]
    3c0e:	431d      	orrs	r5, r3
    3c10:	2355      	movs	r3, #85	; 0x55
    3c12:	5cf3      	ldrb	r3, [r6, r3]
    3c14:	021b      	lsls	r3, r3, #8
    3c16:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3c18:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3c1a:	2340      	movs	r3, #64	; 0x40
    3c1c:	5cf2      	ldrb	r2, [r6, r3]
    3c1e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3c20:	1e53      	subs	r3, r2, #1
    3c22:	200d      	movs	r0, #13
    3c24:	2b01      	cmp	r3, #1
    3c26:	d89a      	bhi.n	3b5e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3c28:	233d      	movs	r3, #61	; 0x3d
    3c2a:	5cf1      	ldrb	r1, [r6, r3]
    3c2c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3c2e:	2900      	cmp	r1, #0
    3c30:	d095      	beq.n	3b5e <chk_mounted+0x2a>
    3c32:	1e4b      	subs	r3, r1, #1
    3c34:	4219      	tst	r1, r3
    3c36:	d192      	bne.n	3b5e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3c38:	2342      	movs	r3, #66	; 0x42
    3c3a:	5cf3      	ldrb	r3, [r6, r3]
    3c3c:	021b      	lsls	r3, r3, #8
    3c3e:	3034      	adds	r0, #52	; 0x34
    3c40:	5c30      	ldrb	r0, [r6, r0]
    3c42:	4318      	orrs	r0, r3
    3c44:	4680      	mov	r8, r0
    3c46:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3c48:	200d      	movs	r0, #13
    3c4a:	4643      	mov	r3, r8
    3c4c:	071b      	lsls	r3, r3, #28
    3c4e:	d000      	beq.n	3c52 <chk_mounted+0x11e>
    3c50:	e785      	b.n	3b5e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3c52:	2344      	movs	r3, #68	; 0x44
    3c54:	5cf3      	ldrb	r3, [r6, r3]
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	3036      	adds	r0, #54	; 0x36
    3c5a:	5c30      	ldrb	r0, [r6, r0]
    3c5c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3c5e:	d10d      	bne.n	3c7c <chk_mounted+0x148>
    3c60:	3353      	adds	r3, #83	; 0x53
    3c62:	5cf3      	ldrb	r3, [r6, r3]
    3c64:	061b      	lsls	r3, r3, #24
    3c66:	2052      	movs	r0, #82	; 0x52
    3c68:	5c30      	ldrb	r0, [r6, r0]
    3c6a:	0400      	lsls	r0, r0, #16
    3c6c:	4303      	orrs	r3, r0
    3c6e:	2050      	movs	r0, #80	; 0x50
    3c70:	5c30      	ldrb	r0, [r6, r0]
    3c72:	4303      	orrs	r3, r0
    3c74:	2051      	movs	r0, #81	; 0x51
    3c76:	5c30      	ldrb	r0, [r6, r0]
    3c78:	0200      	lsls	r0, r0, #8
    3c7a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3c7c:	203f      	movs	r0, #63	; 0x3f
    3c7e:	5c30      	ldrb	r0, [r6, r0]
    3c80:	0200      	lsls	r0, r0, #8
    3c82:	273e      	movs	r7, #62	; 0x3e
    3c84:	5df7      	ldrb	r7, [r6, r7]
    3c86:	4307      	orrs	r7, r0
    3c88:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3c8a:	200d      	movs	r0, #13
    3c8c:	2f00      	cmp	r7, #0
    3c8e:	d100      	bne.n	3c92 <chk_mounted+0x15e>
    3c90:	e765      	b.n	3b5e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3c92:	436a      	muls	r2, r5
    3c94:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3c96:	4642      	mov	r2, r8
    3c98:	0917      	lsrs	r7, r2, #4
    3c9a:	4457      	add	r7, sl
    3c9c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3c9e:	42bb      	cmp	r3, r7
    3ca0:	d200      	bcs.n	3ca4 <chk_mounted+0x170>
    3ca2:	e75c      	b.n	3b5e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3ca4:	1bd8      	subs	r0, r3, r7
    3ca6:	4b7b      	ldr	r3, [pc, #492]	; (3e94 <chk_mounted+0x360>)
    3ca8:	4798      	blx	r3
    3caa:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3cac:	200d      	movs	r0, #13
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d100      	bne.n	3cb4 <chk_mounted+0x180>
    3cb2:	e754      	b.n	3b5e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3cb4:	4a78      	ldr	r2, [pc, #480]	; (3e98 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3cb6:	429a      	cmp	r2, r3
    3cb8:	4192      	sbcs	r2, r2
    3cba:	4252      	negs	r2, r2
    3cbc:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3cbe:	4977      	ldr	r1, [pc, #476]	; (3e9c <chk_mounted+0x368>)
    3cc0:	428b      	cmp	r3, r1
    3cc2:	d848      	bhi.n	3d56 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3cc4:	3302      	adds	r3, #2
    3cc6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3cc8:	19e7      	adds	r7, r4, r7
    3cca:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3ccc:	4454      	add	r4, sl
    3cce:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3cd0:	200d      	movs	r0, #13
    3cd2:	4641      	mov	r1, r8
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d100      	bne.n	3cda <chk_mounted+0x1a6>
    3cd8:	e741      	b.n	3b5e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3cda:	444c      	add	r4, r9
    3cdc:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3cde:	2a02      	cmp	r2, #2
    3ce0:	d12c      	bne.n	3d3c <chk_mounted+0x208>
    3ce2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ce4:	496e      	ldr	r1, [pc, #440]	; (3ea0 <chk_mounted+0x36c>)
    3ce6:	468c      	mov	ip, r1
    3ce8:	4463      	add	r3, ip
    3cea:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3cec:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3cee:	429d      	cmp	r5, r3
    3cf0:	d200      	bcs.n	3cf4 <chk_mounted+0x1c0>
    3cf2:	e734      	b.n	3b5e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3cf4:	2301      	movs	r3, #1
    3cf6:	425b      	negs	r3, r3
    3cf8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3cfa:	2300      	movs	r3, #0
    3cfc:	60f3      	str	r3, [r6, #12]
    3cfe:	e0b6      	b.n	3e6e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3d00:	33f2      	adds	r3, #242	; 0xf2
    3d02:	33ff      	adds	r3, #255	; 0xff
    3d04:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3d06:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d100      	bne.n	3d0e <chk_mounted+0x1da>
    3d0c:	e727      	b.n	3b5e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3d0e:	23fa      	movs	r3, #250	; 0xfa
    3d10:	33ff      	adds	r3, #255	; 0xff
    3d12:	5cf4      	ldrb	r4, [r6, r3]
    3d14:	0624      	lsls	r4, r4, #24
    3d16:	3b01      	subs	r3, #1
    3d18:	5cf3      	ldrb	r3, [r6, r3]
    3d1a:	041b      	lsls	r3, r3, #16
    3d1c:	431c      	orrs	r4, r3
    3d1e:	23fb      	movs	r3, #251	; 0xfb
    3d20:	005b      	lsls	r3, r3, #1
    3d22:	5cf3      	ldrb	r3, [r6, r3]
    3d24:	431c      	orrs	r4, r3
    3d26:	23f8      	movs	r3, #248	; 0xf8
    3d28:	33ff      	adds	r3, #255	; 0xff
    3d2a:	5cf2      	ldrb	r2, [r6, r3]
    3d2c:	0212      	lsls	r2, r2, #8
    3d2e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3d30:	0021      	movs	r1, r4
    3d32:	0030      	movs	r0, r6
    3d34:	4b56      	ldr	r3, [pc, #344]	; (3e90 <chk_mounted+0x35c>)
    3d36:	4798      	blx	r3
    3d38:	0003      	movs	r3, r0
    3d3a:	e746      	b.n	3bca <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3d3c:	2103      	movs	r1, #3
    3d3e:	4359      	muls	r1, r3
    3d40:	0849      	lsrs	r1, r1, #1
    3d42:	2001      	movs	r0, #1
    3d44:	4003      	ands	r3, r0
    3d46:	18cb      	adds	r3, r1, r3
    3d48:	e7cc      	b.n	3ce4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3d4a:	200c      	movs	r0, #12
    3d4c:	e707      	b.n	3b5e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3d4e:	2000      	movs	r0, #0
    3d50:	e705      	b.n	3b5e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3d52:	2001      	movs	r0, #1
    3d54:	e703      	b.n	3b5e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3d56:	3302      	adds	r3, #2
    3d58:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3d5a:	19e7      	adds	r7, r4, r7
    3d5c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3d5e:	4652      	mov	r2, sl
    3d60:	18a2      	adds	r2, r4, r2
    3d62:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3d64:	200d      	movs	r0, #13
    3d66:	4642      	mov	r2, r8
    3d68:	2a00      	cmp	r2, #0
    3d6a:	d000      	beq.n	3d6e <chk_mounted+0x23a>
    3d6c:	e6f7      	b.n	3b5e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3d6e:	225f      	movs	r2, #95	; 0x5f
    3d70:	5cb2      	ldrb	r2, [r6, r2]
    3d72:	0612      	lsls	r2, r2, #24
    3d74:	215e      	movs	r1, #94	; 0x5e
    3d76:	5c71      	ldrb	r1, [r6, r1]
    3d78:	0409      	lsls	r1, r1, #16
    3d7a:	430a      	orrs	r2, r1
    3d7c:	215c      	movs	r1, #92	; 0x5c
    3d7e:	5c71      	ldrb	r1, [r6, r1]
    3d80:	430a      	orrs	r2, r1
    3d82:	215d      	movs	r1, #93	; 0x5d
    3d84:	5c71      	ldrb	r1, [r6, r1]
    3d86:	0209      	lsls	r1, r1, #8
    3d88:	430a      	orrs	r2, r1
    3d8a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3d8c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d8e:	4a44      	ldr	r2, [pc, #272]	; (3ea0 <chk_mounted+0x36c>)
    3d90:	4694      	mov	ip, r2
    3d92:	4463      	add	r3, ip
    3d94:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3d96:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3d98:	429d      	cmp	r5, r3
    3d9a:	d200      	bcs.n	3d9e <chk_mounted+0x26a>
    3d9c:	e6df      	b.n	3b5e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3d9e:	2301      	movs	r3, #1
    3da0:	425b      	negs	r3, r3
    3da2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3da4:	2300      	movs	r3, #0
    3da6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3da8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3daa:	3361      	adds	r3, #97	; 0x61
    3dac:	5cf3      	ldrb	r3, [r6, r3]
    3dae:	021b      	lsls	r3, r3, #8
    3db0:	2260      	movs	r2, #96	; 0x60
    3db2:	5cb2      	ldrb	r2, [r6, r2]
    3db4:	431a      	orrs	r2, r3
    3db6:	1912      	adds	r2, r2, r4
    3db8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3dba:	0031      	movs	r1, r6
    3dbc:	3130      	adds	r1, #48	; 0x30
    3dbe:	7870      	ldrb	r0, [r6, #1]
    3dc0:	2301      	movs	r3, #1
    3dc2:	4c38      	ldr	r4, [pc, #224]	; (3ea4 <chk_mounted+0x370>)
    3dc4:	47a0      	blx	r4
    3dc6:	2203      	movs	r2, #3
    3dc8:	2800      	cmp	r0, #0
    3dca:	d150      	bne.n	3e6e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3dcc:	4b36      	ldr	r3, [pc, #216]	; (3ea8 <chk_mounted+0x374>)
    3dce:	5cf2      	ldrb	r2, [r6, r3]
    3dd0:	0212      	lsls	r2, r2, #8
    3dd2:	4b36      	ldr	r3, [pc, #216]	; (3eac <chk_mounted+0x378>)
    3dd4:	5cf3      	ldrb	r3, [r6, r3]
    3dd6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3dd8:	4935      	ldr	r1, [pc, #212]	; (3eb0 <chk_mounted+0x37c>)
    3dda:	b21b      	sxth	r3, r3
    3ddc:	2203      	movs	r2, #3
    3dde:	428b      	cmp	r3, r1
    3de0:	d145      	bne.n	3e6e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3de2:	2333      	movs	r3, #51	; 0x33
    3de4:	5cf3      	ldrb	r3, [r6, r3]
    3de6:	061b      	lsls	r3, r3, #24
    3de8:	322f      	adds	r2, #47	; 0x2f
    3dea:	5cb2      	ldrb	r2, [r6, r2]
    3dec:	0412      	lsls	r2, r2, #16
    3dee:	4313      	orrs	r3, r2
    3df0:	2230      	movs	r2, #48	; 0x30
    3df2:	5cb2      	ldrb	r2, [r6, r2]
    3df4:	4313      	orrs	r3, r2
    3df6:	2231      	movs	r2, #49	; 0x31
    3df8:	5cb2      	ldrb	r2, [r6, r2]
    3dfa:	0212      	lsls	r2, r2, #8
    3dfc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3dfe:	492d      	ldr	r1, [pc, #180]	; (3eb4 <chk_mounted+0x380>)
    3e00:	2203      	movs	r2, #3
    3e02:	428b      	cmp	r3, r1
    3e04:	d133      	bne.n	3e6e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3e06:	4b2c      	ldr	r3, [pc, #176]	; (3eb8 <chk_mounted+0x384>)
    3e08:	5cf3      	ldrb	r3, [r6, r3]
    3e0a:	061b      	lsls	r3, r3, #24
    3e0c:	4a2b      	ldr	r2, [pc, #172]	; (3ebc <chk_mounted+0x388>)
    3e0e:	5cb2      	ldrb	r2, [r6, r2]
    3e10:	0412      	lsls	r2, r2, #16
    3e12:	4313      	orrs	r3, r2
    3e14:	2285      	movs	r2, #133	; 0x85
    3e16:	0092      	lsls	r2, r2, #2
    3e18:	5cb2      	ldrb	r2, [r6, r2]
    3e1a:	4313      	orrs	r3, r2
    3e1c:	4a28      	ldr	r2, [pc, #160]	; (3ec0 <chk_mounted+0x38c>)
    3e1e:	5cb2      	ldrb	r2, [r6, r2]
    3e20:	0212      	lsls	r2, r2, #8
    3e22:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3e24:	4927      	ldr	r1, [pc, #156]	; (3ec4 <chk_mounted+0x390>)
    3e26:	2203      	movs	r2, #3
    3e28:	428b      	cmp	r3, r1
    3e2a:	d120      	bne.n	3e6e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3e2c:	4b26      	ldr	r3, [pc, #152]	; (3ec8 <chk_mounted+0x394>)
    3e2e:	5cf3      	ldrb	r3, [r6, r3]
    3e30:	061b      	lsls	r3, r3, #24
    3e32:	4a26      	ldr	r2, [pc, #152]	; (3ecc <chk_mounted+0x398>)
    3e34:	5cb2      	ldrb	r2, [r6, r2]
    3e36:	0412      	lsls	r2, r2, #16
    3e38:	4313      	orrs	r3, r2
    3e3a:	2287      	movs	r2, #135	; 0x87
    3e3c:	0092      	lsls	r2, r2, #2
    3e3e:	5cb2      	ldrb	r2, [r6, r2]
    3e40:	4313      	orrs	r3, r2
    3e42:	4a23      	ldr	r2, [pc, #140]	; (3ed0 <chk_mounted+0x39c>)
    3e44:	5cb2      	ldrb	r2, [r6, r2]
    3e46:	0212      	lsls	r2, r2, #8
    3e48:	4313      	orrs	r3, r2
    3e4a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3e4c:	4b21      	ldr	r3, [pc, #132]	; (3ed4 <chk_mounted+0x3a0>)
    3e4e:	5cf3      	ldrb	r3, [r6, r3]
    3e50:	061b      	lsls	r3, r3, #24
    3e52:	4a21      	ldr	r2, [pc, #132]	; (3ed8 <chk_mounted+0x3a4>)
    3e54:	5cb2      	ldrb	r2, [r6, r2]
    3e56:	0412      	lsls	r2, r2, #16
    3e58:	4313      	orrs	r3, r2
    3e5a:	2286      	movs	r2, #134	; 0x86
    3e5c:	0092      	lsls	r2, r2, #2
    3e5e:	5cb2      	ldrb	r2, [r6, r2]
    3e60:	4313      	orrs	r3, r2
    3e62:	4a1e      	ldr	r2, [pc, #120]	; (3edc <chk_mounted+0x3a8>)
    3e64:	5cb2      	ldrb	r2, [r6, r2]
    3e66:	0212      	lsls	r2, r2, #8
    3e68:	4313      	orrs	r3, r2
    3e6a:	6133      	str	r3, [r6, #16]
    3e6c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3e6e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3e70:	4a1b      	ldr	r2, [pc, #108]	; (3ee0 <chk_mounted+0x3ac>)
    3e72:	8813      	ldrh	r3, [r2, #0]
    3e74:	3301      	adds	r3, #1
    3e76:	b29b      	uxth	r3, r3
    3e78:	8013      	strh	r3, [r2, #0]
    3e7a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3e7c:	2000      	movs	r0, #0
    3e7e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3e80:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3e82:	e66c      	b.n	3b5e <chk_mounted+0x2a>
    3e84:	20000158 	.word	0x20000158
    3e88:	00003825 	.word	0x00003825
    3e8c:	00003789 	.word	0x00003789
    3e90:	00003a91 	.word	0x00003a91
    3e94:	0000590d 	.word	0x0000590d
    3e98:	00000ff5 	.word	0x00000ff5
    3e9c:	0000fff5 	.word	0x0000fff5
    3ea0:	000001ff 	.word	0x000001ff
    3ea4:	00003841 	.word	0x00003841
    3ea8:	0000022f 	.word	0x0000022f
    3eac:	0000022e 	.word	0x0000022e
    3eb0:	ffffaa55 	.word	0xffffaa55
    3eb4:	41615252 	.word	0x41615252
    3eb8:	00000217 	.word	0x00000217
    3ebc:	00000216 	.word	0x00000216
    3ec0:	00000215 	.word	0x00000215
    3ec4:	61417272 	.word	0x61417272
    3ec8:	0000021f 	.word	0x0000021f
    3ecc:	0000021e 	.word	0x0000021e
    3ed0:	0000021d 	.word	0x0000021d
    3ed4:	0000021b 	.word	0x0000021b
    3ed8:	0000021a 	.word	0x0000021a
    3edc:	00000219 	.word	0x00000219
    3ee0:	20000178 	.word	0x20000178

00003ee4 <move_window>:
{
    3ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ee6:	46ce      	mov	lr, r9
    3ee8:	b500      	push	{lr}
    3eea:	b082      	sub	sp, #8
    3eec:	0004      	movs	r4, r0
    3eee:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3ef0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3ef2:	428d      	cmp	r5, r1
    3ef4:	d03f      	beq.n	3f76 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3ef6:	7903      	ldrb	r3, [r0, #4]
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d107      	bne.n	3f0c <move_window+0x28>
	return FR_OK;
    3efc:	2300      	movs	r3, #0
		if (sector) {
    3efe:	2f00      	cmp	r7, #0
    3f00:	d12c      	bne.n	3f5c <move_window+0x78>
}
    3f02:	0018      	movs	r0, r3
    3f04:	b002      	add	sp, #8
    3f06:	bc04      	pop	{r2}
    3f08:	4691      	mov	r9, r2
    3f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f0c:	2330      	movs	r3, #48	; 0x30
    3f0e:	469c      	mov	ip, r3
    3f10:	4484      	add	ip, r0
    3f12:	4663      	mov	r3, ip
    3f14:	4661      	mov	r1, ip
    3f16:	9301      	str	r3, [sp, #4]
    3f18:	7840      	ldrb	r0, [r0, #1]
    3f1a:	2301      	movs	r3, #1
    3f1c:	002a      	movs	r2, r5
    3f1e:	4e17      	ldr	r6, [pc, #92]	; (3f7c <move_window+0x98>)
    3f20:	47b0      	blx	r6
				return FR_DISK_ERR;
    3f22:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3f24:	2800      	cmp	r0, #0
    3f26:	d1ec      	bne.n	3f02 <move_window+0x1e>
			fs->wflag = 0;
    3f28:	2300      	movs	r3, #0
    3f2a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3f2c:	6a23      	ldr	r3, [r4, #32]
    3f2e:	69e2      	ldr	r2, [r4, #28]
    3f30:	4694      	mov	ip, r2
    3f32:	4463      	add	r3, ip
    3f34:	429d      	cmp	r5, r3
    3f36:	d2e1      	bcs.n	3efc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f38:	78e6      	ldrb	r6, [r4, #3]
    3f3a:	2e01      	cmp	r6, #1
    3f3c:	d9de      	bls.n	3efc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3f3e:	4b0f      	ldr	r3, [pc, #60]	; (3f7c <move_window+0x98>)
    3f40:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3f42:	69e3      	ldr	r3, [r4, #28]
    3f44:	469c      	mov	ip, r3
    3f46:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3f48:	7860      	ldrb	r0, [r4, #1]
    3f4a:	2301      	movs	r3, #1
    3f4c:	002a      	movs	r2, r5
    3f4e:	9901      	ldr	r1, [sp, #4]
    3f50:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3f52:	3e01      	subs	r6, #1
    3f54:	b2f6      	uxtb	r6, r6
    3f56:	2e01      	cmp	r6, #1
    3f58:	d1f3      	bne.n	3f42 <move_window+0x5e>
    3f5a:	e7cf      	b.n	3efc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f5c:	0021      	movs	r1, r4
    3f5e:	3130      	adds	r1, #48	; 0x30
    3f60:	7860      	ldrb	r0, [r4, #1]
    3f62:	3301      	adds	r3, #1
    3f64:	003a      	movs	r2, r7
    3f66:	4d06      	ldr	r5, [pc, #24]	; (3f80 <move_window+0x9c>)
    3f68:	47a8      	blx	r5
				return FR_DISK_ERR;
    3f6a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3f6c:	2800      	cmp	r0, #0
    3f6e:	d1c8      	bne.n	3f02 <move_window+0x1e>
			fs->winsect = sector;
    3f70:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3f72:	2300      	movs	r3, #0
    3f74:	e7c5      	b.n	3f02 <move_window+0x1e>
    3f76:	2300      	movs	r3, #0
    3f78:	e7c3      	b.n	3f02 <move_window+0x1e>
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	000038c5 	.word	0x000038c5
    3f80:	00003841 	.word	0x00003841

00003f84 <get_fat>:
{
    3f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f86:	0005      	movs	r5, r0
    3f88:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3f8a:	2901      	cmp	r1, #1
    3f8c:	d974      	bls.n	4078 <get_fat+0xf4>
		return 1;
    3f8e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3f90:	69ab      	ldr	r3, [r5, #24]
    3f92:	4299      	cmp	r1, r3
    3f94:	d271      	bcs.n	407a <get_fat+0xf6>
	switch (fs->fs_type) {
    3f96:	782b      	ldrb	r3, [r5, #0]
    3f98:	2b02      	cmp	r3, #2
    3f9a:	d034      	beq.n	4006 <get_fat+0x82>
    3f9c:	2b03      	cmp	r3, #3
    3f9e:	d049      	beq.n	4034 <get_fat+0xb0>
    3fa0:	2b01      	cmp	r3, #1
    3fa2:	d002      	beq.n	3faa <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3fa4:	2001      	movs	r0, #1
    3fa6:	4240      	negs	r0, r0
    3fa8:	e067      	b.n	407a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3faa:	084e      	lsrs	r6, r1, #1
    3fac:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3fae:	0a71      	lsrs	r1, r6, #9
    3fb0:	6a2b      	ldr	r3, [r5, #32]
    3fb2:	469c      	mov	ip, r3
    3fb4:	4461      	add	r1, ip
    3fb6:	0028      	movs	r0, r5
    3fb8:	4b30      	ldr	r3, [pc, #192]	; (407c <get_fat+0xf8>)
    3fba:	4798      	blx	r3
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d002      	beq.n	3fc6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3fc0:	2001      	movs	r0, #1
    3fc2:	4240      	negs	r0, r0
    3fc4:	e059      	b.n	407a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3fc6:	05f3      	lsls	r3, r6, #23
    3fc8:	0ddb      	lsrs	r3, r3, #23
    3fca:	18eb      	adds	r3, r5, r3
    3fcc:	3330      	adds	r3, #48	; 0x30
    3fce:	781f      	ldrb	r7, [r3, #0]
    3fd0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3fd2:	0a71      	lsrs	r1, r6, #9
    3fd4:	6a2b      	ldr	r3, [r5, #32]
    3fd6:	469c      	mov	ip, r3
    3fd8:	4461      	add	r1, ip
    3fda:	0028      	movs	r0, r5
    3fdc:	4b27      	ldr	r3, [pc, #156]	; (407c <get_fat+0xf8>)
    3fde:	4798      	blx	r3
    3fe0:	2800      	cmp	r0, #0
    3fe2:	d002      	beq.n	3fea <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3fe4:	2001      	movs	r0, #1
    3fe6:	4240      	negs	r0, r0
    3fe8:	e047      	b.n	407a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3fea:	05f6      	lsls	r6, r6, #23
    3fec:	0df6      	lsrs	r6, r6, #23
    3fee:	19ad      	adds	r5, r5, r6
    3ff0:	3530      	adds	r5, #48	; 0x30
    3ff2:	7828      	ldrb	r0, [r5, #0]
    3ff4:	0200      	lsls	r0, r0, #8
    3ff6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3ff8:	07e3      	lsls	r3, r4, #31
    3ffa:	d501      	bpl.n	4000 <get_fat+0x7c>
    3ffc:	0900      	lsrs	r0, r0, #4
    3ffe:	e03c      	b.n	407a <get_fat+0xf6>
    4000:	0500      	lsls	r0, r0, #20
    4002:	0d00      	lsrs	r0, r0, #20
    4004:	e039      	b.n	407a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4006:	0a09      	lsrs	r1, r1, #8
    4008:	6a2b      	ldr	r3, [r5, #32]
    400a:	469c      	mov	ip, r3
    400c:	4461      	add	r1, ip
    400e:	0028      	movs	r0, r5
    4010:	4b1a      	ldr	r3, [pc, #104]	; (407c <get_fat+0xf8>)
    4012:	4798      	blx	r3
    4014:	2800      	cmp	r0, #0
    4016:	d002      	beq.n	401e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4018:	2001      	movs	r0, #1
    401a:	4240      	negs	r0, r0
    401c:	e02d      	b.n	407a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    401e:	0064      	lsls	r4, r4, #1
    4020:	23ff      	movs	r3, #255	; 0xff
    4022:	005b      	lsls	r3, r3, #1
    4024:	401c      	ands	r4, r3
		return LD_WORD(p);
    4026:	192d      	adds	r5, r5, r4
    4028:	3530      	adds	r5, #48	; 0x30
    402a:	786b      	ldrb	r3, [r5, #1]
    402c:	021b      	lsls	r3, r3, #8
    402e:	7828      	ldrb	r0, [r5, #0]
    4030:	4318      	orrs	r0, r3
    4032:	e022      	b.n	407a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4034:	09c9      	lsrs	r1, r1, #7
    4036:	6a2b      	ldr	r3, [r5, #32]
    4038:	469c      	mov	ip, r3
    403a:	4461      	add	r1, ip
    403c:	0028      	movs	r0, r5
    403e:	4b0f      	ldr	r3, [pc, #60]	; (407c <get_fat+0xf8>)
    4040:	4798      	blx	r3
    4042:	2800      	cmp	r0, #0
    4044:	d002      	beq.n	404c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4046:	2001      	movs	r0, #1
    4048:	4240      	negs	r0, r0
    404a:	e016      	b.n	407a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    404c:	00a4      	lsls	r4, r4, #2
    404e:	23fe      	movs	r3, #254	; 0xfe
    4050:	005b      	lsls	r3, r3, #1
    4052:	401c      	ands	r4, r3
    4054:	0023      	movs	r3, r4
    4056:	3330      	adds	r3, #48	; 0x30
    4058:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    405a:	78d8      	ldrb	r0, [r3, #3]
    405c:	0600      	lsls	r0, r0, #24
    405e:	789a      	ldrb	r2, [r3, #2]
    4060:	0412      	lsls	r2, r2, #16
    4062:	4310      	orrs	r0, r2
    4064:	192c      	adds	r4, r5, r4
    4066:	3430      	adds	r4, #48	; 0x30
    4068:	7822      	ldrb	r2, [r4, #0]
    406a:	4310      	orrs	r0, r2
    406c:	785b      	ldrb	r3, [r3, #1]
    406e:	021b      	lsls	r3, r3, #8
    4070:	4318      	orrs	r0, r3
    4072:	0100      	lsls	r0, r0, #4
    4074:	0900      	lsrs	r0, r0, #4
    4076:	e000      	b.n	407a <get_fat+0xf6>
		return 1;
    4078:	2001      	movs	r0, #1
}
    407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    407c:	00003ee5 	.word	0x00003ee5

00004080 <dir_sdi>:
{
    4080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4082:	0004      	movs	r4, r0
    4084:	000d      	movs	r5, r1
	dj->index = idx;
    4086:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    4088:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    408a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    408c:	2901      	cmp	r1, #1
    408e:	d003      	beq.n	4098 <dir_sdi+0x18>
    4090:	6823      	ldr	r3, [r4, #0]
    4092:	699a      	ldr	r2, [r3, #24]
    4094:	4291      	cmp	r1, r2
    4096:	d300      	bcc.n	409a <dir_sdi+0x1a>
}
    4098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    409a:	2900      	cmp	r1, #0
    409c:	d119      	bne.n	40d2 <dir_sdi+0x52>
    409e:	781a      	ldrb	r2, [r3, #0]
    40a0:	2a03      	cmp	r2, #3
    40a2:	d013      	beq.n	40cc <dir_sdi+0x4c>
		dj->clust = clst;
    40a4:	2200      	movs	r2, #0
    40a6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    40a8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    40aa:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    40ac:	42aa      	cmp	r2, r5
    40ae:	d9f3      	bls.n	4098 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    40b0:	092a      	lsrs	r2, r5, #4
    40b2:	b292      	uxth	r2, r2
    40b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    40b6:	189b      	adds	r3, r3, r2
    40b8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    40ba:	6823      	ldr	r3, [r4, #0]
    40bc:	3330      	adds	r3, #48	; 0x30
    40be:	220f      	movs	r2, #15
    40c0:	4015      	ands	r5, r2
    40c2:	016d      	lsls	r5, r5, #5
    40c4:	195d      	adds	r5, r3, r5
    40c6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    40c8:	2000      	movs	r0, #0
    40ca:	e7e5      	b.n	4098 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    40cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    40ce:	2900      	cmp	r1, #0
    40d0:	d0e8      	beq.n	40a4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    40d2:	789e      	ldrb	r6, [r3, #2]
    40d4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    40d6:	42b5      	cmp	r5, r6
    40d8:	d313      	bcc.n	4102 <dir_sdi+0x82>
    40da:	1bad      	subs	r5, r5, r6
    40dc:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    40de:	4f10      	ldr	r7, [pc, #64]	; (4120 <dir_sdi+0xa0>)
    40e0:	e000      	b.n	40e4 <dir_sdi+0x64>
    40e2:	001d      	movs	r5, r3
    40e4:	6820      	ldr	r0, [r4, #0]
    40e6:	47b8      	blx	r7
    40e8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40ea:	1c43      	adds	r3, r0, #1
    40ec:	d012      	beq.n	4114 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    40ee:	2801      	cmp	r0, #1
    40f0:	d912      	bls.n	4118 <dir_sdi+0x98>
    40f2:	6823      	ldr	r3, [r4, #0]
    40f4:	699b      	ldr	r3, [r3, #24]
    40f6:	4298      	cmp	r0, r3
    40f8:	d210      	bcs.n	411c <dir_sdi+0x9c>
    40fa:	1bab      	subs	r3, r5, r6
    40fc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    40fe:	42b5      	cmp	r5, r6
    4100:	d2ef      	bcs.n	40e2 <dir_sdi+0x62>
		dj->clust = clst;
    4102:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4104:	6820      	ldr	r0, [r4, #0]
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <dir_sdi+0xa4>)
    4108:	4798      	blx	r3
    410a:	092b      	lsrs	r3, r5, #4
    410c:	b29b      	uxth	r3, r3
    410e:	1818      	adds	r0, r3, r0
    4110:	6120      	str	r0, [r4, #16]
    4112:	e7d2      	b.n	40ba <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4114:	2001      	movs	r0, #1
    4116:	e7bf      	b.n	4098 <dir_sdi+0x18>
				return FR_INT_ERR;
    4118:	2002      	movs	r0, #2
    411a:	e7bd      	b.n	4098 <dir_sdi+0x18>
    411c:	2002      	movs	r0, #2
    411e:	e7bb      	b.n	4098 <dir_sdi+0x18>
    4120:	00003f85 	.word	0x00003f85
    4124:	00003a2b 	.word	0x00003a2b

00004128 <put_fat>:
{
    4128:	b5f0      	push	{r4, r5, r6, r7, lr}
    412a:	46c6      	mov	lr, r8
    412c:	b500      	push	{lr}
    412e:	0007      	movs	r7, r0
    4130:	000c      	movs	r4, r1
    4132:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4134:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4136:	2901      	cmp	r1, #1
    4138:	d902      	bls.n	4140 <put_fat+0x18>
    413a:	6983      	ldr	r3, [r0, #24]
    413c:	4299      	cmp	r1, r3
    413e:	d303      	bcc.n	4148 <put_fat+0x20>
}
    4140:	0028      	movs	r0, r5
    4142:	bc04      	pop	{r2}
    4144:	4690      	mov	r8, r2
    4146:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    4148:	7803      	ldrb	r3, [r0, #0]
    414a:	2b02      	cmp	r3, #2
    414c:	d053      	beq.n	41f6 <put_fat+0xce>
    414e:	2b03      	cmp	r3, #3
    4150:	d063      	beq.n	421a <put_fat+0xf2>
			res = FR_INT_ERR;
    4152:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    4154:	2b01      	cmp	r3, #1
    4156:	d002      	beq.n	415e <put_fat+0x36>
		fs->wflag = 1;
    4158:	2301      	movs	r3, #1
    415a:	713b      	strb	r3, [r7, #4]
    415c:	e7f0      	b.n	4140 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    415e:	084b      	lsrs	r3, r1, #1
    4160:	4698      	mov	r8, r3
    4162:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4164:	4643      	mov	r3, r8
    4166:	0a59      	lsrs	r1, r3, #9
    4168:	6a03      	ldr	r3, [r0, #32]
    416a:	469c      	mov	ip, r3
    416c:	4461      	add	r1, ip
    416e:	4b3b      	ldr	r3, [pc, #236]	; (425c <put_fat+0x134>)
    4170:	4798      	blx	r3
    4172:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4174:	d1f0      	bne.n	4158 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4176:	4643      	mov	r3, r8
    4178:	05db      	lsls	r3, r3, #23
    417a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    417c:	07e2      	lsls	r2, r4, #31
    417e:	d51f      	bpl.n	41c0 <put_fat+0x98>
    4180:	18fb      	adds	r3, r7, r3
    4182:	3330      	adds	r3, #48	; 0x30
    4184:	7819      	ldrb	r1, [r3, #0]
    4186:	220f      	movs	r2, #15
    4188:	400a      	ands	r2, r1
    418a:	0131      	lsls	r1, r6, #4
    418c:	20ff      	movs	r0, #255	; 0xff
    418e:	0100      	lsls	r0, r0, #4
    4190:	4001      	ands	r1, r0
    4192:	430a      	orrs	r2, r1
    4194:	701a      	strb	r2, [r3, #0]
			bc++;
    4196:	4644      	mov	r4, r8
    4198:	3401      	adds	r4, #1
			fs->wflag = 1;
    419a:	2301      	movs	r3, #1
    419c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    419e:	0a61      	lsrs	r1, r4, #9
    41a0:	6a3b      	ldr	r3, [r7, #32]
    41a2:	469c      	mov	ip, r3
    41a4:	4461      	add	r1, ip
    41a6:	0038      	movs	r0, r7
    41a8:	4b2c      	ldr	r3, [pc, #176]	; (425c <put_fat+0x134>)
    41aa:	4798      	blx	r3
			if (res != FR_OK) break;
    41ac:	2800      	cmp	r0, #0
    41ae:	d151      	bne.n	4254 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    41b0:	05e4      	lsls	r4, r4, #23
    41b2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41b4:	0936      	lsrs	r6, r6, #4
    41b6:	b2f6      	uxtb	r6, r6
    41b8:	193c      	adds	r4, r7, r4
    41ba:	3430      	adds	r4, #48	; 0x30
    41bc:	7026      	strb	r6, [r4, #0]
			break;
    41be:	e7cb      	b.n	4158 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	3330      	adds	r3, #48	; 0x30
    41c4:	701e      	strb	r6, [r3, #0]
			bc++;
    41c6:	4644      	mov	r4, r8
    41c8:	3401      	adds	r4, #1
			fs->wflag = 1;
    41ca:	2301      	movs	r3, #1
    41cc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    41ce:	0a61      	lsrs	r1, r4, #9
    41d0:	6a3b      	ldr	r3, [r7, #32]
    41d2:	469c      	mov	ip, r3
    41d4:	4461      	add	r1, ip
    41d6:	0038      	movs	r0, r7
    41d8:	4b20      	ldr	r3, [pc, #128]	; (425c <put_fat+0x134>)
    41da:	4798      	blx	r3
			if (res != FR_OK) break;
    41dc:	2800      	cmp	r0, #0
    41de:	d13b      	bne.n	4258 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    41e0:	05e4      	lsls	r4, r4, #23
    41e2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    41e4:	193b      	adds	r3, r7, r4
    41e6:	3330      	adds	r3, #48	; 0x30
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	220f      	movs	r2, #15
    41ec:	4393      	bics	r3, r2
    41ee:	0536      	lsls	r6, r6, #20
    41f0:	0f36      	lsrs	r6, r6, #28
    41f2:	431e      	orrs	r6, r3
    41f4:	e7e0      	b.n	41b8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    41f6:	0a09      	lsrs	r1, r1, #8
    41f8:	6a03      	ldr	r3, [r0, #32]
    41fa:	469c      	mov	ip, r3
    41fc:	4461      	add	r1, ip
    41fe:	4b17      	ldr	r3, [pc, #92]	; (425c <put_fat+0x134>)
    4200:	4798      	blx	r3
    4202:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4204:	d1a8      	bne.n	4158 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4206:	0063      	lsls	r3, r4, #1
    4208:	24ff      	movs	r4, #255	; 0xff
    420a:	0064      	lsls	r4, r4, #1
    420c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    420e:	18fb      	adds	r3, r7, r3
    4210:	3330      	adds	r3, #48	; 0x30
    4212:	701e      	strb	r6, [r3, #0]
    4214:	0a36      	lsrs	r6, r6, #8
    4216:	705e      	strb	r6, [r3, #1]
			break;
    4218:	e79e      	b.n	4158 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    421a:	09c9      	lsrs	r1, r1, #7
    421c:	6a03      	ldr	r3, [r0, #32]
    421e:	469c      	mov	ip, r3
    4220:	4461      	add	r1, ip
    4222:	4b0e      	ldr	r3, [pc, #56]	; (425c <put_fat+0x134>)
    4224:	4798      	blx	r3
    4226:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4228:	d196      	bne.n	4158 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    422a:	00a4      	lsls	r4, r4, #2
    422c:	23fe      	movs	r3, #254	; 0xfe
    422e:	005b      	lsls	r3, r3, #1
    4230:	401c      	ands	r4, r3
    4232:	0022      	movs	r2, r4
    4234:	3230      	adds	r2, #48	; 0x30
    4236:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4238:	78d3      	ldrb	r3, [r2, #3]
    423a:	193c      	adds	r4, r7, r4
    423c:	3430      	adds	r4, #48	; 0x30
    423e:	091b      	lsrs	r3, r3, #4
    4240:	071b      	lsls	r3, r3, #28
    4242:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4244:	7026      	strb	r6, [r4, #0]
    4246:	0a33      	lsrs	r3, r6, #8
    4248:	7053      	strb	r3, [r2, #1]
    424a:	0c33      	lsrs	r3, r6, #16
    424c:	7093      	strb	r3, [r2, #2]
    424e:	0e36      	lsrs	r6, r6, #24
    4250:	70d6      	strb	r6, [r2, #3]
			break;
    4252:	e781      	b.n	4158 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4254:	0005      	movs	r5, r0
    4256:	e77f      	b.n	4158 <put_fat+0x30>
    4258:	0005      	movs	r5, r0
    425a:	e77d      	b.n	4158 <put_fat+0x30>
    425c:	00003ee5 	.word	0x00003ee5

00004260 <create_chain>:
{
    4260:	b5f0      	push	{r4, r5, r6, r7, lr}
    4262:	46c6      	mov	lr, r8
    4264:	b500      	push	{lr}
    4266:	0005      	movs	r5, r0
    4268:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    426a:	2900      	cmp	r1, #0
    426c:	d107      	bne.n	427e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    426e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4270:	2e00      	cmp	r6, #0
    4272:	d00d      	beq.n	4290 <create_chain+0x30>
    4274:	6983      	ldr	r3, [r0, #24]
    4276:	429e      	cmp	r6, r3
    4278:	d30b      	bcc.n	4292 <create_chain+0x32>
    427a:	2601      	movs	r6, #1
    427c:	e009      	b.n	4292 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    427e:	4b26      	ldr	r3, [pc, #152]	; (4318 <create_chain+0xb8>)
    4280:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4282:	2801      	cmp	r0, #1
    4284:	d93d      	bls.n	4302 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4286:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4288:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    428a:	4298      	cmp	r0, r3
    428c:	d201      	bcs.n	4292 <create_chain+0x32>
    428e:	e03d      	b.n	430c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4290:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4292:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4294:	4f20      	ldr	r7, [pc, #128]	; (4318 <create_chain+0xb8>)
    4296:	e00a      	b.n	42ae <create_chain+0x4e>
    4298:	0021      	movs	r1, r4
    429a:	0028      	movs	r0, r5
    429c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    429e:	2800      	cmp	r0, #0
    42a0:	d00d      	beq.n	42be <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    42a2:	1c43      	adds	r3, r0, #1
    42a4:	d032      	beq.n	430c <create_chain+0xac>
    42a6:	2801      	cmp	r0, #1
    42a8:	d030      	beq.n	430c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    42aa:	42b4      	cmp	r4, r6
    42ac:	d02d      	beq.n	430a <create_chain+0xaa>
		ncl++;							/* Next cluster */
    42ae:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    42b0:	69ab      	ldr	r3, [r5, #24]
    42b2:	429c      	cmp	r4, r3
    42b4:	d3f0      	bcc.n	4298 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    42b6:	2e01      	cmp	r6, #1
    42b8:	d925      	bls.n	4306 <create_chain+0xa6>
			ncl = 2;
    42ba:	2402      	movs	r4, #2
    42bc:	e7ec      	b.n	4298 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    42be:	4a17      	ldr	r2, [pc, #92]	; (431c <create_chain+0xbc>)
    42c0:	0021      	movs	r1, r4
    42c2:	0028      	movs	r0, r5
    42c4:	4b16      	ldr	r3, [pc, #88]	; (4320 <create_chain+0xc0>)
    42c6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    42c8:	2800      	cmp	r0, #0
    42ca:	d113      	bne.n	42f4 <create_chain+0x94>
    42cc:	4643      	mov	r3, r8
    42ce:	2b00      	cmp	r3, #0
    42d0:	d109      	bne.n	42e6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    42d2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    42d4:	692b      	ldr	r3, [r5, #16]
    42d6:	1c5a      	adds	r2, r3, #1
    42d8:	d01b      	beq.n	4312 <create_chain+0xb2>
			fs->free_clust--;
    42da:	3b01      	subs	r3, #1
    42dc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    42de:	2301      	movs	r3, #1
    42e0:	716b      	strb	r3, [r5, #5]
    42e2:	0020      	movs	r0, r4
    42e4:	e012      	b.n	430c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    42e6:	0022      	movs	r2, r4
    42e8:	4641      	mov	r1, r8
    42ea:	0028      	movs	r0, r5
    42ec:	4b0c      	ldr	r3, [pc, #48]	; (4320 <create_chain+0xc0>)
    42ee:	4798      	blx	r3
	if (res == FR_OK) {
    42f0:	2800      	cmp	r0, #0
    42f2:	d0ee      	beq.n	42d2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    42f4:	3801      	subs	r0, #1
    42f6:	4242      	negs	r2, r0
    42f8:	4142      	adcs	r2, r0
    42fa:	4250      	negs	r0, r2
    42fc:	2301      	movs	r3, #1
    42fe:	4318      	orrs	r0, r3
    4300:	e004      	b.n	430c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4302:	2001      	movs	r0, #1
    4304:	e002      	b.n	430c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4306:	2000      	movs	r0, #0
    4308:	e000      	b.n	430c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    430a:	2000      	movs	r0, #0
}
    430c:	bc04      	pop	{r2}
    430e:	4690      	mov	r8, r2
    4310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4312:	0020      	movs	r0, r4
    4314:	e7fa      	b.n	430c <create_chain+0xac>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	00003f85 	.word	0x00003f85
    431c:	0fffffff 	.word	0x0fffffff
    4320:	00004129 	.word	0x00004129

00004324 <remove_chain>:
{
    4324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4326:	46ce      	mov	lr, r9
    4328:	4647      	mov	r7, r8
    432a:	b580      	push	{r7, lr}
    432c:	0004      	movs	r4, r0
    432e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4330:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4332:	2901      	cmp	r1, #1
    4334:	d902      	bls.n	433c <remove_chain+0x18>
    4336:	69a3      	ldr	r3, [r4, #24]
    4338:	4299      	cmp	r1, r3
    433a:	d303      	bcc.n	4344 <remove_chain+0x20>
}
    433c:	bc0c      	pop	{r2, r3}
    433e:	4690      	mov	r8, r2
    4340:	4699      	mov	r9, r3
    4342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4344:	4f13      	ldr	r7, [pc, #76]	; (4394 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4346:	4b14      	ldr	r3, [pc, #80]	; (4398 <remove_chain+0x74>)
    4348:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    434a:	2301      	movs	r3, #1
    434c:	4699      	mov	r9, r3
    434e:	e003      	b.n	4358 <remove_chain+0x34>
    4350:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4352:	69a3      	ldr	r3, [r4, #24]
    4354:	42b3      	cmp	r3, r6
    4356:	d9f1      	bls.n	433c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4358:	0029      	movs	r1, r5
    435a:	0020      	movs	r0, r4
    435c:	47b8      	blx	r7
    435e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4360:	d011      	beq.n	4386 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4362:	2801      	cmp	r0, #1
    4364:	d011      	beq.n	438a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4366:	1c43      	adds	r3, r0, #1
    4368:	d011      	beq.n	438e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    436a:	2200      	movs	r2, #0
    436c:	0029      	movs	r1, r5
    436e:	0020      	movs	r0, r4
    4370:	47c0      	blx	r8
			if (res != FR_OK) break;
    4372:	2800      	cmp	r0, #0
    4374:	d1e2      	bne.n	433c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4376:	6923      	ldr	r3, [r4, #16]
    4378:	1c5a      	adds	r2, r3, #1
    437a:	d0e9      	beq.n	4350 <remove_chain+0x2c>
				fs->free_clust++;
    437c:	3301      	adds	r3, #1
    437e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4380:	464b      	mov	r3, r9
    4382:	7163      	strb	r3, [r4, #5]
    4384:	e7e4      	b.n	4350 <remove_chain+0x2c>
    4386:	2000      	movs	r0, #0
    4388:	e7d8      	b.n	433c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    438a:	2002      	movs	r0, #2
    438c:	e7d6      	b.n	433c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    438e:	2001      	movs	r0, #1
    4390:	e7d4      	b.n	433c <remove_chain+0x18>
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	00003f85 	.word	0x00003f85
    4398:	00004129 	.word	0x00004129

0000439c <dir_next>:
{
    439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439e:	46d6      	mov	lr, sl
    43a0:	4647      	mov	r7, r8
    43a2:	b580      	push	{r7, lr}
    43a4:	0006      	movs	r6, r0
    43a6:	000d      	movs	r5, r1
	i = dj->index + 1;
    43a8:	88c4      	ldrh	r4, [r0, #6]
    43aa:	3401      	adds	r4, #1
    43ac:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    43ae:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    43b0:	2c00      	cmp	r4, #0
    43b2:	d103      	bne.n	43bc <dir_next+0x20>
}
    43b4:	bc0c      	pop	{r2, r3}
    43b6:	4690      	mov	r8, r2
    43b8:	469a      	mov	sl, r3
    43ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    43bc:	6933      	ldr	r3, [r6, #16]
    43be:	2b00      	cmp	r3, #0
    43c0:	d0f8      	beq.n	43b4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    43c2:	270f      	movs	r7, #15
    43c4:	4027      	ands	r7, r4
    43c6:	d10f      	bne.n	43e8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    43c8:	3301      	adds	r3, #1
    43ca:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    43cc:	68f1      	ldr	r1, [r6, #12]
    43ce:	2900      	cmp	r1, #0
    43d0:	d104      	bne.n	43dc <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    43d2:	6833      	ldr	r3, [r6, #0]
    43d4:	891b      	ldrh	r3, [r3, #8]
    43d6:	42a3      	cmp	r3, r4
    43d8:	d9ec      	bls.n	43b4 <dir_next+0x18>
    43da:	e005      	b.n	43e8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    43dc:	6830      	ldr	r0, [r6, #0]
    43de:	7883      	ldrb	r3, [r0, #2]
    43e0:	3b01      	subs	r3, #1
    43e2:	0922      	lsrs	r2, r4, #4
    43e4:	421a      	tst	r2, r3
    43e6:	d007      	beq.n	43f8 <dir_next+0x5c>
	dj->index = i;
    43e8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    43ea:	6833      	ldr	r3, [r6, #0]
    43ec:	3330      	adds	r3, #48	; 0x30
    43ee:	017f      	lsls	r7, r7, #5
    43f0:	19df      	adds	r7, r3, r7
    43f2:	6177      	str	r7, [r6, #20]
	return FR_OK;
    43f4:	2000      	movs	r0, #0
    43f6:	e7dd      	b.n	43b4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <dir_next+0x110>)
    43fa:	4798      	blx	r3
    43fc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    43fe:	2002      	movs	r0, #2
    4400:	4643      	mov	r3, r8
    4402:	2b01      	cmp	r3, #1
    4404:	d9d6      	bls.n	43b4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4406:	3301      	adds	r3, #1
    4408:	d04b      	beq.n	44a2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    440a:	6833      	ldr	r3, [r6, #0]
    440c:	699a      	ldr	r2, [r3, #24]
    440e:	4590      	cmp	r8, r2
    4410:	d33f      	bcc.n	4492 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4412:	3002      	adds	r0, #2
    4414:	2d00      	cmp	r5, #0
    4416:	d0cd      	beq.n	43b4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4418:	68f1      	ldr	r1, [r6, #12]
    441a:	0018      	movs	r0, r3
    441c:	4b24      	ldr	r3, [pc, #144]	; (44b0 <dir_next+0x114>)
    441e:	4798      	blx	r3
    4420:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4422:	2007      	movs	r0, #7
    4424:	4643      	mov	r3, r8
    4426:	2b00      	cmp	r3, #0
    4428:	d0c4      	beq.n	43b4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    442a:	3805      	subs	r0, #5
    442c:	2b01      	cmp	r3, #1
    442e:	d0c1      	beq.n	43b4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4430:	3801      	subs	r0, #1
    4432:	3301      	adds	r3, #1
    4434:	d0be      	beq.n	43b4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4436:	2100      	movs	r1, #0
    4438:	6830      	ldr	r0, [r6, #0]
    443a:	4b1e      	ldr	r3, [pc, #120]	; (44b4 <dir_next+0x118>)
    443c:	4798      	blx	r3
    443e:	0003      	movs	r3, r0
    4440:	2001      	movs	r0, #1
    4442:	2b00      	cmp	r3, #0
    4444:	d1b6      	bne.n	43b4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4446:	6830      	ldr	r0, [r6, #0]
    4448:	3030      	adds	r0, #48	; 0x30
    444a:	2280      	movs	r2, #128	; 0x80
    444c:	0092      	lsls	r2, r2, #2
    444e:	2100      	movs	r1, #0
    4450:	4b19      	ldr	r3, [pc, #100]	; (44b8 <dir_next+0x11c>)
    4452:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4454:	6835      	ldr	r5, [r6, #0]
    4456:	4641      	mov	r1, r8
    4458:	0028      	movs	r0, r5
    445a:	4b18      	ldr	r3, [pc, #96]	; (44bc <dir_next+0x120>)
    445c:	4798      	blx	r3
    445e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4460:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4462:	2301      	movs	r3, #1
    4464:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4466:	6833      	ldr	r3, [r6, #0]
    4468:	789a      	ldrb	r2, [r3, #2]
    446a:	42aa      	cmp	r2, r5
    446c:	d90e      	bls.n	448c <dir_next+0xf0>
						dj->fs->wflag = 1;
    446e:	4652      	mov	r2, sl
    4470:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4472:	2100      	movs	r1, #0
    4474:	6830      	ldr	r0, [r6, #0]
    4476:	4b0f      	ldr	r3, [pc, #60]	; (44b4 <dir_next+0x118>)
    4478:	4798      	blx	r3
    447a:	2800      	cmp	r0, #0
    447c:	d113      	bne.n	44a6 <dir_next+0x10a>
						dj->fs->winsect++;
    447e:	6832      	ldr	r2, [r6, #0]
    4480:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4482:	3301      	adds	r3, #1
    4484:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4486:	3501      	adds	r5, #1
    4488:	b2ed      	uxtb	r5, r5
    448a:	e7ec      	b.n	4466 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    448e:	1b52      	subs	r2, r2, r5
    4490:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4492:	4643      	mov	r3, r8
    4494:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4496:	4641      	mov	r1, r8
    4498:	6830      	ldr	r0, [r6, #0]
    449a:	4b08      	ldr	r3, [pc, #32]	; (44bc <dir_next+0x120>)
    449c:	4798      	blx	r3
    449e:	6130      	str	r0, [r6, #16]
    44a0:	e7a2      	b.n	43e8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    44a2:	2001      	movs	r0, #1
    44a4:	e786      	b.n	43b4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    44a6:	2001      	movs	r0, #1
    44a8:	e784      	b.n	43b4 <dir_next+0x18>
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	00003f85 	.word	0x00003f85
    44b0:	00004261 	.word	0x00004261
    44b4:	00003ee5 	.word	0x00003ee5
    44b8:	00003a19 	.word	0x00003a19
    44bc:	00003a2b 	.word	0x00003a2b

000044c0 <dir_find>:
{
    44c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c2:	46de      	mov	lr, fp
    44c4:	4657      	mov	r7, sl
    44c6:	464e      	mov	r6, r9
    44c8:	4645      	mov	r5, r8
    44ca:	b5e0      	push	{r5, r6, r7, lr}
    44cc:	b083      	sub	sp, #12
    44ce:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    44d0:	2100      	movs	r1, #0
    44d2:	4b5a      	ldr	r3, [pc, #360]	; (463c <dir_find+0x17c>)
    44d4:	4798      	blx	r3
    44d6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    44d8:	d000      	beq.n	44dc <dir_find+0x1c>
    44da:	e09e      	b.n	461a <dir_find+0x15a>
    44dc:	23ff      	movs	r3, #255	; 0xff
    44de:	4699      	mov	r9, r3
    44e0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    44e2:	4b57      	ldr	r3, [pc, #348]	; (4640 <dir_find+0x180>)
    44e4:	469b      	mov	fp, r3
    44e6:	e01b      	b.n	4520 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    44e8:	2b0f      	cmp	r3, #15
    44ea:	d030      	beq.n	454e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    44ec:	4653      	mov	r3, sl
    44ee:	2b00      	cmp	r3, #0
    44f0:	d105      	bne.n	44fe <dir_find+0x3e>
    44f2:	0020      	movs	r0, r4
    44f4:	4b53      	ldr	r3, [pc, #332]	; (4644 <dir_find+0x184>)
    44f6:	4798      	blx	r3
    44f8:	4581      	cmp	r9, r0
    44fa:	d100      	bne.n	44fe <dir_find+0x3e>
    44fc:	e08d      	b.n	461a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    44fe:	2301      	movs	r3, #1
    4500:	425b      	negs	r3, r3
    4502:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4504:	69a8      	ldr	r0, [r5, #24]
    4506:	7ac3      	ldrb	r3, [r0, #11]
    4508:	07db      	lsls	r3, r3, #31
    450a:	d400      	bmi.n	450e <dir_find+0x4e>
    450c:	e07d      	b.n	460a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    450e:	23ff      	movs	r3, #255	; 0xff
    4510:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4512:	2100      	movs	r1, #0
    4514:	0028      	movs	r0, r5
    4516:	4b4c      	ldr	r3, [pc, #304]	; (4648 <dir_find+0x188>)
    4518:	4798      	blx	r3
    451a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    451c:	d000      	beq.n	4520 <dir_find+0x60>
    451e:	e07c      	b.n	461a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4520:	6929      	ldr	r1, [r5, #16]
    4522:	6828      	ldr	r0, [r5, #0]
    4524:	47d8      	blx	fp
    4526:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4528:	d177      	bne.n	461a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    452a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    452c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    452e:	2e00      	cmp	r6, #0
    4530:	d100      	bne.n	4534 <dir_find+0x74>
    4532:	e080      	b.n	4636 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4534:	7ae2      	ldrb	r2, [r4, #11]
    4536:	233f      	movs	r3, #63	; 0x3f
    4538:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    453a:	2ee5      	cmp	r6, #229	; 0xe5
    453c:	d100      	bne.n	4540 <dir_find+0x80>
    453e:	e077      	b.n	4630 <dir_find+0x170>
    4540:	0712      	lsls	r2, r2, #28
    4542:	d5d1      	bpl.n	44e8 <dir_find+0x28>
    4544:	2b0f      	cmp	r3, #15
    4546:	d002      	beq.n	454e <dir_find+0x8e>
			ord = 0xFF;
    4548:	23ff      	movs	r3, #255	; 0xff
    454a:	469a      	mov	sl, r3
    454c:	e7e1      	b.n	4512 <dir_find+0x52>
				if (dj->lfn) {
    454e:	69ef      	ldr	r7, [r5, #28]
    4550:	2f00      	cmp	r7, #0
    4552:	d0de      	beq.n	4512 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4554:	0673      	lsls	r3, r6, #25
    4556:	d518      	bpl.n	458a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4558:	7b63      	ldrb	r3, [r4, #13]
    455a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    455c:	2340      	movs	r3, #64	; 0x40
    455e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4560:	88eb      	ldrh	r3, [r5, #6]
    4562:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4564:	7b63      	ldrb	r3, [r4, #13]
    4566:	9300      	str	r3, [sp, #0]
    4568:	22ff      	movs	r2, #255	; 0xff
    456a:	4692      	mov	sl, r2
    456c:	454b      	cmp	r3, r9
    456e:	d1d0      	bne.n	4512 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4570:	7823      	ldrb	r3, [r4, #0]
    4572:	3abf      	subs	r2, #191	; 0xbf
    4574:	4393      	bics	r3, r2
    4576:	3b01      	subs	r3, #1
    4578:	005a      	lsls	r2, r3, #1
    457a:	18d2      	adds	r2, r2, r3
    457c:	0092      	lsls	r2, r2, #2
    457e:	4692      	mov	sl, r2
    4580:	449a      	add	sl, r3
	s = 0; wc = 1;
    4582:	2201      	movs	r2, #1
    4584:	2300      	movs	r3, #0
    4586:	4699      	mov	r9, r3
    4588:	e01d      	b.n	45c6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    458a:	45b2      	cmp	sl, r6
    458c:	d0ea      	beq.n	4564 <dir_find+0xa4>
    458e:	23ff      	movs	r3, #255	; 0xff
    4590:	469a      	mov	sl, r3
    4592:	e7be      	b.n	4512 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4594:	4b2d      	ldr	r3, [pc, #180]	; (464c <dir_find+0x18c>)
    4596:	4798      	blx	r3
    4598:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    459a:	4653      	mov	r3, sl
    459c:	2bfe      	cmp	r3, #254	; 0xfe
    459e:	d81f      	bhi.n	45e0 <dir_find+0x120>
    45a0:	2301      	movs	r3, #1
    45a2:	4453      	add	r3, sl
    45a4:	4698      	mov	r8, r3
    45a6:	4653      	mov	r3, sl
    45a8:	005b      	lsls	r3, r3, #1
    45aa:	5bd8      	ldrh	r0, [r3, r7]
    45ac:	4b27      	ldr	r3, [pc, #156]	; (464c <dir_find+0x18c>)
    45ae:	4798      	blx	r3
    45b0:	0002      	movs	r2, r0
    45b2:	9b01      	ldr	r3, [sp, #4]
    45b4:	4283      	cmp	r3, r0
    45b6:	d113      	bne.n	45e0 <dir_find+0x120>
    45b8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    45ba:	2301      	movs	r3, #1
    45bc:	469c      	mov	ip, r3
    45be:	44e1      	add	r9, ip
    45c0:	464b      	mov	r3, r9
    45c2:	2b0d      	cmp	r3, #13
    45c4:	d011      	beq.n	45ea <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    45c6:	4b22      	ldr	r3, [pc, #136]	; (4650 <dir_find+0x190>)
    45c8:	4649      	mov	r1, r9
    45ca:	5cc9      	ldrb	r1, [r1, r3]
    45cc:	1863      	adds	r3, r4, r1
    45ce:	785b      	ldrb	r3, [r3, #1]
    45d0:	021b      	lsls	r3, r3, #8
    45d2:	5c60      	ldrb	r0, [r4, r1]
    45d4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    45d6:	2a00      	cmp	r2, #0
    45d8:	d1dc      	bne.n	4594 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    45da:	4b1e      	ldr	r3, [pc, #120]	; (4654 <dir_find+0x194>)
    45dc:	4298      	cmp	r0, r3
    45de:	d0ec      	beq.n	45ba <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    45e0:	9b00      	ldr	r3, [sp, #0]
    45e2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45e4:	23ff      	movs	r3, #255	; 0xff
    45e6:	469a      	mov	sl, r3
    45e8:	e793      	b.n	4512 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    45ea:	7823      	ldrb	r3, [r4, #0]
    45ec:	065b      	lsls	r3, r3, #25
    45ee:	d506      	bpl.n	45fe <dir_find+0x13e>
    45f0:	2a00      	cmp	r2, #0
    45f2:	d004      	beq.n	45fe <dir_find+0x13e>
    45f4:	4653      	mov	r3, sl
    45f6:	005b      	lsls	r3, r3, #1
    45f8:	5bdb      	ldrh	r3, [r3, r7]
    45fa:	2b00      	cmp	r3, #0
    45fc:	d1f0      	bne.n	45e0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    45fe:	3e01      	subs	r6, #1
    4600:	b2f3      	uxtb	r3, r6
    4602:	469a      	mov	sl, r3
    4604:	9b00      	ldr	r3, [sp, #0]
    4606:	4699      	mov	r9, r3
    4608:	e783      	b.n	4512 <dir_find+0x52>
    460a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    460c:	5ce1      	ldrb	r1, [r4, r3]
    460e:	5cc2      	ldrb	r2, [r0, r3]
    4610:	4291      	cmp	r1, r2
    4612:	d10a      	bne.n	462a <dir_find+0x16a>
    4614:	3301      	adds	r3, #1
    4616:	2b0b      	cmp	r3, #11
    4618:	d1f8      	bne.n	460c <dir_find+0x14c>
}
    461a:	0038      	movs	r0, r7
    461c:	b003      	add	sp, #12
    461e:	bc3c      	pop	{r2, r3, r4, r5}
    4620:	4690      	mov	r8, r2
    4622:	4699      	mov	r9, r3
    4624:	46a2      	mov	sl, r4
    4626:	46ab      	mov	fp, r5
    4628:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    462a:	23ff      	movs	r3, #255	; 0xff
    462c:	469a      	mov	sl, r3
    462e:	e770      	b.n	4512 <dir_find+0x52>
			ord = 0xFF;
    4630:	23ff      	movs	r3, #255	; 0xff
    4632:	469a      	mov	sl, r3
    4634:	e76d      	b.n	4512 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4636:	2704      	movs	r7, #4
    4638:	e7ef      	b.n	461a <dir_find+0x15a>
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	00004081 	.word	0x00004081
    4640:	00003ee5 	.word	0x00003ee5
    4644:	00003a43 	.word	0x00003a43
    4648:	0000439d 	.word	0x0000439d
    464c:	0000545d 	.word	0x0000545d
    4650:	00006e10 	.word	0x00006e10
    4654:	0000ffff 	.word	0x0000ffff

00004658 <dir_register>:
{
    4658:	b5f0      	push	{r4, r5, r6, r7, lr}
    465a:	46de      	mov	lr, fp
    465c:	4657      	mov	r7, sl
    465e:	464e      	mov	r6, r9
    4660:	4645      	mov	r5, r8
    4662:	b5e0      	push	{r5, r6, r7, lr}
    4664:	b089      	sub	sp, #36	; 0x24
    4666:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4668:	6987      	ldr	r7, [r0, #24]
    466a:	69c3      	ldr	r3, [r0, #28]
    466c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    466e:	ad05      	add	r5, sp, #20
    4670:	220c      	movs	r2, #12
    4672:	0039      	movs	r1, r7
    4674:	0028      	movs	r0, r5
    4676:	4ba7      	ldr	r3, [pc, #668]	; (4914 <dir_register+0x2bc>)
    4678:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    467a:	7aeb      	ldrb	r3, [r5, #11]
    467c:	07db      	lsls	r3, r3, #31
    467e:	d400      	bmi.n	4682 <dir_register+0x2a>
    4680:	e070      	b.n	4764 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4682:	2300      	movs	r3, #0
    4684:	72fb      	strb	r3, [r7, #11]
    4686:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4688:	220b      	movs	r2, #11
    468a:	a905      	add	r1, sp, #20
    468c:	0038      	movs	r0, r7
    468e:	4ba1      	ldr	r3, [pc, #644]	; (4914 <dir_register+0x2bc>)
    4690:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4692:	2301      	movs	r3, #1
		ns[i--] = c;
    4694:	ad03      	add	r5, sp, #12
    4696:	001e      	movs	r6, r3
    4698:	46a0      	mov	r8, r4
    469a:	e049      	b.n	4730 <dir_register+0xd8>
    469c:	3801      	subs	r0, #1
    469e:	1829      	adds	r1, r5, r0
    46a0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    46a2:	091b      	lsrs	r3, r3, #4
    46a4:	b29b      	uxth	r3, r3
	} while (seq);
    46a6:	2b00      	cmp	r3, #0
    46a8:	d007      	beq.n	46ba <dir_register+0x62>
		c = (seq % 16) + '0';
    46aa:	0021      	movs	r1, r4
    46ac:	4019      	ands	r1, r3
    46ae:	000a      	movs	r2, r1
    46b0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    46b2:	2a39      	cmp	r2, #57	; 0x39
    46b4:	d9f2      	bls.n	469c <dir_register+0x44>
    46b6:	3207      	adds	r2, #7
    46b8:	e7f0      	b.n	469c <dir_register+0x44>
	ns[i] = '~';
    46ba:	337e      	adds	r3, #126	; 0x7e
    46bc:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    46be:	2800      	cmp	r0, #0
    46c0:	d00a      	beq.n	46d8 <dir_register+0x80>
    46c2:	783b      	ldrb	r3, [r7, #0]
    46c4:	2b20      	cmp	r3, #32
    46c6:	d009      	beq.n	46dc <dir_register+0x84>
    46c8:	2300      	movs	r3, #0
    46ca:	3301      	adds	r3, #1
    46cc:	4298      	cmp	r0, r3
    46ce:	d007      	beq.n	46e0 <dir_register+0x88>
    46d0:	5cfa      	ldrb	r2, [r7, r3]
    46d2:	2a20      	cmp	r2, #32
    46d4:	d1f9      	bne.n	46ca <dir_register+0x72>
    46d6:	e009      	b.n	46ec <dir_register+0x94>
    46d8:	0003      	movs	r3, r0
    46da:	e007      	b.n	46ec <dir_register+0x94>
    46dc:	2300      	movs	r3, #0
    46de:	e005      	b.n	46ec <dir_register+0x94>
    46e0:	0003      	movs	r3, r0
    46e2:	e003      	b.n	46ec <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    46e4:	54fa      	strb	r2, [r7, r3]
    46e6:	3301      	adds	r3, #1
	} while (j < 8);
    46e8:	2b07      	cmp	r3, #7
    46ea:	d805      	bhi.n	46f8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    46ec:	2220      	movs	r2, #32
    46ee:	2807      	cmp	r0, #7
    46f0:	d8f8      	bhi.n	46e4 <dir_register+0x8c>
    46f2:	5c2a      	ldrb	r2, [r5, r0]
    46f4:	3001      	adds	r0, #1
    46f6:	e7f5      	b.n	46e4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    46f8:	4640      	mov	r0, r8
    46fa:	4b87      	ldr	r3, [pc, #540]	; (4918 <dir_register+0x2c0>)
    46fc:	4798      	blx	r3
			if (res != FR_OK) break;
    46fe:	2800      	cmp	r0, #0
    4700:	d11c      	bne.n	473c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4702:	3601      	adds	r6, #1
    4704:	b2b6      	uxth	r6, r6
    4706:	2e64      	cmp	r6, #100	; 0x64
    4708:	d015      	beq.n	4736 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    470a:	220b      	movs	r2, #11
    470c:	a905      	add	r1, sp, #20
    470e:	0038      	movs	r0, r7
    4710:	4b80      	ldr	r3, [pc, #512]	; (4914 <dir_register+0x2bc>)
    4712:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4714:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4716:	2e05      	cmp	r6, #5
    4718:	d90a      	bls.n	4730 <dir_register+0xd8>
    471a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    471c:	085a      	lsrs	r2, r3, #1
    471e:	03db      	lsls	r3, r3, #15
    4720:	4313      	orrs	r3, r2
    4722:	880a      	ldrh	r2, [r1, #0]
    4724:	189b      	adds	r3, r3, r2
    4726:	b29b      	uxth	r3, r3
    4728:	3102      	adds	r1, #2
    472a:	880a      	ldrh	r2, [r1, #0]
    472c:	2a00      	cmp	r2, #0
    472e:	d1f5      	bne.n	471c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4730:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4732:	240f      	movs	r4, #15
    4734:	e7b9      	b.n	46aa <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4736:	2307      	movs	r3, #7
    4738:	4698      	mov	r8, r3
    473a:	e006      	b.n	474a <dir_register+0xf2>
    473c:	4644      	mov	r4, r8
    473e:	4680      	mov	r8, r0
    4740:	2e64      	cmp	r6, #100	; 0x64
    4742:	d100      	bne.n	4746 <dir_register+0xee>
    4744:	e0a5      	b.n	4892 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4746:	2804      	cmp	r0, #4
    4748:	d007      	beq.n	475a <dir_register+0x102>
}
    474a:	4640      	mov	r0, r8
    474c:	b009      	add	sp, #36	; 0x24
    474e:	bc3c      	pop	{r2, r3, r4, r5}
    4750:	4690      	mov	r8, r2
    4752:	4699      	mov	r9, r3
    4754:	46a2      	mov	sl, r4
    4756:	46ab      	mov	fp, r5
    4758:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    475a:	ab05      	add	r3, sp, #20
    475c:	7adb      	ldrb	r3, [r3, #11]
    475e:	72fb      	strb	r3, [r7, #11]
    4760:	4653      	mov	r3, sl
    4762:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4764:	ab05      	add	r3, sp, #20
    4766:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4768:	2201      	movs	r2, #1
    476a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    476c:	079b      	lsls	r3, r3, #30
    476e:	d511      	bpl.n	4794 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4770:	4653      	mov	r3, sl
    4772:	881b      	ldrh	r3, [r3, #0]
    4774:	2b00      	cmp	r3, #0
    4776:	d01b      	beq.n	47b0 <dir_register+0x158>
    4778:	2000      	movs	r0, #0
    477a:	4652      	mov	r2, sl
    477c:	3001      	adds	r0, #1
    477e:	b280      	uxth	r0, r0
    4780:	0043      	lsls	r3, r0, #1
    4782:	5a9b      	ldrh	r3, [r3, r2]
    4784:	2b00      	cmp	r3, #0
    4786:	d1f9      	bne.n	477c <dir_register+0x124>
		ne = (ne + 25) / 13;
    4788:	3019      	adds	r0, #25
    478a:	210d      	movs	r1, #13
    478c:	4b63      	ldr	r3, [pc, #396]	; (491c <dir_register+0x2c4>)
    478e:	4798      	blx	r3
    4790:	b283      	uxth	r3, r0
    4792:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4794:	2100      	movs	r1, #0
    4796:	0020      	movs	r0, r4
    4798:	4b61      	ldr	r3, [pc, #388]	; (4920 <dir_register+0x2c8>)
    479a:	4798      	blx	r3
    479c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    479e:	2800      	cmp	r0, #0
    47a0:	d1d3      	bne.n	474a <dir_register+0xf2>
    47a2:	4682      	mov	sl, r0
    47a4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    47a6:	4f5f      	ldr	r7, [pc, #380]	; (4924 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    47a8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    47aa:	4b5f      	ldr	r3, [pc, #380]	; (4928 <dir_register+0x2d0>)
    47ac:	4699      	mov	r9, r3
    47ae:	e00b      	b.n	47c8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    47b0:	2000      	movs	r0, #0
    47b2:	e7e9      	b.n	4788 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    47b4:	1c6b      	adds	r3, r5, #1
    47b6:	b29b      	uxth	r3, r3
    47b8:	459b      	cmp	fp, r3
    47ba:	d06d      	beq.n	4898 <dir_register+0x240>
    47bc:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    47be:	2101      	movs	r1, #1
    47c0:	0020      	movs	r0, r4
    47c2:	47c8      	blx	r9
	} while (res == FR_OK);
    47c4:	2800      	cmp	r0, #0
    47c6:	d112      	bne.n	47ee <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    47c8:	6921      	ldr	r1, [r4, #16]
    47ca:	6820      	ldr	r0, [r4, #0]
    47cc:	47b8      	blx	r7
		if (res != FR_OK) break;
    47ce:	2800      	cmp	r0, #0
    47d0:	d000      	beq.n	47d4 <dir_register+0x17c>
    47d2:	e098      	b.n	4906 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    47d4:	6963      	ldr	r3, [r4, #20]
    47d6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    47d8:	2be5      	cmp	r3, #229	; 0xe5
    47da:	d001      	beq.n	47e0 <dir_register+0x188>
    47dc:	2b00      	cmp	r3, #0
    47de:	d104      	bne.n	47ea <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    47e0:	2d00      	cmp	r5, #0
    47e2:	d1e7      	bne.n	47b4 <dir_register+0x15c>
    47e4:	88e3      	ldrh	r3, [r4, #6]
    47e6:	469a      	mov	sl, r3
    47e8:	e7e4      	b.n	47b4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    47ea:	0035      	movs	r5, r6
    47ec:	e7e7      	b.n	47be <dir_register+0x166>
    47ee:	4680      	mov	r8, r0
    47f0:	e7ab      	b.n	474a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    47f2:	4651      	mov	r1, sl
    47f4:	0020      	movs	r0, r4
    47f6:	4b4a      	ldr	r3, [pc, #296]	; (4920 <dir_register+0x2c8>)
    47f8:	4798      	blx	r3
    47fa:	4680      	mov	r8, r0
		if (res == FR_OK) {
    47fc:	2800      	cmp	r0, #0
    47fe:	d1a4      	bne.n	474a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4800:	69a0      	ldr	r0, [r4, #24]
    4802:	4b4a      	ldr	r3, [pc, #296]	; (492c <dir_register+0x2d4>)
    4804:	4798      	blx	r3
    4806:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4808:	46a8      	mov	r8, r5
    480a:	e01f      	b.n	484c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    480c:	0022      	movs	r2, r4
    480e:	e067      	b.n	48e0 <dir_register+0x288>
    4810:	465e      	mov	r6, fp
    4812:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4814:	4946      	ldr	r1, [pc, #280]	; (4930 <dir_register+0x2d8>)
    4816:	428b      	cmp	r3, r1
    4818:	d003      	beq.n	4822 <dir_register+0x1ca>
    481a:	0052      	lsls	r2, r2, #1
    481c:	5b93      	ldrh	r3, [r2, r6]
    481e:	2b00      	cmp	r3, #0
    4820:	d103      	bne.n	482a <dir_register+0x1d2>
    4822:	2340      	movs	r3, #64	; 0x40
    4824:	464a      	mov	r2, r9
    4826:	431a      	orrs	r2, r3
    4828:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    482a:	464b      	mov	r3, r9
    482c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    482e:	2301      	movs	r3, #1
    4830:	6822      	ldr	r2, [r4, #0]
    4832:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4834:	2100      	movs	r1, #0
    4836:	0020      	movs	r0, r4
    4838:	4b3b      	ldr	r3, [pc, #236]	; (4928 <dir_register+0x2d0>)
    483a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    483c:	2800      	cmp	r0, #0
    483e:	d166      	bne.n	490e <dir_register+0x2b6>
    4840:	4645      	mov	r5, r8
    4842:	3d01      	subs	r5, #1
    4844:	b2ab      	uxth	r3, r5
    4846:	4698      	mov	r8, r3
    4848:	2b00      	cmp	r3, #0
    484a:	d027      	beq.n	489c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    484c:	6921      	ldr	r1, [r4, #16]
    484e:	6820      	ldr	r0, [r4, #0]
    4850:	4b34      	ldr	r3, [pc, #208]	; (4924 <dir_register+0x2cc>)
    4852:	4798      	blx	r3
				if (res != FR_OK) break;
    4854:	2800      	cmp	r0, #0
    4856:	d158      	bne.n	490a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4858:	69e6      	ldr	r6, [r4, #28]
    485a:	6960      	ldr	r0, [r4, #20]
    485c:	4643      	mov	r3, r8
    485e:	466a      	mov	r2, sp
    4860:	70d3      	strb	r3, [r2, #3]
    4862:	78d3      	ldrb	r3, [r2, #3]
    4864:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4866:	7913      	ldrb	r3, [r2, #4]
    4868:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    486a:	230f      	movs	r3, #15
    486c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    486e:	2300      	movs	r3, #0
    4870:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4872:	7683      	strb	r3, [r0, #26]
    4874:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4876:	464b      	mov	r3, r9
    4878:	3b01      	subs	r3, #1
    487a:	005a      	lsls	r2, r3, #1
    487c:	18d2      	adds	r2, r2, r3
    487e:	0092      	lsls	r2, r2, #2
    4880:	18d2      	adds	r2, r2, r3
    4882:	492c      	ldr	r1, [pc, #176]	; (4934 <dir_register+0x2dc>)
    4884:	000d      	movs	r5, r1
    4886:	350d      	adds	r5, #13
	s = wc = 0;
    4888:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    488a:	4f29      	ldr	r7, [pc, #164]	; (4930 <dir_register+0x2d8>)
    488c:	46b3      	mov	fp, r6
    488e:	46a4      	mov	ip, r4
    4890:	e029      	b.n	48e6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4892:	2307      	movs	r3, #7
    4894:	4698      	mov	r8, r3
    4896:	e758      	b.n	474a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4898:	2b01      	cmp	r3, #1
    489a:	d8aa      	bhi.n	47f2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    489c:	6921      	ldr	r1, [r4, #16]
    489e:	6820      	ldr	r0, [r4, #0]
    48a0:	4b20      	ldr	r3, [pc, #128]	; (4924 <dir_register+0x2cc>)
    48a2:	4798      	blx	r3
    48a4:	4680      	mov	r8, r0
		if (res == FR_OK) {
    48a6:	2800      	cmp	r0, #0
    48a8:	d000      	beq.n	48ac <dir_register+0x254>
    48aa:	e74e      	b.n	474a <dir_register+0xf2>
			dir = dj->dir;
    48ac:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    48ae:	2220      	movs	r2, #32
    48b0:	2100      	movs	r1, #0
    48b2:	0028      	movs	r0, r5
    48b4:	4b20      	ldr	r3, [pc, #128]	; (4938 <dir_register+0x2e0>)
    48b6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    48b8:	220b      	movs	r2, #11
    48ba:	69a1      	ldr	r1, [r4, #24]
    48bc:	0028      	movs	r0, r5
    48be:	4b15      	ldr	r3, [pc, #84]	; (4914 <dir_register+0x2bc>)
    48c0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    48c2:	69a3      	ldr	r3, [r4, #24]
    48c4:	7ada      	ldrb	r2, [r3, #11]
    48c6:	2318      	movs	r3, #24
    48c8:	4013      	ands	r3, r2
    48ca:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	2201      	movs	r2, #1
    48d0:	711a      	strb	r2, [r3, #4]
    48d2:	e73a      	b.n	474a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    48d4:	780c      	ldrb	r4, [r1, #0]
    48d6:	26ff      	movs	r6, #255	; 0xff
    48d8:	5506      	strb	r6, [r0, r4]
    48da:	1904      	adds	r4, r0, r4
    48dc:	26ff      	movs	r6, #255	; 0xff
    48de:	7066      	strb	r6, [r4, #1]
    48e0:	3101      	adds	r1, #1
	} while (++s < 13);
    48e2:	42a9      	cmp	r1, r5
    48e4:	d094      	beq.n	4810 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    48e6:	42bb      	cmp	r3, r7
    48e8:	d0f4      	beq.n	48d4 <dir_register+0x27c>
    48ea:	1c54      	adds	r4, r2, #1
    48ec:	0052      	lsls	r2, r2, #1
    48ee:	465b      	mov	r3, fp
    48f0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    48f2:	780a      	ldrb	r2, [r1, #0]
    48f4:	5483      	strb	r3, [r0, r2]
    48f6:	1882      	adds	r2, r0, r2
    48f8:	0a1e      	lsrs	r6, r3, #8
    48fa:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    48fc:	2b00      	cmp	r3, #0
    48fe:	d185      	bne.n	480c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4900:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4902:	003b      	movs	r3, r7
    4904:	e7ec      	b.n	48e0 <dir_register+0x288>
    4906:	4680      	mov	r8, r0
    4908:	e71f      	b.n	474a <dir_register+0xf2>
    490a:	4680      	mov	r8, r0
    490c:	e71d      	b.n	474a <dir_register+0xf2>
    490e:	4680      	mov	r8, r0
    4910:	e71b      	b.n	474a <dir_register+0xf2>
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	00003a05 	.word	0x00003a05
    4918:	000044c1 	.word	0x000044c1
    491c:	00005a21 	.word	0x00005a21
    4920:	00004081 	.word	0x00004081
    4924:	00003ee5 	.word	0x00003ee5
    4928:	0000439d 	.word	0x0000439d
    492c:	00003a43 	.word	0x00003a43
    4930:	0000ffff 	.word	0x0000ffff
    4934:	00006e10 	.word	0x00006e10
    4938:	00003a19 	.word	0x00003a19

0000493c <sync>:
{
    493c:	b570      	push	{r4, r5, r6, lr}
    493e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4940:	2100      	movs	r1, #0
    4942:	4b2c      	ldr	r3, [pc, #176]	; (49f4 <sync+0xb8>)
    4944:	4798      	blx	r3
	if (res == FR_OK) {
    4946:	2800      	cmp	r0, #0
    4948:	d10a      	bne.n	4960 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    494a:	7823      	ldrb	r3, [r4, #0]
    494c:	2b03      	cmp	r3, #3
    494e:	d008      	beq.n	4962 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4950:	7860      	ldrb	r0, [r4, #1]
    4952:	2200      	movs	r2, #0
    4954:	2100      	movs	r1, #0
    4956:	4b28      	ldr	r3, [pc, #160]	; (49f8 <sync+0xbc>)
    4958:	4798      	blx	r3
    495a:	1e43      	subs	r3, r0, #1
    495c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    495e:	b2c0      	uxtb	r0, r0
}
    4960:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4962:	7963      	ldrb	r3, [r4, #5]
    4964:	2b00      	cmp	r3, #0
    4966:	d0f3      	beq.n	4950 <sync+0x14>
			fs->winsect = 0;
    4968:	2600      	movs	r6, #0
    496a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    496c:	0025      	movs	r5, r4
    496e:	3530      	adds	r5, #48	; 0x30
    4970:	2280      	movs	r2, #128	; 0x80
    4972:	0092      	lsls	r2, r2, #2
    4974:	2100      	movs	r1, #0
    4976:	0028      	movs	r0, r5
    4978:	4b20      	ldr	r3, [pc, #128]	; (49fc <sync+0xc0>)
    497a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    497c:	2255      	movs	r2, #85	; 0x55
    497e:	4b20      	ldr	r3, [pc, #128]	; (4a00 <sync+0xc4>)
    4980:	54e2      	strb	r2, [r4, r3]
    4982:	3255      	adds	r2, #85	; 0x55
    4984:	4b1f      	ldr	r3, [pc, #124]	; (4a04 <sync+0xc8>)
    4986:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4988:	3bde      	subs	r3, #222	; 0xde
    498a:	3bff      	subs	r3, #255	; 0xff
    498c:	3a7a      	subs	r2, #122	; 0x7a
    498e:	54a3      	strb	r3, [r4, r2]
    4990:	3201      	adds	r2, #1
    4992:	54a3      	strb	r3, [r4, r2]
    4994:	330f      	adds	r3, #15
    4996:	3201      	adds	r2, #1
    4998:	54a3      	strb	r3, [r4, r2]
    499a:	320f      	adds	r2, #15
    499c:	2133      	movs	r1, #51	; 0x33
    499e:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    49a0:	313f      	adds	r1, #63	; 0x3f
    49a2:	2085      	movs	r0, #133	; 0x85
    49a4:	0080      	lsls	r0, r0, #2
    49a6:	5421      	strb	r1, [r4, r0]
    49a8:	4817      	ldr	r0, [pc, #92]	; (4a08 <sync+0xcc>)
    49aa:	5421      	strb	r1, [r4, r0]
    49ac:	4917      	ldr	r1, [pc, #92]	; (4a0c <sync+0xd0>)
    49ae:	5462      	strb	r2, [r4, r1]
    49b0:	4a17      	ldr	r2, [pc, #92]	; (4a10 <sync+0xd4>)
    49b2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    49b4:	6923      	ldr	r3, [r4, #16]
    49b6:	3201      	adds	r2, #1
    49b8:	54a3      	strb	r3, [r4, r2]
    49ba:	0a19      	lsrs	r1, r3, #8
    49bc:	4a15      	ldr	r2, [pc, #84]	; (4a14 <sync+0xd8>)
    49be:	54a1      	strb	r1, [r4, r2]
    49c0:	0c19      	lsrs	r1, r3, #16
    49c2:	4a15      	ldr	r2, [pc, #84]	; (4a18 <sync+0xdc>)
    49c4:	54a1      	strb	r1, [r4, r2]
    49c6:	0e1b      	lsrs	r3, r3, #24
    49c8:	4a14      	ldr	r2, [pc, #80]	; (4a1c <sync+0xe0>)
    49ca:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    49cc:	68e3      	ldr	r3, [r4, #12]
    49ce:	3201      	adds	r2, #1
    49d0:	54a3      	strb	r3, [r4, r2]
    49d2:	0a19      	lsrs	r1, r3, #8
    49d4:	4a12      	ldr	r2, [pc, #72]	; (4a20 <sync+0xe4>)
    49d6:	54a1      	strb	r1, [r4, r2]
    49d8:	0c19      	lsrs	r1, r3, #16
    49da:	4a12      	ldr	r2, [pc, #72]	; (4a24 <sync+0xe8>)
    49dc:	54a1      	strb	r1, [r4, r2]
    49de:	0e1b      	lsrs	r3, r3, #24
    49e0:	4a11      	ldr	r2, [pc, #68]	; (4a28 <sync+0xec>)
    49e2:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    49e4:	7860      	ldrb	r0, [r4, #1]
    49e6:	2301      	movs	r3, #1
    49e8:	6962      	ldr	r2, [r4, #20]
    49ea:	0029      	movs	r1, r5
    49ec:	4d0f      	ldr	r5, [pc, #60]	; (4a2c <sync+0xf0>)
    49ee:	47a8      	blx	r5
			fs->fsi_flag = 0;
    49f0:	7166      	strb	r6, [r4, #5]
    49f2:	e7ad      	b.n	4950 <sync+0x14>
    49f4:	00003ee5 	.word	0x00003ee5
    49f8:	00003949 	.word	0x00003949
    49fc:	00003a19 	.word	0x00003a19
    4a00:	0000022e 	.word	0x0000022e
    4a04:	0000022f 	.word	0x0000022f
    4a08:	00000215 	.word	0x00000215
    4a0c:	00000216 	.word	0x00000216
    4a10:	00000217 	.word	0x00000217
    4a14:	00000219 	.word	0x00000219
    4a18:	0000021a 	.word	0x0000021a
    4a1c:	0000021b 	.word	0x0000021b
    4a20:	0000021d 	.word	0x0000021d
    4a24:	0000021e 	.word	0x0000021e
    4a28:	0000021f 	.word	0x0000021f
    4a2c:	000038c5 	.word	0x000038c5

00004a30 <follow_path>:
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	46de      	mov	lr, fp
    4a34:	4657      	mov	r7, sl
    4a36:	464e      	mov	r6, r9
    4a38:	4645      	mov	r5, r8
    4a3a:	b5e0      	push	{r5, r6, r7, lr}
    4a3c:	b083      	sub	sp, #12
    4a3e:	4682      	mov	sl, r0
    4a40:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4a42:	780b      	ldrb	r3, [r1, #0]
    4a44:	2b2f      	cmp	r3, #47	; 0x2f
    4a46:	d00f      	beq.n	4a68 <follow_path+0x38>
    4a48:	2b5c      	cmp	r3, #92	; 0x5c
    4a4a:	d00d      	beq.n	4a68 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4a4c:	2300      	movs	r3, #0
    4a4e:	4652      	mov	r2, sl
    4a50:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4a52:	782b      	ldrb	r3, [r5, #0]
    4a54:	4657      	mov	r7, sl
    4a56:	2b1f      	cmp	r3, #31
    4a58:	d809      	bhi.n	4a6e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4a5a:	2100      	movs	r1, #0
    4a5c:	4650      	mov	r0, sl
    4a5e:	4bb2      	ldr	r3, [pc, #712]	; (4d28 <follow_path+0x2f8>)
    4a60:	4798      	blx	r3
		dj->dir = 0;
    4a62:	2300      	movs	r3, #0
    4a64:	617b      	str	r3, [r7, #20]
    4a66:	e13a      	b.n	4cde <follow_path+0x2ae>
		path++;
    4a68:	3501      	adds	r5, #1
    4a6a:	e7ef      	b.n	4a4c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4a6c:	3501      	adds	r5, #1
    4a6e:	7828      	ldrb	r0, [r5, #0]
    4a70:	282f      	cmp	r0, #47	; 0x2f
    4a72:	d0fb      	beq.n	4a6c <follow_path+0x3c>
    4a74:	285c      	cmp	r0, #92	; 0x5c
    4a76:	d0f9      	beq.n	4a6c <follow_path+0x3c>
	lfn = dj->lfn;
    4a78:	69fb      	ldr	r3, [r7, #28]
    4a7a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4a7c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4a7e:	281f      	cmp	r0, #31
    4a80:	d800      	bhi.n	4a84 <follow_path+0x54>
    4a82:	e13b      	b.n	4cfc <follow_path+0x2cc>
    4a84:	282f      	cmp	r0, #47	; 0x2f
    4a86:	d100      	bne.n	4a8a <follow_path+0x5a>
    4a88:	e13b      	b.n	4d02 <follow_path+0x2d2>
    4a8a:	285c      	cmp	r0, #92	; 0x5c
    4a8c:	d100      	bne.n	4a90 <follow_path+0x60>
    4a8e:	e13b      	b.n	4d08 <follow_path+0x2d8>
    4a90:	1c6e      	adds	r6, r5, #1
    4a92:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4a94:	2380      	movs	r3, #128	; 0x80
    4a96:	005b      	lsls	r3, r3, #1
    4a98:	4698      	mov	r8, r3
    4a9a:	46bb      	mov	fp, r7
    4a9c:	002b      	movs	r3, r5
    4a9e:	0025      	movs	r5, r4
    4aa0:	0034      	movs	r4, r6
    4aa2:	4656      	mov	r6, sl
    4aa4:	4699      	mov	r9, r3
    4aa6:	e011      	b.n	4acc <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d135      	bne.n	4b18 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4aac:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4aae:	1c6b      	adds	r3, r5, #1
    4ab0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4ab2:	281f      	cmp	r0, #31
    4ab4:	d91e      	bls.n	4af4 <follow_path+0xc4>
    4ab6:	282f      	cmp	r0, #47	; 0x2f
    4ab8:	d100      	bne.n	4abc <follow_path+0x8c>
    4aba:	e128      	b.n	4d0e <follow_path+0x2de>
    4abc:	285c      	cmp	r0, #92	; 0x5c
    4abe:	d100      	bne.n	4ac2 <follow_path+0x92>
    4ac0:	e142      	b.n	4d48 <follow_path+0x318>
    4ac2:	3602      	adds	r6, #2
    4ac4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4ac6:	4543      	cmp	r3, r8
    4ac8:	d026      	beq.n	4b18 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4aca:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4acc:	2101      	movs	r1, #1
    4ace:	4b97      	ldr	r3, [pc, #604]	; (4d2c <follow_path+0x2fc>)
    4ad0:	4798      	blx	r3
    4ad2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4ad4:	d020      	beq.n	4b18 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4ad6:	287f      	cmp	r0, #127	; 0x7f
    4ad8:	d8e8      	bhi.n	4aac <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4ada:	2822      	cmp	r0, #34	; 0x22
    4adc:	d100      	bne.n	4ae0 <follow_path+0xb0>
    4ade:	e0fd      	b.n	4cdc <follow_path+0x2ac>
    4ae0:	232a      	movs	r3, #42	; 0x2a
    4ae2:	4a93      	ldr	r2, [pc, #588]	; (4d30 <follow_path+0x300>)
    4ae4:	b29f      	uxth	r7, r3
    4ae6:	428f      	cmp	r7, r1
    4ae8:	d0de      	beq.n	4aa8 <follow_path+0x78>
    4aea:	3201      	adds	r2, #1
    4aec:	7813      	ldrb	r3, [r2, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d1f8      	bne.n	4ae4 <follow_path+0xb4>
    4af2:	e7db      	b.n	4aac <follow_path+0x7c>
    4af4:	002c      	movs	r4, r5
    4af6:	465f      	mov	r7, fp
    4af8:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4afa:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4afc:	2604      	movs	r6, #4
    4afe:	e10b      	b.n	4d18 <follow_path+0x2e8>
		di--;
    4b00:	3c01      	subs	r4, #1
    4b02:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4b04:	2c00      	cmp	r4, #0
    4b06:	d100      	bne.n	4b0a <follow_path+0xda>
    4b08:	e0e8      	b.n	4cdc <follow_path+0x2ac>
		w = lfn[di-1];
    4b0a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4b0c:	2a20      	cmp	r2, #32
    4b0e:	d0f7      	beq.n	4b00 <follow_path+0xd0>
    4b10:	2a2e      	cmp	r2, #46	; 0x2e
    4b12:	d0f5      	beq.n	4b00 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4b14:	2c00      	cmp	r4, #0
    4b16:	d101      	bne.n	4b1c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4b18:	2006      	movs	r0, #6
	return res;
    4b1a:	e0e0      	b.n	4cde <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4b1c:	0063      	lsls	r3, r4, #1
    4b1e:	4698      	mov	r8, r3
    4b20:	2300      	movs	r3, #0
    4b22:	4652      	mov	r2, sl
    4b24:	4641      	mov	r1, r8
    4b26:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4b28:	220b      	movs	r2, #11
    4b2a:	2120      	movs	r1, #32
    4b2c:	69b8      	ldr	r0, [r7, #24]
    4b2e:	4b81      	ldr	r3, [pc, #516]	; (4d34 <follow_path+0x304>)
    4b30:	4798      	blx	r3
    4b32:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4b34:	2300      	movs	r3, #0
    4b36:	e001      	b.n	4b3c <follow_path+0x10c>
    4b38:	3301      	adds	r3, #1
    4b3a:	3202      	adds	r2, #2
    4b3c:	8811      	ldrh	r1, [r2, #0]
    4b3e:	2920      	cmp	r1, #32
    4b40:	d0fa      	beq.n	4b38 <follow_path+0x108>
    4b42:	292e      	cmp	r1, #46	; 0x2e
    4b44:	d0f8      	beq.n	4b38 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4b46:	2b00      	cmp	r3, #0
    4b48:	d001      	beq.n	4b4e <follow_path+0x11e>
    4b4a:	2203      	movs	r2, #3
    4b4c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4b4e:	4652      	mov	r2, sl
    4b50:	4442      	add	r2, r8
    4b52:	3a02      	subs	r2, #2
    4b54:	8812      	ldrh	r2, [r2, #0]
    4b56:	2a2e      	cmp	r2, #46	; 0x2e
    4b58:	d009      	beq.n	4b6e <follow_path+0x13e>
    4b5a:	4642      	mov	r2, r8
    4b5c:	3a04      	subs	r2, #4
    4b5e:	4452      	add	r2, sl
    4b60:	3c01      	subs	r4, #1
    4b62:	2c00      	cmp	r4, #0
    4b64:	d003      	beq.n	4b6e <follow_path+0x13e>
    4b66:	3a02      	subs	r2, #2
    4b68:	8851      	ldrh	r1, [r2, #2]
    4b6a:	292e      	cmp	r1, #46	; 0x2e
    4b6c:	d1f8      	bne.n	4b60 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4b6e:	2208      	movs	r2, #8
    4b70:	9201      	str	r2, [sp, #4]
    4b72:	2200      	movs	r2, #0
    4b74:	4693      	mov	fp, r2
    4b76:	4691      	mov	r9, r2
    4b78:	46a0      	mov	r8, r4
    4b7a:	e006      	b.n	4b8a <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4b7c:	4544      	cmp	r4, r8
    4b7e:	d100      	bne.n	4b82 <follow_path+0x152>
    4b80:	e0e6      	b.n	4d50 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4b82:	2303      	movs	r3, #3
    4b84:	431e      	orrs	r6, r3
    4b86:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4b88:	0023      	movs	r3, r4
    4b8a:	1c5c      	adds	r4, r3, #1
    4b8c:	005b      	lsls	r3, r3, #1
    4b8e:	4652      	mov	r2, sl
    4b90:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4b92:	2800      	cmp	r0, #0
    4b94:	d02c      	beq.n	4bf0 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4b96:	2820      	cmp	r0, #32
    4b98:	d0f3      	beq.n	4b82 <follow_path+0x152>
    4b9a:	282e      	cmp	r0, #46	; 0x2e
    4b9c:	d0ee      	beq.n	4b7c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4b9e:	9b01      	ldr	r3, [sp, #4]
    4ba0:	459b      	cmp	fp, r3
    4ba2:	d219      	bcs.n	4bd8 <follow_path+0x1a8>
    4ba4:	4544      	cmp	r4, r8
    4ba6:	d100      	bne.n	4baa <follow_path+0x17a>
    4ba8:	e0d2      	b.n	4d50 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4baa:	287f      	cmp	r0, #127	; 0x7f
    4bac:	d85e      	bhi.n	4c6c <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4bae:	282b      	cmp	r0, #43	; 0x2b
    4bb0:	d06e      	beq.n	4c90 <follow_path+0x260>
    4bb2:	232c      	movs	r3, #44	; 0x2c
    4bb4:	4a60      	ldr	r2, [pc, #384]	; (4d38 <follow_path+0x308>)
    4bb6:	b299      	uxth	r1, r3
    4bb8:	4281      	cmp	r1, r0
    4bba:	d067      	beq.n	4c8c <follow_path+0x25c>
    4bbc:	3201      	adds	r2, #1
    4bbe:	7813      	ldrb	r3, [r2, #0]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d1f8      	bne.n	4bb6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4bc4:	0003      	movs	r3, r0
    4bc6:	3b41      	subs	r3, #65	; 0x41
    4bc8:	b29b      	uxth	r3, r3
    4bca:	2b19      	cmp	r3, #25
    4bcc:	d86c      	bhi.n	4ca8 <follow_path+0x278>
					b |= 2;
    4bce:	2302      	movs	r3, #2
    4bd0:	464a      	mov	r2, r9
    4bd2:	431a      	orrs	r2, r3
    4bd4:	4691      	mov	r9, r2
    4bd6:	e05f      	b.n	4c98 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    4bd8:	9b01      	ldr	r3, [sp, #4]
    4bda:	2b0b      	cmp	r3, #11
    4bdc:	d03b      	beq.n	4c56 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4bde:	4544      	cmp	r4, r8
    4be0:	d100      	bne.n	4be4 <follow_path+0x1b4>
    4be2:	e0b9      	b.n	4d58 <follow_path+0x328>
    4be4:	2303      	movs	r3, #3
    4be6:	431e      	orrs	r6, r3
    4be8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4bea:	4544      	cmp	r4, r8
    4bec:	d800      	bhi.n	4bf0 <follow_path+0x1c0>
    4bee:	e0b3      	b.n	4d58 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4bf0:	69bb      	ldr	r3, [r7, #24]
    4bf2:	781a      	ldrb	r2, [r3, #0]
    4bf4:	2ae5      	cmp	r2, #229	; 0xe5
    4bf6:	d036      	beq.n	4c66 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4bf8:	9b01      	ldr	r3, [sp, #4]
    4bfa:	2b08      	cmp	r3, #8
    4bfc:	d060      	beq.n	4cc0 <follow_path+0x290>
    4bfe:	230c      	movs	r3, #12
    4c00:	464a      	mov	r2, r9
    4c02:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4c04:	2b0c      	cmp	r3, #12
    4c06:	d060      	beq.n	4cca <follow_path+0x29a>
    4c08:	43d2      	mvns	r2, r2
    4c0a:	0792      	lsls	r2, r2, #30
    4c0c:	d05d      	beq.n	4cca <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4c0e:	07b2      	lsls	r2, r6, #30
    4c10:	d406      	bmi.n	4c20 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4c12:	2203      	movs	r2, #3
    4c14:	4649      	mov	r1, r9
    4c16:	400a      	ands	r2, r1
    4c18:	2a01      	cmp	r2, #1
    4c1a:	d059      	beq.n	4cd0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4c1c:	2b04      	cmp	r3, #4
    4c1e:	d05a      	beq.n	4cd6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4c20:	69bb      	ldr	r3, [r7, #24]
    4c22:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4c24:	0038      	movs	r0, r7
    4c26:	4b45      	ldr	r3, [pc, #276]	; (4d3c <follow_path+0x30c>)
    4c28:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4c2a:	69bb      	ldr	r3, [r7, #24]
    4c2c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4c2e:	2800      	cmp	r0, #0
    4c30:	d15c      	bne.n	4cec <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4c32:	075b      	lsls	r3, r3, #29
    4c34:	d453      	bmi.n	4cde <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4c36:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4c38:	7ad3      	ldrb	r3, [r2, #11]
    4c3a:	06db      	lsls	r3, r3, #27
    4c3c:	d55c      	bpl.n	4cf8 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4c3e:	7d51      	ldrb	r1, [r2, #21]
    4c40:	0209      	lsls	r1, r1, #8
    4c42:	7d13      	ldrb	r3, [r2, #20]
    4c44:	430b      	orrs	r3, r1
    4c46:	041b      	lsls	r3, r3, #16
    4c48:	7ed1      	ldrb	r1, [r2, #27]
    4c4a:	0209      	lsls	r1, r1, #8
    4c4c:	7e92      	ldrb	r2, [r2, #26]
    4c4e:	430a      	orrs	r2, r1
    4c50:	4313      	orrs	r3, r2
    4c52:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4c54:	e70b      	b.n	4a6e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4c56:	2303      	movs	r3, #3
    4c58:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4c5a:	69bb      	ldr	r3, [r7, #24]
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	2ae5      	cmp	r2, #229	; 0xe5
    4c60:	d1cd      	bne.n	4bfe <follow_path+0x1ce>
    4c62:	220b      	movs	r2, #11
    4c64:	9201      	str	r2, [sp, #4]
    4c66:	2205      	movs	r2, #5
    4c68:	701a      	strb	r2, [r3, #0]
    4c6a:	e7c5      	b.n	4bf8 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4c6c:	2100      	movs	r1, #0
    4c6e:	4b2f      	ldr	r3, [pc, #188]	; (4d2c <follow_path+0x2fc>)
    4c70:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4c72:	2800      	cmp	r0, #0
    4c74:	d100      	bne.n	4c78 <follow_path+0x248>
    4c76:	e079      	b.n	4d6c <follow_path+0x33c>
    4c78:	4b31      	ldr	r3, [pc, #196]	; (4d40 <follow_path+0x310>)
    4c7a:	469c      	mov	ip, r3
    4c7c:	4460      	add	r0, ip
    4c7e:	3880      	subs	r0, #128	; 0x80
    4c80:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4c82:	2302      	movs	r3, #2
    4c84:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4c86:	2800      	cmp	r0, #0
    4c88:	d002      	beq.n	4c90 <follow_path+0x260>
    4c8a:	e790      	b.n	4bae <follow_path+0x17e>
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d099      	beq.n	4bc4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4c90:	2303      	movs	r3, #3
    4c92:	431e      	orrs	r6, r3
    4c94:	b2f6      	uxtb	r6, r6
    4c96:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4c98:	69bb      	ldr	r3, [r7, #24]
    4c9a:	465a      	mov	r2, fp
    4c9c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4c9e:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4ca0:	2201      	movs	r2, #1
    4ca2:	4694      	mov	ip, r2
    4ca4:	44e3      	add	fp, ip
    4ca6:	e770      	b.n	4b8a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4ca8:	0003      	movs	r3, r0
    4caa:	3b61      	subs	r3, #97	; 0x61
    4cac:	b29b      	uxth	r3, r3
    4cae:	2b19      	cmp	r3, #25
    4cb0:	d8f2      	bhi.n	4c98 <follow_path+0x268>
						b |= 1; w -= 0x20;
    4cb2:	2301      	movs	r3, #1
    4cb4:	464a      	mov	r2, r9
    4cb6:	431a      	orrs	r2, r3
    4cb8:	4691      	mov	r9, r2
    4cba:	3820      	subs	r0, #32
    4cbc:	b280      	uxth	r0, r0
    4cbe:	e7eb      	b.n	4c98 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4cc0:	464b      	mov	r3, r9
    4cc2:	009b      	lsls	r3, r3, #2
    4cc4:	b2db      	uxtb	r3, r3
    4cc6:	4699      	mov	r9, r3
    4cc8:	e799      	b.n	4bfe <follow_path+0x1ce>
		cf |= NS_LFN;
    4cca:	2202      	movs	r2, #2
    4ccc:	4316      	orrs	r6, r2
    4cce:	e79e      	b.n	4c0e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4cd0:	320f      	adds	r2, #15
    4cd2:	4316      	orrs	r6, r2
    4cd4:	e7a2      	b.n	4c1c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4cd6:	3304      	adds	r3, #4
    4cd8:	431e      	orrs	r6, r3
    4cda:	e7a1      	b.n	4c20 <follow_path+0x1f0>
    4cdc:	2006      	movs	r0, #6
}
    4cde:	b003      	add	sp, #12
    4ce0:	bc3c      	pop	{r2, r3, r4, r5}
    4ce2:	4690      	mov	r8, r2
    4ce4:	4699      	mov	r9, r3
    4ce6:	46a2      	mov	sl, r4
    4ce8:	46ab      	mov	fp, r5
    4cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4cec:	2804      	cmp	r0, #4
    4cee:	d1f6      	bne.n	4cde <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4cf0:	075b      	lsls	r3, r3, #29
    4cf2:	d4f4      	bmi.n	4cde <follow_path+0x2ae>
    4cf4:	3001      	adds	r0, #1
    4cf6:	e7f2      	b.n	4cde <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4cf8:	2005      	movs	r0, #5
    4cfa:	e7f0      	b.n	4cde <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4cfc:	2301      	movs	r3, #1
	si = di = 0;
    4cfe:	2400      	movs	r4, #0
    4d00:	e6fb      	b.n	4afa <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4d02:	2301      	movs	r3, #1
	si = di = 0;
    4d04:	2400      	movs	r4, #0
    4d06:	e005      	b.n	4d14 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4d08:	2301      	movs	r3, #1
	si = di = 0;
    4d0a:	2400      	movs	r4, #0
    4d0c:	e002      	b.n	4d14 <follow_path+0x2e4>
    4d0e:	002c      	movs	r4, r5
    4d10:	465f      	mov	r7, fp
    4d12:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4d14:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4d16:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4d18:	2c00      	cmp	r4, #0
    4d1a:	d0df      	beq.n	4cdc <follow_path+0x2ac>
    4d1c:	4b09      	ldr	r3, [pc, #36]	; (4d44 <follow_path+0x314>)
    4d1e:	18e3      	adds	r3, r4, r3
    4d20:	005b      	lsls	r3, r3, #1
    4d22:	4453      	add	r3, sl
    4d24:	e6f1      	b.n	4b0a <follow_path+0xda>
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	00004081 	.word	0x00004081
    4d2c:	00005415 	.word	0x00005415
    4d30:	00006ea1 	.word	0x00006ea1
    4d34:	00003a19 	.word	0x00003a19
    4d38:	00006ead 	.word	0x00006ead
    4d3c:	000044c1 	.word	0x000044c1
    4d40:	00006e20 	.word	0x00006e20
    4d44:	7fffffff 	.word	0x7fffffff
    4d48:	002c      	movs	r4, r5
    4d4a:	465f      	mov	r7, fp
    4d4c:	464d      	mov	r5, r9
    4d4e:	e7e1      	b.n	4d14 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4d50:	9b01      	ldr	r3, [sp, #4]
    4d52:	2b0b      	cmp	r3, #11
    4d54:	d100      	bne.n	4d58 <follow_path+0x328>
    4d56:	e77e      	b.n	4c56 <follow_path+0x226>
			b <<= 2; continue;
    4d58:	464b      	mov	r3, r9
    4d5a:	009b      	lsls	r3, r3, #2
    4d5c:	b2db      	uxtb	r3, r3
    4d5e:	4699      	mov	r9, r3
    4d60:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4d62:	220b      	movs	r2, #11
    4d64:	9201      	str	r2, [sp, #4]
    4d66:	3a03      	subs	r2, #3
    4d68:	4693      	mov	fp, r2
    4d6a:	e70e      	b.n	4b8a <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4d6c:	2302      	movs	r3, #2
    4d6e:	431e      	orrs	r6, r3
    4d70:	e78e      	b.n	4c90 <follow_path+0x260>
    4d72:	46c0      	nop			; (mov r8, r8)

00004d74 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4d74:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4d76:	2807      	cmp	r0, #7
    4d78:	d901      	bls.n	4d7e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4d7a:	0018      	movs	r0, r3
    4d7c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4d7e:	0083      	lsls	r3, r0, #2
    4d80:	4a07      	ldr	r2, [pc, #28]	; (4da0 <f_mount+0x2c>)
    4d82:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4d84:	2b00      	cmp	r3, #0
    4d86:	d001      	beq.n	4d8c <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4d88:	2200      	movs	r2, #0
    4d8a:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4d8c:	2900      	cmp	r1, #0
    4d8e:	d001      	beq.n	4d94 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4d90:	2300      	movs	r3, #0
    4d92:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4d94:	0080      	lsls	r0, r0, #2
    4d96:	4b02      	ldr	r3, [pc, #8]	; (4da0 <f_mount+0x2c>)
    4d98:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4d9a:	2300      	movs	r3, #0
    4d9c:	e7ed      	b.n	4d7a <f_mount+0x6>
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	20000158 	.word	0x20000158

00004da4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4da6:	46c6      	mov	lr, r8
    4da8:	b500      	push	{lr}
    4daa:	4c59      	ldr	r4, [pc, #356]	; (4f10 <f_open+0x16c>)
    4dac:	44a5      	add	sp, r4
    4dae:	0005      	movs	r5, r0
    4db0:	9101      	str	r1, [sp, #4]
    4db2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4db4:	2300      	movs	r3, #0
    4db6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4db8:	261f      	movs	r6, #31
    4dba:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4dbc:	221e      	movs	r2, #30
    4dbe:	403a      	ands	r2, r7
    4dc0:	a985      	add	r1, sp, #532	; 0x214
    4dc2:	a801      	add	r0, sp, #4
    4dc4:	4b53      	ldr	r3, [pc, #332]	; (4f14 <f_open+0x170>)
    4dc6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4dc8:	ab82      	add	r3, sp, #520	; 0x208
    4dca:	938b      	str	r3, [sp, #556]	; 0x22c
    4dcc:	ab02      	add	r3, sp, #8
    4dce:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d006      	beq.n	4de2 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4dd4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4dd6:	231c      	movs	r3, #28
    4dd8:	423b      	tst	r3, r7
    4dda:	d145      	bne.n	4e68 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4ddc:	2800      	cmp	r0, #0
    4dde:	d13d      	bne.n	4e5c <f_open+0xb8>
    4de0:	e00c      	b.n	4dfc <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4de2:	9901      	ldr	r1, [sp, #4]
    4de4:	a885      	add	r0, sp, #532	; 0x214
    4de6:	4b4c      	ldr	r3, [pc, #304]	; (4f18 <f_open+0x174>)
    4de8:	4798      	blx	r3
	dir = dj.dir;
    4dea:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4dec:	2800      	cmp	r0, #0
    4dee:	d1f2      	bne.n	4dd6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4df0:	2c00      	cmp	r4, #0
    4df2:	d100      	bne.n	4df6 <f_open+0x52>
    4df4:	e086      	b.n	4f04 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4df6:	231c      	movs	r3, #28
    4df8:	423b      	tst	r3, r7
    4dfa:	d146      	bne.n	4e8a <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4dfc:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4dfe:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4e00:	06da      	lsls	r2, r3, #27
    4e02:	d42b      	bmi.n	4e5c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e04:	07ba      	lsls	r2, r7, #30
    4e06:	d502      	bpl.n	4e0e <f_open+0x6a>
					res = FR_DENIED;
    4e08:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4e0a:	07db      	lsls	r3, r3, #31
    4e0c:	d426      	bmi.n	4e5c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4e0e:	073b      	lsls	r3, r7, #28
    4e10:	d501      	bpl.n	4e16 <f_open+0x72>
			mode |= FA__WRITTEN;
    4e12:	2320      	movs	r3, #32
    4e14:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4e16:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e1a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4e1c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4e1e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4e20:	7d62      	ldrb	r2, [r4, #21]
    4e22:	0212      	lsls	r2, r2, #8
    4e24:	7d23      	ldrb	r3, [r4, #20]
    4e26:	4313      	orrs	r3, r2
    4e28:	041b      	lsls	r3, r3, #16
    4e2a:	7ee1      	ldrb	r1, [r4, #27]
    4e2c:	0209      	lsls	r1, r1, #8
    4e2e:	7ea2      	ldrb	r2, [r4, #26]
    4e30:	430a      	orrs	r2, r1
    4e32:	4313      	orrs	r3, r2
    4e34:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4e36:	7fe3      	ldrb	r3, [r4, #31]
    4e38:	061b      	lsls	r3, r3, #24
    4e3a:	7fa2      	ldrb	r2, [r4, #30]
    4e3c:	0412      	lsls	r2, r2, #16
    4e3e:	4313      	orrs	r3, r2
    4e40:	7f22      	ldrb	r2, [r4, #28]
    4e42:	4313      	orrs	r3, r2
    4e44:	7f62      	ldrb	r2, [r4, #29]
    4e46:	0212      	lsls	r2, r2, #8
    4e48:	4313      	orrs	r3, r2
    4e4a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4e4c:	2300      	movs	r3, #0
    4e4e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4e50:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4e52:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4e54:	602b      	str	r3, [r5, #0]
    4e56:	88db      	ldrh	r3, [r3, #6]
    4e58:	80ab      	strh	r3, [r5, #4]
    4e5a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4e5c:	238e      	movs	r3, #142	; 0x8e
    4e5e:	009b      	lsls	r3, r3, #2
    4e60:	449d      	add	sp, r3
    4e62:	bc04      	pop	{r2}
    4e64:	4690      	mov	r8, r2
    4e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4e68:	2804      	cmp	r0, #4
    4e6a:	d005      	beq.n	4e78 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4e6c:	2308      	movs	r3, #8
    4e6e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4e70:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4e72:	2800      	cmp	r0, #0
    4e74:	d0d3      	beq.n	4e1e <f_open+0x7a>
    4e76:	e7f1      	b.n	4e5c <f_open+0xb8>
				res = dir_register(&dj);
    4e78:	a885      	add	r0, sp, #532	; 0x214
    4e7a:	4b28      	ldr	r3, [pc, #160]	; (4f1c <f_open+0x178>)
    4e7c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4e7e:	2308      	movs	r3, #8
    4e80:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4e82:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4e84:	2800      	cmp	r0, #0
    4e86:	d008      	beq.n	4e9a <f_open+0xf6>
    4e88:	e7e8      	b.n	4e5c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4e8a:	7ae3      	ldrb	r3, [r4, #11]
    4e8c:	2211      	movs	r2, #17
				res = FR_DENIED;
    4e8e:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4e90:	421a      	tst	r2, r3
    4e92:	d1e3      	bne.n	4e5c <f_open+0xb8>
					res = FR_EXIST;
    4e94:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4e96:	077b      	lsls	r3, r7, #29
    4e98:	d4e0      	bmi.n	4e5c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4e9a:	0733      	lsls	r3, r6, #28
    4e9c:	d5bb      	bpl.n	4e16 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4e9e:	4b20      	ldr	r3, [pc, #128]	; (4f20 <f_open+0x17c>)
    4ea0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4ea2:	73a0      	strb	r0, [r4, #14]
    4ea4:	0a03      	lsrs	r3, r0, #8
    4ea6:	73e3      	strb	r3, [r4, #15]
    4ea8:	0c03      	lsrs	r3, r0, #16
    4eaa:	7423      	strb	r3, [r4, #16]
    4eac:	0e00      	lsrs	r0, r0, #24
    4eae:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4eb0:	2300      	movs	r3, #0
    4eb2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4eb4:	7723      	strb	r3, [r4, #28]
    4eb6:	7763      	strb	r3, [r4, #29]
    4eb8:	77a3      	strb	r3, [r4, #30]
    4eba:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4ebc:	7d62      	ldrb	r2, [r4, #21]
    4ebe:	0212      	lsls	r2, r2, #8
    4ec0:	7d27      	ldrb	r7, [r4, #20]
    4ec2:	4317      	orrs	r7, r2
    4ec4:	043f      	lsls	r7, r7, #16
    4ec6:	7ee1      	ldrb	r1, [r4, #27]
    4ec8:	0209      	lsls	r1, r1, #8
    4eca:	7ea2      	ldrb	r2, [r4, #26]
    4ecc:	430a      	orrs	r2, r1
    4ece:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4ed0:	76a3      	strb	r3, [r4, #26]
    4ed2:	76e3      	strb	r3, [r4, #27]
    4ed4:	7523      	strb	r3, [r4, #20]
    4ed6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4ed8:	9885      	ldr	r0, [sp, #532]	; 0x214
    4eda:	3301      	adds	r3, #1
    4edc:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4ede:	2f00      	cmp	r7, #0
    4ee0:	d097      	beq.n	4e12 <f_open+0x6e>
				dw = dj.fs->winsect;
    4ee2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4ee4:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4ee6:	0039      	movs	r1, r7
    4ee8:	4b0e      	ldr	r3, [pc, #56]	; (4f24 <f_open+0x180>)
    4eea:	4798      	blx	r3
				if (res == FR_OK) {
    4eec:	2800      	cmp	r0, #0
    4eee:	d1b5      	bne.n	4e5c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4ef0:	9885      	ldr	r0, [sp, #532]	; 0x214
    4ef2:	3f01      	subs	r7, #1
    4ef4:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4ef6:	4641      	mov	r1, r8
    4ef8:	4b0b      	ldr	r3, [pc, #44]	; (4f28 <f_open+0x184>)
    4efa:	4798      	blx	r3
	if (res == FR_OK) {
    4efc:	2800      	cmp	r0, #0
    4efe:	d100      	bne.n	4f02 <f_open+0x15e>
    4f00:	e787      	b.n	4e12 <f_open+0x6e>
    4f02:	e7ab      	b.n	4e5c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f04:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4f06:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4f08:	423b      	tst	r3, r7
    4f0a:	d0b2      	beq.n	4e72 <f_open+0xce>
			res = FR_INVALID_NAME;
    4f0c:	2006      	movs	r0, #6
    4f0e:	e7ad      	b.n	4e6c <f_open+0xc8>
    4f10:	fffffdc8 	.word	0xfffffdc8
    4f14:	00003b35 	.word	0x00003b35
    4f18:	00004a31 	.word	0x00004a31
    4f1c:	00004659 	.word	0x00004659
    4f20:	000039b5 	.word	0x000039b5
    4f24:	00004325 	.word	0x00004325
    4f28:	00003ee5 	.word	0x00003ee5

00004f2c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	46de      	mov	lr, fp
    4f30:	4657      	mov	r7, sl
    4f32:	464e      	mov	r6, r9
    4f34:	4645      	mov	r5, r8
    4f36:	b5e0      	push	{r5, r6, r7, lr}
    4f38:	b083      	sub	sp, #12
    4f3a:	0004      	movs	r4, r0
    4f3c:	000f      	movs	r7, r1
    4f3e:	0015      	movs	r5, r2
    4f40:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    4f42:	2300      	movs	r3, #0
    4f44:	464a      	mov	r2, r9
    4f46:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    4f48:	8881      	ldrh	r1, [r0, #4]
    4f4a:	6800      	ldr	r0, [r0, #0]
    4f4c:	4b5e      	ldr	r3, [pc, #376]	; (50c8 <f_read+0x19c>)
    4f4e:	4798      	blx	r3
    4f50:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4f52:	2800      	cmp	r0, #0
    4f54:	d000      	beq.n	4f58 <f_read+0x2c>
    4f56:	e0af      	b.n	50b8 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4f58:	79a3      	ldrb	r3, [r4, #6]
    4f5a:	b25a      	sxtb	r2, r3
    4f5c:	2a00      	cmp	r2, #0
    4f5e:	da00      	bge.n	4f62 <f_read+0x36>
    4f60:	e0a8      	b.n	50b4 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4f62:	07db      	lsls	r3, r3, #31
    4f64:	d402      	bmi.n	4f6c <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4f66:	2307      	movs	r3, #7
    4f68:	9300      	str	r3, [sp, #0]
    4f6a:	e0a5      	b.n	50b8 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    4f6c:	68e3      	ldr	r3, [r4, #12]
    4f6e:	68a2      	ldr	r2, [r4, #8]
    4f70:	1a9e      	subs	r6, r3, r2
    4f72:	42ae      	cmp	r6, r5
    4f74:	d900      	bls.n	4f78 <f_read+0x4c>
    4f76:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    4f78:	2e00      	cmp	r6, #0
    4f7a:	d153      	bne.n	5024 <f_read+0xf8>
    4f7c:	e09c      	b.n	50b8 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    4f7e:	6961      	ldr	r1, [r4, #20]
    4f80:	4b52      	ldr	r3, [pc, #328]	; (50cc <f_read+0x1a0>)
    4f82:	4798      	blx	r3
    4f84:	e05c      	b.n	5040 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4f86:	79a2      	ldrb	r2, [r4, #6]
    4f88:	2380      	movs	r3, #128	; 0x80
    4f8a:	425b      	negs	r3, r3
    4f8c:	4313      	orrs	r3, r2
    4f8e:	71a3      	strb	r3, [r4, #6]
    4f90:	2302      	movs	r3, #2
    4f92:	9300      	str	r3, [sp, #0]
    4f94:	e090      	b.n	50b8 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4f96:	79a2      	ldrb	r2, [r4, #6]
    4f98:	2380      	movs	r3, #128	; 0x80
    4f9a:	425b      	negs	r3, r3
    4f9c:	4313      	orrs	r3, r2
    4f9e:	71a3      	strb	r3, [r4, #6]
    4fa0:	2301      	movs	r3, #1
    4fa2:	9300      	str	r3, [sp, #0]
    4fa4:	e088      	b.n	50b8 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4fa6:	79a2      	ldrb	r2, [r4, #6]
    4fa8:	2380      	movs	r3, #128	; 0x80
    4faa:	425b      	negs	r3, r3
    4fac:	4313      	orrs	r3, r2
    4fae:	71a3      	strb	r3, [r4, #6]
    4fb0:	2302      	movs	r3, #2
    4fb2:	9300      	str	r3, [sp, #0]
    4fb4:	e080      	b.n	50b8 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    4fb6:	79a2      	ldrb	r2, [r4, #6]
    4fb8:	2380      	movs	r3, #128	; 0x80
    4fba:	425b      	negs	r3, r3
    4fbc:	4313      	orrs	r3, r2
    4fbe:	71a3      	strb	r3, [r4, #6]
    4fc0:	2301      	movs	r3, #1
    4fc2:	9300      	str	r3, [sp, #0]
    4fc4:	e078      	b.n	50b8 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    4fc6:	3130      	adds	r1, #48	; 0x30
    4fc8:	0240      	lsls	r0, r0, #9
    4fca:	1838      	adds	r0, r7, r0
    4fcc:	2280      	movs	r2, #128	; 0x80
    4fce:	0092      	lsls	r2, r2, #2
    4fd0:	4b3f      	ldr	r3, [pc, #252]	; (50d0 <f_read+0x1a4>)
    4fd2:	4798      	blx	r3
    4fd4:	e063      	b.n	509e <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    4fd6:	4643      	mov	r3, r8
    4fd8:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    4fda:	68a3      	ldr	r3, [r4, #8]
    4fdc:	05dd      	lsls	r5, r3, #23
    4fde:	0ded      	lsrs	r5, r5, #23
    4fe0:	2380      	movs	r3, #128	; 0x80
    4fe2:	009b      	lsls	r3, r3, #2
    4fe4:	1b5d      	subs	r5, r3, r5
    4fe6:	42b5      	cmp	r5, r6
    4fe8:	d900      	bls.n	4fec <f_read+0xc0>
    4fea:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    4fec:	69a1      	ldr	r1, [r4, #24]
    4fee:	6820      	ldr	r0, [r4, #0]
    4ff0:	4b38      	ldr	r3, [pc, #224]	; (50d4 <f_read+0x1a8>)
    4ff2:	4798      	blx	r3
    4ff4:	2800      	cmp	r0, #0
    4ff6:	d155      	bne.n	50a4 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    4ff8:	68a3      	ldr	r3, [r4, #8]
    4ffa:	05d9      	lsls	r1, r3, #23
    4ffc:	0dc9      	lsrs	r1, r1, #23
    4ffe:	3130      	adds	r1, #48	; 0x30
    5000:	6823      	ldr	r3, [r4, #0]
    5002:	469c      	mov	ip, r3
    5004:	4461      	add	r1, ip
    5006:	002a      	movs	r2, r5
    5008:	0038      	movs	r0, r7
    500a:	4b31      	ldr	r3, [pc, #196]	; (50d0 <f_read+0x1a4>)
    500c:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    500e:	197f      	adds	r7, r7, r5
    5010:	68a3      	ldr	r3, [r4, #8]
    5012:	195b      	adds	r3, r3, r5
    5014:	60a3      	str	r3, [r4, #8]
    5016:	464b      	mov	r3, r9
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	195b      	adds	r3, r3, r5
    501c:	464a      	mov	r2, r9
    501e:	6013      	str	r3, [r2, #0]
    5020:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    5022:	d049      	beq.n	50b8 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    5024:	68a3      	ldr	r3, [r4, #8]
    5026:	05da      	lsls	r2, r3, #23
    5028:	d1d7      	bne.n	4fda <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    502a:	6820      	ldr	r0, [r4, #0]
    502c:	7882      	ldrb	r2, [r0, #2]
    502e:	3a01      	subs	r2, #1
    5030:	0a5d      	lsrs	r5, r3, #9
    5032:	4015      	ands	r5, r2
    5034:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    5036:	2d00      	cmp	r5, #0
    5038:	d107      	bne.n	504a <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    503a:	2b00      	cmp	r3, #0
    503c:	d19f      	bne.n	4f7e <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    503e:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    5040:	2801      	cmp	r0, #1
    5042:	d9a0      	bls.n	4f86 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5044:	1c43      	adds	r3, r0, #1
    5046:	d0a6      	beq.n	4f96 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    5048:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    504a:	6823      	ldr	r3, [r4, #0]
    504c:	469a      	mov	sl, r3
    504e:	6961      	ldr	r1, [r4, #20]
    5050:	0018      	movs	r0, r3
    5052:	4b21      	ldr	r3, [pc, #132]	; (50d8 <f_read+0x1ac>)
    5054:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5056:	2800      	cmp	r0, #0
    5058:	d0a5      	beq.n	4fa6 <f_read+0x7a>
			sect += csect;
    505a:	4680      	mov	r8, r0
    505c:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    505e:	0a73      	lsrs	r3, r6, #9
    5060:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    5062:	d0b8      	beq.n	4fd6 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    5064:	4653      	mov	r3, sl
    5066:	789b      	ldrb	r3, [r3, #2]
    5068:	465a      	mov	r2, fp
    506a:	18aa      	adds	r2, r5, r2
    506c:	429a      	cmp	r2, r3
    506e:	d901      	bls.n	5074 <f_read+0x148>
					cc = fp->fs->csize - csect;
    5070:	1b5b      	subs	r3, r3, r5
    5072:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    5074:	465b      	mov	r3, fp
    5076:	466a      	mov	r2, sp
    5078:	71d3      	strb	r3, [r2, #7]
    507a:	79d3      	ldrb	r3, [r2, #7]
    507c:	4652      	mov	r2, sl
    507e:	7850      	ldrb	r0, [r2, #1]
    5080:	4642      	mov	r2, r8
    5082:	0039      	movs	r1, r7
    5084:	4d15      	ldr	r5, [pc, #84]	; (50dc <f_read+0x1b0>)
    5086:	47a8      	blx	r5
    5088:	2800      	cmp	r0, #0
    508a:	d194      	bne.n	4fb6 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    508c:	6821      	ldr	r1, [r4, #0]
    508e:	790b      	ldrb	r3, [r1, #4]
    5090:	2b00      	cmp	r3, #0
    5092:	d004      	beq.n	509e <f_read+0x172>
    5094:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5096:	4642      	mov	r2, r8
    5098:	1a98      	subs	r0, r3, r2
    509a:	4583      	cmp	fp, r0
    509c:	d893      	bhi.n	4fc6 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    509e:	465b      	mov	r3, fp
    50a0:	025d      	lsls	r5, r3, #9
				continue;
    50a2:	e7b4      	b.n	500e <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    50a4:	79a2      	ldrb	r2, [r4, #6]
    50a6:	2380      	movs	r3, #128	; 0x80
    50a8:	425b      	negs	r3, r3
    50aa:	4313      	orrs	r3, r2
    50ac:	71a3      	strb	r3, [r4, #6]
    50ae:	2301      	movs	r3, #1
    50b0:	9300      	str	r3, [sp, #0]
    50b2:	e001      	b.n	50b8 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    50b4:	2302      	movs	r3, #2
    50b6:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    50b8:	9800      	ldr	r0, [sp, #0]
    50ba:	b003      	add	sp, #12
    50bc:	bc3c      	pop	{r2, r3, r4, r5}
    50be:	4690      	mov	r8, r2
    50c0:	4699      	mov	r9, r3
    50c2:	46a2      	mov	sl, r4
    50c4:	46ab      	mov	fp, r5
    50c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c8:	00003a61 	.word	0x00003a61
    50cc:	00003f85 	.word	0x00003f85
    50d0:	00003a05 	.word	0x00003a05
    50d4:	00003ee5 	.word	0x00003ee5
    50d8:	00003a2b 	.word	0x00003a2b
    50dc:	00003841 	.word	0x00003841

000050e0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    50e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50e2:	46de      	mov	lr, fp
    50e4:	4657      	mov	r7, sl
    50e6:	464e      	mov	r6, r9
    50e8:	4645      	mov	r5, r8
    50ea:	b5e0      	push	{r5, r6, r7, lr}
    50ec:	b083      	sub	sp, #12
    50ee:	0004      	movs	r4, r0
    50f0:	000d      	movs	r5, r1
    50f2:	0016      	movs	r6, r2
    50f4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    50f6:	2300      	movs	r3, #0
    50f8:	464a      	mov	r2, r9
    50fa:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    50fc:	8881      	ldrh	r1, [r0, #4]
    50fe:	6800      	ldr	r0, [r0, #0]
    5100:	4b7f      	ldr	r3, [pc, #508]	; (5300 <f_write+0x220>)
    5102:	4798      	blx	r3
    5104:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5106:	2800      	cmp	r0, #0
    5108:	d000      	beq.n	510c <f_write+0x2c>
    510a:	e0f1      	b.n	52f0 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    510c:	79a3      	ldrb	r3, [r4, #6]
    510e:	b25a      	sxtb	r2, r3
    5110:	2a00      	cmp	r2, #0
    5112:	da00      	bge.n	5116 <f_write+0x36>
    5114:	e0ea      	b.n	52ec <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    5116:	079b      	lsls	r3, r3, #30
    5118:	d402      	bmi.n	5120 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    511a:	2307      	movs	r3, #7
    511c:	9300      	str	r3, [sp, #0]
    511e:	e0e7      	b.n	52f0 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    5120:	68e3      	ldr	r3, [r4, #12]
    5122:	199a      	adds	r2, r3, r6
    5124:	4293      	cmp	r3, r2
    5126:	d810      	bhi.n	514a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    5128:	2e00      	cmp	r6, #0
    512a:	d00e      	beq.n	514a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    512c:	002f      	movs	r7, r5
    512e:	e07b      	b.n	5228 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    5130:	2100      	movs	r1, #0
    5132:	4b74      	ldr	r3, [pc, #464]	; (5304 <f_write+0x224>)
    5134:	4798      	blx	r3
    5136:	0003      	movs	r3, r0
    5138:	6120      	str	r0, [r4, #16]
    513a:	e003      	b.n	5144 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    513c:	6961      	ldr	r1, [r4, #20]
    513e:	4b71      	ldr	r3, [pc, #452]	; (5304 <f_write+0x224>)
    5140:	4798      	blx	r3
    5142:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    5144:	2b00      	cmp	r3, #0
    5146:	d000      	beq.n	514a <f_write+0x6a>
    5148:	e080      	b.n	524c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    514a:	68a3      	ldr	r3, [r4, #8]
    514c:	68e2      	ldr	r2, [r4, #12]
    514e:	4293      	cmp	r3, r2
    5150:	d900      	bls.n	5154 <f_write+0x74>
    5152:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5154:	79a3      	ldrb	r3, [r4, #6]
    5156:	2220      	movs	r2, #32
    5158:	4313      	orrs	r3, r2
    515a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    515c:	e0c8      	b.n	52f0 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    515e:	79a2      	ldrb	r2, [r4, #6]
    5160:	3b81      	subs	r3, #129	; 0x81
    5162:	4313      	orrs	r3, r2
    5164:	71a3      	strb	r3, [r4, #6]
    5166:	2302      	movs	r3, #2
    5168:	9300      	str	r3, [sp, #0]
    516a:	e0c1      	b.n	52f0 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    516c:	79a2      	ldrb	r2, [r4, #6]
    516e:	3b7f      	subs	r3, #127	; 0x7f
    5170:	4313      	orrs	r3, r2
    5172:	71a3      	strb	r3, [r4, #6]
    5174:	2301      	movs	r3, #1
    5176:	9300      	str	r3, [sp, #0]
    5178:	e0ba      	b.n	52f0 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    517a:	2100      	movs	r1, #0
    517c:	4b62      	ldr	r3, [pc, #392]	; (5308 <f_write+0x228>)
    517e:	4798      	blx	r3
    5180:	2800      	cmp	r0, #0
    5182:	d06d      	beq.n	5260 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5184:	79a2      	ldrb	r2, [r4, #6]
    5186:	2380      	movs	r3, #128	; 0x80
    5188:	425b      	negs	r3, r3
    518a:	4313      	orrs	r3, r2
    518c:	71a3      	strb	r3, [r4, #6]
    518e:	2301      	movs	r3, #1
    5190:	9300      	str	r3, [sp, #0]
    5192:	e0ad      	b.n	52f0 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5194:	79a2      	ldrb	r2, [r4, #6]
    5196:	2380      	movs	r3, #128	; 0x80
    5198:	425b      	negs	r3, r3
    519a:	4313      	orrs	r3, r2
    519c:	71a3      	strb	r3, [r4, #6]
    519e:	2302      	movs	r3, #2
    51a0:	9300      	str	r3, [sp, #0]
    51a2:	e0a5      	b.n	52f0 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    51a4:	79a2      	ldrb	r2, [r4, #6]
    51a6:	2380      	movs	r3, #128	; 0x80
    51a8:	425b      	negs	r3, r3
    51aa:	4313      	orrs	r3, r2
    51ac:	71a3      	strb	r3, [r4, #6]
    51ae:	2301      	movs	r3, #1
    51b0:	9300      	str	r3, [sp, #0]
    51b2:	e09d      	b.n	52f0 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    51b4:	0240      	lsls	r0, r0, #9
    51b6:	1839      	adds	r1, r7, r0
    51b8:	3330      	adds	r3, #48	; 0x30
    51ba:	0018      	movs	r0, r3
    51bc:	2280      	movs	r2, #128	; 0x80
    51be:	0092      	lsls	r2, r2, #2
    51c0:	4b52      	ldr	r3, [pc, #328]	; (530c <f_write+0x22c>)
    51c2:	4798      	blx	r3
					fp->fs->wflag = 0;
    51c4:	2300      	movs	r3, #0
    51c6:	6822      	ldr	r2, [r4, #0]
    51c8:	7113      	strb	r3, [r2, #4]
    51ca:	e072      	b.n	52b2 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    51cc:	68a3      	ldr	r3, [r4, #8]
    51ce:	68e2      	ldr	r2, [r4, #12]
    51d0:	4293      	cmp	r3, r2
    51d2:	d271      	bcs.n	52b8 <f_write+0x1d8>
			fp->dsect = sect;
    51d4:	4643      	mov	r3, r8
    51d6:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    51d8:	68a3      	ldr	r3, [r4, #8]
    51da:	05dd      	lsls	r5, r3, #23
    51dc:	0ded      	lsrs	r5, r5, #23
    51de:	2380      	movs	r3, #128	; 0x80
    51e0:	009b      	lsls	r3, r3, #2
    51e2:	1b5d      	subs	r5, r3, r5
    51e4:	42b5      	cmp	r5, r6
    51e6:	d900      	bls.n	51ea <f_write+0x10a>
    51e8:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    51ea:	69a1      	ldr	r1, [r4, #24]
    51ec:	6820      	ldr	r0, [r4, #0]
    51ee:	4b46      	ldr	r3, [pc, #280]	; (5308 <f_write+0x228>)
    51f0:	4798      	blx	r3
    51f2:	2800      	cmp	r0, #0
    51f4:	d172      	bne.n	52dc <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    51f6:	68a3      	ldr	r3, [r4, #8]
    51f8:	05d8      	lsls	r0, r3, #23
    51fa:	0dc0      	lsrs	r0, r0, #23
    51fc:	3030      	adds	r0, #48	; 0x30
    51fe:	6823      	ldr	r3, [r4, #0]
    5200:	469c      	mov	ip, r3
    5202:	4460      	add	r0, ip
    5204:	002a      	movs	r2, r5
    5206:	0039      	movs	r1, r7
    5208:	4b40      	ldr	r3, [pc, #256]	; (530c <f_write+0x22c>)
    520a:	4798      	blx	r3
		fp->fs->wflag = 1;
    520c:	2301      	movs	r3, #1
    520e:	6822      	ldr	r2, [r4, #0]
    5210:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    5212:	197f      	adds	r7, r7, r5
    5214:	68a3      	ldr	r3, [r4, #8]
    5216:	195b      	adds	r3, r3, r5
    5218:	60a3      	str	r3, [r4, #8]
    521a:	464b      	mov	r3, r9
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	195b      	adds	r3, r3, r5
    5220:	464a      	mov	r2, r9
    5222:	6013      	str	r3, [r2, #0]
    5224:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    5226:	d090      	beq.n	514a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    5228:	68a3      	ldr	r3, [r4, #8]
    522a:	05da      	lsls	r2, r3, #23
    522c:	d1d4      	bne.n	51d8 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    522e:	6820      	ldr	r0, [r4, #0]
    5230:	7882      	ldrb	r2, [r0, #2]
    5232:	3a01      	subs	r2, #1
    5234:	0a5d      	lsrs	r5, r3, #9
    5236:	4015      	ands	r5, r2
    5238:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    523a:	2d00      	cmp	r5, #0
    523c:	d10b      	bne.n	5256 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    523e:	2b00      	cmp	r3, #0
    5240:	d000      	beq.n	5244 <f_write+0x164>
    5242:	e77b      	b.n	513c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    5244:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    5246:	2b00      	cmp	r3, #0
    5248:	d100      	bne.n	524c <f_write+0x16c>
    524a:	e771      	b.n	5130 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    524c:	2b01      	cmp	r3, #1
    524e:	d086      	beq.n	515e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5250:	1c5a      	adds	r2, r3, #1
    5252:	d08b      	beq.n	516c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    5254:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    5256:	6820      	ldr	r0, [r4, #0]
    5258:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    525a:	69a2      	ldr	r2, [r4, #24]
    525c:	4293      	cmp	r3, r2
    525e:	d08c      	beq.n	517a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5260:	6823      	ldr	r3, [r4, #0]
    5262:	469a      	mov	sl, r3
    5264:	6961      	ldr	r1, [r4, #20]
    5266:	0018      	movs	r0, r3
    5268:	4b29      	ldr	r3, [pc, #164]	; (5310 <f_write+0x230>)
    526a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    526c:	2800      	cmp	r0, #0
    526e:	d091      	beq.n	5194 <f_write+0xb4>
			sect += csect;
    5270:	4680      	mov	r8, r0
    5272:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    5274:	0a73      	lsrs	r3, r6, #9
    5276:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    5278:	d0a8      	beq.n	51cc <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    527a:	4653      	mov	r3, sl
    527c:	789b      	ldrb	r3, [r3, #2]
    527e:	465a      	mov	r2, fp
    5280:	18aa      	adds	r2, r5, r2
    5282:	429a      	cmp	r2, r3
    5284:	d901      	bls.n	528a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    5286:	1b5b      	subs	r3, r3, r5
    5288:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    528a:	465b      	mov	r3, fp
    528c:	466a      	mov	r2, sp
    528e:	71d3      	strb	r3, [r2, #7]
    5290:	79d3      	ldrb	r3, [r2, #7]
    5292:	4652      	mov	r2, sl
    5294:	7850      	ldrb	r0, [r2, #1]
    5296:	4642      	mov	r2, r8
    5298:	0039      	movs	r1, r7
    529a:	4d1e      	ldr	r5, [pc, #120]	; (5314 <f_write+0x234>)
    529c:	47a8      	blx	r5
    529e:	2800      	cmp	r0, #0
    52a0:	d000      	beq.n	52a4 <f_write+0x1c4>
    52a2:	e77f      	b.n	51a4 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    52a4:	6823      	ldr	r3, [r4, #0]
    52a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52a8:	4641      	mov	r1, r8
    52aa:	1a50      	subs	r0, r2, r1
    52ac:	4583      	cmp	fp, r0
    52ae:	d900      	bls.n	52b2 <f_write+0x1d2>
    52b0:	e780      	b.n	51b4 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    52b2:	465b      	mov	r3, fp
    52b4:	025d      	lsls	r5, r3, #9
				continue;
    52b6:	e7ac      	b.n	5212 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    52b8:	2100      	movs	r1, #0
    52ba:	4650      	mov	r0, sl
    52bc:	4b12      	ldr	r3, [pc, #72]	; (5308 <f_write+0x228>)
    52be:	4798      	blx	r3
    52c0:	2800      	cmp	r0, #0
    52c2:	d103      	bne.n	52cc <f_write+0x1ec>
				fp->fs->winsect = sect;
    52c4:	6823      	ldr	r3, [r4, #0]
    52c6:	4642      	mov	r2, r8
    52c8:	62da      	str	r2, [r3, #44]	; 0x2c
    52ca:	e783      	b.n	51d4 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    52cc:	79a2      	ldrb	r2, [r4, #6]
    52ce:	2380      	movs	r3, #128	; 0x80
    52d0:	425b      	negs	r3, r3
    52d2:	4313      	orrs	r3, r2
    52d4:	71a3      	strb	r3, [r4, #6]
    52d6:	2301      	movs	r3, #1
    52d8:	9300      	str	r3, [sp, #0]
    52da:	e009      	b.n	52f0 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    52dc:	79a2      	ldrb	r2, [r4, #6]
    52de:	2380      	movs	r3, #128	; 0x80
    52e0:	425b      	negs	r3, r3
    52e2:	4313      	orrs	r3, r2
    52e4:	71a3      	strb	r3, [r4, #6]
    52e6:	2301      	movs	r3, #1
    52e8:	9300      	str	r3, [sp, #0]
    52ea:	e001      	b.n	52f0 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    52ec:	2302      	movs	r3, #2
    52ee:	9300      	str	r3, [sp, #0]
}
    52f0:	9800      	ldr	r0, [sp, #0]
    52f2:	b003      	add	sp, #12
    52f4:	bc3c      	pop	{r2, r3, r4, r5}
    52f6:	4690      	mov	r8, r2
    52f8:	4699      	mov	r9, r3
    52fa:	46a2      	mov	sl, r4
    52fc:	46ab      	mov	fp, r5
    52fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5300:	00003a61 	.word	0x00003a61
    5304:	00004261 	.word	0x00004261
    5308:	00003ee5 	.word	0x00003ee5
    530c:	00003a05 	.word	0x00003a05
    5310:	00003a2b 	.word	0x00003a2b
    5314:	000038c5 	.word	0x000038c5

00005318 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5318:	b570      	push	{r4, r5, r6, lr}
    531a:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    531c:	8881      	ldrh	r1, [r0, #4]
    531e:	6800      	ldr	r0, [r0, #0]
    5320:	4b1c      	ldr	r3, [pc, #112]	; (5394 <f_sync+0x7c>)
    5322:	4798      	blx	r3
	if (res == FR_OK) {
    5324:	2800      	cmp	r0, #0
    5326:	d102      	bne.n	532e <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5328:	79a3      	ldrb	r3, [r4, #6]
    532a:	069b      	lsls	r3, r3, #26
    532c:	d400      	bmi.n	5330 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    532e:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    5330:	69e1      	ldr	r1, [r4, #28]
    5332:	6820      	ldr	r0, [r4, #0]
    5334:	4b18      	ldr	r3, [pc, #96]	; (5398 <f_sync+0x80>)
    5336:	4798      	blx	r3
			if (res == FR_OK) {
    5338:	2800      	cmp	r0, #0
    533a:	d1f8      	bne.n	532e <f_sync+0x16>
				dir = fp->dir_ptr;
    533c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    533e:	7aeb      	ldrb	r3, [r5, #11]
    5340:	2220      	movs	r2, #32
    5342:	4313      	orrs	r3, r2
    5344:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    5346:	7b23      	ldrb	r3, [r4, #12]
    5348:	772b      	strb	r3, [r5, #28]
    534a:	89a3      	ldrh	r3, [r4, #12]
    534c:	0a1b      	lsrs	r3, r3, #8
    534e:	776b      	strb	r3, [r5, #29]
    5350:	89e3      	ldrh	r3, [r4, #14]
    5352:	77ab      	strb	r3, [r5, #30]
    5354:	7be3      	ldrb	r3, [r4, #15]
    5356:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    5358:	7c23      	ldrb	r3, [r4, #16]
    535a:	76ab      	strb	r3, [r5, #26]
    535c:	8a23      	ldrh	r3, [r4, #16]
    535e:	0a1b      	lsrs	r3, r3, #8
    5360:	76eb      	strb	r3, [r5, #27]
    5362:	8a63      	ldrh	r3, [r4, #18]
    5364:	752b      	strb	r3, [r5, #20]
    5366:	8a63      	ldrh	r3, [r4, #18]
    5368:	0a1b      	lsrs	r3, r3, #8
    536a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    536c:	4b0b      	ldr	r3, [pc, #44]	; (539c <f_sync+0x84>)
    536e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    5370:	75a8      	strb	r0, [r5, #22]
    5372:	0a03      	lsrs	r3, r0, #8
    5374:	75eb      	strb	r3, [r5, #23]
    5376:	0c03      	lsrs	r3, r0, #16
    5378:	762b      	strb	r3, [r5, #24]
    537a:	0e00      	lsrs	r0, r0, #24
    537c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    537e:	79a3      	ldrb	r3, [r4, #6]
    5380:	2220      	movs	r2, #32
    5382:	4393      	bics	r3, r2
    5384:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5386:	2301      	movs	r3, #1
    5388:	6822      	ldr	r2, [r4, #0]
    538a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    538c:	6820      	ldr	r0, [r4, #0]
    538e:	4b04      	ldr	r3, [pc, #16]	; (53a0 <f_sync+0x88>)
    5390:	4798      	blx	r3
    5392:	e7cc      	b.n	532e <f_sync+0x16>
    5394:	00003a61 	.word	0x00003a61
    5398:	00003ee5 	.word	0x00003ee5
    539c:	000039b5 	.word	0x000039b5
    53a0:	0000493d 	.word	0x0000493d

000053a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    53a4:	b510      	push	{r4, lr}
    53a6:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    53a8:	4b03      	ldr	r3, [pc, #12]	; (53b8 <f_close+0x14>)
    53aa:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    53ac:	2800      	cmp	r0, #0
    53ae:	d101      	bne.n	53b4 <f_close+0x10>
    53b0:	2300      	movs	r3, #0
    53b2:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    53b4:	bd10      	pop	{r4, pc}
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	00005319 	.word	0x00005319

000053bc <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    53bc:	b510      	push	{r4, lr}
    53be:	b082      	sub	sp, #8
    53c0:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    53c2:	466b      	mov	r3, sp
    53c4:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    53c6:	ab01      	add	r3, sp, #4
    53c8:	2201      	movs	r2, #1
    53ca:	4669      	mov	r1, sp
    53cc:	0020      	movs	r0, r4
    53ce:	4c05      	ldr	r4, [pc, #20]	; (53e4 <f_putc+0x28>)
    53d0:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    53d2:	9b01      	ldr	r3, [sp, #4]
    53d4:	1e58      	subs	r0, r3, #1
    53d6:	1e43      	subs	r3, r0, #1
    53d8:	4198      	sbcs	r0, r3
    53da:	4240      	negs	r0, r0
    53dc:	2301      	movs	r3, #1
    53de:	4318      	orrs	r0, r3
}
    53e0:	b002      	add	sp, #8
    53e2:	bd10      	pop	{r4, pc}
    53e4:	000050e1 	.word	0x000050e1

000053e8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    53e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ea:	0006      	movs	r6, r0
    53ec:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    53ee:	7800      	ldrb	r0, [r0, #0]
    53f0:	2800      	cmp	r0, #0
    53f2:	d00b      	beq.n	540c <f_puts+0x24>
    53f4:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    53f6:	4f06      	ldr	r7, [pc, #24]	; (5410 <f_puts+0x28>)
    53f8:	0029      	movs	r1, r5
    53fa:	47b8      	blx	r7
    53fc:	1c43      	adds	r3, r0, #1
    53fe:	d004      	beq.n	540a <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    5400:	3401      	adds	r4, #1
    5402:	5d30      	ldrb	r0, [r6, r4]
    5404:	2800      	cmp	r0, #0
    5406:	d1f7      	bne.n	53f8 <f_puts+0x10>
    5408:	0020      	movs	r0, r4
	}
	return n;
}
    540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    540c:	2000      	movs	r0, #0
    540e:	e7fc      	b.n	540a <f_puts+0x22>
    5410:	000053bd 	.word	0x000053bd

00005414 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5414:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5416:	287f      	cmp	r0, #127	; 0x7f
    5418:	d911      	bls.n	543e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    541a:	2900      	cmp	r1, #0
    541c:	d111      	bne.n	5442 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    541e:	28c7      	cmp	r0, #199	; 0xc7
    5420:	d017      	beq.n	5452 <ff_convert+0x3e>
    5422:	4a0d      	ldr	r2, [pc, #52]	; (5458 <ff_convert+0x44>)
    5424:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5426:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5428:	8811      	ldrh	r1, [r2, #0]
    542a:	4281      	cmp	r1, r0
    542c:	d004      	beq.n	5438 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    542e:	3301      	adds	r3, #1
    5430:	b29b      	uxth	r3, r3
    5432:	3202      	adds	r2, #2
    5434:	2b80      	cmp	r3, #128	; 0x80
    5436:	d1f7      	bne.n	5428 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5438:	3380      	adds	r3, #128	; 0x80
    543a:	20ff      	movs	r0, #255	; 0xff
    543c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    543e:	0018      	movs	r0, r3
    5440:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5442:	2300      	movs	r3, #0
    5444:	28ff      	cmp	r0, #255	; 0xff
    5446:	d8fa      	bhi.n	543e <ff_convert+0x2a>
    5448:	3880      	subs	r0, #128	; 0x80
    544a:	0040      	lsls	r0, r0, #1
    544c:	4b02      	ldr	r3, [pc, #8]	; (5458 <ff_convert+0x44>)
    544e:	5ac3      	ldrh	r3, [r0, r3]
    5450:	e7f5      	b.n	543e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5452:	2300      	movs	r3, #0
    5454:	e7f0      	b.n	5438 <ff_convert+0x24>
    5456:	46c0      	nop			; (mov r8, r8)
    5458:	00006eb4 	.word	0x00006eb4

0000545c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    545c:	2861      	cmp	r0, #97	; 0x61
    545e:	d014      	beq.n	548a <ff_wtoupper+0x2e>
    5460:	4b0b      	ldr	r3, [pc, #44]	; (5490 <ff_wtoupper+0x34>)
    5462:	3304      	adds	r3, #4
    5464:	2101      	movs	r1, #1
    5466:	2262      	movs	r2, #98	; 0x62
    5468:	4290      	cmp	r0, r2
    546a:	d007      	beq.n	547c <ff_wtoupper+0x20>
    546c:	3101      	adds	r1, #1
    546e:	3302      	adds	r3, #2
    5470:	1e9a      	subs	r2, r3, #2
    5472:	8812      	ldrh	r2, [r2, #0]
    5474:	2a00      	cmp	r2, #0
    5476:	d1f7      	bne.n	5468 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5478:	0003      	movs	r3, r0
    547a:	e004      	b.n	5486 <ff_wtoupper+0x2a>
    547c:	1e03      	subs	r3, r0, #0
    547e:	d002      	beq.n	5486 <ff_wtoupper+0x2a>
    5480:	0049      	lsls	r1, r1, #1
    5482:	4b04      	ldr	r3, [pc, #16]	; (5494 <ff_wtoupper+0x38>)
    5484:	5acb      	ldrh	r3, [r1, r3]
}
    5486:	0018      	movs	r0, r3
    5488:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    548a:	2100      	movs	r1, #0
    548c:	e7f8      	b.n	5480 <ff_wtoupper+0x24>
    548e:	46c0      	nop			; (mov r8, r8)
    5490:	00006fb4 	.word	0x00006fb4
    5494:	00007194 	.word	0x00007194

00005498 <update_firmware>:

/// Jump to application
applicationCodeEntry();
}

int8_t update_firmware(){
    5498:	b5f0      	push	{r4, r5, r6, r7, lr}
    549a:	b0d1      	sub	sp, #324	; 0x144
	//returns -1 if update failed, 0 if successful and ready to jump
	//find all necessary addresses to start at
			setLogLevel(LOG_INFO_LVL);
    549c:	2000      	movs	r0, #0
    549e:	4b3b      	ldr	r3, [pc, #236]	; (558c <update_firmware+0xf4>)
    54a0:	4798      	blx	r3
	//bomb entire application code region
	
	//for firmware image
			//start of params test
			char firmware_file_name[] = "0:app.bin";
    54a2:	ac4d      	add	r4, sp, #308	; 0x134
    54a4:	4b3a      	ldr	r3, [pc, #232]	; (5590 <update_firmware+0xf8>)
    54a6:	0022      	movs	r2, r4
    54a8:	cb03      	ldmia	r3!, {r0, r1}
    54aa:	c203      	stmia	r2!, {r0, r1}
    54ac:	881b      	ldrh	r3, [r3, #0]
    54ae:	8013      	strh	r3, [r2, #0]
			FIL firmware_file;
			FRESULT res;
			int8_t successful_update = -1;

			// OPEN params.csv
			SerialConsoleWriteString("READING app.bin \r\n");
    54b0:	4838      	ldr	r0, [pc, #224]	; (5594 <update_firmware+0xfc>)
    54b2:	4b39      	ldr	r3, [pc, #228]	; (5598 <update_firmware+0x100>)
    54b4:	4798      	blx	r3
			firmware_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0' ;
    54b6:	2330      	movs	r3, #48	; 0x30
    54b8:	7023      	strb	r3, [r4, #0]
			res = f_open(&firmware_file, (char const *)firmware_file_name, FA_READ);
    54ba:	2201      	movs	r2, #1
    54bc:	0021      	movs	r1, r4
    54be:	a844      	add	r0, sp, #272	; 0x110
    54c0:	4b36      	ldr	r3, [pc, #216]	; (559c <update_firmware+0x104>)
    54c2:	4798      	blx	r3
			if (res != FR_OK) {
    54c4:	2800      	cmp	r0, #0
    54c6:	d145      	bne.n	5554 <update_firmware+0xbc>
			uint32_t row_size = 128;
			char block[row_size];		
			char nvm_block[row_size];
			uint32_t row_address = APP_START_ADDRESS;		//Start Address
			//LogMessage(LOG_INFO_LVL,"PAGE SIZE IS %d bytes\r\n",page_size);
			LogMessage(LOG_INFO_LVL,"ROW  SIZE IS %d bytes\r\n",row_size);
    54c8:	2280      	movs	r2, #128	; 0x80
    54ca:	4935      	ldr	r1, [pc, #212]	; (55a0 <update_firmware+0x108>)
    54cc:	2000      	movs	r0, #0
    54ce:	4b35      	ldr	r3, [pc, #212]	; (55a4 <update_firmware+0x10c>)
    54d0:	4798      	blx	r3
			//uint32_t crc_on_block=0;
			//uint32_t crc_on_nvm=0;
			crc32_t crc_on_block=0;
    54d2:	2300      	movs	r3, #0
    54d4:	9343      	str	r3, [sp, #268]	; 0x10c
			crc32_t	crc_on_nvm=0;
    54d6:	9342      	str	r3, [sp, #264]	; 0x108
			//dsu_crc32_init();								//Initializing CRC
			
			SerialConsoleWriteString("STARTING MOVE BLOCKS \r\n");
    54d8:	4833      	ldr	r0, [pc, #204]	; (55a8 <update_firmware+0x110>)
    54da:	4b2f      	ldr	r3, [pc, #188]	; (5598 <update_firmware+0x100>)
    54dc:	4798      	blx	r3
			UINT br;
			while(!f_eof(&firmware_file)) // While not end of Firmware file 
    54de:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    54e0:	9b46      	ldr	r3, [sp, #280]	; 0x118
    54e2:	429a      	cmp	r2, r3
    54e4:	d042      	beq.n	556c <update_firmware+0xd4>
    54e6:	2480      	movs	r4, #128	; 0x80
    54e8:	0364      	lsls	r4, r4, #13
			{
					res = f_read (&firmware_file,block, row_size, &br);
    54ea:	4f30      	ldr	r7, [pc, #192]	; (55ac <update_firmware+0x114>)
					if (res != FR_OK) {
						LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					LogMessage(LOG_INFO_LVL ,"[Read Block from Firmware File] %d, bytes \r\n", br);
    54ec:	4d2d      	ldr	r5, [pc, #180]	; (55a4 <update_firmware+0x10c>)
					res = f_read (&firmware_file,block, row_size, &br);
    54ee:	ab41      	add	r3, sp, #260	; 0x104
    54f0:	2280      	movs	r2, #128	; 0x80
    54f2:	a901      	add	r1, sp, #4
    54f4:	a844      	add	r0, sp, #272	; 0x110
    54f6:	47b8      	blx	r7
					if (res != FR_OK) {
    54f8:	2800      	cmp	r0, #0
    54fa:	d131      	bne.n	5560 <update_firmware+0xc8>
					LogMessage(LOG_INFO_LVL ,"[Read Block from Firmware File] %d, bytes \r\n", br);
    54fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
    54fe:	492c      	ldr	r1, [pc, #176]	; (55b0 <update_firmware+0x118>)
    5500:	2000      	movs	r0, #0
    5502:	47a8      	blx	r5
					
					// Calculate CRC on block
					//res= dsu_crc32_cal(block,row_size,&crc_on_block);
					crc32_recalculate(block,row_size,&crc_on_block);
    5504:	aa43      	add	r2, sp, #268	; 0x10c
    5506:	2180      	movs	r1, #128	; 0x80
    5508:	a801      	add	r0, sp, #4
    550a:	4e2a      	ldr	r6, [pc, #168]	; (55b4 <update_firmware+0x11c>)
    550c:	47b0      	blx	r6
					if (res != STATUS_OK) {
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC ON Buffer] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					LogMessage(LOG_INFO_LVL ,"[CRC ON Buffer]  %d\r\n", crc_on_block);
    550e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    5510:	4929      	ldr	r1, [pc, #164]	; (55b8 <update_firmware+0x120>)
    5512:	2000      	movs	r0, #0
    5514:	47a8      	blx	r5
					//Erase Row From NVM
					nvm_erase_row (row_address);
    5516:	0020      	movs	r0, r4
    5518:	4b28      	ldr	r3, [pc, #160]	; (55bc <update_firmware+0x124>)
    551a:	4798      	blx	r3
						LogMessage(LOG_INFO_LVL ,"[FAIL: NVM ROW DELETION] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					// Writing block on NVM 	
					nvm_write_buffer (row_address, block, row_size);
    551c:	2280      	movs	r2, #128	; 0x80
    551e:	a901      	add	r1, sp, #4
    5520:	0020      	movs	r0, r4
    5522:	4b27      	ldr	r3, [pc, #156]	; (55c0 <update_firmware+0x128>)
    5524:	4798      	blx	r3
						LogMessage(LOG_INFO_LVL ,"[FAIL: WRITE ON NVM] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					// Read What I just wrote
					nvm_read_buffer (row_address, nvm_block, row_size);
    5526:	2280      	movs	r2, #128	; 0x80
    5528:	a921      	add	r1, sp, #132	; 0x84
    552a:	0020      	movs	r0, r4
    552c:	4b25      	ldr	r3, [pc, #148]	; (55c4 <update_firmware+0x12c>)
    552e:	4798      	blx	r3
							break;
					}
					
					//calculate CRC on NVM
					//dsu_crc32_cal(nvm_block,row_size,&crc_on_nvm); 
					crc32_recalculate(nvm_block,row_size,&crc_on_nvm);
    5530:	aa42      	add	r2, sp, #264	; 0x108
    5532:	2180      	movs	r1, #128	; 0x80
    5534:	a821      	add	r0, sp, #132	; 0x84
    5536:	47b0      	blx	r6
					if (res != STATUS_OK) {
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC ON NVM] res %d\r\n", res);
						successful_update = -1; //set result to -1, file not read correctly
						break;
					}
					LogMessage(LOG_INFO_LVL ,"[CRC ON NVM]  %d\r\n", crc_on_nvm);
    5538:	9a42      	ldr	r2, [sp, #264]	; 0x108
    553a:	4923      	ldr	r1, [pc, #140]	; (55c8 <update_firmware+0x130>)
    553c:	2000      	movs	r0, #0
    553e:	47a8      	blx	r5
					// CHECKING IF CRCs match
					if (crc_on_nvm == crc_on_block){
    5540:	9b42      	ldr	r3, [sp, #264]	; 0x108
    5542:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    5544:	4293      	cmp	r3, r2
    5546:	d11b      	bne.n	5580 <update_firmware+0xe8>
						row_address = row_address + row_size;
    5548:	3480      	adds	r4, #128	; 0x80
			while(!f_eof(&firmware_file)) // While not end of Firmware file 
    554a:	9a46      	ldr	r2, [sp, #280]	; 0x118
    554c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    554e:	429a      	cmp	r2, r3
    5550:	d1cd      	bne.n	54ee <update_firmware+0x56>
    5552:	e00b      	b.n	556c <update_firmware+0xd4>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
    5554:	0002      	movs	r2, r0
    5556:	491d      	ldr	r1, [pc, #116]	; (55cc <update_firmware+0x134>)
    5558:	2000      	movs	r0, #0
    555a:	4b12      	ldr	r3, [pc, #72]	; (55a4 <update_firmware+0x10c>)
    555c:	4798      	blx	r3
    555e:	e7b3      	b.n	54c8 <update_firmware+0x30>
						LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
    5560:	9b41      	ldr	r3, [sp, #260]	; 0x104
    5562:	0002      	movs	r2, r0
    5564:	491a      	ldr	r1, [pc, #104]	; (55d0 <update_firmware+0x138>)
    5566:	2000      	movs	r0, #0
    5568:	4c0e      	ldr	r4, [pc, #56]	; (55a4 <update_firmware+0x10c>)
    556a:	47a0      	blx	r4
						break;
						//Plan B
					}	
			}	
				
			f_close(&firmware_file); // Read a block
    556c:	a844      	add	r0, sp, #272	; 0x110
    556e:	4b19      	ldr	r3, [pc, #100]	; (55d4 <update_firmware+0x13c>)
    5570:	4798      	blx	r3
	//for firmware image in nvm
	//read from nvm to buffer
	//crc buffer
	
	//compare crcs and return accordingly
	SerialConsoleWriteString("RETURNING FROM FIRMWARE UPDATE \r\n");
    5572:	4819      	ldr	r0, [pc, #100]	; (55d8 <update_firmware+0x140>)
    5574:	4b08      	ldr	r3, [pc, #32]	; (5598 <update_firmware+0x100>)
    5576:	4798      	blx	r3
	return successful_update;
    5578:	2001      	movs	r0, #1
    557a:	4240      	negs	r0, r0
    557c:	b051      	add	sp, #324	; 0x144
    557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						LogMessage(LOG_INFO_LVL ,"[FAIL: CRC DID NOT MATCH]\r\n");
    5580:	4916      	ldr	r1, [pc, #88]	; (55dc <update_firmware+0x144>)
    5582:	2000      	movs	r0, #0
    5584:	4b07      	ldr	r3, [pc, #28]	; (55a4 <update_firmware+0x10c>)
    5586:	4798      	blx	r3
						break;
    5588:	e7f0      	b.n	556c <update_firmware+0xd4>
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	00000835 	.word	0x00000835
    5590:	000077bc 	.word	0x000077bc
    5594:	00007664 	.word	0x00007664
    5598:	0000076d 	.word	0x0000076d
    559c:	00004da5 	.word	0x00004da5
    55a0:	000076a8 	.word	0x000076a8
    55a4:	00000841 	.word	0x00000841
    55a8:	000076c0 	.word	0x000076c0
    55ac:	00004f2d 	.word	0x00004f2d
    55b0:	00007720 	.word	0x00007720
    55b4:	00000181 	.word	0x00000181
    55b8:	00007750 	.word	0x00007750
    55bc:	00000445 	.word	0x00000445
    55c0:	00000331 	.word	0x00000331
    55c4:	000003d9 	.word	0x000003d9
    55c8:	00007768 	.word	0x00007768
    55cc:	00007678 	.word	0x00007678
    55d0:	000076d8 	.word	0x000076d8
    55d4:	000053a5 	.word	0x000053a5
    55d8:	00007798 	.word	0x00007798
    55dc:	0000777c 	.word	0x0000777c

000055e0 <main>:
{
    55e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55e2:	4c95      	ldr	r4, [pc, #596]	; (5838 <main+0x258>)
    55e4:	44a5      	add	sp, r4
    55e6:	af00      	add	r7, sp, #0
	char test_file_name[] = "0:sd_mmc_test.txt";
    55e8:	23af      	movs	r3, #175	; 0xaf
    55ea:	009b      	lsls	r3, r3, #2
    55ec:	2208      	movs	r2, #8
    55ee:	18ba      	adds	r2, r7, r2
    55f0:	18d2      	adds	r2, r2, r3
    55f2:	4b92      	ldr	r3, [pc, #584]	; (583c <main+0x25c>)
    55f4:	cb13      	ldmia	r3!, {r0, r1, r4}
    55f6:	c213      	stmia	r2!, {r0, r1, r4}
    55f8:	0011      	movs	r1, r2
    55fa:	681a      	ldr	r2, [r3, #0]
    55fc:	600a      	str	r2, [r1, #0]
    55fe:	889b      	ldrh	r3, [r3, #4]
    5600:	808b      	strh	r3, [r1, #4]
	system_init();
    5602:	4b8f      	ldr	r3, [pc, #572]	; (5840 <main+0x260>)
    5604:	4798      	blx	r3
	delay_init();
    5606:	4b8f      	ldr	r3, [pc, #572]	; (5844 <main+0x264>)
    5608:	4798      	blx	r3
	InitializeSerialConsole();
    560a:	4b8f      	ldr	r3, [pc, #572]	; (5848 <main+0x268>)
    560c:	4798      	blx	r3
	cpu_irq_enable();
    560e:	4c8f      	ldr	r4, [pc, #572]	; (584c <main+0x26c>)
    5610:	2501      	movs	r5, #1
    5612:	7025      	strb	r5, [r4, #0]
    5614:	f3bf 8f5f 	dmb	sy
    5618:	b662      	cpsie	i
	sd_mmc_init();
    561a:	4b8d      	ldr	r3, [pc, #564]	; (5850 <main+0x270>)
    561c:	4798      	blx	r3
	cpu_irq_enable();
    561e:	7025      	strb	r5, [r4, #0]
    5620:	f3bf 8f5f 	dmb	sy
    5624:	b662      	cpsie	i
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    5626:	488b      	ldr	r0, [pc, #556]	; (5854 <main+0x274>)
    5628:	4c8b      	ldr	r4, [pc, #556]	; (5858 <main+0x278>)
    562a:	47a0      	blx	r4
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    562c:	488b      	ldr	r0, [pc, #556]	; (585c <main+0x27c>)
    562e:	47a0      	blx	r4
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    5630:	4c89      	ldr	r4, [pc, #548]	; (5858 <main+0x278>)
				SerialConsoleWriteString("Card install FAIL\n\r");
    5632:	0025      	movs	r5, r4
    5634:	e060      	b.n	56f8 <main+0x118>
    5636:	488a      	ldr	r0, [pc, #552]	; (5860 <main+0x280>)
    5638:	47a8      	blx	r5
				SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    563a:	488a      	ldr	r0, [pc, #552]	; (5864 <main+0x284>)
    563c:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    563e:	4e8a      	ldr	r6, [pc, #552]	; (5868 <main+0x288>)
    5640:	2000      	movs	r0, #0
    5642:	47b0      	blx	r6
    5644:	2802      	cmp	r0, #2
    5646:	d1fb      	bne.n	5640 <main+0x60>
			status = sd_mmc_test_unit_ready(0);
    5648:	2000      	movs	r0, #0
    564a:	4b88      	ldr	r3, [pc, #544]	; (586c <main+0x28c>)
    564c:	4798      	blx	r3
			if (CTRL_FAIL == status) {
    564e:	2801      	cmp	r0, #1
    5650:	d0f1      	beq.n	5636 <main+0x56>
		} while (CTRL_GOOD != status);
    5652:	2800      	cmp	r0, #0
    5654:	d1f8      	bne.n	5648 <main+0x68>
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    5656:	4886      	ldr	r0, [pc, #536]	; (5870 <main+0x290>)
    5658:	4b7f      	ldr	r3, [pc, #508]	; (5858 <main+0x278>)
    565a:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    565c:	228c      	movs	r2, #140	; 0x8c
    565e:	0092      	lsls	r2, r2, #2
    5660:	2100      	movs	r1, #0
    5662:	238c      	movs	r3, #140	; 0x8c
    5664:	2008      	movs	r0, #8
    5666:	1838      	adds	r0, r7, r0
    5668:	18c0      	adds	r0, r0, r3
    566a:	4b82      	ldr	r3, [pc, #520]	; (5874 <main+0x294>)
    566c:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    566e:	238c      	movs	r3, #140	; 0x8c
    5670:	2208      	movs	r2, #8
    5672:	18ba      	adds	r2, r7, r2
    5674:	18d1      	adds	r1, r2, r3
    5676:	2000      	movs	r0, #0
    5678:	4b7f      	ldr	r3, [pc, #508]	; (5878 <main+0x298>)
    567a:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    567c:	280b      	cmp	r0, #11
    567e:	d03e      	beq.n	56fe <main+0x11e>
		SerialConsoleWriteString("[OK]\r\n");
    5680:	487e      	ldr	r0, [pc, #504]	; (587c <main+0x29c>)
    5682:	4e75      	ldr	r6, [pc, #468]	; (5858 <main+0x278>)
    5684:	47b0      	blx	r6
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    5686:	487e      	ldr	r0, [pc, #504]	; (5880 <main+0x2a0>)
    5688:	47b0      	blx	r6
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    568a:	23af      	movs	r3, #175	; 0xaf
    568c:	009b      	lsls	r3, r3, #2
    568e:	2208      	movs	r2, #8
    5690:	18ba      	adds	r2, r7, r2
    5692:	18d1      	adds	r1, r2, r3
    5694:	2330      	movs	r3, #48	; 0x30
    5696:	700b      	strb	r3, [r1, #0]
		res = f_open(&file_object,
    5698:	220a      	movs	r2, #10
    569a:	3338      	adds	r3, #56	; 0x38
    569c:	2008      	movs	r0, #8
    569e:	1838      	adds	r0, r7, r0
    56a0:	18c0      	adds	r0, r0, r3
    56a2:	4b78      	ldr	r3, [pc, #480]	; (5884 <main+0x2a4>)
    56a4:	4798      	blx	r3
		if (res != FR_OK) {
    56a6:	2800      	cmp	r0, #0
    56a8:	d02f      	beq.n	570a <main+0x12a>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    56aa:	0002      	movs	r2, r0
    56ac:	4976      	ldr	r1, [pc, #472]	; (5888 <main+0x2a8>)
    56ae:	2000      	movs	r0, #0
    56b0:	4b76      	ldr	r3, [pc, #472]	; (588c <main+0x2ac>)
    56b2:	4798      	blx	r3
		SerialConsoleWriteString("Please unplug the card.\n\r");
    56b4:	4876      	ldr	r0, [pc, #472]	; (5890 <main+0x2b0>)
    56b6:	4e68      	ldr	r6, [pc, #416]	; (5858 <main+0x278>)
    56b8:	47b0      	blx	r6
		delay_s(1); //Delay to allow text to print
    56ba:	20fa      	movs	r0, #250	; 0xfa
    56bc:	0080      	lsls	r0, r0, #2
    56be:	4b75      	ldr	r3, [pc, #468]	; (5894 <main+0x2b4>)
    56c0:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    56c2:	b672      	cpsid	i
    56c4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    56c8:	2200      	movs	r2, #0
    56ca:	4b60      	ldr	r3, [pc, #384]	; (584c <main+0x26c>)
    56cc:	701a      	strb	r2, [r3, #0]
		DeinitializeSerialConsole();
    56ce:	4b72      	ldr	r3, [pc, #456]	; (5898 <main+0x2b8>)
    56d0:	4798      	blx	r3
		sd_mmc_deinit();
    56d2:	4b72      	ldr	r3, [pc, #456]	; (589c <main+0x2bc>)
    56d4:	4798      	blx	r3
		SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    56d6:	4872      	ldr	r0, [pc, #456]	; (58a0 <main+0x2c0>)
    56d8:	47b0      	blx	r6
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    56da:	2380      	movs	r3, #128	; 0x80
    56dc:	035b      	lsls	r3, r3, #13
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    56de:	681a      	ldr	r2, [r3, #0]
    56e0:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    56e4:	4a6f      	ldr	r2, [pc, #444]	; (58a4 <main+0x2c4>)
    56e6:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    56e8:	4b6f      	ldr	r3, [pc, #444]	; (58a8 <main+0x2c8>)
applicationCodeEntry();
    56ea:	681b      	ldr	r3, [r3, #0]
    56ec:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    56ee:	4e5e      	ldr	r6, [pc, #376]	; (5868 <main+0x288>)
    56f0:	2000      	movs	r0, #0
    56f2:	47b0      	blx	r6
    56f4:	2802      	cmp	r0, #2
    56f6:	d1fb      	bne.n	56f0 <main+0x110>
		SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    56f8:	486c      	ldr	r0, [pc, #432]	; (58ac <main+0x2cc>)
    56fa:	47a0      	blx	r4
    56fc:	e7a4      	b.n	5648 <main+0x68>
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    56fe:	220b      	movs	r2, #11
    5700:	4961      	ldr	r1, [pc, #388]	; (5888 <main+0x2a8>)
    5702:	2000      	movs	r0, #0
    5704:	4b61      	ldr	r3, [pc, #388]	; (588c <main+0x2ac>)
    5706:	4798      	blx	r3
			goto main_end_of_test;
    5708:	e7d4      	b.n	56b4 <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    570a:	485c      	ldr	r0, [pc, #368]	; (587c <main+0x29c>)
    570c:	4e52      	ldr	r6, [pc, #328]	; (5858 <main+0x278>)
    570e:	47b0      	blx	r6
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    5710:	4867      	ldr	r0, [pc, #412]	; (58b0 <main+0x2d0>)
    5712:	47b0      	blx	r6
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    5714:	2368      	movs	r3, #104	; 0x68
    5716:	2208      	movs	r2, #8
    5718:	18ba      	adds	r2, r7, r2
    571a:	18d1      	adds	r1, r2, r3
    571c:	4865      	ldr	r0, [pc, #404]	; (58b4 <main+0x2d4>)
    571e:	4b66      	ldr	r3, [pc, #408]	; (58b8 <main+0x2d8>)
    5720:	4798      	blx	r3
    5722:	2800      	cmp	r0, #0
    5724:	d10a      	bne.n	573c <main+0x15c>
			f_close(&file_object);
    5726:	2368      	movs	r3, #104	; 0x68
    5728:	2208      	movs	r2, #8
    572a:	18ba      	adds	r2, r7, r2
    572c:	18d0      	adds	r0, r2, r3
    572e:	4b63      	ldr	r3, [pc, #396]	; (58bc <main+0x2dc>)
    5730:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    5732:	4963      	ldr	r1, [pc, #396]	; (58c0 <main+0x2e0>)
    5734:	2000      	movs	r0, #0
    5736:	4b55      	ldr	r3, [pc, #340]	; (588c <main+0x2ac>)
    5738:	4798      	blx	r3
			goto main_end_of_test;
    573a:	e7bb      	b.n	56b4 <main+0xd4>
		SerialConsoleWriteString("[OK]\r\n");
    573c:	484f      	ldr	r0, [pc, #316]	; (587c <main+0x29c>)
    573e:	4e46      	ldr	r6, [pc, #280]	; (5858 <main+0x278>)
    5740:	47b0      	blx	r6
		f_close(&file_object); //Close file
    5742:	2368      	movs	r3, #104	; 0x68
    5744:	2208      	movs	r2, #8
    5746:	18ba      	adds	r2, r7, r2
    5748:	18d0      	adds	r0, r2, r3
    574a:	4b5c      	ldr	r3, [pc, #368]	; (58bc <main+0x2dc>)
    574c:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    574e:	485d      	ldr	r0, [pc, #372]	; (58c4 <main+0x2e4>)
    5750:	47b0      	blx	r6
		char params_file_name[] = "params.csv";
    5752:	230c      	movs	r3, #12
    5754:	18fa      	adds	r2, r7, r3
    5756:	4b5c      	ldr	r3, [pc, #368]	; (58c8 <main+0x2e8>)
    5758:	cb03      	ldmia	r3!, {r0, r1}
    575a:	c203      	stmia	r2!, {r0, r1}
    575c:	0011      	movs	r1, r2
    575e:	881a      	ldrh	r2, [r3, #0]
    5760:	800a      	strh	r2, [r1, #0]
    5762:	789b      	ldrb	r3, [r3, #2]
    5764:	708b      	strb	r3, [r1, #2]
		SerialConsoleWriteString("Opening params.csv\r\n");
    5766:	4859      	ldr	r0, [pc, #356]	; (58cc <main+0x2ec>)
    5768:	47b0      	blx	r6
		res = f_open(&params_file, (char const *)params_file_name, FA_READ);
    576a:	2201      	movs	r2, #1
    576c:	230c      	movs	r3, #12
    576e:	18f9      	adds	r1, r7, r3
    5770:	3304      	adds	r3, #4
    5772:	2008      	movs	r0, #8
    5774:	1838      	adds	r0, r7, r0
    5776:	18c0      	adds	r0, r0, r3
    5778:	4b42      	ldr	r3, [pc, #264]	; (5884 <main+0x2a4>)
    577a:	4798      	blx	r3
    577c:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    577e:	d004      	beq.n	578a <main+0x1aa>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
    5780:	4953      	ldr	r1, [pc, #332]	; (58d0 <main+0x2f0>)
    5782:	2000      	movs	r0, #0
    5784:	4b41      	ldr	r3, [pc, #260]	; (588c <main+0x2ac>)
    5786:	4798      	blx	r3
			goto main_end_of_test;
    5788:	e794      	b.n	56b4 <main+0xd4>
		res = f_read (&params_file,(char const *)params, 50, &br);
    578a:	2308      	movs	r3, #8
    578c:	18fb      	adds	r3, r7, r3
    578e:	2232      	movs	r2, #50	; 0x32
    5790:	2134      	movs	r1, #52	; 0x34
    5792:	2008      	movs	r0, #8
    5794:	469c      	mov	ip, r3
    5796:	4461      	add	r1, ip
    5798:	3008      	adds	r0, #8
    579a:	469c      	mov	ip, r3
    579c:	4460      	add	r0, ip
    579e:	4e4d      	ldr	r6, [pc, #308]	; (58d4 <main+0x2f4>)
    57a0:	47b0      	blx	r6
    57a2:	1e02      	subs	r2, r0, #0
		if (res != FR_OK) {
    57a4:	d004      	beq.n	57b0 <main+0x1d0>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
    57a6:	494c      	ldr	r1, [pc, #304]	; (58d8 <main+0x2f8>)
    57a8:	2000      	movs	r0, #0
    57aa:	4b38      	ldr	r3, [pc, #224]	; (588c <main+0x2ac>)
    57ac:	4798      	blx	r3
			goto main_end_of_test;
    57ae:	e781      	b.n	56b4 <main+0xd4>
		LogMessage(LOG_INFO_LVL ,"[Bytes read from params.csv: ] %d\r\n", br);
    57b0:	68ba      	ldr	r2, [r7, #8]
    57b2:	494a      	ldr	r1, [pc, #296]	; (58dc <main+0x2fc>)
    57b4:	2000      	movs	r0, #0
    57b6:	4b35      	ldr	r3, [pc, #212]	; (588c <main+0x2ac>)
    57b8:	4798      	blx	r3
		f_close(&params_file);		
    57ba:	2310      	movs	r3, #16
    57bc:	2208      	movs	r2, #8
    57be:	18ba      	adds	r2, r7, r2
    57c0:	18d0      	adds	r0, r2, r3
    57c2:	4b3e      	ldr	r3, [pc, #248]	; (58bc <main+0x2dc>)
    57c4:	4798      	blx	r3
		char * flag = strtok(params, ",");
    57c6:	4e46      	ldr	r6, [pc, #280]	; (58e0 <main+0x300>)
    57c8:	0031      	movs	r1, r6
    57ca:	2334      	movs	r3, #52	; 0x34
    57cc:	2208      	movs	r2, #8
    57ce:	18ba      	adds	r2, r7, r2
    57d0:	18d0      	adds	r0, r2, r3
    57d2:	4b44      	ldr	r3, [pc, #272]	; (58e4 <main+0x304>)
    57d4:	4798      	blx	r3
    57d6:	6078      	str	r0, [r7, #4]
		char * crc_from_file = strtok(NULL, ",");
    57d8:	0031      	movs	r1, r6
    57da:	2000      	movs	r0, #0
    57dc:	4b41      	ldr	r3, [pc, #260]	; (58e4 <main+0x304>)
    57de:	4798      	blx	r3
    57e0:	6038      	str	r0, [r7, #0]
		SerialConsoleWriteString("Reading from params.csv \r\n");
    57e2:	4841      	ldr	r0, [pc, #260]	; (58e8 <main+0x308>)
    57e4:	4b1c      	ldr	r3, [pc, #112]	; (5858 <main+0x278>)
    57e6:	4798      	blx	r3
		SerialConsoleWriteString(flag);
    57e8:	6878      	ldr	r0, [r7, #4]
    57ea:	4b1b      	ldr	r3, [pc, #108]	; (5858 <main+0x278>)
    57ec:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    57ee:	4e3f      	ldr	r6, [pc, #252]	; (58ec <main+0x30c>)
    57f0:	0030      	movs	r0, r6
    57f2:	4b19      	ldr	r3, [pc, #100]	; (5858 <main+0x278>)
    57f4:	4798      	blx	r3
		SerialConsoleWriteString(crc_from_file);
    57f6:	6838      	ldr	r0, [r7, #0]
    57f8:	4b17      	ldr	r3, [pc, #92]	; (5858 <main+0x278>)
    57fa:	4798      	blx	r3
		SerialConsoleWriteString("\r\n");
    57fc:	0030      	movs	r0, r6
    57fe:	4b16      	ldr	r3, [pc, #88]	; (5858 <main+0x278>)
    5800:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    5802:	4b3b      	ldr	r3, [pc, #236]	; (58f0 <main+0x310>)
    5804:	6a1b      	ldr	r3, [r3, #32]
		if(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
    5806:	021b      	lsls	r3, r3, #8
    5808:	d50b      	bpl.n	5822 <main+0x242>
		else if(strcmp("1",flag)==0){ 
    580a:	6879      	ldr	r1, [r7, #4]
    580c:	4839      	ldr	r0, [pc, #228]	; (58f4 <main+0x314>)
    580e:	4b3a      	ldr	r3, [pc, #232]	; (58f8 <main+0x318>)
    5810:	4798      	blx	r3
    5812:	2800      	cmp	r0, #0
    5814:	d10b      	bne.n	582e <main+0x24e>
				SerialConsoleWriteString("Update Flag was set: UPDATING FIRMWARE \r\n");
    5816:	4839      	ldr	r0, [pc, #228]	; (58fc <main+0x31c>)
    5818:	4b0f      	ldr	r3, [pc, #60]	; (5858 <main+0x278>)
    581a:	4798      	blx	r3
				update_firmware();
    581c:	4b38      	ldr	r3, [pc, #224]	; (5900 <main+0x320>)
    581e:	4798      	blx	r3
    5820:	e748      	b.n	56b4 <main+0xd4>
				SerialConsoleWriteString("Button was pressed: UPDATING FIRMWARE \r\n");
    5822:	4838      	ldr	r0, [pc, #224]	; (5904 <main+0x324>)
    5824:	4b0c      	ldr	r3, [pc, #48]	; (5858 <main+0x278>)
    5826:	4798      	blx	r3
				update_firmware();
    5828:	4b35      	ldr	r3, [pc, #212]	; (5900 <main+0x320>)
    582a:	4798      	blx	r3
    582c:	e742      	b.n	56b4 <main+0xd4>
				SerialConsoleWriteString("NO REASON TO UPDATE : JUMPING TO APPLICATION \r\n");
    582e:	4836      	ldr	r0, [pc, #216]	; (5908 <main+0x328>)
    5830:	4b09      	ldr	r3, [pc, #36]	; (5858 <main+0x278>)
    5832:	4798      	blx	r3
    5834:	e73e      	b.n	56b4 <main+0xd4>
    5836:	46c0      	nop			; (mov r8, r8)
    5838:	fffffd24 	.word	0xfffffd24
    583c:	00007644 	.word	0x00007644
    5840:	000035a9 	.word	0x000035a9
    5844:	00000115 	.word	0x00000115
    5848:	000005cd 	.word	0x000005cd
    584c:	20000009 	.word	0x20000009
    5850:	0000099d 	.word	0x0000099d
    5854:	00007374 	.word	0x00007374
    5858:	0000076d 	.word	0x0000076d
    585c:	00007390 	.word	0x00007390
    5860:	000073e0 	.word	0x000073e0
    5864:	000073f4 	.word	0x000073f4
    5868:	000009bd 	.word	0x000009bd
    586c:	000010d1 	.word	0x000010d1
    5870:	0000741c 	.word	0x0000741c
    5874:	00005ca9 	.word	0x00005ca9
    5878:	00004d75 	.word	0x00004d75
    587c:	00007448 	.word	0x00007448
    5880:	00007450 	.word	0x00007450
    5884:	00004da5 	.word	0x00004da5
    5888:	00007438 	.word	0x00007438
    588c:	00000841 	.word	0x00000841
    5890:	0000760c 	.word	0x0000760c
    5894:	00000155 	.word	0x00000155
    5898:	00000735 	.word	0x00000735
    589c:	00001421 	.word	0x00001421
    58a0:	00007628 	.word	0x00007628
    58a4:	e000ed00 	.word	0xe000ed00
    58a8:	00100004 	.word	0x00100004
    58ac:	000073b8 	.word	0x000073b8
    58b0:	0000746c 	.word	0x0000746c
    58b4:	00007490 	.word	0x00007490
    58b8:	000053e9 	.word	0x000053e9
    58bc:	000053a5 	.word	0x000053a5
    58c0:	000074a4 	.word	0x000074a4
    58c4:	000074b0 	.word	0x000074b0
    58c8:	00007658 	.word	0x00007658
    58cc:	000074c8 	.word	0x000074c8
    58d0:	000074e0 	.word	0x000074e0
    58d4:	00004f2d 	.word	0x00004f2d
    58d8:	0000750c 	.word	0x0000750c
    58dc:	0000753c 	.word	0x0000753c
    58e0:	00007560 	.word	0x00007560
    58e4:	00005fbd 	.word	0x00005fbd
    58e8:	00007564 	.word	0x00007564
    58ec:	00007674 	.word	0x00007674
    58f0:	41004480 	.word	0x41004480
    58f4:	000075ac 	.word	0x000075ac
    58f8:	00005f99 	.word	0x00005f99
    58fc:	000075b0 	.word	0x000075b0
    5900:	00005499 	.word	0x00005499
    5904:	00007580 	.word	0x00007580
    5908:	000075dc 	.word	0x000075dc

0000590c <__udivsi3>:
    590c:	2200      	movs	r2, #0
    590e:	0843      	lsrs	r3, r0, #1
    5910:	428b      	cmp	r3, r1
    5912:	d374      	bcc.n	59fe <__udivsi3+0xf2>
    5914:	0903      	lsrs	r3, r0, #4
    5916:	428b      	cmp	r3, r1
    5918:	d35f      	bcc.n	59da <__udivsi3+0xce>
    591a:	0a03      	lsrs	r3, r0, #8
    591c:	428b      	cmp	r3, r1
    591e:	d344      	bcc.n	59aa <__udivsi3+0x9e>
    5920:	0b03      	lsrs	r3, r0, #12
    5922:	428b      	cmp	r3, r1
    5924:	d328      	bcc.n	5978 <__udivsi3+0x6c>
    5926:	0c03      	lsrs	r3, r0, #16
    5928:	428b      	cmp	r3, r1
    592a:	d30d      	bcc.n	5948 <__udivsi3+0x3c>
    592c:	22ff      	movs	r2, #255	; 0xff
    592e:	0209      	lsls	r1, r1, #8
    5930:	ba12      	rev	r2, r2
    5932:	0c03      	lsrs	r3, r0, #16
    5934:	428b      	cmp	r3, r1
    5936:	d302      	bcc.n	593e <__udivsi3+0x32>
    5938:	1212      	asrs	r2, r2, #8
    593a:	0209      	lsls	r1, r1, #8
    593c:	d065      	beq.n	5a0a <__udivsi3+0xfe>
    593e:	0b03      	lsrs	r3, r0, #12
    5940:	428b      	cmp	r3, r1
    5942:	d319      	bcc.n	5978 <__udivsi3+0x6c>
    5944:	e000      	b.n	5948 <__udivsi3+0x3c>
    5946:	0a09      	lsrs	r1, r1, #8
    5948:	0bc3      	lsrs	r3, r0, #15
    594a:	428b      	cmp	r3, r1
    594c:	d301      	bcc.n	5952 <__udivsi3+0x46>
    594e:	03cb      	lsls	r3, r1, #15
    5950:	1ac0      	subs	r0, r0, r3
    5952:	4152      	adcs	r2, r2
    5954:	0b83      	lsrs	r3, r0, #14
    5956:	428b      	cmp	r3, r1
    5958:	d301      	bcc.n	595e <__udivsi3+0x52>
    595a:	038b      	lsls	r3, r1, #14
    595c:	1ac0      	subs	r0, r0, r3
    595e:	4152      	adcs	r2, r2
    5960:	0b43      	lsrs	r3, r0, #13
    5962:	428b      	cmp	r3, r1
    5964:	d301      	bcc.n	596a <__udivsi3+0x5e>
    5966:	034b      	lsls	r3, r1, #13
    5968:	1ac0      	subs	r0, r0, r3
    596a:	4152      	adcs	r2, r2
    596c:	0b03      	lsrs	r3, r0, #12
    596e:	428b      	cmp	r3, r1
    5970:	d301      	bcc.n	5976 <__udivsi3+0x6a>
    5972:	030b      	lsls	r3, r1, #12
    5974:	1ac0      	subs	r0, r0, r3
    5976:	4152      	adcs	r2, r2
    5978:	0ac3      	lsrs	r3, r0, #11
    597a:	428b      	cmp	r3, r1
    597c:	d301      	bcc.n	5982 <__udivsi3+0x76>
    597e:	02cb      	lsls	r3, r1, #11
    5980:	1ac0      	subs	r0, r0, r3
    5982:	4152      	adcs	r2, r2
    5984:	0a83      	lsrs	r3, r0, #10
    5986:	428b      	cmp	r3, r1
    5988:	d301      	bcc.n	598e <__udivsi3+0x82>
    598a:	028b      	lsls	r3, r1, #10
    598c:	1ac0      	subs	r0, r0, r3
    598e:	4152      	adcs	r2, r2
    5990:	0a43      	lsrs	r3, r0, #9
    5992:	428b      	cmp	r3, r1
    5994:	d301      	bcc.n	599a <__udivsi3+0x8e>
    5996:	024b      	lsls	r3, r1, #9
    5998:	1ac0      	subs	r0, r0, r3
    599a:	4152      	adcs	r2, r2
    599c:	0a03      	lsrs	r3, r0, #8
    599e:	428b      	cmp	r3, r1
    59a0:	d301      	bcc.n	59a6 <__udivsi3+0x9a>
    59a2:	020b      	lsls	r3, r1, #8
    59a4:	1ac0      	subs	r0, r0, r3
    59a6:	4152      	adcs	r2, r2
    59a8:	d2cd      	bcs.n	5946 <__udivsi3+0x3a>
    59aa:	09c3      	lsrs	r3, r0, #7
    59ac:	428b      	cmp	r3, r1
    59ae:	d301      	bcc.n	59b4 <__udivsi3+0xa8>
    59b0:	01cb      	lsls	r3, r1, #7
    59b2:	1ac0      	subs	r0, r0, r3
    59b4:	4152      	adcs	r2, r2
    59b6:	0983      	lsrs	r3, r0, #6
    59b8:	428b      	cmp	r3, r1
    59ba:	d301      	bcc.n	59c0 <__udivsi3+0xb4>
    59bc:	018b      	lsls	r3, r1, #6
    59be:	1ac0      	subs	r0, r0, r3
    59c0:	4152      	adcs	r2, r2
    59c2:	0943      	lsrs	r3, r0, #5
    59c4:	428b      	cmp	r3, r1
    59c6:	d301      	bcc.n	59cc <__udivsi3+0xc0>
    59c8:	014b      	lsls	r3, r1, #5
    59ca:	1ac0      	subs	r0, r0, r3
    59cc:	4152      	adcs	r2, r2
    59ce:	0903      	lsrs	r3, r0, #4
    59d0:	428b      	cmp	r3, r1
    59d2:	d301      	bcc.n	59d8 <__udivsi3+0xcc>
    59d4:	010b      	lsls	r3, r1, #4
    59d6:	1ac0      	subs	r0, r0, r3
    59d8:	4152      	adcs	r2, r2
    59da:	08c3      	lsrs	r3, r0, #3
    59dc:	428b      	cmp	r3, r1
    59de:	d301      	bcc.n	59e4 <__udivsi3+0xd8>
    59e0:	00cb      	lsls	r3, r1, #3
    59e2:	1ac0      	subs	r0, r0, r3
    59e4:	4152      	adcs	r2, r2
    59e6:	0883      	lsrs	r3, r0, #2
    59e8:	428b      	cmp	r3, r1
    59ea:	d301      	bcc.n	59f0 <__udivsi3+0xe4>
    59ec:	008b      	lsls	r3, r1, #2
    59ee:	1ac0      	subs	r0, r0, r3
    59f0:	4152      	adcs	r2, r2
    59f2:	0843      	lsrs	r3, r0, #1
    59f4:	428b      	cmp	r3, r1
    59f6:	d301      	bcc.n	59fc <__udivsi3+0xf0>
    59f8:	004b      	lsls	r3, r1, #1
    59fa:	1ac0      	subs	r0, r0, r3
    59fc:	4152      	adcs	r2, r2
    59fe:	1a41      	subs	r1, r0, r1
    5a00:	d200      	bcs.n	5a04 <__udivsi3+0xf8>
    5a02:	4601      	mov	r1, r0
    5a04:	4152      	adcs	r2, r2
    5a06:	4610      	mov	r0, r2
    5a08:	4770      	bx	lr
    5a0a:	e7ff      	b.n	5a0c <__udivsi3+0x100>
    5a0c:	b501      	push	{r0, lr}
    5a0e:	2000      	movs	r0, #0
    5a10:	f000 f8f0 	bl	5bf4 <__aeabi_idiv0>
    5a14:	bd02      	pop	{r1, pc}
    5a16:	46c0      	nop			; (mov r8, r8)

00005a18 <__aeabi_uidivmod>:
    5a18:	2900      	cmp	r1, #0
    5a1a:	d0f7      	beq.n	5a0c <__udivsi3+0x100>
    5a1c:	e776      	b.n	590c <__udivsi3>
    5a1e:	4770      	bx	lr

00005a20 <__divsi3>:
    5a20:	4603      	mov	r3, r0
    5a22:	430b      	orrs	r3, r1
    5a24:	d47f      	bmi.n	5b26 <__divsi3+0x106>
    5a26:	2200      	movs	r2, #0
    5a28:	0843      	lsrs	r3, r0, #1
    5a2a:	428b      	cmp	r3, r1
    5a2c:	d374      	bcc.n	5b18 <__divsi3+0xf8>
    5a2e:	0903      	lsrs	r3, r0, #4
    5a30:	428b      	cmp	r3, r1
    5a32:	d35f      	bcc.n	5af4 <__divsi3+0xd4>
    5a34:	0a03      	lsrs	r3, r0, #8
    5a36:	428b      	cmp	r3, r1
    5a38:	d344      	bcc.n	5ac4 <__divsi3+0xa4>
    5a3a:	0b03      	lsrs	r3, r0, #12
    5a3c:	428b      	cmp	r3, r1
    5a3e:	d328      	bcc.n	5a92 <__divsi3+0x72>
    5a40:	0c03      	lsrs	r3, r0, #16
    5a42:	428b      	cmp	r3, r1
    5a44:	d30d      	bcc.n	5a62 <__divsi3+0x42>
    5a46:	22ff      	movs	r2, #255	; 0xff
    5a48:	0209      	lsls	r1, r1, #8
    5a4a:	ba12      	rev	r2, r2
    5a4c:	0c03      	lsrs	r3, r0, #16
    5a4e:	428b      	cmp	r3, r1
    5a50:	d302      	bcc.n	5a58 <__divsi3+0x38>
    5a52:	1212      	asrs	r2, r2, #8
    5a54:	0209      	lsls	r1, r1, #8
    5a56:	d065      	beq.n	5b24 <__divsi3+0x104>
    5a58:	0b03      	lsrs	r3, r0, #12
    5a5a:	428b      	cmp	r3, r1
    5a5c:	d319      	bcc.n	5a92 <__divsi3+0x72>
    5a5e:	e000      	b.n	5a62 <__divsi3+0x42>
    5a60:	0a09      	lsrs	r1, r1, #8
    5a62:	0bc3      	lsrs	r3, r0, #15
    5a64:	428b      	cmp	r3, r1
    5a66:	d301      	bcc.n	5a6c <__divsi3+0x4c>
    5a68:	03cb      	lsls	r3, r1, #15
    5a6a:	1ac0      	subs	r0, r0, r3
    5a6c:	4152      	adcs	r2, r2
    5a6e:	0b83      	lsrs	r3, r0, #14
    5a70:	428b      	cmp	r3, r1
    5a72:	d301      	bcc.n	5a78 <__divsi3+0x58>
    5a74:	038b      	lsls	r3, r1, #14
    5a76:	1ac0      	subs	r0, r0, r3
    5a78:	4152      	adcs	r2, r2
    5a7a:	0b43      	lsrs	r3, r0, #13
    5a7c:	428b      	cmp	r3, r1
    5a7e:	d301      	bcc.n	5a84 <__divsi3+0x64>
    5a80:	034b      	lsls	r3, r1, #13
    5a82:	1ac0      	subs	r0, r0, r3
    5a84:	4152      	adcs	r2, r2
    5a86:	0b03      	lsrs	r3, r0, #12
    5a88:	428b      	cmp	r3, r1
    5a8a:	d301      	bcc.n	5a90 <__divsi3+0x70>
    5a8c:	030b      	lsls	r3, r1, #12
    5a8e:	1ac0      	subs	r0, r0, r3
    5a90:	4152      	adcs	r2, r2
    5a92:	0ac3      	lsrs	r3, r0, #11
    5a94:	428b      	cmp	r3, r1
    5a96:	d301      	bcc.n	5a9c <__divsi3+0x7c>
    5a98:	02cb      	lsls	r3, r1, #11
    5a9a:	1ac0      	subs	r0, r0, r3
    5a9c:	4152      	adcs	r2, r2
    5a9e:	0a83      	lsrs	r3, r0, #10
    5aa0:	428b      	cmp	r3, r1
    5aa2:	d301      	bcc.n	5aa8 <__divsi3+0x88>
    5aa4:	028b      	lsls	r3, r1, #10
    5aa6:	1ac0      	subs	r0, r0, r3
    5aa8:	4152      	adcs	r2, r2
    5aaa:	0a43      	lsrs	r3, r0, #9
    5aac:	428b      	cmp	r3, r1
    5aae:	d301      	bcc.n	5ab4 <__divsi3+0x94>
    5ab0:	024b      	lsls	r3, r1, #9
    5ab2:	1ac0      	subs	r0, r0, r3
    5ab4:	4152      	adcs	r2, r2
    5ab6:	0a03      	lsrs	r3, r0, #8
    5ab8:	428b      	cmp	r3, r1
    5aba:	d301      	bcc.n	5ac0 <__divsi3+0xa0>
    5abc:	020b      	lsls	r3, r1, #8
    5abe:	1ac0      	subs	r0, r0, r3
    5ac0:	4152      	adcs	r2, r2
    5ac2:	d2cd      	bcs.n	5a60 <__divsi3+0x40>
    5ac4:	09c3      	lsrs	r3, r0, #7
    5ac6:	428b      	cmp	r3, r1
    5ac8:	d301      	bcc.n	5ace <__divsi3+0xae>
    5aca:	01cb      	lsls	r3, r1, #7
    5acc:	1ac0      	subs	r0, r0, r3
    5ace:	4152      	adcs	r2, r2
    5ad0:	0983      	lsrs	r3, r0, #6
    5ad2:	428b      	cmp	r3, r1
    5ad4:	d301      	bcc.n	5ada <__divsi3+0xba>
    5ad6:	018b      	lsls	r3, r1, #6
    5ad8:	1ac0      	subs	r0, r0, r3
    5ada:	4152      	adcs	r2, r2
    5adc:	0943      	lsrs	r3, r0, #5
    5ade:	428b      	cmp	r3, r1
    5ae0:	d301      	bcc.n	5ae6 <__divsi3+0xc6>
    5ae2:	014b      	lsls	r3, r1, #5
    5ae4:	1ac0      	subs	r0, r0, r3
    5ae6:	4152      	adcs	r2, r2
    5ae8:	0903      	lsrs	r3, r0, #4
    5aea:	428b      	cmp	r3, r1
    5aec:	d301      	bcc.n	5af2 <__divsi3+0xd2>
    5aee:	010b      	lsls	r3, r1, #4
    5af0:	1ac0      	subs	r0, r0, r3
    5af2:	4152      	adcs	r2, r2
    5af4:	08c3      	lsrs	r3, r0, #3
    5af6:	428b      	cmp	r3, r1
    5af8:	d301      	bcc.n	5afe <__divsi3+0xde>
    5afa:	00cb      	lsls	r3, r1, #3
    5afc:	1ac0      	subs	r0, r0, r3
    5afe:	4152      	adcs	r2, r2
    5b00:	0883      	lsrs	r3, r0, #2
    5b02:	428b      	cmp	r3, r1
    5b04:	d301      	bcc.n	5b0a <__divsi3+0xea>
    5b06:	008b      	lsls	r3, r1, #2
    5b08:	1ac0      	subs	r0, r0, r3
    5b0a:	4152      	adcs	r2, r2
    5b0c:	0843      	lsrs	r3, r0, #1
    5b0e:	428b      	cmp	r3, r1
    5b10:	d301      	bcc.n	5b16 <__divsi3+0xf6>
    5b12:	004b      	lsls	r3, r1, #1
    5b14:	1ac0      	subs	r0, r0, r3
    5b16:	4152      	adcs	r2, r2
    5b18:	1a41      	subs	r1, r0, r1
    5b1a:	d200      	bcs.n	5b1e <__divsi3+0xfe>
    5b1c:	4601      	mov	r1, r0
    5b1e:	4152      	adcs	r2, r2
    5b20:	4610      	mov	r0, r2
    5b22:	4770      	bx	lr
    5b24:	e05d      	b.n	5be2 <__divsi3+0x1c2>
    5b26:	0fca      	lsrs	r2, r1, #31
    5b28:	d000      	beq.n	5b2c <__divsi3+0x10c>
    5b2a:	4249      	negs	r1, r1
    5b2c:	1003      	asrs	r3, r0, #32
    5b2e:	d300      	bcc.n	5b32 <__divsi3+0x112>
    5b30:	4240      	negs	r0, r0
    5b32:	4053      	eors	r3, r2
    5b34:	2200      	movs	r2, #0
    5b36:	469c      	mov	ip, r3
    5b38:	0903      	lsrs	r3, r0, #4
    5b3a:	428b      	cmp	r3, r1
    5b3c:	d32d      	bcc.n	5b9a <__divsi3+0x17a>
    5b3e:	0a03      	lsrs	r3, r0, #8
    5b40:	428b      	cmp	r3, r1
    5b42:	d312      	bcc.n	5b6a <__divsi3+0x14a>
    5b44:	22fc      	movs	r2, #252	; 0xfc
    5b46:	0189      	lsls	r1, r1, #6
    5b48:	ba12      	rev	r2, r2
    5b4a:	0a03      	lsrs	r3, r0, #8
    5b4c:	428b      	cmp	r3, r1
    5b4e:	d30c      	bcc.n	5b6a <__divsi3+0x14a>
    5b50:	0189      	lsls	r1, r1, #6
    5b52:	1192      	asrs	r2, r2, #6
    5b54:	428b      	cmp	r3, r1
    5b56:	d308      	bcc.n	5b6a <__divsi3+0x14a>
    5b58:	0189      	lsls	r1, r1, #6
    5b5a:	1192      	asrs	r2, r2, #6
    5b5c:	428b      	cmp	r3, r1
    5b5e:	d304      	bcc.n	5b6a <__divsi3+0x14a>
    5b60:	0189      	lsls	r1, r1, #6
    5b62:	d03a      	beq.n	5bda <__divsi3+0x1ba>
    5b64:	1192      	asrs	r2, r2, #6
    5b66:	e000      	b.n	5b6a <__divsi3+0x14a>
    5b68:	0989      	lsrs	r1, r1, #6
    5b6a:	09c3      	lsrs	r3, r0, #7
    5b6c:	428b      	cmp	r3, r1
    5b6e:	d301      	bcc.n	5b74 <__divsi3+0x154>
    5b70:	01cb      	lsls	r3, r1, #7
    5b72:	1ac0      	subs	r0, r0, r3
    5b74:	4152      	adcs	r2, r2
    5b76:	0983      	lsrs	r3, r0, #6
    5b78:	428b      	cmp	r3, r1
    5b7a:	d301      	bcc.n	5b80 <__divsi3+0x160>
    5b7c:	018b      	lsls	r3, r1, #6
    5b7e:	1ac0      	subs	r0, r0, r3
    5b80:	4152      	adcs	r2, r2
    5b82:	0943      	lsrs	r3, r0, #5
    5b84:	428b      	cmp	r3, r1
    5b86:	d301      	bcc.n	5b8c <__divsi3+0x16c>
    5b88:	014b      	lsls	r3, r1, #5
    5b8a:	1ac0      	subs	r0, r0, r3
    5b8c:	4152      	adcs	r2, r2
    5b8e:	0903      	lsrs	r3, r0, #4
    5b90:	428b      	cmp	r3, r1
    5b92:	d301      	bcc.n	5b98 <__divsi3+0x178>
    5b94:	010b      	lsls	r3, r1, #4
    5b96:	1ac0      	subs	r0, r0, r3
    5b98:	4152      	adcs	r2, r2
    5b9a:	08c3      	lsrs	r3, r0, #3
    5b9c:	428b      	cmp	r3, r1
    5b9e:	d301      	bcc.n	5ba4 <__divsi3+0x184>
    5ba0:	00cb      	lsls	r3, r1, #3
    5ba2:	1ac0      	subs	r0, r0, r3
    5ba4:	4152      	adcs	r2, r2
    5ba6:	0883      	lsrs	r3, r0, #2
    5ba8:	428b      	cmp	r3, r1
    5baa:	d301      	bcc.n	5bb0 <__divsi3+0x190>
    5bac:	008b      	lsls	r3, r1, #2
    5bae:	1ac0      	subs	r0, r0, r3
    5bb0:	4152      	adcs	r2, r2
    5bb2:	d2d9      	bcs.n	5b68 <__divsi3+0x148>
    5bb4:	0843      	lsrs	r3, r0, #1
    5bb6:	428b      	cmp	r3, r1
    5bb8:	d301      	bcc.n	5bbe <__divsi3+0x19e>
    5bba:	004b      	lsls	r3, r1, #1
    5bbc:	1ac0      	subs	r0, r0, r3
    5bbe:	4152      	adcs	r2, r2
    5bc0:	1a41      	subs	r1, r0, r1
    5bc2:	d200      	bcs.n	5bc6 <__divsi3+0x1a6>
    5bc4:	4601      	mov	r1, r0
    5bc6:	4663      	mov	r3, ip
    5bc8:	4152      	adcs	r2, r2
    5bca:	105b      	asrs	r3, r3, #1
    5bcc:	4610      	mov	r0, r2
    5bce:	d301      	bcc.n	5bd4 <__divsi3+0x1b4>
    5bd0:	4240      	negs	r0, r0
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d500      	bpl.n	5bd8 <__divsi3+0x1b8>
    5bd6:	4249      	negs	r1, r1
    5bd8:	4770      	bx	lr
    5bda:	4663      	mov	r3, ip
    5bdc:	105b      	asrs	r3, r3, #1
    5bde:	d300      	bcc.n	5be2 <__divsi3+0x1c2>
    5be0:	4240      	negs	r0, r0
    5be2:	b501      	push	{r0, lr}
    5be4:	2000      	movs	r0, #0
    5be6:	f000 f805 	bl	5bf4 <__aeabi_idiv0>
    5bea:	bd02      	pop	{r1, pc}

00005bec <__aeabi_idivmod>:
    5bec:	2900      	cmp	r1, #0
    5bee:	d0f8      	beq.n	5be2 <__divsi3+0x1c2>
    5bf0:	e716      	b.n	5a20 <__divsi3>
    5bf2:	4770      	bx	lr

00005bf4 <__aeabi_idiv0>:
    5bf4:	4770      	bx	lr
    5bf6:	46c0      	nop			; (mov r8, r8)

00005bf8 <__aeabi_lmul>:
    5bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bfa:	46ce      	mov	lr, r9
    5bfc:	4647      	mov	r7, r8
    5bfe:	0415      	lsls	r5, r2, #16
    5c00:	0c2d      	lsrs	r5, r5, #16
    5c02:	002e      	movs	r6, r5
    5c04:	b580      	push	{r7, lr}
    5c06:	0407      	lsls	r7, r0, #16
    5c08:	0c14      	lsrs	r4, r2, #16
    5c0a:	0c3f      	lsrs	r7, r7, #16
    5c0c:	4699      	mov	r9, r3
    5c0e:	0c03      	lsrs	r3, r0, #16
    5c10:	437e      	muls	r6, r7
    5c12:	435d      	muls	r5, r3
    5c14:	4367      	muls	r7, r4
    5c16:	4363      	muls	r3, r4
    5c18:	197f      	adds	r7, r7, r5
    5c1a:	0c34      	lsrs	r4, r6, #16
    5c1c:	19e4      	adds	r4, r4, r7
    5c1e:	469c      	mov	ip, r3
    5c20:	42a5      	cmp	r5, r4
    5c22:	d903      	bls.n	5c2c <__aeabi_lmul+0x34>
    5c24:	2380      	movs	r3, #128	; 0x80
    5c26:	025b      	lsls	r3, r3, #9
    5c28:	4698      	mov	r8, r3
    5c2a:	44c4      	add	ip, r8
    5c2c:	464b      	mov	r3, r9
    5c2e:	4351      	muls	r1, r2
    5c30:	4343      	muls	r3, r0
    5c32:	0436      	lsls	r6, r6, #16
    5c34:	0c36      	lsrs	r6, r6, #16
    5c36:	0c25      	lsrs	r5, r4, #16
    5c38:	0424      	lsls	r4, r4, #16
    5c3a:	4465      	add	r5, ip
    5c3c:	19a4      	adds	r4, r4, r6
    5c3e:	1859      	adds	r1, r3, r1
    5c40:	1949      	adds	r1, r1, r5
    5c42:	0020      	movs	r0, r4
    5c44:	bc0c      	pop	{r2, r3}
    5c46:	4690      	mov	r8, r2
    5c48:	4699      	mov	r9, r3
    5c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c4c <__libc_init_array>:
    5c4c:	b570      	push	{r4, r5, r6, lr}
    5c4e:	2600      	movs	r6, #0
    5c50:	4d0c      	ldr	r5, [pc, #48]	; (5c84 <__libc_init_array+0x38>)
    5c52:	4c0d      	ldr	r4, [pc, #52]	; (5c88 <__libc_init_array+0x3c>)
    5c54:	1b64      	subs	r4, r4, r5
    5c56:	10a4      	asrs	r4, r4, #2
    5c58:	42a6      	cmp	r6, r4
    5c5a:	d109      	bne.n	5c70 <__libc_init_array+0x24>
    5c5c:	2600      	movs	r6, #0
    5c5e:	f001 fdff 	bl	7860 <_init>
    5c62:	4d0a      	ldr	r5, [pc, #40]	; (5c8c <__libc_init_array+0x40>)
    5c64:	4c0a      	ldr	r4, [pc, #40]	; (5c90 <__libc_init_array+0x44>)
    5c66:	1b64      	subs	r4, r4, r5
    5c68:	10a4      	asrs	r4, r4, #2
    5c6a:	42a6      	cmp	r6, r4
    5c6c:	d105      	bne.n	5c7a <__libc_init_array+0x2e>
    5c6e:	bd70      	pop	{r4, r5, r6, pc}
    5c70:	00b3      	lsls	r3, r6, #2
    5c72:	58eb      	ldr	r3, [r5, r3]
    5c74:	4798      	blx	r3
    5c76:	3601      	adds	r6, #1
    5c78:	e7ee      	b.n	5c58 <__libc_init_array+0xc>
    5c7a:	00b3      	lsls	r3, r6, #2
    5c7c:	58eb      	ldr	r3, [r5, r3]
    5c7e:	4798      	blx	r3
    5c80:	3601      	adds	r6, #1
    5c82:	e7f2      	b.n	5c6a <__libc_init_array+0x1e>
    5c84:	0000786c 	.word	0x0000786c
    5c88:	0000786c 	.word	0x0000786c
    5c8c:	0000786c 	.word	0x0000786c
    5c90:	00007870 	.word	0x00007870

00005c94 <malloc>:
    5c94:	b510      	push	{r4, lr}
    5c96:	4b03      	ldr	r3, [pc, #12]	; (5ca4 <malloc+0x10>)
    5c98:	0001      	movs	r1, r0
    5c9a:	6818      	ldr	r0, [r3, #0]
    5c9c:	f000 f856 	bl	5d4c <_malloc_r>
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	2000000c 	.word	0x2000000c

00005ca8 <memset>:
    5ca8:	0003      	movs	r3, r0
    5caa:	1882      	adds	r2, r0, r2
    5cac:	4293      	cmp	r3, r2
    5cae:	d100      	bne.n	5cb2 <memset+0xa>
    5cb0:	4770      	bx	lr
    5cb2:	7019      	strb	r1, [r3, #0]
    5cb4:	3301      	adds	r3, #1
    5cb6:	e7f9      	b.n	5cac <memset+0x4>

00005cb8 <_free_r>:
    5cb8:	b570      	push	{r4, r5, r6, lr}
    5cba:	0005      	movs	r5, r0
    5cbc:	2900      	cmp	r1, #0
    5cbe:	d010      	beq.n	5ce2 <_free_r+0x2a>
    5cc0:	1f0c      	subs	r4, r1, #4
    5cc2:	6823      	ldr	r3, [r4, #0]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	da00      	bge.n	5cca <_free_r+0x12>
    5cc8:	18e4      	adds	r4, r4, r3
    5cca:	0028      	movs	r0, r5
    5ccc:	f000 fba6 	bl	641c <__malloc_lock>
    5cd0:	4a1d      	ldr	r2, [pc, #116]	; (5d48 <_free_r+0x90>)
    5cd2:	6813      	ldr	r3, [r2, #0]
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d105      	bne.n	5ce4 <_free_r+0x2c>
    5cd8:	6063      	str	r3, [r4, #4]
    5cda:	6014      	str	r4, [r2, #0]
    5cdc:	0028      	movs	r0, r5
    5cde:	f000 fb9e 	bl	641e <__malloc_unlock>
    5ce2:	bd70      	pop	{r4, r5, r6, pc}
    5ce4:	42a3      	cmp	r3, r4
    5ce6:	d909      	bls.n	5cfc <_free_r+0x44>
    5ce8:	6821      	ldr	r1, [r4, #0]
    5cea:	1860      	adds	r0, r4, r1
    5cec:	4283      	cmp	r3, r0
    5cee:	d1f3      	bne.n	5cd8 <_free_r+0x20>
    5cf0:	6818      	ldr	r0, [r3, #0]
    5cf2:	685b      	ldr	r3, [r3, #4]
    5cf4:	1841      	adds	r1, r0, r1
    5cf6:	6021      	str	r1, [r4, #0]
    5cf8:	e7ee      	b.n	5cd8 <_free_r+0x20>
    5cfa:	0013      	movs	r3, r2
    5cfc:	685a      	ldr	r2, [r3, #4]
    5cfe:	2a00      	cmp	r2, #0
    5d00:	d001      	beq.n	5d06 <_free_r+0x4e>
    5d02:	42a2      	cmp	r2, r4
    5d04:	d9f9      	bls.n	5cfa <_free_r+0x42>
    5d06:	6819      	ldr	r1, [r3, #0]
    5d08:	1858      	adds	r0, r3, r1
    5d0a:	42a0      	cmp	r0, r4
    5d0c:	d10b      	bne.n	5d26 <_free_r+0x6e>
    5d0e:	6820      	ldr	r0, [r4, #0]
    5d10:	1809      	adds	r1, r1, r0
    5d12:	1858      	adds	r0, r3, r1
    5d14:	6019      	str	r1, [r3, #0]
    5d16:	4282      	cmp	r2, r0
    5d18:	d1e0      	bne.n	5cdc <_free_r+0x24>
    5d1a:	6810      	ldr	r0, [r2, #0]
    5d1c:	6852      	ldr	r2, [r2, #4]
    5d1e:	1841      	adds	r1, r0, r1
    5d20:	6019      	str	r1, [r3, #0]
    5d22:	605a      	str	r2, [r3, #4]
    5d24:	e7da      	b.n	5cdc <_free_r+0x24>
    5d26:	42a0      	cmp	r0, r4
    5d28:	d902      	bls.n	5d30 <_free_r+0x78>
    5d2a:	230c      	movs	r3, #12
    5d2c:	602b      	str	r3, [r5, #0]
    5d2e:	e7d5      	b.n	5cdc <_free_r+0x24>
    5d30:	6821      	ldr	r1, [r4, #0]
    5d32:	1860      	adds	r0, r4, r1
    5d34:	4282      	cmp	r2, r0
    5d36:	d103      	bne.n	5d40 <_free_r+0x88>
    5d38:	6810      	ldr	r0, [r2, #0]
    5d3a:	6852      	ldr	r2, [r2, #4]
    5d3c:	1841      	adds	r1, r0, r1
    5d3e:	6021      	str	r1, [r4, #0]
    5d40:	6062      	str	r2, [r4, #4]
    5d42:	605c      	str	r4, [r3, #4]
    5d44:	e7ca      	b.n	5cdc <_free_r+0x24>
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	2000017c 	.word	0x2000017c

00005d4c <_malloc_r>:
    5d4c:	2303      	movs	r3, #3
    5d4e:	b570      	push	{r4, r5, r6, lr}
    5d50:	1ccd      	adds	r5, r1, #3
    5d52:	439d      	bics	r5, r3
    5d54:	3508      	adds	r5, #8
    5d56:	0006      	movs	r6, r0
    5d58:	2d0c      	cmp	r5, #12
    5d5a:	d21e      	bcs.n	5d9a <_malloc_r+0x4e>
    5d5c:	250c      	movs	r5, #12
    5d5e:	42a9      	cmp	r1, r5
    5d60:	d81d      	bhi.n	5d9e <_malloc_r+0x52>
    5d62:	0030      	movs	r0, r6
    5d64:	f000 fb5a 	bl	641c <__malloc_lock>
    5d68:	4a25      	ldr	r2, [pc, #148]	; (5e00 <_malloc_r+0xb4>)
    5d6a:	6814      	ldr	r4, [r2, #0]
    5d6c:	0021      	movs	r1, r4
    5d6e:	2900      	cmp	r1, #0
    5d70:	d119      	bne.n	5da6 <_malloc_r+0x5a>
    5d72:	4c24      	ldr	r4, [pc, #144]	; (5e04 <_malloc_r+0xb8>)
    5d74:	6823      	ldr	r3, [r4, #0]
    5d76:	2b00      	cmp	r3, #0
    5d78:	d103      	bne.n	5d82 <_malloc_r+0x36>
    5d7a:	0030      	movs	r0, r6
    5d7c:	f000 f844 	bl	5e08 <_sbrk_r>
    5d80:	6020      	str	r0, [r4, #0]
    5d82:	0029      	movs	r1, r5
    5d84:	0030      	movs	r0, r6
    5d86:	f000 f83f 	bl	5e08 <_sbrk_r>
    5d8a:	1c43      	adds	r3, r0, #1
    5d8c:	d12c      	bne.n	5de8 <_malloc_r+0x9c>
    5d8e:	230c      	movs	r3, #12
    5d90:	0030      	movs	r0, r6
    5d92:	6033      	str	r3, [r6, #0]
    5d94:	f000 fb43 	bl	641e <__malloc_unlock>
    5d98:	e003      	b.n	5da2 <_malloc_r+0x56>
    5d9a:	2d00      	cmp	r5, #0
    5d9c:	dadf      	bge.n	5d5e <_malloc_r+0x12>
    5d9e:	230c      	movs	r3, #12
    5da0:	6033      	str	r3, [r6, #0]
    5da2:	2000      	movs	r0, #0
    5da4:	bd70      	pop	{r4, r5, r6, pc}
    5da6:	680b      	ldr	r3, [r1, #0]
    5da8:	1b5b      	subs	r3, r3, r5
    5daa:	d41a      	bmi.n	5de2 <_malloc_r+0x96>
    5dac:	2b0b      	cmp	r3, #11
    5dae:	d903      	bls.n	5db8 <_malloc_r+0x6c>
    5db0:	600b      	str	r3, [r1, #0]
    5db2:	18cc      	adds	r4, r1, r3
    5db4:	6025      	str	r5, [r4, #0]
    5db6:	e003      	b.n	5dc0 <_malloc_r+0x74>
    5db8:	428c      	cmp	r4, r1
    5dba:	d10e      	bne.n	5dda <_malloc_r+0x8e>
    5dbc:	6863      	ldr	r3, [r4, #4]
    5dbe:	6013      	str	r3, [r2, #0]
    5dc0:	0030      	movs	r0, r6
    5dc2:	f000 fb2c 	bl	641e <__malloc_unlock>
    5dc6:	0020      	movs	r0, r4
    5dc8:	2207      	movs	r2, #7
    5dca:	300b      	adds	r0, #11
    5dcc:	1d23      	adds	r3, r4, #4
    5dce:	4390      	bics	r0, r2
    5dd0:	1ac3      	subs	r3, r0, r3
    5dd2:	d0e7      	beq.n	5da4 <_malloc_r+0x58>
    5dd4:	425a      	negs	r2, r3
    5dd6:	50e2      	str	r2, [r4, r3]
    5dd8:	e7e4      	b.n	5da4 <_malloc_r+0x58>
    5dda:	684b      	ldr	r3, [r1, #4]
    5ddc:	6063      	str	r3, [r4, #4]
    5dde:	000c      	movs	r4, r1
    5de0:	e7ee      	b.n	5dc0 <_malloc_r+0x74>
    5de2:	000c      	movs	r4, r1
    5de4:	6849      	ldr	r1, [r1, #4]
    5de6:	e7c2      	b.n	5d6e <_malloc_r+0x22>
    5de8:	2303      	movs	r3, #3
    5dea:	1cc4      	adds	r4, r0, #3
    5dec:	439c      	bics	r4, r3
    5dee:	42a0      	cmp	r0, r4
    5df0:	d0e0      	beq.n	5db4 <_malloc_r+0x68>
    5df2:	1a21      	subs	r1, r4, r0
    5df4:	0030      	movs	r0, r6
    5df6:	f000 f807 	bl	5e08 <_sbrk_r>
    5dfa:	1c43      	adds	r3, r0, #1
    5dfc:	d1da      	bne.n	5db4 <_malloc_r+0x68>
    5dfe:	e7c6      	b.n	5d8e <_malloc_r+0x42>
    5e00:	2000017c 	.word	0x2000017c
    5e04:	20000180 	.word	0x20000180

00005e08 <_sbrk_r>:
    5e08:	2300      	movs	r3, #0
    5e0a:	b570      	push	{r4, r5, r6, lr}
    5e0c:	4c06      	ldr	r4, [pc, #24]	; (5e28 <_sbrk_r+0x20>)
    5e0e:	0005      	movs	r5, r0
    5e10:	0008      	movs	r0, r1
    5e12:	6023      	str	r3, [r4, #0]
    5e14:	f7fd fc9c 	bl	3750 <_sbrk>
    5e18:	1c43      	adds	r3, r0, #1
    5e1a:	d103      	bne.n	5e24 <_sbrk_r+0x1c>
    5e1c:	6823      	ldr	r3, [r4, #0]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d000      	beq.n	5e24 <_sbrk_r+0x1c>
    5e22:	602b      	str	r3, [r5, #0]
    5e24:	bd70      	pop	{r4, r5, r6, pc}
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	200009fc 	.word	0x200009fc

00005e2c <setbuf>:
    5e2c:	424a      	negs	r2, r1
    5e2e:	414a      	adcs	r2, r1
    5e30:	2380      	movs	r3, #128	; 0x80
    5e32:	b510      	push	{r4, lr}
    5e34:	0052      	lsls	r2, r2, #1
    5e36:	00db      	lsls	r3, r3, #3
    5e38:	f000 f802 	bl	5e40 <setvbuf>
    5e3c:	bd10      	pop	{r4, pc}
	...

00005e40 <setvbuf>:
    5e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e42:	001d      	movs	r5, r3
    5e44:	4b4f      	ldr	r3, [pc, #316]	; (5f84 <setvbuf+0x144>)
    5e46:	b085      	sub	sp, #20
    5e48:	681e      	ldr	r6, [r3, #0]
    5e4a:	0004      	movs	r4, r0
    5e4c:	000f      	movs	r7, r1
    5e4e:	9200      	str	r2, [sp, #0]
    5e50:	2e00      	cmp	r6, #0
    5e52:	d005      	beq.n	5e60 <setvbuf+0x20>
    5e54:	69b3      	ldr	r3, [r6, #24]
    5e56:	2b00      	cmp	r3, #0
    5e58:	d102      	bne.n	5e60 <setvbuf+0x20>
    5e5a:	0030      	movs	r0, r6
    5e5c:	f000 fa20 	bl	62a0 <__sinit>
    5e60:	4b49      	ldr	r3, [pc, #292]	; (5f88 <setvbuf+0x148>)
    5e62:	429c      	cmp	r4, r3
    5e64:	d150      	bne.n	5f08 <setvbuf+0xc8>
    5e66:	6874      	ldr	r4, [r6, #4]
    5e68:	9b00      	ldr	r3, [sp, #0]
    5e6a:	2b02      	cmp	r3, #2
    5e6c:	d005      	beq.n	5e7a <setvbuf+0x3a>
    5e6e:	2b01      	cmp	r3, #1
    5e70:	d900      	bls.n	5e74 <setvbuf+0x34>
    5e72:	e084      	b.n	5f7e <setvbuf+0x13e>
    5e74:	2d00      	cmp	r5, #0
    5e76:	da00      	bge.n	5e7a <setvbuf+0x3a>
    5e78:	e081      	b.n	5f7e <setvbuf+0x13e>
    5e7a:	0021      	movs	r1, r4
    5e7c:	0030      	movs	r0, r6
    5e7e:	f000 f9a1 	bl	61c4 <_fflush_r>
    5e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5e84:	2900      	cmp	r1, #0
    5e86:	d008      	beq.n	5e9a <setvbuf+0x5a>
    5e88:	0023      	movs	r3, r4
    5e8a:	3344      	adds	r3, #68	; 0x44
    5e8c:	4299      	cmp	r1, r3
    5e8e:	d002      	beq.n	5e96 <setvbuf+0x56>
    5e90:	0030      	movs	r0, r6
    5e92:	f7ff ff11 	bl	5cb8 <_free_r>
    5e96:	2300      	movs	r3, #0
    5e98:	6363      	str	r3, [r4, #52]	; 0x34
    5e9a:	2300      	movs	r3, #0
    5e9c:	61a3      	str	r3, [r4, #24]
    5e9e:	6063      	str	r3, [r4, #4]
    5ea0:	89a3      	ldrh	r3, [r4, #12]
    5ea2:	061b      	lsls	r3, r3, #24
    5ea4:	d503      	bpl.n	5eae <setvbuf+0x6e>
    5ea6:	6921      	ldr	r1, [r4, #16]
    5ea8:	0030      	movs	r0, r6
    5eaa:	f7ff ff05 	bl	5cb8 <_free_r>
    5eae:	89a3      	ldrh	r3, [r4, #12]
    5eb0:	4a36      	ldr	r2, [pc, #216]	; (5f8c <setvbuf+0x14c>)
    5eb2:	4013      	ands	r3, r2
    5eb4:	81a3      	strh	r3, [r4, #12]
    5eb6:	9b00      	ldr	r3, [sp, #0]
    5eb8:	2b02      	cmp	r3, #2
    5eba:	d05a      	beq.n	5f72 <setvbuf+0x132>
    5ebc:	ab03      	add	r3, sp, #12
    5ebe:	aa02      	add	r2, sp, #8
    5ec0:	0021      	movs	r1, r4
    5ec2:	0030      	movs	r0, r6
    5ec4:	f000 fa82 	bl	63cc <__swhatbuf_r>
    5ec8:	89a3      	ldrh	r3, [r4, #12]
    5eca:	4318      	orrs	r0, r3
    5ecc:	81a0      	strh	r0, [r4, #12]
    5ece:	2d00      	cmp	r5, #0
    5ed0:	d124      	bne.n	5f1c <setvbuf+0xdc>
    5ed2:	9d02      	ldr	r5, [sp, #8]
    5ed4:	0028      	movs	r0, r5
    5ed6:	f7ff fedd 	bl	5c94 <malloc>
    5eda:	9501      	str	r5, [sp, #4]
    5edc:	1e07      	subs	r7, r0, #0
    5ede:	d142      	bne.n	5f66 <setvbuf+0x126>
    5ee0:	9b02      	ldr	r3, [sp, #8]
    5ee2:	9301      	str	r3, [sp, #4]
    5ee4:	42ab      	cmp	r3, r5
    5ee6:	d139      	bne.n	5f5c <setvbuf+0x11c>
    5ee8:	2001      	movs	r0, #1
    5eea:	4240      	negs	r0, r0
    5eec:	2302      	movs	r3, #2
    5eee:	89a2      	ldrh	r2, [r4, #12]
    5ef0:	4313      	orrs	r3, r2
    5ef2:	81a3      	strh	r3, [r4, #12]
    5ef4:	2300      	movs	r3, #0
    5ef6:	60a3      	str	r3, [r4, #8]
    5ef8:	0023      	movs	r3, r4
    5efa:	3347      	adds	r3, #71	; 0x47
    5efc:	6023      	str	r3, [r4, #0]
    5efe:	6123      	str	r3, [r4, #16]
    5f00:	2301      	movs	r3, #1
    5f02:	6163      	str	r3, [r4, #20]
    5f04:	b005      	add	sp, #20
    5f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f08:	4b21      	ldr	r3, [pc, #132]	; (5f90 <setvbuf+0x150>)
    5f0a:	429c      	cmp	r4, r3
    5f0c:	d101      	bne.n	5f12 <setvbuf+0xd2>
    5f0e:	68b4      	ldr	r4, [r6, #8]
    5f10:	e7aa      	b.n	5e68 <setvbuf+0x28>
    5f12:	4b20      	ldr	r3, [pc, #128]	; (5f94 <setvbuf+0x154>)
    5f14:	429c      	cmp	r4, r3
    5f16:	d1a7      	bne.n	5e68 <setvbuf+0x28>
    5f18:	68f4      	ldr	r4, [r6, #12]
    5f1a:	e7a5      	b.n	5e68 <setvbuf+0x28>
    5f1c:	2f00      	cmp	r7, #0
    5f1e:	d0d9      	beq.n	5ed4 <setvbuf+0x94>
    5f20:	69b3      	ldr	r3, [r6, #24]
    5f22:	2b00      	cmp	r3, #0
    5f24:	d102      	bne.n	5f2c <setvbuf+0xec>
    5f26:	0030      	movs	r0, r6
    5f28:	f000 f9ba 	bl	62a0 <__sinit>
    5f2c:	9b00      	ldr	r3, [sp, #0]
    5f2e:	2b01      	cmp	r3, #1
    5f30:	d103      	bne.n	5f3a <setvbuf+0xfa>
    5f32:	89a3      	ldrh	r3, [r4, #12]
    5f34:	9a00      	ldr	r2, [sp, #0]
    5f36:	431a      	orrs	r2, r3
    5f38:	81a2      	strh	r2, [r4, #12]
    5f3a:	2008      	movs	r0, #8
    5f3c:	89a3      	ldrh	r3, [r4, #12]
    5f3e:	6027      	str	r7, [r4, #0]
    5f40:	6127      	str	r7, [r4, #16]
    5f42:	6165      	str	r5, [r4, #20]
    5f44:	4018      	ands	r0, r3
    5f46:	d018      	beq.n	5f7a <setvbuf+0x13a>
    5f48:	2001      	movs	r0, #1
    5f4a:	4018      	ands	r0, r3
    5f4c:	2300      	movs	r3, #0
    5f4e:	4298      	cmp	r0, r3
    5f50:	d011      	beq.n	5f76 <setvbuf+0x136>
    5f52:	426d      	negs	r5, r5
    5f54:	60a3      	str	r3, [r4, #8]
    5f56:	61a5      	str	r5, [r4, #24]
    5f58:	0018      	movs	r0, r3
    5f5a:	e7d3      	b.n	5f04 <setvbuf+0xc4>
    5f5c:	9801      	ldr	r0, [sp, #4]
    5f5e:	f7ff fe99 	bl	5c94 <malloc>
    5f62:	1e07      	subs	r7, r0, #0
    5f64:	d0c0      	beq.n	5ee8 <setvbuf+0xa8>
    5f66:	2380      	movs	r3, #128	; 0x80
    5f68:	89a2      	ldrh	r2, [r4, #12]
    5f6a:	9d01      	ldr	r5, [sp, #4]
    5f6c:	4313      	orrs	r3, r2
    5f6e:	81a3      	strh	r3, [r4, #12]
    5f70:	e7d6      	b.n	5f20 <setvbuf+0xe0>
    5f72:	2000      	movs	r0, #0
    5f74:	e7ba      	b.n	5eec <setvbuf+0xac>
    5f76:	60a5      	str	r5, [r4, #8]
    5f78:	e7c4      	b.n	5f04 <setvbuf+0xc4>
    5f7a:	60a0      	str	r0, [r4, #8]
    5f7c:	e7c2      	b.n	5f04 <setvbuf+0xc4>
    5f7e:	2001      	movs	r0, #1
    5f80:	4240      	negs	r0, r0
    5f82:	e7bf      	b.n	5f04 <setvbuf+0xc4>
    5f84:	2000000c 	.word	0x2000000c
    5f88:	000077ec 	.word	0x000077ec
    5f8c:	fffff35c 	.word	0xfffff35c
    5f90:	0000780c 	.word	0x0000780c
    5f94:	000077cc 	.word	0x000077cc

00005f98 <strcmp>:
    5f98:	7802      	ldrb	r2, [r0, #0]
    5f9a:	780b      	ldrb	r3, [r1, #0]
    5f9c:	2a00      	cmp	r2, #0
    5f9e:	d003      	beq.n	5fa8 <strcmp+0x10>
    5fa0:	3001      	adds	r0, #1
    5fa2:	3101      	adds	r1, #1
    5fa4:	429a      	cmp	r2, r3
    5fa6:	d0f7      	beq.n	5f98 <strcmp>
    5fa8:	1ad0      	subs	r0, r2, r3
    5faa:	4770      	bx	lr

00005fac <strlen>:
    5fac:	2300      	movs	r3, #0
    5fae:	5cc2      	ldrb	r2, [r0, r3]
    5fb0:	3301      	adds	r3, #1
    5fb2:	2a00      	cmp	r2, #0
    5fb4:	d1fb      	bne.n	5fae <strlen+0x2>
    5fb6:	1e58      	subs	r0, r3, #1
    5fb8:	4770      	bx	lr
	...

00005fbc <strtok>:
    5fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fbe:	4b12      	ldr	r3, [pc, #72]	; (6008 <strtok+0x4c>)
    5fc0:	0006      	movs	r6, r0
    5fc2:	681d      	ldr	r5, [r3, #0]
    5fc4:	000f      	movs	r7, r1
    5fc6:	6dac      	ldr	r4, [r5, #88]	; 0x58
    5fc8:	2c00      	cmp	r4, #0
    5fca:	d116      	bne.n	5ffa <strtok+0x3e>
    5fcc:	2050      	movs	r0, #80	; 0x50
    5fce:	f7ff fe61 	bl	5c94 <malloc>
    5fd2:	65a8      	str	r0, [r5, #88]	; 0x58
    5fd4:	6004      	str	r4, [r0, #0]
    5fd6:	6044      	str	r4, [r0, #4]
    5fd8:	6084      	str	r4, [r0, #8]
    5fda:	60c4      	str	r4, [r0, #12]
    5fdc:	6104      	str	r4, [r0, #16]
    5fde:	6144      	str	r4, [r0, #20]
    5fe0:	6184      	str	r4, [r0, #24]
    5fe2:	6284      	str	r4, [r0, #40]	; 0x28
    5fe4:	62c4      	str	r4, [r0, #44]	; 0x2c
    5fe6:	6304      	str	r4, [r0, #48]	; 0x30
    5fe8:	6344      	str	r4, [r0, #52]	; 0x34
    5fea:	6384      	str	r4, [r0, #56]	; 0x38
    5fec:	63c4      	str	r4, [r0, #60]	; 0x3c
    5fee:	6404      	str	r4, [r0, #64]	; 0x40
    5ff0:	6444      	str	r4, [r0, #68]	; 0x44
    5ff2:	6484      	str	r4, [r0, #72]	; 0x48
    5ff4:	64c4      	str	r4, [r0, #76]	; 0x4c
    5ff6:	7704      	strb	r4, [r0, #28]
    5ff8:	6244      	str	r4, [r0, #36]	; 0x24
    5ffa:	6daa      	ldr	r2, [r5, #88]	; 0x58
    5ffc:	0039      	movs	r1, r7
    5ffe:	0030      	movs	r0, r6
    6000:	2301      	movs	r3, #1
    6002:	f000 f803 	bl	600c <__strtok_r>
    6006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6008:	2000000c 	.word	0x2000000c

0000600c <__strtok_r>:
    600c:	b5f0      	push	{r4, r5, r6, r7, lr}
    600e:	2800      	cmp	r0, #0
    6010:	d104      	bne.n	601c <__strtok_r+0x10>
    6012:	6810      	ldr	r0, [r2, #0]
    6014:	2800      	cmp	r0, #0
    6016:	d101      	bne.n	601c <__strtok_r+0x10>
    6018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    601a:	0020      	movs	r0, r4
    601c:	000e      	movs	r6, r1
    601e:	7805      	ldrb	r5, [r0, #0]
    6020:	1c44      	adds	r4, r0, #1
    6022:	7837      	ldrb	r7, [r6, #0]
    6024:	2f00      	cmp	r7, #0
    6026:	d104      	bne.n	6032 <__strtok_r+0x26>
    6028:	2d00      	cmp	r5, #0
    602a:	d110      	bne.n	604e <__strtok_r+0x42>
    602c:	6015      	str	r5, [r2, #0]
    602e:	0028      	movs	r0, r5
    6030:	e7f2      	b.n	6018 <__strtok_r+0xc>
    6032:	3601      	adds	r6, #1
    6034:	42bd      	cmp	r5, r7
    6036:	d1f4      	bne.n	6022 <__strtok_r+0x16>
    6038:	2b00      	cmp	r3, #0
    603a:	d1ee      	bne.n	601a <__strtok_r+0xe>
    603c:	6014      	str	r4, [r2, #0]
    603e:	7003      	strb	r3, [r0, #0]
    6040:	e7ea      	b.n	6018 <__strtok_r+0xc>
    6042:	0033      	movs	r3, r6
    6044:	e00e      	b.n	6064 <__strtok_r+0x58>
    6046:	3501      	adds	r5, #1
    6048:	001c      	movs	r4, r3
    604a:	2f00      	cmp	r7, #0
    604c:	d102      	bne.n	6054 <__strtok_r+0x48>
    604e:	000d      	movs	r5, r1
    6050:	7826      	ldrb	r6, [r4, #0]
    6052:	1c63      	adds	r3, r4, #1
    6054:	782f      	ldrb	r7, [r5, #0]
    6056:	42be      	cmp	r6, r7
    6058:	d1f5      	bne.n	6046 <__strtok_r+0x3a>
    605a:	2e00      	cmp	r6, #0
    605c:	d0f1      	beq.n	6042 <__strtok_r+0x36>
    605e:	2400      	movs	r4, #0
    6060:	1e59      	subs	r1, r3, #1
    6062:	700c      	strb	r4, [r1, #0]
    6064:	6013      	str	r3, [r2, #0]
    6066:	e7d7      	b.n	6018 <__strtok_r+0xc>

00006068 <_vsiprintf_r>:
    6068:	b530      	push	{r4, r5, lr}
    606a:	b09b      	sub	sp, #108	; 0x6c
    606c:	9100      	str	r1, [sp, #0]
    606e:	9104      	str	r1, [sp, #16]
    6070:	4908      	ldr	r1, [pc, #32]	; (6094 <_vsiprintf_r+0x2c>)
    6072:	466d      	mov	r5, sp
    6074:	9102      	str	r1, [sp, #8]
    6076:	9105      	str	r1, [sp, #20]
    6078:	2101      	movs	r1, #1
    607a:	2482      	movs	r4, #130	; 0x82
    607c:	4249      	negs	r1, r1
    607e:	81e9      	strh	r1, [r5, #14]
    6080:	00a4      	lsls	r4, r4, #2
    6082:	4669      	mov	r1, sp
    6084:	81ac      	strh	r4, [r5, #12]
    6086:	f000 fa2d 	bl	64e4 <_svfiprintf_r>
    608a:	2300      	movs	r3, #0
    608c:	9a00      	ldr	r2, [sp, #0]
    608e:	7013      	strb	r3, [r2, #0]
    6090:	b01b      	add	sp, #108	; 0x6c
    6092:	bd30      	pop	{r4, r5, pc}
    6094:	7fffffff 	.word	0x7fffffff

00006098 <vsiprintf>:
    6098:	b510      	push	{r4, lr}
    609a:	0013      	movs	r3, r2
    609c:	000a      	movs	r2, r1
    609e:	0001      	movs	r1, r0
    60a0:	4802      	ldr	r0, [pc, #8]	; (60ac <vsiprintf+0x14>)
    60a2:	6800      	ldr	r0, [r0, #0]
    60a4:	f7ff ffe0 	bl	6068 <_vsiprintf_r>
    60a8:	bd10      	pop	{r4, pc}
    60aa:	46c0      	nop			; (mov r8, r8)
    60ac:	2000000c 	.word	0x2000000c

000060b0 <__sflush_r>:
    60b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60b2:	898a      	ldrh	r2, [r1, #12]
    60b4:	0005      	movs	r5, r0
    60b6:	000c      	movs	r4, r1
    60b8:	0713      	lsls	r3, r2, #28
    60ba:	d460      	bmi.n	617e <__sflush_r+0xce>
    60bc:	684b      	ldr	r3, [r1, #4]
    60be:	2b00      	cmp	r3, #0
    60c0:	dc04      	bgt.n	60cc <__sflush_r+0x1c>
    60c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    60c4:	2b00      	cmp	r3, #0
    60c6:	dc01      	bgt.n	60cc <__sflush_r+0x1c>
    60c8:	2000      	movs	r0, #0
    60ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    60cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    60ce:	2f00      	cmp	r7, #0
    60d0:	d0fa      	beq.n	60c8 <__sflush_r+0x18>
    60d2:	2300      	movs	r3, #0
    60d4:	682e      	ldr	r6, [r5, #0]
    60d6:	602b      	str	r3, [r5, #0]
    60d8:	2380      	movs	r3, #128	; 0x80
    60da:	015b      	lsls	r3, r3, #5
    60dc:	401a      	ands	r2, r3
    60de:	d034      	beq.n	614a <__sflush_r+0x9a>
    60e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    60e2:	89a3      	ldrh	r3, [r4, #12]
    60e4:	075b      	lsls	r3, r3, #29
    60e6:	d506      	bpl.n	60f6 <__sflush_r+0x46>
    60e8:	6863      	ldr	r3, [r4, #4]
    60ea:	1ac0      	subs	r0, r0, r3
    60ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    60ee:	2b00      	cmp	r3, #0
    60f0:	d001      	beq.n	60f6 <__sflush_r+0x46>
    60f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    60f4:	1ac0      	subs	r0, r0, r3
    60f6:	0002      	movs	r2, r0
    60f8:	6a21      	ldr	r1, [r4, #32]
    60fa:	2300      	movs	r3, #0
    60fc:	0028      	movs	r0, r5
    60fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6100:	47b8      	blx	r7
    6102:	89a1      	ldrh	r1, [r4, #12]
    6104:	1c43      	adds	r3, r0, #1
    6106:	d106      	bne.n	6116 <__sflush_r+0x66>
    6108:	682b      	ldr	r3, [r5, #0]
    610a:	2b1d      	cmp	r3, #29
    610c:	d831      	bhi.n	6172 <__sflush_r+0xc2>
    610e:	4a2c      	ldr	r2, [pc, #176]	; (61c0 <__sflush_r+0x110>)
    6110:	40da      	lsrs	r2, r3
    6112:	07d3      	lsls	r3, r2, #31
    6114:	d52d      	bpl.n	6172 <__sflush_r+0xc2>
    6116:	2300      	movs	r3, #0
    6118:	6063      	str	r3, [r4, #4]
    611a:	6923      	ldr	r3, [r4, #16]
    611c:	6023      	str	r3, [r4, #0]
    611e:	04cb      	lsls	r3, r1, #19
    6120:	d505      	bpl.n	612e <__sflush_r+0x7e>
    6122:	1c43      	adds	r3, r0, #1
    6124:	d102      	bne.n	612c <__sflush_r+0x7c>
    6126:	682b      	ldr	r3, [r5, #0]
    6128:	2b00      	cmp	r3, #0
    612a:	d100      	bne.n	612e <__sflush_r+0x7e>
    612c:	6560      	str	r0, [r4, #84]	; 0x54
    612e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6130:	602e      	str	r6, [r5, #0]
    6132:	2900      	cmp	r1, #0
    6134:	d0c8      	beq.n	60c8 <__sflush_r+0x18>
    6136:	0023      	movs	r3, r4
    6138:	3344      	adds	r3, #68	; 0x44
    613a:	4299      	cmp	r1, r3
    613c:	d002      	beq.n	6144 <__sflush_r+0x94>
    613e:	0028      	movs	r0, r5
    6140:	f7ff fdba 	bl	5cb8 <_free_r>
    6144:	2000      	movs	r0, #0
    6146:	6360      	str	r0, [r4, #52]	; 0x34
    6148:	e7bf      	b.n	60ca <__sflush_r+0x1a>
    614a:	2301      	movs	r3, #1
    614c:	6a21      	ldr	r1, [r4, #32]
    614e:	0028      	movs	r0, r5
    6150:	47b8      	blx	r7
    6152:	1c43      	adds	r3, r0, #1
    6154:	d1c5      	bne.n	60e2 <__sflush_r+0x32>
    6156:	682b      	ldr	r3, [r5, #0]
    6158:	2b00      	cmp	r3, #0
    615a:	d0c2      	beq.n	60e2 <__sflush_r+0x32>
    615c:	2b1d      	cmp	r3, #29
    615e:	d001      	beq.n	6164 <__sflush_r+0xb4>
    6160:	2b16      	cmp	r3, #22
    6162:	d101      	bne.n	6168 <__sflush_r+0xb8>
    6164:	602e      	str	r6, [r5, #0]
    6166:	e7af      	b.n	60c8 <__sflush_r+0x18>
    6168:	2340      	movs	r3, #64	; 0x40
    616a:	89a2      	ldrh	r2, [r4, #12]
    616c:	4313      	orrs	r3, r2
    616e:	81a3      	strh	r3, [r4, #12]
    6170:	e7ab      	b.n	60ca <__sflush_r+0x1a>
    6172:	2340      	movs	r3, #64	; 0x40
    6174:	430b      	orrs	r3, r1
    6176:	2001      	movs	r0, #1
    6178:	81a3      	strh	r3, [r4, #12]
    617a:	4240      	negs	r0, r0
    617c:	e7a5      	b.n	60ca <__sflush_r+0x1a>
    617e:	690f      	ldr	r7, [r1, #16]
    6180:	2f00      	cmp	r7, #0
    6182:	d0a1      	beq.n	60c8 <__sflush_r+0x18>
    6184:	680b      	ldr	r3, [r1, #0]
    6186:	600f      	str	r7, [r1, #0]
    6188:	1bdb      	subs	r3, r3, r7
    618a:	9301      	str	r3, [sp, #4]
    618c:	2300      	movs	r3, #0
    618e:	0792      	lsls	r2, r2, #30
    6190:	d100      	bne.n	6194 <__sflush_r+0xe4>
    6192:	694b      	ldr	r3, [r1, #20]
    6194:	60a3      	str	r3, [r4, #8]
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	2b00      	cmp	r3, #0
    619a:	dc00      	bgt.n	619e <__sflush_r+0xee>
    619c:	e794      	b.n	60c8 <__sflush_r+0x18>
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	003a      	movs	r2, r7
    61a2:	6a21      	ldr	r1, [r4, #32]
    61a4:	0028      	movs	r0, r5
    61a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    61a8:	47b0      	blx	r6
    61aa:	2800      	cmp	r0, #0
    61ac:	dc03      	bgt.n	61b6 <__sflush_r+0x106>
    61ae:	2340      	movs	r3, #64	; 0x40
    61b0:	89a2      	ldrh	r2, [r4, #12]
    61b2:	4313      	orrs	r3, r2
    61b4:	e7df      	b.n	6176 <__sflush_r+0xc6>
    61b6:	9b01      	ldr	r3, [sp, #4]
    61b8:	183f      	adds	r7, r7, r0
    61ba:	1a1b      	subs	r3, r3, r0
    61bc:	9301      	str	r3, [sp, #4]
    61be:	e7ea      	b.n	6196 <__sflush_r+0xe6>
    61c0:	20400001 	.word	0x20400001

000061c4 <_fflush_r>:
    61c4:	690b      	ldr	r3, [r1, #16]
    61c6:	b570      	push	{r4, r5, r6, lr}
    61c8:	0005      	movs	r5, r0
    61ca:	000c      	movs	r4, r1
    61cc:	2b00      	cmp	r3, #0
    61ce:	d101      	bne.n	61d4 <_fflush_r+0x10>
    61d0:	2000      	movs	r0, #0
    61d2:	bd70      	pop	{r4, r5, r6, pc}
    61d4:	2800      	cmp	r0, #0
    61d6:	d004      	beq.n	61e2 <_fflush_r+0x1e>
    61d8:	6983      	ldr	r3, [r0, #24]
    61da:	2b00      	cmp	r3, #0
    61dc:	d101      	bne.n	61e2 <_fflush_r+0x1e>
    61de:	f000 f85f 	bl	62a0 <__sinit>
    61e2:	4b0b      	ldr	r3, [pc, #44]	; (6210 <_fflush_r+0x4c>)
    61e4:	429c      	cmp	r4, r3
    61e6:	d109      	bne.n	61fc <_fflush_r+0x38>
    61e8:	686c      	ldr	r4, [r5, #4]
    61ea:	220c      	movs	r2, #12
    61ec:	5ea3      	ldrsh	r3, [r4, r2]
    61ee:	2b00      	cmp	r3, #0
    61f0:	d0ee      	beq.n	61d0 <_fflush_r+0xc>
    61f2:	0021      	movs	r1, r4
    61f4:	0028      	movs	r0, r5
    61f6:	f7ff ff5b 	bl	60b0 <__sflush_r>
    61fa:	e7ea      	b.n	61d2 <_fflush_r+0xe>
    61fc:	4b05      	ldr	r3, [pc, #20]	; (6214 <_fflush_r+0x50>)
    61fe:	429c      	cmp	r4, r3
    6200:	d101      	bne.n	6206 <_fflush_r+0x42>
    6202:	68ac      	ldr	r4, [r5, #8]
    6204:	e7f1      	b.n	61ea <_fflush_r+0x26>
    6206:	4b04      	ldr	r3, [pc, #16]	; (6218 <_fflush_r+0x54>)
    6208:	429c      	cmp	r4, r3
    620a:	d1ee      	bne.n	61ea <_fflush_r+0x26>
    620c:	68ec      	ldr	r4, [r5, #12]
    620e:	e7ec      	b.n	61ea <_fflush_r+0x26>
    6210:	000077ec 	.word	0x000077ec
    6214:	0000780c 	.word	0x0000780c
    6218:	000077cc 	.word	0x000077cc

0000621c <_cleanup_r>:
    621c:	b510      	push	{r4, lr}
    621e:	4902      	ldr	r1, [pc, #8]	; (6228 <_cleanup_r+0xc>)
    6220:	f000 f8b2 	bl	6388 <_fwalk_reent>
    6224:	bd10      	pop	{r4, pc}
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	000061c5 	.word	0x000061c5

0000622c <std.isra.0>:
    622c:	2300      	movs	r3, #0
    622e:	b510      	push	{r4, lr}
    6230:	0004      	movs	r4, r0
    6232:	6003      	str	r3, [r0, #0]
    6234:	6043      	str	r3, [r0, #4]
    6236:	6083      	str	r3, [r0, #8]
    6238:	8181      	strh	r1, [r0, #12]
    623a:	6643      	str	r3, [r0, #100]	; 0x64
    623c:	81c2      	strh	r2, [r0, #14]
    623e:	6103      	str	r3, [r0, #16]
    6240:	6143      	str	r3, [r0, #20]
    6242:	6183      	str	r3, [r0, #24]
    6244:	0019      	movs	r1, r3
    6246:	2208      	movs	r2, #8
    6248:	305c      	adds	r0, #92	; 0x5c
    624a:	f7ff fd2d 	bl	5ca8 <memset>
    624e:	4b05      	ldr	r3, [pc, #20]	; (6264 <std.isra.0+0x38>)
    6250:	6224      	str	r4, [r4, #32]
    6252:	6263      	str	r3, [r4, #36]	; 0x24
    6254:	4b04      	ldr	r3, [pc, #16]	; (6268 <std.isra.0+0x3c>)
    6256:	62a3      	str	r3, [r4, #40]	; 0x28
    6258:	4b04      	ldr	r3, [pc, #16]	; (626c <std.isra.0+0x40>)
    625a:	62e3      	str	r3, [r4, #44]	; 0x2c
    625c:	4b04      	ldr	r3, [pc, #16]	; (6270 <std.isra.0+0x44>)
    625e:	6323      	str	r3, [r4, #48]	; 0x30
    6260:	bd10      	pop	{r4, pc}
    6262:	46c0      	nop			; (mov r8, r8)
    6264:	000069fd 	.word	0x000069fd
    6268:	00006a25 	.word	0x00006a25
    626c:	00006a5d 	.word	0x00006a5d
    6270:	00006a89 	.word	0x00006a89

00006274 <__sfmoreglue>:
    6274:	b570      	push	{r4, r5, r6, lr}
    6276:	2568      	movs	r5, #104	; 0x68
    6278:	1e4a      	subs	r2, r1, #1
    627a:	4355      	muls	r5, r2
    627c:	000e      	movs	r6, r1
    627e:	0029      	movs	r1, r5
    6280:	3174      	adds	r1, #116	; 0x74
    6282:	f7ff fd63 	bl	5d4c <_malloc_r>
    6286:	1e04      	subs	r4, r0, #0
    6288:	d008      	beq.n	629c <__sfmoreglue+0x28>
    628a:	2100      	movs	r1, #0
    628c:	002a      	movs	r2, r5
    628e:	6001      	str	r1, [r0, #0]
    6290:	6046      	str	r6, [r0, #4]
    6292:	300c      	adds	r0, #12
    6294:	60a0      	str	r0, [r4, #8]
    6296:	3268      	adds	r2, #104	; 0x68
    6298:	f7ff fd06 	bl	5ca8 <memset>
    629c:	0020      	movs	r0, r4
    629e:	bd70      	pop	{r4, r5, r6, pc}

000062a0 <__sinit>:
    62a0:	6983      	ldr	r3, [r0, #24]
    62a2:	b513      	push	{r0, r1, r4, lr}
    62a4:	0004      	movs	r4, r0
    62a6:	2b00      	cmp	r3, #0
    62a8:	d128      	bne.n	62fc <__sinit+0x5c>
    62aa:	6483      	str	r3, [r0, #72]	; 0x48
    62ac:	64c3      	str	r3, [r0, #76]	; 0x4c
    62ae:	6503      	str	r3, [r0, #80]	; 0x50
    62b0:	4b13      	ldr	r3, [pc, #76]	; (6300 <__sinit+0x60>)
    62b2:	4a14      	ldr	r2, [pc, #80]	; (6304 <__sinit+0x64>)
    62b4:	681b      	ldr	r3, [r3, #0]
    62b6:	6282      	str	r2, [r0, #40]	; 0x28
    62b8:	9301      	str	r3, [sp, #4]
    62ba:	4298      	cmp	r0, r3
    62bc:	d101      	bne.n	62c2 <__sinit+0x22>
    62be:	2301      	movs	r3, #1
    62c0:	6183      	str	r3, [r0, #24]
    62c2:	0020      	movs	r0, r4
    62c4:	f000 f820 	bl	6308 <__sfp>
    62c8:	6060      	str	r0, [r4, #4]
    62ca:	0020      	movs	r0, r4
    62cc:	f000 f81c 	bl	6308 <__sfp>
    62d0:	60a0      	str	r0, [r4, #8]
    62d2:	0020      	movs	r0, r4
    62d4:	f000 f818 	bl	6308 <__sfp>
    62d8:	2200      	movs	r2, #0
    62da:	60e0      	str	r0, [r4, #12]
    62dc:	2104      	movs	r1, #4
    62de:	6860      	ldr	r0, [r4, #4]
    62e0:	f7ff ffa4 	bl	622c <std.isra.0>
    62e4:	2201      	movs	r2, #1
    62e6:	2109      	movs	r1, #9
    62e8:	68a0      	ldr	r0, [r4, #8]
    62ea:	f7ff ff9f 	bl	622c <std.isra.0>
    62ee:	2202      	movs	r2, #2
    62f0:	2112      	movs	r1, #18
    62f2:	68e0      	ldr	r0, [r4, #12]
    62f4:	f7ff ff9a 	bl	622c <std.isra.0>
    62f8:	2301      	movs	r3, #1
    62fa:	61a3      	str	r3, [r4, #24]
    62fc:	bd13      	pop	{r0, r1, r4, pc}
    62fe:	46c0      	nop			; (mov r8, r8)
    6300:	000077c8 	.word	0x000077c8
    6304:	0000621d 	.word	0x0000621d

00006308 <__sfp>:
    6308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    630a:	4b1e      	ldr	r3, [pc, #120]	; (6384 <__sfp+0x7c>)
    630c:	0007      	movs	r7, r0
    630e:	681e      	ldr	r6, [r3, #0]
    6310:	69b3      	ldr	r3, [r6, #24]
    6312:	2b00      	cmp	r3, #0
    6314:	d102      	bne.n	631c <__sfp+0x14>
    6316:	0030      	movs	r0, r6
    6318:	f7ff ffc2 	bl	62a0 <__sinit>
    631c:	3648      	adds	r6, #72	; 0x48
    631e:	68b4      	ldr	r4, [r6, #8]
    6320:	6873      	ldr	r3, [r6, #4]
    6322:	3b01      	subs	r3, #1
    6324:	d504      	bpl.n	6330 <__sfp+0x28>
    6326:	6833      	ldr	r3, [r6, #0]
    6328:	2b00      	cmp	r3, #0
    632a:	d007      	beq.n	633c <__sfp+0x34>
    632c:	6836      	ldr	r6, [r6, #0]
    632e:	e7f6      	b.n	631e <__sfp+0x16>
    6330:	220c      	movs	r2, #12
    6332:	5ea5      	ldrsh	r5, [r4, r2]
    6334:	2d00      	cmp	r5, #0
    6336:	d00d      	beq.n	6354 <__sfp+0x4c>
    6338:	3468      	adds	r4, #104	; 0x68
    633a:	e7f2      	b.n	6322 <__sfp+0x1a>
    633c:	2104      	movs	r1, #4
    633e:	0038      	movs	r0, r7
    6340:	f7ff ff98 	bl	6274 <__sfmoreglue>
    6344:	6030      	str	r0, [r6, #0]
    6346:	2800      	cmp	r0, #0
    6348:	d1f0      	bne.n	632c <__sfp+0x24>
    634a:	230c      	movs	r3, #12
    634c:	0004      	movs	r4, r0
    634e:	603b      	str	r3, [r7, #0]
    6350:	0020      	movs	r0, r4
    6352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6354:	2301      	movs	r3, #1
    6356:	0020      	movs	r0, r4
    6358:	425b      	negs	r3, r3
    635a:	81e3      	strh	r3, [r4, #14]
    635c:	3302      	adds	r3, #2
    635e:	81a3      	strh	r3, [r4, #12]
    6360:	6665      	str	r5, [r4, #100]	; 0x64
    6362:	6025      	str	r5, [r4, #0]
    6364:	60a5      	str	r5, [r4, #8]
    6366:	6065      	str	r5, [r4, #4]
    6368:	6125      	str	r5, [r4, #16]
    636a:	6165      	str	r5, [r4, #20]
    636c:	61a5      	str	r5, [r4, #24]
    636e:	2208      	movs	r2, #8
    6370:	0029      	movs	r1, r5
    6372:	305c      	adds	r0, #92	; 0x5c
    6374:	f7ff fc98 	bl	5ca8 <memset>
    6378:	6365      	str	r5, [r4, #52]	; 0x34
    637a:	63a5      	str	r5, [r4, #56]	; 0x38
    637c:	64a5      	str	r5, [r4, #72]	; 0x48
    637e:	64e5      	str	r5, [r4, #76]	; 0x4c
    6380:	e7e6      	b.n	6350 <__sfp+0x48>
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	000077c8 	.word	0x000077c8

00006388 <_fwalk_reent>:
    6388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    638a:	0004      	movs	r4, r0
    638c:	0007      	movs	r7, r0
    638e:	2600      	movs	r6, #0
    6390:	9101      	str	r1, [sp, #4]
    6392:	3448      	adds	r4, #72	; 0x48
    6394:	2c00      	cmp	r4, #0
    6396:	d101      	bne.n	639c <_fwalk_reent+0x14>
    6398:	0030      	movs	r0, r6
    639a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    639c:	6863      	ldr	r3, [r4, #4]
    639e:	68a5      	ldr	r5, [r4, #8]
    63a0:	9300      	str	r3, [sp, #0]
    63a2:	9b00      	ldr	r3, [sp, #0]
    63a4:	3b01      	subs	r3, #1
    63a6:	9300      	str	r3, [sp, #0]
    63a8:	d501      	bpl.n	63ae <_fwalk_reent+0x26>
    63aa:	6824      	ldr	r4, [r4, #0]
    63ac:	e7f2      	b.n	6394 <_fwalk_reent+0xc>
    63ae:	89ab      	ldrh	r3, [r5, #12]
    63b0:	2b01      	cmp	r3, #1
    63b2:	d908      	bls.n	63c6 <_fwalk_reent+0x3e>
    63b4:	220e      	movs	r2, #14
    63b6:	5eab      	ldrsh	r3, [r5, r2]
    63b8:	3301      	adds	r3, #1
    63ba:	d004      	beq.n	63c6 <_fwalk_reent+0x3e>
    63bc:	0029      	movs	r1, r5
    63be:	0038      	movs	r0, r7
    63c0:	9b01      	ldr	r3, [sp, #4]
    63c2:	4798      	blx	r3
    63c4:	4306      	orrs	r6, r0
    63c6:	3568      	adds	r5, #104	; 0x68
    63c8:	e7eb      	b.n	63a2 <_fwalk_reent+0x1a>
	...

000063cc <__swhatbuf_r>:
    63cc:	b570      	push	{r4, r5, r6, lr}
    63ce:	000e      	movs	r6, r1
    63d0:	001d      	movs	r5, r3
    63d2:	230e      	movs	r3, #14
    63d4:	5ec9      	ldrsh	r1, [r1, r3]
    63d6:	b090      	sub	sp, #64	; 0x40
    63d8:	0014      	movs	r4, r2
    63da:	2900      	cmp	r1, #0
    63dc:	da07      	bge.n	63ee <__swhatbuf_r+0x22>
    63de:	2300      	movs	r3, #0
    63e0:	602b      	str	r3, [r5, #0]
    63e2:	89b3      	ldrh	r3, [r6, #12]
    63e4:	061b      	lsls	r3, r3, #24
    63e6:	d411      	bmi.n	640c <__swhatbuf_r+0x40>
    63e8:	2380      	movs	r3, #128	; 0x80
    63ea:	00db      	lsls	r3, r3, #3
    63ec:	e00f      	b.n	640e <__swhatbuf_r+0x42>
    63ee:	aa01      	add	r2, sp, #4
    63f0:	f000 fb76 	bl	6ae0 <_fstat_r>
    63f4:	2800      	cmp	r0, #0
    63f6:	dbf2      	blt.n	63de <__swhatbuf_r+0x12>
    63f8:	22f0      	movs	r2, #240	; 0xf0
    63fa:	9b02      	ldr	r3, [sp, #8]
    63fc:	0212      	lsls	r2, r2, #8
    63fe:	4013      	ands	r3, r2
    6400:	4a05      	ldr	r2, [pc, #20]	; (6418 <__swhatbuf_r+0x4c>)
    6402:	189b      	adds	r3, r3, r2
    6404:	425a      	negs	r2, r3
    6406:	4153      	adcs	r3, r2
    6408:	602b      	str	r3, [r5, #0]
    640a:	e7ed      	b.n	63e8 <__swhatbuf_r+0x1c>
    640c:	2340      	movs	r3, #64	; 0x40
    640e:	2000      	movs	r0, #0
    6410:	6023      	str	r3, [r4, #0]
    6412:	b010      	add	sp, #64	; 0x40
    6414:	bd70      	pop	{r4, r5, r6, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	ffffe000 	.word	0xffffe000

0000641c <__malloc_lock>:
    641c:	4770      	bx	lr

0000641e <__malloc_unlock>:
    641e:	4770      	bx	lr

00006420 <__ssputs_r>:
    6420:	b5f0      	push	{r4, r5, r6, r7, lr}
    6422:	688e      	ldr	r6, [r1, #8]
    6424:	b085      	sub	sp, #20
    6426:	0007      	movs	r7, r0
    6428:	000c      	movs	r4, r1
    642a:	9203      	str	r2, [sp, #12]
    642c:	9301      	str	r3, [sp, #4]
    642e:	429e      	cmp	r6, r3
    6430:	d839      	bhi.n	64a6 <__ssputs_r+0x86>
    6432:	2390      	movs	r3, #144	; 0x90
    6434:	898a      	ldrh	r2, [r1, #12]
    6436:	00db      	lsls	r3, r3, #3
    6438:	421a      	tst	r2, r3
    643a:	d034      	beq.n	64a6 <__ssputs_r+0x86>
    643c:	2503      	movs	r5, #3
    643e:	6909      	ldr	r1, [r1, #16]
    6440:	6823      	ldr	r3, [r4, #0]
    6442:	1a5b      	subs	r3, r3, r1
    6444:	9302      	str	r3, [sp, #8]
    6446:	6963      	ldr	r3, [r4, #20]
    6448:	9802      	ldr	r0, [sp, #8]
    644a:	435d      	muls	r5, r3
    644c:	0feb      	lsrs	r3, r5, #31
    644e:	195d      	adds	r5, r3, r5
    6450:	9b01      	ldr	r3, [sp, #4]
    6452:	106d      	asrs	r5, r5, #1
    6454:	3301      	adds	r3, #1
    6456:	181b      	adds	r3, r3, r0
    6458:	42ab      	cmp	r3, r5
    645a:	d900      	bls.n	645e <__ssputs_r+0x3e>
    645c:	001d      	movs	r5, r3
    645e:	0553      	lsls	r3, r2, #21
    6460:	d532      	bpl.n	64c8 <__ssputs_r+0xa8>
    6462:	0029      	movs	r1, r5
    6464:	0038      	movs	r0, r7
    6466:	f7ff fc71 	bl	5d4c <_malloc_r>
    646a:	1e06      	subs	r6, r0, #0
    646c:	d109      	bne.n	6482 <__ssputs_r+0x62>
    646e:	230c      	movs	r3, #12
    6470:	603b      	str	r3, [r7, #0]
    6472:	2340      	movs	r3, #64	; 0x40
    6474:	2001      	movs	r0, #1
    6476:	89a2      	ldrh	r2, [r4, #12]
    6478:	4240      	negs	r0, r0
    647a:	4313      	orrs	r3, r2
    647c:	81a3      	strh	r3, [r4, #12]
    647e:	b005      	add	sp, #20
    6480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6482:	9a02      	ldr	r2, [sp, #8]
    6484:	6921      	ldr	r1, [r4, #16]
    6486:	f000 fb5c 	bl	6b42 <memcpy>
    648a:	89a3      	ldrh	r3, [r4, #12]
    648c:	4a14      	ldr	r2, [pc, #80]	; (64e0 <__ssputs_r+0xc0>)
    648e:	401a      	ands	r2, r3
    6490:	2380      	movs	r3, #128	; 0x80
    6492:	4313      	orrs	r3, r2
    6494:	81a3      	strh	r3, [r4, #12]
    6496:	9b02      	ldr	r3, [sp, #8]
    6498:	6126      	str	r6, [r4, #16]
    649a:	18f6      	adds	r6, r6, r3
    649c:	6026      	str	r6, [r4, #0]
    649e:	6165      	str	r5, [r4, #20]
    64a0:	9e01      	ldr	r6, [sp, #4]
    64a2:	1aed      	subs	r5, r5, r3
    64a4:	60a5      	str	r5, [r4, #8]
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	42b3      	cmp	r3, r6
    64aa:	d200      	bcs.n	64ae <__ssputs_r+0x8e>
    64ac:	001e      	movs	r6, r3
    64ae:	0032      	movs	r2, r6
    64b0:	9903      	ldr	r1, [sp, #12]
    64b2:	6820      	ldr	r0, [r4, #0]
    64b4:	f000 fb4e 	bl	6b54 <memmove>
    64b8:	68a3      	ldr	r3, [r4, #8]
    64ba:	2000      	movs	r0, #0
    64bc:	1b9b      	subs	r3, r3, r6
    64be:	60a3      	str	r3, [r4, #8]
    64c0:	6823      	ldr	r3, [r4, #0]
    64c2:	199e      	adds	r6, r3, r6
    64c4:	6026      	str	r6, [r4, #0]
    64c6:	e7da      	b.n	647e <__ssputs_r+0x5e>
    64c8:	002a      	movs	r2, r5
    64ca:	0038      	movs	r0, r7
    64cc:	f000 fb54 	bl	6b78 <_realloc_r>
    64d0:	1e06      	subs	r6, r0, #0
    64d2:	d1e0      	bne.n	6496 <__ssputs_r+0x76>
    64d4:	6921      	ldr	r1, [r4, #16]
    64d6:	0038      	movs	r0, r7
    64d8:	f7ff fbee 	bl	5cb8 <_free_r>
    64dc:	e7c7      	b.n	646e <__ssputs_r+0x4e>
    64de:	46c0      	nop			; (mov r8, r8)
    64e0:	fffffb7f 	.word	0xfffffb7f

000064e4 <_svfiprintf_r>:
    64e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64e6:	b09f      	sub	sp, #124	; 0x7c
    64e8:	9002      	str	r0, [sp, #8]
    64ea:	9305      	str	r3, [sp, #20]
    64ec:	898b      	ldrh	r3, [r1, #12]
    64ee:	000f      	movs	r7, r1
    64f0:	0016      	movs	r6, r2
    64f2:	061b      	lsls	r3, r3, #24
    64f4:	d511      	bpl.n	651a <_svfiprintf_r+0x36>
    64f6:	690b      	ldr	r3, [r1, #16]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d10e      	bne.n	651a <_svfiprintf_r+0x36>
    64fc:	2140      	movs	r1, #64	; 0x40
    64fe:	f7ff fc25 	bl	5d4c <_malloc_r>
    6502:	6038      	str	r0, [r7, #0]
    6504:	6138      	str	r0, [r7, #16]
    6506:	2800      	cmp	r0, #0
    6508:	d105      	bne.n	6516 <_svfiprintf_r+0x32>
    650a:	230c      	movs	r3, #12
    650c:	9a02      	ldr	r2, [sp, #8]
    650e:	3801      	subs	r0, #1
    6510:	6013      	str	r3, [r2, #0]
    6512:	b01f      	add	sp, #124	; 0x7c
    6514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6516:	2340      	movs	r3, #64	; 0x40
    6518:	617b      	str	r3, [r7, #20]
    651a:	2300      	movs	r3, #0
    651c:	ad06      	add	r5, sp, #24
    651e:	616b      	str	r3, [r5, #20]
    6520:	3320      	adds	r3, #32
    6522:	766b      	strb	r3, [r5, #25]
    6524:	3310      	adds	r3, #16
    6526:	76ab      	strb	r3, [r5, #26]
    6528:	0034      	movs	r4, r6
    652a:	7823      	ldrb	r3, [r4, #0]
    652c:	2b00      	cmp	r3, #0
    652e:	d147      	bne.n	65c0 <_svfiprintf_r+0xdc>
    6530:	1ba3      	subs	r3, r4, r6
    6532:	9304      	str	r3, [sp, #16]
    6534:	d00d      	beq.n	6552 <_svfiprintf_r+0x6e>
    6536:	1ba3      	subs	r3, r4, r6
    6538:	0032      	movs	r2, r6
    653a:	0039      	movs	r1, r7
    653c:	9802      	ldr	r0, [sp, #8]
    653e:	f7ff ff6f 	bl	6420 <__ssputs_r>
    6542:	1c43      	adds	r3, r0, #1
    6544:	d100      	bne.n	6548 <_svfiprintf_r+0x64>
    6546:	e0b5      	b.n	66b4 <_svfiprintf_r+0x1d0>
    6548:	696a      	ldr	r2, [r5, #20]
    654a:	9b04      	ldr	r3, [sp, #16]
    654c:	4694      	mov	ip, r2
    654e:	4463      	add	r3, ip
    6550:	616b      	str	r3, [r5, #20]
    6552:	7823      	ldrb	r3, [r4, #0]
    6554:	2b00      	cmp	r3, #0
    6556:	d100      	bne.n	655a <_svfiprintf_r+0x76>
    6558:	e0ac      	b.n	66b4 <_svfiprintf_r+0x1d0>
    655a:	2201      	movs	r2, #1
    655c:	2300      	movs	r3, #0
    655e:	4252      	negs	r2, r2
    6560:	606a      	str	r2, [r5, #4]
    6562:	a902      	add	r1, sp, #8
    6564:	3254      	adds	r2, #84	; 0x54
    6566:	1852      	adds	r2, r2, r1
    6568:	3401      	adds	r4, #1
    656a:	602b      	str	r3, [r5, #0]
    656c:	60eb      	str	r3, [r5, #12]
    656e:	60ab      	str	r3, [r5, #8]
    6570:	7013      	strb	r3, [r2, #0]
    6572:	65ab      	str	r3, [r5, #88]	; 0x58
    6574:	4e58      	ldr	r6, [pc, #352]	; (66d8 <_svfiprintf_r+0x1f4>)
    6576:	2205      	movs	r2, #5
    6578:	7821      	ldrb	r1, [r4, #0]
    657a:	0030      	movs	r0, r6
    657c:	f000 fad6 	bl	6b2c <memchr>
    6580:	1c62      	adds	r2, r4, #1
    6582:	2800      	cmp	r0, #0
    6584:	d120      	bne.n	65c8 <_svfiprintf_r+0xe4>
    6586:	6829      	ldr	r1, [r5, #0]
    6588:	06cb      	lsls	r3, r1, #27
    658a:	d504      	bpl.n	6596 <_svfiprintf_r+0xb2>
    658c:	2353      	movs	r3, #83	; 0x53
    658e:	ae02      	add	r6, sp, #8
    6590:	3020      	adds	r0, #32
    6592:	199b      	adds	r3, r3, r6
    6594:	7018      	strb	r0, [r3, #0]
    6596:	070b      	lsls	r3, r1, #28
    6598:	d504      	bpl.n	65a4 <_svfiprintf_r+0xc0>
    659a:	2353      	movs	r3, #83	; 0x53
    659c:	202b      	movs	r0, #43	; 0x2b
    659e:	ae02      	add	r6, sp, #8
    65a0:	199b      	adds	r3, r3, r6
    65a2:	7018      	strb	r0, [r3, #0]
    65a4:	7823      	ldrb	r3, [r4, #0]
    65a6:	2b2a      	cmp	r3, #42	; 0x2a
    65a8:	d016      	beq.n	65d8 <_svfiprintf_r+0xf4>
    65aa:	2000      	movs	r0, #0
    65ac:	210a      	movs	r1, #10
    65ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65b0:	7822      	ldrb	r2, [r4, #0]
    65b2:	3a30      	subs	r2, #48	; 0x30
    65b4:	2a09      	cmp	r2, #9
    65b6:	d955      	bls.n	6664 <_svfiprintf_r+0x180>
    65b8:	2800      	cmp	r0, #0
    65ba:	d015      	beq.n	65e8 <_svfiprintf_r+0x104>
    65bc:	9309      	str	r3, [sp, #36]	; 0x24
    65be:	e013      	b.n	65e8 <_svfiprintf_r+0x104>
    65c0:	2b25      	cmp	r3, #37	; 0x25
    65c2:	d0b5      	beq.n	6530 <_svfiprintf_r+0x4c>
    65c4:	3401      	adds	r4, #1
    65c6:	e7b0      	b.n	652a <_svfiprintf_r+0x46>
    65c8:	2301      	movs	r3, #1
    65ca:	1b80      	subs	r0, r0, r6
    65cc:	4083      	lsls	r3, r0
    65ce:	6829      	ldr	r1, [r5, #0]
    65d0:	0014      	movs	r4, r2
    65d2:	430b      	orrs	r3, r1
    65d4:	602b      	str	r3, [r5, #0]
    65d6:	e7cd      	b.n	6574 <_svfiprintf_r+0x90>
    65d8:	9b05      	ldr	r3, [sp, #20]
    65da:	1d18      	adds	r0, r3, #4
    65dc:	681b      	ldr	r3, [r3, #0]
    65de:	9005      	str	r0, [sp, #20]
    65e0:	2b00      	cmp	r3, #0
    65e2:	db39      	blt.n	6658 <_svfiprintf_r+0x174>
    65e4:	9309      	str	r3, [sp, #36]	; 0x24
    65e6:	0014      	movs	r4, r2
    65e8:	7823      	ldrb	r3, [r4, #0]
    65ea:	2b2e      	cmp	r3, #46	; 0x2e
    65ec:	d10b      	bne.n	6606 <_svfiprintf_r+0x122>
    65ee:	7863      	ldrb	r3, [r4, #1]
    65f0:	1c62      	adds	r2, r4, #1
    65f2:	2b2a      	cmp	r3, #42	; 0x2a
    65f4:	d13e      	bne.n	6674 <_svfiprintf_r+0x190>
    65f6:	9b05      	ldr	r3, [sp, #20]
    65f8:	3402      	adds	r4, #2
    65fa:	1d1a      	adds	r2, r3, #4
    65fc:	681b      	ldr	r3, [r3, #0]
    65fe:	9205      	str	r2, [sp, #20]
    6600:	2b00      	cmp	r3, #0
    6602:	db34      	blt.n	666e <_svfiprintf_r+0x18a>
    6604:	9307      	str	r3, [sp, #28]
    6606:	4e35      	ldr	r6, [pc, #212]	; (66dc <_svfiprintf_r+0x1f8>)
    6608:	7821      	ldrb	r1, [r4, #0]
    660a:	2203      	movs	r2, #3
    660c:	0030      	movs	r0, r6
    660e:	f000 fa8d 	bl	6b2c <memchr>
    6612:	2800      	cmp	r0, #0
    6614:	d006      	beq.n	6624 <_svfiprintf_r+0x140>
    6616:	2340      	movs	r3, #64	; 0x40
    6618:	1b80      	subs	r0, r0, r6
    661a:	4083      	lsls	r3, r0
    661c:	682a      	ldr	r2, [r5, #0]
    661e:	3401      	adds	r4, #1
    6620:	4313      	orrs	r3, r2
    6622:	602b      	str	r3, [r5, #0]
    6624:	7821      	ldrb	r1, [r4, #0]
    6626:	2206      	movs	r2, #6
    6628:	482d      	ldr	r0, [pc, #180]	; (66e0 <_svfiprintf_r+0x1fc>)
    662a:	1c66      	adds	r6, r4, #1
    662c:	7629      	strb	r1, [r5, #24]
    662e:	f000 fa7d 	bl	6b2c <memchr>
    6632:	2800      	cmp	r0, #0
    6634:	d046      	beq.n	66c4 <_svfiprintf_r+0x1e0>
    6636:	4b2b      	ldr	r3, [pc, #172]	; (66e4 <_svfiprintf_r+0x200>)
    6638:	2b00      	cmp	r3, #0
    663a:	d12f      	bne.n	669c <_svfiprintf_r+0x1b8>
    663c:	6829      	ldr	r1, [r5, #0]
    663e:	9b05      	ldr	r3, [sp, #20]
    6640:	2207      	movs	r2, #7
    6642:	05c9      	lsls	r1, r1, #23
    6644:	d528      	bpl.n	6698 <_svfiprintf_r+0x1b4>
    6646:	189b      	adds	r3, r3, r2
    6648:	4393      	bics	r3, r2
    664a:	3308      	adds	r3, #8
    664c:	9305      	str	r3, [sp, #20]
    664e:	696b      	ldr	r3, [r5, #20]
    6650:	9a03      	ldr	r2, [sp, #12]
    6652:	189b      	adds	r3, r3, r2
    6654:	616b      	str	r3, [r5, #20]
    6656:	e767      	b.n	6528 <_svfiprintf_r+0x44>
    6658:	425b      	negs	r3, r3
    665a:	60eb      	str	r3, [r5, #12]
    665c:	2302      	movs	r3, #2
    665e:	430b      	orrs	r3, r1
    6660:	602b      	str	r3, [r5, #0]
    6662:	e7c0      	b.n	65e6 <_svfiprintf_r+0x102>
    6664:	434b      	muls	r3, r1
    6666:	3401      	adds	r4, #1
    6668:	189b      	adds	r3, r3, r2
    666a:	2001      	movs	r0, #1
    666c:	e7a0      	b.n	65b0 <_svfiprintf_r+0xcc>
    666e:	2301      	movs	r3, #1
    6670:	425b      	negs	r3, r3
    6672:	e7c7      	b.n	6604 <_svfiprintf_r+0x120>
    6674:	2300      	movs	r3, #0
    6676:	0014      	movs	r4, r2
    6678:	200a      	movs	r0, #10
    667a:	001a      	movs	r2, r3
    667c:	606b      	str	r3, [r5, #4]
    667e:	7821      	ldrb	r1, [r4, #0]
    6680:	3930      	subs	r1, #48	; 0x30
    6682:	2909      	cmp	r1, #9
    6684:	d903      	bls.n	668e <_svfiprintf_r+0x1aa>
    6686:	2b00      	cmp	r3, #0
    6688:	d0bd      	beq.n	6606 <_svfiprintf_r+0x122>
    668a:	9207      	str	r2, [sp, #28]
    668c:	e7bb      	b.n	6606 <_svfiprintf_r+0x122>
    668e:	4342      	muls	r2, r0
    6690:	3401      	adds	r4, #1
    6692:	1852      	adds	r2, r2, r1
    6694:	2301      	movs	r3, #1
    6696:	e7f2      	b.n	667e <_svfiprintf_r+0x19a>
    6698:	3307      	adds	r3, #7
    669a:	e7d5      	b.n	6648 <_svfiprintf_r+0x164>
    669c:	ab05      	add	r3, sp, #20
    669e:	9300      	str	r3, [sp, #0]
    66a0:	003a      	movs	r2, r7
    66a2:	4b11      	ldr	r3, [pc, #68]	; (66e8 <_svfiprintf_r+0x204>)
    66a4:	0029      	movs	r1, r5
    66a6:	9802      	ldr	r0, [sp, #8]
    66a8:	e000      	b.n	66ac <_svfiprintf_r+0x1c8>
    66aa:	bf00      	nop
    66ac:	9003      	str	r0, [sp, #12]
    66ae:	9b03      	ldr	r3, [sp, #12]
    66b0:	3301      	adds	r3, #1
    66b2:	d1cc      	bne.n	664e <_svfiprintf_r+0x16a>
    66b4:	89bb      	ldrh	r3, [r7, #12]
    66b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    66b8:	065b      	lsls	r3, r3, #25
    66ba:	d400      	bmi.n	66be <_svfiprintf_r+0x1da>
    66bc:	e729      	b.n	6512 <_svfiprintf_r+0x2e>
    66be:	2001      	movs	r0, #1
    66c0:	4240      	negs	r0, r0
    66c2:	e726      	b.n	6512 <_svfiprintf_r+0x2e>
    66c4:	ab05      	add	r3, sp, #20
    66c6:	9300      	str	r3, [sp, #0]
    66c8:	003a      	movs	r2, r7
    66ca:	4b07      	ldr	r3, [pc, #28]	; (66e8 <_svfiprintf_r+0x204>)
    66cc:	0029      	movs	r1, r5
    66ce:	9802      	ldr	r0, [sp, #8]
    66d0:	f000 f87a 	bl	67c8 <_printf_i>
    66d4:	e7ea      	b.n	66ac <_svfiprintf_r+0x1c8>
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	0000782c 	.word	0x0000782c
    66dc:	00007832 	.word	0x00007832
    66e0:	00007836 	.word	0x00007836
    66e4:	00000000 	.word	0x00000000
    66e8:	00006421 	.word	0x00006421

000066ec <_printf_common>:
    66ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    66ee:	0015      	movs	r5, r2
    66f0:	9301      	str	r3, [sp, #4]
    66f2:	688a      	ldr	r2, [r1, #8]
    66f4:	690b      	ldr	r3, [r1, #16]
    66f6:	9000      	str	r0, [sp, #0]
    66f8:	000c      	movs	r4, r1
    66fa:	4293      	cmp	r3, r2
    66fc:	da00      	bge.n	6700 <_printf_common+0x14>
    66fe:	0013      	movs	r3, r2
    6700:	0022      	movs	r2, r4
    6702:	602b      	str	r3, [r5, #0]
    6704:	3243      	adds	r2, #67	; 0x43
    6706:	7812      	ldrb	r2, [r2, #0]
    6708:	2a00      	cmp	r2, #0
    670a:	d001      	beq.n	6710 <_printf_common+0x24>
    670c:	3301      	adds	r3, #1
    670e:	602b      	str	r3, [r5, #0]
    6710:	6823      	ldr	r3, [r4, #0]
    6712:	069b      	lsls	r3, r3, #26
    6714:	d502      	bpl.n	671c <_printf_common+0x30>
    6716:	682b      	ldr	r3, [r5, #0]
    6718:	3302      	adds	r3, #2
    671a:	602b      	str	r3, [r5, #0]
    671c:	2706      	movs	r7, #6
    671e:	6823      	ldr	r3, [r4, #0]
    6720:	401f      	ands	r7, r3
    6722:	d027      	beq.n	6774 <_printf_common+0x88>
    6724:	0023      	movs	r3, r4
    6726:	3343      	adds	r3, #67	; 0x43
    6728:	781b      	ldrb	r3, [r3, #0]
    672a:	1e5a      	subs	r2, r3, #1
    672c:	4193      	sbcs	r3, r2
    672e:	6822      	ldr	r2, [r4, #0]
    6730:	0692      	lsls	r2, r2, #26
    6732:	d430      	bmi.n	6796 <_printf_common+0xaa>
    6734:	0022      	movs	r2, r4
    6736:	9901      	ldr	r1, [sp, #4]
    6738:	3243      	adds	r2, #67	; 0x43
    673a:	9800      	ldr	r0, [sp, #0]
    673c:	9e08      	ldr	r6, [sp, #32]
    673e:	47b0      	blx	r6
    6740:	1c43      	adds	r3, r0, #1
    6742:	d025      	beq.n	6790 <_printf_common+0xa4>
    6744:	2306      	movs	r3, #6
    6746:	6820      	ldr	r0, [r4, #0]
    6748:	682a      	ldr	r2, [r5, #0]
    674a:	68e1      	ldr	r1, [r4, #12]
    674c:	4003      	ands	r3, r0
    674e:	2500      	movs	r5, #0
    6750:	2b04      	cmp	r3, #4
    6752:	d103      	bne.n	675c <_printf_common+0x70>
    6754:	1a8d      	subs	r5, r1, r2
    6756:	43eb      	mvns	r3, r5
    6758:	17db      	asrs	r3, r3, #31
    675a:	401d      	ands	r5, r3
    675c:	68a3      	ldr	r3, [r4, #8]
    675e:	6922      	ldr	r2, [r4, #16]
    6760:	4293      	cmp	r3, r2
    6762:	dd01      	ble.n	6768 <_printf_common+0x7c>
    6764:	1a9b      	subs	r3, r3, r2
    6766:	18ed      	adds	r5, r5, r3
    6768:	2700      	movs	r7, #0
    676a:	42bd      	cmp	r5, r7
    676c:	d120      	bne.n	67b0 <_printf_common+0xc4>
    676e:	2000      	movs	r0, #0
    6770:	e010      	b.n	6794 <_printf_common+0xa8>
    6772:	3701      	adds	r7, #1
    6774:	68e3      	ldr	r3, [r4, #12]
    6776:	682a      	ldr	r2, [r5, #0]
    6778:	1a9b      	subs	r3, r3, r2
    677a:	429f      	cmp	r7, r3
    677c:	dad2      	bge.n	6724 <_printf_common+0x38>
    677e:	0022      	movs	r2, r4
    6780:	2301      	movs	r3, #1
    6782:	3219      	adds	r2, #25
    6784:	9901      	ldr	r1, [sp, #4]
    6786:	9800      	ldr	r0, [sp, #0]
    6788:	9e08      	ldr	r6, [sp, #32]
    678a:	47b0      	blx	r6
    678c:	1c43      	adds	r3, r0, #1
    678e:	d1f0      	bne.n	6772 <_printf_common+0x86>
    6790:	2001      	movs	r0, #1
    6792:	4240      	negs	r0, r0
    6794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6796:	2030      	movs	r0, #48	; 0x30
    6798:	18e1      	adds	r1, r4, r3
    679a:	3143      	adds	r1, #67	; 0x43
    679c:	7008      	strb	r0, [r1, #0]
    679e:	0021      	movs	r1, r4
    67a0:	1c5a      	adds	r2, r3, #1
    67a2:	3145      	adds	r1, #69	; 0x45
    67a4:	7809      	ldrb	r1, [r1, #0]
    67a6:	18a2      	adds	r2, r4, r2
    67a8:	3243      	adds	r2, #67	; 0x43
    67aa:	3302      	adds	r3, #2
    67ac:	7011      	strb	r1, [r2, #0]
    67ae:	e7c1      	b.n	6734 <_printf_common+0x48>
    67b0:	0022      	movs	r2, r4
    67b2:	2301      	movs	r3, #1
    67b4:	321a      	adds	r2, #26
    67b6:	9901      	ldr	r1, [sp, #4]
    67b8:	9800      	ldr	r0, [sp, #0]
    67ba:	9e08      	ldr	r6, [sp, #32]
    67bc:	47b0      	blx	r6
    67be:	1c43      	adds	r3, r0, #1
    67c0:	d0e6      	beq.n	6790 <_printf_common+0xa4>
    67c2:	3701      	adds	r7, #1
    67c4:	e7d1      	b.n	676a <_printf_common+0x7e>
	...

000067c8 <_printf_i>:
    67c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ca:	b08b      	sub	sp, #44	; 0x2c
    67cc:	9206      	str	r2, [sp, #24]
    67ce:	000a      	movs	r2, r1
    67d0:	3243      	adds	r2, #67	; 0x43
    67d2:	9307      	str	r3, [sp, #28]
    67d4:	9005      	str	r0, [sp, #20]
    67d6:	9204      	str	r2, [sp, #16]
    67d8:	7e0a      	ldrb	r2, [r1, #24]
    67da:	000c      	movs	r4, r1
    67dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    67de:	2a6e      	cmp	r2, #110	; 0x6e
    67e0:	d100      	bne.n	67e4 <_printf_i+0x1c>
    67e2:	e08f      	b.n	6904 <_printf_i+0x13c>
    67e4:	d817      	bhi.n	6816 <_printf_i+0x4e>
    67e6:	2a63      	cmp	r2, #99	; 0x63
    67e8:	d02c      	beq.n	6844 <_printf_i+0x7c>
    67ea:	d808      	bhi.n	67fe <_printf_i+0x36>
    67ec:	2a00      	cmp	r2, #0
    67ee:	d100      	bne.n	67f2 <_printf_i+0x2a>
    67f0:	e099      	b.n	6926 <_printf_i+0x15e>
    67f2:	2a58      	cmp	r2, #88	; 0x58
    67f4:	d054      	beq.n	68a0 <_printf_i+0xd8>
    67f6:	0026      	movs	r6, r4
    67f8:	3642      	adds	r6, #66	; 0x42
    67fa:	7032      	strb	r2, [r6, #0]
    67fc:	e029      	b.n	6852 <_printf_i+0x8a>
    67fe:	2a64      	cmp	r2, #100	; 0x64
    6800:	d001      	beq.n	6806 <_printf_i+0x3e>
    6802:	2a69      	cmp	r2, #105	; 0x69
    6804:	d1f7      	bne.n	67f6 <_printf_i+0x2e>
    6806:	6821      	ldr	r1, [r4, #0]
    6808:	681a      	ldr	r2, [r3, #0]
    680a:	0608      	lsls	r0, r1, #24
    680c:	d523      	bpl.n	6856 <_printf_i+0x8e>
    680e:	1d11      	adds	r1, r2, #4
    6810:	6019      	str	r1, [r3, #0]
    6812:	6815      	ldr	r5, [r2, #0]
    6814:	e025      	b.n	6862 <_printf_i+0x9a>
    6816:	2a73      	cmp	r2, #115	; 0x73
    6818:	d100      	bne.n	681c <_printf_i+0x54>
    681a:	e088      	b.n	692e <_printf_i+0x166>
    681c:	d808      	bhi.n	6830 <_printf_i+0x68>
    681e:	2a6f      	cmp	r2, #111	; 0x6f
    6820:	d029      	beq.n	6876 <_printf_i+0xae>
    6822:	2a70      	cmp	r2, #112	; 0x70
    6824:	d1e7      	bne.n	67f6 <_printf_i+0x2e>
    6826:	2220      	movs	r2, #32
    6828:	6809      	ldr	r1, [r1, #0]
    682a:	430a      	orrs	r2, r1
    682c:	6022      	str	r2, [r4, #0]
    682e:	e003      	b.n	6838 <_printf_i+0x70>
    6830:	2a75      	cmp	r2, #117	; 0x75
    6832:	d020      	beq.n	6876 <_printf_i+0xae>
    6834:	2a78      	cmp	r2, #120	; 0x78
    6836:	d1de      	bne.n	67f6 <_printf_i+0x2e>
    6838:	0022      	movs	r2, r4
    683a:	2178      	movs	r1, #120	; 0x78
    683c:	3245      	adds	r2, #69	; 0x45
    683e:	7011      	strb	r1, [r2, #0]
    6840:	4a6c      	ldr	r2, [pc, #432]	; (69f4 <_printf_i+0x22c>)
    6842:	e030      	b.n	68a6 <_printf_i+0xde>
    6844:	000e      	movs	r6, r1
    6846:	681a      	ldr	r2, [r3, #0]
    6848:	3642      	adds	r6, #66	; 0x42
    684a:	1d11      	adds	r1, r2, #4
    684c:	6019      	str	r1, [r3, #0]
    684e:	6813      	ldr	r3, [r2, #0]
    6850:	7033      	strb	r3, [r6, #0]
    6852:	2301      	movs	r3, #1
    6854:	e079      	b.n	694a <_printf_i+0x182>
    6856:	0649      	lsls	r1, r1, #25
    6858:	d5d9      	bpl.n	680e <_printf_i+0x46>
    685a:	1d11      	adds	r1, r2, #4
    685c:	6019      	str	r1, [r3, #0]
    685e:	2300      	movs	r3, #0
    6860:	5ed5      	ldrsh	r5, [r2, r3]
    6862:	2d00      	cmp	r5, #0
    6864:	da03      	bge.n	686e <_printf_i+0xa6>
    6866:	232d      	movs	r3, #45	; 0x2d
    6868:	9a04      	ldr	r2, [sp, #16]
    686a:	426d      	negs	r5, r5
    686c:	7013      	strb	r3, [r2, #0]
    686e:	4b62      	ldr	r3, [pc, #392]	; (69f8 <_printf_i+0x230>)
    6870:	270a      	movs	r7, #10
    6872:	9303      	str	r3, [sp, #12]
    6874:	e02f      	b.n	68d6 <_printf_i+0x10e>
    6876:	6820      	ldr	r0, [r4, #0]
    6878:	6819      	ldr	r1, [r3, #0]
    687a:	0605      	lsls	r5, r0, #24
    687c:	d503      	bpl.n	6886 <_printf_i+0xbe>
    687e:	1d08      	adds	r0, r1, #4
    6880:	6018      	str	r0, [r3, #0]
    6882:	680d      	ldr	r5, [r1, #0]
    6884:	e005      	b.n	6892 <_printf_i+0xca>
    6886:	0640      	lsls	r0, r0, #25
    6888:	d5f9      	bpl.n	687e <_printf_i+0xb6>
    688a:	680d      	ldr	r5, [r1, #0]
    688c:	1d08      	adds	r0, r1, #4
    688e:	6018      	str	r0, [r3, #0]
    6890:	b2ad      	uxth	r5, r5
    6892:	4b59      	ldr	r3, [pc, #356]	; (69f8 <_printf_i+0x230>)
    6894:	2708      	movs	r7, #8
    6896:	9303      	str	r3, [sp, #12]
    6898:	2a6f      	cmp	r2, #111	; 0x6f
    689a:	d018      	beq.n	68ce <_printf_i+0x106>
    689c:	270a      	movs	r7, #10
    689e:	e016      	b.n	68ce <_printf_i+0x106>
    68a0:	3145      	adds	r1, #69	; 0x45
    68a2:	700a      	strb	r2, [r1, #0]
    68a4:	4a54      	ldr	r2, [pc, #336]	; (69f8 <_printf_i+0x230>)
    68a6:	9203      	str	r2, [sp, #12]
    68a8:	681a      	ldr	r2, [r3, #0]
    68aa:	6821      	ldr	r1, [r4, #0]
    68ac:	1d10      	adds	r0, r2, #4
    68ae:	6018      	str	r0, [r3, #0]
    68b0:	6815      	ldr	r5, [r2, #0]
    68b2:	0608      	lsls	r0, r1, #24
    68b4:	d522      	bpl.n	68fc <_printf_i+0x134>
    68b6:	07cb      	lsls	r3, r1, #31
    68b8:	d502      	bpl.n	68c0 <_printf_i+0xf8>
    68ba:	2320      	movs	r3, #32
    68bc:	4319      	orrs	r1, r3
    68be:	6021      	str	r1, [r4, #0]
    68c0:	2710      	movs	r7, #16
    68c2:	2d00      	cmp	r5, #0
    68c4:	d103      	bne.n	68ce <_printf_i+0x106>
    68c6:	2320      	movs	r3, #32
    68c8:	6822      	ldr	r2, [r4, #0]
    68ca:	439a      	bics	r2, r3
    68cc:	6022      	str	r2, [r4, #0]
    68ce:	0023      	movs	r3, r4
    68d0:	2200      	movs	r2, #0
    68d2:	3343      	adds	r3, #67	; 0x43
    68d4:	701a      	strb	r2, [r3, #0]
    68d6:	6863      	ldr	r3, [r4, #4]
    68d8:	60a3      	str	r3, [r4, #8]
    68da:	2b00      	cmp	r3, #0
    68dc:	db5c      	blt.n	6998 <_printf_i+0x1d0>
    68de:	2204      	movs	r2, #4
    68e0:	6821      	ldr	r1, [r4, #0]
    68e2:	4391      	bics	r1, r2
    68e4:	6021      	str	r1, [r4, #0]
    68e6:	2d00      	cmp	r5, #0
    68e8:	d158      	bne.n	699c <_printf_i+0x1d4>
    68ea:	9e04      	ldr	r6, [sp, #16]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d064      	beq.n	69ba <_printf_i+0x1f2>
    68f0:	0026      	movs	r6, r4
    68f2:	9b03      	ldr	r3, [sp, #12]
    68f4:	3642      	adds	r6, #66	; 0x42
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	7033      	strb	r3, [r6, #0]
    68fa:	e05e      	b.n	69ba <_printf_i+0x1f2>
    68fc:	0648      	lsls	r0, r1, #25
    68fe:	d5da      	bpl.n	68b6 <_printf_i+0xee>
    6900:	b2ad      	uxth	r5, r5
    6902:	e7d8      	b.n	68b6 <_printf_i+0xee>
    6904:	6809      	ldr	r1, [r1, #0]
    6906:	681a      	ldr	r2, [r3, #0]
    6908:	0608      	lsls	r0, r1, #24
    690a:	d505      	bpl.n	6918 <_printf_i+0x150>
    690c:	1d11      	adds	r1, r2, #4
    690e:	6019      	str	r1, [r3, #0]
    6910:	6813      	ldr	r3, [r2, #0]
    6912:	6962      	ldr	r2, [r4, #20]
    6914:	601a      	str	r2, [r3, #0]
    6916:	e006      	b.n	6926 <_printf_i+0x15e>
    6918:	0649      	lsls	r1, r1, #25
    691a:	d5f7      	bpl.n	690c <_printf_i+0x144>
    691c:	1d11      	adds	r1, r2, #4
    691e:	6019      	str	r1, [r3, #0]
    6920:	6813      	ldr	r3, [r2, #0]
    6922:	8aa2      	ldrh	r2, [r4, #20]
    6924:	801a      	strh	r2, [r3, #0]
    6926:	2300      	movs	r3, #0
    6928:	9e04      	ldr	r6, [sp, #16]
    692a:	6123      	str	r3, [r4, #16]
    692c:	e054      	b.n	69d8 <_printf_i+0x210>
    692e:	681a      	ldr	r2, [r3, #0]
    6930:	1d11      	adds	r1, r2, #4
    6932:	6019      	str	r1, [r3, #0]
    6934:	6816      	ldr	r6, [r2, #0]
    6936:	2100      	movs	r1, #0
    6938:	6862      	ldr	r2, [r4, #4]
    693a:	0030      	movs	r0, r6
    693c:	f000 f8f6 	bl	6b2c <memchr>
    6940:	2800      	cmp	r0, #0
    6942:	d001      	beq.n	6948 <_printf_i+0x180>
    6944:	1b80      	subs	r0, r0, r6
    6946:	6060      	str	r0, [r4, #4]
    6948:	6863      	ldr	r3, [r4, #4]
    694a:	6123      	str	r3, [r4, #16]
    694c:	2300      	movs	r3, #0
    694e:	9a04      	ldr	r2, [sp, #16]
    6950:	7013      	strb	r3, [r2, #0]
    6952:	e041      	b.n	69d8 <_printf_i+0x210>
    6954:	6923      	ldr	r3, [r4, #16]
    6956:	0032      	movs	r2, r6
    6958:	9906      	ldr	r1, [sp, #24]
    695a:	9805      	ldr	r0, [sp, #20]
    695c:	9d07      	ldr	r5, [sp, #28]
    695e:	47a8      	blx	r5
    6960:	1c43      	adds	r3, r0, #1
    6962:	d043      	beq.n	69ec <_printf_i+0x224>
    6964:	6823      	ldr	r3, [r4, #0]
    6966:	2500      	movs	r5, #0
    6968:	079b      	lsls	r3, r3, #30
    696a:	d40f      	bmi.n	698c <_printf_i+0x1c4>
    696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    696e:	68e0      	ldr	r0, [r4, #12]
    6970:	4298      	cmp	r0, r3
    6972:	da3d      	bge.n	69f0 <_printf_i+0x228>
    6974:	0018      	movs	r0, r3
    6976:	e03b      	b.n	69f0 <_printf_i+0x228>
    6978:	0022      	movs	r2, r4
    697a:	2301      	movs	r3, #1
    697c:	3219      	adds	r2, #25
    697e:	9906      	ldr	r1, [sp, #24]
    6980:	9805      	ldr	r0, [sp, #20]
    6982:	9e07      	ldr	r6, [sp, #28]
    6984:	47b0      	blx	r6
    6986:	1c43      	adds	r3, r0, #1
    6988:	d030      	beq.n	69ec <_printf_i+0x224>
    698a:	3501      	adds	r5, #1
    698c:	68e3      	ldr	r3, [r4, #12]
    698e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6990:	1a9b      	subs	r3, r3, r2
    6992:	429d      	cmp	r5, r3
    6994:	dbf0      	blt.n	6978 <_printf_i+0x1b0>
    6996:	e7e9      	b.n	696c <_printf_i+0x1a4>
    6998:	2d00      	cmp	r5, #0
    699a:	d0a9      	beq.n	68f0 <_printf_i+0x128>
    699c:	9e04      	ldr	r6, [sp, #16]
    699e:	0028      	movs	r0, r5
    69a0:	0039      	movs	r1, r7
    69a2:	f7ff f839 	bl	5a18 <__aeabi_uidivmod>
    69a6:	9b03      	ldr	r3, [sp, #12]
    69a8:	3e01      	subs	r6, #1
    69aa:	5c5b      	ldrb	r3, [r3, r1]
    69ac:	0028      	movs	r0, r5
    69ae:	7033      	strb	r3, [r6, #0]
    69b0:	0039      	movs	r1, r7
    69b2:	f7fe ffab 	bl	590c <__udivsi3>
    69b6:	1e05      	subs	r5, r0, #0
    69b8:	d1f1      	bne.n	699e <_printf_i+0x1d6>
    69ba:	2f08      	cmp	r7, #8
    69bc:	d109      	bne.n	69d2 <_printf_i+0x20a>
    69be:	6823      	ldr	r3, [r4, #0]
    69c0:	07db      	lsls	r3, r3, #31
    69c2:	d506      	bpl.n	69d2 <_printf_i+0x20a>
    69c4:	6863      	ldr	r3, [r4, #4]
    69c6:	6922      	ldr	r2, [r4, #16]
    69c8:	4293      	cmp	r3, r2
    69ca:	dc02      	bgt.n	69d2 <_printf_i+0x20a>
    69cc:	2330      	movs	r3, #48	; 0x30
    69ce:	3e01      	subs	r6, #1
    69d0:	7033      	strb	r3, [r6, #0]
    69d2:	9b04      	ldr	r3, [sp, #16]
    69d4:	1b9b      	subs	r3, r3, r6
    69d6:	6123      	str	r3, [r4, #16]
    69d8:	9b07      	ldr	r3, [sp, #28]
    69da:	aa09      	add	r2, sp, #36	; 0x24
    69dc:	9300      	str	r3, [sp, #0]
    69de:	0021      	movs	r1, r4
    69e0:	9b06      	ldr	r3, [sp, #24]
    69e2:	9805      	ldr	r0, [sp, #20]
    69e4:	f7ff fe82 	bl	66ec <_printf_common>
    69e8:	1c43      	adds	r3, r0, #1
    69ea:	d1b3      	bne.n	6954 <_printf_i+0x18c>
    69ec:	2001      	movs	r0, #1
    69ee:	4240      	negs	r0, r0
    69f0:	b00b      	add	sp, #44	; 0x2c
    69f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69f4:	0000784e 	.word	0x0000784e
    69f8:	0000783d 	.word	0x0000783d

000069fc <__sread>:
    69fc:	b570      	push	{r4, r5, r6, lr}
    69fe:	000c      	movs	r4, r1
    6a00:	250e      	movs	r5, #14
    6a02:	5f49      	ldrsh	r1, [r1, r5]
    6a04:	f000 f8de 	bl	6bc4 <_read_r>
    6a08:	2800      	cmp	r0, #0
    6a0a:	db03      	blt.n	6a14 <__sread+0x18>
    6a0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a0e:	181b      	adds	r3, r3, r0
    6a10:	6563      	str	r3, [r4, #84]	; 0x54
    6a12:	bd70      	pop	{r4, r5, r6, pc}
    6a14:	89a3      	ldrh	r3, [r4, #12]
    6a16:	4a02      	ldr	r2, [pc, #8]	; (6a20 <__sread+0x24>)
    6a18:	4013      	ands	r3, r2
    6a1a:	81a3      	strh	r3, [r4, #12]
    6a1c:	e7f9      	b.n	6a12 <__sread+0x16>
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	ffffefff 	.word	0xffffefff

00006a24 <__swrite>:
    6a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a26:	001f      	movs	r7, r3
    6a28:	898b      	ldrh	r3, [r1, #12]
    6a2a:	0005      	movs	r5, r0
    6a2c:	000c      	movs	r4, r1
    6a2e:	0016      	movs	r6, r2
    6a30:	05db      	lsls	r3, r3, #23
    6a32:	d505      	bpl.n	6a40 <__swrite+0x1c>
    6a34:	230e      	movs	r3, #14
    6a36:	5ec9      	ldrsh	r1, [r1, r3]
    6a38:	2200      	movs	r2, #0
    6a3a:	2302      	movs	r3, #2
    6a3c:	f000 f862 	bl	6b04 <_lseek_r>
    6a40:	89a3      	ldrh	r3, [r4, #12]
    6a42:	4a05      	ldr	r2, [pc, #20]	; (6a58 <__swrite+0x34>)
    6a44:	0028      	movs	r0, r5
    6a46:	4013      	ands	r3, r2
    6a48:	81a3      	strh	r3, [r4, #12]
    6a4a:	0032      	movs	r2, r6
    6a4c:	230e      	movs	r3, #14
    6a4e:	5ee1      	ldrsh	r1, [r4, r3]
    6a50:	003b      	movs	r3, r7
    6a52:	f000 f81f 	bl	6a94 <_write_r>
    6a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a58:	ffffefff 	.word	0xffffefff

00006a5c <__sseek>:
    6a5c:	b570      	push	{r4, r5, r6, lr}
    6a5e:	000c      	movs	r4, r1
    6a60:	250e      	movs	r5, #14
    6a62:	5f49      	ldrsh	r1, [r1, r5]
    6a64:	f000 f84e 	bl	6b04 <_lseek_r>
    6a68:	89a3      	ldrh	r3, [r4, #12]
    6a6a:	1c42      	adds	r2, r0, #1
    6a6c:	d103      	bne.n	6a76 <__sseek+0x1a>
    6a6e:	4a05      	ldr	r2, [pc, #20]	; (6a84 <__sseek+0x28>)
    6a70:	4013      	ands	r3, r2
    6a72:	81a3      	strh	r3, [r4, #12]
    6a74:	bd70      	pop	{r4, r5, r6, pc}
    6a76:	2280      	movs	r2, #128	; 0x80
    6a78:	0152      	lsls	r2, r2, #5
    6a7a:	4313      	orrs	r3, r2
    6a7c:	81a3      	strh	r3, [r4, #12]
    6a7e:	6560      	str	r0, [r4, #84]	; 0x54
    6a80:	e7f8      	b.n	6a74 <__sseek+0x18>
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	ffffefff 	.word	0xffffefff

00006a88 <__sclose>:
    6a88:	b510      	push	{r4, lr}
    6a8a:	230e      	movs	r3, #14
    6a8c:	5ec9      	ldrsh	r1, [r1, r3]
    6a8e:	f000 f815 	bl	6abc <_close_r>
    6a92:	bd10      	pop	{r4, pc}

00006a94 <_write_r>:
    6a94:	b570      	push	{r4, r5, r6, lr}
    6a96:	0005      	movs	r5, r0
    6a98:	0008      	movs	r0, r1
    6a9a:	0011      	movs	r1, r2
    6a9c:	2200      	movs	r2, #0
    6a9e:	4c06      	ldr	r4, [pc, #24]	; (6ab8 <_write_r+0x24>)
    6aa0:	6022      	str	r2, [r4, #0]
    6aa2:	001a      	movs	r2, r3
    6aa4:	f7fc fe2c 	bl	3700 <_write>
    6aa8:	1c43      	adds	r3, r0, #1
    6aaa:	d103      	bne.n	6ab4 <_write_r+0x20>
    6aac:	6823      	ldr	r3, [r4, #0]
    6aae:	2b00      	cmp	r3, #0
    6ab0:	d000      	beq.n	6ab4 <_write_r+0x20>
    6ab2:	602b      	str	r3, [r5, #0]
    6ab4:	bd70      	pop	{r4, r5, r6, pc}
    6ab6:	46c0      	nop			; (mov r8, r8)
    6ab8:	200009fc 	.word	0x200009fc

00006abc <_close_r>:
    6abc:	2300      	movs	r3, #0
    6abe:	b570      	push	{r4, r5, r6, lr}
    6ac0:	4c06      	ldr	r4, [pc, #24]	; (6adc <_close_r+0x20>)
    6ac2:	0005      	movs	r5, r0
    6ac4:	0008      	movs	r0, r1
    6ac6:	6023      	str	r3, [r4, #0]
    6ac8:	f7fc fe54 	bl	3774 <_close>
    6acc:	1c43      	adds	r3, r0, #1
    6ace:	d103      	bne.n	6ad8 <_close_r+0x1c>
    6ad0:	6823      	ldr	r3, [r4, #0]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	d000      	beq.n	6ad8 <_close_r+0x1c>
    6ad6:	602b      	str	r3, [r5, #0]
    6ad8:	bd70      	pop	{r4, r5, r6, pc}
    6ada:	46c0      	nop			; (mov r8, r8)
    6adc:	200009fc 	.word	0x200009fc

00006ae0 <_fstat_r>:
    6ae0:	2300      	movs	r3, #0
    6ae2:	b570      	push	{r4, r5, r6, lr}
    6ae4:	4c06      	ldr	r4, [pc, #24]	; (6b00 <_fstat_r+0x20>)
    6ae6:	0005      	movs	r5, r0
    6ae8:	0008      	movs	r0, r1
    6aea:	0011      	movs	r1, r2
    6aec:	6023      	str	r3, [r4, #0]
    6aee:	f7fc fe44 	bl	377a <_fstat>
    6af2:	1c43      	adds	r3, r0, #1
    6af4:	d103      	bne.n	6afe <_fstat_r+0x1e>
    6af6:	6823      	ldr	r3, [r4, #0]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d000      	beq.n	6afe <_fstat_r+0x1e>
    6afc:	602b      	str	r3, [r5, #0]
    6afe:	bd70      	pop	{r4, r5, r6, pc}
    6b00:	200009fc 	.word	0x200009fc

00006b04 <_lseek_r>:
    6b04:	b570      	push	{r4, r5, r6, lr}
    6b06:	0005      	movs	r5, r0
    6b08:	0008      	movs	r0, r1
    6b0a:	0011      	movs	r1, r2
    6b0c:	2200      	movs	r2, #0
    6b0e:	4c06      	ldr	r4, [pc, #24]	; (6b28 <_lseek_r+0x24>)
    6b10:	6022      	str	r2, [r4, #0]
    6b12:	001a      	movs	r2, r3
    6b14:	f7fc fe36 	bl	3784 <_lseek>
    6b18:	1c43      	adds	r3, r0, #1
    6b1a:	d103      	bne.n	6b24 <_lseek_r+0x20>
    6b1c:	6823      	ldr	r3, [r4, #0]
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d000      	beq.n	6b24 <_lseek_r+0x20>
    6b22:	602b      	str	r3, [r5, #0]
    6b24:	bd70      	pop	{r4, r5, r6, pc}
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	200009fc 	.word	0x200009fc

00006b2c <memchr>:
    6b2c:	b2c9      	uxtb	r1, r1
    6b2e:	1882      	adds	r2, r0, r2
    6b30:	4290      	cmp	r0, r2
    6b32:	d101      	bne.n	6b38 <memchr+0xc>
    6b34:	2000      	movs	r0, #0
    6b36:	4770      	bx	lr
    6b38:	7803      	ldrb	r3, [r0, #0]
    6b3a:	428b      	cmp	r3, r1
    6b3c:	d0fb      	beq.n	6b36 <memchr+0xa>
    6b3e:	3001      	adds	r0, #1
    6b40:	e7f6      	b.n	6b30 <memchr+0x4>

00006b42 <memcpy>:
    6b42:	2300      	movs	r3, #0
    6b44:	b510      	push	{r4, lr}
    6b46:	429a      	cmp	r2, r3
    6b48:	d100      	bne.n	6b4c <memcpy+0xa>
    6b4a:	bd10      	pop	{r4, pc}
    6b4c:	5ccc      	ldrb	r4, [r1, r3]
    6b4e:	54c4      	strb	r4, [r0, r3]
    6b50:	3301      	adds	r3, #1
    6b52:	e7f8      	b.n	6b46 <memcpy+0x4>

00006b54 <memmove>:
    6b54:	b510      	push	{r4, lr}
    6b56:	4288      	cmp	r0, r1
    6b58:	d902      	bls.n	6b60 <memmove+0xc>
    6b5a:	188b      	adds	r3, r1, r2
    6b5c:	4298      	cmp	r0, r3
    6b5e:	d308      	bcc.n	6b72 <memmove+0x1e>
    6b60:	2300      	movs	r3, #0
    6b62:	429a      	cmp	r2, r3
    6b64:	d007      	beq.n	6b76 <memmove+0x22>
    6b66:	5ccc      	ldrb	r4, [r1, r3]
    6b68:	54c4      	strb	r4, [r0, r3]
    6b6a:	3301      	adds	r3, #1
    6b6c:	e7f9      	b.n	6b62 <memmove+0xe>
    6b6e:	5c8b      	ldrb	r3, [r1, r2]
    6b70:	5483      	strb	r3, [r0, r2]
    6b72:	3a01      	subs	r2, #1
    6b74:	d2fb      	bcs.n	6b6e <memmove+0x1a>
    6b76:	bd10      	pop	{r4, pc}

00006b78 <_realloc_r>:
    6b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b7a:	0007      	movs	r7, r0
    6b7c:	000d      	movs	r5, r1
    6b7e:	0016      	movs	r6, r2
    6b80:	2900      	cmp	r1, #0
    6b82:	d105      	bne.n	6b90 <_realloc_r+0x18>
    6b84:	0011      	movs	r1, r2
    6b86:	f7ff f8e1 	bl	5d4c <_malloc_r>
    6b8a:	0004      	movs	r4, r0
    6b8c:	0020      	movs	r0, r4
    6b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b90:	2a00      	cmp	r2, #0
    6b92:	d103      	bne.n	6b9c <_realloc_r+0x24>
    6b94:	f7ff f890 	bl	5cb8 <_free_r>
    6b98:	0034      	movs	r4, r6
    6b9a:	e7f7      	b.n	6b8c <_realloc_r+0x14>
    6b9c:	f000 f826 	bl	6bec <_malloc_usable_size_r>
    6ba0:	002c      	movs	r4, r5
    6ba2:	4286      	cmp	r6, r0
    6ba4:	d9f2      	bls.n	6b8c <_realloc_r+0x14>
    6ba6:	0031      	movs	r1, r6
    6ba8:	0038      	movs	r0, r7
    6baa:	f7ff f8cf 	bl	5d4c <_malloc_r>
    6bae:	1e04      	subs	r4, r0, #0
    6bb0:	d0ec      	beq.n	6b8c <_realloc_r+0x14>
    6bb2:	0029      	movs	r1, r5
    6bb4:	0032      	movs	r2, r6
    6bb6:	f7ff ffc4 	bl	6b42 <memcpy>
    6bba:	0029      	movs	r1, r5
    6bbc:	0038      	movs	r0, r7
    6bbe:	f7ff f87b 	bl	5cb8 <_free_r>
    6bc2:	e7e3      	b.n	6b8c <_realloc_r+0x14>

00006bc4 <_read_r>:
    6bc4:	b570      	push	{r4, r5, r6, lr}
    6bc6:	0005      	movs	r5, r0
    6bc8:	0008      	movs	r0, r1
    6bca:	0011      	movs	r1, r2
    6bcc:	2200      	movs	r2, #0
    6bce:	4c06      	ldr	r4, [pc, #24]	; (6be8 <_read_r+0x24>)
    6bd0:	6022      	str	r2, [r4, #0]
    6bd2:	001a      	movs	r2, r3
    6bd4:	f7fc fd72 	bl	36bc <_read>
    6bd8:	1c43      	adds	r3, r0, #1
    6bda:	d103      	bne.n	6be4 <_read_r+0x20>
    6bdc:	6823      	ldr	r3, [r4, #0]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d000      	beq.n	6be4 <_read_r+0x20>
    6be2:	602b      	str	r3, [r5, #0]
    6be4:	bd70      	pop	{r4, r5, r6, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	200009fc 	.word	0x200009fc

00006bec <_malloc_usable_size_r>:
    6bec:	1f0b      	subs	r3, r1, #4
    6bee:	681b      	ldr	r3, [r3, #0]
    6bf0:	1f18      	subs	r0, r3, #4
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	da01      	bge.n	6bfa <_malloc_usable_size_r+0xe>
    6bf6:	580b      	ldr	r3, [r1, r0]
    6bf8:	18c0      	adds	r0, r0, r3
    6bfa:	4770      	bx	lr
    6bfc:	00000318 	.word	0x00000318
    6c00:	00000318 	.word	0x00000318
    6c04:	000002f4 	.word	0x000002f4
    6c08:	00000318 	.word	0x00000318
    6c0c:	000002f4 	.word	0x000002f4
    6c10:	000002da 	.word	0x000002da
    6c14:	000002da 	.word	0x000002da
    6c18:	00000318 	.word	0x00000318
    6c1c:	00000318 	.word	0x00000318
    6c20:	00000318 	.word	0x00000318
    6c24:	00000318 	.word	0x00000318
    6c28:	00000318 	.word	0x00000318
    6c2c:	00000318 	.word	0x00000318
    6c30:	00000318 	.word	0x00000318
    6c34:	00000318 	.word	0x00000318
    6c38:	00000318 	.word	0x00000318
    6c3c:	00000318 	.word	0x00000318
    6c40:	00000318 	.word	0x00000318
    6c44:	00000318 	.word	0x00000318
    6c48:	00000318 	.word	0x00000318
    6c4c:	00000318 	.word	0x00000318
    6c50:	00000318 	.word	0x00000318
    6c54:	00000318 	.word	0x00000318
    6c58:	00000318 	.word	0x00000318
    6c5c:	00000318 	.word	0x00000318
    6c60:	00000318 	.word	0x00000318
    6c64:	00000318 	.word	0x00000318
    6c68:	00000318 	.word	0x00000318
    6c6c:	00000318 	.word	0x00000318
    6c70:	00000318 	.word	0x00000318
    6c74:	00000318 	.word	0x00000318
    6c78:	00000318 	.word	0x00000318
    6c7c:	00000318 	.word	0x00000318
    6c80:	00000318 	.word	0x00000318
    6c84:	00000318 	.word	0x00000318
    6c88:	00000318 	.word	0x00000318
    6c8c:	00000318 	.word	0x00000318
    6c90:	00000318 	.word	0x00000318
    6c94:	00000318 	.word	0x00000318
    6c98:	00000318 	.word	0x00000318
    6c9c:	00000318 	.word	0x00000318
    6ca0:	00000318 	.word	0x00000318
    6ca4:	00000318 	.word	0x00000318
    6ca8:	00000318 	.word	0x00000318
    6cac:	00000318 	.word	0x00000318
    6cb0:	00000318 	.word	0x00000318
    6cb4:	00000318 	.word	0x00000318
    6cb8:	00000318 	.word	0x00000318
    6cbc:	00000318 	.word	0x00000318
    6cc0:	00000318 	.word	0x00000318
    6cc4:	00000318 	.word	0x00000318
    6cc8:	00000318 	.word	0x00000318
    6ccc:	00000318 	.word	0x00000318
    6cd0:	00000318 	.word	0x00000318
    6cd4:	00000318 	.word	0x00000318
    6cd8:	00000318 	.word	0x00000318
    6cdc:	00000318 	.word	0x00000318
    6ce0:	00000318 	.word	0x00000318
    6ce4:	00000318 	.word	0x00000318
    6ce8:	00000318 	.word	0x00000318
    6cec:	00000318 	.word	0x00000318
    6cf0:	00000318 	.word	0x00000318
    6cf4:	00000318 	.word	0x00000318
    6cf8:	00000318 	.word	0x00000318
    6cfc:	000002f4 	.word	0x000002f4
    6d00:	000002f4 	.word	0x000002f4
    6d04:	000002fc 	.word	0x000002fc
    6d08:	000002fc 	.word	0x000002fc
    6d0c:	000002fc 	.word	0x000002fc
    6d10:	000002fc 	.word	0x000002fc

00006d14 <mmc_trans_multipliers>:
    6d14:	00000000 0000000a 0000000c 0000000d     ................
    6d24:	0000000f 00000014 0000001a 0000001e     ................
    6d34:	00000023 00000028 0000002d 00000034     #...(...-...4...
    6d44:	00000037 0000003c 00000046 00000050     7...<...F...P...

00006d54 <sd_mmc_trans_units>:
    6d54:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00006d70 <sd_trans_multipliers>:
    6d70:	00000000 0000000a 0000000c 0000000d     ................
    6d80:	0000000f 00000014 00000019 0000001e     ................
    6d90:	00000023 00000028 0000002d 00000032     #...(...-...2...
    6da0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6db0:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    6dc0:	42001800 42001c00 00002e52 00002e4e     ...B...BR...N...
    6dd0:	00002e4e 00002eb4 00002eb4 00002e66     N...........f...
    6de0:	00002e58 00002e6c 00002ea2 00003074     X...l.......t0..
    6df0:	00003054 00003054 000030e0 00003066     T0..T0...0..f0..
    6e00:	00003082 00003058 00003090 000030d0     .0..X0...0...0..

00006e10 <LfnOfs>:
    6e10:	07050301 12100e09 1c181614 0000001e     ................

00006e20 <excvt.4558>:
    6e20:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    6e30:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    6e40:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    6e50:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    6e60:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    6e70:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    6e80:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    6e90:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6ea0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    6eb0:	00005d5b                                []..

00006eb4 <Tbl>:
    6eb4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6ec4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6ed4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6ee4:	00d600ff 00f800dc 00d800a3 019200d7     ................
    6ef4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6f04:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    6f14:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    6f24:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    6f34:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    6f44:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    6f54:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    6f64:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    6f74:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    6f84:	00da00de 00d900db 00dd00fd 00b400af     ................
    6f94:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    6fa4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00006fb4 <tbl_lower.4308>:
    6fb4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    6fc4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    6fd4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    6fe4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    6ff4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    7004:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    7014:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    7024:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    7034:	01050103 01090107 010d010b 0111010f     ................
    7044:	01150113 01190117 011d011b 0121011f     ..............!.
    7054:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    7064:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    7074:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7084:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7094:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    70a4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    70b4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    70c4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    70d4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    70e4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    70f4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7104:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    7114:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    7124:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    7134:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    7144:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    7154:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    7164:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    7174:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7184:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007194 <tbl_upper.4309>:
    7194:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    71a4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    71b4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    71c4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    71d4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    71e4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    71f4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7204:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    7214:	01040102 01080106 010c010a 0110010e     ................
    7224:	01140112 01180116 011c011a 0120011e     .............. .
    7234:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    7244:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    7254:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    7264:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    7274:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7284:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7294:	03940393 03960395 03980397 039a0399     ................
    72a4:	039c039b 039e039d 03a0039f 03a303a1     ................
    72b4:	03a503a4 03a703a6 03a903a8 041003aa     ................
    72c4:	04120411 04140413 04160415 04180417     ................
    72d4:	041a0419 041c041b 041e041d 0420041f     .............. .
    72e4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    72f4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7304:	04030402 04050404 04070406 04090408     ................
    7314:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    7324:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    7334:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    7344:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    7354:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    7364:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    7374:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    7384:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    7394:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    73a4:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    73b4:	000d0a2d 61656c50 70206573 2067756c     -...Please plug 
    73c4:	53206e61 4d4d2f44 61632043 69206472     an SD/MMC card i
    73d4:	6c73206e 0a2e746f 0000000d 64726143     n slot......Card
    73e4:	736e6920 6c6c6174 49414620 000d0a4c      install FAIL...
    73f4:	61656c50 75206573 756c706e 6e612067     Please unplug an
    7404:	65722064 756c702d 68742067 61632065     d re-plug the ca
    7414:	0a2e6472 0000000d 6e756f4d 69642074     rd......Mount di
    7424:	28206b73 6f6d5f66 29746e75 0d2e2e2e     sk (f_mount)....
    7434:	0000000a 4941465b 72205d4c 25207365     ....[FAIL] res %
    7444:	000a0d64 5d4b4f5b 00000a0d 61657243     d...[OK]....Crea
    7454:	61206574 6c696620 66282065 65706f5f     te a file (f_ope
    7464:	2e2e296e 000a0d2e 74697257 6f742065     n)......Write to
    7474:	73657420 69662074 2820656c 75705f66      test file (f_pu
    7484:	2e297374 0a0d2e2e 00000000 74736554     ts).........Test
    7494:	2f445320 20434d4d 63617473 00000a6b      SD/MMC stack...
    74a4:	4941465b 0a0d5d4c 00000000 74736554     [FAIL]......Test
    74b4:	20736920 63637573 66737365 0a2e6c75      is successful..
    74c4:	0000000d 6e65704f 20676e69 61726170     ....Opening para
    74d4:	632e736d 0a0d7673 00000000 4941465b     ms.csv......[FAI
    74e4:	43203a4c 646c756f 746f6e20 65706f20     L: Could not ope
    74f4:	6170206e 736d6172 6c696620 72205d65     n params file] r
    7504:	25207365 000a0d64 4941465b 43203a4c     es %d...[FAIL: C
    7514:	646c756f 746f6e20 61657220 61502064     ould not read Pa
    7524:	656d6172 73726574 6c694620 72205d65     rameters File] r
    7534:	25207365 000a0d64 7479425b 72207365     es %d...[Bytes r
    7544:	20646165 6d6f7266 72617020 2e736d61     ead from params.
    7554:	3a767363 25205d20 000a0d64 0000002c     csv: ] %d...,...
    7564:	64616552 20676e69 6d6f7266 72617020     Reading from par
    7574:	2e736d61 20767363 00000a0d 74747542     ams.csv ....Butt
    7584:	77206e6f 70207361 73736572 203a6465     on was pressed: 
    7594:	41445055 474e4954 52494620 5241574d     UPDATING FIRMWAR
    75a4:	0a0d2045 00000000 00000031 61647055     E ......1...Upda
    75b4:	46206574 2067616c 20736177 3a746573     te Flag was set:
    75c4:	44505520 4e495441 49462047 41574d52      UPDATING FIRMWA
    75d4:	0d204552 0000000a 52204f4e 4f534145     RE .....NO REASO
    75e4:	4f54204e 44505520 20455441 554a203a     N TO UPDATE : JU
    75f4:	4e49504d 4f542047 50504120 4143494c     MPING TO APPLICA
    7604:	4e4f4954 000a0d20 61656c50 75206573     TION ...Please u
    7614:	756c706e 68742067 61632065 0a2e6472     nplug the card..
    7624:	0000000d 35455345 2d203631 49584520     ....ESE516 - EXI
    7634:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....
    7644:	64733a30 636d6d5f 7365745f 78742e74     0:sd_mmc_test.tx
    7654:	00000074 61726170 632e736d 00007673     t...params.csv..
    7664:	44414552 20474e49 2e707061 206e6962     READING app.bin 
    7674:	00000a0d 4941465b 43203a4c 646c756f     ....[FAIL: Could
    7684:	746f6e20 65706f20 6946206e 61776d72      not open Firmwa
    7694:	46206572 5d656c69 73657220 0d642520     re File] res %d.
    76a4:	0000000a 20574f52 5a495320 53492045     ....ROW  SIZE IS
    76b4:	20642520 65747962 000a0d73 52415453      %d bytes...STAR
    76c4:	474e4954 564f4d20 4c422045 534b434f     TING MOVE BLOCKS
    76d4:	000a0d20 4941465b 43203a4c 646c756f      ...[FAIL: Could
    76e4:	746f6e20 61657220 6c422064 206b636f      not read Block 
    76f4:	6d6f7266 72694620 7261776d 69462065     from Firmware Fi
    7704:	205d656c 20736572 202c6425 65747962     le] res %d, byte
    7714:	65722073 25206461 000a0d64 6165525b     s read %d...[Rea
    7724:	6c422064 206b636f 6d6f7266 72694620     d Block from Fir
    7734:	7261776d 69462065 205d656c 202c6425     mware File] %d, 
    7744:	65747962 0a0d2073 00000000 4352435b     bytes ......[CRC
    7754:	204e4f20 66667542 205d7265 0d642520      ON Buffer]  %d.
    7764:	0000000a 4352435b 204e4f20 5d4d564e     ....[CRC ON NVM]
    7774:	64252020 00000a0d 4941465b 43203a4c       %d....[FAIL: C
    7784:	44204352 4e204449 4d20544f 48435441     RC DID NOT MATCH
    7794:	000a0d5d 55544552 4e494e52 52462047     ]...RETURNING FR
    77a4:	46204d4f 574d5249 20455241 41445055     OM FIRMWARE UPDA
    77b4:	0d204554 0000000a 70613a30 69622e70     TE .....0:app.bi
    77c4:	0000006e                                n...

000077c8 <_global_impure_ptr>:
    77c8:	20000010                                ... 

000077cc <__sf_fake_stderr>:
	...

000077ec <__sf_fake_stdin>:
	...

0000780c <__sf_fake_stdout>:
	...
    782c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    783c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    784c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    785c:	00006665                                ef..

00007860 <_init>:
    7860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7862:	46c0      	nop			; (mov r8, r8)
    7864:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7866:	bc08      	pop	{r3}
    7868:	469e      	mov	lr, r3
    786a:	4770      	bx	lr

0000786c <__init_array_start>:
    786c:	000000dd 	.word	0x000000dd

00007870 <_fini>:
    7870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7876:	bc08      	pop	{r3}
    7878:	469e      	mov	lr, r3
    787a:	4770      	bx	lr

0000787c <__fini_array_start>:
    787c:	000000b5 	.word	0x000000b5
