
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010d88  0000b000  0000b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003d0  20000000  0001bd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000013dc  200003d0  0001c158  000203d0  2**2
                  ALLOC
  3 .stack        00002004  200017ac  0001d534  000203d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00086c3c  00000000  00000000  00020451  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000cd68  00000000  00000000  000a708d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0002203f  00000000  00000000  000b3df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000018a8  00000000  00000000  000d5e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002240  00000000  00000000  000d76dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002b50e  00000000  00000000  000d991c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002c451  00000000  00000000  00104e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0ca1  00000000  00000000  0013127b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000052a0  00000000  00000000  001d1f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000b000 <exception_table>:
    b000:	b0 37 00 20 0d 21 01 00 09 21 01 00 09 21 01 00     .7. .!...!...!..
	...
    b02c:	09 21 01 00 00 00 00 00 00 00 00 00 09 21 01 00     .!...........!..
    b03c:	e5 48 01 00 09 21 01 00 09 21 01 00 09 21 01 00     .H...!...!...!..
    b04c:	19 01 01 00 99 fd 00 00 09 21 01 00 09 21 01 00     .........!...!..
    b05c:	09 21 01 00 09 21 01 00 41 05 01 00 51 05 01 00     .!...!..A...Q...
    b06c:	61 05 01 00 71 05 01 00 81 05 01 00 91 05 01 00     a...q...........
    b07c:	d9 20 01 00 e9 20 01 00 f9 20 01 00 09 21 01 00     . ... ... ...!..
    b08c:	09 21 01 00 09 21 01 00 00 00 00 00 00 00 00 00     .!...!..........
    b09c:	09 21 01 00 09 21 01 00 09 21 01 00 09 21 01 00     .!...!...!...!..
    b0ac:	09 21 01 00 00 00 00 00                             .!......

0000b0b4 <__do_global_dtors_aux>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	4c06      	ldr	r4, [pc, #24]	; (b0d0 <__do_global_dtors_aux+0x1c>)
    b0b8:	7823      	ldrb	r3, [r4, #0]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d107      	bne.n	b0ce <__do_global_dtors_aux+0x1a>
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <__do_global_dtors_aux+0x20>)
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d002      	beq.n	b0ca <__do_global_dtors_aux+0x16>
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <__do_global_dtors_aux+0x24>)
    b0c6:	e000      	b.n	b0ca <__do_global_dtors_aux+0x16>
    b0c8:	bf00      	nop
    b0ca:	2301      	movs	r3, #1
    b0cc:	7023      	strb	r3, [r4, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	200003d0 	.word	0x200003d0
    b0d4:	00000000 	.word	0x00000000
    b0d8:	0001bd88 	.word	0x0001bd88

0000b0dc <frame_dummy>:
    b0dc:	4b08      	ldr	r3, [pc, #32]	; (b100 <frame_dummy+0x24>)
    b0de:	b510      	push	{r4, lr}
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <frame_dummy+0x10>
    b0e4:	4907      	ldr	r1, [pc, #28]	; (b104 <frame_dummy+0x28>)
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <frame_dummy+0x2c>)
    b0e8:	e000      	b.n	b0ec <frame_dummy+0x10>
    b0ea:	bf00      	nop
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <frame_dummy+0x30>)
    b0ee:	6803      	ldr	r3, [r0, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <frame_dummy+0x1a>
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	4b06      	ldr	r3, [pc, #24]	; (b110 <frame_dummy+0x34>)
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d0fb      	beq.n	b0f4 <frame_dummy+0x18>
    b0fc:	4798      	blx	r3
    b0fe:	e7f9      	b.n	b0f4 <frame_dummy+0x18>
    b100:	00000000 	.word	0x00000000
    b104:	200003d4 	.word	0x200003d4
    b108:	0001bd88 	.word	0x0001bd88
    b10c:	0001bd88 	.word	0x0001bd88
    b110:	00000000 	.word	0x00000000

0000b114 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    b114:	b5f0      	push	{r4, r5, r6, r7, lr}
    b116:	46c6      	mov	lr, r8
    b118:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    b11a:	2303      	movs	r3, #3
    b11c:	0007      	movs	r7, r0
    b11e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    b120:	6813      	ldr	r3, [r2, #0]
    b122:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    b124:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    b126:	2903      	cmp	r1, #3
    b128:	d902      	bls.n	b130 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    b12a:	4244      	negs	r4, r0
    b12c:	2003      	movs	r0, #3
    b12e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    b130:	2c00      	cmp	r4, #0
    b132:	d016      	beq.n	b162 <crc32_recalculate+0x4e>
		length -= temp_length;
    b134:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    b136:	1d3e      	adds	r6, r7, #4
    b138:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    b13a:	00e0      	lsls	r0, r4, #3
    b13c:	4240      	negs	r0, r0
    b13e:	3020      	adds	r0, #32
    b140:	40c5      	lsrs	r5, r0
	crc ^= data;
    b142:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    b144:	00e0      	lsls	r0, r4, #3
    b146:	d019      	beq.n	b17c <crc32_recalculate+0x68>
		if (crc & 1) {
    b148:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b14a:	4d27      	ldr	r5, [pc, #156]	; (b1e8 <crc32_recalculate+0xd4>)
    b14c:	e003      	b.n	b156 <crc32_recalculate+0x42>
			crc >>= 1;
    b14e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b150:	3801      	subs	r0, #1
    b152:	2800      	cmp	r0, #0
    b154:	d004      	beq.n	b160 <crc32_recalculate+0x4c>
		if (crc & 1) {
    b156:	421c      	tst	r4, r3
    b158:	d0f9      	beq.n	b14e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b15a:	085b      	lsrs	r3, r3, #1
    b15c:	406b      	eors	r3, r5
    b15e:	e7f7      	b.n	b150 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    b160:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    b162:	2003      	movs	r0, #3
    b164:	000c      	movs	r4, r1
    b166:	4384      	bics	r4, r0

	if (temp_length) {
    b168:	d01e      	beq.n	b1a8 <crc32_recalculate+0x94>
		length -= temp_length;
    b16a:	1b08      	subs	r0, r1, r4
    b16c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    b16e:	0889      	lsrs	r1, r1, #2
    b170:	4688      	mov	r8, r1
    b172:	003e      	movs	r6, r7
    b174:	000d      	movs	r5, r1
		if (crc & 1) {
    b176:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b178:	4c1b      	ldr	r4, [pc, #108]	; (b1e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    b17a:	e00b      	b.n	b194 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    b17c:	0037      	movs	r7, r6
    b17e:	e7f0      	b.n	b162 <crc32_recalculate+0x4e>
			crc >>= 1;
    b180:	085b      	lsrs	r3, r3, #1
    b182:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b184:	2900      	cmp	r1, #0
    b186:	d004      	beq.n	b192 <crc32_recalculate+0x7e>
		if (crc & 1) {
    b188:	4218      	tst	r0, r3
    b18a:	d0f9      	beq.n	b180 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b18c:	085b      	lsrs	r3, r3, #1
    b18e:	4063      	eors	r3, r4
    b190:	e7f7      	b.n	b182 <crc32_recalculate+0x6e>
    b192:	3604      	adds	r6, #4
		while (temp_length--) {
    b194:	3d01      	subs	r5, #1
    b196:	d303      	bcc.n	b1a0 <crc32_recalculate+0x8c>
	crc ^= data;
    b198:	6831      	ldr	r1, [r6, #0]
    b19a:	404b      	eors	r3, r1
    b19c:	2120      	movs	r1, #32
    b19e:	e7f3      	b.n	b188 <crc32_recalculate+0x74>
    b1a0:	4641      	mov	r1, r8
    b1a2:	0089      	lsls	r1, r1, #2
    b1a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    b1a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    b1a8:	2900      	cmp	r1, #0
    b1aa:	d017      	beq.n	b1dc <crc32_recalculate+0xc8>
		word = *word_ptr;
    b1ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    b1ae:	00c8      	lsls	r0, r1, #3
    b1b0:	4240      	negs	r0, r0
    b1b2:	3020      	adds	r0, #32
    b1b4:	2501      	movs	r5, #1
    b1b6:	426d      	negs	r5, r5
    b1b8:	40c5      	lsrs	r5, r0
    b1ba:	0028      	movs	r0, r5
    b1bc:	4020      	ands	r0, r4
	crc ^= data;
    b1be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    b1c0:	00c9      	lsls	r1, r1, #3
    b1c2:	d00b      	beq.n	b1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b1c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b1c6:	4c08      	ldr	r4, [pc, #32]	; (b1e8 <crc32_recalculate+0xd4>)
    b1c8:	e003      	b.n	b1d2 <crc32_recalculate+0xbe>
			crc >>= 1;
    b1ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b1cc:	3901      	subs	r1, #1
    b1ce:	2900      	cmp	r1, #0
    b1d0:	d004      	beq.n	b1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b1d2:	4218      	tst	r0, r3
    b1d4:	d0f9      	beq.n	b1ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b1d6:	085b      	lsrs	r3, r3, #1
    b1d8:	4063      	eors	r3, r4
    b1da:	e7f7      	b.n	b1cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    b1dc:	43db      	mvns	r3, r3
    b1de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    b1e0:	2000      	movs	r0, #0
    b1e2:	bc04      	pop	{r2}
    b1e4:	4690      	mov	r8, r2
    b1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1e8:	edb88320 	.word	0xedb88320

0000b1ec <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b1ec:	b510      	push	{r4, lr}
    b1ee:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    b1f0:	7c03      	ldrb	r3, [r0, #16]
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d005      	beq.n	b202 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b1f6:	6883      	ldr	r3, [r0, #8]
    b1f8:	1c58      	adds	r0, r3, #1
    b1fa:	68e1      	ldr	r1, [r4, #12]
    b1fc:	4b07      	ldr	r3, [pc, #28]	; (b21c <advance_pointer+0x30>)
    b1fe:	4798      	blx	r3
    b200:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b202:	6863      	ldr	r3, [r4, #4]
    b204:	1c58      	adds	r0, r3, #1
    b206:	68e1      	ldr	r1, [r4, #12]
    b208:	4b04      	ldr	r3, [pc, #16]	; (b21c <advance_pointer+0x30>)
    b20a:	4798      	blx	r3
    b20c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b20e:	68a3      	ldr	r3, [r4, #8]
    b210:	1a59      	subs	r1, r3, r1
    b212:	424a      	negs	r2, r1
    b214:	414a      	adcs	r2, r1
    b216:	7422      	strb	r2, [r4, #16]
 }
    b218:	bd10      	pop	{r4, pc}
    b21a:	46c0      	nop			; (mov r8, r8)
    b21c:	000176e1 	.word	0x000176e1

0000b220 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b220:	b570      	push	{r4, r5, r6, lr}
    b222:	0005      	movs	r5, r0
    b224:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b226:	2014      	movs	r0, #20
    b228:	4b04      	ldr	r3, [pc, #16]	; (b23c <circular_buf_init+0x1c>)
    b22a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b22c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    b22e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    b230:	2300      	movs	r3, #0
    b232:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    b234:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    b236:	7403      	strb	r3, [r0, #16]
 }
    b238:	bd70      	pop	{r4, r5, r6, pc}
    b23a:	46c0      	nop			; (mov r8, r8)
    b23c:	00017969 	.word	0x00017969

0000b240 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b240:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b242:	6803      	ldr	r3, [r0, #0]
    b244:	6842      	ldr	r2, [r0, #4]
    b246:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    b248:	4b01      	ldr	r3, [pc, #4]	; (b250 <circular_buf_put+0x10>)
    b24a:	4798      	blx	r3
 }
    b24c:	bd10      	pop	{r4, pc}
    b24e:	46c0      	nop			; (mov r8, r8)
    b250:	0000b1ed 	.word	0x0000b1ed

0000b254 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b254:	7c02      	ldrb	r2, [r0, #16]
    b256:	2300      	movs	r3, #0
    b258:	2a00      	cmp	r2, #0
    b25a:	d105      	bne.n	b268 <circular_buf_empty+0x14>
    b25c:	6843      	ldr	r3, [r0, #4]
    b25e:	6880      	ldr	r0, [r0, #8]
    b260:	1a1b      	subs	r3, r3, r0
    b262:	4258      	negs	r0, r3
    b264:	4143      	adcs	r3, r0
    b266:	b2db      	uxtb	r3, r3
    b268:	0018      	movs	r0, r3
 }
    b26a:	4770      	bx	lr

0000b26c <circular_buf_get>:
 {
    b26c:	b570      	push	{r4, r5, r6, lr}
    b26e:	0004      	movs	r4, r0
    b270:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    b272:	4b0a      	ldr	r3, [pc, #40]	; (b29c <circular_buf_get+0x30>)
    b274:	4798      	blx	r3
    b276:	2800      	cmp	r0, #0
    b278:	d10d      	bne.n	b296 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    b27a:	6823      	ldr	r3, [r4, #0]
    b27c:	68a2      	ldr	r2, [r4, #8]
    b27e:	5c9b      	ldrb	r3, [r3, r2]
    b280:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    b282:	2300      	movs	r3, #0
    b284:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b286:	68a3      	ldr	r3, [r4, #8]
    b288:	1c58      	adds	r0, r3, #1
    b28a:	68e1      	ldr	r1, [r4, #12]
    b28c:	4b04      	ldr	r3, [pc, #16]	; (b2a0 <circular_buf_get+0x34>)
    b28e:	4798      	blx	r3
    b290:	60a1      	str	r1, [r4, #8]
		 r = 0;
    b292:	2000      	movs	r0, #0
 }
    b294:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    b296:	2001      	movs	r0, #1
    b298:	4240      	negs	r0, r0
	 return r;
    b29a:	e7fb      	b.n	b294 <circular_buf_get+0x28>
    b29c:	0000b255 	.word	0x0000b255
    b2a0:	000176e1 	.word	0x000176e1

0000b2a4 <start_buzzing>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    b2a4:	2208      	movs	r2, #8
    b2a6:	4b01      	ldr	r3, [pc, #4]	; (b2ac <start_buzzing+0x8>)
    b2a8:	619a      	str	r2, [r3, #24]
}

void start_buzzing()
{
	port_pin_set_output_level(buzzer_pin, true);
}
    b2aa:	4770      	bx	lr
    b2ac:	41004480 	.word	0x41004480

0000b2b0 <stop_buzzing>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    b2b0:	2208      	movs	r2, #8
    b2b2:	4b01      	ldr	r3, [pc, #4]	; (b2b8 <stop_buzzing+0x8>)
    b2b4:	615a      	str	r2, [r3, #20]

void stop_buzzing()
{
	port_pin_set_output_level(buzzer_pin, false);
}
    b2b6:	4770      	bx	lr
    b2b8:	41004480 	.word	0x41004480

0000b2bc <help>:
void help(){
    b2bc:	b510      	push	{r4, lr}
	SerialConsoleWriteString("\r\n");
    b2be:	4803      	ldr	r0, [pc, #12]	; (b2cc <help+0x10>)
    b2c0:	4c03      	ldr	r4, [pc, #12]	; (b2d0 <help+0x14>)
    b2c2:	47a0      	blx	r4
	SerialConsoleWriteString(
    b2c4:	4803      	ldr	r0, [pc, #12]	; (b2d4 <help+0x18>)
    b2c6:	47a0      	blx	r4
}
    b2c8:	bd10      	pop	{r4, pc}
    b2ca:	46c0      	nop			; (mov r8, r8)
    b2cc:	0001b574 	.word	0x0001b574
    b2d0:	0000b7f5 	.word	0x0000b7f5
    b2d4:	00019484 	.word	0x00019484

0000b2d8 <devName>:
void devName(){
    b2d8:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Brian Kwon\r\n");
    b2da:	4802      	ldr	r0, [pc, #8]	; (b2e4 <devName+0xc>)
    b2dc:	4b02      	ldr	r3, [pc, #8]	; (b2e8 <devName+0x10>)
    b2de:	4798      	blx	r3
}
    b2e0:	bd10      	pop	{r4, pc}
    b2e2:	46c0      	nop			; (mov r8, r8)
    b2e4:	0001945c 	.word	0x0001945c
    b2e8:	0000b7f5 	.word	0x0000b7f5

0000b2ec <ver_bl>:
void ver_bl(){
    b2ec:	b510      	push	{r4, lr}
	SerialConsoleWriteString("12.1.1\r\n");
    b2ee:	4802      	ldr	r0, [pc, #8]	; (b2f8 <ver_bl+0xc>)
    b2f0:	4b02      	ldr	r3, [pc, #8]	; (b2fc <ver_bl+0x10>)
    b2f2:	4798      	blx	r3
}
    b2f4:	bd10      	pop	{r4, pc}
    b2f6:	46c0      	nop			; (mov r8, r8)
    b2f8:	00019904 	.word	0x00019904
    b2fc:	0000b7f5 	.word	0x0000b7f5

0000b300 <ver_app>:
void ver_app(){
    b300:	b510      	push	{r4, lr}
	SerialConsoleWriteString("18.3.8\r\n");
    b302:	4802      	ldr	r0, [pc, #8]	; (b30c <ver_app+0xc>)
    b304:	4b02      	ldr	r3, [pc, #8]	; (b310 <ver_app+0x10>)
    b306:	4798      	blx	r3
}
    b308:	bd10      	pop	{r4, pc}
    b30a:	46c0      	nop			; (mov r8, r8)
    b30c:	000198f8 	.word	0x000198f8
    b310:	0000b7f5 	.word	0x0000b7f5

0000b314 <mac>:
void mac(){
    b314:	b510      	push	{r4, lr}
	SerialConsoleWriteString("91-26-96-C3-F5-7B\r\n");
    b316:	4802      	ldr	r0, [pc, #8]	; (b320 <mac+0xc>)
    b318:	4b02      	ldr	r3, [pc, #8]	; (b324 <mac+0x10>)
    b31a:	4798      	blx	r3
}
    b31c:	bd10      	pop	{r4, pc}
    b31e:	46c0      	nop			; (mov r8, r8)
    b320:	000197e0 	.word	0x000197e0
    b324:	0000b7f5 	.word	0x0000b7f5

0000b328 <ip>:
void ip(){
    b328:	b510      	push	{r4, lr}
	SerialConsoleWriteString("8.8.8.8\r\n");
    b32a:	4802      	ldr	r0, [pc, #8]	; (b334 <ip+0xc>)
    b32c:	4b02      	ldr	r3, [pc, #8]	; (b338 <ip+0x10>)
    b32e:	4798      	blx	r3
}
    b330:	bd10      	pop	{r4, pc}
    b332:	46c0      	nop			; (mov r8, r8)
    b334:	000197d4 	.word	0x000197d4
    b338:	0000b7f5 	.word	0x0000b7f5

0000b33c <read_ir>:

void read_ir()
{
    b33c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    b33e:	4b07      	ldr	r3, [pc, #28]	; (b35c <read_ir+0x20>)
    b340:	6a1c      	ldr	r4, [r3, #32]
	bool level=port_pin_get_input_level(ir_pin);
	SerialConsoleWriteString("Current value of IR_Sensor is:");
    b342:	4807      	ldr	r0, [pc, #28]	; (b360 <read_ir+0x24>)
    b344:	4b07      	ldr	r3, [pc, #28]	; (b364 <read_ir+0x28>)
    b346:	4798      	blx	r3
	if (level == false ) SerialConsoleWriteString("true\r\n"); //Why?
    b348:	02e3      	lsls	r3, r4, #11
    b34a:	d503      	bpl.n	b354 <read_ir+0x18>
	else SerialConsoleWriteString("false\r\n");
    b34c:	4806      	ldr	r0, [pc, #24]	; (b368 <read_ir+0x2c>)
    b34e:	4b05      	ldr	r3, [pc, #20]	; (b364 <read_ir+0x28>)
    b350:	4798      	blx	r3
}
    b352:	bd10      	pop	{r4, pc}
	if (level == false ) SerialConsoleWriteString("true\r\n"); //Why?
    b354:	4805      	ldr	r0, [pc, #20]	; (b36c <read_ir+0x30>)
    b356:	4b03      	ldr	r3, [pc, #12]	; (b364 <read_ir+0x28>)
    b358:	4798      	blx	r3
    b35a:	e7fa      	b.n	b352 <read_ir+0x16>
    b35c:	41004400 	.word	0x41004400
    b360:	00019804 	.word	0x00019804
    b364:	0000b7f5 	.word	0x0000b7f5
    b368:	0001982c 	.word	0x0001982c
    b36c:	00019824 	.word	0x00019824

0000b370 <setDeviceName>:
void setDeviceName(){
    b370:	b570      	push	{r4, r5, r6, lr}
	strcpy(nameofdevice, varinp);
    b372:	4d0d      	ldr	r5, [pc, #52]	; (b3a8 <setDeviceName+0x38>)
    b374:	490d      	ldr	r1, [pc, #52]	; (b3ac <setDeviceName+0x3c>)
    b376:	0028      	movs	r0, r5
    b378:	4b0d      	ldr	r3, [pc, #52]	; (b3b0 <setDeviceName+0x40>)
    b37a:	4798      	blx	r3
	strcpy(outstring,"Device name set to ");
    b37c:	4c0d      	ldr	r4, [pc, #52]	; (b3b4 <setDeviceName+0x44>)
    b37e:	2214      	movs	r2, #20
    b380:	490d      	ldr	r1, [pc, #52]	; (b3b8 <setDeviceName+0x48>)
    b382:	0020      	movs	r0, r4
    b384:	4b0d      	ldr	r3, [pc, #52]	; (b3bc <setDeviceName+0x4c>)
    b386:	4798      	blx	r3
	strcat(outstring, nameofdevice);
    b388:	0029      	movs	r1, r5
    b38a:	0020      	movs	r0, r4
    b38c:	4b0c      	ldr	r3, [pc, #48]	; (b3c0 <setDeviceName+0x50>)
    b38e:	4798      	blx	r3
	SerialConsoleWriteString(outstring);
    b390:	0020      	movs	r0, r4
    b392:	4d0c      	ldr	r5, [pc, #48]	; (b3c4 <setDeviceName+0x54>)
    b394:	47a8      	blx	r5
	SerialConsoleWriteString("\r\n");
    b396:	480c      	ldr	r0, [pc, #48]	; (b3c8 <setDeviceName+0x58>)
    b398:	47a8      	blx	r5
	memset(outstring, 0, 30); //clear outstring when done with it
    b39a:	221e      	movs	r2, #30
    b39c:	2100      	movs	r1, #0
    b39e:	0020      	movs	r0, r4
    b3a0:	4b0a      	ldr	r3, [pc, #40]	; (b3cc <setDeviceName+0x5c>)
    b3a2:	4798      	blx	r3
}
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	46c0      	nop			; (mov r8, r8)
    b3a8:	20000ffc 	.word	0x20000ffc
    b3ac:	20000fe8 	.word	0x20000fe8
    b3b0:	00017edb 	.word	0x00017edb
    b3b4:	20000fc8 	.word	0x20000fc8
    b3b8:	00019844 	.word	0x00019844
    b3bc:	00017991 	.word	0x00017991
    b3c0:	00017e91 	.word	0x00017e91
    b3c4:	0000b7f5 	.word	0x0000b7f5
    b3c8:	0001b574 	.word	0x0001b574
    b3cc:	000179c7 	.word	0x000179c7

0000b3d0 <getDeviceName>:
void getDeviceName(){
    b3d0:	b570      	push	{r4, r5, r6, lr}
	strcpy(outstring, "Device name is ");
    b3d2:	4c0a      	ldr	r4, [pc, #40]	; (b3fc <getDeviceName+0x2c>)
    b3d4:	2210      	movs	r2, #16
    b3d6:	490a      	ldr	r1, [pc, #40]	; (b400 <getDeviceName+0x30>)
    b3d8:	0020      	movs	r0, r4
    b3da:	4b0a      	ldr	r3, [pc, #40]	; (b404 <getDeviceName+0x34>)
    b3dc:	4798      	blx	r3
	strcat(outstring, nameofdevice);
    b3de:	490a      	ldr	r1, [pc, #40]	; (b408 <getDeviceName+0x38>)
    b3e0:	0020      	movs	r0, r4
    b3e2:	4b0a      	ldr	r3, [pc, #40]	; (b40c <getDeviceName+0x3c>)
    b3e4:	4798      	blx	r3
	SerialConsoleWriteString(outstring);
    b3e6:	0020      	movs	r0, r4
    b3e8:	4d09      	ldr	r5, [pc, #36]	; (b410 <getDeviceName+0x40>)
    b3ea:	47a8      	blx	r5
	SerialConsoleWriteString("\r\n");
    b3ec:	4809      	ldr	r0, [pc, #36]	; (b414 <getDeviceName+0x44>)
    b3ee:	47a8      	blx	r5
	memset(outstring, 0, 30); //clear outstring when done with it
    b3f0:	221e      	movs	r2, #30
    b3f2:	2100      	movs	r1, #0
    b3f4:	0020      	movs	r0, r4
    b3f6:	4b08      	ldr	r3, [pc, #32]	; (b418 <getDeviceName+0x48>)
    b3f8:	4798      	blx	r3
}
    b3fa:	bd70      	pop	{r4, r5, r6, pc}
    b3fc:	20000fc8 	.word	0x20000fc8
    b400:	00019474 	.word	0x00019474
    b404:	00017991 	.word	0x00017991
    b408:	20000ffc 	.word	0x20000ffc
    b40c:	00017e91 	.word	0x00017e91
    b410:	0000b7f5 	.word	0x0000b7f5
    b414:	0001b574 	.word	0x0001b574
    b418:	000179c7 	.word	0x000179c7

0000b41c <pub_battery>:
	strcpy(nameofdevice, "not yet set. Use setDeviceName"); //device name stored in RAM
	inp = NULL; //pointer for input variable
	
}

void pub_battery(){
    b41c:	b530      	push	{r4, r5, lr}
    b41e:	b093      	sub	sp, #76	; 0x4c
	volatile char mqtt_msg[64]= "{\"d\":{\"bat_level\":50}}";
    b420:	ac02      	add	r4, sp, #8
    b422:	4b0f      	ldr	r3, [pc, #60]	; (b460 <pub_battery+0x44>)
    b424:	0022      	movs	r2, r4
    b426:	cb23      	ldmia	r3!, {r0, r1, r5}
    b428:	c223      	stmia	r2!, {r0, r1, r5}
    b42a:	cb03      	ldmia	r3!, {r0, r1}
    b42c:	c203      	stmia	r2!, {r0, r1}
    b42e:	8819      	ldrh	r1, [r3, #0]
    b430:	8011      	strh	r1, [r2, #0]
    b432:	789b      	ldrb	r3, [r3, #2]
    b434:	7093      	strb	r3, [r2, #2]
    b436:	2229      	movs	r2, #41	; 0x29
    b438:	2100      	movs	r1, #0
    b43a:	201f      	movs	r0, #31
    b43c:	4468      	add	r0, sp
    b43e:	4b09      	ldr	r3, [pc, #36]	; (b464 <pub_battery+0x48>)
    b440:	4798      	blx	r3
	mqtt_publish(&mqtt_instance, BATTERY_TOPIC, mqtt_msg, strlen(mqtt_msg), QOS, RETAIN);	// change qos = and retain dynamicall
    b442:	0020      	movs	r0, r4
    b444:	4b08      	ldr	r3, [pc, #32]	; (b468 <pub_battery+0x4c>)
    b446:	4798      	blx	r3
    b448:	0003      	movs	r3, r0
    b44a:	2200      	movs	r2, #0
    b44c:	9201      	str	r2, [sp, #4]
    b44e:	3202      	adds	r2, #2
    b450:	9200      	str	r2, [sp, #0]
    b452:	0022      	movs	r2, r4
    b454:	4905      	ldr	r1, [pc, #20]	; (b46c <pub_battery+0x50>)
    b456:	4806      	ldr	r0, [pc, #24]	; (b470 <pub_battery+0x54>)
    b458:	4c06      	ldr	r4, [pc, #24]	; (b474 <pub_battery+0x58>)
    b45a:	47a0      	blx	r4
}
    b45c:	b013      	add	sp, #76	; 0x4c
    b45e:	bd30      	pop	{r4, r5, pc}
    b460:	00019378 	.word	0x00019378
    b464:	000179c7 	.word	0x000179c7
    b468:	00017f27 	.word	0x00017f27
    b46c:	000197f4 	.word	0x000197f4
    b470:	20001030 	.word	0x20001030
    b474:	00014c79 	.word	0x00014c79

0000b478 <request_pill>:

void request_pill(){
    b478:	b530      	push	{r4, r5, lr}
    b47a:	b093      	sub	sp, #76	; 0x4c
	volatile char mqtt_msg[64]= "{\"d\":{\"pill_request\":true}}";
    b47c:	ac02      	add	r4, sp, #8
    b47e:	4b0e      	ldr	r3, [pc, #56]	; (b4b8 <request_pill+0x40>)
    b480:	3340      	adds	r3, #64	; 0x40
    b482:	0022      	movs	r2, r4
    b484:	cb23      	ldmia	r3!, {r0, r1, r5}
    b486:	c223      	stmia	r2!, {r0, r1, r5}
    b488:	cb23      	ldmia	r3!, {r0, r1, r5}
    b48a:	c223      	stmia	r2!, {r0, r1, r5}
    b48c:	681b      	ldr	r3, [r3, #0]
    b48e:	6013      	str	r3, [r2, #0]
    b490:	2224      	movs	r2, #36	; 0x24
    b492:	2100      	movs	r1, #0
    b494:	a809      	add	r0, sp, #36	; 0x24
    b496:	4b09      	ldr	r3, [pc, #36]	; (b4bc <request_pill+0x44>)
    b498:	4798      	blx	r3
	mqtt_publish(&mqtt_instance, PILL_REQUEST_TOPIC, mqtt_msg, strlen(mqtt_msg), QOS, RETAIN);
    b49a:	0020      	movs	r0, r4
    b49c:	4b08      	ldr	r3, [pc, #32]	; (b4c0 <request_pill+0x48>)
    b49e:	4798      	blx	r3
    b4a0:	0003      	movs	r3, r0
    b4a2:	2200      	movs	r2, #0
    b4a4:	9201      	str	r2, [sp, #4]
    b4a6:	3202      	adds	r2, #2
    b4a8:	9200      	str	r2, [sp, #0]
    b4aa:	0022      	movs	r2, r4
    b4ac:	4905      	ldr	r1, [pc, #20]	; (b4c4 <request_pill+0x4c>)
    b4ae:	4806      	ldr	r0, [pc, #24]	; (b4c8 <request_pill+0x50>)
    b4b0:	4c06      	ldr	r4, [pc, #24]	; (b4cc <request_pill+0x54>)
    b4b2:	47a0      	blx	r4
}
    b4b4:	b013      	add	sp, #76	; 0x4c
    b4b6:	bd30      	pop	{r4, r5, pc}
    b4b8:	00019378 	.word	0x00019378
    b4bc:	000179c7 	.word	0x000179c7
    b4c0:	00017f27 	.word	0x00017f27
    b4c4:	00019834 	.word	0x00019834
    b4c8:	20001030 	.word	0x20001030
    b4cc:	00014c79 	.word	0x00014c79

0000b4d0 <sound_alarm>:

void sound_alarm(){
    b4d0:	b530      	push	{r4, r5, lr}
    b4d2:	b093      	sub	sp, #76	; 0x4c
	volatile char mqtt_msg[64]= "{\"d\":{\"alarm\":true}}";
    b4d4:	ac02      	add	r4, sp, #8
    b4d6:	4b0e      	ldr	r3, [pc, #56]	; (b510 <sound_alarm+0x40>)
    b4d8:	0022      	movs	r2, r4
    b4da:	cb23      	ldmia	r3!, {r0, r1, r5}
    b4dc:	c223      	stmia	r2!, {r0, r1, r5}
    b4de:	cb03      	ldmia	r3!, {r0, r1}
    b4e0:	c203      	stmia	r2!, {r0, r1}
    b4e2:	781b      	ldrb	r3, [r3, #0]
    b4e4:	7013      	strb	r3, [r2, #0]
    b4e6:	222b      	movs	r2, #43	; 0x2b
    b4e8:	2100      	movs	r1, #0
    b4ea:	201d      	movs	r0, #29
    b4ec:	4468      	add	r0, sp
    b4ee:	4b09      	ldr	r3, [pc, #36]	; (b514 <sound_alarm+0x44>)
    b4f0:	4798      	blx	r3
	mqtt_publish(&mqtt_instance, ALARM_TOPIC, mqtt_msg, strlen(mqtt_msg), QOS, RETAIN);
    b4f2:	0020      	movs	r0, r4
    b4f4:	4b08      	ldr	r3, [pc, #32]	; (b518 <sound_alarm+0x48>)
    b4f6:	4798      	blx	r3
    b4f8:	0003      	movs	r3, r0
    b4fa:	2200      	movs	r2, #0
    b4fc:	9201      	str	r2, [sp, #4]
    b4fe:	3202      	adds	r2, #2
    b500:	9200      	str	r2, [sp, #0]
    b502:	0022      	movs	r2, r4
    b504:	4905      	ldr	r1, [pc, #20]	; (b51c <sound_alarm+0x4c>)
    b506:	4806      	ldr	r0, [pc, #24]	; (b520 <sound_alarm+0x50>)
    b508:	4c06      	ldr	r4, [pc, #24]	; (b524 <sound_alarm+0x54>)
    b50a:	47a0      	blx	r4
    b50c:	b013      	add	sp, #76	; 0x4c
    b50e:	bd30      	pop	{r4, r5, pc}
    b510:	000193f8 	.word	0x000193f8
    b514:	000179c7 	.word	0x000179c7
    b518:	00017f27 	.word	0x00017f27
    b51c:	00019858 	.word	0x00019858
    b520:	20001030 	.word	0x20001030
    b524:	00014c79 	.word	0x00014c79

0000b528 <execConsoleCommand>:
void execConsoleCommand(char *name){
    b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b52a:	0006      	movs	r6, r0
	inp = NULL;
    b52c:	4d17      	ldr	r5, [pc, #92]	; (b58c <execConsoleCommand+0x64>)
    b52e:	2300      	movs	r3, #0
    b530:	602b      	str	r3, [r5, #0]
	inp = strchr(name,' '); //get pointer of space character
    b532:	2120      	movs	r1, #32
    b534:	4b16      	ldr	r3, [pc, #88]	; (b590 <execConsoleCommand+0x68>)
    b536:	4798      	blx	r3
    b538:	1e04      	subs	r4, r0, #0
    b53a:	6028      	str	r0, [r5, #0]
	if(inp != NULL){ // if we find a space
    b53c:	d00b      	beq.n	b556 <execConsoleCommand+0x2e>
		memset(varinp, 0, 20); // clear input variable
    b53e:	4d15      	ldr	r5, [pc, #84]	; (b594 <execConsoleCommand+0x6c>)
    b540:	2214      	movs	r2, #20
    b542:	2100      	movs	r1, #0
    b544:	0028      	movs	r0, r5
    b546:	4b14      	ldr	r3, [pc, #80]	; (b598 <execConsoleCommand+0x70>)
    b548:	4798      	blx	r3
		strcpy(varinp, (inp +1)); //copy everything after the space into new variable
    b54a:	1c61      	adds	r1, r4, #1
    b54c:	0028      	movs	r0, r5
    b54e:	4b13      	ldr	r3, [pc, #76]	; (b59c <execConsoleCommand+0x74>)
    b550:	4798      	blx	r3
		*inp = '\0'; //terminate the string on the space
    b552:	2300      	movs	r3, #0
    b554:	7023      	strb	r3, [r4, #0]
    b556:	4d12      	ldr	r5, [pc, #72]	; (b5a0 <execConsoleCommand+0x78>)
	for (int i = 0; i < NUMOFCMDS; i++){
    b558:	2400      	movs	r4, #0
		if (strcmp(name, commandarr[i].name) == 0){
    b55a:	4f12      	ldr	r7, [pc, #72]	; (b5a4 <execConsoleCommand+0x7c>)
    b55c:	6829      	ldr	r1, [r5, #0]
    b55e:	0030      	movs	r0, r6
    b560:	47b8      	blx	r7
    b562:	2800      	cmp	r0, #0
    b564:	d007      	beq.n	b576 <execConsoleCommand+0x4e>
	for (int i = 0; i < NUMOFCMDS; i++){
    b566:	3401      	adds	r4, #1
    b568:	3508      	adds	r5, #8
    b56a:	2c0e      	cmp	r4, #14
    b56c:	d1f6      	bne.n	b55c <execConsoleCommand+0x34>
	SerialConsoleWriteString("ERROR\r\n"); // if we get to here there's no match
    b56e:	480e      	ldr	r0, [pc, #56]	; (b5a8 <execConsoleCommand+0x80>)
    b570:	4b0e      	ldr	r3, [pc, #56]	; (b5ac <execConsoleCommand+0x84>)
    b572:	4798      	blx	r3
}
    b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			commandarr[i].cmd();
    b576:	00e4      	lsls	r4, r4, #3
    b578:	4b09      	ldr	r3, [pc, #36]	; (b5a0 <execConsoleCommand+0x78>)
    b57a:	191c      	adds	r4, r3, r4
    b57c:	6863      	ldr	r3, [r4, #4]
    b57e:	4798      	blx	r3
			memset(varinp, 0, 20); // clear input variable -- prevents using the <devicename> input from the previous function, still bugs on error <deviceName>
    b580:	2214      	movs	r2, #20
    b582:	2100      	movs	r1, #0
    b584:	4803      	ldr	r0, [pc, #12]	; (b594 <execConsoleCommand+0x6c>)
    b586:	4b04      	ldr	r3, [pc, #16]	; (b598 <execConsoleCommand+0x70>)
    b588:	4798      	blx	r3
			return;
    b58a:	e7f3      	b.n	b574 <execConsoleCommand+0x4c>
    b58c:	20000fac 	.word	0x20000fac
    b590:	00017eab 	.word	0x00017eab
    b594:	20000fe8 	.word	0x20000fe8
    b598:	000179c7 	.word	0x000179c7
    b59c:	00017edb 	.word	0x00017edb
    b5a0:	20000000 	.word	0x20000000
    b5a4:	00017ec7 	.word	0x00017ec7
    b5a8:	0001946c 	.word	0x0001946c
    b5ac:	0000b7f5 	.word	0x0000b7f5

0000b5b0 <ReadIntoBuffer>:
void ReadIntoBuffer(){
    b5b0:	b570      	push	{r4, r5, r6, lr}
	if(rxBuffRdy > 0){
    b5b2:	4b21      	ldr	r3, [pc, #132]	; (b638 <ReadIntoBuffer+0x88>)
    b5b4:	781b      	ldrb	r3, [r3, #0]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d100      	bne.n	b5bc <ReadIntoBuffer+0xc>
}
    b5ba:	bd70      	pop	{r4, r5, r6, pc}
		if(SerialConsoleReadCharacter(&command[cmditer]) == 0){
    b5bc:	4b1f      	ldr	r3, [pc, #124]	; (b63c <ReadIntoBuffer+0x8c>)
    b5be:	7818      	ldrb	r0, [r3, #0]
    b5c0:	4b1f      	ldr	r3, [pc, #124]	; (b640 <ReadIntoBuffer+0x90>)
    b5c2:	18c0      	adds	r0, r0, r3
    b5c4:	4b1f      	ldr	r3, [pc, #124]	; (b644 <ReadIntoBuffer+0x94>)
    b5c6:	4798      	blx	r3
    b5c8:	2800      	cmp	r0, #0
    b5ca:	d1f6      	bne.n	b5ba <ReadIntoBuffer+0xa>
			if(command[cmditer] == '\r'){ //carriage return detect
    b5cc:	4b1b      	ldr	r3, [pc, #108]	; (b63c <ReadIntoBuffer+0x8c>)
    b5ce:	781b      	ldrb	r3, [r3, #0]
    b5d0:	4a1b      	ldr	r2, [pc, #108]	; (b640 <ReadIntoBuffer+0x90>)
    b5d2:	5cd3      	ldrb	r3, [r2, r3]
    b5d4:	2b0d      	cmp	r3, #13
    b5d6:	d00e      	beq.n	b5f6 <ReadIntoBuffer+0x46>
			if(command[cmditer] == '\b'){
    b5d8:	4b18      	ldr	r3, [pc, #96]	; (b63c <ReadIntoBuffer+0x8c>)
    b5da:	781b      	ldrb	r3, [r3, #0]
    b5dc:	4a18      	ldr	r2, [pc, #96]	; (b640 <ReadIntoBuffer+0x90>)
    b5de:	5cd3      	ldrb	r3, [r2, r3]
    b5e0:	2b08      	cmp	r3, #8
    b5e2:	d01b      	beq.n	b61c <ReadIntoBuffer+0x6c>
			cmditer ++;
    b5e4:	4a15      	ldr	r2, [pc, #84]	; (b63c <ReadIntoBuffer+0x8c>)
    b5e6:	7813      	ldrb	r3, [r2, #0]
    b5e8:	3301      	adds	r3, #1
    b5ea:	7013      	strb	r3, [r2, #0]
			rxBuffRdy --;
    b5ec:	4a12      	ldr	r2, [pc, #72]	; (b638 <ReadIntoBuffer+0x88>)
    b5ee:	7813      	ldrb	r3, [r2, #0]
    b5f0:	3b01      	subs	r3, #1
    b5f2:	7013      	strb	r3, [r2, #0]
}
    b5f4:	e7e1      	b.n	b5ba <ReadIntoBuffer+0xa>
				SerialConsoleWriteString("\r\n"); // fixing mirroring for carriage return
    b5f6:	4814      	ldr	r0, [pc, #80]	; (b648 <ReadIntoBuffer+0x98>)
    b5f8:	4b14      	ldr	r3, [pc, #80]	; (b64c <ReadIntoBuffer+0x9c>)
    b5fa:	4798      	blx	r3
				command[cmditer] = '\0'; // turn into c string for processing
    b5fc:	4c10      	ldr	r4, [pc, #64]	; (b640 <ReadIntoBuffer+0x90>)
    b5fe:	4d0f      	ldr	r5, [pc, #60]	; (b63c <ReadIntoBuffer+0x8c>)
    b600:	782b      	ldrb	r3, [r5, #0]
    b602:	2200      	movs	r2, #0
    b604:	54e2      	strb	r2, [r4, r3]
				execConsoleCommand(&command);
    b606:	0020      	movs	r0, r4
    b608:	4b11      	ldr	r3, [pc, #68]	; (b650 <ReadIntoBuffer+0xa0>)
    b60a:	4798      	blx	r3
				memset(command, 0, 20);//clear command buffer when done with command
    b60c:	2214      	movs	r2, #20
    b60e:	2100      	movs	r1, #0
    b610:	0020      	movs	r0, r4
    b612:	4b10      	ldr	r3, [pc, #64]	; (b654 <ReadIntoBuffer+0xa4>)
    b614:	4798      	blx	r3
				cmditer = -1; //reset index once buffer is cleared
    b616:	23ff      	movs	r3, #255	; 0xff
    b618:	702b      	strb	r3, [r5, #0]
    b61a:	e7dd      	b.n	b5d8 <ReadIntoBuffer+0x28>
				SerialConsoleWriteString(bkspc);
    b61c:	480e      	ldr	r0, [pc, #56]	; (b658 <ReadIntoBuffer+0xa8>)
    b61e:	4b0b      	ldr	r3, [pc, #44]	; (b64c <ReadIntoBuffer+0x9c>)
    b620:	4798      	blx	r3
				command[cmditer] = '\0';
    b622:	4906      	ldr	r1, [pc, #24]	; (b63c <ReadIntoBuffer+0x8c>)
    b624:	780b      	ldrb	r3, [r1, #0]
    b626:	4806      	ldr	r0, [pc, #24]	; (b640 <ReadIntoBuffer+0x90>)
    b628:	2400      	movs	r4, #0
    b62a:	54c4      	strb	r4, [r0, r3]
				cmditer --;
    b62c:	1e5a      	subs	r2, r3, #1
				command[cmditer]= '\0';
    b62e:	b2d2      	uxtb	r2, r2
    b630:	5484      	strb	r4, [r0, r2]
				cmditer --;
    b632:	3b02      	subs	r3, #2
    b634:	700b      	strb	r3, [r1, #0]
    b636:	e7d5      	b.n	b5e4 <ReadIntoBuffer+0x34>
    b638:	20000fb0 	.word	0x20000fb0
    b63c:	20000fb1 	.word	0x20000fb1
    b640:	20000fb4 	.word	0x20000fb4
    b644:	0000b8ad 	.word	0x0000b8ad
    b648:	0001b574 	.word	0x0001b574
    b64c:	0000b7f5 	.word	0x0000b7f5
    b650:	0000b529 	.word	0x0000b529
    b654:	000179c7 	.word	0x000179c7
    b658:	00019438 	.word	0x00019438

0000b65c <cli_init>:
void cli_init(struct mqtt_module *mqtt_inst_ref){
    b65c:	b570      	push	{r4, r5, r6, lr}
    b65e:	0001      	movs	r1, r0
	mqtt_instance = *mqtt_inst_ref;
    b660:	2238      	movs	r2, #56	; 0x38
    b662:	4807      	ldr	r0, [pc, #28]	; (b680 <cli_init+0x24>)
    b664:	4d07      	ldr	r5, [pc, #28]	; (b684 <cli_init+0x28>)
    b666:	47a8      	blx	r5
	cmditer=0; //location in read in command buffer
    b668:	2400      	movs	r4, #0
    b66a:	4b07      	ldr	r3, [pc, #28]	; (b688 <cli_init+0x2c>)
    b66c:	701c      	strb	r4, [r3, #0]
	rxBuffRdy = 0;
    b66e:	4b07      	ldr	r3, [pc, #28]	; (b68c <cli_init+0x30>)
    b670:	701c      	strb	r4, [r3, #0]
	strcpy(nameofdevice, "not yet set. Use setDeviceName"); //device name stored in RAM
    b672:	221f      	movs	r2, #31
    b674:	4906      	ldr	r1, [pc, #24]	; (b690 <cli_init+0x34>)
    b676:	4807      	ldr	r0, [pc, #28]	; (b694 <cli_init+0x38>)
    b678:	47a8      	blx	r5
	inp = NULL; //pointer for input variable
    b67a:	4b07      	ldr	r3, [pc, #28]	; (b698 <cli_init+0x3c>)
    b67c:	601c      	str	r4, [r3, #0]
}
    b67e:	bd70      	pop	{r4, r5, r6, pc}
    b680:	20001030 	.word	0x20001030
    b684:	00017991 	.word	0x00017991
    b688:	20000fb1 	.word	0x20000fb1
    b68c:	20000fb0 	.word	0x20000fb0
    b690:	0001943c 	.word	0x0001943c
    b694:	20000ffc 	.word	0x20000ffc
    b698:	20000fac 	.word	0x20000fac

0000b69c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    b69c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    b69e:	4b06      	ldr	r3, [pc, #24]	; (b6b8 <usart_write_callback+0x1c>)
    b6a0:	6818      	ldr	r0, [r3, #0]
    b6a2:	4906      	ldr	r1, [pc, #24]	; (b6bc <usart_write_callback+0x20>)
    b6a4:	4b06      	ldr	r3, [pc, #24]	; (b6c0 <usart_write_callback+0x24>)
    b6a6:	4798      	blx	r3
    b6a8:	1c43      	adds	r3, r0, #1
    b6aa:	d004      	beq.n	b6b6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b6ac:	2201      	movs	r2, #1
    b6ae:	4903      	ldr	r1, [pc, #12]	; (b6bc <usart_write_callback+0x20>)
    b6b0:	4804      	ldr	r0, [pc, #16]	; (b6c4 <usart_write_callback+0x28>)
    b6b2:	4b05      	ldr	r3, [pc, #20]	; (b6c8 <usart_write_callback+0x2c>)
    b6b4:	4798      	blx	r3
	}
	
}
    b6b6:	bd10      	pop	{r4, pc}
    b6b8:	200014a8 	.word	0x200014a8
    b6bc:	200014a4 	.word	0x200014a4
    b6c0:	0000b26d 	.word	0x0000b26d
    b6c4:	20001068 	.word	0x20001068
    b6c8:	00011119 	.word	0x00011119

0000b6cc <InitializeSerialConsole>:
{
    b6cc:	b530      	push	{r4, r5, lr}
    b6ce:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    b6d0:	2580      	movs	r5, #128	; 0x80
    b6d2:	00ad      	lsls	r5, r5, #2
    b6d4:	0029      	movs	r1, r5
    b6d6:	4836      	ldr	r0, [pc, #216]	; (b7b0 <InitializeSerialConsole+0xe4>)
    b6d8:	4c36      	ldr	r4, [pc, #216]	; (b7b4 <InitializeSerialConsole+0xe8>)
    b6da:	47a0      	blx	r4
    b6dc:	4b36      	ldr	r3, [pc, #216]	; (b7b8 <InitializeSerialConsole+0xec>)
    b6de:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    b6e0:	0029      	movs	r1, r5
    b6e2:	4836      	ldr	r0, [pc, #216]	; (b7bc <InitializeSerialConsole+0xf0>)
    b6e4:	47a0      	blx	r4
    b6e6:	4b36      	ldr	r3, [pc, #216]	; (b7c0 <InitializeSerialConsole+0xf4>)
    b6e8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b6ea:	2380      	movs	r3, #128	; 0x80
    b6ec:	05db      	lsls	r3, r3, #23
    b6ee:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b6f0:	2300      	movs	r3, #0
    b6f2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b6f4:	22ff      	movs	r2, #255	; 0xff
    b6f6:	4669      	mov	r1, sp
    b6f8:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b6fa:	2200      	movs	r2, #0
    b6fc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b6fe:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b700:	2101      	movs	r1, #1
    b702:	2024      	movs	r0, #36	; 0x24
    b704:	466c      	mov	r4, sp
    b706:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b708:	3001      	adds	r0, #1
    b70a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b70c:	3125      	adds	r1, #37	; 0x25
    b70e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b710:	3101      	adds	r1, #1
    b712:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b714:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b716:	3105      	adds	r1, #5
    b718:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b71a:	3101      	adds	r1, #1
    b71c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b71e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b720:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b722:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b724:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b726:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b728:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b72a:	2313      	movs	r3, #19
    b72c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b72e:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    b730:	23e1      	movs	r3, #225	; 0xe1
    b732:	025b      	lsls	r3, r3, #9
    b734:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b736:	23c4      	movs	r3, #196	; 0xc4
    b738:	039b      	lsls	r3, r3, #14
    b73a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b73c:	2301      	movs	r3, #1
    b73e:	425b      	negs	r3, r3
    b740:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b742:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b744:	4b1f      	ldr	r3, [pc, #124]	; (b7c4 <InitializeSerialConsole+0xf8>)
    b746:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b748:	4b1f      	ldr	r3, [pc, #124]	; (b7c8 <InitializeSerialConsole+0xfc>)
    b74a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    b74c:	4d1f      	ldr	r5, [pc, #124]	; (b7cc <InitializeSerialConsole+0x100>)
    b74e:	4c20      	ldr	r4, [pc, #128]	; (b7d0 <InitializeSerialConsole+0x104>)
    b750:	466a      	mov	r2, sp
    b752:	4920      	ldr	r1, [pc, #128]	; (b7d4 <InitializeSerialConsole+0x108>)
    b754:	0028      	movs	r0, r5
    b756:	47a0      	blx	r4
    b758:	2800      	cmp	r0, #0
    b75a:	d1f9      	bne.n	b750 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b75c:	4d1b      	ldr	r5, [pc, #108]	; (b7cc <InitializeSerialConsole+0x100>)
    b75e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b760:	0020      	movs	r0, r4
    b762:	4b1d      	ldr	r3, [pc, #116]	; (b7d8 <InitializeSerialConsole+0x10c>)
    b764:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b766:	231f      	movs	r3, #31
    b768:	4018      	ands	r0, r3
    b76a:	3b1e      	subs	r3, #30
    b76c:	4083      	lsls	r3, r0
    b76e:	4a1b      	ldr	r2, [pc, #108]	; (b7dc <InitializeSerialConsole+0x110>)
    b770:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b772:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b774:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b776:	2b00      	cmp	r3, #0
    b778:	d1fc      	bne.n	b774 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b77a:	6823      	ldr	r3, [r4, #0]
    b77c:	2202      	movs	r2, #2
    b77e:	4313      	orrs	r3, r2
    b780:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    b782:	4c12      	ldr	r4, [pc, #72]	; (b7cc <InitializeSerialConsole+0x100>)
    b784:	2200      	movs	r2, #0
    b786:	4916      	ldr	r1, [pc, #88]	; (b7e0 <InitializeSerialConsole+0x114>)
    b788:	0020      	movs	r0, r4
    b78a:	4d16      	ldr	r5, [pc, #88]	; (b7e4 <InitializeSerialConsole+0x118>)
    b78c:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    b78e:	2201      	movs	r2, #1
    b790:	4915      	ldr	r1, [pc, #84]	; (b7e8 <InitializeSerialConsole+0x11c>)
    b792:	0020      	movs	r0, r4
    b794:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b796:	2231      	movs	r2, #49	; 0x31
    b798:	5ca3      	ldrb	r3, [r4, r2]
    b79a:	2103      	movs	r1, #3
    b79c:	430b      	orrs	r3, r1
    b79e:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    b7a0:	3a30      	subs	r2, #48	; 0x30
    b7a2:	4912      	ldr	r1, [pc, #72]	; (b7ec <InitializeSerialConsole+0x120>)
    b7a4:	0020      	movs	r0, r4
    b7a6:	4b12      	ldr	r3, [pc, #72]	; (b7f0 <InitializeSerialConsole+0x124>)
    b7a8:	4798      	blx	r3
}
    b7aa:	b011      	add	sp, #68	; 0x44
    b7ac:	bd30      	pop	{r4, r5, pc}
    b7ae:	46c0      	nop			; (mov r8, r8)
    b7b0:	200012a4 	.word	0x200012a4
    b7b4:	0000b221 	.word	0x0000b221
    b7b8:	2000109c 	.word	0x2000109c
    b7bc:	200010a4 	.word	0x200010a4
    b7c0:	200014a8 	.word	0x200014a8
    b7c4:	002a0003 	.word	0x002a0003
    b7c8:	002b0003 	.word	0x002b0003
    b7cc:	20001068 	.word	0x20001068
    b7d0:	00010c95 	.word	0x00010c95
    b7d4:	42001800 	.word	0x42001800
    b7d8:	00010511 	.word	0x00010511
    b7dc:	e000e100 	.word	0xe000e100
    b7e0:	0000b69d 	.word	0x0000b69d
    b7e4:	00011101 	.word	0x00011101
    b7e8:	0000b869 	.word	0x0000b869
    b7ec:	200010a0 	.word	0x200010a0
    b7f0:	00011139 	.word	0x00011139

0000b7f4 <SerialConsoleWriteString>:
{
    b7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7f6:	46c6      	mov	lr, r8
    b7f8:	b500      	push	{lr}
    b7fa:	0005      	movs	r5, r0
    b7fc:	2400      	movs	r4, #0
	if(string != NULL)
    b7fe:	2800      	cmp	r0, #0
    b800:	d012      	beq.n	b828 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
    b802:	4e11      	ldr	r6, [pc, #68]	; (b848 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
    b804:	4f11      	ldr	r7, [pc, #68]	; (b84c <SerialConsoleWriteString+0x58>)
    b806:	4b12      	ldr	r3, [pc, #72]	; (b850 <SerialConsoleWriteString+0x5c>)
    b808:	4698      	mov	r8, r3
    b80a:	e003      	b.n	b814 <SerialConsoleWriteString+0x20>
    b80c:	5d29      	ldrb	r1, [r5, r4]
    b80e:	6838      	ldr	r0, [r7, #0]
    b810:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    b812:	3401      	adds	r4, #1
    b814:	0028      	movs	r0, r5
    b816:	47b0      	blx	r6
    b818:	4284      	cmp	r4, r0
    b81a:	d3f7      	bcc.n	b80c <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    b81c:	2101      	movs	r1, #1
    b81e:	480d      	ldr	r0, [pc, #52]	; (b854 <SerialConsoleWriteString+0x60>)
    b820:	4b0d      	ldr	r3, [pc, #52]	; (b858 <SerialConsoleWriteString+0x64>)
    b822:	4798      	blx	r3
    b824:	2800      	cmp	r0, #0
    b826:	d002      	beq.n	b82e <SerialConsoleWriteString+0x3a>
}
    b828:	bc04      	pop	{r2}
    b82a:	4690      	mov	r8, r2
    b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    b82e:	4c0b      	ldr	r4, [pc, #44]	; (b85c <SerialConsoleWriteString+0x68>)
    b830:	4b06      	ldr	r3, [pc, #24]	; (b84c <SerialConsoleWriteString+0x58>)
    b832:	6818      	ldr	r0, [r3, #0]
    b834:	0021      	movs	r1, r4
    b836:	4b0a      	ldr	r3, [pc, #40]	; (b860 <SerialConsoleWriteString+0x6c>)
    b838:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b83a:	2201      	movs	r2, #1
    b83c:	0021      	movs	r1, r4
    b83e:	4805      	ldr	r0, [pc, #20]	; (b854 <SerialConsoleWriteString+0x60>)
    b840:	4b08      	ldr	r3, [pc, #32]	; (b864 <SerialConsoleWriteString+0x70>)
    b842:	4798      	blx	r3
}
    b844:	e7f0      	b.n	b828 <SerialConsoleWriteString+0x34>
    b846:	46c0      	nop			; (mov r8, r8)
    b848:	00017f27 	.word	0x00017f27
    b84c:	200014a8 	.word	0x200014a8
    b850:	0000b241 	.word	0x0000b241
    b854:	20001068 	.word	0x20001068
    b858:	00011159 	.word	0x00011159
    b85c:	200014a4 	.word	0x200014a4
    b860:	0000b26d 	.word	0x0000b26d
    b864:	00011119 	.word	0x00011119

0000b868 <usart_read_callback>:
{
    b868:	b510      	push	{r4, lr}
	SerialConsoleWriteString(&latestRx);
    b86a:	4c09      	ldr	r4, [pc, #36]	; (b890 <usart_read_callback+0x28>)
    b86c:	0020      	movs	r0, r4
    b86e:	4b09      	ldr	r3, [pc, #36]	; (b894 <usart_read_callback+0x2c>)
    b870:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    b872:	7821      	ldrb	r1, [r4, #0]
    b874:	4b08      	ldr	r3, [pc, #32]	; (b898 <usart_read_callback+0x30>)
    b876:	6818      	ldr	r0, [r3, #0]
    b878:	4b08      	ldr	r3, [pc, #32]	; (b89c <usart_read_callback+0x34>)
    b87a:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    b87c:	2201      	movs	r2, #1
    b87e:	0021      	movs	r1, r4
    b880:	4807      	ldr	r0, [pc, #28]	; (b8a0 <usart_read_callback+0x38>)
    b882:	4b08      	ldr	r3, [pc, #32]	; (b8a4 <usart_read_callback+0x3c>)
    b884:	4798      	blx	r3
	rxBuffRdy = rxBuffRdy + 1;;
    b886:	4a08      	ldr	r2, [pc, #32]	; (b8a8 <usart_read_callback+0x40>)
    b888:	7813      	ldrb	r3, [r2, #0]
    b88a:	3301      	adds	r3, #1
    b88c:	7013      	strb	r3, [r2, #0]
}
    b88e:	bd10      	pop	{r4, pc}
    b890:	200010a0 	.word	0x200010a0
    b894:	0000b7f5 	.word	0x0000b7f5
    b898:	2000109c 	.word	0x2000109c
    b89c:	0000b241 	.word	0x0000b241
    b8a0:	20001068 	.word	0x20001068
    b8a4:	00011139 	.word	0x00011139
    b8a8:	20000fb0 	.word	0x20000fb0

0000b8ac <SerialConsoleReadCharacter>:
{
    b8ac:	b510      	push	{r4, lr}
    b8ae:	0001      	movs	r1, r0
	return circular_buf_get(cbufRx, (uint8_t*) rxChar);
    b8b0:	4b02      	ldr	r3, [pc, #8]	; (b8bc <SerialConsoleReadCharacter+0x10>)
    b8b2:	6818      	ldr	r0, [r3, #0]
    b8b4:	4b02      	ldr	r3, [pc, #8]	; (b8c0 <SerialConsoleReadCharacter+0x14>)
    b8b6:	4798      	blx	r3
}
    b8b8:	bd10      	pop	{r4, pc}
    b8ba:	46c0      	nop			; (mov r8, r8)
    b8bc:	2000109c 	.word	0x2000109c
    b8c0:	0000b26d 	.word	0x0000b26d

0000b8c4 <setLogLevel>:
currentDebugLevel = debugLevel;
    b8c4:	4b01      	ldr	r3, [pc, #4]	; (b8cc <setLogLevel+0x8>)
    b8c6:	7018      	strb	r0, [r3, #0]
}
    b8c8:	4770      	bx	lr
    b8ca:	46c0      	nop			; (mov r8, r8)
    b8cc:	200003ec 	.word	0x200003ec

0000b8d0 <LogMessage>:
{
    b8d0:	b40e      	push	{r1, r2, r3}
    b8d2:	b500      	push	{lr}
    b8d4:	b096      	sub	sp, #88	; 0x58
	if (level>=currentDebugLevel)
    b8d6:	4b09      	ldr	r3, [pc, #36]	; (b8fc <LogMessage+0x2c>)
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	4283      	cmp	r3, r0
    b8dc:	d903      	bls.n	b8e6 <LogMessage+0x16>
};
    b8de:	b016      	add	sp, #88	; 0x58
    b8e0:	bc08      	pop	{r3}
    b8e2:	b003      	add	sp, #12
    b8e4:	4718      	bx	r3
		va_start(aptr, format);
    b8e6:	aa18      	add	r2, sp, #96	; 0x60
    b8e8:	9201      	str	r2, [sp, #4]
		vsprintf(buffer, format, aptr);
    b8ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
    b8ec:	a802      	add	r0, sp, #8
    b8ee:	4b04      	ldr	r3, [pc, #16]	; (b900 <LogMessage+0x30>)
    b8f0:	4798      	blx	r3
		SerialConsoleWriteString(buffer);
    b8f2:	a802      	add	r0, sp, #8
    b8f4:	4b03      	ldr	r3, [pc, #12]	; (b904 <LogMessage+0x34>)
    b8f6:	4798      	blx	r3
};
    b8f8:	e7f1      	b.n	b8de <LogMessage+0xe>
    b8fa:	46c0      	nop			; (mov r8, r8)
    b8fc:	200003ec 	.word	0x200003ec
    b900:	000182d1 	.word	0x000182d1
    b904:	0000b7f5 	.word	0x0000b7f5

0000b908 <GetUsartModule>:


struct usart_module* GetUsartModule(void)
{
	return &usart_instance;
    b908:	4800      	ldr	r0, [pc, #0]	; (b90c <GetUsartModule+0x4>)
    b90a:	4770      	bx	lr
    b90c:	20001068 	.word	0x20001068

0000b910 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b910:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b912:	4b06      	ldr	r3, [pc, #24]	; (b92c <sd_mmc_configure_slot+0x1c>)
    b914:	6819      	ldr	r1, [r3, #0]
    b916:	7f8b      	ldrb	r3, [r1, #30]
    b918:	1e5a      	subs	r2, r3, #1
    b91a:	4193      	sbcs	r3, r2
    b91c:	b2db      	uxtb	r3, r3
    b91e:	7b4a      	ldrb	r2, [r1, #13]
    b920:	6809      	ldr	r1, [r1, #0]
    b922:	4803      	ldr	r0, [pc, #12]	; (b930 <sd_mmc_configure_slot+0x20>)
    b924:	7800      	ldrb	r0, [r0, #0]
    b926:	4c03      	ldr	r4, [pc, #12]	; (b934 <sd_mmc_configure_slot+0x24>)
    b928:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    b92a:	bd10      	pop	{r4, pc}
    b92c:	200003f0 	.word	0x200003f0
    b930:	20000418 	.word	0x20000418
    b934:	0000c5b9 	.word	0x0000c5b9

0000b938 <sd_mmc_select_slot>:
{
    b938:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    b93a:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    b93c:	2800      	cmp	r0, #0
    b93e:	d001      	beq.n	b944 <sd_mmc_select_slot+0xc>
}
    b940:	0018      	movs	r0, r3
    b942:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b944:	4b0e      	ldr	r3, [pc, #56]	; (b980 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b946:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b948:	3b03      	subs	r3, #3
    b94a:	2b01      	cmp	r3, #1
    b94c:	d90d      	bls.n	b96a <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    b94e:	2200      	movs	r2, #0
    b950:	4b0c      	ldr	r3, [pc, #48]	; (b984 <sd_mmc_select_slot+0x4c>)
    b952:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b954:	4c0a      	ldr	r4, [pc, #40]	; (b980 <sd_mmc_select_slot+0x48>)
    b956:	4b0c      	ldr	r3, [pc, #48]	; (b988 <sd_mmc_select_slot+0x50>)
    b958:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    b95a:	4b0c      	ldr	r3, [pc, #48]	; (b98c <sd_mmc_select_slot+0x54>)
    b95c:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b95e:	7aa3      	ldrb	r3, [r4, #10]
    b960:	3b02      	subs	r3, #2
    b962:	4258      	negs	r0, r3
    b964:	4143      	adcs	r3, r0
    b966:	b2db      	uxtb	r3, r3
    b968:	e7ea      	b.n	b940 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b96a:	4b05      	ldr	r3, [pc, #20]	; (b980 <sd_mmc_select_slot+0x48>)
    b96c:	2202      	movs	r2, #2
    b96e:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b970:	4a07      	ldr	r2, [pc, #28]	; (b990 <sd_mmc_select_slot+0x58>)
    b972:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    b974:	2201      	movs	r2, #1
    b976:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    b978:	2200      	movs	r2, #0
    b97a:	779a      	strb	r2, [r3, #30]
    b97c:	e7e7      	b.n	b94e <sd_mmc_select_slot+0x16>
    b97e:	46c0      	nop			; (mov r8, r8)
    b980:	200003f4 	.word	0x200003f4
    b984:	20000418 	.word	0x20000418
    b988:	200003f0 	.word	0x200003f0
    b98c:	0000b911 	.word	0x0000b911
    b990:	00061a80 	.word	0x00061a80

0000b994 <sd_mmc_cmd13>:
{
    b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b996:	4d09      	ldr	r5, [pc, #36]	; (b9bc <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b998:	4f09      	ldr	r7, [pc, #36]	; (b9c0 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    b99a:	4e0a      	ldr	r6, [pc, #40]	; (b9c4 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b99c:	2100      	movs	r1, #0
    b99e:	480a      	ldr	r0, [pc, #40]	; (b9c8 <sd_mmc_cmd13+0x34>)
    b9a0:	47b8      	blx	r7
    b9a2:	1e04      	subs	r4, r0, #0
    b9a4:	d007      	beq.n	b9b6 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    b9a6:	47b0      	blx	r6
    b9a8:	23ff      	movs	r3, #255	; 0xff
    b9aa:	4203      	tst	r3, r0
    b9ac:	d003      	beq.n	b9b6 <sd_mmc_cmd13+0x22>
    b9ae:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    b9b0:	2d00      	cmp	r5, #0
    b9b2:	d1f3      	bne.n	b99c <sd_mmc_cmd13+0x8>
			return false;
    b9b4:	2400      	movs	r4, #0
}
    b9b6:	0020      	movs	r0, r4
    b9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9ba:	46c0      	nop			; (mov r8, r8)
    b9bc:	00030d41 	.word	0x00030d41
    b9c0:	0000c7fd 	.word	0x0000c7fd
    b9c4:	0000c815 	.word	0x0000c815
    b9c8:	00001b0d 	.word	0x00001b0d

0000b9cc <sd_mmc_cmd9_spi>:
{
    b9cc:	b510      	push	{r4, lr}
    b9ce:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b9d0:	4b0c      	ldr	r3, [pc, #48]	; (ba04 <sd_mmc_cmd9_spi+0x38>)
    b9d2:	681b      	ldr	r3, [r3, #0]
    b9d4:	8919      	ldrh	r1, [r3, #8]
    b9d6:	0409      	lsls	r1, r1, #16
    b9d8:	2301      	movs	r3, #1
    b9da:	9300      	str	r3, [sp, #0]
    b9dc:	2210      	movs	r2, #16
    b9de:	480a      	ldr	r0, [pc, #40]	; (ba08 <sd_mmc_cmd9_spi+0x3c>)
    b9e0:	4c0a      	ldr	r4, [pc, #40]	; (ba0c <sd_mmc_cmd9_spi+0x40>)
    b9e2:	47a0      	blx	r4
    b9e4:	2800      	cmp	r0, #0
    b9e6:	d101      	bne.n	b9ec <sd_mmc_cmd9_spi+0x20>
}
    b9e8:	b002      	add	sp, #8
    b9ea:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b9ec:	4b05      	ldr	r3, [pc, #20]	; (ba04 <sd_mmc_cmd9_spi+0x38>)
    b9ee:	6818      	ldr	r0, [r3, #0]
    b9f0:	300e      	adds	r0, #14
    b9f2:	2101      	movs	r1, #1
    b9f4:	4b06      	ldr	r3, [pc, #24]	; (ba10 <sd_mmc_cmd9_spi+0x44>)
    b9f6:	4798      	blx	r3
    b9f8:	2800      	cmp	r0, #0
    b9fa:	d0f5      	beq.n	b9e8 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    b9fc:	4b05      	ldr	r3, [pc, #20]	; (ba14 <sd_mmc_cmd9_spi+0x48>)
    b9fe:	4798      	blx	r3
    ba00:	e7f2      	b.n	b9e8 <sd_mmc_cmd9_spi+0x1c>
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	200003f0 	.word	0x200003f0
    ba08:	00081109 	.word	0x00081109
    ba0c:	0000c66d 	.word	0x0000c66d
    ba10:	0000c899 	.word	0x0000c899
    ba14:	0000c925 	.word	0x0000c925

0000ba18 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    ba18:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    ba1a:	4b04      	ldr	r3, [pc, #16]	; (ba2c <sd_mmc_deselect_slot+0x14>)
    ba1c:	781b      	ldrb	r3, [r3, #0]
    ba1e:	2b00      	cmp	r3, #0
    ba20:	d000      	beq.n	ba24 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    ba22:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    ba24:	2000      	movs	r0, #0
    ba26:	4b02      	ldr	r3, [pc, #8]	; (ba30 <sd_mmc_deselect_slot+0x18>)
    ba28:	4798      	blx	r3
}
    ba2a:	e7fa      	b.n	ba22 <sd_mmc_deselect_slot+0xa>
    ba2c:	20000418 	.word	0x20000418
    ba30:	0000c60d 	.word	0x0000c60d

0000ba34 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    ba34:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    ba36:	2204      	movs	r2, #4
    ba38:	4b03      	ldr	r3, [pc, #12]	; (ba48 <sd_mmc_init+0x14>)
    ba3a:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    ba3c:	32fb      	adds	r2, #251	; 0xfb
    ba3e:	4b03      	ldr	r3, [pc, #12]	; (ba4c <sd_mmc_init+0x18>)
    ba40:	701a      	strb	r2, [r3, #0]
	driver_init();
    ba42:	4b03      	ldr	r3, [pc, #12]	; (ba50 <sd_mmc_init+0x1c>)
    ba44:	4798      	blx	r3
}
    ba46:	bd10      	pop	{r4, pc}
    ba48:	200003f4 	.word	0x200003f4
    ba4c:	20000418 	.word	0x20000418
    ba50:	0000c4b9 	.word	0x0000c4b9

0000ba54 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba56:	46c6      	mov	lr, r8
    ba58:	b500      	push	{lr}
    ba5a:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    ba5c:	4bcb      	ldr	r3, [pc, #812]	; (bd8c <sd_mmc_check+0x338>)
    ba5e:	4798      	blx	r3
    ba60:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    ba62:	2801      	cmp	r0, #1
    ba64:	d006      	beq.n	ba74 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    ba66:	4bca      	ldr	r3, [pc, #808]	; (bd90 <sd_mmc_check+0x33c>)
    ba68:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    ba6a:	0020      	movs	r0, r4
    ba6c:	b008      	add	sp, #32
    ba6e:	bc04      	pop	{r2}
    ba70:	4690      	mov	r8, r2
    ba72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    ba74:	4bc7      	ldr	r3, [pc, #796]	; (bd94 <sd_mmc_check+0x340>)
    ba76:	681b      	ldr	r3, [r3, #0]
    ba78:	2201      	movs	r2, #1
    ba7a:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    ba7c:	2200      	movs	r2, #0
    ba7e:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    ba80:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    ba82:	4bc5      	ldr	r3, [pc, #788]	; (bd98 <sd_mmc_check+0x344>)
    ba84:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    ba86:	2100      	movs	r1, #0
    ba88:	2088      	movs	r0, #136	; 0x88
    ba8a:	0140      	lsls	r0, r0, #5
    ba8c:	4bc3      	ldr	r3, [pc, #780]	; (bd9c <sd_mmc_check+0x348>)
    ba8e:	4798      	blx	r3
    ba90:	2800      	cmp	r0, #0
    ba92:	d107      	bne.n	baa4 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    ba94:	4bbf      	ldr	r3, [pc, #764]	; (bd94 <sd_mmc_check+0x340>)
    ba96:	681b      	ldr	r3, [r3, #0]
    ba98:	2203      	movs	r2, #3
    ba9a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    ba9c:	4bbc      	ldr	r3, [pc, #752]	; (bd90 <sd_mmc_check+0x33c>)
    ba9e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    baa0:	2403      	movs	r4, #3
    baa2:	e7e2      	b.n	ba6a <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    baa4:	21d5      	movs	r1, #213	; 0xd5
    baa6:	0049      	lsls	r1, r1, #1
    baa8:	48bd      	ldr	r0, [pc, #756]	; (bda0 <sd_mmc_check+0x34c>)
    baaa:	4bbc      	ldr	r3, [pc, #752]	; (bd9c <sd_mmc_check+0x348>)
    baac:	4798      	blx	r3
	*v2 = 0;
    baae:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    bab0:	2800      	cmp	r0, #0
    bab2:	d125      	bne.n	bb00 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    bab4:	4bb7      	ldr	r3, [pc, #732]	; (bd94 <sd_mmc_check+0x340>)
    bab6:	681b      	ldr	r3, [r3, #0]
    bab8:	7adb      	ldrb	r3, [r3, #11]
    baba:	07db      	lsls	r3, r3, #31
    babc:	d500      	bpl.n	bac0 <sd_mmc_check+0x6c>
    babe:	e1eb      	b.n	be98 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bac0:	4bb4      	ldr	r3, [pc, #720]	; (bd94 <sd_mmc_check+0x340>)
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	7ada      	ldrb	r2, [r3, #11]
    bac6:	2309      	movs	r3, #9
    bac8:	4013      	ands	r3, r2
    baca:	2b01      	cmp	r3, #1
    bacc:	d10f      	bne.n	baee <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    bace:	2180      	movs	r1, #128	; 0x80
    bad0:	0089      	lsls	r1, r1, #2
    bad2:	48b4      	ldr	r0, [pc, #720]	; (bda4 <sd_mmc_check+0x350>)
    bad4:	4bb1      	ldr	r3, [pc, #708]	; (bd9c <sd_mmc_check+0x348>)
    bad6:	4798      	blx	r3
    bad8:	2800      	cmp	r0, #0
    bada:	d0db      	beq.n	ba94 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    badc:	4bad      	ldr	r3, [pc, #692]	; (bd94 <sd_mmc_check+0x340>)
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	7adb      	ldrb	r3, [r3, #11]
    bae2:	07db      	lsls	r3, r3, #31
    bae4:	d503      	bpl.n	baee <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    bae6:	4bb0      	ldr	r3, [pc, #704]	; (bda8 <sd_mmc_check+0x354>)
    bae8:	4798      	blx	r3
    baea:	2800      	cmp	r0, #0
    baec:	d0d2      	beq.n	ba94 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    baee:	4baf      	ldr	r3, [pc, #700]	; (bdac <sd_mmc_check+0x358>)
    baf0:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    baf2:	4ba8      	ldr	r3, [pc, #672]	; (bd94 <sd_mmc_check+0x340>)
    baf4:	681b      	ldr	r3, [r3, #0]
    baf6:	2200      	movs	r2, #0
    baf8:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    bafa:	4ba5      	ldr	r3, [pc, #660]	; (bd90 <sd_mmc_check+0x33c>)
    bafc:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    bafe:	e7b4      	b.n	ba6a <sd_mmc_check+0x16>
	resp = driver_get_response();
    bb00:	4bab      	ldr	r3, [pc, #684]	; (bdb0 <sd_mmc_check+0x35c>)
    bb02:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    bb04:	1c43      	adds	r3, r0, #1
    bb06:	d100      	bne.n	bb0a <sd_mmc_check+0xb6>
    bb08:	e1c4      	b.n	be94 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    bb0a:	0500      	lsls	r0, r0, #20
    bb0c:	0d00      	lsrs	r0, r0, #20
    bb0e:	23d5      	movs	r3, #213	; 0xd5
    bb10:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    bb12:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    bb14:	4298      	cmp	r0, r3
    bb16:	d1bd      	bne.n	ba94 <sd_mmc_check+0x40>
    bb18:	e7cc      	b.n	bab4 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    bb1a:	2100      	movs	r1, #0
    bb1c:	48a5      	ldr	r0, [pc, #660]	; (bdb4 <sd_mmc_check+0x360>)
    bb1e:	4b9f      	ldr	r3, [pc, #636]	; (bd9c <sd_mmc_check+0x348>)
    bb20:	4798      	blx	r3
    bb22:	2800      	cmp	r0, #0
    bb24:	d119      	bne.n	bb5a <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    bb26:	4b9b      	ldr	r3, [pc, #620]	; (bd94 <sd_mmc_check+0x340>)
    bb28:	681b      	ldr	r3, [r3, #0]
    bb2a:	2202      	movs	r2, #2
    bb2c:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    bb2e:	2100      	movs	r1, #0
    bb30:	2088      	movs	r0, #136	; 0x88
    bb32:	0140      	lsls	r0, r0, #5
    bb34:	4b99      	ldr	r3, [pc, #612]	; (bd9c <sd_mmc_check+0x348>)
    bb36:	4798      	blx	r3
    bb38:	2800      	cmp	r0, #0
    bb3a:	d0ab      	beq.n	ba94 <sd_mmc_check+0x40>
    bb3c:	4d9e      	ldr	r5, [pc, #632]	; (bdb8 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    bb3e:	4f97      	ldr	r7, [pc, #604]	; (bd9c <sd_mmc_check+0x348>)
		resp = driver_get_response();
    bb40:	4e9b      	ldr	r6, [pc, #620]	; (bdb0 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    bb42:	2100      	movs	r1, #0
    bb44:	489d      	ldr	r0, [pc, #628]	; (bdbc <sd_mmc_check+0x368>)
    bb46:	47b8      	blx	r7
    bb48:	2800      	cmp	r0, #0
    bb4a:	d0a3      	beq.n	ba94 <sd_mmc_check+0x40>
		resp = driver_get_response();
    bb4c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    bb4e:	07c3      	lsls	r3, r0, #31
    bb50:	d57d      	bpl.n	bc4e <sd_mmc_check+0x1fa>
    bb52:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    bb54:	2d00      	cmp	r5, #0
    bb56:	d1f4      	bne.n	bb42 <sd_mmc_check+0xee>
    bb58:	e79c      	b.n	ba94 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    bb5a:	4b95      	ldr	r3, [pc, #596]	; (bdb0 <sd_mmc_check+0x35c>)
    bb5c:	4798      	blx	r3
    bb5e:	0043      	lsls	r3, r0, #1
    bb60:	d505      	bpl.n	bb6e <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    bb62:	4b8c      	ldr	r3, [pc, #560]	; (bd94 <sd_mmc_check+0x340>)
    bb64:	681a      	ldr	r2, [r3, #0]
    bb66:	7ad3      	ldrb	r3, [r2, #11]
    bb68:	2108      	movs	r1, #8
    bb6a:	430b      	orrs	r3, r1
    bb6c:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    bb6e:	2100      	movs	r1, #0
    bb70:	4893      	ldr	r0, [pc, #588]	; (bdc0 <sd_mmc_check+0x36c>)
    bb72:	4b8a      	ldr	r3, [pc, #552]	; (bd9c <sd_mmc_check+0x348>)
    bb74:	4798      	blx	r3
    bb76:	2800      	cmp	r0, #0
    bb78:	d08c      	beq.n	ba94 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    bb7a:	4b86      	ldr	r3, [pc, #536]	; (bd94 <sd_mmc_check+0x340>)
    bb7c:	681b      	ldr	r3, [r3, #0]
    bb7e:	7adb      	ldrb	r3, [r3, #11]
    bb80:	07da      	lsls	r2, r3, #31
    bb82:	d400      	bmi.n	bb86 <sd_mmc_check+0x132>
    bb84:	e1a4      	b.n	bed0 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    bb86:	4b8f      	ldr	r3, [pc, #572]	; (bdc4 <sd_mmc_check+0x370>)
    bb88:	4798      	blx	r3
    bb8a:	2800      	cmp	r0, #0
    bb8c:	d082      	beq.n	ba94 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    bb8e:	4b81      	ldr	r3, [pc, #516]	; (bd94 <sd_mmc_check+0x340>)
    bb90:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb92:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    bb94:	2107      	movs	r1, #7
    bb96:	4019      	ands	r1, r3
    bb98:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    bb9a:	488b      	ldr	r0, [pc, #556]	; (bdc8 <sd_mmc_check+0x374>)
    bb9c:	5808      	ldr	r0, [r1, r0]
    bb9e:	21fa      	movs	r1, #250	; 0xfa
    bba0:	0089      	lsls	r1, r1, #2
    bba2:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    bba4:	065b      	lsls	r3, r3, #25
    bba6:	0f1b      	lsrs	r3, r3, #28
    bba8:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    bbaa:	4888      	ldr	r0, [pc, #544]	; (bdcc <sd_mmc_check+0x378>)
    bbac:	581b      	ldr	r3, [r3, r0]
    bbae:	434b      	muls	r3, r1
    bbb0:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    bbb2:	7b93      	ldrb	r3, [r2, #14]
    bbb4:	099b      	lsrs	r3, r3, #6
    bbb6:	d000      	beq.n	bbba <sd_mmc_check+0x166>
    bbb8:	e13c      	b.n	be34 <sd_mmc_check+0x3e0>
    bbba:	7d91      	ldrb	r1, [r2, #22]
    bbbc:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bbbe:	7d53      	ldrb	r3, [r2, #21]
    bbc0:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bbc2:	7d10      	ldrb	r0, [r2, #20]
    bbc4:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bbc6:	4303      	orrs	r3, r0
    bbc8:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bbca:	7e10      	ldrb	r0, [r2, #24]
    bbcc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bbce:	7dd1      	ldrb	r1, [r2, #23]
    bbd0:	0049      	lsls	r1, r1, #1
    bbd2:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    bbd4:	051b      	lsls	r3, r3, #20
    bbd6:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    bbd8:	3301      	adds	r3, #1
    bbda:	2107      	movs	r1, #7
    bbdc:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    bbde:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    bbe0:	408b      	lsls	r3, r1
    bbe2:	7cd0      	ldrb	r0, [r2, #19]
    bbe4:	210f      	movs	r1, #15
    bbe6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    bbe8:	408b      	lsls	r3, r1
				/ 1024;
    bbea:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    bbec:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    bbee:	8911      	ldrh	r1, [r2, #8]
    bbf0:	0409      	lsls	r1, r1, #16
    bbf2:	4877      	ldr	r0, [pc, #476]	; (bdd0 <sd_mmc_check+0x37c>)
    bbf4:	4b69      	ldr	r3, [pc, #420]	; (bd9c <sd_mmc_check+0x348>)
    bbf6:	4798      	blx	r3
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d100      	bne.n	bbfe <sd_mmc_check+0x1aa>
    bbfc:	e74a      	b.n	ba94 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    bbfe:	2301      	movs	r3, #1
    bc00:	9300      	str	r3, [sp, #0]
    bc02:	2208      	movs	r2, #8
    bc04:	2100      	movs	r1, #0
    bc06:	4873      	ldr	r0, [pc, #460]	; (bdd4 <sd_mmc_check+0x380>)
    bc08:	4d73      	ldr	r5, [pc, #460]	; (bdd8 <sd_mmc_check+0x384>)
    bc0a:	47a8      	blx	r5
    bc0c:	2800      	cmp	r0, #0
    bc0e:	d100      	bne.n	bc12 <sd_mmc_check+0x1be>
    bc10:	e740      	b.n	ba94 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    bc12:	2101      	movs	r1, #1
    bc14:	a806      	add	r0, sp, #24
    bc16:	4b71      	ldr	r3, [pc, #452]	; (bddc <sd_mmc_check+0x388>)
    bc18:	4798      	blx	r3
    bc1a:	2800      	cmp	r0, #0
    bc1c:	d100      	bne.n	bc20 <sd_mmc_check+0x1cc>
    bc1e:	e739      	b.n	ba94 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    bc20:	4b6f      	ldr	r3, [pc, #444]	; (bde0 <sd_mmc_check+0x38c>)
    bc22:	4798      	blx	r3
    bc24:	2800      	cmp	r0, #0
    bc26:	d100      	bne.n	bc2a <sd_mmc_check+0x1d6>
    bc28:	e734      	b.n	ba94 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bc2a:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	220f      	movs	r2, #15
    bc30:	4013      	ands	r3, r2
    bc32:	2b01      	cmp	r3, #1
    bc34:	d100      	bne.n	bc38 <sd_mmc_check+0x1e4>
    bc36:	e119      	b.n	be6c <sd_mmc_check+0x418>
    bc38:	2b00      	cmp	r3, #0
    bc3a:	d100      	bne.n	bc3e <sd_mmc_check+0x1ea>
    bc3c:	e109      	b.n	be52 <sd_mmc_check+0x3fe>
    bc3e:	2b02      	cmp	r3, #2
    bc40:	d100      	bne.n	bc44 <sd_mmc_check+0x1f0>
    bc42:	e118      	b.n	be76 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    bc44:	4b53      	ldr	r3, [pc, #332]	; (bd94 <sd_mmc_check+0x340>)
    bc46:	681b      	ldr	r3, [r3, #0]
    bc48:	2210      	movs	r2, #16
    bc4a:	731a      	strb	r2, [r3, #12]
    bc4c:	e105      	b.n	be5a <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    bc4e:	2100      	movs	r1, #0
    bc50:	4858      	ldr	r0, [pc, #352]	; (bdb4 <sd_mmc_check+0x360>)
    bc52:	4b52      	ldr	r3, [pc, #328]	; (bd9c <sd_mmc_check+0x348>)
    bc54:	4798      	blx	r3
    bc56:	2800      	cmp	r0, #0
    bc58:	d100      	bne.n	bc5c <sd_mmc_check+0x208>
    bc5a:	e71b      	b.n	ba94 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    bc5c:	4b54      	ldr	r3, [pc, #336]	; (bdb0 <sd_mmc_check+0x35c>)
    bc5e:	4798      	blx	r3
    bc60:	23c0      	movs	r3, #192	; 0xc0
    bc62:	05db      	lsls	r3, r3, #23
    bc64:	4018      	ands	r0, r3
    bc66:	2380      	movs	r3, #128	; 0x80
    bc68:	05db      	lsls	r3, r3, #23
    bc6a:	4298      	cmp	r0, r3
    bc6c:	d105      	bne.n	bc7a <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    bc6e:	4b49      	ldr	r3, [pc, #292]	; (bd94 <sd_mmc_check+0x340>)
    bc70:	681a      	ldr	r2, [r3, #0]
    bc72:	7ad1      	ldrb	r1, [r2, #11]
    bc74:	2308      	movs	r3, #8
    bc76:	430b      	orrs	r3, r1
    bc78:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    bc7a:	2100      	movs	r1, #0
    bc7c:	4850      	ldr	r0, [pc, #320]	; (bdc0 <sd_mmc_check+0x36c>)
    bc7e:	4b47      	ldr	r3, [pc, #284]	; (bd9c <sd_mmc_check+0x348>)
    bc80:	4798      	blx	r3
    bc82:	2800      	cmp	r0, #0
    bc84:	d100      	bne.n	bc88 <sd_mmc_check+0x234>
    bc86:	e705      	b.n	ba94 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    bc88:	4b4e      	ldr	r3, [pc, #312]	; (bdc4 <sd_mmc_check+0x370>)
    bc8a:	4798      	blx	r3
    bc8c:	2800      	cmp	r0, #0
    bc8e:	d100      	bne.n	bc92 <sd_mmc_check+0x23e>
    bc90:	e700      	b.n	ba94 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    bc92:	4b40      	ldr	r3, [pc, #256]	; (bd94 <sd_mmc_check+0x340>)
    bc94:	681a      	ldr	r2, [r3, #0]
    bc96:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    bc98:	069b      	lsls	r3, r3, #26
    bc9a:	0f1b      	lsrs	r3, r3, #28
    bc9c:	2b02      	cmp	r3, #2
    bc9e:	d100      	bne.n	bca2 <sd_mmc_check+0x24e>
    bca0:	e0a8      	b.n	bdf4 <sd_mmc_check+0x3a0>
    bca2:	d907      	bls.n	bcb4 <sd_mmc_check+0x260>
    bca4:	2b03      	cmp	r3, #3
    bca6:	d100      	bne.n	bcaa <sd_mmc_check+0x256>
    bca8:	e0a7      	b.n	bdfa <sd_mmc_check+0x3a6>
    bcaa:	2b04      	cmp	r3, #4
    bcac:	d104      	bne.n	bcb8 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    bcae:	2340      	movs	r3, #64	; 0x40
    bcb0:	7313      	strb	r3, [r2, #12]
    bcb2:	e003      	b.n	bcbc <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    bcb4:	2b01      	cmp	r3, #1
    bcb6:	d066      	beq.n	bd86 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    bcb8:	2312      	movs	r3, #18
    bcba:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bcbc:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    bcbe:	0659      	lsls	r1, r3, #25
    bcc0:	0f09      	lsrs	r1, r1, #28
    bcc2:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    bcc4:	2007      	movs	r0, #7
    bcc6:	4003      	ands	r3, r0
    bcc8:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    bcca:	483f      	ldr	r0, [pc, #252]	; (bdc8 <sd_mmc_check+0x374>)
    bccc:	5818      	ldr	r0, [r3, r0]
    bcce:	23fa      	movs	r3, #250	; 0xfa
    bcd0:	009b      	lsls	r3, r3, #2
    bcd2:	4343      	muls	r3, r0
    bcd4:	4843      	ldr	r0, [pc, #268]	; (bde4 <sd_mmc_check+0x390>)
    bcd6:	5809      	ldr	r1, [r1, r0]
    bcd8:	434b      	muls	r3, r1
    bcda:	6013      	str	r3, [r2, #0]
    bcdc:	7d91      	ldrb	r1, [r2, #22]
    bcde:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bce0:	7d53      	ldrb	r3, [r2, #21]
    bce2:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bce4:	7d10      	ldrb	r0, [r2, #20]
    bce6:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bce8:	4303      	orrs	r3, r0
    bcea:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    bcec:	051b      	lsls	r3, r3, #20
    bcee:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    bcf0:	493d      	ldr	r1, [pc, #244]	; (bde8 <sd_mmc_check+0x394>)
    bcf2:	428b      	cmp	r3, r1
    bcf4:	d00f      	beq.n	bd16 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bcf6:	7e10      	ldrb	r0, [r2, #24]
    bcf8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bcfa:	7dd1      	ldrb	r1, [r2, #23]
    bcfc:	0049      	lsls	r1, r1, #1
    bcfe:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    bd00:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    bd02:	2007      	movs	r0, #7
    bd04:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    bd06:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    bd08:	408b      	lsls	r3, r1
    bd0a:	7cd1      	ldrb	r1, [r2, #19]
    bd0c:	3008      	adds	r0, #8
    bd0e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    bd10:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    bd12:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    bd14:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    bd16:	7b13      	ldrb	r3, [r2, #12]
    bd18:	2b3f      	cmp	r3, #63	; 0x3f
    bd1a:	d97b      	bls.n	be14 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    bd1c:	2100      	movs	r1, #0
    bd1e:	9100      	str	r1, [sp, #0]
    bd20:	2301      	movs	r3, #1
    bd22:	2280      	movs	r2, #128	; 0x80
    bd24:	0092      	lsls	r2, r2, #2
    bd26:	4831      	ldr	r0, [pc, #196]	; (bdec <sd_mmc_check+0x398>)
    bd28:	4d2b      	ldr	r5, [pc, #172]	; (bdd8 <sd_mmc_check+0x384>)
    bd2a:	47a8      	blx	r5
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d100      	bne.n	bd32 <sd_mmc_check+0x2de>
    bd30:	e6b0      	b.n	ba94 <sd_mmc_check+0x40>
    bd32:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    bd34:	4e2e      	ldr	r6, [pc, #184]	; (bdf0 <sd_mmc_check+0x39c>)
    bd36:	a805      	add	r0, sp, #20
    bd38:	47b0      	blx	r6
    bd3a:	2800      	cmp	r0, #0
    bd3c:	d100      	bne.n	bd40 <sd_mmc_check+0x2ec>
    bd3e:	e6a9      	b.n	ba94 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    bd40:	3501      	adds	r5, #1
    bd42:	b2ad      	uxth	r5, r5
    bd44:	2d32      	cmp	r5, #50	; 0x32
    bd46:	d1f6      	bne.n	bd36 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    bd48:	4b12      	ldr	r3, [pc, #72]	; (bd94 <sd_mmc_check+0x340>)
    bd4a:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bd4c:	7d8a      	ldrb	r2, [r1, #22]
    bd4e:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bd50:	7d4b      	ldrb	r3, [r1, #21]
    bd52:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bd54:	7d09      	ldrb	r1, [r1, #20]
    bd56:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bd58:	430b      	orrs	r3, r1
    bd5a:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    bd5c:	051b      	lsls	r3, r3, #20
    bd5e:	0d1b      	lsrs	r3, r3, #20
    bd60:	4a21      	ldr	r2, [pc, #132]	; (bde8 <sd_mmc_check+0x394>)
    bd62:	4293      	cmp	r3, r2
    bd64:	d154      	bne.n	be10 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    bd66:	4e22      	ldr	r6, [pc, #136]	; (bdf0 <sd_mmc_check+0x39c>)
    bd68:	a806      	add	r0, sp, #24
    bd6a:	47b0      	blx	r6
    bd6c:	2800      	cmp	r0, #0
    bd6e:	d100      	bne.n	bd72 <sd_mmc_check+0x31e>
    bd70:	e690      	b.n	ba94 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    bd72:	3501      	adds	r5, #1
    bd74:	b2ad      	uxth	r5, r5
    bd76:	2d35      	cmp	r5, #53	; 0x35
    bd78:	d9f6      	bls.n	bd68 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    bd7a:	4b06      	ldr	r3, [pc, #24]	; (bd94 <sd_mmc_check+0x340>)
    bd7c:	681a      	ldr	r2, [r3, #0]
    bd7e:	9b06      	ldr	r3, [sp, #24]
    bd80:	085b      	lsrs	r3, r3, #1
    bd82:	6053      	str	r3, [r2, #4]
    bd84:	e044      	b.n	be10 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    bd86:	2314      	movs	r3, #20
    bd88:	7313      	strb	r3, [r2, #12]
    bd8a:	e797      	b.n	bcbc <sd_mmc_check+0x268>
    bd8c:	0000b939 	.word	0x0000b939
    bd90:	0000ba19 	.word	0x0000ba19
    bd94:	200003f0 	.word	0x200003f0
    bd98:	0000c635 	.word	0x0000c635
    bd9c:	0000c7fd 	.word	0x0000c7fd
    bda0:	00005508 	.word	0x00005508
    bda4:	00001110 	.word	0x00001110
    bda8:	0000b995 	.word	0x0000b995
    bdac:	0000b911 	.word	0x0000b911
    bdb0:	0000c815 	.word	0x0000c815
    bdb4:	0000053a 	.word	0x0000053a
    bdb8:	00001bef 	.word	0x00001bef
    bdbc:	00001101 	.word	0x00001101
    bdc0:	0000113b 	.word	0x0000113b
    bdc4:	0000b9cd 	.word	0x0000b9cd
    bdc8:	00019950 	.word	0x00019950
    bdcc:	0001996c 	.word	0x0001996c
    bdd0:	00001137 	.word	0x00001137
    bdd4:	00081133 	.word	0x00081133
    bdd8:	0000c66d 	.word	0x0000c66d
    bddc:	0000c899 	.word	0x0000c899
    bde0:	0000c925 	.word	0x0000c925
    bde4:	00019910 	.word	0x00019910
    bde8:	00000fff 	.word	0x00000fff
    bdec:	00081108 	.word	0x00081108
    bdf0:	0000c821 	.word	0x0000c821
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    bdf4:	2322      	movs	r3, #34	; 0x22
    bdf6:	7313      	strb	r3, [r2, #12]
    bdf8:	e760      	b.n	bcbc <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    bdfa:	2330      	movs	r3, #48	; 0x30
    bdfc:	7313      	strb	r3, [r2, #12]
    bdfe:	e75d      	b.n	bcbc <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    be00:	a806      	add	r0, sp, #24
    be02:	4b36      	ldr	r3, [pc, #216]	; (bedc <sd_mmc_check+0x488>)
    be04:	4798      	blx	r3
    be06:	2800      	cmp	r0, #0
    be08:	d100      	bne.n	be0c <sd_mmc_check+0x3b8>
    be0a:	e643      	b.n	ba94 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    be0c:	3501      	adds	r5, #1
    be0e:	b2ad      	uxth	r5, r5
    be10:	2d7f      	cmp	r5, #127	; 0x7f
    be12:	d9f5      	bls.n	be00 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    be14:	2180      	movs	r1, #128	; 0x80
    be16:	0089      	lsls	r1, r1, #2
    be18:	4831      	ldr	r0, [pc, #196]	; (bee0 <sd_mmc_check+0x48c>)
    be1a:	4b32      	ldr	r3, [pc, #200]	; (bee4 <sd_mmc_check+0x490>)
    be1c:	4798      	blx	r3
    be1e:	2800      	cmp	r0, #0
    be20:	d100      	bne.n	be24 <sd_mmc_check+0x3d0>
    be22:	e637      	b.n	ba94 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    be24:	4b30      	ldr	r3, [pc, #192]	; (bee8 <sd_mmc_check+0x494>)
    be26:	4798      	blx	r3
    be28:	2800      	cmp	r0, #0
    be2a:	d100      	bne.n	be2e <sd_mmc_check+0x3da>
    be2c:	e632      	b.n	ba94 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    be2e:	4b2f      	ldr	r3, [pc, #188]	; (beec <sd_mmc_check+0x498>)
    be30:	4798      	blx	r3
    be32:	e65e      	b.n	baf2 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    be34:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    be36:	7d93      	ldrb	r3, [r2, #22]
    be38:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    be3a:	7d51      	ldrb	r1, [r2, #21]
    be3c:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    be3e:	430b      	orrs	r3, r1
    be40:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    be42:	029b      	lsls	r3, r3, #10
				* 512;
    be44:	085b      	lsrs	r3, r3, #1
    be46:	2180      	movs	r1, #128	; 0x80
    be48:	0089      	lsls	r1, r1, #2
    be4a:	468c      	mov	ip, r1
    be4c:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    be4e:	6053      	str	r3, [r2, #4]
    be50:	e6cd      	b.n	bbee <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    be52:	4b27      	ldr	r3, [pc, #156]	; (bef0 <sd_mmc_check+0x49c>)
    be54:	681b      	ldr	r3, [r3, #0]
    be56:	2210      	movs	r2, #16
    be58:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    be5a:	4b25      	ldr	r3, [pc, #148]	; (bef0 <sd_mmc_check+0x49c>)
    be5c:	681b      	ldr	r3, [r3, #0]
    be5e:	7adb      	ldrb	r3, [r3, #11]
    be60:	2209      	movs	r2, #9
    be62:	4013      	ands	r3, r2
    be64:	2b01      	cmp	r3, #1
    be66:	d000      	beq.n	be6a <sd_mmc_check+0x416>
    be68:	e638      	b.n	badc <sd_mmc_check+0x88>
    be6a:	e630      	b.n	bace <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    be6c:	4b20      	ldr	r3, [pc, #128]	; (bef0 <sd_mmc_check+0x49c>)
    be6e:	681b      	ldr	r3, [r3, #0]
    be70:	221a      	movs	r2, #26
    be72:	731a      	strb	r2, [r3, #12]
    be74:	e7f1      	b.n	be5a <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    be76:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    be78:	789b      	ldrb	r3, [r3, #2]
    be7a:	09db      	lsrs	r3, r3, #7
    be7c:	2b01      	cmp	r3, #1
    be7e:	d104      	bne.n	be8a <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    be80:	4b1b      	ldr	r3, [pc, #108]	; (bef0 <sd_mmc_check+0x49c>)
    be82:	681b      	ldr	r3, [r3, #0]
    be84:	2230      	movs	r2, #48	; 0x30
    be86:	731a      	strb	r2, [r3, #12]
    be88:	e7e7      	b.n	be5a <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    be8a:	4b19      	ldr	r3, [pc, #100]	; (bef0 <sd_mmc_check+0x49c>)
    be8c:	681b      	ldr	r3, [r3, #0]
    be8e:	2220      	movs	r2, #32
    be90:	731a      	strb	r2, [r3, #12]
    be92:	e7e2      	b.n	be5a <sd_mmc_check+0x406>
	*v2 = 0;
    be94:	2600      	movs	r6, #0
    be96:	e60d      	b.n	bab4 <sd_mmc_check+0x60>
    be98:	1e73      	subs	r3, r6, #1
    be9a:	419e      	sbcs	r6, r3
    be9c:	07b3      	lsls	r3, r6, #30
    be9e:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    bea0:	4d14      	ldr	r5, [pc, #80]	; (bef4 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bea2:	4f10      	ldr	r7, [pc, #64]	; (bee4 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bea4:	46b8      	mov	r8, r7
		resp = driver_get_response();
    bea6:	4e14      	ldr	r6, [pc, #80]	; (bef8 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bea8:	2100      	movs	r1, #0
    beaa:	4814      	ldr	r0, [pc, #80]	; (befc <sd_mmc_check+0x4a8>)
    beac:	47b8      	blx	r7
    beae:	2800      	cmp	r0, #0
    beb0:	d100      	bne.n	beb4 <sd_mmc_check+0x460>
    beb2:	e638      	b.n	bb26 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    beb4:	9903      	ldr	r1, [sp, #12]
    beb6:	4812      	ldr	r0, [pc, #72]	; (bf00 <sd_mmc_check+0x4ac>)
    beb8:	47c0      	blx	r8
    beba:	2800      	cmp	r0, #0
    bebc:	d100      	bne.n	bec0 <sd_mmc_check+0x46c>
    bebe:	e632      	b.n	bb26 <sd_mmc_check+0xd2>
		resp = driver_get_response();
    bec0:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    bec2:	07c3      	lsls	r3, r0, #31
    bec4:	d400      	bmi.n	bec8 <sd_mmc_check+0x474>
    bec6:	e628      	b.n	bb1a <sd_mmc_check+0xc6>
    bec8:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    beca:	2d00      	cmp	r5, #0
    becc:	d1ec      	bne.n	bea8 <sd_mmc_check+0x454>
    bece:	e62a      	b.n	bb26 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bed0:	2209      	movs	r2, #9
    bed2:	4013      	ands	r3, r2
    bed4:	2b01      	cmp	r3, #1
    bed6:	d000      	beq.n	beda <sd_mmc_check+0x486>
    bed8:	e609      	b.n	baee <sd_mmc_check+0x9a>
    beda:	e5f8      	b.n	bace <sd_mmc_check+0x7a>
    bedc:	0000c821 	.word	0x0000c821
    bee0:	00001110 	.word	0x00001110
    bee4:	0000c7fd 	.word	0x0000c7fd
    bee8:	0000b995 	.word	0x0000b995
    beec:	0000b911 	.word	0x0000b911
    bef0:	200003f0 	.word	0x200003f0
    bef4:	00001bef 	.word	0x00001bef
    bef8:	0000c815 	.word	0x0000c815
    befc:	00001137 	.word	0x00001137
    bf00:	00001129 	.word	0x00001129

0000bf04 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    bf04:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bf06:	4b06      	ldr	r3, [pc, #24]	; (bf20 <sd_mmc_get_type+0x1c>)
    bf08:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    bf0a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bf0c:	2800      	cmp	r0, #0
    bf0e:	d001      	beq.n	bf14 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    bf10:	0018      	movs	r0, r3
    bf12:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bf14:	4b03      	ldr	r3, [pc, #12]	; (bf24 <sd_mmc_get_type+0x20>)
    bf16:	4798      	blx	r3
	return sd_mmc_card->type;
    bf18:	4b03      	ldr	r3, [pc, #12]	; (bf28 <sd_mmc_get_type+0x24>)
    bf1a:	681b      	ldr	r3, [r3, #0]
    bf1c:	7adb      	ldrb	r3, [r3, #11]
    bf1e:	e7f7      	b.n	bf10 <sd_mmc_get_type+0xc>
    bf20:	0000b939 	.word	0x0000b939
    bf24:	0000ba19 	.word	0x0000ba19
    bf28:	200003f0 	.word	0x200003f0

0000bf2c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    bf2c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bf2e:	4b06      	ldr	r3, [pc, #24]	; (bf48 <sd_mmc_get_capacity+0x1c>)
    bf30:	4798      	blx	r3
		return 0;
    bf32:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bf34:	2800      	cmp	r0, #0
    bf36:	d001      	beq.n	bf3c <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    bf38:	0018      	movs	r0, r3
    bf3a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bf3c:	4b03      	ldr	r3, [pc, #12]	; (bf4c <sd_mmc_get_capacity+0x20>)
    bf3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
    bf40:	4b03      	ldr	r3, [pc, #12]	; (bf50 <sd_mmc_get_capacity+0x24>)
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	685b      	ldr	r3, [r3, #4]
    bf46:	e7f7      	b.n	bf38 <sd_mmc_get_capacity+0xc>
    bf48:	0000b939 	.word	0x0000b939
    bf4c:	0000ba19 	.word	0x0000ba19
    bf50:	200003f0 	.word	0x200003f0

0000bf54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    bf54:	2000      	movs	r0, #0
    bf56:	4770      	bx	lr

0000bf58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bf58:	b570      	push	{r4, r5, r6, lr}
    bf5a:	b082      	sub	sp, #8
    bf5c:	000e      	movs	r6, r1
    bf5e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bf60:	4b16      	ldr	r3, [pc, #88]	; (bfbc <sd_mmc_init_read_blocks+0x64>)
    bf62:	4798      	blx	r3
    bf64:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bf66:	d002      	beq.n	bf6e <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    bf68:	0020      	movs	r0, r4
    bf6a:	b002      	add	sp, #8
    bf6c:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    bf6e:	4b14      	ldr	r3, [pc, #80]	; (bfc0 <sd_mmc_init_read_blocks+0x68>)
    bf70:	4798      	blx	r3
    bf72:	2800      	cmp	r0, #0
    bf74:	d017      	beq.n	bfa6 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    bf76:	2d01      	cmp	r5, #1
    bf78:	d919      	bls.n	bfae <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    bf7a:	4812      	ldr	r0, [pc, #72]	; (bfc4 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bf7c:	4b12      	ldr	r3, [pc, #72]	; (bfc8 <sd_mmc_init_read_blocks+0x70>)
    bf7e:	681b      	ldr	r3, [r3, #0]
    bf80:	7adb      	ldrb	r3, [r3, #11]
    bf82:	071b      	lsls	r3, r3, #28
    bf84:	d400      	bmi.n	bf88 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    bf86:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bf88:	2301      	movs	r3, #1
    bf8a:	9300      	str	r3, [sp, #0]
    bf8c:	002b      	movs	r3, r5
    bf8e:	2280      	movs	r2, #128	; 0x80
    bf90:	0092      	lsls	r2, r2, #2
    bf92:	0031      	movs	r1, r6
    bf94:	4e0d      	ldr	r6, [pc, #52]	; (bfcc <sd_mmc_init_read_blocks+0x74>)
    bf96:	47b0      	blx	r6
    bf98:	2800      	cmp	r0, #0
    bf9a:	d00a      	beq.n	bfb2 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    bf9c:	4b0c      	ldr	r3, [pc, #48]	; (bfd0 <sd_mmc_init_read_blocks+0x78>)
    bf9e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bfa0:	4b0c      	ldr	r3, [pc, #48]	; (bfd4 <sd_mmc_init_read_blocks+0x7c>)
    bfa2:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    bfa4:	e7e0      	b.n	bf68 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    bfa6:	4b0c      	ldr	r3, [pc, #48]	; (bfd8 <sd_mmc_init_read_blocks+0x80>)
    bfa8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bfaa:	3405      	adds	r4, #5
    bfac:	e7dc      	b.n	bf68 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    bfae:	480b      	ldr	r0, [pc, #44]	; (bfdc <sd_mmc_init_read_blocks+0x84>)
    bfb0:	e7e4      	b.n	bf7c <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    bfb2:	4b09      	ldr	r3, [pc, #36]	; (bfd8 <sd_mmc_init_read_blocks+0x80>)
    bfb4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bfb6:	2405      	movs	r4, #5
    bfb8:	e7d6      	b.n	bf68 <sd_mmc_init_read_blocks+0x10>
    bfba:	46c0      	nop			; (mov r8, r8)
    bfbc:	0000b939 	.word	0x0000b939
    bfc0:	0000b995 	.word	0x0000b995
    bfc4:	00101112 	.word	0x00101112
    bfc8:	200003f0 	.word	0x200003f0
    bfcc:	0000c66d 	.word	0x0000c66d
    bfd0:	20000414 	.word	0x20000414
    bfd4:	20000416 	.word	0x20000416
    bfd8:	0000ba19 	.word	0x0000ba19
    bfdc:	00081111 	.word	0x00081111

0000bfe0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    bfe0:	b510      	push	{r4, lr}
    bfe2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    bfe4:	4b07      	ldr	r3, [pc, #28]	; (c004 <sd_mmc_start_read_blocks+0x24>)
    bfe6:	4798      	blx	r3
    bfe8:	2800      	cmp	r0, #0
    bfea:	d104      	bne.n	bff6 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bfec:	2200      	movs	r2, #0
    bfee:	4b06      	ldr	r3, [pc, #24]	; (c008 <sd_mmc_start_read_blocks+0x28>)
    bff0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bff2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bff4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bff6:	4a04      	ldr	r2, [pc, #16]	; (c008 <sd_mmc_start_read_blocks+0x28>)
    bff8:	8813      	ldrh	r3, [r2, #0]
    bffa:	1b1c      	subs	r4, r3, r4
    bffc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bffe:	2000      	movs	r0, #0
    c000:	e7f8      	b.n	bff4 <sd_mmc_start_read_blocks+0x14>
    c002:	46c0      	nop			; (mov r8, r8)
    c004:	0000c899 	.word	0x0000c899
    c008:	20000414 	.word	0x20000414

0000c00c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    c00c:	b510      	push	{r4, lr}
    c00e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    c010:	4b14      	ldr	r3, [pc, #80]	; (c064 <sd_mmc_wait_end_of_read_blocks+0x58>)
    c012:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    c014:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    c016:	2800      	cmp	r0, #0
    c018:	d101      	bne.n	c01e <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    c01a:	0018      	movs	r0, r3
    c01c:	bd10      	pop	{r4, pc}
	if (abort) {
    c01e:	2c00      	cmp	r4, #0
    c020:	d010      	beq.n	c044 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    c022:	2200      	movs	r2, #0
    c024:	4b10      	ldr	r3, [pc, #64]	; (c068 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    c026:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    c028:	4b10      	ldr	r3, [pc, #64]	; (c06c <sd_mmc_wait_end_of_read_blocks+0x60>)
    c02a:	881b      	ldrh	r3, [r3, #0]
    c02c:	2b01      	cmp	r3, #1
    c02e:	d00f      	beq.n	c050 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    c030:	2100      	movs	r1, #0
    c032:	480f      	ldr	r0, [pc, #60]	; (c070 <sd_mmc_wait_end_of_read_blocks+0x64>)
    c034:	4b0f      	ldr	r3, [pc, #60]	; (c074 <sd_mmc_wait_end_of_read_blocks+0x68>)
    c036:	4798      	blx	r3
    c038:	2800      	cmp	r0, #0
    c03a:	d00d      	beq.n	c058 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    c03c:	4b0e      	ldr	r3, [pc, #56]	; (c078 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    c03e:	4798      	blx	r3
	return SD_MMC_OK;
    c040:	2300      	movs	r3, #0
    c042:	e7ea      	b.n	c01a <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    c044:	4b08      	ldr	r3, [pc, #32]	; (c068 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    c046:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    c048:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    c04a:	2a00      	cmp	r2, #0
    c04c:	d0ec      	beq.n	c028 <sd_mmc_wait_end_of_read_blocks+0x1c>
    c04e:	e7e4      	b.n	c01a <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    c050:	4b09      	ldr	r3, [pc, #36]	; (c078 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    c052:	4798      	blx	r3
		return SD_MMC_OK;
    c054:	2300      	movs	r3, #0
    c056:	e7e0      	b.n	c01a <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    c058:	2100      	movs	r1, #0
    c05a:	4805      	ldr	r0, [pc, #20]	; (c070 <sd_mmc_wait_end_of_read_blocks+0x64>)
    c05c:	4b05      	ldr	r3, [pc, #20]	; (c074 <sd_mmc_wait_end_of_read_blocks+0x68>)
    c05e:	4798      	blx	r3
    c060:	e7ec      	b.n	c03c <sd_mmc_wait_end_of_read_blocks+0x30>
    c062:	46c0      	nop			; (mov r8, r8)
    c064:	0000c925 	.word	0x0000c925
    c068:	20000414 	.word	0x20000414
    c06c:	20000416 	.word	0x20000416
    c070:	0000310c 	.word	0x0000310c
    c074:	0000c7fd 	.word	0x0000c7fd
    c078:	0000ba19 	.word	0x0000ba19

0000c07c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    c07c:	b570      	push	{r4, r5, r6, lr}
    c07e:	b082      	sub	sp, #8
    c080:	000e      	movs	r6, r1
    c082:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    c084:	4b11      	ldr	r3, [pc, #68]	; (c0cc <sd_mmc_init_write_blocks+0x50>)
    c086:	4798      	blx	r3
    c088:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    c08a:	d116      	bne.n	c0ba <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    c08c:	2d01      	cmp	r5, #1
    c08e:	d917      	bls.n	c0c0 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    c090:	480f      	ldr	r0, [pc, #60]	; (c0d0 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    c092:	4b10      	ldr	r3, [pc, #64]	; (c0d4 <sd_mmc_init_write_blocks+0x58>)
    c094:	681b      	ldr	r3, [r3, #0]
    c096:	7adb      	ldrb	r3, [r3, #11]
    c098:	071b      	lsls	r3, r3, #28
    c09a:	d400      	bmi.n	c09e <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    c09c:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    c09e:	2301      	movs	r3, #1
    c0a0:	9300      	str	r3, [sp, #0]
    c0a2:	002b      	movs	r3, r5
    c0a4:	2280      	movs	r2, #128	; 0x80
    c0a6:	0092      	lsls	r2, r2, #2
    c0a8:	0031      	movs	r1, r6
    c0aa:	4e0b      	ldr	r6, [pc, #44]	; (c0d8 <sd_mmc_init_write_blocks+0x5c>)
    c0ac:	47b0      	blx	r6
    c0ae:	2800      	cmp	r0, #0
    c0b0:	d008      	beq.n	c0c4 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    c0b2:	4b0a      	ldr	r3, [pc, #40]	; (c0dc <sd_mmc_init_write_blocks+0x60>)
    c0b4:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    c0b6:	4b0a      	ldr	r3, [pc, #40]	; (c0e0 <sd_mmc_init_write_blocks+0x64>)
    c0b8:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    c0ba:	0020      	movs	r0, r4
    c0bc:	b002      	add	sp, #8
    c0be:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    c0c0:	4808      	ldr	r0, [pc, #32]	; (c0e4 <sd_mmc_init_write_blocks+0x68>)
    c0c2:	e7e6      	b.n	c092 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    c0c4:	4b08      	ldr	r3, [pc, #32]	; (c0e8 <sd_mmc_init_write_blocks+0x6c>)
    c0c6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    c0c8:	2405      	movs	r4, #5
    c0ca:	e7f6      	b.n	c0ba <sd_mmc_init_write_blocks+0x3e>
    c0cc:	0000b939 	.word	0x0000b939
    c0d0:	00109119 	.word	0x00109119
    c0d4:	200003f0 	.word	0x200003f0
    c0d8:	0000c66d 	.word	0x0000c66d
    c0dc:	20000414 	.word	0x20000414
    c0e0:	20000416 	.word	0x20000416
    c0e4:	00089118 	.word	0x00089118
    c0e8:	0000ba19 	.word	0x0000ba19

0000c0ec <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    c0ec:	b510      	push	{r4, lr}
    c0ee:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    c0f0:	4b07      	ldr	r3, [pc, #28]	; (c110 <sd_mmc_start_write_blocks+0x24>)
    c0f2:	4798      	blx	r3
    c0f4:	2800      	cmp	r0, #0
    c0f6:	d104      	bne.n	c102 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    c0f8:	2200      	movs	r2, #0
    c0fa:	4b06      	ldr	r3, [pc, #24]	; (c114 <sd_mmc_start_write_blocks+0x28>)
    c0fc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    c0fe:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    c100:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    c102:	4a04      	ldr	r2, [pc, #16]	; (c114 <sd_mmc_start_write_blocks+0x28>)
    c104:	8813      	ldrh	r3, [r2, #0]
    c106:	1b1c      	subs	r4, r3, r4
    c108:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    c10a:	2000      	movs	r0, #0
    c10c:	e7f8      	b.n	c100 <sd_mmc_start_write_blocks+0x14>
    c10e:	46c0      	nop			; (mov r8, r8)
    c110:	0000c929 	.word	0x0000c929
    c114:	20000414 	.word	0x20000414

0000c118 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    c118:	b510      	push	{r4, lr}
    c11a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    c11c:	4b0e      	ldr	r3, [pc, #56]	; (c158 <sd_mmc_wait_end_of_write_blocks+0x40>)
    c11e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    c120:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    c122:	2800      	cmp	r0, #0
    c124:	d101      	bne.n	c12a <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    c126:	0018      	movs	r0, r3
    c128:	bd10      	pop	{r4, pc}
	if (abort) {
    c12a:	2c00      	cmp	r4, #0
    c12c:	d00a      	beq.n	c144 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    c12e:	2200      	movs	r2, #0
    c130:	4b0a      	ldr	r3, [pc, #40]	; (c15c <sd_mmc_wait_end_of_write_blocks+0x44>)
    c132:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    c134:	4b0a      	ldr	r3, [pc, #40]	; (c160 <sd_mmc_wait_end_of_write_blocks+0x48>)
    c136:	881b      	ldrh	r3, [r3, #0]
    c138:	2b01      	cmp	r3, #1
    c13a:	d009      	beq.n	c150 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    c13c:	4b09      	ldr	r3, [pc, #36]	; (c164 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    c13e:	4798      	blx	r3
	return SD_MMC_OK;
    c140:	2300      	movs	r3, #0
    c142:	e7f0      	b.n	c126 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    c144:	4b05      	ldr	r3, [pc, #20]	; (c15c <sd_mmc_wait_end_of_write_blocks+0x44>)
    c146:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    c148:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    c14a:	2a00      	cmp	r2, #0
    c14c:	d0f2      	beq.n	c134 <sd_mmc_wait_end_of_write_blocks+0x1c>
    c14e:	e7ea      	b.n	c126 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    c150:	4b04      	ldr	r3, [pc, #16]	; (c164 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    c152:	4798      	blx	r3
		return SD_MMC_OK;
    c154:	2300      	movs	r3, #0
    c156:	e7e6      	b.n	c126 <sd_mmc_wait_end_of_write_blocks+0xe>
    c158:	0000c9a9 	.word	0x0000c9a9
    c15c:	20000414 	.word	0x20000414
    c160:	20000416 	.word	0x20000416
    c164:	0000ba19 	.word	0x0000ba19

0000c168 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    c168:	b510      	push	{r4, lr}
    c16a:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    c16c:	4b0f      	ldr	r3, [pc, #60]	; (c1ac <sd_mmc_test_unit_ready+0x44>)
    c16e:	4798      	blx	r3
    c170:	2801      	cmp	r0, #1
    c172:	d019      	beq.n	c1a8 <sd_mmc_test_unit_ready+0x40>
    c174:	2800      	cmp	r0, #0
    c176:	d003      	beq.n	c180 <sd_mmc_test_unit_ready+0x18>
    c178:	2802      	cmp	r0, #2
    c17a:	d010      	beq.n	c19e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    c17c:	2001      	movs	r0, #1
	}
}
    c17e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    c180:	4b0b      	ldr	r3, [pc, #44]	; (c1b0 <sd_mmc_test_unit_ready+0x48>)
    c182:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    c184:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    c186:	2b00      	cmp	r3, #0
    c188:	d1f9      	bne.n	c17e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    c18a:	0020      	movs	r0, r4
    c18c:	4b09      	ldr	r3, [pc, #36]	; (c1b4 <sd_mmc_test_unit_ready+0x4c>)
    c18e:	4798      	blx	r3
    c190:	0003      	movs	r3, r0
    c192:	2003      	movs	r0, #3
    c194:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    c196:	4243      	negs	r3, r0
    c198:	4158      	adcs	r0, r3
    c19a:	0040      	lsls	r0, r0, #1
    c19c:	e7ef      	b.n	c17e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    c19e:	2200      	movs	r2, #0
    c1a0:	4b03      	ldr	r3, [pc, #12]	; (c1b0 <sd_mmc_test_unit_ready+0x48>)
    c1a2:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    c1a4:	2002      	movs	r0, #2
    c1a6:	e7ea      	b.n	c17e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    c1a8:	2003      	movs	r0, #3
    c1aa:	e7e8      	b.n	c17e <sd_mmc_test_unit_ready+0x16>
    c1ac:	0000ba55 	.word	0x0000ba55
    c1b0:	2000041c 	.word	0x2000041c
    c1b4:	0000bf05 	.word	0x0000bf05

0000c1b8 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    c1b8:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    c1ba:	2000      	movs	r0, #0
    c1bc:	4b01      	ldr	r3, [pc, #4]	; (c1c4 <sd_mmc_test_unit_ready_0+0xc>)
    c1be:	4798      	blx	r3
}
    c1c0:	bd10      	pop	{r4, pc}
    c1c2:	46c0      	nop			; (mov r8, r8)
    c1c4:	0000c169 	.word	0x0000c169

0000c1c8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    c1c8:	b570      	push	{r4, r5, r6, lr}
    c1ca:	0004      	movs	r4, r0
    c1cc:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    c1ce:	4b04      	ldr	r3, [pc, #16]	; (c1e0 <sd_mmc_read_capacity+0x18>)
    c1d0:	4798      	blx	r3
    c1d2:	0040      	lsls	r0, r0, #1
    c1d4:	3801      	subs	r0, #1
    c1d6:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    c1d8:	0020      	movs	r0, r4
    c1da:	4b02      	ldr	r3, [pc, #8]	; (c1e4 <sd_mmc_read_capacity+0x1c>)
    c1dc:	4798      	blx	r3
}
    c1de:	bd70      	pop	{r4, r5, r6, pc}
    c1e0:	0000bf2d 	.word	0x0000bf2d
    c1e4:	0000c169 	.word	0x0000c169

0000c1e8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    c1e8:	b510      	push	{r4, lr}
    c1ea:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    c1ec:	2000      	movs	r0, #0
    c1ee:	4b01      	ldr	r3, [pc, #4]	; (c1f4 <sd_mmc_read_capacity_0+0xc>)
    c1f0:	4798      	blx	r3
}
    c1f2:	bd10      	pop	{r4, pc}
    c1f4:	0000c1c9 	.word	0x0000c1c9

0000c1f8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    c1f8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    c1fa:	2000      	movs	r0, #0
    c1fc:	4b01      	ldr	r3, [pc, #4]	; (c204 <sd_mmc_wr_protect_0+0xc>)
    c1fe:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    c200:	bd10      	pop	{r4, pc}
    c202:	46c0      	nop			; (mov r8, r8)
    c204:	0000bf55 	.word	0x0000bf55

0000c208 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    c208:	b510      	push	{r4, lr}
    c20a:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    c20c:	2201      	movs	r2, #1
    c20e:	4b0c      	ldr	r3, [pc, #48]	; (c240 <sd_mmc_mem_2_ram+0x38>)
    c210:	4798      	blx	r3
    c212:	2800      	cmp	r0, #0
    c214:	d004      	beq.n	c220 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    c216:	3802      	subs	r0, #2
    c218:	4243      	negs	r3, r0
    c21a:	4158      	adcs	r0, r3
    c21c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    c21e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    c220:	2101      	movs	r1, #1
    c222:	0020      	movs	r0, r4
    c224:	4b07      	ldr	r3, [pc, #28]	; (c244 <sd_mmc_mem_2_ram+0x3c>)
    c226:	4798      	blx	r3
    c228:	0003      	movs	r3, r0
		return CTRL_FAIL;
    c22a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    c22c:	2b00      	cmp	r3, #0
    c22e:	d1f6      	bne.n	c21e <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    c230:	2000      	movs	r0, #0
    c232:	4b05      	ldr	r3, [pc, #20]	; (c248 <sd_mmc_mem_2_ram+0x40>)
    c234:	4798      	blx	r3
    c236:	1e43      	subs	r3, r0, #1
    c238:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    c23a:	b2c0      	uxtb	r0, r0
    c23c:	e7ef      	b.n	c21e <sd_mmc_mem_2_ram+0x16>
    c23e:	46c0      	nop			; (mov r8, r8)
    c240:	0000bf59 	.word	0x0000bf59
    c244:	0000bfe1 	.word	0x0000bfe1
    c248:	0000c00d 	.word	0x0000c00d

0000c24c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    c24c:	b510      	push	{r4, lr}
    c24e:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    c250:	0001      	movs	r1, r0
    c252:	2000      	movs	r0, #0
    c254:	4b01      	ldr	r3, [pc, #4]	; (c25c <sd_mmc_mem_2_ram_0+0x10>)
    c256:	4798      	blx	r3
}
    c258:	bd10      	pop	{r4, pc}
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	0000c209 	.word	0x0000c209

0000c260 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    c260:	b510      	push	{r4, lr}
    c262:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    c264:	2201      	movs	r2, #1
    c266:	4b0c      	ldr	r3, [pc, #48]	; (c298 <sd_mmc_ram_2_mem+0x38>)
    c268:	4798      	blx	r3
    c26a:	2800      	cmp	r0, #0
    c26c:	d004      	beq.n	c278 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    c26e:	3802      	subs	r0, #2
    c270:	4243      	negs	r3, r0
    c272:	4158      	adcs	r0, r3
    c274:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    c276:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    c278:	2101      	movs	r1, #1
    c27a:	0020      	movs	r0, r4
    c27c:	4b07      	ldr	r3, [pc, #28]	; (c29c <sd_mmc_ram_2_mem+0x3c>)
    c27e:	4798      	blx	r3
    c280:	0003      	movs	r3, r0
		return CTRL_FAIL;
    c282:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    c284:	2b00      	cmp	r3, #0
    c286:	d1f6      	bne.n	c276 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    c288:	2000      	movs	r0, #0
    c28a:	4b05      	ldr	r3, [pc, #20]	; (c2a0 <sd_mmc_ram_2_mem+0x40>)
    c28c:	4798      	blx	r3
    c28e:	1e43      	subs	r3, r0, #1
    c290:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    c292:	b2c0      	uxtb	r0, r0
    c294:	e7ef      	b.n	c276 <sd_mmc_ram_2_mem+0x16>
    c296:	46c0      	nop			; (mov r8, r8)
    c298:	0000c07d 	.word	0x0000c07d
    c29c:	0000c0ed 	.word	0x0000c0ed
    c2a0:	0000c119 	.word	0x0000c119

0000c2a4 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    c2a4:	b510      	push	{r4, lr}
    c2a6:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    c2a8:	0001      	movs	r1, r0
    c2aa:	2000      	movs	r0, #0
    c2ac:	4b01      	ldr	r3, [pc, #4]	; (c2b4 <sd_mmc_ram_2_mem_0+0x10>)
    c2ae:	4798      	blx	r3
}
    c2b0:	bd10      	pop	{r4, pc}
    c2b2:	46c0      	nop			; (mov r8, r8)
    c2b4:	0000c261 	.word	0x0000c261

0000c2b8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    c2b8:	b500      	push	{lr}
    c2ba:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    c2bc:	466b      	mov	r3, sp
    c2be:	1dd9      	adds	r1, r3, #7
    c2c0:	23ff      	movs	r3, #255	; 0xff
    c2c2:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    c2c4:	2201      	movs	r2, #1
    c2c6:	480b      	ldr	r0, [pc, #44]	; (c2f4 <sd_mmc_spi_start_write_block+0x3c>)
    c2c8:	4b0b      	ldr	r3, [pc, #44]	; (c2f8 <sd_mmc_spi_start_write_block+0x40>)
    c2ca:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    c2cc:	4b0b      	ldr	r3, [pc, #44]	; (c2fc <sd_mmc_spi_start_write_block+0x44>)
    c2ce:	881b      	ldrh	r3, [r3, #0]
    c2d0:	2b01      	cmp	r3, #1
    c2d2:	d00a      	beq.n	c2ea <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    c2d4:	22fc      	movs	r2, #252	; 0xfc
    c2d6:	466b      	mov	r3, sp
    c2d8:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    c2da:	2201      	movs	r2, #1
    c2dc:	466b      	mov	r3, sp
    c2de:	1d99      	adds	r1, r3, #6
    c2e0:	4804      	ldr	r0, [pc, #16]	; (c2f4 <sd_mmc_spi_start_write_block+0x3c>)
    c2e2:	4b05      	ldr	r3, [pc, #20]	; (c2f8 <sd_mmc_spi_start_write_block+0x40>)
    c2e4:	4798      	blx	r3
}
    c2e6:	b003      	add	sp, #12
    c2e8:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    c2ea:	22fe      	movs	r2, #254	; 0xfe
    c2ec:	466b      	mov	r3, sp
    c2ee:	719a      	strb	r2, [r3, #6]
    c2f0:	e7f3      	b.n	c2da <sd_mmc_spi_start_write_block+0x22>
    c2f2:	46c0      	nop			; (mov r8, r8)
    c2f4:	20000420 	.word	0x20000420
    c2f8:	000109f9 	.word	0x000109f9
    c2fc:	20000464 	.word	0x20000464

0000c300 <sd_mmc_spi_wait_busy>:
{
    c300:	b5f0      	push	{r4, r5, r6, r7, lr}
    c302:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    c304:	466b      	mov	r3, sp
    c306:	1ddc      	adds	r4, r3, #7
    c308:	23ff      	movs	r3, #255	; 0xff
    c30a:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c30c:	4e12      	ldr	r6, [pc, #72]	; (c358 <sd_mmc_spi_wait_busy+0x58>)
    c30e:	2201      	movs	r2, #1
    c310:	0021      	movs	r1, r4
    c312:	0030      	movs	r0, r6
    c314:	4d11      	ldr	r5, [pc, #68]	; (c35c <sd_mmc_spi_wait_busy+0x5c>)
    c316:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c318:	23ff      	movs	r3, #255	; 0xff
    c31a:	2201      	movs	r2, #1
    c31c:	0021      	movs	r1, r4
    c31e:	0030      	movs	r0, r6
    c320:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c322:	23ff      	movs	r3, #255	; 0xff
    c324:	2201      	movs	r2, #1
    c326:	0021      	movs	r1, r4
    c328:	0030      	movs	r0, r6
    c32a:	47a8      	blx	r5
    c32c:	4c0c      	ldr	r4, [pc, #48]	; (c360 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    c32e:	466b      	mov	r3, sp
    c330:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c332:	4e09      	ldr	r6, [pc, #36]	; (c358 <sd_mmc_spi_wait_busy+0x58>)
    c334:	4f09      	ldr	r7, [pc, #36]	; (c35c <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    c336:	782b      	ldrb	r3, [r5, #0]
    c338:	2bff      	cmp	r3, #255	; 0xff
    c33a:	d009      	beq.n	c350 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c33c:	23ff      	movs	r3, #255	; 0xff
    c33e:	2201      	movs	r2, #1
    c340:	0029      	movs	r1, r5
    c342:	0030      	movs	r0, r6
    c344:	47b8      	blx	r7
    c346:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    c348:	2c00      	cmp	r4, #0
    c34a:	d1f4      	bne.n	c336 <sd_mmc_spi_wait_busy+0x36>
			return false;
    c34c:	2000      	movs	r0, #0
    c34e:	e000      	b.n	c352 <sd_mmc_spi_wait_busy+0x52>
	return true;
    c350:	2001      	movs	r0, #1
}
    c352:	b003      	add	sp, #12
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	46c0      	nop			; (mov r8, r8)
    c358:	20000420 	.word	0x20000420
    c35c:	00010831 	.word	0x00010831
    c360:	00030d40 	.word	0x00030d40

0000c364 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    c364:	b570      	push	{r4, r5, r6, lr}
    c366:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    c368:	4b14      	ldr	r3, [pc, #80]	; (c3bc <sd_mmc_spi_stop_multiwrite_block+0x58>)
    c36a:	881c      	ldrh	r4, [r3, #0]
    c36c:	2c01      	cmp	r4, #1
    c36e:	d023      	beq.n	c3b8 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    c370:	4b13      	ldr	r3, [pc, #76]	; (c3c0 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    c372:	8819      	ldrh	r1, [r3, #0]
    c374:	4b13      	ldr	r3, [pc, #76]	; (c3c4 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    c376:	6818      	ldr	r0, [r3, #0]
    c378:	4b13      	ldr	r3, [pc, #76]	; (c3c8 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    c37a:	4798      	blx	r3
		return true; // It is not the End of multi write
    c37c:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    c37e:	4284      	cmp	r4, r0
    c380:	d902      	bls.n	c388 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    c382:	0018      	movs	r0, r3
    c384:	b002      	add	sp, #8
    c386:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    c388:	466b      	mov	r3, sp
    c38a:	1ddc      	adds	r4, r3, #7
    c38c:	23ff      	movs	r3, #255	; 0xff
    c38e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c390:	4e0e      	ldr	r6, [pc, #56]	; (c3cc <sd_mmc_spi_stop_multiwrite_block+0x68>)
    c392:	2201      	movs	r2, #1
    c394:	0021      	movs	r1, r4
    c396:	0030      	movs	r0, r6
    c398:	4d0d      	ldr	r5, [pc, #52]	; (c3d0 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    c39a:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    c39c:	23fd      	movs	r3, #253	; 0xfd
    c39e:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c3a0:	2201      	movs	r2, #1
    c3a2:	0021      	movs	r1, r4
    c3a4:	0030      	movs	r0, r6
    c3a6:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    c3a8:	4b0a      	ldr	r3, [pc, #40]	; (c3d4 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    c3aa:	4798      	blx	r3
    c3ac:	1e03      	subs	r3, r0, #0
    c3ae:	d1e8      	bne.n	c382 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c3b0:	2105      	movs	r1, #5
    c3b2:	4a09      	ldr	r2, [pc, #36]	; (c3d8 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    c3b4:	7011      	strb	r1, [r2, #0]
		return false;
    c3b6:	e7e4      	b.n	c382 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    c3b8:	2301      	movs	r3, #1
    c3ba:	e7e2      	b.n	c382 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    c3bc:	20000464 	.word	0x20000464
    c3c0:	2000045c 	.word	0x2000045c
    c3c4:	2000046c 	.word	0x2000046c
    c3c8:	000175d5 	.word	0x000175d5
    c3cc:	20000420 	.word	0x20000420
    c3d0:	000109f9 	.word	0x000109f9
    c3d4:	0000c301 	.word	0x0000c301
    c3d8:	20000463 	.word	0x20000463

0000c3dc <sd_mmc_spi_start_read_block>:
{
    c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3de:	b083      	sub	sp, #12
	token = 0;
    c3e0:	2200      	movs	r2, #0
    c3e2:	466b      	mov	r3, sp
    c3e4:	71da      	strb	r2, [r3, #7]
    c3e6:	4c14      	ldr	r4, [pc, #80]	; (c438 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    c3e8:	466b      	mov	r3, sp
    c3ea:	1ddd      	adds	r5, r3, #7
    c3ec:	4e13      	ldr	r6, [pc, #76]	; (c43c <sd_mmc_spi_start_read_block+0x60>)
    c3ee:	4f14      	ldr	r7, [pc, #80]	; (c440 <sd_mmc_spi_start_read_block+0x64>)
    c3f0:	23ff      	movs	r3, #255	; 0xff
    c3f2:	2201      	movs	r2, #1
    c3f4:	0029      	movs	r1, r5
    c3f6:	0030      	movs	r0, r6
    c3f8:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    c3fa:	782b      	ldrb	r3, [r5, #0]
    c3fc:	220f      	movs	r2, #15
    c3fe:	0019      	movs	r1, r3
    c400:	4391      	bics	r1, r2
    c402:	1e0a      	subs	r2, r1, #0
    c404:	d009      	beq.n	c41a <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    c406:	2bfe      	cmp	r3, #254	; 0xfe
    c408:	d013      	beq.n	c432 <sd_mmc_spi_start_read_block+0x56>
    c40a:	3c01      	subs	r4, #1
		if (i-- == 0) {
    c40c:	2c00      	cmp	r4, #0
    c40e:	d1ef      	bne.n	c3f0 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    c410:	2204      	movs	r2, #4
    c412:	4b0c      	ldr	r3, [pc, #48]	; (c444 <sd_mmc_spi_start_read_block+0x68>)
    c414:	701a      	strb	r2, [r3, #0]
			return false;
    c416:	2000      	movs	r0, #0
    c418:	e00c      	b.n	c434 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    c41a:	075b      	lsls	r3, r3, #29
    c41c:	d004      	beq.n	c428 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    c41e:	3207      	adds	r2, #7
    c420:	4b08      	ldr	r3, [pc, #32]	; (c444 <sd_mmc_spi_start_read_block+0x68>)
    c422:	701a      	strb	r2, [r3, #0]
			return false;
    c424:	2000      	movs	r0, #0
    c426:	e005      	b.n	c434 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    c428:	220b      	movs	r2, #11
    c42a:	4b06      	ldr	r3, [pc, #24]	; (c444 <sd_mmc_spi_start_read_block+0x68>)
    c42c:	701a      	strb	r2, [r3, #0]
			return false;
    c42e:	2000      	movs	r0, #0
    c430:	e000      	b.n	c434 <sd_mmc_spi_start_read_block+0x58>
	return true;
    c432:	2001      	movs	r0, #1
}
    c434:	b003      	add	sp, #12
    c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c438:	0007a120 	.word	0x0007a120
    c43c:	20000420 	.word	0x20000420
    c440:	00010831 	.word	0x00010831
    c444:	20000463 	.word	0x20000463

0000c448 <sd_mmc_spi_stop_write_block>:
{
    c448:	b530      	push	{r4, r5, lr}
    c44a:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    c44c:	a901      	add	r1, sp, #4
    c44e:	2301      	movs	r3, #1
    c450:	425b      	negs	r3, r3
    c452:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    c454:	4d14      	ldr	r5, [pc, #80]	; (c4a8 <sd_mmc_spi_stop_write_block+0x60>)
    c456:	2202      	movs	r2, #2
    c458:	0028      	movs	r0, r5
    c45a:	4b14      	ldr	r3, [pc, #80]	; (c4ac <sd_mmc_spi_stop_write_block+0x64>)
    c45c:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    c45e:	466b      	mov	r3, sp
    c460:	1ddc      	adds	r4, r3, #7
    c462:	23ff      	movs	r3, #255	; 0xff
    c464:	2201      	movs	r2, #1
    c466:	0021      	movs	r1, r4
    c468:	0028      	movs	r0, r5
    c46a:	4d11      	ldr	r5, [pc, #68]	; (c4b0 <sd_mmc_spi_stop_write_block+0x68>)
    c46c:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    c46e:	7822      	ldrb	r2, [r4, #0]
    c470:	2311      	movs	r3, #17
    c472:	4013      	ands	r3, r2
    c474:	2b01      	cmp	r3, #1
    c476:	d005      	beq.n	c484 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c478:	2201      	movs	r2, #1
    c47a:	4b0e      	ldr	r3, [pc, #56]	; (c4b4 <sd_mmc_spi_stop_write_block+0x6c>)
    c47c:	701a      	strb	r2, [r3, #0]
		return false;
    c47e:	2000      	movs	r0, #0
}
    c480:	b003      	add	sp, #12
    c482:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    c484:	231e      	movs	r3, #30
    c486:	401a      	ands	r2, r3
    c488:	2a04      	cmp	r2, #4
    c48a:	d00b      	beq.n	c4a4 <sd_mmc_spi_stop_write_block+0x5c>
    c48c:	2a0a      	cmp	r2, #10
    c48e:	d104      	bne.n	c49a <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    c490:	3a02      	subs	r2, #2
    c492:	4b08      	ldr	r3, [pc, #32]	; (c4b4 <sd_mmc_spi_stop_write_block+0x6c>)
    c494:	701a      	strb	r2, [r3, #0]
		return false;
    c496:	2000      	movs	r0, #0
    c498:	e7f2      	b.n	c480 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    c49a:	220a      	movs	r2, #10
    c49c:	4b05      	ldr	r3, [pc, #20]	; (c4b4 <sd_mmc_spi_stop_write_block+0x6c>)
    c49e:	701a      	strb	r2, [r3, #0]
		return false;
    c4a0:	2000      	movs	r0, #0
    c4a2:	e7ed      	b.n	c480 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    c4a4:	2001      	movs	r0, #1
    c4a6:	e7eb      	b.n	c480 <sd_mmc_spi_stop_write_block+0x38>
    c4a8:	20000420 	.word	0x20000420
    c4ac:	000109f9 	.word	0x000109f9
    c4b0:	00010831 	.word	0x00010831
    c4b4:	20000463 	.word	0x20000463

0000c4b8 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c4b8:	b570      	push	{r4, r5, r6, lr}
    c4ba:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c4bc:	2300      	movs	r3, #0
    c4be:	4a2d      	ldr	r2, [pc, #180]	; (c574 <sd_mmc_spi_init+0xbc>)
    c4c0:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    c4c2:	ac02      	add	r4, sp, #8
    c4c4:	2501      	movs	r5, #1
    c4c6:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c4c8:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c4ca:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c4cc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c4ce:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c4d0:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    c4d2:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    c4d4:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    c4d6:	2224      	movs	r2, #36	; 0x24
    c4d8:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c4da:	3a18      	subs	r2, #24
    c4dc:	2100      	movs	r1, #0
    c4de:	a808      	add	r0, sp, #32
    c4e0:	4b25      	ldr	r3, [pc, #148]	; (c578 <sd_mmc_spi_init+0xc0>)
    c4e2:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c4e4:	2380      	movs	r3, #128	; 0x80
    c4e6:	025b      	lsls	r3, r3, #9
    c4e8:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c4ea:	4b24      	ldr	r3, [pc, #144]	; (c57c <sd_mmc_spi_init+0xc4>)
    c4ec:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c4ee:	4b24      	ldr	r3, [pc, #144]	; (c580 <sd_mmc_spi_init+0xc8>)
    c4f0:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c4f2:	4b24      	ldr	r3, [pc, #144]	; (c584 <sd_mmc_spi_init+0xcc>)
    c4f4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c4f6:	4b24      	ldr	r3, [pc, #144]	; (c588 <sd_mmc_spi_init+0xd0>)
    c4f8:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c4fa:	4b24      	ldr	r3, [pc, #144]	; (c58c <sd_mmc_spi_init+0xd4>)
    c4fc:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c4fe:	4e24      	ldr	r6, [pc, #144]	; (c590 <sd_mmc_spi_init+0xd8>)
    c500:	0022      	movs	r2, r4
    c502:	4924      	ldr	r1, [pc, #144]	; (c594 <sd_mmc_spi_init+0xdc>)
    c504:	0030      	movs	r0, r6
    c506:	4b24      	ldr	r3, [pc, #144]	; (c598 <sd_mmc_spi_init+0xe0>)
    c508:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c50a:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c50c:	0020      	movs	r0, r4
    c50e:	4b23      	ldr	r3, [pc, #140]	; (c59c <sd_mmc_spi_init+0xe4>)
    c510:	4798      	blx	r3
    c512:	231f      	movs	r3, #31
    c514:	4018      	ands	r0, r3
    c516:	4085      	lsls	r5, r0
    c518:	4b21      	ldr	r3, [pc, #132]	; (c5a0 <sd_mmc_spi_init+0xe8>)
    c51a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c51c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    c51e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    c520:	2b00      	cmp	r3, #0
    c522:	d1fc      	bne.n	c51e <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c524:	6823      	ldr	r3, [r4, #0]
    c526:	2202      	movs	r2, #2
    c528:	4313      	orrs	r3, r2
    c52a:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    c52c:	4a1d      	ldr	r2, [pc, #116]	; (c5a4 <sd_mmc_spi_init+0xec>)
    c52e:	2300      	movs	r3, #0
    c530:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c532:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    c534:	491c      	ldr	r1, [pc, #112]	; (c5a8 <sd_mmc_spi_init+0xf0>)
    c536:	7808      	ldrb	r0, [r1, #0]
    c538:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c53a:	4c1c      	ldr	r4, [pc, #112]	; (c5ac <sd_mmc_spi_init+0xf4>)
    c53c:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c53e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c540:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c542:	a901      	add	r1, sp, #4
    c544:	2201      	movs	r2, #1
    c546:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c548:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c54a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c54c:	4b18      	ldr	r3, [pc, #96]	; (c5b0 <sd_mmc_spi_init+0xf8>)
    c54e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c550:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c552:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c554:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c556:	2900      	cmp	r1, #0
    c558:	d104      	bne.n	c564 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    c55a:	0953      	lsrs	r3, r2, #5
    c55c:	01db      	lsls	r3, r3, #7
    c55e:	4915      	ldr	r1, [pc, #84]	; (c5b4 <sd_mmc_spi_init+0xfc>)
    c560:	468c      	mov	ip, r1
    c562:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c564:	211f      	movs	r1, #31
    c566:	4011      	ands	r1, r2
    c568:	2201      	movs	r2, #1
    c56a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    c56c:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    c56e:	b010      	add	sp, #64	; 0x40
    c570:	bd70      	pop	{r4, r5, r6, pc}
    c572:	46c0      	nop			; (mov r8, r8)
    c574:	20000463 	.word	0x20000463
    c578:	000179c7 	.word	0x000179c7
    c57c:	00100002 	.word	0x00100002
    c580:	00110002 	.word	0x00110002
    c584:	00120002 	.word	0x00120002
    c588:	00130002 	.word	0x00130002
    c58c:	00061a80 	.word	0x00061a80
    c590:	20000420 	.word	0x20000420
    c594:	42000c00 	.word	0x42000c00
    c598:	00010659 	.word	0x00010659
    c59c:	00010511 	.word	0x00010511
    c5a0:	e000e100 	.word	0xe000e100
    c5a4:	20000470 	.word	0x20000470
    c5a8:	20000070 	.word	0x20000070
    c5ac:	20000460 	.word	0x20000460
    c5b0:	0000fefd 	.word	0x0000fefd
    c5b4:	41004400 	.word	0x41004400

0000c5b8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5ba:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c5bc:	2200      	movs	r2, #0
    c5be:	4b0d      	ldr	r3, [pc, #52]	; (c5f4 <sd_mmc_spi_select_device+0x3c>)
    c5c0:	701a      	strb	r2, [r3, #0]
    c5c2:	000c      	movs	r4, r1
    c5c4:	4b0c      	ldr	r3, [pc, #48]	; (c5f8 <sd_mmc_spi_select_device+0x40>)
    c5c6:	4299      	cmp	r1, r3
    c5c8:	d900      	bls.n	c5cc <sd_mmc_spi_select_device+0x14>
    c5ca:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c5cc:	4d0b      	ldr	r5, [pc, #44]	; (c5fc <sd_mmc_spi_select_device+0x44>)
    c5ce:	4e0c      	ldr	r6, [pc, #48]	; (c600 <sd_mmc_spi_select_device+0x48>)
    c5d0:	e001      	b.n	c5d6 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    c5d2:	08e3      	lsrs	r3, r4, #3
    c5d4:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c5d6:	0021      	movs	r1, r4
    c5d8:	0028      	movs	r0, r5
    c5da:	47b0      	blx	r6
    c5dc:	2817      	cmp	r0, #23
    c5de:	d0f8      	beq.n	c5d2 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c5e0:	0079      	lsls	r1, r7, #1
    c5e2:	19cf      	adds	r7, r1, r7
    c5e4:	4907      	ldr	r1, [pc, #28]	; (c604 <sd_mmc_spi_select_device+0x4c>)
    c5e6:	19c9      	adds	r1, r1, r7
    c5e8:	2201      	movs	r2, #1
    c5ea:	4804      	ldr	r0, [pc, #16]	; (c5fc <sd_mmc_spi_select_device+0x44>)
    c5ec:	4b06      	ldr	r3, [pc, #24]	; (c608 <sd_mmc_spi_select_device+0x50>)
    c5ee:	4798      	blx	r3
}
    c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5f2:	46c0      	nop			; (mov r8, r8)
    c5f4:	20000463 	.word	0x20000463
    c5f8:	00989680 	.word	0x00989680
    c5fc:	20000420 	.word	0x20000420
    c600:	000105a1 	.word	0x000105a1
    c604:	20000460 	.word	0x20000460
    c608:	00010905 	.word	0x00010905

0000c60c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c60c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c60e:	2200      	movs	r2, #0
    c610:	4b04      	ldr	r3, [pc, #16]	; (c624 <sd_mmc_spi_deselect_device+0x18>)
    c612:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c614:	0041      	lsls	r1, r0, #1
    c616:	1808      	adds	r0, r1, r0
    c618:	4903      	ldr	r1, [pc, #12]	; (c628 <sd_mmc_spi_deselect_device+0x1c>)
    c61a:	1809      	adds	r1, r1, r0
    c61c:	4803      	ldr	r0, [pc, #12]	; (c62c <sd_mmc_spi_deselect_device+0x20>)
    c61e:	4b04      	ldr	r3, [pc, #16]	; (c630 <sd_mmc_spi_deselect_device+0x24>)
    c620:	4798      	blx	r3
}
    c622:	bd10      	pop	{r4, pc}
    c624:	20000463 	.word	0x20000463
    c628:	20000460 	.word	0x20000460
    c62c:	20000420 	.word	0x20000420
    c630:	00010905 	.word	0x00010905

0000c634 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c634:	b570      	push	{r4, r5, r6, lr}
    c636:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    c638:	22ff      	movs	r2, #255	; 0xff
    c63a:	466b      	mov	r3, sp
    c63c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c63e:	2200      	movs	r2, #0
    c640:	4b07      	ldr	r3, [pc, #28]	; (c660 <sd_mmc_spi_send_clock+0x2c>)
    c642:	701a      	strb	r2, [r3, #0]
    c644:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c646:	4e07      	ldr	r6, [pc, #28]	; (c664 <sd_mmc_spi_send_clock+0x30>)
    c648:	4d07      	ldr	r5, [pc, #28]	; (c668 <sd_mmc_spi_send_clock+0x34>)
    c64a:	2201      	movs	r2, #1
    c64c:	466b      	mov	r3, sp
    c64e:	1dd9      	adds	r1, r3, #7
    c650:	0030      	movs	r0, r6
    c652:	47a8      	blx	r5
    c654:	3c01      	subs	r4, #1
    c656:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    c658:	2c00      	cmp	r4, #0
    c65a:	d1f6      	bne.n	c64a <sd_mmc_spi_send_clock+0x16>
	}
}
    c65c:	b002      	add	sp, #8
    c65e:	bd70      	pop	{r4, r5, r6, pc}
    c660:	20000463 	.word	0x20000463
    c664:	20000420 	.word	0x20000420
    c668:	000109f9 	.word	0x000109f9

0000c66c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c66e:	46c6      	mov	lr, r8
    c670:	b500      	push	{lr}
    c672:	b086      	sub	sp, #24
    c674:	4680      	mov	r8, r0
    c676:	9200      	str	r2, [sp, #0]
    c678:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    c67a:	22ff      	movs	r2, #255	; 0xff
    c67c:	230f      	movs	r3, #15
    c67e:	a802      	add	r0, sp, #8
    c680:	4684      	mov	ip, r0
    c682:	4463      	add	r3, ip
    c684:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c686:	2200      	movs	r2, #0
    c688:	4b53      	ldr	r3, [pc, #332]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c68a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c68c:	ab04      	add	r3, sp, #16
    c68e:	323f      	adds	r2, #63	; 0x3f
    c690:	4640      	mov	r0, r8
    c692:	4002      	ands	r2, r0
    c694:	2040      	movs	r0, #64	; 0x40
    c696:	4302      	orrs	r2, r0
    c698:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c69a:	0e0a      	lsrs	r2, r1, #24
    c69c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c69e:	0c0a      	lsrs	r2, r1, #16
    c6a0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c6a2:	0a0a      	lsrs	r2, r1, #8
    c6a4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c6a6:	7119      	strb	r1, [r3, #4]
    c6a8:	2700      	movs	r7, #0
	crc = 0;
    c6aa:	2300      	movs	r3, #0
		value = *buf++;
    c6ac:	a904      	add	r1, sp, #16
    c6ae:	2208      	movs	r2, #8
				crc ^= 0x09;
    c6b0:	2409      	movs	r4, #9
    c6b2:	e011      	b.n	c6d8 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    c6b4:	0076      	lsls	r6, r6, #1
    c6b6:	b2f6      	uxtb	r6, r6
    c6b8:	3801      	subs	r0, #1
    c6ba:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    c6bc:	2800      	cmp	r0, #0
    c6be:	d008      	beq.n	c6d2 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    c6c0:	005b      	lsls	r3, r3, #1
    c6c2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    c6c4:	001d      	movs	r5, r3
    c6c6:	4075      	eors	r5, r6
    c6c8:	062d      	lsls	r5, r5, #24
    c6ca:	d5f3      	bpl.n	c6b4 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    c6cc:	4063      	eors	r3, r4
    c6ce:	b2db      	uxtb	r3, r3
    c6d0:	e7f0      	b.n	c6b4 <sd_mmc_spi_adtc_start+0x48>
    c6d2:	3701      	adds	r7, #1
	while (size--) {
    c6d4:	2f05      	cmp	r7, #5
    c6d6:	d002      	beq.n	c6de <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    c6d8:	5c7e      	ldrb	r6, [r7, r1]
    c6da:	0010      	movs	r0, r2
    c6dc:	e7f0      	b.n	c6c0 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    c6de:	005b      	lsls	r3, r3, #1
    c6e0:	2201      	movs	r2, #1
    c6e2:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c6e4:	ac04      	add	r4, sp, #16
    c6e6:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c6e8:	4e3c      	ldr	r6, [pc, #240]	; (c7dc <sd_mmc_spi_adtc_start+0x170>)
    c6ea:	2201      	movs	r2, #1
    c6ec:	210f      	movs	r1, #15
    c6ee:	ab02      	add	r3, sp, #8
    c6f0:	469c      	mov	ip, r3
    c6f2:	4461      	add	r1, ip
    c6f4:	0030      	movs	r0, r6
    c6f6:	4f3a      	ldr	r7, [pc, #232]	; (c7e0 <sd_mmc_spi_adtc_start+0x174>)
    c6f8:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c6fa:	2206      	movs	r2, #6
    c6fc:	0021      	movs	r1, r4
    c6fe:	0030      	movs	r0, r6
    c700:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c702:	ab02      	add	r3, sp, #8
    c704:	1dd9      	adds	r1, r3, #7
    c706:	23ff      	movs	r3, #255	; 0xff
    c708:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c70a:	2201      	movs	r2, #1
    c70c:	0030      	movs	r0, r6
    c70e:	4e35      	ldr	r6, [pc, #212]	; (c7e4 <sd_mmc_spi_adtc_start+0x178>)
    c710:	47b0      	blx	r6
    c712:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c714:	ab02      	add	r3, sp, #8
    c716:	1dde      	adds	r6, r3, #7
    c718:	4f30      	ldr	r7, [pc, #192]	; (c7dc <sd_mmc_spi_adtc_start+0x170>)
    c71a:	4d32      	ldr	r5, [pc, #200]	; (c7e4 <sd_mmc_spi_adtc_start+0x178>)
    c71c:	23ff      	movs	r3, #255	; 0xff
    c71e:	2201      	movs	r2, #1
    c720:	0031      	movs	r1, r6
    c722:	0038      	movs	r0, r7
    c724:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c726:	7833      	ldrb	r3, [r6, #0]
    c728:	b25a      	sxtb	r2, r3
    c72a:	2a00      	cmp	r2, #0
    c72c:	da0b      	bge.n	c746 <sd_mmc_spi_adtc_start+0xda>
    c72e:	3c01      	subs	r4, #1
    c730:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c732:	2c00      	cmp	r4, #0
    c734:	d1f2      	bne.n	c71c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c736:	2202      	movs	r2, #2
    c738:	4b27      	ldr	r3, [pc, #156]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c73a:	701a      	strb	r2, [r3, #0]
			return false;
    c73c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    c73e:	b006      	add	sp, #24
    c740:	bc04      	pop	{r2}
    c742:	4690      	mov	r8, r2
    c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    c746:	4a28      	ldr	r2, [pc, #160]	; (c7e8 <sd_mmc_spi_adtc_start+0x17c>)
    c748:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    c74a:	071a      	lsls	r2, r3, #28
    c74c:	d41a      	bmi.n	c784 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c74e:	075a      	lsls	r2, r3, #29
    c750:	d41d      	bmi.n	c78e <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    c752:	2201      	movs	r2, #1
    c754:	4393      	bics	r3, r2
    c756:	d11f      	bne.n	c798 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    c758:	4643      	mov	r3, r8
    c75a:	049b      	lsls	r3, r3, #18
    c75c:	d420      	bmi.n	c7a0 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    c75e:	4643      	mov	r3, r8
    c760:	059b      	lsls	r3, r3, #22
    c762:	d425      	bmi.n	c7b0 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    c764:	4643      	mov	r3, r8
    c766:	055b      	lsls	r3, r3, #21
    c768:	d42b      	bmi.n	c7c2 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    c76a:	4b20      	ldr	r3, [pc, #128]	; (c7ec <sd_mmc_spi_adtc_start+0x180>)
    c76c:	466a      	mov	r2, sp
    c76e:	8812      	ldrh	r2, [r2, #0]
    c770:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c772:	4b1f      	ldr	r3, [pc, #124]	; (c7f0 <sd_mmc_spi_adtc_start+0x184>)
    c774:	466a      	mov	r2, sp
    c776:	8892      	ldrh	r2, [r2, #4]
    c778:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c77a:	2200      	movs	r2, #0
    c77c:	4b1d      	ldr	r3, [pc, #116]	; (c7f4 <sd_mmc_spi_adtc_start+0x188>)
    c77e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c780:	2001      	movs	r0, #1
    c782:	e7dc      	b.n	c73e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c784:	2206      	movs	r2, #6
    c786:	4b14      	ldr	r3, [pc, #80]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c788:	701a      	strb	r2, [r3, #0]
		return false;
    c78a:	2000      	movs	r0, #0
    c78c:	e7d7      	b.n	c73e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c78e:	2209      	movs	r2, #9
    c790:	4b11      	ldr	r3, [pc, #68]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c792:	701a      	strb	r2, [r3, #0]
		return false;
    c794:	2000      	movs	r0, #0
    c796:	e7d2      	b.n	c73e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c798:	4b0f      	ldr	r3, [pc, #60]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c79a:	701a      	strb	r2, [r3, #0]
		return false;
    c79c:	2000      	movs	r0, #0
    c79e:	e7ce      	b.n	c73e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    c7a0:	4b15      	ldr	r3, [pc, #84]	; (c7f8 <sd_mmc_spi_adtc_start+0x18c>)
    c7a2:	4798      	blx	r3
    c7a4:	2800      	cmp	r0, #0
    c7a6:	d1da      	bne.n	c75e <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c7a8:	2203      	movs	r2, #3
    c7aa:	4b0b      	ldr	r3, [pc, #44]	; (c7d8 <sd_mmc_spi_adtc_start+0x16c>)
    c7ac:	701a      	strb	r2, [r3, #0]
			return false;
    c7ae:	e7c6      	b.n	c73e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    c7b0:	490d      	ldr	r1, [pc, #52]	; (c7e8 <sd_mmc_spi_adtc_start+0x17c>)
    c7b2:	2300      	movs	r3, #0
    c7b4:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c7b6:	33ff      	adds	r3, #255	; 0xff
    c7b8:	2201      	movs	r2, #1
    c7ba:	4808      	ldr	r0, [pc, #32]	; (c7dc <sd_mmc_spi_adtc_start+0x170>)
    c7bc:	4e09      	ldr	r6, [pc, #36]	; (c7e4 <sd_mmc_spi_adtc_start+0x178>)
    c7be:	47b0      	blx	r6
    c7c0:	e7d0      	b.n	c764 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c7c2:	4e09      	ldr	r6, [pc, #36]	; (c7e8 <sd_mmc_spi_adtc_start+0x17c>)
    c7c4:	23ff      	movs	r3, #255	; 0xff
    c7c6:	2204      	movs	r2, #4
    c7c8:	0031      	movs	r1, r6
    c7ca:	4804      	ldr	r0, [pc, #16]	; (c7dc <sd_mmc_spi_adtc_start+0x170>)
    c7cc:	4f05      	ldr	r7, [pc, #20]	; (c7e4 <sd_mmc_spi_adtc_start+0x178>)
    c7ce:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c7d0:	6833      	ldr	r3, [r6, #0]
    c7d2:	ba1b      	rev	r3, r3
    c7d4:	6033      	str	r3, [r6, #0]
    c7d6:	e7c8      	b.n	c76a <sd_mmc_spi_adtc_start+0xfe>
    c7d8:	20000463 	.word	0x20000463
    c7dc:	20000420 	.word	0x20000420
    c7e0:	000109f9 	.word	0x000109f9
    c7e4:	00010831 	.word	0x00010831
    c7e8:	20000468 	.word	0x20000468
    c7ec:	2000045c 	.word	0x2000045c
    c7f0:	20000464 	.word	0x20000464
    c7f4:	2000046c 	.word	0x2000046c
    c7f8:	0000c301 	.word	0x0000c301

0000c7fc <sd_mmc_spi_send_cmd>:
{
    c7fc:	b510      	push	{r4, lr}
    c7fe:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c800:	2300      	movs	r3, #0
    c802:	9300      	str	r3, [sp, #0]
    c804:	2200      	movs	r2, #0
    c806:	4c02      	ldr	r4, [pc, #8]	; (c810 <sd_mmc_spi_send_cmd+0x14>)
    c808:	47a0      	blx	r4
}
    c80a:	b002      	add	sp, #8
    c80c:	bd10      	pop	{r4, pc}
    c80e:	46c0      	nop			; (mov r8, r8)
    c810:	0000c66d 	.word	0x0000c66d

0000c814 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    c814:	4b01      	ldr	r3, [pc, #4]	; (c81c <sd_mmc_spi_get_response+0x8>)
    c816:	6818      	ldr	r0, [r3, #0]
}
    c818:	4770      	bx	lr
    c81a:	46c0      	nop			; (mov r8, r8)
    c81c:	20000468 	.word	0x20000468

0000c820 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c820:	b510      	push	{r4, lr}
    c822:	b084      	sub	sp, #16
    c824:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c826:	2200      	movs	r2, #0
    c828:	4b14      	ldr	r3, [pc, #80]	; (c87c <sd_mmc_spi_read_word+0x5c>)
    c82a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c82c:	4b14      	ldr	r3, [pc, #80]	; (c880 <sd_mmc_spi_read_word+0x60>)
    c82e:	8819      	ldrh	r1, [r3, #0]
    c830:	4b14      	ldr	r3, [pc, #80]	; (c884 <sd_mmc_spi_read_word+0x64>)
    c832:	6818      	ldr	r0, [r3, #0]
    c834:	4b14      	ldr	r3, [pc, #80]	; (c888 <sd_mmc_spi_read_word+0x68>)
    c836:	4798      	blx	r3
    c838:	2900      	cmp	r1, #0
    c83a:	d103      	bne.n	c844 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c83c:	4b13      	ldr	r3, [pc, #76]	; (c88c <sd_mmc_spi_read_word+0x6c>)
    c83e:	4798      	blx	r3
    c840:	2800      	cmp	r0, #0
    c842:	d010      	beq.n	c866 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c844:	23ff      	movs	r3, #255	; 0xff
    c846:	2204      	movs	r2, #4
    c848:	a901      	add	r1, sp, #4
    c84a:	4811      	ldr	r0, [pc, #68]	; (c890 <sd_mmc_spi_read_word+0x70>)
    c84c:	4c11      	ldr	r4, [pc, #68]	; (c894 <sd_mmc_spi_read_word+0x74>)
    c84e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    c850:	4b0c      	ldr	r3, [pc, #48]	; (c884 <sd_mmc_spi_read_word+0x64>)
    c852:	681a      	ldr	r2, [r3, #0]
    c854:	1d10      	adds	r0, r2, #4
    c856:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c858:	4b09      	ldr	r3, [pc, #36]	; (c880 <sd_mmc_spi_read_word+0x60>)
    c85a:	8819      	ldrh	r1, [r3, #0]
    c85c:	4b0a      	ldr	r3, [pc, #40]	; (c888 <sd_mmc_spi_read_word+0x68>)
    c85e:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    c860:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c862:	2900      	cmp	r1, #0
    c864:	d001      	beq.n	c86a <sd_mmc_spi_read_word+0x4a>
}
    c866:	b004      	add	sp, #16
    c868:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c86a:	23ff      	movs	r3, #255	; 0xff
    c86c:	2202      	movs	r2, #2
    c86e:	a903      	add	r1, sp, #12
    c870:	4807      	ldr	r0, [pc, #28]	; (c890 <sd_mmc_spi_read_word+0x70>)
    c872:	4c08      	ldr	r4, [pc, #32]	; (c894 <sd_mmc_spi_read_word+0x74>)
    c874:	47a0      	blx	r4
	return true;
    c876:	2001      	movs	r0, #1
    c878:	e7f5      	b.n	c866 <sd_mmc_spi_read_word+0x46>
    c87a:	46c0      	nop			; (mov r8, r8)
    c87c:	20000463 	.word	0x20000463
    c880:	2000045c 	.word	0x2000045c
    c884:	2000046c 	.word	0x2000046c
    c888:	000176e1 	.word	0x000176e1
    c88c:	0000c3dd 	.word	0x0000c3dd
    c890:	20000420 	.word	0x20000420
    c894:	00010831 	.word	0x00010831

0000c898 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c898:	b5f0      	push	{r4, r5, r6, r7, lr}
    c89a:	46de      	mov	lr, fp
    c89c:	4657      	mov	r7, sl
    c89e:	4646      	mov	r6, r8
    c8a0:	b5c0      	push	{r6, r7, lr}
    c8a2:	b082      	sub	sp, #8
    c8a4:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c8a6:	2200      	movs	r2, #0
    c8a8:	4b17      	ldr	r3, [pc, #92]	; (c908 <sd_mmc_spi_start_read_blocks+0x70>)
    c8aa:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    c8ac:	1e4c      	subs	r4, r1, #1
    c8ae:	b2a4      	uxth	r4, r4
    c8b0:	2900      	cmp	r1, #0
    c8b2:	d026      	beq.n	c902 <sd_mmc_spi_start_read_blocks+0x6a>
    c8b4:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c8b6:	4b15      	ldr	r3, [pc, #84]	; (c90c <sd_mmc_spi_start_read_blocks+0x74>)
    c8b8:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c8ba:	4f15      	ldr	r7, [pc, #84]	; (c910 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    c8bc:	47d0      	blx	sl
    c8be:	4680      	mov	r8, r0
    c8c0:	2800      	cmp	r0, #0
    c8c2:	d017      	beq.n	c8f4 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c8c4:	883a      	ldrh	r2, [r7, #0]
    c8c6:	465b      	mov	r3, fp
    c8c8:	1999      	adds	r1, r3, r6
    c8ca:	23ff      	movs	r3, #255	; 0xff
    c8cc:	4811      	ldr	r0, [pc, #68]	; (c914 <sd_mmc_spi_start_read_blocks+0x7c>)
    c8ce:	4d12      	ldr	r5, [pc, #72]	; (c918 <sd_mmc_spi_start_read_blocks+0x80>)
    c8d0:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c8d2:	883b      	ldrh	r3, [r7, #0]
    c8d4:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c8d6:	4a11      	ldr	r2, [pc, #68]	; (c91c <sd_mmc_spi_start_read_blocks+0x84>)
    c8d8:	6811      	ldr	r1, [r2, #0]
    c8da:	468c      	mov	ip, r1
    c8dc:	4463      	add	r3, ip
    c8de:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c8e0:	23ff      	movs	r3, #255	; 0xff
    c8e2:	2202      	movs	r2, #2
    c8e4:	a901      	add	r1, sp, #4
    c8e6:	480b      	ldr	r0, [pc, #44]	; (c914 <sd_mmc_spi_start_read_blocks+0x7c>)
    c8e8:	47a8      	blx	r5
	while (nb_block--) {
    c8ea:	3c01      	subs	r4, #1
    c8ec:	b2a4      	uxth	r4, r4
    c8ee:	4b0c      	ldr	r3, [pc, #48]	; (c920 <sd_mmc_spi_start_read_blocks+0x88>)
    c8f0:	429c      	cmp	r4, r3
    c8f2:	d1e3      	bne.n	c8bc <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    c8f4:	4640      	mov	r0, r8
    c8f6:	b002      	add	sp, #8
    c8f8:	bc1c      	pop	{r2, r3, r4}
    c8fa:	4690      	mov	r8, r2
    c8fc:	469a      	mov	sl, r3
    c8fe:	46a3      	mov	fp, r4
    c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    c902:	2301      	movs	r3, #1
    c904:	4698      	mov	r8, r3
    c906:	e7f5      	b.n	c8f4 <sd_mmc_spi_start_read_blocks+0x5c>
    c908:	20000463 	.word	0x20000463
    c90c:	0000c3dd 	.word	0x0000c3dd
    c910:	2000045c 	.word	0x2000045c
    c914:	20000420 	.word	0x20000420
    c918:	00010831 	.word	0x00010831
    c91c:	2000046c 	.word	0x2000046c
    c920:	0000ffff 	.word	0x0000ffff

0000c924 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    c924:	2001      	movs	r0, #1
    c926:	4770      	bx	lr

0000c928 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c928:	b5f0      	push	{r4, r5, r6, r7, lr}
    c92a:	46c6      	mov	lr, r8
    c92c:	b500      	push	{lr}
    c92e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c930:	2200      	movs	r2, #0
    c932:	4b15      	ldr	r3, [pc, #84]	; (c988 <sd_mmc_spi_start_write_blocks+0x60>)
    c934:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c936:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c938:	4f14      	ldr	r7, [pc, #80]	; (c98c <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c93a:	4e15      	ldr	r6, [pc, #84]	; (c990 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    c93c:	e000      	b.n	c940 <sd_mmc_spi_start_write_blocks+0x18>
{
    c93e:	0021      	movs	r1, r4
	while (nb_block--) {
    c940:	1e4c      	subs	r4, r1, #1
    c942:	b2a4      	uxth	r4, r4
    c944:	2900      	cmp	r1, #0
    c946:	d01b      	beq.n	c980 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    c948:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c94a:	8832      	ldrh	r2, [r6, #0]
    c94c:	4643      	mov	r3, r8
    c94e:	1959      	adds	r1, r3, r5
    c950:	4810      	ldr	r0, [pc, #64]	; (c994 <sd_mmc_spi_start_write_blocks+0x6c>)
    c952:	4b11      	ldr	r3, [pc, #68]	; (c998 <sd_mmc_spi_start_write_blocks+0x70>)
    c954:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c956:	8833      	ldrh	r3, [r6, #0]
    c958:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c95a:	4a10      	ldr	r2, [pc, #64]	; (c99c <sd_mmc_spi_start_write_blocks+0x74>)
    c95c:	6811      	ldr	r1, [r2, #0]
    c95e:	468c      	mov	ip, r1
    c960:	4463      	add	r3, ip
    c962:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c964:	4b0e      	ldr	r3, [pc, #56]	; (c9a0 <sd_mmc_spi_start_write_blocks+0x78>)
    c966:	4798      	blx	r3
    c968:	2800      	cmp	r0, #0
    c96a:	d00a      	beq.n	c982 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c96c:	2c00      	cmp	r4, #0
    c96e:	d0e6      	beq.n	c93e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c970:	4b0c      	ldr	r3, [pc, #48]	; (c9a4 <sd_mmc_spi_start_write_blocks+0x7c>)
    c972:	4798      	blx	r3
    c974:	2800      	cmp	r0, #0
    c976:	d1e2      	bne.n	c93e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c978:	2205      	movs	r2, #5
    c97a:	4b03      	ldr	r3, [pc, #12]	; (c988 <sd_mmc_spi_start_write_blocks+0x60>)
    c97c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c97e:	e000      	b.n	c982 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    c980:	2001      	movs	r0, #1
}
    c982:	bc04      	pop	{r2}
    c984:	4690      	mov	r8, r2
    c986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c988:	20000463 	.word	0x20000463
    c98c:	0000c2b9 	.word	0x0000c2b9
    c990:	2000045c 	.word	0x2000045c
    c994:	20000420 	.word	0x20000420
    c998:	000109f9 	.word	0x000109f9
    c99c:	2000046c 	.word	0x2000046c
    c9a0:	0000c449 	.word	0x0000c449
    c9a4:	0000c301 	.word	0x0000c301

0000c9a8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c9a8:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c9aa:	4b05      	ldr	r3, [pc, #20]	; (c9c0 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    c9ac:	4798      	blx	r3
    c9ae:	2800      	cmp	r0, #0
    c9b0:	d103      	bne.n	c9ba <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c9b2:	2205      	movs	r2, #5
    c9b4:	4b03      	ldr	r3, [pc, #12]	; (c9c4 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    c9b6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    c9b8:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    c9ba:	4b03      	ldr	r3, [pc, #12]	; (c9c8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    c9bc:	4798      	blx	r3
    c9be:	e7fb      	b.n	c9b8 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    c9c0:	0000c301 	.word	0x0000c301
    c9c4:	20000463 	.word	0x20000463
    c9c8:	0000c365 	.word	0x0000c365

0000c9cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c9cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c9ce:	2000      	movs	r0, #0
    c9d0:	4b08      	ldr	r3, [pc, #32]	; (c9f4 <delay_init+0x28>)
    c9d2:	4798      	blx	r3
    c9d4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    c9d6:	4c08      	ldr	r4, [pc, #32]	; (c9f8 <delay_init+0x2c>)
    c9d8:	21fa      	movs	r1, #250	; 0xfa
    c9da:	0089      	lsls	r1, r1, #2
    c9dc:	47a0      	blx	r4
    c9de:	4b07      	ldr	r3, [pc, #28]	; (c9fc <delay_init+0x30>)
    c9e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c9e2:	4907      	ldr	r1, [pc, #28]	; (ca00 <delay_init+0x34>)
    c9e4:	0028      	movs	r0, r5
    c9e6:	47a0      	blx	r4
    c9e8:	4b06      	ldr	r3, [pc, #24]	; (ca04 <delay_init+0x38>)
    c9ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c9ec:	2205      	movs	r2, #5
    c9ee:	4b06      	ldr	r3, [pc, #24]	; (ca08 <delay_init+0x3c>)
    c9f0:	601a      	str	r2, [r3, #0]
}
    c9f2:	bd70      	pop	{r4, r5, r6, pc}
    c9f4:	00011839 	.word	0x00011839
    c9f8:	000175d5 	.word	0x000175d5
    c9fc:	20000074 	.word	0x20000074
    ca00:	000f4240 	.word	0x000f4240
    ca04:	20000078 	.word	0x20000078
    ca08:	e000e010 	.word	0xe000e010

0000ca0c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    ca0c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    ca0e:	4b08      	ldr	r3, [pc, #32]	; (ca30 <delay_cycles_ms+0x24>)
    ca10:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    ca12:	4a08      	ldr	r2, [pc, #32]	; (ca34 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    ca14:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    ca16:	2180      	movs	r1, #128	; 0x80
    ca18:	0249      	lsls	r1, r1, #9
	while (n--) {
    ca1a:	3801      	subs	r0, #1
    ca1c:	d307      	bcc.n	ca2e <delay_cycles_ms+0x22>
	if (n > 0) {
    ca1e:	2c00      	cmp	r4, #0
    ca20:	d0fb      	beq.n	ca1a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    ca22:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    ca24:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    ca26:	6813      	ldr	r3, [r2, #0]
    ca28:	420b      	tst	r3, r1
    ca2a:	d0fc      	beq.n	ca26 <delay_cycles_ms+0x1a>
    ca2c:	e7f5      	b.n	ca1a <delay_cycles_ms+0xe>
	}
}
    ca2e:	bd30      	pop	{r4, r5, pc}
    ca30:	20000074 	.word	0x20000074
    ca34:	e000e010 	.word	0xe000e010

0000ca38 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    ca38:	b510      	push	{r4, lr}
	if (gpfIsr) {
    ca3a:	4b03      	ldr	r3, [pc, #12]	; (ca48 <chip_isr+0x10>)
    ca3c:	681b      	ldr	r3, [r3, #0]
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d000      	beq.n	ca44 <chip_isr+0xc>
		gpfIsr();
    ca42:	4798      	blx	r3
	}
}
    ca44:	bd10      	pop	{r4, pc}
    ca46:	46c0      	nop			; (mov r8, r8)
    ca48:	20000474 	.word	0x20000474

0000ca4c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    ca4c:	b570      	push	{r4, r5, r6, lr}
    ca4e:	b082      	sub	sp, #8
	gpfIsr = NULL;
    ca50:	2300      	movs	r3, #0
    ca52:	4a15      	ldr	r2, [pc, #84]	; (caa8 <nm_bsp_init+0x5c>)
    ca54:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ca56:	ac01      	add	r4, sp, #4
    ca58:	2501      	movs	r5, #1
    ca5a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    ca5c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ca5e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    ca60:	0021      	movs	r1, r4
    ca62:	201b      	movs	r0, #27
    ca64:	4e11      	ldr	r6, [pc, #68]	; (caac <nm_bsp_init+0x60>)
    ca66:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    ca68:	0021      	movs	r1, r4
    ca6a:	201c      	movs	r0, #28
    ca6c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    ca6e:	0021      	movs	r1, r4
    ca70:	2028      	movs	r0, #40	; 0x28
    ca72:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    ca74:	4b0e      	ldr	r3, [pc, #56]	; (cab0 <nm_bsp_init+0x64>)
    ca76:	2280      	movs	r2, #128	; 0x80
    ca78:	0552      	lsls	r2, r2, #21
    ca7a:	615a      	str	r2, [r3, #20]
    ca7c:	2280      	movs	r2, #128	; 0x80
    ca7e:	0512      	lsls	r2, r2, #20
    ca80:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    ca82:	4b0c      	ldr	r3, [pc, #48]	; (cab4 <nm_bsp_init+0x68>)
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	421d      	tst	r5, r3
    ca88:	d003      	beq.n	ca92 <nm_bsp_init+0x46>
    ca8a:	4b0a      	ldr	r3, [pc, #40]	; (cab4 <nm_bsp_init+0x68>)
    ca8c:	681b      	ldr	r3, [r3, #0]
    ca8e:	079b      	lsls	r3, r3, #30
    ca90:	d401      	bmi.n	ca96 <nm_bsp_init+0x4a>
	    delay_init();
    ca92:	4b09      	ldr	r3, [pc, #36]	; (cab8 <nm_bsp_init+0x6c>)
    ca94:	4798      	blx	r3
	cpu_irq_enable();
    ca96:	2201      	movs	r2, #1
    ca98:	4b08      	ldr	r3, [pc, #32]	; (cabc <nm_bsp_init+0x70>)
    ca9a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    ca9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    caa0:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    caa2:	2000      	movs	r0, #0
    caa4:	b002      	add	sp, #8
    caa6:	bd70      	pop	{r4, r5, r6, pc}
    caa8:	20000474 	.word	0x20000474
    caac:	0000fefd 	.word	0x0000fefd
    cab0:	41004400 	.word	0x41004400
    cab4:	e000e010 	.word	0xe000e010
    cab8:	0000c9cd 	.word	0x0000c9cd
    cabc:	2000007e 	.word	0x2000007e

0000cac0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    cac0:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    cac2:	1e44      	subs	r4, r0, #1
    cac4:	2800      	cmp	r0, #0
    cac6:	d004      	beq.n	cad2 <nm_bsp_sleep+0x12>
		delay_ms(1);
    cac8:	4d02      	ldr	r5, [pc, #8]	; (cad4 <nm_bsp_sleep+0x14>)
    caca:	2001      	movs	r0, #1
    cacc:	47a8      	blx	r5
	while (u32TimeMsec--) {
    cace:	3c01      	subs	r4, #1
    cad0:	d2fb      	bcs.n	caca <nm_bsp_sleep+0xa>
	}
}
    cad2:	bd70      	pop	{r4, r5, r6, pc}
    cad4:	0000ca0d 	.word	0x0000ca0d

0000cad8 <nm_bsp_reset>:
{
    cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cada:	4c07      	ldr	r4, [pc, #28]	; (caf8 <nm_bsp_reset+0x20>)
    cadc:	2780      	movs	r7, #128	; 0x80
    cade:	057f      	lsls	r7, r7, #21
    cae0:	6167      	str	r7, [r4, #20]
    cae2:	2580      	movs	r5, #128	; 0x80
    cae4:	052d      	lsls	r5, r5, #20
    cae6:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    cae8:	2001      	movs	r0, #1
    caea:	4e04      	ldr	r6, [pc, #16]	; (cafc <nm_bsp_reset+0x24>)
    caec:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    caee:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    caf0:	200a      	movs	r0, #10
    caf2:	47b0      	blx	r6
    caf4:	61a5      	str	r5, [r4, #24]
}
    caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    caf8:	41004400 	.word	0x41004400
    cafc:	0000cac1 	.word	0x0000cac1

0000cb00 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    cb00:	b510      	push	{r4, lr}
    cb02:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    cb04:	4b0e      	ldr	r3, [pc, #56]	; (cb40 <nm_bsp_register_isr+0x40>)
    cb06:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    cb08:	ac01      	add	r4, sp, #4
    cb0a:	0020      	movs	r0, r4
    cb0c:	4b0d      	ldr	r3, [pc, #52]	; (cb44 <nm_bsp_register_isr+0x44>)
    cb0e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    cb10:	2329      	movs	r3, #41	; 0x29
    cb12:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    cb14:	2300      	movs	r3, #0
    cb16:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    cb18:	3301      	adds	r3, #1
    cb1a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    cb1c:	3301      	adds	r3, #1
    cb1e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    cb20:	0021      	movs	r1, r4
    cb22:	2009      	movs	r0, #9
    cb24:	4b08      	ldr	r3, [pc, #32]	; (cb48 <nm_bsp_register_isr+0x48>)
    cb26:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    cb28:	2200      	movs	r2, #0
    cb2a:	2109      	movs	r1, #9
    cb2c:	4807      	ldr	r0, [pc, #28]	; (cb4c <nm_bsp_register_isr+0x4c>)
    cb2e:	4b08      	ldr	r3, [pc, #32]	; (cb50 <nm_bsp_register_isr+0x50>)
    cb30:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    cb32:	2100      	movs	r1, #0
    cb34:	2009      	movs	r0, #9
    cb36:	4b07      	ldr	r3, [pc, #28]	; (cb54 <nm_bsp_register_isr+0x54>)
    cb38:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    cb3a:	b004      	add	sp, #16
    cb3c:	bd10      	pop	{r4, pc}
    cb3e:	46c0      	nop			; (mov r8, r8)
    cb40:	20000474 	.word	0x20000474
    cb44:	0000fe71 	.word	0x0000fe71
    cb48:	0000fe85 	.word	0x0000fe85
    cb4c:	0000ca39 	.word	0x0000ca39
    cb50:	0000fd2d 	.word	0x0000fd2d
    cb54:	0000fd59 	.word	0x0000fd59

0000cb58 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    cb58:	b510      	push	{r4, lr}
	if (u8Enable) {
    cb5a:	2800      	cmp	r0, #0
    cb5c:	d104      	bne.n	cb68 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    cb5e:	2100      	movs	r1, #0
    cb60:	2009      	movs	r0, #9
    cb62:	4b04      	ldr	r3, [pc, #16]	; (cb74 <nm_bsp_interrupt_ctrl+0x1c>)
    cb64:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    cb66:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    cb68:	2100      	movs	r1, #0
    cb6a:	2009      	movs	r0, #9
    cb6c:	4b02      	ldr	r3, [pc, #8]	; (cb78 <nm_bsp_interrupt_ctrl+0x20>)
    cb6e:	4798      	blx	r3
    cb70:	e7f9      	b.n	cb66 <nm_bsp_interrupt_ctrl+0xe>
    cb72:	46c0      	nop			; (mov r8, r8)
    cb74:	0000fd79 	.word	0x0000fd79
    cb78:	0000fd59 	.word	0x0000fd59

0000cb7c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    cb7c:	b530      	push	{r4, r5, lr}
    cb7e:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    cb80:	4c30      	ldr	r4, [pc, #192]	; (cc44 <nm_bus_init+0xc8>)
    cb82:	230e      	movs	r3, #14
    cb84:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    cb86:	2300      	movs	r3, #0
    cb88:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    cb8a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    cb8c:	a901      	add	r1, sp, #4
    cb8e:	2201      	movs	r2, #1
    cb90:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    cb92:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    cb94:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    cb96:	200e      	movs	r0, #14
    cb98:	4b2b      	ldr	r3, [pc, #172]	; (cc48 <nm_bus_init+0xcc>)
    cb9a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    cb9c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    cb9e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    cba0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    cba2:	2900      	cmp	r1, #0
    cba4:	d104      	bne.n	cbb0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    cba6:	0953      	lsrs	r3, r2, #5
    cba8:	01db      	lsls	r3, r3, #7
    cbaa:	4928      	ldr	r1, [pc, #160]	; (cc4c <nm_bus_init+0xd0>)
    cbac:	468c      	mov	ip, r1
    cbae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cbb0:	211f      	movs	r1, #31
    cbb2:	4011      	ands	r1, r2
    cbb4:	2201      	movs	r2, #1
    cbb6:	0010      	movs	r0, r2
    cbb8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    cbba:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    cbbc:	ac02      	add	r4, sp, #8
    cbbe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    cbc0:	2300      	movs	r3, #0
    cbc2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    cbc4:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    cbc6:	21c0      	movs	r1, #192	; 0xc0
    cbc8:	0389      	lsls	r1, r1, #14
    cbca:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    cbcc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    cbce:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    cbd0:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    cbd2:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    cbd4:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    cbd6:	3223      	adds	r2, #35	; 0x23
    cbd8:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    cbda:	3a18      	subs	r2, #24
    cbdc:	2100      	movs	r1, #0
    cbde:	a808      	add	r0, sp, #32
    cbe0:	4b1b      	ldr	r3, [pc, #108]	; (cc50 <nm_bus_init+0xd4>)
    cbe2:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    cbe4:	4b1b      	ldr	r3, [pc, #108]	; (cc54 <nm_bus_init+0xd8>)
    cbe6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    cbe8:	4b1b      	ldr	r3, [pc, #108]	; (cc58 <nm_bus_init+0xdc>)
    cbea:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    cbec:	2301      	movs	r3, #1
    cbee:	425b      	negs	r3, r3
    cbf0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    cbf2:	4b1a      	ldr	r3, [pc, #104]	; (cc5c <nm_bus_init+0xe0>)
    cbf4:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    cbf6:	4b1a      	ldr	r3, [pc, #104]	; (cc60 <nm_bus_init+0xe4>)
    cbf8:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    cbfa:	0022      	movs	r2, r4
    cbfc:	4919      	ldr	r1, [pc, #100]	; (cc64 <nm_bus_init+0xe8>)
    cbfe:	481a      	ldr	r0, [pc, #104]	; (cc68 <nm_bus_init+0xec>)
    cc00:	4b1a      	ldr	r3, [pc, #104]	; (cc6c <nm_bus_init+0xf0>)
    cc02:	4798      	blx	r3
    cc04:	2800      	cmp	r0, #0
    cc06:	d11a      	bne.n	cc3e <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc08:	4d17      	ldr	r5, [pc, #92]	; (cc68 <nm_bus_init+0xec>)
    cc0a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cc0c:	0020      	movs	r0, r4
    cc0e:	4b18      	ldr	r3, [pc, #96]	; (cc70 <nm_bus_init+0xf4>)
    cc10:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cc12:	231f      	movs	r3, #31
    cc14:	4018      	ands	r0, r3
    cc16:	3b1e      	subs	r3, #30
    cc18:	4083      	lsls	r3, r0
    cc1a:	4a16      	ldr	r2, [pc, #88]	; (cc74 <nm_bus_init+0xf8>)
    cc1c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc1e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cc20:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cc22:	2b00      	cmp	r3, #0
    cc24:	d1fc      	bne.n	cc20 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    cc26:	6823      	ldr	r3, [r4, #0]
    cc28:	2202      	movs	r2, #2
    cc2a:	4313      	orrs	r3, r2
    cc2c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    cc2e:	4b12      	ldr	r3, [pc, #72]	; (cc78 <nm_bus_init+0xfc>)
    cc30:	4798      	blx	r3
	nm_bsp_sleep(1);
    cc32:	2001      	movs	r0, #1
    cc34:	4b11      	ldr	r3, [pc, #68]	; (cc7c <nm_bus_init+0x100>)
    cc36:	4798      	blx	r3
#endif
	return result;
    cc38:	2000      	movs	r0, #0
}
    cc3a:	b011      	add	sp, #68	; 0x44
    cc3c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    cc3e:	2006      	movs	r0, #6
    cc40:	4240      	negs	r0, r0
    cc42:	e7fa      	b.n	cc3a <nm_bus_init+0xbe>
    cc44:	200014ac 	.word	0x200014ac
    cc48:	0000fefd 	.word	0x0000fefd
    cc4c:	41004400 	.word	0x41004400
    cc50:	000179c7 	.word	0x000179c7
    cc54:	000c0002 	.word	0x000c0002
    cc58:	000d0002 	.word	0x000d0002
    cc5c:	000f0002 	.word	0x000f0002
    cc60:	00b71b00 	.word	0x00b71b00
    cc64:	42001000 	.word	0x42001000
    cc68:	200014b0 	.word	0x200014b0
    cc6c:	00010659 	.word	0x00010659
    cc70:	00010511 	.word	0x00010511
    cc74:	e000e100 	.word	0xe000e100
    cc78:	0000cad9 	.word	0x0000cad9
    cc7c:	0000cac1 	.word	0x0000cac1

0000cc80 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc82:	46de      	mov	lr, fp
    cc84:	4657      	mov	r7, sl
    cc86:	464e      	mov	r6, r9
    cc88:	4645      	mov	r5, r8
    cc8a:	b5e0      	push	{r5, r6, r7, lr}
    cc8c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    cc8e:	2803      	cmp	r0, #3
    cc90:	d000      	beq.n	cc94 <nm_bus_ioctl+0x14>
    cc92:	e075      	b.n	cd80 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    cc94:	680e      	ldr	r6, [r1, #0]
    cc96:	684d      	ldr	r5, [r1, #4]
    cc98:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    cc9a:	2200      	movs	r2, #0
    cc9c:	466b      	mov	r3, sp
    cc9e:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    cca0:	2d00      	cmp	r5, #0
    cca2:	d027      	beq.n	ccf4 <nm_bus_ioctl+0x74>
    cca4:	2c00      	cmp	r4, #0
    cca6:	d065      	beq.n	cd74 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    cca8:	2e00      	cmp	r6, #0
    ccaa:	d100      	bne.n	ccae <nm_bus_ioctl+0x2e>
    ccac:	e077      	b.n	cd9e <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    ccae:	2300      	movs	r3, #0
    ccb0:	4698      	mov	r8, r3
    ccb2:	2300      	movs	r3, #0
    ccb4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    ccb6:	2201      	movs	r2, #1
    ccb8:	493b      	ldr	r1, [pc, #236]	; (cda8 <nm_bus_ioctl+0x128>)
    ccba:	483c      	ldr	r0, [pc, #240]	; (cdac <nm_bus_ioctl+0x12c>)
    ccbc:	4b3c      	ldr	r3, [pc, #240]	; (cdb0 <nm_bus_ioctl+0x130>)
    ccbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ccc0:	4b3a      	ldr	r3, [pc, #232]	; (cdac <nm_bus_ioctl+0x12c>)
    ccc2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    ccc4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    ccc6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ccc8:	4699      	mov	r9, r3
			pu8Miso++;
    ccca:	4659      	mov	r1, fp
    cccc:	424b      	negs	r3, r1
    ccce:	4159      	adcs	r1, r3
    ccd0:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    ccd2:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ccd4:	4653      	mov	r3, sl
    ccd6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ccd8:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    ccda:	4239      	tst	r1, r7
    ccdc:	d0fc      	beq.n	ccd8 <nm_bus_ioctl+0x58>
    ccde:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cce0:	4239      	tst	r1, r7
    cce2:	d0fc      	beq.n	ccde <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cce4:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cce6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    cce8:	4211      	tst	r1, r2
    ccea:	d0fc      	beq.n	cce6 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ccec:	4649      	mov	r1, r9
    ccee:	7989      	ldrb	r1, [r1, #6]
    ccf0:	468c      	mov	ip, r1
    ccf2:	e011      	b.n	cd18 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    ccf4:	2e00      	cmp	r6, #0
    ccf6:	d03a      	beq.n	cd6e <nm_bus_ioctl+0xee>
    ccf8:	2c00      	cmp	r4, #0
    ccfa:	d03e      	beq.n	cd7a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    ccfc:	2300      	movs	r3, #0
    ccfe:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    cd00:	3301      	adds	r3, #1
    cd02:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    cd04:	466b      	mov	r3, sp
    cd06:	1ddd      	adds	r5, r3, #7
    cd08:	e7d5      	b.n	ccb6 <nm_bus_ioctl+0x36>
    cd0a:	4660      	mov	r0, ip
    cd0c:	2801      	cmp	r0, #1
    cd0e:	d00d      	beq.n	cd2c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cd10:	6a98      	ldr	r0, [r3, #40]	; 0x28
    cd12:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    cd14:	2900      	cmp	r1, #0
    cd16:	d00d      	beq.n	cd34 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cd18:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cd1a:	4211      	tst	r1, r2
    cd1c:	d0fc      	beq.n	cd18 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cd1e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    cd20:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cd22:	4210      	tst	r0, r2
    cd24:	d0f1      	beq.n	cd0a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cd26:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    cd28:	311e      	adds	r1, #30
    cd2a:	e7ee      	b.n	cd0a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cd2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    cd2e:	05c0      	lsls	r0, r0, #23
    cd30:	0dc0      	lsrs	r0, r0, #23
    cd32:	e7ef      	b.n	cd14 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    cd34:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    cd36:	3c01      	subs	r4, #1
    cd38:	b2a4      	uxth	r4, r4
			pu8Miso++;
    cd3a:	445d      	add	r5, fp
			pu8Mosi++;
    cd3c:	4643      	mov	r3, r8
    cd3e:	4259      	negs	r1, r3
    cd40:	414b      	adcs	r3, r1
    cd42:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    cd44:	2c00      	cmp	r4, #0
    cd46:	d1c4      	bne.n	ccd2 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cd48:	4b18      	ldr	r3, [pc, #96]	; (cdac <nm_bus_ioctl+0x12c>)
    cd4a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    cd4c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cd4e:	7e0b      	ldrb	r3, [r1, #24]
    cd50:	4213      	tst	r3, r2
    cd52:	d0fc      	beq.n	cd4e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    cd54:	2200      	movs	r2, #0
    cd56:	4914      	ldr	r1, [pc, #80]	; (cda8 <nm_bus_ioctl+0x128>)
    cd58:	4814      	ldr	r0, [pc, #80]	; (cdac <nm_bus_ioctl+0x12c>)
    cd5a:	4b15      	ldr	r3, [pc, #84]	; (cdb0 <nm_bus_ioctl+0x130>)
    cd5c:	4798      	blx	r3
	return M2M_SUCCESS;
    cd5e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    cd60:	b003      	add	sp, #12
    cd62:	bc3c      	pop	{r2, r3, r4, r5}
    cd64:	4690      	mov	r8, r2
    cd66:	4699      	mov	r9, r3
    cd68:	46a2      	mov	sl, r4
    cd6a:	46ab      	mov	fp, r5
    cd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    cd6e:	200f      	movs	r0, #15
    cd70:	4240      	negs	r0, r0
    cd72:	e7f5      	b.n	cd60 <nm_bus_ioctl+0xe0>
    cd74:	200f      	movs	r0, #15
    cd76:	4240      	negs	r0, r0
    cd78:	e7f2      	b.n	cd60 <nm_bus_ioctl+0xe0>
    cd7a:	200f      	movs	r0, #15
    cd7c:	4240      	negs	r0, r0
		break;
    cd7e:	e7ef      	b.n	cd60 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    cd80:	2283      	movs	r2, #131	; 0x83
    cd82:	0052      	lsls	r2, r2, #1
    cd84:	490b      	ldr	r1, [pc, #44]	; (cdb4 <nm_bus_ioctl+0x134>)
    cd86:	480c      	ldr	r0, [pc, #48]	; (cdb8 <nm_bus_ioctl+0x138>)
    cd88:	4b0c      	ldr	r3, [pc, #48]	; (cdbc <nm_bus_ioctl+0x13c>)
    cd8a:	4798      	blx	r3
    cd8c:	480c      	ldr	r0, [pc, #48]	; (cdc0 <nm_bus_ioctl+0x140>)
    cd8e:	4b0d      	ldr	r3, [pc, #52]	; (cdc4 <nm_bus_ioctl+0x144>)
    cd90:	4798      	blx	r3
    cd92:	200d      	movs	r0, #13
    cd94:	4b0c      	ldr	r3, [pc, #48]	; (cdc8 <nm_bus_ioctl+0x148>)
    cd96:	4798      	blx	r3
			s8Ret = -1;
    cd98:	2001      	movs	r0, #1
    cd9a:	4240      	negs	r0, r0
	return s8Ret;
    cd9c:	e7e0      	b.n	cd60 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    cd9e:	2301      	movs	r3, #1
    cda0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    cda2:	466b      	mov	r3, sp
    cda4:	1dde      	adds	r6, r3, #7
    cda6:	e784      	b.n	ccb2 <nm_bus_ioctl+0x32>
    cda8:	200014ac 	.word	0x200014ac
    cdac:	200014b0 	.word	0x200014b0
    cdb0:	00010905 	.word	0x00010905
    cdb4:	000199ac 	.word	0x000199ac
    cdb8:	000199bc 	.word	0x000199bc
    cdbc:	00017b29 	.word	0x00017b29
    cdc0:	000199d0 	.word	0x000199d0
    cdc4:	00017c45 	.word	0x00017c45
    cdc8:	00017b5d 	.word	0x00017b5d

0000cdcc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    cdcc:	b530      	push	{r4, r5, lr}
    cdce:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    cdd0:	ab01      	add	r3, sp, #4
    cdd2:	2200      	movs	r2, #0
    cdd4:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    cdd6:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    cdd8:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cdda:	4d13      	ldr	r5, [pc, #76]	; (ce28 <nm_bus_deinit+0x5c>)
    cddc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    cdde:	0020      	movs	r0, r4
    cde0:	4b12      	ldr	r3, [pc, #72]	; (ce2c <nm_bus_deinit+0x60>)
    cde2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cde4:	231f      	movs	r3, #31
    cde6:	4018      	ands	r0, r3
    cde8:	3b1e      	subs	r3, #30
    cdea:	4083      	lsls	r3, r0
    cdec:	2280      	movs	r2, #128	; 0x80
    cdee:	4910      	ldr	r1, [pc, #64]	; (ce30 <nm_bus_deinit+0x64>)
    cdf0:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cdf2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cdf4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d1fc      	bne.n	cdf4 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cdfa:	338f      	adds	r3, #143	; 0x8f
    cdfc:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cdfe:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    ce00:	6823      	ldr	r3, [r4, #0]
    ce02:	2202      	movs	r2, #2
    ce04:	4393      	bics	r3, r2
    ce06:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    ce08:	a901      	add	r1, sp, #4
    ce0a:	200c      	movs	r0, #12
    ce0c:	4c09      	ldr	r4, [pc, #36]	; (ce34 <nm_bus_deinit+0x68>)
    ce0e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    ce10:	a901      	add	r1, sp, #4
    ce12:	200f      	movs	r0, #15
    ce14:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    ce16:	a901      	add	r1, sp, #4
    ce18:	200d      	movs	r0, #13
    ce1a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    ce1c:	a901      	add	r1, sp, #4
    ce1e:	200e      	movs	r0, #14
    ce20:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    ce22:	2000      	movs	r0, #0
    ce24:	b003      	add	sp, #12
    ce26:	bd30      	pop	{r4, r5, pc}
    ce28:	200014b0 	.word	0x200014b0
    ce2c:	00010511 	.word	0x00010511
    ce30:	e000e100 	.word	0xe000e100
    ce34:	0000fefd 	.word	0x0000fefd

0000ce38 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    ce38:	2a00      	cmp	r2, #0
    ce3a:	d006      	beq.n	ce4a <m2m_memcpy+0x12>
    ce3c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    ce3e:	780b      	ldrb	r3, [r1, #0]
    ce40:	7003      	strb	r3, [r0, #0]
		pDst++;
    ce42:	3001      	adds	r0, #1
		pSrc++;
    ce44:	3101      	adds	r1, #1
	}while(--sz);
    ce46:	4290      	cmp	r0, r2
    ce48:	d1f9      	bne.n	ce3e <m2m_memcpy+0x6>
}
    ce4a:	4770      	bx	lr

0000ce4c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    ce4c:	2a00      	cmp	r2, #0
    ce4e:	d004      	beq.n	ce5a <m2m_memset+0xe>
    ce50:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    ce52:	7001      	strb	r1, [r0, #0]
		pBuf++;
    ce54:	3001      	adds	r0, #1
	}while(--sz);
    ce56:	4290      	cmp	r0, r2
    ce58:	d1fb      	bne.n	ce52 <m2m_memset+0x6>
}
    ce5a:	4770      	bx	lr

0000ce5c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    ce5c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    ce5e:	7802      	ldrb	r2, [r0, #0]
    ce60:	2a00      	cmp	r2, #0
    ce62:	d007      	beq.n	ce74 <m2m_strlen+0x18>
    ce64:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    ce66:	3001      	adds	r0, #1
    ce68:	b280      	uxth	r0, r0
		pcStr++;
    ce6a:	3301      	adds	r3, #1
	while(*pcStr)
    ce6c:	781a      	ldrb	r2, [r3, #0]
    ce6e:	2a00      	cmp	r2, #0
    ce70:	d1f9      	bne.n	ce66 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    ce72:	4770      	bx	lr
	uint16	u16StrLen = 0;
    ce74:	2000      	movs	r0, #0
    ce76:	e7fc      	b.n	ce72 <m2m_strlen+0x16>

0000ce78 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    ce78:	4a02      	ldr	r2, [pc, #8]	; (ce84 <isr+0xc>)
    ce7a:	78d3      	ldrb	r3, [r2, #3]
    ce7c:	3301      	adds	r3, #1
    ce7e:	b2db      	uxtb	r3, r3
    ce80:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    ce82:	4770      	bx	lr
    ce84:	200014ec 	.word	0x200014ec

0000ce88 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    ce88:	4770      	bx	lr
	...

0000ce8c <hif_set_rx_done>:
{
    ce8c:	b500      	push	{lr}
    ce8e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    ce90:	2200      	movs	r2, #0
    ce92:	4b0a      	ldr	r3, [pc, #40]	; (cebc <hif_set_rx_done+0x30>)
    ce94:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    ce96:	2001      	movs	r0, #1
    ce98:	4b09      	ldr	r3, [pc, #36]	; (cec0 <hif_set_rx_done+0x34>)
    ce9a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    ce9c:	a901      	add	r1, sp, #4
    ce9e:	4809      	ldr	r0, [pc, #36]	; (cec4 <hif_set_rx_done+0x38>)
    cea0:	4b09      	ldr	r3, [pc, #36]	; (cec8 <hif_set_rx_done+0x3c>)
    cea2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    cea4:	2800      	cmp	r0, #0
    cea6:	d001      	beq.n	ceac <hif_set_rx_done+0x20>
}
    cea8:	b003      	add	sp, #12
    ceaa:	bd00      	pop	{pc}
	reg |= NBIT1;
    ceac:	2102      	movs	r1, #2
    ceae:	9b01      	ldr	r3, [sp, #4]
    ceb0:	4319      	orrs	r1, r3
    ceb2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    ceb4:	4803      	ldr	r0, [pc, #12]	; (cec4 <hif_set_rx_done+0x38>)
    ceb6:	4b05      	ldr	r3, [pc, #20]	; (cecc <hif_set_rx_done+0x40>)
    ceb8:	4798      	blx	r3
    ceba:	e7f5      	b.n	cea8 <hif_set_rx_done+0x1c>
    cebc:	200014ec 	.word	0x200014ec
    cec0:	0000cb59 	.word	0x0000cb59
    cec4:	00001070 	.word	0x00001070
    cec8:	0000e29d 	.word	0x0000e29d
    cecc:	0000e2a9 	.word	0x0000e2a9

0000ced0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    ced0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    ced2:	4b0c      	ldr	r3, [pc, #48]	; (cf04 <hif_chip_wake+0x34>)
    ced4:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    ced6:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    ced8:	2b00      	cmp	r3, #0
    ceda:	d10d      	bne.n	cef8 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    cedc:	4b09      	ldr	r3, [pc, #36]	; (cf04 <hif_chip_wake+0x34>)
    cede:	785b      	ldrb	r3, [r3, #1]
    cee0:	2b00      	cmp	r3, #0
    cee2:	d103      	bne.n	ceec <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cee4:	4b07      	ldr	r3, [pc, #28]	; (cf04 <hif_chip_wake+0x34>)
    cee6:	781b      	ldrb	r3, [r3, #0]
    cee8:	2b00      	cmp	r3, #0
    ceea:	d106      	bne.n	cefa <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    ceec:	4a05      	ldr	r2, [pc, #20]	; (cf04 <hif_chip_wake+0x34>)
    ceee:	7853      	ldrb	r3, [r2, #1]
    cef0:	3301      	adds	r3, #1
    cef2:	b2db      	uxtb	r3, r3
    cef4:	7053      	strb	r3, [r2, #1]
    cef6:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    cef8:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    cefa:	4b03      	ldr	r3, [pc, #12]	; (cf08 <hif_chip_wake+0x38>)
    cefc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    cefe:	2800      	cmp	r0, #0
    cf00:	d0f4      	beq.n	ceec <hif_chip_wake+0x1c>
    cf02:	e7f9      	b.n	cef8 <hif_chip_wake+0x28>
    cf04:	200014ec 	.word	0x200014ec
    cf08:	0000df85 	.word	0x0000df85

0000cf0c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    cf0c:	4b05      	ldr	r3, [pc, #20]	; (cf24 <hif_chip_sleep_sc+0x18>)
    cf0e:	785b      	ldrb	r3, [r3, #1]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d004      	beq.n	cf1e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    cf14:	4a03      	ldr	r2, [pc, #12]	; (cf24 <hif_chip_sleep_sc+0x18>)
    cf16:	7853      	ldrb	r3, [r2, #1]
    cf18:	3b01      	subs	r3, #1
    cf1a:	b2db      	uxtb	r3, r3
    cf1c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    cf1e:	2000      	movs	r0, #0
    cf20:	4770      	bx	lr
    cf22:	46c0      	nop			; (mov r8, r8)
    cf24:	200014ec 	.word	0x200014ec

0000cf28 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    cf28:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    cf2a:	4b0b      	ldr	r3, [pc, #44]	; (cf58 <hif_chip_sleep+0x30>)
    cf2c:	785b      	ldrb	r3, [r3, #1]
    cf2e:	2b00      	cmp	r3, #0
    cf30:	d004      	beq.n	cf3c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    cf32:	4a09      	ldr	r2, [pc, #36]	; (cf58 <hif_chip_sleep+0x30>)
    cf34:	7853      	ldrb	r3, [r2, #1]
    cf36:	3b01      	subs	r3, #1
    cf38:	b2db      	uxtb	r3, r3
    cf3a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    cf3c:	4b06      	ldr	r3, [pc, #24]	; (cf58 <hif_chip_sleep+0x30>)
    cf3e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    cf40:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    cf42:	2b00      	cmp	r3, #0
    cf44:	d103      	bne.n	cf4e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cf46:	4b04      	ldr	r3, [pc, #16]	; (cf58 <hif_chip_sleep+0x30>)
    cf48:	781b      	ldrb	r3, [r3, #0]
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d100      	bne.n	cf50 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    cf4e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    cf50:	4b02      	ldr	r3, [pc, #8]	; (cf5c <hif_chip_sleep+0x34>)
    cf52:	4798      	blx	r3
    cf54:	e7fb      	b.n	cf4e <hif_chip_sleep+0x26>
    cf56:	46c0      	nop			; (mov r8, r8)
    cf58:	200014ec 	.word	0x200014ec
    cf5c:	0000df1d 	.word	0x0000df1d

0000cf60 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf62:	46de      	mov	lr, fp
    cf64:	4657      	mov	r7, sl
    cf66:	b580      	push	{r7, lr}
    cf68:	b089      	sub	sp, #36	; 0x24
    cf6a:	4683      	mov	fp, r0
    cf6c:	468a      	mov	sl, r1
    cf6e:	9201      	str	r2, [sp, #4]
    cf70:	9300      	str	r3, [sp, #0]
    cf72:	ab10      	add	r3, sp, #64	; 0x40
    cf74:	cb80      	ldmia	r3!, {r7}
    cf76:	881e      	ldrh	r6, [r3, #0]
    cf78:	ab12      	add	r3, sp, #72	; 0x48
    cf7a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    cf7c:	227f      	movs	r2, #127	; 0x7f
    cf7e:	400a      	ands	r2, r1
    cf80:	ab07      	add	r3, sp, #28
    cf82:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    cf84:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    cf86:	2208      	movs	r2, #8
    cf88:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    cf8a:	2f00      	cmp	r7, #0
    cf8c:	d03d      	beq.n	d00a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    cf8e:	885a      	ldrh	r2, [r3, #2]
    cf90:	1992      	adds	r2, r2, r6
    cf92:	18aa      	adds	r2, r5, r2
    cf94:	b292      	uxth	r2, r2
    cf96:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    cf98:	4b69      	ldr	r3, [pc, #420]	; (d140 <hif_send+0x1e0>)
    cf9a:	4798      	blx	r3
    cf9c:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    cf9e:	d000      	beq.n	cfa2 <hif_send+0x42>
    cfa0:	e0c1      	b.n	d126 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    cfa2:	2300      	movs	r3, #0
    cfa4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    cfa6:	aa02      	add	r2, sp, #8
    cfa8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    cfaa:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    cfac:	9b04      	ldr	r3, [sp, #16]
    cfae:	465a      	mov	r2, fp
    cfb0:	431a      	orrs	r2, r3
    cfb2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    cfb4:	9a04      	ldr	r2, [sp, #16]
    cfb6:	4653      	mov	r3, sl
    cfb8:	021b      	lsls	r3, r3, #8
    cfba:	4313      	orrs	r3, r2
    cfbc:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    cfbe:	ab07      	add	r3, sp, #28
    cfc0:	885b      	ldrh	r3, [r3, #2]
    cfc2:	9a04      	ldr	r2, [sp, #16]
    cfc4:	041b      	lsls	r3, r3, #16
    cfc6:	4313      	orrs	r3, r2
    cfc8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    cfca:	9904      	ldr	r1, [sp, #16]
    cfcc:	485d      	ldr	r0, [pc, #372]	; (d144 <hif_send+0x1e4>)
    cfce:	4b5e      	ldr	r3, [pc, #376]	; (d148 <hif_send+0x1e8>)
    cfd0:	4798      	blx	r3
    cfd2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cfd4:	d157      	bne.n	d086 <hif_send+0x126>

		reg = 0UL;
    cfd6:	2300      	movs	r3, #0
    cfd8:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    cfda:	9b04      	ldr	r3, [sp, #16]
    cfdc:	2202      	movs	r2, #2
    cfde:	4313      	orrs	r3, r2
    cfe0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    cfe2:	9904      	ldr	r1, [sp, #16]
    cfe4:	4859      	ldr	r0, [pc, #356]	; (d14c <hif_send+0x1ec>)
    cfe6:	4b58      	ldr	r3, [pc, #352]	; (d148 <hif_send+0x1e8>)
    cfe8:	4798      	blx	r3
    cfea:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cfec:	d14b      	bne.n	d086 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    cfee:	2200      	movs	r2, #0
    cff0:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    cff2:	ab02      	add	r3, sp, #8
    cff4:	80da      	strh	r2, [r3, #6]
    cff6:	3306      	adds	r3, #6
    cff8:	881b      	ldrh	r3, [r3, #0]
    cffa:	b29b      	uxth	r3, r3
    cffc:	4a54      	ldr	r2, [pc, #336]	; (d150 <hif_send+0x1f0>)
    cffe:	4293      	cmp	r3, r2
    d000:	d849      	bhi.n	d096 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    d002:	4c54      	ldr	r4, [pc, #336]	; (d154 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    d004:	4b54      	ldr	r3, [pc, #336]	; (d158 <hif_send+0x1f8>)
    d006:	469a      	mov	sl, r3
    d008:	e017      	b.n	d03a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    d00a:	ab07      	add	r3, sp, #28
    d00c:	885a      	ldrh	r2, [r3, #2]
    d00e:	9900      	ldr	r1, [sp, #0]
    d010:	468c      	mov	ip, r1
    d012:	4462      	add	r2, ip
    d014:	b292      	uxth	r2, r2
    d016:	805a      	strh	r2, [r3, #2]
    d018:	e7be      	b.n	cf98 <hif_send+0x38>
				nm_bsp_sleep(1);
    d01a:	2001      	movs	r0, #1
    d01c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    d01e:	9b04      	ldr	r3, [sp, #16]
    d020:	079b      	lsls	r3, r3, #30
    d022:	d528      	bpl.n	d076 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    d024:	ab02      	add	r3, sp, #8
    d026:	88da      	ldrh	r2, [r3, #6]
    d028:	3201      	adds	r2, #1
    d02a:	b292      	uxth	r2, r2
    d02c:	80da      	strh	r2, [r3, #6]
    d02e:	3306      	adds	r3, #6
    d030:	881b      	ldrh	r3, [r3, #0]
    d032:	b29b      	uxth	r3, r3
    d034:	4a46      	ldr	r2, [pc, #280]	; (d150 <hif_send+0x1f0>)
    d036:	4293      	cmp	r3, r2
    d038:	d82d      	bhi.n	d096 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    d03a:	a904      	add	r1, sp, #16
    d03c:	4843      	ldr	r0, [pc, #268]	; (d14c <hif_send+0x1ec>)
    d03e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    d040:	2800      	cmp	r0, #0
    d042:	d128      	bne.n	d096 <hif_send+0x136>
			if(cnt >= 500) {
    d044:	ab02      	add	r3, sp, #8
    d046:	3306      	adds	r3, #6
    d048:	881b      	ldrh	r3, [r3, #0]
    d04a:	b29b      	uxth	r3, r3
    d04c:	22f4      	movs	r2, #244	; 0xf4
    d04e:	32ff      	adds	r2, #255	; 0xff
    d050:	4293      	cmp	r3, r2
    d052:	d9e4      	bls.n	d01e <hif_send+0xbe>
				if(cnt < 501) {
    d054:	ab02      	add	r3, sp, #8
    d056:	3306      	adds	r3, #6
    d058:	881b      	ldrh	r3, [r3, #0]
    d05a:	b29b      	uxth	r3, r3
    d05c:	3201      	adds	r2, #1
    d05e:	4293      	cmp	r3, r2
    d060:	d8db      	bhi.n	d01a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    d062:	483e      	ldr	r0, [pc, #248]	; (d15c <hif_send+0x1fc>)
    d064:	4b3e      	ldr	r3, [pc, #248]	; (d160 <hif_send+0x200>)
    d066:	4798      	blx	r3
    d068:	483e      	ldr	r0, [pc, #248]	; (d164 <hif_send+0x204>)
    d06a:	4b3f      	ldr	r3, [pc, #252]	; (d168 <hif_send+0x208>)
    d06c:	4798      	blx	r3
    d06e:	200d      	movs	r0, #13
    d070:	4b3e      	ldr	r3, [pc, #248]	; (d16c <hif_send+0x20c>)
    d072:	4798      	blx	r3
    d074:	e7d1      	b.n	d01a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    d076:	a905      	add	r1, sp, #20
    d078:	483d      	ldr	r0, [pc, #244]	; (d170 <hif_send+0x210>)
    d07a:	4b36      	ldr	r3, [pc, #216]	; (d154 <hif_send+0x1f4>)
    d07c:	4798      	blx	r3
    d07e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    d080:	d009      	beq.n	d096 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    d082:	2300      	movs	r3, #0
    d084:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    d086:	4b3b      	ldr	r3, [pc, #236]	; (d174 <hif_send+0x214>)
    d088:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    d08a:	0020      	movs	r0, r4
    d08c:	b009      	add	sp, #36	; 0x24
    d08e:	bc0c      	pop	{r2, r3}
    d090:	4692      	mov	sl, r2
    d092:	469b      	mov	fp, r3
    d094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    d096:	9b05      	ldr	r3, [sp, #20]
    d098:	2b00      	cmp	r3, #0
    d09a:	d03f      	beq.n	d11c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    d09c:	9b05      	ldr	r3, [sp, #20]
    d09e:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    d0a0:	a907      	add	r1, sp, #28
    d0a2:	884b      	ldrh	r3, [r1, #2]
    d0a4:	b29b      	uxth	r3, r3
    d0a6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    d0a8:	9806      	ldr	r0, [sp, #24]
    d0aa:	2208      	movs	r2, #8
    d0ac:	4b32      	ldr	r3, [pc, #200]	; (d178 <hif_send+0x218>)
    d0ae:	4798      	blx	r3
    d0b0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    d0b2:	d1e8      	bne.n	d086 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    d0b4:	9b06      	ldr	r3, [sp, #24]
    d0b6:	3308      	adds	r3, #8
    d0b8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    d0ba:	9b01      	ldr	r3, [sp, #4]
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d00b      	beq.n	d0d8 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    d0c0:	9806      	ldr	r0, [sp, #24]
    d0c2:	9a00      	ldr	r2, [sp, #0]
    d0c4:	0019      	movs	r1, r3
    d0c6:	4b2c      	ldr	r3, [pc, #176]	; (d178 <hif_send+0x218>)
    d0c8:	4798      	blx	r3
    d0ca:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    d0cc:	d1db      	bne.n	d086 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    d0ce:	9b06      	ldr	r3, [sp, #24]
    d0d0:	9a00      	ldr	r2, [sp, #0]
    d0d2:	4694      	mov	ip, r2
    d0d4:	4463      	add	r3, ip
    d0d6:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    d0d8:	2f00      	cmp	r7, #0
    d0da:	d00e      	beq.n	d0fa <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    d0dc:	9b06      	ldr	r3, [sp, #24]
    d0de:	9a00      	ldr	r2, [sp, #0]
    d0e0:	1aad      	subs	r5, r5, r2
    d0e2:	18ed      	adds	r5, r5, r3
    d0e4:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    d0e6:	9806      	ldr	r0, [sp, #24]
    d0e8:	0032      	movs	r2, r6
    d0ea:	0039      	movs	r1, r7
    d0ec:	4b22      	ldr	r3, [pc, #136]	; (d178 <hif_send+0x218>)
    d0ee:	4798      	blx	r3
    d0f0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    d0f2:	d1c8      	bne.n	d086 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    d0f4:	9b06      	ldr	r3, [sp, #24]
    d0f6:	18f3      	adds	r3, r6, r3
    d0f8:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    d0fa:	9b05      	ldr	r3, [sp, #20]
    d0fc:	009b      	lsls	r3, r3, #2
    d0fe:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    d100:	9b04      	ldr	r3, [sp, #16]
    d102:	2202      	movs	r2, #2
    d104:	4313      	orrs	r3, r2
    d106:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    d108:	9904      	ldr	r1, [sp, #16]
    d10a:	481c      	ldr	r0, [pc, #112]	; (d17c <hif_send+0x21c>)
    d10c:	4b0e      	ldr	r3, [pc, #56]	; (d148 <hif_send+0x1e8>)
    d10e:	4798      	blx	r3
    d110:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    d112:	d1b8      	bne.n	d086 <hif_send+0x126>
 	ret = hif_chip_sleep();
    d114:	4b1a      	ldr	r3, [pc, #104]	; (d180 <hif_send+0x220>)
    d116:	4798      	blx	r3
    d118:	0004      	movs	r4, r0
	return ret;
    d11a:	e7b6      	b.n	d08a <hif_send+0x12a>
			ret = hif_chip_sleep();
    d11c:	4b18      	ldr	r3, [pc, #96]	; (d180 <hif_send+0x220>)
    d11e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    d120:	2403      	movs	r4, #3
    d122:	4264      	negs	r4, r4
			goto ERR2;
    d124:	e7b1      	b.n	d08a <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    d126:	2298      	movs	r2, #152	; 0x98
    d128:	32ff      	adds	r2, #255	; 0xff
    d12a:	4916      	ldr	r1, [pc, #88]	; (d184 <hif_send+0x224>)
    d12c:	4816      	ldr	r0, [pc, #88]	; (d188 <hif_send+0x228>)
    d12e:	4b0c      	ldr	r3, [pc, #48]	; (d160 <hif_send+0x200>)
    d130:	4798      	blx	r3
    d132:	4816      	ldr	r0, [pc, #88]	; (d18c <hif_send+0x22c>)
    d134:	4b0c      	ldr	r3, [pc, #48]	; (d168 <hif_send+0x208>)
    d136:	4798      	blx	r3
    d138:	200d      	movs	r0, #13
    d13a:	4b0c      	ldr	r3, [pc, #48]	; (d16c <hif_send+0x20c>)
    d13c:	4798      	blx	r3
		goto ERR2;
    d13e:	e7a4      	b.n	d08a <hif_send+0x12a>
    d140:	0000ced1 	.word	0x0000ced1
    d144:	0000108c 	.word	0x0000108c
    d148:	0000e2a9 	.word	0x0000e2a9
    d14c:	00001078 	.word	0x00001078
    d150:	000003e7 	.word	0x000003e7
    d154:	0000e29d 	.word	0x0000e29d
    d158:	0000cac1 	.word	0x0000cac1
    d15c:	00019cec 	.word	0x00019cec
    d160:	00017b29 	.word	0x00017b29
    d164:	00019cf8 	.word	0x00019cf8
    d168:	00017c45 	.word	0x00017c45
    d16c:	00017b5d 	.word	0x00017b5d
    d170:	00150400 	.word	0x00150400
    d174:	0000cf0d 	.word	0x0000cf0d
    d178:	0000e31d 	.word	0x0000e31d
    d17c:	0000106c 	.word	0x0000106c
    d180:	0000cf29 	.word	0x0000cf29
    d184:	00019a04 	.word	0x00019a04
    d188:	000199bc 	.word	0x000199bc
    d18c:	00019d08 	.word	0x00019d08

0000d190 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    d190:	b5f0      	push	{r4, r5, r6, r7, lr}
    d192:	46ce      	mov	lr, r9
    d194:	4647      	mov	r7, r8
    d196:	b580      	push	{r7, lr}
    d198:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    d19a:	2200      	movs	r2, #0
    d19c:	4bd1      	ldr	r3, [pc, #836]	; (d4e4 <hif_handle_isr+0x354>)
    d19e:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    d1a0:	4699      	mov	r9, r3
    d1a2:	4698      	mov	r8, r3
    d1a4:	e081      	b.n	d2aa <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    d1a6:	4bcf      	ldr	r3, [pc, #828]	; (d4e4 <hif_handle_isr+0x354>)
    d1a8:	9a05      	ldr	r2, [sp, #20]
    d1aa:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    d1ac:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    d1ae:	af04      	add	r7, sp, #16
    d1b0:	2204      	movs	r2, #4
    d1b2:	0039      	movs	r1, r7
    d1b4:	9805      	ldr	r0, [sp, #20]
    d1b6:	4bcc      	ldr	r3, [pc, #816]	; (d4e8 <hif_handle_isr+0x358>)
    d1b8:	4798      	blx	r3
    d1ba:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    d1bc:	887b      	ldrh	r3, [r7, #2]
    d1be:	b29b      	uxth	r3, r3
    d1c0:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    d1c2:	2800      	cmp	r0, #0
    d1c4:	d134      	bne.n	d230 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    d1c6:	ab04      	add	r3, sp, #16
    d1c8:	885b      	ldrh	r3, [r3, #2]
    d1ca:	b29b      	uxth	r3, r3
    d1cc:	429e      	cmp	r6, r3
    d1ce:	d004      	beq.n	d1da <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    d1d0:	ab04      	add	r3, sp, #16
    d1d2:	885b      	ldrh	r3, [r3, #2]
    d1d4:	1af3      	subs	r3, r6, r3
    d1d6:	2b04      	cmp	r3, #4
    d1d8:	dc3a      	bgt.n	d250 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    d1da:	ab04      	add	r3, sp, #16
    d1dc:	781b      	ldrb	r3, [r3, #0]
    d1de:	2b01      	cmp	r3, #1
    d1e0:	d04f      	beq.n	d282 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    d1e2:	ab04      	add	r3, sp, #16
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b02      	cmp	r3, #2
    d1e8:	d07d      	beq.n	d2e6 <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    d1ea:	ab04      	add	r3, sp, #16
    d1ec:	781b      	ldrb	r3, [r3, #0]
    d1ee:	2b04      	cmp	r3, #4
    d1f0:	d100      	bne.n	d1f4 <hif_handle_isr+0x64>
    d1f2:	e095      	b.n	d320 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    d1f4:	ab04      	add	r3, sp, #16
    d1f6:	781b      	ldrb	r3, [r3, #0]
    d1f8:	2b06      	cmp	r3, #6
    d1fa:	d100      	bne.n	d1fe <hif_handle_isr+0x6e>
    d1fc:	e0ad      	b.n	d35a <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    d1fe:	ab04      	add	r3, sp, #16
    d200:	781b      	ldrb	r3, [r3, #0]
    d202:	2b07      	cmp	r3, #7
    d204:	d100      	bne.n	d208 <hif_handle_isr+0x78>
    d206:	e0c5      	b.n	d394 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    d208:	ab04      	add	r3, sp, #16
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	2b05      	cmp	r3, #5
    d20e:	d100      	bne.n	d212 <hif_handle_isr+0x82>
    d210:	e0dc      	b.n	d3cc <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    d212:	2284      	movs	r2, #132	; 0x84
    d214:	0092      	lsls	r2, r2, #2
    d216:	49b5      	ldr	r1, [pc, #724]	; (d4ec <hif_handle_isr+0x35c>)
    d218:	48b5      	ldr	r0, [pc, #724]	; (d4f0 <hif_handle_isr+0x360>)
    d21a:	4bb6      	ldr	r3, [pc, #728]	; (d4f4 <hif_handle_isr+0x364>)
    d21c:	4798      	blx	r3
    d21e:	48b6      	ldr	r0, [pc, #728]	; (d4f8 <hif_handle_isr+0x368>)
    d220:	4bb6      	ldr	r3, [pc, #728]	; (d4fc <hif_handle_isr+0x36c>)
    d222:	4798      	blx	r3
    d224:	200d      	movs	r0, #13
    d226:	4bb6      	ldr	r3, [pc, #728]	; (d500 <hif_handle_isr+0x370>)
    d228:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    d22a:	2406      	movs	r4, #6
    d22c:	4264      	negs	r4, r4
    d22e:	e119      	b.n	d464 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    d230:	22e9      	movs	r2, #233	; 0xe9
    d232:	0052      	lsls	r2, r2, #1
    d234:	49ad      	ldr	r1, [pc, #692]	; (d4ec <hif_handle_isr+0x35c>)
    d236:	48ae      	ldr	r0, [pc, #696]	; (d4f0 <hif_handle_isr+0x360>)
    d238:	4bae      	ldr	r3, [pc, #696]	; (d4f4 <hif_handle_isr+0x364>)
    d23a:	4798      	blx	r3
    d23c:	48b1      	ldr	r0, [pc, #708]	; (d504 <hif_handle_isr+0x374>)
    d23e:	4baf      	ldr	r3, [pc, #700]	; (d4fc <hif_handle_isr+0x36c>)
    d240:	4798      	blx	r3
    d242:	200d      	movs	r0, #13
    d244:	4bae      	ldr	r3, [pc, #696]	; (d500 <hif_handle_isr+0x370>)
    d246:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d248:	2001      	movs	r0, #1
    d24a:	4baf      	ldr	r3, [pc, #700]	; (d508 <hif_handle_isr+0x378>)
    d24c:	4798      	blx	r3
    d24e:	e109      	b.n	d464 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    d250:	22dc      	movs	r2, #220	; 0xdc
    d252:	32ff      	adds	r2, #255	; 0xff
    d254:	49a5      	ldr	r1, [pc, #660]	; (d4ec <hif_handle_isr+0x35c>)
    d256:	48a6      	ldr	r0, [pc, #664]	; (d4f0 <hif_handle_isr+0x360>)
    d258:	4ca6      	ldr	r4, [pc, #664]	; (d4f4 <hif_handle_isr+0x364>)
    d25a:	47a0      	blx	r4
    d25c:	a904      	add	r1, sp, #16
    d25e:	884a      	ldrh	r2, [r1, #2]
    d260:	b292      	uxth	r2, r2
    d262:	780b      	ldrb	r3, [r1, #0]
    d264:	b2db      	uxtb	r3, r3
    d266:	7849      	ldrb	r1, [r1, #1]
    d268:	9100      	str	r1, [sp, #0]
    d26a:	0031      	movs	r1, r6
    d26c:	48a7      	ldr	r0, [pc, #668]	; (d50c <hif_handle_isr+0x37c>)
    d26e:	47a0      	blx	r4
    d270:	200d      	movs	r0, #13
    d272:	4ba3      	ldr	r3, [pc, #652]	; (d500 <hif_handle_isr+0x370>)
    d274:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    d276:	2001      	movs	r0, #1
    d278:	4ba3      	ldr	r3, [pc, #652]	; (d508 <hif_handle_isr+0x378>)
    d27a:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    d27c:	2406      	movs	r4, #6
    d27e:	4264      	negs	r4, r4
    d280:	e0f0      	b.n	d464 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    d282:	4b98      	ldr	r3, [pc, #608]	; (d4e4 <hif_handle_isr+0x354>)
    d284:	691b      	ldr	r3, [r3, #16]
    d286:	2b00      	cmp	r3, #0
    d288:	d020      	beq.n	d2cc <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d28a:	4b96      	ldr	r3, [pc, #600]	; (d4e4 <hif_handle_isr+0x354>)
    d28c:	691b      	ldr	r3, [r3, #16]
    d28e:	aa04      	add	r2, sp, #16
    d290:	7850      	ldrb	r0, [r2, #1]
    d292:	b2c0      	uxtb	r0, r0
    d294:	8851      	ldrh	r1, [r2, #2]
    d296:	9a05      	ldr	r2, [sp, #20]
    d298:	3208      	adds	r2, #8
    d29a:	3908      	subs	r1, #8
    d29c:	b289      	uxth	r1, r1
    d29e:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    d2a0:	4b90      	ldr	r3, [pc, #576]	; (d4e4 <hif_handle_isr+0x354>)
    d2a2:	789b      	ldrb	r3, [r3, #2]
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d000      	beq.n	d2aa <hif_handle_isr+0x11a>
    d2a8:	e0a1      	b.n	d3ee <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    d2aa:	464b      	mov	r3, r9
    d2ac:	78db      	ldrb	r3, [r3, #3]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d100      	bne.n	d2b4 <hif_handle_isr+0x124>
    d2b2:	e15b      	b.n	d56c <hif_handle_isr+0x3dc>
    d2b4:	4643      	mov	r3, r8
    d2b6:	791b      	ldrb	r3, [r3, #4]
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	d000      	beq.n	d2be <hif_handle_isr+0x12e>
    d2bc:	e156      	b.n	d56c <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    d2be:	4a89      	ldr	r2, [pc, #548]	; (d4e4 <hif_handle_isr+0x354>)
    d2c0:	78d3      	ldrb	r3, [r2, #3]
    d2c2:	3b01      	subs	r3, #1
    d2c4:	b2db      	uxtb	r3, r3
    d2c6:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d2c8:	4d91      	ldr	r5, [pc, #580]	; (d510 <hif_handle_isr+0x380>)
    d2ca:	e0d6      	b.n	d47a <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    d2cc:	22e8      	movs	r2, #232	; 0xe8
    d2ce:	32ff      	adds	r2, #255	; 0xff
    d2d0:	4986      	ldr	r1, [pc, #536]	; (d4ec <hif_handle_isr+0x35c>)
    d2d2:	4887      	ldr	r0, [pc, #540]	; (d4f0 <hif_handle_isr+0x360>)
    d2d4:	4b87      	ldr	r3, [pc, #540]	; (d4f4 <hif_handle_isr+0x364>)
    d2d6:	4798      	blx	r3
    d2d8:	488e      	ldr	r0, [pc, #568]	; (d514 <hif_handle_isr+0x384>)
    d2da:	4b88      	ldr	r3, [pc, #544]	; (d4fc <hif_handle_isr+0x36c>)
    d2dc:	4798      	blx	r3
    d2de:	200d      	movs	r0, #13
    d2e0:	4b87      	ldr	r3, [pc, #540]	; (d500 <hif_handle_isr+0x370>)
    d2e2:	4798      	blx	r3
    d2e4:	e7dc      	b.n	d2a0 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    d2e6:	4b7f      	ldr	r3, [pc, #508]	; (d4e4 <hif_handle_isr+0x354>)
    d2e8:	695b      	ldr	r3, [r3, #20]
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d00b      	beq.n	d306 <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d2ee:	4b7d      	ldr	r3, [pc, #500]	; (d4e4 <hif_handle_isr+0x354>)
    d2f0:	695b      	ldr	r3, [r3, #20]
    d2f2:	aa04      	add	r2, sp, #16
    d2f4:	7850      	ldrb	r0, [r2, #1]
    d2f6:	b2c0      	uxtb	r0, r0
    d2f8:	8851      	ldrh	r1, [r2, #2]
    d2fa:	9a05      	ldr	r2, [sp, #20]
    d2fc:	3208      	adds	r2, #8
    d2fe:	3908      	subs	r1, #8
    d300:	b289      	uxth	r1, r1
    d302:	4798      	blx	r3
    d304:	e7cc      	b.n	d2a0 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    d306:	22f0      	movs	r2, #240	; 0xf0
    d308:	32ff      	adds	r2, #255	; 0xff
    d30a:	4978      	ldr	r1, [pc, #480]	; (d4ec <hif_handle_isr+0x35c>)
    d30c:	4878      	ldr	r0, [pc, #480]	; (d4f0 <hif_handle_isr+0x360>)
    d30e:	4b79      	ldr	r3, [pc, #484]	; (d4f4 <hif_handle_isr+0x364>)
    d310:	4798      	blx	r3
    d312:	4881      	ldr	r0, [pc, #516]	; (d518 <hif_handle_isr+0x388>)
    d314:	4b79      	ldr	r3, [pc, #484]	; (d4fc <hif_handle_isr+0x36c>)
    d316:	4798      	blx	r3
    d318:	200d      	movs	r0, #13
    d31a:	4b79      	ldr	r3, [pc, #484]	; (d500 <hif_handle_isr+0x370>)
    d31c:	4798      	blx	r3
    d31e:	e7bf      	b.n	d2a0 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    d320:	4b70      	ldr	r3, [pc, #448]	; (d4e4 <hif_handle_isr+0x354>)
    d322:	699b      	ldr	r3, [r3, #24]
    d324:	2b00      	cmp	r3, #0
    d326:	d00b      	beq.n	d340 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d328:	4b6e      	ldr	r3, [pc, #440]	; (d4e4 <hif_handle_isr+0x354>)
    d32a:	699b      	ldr	r3, [r3, #24]
    d32c:	aa04      	add	r2, sp, #16
    d32e:	7850      	ldrb	r0, [r2, #1]
    d330:	b2c0      	uxtb	r0, r0
    d332:	8851      	ldrh	r1, [r2, #2]
    d334:	9a05      	ldr	r2, [sp, #20]
    d336:	3208      	adds	r2, #8
    d338:	3908      	subs	r1, #8
    d33a:	b289      	uxth	r1, r1
    d33c:	4798      	blx	r3
    d33e:	e7af      	b.n	d2a0 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    d340:	22f8      	movs	r2, #248	; 0xf8
    d342:	32ff      	adds	r2, #255	; 0xff
    d344:	4969      	ldr	r1, [pc, #420]	; (d4ec <hif_handle_isr+0x35c>)
    d346:	486a      	ldr	r0, [pc, #424]	; (d4f0 <hif_handle_isr+0x360>)
    d348:	4b6a      	ldr	r3, [pc, #424]	; (d4f4 <hif_handle_isr+0x364>)
    d34a:	4798      	blx	r3
    d34c:	4873      	ldr	r0, [pc, #460]	; (d51c <hif_handle_isr+0x38c>)
    d34e:	4b6b      	ldr	r3, [pc, #428]	; (d4fc <hif_handle_isr+0x36c>)
    d350:	4798      	blx	r3
    d352:	200d      	movs	r0, #13
    d354:	4b6a      	ldr	r3, [pc, #424]	; (d500 <hif_handle_isr+0x370>)
    d356:	4798      	blx	r3
    d358:	e7a2      	b.n	d2a0 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    d35a:	4b62      	ldr	r3, [pc, #392]	; (d4e4 <hif_handle_isr+0x354>)
    d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d35e:	2b00      	cmp	r3, #0
    d360:	d00b      	beq.n	d37a <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d362:	4b60      	ldr	r3, [pc, #384]	; (d4e4 <hif_handle_isr+0x354>)
    d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d366:	aa04      	add	r2, sp, #16
    d368:	7850      	ldrb	r0, [r2, #1]
    d36a:	b2c0      	uxtb	r0, r0
    d36c:	8851      	ldrh	r1, [r2, #2]
    d36e:	9a05      	ldr	r2, [sp, #20]
    d370:	3208      	adds	r2, #8
    d372:	3908      	subs	r1, #8
    d374:	b289      	uxth	r1, r1
    d376:	4798      	blx	r3
    d378:	e792      	b.n	d2a0 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    d37a:	2280      	movs	r2, #128	; 0x80
    d37c:	0092      	lsls	r2, r2, #2
    d37e:	495b      	ldr	r1, [pc, #364]	; (d4ec <hif_handle_isr+0x35c>)
    d380:	485b      	ldr	r0, [pc, #364]	; (d4f0 <hif_handle_isr+0x360>)
    d382:	4b5c      	ldr	r3, [pc, #368]	; (d4f4 <hif_handle_isr+0x364>)
    d384:	4798      	blx	r3
    d386:	4866      	ldr	r0, [pc, #408]	; (d520 <hif_handle_isr+0x390>)
    d388:	4b5c      	ldr	r3, [pc, #368]	; (d4fc <hif_handle_isr+0x36c>)
    d38a:	4798      	blx	r3
    d38c:	200d      	movs	r0, #13
    d38e:	4b5c      	ldr	r3, [pc, #368]	; (d500 <hif_handle_isr+0x370>)
    d390:	4798      	blx	r3
    d392:	e785      	b.n	d2a0 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    d394:	4b53      	ldr	r3, [pc, #332]	; (d4e4 <hif_handle_isr+0x354>)
    d396:	69db      	ldr	r3, [r3, #28]
    d398:	2b00      	cmp	r3, #0
    d39a:	d00b      	beq.n	d3b4 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d39c:	4b51      	ldr	r3, [pc, #324]	; (d4e4 <hif_handle_isr+0x354>)
    d39e:	69db      	ldr	r3, [r3, #28]
    d3a0:	aa04      	add	r2, sp, #16
    d3a2:	7850      	ldrb	r0, [r2, #1]
    d3a4:	b2c0      	uxtb	r0, r0
    d3a6:	8851      	ldrh	r1, [r2, #2]
    d3a8:	9a05      	ldr	r2, [sp, #20]
    d3aa:	3208      	adds	r2, #8
    d3ac:	3908      	subs	r1, #8
    d3ae:	b289      	uxth	r1, r1
    d3b0:	4798      	blx	r3
    d3b2:	e775      	b.n	d2a0 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    d3b4:	4a5b      	ldr	r2, [pc, #364]	; (d524 <hif_handle_isr+0x394>)
    d3b6:	494d      	ldr	r1, [pc, #308]	; (d4ec <hif_handle_isr+0x35c>)
    d3b8:	484d      	ldr	r0, [pc, #308]	; (d4f0 <hif_handle_isr+0x360>)
    d3ba:	4b4e      	ldr	r3, [pc, #312]	; (d4f4 <hif_handle_isr+0x364>)
    d3bc:	4798      	blx	r3
    d3be:	485a      	ldr	r0, [pc, #360]	; (d528 <hif_handle_isr+0x398>)
    d3c0:	4b4e      	ldr	r3, [pc, #312]	; (d4fc <hif_handle_isr+0x36c>)
    d3c2:	4798      	blx	r3
    d3c4:	200d      	movs	r0, #13
    d3c6:	4b4e      	ldr	r3, [pc, #312]	; (d500 <hif_handle_isr+0x370>)
    d3c8:	4798      	blx	r3
    d3ca:	e769      	b.n	d2a0 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    d3cc:	4b45      	ldr	r3, [pc, #276]	; (d4e4 <hif_handle_isr+0x354>)
    d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d100      	bne.n	d3d6 <hif_handle_isr+0x246>
    d3d4:	e764      	b.n	d2a0 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d3d6:	4b43      	ldr	r3, [pc, #268]	; (d4e4 <hif_handle_isr+0x354>)
    d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d3da:	aa04      	add	r2, sp, #16
    d3dc:	7850      	ldrb	r0, [r2, #1]
    d3de:	b2c0      	uxtb	r0, r0
    d3e0:	8851      	ldrh	r1, [r2, #2]
    d3e2:	9a05      	ldr	r2, [sp, #20]
    d3e4:	3208      	adds	r2, #8
    d3e6:	3908      	subs	r1, #8
    d3e8:	b289      	uxth	r1, r1
    d3ea:	4798      	blx	r3
    d3ec:	e758      	b.n	d2a0 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    d3ee:	4a4f      	ldr	r2, [pc, #316]	; (d52c <hif_handle_isr+0x39c>)
    d3f0:	493e      	ldr	r1, [pc, #248]	; (d4ec <hif_handle_isr+0x35c>)
    d3f2:	483f      	ldr	r0, [pc, #252]	; (d4f0 <hif_handle_isr+0x360>)
    d3f4:	4c3f      	ldr	r4, [pc, #252]	; (d4f4 <hif_handle_isr+0x364>)
    d3f6:	47a0      	blx	r4
    d3f8:	ab04      	add	r3, sp, #16
    d3fa:	7819      	ldrb	r1, [r3, #0]
    d3fc:	b2c9      	uxtb	r1, r1
    d3fe:	785a      	ldrb	r2, [r3, #1]
    d400:	b2d2      	uxtb	r2, r2
    d402:	484b      	ldr	r0, [pc, #300]	; (d530 <hif_handle_isr+0x3a0>)
    d404:	47a0      	blx	r4
    d406:	200d      	movs	r0, #13
    d408:	4b3d      	ldr	r3, [pc, #244]	; (d500 <hif_handle_isr+0x370>)
    d40a:	4798      	blx	r3
					ret = hif_set_rx_done();
    d40c:	4b49      	ldr	r3, [pc, #292]	; (d534 <hif_handle_isr+0x3a4>)
    d40e:	4798      	blx	r3
    d410:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    d412:	d127      	bne.n	d464 <hif_handle_isr+0x2d4>
    d414:	e749      	b.n	d2aa <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    d416:	4a48      	ldr	r2, [pc, #288]	; (d538 <hif_handle_isr+0x3a8>)
    d418:	4934      	ldr	r1, [pc, #208]	; (d4ec <hif_handle_isr+0x35c>)
    d41a:	4835      	ldr	r0, [pc, #212]	; (d4f0 <hif_handle_isr+0x360>)
    d41c:	4b35      	ldr	r3, [pc, #212]	; (d4f4 <hif_handle_isr+0x364>)
    d41e:	4798      	blx	r3
    d420:	4846      	ldr	r0, [pc, #280]	; (d53c <hif_handle_isr+0x3ac>)
    d422:	4b36      	ldr	r3, [pc, #216]	; (d4fc <hif_handle_isr+0x36c>)
    d424:	4798      	blx	r3
    d426:	200d      	movs	r0, #13
    d428:	4b35      	ldr	r3, [pc, #212]	; (d500 <hif_handle_isr+0x370>)
    d42a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    d42c:	2402      	movs	r4, #2
    d42e:	4264      	negs	r4, r4
    d430:	e018      	b.n	d464 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    d432:	4a43      	ldr	r2, [pc, #268]	; (d540 <hif_handle_isr+0x3b0>)
    d434:	492d      	ldr	r1, [pc, #180]	; (d4ec <hif_handle_isr+0x35c>)
    d436:	482e      	ldr	r0, [pc, #184]	; (d4f0 <hif_handle_isr+0x360>)
    d438:	4c2e      	ldr	r4, [pc, #184]	; (d4f4 <hif_handle_isr+0x364>)
    d43a:	47a0      	blx	r4
    d43c:	9903      	ldr	r1, [sp, #12]
    d43e:	4841      	ldr	r0, [pc, #260]	; (d544 <hif_handle_isr+0x3b4>)
    d440:	47a0      	blx	r4
    d442:	200d      	movs	r0, #13
    d444:	4b2e      	ldr	r3, [pc, #184]	; (d500 <hif_handle_isr+0x370>)
    d446:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d448:	240c      	movs	r4, #12
    d44a:	4264      	negs	r4, r4
    d44c:	e00a      	b.n	d464 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    d44e:	4a3e      	ldr	r2, [pc, #248]	; (d548 <hif_handle_isr+0x3b8>)
    d450:	4926      	ldr	r1, [pc, #152]	; (d4ec <hif_handle_isr+0x35c>)
    d452:	4827      	ldr	r0, [pc, #156]	; (d4f0 <hif_handle_isr+0x360>)
    d454:	4b27      	ldr	r3, [pc, #156]	; (d4f4 <hif_handle_isr+0x364>)
    d456:	4798      	blx	r3
    d458:	483c      	ldr	r0, [pc, #240]	; (d54c <hif_handle_isr+0x3bc>)
    d45a:	4b28      	ldr	r3, [pc, #160]	; (d4fc <hif_handle_isr+0x36c>)
    d45c:	4798      	blx	r3
    d45e:	200d      	movs	r0, #13
    d460:	4b27      	ldr	r3, [pc, #156]	; (d500 <hif_handle_isr+0x370>)
    d462:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    d464:	4a3a      	ldr	r2, [pc, #232]	; (d550 <hif_handle_isr+0x3c0>)
    d466:	493b      	ldr	r1, [pc, #236]	; (d554 <hif_handle_isr+0x3c4>)
    d468:	4821      	ldr	r0, [pc, #132]	; (d4f0 <hif_handle_isr+0x360>)
    d46a:	4f22      	ldr	r7, [pc, #136]	; (d4f4 <hif_handle_isr+0x364>)
    d46c:	47b8      	blx	r7
    d46e:	0021      	movs	r1, r4
    d470:	4839      	ldr	r0, [pc, #228]	; (d558 <hif_handle_isr+0x3c8>)
    d472:	47b8      	blx	r7
    d474:	200d      	movs	r0, #13
    d476:	4b22      	ldr	r3, [pc, #136]	; (d500 <hif_handle_isr+0x370>)
    d478:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d47a:	a903      	add	r1, sp, #12
    d47c:	4837      	ldr	r0, [pc, #220]	; (d55c <hif_handle_isr+0x3cc>)
    d47e:	47a8      	blx	r5
    d480:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    d482:	d1e4      	bne.n	d44e <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    d484:	9b03      	ldr	r3, [sp, #12]
    d486:	07db      	lsls	r3, r3, #31
    d488:	d5d3      	bpl.n	d432 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    d48a:	2000      	movs	r0, #0
    d48c:	4b1e      	ldr	r3, [pc, #120]	; (d508 <hif_handle_isr+0x378>)
    d48e:	4798      	blx	r3
			reg &= ~NBIT0;
    d490:	2301      	movs	r3, #1
    d492:	9903      	ldr	r1, [sp, #12]
    d494:	4399      	bics	r1, r3
    d496:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d498:	4830      	ldr	r0, [pc, #192]	; (d55c <hif_handle_isr+0x3cc>)
    d49a:	4b31      	ldr	r3, [pc, #196]	; (d560 <hif_handle_isr+0x3d0>)
    d49c:	4798      	blx	r3
    d49e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    d4a0:	d1e0      	bne.n	d464 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    d4a2:	2201      	movs	r2, #1
    d4a4:	4b0f      	ldr	r3, [pc, #60]	; (d4e4 <hif_handle_isr+0x354>)
    d4a6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d4a8:	9b03      	ldr	r3, [sp, #12]
    d4aa:	049e      	lsls	r6, r3, #18
    d4ac:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    d4ae:	d0b2      	beq.n	d416 <hif_handle_isr+0x286>
				uint32 address = 0;
    d4b0:	2300      	movs	r3, #0
    d4b2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d4b4:	a905      	add	r1, sp, #20
    d4b6:	482b      	ldr	r0, [pc, #172]	; (d564 <hif_handle_isr+0x3d4>)
    d4b8:	4b15      	ldr	r3, [pc, #84]	; (d510 <hif_handle_isr+0x380>)
    d4ba:	4798      	blx	r3
    d4bc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    d4be:	d100      	bne.n	d4c2 <hif_handle_isr+0x332>
    d4c0:	e671      	b.n	d1a6 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d4c2:	22e4      	movs	r2, #228	; 0xe4
    d4c4:	0052      	lsls	r2, r2, #1
    d4c6:	4909      	ldr	r1, [pc, #36]	; (d4ec <hif_handle_isr+0x35c>)
    d4c8:	4809      	ldr	r0, [pc, #36]	; (d4f0 <hif_handle_isr+0x360>)
    d4ca:	4b0a      	ldr	r3, [pc, #40]	; (d4f4 <hif_handle_isr+0x364>)
    d4cc:	4798      	blx	r3
    d4ce:	4826      	ldr	r0, [pc, #152]	; (d568 <hif_handle_isr+0x3d8>)
    d4d0:	4b0a      	ldr	r3, [pc, #40]	; (d4fc <hif_handle_isr+0x36c>)
    d4d2:	4798      	blx	r3
    d4d4:	200d      	movs	r0, #13
    d4d6:	4b0a      	ldr	r3, [pc, #40]	; (d500 <hif_handle_isr+0x370>)
    d4d8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d4da:	2001      	movs	r0, #1
    d4dc:	4b0a      	ldr	r3, [pc, #40]	; (d508 <hif_handle_isr+0x378>)
    d4de:	4798      	blx	r3
    d4e0:	e7c0      	b.n	d464 <hif_handle_isr+0x2d4>
    d4e2:	46c0      	nop			; (mov r8, r8)
    d4e4:	200014ec 	.word	0x200014ec
    d4e8:	0000e2b5 	.word	0x0000e2b5
    d4ec:	00019a10 	.word	0x00019a10
    d4f0:	000199bc 	.word	0x000199bc
    d4f4:	00017b29 	.word	0x00017b29
    d4f8:	00019b6c 	.word	0x00019b6c
    d4fc:	00017c45 	.word	0x00017c45
    d500:	00017b5d 	.word	0x00017b5d
    d504:	00019a68 	.word	0x00019a68
    d508:	0000cb59 	.word	0x0000cb59
    d50c:	00019a80 	.word	0x00019a80
    d510:	0000e29d 	.word	0x0000e29d
    d514:	00019ac0 	.word	0x00019ac0
    d518:	00019ae0 	.word	0x00019ae0
    d51c:	00019b04 	.word	0x00019b04
    d520:	00019b24 	.word	0x00019b24
    d524:	00000207 	.word	0x00000207
    d528:	00019b48 	.word	0x00019b48
    d52c:	00000216 	.word	0x00000216
    d530:	00019b84 	.word	0x00019b84
    d534:	0000ce8d 	.word	0x0000ce8d
    d538:	0000021d 	.word	0x0000021d
    d53c:	00019bb0 	.word	0x00019bb0
    d540:	00000225 	.word	0x00000225
    d544:	00019bc4 	.word	0x00019bc4
    d548:	0000022e 	.word	0x0000022e
    d54c:	00019be0 	.word	0x00019be0
    d550:	00000257 	.word	0x00000257
    d554:	00019a18 	.word	0x00019a18
    d558:	00019c04 	.word	0x00019c04
    d55c:	00001070 	.word	0x00001070
    d560:	0000e2a9 	.word	0x0000e2a9
    d564:	00001084 	.word	0x00001084
    d568:	00019a44 	.word	0x00019a44
			}
		}
	}

	return ret;
}
    d56c:	2000      	movs	r0, #0
    d56e:	b007      	add	sp, #28
    d570:	bc0c      	pop	{r2, r3}
    d572:	4690      	mov	r8, r2
    d574:	4699      	mov	r9, r3
    d576:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d578 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d578:	b570      	push	{r4, r5, r6, lr}
    d57a:	0014      	movs	r4, r2
    d57c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d57e:	2800      	cmp	r0, #0
    d580:	d003      	beq.n	d58a <hif_receive+0x12>
    d582:	2900      	cmp	r1, #0
    d584:	d001      	beq.n	d58a <hif_receive+0x12>
    d586:	2a00      	cmp	r2, #0
    d588:	d113      	bne.n	d5b2 <hif_receive+0x3a>
	{
		if(isDone)
    d58a:	2d00      	cmp	r5, #0
    d58c:	d002      	beq.n	d594 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d58e:	4b28      	ldr	r3, [pc, #160]	; (d630 <hif_receive+0xb8>)
    d590:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    d592:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    d594:	229e      	movs	r2, #158	; 0x9e
    d596:	0092      	lsls	r2, r2, #2
    d598:	4926      	ldr	r1, [pc, #152]	; (d634 <hif_receive+0xbc>)
    d59a:	4827      	ldr	r0, [pc, #156]	; (d638 <hif_receive+0xc0>)
    d59c:	4b27      	ldr	r3, [pc, #156]	; (d63c <hif_receive+0xc4>)
    d59e:	4798      	blx	r3
    d5a0:	4827      	ldr	r0, [pc, #156]	; (d640 <hif_receive+0xc8>)
    d5a2:	4b28      	ldr	r3, [pc, #160]	; (d644 <hif_receive+0xcc>)
    d5a4:	4798      	blx	r3
    d5a6:	200d      	movs	r0, #13
    d5a8:	4b27      	ldr	r3, [pc, #156]	; (d648 <hif_receive+0xd0>)
    d5aa:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d5ac:	200c      	movs	r0, #12
    d5ae:	4240      	negs	r0, r0
    d5b0:	e7ef      	b.n	d592 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    d5b2:	4b26      	ldr	r3, [pc, #152]	; (d64c <hif_receive+0xd4>)
    d5b4:	68db      	ldr	r3, [r3, #12]
    d5b6:	429a      	cmp	r2, r3
    d5b8:	d81a      	bhi.n	d5f0 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d5ba:	4b24      	ldr	r3, [pc, #144]	; (d64c <hif_receive+0xd4>)
    d5bc:	689b      	ldr	r3, [r3, #8]
    d5be:	4298      	cmp	r0, r3
    d5c0:	d327      	bcc.n	d612 <hif_receive+0x9a>
    d5c2:	1886      	adds	r6, r0, r2
    d5c4:	4a21      	ldr	r2, [pc, #132]	; (d64c <hif_receive+0xd4>)
    d5c6:	6893      	ldr	r3, [r2, #8]
    d5c8:	68d2      	ldr	r2, [r2, #12]
    d5ca:	189b      	adds	r3, r3, r2
    d5cc:	429e      	cmp	r6, r3
    d5ce:	d820      	bhi.n	d612 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d5d0:	0022      	movs	r2, r4
    d5d2:	4b1f      	ldr	r3, [pc, #124]	; (d650 <hif_receive+0xd8>)
    d5d4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    d5d6:	2800      	cmp	r0, #0
    d5d8:	d1db      	bne.n	d592 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d5da:	4a1c      	ldr	r2, [pc, #112]	; (d64c <hif_receive+0xd4>)
    d5dc:	6893      	ldr	r3, [r2, #8]
    d5de:	68d2      	ldr	r2, [r2, #12]
    d5e0:	189b      	adds	r3, r3, r2
    d5e2:	429e      	cmp	r6, r3
    d5e4:	d001      	beq.n	d5ea <hif_receive+0x72>
    d5e6:	2d00      	cmp	r5, #0
    d5e8:	d0d3      	beq.n	d592 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    d5ea:	4b11      	ldr	r3, [pc, #68]	; (d630 <hif_receive+0xb8>)
    d5ec:	4798      	blx	r3
    d5ee:	e7d0      	b.n	d592 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d5f0:	22a0      	movs	r2, #160	; 0xa0
    d5f2:	0092      	lsls	r2, r2, #2
    d5f4:	490f      	ldr	r1, [pc, #60]	; (d634 <hif_receive+0xbc>)
    d5f6:	4810      	ldr	r0, [pc, #64]	; (d638 <hif_receive+0xc0>)
    d5f8:	4d10      	ldr	r5, [pc, #64]	; (d63c <hif_receive+0xc4>)
    d5fa:	47a8      	blx	r5
    d5fc:	4b13      	ldr	r3, [pc, #76]	; (d64c <hif_receive+0xd4>)
    d5fe:	68da      	ldr	r2, [r3, #12]
    d600:	0021      	movs	r1, r4
    d602:	4814      	ldr	r0, [pc, #80]	; (d654 <hif_receive+0xdc>)
    d604:	47a8      	blx	r5
    d606:	200d      	movs	r0, #13
    d608:	4b0f      	ldr	r3, [pc, #60]	; (d648 <hif_receive+0xd0>)
    d60a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d60c:	200c      	movs	r0, #12
    d60e:	4240      	negs	r0, r0
		goto ERR1;
    d610:	e7bf      	b.n	d592 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d612:	4a11      	ldr	r2, [pc, #68]	; (d658 <hif_receive+0xe0>)
    d614:	4907      	ldr	r1, [pc, #28]	; (d634 <hif_receive+0xbc>)
    d616:	4808      	ldr	r0, [pc, #32]	; (d638 <hif_receive+0xc0>)
    d618:	4b08      	ldr	r3, [pc, #32]	; (d63c <hif_receive+0xc4>)
    d61a:	4798      	blx	r3
    d61c:	480f      	ldr	r0, [pc, #60]	; (d65c <hif_receive+0xe4>)
    d61e:	4b09      	ldr	r3, [pc, #36]	; (d644 <hif_receive+0xcc>)
    d620:	4798      	blx	r3
    d622:	200d      	movs	r0, #13
    d624:	4b08      	ldr	r3, [pc, #32]	; (d648 <hif_receive+0xd0>)
    d626:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d628:	200c      	movs	r0, #12
    d62a:	4240      	negs	r0, r0
		goto ERR1;
    d62c:	e7b1      	b.n	d592 <hif_receive+0x1a>
    d62e:	46c0      	nop			; (mov r8, r8)
    d630:	0000ce8d 	.word	0x0000ce8d
    d634:	00019a28 	.word	0x00019a28
    d638:	000199bc 	.word	0x000199bc
    d63c:	00017b29 	.word	0x00017b29
    d640:	00019c34 	.word	0x00019c34
    d644:	00017c45 	.word	0x00017c45
    d648:	00017b5d 	.word	0x00017b5d
    d64c:	200014ec 	.word	0x200014ec
    d650:	0000e2b5 	.word	0x0000e2b5
    d654:	00019c54 	.word	0x00019c54
    d658:	00000286 	.word	0x00000286
    d65c:	00019c9c 	.word	0x00019c9c

0000d660 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d660:	b570      	push	{r4, r5, r6, lr}
    d662:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    d664:	2807      	cmp	r0, #7
    d666:	d81f      	bhi.n	d6a8 <hif_register_cb+0x48>
    d668:	0083      	lsls	r3, r0, #2
    d66a:	4a16      	ldr	r2, [pc, #88]	; (d6c4 <hif_register_cb+0x64>)
    d66c:	58d3      	ldr	r3, [r2, r3]
    d66e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d670:	4b15      	ldr	r3, [pc, #84]	; (d6c8 <hif_register_cb+0x68>)
    d672:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    d674:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    d676:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    d678:	4b13      	ldr	r3, [pc, #76]	; (d6c8 <hif_register_cb+0x68>)
    d67a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    d67c:	2000      	movs	r0, #0
			break;
    d67e:	e7fa      	b.n	d676 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    d680:	4b11      	ldr	r3, [pc, #68]	; (d6c8 <hif_register_cb+0x68>)
    d682:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    d684:	2000      	movs	r0, #0
			break;
    d686:	e7f6      	b.n	d676 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    d688:	4b0f      	ldr	r3, [pc, #60]	; (d6c8 <hif_register_cb+0x68>)
    d68a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    d68c:	2000      	movs	r0, #0
			break;
    d68e:	e7f2      	b.n	d676 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    d690:	4b0d      	ldr	r3, [pc, #52]	; (d6c8 <hif_register_cb+0x68>)
    d692:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    d694:	2000      	movs	r0, #0
			break;
    d696:	e7ee      	b.n	d676 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    d698:	4b0b      	ldr	r3, [pc, #44]	; (d6c8 <hif_register_cb+0x68>)
    d69a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    d69c:	2000      	movs	r0, #0
			break;
    d69e:	e7ea      	b.n	d676 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    d6a0:	4b09      	ldr	r3, [pc, #36]	; (d6c8 <hif_register_cb+0x68>)
    d6a2:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    d6a4:	2000      	movs	r0, #0
			break;
    d6a6:	e7e6      	b.n	d676 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    d6a8:	4a08      	ldr	r2, [pc, #32]	; (d6cc <hif_register_cb+0x6c>)
    d6aa:	4909      	ldr	r1, [pc, #36]	; (d6d0 <hif_register_cb+0x70>)
    d6ac:	4809      	ldr	r0, [pc, #36]	; (d6d4 <hif_register_cb+0x74>)
    d6ae:	4d0a      	ldr	r5, [pc, #40]	; (d6d8 <hif_register_cb+0x78>)
    d6b0:	47a8      	blx	r5
    d6b2:	0021      	movs	r1, r4
    d6b4:	4809      	ldr	r0, [pc, #36]	; (d6dc <hif_register_cb+0x7c>)
    d6b6:	47a8      	blx	r5
    d6b8:	200d      	movs	r0, #13
    d6ba:	4b09      	ldr	r3, [pc, #36]	; (d6e0 <hif_register_cb+0x80>)
    d6bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d6be:	200c      	movs	r0, #12
    d6c0:	4240      	negs	r0, r0
			break;
    d6c2:	e7d8      	b.n	d676 <hif_register_cb+0x16>
    d6c4:	000199e4 	.word	0x000199e4
    d6c8:	200014ec 	.word	0x200014ec
    d6cc:	000002be 	.word	0x000002be
    d6d0:	00019a34 	.word	0x00019a34
    d6d4:	000199bc 	.word	0x000199bc
    d6d8:	00017b29 	.word	0x00017b29
    d6dc:	00019ce0 	.word	0x00019ce0
    d6e0:	00017b5d 	.word	0x00017b5d

0000d6e4 <hif_init>:
{
    d6e4:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d6e6:	222c      	movs	r2, #44	; 0x2c
    d6e8:	2100      	movs	r1, #0
    d6ea:	4806      	ldr	r0, [pc, #24]	; (d704 <hif_init+0x20>)
    d6ec:	4b06      	ldr	r3, [pc, #24]	; (d708 <hif_init+0x24>)
    d6ee:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d6f0:	4806      	ldr	r0, [pc, #24]	; (d70c <hif_init+0x28>)
    d6f2:	4b07      	ldr	r3, [pc, #28]	; (d710 <hif_init+0x2c>)
    d6f4:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d6f6:	4907      	ldr	r1, [pc, #28]	; (d714 <hif_init+0x30>)
    d6f8:	2003      	movs	r0, #3
    d6fa:	4b07      	ldr	r3, [pc, #28]	; (d718 <hif_init+0x34>)
    d6fc:	4798      	blx	r3
}
    d6fe:	2000      	movs	r0, #0
    d700:	bd10      	pop	{r4, pc}
    d702:	46c0      	nop			; (mov r8, r8)
    d704:	200014ec 	.word	0x200014ec
    d708:	0000ce4d 	.word	0x0000ce4d
    d70c:	0000ce79 	.word	0x0000ce79
    d710:	0000cb01 	.word	0x0000cb01
    d714:	0000ce89 	.word	0x0000ce89
    d718:	0000d661 	.word	0x0000d661

0000d71c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d71c:	b530      	push	{r4, r5, lr}
    d71e:	b09f      	sub	sp, #124	; 0x7c
    d720:	0004      	movs	r4, r0
    d722:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d724:	282c      	cmp	r0, #44	; 0x2c
    d726:	d02f      	beq.n	d788 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d728:	281b      	cmp	r0, #27
    d72a:	d03d      	beq.n	d7a8 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d72c:	2806      	cmp	r0, #6
    d72e:	d04b      	beq.n	d7c8 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d730:	280e      	cmp	r0, #14
    d732:	d027      	beq.n	d784 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d734:	2832      	cmp	r0, #50	; 0x32
    d736:	d057      	beq.n	d7e8 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d738:	282f      	cmp	r0, #47	; 0x2f
    d73a:	d065      	beq.n	d808 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d73c:	2834      	cmp	r0, #52	; 0x34
    d73e:	d100      	bne.n	d742 <m2m_wifi_cb+0x26>
    d740:	e077      	b.n	d832 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d742:	2811      	cmp	r0, #17
    d744:	d100      	bne.n	d748 <m2m_wifi_cb+0x2c>
    d746:	e096      	b.n	d876 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d748:	2813      	cmp	r0, #19
    d74a:	d100      	bne.n	d74e <m2m_wifi_cb+0x32>
    d74c:	e0ac      	b.n	d8a8 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d74e:	2804      	cmp	r0, #4
    d750:	d100      	bne.n	d754 <m2m_wifi_cb+0x38>
    d752:	e0bb      	b.n	d8cc <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d754:	2865      	cmp	r0, #101	; 0x65
    d756:	d100      	bne.n	d75a <m2m_wifi_cb+0x3e>
    d758:	e0ca      	b.n	d8f0 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d75a:	2809      	cmp	r0, #9
    d75c:	d100      	bne.n	d760 <m2m_wifi_cb+0x44>
    d75e:	e0d9      	b.n	d914 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d760:	282a      	cmp	r0, #42	; 0x2a
    d762:	d100      	bne.n	d766 <m2m_wifi_cb+0x4a>
    d764:	e0e8      	b.n	d938 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d766:	2820      	cmp	r0, #32
    d768:	d100      	bne.n	d76c <m2m_wifi_cb+0x50>
    d76a:	e0f7      	b.n	d95c <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d76c:	2224      	movs	r2, #36	; 0x24
    d76e:	32ff      	adds	r2, #255	; 0xff
    d770:	4989      	ldr	r1, [pc, #548]	; (d998 <m2m_wifi_cb+0x27c>)
    d772:	488a      	ldr	r0, [pc, #552]	; (d99c <m2m_wifi_cb+0x280>)
    d774:	4d8a      	ldr	r5, [pc, #552]	; (d9a0 <m2m_wifi_cb+0x284>)
    d776:	47a8      	blx	r5
    d778:	0021      	movs	r1, r4
    d77a:	488a      	ldr	r0, [pc, #552]	; (d9a4 <m2m_wifi_cb+0x288>)
    d77c:	47a8      	blx	r5
    d77e:	200d      	movs	r0, #13
    d780:	4b89      	ldr	r3, [pc, #548]	; (d9a8 <m2m_wifi_cb+0x28c>)
    d782:	4798      	blx	r3
	}
}
    d784:	b01f      	add	sp, #124	; 0x7c
    d786:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d788:	2300      	movs	r3, #0
    d78a:	2204      	movs	r2, #4
    d78c:	a903      	add	r1, sp, #12
    d78e:	0028      	movs	r0, r5
    d790:	4c86      	ldr	r4, [pc, #536]	; (d9ac <m2m_wifi_cb+0x290>)
    d792:	47a0      	blx	r4
    d794:	2800      	cmp	r0, #0
    d796:	d1f5      	bne.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d798:	4b85      	ldr	r3, [pc, #532]	; (d9b0 <m2m_wifi_cb+0x294>)
    d79a:	681b      	ldr	r3, [r3, #0]
    d79c:	2b00      	cmp	r3, #0
    d79e:	d0f1      	beq.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d7a0:	a903      	add	r1, sp, #12
    d7a2:	302c      	adds	r0, #44	; 0x2c
    d7a4:	4798      	blx	r3
    d7a6:	e7ed      	b.n	d784 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d7a8:	2300      	movs	r3, #0
    d7aa:	2208      	movs	r2, #8
    d7ac:	a903      	add	r1, sp, #12
    d7ae:	0028      	movs	r0, r5
    d7b0:	4c7e      	ldr	r4, [pc, #504]	; (d9ac <m2m_wifi_cb+0x290>)
    d7b2:	47a0      	blx	r4
    d7b4:	2800      	cmp	r0, #0
    d7b6:	d1e5      	bne.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d7b8:	4b7d      	ldr	r3, [pc, #500]	; (d9b0 <m2m_wifi_cb+0x294>)
    d7ba:	681b      	ldr	r3, [r3, #0]
    d7bc:	2b00      	cmp	r3, #0
    d7be:	d0e1      	beq.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d7c0:	a903      	add	r1, sp, #12
    d7c2:	301b      	adds	r0, #27
    d7c4:	4798      	blx	r3
    d7c6:	e7dd      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d7c8:	2301      	movs	r3, #1
    d7ca:	2230      	movs	r2, #48	; 0x30
    d7cc:	a903      	add	r1, sp, #12
    d7ce:	0028      	movs	r0, r5
    d7d0:	4c76      	ldr	r4, [pc, #472]	; (d9ac <m2m_wifi_cb+0x290>)
    d7d2:	47a0      	blx	r4
    d7d4:	2800      	cmp	r0, #0
    d7d6:	d1d5      	bne.n	d784 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d7d8:	4b75      	ldr	r3, [pc, #468]	; (d9b0 <m2m_wifi_cb+0x294>)
    d7da:	681b      	ldr	r3, [r3, #0]
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d0d1      	beq.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d7e0:	a903      	add	r1, sp, #12
    d7e2:	3006      	adds	r0, #6
    d7e4:	4798      	blx	r3
    d7e6:	e7cd      	b.n	d784 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d7e8:	2300      	movs	r3, #0
    d7ea:	2218      	movs	r2, #24
    d7ec:	a903      	add	r1, sp, #12
    d7ee:	0028      	movs	r0, r5
    d7f0:	4c6e      	ldr	r4, [pc, #440]	; (d9ac <m2m_wifi_cb+0x290>)
    d7f2:	47a0      	blx	r4
    d7f4:	2800      	cmp	r0, #0
    d7f6:	d1c5      	bne.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d7f8:	4b6d      	ldr	r3, [pc, #436]	; (d9b0 <m2m_wifi_cb+0x294>)
    d7fa:	681b      	ldr	r3, [r3, #0]
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	d0c1      	beq.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d800:	a903      	add	r1, sp, #12
    d802:	3032      	adds	r0, #50	; 0x32
    d804:	4798      	blx	r3
    d806:	e7bd      	b.n	d784 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d808:	2264      	movs	r2, #100	; 0x64
    d80a:	2100      	movs	r1, #0
    d80c:	a803      	add	r0, sp, #12
    d80e:	4b69      	ldr	r3, [pc, #420]	; (d9b4 <m2m_wifi_cb+0x298>)
    d810:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d812:	2300      	movs	r3, #0
    d814:	2264      	movs	r2, #100	; 0x64
    d816:	a903      	add	r1, sp, #12
    d818:	0028      	movs	r0, r5
    d81a:	4c64      	ldr	r4, [pc, #400]	; (d9ac <m2m_wifi_cb+0x290>)
    d81c:	47a0      	blx	r4
    d81e:	2800      	cmp	r0, #0
    d820:	d1b0      	bne.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d822:	4b63      	ldr	r3, [pc, #396]	; (d9b0 <m2m_wifi_cb+0x294>)
    d824:	681b      	ldr	r3, [r3, #0]
    d826:	2b00      	cmp	r3, #0
    d828:	d0ac      	beq.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d82a:	a903      	add	r1, sp, #12
    d82c:	302f      	adds	r0, #47	; 0x2f
    d82e:	4798      	blx	r3
    d830:	e7a8      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d832:	2300      	movs	r3, #0
    d834:	2204      	movs	r2, #4
    d836:	a903      	add	r1, sp, #12
    d838:	0028      	movs	r0, r5
    d83a:	4c5c      	ldr	r4, [pc, #368]	; (d9ac <m2m_wifi_cb+0x290>)
    d83c:	47a0      	blx	r4
    d83e:	2800      	cmp	r0, #0
    d840:	d1a0      	bne.n	d784 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d842:	485d      	ldr	r0, [pc, #372]	; (d9b8 <m2m_wifi_cb+0x29c>)
    d844:	4d56      	ldr	r5, [pc, #344]	; (d9a0 <m2m_wifi_cb+0x284>)
    d846:	47a8      	blx	r5
    d848:	9c03      	ldr	r4, [sp, #12]
    d84a:	0a23      	lsrs	r3, r4, #8
    d84c:	20ff      	movs	r0, #255	; 0xff
    d84e:	4003      	ands	r3, r0
    d850:	0c22      	lsrs	r2, r4, #16
    d852:	4002      	ands	r2, r0
    d854:	0e21      	lsrs	r1, r4, #24
    d856:	4020      	ands	r0, r4
    d858:	9000      	str	r0, [sp, #0]
    d85a:	4858      	ldr	r0, [pc, #352]	; (d9bc <m2m_wifi_cb+0x2a0>)
    d85c:	47a8      	blx	r5
    d85e:	200d      	movs	r0, #13
    d860:	4b51      	ldr	r3, [pc, #324]	; (d9a8 <m2m_wifi_cb+0x28c>)
    d862:	4798      	blx	r3
			if (gpfAppWifiCb)
    d864:	4b52      	ldr	r3, [pc, #328]	; (d9b0 <m2m_wifi_cb+0x294>)
    d866:	681b      	ldr	r3, [r3, #0]
    d868:	2b00      	cmp	r3, #0
    d86a:	d100      	bne.n	d86e <m2m_wifi_cb+0x152>
    d86c:	e78a      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d86e:	2100      	movs	r1, #0
    d870:	2034      	movs	r0, #52	; 0x34
    d872:	4798      	blx	r3
    d874:	e786      	b.n	d784 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    d876:	2200      	movs	r2, #0
    d878:	4b51      	ldr	r3, [pc, #324]	; (d9c0 <m2m_wifi_cb+0x2a4>)
    d87a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d87c:	2300      	movs	r3, #0
    d87e:	3204      	adds	r2, #4
    d880:	a903      	add	r1, sp, #12
    d882:	0028      	movs	r0, r5
    d884:	4c49      	ldr	r4, [pc, #292]	; (d9ac <m2m_wifi_cb+0x290>)
    d886:	47a0      	blx	r4
    d888:	2800      	cmp	r0, #0
    d88a:	d000      	beq.n	d88e <m2m_wifi_cb+0x172>
    d88c:	e77a      	b.n	d784 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    d88e:	ab03      	add	r3, sp, #12
    d890:	781a      	ldrb	r2, [r3, #0]
    d892:	4b4c      	ldr	r3, [pc, #304]	; (d9c4 <m2m_wifi_cb+0x2a8>)
    d894:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d896:	4b46      	ldr	r3, [pc, #280]	; (d9b0 <m2m_wifi_cb+0x294>)
    d898:	681b      	ldr	r3, [r3, #0]
    d89a:	2b00      	cmp	r3, #0
    d89c:	d100      	bne.n	d8a0 <m2m_wifi_cb+0x184>
    d89e:	e771      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d8a0:	a903      	add	r1, sp, #12
    d8a2:	3011      	adds	r0, #17
    d8a4:	4798      	blx	r3
    d8a6:	e76d      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d8a8:	2300      	movs	r3, #0
    d8aa:	222c      	movs	r2, #44	; 0x2c
    d8ac:	a903      	add	r1, sp, #12
    d8ae:	0028      	movs	r0, r5
    d8b0:	4c3e      	ldr	r4, [pc, #248]	; (d9ac <m2m_wifi_cb+0x290>)
    d8b2:	47a0      	blx	r4
    d8b4:	2800      	cmp	r0, #0
    d8b6:	d000      	beq.n	d8ba <m2m_wifi_cb+0x19e>
    d8b8:	e764      	b.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d8ba:	4b3d      	ldr	r3, [pc, #244]	; (d9b0 <m2m_wifi_cb+0x294>)
    d8bc:	681b      	ldr	r3, [r3, #0]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d100      	bne.n	d8c4 <m2m_wifi_cb+0x1a8>
    d8c2:	e75f      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d8c4:	a903      	add	r1, sp, #12
    d8c6:	3013      	adds	r0, #19
    d8c8:	4798      	blx	r3
    d8ca:	e75b      	b.n	d784 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d8cc:	2300      	movs	r3, #0
    d8ce:	2204      	movs	r2, #4
    d8d0:	a91c      	add	r1, sp, #112	; 0x70
    d8d2:	0028      	movs	r0, r5
    d8d4:	4c35      	ldr	r4, [pc, #212]	; (d9ac <m2m_wifi_cb+0x290>)
    d8d6:	47a0      	blx	r4
    d8d8:	2800      	cmp	r0, #0
    d8da:	d000      	beq.n	d8de <m2m_wifi_cb+0x1c2>
    d8dc:	e752      	b.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d8de:	4b34      	ldr	r3, [pc, #208]	; (d9b0 <m2m_wifi_cb+0x294>)
    d8e0:	681b      	ldr	r3, [r3, #0]
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d100      	bne.n	d8e8 <m2m_wifi_cb+0x1cc>
    d8e6:	e74d      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d8e8:	a91c      	add	r1, sp, #112	; 0x70
    d8ea:	3004      	adds	r0, #4
    d8ec:	4798      	blx	r3
    d8ee:	e749      	b.n	d784 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d8f0:	2300      	movs	r3, #0
    d8f2:	2204      	movs	r2, #4
    d8f4:	a91c      	add	r1, sp, #112	; 0x70
    d8f6:	0028      	movs	r0, r5
    d8f8:	4c2c      	ldr	r4, [pc, #176]	; (d9ac <m2m_wifi_cb+0x290>)
    d8fa:	47a0      	blx	r4
    d8fc:	2800      	cmp	r0, #0
    d8fe:	d000      	beq.n	d902 <m2m_wifi_cb+0x1e6>
    d900:	e740      	b.n	d784 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d902:	4b2b      	ldr	r3, [pc, #172]	; (d9b0 <m2m_wifi_cb+0x294>)
    d904:	681b      	ldr	r3, [r3, #0]
    d906:	2b00      	cmp	r3, #0
    d908:	d100      	bne.n	d90c <m2m_wifi_cb+0x1f0>
    d90a:	e73b      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d90c:	a91c      	add	r1, sp, #112	; 0x70
    d90e:	3065      	adds	r0, #101	; 0x65
    d910:	4798      	blx	r3
    d912:	e737      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d914:	2301      	movs	r3, #1
    d916:	2264      	movs	r2, #100	; 0x64
    d918:	a903      	add	r1, sp, #12
    d91a:	0028      	movs	r0, r5
    d91c:	4c23      	ldr	r4, [pc, #140]	; (d9ac <m2m_wifi_cb+0x290>)
    d91e:	47a0      	blx	r4
    d920:	2800      	cmp	r0, #0
    d922:	d000      	beq.n	d926 <m2m_wifi_cb+0x20a>
    d924:	e72e      	b.n	d784 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d926:	4b22      	ldr	r3, [pc, #136]	; (d9b0 <m2m_wifi_cb+0x294>)
    d928:	681b      	ldr	r3, [r3, #0]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d100      	bne.n	d930 <m2m_wifi_cb+0x214>
    d92e:	e729      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d930:	a903      	add	r1, sp, #12
    d932:	3009      	adds	r0, #9
    d934:	4798      	blx	r3
    d936:	e725      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d938:	2301      	movs	r3, #1
    d93a:	2204      	movs	r2, #4
    d93c:	a903      	add	r1, sp, #12
    d93e:	0028      	movs	r0, r5
    d940:	4c1a      	ldr	r4, [pc, #104]	; (d9ac <m2m_wifi_cb+0x290>)
    d942:	47a0      	blx	r4
    d944:	2800      	cmp	r0, #0
    d946:	d000      	beq.n	d94a <m2m_wifi_cb+0x22e>
    d948:	e71c      	b.n	d784 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d94a:	4b19      	ldr	r3, [pc, #100]	; (d9b0 <m2m_wifi_cb+0x294>)
    d94c:	681b      	ldr	r3, [r3, #0]
    d94e:	2b00      	cmp	r3, #0
    d950:	d100      	bne.n	d954 <m2m_wifi_cb+0x238>
    d952:	e717      	b.n	d784 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d954:	a903      	add	r1, sp, #12
    d956:	302a      	adds	r0, #42	; 0x2a
    d958:	4798      	blx	r3
    d95a:	e713      	b.n	d784 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d95c:	2300      	movs	r3, #0
    d95e:	2208      	movs	r2, #8
    d960:	a903      	add	r1, sp, #12
    d962:	0028      	movs	r0, r5
    d964:	4c11      	ldr	r4, [pc, #68]	; (d9ac <m2m_wifi_cb+0x290>)
    d966:	47a0      	blx	r4
    d968:	2800      	cmp	r0, #0
    d96a:	d000      	beq.n	d96e <m2m_wifi_cb+0x252>
    d96c:	e70a      	b.n	d784 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d96e:	ab03      	add	r3, sp, #12
    d970:	889a      	ldrh	r2, [r3, #4]
    d972:	0028      	movs	r0, r5
    d974:	3008      	adds	r0, #8
    d976:	2301      	movs	r3, #1
    d978:	9903      	ldr	r1, [sp, #12]
    d97a:	4c0c      	ldr	r4, [pc, #48]	; (d9ac <m2m_wifi_cb+0x290>)
    d97c:	47a0      	blx	r4
    d97e:	2800      	cmp	r0, #0
    d980:	d000      	beq.n	d984 <m2m_wifi_cb+0x268>
    d982:	e6ff      	b.n	d784 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    d984:	4b0a      	ldr	r3, [pc, #40]	; (d9b0 <m2m_wifi_cb+0x294>)
    d986:	681b      	ldr	r3, [r3, #0]
    d988:	2b00      	cmp	r3, #0
    d98a:	d100      	bne.n	d98e <m2m_wifi_cb+0x272>
    d98c:	e6fa      	b.n	d784 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d98e:	a903      	add	r1, sp, #12
    d990:	3020      	adds	r0, #32
    d992:	4798      	blx	r3
    d994:	e6f6      	b.n	d784 <m2m_wifi_cb+0x68>
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	00019d24 	.word	0x00019d24
    d99c:	000199bc 	.word	0x000199bc
    d9a0:	00017b29 	.word	0x00017b29
    d9a4:	00019d74 	.word	0x00019d74
    d9a8:	00017b5d 	.word	0x00017b5d
    d9ac:	0000d579 	.word	0x0000d579
    d9b0:	20000478 	.word	0x20000478
    d9b4:	0000ce4d 	.word	0x0000ce4d
    d9b8:	00019cec 	.word	0x00019cec
    d9bc:	00019d54 	.word	0x00019d54
    d9c0:	2000047d 	.word	0x2000047d
    d9c4:	2000047c 	.word	0x2000047c

0000d9c8 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9ca:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d9cc:	2201      	movs	r2, #1
    d9ce:	230f      	movs	r3, #15
    d9d0:	446b      	add	r3, sp
    d9d2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d9d4:	2800      	cmp	r0, #0
    d9d6:	d061      	beq.n	da9c <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d9d8:	6802      	ldr	r2, [r0, #0]
    d9da:	4b32      	ldr	r3, [pc, #200]	; (daa4 <m2m_wifi_init+0xdc>)
    d9dc:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d9de:	2200      	movs	r2, #0
    d9e0:	4b31      	ldr	r3, [pc, #196]	; (daa8 <m2m_wifi_init+0xe0>)
    d9e2:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d9e4:	200f      	movs	r0, #15
    d9e6:	4468      	add	r0, sp
    d9e8:	4b30      	ldr	r3, [pc, #192]	; (daac <m2m_wifi_init+0xe4>)
    d9ea:	4798      	blx	r3
    d9ec:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d9ee:	d002      	beq.n	d9f6 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    d9f0:	0020      	movs	r0, r4
    d9f2:	b00f      	add	sp, #60	; 0x3c
    d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    d9f6:	2000      	movs	r0, #0
    d9f8:	4b2d      	ldr	r3, [pc, #180]	; (dab0 <m2m_wifi_init+0xe8>)
    d9fa:	4798      	blx	r3
    d9fc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d9fe:	d149      	bne.n	da94 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    da00:	492c      	ldr	r1, [pc, #176]	; (dab4 <m2m_wifi_init+0xec>)
    da02:	2001      	movs	r0, #1
    da04:	4b2c      	ldr	r3, [pc, #176]	; (dab8 <m2m_wifi_init+0xf0>)
    da06:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    da08:	ae04      	add	r6, sp, #16
    da0a:	0030      	movs	r0, r6
    da0c:	4b2b      	ldr	r3, [pc, #172]	; (dabc <m2m_wifi_init+0xf4>)
    da0e:	4798      	blx	r3
    da10:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    da12:	482b      	ldr	r0, [pc, #172]	; (dac0 <m2m_wifi_init+0xf8>)
    da14:	4d2b      	ldr	r5, [pc, #172]	; (dac4 <m2m_wifi_init+0xfc>)
    da16:	47a8      	blx	r5
    da18:	79b3      	ldrb	r3, [r6, #6]
    da1a:	7972      	ldrb	r2, [r6, #5]
    da1c:	7931      	ldrb	r1, [r6, #4]
    da1e:	8c30      	ldrh	r0, [r6, #32]
    da20:	9000      	str	r0, [sp, #0]
    da22:	4829      	ldr	r0, [pc, #164]	; (dac8 <m2m_wifi_init+0x100>)
    da24:	47a8      	blx	r5
    da26:	200d      	movs	r0, #13
    da28:	4f28      	ldr	r7, [pc, #160]	; (dacc <m2m_wifi_init+0x104>)
    da2a:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    da2c:	4824      	ldr	r0, [pc, #144]	; (dac0 <m2m_wifi_init+0xf8>)
    da2e:	47a8      	blx	r5
    da30:	2226      	movs	r2, #38	; 0x26
    da32:	446a      	add	r2, sp
    da34:	211a      	movs	r1, #26
    da36:	4469      	add	r1, sp
    da38:	4825      	ldr	r0, [pc, #148]	; (dad0 <m2m_wifi_init+0x108>)
    da3a:	47a8      	blx	r5
    da3c:	200d      	movs	r0, #13
    da3e:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    da40:	481f      	ldr	r0, [pc, #124]	; (dac0 <m2m_wifi_init+0xf8>)
    da42:	47a8      	blx	r5
    da44:	7a73      	ldrb	r3, [r6, #9]
    da46:	7a32      	ldrb	r2, [r6, #8]
    da48:	79f1      	ldrb	r1, [r6, #7]
    da4a:	4822      	ldr	r0, [pc, #136]	; (dad4 <m2m_wifi_init+0x10c>)
    da4c:	47a8      	blx	r5
    da4e:	200d      	movs	r0, #13
    da50:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    da52:	481b      	ldr	r0, [pc, #108]	; (dac0 <m2m_wifi_init+0xf8>)
    da54:	47a8      	blx	r5
    da56:	2304      	movs	r3, #4
    da58:	2205      	movs	r2, #5
    da5a:	2113      	movs	r1, #19
    da5c:	481e      	ldr	r0, [pc, #120]	; (dad8 <m2m_wifi_init+0x110>)
    da5e:	47a8      	blx	r5
    da60:	200d      	movs	r0, #13
    da62:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    da64:	4816      	ldr	r0, [pc, #88]	; (dac0 <m2m_wifi_init+0xf8>)
    da66:	47a8      	blx	r5
    da68:	4a1c      	ldr	r2, [pc, #112]	; (dadc <m2m_wifi_init+0x114>)
    da6a:	491d      	ldr	r1, [pc, #116]	; (dae0 <m2m_wifi_init+0x118>)
    da6c:	481d      	ldr	r0, [pc, #116]	; (dae4 <m2m_wifi_init+0x11c>)
    da6e:	47a8      	blx	r5
    da70:	200d      	movs	r0, #13
    da72:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    da74:	0023      	movs	r3, r4
    da76:	330d      	adds	r3, #13
    da78:	d1ba      	bne.n	d9f0 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    da7a:	22e8      	movs	r2, #232	; 0xe8
    da7c:	32ff      	adds	r2, #255	; 0xff
    da7e:	491a      	ldr	r1, [pc, #104]	; (dae8 <m2m_wifi_init+0x120>)
    da80:	481a      	ldr	r0, [pc, #104]	; (daec <m2m_wifi_init+0x124>)
    da82:	4b10      	ldr	r3, [pc, #64]	; (dac4 <m2m_wifi_init+0xfc>)
    da84:	4798      	blx	r3
    da86:	481a      	ldr	r0, [pc, #104]	; (daf0 <m2m_wifi_init+0x128>)
    da88:	4b1a      	ldr	r3, [pc, #104]	; (daf4 <m2m_wifi_init+0x12c>)
    da8a:	4798      	blx	r3
    da8c:	200d      	movs	r0, #13
    da8e:	4b0f      	ldr	r3, [pc, #60]	; (dacc <m2m_wifi_init+0x104>)
    da90:	4798      	blx	r3
    da92:	e7ad      	b.n	d9f0 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    da94:	2000      	movs	r0, #0
    da96:	4b18      	ldr	r3, [pc, #96]	; (daf8 <m2m_wifi_init+0x130>)
    da98:	4798      	blx	r3
    da9a:	e7a9      	b.n	d9f0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    da9c:	240c      	movs	r4, #12
    da9e:	4264      	negs	r4, r4
    daa0:	e7a6      	b.n	d9f0 <m2m_wifi_init+0x28>
    daa2:	46c0      	nop			; (mov r8, r8)
    daa4:	20000478 	.word	0x20000478
    daa8:	2000047d 	.word	0x2000047d
    daac:	0000e469 	.word	0x0000e469
    dab0:	0000d6e5 	.word	0x0000d6e5
    dab4:	0000d71d 	.word	0x0000d71d
    dab8:	0000d661 	.word	0x0000d661
    dabc:	0000e385 	.word	0x0000e385
    dac0:	00019cec 	.word	0x00019cec
    dac4:	00017b29 	.word	0x00017b29
    dac8:	00019e30 	.word	0x00019e30
    dacc:	00017b5d 	.word	0x00017b5d
    dad0:	00019e58 	.word	0x00019e58
    dad4:	00019e74 	.word	0x00019e74
    dad8:	00019e98 	.word	0x00019e98
    dadc:	00019eb0 	.word	0x00019eb0
    dae0:	00019ebc 	.word	0x00019ebc
    dae4:	00019ec8 	.word	0x00019ec8
    dae8:	00019d30 	.word	0x00019d30
    daec:	000199bc 	.word	0x000199bc
    daf0:	00019ee0 	.word	0x00019ee0
    daf4:	00017c45 	.word	0x00017c45
    daf8:	0000e53d 	.word	0x0000e53d

0000dafc <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    dafc:	b510      	push	{r4, lr}
	return hif_handle_isr();
    dafe:	4b01      	ldr	r3, [pc, #4]	; (db04 <m2m_wifi_handle_events+0x8>)
    db00:	4798      	blx	r3
}
    db02:	bd10      	pop	{r4, pc}
    db04:	0000d191 	.word	0x0000d191

0000db08 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    db08:	b5f0      	push	{r4, r5, r6, r7, lr}
    db0a:	46ce      	mov	lr, r9
    db0c:	4647      	mov	r7, r8
    db0e:	b580      	push	{r7, lr}
    db10:	b0a3      	sub	sp, #140	; 0x8c
    db12:	9005      	str	r0, [sp, #20]
    db14:	000c      	movs	r4, r1
    db16:	0015      	movs	r5, r2
    db18:	001f      	movs	r7, r3
    db1a:	ab2a      	add	r3, sp, #168	; 0xa8
    db1c:	881b      	ldrh	r3, [r3, #0]
    db1e:	4699      	mov	r9, r3
    db20:	ab2b      	add	r3, sp, #172	; 0xac
    db22:	781b      	ldrb	r3, [r3, #0]
    db24:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    db26:	2a01      	cmp	r2, #1
    db28:	d003      	beq.n	db32 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    db2a:	2f00      	cmp	r7, #0
    db2c:	d040      	beq.n	dbb0 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    db2e:	2a02      	cmp	r2, #2
    db30:	d04c      	beq.n	dbcc <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    db32:	1e63      	subs	r3, r4, #1
    db34:	2b1f      	cmp	r3, #31
    db36:	d900      	bls.n	db3a <m2m_wifi_connect_sc+0x32>
    db38:	e078      	b.n	dc2c <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    db3a:	464b      	mov	r3, r9
    db3c:	3b01      	subs	r3, #1
    db3e:	b29b      	uxth	r3, r3
    db40:	2b0d      	cmp	r3, #13
    db42:	d903      	bls.n	db4c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    db44:	464b      	mov	r3, r9
    db46:	2bff      	cmp	r3, #255	; 0xff
    db48:	d000      	beq.n	db4c <m2m_wifi_connect_sc+0x44>
    db4a:	e07e      	b.n	dc4a <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    db4c:	ae07      	add	r6, sp, #28
    db4e:	0022      	movs	r2, r4
    db50:	9905      	ldr	r1, [sp, #20]
    db52:	205a      	movs	r0, #90	; 0x5a
    db54:	ab02      	add	r3, sp, #8
    db56:	469c      	mov	ip, r3
    db58:	4460      	add	r0, ip
    db5a:	4b79      	ldr	r3, [pc, #484]	; (dd40 <m2m_wifi_connect_sc+0x238>)
    db5c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    db5e:	1934      	adds	r4, r6, r4
    db60:	3446      	adds	r4, #70	; 0x46
    db62:	2300      	movs	r3, #0
    db64:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    db66:	3344      	adds	r3, #68	; 0x44
    db68:	464a      	mov	r2, r9
    db6a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    db6c:	4643      	mov	r3, r8
    db6e:	1e5a      	subs	r2, r3, #1
    db70:	4193      	sbcs	r3, r2
    db72:	2267      	movs	r2, #103	; 0x67
    db74:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    db76:	2341      	movs	r3, #65	; 0x41
    db78:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    db7a:	2d03      	cmp	r5, #3
    db7c:	d100      	bne.n	db80 <m2m_wifi_connect_sc+0x78>
    db7e:	e072      	b.n	dc66 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    db80:	2d02      	cmp	r5, #2
    db82:	d100      	bne.n	db86 <m2m_wifi_connect_sc+0x7e>
    db84:	e0ac      	b.n	dce0 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    db86:	2d04      	cmp	r5, #4
    db88:	d100      	bne.n	db8c <m2m_wifi_connect_sc+0x84>
    db8a:	e0c4      	b.n	dd16 <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    db8c:	2d01      	cmp	r5, #1
    db8e:	d000      	beq.n	db92 <m2m_wifi_connect_sc+0x8a>
    db90:	e0c7      	b.n	dd22 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    db92:	2300      	movs	r3, #0
    db94:	9302      	str	r3, [sp, #8]
    db96:	9301      	str	r3, [sp, #4]
    db98:	9300      	str	r3, [sp, #0]
    db9a:	336c      	adds	r3, #108	; 0x6c
    db9c:	aa07      	add	r2, sp, #28
    db9e:	2128      	movs	r1, #40	; 0x28
    dba0:	2001      	movs	r0, #1
    dba2:	4c68      	ldr	r4, [pc, #416]	; (dd44 <m2m_wifi_connect_sc+0x23c>)
    dba4:	47a0      	blx	r4

ERR1:
	return ret;
}
    dba6:	b023      	add	sp, #140	; 0x8c
    dba8:	bc0c      	pop	{r2, r3}
    dbaa:	4690      	mov	r8, r2
    dbac:	4699      	mov	r9, r3
    dbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    dbb0:	4a65      	ldr	r2, [pc, #404]	; (dd48 <m2m_wifi_connect_sc+0x240>)
    dbb2:	4966      	ldr	r1, [pc, #408]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dbb4:	4866      	ldr	r0, [pc, #408]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dbb6:	4b67      	ldr	r3, [pc, #412]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dbb8:	4798      	blx	r3
    dbba:	4867      	ldr	r0, [pc, #412]	; (dd58 <m2m_wifi_connect_sc+0x250>)
    dbbc:	4b67      	ldr	r3, [pc, #412]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dbbe:	4798      	blx	r3
    dbc0:	200d      	movs	r0, #13
    dbc2:	4b67      	ldr	r3, [pc, #412]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dbc4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dbc6:	200c      	movs	r0, #12
    dbc8:	4240      	negs	r0, r0
			goto ERR1;
    dbca:	e7ec      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    dbcc:	0038      	movs	r0, r7
    dbce:	4b65      	ldr	r3, [pc, #404]	; (dd64 <m2m_wifi_connect_sc+0x25c>)
    dbd0:	4798      	blx	r3
    dbd2:	2840      	cmp	r0, #64	; 0x40
    dbd4:	d1ad      	bne.n	db32 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    dbd6:	783b      	ldrb	r3, [r7, #0]
    dbd8:	001a      	movs	r2, r3
    dbda:	3a30      	subs	r2, #48	; 0x30
    dbdc:	2a36      	cmp	r2, #54	; 0x36
    dbde:	d817      	bhi.n	dc10 <m2m_wifi_connect_sc+0x108>
    dbe0:	3a0a      	subs	r2, #10
    dbe2:	2a06      	cmp	r2, #6
    dbe4:	d914      	bls.n	dc10 <m2m_wifi_connect_sc+0x108>
    dbe6:	3b47      	subs	r3, #71	; 0x47
    dbe8:	2b19      	cmp	r3, #25
    dbea:	d911      	bls.n	dc10 <m2m_wifi_connect_sc+0x108>
    dbec:	1c7a      	adds	r2, r7, #1
    dbee:	0038      	movs	r0, r7
    dbf0:	3040      	adds	r0, #64	; 0x40
    dbf2:	7813      	ldrb	r3, [r2, #0]
    dbf4:	0019      	movs	r1, r3
    dbf6:	3930      	subs	r1, #48	; 0x30
    dbf8:	2936      	cmp	r1, #54	; 0x36
    dbfa:	d809      	bhi.n	dc10 <m2m_wifi_connect_sc+0x108>
    dbfc:	390a      	subs	r1, #10
    dbfe:	2906      	cmp	r1, #6
    dc00:	d906      	bls.n	dc10 <m2m_wifi_connect_sc+0x108>
    dc02:	3b47      	subs	r3, #71	; 0x47
    dc04:	2b19      	cmp	r3, #25
    dc06:	d903      	bls.n	dc10 <m2m_wifi_connect_sc+0x108>
    dc08:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    dc0a:	4282      	cmp	r2, r0
    dc0c:	d1f1      	bne.n	dbf2 <m2m_wifi_connect_sc+0xea>
    dc0e:	e790      	b.n	db32 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    dc10:	4a55      	ldr	r2, [pc, #340]	; (dd68 <m2m_wifi_connect_sc+0x260>)
    dc12:	494e      	ldr	r1, [pc, #312]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dc14:	484e      	ldr	r0, [pc, #312]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dc16:	4b4f      	ldr	r3, [pc, #316]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dc18:	4798      	blx	r3
    dc1a:	4854      	ldr	r0, [pc, #336]	; (dd6c <m2m_wifi_connect_sc+0x264>)
    dc1c:	4b4f      	ldr	r3, [pc, #316]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dc1e:	4798      	blx	r3
    dc20:	200d      	movs	r0, #13
    dc22:	4b4f      	ldr	r3, [pc, #316]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dc24:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    dc26:	200c      	movs	r0, #12
    dc28:	4240      	negs	r0, r0
					goto ERR1;
    dc2a:	e7bc      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    dc2c:	228c      	movs	r2, #140	; 0x8c
    dc2e:	0092      	lsls	r2, r2, #2
    dc30:	4946      	ldr	r1, [pc, #280]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dc32:	4847      	ldr	r0, [pc, #284]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dc34:	4b47      	ldr	r3, [pc, #284]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dc36:	4798      	blx	r3
    dc38:	484d      	ldr	r0, [pc, #308]	; (dd70 <m2m_wifi_connect_sc+0x268>)
    dc3a:	4b48      	ldr	r3, [pc, #288]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dc3c:	4798      	blx	r3
    dc3e:	200d      	movs	r0, #13
    dc40:	4b47      	ldr	r3, [pc, #284]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dc42:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    dc44:	200c      	movs	r0, #12
    dc46:	4240      	negs	r0, r0
		goto ERR1;
    dc48:	e7ad      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    dc4a:	4a4a      	ldr	r2, [pc, #296]	; (dd74 <m2m_wifi_connect_sc+0x26c>)
    dc4c:	493f      	ldr	r1, [pc, #252]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dc4e:	4840      	ldr	r0, [pc, #256]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dc50:	4b40      	ldr	r3, [pc, #256]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dc52:	4798      	blx	r3
    dc54:	4848      	ldr	r0, [pc, #288]	; (dd78 <m2m_wifi_connect_sc+0x270>)
    dc56:	4b41      	ldr	r3, [pc, #260]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dc58:	4798      	blx	r3
    dc5a:	200d      	movs	r0, #13
    dc5c:	4b40      	ldr	r3, [pc, #256]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dc5e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dc60:	200c      	movs	r0, #12
    dc62:	4240      	negs	r0, r0
			goto ERR1;
    dc64:	e79f      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    dc66:	783b      	ldrb	r3, [r7, #0]
    dc68:	3b01      	subs	r3, #1
    dc6a:	b2db      	uxtb	r3, r3
    dc6c:	aa07      	add	r2, sp, #28
    dc6e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    dc70:	2b03      	cmp	r3, #3
    dc72:	d817      	bhi.n	dca4 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    dc74:	787a      	ldrb	r2, [r7, #1]
    dc76:	1e51      	subs	r1, r2, #1
    dc78:	ab07      	add	r3, sp, #28
    dc7a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    dc7c:	2310      	movs	r3, #16
    dc7e:	0011      	movs	r1, r2
    dc80:	4399      	bics	r1, r3
    dc82:	290b      	cmp	r1, #11
    dc84:	d01e      	beq.n	dcc4 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    dc86:	4a3d      	ldr	r2, [pc, #244]	; (dd7c <m2m_wifi_connect_sc+0x274>)
    dc88:	4930      	ldr	r1, [pc, #192]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dc8a:	4831      	ldr	r0, [pc, #196]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dc8c:	4c31      	ldr	r4, [pc, #196]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dc8e:	47a0      	blx	r4
    dc90:	ab07      	add	r3, sp, #28
    dc92:	7859      	ldrb	r1, [r3, #1]
    dc94:	483a      	ldr	r0, [pc, #232]	; (dd80 <m2m_wifi_connect_sc+0x278>)
    dc96:	47a0      	blx	r4
    dc98:	200d      	movs	r0, #13
    dc9a:	4b31      	ldr	r3, [pc, #196]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dc9c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dc9e:	200c      	movs	r0, #12
    dca0:	4240      	negs	r0, r0
			goto ERR1;
    dca2:	e780      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    dca4:	2294      	movs	r2, #148	; 0x94
    dca6:	0092      	lsls	r2, r2, #2
    dca8:	4928      	ldr	r1, [pc, #160]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dcaa:	4829      	ldr	r0, [pc, #164]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dcac:	4c29      	ldr	r4, [pc, #164]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dcae:	47a0      	blx	r4
    dcb0:	ab07      	add	r3, sp, #28
    dcb2:	7819      	ldrb	r1, [r3, #0]
    dcb4:	4833      	ldr	r0, [pc, #204]	; (dd84 <m2m_wifi_connect_sc+0x27c>)
    dcb6:	47a0      	blx	r4
    dcb8:	200d      	movs	r0, #13
    dcba:	4b29      	ldr	r3, [pc, #164]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dcbc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dcbe:	200c      	movs	r0, #12
    dcc0:	4240      	negs	r0, r0
			goto ERR1;
    dcc2:	e770      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    dcc4:	1cb9      	adds	r1, r7, #2
    dcc6:	2016      	movs	r0, #22
    dcc8:	ab02      	add	r3, sp, #8
    dcca:	469c      	mov	ip, r3
    dccc:	4460      	add	r0, ip
    dcce:	4b1c      	ldr	r3, [pc, #112]	; (dd40 <m2m_wifi_connect_sc+0x238>)
    dcd0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    dcd2:	787b      	ldrb	r3, [r7, #1]
    dcd4:	aa07      	add	r2, sp, #28
    dcd6:	4694      	mov	ip, r2
    dcd8:	4463      	add	r3, ip
    dcda:	2200      	movs	r2, #0
    dcdc:	709a      	strb	r2, [r3, #2]
    dcde:	e758      	b.n	db92 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    dce0:	0038      	movs	r0, r7
    dce2:	4b20      	ldr	r3, [pc, #128]	; (dd64 <m2m_wifi_connect_sc+0x25c>)
    dce4:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    dce6:	1e43      	subs	r3, r0, #1
    dce8:	b29b      	uxth	r3, r3
    dcea:	2b3f      	cmp	r3, #63	; 0x3f
    dcec:	d805      	bhi.n	dcfa <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    dcee:	1c42      	adds	r2, r0, #1
    dcf0:	0039      	movs	r1, r7
    dcf2:	a807      	add	r0, sp, #28
    dcf4:	4b12      	ldr	r3, [pc, #72]	; (dd40 <m2m_wifi_connect_sc+0x238>)
    dcf6:	4798      	blx	r3
    dcf8:	e74b      	b.n	db92 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    dcfa:	4a23      	ldr	r2, [pc, #140]	; (dd88 <m2m_wifi_connect_sc+0x280>)
    dcfc:	4913      	ldr	r1, [pc, #76]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dcfe:	4814      	ldr	r0, [pc, #80]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dd00:	4b14      	ldr	r3, [pc, #80]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dd02:	4798      	blx	r3
    dd04:	4821      	ldr	r0, [pc, #132]	; (dd8c <m2m_wifi_connect_sc+0x284>)
    dd06:	4b15      	ldr	r3, [pc, #84]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dd08:	4798      	blx	r3
    dd0a:	200d      	movs	r0, #13
    dd0c:	4b14      	ldr	r3, [pc, #80]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dd0e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dd10:	200c      	movs	r0, #12
    dd12:	4240      	negs	r0, r0
			goto ERR1;
    dd14:	e747      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    dd16:	223e      	movs	r2, #62	; 0x3e
    dd18:	0039      	movs	r1, r7
    dd1a:	a807      	add	r0, sp, #28
    dd1c:	4b08      	ldr	r3, [pc, #32]	; (dd40 <m2m_wifi_connect_sc+0x238>)
    dd1e:	4798      	blx	r3
    dd20:	e737      	b.n	db92 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    dd22:	4a1b      	ldr	r2, [pc, #108]	; (dd90 <m2m_wifi_connect_sc+0x288>)
    dd24:	4909      	ldr	r1, [pc, #36]	; (dd4c <m2m_wifi_connect_sc+0x244>)
    dd26:	480a      	ldr	r0, [pc, #40]	; (dd50 <m2m_wifi_connect_sc+0x248>)
    dd28:	4b0a      	ldr	r3, [pc, #40]	; (dd54 <m2m_wifi_connect_sc+0x24c>)
    dd2a:	4798      	blx	r3
    dd2c:	4819      	ldr	r0, [pc, #100]	; (dd94 <m2m_wifi_connect_sc+0x28c>)
    dd2e:	4b0b      	ldr	r3, [pc, #44]	; (dd5c <m2m_wifi_connect_sc+0x254>)
    dd30:	4798      	blx	r3
    dd32:	200d      	movs	r0, #13
    dd34:	4b0a      	ldr	r3, [pc, #40]	; (dd60 <m2m_wifi_connect_sc+0x258>)
    dd36:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    dd38:	200c      	movs	r0, #12
    dd3a:	4240      	negs	r0, r0
		goto ERR1;
    dd3c:	e733      	b.n	dba6 <m2m_wifi_connect_sc+0x9e>
    dd3e:	46c0      	nop			; (mov r8, r8)
    dd40:	0000ce39 	.word	0x0000ce39
    dd44:	0000cf61 	.word	0x0000cf61
    dd48:	0000021a 	.word	0x0000021a
    dd4c:	00019d40 	.word	0x00019d40
    dd50:	000199bc 	.word	0x000199bc
    dd54:	00017b29 	.word	0x00017b29
    dd58:	00019d88 	.word	0x00019d88
    dd5c:	00017c45 	.word	0x00017c45
    dd60:	00017b5d 	.word	0x00017b5d
    dd64:	0000ce5d 	.word	0x0000ce5d
    dd68:	00000226 	.word	0x00000226
    dd6c:	00019d9c 	.word	0x00019d9c
    dd70:	00019da8 	.word	0x00019da8
    dd74:	00000239 	.word	0x00000239
    dd78:	00019dbc 	.word	0x00019dbc
    dd7c:	00000257 	.word	0x00000257
    dd80:	00019de4 	.word	0x00019de4
    dd84:	00019dc8 	.word	0x00019dc8
    dd88:	00000266 	.word	0x00000266
    dd8c:	00019e00 	.word	0x00019e00
    dd90:	00000276 	.word	0x00000276
    dd94:	00019e1c 	.word	0x00019e1c

0000dd98 <m2m_wifi_connect>:
{
    dd98:	b530      	push	{r4, r5, lr}
    dd9a:	b083      	sub	sp, #12
    dd9c:	ac06      	add	r4, sp, #24
    dd9e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    dda0:	2500      	movs	r5, #0
    dda2:	9501      	str	r5, [sp, #4]
    dda4:	9400      	str	r4, [sp, #0]
    dda6:	4c02      	ldr	r4, [pc, #8]	; (ddb0 <m2m_wifi_connect+0x18>)
    dda8:	47a0      	blx	r4
}
    ddaa:	b003      	add	sp, #12
    ddac:	bd30      	pop	{r4, r5, pc}
    ddae:	46c0      	nop			; (mov r8, r8)
    ddb0:	0000db09 	.word	0x0000db09

0000ddb4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    ddb4:	2000      	movs	r0, #0
    ddb6:	4770      	bx	lr

0000ddb8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    ddb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddba:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    ddbc:	2580      	movs	r5, #128	; 0x80
    ddbe:	006d      	lsls	r5, r5, #1
    ddc0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    ddc2:	24a5      	movs	r4, #165	; 0xa5
    ddc4:	0164      	lsls	r4, r4, #5
    ddc6:	4f08      	ldr	r7, [pc, #32]	; (dde8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    ddc8:	4e08      	ldr	r6, [pc, #32]	; (ddec <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    ddca:	0029      	movs	r1, r5
    ddcc:	0020      	movs	r0, r4
    ddce:	47b8      	blx	r7
			uint32 reg = 0;
    ddd0:	2300      	movs	r3, #0
    ddd2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    ddd4:	a901      	add	r1, sp, #4
    ddd6:	0020      	movs	r0, r4
    ddd8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    ddda:	2800      	cmp	r0, #0
    dddc:	d1f5      	bne.n	ddca <chip_apply_conf+0x12>
				if(reg == val32)
    ddde:	9b01      	ldr	r3, [sp, #4]
    dde0:	429d      	cmp	r5, r3
    dde2:	d1f2      	bne.n	ddca <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    dde4:	b003      	add	sp, #12
    dde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dde8:	0000e2a9 	.word	0x0000e2a9
    ddec:	0000e29d 	.word	0x0000e29d

0000ddf0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    ddf0:	b500      	push	{lr}
    ddf2:	b083      	sub	sp, #12
	uint32 reg = 0;
    ddf4:	2300      	movs	r3, #0
    ddf6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    ddf8:	a901      	add	r1, sp, #4
    ddfa:	4811      	ldr	r0, [pc, #68]	; (de40 <enable_interrupts+0x50>)
    ddfc:	4b11      	ldr	r3, [pc, #68]	; (de44 <enable_interrupts+0x54>)
    ddfe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    de00:	2800      	cmp	r0, #0
    de02:	d001      	beq.n	de08 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    de04:	b003      	add	sp, #12
    de06:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    de08:	2180      	movs	r1, #128	; 0x80
    de0a:	0049      	lsls	r1, r1, #1
    de0c:	9b01      	ldr	r3, [sp, #4]
    de0e:	4319      	orrs	r1, r3
    de10:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    de12:	480b      	ldr	r0, [pc, #44]	; (de40 <enable_interrupts+0x50>)
    de14:	4b0c      	ldr	r3, [pc, #48]	; (de48 <enable_interrupts+0x58>)
    de16:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    de18:	2800      	cmp	r0, #0
    de1a:	d1f3      	bne.n	de04 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    de1c:	a901      	add	r1, sp, #4
    de1e:	20d0      	movs	r0, #208	; 0xd0
    de20:	0140      	lsls	r0, r0, #5
    de22:	4b08      	ldr	r3, [pc, #32]	; (de44 <enable_interrupts+0x54>)
    de24:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    de26:	2800      	cmp	r0, #0
    de28:	d1ec      	bne.n	de04 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    de2a:	2180      	movs	r1, #128	; 0x80
    de2c:	0249      	lsls	r1, r1, #9
    de2e:	9b01      	ldr	r3, [sp, #4]
    de30:	4319      	orrs	r1, r3
    de32:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    de34:	20d0      	movs	r0, #208	; 0xd0
    de36:	0140      	lsls	r0, r0, #5
    de38:	4b03      	ldr	r3, [pc, #12]	; (de48 <enable_interrupts+0x58>)
    de3a:	4798      	blx	r3
    de3c:	e7e2      	b.n	de04 <enable_interrupts+0x14>
    de3e:	46c0      	nop			; (mov r8, r8)
    de40:	00001408 	.word	0x00001408
    de44:	0000e29d 	.word	0x0000e29d
    de48:	0000e2a9 	.word	0x0000e2a9

0000de4c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    de4c:	b510      	push	{r4, lr}
    de4e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    de50:	4b28      	ldr	r3, [pc, #160]	; (def4 <nmi_get_chipid+0xa8>)
    de52:	681c      	ldr	r4, [r3, #0]
    de54:	2c00      	cmp	r4, #0
    de56:	d004      	beq.n	de62 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    de58:	4b26      	ldr	r3, [pc, #152]	; (def4 <nmi_get_chipid+0xa8>)
    de5a:	681c      	ldr	r4, [r3, #0]
}
    de5c:	0020      	movs	r0, r4
    de5e:	b002      	add	sp, #8
    de60:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    de62:	0019      	movs	r1, r3
    de64:	2080      	movs	r0, #128	; 0x80
    de66:	0140      	lsls	r0, r0, #5
    de68:	4b23      	ldr	r3, [pc, #140]	; (def8 <nmi_get_chipid+0xac>)
    de6a:	4798      	blx	r3
    de6c:	2800      	cmp	r0, #0
    de6e:	d003      	beq.n	de78 <nmi_get_chipid+0x2c>
			chipid = 0;
    de70:	2200      	movs	r2, #0
    de72:	4b20      	ldr	r3, [pc, #128]	; (def4 <nmi_get_chipid+0xa8>)
    de74:	601a      	str	r2, [r3, #0]
			return 0;
    de76:	e7f1      	b.n	de5c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    de78:	a901      	add	r1, sp, #4
    de7a:	4820      	ldr	r0, [pc, #128]	; (defc <nmi_get_chipid+0xb0>)
    de7c:	4b1e      	ldr	r3, [pc, #120]	; (def8 <nmi_get_chipid+0xac>)
    de7e:	4798      	blx	r3
    de80:	2800      	cmp	r0, #0
    de82:	d003      	beq.n	de8c <nmi_get_chipid+0x40>
			chipid = 0;
    de84:	2200      	movs	r2, #0
    de86:	4b1b      	ldr	r3, [pc, #108]	; (def4 <nmi_get_chipid+0xa8>)
    de88:	601a      	str	r2, [r3, #0]
			return 0;
    de8a:	e7e7      	b.n	de5c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    de8c:	4b19      	ldr	r3, [pc, #100]	; (def4 <nmi_get_chipid+0xa8>)
    de8e:	681b      	ldr	r3, [r3, #0]
    de90:	4a1b      	ldr	r2, [pc, #108]	; (df00 <nmi_get_chipid+0xb4>)
    de92:	4293      	cmp	r3, r2
    de94:	d00e      	beq.n	deb4 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    de96:	4a1b      	ldr	r2, [pc, #108]	; (df04 <nmi_get_chipid+0xb8>)
    de98:	4293      	cmp	r3, r2
    de9a:	d012      	beq.n	dec2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    de9c:	4a1a      	ldr	r2, [pc, #104]	; (df08 <nmi_get_chipid+0xbc>)
    de9e:	4293      	cmp	r3, r2
    dea0:	d01c      	beq.n	dedc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    dea2:	4914      	ldr	r1, [pc, #80]	; (def4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    dea4:	4a19      	ldr	r2, [pc, #100]	; (df0c <nmi_get_chipid+0xc0>)
    dea6:	680b      	ldr	r3, [r1, #0]
    dea8:	401a      	ands	r2, r3
		chipid |= 0x050000;
    deaa:	23a0      	movs	r3, #160	; 0xa0
    deac:	02db      	lsls	r3, r3, #11
    deae:	4313      	orrs	r3, r2
    deb0:	600b      	str	r3, [r1, #0]
    deb2:	e7d1      	b.n	de58 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    deb4:	9b01      	ldr	r3, [sp, #4]
    deb6:	2b01      	cmp	r3, #1
    deb8:	d0f3      	beq.n	dea2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    deba:	4a15      	ldr	r2, [pc, #84]	; (df10 <nmi_get_chipid+0xc4>)
    debc:	4b0d      	ldr	r3, [pc, #52]	; (def4 <nmi_get_chipid+0xa8>)
    debe:	601a      	str	r2, [r3, #0]
    dec0:	e7ef      	b.n	dea2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    dec2:	9b01      	ldr	r3, [sp, #4]
    dec4:	2b03      	cmp	r3, #3
    dec6:	d0ec      	beq.n	dea2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    dec8:	2b04      	cmp	r3, #4
    deca:	d003      	beq.n	ded4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    decc:	4a11      	ldr	r2, [pc, #68]	; (df14 <nmi_get_chipid+0xc8>)
    dece:	4b09      	ldr	r3, [pc, #36]	; (def4 <nmi_get_chipid+0xa8>)
    ded0:	601a      	str	r2, [r3, #0]
    ded2:	e7e6      	b.n	dea2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    ded4:	4a10      	ldr	r2, [pc, #64]	; (df18 <nmi_get_chipid+0xcc>)
    ded6:	4b07      	ldr	r3, [pc, #28]	; (def4 <nmi_get_chipid+0xa8>)
    ded8:	601a      	str	r2, [r3, #0]
    deda:	e7e2      	b.n	dea2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    dedc:	4905      	ldr	r1, [pc, #20]	; (def4 <nmi_get_chipid+0xa8>)
    dede:	20ec      	movs	r0, #236	; 0xec
    dee0:	0380      	lsls	r0, r0, #14
    dee2:	4b05      	ldr	r3, [pc, #20]	; (def8 <nmi_get_chipid+0xac>)
    dee4:	4798      	blx	r3
    dee6:	2800      	cmp	r0, #0
    dee8:	d0db      	beq.n	dea2 <nmi_get_chipid+0x56>
			chipid = 0;
    deea:	2200      	movs	r2, #0
    deec:	4b01      	ldr	r3, [pc, #4]	; (def4 <nmi_get_chipid+0xa8>)
    deee:	601a      	str	r2, [r3, #0]
			return 0;
    def0:	e7b4      	b.n	de5c <nmi_get_chipid+0x10>
    def2:	46c0      	nop			; (mov r8, r8)
    def4:	20000480 	.word	0x20000480
    def8:	0000e29d 	.word	0x0000e29d
    defc:	000013f4 	.word	0x000013f4
    df00:	001002a0 	.word	0x001002a0
    df04:	001002b0 	.word	0x001002b0
    df08:	001000f0 	.word	0x001000f0
    df0c:	fff0ffff 	.word	0xfff0ffff
    df10:	001002a1 	.word	0x001002a1
    df14:	001002b2 	.word	0x001002b2
    df18:	001002b1 	.word	0x001002b1

0000df1c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    df1c:	b530      	push	{r4, r5, lr}
    df1e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    df20:	4c16      	ldr	r4, [pc, #88]	; (df7c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    df22:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    df24:	a901      	add	r1, sp, #4
    df26:	2010      	movs	r0, #16
    df28:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    df2a:	2800      	cmp	r0, #0
    df2c:	d11c      	bne.n	df68 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    df2e:	9b01      	ldr	r3, [sp, #4]
    df30:	422b      	tst	r3, r5
    df32:	d1f7      	bne.n	df24 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    df34:	a901      	add	r1, sp, #4
    df36:	3001      	adds	r0, #1
    df38:	4b10      	ldr	r3, [pc, #64]	; (df7c <chip_sleep+0x60>)
    df3a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    df3c:	2800      	cmp	r0, #0
    df3e:	d113      	bne.n	df68 <chip_sleep+0x4c>
	if(reg & NBIT1)
    df40:	9901      	ldr	r1, [sp, #4]
    df42:	078b      	lsls	r3, r1, #30
    df44:	d507      	bpl.n	df56 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    df46:	2302      	movs	r3, #2
    df48:	4399      	bics	r1, r3
    df4a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    df4c:	3001      	adds	r0, #1
    df4e:	4b0c      	ldr	r3, [pc, #48]	; (df80 <chip_sleep+0x64>)
    df50:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    df52:	2800      	cmp	r0, #0
    df54:	d108      	bne.n	df68 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    df56:	a901      	add	r1, sp, #4
    df58:	200b      	movs	r0, #11
    df5a:	4b08      	ldr	r3, [pc, #32]	; (df7c <chip_sleep+0x60>)
    df5c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    df5e:	2800      	cmp	r0, #0
    df60:	d102      	bne.n	df68 <chip_sleep+0x4c>
	if(reg & NBIT0)
    df62:	9901      	ldr	r1, [sp, #4]
    df64:	07cb      	lsls	r3, r1, #31
    df66:	d401      	bmi.n	df6c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    df68:	b003      	add	sp, #12
    df6a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    df6c:	2301      	movs	r3, #1
    df6e:	4399      	bics	r1, r3
    df70:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    df72:	300b      	adds	r0, #11
    df74:	4b02      	ldr	r3, [pc, #8]	; (df80 <chip_sleep+0x64>)
    df76:	4798      	blx	r3
    df78:	e7f6      	b.n	df68 <chip_sleep+0x4c>
    df7a:	46c0      	nop			; (mov r8, r8)
    df7c:	0000e29d 	.word	0x0000e29d
    df80:	0000e2a9 	.word	0x0000e2a9

0000df84 <chip_wake>:
sint8 chip_wake(void)
{
    df84:	b5f0      	push	{r4, r5, r6, r7, lr}
    df86:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    df88:	2300      	movs	r3, #0
    df8a:	9301      	str	r3, [sp, #4]
    df8c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    df8e:	a901      	add	r1, sp, #4
    df90:	200b      	movs	r0, #11
    df92:	4b28      	ldr	r3, [pc, #160]	; (e034 <chip_wake+0xb0>)
    df94:	4798      	blx	r3
    df96:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    df98:	d130      	bne.n	dffc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    df9a:	9901      	ldr	r1, [sp, #4]
    df9c:	07cb      	lsls	r3, r1, #31
    df9e:	d406      	bmi.n	dfae <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    dfa0:	2301      	movs	r3, #1
    dfa2:	4319      	orrs	r1, r3
    dfa4:	200b      	movs	r0, #11
    dfa6:	4b24      	ldr	r3, [pc, #144]	; (e038 <chip_wake+0xb4>)
    dfa8:	4798      	blx	r3
    dfaa:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dfac:	d126      	bne.n	dffc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    dfae:	a901      	add	r1, sp, #4
    dfb0:	2001      	movs	r0, #1
    dfb2:	4b20      	ldr	r3, [pc, #128]	; (e034 <chip_wake+0xb0>)
    dfb4:	4798      	blx	r3
    dfb6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dfb8:	d120      	bne.n	dffc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    dfba:	9901      	ldr	r1, [sp, #4]
    dfbc:	078b      	lsls	r3, r1, #30
    dfbe:	d520      	bpl.n	e002 <chip_wake+0x7e>
{
    dfc0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    dfc2:	4f1c      	ldr	r7, [pc, #112]	; (e034 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    dfc4:	4e1d      	ldr	r6, [pc, #116]	; (e03c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    dfc6:	4669      	mov	r1, sp
    dfc8:	200f      	movs	r0, #15
    dfca:	47b8      	blx	r7
    dfcc:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    dfce:	d120      	bne.n	e012 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    dfd0:	9b00      	ldr	r3, [sp, #0]
    dfd2:	075b      	lsls	r3, r3, #29
    dfd4:	d42b      	bmi.n	e02e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    dfd6:	2002      	movs	r0, #2
    dfd8:	47b0      	blx	r6
    dfda:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    dfdc:	2d00      	cmp	r5, #0
    dfde:	d1f2      	bne.n	dfc6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    dfe0:	22ad      	movs	r2, #173	; 0xad
    dfe2:	0052      	lsls	r2, r2, #1
    dfe4:	4916      	ldr	r1, [pc, #88]	; (e040 <chip_wake+0xbc>)
    dfe6:	4817      	ldr	r0, [pc, #92]	; (e044 <chip_wake+0xc0>)
    dfe8:	4b17      	ldr	r3, [pc, #92]	; (e048 <chip_wake+0xc4>)
    dfea:	4798      	blx	r3
    dfec:	4817      	ldr	r0, [pc, #92]	; (e04c <chip_wake+0xc8>)
    dfee:	4b18      	ldr	r3, [pc, #96]	; (e050 <chip_wake+0xcc>)
    dff0:	4798      	blx	r3
    dff2:	200d      	movs	r0, #13
    dff4:	4b17      	ldr	r3, [pc, #92]	; (e054 <chip_wake+0xd0>)
    dff6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    dff8:	2404      	movs	r4, #4
    dffa:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    dffc:	0020      	movs	r0, r4
    dffe:	b003      	add	sp, #12
    e000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    e002:	2302      	movs	r3, #2
    e004:	4319      	orrs	r1, r3
    e006:	2001      	movs	r0, #1
    e008:	4b0b      	ldr	r3, [pc, #44]	; (e038 <chip_wake+0xb4>)
    e00a:	4798      	blx	r3
    e00c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    e00e:	d0d7      	beq.n	dfc0 <chip_wake+0x3c>
    e010:	e7f4      	b.n	dffc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    e012:	22a8      	movs	r2, #168	; 0xa8
    e014:	0052      	lsls	r2, r2, #1
    e016:	490a      	ldr	r1, [pc, #40]	; (e040 <chip_wake+0xbc>)
    e018:	480a      	ldr	r0, [pc, #40]	; (e044 <chip_wake+0xc0>)
    e01a:	4d0b      	ldr	r5, [pc, #44]	; (e048 <chip_wake+0xc4>)
    e01c:	47a8      	blx	r5
    e01e:	9a00      	ldr	r2, [sp, #0]
    e020:	0021      	movs	r1, r4
    e022:	480d      	ldr	r0, [pc, #52]	; (e058 <chip_wake+0xd4>)
    e024:	47a8      	blx	r5
    e026:	200d      	movs	r0, #13
    e028:	4b0a      	ldr	r3, [pc, #40]	; (e054 <chip_wake+0xd0>)
    e02a:	4798      	blx	r3
			goto _WAKE_EXIT;
    e02c:	e7e6      	b.n	dffc <chip_wake+0x78>
	nm_bus_reset();
    e02e:	4b0b      	ldr	r3, [pc, #44]	; (e05c <chip_wake+0xd8>)
    e030:	4798      	blx	r3
    e032:	e7e3      	b.n	dffc <chip_wake+0x78>
    e034:	0000e29d 	.word	0x0000e29d
    e038:	0000e2a9 	.word	0x0000e2a9
    e03c:	0000cac1 	.word	0x0000cac1
    e040:	00019efc 	.word	0x00019efc
    e044:	000199bc 	.word	0x000199bc
    e048:	00017b29 	.word	0x00017b29
    e04c:	00019f44 	.word	0x00019f44
    e050:	00017c45 	.word	0x00017c45
    e054:	00017b5d 	.word	0x00017b5d
    e058:	00019f2c 	.word	0x00019f2c
    e05c:	0000e285 	.word	0x0000e285

0000e060 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e062:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    e064:	4d2d      	ldr	r5, [pc, #180]	; (e11c <wait_for_bootrom+0xbc>)
    e066:	4c2e      	ldr	r4, [pc, #184]	; (e120 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    e068:	4e2e      	ldr	r6, [pc, #184]	; (e124 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    e06a:	0028      	movs	r0, r5
    e06c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    e06e:	2800      	cmp	r0, #0
    e070:	db02      	blt.n	e078 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    e072:	2001      	movs	r0, #1
    e074:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    e076:	e7f8      	b.n	e06a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    e078:	482b      	ldr	r0, [pc, #172]	; (e128 <wait_for_bootrom+0xc8>)
    e07a:	4b29      	ldr	r3, [pc, #164]	; (e120 <wait_for_bootrom+0xc0>)
    e07c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    e07e:	07c3      	lsls	r3, r0, #31
    e080:	d409      	bmi.n	e096 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    e082:	4e28      	ldr	r6, [pc, #160]	; (e124 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    e084:	4c29      	ldr	r4, [pc, #164]	; (e12c <wait_for_bootrom+0xcc>)
    e086:	4d26      	ldr	r5, [pc, #152]	; (e120 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    e088:	2001      	movs	r0, #1
    e08a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    e08c:	0020      	movs	r0, r4
    e08e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    e090:	4b27      	ldr	r3, [pc, #156]	; (e130 <wait_for_bootrom+0xd0>)
    e092:	4298      	cmp	r0, r3
    e094:	d1f8      	bne.n	e088 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    e096:	2f02      	cmp	r7, #2
    e098:	d021      	beq.n	e0de <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    e09a:	2f03      	cmp	r7, #3
    e09c:	d029      	beq.n	e0f2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    e09e:	2f04      	cmp	r7, #4
    e0a0:	d030      	beq.n	e104 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    e0a2:	4924      	ldr	r1, [pc, #144]	; (e134 <wait_for_bootrom+0xd4>)
    e0a4:	4824      	ldr	r0, [pc, #144]	; (e138 <wait_for_bootrom+0xd8>)
    e0a6:	4b25      	ldr	r3, [pc, #148]	; (e13c <wait_for_bootrom+0xdc>)
    e0a8:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    e0aa:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    e0ac:	4b24      	ldr	r3, [pc, #144]	; (e140 <wait_for_bootrom+0xe0>)
    e0ae:	4798      	blx	r3
    e0b0:	0500      	lsls	r0, r0, #20
    e0b2:	0d00      	lsrs	r0, r0, #20
    e0b4:	4b23      	ldr	r3, [pc, #140]	; (e144 <wait_for_bootrom+0xe4>)
    e0b6:	4298      	cmp	r0, r3
    e0b8:	d82a      	bhi.n	e110 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    e0ba:	0020      	movs	r0, r4
    e0bc:	4b22      	ldr	r3, [pc, #136]	; (e148 <wait_for_bootrom+0xe8>)
    e0be:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    e0c0:	4822      	ldr	r0, [pc, #136]	; (e14c <wait_for_bootrom+0xec>)
    e0c2:	4c23      	ldr	r4, [pc, #140]	; (e150 <wait_for_bootrom+0xf0>)
    e0c4:	47a0      	blx	r4
    e0c6:	491b      	ldr	r1, [pc, #108]	; (e134 <wait_for_bootrom+0xd4>)
    e0c8:	4822      	ldr	r0, [pc, #136]	; (e154 <wait_for_bootrom+0xf4>)
    e0ca:	47a0      	blx	r4
    e0cc:	200d      	movs	r0, #13
    e0ce:	4b22      	ldr	r3, [pc, #136]	; (e158 <wait_for_bootrom+0xf8>)
    e0d0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    e0d2:	4922      	ldr	r1, [pc, #136]	; (e15c <wait_for_bootrom+0xfc>)
    e0d4:	4815      	ldr	r0, [pc, #84]	; (e12c <wait_for_bootrom+0xcc>)
    e0d6:	4b19      	ldr	r3, [pc, #100]	; (e13c <wait_for_bootrom+0xdc>)
    e0d8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    e0da:	2000      	movs	r0, #0
    e0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    e0de:	4920      	ldr	r1, [pc, #128]	; (e160 <wait_for_bootrom+0x100>)
    e0e0:	4820      	ldr	r0, [pc, #128]	; (e164 <wait_for_bootrom+0x104>)
    e0e2:	4c16      	ldr	r4, [pc, #88]	; (e13c <wait_for_bootrom+0xdc>)
    e0e4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    e0e6:	2180      	movs	r1, #128	; 0x80
    e0e8:	0349      	lsls	r1, r1, #13
    e0ea:	4813      	ldr	r0, [pc, #76]	; (e138 <wait_for_bootrom+0xd8>)
    e0ec:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    e0ee:	2400      	movs	r4, #0
    e0f0:	e7dc      	b.n	e0ac <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    e0f2:	491b      	ldr	r1, [pc, #108]	; (e160 <wait_for_bootrom+0x100>)
    e0f4:	481b      	ldr	r0, [pc, #108]	; (e164 <wait_for_bootrom+0x104>)
    e0f6:	4c11      	ldr	r4, [pc, #68]	; (e13c <wait_for_bootrom+0xdc>)
    e0f8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    e0fa:	2100      	movs	r1, #0
    e0fc:	480e      	ldr	r0, [pc, #56]	; (e138 <wait_for_bootrom+0xd8>)
    e0fe:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    e100:	2400      	movs	r4, #0
    e102:	e7d3      	b.n	e0ac <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    e104:	490b      	ldr	r1, [pc, #44]	; (e134 <wait_for_bootrom+0xd4>)
    e106:	480c      	ldr	r0, [pc, #48]	; (e138 <wait_for_bootrom+0xd8>)
    e108:	4b0c      	ldr	r3, [pc, #48]	; (e13c <wait_for_bootrom+0xdc>)
    e10a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    e10c:	2480      	movs	r4, #128	; 0x80
    e10e:	e7cd      	b.n	e0ac <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    e110:	2002      	movs	r0, #2
    e112:	4320      	orrs	r0, r4
    e114:	4b0c      	ldr	r3, [pc, #48]	; (e148 <wait_for_bootrom+0xe8>)
    e116:	4798      	blx	r3
    e118:	e7d2      	b.n	e0c0 <wait_for_bootrom+0x60>
    e11a:	46c0      	nop			; (mov r8, r8)
    e11c:	00001014 	.word	0x00001014
    e120:	0000e291 	.word	0x0000e291
    e124:	0000cac1 	.word	0x0000cac1
    e128:	000207bc 	.word	0x000207bc
    e12c:	000c000c 	.word	0x000c000c
    e130:	10add09e 	.word	0x10add09e
    e134:	13301354 	.word	0x13301354
    e138:	0000108c 	.word	0x0000108c
    e13c:	0000e2a9 	.word	0x0000e2a9
    e140:	0000de4d 	.word	0x0000de4d
    e144:	0000039f 	.word	0x0000039f
    e148:	0000ddb9 	.word	0x0000ddb9
    e14c:	00019cec 	.word	0x00019cec
    e150:	00017b29 	.word	0x00017b29
    e154:	00019f60 	.word	0x00019f60
    e158:	00017b5d 	.word	0x00017b5d
    e15c:	ef522f61 	.word	0xef522f61
    e160:	3c1cd57d 	.word	0x3c1cd57d
    e164:	000207ac 	.word	0x000207ac

0000e168 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    e168:	b570      	push	{r4, r5, r6, lr}
    e16a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    e16c:	4b15      	ldr	r3, [pc, #84]	; (e1c4 <wait_for_firmware_start+0x5c>)
    e16e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    e170:	4b15      	ldr	r3, [pc, #84]	; (e1c8 <wait_for_firmware_start+0x60>)
    e172:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    e174:	3802      	subs	r0, #2
    e176:	2801      	cmp	r0, #1
    e178:	d911      	bls.n	e19e <wait_for_firmware_start+0x36>
{
    e17a:	2401      	movs	r4, #1
    e17c:	4264      	negs	r4, r4
    e17e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    e180:	4e12      	ldr	r6, [pc, #72]	; (e1cc <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    e182:	4d13      	ldr	r5, [pc, #76]	; (e1d0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    e184:	9b00      	ldr	r3, [sp, #0]
    e186:	4298      	cmp	r0, r3
    e188:	d00e      	beq.n	e1a8 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    e18a:	2002      	movs	r0, #2
    e18c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    e18e:	9801      	ldr	r0, [sp, #4]
    e190:	47a8      	blx	r5
    e192:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    e194:	2c00      	cmp	r4, #0
    e196:	d1f5      	bne.n	e184 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    e198:	2005      	movs	r0, #5
    e19a:	4240      	negs	r0, r0
    e19c:	e009      	b.n	e1b2 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    e19e:	4b0d      	ldr	r3, [pc, #52]	; (e1d4 <wait_for_firmware_start+0x6c>)
    e1a0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    e1a2:	4b0d      	ldr	r3, [pc, #52]	; (e1d8 <wait_for_firmware_start+0x70>)
    e1a4:	9300      	str	r3, [sp, #0]
    e1a6:	e7e8      	b.n	e17a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    e1a8:	9a00      	ldr	r2, [sp, #0]
    e1aa:	4b07      	ldr	r3, [pc, #28]	; (e1c8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    e1ac:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    e1ae:	429a      	cmp	r2, r3
    e1b0:	d001      	beq.n	e1b6 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    e1b2:	b002      	add	sp, #8
    e1b4:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    e1b6:	2100      	movs	r1, #0
    e1b8:	4802      	ldr	r0, [pc, #8]	; (e1c4 <wait_for_firmware_start+0x5c>)
    e1ba:	4b08      	ldr	r3, [pc, #32]	; (e1dc <wait_for_firmware_start+0x74>)
    e1bc:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    e1be:	2000      	movs	r0, #0
    e1c0:	e7f7      	b.n	e1b2 <wait_for_firmware_start+0x4a>
    e1c2:	46c0      	nop			; (mov r8, r8)
    e1c4:	0000108c 	.word	0x0000108c
    e1c8:	02532636 	.word	0x02532636
    e1cc:	0000cac1 	.word	0x0000cac1
    e1d0:	0000e291 	.word	0x0000e291
    e1d4:	000207ac 	.word	0x000207ac
    e1d8:	d75dc1c3 	.word	0xd75dc1c3
    e1dc:	0000e2a9 	.word	0x0000e2a9

0000e1e0 <chip_deinit>:

sint8 chip_deinit(void)
{
    e1e0:	b510      	push	{r4, lr}
    e1e2:	b082      	sub	sp, #8
	uint32 reg = 0;
    e1e4:	2300      	movs	r3, #0
    e1e6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    e1e8:	a901      	add	r1, sp, #4
    e1ea:	20a0      	movs	r0, #160	; 0xa0
    e1ec:	0140      	lsls	r0, r0, #5
    e1ee:	4b14      	ldr	r3, [pc, #80]	; (e240 <chip_deinit+0x60>)
    e1f0:	4798      	blx	r3
    e1f2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    e1f4:	d115      	bne.n	e222 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    e1f6:	4913      	ldr	r1, [pc, #76]	; (e244 <chip_deinit+0x64>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	4019      	ands	r1, r3
    e1fc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    e1fe:	20a0      	movs	r0, #160	; 0xa0
    e200:	0140      	lsls	r0, r0, #5
    e202:	4b11      	ldr	r3, [pc, #68]	; (e248 <chip_deinit+0x68>)
    e204:	4798      	blx	r3
    e206:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    e208:	d016      	beq.n	e238 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    e20a:	4a10      	ldr	r2, [pc, #64]	; (e24c <chip_deinit+0x6c>)
    e20c:	4910      	ldr	r1, [pc, #64]	; (e250 <chip_deinit+0x70>)
    e20e:	4811      	ldr	r0, [pc, #68]	; (e254 <chip_deinit+0x74>)
    e210:	4b11      	ldr	r3, [pc, #68]	; (e258 <chip_deinit+0x78>)
    e212:	4798      	blx	r3
    e214:	4811      	ldr	r0, [pc, #68]	; (e25c <chip_deinit+0x7c>)
    e216:	4b12      	ldr	r3, [pc, #72]	; (e260 <chip_deinit+0x80>)
    e218:	4798      	blx	r3
    e21a:	200d      	movs	r0, #13
    e21c:	4b11      	ldr	r3, [pc, #68]	; (e264 <chip_deinit+0x84>)
    e21e:	4798      	blx	r3
		goto ERR1;
    e220:	e00a      	b.n	e238 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    e222:	4a11      	ldr	r2, [pc, #68]	; (e268 <chip_deinit+0x88>)
    e224:	490a      	ldr	r1, [pc, #40]	; (e250 <chip_deinit+0x70>)
    e226:	480b      	ldr	r0, [pc, #44]	; (e254 <chip_deinit+0x74>)
    e228:	4b0b      	ldr	r3, [pc, #44]	; (e258 <chip_deinit+0x78>)
    e22a:	4798      	blx	r3
    e22c:	480b      	ldr	r0, [pc, #44]	; (e25c <chip_deinit+0x7c>)
    e22e:	4b0c      	ldr	r3, [pc, #48]	; (e260 <chip_deinit+0x80>)
    e230:	4798      	blx	r3
    e232:	200d      	movs	r0, #13
    e234:	4b0b      	ldr	r3, [pc, #44]	; (e264 <chip_deinit+0x84>)
    e236:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    e238:	0020      	movs	r0, r4
    e23a:	b002      	add	sp, #8
    e23c:	bd10      	pop	{r4, pc}
    e23e:	46c0      	nop			; (mov r8, r8)
    e240:	0000e29d 	.word	0x0000e29d
    e244:	fffffbff 	.word	0xfffffbff
    e248:	0000e2a9 	.word	0x0000e2a9
    e24c:	00000207 	.word	0x00000207
    e250:	00019f08 	.word	0x00019f08
    e254:	000199bc 	.word	0x000199bc
    e258:	00017b29 	.word	0x00017b29
    e25c:	00019f14 	.word	0x00019f14
    e260:	00017c45 	.word	0x00017c45
    e264:	00017b5d 	.word	0x00017b5d
    e268:	00000201 	.word	0x00000201

0000e26c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    e26c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    e26e:	4b01      	ldr	r3, [pc, #4]	; (e274 <nm_bus_iface_init+0x8>)
    e270:	4798      	blx	r3
	return ret;
}
    e272:	bd10      	pop	{r4, pc}
    e274:	0000cb7d 	.word	0x0000cb7d

0000e278 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    e278:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    e27a:	4b01      	ldr	r3, [pc, #4]	; (e280 <nm_bus_iface_deinit+0x8>)
    e27c:	4798      	blx	r3

	return ret;
}
    e27e:	bd10      	pop	{r4, pc}
    e280:	0000cdcd 	.word	0x0000cdcd

0000e284 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    e284:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    e286:	4b01      	ldr	r3, [pc, #4]	; (e28c <nm_bus_reset+0x8>)
    e288:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    e28a:	bd10      	pop	{r4, pc}
    e28c:	0000ec2d 	.word	0x0000ec2d

0000e290 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    e290:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    e292:	4b01      	ldr	r3, [pc, #4]	; (e298 <nm_read_reg+0x8>)
    e294:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    e296:	bd10      	pop	{r4, pc}
    e298:	0000ec65 	.word	0x0000ec65

0000e29c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e29c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    e29e:	4b01      	ldr	r3, [pc, #4]	; (e2a4 <nm_read_reg_with_ret+0x8>)
    e2a0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    e2a2:	bd10      	pop	{r4, pc}
    e2a4:	0000ec79 	.word	0x0000ec79

0000e2a8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e2a8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    e2aa:	4b01      	ldr	r3, [pc, #4]	; (e2b0 <nm_write_reg+0x8>)
    e2ac:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    e2ae:	bd10      	pop	{r4, pc}
    e2b0:	0000ec91 	.word	0x0000ec91

0000e2b4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2b6:	46d6      	mov	lr, sl
    e2b8:	464f      	mov	r7, r9
    e2ba:	4646      	mov	r6, r8
    e2bc:	b5c0      	push	{r6, r7, lr}
    e2be:	b082      	sub	sp, #8
    e2c0:	4680      	mov	r8, r0
    e2c2:	4689      	mov	r9, r1
    e2c4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e2c6:	4b13      	ldr	r3, [pc, #76]	; (e314 <nm_read_block+0x60>)
    e2c8:	881f      	ldrh	r7, [r3, #0]
    e2ca:	3f08      	subs	r7, #8
    e2cc:	b2bb      	uxth	r3, r7
    e2ce:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e2d0:	001e      	movs	r6, r3
    e2d2:	0004      	movs	r4, r0
    e2d4:	429a      	cmp	r2, r3
    e2d6:	d91a      	bls.n	e30e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e2d8:	4b0f      	ldr	r3, [pc, #60]	; (e318 <nm_read_block+0x64>)
    e2da:	469a      	mov	sl, r3
    e2dc:	1a37      	subs	r7, r6, r0
    e2de:	4643      	mov	r3, r8
    e2e0:	1ae1      	subs	r1, r4, r3
    e2e2:	4449      	add	r1, r9
    e2e4:	9a01      	ldr	r2, [sp, #4]
    e2e6:	0020      	movs	r0, r4
    e2e8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    e2ea:	2800      	cmp	r0, #0
    e2ec:	d109      	bne.n	e302 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    e2ee:	1bad      	subs	r5, r5, r6
    e2f0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    e2f2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    e2f4:	42b5      	cmp	r5, r6
    e2f6:	d8f2      	bhi.n	e2de <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e2f8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e2fa:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e2fc:	0020      	movs	r0, r4
    e2fe:	4b06      	ldr	r3, [pc, #24]	; (e318 <nm_read_block+0x64>)
    e300:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    e302:	b002      	add	sp, #8
    e304:	bc1c      	pop	{r2, r3, r4}
    e306:	4690      	mov	r8, r2
    e308:	4699      	mov	r9, r3
    e30a:	46a2      	mov	sl, r4
    e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    e30e:	2100      	movs	r1, #0
    e310:	e7f2      	b.n	e2f8 <nm_read_block+0x44>
    e312:	46c0      	nop			; (mov r8, r8)
    e314:	2000007c 	.word	0x2000007c
    e318:	0000edd1 	.word	0x0000edd1

0000e31c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e31e:	46d6      	mov	lr, sl
    e320:	464f      	mov	r7, r9
    e322:	4646      	mov	r6, r8
    e324:	b5c0      	push	{r6, r7, lr}
    e326:	b082      	sub	sp, #8
    e328:	4680      	mov	r8, r0
    e32a:	4689      	mov	r9, r1
    e32c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e32e:	4b13      	ldr	r3, [pc, #76]	; (e37c <nm_write_block+0x60>)
    e330:	881f      	ldrh	r7, [r3, #0]
    e332:	3f08      	subs	r7, #8
    e334:	b2bb      	uxth	r3, r7
    e336:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e338:	001e      	movs	r6, r3
    e33a:	0004      	movs	r4, r0
    e33c:	429a      	cmp	r2, r3
    e33e:	d91a      	bls.n	e376 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e340:	4b0f      	ldr	r3, [pc, #60]	; (e380 <nm_write_block+0x64>)
    e342:	469a      	mov	sl, r3
    e344:	1a37      	subs	r7, r6, r0
    e346:	4643      	mov	r3, r8
    e348:	1ae1      	subs	r1, r4, r3
    e34a:	4449      	add	r1, r9
    e34c:	9a01      	ldr	r2, [sp, #4]
    e34e:	0020      	movs	r0, r4
    e350:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    e352:	2800      	cmp	r0, #0
    e354:	d109      	bne.n	e36a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    e356:	1bad      	subs	r5, r5, r6
    e358:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    e35a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    e35c:	42b5      	cmp	r5, r6
    e35e:	d8f2      	bhi.n	e346 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e360:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e362:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e364:	0020      	movs	r0, r4
    e366:	4b06      	ldr	r3, [pc, #24]	; (e380 <nm_write_block+0x64>)
    e368:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    e36a:	b002      	add	sp, #8
    e36c:	bc1c      	pop	{r2, r3, r4}
    e36e:	4690      	mov	r8, r2
    e370:	4699      	mov	r9, r3
    e372:	46a2      	mov	sl, r4
    e374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    e376:	2100      	movs	r1, #0
    e378:	e7f2      	b.n	e360 <nm_write_block+0x44>
    e37a:	46c0      	nop			; (mov r8, r8)
    e37c:	2000007c 	.word	0x2000007c
    e380:	0000ef2d 	.word	0x0000ef2d

0000e384 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    e384:	b570      	push	{r4, r5, r6, lr}
    e386:	b084      	sub	sp, #16
    e388:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    e38a:	2300      	movs	r3, #0
    e38c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    e38e:	2208      	movs	r2, #8
    e390:	2100      	movs	r1, #0
    e392:	a801      	add	r0, sp, #4
    e394:	4b2d      	ldr	r3, [pc, #180]	; (e44c <nm_get_firmware_full_info+0xc8>)
    e396:	4798      	blx	r3
	if (pstrRev != NULL)
    e398:	2c00      	cmp	r4, #0
    e39a:	d044      	beq.n	e426 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    e39c:	2228      	movs	r2, #40	; 0x28
    e39e:	2100      	movs	r1, #0
    e3a0:	0020      	movs	r0, r4
    e3a2:	4b2b      	ldr	r3, [pc, #172]	; (e450 <nm_get_firmware_full_info+0xcc>)
    e3a4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    e3a6:	a903      	add	r1, sp, #12
    e3a8:	482a      	ldr	r0, [pc, #168]	; (e454 <nm_get_firmware_full_info+0xd0>)
    e3aa:	4b2b      	ldr	r3, [pc, #172]	; (e458 <nm_get_firmware_full_info+0xd4>)
    e3ac:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    e3ae:	2800      	cmp	r0, #0
    e3b0:	d13a      	bne.n	e428 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    e3b2:	9b03      	ldr	r3, [sp, #12]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d039      	beq.n	e42c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    e3b8:	20c0      	movs	r0, #192	; 0xc0
    e3ba:	0280      	lsls	r0, r0, #10
    e3bc:	4318      	orrs	r0, r3
    e3be:	2208      	movs	r2, #8
    e3c0:	a901      	add	r1, sp, #4
    e3c2:	4b26      	ldr	r3, [pc, #152]	; (e45c <nm_get_firmware_full_info+0xd8>)
    e3c4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    e3c6:	2800      	cmp	r0, #0
    e3c8:	d12e      	bne.n	e428 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    e3ca:	9b02      	ldr	r3, [sp, #8]
    e3cc:	0418      	lsls	r0, r3, #16
    e3ce:	0c00      	lsrs	r0, r0, #16
    e3d0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    e3d2:	d02e      	beq.n	e432 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    e3d4:	23c0      	movs	r3, #192	; 0xc0
    e3d6:	029b      	lsls	r3, r3, #10
    e3d8:	4318      	orrs	r0, r3
    e3da:	2228      	movs	r2, #40	; 0x28
    e3dc:	0021      	movs	r1, r4
    e3de:	4b1f      	ldr	r3, [pc, #124]	; (e45c <nm_get_firmware_full_info+0xd8>)
    e3e0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    e3e2:	2800      	cmp	r0, #0
    e3e4:	d120      	bne.n	e428 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    e3e6:	7921      	ldrb	r1, [r4, #4]
    e3e8:	0209      	lsls	r1, r1, #8
    e3ea:	79a2      	ldrb	r2, [r4, #6]
    e3ec:	230f      	movs	r3, #15
    e3ee:	401a      	ands	r2, r3
    e3f0:	430a      	orrs	r2, r1
    e3f2:	7961      	ldrb	r1, [r4, #5]
    e3f4:	0109      	lsls	r1, r1, #4
    e3f6:	25ff      	movs	r5, #255	; 0xff
    e3f8:	4029      	ands	r1, r5
    e3fa:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    e3fc:	79e1      	ldrb	r1, [r4, #7]
    e3fe:	0209      	lsls	r1, r1, #8
    e400:	7a66      	ldrb	r6, [r4, #9]
    e402:	4033      	ands	r3, r6
    e404:	430b      	orrs	r3, r1
    e406:	7a21      	ldrb	r1, [r4, #8]
    e408:	0109      	lsls	r1, r1, #4
    e40a:	400d      	ands	r5, r1
    e40c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    e40e:	2a00      	cmp	r2, #0
    e410:	d012      	beq.n	e438 <nm_get_firmware_full_info+0xb4>
    e412:	2b00      	cmp	r3, #0
    e414:	d013      	beq.n	e43e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    e416:	4912      	ldr	r1, [pc, #72]	; (e460 <nm_get_firmware_full_info+0xdc>)
    e418:	428b      	cmp	r3, r1
    e41a:	d813      	bhi.n	e444 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    e41c:	4b11      	ldr	r3, [pc, #68]	; (e464 <nm_get_firmware_full_info+0xe0>)
    e41e:	429a      	cmp	r2, r3
    e420:	d802      	bhi.n	e428 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    e422:	380d      	subs	r0, #13
    e424:	e000      	b.n	e428 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    e426:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    e428:	b004      	add	sp, #16
    e42a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    e42c:	200c      	movs	r0, #12
    e42e:	4240      	negs	r0, r0
    e430:	e7fa      	b.n	e428 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    e432:	200c      	movs	r0, #12
    e434:	4240      	negs	r0, r0
    e436:	e7f7      	b.n	e428 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    e438:	200c      	movs	r0, #12
    e43a:	4240      	negs	r0, r0
    e43c:	e7f4      	b.n	e428 <nm_get_firmware_full_info+0xa4>
    e43e:	200c      	movs	r0, #12
    e440:	4240      	negs	r0, r0
    e442:	e7f1      	b.n	e428 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    e444:	200d      	movs	r0, #13
    e446:	4240      	negs	r0, r0
    e448:	e7ee      	b.n	e428 <nm_get_firmware_full_info+0xa4>
    e44a:	46c0      	nop			; (mov r8, r8)
    e44c:	000179c7 	.word	0x000179c7
    e450:	0000ce4d 	.word	0x0000ce4d
    e454:	000c0008 	.word	0x000c0008
    e458:	0000e29d 	.word	0x0000e29d
    e45c:	0000e2b5 	.word	0x0000e2b5
    e460:	00001354 	.word	0x00001354
    e464:	00001353 	.word	0x00001353

0000e468 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    e468:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    e46a:	2800      	cmp	r0, #0
    e46c:	d037      	beq.n	e4de <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    e46e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    e470:	1e6b      	subs	r3, r5, #1
    e472:	2b03      	cmp	r3, #3
    e474:	d900      	bls.n	e478 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    e476:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    e478:	2000      	movs	r0, #0
    e47a:	4b20      	ldr	r3, [pc, #128]	; (e4fc <nm_drv_init+0x94>)
    e47c:	4798      	blx	r3
    e47e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e480:	d12f      	bne.n	e4e2 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    e482:	481f      	ldr	r0, [pc, #124]	; (e500 <nm_drv_init+0x98>)
    e484:	4c1f      	ldr	r4, [pc, #124]	; (e504 <nm_drv_init+0x9c>)
    e486:	47a0      	blx	r4
    e488:	4b1f      	ldr	r3, [pc, #124]	; (e508 <nm_drv_init+0xa0>)
    e48a:	4798      	blx	r3
    e48c:	0001      	movs	r1, r0
    e48e:	481f      	ldr	r0, [pc, #124]	; (e50c <nm_drv_init+0xa4>)
    e490:	47a0      	blx	r4
    e492:	200d      	movs	r0, #13
    e494:	4b1e      	ldr	r3, [pc, #120]	; (e510 <nm_drv_init+0xa8>)
    e496:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    e498:	4b1e      	ldr	r3, [pc, #120]	; (e514 <nm_drv_init+0xac>)
    e49a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    e49c:	0028      	movs	r0, r5
    e49e:	4b1e      	ldr	r3, [pc, #120]	; (e518 <nm_drv_init+0xb0>)
    e4a0:	4798      	blx	r3
    e4a2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e4a4:	d117      	bne.n	e4d6 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    e4a6:	0028      	movs	r0, r5
    e4a8:	4b1c      	ldr	r3, [pc, #112]	; (e51c <nm_drv_init+0xb4>)
    e4aa:	4798      	blx	r3
    e4ac:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e4ae:	d112      	bne.n	e4d6 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    e4b0:	3d02      	subs	r5, #2
    e4b2:	2d01      	cmp	r5, #1
    e4b4:	d911      	bls.n	e4da <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    e4b6:	4b1a      	ldr	r3, [pc, #104]	; (e520 <nm_drv_init+0xb8>)
    e4b8:	4798      	blx	r3
    e4ba:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e4bc:	d00d      	beq.n	e4da <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    e4be:	22a7      	movs	r2, #167	; 0xa7
    e4c0:	0052      	lsls	r2, r2, #1
    e4c2:	4918      	ldr	r1, [pc, #96]	; (e524 <nm_drv_init+0xbc>)
    e4c4:	4818      	ldr	r0, [pc, #96]	; (e528 <nm_drv_init+0xc0>)
    e4c6:	4b0f      	ldr	r3, [pc, #60]	; (e504 <nm_drv_init+0x9c>)
    e4c8:	4798      	blx	r3
    e4ca:	4818      	ldr	r0, [pc, #96]	; (e52c <nm_drv_init+0xc4>)
    e4cc:	4b18      	ldr	r3, [pc, #96]	; (e530 <nm_drv_init+0xc8>)
    e4ce:	4798      	blx	r3
    e4d0:	200d      	movs	r0, #13
    e4d2:	4b0f      	ldr	r3, [pc, #60]	; (e510 <nm_drv_init+0xa8>)
    e4d4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    e4d6:	4b17      	ldr	r3, [pc, #92]	; (e534 <nm_drv_init+0xcc>)
    e4d8:	4798      	blx	r3
ERR1:
	return ret;
}
    e4da:	0020      	movs	r0, r4
    e4dc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    e4de:	2501      	movs	r5, #1
    e4e0:	e7ca      	b.n	e478 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    e4e2:	2290      	movs	r2, #144	; 0x90
    e4e4:	0052      	lsls	r2, r2, #1
    e4e6:	490f      	ldr	r1, [pc, #60]	; (e524 <nm_drv_init+0xbc>)
    e4e8:	480f      	ldr	r0, [pc, #60]	; (e528 <nm_drv_init+0xc0>)
    e4ea:	4b06      	ldr	r3, [pc, #24]	; (e504 <nm_drv_init+0x9c>)
    e4ec:	4798      	blx	r3
    e4ee:	4812      	ldr	r0, [pc, #72]	; (e538 <nm_drv_init+0xd0>)
    e4f0:	4b0f      	ldr	r3, [pc, #60]	; (e530 <nm_drv_init+0xc8>)
    e4f2:	4798      	blx	r3
    e4f4:	200d      	movs	r0, #13
    e4f6:	4b06      	ldr	r3, [pc, #24]	; (e510 <nm_drv_init+0xa8>)
    e4f8:	4798      	blx	r3
		goto ERR1;
    e4fa:	e7ee      	b.n	e4da <nm_drv_init+0x72>
    e4fc:	0000e26d 	.word	0x0000e26d
    e500:	00019cec 	.word	0x00019cec
    e504:	00017b29 	.word	0x00017b29
    e508:	0000de4d 	.word	0x0000de4d
    e50c:	0001a030 	.word	0x0001a030
    e510:	00017b5d 	.word	0x00017b5d
    e514:	0000eca9 	.word	0x0000eca9
    e518:	0000e061 	.word	0x0000e061
    e51c:	0000e169 	.word	0x0000e169
    e520:	0000ddf1 	.word	0x0000ddf1
    e524:	00019f78 	.word	0x00019f78
    e528:	000199bc 	.word	0x000199bc
    e52c:	00019ff4 	.word	0x00019ff4
    e530:	00017c45 	.word	0x00017c45
    e534:	0000e279 	.word	0x0000e279
    e538:	0001a014 	.word	0x0001a014

0000e53c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    e53c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    e53e:	4b1c      	ldr	r3, [pc, #112]	; (e5b0 <nm_drv_deinit+0x74>)
    e540:	4798      	blx	r3
    e542:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e544:	d10b      	bne.n	e55e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    e546:	2000      	movs	r0, #0
    e548:	4b1a      	ldr	r3, [pc, #104]	; (e5b4 <nm_drv_deinit+0x78>)
    e54a:	4798      	blx	r3
    e54c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e54e:	d114      	bne.n	e57a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    e550:	4b19      	ldr	r3, [pc, #100]	; (e5b8 <nm_drv_deinit+0x7c>)
    e552:	4798      	blx	r3
    e554:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e556:	d11d      	bne.n	e594 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    e558:	4b18      	ldr	r3, [pc, #96]	; (e5bc <nm_drv_deinit+0x80>)
    e55a:	4798      	blx	r3
    e55c:	e00b      	b.n	e576 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    e55e:	2266      	movs	r2, #102	; 0x66
    e560:	32ff      	adds	r2, #255	; 0xff
    e562:	4917      	ldr	r1, [pc, #92]	; (e5c0 <nm_drv_deinit+0x84>)
    e564:	4817      	ldr	r0, [pc, #92]	; (e5c4 <nm_drv_deinit+0x88>)
    e566:	4b18      	ldr	r3, [pc, #96]	; (e5c8 <nm_drv_deinit+0x8c>)
    e568:	4798      	blx	r3
    e56a:	4818      	ldr	r0, [pc, #96]	; (e5cc <nm_drv_deinit+0x90>)
    e56c:	4b18      	ldr	r3, [pc, #96]	; (e5d0 <nm_drv_deinit+0x94>)
    e56e:	4798      	blx	r3
    e570:	200d      	movs	r0, #13
    e572:	4b18      	ldr	r3, [pc, #96]	; (e5d4 <nm_drv_deinit+0x98>)
    e574:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    e576:	0020      	movs	r0, r4
    e578:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    e57a:	22b6      	movs	r2, #182	; 0xb6
    e57c:	0052      	lsls	r2, r2, #1
    e57e:	4910      	ldr	r1, [pc, #64]	; (e5c0 <nm_drv_deinit+0x84>)
    e580:	4810      	ldr	r0, [pc, #64]	; (e5c4 <nm_drv_deinit+0x88>)
    e582:	4b11      	ldr	r3, [pc, #68]	; (e5c8 <nm_drv_deinit+0x8c>)
    e584:	4798      	blx	r3
    e586:	4814      	ldr	r0, [pc, #80]	; (e5d8 <nm_drv_deinit+0x9c>)
    e588:	4b11      	ldr	r3, [pc, #68]	; (e5d0 <nm_drv_deinit+0x94>)
    e58a:	4798      	blx	r3
    e58c:	200d      	movs	r0, #13
    e58e:	4b11      	ldr	r3, [pc, #68]	; (e5d4 <nm_drv_deinit+0x98>)
    e590:	4798      	blx	r3
		goto ERR1;
    e592:	e7f0      	b.n	e576 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    e594:	22b9      	movs	r2, #185	; 0xb9
    e596:	0052      	lsls	r2, r2, #1
    e598:	4909      	ldr	r1, [pc, #36]	; (e5c0 <nm_drv_deinit+0x84>)
    e59a:	480a      	ldr	r0, [pc, #40]	; (e5c4 <nm_drv_deinit+0x88>)
    e59c:	4b0a      	ldr	r3, [pc, #40]	; (e5c8 <nm_drv_deinit+0x8c>)
    e59e:	4798      	blx	r3
    e5a0:	480e      	ldr	r0, [pc, #56]	; (e5dc <nm_drv_deinit+0xa0>)
    e5a2:	4b0b      	ldr	r3, [pc, #44]	; (e5d0 <nm_drv_deinit+0x94>)
    e5a4:	4798      	blx	r3
    e5a6:	200d      	movs	r0, #13
    e5a8:	4b0a      	ldr	r3, [pc, #40]	; (e5d4 <nm_drv_deinit+0x98>)
    e5aa:	4798      	blx	r3
		goto ERR1;
    e5ac:	e7e3      	b.n	e576 <nm_drv_deinit+0x3a>
    e5ae:	46c0      	nop			; (mov r8, r8)
    e5b0:	0000e1e1 	.word	0x0000e1e1
    e5b4:	0000fb09 	.word	0x0000fb09
    e5b8:	0000e279 	.word	0x0000e279
    e5bc:	0000ec55 	.word	0x0000ec55
    e5c0:	00019f84 	.word	0x00019f84
    e5c4:	000199bc 	.word	0x000199bc
    e5c8:	00017b29 	.word	0x00017b29
    e5cc:	00019f94 	.word	0x00019f94
    e5d0:	00017c45 	.word	0x00017c45
    e5d4:	00017b5d 	.word	0x00017b5d
    e5d8:	00019fb4 	.word	0x00019fb4
    e5dc:	00019fd8 	.word	0x00019fd8

0000e5e0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    e5e0:	b500      	push	{lr}
    e5e2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    e5e4:	ab01      	add	r3, sp, #4
    e5e6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    e5e8:	2200      	movs	r2, #0
    e5ea:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    e5ec:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e5ee:	0019      	movs	r1, r3
    e5f0:	2003      	movs	r0, #3
    e5f2:	4b02      	ldr	r3, [pc, #8]	; (e5fc <nmi_spi_write+0x1c>)
    e5f4:	4798      	blx	r3
}
    e5f6:	b005      	add	sp, #20
    e5f8:	bd00      	pop	{pc}
    e5fa:	46c0      	nop			; (mov r8, r8)
    e5fc:	0000cc81 	.word	0x0000cc81

0000e600 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    e600:	b570      	push	{r4, r5, r6, lr}
    e602:	b084      	sub	sp, #16
    e604:	ac08      	add	r4, sp, #32
    e606:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    e608:	ac01      	add	r4, sp, #4
    e60a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    e60c:	303f      	adds	r0, #63	; 0x3f
    e60e:	b2c4      	uxtb	r4, r0
    e610:	2c0e      	cmp	r4, #14
    e612:	d900      	bls.n	e616 <spi_cmd+0x16>
    e614:	e084      	b.n	e720 <spi_cmd+0x120>
    e616:	00a0      	lsls	r0, r4, #2
    e618:	4c4f      	ldr	r4, [pc, #316]	; (e758 <spi_cmd+0x158>)
    e61a:	5820      	ldr	r0, [r4, r0]
    e61c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    e61e:	ab01      	add	r3, sp, #4
    e620:	0c0a      	lsrs	r2, r1, #16
    e622:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e624:	0a0a      	lsrs	r2, r1, #8
    e626:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    e628:	70d9      	strb	r1, [r3, #3]
		len = 5;
    e62a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    e62c:	4b4b      	ldr	r3, [pc, #300]	; (e75c <spi_cmd+0x15c>)
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	2b00      	cmp	r3, #0
    e632:	d077      	beq.n	e724 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    e634:	3901      	subs	r1, #1
    e636:	b2c9      	uxtb	r1, r1
    e638:	e083      	b.n	e742 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    e63a:	0a0b      	lsrs	r3, r1, #8
    e63c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e63e:	2d00      	cmp	r5, #0
    e640:	d107      	bne.n	e652 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    e642:	aa01      	add	r2, sp, #4
    e644:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    e646:	ab01      	add	r3, sp, #4
    e648:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    e64a:	2200      	movs	r2, #0
    e64c:	70da      	strb	r2, [r3, #3]
		len = 5;
    e64e:	2105      	movs	r1, #5
		break;
    e650:	e7ec      	b.n	e62c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e652:	2280      	movs	r2, #128	; 0x80
    e654:	4252      	negs	r2, r2
    e656:	4313      	orrs	r3, r2
    e658:	aa01      	add	r2, sp, #4
    e65a:	7053      	strb	r3, [r2, #1]
    e65c:	e7f3      	b.n	e646 <spi_cmd+0x46>
		bc[1] = 0x00;
    e65e:	ab01      	add	r3, sp, #4
    e660:	2200      	movs	r2, #0
    e662:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e664:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e666:	70da      	strb	r2, [r3, #3]
		len = 5;
    e668:	2105      	movs	r1, #5
		break;
    e66a:	e7df      	b.n	e62c <spi_cmd+0x2c>
		bc[1] = 0x00;
    e66c:	ab01      	add	r3, sp, #4
    e66e:	2200      	movs	r2, #0
    e670:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e672:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e674:	70da      	strb	r2, [r3, #3]
		len = 5;
    e676:	2105      	movs	r1, #5
		break;
    e678:	e7d8      	b.n	e62c <spi_cmd+0x2c>
		bc[1] = 0xff;
    e67a:	ab01      	add	r3, sp, #4
    e67c:	22ff      	movs	r2, #255	; 0xff
    e67e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    e680:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    e682:	70da      	strb	r2, [r3, #3]
		len = 5;
    e684:	2105      	movs	r1, #5
		break;
    e686:	e7d1      	b.n	e62c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e688:	aa01      	add	r2, sp, #4
    e68a:	0c08      	lsrs	r0, r1, #16
    e68c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e68e:	0a08      	lsrs	r0, r1, #8
    e690:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e692:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    e694:	0a19      	lsrs	r1, r3, #8
    e696:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    e698:	7153      	strb	r3, [r2, #5]
		len = 7;
    e69a:	2107      	movs	r1, #7
		break;
    e69c:	e7c6      	b.n	e62c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e69e:	aa01      	add	r2, sp, #4
    e6a0:	0c08      	lsrs	r0, r1, #16
    e6a2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e6a4:	0a08      	lsrs	r0, r1, #8
    e6a6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e6a8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    e6aa:	0c19      	lsrs	r1, r3, #16
    e6ac:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    e6ae:	0a19      	lsrs	r1, r3, #8
    e6b0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    e6b2:	7193      	strb	r3, [r2, #6]
		len = 8;
    e6b4:	2108      	movs	r1, #8
		break;
    e6b6:	e7b9      	b.n	e62c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    e6b8:	0a0b      	lsrs	r3, r1, #8
    e6ba:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e6bc:	2d00      	cmp	r5, #0
    e6be:	d10c      	bne.n	e6da <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    e6c0:	a801      	add	r0, sp, #4
    e6c2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    e6c4:	ab01      	add	r3, sp, #4
    e6c6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    e6c8:	0e11      	lsrs	r1, r2, #24
    e6ca:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    e6cc:	0c11      	lsrs	r1, r2, #16
    e6ce:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    e6d0:	0a11      	lsrs	r1, r2, #8
    e6d2:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    e6d4:	719a      	strb	r2, [r3, #6]
		len = 8;
    e6d6:	2108      	movs	r1, #8
		break;
    e6d8:	e7a8      	b.n	e62c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e6da:	2080      	movs	r0, #128	; 0x80
    e6dc:	4240      	negs	r0, r0
    e6de:	4303      	orrs	r3, r0
    e6e0:	a801      	add	r0, sp, #4
    e6e2:	7043      	strb	r3, [r0, #1]
    e6e4:	e7ee      	b.n	e6c4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    e6e6:	ab01      	add	r3, sp, #4
    e6e8:	0c08      	lsrs	r0, r1, #16
    e6ea:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e6ec:	0a08      	lsrs	r0, r1, #8
    e6ee:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    e6f0:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    e6f2:	0e11      	lsrs	r1, r2, #24
    e6f4:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    e6f6:	0c11      	lsrs	r1, r2, #16
    e6f8:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    e6fa:	0a11      	lsrs	r1, r2, #8
    e6fc:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    e6fe:	71da      	strb	r2, [r3, #7]
		len = 9;
    e700:	2109      	movs	r1, #9
		break;
    e702:	e793      	b.n	e62c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    e704:	2290      	movs	r2, #144	; 0x90
    e706:	0052      	lsls	r2, r2, #1
    e708:	4915      	ldr	r1, [pc, #84]	; (e760 <spi_cmd+0x160>)
    e70a:	4816      	ldr	r0, [pc, #88]	; (e764 <spi_cmd+0x164>)
    e70c:	4b16      	ldr	r3, [pc, #88]	; (e768 <spi_cmd+0x168>)
    e70e:	4798      	blx	r3
    e710:	4816      	ldr	r0, [pc, #88]	; (e76c <spi_cmd+0x16c>)
    e712:	4b17      	ldr	r3, [pc, #92]	; (e770 <spi_cmd+0x170>)
    e714:	4798      	blx	r3
    e716:	200d      	movs	r0, #13
    e718:	4b16      	ldr	r3, [pc, #88]	; (e774 <spi_cmd+0x174>)
    e71a:	4798      	blx	r3
			result = N_FAIL;
    e71c:	2300      	movs	r3, #0
    e71e:	e017      	b.n	e750 <spi_cmd+0x150>
	switch (cmd) {
    e720:	2300      	movs	r3, #0
    e722:	e015      	b.n	e750 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e724:	1e4e      	subs	r6, r1, #1
    e726:	aa01      	add	r2, sp, #4
    e728:	1995      	adds	r5, r2, r6
    e72a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    e72c:	4c12      	ldr	r4, [pc, #72]	; (e778 <spi_cmd+0x178>)
    e72e:	005b      	lsls	r3, r3, #1
    e730:	7810      	ldrb	r0, [r2, #0]
    e732:	4043      	eors	r3, r0
    e734:	5ce3      	ldrb	r3, [r4, r3]
    e736:	3201      	adds	r2, #1
	while (len--)
    e738:	42aa      	cmp	r2, r5
    e73a:	d1f8      	bne.n	e72e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e73c:	005b      	lsls	r3, r3, #1
    e73e:	aa01      	add	r2, sp, #4
    e740:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    e742:	b289      	uxth	r1, r1
    e744:	a801      	add	r0, sp, #4
    e746:	4b0d      	ldr	r3, [pc, #52]	; (e77c <spi_cmd+0x17c>)
    e748:	4798      	blx	r3
    e74a:	2301      	movs	r3, #1
    e74c:	2800      	cmp	r0, #0
    e74e:	d1d9      	bne.n	e704 <spi_cmd+0x104>
		}
	}

	return result;
}
    e750:	0018      	movs	r0, r3
    e752:	b004      	add	sp, #16
    e754:	bd70      	pop	{r4, r5, r6, pc}
    e756:	46c0      	nop			; (mov r8, r8)
    e758:	0001a040 	.word	0x0001a040
    e75c:	20000484 	.word	0x20000484
    e760:	0001a080 	.word	0x0001a080
    e764:	000199bc 	.word	0x000199bc
    e768:	00017b29 	.word	0x00017b29
    e76c:	0001a510 	.word	0x0001a510
    e770:	00017c45 	.word	0x00017c45
    e774:	00017b5d 	.word	0x00017b5d
    e778:	0001a10c 	.word	0x0001a10c
    e77c:	0000e5e1 	.word	0x0000e5e1

0000e780 <nmi_spi_read>:
{
    e780:	b500      	push	{lr}
    e782:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    e784:	ab01      	add	r3, sp, #4
    e786:	2200      	movs	r2, #0
    e788:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    e78a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    e78c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e78e:	0019      	movs	r1, r3
    e790:	2003      	movs	r0, #3
    e792:	4b02      	ldr	r3, [pc, #8]	; (e79c <nmi_spi_read+0x1c>)
    e794:	4798      	blx	r3
}
    e796:	b005      	add	sp, #20
    e798:	bd00      	pop	{pc}
    e79a:	46c0      	nop			; (mov r8, r8)
    e79c:	0000cc81 	.word	0x0000cc81

0000e7a0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    e7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7a2:	46c6      	mov	lr, r8
    e7a4:	b500      	push	{lr}
    e7a6:	b082      	sub	sp, #8
    e7a8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    e7aa:	28cf      	cmp	r0, #207	; 0xcf
    e7ac:	d02b      	beq.n	e806 <spi_cmd_rsp+0x66>
    e7ae:	0003      	movs	r3, r0
    e7b0:	333b      	adds	r3, #59	; 0x3b
    e7b2:	b2db      	uxtb	r3, r3
    e7b4:	2b01      	cmp	r3, #1
    e7b6:	d926      	bls.n	e806 <spi_cmd_rsp+0x66>
{
    e7b8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e7ba:	466b      	mov	r3, sp
    e7bc:	1dde      	adds	r6, r3, #7
    e7be:	4b26      	ldr	r3, [pc, #152]	; (e858 <spi_cmd_rsp+0xb8>)
    e7c0:	4698      	mov	r8, r3
    e7c2:	2101      	movs	r1, #1
    e7c4:	0030      	movs	r0, r6
    e7c6:	47c0      	blx	r8
    e7c8:	1e05      	subs	r5, r0, #0
    e7ca:	d125      	bne.n	e818 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    e7cc:	7833      	ldrb	r3, [r6, #0]
    e7ce:	42bb      	cmp	r3, r7
    e7d0:	d030      	beq.n	e834 <spi_cmd_rsp+0x94>
    e7d2:	3c01      	subs	r4, #1
    e7d4:	b2e4      	uxtb	r4, r4
    e7d6:	2c00      	cmp	r4, #0
    e7d8:	d1f3      	bne.n	e7c2 <spi_cmd_rsp+0x22>
    e7da:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e7dc:	466b      	mov	r3, sp
    e7de:	1dde      	adds	r6, r3, #7
    e7e0:	4f1d      	ldr	r7, [pc, #116]	; (e858 <spi_cmd_rsp+0xb8>)
    e7e2:	2101      	movs	r1, #1
    e7e4:	0030      	movs	r0, r6
    e7e6:	47b8      	blx	r7
    e7e8:	2800      	cmp	r0, #0
    e7ea:	d125      	bne.n	e838 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    e7ec:	7833      	ldrb	r3, [r6, #0]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d02f      	beq.n	e852 <spi_cmd_rsp+0xb2>
    e7f2:	3c01      	subs	r4, #1
    e7f4:	b2e4      	uxtb	r4, r4
    e7f6:	2c00      	cmp	r4, #0
    e7f8:	d1f3      	bne.n	e7e2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    e7fa:	2501      	movs	r5, #1

_fail_:

	return result;
}
    e7fc:	0028      	movs	r0, r5
    e7fe:	b002      	add	sp, #8
    e800:	bc04      	pop	{r2}
    e802:	4690      	mov	r8, r2
    e804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e806:	2101      	movs	r1, #1
    e808:	466b      	mov	r3, sp
    e80a:	1dd8      	adds	r0, r3, #7
    e80c:	4b12      	ldr	r3, [pc, #72]	; (e858 <spi_cmd_rsp+0xb8>)
    e80e:	4798      	blx	r3
			result = N_FAIL;
    e810:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e812:	2800      	cmp	r0, #0
    e814:	d0d0      	beq.n	e7b8 <spi_cmd_rsp+0x18>
    e816:	e7f1      	b.n	e7fc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e818:	225c      	movs	r2, #92	; 0x5c
    e81a:	32ff      	adds	r2, #255	; 0xff
    e81c:	490f      	ldr	r1, [pc, #60]	; (e85c <spi_cmd_rsp+0xbc>)
    e81e:	4810      	ldr	r0, [pc, #64]	; (e860 <spi_cmd_rsp+0xc0>)
    e820:	4b10      	ldr	r3, [pc, #64]	; (e864 <spi_cmd_rsp+0xc4>)
    e822:	4798      	blx	r3
    e824:	4810      	ldr	r0, [pc, #64]	; (e868 <spi_cmd_rsp+0xc8>)
    e826:	4b11      	ldr	r3, [pc, #68]	; (e86c <spi_cmd_rsp+0xcc>)
    e828:	4798      	blx	r3
    e82a:	200d      	movs	r0, #13
    e82c:	4b10      	ldr	r3, [pc, #64]	; (e870 <spi_cmd_rsp+0xd0>)
    e82e:	4798      	blx	r3
			result = N_FAIL;
    e830:	2500      	movs	r5, #0
			goto _fail_;
    e832:	e7e3      	b.n	e7fc <spi_cmd_rsp+0x5c>
    e834:	240b      	movs	r4, #11
    e836:	e7d1      	b.n	e7dc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e838:	226a      	movs	r2, #106	; 0x6a
    e83a:	32ff      	adds	r2, #255	; 0xff
    e83c:	4907      	ldr	r1, [pc, #28]	; (e85c <spi_cmd_rsp+0xbc>)
    e83e:	4808      	ldr	r0, [pc, #32]	; (e860 <spi_cmd_rsp+0xc0>)
    e840:	4b08      	ldr	r3, [pc, #32]	; (e864 <spi_cmd_rsp+0xc4>)
    e842:	4798      	blx	r3
    e844:	4808      	ldr	r0, [pc, #32]	; (e868 <spi_cmd_rsp+0xc8>)
    e846:	4b09      	ldr	r3, [pc, #36]	; (e86c <spi_cmd_rsp+0xcc>)
    e848:	4798      	blx	r3
    e84a:	200d      	movs	r0, #13
    e84c:	4b08      	ldr	r3, [pc, #32]	; (e870 <spi_cmd_rsp+0xd0>)
    e84e:	4798      	blx	r3
			goto _fail_;
    e850:	e7d4      	b.n	e7fc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    e852:	2501      	movs	r5, #1
    e854:	e7d2      	b.n	e7fc <spi_cmd_rsp+0x5c>
    e856:	46c0      	nop			; (mov r8, r8)
    e858:	0000e781 	.word	0x0000e781
    e85c:	0001a098 	.word	0x0001a098
    e860:	000199bc 	.word	0x000199bc
    e864:	00017b29 	.word	0x00017b29
    e868:	0001a53c 	.word	0x0001a53c
    e86c:	00017c45 	.word	0x00017c45
    e870:	00017b5d 	.word	0x00017b5d

0000e874 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    e874:	b5f0      	push	{r4, r5, r6, r7, lr}
    e876:	46de      	mov	lr, fp
    e878:	4657      	mov	r7, sl
    e87a:	464e      	mov	r6, r9
    e87c:	4645      	mov	r5, r8
    e87e:	b5e0      	push	{r5, r6, r7, lr}
    e880:	b087      	sub	sp, #28
    e882:	9001      	str	r0, [sp, #4]
    e884:	4689      	mov	r9, r1
    e886:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    e888:	2300      	movs	r3, #0
    e88a:	469a      	mov	sl, r3
    e88c:	2380      	movs	r3, #128	; 0x80
    e88e:	019b      	lsls	r3, r3, #6
    e890:	469b      	mov	fp, r3
    e892:	466a      	mov	r2, sp
    e894:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e896:	4b3c      	ldr	r3, [pc, #240]	; (e988 <spi_data_read+0x114>)
    e898:	4698      	mov	r8, r3
    e89a:	e02f      	b.n	e8fc <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    e89c:	22be      	movs	r2, #190	; 0xbe
    e89e:	0092      	lsls	r2, r2, #2
    e8a0:	493a      	ldr	r1, [pc, #232]	; (e98c <spi_data_read+0x118>)
    e8a2:	483b      	ldr	r0, [pc, #236]	; (e990 <spi_data_read+0x11c>)
    e8a4:	4b3b      	ldr	r3, [pc, #236]	; (e994 <spi_data_read+0x120>)
    e8a6:	4798      	blx	r3
    e8a8:	483b      	ldr	r0, [pc, #236]	; (e998 <spi_data_read+0x124>)
    e8aa:	4b3c      	ldr	r3, [pc, #240]	; (e99c <spi_data_read+0x128>)
    e8ac:	4798      	blx	r3
    e8ae:	200d      	movs	r0, #13
    e8b0:	4b3b      	ldr	r3, [pc, #236]	; (e9a0 <spi_data_read+0x12c>)
    e8b2:	4798      	blx	r3
    e8b4:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    e8b6:	0028      	movs	r0, r5
    e8b8:	b007      	add	sp, #28
    e8ba:	bc3c      	pop	{r2, r3, r4, r5}
    e8bc:	4690      	mov	r8, r2
    e8be:	4699      	mov	r9, r3
    e8c0:	46a2      	mov	sl, r4
    e8c2:	46ab      	mov	fp, r5
    e8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    e8c6:	2c00      	cmp	r4, #0
    e8c8:	dd2e      	ble.n	e928 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    e8ca:	9b01      	ldr	r3, [sp, #4]
    e8cc:	4453      	add	r3, sl
    e8ce:	0018      	movs	r0, r3
    e8d0:	0039      	movs	r1, r7
    e8d2:	4b2d      	ldr	r3, [pc, #180]	; (e988 <spi_data_read+0x114>)
    e8d4:	4798      	blx	r3
    e8d6:	1e04      	subs	r4, r0, #0
    e8d8:	d134      	bne.n	e944 <spi_data_read+0xd0>
		if(!clockless)
    e8da:	9b02      	ldr	r3, [sp, #8]
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d103      	bne.n	e8e8 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    e8e0:	4b30      	ldr	r3, [pc, #192]	; (e9a4 <spi_data_read+0x130>)
    e8e2:	781b      	ldrb	r3, [r3, #0]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d039      	beq.n	e95c <spi_data_read+0xe8>
		ix += nbytes;
    e8e8:	4653      	mov	r3, sl
    e8ea:	18fb      	adds	r3, r7, r3
    e8ec:	b21b      	sxth	r3, r3
    e8ee:	469a      	mov	sl, r3
		sz -= nbytes;
    e8f0:	464b      	mov	r3, r9
    e8f2:	1bdf      	subs	r7, r3, r7
    e8f4:	b2bb      	uxth	r3, r7
    e8f6:	4699      	mov	r9, r3
	} while (sz);
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	d043      	beq.n	e984 <spi_data_read+0x110>
    e8fc:	464f      	mov	r7, r9
    e8fe:	45d9      	cmp	r9, fp
    e900:	d901      	bls.n	e906 <spi_data_read+0x92>
    e902:	466b      	mov	r3, sp
    e904:	89df      	ldrh	r7, [r3, #14]
    e906:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    e908:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e90a:	ab04      	add	r3, sp, #16
    e90c:	1cde      	adds	r6, r3, #3
    e90e:	2101      	movs	r1, #1
    e910:	0030      	movs	r0, r6
    e912:	47c0      	blx	r8
    e914:	1e05      	subs	r5, r0, #0
    e916:	d1c1      	bne.n	e89c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    e918:	7833      	ldrb	r3, [r6, #0]
    e91a:	091b      	lsrs	r3, r3, #4
    e91c:	2b0f      	cmp	r3, #15
    e91e:	d0d2      	beq.n	e8c6 <spi_data_read+0x52>
    e920:	3c01      	subs	r4, #1
    e922:	b224      	sxth	r4, r4
		} while (retry--);
    e924:	1c63      	adds	r3, r4, #1
    e926:	d1f2      	bne.n	e90e <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    e928:	22c1      	movs	r2, #193	; 0xc1
    e92a:	0092      	lsls	r2, r2, #2
    e92c:	4917      	ldr	r1, [pc, #92]	; (e98c <spi_data_read+0x118>)
    e92e:	4818      	ldr	r0, [pc, #96]	; (e990 <spi_data_read+0x11c>)
    e930:	4c18      	ldr	r4, [pc, #96]	; (e994 <spi_data_read+0x120>)
    e932:	47a0      	blx	r4
    e934:	ab04      	add	r3, sp, #16
    e936:	78d9      	ldrb	r1, [r3, #3]
    e938:	481b      	ldr	r0, [pc, #108]	; (e9a8 <spi_data_read+0x134>)
    e93a:	47a0      	blx	r4
    e93c:	200d      	movs	r0, #13
    e93e:	4b18      	ldr	r3, [pc, #96]	; (e9a0 <spi_data_read+0x12c>)
    e940:	4798      	blx	r3
			break;
    e942:	e7b8      	b.n	e8b6 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    e944:	4a19      	ldr	r2, [pc, #100]	; (e9ac <spi_data_read+0x138>)
    e946:	4911      	ldr	r1, [pc, #68]	; (e98c <spi_data_read+0x118>)
    e948:	4811      	ldr	r0, [pc, #68]	; (e990 <spi_data_read+0x11c>)
    e94a:	4b12      	ldr	r3, [pc, #72]	; (e994 <spi_data_read+0x120>)
    e94c:	4798      	blx	r3
    e94e:	4818      	ldr	r0, [pc, #96]	; (e9b0 <spi_data_read+0x13c>)
    e950:	4b12      	ldr	r3, [pc, #72]	; (e99c <spi_data_read+0x128>)
    e952:	4798      	blx	r3
    e954:	200d      	movs	r0, #13
    e956:	4b12      	ldr	r3, [pc, #72]	; (e9a0 <spi_data_read+0x12c>)
    e958:	4798      	blx	r3
			break;
    e95a:	e7ac      	b.n	e8b6 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    e95c:	2102      	movs	r1, #2
    e95e:	a805      	add	r0, sp, #20
    e960:	4b09      	ldr	r3, [pc, #36]	; (e988 <spi_data_read+0x114>)
    e962:	4798      	blx	r3
    e964:	2800      	cmp	r0, #0
    e966:	d0bf      	beq.n	e8e8 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    e968:	22c6      	movs	r2, #198	; 0xc6
    e96a:	0092      	lsls	r2, r2, #2
    e96c:	4907      	ldr	r1, [pc, #28]	; (e98c <spi_data_read+0x118>)
    e96e:	4808      	ldr	r0, [pc, #32]	; (e990 <spi_data_read+0x11c>)
    e970:	4b08      	ldr	r3, [pc, #32]	; (e994 <spi_data_read+0x120>)
    e972:	4798      	blx	r3
    e974:	480f      	ldr	r0, [pc, #60]	; (e9b4 <spi_data_read+0x140>)
    e976:	4b09      	ldr	r3, [pc, #36]	; (e99c <spi_data_read+0x128>)
    e978:	4798      	blx	r3
    e97a:	200d      	movs	r0, #13
    e97c:	4b08      	ldr	r3, [pc, #32]	; (e9a0 <spi_data_read+0x12c>)
    e97e:	4798      	blx	r3
					result = N_FAIL;
    e980:	0025      	movs	r5, r4
					break;
    e982:	e798      	b.n	e8b6 <spi_data_read+0x42>
    e984:	2501      	movs	r5, #1
    e986:	e796      	b.n	e8b6 <spi_data_read+0x42>
    e988:	0000e781 	.word	0x0000e781
    e98c:	0001a0a4 	.word	0x0001a0a4
    e990:	000199bc 	.word	0x000199bc
    e994:	00017b29 	.word	0x00017b29
    e998:	0001a570 	.word	0x0001a570
    e99c:	00017c45 	.word	0x00017c45
    e9a0:	00017b5d 	.word	0x00017b5d
    e9a4:	20000484 	.word	0x20000484
    e9a8:	0001a5a4 	.word	0x0001a5a4
    e9ac:	0000030d 	.word	0x0000030d
    e9b0:	0001a5d4 	.word	0x0001a5d4
    e9b4:	0001a604 	.word	0x0001a604

0000e9b8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ba:	46d6      	mov	lr, sl
    e9bc:	464f      	mov	r7, r9
    e9be:	4646      	mov	r6, r8
    e9c0:	b5c0      	push	{r6, r7, lr}
    e9c2:	b086      	sub	sp, #24
    e9c4:	9003      	str	r0, [sp, #12]
    e9c6:	9104      	str	r1, [sp, #16]
    e9c8:	2830      	cmp	r0, #48	; 0x30
    e9ca:	d80f      	bhi.n	e9ec <spi_write_reg+0x34>
    e9cc:	4b30      	ldr	r3, [pc, #192]	; (ea90 <spi_write_reg+0xd8>)
    e9ce:	781f      	ldrb	r7, [r3, #0]
    e9d0:	b2fb      	uxtb	r3, r7
    e9d2:	9305      	str	r3, [sp, #20]
    e9d4:	2300      	movs	r3, #0
    e9d6:	2230      	movs	r2, #48	; 0x30
    e9d8:	9903      	ldr	r1, [sp, #12]
    e9da:	428a      	cmp	r2, r1
    e9dc:	415b      	adcs	r3, r3
    e9de:	b2db      	uxtb	r3, r3
    e9e0:	469a      	mov	sl, r3
    e9e2:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e9e4:	4b2b      	ldr	r3, [pc, #172]	; (ea94 <spi_write_reg+0xdc>)
    e9e6:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e9e8:	46d1      	mov	r9, sl
    e9ea:	e033      	b.n	ea54 <spi_write_reg+0x9c>
    e9ec:	4b2a      	ldr	r3, [pc, #168]	; (ea98 <spi_write_reg+0xe0>)
    e9ee:	781f      	ldrb	r7, [r3, #0]
    e9f0:	e7ee      	b.n	e9d0 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    e9f2:	9805      	ldr	r0, [sp, #20]
    e9f4:	4b29      	ldr	r3, [pc, #164]	; (ea9c <spi_write_reg+0xe4>)
    e9f6:	4798      	blx	r3
    e9f8:	0004      	movs	r4, r0
	if (result != N_OK) {
    e9fa:	2801      	cmp	r0, #1
    e9fc:	d041      	beq.n	ea82 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e9fe:	4a28      	ldr	r2, [pc, #160]	; (eaa0 <spi_write_reg+0xe8>)
    ea00:	4928      	ldr	r1, [pc, #160]	; (eaa4 <spi_write_reg+0xec>)
    ea02:	4829      	ldr	r0, [pc, #164]	; (eaa8 <spi_write_reg+0xf0>)
    ea04:	4e29      	ldr	r6, [pc, #164]	; (eaac <spi_write_reg+0xf4>)
    ea06:	47b0      	blx	r6
    ea08:	9903      	ldr	r1, [sp, #12]
    ea0a:	4829      	ldr	r0, [pc, #164]	; (eab0 <spi_write_reg+0xf8>)
    ea0c:	47b0      	blx	r6
    ea0e:	200d      	movs	r0, #13
    ea10:	4b28      	ldr	r3, [pc, #160]	; (eab4 <spi_write_reg+0xfc>)
    ea12:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    ea14:	2001      	movs	r0, #1
    ea16:	4e28      	ldr	r6, [pc, #160]	; (eab8 <spi_write_reg+0x100>)
    ea18:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ea1a:	2300      	movs	r3, #0
    ea1c:	9300      	str	r3, [sp, #0]
    ea1e:	2200      	movs	r2, #0
    ea20:	2100      	movs	r1, #0
    ea22:	20cf      	movs	r0, #207	; 0xcf
    ea24:	4f1b      	ldr	r7, [pc, #108]	; (ea94 <spi_write_reg+0xdc>)
    ea26:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ea28:	20cf      	movs	r0, #207	; 0xcf
    ea2a:	4b1c      	ldr	r3, [pc, #112]	; (ea9c <spi_write_reg+0xe4>)
    ea2c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    ea2e:	22ea      	movs	r2, #234	; 0xea
    ea30:	0092      	lsls	r2, r2, #2
    ea32:	491c      	ldr	r1, [pc, #112]	; (eaa4 <spi_write_reg+0xec>)
    ea34:	481c      	ldr	r0, [pc, #112]	; (eaa8 <spi_write_reg+0xf0>)
    ea36:	4f1d      	ldr	r7, [pc, #116]	; (eaac <spi_write_reg+0xf4>)
    ea38:	47b8      	blx	r7
    ea3a:	9b04      	ldr	r3, [sp, #16]
    ea3c:	9a03      	ldr	r2, [sp, #12]
    ea3e:	0029      	movs	r1, r5
    ea40:	481e      	ldr	r0, [pc, #120]	; (eabc <spi_write_reg+0x104>)
    ea42:	47b8      	blx	r7
    ea44:	200d      	movs	r0, #13
    ea46:	4b1b      	ldr	r3, [pc, #108]	; (eab4 <spi_write_reg+0xfc>)
    ea48:	4798      	blx	r3
		nm_bsp_sleep(1);
    ea4a:	2001      	movs	r0, #1
    ea4c:	47b0      	blx	r6
    ea4e:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ea50:	2d00      	cmp	r5, #0
    ea52:	d016      	beq.n	ea82 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    ea54:	464b      	mov	r3, r9
    ea56:	9300      	str	r3, [sp, #0]
    ea58:	2304      	movs	r3, #4
    ea5a:	9a04      	ldr	r2, [sp, #16]
    ea5c:	9f03      	ldr	r7, [sp, #12]
    ea5e:	0039      	movs	r1, r7
    ea60:	9805      	ldr	r0, [sp, #20]
    ea62:	47c0      	blx	r8
    ea64:	0004      	movs	r4, r0
	if (result != N_OK) {
    ea66:	2801      	cmp	r0, #1
    ea68:	d0c3      	beq.n	e9f2 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    ea6a:	4a15      	ldr	r2, [pc, #84]	; (eac0 <spi_write_reg+0x108>)
    ea6c:	490d      	ldr	r1, [pc, #52]	; (eaa4 <spi_write_reg+0xec>)
    ea6e:	480e      	ldr	r0, [pc, #56]	; (eaa8 <spi_write_reg+0xf0>)
    ea70:	4e0e      	ldr	r6, [pc, #56]	; (eaac <spi_write_reg+0xf4>)
    ea72:	47b0      	blx	r6
    ea74:	0039      	movs	r1, r7
    ea76:	4813      	ldr	r0, [pc, #76]	; (eac4 <spi_write_reg+0x10c>)
    ea78:	47b0      	blx	r6
    ea7a:	200d      	movs	r0, #13
    ea7c:	4b0d      	ldr	r3, [pc, #52]	; (eab4 <spi_write_reg+0xfc>)
    ea7e:	4798      	blx	r3
		goto _FAIL_;
    ea80:	e7c8      	b.n	ea14 <spi_write_reg+0x5c>
	}

	return result;
}
    ea82:	0020      	movs	r0, r4
    ea84:	b006      	add	sp, #24
    ea86:	bc1c      	pop	{r2, r3, r4}
    ea88:	4690      	mov	r8, r2
    ea8a:	4699      	mov	r9, r3
    ea8c:	46a2      	mov	sl, r4
    ea8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea90:	0001a07c 	.word	0x0001a07c
    ea94:	0000e601 	.word	0x0000e601
    ea98:	0001a07d 	.word	0x0001a07d
    ea9c:	0000e7a1 	.word	0x0000e7a1
    eaa0:	00000395 	.word	0x00000395
    eaa4:	0001a0c4 	.word	0x0001a0c4
    eaa8:	000199bc 	.word	0x000199bc
    eaac:	00017b29 	.word	0x00017b29
    eab0:	0001a6fc 	.word	0x0001a6fc
    eab4:	00017b5d 	.word	0x00017b5d
    eab8:	0000cac1 	.word	0x0000cac1
    eabc:	0001a734 	.word	0x0001a734
    eac0:	0000038f 	.word	0x0000038f
    eac4:	0001a6d0 	.word	0x0001a6d0

0000eac8 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    eac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaca:	46de      	mov	lr, fp
    eacc:	4657      	mov	r7, sl
    eace:	464e      	mov	r6, r9
    ead0:	4645      	mov	r5, r8
    ead2:	b5e0      	push	{r5, r6, r7, lr}
    ead4:	b087      	sub	sp, #28
    ead6:	9002      	str	r0, [sp, #8]
    ead8:	468b      	mov	fp, r1
    eada:	28ff      	cmp	r0, #255	; 0xff
    eadc:	d80f      	bhi.n	eafe <spi_read_reg+0x36>
    eade:	4b41      	ldr	r3, [pc, #260]	; (ebe4 <spi_read_reg+0x11c>)
    eae0:	781f      	ldrb	r7, [r3, #0]
    eae2:	b2fb      	uxtb	r3, r7
    eae4:	9303      	str	r3, [sp, #12]
    eae6:	2300      	movs	r3, #0
    eae8:	22ff      	movs	r2, #255	; 0xff
    eaea:	9902      	ldr	r1, [sp, #8]
    eaec:	428a      	cmp	r2, r1
    eaee:	415b      	adcs	r3, r3
    eaf0:	b2db      	uxtb	r3, r3
    eaf2:	469a      	mov	sl, r3
    eaf4:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    eaf6:	4b3c      	ldr	r3, [pc, #240]	; (ebe8 <spi_read_reg+0x120>)
    eaf8:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    eafa:	46d1      	mov	r9, sl
    eafc:	e031      	b.n	eb62 <spi_read_reg+0x9a>
    eafe:	4b3b      	ldr	r3, [pc, #236]	; (ebec <spi_read_reg+0x124>)
    eb00:	781f      	ldrb	r7, [r3, #0]
    eb02:	e7ee      	b.n	eae2 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    eb04:	9803      	ldr	r0, [sp, #12]
    eb06:	4b3a      	ldr	r3, [pc, #232]	; (ebf0 <spi_read_reg+0x128>)
    eb08:	4798      	blx	r3
    eb0a:	0004      	movs	r4, r0
	if (result != N_OK) {
    eb0c:	2801      	cmp	r0, #1
    eb0e:	d040      	beq.n	eb92 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    eb10:	4a38      	ldr	r2, [pc, #224]	; (ebf4 <spi_read_reg+0x12c>)
    eb12:	4939      	ldr	r1, [pc, #228]	; (ebf8 <spi_read_reg+0x130>)
    eb14:	4839      	ldr	r0, [pc, #228]	; (ebfc <spi_read_reg+0x134>)
    eb16:	4e3a      	ldr	r6, [pc, #232]	; (ec00 <spi_read_reg+0x138>)
    eb18:	47b0      	blx	r6
    eb1a:	9902      	ldr	r1, [sp, #8]
    eb1c:	4839      	ldr	r0, [pc, #228]	; (ec04 <spi_read_reg+0x13c>)
    eb1e:	47b0      	blx	r6
    eb20:	200d      	movs	r0, #13
    eb22:	4b39      	ldr	r3, [pc, #228]	; (ec08 <spi_read_reg+0x140>)
    eb24:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    eb26:	2001      	movs	r0, #1
    eb28:	4e38      	ldr	r6, [pc, #224]	; (ec0c <spi_read_reg+0x144>)
    eb2a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    eb2c:	2300      	movs	r3, #0
    eb2e:	9300      	str	r3, [sp, #0]
    eb30:	2200      	movs	r2, #0
    eb32:	2100      	movs	r1, #0
    eb34:	20cf      	movs	r0, #207	; 0xcf
    eb36:	4f2c      	ldr	r7, [pc, #176]	; (ebe8 <spi_read_reg+0x120>)
    eb38:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    eb3a:	20cf      	movs	r0, #207	; 0xcf
    eb3c:	4b2c      	ldr	r3, [pc, #176]	; (ebf0 <spi_read_reg+0x128>)
    eb3e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    eb40:	4a33      	ldr	r2, [pc, #204]	; (ec10 <spi_read_reg+0x148>)
    eb42:	492d      	ldr	r1, [pc, #180]	; (ebf8 <spi_read_reg+0x130>)
    eb44:	482d      	ldr	r0, [pc, #180]	; (ebfc <spi_read_reg+0x134>)
    eb46:	4f2e      	ldr	r7, [pc, #184]	; (ec00 <spi_read_reg+0x138>)
    eb48:	47b8      	blx	r7
    eb4a:	9a02      	ldr	r2, [sp, #8]
    eb4c:	0029      	movs	r1, r5
    eb4e:	4831      	ldr	r0, [pc, #196]	; (ec14 <spi_read_reg+0x14c>)
    eb50:	47b8      	blx	r7
    eb52:	200d      	movs	r0, #13
    eb54:	4b2c      	ldr	r3, [pc, #176]	; (ec08 <spi_read_reg+0x140>)
    eb56:	4798      	blx	r3
		nm_bsp_sleep(1);
    eb58:	2001      	movs	r0, #1
    eb5a:	47b0      	blx	r6
    eb5c:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    eb5e:	2d00      	cmp	r5, #0
    eb60:	d038      	beq.n	ebd4 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    eb62:	464b      	mov	r3, r9
    eb64:	9300      	str	r3, [sp, #0]
    eb66:	2304      	movs	r3, #4
    eb68:	2200      	movs	r2, #0
    eb6a:	9f02      	ldr	r7, [sp, #8]
    eb6c:	0039      	movs	r1, r7
    eb6e:	9803      	ldr	r0, [sp, #12]
    eb70:	47c0      	blx	r8
    eb72:	0004      	movs	r4, r0
	if (result != N_OK) {
    eb74:	2801      	cmp	r0, #1
    eb76:	d0c5      	beq.n	eb04 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    eb78:	2282      	movs	r2, #130	; 0x82
    eb7a:	00d2      	lsls	r2, r2, #3
    eb7c:	491e      	ldr	r1, [pc, #120]	; (ebf8 <spi_read_reg+0x130>)
    eb7e:	481f      	ldr	r0, [pc, #124]	; (ebfc <spi_read_reg+0x134>)
    eb80:	4e1f      	ldr	r6, [pc, #124]	; (ec00 <spi_read_reg+0x138>)
    eb82:	47b0      	blx	r6
    eb84:	0039      	movs	r1, r7
    eb86:	4824      	ldr	r0, [pc, #144]	; (ec18 <spi_read_reg+0x150>)
    eb88:	47b0      	blx	r6
    eb8a:	200d      	movs	r0, #13
    eb8c:	4b1e      	ldr	r3, [pc, #120]	; (ec08 <spi_read_reg+0x140>)
    eb8e:	4798      	blx	r3
		goto _FAIL_;
    eb90:	e7c9      	b.n	eb26 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    eb92:	464a      	mov	r2, r9
    eb94:	2104      	movs	r1, #4
    eb96:	a805      	add	r0, sp, #20
    eb98:	4b20      	ldr	r3, [pc, #128]	; (ec1c <spi_read_reg+0x154>)
    eb9a:	4798      	blx	r3
    eb9c:	0004      	movs	r4, r0
	if (result != N_OK) {
    eb9e:	2801      	cmp	r0, #1
    eba0:	d00b      	beq.n	ebba <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    eba2:	4a1f      	ldr	r2, [pc, #124]	; (ec20 <spi_read_reg+0x158>)
    eba4:	4914      	ldr	r1, [pc, #80]	; (ebf8 <spi_read_reg+0x130>)
    eba6:	4815      	ldr	r0, [pc, #84]	; (ebfc <spi_read_reg+0x134>)
    eba8:	4b15      	ldr	r3, [pc, #84]	; (ec00 <spi_read_reg+0x138>)
    ebaa:	4798      	blx	r3
    ebac:	481d      	ldr	r0, [pc, #116]	; (ec24 <spi_read_reg+0x15c>)
    ebae:	4b1e      	ldr	r3, [pc, #120]	; (ec28 <spi_read_reg+0x160>)
    ebb0:	4798      	blx	r3
    ebb2:	200d      	movs	r0, #13
    ebb4:	4b14      	ldr	r3, [pc, #80]	; (ec08 <spi_read_reg+0x140>)
    ebb6:	4798      	blx	r3
		goto _FAIL_;
    ebb8:	e7b5      	b.n	eb26 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    ebba:	aa05      	add	r2, sp, #20
    ebbc:	7853      	ldrb	r3, [r2, #1]
    ebbe:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    ebc0:	7891      	ldrb	r1, [r2, #2]
    ebc2:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    ebc4:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    ebc6:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    ebc8:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    ebca:	78d2      	ldrb	r2, [r2, #3]
    ebcc:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    ebce:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    ebd0:	465a      	mov	r2, fp
    ebd2:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    ebd4:	0020      	movs	r0, r4
    ebd6:	b007      	add	sp, #28
    ebd8:	bc3c      	pop	{r2, r3, r4, r5}
    ebda:	4690      	mov	r8, r2
    ebdc:	4699      	mov	r9, r3
    ebde:	46a2      	mov	sl, r4
    ebe0:	46ab      	mov	fp, r5
    ebe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebe4:	0001a07e 	.word	0x0001a07e
    ebe8:	0000e601 	.word	0x0000e601
    ebec:	0001a07f 	.word	0x0001a07f
    ebf0:	0000e7a1 	.word	0x0000e7a1
    ebf4:	00000416 	.word	0x00000416
    ebf8:	0001a0e4 	.word	0x0001a0e4
    ebfc:	000199bc 	.word	0x000199bc
    ec00:	00017b29 	.word	0x00017b29
    ec04:	0001a664 	.word	0x0001a664
    ec08:	00017b5d 	.word	0x00017b5d
    ec0c:	0000cac1 	.word	0x0000cac1
    ec10:	00000435 	.word	0x00000435
    ec14:	0001a6b8 	.word	0x0001a6b8
    ec18:	0001a638 	.word	0x0001a638
    ec1c:	0000e875 	.word	0x0000e875
    ec20:	0000041d 	.word	0x0000041d
    ec24:	0001a698 	.word	0x0001a698
    ec28:	00017c45 	.word	0x00017c45

0000ec2c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    ec2c:	b510      	push	{r4, lr}
    ec2e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ec30:	2300      	movs	r3, #0
    ec32:	9300      	str	r3, [sp, #0]
    ec34:	2200      	movs	r2, #0
    ec36:	2100      	movs	r1, #0
    ec38:	20cf      	movs	r0, #207	; 0xcf
    ec3a:	4c04      	ldr	r4, [pc, #16]	; (ec4c <nm_spi_reset+0x20>)
    ec3c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    ec3e:	20cf      	movs	r0, #207	; 0xcf
    ec40:	4b03      	ldr	r3, [pc, #12]	; (ec50 <nm_spi_reset+0x24>)
    ec42:	4798      	blx	r3
	return M2M_SUCCESS;
}
    ec44:	2000      	movs	r0, #0
    ec46:	b002      	add	sp, #8
    ec48:	bd10      	pop	{r4, pc}
    ec4a:	46c0      	nop			; (mov r8, r8)
    ec4c:	0000e601 	.word	0x0000e601
    ec50:	0000e7a1 	.word	0x0000e7a1

0000ec54 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    ec54:	2200      	movs	r2, #0
    ec56:	4b02      	ldr	r3, [pc, #8]	; (ec60 <nm_spi_deinit+0xc>)
    ec58:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    ec5a:	2000      	movs	r0, #0
    ec5c:	4770      	bx	lr
    ec5e:	46c0      	nop			; (mov r8, r8)
    ec60:	20000484 	.word	0x20000484

0000ec64 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    ec64:	b500      	push	{lr}
    ec66:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    ec68:	a901      	add	r1, sp, #4
    ec6a:	4b02      	ldr	r3, [pc, #8]	; (ec74 <nm_spi_read_reg+0x10>)
    ec6c:	4798      	blx	r3

	return u32Val;
}
    ec6e:	9801      	ldr	r0, [sp, #4]
    ec70:	b003      	add	sp, #12
    ec72:	bd00      	pop	{pc}
    ec74:	0000eac9 	.word	0x0000eac9

0000ec78 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    ec78:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    ec7a:	4b04      	ldr	r3, [pc, #16]	; (ec8c <nm_spi_read_reg_with_ret+0x14>)
    ec7c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ec7e:	2300      	movs	r3, #0
    ec80:	2801      	cmp	r0, #1
    ec82:	d101      	bne.n	ec88 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    ec84:	0018      	movs	r0, r3
    ec86:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    ec88:	3b06      	subs	r3, #6
    ec8a:	e7fb      	b.n	ec84 <nm_spi_read_reg_with_ret+0xc>
    ec8c:	0000eac9 	.word	0x0000eac9

0000ec90 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ec90:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ec92:	4b04      	ldr	r3, [pc, #16]	; (eca4 <nm_spi_write_reg+0x14>)
    ec94:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ec96:	2300      	movs	r3, #0
    ec98:	2801      	cmp	r0, #1
    ec9a:	d101      	bne.n	eca0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    ec9c:	0018      	movs	r0, r3
    ec9e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    eca0:	3b06      	subs	r3, #6
    eca2:	e7fb      	b.n	ec9c <nm_spi_write_reg+0xc>
    eca4:	0000e9b9 	.word	0x0000e9b9

0000eca8 <nm_spi_init>:
{
    eca8:	b510      	push	{r4, lr}
    ecaa:	b082      	sub	sp, #8
	uint32 reg = 0;
    ecac:	2300      	movs	r3, #0
    ecae:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    ecb0:	4a35      	ldr	r2, [pc, #212]	; (ed88 <nm_spi_init+0xe0>)
    ecb2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    ecb4:	4669      	mov	r1, sp
    ecb6:	4835      	ldr	r0, [pc, #212]	; (ed8c <nm_spi_init+0xe4>)
    ecb8:	4b35      	ldr	r3, [pc, #212]	; (ed90 <nm_spi_init+0xe8>)
    ecba:	4798      	blx	r3
    ecbc:	2800      	cmp	r0, #0
    ecbe:	d028      	beq.n	ed12 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    ecc0:	4b31      	ldr	r3, [pc, #196]	; (ed88 <nm_spi_init+0xe0>)
    ecc2:	781b      	ldrb	r3, [r3, #0]
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d10d      	bne.n	ece4 <nm_spi_init+0x3c>
		reg &= ~0x70;
    ecc8:	337c      	adds	r3, #124	; 0x7c
    ecca:	9900      	ldr	r1, [sp, #0]
    eccc:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    ecce:	3b2c      	subs	r3, #44	; 0x2c
    ecd0:	4319      	orrs	r1, r3
    ecd2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    ecd4:	482d      	ldr	r0, [pc, #180]	; (ed8c <nm_spi_init+0xe4>)
    ecd6:	4b2f      	ldr	r3, [pc, #188]	; (ed94 <nm_spi_init+0xec>)
    ecd8:	4798      	blx	r3
    ecda:	1e04      	subs	r4, r0, #0
    ecdc:	d03a      	beq.n	ed54 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    ecde:	2201      	movs	r2, #1
    ece0:	4b29      	ldr	r3, [pc, #164]	; (ed88 <nm_spi_init+0xe0>)
    ece2:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    ece4:	a901      	add	r1, sp, #4
    ece6:	2080      	movs	r0, #128	; 0x80
    ece8:	0140      	lsls	r0, r0, #5
    ecea:	4b29      	ldr	r3, [pc, #164]	; (ed90 <nm_spi_init+0xe8>)
    ecec:	4798      	blx	r3
    ecee:	2800      	cmp	r0, #0
    ecf0:	d03c      	beq.n	ed6c <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    ecf2:	4c26      	ldr	r4, [pc, #152]	; (ed8c <nm_spi_init+0xe4>)
    ecf4:	0020      	movs	r0, r4
    ecf6:	4b28      	ldr	r3, [pc, #160]	; (ed98 <nm_spi_init+0xf0>)
    ecf8:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    ecfa:	2370      	movs	r3, #112	; 0x70
    ecfc:	0001      	movs	r1, r0
    ecfe:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    ed00:	2050      	movs	r0, #80	; 0x50
    ed02:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    ed04:	0020      	movs	r0, r4
    ed06:	4b25      	ldr	r3, [pc, #148]	; (ed9c <nm_spi_init+0xf4>)
    ed08:	4798      	blx	r3
	return M2M_SUCCESS;
    ed0a:	2400      	movs	r4, #0
}
    ed0c:	0020      	movs	r0, r4
    ed0e:	b002      	add	sp, #8
    ed10:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    ed12:	2201      	movs	r2, #1
    ed14:	4b1c      	ldr	r3, [pc, #112]	; (ed88 <nm_spi_init+0xe0>)
    ed16:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    ed18:	2298      	movs	r2, #152	; 0x98
    ed1a:	00d2      	lsls	r2, r2, #3
    ed1c:	4920      	ldr	r1, [pc, #128]	; (eda0 <nm_spi_init+0xf8>)
    ed1e:	4821      	ldr	r0, [pc, #132]	; (eda4 <nm_spi_init+0xfc>)
    ed20:	4b21      	ldr	r3, [pc, #132]	; (eda8 <nm_spi_init+0x100>)
    ed22:	4798      	blx	r3
    ed24:	4821      	ldr	r0, [pc, #132]	; (edac <nm_spi_init+0x104>)
    ed26:	4b22      	ldr	r3, [pc, #136]	; (edb0 <nm_spi_init+0x108>)
    ed28:	4798      	blx	r3
    ed2a:	200d      	movs	r0, #13
    ed2c:	4b21      	ldr	r3, [pc, #132]	; (edb4 <nm_spi_init+0x10c>)
    ed2e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    ed30:	4669      	mov	r1, sp
    ed32:	4816      	ldr	r0, [pc, #88]	; (ed8c <nm_spi_init+0xe4>)
    ed34:	4b16      	ldr	r3, [pc, #88]	; (ed90 <nm_spi_init+0xe8>)
    ed36:	4798      	blx	r3
    ed38:	1e04      	subs	r4, r0, #0
    ed3a:	d1c1      	bne.n	ecc0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    ed3c:	4a1e      	ldr	r2, [pc, #120]	; (edb8 <nm_spi_init+0x110>)
    ed3e:	4918      	ldr	r1, [pc, #96]	; (eda0 <nm_spi_init+0xf8>)
    ed40:	4818      	ldr	r0, [pc, #96]	; (eda4 <nm_spi_init+0xfc>)
    ed42:	4b19      	ldr	r3, [pc, #100]	; (eda8 <nm_spi_init+0x100>)
    ed44:	4798      	blx	r3
    ed46:	481d      	ldr	r0, [pc, #116]	; (edbc <nm_spi_init+0x114>)
    ed48:	4b19      	ldr	r3, [pc, #100]	; (edb0 <nm_spi_init+0x108>)
    ed4a:	4798      	blx	r3
    ed4c:	200d      	movs	r0, #13
    ed4e:	4b19      	ldr	r3, [pc, #100]	; (edb4 <nm_spi_init+0x10c>)
    ed50:	4798      	blx	r3
			return 0;
    ed52:	e7db      	b.n	ed0c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    ed54:	4a1a      	ldr	r2, [pc, #104]	; (edc0 <nm_spi_init+0x118>)
    ed56:	4912      	ldr	r1, [pc, #72]	; (eda0 <nm_spi_init+0xf8>)
    ed58:	4812      	ldr	r0, [pc, #72]	; (eda4 <nm_spi_init+0xfc>)
    ed5a:	4b13      	ldr	r3, [pc, #76]	; (eda8 <nm_spi_init+0x100>)
    ed5c:	4798      	blx	r3
    ed5e:	4819      	ldr	r0, [pc, #100]	; (edc4 <nm_spi_init+0x11c>)
    ed60:	4b13      	ldr	r3, [pc, #76]	; (edb0 <nm_spi_init+0x108>)
    ed62:	4798      	blx	r3
    ed64:	200d      	movs	r0, #13
    ed66:	4b13      	ldr	r3, [pc, #76]	; (edb4 <nm_spi_init+0x10c>)
    ed68:	4798      	blx	r3
			return 0;
    ed6a:	e7cf      	b.n	ed0c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ed6c:	4a16      	ldr	r2, [pc, #88]	; (edc8 <nm_spi_init+0x120>)
    ed6e:	490c      	ldr	r1, [pc, #48]	; (eda0 <nm_spi_init+0xf8>)
    ed70:	480c      	ldr	r0, [pc, #48]	; (eda4 <nm_spi_init+0xfc>)
    ed72:	4b0d      	ldr	r3, [pc, #52]	; (eda8 <nm_spi_init+0x100>)
    ed74:	4798      	blx	r3
    ed76:	4815      	ldr	r0, [pc, #84]	; (edcc <nm_spi_init+0x124>)
    ed78:	4b0d      	ldr	r3, [pc, #52]	; (edb0 <nm_spi_init+0x108>)
    ed7a:	4798      	blx	r3
    ed7c:	200d      	movs	r0, #13
    ed7e:	4b0d      	ldr	r3, [pc, #52]	; (edb4 <nm_spi_init+0x10c>)
    ed80:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ed82:	2406      	movs	r4, #6
    ed84:	4264      	negs	r4, r4
    ed86:	e7c1      	b.n	ed0c <nm_spi_init+0x64>
    ed88:	20000484 	.word	0x20000484
    ed8c:	0000e824 	.word	0x0000e824
    ed90:	0000eac9 	.word	0x0000eac9
    ed94:	0000e9b9 	.word	0x0000e9b9
    ed98:	0000ec65 	.word	0x0000ec65
    ed9c:	0000ec91 	.word	0x0000ec91
    eda0:	0001a100 	.word	0x0001a100
    eda4:	000199bc 	.word	0x000199bc
    eda8:	00017b29 	.word	0x00017b29
    edac:	0001a20c 	.word	0x0001a20c
    edb0:	00017c45 	.word	0x00017c45
    edb4:	00017b5d 	.word	0x00017b5d
    edb8:	000004c3 	.word	0x000004c3
    edbc:	0001a25c 	.word	0x0001a25c
    edc0:	000004cd 	.word	0x000004cd
    edc4:	0001a288 	.word	0x0001a288
    edc8:	000004d7 	.word	0x000004d7
    edcc:	0001a2bc 	.word	0x0001a2bc

0000edd0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    edd2:	46de      	mov	lr, fp
    edd4:	4657      	mov	r7, sl
    edd6:	464e      	mov	r6, r9
    edd8:	4645      	mov	r5, r8
    edda:	b5e0      	push	{r5, r6, r7, lr}
    eddc:	b087      	sub	sp, #28
    edde:	9002      	str	r0, [sp, #8]
    ede0:	9103      	str	r1, [sp, #12]
    ede2:	0016      	movs	r6, r2
    ede4:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    ede6:	2300      	movs	r3, #0
    ede8:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    edea:	2400      	movs	r4, #0
    edec:	4b3e      	ldr	r3, [pc, #248]	; (eee8 <nm_spi_read_block+0x118>)
    edee:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    edf0:	46a9      	mov	r9, r5
    edf2:	e037      	b.n	ee64 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    edf4:	2301      	movs	r3, #1
    edf6:	469b      	mov	fp, r3
		size = 2;
    edf8:	3601      	adds	r6, #1
    edfa:	e035      	b.n	ee68 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    edfc:	20c8      	movs	r0, #200	; 0xc8
    edfe:	4b3b      	ldr	r3, [pc, #236]	; (eeec <nm_spi_read_block+0x11c>)
    ee00:	4798      	blx	r3
	if (result != N_OK) {
    ee02:	2801      	cmp	r0, #1
    ee04:	d045      	beq.n	ee92 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    ee06:	4a3a      	ldr	r2, [pc, #232]	; (eef0 <nm_spi_read_block+0x120>)
    ee08:	493a      	ldr	r1, [pc, #232]	; (eef4 <nm_spi_read_block+0x124>)
    ee0a:	483b      	ldr	r0, [pc, #236]	; (eef8 <nm_spi_read_block+0x128>)
    ee0c:	4f3b      	ldr	r7, [pc, #236]	; (eefc <nm_spi_read_block+0x12c>)
    ee0e:	47b8      	blx	r7
    ee10:	9902      	ldr	r1, [sp, #8]
    ee12:	483b      	ldr	r0, [pc, #236]	; (ef00 <nm_spi_read_block+0x130>)
    ee14:	47b8      	blx	r7
    ee16:	200d      	movs	r0, #13
    ee18:	4b3a      	ldr	r3, [pc, #232]	; (ef04 <nm_spi_read_block+0x134>)
    ee1a:	4798      	blx	r3
		nm_bsp_sleep(1);
    ee1c:	2001      	movs	r0, #1
    ee1e:	4f3a      	ldr	r7, [pc, #232]	; (ef08 <nm_spi_read_block+0x138>)
    ee20:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ee22:	9400      	str	r4, [sp, #0]
    ee24:	0023      	movs	r3, r4
    ee26:	0022      	movs	r2, r4
    ee28:	0021      	movs	r1, r4
    ee2a:	20cf      	movs	r0, #207	; 0xcf
    ee2c:	4d2e      	ldr	r5, [pc, #184]	; (eee8 <nm_spi_read_block+0x118>)
    ee2e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    ee30:	20cf      	movs	r0, #207	; 0xcf
    ee32:	4b2e      	ldr	r3, [pc, #184]	; (eeec <nm_spi_read_block+0x11c>)
    ee34:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ee36:	4a35      	ldr	r2, [pc, #212]	; (ef0c <nm_spi_read_block+0x13c>)
    ee38:	492e      	ldr	r1, [pc, #184]	; (eef4 <nm_spi_read_block+0x124>)
    ee3a:	482f      	ldr	r0, [pc, #188]	; (eef8 <nm_spi_read_block+0x128>)
    ee3c:	4b2f      	ldr	r3, [pc, #188]	; (eefc <nm_spi_read_block+0x12c>)
    ee3e:	469a      	mov	sl, r3
    ee40:	4798      	blx	r3
    ee42:	0033      	movs	r3, r6
    ee44:	9a02      	ldr	r2, [sp, #8]
    ee46:	4649      	mov	r1, r9
    ee48:	4831      	ldr	r0, [pc, #196]	; (ef10 <nm_spi_read_block+0x140>)
    ee4a:	47d0      	blx	sl
    ee4c:	200d      	movs	r0, #13
    ee4e:	4b2d      	ldr	r3, [pc, #180]	; (ef04 <nm_spi_read_block+0x134>)
    ee50:	4798      	blx	r3
		nm_bsp_sleep(1);
    ee52:	2001      	movs	r0, #1
    ee54:	47b8      	blx	r7
    ee56:	2301      	movs	r3, #1
    ee58:	425b      	negs	r3, r3
    ee5a:	469c      	mov	ip, r3
    ee5c:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    ee5e:	464b      	mov	r3, r9
    ee60:	2b00      	cmp	r3, #0
    ee62:	d038      	beq.n	eed6 <nm_spi_read_block+0x106>
	if (size == 1)
    ee64:	2e01      	cmp	r6, #1
    ee66:	d0c5      	beq.n	edf4 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    ee68:	9400      	str	r4, [sp, #0]
    ee6a:	0033      	movs	r3, r6
    ee6c:	0022      	movs	r2, r4
    ee6e:	9d02      	ldr	r5, [sp, #8]
    ee70:	0029      	movs	r1, r5
    ee72:	20c8      	movs	r0, #200	; 0xc8
    ee74:	47c0      	blx	r8
	if (result != N_OK) {
    ee76:	2801      	cmp	r0, #1
    ee78:	d0c0      	beq.n	edfc <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    ee7a:	4a26      	ldr	r2, [pc, #152]	; (ef14 <nm_spi_read_block+0x144>)
    ee7c:	491d      	ldr	r1, [pc, #116]	; (eef4 <nm_spi_read_block+0x124>)
    ee7e:	481e      	ldr	r0, [pc, #120]	; (eef8 <nm_spi_read_block+0x128>)
    ee80:	4f1e      	ldr	r7, [pc, #120]	; (eefc <nm_spi_read_block+0x12c>)
    ee82:	47b8      	blx	r7
    ee84:	0029      	movs	r1, r5
    ee86:	4824      	ldr	r0, [pc, #144]	; (ef18 <nm_spi_read_block+0x148>)
    ee88:	47b8      	blx	r7
    ee8a:	200d      	movs	r0, #13
    ee8c:	4b1d      	ldr	r3, [pc, #116]	; (ef04 <nm_spi_read_block+0x134>)
    ee8e:	4798      	blx	r3
    ee90:	e7c4      	b.n	ee1c <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    ee92:	465b      	mov	r3, fp
    ee94:	2b00      	cmp	r3, #0
    ee96:	d016      	beq.n	eec6 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    ee98:	af05      	add	r7, sp, #20
    ee9a:	0022      	movs	r2, r4
    ee9c:	0031      	movs	r1, r6
    ee9e:	0038      	movs	r0, r7
    eea0:	4b1e      	ldr	r3, [pc, #120]	; (ef1c <nm_spi_read_block+0x14c>)
    eea2:	4798      	blx	r3
		buf[0] = tmp[0];
    eea4:	783b      	ldrb	r3, [r7, #0]
    eea6:	9a03      	ldr	r2, [sp, #12]
    eea8:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    eeaa:	2801      	cmp	r0, #1
    eeac:	d011      	beq.n	eed2 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    eeae:	4a1c      	ldr	r2, [pc, #112]	; (ef20 <nm_spi_read_block+0x150>)
    eeb0:	4910      	ldr	r1, [pc, #64]	; (eef4 <nm_spi_read_block+0x124>)
    eeb2:	4811      	ldr	r0, [pc, #68]	; (eef8 <nm_spi_read_block+0x128>)
    eeb4:	4b11      	ldr	r3, [pc, #68]	; (eefc <nm_spi_read_block+0x12c>)
    eeb6:	4798      	blx	r3
    eeb8:	481a      	ldr	r0, [pc, #104]	; (ef24 <nm_spi_read_block+0x154>)
    eeba:	4b1b      	ldr	r3, [pc, #108]	; (ef28 <nm_spi_read_block+0x158>)
    eebc:	4798      	blx	r3
    eebe:	200d      	movs	r0, #13
    eec0:	4b10      	ldr	r3, [pc, #64]	; (ef04 <nm_spi_read_block+0x134>)
    eec2:	4798      	blx	r3
    eec4:	e7aa      	b.n	ee1c <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    eec6:	0022      	movs	r2, r4
    eec8:	0031      	movs	r1, r6
    eeca:	9803      	ldr	r0, [sp, #12]
    eecc:	4b13      	ldr	r3, [pc, #76]	; (ef1c <nm_spi_read_block+0x14c>)
    eece:	4798      	blx	r3
    eed0:	e7eb      	b.n	eeaa <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    eed2:	2000      	movs	r0, #0
    eed4:	e001      	b.n	eeda <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    eed6:	2006      	movs	r0, #6
    eed8:	4240      	negs	r0, r0

	return s8Ret;
}
    eeda:	b007      	add	sp, #28
    eedc:	bc3c      	pop	{r2, r3, r4, r5}
    eede:	4690      	mov	r8, r2
    eee0:	4699      	mov	r9, r3
    eee2:	46a2      	mov	sl, r4
    eee4:	46ab      	mov	fp, r5
    eee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eee8:	0000e601 	.word	0x0000e601
    eeec:	0000e7a1 	.word	0x0000e7a1
    eef0:	0000045c 	.word	0x0000045c
    eef4:	0001a0f4 	.word	0x0001a0f4
    eef8:	000199bc 	.word	0x000199bc
    eefc:	00017b29 	.word	0x00017b29
    ef00:	0001a310 	.word	0x0001a310
    ef04:	00017b5d 	.word	0x00017b5d
    ef08:	0000cac1 	.word	0x0000cac1
    ef0c:	0000047d 	.word	0x0000047d
    ef10:	0001a370 	.word	0x0001a370
    ef14:	00000456 	.word	0x00000456
    ef18:	0001a2e0 	.word	0x0001a2e0
    ef1c:	0000e875 	.word	0x0000e875
    ef20:	0000046c 	.word	0x0000046c
    ef24:	0001a348 	.word	0x0001a348
    ef28:	00017c45 	.word	0x00017c45

0000ef2c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef2e:	46de      	mov	lr, fp
    ef30:	4647      	mov	r7, r8
    ef32:	b580      	push	{r7, lr}
    ef34:	b089      	sub	sp, #36	; 0x24
    ef36:	9004      	str	r0, [sp, #16]
    ef38:	468b      	mov	fp, r1
    ef3a:	9203      	str	r2, [sp, #12]
    ef3c:	260a      	movs	r6, #10
    ef3e:	2780      	movs	r7, #128	; 0x80
    ef40:	01bf      	lsls	r7, r7, #6
    ef42:	466b      	mov	r3, sp
    ef44:	82df      	strh	r7, [r3, #22]
    ef46:	0035      	movs	r5, r6
    ef48:	e02d      	b.n	efa6 <nm_spi_write_block+0x7a>
		size = 2;
    ef4a:	3301      	adds	r3, #1
    ef4c:	9303      	str	r3, [sp, #12]
    ef4e:	e02d      	b.n	efac <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    ef50:	4a82      	ldr	r2, [pc, #520]	; (f15c <nm_spi_write_block+0x230>)
    ef52:	4983      	ldr	r1, [pc, #524]	; (f160 <nm_spi_write_block+0x234>)
    ef54:	4883      	ldr	r0, [pc, #524]	; (f164 <nm_spi_write_block+0x238>)
    ef56:	4c84      	ldr	r4, [pc, #528]	; (f168 <nm_spi_write_block+0x23c>)
    ef58:	47a0      	blx	r4
    ef5a:	0031      	movs	r1, r6
    ef5c:	4883      	ldr	r0, [pc, #524]	; (f16c <nm_spi_write_block+0x240>)
    ef5e:	47a0      	blx	r4
    ef60:	200d      	movs	r0, #13
    ef62:	4b83      	ldr	r3, [pc, #524]	; (f170 <nm_spi_write_block+0x244>)
    ef64:	4798      	blx	r3
		nm_bsp_sleep(1);
    ef66:	2001      	movs	r0, #1
    ef68:	4c82      	ldr	r4, [pc, #520]	; (f174 <nm_spi_write_block+0x248>)
    ef6a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ef6c:	2300      	movs	r3, #0
    ef6e:	9300      	str	r3, [sp, #0]
    ef70:	2200      	movs	r2, #0
    ef72:	2100      	movs	r1, #0
    ef74:	20cf      	movs	r0, #207	; 0xcf
    ef76:	4e80      	ldr	r6, [pc, #512]	; (f178 <nm_spi_write_block+0x24c>)
    ef78:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    ef7a:	20cf      	movs	r0, #207	; 0xcf
    ef7c:	4b7f      	ldr	r3, [pc, #508]	; (f17c <nm_spi_write_block+0x250>)
    ef7e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ef80:	4a7f      	ldr	r2, [pc, #508]	; (f180 <nm_spi_write_block+0x254>)
    ef82:	4977      	ldr	r1, [pc, #476]	; (f160 <nm_spi_write_block+0x234>)
    ef84:	4877      	ldr	r0, [pc, #476]	; (f164 <nm_spi_write_block+0x238>)
    ef86:	4e78      	ldr	r6, [pc, #480]	; (f168 <nm_spi_write_block+0x23c>)
    ef88:	47b0      	blx	r6
    ef8a:	9b03      	ldr	r3, [sp, #12]
    ef8c:	9a04      	ldr	r2, [sp, #16]
    ef8e:	0029      	movs	r1, r5
    ef90:	487c      	ldr	r0, [pc, #496]	; (f184 <nm_spi_write_block+0x258>)
    ef92:	47b0      	blx	r6
    ef94:	200d      	movs	r0, #13
    ef96:	4b76      	ldr	r3, [pc, #472]	; (f170 <nm_spi_write_block+0x244>)
    ef98:	4798      	blx	r3
		nm_bsp_sleep(1);
    ef9a:	2001      	movs	r0, #1
    ef9c:	47a0      	blx	r4
    ef9e:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    efa0:	2d00      	cmp	r5, #0
    efa2:	d100      	bne.n	efa6 <nm_spi_write_block+0x7a>
    efa4:	e0d2      	b.n	f14c <nm_spi_write_block+0x220>
	if (size == 1)
    efa6:	9b03      	ldr	r3, [sp, #12]
    efa8:	2b01      	cmp	r3, #1
    efaa:	d0ce      	beq.n	ef4a <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    efac:	2300      	movs	r3, #0
    efae:	9300      	str	r3, [sp, #0]
    efb0:	9b03      	ldr	r3, [sp, #12]
    efb2:	2200      	movs	r2, #0
    efb4:	9e04      	ldr	r6, [sp, #16]
    efb6:	0031      	movs	r1, r6
    efb8:	20c7      	movs	r0, #199	; 0xc7
    efba:	4c6f      	ldr	r4, [pc, #444]	; (f178 <nm_spi_write_block+0x24c>)
    efbc:	47a0      	blx	r4
	if (result != N_OK) {
    efbe:	2801      	cmp	r0, #1
    efc0:	d1c6      	bne.n	ef50 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    efc2:	20c7      	movs	r0, #199	; 0xc7
    efc4:	4b6d      	ldr	r3, [pc, #436]	; (f17c <nm_spi_write_block+0x250>)
    efc6:	4798      	blx	r3
	if (result != N_OK) {
    efc8:	2801      	cmp	r0, #1
    efca:	d00b      	beq.n	efe4 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    efcc:	4a6e      	ldr	r2, [pc, #440]	; (f188 <nm_spi_write_block+0x25c>)
    efce:	4964      	ldr	r1, [pc, #400]	; (f160 <nm_spi_write_block+0x234>)
    efd0:	4864      	ldr	r0, [pc, #400]	; (f164 <nm_spi_write_block+0x238>)
    efd2:	4c65      	ldr	r4, [pc, #404]	; (f168 <nm_spi_write_block+0x23c>)
    efd4:	47a0      	blx	r4
    efd6:	9904      	ldr	r1, [sp, #16]
    efd8:	486c      	ldr	r0, [pc, #432]	; (f18c <nm_spi_write_block+0x260>)
    efda:	47a0      	blx	r4
    efdc:	200d      	movs	r0, #13
    efde:	4b64      	ldr	r3, [pc, #400]	; (f170 <nm_spi_write_block+0x244>)
    efe0:	4798      	blx	r3
    efe2:	e7c0      	b.n	ef66 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    efe4:	2200      	movs	r2, #0
    efe6:	ab07      	add	r3, sp, #28
    efe8:	801a      	strh	r2, [r3, #0]
    efea:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    efec:	2600      	movs	r6, #0
				order = 0x1;
    efee:	46a8      	mov	r8, r5
    eff0:	0035      	movs	r5, r6
    eff2:	0026      	movs	r6, r4
    eff4:	e021      	b.n	f03a <nm_spi_write_block+0x10e>
				order = 0x2;
    eff6:	2300      	movs	r3, #0
    eff8:	42b7      	cmp	r7, r6
    effa:	415b      	adcs	r3, r3
    effc:	3302      	adds	r3, #2
		cmd |= order;
    effe:	200b      	movs	r0, #11
    f000:	aa04      	add	r2, sp, #16
    f002:	4694      	mov	ip, r2
    f004:	4460      	add	r0, ip
    f006:	2210      	movs	r2, #16
    f008:	4252      	negs	r2, r2
    f00a:	4313      	orrs	r3, r2
    f00c:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    f00e:	2101      	movs	r1, #1
    f010:	4b5f      	ldr	r3, [pc, #380]	; (f190 <nm_spi_write_block+0x264>)
    f012:	4798      	blx	r3
    f014:	2800      	cmp	r0, #0
    f016:	d11d      	bne.n	f054 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    f018:	465b      	mov	r3, fp
    f01a:	1958      	adds	r0, r3, r5
    f01c:	0021      	movs	r1, r4
    f01e:	4b5c      	ldr	r3, [pc, #368]	; (f190 <nm_spi_write_block+0x264>)
    f020:	4798      	blx	r3
    f022:	2800      	cmp	r0, #0
    f024:	d12e      	bne.n	f084 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    f026:	4b5b      	ldr	r3, [pc, #364]	; (f194 <nm_spi_write_block+0x268>)
    f028:	781b      	ldrb	r3, [r3, #0]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d037      	beq.n	f09e <nm_spi_write_block+0x172>
		ix += nbytes;
    f02e:	1965      	adds	r5, r4, r5
    f030:	b22d      	sxth	r5, r5
		sz -= nbytes;
    f032:	1b36      	subs	r6, r6, r4
    f034:	b2b6      	uxth	r6, r6
	} while (sz);
    f036:	2e00      	cmp	r6, #0
    f038:	d052      	beq.n	f0e0 <nm_spi_write_block+0x1b4>
    f03a:	1c34      	adds	r4, r6, #0
    f03c:	42be      	cmp	r6, r7
    f03e:	d901      	bls.n	f044 <nm_spi_write_block+0x118>
    f040:	466b      	mov	r3, sp
    f042:	8adc      	ldrh	r4, [r3, #22]
    f044:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    f046:	2d00      	cmp	r5, #0
    f048:	d1d5      	bne.n	eff6 <nm_spi_write_block+0xca>
				order = 0x3;
    f04a:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    f04c:	42be      	cmp	r6, r7
    f04e:	d9d6      	bls.n	effe <nm_spi_write_block+0xd2>
				order = 0x1;
    f050:	3b02      	subs	r3, #2
    f052:	e7d4      	b.n	effe <nm_spi_write_block+0xd2>
    f054:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    f056:	4a50      	ldr	r2, [pc, #320]	; (f198 <nm_spi_write_block+0x26c>)
    f058:	4950      	ldr	r1, [pc, #320]	; (f19c <nm_spi_write_block+0x270>)
    f05a:	4842      	ldr	r0, [pc, #264]	; (f164 <nm_spi_write_block+0x238>)
    f05c:	4b42      	ldr	r3, [pc, #264]	; (f168 <nm_spi_write_block+0x23c>)
    f05e:	4798      	blx	r3
    f060:	484f      	ldr	r0, [pc, #316]	; (f1a0 <nm_spi_write_block+0x274>)
    f062:	4b50      	ldr	r3, [pc, #320]	; (f1a4 <nm_spi_write_block+0x278>)
    f064:	4798      	blx	r3
    f066:	200d      	movs	r0, #13
    f068:	4b41      	ldr	r3, [pc, #260]	; (f170 <nm_spi_write_block+0x244>)
    f06a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    f06c:	4a4e      	ldr	r2, [pc, #312]	; (f1a8 <nm_spi_write_block+0x27c>)
    f06e:	493c      	ldr	r1, [pc, #240]	; (f160 <nm_spi_write_block+0x234>)
    f070:	483c      	ldr	r0, [pc, #240]	; (f164 <nm_spi_write_block+0x238>)
    f072:	4b3d      	ldr	r3, [pc, #244]	; (f168 <nm_spi_write_block+0x23c>)
    f074:	4798      	blx	r3
    f076:	484d      	ldr	r0, [pc, #308]	; (f1ac <nm_spi_write_block+0x280>)
    f078:	4b4a      	ldr	r3, [pc, #296]	; (f1a4 <nm_spi_write_block+0x278>)
    f07a:	4798      	blx	r3
    f07c:	200d      	movs	r0, #13
    f07e:	4b3c      	ldr	r3, [pc, #240]	; (f170 <nm_spi_write_block+0x244>)
    f080:	4798      	blx	r3
    f082:	e770      	b.n	ef66 <nm_spi_write_block+0x3a>
    f084:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    f086:	4a4a      	ldr	r2, [pc, #296]	; (f1b0 <nm_spi_write_block+0x284>)
    f088:	4944      	ldr	r1, [pc, #272]	; (f19c <nm_spi_write_block+0x270>)
    f08a:	4836      	ldr	r0, [pc, #216]	; (f164 <nm_spi_write_block+0x238>)
    f08c:	4b36      	ldr	r3, [pc, #216]	; (f168 <nm_spi_write_block+0x23c>)
    f08e:	4798      	blx	r3
    f090:	4848      	ldr	r0, [pc, #288]	; (f1b4 <nm_spi_write_block+0x288>)
    f092:	4b44      	ldr	r3, [pc, #272]	; (f1a4 <nm_spi_write_block+0x278>)
    f094:	4798      	blx	r3
    f096:	200d      	movs	r0, #13
    f098:	4b35      	ldr	r3, [pc, #212]	; (f170 <nm_spi_write_block+0x244>)
    f09a:	4798      	blx	r3
    f09c:	e7e6      	b.n	f06c <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    f09e:	2102      	movs	r1, #2
    f0a0:	a807      	add	r0, sp, #28
    f0a2:	4b3b      	ldr	r3, [pc, #236]	; (f190 <nm_spi_write_block+0x264>)
    f0a4:	4798      	blx	r3
    f0a6:	2800      	cmp	r0, #0
    f0a8:	d0c1      	beq.n	f02e <nm_spi_write_block+0x102>
    f0aa:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    f0ac:	22d7      	movs	r2, #215	; 0xd7
    f0ae:	0092      	lsls	r2, r2, #2
    f0b0:	493a      	ldr	r1, [pc, #232]	; (f19c <nm_spi_write_block+0x270>)
    f0b2:	482c      	ldr	r0, [pc, #176]	; (f164 <nm_spi_write_block+0x238>)
    f0b4:	4b2c      	ldr	r3, [pc, #176]	; (f168 <nm_spi_write_block+0x23c>)
    f0b6:	4798      	blx	r3
    f0b8:	483f      	ldr	r0, [pc, #252]	; (f1b8 <nm_spi_write_block+0x28c>)
    f0ba:	4b3a      	ldr	r3, [pc, #232]	; (f1a4 <nm_spi_write_block+0x278>)
    f0bc:	4798      	blx	r3
    f0be:	200d      	movs	r0, #13
    f0c0:	4b2b      	ldr	r3, [pc, #172]	; (f170 <nm_spi_write_block+0x244>)
    f0c2:	4798      	blx	r3
    f0c4:	e7d2      	b.n	f06c <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    f0c6:	229a      	movs	r2, #154	; 0x9a
    f0c8:	0052      	lsls	r2, r2, #1
    f0ca:	493c      	ldr	r1, [pc, #240]	; (f1bc <nm_spi_write_block+0x290>)
    f0cc:	4825      	ldr	r0, [pc, #148]	; (f164 <nm_spi_write_block+0x238>)
    f0ce:	4b26      	ldr	r3, [pc, #152]	; (f168 <nm_spi_write_block+0x23c>)
    f0d0:	4798      	blx	r3
    f0d2:	483b      	ldr	r0, [pc, #236]	; (f1c0 <nm_spi_write_block+0x294>)
    f0d4:	4b33      	ldr	r3, [pc, #204]	; (f1a4 <nm_spi_write_block+0x278>)
    f0d6:	4798      	blx	r3
    f0d8:	200d      	movs	r0, #13
    f0da:	4b25      	ldr	r3, [pc, #148]	; (f170 <nm_spi_write_block+0x244>)
    f0dc:	4798      	blx	r3
    f0de:	e027      	b.n	f130 <nm_spi_write_block+0x204>
    f0e0:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    f0e2:	4b2c      	ldr	r3, [pc, #176]	; (f194 <nm_spi_write_block+0x268>)
    f0e4:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    f0e6:	1e63      	subs	r3, r4, #1
    f0e8:	419c      	sbcs	r4, r3
    f0ea:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    f0ec:	b2a1      	uxth	r1, r4
    f0ee:	a807      	add	r0, sp, #28
    f0f0:	4b34      	ldr	r3, [pc, #208]	; (f1c4 <nm_spi_write_block+0x298>)
    f0f2:	4798      	blx	r3
    f0f4:	2800      	cmp	r0, #0
    f0f6:	d1e6      	bne.n	f0c6 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    f0f8:	ab08      	add	r3, sp, #32
    f0fa:	191b      	adds	r3, r3, r4
    f0fc:	3b05      	subs	r3, #5
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	2b00      	cmp	r3, #0
    f102:	d106      	bne.n	f112 <nm_spi_write_block+0x1e6>
    f104:	ab08      	add	r3, sp, #32
    f106:	469c      	mov	ip, r3
    f108:	4464      	add	r4, ip
    f10a:	3c06      	subs	r4, #6
    f10c:	7823      	ldrb	r3, [r4, #0]
    f10e:	2bc3      	cmp	r3, #195	; 0xc3
    f110:	d01a      	beq.n	f148 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    f112:	223c      	movs	r2, #60	; 0x3c
    f114:	32ff      	adds	r2, #255	; 0xff
    f116:	4929      	ldr	r1, [pc, #164]	; (f1bc <nm_spi_write_block+0x290>)
    f118:	4812      	ldr	r0, [pc, #72]	; (f164 <nm_spi_write_block+0x238>)
    f11a:	4c13      	ldr	r4, [pc, #76]	; (f168 <nm_spi_write_block+0x23c>)
    f11c:	47a0      	blx	r4
    f11e:	a907      	add	r1, sp, #28
    f120:	788b      	ldrb	r3, [r1, #2]
    f122:	784a      	ldrb	r2, [r1, #1]
    f124:	7809      	ldrb	r1, [r1, #0]
    f126:	4828      	ldr	r0, [pc, #160]	; (f1c8 <nm_spi_write_block+0x29c>)
    f128:	47a0      	blx	r4
    f12a:	200d      	movs	r0, #13
    f12c:	4b10      	ldr	r3, [pc, #64]	; (f170 <nm_spi_write_block+0x244>)
    f12e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    f130:	4a26      	ldr	r2, [pc, #152]	; (f1cc <nm_spi_write_block+0x2a0>)
    f132:	490b      	ldr	r1, [pc, #44]	; (f160 <nm_spi_write_block+0x234>)
    f134:	480b      	ldr	r0, [pc, #44]	; (f164 <nm_spi_write_block+0x238>)
    f136:	4b0c      	ldr	r3, [pc, #48]	; (f168 <nm_spi_write_block+0x23c>)
    f138:	4798      	blx	r3
    f13a:	481c      	ldr	r0, [pc, #112]	; (f1ac <nm_spi_write_block+0x280>)
    f13c:	4b19      	ldr	r3, [pc, #100]	; (f1a4 <nm_spi_write_block+0x278>)
    f13e:	4798      	blx	r3
    f140:	200d      	movs	r0, #13
    f142:	4b0b      	ldr	r3, [pc, #44]	; (f170 <nm_spi_write_block+0x244>)
    f144:	4798      	blx	r3
    f146:	e70e      	b.n	ef66 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    f148:	2000      	movs	r0, #0
    f14a:	e001      	b.n	f150 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    f14c:	2006      	movs	r0, #6
    f14e:	4240      	negs	r0, r0

	return s8Ret;
}
    f150:	b009      	add	sp, #36	; 0x24
    f152:	bc0c      	pop	{r2, r3}
    f154:	4690      	mov	r8, r2
    f156:	469b      	mov	fp, r3
    f158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f15a:	46c0      	nop			; (mov r8, r8)
    f15c:	000003c3 	.word	0x000003c3
    f160:	0001a0d4 	.word	0x0001a0d4
    f164:	000199bc 	.word	0x000199bc
    f168:	00017b29 	.word	0x00017b29
    f16c:	0001a38c 	.word	0x0001a38c
    f170:	00017b5d 	.word	0x00017b5d
    f174:	0000cac1 	.word	0x0000cac1
    f178:	0000e601 	.word	0x0000e601
    f17c:	0000e7a1 	.word	0x0000e7a1
    f180:	000003eb 	.word	0x000003eb
    f184:	0001a370 	.word	0x0001a370
    f188:	000003c9 	.word	0x000003c9
    f18c:	0001a3bc 	.word	0x0001a3bc
    f190:	0000e5e1 	.word	0x0000e5e1
    f194:	20000484 	.word	0x20000484
    f198:	00000349 	.word	0x00000349
    f19c:	0001a0b4 	.word	0x0001a0b4
    f1a0:	0001a3f4 	.word	0x0001a3f4
    f1a4:	00017c45 	.word	0x00017c45
    f1a8:	000003d9 	.word	0x000003d9
    f1ac:	0001a4e8 	.word	0x0001a4e8
    f1b0:	00000352 	.word	0x00000352
    f1b4:	0001a42c 	.word	0x0001a42c
    f1b8:	0001a460 	.word	0x0001a460
    f1bc:	0001a088 	.word	0x0001a088
    f1c0:	0001a498 	.word	0x0001a498
    f1c4:	0000e781 	.word	0x0000e781
    f1c8:	0001a4b8 	.word	0x0001a4b8
    f1cc:	000003e1 	.word	0x000003e1

0000f1d0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    f1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1d2:	46de      	mov	lr, fp
    f1d4:	4657      	mov	r7, sl
    f1d6:	464e      	mov	r6, r9
    f1d8:	4645      	mov	r5, r8
    f1da:	b5e0      	push	{r5, r6, r7, lr}
    f1dc:	b085      	sub	sp, #20
    f1de:	9001      	str	r0, [sp, #4]
    f1e0:	000e      	movs	r6, r1
    f1e2:	9202      	str	r2, [sp, #8]
    f1e4:	001d      	movs	r5, r3
    f1e6:	ab0e      	add	r3, sp, #56	; 0x38
    f1e8:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    f1ea:	2c00      	cmp	r4, #0
    f1ec:	d064      	beq.n	f2b8 <Socket_ReadSocketData+0xe8>
    f1ee:	0103      	lsls	r3, r0, #4
    f1f0:	4935      	ldr	r1, [pc, #212]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f1f2:	585b      	ldr	r3, [r3, r1]
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d05f      	beq.n	f2b8 <Socket_ReadSocketData+0xe8>
    f1f8:	0101      	lsls	r1, r0, #4
    f1fa:	4b33      	ldr	r3, [pc, #204]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f1fc:	185b      	adds	r3, r3, r1
    f1fe:	889b      	ldrh	r3, [r3, #4]
    f200:	b29b      	uxth	r3, r3
    f202:	2b00      	cmp	r3, #0
    f204:	d058      	beq.n	f2b8 <Socket_ReadSocketData+0xe8>
    f206:	4b30      	ldr	r3, [pc, #192]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f208:	185b      	adds	r3, r3, r1
    f20a:	7a9b      	ldrb	r3, [r3, #10]
    f20c:	2b01      	cmp	r3, #1
    f20e:	d153      	bne.n	f2b8 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    f210:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    f212:	4b2d      	ldr	r3, [pc, #180]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f214:	469b      	mov	fp, r3
    f216:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    f218:	465b      	mov	r3, fp
    f21a:	220a      	movs	r2, #10
    f21c:	4690      	mov	r8, r2
    f21e:	44d8      	add	r8, fp
    f220:	468a      	mov	sl, r1
    f222:	9500      	str	r5, [sp, #0]
    f224:	9303      	str	r3, [sp, #12]
    f226:	e015      	b.n	f254 <Socket_ReadSocketData+0x84>
    f228:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    f22a:	2301      	movs	r3, #1
    f22c:	e01c      	b.n	f268 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f22e:	3301      	adds	r3, #1
    f230:	2200      	movs	r2, #0
    f232:	2100      	movs	r1, #0
    f234:	2000      	movs	r0, #0
    f236:	4c25      	ldr	r4, [pc, #148]	; (f2cc <Socket_ReadSocketData+0xfc>)
    f238:	47a0      	blx	r4
    f23a:	e03d      	b.n	f2b8 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    f23c:	4824      	ldr	r0, [pc, #144]	; (f2d0 <Socket_ReadSocketData+0x100>)
    f23e:	4d25      	ldr	r5, [pc, #148]	; (f2d4 <Socket_ReadSocketData+0x104>)
    f240:	47a8      	blx	r5
    f242:	0021      	movs	r1, r4
    f244:	4824      	ldr	r0, [pc, #144]	; (f2d8 <Socket_ReadSocketData+0x108>)
    f246:	47a8      	blx	r5
    f248:	200d      	movs	r0, #13
    f24a:	4b24      	ldr	r3, [pc, #144]	; (f2dc <Socket_ReadSocketData+0x10c>)
    f24c:	4798      	blx	r3
				break;
    f24e:	e033      	b.n	f2b8 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    f250:	2c00      	cmp	r4, #0
    f252:	d031      	beq.n	f2b8 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    f254:	465b      	mov	r3, fp
    f256:	889b      	ldrh	r3, [r3, #4]
    f258:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    f25a:	b21b      	sxth	r3, r3
    f25c:	2b00      	cmp	r3, #0
    f25e:	dde3      	ble.n	f228 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    f260:	9b03      	ldr	r3, [sp, #12]
    f262:	889d      	ldrh	r5, [r3, #4]
    f264:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    f266:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    f268:	4a17      	ldr	r2, [pc, #92]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f26a:	4651      	mov	r1, sl
    f26c:	5889      	ldr	r1, [r1, r2]
    f26e:	002a      	movs	r2, r5
    f270:	9800      	ldr	r0, [sp, #0]
    f272:	4f16      	ldr	r7, [pc, #88]	; (f2cc <Socket_ReadSocketData+0xfc>)
    f274:	47b8      	blx	r7
    f276:	2800      	cmp	r0, #0
    f278:	d1e0      	bne.n	f23c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    f27a:	4b13      	ldr	r3, [pc, #76]	; (f2c8 <Socket_ReadSocketData+0xf8>)
    f27c:	4652      	mov	r2, sl
    f27e:	58d3      	ldr	r3, [r2, r3]
    f280:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    f282:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    f284:	88f3      	ldrh	r3, [r6, #6]
    f286:	1b5b      	subs	r3, r3, r5
    f288:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    f28a:	4b15      	ldr	r3, [pc, #84]	; (f2e0 <Socket_ReadSocketData+0x110>)
    f28c:	681b      	ldr	r3, [r3, #0]
    f28e:	2b00      	cmp	r3, #0
    f290:	d005      	beq.n	f29e <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    f292:	4b13      	ldr	r3, [pc, #76]	; (f2e0 <Socket_ReadSocketData+0x110>)
    f294:	681b      	ldr	r3, [r3, #0]
    f296:	0032      	movs	r2, r6
    f298:	9902      	ldr	r1, [sp, #8]
    f29a:	9801      	ldr	r0, [sp, #4]
    f29c:	4798      	blx	r3
				u16ReadCount -= u16Read;
    f29e:	1b64      	subs	r4, r4, r5
    f2a0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    f2a2:	9b00      	ldr	r3, [sp, #0]
    f2a4:	469c      	mov	ip, r3
    f2a6:	44ac      	add	ip, r5
    f2a8:	4663      	mov	r3, ip
    f2aa:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    f2ac:	4643      	mov	r3, r8
    f2ae:	781b      	ldrb	r3, [r3, #0]
    f2b0:	2b00      	cmp	r3, #0
    f2b2:	d1cd      	bne.n	f250 <Socket_ReadSocketData+0x80>
    f2b4:	2c00      	cmp	r4, #0
    f2b6:	d1ba      	bne.n	f22e <Socket_ReadSocketData+0x5e>
	}
}
    f2b8:	b005      	add	sp, #20
    f2ba:	bc3c      	pop	{r2, r3, r4, r5}
    f2bc:	4690      	mov	r8, r2
    f2be:	4699      	mov	r9, r3
    f2c0:	46a2      	mov	sl, r4
    f2c2:	46ab      	mov	fp, r5
    f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2c6:	46c0      	nop			; (mov r8, r8)
    f2c8:	2000151c 	.word	0x2000151c
    f2cc:	0000d579 	.word	0x0000d579
    f2d0:	00019cec 	.word	0x00019cec
    f2d4:	00017b29 	.word	0x00017b29
    f2d8:	0001a750 	.word	0x0001a750
    f2dc:	00017b5d 	.word	0x00017b5d
    f2e0:	200015cc 	.word	0x200015cc

0000f2e4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2e6:	46d6      	mov	lr, sl
    f2e8:	464f      	mov	r7, r9
    f2ea:	4646      	mov	r6, r8
    f2ec:	b5c0      	push	{r6, r7, lr}
    f2ee:	b09a      	sub	sp, #104	; 0x68
    f2f0:	000d      	movs	r5, r1
    f2f2:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    f2f4:	2841      	cmp	r0, #65	; 0x41
    f2f6:	d039      	beq.n	f36c <m2m_ip_cb+0x88>
    f2f8:	2854      	cmp	r0, #84	; 0x54
    f2fa:	d037      	beq.n	f36c <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    f2fc:	2842      	cmp	r0, #66	; 0x42
    f2fe:	d053      	beq.n	f3a8 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    f300:	2843      	cmp	r0, #67	; 0x43
    f302:	d06a      	beq.n	f3da <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    f304:	2844      	cmp	r0, #68	; 0x44
    f306:	d100      	bne.n	f30a <m2m_ip_cb+0x26>
    f308:	e0af      	b.n	f46a <m2m_ip_cb+0x186>
    f30a:	284b      	cmp	r0, #75	; 0x4b
    f30c:	d100      	bne.n	f310 <m2m_ip_cb+0x2c>
    f30e:	e0ac      	b.n	f46a <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    f310:	284a      	cmp	r0, #74	; 0x4a
    f312:	d100      	bne.n	f316 <m2m_ip_cb+0x32>
    f314:	e0cf      	b.n	f4b6 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    f316:	2846      	cmp	r0, #70	; 0x46
    f318:	d100      	bne.n	f31c <m2m_ip_cb+0x38>
    f31a:	e0e5      	b.n	f4e8 <m2m_ip_cb+0x204>
    f31c:	2848      	cmp	r0, #72	; 0x48
    f31e:	d100      	bne.n	f322 <m2m_ip_cb+0x3e>
    f320:	e10e      	b.n	f540 <m2m_ip_cb+0x25c>
    f322:	284d      	cmp	r0, #77	; 0x4d
    f324:	d100      	bne.n	f328 <m2m_ip_cb+0x44>
    f326:	e0dc      	b.n	f4e2 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    f328:	2845      	cmp	r0, #69	; 0x45
    f32a:	d100      	bne.n	f32e <m2m_ip_cb+0x4a>
    f32c:	e12c      	b.n	f588 <m2m_ip_cb+0x2a4>
    f32e:	2847      	cmp	r0, #71	; 0x47
    f330:	d100      	bne.n	f334 <m2m_ip_cb+0x50>
    f332:	e14d      	b.n	f5d0 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f334:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    f336:	284c      	cmp	r0, #76	; 0x4c
    f338:	d100      	bne.n	f33c <m2m_ip_cb+0x58>
    f33a:	e126      	b.n	f58a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    f33c:	2852      	cmp	r0, #82	; 0x52
    f33e:	d12d      	bne.n	f39c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    f340:	2301      	movs	r3, #1
    f342:	2214      	movs	r2, #20
    f344:	a909      	add	r1, sp, #36	; 0x24
    f346:	0020      	movs	r0, r4
    f348:	4ca2      	ldr	r4, [pc, #648]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f34a:	47a0      	blx	r4
    f34c:	2800      	cmp	r0, #0
    f34e:	d125      	bne.n	f39c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    f350:	4ba1      	ldr	r3, [pc, #644]	; (f5d8 <m2m_ip_cb+0x2f4>)
    f352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f354:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    f356:	681b      	ldr	r3, [r3, #0]
    f358:	2b00      	cmp	r3, #0
    f35a:	d01f      	beq.n	f39c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    f35c:	4b9e      	ldr	r3, [pc, #632]	; (f5d8 <m2m_ip_cb+0x2f4>)
    f35e:	681c      	ldr	r4, [r3, #0]
    f360:	ab09      	add	r3, sp, #36	; 0x24
    f362:	7c1a      	ldrb	r2, [r3, #16]
    f364:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f366:	9809      	ldr	r0, [sp, #36]	; 0x24
    f368:	47a0      	blx	r4
			}
		}
	}
}
    f36a:	e017      	b.n	f39c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    f36c:	2300      	movs	r3, #0
    f36e:	2204      	movs	r2, #4
    f370:	a909      	add	r1, sp, #36	; 0x24
    f372:	0020      	movs	r0, r4
    f374:	4c97      	ldr	r4, [pc, #604]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f376:	47a0      	blx	r4
    f378:	2800      	cmp	r0, #0
    f37a:	d10f      	bne.n	f39c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    f37c:	ab09      	add	r3, sp, #36	; 0x24
    f37e:	785a      	ldrb	r2, [r3, #1]
    f380:	ab05      	add	r3, sp, #20
    f382:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f384:	4b95      	ldr	r3, [pc, #596]	; (f5dc <m2m_ip_cb+0x2f8>)
    f386:	681b      	ldr	r3, [r3, #0]
    f388:	2b00      	cmp	r3, #0
    f38a:	d007      	beq.n	f39c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    f38c:	4b93      	ldr	r3, [pc, #588]	; (f5dc <m2m_ip_cb+0x2f8>)
    f38e:	681b      	ldr	r3, [r3, #0]
    f390:	aa09      	add	r2, sp, #36	; 0x24
    f392:	2000      	movs	r0, #0
    f394:	5610      	ldrsb	r0, [r2, r0]
    f396:	aa05      	add	r2, sp, #20
    f398:	2101      	movs	r1, #1
    f39a:	4798      	blx	r3
}
    f39c:	b01a      	add	sp, #104	; 0x68
    f39e:	bc1c      	pop	{r2, r3, r4}
    f3a0:	4690      	mov	r8, r2
    f3a2:	4699      	mov	r9, r3
    f3a4:	46a2      	mov	sl, r4
    f3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    f3a8:	2300      	movs	r3, #0
    f3aa:	2204      	movs	r2, #4
    f3ac:	a909      	add	r1, sp, #36	; 0x24
    f3ae:	0020      	movs	r0, r4
    f3b0:	4c88      	ldr	r4, [pc, #544]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f3b2:	47a0      	blx	r4
    f3b4:	2800      	cmp	r0, #0
    f3b6:	d1f1      	bne.n	f39c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    f3b8:	ab09      	add	r3, sp, #36	; 0x24
    f3ba:	785a      	ldrb	r2, [r3, #1]
    f3bc:	ab05      	add	r3, sp, #20
    f3be:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f3c0:	4b86      	ldr	r3, [pc, #536]	; (f5dc <m2m_ip_cb+0x2f8>)
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	2b00      	cmp	r3, #0
    f3c6:	d0e9      	beq.n	f39c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    f3c8:	4b84      	ldr	r3, [pc, #528]	; (f5dc <m2m_ip_cb+0x2f8>)
    f3ca:	681b      	ldr	r3, [r3, #0]
    f3cc:	aa09      	add	r2, sp, #36	; 0x24
    f3ce:	2000      	movs	r0, #0
    f3d0:	5610      	ldrsb	r0, [r2, r0]
    f3d2:	aa05      	add	r2, sp, #20
    f3d4:	2102      	movs	r1, #2
    f3d6:	4798      	blx	r3
    f3d8:	e7e0      	b.n	f39c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    f3da:	2300      	movs	r3, #0
    f3dc:	220c      	movs	r2, #12
    f3de:	a905      	add	r1, sp, #20
    f3e0:	0020      	movs	r0, r4
    f3e2:	4c7c      	ldr	r4, [pc, #496]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f3e4:	47a0      	blx	r4
    f3e6:	2800      	cmp	r0, #0
    f3e8:	d1d8      	bne.n	f39c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    f3ea:	ab05      	add	r3, sp, #20
    f3ec:	2209      	movs	r2, #9
    f3ee:	569a      	ldrsb	r2, [r3, r2]
    f3f0:	2a00      	cmp	r2, #0
    f3f2:	db24      	blt.n	f43e <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    f3f4:	0018      	movs	r0, r3
    f3f6:	2108      	movs	r1, #8
    f3f8:	5659      	ldrsb	r1, [r3, r1]
    f3fa:	4b79      	ldr	r3, [pc, #484]	; (f5e0 <m2m_ip_cb+0x2fc>)
    f3fc:	0109      	lsls	r1, r1, #4
    f3fe:	1859      	adds	r1, r3, r1
    f400:	7ac9      	ldrb	r1, [r1, #11]
    f402:	b2c9      	uxtb	r1, r1
    f404:	0114      	lsls	r4, r2, #4
    f406:	191b      	adds	r3, r3, r4
    f408:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    f40a:	2101      	movs	r1, #1
    f40c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f40e:	8941      	ldrh	r1, [r0, #10]
    f410:	3908      	subs	r1, #8
    f412:	b289      	uxth	r1, r1
    f414:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    f416:	4973      	ldr	r1, [pc, #460]	; (f5e4 <m2m_ip_cb+0x300>)
    f418:	880b      	ldrh	r3, [r1, #0]
    f41a:	3301      	adds	r3, #1
    f41c:	b29b      	uxth	r3, r3
    f41e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    f420:	880b      	ldrh	r3, [r1, #0]
    f422:	b29b      	uxth	r3, r3
    f424:	2b00      	cmp	r3, #0
    f426:	d103      	bne.n	f430 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    f428:	880b      	ldrh	r3, [r1, #0]
    f42a:	3301      	adds	r3, #1
    f42c:	b29b      	uxth	r3, r3
    f42e:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    f430:	4b6c      	ldr	r3, [pc, #432]	; (f5e4 <m2m_ip_cb+0x300>)
    f432:	8819      	ldrh	r1, [r3, #0]
    f434:	b289      	uxth	r1, r1
    f436:	0110      	lsls	r0, r2, #4
    f438:	4b69      	ldr	r3, [pc, #420]	; (f5e0 <m2m_ip_cb+0x2fc>)
    f43a:	181b      	adds	r3, r3, r0
    f43c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    f43e:	ab09      	add	r3, sp, #36	; 0x24
    f440:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    f442:	2202      	movs	r2, #2
    f444:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    f446:	aa05      	add	r2, sp, #20
    f448:	8851      	ldrh	r1, [r2, #2]
    f44a:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    f44c:	9a06      	ldr	r2, [sp, #24]
    f44e:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    f450:	4b62      	ldr	r3, [pc, #392]	; (f5dc <m2m_ip_cb+0x2f8>)
    f452:	681b      	ldr	r3, [r3, #0]
    f454:	2b00      	cmp	r3, #0
    f456:	d0a1      	beq.n	f39c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    f458:	4b60      	ldr	r3, [pc, #384]	; (f5dc <m2m_ip_cb+0x2f8>)
    f45a:	681b      	ldr	r3, [r3, #0]
    f45c:	aa05      	add	r2, sp, #20
    f45e:	2008      	movs	r0, #8
    f460:	5610      	ldrsb	r0, [r2, r0]
    f462:	aa09      	add	r2, sp, #36	; 0x24
    f464:	2104      	movs	r1, #4
    f466:	4798      	blx	r3
    f468:	e798      	b.n	f39c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    f46a:	2300      	movs	r3, #0
    f46c:	2204      	movs	r2, #4
    f46e:	a909      	add	r1, sp, #36	; 0x24
    f470:	0020      	movs	r0, r4
    f472:	4c58      	ldr	r4, [pc, #352]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f474:	47a0      	blx	r4
    f476:	2800      	cmp	r0, #0
    f478:	d000      	beq.n	f47c <m2m_ip_cb+0x198>
    f47a:	e78f      	b.n	f39c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    f47c:	ab09      	add	r3, sp, #36	; 0x24
    f47e:	2000      	movs	r0, #0
    f480:	5618      	ldrsb	r0, [r3, r0]
    f482:	aa05      	add	r2, sp, #20
    f484:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    f486:	785b      	ldrb	r3, [r3, #1]
    f488:	b25b      	sxtb	r3, r3
    f48a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    f48c:	2b00      	cmp	r3, #0
    f48e:	d107      	bne.n	f4a0 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f490:	ab09      	add	r3, sp, #36	; 0x24
    f492:	885b      	ldrh	r3, [r3, #2]
    f494:	3b08      	subs	r3, #8
    f496:	b29b      	uxth	r3, r3
    f498:	0101      	lsls	r1, r0, #4
    f49a:	4a51      	ldr	r2, [pc, #324]	; (f5e0 <m2m_ip_cb+0x2fc>)
    f49c:	1852      	adds	r2, r2, r1
    f49e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    f4a0:	4b4e      	ldr	r3, [pc, #312]	; (f5dc <m2m_ip_cb+0x2f8>)
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	d100      	bne.n	f4aa <m2m_ip_cb+0x1c6>
    f4a8:	e778      	b.n	f39c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    f4aa:	4b4c      	ldr	r3, [pc, #304]	; (f5dc <m2m_ip_cb+0x2f8>)
    f4ac:	681b      	ldr	r3, [r3, #0]
    f4ae:	aa05      	add	r2, sp, #20
    f4b0:	2105      	movs	r1, #5
    f4b2:	4798      	blx	r3
	{
    f4b4:	e772      	b.n	f39c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    f4b6:	2300      	movs	r3, #0
    f4b8:	2244      	movs	r2, #68	; 0x44
    f4ba:	a909      	add	r1, sp, #36	; 0x24
    f4bc:	0020      	movs	r0, r4
    f4be:	4c45      	ldr	r4, [pc, #276]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f4c0:	47a0      	blx	r4
    f4c2:	2800      	cmp	r0, #0
    f4c4:	d000      	beq.n	f4c8 <m2m_ip_cb+0x1e4>
    f4c6:	e769      	b.n	f39c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    f4c8:	4b47      	ldr	r3, [pc, #284]	; (f5e8 <m2m_ip_cb+0x304>)
    f4ca:	681b      	ldr	r3, [r3, #0]
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d100      	bne.n	f4d2 <m2m_ip_cb+0x1ee>
    f4d0:	e764      	b.n	f39c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    f4d2:	4b45      	ldr	r3, [pc, #276]	; (f5e8 <m2m_ip_cb+0x304>)
    f4d4:	681b      	ldr	r3, [r3, #0]
    f4d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f4d8:	9203      	str	r2, [sp, #12]
    f4da:	0011      	movs	r1, r2
    f4dc:	a809      	add	r0, sp, #36	; 0x24
    f4de:	4798      	blx	r3
    f4e0:	e75c      	b.n	f39c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    f4e2:	2306      	movs	r3, #6
    f4e4:	469a      	mov	sl, r3
    f4e6:	e001      	b.n	f4ec <m2m_ip_cb+0x208>
    f4e8:	2306      	movs	r3, #6
    f4ea:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    f4ec:	2300      	movs	r3, #0
    f4ee:	2210      	movs	r2, #16
    f4f0:	a905      	add	r1, sp, #20
    f4f2:	0020      	movs	r0, r4
    f4f4:	4f37      	ldr	r7, [pc, #220]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f4f6:	47b8      	blx	r7
    f4f8:	2800      	cmp	r0, #0
    f4fa:	d000      	beq.n	f4fe <m2m_ip_cb+0x21a>
    f4fc:	e74e      	b.n	f39c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    f4fe:	aa05      	add	r2, sp, #20
    f500:	200c      	movs	r0, #12
    f502:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    f504:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    f506:	0107      	lsls	r7, r0, #4
    f508:	4935      	ldr	r1, [pc, #212]	; (f5e0 <m2m_ip_cb+0x2fc>)
    f50a:	19c9      	adds	r1, r1, r7
    f50c:	2700      	movs	r7, #0
    f50e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    f510:	2608      	movs	r6, #8
    f512:	5f97      	ldrsh	r7, [r2, r6]
    f514:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    f516:	8957      	ldrh	r7, [r2, #10]
    f518:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    f51a:	af09      	add	r7, sp, #36	; 0x24
    f51c:	8856      	ldrh	r6, [r2, #2]
    f51e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    f520:	9a06      	ldr	r2, [sp, #24]
    f522:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f524:	88ca      	ldrh	r2, [r1, #6]
    f526:	b292      	uxth	r2, r2
    f528:	4293      	cmp	r3, r2
    f52a:	d00c      	beq.n	f546 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    f52c:	2d10      	cmp	r5, #16
    f52e:	d800      	bhi.n	f532 <m2m_ip_cb+0x24e>
    f530:	e734      	b.n	f39c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f532:	2301      	movs	r3, #1
    f534:	2200      	movs	r2, #0
    f536:	2100      	movs	r1, #0
    f538:	2000      	movs	r0, #0
    f53a:	4c26      	ldr	r4, [pc, #152]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f53c:	47a0      	blx	r4
	{
    f53e:	e72d      	b.n	f39c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    f540:	2309      	movs	r3, #9
    f542:	469a      	mov	sl, r3
    f544:	e7d2      	b.n	f4ec <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    f546:	4643      	mov	r3, r8
    f548:	2b00      	cmp	r3, #0
    f54a:	dd01      	ble.n	f550 <m2m_ip_cb+0x26c>
    f54c:	45a8      	cmp	r8, r5
    f54e:	db0f      	blt.n	f570 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    f550:	ab09      	add	r3, sp, #36	; 0x24
    f552:	4642      	mov	r2, r8
    f554:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    f556:	2300      	movs	r3, #0
    f558:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    f55a:	4b20      	ldr	r3, [pc, #128]	; (f5dc <m2m_ip_cb+0x2f8>)
    f55c:	681b      	ldr	r3, [r3, #0]
    f55e:	2b00      	cmp	r3, #0
    f560:	d100      	bne.n	f564 <m2m_ip_cb+0x280>
    f562:	e71b      	b.n	f39c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    f564:	4b1d      	ldr	r3, [pc, #116]	; (f5dc <m2m_ip_cb+0x2f8>)
    f566:	681b      	ldr	r3, [r3, #0]
    f568:	aa09      	add	r2, sp, #36	; 0x24
    f56a:	4651      	mov	r1, sl
    f56c:	4798      	blx	r3
    f56e:	e715      	b.n	f39c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    f570:	0023      	movs	r3, r4
    f572:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    f574:	4642      	mov	r2, r8
    f576:	4669      	mov	r1, sp
    f578:	818a      	strh	r2, [r1, #12]
    f57a:	898a      	ldrh	r2, [r1, #12]
    f57c:	9200      	str	r2, [sp, #0]
    f57e:	4652      	mov	r2, sl
    f580:	0039      	movs	r1, r7
    f582:	4c1a      	ldr	r4, [pc, #104]	; (f5ec <m2m_ip_cb+0x308>)
    f584:	47a0      	blx	r4
    f586:	e709      	b.n	f39c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f588:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    f58a:	2300      	movs	r3, #0
    f58c:	2208      	movs	r2, #8
    f58e:	a909      	add	r1, sp, #36	; 0x24
    f590:	0020      	movs	r0, r4
    f592:	4c10      	ldr	r4, [pc, #64]	; (f5d4 <m2m_ip_cb+0x2f0>)
    f594:	47a0      	blx	r4
    f596:	2800      	cmp	r0, #0
    f598:	d000      	beq.n	f59c <m2m_ip_cb+0x2b8>
    f59a:	e6ff      	b.n	f39c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    f59c:	ab09      	add	r3, sp, #36	; 0x24
    f59e:	2000      	movs	r0, #0
    f5a0:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    f5a2:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    f5a4:	8859      	ldrh	r1, [r3, #2]
    f5a6:	ab05      	add	r3, sp, #20
    f5a8:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f5aa:	0101      	lsls	r1, r0, #4
    f5ac:	4b0c      	ldr	r3, [pc, #48]	; (f5e0 <m2m_ip_cb+0x2fc>)
    f5ae:	185b      	adds	r3, r3, r1
    f5b0:	88db      	ldrh	r3, [r3, #6]
    f5b2:	b29b      	uxth	r3, r3
    f5b4:	429a      	cmp	r2, r3
    f5b6:	d000      	beq.n	f5ba <m2m_ip_cb+0x2d6>
    f5b8:	e6f0      	b.n	f39c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    f5ba:	4b08      	ldr	r3, [pc, #32]	; (f5dc <m2m_ip_cb+0x2f8>)
    f5bc:	681b      	ldr	r3, [r3, #0]
    f5be:	2b00      	cmp	r3, #0
    f5c0:	d100      	bne.n	f5c4 <m2m_ip_cb+0x2e0>
    f5c2:	e6eb      	b.n	f39c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    f5c4:	4b05      	ldr	r3, [pc, #20]	; (f5dc <m2m_ip_cb+0x2f8>)
    f5c6:	681b      	ldr	r3, [r3, #0]
    f5c8:	aa05      	add	r2, sp, #20
    f5ca:	0029      	movs	r1, r5
    f5cc:	4798      	blx	r3
	{
    f5ce:	e6e5      	b.n	f39c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    f5d0:	2508      	movs	r5, #8
    f5d2:	e7da      	b.n	f58a <m2m_ip_cb+0x2a6>
    f5d4:	0000d579 	.word	0x0000d579
    f5d8:	200015d0 	.word	0x200015d0
    f5dc:	200015cc 	.word	0x200015cc
    f5e0:	2000151c 	.word	0x2000151c
    f5e4:	20000486 	.word	0x20000486
    f5e8:	200015d4 	.word	0x200015d4
    f5ec:	0000f1d1 	.word	0x0000f1d1

0000f5f0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    f5f0:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    f5f2:	4b0a      	ldr	r3, [pc, #40]	; (f61c <socketInit+0x2c>)
    f5f4:	781b      	ldrb	r3, [r3, #0]
    f5f6:	2b00      	cmp	r3, #0
    f5f8:	d000      	beq.n	f5fc <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    f5fa:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f5fc:	22b0      	movs	r2, #176	; 0xb0
    f5fe:	2100      	movs	r1, #0
    f600:	4807      	ldr	r0, [pc, #28]	; (f620 <socketInit+0x30>)
    f602:	4b08      	ldr	r3, [pc, #32]	; (f624 <socketInit+0x34>)
    f604:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    f606:	4908      	ldr	r1, [pc, #32]	; (f628 <socketInit+0x38>)
    f608:	2002      	movs	r0, #2
    f60a:	4b08      	ldr	r3, [pc, #32]	; (f62c <socketInit+0x3c>)
    f60c:	4798      	blx	r3
		gbSocketInit	= 1;
    f60e:	2201      	movs	r2, #1
    f610:	4b02      	ldr	r3, [pc, #8]	; (f61c <socketInit+0x2c>)
    f612:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    f614:	2200      	movs	r2, #0
    f616:	4b06      	ldr	r3, [pc, #24]	; (f630 <socketInit+0x40>)
    f618:	801a      	strh	r2, [r3, #0]
}
    f61a:	e7ee      	b.n	f5fa <socketInit+0xa>
    f61c:	20000485 	.word	0x20000485
    f620:	2000151c 	.word	0x2000151c
    f624:	0000ce4d 	.word	0x0000ce4d
    f628:	0000f2e5 	.word	0x0000f2e5
    f62c:	0000d661 	.word	0x0000d661
    f630:	20000486 	.word	0x20000486

0000f634 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    f634:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f636:	22b0      	movs	r2, #176	; 0xb0
    f638:	2100      	movs	r1, #0
    f63a:	4807      	ldr	r0, [pc, #28]	; (f658 <socketDeinit+0x24>)
    f63c:	4b07      	ldr	r3, [pc, #28]	; (f65c <socketDeinit+0x28>)
    f63e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    f640:	2100      	movs	r1, #0
    f642:	2002      	movs	r0, #2
    f644:	4b06      	ldr	r3, [pc, #24]	; (f660 <socketDeinit+0x2c>)
    f646:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    f648:	2300      	movs	r3, #0
    f64a:	4a06      	ldr	r2, [pc, #24]	; (f664 <socketDeinit+0x30>)
    f64c:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    f64e:	4a06      	ldr	r2, [pc, #24]	; (f668 <socketDeinit+0x34>)
    f650:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    f652:	4a06      	ldr	r2, [pc, #24]	; (f66c <socketDeinit+0x38>)
    f654:	7013      	strb	r3, [r2, #0]
}
    f656:	bd10      	pop	{r4, pc}
    f658:	2000151c 	.word	0x2000151c
    f65c:	0000ce4d 	.word	0x0000ce4d
    f660:	0000d661 	.word	0x0000d661
    f664:	200015cc 	.word	0x200015cc
    f668:	200015d4 	.word	0x200015d4
    f66c:	20000485 	.word	0x20000485

0000f670 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    f670:	4b02      	ldr	r3, [pc, #8]	; (f67c <registerSocketCallback+0xc>)
    f672:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    f674:	4b02      	ldr	r3, [pc, #8]	; (f680 <registerSocketCallback+0x10>)
    f676:	6019      	str	r1, [r3, #0]
}
    f678:	4770      	bx	lr
    f67a:	46c0      	nop			; (mov r8, r8)
    f67c:	200015cc 	.word	0x200015cc
    f680:	200015d4 	.word	0x200015d4

0000f684 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    f684:	b5f0      	push	{r4, r5, r6, r7, lr}
    f686:	46d6      	mov	lr, sl
    f688:	4647      	mov	r7, r8
    f68a:	b580      	push	{r7, lr}
    f68c:	b089      	sub	sp, #36	; 0x24
    f68e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    f690:	2802      	cmp	r0, #2
    f692:	d000      	beq.n	f696 <socket+0x12>
    f694:	e09c      	b.n	f7d0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    f696:	2901      	cmp	r1, #1
    f698:	d00a      	beq.n	f6b0 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    f69a:	2902      	cmp	r1, #2
    f69c:	d100      	bne.n	f6a0 <socket+0x1c>
    f69e:	e070      	b.n	f782 <socket+0xfe>
	SOCKET					sock = -1;
    f6a0:	2501      	movs	r5, #1
    f6a2:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    f6a4:	0028      	movs	r0, r5
    f6a6:	b009      	add	sp, #36	; 0x24
    f6a8:	bc0c      	pop	{r2, r3}
    f6aa:	4690      	mov	r8, r2
    f6ac:	469a      	mov	sl, r3
    f6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    f6b0:	4c49      	ldr	r4, [pc, #292]	; (f7d8 <socket+0x154>)
    f6b2:	7827      	ldrb	r7, [r4, #0]
    f6b4:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f6b6:	7826      	ldrb	r6, [r4, #0]
    f6b8:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f6ba:	7820      	ldrb	r0, [r4, #0]
    f6bc:	3001      	adds	r0, #1
    f6be:	3106      	adds	r1, #6
    f6c0:	4b46      	ldr	r3, [pc, #280]	; (f7dc <socket+0x158>)
    f6c2:	4798      	blx	r3
    f6c4:	b2c9      	uxtb	r1, r1
    f6c6:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    f6c8:	0132      	lsls	r2, r6, #4
    f6ca:	4b45      	ldr	r3, [pc, #276]	; (f7e0 <socket+0x15c>)
    f6cc:	189b      	adds	r3, r3, r2
    f6ce:	7a9b      	ldrb	r3, [r3, #10]
    f6d0:	2506      	movs	r5, #6
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d018      	beq.n	f708 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    f6d6:	4e40      	ldr	r6, [pc, #256]	; (f7d8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f6d8:	4b40      	ldr	r3, [pc, #256]	; (f7dc <socket+0x158>)
    f6da:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    f6dc:	4b40      	ldr	r3, [pc, #256]	; (f7e0 <socket+0x15c>)
    f6de:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    f6e0:	7837      	ldrb	r7, [r6, #0]
    f6e2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f6e4:	7834      	ldrb	r4, [r6, #0]
    f6e6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f6e8:	7830      	ldrb	r0, [r6, #0]
    f6ea:	3001      	adds	r0, #1
    f6ec:	2107      	movs	r1, #7
    f6ee:	47d0      	blx	sl
    f6f0:	b2c9      	uxtb	r1, r1
    f6f2:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    f6f4:	0123      	lsls	r3, r4, #4
    f6f6:	4443      	add	r3, r8
    f6f8:	7a9b      	ldrb	r3, [r3, #10]
    f6fa:	2b00      	cmp	r3, #0
    f6fc:	d007      	beq.n	f70e <socket+0x8a>
    f6fe:	3d01      	subs	r5, #1
    f700:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    f702:	2d00      	cmp	r5, #0
    f704:	d1ec      	bne.n	f6e0 <socket+0x5c>
    f706:	e7cb      	b.n	f6a0 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f708:	4b35      	ldr	r3, [pc, #212]	; (f7e0 <socket+0x15c>)
    f70a:	18d4      	adds	r4, r2, r3
    f70c:	e002      	b.n	f714 <socket+0x90>
    f70e:	0124      	lsls	r4, r4, #4
    f710:	4b33      	ldr	r3, [pc, #204]	; (f7e0 <socket+0x15c>)
    f712:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    f714:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    f716:	2d00      	cmp	r5, #0
    f718:	dbc4      	blt.n	f6a4 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    f71a:	2210      	movs	r2, #16
    f71c:	2100      	movs	r1, #0
    f71e:	0020      	movs	r0, r4
    f720:	4b30      	ldr	r3, [pc, #192]	; (f7e4 <socket+0x160>)
    f722:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    f724:	2301      	movs	r3, #1
    f726:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    f728:	4a2f      	ldr	r2, [pc, #188]	; (f7e8 <socket+0x164>)
    f72a:	8813      	ldrh	r3, [r2, #0]
    f72c:	3301      	adds	r3, #1
    f72e:	b29b      	uxth	r3, r3
    f730:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    f732:	8813      	ldrh	r3, [r2, #0]
    f734:	b29b      	uxth	r3, r3
    f736:	2b00      	cmp	r3, #0
    f738:	d103      	bne.n	f742 <socket+0xbe>
				++gu16SessionID;
    f73a:	8813      	ldrh	r3, [r2, #0]
    f73c:	3301      	adds	r3, #1
    f73e:	b29b      	uxth	r3, r3
    f740:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    f742:	4e29      	ldr	r6, [pc, #164]	; (f7e8 <socket+0x164>)
    f744:	8833      	ldrh	r3, [r6, #0]
    f746:	b29b      	uxth	r3, r3
    f748:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    f74a:	4828      	ldr	r0, [pc, #160]	; (f7ec <socket+0x168>)
    f74c:	4f28      	ldr	r7, [pc, #160]	; (f7f0 <socket+0x16c>)
    f74e:	47b8      	blx	r7
    f750:	8832      	ldrh	r2, [r6, #0]
    f752:	b292      	uxth	r2, r2
    f754:	0029      	movs	r1, r5
    f756:	4827      	ldr	r0, [pc, #156]	; (f7f4 <socket+0x170>)
    f758:	47b8      	blx	r7
    f75a:	200d      	movs	r0, #13
    f75c:	4b26      	ldr	r3, [pc, #152]	; (f7f8 <socket+0x174>)
    f75e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    f760:	9b05      	ldr	r3, [sp, #20]
    f762:	07db      	lsls	r3, r3, #31
    f764:	d59e      	bpl.n	f6a4 <socket+0x20>
				strSSLCreate.sslSock = sock;
    f766:	aa07      	add	r2, sp, #28
    f768:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    f76a:	2321      	movs	r3, #33	; 0x21
    f76c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    f76e:	2300      	movs	r3, #0
    f770:	9302      	str	r3, [sp, #8]
    f772:	9301      	str	r3, [sp, #4]
    f774:	9300      	str	r3, [sp, #0]
    f776:	3304      	adds	r3, #4
    f778:	2150      	movs	r1, #80	; 0x50
    f77a:	2002      	movs	r0, #2
    f77c:	4c1f      	ldr	r4, [pc, #124]	; (f7fc <socket+0x178>)
    f77e:	47a0      	blx	r4
    f780:	e790      	b.n	f6a4 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    f782:	4b1f      	ldr	r3, [pc, #124]	; (f800 <socket+0x17c>)
    f784:	781d      	ldrb	r5, [r3, #0]
    f786:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f788:	781c      	ldrb	r4, [r3, #0]
    f78a:	0124      	lsls	r4, r4, #4
    f78c:	4a1d      	ldr	r2, [pc, #116]	; (f804 <socket+0x180>)
    f78e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f790:	7819      	ldrb	r1, [r3, #0]
    f792:	3101      	adds	r1, #1
    f794:	2203      	movs	r2, #3
    f796:	400a      	ands	r2, r1
    f798:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    f79a:	7aa3      	ldrb	r3, [r4, #10]
    f79c:	2b00      	cmp	r3, #0
    f79e:	d014      	beq.n	f7ca <socket+0x146>
    f7a0:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    f7a2:	4917      	ldr	r1, [pc, #92]	; (f800 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f7a4:	4f17      	ldr	r7, [pc, #92]	; (f804 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f7a6:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    f7a8:	780d      	ldrb	r5, [r1, #0]
    f7aa:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f7ac:	780c      	ldrb	r4, [r1, #0]
    f7ae:	0124      	lsls	r4, r4, #4
    f7b0:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f7b2:	780b      	ldrb	r3, [r1, #0]
    f7b4:	3301      	adds	r3, #1
    f7b6:	4003      	ands	r3, r0
    f7b8:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    f7ba:	7aa3      	ldrb	r3, [r4, #10]
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d004      	beq.n	f7ca <socket+0x146>
    f7c0:	3a01      	subs	r2, #1
    f7c2:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    f7c4:	2a00      	cmp	r2, #0
    f7c6:	d1ef      	bne.n	f7a8 <socket+0x124>
    f7c8:	e76a      	b.n	f6a0 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    f7ca:	3507      	adds	r5, #7
    f7cc:	b26d      	sxtb	r5, r5
					break;
    f7ce:	e7a2      	b.n	f716 <socket+0x92>
	SOCKET					sock = -1;
    f7d0:	2501      	movs	r5, #1
    f7d2:	426d      	negs	r5, r5
    f7d4:	e766      	b.n	f6a4 <socket+0x20>
    f7d6:	46c0      	nop			; (mov r8, r8)
    f7d8:	20000488 	.word	0x20000488
    f7dc:	000178b5 	.word	0x000178b5
    f7e0:	2000151c 	.word	0x2000151c
    f7e4:	0000ce4d 	.word	0x0000ce4d
    f7e8:	20000486 	.word	0x20000486
    f7ec:	00019cec 	.word	0x00019cec
    f7f0:	00017b29 	.word	0x00017b29
    f7f4:	0001a77c 	.word	0x0001a77c
    f7f8:	00017b5d 	.word	0x00017b5d
    f7fc:	0000cf61 	.word	0x0000cf61
    f800:	20000489 	.word	0x20000489
    f804:	2000158c 	.word	0x2000158c

0000f808 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    f808:	b570      	push	{r4, r5, r6, lr}
    f80a:	b088      	sub	sp, #32
    f80c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    f80e:	db30      	blt.n	f872 <connect+0x6a>
    f810:	2900      	cmp	r1, #0
    f812:	d031      	beq.n	f878 <connect+0x70>
    f814:	0100      	lsls	r0, r0, #4
    f816:	4b1d      	ldr	r3, [pc, #116]	; (f88c <connect+0x84>)
    f818:	181b      	adds	r3, r3, r0
    f81a:	7a9b      	ldrb	r3, [r3, #10]
    f81c:	2b01      	cmp	r3, #1
    f81e:	d12e      	bne.n	f87e <connect+0x76>
    f820:	2a00      	cmp	r2, #0
    f822:	d02f      	beq.n	f884 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f824:	4b19      	ldr	r3, [pc, #100]	; (f88c <connect+0x84>)
    f826:	181b      	adds	r3, r3, r0
    f828:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    f82a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f82c:	07db      	lsls	r3, r3, #31
    f82e:	d505      	bpl.n	f83c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    f830:	4b16      	ldr	r3, [pc, #88]	; (f88c <connect+0x84>)
    f832:	181b      	adds	r3, r3, r0
    f834:	7ada      	ldrb	r2, [r3, #11]
    f836:	ab05      	add	r3, sp, #20
    f838:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    f83a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    f83c:	ad05      	add	r5, sp, #20
    f83e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    f840:	2208      	movs	r2, #8
    f842:	0028      	movs	r0, r5
    f844:	4b12      	ldr	r3, [pc, #72]	; (f890 <connect+0x88>)
    f846:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    f848:	0124      	lsls	r4, r4, #4
    f84a:	4b10      	ldr	r3, [pc, #64]	; (f88c <connect+0x84>)
    f84c:	191c      	adds	r4, r3, r4
    f84e:	88e3      	ldrh	r3, [r4, #6]
    f850:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    f852:	2300      	movs	r3, #0
    f854:	9302      	str	r3, [sp, #8]
    f856:	9301      	str	r3, [sp, #4]
    f858:	9300      	str	r3, [sp, #0]
    f85a:	330c      	adds	r3, #12
    f85c:	002a      	movs	r2, r5
    f85e:	0031      	movs	r1, r6
    f860:	2002      	movs	r0, #2
    f862:	4c0c      	ldr	r4, [pc, #48]	; (f894 <connect+0x8c>)
    f864:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f866:	2800      	cmp	r0, #0
    f868:	d001      	beq.n	f86e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    f86a:	2009      	movs	r0, #9
    f86c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    f86e:	b008      	add	sp, #32
    f870:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f872:	2006      	movs	r0, #6
    f874:	4240      	negs	r0, r0
    f876:	e7fa      	b.n	f86e <connect+0x66>
    f878:	2006      	movs	r0, #6
    f87a:	4240      	negs	r0, r0
    f87c:	e7f7      	b.n	f86e <connect+0x66>
    f87e:	2006      	movs	r0, #6
    f880:	4240      	negs	r0, r0
    f882:	e7f4      	b.n	f86e <connect+0x66>
    f884:	2006      	movs	r0, #6
    f886:	4240      	negs	r0, r0
    f888:	e7f1      	b.n	f86e <connect+0x66>
    f88a:	46c0      	nop			; (mov r8, r8)
    f88c:	2000151c 	.word	0x2000151c
    f890:	0000ce39 	.word	0x0000ce39
    f894:	0000cf61 	.word	0x0000cf61

0000f898 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    f898:	b530      	push	{r4, r5, lr}
    f89a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    f89c:	2800      	cmp	r0, #0
    f89e:	db36      	blt.n	f90e <send+0x76>
    f8a0:	2900      	cmp	r1, #0
    f8a2:	d037      	beq.n	f914 <send+0x7c>
    f8a4:	23af      	movs	r3, #175	; 0xaf
    f8a6:	00db      	lsls	r3, r3, #3
    f8a8:	429a      	cmp	r2, r3
    f8aa:	d836      	bhi.n	f91a <send+0x82>
    f8ac:	0104      	lsls	r4, r0, #4
    f8ae:	4b1e      	ldr	r3, [pc, #120]	; (f928 <send+0x90>)
    f8b0:	191b      	adds	r3, r3, r4
    f8b2:	7a9b      	ldrb	r3, [r3, #10]
    f8b4:	2b01      	cmp	r3, #1
    f8b6:	d133      	bne.n	f920 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    f8b8:	ab04      	add	r3, sp, #16
    f8ba:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    f8bc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    f8be:	0025      	movs	r5, r4
    f8c0:	4c19      	ldr	r4, [pc, #100]	; (f928 <send+0x90>)
    f8c2:	1964      	adds	r4, r4, r5
    f8c4:	88e4      	ldrh	r4, [r4, #6]
    f8c6:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    f8c8:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    f8ca:	2806      	cmp	r0, #6
    f8cc:	dd00      	ble.n	f8d0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    f8ce:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f8d0:	0104      	lsls	r4, r0, #4
    f8d2:	4b15      	ldr	r3, [pc, #84]	; (f928 <send+0x90>)
    f8d4:	191b      	adds	r3, r3, r4
    f8d6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    f8d8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f8da:	07e4      	lsls	r4, r4, #31
    f8dc:	d505      	bpl.n	f8ea <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    f8de:	0100      	lsls	r0, r0, #4
    f8e0:	4b11      	ldr	r3, [pc, #68]	; (f928 <send+0x90>)
    f8e2:	1818      	adds	r0, r3, r0
    f8e4:	8905      	ldrh	r5, [r0, #8]
    f8e6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    f8e8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    f8ea:	2080      	movs	r0, #128	; 0x80
    f8ec:	4318      	orrs	r0, r3
    f8ee:	9502      	str	r5, [sp, #8]
    f8f0:	9201      	str	r2, [sp, #4]
    f8f2:	9100      	str	r1, [sp, #0]
    f8f4:	2310      	movs	r3, #16
    f8f6:	aa04      	add	r2, sp, #16
    f8f8:	0001      	movs	r1, r0
    f8fa:	2002      	movs	r0, #2
    f8fc:	4c0b      	ldr	r4, [pc, #44]	; (f92c <send+0x94>)
    f8fe:	47a0      	blx	r4
    f900:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    f902:	2800      	cmp	r0, #0
    f904:	d000      	beq.n	f908 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    f906:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    f908:	0018      	movs	r0, r3
    f90a:	b009      	add	sp, #36	; 0x24
    f90c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f90e:	2306      	movs	r3, #6
    f910:	425b      	negs	r3, r3
    f912:	e7f9      	b.n	f908 <send+0x70>
    f914:	2306      	movs	r3, #6
    f916:	425b      	negs	r3, r3
    f918:	e7f6      	b.n	f908 <send+0x70>
    f91a:	2306      	movs	r3, #6
    f91c:	425b      	negs	r3, r3
    f91e:	e7f3      	b.n	f908 <send+0x70>
    f920:	2306      	movs	r3, #6
    f922:	425b      	negs	r3, r3
    f924:	e7f0      	b.n	f908 <send+0x70>
    f926:	46c0      	nop			; (mov r8, r8)
    f928:	2000151c 	.word	0x2000151c
    f92c:	0000cf61 	.word	0x0000cf61

0000f930 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    f930:	b530      	push	{r4, r5, lr}
    f932:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    f934:	2800      	cmp	r0, #0
    f936:	db34      	blt.n	f9a2 <recv+0x72>
    f938:	2900      	cmp	r1, #0
    f93a:	d035      	beq.n	f9a8 <recv+0x78>
    f93c:	2a00      	cmp	r2, #0
    f93e:	d036      	beq.n	f9ae <recv+0x7e>
    f940:	0105      	lsls	r5, r0, #4
    f942:	4c1e      	ldr	r4, [pc, #120]	; (f9bc <recv+0x8c>)
    f944:	1964      	adds	r4, r4, r5
    f946:	7aa4      	ldrb	r4, [r4, #10]
    f948:	2c01      	cmp	r4, #1
    f94a:	d133      	bne.n	f9b4 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    f94c:	4c1b      	ldr	r4, [pc, #108]	; (f9bc <recv+0x8c>)
    f94e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    f950:	1964      	adds	r4, r4, r5
    f952:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    f954:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    f956:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    f958:	2900      	cmp	r1, #0
    f95a:	d11d      	bne.n	f998 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    f95c:	2101      	movs	r1, #1
    f95e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f960:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    f962:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f964:	07d2      	lsls	r2, r2, #31
    f966:	d500      	bpl.n	f96a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    f968:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    f96a:	2b00      	cmp	r3, #0
    f96c:	d117      	bne.n	f99e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    f96e:	3b01      	subs	r3, #1
    f970:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    f972:	aa04      	add	r2, sp, #16
    f974:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    f976:	0100      	lsls	r0, r0, #4
    f978:	4b10      	ldr	r3, [pc, #64]	; (f9bc <recv+0x8c>)
    f97a:	1818      	adds	r0, r3, r0
    f97c:	88c3      	ldrh	r3, [r0, #6]
    f97e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    f980:	2300      	movs	r3, #0
    f982:	9302      	str	r3, [sp, #8]
    f984:	9301      	str	r3, [sp, #4]
    f986:	9300      	str	r3, [sp, #0]
    f988:	3308      	adds	r3, #8
    f98a:	2002      	movs	r0, #2
    f98c:	4c0c      	ldr	r4, [pc, #48]	; (f9c0 <recv+0x90>)
    f98e:	47a0      	blx	r4
    f990:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    f992:	2800      	cmp	r0, #0
    f994:	d000      	beq.n	f998 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    f996:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    f998:	0010      	movs	r0, r2
    f99a:	b007      	add	sp, #28
    f99c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    f99e:	9304      	str	r3, [sp, #16]
    f9a0:	e7e7      	b.n	f972 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f9a2:	2206      	movs	r2, #6
    f9a4:	4252      	negs	r2, r2
    f9a6:	e7f7      	b.n	f998 <recv+0x68>
    f9a8:	2206      	movs	r2, #6
    f9aa:	4252      	negs	r2, r2
    f9ac:	e7f4      	b.n	f998 <recv+0x68>
    f9ae:	2206      	movs	r2, #6
    f9b0:	4252      	negs	r2, r2
    f9b2:	e7f1      	b.n	f998 <recv+0x68>
    f9b4:	2206      	movs	r2, #6
    f9b6:	4252      	negs	r2, r2
    f9b8:	e7ee      	b.n	f998 <recv+0x68>
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	2000151c 	.word	0x2000151c
    f9c0:	0000cf61 	.word	0x0000cf61

0000f9c4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    f9c4:	b530      	push	{r4, r5, lr}
    f9c6:	b087      	sub	sp, #28
    f9c8:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    f9ca:	481e      	ldr	r0, [pc, #120]	; (fa44 <close+0x80>)
    f9cc:	4d1e      	ldr	r5, [pc, #120]	; (fa48 <close+0x84>)
    f9ce:	47a8      	blx	r5
    f9d0:	0021      	movs	r1, r4
    f9d2:	481e      	ldr	r0, [pc, #120]	; (fa4c <close+0x88>)
    f9d4:	47a8      	blx	r5
    f9d6:	200d      	movs	r0, #13
    f9d8:	4b1d      	ldr	r3, [pc, #116]	; (fa50 <close+0x8c>)
    f9da:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    f9dc:	2c00      	cmp	r4, #0
    f9de:	db2a      	blt.n	fa36 <close+0x72>
    f9e0:	0122      	lsls	r2, r4, #4
    f9e2:	4b1c      	ldr	r3, [pc, #112]	; (fa54 <close+0x90>)
    f9e4:	189b      	adds	r3, r3, r2
    f9e6:	7a9b      	ldrb	r3, [r3, #10]
    f9e8:	2b01      	cmp	r3, #1
    f9ea:	d127      	bne.n	fa3c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    f9ec:	a905      	add	r1, sp, #20
    f9ee:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    f9f0:	4b18      	ldr	r3, [pc, #96]	; (fa54 <close+0x90>)
    f9f2:	189b      	adds	r3, r3, r2
    f9f4:	88da      	ldrh	r2, [r3, #6]
    f9f6:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    f9f8:	2200      	movs	r2, #0
    f9fa:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    f9fc:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f9fe:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    fa00:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    fa02:	07db      	lsls	r3, r3, #31
    fa04:	d500      	bpl.n	fa08 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    fa06:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    fa08:	2300      	movs	r3, #0
    fa0a:	9302      	str	r3, [sp, #8]
    fa0c:	9301      	str	r3, [sp, #4]
    fa0e:	9300      	str	r3, [sp, #0]
    fa10:	3304      	adds	r3, #4
    fa12:	aa05      	add	r2, sp, #20
    fa14:	2002      	movs	r0, #2
    fa16:	4d10      	ldr	r5, [pc, #64]	; (fa58 <close+0x94>)
    fa18:	47a8      	blx	r5
    fa1a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    fa1c:	d001      	beq.n	fa22 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    fa1e:	2509      	movs	r5, #9
    fa20:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    fa22:	0124      	lsls	r4, r4, #4
    fa24:	480b      	ldr	r0, [pc, #44]	; (fa54 <close+0x90>)
    fa26:	1820      	adds	r0, r4, r0
    fa28:	2210      	movs	r2, #16
    fa2a:	2100      	movs	r1, #0
    fa2c:	4b0b      	ldr	r3, [pc, #44]	; (fa5c <close+0x98>)
    fa2e:	4798      	blx	r3
	}
	return s8Ret;
}
    fa30:	0028      	movs	r0, r5
    fa32:	b007      	add	sp, #28
    fa34:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    fa36:	2506      	movs	r5, #6
    fa38:	426d      	negs	r5, r5
    fa3a:	e7f9      	b.n	fa30 <close+0x6c>
    fa3c:	2506      	movs	r5, #6
    fa3e:	426d      	negs	r5, r5
    fa40:	e7f6      	b.n	fa30 <close+0x6c>
    fa42:	46c0      	nop			; (mov r8, r8)
    fa44:	00019cec 	.word	0x00019cec
    fa48:	00017b29 	.word	0x00017b29
    fa4c:	0001a764 	.word	0x0001a764
    fa50:	00017b5d 	.word	0x00017b5d
    fa54:	2000151c 	.word	0x2000151c
    fa58:	0000cf61 	.word	0x0000cf61
    fa5c:	0000ce4d 	.word	0x0000ce4d

0000fa60 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    fa60:	b570      	push	{r4, r5, r6, lr}
    fa62:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    fa64:	2300      	movs	r3, #0
    fa66:	9301      	str	r3, [sp, #4]
    fa68:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    fa6a:	2100      	movs	r1, #0
    fa6c:	7802      	ldrb	r2, [r0, #0]
    fa6e:	1c44      	adds	r4, r0, #1
    fa70:	3005      	adds	r0, #5
    fa72:	000b      	movs	r3, r1
    fa74:	e009      	b.n	fa8a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    fa76:	009d      	lsls	r5, r3, #2
    fa78:	195b      	adds	r3, r3, r5
    fa7a:	005b      	lsls	r3, r3, #1
    fa7c:	189b      	adds	r3, r3, r2
    fa7e:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    fa80:	0022      	movs	r2, r4
    fa82:	3401      	adds	r4, #1
			if(j > 4)
    fa84:	42a0      	cmp	r0, r4
    fa86:	d00a      	beq.n	fa9e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    fa88:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    fa8a:	2a2e      	cmp	r2, #46	; 0x2e
    fa8c:	d00a      	beq.n	faa4 <nmi_inet_addr+0x44>
    fa8e:	2a00      	cmp	r2, #0
    fa90:	d00c      	beq.n	faac <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    fa92:	3a30      	subs	r2, #48	; 0x30
    fa94:	b2d2      	uxtb	r2, r2
    fa96:	2a09      	cmp	r2, #9
    fa98:	d9ed      	bls.n	fa76 <nmi_inet_addr+0x16>
				return 0;
    fa9a:	2000      	movs	r0, #0
    fa9c:	e000      	b.n	faa0 <nmi_inet_addr+0x40>
				return 0;
    fa9e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    faa0:	b002      	add	sp, #8
    faa2:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    faa4:	466a      	mov	r2, sp
    faa6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    faa8:	0020      	movs	r0, r4
    faaa:	e002      	b.n	fab2 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    faac:	466a      	mov	r2, sp
    faae:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    fab0:	0020      	movs	r0, r4
    fab2:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    fab4:	2e04      	cmp	r6, #4
    fab6:	d1d9      	bne.n	fa6c <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    fab8:	2204      	movs	r2, #4
    faba:	4669      	mov	r1, sp
    fabc:	a801      	add	r0, sp, #4
    fabe:	4b02      	ldr	r3, [pc, #8]	; (fac8 <nmi_inet_addr+0x68>)
    fac0:	4798      	blx	r3
	return u32IP;
    fac2:	9801      	ldr	r0, [sp, #4]
    fac4:	e7ec      	b.n	faa0 <nmi_inet_addr+0x40>
    fac6:	46c0      	nop			; (mov r8, r8)
    fac8:	0000ce39 	.word	0x0000ce39

0000facc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    facc:	b510      	push	{r4, lr}
    face:	b084      	sub	sp, #16
    fad0:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    fad2:	4b0b      	ldr	r3, [pc, #44]	; (fb00 <gethostbyname+0x34>)
    fad4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    fad6:	b2c3      	uxtb	r3, r0
    fad8:	2b40      	cmp	r3, #64	; 0x40
    fada:	d80d      	bhi.n	faf8 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    fadc:	23ff      	movs	r3, #255	; 0xff
    fade:	4003      	ands	r3, r0
    fae0:	3301      	adds	r3, #1
    fae2:	2200      	movs	r2, #0
    fae4:	9202      	str	r2, [sp, #8]
    fae6:	9201      	str	r2, [sp, #4]
    fae8:	9200      	str	r2, [sp, #0]
    faea:	0022      	movs	r2, r4
    faec:	214a      	movs	r1, #74	; 0x4a
    faee:	2002      	movs	r0, #2
    faf0:	4c04      	ldr	r4, [pc, #16]	; (fb04 <gethostbyname+0x38>)
    faf2:	47a0      	blx	r4
	}
	return s8Err;
}
    faf4:	b004      	add	sp, #16
    faf6:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    faf8:	2006      	movs	r0, #6
    fafa:	4240      	negs	r0, r0
    fafc:	e7fa      	b.n	faf4 <gethostbyname+0x28>
    fafe:	46c0      	nop			; (mov r8, r8)
    fb00:	0000ce5d 	.word	0x0000ce5d
    fb04:	0000cf61 	.word	0x0000cf61

0000fb08 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    fb08:	b570      	push	{r4, r5, r6, lr}
    fb0a:	b082      	sub	sp, #8
    fb0c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    fb0e:	4b2a      	ldr	r3, [pc, #168]	; (fbb8 <spi_flash_enable+0xb0>)
    fb10:	4798      	blx	r3
    fb12:	0500      	lsls	r0, r0, #20
    fb14:	0d00      	lsrs	r0, r0, #20
    fb16:	4b29      	ldr	r3, [pc, #164]	; (fbbc <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    fb18:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    fb1a:	4298      	cmp	r0, r3
    fb1c:	d802      	bhi.n	fb24 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    fb1e:	0028      	movs	r0, r5
    fb20:	b002      	add	sp, #8
    fb22:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    fb24:	a901      	add	r1, sp, #4
    fb26:	4826      	ldr	r0, [pc, #152]	; (fbc0 <spi_flash_enable+0xb8>)
    fb28:	4b26      	ldr	r3, [pc, #152]	; (fbc4 <spi_flash_enable+0xbc>)
    fb2a:	4798      	blx	r3
    fb2c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    fb2e:	d1f6      	bne.n	fb1e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    fb30:	4b25      	ldr	r3, [pc, #148]	; (fbc8 <spi_flash_enable+0xc0>)
    fb32:	9a01      	ldr	r2, [sp, #4]
    fb34:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    fb36:	4925      	ldr	r1, [pc, #148]	; (fbcc <spi_flash_enable+0xc4>)
    fb38:	4319      	orrs	r1, r3
    fb3a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    fb3c:	4820      	ldr	r0, [pc, #128]	; (fbc0 <spi_flash_enable+0xb8>)
    fb3e:	4b24      	ldr	r3, [pc, #144]	; (fbd0 <spi_flash_enable+0xc8>)
    fb40:	4798      	blx	r3
		if(enable) {
    fb42:	2c00      	cmp	r4, #0
    fb44:	d020      	beq.n	fb88 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    fb46:	2100      	movs	r1, #0
    fb48:	4822      	ldr	r0, [pc, #136]	; (fbd4 <spi_flash_enable+0xcc>)
    fb4a:	4c21      	ldr	r4, [pc, #132]	; (fbd0 <spi_flash_enable+0xc8>)
    fb4c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    fb4e:	21ab      	movs	r1, #171	; 0xab
    fb50:	4821      	ldr	r0, [pc, #132]	; (fbd8 <spi_flash_enable+0xd0>)
    fb52:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    fb54:	2101      	movs	r1, #1
    fb56:	4821      	ldr	r0, [pc, #132]	; (fbdc <spi_flash_enable+0xd4>)
    fb58:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    fb5a:	2100      	movs	r1, #0
    fb5c:	4820      	ldr	r0, [pc, #128]	; (fbe0 <spi_flash_enable+0xd8>)
    fb5e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    fb60:	2181      	movs	r1, #129	; 0x81
    fb62:	4820      	ldr	r0, [pc, #128]	; (fbe4 <spi_flash_enable+0xdc>)
    fb64:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    fb66:	4e20      	ldr	r6, [pc, #128]	; (fbe8 <spi_flash_enable+0xe0>)
    fb68:	4c20      	ldr	r4, [pc, #128]	; (fbec <spi_flash_enable+0xe4>)
    fb6a:	0030      	movs	r0, r6
    fb6c:	47a0      	blx	r4
    fb6e:	2801      	cmp	r0, #1
    fb70:	d1fb      	bne.n	fb6a <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    fb72:	4b15      	ldr	r3, [pc, #84]	; (fbc8 <spi_flash_enable+0xc0>)
    fb74:	9a01      	ldr	r2, [sp, #4]
    fb76:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    fb78:	2180      	movs	r1, #128	; 0x80
    fb7a:	0249      	lsls	r1, r1, #9
    fb7c:	4319      	orrs	r1, r3
    fb7e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    fb80:	480f      	ldr	r0, [pc, #60]	; (fbc0 <spi_flash_enable+0xb8>)
    fb82:	4b13      	ldr	r3, [pc, #76]	; (fbd0 <spi_flash_enable+0xc8>)
    fb84:	4798      	blx	r3
    fb86:	e7ca      	b.n	fb1e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    fb88:	2100      	movs	r1, #0
    fb8a:	4812      	ldr	r0, [pc, #72]	; (fbd4 <spi_flash_enable+0xcc>)
    fb8c:	4c10      	ldr	r4, [pc, #64]	; (fbd0 <spi_flash_enable+0xc8>)
    fb8e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    fb90:	21b9      	movs	r1, #185	; 0xb9
    fb92:	4811      	ldr	r0, [pc, #68]	; (fbd8 <spi_flash_enable+0xd0>)
    fb94:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    fb96:	2101      	movs	r1, #1
    fb98:	4810      	ldr	r0, [pc, #64]	; (fbdc <spi_flash_enable+0xd4>)
    fb9a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    fb9c:	2100      	movs	r1, #0
    fb9e:	4810      	ldr	r0, [pc, #64]	; (fbe0 <spi_flash_enable+0xd8>)
    fba0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    fba2:	2181      	movs	r1, #129	; 0x81
    fba4:	480f      	ldr	r0, [pc, #60]	; (fbe4 <spi_flash_enable+0xdc>)
    fba6:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    fba8:	4e0f      	ldr	r6, [pc, #60]	; (fbe8 <spi_flash_enable+0xe0>)
    fbaa:	4c10      	ldr	r4, [pc, #64]	; (fbec <spi_flash_enable+0xe4>)
    fbac:	0030      	movs	r0, r6
    fbae:	47a0      	blx	r4
    fbb0:	2801      	cmp	r0, #1
    fbb2:	d1fb      	bne.n	fbac <spi_flash_enable+0xa4>
    fbb4:	e7dd      	b.n	fb72 <spi_flash_enable+0x6a>
    fbb6:	46c0      	nop			; (mov r8, r8)
    fbb8:	0000de4d 	.word	0x0000de4d
    fbbc:	0000039f 	.word	0x0000039f
    fbc0:	00001410 	.word	0x00001410
    fbc4:	0000e29d 	.word	0x0000e29d
    fbc8:	f8888fff 	.word	0xf8888fff
    fbcc:	01111000 	.word	0x01111000
    fbd0:	0000e2a9 	.word	0x0000e2a9
    fbd4:	00010208 	.word	0x00010208
    fbd8:	0001020c 	.word	0x0001020c
    fbdc:	00010214 	.word	0x00010214
    fbe0:	0001021c 	.word	0x0001021c
    fbe4:	00010204 	.word	0x00010204
    fbe8:	00010218 	.word	0x00010218
    fbec:	0000e291 	.word	0x0000e291

0000fbf0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    fbf0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    fbf2:	2301      	movs	r3, #1
    fbf4:	2800      	cmp	r0, #0
    fbf6:	d001      	beq.n	fbfc <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    fbf8:	0018      	movs	r0, r3
    fbfa:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    fbfc:	4b01      	ldr	r3, [pc, #4]	; (fc04 <mem_test_unit_ready+0x14>)
    fbfe:	4798      	blx	r3
    fc00:	0003      	movs	r3, r0
    fc02:	e7f9      	b.n	fbf8 <mem_test_unit_ready+0x8>
    fc04:	0000c1b9 	.word	0x0000c1b9

0000fc08 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    fc08:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    fc0a:	2301      	movs	r3, #1
    fc0c:	2800      	cmp	r0, #0
    fc0e:	d001      	beq.n	fc14 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    fc10:	0018      	movs	r0, r3
    fc12:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    fc14:	0008      	movs	r0, r1
    fc16:	4b02      	ldr	r3, [pc, #8]	; (fc20 <mem_read_capacity+0x18>)
    fc18:	4798      	blx	r3
    fc1a:	0003      	movs	r3, r0
    fc1c:	e7f8      	b.n	fc10 <mem_read_capacity+0x8>
    fc1e:	46c0      	nop			; (mov r8, r8)
    fc20:	0000c1e9 	.word	0x0000c1e9

0000fc24 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    fc24:	4243      	negs	r3, r0
    fc26:	4158      	adcs	r0, r3
    fc28:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    fc2a:	4770      	bx	lr

0000fc2c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    fc2c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    fc2e:	2301      	movs	r3, #1
    fc30:	2800      	cmp	r0, #0
    fc32:	d001      	beq.n	fc38 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    fc34:	0018      	movs	r0, r3
    fc36:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    fc38:	4b01      	ldr	r3, [pc, #4]	; (fc40 <mem_wr_protect+0x14>)
    fc3a:	4798      	blx	r3
    fc3c:	0003      	movs	r3, r0
    fc3e:	e7f9      	b.n	fc34 <mem_wr_protect+0x8>
    fc40:	0000c1f9 	.word	0x0000c1f9

0000fc44 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    fc44:	b510      	push	{r4, lr}
    fc46:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    fc48:	2301      	movs	r3, #1
    fc4a:	2800      	cmp	r0, #0
    fc4c:	d001      	beq.n	fc52 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    fc4e:	0018      	movs	r0, r3
    fc50:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    fc52:	0011      	movs	r1, r2
    fc54:	0020      	movs	r0, r4
    fc56:	4b02      	ldr	r3, [pc, #8]	; (fc60 <memory_2_ram+0x1c>)
    fc58:	4798      	blx	r3
    fc5a:	0003      	movs	r3, r0
    fc5c:	e7f7      	b.n	fc4e <memory_2_ram+0xa>
    fc5e:	46c0      	nop			; (mov r8, r8)
    fc60:	0000c24d 	.word	0x0000c24d

0000fc64 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    fc64:	b510      	push	{r4, lr}
    fc66:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    fc68:	2301      	movs	r3, #1
    fc6a:	2800      	cmp	r0, #0
    fc6c:	d001      	beq.n	fc72 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    fc6e:	0018      	movs	r0, r3
    fc70:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    fc72:	0011      	movs	r1, r2
    fc74:	0020      	movs	r0, r4
    fc76:	4b02      	ldr	r3, [pc, #8]	; (fc80 <ram_2_memory+0x1c>)
    fc78:	4798      	blx	r3
    fc7a:	0003      	movs	r3, r0
    fc7c:	e7f7      	b.n	fc6e <ram_2_memory+0xa>
    fc7e:	46c0      	nop			; (mov r8, r8)
    fc80:	0000c2a5 	.word	0x0000c2a5

0000fc84 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    fc84:	4b0c      	ldr	r3, [pc, #48]	; (fcb8 <cpu_irq_enter_critical+0x34>)
    fc86:	681b      	ldr	r3, [r3, #0]
    fc88:	2b00      	cmp	r3, #0
    fc8a:	d106      	bne.n	fc9a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    fc8c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    fc90:	2b00      	cmp	r3, #0
    fc92:	d007      	beq.n	fca4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    fc94:	2200      	movs	r2, #0
    fc96:	4b09      	ldr	r3, [pc, #36]	; (fcbc <cpu_irq_enter_critical+0x38>)
    fc98:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    fc9a:	4a07      	ldr	r2, [pc, #28]	; (fcb8 <cpu_irq_enter_critical+0x34>)
    fc9c:	6813      	ldr	r3, [r2, #0]
    fc9e:	3301      	adds	r3, #1
    fca0:	6013      	str	r3, [r2, #0]
}
    fca2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    fca4:	b672      	cpsid	i
    fca6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    fcaa:	2200      	movs	r2, #0
    fcac:	4b04      	ldr	r3, [pc, #16]	; (fcc0 <cpu_irq_enter_critical+0x3c>)
    fcae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    fcb0:	3201      	adds	r2, #1
    fcb2:	4b02      	ldr	r3, [pc, #8]	; (fcbc <cpu_irq_enter_critical+0x38>)
    fcb4:	701a      	strb	r2, [r3, #0]
    fcb6:	e7f0      	b.n	fc9a <cpu_irq_enter_critical+0x16>
    fcb8:	2000048c 	.word	0x2000048c
    fcbc:	20000490 	.word	0x20000490
    fcc0:	2000007e 	.word	0x2000007e

0000fcc4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    fcc4:	4b08      	ldr	r3, [pc, #32]	; (fce8 <cpu_irq_leave_critical+0x24>)
    fcc6:	681a      	ldr	r2, [r3, #0]
    fcc8:	3a01      	subs	r2, #1
    fcca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    fccc:	681b      	ldr	r3, [r3, #0]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d109      	bne.n	fce6 <cpu_irq_leave_critical+0x22>
    fcd2:	4b06      	ldr	r3, [pc, #24]	; (fcec <cpu_irq_leave_critical+0x28>)
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d005      	beq.n	fce6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    fcda:	2201      	movs	r2, #1
    fcdc:	4b04      	ldr	r3, [pc, #16]	; (fcf0 <cpu_irq_leave_critical+0x2c>)
    fcde:	701a      	strb	r2, [r3, #0]
    fce0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    fce4:	b662      	cpsie	i
	}
}
    fce6:	4770      	bx	lr
    fce8:	2000048c 	.word	0x2000048c
    fcec:	20000490 	.word	0x20000490
    fcf0:	2000007e 	.word	0x2000007e

0000fcf4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    fcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcf6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    fcf8:	ac01      	add	r4, sp, #4
    fcfa:	2501      	movs	r5, #1
    fcfc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    fcfe:	2700      	movs	r7, #0
    fd00:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    fd02:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    fd04:	0021      	movs	r1, r4
    fd06:	2017      	movs	r0, #23
    fd08:	4e06      	ldr	r6, [pc, #24]	; (fd24 <system_board_init+0x30>)
    fd0a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    fd0c:	2280      	movs	r2, #128	; 0x80
    fd0e:	0412      	lsls	r2, r2, #16
    fd10:	4b05      	ldr	r3, [pc, #20]	; (fd28 <system_board_init+0x34>)
    fd12:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    fd14:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    fd16:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    fd18:	0021      	movs	r1, r4
    fd1a:	2037      	movs	r0, #55	; 0x37
    fd1c:	47b0      	blx	r6
}
    fd1e:	b003      	add	sp, #12
    fd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd22:	46c0      	nop			; (mov r8, r8)
    fd24:	0000fefd 	.word	0x0000fefd
    fd28:	41004400 	.word	0x41004400

0000fd2c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fd2c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    fd2e:	2a00      	cmp	r2, #0
    fd30:	d001      	beq.n	fd36 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    fd32:	0018      	movs	r0, r3
    fd34:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    fd36:	008b      	lsls	r3, r1, #2
    fd38:	4a06      	ldr	r2, [pc, #24]	; (fd54 <extint_register_callback+0x28>)
    fd3a:	589b      	ldr	r3, [r3, r2]
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d003      	beq.n	fd48 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    fd40:	4283      	cmp	r3, r0
    fd42:	d005      	beq.n	fd50 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    fd44:	231d      	movs	r3, #29
    fd46:	e7f4      	b.n	fd32 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    fd48:	0089      	lsls	r1, r1, #2
    fd4a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    fd4c:	2300      	movs	r3, #0
    fd4e:	e7f0      	b.n	fd32 <extint_register_callback+0x6>
		return STATUS_OK;
    fd50:	2300      	movs	r3, #0
    fd52:	e7ee      	b.n	fd32 <extint_register_callback+0x6>
    fd54:	200015dc 	.word	0x200015dc

0000fd58 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fd58:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    fd5a:	2900      	cmp	r1, #0
    fd5c:	d001      	beq.n	fd62 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    fd5e:	0018      	movs	r0, r3
    fd60:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    fd62:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    fd64:	281f      	cmp	r0, #31
    fd66:	d800      	bhi.n	fd6a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    fd68:	4a02      	ldr	r2, [pc, #8]	; (fd74 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    fd6a:	2301      	movs	r3, #1
    fd6c:	4083      	lsls	r3, r0
    fd6e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    fd70:	2300      	movs	r3, #0
    fd72:	e7f4      	b.n	fd5e <extint_chan_enable_callback+0x6>
    fd74:	40001800 	.word	0x40001800

0000fd78 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fd78:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    fd7a:	2900      	cmp	r1, #0
    fd7c:	d001      	beq.n	fd82 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    fd7e:	0018      	movs	r0, r3
    fd80:	4770      	bx	lr
		return NULL;
    fd82:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    fd84:	281f      	cmp	r0, #31
    fd86:	d800      	bhi.n	fd8a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    fd88:	4a02      	ldr	r2, [pc, #8]	; (fd94 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    fd8a:	2301      	movs	r3, #1
    fd8c:	4083      	lsls	r3, r0
    fd8e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    fd90:	2300      	movs	r3, #0
    fd92:	e7f4      	b.n	fd7e <extint_chan_disable_callback+0x6>
    fd94:	40001800 	.word	0x40001800

0000fd98 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    fd98:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fd9a:	2200      	movs	r2, #0
    fd9c:	4b10      	ldr	r3, [pc, #64]	; (fde0 <EIC_Handler+0x48>)
    fd9e:	701a      	strb	r2, [r3, #0]
    fda0:	2300      	movs	r3, #0
    fda2:	4910      	ldr	r1, [pc, #64]	; (fde4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    fda4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fda6:	4e10      	ldr	r6, [pc, #64]	; (fde8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fda8:	4c0d      	ldr	r4, [pc, #52]	; (fde0 <EIC_Handler+0x48>)
    fdaa:	e00a      	b.n	fdc2 <EIC_Handler+0x2a>
		return eics[eic_index];
    fdac:	490d      	ldr	r1, [pc, #52]	; (fde4 <EIC_Handler+0x4c>)
    fdae:	e008      	b.n	fdc2 <EIC_Handler+0x2a>
    fdb0:	7823      	ldrb	r3, [r4, #0]
    fdb2:	3301      	adds	r3, #1
    fdb4:	b2db      	uxtb	r3, r3
    fdb6:	7023      	strb	r3, [r4, #0]
    fdb8:	2b0f      	cmp	r3, #15
    fdba:	d810      	bhi.n	fdde <EIC_Handler+0x46>
		return NULL;
    fdbc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    fdbe:	2b1f      	cmp	r3, #31
    fdc0:	d9f4      	bls.n	fdac <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    fdc2:	0028      	movs	r0, r5
    fdc4:	4018      	ands	r0, r3
    fdc6:	2201      	movs	r2, #1
    fdc8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    fdca:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    fdcc:	4210      	tst	r0, r2
    fdce:	d0ef      	beq.n	fdb0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    fdd0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fdd2:	009b      	lsls	r3, r3, #2
    fdd4:	599b      	ldr	r3, [r3, r6]
    fdd6:	2b00      	cmp	r3, #0
    fdd8:	d0ea      	beq.n	fdb0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    fdda:	4798      	blx	r3
    fddc:	e7e8      	b.n	fdb0 <EIC_Handler+0x18>
			}
		}
	}
}
    fdde:	bd70      	pop	{r4, r5, r6, pc}
    fde0:	200015d8 	.word	0x200015d8
    fde4:	40001800 	.word	0x40001800
    fde8:	200015dc 	.word	0x200015dc

0000fdec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    fdec:	4a04      	ldr	r2, [pc, #16]	; (fe00 <_extint_enable+0x14>)
    fdee:	7813      	ldrb	r3, [r2, #0]
    fdf0:	2102      	movs	r1, #2
    fdf2:	430b      	orrs	r3, r1
    fdf4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fdf6:	7853      	ldrb	r3, [r2, #1]
    fdf8:	b25b      	sxtb	r3, r3
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	dbfb      	blt.n	fdf6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    fdfe:	4770      	bx	lr
    fe00:	40001800 	.word	0x40001800

0000fe04 <_system_extint_init>:
{
    fe04:	b500      	push	{lr}
    fe06:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    fe08:	4a12      	ldr	r2, [pc, #72]	; (fe54 <_system_extint_init+0x50>)
    fe0a:	6993      	ldr	r3, [r2, #24]
    fe0c:	2140      	movs	r1, #64	; 0x40
    fe0e:	430b      	orrs	r3, r1
    fe10:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    fe12:	a901      	add	r1, sp, #4
    fe14:	2300      	movs	r3, #0
    fe16:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    fe18:	2005      	movs	r0, #5
    fe1a:	4b0f      	ldr	r3, [pc, #60]	; (fe58 <_system_extint_init+0x54>)
    fe1c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    fe1e:	2005      	movs	r0, #5
    fe20:	4b0e      	ldr	r3, [pc, #56]	; (fe5c <_system_extint_init+0x58>)
    fe22:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    fe24:	4a0e      	ldr	r2, [pc, #56]	; (fe60 <_system_extint_init+0x5c>)
    fe26:	7813      	ldrb	r3, [r2, #0]
    fe28:	2101      	movs	r1, #1
    fe2a:	430b      	orrs	r3, r1
    fe2c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fe2e:	7853      	ldrb	r3, [r2, #1]
    fe30:	b25b      	sxtb	r3, r3
    fe32:	2b00      	cmp	r3, #0
    fe34:	dbfb      	blt.n	fe2e <_system_extint_init+0x2a>
    fe36:	4b0b      	ldr	r3, [pc, #44]	; (fe64 <_system_extint_init+0x60>)
    fe38:	0019      	movs	r1, r3
    fe3a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    fe3c:	2200      	movs	r2, #0
    fe3e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    fe40:	4299      	cmp	r1, r3
    fe42:	d1fc      	bne.n	fe3e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fe44:	2210      	movs	r2, #16
    fe46:	4b08      	ldr	r3, [pc, #32]	; (fe68 <_system_extint_init+0x64>)
    fe48:	601a      	str	r2, [r3, #0]
	_extint_enable();
    fe4a:	4b08      	ldr	r3, [pc, #32]	; (fe6c <_system_extint_init+0x68>)
    fe4c:	4798      	blx	r3
}
    fe4e:	b003      	add	sp, #12
    fe50:	bd00      	pop	{pc}
    fe52:	46c0      	nop			; (mov r8, r8)
    fe54:	40000400 	.word	0x40000400
    fe58:	00011951 	.word	0x00011951
    fe5c:	000118c5 	.word	0x000118c5
    fe60:	40001800 	.word	0x40001800
    fe64:	200015dc 	.word	0x200015dc
    fe68:	e000e100 	.word	0xe000e100
    fe6c:	0000fded 	.word	0x0000fded

0000fe70 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fe70:	2300      	movs	r3, #0
    fe72:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    fe74:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fe76:	2201      	movs	r2, #1
    fe78:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    fe7a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    fe7c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fe7e:	3302      	adds	r3, #2
    fe80:	72c3      	strb	r3, [r0, #11]
}
    fe82:	4770      	bx	lr

0000fe84 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe86:	b083      	sub	sp, #12
    fe88:	0005      	movs	r5, r0
    fe8a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fe8c:	a901      	add	r1, sp, #4
    fe8e:	2300      	movs	r3, #0
    fe90:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    fe92:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    fe94:	7923      	ldrb	r3, [r4, #4]
    fe96:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    fe98:	7a23      	ldrb	r3, [r4, #8]
    fe9a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    fe9c:	7820      	ldrb	r0, [r4, #0]
    fe9e:	4b15      	ldr	r3, [pc, #84]	; (fef4 <extint_chan_set_config+0x70>)
    fea0:	4798      	blx	r3
		return NULL;
    fea2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    fea4:	2d1f      	cmp	r5, #31
    fea6:	d800      	bhi.n	feaa <extint_chan_set_config+0x26>
		return eics[eic_index];
    fea8:	4813      	ldr	r0, [pc, #76]	; (fef8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    feaa:	2207      	movs	r2, #7
    feac:	402a      	ands	r2, r5
    feae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    feb0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    feb2:	7aa3      	ldrb	r3, [r4, #10]
    feb4:	2b00      	cmp	r3, #0
    feb6:	d001      	beq.n	febc <extint_chan_set_config+0x38>
    feb8:	2308      	movs	r3, #8
    feba:	431f      	orrs	r7, r3
    febc:	08eb      	lsrs	r3, r5, #3
    febe:	009b      	lsls	r3, r3, #2
    fec0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    fec2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fec4:	260f      	movs	r6, #15
    fec6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    fec8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    feca:	4097      	lsls	r7, r2
    fecc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fece:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    fed0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    fed2:	7a63      	ldrb	r3, [r4, #9]
    fed4:	2b00      	cmp	r3, #0
    fed6:	d106      	bne.n	fee6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    fed8:	6943      	ldr	r3, [r0, #20]
    feda:	2201      	movs	r2, #1
    fedc:	40aa      	lsls	r2, r5
    fede:	4393      	bics	r3, r2
    fee0:	6143      	str	r3, [r0, #20]
	}
}
    fee2:	b003      	add	sp, #12
    fee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    fee6:	6942      	ldr	r2, [r0, #20]
    fee8:	2301      	movs	r3, #1
    feea:	40ab      	lsls	r3, r5
    feec:	4313      	orrs	r3, r2
    feee:	6143      	str	r3, [r0, #20]
    fef0:	e7f7      	b.n	fee2 <extint_chan_set_config+0x5e>
    fef2:	46c0      	nop			; (mov r8, r8)
    fef4:	00011a49 	.word	0x00011a49
    fef8:	40001800 	.word	0x40001800

0000fefc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    fefc:	b500      	push	{lr}
    fefe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ff00:	ab01      	add	r3, sp, #4
    ff02:	2280      	movs	r2, #128	; 0x80
    ff04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    ff06:	780a      	ldrb	r2, [r1, #0]
    ff08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    ff0a:	784a      	ldrb	r2, [r1, #1]
    ff0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    ff0e:	788a      	ldrb	r2, [r1, #2]
    ff10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    ff12:	0019      	movs	r1, r3
    ff14:	4b01      	ldr	r3, [pc, #4]	; (ff1c <port_pin_set_config+0x20>)
    ff16:	4798      	blx	r3
}
    ff18:	b003      	add	sp, #12
    ff1a:	bd00      	pop	{pc}
    ff1c:	00011a49 	.word	0x00011a49

0000ff20 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ff20:	6801      	ldr	r1, [r0, #0]
    ff22:	2208      	movs	r2, #8
    ff24:	4b05      	ldr	r3, [pc, #20]	; (ff3c <rtc_calendar_enable+0x1c>)
    ff26:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    ff28:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    ff2a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    ff2c:	b25b      	sxtb	r3, r3
    ff2e:	2b00      	cmp	r3, #0
    ff30:	dbfb      	blt.n	ff2a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    ff32:	880b      	ldrh	r3, [r1, #0]
    ff34:	2202      	movs	r2, #2
    ff36:	4313      	orrs	r3, r2
    ff38:	800b      	strh	r3, [r1, #0]
}
    ff3a:	4770      	bx	lr
    ff3c:	e000e100 	.word	0xe000e100

0000ff40 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    ff40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ff42:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ff44:	2408      	movs	r4, #8
    ff46:	2380      	movs	r3, #128	; 0x80
    ff48:	4907      	ldr	r1, [pc, #28]	; (ff68 <rtc_calendar_disable+0x28>)
    ff4a:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    ff4c:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    ff4e:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    ff50:	b25b      	sxtb	r3, r3
    ff52:	2b00      	cmp	r3, #0
    ff54:	dbfb      	blt.n	ff4e <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    ff56:	23c1      	movs	r3, #193	; 0xc1
    ff58:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    ff5a:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    ff5c:	8813      	ldrh	r3, [r2, #0]
    ff5e:	2102      	movs	r1, #2
    ff60:	438b      	bics	r3, r1
    ff62:	8013      	strh	r3, [r2, #0]
}
    ff64:	bd10      	pop	{r4, pc}
    ff66:	46c0      	nop			; (mov r8, r8)
    ff68:	e000e100 	.word	0xe000e100

0000ff6c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    ff6c:	b570      	push	{r4, r5, r6, lr}
    ff6e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    ff70:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    ff72:	4b07      	ldr	r3, [pc, #28]	; (ff90 <rtc_calendar_reset+0x24>)
    ff74:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    ff76:	2300      	movs	r3, #0
    ff78:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    ff7a:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    ff7c:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    ff7e:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    ff80:	b25b      	sxtb	r3, r3
    ff82:	2b00      	cmp	r3, #0
    ff84:	dbfb      	blt.n	ff7e <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    ff86:	882b      	ldrh	r3, [r5, #0]
    ff88:	2201      	movs	r2, #1
    ff8a:	4313      	orrs	r3, r2
    ff8c:	802b      	strh	r3, [r5, #0]
}
    ff8e:	bd70      	pop	{r4, r5, r6, pc}
    ff90:	0000ff41 	.word	0x0000ff41

0000ff94 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    ff94:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    ff96:	88cb      	ldrh	r3, [r1, #6]
    ff98:	88c2      	ldrh	r2, [r0, #6]
    ff9a:	1a9a      	subs	r2, r3, r2
    ff9c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    ff9e:	794b      	ldrb	r3, [r1, #5]
    ffa0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    ffa2:	790c      	ldrb	r4, [r1, #4]
    ffa4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    ffa6:	4323      	orrs	r3, r4
    ffa8:	788c      	ldrb	r4, [r1, #2]
    ffaa:	0324      	lsls	r4, r4, #12
    ffac:	4323      	orrs	r3, r4
    ffae:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    ffb0:	7902      	ldrb	r2, [r0, #4]
    ffb2:	2a00      	cmp	r2, #0
    ffb4:	d105      	bne.n	ffc2 <rtc_calendar_time_to_register_value+0x2e>
    ffb6:	78ca      	ldrb	r2, [r1, #3]
    ffb8:	2a00      	cmp	r2, #0
    ffba:	d002      	beq.n	ffc2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    ffbc:	2280      	movs	r2, #128	; 0x80
    ffbe:	0252      	lsls	r2, r2, #9
    ffc0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    ffc2:	7848      	ldrb	r0, [r1, #1]
    ffc4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    ffc6:	780a      	ldrb	r2, [r1, #0]
    ffc8:	4310      	orrs	r0, r2
    ffca:	4318      	orrs	r0, r3

	return register_value;
}
    ffcc:	bd10      	pop	{r4, pc}

0000ffce <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    ffce:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    ffd0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    ffd2:	88c4      	ldrh	r4, [r0, #6]
    ffd4:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    ffd6:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    ffd8:	018b      	lsls	r3, r1, #6
    ffda:	0f1b      	lsrs	r3, r3, #28
    ffdc:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    ffde:	028b      	lsls	r3, r1, #10
    ffe0:	0edb      	lsrs	r3, r3, #27
    ffe2:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    ffe4:	7903      	ldrb	r3, [r0, #4]
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	d10c      	bne.n	10004 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    ffea:	040b      	lsls	r3, r1, #16
    ffec:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    ffee:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    fff0:	03cb      	lsls	r3, r1, #15
    fff2:	0fdb      	lsrs	r3, r3, #31
    fff4:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    fff6:	0988      	lsrs	r0, r1, #6
    fff8:	233f      	movs	r3, #63	; 0x3f
    fffa:	4018      	ands	r0, r3
    fffc:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    fffe:	4019      	ands	r1, r3
   10000:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   10002:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   10004:	03cb      	lsls	r3, r1, #15
   10006:	0edb      	lsrs	r3, r3, #27
   10008:	7093      	strb	r3, [r2, #2]
   1000a:	e7f4      	b.n	fff6 <rtc_calendar_register_value_to_time+0x28>

0001000c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1000c:	b510      	push	{r4, lr}
   1000e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   10010:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   10012:	7941      	ldrb	r1, [r0, #5]
   10014:	2900      	cmp	r1, #0
   10016:	d006      	beq.n	10026 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   10018:	8859      	ldrh	r1, [r3, #2]
   1001a:	0449      	lsls	r1, r1, #17
   1001c:	d50b      	bpl.n	10036 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1001e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   10020:	4b0a      	ldr	r3, [pc, #40]	; (1004c <rtc_calendar_get_time+0x40>)
   10022:	4798      	blx	r3
}
   10024:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   10026:	490a      	ldr	r1, [pc, #40]	; (10050 <rtc_calendar_get_time+0x44>)
   10028:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1002a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1002c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1002e:	b249      	sxtb	r1, r1
   10030:	2900      	cmp	r1, #0
   10032:	dbfb      	blt.n	1002c <rtc_calendar_get_time+0x20>
   10034:	e7f3      	b.n	1001e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   10036:	8859      	ldrh	r1, [r3, #2]
   10038:	24c0      	movs	r4, #192	; 0xc0
   1003a:	0224      	lsls	r4, r4, #8
   1003c:	4321      	orrs	r1, r4
   1003e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   10040:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   10042:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   10044:	b249      	sxtb	r1, r1
   10046:	2900      	cmp	r1, #0
   10048:	dbfb      	blt.n	10042 <rtc_calendar_get_time+0x36>
   1004a:	e7e8      	b.n	1001e <rtc_calendar_get_time+0x12>
   1004c:	0000ffcf 	.word	0x0000ffcf
   10050:	ffff8000 	.word	0xffff8000

00010054 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   10054:	b570      	push	{r4, r5, r6, lr}
   10056:	000d      	movs	r5, r1
   10058:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1005a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1005c:	2a01      	cmp	r2, #1
   1005e:	d901      	bls.n	10064 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   10060:	0018      	movs	r0, r3
   10062:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   10064:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   10066:	4b06      	ldr	r3, [pc, #24]	; (10080 <rtc_calendar_set_alarm+0x2c>)
   10068:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1006a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   1006c:	b25b      	sxtb	r3, r3
   1006e:	2b00      	cmp	r3, #0
   10070:	dbfb      	blt.n	1006a <rtc_calendar_set_alarm+0x16>
   10072:	00e4      	lsls	r4, r4, #3
   10074:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   10076:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   10078:	7a2b      	ldrb	r3, [r5, #8]
   1007a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   1007c:	2300      	movs	r3, #0
   1007e:	e7ef      	b.n	10060 <rtc_calendar_set_alarm+0xc>
   10080:	0000ff95 	.word	0x0000ff95

00010084 <rtc_calendar_init>:
{
   10084:	b530      	push	{r4, r5, lr}
   10086:	b083      	sub	sp, #12
   10088:	0005      	movs	r5, r0
   1008a:	0014      	movs	r4, r2
	module->hw = hw;
   1008c:	6001      	str	r1, [r0, #0]
   1008e:	4a1c      	ldr	r2, [pc, #112]	; (10100 <rtc_calendar_init+0x7c>)
   10090:	6993      	ldr	r3, [r2, #24]
   10092:	2120      	movs	r1, #32
   10094:	430b      	orrs	r3, r1
   10096:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   10098:	a901      	add	r1, sp, #4
   1009a:	2302      	movs	r3, #2
   1009c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1009e:	2004      	movs	r0, #4
   100a0:	4b18      	ldr	r3, [pc, #96]	; (10104 <rtc_calendar_init+0x80>)
   100a2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   100a4:	2004      	movs	r0, #4
   100a6:	4b18      	ldr	r3, [pc, #96]	; (10108 <rtc_calendar_init+0x84>)
   100a8:	4798      	blx	r3
	rtc_calendar_reset(module);
   100aa:	0028      	movs	r0, r5
   100ac:	4b17      	ldr	r3, [pc, #92]	; (1010c <rtc_calendar_init+0x88>)
   100ae:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   100b0:	7923      	ldrb	r3, [r4, #4]
   100b2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   100b4:	78e3      	ldrb	r3, [r4, #3]
   100b6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   100b8:	88e3      	ldrh	r3, [r4, #6]
   100ba:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   100bc:	4b14      	ldr	r3, [pc, #80]	; (10110 <rtc_calendar_init+0x8c>)
   100be:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   100c0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   100c2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   100c4:	7921      	ldrb	r1, [r4, #4]
   100c6:	2900      	cmp	r1, #0
   100c8:	d017      	beq.n	100fa <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   100ca:	2108      	movs	r1, #8
   100cc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   100ce:	78a1      	ldrb	r1, [r4, #2]
   100d0:	2900      	cmp	r1, #0
   100d2:	d001      	beq.n	100d8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   100d4:	2180      	movs	r1, #128	; 0x80
   100d6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   100d8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   100da:	78e3      	ldrb	r3, [r4, #3]
   100dc:	2b00      	cmp	r3, #0
   100de:	d004      	beq.n	100ea <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   100e0:	8853      	ldrh	r3, [r2, #2]
   100e2:	2180      	movs	r1, #128	; 0x80
   100e4:	01c9      	lsls	r1, r1, #7
   100e6:	430b      	orrs	r3, r1
   100e8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   100ea:	0021      	movs	r1, r4
   100ec:	3108      	adds	r1, #8
   100ee:	2200      	movs	r2, #0
   100f0:	0028      	movs	r0, r5
   100f2:	4b08      	ldr	r3, [pc, #32]	; (10114 <rtc_calendar_init+0x90>)
   100f4:	4798      	blx	r3
}
   100f6:	b003      	add	sp, #12
   100f8:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   100fa:	2148      	movs	r1, #72	; 0x48
   100fc:	430b      	orrs	r3, r1
   100fe:	e7e6      	b.n	100ce <rtc_calendar_init+0x4a>
   10100:	40000400 	.word	0x40000400
   10104:	00011951 	.word	0x00011951
   10108:	000118c5 	.word	0x000118c5
   1010c:	0000ff6d 	.word	0x0000ff6d
   10110:	2000161c 	.word	0x2000161c
   10114:	00010055 	.word	0x00010055

00010118 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   10118:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   1011a:	4b0f      	ldr	r3, [pc, #60]	; (10158 <RTC_Handler+0x40>)
   1011c:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1011e:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   10120:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   10122:	8a13      	ldrh	r3, [r2, #16]
   10124:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   10126:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   10128:	79e3      	ldrb	r3, [r4, #7]
   1012a:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1012c:	b258      	sxtb	r0, r3
   1012e:	2800      	cmp	r0, #0
   10130:	db06      	blt.n	10140 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   10132:	07db      	lsls	r3, r3, #31
   10134:	d503      	bpl.n	1013e <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   10136:	07cb      	lsls	r3, r1, #31
   10138:	d40a      	bmi.n	10150 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1013a:	2301      	movs	r3, #1
   1013c:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1013e:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   10140:	078b      	lsls	r3, r1, #30
   10142:	d402      	bmi.n	1014a <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   10144:	2380      	movs	r3, #128	; 0x80
   10146:	7223      	strb	r3, [r4, #8]
   10148:	e7f9      	b.n	1013e <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1014a:	68d3      	ldr	r3, [r2, #12]
   1014c:	4798      	blx	r3
   1014e:	e7f9      	b.n	10144 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   10150:	6893      	ldr	r3, [r2, #8]
   10152:	4798      	blx	r3
   10154:	e7f1      	b.n	1013a <RTC_Handler+0x22>
   10156:	46c0      	nop			; (mov r8, r8)
   10158:	2000161c 	.word	0x2000161c

0001015c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1015c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1015e:	46de      	mov	lr, fp
   10160:	4657      	mov	r7, sl
   10162:	464e      	mov	r6, r9
   10164:	4645      	mov	r5, r8
   10166:	b5e0      	push	{r5, r6, r7, lr}
   10168:	b087      	sub	sp, #28
   1016a:	4680      	mov	r8, r0
   1016c:	9104      	str	r1, [sp, #16]
   1016e:	0016      	movs	r6, r2
   10170:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   10172:	2200      	movs	r2, #0
   10174:	2300      	movs	r3, #0
   10176:	2100      	movs	r1, #0
   10178:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1017a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1017c:	2001      	movs	r0, #1
   1017e:	0021      	movs	r1, r4
   10180:	9600      	str	r6, [sp, #0]
   10182:	9701      	str	r7, [sp, #4]
   10184:	465c      	mov	r4, fp
   10186:	9403      	str	r4, [sp, #12]
   10188:	4644      	mov	r4, r8
   1018a:	9405      	str	r4, [sp, #20]
   1018c:	e013      	b.n	101b6 <long_division+0x5a>
   1018e:	2420      	movs	r4, #32
   10190:	1a64      	subs	r4, r4, r1
   10192:	0005      	movs	r5, r0
   10194:	40e5      	lsrs	r5, r4
   10196:	46a8      	mov	r8, r5
   10198:	e014      	b.n	101c4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1019a:	9c00      	ldr	r4, [sp, #0]
   1019c:	9d01      	ldr	r5, [sp, #4]
   1019e:	1b12      	subs	r2, r2, r4
   101a0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   101a2:	465c      	mov	r4, fp
   101a4:	464d      	mov	r5, r9
   101a6:	432c      	orrs	r4, r5
   101a8:	46a3      	mov	fp, r4
   101aa:	9c03      	ldr	r4, [sp, #12]
   101ac:	4645      	mov	r5, r8
   101ae:	432c      	orrs	r4, r5
   101b0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   101b2:	3901      	subs	r1, #1
   101b4:	d325      	bcc.n	10202 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   101b6:	2420      	movs	r4, #32
   101b8:	4264      	negs	r4, r4
   101ba:	190c      	adds	r4, r1, r4
   101bc:	d4e7      	bmi.n	1018e <long_division+0x32>
   101be:	0005      	movs	r5, r0
   101c0:	40a5      	lsls	r5, r4
   101c2:	46a8      	mov	r8, r5
   101c4:	0004      	movs	r4, r0
   101c6:	408c      	lsls	r4, r1
   101c8:	46a1      	mov	r9, r4
		r = r << 1;
   101ca:	1892      	adds	r2, r2, r2
   101cc:	415b      	adcs	r3, r3
   101ce:	0014      	movs	r4, r2
   101d0:	001d      	movs	r5, r3
		if (n & bit_shift) {
   101d2:	9e05      	ldr	r6, [sp, #20]
   101d4:	464f      	mov	r7, r9
   101d6:	403e      	ands	r6, r7
   101d8:	46b4      	mov	ip, r6
   101da:	9e04      	ldr	r6, [sp, #16]
   101dc:	4647      	mov	r7, r8
   101de:	403e      	ands	r6, r7
   101e0:	46b2      	mov	sl, r6
   101e2:	4666      	mov	r6, ip
   101e4:	4657      	mov	r7, sl
   101e6:	433e      	orrs	r6, r7
   101e8:	d003      	beq.n	101f2 <long_division+0x96>
			r |= 0x01;
   101ea:	0006      	movs	r6, r0
   101ec:	4326      	orrs	r6, r4
   101ee:	0032      	movs	r2, r6
   101f0:	002b      	movs	r3, r5
		if (r >= d) {
   101f2:	9c00      	ldr	r4, [sp, #0]
   101f4:	9d01      	ldr	r5, [sp, #4]
   101f6:	429d      	cmp	r5, r3
   101f8:	d8db      	bhi.n	101b2 <long_division+0x56>
   101fa:	d1ce      	bne.n	1019a <long_division+0x3e>
   101fc:	4294      	cmp	r4, r2
   101fe:	d8d8      	bhi.n	101b2 <long_division+0x56>
   10200:	e7cb      	b.n	1019a <long_division+0x3e>
   10202:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   10204:	4658      	mov	r0, fp
   10206:	0019      	movs	r1, r3
   10208:	b007      	add	sp, #28
   1020a:	bc3c      	pop	{r2, r3, r4, r5}
   1020c:	4690      	mov	r8, r2
   1020e:	4699      	mov	r9, r3
   10210:	46a2      	mov	sl, r4
   10212:	46ab      	mov	fp, r5
   10214:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010216 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   10216:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   10218:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1021a:	2340      	movs	r3, #64	; 0x40
   1021c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1021e:	4281      	cmp	r1, r0
   10220:	d202      	bcs.n	10228 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   10222:	0018      	movs	r0, r3
   10224:	bd10      	pop	{r4, pc}
		baud_calculated++;
   10226:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   10228:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1022a:	1c63      	adds	r3, r4, #1
   1022c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1022e:	4288      	cmp	r0, r1
   10230:	d9f9      	bls.n	10226 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   10232:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   10234:	2cff      	cmp	r4, #255	; 0xff
   10236:	d8f4      	bhi.n	10222 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   10238:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1023a:	2300      	movs	r3, #0
   1023c:	e7f1      	b.n	10222 <_sercom_get_sync_baud_val+0xc>
	...

00010240 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   10240:	b5f0      	push	{r4, r5, r6, r7, lr}
   10242:	b083      	sub	sp, #12
   10244:	000f      	movs	r7, r1
   10246:	0016      	movs	r6, r2
   10248:	aa08      	add	r2, sp, #32
   1024a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1024c:	0004      	movs	r4, r0
   1024e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   10250:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   10252:	42bc      	cmp	r4, r7
   10254:	d902      	bls.n	1025c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   10256:	0010      	movs	r0, r2
   10258:	b003      	add	sp, #12
   1025a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1025c:	2b00      	cmp	r3, #0
   1025e:	d114      	bne.n	1028a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   10260:	0002      	movs	r2, r0
   10262:	0008      	movs	r0, r1
   10264:	2100      	movs	r1, #0
   10266:	4c19      	ldr	r4, [pc, #100]	; (102cc <_sercom_get_async_baud_val+0x8c>)
   10268:	47a0      	blx	r4
   1026a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   1026c:	003a      	movs	r2, r7
   1026e:	2300      	movs	r3, #0
   10270:	2000      	movs	r0, #0
   10272:	4c17      	ldr	r4, [pc, #92]	; (102d0 <_sercom_get_async_baud_val+0x90>)
   10274:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   10276:	2200      	movs	r2, #0
   10278:	2301      	movs	r3, #1
   1027a:	1a12      	subs	r2, r2, r0
   1027c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   1027e:	0c12      	lsrs	r2, r2, #16
   10280:	041b      	lsls	r3, r3, #16
   10282:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   10284:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   10286:	2200      	movs	r2, #0
   10288:	e7e5      	b.n	10256 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1028a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1028c:	2b01      	cmp	r3, #1
   1028e:	d1f9      	bne.n	10284 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   10290:	000a      	movs	r2, r1
   10292:	2300      	movs	r3, #0
   10294:	2100      	movs	r1, #0
   10296:	4c0d      	ldr	r4, [pc, #52]	; (102cc <_sercom_get_async_baud_val+0x8c>)
   10298:	47a0      	blx	r4
   1029a:	0002      	movs	r2, r0
   1029c:	000b      	movs	r3, r1
   1029e:	9200      	str	r2, [sp, #0]
   102a0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   102a2:	0038      	movs	r0, r7
   102a4:	2100      	movs	r1, #0
   102a6:	4c0a      	ldr	r4, [pc, #40]	; (102d0 <_sercom_get_async_baud_val+0x90>)
   102a8:	47a0      	blx	r4
   102aa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   102ac:	2380      	movs	r3, #128	; 0x80
   102ae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   102b0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   102b2:	4298      	cmp	r0, r3
   102b4:	d8cf      	bhi.n	10256 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   102b6:	0f79      	lsrs	r1, r7, #29
   102b8:	00f8      	lsls	r0, r7, #3
   102ba:	9a00      	ldr	r2, [sp, #0]
   102bc:	9b01      	ldr	r3, [sp, #4]
   102be:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   102c0:	00ea      	lsls	r2, r5, #3
   102c2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   102c4:	b2d2      	uxtb	r2, r2
   102c6:	0352      	lsls	r2, r2, #13
   102c8:	432a      	orrs	r2, r5
   102ca:	e7db      	b.n	10284 <_sercom_get_async_baud_val+0x44>
   102cc:	000178c1 	.word	0x000178c1
   102d0:	0001015d 	.word	0x0001015d

000102d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   102d4:	b510      	push	{r4, lr}
   102d6:	b082      	sub	sp, #8
   102d8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   102da:	4b0e      	ldr	r3, [pc, #56]	; (10314 <sercom_set_gclk_generator+0x40>)
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	2b00      	cmp	r3, #0
   102e0:	d007      	beq.n	102f2 <sercom_set_gclk_generator+0x1e>
   102e2:	2900      	cmp	r1, #0
   102e4:	d105      	bne.n	102f2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   102e6:	4b0b      	ldr	r3, [pc, #44]	; (10314 <sercom_set_gclk_generator+0x40>)
   102e8:	785b      	ldrb	r3, [r3, #1]
   102ea:	4283      	cmp	r3, r0
   102ec:	d010      	beq.n	10310 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   102ee:	201d      	movs	r0, #29
   102f0:	e00c      	b.n	1030c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   102f2:	a901      	add	r1, sp, #4
   102f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   102f6:	2013      	movs	r0, #19
   102f8:	4b07      	ldr	r3, [pc, #28]	; (10318 <sercom_set_gclk_generator+0x44>)
   102fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   102fc:	2013      	movs	r0, #19
   102fe:	4b07      	ldr	r3, [pc, #28]	; (1031c <sercom_set_gclk_generator+0x48>)
   10300:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   10302:	4b04      	ldr	r3, [pc, #16]	; (10314 <sercom_set_gclk_generator+0x40>)
   10304:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   10306:	2201      	movs	r2, #1
   10308:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   1030a:	2000      	movs	r0, #0
}
   1030c:	b002      	add	sp, #8
   1030e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   10310:	2000      	movs	r0, #0
   10312:	e7fb      	b.n	1030c <sercom_set_gclk_generator+0x38>
   10314:	20000494 	.word	0x20000494
   10318:	00011951 	.word	0x00011951
   1031c:	000118c5 	.word	0x000118c5

00010320 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   10320:	4b40      	ldr	r3, [pc, #256]	; (10424 <_sercom_get_default_pad+0x104>)
   10322:	4298      	cmp	r0, r3
   10324:	d031      	beq.n	1038a <_sercom_get_default_pad+0x6a>
   10326:	d90a      	bls.n	1033e <_sercom_get_default_pad+0x1e>
   10328:	4b3f      	ldr	r3, [pc, #252]	; (10428 <_sercom_get_default_pad+0x108>)
   1032a:	4298      	cmp	r0, r3
   1032c:	d04d      	beq.n	103ca <_sercom_get_default_pad+0xaa>
   1032e:	4b3f      	ldr	r3, [pc, #252]	; (1042c <_sercom_get_default_pad+0x10c>)
   10330:	4298      	cmp	r0, r3
   10332:	d05a      	beq.n	103ea <_sercom_get_default_pad+0xca>
   10334:	4b3e      	ldr	r3, [pc, #248]	; (10430 <_sercom_get_default_pad+0x110>)
   10336:	4298      	cmp	r0, r3
   10338:	d037      	beq.n	103aa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1033a:	2000      	movs	r0, #0
}
   1033c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1033e:	4b3d      	ldr	r3, [pc, #244]	; (10434 <_sercom_get_default_pad+0x114>)
   10340:	4298      	cmp	r0, r3
   10342:	d00c      	beq.n	1035e <_sercom_get_default_pad+0x3e>
   10344:	4b3c      	ldr	r3, [pc, #240]	; (10438 <_sercom_get_default_pad+0x118>)
   10346:	4298      	cmp	r0, r3
   10348:	d1f7      	bne.n	1033a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1034a:	2901      	cmp	r1, #1
   1034c:	d017      	beq.n	1037e <_sercom_get_default_pad+0x5e>
   1034e:	2900      	cmp	r1, #0
   10350:	d05d      	beq.n	1040e <_sercom_get_default_pad+0xee>
   10352:	2902      	cmp	r1, #2
   10354:	d015      	beq.n	10382 <_sercom_get_default_pad+0x62>
   10356:	2903      	cmp	r1, #3
   10358:	d015      	beq.n	10386 <_sercom_get_default_pad+0x66>
	return 0;
   1035a:	2000      	movs	r0, #0
   1035c:	e7ee      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1035e:	2901      	cmp	r1, #1
   10360:	d007      	beq.n	10372 <_sercom_get_default_pad+0x52>
   10362:	2900      	cmp	r1, #0
   10364:	d051      	beq.n	1040a <_sercom_get_default_pad+0xea>
   10366:	2902      	cmp	r1, #2
   10368:	d005      	beq.n	10376 <_sercom_get_default_pad+0x56>
   1036a:	2903      	cmp	r1, #3
   1036c:	d005      	beq.n	1037a <_sercom_get_default_pad+0x5a>
	return 0;
   1036e:	2000      	movs	r0, #0
   10370:	e7e4      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10372:	4832      	ldr	r0, [pc, #200]	; (1043c <_sercom_get_default_pad+0x11c>)
   10374:	e7e2      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10376:	4832      	ldr	r0, [pc, #200]	; (10440 <_sercom_get_default_pad+0x120>)
   10378:	e7e0      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1037a:	4832      	ldr	r0, [pc, #200]	; (10444 <_sercom_get_default_pad+0x124>)
   1037c:	e7de      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1037e:	4832      	ldr	r0, [pc, #200]	; (10448 <_sercom_get_default_pad+0x128>)
   10380:	e7dc      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10382:	4832      	ldr	r0, [pc, #200]	; (1044c <_sercom_get_default_pad+0x12c>)
   10384:	e7da      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10386:	4832      	ldr	r0, [pc, #200]	; (10450 <_sercom_get_default_pad+0x130>)
   10388:	e7d8      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1038a:	2901      	cmp	r1, #1
   1038c:	d007      	beq.n	1039e <_sercom_get_default_pad+0x7e>
   1038e:	2900      	cmp	r1, #0
   10390:	d03f      	beq.n	10412 <_sercom_get_default_pad+0xf2>
   10392:	2902      	cmp	r1, #2
   10394:	d005      	beq.n	103a2 <_sercom_get_default_pad+0x82>
   10396:	2903      	cmp	r1, #3
   10398:	d005      	beq.n	103a6 <_sercom_get_default_pad+0x86>
	return 0;
   1039a:	2000      	movs	r0, #0
   1039c:	e7ce      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1039e:	482d      	ldr	r0, [pc, #180]	; (10454 <_sercom_get_default_pad+0x134>)
   103a0:	e7cc      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103a2:	482d      	ldr	r0, [pc, #180]	; (10458 <_sercom_get_default_pad+0x138>)
   103a4:	e7ca      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103a6:	482d      	ldr	r0, [pc, #180]	; (1045c <_sercom_get_default_pad+0x13c>)
   103a8:	e7c8      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103aa:	2901      	cmp	r1, #1
   103ac:	d007      	beq.n	103be <_sercom_get_default_pad+0x9e>
   103ae:	2900      	cmp	r1, #0
   103b0:	d031      	beq.n	10416 <_sercom_get_default_pad+0xf6>
   103b2:	2902      	cmp	r1, #2
   103b4:	d005      	beq.n	103c2 <_sercom_get_default_pad+0xa2>
   103b6:	2903      	cmp	r1, #3
   103b8:	d005      	beq.n	103c6 <_sercom_get_default_pad+0xa6>
	return 0;
   103ba:	2000      	movs	r0, #0
   103bc:	e7be      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   103be:	4828      	ldr	r0, [pc, #160]	; (10460 <_sercom_get_default_pad+0x140>)
   103c0:	e7bc      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103c2:	4828      	ldr	r0, [pc, #160]	; (10464 <_sercom_get_default_pad+0x144>)
   103c4:	e7ba      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103c6:	4828      	ldr	r0, [pc, #160]	; (10468 <_sercom_get_default_pad+0x148>)
   103c8:	e7b8      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103ca:	2901      	cmp	r1, #1
   103cc:	d007      	beq.n	103de <_sercom_get_default_pad+0xbe>
   103ce:	2900      	cmp	r1, #0
   103d0:	d023      	beq.n	1041a <_sercom_get_default_pad+0xfa>
   103d2:	2902      	cmp	r1, #2
   103d4:	d005      	beq.n	103e2 <_sercom_get_default_pad+0xc2>
   103d6:	2903      	cmp	r1, #3
   103d8:	d005      	beq.n	103e6 <_sercom_get_default_pad+0xc6>
	return 0;
   103da:	2000      	movs	r0, #0
   103dc:	e7ae      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   103de:	4823      	ldr	r0, [pc, #140]	; (1046c <_sercom_get_default_pad+0x14c>)
   103e0:	e7ac      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103e2:	4823      	ldr	r0, [pc, #140]	; (10470 <_sercom_get_default_pad+0x150>)
   103e4:	e7aa      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103e6:	4823      	ldr	r0, [pc, #140]	; (10474 <_sercom_get_default_pad+0x154>)
   103e8:	e7a8      	b.n	1033c <_sercom_get_default_pad+0x1c>
   103ea:	2901      	cmp	r1, #1
   103ec:	d007      	beq.n	103fe <_sercom_get_default_pad+0xde>
   103ee:	2900      	cmp	r1, #0
   103f0:	d015      	beq.n	1041e <_sercom_get_default_pad+0xfe>
   103f2:	2902      	cmp	r1, #2
   103f4:	d005      	beq.n	10402 <_sercom_get_default_pad+0xe2>
   103f6:	2903      	cmp	r1, #3
   103f8:	d005      	beq.n	10406 <_sercom_get_default_pad+0xe6>
	return 0;
   103fa:	2000      	movs	r0, #0
   103fc:	e79e      	b.n	1033c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   103fe:	481e      	ldr	r0, [pc, #120]	; (10478 <_sercom_get_default_pad+0x158>)
   10400:	e79c      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10402:	481e      	ldr	r0, [pc, #120]	; (1047c <_sercom_get_default_pad+0x15c>)
   10404:	e79a      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10406:	481e      	ldr	r0, [pc, #120]	; (10480 <_sercom_get_default_pad+0x160>)
   10408:	e798      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1040a:	481e      	ldr	r0, [pc, #120]	; (10484 <_sercom_get_default_pad+0x164>)
   1040c:	e796      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1040e:	2003      	movs	r0, #3
   10410:	e794      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10412:	481d      	ldr	r0, [pc, #116]	; (10488 <_sercom_get_default_pad+0x168>)
   10414:	e792      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10416:	481d      	ldr	r0, [pc, #116]	; (1048c <_sercom_get_default_pad+0x16c>)
   10418:	e790      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1041a:	481d      	ldr	r0, [pc, #116]	; (10490 <_sercom_get_default_pad+0x170>)
   1041c:	e78e      	b.n	1033c <_sercom_get_default_pad+0x1c>
   1041e:	481d      	ldr	r0, [pc, #116]	; (10494 <_sercom_get_default_pad+0x174>)
   10420:	e78c      	b.n	1033c <_sercom_get_default_pad+0x1c>
   10422:	46c0      	nop			; (mov r8, r8)
   10424:	42001000 	.word	0x42001000
   10428:	42001800 	.word	0x42001800
   1042c:	42001c00 	.word	0x42001c00
   10430:	42001400 	.word	0x42001400
   10434:	42000800 	.word	0x42000800
   10438:	42000c00 	.word	0x42000c00
   1043c:	00050003 	.word	0x00050003
   10440:	00060003 	.word	0x00060003
   10444:	00070003 	.word	0x00070003
   10448:	00010003 	.word	0x00010003
   1044c:	001e0003 	.word	0x001e0003
   10450:	001f0003 	.word	0x001f0003
   10454:	00090003 	.word	0x00090003
   10458:	000a0003 	.word	0x000a0003
   1045c:	000b0003 	.word	0x000b0003
   10460:	00110003 	.word	0x00110003
   10464:	00120003 	.word	0x00120003
   10468:	00130003 	.word	0x00130003
   1046c:	000d0003 	.word	0x000d0003
   10470:	000e0003 	.word	0x000e0003
   10474:	000f0003 	.word	0x000f0003
   10478:	00170003 	.word	0x00170003
   1047c:	00180003 	.word	0x00180003
   10480:	00190003 	.word	0x00190003
   10484:	00040003 	.word	0x00040003
   10488:	00080003 	.word	0x00080003
   1048c:	00100003 	.word	0x00100003
   10490:	000c0003 	.word	0x000c0003
   10494:	00160003 	.word	0x00160003

00010498 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   10498:	b530      	push	{r4, r5, lr}
   1049a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1049c:	4b0b      	ldr	r3, [pc, #44]	; (104cc <_sercom_get_sercom_inst_index+0x34>)
   1049e:	466a      	mov	r2, sp
   104a0:	cb32      	ldmia	r3!, {r1, r4, r5}
   104a2:	c232      	stmia	r2!, {r1, r4, r5}
   104a4:	cb32      	ldmia	r3!, {r1, r4, r5}
   104a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   104a8:	9b00      	ldr	r3, [sp, #0]
   104aa:	4283      	cmp	r3, r0
   104ac:	d00b      	beq.n	104c6 <_sercom_get_sercom_inst_index+0x2e>
   104ae:	2301      	movs	r3, #1
   104b0:	009a      	lsls	r2, r3, #2
   104b2:	4669      	mov	r1, sp
   104b4:	5852      	ldr	r2, [r2, r1]
   104b6:	4282      	cmp	r2, r0
   104b8:	d006      	beq.n	104c8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   104ba:	3301      	adds	r3, #1
   104bc:	2b06      	cmp	r3, #6
   104be:	d1f7      	bne.n	104b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   104c0:	2000      	movs	r0, #0
}
   104c2:	b007      	add	sp, #28
   104c4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   104c6:	2300      	movs	r3, #0
			return i;
   104c8:	b2d8      	uxtb	r0, r3
   104ca:	e7fa      	b.n	104c2 <_sercom_get_sercom_inst_index+0x2a>
   104cc:	0001a798 	.word	0x0001a798

000104d0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   104d0:	4770      	bx	lr
	...

000104d4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   104d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   104d6:	4b0a      	ldr	r3, [pc, #40]	; (10500 <_sercom_set_handler+0x2c>)
   104d8:	781b      	ldrb	r3, [r3, #0]
   104da:	2b00      	cmp	r3, #0
   104dc:	d10c      	bne.n	104f8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   104de:	4f09      	ldr	r7, [pc, #36]	; (10504 <_sercom_set_handler+0x30>)
   104e0:	4e09      	ldr	r6, [pc, #36]	; (10508 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   104e2:	4d0a      	ldr	r5, [pc, #40]	; (1050c <_sercom_set_handler+0x38>)
   104e4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   104e6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   104e8:	195a      	adds	r2, r3, r5
   104ea:	6014      	str	r4, [r2, #0]
   104ec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   104ee:	2b18      	cmp	r3, #24
   104f0:	d1f9      	bne.n	104e6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   104f2:	2201      	movs	r2, #1
   104f4:	4b02      	ldr	r3, [pc, #8]	; (10500 <_sercom_set_handler+0x2c>)
   104f6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   104f8:	0080      	lsls	r0, r0, #2
   104fa:	4b02      	ldr	r3, [pc, #8]	; (10504 <_sercom_set_handler+0x30>)
   104fc:	50c1      	str	r1, [r0, r3]
}
   104fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10500:	20000496 	.word	0x20000496
   10504:	20000498 	.word	0x20000498
   10508:	000104d1 	.word	0x000104d1
   1050c:	20001620 	.word	0x20001620

00010510 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   10510:	b500      	push	{lr}
   10512:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   10514:	2309      	movs	r3, #9
   10516:	466a      	mov	r2, sp
   10518:	7013      	strb	r3, [r2, #0]
   1051a:	3301      	adds	r3, #1
   1051c:	7053      	strb	r3, [r2, #1]
   1051e:	3301      	adds	r3, #1
   10520:	7093      	strb	r3, [r2, #2]
   10522:	3301      	adds	r3, #1
   10524:	70d3      	strb	r3, [r2, #3]
   10526:	3301      	adds	r3, #1
   10528:	7113      	strb	r3, [r2, #4]
   1052a:	3301      	adds	r3, #1
   1052c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1052e:	4b03      	ldr	r3, [pc, #12]	; (1053c <_sercom_get_interrupt_vector+0x2c>)
   10530:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   10532:	466b      	mov	r3, sp
   10534:	5618      	ldrsb	r0, [r3, r0]
}
   10536:	b003      	add	sp, #12
   10538:	bd00      	pop	{pc}
   1053a:	46c0      	nop			; (mov r8, r8)
   1053c:	00010499 	.word	0x00010499

00010540 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   10540:	b510      	push	{r4, lr}
   10542:	4b02      	ldr	r3, [pc, #8]	; (1054c <SERCOM0_Handler+0xc>)
   10544:	681b      	ldr	r3, [r3, #0]
   10546:	2000      	movs	r0, #0
   10548:	4798      	blx	r3
   1054a:	bd10      	pop	{r4, pc}
   1054c:	20000498 	.word	0x20000498

00010550 <SERCOM1_Handler>:
   10550:	b510      	push	{r4, lr}
   10552:	4b02      	ldr	r3, [pc, #8]	; (1055c <SERCOM1_Handler+0xc>)
   10554:	685b      	ldr	r3, [r3, #4]
   10556:	2001      	movs	r0, #1
   10558:	4798      	blx	r3
   1055a:	bd10      	pop	{r4, pc}
   1055c:	20000498 	.word	0x20000498

00010560 <SERCOM2_Handler>:
   10560:	b510      	push	{r4, lr}
   10562:	4b02      	ldr	r3, [pc, #8]	; (1056c <SERCOM2_Handler+0xc>)
   10564:	689b      	ldr	r3, [r3, #8]
   10566:	2002      	movs	r0, #2
   10568:	4798      	blx	r3
   1056a:	bd10      	pop	{r4, pc}
   1056c:	20000498 	.word	0x20000498

00010570 <SERCOM3_Handler>:
   10570:	b510      	push	{r4, lr}
   10572:	4b02      	ldr	r3, [pc, #8]	; (1057c <SERCOM3_Handler+0xc>)
   10574:	68db      	ldr	r3, [r3, #12]
   10576:	2003      	movs	r0, #3
   10578:	4798      	blx	r3
   1057a:	bd10      	pop	{r4, pc}
   1057c:	20000498 	.word	0x20000498

00010580 <SERCOM4_Handler>:
   10580:	b510      	push	{r4, lr}
   10582:	4b02      	ldr	r3, [pc, #8]	; (1058c <SERCOM4_Handler+0xc>)
   10584:	691b      	ldr	r3, [r3, #16]
   10586:	2004      	movs	r0, #4
   10588:	4798      	blx	r3
   1058a:	bd10      	pop	{r4, pc}
   1058c:	20000498 	.word	0x20000498

00010590 <SERCOM5_Handler>:
   10590:	b510      	push	{r4, lr}
   10592:	4b02      	ldr	r3, [pc, #8]	; (1059c <SERCOM5_Handler+0xc>)
   10594:	695b      	ldr	r3, [r3, #20]
   10596:	2005      	movs	r0, #5
   10598:	4798      	blx	r3
   1059a:	bd10      	pop	{r4, pc}
   1059c:	20000498 	.word	0x20000498

000105a0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   105a0:	b570      	push	{r4, r5, r6, lr}
   105a2:	b082      	sub	sp, #8
   105a4:	0005      	movs	r5, r0
   105a6:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   105a8:	2200      	movs	r2, #0
   105aa:	466b      	mov	r3, sp
   105ac:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   105ae:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   105b0:	0030      	movs	r0, r6
   105b2:	4b24      	ldr	r3, [pc, #144]	; (10644 <spi_set_baudrate+0xa4>)
   105b4:	4798      	blx	r3
   105b6:	231f      	movs	r3, #31
   105b8:	4018      	ands	r0, r3
   105ba:	3b1e      	subs	r3, #30
   105bc:	4083      	lsls	r3, r0
   105be:	2280      	movs	r2, #128	; 0x80
   105c0:	4921      	ldr	r1, [pc, #132]	; (10648 <spi_set_baudrate+0xa8>)
   105c2:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   105c4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   105c6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   105c8:	2b00      	cmp	r3, #0
   105ca:	d1fc      	bne.n	105c6 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   105cc:	338f      	adds	r3, #143	; 0x8f
   105ce:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   105d0:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   105d2:	6833      	ldr	r3, [r6, #0]
   105d4:	2202      	movs	r2, #2
   105d6:	4393      	bics	r3, r2
   105d8:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   105da:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   105dc:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   105de:	2b00      	cmp	r3, #0
   105e0:	d1fc      	bne.n	105dc <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   105e2:	4b1a      	ldr	r3, [pc, #104]	; (1064c <spi_set_baudrate+0xac>)
   105e4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   105e6:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   105e8:	b2c0      	uxtb	r0, r0
   105ea:	4b19      	ldr	r3, [pc, #100]	; (10650 <spi_set_baudrate+0xb0>)
   105ec:	4798      	blx	r3
   105ee:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   105f0:	466b      	mov	r3, sp
   105f2:	1d9a      	adds	r2, r3, #6
   105f4:	0020      	movs	r0, r4
   105f6:	4b17      	ldr	r3, [pc, #92]	; (10654 <spi_set_baudrate+0xb4>)
   105f8:	4798      	blx	r3
   105fa:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   105fc:	d003      	beq.n	10606 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   105fe:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   10600:	0020      	movs	r0, r4
   10602:	b002      	add	sp, #8
   10604:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   10606:	466b      	mov	r3, sp
   10608:	3306      	adds	r3, #6
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1060e:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10610:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   10612:	2b00      	cmp	r3, #0
   10614:	d1fc      	bne.n	10610 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   10616:	0030      	movs	r0, r6
   10618:	4b0a      	ldr	r3, [pc, #40]	; (10644 <spi_set_baudrate+0xa4>)
   1061a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1061c:	231f      	movs	r3, #31
   1061e:	4018      	ands	r0, r3
   10620:	3b1e      	subs	r3, #30
   10622:	4083      	lsls	r3, r0
   10624:	4a08      	ldr	r2, [pc, #32]	; (10648 <spi_set_baudrate+0xa8>)
   10626:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10628:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1062a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1062c:	2b00      	cmp	r3, #0
   1062e:	d1fc      	bne.n	1062a <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   10630:	6833      	ldr	r3, [r6, #0]
   10632:	2202      	movs	r2, #2
   10634:	4313      	orrs	r3, r2
   10636:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10638:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1063a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1063c:	2b00      	cmp	r3, #0
   1063e:	d1fc      	bne.n	1063a <spi_set_baudrate+0x9a>
   10640:	e7de      	b.n	10600 <spi_set_baudrate+0x60>
   10642:	46c0      	nop			; (mov r8, r8)
   10644:	00010511 	.word	0x00010511
   10648:	e000e100 	.word	0xe000e100
   1064c:	00010499 	.word	0x00010499
   10650:	0001196d 	.word	0x0001196d
   10654:	00010217 	.word	0x00010217

00010658 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   10658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1065a:	b08b      	sub	sp, #44	; 0x2c
   1065c:	0005      	movs	r5, r0
   1065e:	000c      	movs	r4, r1
   10660:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   10662:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10664:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   10666:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10668:	079b      	lsls	r3, r3, #30
   1066a:	d501      	bpl.n	10670 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1066c:	b00b      	add	sp, #44	; 0x2c
   1066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10670:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   10672:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10674:	07db      	lsls	r3, r3, #31
   10676:	d4f9      	bmi.n	1066c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10678:	0008      	movs	r0, r1
   1067a:	4b60      	ldr	r3, [pc, #384]	; (107fc <spi_init+0x1a4>)
   1067c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1067e:	4a60      	ldr	r2, [pc, #384]	; (10800 <spi_init+0x1a8>)
   10680:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   10682:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10684:	2301      	movs	r3, #1
   10686:	40bb      	lsls	r3, r7
   10688:	430b      	orrs	r3, r1
   1068a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1068c:	a909      	add	r1, sp, #36	; 0x24
   1068e:	2724      	movs	r7, #36	; 0x24
   10690:	5df3      	ldrb	r3, [r6, r7]
   10692:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10694:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10696:	b2c3      	uxtb	r3, r0
   10698:	9301      	str	r3, [sp, #4]
   1069a:	0018      	movs	r0, r3
   1069c:	4b59      	ldr	r3, [pc, #356]	; (10804 <spi_init+0x1ac>)
   1069e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   106a0:	9801      	ldr	r0, [sp, #4]
   106a2:	4b59      	ldr	r3, [pc, #356]	; (10808 <spi_init+0x1b0>)
   106a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   106a6:	5df0      	ldrb	r0, [r6, r7]
   106a8:	2100      	movs	r1, #0
   106aa:	4b58      	ldr	r3, [pc, #352]	; (1080c <spi_init+0x1b4>)
   106ac:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   106ae:	7833      	ldrb	r3, [r6, #0]
   106b0:	2b01      	cmp	r3, #1
   106b2:	d038      	beq.n	10726 <spi_init+0xce>
   106b4:	002b      	movs	r3, r5
   106b6:	330c      	adds	r3, #12
   106b8:	0029      	movs	r1, r5
   106ba:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   106bc:	2200      	movs	r2, #0
   106be:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   106c0:	428b      	cmp	r3, r1
   106c2:	d1fc      	bne.n	106be <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   106c4:	2300      	movs	r3, #0
   106c6:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   106c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   106ca:	2400      	movs	r4, #0
   106cc:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   106ce:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   106d0:	3336      	adds	r3, #54	; 0x36
   106d2:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   106d4:	3301      	adds	r3, #1
   106d6:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   106d8:	3301      	adds	r3, #1
   106da:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   106dc:	3b35      	subs	r3, #53	; 0x35
   106de:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   106e0:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   106e2:	6828      	ldr	r0, [r5, #0]
   106e4:	4b45      	ldr	r3, [pc, #276]	; (107fc <spi_init+0x1a4>)
   106e6:	4798      	blx	r3
   106e8:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   106ea:	4949      	ldr	r1, [pc, #292]	; (10810 <spi_init+0x1b8>)
   106ec:	4b49      	ldr	r3, [pc, #292]	; (10814 <spi_init+0x1bc>)
   106ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   106f0:	00bf      	lsls	r7, r7, #2
   106f2:	4b49      	ldr	r3, [pc, #292]	; (10818 <spi_init+0x1c0>)
   106f4:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   106f6:	682f      	ldr	r7, [r5, #0]
   106f8:	ab04      	add	r3, sp, #16
   106fa:	2280      	movs	r2, #128	; 0x80
   106fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   106fe:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10700:	3a7f      	subs	r2, #127	; 0x7f
   10702:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10704:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   10706:	7833      	ldrb	r3, [r6, #0]
   10708:	2b00      	cmp	r3, #0
   1070a:	d102      	bne.n	10712 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1070c:	2200      	movs	r2, #0
   1070e:	ab04      	add	r3, sp, #16
   10710:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10712:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10714:	9305      	str	r3, [sp, #20]
   10716:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10718:	9306      	str	r3, [sp, #24]
   1071a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1071c:	9307      	str	r3, [sp, #28]
   1071e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10720:	9308      	str	r3, [sp, #32]
   10722:	2400      	movs	r4, #0
   10724:	e00b      	b.n	1073e <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   10726:	6823      	ldr	r3, [r4, #0]
   10728:	220c      	movs	r2, #12
   1072a:	4313      	orrs	r3, r2
   1072c:	6023      	str	r3, [r4, #0]
   1072e:	e7c1      	b.n	106b4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10730:	0038      	movs	r0, r7
   10732:	4b3a      	ldr	r3, [pc, #232]	; (1081c <spi_init+0x1c4>)
   10734:	4798      	blx	r3
   10736:	e00a      	b.n	1074e <spi_init+0xf6>
   10738:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1073a:	2c04      	cmp	r4, #4
   1073c:	d010      	beq.n	10760 <spi_init+0x108>
   1073e:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10740:	00a3      	lsls	r3, r4, #2
   10742:	aa02      	add	r2, sp, #8
   10744:	200c      	movs	r0, #12
   10746:	1812      	adds	r2, r2, r0
   10748:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1074a:	2800      	cmp	r0, #0
   1074c:	d0f0      	beq.n	10730 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   1074e:	1c43      	adds	r3, r0, #1
   10750:	d0f2      	beq.n	10738 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10752:	a904      	add	r1, sp, #16
   10754:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10756:	0c00      	lsrs	r0, r0, #16
   10758:	b2c0      	uxtb	r0, r0
   1075a:	4b31      	ldr	r3, [pc, #196]	; (10820 <spi_init+0x1c8>)
   1075c:	4798      	blx	r3
   1075e:	e7eb      	b.n	10738 <spi_init+0xe0>
	module->mode             = config->mode;
   10760:	7833      	ldrb	r3, [r6, #0]
   10762:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   10764:	7c33      	ldrb	r3, [r6, #16]
   10766:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   10768:	7cb3      	ldrb	r3, [r6, #18]
   1076a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1076c:	7d33      	ldrb	r3, [r6, #20]
   1076e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   10770:	2200      	movs	r2, #0
   10772:	ab02      	add	r3, sp, #8
   10774:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   10776:	7833      	ldrb	r3, [r6, #0]
   10778:	2b01      	cmp	r3, #1
   1077a:	d028      	beq.n	107ce <spi_init+0x176>
	ctrla |= config->transfer_mode;
   1077c:	6873      	ldr	r3, [r6, #4]
   1077e:	68b2      	ldr	r2, [r6, #8]
   10780:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   10782:	68f2      	ldr	r2, [r6, #12]
   10784:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   10786:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   10788:	7c72      	ldrb	r2, [r6, #17]
   1078a:	2a00      	cmp	r2, #0
   1078c:	d103      	bne.n	10796 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1078e:	4a25      	ldr	r2, [pc, #148]	; (10824 <spi_init+0x1cc>)
   10790:	7892      	ldrb	r2, [r2, #2]
   10792:	0792      	lsls	r2, r2, #30
   10794:	d501      	bpl.n	1079a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   10796:	2280      	movs	r2, #128	; 0x80
   10798:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1079a:	7cb2      	ldrb	r2, [r6, #18]
   1079c:	2a00      	cmp	r2, #0
   1079e:	d002      	beq.n	107a6 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   107a0:	2280      	movs	r2, #128	; 0x80
   107a2:	0292      	lsls	r2, r2, #10
   107a4:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   107a6:	7cf2      	ldrb	r2, [r6, #19]
   107a8:	2a00      	cmp	r2, #0
   107aa:	d002      	beq.n	107b2 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   107ac:	2280      	movs	r2, #128	; 0x80
   107ae:	0092      	lsls	r2, r2, #2
   107b0:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   107b2:	7d32      	ldrb	r2, [r6, #20]
   107b4:	2a00      	cmp	r2, #0
   107b6:	d002      	beq.n	107be <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   107b8:	2280      	movs	r2, #128	; 0x80
   107ba:	0192      	lsls	r2, r2, #6
   107bc:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   107be:	683a      	ldr	r2, [r7, #0]
   107c0:	4313      	orrs	r3, r2
   107c2:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   107c4:	687b      	ldr	r3, [r7, #4]
   107c6:	430b      	orrs	r3, r1
   107c8:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   107ca:	2000      	movs	r0, #0
   107cc:	e74e      	b.n	1066c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   107ce:	6828      	ldr	r0, [r5, #0]
   107d0:	4b0a      	ldr	r3, [pc, #40]	; (107fc <spi_init+0x1a4>)
   107d2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   107d4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   107d6:	b2c0      	uxtb	r0, r0
   107d8:	4b13      	ldr	r3, [pc, #76]	; (10828 <spi_init+0x1d0>)
   107da:	4798      	blx	r3
   107dc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   107de:	ab02      	add	r3, sp, #8
   107e0:	1d9a      	adds	r2, r3, #6
   107e2:	69b0      	ldr	r0, [r6, #24]
   107e4:	4b11      	ldr	r3, [pc, #68]	; (1082c <spi_init+0x1d4>)
   107e6:	4798      	blx	r3
   107e8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   107ea:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   107ec:	2b00      	cmp	r3, #0
   107ee:	d000      	beq.n	107f2 <spi_init+0x19a>
   107f0:	e73c      	b.n	1066c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   107f2:	ab02      	add	r3, sp, #8
   107f4:	3306      	adds	r3, #6
   107f6:	781b      	ldrb	r3, [r3, #0]
   107f8:	733b      	strb	r3, [r7, #12]
   107fa:	e7bf      	b.n	1077c <spi_init+0x124>
   107fc:	00010499 	.word	0x00010499
   10800:	40000400 	.word	0x40000400
   10804:	00011951 	.word	0x00011951
   10808:	000118c5 	.word	0x000118c5
   1080c:	000102d5 	.word	0x000102d5
   10810:	00010ac5 	.word	0x00010ac5
   10814:	000104d5 	.word	0x000104d5
   10818:	20001620 	.word	0x20001620
   1081c:	00010321 	.word	0x00010321
   10820:	00011a49 	.word	0x00011a49
   10824:	41002000 	.word	0x41002000
   10828:	0001196d 	.word	0x0001196d
   1082c:	00010217 	.word	0x00010217

00010830 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   10830:	b5f0      	push	{r4, r5, r6, r7, lr}
   10832:	46d6      	mov	lr, sl
   10834:	4647      	mov	r7, r8
   10836:	b580      	push	{r7, lr}
   10838:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1083a:	2438      	movs	r4, #56	; 0x38
   1083c:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1083e:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   10840:	2d05      	cmp	r5, #5
   10842:	d002      	beq.n	1084a <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10844:	3412      	adds	r4, #18
	if (length == 0) {
   10846:	2a00      	cmp	r2, #0
   10848:	d105      	bne.n	10856 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1084a:	0020      	movs	r0, r4
   1084c:	b003      	add	sp, #12
   1084e:	bc0c      	pop	{r2, r3}
   10850:	4690      	mov	r8, r2
   10852:	469a      	mov	sl, r3
   10854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   10856:	79c4      	ldrb	r4, [r0, #7]
   10858:	2c00      	cmp	r4, #0
   1085a:	d144      	bne.n	108e6 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   1085c:	341c      	adds	r4, #28
   1085e:	e7f4      	b.n	1084a <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10860:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10862:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   10864:	423c      	tst	r4, r7
   10866:	d0fc      	beq.n	10862 <spi_read_buffer_wait+0x32>
   10868:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   1086a:	423c      	tst	r4, r7
   1086c:	d01a      	beq.n	108a4 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1086e:	4644      	mov	r4, r8
   10870:	62ac      	str	r4, [r5, #40]	; 0x28
   10872:	e017      	b.n	108a4 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10874:	7984      	ldrb	r4, [r0, #6]
   10876:	2c01      	cmp	r4, #1
   10878:	d026      	beq.n	108c8 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1087a:	6aad      	ldr	r5, [r5, #40]	; 0x28
   1087c:	b2ec      	uxtb	r4, r5
   1087e:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   10880:	9c01      	ldr	r4, [sp, #4]
   10882:	2c00      	cmp	r4, #0
   10884:	d13a      	bne.n	108fc <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   10886:	1c75      	adds	r5, r6, #1
   10888:	b2ad      	uxth	r5, r5
   1088a:	4664      	mov	r4, ip
   1088c:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1088e:	7984      	ldrb	r4, [r0, #6]
   10890:	2c01      	cmp	r4, #1
   10892:	d01e      	beq.n	108d2 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   10894:	002e      	movs	r6, r5
	while (length--) {
   10896:	3a01      	subs	r2, #1
   10898:	b292      	uxth	r2, r2
   1089a:	4552      	cmp	r2, sl
   1089c:	d01f      	beq.n	108de <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   1089e:	7944      	ldrb	r4, [r0, #5]
   108a0:	2c01      	cmp	r4, #1
   108a2:	d0dd      	beq.n	10860 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   108a4:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   108a6:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   108a8:	421c      	tst	r4, r3
   108aa:	d0fc      	beq.n	108a6 <spi_read_buffer_wait+0x76>
   108ac:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   108ae:	421c      	tst	r4, r3
   108b0:	d017      	beq.n	108e2 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   108b2:	8b6c      	ldrh	r4, [r5, #26]
   108b4:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   108b6:	2400      	movs	r4, #0
   108b8:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   108ba:	4664      	mov	r4, ip
   108bc:	421c      	tst	r4, r3
   108be:	d0d9      	beq.n	10874 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   108c0:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   108c2:	241e      	movs	r4, #30
   108c4:	9401      	str	r4, [sp, #4]
   108c6:	e7d5      	b.n	10874 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   108c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   108ca:	05e4      	lsls	r4, r4, #23
   108cc:	0de4      	lsrs	r4, r4, #23
   108ce:	46a4      	mov	ip, r4
   108d0:	e7d6      	b.n	10880 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   108d2:	3602      	adds	r6, #2
   108d4:	b2b6      	uxth	r6, r6
   108d6:	4664      	mov	r4, ip
   108d8:	0a24      	lsrs	r4, r4, #8
   108da:	554c      	strb	r4, [r1, r5]
   108dc:	e7db      	b.n	10896 <spi_read_buffer_wait+0x66>
   108de:	9c01      	ldr	r4, [sp, #4]
   108e0:	e7b3      	b.n	1084a <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   108e2:	2410      	movs	r4, #16
   108e4:	e7b1      	b.n	1084a <spi_read_buffer_wait+0x1a>
	while (length--) {
   108e6:	3a01      	subs	r2, #1
   108e8:	b292      	uxth	r2, r2
   108ea:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   108ec:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   108ee:	05db      	lsls	r3, r3, #23
   108f0:	0ddb      	lsrs	r3, r3, #23
   108f2:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   108f4:	2304      	movs	r3, #4
	while (length--) {
   108f6:	4c02      	ldr	r4, [pc, #8]	; (10900 <spi_read_buffer_wait+0xd0>)
   108f8:	46a2      	mov	sl, r4
   108fa:	e7d0      	b.n	1089e <spi_read_buffer_wait+0x6e>
   108fc:	9c01      	ldr	r4, [sp, #4]
   108fe:	e7a4      	b.n	1084a <spi_read_buffer_wait+0x1a>
   10900:	0000ffff 	.word	0x0000ffff

00010904 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   10904:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   10906:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   10908:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   1090a:	2c01      	cmp	r4, #1
   1090c:	d001      	beq.n	10912 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1090e:	0018      	movs	r0, r3
   10910:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   10912:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   10914:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   10916:	2c00      	cmp	r4, #0
   10918:	d1f9      	bne.n	1090e <spi_select_slave+0xa>
		if (select) {
   1091a:	2a00      	cmp	r2, #0
   1091c:	d058      	beq.n	109d0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   1091e:	784b      	ldrb	r3, [r1, #1]
   10920:	2b00      	cmp	r3, #0
   10922:	d044      	beq.n	109ae <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10924:	6803      	ldr	r3, [r0, #0]
   10926:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   10928:	07db      	lsls	r3, r3, #31
   1092a:	d410      	bmi.n	1094e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   1092c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1092e:	09d1      	lsrs	r1, r2, #7
		return NULL;
   10930:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10932:	2900      	cmp	r1, #0
   10934:	d104      	bne.n	10940 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   10936:	0953      	lsrs	r3, r2, #5
   10938:	01db      	lsls	r3, r3, #7
   1093a:	492e      	ldr	r1, [pc, #184]	; (109f4 <spi_select_slave+0xf0>)
   1093c:	468c      	mov	ip, r1
   1093e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10940:	211f      	movs	r1, #31
   10942:	4011      	ands	r1, r2
   10944:	2201      	movs	r2, #1
   10946:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10948:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   1094a:	2305      	movs	r3, #5
   1094c:	e7df      	b.n	1090e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1094e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10950:	09d4      	lsrs	r4, r2, #7
		return NULL;
   10952:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10954:	2c00      	cmp	r4, #0
   10956:	d104      	bne.n	10962 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   10958:	0953      	lsrs	r3, r2, #5
   1095a:	01db      	lsls	r3, r3, #7
   1095c:	4c25      	ldr	r4, [pc, #148]	; (109f4 <spi_select_slave+0xf0>)
   1095e:	46a4      	mov	ip, r4
   10960:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10962:	241f      	movs	r4, #31
   10964:	4014      	ands	r4, r2
   10966:	2201      	movs	r2, #1
   10968:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   1096a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1096c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1096e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   10970:	07d2      	lsls	r2, r2, #31
   10972:	d501      	bpl.n	10978 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10974:	788a      	ldrb	r2, [r1, #2]
   10976:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   10978:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   1097a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   1097c:	2a00      	cmp	r2, #0
   1097e:	d1c6      	bne.n	1090e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10980:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   10982:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10984:	7e13      	ldrb	r3, [r2, #24]
   10986:	420b      	tst	r3, r1
   10988:	d0fc      	beq.n	10984 <spi_select_slave+0x80>
   1098a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   1098c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   1098e:	0749      	lsls	r1, r1, #29
   10990:	d5bd      	bpl.n	1090e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10992:	8b53      	ldrh	r3, [r2, #26]
   10994:	075b      	lsls	r3, r3, #29
   10996:	d501      	bpl.n	1099c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10998:	2304      	movs	r3, #4
   1099a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1099c:	7983      	ldrb	r3, [r0, #6]
   1099e:	2b01      	cmp	r3, #1
   109a0:	d002      	beq.n	109a8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   109a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   109a4:	2300      	movs	r3, #0
   109a6:	e7b2      	b.n	1090e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   109a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   109aa:	2300      	movs	r3, #0
   109ac:	e7af      	b.n	1090e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   109ae:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   109b0:	09d1      	lsrs	r1, r2, #7
		return NULL;
   109b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   109b4:	2900      	cmp	r1, #0
   109b6:	d104      	bne.n	109c2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   109b8:	0953      	lsrs	r3, r2, #5
   109ba:	01db      	lsls	r3, r3, #7
   109bc:	490d      	ldr	r1, [pc, #52]	; (109f4 <spi_select_slave+0xf0>)
   109be:	468c      	mov	ip, r1
   109c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   109c2:	211f      	movs	r1, #31
   109c4:	4011      	ands	r1, r2
   109c6:	2201      	movs	r2, #1
   109c8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   109ca:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   109cc:	2300      	movs	r3, #0
   109ce:	e79e      	b.n	1090e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   109d0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   109d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
   109d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   109d6:	2900      	cmp	r1, #0
   109d8:	d104      	bne.n	109e4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   109da:	0953      	lsrs	r3, r2, #5
   109dc:	01db      	lsls	r3, r3, #7
   109de:	4905      	ldr	r1, [pc, #20]	; (109f4 <spi_select_slave+0xf0>)
   109e0:	468c      	mov	ip, r1
   109e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   109e4:	211f      	movs	r1, #31
   109e6:	4011      	ands	r1, r2
   109e8:	2201      	movs	r2, #1
   109ea:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   109ec:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   109ee:	2300      	movs	r3, #0
   109f0:	e78d      	b.n	1090e <spi_select_slave+0xa>
   109f2:	46c0      	nop			; (mov r8, r8)
   109f4:	41004400 	.word	0x41004400

000109f8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   109f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109fa:	46de      	mov	lr, fp
   109fc:	4657      	mov	r7, sl
   109fe:	464e      	mov	r6, r9
   10a00:	4645      	mov	r5, r8
   10a02:	b5e0      	push	{r5, r6, r7, lr}
   10a04:	b083      	sub	sp, #12
   10a06:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   10a08:	2338      	movs	r3, #56	; 0x38
   10a0a:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   10a0c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   10a0e:	2c05      	cmp	r4, #5
   10a10:	d002      	beq.n	10a18 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10a12:	3312      	adds	r3, #18
	if (length == 0) {
   10a14:	2a00      	cmp	r2, #0
   10a16:	d14b      	bne.n	10ab0 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   10a18:	0018      	movs	r0, r3
   10a1a:	b003      	add	sp, #12
   10a1c:	bc3c      	pop	{r2, r3, r4, r5}
   10a1e:	4690      	mov	r8, r2
   10a20:	4699      	mov	r9, r3
   10a22:	46a2      	mov	sl, r4
   10a24:	46ab      	mov	fp, r5
   10a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   10a28:	3702      	adds	r7, #2
   10a2a:	b2bf      	uxth	r7, r7
   10a2c:	4641      	mov	r1, r8
   10a2e:	4653      	mov	r3, sl
   10a30:	5c59      	ldrb	r1, [r3, r1]
   10a32:	0209      	lsls	r1, r1, #8
   10a34:	465b      	mov	r3, fp
   10a36:	430b      	orrs	r3, r1
   10a38:	e018      	b.n	10a6c <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10a3a:	7983      	ldrb	r3, [r0, #6]
   10a3c:	2b01      	cmp	r3, #1
   10a3e:	d02a      	beq.n	10a96 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10a40:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   10a42:	3e01      	subs	r6, #1
   10a44:	b2b6      	uxth	r6, r6
   10a46:	4566      	cmp	r6, ip
   10a48:	d027      	beq.n	10a9a <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10a4a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10a4c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   10a4e:	4223      	tst	r3, r4
   10a50:	d0fc      	beq.n	10a4c <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   10a52:	1c7b      	adds	r3, r7, #1
   10a54:	b29b      	uxth	r3, r3
   10a56:	4698      	mov	r8, r3
   10a58:	4653      	mov	r3, sl
   10a5a:	5ddb      	ldrb	r3, [r3, r7]
   10a5c:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10a5e:	7981      	ldrb	r1, [r0, #6]
   10a60:	2901      	cmp	r1, #1
   10a62:	d0e1      	beq.n	10a28 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   10a64:	4669      	mov	r1, sp
   10a66:	80cb      	strh	r3, [r1, #6]
   10a68:	88cb      	ldrh	r3, [r1, #6]
   10a6a:	4647      	mov	r7, r8
   10a6c:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   10a6e:	4221      	tst	r1, r4
   10a70:	d002      	beq.n	10a78 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10a72:	05db      	lsls	r3, r3, #23
   10a74:	0ddb      	lsrs	r3, r3, #23
   10a76:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   10a78:	79c3      	ldrb	r3, [r0, #7]
   10a7a:	2b00      	cmp	r3, #0
   10a7c:	d0e1      	beq.n	10a42 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10a7e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10a80:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   10a82:	422b      	tst	r3, r5
   10a84:	d0fc      	beq.n	10a80 <spi_write_buffer_wait+0x88>
   10a86:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   10a88:	422b      	tst	r3, r5
   10a8a:	d0da      	beq.n	10a42 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10a8c:	8b53      	ldrh	r3, [r2, #26]
   10a8e:	422b      	tst	r3, r5
   10a90:	d0d3      	beq.n	10a3a <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10a92:	8355      	strh	r5, [r2, #26]
   10a94:	e7d1      	b.n	10a3a <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10a96:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10a98:	e7d3      	b.n	10a42 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   10a9a:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   10a9c:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   10a9e:	2a01      	cmp	r2, #1
   10aa0:	d1ba      	bne.n	10a18 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10aa2:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   10aa4:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   10aa6:	7e0b      	ldrb	r3, [r1, #24]
   10aa8:	4213      	tst	r3, r2
   10aaa:	d0fc      	beq.n	10aa6 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   10aac:	2300      	movs	r3, #0
   10aae:	e7b3      	b.n	10a18 <spi_write_buffer_wait+0x20>
	while (length--) {
   10ab0:	3a01      	subs	r2, #1
   10ab2:	b296      	uxth	r6, r2
   10ab4:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   10ab6:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   10ab8:	2504      	movs	r5, #4
	while (length--) {
   10aba:	4b01      	ldr	r3, [pc, #4]	; (10ac0 <spi_write_buffer_wait+0xc8>)
   10abc:	469c      	mov	ip, r3
   10abe:	e7c4      	b.n	10a4a <spi_write_buffer_wait+0x52>
   10ac0:	0000ffff 	.word	0x0000ffff

00010ac4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   10ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   10ac6:	0080      	lsls	r0, r0, #2
   10ac8:	4b70      	ldr	r3, [pc, #448]	; (10c8c <_spi_interrupt_handler+0x1c8>)
   10aca:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10acc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   10ace:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   10ad0:	5ce7      	ldrb	r7, [r4, r3]
   10ad2:	2236      	movs	r2, #54	; 0x36
   10ad4:	5ca2      	ldrb	r2, [r4, r2]
   10ad6:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   10ad8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   10ada:	7db5      	ldrb	r5, [r6, #22]
   10adc:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   10ade:	07eb      	lsls	r3, r5, #31
   10ae0:	d502      	bpl.n	10ae8 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   10ae2:	7963      	ldrb	r3, [r4, #5]
   10ae4:	2b01      	cmp	r3, #1
   10ae6:	d01e      	beq.n	10b26 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   10ae8:	076b      	lsls	r3, r5, #29
   10aea:	d511      	bpl.n	10b10 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10aec:	8b73      	ldrh	r3, [r6, #26]
   10aee:	075b      	lsls	r3, r3, #29
   10af0:	d55a      	bpl.n	10ba8 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   10af2:	7a63      	ldrb	r3, [r4, #9]
   10af4:	2b01      	cmp	r3, #1
   10af6:	d008      	beq.n	10b0a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   10af8:	221e      	movs	r2, #30
   10afa:	2338      	movs	r3, #56	; 0x38
   10afc:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   10afe:	3b35      	subs	r3, #53	; 0x35
   10b00:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   10b02:	3302      	adds	r3, #2
   10b04:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   10b06:	073b      	lsls	r3, r7, #28
   10b08:	d44a      	bmi.n	10ba0 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   10b0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10b0c:	2304      	movs	r3, #4
   10b0e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   10b10:	07ab      	lsls	r3, r5, #30
   10b12:	d503      	bpl.n	10b1c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   10b14:	7963      	ldrb	r3, [r4, #5]
   10b16:	2b01      	cmp	r3, #1
   10b18:	d100      	bne.n	10b1c <_spi_interrupt_handler+0x58>
   10b1a:	e097      	b.n	10c4c <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   10b1c:	b26d      	sxtb	r5, r5
   10b1e:	2d00      	cmp	r5, #0
   10b20:	da00      	bge.n	10b24 <_spi_interrupt_handler+0x60>
   10b22:	e0a9      	b.n	10c78 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   10b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   10b26:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10b28:	2b00      	cmp	r3, #0
   10b2a:	d022      	beq.n	10b72 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   10b2c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d0da      	beq.n	10ae8 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10b32:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   10b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10b36:	7813      	ldrb	r3, [r2, #0]
   10b38:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   10b3a:	1c50      	adds	r0, r2, #1
   10b3c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10b3e:	79a0      	ldrb	r0, [r4, #6]
   10b40:	2801      	cmp	r0, #1
   10b42:	d027      	beq.n	10b94 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   10b44:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   10b46:	05db      	lsls	r3, r3, #23
   10b48:	0ddb      	lsrs	r3, r3, #23
   10b4a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   10b4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10b4e:	3b01      	subs	r3, #1
   10b50:	b29b      	uxth	r3, r3
   10b52:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   10b54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10b56:	b29b      	uxth	r3, r3
   10b58:	2b00      	cmp	r3, #0
   10b5a:	d1c5      	bne.n	10ae8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10b5c:	3301      	adds	r3, #1
   10b5e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   10b60:	7a63      	ldrb	r3, [r4, #9]
   10b62:	2b01      	cmp	r3, #1
   10b64:	d1c0      	bne.n	10ae8 <_spi_interrupt_handler+0x24>
   10b66:	79e3      	ldrb	r3, [r4, #7]
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d1bd      	bne.n	10ae8 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10b6c:	3302      	adds	r3, #2
   10b6e:	75b3      	strb	r3, [r6, #22]
   10b70:	e7ba      	b.n	10ae8 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   10b72:	4b47      	ldr	r3, [pc, #284]	; (10c90 <_spi_interrupt_handler+0x1cc>)
   10b74:	881b      	ldrh	r3, [r3, #0]
   10b76:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10b78:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10b7a:	3b01      	subs	r3, #1
   10b7c:	b29b      	uxth	r3, r3
   10b7e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10b80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10b82:	b29b      	uxth	r3, r3
   10b84:	2b00      	cmp	r3, #0
   10b86:	d101      	bne.n	10b8c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10b88:	3301      	adds	r3, #1
   10b8a:	7533      	strb	r3, [r6, #20]
		if (0
   10b8c:	7963      	ldrb	r3, [r4, #5]
   10b8e:	2b01      	cmp	r3, #1
   10b90:	d0cc      	beq.n	10b2c <_spi_interrupt_handler+0x68>
   10b92:	e7a9      	b.n	10ae8 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   10b94:	7850      	ldrb	r0, [r2, #1]
   10b96:	0200      	lsls	r0, r0, #8
   10b98:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   10b9a:	3202      	adds	r2, #2
   10b9c:	62e2      	str	r2, [r4, #44]	; 0x2c
   10b9e:	e7d2      	b.n	10b46 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   10ba0:	0020      	movs	r0, r4
   10ba2:	69a3      	ldr	r3, [r4, #24]
   10ba4:	4798      	blx	r3
   10ba6:	e7b0      	b.n	10b0a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   10ba8:	7a63      	ldrb	r3, [r4, #9]
   10baa:	2b01      	cmp	r3, #1
   10bac:	d028      	beq.n	10c00 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10bae:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   10bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10bb2:	05db      	lsls	r3, r3, #23
   10bb4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   10bb6:	b2da      	uxtb	r2, r3
   10bb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10bba:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   10bbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10bbe:	1c51      	adds	r1, r2, #1
   10bc0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10bc2:	79a1      	ldrb	r1, [r4, #6]
   10bc4:	2901      	cmp	r1, #1
   10bc6:	d034      	beq.n	10c32 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   10bc8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10bca:	3b01      	subs	r3, #1
   10bcc:	b29b      	uxth	r3, r3
   10bce:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   10bd0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10bd2:	b29b      	uxth	r3, r3
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	d000      	beq.n	10bda <_spi_interrupt_handler+0x116>
   10bd8:	e79a      	b.n	10b10 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   10bda:	2200      	movs	r2, #0
   10bdc:	3338      	adds	r3, #56	; 0x38
   10bde:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   10be0:	3b34      	subs	r3, #52	; 0x34
   10be2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   10be4:	7a63      	ldrb	r3, [r4, #9]
   10be6:	2b02      	cmp	r3, #2
   10be8:	d029      	beq.n	10c3e <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   10bea:	7a63      	ldrb	r3, [r4, #9]
   10bec:	2b00      	cmp	r3, #0
   10bee:	d000      	beq.n	10bf2 <_spi_interrupt_handler+0x12e>
   10bf0:	e78e      	b.n	10b10 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   10bf2:	07bb      	lsls	r3, r7, #30
   10bf4:	d400      	bmi.n	10bf8 <_spi_interrupt_handler+0x134>
   10bf6:	e78b      	b.n	10b10 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   10bf8:	0020      	movs	r0, r4
   10bfa:	6923      	ldr	r3, [r4, #16]
   10bfc:	4798      	blx	r3
   10bfe:	e787      	b.n	10b10 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10c00:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   10c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10c04:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10c06:	3b01      	subs	r3, #1
   10c08:	b29b      	uxth	r3, r3
   10c0a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   10c0c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10c0e:	b29b      	uxth	r3, r3
   10c10:	2b00      	cmp	r3, #0
   10c12:	d000      	beq.n	10c16 <_spi_interrupt_handler+0x152>
   10c14:	e77c      	b.n	10b10 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   10c16:	3304      	adds	r3, #4
   10c18:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   10c1a:	2200      	movs	r2, #0
   10c1c:	3334      	adds	r3, #52	; 0x34
   10c1e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   10c20:	3b35      	subs	r3, #53	; 0x35
   10c22:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   10c24:	07fb      	lsls	r3, r7, #31
   10c26:	d400      	bmi.n	10c2a <_spi_interrupt_handler+0x166>
   10c28:	e772      	b.n	10b10 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   10c2a:	0020      	movs	r0, r4
   10c2c:	68e3      	ldr	r3, [r4, #12]
   10c2e:	4798      	blx	r3
   10c30:	e76e      	b.n	10b10 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   10c32:	0a1b      	lsrs	r3, r3, #8
   10c34:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   10c36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10c38:	3301      	adds	r3, #1
   10c3a:	62a3      	str	r3, [r4, #40]	; 0x28
   10c3c:	e7c4      	b.n	10bc8 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   10c3e:	077b      	lsls	r3, r7, #29
   10c40:	d400      	bmi.n	10c44 <_spi_interrupt_handler+0x180>
   10c42:	e765      	b.n	10b10 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   10c44:	0020      	movs	r0, r4
   10c46:	6963      	ldr	r3, [r4, #20]
   10c48:	4798      	blx	r3
   10c4a:	e761      	b.n	10b10 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10c4c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10c4e:	2b01      	cmp	r3, #1
   10c50:	d000      	beq.n	10c54 <_spi_interrupt_handler+0x190>
   10c52:	e763      	b.n	10b1c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10c54:	79e3      	ldrb	r3, [r4, #7]
   10c56:	2b00      	cmp	r3, #0
   10c58:	d000      	beq.n	10c5c <_spi_interrupt_handler+0x198>
   10c5a:	e75f      	b.n	10b1c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10c5c:	3302      	adds	r3, #2
   10c5e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   10c60:	3301      	adds	r3, #1
   10c62:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   10c64:	2200      	movs	r2, #0
   10c66:	3335      	adds	r3, #53	; 0x35
   10c68:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10c6a:	07fb      	lsls	r3, r7, #31
   10c6c:	d400      	bmi.n	10c70 <_spi_interrupt_handler+0x1ac>
   10c6e:	e755      	b.n	10b1c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   10c70:	0020      	movs	r0, r4
   10c72:	68e3      	ldr	r3, [r4, #12]
   10c74:	4798      	blx	r3
   10c76:	e751      	b.n	10b1c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10c78:	2380      	movs	r3, #128	; 0x80
   10c7a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10c7c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   10c7e:	067b      	lsls	r3, r7, #25
   10c80:	d400      	bmi.n	10c84 <_spi_interrupt_handler+0x1c0>
   10c82:	e74f      	b.n	10b24 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   10c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c86:	0020      	movs	r0, r4
   10c88:	4798      	blx	r3
}
   10c8a:	e74b      	b.n	10b24 <_spi_interrupt_handler+0x60>
   10c8c:	20001620 	.word	0x20001620
   10c90:	20001638 	.word	0x20001638

00010c94 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   10c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c96:	46de      	mov	lr, fp
   10c98:	4657      	mov	r7, sl
   10c9a:	464e      	mov	r6, r9
   10c9c:	4645      	mov	r5, r8
   10c9e:	b5e0      	push	{r5, r6, r7, lr}
   10ca0:	b091      	sub	sp, #68	; 0x44
   10ca2:	0005      	movs	r5, r0
   10ca4:	000c      	movs	r4, r1
   10ca6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10ca8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10caa:	0008      	movs	r0, r1
   10cac:	4bbc      	ldr	r3, [pc, #752]	; (10fa0 <usart_init+0x30c>)
   10cae:	4798      	blx	r3
   10cb0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10cb2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   10cb4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10cb6:	07db      	lsls	r3, r3, #31
   10cb8:	d506      	bpl.n	10cc8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   10cba:	b011      	add	sp, #68	; 0x44
   10cbc:	bc3c      	pop	{r2, r3, r4, r5}
   10cbe:	4690      	mov	r8, r2
   10cc0:	4699      	mov	r9, r3
   10cc2:	46a2      	mov	sl, r4
   10cc4:	46ab      	mov	fp, r5
   10cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10cc8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   10cca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10ccc:	079b      	lsls	r3, r3, #30
   10cce:	d4f4      	bmi.n	10cba <usart_init+0x26>
   10cd0:	49b4      	ldr	r1, [pc, #720]	; (10fa4 <usart_init+0x310>)
   10cd2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   10cd4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10cd6:	2301      	movs	r3, #1
   10cd8:	40bb      	lsls	r3, r7
   10cda:	4303      	orrs	r3, r0
   10cdc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10cde:	a90f      	add	r1, sp, #60	; 0x3c
   10ce0:	272d      	movs	r7, #45	; 0x2d
   10ce2:	5df3      	ldrb	r3, [r6, r7]
   10ce4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10ce6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10ce8:	b2d3      	uxtb	r3, r2
   10cea:	9302      	str	r3, [sp, #8]
   10cec:	0018      	movs	r0, r3
   10cee:	4bae      	ldr	r3, [pc, #696]	; (10fa8 <usart_init+0x314>)
   10cf0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10cf2:	9802      	ldr	r0, [sp, #8]
   10cf4:	4bad      	ldr	r3, [pc, #692]	; (10fac <usart_init+0x318>)
   10cf6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10cf8:	5df0      	ldrb	r0, [r6, r7]
   10cfa:	2100      	movs	r1, #0
   10cfc:	4bac      	ldr	r3, [pc, #688]	; (10fb0 <usart_init+0x31c>)
   10cfe:	4798      	blx	r3
	module->character_size = config->character_size;
   10d00:	7af3      	ldrb	r3, [r6, #11]
   10d02:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   10d04:	2324      	movs	r3, #36	; 0x24
   10d06:	5cf3      	ldrb	r3, [r6, r3]
   10d08:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10d0a:	2325      	movs	r3, #37	; 0x25
   10d0c:	5cf3      	ldrb	r3, [r6, r3]
   10d0e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   10d10:	7ef3      	ldrb	r3, [r6, #27]
   10d12:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10d14:	7f33      	ldrb	r3, [r6, #28]
   10d16:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10d18:	682b      	ldr	r3, [r5, #0]
   10d1a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10d1c:	0018      	movs	r0, r3
   10d1e:	4ba0      	ldr	r3, [pc, #640]	; (10fa0 <usart_init+0x30c>)
   10d20:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10d22:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   10d24:	2200      	movs	r2, #0
   10d26:	230e      	movs	r3, #14
   10d28:	a906      	add	r1, sp, #24
   10d2a:	468c      	mov	ip, r1
   10d2c:	4463      	add	r3, ip
   10d2e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   10d30:	8a32      	ldrh	r2, [r6, #16]
   10d32:	9202      	str	r2, [sp, #8]
   10d34:	2380      	movs	r3, #128	; 0x80
   10d36:	01db      	lsls	r3, r3, #7
   10d38:	429a      	cmp	r2, r3
   10d3a:	d100      	bne.n	10d3e <usart_init+0xaa>
   10d3c:	e09e      	b.n	10e7c <usart_init+0x1e8>
   10d3e:	d90f      	bls.n	10d60 <usart_init+0xcc>
   10d40:	23c0      	movs	r3, #192	; 0xc0
   10d42:	01db      	lsls	r3, r3, #7
   10d44:	9a02      	ldr	r2, [sp, #8]
   10d46:	429a      	cmp	r2, r3
   10d48:	d100      	bne.n	10d4c <usart_init+0xb8>
   10d4a:	e092      	b.n	10e72 <usart_init+0x1de>
   10d4c:	2380      	movs	r3, #128	; 0x80
   10d4e:	021b      	lsls	r3, r3, #8
   10d50:	429a      	cmp	r2, r3
   10d52:	d000      	beq.n	10d56 <usart_init+0xc2>
   10d54:	e11f      	b.n	10f96 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10d56:	2303      	movs	r3, #3
   10d58:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10d5a:	2300      	movs	r3, #0
   10d5c:	9307      	str	r3, [sp, #28]
   10d5e:	e008      	b.n	10d72 <usart_init+0xde>
	switch (config->sample_rate) {
   10d60:	2380      	movs	r3, #128	; 0x80
   10d62:	019b      	lsls	r3, r3, #6
   10d64:	429a      	cmp	r2, r3
   10d66:	d000      	beq.n	10d6a <usart_init+0xd6>
   10d68:	e115      	b.n	10f96 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10d6a:	2310      	movs	r3, #16
   10d6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10d6e:	3b0f      	subs	r3, #15
   10d70:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   10d72:	6833      	ldr	r3, [r6, #0]
   10d74:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10d76:	68f3      	ldr	r3, [r6, #12]
   10d78:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10d7a:	6973      	ldr	r3, [r6, #20]
   10d7c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10d7e:	7e33      	ldrb	r3, [r6, #24]
   10d80:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10d82:	2326      	movs	r3, #38	; 0x26
   10d84:	5cf3      	ldrb	r3, [r6, r3]
   10d86:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10d88:	6873      	ldr	r3, [r6, #4]
   10d8a:	4699      	mov	r9, r3
	switch (transfer_mode)
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	d100      	bne.n	10d92 <usart_init+0xfe>
   10d90:	e0a0      	b.n	10ed4 <usart_init+0x240>
   10d92:	2380      	movs	r3, #128	; 0x80
   10d94:	055b      	lsls	r3, r3, #21
   10d96:	4599      	cmp	r9, r3
   10d98:	d100      	bne.n	10d9c <usart_init+0x108>
   10d9a:	e084      	b.n	10ea6 <usart_init+0x212>
	if(config->encoding_format_enable) {
   10d9c:	7e73      	ldrb	r3, [r6, #25]
   10d9e:	2b00      	cmp	r3, #0
   10da0:	d002      	beq.n	10da8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   10da2:	7eb3      	ldrb	r3, [r6, #26]
   10da4:	4642      	mov	r2, r8
   10da6:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10da8:	682a      	ldr	r2, [r5, #0]
   10daa:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   10dac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10dae:	2b00      	cmp	r3, #0
   10db0:	d1fc      	bne.n	10dac <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   10db2:	330e      	adds	r3, #14
   10db4:	aa06      	add	r2, sp, #24
   10db6:	4694      	mov	ip, r2
   10db8:	4463      	add	r3, ip
   10dba:	881b      	ldrh	r3, [r3, #0]
   10dbc:	4642      	mov	r2, r8
   10dbe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   10dc0:	9b05      	ldr	r3, [sp, #20]
   10dc2:	9a03      	ldr	r2, [sp, #12]
   10dc4:	4313      	orrs	r3, r2
   10dc6:	9a04      	ldr	r2, [sp, #16]
   10dc8:	4313      	orrs	r3, r2
   10dca:	464a      	mov	r2, r9
   10dcc:	4313      	orrs	r3, r2
   10dce:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10dd0:	465b      	mov	r3, fp
   10dd2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   10dd4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10dd6:	4653      	mov	r3, sl
   10dd8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   10dda:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   10ddc:	2327      	movs	r3, #39	; 0x27
   10dde:	5cf3      	ldrb	r3, [r6, r3]
   10de0:	2b00      	cmp	r3, #0
   10de2:	d101      	bne.n	10de8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   10de4:	3304      	adds	r3, #4
   10de6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10de8:	7e73      	ldrb	r3, [r6, #25]
   10dea:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10dec:	7f32      	ldrb	r2, [r6, #28]
   10dee:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10df0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10df2:	7f72      	ldrb	r2, [r6, #29]
   10df4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10df6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10df8:	2224      	movs	r2, #36	; 0x24
   10dfa:	5cb2      	ldrb	r2, [r6, r2]
   10dfc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10dfe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   10e00:	2225      	movs	r2, #37	; 0x25
   10e02:	5cb2      	ldrb	r2, [r6, r2]
   10e04:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10e06:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   10e08:	7ab1      	ldrb	r1, [r6, #10]
   10e0a:	7af2      	ldrb	r2, [r6, #11]
   10e0c:	4311      	orrs	r1, r2
   10e0e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   10e10:	8933      	ldrh	r3, [r6, #8]
   10e12:	2bff      	cmp	r3, #255	; 0xff
   10e14:	d100      	bne.n	10e18 <usart_init+0x184>
   10e16:	e081      	b.n	10f1c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   10e18:	2280      	movs	r2, #128	; 0x80
   10e1a:	0452      	lsls	r2, r2, #17
   10e1c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   10e1e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   10e20:	232c      	movs	r3, #44	; 0x2c
   10e22:	5cf3      	ldrb	r3, [r6, r3]
   10e24:	2b00      	cmp	r3, #0
   10e26:	d103      	bne.n	10e30 <usart_init+0x19c>
   10e28:	4b62      	ldr	r3, [pc, #392]	; (10fb4 <usart_init+0x320>)
   10e2a:	789b      	ldrb	r3, [r3, #2]
   10e2c:	079b      	lsls	r3, r3, #30
   10e2e:	d501      	bpl.n	10e34 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10e30:	2380      	movs	r3, #128	; 0x80
   10e32:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   10e34:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10e36:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10e38:	2b00      	cmp	r3, #0
   10e3a:	d1fc      	bne.n	10e36 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   10e3c:	4643      	mov	r3, r8
   10e3e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10e40:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10e42:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10e44:	2b00      	cmp	r3, #0
   10e46:	d1fc      	bne.n	10e42 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   10e48:	4643      	mov	r3, r8
   10e4a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10e4c:	ab0e      	add	r3, sp, #56	; 0x38
   10e4e:	2280      	movs	r2, #128	; 0x80
   10e50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10e52:	2200      	movs	r2, #0
   10e54:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   10e56:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10e58:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10e5a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10e5c:	930a      	str	r3, [sp, #40]	; 0x28
   10e5e:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10e60:	930b      	str	r3, [sp, #44]	; 0x2c
   10e62:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10e64:	930c      	str	r3, [sp, #48]	; 0x30
   10e66:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10e68:	9302      	str	r3, [sp, #8]
   10e6a:	930d      	str	r3, [sp, #52]	; 0x34
   10e6c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10e6e:	ae0a      	add	r6, sp, #40	; 0x28
   10e70:	e063      	b.n	10f3a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10e72:	2308      	movs	r3, #8
   10e74:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10e76:	3b07      	subs	r3, #7
   10e78:	9307      	str	r3, [sp, #28]
   10e7a:	e77a      	b.n	10d72 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   10e7c:	6833      	ldr	r3, [r6, #0]
   10e7e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10e80:	68f3      	ldr	r3, [r6, #12]
   10e82:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10e84:	6973      	ldr	r3, [r6, #20]
   10e86:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10e88:	7e33      	ldrb	r3, [r6, #24]
   10e8a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10e8c:	2326      	movs	r3, #38	; 0x26
   10e8e:	5cf3      	ldrb	r3, [r6, r3]
   10e90:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10e92:	6873      	ldr	r3, [r6, #4]
   10e94:	4699      	mov	r9, r3
	switch (transfer_mode)
   10e96:	2b00      	cmp	r3, #0
   10e98:	d018      	beq.n	10ecc <usart_init+0x238>
   10e9a:	2380      	movs	r3, #128	; 0x80
   10e9c:	055b      	lsls	r3, r3, #21
   10e9e:	4599      	cmp	r9, r3
   10ea0:	d001      	beq.n	10ea6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   10ea2:	2000      	movs	r0, #0
   10ea4:	e025      	b.n	10ef2 <usart_init+0x25e>
			if (!config->use_external_clock) {
   10ea6:	2327      	movs	r3, #39	; 0x27
   10ea8:	5cf3      	ldrb	r3, [r6, r3]
   10eaa:	2b00      	cmp	r3, #0
   10eac:	d000      	beq.n	10eb0 <usart_init+0x21c>
   10eae:	e775      	b.n	10d9c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10eb0:	6a33      	ldr	r3, [r6, #32]
   10eb2:	001f      	movs	r7, r3
   10eb4:	b2c0      	uxtb	r0, r0
   10eb6:	4b40      	ldr	r3, [pc, #256]	; (10fb8 <usart_init+0x324>)
   10eb8:	4798      	blx	r3
   10eba:	0001      	movs	r1, r0
   10ebc:	220e      	movs	r2, #14
   10ebe:	ab06      	add	r3, sp, #24
   10ec0:	469c      	mov	ip, r3
   10ec2:	4462      	add	r2, ip
   10ec4:	0038      	movs	r0, r7
   10ec6:	4b3d      	ldr	r3, [pc, #244]	; (10fbc <usart_init+0x328>)
   10ec8:	4798      	blx	r3
   10eca:	e012      	b.n	10ef2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10ecc:	2308      	movs	r3, #8
   10ece:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10ed0:	2300      	movs	r3, #0
   10ed2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   10ed4:	2327      	movs	r3, #39	; 0x27
   10ed6:	5cf3      	ldrb	r3, [r6, r3]
   10ed8:	2b00      	cmp	r3, #0
   10eda:	d00e      	beq.n	10efa <usart_init+0x266>
				status_code =
   10edc:	9b06      	ldr	r3, [sp, #24]
   10ede:	9300      	str	r3, [sp, #0]
   10ee0:	9b07      	ldr	r3, [sp, #28]
   10ee2:	220e      	movs	r2, #14
   10ee4:	a906      	add	r1, sp, #24
   10ee6:	468c      	mov	ip, r1
   10ee8:	4462      	add	r2, ip
   10eea:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10eec:	6a30      	ldr	r0, [r6, #32]
   10eee:	4f34      	ldr	r7, [pc, #208]	; (10fc0 <usart_init+0x32c>)
   10ef0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   10ef2:	2800      	cmp	r0, #0
   10ef4:	d000      	beq.n	10ef8 <usart_init+0x264>
   10ef6:	e6e0      	b.n	10cba <usart_init+0x26>
   10ef8:	e750      	b.n	10d9c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   10efa:	6a33      	ldr	r3, [r6, #32]
   10efc:	001f      	movs	r7, r3
   10efe:	b2c0      	uxtb	r0, r0
   10f00:	4b2d      	ldr	r3, [pc, #180]	; (10fb8 <usart_init+0x324>)
   10f02:	4798      	blx	r3
   10f04:	0001      	movs	r1, r0
				status_code =
   10f06:	9b06      	ldr	r3, [sp, #24]
   10f08:	9300      	str	r3, [sp, #0]
   10f0a:	9b07      	ldr	r3, [sp, #28]
   10f0c:	220e      	movs	r2, #14
   10f0e:	a806      	add	r0, sp, #24
   10f10:	4684      	mov	ip, r0
   10f12:	4462      	add	r2, ip
   10f14:	0038      	movs	r0, r7
   10f16:	4f2a      	ldr	r7, [pc, #168]	; (10fc0 <usart_init+0x32c>)
   10f18:	47b8      	blx	r7
   10f1a:	e7ea      	b.n	10ef2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
   10f1c:	7ef3      	ldrb	r3, [r6, #27]
   10f1e:	2b00      	cmp	r3, #0
   10f20:	d100      	bne.n	10f24 <usart_init+0x290>
   10f22:	e77d      	b.n	10e20 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10f24:	2380      	movs	r3, #128	; 0x80
   10f26:	04db      	lsls	r3, r3, #19
   10f28:	431f      	orrs	r7, r3
   10f2a:	e779      	b.n	10e20 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10f2c:	0020      	movs	r0, r4
   10f2e:	4b25      	ldr	r3, [pc, #148]	; (10fc4 <usart_init+0x330>)
   10f30:	4798      	blx	r3
   10f32:	e007      	b.n	10f44 <usart_init+0x2b0>
   10f34:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10f36:	2f04      	cmp	r7, #4
   10f38:	d00d      	beq.n	10f56 <usart_init+0x2c2>
   10f3a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10f3c:	00bb      	lsls	r3, r7, #2
   10f3e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   10f40:	2800      	cmp	r0, #0
   10f42:	d0f3      	beq.n	10f2c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   10f44:	1c43      	adds	r3, r0, #1
   10f46:	d0f5      	beq.n	10f34 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10f48:	a90e      	add	r1, sp, #56	; 0x38
   10f4a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10f4c:	0c00      	lsrs	r0, r0, #16
   10f4e:	b2c0      	uxtb	r0, r0
   10f50:	4b1d      	ldr	r3, [pc, #116]	; (10fc8 <usart_init+0x334>)
   10f52:	4798      	blx	r3
   10f54:	e7ee      	b.n	10f34 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   10f56:	2300      	movs	r3, #0
   10f58:	60eb      	str	r3, [r5, #12]
   10f5a:	612b      	str	r3, [r5, #16]
   10f5c:	616b      	str	r3, [r5, #20]
   10f5e:	61ab      	str	r3, [r5, #24]
   10f60:	61eb      	str	r3, [r5, #28]
   10f62:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   10f64:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10f66:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10f68:	2200      	movs	r2, #0
   10f6a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10f6c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10f6e:	3330      	adds	r3, #48	; 0x30
   10f70:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   10f72:	3301      	adds	r3, #1
   10f74:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   10f76:	3301      	adds	r3, #1
   10f78:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   10f7a:	3301      	adds	r3, #1
   10f7c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10f7e:	6828      	ldr	r0, [r5, #0]
   10f80:	4b07      	ldr	r3, [pc, #28]	; (10fa0 <usart_init+0x30c>)
   10f82:	4798      	blx	r3
   10f84:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10f86:	4911      	ldr	r1, [pc, #68]	; (10fcc <usart_init+0x338>)
   10f88:	4b11      	ldr	r3, [pc, #68]	; (10fd0 <usart_init+0x33c>)
   10f8a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10f8c:	00a4      	lsls	r4, r4, #2
   10f8e:	4b11      	ldr	r3, [pc, #68]	; (10fd4 <usart_init+0x340>)
   10f90:	50e5      	str	r5, [r4, r3]
	return status_code;
   10f92:	2000      	movs	r0, #0
   10f94:	e691      	b.n	10cba <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10f96:	2310      	movs	r3, #16
   10f98:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10f9a:	2300      	movs	r3, #0
   10f9c:	9307      	str	r3, [sp, #28]
   10f9e:	e6e8      	b.n	10d72 <usart_init+0xde>
   10fa0:	00010499 	.word	0x00010499
   10fa4:	40000400 	.word	0x40000400
   10fa8:	00011951 	.word	0x00011951
   10fac:	000118c5 	.word	0x000118c5
   10fb0:	000102d5 	.word	0x000102d5
   10fb4:	41002000 	.word	0x41002000
   10fb8:	0001196d 	.word	0x0001196d
   10fbc:	00010217 	.word	0x00010217
   10fc0:	00010241 	.word	0x00010241
   10fc4:	00010321 	.word	0x00010321
   10fc8:	00011a49 	.word	0x00011a49
   10fcc:	00011175 	.word	0x00011175
   10fd0:	000104d5 	.word	0x000104d5
   10fd4:	20001620 	.word	0x20001620

00010fd8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10fd8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10fda:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10fdc:	2a00      	cmp	r2, #0
   10fde:	d101      	bne.n	10fe4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10fe0:	0018      	movs	r0, r3
   10fe2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   10fe4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   10fe6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10fe8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10fea:	2a00      	cmp	r2, #0
   10fec:	d1f8      	bne.n	10fe0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10fee:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10ff0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   10ff2:	2a00      	cmp	r2, #0
   10ff4:	d1fc      	bne.n	10ff0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   10ff6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10ff8:	2102      	movs	r1, #2
   10ffa:	7e1a      	ldrb	r2, [r3, #24]
   10ffc:	420a      	tst	r2, r1
   10ffe:	d0fc      	beq.n	10ffa <usart_write_wait+0x22>
	return STATUS_OK;
   11000:	2300      	movs	r3, #0
   11002:	e7ed      	b.n	10fe0 <usart_write_wait+0x8>

00011004 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   11004:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   11006:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   11008:	2a00      	cmp	r2, #0
   1100a:	d101      	bne.n	11010 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   1100c:	0018      	movs	r0, r3
   1100e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   11010:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   11012:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   11014:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   11016:	2a00      	cmp	r2, #0
   11018:	d1f8      	bne.n	1100c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   1101a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   1101c:	7e10      	ldrb	r0, [r2, #24]
   1101e:	0740      	lsls	r0, r0, #29
   11020:	d5f4      	bpl.n	1100c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   11022:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   11024:	2b00      	cmp	r3, #0
   11026:	d1fc      	bne.n	11022 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   11028:	8b53      	ldrh	r3, [r2, #26]
   1102a:	b2db      	uxtb	r3, r3
	if (error_code) {
   1102c:	0698      	lsls	r0, r3, #26
   1102e:	d01d      	beq.n	1106c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   11030:	0798      	lsls	r0, r3, #30
   11032:	d503      	bpl.n	1103c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   11034:	2302      	movs	r3, #2
   11036:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   11038:	3318      	adds	r3, #24
   1103a:	e7e7      	b.n	1100c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1103c:	0758      	lsls	r0, r3, #29
   1103e:	d503      	bpl.n	11048 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   11040:	2304      	movs	r3, #4
   11042:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   11044:	331a      	adds	r3, #26
   11046:	e7e1      	b.n	1100c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   11048:	07d8      	lsls	r0, r3, #31
   1104a:	d503      	bpl.n	11054 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1104c:	2301      	movs	r3, #1
   1104e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   11050:	3312      	adds	r3, #18
   11052:	e7db      	b.n	1100c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   11054:	06d8      	lsls	r0, r3, #27
   11056:	d503      	bpl.n	11060 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   11058:	2310      	movs	r3, #16
   1105a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   1105c:	3332      	adds	r3, #50	; 0x32
   1105e:	e7d5      	b.n	1100c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   11060:	069b      	lsls	r3, r3, #26
   11062:	d503      	bpl.n	1106c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   11064:	2320      	movs	r3, #32
   11066:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   11068:	3321      	adds	r3, #33	; 0x21
   1106a:	e7cf      	b.n	1100c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   1106c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   1106e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   11070:	2300      	movs	r3, #0
   11072:	e7cb      	b.n	1100c <usart_read_wait+0x8>

00011074 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   11074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11076:	0006      	movs	r6, r0
   11078:	000c      	movs	r4, r1
   1107a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1107c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1107e:	4b0a      	ldr	r3, [pc, #40]	; (110a8 <_usart_write_buffer+0x34>)
   11080:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   11082:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   11084:	b29b      	uxth	r3, r3
   11086:	2b00      	cmp	r3, #0
   11088:	d003      	beq.n	11092 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1108a:	4b08      	ldr	r3, [pc, #32]	; (110ac <_usart_write_buffer+0x38>)
   1108c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1108e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   11090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   11092:	85f5      	strh	r5, [r6, #46]	; 0x2e
   11094:	4b05      	ldr	r3, [pc, #20]	; (110ac <_usart_write_buffer+0x38>)
   11096:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   11098:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1109a:	2205      	movs	r2, #5
   1109c:	2333      	movs	r3, #51	; 0x33
   1109e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   110a0:	3b32      	subs	r3, #50	; 0x32
   110a2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   110a4:	2000      	movs	r0, #0
   110a6:	e7f3      	b.n	11090 <_usart_write_buffer+0x1c>
   110a8:	0000fc85 	.word	0x0000fc85
   110ac:	0000fcc5 	.word	0x0000fcc5

000110b0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   110b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110b2:	0004      	movs	r4, r0
   110b4:	000d      	movs	r5, r1
   110b6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   110b8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   110ba:	4b0f      	ldr	r3, [pc, #60]	; (110f8 <_usart_read_buffer+0x48>)
   110bc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   110be:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   110c0:	b29b      	uxth	r3, r3
   110c2:	2b00      	cmp	r3, #0
   110c4:	d003      	beq.n	110ce <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   110c6:	4b0d      	ldr	r3, [pc, #52]	; (110fc <_usart_read_buffer+0x4c>)
   110c8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   110ca:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   110cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   110ce:	85a6      	strh	r6, [r4, #44]	; 0x2c
   110d0:	4b0a      	ldr	r3, [pc, #40]	; (110fc <_usart_read_buffer+0x4c>)
   110d2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   110d4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   110d6:	2205      	movs	r2, #5
   110d8:	2332      	movs	r3, #50	; 0x32
   110da:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   110dc:	3b2e      	subs	r3, #46	; 0x2e
   110de:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   110e0:	7a23      	ldrb	r3, [r4, #8]
   110e2:	2b00      	cmp	r3, #0
   110e4:	d001      	beq.n	110ea <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   110e6:	2320      	movs	r3, #32
   110e8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   110ea:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   110ec:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   110ee:	2b00      	cmp	r3, #0
   110f0:	d0ec      	beq.n	110cc <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   110f2:	2308      	movs	r3, #8
   110f4:	75bb      	strb	r3, [r7, #22]
   110f6:	e7e9      	b.n	110cc <_usart_read_buffer+0x1c>
   110f8:	0000fc85 	.word	0x0000fc85
   110fc:	0000fcc5 	.word	0x0000fcc5

00011100 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   11100:	1c93      	adds	r3, r2, #2
   11102:	009b      	lsls	r3, r3, #2
   11104:	18c3      	adds	r3, r0, r3
   11106:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   11108:	2130      	movs	r1, #48	; 0x30
   1110a:	2301      	movs	r3, #1
   1110c:	4093      	lsls	r3, r2
   1110e:	001a      	movs	r2, r3
   11110:	5c43      	ldrb	r3, [r0, r1]
   11112:	4313      	orrs	r3, r2
   11114:	5443      	strb	r3, [r0, r1]
}
   11116:	4770      	bx	lr

00011118 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   11118:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1111a:	2317      	movs	r3, #23
	if (length == 0) {
   1111c:	2a00      	cmp	r2, #0
   1111e:	d101      	bne.n	11124 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   11120:	0018      	movs	r0, r3
   11122:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   11124:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   11126:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   11128:	2c00      	cmp	r4, #0
   1112a:	d0f9      	beq.n	11120 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1112c:	4b01      	ldr	r3, [pc, #4]	; (11134 <usart_write_buffer_job+0x1c>)
   1112e:	4798      	blx	r3
   11130:	0003      	movs	r3, r0
   11132:	e7f5      	b.n	11120 <usart_write_buffer_job+0x8>
   11134:	00011075 	.word	0x00011075

00011138 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   11138:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1113a:	2317      	movs	r3, #23
	if (length == 0) {
   1113c:	2a00      	cmp	r2, #0
   1113e:	d101      	bne.n	11144 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   11140:	0018      	movs	r0, r3
   11142:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   11144:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   11146:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   11148:	2c00      	cmp	r4, #0
   1114a:	d0f9      	beq.n	11140 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1114c:	4b01      	ldr	r3, [pc, #4]	; (11154 <usart_read_buffer_job+0x1c>)
   1114e:	4798      	blx	r3
   11150:	0003      	movs	r3, r0
   11152:	e7f5      	b.n	11140 <usart_read_buffer_job+0x8>
   11154:	000110b1 	.word	0x000110b1

00011158 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   11158:	2900      	cmp	r1, #0
   1115a:	d003      	beq.n	11164 <usart_get_job_status+0xc>
   1115c:	2901      	cmp	r1, #1
   1115e:	d005      	beq.n	1116c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   11160:	2017      	movs	r0, #23
   11162:	e002      	b.n	1116a <usart_get_job_status+0x12>
			status_code = module->rx_status;
   11164:	2332      	movs	r3, #50	; 0x32
   11166:	5cc0      	ldrb	r0, [r0, r3]
   11168:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1116a:	4770      	bx	lr
			status_code = module->tx_status;
   1116c:	2333      	movs	r3, #51	; 0x33
   1116e:	5cc0      	ldrb	r0, [r0, r3]
   11170:	b2c0      	uxtb	r0, r0
			break;
   11172:	e7fa      	b.n	1116a <usart_get_job_status+0x12>

00011174 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   11174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   11176:	0080      	lsls	r0, r0, #2
   11178:	4b62      	ldr	r3, [pc, #392]	; (11304 <_usart_interrupt_handler+0x190>)
   1117a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1117c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1117e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   11180:	2b00      	cmp	r3, #0
   11182:	d1fc      	bne.n	1117e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   11184:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   11186:	7da6      	ldrb	r6, [r4, #22]
   11188:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1118a:	2330      	movs	r3, #48	; 0x30
   1118c:	5ceb      	ldrb	r3, [r5, r3]
   1118e:	2231      	movs	r2, #49	; 0x31
   11190:	5caf      	ldrb	r7, [r5, r2]
   11192:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   11194:	07f3      	lsls	r3, r6, #31
   11196:	d522      	bpl.n	111de <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   11198:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1119a:	b29b      	uxth	r3, r3
   1119c:	2b00      	cmp	r3, #0
   1119e:	d01c      	beq.n	111da <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   111a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   111a2:	7813      	ldrb	r3, [r2, #0]
   111a4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   111a6:	1c51      	adds	r1, r2, #1
   111a8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   111aa:	7969      	ldrb	r1, [r5, #5]
   111ac:	2901      	cmp	r1, #1
   111ae:	d00e      	beq.n	111ce <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   111b0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   111b2:	05db      	lsls	r3, r3, #23
   111b4:	0ddb      	lsrs	r3, r3, #23
   111b6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   111b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   111ba:	3b01      	subs	r3, #1
   111bc:	b29b      	uxth	r3, r3
   111be:	85eb      	strh	r3, [r5, #46]	; 0x2e
   111c0:	2b00      	cmp	r3, #0
   111c2:	d10c      	bne.n	111de <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   111c4:	3301      	adds	r3, #1
   111c6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   111c8:	3301      	adds	r3, #1
   111ca:	75a3      	strb	r3, [r4, #22]
   111cc:	e007      	b.n	111de <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   111ce:	7851      	ldrb	r1, [r2, #1]
   111d0:	0209      	lsls	r1, r1, #8
   111d2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   111d4:	3202      	adds	r2, #2
   111d6:	62aa      	str	r2, [r5, #40]	; 0x28
   111d8:	e7eb      	b.n	111b2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   111da:	2301      	movs	r3, #1
   111dc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   111de:	07b3      	lsls	r3, r6, #30
   111e0:	d506      	bpl.n	111f0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   111e2:	2302      	movs	r3, #2
   111e4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   111e6:	2200      	movs	r2, #0
   111e8:	3331      	adds	r3, #49	; 0x31
   111ea:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   111ec:	07fb      	lsls	r3, r7, #31
   111ee:	d41a      	bmi.n	11226 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   111f0:	0773      	lsls	r3, r6, #29
   111f2:	d565      	bpl.n	112c0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   111f4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   111f6:	b29b      	uxth	r3, r3
   111f8:	2b00      	cmp	r3, #0
   111fa:	d05f      	beq.n	112bc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   111fc:	8b63      	ldrh	r3, [r4, #26]
   111fe:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   11200:	071a      	lsls	r2, r3, #28
   11202:	d414      	bmi.n	1122e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   11204:	223f      	movs	r2, #63	; 0x3f
   11206:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   11208:	2b00      	cmp	r3, #0
   1120a:	d034      	beq.n	11276 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1120c:	079a      	lsls	r2, r3, #30
   1120e:	d511      	bpl.n	11234 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   11210:	221a      	movs	r2, #26
   11212:	2332      	movs	r3, #50	; 0x32
   11214:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   11216:	3b30      	subs	r3, #48	; 0x30
   11218:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1121a:	077b      	lsls	r3, r7, #29
   1121c:	d550      	bpl.n	112c0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1121e:	0028      	movs	r0, r5
   11220:	696b      	ldr	r3, [r5, #20]
   11222:	4798      	blx	r3
   11224:	e04c      	b.n	112c0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   11226:	0028      	movs	r0, r5
   11228:	68eb      	ldr	r3, [r5, #12]
   1122a:	4798      	blx	r3
   1122c:	e7e0      	b.n	111f0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1122e:	2237      	movs	r2, #55	; 0x37
   11230:	4013      	ands	r3, r2
   11232:	e7e9      	b.n	11208 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   11234:	075a      	lsls	r2, r3, #29
   11236:	d505      	bpl.n	11244 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   11238:	221e      	movs	r2, #30
   1123a:	2332      	movs	r3, #50	; 0x32
   1123c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1123e:	3b2e      	subs	r3, #46	; 0x2e
   11240:	8363      	strh	r3, [r4, #26]
   11242:	e7ea      	b.n	1121a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   11244:	07da      	lsls	r2, r3, #31
   11246:	d505      	bpl.n	11254 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   11248:	2213      	movs	r2, #19
   1124a:	2332      	movs	r3, #50	; 0x32
   1124c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1124e:	3b31      	subs	r3, #49	; 0x31
   11250:	8363      	strh	r3, [r4, #26]
   11252:	e7e2      	b.n	1121a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   11254:	06da      	lsls	r2, r3, #27
   11256:	d505      	bpl.n	11264 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   11258:	2242      	movs	r2, #66	; 0x42
   1125a:	2332      	movs	r3, #50	; 0x32
   1125c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1125e:	3b22      	subs	r3, #34	; 0x22
   11260:	8363      	strh	r3, [r4, #26]
   11262:	e7da      	b.n	1121a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   11264:	2220      	movs	r2, #32
   11266:	421a      	tst	r2, r3
   11268:	d0d7      	beq.n	1121a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1126a:	3221      	adds	r2, #33	; 0x21
   1126c:	2332      	movs	r3, #50	; 0x32
   1126e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   11270:	3b12      	subs	r3, #18
   11272:	8363      	strh	r3, [r4, #26]
   11274:	e7d1      	b.n	1121a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   11276:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11278:	05db      	lsls	r3, r3, #23
   1127a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1127c:	b2da      	uxtb	r2, r3
   1127e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   11280:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   11282:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   11284:	1c51      	adds	r1, r2, #1
   11286:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   11288:	7969      	ldrb	r1, [r5, #5]
   1128a:	2901      	cmp	r1, #1
   1128c:	d010      	beq.n	112b0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1128e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   11290:	3b01      	subs	r3, #1
   11292:	b29b      	uxth	r3, r3
   11294:	85ab      	strh	r3, [r5, #44]	; 0x2c
   11296:	2b00      	cmp	r3, #0
   11298:	d112      	bne.n	112c0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1129a:	3304      	adds	r3, #4
   1129c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1129e:	2200      	movs	r2, #0
   112a0:	332e      	adds	r3, #46	; 0x2e
   112a2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   112a4:	07bb      	lsls	r3, r7, #30
   112a6:	d50b      	bpl.n	112c0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   112a8:	0028      	movs	r0, r5
   112aa:	692b      	ldr	r3, [r5, #16]
   112ac:	4798      	blx	r3
   112ae:	e007      	b.n	112c0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   112b0:	0a1b      	lsrs	r3, r3, #8
   112b2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   112b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   112b6:	3301      	adds	r3, #1
   112b8:	626b      	str	r3, [r5, #36]	; 0x24
   112ba:	e7e8      	b.n	1128e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   112bc:	2304      	movs	r3, #4
   112be:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   112c0:	06f3      	lsls	r3, r6, #27
   112c2:	d504      	bpl.n	112ce <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   112c4:	2310      	movs	r3, #16
   112c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   112c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   112ca:	06fb      	lsls	r3, r7, #27
   112cc:	d40e      	bmi.n	112ec <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   112ce:	06b3      	lsls	r3, r6, #26
   112d0:	d504      	bpl.n	112dc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   112d2:	2320      	movs	r3, #32
   112d4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   112d6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   112d8:	073b      	lsls	r3, r7, #28
   112da:	d40b      	bmi.n	112f4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   112dc:	0733      	lsls	r3, r6, #28
   112de:	d504      	bpl.n	112ea <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   112e0:	2308      	movs	r3, #8
   112e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   112e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   112e6:	06bb      	lsls	r3, r7, #26
   112e8:	d408      	bmi.n	112fc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   112ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   112ec:	0028      	movs	r0, r5
   112ee:	69eb      	ldr	r3, [r5, #28]
   112f0:	4798      	blx	r3
   112f2:	e7ec      	b.n	112ce <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   112f4:	0028      	movs	r0, r5
   112f6:	69ab      	ldr	r3, [r5, #24]
   112f8:	4798      	blx	r3
   112fa:	e7ef      	b.n	112dc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   112fc:	6a2b      	ldr	r3, [r5, #32]
   112fe:	0028      	movs	r0, r5
   11300:	4798      	blx	r3
}
   11302:	e7f2      	b.n	112ea <_usart_interrupt_handler+0x176>
   11304:	20001620 	.word	0x20001620

00011308 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   11308:	b510      	push	{r4, lr}
	switch (clock_source) {
   1130a:	2808      	cmp	r0, #8
   1130c:	d803      	bhi.n	11316 <system_clock_source_get_hz+0xe>
   1130e:	0080      	lsls	r0, r0, #2
   11310:	4b1c      	ldr	r3, [pc, #112]	; (11384 <system_clock_source_get_hz+0x7c>)
   11312:	581b      	ldr	r3, [r3, r0]
   11314:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   11316:	2000      	movs	r0, #0
   11318:	e032      	b.n	11380 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1131a:	4b1b      	ldr	r3, [pc, #108]	; (11388 <system_clock_source_get_hz+0x80>)
   1131c:	6918      	ldr	r0, [r3, #16]
   1131e:	e02f      	b.n	11380 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   11320:	4b1a      	ldr	r3, [pc, #104]	; (1138c <system_clock_source_get_hz+0x84>)
   11322:	6a1b      	ldr	r3, [r3, #32]
   11324:	059b      	lsls	r3, r3, #22
   11326:	0f9b      	lsrs	r3, r3, #30
   11328:	4819      	ldr	r0, [pc, #100]	; (11390 <system_clock_source_get_hz+0x88>)
   1132a:	40d8      	lsrs	r0, r3
   1132c:	e028      	b.n	11380 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1132e:	4b16      	ldr	r3, [pc, #88]	; (11388 <system_clock_source_get_hz+0x80>)
   11330:	6958      	ldr	r0, [r3, #20]
   11332:	e025      	b.n	11380 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   11334:	4b14      	ldr	r3, [pc, #80]	; (11388 <system_clock_source_get_hz+0x80>)
   11336:	681b      	ldr	r3, [r3, #0]
			return 0;
   11338:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1133a:	079b      	lsls	r3, r3, #30
   1133c:	d520      	bpl.n	11380 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1133e:	4913      	ldr	r1, [pc, #76]	; (1138c <system_clock_source_get_hz+0x84>)
   11340:	2210      	movs	r2, #16
   11342:	68cb      	ldr	r3, [r1, #12]
   11344:	421a      	tst	r2, r3
   11346:	d0fc      	beq.n	11342 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   11348:	4b0f      	ldr	r3, [pc, #60]	; (11388 <system_clock_source_get_hz+0x80>)
   1134a:	681a      	ldr	r2, [r3, #0]
   1134c:	2324      	movs	r3, #36	; 0x24
   1134e:	4013      	ands	r3, r2
   11350:	2b04      	cmp	r3, #4
   11352:	d001      	beq.n	11358 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   11354:	480f      	ldr	r0, [pc, #60]	; (11394 <system_clock_source_get_hz+0x8c>)
   11356:	e013      	b.n	11380 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   11358:	2000      	movs	r0, #0
   1135a:	4b0f      	ldr	r3, [pc, #60]	; (11398 <system_clock_source_get_hz+0x90>)
   1135c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1135e:	4b0a      	ldr	r3, [pc, #40]	; (11388 <system_clock_source_get_hz+0x80>)
   11360:	689b      	ldr	r3, [r3, #8]
   11362:	041b      	lsls	r3, r3, #16
   11364:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   11366:	4358      	muls	r0, r3
   11368:	e00a      	b.n	11380 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1136a:	2350      	movs	r3, #80	; 0x50
   1136c:	4a07      	ldr	r2, [pc, #28]	; (1138c <system_clock_source_get_hz+0x84>)
   1136e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   11370:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   11372:	075b      	lsls	r3, r3, #29
   11374:	d504      	bpl.n	11380 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   11376:	4b04      	ldr	r3, [pc, #16]	; (11388 <system_clock_source_get_hz+0x80>)
   11378:	68d8      	ldr	r0, [r3, #12]
   1137a:	e001      	b.n	11380 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1137c:	2080      	movs	r0, #128	; 0x80
   1137e:	0200      	lsls	r0, r0, #8
	}
}
   11380:	bd10      	pop	{r4, pc}
   11382:	46c0      	nop			; (mov r8, r8)
   11384:	0001a7b0 	.word	0x0001a7b0
   11388:	200004b0 	.word	0x200004b0
   1138c:	40000800 	.word	0x40000800
   11390:	007a1200 	.word	0x007a1200
   11394:	02dc6c00 	.word	0x02dc6c00
   11398:	0001196d 	.word	0x0001196d

0001139c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1139c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1139e:	490c      	ldr	r1, [pc, #48]	; (113d0 <system_clock_source_osc8m_set_config+0x34>)
   113a0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   113a2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   113a4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   113a6:	7840      	ldrb	r0, [r0, #1]
   113a8:	2201      	movs	r2, #1
   113aa:	4010      	ands	r0, r2
   113ac:	0180      	lsls	r0, r0, #6
   113ae:	2640      	movs	r6, #64	; 0x40
   113b0:	43b3      	bics	r3, r6
   113b2:	4303      	orrs	r3, r0
   113b4:	402a      	ands	r2, r5
   113b6:	01d2      	lsls	r2, r2, #7
   113b8:	2080      	movs	r0, #128	; 0x80
   113ba:	4383      	bics	r3, r0
   113bc:	4313      	orrs	r3, r2
   113be:	2203      	movs	r2, #3
   113c0:	4022      	ands	r2, r4
   113c2:	0212      	lsls	r2, r2, #8
   113c4:	4803      	ldr	r0, [pc, #12]	; (113d4 <system_clock_source_osc8m_set_config+0x38>)
   113c6:	4003      	ands	r3, r0
   113c8:	4313      	orrs	r3, r2
   113ca:	620b      	str	r3, [r1, #32]
}
   113cc:	bd70      	pop	{r4, r5, r6, pc}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	40000800 	.word	0x40000800
   113d4:	fffffcff 	.word	0xfffffcff

000113d8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   113d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   113da:	46de      	mov	lr, fp
   113dc:	4657      	mov	r7, sl
   113de:	464e      	mov	r6, r9
   113e0:	4645      	mov	r5, r8
   113e2:	b5e0      	push	{r5, r6, r7, lr}
   113e4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   113e6:	4b26      	ldr	r3, [pc, #152]	; (11480 <system_clock_source_xosc32k_set_config+0xa8>)
   113e8:	469b      	mov	fp, r3
   113ea:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   113ec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   113ee:	7800      	ldrb	r0, [r0, #0]
   113f0:	4242      	negs	r2, r0
   113f2:	4142      	adcs	r2, r0
   113f4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   113f6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   113f8:	78ca      	ldrb	r2, [r1, #3]
   113fa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   113fc:	790a      	ldrb	r2, [r1, #4]
   113fe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   11400:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   11402:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   11404:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   11406:	688a      	ldr	r2, [r1, #8]
   11408:	491e      	ldr	r1, [pc, #120]	; (11484 <system_clock_source_xosc32k_set_config+0xac>)
   1140a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   1140c:	2101      	movs	r1, #1
   1140e:	464a      	mov	r2, r9
   11410:	0092      	lsls	r2, r2, #2
   11412:	4691      	mov	r9, r2
   11414:	2204      	movs	r2, #4
   11416:	4393      	bics	r3, r2
   11418:	464a      	mov	r2, r9
   1141a:	4313      	orrs	r3, r2
   1141c:	4642      	mov	r2, r8
   1141e:	400a      	ands	r2, r1
   11420:	00d2      	lsls	r2, r2, #3
   11422:	4690      	mov	r8, r2
   11424:	2208      	movs	r2, #8
   11426:	4393      	bics	r3, r2
   11428:	4642      	mov	r2, r8
   1142a:	4313      	orrs	r3, r2
   1142c:	4662      	mov	r2, ip
   1142e:	400a      	ands	r2, r1
   11430:	0112      	lsls	r2, r2, #4
   11432:	4694      	mov	ip, r2
   11434:	2210      	movs	r2, #16
   11436:	4393      	bics	r3, r2
   11438:	4662      	mov	r2, ip
   1143a:	4313      	orrs	r3, r2
   1143c:	4008      	ands	r0, r1
   1143e:	0140      	lsls	r0, r0, #5
   11440:	2220      	movs	r2, #32
   11442:	4393      	bics	r3, r2
   11444:	4303      	orrs	r3, r0
   11446:	400f      	ands	r7, r1
   11448:	01bf      	lsls	r7, r7, #6
   1144a:	2040      	movs	r0, #64	; 0x40
   1144c:	4383      	bics	r3, r0
   1144e:	433b      	orrs	r3, r7
   11450:	400e      	ands	r6, r1
   11452:	01f6      	lsls	r6, r6, #7
   11454:	3040      	adds	r0, #64	; 0x40
   11456:	4383      	bics	r3, r0
   11458:	4333      	orrs	r3, r6
   1145a:	3879      	subs	r0, #121	; 0x79
   1145c:	4005      	ands	r5, r0
   1145e:	022d      	lsls	r5, r5, #8
   11460:	4809      	ldr	r0, [pc, #36]	; (11488 <system_clock_source_xosc32k_set_config+0xb0>)
   11462:	4003      	ands	r3, r0
   11464:	432b      	orrs	r3, r5
   11466:	4021      	ands	r1, r4
   11468:	0309      	lsls	r1, r1, #12
   1146a:	4808      	ldr	r0, [pc, #32]	; (1148c <system_clock_source_xosc32k_set_config+0xb4>)
   1146c:	4003      	ands	r3, r0
   1146e:	430b      	orrs	r3, r1
   11470:	465a      	mov	r2, fp
   11472:	8293      	strh	r3, [r2, #20]
}
   11474:	bc3c      	pop	{r2, r3, r4, r5}
   11476:	4690      	mov	r8, r2
   11478:	4699      	mov	r9, r3
   1147a:	46a2      	mov	sl, r4
   1147c:	46ab      	mov	fp, r5
   1147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11480:	40000800 	.word	0x40000800
   11484:	200004b0 	.word	0x200004b0
   11488:	fffff8ff 	.word	0xfffff8ff
   1148c:	ffffefff 	.word	0xffffefff

00011490 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   11490:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   11492:	7a03      	ldrb	r3, [r0, #8]
   11494:	069b      	lsls	r3, r3, #26
   11496:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   11498:	8942      	ldrh	r2, [r0, #10]
   1149a:	0592      	lsls	r2, r2, #22
   1149c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1149e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   114a0:	4918      	ldr	r1, [pc, #96]	; (11504 <system_clock_source_dfll_set_config+0x74>)
   114a2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   114a4:	7983      	ldrb	r3, [r0, #6]
   114a6:	79c2      	ldrb	r2, [r0, #7]
   114a8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   114aa:	8842      	ldrh	r2, [r0, #2]
   114ac:	8884      	ldrh	r4, [r0, #4]
   114ae:	4322      	orrs	r2, r4
   114b0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   114b2:	7842      	ldrb	r2, [r0, #1]
   114b4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   114b6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   114b8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   114ba:	7803      	ldrb	r3, [r0, #0]
   114bc:	2b04      	cmp	r3, #4
   114be:	d011      	beq.n	114e4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   114c0:	2b20      	cmp	r3, #32
   114c2:	d10e      	bne.n	114e2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   114c4:	7b03      	ldrb	r3, [r0, #12]
   114c6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   114c8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   114ca:	4313      	orrs	r3, r2
   114cc:	89c2      	ldrh	r2, [r0, #14]
   114ce:	0412      	lsls	r2, r2, #16
   114d0:	490d      	ldr	r1, [pc, #52]	; (11508 <system_clock_source_dfll_set_config+0x78>)
   114d2:	400a      	ands	r2, r1
   114d4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   114d6:	4a0b      	ldr	r2, [pc, #44]	; (11504 <system_clock_source_dfll_set_config+0x74>)
   114d8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   114da:	6811      	ldr	r1, [r2, #0]
   114dc:	4b0b      	ldr	r3, [pc, #44]	; (1150c <system_clock_source_dfll_set_config+0x7c>)
   114de:	430b      	orrs	r3, r1
   114e0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   114e2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   114e4:	7b03      	ldrb	r3, [r0, #12]
   114e6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   114e8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   114ea:	4313      	orrs	r3, r2
   114ec:	89c2      	ldrh	r2, [r0, #14]
   114ee:	0412      	lsls	r2, r2, #16
   114f0:	4905      	ldr	r1, [pc, #20]	; (11508 <system_clock_source_dfll_set_config+0x78>)
   114f2:	400a      	ands	r2, r1
   114f4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   114f6:	4a03      	ldr	r2, [pc, #12]	; (11504 <system_clock_source_dfll_set_config+0x74>)
   114f8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   114fa:	6813      	ldr	r3, [r2, #0]
   114fc:	2104      	movs	r1, #4
   114fe:	430b      	orrs	r3, r1
   11500:	6013      	str	r3, [r2, #0]
   11502:	e7ee      	b.n	114e2 <system_clock_source_dfll_set_config+0x52>
   11504:	200004b0 	.word	0x200004b0
   11508:	03ff0000 	.word	0x03ff0000
   1150c:	00000424 	.word	0x00000424

00011510 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   11510:	2808      	cmp	r0, #8
   11512:	d803      	bhi.n	1151c <system_clock_source_enable+0xc>
   11514:	0080      	lsls	r0, r0, #2
   11516:	4b25      	ldr	r3, [pc, #148]	; (115ac <system_clock_source_enable+0x9c>)
   11518:	581b      	ldr	r3, [r3, r0]
   1151a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1151c:	2017      	movs	r0, #23
   1151e:	e044      	b.n	115aa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   11520:	4a23      	ldr	r2, [pc, #140]	; (115b0 <system_clock_source_enable+0xa0>)
   11522:	6a13      	ldr	r3, [r2, #32]
   11524:	2102      	movs	r1, #2
   11526:	430b      	orrs	r3, r1
   11528:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1152a:	2000      	movs	r0, #0
   1152c:	e03d      	b.n	115aa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1152e:	4a20      	ldr	r2, [pc, #128]	; (115b0 <system_clock_source_enable+0xa0>)
   11530:	6993      	ldr	r3, [r2, #24]
   11532:	2102      	movs	r1, #2
   11534:	430b      	orrs	r3, r1
   11536:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   11538:	2000      	movs	r0, #0
		break;
   1153a:	e036      	b.n	115aa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1153c:	4a1c      	ldr	r2, [pc, #112]	; (115b0 <system_clock_source_enable+0xa0>)
   1153e:	8a13      	ldrh	r3, [r2, #16]
   11540:	2102      	movs	r1, #2
   11542:	430b      	orrs	r3, r1
   11544:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   11546:	2000      	movs	r0, #0
		break;
   11548:	e02f      	b.n	115aa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1154a:	4a19      	ldr	r2, [pc, #100]	; (115b0 <system_clock_source_enable+0xa0>)
   1154c:	8a93      	ldrh	r3, [r2, #20]
   1154e:	2102      	movs	r1, #2
   11550:	430b      	orrs	r3, r1
   11552:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   11554:	2000      	movs	r0, #0
		break;
   11556:	e028      	b.n	115aa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   11558:	4916      	ldr	r1, [pc, #88]	; (115b4 <system_clock_source_enable+0xa4>)
   1155a:	680b      	ldr	r3, [r1, #0]
   1155c:	2202      	movs	r2, #2
   1155e:	4313      	orrs	r3, r2
   11560:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   11562:	4b13      	ldr	r3, [pc, #76]	; (115b0 <system_clock_source_enable+0xa0>)
   11564:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11566:	0019      	movs	r1, r3
   11568:	320e      	adds	r2, #14
   1156a:	68cb      	ldr	r3, [r1, #12]
   1156c:	421a      	tst	r2, r3
   1156e:	d0fc      	beq.n	1156a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   11570:	4a10      	ldr	r2, [pc, #64]	; (115b4 <system_clock_source_enable+0xa4>)
   11572:	6891      	ldr	r1, [r2, #8]
   11574:	4b0e      	ldr	r3, [pc, #56]	; (115b0 <system_clock_source_enable+0xa0>)
   11576:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   11578:	6852      	ldr	r2, [r2, #4]
   1157a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1157c:	2200      	movs	r2, #0
   1157e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11580:	0019      	movs	r1, r3
   11582:	3210      	adds	r2, #16
   11584:	68cb      	ldr	r3, [r1, #12]
   11586:	421a      	tst	r2, r3
   11588:	d0fc      	beq.n	11584 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1158a:	4b0a      	ldr	r3, [pc, #40]	; (115b4 <system_clock_source_enable+0xa4>)
   1158c:	681b      	ldr	r3, [r3, #0]
   1158e:	b29b      	uxth	r3, r3
   11590:	4a07      	ldr	r2, [pc, #28]	; (115b0 <system_clock_source_enable+0xa0>)
   11592:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   11594:	2000      	movs	r0, #0
   11596:	e008      	b.n	115aa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   11598:	4905      	ldr	r1, [pc, #20]	; (115b0 <system_clock_source_enable+0xa0>)
   1159a:	2244      	movs	r2, #68	; 0x44
   1159c:	5c8b      	ldrb	r3, [r1, r2]
   1159e:	2002      	movs	r0, #2
   115a0:	4303      	orrs	r3, r0
   115a2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   115a4:	2000      	movs	r0, #0
		break;
   115a6:	e000      	b.n	115aa <system_clock_source_enable+0x9a>
		return STATUS_OK;
   115a8:	2000      	movs	r0, #0
}
   115aa:	4770      	bx	lr
   115ac:	0001a7d4 	.word	0x0001a7d4
   115b0:	40000800 	.word	0x40000800
   115b4:	200004b0 	.word	0x200004b0

000115b8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   115b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115ba:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   115bc:	22c2      	movs	r2, #194	; 0xc2
   115be:	00d2      	lsls	r2, r2, #3
   115c0:	4b47      	ldr	r3, [pc, #284]	; (116e0 <system_clock_init+0x128>)
   115c2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   115c4:	4a47      	ldr	r2, [pc, #284]	; (116e4 <system_clock_init+0x12c>)
   115c6:	6853      	ldr	r3, [r2, #4]
   115c8:	211e      	movs	r1, #30
   115ca:	438b      	bics	r3, r1
   115cc:	391a      	subs	r1, #26
   115ce:	430b      	orrs	r3, r1
   115d0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   115d2:	2202      	movs	r2, #2
   115d4:	ab01      	add	r3, sp, #4
   115d6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   115d8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   115da:	4d43      	ldr	r5, [pc, #268]	; (116e8 <system_clock_init+0x130>)
   115dc:	b2e0      	uxtb	r0, r4
   115de:	a901      	add	r1, sp, #4
   115e0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   115e2:	3401      	adds	r4, #1
   115e4:	2c25      	cmp	r4, #37	; 0x25
   115e6:	d1f9      	bne.n	115dc <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   115e8:	a80a      	add	r0, sp, #40	; 0x28
   115ea:	2300      	movs	r3, #0
   115ec:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   115ee:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   115f0:	2280      	movs	r2, #128	; 0x80
   115f2:	0212      	lsls	r2, r2, #8
   115f4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   115f6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   115f8:	2201      	movs	r2, #1
   115fa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   115fc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   115fe:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   11600:	3202      	adds	r2, #2
   11602:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   11604:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   11606:	4b39      	ldr	r3, [pc, #228]	; (116ec <system_clock_init+0x134>)
   11608:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1160a:	2005      	movs	r0, #5
   1160c:	4b38      	ldr	r3, [pc, #224]	; (116f0 <system_clock_init+0x138>)
   1160e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   11610:	4933      	ldr	r1, [pc, #204]	; (116e0 <system_clock_init+0x128>)
   11612:	2202      	movs	r2, #2
   11614:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   11616:	421a      	tst	r2, r3
   11618:	d0fc      	beq.n	11614 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   1161a:	4a31      	ldr	r2, [pc, #196]	; (116e0 <system_clock_init+0x128>)
   1161c:	8a93      	ldrh	r3, [r2, #20]
   1161e:	2180      	movs	r1, #128	; 0x80
   11620:	430b      	orrs	r3, r1
   11622:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   11624:	ab05      	add	r3, sp, #20
   11626:	2100      	movs	r1, #0
   11628:	2200      	movs	r2, #0
   1162a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1162c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   1162e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   11630:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   11632:	313f      	adds	r1, #63	; 0x3f
   11634:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   11636:	393b      	subs	r1, #59	; 0x3b
   11638:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   1163a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   1163c:	4b2d      	ldr	r3, [pc, #180]	; (116f4 <system_clock_init+0x13c>)
   1163e:	681b      	ldr	r3, [r3, #0]
   11640:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   11642:	2b3f      	cmp	r3, #63	; 0x3f
   11644:	d04a      	beq.n	116dc <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   11646:	a805      	add	r0, sp, #20
   11648:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   1164a:	4b2b      	ldr	r3, [pc, #172]	; (116f8 <system_clock_init+0x140>)
   1164c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1164e:	2307      	movs	r3, #7
   11650:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   11652:	3338      	adds	r3, #56	; 0x38
   11654:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   11656:	4b29      	ldr	r3, [pc, #164]	; (116fc <system_clock_init+0x144>)
   11658:	4798      	blx	r3
	config->run_in_standby  = false;
   1165a:	a804      	add	r0, sp, #16
   1165c:	2500      	movs	r5, #0
   1165e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   11660:	2601      	movs	r6, #1
   11662:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   11664:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   11666:	4b26      	ldr	r3, [pc, #152]	; (11700 <system_clock_init+0x148>)
   11668:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1166a:	2006      	movs	r0, #6
   1166c:	4f20      	ldr	r7, [pc, #128]	; (116f0 <system_clock_init+0x138>)
   1166e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11670:	4b24      	ldr	r3, [pc, #144]	; (11704 <system_clock_init+0x14c>)
   11672:	4798      	blx	r3
	config->division_factor    = 1;
   11674:	ac01      	add	r4, sp, #4
   11676:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   11678:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1167a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1167c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1167e:	2305      	movs	r3, #5
   11680:	7023      	strb	r3, [r4, #0]
   11682:	0021      	movs	r1, r4
   11684:	2001      	movs	r0, #1
   11686:	4b20      	ldr	r3, [pc, #128]	; (11708 <system_clock_init+0x150>)
   11688:	4798      	blx	r3
   1168a:	2001      	movs	r0, #1
   1168c:	4b1f      	ldr	r3, [pc, #124]	; (1170c <system_clock_init+0x154>)
   1168e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   11690:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   11692:	0021      	movs	r1, r4
   11694:	2000      	movs	r0, #0
   11696:	4b14      	ldr	r3, [pc, #80]	; (116e8 <system_clock_init+0x130>)
   11698:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   1169a:	2000      	movs	r0, #0
   1169c:	4b1c      	ldr	r3, [pc, #112]	; (11710 <system_clock_init+0x158>)
   1169e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   116a0:	2007      	movs	r0, #7
   116a2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   116a4:	490e      	ldr	r1, [pc, #56]	; (116e0 <system_clock_init+0x128>)
   116a6:	22d0      	movs	r2, #208	; 0xd0
   116a8:	68cb      	ldr	r3, [r1, #12]
   116aa:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   116ac:	2bd0      	cmp	r3, #208	; 0xd0
   116ae:	d1fb      	bne.n	116a8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   116b0:	4a18      	ldr	r2, [pc, #96]	; (11714 <system_clock_init+0x15c>)
   116b2:	2300      	movs	r3, #0
   116b4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   116b6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   116b8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   116ba:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   116bc:	a901      	add	r1, sp, #4
   116be:	2201      	movs	r2, #1
   116c0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   116c2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   116c4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   116c6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   116c8:	3307      	adds	r3, #7
   116ca:	700b      	strb	r3, [r1, #0]
   116cc:	2000      	movs	r0, #0
   116ce:	4b0e      	ldr	r3, [pc, #56]	; (11708 <system_clock_init+0x150>)
   116d0:	4798      	blx	r3
   116d2:	2000      	movs	r0, #0
   116d4:	4b0d      	ldr	r3, [pc, #52]	; (1170c <system_clock_init+0x154>)
   116d6:	4798      	blx	r3
#endif
}
   116d8:	b00f      	add	sp, #60	; 0x3c
   116da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   116dc:	3b20      	subs	r3, #32
   116de:	e7b2      	b.n	11646 <system_clock_init+0x8e>
   116e0:	40000800 	.word	0x40000800
   116e4:	41004000 	.word	0x41004000
   116e8:	00011951 	.word	0x00011951
   116ec:	000113d9 	.word	0x000113d9
   116f0:	00011511 	.word	0x00011511
   116f4:	00806024 	.word	0x00806024
   116f8:	000005b9 	.word	0x000005b9
   116fc:	00011491 	.word	0x00011491
   11700:	0001139d 	.word	0x0001139d
   11704:	00011719 	.word	0x00011719
   11708:	0001173d 	.word	0x0001173d
   1170c:	000117f5 	.word	0x000117f5
   11710:	000118c5 	.word	0x000118c5
   11714:	40000400 	.word	0x40000400

00011718 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   11718:	4a06      	ldr	r2, [pc, #24]	; (11734 <system_gclk_init+0x1c>)
   1171a:	6993      	ldr	r3, [r2, #24]
   1171c:	2108      	movs	r1, #8
   1171e:	430b      	orrs	r3, r1
   11720:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   11722:	2201      	movs	r2, #1
   11724:	4b04      	ldr	r3, [pc, #16]	; (11738 <system_gclk_init+0x20>)
   11726:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   11728:	0019      	movs	r1, r3
   1172a:	780b      	ldrb	r3, [r1, #0]
   1172c:	4213      	tst	r3, r2
   1172e:	d1fc      	bne.n	1172a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   11730:	4770      	bx	lr
   11732:	46c0      	nop			; (mov r8, r8)
   11734:	40000400 	.word	0x40000400
   11738:	40000c00 	.word	0x40000c00

0001173c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1173c:	b570      	push	{r4, r5, r6, lr}
   1173e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   11740:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   11742:	780d      	ldrb	r5, [r1, #0]
   11744:	022d      	lsls	r5, r5, #8
   11746:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   11748:	784b      	ldrb	r3, [r1, #1]
   1174a:	2b00      	cmp	r3, #0
   1174c:	d002      	beq.n	11754 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1174e:	2380      	movs	r3, #128	; 0x80
   11750:	02db      	lsls	r3, r3, #11
   11752:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   11754:	7a4b      	ldrb	r3, [r1, #9]
   11756:	2b00      	cmp	r3, #0
   11758:	d002      	beq.n	11760 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1175a:	2380      	movs	r3, #128	; 0x80
   1175c:	031b      	lsls	r3, r3, #12
   1175e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   11760:	6848      	ldr	r0, [r1, #4]
   11762:	2801      	cmp	r0, #1
   11764:	d910      	bls.n	11788 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   11766:	1e43      	subs	r3, r0, #1
   11768:	4218      	tst	r0, r3
   1176a:	d134      	bne.n	117d6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1176c:	2802      	cmp	r0, #2
   1176e:	d930      	bls.n	117d2 <system_gclk_gen_set_config+0x96>
   11770:	2302      	movs	r3, #2
   11772:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   11774:	3201      	adds	r2, #1
						mask <<= 1) {
   11776:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   11778:	4298      	cmp	r0, r3
   1177a:	d8fb      	bhi.n	11774 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1177c:	0212      	lsls	r2, r2, #8
   1177e:	4332      	orrs	r2, r6
   11780:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   11782:	2380      	movs	r3, #128	; 0x80
   11784:	035b      	lsls	r3, r3, #13
   11786:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11788:	7a0b      	ldrb	r3, [r1, #8]
   1178a:	2b00      	cmp	r3, #0
   1178c:	d002      	beq.n	11794 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1178e:	2380      	movs	r3, #128	; 0x80
   11790:	039b      	lsls	r3, r3, #14
   11792:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11794:	4a13      	ldr	r2, [pc, #76]	; (117e4 <system_gclk_gen_set_config+0xa8>)
   11796:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   11798:	b25b      	sxtb	r3, r3
   1179a:	2b00      	cmp	r3, #0
   1179c:	dbfb      	blt.n	11796 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1179e:	4b12      	ldr	r3, [pc, #72]	; (117e8 <system_gclk_gen_set_config+0xac>)
   117a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   117a2:	4b12      	ldr	r3, [pc, #72]	; (117ec <system_gclk_gen_set_config+0xb0>)
   117a4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   117a6:	4a0f      	ldr	r2, [pc, #60]	; (117e4 <system_gclk_gen_set_config+0xa8>)
   117a8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   117aa:	b25b      	sxtb	r3, r3
   117ac:	2b00      	cmp	r3, #0
   117ae:	dbfb      	blt.n	117a8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   117b0:	4b0c      	ldr	r3, [pc, #48]	; (117e4 <system_gclk_gen_set_config+0xa8>)
   117b2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   117b4:	001a      	movs	r2, r3
   117b6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   117b8:	b25b      	sxtb	r3, r3
   117ba:	2b00      	cmp	r3, #0
   117bc:	dbfb      	blt.n	117b6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   117be:	4a09      	ldr	r2, [pc, #36]	; (117e4 <system_gclk_gen_set_config+0xa8>)
   117c0:	6853      	ldr	r3, [r2, #4]
   117c2:	2180      	movs	r1, #128	; 0x80
   117c4:	0249      	lsls	r1, r1, #9
   117c6:	400b      	ands	r3, r1
   117c8:	431d      	orrs	r5, r3
   117ca:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   117cc:	4b08      	ldr	r3, [pc, #32]	; (117f0 <system_gclk_gen_set_config+0xb4>)
   117ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   117d0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   117d2:	2200      	movs	r2, #0
   117d4:	e7d2      	b.n	1177c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   117d6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   117d8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   117da:	2380      	movs	r3, #128	; 0x80
   117dc:	029b      	lsls	r3, r3, #10
   117de:	431d      	orrs	r5, r3
   117e0:	e7d2      	b.n	11788 <system_gclk_gen_set_config+0x4c>
   117e2:	46c0      	nop			; (mov r8, r8)
   117e4:	40000c00 	.word	0x40000c00
   117e8:	0000fc85 	.word	0x0000fc85
   117ec:	40000c08 	.word	0x40000c08
   117f0:	0000fcc5 	.word	0x0000fcc5

000117f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   117f4:	b510      	push	{r4, lr}
   117f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   117f8:	4a0b      	ldr	r2, [pc, #44]	; (11828 <system_gclk_gen_enable+0x34>)
   117fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   117fc:	b25b      	sxtb	r3, r3
   117fe:	2b00      	cmp	r3, #0
   11800:	dbfb      	blt.n	117fa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   11802:	4b0a      	ldr	r3, [pc, #40]	; (1182c <system_gclk_gen_enable+0x38>)
   11804:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11806:	4b0a      	ldr	r3, [pc, #40]	; (11830 <system_gclk_gen_enable+0x3c>)
   11808:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1180a:	4a07      	ldr	r2, [pc, #28]	; (11828 <system_gclk_gen_enable+0x34>)
   1180c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1180e:	b25b      	sxtb	r3, r3
   11810:	2b00      	cmp	r3, #0
   11812:	dbfb      	blt.n	1180c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   11814:	4a04      	ldr	r2, [pc, #16]	; (11828 <system_gclk_gen_enable+0x34>)
   11816:	6851      	ldr	r1, [r2, #4]
   11818:	2380      	movs	r3, #128	; 0x80
   1181a:	025b      	lsls	r3, r3, #9
   1181c:	430b      	orrs	r3, r1
   1181e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   11820:	4b04      	ldr	r3, [pc, #16]	; (11834 <system_gclk_gen_enable+0x40>)
   11822:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11824:	bd10      	pop	{r4, pc}
   11826:	46c0      	nop			; (mov r8, r8)
   11828:	40000c00 	.word	0x40000c00
   1182c:	0000fc85 	.word	0x0000fc85
   11830:	40000c04 	.word	0x40000c04
   11834:	0000fcc5 	.word	0x0000fcc5

00011838 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   11838:	b570      	push	{r4, r5, r6, lr}
   1183a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1183c:	4a1a      	ldr	r2, [pc, #104]	; (118a8 <system_gclk_gen_get_hz+0x70>)
   1183e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11840:	b25b      	sxtb	r3, r3
   11842:	2b00      	cmp	r3, #0
   11844:	dbfb      	blt.n	1183e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   11846:	4b19      	ldr	r3, [pc, #100]	; (118ac <system_gclk_gen_get_hz+0x74>)
   11848:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1184a:	4b19      	ldr	r3, [pc, #100]	; (118b0 <system_gclk_gen_get_hz+0x78>)
   1184c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1184e:	4a16      	ldr	r2, [pc, #88]	; (118a8 <system_gclk_gen_get_hz+0x70>)
   11850:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11852:	b25b      	sxtb	r3, r3
   11854:	2b00      	cmp	r3, #0
   11856:	dbfb      	blt.n	11850 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   11858:	4e13      	ldr	r6, [pc, #76]	; (118a8 <system_gclk_gen_get_hz+0x70>)
   1185a:	6870      	ldr	r0, [r6, #4]
   1185c:	04c0      	lsls	r0, r0, #19
   1185e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   11860:	4b14      	ldr	r3, [pc, #80]	; (118b4 <system_gclk_gen_get_hz+0x7c>)
   11862:	4798      	blx	r3
   11864:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11866:	4b12      	ldr	r3, [pc, #72]	; (118b0 <system_gclk_gen_get_hz+0x78>)
   11868:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1186a:	6876      	ldr	r6, [r6, #4]
   1186c:	02f6      	lsls	r6, r6, #11
   1186e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11870:	4b11      	ldr	r3, [pc, #68]	; (118b8 <system_gclk_gen_get_hz+0x80>)
   11872:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11874:	4a0c      	ldr	r2, [pc, #48]	; (118a8 <system_gclk_gen_get_hz+0x70>)
   11876:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11878:	b25b      	sxtb	r3, r3
   1187a:	2b00      	cmp	r3, #0
   1187c:	dbfb      	blt.n	11876 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1187e:	4b0a      	ldr	r3, [pc, #40]	; (118a8 <system_gclk_gen_get_hz+0x70>)
   11880:	689c      	ldr	r4, [r3, #8]
   11882:	0224      	lsls	r4, r4, #8
   11884:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   11886:	4b0d      	ldr	r3, [pc, #52]	; (118bc <system_gclk_gen_get_hz+0x84>)
   11888:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1188a:	2e00      	cmp	r6, #0
   1188c:	d107      	bne.n	1189e <system_gclk_gen_get_hz+0x66>
   1188e:	2c01      	cmp	r4, #1
   11890:	d907      	bls.n	118a2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   11892:	0021      	movs	r1, r4
   11894:	0028      	movs	r0, r5
   11896:	4b0a      	ldr	r3, [pc, #40]	; (118c0 <system_gclk_gen_get_hz+0x88>)
   11898:	4798      	blx	r3
   1189a:	0005      	movs	r5, r0
   1189c:	e001      	b.n	118a2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1189e:	3401      	adds	r4, #1
   118a0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   118a2:	0028      	movs	r0, r5
   118a4:	bd70      	pop	{r4, r5, r6, pc}
   118a6:	46c0      	nop			; (mov r8, r8)
   118a8:	40000c00 	.word	0x40000c00
   118ac:	0000fc85 	.word	0x0000fc85
   118b0:	40000c04 	.word	0x40000c04
   118b4:	00011309 	.word	0x00011309
   118b8:	40000c08 	.word	0x40000c08
   118bc:	0000fcc5 	.word	0x0000fcc5
   118c0:	000175d5 	.word	0x000175d5

000118c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   118c4:	b510      	push	{r4, lr}
   118c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   118c8:	4b06      	ldr	r3, [pc, #24]	; (118e4 <system_gclk_chan_enable+0x20>)
   118ca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   118cc:	4b06      	ldr	r3, [pc, #24]	; (118e8 <system_gclk_chan_enable+0x24>)
   118ce:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   118d0:	4a06      	ldr	r2, [pc, #24]	; (118ec <system_gclk_chan_enable+0x28>)
   118d2:	8853      	ldrh	r3, [r2, #2]
   118d4:	2180      	movs	r1, #128	; 0x80
   118d6:	01c9      	lsls	r1, r1, #7
   118d8:	430b      	orrs	r3, r1
   118da:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   118dc:	4b04      	ldr	r3, [pc, #16]	; (118f0 <system_gclk_chan_enable+0x2c>)
   118de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   118e0:	bd10      	pop	{r4, pc}
   118e2:	46c0      	nop			; (mov r8, r8)
   118e4:	0000fc85 	.word	0x0000fc85
   118e8:	40000c02 	.word	0x40000c02
   118ec:	40000c00 	.word	0x40000c00
   118f0:	0000fcc5 	.word	0x0000fcc5

000118f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   118f4:	b510      	push	{r4, lr}
   118f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   118f8:	4b0f      	ldr	r3, [pc, #60]	; (11938 <system_gclk_chan_disable+0x44>)
   118fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   118fc:	4b0f      	ldr	r3, [pc, #60]	; (1193c <system_gclk_chan_disable+0x48>)
   118fe:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   11900:	4a0f      	ldr	r2, [pc, #60]	; (11940 <system_gclk_chan_disable+0x4c>)
   11902:	8853      	ldrh	r3, [r2, #2]
   11904:	051b      	lsls	r3, r3, #20
   11906:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   11908:	8853      	ldrh	r3, [r2, #2]
   1190a:	490e      	ldr	r1, [pc, #56]	; (11944 <system_gclk_chan_disable+0x50>)
   1190c:	400b      	ands	r3, r1
   1190e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   11910:	8853      	ldrh	r3, [r2, #2]
   11912:	490d      	ldr	r1, [pc, #52]	; (11948 <system_gclk_chan_disable+0x54>)
   11914:	400b      	ands	r3, r1
   11916:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   11918:	0011      	movs	r1, r2
   1191a:	2280      	movs	r2, #128	; 0x80
   1191c:	01d2      	lsls	r2, r2, #7
   1191e:	884b      	ldrh	r3, [r1, #2]
   11920:	4213      	tst	r3, r2
   11922:	d1fc      	bne.n	1191e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   11924:	4906      	ldr	r1, [pc, #24]	; (11940 <system_gclk_chan_disable+0x4c>)
   11926:	884a      	ldrh	r2, [r1, #2]
   11928:	0203      	lsls	r3, r0, #8
   1192a:	4806      	ldr	r0, [pc, #24]	; (11944 <system_gclk_chan_disable+0x50>)
   1192c:	4002      	ands	r2, r0
   1192e:	4313      	orrs	r3, r2
   11930:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   11932:	4b06      	ldr	r3, [pc, #24]	; (1194c <system_gclk_chan_disable+0x58>)
   11934:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11936:	bd10      	pop	{r4, pc}
   11938:	0000fc85 	.word	0x0000fc85
   1193c:	40000c02 	.word	0x40000c02
   11940:	40000c00 	.word	0x40000c00
   11944:	fffff0ff 	.word	0xfffff0ff
   11948:	ffffbfff 	.word	0xffffbfff
   1194c:	0000fcc5 	.word	0x0000fcc5

00011950 <system_gclk_chan_set_config>:
{
   11950:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   11952:	780c      	ldrb	r4, [r1, #0]
   11954:	0224      	lsls	r4, r4, #8
   11956:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   11958:	4b02      	ldr	r3, [pc, #8]	; (11964 <system_gclk_chan_set_config+0x14>)
   1195a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1195c:	b2a4      	uxth	r4, r4
   1195e:	4b02      	ldr	r3, [pc, #8]	; (11968 <system_gclk_chan_set_config+0x18>)
   11960:	805c      	strh	r4, [r3, #2]
}
   11962:	bd10      	pop	{r4, pc}
   11964:	000118f5 	.word	0x000118f5
   11968:	40000c00 	.word	0x40000c00

0001196c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1196c:	b510      	push	{r4, lr}
   1196e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <system_gclk_chan_get_hz+0x20>)
   11972:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11974:	4b06      	ldr	r3, [pc, #24]	; (11990 <system_gclk_chan_get_hz+0x24>)
   11976:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   11978:	4b06      	ldr	r3, [pc, #24]	; (11994 <system_gclk_chan_get_hz+0x28>)
   1197a:	885c      	ldrh	r4, [r3, #2]
   1197c:	0524      	lsls	r4, r4, #20
   1197e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   11980:	4b05      	ldr	r3, [pc, #20]	; (11998 <system_gclk_chan_get_hz+0x2c>)
   11982:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   11984:	0020      	movs	r0, r4
   11986:	4b05      	ldr	r3, [pc, #20]	; (1199c <system_gclk_chan_get_hz+0x30>)
   11988:	4798      	blx	r3
}
   1198a:	bd10      	pop	{r4, pc}
   1198c:	0000fc85 	.word	0x0000fc85
   11990:	40000c02 	.word	0x40000c02
   11994:	40000c00 	.word	0x40000c00
   11998:	0000fcc5 	.word	0x0000fcc5
   1199c:	00011839 	.word	0x00011839

000119a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   119a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   119a2:	78d3      	ldrb	r3, [r2, #3]
   119a4:	2b00      	cmp	r3, #0
   119a6:	d135      	bne.n	11a14 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   119a8:	7813      	ldrb	r3, [r2, #0]
   119aa:	2b80      	cmp	r3, #128	; 0x80
   119ac:	d029      	beq.n	11a02 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   119ae:	061b      	lsls	r3, r3, #24
   119b0:	2480      	movs	r4, #128	; 0x80
   119b2:	0264      	lsls	r4, r4, #9
   119b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   119b6:	7854      	ldrb	r4, [r2, #1]
   119b8:	2502      	movs	r5, #2
   119ba:	43ac      	bics	r4, r5
   119bc:	d106      	bne.n	119cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   119be:	7894      	ldrb	r4, [r2, #2]
   119c0:	2c00      	cmp	r4, #0
   119c2:	d120      	bne.n	11a06 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   119c4:	2480      	movs	r4, #128	; 0x80
   119c6:	02a4      	lsls	r4, r4, #10
   119c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   119ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   119cc:	7854      	ldrb	r4, [r2, #1]
   119ce:	3c01      	subs	r4, #1
   119d0:	2c01      	cmp	r4, #1
   119d2:	d91c      	bls.n	11a0e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   119d4:	040d      	lsls	r5, r1, #16
   119d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   119d8:	24a0      	movs	r4, #160	; 0xa0
   119da:	05e4      	lsls	r4, r4, #23
   119dc:	432c      	orrs	r4, r5
   119de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   119e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   119e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   119e4:	24d0      	movs	r4, #208	; 0xd0
   119e6:	0624      	lsls	r4, r4, #24
   119e8:	432c      	orrs	r4, r5
   119ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   119ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   119ee:	78d4      	ldrb	r4, [r2, #3]
   119f0:	2c00      	cmp	r4, #0
   119f2:	d122      	bne.n	11a3a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   119f4:	035b      	lsls	r3, r3, #13
   119f6:	d51c      	bpl.n	11a32 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   119f8:	7893      	ldrb	r3, [r2, #2]
   119fa:	2b01      	cmp	r3, #1
   119fc:	d01e      	beq.n	11a3c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   119fe:	6141      	str	r1, [r0, #20]
   11a00:	e017      	b.n	11a32 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   11a02:	2300      	movs	r3, #0
   11a04:	e7d7      	b.n	119b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   11a06:	24c0      	movs	r4, #192	; 0xc0
   11a08:	02e4      	lsls	r4, r4, #11
   11a0a:	4323      	orrs	r3, r4
   11a0c:	e7dd      	b.n	119ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   11a0e:	4c0d      	ldr	r4, [pc, #52]	; (11a44 <_system_pinmux_config+0xa4>)
   11a10:	4023      	ands	r3, r4
   11a12:	e7df      	b.n	119d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   11a14:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   11a16:	040c      	lsls	r4, r1, #16
   11a18:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   11a1a:	23a0      	movs	r3, #160	; 0xa0
   11a1c:	05db      	lsls	r3, r3, #23
   11a1e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11a20:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   11a22:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   11a24:	23d0      	movs	r3, #208	; 0xd0
   11a26:	061b      	lsls	r3, r3, #24
   11a28:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11a2a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   11a2c:	78d3      	ldrb	r3, [r2, #3]
   11a2e:	2b00      	cmp	r3, #0
   11a30:	d103      	bne.n	11a3a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11a32:	7853      	ldrb	r3, [r2, #1]
   11a34:	3b01      	subs	r3, #1
   11a36:	2b01      	cmp	r3, #1
   11a38:	d902      	bls.n	11a40 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   11a3a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   11a3c:	6181      	str	r1, [r0, #24]
   11a3e:	e7f8      	b.n	11a32 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   11a40:	6081      	str	r1, [r0, #8]
}
   11a42:	e7fa      	b.n	11a3a <_system_pinmux_config+0x9a>
   11a44:	fffbffff 	.word	0xfffbffff

00011a48 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   11a48:	b510      	push	{r4, lr}
   11a4a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   11a4c:	09c1      	lsrs	r1, r0, #7
		return NULL;
   11a4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   11a50:	2900      	cmp	r1, #0
   11a52:	d104      	bne.n	11a5e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   11a54:	0943      	lsrs	r3, r0, #5
   11a56:	01db      	lsls	r3, r3, #7
   11a58:	4905      	ldr	r1, [pc, #20]	; (11a70 <system_pinmux_pin_set_config+0x28>)
   11a5a:	468c      	mov	ip, r1
   11a5c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   11a5e:	241f      	movs	r4, #31
   11a60:	4020      	ands	r0, r4
   11a62:	2101      	movs	r1, #1
   11a64:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   11a66:	0018      	movs	r0, r3
   11a68:	4b02      	ldr	r3, [pc, #8]	; (11a74 <system_pinmux_pin_set_config+0x2c>)
   11a6a:	4798      	blx	r3
}
   11a6c:	bd10      	pop	{r4, pc}
   11a6e:	46c0      	nop			; (mov r8, r8)
   11a70:	41004400 	.word	0x41004400
   11a74:	000119a1 	.word	0x000119a1

00011a78 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   11a78:	4770      	bx	lr
	...

00011a7c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11a7c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11a7e:	4b05      	ldr	r3, [pc, #20]	; (11a94 <system_init+0x18>)
   11a80:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   11a82:	4b05      	ldr	r3, [pc, #20]	; (11a98 <system_init+0x1c>)
   11a84:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   11a86:	4b05      	ldr	r3, [pc, #20]	; (11a9c <system_init+0x20>)
   11a88:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11a8a:	4b05      	ldr	r3, [pc, #20]	; (11aa0 <system_init+0x24>)
   11a8c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11a8e:	4b05      	ldr	r3, [pc, #20]	; (11aa4 <system_init+0x28>)
   11a90:	4798      	blx	r3
}
   11a92:	bd10      	pop	{r4, pc}
   11a94:	000115b9 	.word	0x000115b9
   11a98:	0000fcf5 	.word	0x0000fcf5
   11a9c:	00011a79 	.word	0x00011a79
   11aa0:	0000fe05 	.word	0x0000fe05
   11aa4:	00011a79 	.word	0x00011a79

00011aa8 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   11aa8:	4b09      	ldr	r3, [pc, #36]	; (11ad0 <_tcc_get_inst_index+0x28>)
   11aaa:	4298      	cmp	r0, r3
   11aac:	d00c      	beq.n	11ac8 <_tcc_get_inst_index+0x20>
   11aae:	4b09      	ldr	r3, [pc, #36]	; (11ad4 <_tcc_get_inst_index+0x2c>)
   11ab0:	4298      	cmp	r0, r3
   11ab2:	d007      	beq.n	11ac4 <_tcc_get_inst_index+0x1c>
   11ab4:	4a08      	ldr	r2, [pc, #32]	; (11ad8 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   11ab6:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   11ab8:	4290      	cmp	r0, r2
   11aba:	d001      	beq.n	11ac0 <_tcc_get_inst_index+0x18>
}
   11abc:	0018      	movs	r0, r3
   11abe:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   11ac0:	3302      	adds	r3, #2
   11ac2:	e002      	b.n	11aca <_tcc_get_inst_index+0x22>
   11ac4:	2301      	movs	r3, #1
   11ac6:	e000      	b.n	11aca <_tcc_get_inst_index+0x22>
   11ac8:	2300      	movs	r3, #0
			return i;
   11aca:	b2db      	uxtb	r3, r3
   11acc:	e7f6      	b.n	11abc <_tcc_get_inst_index+0x14>
   11ace:	46c0      	nop			; (mov r8, r8)
   11ad0:	42002000 	.word	0x42002000
   11ad4:	42002400 	.word	0x42002400
   11ad8:	42002800 	.word	0x42002800

00011adc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   11adc:	b510      	push	{r4, lr}
   11ade:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11ae0:	0008      	movs	r0, r1
   11ae2:	4b4f      	ldr	r3, [pc, #316]	; (11c20 <tcc_get_config_defaults+0x144>)
   11ae4:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   11ae6:	2300      	movs	r3, #0
   11ae8:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   11aea:	0080      	lsls	r0, r0, #2
   11aec:	4a4d      	ldr	r2, [pc, #308]	; (11c24 <tcc_get_config_defaults+0x148>)
   11aee:	5882      	ldr	r2, [r0, r2]
   11af0:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   11af2:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   11af4:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   11af6:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   11af8:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   11afa:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11afc:	61e3      	str	r3, [r4, #28]
   11afe:	6223      	str	r3, [r4, #32]
   11b00:	6263      	str	r3, [r4, #36]	; 0x24
   11b02:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11b04:	7523      	strb	r3, [r4, #20]
   11b06:	7563      	strb	r3, [r4, #21]
   11b08:	75a3      	strb	r3, [r4, #22]
   11b0a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   11b0c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   11b0e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11b10:	7423      	strb	r3, [r4, #16]
   11b12:	7463      	strb	r3, [r4, #17]
   11b14:	74a3      	strb	r3, [r4, #18]
   11b16:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   11b18:	222c      	movs	r2, #44	; 0x2c
   11b1a:	54a3      	strb	r3, [r4, r2]
   11b1c:	3201      	adds	r2, #1
   11b1e:	54a3      	strb	r3, [r4, r2]
   11b20:	3201      	adds	r2, #1
   11b22:	54a3      	strb	r3, [r4, r2]
   11b24:	3201      	adds	r2, #1
   11b26:	54a3      	strb	r3, [r4, r2]
   11b28:	3201      	adds	r2, #1
   11b2a:	54a3      	strb	r3, [r4, r2]
   11b2c:	3201      	adds	r2, #1
   11b2e:	54a3      	strb	r3, [r4, r2]
   11b30:	3201      	adds	r2, #1
   11b32:	54a3      	strb	r3, [r4, r2]
   11b34:	3201      	adds	r2, #1
   11b36:	54a3      	strb	r3, [r4, r2]
   11b38:	3201      	adds	r2, #1
   11b3a:	54a3      	strb	r3, [r4, r2]
   11b3c:	3201      	adds	r2, #1
   11b3e:	54a3      	strb	r3, [r4, r2]
   11b40:	3201      	adds	r2, #1
   11b42:	54a3      	strb	r3, [r4, r2]
   11b44:	3201      	adds	r2, #1
   11b46:	54a3      	strb	r3, [r4, r2]
   11b48:	3201      	adds	r2, #1
   11b4a:	54a3      	strb	r3, [r4, r2]
   11b4c:	3201      	adds	r2, #1
   11b4e:	54a3      	strb	r3, [r4, r2]
   11b50:	3201      	adds	r2, #1
   11b52:	54a3      	strb	r3, [r4, r2]
   11b54:	3201      	adds	r2, #1
   11b56:	54a3      	strb	r3, [r4, r2]
   11b58:	3201      	adds	r2, #1
   11b5a:	54a3      	strb	r3, [r4, r2]
   11b5c:	3201      	adds	r2, #1
   11b5e:	54a3      	strb	r3, [r4, r2]
   11b60:	3201      	adds	r2, #1
   11b62:	54a3      	strb	r3, [r4, r2]
   11b64:	3201      	adds	r2, #1
   11b66:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   11b68:	3201      	adds	r2, #1
   11b6a:	54a3      	strb	r3, [r4, r2]
   11b6c:	3201      	adds	r2, #1
   11b6e:	54a3      	strb	r3, [r4, r2]
   11b70:	3201      	adds	r2, #1
   11b72:	54a3      	strb	r3, [r4, r2]
   11b74:	3201      	adds	r2, #1
   11b76:	54a3      	strb	r3, [r4, r2]
   11b78:	3201      	adds	r2, #1
   11b7a:	54a3      	strb	r3, [r4, r2]
   11b7c:	3201      	adds	r2, #1
   11b7e:	54a3      	strb	r3, [r4, r2]
   11b80:	3201      	adds	r2, #1
   11b82:	54a3      	strb	r3, [r4, r2]
   11b84:	3201      	adds	r2, #1
   11b86:	54a3      	strb	r3, [r4, r2]
   11b88:	3201      	adds	r2, #1
   11b8a:	54a3      	strb	r3, [r4, r2]
   11b8c:	3201      	adds	r2, #1
   11b8e:	54a3      	strb	r3, [r4, r2]
   11b90:	3201      	adds	r2, #1
   11b92:	54a3      	strb	r3, [r4, r2]
   11b94:	3201      	adds	r2, #1
   11b96:	54a3      	strb	r3, [r4, r2]
   11b98:	3201      	adds	r2, #1
   11b9a:	54a3      	strb	r3, [r4, r2]
   11b9c:	3201      	adds	r2, #1
   11b9e:	54a3      	strb	r3, [r4, r2]
   11ba0:	3201      	adds	r2, #1
   11ba2:	54a3      	strb	r3, [r4, r2]
   11ba4:	3201      	adds	r2, #1
   11ba6:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   11ba8:	3201      	adds	r2, #1
   11baa:	54a3      	strb	r3, [r4, r2]
   11bac:	3201      	adds	r2, #1
   11bae:	54a3      	strb	r3, [r4, r2]
   11bb0:	3201      	adds	r2, #1
   11bb2:	54a3      	strb	r3, [r4, r2]
   11bb4:	3201      	adds	r2, #1
   11bb6:	54a3      	strb	r3, [r4, r2]
   11bb8:	3201      	adds	r2, #1
   11bba:	54a3      	strb	r3, [r4, r2]
   11bbc:	3201      	adds	r2, #1
   11bbe:	54a3      	strb	r3, [r4, r2]
   11bc0:	3201      	adds	r2, #1
   11bc2:	54a3      	strb	r3, [r4, r2]
   11bc4:	3201      	adds	r2, #1
   11bc6:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   11bc8:	3241      	adds	r2, #65	; 0x41
   11bca:	54a3      	strb	r3, [r4, r2]
   11bcc:	65a3      	str	r3, [r4, #88]	; 0x58
   11bce:	67a3      	str	r3, [r4, #120]	; 0x78
   11bd0:	3201      	adds	r2, #1
   11bd2:	54a3      	strb	r3, [r4, r2]
   11bd4:	65e3      	str	r3, [r4, #92]	; 0x5c
   11bd6:	67e3      	str	r3, [r4, #124]	; 0x7c
   11bd8:	3201      	adds	r2, #1
   11bda:	54a3      	strb	r3, [r4, r2]
   11bdc:	6623      	str	r3, [r4, #96]	; 0x60
   11bde:	3a1a      	subs	r2, #26
   11be0:	50a3      	str	r3, [r4, r2]
   11be2:	321b      	adds	r2, #27
   11be4:	54a3      	strb	r3, [r4, r2]
   11be6:	6663      	str	r3, [r4, #100]	; 0x64
   11be8:	3a17      	subs	r2, #23
   11bea:	50a3      	str	r3, [r4, r2]
   11bec:	3218      	adds	r2, #24
   11bee:	54a3      	strb	r3, [r4, r2]
   11bf0:	66a3      	str	r3, [r4, #104]	; 0x68
   11bf2:	3a14      	subs	r2, #20
   11bf4:	50a3      	str	r3, [r4, r2]
   11bf6:	3215      	adds	r2, #21
   11bf8:	54a3      	strb	r3, [r4, r2]
   11bfa:	66e3      	str	r3, [r4, #108]	; 0x6c
   11bfc:	3a11      	subs	r2, #17
   11bfe:	50a3      	str	r3, [r4, r2]
   11c00:	3212      	adds	r2, #18
   11c02:	54a3      	strb	r3, [r4, r2]
   11c04:	6723      	str	r3, [r4, #112]	; 0x70
   11c06:	3a0e      	subs	r2, #14
   11c08:	50a3      	str	r3, [r4, r2]
   11c0a:	320f      	adds	r2, #15
   11c0c:	54a3      	strb	r3, [r4, r2]
   11c0e:	6763      	str	r3, [r4, #116]	; 0x74
   11c10:	3a0b      	subs	r2, #11
   11c12:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   11c14:	2101      	movs	r1, #1
   11c16:	320c      	adds	r2, #12
   11c18:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   11c1a:	3201      	adds	r2, #1
   11c1c:	54a3      	strb	r3, [r4, r2]
}
   11c1e:	bd10      	pop	{r4, pc}
   11c20:	00011aa9 	.word	0x00011aa9
   11c24:	0001a80c 	.word	0x0001a80c

00011c28 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   11c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c2a:	46de      	mov	lr, fp
   11c2c:	4657      	mov	r7, sl
   11c2e:	464e      	mov	r6, r9
   11c30:	4645      	mov	r5, r8
   11c32:	b5e0      	push	{r5, r6, r7, lr}
   11c34:	b091      	sub	sp, #68	; 0x44
   11c36:	9001      	str	r0, [sp, #4]
   11c38:	000c      	movs	r4, r1
   11c3a:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11c3c:	0008      	movs	r0, r1
   11c3e:	4bc3      	ldr	r3, [pc, #780]	; (11f4c <tcc_init+0x324>)
   11c40:	4798      	blx	r3
   11c42:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   11c44:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   11c46:	48c2      	ldr	r0, [pc, #776]	; (11f50 <tcc_init+0x328>)
   11c48:	6a02      	ldr	r2, [r0, #32]
   11c4a:	009e      	lsls	r6, r3, #2
   11c4c:	4fc1      	ldr	r7, [pc, #772]	; (11f54 <tcc_init+0x32c>)
   11c4e:	59f7      	ldr	r7, [r6, r7]
   11c50:	433a      	orrs	r2, r7
   11c52:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11c54:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   11c56:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11c58:	0792      	lsls	r2, r2, #30
   11c5a:	d506      	bpl.n	11c6a <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   11c5c:	b011      	add	sp, #68	; 0x44
   11c5e:	bc3c      	pop	{r2, r3, r4, r5}
   11c60:	4690      	mov	r8, r2
   11c62:	4699      	mov	r9, r3
   11c64:	46a2      	mov	sl, r4
   11c66:	46ab      	mov	fp, r5
   11c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   11c6a:	6822      	ldr	r2, [r4, #0]
   11c6c:	2701      	movs	r7, #1
   11c6e:	4017      	ands	r7, r2
   11c70:	d1f4      	bne.n	11c5c <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   11c72:	48b9      	ldr	r0, [pc, #740]	; (11f58 <tcc_init+0x330>)
   11c74:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   11c76:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   11c78:	682e      	ldr	r6, [r5, #0]
   11c7a:	42b2      	cmp	r2, r6
   11c7c:	d3ee      	bcc.n	11c5c <tcc_init+0x34>
		|| (config->counter.period > count_max)
   11c7e:	686e      	ldr	r6, [r5, #4]
   11c80:	42b2      	cmp	r2, r6
   11c82:	d3eb      	bcc.n	11c5c <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   11c84:	69e8      	ldr	r0, [r5, #28]
   11c86:	4282      	cmp	r2, r0
   11c88:	d200      	bcs.n	11c8c <tcc_init+0x64>
   11c8a:	e1b9      	b.n	12000 <tcc_init+0x3d8>
   11c8c:	6a28      	ldr	r0, [r5, #32]
   11c8e:	4282      	cmp	r2, r0
   11c90:	d200      	bcs.n	11c94 <tcc_init+0x6c>
   11c92:	e1b7      	b.n	12004 <tcc_init+0x3dc>
   11c94:	6a68      	ldr	r0, [r5, #36]	; 0x24
   11c96:	4282      	cmp	r2, r0
   11c98:	d200      	bcs.n	11c9c <tcc_init+0x74>
   11c9a:	e1b5      	b.n	12008 <tcc_init+0x3e0>
   11c9c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11c9e:	4282      	cmp	r2, r0
   11ca0:	d200      	bcs.n	11ca4 <tcc_init+0x7c>
   11ca2:	e1b3      	b.n	1200c <tcc_init+0x3e4>
   11ca4:	2298      	movs	r2, #152	; 0x98
   11ca6:	4694      	mov	ip, r2
   11ca8:	44ac      	add	ip, r5
   11caa:	4662      	mov	r2, ip
   11cac:	9208      	str	r2, [sp, #32]
   11cae:	2000      	movs	r0, #0
   11cb0:	e003      	b.n	11cba <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11cb2:	3001      	adds	r0, #1
   11cb4:	3201      	adds	r2, #1
   11cb6:	2808      	cmp	r0, #8
   11cb8:	d008      	beq.n	11ccc <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   11cba:	7816      	ldrb	r6, [r2, #0]
   11cbc:	2e00      	cmp	r6, #0
   11cbe:	d0f8      	beq.n	11cb2 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   11cc0:	4ea6      	ldr	r6, [pc, #664]	; (11f5c <tcc_init+0x334>)
   11cc2:	5c76      	ldrb	r6, [r6, r1]
   11cc4:	4286      	cmp	r6, r0
   11cc6:	dcf4      	bgt.n	11cb2 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   11cc8:	2017      	movs	r0, #23
   11cca:	e7c7      	b.n	11c5c <tcc_init+0x34>
   11ccc:	2200      	movs	r2, #0
   11cce:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11cd0:	2080      	movs	r0, #128	; 0x80
   11cd2:	0440      	lsls	r0, r0, #17
   11cd4:	4684      	mov	ip, r0
   11cd6:	e002      	b.n	11cde <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   11cd8:	3201      	adds	r2, #1
   11cda:	2a04      	cmp	r2, #4
   11cdc:	d00e      	beq.n	11cfc <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   11cde:	18a8      	adds	r0, r5, r2
   11ce0:	7c00      	ldrb	r0, [r0, #16]
   11ce2:	2801      	cmp	r0, #1
   11ce4:	d1f8      	bne.n	11cd8 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   11ce6:	489e      	ldr	r0, [pc, #632]	; (11f60 <tcc_init+0x338>)
   11ce8:	5c40      	ldrb	r0, [r0, r1]
   11cea:	4290      	cmp	r0, r2
   11cec:	da00      	bge.n	11cf0 <tcc_init+0xc8>
   11cee:	e18f      	b.n	12010 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11cf0:	4660      	mov	r0, ip
   11cf2:	4090      	lsls	r0, r2
   11cf4:	9e02      	ldr	r6, [sp, #8]
   11cf6:	4306      	orrs	r6, r0
   11cf8:	9602      	str	r6, [sp, #8]
   11cfa:	e7ed      	b.n	11cd8 <tcc_init+0xb0>
	if (config->run_in_standby) {
   11cfc:	329d      	adds	r2, #157	; 0x9d
   11cfe:	5caa      	ldrb	r2, [r5, r2]
   11d00:	2a00      	cmp	r2, #0
   11d02:	d004      	beq.n	11d0e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   11d04:	2280      	movs	r2, #128	; 0x80
   11d06:	0112      	lsls	r2, r2, #4
   11d08:	9902      	ldr	r1, [sp, #8]
   11d0a:	4311      	orrs	r1, r2
   11d0c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   11d0e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   11d10:	1e51      	subs	r1, r2, #1
   11d12:	418a      	sbcs	r2, r1
   11d14:	0092      	lsls	r2, r2, #2
   11d16:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   11d18:	7a6a      	ldrb	r2, [r5, #9]
   11d1a:	2a01      	cmp	r2, #1
   11d1c:	d022      	beq.n	11d64 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   11d1e:	4a90      	ldr	r2, [pc, #576]	; (11f60 <tcc_init+0x338>)
   11d20:	5cd2      	ldrb	r2, [r2, r3]
   11d22:	0011      	movs	r1, r2
   11d24:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   11d26:	2235      	movs	r2, #53	; 0x35
   11d28:	5caa      	ldrb	r2, [r5, r2]
   11d2a:	428a      	cmp	r2, r1
   11d2c:	d300      	bcc.n	11d30 <tcc_init+0x108>
   11d2e:	e179      	b.n	12024 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11d30:	212c      	movs	r1, #44	; 0x2c
   11d32:	5c69      	ldrb	r1, [r5, r1]
   11d34:	290f      	cmp	r1, #15
   11d36:	d900      	bls.n	11d3a <tcc_init+0x112>
   11d38:	e174      	b.n	12024 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11d3a:	7b28      	ldrb	r0, [r5, #12]
   11d3c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11d3e:	7ae8      	ldrb	r0, [r5, #11]
   11d40:	900b      	str	r0, [sp, #44]	; 0x2c
   11d42:	202d      	movs	r0, #45	; 0x2d
   11d44:	4682      	mov	sl, r0
   11d46:	44aa      	add	sl, r5
   11d48:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11d4a:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   11d4c:	ae0e      	add	r6, sp, #56	; 0x38
   11d4e:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11d50:	26c0      	movs	r6, #192	; 0xc0
   11d52:	0136      	lsls	r6, r6, #4
   11d54:	46b1      	mov	r9, r6
   11d56:	4684      	mov	ip, r0
   11d58:	46a0      	mov	r8, r4
   11d5a:	0028      	movs	r0, r5
   11d5c:	4655      	mov	r5, sl
   11d5e:	9309      	str	r3, [sp, #36]	; 0x24
   11d60:	4682      	mov	sl, r0
   11d62:	e035      	b.n	11dd0 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   11d64:	9906      	ldr	r1, [sp, #24]
   11d66:	4311      	orrs	r1, r2
   11d68:	9106      	str	r1, [sp, #24]
   11d6a:	e7d8      	b.n	11d1e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11d6c:	0292      	lsls	r2, r2, #10
   11d6e:	464f      	mov	r7, r9
   11d70:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11d72:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   11d74:	7919      	ldrb	r1, [r3, #4]
   11d76:	468b      	mov	fp, r1
   11d78:	2103      	movs	r1, #3
   11d7a:	465f      	mov	r7, fp
   11d7c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11d7e:	430a      	orrs	r2, r1
   11d80:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   11d82:	795a      	ldrb	r2, [r3, #5]
   11d84:	0152      	lsls	r2, r2, #5
   11d86:	2160      	movs	r1, #96	; 0x60
   11d88:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11d8a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   11d8c:	7999      	ldrb	r1, [r3, #6]
   11d8e:	0209      	lsls	r1, r1, #8
   11d90:	26c0      	movs	r6, #192	; 0xc0
   11d92:	00b6      	lsls	r6, r6, #2
   11d94:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11d96:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   11d98:	79da      	ldrb	r2, [r3, #7]
   11d9a:	0312      	lsls	r2, r2, #12
   11d9c:	21e0      	movs	r1, #224	; 0xe0
   11d9e:	01c9      	lsls	r1, r1, #7
   11da0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11da2:	4316      	orrs	r6, r2
   11da4:	4334      	orrs	r4, r6
   11da6:	9a03      	ldr	r2, [sp, #12]
   11da8:	4314      	orrs	r4, r2
   11daa:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   11dac:	4662      	mov	r2, ip
   11dae:	9907      	ldr	r1, [sp, #28]
   11db0:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   11db2:	2a04      	cmp	r2, #4
   11db4:	d02a      	beq.n	11e0c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   11db6:	7c9a      	ldrb	r2, [r3, #18]
   11db8:	9905      	ldr	r1, [sp, #20]
   11dba:	4291      	cmp	r1, r2
   11dbc:	d800      	bhi.n	11dc0 <tcc_init+0x198>
   11dbe:	e131      	b.n	12024 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11dc0:	7a59      	ldrb	r1, [r3, #9]
   11dc2:	350a      	adds	r5, #10
   11dc4:	2304      	movs	r3, #4
   11dc6:	469b      	mov	fp, r3
   11dc8:	44dc      	add	ip, fp
   11dca:	290f      	cmp	r1, #15
   11dcc:	d900      	bls.n	11dd0 <tcc_init+0x1a8>
   11dce:	e129      	b.n	12024 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11dd0:	0609      	lsls	r1, r1, #24
   11dd2:	23f0      	movs	r3, #240	; 0xf0
   11dd4:	051b      	lsls	r3, r3, #20
   11dd6:	4019      	ands	r1, r3
   11dd8:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   11dda:	782e      	ldrb	r6, [r5, #0]
   11ddc:	0436      	lsls	r6, r6, #16
   11dde:	20ff      	movs	r0, #255	; 0xff
   11de0:	0400      	lsls	r0, r0, #16
   11de2:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11de4:	7868      	ldrb	r0, [r5, #1]
   11de6:	2480      	movs	r4, #128	; 0x80
   11de8:	2800      	cmp	r0, #0
   11dea:	d100      	bne.n	11dee <tcc_init+0x1c6>
   11dec:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   11dee:	7898      	ldrb	r0, [r3, #2]
   11df0:	2708      	movs	r7, #8
   11df2:	9703      	str	r7, [sp, #12]
   11df4:	2800      	cmp	r0, #0
   11df6:	d101      	bne.n	11dfc <tcc_init+0x1d4>
   11df8:	9804      	ldr	r0, [sp, #16]
   11dfa:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   11dfc:	78d8      	ldrb	r0, [r3, #3]
   11dfe:	4683      	mov	fp, r0
   11e00:	2010      	movs	r0, #16
   11e02:	465f      	mov	r7, fp
   11e04:	2f00      	cmp	r7, #0
   11e06:	d1b1      	bne.n	11d6c <tcc_init+0x144>
   11e08:	9804      	ldr	r0, [sp, #16]
   11e0a:	e7af      	b.n	11d6c <tcc_init+0x144>
   11e0c:	4644      	mov	r4, r8
   11e0e:	4655      	mov	r5, sl
   11e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   11e12:	4a52      	ldr	r2, [pc, #328]	; (11f5c <tcc_init+0x334>)
   11e14:	5cd2      	ldrb	r2, [r2, r3]
   11e16:	4691      	mov	r9, r2
   11e18:	4651      	mov	r1, sl
   11e1a:	3150      	adds	r1, #80	; 0x50
   11e1c:	4650      	mov	r0, sl
   11e1e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   11e20:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11e22:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11e24:	2601      	movs	r6, #1
   11e26:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11e28:	2602      	movs	r6, #2
   11e2a:	36ff      	adds	r6, #255	; 0xff
   11e2c:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11e2e:	2680      	movs	r6, #128	; 0x80
   11e30:	0276      	lsls	r6, r6, #9
   11e32:	46b0      	mov	r8, r6
   11e34:	46a4      	mov	ip, r4
   11e36:	001c      	movs	r4, r3
   11e38:	464b      	mov	r3, r9
   11e3a:	e00f      	b.n	11e5c <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11e3c:	7806      	ldrb	r6, [r0, #0]
   11e3e:	2e00      	cmp	r6, #0
   11e40:	d007      	beq.n	11e52 <tcc_init+0x22a>
			if (i >= ow_num) {
   11e42:	4293      	cmp	r3, r2
   11e44:	d800      	bhi.n	11e48 <tcc_init+0x220>
   11e46:	e0e7      	b.n	12018 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   11e48:	2e02      	cmp	r6, #2
   11e4a:	d014      	beq.n	11e76 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11e4c:	4656      	mov	r6, sl
   11e4e:	4096      	lsls	r6, r2
   11e50:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11e52:	3201      	adds	r2, #1
   11e54:	3101      	adds	r1, #1
   11e56:	3002      	adds	r0, #2
   11e58:	2a08      	cmp	r2, #8
   11e5a:	d010      	beq.n	11e7e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   11e5c:	780e      	ldrb	r6, [r1, #0]
   11e5e:	2e00      	cmp	r6, #0
   11e60:	d0ec      	beq.n	11e3c <tcc_init+0x214>
			if (i >= ow_num) {
   11e62:	4293      	cmp	r3, r2
   11e64:	d800      	bhi.n	11e68 <tcc_init+0x240>
   11e66:	e0d5      	b.n	12014 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11e68:	4646      	mov	r6, r8
   11e6a:	4096      	lsls	r6, r2
   11e6c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11e6e:	7806      	ldrb	r6, [r0, #0]
   11e70:	2e00      	cmp	r6, #0
   11e72:	d1e9      	bne.n	11e48 <tcc_init+0x220>
   11e74:	e7ed      	b.n	11e52 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11e76:	465e      	mov	r6, fp
   11e78:	4096      	lsls	r6, r2
   11e7a:	4337      	orrs	r7, r6
   11e7c:	e7e9      	b.n	11e52 <tcc_init+0x22a>
   11e7e:	4699      	mov	r9, r3
   11e80:	0023      	movs	r3, r4
   11e82:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11e84:	7e6a      	ldrb	r2, [r5, #25]
   11e86:	0112      	lsls	r2, r2, #4
   11e88:	2130      	movs	r1, #48	; 0x30
   11e8a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   11e8c:	7e28      	ldrb	r0, [r5, #24]
   11e8e:	2207      	movs	r2, #7
   11e90:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11e92:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11e94:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   11e96:	2080      	movs	r0, #128	; 0x80
   11e98:	0240      	lsls	r0, r0, #9
   11e9a:	000e      	movs	r6, r1
   11e9c:	e002      	b.n	11ea4 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11e9e:	3201      	adds	r2, #1
   11ea0:	2a04      	cmp	r2, #4
   11ea2:	d00b      	beq.n	11ebc <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   11ea4:	18a9      	adds	r1, r5, r2
   11ea6:	7d09      	ldrb	r1, [r1, #20]
   11ea8:	2900      	cmp	r1, #0
   11eaa:	d0f8      	beq.n	11e9e <tcc_init+0x276>
			if (n >= cc_num) {
   11eac:	9905      	ldr	r1, [sp, #20]
   11eae:	4291      	cmp	r1, r2
   11eb0:	dc00      	bgt.n	11eb4 <tcc_init+0x28c>
   11eb2:	e0b3      	b.n	1201c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   11eb4:	0001      	movs	r1, r0
   11eb6:	4091      	lsls	r1, r2
   11eb8:	430e      	orrs	r6, r1
   11eba:	e7f0      	b.n	11e9e <tcc_init+0x276>
   11ebc:	46b2      	mov	sl, r6
   11ebe:	9801      	ldr	r0, [sp, #4]
   11ec0:	0002      	movs	r2, r0
   11ec2:	3204      	adds	r2, #4
   11ec4:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   11ec6:	2100      	movs	r1, #0
   11ec8:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11eca:	4282      	cmp	r2, r0
   11ecc:	d1fc      	bne.n	11ec8 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   11ece:	2200      	movs	r2, #0
   11ed0:	9801      	ldr	r0, [sp, #4]
   11ed2:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   11ed4:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   11ed6:	0099      	lsls	r1, r3, #2
   11ed8:	4a22      	ldr	r2, [pc, #136]	; (11f64 <tcc_init+0x33c>)
   11eda:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   11edc:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   11ede:	22a0      	movs	r2, #160	; 0xa0
   11ee0:	5ca9      	ldrb	r1, [r5, r2]
   11ee2:	3a64      	subs	r2, #100	; 0x64
   11ee4:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   11ee6:	a90d      	add	r1, sp, #52	; 0x34
   11ee8:	7aaa      	ldrb	r2, [r5, #10]
   11eea:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   11eec:	4a1e      	ldr	r2, [pc, #120]	; (11f68 <tcc_init+0x340>)
   11eee:	5cd6      	ldrb	r6, [r2, r3]
   11ef0:	0030      	movs	r0, r6
   11ef2:	4b1e      	ldr	r3, [pc, #120]	; (11f6c <tcc_init+0x344>)
   11ef4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   11ef6:	0030      	movs	r0, r6
   11ef8:	4b1d      	ldr	r3, [pc, #116]	; (11f70 <tcc_init+0x348>)
   11efa:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11efc:	464b      	mov	r3, r9
   11efe:	2b00      	cmp	r3, #0
   11f00:	dd3c      	ble.n	11f7c <tcc_init+0x354>
   11f02:	002e      	movs	r6, r5
   11f04:	3658      	adds	r6, #88	; 0x58
   11f06:	3398      	adds	r3, #152	; 0x98
   11f08:	4698      	mov	r8, r3
   11f0a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11f0c:	2301      	movs	r3, #1
   11f0e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   11f10:	46ab      	mov	fp, r5
   11f12:	4645      	mov	r5, r8
   11f14:	46a0      	mov	r8, r4
   11f16:	9c08      	ldr	r4, [sp, #32]
   11f18:	e003      	b.n	11f22 <tcc_init+0x2fa>
   11f1a:	3401      	adds	r4, #1
   11f1c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11f1e:	42ac      	cmp	r4, r5
   11f20:	d02a      	beq.n	11f78 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   11f22:	7823      	ldrb	r3, [r4, #0]
   11f24:	2b00      	cmp	r3, #0
   11f26:	d0f8      	beq.n	11f1a <tcc_init+0x2f2>
   11f28:	ab0c      	add	r3, sp, #48	; 0x30
   11f2a:	464a      	mov	r2, r9
   11f2c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11f2e:	2300      	movs	r3, #0
   11f30:	aa0c      	add	r2, sp, #48	; 0x30
   11f32:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   11f34:	0013      	movs	r3, r2
   11f36:	2220      	movs	r2, #32
   11f38:	18b2      	adds	r2, r6, r2
   11f3a:	7812      	ldrb	r2, [r2, #0]
   11f3c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   11f3e:	464a      	mov	r2, r9
   11f40:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   11f42:	7830      	ldrb	r0, [r6, #0]
   11f44:	0019      	movs	r1, r3
   11f46:	4b0b      	ldr	r3, [pc, #44]	; (11f74 <tcc_init+0x34c>)
   11f48:	4798      	blx	r3
   11f4a:	e7e6      	b.n	11f1a <tcc_init+0x2f2>
   11f4c:	00011aa9 	.word	0x00011aa9
   11f50:	40000400 	.word	0x40000400
   11f54:	0001a7f8 	.word	0x0001a7f8
   11f58:	0001a80c 	.word	0x0001a80c
   11f5c:	0001a818 	.word	0x0001a818
   11f60:	0001a804 	.word	0x0001a804
   11f64:	2000163c 	.word	0x2000163c
   11f68:	0001a808 	.word	0x0001a808
   11f6c:	00011951 	.word	0x00011951
   11f70:	000118c5 	.word	0x000118c5
   11f74:	00011a49 	.word	0x00011a49
   11f78:	4644      	mov	r4, r8
   11f7a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f7e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11f82:	0212      	lsls	r2, r2, #8
   11f84:	4313      	orrs	r3, r2
   11f86:	9a02      	ldr	r2, [sp, #8]
   11f88:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   11f8a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11f8c:	2204      	movs	r2, #4
   11f8e:	68a3      	ldr	r3, [r4, #8]
   11f90:	421a      	tst	r2, r3
   11f92:	d1fc      	bne.n	11f8e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   11f94:	23ff      	movs	r3, #255	; 0xff
   11f96:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11f98:	2204      	movs	r2, #4
   11f9a:	68a3      	ldr	r3, [r4, #8]
   11f9c:	421a      	tst	r2, r3
   11f9e:	d1fc      	bne.n	11f9a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11fa0:	466b      	mov	r3, sp
   11fa2:	7e1b      	ldrb	r3, [r3, #24]
   11fa4:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   11fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11fa8:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11fac:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11fae:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11fb0:	4a1d      	ldr	r2, [pc, #116]	; (12028 <tcc_init+0x400>)
   11fb2:	68a3      	ldr	r3, [r4, #8]
   11fb4:	4213      	tst	r3, r2
   11fb6:	d1fc      	bne.n	11fb2 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11fb8:	4653      	mov	r3, sl
   11fba:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11fbc:	2210      	movs	r2, #16
   11fbe:	68a3      	ldr	r3, [r4, #8]
   11fc0:	421a      	tst	r2, r3
   11fc2:	d1fc      	bne.n	11fbe <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   11fc4:	682b      	ldr	r3, [r5, #0]
   11fc6:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11fc8:	4a18      	ldr	r2, [pc, #96]	; (1202c <tcc_init+0x404>)
   11fca:	68a3      	ldr	r3, [r4, #8]
   11fcc:	4213      	tst	r3, r2
   11fce:	d1fc      	bne.n	11fca <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11fd0:	686b      	ldr	r3, [r5, #4]
   11fd2:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11fd4:	9805      	ldr	r0, [sp, #20]
   11fd6:	2800      	cmp	r0, #0
   11fd8:	dd22      	ble.n	12020 <tcc_init+0x3f8>
   11fda:	351c      	adds	r5, #28
   11fdc:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11fde:	4e14      	ldr	r6, [pc, #80]	; (12030 <tcc_init+0x408>)
   11fe0:	0032      	movs	r2, r6
   11fe2:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   11fe4:	68a3      	ldr	r3, [r4, #8]
   11fe6:	421a      	tst	r2, r3
   11fe8:	d1fc      	bne.n	11fe4 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11fea:	cd04      	ldmia	r5!, {r2}
   11fec:	000b      	movs	r3, r1
   11fee:	3310      	adds	r3, #16
   11ff0:	009b      	lsls	r3, r3, #2
   11ff2:	18e3      	adds	r3, r4, r3
   11ff4:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11ff6:	3101      	adds	r1, #1
   11ff8:	4288      	cmp	r0, r1
   11ffa:	dcf1      	bgt.n	11fe0 <tcc_init+0x3b8>
	return STATUS_OK;
   11ffc:	2000      	movs	r0, #0
   11ffe:	e62d      	b.n	11c5c <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   12000:	2017      	movs	r0, #23
   12002:	e62b      	b.n	11c5c <tcc_init+0x34>
   12004:	2017      	movs	r0, #23
   12006:	e629      	b.n	11c5c <tcc_init+0x34>
   12008:	2017      	movs	r0, #23
   1200a:	e627      	b.n	11c5c <tcc_init+0x34>
   1200c:	2017      	movs	r0, #23
   1200e:	e625      	b.n	11c5c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   12010:	2017      	movs	r0, #23
   12012:	e623      	b.n	11c5c <tcc_init+0x34>
			if (i >= ow_num) {
   12014:	2017      	movs	r0, #23
   12016:	e621      	b.n	11c5c <tcc_init+0x34>
			if (i >= ow_num) {
   12018:	2017      	movs	r0, #23
   1201a:	e61f      	b.n	11c5c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1201c:	2017      	movs	r0, #23
   1201e:	e61d      	b.n	11c5c <tcc_init+0x34>
	return STATUS_OK;
   12020:	2000      	movs	r0, #0
   12022:	e61b      	b.n	11c5c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   12024:	2017      	movs	r0, #23
   12026:	e619      	b.n	11c5c <tcc_init+0x34>
   12028:	00020040 	.word	0x00020040
   1202c:	00040080 	.word	0x00040080
   12030:	00080100 	.word	0x00080100

00012034 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   12034:	0092      	lsls	r2, r2, #2
   12036:	1883      	adds	r3, r0, r2
   12038:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1203a:	4b03      	ldr	r3, [pc, #12]	; (12048 <tcc_register_callback+0x14>)
   1203c:	58d3      	ldr	r3, [r2, r3]
   1203e:	6b42      	ldr	r2, [r0, #52]	; 0x34
   12040:	4313      	orrs	r3, r2
   12042:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   12044:	2000      	movs	r0, #0
   12046:	4770      	bx	lr
   12048:	0001a81c 	.word	0x0001a81c

0001204c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1204c:	b570      	push	{r4, r5, r6, lr}
   1204e:	0004      	movs	r4, r0
   12050:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   12052:	6800      	ldr	r0, [r0, #0]
   12054:	4b09      	ldr	r3, [pc, #36]	; (1207c <tcc_enable_callback+0x30>)
   12056:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   12058:	4b09      	ldr	r3, [pc, #36]	; (12080 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1205a:	5c1b      	ldrb	r3, [r3, r0]
   1205c:	221f      	movs	r2, #31
   1205e:	401a      	ands	r2, r3
   12060:	2301      	movs	r3, #1
   12062:	4093      	lsls	r3, r2
   12064:	4a07      	ldr	r2, [pc, #28]	; (12084 <tcc_enable_callback+0x38>)
   12066:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   12068:	00ad      	lsls	r5, r5, #2
   1206a:	4b07      	ldr	r3, [pc, #28]	; (12088 <tcc_enable_callback+0x3c>)
   1206c:	58ea      	ldr	r2, [r5, r3]
   1206e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12070:	4313      	orrs	r3, r2
   12072:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   12074:	6823      	ldr	r3, [r4, #0]
   12076:	629a      	str	r2, [r3, #40]	; 0x28
}
   12078:	bd70      	pop	{r4, r5, r6, pc}
   1207a:	46c0      	nop			; (mov r8, r8)
   1207c:	00011aa9 	.word	0x00011aa9
   12080:	0001a84c 	.word	0x0001a84c
   12084:	e000e100 	.word	0xe000e100
   12088:	0001a81c 	.word	0x0001a81c

0001208c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1208c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1208e:	46c6      	mov	lr, r8
   12090:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   12092:	0080      	lsls	r0, r0, #2
   12094:	4b0e      	ldr	r3, [pc, #56]	; (120d0 <_tcc_interrupt_handler+0x44>)
   12096:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   12098:	683b      	ldr	r3, [r7, #0]
   1209a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1209e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   120a0:	4013      	ands	r3, r2
   120a2:	401e      	ands	r6, r3
   120a4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   120a6:	4b0b      	ldr	r3, [pc, #44]	; (120d4 <_tcc_interrupt_handler+0x48>)
   120a8:	4698      	mov	r8, r3
   120aa:	e002      	b.n	120b2 <_tcc_interrupt_handler+0x26>
   120ac:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   120ae:	2c30      	cmp	r4, #48	; 0x30
   120b0:	d00a      	beq.n	120c8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   120b2:	4643      	mov	r3, r8
   120b4:	58e5      	ldr	r5, [r4, r3]
   120b6:	4235      	tst	r5, r6
   120b8:	d0f8      	beq.n	120ac <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   120ba:	193b      	adds	r3, r7, r4
   120bc:	685b      	ldr	r3, [r3, #4]
   120be:	0038      	movs	r0, r7
   120c0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   120c2:	683b      	ldr	r3, [r7, #0]
   120c4:	62dd      	str	r5, [r3, #44]	; 0x2c
   120c6:	e7f1      	b.n	120ac <_tcc_interrupt_handler+0x20>
		}
	}
}
   120c8:	bc04      	pop	{r2}
   120ca:	4690      	mov	r8, r2
   120cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120ce:	46c0      	nop			; (mov r8, r8)
   120d0:	2000163c 	.word	0x2000163c
   120d4:	0001a81c 	.word	0x0001a81c

000120d8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   120d8:	b510      	push	{r4, lr}
   120da:	2000      	movs	r0, #0
   120dc:	4b01      	ldr	r3, [pc, #4]	; (120e4 <TCC0_Handler+0xc>)
   120de:	4798      	blx	r3
   120e0:	bd10      	pop	{r4, pc}
   120e2:	46c0      	nop			; (mov r8, r8)
   120e4:	0001208d 	.word	0x0001208d

000120e8 <TCC1_Handler>:
   120e8:	b510      	push	{r4, lr}
   120ea:	2001      	movs	r0, #1
   120ec:	4b01      	ldr	r3, [pc, #4]	; (120f4 <TCC1_Handler+0xc>)
   120ee:	4798      	blx	r3
   120f0:	bd10      	pop	{r4, pc}
   120f2:	46c0      	nop			; (mov r8, r8)
   120f4:	0001208d 	.word	0x0001208d

000120f8 <TCC2_Handler>:
   120f8:	b510      	push	{r4, lr}
   120fa:	2002      	movs	r0, #2
   120fc:	4b01      	ldr	r3, [pc, #4]	; (12104 <TCC2_Handler+0xc>)
   120fe:	4798      	blx	r3
   12100:	bd10      	pop	{r4, pc}
   12102:	46c0      	nop			; (mov r8, r8)
   12104:	0001208d 	.word	0x0001208d

00012108 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   12108:	e7fe      	b.n	12108 <Dummy_Handler>
	...

0001210c <Reset_Handler>:
{
   1210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1210e:	4a2a      	ldr	r2, [pc, #168]	; (121b8 <Reset_Handler+0xac>)
   12110:	4b2a      	ldr	r3, [pc, #168]	; (121bc <Reset_Handler+0xb0>)
   12112:	429a      	cmp	r2, r3
   12114:	d011      	beq.n	1213a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   12116:	001a      	movs	r2, r3
   12118:	4b29      	ldr	r3, [pc, #164]	; (121c0 <Reset_Handler+0xb4>)
   1211a:	429a      	cmp	r2, r3
   1211c:	d20d      	bcs.n	1213a <Reset_Handler+0x2e>
   1211e:	4a29      	ldr	r2, [pc, #164]	; (121c4 <Reset_Handler+0xb8>)
   12120:	3303      	adds	r3, #3
   12122:	1a9b      	subs	r3, r3, r2
   12124:	089b      	lsrs	r3, r3, #2
   12126:	3301      	adds	r3, #1
   12128:	009b      	lsls	r3, r3, #2
   1212a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1212c:	4823      	ldr	r0, [pc, #140]	; (121bc <Reset_Handler+0xb0>)
   1212e:	4922      	ldr	r1, [pc, #136]	; (121b8 <Reset_Handler+0xac>)
   12130:	588c      	ldr	r4, [r1, r2]
   12132:	5084      	str	r4, [r0, r2]
   12134:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   12136:	429a      	cmp	r2, r3
   12138:	d1fa      	bne.n	12130 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1213a:	4a23      	ldr	r2, [pc, #140]	; (121c8 <Reset_Handler+0xbc>)
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <Reset_Handler+0xc0>)
   1213e:	429a      	cmp	r2, r3
   12140:	d20a      	bcs.n	12158 <Reset_Handler+0x4c>
   12142:	43d3      	mvns	r3, r2
   12144:	4921      	ldr	r1, [pc, #132]	; (121cc <Reset_Handler+0xc0>)
   12146:	185b      	adds	r3, r3, r1
   12148:	2103      	movs	r1, #3
   1214a:	438b      	bics	r3, r1
   1214c:	3304      	adds	r3, #4
   1214e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   12150:	2100      	movs	r1, #0
   12152:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   12154:	4293      	cmp	r3, r2
   12156:	d1fc      	bne.n	12152 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   12158:	4a1d      	ldr	r2, [pc, #116]	; (121d0 <Reset_Handler+0xc4>)
   1215a:	21ff      	movs	r1, #255	; 0xff
   1215c:	4b1d      	ldr	r3, [pc, #116]	; (121d4 <Reset_Handler+0xc8>)
   1215e:	438b      	bics	r3, r1
   12160:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   12162:	39fd      	subs	r1, #253	; 0xfd
   12164:	2390      	movs	r3, #144	; 0x90
   12166:	005b      	lsls	r3, r3, #1
   12168:	4a1b      	ldr	r2, [pc, #108]	; (121d8 <Reset_Handler+0xcc>)
   1216a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1216c:	4a1b      	ldr	r2, [pc, #108]	; (121dc <Reset_Handler+0xd0>)
   1216e:	78d3      	ldrb	r3, [r2, #3]
   12170:	2503      	movs	r5, #3
   12172:	43ab      	bics	r3, r5
   12174:	2402      	movs	r4, #2
   12176:	4323      	orrs	r3, r4
   12178:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1217a:	78d3      	ldrb	r3, [r2, #3]
   1217c:	270c      	movs	r7, #12
   1217e:	43bb      	bics	r3, r7
   12180:	2608      	movs	r6, #8
   12182:	4333      	orrs	r3, r6
   12184:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   12186:	4b16      	ldr	r3, [pc, #88]	; (121e0 <Reset_Handler+0xd4>)
   12188:	7b98      	ldrb	r0, [r3, #14]
   1218a:	2230      	movs	r2, #48	; 0x30
   1218c:	4390      	bics	r0, r2
   1218e:	2220      	movs	r2, #32
   12190:	4310      	orrs	r0, r2
   12192:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   12194:	7b99      	ldrb	r1, [r3, #14]
   12196:	43b9      	bics	r1, r7
   12198:	4331      	orrs	r1, r6
   1219a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1219c:	7b9a      	ldrb	r2, [r3, #14]
   1219e:	43aa      	bics	r2, r5
   121a0:	4322      	orrs	r2, r4
   121a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   121a4:	4a0f      	ldr	r2, [pc, #60]	; (121e4 <Reset_Handler+0xd8>)
   121a6:	6853      	ldr	r3, [r2, #4]
   121a8:	2180      	movs	r1, #128	; 0x80
   121aa:	430b      	orrs	r3, r1
   121ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   121ae:	4b0e      	ldr	r3, [pc, #56]	; (121e8 <Reset_Handler+0xdc>)
   121b0:	4798      	blx	r3
        main();
   121b2:	4b0e      	ldr	r3, [pc, #56]	; (121ec <Reset_Handler+0xe0>)
   121b4:	4798      	blx	r3
   121b6:	e7fe      	b.n	121b6 <Reset_Handler+0xaa>
   121b8:	0001bd88 	.word	0x0001bd88
   121bc:	20000000 	.word	0x20000000
   121c0:	200003d0 	.word	0x200003d0
   121c4:	20000004 	.word	0x20000004
   121c8:	200003d0 	.word	0x200003d0
   121cc:	200017ac 	.word	0x200017ac
   121d0:	e000ed00 	.word	0xe000ed00
   121d4:	0000b000 	.word	0x0000b000
   121d8:	41007000 	.word	0x41007000
   121dc:	41005000 	.word	0x41005000
   121e0:	41004800 	.word	0x41004800
   121e4:	41004000 	.word	0x41004000
   121e8:	00017921 	.word	0x00017921
   121ec:	0001721d 	.word	0x0001721d

000121f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   121f2:	46c6      	mov	lr, r8
   121f4:	b500      	push	{lr}
   121f6:	000c      	movs	r4, r1
   121f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   121fa:	2800      	cmp	r0, #0
   121fc:	d10f      	bne.n	1221e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   121fe:	2a00      	cmp	r2, #0
   12200:	dd11      	ble.n	12226 <_read+0x36>
   12202:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   12204:	4e09      	ldr	r6, [pc, #36]	; (1222c <_read+0x3c>)
   12206:	4d0a      	ldr	r5, [pc, #40]	; (12230 <_read+0x40>)
   12208:	6830      	ldr	r0, [r6, #0]
   1220a:	0021      	movs	r1, r4
   1220c:	682b      	ldr	r3, [r5, #0]
   1220e:	4798      	blx	r3
		ptr++;
   12210:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   12212:	42bc      	cmp	r4, r7
   12214:	d1f8      	bne.n	12208 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   12216:	4640      	mov	r0, r8
   12218:	bc04      	pop	{r2}
   1221a:	4690      	mov	r8, r2
   1221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1221e:	2301      	movs	r3, #1
   12220:	425b      	negs	r3, r3
   12222:	4698      	mov	r8, r3
   12224:	e7f7      	b.n	12216 <_read+0x26>
	for (; len > 0; --len) {
   12226:	4680      	mov	r8, r0
   12228:	e7f5      	b.n	12216 <_read+0x26>
   1222a:	46c0      	nop			; (mov r8, r8)
   1222c:	20001650 	.word	0x20001650
   12230:	20001648 	.word	0x20001648

00012234 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   12234:	b5f0      	push	{r4, r5, r6, r7, lr}
   12236:	46c6      	mov	lr, r8
   12238:	b500      	push	{lr}
   1223a:	000e      	movs	r6, r1
   1223c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1223e:	3801      	subs	r0, #1
   12240:	2802      	cmp	r0, #2
   12242:	d810      	bhi.n	12266 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   12244:	2a00      	cmp	r2, #0
   12246:	d011      	beq.n	1226c <_write+0x38>
   12248:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1224a:	4b0c      	ldr	r3, [pc, #48]	; (1227c <_write+0x48>)
   1224c:	4698      	mov	r8, r3
   1224e:	4f0c      	ldr	r7, [pc, #48]	; (12280 <_write+0x4c>)
   12250:	4643      	mov	r3, r8
   12252:	6818      	ldr	r0, [r3, #0]
   12254:	5d31      	ldrb	r1, [r6, r4]
   12256:	683b      	ldr	r3, [r7, #0]
   12258:	4798      	blx	r3
   1225a:	2800      	cmp	r0, #0
   1225c:	db08      	blt.n	12270 <_write+0x3c>
			return -1;
		}
		++nChars;
   1225e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   12260:	42a5      	cmp	r5, r4
   12262:	d1f5      	bne.n	12250 <_write+0x1c>
   12264:	e006      	b.n	12274 <_write+0x40>
		return -1;
   12266:	2401      	movs	r4, #1
   12268:	4264      	negs	r4, r4
   1226a:	e003      	b.n	12274 <_write+0x40>
	for (; len != 0; --len) {
   1226c:	0014      	movs	r4, r2
   1226e:	e001      	b.n	12274 <_write+0x40>
			return -1;
   12270:	2401      	movs	r4, #1
   12272:	4264      	negs	r4, r4
	}
	return nChars;
}
   12274:	0020      	movs	r0, r4
   12276:	bc04      	pop	{r2}
   12278:	4690      	mov	r8, r2
   1227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1227c:	20001650 	.word	0x20001650
   12280:	2000164c 	.word	0x2000164c

00012284 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   12284:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   12286:	4a06      	ldr	r2, [pc, #24]	; (122a0 <_sbrk+0x1c>)
   12288:	6812      	ldr	r2, [r2, #0]
   1228a:	2a00      	cmp	r2, #0
   1228c:	d004      	beq.n	12298 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1228e:	4a04      	ldr	r2, [pc, #16]	; (122a0 <_sbrk+0x1c>)
   12290:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   12292:	18c3      	adds	r3, r0, r3
   12294:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   12296:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   12298:	4902      	ldr	r1, [pc, #8]	; (122a4 <_sbrk+0x20>)
   1229a:	4a01      	ldr	r2, [pc, #4]	; (122a0 <_sbrk+0x1c>)
   1229c:	6011      	str	r1, [r2, #0]
   1229e:	e7f6      	b.n	1228e <_sbrk+0xa>
   122a0:	200004c8 	.word	0x200004c8
   122a4:	200037b0 	.word	0x200037b0

000122a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   122a8:	2001      	movs	r0, #1
   122aa:	4240      	negs	r0, r0
   122ac:	4770      	bx	lr

000122ae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   122ae:	2380      	movs	r3, #128	; 0x80
   122b0:	019b      	lsls	r3, r3, #6
   122b2:	604b      	str	r3, [r1, #4]

	return 0;
}
   122b4:	2000      	movs	r0, #0
   122b6:	4770      	bx	lr

000122b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   122b8:	2001      	movs	r0, #1
   122ba:	4770      	bx	lr

000122bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   122bc:	2000      	movs	r0, #0
   122be:	4770      	bx	lr

000122c0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   122c0:	b530      	push	{r4, r5, lr}
   122c2:	b087      	sub	sp, #28
   122c4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   122c6:	aa01      	add	r2, sp, #4
   122c8:	23a0      	movs	r3, #160	; 0xa0
   122ca:	011b      	lsls	r3, r3, #4
   122cc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   122ce:	2300      	movs	r3, #0
   122d0:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   122d2:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   122d4:	21fa      	movs	r1, #250	; 0xfa
   122d6:	00c9      	lsls	r1, r1, #3
   122d8:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   122da:	2101      	movs	r1, #1
   122dc:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   122de:	2004      	movs	r0, #4
   122e0:	7210      	strb	r0, [r2, #8]
   122e2:	7253      	strb	r3, [r2, #9]
   122e4:	7293      	strb	r3, [r2, #10]
   122e6:	72d3      	strb	r3, [r2, #11]
   122e8:	7311      	strb	r1, [r2, #12]
   122ea:	7351      	strb	r1, [r2, #13]
   122ec:	4b14      	ldr	r3, [pc, #80]	; (12340 <disk_initialize+0x80>)
   122ee:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   122f0:	2306      	movs	r3, #6
   122f2:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   122f4:	4d13      	ldr	r5, [pc, #76]	; (12344 <disk_initialize+0x84>)
   122f6:	4914      	ldr	r1, [pc, #80]	; (12348 <disk_initialize+0x88>)
   122f8:	0028      	movs	r0, r5
   122fa:	4b14      	ldr	r3, [pc, #80]	; (1234c <disk_initialize+0x8c>)
   122fc:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   122fe:	0028      	movs	r0, r5
   12300:	4b13      	ldr	r3, [pc, #76]	; (12350 <disk_initialize+0x90>)
   12302:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   12304:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   12306:	2c01      	cmp	r4, #1
   12308:	d901      	bls.n	1230e <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1230a:	b007      	add	sp, #28
   1230c:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1230e:	0020      	movs	r0, r4
   12310:	4b10      	ldr	r3, [pc, #64]	; (12354 <disk_initialize+0x94>)
   12312:	4798      	blx	r3
   12314:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   12316:	2803      	cmp	r0, #3
   12318:	d106      	bne.n	12328 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1231a:	0020      	movs	r0, r4
   1231c:	4b0d      	ldr	r3, [pc, #52]	; (12354 <disk_initialize+0x94>)
   1231e:	4798      	blx	r3
   12320:	0003      	movs	r3, r0
		return STA_NOINIT;
   12322:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   12324:	2b03      	cmp	r3, #3
   12326:	d0f0      	beq.n	1230a <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   12328:	2b00      	cmp	r3, #0
   1232a:	d106      	bne.n	1233a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1232c:	0020      	movs	r0, r4
   1232e:	4b0a      	ldr	r3, [pc, #40]	; (12358 <disk_initialize+0x98>)
   12330:	4798      	blx	r3
	return 0;
   12332:	1e43      	subs	r3, r0, #1
   12334:	4198      	sbcs	r0, r3
   12336:	0080      	lsls	r0, r0, #2
   12338:	e7e7      	b.n	1230a <disk_initialize+0x4a>
		return STA_NOINIT;
   1233a:	2001      	movs	r0, #1
   1233c:	e7e5      	b.n	1230a <disk_initialize+0x4a>
   1233e:	46c0      	nop			; (mov r8, r8)
   12340:	000007de 	.word	0x000007de
   12344:	20001654 	.word	0x20001654
   12348:	40001400 	.word	0x40001400
   1234c:	00010085 	.word	0x00010085
   12350:	0000ff21 	.word	0x0000ff21
   12354:	0000fbf1 	.word	0x0000fbf1
   12358:	0000fc2d 	.word	0x0000fc2d

0001235c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1235c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1235e:	4b05      	ldr	r3, [pc, #20]	; (12374 <disk_status+0x18>)
   12360:	4798      	blx	r3
   12362:	1e03      	subs	r3, r0, #0
   12364:	d004      	beq.n	12370 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   12366:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   12368:	2b02      	cmp	r3, #2
   1236a:	d000      	beq.n	1236e <disk_status+0x12>
	default:
		return STA_NOINIT;
   1236c:	3802      	subs	r0, #2
	}
}
   1236e:	bd10      	pop	{r4, pc}
		return 0;
   12370:	2000      	movs	r0, #0
   12372:	e7fc      	b.n	1236e <disk_status+0x12>
   12374:	0000fbf1 	.word	0x0000fbf1

00012378 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   12378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1237a:	46de      	mov	lr, fp
   1237c:	464f      	mov	r7, r9
   1237e:	4646      	mov	r6, r8
   12380:	b5c0      	push	{r6, r7, lr}
   12382:	b084      	sub	sp, #16
   12384:	9001      	str	r0, [sp, #4]
   12386:	000d      	movs	r5, r1
   12388:	0014      	movs	r4, r2
   1238a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1238c:	4b18      	ldr	r3, [pc, #96]	; (123f0 <disk_read+0x78>)
   1238e:	4798      	blx	r3
   12390:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   12392:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   12394:	2e00      	cmp	r6, #0
   12396:	d105      	bne.n	123a4 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   12398:	b004      	add	sp, #16
   1239a:	bc1c      	pop	{r2, r3, r4}
   1239c:	4690      	mov	r8, r2
   1239e:	4699      	mov	r9, r3
   123a0:	46a3      	mov	fp, r4
   123a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   123a4:	a903      	add	r1, sp, #12
   123a6:	9801      	ldr	r0, [sp, #4]
   123a8:	4b12      	ldr	r3, [pc, #72]	; (123f4 <disk_read+0x7c>)
   123aa:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   123ac:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   123ae:	0032      	movs	r2, r6
   123b0:	437a      	muls	r2, r7
   123b2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   123b4:	9b03      	ldr	r3, [sp, #12]
   123b6:	3301      	adds	r3, #1
   123b8:	4373      	muls	r3, r6
		return RES_PARERR;
   123ba:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   123bc:	429a      	cmp	r2, r3
   123be:	d8eb      	bhi.n	12398 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   123c0:	2f00      	cmp	r7, #0
   123c2:	d011      	beq.n	123e8 <disk_read+0x70>
   123c4:	0273      	lsls	r3, r6, #9
   123c6:	4698      	mov	r8, r3
   123c8:	1c7b      	adds	r3, r7, #1
   123ca:	469b      	mov	fp, r3
   123cc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   123ce:	4e0a      	ldr	r6, [pc, #40]	; (123f8 <disk_read+0x80>)
   123d0:	002a      	movs	r2, r5
   123d2:	0021      	movs	r1, r4
   123d4:	9801      	ldr	r0, [sp, #4]
   123d6:	47b0      	blx	r6
   123d8:	2800      	cmp	r0, #0
   123da:	d107      	bne.n	123ec <disk_read+0x74>
   123dc:	3701      	adds	r7, #1
   123de:	444c      	add	r4, r9
   123e0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   123e2:	455f      	cmp	r7, fp
   123e4:	d1f4      	bne.n	123d0 <disk_read+0x58>
   123e6:	e7d7      	b.n	12398 <disk_read+0x20>
	return RES_OK;
   123e8:	2000      	movs	r0, #0
   123ea:	e7d5      	b.n	12398 <disk_read+0x20>
			return RES_ERROR;
   123ec:	2001      	movs	r0, #1
   123ee:	e7d3      	b.n	12398 <disk_read+0x20>
   123f0:	0000fc25 	.word	0x0000fc25
   123f4:	0000fc09 	.word	0x0000fc09
   123f8:	0000fc45 	.word	0x0000fc45

000123fc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   123fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   123fe:	46de      	mov	lr, fp
   12400:	464f      	mov	r7, r9
   12402:	4646      	mov	r6, r8
   12404:	b5c0      	push	{r6, r7, lr}
   12406:	b084      	sub	sp, #16
   12408:	9001      	str	r0, [sp, #4]
   1240a:	000d      	movs	r5, r1
   1240c:	0014      	movs	r4, r2
   1240e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   12410:	4b18      	ldr	r3, [pc, #96]	; (12474 <disk_write+0x78>)
   12412:	4798      	blx	r3
   12414:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   12416:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   12418:	2e00      	cmp	r6, #0
   1241a:	d105      	bne.n	12428 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1241c:	b004      	add	sp, #16
   1241e:	bc1c      	pop	{r2, r3, r4}
   12420:	4690      	mov	r8, r2
   12422:	4699      	mov	r9, r3
   12424:	46a3      	mov	fp, r4
   12426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   12428:	a903      	add	r1, sp, #12
   1242a:	9801      	ldr	r0, [sp, #4]
   1242c:	4b12      	ldr	r3, [pc, #72]	; (12478 <disk_write+0x7c>)
   1242e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   12430:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   12432:	0032      	movs	r2, r6
   12434:	437a      	muls	r2, r7
   12436:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   12438:	9b03      	ldr	r3, [sp, #12]
   1243a:	3301      	adds	r3, #1
   1243c:	4373      	muls	r3, r6
		return RES_PARERR;
   1243e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   12440:	429a      	cmp	r2, r3
   12442:	d8eb      	bhi.n	1241c <disk_write+0x20>
	for (i = 0; i < count; i++) {
   12444:	2f00      	cmp	r7, #0
   12446:	d011      	beq.n	1246c <disk_write+0x70>
   12448:	0273      	lsls	r3, r6, #9
   1244a:	4698      	mov	r8, r3
   1244c:	1c7b      	adds	r3, r7, #1
   1244e:	469b      	mov	fp, r3
   12450:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   12452:	4e0a      	ldr	r6, [pc, #40]	; (1247c <disk_write+0x80>)
   12454:	002a      	movs	r2, r5
   12456:	0021      	movs	r1, r4
   12458:	9801      	ldr	r0, [sp, #4]
   1245a:	47b0      	blx	r6
   1245c:	2800      	cmp	r0, #0
   1245e:	d107      	bne.n	12470 <disk_write+0x74>
   12460:	3701      	adds	r7, #1
   12462:	444c      	add	r4, r9
   12464:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   12466:	455f      	cmp	r7, fp
   12468:	d1f4      	bne.n	12454 <disk_write+0x58>
   1246a:	e7d7      	b.n	1241c <disk_write+0x20>
	return RES_OK;
   1246c:	2000      	movs	r0, #0
   1246e:	e7d5      	b.n	1241c <disk_write+0x20>
			return RES_ERROR;
   12470:	2001      	movs	r0, #1
   12472:	e7d3      	b.n	1241c <disk_write+0x20>
   12474:	0000fc25 	.word	0x0000fc25
   12478:	0000fc09 	.word	0x0000fc09
   1247c:	0000fc65 	.word	0x0000fc65

00012480 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   12480:	b510      	push	{r4, lr}
   12482:	b082      	sub	sp, #8
   12484:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   12486:	2901      	cmp	r1, #1
   12488:	d00b      	beq.n	124a2 <disk_ioctl+0x22>
   1248a:	2900      	cmp	r1, #0
   1248c:	d020      	beq.n	124d0 <disk_ioctl+0x50>
   1248e:	2902      	cmp	r1, #2
   12490:	d00f      	beq.n	124b2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   12492:	2004      	movs	r0, #4
	switch (ctrl) {
   12494:	2903      	cmp	r1, #3
   12496:	d102      	bne.n	1249e <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   12498:	2301      	movs	r3, #1
   1249a:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1249c:	2000      	movs	r0, #0
	}

	return res;
}
   1249e:	b002      	add	sp, #8
   124a0:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   124a2:	a901      	add	r1, sp, #4
   124a4:	4b0e      	ldr	r3, [pc, #56]	; (124e0 <disk_ioctl+0x60>)
   124a6:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   124a8:	9b01      	ldr	r3, [sp, #4]
   124aa:	3301      	adds	r3, #1
   124ac:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   124ae:	2000      	movs	r0, #0
	break;
   124b0:	e7f5      	b.n	1249e <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   124b2:	4b0c      	ldr	r3, [pc, #48]	; (124e4 <disk_ioctl+0x64>)
   124b4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   124b6:	1e43      	subs	r3, r0, #1
   124b8:	b2db      	uxtb	r3, r3
   124ba:	2b01      	cmp	r3, #1
   124bc:	d904      	bls.n	124c8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   124be:	1f03      	subs	r3, r0, #4
   124c0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   124c2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   124c4:	4213      	tst	r3, r2
   124c6:	d1ea      	bne.n	1249e <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   124c8:	2300      	movs	r3, #0
   124ca:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   124cc:	2000      	movs	r0, #0
	break;
   124ce:	e7e6      	b.n	1249e <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   124d0:	4b05      	ldr	r3, [pc, #20]	; (124e8 <disk_ioctl+0x68>)
   124d2:	4798      	blx	r3
   124d4:	2800      	cmp	r0, #0
   124d6:	d001      	beq.n	124dc <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   124d8:	2003      	movs	r0, #3
   124da:	e7e0      	b.n	1249e <disk_ioctl+0x1e>
			res = RES_OK;
   124dc:	2000      	movs	r0, #0
   124de:	e7de      	b.n	1249e <disk_ioctl+0x1e>
   124e0:	0000fc09 	.word	0x0000fc09
   124e4:	0000fc25 	.word	0x0000fc25
   124e8:	0000fbf1 	.word	0x0000fbf1

000124ec <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   124ec:	b500      	push	{lr}
   124ee:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   124f0:	4669      	mov	r1, sp
   124f2:	480f      	ldr	r0, [pc, #60]	; (12530 <get_fattime+0x44>)
   124f4:	4b0f      	ldr	r3, [pc, #60]	; (12534 <get_fattime+0x48>)
   124f6:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   124f8:	466b      	mov	r3, sp
   124fa:	7958      	ldrb	r0, [r3, #5]
   124fc:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   124fe:	791b      	ldrb	r3, [r3, #4]
   12500:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   12502:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   12504:	466b      	mov	r3, sp
   12506:	789b      	ldrb	r3, [r3, #2]
   12508:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1250a:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1250c:	466b      	mov	r3, sp
   1250e:	785b      	ldrb	r3, [r3, #1]
   12510:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   12512:	4318      	orrs	r0, r3
   12514:	466b      	mov	r3, sp
   12516:	781b      	ldrb	r3, [r3, #0]
   12518:	085b      	lsrs	r3, r3, #1
   1251a:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1251c:	466b      	mov	r3, sp
   1251e:	88db      	ldrh	r3, [r3, #6]
   12520:	4a05      	ldr	r2, [pc, #20]	; (12538 <get_fattime+0x4c>)
   12522:	4694      	mov	ip, r2
   12524:	4463      	add	r3, ip
   12526:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   12528:	4318      	orrs	r0, r3

	return ul_time;
}
   1252a:	b003      	add	sp, #12
   1252c:	bd00      	pop	{pc}
   1252e:	46c0      	nop			; (mov r8, r8)
   12530:	20001654 	.word	0x20001654
   12534:	0001000d 	.word	0x0001000d
   12538:	fffff844 	.word	0xfffff844

0001253c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1253c:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1253e:	2a00      	cmp	r2, #0
   12540:	d005      	beq.n	1254e <mem_cpy+0x12>
   12542:	2300      	movs	r3, #0
		*d++ = *s++;
   12544:	5ccc      	ldrb	r4, [r1, r3]
   12546:	54c4      	strb	r4, [r0, r3]
   12548:	3301      	adds	r3, #1
	while (cnt--)
   1254a:	4293      	cmp	r3, r2
   1254c:	d1fa      	bne.n	12544 <mem_cpy+0x8>
}
   1254e:	bd10      	pop	{r4, pc}

00012550 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   12550:	2a00      	cmp	r2, #0
   12552:	d005      	beq.n	12560 <mem_set+0x10>
   12554:	0003      	movs	r3, r0
   12556:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   12558:	7019      	strb	r1, [r3, #0]
   1255a:	3301      	adds	r3, #1
	while (cnt--)
   1255c:	4293      	cmp	r3, r2
   1255e:	d1fb      	bne.n	12558 <mem_set+0x8>
}
   12560:	4770      	bx	lr

00012562 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   12562:	0002      	movs	r2, r0
	clst -= 2;
   12564:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   12566:	6983      	ldr	r3, [r0, #24]
   12568:	3b02      	subs	r3, #2
   1256a:	2000      	movs	r0, #0
   1256c:	4299      	cmp	r1, r3
   1256e:	d203      	bcs.n	12578 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   12570:	7890      	ldrb	r0, [r2, #2]
   12572:	4341      	muls	r1, r0
   12574:	6a90      	ldr	r0, [r2, #40]	; 0x28
   12576:	1808      	adds	r0, r1, r0
}
   12578:	4770      	bx	lr

0001257a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1257a:	0002      	movs	r2, r0
   1257c:	0001      	movs	r1, r0
   1257e:	310b      	adds	r1, #11
	BYTE sum = 0;
   12580:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   12582:	0843      	lsrs	r3, r0, #1
   12584:	01c0      	lsls	r0, r0, #7
   12586:	4303      	orrs	r3, r0
   12588:	7810      	ldrb	r0, [r2, #0]
   1258a:	1818      	adds	r0, r3, r0
   1258c:	b2c0      	uxtb	r0, r0
   1258e:	3201      	adds	r2, #1
   12590:	428a      	cmp	r2, r1
   12592:	d1f6      	bne.n	12582 <sum_sfn+0x8>
	return sum;
}
   12594:	4770      	bx	lr
	...

00012598 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   12598:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1259a:	2800      	cmp	r0, #0
   1259c:	d010      	beq.n	125c0 <validate+0x28>
   1259e:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   125a0:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   125a2:	2a00      	cmp	r2, #0
   125a4:	d101      	bne.n	125aa <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   125a6:	0018      	movs	r0, r3
   125a8:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   125aa:	88c2      	ldrh	r2, [r0, #6]
   125ac:	428a      	cmp	r2, r1
   125ae:	d1fa      	bne.n	125a6 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   125b0:	7840      	ldrb	r0, [r0, #1]
   125b2:	4b04      	ldr	r3, [pc, #16]	; (125c4 <validate+0x2c>)
   125b4:	4798      	blx	r3
		return FR_NOT_READY;
   125b6:	2303      	movs	r3, #3
	return FR_OK;
   125b8:	07c0      	lsls	r0, r0, #31
   125ba:	17c0      	asrs	r0, r0, #31
   125bc:	4003      	ands	r3, r0
   125be:	e7f2      	b.n	125a6 <validate+0xe>
		return FR_INVALID_OBJECT;
   125c0:	2309      	movs	r3, #9
   125c2:	e7f0      	b.n	125a6 <validate+0xe>
   125c4:	0001235d 	.word	0x0001235d

000125c8 <check_fs>:
{
   125c8:	b570      	push	{r4, r5, r6, lr}
   125ca:	0004      	movs	r4, r0
   125cc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   125ce:	0001      	movs	r1, r0
   125d0:	3130      	adds	r1, #48	; 0x30
   125d2:	7840      	ldrb	r0, [r0, #1]
   125d4:	2301      	movs	r3, #1
   125d6:	4d1f      	ldr	r5, [pc, #124]	; (12654 <check_fs+0x8c>)
   125d8:	47a8      	blx	r5
		return 3;
   125da:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   125dc:	2800      	cmp	r0, #0
   125de:	d001      	beq.n	125e4 <check_fs+0x1c>
}
   125e0:	0018      	movs	r0, r3
   125e2:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   125e4:	4b1c      	ldr	r3, [pc, #112]	; (12658 <check_fs+0x90>)
   125e6:	5ce3      	ldrb	r3, [r4, r3]
   125e8:	021b      	lsls	r3, r3, #8
   125ea:	4a1c      	ldr	r2, [pc, #112]	; (1265c <check_fs+0x94>)
   125ec:	5ca2      	ldrb	r2, [r4, r2]
   125ee:	431a      	orrs	r2, r3
   125f0:	491b      	ldr	r1, [pc, #108]	; (12660 <check_fs+0x98>)
   125f2:	b212      	sxth	r2, r2
		return 2;
   125f4:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   125f6:	428a      	cmp	r2, r1
   125f8:	d1f2      	bne.n	125e0 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   125fa:	3367      	adds	r3, #103	; 0x67
   125fc:	5ce3      	ldrb	r3, [r4, r3]
   125fe:	061b      	lsls	r3, r3, #24
   12600:	2268      	movs	r2, #104	; 0x68
   12602:	5ca2      	ldrb	r2, [r4, r2]
   12604:	0412      	lsls	r2, r2, #16
   12606:	4313      	orrs	r3, r2
   12608:	2266      	movs	r2, #102	; 0x66
   1260a:	5ca2      	ldrb	r2, [r4, r2]
   1260c:	4313      	orrs	r3, r2
   1260e:	2267      	movs	r2, #103	; 0x67
   12610:	5ca2      	ldrb	r2, [r4, r2]
   12612:	0212      	lsls	r2, r2, #8
   12614:	4313      	orrs	r3, r2
   12616:	021b      	lsls	r3, r3, #8
   12618:	0a1b      	lsrs	r3, r3, #8
   1261a:	4a12      	ldr	r2, [pc, #72]	; (12664 <check_fs+0x9c>)
   1261c:	4293      	cmp	r3, r2
   1261e:	d016      	beq.n	1264e <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   12620:	2385      	movs	r3, #133	; 0x85
   12622:	5ce3      	ldrb	r3, [r4, r3]
   12624:	061b      	lsls	r3, r3, #24
   12626:	2284      	movs	r2, #132	; 0x84
   12628:	5ca2      	ldrb	r2, [r4, r2]
   1262a:	0412      	lsls	r2, r2, #16
   1262c:	4313      	orrs	r3, r2
   1262e:	2282      	movs	r2, #130	; 0x82
   12630:	5ca2      	ldrb	r2, [r4, r2]
   12632:	4313      	orrs	r3, r2
   12634:	2283      	movs	r2, #131	; 0x83
   12636:	5ca2      	ldrb	r2, [r4, r2]
   12638:	0212      	lsls	r2, r2, #8
   1263a:	4313      	orrs	r3, r2
   1263c:	021b      	lsls	r3, r3, #8
   1263e:	0a1b      	lsrs	r3, r3, #8
   12640:	4a09      	ldr	r2, [pc, #36]	; (12668 <check_fs+0xa0>)
   12642:	4694      	mov	ip, r2
   12644:	4463      	add	r3, ip
   12646:	1e58      	subs	r0, r3, #1
   12648:	4183      	sbcs	r3, r0
		return 3;
   1264a:	b2db      	uxtb	r3, r3
   1264c:	e7c8      	b.n	125e0 <check_fs+0x18>
		return 0;
   1264e:	2300      	movs	r3, #0
   12650:	e7c6      	b.n	125e0 <check_fs+0x18>
   12652:	46c0      	nop			; (mov r8, r8)
   12654:	00012379 	.word	0x00012379
   12658:	0000022f 	.word	0x0000022f
   1265c:	0000022e 	.word	0x0000022e
   12660:	ffffaa55 	.word	0xffffaa55
   12664:	00544146 	.word	0x00544146
   12668:	ffabbeba 	.word	0xffabbeba

0001266c <chk_mounted>:
{
   1266c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1266e:	46d6      	mov	lr, sl
   12670:	464f      	mov	r7, r9
   12672:	4646      	mov	r6, r8
   12674:	b5c0      	push	{r6, r7, lr}
   12676:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12678:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1267a:	781c      	ldrb	r4, [r3, #0]
   1267c:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1267e:	2c09      	cmp	r4, #9
   12680:	d80e      	bhi.n	126a0 <chk_mounted+0x34>
   12682:	785a      	ldrb	r2, [r3, #1]
   12684:	2a3a      	cmp	r2, #58	; 0x3a
   12686:	d001      	beq.n	1268c <chk_mounted+0x20>
   12688:	2400      	movs	r4, #0
   1268a:	e00a      	b.n	126a2 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1268c:	3302      	adds	r3, #2
   1268e:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   12690:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   12692:	2c07      	cmp	r4, #7
   12694:	d905      	bls.n	126a2 <chk_mounted+0x36>
}
   12696:	bc1c      	pop	{r2, r3, r4}
   12698:	4690      	mov	r8, r2
   1269a:	4699      	mov	r9, r3
   1269c:	46a2      	mov	sl, r4
   1269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126a0:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   126a2:	00a3      	lsls	r3, r4, #2
   126a4:	4ac5      	ldr	r2, [pc, #788]	; (129bc <chk_mounted+0x350>)
   126a6:	589e      	ldr	r6, [r3, r2]
   126a8:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   126aa:	2e00      	cmp	r6, #0
   126ac:	d100      	bne.n	126b0 <chk_mounted+0x44>
   126ae:	e0e8      	b.n	12882 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   126b0:	7833      	ldrb	r3, [r6, #0]
   126b2:	2b00      	cmp	r3, #0
   126b4:	d00d      	beq.n	126d2 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   126b6:	7870      	ldrb	r0, [r6, #1]
   126b8:	4bc1      	ldr	r3, [pc, #772]	; (129c0 <chk_mounted+0x354>)
   126ba:	4798      	blx	r3
   126bc:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   126be:	07c2      	lsls	r2, r0, #31
   126c0:	d407      	bmi.n	126d2 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   126c2:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   126c4:	2d00      	cmp	r5, #0
   126c6:	d0e6      	beq.n	12696 <chk_mounted+0x2a>
   126c8:	075b      	lsls	r3, r3, #29
   126ca:	d400      	bmi.n	126ce <chk_mounted+0x62>
   126cc:	e0db      	b.n	12886 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   126ce:	300a      	adds	r0, #10
   126d0:	e7e1      	b.n	12696 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   126d2:	2300      	movs	r3, #0
   126d4:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   126d6:	b2e0      	uxtb	r0, r4
   126d8:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   126da:	4bba      	ldr	r3, [pc, #744]	; (129c4 <chk_mounted+0x358>)
   126dc:	4798      	blx	r3
   126de:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   126e0:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   126e2:	07da      	lsls	r2, r3, #31
   126e4:	d4d7      	bmi.n	12696 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   126e6:	2d00      	cmp	r5, #0
   126e8:	d002      	beq.n	126f0 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   126ea:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   126ec:	075b      	lsls	r3, r3, #29
   126ee:	d4d2      	bmi.n	12696 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   126f0:	2100      	movs	r1, #0
   126f2:	0030      	movs	r0, r6
   126f4:	4bb4      	ldr	r3, [pc, #720]	; (129c8 <chk_mounted+0x35c>)
   126f6:	4798      	blx	r3
   126f8:	0003      	movs	r3, r0
   126fa:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   126fc:	2801      	cmp	r0, #1
   126fe:	d100      	bne.n	12702 <chk_mounted+0x96>
   12700:	e09a      	b.n	12838 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   12702:	2b03      	cmp	r3, #3
   12704:	d100      	bne.n	12708 <chk_mounted+0x9c>
   12706:	e0c0      	b.n	1288a <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   12708:	200d      	movs	r0, #13
   1270a:	2b00      	cmp	r3, #0
   1270c:	d1c3      	bne.n	12696 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1270e:	333c      	adds	r3, #60	; 0x3c
   12710:	5cf2      	ldrb	r2, [r6, r3]
   12712:	0212      	lsls	r2, r2, #8
   12714:	3b01      	subs	r3, #1
   12716:	5cf3      	ldrb	r3, [r6, r3]
   12718:	4313      	orrs	r3, r2
   1271a:	2280      	movs	r2, #128	; 0x80
   1271c:	0092      	lsls	r2, r2, #2
   1271e:	b21b      	sxth	r3, r3
   12720:	4293      	cmp	r3, r2
   12722:	d1b8      	bne.n	12696 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   12724:	2347      	movs	r3, #71	; 0x47
   12726:	5cf3      	ldrb	r3, [r6, r3]
   12728:	021b      	lsls	r3, r3, #8
   1272a:	3abb      	subs	r2, #187	; 0xbb
   1272c:	3aff      	subs	r2, #255	; 0xff
   1272e:	5cb5      	ldrb	r5, [r6, r2]
   12730:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   12732:	d10d      	bne.n	12750 <chk_mounted+0xe4>
   12734:	2357      	movs	r3, #87	; 0x57
   12736:	5cf5      	ldrb	r5, [r6, r3]
   12738:	062d      	lsls	r5, r5, #24
   1273a:	3b01      	subs	r3, #1
   1273c:	5cf3      	ldrb	r3, [r6, r3]
   1273e:	041b      	lsls	r3, r3, #16
   12740:	431d      	orrs	r5, r3
   12742:	2354      	movs	r3, #84	; 0x54
   12744:	5cf3      	ldrb	r3, [r6, r3]
   12746:	431d      	orrs	r5, r3
   12748:	2355      	movs	r3, #85	; 0x55
   1274a:	5cf3      	ldrb	r3, [r6, r3]
   1274c:	021b      	lsls	r3, r3, #8
   1274e:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   12750:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   12752:	2340      	movs	r3, #64	; 0x40
   12754:	5cf2      	ldrb	r2, [r6, r3]
   12756:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   12758:	1e53      	subs	r3, r2, #1
   1275a:	200d      	movs	r0, #13
   1275c:	2b01      	cmp	r3, #1
   1275e:	d89a      	bhi.n	12696 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   12760:	233d      	movs	r3, #61	; 0x3d
   12762:	5cf1      	ldrb	r1, [r6, r3]
   12764:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   12766:	2900      	cmp	r1, #0
   12768:	d095      	beq.n	12696 <chk_mounted+0x2a>
   1276a:	1e4b      	subs	r3, r1, #1
   1276c:	4219      	tst	r1, r3
   1276e:	d192      	bne.n	12696 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12770:	2342      	movs	r3, #66	; 0x42
   12772:	5cf3      	ldrb	r3, [r6, r3]
   12774:	021b      	lsls	r3, r3, #8
   12776:	3034      	adds	r0, #52	; 0x34
   12778:	5c30      	ldrb	r0, [r6, r0]
   1277a:	4318      	orrs	r0, r3
   1277c:	4680      	mov	r8, r0
   1277e:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12780:	200d      	movs	r0, #13
   12782:	4643      	mov	r3, r8
   12784:	071b      	lsls	r3, r3, #28
   12786:	d000      	beq.n	1278a <chk_mounted+0x11e>
   12788:	e785      	b.n	12696 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1278a:	2344      	movs	r3, #68	; 0x44
   1278c:	5cf3      	ldrb	r3, [r6, r3]
   1278e:	021b      	lsls	r3, r3, #8
   12790:	3036      	adds	r0, #54	; 0x36
   12792:	5c30      	ldrb	r0, [r6, r0]
   12794:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   12796:	d10d      	bne.n	127b4 <chk_mounted+0x148>
   12798:	3353      	adds	r3, #83	; 0x53
   1279a:	5cf3      	ldrb	r3, [r6, r3]
   1279c:	061b      	lsls	r3, r3, #24
   1279e:	2052      	movs	r0, #82	; 0x52
   127a0:	5c30      	ldrb	r0, [r6, r0]
   127a2:	0400      	lsls	r0, r0, #16
   127a4:	4303      	orrs	r3, r0
   127a6:	2050      	movs	r0, #80	; 0x50
   127a8:	5c30      	ldrb	r0, [r6, r0]
   127aa:	4303      	orrs	r3, r0
   127ac:	2051      	movs	r0, #81	; 0x51
   127ae:	5c30      	ldrb	r0, [r6, r0]
   127b0:	0200      	lsls	r0, r0, #8
   127b2:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   127b4:	203f      	movs	r0, #63	; 0x3f
   127b6:	5c30      	ldrb	r0, [r6, r0]
   127b8:	0200      	lsls	r0, r0, #8
   127ba:	273e      	movs	r7, #62	; 0x3e
   127bc:	5df7      	ldrb	r7, [r6, r7]
   127be:	4307      	orrs	r7, r0
   127c0:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   127c2:	200d      	movs	r0, #13
   127c4:	2f00      	cmp	r7, #0
   127c6:	d100      	bne.n	127ca <chk_mounted+0x15e>
   127c8:	e765      	b.n	12696 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   127ca:	436a      	muls	r2, r5
   127cc:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   127ce:	4642      	mov	r2, r8
   127d0:	0917      	lsrs	r7, r2, #4
   127d2:	4457      	add	r7, sl
   127d4:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   127d6:	42bb      	cmp	r3, r7
   127d8:	d200      	bcs.n	127dc <chk_mounted+0x170>
   127da:	e75c      	b.n	12696 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   127dc:	1bd8      	subs	r0, r3, r7
   127de:	4b7b      	ldr	r3, [pc, #492]	; (129cc <chk_mounted+0x360>)
   127e0:	4798      	blx	r3
   127e2:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   127e4:	200d      	movs	r0, #13
   127e6:	2b00      	cmp	r3, #0
   127e8:	d100      	bne.n	127ec <chk_mounted+0x180>
   127ea:	e754      	b.n	12696 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   127ec:	4a78      	ldr	r2, [pc, #480]	; (129d0 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   127ee:	429a      	cmp	r2, r3
   127f0:	4192      	sbcs	r2, r2
   127f2:	4252      	negs	r2, r2
   127f4:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   127f6:	4977      	ldr	r1, [pc, #476]	; (129d4 <chk_mounted+0x368>)
   127f8:	428b      	cmp	r3, r1
   127fa:	d848      	bhi.n	1288e <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   127fc:	3302      	adds	r3, #2
   127fe:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12800:	19e7      	adds	r7, r4, r7
   12802:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12804:	4454      	add	r4, sl
   12806:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12808:	200d      	movs	r0, #13
   1280a:	4641      	mov	r1, r8
   1280c:	2900      	cmp	r1, #0
   1280e:	d100      	bne.n	12812 <chk_mounted+0x1a6>
   12810:	e741      	b.n	12696 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   12812:	444c      	add	r4, r9
   12814:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12816:	2a02      	cmp	r2, #2
   12818:	d12c      	bne.n	12874 <chk_mounted+0x208>
   1281a:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1281c:	496e      	ldr	r1, [pc, #440]	; (129d8 <chk_mounted+0x36c>)
   1281e:	468c      	mov	ip, r1
   12820:	4463      	add	r3, ip
   12822:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   12824:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12826:	429d      	cmp	r5, r3
   12828:	d200      	bcs.n	1282c <chk_mounted+0x1c0>
   1282a:	e734      	b.n	12696 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1282c:	2301      	movs	r3, #1
   1282e:	425b      	negs	r3, r3
   12830:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   12832:	2300      	movs	r3, #0
   12834:	60f3      	str	r3, [r6, #12]
   12836:	e0b6      	b.n	129a6 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   12838:	33f2      	adds	r3, #242	; 0xf2
   1283a:	33ff      	adds	r3, #255	; 0xff
   1283c:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1283e:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   12840:	2b00      	cmp	r3, #0
   12842:	d100      	bne.n	12846 <chk_mounted+0x1da>
   12844:	e727      	b.n	12696 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   12846:	23fa      	movs	r3, #250	; 0xfa
   12848:	33ff      	adds	r3, #255	; 0xff
   1284a:	5cf4      	ldrb	r4, [r6, r3]
   1284c:	0624      	lsls	r4, r4, #24
   1284e:	3b01      	subs	r3, #1
   12850:	5cf3      	ldrb	r3, [r6, r3]
   12852:	041b      	lsls	r3, r3, #16
   12854:	431c      	orrs	r4, r3
   12856:	23fb      	movs	r3, #251	; 0xfb
   12858:	005b      	lsls	r3, r3, #1
   1285a:	5cf3      	ldrb	r3, [r6, r3]
   1285c:	431c      	orrs	r4, r3
   1285e:	23f8      	movs	r3, #248	; 0xf8
   12860:	33ff      	adds	r3, #255	; 0xff
   12862:	5cf2      	ldrb	r2, [r6, r3]
   12864:	0212      	lsls	r2, r2, #8
   12866:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12868:	0021      	movs	r1, r4
   1286a:	0030      	movs	r0, r6
   1286c:	4b56      	ldr	r3, [pc, #344]	; (129c8 <chk_mounted+0x35c>)
   1286e:	4798      	blx	r3
   12870:	0003      	movs	r3, r0
   12872:	e746      	b.n	12702 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12874:	2103      	movs	r1, #3
   12876:	4359      	muls	r1, r3
   12878:	0849      	lsrs	r1, r1, #1
   1287a:	2001      	movs	r0, #1
   1287c:	4003      	ands	r3, r0
   1287e:	18cb      	adds	r3, r1, r3
   12880:	e7cc      	b.n	1281c <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   12882:	200c      	movs	r0, #12
   12884:	e707      	b.n	12696 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   12886:	2000      	movs	r0, #0
   12888:	e705      	b.n	12696 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   1288a:	2001      	movs	r0, #1
   1288c:	e703      	b.n	12696 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1288e:	3302      	adds	r3, #2
   12890:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12892:	19e7      	adds	r7, r4, r7
   12894:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12896:	4652      	mov	r2, sl
   12898:	18a2      	adds	r2, r4, r2
   1289a:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   1289c:	200d      	movs	r0, #13
   1289e:	4642      	mov	r2, r8
   128a0:	2a00      	cmp	r2, #0
   128a2:	d000      	beq.n	128a6 <chk_mounted+0x23a>
   128a4:	e6f7      	b.n	12696 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   128a6:	225f      	movs	r2, #95	; 0x5f
   128a8:	5cb2      	ldrb	r2, [r6, r2]
   128aa:	0612      	lsls	r2, r2, #24
   128ac:	215e      	movs	r1, #94	; 0x5e
   128ae:	5c71      	ldrb	r1, [r6, r1]
   128b0:	0409      	lsls	r1, r1, #16
   128b2:	430a      	orrs	r2, r1
   128b4:	215c      	movs	r1, #92	; 0x5c
   128b6:	5c71      	ldrb	r1, [r6, r1]
   128b8:	430a      	orrs	r2, r1
   128ba:	215d      	movs	r1, #93	; 0x5d
   128bc:	5c71      	ldrb	r1, [r6, r1]
   128be:	0209      	lsls	r1, r1, #8
   128c0:	430a      	orrs	r2, r1
   128c2:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   128c4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   128c6:	4a44      	ldr	r2, [pc, #272]	; (129d8 <chk_mounted+0x36c>)
   128c8:	4694      	mov	ip, r2
   128ca:	4463      	add	r3, ip
   128cc:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   128ce:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   128d0:	429d      	cmp	r5, r3
   128d2:	d200      	bcs.n	128d6 <chk_mounted+0x26a>
   128d4:	e6df      	b.n	12696 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   128d6:	2301      	movs	r3, #1
   128d8:	425b      	negs	r3, r3
   128da:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   128dc:	2300      	movs	r3, #0
   128de:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   128e0:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   128e2:	3361      	adds	r3, #97	; 0x61
   128e4:	5cf3      	ldrb	r3, [r6, r3]
   128e6:	021b      	lsls	r3, r3, #8
   128e8:	2260      	movs	r2, #96	; 0x60
   128ea:	5cb2      	ldrb	r2, [r6, r2]
   128ec:	431a      	orrs	r2, r3
   128ee:	1912      	adds	r2, r2, r4
   128f0:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   128f2:	0031      	movs	r1, r6
   128f4:	3130      	adds	r1, #48	; 0x30
   128f6:	7870      	ldrb	r0, [r6, #1]
   128f8:	2301      	movs	r3, #1
   128fa:	4c38      	ldr	r4, [pc, #224]	; (129dc <chk_mounted+0x370>)
   128fc:	47a0      	blx	r4
   128fe:	2203      	movs	r2, #3
   12900:	2800      	cmp	r0, #0
   12902:	d150      	bne.n	129a6 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   12904:	4b36      	ldr	r3, [pc, #216]	; (129e0 <chk_mounted+0x374>)
   12906:	5cf2      	ldrb	r2, [r6, r3]
   12908:	0212      	lsls	r2, r2, #8
   1290a:	4b36      	ldr	r3, [pc, #216]	; (129e4 <chk_mounted+0x378>)
   1290c:	5cf3      	ldrb	r3, [r6, r3]
   1290e:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12910:	4935      	ldr	r1, [pc, #212]	; (129e8 <chk_mounted+0x37c>)
   12912:	b21b      	sxth	r3, r3
   12914:	2203      	movs	r2, #3
   12916:	428b      	cmp	r3, r1
   12918:	d145      	bne.n	129a6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1291a:	2333      	movs	r3, #51	; 0x33
   1291c:	5cf3      	ldrb	r3, [r6, r3]
   1291e:	061b      	lsls	r3, r3, #24
   12920:	322f      	adds	r2, #47	; 0x2f
   12922:	5cb2      	ldrb	r2, [r6, r2]
   12924:	0412      	lsls	r2, r2, #16
   12926:	4313      	orrs	r3, r2
   12928:	2230      	movs	r2, #48	; 0x30
   1292a:	5cb2      	ldrb	r2, [r6, r2]
   1292c:	4313      	orrs	r3, r2
   1292e:	2231      	movs	r2, #49	; 0x31
   12930:	5cb2      	ldrb	r2, [r6, r2]
   12932:	0212      	lsls	r2, r2, #8
   12934:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   12936:	492d      	ldr	r1, [pc, #180]	; (129ec <chk_mounted+0x380>)
   12938:	2203      	movs	r2, #3
   1293a:	428b      	cmp	r3, r1
   1293c:	d133      	bne.n	129a6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   1293e:	4b2c      	ldr	r3, [pc, #176]	; (129f0 <chk_mounted+0x384>)
   12940:	5cf3      	ldrb	r3, [r6, r3]
   12942:	061b      	lsls	r3, r3, #24
   12944:	4a2b      	ldr	r2, [pc, #172]	; (129f4 <chk_mounted+0x388>)
   12946:	5cb2      	ldrb	r2, [r6, r2]
   12948:	0412      	lsls	r2, r2, #16
   1294a:	4313      	orrs	r3, r2
   1294c:	2285      	movs	r2, #133	; 0x85
   1294e:	0092      	lsls	r2, r2, #2
   12950:	5cb2      	ldrb	r2, [r6, r2]
   12952:	4313      	orrs	r3, r2
   12954:	4a28      	ldr	r2, [pc, #160]	; (129f8 <chk_mounted+0x38c>)
   12956:	5cb2      	ldrb	r2, [r6, r2]
   12958:	0212      	lsls	r2, r2, #8
   1295a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1295c:	4927      	ldr	r1, [pc, #156]	; (129fc <chk_mounted+0x390>)
   1295e:	2203      	movs	r2, #3
   12960:	428b      	cmp	r3, r1
   12962:	d120      	bne.n	129a6 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   12964:	4b26      	ldr	r3, [pc, #152]	; (12a00 <chk_mounted+0x394>)
   12966:	5cf3      	ldrb	r3, [r6, r3]
   12968:	061b      	lsls	r3, r3, #24
   1296a:	4a26      	ldr	r2, [pc, #152]	; (12a04 <chk_mounted+0x398>)
   1296c:	5cb2      	ldrb	r2, [r6, r2]
   1296e:	0412      	lsls	r2, r2, #16
   12970:	4313      	orrs	r3, r2
   12972:	2287      	movs	r2, #135	; 0x87
   12974:	0092      	lsls	r2, r2, #2
   12976:	5cb2      	ldrb	r2, [r6, r2]
   12978:	4313      	orrs	r3, r2
   1297a:	4a23      	ldr	r2, [pc, #140]	; (12a08 <chk_mounted+0x39c>)
   1297c:	5cb2      	ldrb	r2, [r6, r2]
   1297e:	0212      	lsls	r2, r2, #8
   12980:	4313      	orrs	r3, r2
   12982:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   12984:	4b21      	ldr	r3, [pc, #132]	; (12a0c <chk_mounted+0x3a0>)
   12986:	5cf3      	ldrb	r3, [r6, r3]
   12988:	061b      	lsls	r3, r3, #24
   1298a:	4a21      	ldr	r2, [pc, #132]	; (12a10 <chk_mounted+0x3a4>)
   1298c:	5cb2      	ldrb	r2, [r6, r2]
   1298e:	0412      	lsls	r2, r2, #16
   12990:	4313      	orrs	r3, r2
   12992:	2286      	movs	r2, #134	; 0x86
   12994:	0092      	lsls	r2, r2, #2
   12996:	5cb2      	ldrb	r2, [r6, r2]
   12998:	4313      	orrs	r3, r2
   1299a:	4a1e      	ldr	r2, [pc, #120]	; (12a14 <chk_mounted+0x3a8>)
   1299c:	5cb2      	ldrb	r2, [r6, r2]
   1299e:	0212      	lsls	r2, r2, #8
   129a0:	4313      	orrs	r3, r2
   129a2:	6133      	str	r3, [r6, #16]
   129a4:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   129a6:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   129a8:	4a1b      	ldr	r2, [pc, #108]	; (12a18 <chk_mounted+0x3ac>)
   129aa:	8813      	ldrh	r3, [r2, #0]
   129ac:	3301      	adds	r3, #1
   129ae:	b29b      	uxth	r3, r3
   129b0:	8013      	strh	r3, [r2, #0]
   129b2:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   129b4:	2000      	movs	r0, #0
   129b6:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   129b8:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   129ba:	e66c      	b.n	12696 <chk_mounted+0x2a>
   129bc:	200004cc 	.word	0x200004cc
   129c0:	0001235d 	.word	0x0001235d
   129c4:	000122c1 	.word	0x000122c1
   129c8:	000125c9 	.word	0x000125c9
   129cc:	000175d5 	.word	0x000175d5
   129d0:	00000ff5 	.word	0x00000ff5
   129d4:	0000fff5 	.word	0x0000fff5
   129d8:	000001ff 	.word	0x000001ff
   129dc:	00012379 	.word	0x00012379
   129e0:	0000022f 	.word	0x0000022f
   129e4:	0000022e 	.word	0x0000022e
   129e8:	ffffaa55 	.word	0xffffaa55
   129ec:	41615252 	.word	0x41615252
   129f0:	00000217 	.word	0x00000217
   129f4:	00000216 	.word	0x00000216
   129f8:	00000215 	.word	0x00000215
   129fc:	61417272 	.word	0x61417272
   12a00:	0000021f 	.word	0x0000021f
   12a04:	0000021e 	.word	0x0000021e
   12a08:	0000021d 	.word	0x0000021d
   12a0c:	0000021b 	.word	0x0000021b
   12a10:	0000021a 	.word	0x0000021a
   12a14:	00000219 	.word	0x00000219
   12a18:	200004ec 	.word	0x200004ec

00012a1c <move_window>:
{
   12a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a1e:	46ce      	mov	lr, r9
   12a20:	b500      	push	{lr}
   12a22:	b082      	sub	sp, #8
   12a24:	0004      	movs	r4, r0
   12a26:	000f      	movs	r7, r1
	wsect = fs->winsect;
   12a28:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   12a2a:	428d      	cmp	r5, r1
   12a2c:	d03f      	beq.n	12aae <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   12a2e:	7903      	ldrb	r3, [r0, #4]
   12a30:	2b00      	cmp	r3, #0
   12a32:	d107      	bne.n	12a44 <move_window+0x28>
	return FR_OK;
   12a34:	2300      	movs	r3, #0
		if (sector) {
   12a36:	2f00      	cmp	r7, #0
   12a38:	d12c      	bne.n	12a94 <move_window+0x78>
}
   12a3a:	0018      	movs	r0, r3
   12a3c:	b002      	add	sp, #8
   12a3e:	bc04      	pop	{r2}
   12a40:	4691      	mov	r9, r2
   12a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12a44:	2330      	movs	r3, #48	; 0x30
   12a46:	469c      	mov	ip, r3
   12a48:	4484      	add	ip, r0
   12a4a:	4663      	mov	r3, ip
   12a4c:	4661      	mov	r1, ip
   12a4e:	9301      	str	r3, [sp, #4]
   12a50:	7840      	ldrb	r0, [r0, #1]
   12a52:	2301      	movs	r3, #1
   12a54:	002a      	movs	r2, r5
   12a56:	4e17      	ldr	r6, [pc, #92]	; (12ab4 <move_window+0x98>)
   12a58:	47b0      	blx	r6
				return FR_DISK_ERR;
   12a5a:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12a5c:	2800      	cmp	r0, #0
   12a5e:	d1ec      	bne.n	12a3a <move_window+0x1e>
			fs->wflag = 0;
   12a60:	2300      	movs	r3, #0
   12a62:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   12a64:	6a23      	ldr	r3, [r4, #32]
   12a66:	69e2      	ldr	r2, [r4, #28]
   12a68:	4694      	mov	ip, r2
   12a6a:	4463      	add	r3, ip
   12a6c:	429d      	cmp	r5, r3
   12a6e:	d2e1      	bcs.n	12a34 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12a70:	78e6      	ldrb	r6, [r4, #3]
   12a72:	2e01      	cmp	r6, #1
   12a74:	d9de      	bls.n	12a34 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   12a76:	4b0f      	ldr	r3, [pc, #60]	; (12ab4 <move_window+0x98>)
   12a78:	4699      	mov	r9, r3
					wsect += fs->fsize;
   12a7a:	69e3      	ldr	r3, [r4, #28]
   12a7c:	469c      	mov	ip, r3
   12a7e:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   12a80:	7860      	ldrb	r0, [r4, #1]
   12a82:	2301      	movs	r3, #1
   12a84:	002a      	movs	r2, r5
   12a86:	9901      	ldr	r1, [sp, #4]
   12a88:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12a8a:	3e01      	subs	r6, #1
   12a8c:	b2f6      	uxtb	r6, r6
   12a8e:	2e01      	cmp	r6, #1
   12a90:	d1f3      	bne.n	12a7a <move_window+0x5e>
   12a92:	e7cf      	b.n	12a34 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   12a94:	0021      	movs	r1, r4
   12a96:	3130      	adds	r1, #48	; 0x30
   12a98:	7860      	ldrb	r0, [r4, #1]
   12a9a:	3301      	adds	r3, #1
   12a9c:	003a      	movs	r2, r7
   12a9e:	4d06      	ldr	r5, [pc, #24]	; (12ab8 <move_window+0x9c>)
   12aa0:	47a8      	blx	r5
				return FR_DISK_ERR;
   12aa2:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   12aa4:	2800      	cmp	r0, #0
   12aa6:	d1c8      	bne.n	12a3a <move_window+0x1e>
			fs->winsect = sector;
   12aa8:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   12aaa:	2300      	movs	r3, #0
   12aac:	e7c5      	b.n	12a3a <move_window+0x1e>
   12aae:	2300      	movs	r3, #0
   12ab0:	e7c3      	b.n	12a3a <move_window+0x1e>
   12ab2:	46c0      	nop			; (mov r8, r8)
   12ab4:	000123fd 	.word	0x000123fd
   12ab8:	00012379 	.word	0x00012379

00012abc <get_fat>:
{
   12abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12abe:	0005      	movs	r5, r0
   12ac0:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12ac2:	2901      	cmp	r1, #1
   12ac4:	d974      	bls.n	12bb0 <get_fat+0xf4>
		return 1;
   12ac6:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12ac8:	69ab      	ldr	r3, [r5, #24]
   12aca:	4299      	cmp	r1, r3
   12acc:	d271      	bcs.n	12bb2 <get_fat+0xf6>
	switch (fs->fs_type) {
   12ace:	782b      	ldrb	r3, [r5, #0]
   12ad0:	2b02      	cmp	r3, #2
   12ad2:	d034      	beq.n	12b3e <get_fat+0x82>
   12ad4:	2b03      	cmp	r3, #3
   12ad6:	d049      	beq.n	12b6c <get_fat+0xb0>
   12ad8:	2b01      	cmp	r3, #1
   12ada:	d002      	beq.n	12ae2 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12adc:	2001      	movs	r0, #1
   12ade:	4240      	negs	r0, r0
   12ae0:	e067      	b.n	12bb2 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   12ae2:	084e      	lsrs	r6, r1, #1
   12ae4:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12ae6:	0a71      	lsrs	r1, r6, #9
   12ae8:	6a2b      	ldr	r3, [r5, #32]
   12aea:	469c      	mov	ip, r3
   12aec:	4461      	add	r1, ip
   12aee:	0028      	movs	r0, r5
   12af0:	4b30      	ldr	r3, [pc, #192]	; (12bb4 <get_fat+0xf8>)
   12af2:	4798      	blx	r3
   12af4:	2800      	cmp	r0, #0
   12af6:	d002      	beq.n	12afe <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12af8:	2001      	movs	r0, #1
   12afa:	4240      	negs	r0, r0
   12afc:	e059      	b.n	12bb2 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   12afe:	05f3      	lsls	r3, r6, #23
   12b00:	0ddb      	lsrs	r3, r3, #23
   12b02:	18eb      	adds	r3, r5, r3
   12b04:	3330      	adds	r3, #48	; 0x30
   12b06:	781f      	ldrb	r7, [r3, #0]
   12b08:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12b0a:	0a71      	lsrs	r1, r6, #9
   12b0c:	6a2b      	ldr	r3, [r5, #32]
   12b0e:	469c      	mov	ip, r3
   12b10:	4461      	add	r1, ip
   12b12:	0028      	movs	r0, r5
   12b14:	4b27      	ldr	r3, [pc, #156]	; (12bb4 <get_fat+0xf8>)
   12b16:	4798      	blx	r3
   12b18:	2800      	cmp	r0, #0
   12b1a:	d002      	beq.n	12b22 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12b1c:	2001      	movs	r0, #1
   12b1e:	4240      	negs	r0, r0
   12b20:	e047      	b.n	12bb2 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   12b22:	05f6      	lsls	r6, r6, #23
   12b24:	0df6      	lsrs	r6, r6, #23
   12b26:	19ad      	adds	r5, r5, r6
   12b28:	3530      	adds	r5, #48	; 0x30
   12b2a:	7828      	ldrb	r0, [r5, #0]
   12b2c:	0200      	lsls	r0, r0, #8
   12b2e:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   12b30:	07e3      	lsls	r3, r4, #31
   12b32:	d501      	bpl.n	12b38 <get_fat+0x7c>
   12b34:	0900      	lsrs	r0, r0, #4
   12b36:	e03c      	b.n	12bb2 <get_fat+0xf6>
   12b38:	0500      	lsls	r0, r0, #20
   12b3a:	0d00      	lsrs	r0, r0, #20
   12b3c:	e039      	b.n	12bb2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   12b3e:	0a09      	lsrs	r1, r1, #8
   12b40:	6a2b      	ldr	r3, [r5, #32]
   12b42:	469c      	mov	ip, r3
   12b44:	4461      	add	r1, ip
   12b46:	0028      	movs	r0, r5
   12b48:	4b1a      	ldr	r3, [pc, #104]	; (12bb4 <get_fat+0xf8>)
   12b4a:	4798      	blx	r3
   12b4c:	2800      	cmp	r0, #0
   12b4e:	d002      	beq.n	12b56 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12b50:	2001      	movs	r0, #1
   12b52:	4240      	negs	r0, r0
   12b54:	e02d      	b.n	12bb2 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   12b56:	0064      	lsls	r4, r4, #1
   12b58:	23ff      	movs	r3, #255	; 0xff
   12b5a:	005b      	lsls	r3, r3, #1
   12b5c:	401c      	ands	r4, r3
		return LD_WORD(p);
   12b5e:	192d      	adds	r5, r5, r4
   12b60:	3530      	adds	r5, #48	; 0x30
   12b62:	786b      	ldrb	r3, [r5, #1]
   12b64:	021b      	lsls	r3, r3, #8
   12b66:	7828      	ldrb	r0, [r5, #0]
   12b68:	4318      	orrs	r0, r3
   12b6a:	e022      	b.n	12bb2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12b6c:	09c9      	lsrs	r1, r1, #7
   12b6e:	6a2b      	ldr	r3, [r5, #32]
   12b70:	469c      	mov	ip, r3
   12b72:	4461      	add	r1, ip
   12b74:	0028      	movs	r0, r5
   12b76:	4b0f      	ldr	r3, [pc, #60]	; (12bb4 <get_fat+0xf8>)
   12b78:	4798      	blx	r3
   12b7a:	2800      	cmp	r0, #0
   12b7c:	d002      	beq.n	12b84 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12b7e:	2001      	movs	r0, #1
   12b80:	4240      	negs	r0, r0
   12b82:	e016      	b.n	12bb2 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   12b84:	00a4      	lsls	r4, r4, #2
   12b86:	23fe      	movs	r3, #254	; 0xfe
   12b88:	005b      	lsls	r3, r3, #1
   12b8a:	401c      	ands	r4, r3
   12b8c:	0023      	movs	r3, r4
   12b8e:	3330      	adds	r3, #48	; 0x30
   12b90:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   12b92:	78d8      	ldrb	r0, [r3, #3]
   12b94:	0600      	lsls	r0, r0, #24
   12b96:	789a      	ldrb	r2, [r3, #2]
   12b98:	0412      	lsls	r2, r2, #16
   12b9a:	4310      	orrs	r0, r2
   12b9c:	192c      	adds	r4, r5, r4
   12b9e:	3430      	adds	r4, #48	; 0x30
   12ba0:	7822      	ldrb	r2, [r4, #0]
   12ba2:	4310      	orrs	r0, r2
   12ba4:	785b      	ldrb	r3, [r3, #1]
   12ba6:	021b      	lsls	r3, r3, #8
   12ba8:	4318      	orrs	r0, r3
   12baa:	0100      	lsls	r0, r0, #4
   12bac:	0900      	lsrs	r0, r0, #4
   12bae:	e000      	b.n	12bb2 <get_fat+0xf6>
		return 1;
   12bb0:	2001      	movs	r0, #1
}
   12bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bb4:	00012a1d 	.word	0x00012a1d

00012bb8 <dir_sdi>:
{
   12bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bba:	0004      	movs	r4, r0
   12bbc:	000d      	movs	r5, r1
	dj->index = idx;
   12bbe:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   12bc0:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   12bc2:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   12bc4:	2901      	cmp	r1, #1
   12bc6:	d003      	beq.n	12bd0 <dir_sdi+0x18>
   12bc8:	6823      	ldr	r3, [r4, #0]
   12bca:	699a      	ldr	r2, [r3, #24]
   12bcc:	4291      	cmp	r1, r2
   12bce:	d300      	bcc.n	12bd2 <dir_sdi+0x1a>
}
   12bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   12bd2:	2900      	cmp	r1, #0
   12bd4:	d119      	bne.n	12c0a <dir_sdi+0x52>
   12bd6:	781a      	ldrb	r2, [r3, #0]
   12bd8:	2a03      	cmp	r2, #3
   12bda:	d013      	beq.n	12c04 <dir_sdi+0x4c>
		dj->clust = clst;
   12bdc:	2200      	movs	r2, #0
   12bde:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12be0:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   12be2:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12be4:	42aa      	cmp	r2, r5
   12be6:	d9f3      	bls.n	12bd0 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12be8:	092a      	lsrs	r2, r5, #4
   12bea:	b292      	uxth	r2, r2
   12bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12bee:	189b      	adds	r3, r3, r2
   12bf0:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   12bf2:	6823      	ldr	r3, [r4, #0]
   12bf4:	3330      	adds	r3, #48	; 0x30
   12bf6:	220f      	movs	r2, #15
   12bf8:	4015      	ands	r5, r2
   12bfa:	016d      	lsls	r5, r5, #5
   12bfc:	195d      	adds	r5, r3, r5
   12bfe:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   12c00:	2000      	movs	r0, #0
   12c02:	e7e5      	b.n	12bd0 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   12c04:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   12c06:	2900      	cmp	r1, #0
   12c08:	d0e8      	beq.n	12bdc <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   12c0a:	789e      	ldrb	r6, [r3, #2]
   12c0c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   12c0e:	42b5      	cmp	r5, r6
   12c10:	d313      	bcc.n	12c3a <dir_sdi+0x82>
   12c12:	1bad      	subs	r5, r5, r6
   12c14:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   12c16:	4f10      	ldr	r7, [pc, #64]	; (12c58 <dir_sdi+0xa0>)
   12c18:	e000      	b.n	12c1c <dir_sdi+0x64>
   12c1a:	001d      	movs	r5, r3
   12c1c:	6820      	ldr	r0, [r4, #0]
   12c1e:	47b8      	blx	r7
   12c20:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12c22:	1c43      	adds	r3, r0, #1
   12c24:	d012      	beq.n	12c4c <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   12c26:	2801      	cmp	r0, #1
   12c28:	d912      	bls.n	12c50 <dir_sdi+0x98>
   12c2a:	6823      	ldr	r3, [r4, #0]
   12c2c:	699b      	ldr	r3, [r3, #24]
   12c2e:	4298      	cmp	r0, r3
   12c30:	d210      	bcs.n	12c54 <dir_sdi+0x9c>
   12c32:	1bab      	subs	r3, r5, r6
   12c34:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   12c36:	42b5      	cmp	r5, r6
   12c38:	d2ef      	bcs.n	12c1a <dir_sdi+0x62>
		dj->clust = clst;
   12c3a:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12c3c:	6820      	ldr	r0, [r4, #0]
   12c3e:	4b07      	ldr	r3, [pc, #28]	; (12c5c <dir_sdi+0xa4>)
   12c40:	4798      	blx	r3
   12c42:	092b      	lsrs	r3, r5, #4
   12c44:	b29b      	uxth	r3, r3
   12c46:	1818      	adds	r0, r3, r0
   12c48:	6120      	str	r0, [r4, #16]
   12c4a:	e7d2      	b.n	12bf2 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12c4c:	2001      	movs	r0, #1
   12c4e:	e7bf      	b.n	12bd0 <dir_sdi+0x18>
				return FR_INT_ERR;
   12c50:	2002      	movs	r0, #2
   12c52:	e7bd      	b.n	12bd0 <dir_sdi+0x18>
   12c54:	2002      	movs	r0, #2
   12c56:	e7bb      	b.n	12bd0 <dir_sdi+0x18>
   12c58:	00012abd 	.word	0x00012abd
   12c5c:	00012563 	.word	0x00012563

00012c60 <put_fat>:
{
   12c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c62:	46c6      	mov	lr, r8
   12c64:	b500      	push	{lr}
   12c66:	0007      	movs	r7, r0
   12c68:	000c      	movs	r4, r1
   12c6a:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   12c6c:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12c6e:	2901      	cmp	r1, #1
   12c70:	d902      	bls.n	12c78 <put_fat+0x18>
   12c72:	6983      	ldr	r3, [r0, #24]
   12c74:	4299      	cmp	r1, r3
   12c76:	d303      	bcc.n	12c80 <put_fat+0x20>
}
   12c78:	0028      	movs	r0, r5
   12c7a:	bc04      	pop	{r2}
   12c7c:	4690      	mov	r8, r2
   12c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   12c80:	7803      	ldrb	r3, [r0, #0]
   12c82:	2b02      	cmp	r3, #2
   12c84:	d053      	beq.n	12d2e <put_fat+0xce>
   12c86:	2b03      	cmp	r3, #3
   12c88:	d063      	beq.n	12d52 <put_fat+0xf2>
			res = FR_INT_ERR;
   12c8a:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   12c8c:	2b01      	cmp	r3, #1
   12c8e:	d002      	beq.n	12c96 <put_fat+0x36>
		fs->wflag = 1;
   12c90:	2301      	movs	r3, #1
   12c92:	713b      	strb	r3, [r7, #4]
   12c94:	e7f0      	b.n	12c78 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   12c96:	084b      	lsrs	r3, r1, #1
   12c98:	4698      	mov	r8, r3
   12c9a:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12c9c:	4643      	mov	r3, r8
   12c9e:	0a59      	lsrs	r1, r3, #9
   12ca0:	6a03      	ldr	r3, [r0, #32]
   12ca2:	469c      	mov	ip, r3
   12ca4:	4461      	add	r1, ip
   12ca6:	4b3b      	ldr	r3, [pc, #236]	; (12d94 <put_fat+0x134>)
   12ca8:	4798      	blx	r3
   12caa:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12cac:	d1f0      	bne.n	12c90 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   12cae:	4643      	mov	r3, r8
   12cb0:	05db      	lsls	r3, r3, #23
   12cb2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12cb4:	07e2      	lsls	r2, r4, #31
   12cb6:	d51f      	bpl.n	12cf8 <put_fat+0x98>
   12cb8:	18fb      	adds	r3, r7, r3
   12cba:	3330      	adds	r3, #48	; 0x30
   12cbc:	7819      	ldrb	r1, [r3, #0]
   12cbe:	220f      	movs	r2, #15
   12cc0:	400a      	ands	r2, r1
   12cc2:	0131      	lsls	r1, r6, #4
   12cc4:	20ff      	movs	r0, #255	; 0xff
   12cc6:	0100      	lsls	r0, r0, #4
   12cc8:	4001      	ands	r1, r0
   12cca:	430a      	orrs	r2, r1
   12ccc:	701a      	strb	r2, [r3, #0]
			bc++;
   12cce:	4644      	mov	r4, r8
   12cd0:	3401      	adds	r4, #1
			fs->wflag = 1;
   12cd2:	2301      	movs	r3, #1
   12cd4:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12cd6:	0a61      	lsrs	r1, r4, #9
   12cd8:	6a3b      	ldr	r3, [r7, #32]
   12cda:	469c      	mov	ip, r3
   12cdc:	4461      	add	r1, ip
   12cde:	0038      	movs	r0, r7
   12ce0:	4b2c      	ldr	r3, [pc, #176]	; (12d94 <put_fat+0x134>)
   12ce2:	4798      	blx	r3
			if (res != FR_OK) break;
   12ce4:	2800      	cmp	r0, #0
   12ce6:	d151      	bne.n	12d8c <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   12ce8:	05e4      	lsls	r4, r4, #23
   12cea:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12cec:	0936      	lsrs	r6, r6, #4
   12cee:	b2f6      	uxtb	r6, r6
   12cf0:	193c      	adds	r4, r7, r4
   12cf2:	3430      	adds	r4, #48	; 0x30
   12cf4:	7026      	strb	r6, [r4, #0]
			break;
   12cf6:	e7cb      	b.n	12c90 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	3330      	adds	r3, #48	; 0x30
   12cfc:	701e      	strb	r6, [r3, #0]
			bc++;
   12cfe:	4644      	mov	r4, r8
   12d00:	3401      	adds	r4, #1
			fs->wflag = 1;
   12d02:	2301      	movs	r3, #1
   12d04:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12d06:	0a61      	lsrs	r1, r4, #9
   12d08:	6a3b      	ldr	r3, [r7, #32]
   12d0a:	469c      	mov	ip, r3
   12d0c:	4461      	add	r1, ip
   12d0e:	0038      	movs	r0, r7
   12d10:	4b20      	ldr	r3, [pc, #128]	; (12d94 <put_fat+0x134>)
   12d12:	4798      	blx	r3
			if (res != FR_OK) break;
   12d14:	2800      	cmp	r0, #0
   12d16:	d13b      	bne.n	12d90 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   12d18:	05e4      	lsls	r4, r4, #23
   12d1a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12d1c:	193b      	adds	r3, r7, r4
   12d1e:	3330      	adds	r3, #48	; 0x30
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	220f      	movs	r2, #15
   12d24:	4393      	bics	r3, r2
   12d26:	0536      	lsls	r6, r6, #20
   12d28:	0f36      	lsrs	r6, r6, #28
   12d2a:	431e      	orrs	r6, r3
   12d2c:	e7e0      	b.n	12cf0 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12d2e:	0a09      	lsrs	r1, r1, #8
   12d30:	6a03      	ldr	r3, [r0, #32]
   12d32:	469c      	mov	ip, r3
   12d34:	4461      	add	r1, ip
   12d36:	4b17      	ldr	r3, [pc, #92]	; (12d94 <put_fat+0x134>)
   12d38:	4798      	blx	r3
   12d3a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12d3c:	d1a8      	bne.n	12c90 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   12d3e:	0063      	lsls	r3, r4, #1
   12d40:	24ff      	movs	r4, #255	; 0xff
   12d42:	0064      	lsls	r4, r4, #1
   12d44:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   12d46:	18fb      	adds	r3, r7, r3
   12d48:	3330      	adds	r3, #48	; 0x30
   12d4a:	701e      	strb	r6, [r3, #0]
   12d4c:	0a36      	lsrs	r6, r6, #8
   12d4e:	705e      	strb	r6, [r3, #1]
			break;
   12d50:	e79e      	b.n	12c90 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12d52:	09c9      	lsrs	r1, r1, #7
   12d54:	6a03      	ldr	r3, [r0, #32]
   12d56:	469c      	mov	ip, r3
   12d58:	4461      	add	r1, ip
   12d5a:	4b0e      	ldr	r3, [pc, #56]	; (12d94 <put_fat+0x134>)
   12d5c:	4798      	blx	r3
   12d5e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12d60:	d196      	bne.n	12c90 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   12d62:	00a4      	lsls	r4, r4, #2
   12d64:	23fe      	movs	r3, #254	; 0xfe
   12d66:	005b      	lsls	r3, r3, #1
   12d68:	401c      	ands	r4, r3
   12d6a:	0022      	movs	r2, r4
   12d6c:	3230      	adds	r2, #48	; 0x30
   12d6e:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12d70:	78d3      	ldrb	r3, [r2, #3]
   12d72:	193c      	adds	r4, r7, r4
   12d74:	3430      	adds	r4, #48	; 0x30
   12d76:	091b      	lsrs	r3, r3, #4
   12d78:	071b      	lsls	r3, r3, #28
   12d7a:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   12d7c:	7026      	strb	r6, [r4, #0]
   12d7e:	0a33      	lsrs	r3, r6, #8
   12d80:	7053      	strb	r3, [r2, #1]
   12d82:	0c33      	lsrs	r3, r6, #16
   12d84:	7093      	strb	r3, [r2, #2]
   12d86:	0e36      	lsrs	r6, r6, #24
   12d88:	70d6      	strb	r6, [r2, #3]
			break;
   12d8a:	e781      	b.n	12c90 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12d8c:	0005      	movs	r5, r0
   12d8e:	e77f      	b.n	12c90 <put_fat+0x30>
   12d90:	0005      	movs	r5, r0
   12d92:	e77d      	b.n	12c90 <put_fat+0x30>
   12d94:	00012a1d 	.word	0x00012a1d

00012d98 <create_chain>:
{
   12d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d9a:	46c6      	mov	lr, r8
   12d9c:	b500      	push	{lr}
   12d9e:	0005      	movs	r5, r0
   12da0:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   12da2:	2900      	cmp	r1, #0
   12da4:	d107      	bne.n	12db6 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   12da6:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12da8:	2e00      	cmp	r6, #0
   12daa:	d00d      	beq.n	12dc8 <create_chain+0x30>
   12dac:	6983      	ldr	r3, [r0, #24]
   12dae:	429e      	cmp	r6, r3
   12db0:	d30b      	bcc.n	12dca <create_chain+0x32>
   12db2:	2601      	movs	r6, #1
   12db4:	e009      	b.n	12dca <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   12db6:	4b26      	ldr	r3, [pc, #152]	; (12e50 <create_chain+0xb8>)
   12db8:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12dba:	2801      	cmp	r0, #1
   12dbc:	d93d      	bls.n	12e3a <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12dbe:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   12dc0:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12dc2:	4298      	cmp	r0, r3
   12dc4:	d201      	bcs.n	12dca <create_chain+0x32>
   12dc6:	e03d      	b.n	12e44 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12dc8:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   12dca:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   12dcc:	4f20      	ldr	r7, [pc, #128]	; (12e50 <create_chain+0xb8>)
   12dce:	e00a      	b.n	12de6 <create_chain+0x4e>
   12dd0:	0021      	movs	r1, r4
   12dd2:	0028      	movs	r0, r5
   12dd4:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   12dd6:	2800      	cmp	r0, #0
   12dd8:	d00d      	beq.n	12df6 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12dda:	1c43      	adds	r3, r0, #1
   12ddc:	d032      	beq.n	12e44 <create_chain+0xac>
   12dde:	2801      	cmp	r0, #1
   12de0:	d030      	beq.n	12e44 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12de2:	42b4      	cmp	r4, r6
   12de4:	d02d      	beq.n	12e42 <create_chain+0xaa>
		ncl++;							/* Next cluster */
   12de6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12de8:	69ab      	ldr	r3, [r5, #24]
   12dea:	429c      	cmp	r4, r3
   12dec:	d3f0      	bcc.n	12dd0 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   12dee:	2e01      	cmp	r6, #1
   12df0:	d925      	bls.n	12e3e <create_chain+0xa6>
			ncl = 2;
   12df2:	2402      	movs	r4, #2
   12df4:	e7ec      	b.n	12dd0 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   12df6:	4a17      	ldr	r2, [pc, #92]	; (12e54 <create_chain+0xbc>)
   12df8:	0021      	movs	r1, r4
   12dfa:	0028      	movs	r0, r5
   12dfc:	4b16      	ldr	r3, [pc, #88]	; (12e58 <create_chain+0xc0>)
   12dfe:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   12e00:	2800      	cmp	r0, #0
   12e02:	d113      	bne.n	12e2c <create_chain+0x94>
   12e04:	4643      	mov	r3, r8
   12e06:	2b00      	cmp	r3, #0
   12e08:	d109      	bne.n	12e1e <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   12e0a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   12e0c:	692b      	ldr	r3, [r5, #16]
   12e0e:	1c5a      	adds	r2, r3, #1
   12e10:	d01b      	beq.n	12e4a <create_chain+0xb2>
			fs->free_clust--;
   12e12:	3b01      	subs	r3, #1
   12e14:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   12e16:	2301      	movs	r3, #1
   12e18:	716b      	strb	r3, [r5, #5]
   12e1a:	0020      	movs	r0, r4
   12e1c:	e012      	b.n	12e44 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   12e1e:	0022      	movs	r2, r4
   12e20:	4641      	mov	r1, r8
   12e22:	0028      	movs	r0, r5
   12e24:	4b0c      	ldr	r3, [pc, #48]	; (12e58 <create_chain+0xc0>)
   12e26:	4798      	blx	r3
	if (res == FR_OK) {
   12e28:	2800      	cmp	r0, #0
   12e2a:	d0ee      	beq.n	12e0a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   12e2c:	3801      	subs	r0, #1
   12e2e:	4242      	negs	r2, r0
   12e30:	4142      	adcs	r2, r0
   12e32:	4250      	negs	r0, r2
   12e34:	2301      	movs	r3, #1
   12e36:	4318      	orrs	r0, r3
   12e38:	e004      	b.n	12e44 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12e3a:	2001      	movs	r0, #1
   12e3c:	e002      	b.n	12e44 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   12e3e:	2000      	movs	r0, #0
   12e40:	e000      	b.n	12e44 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12e42:	2000      	movs	r0, #0
}
   12e44:	bc04      	pop	{r2}
   12e46:	4690      	mov	r8, r2
   12e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e4a:	0020      	movs	r0, r4
   12e4c:	e7fa      	b.n	12e44 <create_chain+0xac>
   12e4e:	46c0      	nop			; (mov r8, r8)
   12e50:	00012abd 	.word	0x00012abd
   12e54:	0fffffff 	.word	0x0fffffff
   12e58:	00012c61 	.word	0x00012c61

00012e5c <remove_chain>:
{
   12e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e5e:	46ce      	mov	lr, r9
   12e60:	4647      	mov	r7, r8
   12e62:	b580      	push	{r7, lr}
   12e64:	0004      	movs	r4, r0
   12e66:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   12e68:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12e6a:	2901      	cmp	r1, #1
   12e6c:	d902      	bls.n	12e74 <remove_chain+0x18>
   12e6e:	69a3      	ldr	r3, [r4, #24]
   12e70:	4299      	cmp	r1, r3
   12e72:	d303      	bcc.n	12e7c <remove_chain+0x20>
}
   12e74:	bc0c      	pop	{r2, r3}
   12e76:	4690      	mov	r8, r2
   12e78:	4699      	mov	r9, r3
   12e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12e7c:	4f13      	ldr	r7, [pc, #76]	; (12ecc <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12e7e:	4b14      	ldr	r3, [pc, #80]	; (12ed0 <remove_chain+0x74>)
   12e80:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   12e82:	2301      	movs	r3, #1
   12e84:	4699      	mov	r9, r3
   12e86:	e003      	b.n	12e90 <remove_chain+0x34>
   12e88:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12e8a:	69a3      	ldr	r3, [r4, #24]
   12e8c:	42b3      	cmp	r3, r6
   12e8e:	d9f1      	bls.n	12e74 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12e90:	0029      	movs	r1, r5
   12e92:	0020      	movs	r0, r4
   12e94:	47b8      	blx	r7
   12e96:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12e98:	d011      	beq.n	12ebe <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12e9a:	2801      	cmp	r0, #1
   12e9c:	d011      	beq.n	12ec2 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12e9e:	1c43      	adds	r3, r0, #1
   12ea0:	d011      	beq.n	12ec6 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12ea2:	2200      	movs	r2, #0
   12ea4:	0029      	movs	r1, r5
   12ea6:	0020      	movs	r0, r4
   12ea8:	47c0      	blx	r8
			if (res != FR_OK) break;
   12eaa:	2800      	cmp	r0, #0
   12eac:	d1e2      	bne.n	12e74 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12eae:	6923      	ldr	r3, [r4, #16]
   12eb0:	1c5a      	adds	r2, r3, #1
   12eb2:	d0e9      	beq.n	12e88 <remove_chain+0x2c>
				fs->free_clust++;
   12eb4:	3301      	adds	r3, #1
   12eb6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12eb8:	464b      	mov	r3, r9
   12eba:	7163      	strb	r3, [r4, #5]
   12ebc:	e7e4      	b.n	12e88 <remove_chain+0x2c>
   12ebe:	2000      	movs	r0, #0
   12ec0:	e7d8      	b.n	12e74 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12ec2:	2002      	movs	r0, #2
   12ec4:	e7d6      	b.n	12e74 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12ec6:	2001      	movs	r0, #1
   12ec8:	e7d4      	b.n	12e74 <remove_chain+0x18>
   12eca:	46c0      	nop			; (mov r8, r8)
   12ecc:	00012abd 	.word	0x00012abd
   12ed0:	00012c61 	.word	0x00012c61

00012ed4 <dir_next>:
{
   12ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ed6:	46d6      	mov	lr, sl
   12ed8:	4647      	mov	r7, r8
   12eda:	b580      	push	{r7, lr}
   12edc:	0006      	movs	r6, r0
   12ede:	000d      	movs	r5, r1
	i = dj->index + 1;
   12ee0:	88c4      	ldrh	r4, [r0, #6]
   12ee2:	3401      	adds	r4, #1
   12ee4:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   12ee6:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12ee8:	2c00      	cmp	r4, #0
   12eea:	d103      	bne.n	12ef4 <dir_next+0x20>
}
   12eec:	bc0c      	pop	{r2, r3}
   12eee:	4690      	mov	r8, r2
   12ef0:	469a      	mov	sl, r3
   12ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12ef4:	6933      	ldr	r3, [r6, #16]
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	d0f8      	beq.n	12eec <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   12efa:	270f      	movs	r7, #15
   12efc:	4027      	ands	r7, r4
   12efe:	d10f      	bne.n	12f20 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   12f00:	3301      	adds	r3, #1
   12f02:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   12f04:	68f1      	ldr	r1, [r6, #12]
   12f06:	2900      	cmp	r1, #0
   12f08:	d104      	bne.n	12f14 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12f0a:	6833      	ldr	r3, [r6, #0]
   12f0c:	891b      	ldrh	r3, [r3, #8]
   12f0e:	42a3      	cmp	r3, r4
   12f10:	d9ec      	bls.n	12eec <dir_next+0x18>
   12f12:	e005      	b.n	12f20 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   12f14:	6830      	ldr	r0, [r6, #0]
   12f16:	7883      	ldrb	r3, [r0, #2]
   12f18:	3b01      	subs	r3, #1
   12f1a:	0922      	lsrs	r2, r4, #4
   12f1c:	421a      	tst	r2, r3
   12f1e:	d007      	beq.n	12f30 <dir_next+0x5c>
	dj->index = i;
   12f20:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12f22:	6833      	ldr	r3, [r6, #0]
   12f24:	3330      	adds	r3, #48	; 0x30
   12f26:	017f      	lsls	r7, r7, #5
   12f28:	19df      	adds	r7, r3, r7
   12f2a:	6177      	str	r7, [r6, #20]
	return FR_OK;
   12f2c:	2000      	movs	r0, #0
   12f2e:	e7dd      	b.n	12eec <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   12f30:	4b2c      	ldr	r3, [pc, #176]	; (12fe4 <dir_next+0x110>)
   12f32:	4798      	blx	r3
   12f34:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12f36:	2002      	movs	r0, #2
   12f38:	4643      	mov	r3, r8
   12f3a:	2b01      	cmp	r3, #1
   12f3c:	d9d6      	bls.n	12eec <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12f3e:	3301      	adds	r3, #1
   12f40:	d04b      	beq.n	12fda <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12f42:	6833      	ldr	r3, [r6, #0]
   12f44:	699a      	ldr	r2, [r3, #24]
   12f46:	4590      	cmp	r8, r2
   12f48:	d33f      	bcc.n	12fca <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   12f4a:	3002      	adds	r0, #2
   12f4c:	2d00      	cmp	r5, #0
   12f4e:	d0cd      	beq.n	12eec <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   12f50:	68f1      	ldr	r1, [r6, #12]
   12f52:	0018      	movs	r0, r3
   12f54:	4b24      	ldr	r3, [pc, #144]	; (12fe8 <dir_next+0x114>)
   12f56:	4798      	blx	r3
   12f58:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   12f5a:	2007      	movs	r0, #7
   12f5c:	4643      	mov	r3, r8
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d0c4      	beq.n	12eec <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   12f62:	3805      	subs	r0, #5
   12f64:	2b01      	cmp	r3, #1
   12f66:	d0c1      	beq.n	12eec <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12f68:	3801      	subs	r0, #1
   12f6a:	3301      	adds	r3, #1
   12f6c:	d0be      	beq.n	12eec <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   12f6e:	2100      	movs	r1, #0
   12f70:	6830      	ldr	r0, [r6, #0]
   12f72:	4b1e      	ldr	r3, [pc, #120]	; (12fec <dir_next+0x118>)
   12f74:	4798      	blx	r3
   12f76:	0003      	movs	r3, r0
   12f78:	2001      	movs	r0, #1
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d1b6      	bne.n	12eec <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   12f7e:	6830      	ldr	r0, [r6, #0]
   12f80:	3030      	adds	r0, #48	; 0x30
   12f82:	2280      	movs	r2, #128	; 0x80
   12f84:	0092      	lsls	r2, r2, #2
   12f86:	2100      	movs	r1, #0
   12f88:	4b19      	ldr	r3, [pc, #100]	; (12ff0 <dir_next+0x11c>)
   12f8a:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12f8c:	6835      	ldr	r5, [r6, #0]
   12f8e:	4641      	mov	r1, r8
   12f90:	0028      	movs	r0, r5
   12f92:	4b18      	ldr	r3, [pc, #96]	; (12ff4 <dir_next+0x120>)
   12f94:	4798      	blx	r3
   12f96:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12f98:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12f9a:	2301      	movs	r3, #1
   12f9c:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12f9e:	6833      	ldr	r3, [r6, #0]
   12fa0:	789a      	ldrb	r2, [r3, #2]
   12fa2:	42aa      	cmp	r2, r5
   12fa4:	d90e      	bls.n	12fc4 <dir_next+0xf0>
						dj->fs->wflag = 1;
   12fa6:	4652      	mov	r2, sl
   12fa8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12faa:	2100      	movs	r1, #0
   12fac:	6830      	ldr	r0, [r6, #0]
   12fae:	4b0f      	ldr	r3, [pc, #60]	; (12fec <dir_next+0x118>)
   12fb0:	4798      	blx	r3
   12fb2:	2800      	cmp	r0, #0
   12fb4:	d113      	bne.n	12fde <dir_next+0x10a>
						dj->fs->winsect++;
   12fb6:	6832      	ldr	r2, [r6, #0]
   12fb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12fba:	3301      	adds	r3, #1
   12fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12fbe:	3501      	adds	r5, #1
   12fc0:	b2ed      	uxtb	r5, r5
   12fc2:	e7ec      	b.n	12f9e <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   12fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12fc6:	1b52      	subs	r2, r2, r5
   12fc8:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12fca:	4643      	mov	r3, r8
   12fcc:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12fce:	4641      	mov	r1, r8
   12fd0:	6830      	ldr	r0, [r6, #0]
   12fd2:	4b08      	ldr	r3, [pc, #32]	; (12ff4 <dir_next+0x120>)
   12fd4:	4798      	blx	r3
   12fd6:	6130      	str	r0, [r6, #16]
   12fd8:	e7a2      	b.n	12f20 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12fda:	2001      	movs	r0, #1
   12fdc:	e786      	b.n	12eec <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12fde:	2001      	movs	r0, #1
   12fe0:	e784      	b.n	12eec <dir_next+0x18>
   12fe2:	46c0      	nop			; (mov r8, r8)
   12fe4:	00012abd 	.word	0x00012abd
   12fe8:	00012d99 	.word	0x00012d99
   12fec:	00012a1d 	.word	0x00012a1d
   12ff0:	00012551 	.word	0x00012551
   12ff4:	00012563 	.word	0x00012563

00012ff8 <dir_find>:
{
   12ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ffa:	46de      	mov	lr, fp
   12ffc:	4657      	mov	r7, sl
   12ffe:	464e      	mov	r6, r9
   13000:	4645      	mov	r5, r8
   13002:	b5e0      	push	{r5, r6, r7, lr}
   13004:	b083      	sub	sp, #12
   13006:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   13008:	2100      	movs	r1, #0
   1300a:	4b5a      	ldr	r3, [pc, #360]	; (13174 <dir_find+0x17c>)
   1300c:	4798      	blx	r3
   1300e:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   13010:	d000      	beq.n	13014 <dir_find+0x1c>
   13012:	e09e      	b.n	13152 <dir_find+0x15a>
   13014:	23ff      	movs	r3, #255	; 0xff
   13016:	4699      	mov	r9, r3
   13018:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   1301a:	4b57      	ldr	r3, [pc, #348]	; (13178 <dir_find+0x180>)
   1301c:	469b      	mov	fp, r3
   1301e:	e01b      	b.n	13058 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   13020:	2b0f      	cmp	r3, #15
   13022:	d030      	beq.n	13086 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   13024:	4653      	mov	r3, sl
   13026:	2b00      	cmp	r3, #0
   13028:	d105      	bne.n	13036 <dir_find+0x3e>
   1302a:	0020      	movs	r0, r4
   1302c:	4b53      	ldr	r3, [pc, #332]	; (1317c <dir_find+0x184>)
   1302e:	4798      	blx	r3
   13030:	4581      	cmp	r9, r0
   13032:	d100      	bne.n	13036 <dir_find+0x3e>
   13034:	e08d      	b.n	13152 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   13036:	2301      	movs	r3, #1
   13038:	425b      	negs	r3, r3
   1303a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   1303c:	69a8      	ldr	r0, [r5, #24]
   1303e:	7ac3      	ldrb	r3, [r0, #11]
   13040:	07db      	lsls	r3, r3, #31
   13042:	d400      	bmi.n	13046 <dir_find+0x4e>
   13044:	e07d      	b.n	13142 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   13046:	23ff      	movs	r3, #255	; 0xff
   13048:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   1304a:	2100      	movs	r1, #0
   1304c:	0028      	movs	r0, r5
   1304e:	4b4c      	ldr	r3, [pc, #304]	; (13180 <dir_find+0x188>)
   13050:	4798      	blx	r3
   13052:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   13054:	d000      	beq.n	13058 <dir_find+0x60>
   13056:	e07c      	b.n	13152 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   13058:	6929      	ldr	r1, [r5, #16]
   1305a:	6828      	ldr	r0, [r5, #0]
   1305c:	47d8      	blx	fp
   1305e:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   13060:	d177      	bne.n	13152 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   13062:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   13064:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   13066:	2e00      	cmp	r6, #0
   13068:	d100      	bne.n	1306c <dir_find+0x74>
   1306a:	e080      	b.n	1316e <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   1306c:	7ae2      	ldrb	r2, [r4, #11]
   1306e:	233f      	movs	r3, #63	; 0x3f
   13070:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   13072:	2ee5      	cmp	r6, #229	; 0xe5
   13074:	d100      	bne.n	13078 <dir_find+0x80>
   13076:	e077      	b.n	13168 <dir_find+0x170>
   13078:	0712      	lsls	r2, r2, #28
   1307a:	d5d1      	bpl.n	13020 <dir_find+0x28>
   1307c:	2b0f      	cmp	r3, #15
   1307e:	d002      	beq.n	13086 <dir_find+0x8e>
			ord = 0xFF;
   13080:	23ff      	movs	r3, #255	; 0xff
   13082:	469a      	mov	sl, r3
   13084:	e7e1      	b.n	1304a <dir_find+0x52>
				if (dj->lfn) {
   13086:	69ef      	ldr	r7, [r5, #28]
   13088:	2f00      	cmp	r7, #0
   1308a:	d0de      	beq.n	1304a <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   1308c:	0673      	lsls	r3, r6, #25
   1308e:	d518      	bpl.n	130c2 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   13090:	7b63      	ldrb	r3, [r4, #13]
   13092:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   13094:	2340      	movs	r3, #64	; 0x40
   13096:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   13098:	88eb      	ldrh	r3, [r5, #6]
   1309a:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1309c:	7b63      	ldrb	r3, [r4, #13]
   1309e:	9300      	str	r3, [sp, #0]
   130a0:	22ff      	movs	r2, #255	; 0xff
   130a2:	4692      	mov	sl, r2
   130a4:	454b      	cmp	r3, r9
   130a6:	d1d0      	bne.n	1304a <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   130a8:	7823      	ldrb	r3, [r4, #0]
   130aa:	3abf      	subs	r2, #191	; 0xbf
   130ac:	4393      	bics	r3, r2
   130ae:	3b01      	subs	r3, #1
   130b0:	005a      	lsls	r2, r3, #1
   130b2:	18d2      	adds	r2, r2, r3
   130b4:	0092      	lsls	r2, r2, #2
   130b6:	4692      	mov	sl, r2
   130b8:	449a      	add	sl, r3
	s = 0; wc = 1;
   130ba:	2201      	movs	r2, #1
   130bc:	2300      	movs	r3, #0
   130be:	4699      	mov	r9, r3
   130c0:	e01d      	b.n	130fe <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   130c2:	45b2      	cmp	sl, r6
   130c4:	d0ea      	beq.n	1309c <dir_find+0xa4>
   130c6:	23ff      	movs	r3, #255	; 0xff
   130c8:	469a      	mov	sl, r3
   130ca:	e7be      	b.n	1304a <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   130cc:	4b2d      	ldr	r3, [pc, #180]	; (13184 <dir_find+0x18c>)
   130ce:	4798      	blx	r3
   130d0:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   130d2:	4653      	mov	r3, sl
   130d4:	2bfe      	cmp	r3, #254	; 0xfe
   130d6:	d81f      	bhi.n	13118 <dir_find+0x120>
   130d8:	2301      	movs	r3, #1
   130da:	4453      	add	r3, sl
   130dc:	4698      	mov	r8, r3
   130de:	4653      	mov	r3, sl
   130e0:	005b      	lsls	r3, r3, #1
   130e2:	5bd8      	ldrh	r0, [r3, r7]
   130e4:	4b27      	ldr	r3, [pc, #156]	; (13184 <dir_find+0x18c>)
   130e6:	4798      	blx	r3
   130e8:	0002      	movs	r2, r0
   130ea:	9b01      	ldr	r3, [sp, #4]
   130ec:	4283      	cmp	r3, r0
   130ee:	d113      	bne.n	13118 <dir_find+0x120>
   130f0:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   130f2:	2301      	movs	r3, #1
   130f4:	469c      	mov	ip, r3
   130f6:	44e1      	add	r9, ip
   130f8:	464b      	mov	r3, r9
   130fa:	2b0d      	cmp	r3, #13
   130fc:	d011      	beq.n	13122 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   130fe:	4b22      	ldr	r3, [pc, #136]	; (13188 <dir_find+0x190>)
   13100:	4649      	mov	r1, r9
   13102:	5cc9      	ldrb	r1, [r1, r3]
   13104:	1863      	adds	r3, r4, r1
   13106:	785b      	ldrb	r3, [r3, #1]
   13108:	021b      	lsls	r3, r3, #8
   1310a:	5c60      	ldrb	r0, [r4, r1]
   1310c:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   1310e:	2a00      	cmp	r2, #0
   13110:	d1dc      	bne.n	130cc <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   13112:	4b1e      	ldr	r3, [pc, #120]	; (1318c <dir_find+0x194>)
   13114:	4298      	cmp	r0, r3
   13116:	d0ec      	beq.n	130f2 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   13118:	9b00      	ldr	r3, [sp, #0]
   1311a:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1311c:	23ff      	movs	r3, #255	; 0xff
   1311e:	469a      	mov	sl, r3
   13120:	e793      	b.n	1304a <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   13122:	7823      	ldrb	r3, [r4, #0]
   13124:	065b      	lsls	r3, r3, #25
   13126:	d506      	bpl.n	13136 <dir_find+0x13e>
   13128:	2a00      	cmp	r2, #0
   1312a:	d004      	beq.n	13136 <dir_find+0x13e>
   1312c:	4653      	mov	r3, sl
   1312e:	005b      	lsls	r3, r3, #1
   13130:	5bdb      	ldrh	r3, [r3, r7]
   13132:	2b00      	cmp	r3, #0
   13134:	d1f0      	bne.n	13118 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   13136:	3e01      	subs	r6, #1
   13138:	b2f3      	uxtb	r3, r6
   1313a:	469a      	mov	sl, r3
   1313c:	9b00      	ldr	r3, [sp, #0]
   1313e:	4699      	mov	r9, r3
   13140:	e783      	b.n	1304a <dir_find+0x52>
   13142:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   13144:	5ce1      	ldrb	r1, [r4, r3]
   13146:	5cc2      	ldrb	r2, [r0, r3]
   13148:	4291      	cmp	r1, r2
   1314a:	d10a      	bne.n	13162 <dir_find+0x16a>
   1314c:	3301      	adds	r3, #1
   1314e:	2b0b      	cmp	r3, #11
   13150:	d1f8      	bne.n	13144 <dir_find+0x14c>
}
   13152:	0038      	movs	r0, r7
   13154:	b003      	add	sp, #12
   13156:	bc3c      	pop	{r2, r3, r4, r5}
   13158:	4690      	mov	r8, r2
   1315a:	4699      	mov	r9, r3
   1315c:	46a2      	mov	sl, r4
   1315e:	46ab      	mov	fp, r5
   13160:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   13162:	23ff      	movs	r3, #255	; 0xff
   13164:	469a      	mov	sl, r3
   13166:	e770      	b.n	1304a <dir_find+0x52>
			ord = 0xFF;
   13168:	23ff      	movs	r3, #255	; 0xff
   1316a:	469a      	mov	sl, r3
   1316c:	e76d      	b.n	1304a <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1316e:	2704      	movs	r7, #4
   13170:	e7ef      	b.n	13152 <dir_find+0x15a>
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00012bb9 	.word	0x00012bb9
   13178:	00012a1d 	.word	0x00012a1d
   1317c:	0001257b 	.word	0x0001257b
   13180:	00012ed5 	.word	0x00012ed5
   13184:	00013f3d 	.word	0x00013f3d
   13188:	0001a850 	.word	0x0001a850
   1318c:	0000ffff 	.word	0x0000ffff

00013190 <dir_register>:
{
   13190:	b5f0      	push	{r4, r5, r6, r7, lr}
   13192:	46de      	mov	lr, fp
   13194:	4657      	mov	r7, sl
   13196:	464e      	mov	r6, r9
   13198:	4645      	mov	r5, r8
   1319a:	b5e0      	push	{r5, r6, r7, lr}
   1319c:	b089      	sub	sp, #36	; 0x24
   1319e:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   131a0:	6987      	ldr	r7, [r0, #24]
   131a2:	69c3      	ldr	r3, [r0, #28]
   131a4:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   131a6:	ad05      	add	r5, sp, #20
   131a8:	220c      	movs	r2, #12
   131aa:	0039      	movs	r1, r7
   131ac:	0028      	movs	r0, r5
   131ae:	4ba7      	ldr	r3, [pc, #668]	; (1344c <dir_register+0x2bc>)
   131b0:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   131b2:	7aeb      	ldrb	r3, [r5, #11]
   131b4:	07db      	lsls	r3, r3, #31
   131b6:	d400      	bmi.n	131ba <dir_register+0x2a>
   131b8:	e070      	b.n	1329c <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   131ba:	2300      	movs	r3, #0
   131bc:	72fb      	strb	r3, [r7, #11]
   131be:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   131c0:	220b      	movs	r2, #11
   131c2:	a905      	add	r1, sp, #20
   131c4:	0038      	movs	r0, r7
   131c6:	4ba1      	ldr	r3, [pc, #644]	; (1344c <dir_register+0x2bc>)
   131c8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   131ca:	2301      	movs	r3, #1
		ns[i--] = c;
   131cc:	ad03      	add	r5, sp, #12
   131ce:	001e      	movs	r6, r3
   131d0:	46a0      	mov	r8, r4
   131d2:	e049      	b.n	13268 <dir_register+0xd8>
   131d4:	3801      	subs	r0, #1
   131d6:	1829      	adds	r1, r5, r0
   131d8:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   131da:	091b      	lsrs	r3, r3, #4
   131dc:	b29b      	uxth	r3, r3
	} while (seq);
   131de:	2b00      	cmp	r3, #0
   131e0:	d007      	beq.n	131f2 <dir_register+0x62>
		c = (seq % 16) + '0';
   131e2:	0021      	movs	r1, r4
   131e4:	4019      	ands	r1, r3
   131e6:	000a      	movs	r2, r1
   131e8:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   131ea:	2a39      	cmp	r2, #57	; 0x39
   131ec:	d9f2      	bls.n	131d4 <dir_register+0x44>
   131ee:	3207      	adds	r2, #7
   131f0:	e7f0      	b.n	131d4 <dir_register+0x44>
	ns[i] = '~';
   131f2:	337e      	adds	r3, #126	; 0x7e
   131f4:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   131f6:	2800      	cmp	r0, #0
   131f8:	d00a      	beq.n	13210 <dir_register+0x80>
   131fa:	783b      	ldrb	r3, [r7, #0]
   131fc:	2b20      	cmp	r3, #32
   131fe:	d009      	beq.n	13214 <dir_register+0x84>
   13200:	2300      	movs	r3, #0
   13202:	3301      	adds	r3, #1
   13204:	4298      	cmp	r0, r3
   13206:	d007      	beq.n	13218 <dir_register+0x88>
   13208:	5cfa      	ldrb	r2, [r7, r3]
   1320a:	2a20      	cmp	r2, #32
   1320c:	d1f9      	bne.n	13202 <dir_register+0x72>
   1320e:	e009      	b.n	13224 <dir_register+0x94>
   13210:	0003      	movs	r3, r0
   13212:	e007      	b.n	13224 <dir_register+0x94>
   13214:	2300      	movs	r3, #0
   13216:	e005      	b.n	13224 <dir_register+0x94>
   13218:	0003      	movs	r3, r0
   1321a:	e003      	b.n	13224 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1321c:	54fa      	strb	r2, [r7, r3]
   1321e:	3301      	adds	r3, #1
	} while (j < 8);
   13220:	2b07      	cmp	r3, #7
   13222:	d805      	bhi.n	13230 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   13224:	2220      	movs	r2, #32
   13226:	2807      	cmp	r0, #7
   13228:	d8f8      	bhi.n	1321c <dir_register+0x8c>
   1322a:	5c2a      	ldrb	r2, [r5, r0]
   1322c:	3001      	adds	r0, #1
   1322e:	e7f5      	b.n	1321c <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   13230:	4640      	mov	r0, r8
   13232:	4b87      	ldr	r3, [pc, #540]	; (13450 <dir_register+0x2c0>)
   13234:	4798      	blx	r3
			if (res != FR_OK) break;
   13236:	2800      	cmp	r0, #0
   13238:	d11c      	bne.n	13274 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   1323a:	3601      	adds	r6, #1
   1323c:	b2b6      	uxth	r6, r6
   1323e:	2e64      	cmp	r6, #100	; 0x64
   13240:	d015      	beq.n	1326e <dir_register+0xde>
	mem_cpy(dst, src, 11);
   13242:	220b      	movs	r2, #11
   13244:	a905      	add	r1, sp, #20
   13246:	0038      	movs	r0, r7
   13248:	4b80      	ldr	r3, [pc, #512]	; (1344c <dir_register+0x2bc>)
   1324a:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   1324c:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1324e:	2e05      	cmp	r6, #5
   13250:	d90a      	bls.n	13268 <dir_register+0xd8>
   13252:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   13254:	085a      	lsrs	r2, r3, #1
   13256:	03db      	lsls	r3, r3, #15
   13258:	4313      	orrs	r3, r2
   1325a:	880a      	ldrh	r2, [r1, #0]
   1325c:	189b      	adds	r3, r3, r2
   1325e:	b29b      	uxth	r3, r3
   13260:	3102      	adds	r1, #2
   13262:	880a      	ldrh	r2, [r1, #0]
   13264:	2a00      	cmp	r2, #0
   13266:	d1f5      	bne.n	13254 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   13268:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   1326a:	240f      	movs	r4, #15
   1326c:	e7b9      	b.n	131e2 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1326e:	2307      	movs	r3, #7
   13270:	4698      	mov	r8, r3
   13272:	e006      	b.n	13282 <dir_register+0xf2>
   13274:	4644      	mov	r4, r8
   13276:	4680      	mov	r8, r0
   13278:	2e64      	cmp	r6, #100	; 0x64
   1327a:	d100      	bne.n	1327e <dir_register+0xee>
   1327c:	e0a5      	b.n	133ca <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1327e:	2804      	cmp	r0, #4
   13280:	d007      	beq.n	13292 <dir_register+0x102>
}
   13282:	4640      	mov	r0, r8
   13284:	b009      	add	sp, #36	; 0x24
   13286:	bc3c      	pop	{r2, r3, r4, r5}
   13288:	4690      	mov	r8, r2
   1328a:	4699      	mov	r9, r3
   1328c:	46a2      	mov	sl, r4
   1328e:	46ab      	mov	fp, r5
   13290:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   13292:	ab05      	add	r3, sp, #20
   13294:	7adb      	ldrb	r3, [r3, #11]
   13296:	72fb      	strb	r3, [r7, #11]
   13298:	4653      	mov	r3, sl
   1329a:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1329c:	ab05      	add	r3, sp, #20
   1329e:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   132a0:	2201      	movs	r2, #1
   132a2:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   132a4:	079b      	lsls	r3, r3, #30
   132a6:	d511      	bpl.n	132cc <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   132a8:	4653      	mov	r3, sl
   132aa:	881b      	ldrh	r3, [r3, #0]
   132ac:	2b00      	cmp	r3, #0
   132ae:	d01b      	beq.n	132e8 <dir_register+0x158>
   132b0:	2000      	movs	r0, #0
   132b2:	4652      	mov	r2, sl
   132b4:	3001      	adds	r0, #1
   132b6:	b280      	uxth	r0, r0
   132b8:	0043      	lsls	r3, r0, #1
   132ba:	5a9b      	ldrh	r3, [r3, r2]
   132bc:	2b00      	cmp	r3, #0
   132be:	d1f9      	bne.n	132b4 <dir_register+0x124>
		ne = (ne + 25) / 13;
   132c0:	3019      	adds	r0, #25
   132c2:	210d      	movs	r1, #13
   132c4:	4b63      	ldr	r3, [pc, #396]	; (13454 <dir_register+0x2c4>)
   132c6:	4798      	blx	r3
   132c8:	b283      	uxth	r3, r0
   132ca:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   132cc:	2100      	movs	r1, #0
   132ce:	0020      	movs	r0, r4
   132d0:	4b61      	ldr	r3, [pc, #388]	; (13458 <dir_register+0x2c8>)
   132d2:	4798      	blx	r3
   132d4:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   132d6:	2800      	cmp	r0, #0
   132d8:	d1d3      	bne.n	13282 <dir_register+0xf2>
   132da:	4682      	mov	sl, r0
   132dc:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   132de:	4f5f      	ldr	r7, [pc, #380]	; (1345c <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   132e0:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   132e2:	4b5f      	ldr	r3, [pc, #380]	; (13460 <dir_register+0x2d0>)
   132e4:	4699      	mov	r9, r3
   132e6:	e00b      	b.n	13300 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   132e8:	2000      	movs	r0, #0
   132ea:	e7e9      	b.n	132c0 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   132ec:	1c6b      	adds	r3, r5, #1
   132ee:	b29b      	uxth	r3, r3
   132f0:	459b      	cmp	fp, r3
   132f2:	d06d      	beq.n	133d0 <dir_register+0x240>
   132f4:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   132f6:	2101      	movs	r1, #1
   132f8:	0020      	movs	r0, r4
   132fa:	47c8      	blx	r9
	} while (res == FR_OK);
   132fc:	2800      	cmp	r0, #0
   132fe:	d112      	bne.n	13326 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   13300:	6921      	ldr	r1, [r4, #16]
   13302:	6820      	ldr	r0, [r4, #0]
   13304:	47b8      	blx	r7
		if (res != FR_OK) break;
   13306:	2800      	cmp	r0, #0
   13308:	d000      	beq.n	1330c <dir_register+0x17c>
   1330a:	e098      	b.n	1343e <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   1330c:	6963      	ldr	r3, [r4, #20]
   1330e:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   13310:	2be5      	cmp	r3, #229	; 0xe5
   13312:	d001      	beq.n	13318 <dir_register+0x188>
   13314:	2b00      	cmp	r3, #0
   13316:	d104      	bne.n	13322 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   13318:	2d00      	cmp	r5, #0
   1331a:	d1e7      	bne.n	132ec <dir_register+0x15c>
   1331c:	88e3      	ldrh	r3, [r4, #6]
   1331e:	469a      	mov	sl, r3
   13320:	e7e4      	b.n	132ec <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   13322:	0035      	movs	r5, r6
   13324:	e7e7      	b.n	132f6 <dir_register+0x166>
   13326:	4680      	mov	r8, r0
   13328:	e7ab      	b.n	13282 <dir_register+0xf2>
		res = dir_sdi(dj, is);
   1332a:	4651      	mov	r1, sl
   1332c:	0020      	movs	r0, r4
   1332e:	4b4a      	ldr	r3, [pc, #296]	; (13458 <dir_register+0x2c8>)
   13330:	4798      	blx	r3
   13332:	4680      	mov	r8, r0
		if (res == FR_OK) {
   13334:	2800      	cmp	r0, #0
   13336:	d1a4      	bne.n	13282 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   13338:	69a0      	ldr	r0, [r4, #24]
   1333a:	4b4a      	ldr	r3, [pc, #296]	; (13464 <dir_register+0x2d4>)
   1333c:	4798      	blx	r3
   1333e:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   13340:	46a8      	mov	r8, r5
   13342:	e01f      	b.n	13384 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   13344:	0022      	movs	r2, r4
   13346:	e067      	b.n	13418 <dir_register+0x288>
   13348:	465e      	mov	r6, fp
   1334a:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   1334c:	4946      	ldr	r1, [pc, #280]	; (13468 <dir_register+0x2d8>)
   1334e:	428b      	cmp	r3, r1
   13350:	d003      	beq.n	1335a <dir_register+0x1ca>
   13352:	0052      	lsls	r2, r2, #1
   13354:	5b93      	ldrh	r3, [r2, r6]
   13356:	2b00      	cmp	r3, #0
   13358:	d103      	bne.n	13362 <dir_register+0x1d2>
   1335a:	2340      	movs	r3, #64	; 0x40
   1335c:	464a      	mov	r2, r9
   1335e:	431a      	orrs	r2, r3
   13360:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   13362:	464b      	mov	r3, r9
   13364:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   13366:	2301      	movs	r3, #1
   13368:	6822      	ldr	r2, [r4, #0]
   1336a:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   1336c:	2100      	movs	r1, #0
   1336e:	0020      	movs	r0, r4
   13370:	4b3b      	ldr	r3, [pc, #236]	; (13460 <dir_register+0x2d0>)
   13372:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   13374:	2800      	cmp	r0, #0
   13376:	d166      	bne.n	13446 <dir_register+0x2b6>
   13378:	4645      	mov	r5, r8
   1337a:	3d01      	subs	r5, #1
   1337c:	b2ab      	uxth	r3, r5
   1337e:	4698      	mov	r8, r3
   13380:	2b00      	cmp	r3, #0
   13382:	d027      	beq.n	133d4 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   13384:	6921      	ldr	r1, [r4, #16]
   13386:	6820      	ldr	r0, [r4, #0]
   13388:	4b34      	ldr	r3, [pc, #208]	; (1345c <dir_register+0x2cc>)
   1338a:	4798      	blx	r3
				if (res != FR_OK) break;
   1338c:	2800      	cmp	r0, #0
   1338e:	d158      	bne.n	13442 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   13390:	69e6      	ldr	r6, [r4, #28]
   13392:	6960      	ldr	r0, [r4, #20]
   13394:	4643      	mov	r3, r8
   13396:	466a      	mov	r2, sp
   13398:	70d3      	strb	r3, [r2, #3]
   1339a:	78d3      	ldrb	r3, [r2, #3]
   1339c:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   1339e:	7913      	ldrb	r3, [r2, #4]
   133a0:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   133a2:	230f      	movs	r3, #15
   133a4:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   133a6:	2300      	movs	r3, #0
   133a8:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   133aa:	7683      	strb	r3, [r0, #26]
   133ac:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   133ae:	464b      	mov	r3, r9
   133b0:	3b01      	subs	r3, #1
   133b2:	005a      	lsls	r2, r3, #1
   133b4:	18d2      	adds	r2, r2, r3
   133b6:	0092      	lsls	r2, r2, #2
   133b8:	18d2      	adds	r2, r2, r3
   133ba:	492c      	ldr	r1, [pc, #176]	; (1346c <dir_register+0x2dc>)
   133bc:	000d      	movs	r5, r1
   133be:	350d      	adds	r5, #13
	s = wc = 0;
   133c0:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   133c2:	4f29      	ldr	r7, [pc, #164]	; (13468 <dir_register+0x2d8>)
   133c4:	46b3      	mov	fp, r6
   133c6:	46a4      	mov	ip, r4
   133c8:	e029      	b.n	1341e <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   133ca:	2307      	movs	r3, #7
   133cc:	4698      	mov	r8, r3
   133ce:	e758      	b.n	13282 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   133d0:	2b01      	cmp	r3, #1
   133d2:	d8aa      	bhi.n	1332a <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   133d4:	6921      	ldr	r1, [r4, #16]
   133d6:	6820      	ldr	r0, [r4, #0]
   133d8:	4b20      	ldr	r3, [pc, #128]	; (1345c <dir_register+0x2cc>)
   133da:	4798      	blx	r3
   133dc:	4680      	mov	r8, r0
		if (res == FR_OK) {
   133de:	2800      	cmp	r0, #0
   133e0:	d000      	beq.n	133e4 <dir_register+0x254>
   133e2:	e74e      	b.n	13282 <dir_register+0xf2>
			dir = dj->dir;
   133e4:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   133e6:	2220      	movs	r2, #32
   133e8:	2100      	movs	r1, #0
   133ea:	0028      	movs	r0, r5
   133ec:	4b20      	ldr	r3, [pc, #128]	; (13470 <dir_register+0x2e0>)
   133ee:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   133f0:	220b      	movs	r2, #11
   133f2:	69a1      	ldr	r1, [r4, #24]
   133f4:	0028      	movs	r0, r5
   133f6:	4b15      	ldr	r3, [pc, #84]	; (1344c <dir_register+0x2bc>)
   133f8:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   133fa:	69a3      	ldr	r3, [r4, #24]
   133fc:	7ada      	ldrb	r2, [r3, #11]
   133fe:	2318      	movs	r3, #24
   13400:	4013      	ands	r3, r2
   13402:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   13404:	6823      	ldr	r3, [r4, #0]
   13406:	2201      	movs	r2, #1
   13408:	711a      	strb	r2, [r3, #4]
   1340a:	e73a      	b.n	13282 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1340c:	780c      	ldrb	r4, [r1, #0]
   1340e:	26ff      	movs	r6, #255	; 0xff
   13410:	5506      	strb	r6, [r0, r4]
   13412:	1904      	adds	r4, r0, r4
   13414:	26ff      	movs	r6, #255	; 0xff
   13416:	7066      	strb	r6, [r4, #1]
   13418:	3101      	adds	r1, #1
	} while (++s < 13);
   1341a:	42a9      	cmp	r1, r5
   1341c:	d094      	beq.n	13348 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1341e:	42bb      	cmp	r3, r7
   13420:	d0f4      	beq.n	1340c <dir_register+0x27c>
   13422:	1c54      	adds	r4, r2, #1
   13424:	0052      	lsls	r2, r2, #1
   13426:	465b      	mov	r3, fp
   13428:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1342a:	780a      	ldrb	r2, [r1, #0]
   1342c:	5483      	strb	r3, [r0, r2]
   1342e:	1882      	adds	r2, r0, r2
   13430:	0a1e      	lsrs	r6, r3, #8
   13432:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   13434:	2b00      	cmp	r3, #0
   13436:	d185      	bne.n	13344 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   13438:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1343a:	003b      	movs	r3, r7
   1343c:	e7ec      	b.n	13418 <dir_register+0x288>
   1343e:	4680      	mov	r8, r0
   13440:	e71f      	b.n	13282 <dir_register+0xf2>
   13442:	4680      	mov	r8, r0
   13444:	e71d      	b.n	13282 <dir_register+0xf2>
   13446:	4680      	mov	r8, r0
   13448:	e71b      	b.n	13282 <dir_register+0xf2>
   1344a:	46c0      	nop			; (mov r8, r8)
   1344c:	0001253d 	.word	0x0001253d
   13450:	00012ff9 	.word	0x00012ff9
   13454:	000176e9 	.word	0x000176e9
   13458:	00012bb9 	.word	0x00012bb9
   1345c:	00012a1d 	.word	0x00012a1d
   13460:	00012ed5 	.word	0x00012ed5
   13464:	0001257b 	.word	0x0001257b
   13468:	0000ffff 	.word	0x0000ffff
   1346c:	0001a850 	.word	0x0001a850
   13470:	00012551 	.word	0x00012551

00013474 <sync>:
{
   13474:	b570      	push	{r4, r5, r6, lr}
   13476:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   13478:	2100      	movs	r1, #0
   1347a:	4b2c      	ldr	r3, [pc, #176]	; (1352c <sync+0xb8>)
   1347c:	4798      	blx	r3
	if (res == FR_OK) {
   1347e:	2800      	cmp	r0, #0
   13480:	d10a      	bne.n	13498 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   13482:	7823      	ldrb	r3, [r4, #0]
   13484:	2b03      	cmp	r3, #3
   13486:	d008      	beq.n	1349a <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   13488:	7860      	ldrb	r0, [r4, #1]
   1348a:	2200      	movs	r2, #0
   1348c:	2100      	movs	r1, #0
   1348e:	4b28      	ldr	r3, [pc, #160]	; (13530 <sync+0xbc>)
   13490:	4798      	blx	r3
   13492:	1e43      	subs	r3, r0, #1
   13494:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   13496:	b2c0      	uxtb	r0, r0
}
   13498:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1349a:	7963      	ldrb	r3, [r4, #5]
   1349c:	2b00      	cmp	r3, #0
   1349e:	d0f3      	beq.n	13488 <sync+0x14>
			fs->winsect = 0;
   134a0:	2600      	movs	r6, #0
   134a2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   134a4:	0025      	movs	r5, r4
   134a6:	3530      	adds	r5, #48	; 0x30
   134a8:	2280      	movs	r2, #128	; 0x80
   134aa:	0092      	lsls	r2, r2, #2
   134ac:	2100      	movs	r1, #0
   134ae:	0028      	movs	r0, r5
   134b0:	4b20      	ldr	r3, [pc, #128]	; (13534 <sync+0xc0>)
   134b2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   134b4:	2255      	movs	r2, #85	; 0x55
   134b6:	4b20      	ldr	r3, [pc, #128]	; (13538 <sync+0xc4>)
   134b8:	54e2      	strb	r2, [r4, r3]
   134ba:	3255      	adds	r2, #85	; 0x55
   134bc:	4b1f      	ldr	r3, [pc, #124]	; (1353c <sync+0xc8>)
   134be:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   134c0:	3bde      	subs	r3, #222	; 0xde
   134c2:	3bff      	subs	r3, #255	; 0xff
   134c4:	3a7a      	subs	r2, #122	; 0x7a
   134c6:	54a3      	strb	r3, [r4, r2]
   134c8:	3201      	adds	r2, #1
   134ca:	54a3      	strb	r3, [r4, r2]
   134cc:	330f      	adds	r3, #15
   134ce:	3201      	adds	r2, #1
   134d0:	54a3      	strb	r3, [r4, r2]
   134d2:	320f      	adds	r2, #15
   134d4:	2133      	movs	r1, #51	; 0x33
   134d6:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   134d8:	313f      	adds	r1, #63	; 0x3f
   134da:	2085      	movs	r0, #133	; 0x85
   134dc:	0080      	lsls	r0, r0, #2
   134de:	5421      	strb	r1, [r4, r0]
   134e0:	4817      	ldr	r0, [pc, #92]	; (13540 <sync+0xcc>)
   134e2:	5421      	strb	r1, [r4, r0]
   134e4:	4917      	ldr	r1, [pc, #92]	; (13544 <sync+0xd0>)
   134e6:	5462      	strb	r2, [r4, r1]
   134e8:	4a17      	ldr	r2, [pc, #92]	; (13548 <sync+0xd4>)
   134ea:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   134ec:	6923      	ldr	r3, [r4, #16]
   134ee:	3201      	adds	r2, #1
   134f0:	54a3      	strb	r3, [r4, r2]
   134f2:	0a19      	lsrs	r1, r3, #8
   134f4:	4a15      	ldr	r2, [pc, #84]	; (1354c <sync+0xd8>)
   134f6:	54a1      	strb	r1, [r4, r2]
   134f8:	0c19      	lsrs	r1, r3, #16
   134fa:	4a15      	ldr	r2, [pc, #84]	; (13550 <sync+0xdc>)
   134fc:	54a1      	strb	r1, [r4, r2]
   134fe:	0e1b      	lsrs	r3, r3, #24
   13500:	4a14      	ldr	r2, [pc, #80]	; (13554 <sync+0xe0>)
   13502:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   13504:	68e3      	ldr	r3, [r4, #12]
   13506:	3201      	adds	r2, #1
   13508:	54a3      	strb	r3, [r4, r2]
   1350a:	0a19      	lsrs	r1, r3, #8
   1350c:	4a12      	ldr	r2, [pc, #72]	; (13558 <sync+0xe4>)
   1350e:	54a1      	strb	r1, [r4, r2]
   13510:	0c19      	lsrs	r1, r3, #16
   13512:	4a12      	ldr	r2, [pc, #72]	; (1355c <sync+0xe8>)
   13514:	54a1      	strb	r1, [r4, r2]
   13516:	0e1b      	lsrs	r3, r3, #24
   13518:	4a11      	ldr	r2, [pc, #68]	; (13560 <sync+0xec>)
   1351a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1351c:	7860      	ldrb	r0, [r4, #1]
   1351e:	2301      	movs	r3, #1
   13520:	6962      	ldr	r2, [r4, #20]
   13522:	0029      	movs	r1, r5
   13524:	4d0f      	ldr	r5, [pc, #60]	; (13564 <sync+0xf0>)
   13526:	47a8      	blx	r5
			fs->fsi_flag = 0;
   13528:	7166      	strb	r6, [r4, #5]
   1352a:	e7ad      	b.n	13488 <sync+0x14>
   1352c:	00012a1d 	.word	0x00012a1d
   13530:	00012481 	.word	0x00012481
   13534:	00012551 	.word	0x00012551
   13538:	0000022e 	.word	0x0000022e
   1353c:	0000022f 	.word	0x0000022f
   13540:	00000215 	.word	0x00000215
   13544:	00000216 	.word	0x00000216
   13548:	00000217 	.word	0x00000217
   1354c:	00000219 	.word	0x00000219
   13550:	0000021a 	.word	0x0000021a
   13554:	0000021b 	.word	0x0000021b
   13558:	0000021d 	.word	0x0000021d
   1355c:	0000021e 	.word	0x0000021e
   13560:	0000021f 	.word	0x0000021f
   13564:	000123fd 	.word	0x000123fd

00013568 <follow_path>:
{
   13568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1356a:	46de      	mov	lr, fp
   1356c:	4657      	mov	r7, sl
   1356e:	464e      	mov	r6, r9
   13570:	4645      	mov	r5, r8
   13572:	b5e0      	push	{r5, r6, r7, lr}
   13574:	b083      	sub	sp, #12
   13576:	4682      	mov	sl, r0
   13578:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1357a:	780b      	ldrb	r3, [r1, #0]
   1357c:	2b2f      	cmp	r3, #47	; 0x2f
   1357e:	d00f      	beq.n	135a0 <follow_path+0x38>
   13580:	2b5c      	cmp	r3, #92	; 0x5c
   13582:	d00d      	beq.n	135a0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   13584:	2300      	movs	r3, #0
   13586:	4652      	mov	r2, sl
   13588:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1358a:	782b      	ldrb	r3, [r5, #0]
   1358c:	4657      	mov	r7, sl
   1358e:	2b1f      	cmp	r3, #31
   13590:	d809      	bhi.n	135a6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   13592:	2100      	movs	r1, #0
   13594:	4650      	mov	r0, sl
   13596:	4bb2      	ldr	r3, [pc, #712]	; (13860 <follow_path+0x2f8>)
   13598:	4798      	blx	r3
		dj->dir = 0;
   1359a:	2300      	movs	r3, #0
   1359c:	617b      	str	r3, [r7, #20]
   1359e:	e13a      	b.n	13816 <follow_path+0x2ae>
		path++;
   135a0:	3501      	adds	r5, #1
   135a2:	e7ef      	b.n	13584 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   135a4:	3501      	adds	r5, #1
   135a6:	7828      	ldrb	r0, [r5, #0]
   135a8:	282f      	cmp	r0, #47	; 0x2f
   135aa:	d0fb      	beq.n	135a4 <follow_path+0x3c>
   135ac:	285c      	cmp	r0, #92	; 0x5c
   135ae:	d0f9      	beq.n	135a4 <follow_path+0x3c>
	lfn = dj->lfn;
   135b0:	69fb      	ldr	r3, [r7, #28]
   135b2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   135b4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   135b6:	281f      	cmp	r0, #31
   135b8:	d800      	bhi.n	135bc <follow_path+0x54>
   135ba:	e13b      	b.n	13834 <follow_path+0x2cc>
   135bc:	282f      	cmp	r0, #47	; 0x2f
   135be:	d100      	bne.n	135c2 <follow_path+0x5a>
   135c0:	e13b      	b.n	1383a <follow_path+0x2d2>
   135c2:	285c      	cmp	r0, #92	; 0x5c
   135c4:	d100      	bne.n	135c8 <follow_path+0x60>
   135c6:	e13b      	b.n	13840 <follow_path+0x2d8>
   135c8:	1c6e      	adds	r6, r5, #1
   135ca:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   135cc:	2380      	movs	r3, #128	; 0x80
   135ce:	005b      	lsls	r3, r3, #1
   135d0:	4698      	mov	r8, r3
   135d2:	46bb      	mov	fp, r7
   135d4:	002b      	movs	r3, r5
   135d6:	0025      	movs	r5, r4
   135d8:	0034      	movs	r4, r6
   135da:	4656      	mov	r6, sl
   135dc:	4699      	mov	r9, r3
   135de:	e011      	b.n	13604 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   135e0:	2b00      	cmp	r3, #0
   135e2:	d135      	bne.n	13650 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   135e4:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   135e6:	1c6b      	adds	r3, r5, #1
   135e8:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   135ea:	281f      	cmp	r0, #31
   135ec:	d91e      	bls.n	1362c <follow_path+0xc4>
   135ee:	282f      	cmp	r0, #47	; 0x2f
   135f0:	d100      	bne.n	135f4 <follow_path+0x8c>
   135f2:	e128      	b.n	13846 <follow_path+0x2de>
   135f4:	285c      	cmp	r0, #92	; 0x5c
   135f6:	d100      	bne.n	135fa <follow_path+0x92>
   135f8:	e142      	b.n	13880 <follow_path+0x318>
   135fa:	3602      	adds	r6, #2
   135fc:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   135fe:	4543      	cmp	r3, r8
   13600:	d026      	beq.n	13650 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   13602:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   13604:	2101      	movs	r1, #1
   13606:	4b97      	ldr	r3, [pc, #604]	; (13864 <follow_path+0x2fc>)
   13608:	4798      	blx	r3
   1360a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1360c:	d020      	beq.n	13650 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1360e:	287f      	cmp	r0, #127	; 0x7f
   13610:	d8e8      	bhi.n	135e4 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   13612:	2822      	cmp	r0, #34	; 0x22
   13614:	d100      	bne.n	13618 <follow_path+0xb0>
   13616:	e0fd      	b.n	13814 <follow_path+0x2ac>
   13618:	232a      	movs	r3, #42	; 0x2a
   1361a:	4a93      	ldr	r2, [pc, #588]	; (13868 <follow_path+0x300>)
   1361c:	b29f      	uxth	r7, r3
   1361e:	428f      	cmp	r7, r1
   13620:	d0de      	beq.n	135e0 <follow_path+0x78>
   13622:	3201      	adds	r2, #1
   13624:	7813      	ldrb	r3, [r2, #0]
   13626:	2b00      	cmp	r3, #0
   13628:	d1f8      	bne.n	1361c <follow_path+0xb4>
   1362a:	e7db      	b.n	135e4 <follow_path+0x7c>
   1362c:	002c      	movs	r4, r5
   1362e:	465f      	mov	r7, fp
   13630:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   13632:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   13634:	2604      	movs	r6, #4
   13636:	e10b      	b.n	13850 <follow_path+0x2e8>
		di--;
   13638:	3c01      	subs	r4, #1
   1363a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   1363c:	2c00      	cmp	r4, #0
   1363e:	d100      	bne.n	13642 <follow_path+0xda>
   13640:	e0e8      	b.n	13814 <follow_path+0x2ac>
		w = lfn[di-1];
   13642:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   13644:	2a20      	cmp	r2, #32
   13646:	d0f7      	beq.n	13638 <follow_path+0xd0>
   13648:	2a2e      	cmp	r2, #46	; 0x2e
   1364a:	d0f5      	beq.n	13638 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1364c:	2c00      	cmp	r4, #0
   1364e:	d101      	bne.n	13654 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13650:	2006      	movs	r0, #6
	return res;
   13652:	e0e0      	b.n	13816 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   13654:	0063      	lsls	r3, r4, #1
   13656:	4698      	mov	r8, r3
   13658:	2300      	movs	r3, #0
   1365a:	4652      	mov	r2, sl
   1365c:	4641      	mov	r1, r8
   1365e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   13660:	220b      	movs	r2, #11
   13662:	2120      	movs	r1, #32
   13664:	69b8      	ldr	r0, [r7, #24]
   13666:	4b81      	ldr	r3, [pc, #516]	; (1386c <follow_path+0x304>)
   13668:	4798      	blx	r3
   1366a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1366c:	2300      	movs	r3, #0
   1366e:	e001      	b.n	13674 <follow_path+0x10c>
   13670:	3301      	adds	r3, #1
   13672:	3202      	adds	r2, #2
   13674:	8811      	ldrh	r1, [r2, #0]
   13676:	2920      	cmp	r1, #32
   13678:	d0fa      	beq.n	13670 <follow_path+0x108>
   1367a:	292e      	cmp	r1, #46	; 0x2e
   1367c:	d0f8      	beq.n	13670 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   1367e:	2b00      	cmp	r3, #0
   13680:	d001      	beq.n	13686 <follow_path+0x11e>
   13682:	2203      	movs	r2, #3
   13684:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   13686:	4652      	mov	r2, sl
   13688:	4442      	add	r2, r8
   1368a:	3a02      	subs	r2, #2
   1368c:	8812      	ldrh	r2, [r2, #0]
   1368e:	2a2e      	cmp	r2, #46	; 0x2e
   13690:	d009      	beq.n	136a6 <follow_path+0x13e>
   13692:	4642      	mov	r2, r8
   13694:	3a04      	subs	r2, #4
   13696:	4452      	add	r2, sl
   13698:	3c01      	subs	r4, #1
   1369a:	2c00      	cmp	r4, #0
   1369c:	d003      	beq.n	136a6 <follow_path+0x13e>
   1369e:	3a02      	subs	r2, #2
   136a0:	8851      	ldrh	r1, [r2, #2]
   136a2:	292e      	cmp	r1, #46	; 0x2e
   136a4:	d1f8      	bne.n	13698 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   136a6:	2208      	movs	r2, #8
   136a8:	9201      	str	r2, [sp, #4]
   136aa:	2200      	movs	r2, #0
   136ac:	4693      	mov	fp, r2
   136ae:	4691      	mov	r9, r2
   136b0:	46a0      	mov	r8, r4
   136b2:	e006      	b.n	136c2 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   136b4:	4544      	cmp	r4, r8
   136b6:	d100      	bne.n	136ba <follow_path+0x152>
   136b8:	e0e6      	b.n	13888 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   136ba:	2303      	movs	r3, #3
   136bc:	431e      	orrs	r6, r3
   136be:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   136c0:	0023      	movs	r3, r4
   136c2:	1c5c      	adds	r4, r3, #1
   136c4:	005b      	lsls	r3, r3, #1
   136c6:	4652      	mov	r2, sl
   136c8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   136ca:	2800      	cmp	r0, #0
   136cc:	d02c      	beq.n	13728 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   136ce:	2820      	cmp	r0, #32
   136d0:	d0f3      	beq.n	136ba <follow_path+0x152>
   136d2:	282e      	cmp	r0, #46	; 0x2e
   136d4:	d0ee      	beq.n	136b4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   136d6:	9b01      	ldr	r3, [sp, #4]
   136d8:	459b      	cmp	fp, r3
   136da:	d219      	bcs.n	13710 <follow_path+0x1a8>
   136dc:	4544      	cmp	r4, r8
   136de:	d100      	bne.n	136e2 <follow_path+0x17a>
   136e0:	e0d2      	b.n	13888 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   136e2:	287f      	cmp	r0, #127	; 0x7f
   136e4:	d85e      	bhi.n	137a4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   136e6:	282b      	cmp	r0, #43	; 0x2b
   136e8:	d06e      	beq.n	137c8 <follow_path+0x260>
   136ea:	232c      	movs	r3, #44	; 0x2c
   136ec:	4a60      	ldr	r2, [pc, #384]	; (13870 <follow_path+0x308>)
   136ee:	b299      	uxth	r1, r3
   136f0:	4281      	cmp	r1, r0
   136f2:	d067      	beq.n	137c4 <follow_path+0x25c>
   136f4:	3201      	adds	r2, #1
   136f6:	7813      	ldrb	r3, [r2, #0]
   136f8:	2b00      	cmp	r3, #0
   136fa:	d1f8      	bne.n	136ee <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   136fc:	0003      	movs	r3, r0
   136fe:	3b41      	subs	r3, #65	; 0x41
   13700:	b29b      	uxth	r3, r3
   13702:	2b19      	cmp	r3, #25
   13704:	d86c      	bhi.n	137e0 <follow_path+0x278>
					b |= 2;
   13706:	2302      	movs	r3, #2
   13708:	464a      	mov	r2, r9
   1370a:	431a      	orrs	r2, r3
   1370c:	4691      	mov	r9, r2
   1370e:	e05f      	b.n	137d0 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   13710:	9b01      	ldr	r3, [sp, #4]
   13712:	2b0b      	cmp	r3, #11
   13714:	d03b      	beq.n	1378e <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   13716:	4544      	cmp	r4, r8
   13718:	d100      	bne.n	1371c <follow_path+0x1b4>
   1371a:	e0b9      	b.n	13890 <follow_path+0x328>
   1371c:	2303      	movs	r3, #3
   1371e:	431e      	orrs	r6, r3
   13720:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   13722:	4544      	cmp	r4, r8
   13724:	d800      	bhi.n	13728 <follow_path+0x1c0>
   13726:	e0b3      	b.n	13890 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   13728:	69bb      	ldr	r3, [r7, #24]
   1372a:	781a      	ldrb	r2, [r3, #0]
   1372c:	2ae5      	cmp	r2, #229	; 0xe5
   1372e:	d036      	beq.n	1379e <follow_path+0x236>
	if (ni == 8) b <<= 2;
   13730:	9b01      	ldr	r3, [sp, #4]
   13732:	2b08      	cmp	r3, #8
   13734:	d060      	beq.n	137f8 <follow_path+0x290>
   13736:	230c      	movs	r3, #12
   13738:	464a      	mov	r2, r9
   1373a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1373c:	2b0c      	cmp	r3, #12
   1373e:	d060      	beq.n	13802 <follow_path+0x29a>
   13740:	43d2      	mvns	r2, r2
   13742:	0792      	lsls	r2, r2, #30
   13744:	d05d      	beq.n	13802 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   13746:	07b2      	lsls	r2, r6, #30
   13748:	d406      	bmi.n	13758 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1374a:	2203      	movs	r2, #3
   1374c:	4649      	mov	r1, r9
   1374e:	400a      	ands	r2, r1
   13750:	2a01      	cmp	r2, #1
   13752:	d059      	beq.n	13808 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   13754:	2b04      	cmp	r3, #4
   13756:	d05a      	beq.n	1380e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   13758:	69bb      	ldr	r3, [r7, #24]
   1375a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   1375c:	0038      	movs	r0, r7
   1375e:	4b45      	ldr	r3, [pc, #276]	; (13874 <follow_path+0x30c>)
   13760:	4798      	blx	r3
			ns = *(dj->fn+NS);
   13762:	69bb      	ldr	r3, [r7, #24]
   13764:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   13766:	2800      	cmp	r0, #0
   13768:	d15c      	bne.n	13824 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1376a:	075b      	lsls	r3, r3, #29
   1376c:	d453      	bmi.n	13816 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1376e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   13770:	7ad3      	ldrb	r3, [r2, #11]
   13772:	06db      	lsls	r3, r3, #27
   13774:	d55c      	bpl.n	13830 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   13776:	7d51      	ldrb	r1, [r2, #21]
   13778:	0209      	lsls	r1, r1, #8
   1377a:	7d13      	ldrb	r3, [r2, #20]
   1377c:	430b      	orrs	r3, r1
   1377e:	041b      	lsls	r3, r3, #16
   13780:	7ed1      	ldrb	r1, [r2, #27]
   13782:	0209      	lsls	r1, r1, #8
   13784:	7e92      	ldrb	r2, [r2, #26]
   13786:	430a      	orrs	r2, r1
   13788:	4313      	orrs	r3, r2
   1378a:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1378c:	e70b      	b.n	135a6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   1378e:	2303      	movs	r3, #3
   13790:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   13792:	69bb      	ldr	r3, [r7, #24]
   13794:	781a      	ldrb	r2, [r3, #0]
   13796:	2ae5      	cmp	r2, #229	; 0xe5
   13798:	d1cd      	bne.n	13736 <follow_path+0x1ce>
   1379a:	220b      	movs	r2, #11
   1379c:	9201      	str	r2, [sp, #4]
   1379e:	2205      	movs	r2, #5
   137a0:	701a      	strb	r2, [r3, #0]
   137a2:	e7c5      	b.n	13730 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   137a4:	2100      	movs	r1, #0
   137a6:	4b2f      	ldr	r3, [pc, #188]	; (13864 <follow_path+0x2fc>)
   137a8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   137aa:	2800      	cmp	r0, #0
   137ac:	d100      	bne.n	137b0 <follow_path+0x248>
   137ae:	e079      	b.n	138a4 <follow_path+0x33c>
   137b0:	4b31      	ldr	r3, [pc, #196]	; (13878 <follow_path+0x310>)
   137b2:	469c      	mov	ip, r3
   137b4:	4460      	add	r0, ip
   137b6:	3880      	subs	r0, #128	; 0x80
   137b8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   137ba:	2302      	movs	r3, #2
   137bc:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   137be:	2800      	cmp	r0, #0
   137c0:	d002      	beq.n	137c8 <follow_path+0x260>
   137c2:	e790      	b.n	136e6 <follow_path+0x17e>
   137c4:	2b00      	cmp	r3, #0
   137c6:	d099      	beq.n	136fc <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   137c8:	2303      	movs	r3, #3
   137ca:	431e      	orrs	r6, r3
   137cc:	b2f6      	uxtb	r6, r6
   137ce:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   137d0:	69bb      	ldr	r3, [r7, #24]
   137d2:	465a      	mov	r2, fp
   137d4:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   137d6:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   137d8:	2201      	movs	r2, #1
   137da:	4694      	mov	ip, r2
   137dc:	44e3      	add	fp, ip
   137de:	e770      	b.n	136c2 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   137e0:	0003      	movs	r3, r0
   137e2:	3b61      	subs	r3, #97	; 0x61
   137e4:	b29b      	uxth	r3, r3
   137e6:	2b19      	cmp	r3, #25
   137e8:	d8f2      	bhi.n	137d0 <follow_path+0x268>
						b |= 1; w -= 0x20;
   137ea:	2301      	movs	r3, #1
   137ec:	464a      	mov	r2, r9
   137ee:	431a      	orrs	r2, r3
   137f0:	4691      	mov	r9, r2
   137f2:	3820      	subs	r0, #32
   137f4:	b280      	uxth	r0, r0
   137f6:	e7eb      	b.n	137d0 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   137f8:	464b      	mov	r3, r9
   137fa:	009b      	lsls	r3, r3, #2
   137fc:	b2db      	uxtb	r3, r3
   137fe:	4699      	mov	r9, r3
   13800:	e799      	b.n	13736 <follow_path+0x1ce>
		cf |= NS_LFN;
   13802:	2202      	movs	r2, #2
   13804:	4316      	orrs	r6, r2
   13806:	e79e      	b.n	13746 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   13808:	320f      	adds	r2, #15
   1380a:	4316      	orrs	r6, r2
   1380c:	e7a2      	b.n	13754 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1380e:	3304      	adds	r3, #4
   13810:	431e      	orrs	r6, r3
   13812:	e7a1      	b.n	13758 <follow_path+0x1f0>
   13814:	2006      	movs	r0, #6
}
   13816:	b003      	add	sp, #12
   13818:	bc3c      	pop	{r2, r3, r4, r5}
   1381a:	4690      	mov	r8, r2
   1381c:	4699      	mov	r9, r3
   1381e:	46a2      	mov	sl, r4
   13820:	46ab      	mov	fp, r5
   13822:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   13824:	2804      	cmp	r0, #4
   13826:	d1f6      	bne.n	13816 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13828:	075b      	lsls	r3, r3, #29
   1382a:	d4f4      	bmi.n	13816 <follow_path+0x2ae>
   1382c:	3001      	adds	r0, #1
   1382e:	e7f2      	b.n	13816 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   13830:	2005      	movs	r0, #5
   13832:	e7f0      	b.n	13816 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   13834:	2301      	movs	r3, #1
	si = di = 0;
   13836:	2400      	movs	r4, #0
   13838:	e6fb      	b.n	13632 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   1383a:	2301      	movs	r3, #1
	si = di = 0;
   1383c:	2400      	movs	r4, #0
   1383e:	e005      	b.n	1384c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   13840:	2301      	movs	r3, #1
	si = di = 0;
   13842:	2400      	movs	r4, #0
   13844:	e002      	b.n	1384c <follow_path+0x2e4>
   13846:	002c      	movs	r4, r5
   13848:	465f      	mov	r7, fp
   1384a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   1384c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1384e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   13850:	2c00      	cmp	r4, #0
   13852:	d0df      	beq.n	13814 <follow_path+0x2ac>
   13854:	4b09      	ldr	r3, [pc, #36]	; (1387c <follow_path+0x314>)
   13856:	18e3      	adds	r3, r4, r3
   13858:	005b      	lsls	r3, r3, #1
   1385a:	4453      	add	r3, sl
   1385c:	e6f1      	b.n	13642 <follow_path+0xda>
   1385e:	46c0      	nop			; (mov r8, r8)
   13860:	00012bb9 	.word	0x00012bb9
   13864:	00013ef5 	.word	0x00013ef5
   13868:	0001a8e1 	.word	0x0001a8e1
   1386c:	00012551 	.word	0x00012551
   13870:	0001a8ed 	.word	0x0001a8ed
   13874:	00012ff9 	.word	0x00012ff9
   13878:	0001a860 	.word	0x0001a860
   1387c:	7fffffff 	.word	0x7fffffff
   13880:	002c      	movs	r4, r5
   13882:	465f      	mov	r7, fp
   13884:	464d      	mov	r5, r9
   13886:	e7e1      	b.n	1384c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   13888:	9b01      	ldr	r3, [sp, #4]
   1388a:	2b0b      	cmp	r3, #11
   1388c:	d100      	bne.n	13890 <follow_path+0x328>
   1388e:	e77e      	b.n	1378e <follow_path+0x226>
			b <<= 2; continue;
   13890:	464b      	mov	r3, r9
   13892:	009b      	lsls	r3, r3, #2
   13894:	b2db      	uxtb	r3, r3
   13896:	4699      	mov	r9, r3
   13898:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   1389a:	220b      	movs	r2, #11
   1389c:	9201      	str	r2, [sp, #4]
   1389e:	3a03      	subs	r2, #3
   138a0:	4693      	mov	fp, r2
   138a2:	e70e      	b.n	136c2 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   138a4:	2302      	movs	r3, #2
   138a6:	431e      	orrs	r6, r3
   138a8:	e78e      	b.n	137c8 <follow_path+0x260>
   138aa:	46c0      	nop			; (mov r8, r8)

000138ac <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   138ac:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   138ae:	2807      	cmp	r0, #7
   138b0:	d901      	bls.n	138b6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   138b2:	0018      	movs	r0, r3
   138b4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   138b6:	0083      	lsls	r3, r0, #2
   138b8:	4a07      	ldr	r2, [pc, #28]	; (138d8 <f_mount+0x2c>)
   138ba:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   138bc:	2b00      	cmp	r3, #0
   138be:	d001      	beq.n	138c4 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
	if (fs) {
   138c4:	2900      	cmp	r1, #0
   138c6:	d001      	beq.n	138cc <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   138c8:	2300      	movs	r3, #0
   138ca:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   138cc:	0080      	lsls	r0, r0, #2
   138ce:	4b02      	ldr	r3, [pc, #8]	; (138d8 <f_mount+0x2c>)
   138d0:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   138d2:	2300      	movs	r3, #0
   138d4:	e7ed      	b.n	138b2 <f_mount+0x6>
   138d6:	46c0      	nop			; (mov r8, r8)
   138d8:	200004cc 	.word	0x200004cc

000138dc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   138dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   138de:	46c6      	mov	lr, r8
   138e0:	b500      	push	{lr}
   138e2:	4c59      	ldr	r4, [pc, #356]	; (13a48 <f_open+0x16c>)
   138e4:	44a5      	add	sp, r4
   138e6:	0005      	movs	r5, r0
   138e8:	9101      	str	r1, [sp, #4]
   138ea:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   138ec:	2300      	movs	r3, #0
   138ee:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   138f0:	261f      	movs	r6, #31
   138f2:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   138f4:	221e      	movs	r2, #30
   138f6:	403a      	ands	r2, r7
   138f8:	a985      	add	r1, sp, #532	; 0x214
   138fa:	a801      	add	r0, sp, #4
   138fc:	4b53      	ldr	r3, [pc, #332]	; (13a4c <f_open+0x170>)
   138fe:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   13900:	ab82      	add	r3, sp, #520	; 0x208
   13902:	938b      	str	r3, [sp, #556]	; 0x22c
   13904:	ab02      	add	r3, sp, #8
   13906:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   13908:	2800      	cmp	r0, #0
   1390a:	d006      	beq.n	1391a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   1390c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1390e:	231c      	movs	r3, #28
   13910:	423b      	tst	r3, r7
   13912:	d145      	bne.n	139a0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   13914:	2800      	cmp	r0, #0
   13916:	d13d      	bne.n	13994 <f_open+0xb8>
   13918:	e00c      	b.n	13934 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   1391a:	9901      	ldr	r1, [sp, #4]
   1391c:	a885      	add	r0, sp, #532	; 0x214
   1391e:	4b4c      	ldr	r3, [pc, #304]	; (13a50 <f_open+0x174>)
   13920:	4798      	blx	r3
	dir = dj.dir;
   13922:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   13924:	2800      	cmp	r0, #0
   13926:	d1f2      	bne.n	1390e <f_open+0x32>
		if (!dir)	/* Current dir itself */
   13928:	2c00      	cmp	r4, #0
   1392a:	d100      	bne.n	1392e <f_open+0x52>
   1392c:	e086      	b.n	13a3c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1392e:	231c      	movs	r3, #28
   13930:	423b      	tst	r3, r7
   13932:	d146      	bne.n	139c2 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13934:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   13936:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13938:	06da      	lsls	r2, r3, #27
   1393a:	d42b      	bmi.n	13994 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1393c:	07ba      	lsls	r2, r7, #30
   1393e:	d502      	bpl.n	13946 <f_open+0x6a>
					res = FR_DENIED;
   13940:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   13942:	07db      	lsls	r3, r3, #31
   13944:	d426      	bmi.n	13994 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   13946:	073b      	lsls	r3, r7, #28
   13948:	d501      	bpl.n	1394e <f_open+0x72>
			mode |= FA__WRITTEN;
   1394a:	2320      	movs	r3, #32
   1394c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1394e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13952:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   13954:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   13956:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   13958:	7d62      	ldrb	r2, [r4, #21]
   1395a:	0212      	lsls	r2, r2, #8
   1395c:	7d23      	ldrb	r3, [r4, #20]
   1395e:	4313      	orrs	r3, r2
   13960:	041b      	lsls	r3, r3, #16
   13962:	7ee1      	ldrb	r1, [r4, #27]
   13964:	0209      	lsls	r1, r1, #8
   13966:	7ea2      	ldrb	r2, [r4, #26]
   13968:	430a      	orrs	r2, r1
   1396a:	4313      	orrs	r3, r2
   1396c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1396e:	7fe3      	ldrb	r3, [r4, #31]
   13970:	061b      	lsls	r3, r3, #24
   13972:	7fa2      	ldrb	r2, [r4, #30]
   13974:	0412      	lsls	r2, r2, #16
   13976:	4313      	orrs	r3, r2
   13978:	7f22      	ldrb	r2, [r4, #28]
   1397a:	4313      	orrs	r3, r2
   1397c:	7f62      	ldrb	r2, [r4, #29]
   1397e:	0212      	lsls	r2, r2, #8
   13980:	4313      	orrs	r3, r2
   13982:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   13984:	2300      	movs	r3, #0
   13986:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   13988:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1398a:	9b85      	ldr	r3, [sp, #532]	; 0x214
   1398c:	602b      	str	r3, [r5, #0]
   1398e:	88db      	ldrh	r3, [r3, #6]
   13990:	80ab      	strh	r3, [r5, #4]
   13992:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   13994:	238e      	movs	r3, #142	; 0x8e
   13996:	009b      	lsls	r3, r3, #2
   13998:	449d      	add	sp, r3
   1399a:	bc04      	pop	{r2}
   1399c:	4690      	mov	r8, r2
   1399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   139a0:	2804      	cmp	r0, #4
   139a2:	d005      	beq.n	139b0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   139a4:	2308      	movs	r3, #8
   139a6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   139a8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   139aa:	2800      	cmp	r0, #0
   139ac:	d0d3      	beq.n	13956 <f_open+0x7a>
   139ae:	e7f1      	b.n	13994 <f_open+0xb8>
				res = dir_register(&dj);
   139b0:	a885      	add	r0, sp, #532	; 0x214
   139b2:	4b28      	ldr	r3, [pc, #160]	; (13a54 <f_open+0x178>)
   139b4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   139b6:	2308      	movs	r3, #8
   139b8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   139ba:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   139bc:	2800      	cmp	r0, #0
   139be:	d008      	beq.n	139d2 <f_open+0xf6>
   139c0:	e7e8      	b.n	13994 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   139c2:	7ae3      	ldrb	r3, [r4, #11]
   139c4:	2211      	movs	r2, #17
				res = FR_DENIED;
   139c6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   139c8:	421a      	tst	r2, r3
   139ca:	d1e3      	bne.n	13994 <f_open+0xb8>
					res = FR_EXIST;
   139cc:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   139ce:	077b      	lsls	r3, r7, #29
   139d0:	d4e0      	bmi.n	13994 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   139d2:	0733      	lsls	r3, r6, #28
   139d4:	d5bb      	bpl.n	1394e <f_open+0x72>
			dw = get_fattime();					/* Created time */
   139d6:	4b20      	ldr	r3, [pc, #128]	; (13a58 <f_open+0x17c>)
   139d8:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   139da:	73a0      	strb	r0, [r4, #14]
   139dc:	0a03      	lsrs	r3, r0, #8
   139de:	73e3      	strb	r3, [r4, #15]
   139e0:	0c03      	lsrs	r3, r0, #16
   139e2:	7423      	strb	r3, [r4, #16]
   139e4:	0e00      	lsrs	r0, r0, #24
   139e6:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   139e8:	2300      	movs	r3, #0
   139ea:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   139ec:	7723      	strb	r3, [r4, #28]
   139ee:	7763      	strb	r3, [r4, #29]
   139f0:	77a3      	strb	r3, [r4, #30]
   139f2:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   139f4:	7d62      	ldrb	r2, [r4, #21]
   139f6:	0212      	lsls	r2, r2, #8
   139f8:	7d27      	ldrb	r7, [r4, #20]
   139fa:	4317      	orrs	r7, r2
   139fc:	043f      	lsls	r7, r7, #16
   139fe:	7ee1      	ldrb	r1, [r4, #27]
   13a00:	0209      	lsls	r1, r1, #8
   13a02:	7ea2      	ldrb	r2, [r4, #26]
   13a04:	430a      	orrs	r2, r1
   13a06:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   13a08:	76a3      	strb	r3, [r4, #26]
   13a0a:	76e3      	strb	r3, [r4, #27]
   13a0c:	7523      	strb	r3, [r4, #20]
   13a0e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   13a10:	9885      	ldr	r0, [sp, #532]	; 0x214
   13a12:	3301      	adds	r3, #1
   13a14:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   13a16:	2f00      	cmp	r7, #0
   13a18:	d097      	beq.n	1394a <f_open+0x6e>
				dw = dj.fs->winsect;
   13a1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13a1c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   13a1e:	0039      	movs	r1, r7
   13a20:	4b0e      	ldr	r3, [pc, #56]	; (13a5c <f_open+0x180>)
   13a22:	4798      	blx	r3
				if (res == FR_OK) {
   13a24:	2800      	cmp	r0, #0
   13a26:	d1b5      	bne.n	13994 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   13a28:	9885      	ldr	r0, [sp, #532]	; 0x214
   13a2a:	3f01      	subs	r7, #1
   13a2c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   13a2e:	4641      	mov	r1, r8
   13a30:	4b0b      	ldr	r3, [pc, #44]	; (13a60 <f_open+0x184>)
   13a32:	4798      	blx	r3
	if (res == FR_OK) {
   13a34:	2800      	cmp	r0, #0
   13a36:	d100      	bne.n	13a3a <f_open+0x15e>
   13a38:	e787      	b.n	1394a <f_open+0x6e>
   13a3a:	e7ab      	b.n	13994 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13a3c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   13a3e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13a40:	423b      	tst	r3, r7
   13a42:	d0b2      	beq.n	139aa <f_open+0xce>
			res = FR_INVALID_NAME;
   13a44:	2006      	movs	r0, #6
   13a46:	e7ad      	b.n	139a4 <f_open+0xc8>
   13a48:	fffffdc8 	.word	0xfffffdc8
   13a4c:	0001266d 	.word	0x0001266d
   13a50:	00013569 	.word	0x00013569
   13a54:	00013191 	.word	0x00013191
   13a58:	000124ed 	.word	0x000124ed
   13a5c:	00012e5d 	.word	0x00012e5d
   13a60:	00012a1d 	.word	0x00012a1d

00013a64 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   13a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a66:	46de      	mov	lr, fp
   13a68:	4657      	mov	r7, sl
   13a6a:	464e      	mov	r6, r9
   13a6c:	4645      	mov	r5, r8
   13a6e:	b5e0      	push	{r5, r6, r7, lr}
   13a70:	b083      	sub	sp, #12
   13a72:	0004      	movs	r4, r0
   13a74:	000f      	movs	r7, r1
   13a76:	0015      	movs	r5, r2
   13a78:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
   13a7a:	2300      	movs	r3, #0
   13a7c:	464a      	mov	r2, r9
   13a7e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   13a80:	8881      	ldrh	r1, [r0, #4]
   13a82:	6800      	ldr	r0, [r0, #0]
   13a84:	4b5e      	ldr	r3, [pc, #376]	; (13c00 <f_read+0x19c>)
   13a86:	4798      	blx	r3
   13a88:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   13a8a:	2800      	cmp	r0, #0
   13a8c:	d000      	beq.n	13a90 <f_read+0x2c>
   13a8e:	e0af      	b.n	13bf0 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   13a90:	79a3      	ldrb	r3, [r4, #6]
   13a92:	b25a      	sxtb	r2, r3
   13a94:	2a00      	cmp	r2, #0
   13a96:	da00      	bge.n	13a9a <f_read+0x36>
   13a98:	e0a8      	b.n	13bec <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   13a9a:	07db      	lsls	r3, r3, #31
   13a9c:	d402      	bmi.n	13aa4 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   13a9e:	2307      	movs	r3, #7
   13aa0:	9300      	str	r3, [sp, #0]
   13aa2:	e0a5      	b.n	13bf0 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
   13aa4:	68e3      	ldr	r3, [r4, #12]
   13aa6:	68a2      	ldr	r2, [r4, #8]
   13aa8:	1a9e      	subs	r6, r3, r2
   13aaa:	42ae      	cmp	r6, r5
   13aac:	d900      	bls.n	13ab0 <f_read+0x4c>
   13aae:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
   13ab0:	2e00      	cmp	r6, #0
   13ab2:	d153      	bne.n	13b5c <f_read+0xf8>
   13ab4:	e09c      	b.n	13bf0 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   13ab6:	6961      	ldr	r1, [r4, #20]
   13ab8:	4b52      	ldr	r3, [pc, #328]	; (13c04 <f_read+0x1a0>)
   13aba:	4798      	blx	r3
   13abc:	e05c      	b.n	13b78 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   13abe:	79a2      	ldrb	r2, [r4, #6]
   13ac0:	2380      	movs	r3, #128	; 0x80
   13ac2:	425b      	negs	r3, r3
   13ac4:	4313      	orrs	r3, r2
   13ac6:	71a3      	strb	r3, [r4, #6]
   13ac8:	2302      	movs	r3, #2
   13aca:	9300      	str	r3, [sp, #0]
   13acc:	e090      	b.n	13bf0 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13ace:	79a2      	ldrb	r2, [r4, #6]
   13ad0:	2380      	movs	r3, #128	; 0x80
   13ad2:	425b      	negs	r3, r3
   13ad4:	4313      	orrs	r3, r2
   13ad6:	71a3      	strb	r3, [r4, #6]
   13ad8:	2301      	movs	r3, #1
   13ada:	9300      	str	r3, [sp, #0]
   13adc:	e088      	b.n	13bf0 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13ade:	79a2      	ldrb	r2, [r4, #6]
   13ae0:	2380      	movs	r3, #128	; 0x80
   13ae2:	425b      	negs	r3, r3
   13ae4:	4313      	orrs	r3, r2
   13ae6:	71a3      	strb	r3, [r4, #6]
   13ae8:	2302      	movs	r3, #2
   13aea:	9300      	str	r3, [sp, #0]
   13aec:	e080      	b.n	13bf0 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
   13aee:	79a2      	ldrb	r2, [r4, #6]
   13af0:	2380      	movs	r3, #128	; 0x80
   13af2:	425b      	negs	r3, r3
   13af4:	4313      	orrs	r3, r2
   13af6:	71a3      	strb	r3, [r4, #6]
   13af8:	2301      	movs	r3, #1
   13afa:	9300      	str	r3, [sp, #0]
   13afc:	e078      	b.n	13bf0 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   13afe:	3130      	adds	r1, #48	; 0x30
   13b00:	0240      	lsls	r0, r0, #9
   13b02:	1838      	adds	r0, r7, r0
   13b04:	2280      	movs	r2, #128	; 0x80
   13b06:	0092      	lsls	r2, r2, #2
   13b08:	4b3f      	ldr	r3, [pc, #252]	; (13c08 <f_read+0x1a4>)
   13b0a:	4798      	blx	r3
   13b0c:	e063      	b.n	13bd6 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   13b0e:	4643      	mov	r3, r8
   13b10:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   13b12:	68a3      	ldr	r3, [r4, #8]
   13b14:	05dd      	lsls	r5, r3, #23
   13b16:	0ded      	lsrs	r5, r5, #23
   13b18:	2380      	movs	r3, #128	; 0x80
   13b1a:	009b      	lsls	r3, r3, #2
   13b1c:	1b5d      	subs	r5, r3, r5
   13b1e:	42b5      	cmp	r5, r6
   13b20:	d900      	bls.n	13b24 <f_read+0xc0>
   13b22:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   13b24:	69a1      	ldr	r1, [r4, #24]
   13b26:	6820      	ldr	r0, [r4, #0]
   13b28:	4b38      	ldr	r3, [pc, #224]	; (13c0c <f_read+0x1a8>)
   13b2a:	4798      	blx	r3
   13b2c:	2800      	cmp	r0, #0
   13b2e:	d155      	bne.n	13bdc <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   13b30:	68a3      	ldr	r3, [r4, #8]
   13b32:	05d9      	lsls	r1, r3, #23
   13b34:	0dc9      	lsrs	r1, r1, #23
   13b36:	3130      	adds	r1, #48	; 0x30
   13b38:	6823      	ldr	r3, [r4, #0]
   13b3a:	469c      	mov	ip, r3
   13b3c:	4461      	add	r1, ip
   13b3e:	002a      	movs	r2, r5
   13b40:	0038      	movs	r0, r7
   13b42:	4b31      	ldr	r3, [pc, #196]	; (13c08 <f_read+0x1a4>)
   13b44:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   13b46:	197f      	adds	r7, r7, r5
   13b48:	68a3      	ldr	r3, [r4, #8]
   13b4a:	195b      	adds	r3, r3, r5
   13b4c:	60a3      	str	r3, [r4, #8]
   13b4e:	464b      	mov	r3, r9
   13b50:	681b      	ldr	r3, [r3, #0]
   13b52:	195b      	adds	r3, r3, r5
   13b54:	464a      	mov	r2, r9
   13b56:	6013      	str	r3, [r2, #0]
   13b58:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
   13b5a:	d049      	beq.n	13bf0 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   13b5c:	68a3      	ldr	r3, [r4, #8]
   13b5e:	05da      	lsls	r2, r3, #23
   13b60:	d1d7      	bne.n	13b12 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   13b62:	6820      	ldr	r0, [r4, #0]
   13b64:	7882      	ldrb	r2, [r0, #2]
   13b66:	3a01      	subs	r2, #1
   13b68:	0a5d      	lsrs	r5, r3, #9
   13b6a:	4015      	ands	r5, r2
   13b6c:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
   13b6e:	2d00      	cmp	r5, #0
   13b70:	d107      	bne.n	13b82 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
   13b72:	2b00      	cmp	r3, #0
   13b74:	d19f      	bne.n	13ab6 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
   13b76:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   13b78:	2801      	cmp	r0, #1
   13b7a:	d9a0      	bls.n	13abe <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13b7c:	1c43      	adds	r3, r0, #1
   13b7e:	d0a6      	beq.n	13ace <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
   13b80:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13b82:	6823      	ldr	r3, [r4, #0]
   13b84:	469a      	mov	sl, r3
   13b86:	6961      	ldr	r1, [r4, #20]
   13b88:	0018      	movs	r0, r3
   13b8a:	4b21      	ldr	r3, [pc, #132]	; (13c10 <f_read+0x1ac>)
   13b8c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13b8e:	2800      	cmp	r0, #0
   13b90:	d0a5      	beq.n	13ade <f_read+0x7a>
			sect += csect;
   13b92:	4680      	mov	r8, r0
   13b94:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   13b96:	0a73      	lsrs	r3, r6, #9
   13b98:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
   13b9a:	d0b8      	beq.n	13b0e <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13b9c:	4653      	mov	r3, sl
   13b9e:	789b      	ldrb	r3, [r3, #2]
   13ba0:	465a      	mov	r2, fp
   13ba2:	18aa      	adds	r2, r5, r2
   13ba4:	429a      	cmp	r2, r3
   13ba6:	d901      	bls.n	13bac <f_read+0x148>
					cc = fp->fs->csize - csect;
   13ba8:	1b5b      	subs	r3, r3, r5
   13baa:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   13bac:	465b      	mov	r3, fp
   13bae:	466a      	mov	r2, sp
   13bb0:	71d3      	strb	r3, [r2, #7]
   13bb2:	79d3      	ldrb	r3, [r2, #7]
   13bb4:	4652      	mov	r2, sl
   13bb6:	7850      	ldrb	r0, [r2, #1]
   13bb8:	4642      	mov	r2, r8
   13bba:	0039      	movs	r1, r7
   13bbc:	4d15      	ldr	r5, [pc, #84]	; (13c14 <f_read+0x1b0>)
   13bbe:	47a8      	blx	r5
   13bc0:	2800      	cmp	r0, #0
   13bc2:	d194      	bne.n	13aee <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   13bc4:	6821      	ldr	r1, [r4, #0]
   13bc6:	790b      	ldrb	r3, [r1, #4]
   13bc8:	2b00      	cmp	r3, #0
   13bca:	d004      	beq.n	13bd6 <f_read+0x172>
   13bcc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13bce:	4642      	mov	r2, r8
   13bd0:	1a98      	subs	r0, r3, r2
   13bd2:	4583      	cmp	fp, r0
   13bd4:	d893      	bhi.n	13afe <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   13bd6:	465b      	mov	r3, fp
   13bd8:	025d      	lsls	r5, r3, #9
				continue;
   13bda:	e7b4      	b.n	13b46 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
   13bdc:	79a2      	ldrb	r2, [r4, #6]
   13bde:	2380      	movs	r3, #128	; 0x80
   13be0:	425b      	negs	r3, r3
   13be2:	4313      	orrs	r3, r2
   13be4:	71a3      	strb	r3, [r4, #6]
   13be6:	2301      	movs	r3, #1
   13be8:	9300      	str	r3, [sp, #0]
   13bea:	e001      	b.n	13bf0 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13bec:	2302      	movs	r3, #2
   13bee:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
   13bf0:	9800      	ldr	r0, [sp, #0]
   13bf2:	b003      	add	sp, #12
   13bf4:	bc3c      	pop	{r2, r3, r4, r5}
   13bf6:	4690      	mov	r8, r2
   13bf8:	4699      	mov	r9, r3
   13bfa:	46a2      	mov	sl, r4
   13bfc:	46ab      	mov	fp, r5
   13bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c00:	00012599 	.word	0x00012599
   13c04:	00012abd 	.word	0x00012abd
   13c08:	0001253d 	.word	0x0001253d
   13c0c:	00012a1d 	.word	0x00012a1d
   13c10:	00012563 	.word	0x00012563
   13c14:	00012379 	.word	0x00012379

00013c18 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   13c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c1a:	46de      	mov	lr, fp
   13c1c:	4657      	mov	r7, sl
   13c1e:	464e      	mov	r6, r9
   13c20:	4645      	mov	r5, r8
   13c22:	b5e0      	push	{r5, r6, r7, lr}
   13c24:	b083      	sub	sp, #12
   13c26:	0004      	movs	r4, r0
   13c28:	000d      	movs	r5, r1
   13c2a:	0016      	movs	r6, r2
   13c2c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   13c2e:	2300      	movs	r3, #0
   13c30:	464a      	mov	r2, r9
   13c32:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   13c34:	8881      	ldrh	r1, [r0, #4]
   13c36:	6800      	ldr	r0, [r0, #0]
   13c38:	4b7f      	ldr	r3, [pc, #508]	; (13e38 <f_write+0x220>)
   13c3a:	4798      	blx	r3
   13c3c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   13c3e:	2800      	cmp	r0, #0
   13c40:	d000      	beq.n	13c44 <f_write+0x2c>
   13c42:	e0f1      	b.n	13e28 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   13c44:	79a3      	ldrb	r3, [r4, #6]
   13c46:	b25a      	sxtb	r2, r3
   13c48:	2a00      	cmp	r2, #0
   13c4a:	da00      	bge.n	13c4e <f_write+0x36>
   13c4c:	e0ea      	b.n	13e24 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   13c4e:	079b      	lsls	r3, r3, #30
   13c50:	d402      	bmi.n	13c58 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   13c52:	2307      	movs	r3, #7
   13c54:	9300      	str	r3, [sp, #0]
   13c56:	e0e7      	b.n	13e28 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   13c58:	68e3      	ldr	r3, [r4, #12]
   13c5a:	199a      	adds	r2, r3, r6
   13c5c:	4293      	cmp	r3, r2
   13c5e:	d810      	bhi.n	13c82 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   13c60:	2e00      	cmp	r6, #0
   13c62:	d00e      	beq.n	13c82 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13c64:	002f      	movs	r7, r5
   13c66:	e07b      	b.n	13d60 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   13c68:	2100      	movs	r1, #0
   13c6a:	4b74      	ldr	r3, [pc, #464]	; (13e3c <f_write+0x224>)
   13c6c:	4798      	blx	r3
   13c6e:	0003      	movs	r3, r0
   13c70:	6120      	str	r0, [r4, #16]
   13c72:	e003      	b.n	13c7c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13c74:	6961      	ldr	r1, [r4, #20]
   13c76:	4b71      	ldr	r3, [pc, #452]	; (13e3c <f_write+0x224>)
   13c78:	4798      	blx	r3
   13c7a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d000      	beq.n	13c82 <f_write+0x6a>
   13c80:	e080      	b.n	13d84 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   13c82:	68a3      	ldr	r3, [r4, #8]
   13c84:	68e2      	ldr	r2, [r4, #12]
   13c86:	4293      	cmp	r3, r2
   13c88:	d900      	bls.n	13c8c <f_write+0x74>
   13c8a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   13c8c:	79a3      	ldrb	r3, [r4, #6]
   13c8e:	2220      	movs	r2, #32
   13c90:	4313      	orrs	r3, r2
   13c92:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   13c94:	e0c8      	b.n	13e28 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13c96:	79a2      	ldrb	r2, [r4, #6]
   13c98:	3b81      	subs	r3, #129	; 0x81
   13c9a:	4313      	orrs	r3, r2
   13c9c:	71a3      	strb	r3, [r4, #6]
   13c9e:	2302      	movs	r3, #2
   13ca0:	9300      	str	r3, [sp, #0]
   13ca2:	e0c1      	b.n	13e28 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13ca4:	79a2      	ldrb	r2, [r4, #6]
   13ca6:	3b7f      	subs	r3, #127	; 0x7f
   13ca8:	4313      	orrs	r3, r2
   13caa:	71a3      	strb	r3, [r4, #6]
   13cac:	2301      	movs	r3, #1
   13cae:	9300      	str	r3, [sp, #0]
   13cb0:	e0ba      	b.n	13e28 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   13cb2:	2100      	movs	r1, #0
   13cb4:	4b62      	ldr	r3, [pc, #392]	; (13e40 <f_write+0x228>)
   13cb6:	4798      	blx	r3
   13cb8:	2800      	cmp	r0, #0
   13cba:	d06d      	beq.n	13d98 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   13cbc:	79a2      	ldrb	r2, [r4, #6]
   13cbe:	2380      	movs	r3, #128	; 0x80
   13cc0:	425b      	negs	r3, r3
   13cc2:	4313      	orrs	r3, r2
   13cc4:	71a3      	strb	r3, [r4, #6]
   13cc6:	2301      	movs	r3, #1
   13cc8:	9300      	str	r3, [sp, #0]
   13cca:	e0ad      	b.n	13e28 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13ccc:	79a2      	ldrb	r2, [r4, #6]
   13cce:	2380      	movs	r3, #128	; 0x80
   13cd0:	425b      	negs	r3, r3
   13cd2:	4313      	orrs	r3, r2
   13cd4:	71a3      	strb	r3, [r4, #6]
   13cd6:	2302      	movs	r3, #2
   13cd8:	9300      	str	r3, [sp, #0]
   13cda:	e0a5      	b.n	13e28 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   13cdc:	79a2      	ldrb	r2, [r4, #6]
   13cde:	2380      	movs	r3, #128	; 0x80
   13ce0:	425b      	negs	r3, r3
   13ce2:	4313      	orrs	r3, r2
   13ce4:	71a3      	strb	r3, [r4, #6]
   13ce6:	2301      	movs	r3, #1
   13ce8:	9300      	str	r3, [sp, #0]
   13cea:	e09d      	b.n	13e28 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13cec:	0240      	lsls	r0, r0, #9
   13cee:	1839      	adds	r1, r7, r0
   13cf0:	3330      	adds	r3, #48	; 0x30
   13cf2:	0018      	movs	r0, r3
   13cf4:	2280      	movs	r2, #128	; 0x80
   13cf6:	0092      	lsls	r2, r2, #2
   13cf8:	4b52      	ldr	r3, [pc, #328]	; (13e44 <f_write+0x22c>)
   13cfa:	4798      	blx	r3
					fp->fs->wflag = 0;
   13cfc:	2300      	movs	r3, #0
   13cfe:	6822      	ldr	r2, [r4, #0]
   13d00:	7113      	strb	r3, [r2, #4]
   13d02:	e072      	b.n	13dea <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   13d04:	68a3      	ldr	r3, [r4, #8]
   13d06:	68e2      	ldr	r2, [r4, #12]
   13d08:	4293      	cmp	r3, r2
   13d0a:	d271      	bcs.n	13df0 <f_write+0x1d8>
			fp->dsect = sect;
   13d0c:	4643      	mov	r3, r8
   13d0e:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   13d10:	68a3      	ldr	r3, [r4, #8]
   13d12:	05dd      	lsls	r5, r3, #23
   13d14:	0ded      	lsrs	r5, r5, #23
   13d16:	2380      	movs	r3, #128	; 0x80
   13d18:	009b      	lsls	r3, r3, #2
   13d1a:	1b5d      	subs	r5, r3, r5
   13d1c:	42b5      	cmp	r5, r6
   13d1e:	d900      	bls.n	13d22 <f_write+0x10a>
   13d20:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   13d22:	69a1      	ldr	r1, [r4, #24]
   13d24:	6820      	ldr	r0, [r4, #0]
   13d26:	4b46      	ldr	r3, [pc, #280]	; (13e40 <f_write+0x228>)
   13d28:	4798      	blx	r3
   13d2a:	2800      	cmp	r0, #0
   13d2c:	d172      	bne.n	13e14 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   13d2e:	68a3      	ldr	r3, [r4, #8]
   13d30:	05d8      	lsls	r0, r3, #23
   13d32:	0dc0      	lsrs	r0, r0, #23
   13d34:	3030      	adds	r0, #48	; 0x30
   13d36:	6823      	ldr	r3, [r4, #0]
   13d38:	469c      	mov	ip, r3
   13d3a:	4460      	add	r0, ip
   13d3c:	002a      	movs	r2, r5
   13d3e:	0039      	movs	r1, r7
   13d40:	4b40      	ldr	r3, [pc, #256]	; (13e44 <f_write+0x22c>)
   13d42:	4798      	blx	r3
		fp->fs->wflag = 1;
   13d44:	2301      	movs	r3, #1
   13d46:	6822      	ldr	r2, [r4, #0]
   13d48:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   13d4a:	197f      	adds	r7, r7, r5
   13d4c:	68a3      	ldr	r3, [r4, #8]
   13d4e:	195b      	adds	r3, r3, r5
   13d50:	60a3      	str	r3, [r4, #8]
   13d52:	464b      	mov	r3, r9
   13d54:	681b      	ldr	r3, [r3, #0]
   13d56:	195b      	adds	r3, r3, r5
   13d58:	464a      	mov	r2, r9
   13d5a:	6013      	str	r3, [r2, #0]
   13d5c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   13d5e:	d090      	beq.n	13c82 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   13d60:	68a3      	ldr	r3, [r4, #8]
   13d62:	05da      	lsls	r2, r3, #23
   13d64:	d1d4      	bne.n	13d10 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   13d66:	6820      	ldr	r0, [r4, #0]
   13d68:	7882      	ldrb	r2, [r0, #2]
   13d6a:	3a01      	subs	r2, #1
   13d6c:	0a5d      	lsrs	r5, r3, #9
   13d6e:	4015      	ands	r5, r2
   13d70:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   13d72:	2d00      	cmp	r5, #0
   13d74:	d10b      	bne.n	13d8e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   13d76:	2b00      	cmp	r3, #0
   13d78:	d000      	beq.n	13d7c <f_write+0x164>
   13d7a:	e77b      	b.n	13c74 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   13d7c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   13d7e:	2b00      	cmp	r3, #0
   13d80:	d100      	bne.n	13d84 <f_write+0x16c>
   13d82:	e771      	b.n	13c68 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13d84:	2b01      	cmp	r3, #1
   13d86:	d086      	beq.n	13c96 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13d88:	1c5a      	adds	r2, r3, #1
   13d8a:	d08b      	beq.n	13ca4 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   13d8c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   13d8e:	6820      	ldr	r0, [r4, #0]
   13d90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13d92:	69a2      	ldr	r2, [r4, #24]
   13d94:	4293      	cmp	r3, r2
   13d96:	d08c      	beq.n	13cb2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13d98:	6823      	ldr	r3, [r4, #0]
   13d9a:	469a      	mov	sl, r3
   13d9c:	6961      	ldr	r1, [r4, #20]
   13d9e:	0018      	movs	r0, r3
   13da0:	4b29      	ldr	r3, [pc, #164]	; (13e48 <f_write+0x230>)
   13da2:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13da4:	2800      	cmp	r0, #0
   13da6:	d091      	beq.n	13ccc <f_write+0xb4>
			sect += csect;
   13da8:	4680      	mov	r8, r0
   13daa:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13dac:	0a73      	lsrs	r3, r6, #9
   13dae:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   13db0:	d0a8      	beq.n	13d04 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13db2:	4653      	mov	r3, sl
   13db4:	789b      	ldrb	r3, [r3, #2]
   13db6:	465a      	mov	r2, fp
   13db8:	18aa      	adds	r2, r5, r2
   13dba:	429a      	cmp	r2, r3
   13dbc:	d901      	bls.n	13dc2 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   13dbe:	1b5b      	subs	r3, r3, r5
   13dc0:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   13dc2:	465b      	mov	r3, fp
   13dc4:	466a      	mov	r2, sp
   13dc6:	71d3      	strb	r3, [r2, #7]
   13dc8:	79d3      	ldrb	r3, [r2, #7]
   13dca:	4652      	mov	r2, sl
   13dcc:	7850      	ldrb	r0, [r2, #1]
   13dce:	4642      	mov	r2, r8
   13dd0:	0039      	movs	r1, r7
   13dd2:	4d1e      	ldr	r5, [pc, #120]	; (13e4c <f_write+0x234>)
   13dd4:	47a8      	blx	r5
   13dd6:	2800      	cmp	r0, #0
   13dd8:	d000      	beq.n	13ddc <f_write+0x1c4>
   13dda:	e77f      	b.n	13cdc <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13ddc:	6823      	ldr	r3, [r4, #0]
   13dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13de0:	4641      	mov	r1, r8
   13de2:	1a50      	subs	r0, r2, r1
   13de4:	4583      	cmp	fp, r0
   13de6:	d900      	bls.n	13dea <f_write+0x1d2>
   13de8:	e780      	b.n	13cec <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   13dea:	465b      	mov	r3, fp
   13dec:	025d      	lsls	r5, r3, #9
				continue;
   13dee:	e7ac      	b.n	13d4a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13df0:	2100      	movs	r1, #0
   13df2:	4650      	mov	r0, sl
   13df4:	4b12      	ldr	r3, [pc, #72]	; (13e40 <f_write+0x228>)
   13df6:	4798      	blx	r3
   13df8:	2800      	cmp	r0, #0
   13dfa:	d103      	bne.n	13e04 <f_write+0x1ec>
				fp->fs->winsect = sect;
   13dfc:	6823      	ldr	r3, [r4, #0]
   13dfe:	4642      	mov	r2, r8
   13e00:	62da      	str	r2, [r3, #44]	; 0x2c
   13e02:	e783      	b.n	13d0c <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13e04:	79a2      	ldrb	r2, [r4, #6]
   13e06:	2380      	movs	r3, #128	; 0x80
   13e08:	425b      	negs	r3, r3
   13e0a:	4313      	orrs	r3, r2
   13e0c:	71a3      	strb	r3, [r4, #6]
   13e0e:	2301      	movs	r3, #1
   13e10:	9300      	str	r3, [sp, #0]
   13e12:	e009      	b.n	13e28 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   13e14:	79a2      	ldrb	r2, [r4, #6]
   13e16:	2380      	movs	r3, #128	; 0x80
   13e18:	425b      	negs	r3, r3
   13e1a:	4313      	orrs	r3, r2
   13e1c:	71a3      	strb	r3, [r4, #6]
   13e1e:	2301      	movs	r3, #1
   13e20:	9300      	str	r3, [sp, #0]
   13e22:	e001      	b.n	13e28 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13e24:	2302      	movs	r3, #2
   13e26:	9300      	str	r3, [sp, #0]
}
   13e28:	9800      	ldr	r0, [sp, #0]
   13e2a:	b003      	add	sp, #12
   13e2c:	bc3c      	pop	{r2, r3, r4, r5}
   13e2e:	4690      	mov	r8, r2
   13e30:	4699      	mov	r9, r3
   13e32:	46a2      	mov	sl, r4
   13e34:	46ab      	mov	fp, r5
   13e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e38:	00012599 	.word	0x00012599
   13e3c:	00012d99 	.word	0x00012d99
   13e40:	00012a1d 	.word	0x00012a1d
   13e44:	0001253d 	.word	0x0001253d
   13e48:	00012563 	.word	0x00012563
   13e4c:	000123fd 	.word	0x000123fd

00013e50 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13e50:	b570      	push	{r4, r5, r6, lr}
   13e52:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13e54:	8881      	ldrh	r1, [r0, #4]
   13e56:	6800      	ldr	r0, [r0, #0]
   13e58:	4b1c      	ldr	r3, [pc, #112]	; (13ecc <f_sync+0x7c>)
   13e5a:	4798      	blx	r3
	if (res == FR_OK) {
   13e5c:	2800      	cmp	r0, #0
   13e5e:	d102      	bne.n	13e66 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13e60:	79a3      	ldrb	r3, [r4, #6]
   13e62:	069b      	lsls	r3, r3, #26
   13e64:	d400      	bmi.n	13e68 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13e66:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   13e68:	69e1      	ldr	r1, [r4, #28]
   13e6a:	6820      	ldr	r0, [r4, #0]
   13e6c:	4b18      	ldr	r3, [pc, #96]	; (13ed0 <f_sync+0x80>)
   13e6e:	4798      	blx	r3
			if (res == FR_OK) {
   13e70:	2800      	cmp	r0, #0
   13e72:	d1f8      	bne.n	13e66 <f_sync+0x16>
				dir = fp->dir_ptr;
   13e74:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13e76:	7aeb      	ldrb	r3, [r5, #11]
   13e78:	2220      	movs	r2, #32
   13e7a:	4313      	orrs	r3, r2
   13e7c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13e7e:	7b23      	ldrb	r3, [r4, #12]
   13e80:	772b      	strb	r3, [r5, #28]
   13e82:	89a3      	ldrh	r3, [r4, #12]
   13e84:	0a1b      	lsrs	r3, r3, #8
   13e86:	776b      	strb	r3, [r5, #29]
   13e88:	89e3      	ldrh	r3, [r4, #14]
   13e8a:	77ab      	strb	r3, [r5, #30]
   13e8c:	7be3      	ldrb	r3, [r4, #15]
   13e8e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   13e90:	7c23      	ldrb	r3, [r4, #16]
   13e92:	76ab      	strb	r3, [r5, #26]
   13e94:	8a23      	ldrh	r3, [r4, #16]
   13e96:	0a1b      	lsrs	r3, r3, #8
   13e98:	76eb      	strb	r3, [r5, #27]
   13e9a:	8a63      	ldrh	r3, [r4, #18]
   13e9c:	752b      	strb	r3, [r5, #20]
   13e9e:	8a63      	ldrh	r3, [r4, #18]
   13ea0:	0a1b      	lsrs	r3, r3, #8
   13ea2:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   13ea4:	4b0b      	ldr	r3, [pc, #44]	; (13ed4 <f_sync+0x84>)
   13ea6:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   13ea8:	75a8      	strb	r0, [r5, #22]
   13eaa:	0a03      	lsrs	r3, r0, #8
   13eac:	75eb      	strb	r3, [r5, #23]
   13eae:	0c03      	lsrs	r3, r0, #16
   13eb0:	762b      	strb	r3, [r5, #24]
   13eb2:	0e00      	lsrs	r0, r0, #24
   13eb4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   13eb6:	79a3      	ldrb	r3, [r4, #6]
   13eb8:	2220      	movs	r2, #32
   13eba:	4393      	bics	r3, r2
   13ebc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   13ebe:	2301      	movs	r3, #1
   13ec0:	6822      	ldr	r2, [r4, #0]
   13ec2:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   13ec4:	6820      	ldr	r0, [r4, #0]
   13ec6:	4b04      	ldr	r3, [pc, #16]	; (13ed8 <f_sync+0x88>)
   13ec8:	4798      	blx	r3
   13eca:	e7cc      	b.n	13e66 <f_sync+0x16>
   13ecc:	00012599 	.word	0x00012599
   13ed0:	00012a1d 	.word	0x00012a1d
   13ed4:	000124ed 	.word	0x000124ed
   13ed8:	00013475 	.word	0x00013475

00013edc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   13edc:	b510      	push	{r4, lr}
   13ede:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   13ee0:	4b03      	ldr	r3, [pc, #12]	; (13ef0 <f_close+0x14>)
   13ee2:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   13ee4:	2800      	cmp	r0, #0
   13ee6:	d101      	bne.n	13eec <f_close+0x10>
   13ee8:	2300      	movs	r3, #0
   13eea:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   13eec:	bd10      	pop	{r4, pc}
   13eee:	46c0      	nop			; (mov r8, r8)
   13ef0:	00013e51 	.word	0x00013e51

00013ef4 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13ef4:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   13ef6:	287f      	cmp	r0, #127	; 0x7f
   13ef8:	d911      	bls.n	13f1e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   13efa:	2900      	cmp	r1, #0
   13efc:	d111      	bne.n	13f22 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   13efe:	28c7      	cmp	r0, #199	; 0xc7
   13f00:	d017      	beq.n	13f32 <ff_convert+0x3e>
   13f02:	4a0d      	ldr	r2, [pc, #52]	; (13f38 <ff_convert+0x44>)
   13f04:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   13f06:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   13f08:	8811      	ldrh	r1, [r2, #0]
   13f0a:	4281      	cmp	r1, r0
   13f0c:	d004      	beq.n	13f18 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   13f0e:	3301      	adds	r3, #1
   13f10:	b29b      	uxth	r3, r3
   13f12:	3202      	adds	r2, #2
   13f14:	2b80      	cmp	r3, #128	; 0x80
   13f16:	d1f7      	bne.n	13f08 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   13f18:	3380      	adds	r3, #128	; 0x80
   13f1a:	20ff      	movs	r0, #255	; 0xff
   13f1c:	4003      	ands	r3, r0
		}
	}

	return c;
}
   13f1e:	0018      	movs	r0, r3
   13f20:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   13f22:	2300      	movs	r3, #0
   13f24:	28ff      	cmp	r0, #255	; 0xff
   13f26:	d8fa      	bhi.n	13f1e <ff_convert+0x2a>
   13f28:	3880      	subs	r0, #128	; 0x80
   13f2a:	0040      	lsls	r0, r0, #1
   13f2c:	4b02      	ldr	r3, [pc, #8]	; (13f38 <ff_convert+0x44>)
   13f2e:	5ac3      	ldrh	r3, [r0, r3]
   13f30:	e7f5      	b.n	13f1e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   13f32:	2300      	movs	r3, #0
   13f34:	e7f0      	b.n	13f18 <ff_convert+0x24>
   13f36:	46c0      	nop			; (mov r8, r8)
   13f38:	0001a8f4 	.word	0x0001a8f4

00013f3c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13f3c:	2861      	cmp	r0, #97	; 0x61
   13f3e:	d014      	beq.n	13f6a <ff_wtoupper+0x2e>
   13f40:	4b0b      	ldr	r3, [pc, #44]	; (13f70 <ff_wtoupper+0x34>)
   13f42:	3304      	adds	r3, #4
   13f44:	2101      	movs	r1, #1
   13f46:	2262      	movs	r2, #98	; 0x62
   13f48:	4290      	cmp	r0, r2
   13f4a:	d007      	beq.n	13f5c <ff_wtoupper+0x20>
   13f4c:	3101      	adds	r1, #1
   13f4e:	3302      	adds	r3, #2
   13f50:	1e9a      	subs	r2, r3, #2
   13f52:	8812      	ldrh	r2, [r2, #0]
   13f54:	2a00      	cmp	r2, #0
   13f56:	d1f7      	bne.n	13f48 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   13f58:	0003      	movs	r3, r0
   13f5a:	e004      	b.n	13f66 <ff_wtoupper+0x2a>
   13f5c:	1e03      	subs	r3, r0, #0
   13f5e:	d002      	beq.n	13f66 <ff_wtoupper+0x2a>
   13f60:	0049      	lsls	r1, r1, #1
   13f62:	4b04      	ldr	r3, [pc, #16]	; (13f74 <ff_wtoupper+0x38>)
   13f64:	5acb      	ldrh	r3, [r1, r3]
}
   13f66:	0018      	movs	r0, r3
   13f68:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13f6a:	2100      	movs	r1, #0
   13f6c:	e7f8      	b.n	13f60 <ff_wtoupper+0x24>
   13f6e:	46c0      	nop			; (mov r8, r8)
   13f70:	0001a9f4 	.word	0x0001a9f4
   13f74:	0001abd4 	.word	0x0001abd4

00013f78 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   13f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f7a:	46de      	mov	lr, fp
   13f7c:	4657      	mov	r7, sl
   13f7e:	464e      	mov	r6, r9
   13f80:	4645      	mov	r5, r8
   13f82:	b5e0      	push	{r5, r6, r7, lr}
   13f84:	b083      	sub	sp, #12
   13f86:	0007      	movs	r7, r0
   13f88:	4688      	mov	r8, r1
   13f8a:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   13f8c:	2400      	movs	r4, #0
   13f8e:	2900      	cmp	r1, #0
   13f90:	dd18      	ble.n	13fc4 <sendPacket+0x4c>
   13f92:	4b15      	ldr	r3, [pc, #84]	; (13fe8 <sendPacket+0x70>)
   13f94:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13f96:	4b15      	ldr	r3, [pc, #84]	; (13fec <sendPacket+0x74>)
   13f98:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   13f9a:	9801      	ldr	r0, [sp, #4]
   13f9c:	47d0      	blx	sl
   13f9e:	2800      	cmp	r0, #0
   13fa0:	d110      	bne.n	13fc4 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13fa2:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   13fa4:	68f3      	ldr	r3, [r6, #12]
   13fa6:	4699      	mov	r9, r3
   13fa8:	693b      	ldr	r3, [r7, #16]
   13faa:	191d      	adds	r5, r3, r4
   13fac:	9801      	ldr	r0, [sp, #4]
   13fae:	47d8      	blx	fp
   13fb0:	0003      	movs	r3, r0
   13fb2:	4642      	mov	r2, r8
   13fb4:	0029      	movs	r1, r5
   13fb6:	0030      	movs	r0, r6
   13fb8:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   13fba:	2800      	cmp	r0, #0
   13fbc:	db02      	blt.n	13fc4 <sendPacket+0x4c>
            break;
        sent += rc;
   13fbe:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   13fc0:	45a0      	cmp	r8, r4
   13fc2:	dcea      	bgt.n	13f9a <sendPacket+0x22>
    }
    if (sent == length)
   13fc4:	45a0      	cmp	r8, r4
   13fc6:	d10c      	bne.n	13fe2 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   13fc8:	69b9      	ldr	r1, [r7, #24]
   13fca:	0038      	movs	r0, r7
   13fcc:	3054      	adds	r0, #84	; 0x54
   13fce:	4b08      	ldr	r3, [pc, #32]	; (13ff0 <sendPacket+0x78>)
   13fd0:	4798      	blx	r3
        rc = SUCCESS;
   13fd2:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   13fd4:	b003      	add	sp, #12
   13fd6:	bc3c      	pop	{r2, r3, r4, r5}
   13fd8:	4690      	mov	r8, r2
   13fda:	4699      	mov	r9, r3
   13fdc:	46a2      	mov	sl, r4
   13fde:	46ab      	mov	fp, r5
   13fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   13fe2:	2001      	movs	r0, #1
   13fe4:	4240      	negs	r0, r0
    return rc;
   13fe6:	e7f5      	b.n	13fd4 <sendPacket+0x5c>
   13fe8:	000148f5 	.word	0x000148f5
   13fec:	00014929 	.word	0x00014929
   13ff0:	00014915 	.word	0x00014915

00013ff4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13ff4:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   13ff6:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   13ff8:	2100      	movs	r1, #0
   13ffa:	6241      	str	r1, [r0, #36]	; 0x24
   13ffc:	62c1      	str	r1, [r0, #44]	; 0x2c
   13ffe:	6341      	str	r1, [r0, #52]	; 0x34
   14000:	63c1      	str	r1, [r0, #60]	; 0x3c
   14002:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   14004:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   14006:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   14008:	9b02      	ldr	r3, [sp, #8]
   1400a:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   1400c:	9b03      	ldr	r3, [sp, #12]
   1400e:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   14010:	9b04      	ldr	r3, [sp, #16]
   14012:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   14014:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   14016:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   14018:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   1401a:	2301      	movs	r3, #1
   1401c:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   1401e:	3054      	adds	r0, #84	; 0x54
   14020:	4b01      	ldr	r3, [pc, #4]	; (14028 <MQTTClientInit+0x34>)
   14022:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   14024:	bd10      	pop	{r4, pc}
   14026:	46c0      	nop			; (mov r8, r8)
   14028:	0001493d 	.word	0x0001493d

0001402c <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1402c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1402e:	46de      	mov	lr, fp
   14030:	4657      	mov	r7, sl
   14032:	464e      	mov	r6, r9
   14034:	4645      	mov	r5, r8
   14036:	b5e0      	push	{r5, r6, r7, lr}
   14038:	b085      	sub	sp, #20
   1403a:	4682      	mov	sl, r0
   1403c:	000f      	movs	r7, r1
   1403e:	4691      	mov	r9, r2
   14040:	0004      	movs	r4, r0
   14042:	3424      	adds	r4, #36	; 0x24
   14044:	234c      	movs	r3, #76	; 0x4c
   14046:	4453      	add	r3, sl
   14048:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   1404a:	2301      	movs	r3, #1
   1404c:	425b      	negs	r3, r3
   1404e:	9301      	str	r3, [sp, #4]
   14050:	e056      	b.n	14100 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   14052:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   14054:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   14056:	687a      	ldr	r2, [r7, #4]
   14058:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   1405a:	780a      	ldrb	r2, [r1, #0]
   1405c:	2a00      	cmp	r2, #0
   1405e:	d04a      	beq.n	140f6 <deliverMessage+0xca>
   14060:	42b3      	cmp	r3, r6
   14062:	d24a      	bcs.n	140fa <deliverMessage+0xce>
   14064:	3101      	adds	r1, #1
   14066:	1e70      	subs	r0, r6, #1
   14068:	e008      	b.n	1407c <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   1406a:	2a2f      	cmp	r2, #47	; 0x2f
   1406c:	d10f      	bne.n	1408e <deliverMessage+0x62>
        curn++;
   1406e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   14070:	780a      	ldrb	r2, [r1, #0]
   14072:	2a00      	cmp	r2, #0
   14074:	d03f      	beq.n	140f6 <deliverMessage+0xca>
   14076:	429e      	cmp	r6, r3
   14078:	d93f      	bls.n	140fa <deliverMessage+0xce>
   1407a:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   1407c:	781d      	ldrb	r5, [r3, #0]
   1407e:	2d2f      	cmp	r5, #47	; 0x2f
   14080:	d0f3      	beq.n	1406a <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   14082:	2a2b      	cmp	r2, #43	; 0x2b
   14084:	d008      	beq.n	14098 <deliverMessage+0x6c>
   14086:	2a23      	cmp	r2, #35	; 0x23
   14088:	d013      	beq.n	140b2 <deliverMessage+0x86>
   1408a:	4295      	cmp	r5, r2
   1408c:	d0ef      	beq.n	1406e <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   1408e:	429e      	cmp	r6, r3
   14090:	d133      	bne.n	140fa <deliverMessage+0xce>
   14092:	2a00      	cmp	r2, #0
   14094:	d03d      	beq.n	14112 <deliverMessage+0xe6>
   14096:	e030      	b.n	140fa <deliverMessage+0xce>
            char* nextpos = curn + 1;
   14098:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   1409a:	42ae      	cmp	r6, r5
   1409c:	d927      	bls.n	140ee <deliverMessage+0xc2>
   1409e:	785a      	ldrb	r2, [r3, #1]
   140a0:	2a2f      	cmp	r2, #47	; 0x2f
   140a2:	d01f      	beq.n	140e4 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   140a4:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   140a6:	4283      	cmp	r3, r0
   140a8:	d0e1      	beq.n	1406e <deliverMessage+0x42>
   140aa:	785a      	ldrb	r2, [r3, #1]
   140ac:	2a2f      	cmp	r2, #47	; 0x2f
   140ae:	d1f9      	bne.n	140a4 <deliverMessage+0x78>
   140b0:	e7dd      	b.n	1406e <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   140b2:	1e73      	subs	r3, r6, #1
   140b4:	e7db      	b.n	1406e <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   140b6:	9b01      	ldr	r3, [sp, #4]
   140b8:	3301      	adds	r3, #1
   140ba:	d007      	beq.n	140cc <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   140bc:	9801      	ldr	r0, [sp, #4]
   140be:	b005      	add	sp, #20
   140c0:	bc3c      	pop	{r2, r3, r4, r5}
   140c2:	4690      	mov	r8, r2
   140c4:	4699      	mov	r9, r3
   140c6:	46a2      	mov	sl, r4
   140c8:	46ab      	mov	fp, r5
   140ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   140cc:	4653      	mov	r3, sl
   140ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   140d0:	2b00      	cmp	r3, #0
   140d2:	d0f3      	beq.n	140bc <deliverMessage+0x90>
    md->topicName = aTopicName;
   140d4:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   140d6:	464a      	mov	r2, r9
   140d8:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   140da:	a802      	add	r0, sp, #8
   140dc:	4798      	blx	r3
        rc = SUCCESS;
   140de:	2300      	movs	r3, #0
   140e0:	9301      	str	r3, [sp, #4]
    return rc;
   140e2:	e7eb      	b.n	140bc <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   140e4:	780a      	ldrb	r2, [r1, #0]
   140e6:	2a00      	cmp	r2, #0
   140e8:	d007      	beq.n	140fa <deliverMessage+0xce>
        curn++;
   140ea:	002b      	movs	r3, r5
   140ec:	e7c5      	b.n	1407a <deliverMessage+0x4e>
   140ee:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   140f0:	780a      	ldrb	r2, [r1, #0]
   140f2:	2a00      	cmp	r2, #0
   140f4:	d101      	bne.n	140fa <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   140f6:	429e      	cmp	r6, r3
   140f8:	d00b      	beq.n	14112 <deliverMessage+0xe6>
   140fa:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   140fc:	4544      	cmp	r4, r8
   140fe:	d0da      	beq.n	140b6 <deliverMessage+0x8a>
   14100:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   14102:	6821      	ldr	r1, [r4, #0]
   14104:	2900      	cmp	r1, #0
   14106:	d0f8      	beq.n	140fa <deliverMessage+0xce>
   14108:	0038      	movs	r0, r7
   1410a:	4b08      	ldr	r3, [pc, #32]	; (1412c <deliverMessage+0x100>)
   1410c:	4798      	blx	r3
   1410e:	2800      	cmp	r0, #0
   14110:	d09f      	beq.n	14052 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   14112:	465b      	mov	r3, fp
   14114:	685b      	ldr	r3, [r3, #4]
   14116:	2b00      	cmp	r3, #0
   14118:	d0ef      	beq.n	140fa <deliverMessage+0xce>
    md->topicName = aTopicName;
   1411a:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   1411c:	464a      	mov	r2, r9
   1411e:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   14120:	a802      	add	r0, sp, #8
   14122:	4798      	blx	r3
                rc = SUCCESS;
   14124:	2300      	movs	r3, #0
   14126:	9301      	str	r3, [sp, #4]
   14128:	e7e7      	b.n	140fa <deliverMessage+0xce>
   1412a:	46c0      	nop			; (mov r8, r8)
   1412c:	0001526d 	.word	0x0001526d

00014130 <keepalive>:


int keepalive(MQTTClient* c)
{
   14130:	b510      	push	{r4, lr}
   14132:	b082      	sub	sp, #8
   14134:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   14136:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   14138:	69a3      	ldr	r3, [r4, #24]
   1413a:	2b00      	cmp	r3, #0
   1413c:	d101      	bne.n	14142 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   1413e:	b002      	add	sp, #8
   14140:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   14142:	0020      	movs	r0, r4
   14144:	3054      	adds	r0, #84	; 0x54
   14146:	4b14      	ldr	r3, [pc, #80]	; (14198 <keepalive+0x68>)
   14148:	4798      	blx	r3
   1414a:	2800      	cmp	r0, #0
   1414c:	d01d      	beq.n	1418a <keepalive+0x5a>
        if (!c->ping_outstanding)
   1414e:	7f23      	ldrb	r3, [r4, #28]
   14150:	2b00      	cmp	r3, #0
   14152:	d11d      	bne.n	14190 <keepalive+0x60>
            TimerInit(&timer);
   14154:	4668      	mov	r0, sp
   14156:	4b11      	ldr	r3, [pc, #68]	; (1419c <keepalive+0x6c>)
   14158:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1415a:	21fa      	movs	r1, #250	; 0xfa
   1415c:	0089      	lsls	r1, r1, #2
   1415e:	4668      	mov	r0, sp
   14160:	4b0f      	ldr	r3, [pc, #60]	; (141a0 <keepalive+0x70>)
   14162:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   14164:	68a1      	ldr	r1, [r4, #8]
   14166:	6920      	ldr	r0, [r4, #16]
   14168:	4b0e      	ldr	r3, [pc, #56]	; (141a4 <keepalive+0x74>)
   1416a:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1416c:	2800      	cmp	r0, #0
   1416e:	dd09      	ble.n	14184 <keepalive+0x54>
   14170:	466a      	mov	r2, sp
   14172:	0001      	movs	r1, r0
   14174:	0020      	movs	r0, r4
   14176:	4b0c      	ldr	r3, [pc, #48]	; (141a8 <keepalive+0x78>)
   14178:	4798      	blx	r3
   1417a:	2800      	cmp	r0, #0
   1417c:	d1df      	bne.n	1413e <keepalive+0xe>
                c->ping_outstanding = 1;
   1417e:	2301      	movs	r3, #1
   14180:	7723      	strb	r3, [r4, #28]
   14182:	e7dc      	b.n	1413e <keepalive+0xe>
    int rc = FAILURE;
   14184:	2001      	movs	r0, #1
   14186:	4240      	negs	r0, r0
   14188:	e7d9      	b.n	1413e <keepalive+0xe>
   1418a:	2001      	movs	r0, #1
   1418c:	4240      	negs	r0, r0
   1418e:	e7d6      	b.n	1413e <keepalive+0xe>
   14190:	2001      	movs	r0, #1
   14192:	4240      	negs	r0, r0
    return rc;
   14194:	e7d3      	b.n	1413e <keepalive+0xe>
   14196:	46c0      	nop			; (mov r8, r8)
   14198:	000148f5 	.word	0x000148f5
   1419c:	0001493d 	.word	0x0001493d
   141a0:	00014905 	.word	0x00014905
   141a4:	00014f55 	.word	0x00014f55
   141a8:	00013f79 	.word	0x00013f79

000141ac <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   141ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   141ae:	46de      	mov	lr, fp
   141b0:	464f      	mov	r7, r9
   141b2:	4646      	mov	r6, r8
   141b4:	b5c0      	push	{r6, r7, lr}
   141b6:	b090      	sub	sp, #64	; 0x40
   141b8:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   141ba:	6d05      	ldr	r5, [r0, #80]	; 0x50
   141bc:	68ae      	ldr	r6, [r5, #8]
   141be:	6947      	ldr	r7, [r0, #20]
   141c0:	9107      	str	r1, [sp, #28]
   141c2:	0008      	movs	r0, r1
   141c4:	4b65      	ldr	r3, [pc, #404]	; (1435c <cycle+0x1b0>)
   141c6:	4798      	blx	r3
   141c8:	0003      	movs	r3, r0
   141ca:	2201      	movs	r2, #1
   141cc:	0039      	movs	r1, r7
   141ce:	0028      	movs	r0, r5
   141d0:	47b0      	blx	r6
   141d2:	0005      	movs	r5, r0
   141d4:	2801      	cmp	r0, #1
   141d6:	d000      	beq.n	141da <cycle+0x2e>
   141d8:	e0bd      	b.n	14356 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   141da:	9807      	ldr	r0, [sp, #28]
   141dc:	4b5f      	ldr	r3, [pc, #380]	; (1435c <cycle+0x1b0>)
   141de:	4798      	blx	r3
   141e0:	9006      	str	r0, [sp, #24]
   141e2:	2604      	movs	r6, #4
    *value = 0;
   141e4:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   141e6:	237f      	movs	r3, #127	; 0x7f
   141e8:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   141ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
   141ec:	6883      	ldr	r3, [r0, #8]
   141ee:	4698      	mov	r8, r3
   141f0:	9b06      	ldr	r3, [sp, #24]
   141f2:	2201      	movs	r2, #1
   141f4:	a90c      	add	r1, sp, #48	; 0x30
   141f6:	47c0      	blx	r8
        if (rc != 1)
   141f8:	2801      	cmp	r0, #1
   141fa:	d10e      	bne.n	1421a <cycle+0x6e>
        *value += (i & 127) * multiplier;
   141fc:	ab02      	add	r3, sp, #8
   141fe:	2228      	movs	r2, #40	; 0x28
   14200:	189b      	adds	r3, r3, r2
   14202:	781b      	ldrb	r3, [r3, #0]
   14204:	465a      	mov	r2, fp
   14206:	401a      	ands	r2, r3
   14208:	436a      	muls	r2, r5
   1420a:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   1420c:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   1420e:	b25b      	sxtb	r3, r3
   14210:	2b00      	cmp	r3, #0
   14212:	da02      	bge.n	1421a <cycle+0x6e>
   14214:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14216:	2e00      	cmp	r6, #0
   14218:	d1e7      	bne.n	141ea <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1421a:	6963      	ldr	r3, [r4, #20]
   1421c:	1c58      	adds	r0, r3, #1
   1421e:	0039      	movs	r1, r7
   14220:	4b4f      	ldr	r3, [pc, #316]	; (14360 <cycle+0x1b4>)
   14222:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   14224:	2f00      	cmp	r7, #0
   14226:	dd10      	ble.n	1424a <cycle+0x9e>
   14228:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1422a:	68b3      	ldr	r3, [r6, #8]
   1422c:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1422e:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   14230:	6963      	ldr	r3, [r4, #20]
   14232:	181d      	adds	r5, r3, r0
   14234:	9807      	ldr	r0, [sp, #28]
   14236:	4b49      	ldr	r3, [pc, #292]	; (1435c <cycle+0x1b0>)
   14238:	4798      	blx	r3
   1423a:	0003      	movs	r3, r0
   1423c:	003a      	movs	r2, r7
   1423e:	0029      	movs	r1, r5
   14240:	0030      	movs	r0, r6
   14242:	47c8      	blx	r9
   14244:	42b8      	cmp	r0, r7
   14246:	d000      	beq.n	1424a <cycle+0x9e>
   14248:	e085      	b.n	14356 <cycle+0x1aa>
    header.byte = c->readbuf[0];
   1424a:	6963      	ldr	r3, [r4, #20]
   1424c:	781d      	ldrb	r5, [r3, #0]
   1424e:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   14250:	2d05      	cmp	r5, #5
   14252:	d051      	beq.n	142f8 <cycle+0x14c>
   14254:	2d0d      	cmp	r5, #13
   14256:	d06e      	beq.n	14336 <cycle+0x18a>
        rc = SUCCESS;
   14258:	2600      	movs	r6, #0
    switch (packet_type)
   1425a:	2d03      	cmp	r5, #3
   1425c:	d16e      	bne.n	1433c <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1425e:	68e2      	ldr	r2, [r4, #12]
   14260:	9204      	str	r2, [sp, #16]
   14262:	9303      	str	r3, [sp, #12]
   14264:	ab0f      	add	r3, sp, #60	; 0x3c
   14266:	9302      	str	r3, [sp, #8]
   14268:	ab0e      	add	r3, sp, #56	; 0x38
   1426a:	9301      	str	r3, [sp, #4]
   1426c:	ab09      	add	r3, sp, #36	; 0x24
   1426e:	9300      	str	r3, [sp, #0]
   14270:	ab0d      	add	r3, sp, #52	; 0x34
   14272:	2229      	movs	r2, #41	; 0x29
   14274:	a902      	add	r1, sp, #8
   14276:	468c      	mov	ip, r1
   14278:	4462      	add	r2, ip
   1427a:	a908      	add	r1, sp, #32
   1427c:	202a      	movs	r0, #42	; 0x2a
   1427e:	4460      	add	r0, ip
   14280:	4e38      	ldr	r6, [pc, #224]	; (14364 <cycle+0x1b8>)
   14282:	47b0      	blx	r6
        rc = SUCCESS;
   14284:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   14286:	2801      	cmp	r0, #1
   14288:	d15b      	bne.n	14342 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1428a:	ae0c      	add	r6, sp, #48	; 0x30
   1428c:	ab02      	add	r3, sp, #8
   1428e:	7e1b      	ldrb	r3, [r3, #24]
   14290:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   14292:	0032      	movs	r2, r6
   14294:	a909      	add	r1, sp, #36	; 0x24
   14296:	0020      	movs	r0, r4
   14298:	4b33      	ldr	r3, [pc, #204]	; (14368 <cycle+0x1bc>)
   1429a:	4798      	blx	r3
            if (msg.qos != QOS0)
   1429c:	7833      	ldrb	r3, [r6, #0]
   1429e:	2b00      	cmp	r3, #0
   142a0:	d028      	beq.n	142f4 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   142a2:	2b01      	cmp	r3, #1
   142a4:	d004      	beq.n	142b0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   142a6:	2b02      	cmp	r3, #2
   142a8:	d016      	beq.n	142d8 <cycle+0x12c>
   142aa:	2601      	movs	r6, #1
   142ac:	4276      	negs	r6, r6
   142ae:	e048      	b.n	14342 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   142b0:	ab0c      	add	r3, sp, #48	; 0x30
   142b2:	889b      	ldrh	r3, [r3, #4]
   142b4:	9300      	str	r3, [sp, #0]
   142b6:	2300      	movs	r3, #0
   142b8:	2204      	movs	r2, #4
   142ba:	68a1      	ldr	r1, [r4, #8]
   142bc:	6920      	ldr	r0, [r4, #16]
   142be:	4e2b      	ldr	r6, [pc, #172]	; (1436c <cycle+0x1c0>)
   142c0:	47b0      	blx	r6
   142c2:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   142c4:	2900      	cmp	r1, #0
   142c6:	dd12      	ble.n	142ee <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   142c8:	9a07      	ldr	r2, [sp, #28]
   142ca:	0020      	movs	r0, r4
   142cc:	4b28      	ldr	r3, [pc, #160]	; (14370 <cycle+0x1c4>)
   142ce:	4798      	blx	r3
   142d0:	0006      	movs	r6, r0
                if (rc == FAILURE)
   142d2:	1c43      	adds	r3, r0, #1
   142d4:	d132      	bne.n	1433c <cycle+0x190>
   142d6:	e034      	b.n	14342 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   142d8:	ab0c      	add	r3, sp, #48	; 0x30
   142da:	889b      	ldrh	r3, [r3, #4]
   142dc:	9300      	str	r3, [sp, #0]
   142de:	2300      	movs	r3, #0
   142e0:	2205      	movs	r2, #5
   142e2:	68a1      	ldr	r1, [r4, #8]
   142e4:	6920      	ldr	r0, [r4, #16]
   142e6:	4e21      	ldr	r6, [pc, #132]	; (1436c <cycle+0x1c0>)
   142e8:	47b0      	blx	r6
   142ea:	0001      	movs	r1, r0
   142ec:	e7ea      	b.n	142c4 <cycle+0x118>
   142ee:	2601      	movs	r6, #1
   142f0:	4276      	negs	r6, r6
   142f2:	e026      	b.n	14342 <cycle+0x196>
        rc = SUCCESS;
   142f4:	2600      	movs	r6, #0
   142f6:	e021      	b.n	1433c <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   142f8:	68e2      	ldr	r2, [r4, #12]
   142fa:	9200      	str	r2, [sp, #0]
   142fc:	aa0c      	add	r2, sp, #48	; 0x30
   142fe:	a908      	add	r1, sp, #32
   14300:	a809      	add	r0, sp, #36	; 0x24
   14302:	4e1c      	ldr	r6, [pc, #112]	; (14374 <cycle+0x1c8>)
   14304:	47b0      	blx	r6
   14306:	2801      	cmp	r0, #1
   14308:	d002      	beq.n	14310 <cycle+0x164>
   1430a:	2601      	movs	r6, #1
   1430c:	4276      	negs	r6, r6
   1430e:	e01b      	b.n	14348 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   14310:	ab0c      	add	r3, sp, #48	; 0x30
   14312:	881b      	ldrh	r3, [r3, #0]
   14314:	9300      	str	r3, [sp, #0]
   14316:	2300      	movs	r3, #0
   14318:	2206      	movs	r2, #6
   1431a:	68a1      	ldr	r1, [r4, #8]
   1431c:	6920      	ldr	r0, [r4, #16]
   1431e:	4e13      	ldr	r6, [pc, #76]	; (1436c <cycle+0x1c0>)
   14320:	47b0      	blx	r6
   14322:	2800      	cmp	r0, #0
   14324:	ddf1      	ble.n	1430a <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   14326:	9a07      	ldr	r2, [sp, #28]
   14328:	0001      	movs	r1, r0
   1432a:	0020      	movs	r0, r4
   1432c:	4b10      	ldr	r3, [pc, #64]	; (14370 <cycle+0x1c4>)
   1432e:	4798      	blx	r3
   14330:	1e06      	subs	r6, r0, #0
   14332:	d1ea      	bne.n	1430a <cycle+0x15e>
   14334:	e002      	b.n	1433c <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   14336:	2300      	movs	r3, #0
   14338:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   1433a:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   1433c:	0020      	movs	r0, r4
   1433e:	4b0e      	ldr	r3, [pc, #56]	; (14378 <cycle+0x1cc>)
   14340:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   14342:	2e00      	cmp	r6, #0
   14344:	d100      	bne.n	14348 <cycle+0x19c>
   14346:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   14348:	0030      	movs	r0, r6
   1434a:	b010      	add	sp, #64	; 0x40
   1434c:	bc1c      	pop	{r2, r3, r4}
   1434e:	4690      	mov	r8, r2
   14350:	4699      	mov	r9, r3
   14352:	46a3      	mov	fp, r4
   14354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14356:	4d09      	ldr	r5, [pc, #36]	; (1437c <cycle+0x1d0>)
        rc = SUCCESS;
   14358:	2600      	movs	r6, #0
   1435a:	e7ef      	b.n	1433c <cycle+0x190>
   1435c:	00014929 	.word	0x00014929
   14360:	0001506d 	.word	0x0001506d
   14364:	00014f65 	.word	0x00014f65
   14368:	0001402d 	.word	0x0001402d
   1436c:	000153a1 	.word	0x000153a1
   14370:	00013f79 	.word	0x00013f79
   14374:	00014ffd 	.word	0x00014ffd
   14378:	00014131 	.word	0x00014131
   1437c:	0000ffff 	.word	0x0000ffff

00014380 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   14380:	b570      	push	{r4, r5, r6, lr}
   14382:	b082      	sub	sp, #8
   14384:	0005      	movs	r5, r0
   14386:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   14388:	4668      	mov	r0, sp
   1438a:	4b0a      	ldr	r3, [pc, #40]	; (143b4 <MQTTYield+0x34>)
   1438c:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1438e:	0021      	movs	r1, r4
   14390:	4668      	mov	r0, sp
   14392:	4b09      	ldr	r3, [pc, #36]	; (143b8 <MQTTYield+0x38>)
   14394:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   14396:	4c09      	ldr	r4, [pc, #36]	; (143bc <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   14398:	4e09      	ldr	r6, [pc, #36]	; (143c0 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   1439a:	4669      	mov	r1, sp
   1439c:	0028      	movs	r0, r5
   1439e:	47a0      	blx	r4
   143a0:	1c43      	adds	r3, r0, #1
   143a2:	d004      	beq.n	143ae <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   143a4:	4668      	mov	r0, sp
   143a6:	47b0      	blx	r6
   143a8:	2800      	cmp	r0, #0
   143aa:	d0f6      	beq.n	1439a <MQTTYield+0x1a>
    int rc = SUCCESS;
   143ac:	2000      	movs	r0, #0
        
    return rc;
}
   143ae:	b002      	add	sp, #8
   143b0:	bd70      	pop	{r4, r5, r6, pc}
   143b2:	46c0      	nop			; (mov r8, r8)
   143b4:	0001493d 	.word	0x0001493d
   143b8:	00014905 	.word	0x00014905
   143bc:	000141ad 	.word	0x000141ad
   143c0:	000148f5 	.word	0x000148f5

000143c4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   143c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143c6:	b083      	sub	sp, #12
   143c8:	9001      	str	r0, [sp, #4]
   143ca:	000e      	movs	r6, r1
   143cc:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   143ce:	2401      	movs	r4, #1
   143d0:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   143d2:	4f08      	ldr	r7, [pc, #32]	; (143f4 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   143d4:	4d08      	ldr	r5, [pc, #32]	; (143f8 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   143d6:	9800      	ldr	r0, [sp, #0]
   143d8:	47b8      	blx	r7
   143da:	2800      	cmp	r0, #0
   143dc:	d106      	bne.n	143ec <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   143de:	9900      	ldr	r1, [sp, #0]
   143e0:	9801      	ldr	r0, [sp, #4]
   143e2:	47a8      	blx	r5
   143e4:	0004      	movs	r4, r0
   143e6:	42b0      	cmp	r0, r6
   143e8:	d1f5      	bne.n	143d6 <waitfor+0x12>
   143ea:	0034      	movs	r4, r6
    
    return rc;
}
   143ec:	0020      	movs	r0, r4
   143ee:	b003      	add	sp, #12
   143f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143f2:	46c0      	nop			; (mov r8, r8)
   143f4:	000148f5 	.word	0x000148f5
   143f8:	000141ad 	.word	0x000141ad

000143fc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   143fc:	b530      	push	{r4, r5, lr}
   143fe:	b09b      	sub	sp, #108	; 0x6c
   14400:	0004      	movs	r4, r0
   14402:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   14404:	2258      	movs	r2, #88	; 0x58
   14406:	4928      	ldr	r1, [pc, #160]	; (144a8 <MQTTConnect+0xac>)
   14408:	a802      	add	r0, sp, #8
   1440a:	4b28      	ldr	r3, [pc, #160]	; (144ac <MQTTConnect+0xb0>)
   1440c:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1440e:	6a23      	ldr	r3, [r4, #32]
   14410:	2b00      	cmp	r3, #0
   14412:	d13f      	bne.n	14494 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   14414:	a818      	add	r0, sp, #96	; 0x60
   14416:	4b26      	ldr	r3, [pc, #152]	; (144b0 <MQTTConnect+0xb4>)
   14418:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1441a:	6861      	ldr	r1, [r4, #4]
   1441c:	a818      	add	r0, sp, #96	; 0x60
   1441e:	4b25      	ldr	r3, [pc, #148]	; (144b4 <MQTTConnect+0xb8>)
   14420:	4798      	blx	r3

    if (options == 0)
   14422:	2d00      	cmp	r5, #0
   14424:	d015      	beq.n	14452 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   14426:	8b29      	ldrh	r1, [r5, #24]
   14428:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1442a:	0020      	movs	r0, r4
   1442c:	3054      	adds	r0, #84	; 0x54
   1442e:	4b22      	ldr	r3, [pc, #136]	; (144b8 <MQTTConnect+0xbc>)
   14430:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   14432:	002a      	movs	r2, r5
   14434:	68a1      	ldr	r1, [r4, #8]
   14436:	6920      	ldr	r0, [r4, #16]
   14438:	4b20      	ldr	r3, [pc, #128]	; (144bc <MQTTConnect+0xc0>)
   1443a:	4798      	blx	r3
   1443c:	2800      	cmp	r0, #0
   1443e:	dd2c      	ble.n	1449a <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   14440:	aa18      	add	r2, sp, #96	; 0x60
   14442:	0001      	movs	r1, r0
   14444:	0020      	movs	r0, r4
   14446:	4b1e      	ldr	r3, [pc, #120]	; (144c0 <MQTTConnect+0xc4>)
   14448:	4798      	blx	r3
   1444a:	2800      	cmp	r0, #0
   1444c:	d003      	beq.n	14456 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   1444e:	b01b      	add	sp, #108	; 0x6c
   14450:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   14452:	ad02      	add	r5, sp, #8
   14454:	e7e7      	b.n	14426 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   14456:	aa18      	add	r2, sp, #96	; 0x60
   14458:	2102      	movs	r1, #2
   1445a:	0020      	movs	r0, r4
   1445c:	4b19      	ldr	r3, [pc, #100]	; (144c4 <MQTTConnect+0xc8>)
   1445e:	4798      	blx	r3
   14460:	2802      	cmp	r0, #2
   14462:	d11d      	bne.n	144a0 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   14464:	466b      	mov	r3, sp
   14466:	1d99      	adds	r1, r3, #6
   14468:	23ff      	movs	r3, #255	; 0xff
   1446a:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   1446c:	466b      	mov	r3, sp
   1446e:	1dd8      	adds	r0, r3, #7
   14470:	2300      	movs	r3, #0
   14472:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   14474:	68e3      	ldr	r3, [r4, #12]
   14476:	6962      	ldr	r2, [r4, #20]
   14478:	4d13      	ldr	r5, [pc, #76]	; (144c8 <MQTTConnect+0xcc>)
   1447a:	47a8      	blx	r5
   1447c:	2801      	cmp	r0, #1
   1447e:	d002      	beq.n	14486 <MQTTConnect+0x8a>
            rc = FAILURE;
   14480:	2001      	movs	r0, #1
   14482:	4240      	negs	r0, r0
   14484:	e7e3      	b.n	1444e <MQTTConnect+0x52>
            rc = connack_rc;
   14486:	466b      	mov	r3, sp
   14488:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   1448a:	2800      	cmp	r0, #0
   1448c:	d1df      	bne.n	1444e <MQTTConnect+0x52>
        c->isconnected = 1;
   1448e:	2301      	movs	r3, #1
   14490:	6223      	str	r3, [r4, #32]
    return rc;
   14492:	e7dc      	b.n	1444e <MQTTConnect+0x52>
    int rc = FAILURE;
   14494:	2001      	movs	r0, #1
   14496:	4240      	negs	r0, r0
   14498:	e7d9      	b.n	1444e <MQTTConnect+0x52>
   1449a:	2001      	movs	r0, #1
   1449c:	4240      	negs	r0, r0
   1449e:	e7d6      	b.n	1444e <MQTTConnect+0x52>
        rc = FAILURE;
   144a0:	2001      	movs	r0, #1
   144a2:	4240      	negs	r0, r0
   144a4:	e7d3      	b.n	1444e <MQTTConnect+0x52>
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	0001adb4 	.word	0x0001adb4
   144ac:	00017991 	.word	0x00017991
   144b0:	0001493d 	.word	0x0001493d
   144b4:	00014905 	.word	0x00014905
   144b8:	00014915 	.word	0x00014915
   144bc:	00014d71 	.word	0x00014d71
   144c0:	00013f79 	.word	0x00013f79
   144c4:	000143c5 	.word	0x000143c5
   144c8:	00014eb9 	.word	0x00014eb9

000144cc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   144cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ce:	b091      	sub	sp, #68	; 0x44
   144d0:	0004      	movs	r4, r0
   144d2:	000f      	movs	r7, r1
   144d4:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   144d6:	2300      	movs	r3, #0
   144d8:	930c      	str	r3, [sp, #48]	; 0x30
   144da:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   144dc:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   144de:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   144e0:	6a03      	ldr	r3, [r0, #32]
   144e2:	2b00      	cmp	r3, #0
   144e4:	d05c      	beq.n	145a0 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   144e6:	a80e      	add	r0, sp, #56	; 0x38
   144e8:	4b32      	ldr	r3, [pc, #200]	; (145b4 <MQTTSubscribe+0xe8>)
   144ea:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   144ec:	6861      	ldr	r1, [r4, #4]
   144ee:	a80e      	add	r0, sp, #56	; 0x38
   144f0:	4b31      	ldr	r3, [pc, #196]	; (145b8 <MQTTSubscribe+0xec>)
   144f2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   144f4:	6920      	ldr	r0, [r4, #16]
   144f6:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   144f8:	6823      	ldr	r3, [r4, #0]
   144fa:	4a30      	ldr	r2, [pc, #192]	; (145bc <MQTTSubscribe+0xf0>)
   144fc:	4293      	cmp	r3, r2
   144fe:	d017      	beq.n	14530 <MQTTSubscribe+0x64>
   14500:	3301      	adds	r3, #1
   14502:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   14504:	b29b      	uxth	r3, r3
   14506:	aa0a      	add	r2, sp, #40	; 0x28
   14508:	9202      	str	r2, [sp, #8]
   1450a:	aa0b      	add	r2, sp, #44	; 0x2c
   1450c:	9201      	str	r2, [sp, #4]
   1450e:	2201      	movs	r2, #1
   14510:	9200      	str	r2, [sp, #0]
   14512:	2200      	movs	r2, #0
   14514:	4e2a      	ldr	r6, [pc, #168]	; (145c0 <MQTTSubscribe+0xf4>)
   14516:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   14518:	2800      	cmp	r0, #0
   1451a:	dd44      	ble.n	145a6 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1451c:	aa0e      	add	r2, sp, #56	; 0x38
   1451e:	0001      	movs	r1, r0
   14520:	0020      	movs	r0, r4
   14522:	4b28      	ldr	r3, [pc, #160]	; (145c4 <MQTTSubscribe+0xf8>)
   14524:	4798      	blx	r3
   14526:	1e06      	subs	r6, r0, #0
   14528:	d004      	beq.n	14534 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1452a:	0030      	movs	r0, r6
   1452c:	b011      	add	sp, #68	; 0x44
   1452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   14530:	2301      	movs	r3, #1
   14532:	e7e6      	b.n	14502 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   14534:	aa0e      	add	r2, sp, #56	; 0x38
   14536:	2109      	movs	r1, #9
   14538:	0020      	movs	r0, r4
   1453a:	4b23      	ldr	r3, [pc, #140]	; (145c8 <MQTTSubscribe+0xfc>)
   1453c:	4798      	blx	r3
   1453e:	2809      	cmp	r0, #9
   14540:	d134      	bne.n	145ac <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   14542:	2300      	movs	r3, #0
   14544:	9308      	str	r3, [sp, #32]
   14546:	3b01      	subs	r3, #1
   14548:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1454a:	68e3      	ldr	r3, [r4, #12]
   1454c:	9301      	str	r3, [sp, #4]
   1454e:	6963      	ldr	r3, [r4, #20]
   14550:	9300      	str	r3, [sp, #0]
   14552:	ab09      	add	r3, sp, #36	; 0x24
   14554:	aa08      	add	r2, sp, #32
   14556:	2101      	movs	r1, #1
   14558:	300d      	adds	r0, #13
   1455a:	ad02      	add	r5, sp, #8
   1455c:	46ac      	mov	ip, r5
   1455e:	4460      	add	r0, ip
   14560:	4d1a      	ldr	r5, [pc, #104]	; (145cc <MQTTSubscribe+0x100>)
   14562:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   14564:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   14566:	2801      	cmp	r0, #1
   14568:	d00e      	beq.n	14588 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   1456a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1456c:	2b00      	cmp	r3, #0
   1456e:	d010      	beq.n	14592 <MQTTSubscribe+0xc6>
   14570:	0022      	movs	r2, r4
   14572:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   14574:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   14576:	6810      	ldr	r0, [r2, #0]
   14578:	2800      	cmp	r0, #0
   1457a:	d00b      	beq.n	14594 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1457c:	3301      	adds	r3, #1
   1457e:	3208      	adds	r2, #8
   14580:	2b05      	cmp	r3, #5
   14582:	d1f8      	bne.n	14576 <MQTTSubscribe+0xaa>
   14584:	000e      	movs	r6, r1
   14586:	e7d0      	b.n	1452a <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   14588:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   1458a:	2980      	cmp	r1, #128	; 0x80
   1458c:	d1ed      	bne.n	1456a <MQTTSubscribe+0x9e>
   1458e:	000e      	movs	r6, r1
   14590:	e7cb      	b.n	1452a <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   14592:	0033      	movs	r3, r6
   14594:	00db      	lsls	r3, r3, #3
   14596:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   14598:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   1459a:	9b05      	ldr	r3, [sp, #20]
   1459c:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   1459e:	e7c4      	b.n	1452a <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   145a0:	2601      	movs	r6, #1
   145a2:	4276      	negs	r6, r6
   145a4:	e7c1      	b.n	1452a <MQTTSubscribe+0x5e>
   145a6:	2601      	movs	r6, #1
   145a8:	4276      	negs	r6, r6
   145aa:	e7be      	b.n	1452a <MQTTSubscribe+0x5e>
        rc = FAILURE;
   145ac:	2601      	movs	r6, #1
   145ae:	4276      	negs	r6, r6
    return rc;
   145b0:	e7bb      	b.n	1452a <MQTTSubscribe+0x5e>
   145b2:	46c0      	nop			; (mov r8, r8)
   145b4:	0001493d 	.word	0x0001493d
   145b8:	00014905 	.word	0x00014905
   145bc:	0000ffff 	.word	0x0000ffff
   145c0:	00015439 	.word	0x00015439
   145c4:	00013f79 	.word	0x00013f79
   145c8:	000143c5 	.word	0x000143c5
   145cc:	000154ed 	.word	0x000154ed

000145d0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   145d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   145d2:	b08f      	sub	sp, #60	; 0x3c
   145d4:	0005      	movs	r5, r0
   145d6:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   145d8:	2300      	movs	r3, #0
   145da:	930a      	str	r3, [sp, #40]	; 0x28
   145dc:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   145de:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   145e0:	6a03      	ldr	r3, [r0, #32]
   145e2:	2b00      	cmp	r3, #0
   145e4:	d062      	beq.n	146ac <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   145e6:	a80c      	add	r0, sp, #48	; 0x30
   145e8:	4b36      	ldr	r3, [pc, #216]	; (146c4 <MQTTPublish+0xf4>)
   145ea:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   145ec:	6869      	ldr	r1, [r5, #4]
   145ee:	a80c      	add	r0, sp, #48	; 0x30
   145f0:	4b35      	ldr	r3, [pc, #212]	; (146c8 <MQTTPublish+0xf8>)
   145f2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   145f4:	7823      	ldrb	r3, [r4, #0]
   145f6:	3b01      	subs	r3, #1
   145f8:	2b01      	cmp	r3, #1
   145fa:	d921      	bls.n	14640 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   145fc:	7823      	ldrb	r3, [r4, #0]
   145fe:	68e2      	ldr	r2, [r4, #12]
   14600:	9206      	str	r2, [sp, #24]
   14602:	68a2      	ldr	r2, [r4, #8]
   14604:	9205      	str	r2, [sp, #20]
   14606:	aa09      	add	r2, sp, #36	; 0x24
   14608:	a902      	add	r1, sp, #8
   1460a:	cac1      	ldmia	r2!, {r0, r6, r7}
   1460c:	c1c1      	stmia	r1!, {r0, r6, r7}
   1460e:	88a2      	ldrh	r2, [r4, #4]
   14610:	9201      	str	r2, [sp, #4]
   14612:	7862      	ldrb	r2, [r4, #1]
   14614:	9200      	str	r2, [sp, #0]
   14616:	2200      	movs	r2, #0
   14618:	68a9      	ldr	r1, [r5, #8]
   1461a:	6928      	ldr	r0, [r5, #16]
   1461c:	4e2b      	ldr	r6, [pc, #172]	; (146cc <MQTTPublish+0xfc>)
   1461e:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   14620:	2800      	cmp	r0, #0
   14622:	dd46      	ble.n	146b2 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   14624:	aa0c      	add	r2, sp, #48	; 0x30
   14626:	0001      	movs	r1, r0
   14628:	0028      	movs	r0, r5
   1462a:	4b29      	ldr	r3, [pc, #164]	; (146d0 <MQTTPublish+0x100>)
   1462c:	4798      	blx	r3
   1462e:	2800      	cmp	r0, #0
   14630:	d104      	bne.n	1463c <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   14632:	7823      	ldrb	r3, [r4, #0]
   14634:	2b01      	cmp	r3, #1
   14636:	d00d      	beq.n	14654 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   14638:	2b02      	cmp	r3, #2
   1463a:	d021      	beq.n	14680 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1463c:	b00f      	add	sp, #60	; 0x3c
   1463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   14640:	682b      	ldr	r3, [r5, #0]
   14642:	4a24      	ldr	r2, [pc, #144]	; (146d4 <MQTTPublish+0x104>)
   14644:	4293      	cmp	r3, r2
   14646:	d003      	beq.n	14650 <MQTTPublish+0x80>
   14648:	3301      	adds	r3, #1
   1464a:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   1464c:	80a3      	strh	r3, [r4, #4]
   1464e:	e7d5      	b.n	145fc <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   14650:	2301      	movs	r3, #1
   14652:	e7fa      	b.n	1464a <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   14654:	aa0c      	add	r2, sp, #48	; 0x30
   14656:	2104      	movs	r1, #4
   14658:	0028      	movs	r0, r5
   1465a:	4b1f      	ldr	r3, [pc, #124]	; (146d8 <MQTTPublish+0x108>)
   1465c:	4798      	blx	r3
   1465e:	2804      	cmp	r0, #4
   14660:	d12a      	bne.n	146b8 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   14662:	696b      	ldr	r3, [r5, #20]
   14664:	68ea      	ldr	r2, [r5, #12]
   14666:	9200      	str	r2, [sp, #0]
   14668:	2222      	movs	r2, #34	; 0x22
   1466a:	446a      	add	r2, sp
   1466c:	a908      	add	r1, sp, #32
   1466e:	301d      	adds	r0, #29
   14670:	4468      	add	r0, sp
   14672:	4c1a      	ldr	r4, [pc, #104]	; (146dc <MQTTPublish+0x10c>)
   14674:	47a0      	blx	r4
   14676:	3801      	subs	r0, #1
   14678:	1e43      	subs	r3, r0, #1
   1467a:	4198      	sbcs	r0, r3
   1467c:	4240      	negs	r0, r0
   1467e:	e7dd      	b.n	1463c <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   14680:	aa0c      	add	r2, sp, #48	; 0x30
   14682:	2107      	movs	r1, #7
   14684:	0028      	movs	r0, r5
   14686:	4b14      	ldr	r3, [pc, #80]	; (146d8 <MQTTPublish+0x108>)
   14688:	4798      	blx	r3
   1468a:	2807      	cmp	r0, #7
   1468c:	d117      	bne.n	146be <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1468e:	696b      	ldr	r3, [r5, #20]
   14690:	68ea      	ldr	r2, [r5, #12]
   14692:	9200      	str	r2, [sp, #0]
   14694:	2222      	movs	r2, #34	; 0x22
   14696:	446a      	add	r2, sp
   14698:	a908      	add	r1, sp, #32
   1469a:	301a      	adds	r0, #26
   1469c:	4468      	add	r0, sp
   1469e:	4c0f      	ldr	r4, [pc, #60]	; (146dc <MQTTPublish+0x10c>)
   146a0:	47a0      	blx	r4
   146a2:	3801      	subs	r0, #1
   146a4:	1e43      	subs	r3, r0, #1
   146a6:	4198      	sbcs	r0, r3
   146a8:	4240      	negs	r0, r0
   146aa:	e7c7      	b.n	1463c <MQTTPublish+0x6c>
    int rc = FAILURE;
   146ac:	2001      	movs	r0, #1
   146ae:	4240      	negs	r0, r0
   146b0:	e7c4      	b.n	1463c <MQTTPublish+0x6c>
   146b2:	2001      	movs	r0, #1
   146b4:	4240      	negs	r0, r0
   146b6:	e7c1      	b.n	1463c <MQTTPublish+0x6c>
            rc = FAILURE;
   146b8:	2001      	movs	r0, #1
   146ba:	4240      	negs	r0, r0
   146bc:	e7be      	b.n	1463c <MQTTPublish+0x6c>
            rc = FAILURE;
   146be:	2001      	movs	r0, #1
   146c0:	4240      	negs	r0, r0
    return rc;
   146c2:	e7bb      	b.n	1463c <MQTTPublish+0x6c>
   146c4:	0001493d 	.word	0x0001493d
   146c8:	00014905 	.word	0x00014905
   146cc:	000152d9 	.word	0x000152d9
   146d0:	00013f79 	.word	0x00013f79
   146d4:	0000ffff 	.word	0x0000ffff
   146d8:	000143c5 	.word	0x000143c5
   146dc:	00014ffd 	.word	0x00014ffd

000146e0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   146e0:	b510      	push	{r4, lr}
   146e2:	b082      	sub	sp, #8
   146e4:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   146e6:	4668      	mov	r0, sp
   146e8:	4b0b      	ldr	r3, [pc, #44]	; (14718 <MQTTDisconnect+0x38>)
   146ea:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   146ec:	6861      	ldr	r1, [r4, #4]
   146ee:	4668      	mov	r0, sp
   146f0:	4b0a      	ldr	r3, [pc, #40]	; (1471c <MQTTDisconnect+0x3c>)
   146f2:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   146f4:	68a1      	ldr	r1, [r4, #8]
   146f6:	6920      	ldr	r0, [r4, #16]
   146f8:	4b09      	ldr	r3, [pc, #36]	; (14720 <MQTTDisconnect+0x40>)
   146fa:	4798      	blx	r3
    if (len > 0)
   146fc:	2800      	cmp	r0, #0
   146fe:	dd08      	ble.n	14712 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   14700:	466a      	mov	r2, sp
   14702:	0001      	movs	r1, r0
   14704:	0020      	movs	r0, r4
   14706:	4b07      	ldr	r3, [pc, #28]	; (14724 <MQTTDisconnect+0x44>)
   14708:	4798      	blx	r3
        
    c->isconnected = 0;
   1470a:	2300      	movs	r3, #0
   1470c:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1470e:	b002      	add	sp, #8
   14710:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   14712:	2001      	movs	r0, #1
   14714:	4240      	negs	r0, r0
   14716:	e7f8      	b.n	1470a <MQTTDisconnect+0x2a>
   14718:	0001493d 	.word	0x0001493d
   1471c:	00014905 	.word	0x00014905
   14720:	00014f45 	.word	0x00014f45
   14724:	00013f79 	.word	0x00013f79

00014728 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   14728:	b510      	push	{r4, lr}
   1472a:	0004      	movs	r4, r0
	close(n->socket);
   1472c:	2000      	movs	r0, #0
   1472e:	5620      	ldrsb	r0, [r4, r0]
   14730:	4b04      	ldr	r3, [pc, #16]	; (14744 <WINC1500_disconnect+0x1c>)
   14732:	4798      	blx	r3
	n->socket=-1;
   14734:	2301      	movs	r3, #1
   14736:	425b      	negs	r3, r3
   14738:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   1473a:	2200      	movs	r2, #0
   1473c:	4b02      	ldr	r3, [pc, #8]	; (14748 <WINC1500_disconnect+0x20>)
   1473e:	701a      	strb	r2, [r3, #0]
}
   14740:	bd10      	pop	{r4, pc}
   14742:	46c0      	nop			; (mov r8, r8)
   14744:	0000f9c5 	.word	0x0000f9c5
   14748:	200004f4 	.word	0x200004f4

0001474c <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1474c:	b570      	push	{r4, r5, r6, lr}
   1474e:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   14750:	2200      	movs	r2, #0
   14752:	4b0d      	ldr	r3, [pc, #52]	; (14788 <WINC1500_write+0x3c>)
   14754:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   14756:	b2b2      	uxth	r2, r6
   14758:	7800      	ldrb	r0, [r0, #0]
   1475a:	b240      	sxtb	r0, r0
   1475c:	2300      	movs	r3, #0
   1475e:	4c0b      	ldr	r4, [pc, #44]	; (1478c <WINC1500_write+0x40>)
   14760:	47a0      	blx	r4
   14762:	2800      	cmp	r0, #0
   14764:	d10c      	bne.n	14780 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   14766:	4b08      	ldr	r3, [pc, #32]	; (14788 <WINC1500_write+0x3c>)
   14768:	781b      	ldrb	r3, [r3, #0]
   1476a:	2b00      	cmp	r3, #0
   1476c:	d106      	bne.n	1477c <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   1476e:	4d08      	ldr	r5, [pc, #32]	; (14790 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   14770:	4c05      	ldr	r4, [pc, #20]	; (14788 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   14772:	2000      	movs	r0, #0
   14774:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   14776:	7823      	ldrb	r3, [r4, #0]
   14778:	2b00      	cmp	r3, #0
   1477a:	d0fa      	beq.n	14772 <WINC1500_write+0x26>
}
   1477c:	0030      	movs	r0, r6
   1477e:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   14780:	2601      	movs	r6, #1
   14782:	4276      	negs	r6, r6
   14784:	e7fa      	b.n	1477c <WINC1500_write+0x30>
   14786:	46c0      	nop			; (mov r8, r8)
   14788:	200004f7 	.word	0x200004f7
   1478c:	0000f899 	.word	0x0000f899
   14790:	0000dafd 	.word	0x0000dafd

00014794 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   14794:	b5f0      	push	{r4, r5, r6, r7, lr}
   14796:	b083      	sub	sp, #12
   14798:	9101      	str	r1, [sp, #4]
   1479a:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   1479c:	2b00      	cmp	r3, #0
   1479e:	d100      	bne.n	147a2 <WINC1500_read+0xe>
   147a0:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   147a2:	4a22      	ldr	r2, [pc, #136]	; (1482c <WINC1500_read+0x98>)
   147a4:	6812      	ldr	r2, [r2, #0]
   147a6:	2a00      	cmp	r2, #0
   147a8:	d013      	beq.n	147d2 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   147aa:	4b20      	ldr	r3, [pc, #128]	; (1482c <WINC1500_read+0x98>)
   147ac:	681d      	ldr	r5, [r3, #0]
   147ae:	42a5      	cmp	r5, r4
   147b0:	db39      	blt.n	14826 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   147b2:	4e1f      	ldr	r6, [pc, #124]	; (14830 <WINC1500_read+0x9c>)
   147b4:	6837      	ldr	r7, [r6, #0]
   147b6:	491f      	ldr	r1, [pc, #124]	; (14834 <WINC1500_read+0xa0>)
   147b8:	19c9      	adds	r1, r1, r7
   147ba:	0022      	movs	r2, r4
   147bc:	9801      	ldr	r0, [sp, #4]
   147be:	4b1e      	ldr	r3, [pc, #120]	; (14838 <WINC1500_read+0xa4>)
   147c0:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   147c2:	1b2d      	subs	r5, r5, r4
   147c4:	4b19      	ldr	r3, [pc, #100]	; (1482c <WINC1500_read+0x98>)
   147c6:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   147c8:	193f      	adds	r7, r7, r4
   147ca:	6037      	str	r7, [r6, #0]
  return len;
   147cc:	0020      	movs	r0, r4
}
   147ce:	b003      	add	sp, #12
   147d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   147d2:	2100      	movs	r1, #0
   147d4:	4a19      	ldr	r2, [pc, #100]	; (1483c <WINC1500_read+0xa8>)
   147d6:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   147d8:	7800      	ldrb	r0, [r0, #0]
   147da:	b240      	sxtb	r0, r0
   147dc:	2280      	movs	r2, #128	; 0x80
   147de:	0052      	lsls	r2, r2, #1
   147e0:	4914      	ldr	r1, [pc, #80]	; (14834 <WINC1500_read+0xa0>)
   147e2:	4d17      	ldr	r5, [pc, #92]	; (14840 <WINC1500_read+0xac>)
   147e4:	47a8      	blx	r5
   147e6:	2800      	cmp	r0, #0
   147e8:	d11a      	bne.n	14820 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   147ea:	4b14      	ldr	r3, [pc, #80]	; (1483c <WINC1500_read+0xa8>)
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	2b00      	cmp	r3, #0
   147f0:	d106      	bne.n	14800 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   147f2:	4f14      	ldr	r7, [pc, #80]	; (14844 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   147f4:	4d11      	ldr	r5, [pc, #68]	; (1483c <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   147f6:	2000      	movs	r0, #0
   147f8:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   147fa:	782b      	ldrb	r3, [r5, #0]
   147fc:	2b00      	cmp	r3, #0
   147fe:	d0fa      	beq.n	147f6 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   14800:	4b11      	ldr	r3, [pc, #68]	; (14848 <WINC1500_read+0xb4>)
   14802:	6818      	ldr	r0, [r3, #0]
   14804:	2800      	cmp	r0, #0
   14806:	dd05      	ble.n	14814 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   14808:	4b08      	ldr	r3, [pc, #32]	; (1482c <WINC1500_read+0x98>)
   1480a:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1480c:	2200      	movs	r2, #0
   1480e:	4b08      	ldr	r3, [pc, #32]	; (14830 <WINC1500_read+0x9c>)
   14810:	601a      	str	r2, [r3, #0]
   14812:	e7ca      	b.n	147aa <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   14814:	2300      	movs	r3, #0
   14816:	4a05      	ldr	r2, [pc, #20]	; (1482c <WINC1500_read+0x98>)
   14818:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   1481a:	4a05      	ldr	r2, [pc, #20]	; (14830 <WINC1500_read+0x9c>)
   1481c:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1481e:	e7d6      	b.n	147ce <WINC1500_read+0x3a>
		  return -1;
   14820:	2001      	movs	r0, #1
   14822:	4240      	negs	r0, r0
   14824:	e7d3      	b.n	147ce <WINC1500_read+0x3a>
	  return -1;
   14826:	2001      	movs	r0, #1
   14828:	4240      	negs	r0, r0
   1482a:	e7d0      	b.n	147ce <WINC1500_read+0x3a>
   1482c:	20000604 	.word	0x20000604
   14830:	20000608 	.word	0x20000608
   14834:	200004f8 	.word	0x200004f8
   14838:	00017991 	.word	0x00017991
   1483c:	200004f6 	.word	0x200004f6
   14840:	0000f931 	.word	0x0000f931
   14844:	0000dafd 	.word	0x0000dafd
   14848:	200005fc 	.word	0x200005fc

0001484c <dnsResolveCallback>:
{
   1484c:	b510      	push	{r4, lr}
   1484e:	0002      	movs	r2, r0
   14850:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   14852:	4b08      	ldr	r3, [pc, #32]	; (14874 <dnsResolveCallback+0x28>)
   14854:	781b      	ldrb	r3, [r3, #0]
   14856:	2b00      	cmp	r3, #0
   14858:	d10b      	bne.n	14872 <dnsResolveCallback+0x26>
   1485a:	4b07      	ldr	r3, [pc, #28]	; (14878 <dnsResolveCallback+0x2c>)
   1485c:	6818      	ldr	r0, [r3, #0]
   1485e:	0011      	movs	r1, r2
   14860:	4b06      	ldr	r3, [pc, #24]	; (1487c <dnsResolveCallback+0x30>)
   14862:	4798      	blx	r3
   14864:	2800      	cmp	r0, #0
   14866:	d104      	bne.n	14872 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   14868:	4b05      	ldr	r3, [pc, #20]	; (14880 <dnsResolveCallback+0x34>)
   1486a:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1486c:	2201      	movs	r2, #1
   1486e:	4b01      	ldr	r3, [pc, #4]	; (14874 <dnsResolveCallback+0x28>)
   14870:	701a      	strb	r2, [r3, #0]
}
   14872:	bd10      	pop	{r4, pc}
   14874:	200004f5 	.word	0x200004f5
   14878:	20000600 	.word	0x20000600
   1487c:	00017ec7 	.word	0x00017ec7
   14880:	200005f8 	.word	0x200005f8

00014884 <tcpClientSocketEventHandler>:
{
   14884:	b530      	push	{r4, r5, lr}
   14886:	4b12      	ldr	r3, [pc, #72]	; (148d0 <tcpClientSocketEventHandler+0x4c>)
   14888:	24a8      	movs	r4, #168	; 0xa8
   1488a:	00a4      	lsls	r4, r4, #2
   1488c:	191d      	adds	r5, r3, r4
   1488e:	e002      	b.n	14896 <tcpClientSocketEventHandler+0x12>
   14890:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14892:	42ab      	cmp	r3, r5
   14894:	d00b      	beq.n	148ae <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   14896:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   14898:	2c00      	cmp	r4, #0
   1489a:	d0f9      	beq.n	14890 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   1489c:	6a24      	ldr	r4, [r4, #32]
   1489e:	4284      	cmp	r4, r0
   148a0:	d1f6      	bne.n	14890 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   148a2:	2906      	cmp	r1, #6
   148a4:	d00c      	beq.n	148c0 <tcpClientSocketEventHandler+0x3c>
   148a6:	2907      	cmp	r1, #7
   148a8:	d006      	beq.n	148b8 <tcpClientSocketEventHandler+0x34>
   148aa:	2905      	cmp	r1, #5
   148ac:	d000      	beq.n	148b0 <tcpClientSocketEventHandler+0x2c>
}
   148ae:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   148b0:	2201      	movs	r2, #1
   148b2:	4b08      	ldr	r3, [pc, #32]	; (148d4 <tcpClientSocketEventHandler+0x50>)
   148b4:	701a      	strb	r2, [r3, #0]
			break;
   148b6:	e7fa      	b.n	148ae <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   148b8:	2201      	movs	r2, #1
   148ba:	4b07      	ldr	r3, [pc, #28]	; (148d8 <tcpClientSocketEventHandler+0x54>)
   148bc:	701a      	strb	r2, [r3, #0]
			break;
   148be:	e7f6      	b.n	148ae <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   148c0:	2304      	movs	r3, #4
   148c2:	5ed2      	ldrsh	r2, [r2, r3]
   148c4:	4b05      	ldr	r3, [pc, #20]	; (148dc <tcpClientSocketEventHandler+0x58>)
   148c6:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   148c8:	2201      	movs	r2, #1
   148ca:	4b05      	ldr	r3, [pc, #20]	; (148e0 <tcpClientSocketEventHandler+0x5c>)
   148cc:	701a      	strb	r2, [r3, #0]
}
   148ce:	e7ee      	b.n	148ae <tcpClientSocketEventHandler+0x2a>
   148d0:	2000060c 	.word	0x2000060c
   148d4:	200004f4 	.word	0x200004f4
   148d8:	200004f7 	.word	0x200004f7
   148dc:	200005fc 	.word	0x200005fc
   148e0:	200004f6 	.word	0x200004f6

000148e4 <SysTick_Handler>:
	MilliTimer++;
   148e4:	4a02      	ldr	r2, [pc, #8]	; (148f0 <SysTick_Handler+0xc>)
   148e6:	6813      	ldr	r3, [r2, #0]
   148e8:	3301      	adds	r3, #1
   148ea:	6013      	str	r3, [r2, #0]
}
   148ec:	4770      	bx	lr
   148ee:	46c0      	nop			; (mov r8, r8)
   148f0:	200004f0 	.word	0x200004f0

000148f4 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   148f4:	6840      	ldr	r0, [r0, #4]
   148f6:	4b02      	ldr	r3, [pc, #8]	; (14900 <TimerIsExpired+0xc>)
   148f8:	681b      	ldr	r3, [r3, #0]
   148fa:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   148fc:	0fc0      	lsrs	r0, r0, #31
}
   148fe:	4770      	bx	lr
   14900:	200004f0 	.word	0x200004f0

00014904 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   14904:	4b02      	ldr	r3, [pc, #8]	; (14910 <TimerCountdownMS+0xc>)
   14906:	681b      	ldr	r3, [r3, #0]
   14908:	1859      	adds	r1, r3, r1
   1490a:	6041      	str	r1, [r0, #4]
}
   1490c:	4770      	bx	lr
   1490e:	46c0      	nop			; (mov r8, r8)
   14910:	200004f0 	.word	0x200004f0

00014914 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   14914:	23fa      	movs	r3, #250	; 0xfa
   14916:	009b      	lsls	r3, r3, #2
   14918:	4359      	muls	r1, r3
   1491a:	4b02      	ldr	r3, [pc, #8]	; (14924 <TimerCountdown+0x10>)
   1491c:	681b      	ldr	r3, [r3, #0]
   1491e:	18c9      	adds	r1, r1, r3
   14920:	6041      	str	r1, [r0, #4]
}
   14922:	4770      	bx	lr
   14924:	200004f0 	.word	0x200004f0

00014928 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   14928:	6840      	ldr	r0, [r0, #4]
   1492a:	4b03      	ldr	r3, [pc, #12]	; (14938 <TimerLeftMS+0x10>)
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   14930:	43c3      	mvns	r3, r0
   14932:	17db      	asrs	r3, r3, #31
   14934:	4018      	ands	r0, r3
}
   14936:	4770      	bx	lr
   14938:	200004f0 	.word	0x200004f0

0001493c <TimerInit>:
	timer->end_time = 0;
   1493c:	2300      	movs	r3, #0
   1493e:	6043      	str	r3, [r0, #4]
}
   14940:	4770      	bx	lr
	...

00014944 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   14944:	2301      	movs	r3, #1
   14946:	425b      	negs	r3, r3
   14948:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   1494a:	4b03      	ldr	r3, [pc, #12]	; (14958 <NetworkInit+0x14>)
   1494c:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   1494e:	4b03      	ldr	r3, [pc, #12]	; (1495c <NetworkInit+0x18>)
   14950:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   14952:	4b03      	ldr	r3, [pc, #12]	; (14960 <NetworkInit+0x1c>)
   14954:	6103      	str	r3, [r0, #16]
}
   14956:	4770      	bx	lr
   14958:	00014795 	.word	0x00014795
   1495c:	0001474d 	.word	0x0001474d
   14960:	00014729 	.word	0x00014729

00014964 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   14964:	b5f0      	push	{r4, r5, r6, r7, lr}
   14966:	b087      	sub	sp, #28
   14968:	0006      	movs	r6, r0
   1496a:	0015      	movs	r5, r2
   1496c:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1496e:	4c25      	ldr	r4, [pc, #148]	; (14a04 <ConnectNetwork+0xa0>)
   14970:	2300      	movs	r3, #0
   14972:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   14974:	4b24      	ldr	r3, [pc, #144]	; (14a08 <ConnectNetwork+0xa4>)
   14976:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   14978:	0008      	movs	r0, r1
   1497a:	4b24      	ldr	r3, [pc, #144]	; (14a0c <ConnectNetwork+0xa8>)
   1497c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1497e:	7823      	ldrb	r3, [r4, #0]
   14980:	2b00      	cmp	r3, #0
   14982:	d106      	bne.n	14992 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   14984:	4f22      	ldr	r7, [pc, #136]	; (14a10 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   14986:	4c1f      	ldr	r4, [pc, #124]	; (14a04 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   14988:	2000      	movs	r0, #0
   1498a:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   1498c:	7823      	ldrb	r3, [r4, #0]
   1498e:	2b00      	cmp	r3, #0
   14990:	d0fa      	beq.n	14988 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   14992:	4b20      	ldr	r3, [pc, #128]	; (14a14 <ConnectNetwork+0xb0>)
   14994:	681a      	ldr	r2, [r3, #0]
   14996:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   14998:	2302      	movs	r3, #2
   1499a:	a902      	add	r1, sp, #8
   1499c:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   1499e:	022b      	lsls	r3, r5, #8
   149a0:	491d      	ldr	r1, [pc, #116]	; (14a18 <ConnectNetwork+0xb4>)
   149a2:	400b      	ands	r3, r1
   149a4:	b2ad      	uxth	r5, r5
   149a6:	0a2d      	lsrs	r5, r5, #8
   149a8:	431d      	orrs	r5, r3
   149aa:	ab02      	add	r3, sp, #8
   149ac:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   149ae:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   149b0:	6833      	ldr	r3, [r6, #0]
   149b2:	2b00      	cmp	r3, #0
   149b4:	db16      	blt.n	149e4 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   149b6:	6830      	ldr	r0, [r6, #0]
   149b8:	1c43      	adds	r3, r0, #1
   149ba:	d01b      	beq.n	149f4 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   149bc:	b240      	sxtb	r0, r0
   149be:	2210      	movs	r2, #16
   149c0:	a902      	add	r1, sp, #8
   149c2:	4b16      	ldr	r3, [pc, #88]	; (14a1c <ConnectNetwork+0xb8>)
   149c4:	4798      	blx	r3
   149c6:	2800      	cmp	r0, #0
   149c8:	d119      	bne.n	149fe <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   149ca:	2200      	movs	r2, #0
   149cc:	4b14      	ldr	r3, [pc, #80]	; (14a20 <ConnectNetwork+0xbc>)
   149ce:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   149d0:	4d0f      	ldr	r5, [pc, #60]	; (14a10 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   149d2:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   149d4:	2000      	movs	r0, #0
   149d6:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   149d8:	7823      	ldrb	r3, [r4, #0]
   149da:	2b00      	cmp	r3, #0
   149dc:	d0fa      	beq.n	149d4 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   149de:	2000      	movs	r0, #0
   149e0:	b007      	add	sp, #28
   149e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   149e4:	466b      	mov	r3, sp
   149e6:	791a      	ldrb	r2, [r3, #4]
   149e8:	2101      	movs	r1, #1
   149ea:	2002      	movs	r0, #2
   149ec:	4b0d      	ldr	r3, [pc, #52]	; (14a24 <ConnectNetwork+0xc0>)
   149ee:	4798      	blx	r3
   149f0:	6030      	str	r0, [r6, #0]
   149f2:	e7e0      	b.n	149b6 <ConnectNetwork+0x52>
   close(n->socket);
   149f4:	4b0c      	ldr	r3, [pc, #48]	; (14a28 <ConnectNetwork+0xc4>)
   149f6:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   149f8:	2009      	movs	r0, #9
   149fa:	4240      	negs	r0, r0
   149fc:	e7f0      	b.n	149e0 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   149fe:	2009      	movs	r0, #9
   14a00:	4240      	negs	r0, r0
   14a02:	e7ed      	b.n	149e0 <ConnectNetwork+0x7c>
   14a04:	200004f5 	.word	0x200004f5
   14a08:	20000600 	.word	0x20000600
   14a0c:	0000facd 	.word	0x0000facd
   14a10:	0000dafd 	.word	0x0000dafd
   14a14:	200005f8 	.word	0x200005f8
   14a18:	00ffff00 	.word	0x00ffff00
   14a1c:	0000f809 	.word	0x0000f809
   14a20:	200004f4 	.word	0x200004f4
   14a24:	0000f685 	.word	0x0000f685
   14a28:	0000f9c5 	.word	0x0000f9c5

00014a2c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   14a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a2e:	b085      	sub	sp, #20
   14a30:	0006      	movs	r6, r0
   14a32:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   14a34:	2800      	cmp	r0, #0
   14a36:	d03d      	beq.n	14ab4 <mqtt_init+0x88>
   14a38:	2900      	cmp	r1, #0
   14a3a:	d03e      	beq.n	14aba <mqtt_init+0x8e>
   14a3c:	690b      	ldr	r3, [r1, #16]
   14a3e:	2b00      	cmp	r3, #0
   14a40:	d03e      	beq.n	14ac0 <mqtt_init+0x94>
   14a42:	688b      	ldr	r3, [r1, #8]
   14a44:	2b00      	cmp	r3, #0
   14a46:	d03e      	beq.n	14ac6 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   14a48:	888b      	ldrh	r3, [r1, #4]
   14a4a:	27fa      	movs	r7, #250	; 0xfa
   14a4c:	00bf      	lsls	r7, r7, #2
   14a4e:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   14a50:	0004      	movs	r4, r0
   14a52:	3420      	adds	r4, #32
   14a54:	0020      	movs	r0, r4
   14a56:	4b1f      	ldr	r3, [pc, #124]	; (14ad4 <mqtt_init+0xa8>)
   14a58:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   14a5a:	1d30      	adds	r0, r6, #4
   14a5c:	2218      	movs	r2, #24
   14a5e:	0029      	movs	r1, r5
   14a60:	4b1d      	ldr	r3, [pc, #116]	; (14ad8 <mqtt_init+0xac>)
   14a62:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14a64:	4b1d      	ldr	r3, [pc, #116]	; (14adc <mqtt_init+0xb0>)
   14a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d01a      	beq.n	14aa2 <mqtt_init+0x76>
   14a6c:	4b1b      	ldr	r3, [pc, #108]	; (14adc <mqtt_init+0xb0>)
   14a6e:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14a70:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14a72:	6819      	ldr	r1, [r3, #0]
   14a74:	2900      	cmp	r1, #0
   14a76:	d015      	beq.n	14aa4 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14a78:	3201      	adds	r2, #1
   14a7a:	3360      	adds	r3, #96	; 0x60
   14a7c:	2a07      	cmp	r2, #7
   14a7e:	d1f8      	bne.n	14a72 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   14a80:	69f0      	ldr	r0, [r6, #28]
   14a82:	2800      	cmp	r0, #0
   14a84:	d022      	beq.n	14acc <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   14a86:	692b      	ldr	r3, [r5, #16]
   14a88:	68ea      	ldr	r2, [r5, #12]
   14a8a:	9202      	str	r2, [sp, #8]
   14a8c:	68aa      	ldr	r2, [r5, #8]
   14a8e:	9201      	str	r2, [sp, #4]
   14a90:	696a      	ldr	r2, [r5, #20]
   14a92:	9200      	str	r2, [sp, #0]
   14a94:	003a      	movs	r2, r7
   14a96:	0021      	movs	r1, r4
   14a98:	4c11      	ldr	r4, [pc, #68]	; (14ae0 <mqtt_init+0xb4>)
   14a9a:	47a0      	blx	r4
		return SUCCESS;
   14a9c:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   14a9e:	b005      	add	sp, #20
   14aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14aa2:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   14aa4:	480d      	ldr	r0, [pc, #52]	; (14adc <mqtt_init+0xb0>)
   14aa6:	0053      	lsls	r3, r2, #1
   14aa8:	1899      	adds	r1, r3, r2
   14aaa:	0149      	lsls	r1, r1, #5
   14aac:	1841      	adds	r1, r0, r1
   14aae:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   14ab0:	61f1      	str	r1, [r6, #28]
   14ab2:	e7e5      	b.n	14a80 <mqtt_init+0x54>
		return FAILURE;
   14ab4:	2001      	movs	r0, #1
   14ab6:	4240      	negs	r0, r0
   14ab8:	e7f1      	b.n	14a9e <mqtt_init+0x72>
   14aba:	2001      	movs	r0, #1
   14abc:	4240      	negs	r0, r0
   14abe:	e7ee      	b.n	14a9e <mqtt_init+0x72>
   14ac0:	2001      	movs	r0, #1
   14ac2:	4240      	negs	r0, r0
   14ac4:	e7eb      	b.n	14a9e <mqtt_init+0x72>
   14ac6:	2001      	movs	r0, #1
   14ac8:	4240      	negs	r0, r0
   14aca:	e7e8      	b.n	14a9e <mqtt_init+0x72>
		return FAILURE;
   14acc:	2001      	movs	r0, #1
   14ace:	4240      	negs	r0, r0
   14ad0:	e7e5      	b.n	14a9e <mqtt_init+0x72>
   14ad2:	46c0      	nop			; (mov r8, r8)
   14ad4:	00014945 	.word	0x00014945
   14ad8:	00017991 	.word	0x00017991
   14adc:	2000060c 	.word	0x2000060c
   14ae0:	00013ff5 	.word	0x00013ff5

00014ae4 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   14ae4:	4b05      	ldr	r3, [pc, #20]	; (14afc <mqtt_get_config_defaults+0x18>)
   14ae6:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   14ae8:	2300      	movs	r3, #0
   14aea:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   14aec:	223c      	movs	r2, #60	; 0x3c
   14aee:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   14af0:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   14af2:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   14af4:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   14af6:	6143      	str	r3, [r0, #20]
}
   14af8:	4770      	bx	lr
   14afa:	46c0      	nop			; (mov r8, r8)
   14afc:	0000075b 	.word	0x0000075b

00014b00 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   14b00:	2800      	cmp	r0, #0
   14b02:	d002      	beq.n	14b0a <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   14b04:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   14b06:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   14b08:	4770      	bx	lr
		return FAILURE;
   14b0a:	2001      	movs	r0, #1
   14b0c:	4240      	negs	r0, r0
   14b0e:	e7fb      	b.n	14b08 <mqtt_register_callback+0x8>

00014b10 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   14b10:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   14b12:	4b01      	ldr	r3, [pc, #4]	; (14b18 <mqtt_socket_event_handler+0x8>)
   14b14:	4798      	blx	r3
}
   14b16:	bd10      	pop	{r4, pc}
   14b18:	00014885 	.word	0x00014885

00014b1c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   14b1c:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   14b1e:	4b01      	ldr	r3, [pc, #4]	; (14b24 <mqtt_socket_resolve_handler+0x8>)
   14b20:	4798      	blx	r3
}
   14b22:	bd10      	pop	{r4, pc}
   14b24:	0001484d 	.word	0x0001484d

00014b28 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   14b28:	b530      	push	{r4, r5, lr}
   14b2a:	b083      	sub	sp, #12
   14b2c:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   14b2e:	7983      	ldrb	r3, [r0, #6]
   14b30:	8882      	ldrh	r2, [r0, #4]
   14b32:	3020      	adds	r0, #32
   14b34:	4d06      	ldr	r5, [pc, #24]	; (14b50 <mqtt_connect+0x28>)
   14b36:	47a8      	blx	r5
   14b38:	9001      	str	r0, [sp, #4]
	if(module->callback)
   14b3a:	6823      	ldr	r3, [r4, #0]
   14b3c:	2b00      	cmp	r3, #0
   14b3e:	d003      	beq.n	14b48 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   14b40:	aa01      	add	r2, sp, #4
   14b42:	2100      	movs	r1, #0
   14b44:	0020      	movs	r0, r4
   14b46:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   14b48:	9801      	ldr	r0, [sp, #4]
   14b4a:	b003      	add	sp, #12
   14b4c:	bd30      	pop	{r4, r5, pc}
   14b4e:	46c0      	nop			; (mov r8, r8)
   14b50:	00014965 	.word	0x00014965

00014b54 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   14b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b56:	46de      	mov	lr, fp
   14b58:	4657      	mov	r7, sl
   14b5a:	464e      	mov	r6, r9
   14b5c:	b5c0      	push	{r6, r7, lr}
   14b5e:	b098      	sub	sp, #96	; 0x60
   14b60:	0005      	movs	r5, r0
   14b62:	4689      	mov	r9, r1
   14b64:	4693      	mov	fp, r2
   14b66:	469a      	mov	sl, r3
   14b68:	ab24      	add	r3, sp, #144	; 0x90
   14b6a:	781f      	ldrb	r7, [r3, #0]
   14b6c:	ab25      	add	r3, sp, #148	; 0x94
   14b6e:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   14b70:	ac01      	add	r4, sp, #4
   14b72:	2258      	movs	r2, #88	; 0x58
   14b74:	491a      	ldr	r1, [pc, #104]	; (14be0 <mqtt_connect_broker+0x8c>)
   14b76:	0020      	movs	r0, r4
   14b78:	4b1a      	ldr	r3, [pc, #104]	; (14be4 <mqtt_connect_broker+0x90>)
   14b7a:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   14b7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14b7e:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   14b80:	465b      	mov	r3, fp
   14b82:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   14b84:	4653      	mov	r3, sl
   14b86:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   14b88:	464b      	mov	r3, r9
   14b8a:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   14b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14b8e:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   14b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14b92:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   14b94:	233c      	movs	r3, #60	; 0x3c
   14b96:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   14b98:	3301      	adds	r3, #1
   14b9a:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   14b9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14b9e:	2b00      	cmp	r3, #0
   14ba0:	d005      	beq.n	14bae <mqtt_connect_broker+0x5a>
   14ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14ba4:	2b00      	cmp	r3, #0
   14ba6:	d002      	beq.n	14bae <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   14ba8:	2201      	movs	r2, #1
   14baa:	ab01      	add	r3, sp, #4
   14bac:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   14bae:	a901      	add	r1, sp, #4
   14bb0:	69e8      	ldr	r0, [r5, #28]
   14bb2:	4b0d      	ldr	r3, [pc, #52]	; (14be8 <mqtt_connect_broker+0x94>)
   14bb4:	4798      	blx	r3
   14bb6:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   14bb8:	ab17      	add	r3, sp, #92	; 0x5c
   14bba:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   14bbc:	682b      	ldr	r3, [r5, #0]
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d003      	beq.n	14bca <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   14bc2:	aa17      	add	r2, sp, #92	; 0x5c
   14bc4:	2101      	movs	r1, #1
   14bc6:	0028      	movs	r0, r5
   14bc8:	4798      	blx	r3
	
	module->isConnected = true;
   14bca:	2201      	movs	r2, #1
   14bcc:	2334      	movs	r3, #52	; 0x34
   14bce:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   14bd0:	0020      	movs	r0, r4
   14bd2:	b018      	add	sp, #96	; 0x60
   14bd4:	bc1c      	pop	{r2, r3, r4}
   14bd6:	4691      	mov	r9, r2
   14bd8:	469a      	mov	sl, r3
   14bda:	46a3      	mov	fp, r4
   14bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	0001ae0c 	.word	0x0001ae0c
   14be4:	00017991 	.word	0x00017991
   14be8:	000143fd 	.word	0x000143fd

00014bec <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   14bec:	b530      	push	{r4, r5, lr}
   14bee:	b083      	sub	sp, #12
   14bf0:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   14bf2:	69c0      	ldr	r0, [r0, #28]
   14bf4:	4b08      	ldr	r3, [pc, #32]	; (14c18 <mqtt_disconnect+0x2c>)
   14bf6:	4798      	blx	r3
   14bf8:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   14bfa:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   14bfc:	6823      	ldr	r3, [r4, #0]
   14bfe:	2b00      	cmp	r3, #0
   14c00:	d003      	beq.n	14c0a <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   14c02:	aa01      	add	r2, sp, #4
   14c04:	2105      	movs	r1, #5
   14c06:	0020      	movs	r0, r4
   14c08:	4798      	blx	r3
	
	module->isConnected = false;
   14c0a:	2200      	movs	r2, #0
   14c0c:	2334      	movs	r3, #52	; 0x34
   14c0e:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   14c10:	0028      	movs	r0, r5
   14c12:	b003      	add	sp, #12
   14c14:	bd30      	pop	{r4, r5, pc}
   14c16:	46c0      	nop			; (mov r8, r8)
   14c18:	000146e1 	.word	0x000146e1

00014c1c <mqtt_deinit>:
{
   14c1c:	b510      	push	{r4, lr}
   14c1e:	1e04      	subs	r4, r0, #0
	if(module)
   14c20:	d022      	beq.n	14c68 <mqtt_deinit+0x4c>
		if(module->isConnected)
   14c22:	2334      	movs	r3, #52	; 0x34
   14c24:	5cc3      	ldrb	r3, [r0, r3]
   14c26:	2b00      	cmp	r3, #0
   14c28:	d10f      	bne.n	14c4a <mqtt_deinit+0x2e>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   14c2a:	4b11      	ldr	r3, [pc, #68]	; (14c70 <mqtt_deinit+0x54>)
   14c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14c2e:	429c      	cmp	r4, r3
   14c30:	d00f      	beq.n	14c52 <mqtt_deinit+0x36>
   14c32:	4b0f      	ldr	r3, [pc, #60]	; (14c70 <mqtt_deinit+0x54>)
   14c34:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14c36:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == module)
   14c38:	6819      	ldr	r1, [r3, #0]
   14c3a:	428c      	cmp	r4, r1
   14c3c:	d00a      	beq.n	14c54 <mqtt_deinit+0x38>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14c3e:	3201      	adds	r2, #1
   14c40:	3360      	adds	r3, #96	; 0x60
   14c42:	2a07      	cmp	r2, #7
   14c44:	d1f8      	bne.n	14c38 <mqtt_deinit+0x1c>
		return SUCCESS;
   14c46:	2000      	movs	r0, #0
}
   14c48:	bd10      	pop	{r4, pc}
			mqtt_disconnect(module, 0);
   14c4a:	2100      	movs	r1, #0
   14c4c:	4b09      	ldr	r3, [pc, #36]	; (14c74 <mqtt_deinit+0x58>)
   14c4e:	4798      	blx	r3
   14c50:	e7eb      	b.n	14c2a <mqtt_deinit+0xe>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   14c52:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = NULL;
   14c54:	0053      	lsls	r3, r2, #1
   14c56:	189a      	adds	r2, r3, r2
   14c58:	0152      	lsls	r2, r2, #5
   14c5a:	4b05      	ldr	r3, [pc, #20]	; (14c70 <mqtt_deinit+0x54>)
   14c5c:	189a      	adds	r2, r3, r2
   14c5e:	2300      	movs	r3, #0
   14c60:	65d3      	str	r3, [r2, #92]	; 0x5c
			module->client = NULL;
   14c62:	61e3      	str	r3, [r4, #28]
		return SUCCESS;
   14c64:	2000      	movs	r0, #0
   14c66:	e7ef      	b.n	14c48 <mqtt_deinit+0x2c>
		return FAILURE;
   14c68:	2001      	movs	r0, #1
   14c6a:	4240      	negs	r0, r0
   14c6c:	e7ec      	b.n	14c48 <mqtt_deinit+0x2c>
   14c6e:	46c0      	nop			; (mov r8, r8)
   14c70:	2000060c 	.word	0x2000060c
   14c74:	00014bed 	.word	0x00014bed

00014c78 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   14c78:	b570      	push	{r4, r5, r6, lr}
   14c7a:	b084      	sub	sp, #16
   14c7c:	0004      	movs	r4, r0
   14c7e:	a808      	add	r0, sp, #32
   14c80:	7805      	ldrb	r5, [r0, #0]
   14c82:	a809      	add	r0, sp, #36	; 0x24
   14c84:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   14c86:	466e      	mov	r6, sp
   14c88:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   14c8a:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   14c8c:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   14c8e:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   14c90:	466a      	mov	r2, sp
   14c92:	69e0      	ldr	r0, [r4, #28]
   14c94:	4b06      	ldr	r3, [pc, #24]	; (14cb0 <mqtt_publish+0x38>)
   14c96:	4798      	blx	r3
   14c98:	0005      	movs	r5, r0
	
	if(module->callback)
   14c9a:	6823      	ldr	r3, [r4, #0]
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d003      	beq.n	14ca8 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   14ca0:	2200      	movs	r2, #0
   14ca2:	2102      	movs	r1, #2
   14ca4:	0020      	movs	r0, r4
   14ca6:	4798      	blx	r3
	
	return rc;
}
   14ca8:	0028      	movs	r0, r5
   14caa:	b004      	add	sp, #16
   14cac:	bd70      	pop	{r4, r5, r6, pc}
   14cae:	46c0      	nop			; (mov r8, r8)
   14cb0:	000145d1 	.word	0x000145d1

00014cb4 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   14cb4:	b570      	push	{r4, r5, r6, lr}
   14cb6:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   14cb8:	69c0      	ldr	r0, [r0, #28]
   14cba:	4d06      	ldr	r5, [pc, #24]	; (14cd4 <mqtt_subscribe+0x20>)
   14cbc:	47a8      	blx	r5
   14cbe:	0005      	movs	r5, r0
	
	if(module->callback)
   14cc0:	6823      	ldr	r3, [r4, #0]
   14cc2:	2b00      	cmp	r3, #0
   14cc4:	d003      	beq.n	14cce <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   14cc6:	2200      	movs	r2, #0
   14cc8:	2103      	movs	r1, #3
   14cca:	0020      	movs	r0, r4
   14ccc:	4798      	blx	r3
	
	return rc;
}
   14cce:	0028      	movs	r0, r5
   14cd0:	bd70      	pop	{r4, r5, r6, pc}
   14cd2:	46c0      	nop			; (mov r8, r8)
   14cd4:	000144cd 	.word	0x000144cd

00014cd8 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   14cd8:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   14cda:	69c0      	ldr	r0, [r0, #28]
   14cdc:	4b01      	ldr	r3, [pc, #4]	; (14ce4 <mqtt_yield+0xc>)
   14cde:	4798      	blx	r3
   14ce0:	bd10      	pop	{r4, pc}
   14ce2:	46c0      	nop			; (mov r8, r8)
   14ce4:	00014381 	.word	0x00014381

00014ce8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   14ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cea:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   14cec:	7a03      	ldrb	r3, [r0, #8]
   14cee:	2b03      	cmp	r3, #3
   14cf0:	d024      	beq.n	14d3c <MQTTSerialize_connectLength+0x54>
	int len = 0;
   14cf2:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   14cf4:	2b04      	cmp	r3, #4
   14cf6:	d01f      	beq.n	14d38 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   14cf8:	68e0      	ldr	r0, [r4, #12]
   14cfa:	6921      	ldr	r1, [r4, #16]
   14cfc:	6962      	ldr	r2, [r4, #20]
   14cfe:	4b1b      	ldr	r3, [pc, #108]	; (14d6c <MQTTSerialize_connectLength+0x84>)
   14d00:	4798      	blx	r3
   14d02:	1c85      	adds	r5, r0, #2
   14d04:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   14d06:	7ee3      	ldrb	r3, [r4, #27]
   14d08:	2b00      	cmp	r3, #0
   14d0a:	d119      	bne.n	14d40 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   14d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d024      	beq.n	14d5c <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   14d12:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14d14:	6c61      	ldr	r1, [r4, #68]	; 0x44
   14d16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14d18:	4b14      	ldr	r3, [pc, #80]	; (14d6c <MQTTSerialize_connectLength+0x84>)
   14d1a:	4798      	blx	r3
   14d1c:	3002      	adds	r0, #2
   14d1e:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   14d20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14d22:	2b00      	cmp	r3, #0
   14d24:	d01e      	beq.n	14d64 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   14d26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14d28:	6d21      	ldr	r1, [r4, #80]	; 0x50
   14d2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14d2c:	4b0f      	ldr	r3, [pc, #60]	; (14d6c <MQTTSerialize_connectLength+0x84>)
   14d2e:	4798      	blx	r3
   14d30:	3002      	adds	r0, #2
   14d32:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   14d34:	0028      	movs	r0, r5
   14d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   14d38:	360a      	adds	r6, #10
   14d3a:	e7dd      	b.n	14cf8 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   14d3c:	260c      	movs	r6, #12
   14d3e:	e7db      	b.n	14cf8 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   14d40:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14d42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14d44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14d46:	4f09      	ldr	r7, [pc, #36]	; (14d6c <MQTTSerialize_connectLength+0x84>)
   14d48:	47b8      	blx	r7
   14d4a:	0006      	movs	r6, r0
   14d4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14d52:	47b8      	blx	r7
   14d54:	1836      	adds	r6, r6, r0
   14d56:	3604      	adds	r6, #4
   14d58:	19ad      	adds	r5, r5, r6
   14d5a:	e7d7      	b.n	14d0c <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   14d5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d1d7      	bne.n	14d12 <MQTTSerialize_connectLength+0x2a>
   14d62:	e7dd      	b.n	14d20 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   14d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14d66:	2b00      	cmp	r3, #0
   14d68:	d1dd      	bne.n	14d26 <MQTTSerialize_connectLength+0x3e>
   14d6a:	e7e3      	b.n	14d34 <MQTTSerialize_connectLength+0x4c>
   14d6c:	00015251 	.word	0x00015251

00014d70 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d72:	b083      	sub	sp, #12
   14d74:	0006      	movs	r6, r0
   14d76:	000f      	movs	r7, r1
   14d78:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   14d7a:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   14d7c:	0010      	movs	r0, r2
   14d7e:	4b45      	ldr	r3, [pc, #276]	; (14e94 <MQTTSerialize_connect+0x124>)
   14d80:	4798      	blx	r3
   14d82:	0004      	movs	r4, r0
   14d84:	4b44      	ldr	r3, [pc, #272]	; (14e98 <MQTTSerialize_connect+0x128>)
   14d86:	4798      	blx	r3
   14d88:	42b8      	cmp	r0, r7
   14d8a:	dd00      	ble.n	14d8e <MQTTSerialize_connect+0x1e>
   14d8c:	e07f      	b.n	14e8e <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   14d8e:	2110      	movs	r1, #16
   14d90:	a801      	add	r0, sp, #4
   14d92:	4b42      	ldr	r3, [pc, #264]	; (14e9c <MQTTSerialize_connect+0x12c>)
   14d94:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   14d96:	0021      	movs	r1, r4
   14d98:	9801      	ldr	r0, [sp, #4]
   14d9a:	4b41      	ldr	r3, [pc, #260]	; (14ea0 <MQTTSerialize_connect+0x130>)
   14d9c:	4798      	blx	r3
   14d9e:	9b01      	ldr	r3, [sp, #4]
   14da0:	469c      	mov	ip, r3
   14da2:	4460      	add	r0, ip
   14da4:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   14da6:	7a2b      	ldrb	r3, [r5, #8]
   14da8:	2b04      	cmp	r3, #4
   14daa:	d045      	beq.n	14e38 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   14dac:	493d      	ldr	r1, [pc, #244]	; (14ea4 <MQTTSerialize_connect+0x134>)
   14dae:	a801      	add	r0, sp, #4
   14db0:	4b3d      	ldr	r3, [pc, #244]	; (14ea8 <MQTTSerialize_connect+0x138>)
   14db2:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   14db4:	2103      	movs	r1, #3
   14db6:	a801      	add	r0, sp, #4
   14db8:	4b38      	ldr	r3, [pc, #224]	; (14e9c <MQTTSerialize_connect+0x12c>)
   14dba:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   14dbc:	7ea9      	ldrb	r1, [r5, #26]
   14dbe:	2301      	movs	r3, #1
   14dc0:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   14dc2:	7eea      	ldrb	r2, [r5, #27]
   14dc4:	1e50      	subs	r0, r2, #1
   14dc6:	4182      	sbcs	r2, r0
   14dc8:	b2d2      	uxtb	r2, r2
   14dca:	4013      	ands	r3, r2
   14dcc:	009b      	lsls	r3, r3, #2
   14dce:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   14dd0:	4319      	orrs	r1, r3
   14dd2:	2b00      	cmp	r3, #0
   14dd4:	d00b      	beq.n	14dee <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   14dd6:	233d      	movs	r3, #61	; 0x3d
   14dd8:	5cea      	ldrb	r2, [r5, r3]
   14dda:	3b3a      	subs	r3, #58	; 0x3a
   14ddc:	4013      	ands	r3, r2
   14dde:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   14de0:	223c      	movs	r2, #60	; 0x3c
   14de2:	5ca8      	ldrb	r0, [r5, r2]
   14de4:	3a3b      	subs	r2, #59	; 0x3b
   14de6:	4002      	ands	r2, r0
   14de8:	0152      	lsls	r2, r2, #5
   14dea:	4319      	orrs	r1, r3
   14dec:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   14dee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   14df0:	2b00      	cmp	r3, #0
   14df2:	d02a      	beq.n	14e4a <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   14df4:	2380      	movs	r3, #128	; 0x80
   14df6:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   14df8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d029      	beq.n	14e52 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   14dfe:	2340      	movs	r3, #64	; 0x40
   14e00:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   14e02:	b2cc      	uxtb	r4, r1
   14e04:	0021      	movs	r1, r4
   14e06:	a801      	add	r0, sp, #4
   14e08:	4b24      	ldr	r3, [pc, #144]	; (14e9c <MQTTSerialize_connect+0x12c>)
   14e0a:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   14e0c:	8b29      	ldrh	r1, [r5, #24]
   14e0e:	a801      	add	r0, sp, #4
   14e10:	4b26      	ldr	r3, [pc, #152]	; (14eac <MQTTSerialize_connect+0x13c>)
   14e12:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   14e14:	68e9      	ldr	r1, [r5, #12]
   14e16:	692a      	ldr	r2, [r5, #16]
   14e18:	696b      	ldr	r3, [r5, #20]
   14e1a:	a801      	add	r0, sp, #4
   14e1c:	4f24      	ldr	r7, [pc, #144]	; (14eb0 <MQTTSerialize_connect+0x140>)
   14e1e:	47b8      	blx	r7
	if (options->willFlag)
   14e20:	7eeb      	ldrb	r3, [r5, #27]
   14e22:	2b00      	cmp	r3, #0
   14e24:	d119      	bne.n	14e5a <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   14e26:	b263      	sxtb	r3, r4
   14e28:	2b00      	cmp	r3, #0
   14e2a:	db22      	blt.n	14e72 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   14e2c:	0663      	lsls	r3, r4, #25
   14e2e:	d427      	bmi.n	14e80 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   14e30:	9b01      	ldr	r3, [sp, #4]
   14e32:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   14e34:	b003      	add	sp, #12
   14e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   14e38:	491e      	ldr	r1, [pc, #120]	; (14eb4 <MQTTSerialize_connect+0x144>)
   14e3a:	a801      	add	r0, sp, #4
   14e3c:	4b1a      	ldr	r3, [pc, #104]	; (14ea8 <MQTTSerialize_connect+0x138>)
   14e3e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   14e40:	2104      	movs	r1, #4
   14e42:	a801      	add	r0, sp, #4
   14e44:	4b15      	ldr	r3, [pc, #84]	; (14e9c <MQTTSerialize_connect+0x12c>)
   14e46:	4798      	blx	r3
   14e48:	e7b8      	b.n	14dbc <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   14e4a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14e4c:	2b00      	cmp	r3, #0
   14e4e:	d1d1      	bne.n	14df4 <MQTTSerialize_connect+0x84>
   14e50:	e7d2      	b.n	14df8 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   14e52:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14e54:	2b00      	cmp	r3, #0
   14e56:	d1d2      	bne.n	14dfe <MQTTSerialize_connect+0x8e>
   14e58:	e7d3      	b.n	14e02 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   14e5a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14e5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14e5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14e60:	a801      	add	r0, sp, #4
   14e62:	4f13      	ldr	r7, [pc, #76]	; (14eb0 <MQTTSerialize_connect+0x140>)
   14e64:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   14e66:	6b29      	ldr	r1, [r5, #48]	; 0x30
   14e68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14e6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14e6c:	a801      	add	r0, sp, #4
   14e6e:	47b8      	blx	r7
   14e70:	e7d9      	b.n	14e26 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14e72:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14e74:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   14e76:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14e78:	a801      	add	r0, sp, #4
   14e7a:	4f0d      	ldr	r7, [pc, #52]	; (14eb0 <MQTTSerialize_connect+0x140>)
   14e7c:	47b8      	blx	r7
   14e7e:	e7d5      	b.n	14e2c <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14e80:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14e82:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14e84:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14e86:	a801      	add	r0, sp, #4
   14e88:	4c09      	ldr	r4, [pc, #36]	; (14eb0 <MQTTSerialize_connect+0x140>)
   14e8a:	47a0      	blx	r4
   14e8c:	e7d0      	b.n	14e30 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14e8e:	2002      	movs	r0, #2
   14e90:	4240      	negs	r0, r0
	return rc;
   14e92:	e7cf      	b.n	14e34 <MQTTSerialize_connect+0xc4>
   14e94:	00014ce9 	.word	0x00014ce9
   14e98:	000150f5 	.word	0x000150f5
   14e9c:	00015157 	.word	0x00015157
   14ea0:	0001506d 	.word	0x0001506d
   14ea4:	0001ae6c 	.word	0x0001ae6c
   14ea8:	0001518d 	.word	0x0001518d
   14eac:	00015163 	.word	0x00015163
   14eb0:	000151c5 	.word	0x000151c5
   14eb4:	0001ae64 	.word	0x0001ae64

00014eb8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   14eb8:	b570      	push	{r4, r5, r6, lr}
   14eba:	b082      	sub	sp, #8
   14ebc:	0005      	movs	r5, r0
   14ebe:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14ec0:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14ec2:	a801      	add	r0, sp, #4
   14ec4:	4b0e      	ldr	r3, [pc, #56]	; (14f00 <MQTTDeserialize_connack+0x48>)
   14ec6:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   14ec8:	23f0      	movs	r3, #240	; 0xf0
   14eca:	4003      	ands	r3, r0
	int rc = 0;
   14ecc:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   14ece:	2b20      	cmp	r3, #32
   14ed0:	d001      	beq.n	14ed6 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14ed2:	b002      	add	sp, #8
   14ed4:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14ed6:	4669      	mov	r1, sp
   14ed8:	9801      	ldr	r0, [sp, #4]
   14eda:	4b0a      	ldr	r3, [pc, #40]	; (14f04 <MQTTDeserialize_connack+0x4c>)
   14edc:	4798      	blx	r3
   14ede:	9b01      	ldr	r3, [sp, #4]
   14ee0:	181b      	adds	r3, r3, r0
   14ee2:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   14ee4:	9b00      	ldr	r3, [sp, #0]
   14ee6:	2b01      	cmp	r3, #1
   14ee8:	ddf3      	ble.n	14ed2 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   14eea:	a801      	add	r0, sp, #4
   14eec:	4e04      	ldr	r6, [pc, #16]	; (14f00 <MQTTDeserialize_connack+0x48>)
   14eee:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   14ef0:	0600      	lsls	r0, r0, #24
   14ef2:	0fc0      	lsrs	r0, r0, #31
   14ef4:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   14ef6:	a801      	add	r0, sp, #4
   14ef8:	47b0      	blx	r6
   14efa:	7020      	strb	r0, [r4, #0]
	rc = 1;
   14efc:	2001      	movs	r0, #1
   14efe:	e7e8      	b.n	14ed2 <MQTTDeserialize_connack+0x1a>
   14f00:	0001514b 	.word	0x0001514b
   14f04:	0001511d 	.word	0x0001511d

00014f08 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   14f08:	b510      	push	{r4, lr}
   14f0a:	b082      	sub	sp, #8
   14f0c:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   14f0e:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   14f10:	2901      	cmp	r1, #1
   14f12:	dd0f      	ble.n	14f34 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   14f14:	210f      	movs	r1, #15
   14f16:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14f18:	0109      	lsls	r1, r1, #4
   14f1a:	a801      	add	r0, sp, #4
   14f1c:	4b07      	ldr	r3, [pc, #28]	; (14f3c <MQTTSerialize_zero+0x34>)
   14f1e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14f20:	2100      	movs	r1, #0
   14f22:	9801      	ldr	r0, [sp, #4]
   14f24:	4b06      	ldr	r3, [pc, #24]	; (14f40 <MQTTSerialize_zero+0x38>)
   14f26:	4798      	blx	r3
   14f28:	9b01      	ldr	r3, [sp, #4]
   14f2a:	469c      	mov	ip, r3
   14f2c:	4460      	add	r0, ip
	rc = ptr - buf;
   14f2e:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14f30:	b002      	add	sp, #8
   14f32:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14f34:	2002      	movs	r0, #2
   14f36:	4240      	negs	r0, r0
	return rc;
   14f38:	e7fa      	b.n	14f30 <MQTTSerialize_zero+0x28>
   14f3a:	46c0      	nop			; (mov r8, r8)
   14f3c:	00015157 	.word	0x00015157
   14f40:	0001506d 	.word	0x0001506d

00014f44 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14f44:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   14f46:	220e      	movs	r2, #14
   14f48:	4b01      	ldr	r3, [pc, #4]	; (14f50 <MQTTSerialize_disconnect+0xc>)
   14f4a:	4798      	blx	r3
}
   14f4c:	bd10      	pop	{r4, pc}
   14f4e:	46c0      	nop			; (mov r8, r8)
   14f50:	00014f09 	.word	0x00014f09

00014f54 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14f54:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   14f56:	220c      	movs	r2, #12
   14f58:	4b01      	ldr	r3, [pc, #4]	; (14f60 <MQTTSerialize_pingreq+0xc>)
   14f5a:	4798      	blx	r3
}
   14f5c:	bd10      	pop	{r4, pc}
   14f5e:	46c0      	nop			; (mov r8, r8)
   14f60:	00014f09 	.word	0x00014f09

00014f64 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f66:	b085      	sub	sp, #20
   14f68:	0005      	movs	r5, r0
   14f6a:	000e      	movs	r6, r1
   14f6c:	0014      	movs	r4, r2
   14f6e:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f72:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14f74:	2300      	movs	r3, #0
   14f76:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14f78:	a803      	add	r0, sp, #12
   14f7a:	4b1c      	ldr	r3, [pc, #112]	; (14fec <MQTTDeserialize_publish+0x88>)
   14f7c:	4798      	blx	r3
   14f7e:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14f80:	22f0      	movs	r2, #240	; 0xf0
   14f82:	4010      	ands	r0, r2
	int rc = 0;
   14f84:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   14f86:	2830      	cmp	r0, #48	; 0x30
   14f88:	d002      	beq.n	14f90 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14f8a:	0038      	movs	r0, r7
   14f8c:	b005      	add	sp, #20
   14f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   14f90:	071a      	lsls	r2, r3, #28
   14f92:	0fd2      	lsrs	r2, r2, #31
   14f94:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   14f96:	075a      	lsls	r2, r3, #29
   14f98:	0f92      	lsrs	r2, r2, #30
   14f9a:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   14f9c:	07db      	lsls	r3, r3, #31
   14f9e:	0fdb      	lsrs	r3, r3, #31
   14fa0:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14fa2:	a902      	add	r1, sp, #8
   14fa4:	9803      	ldr	r0, [sp, #12]
   14fa6:	4b12      	ldr	r3, [pc, #72]	; (14ff0 <MQTTDeserialize_publish+0x8c>)
   14fa8:	4798      	blx	r3
   14faa:	0007      	movs	r7, r0
   14fac:	9b03      	ldr	r3, [sp, #12]
   14fae:	181c      	adds	r4, r3, r0
   14fb0:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   14fb2:	9b02      	ldr	r3, [sp, #8]
   14fb4:	469c      	mov	ip, r3
   14fb6:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14fb8:	0022      	movs	r2, r4
   14fba:	a903      	add	r1, sp, #12
   14fbc:	980a      	ldr	r0, [sp, #40]	; 0x28
   14fbe:	4b0d      	ldr	r3, [pc, #52]	; (14ff4 <MQTTDeserialize_publish+0x90>)
   14fc0:	4798      	blx	r3
   14fc2:	2800      	cmp	r0, #0
   14fc4:	d0e1      	beq.n	14f8a <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   14fc6:	9b03      	ldr	r3, [sp, #12]
   14fc8:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14fca:	d4de      	bmi.n	14f8a <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   14fcc:	6833      	ldr	r3, [r6, #0]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	dd04      	ble.n	14fdc <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   14fd2:	a803      	add	r0, sp, #12
   14fd4:	4b08      	ldr	r3, [pc, #32]	; (14ff8 <MQTTDeserialize_publish+0x94>)
   14fd6:	4798      	blx	r3
   14fd8:	9b01      	ldr	r3, [sp, #4]
   14fda:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   14fdc:	9b03      	ldr	r3, [sp, #12]
   14fde:	1ae4      	subs	r4, r4, r3
   14fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14fe2:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   14fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14fe6:	6013      	str	r3, [r2, #0]
	rc = 1;
   14fe8:	2701      	movs	r7, #1
   14fea:	e7ce      	b.n	14f8a <MQTTDeserialize_publish+0x26>
   14fec:	0001514b 	.word	0x0001514b
   14ff0:	0001511d 	.word	0x0001511d
   14ff4:	00015211 	.word	0x00015211
   14ff8:	00015139 	.word	0x00015139

00014ffc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   14ffc:	b570      	push	{r4, r5, r6, lr}
   14ffe:	b082      	sub	sp, #8
   15000:	0005      	movs	r5, r0
   15002:	000e      	movs	r6, r1
   15004:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   15006:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   15008:	a801      	add	r0, sp, #4
   1500a:	4b0c      	ldr	r3, [pc, #48]	; (1503c <MQTTDeserialize_ack+0x40>)
   1500c:	4798      	blx	r3
	*dup = header.bits.dup;
   1500e:	0703      	lsls	r3, r0, #28
   15010:	0fdb      	lsrs	r3, r3, #31
   15012:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   15014:	0600      	lsls	r0, r0, #24
   15016:	0f00      	lsrs	r0, r0, #28
   15018:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1501a:	4669      	mov	r1, sp
   1501c:	9801      	ldr	r0, [sp, #4]
   1501e:	4b08      	ldr	r3, [pc, #32]	; (15040 <MQTTDeserialize_ack+0x44>)
   15020:	4798      	blx	r3
   15022:	9b01      	ldr	r3, [sp, #4]
   15024:	181b      	adds	r3, r3, r0
   15026:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   15028:	9b00      	ldr	r3, [sp, #0]
   1502a:	2b01      	cmp	r3, #1
   1502c:	dd04      	ble.n	15038 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   1502e:	a801      	add	r0, sp, #4
   15030:	4b04      	ldr	r3, [pc, #16]	; (15044 <MQTTDeserialize_ack+0x48>)
   15032:	4798      	blx	r3
   15034:	8020      	strh	r0, [r4, #0]

	rc = 1;
   15036:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15038:	b002      	add	sp, #8
   1503a:	bd70      	pop	{r4, r5, r6, pc}
   1503c:	0001514b 	.word	0x0001514b
   15040:	0001511d 	.word	0x0001511d
   15044:	00015139 	.word	0x00015139

00015048 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   15048:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   1504a:	2900      	cmp	r1, #0
   1504c:	dd0a      	ble.n	15064 <bufchar+0x1c>
   1504e:	4b06      	ldr	r3, [pc, #24]	; (15068 <bufchar+0x20>)
   15050:	681b      	ldr	r3, [r3, #0]
   15052:	185d      	adds	r5, r3, r1
   15054:	002c      	movs	r4, r5
		*c = *bufptr++;
   15056:	781a      	ldrb	r2, [r3, #0]
   15058:	7002      	strb	r2, [r0, #0]
   1505a:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   1505c:	42a3      	cmp	r3, r4
   1505e:	d1fa      	bne.n	15056 <bufchar+0xe>
   15060:	4b01      	ldr	r3, [pc, #4]	; (15068 <bufchar+0x20>)
   15062:	601d      	str	r5, [r3, #0]
	return count;
}
   15064:	0008      	movs	r0, r1
   15066:	bd30      	pop	{r4, r5, pc}
   15068:	200008ac 	.word	0x200008ac

0001506c <MQTTPacket_encode>:
{
   1506c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1506e:	b083      	sub	sp, #12
   15070:	2500      	movs	r5, #0
		char d = length % 128;
   15072:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   15074:	2780      	movs	r7, #128	; 0x80
   15076:	427f      	negs	r7, r7
   15078:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   1507a:	17ca      	asrs	r2, r1, #31
   1507c:	0e54      	lsrs	r4, r2, #25
   1507e:	190b      	adds	r3, r1, r4
   15080:	4033      	ands	r3, r6
   15082:	1b1b      	subs	r3, r3, r4
   15084:	b2db      	uxtb	r3, r3
		length /= 128;
   15086:	4032      	ands	r2, r6
   15088:	1851      	adds	r1, r2, r1
   1508a:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   1508c:	2900      	cmp	r1, #0
   1508e:	dd03      	ble.n	15098 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   15090:	433b      	orrs	r3, r7
		buf[rc++] = d;
   15092:	5543      	strb	r3, [r0, r5]
   15094:	3501      	adds	r5, #1
   15096:	e7ef      	b.n	15078 <MQTTPacket_encode+0xc>
   15098:	5543      	strb	r3, [r0, r5]
   1509a:	9801      	ldr	r0, [sp, #4]
   1509c:	3001      	adds	r0, #1
}
   1509e:	b003      	add	sp, #12
   150a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000150a2 <MQTTPacket_decode>:
{
   150a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   150a4:	46ce      	mov	lr, r9
   150a6:	4647      	mov	r7, r8
   150a8:	b580      	push	{r7, lr}
   150aa:	b083      	sub	sp, #12
   150ac:	4680      	mov	r8, r0
   150ae:	000f      	movs	r7, r1
	*value = 0;
   150b0:	2300      	movs	r3, #0
   150b2:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   150b4:	2401      	movs	r4, #1
	int multiplier = 1;
   150b6:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   150b8:	466b      	mov	r3, sp
   150ba:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   150bc:	237f      	movs	r3, #127	; 0x7f
   150be:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   150c0:	2101      	movs	r1, #1
   150c2:	0028      	movs	r0, r5
   150c4:	47c0      	blx	r8
		if (rc != 1)
   150c6:	2801      	cmp	r0, #1
   150c8:	d10e      	bne.n	150e8 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   150ca:	782b      	ldrb	r3, [r5, #0]
   150cc:	464a      	mov	r2, r9
   150ce:	401a      	ands	r2, r3
   150d0:	4372      	muls	r2, r6
   150d2:	6839      	ldr	r1, [r7, #0]
   150d4:	468c      	mov	ip, r1
   150d6:	4462      	add	r2, ip
   150d8:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   150da:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   150dc:	b25b      	sxtb	r3, r3
   150de:	2b00      	cmp	r3, #0
   150e0:	da02      	bge.n	150e8 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   150e2:	3401      	adds	r4, #1
   150e4:	2c05      	cmp	r4, #5
   150e6:	d1eb      	bne.n	150c0 <MQTTPacket_decode+0x1e>
}
   150e8:	0020      	movs	r0, r4
   150ea:	b003      	add	sp, #12
   150ec:	bc0c      	pop	{r2, r3}
   150ee:	4690      	mov	r8, r2
   150f0:	4699      	mov	r9, r3
   150f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000150f4 <MQTTPacket_len>:
{
   150f4:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   150f6:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   150f8:	3002      	adds	r0, #2
	if (rem_len < 128)
   150fa:	2a7f      	cmp	r2, #127	; 0x7f
   150fc:	dd07      	ble.n	1510e <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   150fe:	4905      	ldr	r1, [pc, #20]	; (15114 <MQTTPacket_len+0x20>)
		rem_len += 2;
   15100:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   15102:	428a      	cmp	r2, r1
   15104:	dd03      	ble.n	1510e <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   15106:	4904      	ldr	r1, [pc, #16]	; (15118 <MQTTPacket_len+0x24>)
		rem_len += 4;
   15108:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   1510a:	428a      	cmp	r2, r1
   1510c:	dd00      	ble.n	15110 <MQTTPacket_len+0x1c>
}
   1510e:	4770      	bx	lr
		rem_len += 3;
   15110:	1d18      	adds	r0, r3, #4
   15112:	e7fc      	b.n	1510e <MQTTPacket_len+0x1a>
   15114:	00003fff 	.word	0x00003fff
   15118:	001ffffe 	.word	0x001ffffe

0001511c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1511c:	b510      	push	{r4, lr}
	bufptr = buf;
   1511e:	4b03      	ldr	r3, [pc, #12]	; (1512c <MQTTPacket_decodeBuf+0x10>)
   15120:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   15122:	4803      	ldr	r0, [pc, #12]	; (15130 <MQTTPacket_decodeBuf+0x14>)
   15124:	4b03      	ldr	r3, [pc, #12]	; (15134 <MQTTPacket_decodeBuf+0x18>)
   15126:	4798      	blx	r3
}
   15128:	bd10      	pop	{r4, pc}
   1512a:	46c0      	nop			; (mov r8, r8)
   1512c:	200008ac 	.word	0x200008ac
   15130:	00015049 	.word	0x00015049
   15134:	000150a3 	.word	0x000150a3

00015138 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   15138:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   1513a:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   1513c:	7813      	ldrb	r3, [r2, #0]
   1513e:	021b      	lsls	r3, r3, #8
   15140:	7850      	ldrb	r0, [r2, #1]
   15142:	1818      	adds	r0, r3, r0
	*pptr += 2;
   15144:	3202      	adds	r2, #2
   15146:	600a      	str	r2, [r1, #0]
	return len;
}
   15148:	4770      	bx	lr

0001514a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1514a:	0002      	movs	r2, r0
	char c = **pptr;
   1514c:	6803      	ldr	r3, [r0, #0]
   1514e:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   15150:	3301      	adds	r3, #1
   15152:	6013      	str	r3, [r2, #0]
	return c;
}
   15154:	4770      	bx	lr

00015156 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   15156:	6803      	ldr	r3, [r0, #0]
   15158:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   1515a:	6803      	ldr	r3, [r0, #0]
   1515c:	3301      	adds	r3, #1
   1515e:	6003      	str	r3, [r0, #0]
}
   15160:	4770      	bx	lr

00015162 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   15162:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   15164:	17ca      	asrs	r2, r1, #31
   15166:	23ff      	movs	r3, #255	; 0xff
   15168:	001c      	movs	r4, r3
   1516a:	4014      	ands	r4, r2
   1516c:	1864      	adds	r4, r4, r1
   1516e:	1224      	asrs	r4, r4, #8
   15170:	6805      	ldr	r5, [r0, #0]
   15172:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   15174:	6804      	ldr	r4, [r0, #0]
   15176:	1c65      	adds	r5, r4, #1
   15178:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   1517a:	0e12      	lsrs	r2, r2, #24
   1517c:	1889      	adds	r1, r1, r2
   1517e:	400b      	ands	r3, r1
   15180:	1a9b      	subs	r3, r3, r2
   15182:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   15184:	6803      	ldr	r3, [r0, #0]
   15186:	3301      	adds	r3, #1
   15188:	6003      	str	r3, [r0, #0]
}
   1518a:	bd30      	pop	{r4, r5, pc}

0001518c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1518c:	b570      	push	{r4, r5, r6, lr}
   1518e:	0004      	movs	r4, r0
   15190:	000e      	movs	r6, r1
	int len = strlen(string);
   15192:	0008      	movs	r0, r1
   15194:	4b08      	ldr	r3, [pc, #32]	; (151b8 <writeCString+0x2c>)
   15196:	4798      	blx	r3
   15198:	0005      	movs	r5, r0
	writeInt(pptr, len);
   1519a:	0001      	movs	r1, r0
   1519c:	0020      	movs	r0, r4
   1519e:	4b07      	ldr	r3, [pc, #28]	; (151bc <writeCString+0x30>)
   151a0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   151a2:	002a      	movs	r2, r5
   151a4:	0031      	movs	r1, r6
   151a6:	6820      	ldr	r0, [r4, #0]
   151a8:	4b05      	ldr	r3, [pc, #20]	; (151c0 <writeCString+0x34>)
   151aa:	4798      	blx	r3
	*pptr += len;
   151ac:	6823      	ldr	r3, [r4, #0]
   151ae:	469c      	mov	ip, r3
   151b0:	4465      	add	r5, ip
   151b2:	6025      	str	r5, [r4, #0]
}
   151b4:	bd70      	pop	{r4, r5, r6, pc}
   151b6:	46c0      	nop			; (mov r8, r8)
   151b8:	00017f27 	.word	0x00017f27
   151bc:	00015163 	.word	0x00015163
   151c0:	00017991 	.word	0x00017991

000151c4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   151c4:	b530      	push	{r4, r5, lr}
   151c6:	b085      	sub	sp, #20
   151c8:	0005      	movs	r5, r0
   151ca:	9101      	str	r1, [sp, #4]
   151cc:	9303      	str	r3, [sp, #12]
   151ce:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   151d0:	dc06      	bgt.n	151e0 <writeMQTTString+0x1c>
   151d2:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   151d4:	2900      	cmp	r1, #0
   151d6:	d010      	beq.n	151fa <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   151d8:	4b0a      	ldr	r3, [pc, #40]	; (15204 <writeMQTTString+0x40>)
   151da:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   151dc:	b005      	add	sp, #20
   151de:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   151e0:	0011      	movs	r1, r2
   151e2:	4b09      	ldr	r3, [pc, #36]	; (15208 <writeMQTTString+0x44>)
   151e4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   151e6:	0022      	movs	r2, r4
   151e8:	9903      	ldr	r1, [sp, #12]
   151ea:	6828      	ldr	r0, [r5, #0]
   151ec:	4b07      	ldr	r3, [pc, #28]	; (1520c <writeMQTTString+0x48>)
   151ee:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   151f0:	682b      	ldr	r3, [r5, #0]
   151f2:	469c      	mov	ip, r3
   151f4:	4464      	add	r4, ip
   151f6:	602c      	str	r4, [r5, #0]
   151f8:	e7f0      	b.n	151dc <writeMQTTString+0x18>
		writeInt(pptr, 0);
   151fa:	2100      	movs	r1, #0
   151fc:	4b02      	ldr	r3, [pc, #8]	; (15208 <writeMQTTString+0x44>)
   151fe:	4798      	blx	r3
}
   15200:	e7ec      	b.n	151dc <writeMQTTString+0x18>
   15202:	46c0      	nop			; (mov r8, r8)
   15204:	0001518d 	.word	0x0001518d
   15208:	00015163 	.word	0x00015163
   1520c:	00017991 	.word	0x00017991

00015210 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   15210:	b570      	push	{r4, r5, r6, lr}
   15212:	0005      	movs	r5, r0
   15214:	000c      	movs	r4, r1
   15216:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   15218:	680b      	ldr	r3, [r1, #0]
   1521a:	1ad3      	subs	r3, r2, r3
   1521c:	2b01      	cmp	r3, #1
   1521e:	dd12      	ble.n	15246 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   15220:	0008      	movs	r0, r1
   15222:	4b0a      	ldr	r3, [pc, #40]	; (1524c <readMQTTLenString+0x3c>)
   15224:	4798      	blx	r3
   15226:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   15228:	6822      	ldr	r2, [r4, #0]
   1522a:	1811      	adds	r1, r2, r0
	int rc = 0;
   1522c:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1522e:	428e      	cmp	r6, r1
   15230:	d305      	bcc.n	1523e <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   15232:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   15234:	6823      	ldr	r3, [r4, #0]
   15236:	469c      	mov	ip, r3
   15238:	4460      	add	r0, ip
   1523a:	6020      	str	r0, [r4, #0]
			rc = 1;
   1523c:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   1523e:	2200      	movs	r2, #0
   15240:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   15242:	0018      	movs	r0, r3
   15244:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   15246:	2300      	movs	r3, #0
   15248:	e7f9      	b.n	1523e <readMQTTLenString+0x2e>
   1524a:	46c0      	nop			; (mov r8, r8)
   1524c:	00015139 	.word	0x00015139

00015250 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   15250:	b500      	push	{lr}
   15252:	b085      	sub	sp, #20
   15254:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   15256:	2800      	cmp	r0, #0
   15258:	d003      	beq.n	15262 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   1525a:	4b03      	ldr	r3, [pc, #12]	; (15268 <MQTTstrlen+0x18>)
   1525c:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   1525e:	b005      	add	sp, #20
   15260:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   15262:	9802      	ldr	r0, [sp, #8]
	return rc;
   15264:	e7fb      	b.n	1525e <MQTTstrlen+0xe>
   15266:	46c0      	nop			; (mov r8, r8)
   15268:	00017f27 	.word	0x00017f27

0001526c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1526c:	b570      	push	{r4, r5, r6, lr}
   1526e:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   15270:	6806      	ldr	r6, [r0, #0]
   15272:	2e00      	cmp	r6, #0
   15274:	d00b      	beq.n	1528e <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   15276:	0030      	movs	r0, r6
   15278:	4b0b      	ldr	r3, [pc, #44]	; (152a8 <MQTTPacket_equals+0x3c>)
   1527a:	4798      	blx	r3
   1527c:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   1527e:	0028      	movs	r0, r5
   15280:	4b09      	ldr	r3, [pc, #36]	; (152a8 <MQTTPacket_equals+0x3c>)
   15282:	4798      	blx	r3
   15284:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   15286:	4284      	cmp	r4, r0
   15288:	d004      	beq.n	15294 <MQTTPacket_equals+0x28>
}
   1528a:	0018      	movs	r0, r3
   1528c:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   1528e:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   15290:	6844      	ldr	r4, [r0, #4]
   15292:	e7f4      	b.n	1527e <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   15294:	0022      	movs	r2, r4
   15296:	0029      	movs	r1, r5
   15298:	0030      	movs	r0, r6
   1529a:	4b04      	ldr	r3, [pc, #16]	; (152ac <MQTTPacket_equals+0x40>)
   1529c:	4798      	blx	r3
   1529e:	4243      	negs	r3, r0
   152a0:	4143      	adcs	r3, r0
   152a2:	b2db      	uxtb	r3, r3
   152a4:	e7f1      	b.n	1528a <MQTTPacket_equals+0x1e>
   152a6:	46c0      	nop			; (mov r8, r8)
   152a8:	00017f27 	.word	0x00017f27
   152ac:	00017f35 	.word	0x00017f35

000152b0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   152b0:	b510      	push	{r4, lr}
   152b2:	b084      	sub	sp, #16
   152b4:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   152b6:	0008      	movs	r0, r1
   152b8:	0011      	movs	r1, r2
   152ba:	001a      	movs	r2, r3
   152bc:	4b05      	ldr	r3, [pc, #20]	; (152d4 <MQTTSerialize_publishLength+0x24>)
   152be:	4798      	blx	r3
   152c0:	3002      	adds	r0, #2
   152c2:	9b06      	ldr	r3, [sp, #24]
   152c4:	469c      	mov	ip, r3
   152c6:	4460      	add	r0, ip
	if (qos > 0)
   152c8:	2c00      	cmp	r4, #0
   152ca:	dd00      	ble.n	152ce <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   152cc:	3002      	adds	r0, #2
	return len;
}
   152ce:	b004      	add	sp, #16
   152d0:	bd10      	pop	{r4, pc}
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	00015251 	.word	0x00015251

000152d8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   152d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   152da:	46de      	mov	lr, fp
   152dc:	4657      	mov	r7, sl
   152de:	464e      	mov	r6, r9
   152e0:	b5c0      	push	{r6, r7, lr}
   152e2:	b084      	sub	sp, #16
   152e4:	0007      	movs	r7, r0
   152e6:	468b      	mov	fp, r1
   152e8:	4692      	mov	sl, r2
   152ea:	001e      	movs	r6, r3
   152ec:	ab0c      	add	r3, sp, #48	; 0x30
   152ee:	781b      	ldrb	r3, [r3, #0]
   152f0:	4699      	mov	r9, r3
   152f2:	ab0d      	add	r3, sp, #52	; 0x34
   152f4:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   152f6:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   152f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   152fa:	9300      	str	r3, [sp, #0]
   152fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   152fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15300:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15302:	0030      	movs	r0, r6
   15304:	4d1f      	ldr	r5, [pc, #124]	; (15384 <MQTTSerialize_publish+0xac>)
   15306:	47a8      	blx	r5
   15308:	0005      	movs	r5, r0
   1530a:	4b1f      	ldr	r3, [pc, #124]	; (15388 <MQTTSerialize_publish+0xb0>)
   1530c:	4798      	blx	r3
   1530e:	4558      	cmp	r0, fp
   15310:	dc34      	bgt.n	1537c <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   15312:	2201      	movs	r2, #1
   15314:	4653      	mov	r3, sl
   15316:	4013      	ands	r3, r2
   15318:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   1531a:	2103      	movs	r1, #3
   1531c:	4031      	ands	r1, r6
   1531e:	0048      	lsls	r0, r1, #1
   15320:	2130      	movs	r1, #48	; 0x30
   15322:	4319      	orrs	r1, r3
   15324:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   15326:	464b      	mov	r3, r9
   15328:	4013      	ands	r3, r2
   1532a:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1532c:	4319      	orrs	r1, r3
   1532e:	a803      	add	r0, sp, #12
   15330:	4b16      	ldr	r3, [pc, #88]	; (1538c <MQTTSerialize_publish+0xb4>)
   15332:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   15334:	0029      	movs	r1, r5
   15336:	9803      	ldr	r0, [sp, #12]
   15338:	4b15      	ldr	r3, [pc, #84]	; (15390 <MQTTSerialize_publish+0xb8>)
   1533a:	4798      	blx	r3
   1533c:	9b03      	ldr	r3, [sp, #12]
   1533e:	469c      	mov	ip, r3
   15340:	4460      	add	r0, ip
   15342:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   15344:	990e      	ldr	r1, [sp, #56]	; 0x38
   15346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15348:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1534a:	a803      	add	r0, sp, #12
   1534c:	4d11      	ldr	r5, [pc, #68]	; (15394 <MQTTSerialize_publish+0xbc>)
   1534e:	47a8      	blx	r5

	if (qos > 0)
   15350:	2e00      	cmp	r6, #0
   15352:	dd03      	ble.n	1535c <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   15354:	0021      	movs	r1, r4
   15356:	a803      	add	r0, sp, #12
   15358:	4b0f      	ldr	r3, [pc, #60]	; (15398 <MQTTSerialize_publish+0xc0>)
   1535a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1535c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1535e:	9911      	ldr	r1, [sp, #68]	; 0x44
   15360:	9803      	ldr	r0, [sp, #12]
   15362:	4b0e      	ldr	r3, [pc, #56]	; (1539c <MQTTSerialize_publish+0xc4>)
   15364:	4798      	blx	r3
	ptr += payloadlen;
   15366:	9b03      	ldr	r3, [sp, #12]
   15368:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1536a:	4694      	mov	ip, r2
   1536c:	4463      	add	r3, ip

	rc = ptr - buf;
   1536e:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15370:	b004      	add	sp, #16
   15372:	bc1c      	pop	{r2, r3, r4}
   15374:	4691      	mov	r9, r2
   15376:	469a      	mov	sl, r3
   15378:	46a3      	mov	fp, r4
   1537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1537c:	2002      	movs	r0, #2
   1537e:	4240      	negs	r0, r0
	return rc;
   15380:	e7f6      	b.n	15370 <MQTTSerialize_publish+0x98>
   15382:	46c0      	nop			; (mov r8, r8)
   15384:	000152b1 	.word	0x000152b1
   15388:	000150f5 	.word	0x000150f5
   1538c:	00015157 	.word	0x00015157
   15390:	0001506d 	.word	0x0001506d
   15394:	000151c5 	.word	0x000151c5
   15398:	00015163 	.word	0x00015163
   1539c:	00017991 	.word	0x00017991

000153a0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   153a0:	b530      	push	{r4, r5, lr}
   153a2:	b083      	sub	sp, #12
   153a4:	0004      	movs	r4, r0
   153a6:	a806      	add	r0, sp, #24
   153a8:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   153aa:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   153ac:	2903      	cmp	r1, #3
   153ae:	dd1e      	ble.n	153ee <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   153b0:	210f      	movs	r1, #15
   153b2:	4011      	ands	r1, r2
	header.bits.dup = dup;
   153b4:	2001      	movs	r0, #1
   153b6:	4003      	ands	r3, r0
   153b8:	00db      	lsls	r3, r3, #3
   153ba:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   153bc:	3a06      	subs	r2, #6
   153be:	4250      	negs	r0, r2
   153c0:	4142      	adcs	r2, r0
   153c2:	0052      	lsls	r2, r2, #1
   153c4:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   153c6:	4311      	orrs	r1, r2
   153c8:	a801      	add	r0, sp, #4
   153ca:	4b0a      	ldr	r3, [pc, #40]	; (153f4 <MQTTSerialize_ack+0x54>)
   153cc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   153ce:	2102      	movs	r1, #2
   153d0:	9801      	ldr	r0, [sp, #4]
   153d2:	4b09      	ldr	r3, [pc, #36]	; (153f8 <MQTTSerialize_ack+0x58>)
   153d4:	4798      	blx	r3
   153d6:	9b01      	ldr	r3, [sp, #4]
   153d8:	469c      	mov	ip, r3
   153da:	4460      	add	r0, ip
   153dc:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   153de:	0029      	movs	r1, r5
   153e0:	a801      	add	r0, sp, #4
   153e2:	4b06      	ldr	r3, [pc, #24]	; (153fc <MQTTSerialize_ack+0x5c>)
   153e4:	4798      	blx	r3
	rc = ptr - buf;
   153e6:	9b01      	ldr	r3, [sp, #4]
   153e8:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   153ea:	b003      	add	sp, #12
   153ec:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   153ee:	2002      	movs	r0, #2
   153f0:	4240      	negs	r0, r0
	return rc;
   153f2:	e7fa      	b.n	153ea <MQTTSerialize_ack+0x4a>
   153f4:	00015157 	.word	0x00015157
   153f8:	0001506d 	.word	0x0001506d
   153fc:	00015163 	.word	0x00015163

00015400 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   15400:	b5f0      	push	{r4, r5, r6, r7, lr}
   15402:	46c6      	mov	lr, r8
   15404:	b500      	push	{lr}
   15406:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   15408:	dd12      	ble.n	15430 <MQTTSerialize_subscribeLength+0x30>
   1540a:	000c      	movs	r4, r1
   1540c:	2602      	movs	r6, #2
   1540e:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   15410:	4b08      	ldr	r3, [pc, #32]	; (15434 <MQTTSerialize_subscribeLength+0x34>)
   15412:	4698      	mov	r8, r3
   15414:	6820      	ldr	r0, [r4, #0]
   15416:	6861      	ldr	r1, [r4, #4]
   15418:	68a2      	ldr	r2, [r4, #8]
   1541a:	47c0      	blx	r8
   1541c:	3003      	adds	r0, #3
   1541e:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   15420:	3501      	adds	r5, #1
   15422:	340c      	adds	r4, #12
   15424:	42af      	cmp	r7, r5
   15426:	d1f5      	bne.n	15414 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   15428:	0030      	movs	r0, r6
   1542a:	bc04      	pop	{r2}
   1542c:	4690      	mov	r8, r2
   1542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   15430:	2602      	movs	r6, #2
	return len;
   15432:	e7f9      	b.n	15428 <MQTTSerialize_subscribeLength+0x28>
   15434:	00015251 	.word	0x00015251

00015438 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   15438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1543a:	46d6      	mov	lr, sl
   1543c:	464f      	mov	r7, r9
   1543e:	4646      	mov	r6, r8
   15440:	b5c0      	push	{r6, r7, lr}
   15442:	b084      	sub	sp, #16
   15444:	4682      	mov	sl, r0
   15446:	000e      	movs	r6, r1
   15448:	0015      	movs	r5, r2
   1544a:	9301      	str	r3, [sp, #4]
   1544c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   1544e:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   15450:	990d      	ldr	r1, [sp, #52]	; 0x34
   15452:	0038      	movs	r0, r7
   15454:	4b1f      	ldr	r3, [pc, #124]	; (154d4 <MQTTSerialize_subscribe+0x9c>)
   15456:	4798      	blx	r3
   15458:	0004      	movs	r4, r0
   1545a:	4b1f      	ldr	r3, [pc, #124]	; (154d8 <MQTTSerialize_subscribe+0xa0>)
   1545c:	4798      	blx	r3
   1545e:	42b0      	cmp	r0, r6
   15460:	dc34      	bgt.n	154cc <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   15462:	2101      	movs	r1, #1
   15464:	4029      	ands	r1, r5
   15466:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   15468:	2180      	movs	r1, #128	; 0x80
   1546a:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1546c:	2302      	movs	r3, #2
   1546e:	4319      	orrs	r1, r3
   15470:	a803      	add	r0, sp, #12
   15472:	4b1a      	ldr	r3, [pc, #104]	; (154dc <MQTTSerialize_subscribe+0xa4>)
   15474:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   15476:	0021      	movs	r1, r4
   15478:	9803      	ldr	r0, [sp, #12]
   1547a:	4b19      	ldr	r3, [pc, #100]	; (154e0 <MQTTSerialize_subscribe+0xa8>)
   1547c:	4798      	blx	r3
   1547e:	9a03      	ldr	r2, [sp, #12]
   15480:	4694      	mov	ip, r2
   15482:	4460      	add	r0, ip
   15484:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   15486:	9901      	ldr	r1, [sp, #4]
   15488:	a803      	add	r0, sp, #12
   1548a:	4b16      	ldr	r3, [pc, #88]	; (154e4 <MQTTSerialize_subscribe+0xac>)
   1548c:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1548e:	2f00      	cmp	r7, #0
   15490:	dd13      	ble.n	154ba <MQTTSerialize_subscribe+0x82>
   15492:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   15494:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   15496:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   15498:	4b13      	ldr	r3, [pc, #76]	; (154e8 <MQTTSerialize_subscribe+0xb0>)
   1549a:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   1549c:	4b0f      	ldr	r3, [pc, #60]	; (154dc <MQTTSerialize_subscribe+0xa4>)
   1549e:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   154a0:	6821      	ldr	r1, [r4, #0]
   154a2:	6862      	ldr	r2, [r4, #4]
   154a4:	68a3      	ldr	r3, [r4, #8]
   154a6:	a803      	add	r0, sp, #12
   154a8:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   154aa:	ce02      	ldmia	r6!, {r1}
   154ac:	b2c9      	uxtb	r1, r1
   154ae:	a803      	add	r0, sp, #12
   154b0:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   154b2:	3501      	adds	r5, #1
   154b4:	340c      	adds	r4, #12
   154b6:	42af      	cmp	r7, r5
   154b8:	d1f2      	bne.n	154a0 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   154ba:	9b03      	ldr	r3, [sp, #12]
   154bc:	4652      	mov	r2, sl
   154be:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   154c0:	b004      	add	sp, #16
   154c2:	bc1c      	pop	{r2, r3, r4}
   154c4:	4690      	mov	r8, r2
   154c6:	4699      	mov	r9, r3
   154c8:	46a2      	mov	sl, r4
   154ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   154cc:	2002      	movs	r0, #2
   154ce:	4240      	negs	r0, r0
	return rc;
   154d0:	e7f6      	b.n	154c0 <MQTTSerialize_subscribe+0x88>
   154d2:	46c0      	nop			; (mov r8, r8)
   154d4:	00015401 	.word	0x00015401
   154d8:	000150f5 	.word	0x000150f5
   154dc:	00015157 	.word	0x00015157
   154e0:	0001506d 	.word	0x0001506d
   154e4:	00015163 	.word	0x00015163
   154e8:	000151c5 	.word	0x000151c5

000154ec <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   154ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   154ee:	46ce      	mov	lr, r9
   154f0:	4647      	mov	r7, r8
   154f2:	b580      	push	{r7, lr}
   154f4:	b083      	sub	sp, #12
   154f6:	0004      	movs	r4, r0
   154f8:	000e      	movs	r6, r1
   154fa:	0015      	movs	r5, r2
   154fc:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   154fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15500:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   15502:	a801      	add	r0, sp, #4
   15504:	4b1e      	ldr	r3, [pc, #120]	; (15580 <MQTTDeserialize_suback+0x94>)
   15506:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   15508:	23f0      	movs	r3, #240	; 0xf0
   1550a:	4003      	ands	r3, r0
	int rc = 0;
   1550c:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   1550e:	2b90      	cmp	r3, #144	; 0x90
   15510:	d004      	beq.n	1551c <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15512:	b003      	add	sp, #12
   15514:	bc0c      	pop	{r2, r3}
   15516:	4690      	mov	r8, r2
   15518:	4699      	mov	r9, r3
   1551a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1551c:	4669      	mov	r1, sp
   1551e:	9801      	ldr	r0, [sp, #4]
   15520:	4b18      	ldr	r3, [pc, #96]	; (15584 <MQTTDeserialize_suback+0x98>)
   15522:	4798      	blx	r3
   15524:	9b01      	ldr	r3, [sp, #4]
   15526:	181b      	adds	r3, r3, r0
   15528:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   1552a:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   1552c:	2a01      	cmp	r2, #1
   1552e:	ddf0      	ble.n	15512 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   15530:	4698      	mov	r8, r3
   15532:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   15534:	a801      	add	r0, sp, #4
   15536:	4b14      	ldr	r3, [pc, #80]	; (15588 <MQTTDeserialize_suback+0x9c>)
   15538:	4798      	blx	r3
   1553a:	8020      	strh	r0, [r4, #0]
	*count = 0;
   1553c:	2300      	movs	r3, #0
   1553e:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   15540:	9b01      	ldr	r3, [sp, #4]
   15542:	4598      	cmp	r8, r3
   15544:	d916      	bls.n	15574 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   15546:	2e00      	cmp	r6, #0
   15548:	db16      	blt.n	15578 <MQTTDeserialize_suback+0x8c>
   1554a:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   1554c:	4a0c      	ldr	r2, [pc, #48]	; (15580 <MQTTDeserialize_suback+0x94>)
   1554e:	4691      	mov	r9, r2
   15550:	1c5a      	adds	r2, r3, #1
   15552:	602a      	str	r2, [r5, #0]
   15554:	009b      	lsls	r3, r3, #2
   15556:	18fc      	adds	r4, r7, r3
   15558:	a801      	add	r0, sp, #4
   1555a:	47c8      	blx	r9
   1555c:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   1555e:	9b01      	ldr	r3, [sp, #4]
   15560:	4598      	cmp	r8, r3
   15562:	d905      	bls.n	15570 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   15564:	682b      	ldr	r3, [r5, #0]
   15566:	42b3      	cmp	r3, r6
   15568:	ddf2      	ble.n	15550 <MQTTDeserialize_suback+0x64>
			rc = -1;
   1556a:	2001      	movs	r0, #1
   1556c:	4240      	negs	r0, r0
	return rc;
   1556e:	e7d0      	b.n	15512 <MQTTDeserialize_suback+0x26>
	rc = 1;
   15570:	2001      	movs	r0, #1
   15572:	e7ce      	b.n	15512 <MQTTDeserialize_suback+0x26>
   15574:	2001      	movs	r0, #1
   15576:	e7cc      	b.n	15512 <MQTTDeserialize_suback+0x26>
			rc = -1;
   15578:	2001      	movs	r0, #1
   1557a:	4240      	negs	r0, r0
   1557c:	e7c9      	b.n	15512 <MQTTDeserialize_suback+0x26>
   1557e:	46c0      	nop			; (mov r8, r8)
   15580:	0001514b 	.word	0x0001514b
   15584:	0001511d 	.word	0x0001511d
   15588:	00015139 	.word	0x00015139

0001558c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1558e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   15590:	2041      	movs	r0, #65	; 0x41
   15592:	5c23      	ldrb	r3, [r4, r0]
   15594:	2501      	movs	r5, #1
   15596:	432b      	orrs	r3, r5
   15598:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1559a:	b292      	uxth	r2, r2
   1559c:	2000      	movs	r0, #0
   1559e:	5620      	ldrsb	r0, [r4, r0]
   155a0:	2300      	movs	r3, #0
   155a2:	4d12      	ldr	r5, [pc, #72]	; (155ec <_http_client_send_wait+0x60>)
   155a4:	47a8      	blx	r5
   155a6:	2800      	cmp	r0, #0
   155a8:	db16      	blt.n	155d8 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   155aa:	2341      	movs	r3, #65	; 0x41
   155ac:	5ce3      	ldrb	r3, [r4, r3]
   155ae:	07db      	lsls	r3, r3, #31
   155b0:	d518      	bpl.n	155e4 <_http_client_send_wait+0x58>
   155b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   155b4:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   155b6:	2b02      	cmp	r3, #2
   155b8:	d917      	bls.n	155ea <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   155ba:	4f0d      	ldr	r7, [pc, #52]	; (155f0 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   155bc:	4e0d      	ldr	r6, [pc, #52]	; (155f4 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   155be:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   155c0:	2000      	movs	r0, #0
   155c2:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   155c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   155c6:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   155c8:	5d63      	ldrb	r3, [r4, r5]
   155ca:	07db      	lsls	r3, r3, #31
   155cc:	d50c      	bpl.n	155e8 <_http_client_send_wait+0x5c>
   155ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   155d0:	2b02      	cmp	r3, #2
   155d2:	d8f5      	bhi.n	155c0 <_http_client_send_wait+0x34>
	return 0;
   155d4:	2000      	movs	r0, #0
   155d6:	e008      	b.n	155ea <_http_client_send_wait+0x5e>
		module->sending = 0;
   155d8:	2241      	movs	r2, #65	; 0x41
   155da:	5ca3      	ldrb	r3, [r4, r2]
   155dc:	2101      	movs	r1, #1
   155de:	438b      	bics	r3, r1
   155e0:	54a3      	strb	r3, [r4, r2]
		return result;
   155e2:	e002      	b.n	155ea <_http_client_send_wait+0x5e>
	return 0;
   155e4:	2000      	movs	r0, #0
   155e6:	e000      	b.n	155ea <_http_client_send_wait+0x5e>
   155e8:	2000      	movs	r0, #0
}
   155ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155ec:	0000f899 	.word	0x0000f899
   155f0:	0000dafd 	.word	0x0000dafd
   155f4:	00016721 	.word	0x00016721

000155f8 <http_client_get_config_defaults>:
	config->port = 80;
   155f8:	2350      	movs	r3, #80	; 0x50
   155fa:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   155fc:	2300      	movs	r3, #0
   155fe:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   15600:	4a05      	ldr	r2, [pc, #20]	; (15618 <http_client_get_config_defaults+0x20>)
   15602:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   15604:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   15606:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   15608:	3301      	adds	r3, #1
   1560a:	33ff      	adds	r3, #255	; 0xff
   1560c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1560e:	3bae      	subs	r3, #174	; 0xae
   15610:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   15612:	4b02      	ldr	r3, [pc, #8]	; (1561c <http_client_get_config_defaults+0x24>)
   15614:	6183      	str	r3, [r0, #24]
}
   15616:	4770      	bx	lr
   15618:	00004e20 	.word	0x00004e20
   1561c:	0001b03c 	.word	0x0001b03c

00015620 <http_client_init>:
{
   15620:	b570      	push	{r4, r5, r6, lr}
   15622:	0004      	movs	r4, r0
   15624:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   15626:	2800      	cmp	r0, #0
   15628:	d038      	beq.n	1569c <http_client_init+0x7c>
   1562a:	2900      	cmp	r1, #0
   1562c:	d039      	beq.n	156a2 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   1562e:	690b      	ldr	r3, [r1, #16]
   15630:	2b00      	cmp	r3, #0
   15632:	d039      	beq.n	156a8 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   15634:	684b      	ldr	r3, [r1, #4]
   15636:	2b00      	cmp	r3, #0
   15638:	d039      	beq.n	156ae <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1563a:	694b      	ldr	r3, [r1, #20]
   1563c:	2b51      	cmp	r3, #81	; 0x51
   1563e:	d939      	bls.n	156b4 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   15640:	22e8      	movs	r2, #232	; 0xe8
   15642:	2100      	movs	r1, #0
   15644:	4b1e      	ldr	r3, [pc, #120]	; (156c0 <http_client_init+0xa0>)
   15646:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   15648:	0020      	movs	r0, r4
   1564a:	3050      	adds	r0, #80	; 0x50
   1564c:	221c      	movs	r2, #28
   1564e:	0029      	movs	r1, r5
   15650:	4b1c      	ldr	r3, [pc, #112]	; (156c4 <http_client_init+0xa4>)
   15652:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   15654:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15656:	2b00      	cmp	r3, #0
   15658:	d008      	beq.n	1566c <http_client_init+0x4c>
	if (config->timeout > 0) {
   1565a:	892b      	ldrh	r3, [r5, #8]
   1565c:	2b00      	cmp	r3, #0
   1565e:	d111      	bne.n	15684 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   15660:	2300      	movs	r3, #0
   15662:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   15664:	22d8      	movs	r2, #216	; 0xd8
   15666:	50a3      	str	r3, [r4, r2]
	return 0;
   15668:	2000      	movs	r0, #0
}
   1566a:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1566c:	6928      	ldr	r0, [r5, #16]
   1566e:	4b16      	ldr	r3, [pc, #88]	; (156c8 <http_client_init+0xa8>)
   15670:	4798      	blx	r3
   15672:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   15674:	2800      	cmp	r0, #0
   15676:	d020      	beq.n	156ba <http_client_init+0x9a>
		module->alloc_buffer = 1;
   15678:	2241      	movs	r2, #65	; 0x41
   1567a:	5ca3      	ldrb	r3, [r4, r2]
   1567c:	2104      	movs	r1, #4
   1567e:	430b      	orrs	r3, r1
   15680:	54a3      	strb	r3, [r4, r2]
   15682:	e7ea      	b.n	1565a <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   15684:	6868      	ldr	r0, [r5, #4]
   15686:	2300      	movs	r3, #0
   15688:	0022      	movs	r2, r4
   1568a:	4910      	ldr	r1, [pc, #64]	; (156cc <http_client_init+0xac>)
   1568c:	4d10      	ldr	r5, [pc, #64]	; (156d0 <http_client_init+0xb0>)
   1568e:	47a8      	blx	r5
   15690:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   15692:	2800      	cmp	r0, #0
   15694:	dae4      	bge.n	15660 <http_client_init+0x40>
			return -ENOSPC;
   15696:	201c      	movs	r0, #28
   15698:	4240      	negs	r0, r0
   1569a:	e7e6      	b.n	1566a <http_client_init+0x4a>
		return -EINVAL;
   1569c:	2016      	movs	r0, #22
   1569e:	4240      	negs	r0, r0
   156a0:	e7e3      	b.n	1566a <http_client_init+0x4a>
   156a2:	2016      	movs	r0, #22
   156a4:	4240      	negs	r0, r0
   156a6:	e7e0      	b.n	1566a <http_client_init+0x4a>
		return -EINVAL;
   156a8:	2016      	movs	r0, #22
   156aa:	4240      	negs	r0, r0
   156ac:	e7dd      	b.n	1566a <http_client_init+0x4a>
		return -EINVAL;
   156ae:	2016      	movs	r0, #22
   156b0:	4240      	negs	r0, r0
   156b2:	e7da      	b.n	1566a <http_client_init+0x4a>
		return -EINVAL;
   156b4:	2016      	movs	r0, #22
   156b6:	4240      	negs	r0, r0
   156b8:	e7d7      	b.n	1566a <http_client_init+0x4a>
			return -ENOMEM;
   156ba:	200c      	movs	r0, #12
   156bc:	4240      	negs	r0, r0
   156be:	e7d4      	b.n	1566a <http_client_init+0x4a>
   156c0:	000179c7 	.word	0x000179c7
   156c4:	00017991 	.word	0x00017991
   156c8:	00017969 	.word	0x00017969
   156cc:	000157e5 	.word	0x000157e5
   156d0:	000166ad 	.word	0x000166ad

000156d4 <http_client_register_callback>:
	if (module == NULL) {
   156d4:	2800      	cmp	r0, #0
   156d6:	d002      	beq.n	156de <http_client_register_callback+0xa>
	module->cb = callback;
   156d8:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   156da:	2000      	movs	r0, #0
}
   156dc:	4770      	bx	lr
		return -EINVAL;
   156de:	2016      	movs	r0, #22
   156e0:	4240      	negs	r0, r0
   156e2:	e7fb      	b.n	156dc <http_client_register_callback+0x8>

000156e4 <_http_client_clear_conn>:
{
   156e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   156e6:	b085      	sub	sp, #20
   156e8:	0004      	movs	r4, r0
   156ea:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   156ec:	23c0      	movs	r3, #192	; 0xc0
   156ee:	58c3      	ldr	r3, [r0, r3]
   156f0:	2b00      	cmp	r3, #0
   156f2:	d002      	beq.n	156fa <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   156f4:	22c4      	movs	r2, #196	; 0xc4
   156f6:	5880      	ldr	r0, [r0, r2]
   156f8:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   156fa:	0020      	movs	r0, r4
   156fc:	30b0      	adds	r0, #176	; 0xb0
   156fe:	2218      	movs	r2, #24
   15700:	2100      	movs	r1, #0
   15702:	4b17      	ldr	r3, [pc, #92]	; (15760 <_http_client_clear_conn+0x7c>)
   15704:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   15706:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15708:	2b00      	cmp	r3, #0
   1570a:	d124      	bne.n	15756 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   1570c:	2300      	movs	r3, #0
   1570e:	56e3      	ldrsb	r3, [r4, r3]
   15710:	009b      	lsls	r3, r3, #2
   15712:	2500      	movs	r5, #0
   15714:	4a13      	ldr	r2, [pc, #76]	; (15764 <_http_client_clear_conn+0x80>)
   15716:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   15718:	0020      	movs	r0, r4
   1571a:	306c      	adds	r0, #108	; 0x6c
   1571c:	226c      	movs	r2, #108	; 0x6c
   1571e:	2100      	movs	r1, #0
   15720:	4f0f      	ldr	r7, [pc, #60]	; (15760 <_http_client_clear_conn+0x7c>)
   15722:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   15724:	0020      	movs	r0, r4
   15726:	30d8      	adds	r0, #216	; 0xd8
   15728:	2210      	movs	r2, #16
   1572a:	2100      	movs	r1, #0
   1572c:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   1572e:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   15730:	23d8      	movs	r3, #216	; 0xd8
   15732:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   15734:	2241      	movs	r2, #65	; 0x41
   15736:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   15738:	2101      	movs	r1, #1
   1573a:	438b      	bics	r3, r1
   1573c:	3101      	adds	r1, #1
   1573e:	438b      	bics	r3, r1
   15740:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   15742:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   15744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15746:	2b00      	cmp	r3, #0
   15748:	d003      	beq.n	15752 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1574a:	aa01      	add	r2, sp, #4
   1574c:	3102      	adds	r1, #2
   1574e:	0020      	movs	r0, r4
   15750:	4798      	blx	r3
}
   15752:	b005      	add	sp, #20
   15754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   15756:	2000      	movs	r0, #0
   15758:	5620      	ldrsb	r0, [r4, r0]
   1575a:	4b03      	ldr	r3, [pc, #12]	; (15768 <_http_client_clear_conn+0x84>)
   1575c:	4798      	blx	r3
   1575e:	e7d5      	b.n	1570c <_http_client_clear_conn+0x28>
   15760:	000179c7 	.word	0x000179c7
   15764:	200008b0 	.word	0x200008b0
   15768:	0000f9c5 	.word	0x0000f9c5

0001576c <http_client_socket_resolve_handler>:
{
   1576c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1576e:	b087      	sub	sp, #28
   15770:	9000      	str	r0, [sp, #0]
   15772:	9101      	str	r1, [sp, #4]
   15774:	4c17      	ldr	r4, [pc, #92]	; (157d4 <http_client_socket_resolve_handler+0x68>)
   15776:	0026      	movs	r6, r4
   15778:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1577a:	4f17      	ldr	r7, [pc, #92]	; (157d8 <http_client_socket_resolve_handler+0x6c>)
   1577c:	e015      	b.n	157aa <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   1577e:	2302      	movs	r3, #2
   15780:	aa02      	add	r2, sp, #8
   15782:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15784:	334e      	adds	r3, #78	; 0x4e
   15786:	5aeb      	ldrh	r3, [r5, r3]
   15788:	021a      	lsls	r2, r3, #8
   1578a:	0a1b      	lsrs	r3, r3, #8
   1578c:	4313      	orrs	r3, r2
   1578e:	aa02      	add	r2, sp, #8
   15790:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   15792:	9b01      	ldr	r3, [sp, #4]
   15794:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15796:	2000      	movs	r0, #0
   15798:	5628      	ldrsb	r0, [r5, r0]
   1579a:	2210      	movs	r2, #16
   1579c:	a902      	add	r1, sp, #8
   1579e:	4b0f      	ldr	r3, [pc, #60]	; (157dc <http_client_socket_resolve_handler+0x70>)
   157a0:	4798      	blx	r3
				return;
   157a2:	e015      	b.n	157d0 <http_client_socket_resolve_handler+0x64>
   157a4:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   157a6:	42b4      	cmp	r4, r6
   157a8:	d012      	beq.n	157d0 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   157aa:	6825      	ldr	r5, [r4, #0]
   157ac:	2d00      	cmp	r5, #0
   157ae:	d0f9      	beq.n	157a4 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   157b0:	1c69      	adds	r1, r5, #1
   157b2:	9800      	ldr	r0, [sp, #0]
   157b4:	47b8      	blx	r7
   157b6:	2800      	cmp	r0, #0
   157b8:	d1f4      	bne.n	157a4 <http_client_socket_resolve_handler+0x38>
   157ba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   157bc:	2b01      	cmp	r3, #1
   157be:	d1f1      	bne.n	157a4 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   157c0:	9b01      	ldr	r3, [sp, #4]
   157c2:	2b00      	cmp	r3, #0
   157c4:	d1db      	bne.n	1577e <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   157c6:	2176      	movs	r1, #118	; 0x76
   157c8:	4249      	negs	r1, r1
   157ca:	0028      	movs	r0, r5
   157cc:	4b04      	ldr	r3, [pc, #16]	; (157e0 <http_client_socket_resolve_handler+0x74>)
   157ce:	4798      	blx	r3
}
   157d0:	b007      	add	sp, #28
   157d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157d4:	200008b0 	.word	0x200008b0
   157d8:	00017ec7 	.word	0x00017ec7
   157dc:	0000f809 	.word	0x0000f809
   157e0:	000156e5 	.word	0x000156e5

000157e4 <http_client_timer_callback>:
{
   157e4:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   157e6:	2a00      	cmp	r2, #0
   157e8:	d004      	beq.n	157f4 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   157ea:	213e      	movs	r1, #62	; 0x3e
   157ec:	4249      	negs	r1, r1
   157ee:	0010      	movs	r0, r2
   157f0:	4b01      	ldr	r3, [pc, #4]	; (157f8 <http_client_timer_callback+0x14>)
   157f2:	4798      	blx	r3
}
   157f4:	bd10      	pop	{r4, pc}
   157f6:	46c0      	nop			; (mov r8, r8)
   157f8:	000156e5 	.word	0x000156e5

000157fc <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   157fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   157fe:	46de      	mov	lr, fp
   15800:	4657      	mov	r7, sl
   15802:	b580      	push	{r7, lr}
   15804:	b095      	sub	sp, #84	; 0x54
   15806:	af02      	add	r7, sp, #8
   15808:	0004      	movs	r4, r0
   1580a:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1580c:	2310      	movs	r3, #16
   1580e:	2208      	movs	r2, #8
   15810:	18ba      	adds	r2, r7, r2
   15812:	18d2      	adds	r2, r2, r3
   15814:	4bb1      	ldr	r3, [pc, #708]	; (15adc <_http_client_request+0x2e0>)
   15816:	cb23      	ldmia	r3!, {r0, r1, r5}
   15818:	c223      	stmia	r2!, {r0, r1, r5}
   1581a:	681b      	ldr	r3, [r3, #0]
   1581c:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1581e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15820:	1dd3      	adds	r3, r2, #7
   15822:	08db      	lsrs	r3, r3, #3
   15824:	00db      	lsls	r3, r3, #3
   15826:	4669      	mov	r1, sp
   15828:	1acb      	subs	r3, r1, r3
   1582a:	469d      	mov	sp, r3
   1582c:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   1582e:	2c00      	cmp	r4, #0
   15830:	d100      	bne.n	15834 <_http_client_request+0x38>
   15832:	e1f0      	b.n	15c16 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   15834:	2341      	movs	r3, #65	; 0x41
   15836:	5ce3      	ldrb	r3, [r4, r3]
   15838:	07db      	lsls	r3, r3, #31
   1583a:	d500      	bpl.n	1583e <_http_client_request+0x42>
   1583c:	e1eb      	b.n	15c16 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   1583e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15840:	2b03      	cmp	r3, #3
   15842:	d004      	beq.n	1584e <_http_client_request+0x52>
   15844:	2b04      	cmp	r3, #4
   15846:	d100      	bne.n	1584a <_http_client_request+0x4e>
   15848:	e120      	b.n	15a8c <_http_client_request+0x290>
   1584a:	46dd      	mov	sp, fp
   1584c:	e1e4      	b.n	15c18 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   1584e:	2300      	movs	r3, #0
   15850:	21cc      	movs	r1, #204	; 0xcc
   15852:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   15854:	3104      	adds	r1, #4
   15856:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   15858:	9400      	str	r4, [sp, #0]
   1585a:	4ba1      	ldr	r3, [pc, #644]	; (15ae0 <_http_client_request+0x2e4>)
   1585c:	0031      	movs	r1, r6
   1585e:	202c      	movs	r0, #44	; 0x2c
   15860:	2508      	movs	r5, #8
   15862:	46ac      	mov	ip, r5
   15864:	44bc      	add	ip, r7
   15866:	4460      	add	r0, ip
   15868:	4d9e      	ldr	r5, [pc, #632]	; (15ae4 <_http_client_request+0x2e8>)
   1586a:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   1586c:	23c8      	movs	r3, #200	; 0xc8
   1586e:	5ce3      	ldrb	r3, [r4, r3]
   15870:	2b01      	cmp	r3, #1
   15872:	d100      	bne.n	15876 <_http_client_request+0x7a>
   15874:	e0a9      	b.n	159ca <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   15876:	2b02      	cmp	r3, #2
   15878:	d100      	bne.n	1587c <_http_client_request+0x80>
   1587a:	e0af      	b.n	159dc <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1587c:	2b03      	cmp	r3, #3
   1587e:	d100      	bne.n	15882 <_http_client_request+0x86>
   15880:	e0b5      	b.n	159ee <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   15882:	2b04      	cmp	r3, #4
   15884:	d100      	bne.n	15888 <_http_client_request+0x8c>
   15886:	e0bb      	b.n	15a00 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   15888:	2b05      	cmp	r3, #5
   1588a:	d100      	bne.n	1588e <_http_client_request+0x92>
   1588c:	e0c1      	b.n	15a12 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1588e:	2b06      	cmp	r3, #6
   15890:	d100      	bne.n	15894 <_http_client_request+0x98>
   15892:	e0c7      	b.n	15a24 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   15894:	0025      	movs	r5, r4
   15896:	3570      	adds	r5, #112	; 0x70
   15898:	0028      	movs	r0, r5
   1589a:	4b93      	ldr	r3, [pc, #588]	; (15ae8 <_http_client_request+0x2ec>)
   1589c:	469a      	mov	sl, r3
   1589e:	4798      	blx	r3
   158a0:	0002      	movs	r2, r0
   158a2:	0029      	movs	r1, r5
   158a4:	232c      	movs	r3, #44	; 0x2c
   158a6:	2008      	movs	r0, #8
   158a8:	1838      	adds	r0, r7, r0
   158aa:	18c0      	adds	r0, r0, r3
   158ac:	4d8f      	ldr	r5, [pc, #572]	; (15aec <_http_client_request+0x2f0>)
   158ae:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   158b0:	220b      	movs	r2, #11
   158b2:	498f      	ldr	r1, [pc, #572]	; (15af0 <_http_client_request+0x2f4>)
   158b4:	232c      	movs	r3, #44	; 0x2c
   158b6:	2008      	movs	r0, #8
   158b8:	1838      	adds	r0, r7, r0
   158ba:	18c0      	adds	r0, r0, r3
   158bc:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   158be:	220c      	movs	r2, #12
   158c0:	498c      	ldr	r1, [pc, #560]	; (15af4 <_http_client_request+0x2f8>)
   158c2:	232c      	movs	r3, #44	; 0x2c
   158c4:	2008      	movs	r0, #8
   158c6:	1838      	adds	r0, r7, r0
   158c8:	18c0      	adds	r0, r0, r3
   158ca:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   158cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   158ce:	607b      	str	r3, [r7, #4]
   158d0:	0018      	movs	r0, r3
   158d2:	47d0      	blx	sl
   158d4:	0002      	movs	r2, r0
   158d6:	6879      	ldr	r1, [r7, #4]
   158d8:	232c      	movs	r3, #44	; 0x2c
   158da:	2008      	movs	r0, #8
   158dc:	1838      	adds	r0, r7, r0
   158de:	18c0      	adds	r0, r0, r3
   158e0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   158e2:	2202      	movs	r2, #2
   158e4:	4984      	ldr	r1, [pc, #528]	; (15af8 <_http_client_request+0x2fc>)
   158e6:	232c      	movs	r3, #44	; 0x2c
   158e8:	2008      	movs	r0, #8
   158ea:	1838      	adds	r0, r7, r0
   158ec:	18c0      	adds	r0, r0, r3
   158ee:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   158f0:	2206      	movs	r2, #6
   158f2:	4982      	ldr	r1, [pc, #520]	; (15afc <_http_client_request+0x300>)
   158f4:	232c      	movs	r3, #44	; 0x2c
   158f6:	2008      	movs	r0, #8
   158f8:	1838      	adds	r0, r7, r0
   158fa:	18c0      	adds	r0, r0, r3
   158fc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   158fe:	1c63      	adds	r3, r4, #1
   15900:	607b      	str	r3, [r7, #4]
   15902:	0018      	movs	r0, r3
   15904:	47d0      	blx	sl
   15906:	0002      	movs	r2, r0
   15908:	6879      	ldr	r1, [r7, #4]
   1590a:	232c      	movs	r3, #44	; 0x2c
   1590c:	2008      	movs	r0, #8
   1590e:	1838      	adds	r0, r7, r0
   15910:	18c0      	adds	r0, r0, r3
   15912:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15914:	2202      	movs	r2, #2
   15916:	4978      	ldr	r1, [pc, #480]	; (15af8 <_http_client_request+0x2fc>)
   15918:	232c      	movs	r3, #44	; 0x2c
   1591a:	2008      	movs	r0, #8
   1591c:	1838      	adds	r0, r7, r0
   1591e:	18c0      	adds	r0, r0, r3
   15920:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   15922:	2218      	movs	r2, #24
   15924:	4976      	ldr	r1, [pc, #472]	; (15b00 <_http_client_request+0x304>)
   15926:	232c      	movs	r3, #44	; 0x2c
   15928:	2008      	movs	r0, #8
   1592a:	1838      	adds	r0, r7, r0
   1592c:	18c0      	adds	r0, r0, r3
   1592e:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   15930:	2213      	movs	r2, #19
   15932:	4974      	ldr	r1, [pc, #464]	; (15b04 <_http_client_request+0x308>)
   15934:	232c      	movs	r3, #44	; 0x2c
   15936:	2008      	movs	r0, #8
   15938:	1838      	adds	r0, r7, r0
   1593a:	18c0      	adds	r0, r0, r3
   1593c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1593e:	2217      	movs	r2, #23
   15940:	4971      	ldr	r1, [pc, #452]	; (15b08 <_http_client_request+0x30c>)
   15942:	232c      	movs	r3, #44	; 0x2c
   15944:	2008      	movs	r0, #8
   15946:	1838      	adds	r0, r7, r0
   15948:	18c0      	adds	r0, r0, r3
   1594a:	47a8      	blx	r5

		if (entity->read != NULL) {
   1594c:	0023      	movs	r3, r4
   1594e:	33b0      	adds	r3, #176	; 0xb0
   15950:	68db      	ldr	r3, [r3, #12]
   15952:	2b00      	cmp	r3, #0
   15954:	d07b      	beq.n	15a4e <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   15956:	23b0      	movs	r3, #176	; 0xb0
   15958:	5ce3      	ldrb	r3, [r4, r3]
   1595a:	2b00      	cmp	r3, #0
   1595c:	d16b      	bne.n	15a36 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   1595e:	0023      	movs	r3, r4
   15960:	33b0      	adds	r3, #176	; 0xb0
   15962:	689b      	ldr	r3, [r3, #8]
   15964:	2b00      	cmp	r3, #0
   15966:	d072      	beq.n	15a4e <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   15968:	0022      	movs	r2, r4
   1596a:	32b0      	adds	r2, #176	; 0xb0
   1596c:	6950      	ldr	r0, [r2, #20]
   1596e:	4798      	blx	r3
   15970:	23cc      	movs	r3, #204	; 0xcc
   15972:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   15974:	2800      	cmp	r0, #0
   15976:	da00      	bge.n	1597a <_http_client_request+0x17e>
   15978:	e0ac      	b.n	15ad4 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1597a:	0002      	movs	r2, r0
   1597c:	4963      	ldr	r1, [pc, #396]	; (15b0c <_http_client_request+0x310>)
   1597e:	2320      	movs	r3, #32
   15980:	2008      	movs	r0, #8
   15982:	1838      	adds	r0, r7, r0
   15984:	18c0      	adds	r0, r0, r3
   15986:	4b62      	ldr	r3, [pc, #392]	; (15b10 <_http_client_request+0x314>)
   15988:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1598a:	2210      	movs	r2, #16
   1598c:	4961      	ldr	r1, [pc, #388]	; (15b14 <_http_client_request+0x318>)
   1598e:	232c      	movs	r3, #44	; 0x2c
   15990:	2008      	movs	r0, #8
   15992:	1838      	adds	r0, r7, r0
   15994:	18c0      	adds	r0, r0, r3
   15996:	4d55      	ldr	r5, [pc, #340]	; (15aec <_http_client_request+0x2f0>)
   15998:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   1599a:	2320      	movs	r3, #32
   1599c:	2208      	movs	r2, #8
   1599e:	18ba      	adds	r2, r7, r2
   159a0:	18d0      	adds	r0, r2, r3
   159a2:	4b51      	ldr	r3, [pc, #324]	; (15ae8 <_http_client_request+0x2ec>)
   159a4:	4798      	blx	r3
   159a6:	0002      	movs	r2, r0
   159a8:	2320      	movs	r3, #32
   159aa:	2108      	movs	r1, #8
   159ac:	1879      	adds	r1, r7, r1
   159ae:	18c9      	adds	r1, r1, r3
   159b0:	330c      	adds	r3, #12
   159b2:	2008      	movs	r0, #8
   159b4:	1838      	adds	r0, r7, r0
   159b6:	18c0      	adds	r0, r0, r3
   159b8:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   159ba:	2202      	movs	r2, #2
   159bc:	494e      	ldr	r1, [pc, #312]	; (15af8 <_http_client_request+0x2fc>)
   159be:	232c      	movs	r3, #44	; 0x2c
   159c0:	2008      	movs	r0, #8
   159c2:	1838      	adds	r0, r7, r0
   159c4:	18c0      	adds	r0, r0, r3
   159c6:	47a8      	blx	r5
   159c8:	e041      	b.n	15a4e <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   159ca:	2204      	movs	r2, #4
   159cc:	4952      	ldr	r1, [pc, #328]	; (15b18 <_http_client_request+0x31c>)
   159ce:	332b      	adds	r3, #43	; 0x2b
   159d0:	2008      	movs	r0, #8
   159d2:	1838      	adds	r0, r7, r0
   159d4:	18c0      	adds	r0, r0, r3
   159d6:	4b45      	ldr	r3, [pc, #276]	; (15aec <_http_client_request+0x2f0>)
   159d8:	4798      	blx	r3
   159da:	e75b      	b.n	15894 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   159dc:	2205      	movs	r2, #5
   159de:	494f      	ldr	r1, [pc, #316]	; (15b1c <_http_client_request+0x320>)
   159e0:	332a      	adds	r3, #42	; 0x2a
   159e2:	2008      	movs	r0, #8
   159e4:	1838      	adds	r0, r7, r0
   159e6:	18c0      	adds	r0, r0, r3
   159e8:	4b40      	ldr	r3, [pc, #256]	; (15aec <_http_client_request+0x2f0>)
   159ea:	4798      	blx	r3
   159ec:	e752      	b.n	15894 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   159ee:	2207      	movs	r2, #7
   159f0:	494b      	ldr	r1, [pc, #300]	; (15b20 <_http_client_request+0x324>)
   159f2:	3329      	adds	r3, #41	; 0x29
   159f4:	2008      	movs	r0, #8
   159f6:	1838      	adds	r0, r7, r0
   159f8:	18c0      	adds	r0, r0, r3
   159fa:	4b3c      	ldr	r3, [pc, #240]	; (15aec <_http_client_request+0x2f0>)
   159fc:	4798      	blx	r3
   159fe:	e749      	b.n	15894 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   15a00:	2204      	movs	r2, #4
   15a02:	4948      	ldr	r1, [pc, #288]	; (15b24 <_http_client_request+0x328>)
   15a04:	3328      	adds	r3, #40	; 0x28
   15a06:	2008      	movs	r0, #8
   15a08:	1838      	adds	r0, r7, r0
   15a0a:	18c0      	adds	r0, r0, r3
   15a0c:	4b37      	ldr	r3, [pc, #220]	; (15aec <_http_client_request+0x2f0>)
   15a0e:	4798      	blx	r3
   15a10:	e740      	b.n	15894 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   15a12:	2208      	movs	r2, #8
   15a14:	4944      	ldr	r1, [pc, #272]	; (15b28 <_http_client_request+0x32c>)
   15a16:	3327      	adds	r3, #39	; 0x27
   15a18:	2008      	movs	r0, #8
   15a1a:	1838      	adds	r0, r7, r0
   15a1c:	18c0      	adds	r0, r0, r3
   15a1e:	4b33      	ldr	r3, [pc, #204]	; (15aec <_http_client_request+0x2f0>)
   15a20:	4798      	blx	r3
   15a22:	e737      	b.n	15894 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   15a24:	2205      	movs	r2, #5
   15a26:	4941      	ldr	r1, [pc, #260]	; (15b2c <_http_client_request+0x330>)
   15a28:	3326      	adds	r3, #38	; 0x26
   15a2a:	2008      	movs	r0, #8
   15a2c:	1838      	adds	r0, r7, r0
   15a2e:	18c0      	adds	r0, r0, r3
   15a30:	4b2e      	ldr	r3, [pc, #184]	; (15aec <_http_client_request+0x2f0>)
   15a32:	4798      	blx	r3
   15a34:	e72e      	b.n	15894 <_http_client_request+0x98>
				module->req.content_length = -1;
   15a36:	2201      	movs	r2, #1
   15a38:	4252      	negs	r2, r2
   15a3a:	23cc      	movs	r3, #204	; 0xcc
   15a3c:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   15a3e:	321d      	adds	r2, #29
   15a40:	493b      	ldr	r1, [pc, #236]	; (15b30 <_http_client_request+0x334>)
   15a42:	3ba0      	subs	r3, #160	; 0xa0
   15a44:	2008      	movs	r0, #8
   15a46:	1838      	adds	r0, r7, r0
   15a48:	18c0      	adds	r0, r0, r3
   15a4a:	4b28      	ldr	r3, [pc, #160]	; (15aec <_http_client_request+0x2f0>)
   15a4c:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   15a4e:	23d4      	movs	r3, #212	; 0xd4
   15a50:	58e5      	ldr	r5, [r4, r3]
   15a52:	2d00      	cmp	r5, #0
   15a54:	d00a      	beq.n	15a6c <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   15a56:	0028      	movs	r0, r5
   15a58:	4b23      	ldr	r3, [pc, #140]	; (15ae8 <_http_client_request+0x2ec>)
   15a5a:	4798      	blx	r3
   15a5c:	0002      	movs	r2, r0
   15a5e:	0029      	movs	r1, r5
   15a60:	232c      	movs	r3, #44	; 0x2c
   15a62:	2008      	movs	r0, #8
   15a64:	1838      	adds	r0, r7, r0
   15a66:	18c0      	adds	r0, r0, r3
   15a68:	4b20      	ldr	r3, [pc, #128]	; (15aec <_http_client_request+0x2f0>)
   15a6a:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15a6c:	2202      	movs	r2, #2
   15a6e:	4922      	ldr	r1, [pc, #136]	; (15af8 <_http_client_request+0x2fc>)
   15a70:	232c      	movs	r3, #44	; 0x2c
   15a72:	2008      	movs	r0, #8
   15a74:	1838      	adds	r0, r7, r0
   15a76:	18c0      	adds	r0, r0, r3
   15a78:	4b1c      	ldr	r3, [pc, #112]	; (15aec <_http_client_request+0x2f0>)
   15a7a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   15a7c:	232c      	movs	r3, #44	; 0x2c
   15a7e:	2208      	movs	r2, #8
   15a80:	18ba      	adds	r2, r7, r2
   15a82:	18d0      	adds	r0, r2, r3
   15a84:	4b2b      	ldr	r3, [pc, #172]	; (15b34 <_http_client_request+0x338>)
   15a86:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   15a88:	2304      	movs	r3, #4
   15a8a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   15a8c:	23cc      	movs	r3, #204	; 0xcc
   15a8e:	58e2      	ldr	r2, [r4, r3]
   15a90:	2a00      	cmp	r2, #0
   15a92:	db51      	blt.n	15b38 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   15a94:	dc00      	bgt.n	15a98 <_http_client_request+0x29c>
   15a96:	e0f0      	b.n	15c7a <_http_client_request+0x47e>
   15a98:	0023      	movs	r3, r4
   15a9a:	33b0      	adds	r3, #176	; 0xb0
   15a9c:	68dd      	ldr	r5, [r3, #12]
   15a9e:	2d00      	cmp	r5, #0
   15aa0:	d100      	bne.n	15aa4 <_http_client_request+0x2a8>
   15aa2:	e0ea      	b.n	15c7a <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   15aa4:	23d0      	movs	r3, #208	; 0xd0
   15aa6:	58e3      	ldr	r3, [r4, r3]
   15aa8:	429a      	cmp	r2, r3
   15aaa:	dd00      	ble.n	15aae <_http_client_request+0x2b2>
   15aac:	e0ba      	b.n	15c24 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   15aae:	23c0      	movs	r3, #192	; 0xc0
   15ab0:	58e3      	ldr	r3, [r4, r3]
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d002      	beq.n	15abc <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   15ab6:	22c4      	movs	r2, #196	; 0xc4
   15ab8:	58a0      	ldr	r0, [r4, r2]
   15aba:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   15abc:	2302      	movs	r3, #2
   15abe:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15ac0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d100      	bne.n	15ac8 <_http_client_request+0x2cc>
   15ac6:	e6c0      	b.n	1584a <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15ac8:	220c      	movs	r2, #12
   15aca:	18ba      	adds	r2, r7, r2
   15acc:	2101      	movs	r1, #1
   15ace:	0020      	movs	r0, r4
   15ad0:	4798      	blx	r3
   15ad2:	e6ba      	b.n	1584a <_http_client_request+0x4e>
					module->req.content_length = 0;
   15ad4:	2200      	movs	r2, #0
   15ad6:	50e2      	str	r2, [r4, r3]
   15ad8:	e7b9      	b.n	15a4e <_http_client_request+0x252>
   15ada:	46c0      	nop			; (mov r8, r8)
   15adc:	0001af24 	.word	0x0001af24
   15ae0:	0001558d 	.word	0x0001558d
   15ae4:	00016559 	.word	0x00016559
   15ae8:	00017f27 	.word	0x00017f27
   15aec:	000165ad 	.word	0x000165ad
   15af0:	0001af98 	.word	0x0001af98
   15af4:	0001afa4 	.word	0x0001afa4
   15af8:	0001b574 	.word	0x0001b574
   15afc:	0001afb4 	.word	0x0001afb4
   15b00:	0001afbc 	.word	0x0001afbc
   15b04:	0001afd8 	.word	0x0001afd8
   15b08:	0001afec 	.word	0x0001afec
   15b0c:	0001b024 	.word	0x0001b024
   15b10:	00017e4d 	.word	0x00017e4d
   15b14:	0001b028 	.word	0x0001b028
   15b18:	0001af64 	.word	0x0001af64
   15b1c:	0001af6c 	.word	0x0001af6c
   15b20:	0001af74 	.word	0x0001af74
   15b24:	0001af7c 	.word	0x0001af7c
   15b28:	0001af84 	.word	0x0001af84
   15b2c:	0001af90 	.word	0x0001af90
   15b30:	0001b004 	.word	0x0001b004
   15b34:	00016569 	.word	0x00016569
		if (module->req.content_length < 0 && entity->read) {
   15b38:	0023      	movs	r3, r4
   15b3a:	33b0      	adds	r3, #176	; 0xb0
   15b3c:	68dd      	ldr	r5, [r3, #12]
   15b3e:	2d00      	cmp	r5, #0
   15b40:	d100      	bne.n	15b44 <_http_client_request+0x348>
   15b42:	e09a      	b.n	15c7a <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   15b44:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   15b46:	58e3      	ldr	r3, [r4, r3]
   15b48:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15b4a:	3a07      	subs	r2, #7
   15b4c:	1d71      	adds	r1, r6, #5
   15b4e:	0020      	movs	r0, r4
   15b50:	30b0      	adds	r0, #176	; 0xb0
   15b52:	6940      	ldr	r0, [r0, #20]
   15b54:	47a8      	blx	r5
   15b56:	0005      	movs	r5, r0
   15b58:	43c3      	mvns	r3, r0
   15b5a:	17db      	asrs	r3, r3, #31
   15b5c:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   15b5e:	220a      	movs	r2, #10
   15b60:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   15b62:	210d      	movs	r1, #13
   15b64:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   15b66:	1973      	adds	r3, r6, r5
   15b68:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   15b6a:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   15b6c:	230f      	movs	r3, #15
   15b6e:	402b      	ands	r3, r5
   15b70:	3206      	adds	r2, #6
   15b72:	3905      	subs	r1, #5
   15b74:	468c      	mov	ip, r1
   15b76:	44bc      	add	ip, r7
   15b78:	4462      	add	r2, ip
   15b7a:	5cd3      	ldrb	r3, [r2, r3]
   15b7c:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   15b7e:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   15b80:	2d0f      	cmp	r5, #15
   15b82:	dd0d      	ble.n	15ba0 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   15b84:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   15b86:	17eb      	asrs	r3, r5, #31
   15b88:	220f      	movs	r2, #15
   15b8a:	4013      	ands	r3, r2
   15b8c:	195b      	adds	r3, r3, r5
   15b8e:	111b      	asrs	r3, r3, #4
   15b90:	4013      	ands	r3, r2
   15b92:	3201      	adds	r2, #1
   15b94:	2008      	movs	r0, #8
   15b96:	4684      	mov	ip, r0
   15b98:	44bc      	add	ip, r7
   15b9a:	4462      	add	r2, ip
   15b9c:	5cd3      	ldrb	r3, [r2, r3]
   15b9e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   15ba0:	2dff      	cmp	r5, #255	; 0xff
   15ba2:	dd0d      	ble.n	15bc0 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   15ba4:	17ea      	asrs	r2, r5, #31
   15ba6:	23ff      	movs	r3, #255	; 0xff
   15ba8:	4013      	ands	r3, r2
   15baa:	195b      	adds	r3, r3, r5
   15bac:	051b      	lsls	r3, r3, #20
   15bae:	0f1b      	lsrs	r3, r3, #28
   15bb0:	2210      	movs	r2, #16
   15bb2:	2108      	movs	r1, #8
   15bb4:	468c      	mov	ip, r1
   15bb6:	44bc      	add	ip, r7
   15bb8:	4462      	add	r2, ip
   15bba:	5cd3      	ldrb	r3, [r2, r3]
   15bbc:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   15bbe:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   15bc0:	1cca      	adds	r2, r1, #3
   15bc2:	1b92      	subs	r2, r2, r6
   15bc4:	1d2b      	adds	r3, r5, #4
   15bc6:	18d2      	adds	r2, r2, r3
   15bc8:	b292      	uxth	r2, r2
   15bca:	2000      	movs	r0, #0
   15bcc:	5620      	ldrsb	r0, [r4, r0]
   15bce:	2300      	movs	r3, #0
   15bd0:	4e30      	ldr	r6, [pc, #192]	; (15c94 <_http_client_request+0x498>)
   15bd2:	47b0      	blx	r6
   15bd4:	2800      	cmp	r0, #0
   15bd6:	db19      	blt.n	15c0c <_http_client_request+0x410>
			module->req.sent_length += size;
   15bd8:	22d0      	movs	r2, #208	; 0xd0
   15bda:	58a3      	ldr	r3, [r4, r2]
   15bdc:	195b      	adds	r3, r3, r5
   15bde:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   15be0:	2d00      	cmp	r5, #0
   15be2:	d000      	beq.n	15be6 <_http_client_request+0x3ea>
   15be4:	e631      	b.n	1584a <_http_client_request+0x4e>
				if (module->req.entity.close) {
   15be6:	23c0      	movs	r3, #192	; 0xc0
   15be8:	58e3      	ldr	r3, [r4, r3]
   15bea:	2b00      	cmp	r3, #0
   15bec:	d002      	beq.n	15bf4 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   15bee:	3a0c      	subs	r2, #12
   15bf0:	58a0      	ldr	r0, [r4, r2]
   15bf2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   15bf4:	2302      	movs	r3, #2
   15bf6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15bf8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d100      	bne.n	15c00 <_http_client_request+0x404>
   15bfe:	e624      	b.n	1584a <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15c00:	220c      	movs	r2, #12
   15c02:	18ba      	adds	r2, r7, r2
   15c04:	2101      	movs	r1, #1
   15c06:	0020      	movs	r0, r4
   15c08:	4798      	blx	r3
   15c0a:	e61e      	b.n	1584a <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   15c0c:	2105      	movs	r1, #5
   15c0e:	4249      	negs	r1, r1
   15c10:	0020      	movs	r0, r4
   15c12:	4b21      	ldr	r3, [pc, #132]	; (15c98 <_http_client_request+0x49c>)
   15c14:	4798      	blx	r3
   15c16:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   15c18:	46bd      	mov	sp, r7
   15c1a:	b013      	add	sp, #76	; 0x4c
   15c1c:	bc0c      	pop	{r2, r3}
   15c1e:	4692      	mov	sl, r2
   15c20:	469b      	mov	fp, r3
   15c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   15c24:	0022      	movs	r2, r4
   15c26:	32b0      	adds	r2, #176	; 0xb0
   15c28:	6950      	ldr	r0, [r2, #20]
   15c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15c2c:	0031      	movs	r1, r6
   15c2e:	47a8      	blx	r5
			if (size < 0) {
   15c30:	2800      	cmp	r0, #0
   15c32:	db16      	blt.n	15c62 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   15c34:	23cc      	movs	r3, #204	; 0xcc
   15c36:	58e5      	ldr	r5, [r4, r3]
   15c38:	3304      	adds	r3, #4
   15c3a:	58e3      	ldr	r3, [r4, r3]
   15c3c:	1aed      	subs	r5, r5, r3
   15c3e:	4285      	cmp	r5, r0
   15c40:	dd00      	ble.n	15c44 <_http_client_request+0x448>
   15c42:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   15c44:	b2aa      	uxth	r2, r5
   15c46:	2000      	movs	r0, #0
   15c48:	5620      	ldrsb	r0, [r4, r0]
   15c4a:	2300      	movs	r3, #0
   15c4c:	0031      	movs	r1, r6
   15c4e:	4e11      	ldr	r6, [pc, #68]	; (15c94 <_http_client_request+0x498>)
   15c50:	47b0      	blx	r6
   15c52:	2800      	cmp	r0, #0
   15c54:	db0b      	blt.n	15c6e <_http_client_request+0x472>
				module->req.sent_length += size;
   15c56:	23d0      	movs	r3, #208	; 0xd0
   15c58:	58e2      	ldr	r2, [r4, r3]
   15c5a:	4694      	mov	ip, r2
   15c5c:	4465      	add	r5, ip
   15c5e:	50e5      	str	r5, [r4, r3]
   15c60:	e5f3      	b.n	1584a <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   15c62:	2105      	movs	r1, #5
   15c64:	4249      	negs	r1, r1
   15c66:	0020      	movs	r0, r4
   15c68:	4b0b      	ldr	r3, [pc, #44]	; (15c98 <_http_client_request+0x49c>)
   15c6a:	4798      	blx	r3
   15c6c:	e5ed      	b.n	1584a <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   15c6e:	2105      	movs	r1, #5
   15c70:	4249      	negs	r1, r1
   15c72:	0020      	movs	r0, r4
   15c74:	4b08      	ldr	r3, [pc, #32]	; (15c98 <_http_client_request+0x49c>)
   15c76:	4798      	blx	r3
					return;
   15c78:	e7cd      	b.n	15c16 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   15c7a:	2302      	movs	r3, #2
   15c7c:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   15c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15c80:	2b00      	cmp	r3, #0
   15c82:	d100      	bne.n	15c86 <_http_client_request+0x48a>
   15c84:	e5e1      	b.n	1584a <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15c86:	220c      	movs	r2, #12
   15c88:	18ba      	adds	r2, r7, r2
   15c8a:	2101      	movs	r1, #1
   15c8c:	0020      	movs	r0, r4
   15c8e:	4798      	blx	r3
   15c90:	e5db      	b.n	1584a <_http_client_request+0x4e>
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	0000f899 	.word	0x0000f899
   15c98:	000156e5 	.word	0x000156e5

00015c9c <http_client_send_request>:
{
   15c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c9e:	46d6      	mov	lr, sl
   15ca0:	b500      	push	{lr}
   15ca2:	b088      	sub	sp, #32
   15ca4:	0004      	movs	r4, r0
   15ca6:	000f      	movs	r7, r1
   15ca8:	4692      	mov	sl, r2
   15caa:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   15cac:	2800      	cmp	r0, #0
   15cae:	d100      	bne.n	15cb2 <http_client_send_request+0x16>
   15cb0:	e0d3      	b.n	15e5a <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   15cb2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15cb4:	2b02      	cmp	r3, #2
   15cb6:	d900      	bls.n	15cba <http_client_send_request+0x1e>
   15cb8:	e0d3      	b.n	15e62 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   15cba:	2207      	movs	r2, #7
   15cbc:	4981      	ldr	r1, [pc, #516]	; (15ec4 <http_client_send_request+0x228>)
   15cbe:	0038      	movs	r0, r7
   15cc0:	4b81      	ldr	r3, [pc, #516]	; (15ec8 <http_client_send_request+0x22c>)
   15cc2:	4798      	blx	r3
		i = 7;
   15cc4:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   15cc6:	2800      	cmp	r0, #0
   15cc8:	d007      	beq.n	15cda <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   15cca:	2208      	movs	r2, #8
   15ccc:	497f      	ldr	r1, [pc, #508]	; (15ecc <http_client_send_request+0x230>)
   15cce:	0038      	movs	r0, r7
   15cd0:	4b7d      	ldr	r3, [pc, #500]	; (15ec8 <http_client_send_request+0x22c>)
   15cd2:	4798      	blx	r3
		i = 8;
   15cd4:	4246      	negs	r6, r0
   15cd6:	4146      	adcs	r6, r0
   15cd8:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   15cda:	1c63      	adds	r3, r4, #1
   15cdc:	19bd      	adds	r5, r7, r6
   15cde:	9302      	str	r3, [sp, #8]
   15ce0:	0018      	movs	r0, r3
   15ce2:	4b7b      	ldr	r3, [pc, #492]	; (15ed0 <http_client_send_request+0x234>)
   15ce4:	4798      	blx	r3
   15ce6:	0002      	movs	r2, r0
   15ce8:	0029      	movs	r1, r5
   15cea:	9802      	ldr	r0, [sp, #8]
   15cec:	4b76      	ldr	r3, [pc, #472]	; (15ec8 <http_client_send_request+0x22c>)
   15cee:	4798      	blx	r3
   15cf0:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15cf2:	782b      	ldrb	r3, [r5, #0]
   15cf4:	2b00      	cmp	r3, #0
   15cf6:	d052      	beq.n	15d9e <http_client_send_request+0x102>
   15cf8:	2b2f      	cmp	r3, #47	; 0x2f
   15cfa:	d052      	beq.n	15da2 <http_client_send_request+0x106>
   15cfc:	1c71      	adds	r1, r6, #1
   15cfe:	1879      	adds	r1, r7, r1
   15d00:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   15d02:	3201      	adds	r2, #1
   15d04:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15d06:	000d      	movs	r5, r1
   15d08:	780b      	ldrb	r3, [r1, #0]
   15d0a:	2b00      	cmp	r3, #0
   15d0c:	d002      	beq.n	15d14 <http_client_send_request+0x78>
   15d0e:	3101      	adds	r1, #1
   15d10:	2b2f      	cmp	r3, #47	; 0x2f
   15d12:	d1f6      	bne.n	15d02 <http_client_send_request+0x66>
	module->host[j] = '\0';
   15d14:	18a2      	adds	r2, r4, r2
   15d16:	2300      	movs	r3, #0
   15d18:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   15d1a:	7863      	ldrb	r3, [r4, #1]
   15d1c:	2b00      	cmp	r3, #0
   15d1e:	d100      	bne.n	15d22 <http_client_send_request+0x86>
   15d20:	e0a3      	b.n	15e6a <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   15d22:	0028      	movs	r0, r5
   15d24:	4b6a      	ldr	r3, [pc, #424]	; (15ed0 <http_client_send_request+0x234>)
   15d26:	4798      	blx	r3
   15d28:	283f      	cmp	r0, #63	; 0x3f
   15d2a:	d900      	bls.n	15d2e <http_client_send_request+0x92>
   15d2c:	e0a1      	b.n	15e72 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   15d2e:	23d4      	movs	r3, #212	; 0xd4
   15d30:	58e0      	ldr	r0, [r4, r3]
   15d32:	2800      	cmp	r0, #0
   15d34:	d001      	beq.n	15d3a <http_client_send_request+0x9e>
		free(module->req.ext_header);
   15d36:	4b67      	ldr	r3, [pc, #412]	; (15ed4 <http_client_send_request+0x238>)
   15d38:	4798      	blx	r3
	if (ext_header != NULL) {
   15d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15d3c:	2b00      	cmp	r3, #0
   15d3e:	d032      	beq.n	15da6 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   15d40:	0018      	movs	r0, r3
   15d42:	4b65      	ldr	r3, [pc, #404]	; (15ed8 <http_client_send_request+0x23c>)
   15d44:	4798      	blx	r3
   15d46:	23d4      	movs	r3, #212	; 0xd4
   15d48:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   15d4a:	2800      	cmp	r0, #0
   15d4c:	d100      	bne.n	15d50 <http_client_send_request+0xb4>
   15d4e:	e094      	b.n	15e7a <http_client_send_request+0x1de>
	module->sending = 0;
   15d50:	2241      	movs	r2, #65	; 0x41
   15d52:	5ca3      	ldrb	r3, [r4, r2]
   15d54:	2101      	movs	r1, #1
   15d56:	438b      	bics	r3, r1
   15d58:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   15d5a:	2300      	movs	r3, #0
   15d5c:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   15d5e:	782b      	ldrb	r3, [r5, #0]
   15d60:	2b2f      	cmp	r3, #47	; 0x2f
   15d62:	d024      	beq.n	15dae <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   15d64:	222f      	movs	r2, #47	; 0x2f
   15d66:	2370      	movs	r3, #112	; 0x70
   15d68:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   15d6a:	782b      	ldrb	r3, [r5, #0]
   15d6c:	2b00      	cmp	r3, #0
   15d6e:	d124      	bne.n	15dba <http_client_send_request+0x11e>
	if (entity != NULL) {
   15d70:	9b03      	ldr	r3, [sp, #12]
   15d72:	2b00      	cmp	r3, #0
   15d74:	d027      	beq.n	15dc6 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   15d76:	0020      	movs	r0, r4
   15d78:	30b0      	adds	r0, #176	; 0xb0
   15d7a:	2218      	movs	r2, #24
   15d7c:	0019      	movs	r1, r3
   15d7e:	4b57      	ldr	r3, [pc, #348]	; (15edc <http_client_send_request+0x240>)
   15d80:	4798      	blx	r3
	module->req.method = method;
   15d82:	23c8      	movs	r3, #200	; 0xc8
   15d84:	4652      	mov	r2, sl
   15d86:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   15d88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15d8a:	2b01      	cmp	r3, #1
   15d8c:	d022      	beq.n	15dd4 <http_client_send_request+0x138>
   15d8e:	2b00      	cmp	r3, #0
   15d90:	d027      	beq.n	15de2 <http_client_send_request+0x146>
   15d92:	2b02      	cmp	r3, #2
   15d94:	d03a      	beq.n	15e0c <http_client_send_request+0x170>
		return -EAGAIN;
   15d96:	230b      	movs	r3, #11
   15d98:	425b      	negs	r3, r3
   15d9a:	9301      	str	r3, [sp, #4]
   15d9c:	e08d      	b.n	15eba <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   15d9e:	2200      	movs	r2, #0
   15da0:	e7b8      	b.n	15d14 <http_client_send_request+0x78>
   15da2:	2200      	movs	r2, #0
   15da4:	e7b6      	b.n	15d14 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   15da6:	2200      	movs	r2, #0
   15da8:	23d4      	movs	r3, #212	; 0xd4
   15daa:	50e2      	str	r2, [r4, r3]
   15dac:	e7d0      	b.n	15d50 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   15dae:	0020      	movs	r0, r4
   15db0:	3070      	adds	r0, #112	; 0x70
   15db2:	0029      	movs	r1, r5
   15db4:	4b4a      	ldr	r3, [pc, #296]	; (15ee0 <http_client_send_request+0x244>)
   15db6:	4798      	blx	r3
   15db8:	e7da      	b.n	15d70 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   15dba:	0029      	movs	r1, r5
   15dbc:	0020      	movs	r0, r4
   15dbe:	3071      	adds	r0, #113	; 0x71
   15dc0:	4b47      	ldr	r3, [pc, #284]	; (15ee0 <http_client_send_request+0x244>)
   15dc2:	4798      	blx	r3
   15dc4:	e7d4      	b.n	15d70 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   15dc6:	0020      	movs	r0, r4
   15dc8:	30b0      	adds	r0, #176	; 0xb0
   15dca:	2218      	movs	r2, #24
   15dcc:	2100      	movs	r1, #0
   15dce:	4b45      	ldr	r3, [pc, #276]	; (15ee4 <http_client_send_request+0x248>)
   15dd0:	4798      	blx	r3
   15dd2:	e7d6      	b.n	15d82 <http_client_send_request+0xe6>
		if (!reconnect) {
   15dd4:	9b01      	ldr	r3, [sp, #4]
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	d06f      	beq.n	15eba <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   15dda:	2100      	movs	r1, #0
   15ddc:	0020      	movs	r0, r4
   15dde:	4b42      	ldr	r3, [pc, #264]	; (15ee8 <http_client_send_request+0x24c>)
   15de0:	4798      	blx	r3
		if (module->config.tls) {
   15de2:	2352      	movs	r3, #82	; 0x52
   15de4:	5ce2      	ldrb	r2, [r4, r3]
   15de6:	1e53      	subs	r3, r2, #1
   15de8:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   15dea:	b2d2      	uxtb	r2, r2
   15dec:	2101      	movs	r1, #1
   15dee:	2002      	movs	r0, #2
   15df0:	4b3e      	ldr	r3, [pc, #248]	; (15eec <http_client_send_request+0x250>)
   15df2:	4798      	blx	r3
   15df4:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   15df6:	2800      	cmp	r0, #0
   15df8:	db43      	blt.n	15e82 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   15dfa:	0080      	lsls	r0, r0, #2
   15dfc:	4b3c      	ldr	r3, [pc, #240]	; (15ef0 <http_client_send_request+0x254>)
   15dfe:	50c4      	str	r4, [r0, r3]
   15e00:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   15e02:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15e04:	2620      	movs	r6, #32
			isv6 = 1;
   15e06:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   15e08:	2730      	movs	r7, #48	; 0x30
   15e0a:	e00c      	b.n	15e26 <http_client_send_request+0x18a>
		if (!reconnect) {
   15e0c:	9b01      	ldr	r3, [sp, #4]
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d1e3      	bne.n	15dda <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   15e12:	3303      	adds	r3, #3
   15e14:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   15e16:	0020      	movs	r0, r4
   15e18:	4b36      	ldr	r3, [pc, #216]	; (15ef4 <http_client_send_request+0x258>)
   15e1a:	4798      	blx	r3
			break;
   15e1c:	e04d      	b.n	15eba <http_client_send_request+0x21e>
			if (isv6) {
   15e1e:	2900      	cmp	r1, #0
   15e20:	d001      	beq.n	15e26 <http_client_send_request+0x18a>
   15e22:	e012      	b.n	15e4a <http_client_send_request+0x1ae>
			isv6 = 1;
   15e24:	0001      	movs	r1, r0
	while (*host != '\0') {
   15e26:	782a      	ldrb	r2, [r5, #0]
   15e28:	2a00      	cmp	r2, #0
   15e2a:	d02e      	beq.n	15e8a <http_client_send_request+0x1ee>
		ch = *host++;
   15e2c:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15e2e:	0013      	movs	r3, r2
   15e30:	43b3      	bics	r3, r6
   15e32:	3b41      	subs	r3, #65	; 0x41
   15e34:	2b05      	cmp	r3, #5
   15e36:	d9f5      	bls.n	15e24 <http_client_send_request+0x188>
   15e38:	2a3a      	cmp	r2, #58	; 0x3a
   15e3a:	d00a      	beq.n	15e52 <http_client_send_request+0x1b6>
   15e3c:	2a2f      	cmp	r2, #47	; 0x2f
   15e3e:	d00a      	beq.n	15e56 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   15e40:	2a2e      	cmp	r2, #46	; 0x2e
   15e42:	d0ec      	beq.n	15e1e <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   15e44:	403a      	ands	r2, r7
   15e46:	2a30      	cmp	r2, #48	; 0x30
   15e48:	d0ed      	beq.n	15e26 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   15e4a:	9802      	ldr	r0, [sp, #8]
   15e4c:	4b2a      	ldr	r3, [pc, #168]	; (15ef8 <http_client_send_request+0x25c>)
   15e4e:	4798      	blx	r3
   15e50:	e02f      	b.n	15eb2 <http_client_send_request+0x216>
			isv6 = 1;
   15e52:	0001      	movs	r1, r0
   15e54:	e7e7      	b.n	15e26 <http_client_send_request+0x18a>
   15e56:	0001      	movs	r1, r0
   15e58:	e7e5      	b.n	15e26 <http_client_send_request+0x18a>
		return -EINVAL;
   15e5a:	2316      	movs	r3, #22
   15e5c:	425b      	negs	r3, r3
   15e5e:	9301      	str	r3, [sp, #4]
   15e60:	e02b      	b.n	15eba <http_client_send_request+0x21e>
		return -EBUSY;
   15e62:	2310      	movs	r3, #16
   15e64:	425b      	negs	r3, r3
   15e66:	9301      	str	r3, [sp, #4]
   15e68:	e027      	b.n	15eba <http_client_send_request+0x21e>
		return -EINVAL;
   15e6a:	2316      	movs	r3, #22
   15e6c:	425b      	negs	r3, r3
   15e6e:	9301      	str	r3, [sp, #4]
   15e70:	e023      	b.n	15eba <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   15e72:	235b      	movs	r3, #91	; 0x5b
   15e74:	425b      	negs	r3, r3
   15e76:	9301      	str	r3, [sp, #4]
   15e78:	e01f      	b.n	15eba <http_client_send_request+0x21e>
			return -ENOMEM;
   15e7a:	230c      	movs	r3, #12
   15e7c:	425b      	negs	r3, r3
   15e7e:	9301      	str	r3, [sp, #4]
   15e80:	e01b      	b.n	15eba <http_client_send_request+0x21e>
			return -ENOSPC;
   15e82:	231c      	movs	r3, #28
   15e84:	425b      	negs	r3, r3
   15e86:	9301      	str	r3, [sp, #4]
   15e88:	e017      	b.n	15eba <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   15e8a:	2302      	movs	r3, #2
   15e8c:	aa04      	add	r2, sp, #16
   15e8e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15e90:	334e      	adds	r3, #78	; 0x4e
   15e92:	5ae3      	ldrh	r3, [r4, r3]
   15e94:	021a      	lsls	r2, r3, #8
   15e96:	0a1b      	lsrs	r3, r3, #8
   15e98:	4313      	orrs	r3, r2
   15e9a:	aa04      	add	r2, sp, #16
   15e9c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   15e9e:	9802      	ldr	r0, [sp, #8]
   15ea0:	4b16      	ldr	r3, [pc, #88]	; (15efc <http_client_send_request+0x260>)
   15ea2:	4798      	blx	r3
   15ea4:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15ea6:	2000      	movs	r0, #0
   15ea8:	5620      	ldrsb	r0, [r4, r0]
   15eaa:	2210      	movs	r2, #16
   15eac:	a904      	add	r1, sp, #16
   15eae:	4b14      	ldr	r3, [pc, #80]	; (15f00 <http_client_send_request+0x264>)
   15eb0:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   15eb2:	2301      	movs	r3, #1
   15eb4:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   15eb6:	2300      	movs	r3, #0
   15eb8:	9301      	str	r3, [sp, #4]
}
   15eba:	9801      	ldr	r0, [sp, #4]
   15ebc:	b008      	add	sp, #32
   15ebe:	bc04      	pop	{r2}
   15ec0:	4692      	mov	sl, r2
   15ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ec4:	0001b048 	.word	0x0001b048
   15ec8:	00017f35 	.word	0x00017f35
   15ecc:	0001b050 	.word	0x0001b050
   15ed0:	00017f27 	.word	0x00017f27
   15ed4:	0001797d 	.word	0x0001797d
   15ed8:	00017eed 	.word	0x00017eed
   15edc:	00017991 	.word	0x00017991
   15ee0:	00017edb 	.word	0x00017edb
   15ee4:	000179c7 	.word	0x000179c7
   15ee8:	000156e5 	.word	0x000156e5
   15eec:	0000f685 	.word	0x0000f685
   15ef0:	200008b0 	.word	0x200008b0
   15ef4:	000157fd 	.word	0x000157fd
   15ef8:	0000facd 	.word	0x0000facd
   15efc:	0000fa61 	.word	0x0000fa61
   15f00:	0000f809 	.word	0x0000f809

00015f04 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   15f04:	b510      	push	{r4, lr}
	if (module == NULL) {
   15f06:	2800      	cmp	r0, #0
   15f08:	d00d      	beq.n	15f26 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   15f0a:	6c41      	ldr	r1, [r0, #68]	; 0x44
   15f0c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15f0e:	4291      	cmp	r1, r2
   15f10:	d20a      	bcs.n	15f28 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   15f12:	1a52      	subs	r2, r2, r1
   15f14:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   15f16:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15f18:	469c      	mov	ip, r3
   15f1a:	4461      	add	r1, ip
	recv(module->sock,
   15f1c:	7800      	ldrb	r0, [r0, #0]
   15f1e:	b240      	sxtb	r0, r0
   15f20:	2300      	movs	r3, #0
   15f22:	4c04      	ldr	r4, [pc, #16]	; (15f34 <_http_client_recv_packet+0x30>)
   15f24:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   15f26:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   15f28:	218b      	movs	r1, #139	; 0x8b
   15f2a:	4249      	negs	r1, r1
   15f2c:	4b02      	ldr	r3, [pc, #8]	; (15f38 <_http_client_recv_packet+0x34>)
   15f2e:	4798      	blx	r3
		return;
   15f30:	e7f9      	b.n	15f26 <_http_client_recv_packet+0x22>
   15f32:	46c0      	nop			; (mov r8, r8)
   15f34:	0000f931 	.word	0x0000f931
   15f38:	000156e5 	.word	0x000156e5

00015f3c <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   15f3c:	b570      	push	{r4, r5, r6, lr}
   15f3e:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   15f40:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   15f42:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   15f44:	1a5c      	subs	r4, r3, r1
   15f46:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   15f48:	2c00      	cmp	r4, #0
   15f4a:	dc02      	bgt.n	15f52 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   15f4c:	2300      	movs	r3, #0
   15f4e:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   15f50:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   15f52:	0022      	movs	r2, r4
   15f54:	4b01      	ldr	r3, [pc, #4]	; (15f5c <_http_client_move_buffer+0x20>)
   15f56:	4798      	blx	r3
		module->recved_size = remain;
   15f58:	646c      	str	r4, [r5, #68]	; 0x44
   15f5a:	e7f9      	b.n	15f50 <_http_client_move_buffer+0x14>
   15f5c:	000179a3 	.word	0x000179a3

00015f60 <_http_client_handle_header>:
{
   15f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f62:	46ce      	mov	lr, r9
   15f64:	b500      	push	{lr}
   15f66:	b084      	sub	sp, #16
   15f68:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   15f6a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   15f6c:	4b62      	ldr	r3, [pc, #392]	; (160f8 <_http_client_handle_header+0x198>)
   15f6e:	4699      	mov	r9, r3
   15f70:	e049      	b.n	16006 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   15f72:	0021      	movs	r1, r4
   15f74:	0038      	movs	r0, r7
   15f76:	4b61      	ldr	r3, [pc, #388]	; (160fc <_http_client_handle_header+0x19c>)
   15f78:	4798      	blx	r3
			return 0;
   15f7a:	2600      	movs	r6, #0
}
   15f7c:	0030      	movs	r0, r6
   15f7e:	b004      	add	sp, #16
   15f80:	bc04      	pop	{r2}
   15f82:	4691      	mov	r9, r2
   15f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   15f86:	1ca1      	adds	r1, r4, #2
   15f88:	0038      	movs	r0, r7
   15f8a:	4b5c      	ldr	r3, [pc, #368]	; (160fc <_http_client_handle_header+0x19c>)
   15f8c:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   15f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15f90:	2b00      	cmp	r3, #0
   15f92:	d00a      	beq.n	15faa <_http_client_handle_header+0x4a>
   15f94:	22e4      	movs	r2, #228	; 0xe4
   15f96:	5ab9      	ldrh	r1, [r7, r2]
   15f98:	2900      	cmp	r1, #0
   15f9a:	d006      	beq.n	15faa <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   15f9c:	3a08      	subs	r2, #8
   15f9e:	58b8      	ldr	r0, [r7, r2]
   15fa0:	2800      	cmp	r0, #0
   15fa2:	db07      	blt.n	15fb4 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   15fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   15fa6:	4290      	cmp	r0, r2
   15fa8:	dc10      	bgt.n	15fcc <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   15faa:	2201      	movs	r2, #1
   15fac:	23d8      	movs	r3, #216	; 0xd8
   15fae:	50fa      	str	r2, [r7, r3]
			return 1;
   15fb0:	2601      	movs	r6, #1
   15fb2:	e7e3      	b.n	15f7c <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   15fb4:	aa01      	add	r2, sp, #4
   15fb6:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   15fb8:	2101      	movs	r1, #1
   15fba:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   15fbc:	2100      	movs	r1, #0
   15fbe:	20e0      	movs	r0, #224	; 0xe0
   15fc0:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   15fc2:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15fc4:	3102      	adds	r1, #2
   15fc6:	0038      	movs	r0, r7
   15fc8:	4798      	blx	r3
   15fca:	e7ee      	b.n	15faa <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   15fcc:	aa01      	add	r2, sp, #4
   15fce:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   15fd0:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   15fd2:	2100      	movs	r1, #0
   15fd4:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   15fd6:	20e0      	movs	r0, #224	; 0xe0
   15fd8:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15fda:	3102      	adds	r1, #2
   15fdc:	0038      	movs	r0, r7
   15fde:	4798      	blx	r3
   15fe0:	e7e3      	b.n	15faa <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   15fe2:	0020      	movs	r0, r4
   15fe4:	3010      	adds	r0, #16
   15fe6:	4b46      	ldr	r3, [pc, #280]	; (16100 <_http_client_handle_header+0x1a0>)
   15fe8:	4798      	blx	r3
   15fea:	23dc      	movs	r3, #220	; 0xdc
   15fec:	50f8      	str	r0, [r7, r3]
   15fee:	e009      	b.n	16004 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15ff0:	3201      	adds	r2, #1
   15ff2:	4295      	cmp	r5, r2
   15ff4:	d006      	beq.n	16004 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15ff6:	7813      	ldrb	r3, [r2, #0]
   15ff8:	2b20      	cmp	r3, #32
   15ffa:	d12b      	bne.n	16054 <_http_client_handle_header+0xf4>
   15ffc:	e7f8      	b.n	15ff0 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   15ffe:	3a21      	subs	r2, #33	; 0x21
   16000:	3389      	adds	r3, #137	; 0x89
   16002:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   16004:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   16006:	493f      	ldr	r1, [pc, #252]	; (16104 <_http_client_handle_header+0x1a4>)
   16008:	0020      	movs	r0, r4
   1600a:	47c8      	blx	r9
   1600c:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1600e:	d0b0      	beq.n	15f72 <_http_client_handle_header+0x12>
   16010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   16012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16014:	4694      	mov	ip, r2
   16016:	4463      	add	r3, ip
   16018:	4298      	cmp	r0, r3
   1601a:	d2aa      	bcs.n	15f72 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1601c:	2202      	movs	r2, #2
   1601e:	4939      	ldr	r1, [pc, #228]	; (16104 <_http_client_handle_header+0x1a4>)
   16020:	0020      	movs	r0, r4
   16022:	4b39      	ldr	r3, [pc, #228]	; (16108 <_http_client_handle_header+0x1a8>)
   16024:	4798      	blx	r3
   16026:	2800      	cmp	r0, #0
   16028:	d0ad      	beq.n	15f86 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1602a:	2210      	movs	r2, #16
   1602c:	4937      	ldr	r1, [pc, #220]	; (1610c <_http_client_handle_header+0x1ac>)
   1602e:	0020      	movs	r0, r4
   16030:	4b35      	ldr	r3, [pc, #212]	; (16108 <_http_client_handle_header+0x1a8>)
   16032:	4798      	blx	r3
   16034:	2800      	cmp	r0, #0
   16036:	d0d4      	beq.n	15fe2 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   16038:	2213      	movs	r2, #19
   1603a:	4935      	ldr	r1, [pc, #212]	; (16110 <_http_client_handle_header+0x1b0>)
   1603c:	0020      	movs	r0, r4
   1603e:	4b32      	ldr	r3, [pc, #200]	; (16108 <_http_client_handle_header+0x1a8>)
   16040:	4798      	blx	r3
   16042:	1e06      	subs	r6, r0, #0
   16044:	d110      	bne.n	16068 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   16046:	0022      	movs	r2, r4
   16048:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1604a:	4295      	cmp	r5, r2
   1604c:	d9da      	bls.n	16004 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1604e:	7ce3      	ldrb	r3, [r4, #19]
   16050:	2b20      	cmp	r3, #32
   16052:	d0cd      	beq.n	15ff0 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   16054:	2220      	movs	r2, #32
   16056:	4393      	bics	r3, r2
   16058:	2b43      	cmp	r3, #67	; 0x43
   1605a:	d0d0      	beq.n	15ffe <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   1605c:	2186      	movs	r1, #134	; 0x86
   1605e:	4249      	negs	r1, r1
   16060:	0038      	movs	r0, r7
   16062:	4b2c      	ldr	r3, [pc, #176]	; (16114 <_http_client_handle_header+0x1b4>)
   16064:	4798      	blx	r3
					return 0;
   16066:	e789      	b.n	15f7c <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   16068:	220c      	movs	r2, #12
   1606a:	492b      	ldr	r1, [pc, #172]	; (16118 <_http_client_handle_header+0x1b8>)
   1606c:	0020      	movs	r0, r4
   1606e:	4b26      	ldr	r3, [pc, #152]	; (16108 <_http_client_handle_header+0x1a8>)
   16070:	4798      	blx	r3
   16072:	2800      	cmp	r0, #0
   16074:	d11d      	bne.n	160b2 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   16076:	0022      	movs	r2, r4
   16078:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1607a:	4295      	cmp	r5, r2
   1607c:	d9c2      	bls.n	16004 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1607e:	7b23      	ldrb	r3, [r4, #12]
   16080:	2b20      	cmp	r3, #32
   16082:	d009      	beq.n	16098 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   16084:	2220      	movs	r2, #32
   16086:	4393      	bics	r3, r2
   16088:	2b4b      	cmp	r3, #75	; 0x4b
   1608a:	d00c      	beq.n	160a6 <_http_client_handle_header+0x146>
					module->permanent = 0;
   1608c:	2241      	movs	r2, #65	; 0x41
   1608e:	5cbb      	ldrb	r3, [r7, r2]
   16090:	2102      	movs	r1, #2
   16092:	438b      	bics	r3, r1
   16094:	54bb      	strb	r3, [r7, r2]
   16096:	e7b5      	b.n	16004 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   16098:	3201      	adds	r2, #1
   1609a:	4295      	cmp	r5, r2
   1609c:	d0b2      	beq.n	16004 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1609e:	7813      	ldrb	r3, [r2, #0]
   160a0:	2b20      	cmp	r3, #32
   160a2:	d1ef      	bne.n	16084 <_http_client_handle_header+0x124>
   160a4:	e7f8      	b.n	16098 <_http_client_handle_header+0x138>
					module->permanent = 1;
   160a6:	3221      	adds	r2, #33	; 0x21
   160a8:	5cbb      	ldrb	r3, [r7, r2]
   160aa:	2102      	movs	r1, #2
   160ac:	430b      	orrs	r3, r1
   160ae:	54bb      	strb	r3, [r7, r2]
   160b0:	e7a8      	b.n	16004 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   160b2:	2205      	movs	r2, #5
   160b4:	4919      	ldr	r1, [pc, #100]	; (1611c <_http_client_handle_header+0x1bc>)
   160b6:	0020      	movs	r0, r4
   160b8:	4b13      	ldr	r3, [pc, #76]	; (16108 <_http_client_handle_header+0x1a8>)
   160ba:	4798      	blx	r3
   160bc:	2800      	cmp	r0, #0
   160be:	d1a1      	bne.n	16004 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   160c0:	0020      	movs	r0, r4
   160c2:	3009      	adds	r0, #9
   160c4:	4b0e      	ldr	r3, [pc, #56]	; (16100 <_http_client_handle_header+0x1a0>)
   160c6:	4798      	blx	r3
   160c8:	23e4      	movs	r3, #228	; 0xe4
   160ca:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   160cc:	2200      	movs	r2, #0
   160ce:	3b08      	subs	r3, #8
   160d0:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   160d2:	7963      	ldrb	r3, [r4, #5]
   160d4:	2b31      	cmp	r3, #49	; 0x31
   160d6:	d802      	bhi.n	160de <_http_client_handle_header+0x17e>
   160d8:	79e3      	ldrb	r3, [r4, #7]
   160da:	2b30      	cmp	r3, #48	; 0x30
   160dc:	d905      	bls.n	160ea <_http_client_handle_header+0x18a>
				module->permanent = 1;
   160de:	2241      	movs	r2, #65	; 0x41
   160e0:	5cbb      	ldrb	r3, [r7, r2]
   160e2:	2102      	movs	r1, #2
   160e4:	430b      	orrs	r3, r1
   160e6:	54bb      	strb	r3, [r7, r2]
   160e8:	e78c      	b.n	16004 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   160ea:	2241      	movs	r2, #65	; 0x41
   160ec:	5cbb      	ldrb	r3, [r7, r2]
   160ee:	2102      	movs	r1, #2
   160f0:	438b      	bics	r3, r1
   160f2:	54bb      	strb	r3, [r7, r2]
   160f4:	e786      	b.n	16004 <_http_client_handle_header+0xa4>
   160f6:	46c0      	nop			; (mov r8, r8)
   160f8:	00017f57 	.word	0x00017f57
   160fc:	00015f3d 	.word	0x00015f3d
   16100:	00017915 	.word	0x00017915
   16104:	0001b574 	.word	0x0001b574
   16108:	00017f35 	.word	0x00017f35
   1610c:	0001b028 	.word	0x0001b028
   16110:	0001af38 	.word	0x0001af38
   16114:	000156e5 	.word	0x000156e5
   16118:	0001af4c 	.word	0x0001af4c
   1611c:	0001af5c 	.word	0x0001af5c

00016120 <_http_client_handle_entity>:
{
   16120:	b5f0      	push	{r4, r5, r6, r7, lr}
   16122:	46ce      	mov	lr, r9
   16124:	b500      	push	{lr}
   16126:	b086      	sub	sp, #24
   16128:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   1612a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1612c:	23dc      	movs	r3, #220	; 0xdc
   1612e:	58c3      	ldr	r3, [r0, r3]
   16130:	2b00      	cmp	r3, #0
   16132:	db69      	blt.n	16208 <_http_client_handle_entity+0xe8>
   16134:	6e02      	ldr	r2, [r0, #96]	; 0x60
   16136:	4293      	cmp	r3, r2
   16138:	dc2b      	bgt.n	16192 <_http_client_handle_entity+0x72>
	return 0;
   1613a:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   1613c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1613e:	4293      	cmp	r3, r2
   16140:	dc4e      	bgt.n	161e0 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   16142:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   16144:	2e00      	cmp	r6, #0
   16146:	d003      	beq.n	16150 <_http_client_handle_entity+0x30>
   16148:	22e4      	movs	r2, #228	; 0xe4
   1614a:	5aa1      	ldrh	r1, [r4, r2]
   1614c:	2900      	cmp	r1, #0
   1614e:	d10e      	bne.n	1616e <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   16150:	2300      	movs	r3, #0
   16152:	22d8      	movs	r2, #216	; 0xd8
   16154:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   16156:	320c      	adds	r2, #12
   16158:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   1615a:	3341      	adds	r3, #65	; 0x41
   1615c:	5ce3      	ldrb	r3, [r4, r3]
   1615e:	079b      	lsls	r3, r3, #30
   16160:	d40f      	bmi.n	16182 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   16162:	2100      	movs	r1, #0
   16164:	0020      	movs	r0, r4
   16166:	4b71      	ldr	r3, [pc, #452]	; (1632c <_http_client_handle_entity+0x20c>)
   16168:	4798      	blx	r3
	return 0;
   1616a:	2000      	movs	r0, #0
   1616c:	e038      	b.n	161e0 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   1616e:	aa03      	add	r2, sp, #12
   16170:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   16172:	2100      	movs	r1, #0
   16174:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   16176:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   16178:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1617a:	3102      	adds	r1, #2
   1617c:	0020      	movs	r0, r4
   1617e:	47b0      	blx	r6
   16180:	e7e6      	b.n	16150 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   16182:	23dc      	movs	r3, #220	; 0xdc
   16184:	58e1      	ldr	r1, [r4, r3]
   16186:	1869      	adds	r1, r5, r1
   16188:	0020      	movs	r0, r4
   1618a:	4b69      	ldr	r3, [pc, #420]	; (16330 <_http_client_handle_entity+0x210>)
   1618c:	4798      	blx	r3
				return module->recved_size;
   1618e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   16190:	e026      	b.n	161e0 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   16192:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16194:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   16196:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   16198:	21e0      	movs	r1, #224	; 0xe0
   1619a:	5840      	ldr	r0, [r0, r1]
   1619c:	4684      	mov	ip, r0
   1619e:	4462      	add	r2, ip
   161a0:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   161a2:	4293      	cmp	r3, r2
   161a4:	dc20      	bgt.n	161e8 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   161a6:	2300      	movs	r3, #0
   161a8:	22d8      	movs	r2, #216	; 0xd8
   161aa:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   161ac:	320c      	adds	r2, #12
   161ae:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   161b0:	3ae3      	subs	r2, #227	; 0xe3
   161b2:	ab03      	add	r3, sp, #12
   161b4:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   161b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   161b8:	2b00      	cmp	r3, #0
   161ba:	d007      	beq.n	161cc <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   161bc:	ae03      	add	r6, sp, #12
   161be:	0032      	movs	r2, r6
   161c0:	2103      	movs	r1, #3
   161c2:	0020      	movs	r0, r4
   161c4:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   161c6:	7a33      	ldrb	r3, [r6, #8]
   161c8:	2b01      	cmp	r3, #1
   161ca:	d103      	bne.n	161d4 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   161cc:	2341      	movs	r3, #65	; 0x41
   161ce:	5ce3      	ldrb	r3, [r4, r3]
   161d0:	079b      	lsls	r3, r3, #30
   161d2:	d510      	bpl.n	161f6 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   161d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   161d6:	18e9      	adds	r1, r5, r3
   161d8:	0020      	movs	r0, r4
   161da:	4b55      	ldr	r3, [pc, #340]	; (16330 <_http_client_handle_entity+0x210>)
   161dc:	4798      	blx	r3
	return 0;
   161de:	2000      	movs	r0, #0
}
   161e0:	b006      	add	sp, #24
   161e2:	bc04      	pop	{r2}
   161e4:	4691      	mov	r9, r2
   161e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   161e8:	2200      	movs	r2, #0
   161ea:	ab03      	add	r3, sp, #12
   161ec:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   161ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   161f0:	2b00      	cmp	r3, #0
   161f2:	d0ef      	beq.n	161d4 <_http_client_handle_entity+0xb4>
   161f4:	e7e2      	b.n	161bc <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   161f6:	484f      	ldr	r0, [pc, #316]	; (16334 <_http_client_handle_entity+0x214>)
   161f8:	4b4f      	ldr	r3, [pc, #316]	; (16338 <_http_client_handle_entity+0x218>)
   161fa:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   161fc:	2100      	movs	r1, #0
   161fe:	0020      	movs	r0, r4
   16200:	4b4a      	ldr	r3, [pc, #296]	; (1632c <_http_client_handle_entity+0x20c>)
   16202:	4798      	blx	r3
					return 0;
   16204:	2000      	movs	r0, #0
   16206:	e7eb      	b.n	161e0 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   16208:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   1620a:	2300      	movs	r3, #0
   1620c:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   1620e:	26e0      	movs	r6, #224	; 0xe0
   16210:	e00a      	b.n	16228 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   16212:	2341      	movs	r3, #65	; 0x41
   16214:	5ce3      	ldrb	r3, [r4, r3]
   16216:	079b      	lsls	r3, r3, #30
   16218:	d51b      	bpl.n	16252 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   1621a:	1ca9      	adds	r1, r5, #2
   1621c:	0020      	movs	r0, r4
   1621e:	4b44      	ldr	r3, [pc, #272]	; (16330 <_http_client_handle_entity+0x210>)
   16220:	4798      	blx	r3
	} while(module->recved_size > 0);
   16222:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16224:	2b00      	cmp	r3, #0
   16226:	d073      	beq.n	16310 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   16228:	59a3      	ldr	r3, [r4, r6]
   1622a:	2b00      	cmp	r3, #0
   1622c:	db30      	blt.n	16290 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   1622e:	d116      	bne.n	1625e <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   16230:	22d8      	movs	r2, #216	; 0xd8
   16232:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   16234:	320c      	adds	r2, #12
   16236:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   16238:	3ae3      	subs	r2, #227	; 0xe3
   1623a:	4669      	mov	r1, sp
   1623c:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   1623e:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   16240:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   16242:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   16244:	2b00      	cmp	r3, #0
   16246:	d0e4      	beq.n	16212 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   16248:	466a      	mov	r2, sp
   1624a:	2103      	movs	r1, #3
   1624c:	0020      	movs	r0, r4
   1624e:	4798      	blx	r3
   16250:	e7df      	b.n	16212 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   16252:	2100      	movs	r1, #0
   16254:	0020      	movs	r0, r4
   16256:	4b35      	ldr	r3, [pc, #212]	; (1632c <_http_client_handle_entity+0x20c>)
   16258:	4798      	blx	r3
	return 0;
   1625a:	2000      	movs	r0, #0
   1625c:	e7c0      	b.n	161e0 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   1625e:	42bb      	cmp	r3, r7
   16260:	dcdf      	bgt.n	16222 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   16262:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   16264:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   16266:	2300      	movs	r3, #0
   16268:	466a      	mov	r2, sp
   1626a:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   1626c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1626e:	2b00      	cmp	r3, #0
   16270:	d002      	beq.n	16278 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   16272:	2103      	movs	r1, #3
   16274:	0020      	movs	r0, r4
   16276:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   16278:	59a3      	ldr	r3, [r4, r6]
   1627a:	1c99      	adds	r1, r3, #2
   1627c:	1869      	adds	r1, r5, r1
   1627e:	0020      	movs	r0, r4
   16280:	4b2b      	ldr	r3, [pc, #172]	; (16330 <_http_client_handle_entity+0x210>)
   16282:	4798      	blx	r3
				length = (int)module->recved_size;
   16284:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   16286:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   16288:	2301      	movs	r3, #1
   1628a:	425b      	negs	r3, r3
   1628c:	51a3      	str	r3, [r4, r6]
   1628e:	e7c8      	b.n	16222 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   16290:	2300      	movs	r3, #0
   16292:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   16294:	2f00      	cmp	r7, #0
   16296:	dd04      	ble.n	162a2 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   16298:	782b      	ldrb	r3, [r5, #0]
   1629a:	2b0a      	cmp	r3, #10
   1629c:	d11c      	bne.n	162d8 <_http_client_handle_entity+0x1b8>
					buffer++;
   1629e:	3501      	adds	r5, #1
					length--;
   162a0:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   162a2:	59a3      	ldr	r3, [r4, r6]
   162a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   162a6:	4293      	cmp	r3, r2
   162a8:	dc39      	bgt.n	1631e <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   162aa:	2f00      	cmp	r7, #0
   162ac:	d1b9      	bne.n	16222 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   162ae:	2201      	movs	r2, #1
   162b0:	4252      	negs	r2, r2
   162b2:	23e0      	movs	r3, #224	; 0xe0
   162b4:	50e2      	str	r2, [r4, r3]
   162b6:	e7d0      	b.n	1625a <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   162b8:	001a      	movs	r2, r3
   162ba:	3a61      	subs	r2, #97	; 0x61
   162bc:	2a05      	cmp	r2, #5
   162be:	d818      	bhi.n	162f2 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   162c0:	59a2      	ldr	r2, [r4, r6]
   162c2:	0112      	lsls	r2, r2, #4
   162c4:	18d3      	adds	r3, r2, r3
   162c6:	3b61      	subs	r3, #97	; 0x61
   162c8:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   162ca:	3501      	adds	r5, #1
   162cc:	3f01      	subs	r7, #1
   162ce:	2f00      	cmp	r7, #0
   162d0:	d020      	beq.n	16314 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   162d2:	782b      	ldrb	r3, [r5, #0]
   162d4:	2b0a      	cmp	r3, #10
   162d6:	d0e2      	beq.n	1629e <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   162d8:	464a      	mov	r2, r9
   162da:	2a00      	cmp	r2, #0
   162dc:	d1f5      	bne.n	162ca <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   162de:	001a      	movs	r2, r3
   162e0:	3a30      	subs	r2, #48	; 0x30
   162e2:	2a09      	cmp	r2, #9
   162e4:	d8e8      	bhi.n	162b8 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   162e6:	59a2      	ldr	r2, [r4, r6]
   162e8:	0112      	lsls	r2, r2, #4
   162ea:	18d3      	adds	r3, r2, r3
   162ec:	3b30      	subs	r3, #48	; 0x30
   162ee:	51a3      	str	r3, [r4, r6]
   162f0:	e7eb      	b.n	162ca <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   162f2:	001a      	movs	r2, r3
   162f4:	3a41      	subs	r2, #65	; 0x41
   162f6:	2a05      	cmp	r2, #5
   162f8:	d805      	bhi.n	16306 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   162fa:	59a2      	ldr	r2, [r4, r6]
   162fc:	0112      	lsls	r2, r2, #4
   162fe:	18d3      	adds	r3, r2, r3
   16300:	3b41      	subs	r3, #65	; 0x41
   16302:	51a3      	str	r3, [r4, r6]
   16304:	e7e1      	b.n	162ca <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   16306:	3b3b      	subs	r3, #59	; 0x3b
   16308:	425a      	negs	r2, r3
   1630a:	415a      	adcs	r2, r3
   1630c:	4691      	mov	r9, r2
   1630e:	e7dc      	b.n	162ca <_http_client_handle_entity+0x1aa>
	return 0;
   16310:	2000      	movs	r0, #0
   16312:	e765      	b.n	161e0 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   16314:	23e0      	movs	r3, #224	; 0xe0
   16316:	58e3      	ldr	r3, [r4, r3]
   16318:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1631a:	4293      	cmp	r3, r2
   1631c:	ddc7      	ble.n	162ae <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   1631e:	218b      	movs	r1, #139	; 0x8b
   16320:	4249      	negs	r1, r1
   16322:	0020      	movs	r0, r4
   16324:	4b01      	ldr	r3, [pc, #4]	; (1632c <_http_client_handle_entity+0x20c>)
   16326:	4798      	blx	r3
   16328:	e797      	b.n	1625a <_http_client_handle_entity+0x13a>
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	000156e5 	.word	0x000156e5
   16330:	00015f3d 	.word	0x00015f3d
   16334:	0001af34 	.word	0x0001af34
   16338:	00017c45 	.word	0x00017c45

0001633c <_http_client_handle_response>:
{
   1633c:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   1633e:	23d8      	movs	r3, #216	; 0xd8
   16340:	58c3      	ldr	r3, [r0, r3]
   16342:	2b00      	cmp	r3, #0
   16344:	d003      	beq.n	1634e <_http_client_handle_response+0x12>
   16346:	2b01      	cmp	r3, #1
   16348:	d004      	beq.n	16354 <_http_client_handle_response+0x18>
	return 0;
   1634a:	2000      	movs	r0, #0
   1634c:	e001      	b.n	16352 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   1634e:	4b03      	ldr	r3, [pc, #12]	; (1635c <_http_client_handle_response+0x20>)
   16350:	4798      	blx	r3
}
   16352:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   16354:	4b02      	ldr	r3, [pc, #8]	; (16360 <_http_client_handle_response+0x24>)
   16356:	4798      	blx	r3
   16358:	e7fb      	b.n	16352 <_http_client_handle_response+0x16>
   1635a:	46c0      	nop			; (mov r8, r8)
   1635c:	00015f61 	.word	0x00015f61
   16360:	00016121 	.word	0x00016121

00016364 <_http_client_recved_packet>:
{
   16364:	b570      	push	{r4, r5, r6, lr}
   16366:	0004      	movs	r4, r0
	module->recved_size += read_len;
   16368:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1636a:	469c      	mov	ip, r3
   1636c:	4461      	add	r1, ip
   1636e:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   16370:	2358      	movs	r3, #88	; 0x58
   16372:	5ac3      	ldrh	r3, [r0, r3]
   16374:	2b00      	cmp	r3, #0
   16376:	d105      	bne.n	16384 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   16378:	4d05      	ldr	r5, [pc, #20]	; (16390 <_http_client_recved_packet+0x2c>)
   1637a:	0020      	movs	r0, r4
   1637c:	47a8      	blx	r5
   1637e:	2800      	cmp	r0, #0
   16380:	d1fb      	bne.n	1637a <_http_client_recved_packet+0x16>
}
   16382:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   16384:	6c81      	ldr	r1, [r0, #72]	; 0x48
   16386:	6d40      	ldr	r0, [r0, #84]	; 0x54
   16388:	4b02      	ldr	r3, [pc, #8]	; (16394 <_http_client_recved_packet+0x30>)
   1638a:	4798      	blx	r3
   1638c:	e7f4      	b.n	16378 <_http_client_recved_packet+0x14>
   1638e:	46c0      	nop			; (mov r8, r8)
   16390:	0001633d 	.word	0x0001633d
   16394:	00016711 	.word	0x00016711

00016398 <http_client_socket_event_handler>:
{
   16398:	b510      	push	{r4, lr}
   1639a:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   1639c:	0080      	lsls	r0, r0, #2
   1639e:	4b65      	ldr	r3, [pc, #404]	; (16534 <http_client_socket_event_handler+0x19c>)
   163a0:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   163a2:	2c00      	cmp	r4, #0
   163a4:	d006      	beq.n	163b4 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   163a6:	2906      	cmp	r1, #6
   163a8:	d051      	beq.n	1644e <http_client_socket_event_handler+0xb6>
   163aa:	2907      	cmp	r1, #7
   163ac:	d100      	bne.n	163b0 <http_client_socket_event_handler+0x18>
   163ae:	e08a      	b.n	164c6 <http_client_socket_event_handler+0x12e>
   163b0:	2905      	cmp	r1, #5
   163b2:	d001      	beq.n	163b8 <http_client_socket_event_handler+0x20>
}
   163b4:	b004      	add	sp, #16
   163b6:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   163b8:	2301      	movs	r3, #1
   163ba:	56d3      	ldrsb	r3, [r2, r3]
   163bc:	1e1a      	subs	r2, r3, #0
   163be:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   163c0:	db15      	blt.n	163ee <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   163c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   163c4:	2b00      	cmp	r3, #0
   163c6:	d003      	beq.n	163d0 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   163c8:	aa01      	add	r2, sp, #4
   163ca:	2100      	movs	r1, #0
   163cc:	0020      	movs	r0, r4
   163ce:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   163d0:	2303      	movs	r3, #3
   163d2:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   163d4:	3355      	adds	r3, #85	; 0x55
   163d6:	5ae2      	ldrh	r2, [r4, r3]
   163d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   163da:	6d60      	ldr	r0, [r4, #84]	; 0x54
   163dc:	4b56      	ldr	r3, [pc, #344]	; (16538 <http_client_socket_event_handler+0x1a0>)
   163de:	4798      	blx	r3
    		_http_client_recv_packet(module);
   163e0:	0020      	movs	r0, r4
   163e2:	4b56      	ldr	r3, [pc, #344]	; (1653c <http_client_socket_event_handler+0x1a4>)
   163e4:	4798      	blx	r3
			_http_client_request(module);
   163e6:	0020      	movs	r0, r4
   163e8:	4b55      	ldr	r3, [pc, #340]	; (16540 <http_client_socket_event_handler+0x1a8>)
   163ea:	4798      	blx	r3
   163ec:	e7e2      	b.n	163b4 <http_client_socket_event_handler+0x1c>
	switch (err) {
   163ee:	330e      	adds	r3, #14
   163f0:	b2d9      	uxtb	r1, r3
   163f2:	290e      	cmp	r1, #14
   163f4:	d81e      	bhi.n	16434 <http_client_socket_event_handler+0x9c>
   163f6:	008b      	lsls	r3, r1, #2
   163f8:	4952      	ldr	r1, [pc, #328]	; (16544 <http_client_socket_event_handler+0x1ac>)
   163fa:	58cb      	ldr	r3, [r1, r3]
   163fc:	469f      	mov	pc, r3
			return -ENOENT;
   163fe:	2102      	movs	r1, #2
   16400:	4249      	negs	r1, r1
   16402:	e01d      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   16404:	2170      	movs	r1, #112	; 0x70
   16406:	4249      	negs	r1, r1
   16408:	e01a      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   1640a:	210c      	movs	r1, #12
   1640c:	4249      	negs	r1, r1
   1640e:	e017      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   16410:	2116      	movs	r1, #22
   16412:	4249      	negs	r1, r1
   16414:	e014      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   16416:	210c      	movs	r1, #12
   16418:	4249      	negs	r1, r1
   1641a:	e011      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   1641c:	2179      	movs	r1, #121	; 0x79
   1641e:	4249      	negs	r1, r1
   16420:	e00e      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   16422:	2168      	movs	r1, #104	; 0x68
   16424:	4249      	negs	r1, r1
   16426:	e00b      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   16428:	210b      	movs	r1, #11
   1642a:	4249      	negs	r1, r1
   1642c:	e008      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   1642e:	2110      	movs	r1, #16
   16430:	4249      	negs	r1, r1
   16432:	e005      	b.n	16440 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   16434:	2a00      	cmp	r2, #0
   16436:	db07      	blt.n	16448 <http_client_socket_event_handler+0xb0>
			return 0;
   16438:	2100      	movs	r1, #0
   1643a:	e001      	b.n	16440 <http_client_socket_event_handler+0xa8>
			return -EIO;
   1643c:	2105      	movs	r1, #5
   1643e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   16440:	0020      	movs	r0, r4
   16442:	4b41      	ldr	r3, [pc, #260]	; (16548 <http_client_socket_event_handler+0x1b0>)
   16444:	4798      	blx	r3
   16446:	e7b5      	b.n	163b4 <http_client_socket_event_handler+0x1c>
				return -EIO;
   16448:	2105      	movs	r1, #5
   1644a:	4249      	negs	r1, r1
   1644c:	e7f8      	b.n	16440 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   1644e:	2304      	movs	r3, #4
   16450:	5ed1      	ldrsh	r1, [r2, r3]
   16452:	2900      	cmp	r1, #0
   16454:	dd06      	ble.n	16464 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   16456:	0020      	movs	r0, r4
   16458:	4b3c      	ldr	r3, [pc, #240]	; (1654c <http_client_socket_event_handler+0x1b4>)
   1645a:	4798      	blx	r3
		_http_client_recv_packet(module);
   1645c:	0020      	movs	r0, r4
   1645e:	4b37      	ldr	r3, [pc, #220]	; (1653c <http_client_socket_event_handler+0x1a4>)
   16460:	4798      	blx	r3
		break;
   16462:	e7a7      	b.n	163b4 <http_client_socket_event_handler+0x1c>
	switch (err) {
   16464:	000b      	movs	r3, r1
   16466:	330e      	adds	r3, #14
   16468:	b29a      	uxth	r2, r3
   1646a:	2a0e      	cmp	r2, #14
   1646c:	d81e      	bhi.n	164ac <http_client_socket_event_handler+0x114>
   1646e:	0093      	lsls	r3, r2, #2
   16470:	4a37      	ldr	r2, [pc, #220]	; (16550 <http_client_socket_event_handler+0x1b8>)
   16472:	58d3      	ldr	r3, [r2, r3]
   16474:	469f      	mov	pc, r3
			return -ENOENT;
   16476:	2102      	movs	r1, #2
   16478:	4249      	negs	r1, r1
   1647a:	e01d      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   1647c:	2170      	movs	r1, #112	; 0x70
   1647e:	4249      	negs	r1, r1
   16480:	e01a      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   16482:	210c      	movs	r1, #12
   16484:	4249      	negs	r1, r1
   16486:	e017      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   16488:	2116      	movs	r1, #22
   1648a:	4249      	negs	r1, r1
   1648c:	e014      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   1648e:	210c      	movs	r1, #12
   16490:	4249      	negs	r1, r1
   16492:	e011      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   16494:	2179      	movs	r1, #121	; 0x79
   16496:	4249      	negs	r1, r1
   16498:	e00e      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   1649a:	2168      	movs	r1, #104	; 0x68
   1649c:	4249      	negs	r1, r1
   1649e:	e00b      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   164a0:	210b      	movs	r1, #11
   164a2:	4249      	negs	r1, r1
   164a4:	e008      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   164a6:	2110      	movs	r1, #16
   164a8:	4249      	negs	r1, r1
   164aa:	e005      	b.n	164b8 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   164ac:	2900      	cmp	r1, #0
   164ae:	db07      	blt.n	164c0 <http_client_socket_event_handler+0x128>
			return 0;
   164b0:	2100      	movs	r1, #0
   164b2:	e001      	b.n	164b8 <http_client_socket_event_handler+0x120>
			return -EIO;
   164b4:	2105      	movs	r1, #5
   164b6:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   164b8:	0020      	movs	r0, r4
   164ba:	4b23      	ldr	r3, [pc, #140]	; (16548 <http_client_socket_event_handler+0x1b0>)
   164bc:	4798      	blx	r3
   164be:	e7cd      	b.n	1645c <http_client_socket_event_handler+0xc4>
				return -EIO;
   164c0:	2105      	movs	r1, #5
   164c2:	4249      	negs	r1, r1
   164c4:	e7f8      	b.n	164b8 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   164c6:	2300      	movs	r3, #0
   164c8:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   164ca:	2b00      	cmp	r3, #0
   164cc:	db08      	blt.n	164e0 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   164ce:	0020      	movs	r0, r4
   164d0:	4b1b      	ldr	r3, [pc, #108]	; (16540 <http_client_socket_event_handler+0x1a8>)
   164d2:	4798      	blx	r3
		module->sending = 0;
   164d4:	2241      	movs	r2, #65	; 0x41
   164d6:	5ca3      	ldrb	r3, [r4, r2]
   164d8:	2101      	movs	r1, #1
   164da:	438b      	bics	r3, r1
   164dc:	54a3      	strb	r3, [r4, r2]
    	break;
   164de:	e769      	b.n	163b4 <http_client_socket_event_handler+0x1c>
	switch (err) {
   164e0:	330e      	adds	r3, #14
   164e2:	b29a      	uxth	r2, r3
   164e4:	2a0d      	cmp	r2, #13
   164e6:	d81e      	bhi.n	16526 <http_client_socket_event_handler+0x18e>
   164e8:	0093      	lsls	r3, r2, #2
   164ea:	4a1a      	ldr	r2, [pc, #104]	; (16554 <http_client_socket_event_handler+0x1bc>)
   164ec:	58d3      	ldr	r3, [r2, r3]
   164ee:	469f      	mov	pc, r3
			return -ENOENT;
   164f0:	2102      	movs	r1, #2
   164f2:	4249      	negs	r1, r1
   164f4:	e019      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   164f6:	2170      	movs	r1, #112	; 0x70
   164f8:	4249      	negs	r1, r1
   164fa:	e016      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   164fc:	210c      	movs	r1, #12
   164fe:	4249      	negs	r1, r1
   16500:	e013      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EINVAL;
   16502:	2116      	movs	r1, #22
   16504:	4249      	negs	r1, r1
   16506:	e010      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   16508:	210c      	movs	r1, #12
   1650a:	4249      	negs	r1, r1
   1650c:	e00d      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   1650e:	2179      	movs	r1, #121	; 0x79
   16510:	4249      	negs	r1, r1
   16512:	e00a      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   16514:	2168      	movs	r1, #104	; 0x68
   16516:	4249      	negs	r1, r1
   16518:	e007      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   1651a:	210b      	movs	r1, #11
   1651c:	4249      	negs	r1, r1
   1651e:	e004      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   16520:	2110      	movs	r1, #16
   16522:	4249      	negs	r1, r1
   16524:	e001      	b.n	1652a <http_client_socket_event_handler+0x192>
			return -EIO;
   16526:	2105      	movs	r1, #5
   16528:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1652a:	0020      	movs	r0, r4
   1652c:	4b06      	ldr	r3, [pc, #24]	; (16548 <http_client_socket_event_handler+0x1b0>)
   1652e:	4798      	blx	r3
   16530:	e7d0      	b.n	164d4 <http_client_socket_event_handler+0x13c>
   16532:	46c0      	nop			; (mov r8, r8)
   16534:	200008b0 	.word	0x200008b0
   16538:	000166e5 	.word	0x000166e5
   1653c:	00015f05 	.word	0x00015f05
   16540:	000157fd 	.word	0x000157fd
   16544:	0001ae74 	.word	0x0001ae74
   16548:	000156e5 	.word	0x000156e5
   1654c:	00016365 	.word	0x00016365
   16550:	0001aeb0 	.word	0x0001aeb0
   16554:	0001aeec 	.word	0x0001aeec

00016558 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   16558:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   1655a:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   1655c:	2200      	movs	r2, #0
   1655e:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   16560:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   16562:	9b00      	ldr	r3, [sp, #0]
   16564:	60c3      	str	r3, [r0, #12]
}
   16566:	4770      	bx	lr

00016568 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   16568:	b510      	push	{r4, lr}
   1656a:	0004      	movs	r4, r0
	if(writer->written > 0) {
   1656c:	6842      	ldr	r2, [r0, #4]
   1656e:	2a00      	cmp	r2, #0
   16570:	d100      	bne.n	16574 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   16572:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   16574:	6901      	ldr	r1, [r0, #16]
   16576:	68c0      	ldr	r0, [r0, #12]
   16578:	68a3      	ldr	r3, [r4, #8]
   1657a:	4798      	blx	r3
		writer->written = 0;
   1657c:	2300      	movs	r3, #0
   1657e:	6063      	str	r3, [r4, #4]
}
   16580:	e7f7      	b.n	16572 <stream_writer_send_remain+0xa>
	...

00016584 <stream_writer_send_8>:
{
   16584:	b570      	push	{r4, r5, r6, lr}
   16586:	0004      	movs	r4, r0
   16588:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   1658a:	6803      	ldr	r3, [r0, #0]
   1658c:	6842      	ldr	r2, [r0, #4]
   1658e:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   16590:	2b00      	cmp	r3, #0
   16592:	dd05      	ble.n	165a0 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   16594:	6922      	ldr	r2, [r4, #16]
   16596:	6863      	ldr	r3, [r4, #4]
   16598:	1c59      	adds	r1, r3, #1
   1659a:	6061      	str	r1, [r4, #4]
   1659c:	54d5      	strb	r5, [r2, r3]
}
   1659e:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   165a0:	4b01      	ldr	r3, [pc, #4]	; (165a8 <stream_writer_send_8+0x24>)
   165a2:	4798      	blx	r3
   165a4:	e7f6      	b.n	16594 <stream_writer_send_8+0x10>
   165a6:	46c0      	nop			; (mov r8, r8)
   165a8:	00016569 	.word	0x00016569

000165ac <stream_writer_send_buffer>:
{
   165ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165ae:	0006      	movs	r6, r0
   165b0:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   165b2:	2a00      	cmp	r2, #0
   165b4:	d008      	beq.n	165c8 <stream_writer_send_buffer+0x1c>
   165b6:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   165b8:	4f04      	ldr	r7, [pc, #16]	; (165cc <stream_writer_send_buffer+0x20>)
   165ba:	2100      	movs	r1, #0
   165bc:	5661      	ldrsb	r1, [r4, r1]
   165be:	0030      	movs	r0, r6
   165c0:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   165c2:	3401      	adds	r4, #1
   165c4:	42a5      	cmp	r5, r4
   165c6:	d1f8      	bne.n	165ba <stream_writer_send_buffer+0xe>
}
   165c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   165ca:	46c0      	nop			; (mov r8, r8)
   165cc:	00016585 	.word	0x00016585

000165d0 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   165d0:	4a02      	ldr	r2, [pc, #8]	; (165dc <sw_timer_tcc_callback+0xc>)
   165d2:	6813      	ldr	r3, [r2, #0]
   165d4:	3301      	adds	r3, #1
   165d6:	6013      	str	r3, [r2, #0]
}
   165d8:	4770      	bx	lr
   165da:	46c0      	nop			; (mov r8, r8)
   165dc:	200008cc 	.word	0x200008cc

000165e0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   165e0:	2364      	movs	r3, #100	; 0x64
   165e2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   165e4:	2300      	movs	r3, #0
   165e6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   165e8:	7043      	strb	r3, [r0, #1]
}
   165ea:	4770      	bx	lr

000165ec <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   165ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   165ee:	46c6      	mov	lr, r8
   165f0:	b500      	push	{lr}
   165f2:	b0ac      	sub	sp, #176	; 0xb0
   165f4:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   165f6:	466e      	mov	r6, sp
   165f8:	4b1d      	ldr	r3, [pc, #116]	; (16670 <sw_timer_init+0x84>)
   165fa:	466a      	mov	r2, sp
   165fc:	cb92      	ldmia	r3!, {r1, r4, r7}
   165fe:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   16600:	886b      	ldrh	r3, [r5, #2]
   16602:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   16604:	3014      	adds	r0, #20
   16606:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   16608:	782b      	ldrb	r3, [r5, #0]
   1660a:	009b      	lsls	r3, r3, #2
   1660c:	5999      	ldr	r1, [r3, r6]
   1660e:	0017      	movs	r7, r2
   16610:	0010      	movs	r0, r2
   16612:	4b18      	ldr	r3, [pc, #96]	; (16674 <sw_timer_init+0x88>)
   16614:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   16616:	2000      	movs	r0, #0
   16618:	4b17      	ldr	r3, [pc, #92]	; (16678 <sw_timer_init+0x8c>)
   1661a:	4798      	blx	r3
   1661c:	4b17      	ldr	r3, [pc, #92]	; (1667c <sw_timer_init+0x90>)
   1661e:	7a1b      	ldrb	r3, [r3, #8]
   16620:	b2db      	uxtb	r3, r3
   16622:	40d8      	lsrs	r0, r3
   16624:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   16626:	8869      	ldrh	r1, [r5, #2]
   16628:	20fa      	movs	r0, #250	; 0xfa
   1662a:	0200      	lsls	r0, r0, #8
   1662c:	4b14      	ldr	r3, [pc, #80]	; (16680 <sw_timer_init+0x94>)
   1662e:	4798      	blx	r3
   16630:	0001      	movs	r1, r0
   16632:	4640      	mov	r0, r8
   16634:	4b13      	ldr	r3, [pc, #76]	; (16684 <sw_timer_init+0x98>)
   16636:	4798      	blx	r3
   16638:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1663a:	2305      	movs	r3, #5
   1663c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1663e:	782b      	ldrb	r3, [r5, #0]
   16640:	009b      	lsls	r3, r3, #2
   16642:	5999      	ldr	r1, [r3, r6]
   16644:	003a      	movs	r2, r7
   16646:	0020      	movs	r0, r4
   16648:	4b0f      	ldr	r3, [pc, #60]	; (16688 <sw_timer_init+0x9c>)
   1664a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1664c:	786a      	ldrb	r2, [r5, #1]
   1664e:	3208      	adds	r2, #8
   16650:	b2d2      	uxtb	r2, r2
   16652:	490e      	ldr	r1, [pc, #56]	; (1668c <sw_timer_init+0xa0>)
   16654:	0020      	movs	r0, r4
   16656:	4b0e      	ldr	r3, [pc, #56]	; (16690 <sw_timer_init+0xa4>)
   16658:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1665a:	7869      	ldrb	r1, [r5, #1]
   1665c:	3108      	adds	r1, #8
   1665e:	b2c9      	uxtb	r1, r1
   16660:	0020      	movs	r0, r4
   16662:	4b0c      	ldr	r3, [pc, #48]	; (16694 <sw_timer_init+0xa8>)
   16664:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   16666:	b02c      	add	sp, #176	; 0xb0
   16668:	bc04      	pop	{r2}
   1666a:	4690      	mov	r8, r2
   1666c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1666e:	46c0      	nop			; (mov r8, r8)
   16670:	0001b05c 	.word	0x0001b05c
   16674:	00011add 	.word	0x00011add
   16678:	00011839 	.word	0x00011839
   1667c:	40000400 	.word	0x40000400
   16680:	000176e9 	.word	0x000176e9
   16684:	000175d5 	.word	0x000175d5
   16688:	00011c29 	.word	0x00011c29
   1668c:	000165d1 	.word	0x000165d1
   16690:	00012035 	.word	0x00012035
   16694:	0001204d 	.word	0x0001204d

00016698 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   16698:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1669a:	2102      	movs	r1, #2
   1669c:	6893      	ldr	r3, [r2, #8]
   1669e:	4219      	tst	r1, r3
   166a0:	d1fc      	bne.n	1669c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   166a2:	6813      	ldr	r3, [r2, #0]
   166a4:	2102      	movs	r1, #2
   166a6:	430b      	orrs	r3, r1
   166a8:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   166aa:	4770      	bx	lr

000166ac <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   166ac:	b570      	push	{r4, r5, r6, lr}
   166ae:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   166b0:	7805      	ldrb	r5, [r0, #0]
   166b2:	07e8      	lsls	r0, r5, #31
   166b4:	d502      	bpl.n	166bc <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   166b6:	2001      	movs	r0, #1
   166b8:	4240      	negs	r0, r0
}
   166ba:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   166bc:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   166be:	0029      	movs	r1, r5
   166c0:	2002      	movs	r0, #2
   166c2:	4381      	bics	r1, r0
   166c4:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   166c6:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   166c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
   166ca:	0018      	movs	r0, r3
   166cc:	4b04      	ldr	r3, [pc, #16]	; (166e0 <sw_timer_register_callback+0x34>)
   166ce:	4798      	blx	r3
   166d0:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   166d2:	7823      	ldrb	r3, [r4, #0]
   166d4:	2201      	movs	r2, #1
   166d6:	4313      	orrs	r3, r2
   166d8:	7023      	strb	r3, [r4, #0]
			return index;
   166da:	2000      	movs	r0, #0
   166dc:	e7ed      	b.n	166ba <sw_timer_register_callback+0xe>
   166de:	46c0      	nop			; (mov r8, r8)
   166e0:	000175d5 	.word	0x000175d5

000166e4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   166e4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   166e6:	008b      	lsls	r3, r1, #2
   166e8:	185d      	adds	r5, r3, r1
   166ea:	00ad      	lsls	r5, r5, #2
   166ec:	5c29      	ldrb	r1, [r5, r0]
   166ee:	2602      	movs	r6, #2
   166f0:	4331      	orrs	r1, r6
   166f2:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   166f4:	1944      	adds	r4, r0, r5
   166f6:	6d41      	ldr	r1, [r0, #84]	; 0x54
   166f8:	0010      	movs	r0, r2
   166fa:	4b03      	ldr	r3, [pc, #12]	; (16708 <sw_timer_enable_callback+0x24>)
   166fc:	4798      	blx	r3
   166fe:	4b03      	ldr	r3, [pc, #12]	; (1670c <sw_timer_enable_callback+0x28>)
   16700:	681b      	ldr	r3, [r3, #0]
   16702:	18c0      	adds	r0, r0, r3
   16704:	6120      	str	r0, [r4, #16]
}
   16706:	bd70      	pop	{r4, r5, r6, pc}
   16708:	000175d5 	.word	0x000175d5
   1670c:	200008cc 	.word	0x200008cc

00016710 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   16710:	008b      	lsls	r3, r1, #2
   16712:	1859      	adds	r1, r3, r1
   16714:	0089      	lsls	r1, r1, #2
   16716:	5c0b      	ldrb	r3, [r1, r0]
   16718:	2202      	movs	r2, #2
   1671a:	4393      	bics	r3, r2
   1671c:	540b      	strb	r3, [r1, r0]
}
   1671e:	4770      	bx	lr

00016720 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   16720:	b570      	push	{r4, r5, r6, lr}
   16722:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   16724:	7803      	ldrb	r3, [r0, #0]
   16726:	07db      	lsls	r3, r3, #31
   16728:	d507      	bpl.n	1673a <sw_timer_task+0x1a>
   1672a:	7803      	ldrb	r3, [r0, #0]
   1672c:	079b      	lsls	r3, r3, #30
   1672e:	d504      	bpl.n	1673a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   16730:	4b10      	ldr	r3, [pc, #64]	; (16774 <sw_timer_task+0x54>)
   16732:	681a      	ldr	r2, [r3, #0]
   16734:	6903      	ldr	r3, [r0, #16]
   16736:	1a9b      	subs	r3, r3, r2
   16738:	d400      	bmi.n	1673c <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   1673a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1673c:	7803      	ldrb	r3, [r0, #0]
   1673e:	075b      	lsls	r3, r3, #29
   16740:	d4fb      	bmi.n	1673a <sw_timer_task+0x1a>
				handler->busy = 1;
   16742:	7803      	ldrb	r3, [r0, #0]
   16744:	2104      	movs	r1, #4
   16746:	430b      	orrs	r3, r1
   16748:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   1674a:	68c3      	ldr	r3, [r0, #12]
   1674c:	2b00      	cmp	r3, #0
   1674e:	d00b      	beq.n	16768 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   16750:	18d2      	adds	r2, r2, r3
   16752:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   16754:	68a2      	ldr	r2, [r4, #8]
   16756:	2100      	movs	r1, #0
   16758:	0020      	movs	r0, r4
   1675a:	6865      	ldr	r5, [r4, #4]
   1675c:	47a8      	blx	r5
				handler->busy = 0;
   1675e:	7823      	ldrb	r3, [r4, #0]
   16760:	2204      	movs	r2, #4
   16762:	4393      	bics	r3, r2
   16764:	7023      	strb	r3, [r4, #0]
}
   16766:	e7e8      	b.n	1673a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   16768:	7802      	ldrb	r2, [r0, #0]
   1676a:	2102      	movs	r1, #2
   1676c:	438a      	bics	r2, r1
   1676e:	7002      	strb	r2, [r0, #0]
   16770:	e7f0      	b.n	16754 <sw_timer_task+0x34>
   16772:	46c0      	nop			; (mov r8, r8)
   16774:	200008cc 	.word	0x200008cc

00016778 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   16778:	4b02      	ldr	r3, [pc, #8]	; (16784 <add_state+0xc>)
   1677a:	781a      	ldrb	r2, [r3, #0]
   1677c:	4310      	orrs	r0, r2
   1677e:	7018      	strb	r0, [r3, #0]
}
   16780:	4770      	bx	lr
   16782:	46c0      	nop			; (mov r8, r8)
   16784:	20000905 	.word	0x20000905

00016788 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16788:	b570      	push	{r4, r5, r6, lr}
   1678a:	b082      	sub	sp, #8
   1678c:	0005      	movs	r5, r0
   1678e:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   16790:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16792:	21ff      	movs	r1, #255	; 0xff
   16794:	400b      	ands	r3, r1
   16796:	000a      	movs	r2, r1
   16798:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1679a:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1679c:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1679e:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   167a0:	4001      	ands	r1, r0
   167a2:	9100      	str	r1, [sp, #0]
   167a4:	0029      	movs	r1, r5
   167a6:	4804      	ldr	r0, [pc, #16]	; (167b8 <resolve_cb+0x30>)
   167a8:	4e04      	ldr	r6, [pc, #16]	; (167bc <resolve_cb+0x34>)
   167aa:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   167ac:	0021      	movs	r1, r4
   167ae:	0028      	movs	r0, r5
   167b0:	4b03      	ldr	r3, [pc, #12]	; (167c0 <resolve_cb+0x38>)
   167b2:	4798      	blx	r3
}
   167b4:	b002      	add	sp, #8
   167b6:	bd70      	pop	{r4, r5, r6, pc}
   167b8:	0001b828 	.word	0x0001b828
   167bc:	00017b29 	.word	0x00017b29
   167c0:	0001576d 	.word	0x0001576d

000167c4 <socket_cb>:
{
   167c4:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   167c6:	4b01      	ldr	r3, [pc, #4]	; (167cc <socket_cb+0x8>)
   167c8:	4798      	blx	r3
}
   167ca:	bd10      	pop	{r4, pc}
   167cc:	00016399 	.word	0x00016399

000167d0 <start_download>:
{
   167d0:	b510      	push	{r4, lr}
   167d2:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   167d4:	4b18      	ldr	r3, [pc, #96]	; (16838 <start_download+0x68>)
   167d6:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   167d8:	07da      	lsls	r2, r3, #31
   167da:	d514      	bpl.n	16806 <start_download+0x36>
	if (!is_state_set(WIFI_CONNECTED)) {
   167dc:	079a      	lsls	r2, r3, #30
   167de:	d517      	bpl.n	16810 <start_download+0x40>
	if (is_state_set(GET_REQUESTED)) {
   167e0:	075a      	lsls	r2, r3, #29
   167e2:	d419      	bmi.n	16818 <start_download+0x48>
	if (is_state_set(DOWNLOADING)) {
   167e4:	071b      	lsls	r3, r3, #28
   167e6:	d41b      	bmi.n	16820 <start_download+0x50>
	printf("start_download: sending HTTP request...\r\n");
   167e8:	4814      	ldr	r0, [pc, #80]	; (1683c <start_download+0x6c>)
   167ea:	4b15      	ldr	r3, [pc, #84]	; (16840 <start_download+0x70>)
   167ec:	4798      	blx	r3
	if(second_file == 0){
   167ee:	4b15      	ldr	r3, [pc, #84]	; (16844 <start_download+0x74>)
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	2b00      	cmp	r3, #0
   167f4:	d018      	beq.n	16828 <start_download+0x58>
		http_client_send_request(&http_client_module_inst, PARAMS_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   167f6:	2300      	movs	r3, #0
   167f8:	9300      	str	r3, [sp, #0]
   167fa:	2201      	movs	r2, #1
   167fc:	4912      	ldr	r1, [pc, #72]	; (16848 <start_download+0x78>)
   167fe:	4813      	ldr	r0, [pc, #76]	; (1684c <start_download+0x7c>)
   16800:	4c13      	ldr	r4, [pc, #76]	; (16850 <start_download+0x80>)
   16802:	47a0      	blx	r4
   16804:	e002      	b.n	1680c <start_download+0x3c>
		printf("start_download: MMC storage not ready.\r\n");
   16806:	4813      	ldr	r0, [pc, #76]	; (16854 <start_download+0x84>)
   16808:	4b0d      	ldr	r3, [pc, #52]	; (16840 <start_download+0x70>)
   1680a:	4798      	blx	r3
}
   1680c:	b002      	add	sp, #8
   1680e:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
   16810:	4811      	ldr	r0, [pc, #68]	; (16858 <start_download+0x88>)
   16812:	4b0b      	ldr	r3, [pc, #44]	; (16840 <start_download+0x70>)
   16814:	4798      	blx	r3
		return;
   16816:	e7f9      	b.n	1680c <start_download+0x3c>
		printf("start_download: request is sent already.\r\n");
   16818:	4810      	ldr	r0, [pc, #64]	; (1685c <start_download+0x8c>)
   1681a:	4b09      	ldr	r3, [pc, #36]	; (16840 <start_download+0x70>)
   1681c:	4798      	blx	r3
		return;
   1681e:	e7f5      	b.n	1680c <start_download+0x3c>
		printf("start_download: running download already.\r\n");
   16820:	480f      	ldr	r0, [pc, #60]	; (16860 <start_download+0x90>)
   16822:	4b07      	ldr	r3, [pc, #28]	; (16840 <start_download+0x70>)
   16824:	4798      	blx	r3
		return;
   16826:	e7f1      	b.n	1680c <start_download+0x3c>
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16828:	9300      	str	r3, [sp, #0]
   1682a:	2201      	movs	r2, #1
   1682c:	490d      	ldr	r1, [pc, #52]	; (16864 <start_download+0x94>)
   1682e:	4807      	ldr	r0, [pc, #28]	; (1684c <start_download+0x7c>)
   16830:	4c07      	ldr	r4, [pc, #28]	; (16850 <start_download+0x80>)
   16832:	47a0      	blx	r4
   16834:	e7ea      	b.n	1680c <start_download+0x3c>
   16836:	46c0      	nop			; (mov r8, r8)
   16838:	20000905 	.word	0x20000905
   1683c:	0001b904 	.word	0x0001b904
   16840:	00017c45 	.word	0x00017c45
   16844:	20000fa0 	.word	0x20000fa0
   16848:	0001b974 	.word	0x0001b974
   1684c:	200016c0 	.word	0x200016c0
   16850:	00015c9d 	.word	0x00015c9d
   16854:	0001b858 	.word	0x0001b858
   16858:	0001b880 	.word	0x0001b880
   1685c:	0001b8ac 	.word	0x0001b8ac
   16860:	0001b8d8 	.word	0x0001b8d8
   16864:	0001b930 	.word	0x0001b930

00016868 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16868:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   1686a:	4b0a      	ldr	r3, [pc, #40]	; (16894 <extint_detection_callback+0x2c>)
   1686c:	681a      	ldr	r2, [r3, #0]
   1686e:	3201      	adds	r2, #1
   16870:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   16872:	681b      	ldr	r3, [r3, #0]
   16874:	2b28      	cmp	r3, #40	; 0x28
   16876:	d902      	bls.n	1687e <extint_detection_callback+0x16>
   16878:	2201      	movs	r2, #1
   1687a:	4b06      	ldr	r3, [pc, #24]	; (16894 <extint_detection_callback+0x2c>)
   1687c:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1687e:	4b05      	ldr	r3, [pc, #20]	; (16894 <extint_detection_callback+0x2c>)
   16880:	681b      	ldr	r3, [r3, #0]
   16882:	4a05      	ldr	r2, [pc, #20]	; (16898 <extint_detection_callback+0x30>)
   16884:	213f      	movs	r1, #63	; 0x3f
   16886:	4805      	ldr	r0, [pc, #20]	; (1689c <extint_detection_callback+0x34>)
   16888:	4c05      	ldr	r4, [pc, #20]	; (168a0 <extint_detection_callback+0x38>)
   1688a:	47a0      	blx	r4
	isPressed = true;
   1688c:	2201      	movs	r2, #1
   1688e:	4b05      	ldr	r3, [pc, #20]	; (168a4 <extint_detection_callback+0x3c>)
   16890:	701a      	strb	r2, [r3, #0]
	
}
   16892:	bd10      	pop	{r4, pc}
   16894:	200001fc 	.word	0x200001fc
   16898:	0001b2ec 	.word	0x0001b2ec
   1689c:	20000080 	.word	0x20000080
   168a0:	00017de9 	.word	0x00017de9
   168a4:	20000b60 	.word	0x20000b60

000168a8 <socket_resolve_handler>:
{
   168a8:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   168aa:	4b01      	ldr	r3, [pc, #4]	; (168b0 <socket_resolve_handler+0x8>)
   168ac:	4798      	blx	r3
}
   168ae:	bd10      	pop	{r4, pc}
   168b0:	00014b1d 	.word	0x00014b1d

000168b4 <socket_event_handler>:
{
   168b4:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   168b6:	4b01      	ldr	r3, [pc, #4]	; (168bc <socket_event_handler+0x8>)
   168b8:	4798      	blx	r3
}
   168ba:	bd10      	pop	{r4, pc}
   168bc:	00014b11 	.word	0x00014b11

000168c0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   168c0:	b570      	push	{r4, r5, r6, lr}
   168c2:	b082      	sub	sp, #8
   168c4:	0005      	movs	r5, r0
   168c6:	000e      	movs	r6, r1
	uint16_t temp = 0;
   168c8:	2200      	movs	r2, #0
   168ca:	466b      	mov	r3, sp
   168cc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   168ce:	4c06      	ldr	r4, [pc, #24]	; (168e8 <usart_serial_getchar+0x28>)
   168d0:	466b      	mov	r3, sp
   168d2:	1d99      	adds	r1, r3, #6
   168d4:	0028      	movs	r0, r5
   168d6:	47a0      	blx	r4
   168d8:	2800      	cmp	r0, #0
   168da:	d1f9      	bne.n	168d0 <usart_serial_getchar+0x10>

	*c = temp;
   168dc:	466b      	mov	r3, sp
   168de:	3306      	adds	r3, #6
   168e0:	881b      	ldrh	r3, [r3, #0]
   168e2:	7033      	strb	r3, [r6, #0]
}
   168e4:	b002      	add	sp, #8
   168e6:	bd70      	pop	{r4, r5, r6, pc}
   168e8:	00011005 	.word	0x00011005

000168ec <usart_serial_putchar>:
{
   168ec:	b570      	push	{r4, r5, r6, lr}
   168ee:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   168f0:	b28c      	uxth	r4, r1
   168f2:	4e03      	ldr	r6, [pc, #12]	; (16900 <usart_serial_putchar+0x14>)
   168f4:	0021      	movs	r1, r4
   168f6:	0028      	movs	r0, r5
   168f8:	47b0      	blx	r6
   168fa:	2800      	cmp	r0, #0
   168fc:	d1fa      	bne.n	168f4 <usart_serial_putchar+0x8>
}
   168fe:	bd70      	pop	{r4, r5, r6, pc}
   16900:	00010fd9 	.word	0x00010fd9

00016904 <store_file_packet>:
{
   16904:	b5f0      	push	{r4, r5, r6, r7, lr}
   16906:	b083      	sub	sp, #12
   16908:	0005      	movs	r5, r0
   1690a:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   1690c:	2800      	cmp	r0, #0
   1690e:	d010      	beq.n	16932 <store_file_packet+0x2e>
   16910:	2900      	cmp	r1, #0
   16912:	d00e      	beq.n	16932 <store_file_packet+0x2e>
	return ((down_state & mask) != 0);
   16914:	4b3b      	ldr	r3, [pc, #236]	; (16a04 <store_file_packet+0x100>)
   16916:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   16918:	071b      	lsls	r3, r3, #28
   1691a:	d432      	bmi.n	16982 <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1691c:	4b3a      	ldr	r3, [pc, #232]	; (16a08 <store_file_packet+0x104>)
   1691e:	2230      	movs	r2, #48	; 0x30
   16920:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   16922:	320a      	adds	r2, #10
   16924:	705a      	strb	r2, [r3, #1]
		if(second_file == 0){
   16926:	4b39      	ldr	r3, [pc, #228]	; (16a0c <store_file_packet+0x108>)
   16928:	781b      	ldrb	r3, [r3, #0]
   1692a:	2b00      	cmp	r3, #0
   1692c:	d067      	beq.n	169fe <store_file_packet+0xfa>
			cp = (char *)(PARAMS_HTTP_FILE_URL + strlen(PARAMS_HTTP_FILE_URL));
   1692e:	4c38      	ldr	r4, [pc, #224]	; (16a10 <store_file_packet+0x10c>)
   16930:	e005      	b.n	1693e <store_file_packet+0x3a>
		printf("store_file_packet: empty data.\r\n");
   16932:	4838      	ldr	r0, [pc, #224]	; (16a14 <store_file_packet+0x110>)
   16934:	4b38      	ldr	r3, [pc, #224]	; (16a18 <store_file_packet+0x114>)
   16936:	4798      	blx	r3
}
   16938:	b003      	add	sp, #12
   1693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   1693c:	0004      	movs	r4, r0
   1693e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   16940:	7803      	ldrb	r3, [r0, #0]
   16942:	2b2f      	cmp	r3, #47	; 0x2f
   16944:	d1fa      	bne.n	1693c <store_file_packet+0x38>
		if (strlen(cp) > 1) {
   16946:	4b35      	ldr	r3, [pc, #212]	; (16a1c <store_file_packet+0x118>)
   16948:	4798      	blx	r3
   1694a:	2801      	cmp	r0, #1
   1694c:	d92d      	bls.n	169aa <store_file_packet+0xa6>
			strcpy(&save_file_name[2], cp);
   1694e:	4f2e      	ldr	r7, [pc, #184]	; (16a08 <store_file_packet+0x104>)
   16950:	1cb8      	adds	r0, r7, #2
   16952:	0021      	movs	r1, r4
   16954:	4b32      	ldr	r3, [pc, #200]	; (16a20 <store_file_packet+0x11c>)
   16956:	4798      	blx	r3
		f_open(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16958:	22fa      	movs	r2, #250	; 0xfa
   1695a:	0039      	movs	r1, r7
   1695c:	4831      	ldr	r0, [pc, #196]	; (16a24 <store_file_packet+0x120>)
   1695e:	4c32      	ldr	r4, [pc, #200]	; (16a28 <store_file_packet+0x124>)
   16960:	47a0      	blx	r4
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   16962:	0039      	movs	r1, r7
   16964:	4831      	ldr	r0, [pc, #196]	; (16a2c <store_file_packet+0x128>)
   16966:	4b32      	ldr	r3, [pc, #200]	; (16a30 <store_file_packet+0x12c>)
   16968:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1696a:	220a      	movs	r2, #10
   1696c:	0039      	movs	r1, r7
   1696e:	482d      	ldr	r0, [pc, #180]	; (16a24 <store_file_packet+0x120>)
   16970:	47a0      	blx	r4
		if (ret != FR_OK) {
   16972:	2800      	cmp	r0, #0
   16974:	d120      	bne.n	169b8 <store_file_packet+0xb4>
		received_file_size = 0;
   16976:	2200      	movs	r2, #0
   16978:	4b2e      	ldr	r3, [pc, #184]	; (16a34 <store_file_packet+0x130>)
   1697a:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   1697c:	2008      	movs	r0, #8
   1697e:	4b2e      	ldr	r3, [pc, #184]	; (16a38 <store_file_packet+0x134>)
   16980:	4798      	blx	r3
		UINT wsize = 0;
   16982:	2300      	movs	r3, #0
   16984:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   16986:	ab01      	add	r3, sp, #4
   16988:	0032      	movs	r2, r6
   1698a:	0029      	movs	r1, r5
   1698c:	4825      	ldr	r0, [pc, #148]	; (16a24 <store_file_packet+0x120>)
   1698e:	4c2b      	ldr	r4, [pc, #172]	; (16a3c <store_file_packet+0x138>)
   16990:	47a0      	blx	r4
		if (ret != FR_OK) {
   16992:	2800      	cmp	r0, #0
   16994:	d015      	beq.n	169c2 <store_file_packet+0xbe>
			f_close(&file_object);
   16996:	4823      	ldr	r0, [pc, #140]	; (16a24 <store_file_packet+0x120>)
   16998:	4b29      	ldr	r3, [pc, #164]	; (16a40 <store_file_packet+0x13c>)
   1699a:	4798      	blx	r3
			add_state(CANCELED);
   1699c:	2020      	movs	r0, #32
   1699e:	4b26      	ldr	r3, [pc, #152]	; (16a38 <store_file_packet+0x134>)
   169a0:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   169a2:	4828      	ldr	r0, [pc, #160]	; (16a44 <store_file_packet+0x140>)
   169a4:	4b1c      	ldr	r3, [pc, #112]	; (16a18 <store_file_packet+0x114>)
   169a6:	4798      	blx	r3
			return;
   169a8:	e7c6      	b.n	16938 <store_file_packet+0x34>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   169aa:	4827      	ldr	r0, [pc, #156]	; (16a48 <store_file_packet+0x144>)
   169ac:	4b1a      	ldr	r3, [pc, #104]	; (16a18 <store_file_packet+0x114>)
   169ae:	4798      	blx	r3
			add_state(CANCELED);
   169b0:	2020      	movs	r0, #32
   169b2:	4b21      	ldr	r3, [pc, #132]	; (16a38 <store_file_packet+0x134>)
   169b4:	4798      	blx	r3
			return;
   169b6:	e7bf      	b.n	16938 <store_file_packet+0x34>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   169b8:	0001      	movs	r1, r0
   169ba:	4824      	ldr	r0, [pc, #144]	; (16a4c <store_file_packet+0x148>)
   169bc:	4b1c      	ldr	r3, [pc, #112]	; (16a30 <store_file_packet+0x12c>)
   169be:	4798      	blx	r3
			return;
   169c0:	e7ba      	b.n	16938 <store_file_packet+0x34>
		received_file_size += wsize;
   169c2:	4c1c      	ldr	r4, [pc, #112]	; (16a34 <store_file_packet+0x130>)
   169c4:	6823      	ldr	r3, [r4, #0]
   169c6:	9a01      	ldr	r2, [sp, #4]
   169c8:	4694      	mov	ip, r2
   169ca:	4463      	add	r3, ip
   169cc:	0019      	movs	r1, r3
   169ce:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   169d0:	4d1f      	ldr	r5, [pc, #124]	; (16a50 <store_file_packet+0x14c>)
   169d2:	682a      	ldr	r2, [r5, #0]
   169d4:	481f      	ldr	r0, [pc, #124]	; (16a54 <store_file_packet+0x150>)
   169d6:	4b16      	ldr	r3, [pc, #88]	; (16a30 <store_file_packet+0x12c>)
   169d8:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   169da:	6822      	ldr	r2, [r4, #0]
   169dc:	682b      	ldr	r3, [r5, #0]
   169de:	429a      	cmp	r2, r3
   169e0:	d3aa      	bcc.n	16938 <store_file_packet+0x34>
			f_close(&file_object);
   169e2:	4810      	ldr	r0, [pc, #64]	; (16a24 <store_file_packet+0x120>)
   169e4:	4b16      	ldr	r3, [pc, #88]	; (16a40 <store_file_packet+0x13c>)
   169e6:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   169e8:	481b      	ldr	r0, [pc, #108]	; (16a58 <store_file_packet+0x154>)
   169ea:	4b0b      	ldr	r3, [pc, #44]	; (16a18 <store_file_packet+0x114>)
   169ec:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   169ee:	2280      	movs	r2, #128	; 0x80
   169f0:	0412      	lsls	r2, r2, #16
   169f2:	4b1a      	ldr	r3, [pc, #104]	; (16a5c <store_file_packet+0x158>)
   169f4:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   169f6:	2010      	movs	r0, #16
   169f8:	4b0f      	ldr	r3, [pc, #60]	; (16a38 <store_file_packet+0x134>)
   169fa:	4798      	blx	r3
			return;
   169fc:	e79c      	b.n	16938 <store_file_packet+0x34>
			cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   169fe:	4c18      	ldr	r4, [pc, #96]	; (16a60 <store_file_packet+0x15c>)
   16a00:	e79d      	b.n	1693e <store_file_packet+0x3a>
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	20000905 	.word	0x20000905
   16a08:	20000100 	.word	0x20000100
   16a0c:	20000fa0 	.word	0x20000fa0
   16a10:	0001b9b2 	.word	0x0001b9b2
   16a14:	0001b9b4 	.word	0x0001b9b4
   16a18:	00017c45 	.word	0x00017c45
   16a1c:	00017f27 	.word	0x00017f27
   16a20:	00017edb 	.word	0x00017edb
   16a24:	20000b38 	.word	0x20000b38
   16a28:	000138dd 	.word	0x000138dd
   16a2c:	0001b9d4 	.word	0x0001b9d4
   16a30:	00017b29 	.word	0x00017b29
   16a34:	20000f9c 	.word	0x20000f9c
   16a38:	00016779 	.word	0x00016779
   16a3c:	00013c19 	.word	0x00013c19
   16a40:	00013edd 	.word	0x00013edd
   16a44:	0001ba70 	.word	0x0001ba70
   16a48:	0001b9fc 	.word	0x0001b9fc
   16a4c:	0001ba3c 	.word	0x0001ba3c
   16a50:	20000b5c 	.word	0x20000b5c
   16a54:	0001baac 	.word	0x0001baac
   16a58:	0001bae0 	.word	0x0001bae0
   16a5c:	41004400 	.word	0x41004400
   16a60:	0001b971 	.word	0x0001b971

00016a64 <mqtt_callback>:
{
   16a64:	b570      	push	{r4, r5, r6, lr}
   16a66:	b086      	sub	sp, #24
   16a68:	0004      	movs	r4, r0
	switch (type) {
   16a6a:	2901      	cmp	r1, #1
   16a6c:	d02c      	beq.n	16ac8 <mqtt_callback+0x64>
   16a6e:	2905      	cmp	r1, #5
   16a70:	d04f      	beq.n	16b12 <mqtt_callback+0xae>
   16a72:	2900      	cmp	r1, #0
   16a74:	d001      	beq.n	16a7a <mqtt_callback+0x16>
}
   16a76:	b006      	add	sp, #24
   16a78:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   16a7a:	6813      	ldr	r3, [r2, #0]
   16a7c:	2b00      	cmp	r3, #0
   16a7e:	db19      	blt.n	16ab4 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   16a80:	4829      	ldr	r0, [pc, #164]	; (16b28 <mqtt_callback+0xc4>)
   16a82:	4b2a      	ldr	r3, [pc, #168]	; (16b2c <mqtt_callback+0xc8>)
   16a84:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   16a86:	4a2a      	ldr	r2, [pc, #168]	; (16b30 <mqtt_callback+0xcc>)
   16a88:	2300      	movs	r3, #0
   16a8a:	9305      	str	r3, [sp, #20]
   16a8c:	9304      	str	r3, [sp, #16]
   16a8e:	9303      	str	r3, [sp, #12]
   16a90:	9302      	str	r3, [sp, #8]
   16a92:	9301      	str	r3, [sp, #4]
   16a94:	9200      	str	r2, [sp, #0]
   16a96:	4b27      	ldr	r3, [pc, #156]	; (16b34 <mqtt_callback+0xd0>)
   16a98:	2101      	movs	r1, #1
   16a9a:	0020      	movs	r0, r4
   16a9c:	4c26      	ldr	r4, [pc, #152]	; (16b38 <mqtt_callback+0xd4>)
   16a9e:	47a0      	blx	r4
   16aa0:	2800      	cmp	r0, #0
   16aa2:	d003      	beq.n	16aac <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   16aa4:	4825      	ldr	r0, [pc, #148]	; (16b3c <mqtt_callback+0xd8>)
   16aa6:	4b26      	ldr	r3, [pc, #152]	; (16b40 <mqtt_callback+0xdc>)
   16aa8:	4798      	blx	r3
   16aaa:	e7e4      	b.n	16a76 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   16aac:	4825      	ldr	r0, [pc, #148]	; (16b44 <mqtt_callback+0xe0>)
   16aae:	4b24      	ldr	r3, [pc, #144]	; (16b40 <mqtt_callback+0xdc>)
   16ab0:	4798      	blx	r3
   16ab2:	e7e0      	b.n	16a76 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16ab4:	4d24      	ldr	r5, [pc, #144]	; (16b48 <mqtt_callback+0xe4>)
   16ab6:	0029      	movs	r1, r5
   16ab8:	4824      	ldr	r0, [pc, #144]	; (16b4c <mqtt_callback+0xe8>)
   16aba:	4b1c      	ldr	r3, [pc, #112]	; (16b2c <mqtt_callback+0xc8>)
   16abc:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16abe:	0029      	movs	r1, r5
   16ac0:	0020      	movs	r0, r4
   16ac2:	4b23      	ldr	r3, [pc, #140]	; (16b50 <mqtt_callback+0xec>)
   16ac4:	4798      	blx	r3
   16ac6:	e7d6      	b.n	16a76 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16ac8:	7811      	ldrb	r1, [r2, #0]
   16aca:	2900      	cmp	r1, #0
   16acc:	d11d      	bne.n	16b0a <mqtt_callback+0xa6>
			mqtt_subscribe(module_inst, BATTERY_TOPIC, 2, SubscribeHandler);
   16ace:	4e21      	ldr	r6, [pc, #132]	; (16b54 <mqtt_callback+0xf0>)
   16ad0:	0033      	movs	r3, r6
   16ad2:	2202      	movs	r2, #2
   16ad4:	4920      	ldr	r1, [pc, #128]	; (16b58 <mqtt_callback+0xf4>)
   16ad6:	4d21      	ldr	r5, [pc, #132]	; (16b5c <mqtt_callback+0xf8>)
   16ad8:	47a8      	blx	r5
			mqtt_subscribe(module_inst, OTAFU_TOPIC, 2, SubscribeHandler);
   16ada:	0033      	movs	r3, r6
   16adc:	2202      	movs	r2, #2
   16ade:	4920      	ldr	r1, [pc, #128]	; (16b60 <mqtt_callback+0xfc>)
   16ae0:	0020      	movs	r0, r4
   16ae2:	47a8      	blx	r5
			mqtt_subscribe(module_inst, SCHEDULE_DAY_TOPIC, 2, SubscribeHandler);
   16ae4:	0033      	movs	r3, r6
   16ae6:	2202      	movs	r2, #2
   16ae8:	491e      	ldr	r1, [pc, #120]	; (16b64 <mqtt_callback+0x100>)
   16aea:	0020      	movs	r0, r4
   16aec:	47a8      	blx	r5
			mqtt_subscribe(module_inst, SCHEDULE_WEEK_TOPIC, 2, SubscribeHandler);
   16aee:	0033      	movs	r3, r6
   16af0:	2202      	movs	r2, #2
   16af2:	491d      	ldr	r1, [pc, #116]	; (16b68 <mqtt_callback+0x104>)
   16af4:	0020      	movs	r0, r4
   16af6:	47a8      	blx	r5
			mqtt_subscribe(module_inst, AUTHENTICATION_TOPIC, 2, SubscribeHandler);
   16af8:	0033      	movs	r3, r6
   16afa:	2202      	movs	r2, #2
   16afc:	491b      	ldr	r1, [pc, #108]	; (16b6c <mqtt_callback+0x108>)
   16afe:	0020      	movs	r0, r4
   16b00:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   16b02:	481b      	ldr	r0, [pc, #108]	; (16b70 <mqtt_callback+0x10c>)
   16b04:	4b0e      	ldr	r3, [pc, #56]	; (16b40 <mqtt_callback+0xdc>)
   16b06:	4798      	blx	r3
   16b08:	e7b5      	b.n	16a76 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16b0a:	481a      	ldr	r0, [pc, #104]	; (16b74 <mqtt_callback+0x110>)
   16b0c:	4b07      	ldr	r3, [pc, #28]	; (16b2c <mqtt_callback+0xc8>)
   16b0e:	4798      	blx	r3
   16b10:	e7b1      	b.n	16a76 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   16b12:	4819      	ldr	r0, [pc, #100]	; (16b78 <mqtt_callback+0x114>)
   16b14:	4b0a      	ldr	r3, [pc, #40]	; (16b40 <mqtt_callback+0xdc>)
   16b16:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   16b18:	4918      	ldr	r1, [pc, #96]	; (16b7c <mqtt_callback+0x118>)
   16b1a:	2231      	movs	r2, #49	; 0x31
   16b1c:	5c8b      	ldrb	r3, [r1, r2]
   16b1e:	2002      	movs	r0, #2
   16b20:	4383      	bics	r3, r0
   16b22:	548b      	strb	r3, [r1, r2]
}
   16b24:	e7a7      	b.n	16a76 <mqtt_callback+0x12>
   16b26:	46c0      	nop			; (mov r8, r8)
   16b28:	0001b6e8 	.word	0x0001b6e8
   16b2c:	00017b29 	.word	0x00017b29
   16b30:	0001b714 	.word	0x0001b714
   16b34:	0001b704 	.word	0x0001b704
   16b38:	00014b55 	.word	0x00014b55
   16b3c:	0001b720 	.word	0x0001b720
   16b40:	00017c45 	.word	0x00017c45
   16b44:	0001b748 	.word	0x0001b748
   16b48:	0001b6d0 	.word	0x0001b6d0
   16b4c:	0001b764 	.word	0x0001b764
   16b50:	00014b29 	.word	0x00014b29
   16b54:	00016fc9 	.word	0x00016fc9
   16b58:	000197f4 	.word	0x000197f4
   16b5c:	00014cb5 	.word	0x00014cb5
   16b60:	0001b79c 	.word	0x0001b79c
   16b64:	0001b7a4 	.word	0x0001b7a4
   16b68:	0001b7b4 	.word	0x0001b7b4
   16b6c:	0001b7c4 	.word	0x0001b7c4
   16b70:	0001b7d0 	.word	0x0001b7d0
   16b74:	0001b7e0 	.word	0x0001b7e0
   16b78:	0001b814 	.word	0x0001b814
   16b7c:	200008d0 	.word	0x200008d0

00016b80 <http_client_callback>:
{
   16b80:	b510      	push	{r4, lr}
   16b82:	0014      	movs	r4, r2
	switch (type) {
   16b84:	2904      	cmp	r1, #4
   16b86:	d806      	bhi.n	16b96 <http_client_callback+0x16>
   16b88:	0089      	lsls	r1, r1, #2
   16b8a:	4b2a      	ldr	r3, [pc, #168]	; (16c34 <http_client_callback+0xb4>)
   16b8c:	585b      	ldr	r3, [r3, r1]
   16b8e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16b90:	4829      	ldr	r0, [pc, #164]	; (16c38 <http_client_callback+0xb8>)
   16b92:	4b2a      	ldr	r3, [pc, #168]	; (16c3c <http_client_callback+0xbc>)
   16b94:	4798      	blx	r3
}
   16b96:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   16b98:	4829      	ldr	r0, [pc, #164]	; (16c40 <http_client_callback+0xc0>)
   16b9a:	4b28      	ldr	r3, [pc, #160]	; (16c3c <http_client_callback+0xbc>)
   16b9c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   16b9e:	2004      	movs	r0, #4
   16ba0:	4b28      	ldr	r3, [pc, #160]	; (16c44 <http_client_callback+0xc4>)
   16ba2:	4798      	blx	r3
		break;
   16ba4:	e7f7      	b.n	16b96 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   16ba6:	8811      	ldrh	r1, [r2, #0]
   16ba8:	6852      	ldr	r2, [r2, #4]
   16baa:	4827      	ldr	r0, [pc, #156]	; (16c48 <http_client_callback+0xc8>)
   16bac:	4b27      	ldr	r3, [pc, #156]	; (16c4c <http_client_callback+0xcc>)
   16bae:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   16bb0:	8823      	ldrh	r3, [r4, #0]
   16bb2:	2bc8      	cmp	r3, #200	; 0xc8
   16bb4:	d10f      	bne.n	16bd6 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   16bb6:	6861      	ldr	r1, [r4, #4]
   16bb8:	4b25      	ldr	r3, [pc, #148]	; (16c50 <http_client_callback+0xd0>)
   16bba:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   16bbc:	2200      	movs	r2, #0
   16bbe:	4b25      	ldr	r3, [pc, #148]	; (16c54 <http_client_callback+0xd4>)
   16bc0:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16bc2:	4b25      	ldr	r3, [pc, #148]	; (16c58 <http_client_callback+0xd8>)
   16bc4:	4299      	cmp	r1, r3
   16bc6:	d8e6      	bhi.n	16b96 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16bc8:	68a0      	ldr	r0, [r4, #8]
   16bca:	4b24      	ldr	r3, [pc, #144]	; (16c5c <http_client_callback+0xdc>)
   16bcc:	4798      	blx	r3
			add_state(COMPLETED);
   16bce:	2010      	movs	r0, #16
   16bd0:	4b1c      	ldr	r3, [pc, #112]	; (16c44 <http_client_callback+0xc4>)
   16bd2:	4798      	blx	r3
   16bd4:	e7df      	b.n	16b96 <http_client_callback+0x16>
			add_state(CANCELED);
   16bd6:	2020      	movs	r0, #32
   16bd8:	4b1a      	ldr	r3, [pc, #104]	; (16c44 <http_client_callback+0xc4>)
   16bda:	4798      	blx	r3
			return;
   16bdc:	e7db      	b.n	16b96 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16bde:	6811      	ldr	r1, [r2, #0]
   16be0:	6850      	ldr	r0, [r2, #4]
   16be2:	4b1e      	ldr	r3, [pc, #120]	; (16c5c <http_client_callback+0xdc>)
   16be4:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   16be6:	7a23      	ldrb	r3, [r4, #8]
   16be8:	2b00      	cmp	r3, #0
   16bea:	d0d4      	beq.n	16b96 <http_client_callback+0x16>
			add_state(COMPLETED);
   16bec:	2010      	movs	r0, #16
   16bee:	4b15      	ldr	r3, [pc, #84]	; (16c44 <http_client_callback+0xc4>)
   16bf0:	4798      	blx	r3
   16bf2:	e7d0      	b.n	16b96 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16bf4:	6811      	ldr	r1, [r2, #0]
   16bf6:	481a      	ldr	r0, [pc, #104]	; (16c60 <http_client_callback+0xe0>)
   16bf8:	4b14      	ldr	r3, [pc, #80]	; (16c4c <http_client_callback+0xcc>)
   16bfa:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   16bfc:	6823      	ldr	r3, [r4, #0]
   16bfe:	330b      	adds	r3, #11
   16c00:	d1c9      	bne.n	16b96 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   16c02:	4b18      	ldr	r3, [pc, #96]	; (16c64 <http_client_callback+0xe4>)
   16c04:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   16c06:	071b      	lsls	r3, r3, #28
   16c08:	d406      	bmi.n	16c18 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   16c0a:	4b16      	ldr	r3, [pc, #88]	; (16c64 <http_client_callback+0xe4>)
   16c0c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16c0e:	075a      	lsls	r2, r3, #29
   16c10:	d40b      	bmi.n	16c2a <http_client_callback+0xaa>
			start_download();
   16c12:	4b15      	ldr	r3, [pc, #84]	; (16c68 <http_client_callback+0xe8>)
   16c14:	4798      	blx	r3
   16c16:	e7be      	b.n	16b96 <http_client_callback+0x16>
				f_close(&file_object);
   16c18:	4814      	ldr	r0, [pc, #80]	; (16c6c <http_client_callback+0xec>)
   16c1a:	4b15      	ldr	r3, [pc, #84]	; (16c70 <http_client_callback+0xf0>)
   16c1c:	4798      	blx	r3
	down_state &= ~mask;
   16c1e:	4a11      	ldr	r2, [pc, #68]	; (16c64 <http_client_callback+0xe4>)
   16c20:	7813      	ldrb	r3, [r2, #0]
   16c22:	2108      	movs	r1, #8
   16c24:	438b      	bics	r3, r1
   16c26:	7013      	strb	r3, [r2, #0]
   16c28:	e7ef      	b.n	16c0a <http_client_callback+0x8a>
   16c2a:	2204      	movs	r2, #4
   16c2c:	4393      	bics	r3, r2
   16c2e:	4a0d      	ldr	r2, [pc, #52]	; (16c64 <http_client_callback+0xe4>)
   16c30:	7013      	strb	r3, [r2, #0]
   16c32:	e7ee      	b.n	16c12 <http_client_callback+0x92>
   16c34:	0001b068 	.word	0x0001b068
   16c38:	0001b300 	.word	0x0001b300
   16c3c:	00017c45 	.word	0x00017c45
   16c40:	0001b338 	.word	0x0001b338
   16c44:	00016779 	.word	0x00016779
   16c48:	0001b364 	.word	0x0001b364
   16c4c:	00017b29 	.word	0x00017b29
   16c50:	20000b5c 	.word	0x20000b5c
   16c54:	20000f9c 	.word	0x20000f9c
   16c58:	000005a6 	.word	0x000005a6
   16c5c:	00016905 	.word	0x00016905
   16c60:	0001b3a0 	.word	0x0001b3a0
   16c64:	20000905 	.word	0x20000905
   16c68:	000167d1 	.word	0x000167d1
   16c6c:	20000b38 	.word	0x20000b38
   16c70:	00013edd 	.word	0x00013edd

00016c74 <wifi_cb>:
{
   16c74:	b510      	push	{r4, lr}
   16c76:	b082      	sub	sp, #8
	switch (u8MsgType) {
   16c78:	282c      	cmp	r0, #44	; 0x2c
   16c7a:	d003      	beq.n	16c84 <wifi_cb+0x10>
   16c7c:	2832      	cmp	r0, #50	; 0x32
   16c7e:	d035      	beq.n	16cec <wifi_cb+0x78>
}
   16c80:	b002      	add	sp, #8
   16c82:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16c84:	780b      	ldrb	r3, [r1, #0]
   16c86:	2b01      	cmp	r3, #1
   16c88:	d01c      	beq.n	16cc4 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d1f8      	bne.n	16c80 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16c8e:	4826      	ldr	r0, [pc, #152]	; (16d28 <wifi_cb+0xb4>)
   16c90:	4b26      	ldr	r3, [pc, #152]	; (16d2c <wifi_cb+0xb8>)
   16c92:	4798      	blx	r3
	down_state &= ~mask;
   16c94:	4a26      	ldr	r2, [pc, #152]	; (16d30 <wifi_cb+0xbc>)
   16c96:	7813      	ldrb	r3, [r2, #0]
   16c98:	2102      	movs	r1, #2
   16c9a:	438b      	bics	r3, r1
   16c9c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   16c9e:	071b      	lsls	r3, r3, #28
   16ca0:	d416      	bmi.n	16cd0 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   16ca2:	4b23      	ldr	r3, [pc, #140]	; (16d30 <wifi_cb+0xbc>)
   16ca4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16ca6:	075a      	lsls	r2, r3, #29
   16ca8:	d41b      	bmi.n	16ce2 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
   16caa:	2101      	movs	r1, #1
   16cac:	4821      	ldr	r0, [pc, #132]	; (16d34 <wifi_cb+0xc0>)
   16cae:	4b22      	ldr	r3, [pc, #136]	; (16d38 <wifi_cb+0xc4>)
   16cb0:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16cb2:	23ff      	movs	r3, #255	; 0xff
   16cb4:	9300      	str	r3, [sp, #0]
   16cb6:	4b21      	ldr	r3, [pc, #132]	; (16d3c <wifi_cb+0xc8>)
   16cb8:	2202      	movs	r2, #2
   16cba:	2112      	movs	r1, #18
   16cbc:	4820      	ldr	r0, [pc, #128]	; (16d40 <wifi_cb+0xcc>)
   16cbe:	4c21      	ldr	r4, [pc, #132]	; (16d44 <wifi_cb+0xd0>)
   16cc0:	47a0      	blx	r4
   16cc2:	e7dd      	b.n	16c80 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16cc4:	4820      	ldr	r0, [pc, #128]	; (16d48 <wifi_cb+0xd4>)
   16cc6:	4b19      	ldr	r3, [pc, #100]	; (16d2c <wifi_cb+0xb8>)
   16cc8:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   16cca:	4b20      	ldr	r3, [pc, #128]	; (16d4c <wifi_cb+0xd8>)
   16ccc:	4798      	blx	r3
   16cce:	e7d7      	b.n	16c80 <wifi_cb+0xc>
				f_close(&file_object);
   16cd0:	481f      	ldr	r0, [pc, #124]	; (16d50 <wifi_cb+0xdc>)
   16cd2:	4b20      	ldr	r3, [pc, #128]	; (16d54 <wifi_cb+0xe0>)
   16cd4:	4798      	blx	r3
	down_state &= ~mask;
   16cd6:	4a16      	ldr	r2, [pc, #88]	; (16d30 <wifi_cb+0xbc>)
   16cd8:	7813      	ldrb	r3, [r2, #0]
   16cda:	2108      	movs	r1, #8
   16cdc:	438b      	bics	r3, r1
   16cde:	7013      	strb	r3, [r2, #0]
   16ce0:	e7df      	b.n	16ca2 <wifi_cb+0x2e>
   16ce2:	2204      	movs	r2, #4
   16ce4:	4393      	bics	r3, r2
   16ce6:	4a12      	ldr	r2, [pc, #72]	; (16d30 <wifi_cb+0xbc>)
   16ce8:	7013      	strb	r3, [r2, #0]
   16cea:	e7de      	b.n	16caa <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16cec:	788b      	ldrb	r3, [r1, #2]
   16cee:	784a      	ldrb	r2, [r1, #1]
   16cf0:	7808      	ldrb	r0, [r1, #0]
   16cf2:	78c9      	ldrb	r1, [r1, #3]
   16cf4:	9100      	str	r1, [sp, #0]
   16cf6:	0001      	movs	r1, r0
   16cf8:	4817      	ldr	r0, [pc, #92]	; (16d58 <wifi_cb+0xe4>)
   16cfa:	4c18      	ldr	r4, [pc, #96]	; (16d5c <wifi_cb+0xe8>)
   16cfc:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   16cfe:	2002      	movs	r0, #2
   16d00:	4b17      	ldr	r3, [pc, #92]	; (16d60 <wifi_cb+0xec>)
   16d02:	4798      	blx	r3
		if(do_download_flag == 1)
   16d04:	4b17      	ldr	r3, [pc, #92]	; (16d64 <wifi_cb+0xf0>)
   16d06:	781b      	ldrb	r3, [r3, #0]
   16d08:	2b01      	cmp	r3, #1
   16d0a:	d009      	beq.n	16d20 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16d0c:	4916      	ldr	r1, [pc, #88]	; (16d68 <wifi_cb+0xf4>)
   16d0e:	4809      	ldr	r0, [pc, #36]	; (16d34 <wifi_cb+0xc0>)
   16d10:	4b16      	ldr	r3, [pc, #88]	; (16d6c <wifi_cb+0xf8>)
   16d12:	4798      	blx	r3
   16d14:	2800      	cmp	r0, #0
   16d16:	d0b3      	beq.n	16c80 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   16d18:	4815      	ldr	r0, [pc, #84]	; (16d70 <wifi_cb+0xfc>)
   16d1a:	4b04      	ldr	r3, [pc, #16]	; (16d2c <wifi_cb+0xb8>)
   16d1c:	4798      	blx	r3
}
   16d1e:	e7af      	b.n	16c80 <wifi_cb+0xc>
			start_download();
   16d20:	4b14      	ldr	r3, [pc, #80]	; (16d74 <wifi_cb+0x100>)
   16d22:	4798      	blx	r3
   16d24:	e7ac      	b.n	16c80 <wifi_cb+0xc>
   16d26:	46c0      	nop			; (mov r8, r8)
   16d28:	0001bb34 	.word	0x0001bb34
   16d2c:	00017c45 	.word	0x00017c45
   16d30:	20000905 	.word	0x20000905
   16d34:	20000b64 	.word	0x20000b64
   16d38:	00014bed 	.word	0x00014bed
   16d3c:	0001bb54 	.word	0x0001bb54
   16d40:	0001bb64 	.word	0x0001bb64
   16d44:	0000dd99 	.word	0x0000dd99
   16d48:	0001bb14 	.word	0x0001bb14
   16d4c:	0000ddb5 	.word	0x0000ddb5
   16d50:	20000b38 	.word	0x20000b38
   16d54:	00013edd 	.word	0x00013edd
   16d58:	0001bb78 	.word	0x0001bb78
   16d5c:	00017b29 	.word	0x00017b29
   16d60:	00016779 	.word	0x00016779
   16d64:	20000904 	.word	0x20000904
   16d68:	0001b6d0 	.word	0x0001b6d0
   16d6c:	00014b29 	.word	0x00014b29
   16d70:	0001bba0 	.word	0x0001bba0
   16d74:	000167d1 	.word	0x000167d1

00016d78 <configure_extint_channel>:
{
   16d78:	b510      	push	{r4, lr}
   16d7a:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   16d7c:	ac01      	add	r4, sp, #4
   16d7e:	0020      	movs	r0, r4
   16d80:	4b07      	ldr	r3, [pc, #28]	; (16da0 <configure_extint_channel+0x28>)
   16d82:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   16d84:	2337      	movs	r3, #55	; 0x37
   16d86:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   16d88:	2300      	movs	r3, #0
   16d8a:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   16d8c:	3301      	adds	r3, #1
   16d8e:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16d90:	3301      	adds	r3, #1
   16d92:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16d94:	0021      	movs	r1, r4
   16d96:	2007      	movs	r0, #7
   16d98:	4b02      	ldr	r3, [pc, #8]	; (16da4 <configure_extint_channel+0x2c>)
   16d9a:	4798      	blx	r3
}
   16d9c:	b004      	add	sp, #16
   16d9e:	bd10      	pop	{r4, pc}
   16da0:	0000fe71 	.word	0x0000fe71
   16da4:	0000fe85 	.word	0x0000fe85

00016da8 <configure_extint_callbacks>:
{
   16da8:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   16daa:	2200      	movs	r2, #0
   16dac:	2107      	movs	r1, #7
   16dae:	4804      	ldr	r0, [pc, #16]	; (16dc0 <configure_extint_callbacks+0x18>)
   16db0:	4b04      	ldr	r3, [pc, #16]	; (16dc4 <configure_extint_callbacks+0x1c>)
   16db2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   16db4:	2100      	movs	r1, #0
   16db6:	2007      	movs	r0, #7
   16db8:	4b03      	ldr	r3, [pc, #12]	; (16dc8 <configure_extint_callbacks+0x20>)
   16dba:	4798      	blx	r3
}
   16dbc:	bd10      	pop	{r4, pc}
   16dbe:	46c0      	nop			; (mov r8, r8)
   16dc0:	00016869 	.word	0x00016869
   16dc4:	0000fd2d 	.word	0x0000fd2d
   16dc8:	0000fd59 	.word	0x0000fd59

00016dcc <check_crc>:
* @param[in]    void
* @return       uint8_t : 0 if failed 1 if successful 

**/
uint8_t check_crc()
{
   16dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dce:	b0bb      	sub	sp, #236	; 0xec
		
	setLogLevel(LOG_INFO_LVL);
   16dd0:	2000      	movs	r0, #0
   16dd2:	4b66      	ldr	r3, [pc, #408]	; (16f6c <check_crc+0x1a0>)
   16dd4:	4798      	blx	r3
	char firmware_file_name[] = "0:app.bin";
   16dd6:	a937      	add	r1, sp, #220	; 0xdc
   16dd8:	4b65      	ldr	r3, [pc, #404]	; (16f70 <check_crc+0x1a4>)
   16dda:	000a      	movs	r2, r1
   16ddc:	cb11      	ldmia	r3!, {r0, r4}
   16dde:	c211      	stmia	r2!, {r0, r4}
   16de0:	881b      	ldrh	r3, [r3, #0]
   16de2:	8013      	strh	r3, [r2, #0]
	FIL firmware_file;
	FRESULT res;
	uint32_t page_size = 64;		//Number of bytes per page --//page size is 64 bytes
	char block[page_size];
	uint32_t br;
	crc32_t crc_calculated=0;
   16de4:	2300      	movs	r3, #0
   16de6:	932c      	str	r3, [sp, #176]	; 0xb0
	
	res = f_open(&firmware_file, (char const *)firmware_file_name, FA_READ);
   16de8:	2201      	movs	r2, #1
   16dea:	a82e      	add	r0, sp, #184	; 0xb8
   16dec:	4b61      	ldr	r3, [pc, #388]	; (16f74 <check_crc+0x1a8>)
   16dee:	4798      	blx	r3
	if (res != FR_OK) {
   16df0:	2800      	cmp	r0, #0
   16df2:	d121      	bne.n	16e38 <check_crc+0x6c>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
		//set result to -1, file not read correctly
	}
	uint32_t total_pages = firmware_file.fsize / page_size;
   16df4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   16df6:	9301      	str	r3, [sp, #4]
   16df8:	099d      	lsrs	r5, r3, #6
	LogMessage(LOG_INFO_LVL ,"total_pages: %d\r\n", total_pages);
   16dfa:	4c5f      	ldr	r4, [pc, #380]	; (16f78 <check_crc+0x1ac>)
   16dfc:	002a      	movs	r2, r5
   16dfe:	0021      	movs	r1, r4
   16e00:	2000      	movs	r0, #0
   16e02:	4e5e      	ldr	r6, [pc, #376]	; (16f7c <check_crc+0x1b0>)
   16e04:	47b0      	blx	r6
	LogMessage(LOG_INFO_LVL ,"total_pages: %d\r\n", firmware_file.fsize / page_size);
   16e06:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   16e08:	0992      	lsrs	r2, r2, #6
   16e0a:	0021      	movs	r1, r4
   16e0c:	2000      	movs	r0, #0
   16e0e:	47b0      	blx	r6
	for (uint32_t i = 0 ; i < total_pages ; i++)
   16e10:	2d00      	cmp	r5, #0
   16e12:	d01d      	beq.n	16e50 <check_crc+0x84>
   16e14:	2400      	movs	r4, #0
	{
						
		res = f_read (&firmware_file,block, page_size, &br);
   16e16:	4e5a      	ldr	r6, [pc, #360]	; (16f80 <check_crc+0x1b4>)
		if (res != FR_OK) {
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
				break;
		}
		res = crc32_recalculate(block,page_size,&crc_calculated);
   16e18:	4f5a      	ldr	r7, [pc, #360]	; (16f84 <check_crc+0x1b8>)
		res = f_read (&firmware_file,block, page_size, &br);
   16e1a:	ab2d      	add	r3, sp, #180	; 0xb4
   16e1c:	2240      	movs	r2, #64	; 0x40
   16e1e:	a902      	add	r1, sp, #8
   16e20:	a82e      	add	r0, sp, #184	; 0xb8
   16e22:	47b0      	blx	r6
		if (res != FR_OK) {
   16e24:	2800      	cmp	r0, #0
   16e26:	d10d      	bne.n	16e44 <check_crc+0x78>
		res = crc32_recalculate(block,page_size,&crc_calculated);
   16e28:	aa2c      	add	r2, sp, #176	; 0xb0
   16e2a:	2140      	movs	r1, #64	; 0x40
   16e2c:	a802      	add	r0, sp, #8
   16e2e:	47b8      	blx	r7
	for (uint32_t i = 0 ; i < total_pages ; i++)
   16e30:	3401      	adds	r4, #1
   16e32:	42a5      	cmp	r5, r4
   16e34:	d1f1      	bne.n	16e1a <check_crc+0x4e>
   16e36:	e00b      	b.n	16e50 <check_crc+0x84>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
   16e38:	0002      	movs	r2, r0
   16e3a:	4953      	ldr	r1, [pc, #332]	; (16f88 <check_crc+0x1bc>)
   16e3c:	2000      	movs	r0, #0
   16e3e:	4b4f      	ldr	r3, [pc, #316]	; (16f7c <check_crc+0x1b0>)
   16e40:	4798      	blx	r3
   16e42:	e7d7      	b.n	16df4 <check_crc+0x28>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
   16e44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   16e46:	0002      	movs	r2, r0
   16e48:	4950      	ldr	r1, [pc, #320]	; (16f8c <check_crc+0x1c0>)
   16e4a:	2000      	movs	r0, #0
   16e4c:	4c4b      	ldr	r4, [pc, #300]	; (16f7c <check_crc+0x1b0>)
   16e4e:	47a0      	blx	r4
	}
	

	// Calculate remainder
	uint32_t remainder = (firmware_file.fsize % page_size);
   16e50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   16e52:	9301      	str	r3, [sp, #4]
   16e54:	243f      	movs	r4, #63	; 0x3f
   16e56:	401c      	ands	r4, r3
	res = f_read (&firmware_file,block, page_size, &br);
   16e58:	ab2d      	add	r3, sp, #180	; 0xb4
   16e5a:	2240      	movs	r2, #64	; 0x40
   16e5c:	a902      	add	r1, sp, #8
   16e5e:	a82e      	add	r0, sp, #184	; 0xb8
   16e60:	4d47      	ldr	r5, [pc, #284]	; (16f80 <check_crc+0x1b4>)
   16e62:	47a8      	blx	r5
	if (res != FR_OK) {
   16e64:	2800      	cmp	r0, #0
   16e66:	d159      	bne.n	16f1c <check_crc+0x150>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
		
	}

	res = crc32_recalculate(block,remainder,&crc_calculated);
   16e68:	aa2c      	add	r2, sp, #176	; 0xb0
   16e6a:	0021      	movs	r1, r4
   16e6c:	a802      	add	r0, sp, #8
   16e6e:	4b45      	ldr	r3, [pc, #276]	; (16f84 <check_crc+0x1b8>)
   16e70:	4798      	blx	r3
	
	f_close(&firmware_file);
   16e72:	a82e      	add	r0, sp, #184	; 0xb8
   16e74:	4b46      	ldr	r3, [pc, #280]	; (16f90 <check_crc+0x1c4>)
   16e76:	4798      	blx	r3
	
	char params_file_name[] = "params.csv";
   16e78:	ac29      	add	r4, sp, #164	; 0xa4
   16e7a:	4b46      	ldr	r3, [pc, #280]	; (16f94 <check_crc+0x1c8>)
   16e7c:	0022      	movs	r2, r4
   16e7e:	cb03      	ldmia	r3!, {r0, r1}
   16e80:	c203      	stmia	r2!, {r0, r1}
   16e82:	8819      	ldrh	r1, [r3, #0]
   16e84:	8011      	strh	r1, [r2, #0]
   16e86:	789b      	ldrb	r3, [r3, #2]
   16e88:	7093      	strb	r3, [r2, #2]
	FIL params_file;
	
	SerialConsoleWriteString("Opening params.csv\r\n");
   16e8a:	4843      	ldr	r0, [pc, #268]	; (16f98 <check_crc+0x1cc>)
   16e8c:	4b43      	ldr	r3, [pc, #268]	; (16f9c <check_crc+0x1d0>)
   16e8e:	4798      	blx	r3
	res = f_open(&params_file, (char const *)params_file_name, FA_READ);
   16e90:	2201      	movs	r2, #1
   16e92:	0021      	movs	r1, r4
   16e94:	a820      	add	r0, sp, #128	; 0x80
   16e96:	4b37      	ldr	r3, [pc, #220]	; (16f74 <check_crc+0x1a8>)
   16e98:	4798      	blx	r3
	if (res != FR_OK) {
   16e9a:	2800      	cmp	r0, #0
   16e9c:	d145      	bne.n	16f2a <check_crc+0x15e>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
	}

	char params[50];
	
	res = f_read (&params_file,(char const *)params, 50, &br);
   16e9e:	ab2d      	add	r3, sp, #180	; 0xb4
   16ea0:	2232      	movs	r2, #50	; 0x32
   16ea2:	a913      	add	r1, sp, #76	; 0x4c
   16ea4:	a820      	add	r0, sp, #128	; 0x80
   16ea6:	4c36      	ldr	r4, [pc, #216]	; (16f80 <check_crc+0x1b4>)
   16ea8:	47a0      	blx	r4
	if (res != FR_OK) {
   16eaa:	2800      	cmp	r0, #0
   16eac:	d143      	bne.n	16f36 <check_crc+0x16a>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
			
	}
	LogMessage(LOG_INFO_LVL ,"[Bytes read from params.csv: ] %d\r\n", br);
   16eae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   16eb0:	493b      	ldr	r1, [pc, #236]	; (16fa0 <check_crc+0x1d4>)
   16eb2:	2000      	movs	r0, #0
   16eb4:	4b31      	ldr	r3, [pc, #196]	; (16f7c <check_crc+0x1b0>)
   16eb6:	4798      	blx	r3
	
	f_close(&params_file);
   16eb8:	a820      	add	r0, sp, #128	; 0x80
   16eba:	4b35      	ldr	r3, [pc, #212]	; (16f90 <check_crc+0x1c4>)
   16ebc:	4798      	blx	r3
	

	char * flag = strtok(params, ",");
   16ebe:	4d39      	ldr	r5, [pc, #228]	; (16fa4 <check_crc+0x1d8>)
   16ec0:	0029      	movs	r1, r5
   16ec2:	a813      	add	r0, sp, #76	; 0x4c
   16ec4:	4c38      	ldr	r4, [pc, #224]	; (16fa8 <check_crc+0x1dc>)
   16ec6:	47a0      	blx	r4
	char * string_crc_from_file = strtok(NULL, ",");
   16ec8:	0029      	movs	r1, r5
   16eca:	2000      	movs	r0, #0
   16ecc:	47a0      	blx	r4
	char * useless;
	uint32_t crc_from_file = strtoul(string_crc_from_file,&useless,16);
   16ece:	2210      	movs	r2, #16
   16ed0:	a912      	add	r1, sp, #72	; 0x48
   16ed2:	4b36      	ldr	r3, [pc, #216]	; (16fac <check_crc+0x1e0>)
   16ed4:	4798      	blx	r3
	
	if(crc_calculated == crc_from_file)
   16ed6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   16ed8:	4298      	cmp	r0, r3
   16eda:	d032      	beq.n	16f42 <check_crc+0x176>
		return 1;
	}
	else
	{	
		//set flag to 0 if crc doesn't match, we don't want to load this image. 
		LogMessage(LOG_INFO_LVL ,"[Invalid CRC, re-download in next boot cycle. Resetting to current image.]\r\n");
   16edc:	4934      	ldr	r1, [pc, #208]	; (16fb0 <check_crc+0x1e4>)
   16ede:	2000      	movs	r0, #0
   16ee0:	4b26      	ldr	r3, [pc, #152]	; (16f7c <check_crc+0x1b0>)
   16ee2:	4798      	blx	r3
		params_file.fptr = 0;
   16ee4:	2300      	movs	r3, #0
   16ee6:	9322      	str	r3, [sp, #136]	; 0x88
		res = f_read (&params_file,(char const *)params, 50, &br);
   16ee8:	ab2d      	add	r3, sp, #180	; 0xb4
   16eea:	2232      	movs	r2, #50	; 0x32
   16eec:	a913      	add	r1, sp, #76	; 0x4c
   16eee:	a820      	add	r0, sp, #128	; 0x80
   16ef0:	4c23      	ldr	r4, [pc, #140]	; (16f80 <check_crc+0x1b4>)
   16ef2:	47a0      	blx	r4
		if (res != FR_OK) {
   16ef4:	2800      	cmp	r0, #0
   16ef6:	d12d      	bne.n	16f54 <check_crc+0x188>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);			
		}
		params_file.fptr = 0;
   16ef8:	2300      	movs	r3, #0
   16efa:	9322      	str	r3, [sp, #136]	; 0x88
		params[0] = "0";
   16efc:	a913      	add	r1, sp, #76	; 0x4c
   16efe:	4b2d      	ldr	r3, [pc, #180]	; (16fb4 <check_crc+0x1e8>)
   16f00:	700b      	strb	r3, [r1, #0]
		res = f_write (&params_file,(char const *)params, 50, &br);
   16f02:	ab2d      	add	r3, sp, #180	; 0xb4
   16f04:	2232      	movs	r2, #50	; 0x32
   16f06:	a820      	add	r0, sp, #128	; 0x80
   16f08:	4c2b      	ldr	r4, [pc, #172]	; (16fb8 <check_crc+0x1ec>)
   16f0a:	47a0      	blx	r4
		if (res != FR_OK) {
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d127      	bne.n	16f60 <check_crc+0x194>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
		}
		f_close(&params_file);
   16f10:	a820      	add	r0, sp, #128	; 0x80
   16f12:	4b1f      	ldr	r3, [pc, #124]	; (16f90 <check_crc+0x1c4>)
   16f14:	4798      	blx	r3
		return 0;
   16f16:	2000      	movs	r0, #0
	}
	
}
   16f18:	b03b      	add	sp, #236	; 0xec
   16f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
   16f1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   16f1e:	0002      	movs	r2, r0
   16f20:	491a      	ldr	r1, [pc, #104]	; (16f8c <check_crc+0x1c0>)
   16f22:	2000      	movs	r0, #0
   16f24:	4d15      	ldr	r5, [pc, #84]	; (16f7c <check_crc+0x1b0>)
   16f26:	47a8      	blx	r5
   16f28:	e79e      	b.n	16e68 <check_crc+0x9c>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
   16f2a:	0002      	movs	r2, r0
   16f2c:	4923      	ldr	r1, [pc, #140]	; (16fbc <check_crc+0x1f0>)
   16f2e:	2000      	movs	r0, #0
   16f30:	4b12      	ldr	r3, [pc, #72]	; (16f7c <check_crc+0x1b0>)
   16f32:	4798      	blx	r3
   16f34:	e7b3      	b.n	16e9e <check_crc+0xd2>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
   16f36:	0002      	movs	r2, r0
   16f38:	4921      	ldr	r1, [pc, #132]	; (16fc0 <check_crc+0x1f4>)
   16f3a:	2000      	movs	r0, #0
   16f3c:	4b0f      	ldr	r3, [pc, #60]	; (16f7c <check_crc+0x1b0>)
   16f3e:	4798      	blx	r3
   16f40:	e7b5      	b.n	16eae <check_crc+0xe2>
		LogMessage(LOG_INFO_LVL ,"[CRC Matches]\r\n");
   16f42:	4920      	ldr	r1, [pc, #128]	; (16fc4 <check_crc+0x1f8>)
   16f44:	2000      	movs	r0, #0
   16f46:	4b0d      	ldr	r3, [pc, #52]	; (16f7c <check_crc+0x1b0>)
   16f48:	4798      	blx	r3
		f_close(&params_file);
   16f4a:	a820      	add	r0, sp, #128	; 0x80
   16f4c:	4b10      	ldr	r3, [pc, #64]	; (16f90 <check_crc+0x1c4>)
   16f4e:	4798      	blx	r3
		return 1;
   16f50:	2001      	movs	r0, #1
   16f52:	e7e1      	b.n	16f18 <check_crc+0x14c>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);			
   16f54:	0002      	movs	r2, r0
   16f56:	491a      	ldr	r1, [pc, #104]	; (16fc0 <check_crc+0x1f4>)
   16f58:	2000      	movs	r0, #0
   16f5a:	4b08      	ldr	r3, [pc, #32]	; (16f7c <check_crc+0x1b0>)
   16f5c:	4798      	blx	r3
   16f5e:	e7cb      	b.n	16ef8 <check_crc+0x12c>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
   16f60:	0002      	movs	r2, r0
   16f62:	4917      	ldr	r1, [pc, #92]	; (16fc0 <check_crc+0x1f4>)
   16f64:	2000      	movs	r0, #0
   16f66:	4b05      	ldr	r3, [pc, #20]	; (16f7c <check_crc+0x1b0>)
   16f68:	4798      	blx	r3
   16f6a:	e7d1      	b.n	16f10 <check_crc+0x144>
   16f6c:	0000b8c5 	.word	0x0000b8c5
   16f70:	0001b2d4 	.word	0x0001b2d4
   16f74:	000138dd 	.word	0x000138dd
   16f78:	0001b178 	.word	0x0001b178
   16f7c:	0000b8d1 	.word	0x0000b8d1
   16f80:	00013a65 	.word	0x00013a65
   16f84:	0000b115 	.word	0x0000b115
   16f88:	0001b148 	.word	0x0001b148
   16f8c:	0001b18c 	.word	0x0001b18c
   16f90:	00013edd 	.word	0x00013edd
   16f94:	0001b2e0 	.word	0x0001b2e0
   16f98:	0001b1d4 	.word	0x0001b1d4
   16f9c:	0000b7f5 	.word	0x0000b7f5
   16fa0:	0001b248 	.word	0x0001b248
   16fa4:	0001b26c 	.word	0x0001b26c
   16fa8:	00017f89 	.word	0x00017f89
   16fac:	00018279 	.word	0x00018279
   16fb0:	0001b280 	.word	0x0001b280
   16fb4:	0001b2d0 	.word	0x0001b2d0
   16fb8:	00013c19 	.word	0x00013c19
   16fbc:	0001b1ec 	.word	0x0001b1ec
   16fc0:	0001b218 	.word	0x0001b218
   16fc4:	0001b270 	.word	0x0001b270

00016fc8 <SubscribeHandler>:
{
   16fc8:	b570      	push	{r4, r5, r6, lr}
   16fca:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   16fcc:	6843      	ldr	r3, [r0, #4]
   16fce:	689a      	ldr	r2, [r3, #8]
   16fd0:	6859      	ldr	r1, [r3, #4]
   16fd2:	486a      	ldr	r0, [pc, #424]	; (1717c <SubscribeHandler+0x1b4>)
   16fd4:	4d6a      	ldr	r5, [pc, #424]	; (17180 <SubscribeHandler+0x1b8>)
   16fd6:	47a8      	blx	r5
	printf(" >> ");
   16fd8:	486a      	ldr	r0, [pc, #424]	; (17184 <SubscribeHandler+0x1bc>)
   16fda:	47a8      	blx	r5
	printf("%.*s \r\n",msgData->message->payloadlen,(char *)msgData->message->payload);	
   16fdc:	6823      	ldr	r3, [r4, #0]
   16fde:	689a      	ldr	r2, [r3, #8]
   16fe0:	68d9      	ldr	r1, [r3, #12]
   16fe2:	4869      	ldr	r0, [pc, #420]	; (17188 <SubscribeHandler+0x1c0>)
   16fe4:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   16fe6:	6826      	ldr	r6, [r4, #0]
   16fe8:	68f5      	ldr	r5, [r6, #12]
   16fea:	6863      	ldr	r3, [r4, #4]
   16fec:	6898      	ldr	r0, [r3, #8]
   16fee:	002a      	movs	r2, r5
   16ff0:	4966      	ldr	r1, [pc, #408]	; (1718c <SubscribeHandler+0x1c4>)
   16ff2:	4b67      	ldr	r3, [pc, #412]	; (17190 <SubscribeHandler+0x1c8>)
   16ff4:	4798      	blx	r3
   16ff6:	2800      	cmp	r0, #0
   16ff8:	d10b      	bne.n	17012 <SubscribeHandler+0x4a>
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   16ffa:	68b6      	ldr	r6, [r6, #8]
   16ffc:	002a      	movs	r2, r5
   16ffe:	4965      	ldr	r1, [pc, #404]	; (17194 <SubscribeHandler+0x1cc>)
   17000:	0030      	movs	r0, r6
   17002:	4b63      	ldr	r3, [pc, #396]	; (17190 <SubscribeHandler+0x1c8>)
   17004:	4798      	blx	r3
   17006:	2800      	cmp	r0, #0
   17008:	d13b      	bne.n	17082 <SubscribeHandler+0xba>
		port_base->OUTSET.reg = pin_mask;
   1700a:	2280      	movs	r2, #128	; 0x80
   1700c:	0412      	lsls	r2, r2, #16
   1700e:	4b62      	ldr	r3, [pc, #392]	; (17198 <SubscribeHandler+0x1d0>)
   17010:	619a      	str	r2, [r3, #24]
	if(strncmp((char *) msgData->topicName->lenstring.data, OTAFU_TOPIC, msgData->message->payloadlen) == 0){
   17012:	6826      	ldr	r6, [r4, #0]
   17014:	68f5      	ldr	r5, [r6, #12]
   17016:	6863      	ldr	r3, [r4, #4]
   17018:	6898      	ldr	r0, [r3, #8]
   1701a:	002a      	movs	r2, r5
   1701c:	495f      	ldr	r1, [pc, #380]	; (1719c <SubscribeHandler+0x1d4>)
   1701e:	4b5c      	ldr	r3, [pc, #368]	; (17190 <SubscribeHandler+0x1c8>)
   17020:	4798      	blx	r3
   17022:	2800      	cmp	r0, #0
   17024:	d10e      	bne.n	17044 <SubscribeHandler+0x7c>
		if(strncmp((char *)msgData->message->payload, "false", msgData->message->payloadlen) == 0){
   17026:	68b6      	ldr	r6, [r6, #8]
   17028:	002a      	movs	r2, r5
   1702a:	495a      	ldr	r1, [pc, #360]	; (17194 <SubscribeHandler+0x1cc>)
   1702c:	0030      	movs	r0, r6
   1702e:	4b58      	ldr	r3, [pc, #352]	; (17190 <SubscribeHandler+0x1c8>)
   17030:	4798      	blx	r3
   17032:	2800      	cmp	r0, #0
   17034:	d031      	beq.n	1709a <SubscribeHandler+0xd2>
		else if (strncmp((char *)msgData->message->payload, "true", msgData->message->payloadlen) == 0){
   17036:	002a      	movs	r2, r5
   17038:	4959      	ldr	r1, [pc, #356]	; (171a0 <SubscribeHandler+0x1d8>)
   1703a:	0030      	movs	r0, r6
   1703c:	4b54      	ldr	r3, [pc, #336]	; (17190 <SubscribeHandler+0x1c8>)
   1703e:	4798      	blx	r3
   17040:	2800      	cmp	r0, #0
   17042:	d02e      	beq.n	170a2 <SubscribeHandler+0xda>
	if(strncmp((char *) msgData->topicName->lenstring.data, SCHEDULE_DAY_TOPIC, msgData->message->payloadlen) == 0){
   17044:	6823      	ldr	r3, [r4, #0]
   17046:	68da      	ldr	r2, [r3, #12]
   17048:	6863      	ldr	r3, [r4, #4]
   1704a:	6898      	ldr	r0, [r3, #8]
   1704c:	4955      	ldr	r1, [pc, #340]	; (171a4 <SubscribeHandler+0x1dc>)
   1704e:	4b50      	ldr	r3, [pc, #320]	; (17190 <SubscribeHandler+0x1c8>)
   17050:	4798      	blx	r3
   17052:	2800      	cmp	r0, #0
   17054:	d100      	bne.n	17058 <SubscribeHandler+0x90>
   17056:	e084      	b.n	17162 <SubscribeHandler+0x19a>
	if(strncmp((char *) msgData->topicName->lenstring.data, SCHEDULE_WEEK_TOPIC, msgData->message->payloadlen) == 0){
   17058:	6823      	ldr	r3, [r4, #0]
   1705a:	68da      	ldr	r2, [r3, #12]
   1705c:	6863      	ldr	r3, [r4, #4]
   1705e:	6898      	ldr	r0, [r3, #8]
   17060:	4951      	ldr	r1, [pc, #324]	; (171a8 <SubscribeHandler+0x1e0>)
   17062:	4b4b      	ldr	r3, [pc, #300]	; (17190 <SubscribeHandler+0x1c8>)
   17064:	4798      	blx	r3
   17066:	2800      	cmp	r0, #0
   17068:	d100      	bne.n	1706c <SubscribeHandler+0xa4>
   1706a:	e07e      	b.n	1716a <SubscribeHandler+0x1a2>
	if(strncmp((char *) msgData->topicName->lenstring.data, AUTHENTICATION_TOPIC, msgData->message->payloadlen) == 0){
   1706c:	6823      	ldr	r3, [r4, #0]
   1706e:	68da      	ldr	r2, [r3, #12]
   17070:	6863      	ldr	r3, [r4, #4]
   17072:	6898      	ldr	r0, [r3, #8]
   17074:	494d      	ldr	r1, [pc, #308]	; (171ac <SubscribeHandler+0x1e4>)
   17076:	4b46      	ldr	r3, [pc, #280]	; (17190 <SubscribeHandler+0x1c8>)
   17078:	4798      	blx	r3
   1707a:	2800      	cmp	r0, #0
   1707c:	d100      	bne.n	17080 <SubscribeHandler+0xb8>
   1707e:	e078      	b.n	17172 <SubscribeHandler+0x1aa>
}
   17080:	bd70      	pop	{r4, r5, r6, pc}
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   17082:	002a      	movs	r2, r5
   17084:	4946      	ldr	r1, [pc, #280]	; (171a0 <SubscribeHandler+0x1d8>)
   17086:	0030      	movs	r0, r6
   17088:	4b41      	ldr	r3, [pc, #260]	; (17190 <SubscribeHandler+0x1c8>)
   1708a:	4798      	blx	r3
   1708c:	2800      	cmp	r0, #0
   1708e:	d1d9      	bne.n	17044 <SubscribeHandler+0x7c>
		port_base->OUTCLR.reg = pin_mask;
   17090:	2280      	movs	r2, #128	; 0x80
   17092:	0412      	lsls	r2, r2, #16
   17094:	4b40      	ldr	r3, [pc, #256]	; (17198 <SubscribeHandler+0x1d0>)
   17096:	615a      	str	r2, [r3, #20]
   17098:	e7bb      	b.n	17012 <SubscribeHandler+0x4a>
				printf("OTAFU FALSE \r\n");
   1709a:	4845      	ldr	r0, [pc, #276]	; (171b0 <SubscribeHandler+0x1e8>)
   1709c:	4b45      	ldr	r3, [pc, #276]	; (171b4 <SubscribeHandler+0x1ec>)
   1709e:	4798      	blx	r3
   170a0:	e7d0      	b.n	17044 <SubscribeHandler+0x7c>
				printf("PERFORMING OTAFU \r\n");	
   170a2:	4845      	ldr	r0, [pc, #276]	; (171b8 <SubscribeHandler+0x1f0>)
   170a4:	4b43      	ldr	r3, [pc, #268]	; (171b4 <SubscribeHandler+0x1ec>)
   170a6:	4798      	blx	r3
	do_download_flag = true;
   170a8:	2601      	movs	r6, #1
   170aa:	4b44      	ldr	r3, [pc, #272]	; (171bc <SubscribeHandler+0x1f4>)
   170ac:	701e      	strb	r6, [r3, #0]
	second_file = 0;
   170ae:	2500      	movs	r5, #0
   170b0:	4b43      	ldr	r3, [pc, #268]	; (171c0 <SubscribeHandler+0x1f8>)
   170b2:	701d      	strb	r5, [r3, #0]
	mqtt_deinit(&mqtt_inst);
   170b4:	4843      	ldr	r0, [pc, #268]	; (171c4 <SubscribeHandler+0x1fc>)
   170b6:	4b44      	ldr	r3, [pc, #272]	; (171c8 <SubscribeHandler+0x200>)
   170b8:	4798      	blx	r3
	socketDeinit();
   170ba:	4b44      	ldr	r3, [pc, #272]	; (171cc <SubscribeHandler+0x204>)
   170bc:	4798      	blx	r3
	delay_s(1);
   170be:	20fa      	movs	r0, #250	; 0xfa
   170c0:	0080      	lsls	r0, r0, #2
   170c2:	4b43      	ldr	r3, [pc, #268]	; (171d0 <SubscribeHandler+0x208>)
   170c4:	4798      	blx	r3
	socketInit();
   170c6:	4b43      	ldr	r3, [pc, #268]	; (171d4 <SubscribeHandler+0x20c>)
   170c8:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
   170ca:	4943      	ldr	r1, [pc, #268]	; (171d8 <SubscribeHandler+0x210>)
   170cc:	4843      	ldr	r0, [pc, #268]	; (171dc <SubscribeHandler+0x214>)
   170ce:	4b44      	ldr	r3, [pc, #272]	; (171e0 <SubscribeHandler+0x218>)
   170d0:	4798      	blx	r3
	down_state = NOT_READY;
   170d2:	4c44      	ldr	r4, [pc, #272]	; (171e4 <SubscribeHandler+0x21c>)
   170d4:	7025      	strb	r5, [r4, #0]
	add_state(WIFI_CONNECTED);
   170d6:	2002      	movs	r0, #2
   170d8:	4d43      	ldr	r5, [pc, #268]	; (171e8 <SubscribeHandler+0x220>)
   170da:	47a8      	blx	r5
	add_state(STORAGE_READY);
   170dc:	0030      	movs	r0, r6
   170de:	47a8      	blx	r5
	start_download();
   170e0:	4b42      	ldr	r3, [pc, #264]	; (171ec <SubscribeHandler+0x224>)
   170e2:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   170e4:	7822      	ldrb	r2, [r4, #0]
   170e6:	2330      	movs	r3, #48	; 0x30
   170e8:	421a      	tst	r2, r3
   170ea:	d10b      	bne.n	17104 <SubscribeHandler+0x13c>
		m2m_wifi_handle_events(NULL);
   170ec:	4e40      	ldr	r6, [pc, #256]	; (171f0 <SubscribeHandler+0x228>)
		sw_timer_task(&swt_module_inst);
   170ee:	4d41      	ldr	r5, [pc, #260]	; (171f4 <SubscribeHandler+0x22c>)
   170f0:	4c41      	ldr	r4, [pc, #260]	; (171f8 <SubscribeHandler+0x230>)
		m2m_wifi_handle_events(NULL);
   170f2:	2000      	movs	r0, #0
   170f4:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   170f6:	0028      	movs	r0, r5
   170f8:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   170fa:	4b3a      	ldr	r3, [pc, #232]	; (171e4 <SubscribeHandler+0x21c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   170fc:	781b      	ldrb	r3, [r3, #0]
   170fe:	2230      	movs	r2, #48	; 0x30
   17100:	421a      	tst	r2, r3
   17102:	d0f6      	beq.n	170f2 <SubscribeHandler+0x12a>
	second_file = 1;
   17104:	2601      	movs	r6, #1
   17106:	4b2e      	ldr	r3, [pc, #184]	; (171c0 <SubscribeHandler+0x1f8>)
   17108:	701e      	strb	r6, [r3, #0]
	down_state = NOT_READY;
   1710a:	4c36      	ldr	r4, [pc, #216]	; (171e4 <SubscribeHandler+0x21c>)
   1710c:	2300      	movs	r3, #0
   1710e:	7023      	strb	r3, [r4, #0]
	add_state(WIFI_CONNECTED);
   17110:	2002      	movs	r0, #2
   17112:	4d35      	ldr	r5, [pc, #212]	; (171e8 <SubscribeHandler+0x220>)
   17114:	47a8      	blx	r5
	add_state(STORAGE_READY);
   17116:	0030      	movs	r0, r6
   17118:	47a8      	blx	r5
	start_download();
   1711a:	4b34      	ldr	r3, [pc, #208]	; (171ec <SubscribeHandler+0x224>)
   1711c:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1711e:	7822      	ldrb	r2, [r4, #0]
   17120:	2330      	movs	r3, #48	; 0x30
   17122:	421a      	tst	r2, r3
   17124:	d10b      	bne.n	1713e <SubscribeHandler+0x176>
		m2m_wifi_handle_events(NULL);
   17126:	4e32      	ldr	r6, [pc, #200]	; (171f0 <SubscribeHandler+0x228>)
		sw_timer_task(&swt_module_inst);
   17128:	4d32      	ldr	r5, [pc, #200]	; (171f4 <SubscribeHandler+0x22c>)
   1712a:	4c33      	ldr	r4, [pc, #204]	; (171f8 <SubscribeHandler+0x230>)
		m2m_wifi_handle_events(NULL);
   1712c:	2000      	movs	r0, #0
   1712e:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   17130:	0028      	movs	r0, r5
   17132:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   17134:	4b2b      	ldr	r3, [pc, #172]	; (171e4 <SubscribeHandler+0x21c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17136:	781b      	ldrb	r3, [r3, #0]
   17138:	2230      	movs	r2, #48	; 0x30
   1713a:	421a      	tst	r2, r3
   1713c:	d0f6      	beq.n	1712c <SubscribeHandler+0x164>
	printf("otafu: done.\r\n");
   1713e:	482f      	ldr	r0, [pc, #188]	; (171fc <SubscribeHandler+0x234>)
   17140:	4b1c      	ldr	r3, [pc, #112]	; (171b4 <SubscribeHandler+0x1ec>)
   17142:	4798      	blx	r3
	uint8_t result_crc= check_crc();
   17144:	4b2e      	ldr	r3, [pc, #184]	; (17200 <SubscribeHandler+0x238>)
   17146:	4798      	blx	r3
	socketDeinit();
   17148:	4b20      	ldr	r3, [pc, #128]	; (171cc <SubscribeHandler+0x204>)
   1714a:	4798      	blx	r3
	delay_s(3); //let the print buffer catch up before we reset
   1714c:	482d      	ldr	r0, [pc, #180]	; (17204 <SubscribeHandler+0x23c>)
   1714e:	4b20      	ldr	r3, [pc, #128]	; (171d0 <SubscribeHandler+0x208>)
   17150:	4798      	blx	r3
  __ASM volatile ("dsb");
   17152:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   17156:	4a2c      	ldr	r2, [pc, #176]	; (17208 <SubscribeHandler+0x240>)
   17158:	4b2c      	ldr	r3, [pc, #176]	; (1720c <SubscribeHandler+0x244>)
   1715a:	60da      	str	r2, [r3, #12]
   1715c:	f3bf 8f4f 	dsb	sy
   17160:	e7fe      	b.n	17160 <SubscribeHandler+0x198>
			printf("I WILL NOW SET SCHEDULE BY DAY \r\n");				
   17162:	482b      	ldr	r0, [pc, #172]	; (17210 <SubscribeHandler+0x248>)
   17164:	4b13      	ldr	r3, [pc, #76]	; (171b4 <SubscribeHandler+0x1ec>)
   17166:	4798      	blx	r3
   17168:	e776      	b.n	17058 <SubscribeHandler+0x90>
			printf("I WILL NOW SET SCHEDULE BY WEEK \r\n");
   1716a:	482a      	ldr	r0, [pc, #168]	; (17214 <SubscribeHandler+0x24c>)
   1716c:	4b11      	ldr	r3, [pc, #68]	; (171b4 <SubscribeHandler+0x1ec>)
   1716e:	4798      	blx	r3
   17170:	e77c      	b.n	1706c <SubscribeHandler+0xa4>
		printf("I WILL NOW AUTHENTICATE YOU \r\n");
   17172:	4829      	ldr	r0, [pc, #164]	; (17218 <SubscribeHandler+0x250>)
   17174:	4b0f      	ldr	r3, [pc, #60]	; (171b4 <SubscribeHandler+0x1ec>)
   17176:	4798      	blx	r3
}
   17178:	e782      	b.n	17080 <SubscribeHandler+0xb8>
   1717a:	46c0      	nop			; (mov r8, r8)
   1717c:	0001b07c 	.word	0x0001b07c
   17180:	00017b29 	.word	0x00017b29
   17184:	0001b084 	.word	0x0001b084
   17188:	0001b08c 	.word	0x0001b08c
   1718c:	0001b094 	.word	0x0001b094
   17190:	00017f35 	.word	0x00017f35
   17194:	0001b09c 	.word	0x0001b09c
   17198:	41004400 	.word	0x41004400
   1719c:	0001b79c 	.word	0x0001b79c
   171a0:	0001b0a4 	.word	0x0001b0a4
   171a4:	0001b7a4 	.word	0x0001b7a4
   171a8:	0001b7b4 	.word	0x0001b7b4
   171ac:	0001b7c4 	.word	0x0001b7c4
   171b0:	0001b0ac 	.word	0x0001b0ac
   171b4:	00017c45 	.word	0x00017c45
   171b8:	0001b0bc 	.word	0x0001b0bc
   171bc:	20000904 	.word	0x20000904
   171c0:	20000fa0 	.word	0x20000fa0
   171c4:	20000b64 	.word	0x20000b64
   171c8:	00014c1d 	.word	0x00014c1d
   171cc:	0000f635 	.word	0x0000f635
   171d0:	0000ca0d 	.word	0x0000ca0d
   171d4:	0000f5f1 	.word	0x0000f5f1
   171d8:	00016789 	.word	0x00016789
   171dc:	000167c5 	.word	0x000167c5
   171e0:	0000f671 	.word	0x0000f671
   171e4:	20000905 	.word	0x20000905
   171e8:	00016779 	.word	0x00016779
   171ec:	000167d1 	.word	0x000167d1
   171f0:	0000dafd 	.word	0x0000dafd
   171f4:	20001668 	.word	0x20001668
   171f8:	00016721 	.word	0x00016721
   171fc:	0001b0d0 	.word	0x0001b0d0
   17200:	00016dcd 	.word	0x00016dcd
   17204:	00000bb8 	.word	0x00000bb8
   17208:	05fa0004 	.word	0x05fa0004
   1720c:	e000ed00 	.word	0xe000ed00
   17210:	0001b0e0 	.word	0x0001b0e0
   17214:	0001b104 	.word	0x0001b104
   17218:	0001b128 	.word	0x0001b128

0001721c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   1721c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1721e:	b091      	sub	sp, #68	; 0x44
	down_state = NOT_READY;
   17220:	2200      	movs	r2, #0
   17222:	4b97      	ldr	r3, [pc, #604]	; (17480 <main+0x264>)
   17224:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
   17226:	4b97      	ldr	r3, [pc, #604]	; (17484 <main+0x268>)
   17228:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   1722a:	4b97      	ldr	r3, [pc, #604]	; (17488 <main+0x26c>)
   1722c:	4798      	blx	r3
	stdio_base = (void *)GetUsartModule();
   1722e:	4b97      	ldr	r3, [pc, #604]	; (1748c <main+0x270>)
   17230:	4798      	blx	r3
   17232:	4b97      	ldr	r3, [pc, #604]	; (17490 <main+0x274>)
   17234:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   17236:	4a97      	ldr	r2, [pc, #604]	; (17494 <main+0x278>)
   17238:	4b97      	ldr	r3, [pc, #604]	; (17498 <main+0x27c>)
   1723a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   1723c:	4a97      	ldr	r2, [pc, #604]	; (1749c <main+0x280>)
   1723e:	4b98      	ldr	r3, [pc, #608]	; (174a0 <main+0x284>)
   17240:	601a      	str	r2, [r3, #0]
	setbuf(stdout, NULL);
   17242:	4d98      	ldr	r5, [pc, #608]	; (174a4 <main+0x288>)
   17244:	682b      	ldr	r3, [r5, #0]
   17246:	6898      	ldr	r0, [r3, #8]
   17248:	2100      	movs	r1, #0
   1724a:	4c97      	ldr	r4, [pc, #604]	; (174a8 <main+0x28c>)
   1724c:	47a0      	blx	r4
	setbuf(stdin, NULL);
   1724e:	682b      	ldr	r3, [r5, #0]
   17250:	6858      	ldr	r0, [r3, #4]
   17252:	2100      	movs	r1, #0
   17254:	47a0      	blx	r4
	configure_console();
	printf(STRING_HEADER);
   17256:	4895      	ldr	r0, [pc, #596]	; (174ac <main+0x290>)
   17258:	4c95      	ldr	r4, [pc, #596]	; (174b0 <main+0x294>)
   1725a:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
   1725c:	4895      	ldr	r0, [pc, #596]	; (174b4 <main+0x298>)
   1725e:	47a0      	blx	r4
	printf("ESE516 - Wifi Init Code\r\n");
   17260:	4895      	ldr	r0, [pc, #596]	; (174b8 <main+0x29c>)
   17262:	47a0      	blx	r4
	sd_mmc_init();
   17264:	4b95      	ldr	r3, [pc, #596]	; (174bc <main+0x2a0>)
   17266:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");		
   17268:	4895      	ldr	r0, [pc, #596]	; (174c0 <main+0x2a4>)
   1726a:	47a0      	blx	r4
			status = sd_mmc_test_unit_ready(0);
   1726c:	4d95      	ldr	r5, [pc, #596]	; (174c4 <main+0x2a8>)
				printf("init_storage: SD Card install failed.\r\n");
   1726e:	4c90      	ldr	r4, [pc, #576]	; (174b0 <main+0x294>)
			status = sd_mmc_test_unit_ready(0);
   17270:	2000      	movs	r0, #0
   17272:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   17274:	2801      	cmp	r0, #1
   17276:	d059      	beq.n	1732c <main+0x110>
		} while (CTRL_GOOD != status);
   17278:	2800      	cmp	r0, #0
   1727a:	d1f9      	bne.n	17270 <main+0x54>
		printf("init_storage: mounting SD card...\r\n");
   1727c:	4892      	ldr	r0, [pc, #584]	; (174c8 <main+0x2ac>)
   1727e:	4b8c      	ldr	r3, [pc, #560]	; (174b0 <main+0x294>)
   17280:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   17282:	4c92      	ldr	r4, [pc, #584]	; (174cc <main+0x2b0>)
   17284:	228c      	movs	r2, #140	; 0x8c
   17286:	0092      	lsls	r2, r2, #2
   17288:	2100      	movs	r1, #0
   1728a:	0020      	movs	r0, r4
   1728c:	4b90      	ldr	r3, [pc, #576]	; (174d0 <main+0x2b4>)
   1728e:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   17290:	0021      	movs	r1, r4
   17292:	2000      	movs	r0, #0
   17294:	4b8f      	ldr	r3, [pc, #572]	; (174d4 <main+0x2b8>)
   17296:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   17298:	280b      	cmp	r0, #11
   1729a:	d051      	beq.n	17340 <main+0x124>
		printf("init_storage: SD card mount OK.\r\n");
   1729c:	488e      	ldr	r0, [pc, #568]	; (174d8 <main+0x2bc>)
   1729e:	4b84      	ldr	r3, [pc, #528]	; (174b0 <main+0x294>)
   172a0:	4798      	blx	r3
		add_state(STORAGE_READY);
   172a2:	2001      	movs	r0, #1
   172a4:	4b8d      	ldr	r3, [pc, #564]	; (174dc <main+0x2c0>)
   172a6:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   172a8:	ac03      	add	r4, sp, #12
   172aa:	0020      	movs	r0, r4
   172ac:	4b8c      	ldr	r3, [pc, #560]	; (174e0 <main+0x2c4>)
   172ae:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   172b0:	4d8c      	ldr	r5, [pc, #560]	; (174e4 <main+0x2c8>)
   172b2:	0021      	movs	r1, r4
   172b4:	0028      	movs	r0, r5
   172b6:	4b8c      	ldr	r3, [pc, #560]	; (174e8 <main+0x2cc>)
   172b8:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   172ba:	0028      	movs	r0, r5
   172bc:	4b8b      	ldr	r3, [pc, #556]	; (174ec <main+0x2d0>)
   172be:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   172c0:	0020      	movs	r0, r4
   172c2:	4b8b      	ldr	r3, [pc, #556]	; (174f0 <main+0x2d4>)
   172c4:	4798      	blx	r3
	httpc_conf.port = 443;
   172c6:	23bc      	movs	r3, #188	; 0xbc
   172c8:	33ff      	adds	r3, #255	; 0xff
   172ca:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   172cc:	3bbb      	subs	r3, #187	; 0xbb
   172ce:	3bff      	subs	r3, #255	; 0xff
   172d0:	70a3      	strb	r3, [r4, #2]
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   172d2:	4b88      	ldr	r3, [pc, #544]	; (174f4 <main+0x2d8>)
   172d4:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   172d6:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   172d8:	0021      	movs	r1, r4
   172da:	4887      	ldr	r0, [pc, #540]	; (174f8 <main+0x2dc>)
   172dc:	4b87      	ldr	r3, [pc, #540]	; (174fc <main+0x2e0>)
   172de:	4798      	blx	r3
   172e0:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   172e2:	db32      	blt.n	1734a <main+0x12e>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   172e4:	4986      	ldr	r1, [pc, #536]	; (17500 <main+0x2e4>)
   172e6:	4884      	ldr	r0, [pc, #528]	; (174f8 <main+0x2dc>)
   172e8:	4b86      	ldr	r3, [pc, #536]	; (17504 <main+0x2e8>)
   172ea:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   172ec:	ac03      	add	r4, sp, #12
   172ee:	0020      	movs	r0, r4
   172f0:	4b85      	ldr	r3, [pc, #532]	; (17508 <main+0x2ec>)
   172f2:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   172f4:	4b85      	ldr	r3, [pc, #532]	; (1750c <main+0x2f0>)
   172f6:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   172f8:	2380      	movs	r3, #128	; 0x80
   172fa:	009b      	lsls	r3, r3, #2
   172fc:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   172fe:	4a84      	ldr	r2, [pc, #528]	; (17510 <main+0x2f4>)
   17300:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17302:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   17304:	4b83      	ldr	r3, [pc, #524]	; (17514 <main+0x2f8>)
   17306:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   17308:	4b83      	ldr	r3, [pc, #524]	; (17518 <main+0x2fc>)
   1730a:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1730c:	0021      	movs	r1, r4
   1730e:	4883      	ldr	r0, [pc, #524]	; (1751c <main+0x300>)
   17310:	4b83      	ldr	r3, [pc, #524]	; (17520 <main+0x304>)
   17312:	4798      	blx	r3
   17314:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   17316:	db1c      	blt.n	17352 <main+0x136>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17318:	4982      	ldr	r1, [pc, #520]	; (17524 <main+0x308>)
   1731a:	4880      	ldr	r0, [pc, #512]	; (1751c <main+0x300>)
   1731c:	4b82      	ldr	r3, [pc, #520]	; (17528 <main+0x30c>)
   1731e:	4798      	blx	r3
   17320:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   17322:	da1a      	bge.n	1735a <main+0x13e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   17324:	4881      	ldr	r0, [pc, #516]	; (1752c <main+0x310>)
   17326:	4b82      	ldr	r3, [pc, #520]	; (17530 <main+0x314>)
   17328:	4798      	blx	r3
   1732a:	e7fe      	b.n	1732a <main+0x10e>
				printf("init_storage: SD Card install failed.\r\n");
   1732c:	4881      	ldr	r0, [pc, #516]	; (17534 <main+0x318>)
   1732e:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   17330:	4881      	ldr	r0, [pc, #516]	; (17538 <main+0x31c>)
   17332:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   17334:	4e81      	ldr	r6, [pc, #516]	; (1753c <main+0x320>)
   17336:	2000      	movs	r0, #0
   17338:	47b0      	blx	r6
   1733a:	2802      	cmp	r0, #2
   1733c:	d1fb      	bne.n	17336 <main+0x11a>
   1733e:	e797      	b.n	17270 <main+0x54>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   17340:	210b      	movs	r1, #11
   17342:	487f      	ldr	r0, [pc, #508]	; (17540 <main+0x324>)
   17344:	4b7a      	ldr	r3, [pc, #488]	; (17530 <main+0x314>)
   17346:	4798      	blx	r3
   17348:	e7ae      	b.n	172a8 <main+0x8c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1734a:	487e      	ldr	r0, [pc, #504]	; (17544 <main+0x328>)
   1734c:	4b78      	ldr	r3, [pc, #480]	; (17530 <main+0x314>)
   1734e:	4798      	blx	r3
   17350:	e7fe      	b.n	17350 <main+0x134>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   17352:	487d      	ldr	r0, [pc, #500]	; (17548 <main+0x32c>)
   17354:	4b76      	ldr	r3, [pc, #472]	; (17530 <main+0x314>)
   17356:	4798      	blx	r3
   17358:	e7fe      	b.n	17358 <main+0x13c>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
   1735a:	4b7c      	ldr	r3, [pc, #496]	; (1754c <main+0x330>)
   1735c:	4798      	blx	r3

	/*Cli init*/
	cli_init(&mqtt_inst);
   1735e:	486f      	ldr	r0, [pc, #444]	; (1751c <main+0x300>)
   17360:	4b7b      	ldr	r3, [pc, #492]	; (17550 <main+0x334>)
   17362:	4798      	blx	r3



	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   17364:	4b7b      	ldr	r3, [pc, #492]	; (17554 <main+0x338>)
   17366:	4798      	blx	r3
	configure_extint_callbacks();
   17368:	4b7b      	ldr	r3, [pc, #492]	; (17558 <main+0x33c>)
   1736a:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1736c:	2218      	movs	r2, #24
   1736e:	2100      	movs	r1, #0
   17370:	a80a      	add	r0, sp, #40	; 0x28
   17372:	4b57      	ldr	r3, [pc, #348]	; (174d0 <main+0x2b4>)
   17374:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   17376:	4b79      	ldr	r3, [pc, #484]	; (1755c <main+0x340>)
   17378:	930a      	str	r3, [sp, #40]	; 0x28
	ret = m2m_wifi_init(&param);
   1737a:	a80a      	add	r0, sp, #40	; 0x28
   1737c:	4b78      	ldr	r3, [pc, #480]	; (17560 <main+0x344>)
   1737e:	4798      	blx	r3
   17380:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   17382:	d003      	beq.n	1738c <main+0x170>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17384:	4877      	ldr	r0, [pc, #476]	; (17564 <main+0x348>)
   17386:	4b6a      	ldr	r3, [pc, #424]	; (17530 <main+0x314>)
   17388:	4798      	blx	r3
   1738a:	e7fe      	b.n	1738a <main+0x16e>
   1738c:	2000      	movs	r0, #0
   1738e:	4b76      	ldr	r3, [pc, #472]	; (17568 <main+0x34c>)
   17390:	4798      	blx	r3
   17392:	4b76      	ldr	r3, [pc, #472]	; (1756c <main+0x350>)
   17394:	7a1b      	ldrb	r3, [r3, #8]
   17396:	b2db      	uxtb	r3, r3
   17398:	40d8      	lsrs	r0, r3
		while (1) {
				}
		}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   1739a:	21fa      	movs	r1, #250	; 0xfa
   1739c:	0089      	lsls	r1, r1, #2
   1739e:	4b74      	ldr	r3, [pc, #464]	; (17570 <main+0x354>)
   173a0:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   173a2:	3801      	subs	r0, #1
   173a4:	4b73      	ldr	r3, [pc, #460]	; (17574 <main+0x358>)
   173a6:	4298      	cmp	r0, r3
   173a8:	d866      	bhi.n	17478 <main+0x25c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   173aa:	4a73      	ldr	r2, [pc, #460]	; (17578 <main+0x35c>)
   173ac:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   173ae:	4873      	ldr	r0, [pc, #460]	; (1757c <main+0x360>)
   173b0:	6a03      	ldr	r3, [r0, #32]
   173b2:	021b      	lsls	r3, r3, #8
   173b4:	0a1b      	lsrs	r3, r3, #8
   173b6:	21c0      	movs	r1, #192	; 0xc0
   173b8:	0609      	lsls	r1, r1, #24
   173ba:	430b      	orrs	r3, r1
   173bc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   173be:	2300      	movs	r3, #0
   173c0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   173c2:	2107      	movs	r1, #7
   173c4:	6011      	str	r1, [r2, #0]
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	//DOWNLOAD A FILE
	do_download_flag = false; // might hold off on download for now
   173c6:	4a6e      	ldr	r2, [pc, #440]	; (17580 <main+0x364>)
   173c8:	7013      	strb	r3, [r2, #0]

	/* Initialize socket module. */
	socketInit();
   173ca:	4b6e      	ldr	r3, [pc, #440]	; (17584 <main+0x368>)
   173cc:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_event_handler, socket_resolve_handler);//registerSocketCallback(socket_cb, resolve_cb);
   173ce:	496e      	ldr	r1, [pc, #440]	; (17588 <main+0x36c>)
   173d0:	486e      	ldr	r0, [pc, #440]	; (1758c <main+0x370>)
   173d2:	4b6f      	ldr	r3, [pc, #444]	; (17590 <main+0x374>)
   173d4:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   173d6:	4c6f      	ldr	r4, [pc, #444]	; (17594 <main+0x378>)
   173d8:	0021      	movs	r1, r4
   173da:	486f      	ldr	r0, [pc, #444]	; (17598 <main+0x37c>)
   173dc:	4b54      	ldr	r3, [pc, #336]	; (17530 <main+0x314>)
   173de:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   173e0:	23ff      	movs	r3, #255	; 0xff
   173e2:	9300      	str	r3, [sp, #0]
   173e4:	4b6d      	ldr	r3, [pc, #436]	; (1759c <main+0x380>)
   173e6:	2202      	movs	r2, #2
   173e8:	2112      	movs	r1, #18
   173ea:	0020      	movs	r0, r4
   173ec:	4c6c      	ldr	r4, [pc, #432]	; (175a0 <main+0x384>)
   173ee:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   173f0:	4b23      	ldr	r3, [pc, #140]	; (17480 <main+0x264>)

	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   173f2:	781b      	ldrb	r3, [r3, #0]
   173f4:	2232      	movs	r2, #50	; 0x32
   173f6:	421a      	tst	r2, r3
   173f8:	d00c      	beq.n	17414 <main+0x1f8>
		sw_timer_task(&swt_module_inst);
	}
	
	//temporarily not downloading before program, just downloading after

	printf("main: done.\r\n");
   173fa:	486a      	ldr	r0, [pc, #424]	; (175a4 <main+0x388>)
   173fc:	4b2c      	ldr	r3, [pc, #176]	; (174b0 <main+0x294>)
   173fe:	4798      	blx	r3
	//printf("main2: done.\r\n");

	//Disable socket for HTTP Transfer
	//socketDeinit();

	delay_s(1);
   17400:	20fa      	movs	r0, #250	; 0xfa
   17402:	0080      	lsls	r0, r0, #2
   17404:	4b68      	ldr	r3, [pc, #416]	; (175a8 <main+0x38c>)
   17406:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
   17408:	2200      	movs	r2, #0
   1740a:	4b5d      	ldr	r3, [pc, #372]	; (17580 <main+0x364>)
   1740c:	701a      	strb	r2, [r3, #0]
	//}


	while (1) {
	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   1740e:	4e67      	ldr	r6, [pc, #412]	; (175ac <main+0x390>)
		sw_timer_task(&swt_module_inst);
   17410:	4d67      	ldr	r5, [pc, #412]	; (175b0 <main+0x394>)
   17412:	e013      	b.n	1743c <main+0x220>
		m2m_wifi_handle_events(NULL);
   17414:	4e65      	ldr	r6, [pc, #404]	; (175ac <main+0x390>)
		sw_timer_task(&swt_module_inst);
   17416:	4d33      	ldr	r5, [pc, #204]	; (174e4 <main+0x2c8>)
   17418:	4c65      	ldr	r4, [pc, #404]	; (175b0 <main+0x394>)
		m2m_wifi_handle_events(NULL);
   1741a:	2000      	movs	r0, #0
   1741c:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   1741e:	0028      	movs	r0, r5
   17420:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   17422:	4b17      	ldr	r3, [pc, #92]	; (17480 <main+0x264>)
	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17424:	781b      	ldrb	r3, [r3, #0]
   17426:	2232      	movs	r2, #50	; 0x32
   17428:	421a      	tst	r2, r3
   1742a:	d0f6      	beq.n	1741a <main+0x1fe>
   1742c:	e7e5      	b.n	173fa <main+0x1de>
			//mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, mqtt_msg1, strlen(mqtt_msg1), 2, 0);
			//otafu();
			isPressed = false;
		}
		ReadIntoBuffer(); 
   1742e:	4b61      	ldr	r3, [pc, #388]	; (175b4 <main+0x398>)
   17430:	4798      	blx	r3
		//Handle MQTT messages
			if(mqtt_inst.isConnected)
   17432:	2334      	movs	r3, #52	; 0x34
   17434:	4a39      	ldr	r2, [pc, #228]	; (1751c <main+0x300>)
   17436:	5cd3      	ldrb	r3, [r2, r3]
   17438:	2b00      	cmp	r3, #0
   1743a:	d118      	bne.n	1746e <main+0x252>
		m2m_wifi_handle_events(NULL);
   1743c:	2000      	movs	r0, #0
   1743e:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   17440:	4828      	ldr	r0, [pc, #160]	; (174e4 <main+0x2c8>)
   17442:	47a8      	blx	r5
		if(isPressed)
   17444:	4b5c      	ldr	r3, [pc, #368]	; (175b8 <main+0x39c>)
   17446:	781b      	ldrb	r3, [r3, #0]
   17448:	2b00      	cmp	r3, #0
   1744a:	d0f0      	beq.n	1742e <main+0x212>
			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, mqtt_msg1, strlen(mqtt_msg1), 2, 0);
   1744c:	4f5b      	ldr	r7, [pc, #364]	; (175bc <main+0x3a0>)
   1744e:	0038      	movs	r0, r7
   17450:	4b5b      	ldr	r3, [pc, #364]	; (175c0 <main+0x3a4>)
   17452:	4798      	blx	r3
   17454:	0003      	movs	r3, r0
   17456:	2400      	movs	r4, #0
   17458:	9401      	str	r4, [sp, #4]
   1745a:	2202      	movs	r2, #2
   1745c:	9200      	str	r2, [sp, #0]
   1745e:	003a      	movs	r2, r7
   17460:	4958      	ldr	r1, [pc, #352]	; (175c4 <main+0x3a8>)
   17462:	482e      	ldr	r0, [pc, #184]	; (1751c <main+0x300>)
   17464:	4f58      	ldr	r7, [pc, #352]	; (175c8 <main+0x3ac>)
   17466:	47b8      	blx	r7
			isPressed = false;
   17468:	4b53      	ldr	r3, [pc, #332]	; (175b8 <main+0x39c>)
   1746a:	701c      	strb	r4, [r3, #0]
   1746c:	e7df      	b.n	1742e <main+0x212>
			mqtt_yield(&mqtt_inst, 100);
   1746e:	2164      	movs	r1, #100	; 0x64
   17470:	0010      	movs	r0, r2
   17472:	4b56      	ldr	r3, [pc, #344]	; (175cc <main+0x3b0>)
   17474:	4798      	blx	r3
   17476:	e7e1      	b.n	1743c <main+0x220>
		puts("ERR>> Systick configuration error\r\n");
   17478:	4855      	ldr	r0, [pc, #340]	; (175d0 <main+0x3b4>)
   1747a:	4b0d      	ldr	r3, [pc, #52]	; (174b0 <main+0x294>)
   1747c:	4798      	blx	r3
   1747e:	e7fe      	b.n	1747e <main+0x262>
   17480:	20000905 	.word	0x20000905
   17484:	00011a7d 	.word	0x00011a7d
   17488:	0000b6cd 	.word	0x0000b6cd
   1748c:	0000b909 	.word	0x0000b909
   17490:	20001650 	.word	0x20001650
   17494:	000168ed 	.word	0x000168ed
   17498:	2000164c 	.word	0x2000164c
   1749c:	000168c1 	.word	0x000168c1
   174a0:	20001648 	.word	0x20001648
   174a4:	20000200 	.word	0x20000200
   174a8:	00017c7d 	.word	0x00017c7d
   174ac:	0001b3d0 	.word	0x0001b3d0
   174b0:	00017c45 	.word	0x00017c45
   174b4:	0001b43c 	.word	0x0001b43c
   174b8:	0001b478 	.word	0x0001b478
   174bc:	0000ba35 	.word	0x0000ba35
   174c0:	0001b494 	.word	0x0001b494
   174c4:	0000c169 	.word	0x0000c169
   174c8:	0001b524 	.word	0x0001b524
   174cc:	20000908 	.word	0x20000908
   174d0:	000179c7 	.word	0x000179c7
   174d4:	000138ad 	.word	0x000138ad
   174d8:	0001b578 	.word	0x0001b578
   174dc:	00016779 	.word	0x00016779
   174e0:	000165e1 	.word	0x000165e1
   174e4:	20001668 	.word	0x20001668
   174e8:	000165ed 	.word	0x000165ed
   174ec:	00016699 	.word	0x00016699
   174f0:	000155f9 	.word	0x000155f9
   174f4:	000005a6 	.word	0x000005a6
   174f8:	200016c0 	.word	0x200016c0
   174fc:	00015621 	.word	0x00015621
   17500:	00016b81 	.word	0x00016b81
   17504:	000156d5 	.word	0x000156d5
   17508:	00014ae5 	.word	0x00014ae5
   1750c:	20000b9c 	.word	0x20000b9c
   17510:	20000d9c 	.word	0x20000d9c
   17514:	00004346 	.word	0x00004346
   17518:	00001770 	.word	0x00001770
   1751c:	20000b64 	.word	0x20000b64
   17520:	00014a2d 	.word	0x00014a2d
   17524:	00016a65 	.word	0x00016a65
   17528:	00014b01 	.word	0x00014b01
   1752c:	0001b618 	.word	0x0001b618
   17530:	00017b29 	.word	0x00017b29
   17534:	0001b4cc 	.word	0x0001b4cc
   17538:	0001b4f4 	.word	0x0001b4f4
   1753c:	0000ba55 	.word	0x0000ba55
   17540:	0001b548 	.word	0x0001b548
   17544:	0001b59c 	.word	0x0001b59c
   17548:	0001b5e4 	.word	0x0001b5e4
   1754c:	0000ca4d 	.word	0x0000ca4d
   17550:	0000b65d 	.word	0x0000b65d
   17554:	00016d79 	.word	0x00016d79
   17558:	00016da9 	.word	0x00016da9
   1755c:	00016c75 	.word	0x00016c75
   17560:	0000d9c9 	.word	0x0000d9c9
   17564:	0001b64c 	.word	0x0001b64c
   17568:	00011839 	.word	0x00011839
   1756c:	40000400 	.word	0x40000400
   17570:	000175d5 	.word	0x000175d5
   17574:	00ffffff 	.word	0x00ffffff
   17578:	e000e010 	.word	0xe000e010
   1757c:	e000ed00 	.word	0xe000ed00
   17580:	20000904 	.word	0x20000904
   17584:	0000f5f1 	.word	0x0000f5f1
   17588:	000168a9 	.word	0x000168a9
   1758c:	000168b5 	.word	0x000168b5
   17590:	0000f671 	.word	0x0000f671
   17594:	0001bb64 	.word	0x0001bb64
   17598:	0001b678 	.word	0x0001b678
   1759c:	0001bb54 	.word	0x0001bb54
   175a0:	0000dd99 	.word	0x0000dd99
   175a4:	0001b69c 	.word	0x0001b69c
   175a8:	0000ca0d 	.word	0x0000ca0d
   175ac:	0000dafd 	.word	0x0000dafd
   175b0:	00016721 	.word	0x00016721
   175b4:	0000b5b1 	.word	0x0000b5b1
   175b8:	20000b60 	.word	0x20000b60
   175bc:	200000c0 	.word	0x200000c0
   175c0:	00017f27 	.word	0x00017f27
   175c4:	000197f4 	.word	0x000197f4
   175c8:	00014c79 	.word	0x00014c79
   175cc:	00014cd9 	.word	0x00014cd9
   175d0:	0001b6ac 	.word	0x0001b6ac

000175d4 <__udivsi3>:
   175d4:	2200      	movs	r2, #0
   175d6:	0843      	lsrs	r3, r0, #1
   175d8:	428b      	cmp	r3, r1
   175da:	d374      	bcc.n	176c6 <__udivsi3+0xf2>
   175dc:	0903      	lsrs	r3, r0, #4
   175de:	428b      	cmp	r3, r1
   175e0:	d35f      	bcc.n	176a2 <__udivsi3+0xce>
   175e2:	0a03      	lsrs	r3, r0, #8
   175e4:	428b      	cmp	r3, r1
   175e6:	d344      	bcc.n	17672 <__udivsi3+0x9e>
   175e8:	0b03      	lsrs	r3, r0, #12
   175ea:	428b      	cmp	r3, r1
   175ec:	d328      	bcc.n	17640 <__udivsi3+0x6c>
   175ee:	0c03      	lsrs	r3, r0, #16
   175f0:	428b      	cmp	r3, r1
   175f2:	d30d      	bcc.n	17610 <__udivsi3+0x3c>
   175f4:	22ff      	movs	r2, #255	; 0xff
   175f6:	0209      	lsls	r1, r1, #8
   175f8:	ba12      	rev	r2, r2
   175fa:	0c03      	lsrs	r3, r0, #16
   175fc:	428b      	cmp	r3, r1
   175fe:	d302      	bcc.n	17606 <__udivsi3+0x32>
   17600:	1212      	asrs	r2, r2, #8
   17602:	0209      	lsls	r1, r1, #8
   17604:	d065      	beq.n	176d2 <__udivsi3+0xfe>
   17606:	0b03      	lsrs	r3, r0, #12
   17608:	428b      	cmp	r3, r1
   1760a:	d319      	bcc.n	17640 <__udivsi3+0x6c>
   1760c:	e000      	b.n	17610 <__udivsi3+0x3c>
   1760e:	0a09      	lsrs	r1, r1, #8
   17610:	0bc3      	lsrs	r3, r0, #15
   17612:	428b      	cmp	r3, r1
   17614:	d301      	bcc.n	1761a <__udivsi3+0x46>
   17616:	03cb      	lsls	r3, r1, #15
   17618:	1ac0      	subs	r0, r0, r3
   1761a:	4152      	adcs	r2, r2
   1761c:	0b83      	lsrs	r3, r0, #14
   1761e:	428b      	cmp	r3, r1
   17620:	d301      	bcc.n	17626 <__udivsi3+0x52>
   17622:	038b      	lsls	r3, r1, #14
   17624:	1ac0      	subs	r0, r0, r3
   17626:	4152      	adcs	r2, r2
   17628:	0b43      	lsrs	r3, r0, #13
   1762a:	428b      	cmp	r3, r1
   1762c:	d301      	bcc.n	17632 <__udivsi3+0x5e>
   1762e:	034b      	lsls	r3, r1, #13
   17630:	1ac0      	subs	r0, r0, r3
   17632:	4152      	adcs	r2, r2
   17634:	0b03      	lsrs	r3, r0, #12
   17636:	428b      	cmp	r3, r1
   17638:	d301      	bcc.n	1763e <__udivsi3+0x6a>
   1763a:	030b      	lsls	r3, r1, #12
   1763c:	1ac0      	subs	r0, r0, r3
   1763e:	4152      	adcs	r2, r2
   17640:	0ac3      	lsrs	r3, r0, #11
   17642:	428b      	cmp	r3, r1
   17644:	d301      	bcc.n	1764a <__udivsi3+0x76>
   17646:	02cb      	lsls	r3, r1, #11
   17648:	1ac0      	subs	r0, r0, r3
   1764a:	4152      	adcs	r2, r2
   1764c:	0a83      	lsrs	r3, r0, #10
   1764e:	428b      	cmp	r3, r1
   17650:	d301      	bcc.n	17656 <__udivsi3+0x82>
   17652:	028b      	lsls	r3, r1, #10
   17654:	1ac0      	subs	r0, r0, r3
   17656:	4152      	adcs	r2, r2
   17658:	0a43      	lsrs	r3, r0, #9
   1765a:	428b      	cmp	r3, r1
   1765c:	d301      	bcc.n	17662 <__udivsi3+0x8e>
   1765e:	024b      	lsls	r3, r1, #9
   17660:	1ac0      	subs	r0, r0, r3
   17662:	4152      	adcs	r2, r2
   17664:	0a03      	lsrs	r3, r0, #8
   17666:	428b      	cmp	r3, r1
   17668:	d301      	bcc.n	1766e <__udivsi3+0x9a>
   1766a:	020b      	lsls	r3, r1, #8
   1766c:	1ac0      	subs	r0, r0, r3
   1766e:	4152      	adcs	r2, r2
   17670:	d2cd      	bcs.n	1760e <__udivsi3+0x3a>
   17672:	09c3      	lsrs	r3, r0, #7
   17674:	428b      	cmp	r3, r1
   17676:	d301      	bcc.n	1767c <__udivsi3+0xa8>
   17678:	01cb      	lsls	r3, r1, #7
   1767a:	1ac0      	subs	r0, r0, r3
   1767c:	4152      	adcs	r2, r2
   1767e:	0983      	lsrs	r3, r0, #6
   17680:	428b      	cmp	r3, r1
   17682:	d301      	bcc.n	17688 <__udivsi3+0xb4>
   17684:	018b      	lsls	r3, r1, #6
   17686:	1ac0      	subs	r0, r0, r3
   17688:	4152      	adcs	r2, r2
   1768a:	0943      	lsrs	r3, r0, #5
   1768c:	428b      	cmp	r3, r1
   1768e:	d301      	bcc.n	17694 <__udivsi3+0xc0>
   17690:	014b      	lsls	r3, r1, #5
   17692:	1ac0      	subs	r0, r0, r3
   17694:	4152      	adcs	r2, r2
   17696:	0903      	lsrs	r3, r0, #4
   17698:	428b      	cmp	r3, r1
   1769a:	d301      	bcc.n	176a0 <__udivsi3+0xcc>
   1769c:	010b      	lsls	r3, r1, #4
   1769e:	1ac0      	subs	r0, r0, r3
   176a0:	4152      	adcs	r2, r2
   176a2:	08c3      	lsrs	r3, r0, #3
   176a4:	428b      	cmp	r3, r1
   176a6:	d301      	bcc.n	176ac <__udivsi3+0xd8>
   176a8:	00cb      	lsls	r3, r1, #3
   176aa:	1ac0      	subs	r0, r0, r3
   176ac:	4152      	adcs	r2, r2
   176ae:	0883      	lsrs	r3, r0, #2
   176b0:	428b      	cmp	r3, r1
   176b2:	d301      	bcc.n	176b8 <__udivsi3+0xe4>
   176b4:	008b      	lsls	r3, r1, #2
   176b6:	1ac0      	subs	r0, r0, r3
   176b8:	4152      	adcs	r2, r2
   176ba:	0843      	lsrs	r3, r0, #1
   176bc:	428b      	cmp	r3, r1
   176be:	d301      	bcc.n	176c4 <__udivsi3+0xf0>
   176c0:	004b      	lsls	r3, r1, #1
   176c2:	1ac0      	subs	r0, r0, r3
   176c4:	4152      	adcs	r2, r2
   176c6:	1a41      	subs	r1, r0, r1
   176c8:	d200      	bcs.n	176cc <__udivsi3+0xf8>
   176ca:	4601      	mov	r1, r0
   176cc:	4152      	adcs	r2, r2
   176ce:	4610      	mov	r0, r2
   176d0:	4770      	bx	lr
   176d2:	e7ff      	b.n	176d4 <__udivsi3+0x100>
   176d4:	b501      	push	{r0, lr}
   176d6:	2000      	movs	r0, #0
   176d8:	f000 f8f0 	bl	178bc <__aeabi_idiv0>
   176dc:	bd02      	pop	{r1, pc}
   176de:	46c0      	nop			; (mov r8, r8)

000176e0 <__aeabi_uidivmod>:
   176e0:	2900      	cmp	r1, #0
   176e2:	d0f7      	beq.n	176d4 <__udivsi3+0x100>
   176e4:	e776      	b.n	175d4 <__udivsi3>
   176e6:	4770      	bx	lr

000176e8 <__divsi3>:
   176e8:	4603      	mov	r3, r0
   176ea:	430b      	orrs	r3, r1
   176ec:	d47f      	bmi.n	177ee <__divsi3+0x106>
   176ee:	2200      	movs	r2, #0
   176f0:	0843      	lsrs	r3, r0, #1
   176f2:	428b      	cmp	r3, r1
   176f4:	d374      	bcc.n	177e0 <__divsi3+0xf8>
   176f6:	0903      	lsrs	r3, r0, #4
   176f8:	428b      	cmp	r3, r1
   176fa:	d35f      	bcc.n	177bc <__divsi3+0xd4>
   176fc:	0a03      	lsrs	r3, r0, #8
   176fe:	428b      	cmp	r3, r1
   17700:	d344      	bcc.n	1778c <__divsi3+0xa4>
   17702:	0b03      	lsrs	r3, r0, #12
   17704:	428b      	cmp	r3, r1
   17706:	d328      	bcc.n	1775a <__divsi3+0x72>
   17708:	0c03      	lsrs	r3, r0, #16
   1770a:	428b      	cmp	r3, r1
   1770c:	d30d      	bcc.n	1772a <__divsi3+0x42>
   1770e:	22ff      	movs	r2, #255	; 0xff
   17710:	0209      	lsls	r1, r1, #8
   17712:	ba12      	rev	r2, r2
   17714:	0c03      	lsrs	r3, r0, #16
   17716:	428b      	cmp	r3, r1
   17718:	d302      	bcc.n	17720 <__divsi3+0x38>
   1771a:	1212      	asrs	r2, r2, #8
   1771c:	0209      	lsls	r1, r1, #8
   1771e:	d065      	beq.n	177ec <__divsi3+0x104>
   17720:	0b03      	lsrs	r3, r0, #12
   17722:	428b      	cmp	r3, r1
   17724:	d319      	bcc.n	1775a <__divsi3+0x72>
   17726:	e000      	b.n	1772a <__divsi3+0x42>
   17728:	0a09      	lsrs	r1, r1, #8
   1772a:	0bc3      	lsrs	r3, r0, #15
   1772c:	428b      	cmp	r3, r1
   1772e:	d301      	bcc.n	17734 <__divsi3+0x4c>
   17730:	03cb      	lsls	r3, r1, #15
   17732:	1ac0      	subs	r0, r0, r3
   17734:	4152      	adcs	r2, r2
   17736:	0b83      	lsrs	r3, r0, #14
   17738:	428b      	cmp	r3, r1
   1773a:	d301      	bcc.n	17740 <__divsi3+0x58>
   1773c:	038b      	lsls	r3, r1, #14
   1773e:	1ac0      	subs	r0, r0, r3
   17740:	4152      	adcs	r2, r2
   17742:	0b43      	lsrs	r3, r0, #13
   17744:	428b      	cmp	r3, r1
   17746:	d301      	bcc.n	1774c <__divsi3+0x64>
   17748:	034b      	lsls	r3, r1, #13
   1774a:	1ac0      	subs	r0, r0, r3
   1774c:	4152      	adcs	r2, r2
   1774e:	0b03      	lsrs	r3, r0, #12
   17750:	428b      	cmp	r3, r1
   17752:	d301      	bcc.n	17758 <__divsi3+0x70>
   17754:	030b      	lsls	r3, r1, #12
   17756:	1ac0      	subs	r0, r0, r3
   17758:	4152      	adcs	r2, r2
   1775a:	0ac3      	lsrs	r3, r0, #11
   1775c:	428b      	cmp	r3, r1
   1775e:	d301      	bcc.n	17764 <__divsi3+0x7c>
   17760:	02cb      	lsls	r3, r1, #11
   17762:	1ac0      	subs	r0, r0, r3
   17764:	4152      	adcs	r2, r2
   17766:	0a83      	lsrs	r3, r0, #10
   17768:	428b      	cmp	r3, r1
   1776a:	d301      	bcc.n	17770 <__divsi3+0x88>
   1776c:	028b      	lsls	r3, r1, #10
   1776e:	1ac0      	subs	r0, r0, r3
   17770:	4152      	adcs	r2, r2
   17772:	0a43      	lsrs	r3, r0, #9
   17774:	428b      	cmp	r3, r1
   17776:	d301      	bcc.n	1777c <__divsi3+0x94>
   17778:	024b      	lsls	r3, r1, #9
   1777a:	1ac0      	subs	r0, r0, r3
   1777c:	4152      	adcs	r2, r2
   1777e:	0a03      	lsrs	r3, r0, #8
   17780:	428b      	cmp	r3, r1
   17782:	d301      	bcc.n	17788 <__divsi3+0xa0>
   17784:	020b      	lsls	r3, r1, #8
   17786:	1ac0      	subs	r0, r0, r3
   17788:	4152      	adcs	r2, r2
   1778a:	d2cd      	bcs.n	17728 <__divsi3+0x40>
   1778c:	09c3      	lsrs	r3, r0, #7
   1778e:	428b      	cmp	r3, r1
   17790:	d301      	bcc.n	17796 <__divsi3+0xae>
   17792:	01cb      	lsls	r3, r1, #7
   17794:	1ac0      	subs	r0, r0, r3
   17796:	4152      	adcs	r2, r2
   17798:	0983      	lsrs	r3, r0, #6
   1779a:	428b      	cmp	r3, r1
   1779c:	d301      	bcc.n	177a2 <__divsi3+0xba>
   1779e:	018b      	lsls	r3, r1, #6
   177a0:	1ac0      	subs	r0, r0, r3
   177a2:	4152      	adcs	r2, r2
   177a4:	0943      	lsrs	r3, r0, #5
   177a6:	428b      	cmp	r3, r1
   177a8:	d301      	bcc.n	177ae <__divsi3+0xc6>
   177aa:	014b      	lsls	r3, r1, #5
   177ac:	1ac0      	subs	r0, r0, r3
   177ae:	4152      	adcs	r2, r2
   177b0:	0903      	lsrs	r3, r0, #4
   177b2:	428b      	cmp	r3, r1
   177b4:	d301      	bcc.n	177ba <__divsi3+0xd2>
   177b6:	010b      	lsls	r3, r1, #4
   177b8:	1ac0      	subs	r0, r0, r3
   177ba:	4152      	adcs	r2, r2
   177bc:	08c3      	lsrs	r3, r0, #3
   177be:	428b      	cmp	r3, r1
   177c0:	d301      	bcc.n	177c6 <__divsi3+0xde>
   177c2:	00cb      	lsls	r3, r1, #3
   177c4:	1ac0      	subs	r0, r0, r3
   177c6:	4152      	adcs	r2, r2
   177c8:	0883      	lsrs	r3, r0, #2
   177ca:	428b      	cmp	r3, r1
   177cc:	d301      	bcc.n	177d2 <__divsi3+0xea>
   177ce:	008b      	lsls	r3, r1, #2
   177d0:	1ac0      	subs	r0, r0, r3
   177d2:	4152      	adcs	r2, r2
   177d4:	0843      	lsrs	r3, r0, #1
   177d6:	428b      	cmp	r3, r1
   177d8:	d301      	bcc.n	177de <__divsi3+0xf6>
   177da:	004b      	lsls	r3, r1, #1
   177dc:	1ac0      	subs	r0, r0, r3
   177de:	4152      	adcs	r2, r2
   177e0:	1a41      	subs	r1, r0, r1
   177e2:	d200      	bcs.n	177e6 <__divsi3+0xfe>
   177e4:	4601      	mov	r1, r0
   177e6:	4152      	adcs	r2, r2
   177e8:	4610      	mov	r0, r2
   177ea:	4770      	bx	lr
   177ec:	e05d      	b.n	178aa <__divsi3+0x1c2>
   177ee:	0fca      	lsrs	r2, r1, #31
   177f0:	d000      	beq.n	177f4 <__divsi3+0x10c>
   177f2:	4249      	negs	r1, r1
   177f4:	1003      	asrs	r3, r0, #32
   177f6:	d300      	bcc.n	177fa <__divsi3+0x112>
   177f8:	4240      	negs	r0, r0
   177fa:	4053      	eors	r3, r2
   177fc:	2200      	movs	r2, #0
   177fe:	469c      	mov	ip, r3
   17800:	0903      	lsrs	r3, r0, #4
   17802:	428b      	cmp	r3, r1
   17804:	d32d      	bcc.n	17862 <__divsi3+0x17a>
   17806:	0a03      	lsrs	r3, r0, #8
   17808:	428b      	cmp	r3, r1
   1780a:	d312      	bcc.n	17832 <__divsi3+0x14a>
   1780c:	22fc      	movs	r2, #252	; 0xfc
   1780e:	0189      	lsls	r1, r1, #6
   17810:	ba12      	rev	r2, r2
   17812:	0a03      	lsrs	r3, r0, #8
   17814:	428b      	cmp	r3, r1
   17816:	d30c      	bcc.n	17832 <__divsi3+0x14a>
   17818:	0189      	lsls	r1, r1, #6
   1781a:	1192      	asrs	r2, r2, #6
   1781c:	428b      	cmp	r3, r1
   1781e:	d308      	bcc.n	17832 <__divsi3+0x14a>
   17820:	0189      	lsls	r1, r1, #6
   17822:	1192      	asrs	r2, r2, #6
   17824:	428b      	cmp	r3, r1
   17826:	d304      	bcc.n	17832 <__divsi3+0x14a>
   17828:	0189      	lsls	r1, r1, #6
   1782a:	d03a      	beq.n	178a2 <__divsi3+0x1ba>
   1782c:	1192      	asrs	r2, r2, #6
   1782e:	e000      	b.n	17832 <__divsi3+0x14a>
   17830:	0989      	lsrs	r1, r1, #6
   17832:	09c3      	lsrs	r3, r0, #7
   17834:	428b      	cmp	r3, r1
   17836:	d301      	bcc.n	1783c <__divsi3+0x154>
   17838:	01cb      	lsls	r3, r1, #7
   1783a:	1ac0      	subs	r0, r0, r3
   1783c:	4152      	adcs	r2, r2
   1783e:	0983      	lsrs	r3, r0, #6
   17840:	428b      	cmp	r3, r1
   17842:	d301      	bcc.n	17848 <__divsi3+0x160>
   17844:	018b      	lsls	r3, r1, #6
   17846:	1ac0      	subs	r0, r0, r3
   17848:	4152      	adcs	r2, r2
   1784a:	0943      	lsrs	r3, r0, #5
   1784c:	428b      	cmp	r3, r1
   1784e:	d301      	bcc.n	17854 <__divsi3+0x16c>
   17850:	014b      	lsls	r3, r1, #5
   17852:	1ac0      	subs	r0, r0, r3
   17854:	4152      	adcs	r2, r2
   17856:	0903      	lsrs	r3, r0, #4
   17858:	428b      	cmp	r3, r1
   1785a:	d301      	bcc.n	17860 <__divsi3+0x178>
   1785c:	010b      	lsls	r3, r1, #4
   1785e:	1ac0      	subs	r0, r0, r3
   17860:	4152      	adcs	r2, r2
   17862:	08c3      	lsrs	r3, r0, #3
   17864:	428b      	cmp	r3, r1
   17866:	d301      	bcc.n	1786c <__divsi3+0x184>
   17868:	00cb      	lsls	r3, r1, #3
   1786a:	1ac0      	subs	r0, r0, r3
   1786c:	4152      	adcs	r2, r2
   1786e:	0883      	lsrs	r3, r0, #2
   17870:	428b      	cmp	r3, r1
   17872:	d301      	bcc.n	17878 <__divsi3+0x190>
   17874:	008b      	lsls	r3, r1, #2
   17876:	1ac0      	subs	r0, r0, r3
   17878:	4152      	adcs	r2, r2
   1787a:	d2d9      	bcs.n	17830 <__divsi3+0x148>
   1787c:	0843      	lsrs	r3, r0, #1
   1787e:	428b      	cmp	r3, r1
   17880:	d301      	bcc.n	17886 <__divsi3+0x19e>
   17882:	004b      	lsls	r3, r1, #1
   17884:	1ac0      	subs	r0, r0, r3
   17886:	4152      	adcs	r2, r2
   17888:	1a41      	subs	r1, r0, r1
   1788a:	d200      	bcs.n	1788e <__divsi3+0x1a6>
   1788c:	4601      	mov	r1, r0
   1788e:	4663      	mov	r3, ip
   17890:	4152      	adcs	r2, r2
   17892:	105b      	asrs	r3, r3, #1
   17894:	4610      	mov	r0, r2
   17896:	d301      	bcc.n	1789c <__divsi3+0x1b4>
   17898:	4240      	negs	r0, r0
   1789a:	2b00      	cmp	r3, #0
   1789c:	d500      	bpl.n	178a0 <__divsi3+0x1b8>
   1789e:	4249      	negs	r1, r1
   178a0:	4770      	bx	lr
   178a2:	4663      	mov	r3, ip
   178a4:	105b      	asrs	r3, r3, #1
   178a6:	d300      	bcc.n	178aa <__divsi3+0x1c2>
   178a8:	4240      	negs	r0, r0
   178aa:	b501      	push	{r0, lr}
   178ac:	2000      	movs	r0, #0
   178ae:	f000 f805 	bl	178bc <__aeabi_idiv0>
   178b2:	bd02      	pop	{r1, pc}

000178b4 <__aeabi_idivmod>:
   178b4:	2900      	cmp	r1, #0
   178b6:	d0f8      	beq.n	178aa <__divsi3+0x1c2>
   178b8:	e716      	b.n	176e8 <__divsi3>
   178ba:	4770      	bx	lr

000178bc <__aeabi_idiv0>:
   178bc:	4770      	bx	lr
   178be:	46c0      	nop			; (mov r8, r8)

000178c0 <__aeabi_lmul>:
   178c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   178c2:	46ce      	mov	lr, r9
   178c4:	4647      	mov	r7, r8
   178c6:	0415      	lsls	r5, r2, #16
   178c8:	0c2d      	lsrs	r5, r5, #16
   178ca:	002e      	movs	r6, r5
   178cc:	b580      	push	{r7, lr}
   178ce:	0407      	lsls	r7, r0, #16
   178d0:	0c14      	lsrs	r4, r2, #16
   178d2:	0c3f      	lsrs	r7, r7, #16
   178d4:	4699      	mov	r9, r3
   178d6:	0c03      	lsrs	r3, r0, #16
   178d8:	437e      	muls	r6, r7
   178da:	435d      	muls	r5, r3
   178dc:	4367      	muls	r7, r4
   178de:	4363      	muls	r3, r4
   178e0:	197f      	adds	r7, r7, r5
   178e2:	0c34      	lsrs	r4, r6, #16
   178e4:	19e4      	adds	r4, r4, r7
   178e6:	469c      	mov	ip, r3
   178e8:	42a5      	cmp	r5, r4
   178ea:	d903      	bls.n	178f4 <__aeabi_lmul+0x34>
   178ec:	2380      	movs	r3, #128	; 0x80
   178ee:	025b      	lsls	r3, r3, #9
   178f0:	4698      	mov	r8, r3
   178f2:	44c4      	add	ip, r8
   178f4:	464b      	mov	r3, r9
   178f6:	4351      	muls	r1, r2
   178f8:	4343      	muls	r3, r0
   178fa:	0436      	lsls	r6, r6, #16
   178fc:	0c36      	lsrs	r6, r6, #16
   178fe:	0c25      	lsrs	r5, r4, #16
   17900:	0424      	lsls	r4, r4, #16
   17902:	4465      	add	r5, ip
   17904:	19a4      	adds	r4, r4, r6
   17906:	1859      	adds	r1, r3, r1
   17908:	1949      	adds	r1, r1, r5
   1790a:	0020      	movs	r0, r4
   1790c:	bc0c      	pop	{r2, r3}
   1790e:	4690      	mov	r8, r2
   17910:	4699      	mov	r9, r3
   17912:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017914 <atoi>:
   17914:	b510      	push	{r4, lr}
   17916:	220a      	movs	r2, #10
   17918:	2100      	movs	r1, #0
   1791a:	f000 fc11 	bl	18140 <strtol>
   1791e:	bd10      	pop	{r4, pc}

00017920 <__libc_init_array>:
   17920:	b570      	push	{r4, r5, r6, lr}
   17922:	2600      	movs	r6, #0
   17924:	4d0c      	ldr	r5, [pc, #48]	; (17958 <__libc_init_array+0x38>)
   17926:	4c0d      	ldr	r4, [pc, #52]	; (1795c <__libc_init_array+0x3c>)
   17928:	1b64      	subs	r4, r4, r5
   1792a:	10a4      	asrs	r4, r4, #2
   1792c:	42a6      	cmp	r6, r4
   1792e:	d109      	bne.n	17944 <__libc_init_array+0x24>
   17930:	2600      	movs	r6, #0
   17932:	f004 fa19 	bl	1bd68 <_init>
   17936:	4d0a      	ldr	r5, [pc, #40]	; (17960 <__libc_init_array+0x40>)
   17938:	4c0a      	ldr	r4, [pc, #40]	; (17964 <__libc_init_array+0x44>)
   1793a:	1b64      	subs	r4, r4, r5
   1793c:	10a4      	asrs	r4, r4, #2
   1793e:	42a6      	cmp	r6, r4
   17940:	d105      	bne.n	1794e <__libc_init_array+0x2e>
   17942:	bd70      	pop	{r4, r5, r6, pc}
   17944:	00b3      	lsls	r3, r6, #2
   17946:	58eb      	ldr	r3, [r5, r3]
   17948:	4798      	blx	r3
   1794a:	3601      	adds	r6, #1
   1794c:	e7ee      	b.n	1792c <__libc_init_array+0xc>
   1794e:	00b3      	lsls	r3, r6, #2
   17950:	58eb      	ldr	r3, [r5, r3]
   17952:	4798      	blx	r3
   17954:	3601      	adds	r6, #1
   17956:	e7f2      	b.n	1793e <__libc_init_array+0x1e>
   17958:	0001bd74 	.word	0x0001bd74
   1795c:	0001bd74 	.word	0x0001bd74
   17960:	0001bd74 	.word	0x0001bd74
   17964:	0001bd78 	.word	0x0001bd78

00017968 <malloc>:
   17968:	b510      	push	{r4, lr}
   1796a:	4b03      	ldr	r3, [pc, #12]	; (17978 <malloc+0x10>)
   1796c:	0001      	movs	r1, r0
   1796e:	6818      	ldr	r0, [r3, #0]
   17970:	f000 f87c 	bl	17a6c <_malloc_r>
   17974:	bd10      	pop	{r4, pc}
   17976:	46c0      	nop			; (mov r8, r8)
   17978:	20000200 	.word	0x20000200

0001797c <free>:
   1797c:	b510      	push	{r4, lr}
   1797e:	4b03      	ldr	r3, [pc, #12]	; (1798c <free+0x10>)
   17980:	0001      	movs	r1, r0
   17982:	6818      	ldr	r0, [r3, #0]
   17984:	f000 f828 	bl	179d8 <_free_r>
   17988:	bd10      	pop	{r4, pc}
   1798a:	46c0      	nop			; (mov r8, r8)
   1798c:	20000200 	.word	0x20000200

00017990 <memcpy>:
   17990:	2300      	movs	r3, #0
   17992:	b510      	push	{r4, lr}
   17994:	429a      	cmp	r2, r3
   17996:	d100      	bne.n	1799a <memcpy+0xa>
   17998:	bd10      	pop	{r4, pc}
   1799a:	5ccc      	ldrb	r4, [r1, r3]
   1799c:	54c4      	strb	r4, [r0, r3]
   1799e:	3301      	adds	r3, #1
   179a0:	e7f8      	b.n	17994 <memcpy+0x4>

000179a2 <memmove>:
   179a2:	b510      	push	{r4, lr}
   179a4:	4288      	cmp	r0, r1
   179a6:	d902      	bls.n	179ae <memmove+0xc>
   179a8:	188b      	adds	r3, r1, r2
   179aa:	4298      	cmp	r0, r3
   179ac:	d308      	bcc.n	179c0 <memmove+0x1e>
   179ae:	2300      	movs	r3, #0
   179b0:	429a      	cmp	r2, r3
   179b2:	d007      	beq.n	179c4 <memmove+0x22>
   179b4:	5ccc      	ldrb	r4, [r1, r3]
   179b6:	54c4      	strb	r4, [r0, r3]
   179b8:	3301      	adds	r3, #1
   179ba:	e7f9      	b.n	179b0 <memmove+0xe>
   179bc:	5c8b      	ldrb	r3, [r1, r2]
   179be:	5483      	strb	r3, [r0, r2]
   179c0:	3a01      	subs	r2, #1
   179c2:	d2fb      	bcs.n	179bc <memmove+0x1a>
   179c4:	bd10      	pop	{r4, pc}

000179c6 <memset>:
   179c6:	0003      	movs	r3, r0
   179c8:	1882      	adds	r2, r0, r2
   179ca:	4293      	cmp	r3, r2
   179cc:	d100      	bne.n	179d0 <memset+0xa>
   179ce:	4770      	bx	lr
   179d0:	7019      	strb	r1, [r3, #0]
   179d2:	3301      	adds	r3, #1
   179d4:	e7f9      	b.n	179ca <memset+0x4>
	...

000179d8 <_free_r>:
   179d8:	b570      	push	{r4, r5, r6, lr}
   179da:	0005      	movs	r5, r0
   179dc:	2900      	cmp	r1, #0
   179de:	d010      	beq.n	17a02 <_free_r+0x2a>
   179e0:	1f0c      	subs	r4, r1, #4
   179e2:	6823      	ldr	r3, [r4, #0]
   179e4:	2b00      	cmp	r3, #0
   179e6:	da00      	bge.n	179ea <_free_r+0x12>
   179e8:	18e4      	adds	r4, r4, r3
   179ea:	0028      	movs	r0, r5
   179ec:	f000 ff56 	bl	1889c <__malloc_lock>
   179f0:	4a1d      	ldr	r2, [pc, #116]	; (17a68 <_free_r+0x90>)
   179f2:	6813      	ldr	r3, [r2, #0]
   179f4:	2b00      	cmp	r3, #0
   179f6:	d105      	bne.n	17a04 <_free_r+0x2c>
   179f8:	6063      	str	r3, [r4, #4]
   179fa:	6014      	str	r4, [r2, #0]
   179fc:	0028      	movs	r0, r5
   179fe:	f000 ff4e 	bl	1889e <__malloc_unlock>
   17a02:	bd70      	pop	{r4, r5, r6, pc}
   17a04:	42a3      	cmp	r3, r4
   17a06:	d909      	bls.n	17a1c <_free_r+0x44>
   17a08:	6821      	ldr	r1, [r4, #0]
   17a0a:	1860      	adds	r0, r4, r1
   17a0c:	4283      	cmp	r3, r0
   17a0e:	d1f3      	bne.n	179f8 <_free_r+0x20>
   17a10:	6818      	ldr	r0, [r3, #0]
   17a12:	685b      	ldr	r3, [r3, #4]
   17a14:	1841      	adds	r1, r0, r1
   17a16:	6021      	str	r1, [r4, #0]
   17a18:	e7ee      	b.n	179f8 <_free_r+0x20>
   17a1a:	0013      	movs	r3, r2
   17a1c:	685a      	ldr	r2, [r3, #4]
   17a1e:	2a00      	cmp	r2, #0
   17a20:	d001      	beq.n	17a26 <_free_r+0x4e>
   17a22:	42a2      	cmp	r2, r4
   17a24:	d9f9      	bls.n	17a1a <_free_r+0x42>
   17a26:	6819      	ldr	r1, [r3, #0]
   17a28:	1858      	adds	r0, r3, r1
   17a2a:	42a0      	cmp	r0, r4
   17a2c:	d10b      	bne.n	17a46 <_free_r+0x6e>
   17a2e:	6820      	ldr	r0, [r4, #0]
   17a30:	1809      	adds	r1, r1, r0
   17a32:	1858      	adds	r0, r3, r1
   17a34:	6019      	str	r1, [r3, #0]
   17a36:	4282      	cmp	r2, r0
   17a38:	d1e0      	bne.n	179fc <_free_r+0x24>
   17a3a:	6810      	ldr	r0, [r2, #0]
   17a3c:	6852      	ldr	r2, [r2, #4]
   17a3e:	1841      	adds	r1, r0, r1
   17a40:	6019      	str	r1, [r3, #0]
   17a42:	605a      	str	r2, [r3, #4]
   17a44:	e7da      	b.n	179fc <_free_r+0x24>
   17a46:	42a0      	cmp	r0, r4
   17a48:	d902      	bls.n	17a50 <_free_r+0x78>
   17a4a:	230c      	movs	r3, #12
   17a4c:	602b      	str	r3, [r5, #0]
   17a4e:	e7d5      	b.n	179fc <_free_r+0x24>
   17a50:	6821      	ldr	r1, [r4, #0]
   17a52:	1860      	adds	r0, r4, r1
   17a54:	4282      	cmp	r2, r0
   17a56:	d103      	bne.n	17a60 <_free_r+0x88>
   17a58:	6810      	ldr	r0, [r2, #0]
   17a5a:	6852      	ldr	r2, [r2, #4]
   17a5c:	1841      	adds	r1, r0, r1
   17a5e:	6021      	str	r1, [r4, #0]
   17a60:	6062      	str	r2, [r4, #4]
   17a62:	605c      	str	r4, [r3, #4]
   17a64:	e7ca      	b.n	179fc <_free_r+0x24>
   17a66:	46c0      	nop			; (mov r8, r8)
   17a68:	20000fa4 	.word	0x20000fa4

00017a6c <_malloc_r>:
   17a6c:	2303      	movs	r3, #3
   17a6e:	b570      	push	{r4, r5, r6, lr}
   17a70:	1ccd      	adds	r5, r1, #3
   17a72:	439d      	bics	r5, r3
   17a74:	3508      	adds	r5, #8
   17a76:	0006      	movs	r6, r0
   17a78:	2d0c      	cmp	r5, #12
   17a7a:	d21e      	bcs.n	17aba <_malloc_r+0x4e>
   17a7c:	250c      	movs	r5, #12
   17a7e:	42a9      	cmp	r1, r5
   17a80:	d81d      	bhi.n	17abe <_malloc_r+0x52>
   17a82:	0030      	movs	r0, r6
   17a84:	f000 ff0a 	bl	1889c <__malloc_lock>
   17a88:	4a25      	ldr	r2, [pc, #148]	; (17b20 <_malloc_r+0xb4>)
   17a8a:	6814      	ldr	r4, [r2, #0]
   17a8c:	0021      	movs	r1, r4
   17a8e:	2900      	cmp	r1, #0
   17a90:	d119      	bne.n	17ac6 <_malloc_r+0x5a>
   17a92:	4c24      	ldr	r4, [pc, #144]	; (17b24 <_malloc_r+0xb8>)
   17a94:	6823      	ldr	r3, [r4, #0]
   17a96:	2b00      	cmp	r3, #0
   17a98:	d103      	bne.n	17aa2 <_malloc_r+0x36>
   17a9a:	0030      	movs	r0, r6
   17a9c:	f000 f8dc 	bl	17c58 <_sbrk_r>
   17aa0:	6020      	str	r0, [r4, #0]
   17aa2:	0029      	movs	r1, r5
   17aa4:	0030      	movs	r0, r6
   17aa6:	f000 f8d7 	bl	17c58 <_sbrk_r>
   17aaa:	1c43      	adds	r3, r0, #1
   17aac:	d12c      	bne.n	17b08 <_malloc_r+0x9c>
   17aae:	230c      	movs	r3, #12
   17ab0:	0030      	movs	r0, r6
   17ab2:	6033      	str	r3, [r6, #0]
   17ab4:	f000 fef3 	bl	1889e <__malloc_unlock>
   17ab8:	e003      	b.n	17ac2 <_malloc_r+0x56>
   17aba:	2d00      	cmp	r5, #0
   17abc:	dadf      	bge.n	17a7e <_malloc_r+0x12>
   17abe:	230c      	movs	r3, #12
   17ac0:	6033      	str	r3, [r6, #0]
   17ac2:	2000      	movs	r0, #0
   17ac4:	bd70      	pop	{r4, r5, r6, pc}
   17ac6:	680b      	ldr	r3, [r1, #0]
   17ac8:	1b5b      	subs	r3, r3, r5
   17aca:	d41a      	bmi.n	17b02 <_malloc_r+0x96>
   17acc:	2b0b      	cmp	r3, #11
   17ace:	d903      	bls.n	17ad8 <_malloc_r+0x6c>
   17ad0:	600b      	str	r3, [r1, #0]
   17ad2:	18cc      	adds	r4, r1, r3
   17ad4:	6025      	str	r5, [r4, #0]
   17ad6:	e003      	b.n	17ae0 <_malloc_r+0x74>
   17ad8:	428c      	cmp	r4, r1
   17ada:	d10e      	bne.n	17afa <_malloc_r+0x8e>
   17adc:	6863      	ldr	r3, [r4, #4]
   17ade:	6013      	str	r3, [r2, #0]
   17ae0:	0030      	movs	r0, r6
   17ae2:	f000 fedc 	bl	1889e <__malloc_unlock>
   17ae6:	0020      	movs	r0, r4
   17ae8:	2207      	movs	r2, #7
   17aea:	300b      	adds	r0, #11
   17aec:	1d23      	adds	r3, r4, #4
   17aee:	4390      	bics	r0, r2
   17af0:	1ac3      	subs	r3, r0, r3
   17af2:	d0e7      	beq.n	17ac4 <_malloc_r+0x58>
   17af4:	425a      	negs	r2, r3
   17af6:	50e2      	str	r2, [r4, r3]
   17af8:	e7e4      	b.n	17ac4 <_malloc_r+0x58>
   17afa:	684b      	ldr	r3, [r1, #4]
   17afc:	6063      	str	r3, [r4, #4]
   17afe:	000c      	movs	r4, r1
   17b00:	e7ee      	b.n	17ae0 <_malloc_r+0x74>
   17b02:	000c      	movs	r4, r1
   17b04:	6849      	ldr	r1, [r1, #4]
   17b06:	e7c2      	b.n	17a8e <_malloc_r+0x22>
   17b08:	2303      	movs	r3, #3
   17b0a:	1cc4      	adds	r4, r0, #3
   17b0c:	439c      	bics	r4, r3
   17b0e:	42a0      	cmp	r0, r4
   17b10:	d0e0      	beq.n	17ad4 <_malloc_r+0x68>
   17b12:	1a21      	subs	r1, r4, r0
   17b14:	0030      	movs	r0, r6
   17b16:	f000 f89f 	bl	17c58 <_sbrk_r>
   17b1a:	1c43      	adds	r3, r0, #1
   17b1c:	d1da      	bne.n	17ad4 <_malloc_r+0x68>
   17b1e:	e7c6      	b.n	17aae <_malloc_r+0x42>
   17b20:	20000fa4 	.word	0x20000fa4
   17b24:	20000fa8 	.word	0x20000fa8

00017b28 <iprintf>:
   17b28:	b40f      	push	{r0, r1, r2, r3}
   17b2a:	4b0b      	ldr	r3, [pc, #44]	; (17b58 <iprintf+0x30>)
   17b2c:	b513      	push	{r0, r1, r4, lr}
   17b2e:	681c      	ldr	r4, [r3, #0]
   17b30:	2c00      	cmp	r4, #0
   17b32:	d005      	beq.n	17b40 <iprintf+0x18>
   17b34:	69a3      	ldr	r3, [r4, #24]
   17b36:	2b00      	cmp	r3, #0
   17b38:	d102      	bne.n	17b40 <iprintf+0x18>
   17b3a:	0020      	movs	r0, r4
   17b3c:	f000 fd98 	bl	18670 <__sinit>
   17b40:	ab05      	add	r3, sp, #20
   17b42:	9a04      	ldr	r2, [sp, #16]
   17b44:	68a1      	ldr	r1, [r4, #8]
   17b46:	0020      	movs	r0, r4
   17b48:	9301      	str	r3, [sp, #4]
   17b4a:	f001 f837 	bl	18bbc <_vfiprintf_r>
   17b4e:	bc16      	pop	{r1, r2, r4}
   17b50:	bc08      	pop	{r3}
   17b52:	b004      	add	sp, #16
   17b54:	4718      	bx	r3
   17b56:	46c0      	nop			; (mov r8, r8)
   17b58:	20000200 	.word	0x20000200

00017b5c <putchar>:
   17b5c:	4b08      	ldr	r3, [pc, #32]	; (17b80 <putchar+0x24>)
   17b5e:	b570      	push	{r4, r5, r6, lr}
   17b60:	681c      	ldr	r4, [r3, #0]
   17b62:	0005      	movs	r5, r0
   17b64:	2c00      	cmp	r4, #0
   17b66:	d005      	beq.n	17b74 <putchar+0x18>
   17b68:	69a3      	ldr	r3, [r4, #24]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d102      	bne.n	17b74 <putchar+0x18>
   17b6e:	0020      	movs	r0, r4
   17b70:	f000 fd7e 	bl	18670 <__sinit>
   17b74:	0029      	movs	r1, r5
   17b76:	68a2      	ldr	r2, [r4, #8]
   17b78:	0020      	movs	r0, r4
   17b7a:	f001 fac3 	bl	19104 <_putc_r>
   17b7e:	bd70      	pop	{r4, r5, r6, pc}
   17b80:	20000200 	.word	0x20000200

00017b84 <_puts_r>:
   17b84:	b570      	push	{r4, r5, r6, lr}
   17b86:	0005      	movs	r5, r0
   17b88:	000e      	movs	r6, r1
   17b8a:	2800      	cmp	r0, #0
   17b8c:	d004      	beq.n	17b98 <_puts_r+0x14>
   17b8e:	6983      	ldr	r3, [r0, #24]
   17b90:	2b00      	cmp	r3, #0
   17b92:	d101      	bne.n	17b98 <_puts_r+0x14>
   17b94:	f000 fd6c 	bl	18670 <__sinit>
   17b98:	69ab      	ldr	r3, [r5, #24]
   17b9a:	68ac      	ldr	r4, [r5, #8]
   17b9c:	2b00      	cmp	r3, #0
   17b9e:	d102      	bne.n	17ba6 <_puts_r+0x22>
   17ba0:	0028      	movs	r0, r5
   17ba2:	f000 fd65 	bl	18670 <__sinit>
   17ba6:	4b24      	ldr	r3, [pc, #144]	; (17c38 <_puts_r+0xb4>)
   17ba8:	429c      	cmp	r4, r3
   17baa:	d10f      	bne.n	17bcc <_puts_r+0x48>
   17bac:	686c      	ldr	r4, [r5, #4]
   17bae:	89a3      	ldrh	r3, [r4, #12]
   17bb0:	071b      	lsls	r3, r3, #28
   17bb2:	d502      	bpl.n	17bba <_puts_r+0x36>
   17bb4:	6923      	ldr	r3, [r4, #16]
   17bb6:	2b00      	cmp	r3, #0
   17bb8:	d120      	bne.n	17bfc <_puts_r+0x78>
   17bba:	0021      	movs	r1, r4
   17bbc:	0028      	movs	r0, r5
   17bbe:	f000 fbe9 	bl	18394 <__swsetup_r>
   17bc2:	2800      	cmp	r0, #0
   17bc4:	d01a      	beq.n	17bfc <_puts_r+0x78>
   17bc6:	2001      	movs	r0, #1
   17bc8:	4240      	negs	r0, r0
   17bca:	bd70      	pop	{r4, r5, r6, pc}
   17bcc:	4b1b      	ldr	r3, [pc, #108]	; (17c3c <_puts_r+0xb8>)
   17bce:	429c      	cmp	r4, r3
   17bd0:	d101      	bne.n	17bd6 <_puts_r+0x52>
   17bd2:	68ac      	ldr	r4, [r5, #8]
   17bd4:	e7eb      	b.n	17bae <_puts_r+0x2a>
   17bd6:	4b1a      	ldr	r3, [pc, #104]	; (17c40 <_puts_r+0xbc>)
   17bd8:	429c      	cmp	r4, r3
   17bda:	d1e8      	bne.n	17bae <_puts_r+0x2a>
   17bdc:	68ec      	ldr	r4, [r5, #12]
   17bde:	e7e6      	b.n	17bae <_puts_r+0x2a>
   17be0:	3b01      	subs	r3, #1
   17be2:	3601      	adds	r6, #1
   17be4:	60a3      	str	r3, [r4, #8]
   17be6:	2b00      	cmp	r3, #0
   17be8:	da04      	bge.n	17bf4 <_puts_r+0x70>
   17bea:	69a2      	ldr	r2, [r4, #24]
   17bec:	4293      	cmp	r3, r2
   17bee:	db16      	blt.n	17c1e <_puts_r+0x9a>
   17bf0:	290a      	cmp	r1, #10
   17bf2:	d014      	beq.n	17c1e <_puts_r+0x9a>
   17bf4:	6823      	ldr	r3, [r4, #0]
   17bf6:	1c5a      	adds	r2, r3, #1
   17bf8:	6022      	str	r2, [r4, #0]
   17bfa:	7019      	strb	r1, [r3, #0]
   17bfc:	7831      	ldrb	r1, [r6, #0]
   17bfe:	68a3      	ldr	r3, [r4, #8]
   17c00:	2900      	cmp	r1, #0
   17c02:	d1ed      	bne.n	17be0 <_puts_r+0x5c>
   17c04:	3b01      	subs	r3, #1
   17c06:	60a3      	str	r3, [r4, #8]
   17c08:	2b00      	cmp	r3, #0
   17c0a:	da0f      	bge.n	17c2c <_puts_r+0xa8>
   17c0c:	0022      	movs	r2, r4
   17c0e:	310a      	adds	r1, #10
   17c10:	0028      	movs	r0, r5
   17c12:	f000 fb69 	bl	182e8 <__swbuf_r>
   17c16:	1c43      	adds	r3, r0, #1
   17c18:	d0d5      	beq.n	17bc6 <_puts_r+0x42>
   17c1a:	200a      	movs	r0, #10
   17c1c:	e7d5      	b.n	17bca <_puts_r+0x46>
   17c1e:	0022      	movs	r2, r4
   17c20:	0028      	movs	r0, r5
   17c22:	f000 fb61 	bl	182e8 <__swbuf_r>
   17c26:	1c43      	adds	r3, r0, #1
   17c28:	d1e8      	bne.n	17bfc <_puts_r+0x78>
   17c2a:	e7cc      	b.n	17bc6 <_puts_r+0x42>
   17c2c:	200a      	movs	r0, #10
   17c2e:	6823      	ldr	r3, [r4, #0]
   17c30:	1c5a      	adds	r2, r3, #1
   17c32:	6022      	str	r2, [r4, #0]
   17c34:	7018      	strb	r0, [r3, #0]
   17c36:	e7c8      	b.n	17bca <_puts_r+0x46>
   17c38:	0001bbe8 	.word	0x0001bbe8
   17c3c:	0001bc08 	.word	0x0001bc08
   17c40:	0001bbc8 	.word	0x0001bbc8

00017c44 <puts>:
   17c44:	b510      	push	{r4, lr}
   17c46:	4b03      	ldr	r3, [pc, #12]	; (17c54 <puts+0x10>)
   17c48:	0001      	movs	r1, r0
   17c4a:	6818      	ldr	r0, [r3, #0]
   17c4c:	f7ff ff9a 	bl	17b84 <_puts_r>
   17c50:	bd10      	pop	{r4, pc}
   17c52:	46c0      	nop			; (mov r8, r8)
   17c54:	20000200 	.word	0x20000200

00017c58 <_sbrk_r>:
   17c58:	2300      	movs	r3, #0
   17c5a:	b570      	push	{r4, r5, r6, lr}
   17c5c:	4c06      	ldr	r4, [pc, #24]	; (17c78 <_sbrk_r+0x20>)
   17c5e:	0005      	movs	r5, r0
   17c60:	0008      	movs	r0, r1
   17c62:	6023      	str	r3, [r4, #0]
   17c64:	f7fa fb0e 	bl	12284 <_sbrk>
   17c68:	1c43      	adds	r3, r0, #1
   17c6a:	d103      	bne.n	17c74 <_sbrk_r+0x1c>
   17c6c:	6823      	ldr	r3, [r4, #0]
   17c6e:	2b00      	cmp	r3, #0
   17c70:	d000      	beq.n	17c74 <_sbrk_r+0x1c>
   17c72:	602b      	str	r3, [r5, #0]
   17c74:	bd70      	pop	{r4, r5, r6, pc}
   17c76:	46c0      	nop			; (mov r8, r8)
   17c78:	200017a8 	.word	0x200017a8

00017c7c <setbuf>:
   17c7c:	424a      	negs	r2, r1
   17c7e:	414a      	adcs	r2, r1
   17c80:	2380      	movs	r3, #128	; 0x80
   17c82:	b510      	push	{r4, lr}
   17c84:	0052      	lsls	r2, r2, #1
   17c86:	00db      	lsls	r3, r3, #3
   17c88:	f000 f802 	bl	17c90 <setvbuf>
   17c8c:	bd10      	pop	{r4, pc}
	...

00017c90 <setvbuf>:
   17c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c92:	001d      	movs	r5, r3
   17c94:	4b4f      	ldr	r3, [pc, #316]	; (17dd4 <setvbuf+0x144>)
   17c96:	b085      	sub	sp, #20
   17c98:	681e      	ldr	r6, [r3, #0]
   17c9a:	0004      	movs	r4, r0
   17c9c:	000f      	movs	r7, r1
   17c9e:	9200      	str	r2, [sp, #0]
   17ca0:	2e00      	cmp	r6, #0
   17ca2:	d005      	beq.n	17cb0 <setvbuf+0x20>
   17ca4:	69b3      	ldr	r3, [r6, #24]
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d102      	bne.n	17cb0 <setvbuf+0x20>
   17caa:	0030      	movs	r0, r6
   17cac:	f000 fce0 	bl	18670 <__sinit>
   17cb0:	4b49      	ldr	r3, [pc, #292]	; (17dd8 <setvbuf+0x148>)
   17cb2:	429c      	cmp	r4, r3
   17cb4:	d150      	bne.n	17d58 <setvbuf+0xc8>
   17cb6:	6874      	ldr	r4, [r6, #4]
   17cb8:	9b00      	ldr	r3, [sp, #0]
   17cba:	2b02      	cmp	r3, #2
   17cbc:	d005      	beq.n	17cca <setvbuf+0x3a>
   17cbe:	2b01      	cmp	r3, #1
   17cc0:	d900      	bls.n	17cc4 <setvbuf+0x34>
   17cc2:	e084      	b.n	17dce <setvbuf+0x13e>
   17cc4:	2d00      	cmp	r5, #0
   17cc6:	da00      	bge.n	17cca <setvbuf+0x3a>
   17cc8:	e081      	b.n	17dce <setvbuf+0x13e>
   17cca:	0021      	movs	r1, r4
   17ccc:	0030      	movs	r0, r6
   17cce:	f000 fc61 	bl	18594 <_fflush_r>
   17cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17cd4:	2900      	cmp	r1, #0
   17cd6:	d008      	beq.n	17cea <setvbuf+0x5a>
   17cd8:	0023      	movs	r3, r4
   17cda:	3344      	adds	r3, #68	; 0x44
   17cdc:	4299      	cmp	r1, r3
   17cde:	d002      	beq.n	17ce6 <setvbuf+0x56>
   17ce0:	0030      	movs	r0, r6
   17ce2:	f7ff fe79 	bl	179d8 <_free_r>
   17ce6:	2300      	movs	r3, #0
   17ce8:	6363      	str	r3, [r4, #52]	; 0x34
   17cea:	2300      	movs	r3, #0
   17cec:	61a3      	str	r3, [r4, #24]
   17cee:	6063      	str	r3, [r4, #4]
   17cf0:	89a3      	ldrh	r3, [r4, #12]
   17cf2:	061b      	lsls	r3, r3, #24
   17cf4:	d503      	bpl.n	17cfe <setvbuf+0x6e>
   17cf6:	6921      	ldr	r1, [r4, #16]
   17cf8:	0030      	movs	r0, r6
   17cfa:	f7ff fe6d 	bl	179d8 <_free_r>
   17cfe:	89a3      	ldrh	r3, [r4, #12]
   17d00:	4a36      	ldr	r2, [pc, #216]	; (17ddc <setvbuf+0x14c>)
   17d02:	4013      	ands	r3, r2
   17d04:	81a3      	strh	r3, [r4, #12]
   17d06:	9b00      	ldr	r3, [sp, #0]
   17d08:	2b02      	cmp	r3, #2
   17d0a:	d05a      	beq.n	17dc2 <setvbuf+0x132>
   17d0c:	ab03      	add	r3, sp, #12
   17d0e:	aa02      	add	r2, sp, #8
   17d10:	0021      	movs	r1, r4
   17d12:	0030      	movs	r0, r6
   17d14:	f000 fd44 	bl	187a0 <__swhatbuf_r>
   17d18:	89a3      	ldrh	r3, [r4, #12]
   17d1a:	4318      	orrs	r0, r3
   17d1c:	81a0      	strh	r0, [r4, #12]
   17d1e:	2d00      	cmp	r5, #0
   17d20:	d124      	bne.n	17d6c <setvbuf+0xdc>
   17d22:	9d02      	ldr	r5, [sp, #8]
   17d24:	0028      	movs	r0, r5
   17d26:	f7ff fe1f 	bl	17968 <malloc>
   17d2a:	9501      	str	r5, [sp, #4]
   17d2c:	1e07      	subs	r7, r0, #0
   17d2e:	d142      	bne.n	17db6 <setvbuf+0x126>
   17d30:	9b02      	ldr	r3, [sp, #8]
   17d32:	9301      	str	r3, [sp, #4]
   17d34:	42ab      	cmp	r3, r5
   17d36:	d139      	bne.n	17dac <setvbuf+0x11c>
   17d38:	2001      	movs	r0, #1
   17d3a:	4240      	negs	r0, r0
   17d3c:	2302      	movs	r3, #2
   17d3e:	89a2      	ldrh	r2, [r4, #12]
   17d40:	4313      	orrs	r3, r2
   17d42:	81a3      	strh	r3, [r4, #12]
   17d44:	2300      	movs	r3, #0
   17d46:	60a3      	str	r3, [r4, #8]
   17d48:	0023      	movs	r3, r4
   17d4a:	3347      	adds	r3, #71	; 0x47
   17d4c:	6023      	str	r3, [r4, #0]
   17d4e:	6123      	str	r3, [r4, #16]
   17d50:	2301      	movs	r3, #1
   17d52:	6163      	str	r3, [r4, #20]
   17d54:	b005      	add	sp, #20
   17d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d58:	4b21      	ldr	r3, [pc, #132]	; (17de0 <setvbuf+0x150>)
   17d5a:	429c      	cmp	r4, r3
   17d5c:	d101      	bne.n	17d62 <setvbuf+0xd2>
   17d5e:	68b4      	ldr	r4, [r6, #8]
   17d60:	e7aa      	b.n	17cb8 <setvbuf+0x28>
   17d62:	4b20      	ldr	r3, [pc, #128]	; (17de4 <setvbuf+0x154>)
   17d64:	429c      	cmp	r4, r3
   17d66:	d1a7      	bne.n	17cb8 <setvbuf+0x28>
   17d68:	68f4      	ldr	r4, [r6, #12]
   17d6a:	e7a5      	b.n	17cb8 <setvbuf+0x28>
   17d6c:	2f00      	cmp	r7, #0
   17d6e:	d0d9      	beq.n	17d24 <setvbuf+0x94>
   17d70:	69b3      	ldr	r3, [r6, #24]
   17d72:	2b00      	cmp	r3, #0
   17d74:	d102      	bne.n	17d7c <setvbuf+0xec>
   17d76:	0030      	movs	r0, r6
   17d78:	f000 fc7a 	bl	18670 <__sinit>
   17d7c:	9b00      	ldr	r3, [sp, #0]
   17d7e:	2b01      	cmp	r3, #1
   17d80:	d103      	bne.n	17d8a <setvbuf+0xfa>
   17d82:	89a3      	ldrh	r3, [r4, #12]
   17d84:	9a00      	ldr	r2, [sp, #0]
   17d86:	431a      	orrs	r2, r3
   17d88:	81a2      	strh	r2, [r4, #12]
   17d8a:	2008      	movs	r0, #8
   17d8c:	89a3      	ldrh	r3, [r4, #12]
   17d8e:	6027      	str	r7, [r4, #0]
   17d90:	6127      	str	r7, [r4, #16]
   17d92:	6165      	str	r5, [r4, #20]
   17d94:	4018      	ands	r0, r3
   17d96:	d018      	beq.n	17dca <setvbuf+0x13a>
   17d98:	2001      	movs	r0, #1
   17d9a:	4018      	ands	r0, r3
   17d9c:	2300      	movs	r3, #0
   17d9e:	4298      	cmp	r0, r3
   17da0:	d011      	beq.n	17dc6 <setvbuf+0x136>
   17da2:	426d      	negs	r5, r5
   17da4:	60a3      	str	r3, [r4, #8]
   17da6:	61a5      	str	r5, [r4, #24]
   17da8:	0018      	movs	r0, r3
   17daa:	e7d3      	b.n	17d54 <setvbuf+0xc4>
   17dac:	9801      	ldr	r0, [sp, #4]
   17dae:	f7ff fddb 	bl	17968 <malloc>
   17db2:	1e07      	subs	r7, r0, #0
   17db4:	d0c0      	beq.n	17d38 <setvbuf+0xa8>
   17db6:	2380      	movs	r3, #128	; 0x80
   17db8:	89a2      	ldrh	r2, [r4, #12]
   17dba:	9d01      	ldr	r5, [sp, #4]
   17dbc:	4313      	orrs	r3, r2
   17dbe:	81a3      	strh	r3, [r4, #12]
   17dc0:	e7d6      	b.n	17d70 <setvbuf+0xe0>
   17dc2:	2000      	movs	r0, #0
   17dc4:	e7ba      	b.n	17d3c <setvbuf+0xac>
   17dc6:	60a5      	str	r5, [r4, #8]
   17dc8:	e7c4      	b.n	17d54 <setvbuf+0xc4>
   17dca:	60a0      	str	r0, [r4, #8]
   17dcc:	e7c2      	b.n	17d54 <setvbuf+0xc4>
   17dce:	2001      	movs	r0, #1
   17dd0:	4240      	negs	r0, r0
   17dd2:	e7bf      	b.n	17d54 <setvbuf+0xc4>
   17dd4:	20000200 	.word	0x20000200
   17dd8:	0001bbe8 	.word	0x0001bbe8
   17ddc:	fffff35c 	.word	0xfffff35c
   17de0:	0001bc08 	.word	0x0001bc08
   17de4:	0001bbc8 	.word	0x0001bbc8

00017de8 <sniprintf>:
   17de8:	b40c      	push	{r2, r3}
   17dea:	b530      	push	{r4, r5, lr}
   17dec:	4b16      	ldr	r3, [pc, #88]	; (17e48 <sniprintf+0x60>)
   17dee:	b09d      	sub	sp, #116	; 0x74
   17df0:	1e0c      	subs	r4, r1, #0
   17df2:	681d      	ldr	r5, [r3, #0]
   17df4:	da08      	bge.n	17e08 <sniprintf+0x20>
   17df6:	238b      	movs	r3, #139	; 0x8b
   17df8:	2001      	movs	r0, #1
   17dfa:	602b      	str	r3, [r5, #0]
   17dfc:	4240      	negs	r0, r0
   17dfe:	b01d      	add	sp, #116	; 0x74
   17e00:	bc30      	pop	{r4, r5}
   17e02:	bc08      	pop	{r3}
   17e04:	b002      	add	sp, #8
   17e06:	4718      	bx	r3
   17e08:	2382      	movs	r3, #130	; 0x82
   17e0a:	a902      	add	r1, sp, #8
   17e0c:	009b      	lsls	r3, r3, #2
   17e0e:	818b      	strh	r3, [r1, #12]
   17e10:	2300      	movs	r3, #0
   17e12:	9002      	str	r0, [sp, #8]
   17e14:	6108      	str	r0, [r1, #16]
   17e16:	429c      	cmp	r4, r3
   17e18:	d000      	beq.n	17e1c <sniprintf+0x34>
   17e1a:	1e63      	subs	r3, r4, #1
   17e1c:	608b      	str	r3, [r1, #8]
   17e1e:	614b      	str	r3, [r1, #20]
   17e20:	2301      	movs	r3, #1
   17e22:	425b      	negs	r3, r3
   17e24:	81cb      	strh	r3, [r1, #14]
   17e26:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e28:	ab21      	add	r3, sp, #132	; 0x84
   17e2a:	0028      	movs	r0, r5
   17e2c:	9301      	str	r3, [sp, #4]
   17e2e:	f000 fd99 	bl	18964 <_svfiprintf_r>
   17e32:	1c43      	adds	r3, r0, #1
   17e34:	da01      	bge.n	17e3a <sniprintf+0x52>
   17e36:	238b      	movs	r3, #139	; 0x8b
   17e38:	602b      	str	r3, [r5, #0]
   17e3a:	2c00      	cmp	r4, #0
   17e3c:	d0df      	beq.n	17dfe <sniprintf+0x16>
   17e3e:	2300      	movs	r3, #0
   17e40:	9a02      	ldr	r2, [sp, #8]
   17e42:	7013      	strb	r3, [r2, #0]
   17e44:	e7db      	b.n	17dfe <sniprintf+0x16>
   17e46:	46c0      	nop			; (mov r8, r8)
   17e48:	20000200 	.word	0x20000200

00017e4c <siprintf>:
   17e4c:	b40e      	push	{r1, r2, r3}
   17e4e:	b510      	push	{r4, lr}
   17e50:	b09d      	sub	sp, #116	; 0x74
   17e52:	a902      	add	r1, sp, #8
   17e54:	9002      	str	r0, [sp, #8]
   17e56:	6108      	str	r0, [r1, #16]
   17e58:	480b      	ldr	r0, [pc, #44]	; (17e88 <siprintf+0x3c>)
   17e5a:	2482      	movs	r4, #130	; 0x82
   17e5c:	6088      	str	r0, [r1, #8]
   17e5e:	6148      	str	r0, [r1, #20]
   17e60:	2001      	movs	r0, #1
   17e62:	4240      	negs	r0, r0
   17e64:	ab1f      	add	r3, sp, #124	; 0x7c
   17e66:	81c8      	strh	r0, [r1, #14]
   17e68:	4808      	ldr	r0, [pc, #32]	; (17e8c <siprintf+0x40>)
   17e6a:	cb04      	ldmia	r3!, {r2}
   17e6c:	00a4      	lsls	r4, r4, #2
   17e6e:	6800      	ldr	r0, [r0, #0]
   17e70:	9301      	str	r3, [sp, #4]
   17e72:	818c      	strh	r4, [r1, #12]
   17e74:	f000 fd76 	bl	18964 <_svfiprintf_r>
   17e78:	2300      	movs	r3, #0
   17e7a:	9a02      	ldr	r2, [sp, #8]
   17e7c:	7013      	strb	r3, [r2, #0]
   17e7e:	b01d      	add	sp, #116	; 0x74
   17e80:	bc10      	pop	{r4}
   17e82:	bc08      	pop	{r3}
   17e84:	b003      	add	sp, #12
   17e86:	4718      	bx	r3
   17e88:	7fffffff 	.word	0x7fffffff
   17e8c:	20000200 	.word	0x20000200

00017e90 <strcat>:
   17e90:	0002      	movs	r2, r0
   17e92:	b510      	push	{r4, lr}
   17e94:	7813      	ldrb	r3, [r2, #0]
   17e96:	2b00      	cmp	r3, #0
   17e98:	d105      	bne.n	17ea6 <strcat+0x16>
   17e9a:	5ccc      	ldrb	r4, [r1, r3]
   17e9c:	54d4      	strb	r4, [r2, r3]
   17e9e:	3301      	adds	r3, #1
   17ea0:	2c00      	cmp	r4, #0
   17ea2:	d1fa      	bne.n	17e9a <strcat+0xa>
   17ea4:	bd10      	pop	{r4, pc}
   17ea6:	3201      	adds	r2, #1
   17ea8:	e7f4      	b.n	17e94 <strcat+0x4>

00017eaa <strchr>:
   17eaa:	b2c9      	uxtb	r1, r1
   17eac:	7803      	ldrb	r3, [r0, #0]
   17eae:	2b00      	cmp	r3, #0
   17eb0:	d004      	beq.n	17ebc <strchr+0x12>
   17eb2:	4299      	cmp	r1, r3
   17eb4:	d100      	bne.n	17eb8 <strchr+0xe>
   17eb6:	4770      	bx	lr
   17eb8:	3001      	adds	r0, #1
   17eba:	e7f7      	b.n	17eac <strchr+0x2>
   17ebc:	424b      	negs	r3, r1
   17ebe:	4159      	adcs	r1, r3
   17ec0:	4249      	negs	r1, r1
   17ec2:	4008      	ands	r0, r1
   17ec4:	e7f7      	b.n	17eb6 <strchr+0xc>

00017ec6 <strcmp>:
   17ec6:	7802      	ldrb	r2, [r0, #0]
   17ec8:	780b      	ldrb	r3, [r1, #0]
   17eca:	2a00      	cmp	r2, #0
   17ecc:	d003      	beq.n	17ed6 <strcmp+0x10>
   17ece:	3001      	adds	r0, #1
   17ed0:	3101      	adds	r1, #1
   17ed2:	429a      	cmp	r2, r3
   17ed4:	d0f7      	beq.n	17ec6 <strcmp>
   17ed6:	1ad0      	subs	r0, r2, r3
   17ed8:	4770      	bx	lr

00017eda <strcpy>:
   17eda:	1c03      	adds	r3, r0, #0
   17edc:	780a      	ldrb	r2, [r1, #0]
   17ede:	3101      	adds	r1, #1
   17ee0:	701a      	strb	r2, [r3, #0]
   17ee2:	3301      	adds	r3, #1
   17ee4:	2a00      	cmp	r2, #0
   17ee6:	d1f9      	bne.n	17edc <strcpy+0x2>
   17ee8:	4770      	bx	lr
	...

00017eec <strdup>:
   17eec:	b510      	push	{r4, lr}
   17eee:	4b03      	ldr	r3, [pc, #12]	; (17efc <strdup+0x10>)
   17ef0:	0001      	movs	r1, r0
   17ef2:	6818      	ldr	r0, [r3, #0]
   17ef4:	f000 f804 	bl	17f00 <_strdup_r>
   17ef8:	bd10      	pop	{r4, pc}
   17efa:	46c0      	nop			; (mov r8, r8)
   17efc:	20000200 	.word	0x20000200

00017f00 <_strdup_r>:
   17f00:	b570      	push	{r4, r5, r6, lr}
   17f02:	0005      	movs	r5, r0
   17f04:	0008      	movs	r0, r1
   17f06:	000e      	movs	r6, r1
   17f08:	f000 f80d 	bl	17f26 <strlen>
   17f0c:	1c44      	adds	r4, r0, #1
   17f0e:	0021      	movs	r1, r4
   17f10:	0028      	movs	r0, r5
   17f12:	f7ff fdab 	bl	17a6c <_malloc_r>
   17f16:	1e05      	subs	r5, r0, #0
   17f18:	d003      	beq.n	17f22 <_strdup_r+0x22>
   17f1a:	0022      	movs	r2, r4
   17f1c:	0031      	movs	r1, r6
   17f1e:	f7ff fd37 	bl	17990 <memcpy>
   17f22:	0028      	movs	r0, r5
   17f24:	bd70      	pop	{r4, r5, r6, pc}

00017f26 <strlen>:
   17f26:	2300      	movs	r3, #0
   17f28:	5cc2      	ldrb	r2, [r0, r3]
   17f2a:	3301      	adds	r3, #1
   17f2c:	2a00      	cmp	r2, #0
   17f2e:	d1fb      	bne.n	17f28 <strlen+0x2>
   17f30:	1e58      	subs	r0, r3, #1
   17f32:	4770      	bx	lr

00017f34 <strncmp>:
   17f34:	2300      	movs	r3, #0
   17f36:	b530      	push	{r4, r5, lr}
   17f38:	429a      	cmp	r2, r3
   17f3a:	d00a      	beq.n	17f52 <strncmp+0x1e>
   17f3c:	3a01      	subs	r2, #1
   17f3e:	5cc4      	ldrb	r4, [r0, r3]
   17f40:	5ccd      	ldrb	r5, [r1, r3]
   17f42:	42ac      	cmp	r4, r5
   17f44:	d104      	bne.n	17f50 <strncmp+0x1c>
   17f46:	429a      	cmp	r2, r3
   17f48:	d002      	beq.n	17f50 <strncmp+0x1c>
   17f4a:	3301      	adds	r3, #1
   17f4c:	2c00      	cmp	r4, #0
   17f4e:	d1f6      	bne.n	17f3e <strncmp+0xa>
   17f50:	1b63      	subs	r3, r4, r5
   17f52:	0018      	movs	r0, r3
   17f54:	bd30      	pop	{r4, r5, pc}

00017f56 <strstr>:
   17f56:	b510      	push	{r4, lr}
   17f58:	0002      	movs	r2, r0
   17f5a:	7800      	ldrb	r0, [r0, #0]
   17f5c:	2800      	cmp	r0, #0
   17f5e:	d104      	bne.n	17f6a <strstr+0x14>
   17f60:	7809      	ldrb	r1, [r1, #0]
   17f62:	2900      	cmp	r1, #0
   17f64:	d00d      	beq.n	17f82 <strstr+0x2c>
   17f66:	bd10      	pop	{r4, pc}
   17f68:	3201      	adds	r2, #1
   17f6a:	7810      	ldrb	r0, [r2, #0]
   17f6c:	2800      	cmp	r0, #0
   17f6e:	d0fa      	beq.n	17f66 <strstr+0x10>
   17f70:	2300      	movs	r3, #0
   17f72:	5cc8      	ldrb	r0, [r1, r3]
   17f74:	2800      	cmp	r0, #0
   17f76:	d004      	beq.n	17f82 <strstr+0x2c>
   17f78:	5cd4      	ldrb	r4, [r2, r3]
   17f7a:	4284      	cmp	r4, r0
   17f7c:	d1f4      	bne.n	17f68 <strstr+0x12>
   17f7e:	3301      	adds	r3, #1
   17f80:	e7f7      	b.n	17f72 <strstr+0x1c>
   17f82:	0010      	movs	r0, r2
   17f84:	e7ef      	b.n	17f66 <strstr+0x10>
	...

00017f88 <strtok>:
   17f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f8a:	4b12      	ldr	r3, [pc, #72]	; (17fd4 <strtok+0x4c>)
   17f8c:	0006      	movs	r6, r0
   17f8e:	681d      	ldr	r5, [r3, #0]
   17f90:	000f      	movs	r7, r1
   17f92:	6dac      	ldr	r4, [r5, #88]	; 0x58
   17f94:	2c00      	cmp	r4, #0
   17f96:	d116      	bne.n	17fc6 <strtok+0x3e>
   17f98:	2050      	movs	r0, #80	; 0x50
   17f9a:	f7ff fce5 	bl	17968 <malloc>
   17f9e:	65a8      	str	r0, [r5, #88]	; 0x58
   17fa0:	6004      	str	r4, [r0, #0]
   17fa2:	6044      	str	r4, [r0, #4]
   17fa4:	6084      	str	r4, [r0, #8]
   17fa6:	60c4      	str	r4, [r0, #12]
   17fa8:	6104      	str	r4, [r0, #16]
   17faa:	6144      	str	r4, [r0, #20]
   17fac:	6184      	str	r4, [r0, #24]
   17fae:	6284      	str	r4, [r0, #40]	; 0x28
   17fb0:	62c4      	str	r4, [r0, #44]	; 0x2c
   17fb2:	6304      	str	r4, [r0, #48]	; 0x30
   17fb4:	6344      	str	r4, [r0, #52]	; 0x34
   17fb6:	6384      	str	r4, [r0, #56]	; 0x38
   17fb8:	63c4      	str	r4, [r0, #60]	; 0x3c
   17fba:	6404      	str	r4, [r0, #64]	; 0x40
   17fbc:	6444      	str	r4, [r0, #68]	; 0x44
   17fbe:	6484      	str	r4, [r0, #72]	; 0x48
   17fc0:	64c4      	str	r4, [r0, #76]	; 0x4c
   17fc2:	7704      	strb	r4, [r0, #28]
   17fc4:	6244      	str	r4, [r0, #36]	; 0x24
   17fc6:	6daa      	ldr	r2, [r5, #88]	; 0x58
   17fc8:	0039      	movs	r1, r7
   17fca:	0030      	movs	r0, r6
   17fcc:	2301      	movs	r3, #1
   17fce:	f000 f803 	bl	17fd8 <__strtok_r>
   17fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fd4:	20000200 	.word	0x20000200

00017fd8 <__strtok_r>:
   17fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fda:	2800      	cmp	r0, #0
   17fdc:	d104      	bne.n	17fe8 <__strtok_r+0x10>
   17fde:	6810      	ldr	r0, [r2, #0]
   17fe0:	2800      	cmp	r0, #0
   17fe2:	d101      	bne.n	17fe8 <__strtok_r+0x10>
   17fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17fe6:	0020      	movs	r0, r4
   17fe8:	000e      	movs	r6, r1
   17fea:	7805      	ldrb	r5, [r0, #0]
   17fec:	1c44      	adds	r4, r0, #1
   17fee:	7837      	ldrb	r7, [r6, #0]
   17ff0:	2f00      	cmp	r7, #0
   17ff2:	d104      	bne.n	17ffe <__strtok_r+0x26>
   17ff4:	2d00      	cmp	r5, #0
   17ff6:	d110      	bne.n	1801a <__strtok_r+0x42>
   17ff8:	6015      	str	r5, [r2, #0]
   17ffa:	0028      	movs	r0, r5
   17ffc:	e7f2      	b.n	17fe4 <__strtok_r+0xc>
   17ffe:	3601      	adds	r6, #1
   18000:	42bd      	cmp	r5, r7
   18002:	d1f4      	bne.n	17fee <__strtok_r+0x16>
   18004:	2b00      	cmp	r3, #0
   18006:	d1ee      	bne.n	17fe6 <__strtok_r+0xe>
   18008:	6014      	str	r4, [r2, #0]
   1800a:	7003      	strb	r3, [r0, #0]
   1800c:	e7ea      	b.n	17fe4 <__strtok_r+0xc>
   1800e:	0033      	movs	r3, r6
   18010:	e00e      	b.n	18030 <__strtok_r+0x58>
   18012:	3501      	adds	r5, #1
   18014:	001c      	movs	r4, r3
   18016:	2f00      	cmp	r7, #0
   18018:	d102      	bne.n	18020 <__strtok_r+0x48>
   1801a:	000d      	movs	r5, r1
   1801c:	7826      	ldrb	r6, [r4, #0]
   1801e:	1c63      	adds	r3, r4, #1
   18020:	782f      	ldrb	r7, [r5, #0]
   18022:	42be      	cmp	r6, r7
   18024:	d1f5      	bne.n	18012 <__strtok_r+0x3a>
   18026:	2e00      	cmp	r6, #0
   18028:	d0f1      	beq.n	1800e <__strtok_r+0x36>
   1802a:	2400      	movs	r4, #0
   1802c:	1e59      	subs	r1, r3, #1
   1802e:	700c      	strb	r4, [r1, #0]
   18030:	6013      	str	r3, [r2, #0]
   18032:	e7d7      	b.n	17fe4 <__strtok_r+0xc>

00018034 <_strtol_l.isra.0>:
   18034:	b5f0      	push	{r4, r5, r6, r7, lr}
   18036:	001f      	movs	r7, r3
   18038:	000e      	movs	r6, r1
   1803a:	b087      	sub	sp, #28
   1803c:	9005      	str	r0, [sp, #20]
   1803e:	9103      	str	r1, [sp, #12]
   18040:	9202      	str	r2, [sp, #8]
   18042:	980c      	ldr	r0, [sp, #48]	; 0x30
   18044:	7834      	ldrb	r4, [r6, #0]
   18046:	f000 fba8 	bl	1879a <__locale_ctype_ptr_l>
   1804a:	2208      	movs	r2, #8
   1804c:	1900      	adds	r0, r0, r4
   1804e:	7843      	ldrb	r3, [r0, #1]
   18050:	1c75      	adds	r5, r6, #1
   18052:	4013      	ands	r3, r2
   18054:	d10c      	bne.n	18070 <_strtol_l.isra.0+0x3c>
   18056:	2c2d      	cmp	r4, #45	; 0x2d
   18058:	d10c      	bne.n	18074 <_strtol_l.isra.0+0x40>
   1805a:	3301      	adds	r3, #1
   1805c:	782c      	ldrb	r4, [r5, #0]
   1805e:	9301      	str	r3, [sp, #4]
   18060:	1cb5      	adds	r5, r6, #2
   18062:	2f00      	cmp	r7, #0
   18064:	d00c      	beq.n	18080 <_strtol_l.isra.0+0x4c>
   18066:	2f10      	cmp	r7, #16
   18068:	d114      	bne.n	18094 <_strtol_l.isra.0+0x60>
   1806a:	2c30      	cmp	r4, #48	; 0x30
   1806c:	d00a      	beq.n	18084 <_strtol_l.isra.0+0x50>
   1806e:	e011      	b.n	18094 <_strtol_l.isra.0+0x60>
   18070:	002e      	movs	r6, r5
   18072:	e7e6      	b.n	18042 <_strtol_l.isra.0+0xe>
   18074:	9301      	str	r3, [sp, #4]
   18076:	2c2b      	cmp	r4, #43	; 0x2b
   18078:	d1f3      	bne.n	18062 <_strtol_l.isra.0+0x2e>
   1807a:	782c      	ldrb	r4, [r5, #0]
   1807c:	1cb5      	adds	r5, r6, #2
   1807e:	e7f0      	b.n	18062 <_strtol_l.isra.0+0x2e>
   18080:	2c30      	cmp	r4, #48	; 0x30
   18082:	d12f      	bne.n	180e4 <_strtol_l.isra.0+0xb0>
   18084:	2220      	movs	r2, #32
   18086:	782b      	ldrb	r3, [r5, #0]
   18088:	4393      	bics	r3, r2
   1808a:	2b58      	cmp	r3, #88	; 0x58
   1808c:	d151      	bne.n	18132 <_strtol_l.isra.0+0xfe>
   1808e:	2710      	movs	r7, #16
   18090:	786c      	ldrb	r4, [r5, #1]
   18092:	3502      	adds	r5, #2
   18094:	9b01      	ldr	r3, [sp, #4]
   18096:	4a29      	ldr	r2, [pc, #164]	; (1813c <_strtol_l.isra.0+0x108>)
   18098:	0039      	movs	r1, r7
   1809a:	189e      	adds	r6, r3, r2
   1809c:	0030      	movs	r0, r6
   1809e:	f7ff fb1f 	bl	176e0 <__aeabi_uidivmod>
   180a2:	0030      	movs	r0, r6
   180a4:	9104      	str	r1, [sp, #16]
   180a6:	0039      	movs	r1, r7
   180a8:	f7ff fa94 	bl	175d4 <__udivsi3>
   180ac:	2101      	movs	r1, #1
   180ae:	2300      	movs	r3, #0
   180b0:	4249      	negs	r1, r1
   180b2:	0002      	movs	r2, r0
   180b4:	468c      	mov	ip, r1
   180b6:	0018      	movs	r0, r3
   180b8:	0021      	movs	r1, r4
   180ba:	3930      	subs	r1, #48	; 0x30
   180bc:	2909      	cmp	r1, #9
   180be:	d813      	bhi.n	180e8 <_strtol_l.isra.0+0xb4>
   180c0:	000c      	movs	r4, r1
   180c2:	42a7      	cmp	r7, r4
   180c4:	dd1c      	ble.n	18100 <_strtol_l.isra.0+0xcc>
   180c6:	1c59      	adds	r1, r3, #1
   180c8:	d009      	beq.n	180de <_strtol_l.isra.0+0xaa>
   180ca:	4663      	mov	r3, ip
   180cc:	4282      	cmp	r2, r0
   180ce:	d306      	bcc.n	180de <_strtol_l.isra.0+0xaa>
   180d0:	d102      	bne.n	180d8 <_strtol_l.isra.0+0xa4>
   180d2:	9904      	ldr	r1, [sp, #16]
   180d4:	42a1      	cmp	r1, r4
   180d6:	db02      	blt.n	180de <_strtol_l.isra.0+0xaa>
   180d8:	2301      	movs	r3, #1
   180da:	4378      	muls	r0, r7
   180dc:	1820      	adds	r0, r4, r0
   180de:	782c      	ldrb	r4, [r5, #0]
   180e0:	3501      	adds	r5, #1
   180e2:	e7e9      	b.n	180b8 <_strtol_l.isra.0+0x84>
   180e4:	270a      	movs	r7, #10
   180e6:	e7d5      	b.n	18094 <_strtol_l.isra.0+0x60>
   180e8:	0021      	movs	r1, r4
   180ea:	3941      	subs	r1, #65	; 0x41
   180ec:	2919      	cmp	r1, #25
   180ee:	d801      	bhi.n	180f4 <_strtol_l.isra.0+0xc0>
   180f0:	3c37      	subs	r4, #55	; 0x37
   180f2:	e7e6      	b.n	180c2 <_strtol_l.isra.0+0x8e>
   180f4:	0021      	movs	r1, r4
   180f6:	3961      	subs	r1, #97	; 0x61
   180f8:	2919      	cmp	r1, #25
   180fa:	d801      	bhi.n	18100 <_strtol_l.isra.0+0xcc>
   180fc:	3c57      	subs	r4, #87	; 0x57
   180fe:	e7e0      	b.n	180c2 <_strtol_l.isra.0+0x8e>
   18100:	1c5a      	adds	r2, r3, #1
   18102:	d108      	bne.n	18116 <_strtol_l.isra.0+0xe2>
   18104:	9a05      	ldr	r2, [sp, #20]
   18106:	3323      	adds	r3, #35	; 0x23
   18108:	6013      	str	r3, [r2, #0]
   1810a:	9b02      	ldr	r3, [sp, #8]
   1810c:	0030      	movs	r0, r6
   1810e:	2b00      	cmp	r3, #0
   18110:	d10b      	bne.n	1812a <_strtol_l.isra.0+0xf6>
   18112:	b007      	add	sp, #28
   18114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18116:	9a01      	ldr	r2, [sp, #4]
   18118:	2a00      	cmp	r2, #0
   1811a:	d000      	beq.n	1811e <_strtol_l.isra.0+0xea>
   1811c:	4240      	negs	r0, r0
   1811e:	9a02      	ldr	r2, [sp, #8]
   18120:	2a00      	cmp	r2, #0
   18122:	d0f6      	beq.n	18112 <_strtol_l.isra.0+0xde>
   18124:	9a03      	ldr	r2, [sp, #12]
   18126:	2b00      	cmp	r3, #0
   18128:	d000      	beq.n	1812c <_strtol_l.isra.0+0xf8>
   1812a:	1e6a      	subs	r2, r5, #1
   1812c:	9b02      	ldr	r3, [sp, #8]
   1812e:	601a      	str	r2, [r3, #0]
   18130:	e7ef      	b.n	18112 <_strtol_l.isra.0+0xde>
   18132:	2430      	movs	r4, #48	; 0x30
   18134:	2f00      	cmp	r7, #0
   18136:	d1ad      	bne.n	18094 <_strtol_l.isra.0+0x60>
   18138:	3708      	adds	r7, #8
   1813a:	e7ab      	b.n	18094 <_strtol_l.isra.0+0x60>
   1813c:	7fffffff 	.word	0x7fffffff

00018140 <strtol>:
   18140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18142:	0013      	movs	r3, r2
   18144:	4a06      	ldr	r2, [pc, #24]	; (18160 <strtol+0x20>)
   18146:	0005      	movs	r5, r0
   18148:	6810      	ldr	r0, [r2, #0]
   1814a:	6a04      	ldr	r4, [r0, #32]
   1814c:	2c00      	cmp	r4, #0
   1814e:	d100      	bne.n	18152 <strtol+0x12>
   18150:	4c04      	ldr	r4, [pc, #16]	; (18164 <strtol+0x24>)
   18152:	000a      	movs	r2, r1
   18154:	9400      	str	r4, [sp, #0]
   18156:	0029      	movs	r1, r5
   18158:	f7ff ff6c 	bl	18034 <_strtol_l.isra.0>
   1815c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1815e:	46c0      	nop			; (mov r8, r8)
   18160:	20000200 	.word	0x20000200
   18164:	20000264 	.word	0x20000264

00018168 <_strtoul_l.isra.0>:
   18168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1816a:	001f      	movs	r7, r3
   1816c:	000e      	movs	r6, r1
   1816e:	b087      	sub	sp, #28
   18170:	9005      	str	r0, [sp, #20]
   18172:	9103      	str	r1, [sp, #12]
   18174:	9201      	str	r2, [sp, #4]
   18176:	980c      	ldr	r0, [sp, #48]	; 0x30
   18178:	7834      	ldrb	r4, [r6, #0]
   1817a:	f000 fb0e 	bl	1879a <__locale_ctype_ptr_l>
   1817e:	2208      	movs	r2, #8
   18180:	1900      	adds	r0, r0, r4
   18182:	7843      	ldrb	r3, [r0, #1]
   18184:	1c75      	adds	r5, r6, #1
   18186:	4013      	ands	r3, r2
   18188:	d10c      	bne.n	181a4 <_strtoul_l.isra.0+0x3c>
   1818a:	2c2d      	cmp	r4, #45	; 0x2d
   1818c:	d10c      	bne.n	181a8 <_strtoul_l.isra.0+0x40>
   1818e:	3301      	adds	r3, #1
   18190:	782c      	ldrb	r4, [r5, #0]
   18192:	9302      	str	r3, [sp, #8]
   18194:	1cb5      	adds	r5, r6, #2
   18196:	2f00      	cmp	r7, #0
   18198:	d00c      	beq.n	181b4 <_strtoul_l.isra.0+0x4c>
   1819a:	2f10      	cmp	r7, #16
   1819c:	d114      	bne.n	181c8 <_strtoul_l.isra.0+0x60>
   1819e:	2c30      	cmp	r4, #48	; 0x30
   181a0:	d00a      	beq.n	181b8 <_strtoul_l.isra.0+0x50>
   181a2:	e011      	b.n	181c8 <_strtoul_l.isra.0+0x60>
   181a4:	002e      	movs	r6, r5
   181a6:	e7e6      	b.n	18176 <_strtoul_l.isra.0+0xe>
   181a8:	9302      	str	r3, [sp, #8]
   181aa:	2c2b      	cmp	r4, #43	; 0x2b
   181ac:	d1f3      	bne.n	18196 <_strtoul_l.isra.0+0x2e>
   181ae:	782c      	ldrb	r4, [r5, #0]
   181b0:	1cb5      	adds	r5, r6, #2
   181b2:	e7f0      	b.n	18196 <_strtoul_l.isra.0+0x2e>
   181b4:	2c30      	cmp	r4, #48	; 0x30
   181b6:	d12f      	bne.n	18218 <_strtoul_l.isra.0+0xb0>
   181b8:	2220      	movs	r2, #32
   181ba:	782b      	ldrb	r3, [r5, #0]
   181bc:	4393      	bics	r3, r2
   181be:	2b58      	cmp	r3, #88	; 0x58
   181c0:	d154      	bne.n	1826c <_strtoul_l.isra.0+0x104>
   181c2:	2710      	movs	r7, #16
   181c4:	786c      	ldrb	r4, [r5, #1]
   181c6:	3502      	adds	r5, #2
   181c8:	2001      	movs	r0, #1
   181ca:	0039      	movs	r1, r7
   181cc:	4240      	negs	r0, r0
   181ce:	f7ff fa01 	bl	175d4 <__udivsi3>
   181d2:	0006      	movs	r6, r0
   181d4:	2001      	movs	r0, #1
   181d6:	0039      	movs	r1, r7
   181d8:	4240      	negs	r0, r0
   181da:	f7ff fa81 	bl	176e0 <__aeabi_uidivmod>
   181de:	2300      	movs	r3, #0
   181e0:	9104      	str	r1, [sp, #16]
   181e2:	2101      	movs	r1, #1
   181e4:	2201      	movs	r2, #1
   181e6:	0018      	movs	r0, r3
   181e8:	468c      	mov	ip, r1
   181ea:	4252      	negs	r2, r2
   181ec:	0021      	movs	r1, r4
   181ee:	3930      	subs	r1, #48	; 0x30
   181f0:	2909      	cmp	r1, #9
   181f2:	d813      	bhi.n	1821c <_strtoul_l.isra.0+0xb4>
   181f4:	000c      	movs	r4, r1
   181f6:	42a7      	cmp	r7, r4
   181f8:	dd1e      	ble.n	18238 <_strtoul_l.isra.0+0xd0>
   181fa:	2b00      	cmp	r3, #0
   181fc:	db1a      	blt.n	18234 <_strtoul_l.isra.0+0xcc>
   181fe:	0013      	movs	r3, r2
   18200:	4286      	cmp	r6, r0
   18202:	d306      	bcc.n	18212 <_strtoul_l.isra.0+0xaa>
   18204:	d102      	bne.n	1820c <_strtoul_l.isra.0+0xa4>
   18206:	9904      	ldr	r1, [sp, #16]
   18208:	42a1      	cmp	r1, r4
   1820a:	db02      	blt.n	18212 <_strtoul_l.isra.0+0xaa>
   1820c:	4663      	mov	r3, ip
   1820e:	4378      	muls	r0, r7
   18210:	1820      	adds	r0, r4, r0
   18212:	782c      	ldrb	r4, [r5, #0]
   18214:	3501      	adds	r5, #1
   18216:	e7e9      	b.n	181ec <_strtoul_l.isra.0+0x84>
   18218:	270a      	movs	r7, #10
   1821a:	e7d5      	b.n	181c8 <_strtoul_l.isra.0+0x60>
   1821c:	0021      	movs	r1, r4
   1821e:	3941      	subs	r1, #65	; 0x41
   18220:	2919      	cmp	r1, #25
   18222:	d801      	bhi.n	18228 <_strtoul_l.isra.0+0xc0>
   18224:	3c37      	subs	r4, #55	; 0x37
   18226:	e7e6      	b.n	181f6 <_strtoul_l.isra.0+0x8e>
   18228:	0021      	movs	r1, r4
   1822a:	3961      	subs	r1, #97	; 0x61
   1822c:	2919      	cmp	r1, #25
   1822e:	d803      	bhi.n	18238 <_strtoul_l.isra.0+0xd0>
   18230:	3c57      	subs	r4, #87	; 0x57
   18232:	e7e0      	b.n	181f6 <_strtoul_l.isra.0+0x8e>
   18234:	0013      	movs	r3, r2
   18236:	e7ec      	b.n	18212 <_strtoul_l.isra.0+0xaa>
   18238:	2b00      	cmp	r3, #0
   1823a:	da09      	bge.n	18250 <_strtoul_l.isra.0+0xe8>
   1823c:	2322      	movs	r3, #34	; 0x22
   1823e:	2001      	movs	r0, #1
   18240:	9a05      	ldr	r2, [sp, #20]
   18242:	4240      	negs	r0, r0
   18244:	6013      	str	r3, [r2, #0]
   18246:	9b01      	ldr	r3, [sp, #4]
   18248:	2b00      	cmp	r3, #0
   1824a:	d10b      	bne.n	18264 <_strtoul_l.isra.0+0xfc>
   1824c:	b007      	add	sp, #28
   1824e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18250:	9a02      	ldr	r2, [sp, #8]
   18252:	2a00      	cmp	r2, #0
   18254:	d000      	beq.n	18258 <_strtoul_l.isra.0+0xf0>
   18256:	4240      	negs	r0, r0
   18258:	9a01      	ldr	r2, [sp, #4]
   1825a:	2a00      	cmp	r2, #0
   1825c:	d0f6      	beq.n	1824c <_strtoul_l.isra.0+0xe4>
   1825e:	9a03      	ldr	r2, [sp, #12]
   18260:	2b00      	cmp	r3, #0
   18262:	d000      	beq.n	18266 <_strtoul_l.isra.0+0xfe>
   18264:	1e6a      	subs	r2, r5, #1
   18266:	9b01      	ldr	r3, [sp, #4]
   18268:	601a      	str	r2, [r3, #0]
   1826a:	e7ef      	b.n	1824c <_strtoul_l.isra.0+0xe4>
   1826c:	2430      	movs	r4, #48	; 0x30
   1826e:	2f00      	cmp	r7, #0
   18270:	d1aa      	bne.n	181c8 <_strtoul_l.isra.0+0x60>
   18272:	3708      	adds	r7, #8
   18274:	e7a8      	b.n	181c8 <_strtoul_l.isra.0+0x60>
	...

00018278 <strtoul>:
   18278:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1827a:	0013      	movs	r3, r2
   1827c:	4a06      	ldr	r2, [pc, #24]	; (18298 <strtoul+0x20>)
   1827e:	0005      	movs	r5, r0
   18280:	6810      	ldr	r0, [r2, #0]
   18282:	6a04      	ldr	r4, [r0, #32]
   18284:	2c00      	cmp	r4, #0
   18286:	d100      	bne.n	1828a <strtoul+0x12>
   18288:	4c04      	ldr	r4, [pc, #16]	; (1829c <strtoul+0x24>)
   1828a:	000a      	movs	r2, r1
   1828c:	9400      	str	r4, [sp, #0]
   1828e:	0029      	movs	r1, r5
   18290:	f7ff ff6a 	bl	18168 <_strtoul_l.isra.0>
   18294:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   18296:	46c0      	nop			; (mov r8, r8)
   18298:	20000200 	.word	0x20000200
   1829c:	20000264 	.word	0x20000264

000182a0 <_vsiprintf_r>:
   182a0:	b530      	push	{r4, r5, lr}
   182a2:	b09b      	sub	sp, #108	; 0x6c
   182a4:	9100      	str	r1, [sp, #0]
   182a6:	9104      	str	r1, [sp, #16]
   182a8:	4908      	ldr	r1, [pc, #32]	; (182cc <_vsiprintf_r+0x2c>)
   182aa:	466d      	mov	r5, sp
   182ac:	9102      	str	r1, [sp, #8]
   182ae:	9105      	str	r1, [sp, #20]
   182b0:	2101      	movs	r1, #1
   182b2:	2482      	movs	r4, #130	; 0x82
   182b4:	4249      	negs	r1, r1
   182b6:	81e9      	strh	r1, [r5, #14]
   182b8:	00a4      	lsls	r4, r4, #2
   182ba:	4669      	mov	r1, sp
   182bc:	81ac      	strh	r4, [r5, #12]
   182be:	f000 fb51 	bl	18964 <_svfiprintf_r>
   182c2:	2300      	movs	r3, #0
   182c4:	9a00      	ldr	r2, [sp, #0]
   182c6:	7013      	strb	r3, [r2, #0]
   182c8:	b01b      	add	sp, #108	; 0x6c
   182ca:	bd30      	pop	{r4, r5, pc}
   182cc:	7fffffff 	.word	0x7fffffff

000182d0 <vsiprintf>:
   182d0:	b510      	push	{r4, lr}
   182d2:	0013      	movs	r3, r2
   182d4:	000a      	movs	r2, r1
   182d6:	0001      	movs	r1, r0
   182d8:	4802      	ldr	r0, [pc, #8]	; (182e4 <vsiprintf+0x14>)
   182da:	6800      	ldr	r0, [r0, #0]
   182dc:	f7ff ffe0 	bl	182a0 <_vsiprintf_r>
   182e0:	bd10      	pop	{r4, pc}
   182e2:	46c0      	nop			; (mov r8, r8)
   182e4:	20000200 	.word	0x20000200

000182e8 <__swbuf_r>:
   182e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182ea:	0005      	movs	r5, r0
   182ec:	000e      	movs	r6, r1
   182ee:	0014      	movs	r4, r2
   182f0:	2800      	cmp	r0, #0
   182f2:	d004      	beq.n	182fe <__swbuf_r+0x16>
   182f4:	6983      	ldr	r3, [r0, #24]
   182f6:	2b00      	cmp	r3, #0
   182f8:	d101      	bne.n	182fe <__swbuf_r+0x16>
   182fa:	f000 f9b9 	bl	18670 <__sinit>
   182fe:	4b22      	ldr	r3, [pc, #136]	; (18388 <__swbuf_r+0xa0>)
   18300:	429c      	cmp	r4, r3
   18302:	d12d      	bne.n	18360 <__swbuf_r+0x78>
   18304:	686c      	ldr	r4, [r5, #4]
   18306:	69a3      	ldr	r3, [r4, #24]
   18308:	60a3      	str	r3, [r4, #8]
   1830a:	89a3      	ldrh	r3, [r4, #12]
   1830c:	071b      	lsls	r3, r3, #28
   1830e:	d531      	bpl.n	18374 <__swbuf_r+0x8c>
   18310:	6923      	ldr	r3, [r4, #16]
   18312:	2b00      	cmp	r3, #0
   18314:	d02e      	beq.n	18374 <__swbuf_r+0x8c>
   18316:	6823      	ldr	r3, [r4, #0]
   18318:	6922      	ldr	r2, [r4, #16]
   1831a:	b2f7      	uxtb	r7, r6
   1831c:	1a98      	subs	r0, r3, r2
   1831e:	6963      	ldr	r3, [r4, #20]
   18320:	b2f6      	uxtb	r6, r6
   18322:	4298      	cmp	r0, r3
   18324:	db05      	blt.n	18332 <__swbuf_r+0x4a>
   18326:	0021      	movs	r1, r4
   18328:	0028      	movs	r0, r5
   1832a:	f000 f933 	bl	18594 <_fflush_r>
   1832e:	2800      	cmp	r0, #0
   18330:	d126      	bne.n	18380 <__swbuf_r+0x98>
   18332:	68a3      	ldr	r3, [r4, #8]
   18334:	3001      	adds	r0, #1
   18336:	3b01      	subs	r3, #1
   18338:	60a3      	str	r3, [r4, #8]
   1833a:	6823      	ldr	r3, [r4, #0]
   1833c:	1c5a      	adds	r2, r3, #1
   1833e:	6022      	str	r2, [r4, #0]
   18340:	701f      	strb	r7, [r3, #0]
   18342:	6963      	ldr	r3, [r4, #20]
   18344:	4298      	cmp	r0, r3
   18346:	d004      	beq.n	18352 <__swbuf_r+0x6a>
   18348:	89a3      	ldrh	r3, [r4, #12]
   1834a:	07db      	lsls	r3, r3, #31
   1834c:	d51a      	bpl.n	18384 <__swbuf_r+0x9c>
   1834e:	2e0a      	cmp	r6, #10
   18350:	d118      	bne.n	18384 <__swbuf_r+0x9c>
   18352:	0021      	movs	r1, r4
   18354:	0028      	movs	r0, r5
   18356:	f000 f91d 	bl	18594 <_fflush_r>
   1835a:	2800      	cmp	r0, #0
   1835c:	d012      	beq.n	18384 <__swbuf_r+0x9c>
   1835e:	e00f      	b.n	18380 <__swbuf_r+0x98>
   18360:	4b0a      	ldr	r3, [pc, #40]	; (1838c <__swbuf_r+0xa4>)
   18362:	429c      	cmp	r4, r3
   18364:	d101      	bne.n	1836a <__swbuf_r+0x82>
   18366:	68ac      	ldr	r4, [r5, #8]
   18368:	e7cd      	b.n	18306 <__swbuf_r+0x1e>
   1836a:	4b09      	ldr	r3, [pc, #36]	; (18390 <__swbuf_r+0xa8>)
   1836c:	429c      	cmp	r4, r3
   1836e:	d1ca      	bne.n	18306 <__swbuf_r+0x1e>
   18370:	68ec      	ldr	r4, [r5, #12]
   18372:	e7c8      	b.n	18306 <__swbuf_r+0x1e>
   18374:	0021      	movs	r1, r4
   18376:	0028      	movs	r0, r5
   18378:	f000 f80c 	bl	18394 <__swsetup_r>
   1837c:	2800      	cmp	r0, #0
   1837e:	d0ca      	beq.n	18316 <__swbuf_r+0x2e>
   18380:	2601      	movs	r6, #1
   18382:	4276      	negs	r6, r6
   18384:	0030      	movs	r0, r6
   18386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18388:	0001bbe8 	.word	0x0001bbe8
   1838c:	0001bc08 	.word	0x0001bc08
   18390:	0001bbc8 	.word	0x0001bbc8

00018394 <__swsetup_r>:
   18394:	4b36      	ldr	r3, [pc, #216]	; (18470 <__swsetup_r+0xdc>)
   18396:	b570      	push	{r4, r5, r6, lr}
   18398:	681d      	ldr	r5, [r3, #0]
   1839a:	0006      	movs	r6, r0
   1839c:	000c      	movs	r4, r1
   1839e:	2d00      	cmp	r5, #0
   183a0:	d005      	beq.n	183ae <__swsetup_r+0x1a>
   183a2:	69ab      	ldr	r3, [r5, #24]
   183a4:	2b00      	cmp	r3, #0
   183a6:	d102      	bne.n	183ae <__swsetup_r+0x1a>
   183a8:	0028      	movs	r0, r5
   183aa:	f000 f961 	bl	18670 <__sinit>
   183ae:	4b31      	ldr	r3, [pc, #196]	; (18474 <__swsetup_r+0xe0>)
   183b0:	429c      	cmp	r4, r3
   183b2:	d10f      	bne.n	183d4 <__swsetup_r+0x40>
   183b4:	686c      	ldr	r4, [r5, #4]
   183b6:	230c      	movs	r3, #12
   183b8:	5ee2      	ldrsh	r2, [r4, r3]
   183ba:	b293      	uxth	r3, r2
   183bc:	0719      	lsls	r1, r3, #28
   183be:	d42d      	bmi.n	1841c <__swsetup_r+0x88>
   183c0:	06d9      	lsls	r1, r3, #27
   183c2:	d411      	bmi.n	183e8 <__swsetup_r+0x54>
   183c4:	2309      	movs	r3, #9
   183c6:	2001      	movs	r0, #1
   183c8:	6033      	str	r3, [r6, #0]
   183ca:	3337      	adds	r3, #55	; 0x37
   183cc:	4313      	orrs	r3, r2
   183ce:	81a3      	strh	r3, [r4, #12]
   183d0:	4240      	negs	r0, r0
   183d2:	bd70      	pop	{r4, r5, r6, pc}
   183d4:	4b28      	ldr	r3, [pc, #160]	; (18478 <__swsetup_r+0xe4>)
   183d6:	429c      	cmp	r4, r3
   183d8:	d101      	bne.n	183de <__swsetup_r+0x4a>
   183da:	68ac      	ldr	r4, [r5, #8]
   183dc:	e7eb      	b.n	183b6 <__swsetup_r+0x22>
   183de:	4b27      	ldr	r3, [pc, #156]	; (1847c <__swsetup_r+0xe8>)
   183e0:	429c      	cmp	r4, r3
   183e2:	d1e8      	bne.n	183b6 <__swsetup_r+0x22>
   183e4:	68ec      	ldr	r4, [r5, #12]
   183e6:	e7e6      	b.n	183b6 <__swsetup_r+0x22>
   183e8:	075b      	lsls	r3, r3, #29
   183ea:	d513      	bpl.n	18414 <__swsetup_r+0x80>
   183ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   183ee:	2900      	cmp	r1, #0
   183f0:	d008      	beq.n	18404 <__swsetup_r+0x70>
   183f2:	0023      	movs	r3, r4
   183f4:	3344      	adds	r3, #68	; 0x44
   183f6:	4299      	cmp	r1, r3
   183f8:	d002      	beq.n	18400 <__swsetup_r+0x6c>
   183fa:	0030      	movs	r0, r6
   183fc:	f7ff faec 	bl	179d8 <_free_r>
   18400:	2300      	movs	r3, #0
   18402:	6363      	str	r3, [r4, #52]	; 0x34
   18404:	2224      	movs	r2, #36	; 0x24
   18406:	89a3      	ldrh	r3, [r4, #12]
   18408:	4393      	bics	r3, r2
   1840a:	81a3      	strh	r3, [r4, #12]
   1840c:	2300      	movs	r3, #0
   1840e:	6063      	str	r3, [r4, #4]
   18410:	6923      	ldr	r3, [r4, #16]
   18412:	6023      	str	r3, [r4, #0]
   18414:	2308      	movs	r3, #8
   18416:	89a2      	ldrh	r2, [r4, #12]
   18418:	4313      	orrs	r3, r2
   1841a:	81a3      	strh	r3, [r4, #12]
   1841c:	6923      	ldr	r3, [r4, #16]
   1841e:	2b00      	cmp	r3, #0
   18420:	d10b      	bne.n	1843a <__swsetup_r+0xa6>
   18422:	21a0      	movs	r1, #160	; 0xa0
   18424:	2280      	movs	r2, #128	; 0x80
   18426:	89a3      	ldrh	r3, [r4, #12]
   18428:	0089      	lsls	r1, r1, #2
   1842a:	0092      	lsls	r2, r2, #2
   1842c:	400b      	ands	r3, r1
   1842e:	4293      	cmp	r3, r2
   18430:	d003      	beq.n	1843a <__swsetup_r+0xa6>
   18432:	0021      	movs	r1, r4
   18434:	0030      	movs	r0, r6
   18436:	f000 f9db 	bl	187f0 <__smakebuf_r>
   1843a:	2301      	movs	r3, #1
   1843c:	89a2      	ldrh	r2, [r4, #12]
   1843e:	4013      	ands	r3, r2
   18440:	d011      	beq.n	18466 <__swsetup_r+0xd2>
   18442:	2300      	movs	r3, #0
   18444:	60a3      	str	r3, [r4, #8]
   18446:	6963      	ldr	r3, [r4, #20]
   18448:	425b      	negs	r3, r3
   1844a:	61a3      	str	r3, [r4, #24]
   1844c:	2000      	movs	r0, #0
   1844e:	6923      	ldr	r3, [r4, #16]
   18450:	4283      	cmp	r3, r0
   18452:	d1be      	bne.n	183d2 <__swsetup_r+0x3e>
   18454:	230c      	movs	r3, #12
   18456:	5ee2      	ldrsh	r2, [r4, r3]
   18458:	0613      	lsls	r3, r2, #24
   1845a:	d5ba      	bpl.n	183d2 <__swsetup_r+0x3e>
   1845c:	2340      	movs	r3, #64	; 0x40
   1845e:	4313      	orrs	r3, r2
   18460:	81a3      	strh	r3, [r4, #12]
   18462:	3801      	subs	r0, #1
   18464:	e7b5      	b.n	183d2 <__swsetup_r+0x3e>
   18466:	0792      	lsls	r2, r2, #30
   18468:	d400      	bmi.n	1846c <__swsetup_r+0xd8>
   1846a:	6963      	ldr	r3, [r4, #20]
   1846c:	60a3      	str	r3, [r4, #8]
   1846e:	e7ed      	b.n	1844c <__swsetup_r+0xb8>
   18470:	20000200 	.word	0x20000200
   18474:	0001bbe8 	.word	0x0001bbe8
   18478:	0001bc08 	.word	0x0001bc08
   1847c:	0001bbc8 	.word	0x0001bbc8

00018480 <__sflush_r>:
   18480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18482:	898a      	ldrh	r2, [r1, #12]
   18484:	0005      	movs	r5, r0
   18486:	000c      	movs	r4, r1
   18488:	0713      	lsls	r3, r2, #28
   1848a:	d460      	bmi.n	1854e <__sflush_r+0xce>
   1848c:	684b      	ldr	r3, [r1, #4]
   1848e:	2b00      	cmp	r3, #0
   18490:	dc04      	bgt.n	1849c <__sflush_r+0x1c>
   18492:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18494:	2b00      	cmp	r3, #0
   18496:	dc01      	bgt.n	1849c <__sflush_r+0x1c>
   18498:	2000      	movs	r0, #0
   1849a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1849c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1849e:	2f00      	cmp	r7, #0
   184a0:	d0fa      	beq.n	18498 <__sflush_r+0x18>
   184a2:	2300      	movs	r3, #0
   184a4:	682e      	ldr	r6, [r5, #0]
   184a6:	602b      	str	r3, [r5, #0]
   184a8:	2380      	movs	r3, #128	; 0x80
   184aa:	015b      	lsls	r3, r3, #5
   184ac:	401a      	ands	r2, r3
   184ae:	d034      	beq.n	1851a <__sflush_r+0x9a>
   184b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   184b2:	89a3      	ldrh	r3, [r4, #12]
   184b4:	075b      	lsls	r3, r3, #29
   184b6:	d506      	bpl.n	184c6 <__sflush_r+0x46>
   184b8:	6863      	ldr	r3, [r4, #4]
   184ba:	1ac0      	subs	r0, r0, r3
   184bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   184be:	2b00      	cmp	r3, #0
   184c0:	d001      	beq.n	184c6 <__sflush_r+0x46>
   184c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   184c4:	1ac0      	subs	r0, r0, r3
   184c6:	0002      	movs	r2, r0
   184c8:	6a21      	ldr	r1, [r4, #32]
   184ca:	2300      	movs	r3, #0
   184cc:	0028      	movs	r0, r5
   184ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   184d0:	47b8      	blx	r7
   184d2:	89a1      	ldrh	r1, [r4, #12]
   184d4:	1c43      	adds	r3, r0, #1
   184d6:	d106      	bne.n	184e6 <__sflush_r+0x66>
   184d8:	682b      	ldr	r3, [r5, #0]
   184da:	2b1d      	cmp	r3, #29
   184dc:	d831      	bhi.n	18542 <__sflush_r+0xc2>
   184de:	4a2c      	ldr	r2, [pc, #176]	; (18590 <__sflush_r+0x110>)
   184e0:	40da      	lsrs	r2, r3
   184e2:	07d3      	lsls	r3, r2, #31
   184e4:	d52d      	bpl.n	18542 <__sflush_r+0xc2>
   184e6:	2300      	movs	r3, #0
   184e8:	6063      	str	r3, [r4, #4]
   184ea:	6923      	ldr	r3, [r4, #16]
   184ec:	6023      	str	r3, [r4, #0]
   184ee:	04cb      	lsls	r3, r1, #19
   184f0:	d505      	bpl.n	184fe <__sflush_r+0x7e>
   184f2:	1c43      	adds	r3, r0, #1
   184f4:	d102      	bne.n	184fc <__sflush_r+0x7c>
   184f6:	682b      	ldr	r3, [r5, #0]
   184f8:	2b00      	cmp	r3, #0
   184fa:	d100      	bne.n	184fe <__sflush_r+0x7e>
   184fc:	6560      	str	r0, [r4, #84]	; 0x54
   184fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18500:	602e      	str	r6, [r5, #0]
   18502:	2900      	cmp	r1, #0
   18504:	d0c8      	beq.n	18498 <__sflush_r+0x18>
   18506:	0023      	movs	r3, r4
   18508:	3344      	adds	r3, #68	; 0x44
   1850a:	4299      	cmp	r1, r3
   1850c:	d002      	beq.n	18514 <__sflush_r+0x94>
   1850e:	0028      	movs	r0, r5
   18510:	f7ff fa62 	bl	179d8 <_free_r>
   18514:	2000      	movs	r0, #0
   18516:	6360      	str	r0, [r4, #52]	; 0x34
   18518:	e7bf      	b.n	1849a <__sflush_r+0x1a>
   1851a:	2301      	movs	r3, #1
   1851c:	6a21      	ldr	r1, [r4, #32]
   1851e:	0028      	movs	r0, r5
   18520:	47b8      	blx	r7
   18522:	1c43      	adds	r3, r0, #1
   18524:	d1c5      	bne.n	184b2 <__sflush_r+0x32>
   18526:	682b      	ldr	r3, [r5, #0]
   18528:	2b00      	cmp	r3, #0
   1852a:	d0c2      	beq.n	184b2 <__sflush_r+0x32>
   1852c:	2b1d      	cmp	r3, #29
   1852e:	d001      	beq.n	18534 <__sflush_r+0xb4>
   18530:	2b16      	cmp	r3, #22
   18532:	d101      	bne.n	18538 <__sflush_r+0xb8>
   18534:	602e      	str	r6, [r5, #0]
   18536:	e7af      	b.n	18498 <__sflush_r+0x18>
   18538:	2340      	movs	r3, #64	; 0x40
   1853a:	89a2      	ldrh	r2, [r4, #12]
   1853c:	4313      	orrs	r3, r2
   1853e:	81a3      	strh	r3, [r4, #12]
   18540:	e7ab      	b.n	1849a <__sflush_r+0x1a>
   18542:	2340      	movs	r3, #64	; 0x40
   18544:	430b      	orrs	r3, r1
   18546:	2001      	movs	r0, #1
   18548:	81a3      	strh	r3, [r4, #12]
   1854a:	4240      	negs	r0, r0
   1854c:	e7a5      	b.n	1849a <__sflush_r+0x1a>
   1854e:	690f      	ldr	r7, [r1, #16]
   18550:	2f00      	cmp	r7, #0
   18552:	d0a1      	beq.n	18498 <__sflush_r+0x18>
   18554:	680b      	ldr	r3, [r1, #0]
   18556:	600f      	str	r7, [r1, #0]
   18558:	1bdb      	subs	r3, r3, r7
   1855a:	9301      	str	r3, [sp, #4]
   1855c:	2300      	movs	r3, #0
   1855e:	0792      	lsls	r2, r2, #30
   18560:	d100      	bne.n	18564 <__sflush_r+0xe4>
   18562:	694b      	ldr	r3, [r1, #20]
   18564:	60a3      	str	r3, [r4, #8]
   18566:	9b01      	ldr	r3, [sp, #4]
   18568:	2b00      	cmp	r3, #0
   1856a:	dc00      	bgt.n	1856e <__sflush_r+0xee>
   1856c:	e794      	b.n	18498 <__sflush_r+0x18>
   1856e:	9b01      	ldr	r3, [sp, #4]
   18570:	003a      	movs	r2, r7
   18572:	6a21      	ldr	r1, [r4, #32]
   18574:	0028      	movs	r0, r5
   18576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   18578:	47b0      	blx	r6
   1857a:	2800      	cmp	r0, #0
   1857c:	dc03      	bgt.n	18586 <__sflush_r+0x106>
   1857e:	2340      	movs	r3, #64	; 0x40
   18580:	89a2      	ldrh	r2, [r4, #12]
   18582:	4313      	orrs	r3, r2
   18584:	e7df      	b.n	18546 <__sflush_r+0xc6>
   18586:	9b01      	ldr	r3, [sp, #4]
   18588:	183f      	adds	r7, r7, r0
   1858a:	1a1b      	subs	r3, r3, r0
   1858c:	9301      	str	r3, [sp, #4]
   1858e:	e7ea      	b.n	18566 <__sflush_r+0xe6>
   18590:	20400001 	.word	0x20400001

00018594 <_fflush_r>:
   18594:	690b      	ldr	r3, [r1, #16]
   18596:	b570      	push	{r4, r5, r6, lr}
   18598:	0005      	movs	r5, r0
   1859a:	000c      	movs	r4, r1
   1859c:	2b00      	cmp	r3, #0
   1859e:	d101      	bne.n	185a4 <_fflush_r+0x10>
   185a0:	2000      	movs	r0, #0
   185a2:	bd70      	pop	{r4, r5, r6, pc}
   185a4:	2800      	cmp	r0, #0
   185a6:	d004      	beq.n	185b2 <_fflush_r+0x1e>
   185a8:	6983      	ldr	r3, [r0, #24]
   185aa:	2b00      	cmp	r3, #0
   185ac:	d101      	bne.n	185b2 <_fflush_r+0x1e>
   185ae:	f000 f85f 	bl	18670 <__sinit>
   185b2:	4b0b      	ldr	r3, [pc, #44]	; (185e0 <_fflush_r+0x4c>)
   185b4:	429c      	cmp	r4, r3
   185b6:	d109      	bne.n	185cc <_fflush_r+0x38>
   185b8:	686c      	ldr	r4, [r5, #4]
   185ba:	220c      	movs	r2, #12
   185bc:	5ea3      	ldrsh	r3, [r4, r2]
   185be:	2b00      	cmp	r3, #0
   185c0:	d0ee      	beq.n	185a0 <_fflush_r+0xc>
   185c2:	0021      	movs	r1, r4
   185c4:	0028      	movs	r0, r5
   185c6:	f7ff ff5b 	bl	18480 <__sflush_r>
   185ca:	e7ea      	b.n	185a2 <_fflush_r+0xe>
   185cc:	4b05      	ldr	r3, [pc, #20]	; (185e4 <_fflush_r+0x50>)
   185ce:	429c      	cmp	r4, r3
   185d0:	d101      	bne.n	185d6 <_fflush_r+0x42>
   185d2:	68ac      	ldr	r4, [r5, #8]
   185d4:	e7f1      	b.n	185ba <_fflush_r+0x26>
   185d6:	4b04      	ldr	r3, [pc, #16]	; (185e8 <_fflush_r+0x54>)
   185d8:	429c      	cmp	r4, r3
   185da:	d1ee      	bne.n	185ba <_fflush_r+0x26>
   185dc:	68ec      	ldr	r4, [r5, #12]
   185de:	e7ec      	b.n	185ba <_fflush_r+0x26>
   185e0:	0001bbe8 	.word	0x0001bbe8
   185e4:	0001bc08 	.word	0x0001bc08
   185e8:	0001bbc8 	.word	0x0001bbc8

000185ec <_cleanup_r>:
   185ec:	b510      	push	{r4, lr}
   185ee:	4902      	ldr	r1, [pc, #8]	; (185f8 <_cleanup_r+0xc>)
   185f0:	f000 f8b2 	bl	18758 <_fwalk_reent>
   185f4:	bd10      	pop	{r4, pc}
   185f6:	46c0      	nop			; (mov r8, r8)
   185f8:	00018595 	.word	0x00018595

000185fc <std.isra.0>:
   185fc:	2300      	movs	r3, #0
   185fe:	b510      	push	{r4, lr}
   18600:	0004      	movs	r4, r0
   18602:	6003      	str	r3, [r0, #0]
   18604:	6043      	str	r3, [r0, #4]
   18606:	6083      	str	r3, [r0, #8]
   18608:	8181      	strh	r1, [r0, #12]
   1860a:	6643      	str	r3, [r0, #100]	; 0x64
   1860c:	81c2      	strh	r2, [r0, #14]
   1860e:	6103      	str	r3, [r0, #16]
   18610:	6143      	str	r3, [r0, #20]
   18612:	6183      	str	r3, [r0, #24]
   18614:	0019      	movs	r1, r3
   18616:	2208      	movs	r2, #8
   18618:	305c      	adds	r0, #92	; 0x5c
   1861a:	f7ff f9d4 	bl	179c6 <memset>
   1861e:	4b05      	ldr	r3, [pc, #20]	; (18634 <std.isra.0+0x38>)
   18620:	6224      	str	r4, [r4, #32]
   18622:	6263      	str	r3, [r4, #36]	; 0x24
   18624:	4b04      	ldr	r3, [pc, #16]	; (18638 <std.isra.0+0x3c>)
   18626:	62a3      	str	r3, [r4, #40]	; 0x28
   18628:	4b04      	ldr	r3, [pc, #16]	; (1863c <std.isra.0+0x40>)
   1862a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1862c:	4b04      	ldr	r3, [pc, #16]	; (18640 <std.isra.0+0x44>)
   1862e:	6323      	str	r3, [r4, #48]	; 0x30
   18630:	bd10      	pop	{r4, pc}
   18632:	46c0      	nop			; (mov r8, r8)
   18634:	00019171 	.word	0x00019171
   18638:	00019199 	.word	0x00019199
   1863c:	000191d1 	.word	0x000191d1
   18640:	000191fd 	.word	0x000191fd

00018644 <__sfmoreglue>:
   18644:	b570      	push	{r4, r5, r6, lr}
   18646:	2568      	movs	r5, #104	; 0x68
   18648:	1e4a      	subs	r2, r1, #1
   1864a:	4355      	muls	r5, r2
   1864c:	000e      	movs	r6, r1
   1864e:	0029      	movs	r1, r5
   18650:	3174      	adds	r1, #116	; 0x74
   18652:	f7ff fa0b 	bl	17a6c <_malloc_r>
   18656:	1e04      	subs	r4, r0, #0
   18658:	d008      	beq.n	1866c <__sfmoreglue+0x28>
   1865a:	2100      	movs	r1, #0
   1865c:	002a      	movs	r2, r5
   1865e:	6001      	str	r1, [r0, #0]
   18660:	6046      	str	r6, [r0, #4]
   18662:	300c      	adds	r0, #12
   18664:	60a0      	str	r0, [r4, #8]
   18666:	3268      	adds	r2, #104	; 0x68
   18668:	f7ff f9ad 	bl	179c6 <memset>
   1866c:	0020      	movs	r0, r4
   1866e:	bd70      	pop	{r4, r5, r6, pc}

00018670 <__sinit>:
   18670:	6983      	ldr	r3, [r0, #24]
   18672:	b513      	push	{r0, r1, r4, lr}
   18674:	0004      	movs	r4, r0
   18676:	2b00      	cmp	r3, #0
   18678:	d128      	bne.n	186cc <__sinit+0x5c>
   1867a:	6483      	str	r3, [r0, #72]	; 0x48
   1867c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1867e:	6503      	str	r3, [r0, #80]	; 0x50
   18680:	4b13      	ldr	r3, [pc, #76]	; (186d0 <__sinit+0x60>)
   18682:	4a14      	ldr	r2, [pc, #80]	; (186d4 <__sinit+0x64>)
   18684:	681b      	ldr	r3, [r3, #0]
   18686:	6282      	str	r2, [r0, #40]	; 0x28
   18688:	9301      	str	r3, [sp, #4]
   1868a:	4298      	cmp	r0, r3
   1868c:	d101      	bne.n	18692 <__sinit+0x22>
   1868e:	2301      	movs	r3, #1
   18690:	6183      	str	r3, [r0, #24]
   18692:	0020      	movs	r0, r4
   18694:	f000 f820 	bl	186d8 <__sfp>
   18698:	6060      	str	r0, [r4, #4]
   1869a:	0020      	movs	r0, r4
   1869c:	f000 f81c 	bl	186d8 <__sfp>
   186a0:	60a0      	str	r0, [r4, #8]
   186a2:	0020      	movs	r0, r4
   186a4:	f000 f818 	bl	186d8 <__sfp>
   186a8:	2200      	movs	r2, #0
   186aa:	60e0      	str	r0, [r4, #12]
   186ac:	2104      	movs	r1, #4
   186ae:	6860      	ldr	r0, [r4, #4]
   186b0:	f7ff ffa4 	bl	185fc <std.isra.0>
   186b4:	2201      	movs	r2, #1
   186b6:	2109      	movs	r1, #9
   186b8:	68a0      	ldr	r0, [r4, #8]
   186ba:	f7ff ff9f 	bl	185fc <std.isra.0>
   186be:	2202      	movs	r2, #2
   186c0:	2112      	movs	r1, #18
   186c2:	68e0      	ldr	r0, [r4, #12]
   186c4:	f7ff ff9a 	bl	185fc <std.isra.0>
   186c8:	2301      	movs	r3, #1
   186ca:	61a3      	str	r3, [r4, #24]
   186cc:	bd13      	pop	{r0, r1, r4, pc}
   186ce:	46c0      	nop			; (mov r8, r8)
   186d0:	0001bbc4 	.word	0x0001bbc4
   186d4:	000185ed 	.word	0x000185ed

000186d8 <__sfp>:
   186d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   186da:	4b1e      	ldr	r3, [pc, #120]	; (18754 <__sfp+0x7c>)
   186dc:	0007      	movs	r7, r0
   186de:	681e      	ldr	r6, [r3, #0]
   186e0:	69b3      	ldr	r3, [r6, #24]
   186e2:	2b00      	cmp	r3, #0
   186e4:	d102      	bne.n	186ec <__sfp+0x14>
   186e6:	0030      	movs	r0, r6
   186e8:	f7ff ffc2 	bl	18670 <__sinit>
   186ec:	3648      	adds	r6, #72	; 0x48
   186ee:	68b4      	ldr	r4, [r6, #8]
   186f0:	6873      	ldr	r3, [r6, #4]
   186f2:	3b01      	subs	r3, #1
   186f4:	d504      	bpl.n	18700 <__sfp+0x28>
   186f6:	6833      	ldr	r3, [r6, #0]
   186f8:	2b00      	cmp	r3, #0
   186fa:	d007      	beq.n	1870c <__sfp+0x34>
   186fc:	6836      	ldr	r6, [r6, #0]
   186fe:	e7f6      	b.n	186ee <__sfp+0x16>
   18700:	220c      	movs	r2, #12
   18702:	5ea5      	ldrsh	r5, [r4, r2]
   18704:	2d00      	cmp	r5, #0
   18706:	d00d      	beq.n	18724 <__sfp+0x4c>
   18708:	3468      	adds	r4, #104	; 0x68
   1870a:	e7f2      	b.n	186f2 <__sfp+0x1a>
   1870c:	2104      	movs	r1, #4
   1870e:	0038      	movs	r0, r7
   18710:	f7ff ff98 	bl	18644 <__sfmoreglue>
   18714:	6030      	str	r0, [r6, #0]
   18716:	2800      	cmp	r0, #0
   18718:	d1f0      	bne.n	186fc <__sfp+0x24>
   1871a:	230c      	movs	r3, #12
   1871c:	0004      	movs	r4, r0
   1871e:	603b      	str	r3, [r7, #0]
   18720:	0020      	movs	r0, r4
   18722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18724:	2301      	movs	r3, #1
   18726:	0020      	movs	r0, r4
   18728:	425b      	negs	r3, r3
   1872a:	81e3      	strh	r3, [r4, #14]
   1872c:	3302      	adds	r3, #2
   1872e:	81a3      	strh	r3, [r4, #12]
   18730:	6665      	str	r5, [r4, #100]	; 0x64
   18732:	6025      	str	r5, [r4, #0]
   18734:	60a5      	str	r5, [r4, #8]
   18736:	6065      	str	r5, [r4, #4]
   18738:	6125      	str	r5, [r4, #16]
   1873a:	6165      	str	r5, [r4, #20]
   1873c:	61a5      	str	r5, [r4, #24]
   1873e:	2208      	movs	r2, #8
   18740:	0029      	movs	r1, r5
   18742:	305c      	adds	r0, #92	; 0x5c
   18744:	f7ff f93f 	bl	179c6 <memset>
   18748:	6365      	str	r5, [r4, #52]	; 0x34
   1874a:	63a5      	str	r5, [r4, #56]	; 0x38
   1874c:	64a5      	str	r5, [r4, #72]	; 0x48
   1874e:	64e5      	str	r5, [r4, #76]	; 0x4c
   18750:	e7e6      	b.n	18720 <__sfp+0x48>
   18752:	46c0      	nop			; (mov r8, r8)
   18754:	0001bbc4 	.word	0x0001bbc4

00018758 <_fwalk_reent>:
   18758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1875a:	0004      	movs	r4, r0
   1875c:	0007      	movs	r7, r0
   1875e:	2600      	movs	r6, #0
   18760:	9101      	str	r1, [sp, #4]
   18762:	3448      	adds	r4, #72	; 0x48
   18764:	2c00      	cmp	r4, #0
   18766:	d101      	bne.n	1876c <_fwalk_reent+0x14>
   18768:	0030      	movs	r0, r6
   1876a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1876c:	6863      	ldr	r3, [r4, #4]
   1876e:	68a5      	ldr	r5, [r4, #8]
   18770:	9300      	str	r3, [sp, #0]
   18772:	9b00      	ldr	r3, [sp, #0]
   18774:	3b01      	subs	r3, #1
   18776:	9300      	str	r3, [sp, #0]
   18778:	d501      	bpl.n	1877e <_fwalk_reent+0x26>
   1877a:	6824      	ldr	r4, [r4, #0]
   1877c:	e7f2      	b.n	18764 <_fwalk_reent+0xc>
   1877e:	89ab      	ldrh	r3, [r5, #12]
   18780:	2b01      	cmp	r3, #1
   18782:	d908      	bls.n	18796 <_fwalk_reent+0x3e>
   18784:	220e      	movs	r2, #14
   18786:	5eab      	ldrsh	r3, [r5, r2]
   18788:	3301      	adds	r3, #1
   1878a:	d004      	beq.n	18796 <_fwalk_reent+0x3e>
   1878c:	0029      	movs	r1, r5
   1878e:	0038      	movs	r0, r7
   18790:	9b01      	ldr	r3, [sp, #4]
   18792:	4798      	blx	r3
   18794:	4306      	orrs	r6, r0
   18796:	3568      	adds	r5, #104	; 0x68
   18798:	e7eb      	b.n	18772 <_fwalk_reent+0x1a>

0001879a <__locale_ctype_ptr_l>:
   1879a:	30ec      	adds	r0, #236	; 0xec
   1879c:	6800      	ldr	r0, [r0, #0]
   1879e:	4770      	bx	lr

000187a0 <__swhatbuf_r>:
   187a0:	b570      	push	{r4, r5, r6, lr}
   187a2:	000e      	movs	r6, r1
   187a4:	001d      	movs	r5, r3
   187a6:	230e      	movs	r3, #14
   187a8:	5ec9      	ldrsh	r1, [r1, r3]
   187aa:	b090      	sub	sp, #64	; 0x40
   187ac:	0014      	movs	r4, r2
   187ae:	2900      	cmp	r1, #0
   187b0:	da07      	bge.n	187c2 <__swhatbuf_r+0x22>
   187b2:	2300      	movs	r3, #0
   187b4:	602b      	str	r3, [r5, #0]
   187b6:	89b3      	ldrh	r3, [r6, #12]
   187b8:	061b      	lsls	r3, r3, #24
   187ba:	d411      	bmi.n	187e0 <__swhatbuf_r+0x40>
   187bc:	2380      	movs	r3, #128	; 0x80
   187be:	00db      	lsls	r3, r3, #3
   187c0:	e00f      	b.n	187e2 <__swhatbuf_r+0x42>
   187c2:	aa01      	add	r2, sp, #4
   187c4:	f000 fd52 	bl	1926c <_fstat_r>
   187c8:	2800      	cmp	r0, #0
   187ca:	dbf2      	blt.n	187b2 <__swhatbuf_r+0x12>
   187cc:	22f0      	movs	r2, #240	; 0xf0
   187ce:	9b02      	ldr	r3, [sp, #8]
   187d0:	0212      	lsls	r2, r2, #8
   187d2:	4013      	ands	r3, r2
   187d4:	4a05      	ldr	r2, [pc, #20]	; (187ec <__swhatbuf_r+0x4c>)
   187d6:	189b      	adds	r3, r3, r2
   187d8:	425a      	negs	r2, r3
   187da:	4153      	adcs	r3, r2
   187dc:	602b      	str	r3, [r5, #0]
   187de:	e7ed      	b.n	187bc <__swhatbuf_r+0x1c>
   187e0:	2340      	movs	r3, #64	; 0x40
   187e2:	2000      	movs	r0, #0
   187e4:	6023      	str	r3, [r4, #0]
   187e6:	b010      	add	sp, #64	; 0x40
   187e8:	bd70      	pop	{r4, r5, r6, pc}
   187ea:	46c0      	nop			; (mov r8, r8)
   187ec:	ffffe000 	.word	0xffffe000

000187f0 <__smakebuf_r>:
   187f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   187f2:	2602      	movs	r6, #2
   187f4:	898b      	ldrh	r3, [r1, #12]
   187f6:	0005      	movs	r5, r0
   187f8:	000c      	movs	r4, r1
   187fa:	4233      	tst	r3, r6
   187fc:	d006      	beq.n	1880c <__smakebuf_r+0x1c>
   187fe:	0023      	movs	r3, r4
   18800:	3347      	adds	r3, #71	; 0x47
   18802:	6023      	str	r3, [r4, #0]
   18804:	6123      	str	r3, [r4, #16]
   18806:	2301      	movs	r3, #1
   18808:	6163      	str	r3, [r4, #20]
   1880a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1880c:	ab01      	add	r3, sp, #4
   1880e:	466a      	mov	r2, sp
   18810:	f7ff ffc6 	bl	187a0 <__swhatbuf_r>
   18814:	9900      	ldr	r1, [sp, #0]
   18816:	0007      	movs	r7, r0
   18818:	0028      	movs	r0, r5
   1881a:	f7ff f927 	bl	17a6c <_malloc_r>
   1881e:	2800      	cmp	r0, #0
   18820:	d108      	bne.n	18834 <__smakebuf_r+0x44>
   18822:	220c      	movs	r2, #12
   18824:	5ea3      	ldrsh	r3, [r4, r2]
   18826:	059a      	lsls	r2, r3, #22
   18828:	d4ef      	bmi.n	1880a <__smakebuf_r+0x1a>
   1882a:	2203      	movs	r2, #3
   1882c:	4393      	bics	r3, r2
   1882e:	431e      	orrs	r6, r3
   18830:	81a6      	strh	r6, [r4, #12]
   18832:	e7e4      	b.n	187fe <__smakebuf_r+0xe>
   18834:	4b0f      	ldr	r3, [pc, #60]	; (18874 <__smakebuf_r+0x84>)
   18836:	62ab      	str	r3, [r5, #40]	; 0x28
   18838:	2380      	movs	r3, #128	; 0x80
   1883a:	89a2      	ldrh	r2, [r4, #12]
   1883c:	6020      	str	r0, [r4, #0]
   1883e:	4313      	orrs	r3, r2
   18840:	81a3      	strh	r3, [r4, #12]
   18842:	9b00      	ldr	r3, [sp, #0]
   18844:	6120      	str	r0, [r4, #16]
   18846:	6163      	str	r3, [r4, #20]
   18848:	9b01      	ldr	r3, [sp, #4]
   1884a:	2b00      	cmp	r3, #0
   1884c:	d00d      	beq.n	1886a <__smakebuf_r+0x7a>
   1884e:	230e      	movs	r3, #14
   18850:	5ee1      	ldrsh	r1, [r4, r3]
   18852:	0028      	movs	r0, r5
   18854:	f000 fd1c 	bl	19290 <_isatty_r>
   18858:	2800      	cmp	r0, #0
   1885a:	d006      	beq.n	1886a <__smakebuf_r+0x7a>
   1885c:	2203      	movs	r2, #3
   1885e:	89a3      	ldrh	r3, [r4, #12]
   18860:	4393      	bics	r3, r2
   18862:	001a      	movs	r2, r3
   18864:	2301      	movs	r3, #1
   18866:	4313      	orrs	r3, r2
   18868:	81a3      	strh	r3, [r4, #12]
   1886a:	89a0      	ldrh	r0, [r4, #12]
   1886c:	4338      	orrs	r0, r7
   1886e:	81a0      	strh	r0, [r4, #12]
   18870:	e7cb      	b.n	1880a <__smakebuf_r+0x1a>
   18872:	46c0      	nop			; (mov r8, r8)
   18874:	000185ed 	.word	0x000185ed

00018878 <__ascii_mbtowc>:
   18878:	b082      	sub	sp, #8
   1887a:	2900      	cmp	r1, #0
   1887c:	d100      	bne.n	18880 <__ascii_mbtowc+0x8>
   1887e:	a901      	add	r1, sp, #4
   18880:	1e10      	subs	r0, r2, #0
   18882:	d006      	beq.n	18892 <__ascii_mbtowc+0x1a>
   18884:	2b00      	cmp	r3, #0
   18886:	d006      	beq.n	18896 <__ascii_mbtowc+0x1e>
   18888:	7813      	ldrb	r3, [r2, #0]
   1888a:	600b      	str	r3, [r1, #0]
   1888c:	7810      	ldrb	r0, [r2, #0]
   1888e:	1e43      	subs	r3, r0, #1
   18890:	4198      	sbcs	r0, r3
   18892:	b002      	add	sp, #8
   18894:	4770      	bx	lr
   18896:	2002      	movs	r0, #2
   18898:	4240      	negs	r0, r0
   1889a:	e7fa      	b.n	18892 <__ascii_mbtowc+0x1a>

0001889c <__malloc_lock>:
   1889c:	4770      	bx	lr

0001889e <__malloc_unlock>:
   1889e:	4770      	bx	lr

000188a0 <__ssputs_r>:
   188a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   188a2:	688e      	ldr	r6, [r1, #8]
   188a4:	b085      	sub	sp, #20
   188a6:	0007      	movs	r7, r0
   188a8:	000c      	movs	r4, r1
   188aa:	9203      	str	r2, [sp, #12]
   188ac:	9301      	str	r3, [sp, #4]
   188ae:	429e      	cmp	r6, r3
   188b0:	d839      	bhi.n	18926 <__ssputs_r+0x86>
   188b2:	2390      	movs	r3, #144	; 0x90
   188b4:	898a      	ldrh	r2, [r1, #12]
   188b6:	00db      	lsls	r3, r3, #3
   188b8:	421a      	tst	r2, r3
   188ba:	d034      	beq.n	18926 <__ssputs_r+0x86>
   188bc:	2503      	movs	r5, #3
   188be:	6909      	ldr	r1, [r1, #16]
   188c0:	6823      	ldr	r3, [r4, #0]
   188c2:	1a5b      	subs	r3, r3, r1
   188c4:	9302      	str	r3, [sp, #8]
   188c6:	6963      	ldr	r3, [r4, #20]
   188c8:	9802      	ldr	r0, [sp, #8]
   188ca:	435d      	muls	r5, r3
   188cc:	0feb      	lsrs	r3, r5, #31
   188ce:	195d      	adds	r5, r3, r5
   188d0:	9b01      	ldr	r3, [sp, #4]
   188d2:	106d      	asrs	r5, r5, #1
   188d4:	3301      	adds	r3, #1
   188d6:	181b      	adds	r3, r3, r0
   188d8:	42ab      	cmp	r3, r5
   188da:	d900      	bls.n	188de <__ssputs_r+0x3e>
   188dc:	001d      	movs	r5, r3
   188de:	0553      	lsls	r3, r2, #21
   188e0:	d532      	bpl.n	18948 <__ssputs_r+0xa8>
   188e2:	0029      	movs	r1, r5
   188e4:	0038      	movs	r0, r7
   188e6:	f7ff f8c1 	bl	17a6c <_malloc_r>
   188ea:	1e06      	subs	r6, r0, #0
   188ec:	d109      	bne.n	18902 <__ssputs_r+0x62>
   188ee:	230c      	movs	r3, #12
   188f0:	603b      	str	r3, [r7, #0]
   188f2:	2340      	movs	r3, #64	; 0x40
   188f4:	2001      	movs	r0, #1
   188f6:	89a2      	ldrh	r2, [r4, #12]
   188f8:	4240      	negs	r0, r0
   188fa:	4313      	orrs	r3, r2
   188fc:	81a3      	strh	r3, [r4, #12]
   188fe:	b005      	add	sp, #20
   18900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18902:	9a02      	ldr	r2, [sp, #8]
   18904:	6921      	ldr	r1, [r4, #16]
   18906:	f7ff f843 	bl	17990 <memcpy>
   1890a:	89a3      	ldrh	r3, [r4, #12]
   1890c:	4a14      	ldr	r2, [pc, #80]	; (18960 <__ssputs_r+0xc0>)
   1890e:	401a      	ands	r2, r3
   18910:	2380      	movs	r3, #128	; 0x80
   18912:	4313      	orrs	r3, r2
   18914:	81a3      	strh	r3, [r4, #12]
   18916:	9b02      	ldr	r3, [sp, #8]
   18918:	6126      	str	r6, [r4, #16]
   1891a:	18f6      	adds	r6, r6, r3
   1891c:	6026      	str	r6, [r4, #0]
   1891e:	6165      	str	r5, [r4, #20]
   18920:	9e01      	ldr	r6, [sp, #4]
   18922:	1aed      	subs	r5, r5, r3
   18924:	60a5      	str	r5, [r4, #8]
   18926:	9b01      	ldr	r3, [sp, #4]
   18928:	42b3      	cmp	r3, r6
   1892a:	d200      	bcs.n	1892e <__ssputs_r+0x8e>
   1892c:	001e      	movs	r6, r3
   1892e:	0032      	movs	r2, r6
   18930:	9903      	ldr	r1, [sp, #12]
   18932:	6820      	ldr	r0, [r4, #0]
   18934:	f7ff f835 	bl	179a2 <memmove>
   18938:	68a3      	ldr	r3, [r4, #8]
   1893a:	2000      	movs	r0, #0
   1893c:	1b9b      	subs	r3, r3, r6
   1893e:	60a3      	str	r3, [r4, #8]
   18940:	6823      	ldr	r3, [r4, #0]
   18942:	199e      	adds	r6, r3, r6
   18944:	6026      	str	r6, [r4, #0]
   18946:	e7da      	b.n	188fe <__ssputs_r+0x5e>
   18948:	002a      	movs	r2, r5
   1894a:	0038      	movs	r0, r7
   1894c:	f000 fcd1 	bl	192f2 <_realloc_r>
   18950:	1e06      	subs	r6, r0, #0
   18952:	d1e0      	bne.n	18916 <__ssputs_r+0x76>
   18954:	6921      	ldr	r1, [r4, #16]
   18956:	0038      	movs	r0, r7
   18958:	f7ff f83e 	bl	179d8 <_free_r>
   1895c:	e7c7      	b.n	188ee <__ssputs_r+0x4e>
   1895e:	46c0      	nop			; (mov r8, r8)
   18960:	fffffb7f 	.word	0xfffffb7f

00018964 <_svfiprintf_r>:
   18964:	b5f0      	push	{r4, r5, r6, r7, lr}
   18966:	b09f      	sub	sp, #124	; 0x7c
   18968:	9002      	str	r0, [sp, #8]
   1896a:	9305      	str	r3, [sp, #20]
   1896c:	898b      	ldrh	r3, [r1, #12]
   1896e:	000f      	movs	r7, r1
   18970:	0016      	movs	r6, r2
   18972:	061b      	lsls	r3, r3, #24
   18974:	d511      	bpl.n	1899a <_svfiprintf_r+0x36>
   18976:	690b      	ldr	r3, [r1, #16]
   18978:	2b00      	cmp	r3, #0
   1897a:	d10e      	bne.n	1899a <_svfiprintf_r+0x36>
   1897c:	2140      	movs	r1, #64	; 0x40
   1897e:	f7ff f875 	bl	17a6c <_malloc_r>
   18982:	6038      	str	r0, [r7, #0]
   18984:	6138      	str	r0, [r7, #16]
   18986:	2800      	cmp	r0, #0
   18988:	d105      	bne.n	18996 <_svfiprintf_r+0x32>
   1898a:	230c      	movs	r3, #12
   1898c:	9a02      	ldr	r2, [sp, #8]
   1898e:	3801      	subs	r0, #1
   18990:	6013      	str	r3, [r2, #0]
   18992:	b01f      	add	sp, #124	; 0x7c
   18994:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18996:	2340      	movs	r3, #64	; 0x40
   18998:	617b      	str	r3, [r7, #20]
   1899a:	2300      	movs	r3, #0
   1899c:	ad06      	add	r5, sp, #24
   1899e:	616b      	str	r3, [r5, #20]
   189a0:	3320      	adds	r3, #32
   189a2:	766b      	strb	r3, [r5, #25]
   189a4:	3310      	adds	r3, #16
   189a6:	76ab      	strb	r3, [r5, #26]
   189a8:	0034      	movs	r4, r6
   189aa:	7823      	ldrb	r3, [r4, #0]
   189ac:	2b00      	cmp	r3, #0
   189ae:	d147      	bne.n	18a40 <_svfiprintf_r+0xdc>
   189b0:	1ba3      	subs	r3, r4, r6
   189b2:	9304      	str	r3, [sp, #16]
   189b4:	d00d      	beq.n	189d2 <_svfiprintf_r+0x6e>
   189b6:	1ba3      	subs	r3, r4, r6
   189b8:	0032      	movs	r2, r6
   189ba:	0039      	movs	r1, r7
   189bc:	9802      	ldr	r0, [sp, #8]
   189be:	f7ff ff6f 	bl	188a0 <__ssputs_r>
   189c2:	1c43      	adds	r3, r0, #1
   189c4:	d100      	bne.n	189c8 <_svfiprintf_r+0x64>
   189c6:	e0b5      	b.n	18b34 <_svfiprintf_r+0x1d0>
   189c8:	696a      	ldr	r2, [r5, #20]
   189ca:	9b04      	ldr	r3, [sp, #16]
   189cc:	4694      	mov	ip, r2
   189ce:	4463      	add	r3, ip
   189d0:	616b      	str	r3, [r5, #20]
   189d2:	7823      	ldrb	r3, [r4, #0]
   189d4:	2b00      	cmp	r3, #0
   189d6:	d100      	bne.n	189da <_svfiprintf_r+0x76>
   189d8:	e0ac      	b.n	18b34 <_svfiprintf_r+0x1d0>
   189da:	2201      	movs	r2, #1
   189dc:	2300      	movs	r3, #0
   189de:	4252      	negs	r2, r2
   189e0:	606a      	str	r2, [r5, #4]
   189e2:	a902      	add	r1, sp, #8
   189e4:	3254      	adds	r2, #84	; 0x54
   189e6:	1852      	adds	r2, r2, r1
   189e8:	3401      	adds	r4, #1
   189ea:	602b      	str	r3, [r5, #0]
   189ec:	60eb      	str	r3, [r5, #12]
   189ee:	60ab      	str	r3, [r5, #8]
   189f0:	7013      	strb	r3, [r2, #0]
   189f2:	65ab      	str	r3, [r5, #88]	; 0x58
   189f4:	4e58      	ldr	r6, [pc, #352]	; (18b58 <_svfiprintf_r+0x1f4>)
   189f6:	2205      	movs	r2, #5
   189f8:	7821      	ldrb	r1, [r4, #0]
   189fa:	0030      	movs	r0, r6
   189fc:	f000 fc6e 	bl	192dc <memchr>
   18a00:	1c62      	adds	r2, r4, #1
   18a02:	2800      	cmp	r0, #0
   18a04:	d120      	bne.n	18a48 <_svfiprintf_r+0xe4>
   18a06:	6829      	ldr	r1, [r5, #0]
   18a08:	06cb      	lsls	r3, r1, #27
   18a0a:	d504      	bpl.n	18a16 <_svfiprintf_r+0xb2>
   18a0c:	2353      	movs	r3, #83	; 0x53
   18a0e:	ae02      	add	r6, sp, #8
   18a10:	3020      	adds	r0, #32
   18a12:	199b      	adds	r3, r3, r6
   18a14:	7018      	strb	r0, [r3, #0]
   18a16:	070b      	lsls	r3, r1, #28
   18a18:	d504      	bpl.n	18a24 <_svfiprintf_r+0xc0>
   18a1a:	2353      	movs	r3, #83	; 0x53
   18a1c:	202b      	movs	r0, #43	; 0x2b
   18a1e:	ae02      	add	r6, sp, #8
   18a20:	199b      	adds	r3, r3, r6
   18a22:	7018      	strb	r0, [r3, #0]
   18a24:	7823      	ldrb	r3, [r4, #0]
   18a26:	2b2a      	cmp	r3, #42	; 0x2a
   18a28:	d016      	beq.n	18a58 <_svfiprintf_r+0xf4>
   18a2a:	2000      	movs	r0, #0
   18a2c:	210a      	movs	r1, #10
   18a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a30:	7822      	ldrb	r2, [r4, #0]
   18a32:	3a30      	subs	r2, #48	; 0x30
   18a34:	2a09      	cmp	r2, #9
   18a36:	d955      	bls.n	18ae4 <_svfiprintf_r+0x180>
   18a38:	2800      	cmp	r0, #0
   18a3a:	d015      	beq.n	18a68 <_svfiprintf_r+0x104>
   18a3c:	9309      	str	r3, [sp, #36]	; 0x24
   18a3e:	e013      	b.n	18a68 <_svfiprintf_r+0x104>
   18a40:	2b25      	cmp	r3, #37	; 0x25
   18a42:	d0b5      	beq.n	189b0 <_svfiprintf_r+0x4c>
   18a44:	3401      	adds	r4, #1
   18a46:	e7b0      	b.n	189aa <_svfiprintf_r+0x46>
   18a48:	2301      	movs	r3, #1
   18a4a:	1b80      	subs	r0, r0, r6
   18a4c:	4083      	lsls	r3, r0
   18a4e:	6829      	ldr	r1, [r5, #0]
   18a50:	0014      	movs	r4, r2
   18a52:	430b      	orrs	r3, r1
   18a54:	602b      	str	r3, [r5, #0]
   18a56:	e7cd      	b.n	189f4 <_svfiprintf_r+0x90>
   18a58:	9b05      	ldr	r3, [sp, #20]
   18a5a:	1d18      	adds	r0, r3, #4
   18a5c:	681b      	ldr	r3, [r3, #0]
   18a5e:	9005      	str	r0, [sp, #20]
   18a60:	2b00      	cmp	r3, #0
   18a62:	db39      	blt.n	18ad8 <_svfiprintf_r+0x174>
   18a64:	9309      	str	r3, [sp, #36]	; 0x24
   18a66:	0014      	movs	r4, r2
   18a68:	7823      	ldrb	r3, [r4, #0]
   18a6a:	2b2e      	cmp	r3, #46	; 0x2e
   18a6c:	d10b      	bne.n	18a86 <_svfiprintf_r+0x122>
   18a6e:	7863      	ldrb	r3, [r4, #1]
   18a70:	1c62      	adds	r2, r4, #1
   18a72:	2b2a      	cmp	r3, #42	; 0x2a
   18a74:	d13e      	bne.n	18af4 <_svfiprintf_r+0x190>
   18a76:	9b05      	ldr	r3, [sp, #20]
   18a78:	3402      	adds	r4, #2
   18a7a:	1d1a      	adds	r2, r3, #4
   18a7c:	681b      	ldr	r3, [r3, #0]
   18a7e:	9205      	str	r2, [sp, #20]
   18a80:	2b00      	cmp	r3, #0
   18a82:	db34      	blt.n	18aee <_svfiprintf_r+0x18a>
   18a84:	9307      	str	r3, [sp, #28]
   18a86:	4e35      	ldr	r6, [pc, #212]	; (18b5c <_svfiprintf_r+0x1f8>)
   18a88:	7821      	ldrb	r1, [r4, #0]
   18a8a:	2203      	movs	r2, #3
   18a8c:	0030      	movs	r0, r6
   18a8e:	f000 fc25 	bl	192dc <memchr>
   18a92:	2800      	cmp	r0, #0
   18a94:	d006      	beq.n	18aa4 <_svfiprintf_r+0x140>
   18a96:	2340      	movs	r3, #64	; 0x40
   18a98:	1b80      	subs	r0, r0, r6
   18a9a:	4083      	lsls	r3, r0
   18a9c:	682a      	ldr	r2, [r5, #0]
   18a9e:	3401      	adds	r4, #1
   18aa0:	4313      	orrs	r3, r2
   18aa2:	602b      	str	r3, [r5, #0]
   18aa4:	7821      	ldrb	r1, [r4, #0]
   18aa6:	2206      	movs	r2, #6
   18aa8:	482d      	ldr	r0, [pc, #180]	; (18b60 <_svfiprintf_r+0x1fc>)
   18aaa:	1c66      	adds	r6, r4, #1
   18aac:	7629      	strb	r1, [r5, #24]
   18aae:	f000 fc15 	bl	192dc <memchr>
   18ab2:	2800      	cmp	r0, #0
   18ab4:	d046      	beq.n	18b44 <_svfiprintf_r+0x1e0>
   18ab6:	4b2b      	ldr	r3, [pc, #172]	; (18b64 <_svfiprintf_r+0x200>)
   18ab8:	2b00      	cmp	r3, #0
   18aba:	d12f      	bne.n	18b1c <_svfiprintf_r+0x1b8>
   18abc:	6829      	ldr	r1, [r5, #0]
   18abe:	9b05      	ldr	r3, [sp, #20]
   18ac0:	2207      	movs	r2, #7
   18ac2:	05c9      	lsls	r1, r1, #23
   18ac4:	d528      	bpl.n	18b18 <_svfiprintf_r+0x1b4>
   18ac6:	189b      	adds	r3, r3, r2
   18ac8:	4393      	bics	r3, r2
   18aca:	3308      	adds	r3, #8
   18acc:	9305      	str	r3, [sp, #20]
   18ace:	696b      	ldr	r3, [r5, #20]
   18ad0:	9a03      	ldr	r2, [sp, #12]
   18ad2:	189b      	adds	r3, r3, r2
   18ad4:	616b      	str	r3, [r5, #20]
   18ad6:	e767      	b.n	189a8 <_svfiprintf_r+0x44>
   18ad8:	425b      	negs	r3, r3
   18ada:	60eb      	str	r3, [r5, #12]
   18adc:	2302      	movs	r3, #2
   18ade:	430b      	orrs	r3, r1
   18ae0:	602b      	str	r3, [r5, #0]
   18ae2:	e7c0      	b.n	18a66 <_svfiprintf_r+0x102>
   18ae4:	434b      	muls	r3, r1
   18ae6:	3401      	adds	r4, #1
   18ae8:	189b      	adds	r3, r3, r2
   18aea:	2001      	movs	r0, #1
   18aec:	e7a0      	b.n	18a30 <_svfiprintf_r+0xcc>
   18aee:	2301      	movs	r3, #1
   18af0:	425b      	negs	r3, r3
   18af2:	e7c7      	b.n	18a84 <_svfiprintf_r+0x120>
   18af4:	2300      	movs	r3, #0
   18af6:	0014      	movs	r4, r2
   18af8:	200a      	movs	r0, #10
   18afa:	001a      	movs	r2, r3
   18afc:	606b      	str	r3, [r5, #4]
   18afe:	7821      	ldrb	r1, [r4, #0]
   18b00:	3930      	subs	r1, #48	; 0x30
   18b02:	2909      	cmp	r1, #9
   18b04:	d903      	bls.n	18b0e <_svfiprintf_r+0x1aa>
   18b06:	2b00      	cmp	r3, #0
   18b08:	d0bd      	beq.n	18a86 <_svfiprintf_r+0x122>
   18b0a:	9207      	str	r2, [sp, #28]
   18b0c:	e7bb      	b.n	18a86 <_svfiprintf_r+0x122>
   18b0e:	4342      	muls	r2, r0
   18b10:	3401      	adds	r4, #1
   18b12:	1852      	adds	r2, r2, r1
   18b14:	2301      	movs	r3, #1
   18b16:	e7f2      	b.n	18afe <_svfiprintf_r+0x19a>
   18b18:	3307      	adds	r3, #7
   18b1a:	e7d5      	b.n	18ac8 <_svfiprintf_r+0x164>
   18b1c:	ab05      	add	r3, sp, #20
   18b1e:	9300      	str	r3, [sp, #0]
   18b20:	003a      	movs	r2, r7
   18b22:	4b11      	ldr	r3, [pc, #68]	; (18b68 <_svfiprintf_r+0x204>)
   18b24:	0029      	movs	r1, r5
   18b26:	9802      	ldr	r0, [sp, #8]
   18b28:	e000      	b.n	18b2c <_svfiprintf_r+0x1c8>
   18b2a:	bf00      	nop
   18b2c:	9003      	str	r0, [sp, #12]
   18b2e:	9b03      	ldr	r3, [sp, #12]
   18b30:	3301      	adds	r3, #1
   18b32:	d1cc      	bne.n	18ace <_svfiprintf_r+0x16a>
   18b34:	89bb      	ldrh	r3, [r7, #12]
   18b36:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18b38:	065b      	lsls	r3, r3, #25
   18b3a:	d400      	bmi.n	18b3e <_svfiprintf_r+0x1da>
   18b3c:	e729      	b.n	18992 <_svfiprintf_r+0x2e>
   18b3e:	2001      	movs	r0, #1
   18b40:	4240      	negs	r0, r0
   18b42:	e726      	b.n	18992 <_svfiprintf_r+0x2e>
   18b44:	ab05      	add	r3, sp, #20
   18b46:	9300      	str	r3, [sp, #0]
   18b48:	003a      	movs	r2, r7
   18b4a:	4b07      	ldr	r3, [pc, #28]	; (18b68 <_svfiprintf_r+0x204>)
   18b4c:	0029      	movs	r1, r5
   18b4e:	9802      	ldr	r0, [sp, #8]
   18b50:	f000 f9be 	bl	18ed0 <_printf_i>
   18b54:	e7ea      	b.n	18b2c <_svfiprintf_r+0x1c8>
   18b56:	46c0      	nop			; (mov r8, r8)
   18b58:	0001bc32 	.word	0x0001bc32
   18b5c:	0001bc38 	.word	0x0001bc38
   18b60:	0001bc3c 	.word	0x0001bc3c
   18b64:	00000000 	.word	0x00000000
   18b68:	000188a1 	.word	0x000188a1

00018b6c <__sfputc_r>:
   18b6c:	6893      	ldr	r3, [r2, #8]
   18b6e:	b510      	push	{r4, lr}
   18b70:	3b01      	subs	r3, #1
   18b72:	6093      	str	r3, [r2, #8]
   18b74:	2b00      	cmp	r3, #0
   18b76:	da05      	bge.n	18b84 <__sfputc_r+0x18>
   18b78:	6994      	ldr	r4, [r2, #24]
   18b7a:	42a3      	cmp	r3, r4
   18b7c:	db08      	blt.n	18b90 <__sfputc_r+0x24>
   18b7e:	b2cb      	uxtb	r3, r1
   18b80:	2b0a      	cmp	r3, #10
   18b82:	d005      	beq.n	18b90 <__sfputc_r+0x24>
   18b84:	6813      	ldr	r3, [r2, #0]
   18b86:	1c58      	adds	r0, r3, #1
   18b88:	6010      	str	r0, [r2, #0]
   18b8a:	7019      	strb	r1, [r3, #0]
   18b8c:	b2c8      	uxtb	r0, r1
   18b8e:	bd10      	pop	{r4, pc}
   18b90:	f7ff fbaa 	bl	182e8 <__swbuf_r>
   18b94:	e7fb      	b.n	18b8e <__sfputc_r+0x22>

00018b96 <__sfputs_r>:
   18b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b98:	0006      	movs	r6, r0
   18b9a:	000f      	movs	r7, r1
   18b9c:	0014      	movs	r4, r2
   18b9e:	18d5      	adds	r5, r2, r3
   18ba0:	42ac      	cmp	r4, r5
   18ba2:	d101      	bne.n	18ba8 <__sfputs_r+0x12>
   18ba4:	2000      	movs	r0, #0
   18ba6:	e007      	b.n	18bb8 <__sfputs_r+0x22>
   18ba8:	7821      	ldrb	r1, [r4, #0]
   18baa:	003a      	movs	r2, r7
   18bac:	0030      	movs	r0, r6
   18bae:	f7ff ffdd 	bl	18b6c <__sfputc_r>
   18bb2:	3401      	adds	r4, #1
   18bb4:	1c43      	adds	r3, r0, #1
   18bb6:	d1f3      	bne.n	18ba0 <__sfputs_r+0xa>
   18bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018bbc <_vfiprintf_r>:
   18bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bbe:	b09f      	sub	sp, #124	; 0x7c
   18bc0:	0006      	movs	r6, r0
   18bc2:	000f      	movs	r7, r1
   18bc4:	0014      	movs	r4, r2
   18bc6:	9305      	str	r3, [sp, #20]
   18bc8:	2800      	cmp	r0, #0
   18bca:	d004      	beq.n	18bd6 <_vfiprintf_r+0x1a>
   18bcc:	6983      	ldr	r3, [r0, #24]
   18bce:	2b00      	cmp	r3, #0
   18bd0:	d101      	bne.n	18bd6 <_vfiprintf_r+0x1a>
   18bd2:	f7ff fd4d 	bl	18670 <__sinit>
   18bd6:	4b7f      	ldr	r3, [pc, #508]	; (18dd4 <_vfiprintf_r+0x218>)
   18bd8:	429f      	cmp	r7, r3
   18bda:	d15c      	bne.n	18c96 <_vfiprintf_r+0xda>
   18bdc:	6877      	ldr	r7, [r6, #4]
   18bde:	89bb      	ldrh	r3, [r7, #12]
   18be0:	071b      	lsls	r3, r3, #28
   18be2:	d562      	bpl.n	18caa <_vfiprintf_r+0xee>
   18be4:	693b      	ldr	r3, [r7, #16]
   18be6:	2b00      	cmp	r3, #0
   18be8:	d05f      	beq.n	18caa <_vfiprintf_r+0xee>
   18bea:	2300      	movs	r3, #0
   18bec:	ad06      	add	r5, sp, #24
   18bee:	616b      	str	r3, [r5, #20]
   18bf0:	3320      	adds	r3, #32
   18bf2:	766b      	strb	r3, [r5, #25]
   18bf4:	3310      	adds	r3, #16
   18bf6:	76ab      	strb	r3, [r5, #26]
   18bf8:	9402      	str	r4, [sp, #8]
   18bfa:	9c02      	ldr	r4, [sp, #8]
   18bfc:	7823      	ldrb	r3, [r4, #0]
   18bfe:	2b00      	cmp	r3, #0
   18c00:	d15d      	bne.n	18cbe <_vfiprintf_r+0x102>
   18c02:	9b02      	ldr	r3, [sp, #8]
   18c04:	1ae3      	subs	r3, r4, r3
   18c06:	9304      	str	r3, [sp, #16]
   18c08:	d00d      	beq.n	18c26 <_vfiprintf_r+0x6a>
   18c0a:	9b04      	ldr	r3, [sp, #16]
   18c0c:	9a02      	ldr	r2, [sp, #8]
   18c0e:	0039      	movs	r1, r7
   18c10:	0030      	movs	r0, r6
   18c12:	f7ff ffc0 	bl	18b96 <__sfputs_r>
   18c16:	1c43      	adds	r3, r0, #1
   18c18:	d100      	bne.n	18c1c <_vfiprintf_r+0x60>
   18c1a:	e0cc      	b.n	18db6 <_vfiprintf_r+0x1fa>
   18c1c:	696a      	ldr	r2, [r5, #20]
   18c1e:	9b04      	ldr	r3, [sp, #16]
   18c20:	4694      	mov	ip, r2
   18c22:	4463      	add	r3, ip
   18c24:	616b      	str	r3, [r5, #20]
   18c26:	7823      	ldrb	r3, [r4, #0]
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d100      	bne.n	18c2e <_vfiprintf_r+0x72>
   18c2c:	e0c3      	b.n	18db6 <_vfiprintf_r+0x1fa>
   18c2e:	2201      	movs	r2, #1
   18c30:	2300      	movs	r3, #0
   18c32:	4252      	negs	r2, r2
   18c34:	606a      	str	r2, [r5, #4]
   18c36:	a902      	add	r1, sp, #8
   18c38:	3254      	adds	r2, #84	; 0x54
   18c3a:	1852      	adds	r2, r2, r1
   18c3c:	3401      	adds	r4, #1
   18c3e:	602b      	str	r3, [r5, #0]
   18c40:	60eb      	str	r3, [r5, #12]
   18c42:	60ab      	str	r3, [r5, #8]
   18c44:	7013      	strb	r3, [r2, #0]
   18c46:	65ab      	str	r3, [r5, #88]	; 0x58
   18c48:	7821      	ldrb	r1, [r4, #0]
   18c4a:	2205      	movs	r2, #5
   18c4c:	4862      	ldr	r0, [pc, #392]	; (18dd8 <_vfiprintf_r+0x21c>)
   18c4e:	f000 fb45 	bl	192dc <memchr>
   18c52:	1c63      	adds	r3, r4, #1
   18c54:	469c      	mov	ip, r3
   18c56:	2800      	cmp	r0, #0
   18c58:	d135      	bne.n	18cc6 <_vfiprintf_r+0x10a>
   18c5a:	6829      	ldr	r1, [r5, #0]
   18c5c:	06cb      	lsls	r3, r1, #27
   18c5e:	d504      	bpl.n	18c6a <_vfiprintf_r+0xae>
   18c60:	2353      	movs	r3, #83	; 0x53
   18c62:	aa02      	add	r2, sp, #8
   18c64:	3020      	adds	r0, #32
   18c66:	189b      	adds	r3, r3, r2
   18c68:	7018      	strb	r0, [r3, #0]
   18c6a:	070b      	lsls	r3, r1, #28
   18c6c:	d504      	bpl.n	18c78 <_vfiprintf_r+0xbc>
   18c6e:	2353      	movs	r3, #83	; 0x53
   18c70:	202b      	movs	r0, #43	; 0x2b
   18c72:	aa02      	add	r2, sp, #8
   18c74:	189b      	adds	r3, r3, r2
   18c76:	7018      	strb	r0, [r3, #0]
   18c78:	7823      	ldrb	r3, [r4, #0]
   18c7a:	2b2a      	cmp	r3, #42	; 0x2a
   18c7c:	d02c      	beq.n	18cd8 <_vfiprintf_r+0x11c>
   18c7e:	2000      	movs	r0, #0
   18c80:	210a      	movs	r1, #10
   18c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18c84:	7822      	ldrb	r2, [r4, #0]
   18c86:	3a30      	subs	r2, #48	; 0x30
   18c88:	2a09      	cmp	r2, #9
   18c8a:	d800      	bhi.n	18c8e <_vfiprintf_r+0xd2>
   18c8c:	e06b      	b.n	18d66 <_vfiprintf_r+0x1aa>
   18c8e:	2800      	cmp	r0, #0
   18c90:	d02a      	beq.n	18ce8 <_vfiprintf_r+0x12c>
   18c92:	9309      	str	r3, [sp, #36]	; 0x24
   18c94:	e028      	b.n	18ce8 <_vfiprintf_r+0x12c>
   18c96:	4b51      	ldr	r3, [pc, #324]	; (18ddc <_vfiprintf_r+0x220>)
   18c98:	429f      	cmp	r7, r3
   18c9a:	d101      	bne.n	18ca0 <_vfiprintf_r+0xe4>
   18c9c:	68b7      	ldr	r7, [r6, #8]
   18c9e:	e79e      	b.n	18bde <_vfiprintf_r+0x22>
   18ca0:	4b4f      	ldr	r3, [pc, #316]	; (18de0 <_vfiprintf_r+0x224>)
   18ca2:	429f      	cmp	r7, r3
   18ca4:	d19b      	bne.n	18bde <_vfiprintf_r+0x22>
   18ca6:	68f7      	ldr	r7, [r6, #12]
   18ca8:	e799      	b.n	18bde <_vfiprintf_r+0x22>
   18caa:	0039      	movs	r1, r7
   18cac:	0030      	movs	r0, r6
   18cae:	f7ff fb71 	bl	18394 <__swsetup_r>
   18cb2:	2800      	cmp	r0, #0
   18cb4:	d099      	beq.n	18bea <_vfiprintf_r+0x2e>
   18cb6:	2001      	movs	r0, #1
   18cb8:	4240      	negs	r0, r0
   18cba:	b01f      	add	sp, #124	; 0x7c
   18cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cbe:	2b25      	cmp	r3, #37	; 0x25
   18cc0:	d09f      	beq.n	18c02 <_vfiprintf_r+0x46>
   18cc2:	3401      	adds	r4, #1
   18cc4:	e79a      	b.n	18bfc <_vfiprintf_r+0x40>
   18cc6:	4b44      	ldr	r3, [pc, #272]	; (18dd8 <_vfiprintf_r+0x21c>)
   18cc8:	6829      	ldr	r1, [r5, #0]
   18cca:	1ac0      	subs	r0, r0, r3
   18ccc:	2301      	movs	r3, #1
   18cce:	4083      	lsls	r3, r0
   18cd0:	430b      	orrs	r3, r1
   18cd2:	602b      	str	r3, [r5, #0]
   18cd4:	4664      	mov	r4, ip
   18cd6:	e7b7      	b.n	18c48 <_vfiprintf_r+0x8c>
   18cd8:	9b05      	ldr	r3, [sp, #20]
   18cda:	1d18      	adds	r0, r3, #4
   18cdc:	681b      	ldr	r3, [r3, #0]
   18cde:	9005      	str	r0, [sp, #20]
   18ce0:	2b00      	cmp	r3, #0
   18ce2:	db3a      	blt.n	18d5a <_vfiprintf_r+0x19e>
   18ce4:	9309      	str	r3, [sp, #36]	; 0x24
   18ce6:	4664      	mov	r4, ip
   18ce8:	7823      	ldrb	r3, [r4, #0]
   18cea:	2b2e      	cmp	r3, #46	; 0x2e
   18cec:	d10b      	bne.n	18d06 <_vfiprintf_r+0x14a>
   18cee:	7863      	ldrb	r3, [r4, #1]
   18cf0:	1c62      	adds	r2, r4, #1
   18cf2:	2b2a      	cmp	r3, #42	; 0x2a
   18cf4:	d13f      	bne.n	18d76 <_vfiprintf_r+0x1ba>
   18cf6:	9b05      	ldr	r3, [sp, #20]
   18cf8:	3402      	adds	r4, #2
   18cfa:	1d1a      	adds	r2, r3, #4
   18cfc:	681b      	ldr	r3, [r3, #0]
   18cfe:	9205      	str	r2, [sp, #20]
   18d00:	2b00      	cmp	r3, #0
   18d02:	db35      	blt.n	18d70 <_vfiprintf_r+0x1b4>
   18d04:	9307      	str	r3, [sp, #28]
   18d06:	7821      	ldrb	r1, [r4, #0]
   18d08:	2203      	movs	r2, #3
   18d0a:	4836      	ldr	r0, [pc, #216]	; (18de4 <_vfiprintf_r+0x228>)
   18d0c:	f000 fae6 	bl	192dc <memchr>
   18d10:	2800      	cmp	r0, #0
   18d12:	d007      	beq.n	18d24 <_vfiprintf_r+0x168>
   18d14:	4b33      	ldr	r3, [pc, #204]	; (18de4 <_vfiprintf_r+0x228>)
   18d16:	682a      	ldr	r2, [r5, #0]
   18d18:	1ac0      	subs	r0, r0, r3
   18d1a:	2340      	movs	r3, #64	; 0x40
   18d1c:	4083      	lsls	r3, r0
   18d1e:	4313      	orrs	r3, r2
   18d20:	602b      	str	r3, [r5, #0]
   18d22:	3401      	adds	r4, #1
   18d24:	7821      	ldrb	r1, [r4, #0]
   18d26:	1c63      	adds	r3, r4, #1
   18d28:	2206      	movs	r2, #6
   18d2a:	482f      	ldr	r0, [pc, #188]	; (18de8 <_vfiprintf_r+0x22c>)
   18d2c:	9302      	str	r3, [sp, #8]
   18d2e:	7629      	strb	r1, [r5, #24]
   18d30:	f000 fad4 	bl	192dc <memchr>
   18d34:	2800      	cmp	r0, #0
   18d36:	d044      	beq.n	18dc2 <_vfiprintf_r+0x206>
   18d38:	4b2c      	ldr	r3, [pc, #176]	; (18dec <_vfiprintf_r+0x230>)
   18d3a:	2b00      	cmp	r3, #0
   18d3c:	d12f      	bne.n	18d9e <_vfiprintf_r+0x1e2>
   18d3e:	6829      	ldr	r1, [r5, #0]
   18d40:	9b05      	ldr	r3, [sp, #20]
   18d42:	2207      	movs	r2, #7
   18d44:	05c9      	lsls	r1, r1, #23
   18d46:	d528      	bpl.n	18d9a <_vfiprintf_r+0x1de>
   18d48:	189b      	adds	r3, r3, r2
   18d4a:	4393      	bics	r3, r2
   18d4c:	3308      	adds	r3, #8
   18d4e:	9305      	str	r3, [sp, #20]
   18d50:	696b      	ldr	r3, [r5, #20]
   18d52:	9a03      	ldr	r2, [sp, #12]
   18d54:	189b      	adds	r3, r3, r2
   18d56:	616b      	str	r3, [r5, #20]
   18d58:	e74f      	b.n	18bfa <_vfiprintf_r+0x3e>
   18d5a:	425b      	negs	r3, r3
   18d5c:	60eb      	str	r3, [r5, #12]
   18d5e:	2302      	movs	r3, #2
   18d60:	430b      	orrs	r3, r1
   18d62:	602b      	str	r3, [r5, #0]
   18d64:	e7bf      	b.n	18ce6 <_vfiprintf_r+0x12a>
   18d66:	434b      	muls	r3, r1
   18d68:	3401      	adds	r4, #1
   18d6a:	189b      	adds	r3, r3, r2
   18d6c:	2001      	movs	r0, #1
   18d6e:	e789      	b.n	18c84 <_vfiprintf_r+0xc8>
   18d70:	2301      	movs	r3, #1
   18d72:	425b      	negs	r3, r3
   18d74:	e7c6      	b.n	18d04 <_vfiprintf_r+0x148>
   18d76:	2300      	movs	r3, #0
   18d78:	0014      	movs	r4, r2
   18d7a:	200a      	movs	r0, #10
   18d7c:	001a      	movs	r2, r3
   18d7e:	606b      	str	r3, [r5, #4]
   18d80:	7821      	ldrb	r1, [r4, #0]
   18d82:	3930      	subs	r1, #48	; 0x30
   18d84:	2909      	cmp	r1, #9
   18d86:	d903      	bls.n	18d90 <_vfiprintf_r+0x1d4>
   18d88:	2b00      	cmp	r3, #0
   18d8a:	d0bc      	beq.n	18d06 <_vfiprintf_r+0x14a>
   18d8c:	9207      	str	r2, [sp, #28]
   18d8e:	e7ba      	b.n	18d06 <_vfiprintf_r+0x14a>
   18d90:	4342      	muls	r2, r0
   18d92:	3401      	adds	r4, #1
   18d94:	1852      	adds	r2, r2, r1
   18d96:	2301      	movs	r3, #1
   18d98:	e7f2      	b.n	18d80 <_vfiprintf_r+0x1c4>
   18d9a:	3307      	adds	r3, #7
   18d9c:	e7d5      	b.n	18d4a <_vfiprintf_r+0x18e>
   18d9e:	ab05      	add	r3, sp, #20
   18da0:	9300      	str	r3, [sp, #0]
   18da2:	003a      	movs	r2, r7
   18da4:	4b12      	ldr	r3, [pc, #72]	; (18df0 <_vfiprintf_r+0x234>)
   18da6:	0029      	movs	r1, r5
   18da8:	0030      	movs	r0, r6
   18daa:	e000      	b.n	18dae <_vfiprintf_r+0x1f2>
   18dac:	bf00      	nop
   18dae:	9003      	str	r0, [sp, #12]
   18db0:	9b03      	ldr	r3, [sp, #12]
   18db2:	3301      	adds	r3, #1
   18db4:	d1cc      	bne.n	18d50 <_vfiprintf_r+0x194>
   18db6:	89bb      	ldrh	r3, [r7, #12]
   18db8:	065b      	lsls	r3, r3, #25
   18dba:	d500      	bpl.n	18dbe <_vfiprintf_r+0x202>
   18dbc:	e77b      	b.n	18cb6 <_vfiprintf_r+0xfa>
   18dbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18dc0:	e77b      	b.n	18cba <_vfiprintf_r+0xfe>
   18dc2:	ab05      	add	r3, sp, #20
   18dc4:	9300      	str	r3, [sp, #0]
   18dc6:	003a      	movs	r2, r7
   18dc8:	4b09      	ldr	r3, [pc, #36]	; (18df0 <_vfiprintf_r+0x234>)
   18dca:	0029      	movs	r1, r5
   18dcc:	0030      	movs	r0, r6
   18dce:	f000 f87f 	bl	18ed0 <_printf_i>
   18dd2:	e7ec      	b.n	18dae <_vfiprintf_r+0x1f2>
   18dd4:	0001bbe8 	.word	0x0001bbe8
   18dd8:	0001bc32 	.word	0x0001bc32
   18ddc:	0001bc08 	.word	0x0001bc08
   18de0:	0001bbc8 	.word	0x0001bbc8
   18de4:	0001bc38 	.word	0x0001bc38
   18de8:	0001bc3c 	.word	0x0001bc3c
   18dec:	00000000 	.word	0x00000000
   18df0:	00018b97 	.word	0x00018b97

00018df4 <_printf_common>:
   18df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18df6:	0015      	movs	r5, r2
   18df8:	9301      	str	r3, [sp, #4]
   18dfa:	688a      	ldr	r2, [r1, #8]
   18dfc:	690b      	ldr	r3, [r1, #16]
   18dfe:	9000      	str	r0, [sp, #0]
   18e00:	000c      	movs	r4, r1
   18e02:	4293      	cmp	r3, r2
   18e04:	da00      	bge.n	18e08 <_printf_common+0x14>
   18e06:	0013      	movs	r3, r2
   18e08:	0022      	movs	r2, r4
   18e0a:	602b      	str	r3, [r5, #0]
   18e0c:	3243      	adds	r2, #67	; 0x43
   18e0e:	7812      	ldrb	r2, [r2, #0]
   18e10:	2a00      	cmp	r2, #0
   18e12:	d001      	beq.n	18e18 <_printf_common+0x24>
   18e14:	3301      	adds	r3, #1
   18e16:	602b      	str	r3, [r5, #0]
   18e18:	6823      	ldr	r3, [r4, #0]
   18e1a:	069b      	lsls	r3, r3, #26
   18e1c:	d502      	bpl.n	18e24 <_printf_common+0x30>
   18e1e:	682b      	ldr	r3, [r5, #0]
   18e20:	3302      	adds	r3, #2
   18e22:	602b      	str	r3, [r5, #0]
   18e24:	2706      	movs	r7, #6
   18e26:	6823      	ldr	r3, [r4, #0]
   18e28:	401f      	ands	r7, r3
   18e2a:	d027      	beq.n	18e7c <_printf_common+0x88>
   18e2c:	0023      	movs	r3, r4
   18e2e:	3343      	adds	r3, #67	; 0x43
   18e30:	781b      	ldrb	r3, [r3, #0]
   18e32:	1e5a      	subs	r2, r3, #1
   18e34:	4193      	sbcs	r3, r2
   18e36:	6822      	ldr	r2, [r4, #0]
   18e38:	0692      	lsls	r2, r2, #26
   18e3a:	d430      	bmi.n	18e9e <_printf_common+0xaa>
   18e3c:	0022      	movs	r2, r4
   18e3e:	9901      	ldr	r1, [sp, #4]
   18e40:	3243      	adds	r2, #67	; 0x43
   18e42:	9800      	ldr	r0, [sp, #0]
   18e44:	9e08      	ldr	r6, [sp, #32]
   18e46:	47b0      	blx	r6
   18e48:	1c43      	adds	r3, r0, #1
   18e4a:	d025      	beq.n	18e98 <_printf_common+0xa4>
   18e4c:	2306      	movs	r3, #6
   18e4e:	6820      	ldr	r0, [r4, #0]
   18e50:	682a      	ldr	r2, [r5, #0]
   18e52:	68e1      	ldr	r1, [r4, #12]
   18e54:	4003      	ands	r3, r0
   18e56:	2500      	movs	r5, #0
   18e58:	2b04      	cmp	r3, #4
   18e5a:	d103      	bne.n	18e64 <_printf_common+0x70>
   18e5c:	1a8d      	subs	r5, r1, r2
   18e5e:	43eb      	mvns	r3, r5
   18e60:	17db      	asrs	r3, r3, #31
   18e62:	401d      	ands	r5, r3
   18e64:	68a3      	ldr	r3, [r4, #8]
   18e66:	6922      	ldr	r2, [r4, #16]
   18e68:	4293      	cmp	r3, r2
   18e6a:	dd01      	ble.n	18e70 <_printf_common+0x7c>
   18e6c:	1a9b      	subs	r3, r3, r2
   18e6e:	18ed      	adds	r5, r5, r3
   18e70:	2700      	movs	r7, #0
   18e72:	42bd      	cmp	r5, r7
   18e74:	d120      	bne.n	18eb8 <_printf_common+0xc4>
   18e76:	2000      	movs	r0, #0
   18e78:	e010      	b.n	18e9c <_printf_common+0xa8>
   18e7a:	3701      	adds	r7, #1
   18e7c:	68e3      	ldr	r3, [r4, #12]
   18e7e:	682a      	ldr	r2, [r5, #0]
   18e80:	1a9b      	subs	r3, r3, r2
   18e82:	429f      	cmp	r7, r3
   18e84:	dad2      	bge.n	18e2c <_printf_common+0x38>
   18e86:	0022      	movs	r2, r4
   18e88:	2301      	movs	r3, #1
   18e8a:	3219      	adds	r2, #25
   18e8c:	9901      	ldr	r1, [sp, #4]
   18e8e:	9800      	ldr	r0, [sp, #0]
   18e90:	9e08      	ldr	r6, [sp, #32]
   18e92:	47b0      	blx	r6
   18e94:	1c43      	adds	r3, r0, #1
   18e96:	d1f0      	bne.n	18e7a <_printf_common+0x86>
   18e98:	2001      	movs	r0, #1
   18e9a:	4240      	negs	r0, r0
   18e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18e9e:	2030      	movs	r0, #48	; 0x30
   18ea0:	18e1      	adds	r1, r4, r3
   18ea2:	3143      	adds	r1, #67	; 0x43
   18ea4:	7008      	strb	r0, [r1, #0]
   18ea6:	0021      	movs	r1, r4
   18ea8:	1c5a      	adds	r2, r3, #1
   18eaa:	3145      	adds	r1, #69	; 0x45
   18eac:	7809      	ldrb	r1, [r1, #0]
   18eae:	18a2      	adds	r2, r4, r2
   18eb0:	3243      	adds	r2, #67	; 0x43
   18eb2:	3302      	adds	r3, #2
   18eb4:	7011      	strb	r1, [r2, #0]
   18eb6:	e7c1      	b.n	18e3c <_printf_common+0x48>
   18eb8:	0022      	movs	r2, r4
   18eba:	2301      	movs	r3, #1
   18ebc:	321a      	adds	r2, #26
   18ebe:	9901      	ldr	r1, [sp, #4]
   18ec0:	9800      	ldr	r0, [sp, #0]
   18ec2:	9e08      	ldr	r6, [sp, #32]
   18ec4:	47b0      	blx	r6
   18ec6:	1c43      	adds	r3, r0, #1
   18ec8:	d0e6      	beq.n	18e98 <_printf_common+0xa4>
   18eca:	3701      	adds	r7, #1
   18ecc:	e7d1      	b.n	18e72 <_printf_common+0x7e>
	...

00018ed0 <_printf_i>:
   18ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ed2:	b08b      	sub	sp, #44	; 0x2c
   18ed4:	9206      	str	r2, [sp, #24]
   18ed6:	000a      	movs	r2, r1
   18ed8:	3243      	adds	r2, #67	; 0x43
   18eda:	9307      	str	r3, [sp, #28]
   18edc:	9005      	str	r0, [sp, #20]
   18ede:	9204      	str	r2, [sp, #16]
   18ee0:	7e0a      	ldrb	r2, [r1, #24]
   18ee2:	000c      	movs	r4, r1
   18ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18ee6:	2a6e      	cmp	r2, #110	; 0x6e
   18ee8:	d100      	bne.n	18eec <_printf_i+0x1c>
   18eea:	e08f      	b.n	1900c <_printf_i+0x13c>
   18eec:	d817      	bhi.n	18f1e <_printf_i+0x4e>
   18eee:	2a63      	cmp	r2, #99	; 0x63
   18ef0:	d02c      	beq.n	18f4c <_printf_i+0x7c>
   18ef2:	d808      	bhi.n	18f06 <_printf_i+0x36>
   18ef4:	2a00      	cmp	r2, #0
   18ef6:	d100      	bne.n	18efa <_printf_i+0x2a>
   18ef8:	e099      	b.n	1902e <_printf_i+0x15e>
   18efa:	2a58      	cmp	r2, #88	; 0x58
   18efc:	d054      	beq.n	18fa8 <_printf_i+0xd8>
   18efe:	0026      	movs	r6, r4
   18f00:	3642      	adds	r6, #66	; 0x42
   18f02:	7032      	strb	r2, [r6, #0]
   18f04:	e029      	b.n	18f5a <_printf_i+0x8a>
   18f06:	2a64      	cmp	r2, #100	; 0x64
   18f08:	d001      	beq.n	18f0e <_printf_i+0x3e>
   18f0a:	2a69      	cmp	r2, #105	; 0x69
   18f0c:	d1f7      	bne.n	18efe <_printf_i+0x2e>
   18f0e:	6821      	ldr	r1, [r4, #0]
   18f10:	681a      	ldr	r2, [r3, #0]
   18f12:	0608      	lsls	r0, r1, #24
   18f14:	d523      	bpl.n	18f5e <_printf_i+0x8e>
   18f16:	1d11      	adds	r1, r2, #4
   18f18:	6019      	str	r1, [r3, #0]
   18f1a:	6815      	ldr	r5, [r2, #0]
   18f1c:	e025      	b.n	18f6a <_printf_i+0x9a>
   18f1e:	2a73      	cmp	r2, #115	; 0x73
   18f20:	d100      	bne.n	18f24 <_printf_i+0x54>
   18f22:	e088      	b.n	19036 <_printf_i+0x166>
   18f24:	d808      	bhi.n	18f38 <_printf_i+0x68>
   18f26:	2a6f      	cmp	r2, #111	; 0x6f
   18f28:	d029      	beq.n	18f7e <_printf_i+0xae>
   18f2a:	2a70      	cmp	r2, #112	; 0x70
   18f2c:	d1e7      	bne.n	18efe <_printf_i+0x2e>
   18f2e:	2220      	movs	r2, #32
   18f30:	6809      	ldr	r1, [r1, #0]
   18f32:	430a      	orrs	r2, r1
   18f34:	6022      	str	r2, [r4, #0]
   18f36:	e003      	b.n	18f40 <_printf_i+0x70>
   18f38:	2a75      	cmp	r2, #117	; 0x75
   18f3a:	d020      	beq.n	18f7e <_printf_i+0xae>
   18f3c:	2a78      	cmp	r2, #120	; 0x78
   18f3e:	d1de      	bne.n	18efe <_printf_i+0x2e>
   18f40:	0022      	movs	r2, r4
   18f42:	2178      	movs	r1, #120	; 0x78
   18f44:	3245      	adds	r2, #69	; 0x45
   18f46:	7011      	strb	r1, [r2, #0]
   18f48:	4a6c      	ldr	r2, [pc, #432]	; (190fc <_printf_i+0x22c>)
   18f4a:	e030      	b.n	18fae <_printf_i+0xde>
   18f4c:	000e      	movs	r6, r1
   18f4e:	681a      	ldr	r2, [r3, #0]
   18f50:	3642      	adds	r6, #66	; 0x42
   18f52:	1d11      	adds	r1, r2, #4
   18f54:	6019      	str	r1, [r3, #0]
   18f56:	6813      	ldr	r3, [r2, #0]
   18f58:	7033      	strb	r3, [r6, #0]
   18f5a:	2301      	movs	r3, #1
   18f5c:	e079      	b.n	19052 <_printf_i+0x182>
   18f5e:	0649      	lsls	r1, r1, #25
   18f60:	d5d9      	bpl.n	18f16 <_printf_i+0x46>
   18f62:	1d11      	adds	r1, r2, #4
   18f64:	6019      	str	r1, [r3, #0]
   18f66:	2300      	movs	r3, #0
   18f68:	5ed5      	ldrsh	r5, [r2, r3]
   18f6a:	2d00      	cmp	r5, #0
   18f6c:	da03      	bge.n	18f76 <_printf_i+0xa6>
   18f6e:	232d      	movs	r3, #45	; 0x2d
   18f70:	9a04      	ldr	r2, [sp, #16]
   18f72:	426d      	negs	r5, r5
   18f74:	7013      	strb	r3, [r2, #0]
   18f76:	4b62      	ldr	r3, [pc, #392]	; (19100 <_printf_i+0x230>)
   18f78:	270a      	movs	r7, #10
   18f7a:	9303      	str	r3, [sp, #12]
   18f7c:	e02f      	b.n	18fde <_printf_i+0x10e>
   18f7e:	6820      	ldr	r0, [r4, #0]
   18f80:	6819      	ldr	r1, [r3, #0]
   18f82:	0605      	lsls	r5, r0, #24
   18f84:	d503      	bpl.n	18f8e <_printf_i+0xbe>
   18f86:	1d08      	adds	r0, r1, #4
   18f88:	6018      	str	r0, [r3, #0]
   18f8a:	680d      	ldr	r5, [r1, #0]
   18f8c:	e005      	b.n	18f9a <_printf_i+0xca>
   18f8e:	0640      	lsls	r0, r0, #25
   18f90:	d5f9      	bpl.n	18f86 <_printf_i+0xb6>
   18f92:	680d      	ldr	r5, [r1, #0]
   18f94:	1d08      	adds	r0, r1, #4
   18f96:	6018      	str	r0, [r3, #0]
   18f98:	b2ad      	uxth	r5, r5
   18f9a:	4b59      	ldr	r3, [pc, #356]	; (19100 <_printf_i+0x230>)
   18f9c:	2708      	movs	r7, #8
   18f9e:	9303      	str	r3, [sp, #12]
   18fa0:	2a6f      	cmp	r2, #111	; 0x6f
   18fa2:	d018      	beq.n	18fd6 <_printf_i+0x106>
   18fa4:	270a      	movs	r7, #10
   18fa6:	e016      	b.n	18fd6 <_printf_i+0x106>
   18fa8:	3145      	adds	r1, #69	; 0x45
   18faa:	700a      	strb	r2, [r1, #0]
   18fac:	4a54      	ldr	r2, [pc, #336]	; (19100 <_printf_i+0x230>)
   18fae:	9203      	str	r2, [sp, #12]
   18fb0:	681a      	ldr	r2, [r3, #0]
   18fb2:	6821      	ldr	r1, [r4, #0]
   18fb4:	1d10      	adds	r0, r2, #4
   18fb6:	6018      	str	r0, [r3, #0]
   18fb8:	6815      	ldr	r5, [r2, #0]
   18fba:	0608      	lsls	r0, r1, #24
   18fbc:	d522      	bpl.n	19004 <_printf_i+0x134>
   18fbe:	07cb      	lsls	r3, r1, #31
   18fc0:	d502      	bpl.n	18fc8 <_printf_i+0xf8>
   18fc2:	2320      	movs	r3, #32
   18fc4:	4319      	orrs	r1, r3
   18fc6:	6021      	str	r1, [r4, #0]
   18fc8:	2710      	movs	r7, #16
   18fca:	2d00      	cmp	r5, #0
   18fcc:	d103      	bne.n	18fd6 <_printf_i+0x106>
   18fce:	2320      	movs	r3, #32
   18fd0:	6822      	ldr	r2, [r4, #0]
   18fd2:	439a      	bics	r2, r3
   18fd4:	6022      	str	r2, [r4, #0]
   18fd6:	0023      	movs	r3, r4
   18fd8:	2200      	movs	r2, #0
   18fda:	3343      	adds	r3, #67	; 0x43
   18fdc:	701a      	strb	r2, [r3, #0]
   18fde:	6863      	ldr	r3, [r4, #4]
   18fe0:	60a3      	str	r3, [r4, #8]
   18fe2:	2b00      	cmp	r3, #0
   18fe4:	db5c      	blt.n	190a0 <_printf_i+0x1d0>
   18fe6:	2204      	movs	r2, #4
   18fe8:	6821      	ldr	r1, [r4, #0]
   18fea:	4391      	bics	r1, r2
   18fec:	6021      	str	r1, [r4, #0]
   18fee:	2d00      	cmp	r5, #0
   18ff0:	d158      	bne.n	190a4 <_printf_i+0x1d4>
   18ff2:	9e04      	ldr	r6, [sp, #16]
   18ff4:	2b00      	cmp	r3, #0
   18ff6:	d064      	beq.n	190c2 <_printf_i+0x1f2>
   18ff8:	0026      	movs	r6, r4
   18ffa:	9b03      	ldr	r3, [sp, #12]
   18ffc:	3642      	adds	r6, #66	; 0x42
   18ffe:	781b      	ldrb	r3, [r3, #0]
   19000:	7033      	strb	r3, [r6, #0]
   19002:	e05e      	b.n	190c2 <_printf_i+0x1f2>
   19004:	0648      	lsls	r0, r1, #25
   19006:	d5da      	bpl.n	18fbe <_printf_i+0xee>
   19008:	b2ad      	uxth	r5, r5
   1900a:	e7d8      	b.n	18fbe <_printf_i+0xee>
   1900c:	6809      	ldr	r1, [r1, #0]
   1900e:	681a      	ldr	r2, [r3, #0]
   19010:	0608      	lsls	r0, r1, #24
   19012:	d505      	bpl.n	19020 <_printf_i+0x150>
   19014:	1d11      	adds	r1, r2, #4
   19016:	6019      	str	r1, [r3, #0]
   19018:	6813      	ldr	r3, [r2, #0]
   1901a:	6962      	ldr	r2, [r4, #20]
   1901c:	601a      	str	r2, [r3, #0]
   1901e:	e006      	b.n	1902e <_printf_i+0x15e>
   19020:	0649      	lsls	r1, r1, #25
   19022:	d5f7      	bpl.n	19014 <_printf_i+0x144>
   19024:	1d11      	adds	r1, r2, #4
   19026:	6019      	str	r1, [r3, #0]
   19028:	6813      	ldr	r3, [r2, #0]
   1902a:	8aa2      	ldrh	r2, [r4, #20]
   1902c:	801a      	strh	r2, [r3, #0]
   1902e:	2300      	movs	r3, #0
   19030:	9e04      	ldr	r6, [sp, #16]
   19032:	6123      	str	r3, [r4, #16]
   19034:	e054      	b.n	190e0 <_printf_i+0x210>
   19036:	681a      	ldr	r2, [r3, #0]
   19038:	1d11      	adds	r1, r2, #4
   1903a:	6019      	str	r1, [r3, #0]
   1903c:	6816      	ldr	r6, [r2, #0]
   1903e:	2100      	movs	r1, #0
   19040:	6862      	ldr	r2, [r4, #4]
   19042:	0030      	movs	r0, r6
   19044:	f000 f94a 	bl	192dc <memchr>
   19048:	2800      	cmp	r0, #0
   1904a:	d001      	beq.n	19050 <_printf_i+0x180>
   1904c:	1b80      	subs	r0, r0, r6
   1904e:	6060      	str	r0, [r4, #4]
   19050:	6863      	ldr	r3, [r4, #4]
   19052:	6123      	str	r3, [r4, #16]
   19054:	2300      	movs	r3, #0
   19056:	9a04      	ldr	r2, [sp, #16]
   19058:	7013      	strb	r3, [r2, #0]
   1905a:	e041      	b.n	190e0 <_printf_i+0x210>
   1905c:	6923      	ldr	r3, [r4, #16]
   1905e:	0032      	movs	r2, r6
   19060:	9906      	ldr	r1, [sp, #24]
   19062:	9805      	ldr	r0, [sp, #20]
   19064:	9d07      	ldr	r5, [sp, #28]
   19066:	47a8      	blx	r5
   19068:	1c43      	adds	r3, r0, #1
   1906a:	d043      	beq.n	190f4 <_printf_i+0x224>
   1906c:	6823      	ldr	r3, [r4, #0]
   1906e:	2500      	movs	r5, #0
   19070:	079b      	lsls	r3, r3, #30
   19072:	d40f      	bmi.n	19094 <_printf_i+0x1c4>
   19074:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19076:	68e0      	ldr	r0, [r4, #12]
   19078:	4298      	cmp	r0, r3
   1907a:	da3d      	bge.n	190f8 <_printf_i+0x228>
   1907c:	0018      	movs	r0, r3
   1907e:	e03b      	b.n	190f8 <_printf_i+0x228>
   19080:	0022      	movs	r2, r4
   19082:	2301      	movs	r3, #1
   19084:	3219      	adds	r2, #25
   19086:	9906      	ldr	r1, [sp, #24]
   19088:	9805      	ldr	r0, [sp, #20]
   1908a:	9e07      	ldr	r6, [sp, #28]
   1908c:	47b0      	blx	r6
   1908e:	1c43      	adds	r3, r0, #1
   19090:	d030      	beq.n	190f4 <_printf_i+0x224>
   19092:	3501      	adds	r5, #1
   19094:	68e3      	ldr	r3, [r4, #12]
   19096:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19098:	1a9b      	subs	r3, r3, r2
   1909a:	429d      	cmp	r5, r3
   1909c:	dbf0      	blt.n	19080 <_printf_i+0x1b0>
   1909e:	e7e9      	b.n	19074 <_printf_i+0x1a4>
   190a0:	2d00      	cmp	r5, #0
   190a2:	d0a9      	beq.n	18ff8 <_printf_i+0x128>
   190a4:	9e04      	ldr	r6, [sp, #16]
   190a6:	0028      	movs	r0, r5
   190a8:	0039      	movs	r1, r7
   190aa:	f7fe fb19 	bl	176e0 <__aeabi_uidivmod>
   190ae:	9b03      	ldr	r3, [sp, #12]
   190b0:	3e01      	subs	r6, #1
   190b2:	5c5b      	ldrb	r3, [r3, r1]
   190b4:	0028      	movs	r0, r5
   190b6:	7033      	strb	r3, [r6, #0]
   190b8:	0039      	movs	r1, r7
   190ba:	f7fe fa8b 	bl	175d4 <__udivsi3>
   190be:	1e05      	subs	r5, r0, #0
   190c0:	d1f1      	bne.n	190a6 <_printf_i+0x1d6>
   190c2:	2f08      	cmp	r7, #8
   190c4:	d109      	bne.n	190da <_printf_i+0x20a>
   190c6:	6823      	ldr	r3, [r4, #0]
   190c8:	07db      	lsls	r3, r3, #31
   190ca:	d506      	bpl.n	190da <_printf_i+0x20a>
   190cc:	6863      	ldr	r3, [r4, #4]
   190ce:	6922      	ldr	r2, [r4, #16]
   190d0:	4293      	cmp	r3, r2
   190d2:	dc02      	bgt.n	190da <_printf_i+0x20a>
   190d4:	2330      	movs	r3, #48	; 0x30
   190d6:	3e01      	subs	r6, #1
   190d8:	7033      	strb	r3, [r6, #0]
   190da:	9b04      	ldr	r3, [sp, #16]
   190dc:	1b9b      	subs	r3, r3, r6
   190de:	6123      	str	r3, [r4, #16]
   190e0:	9b07      	ldr	r3, [sp, #28]
   190e2:	aa09      	add	r2, sp, #36	; 0x24
   190e4:	9300      	str	r3, [sp, #0]
   190e6:	0021      	movs	r1, r4
   190e8:	9b06      	ldr	r3, [sp, #24]
   190ea:	9805      	ldr	r0, [sp, #20]
   190ec:	f7ff fe82 	bl	18df4 <_printf_common>
   190f0:	1c43      	adds	r3, r0, #1
   190f2:	d1b3      	bne.n	1905c <_printf_i+0x18c>
   190f4:	2001      	movs	r0, #1
   190f6:	4240      	negs	r0, r0
   190f8:	b00b      	add	sp, #44	; 0x2c
   190fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   190fc:	0001bc54 	.word	0x0001bc54
   19100:	0001bc43 	.word	0x0001bc43

00019104 <_putc_r>:
   19104:	b570      	push	{r4, r5, r6, lr}
   19106:	0006      	movs	r6, r0
   19108:	000d      	movs	r5, r1
   1910a:	0014      	movs	r4, r2
   1910c:	2800      	cmp	r0, #0
   1910e:	d004      	beq.n	1911a <_putc_r+0x16>
   19110:	6983      	ldr	r3, [r0, #24]
   19112:	2b00      	cmp	r3, #0
   19114:	d101      	bne.n	1911a <_putc_r+0x16>
   19116:	f7ff faab 	bl	18670 <__sinit>
   1911a:	4b12      	ldr	r3, [pc, #72]	; (19164 <_putc_r+0x60>)
   1911c:	429c      	cmp	r4, r3
   1911e:	d111      	bne.n	19144 <_putc_r+0x40>
   19120:	6874      	ldr	r4, [r6, #4]
   19122:	68a3      	ldr	r3, [r4, #8]
   19124:	3b01      	subs	r3, #1
   19126:	60a3      	str	r3, [r4, #8]
   19128:	2b00      	cmp	r3, #0
   1912a:	da05      	bge.n	19138 <_putc_r+0x34>
   1912c:	69a2      	ldr	r2, [r4, #24]
   1912e:	4293      	cmp	r3, r2
   19130:	db12      	blt.n	19158 <_putc_r+0x54>
   19132:	b2eb      	uxtb	r3, r5
   19134:	2b0a      	cmp	r3, #10
   19136:	d00f      	beq.n	19158 <_putc_r+0x54>
   19138:	6823      	ldr	r3, [r4, #0]
   1913a:	b2e8      	uxtb	r0, r5
   1913c:	1c5a      	adds	r2, r3, #1
   1913e:	6022      	str	r2, [r4, #0]
   19140:	701d      	strb	r5, [r3, #0]
   19142:	bd70      	pop	{r4, r5, r6, pc}
   19144:	4b08      	ldr	r3, [pc, #32]	; (19168 <_putc_r+0x64>)
   19146:	429c      	cmp	r4, r3
   19148:	d101      	bne.n	1914e <_putc_r+0x4a>
   1914a:	68b4      	ldr	r4, [r6, #8]
   1914c:	e7e9      	b.n	19122 <_putc_r+0x1e>
   1914e:	4b07      	ldr	r3, [pc, #28]	; (1916c <_putc_r+0x68>)
   19150:	429c      	cmp	r4, r3
   19152:	d1e6      	bne.n	19122 <_putc_r+0x1e>
   19154:	68f4      	ldr	r4, [r6, #12]
   19156:	e7e4      	b.n	19122 <_putc_r+0x1e>
   19158:	0022      	movs	r2, r4
   1915a:	0029      	movs	r1, r5
   1915c:	0030      	movs	r0, r6
   1915e:	f7ff f8c3 	bl	182e8 <__swbuf_r>
   19162:	e7ee      	b.n	19142 <_putc_r+0x3e>
   19164:	0001bbe8 	.word	0x0001bbe8
   19168:	0001bc08 	.word	0x0001bc08
   1916c:	0001bbc8 	.word	0x0001bbc8

00019170 <__sread>:
   19170:	b570      	push	{r4, r5, r6, lr}
   19172:	000c      	movs	r4, r1
   19174:	250e      	movs	r5, #14
   19176:	5f49      	ldrsh	r1, [r1, r5]
   19178:	f000 f8e2 	bl	19340 <_read_r>
   1917c:	2800      	cmp	r0, #0
   1917e:	db03      	blt.n	19188 <__sread+0x18>
   19180:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19182:	181b      	adds	r3, r3, r0
   19184:	6563      	str	r3, [r4, #84]	; 0x54
   19186:	bd70      	pop	{r4, r5, r6, pc}
   19188:	89a3      	ldrh	r3, [r4, #12]
   1918a:	4a02      	ldr	r2, [pc, #8]	; (19194 <__sread+0x24>)
   1918c:	4013      	ands	r3, r2
   1918e:	81a3      	strh	r3, [r4, #12]
   19190:	e7f9      	b.n	19186 <__sread+0x16>
   19192:	46c0      	nop			; (mov r8, r8)
   19194:	ffffefff 	.word	0xffffefff

00019198 <__swrite>:
   19198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1919a:	001f      	movs	r7, r3
   1919c:	898b      	ldrh	r3, [r1, #12]
   1919e:	0005      	movs	r5, r0
   191a0:	000c      	movs	r4, r1
   191a2:	0016      	movs	r6, r2
   191a4:	05db      	lsls	r3, r3, #23
   191a6:	d505      	bpl.n	191b4 <__swrite+0x1c>
   191a8:	230e      	movs	r3, #14
   191aa:	5ec9      	ldrsh	r1, [r1, r3]
   191ac:	2200      	movs	r2, #0
   191ae:	2302      	movs	r3, #2
   191b0:	f000 f880 	bl	192b4 <_lseek_r>
   191b4:	89a3      	ldrh	r3, [r4, #12]
   191b6:	4a05      	ldr	r2, [pc, #20]	; (191cc <__swrite+0x34>)
   191b8:	0028      	movs	r0, r5
   191ba:	4013      	ands	r3, r2
   191bc:	81a3      	strh	r3, [r4, #12]
   191be:	0032      	movs	r2, r6
   191c0:	230e      	movs	r3, #14
   191c2:	5ee1      	ldrsh	r1, [r4, r3]
   191c4:	003b      	movs	r3, r7
   191c6:	f000 f82b 	bl	19220 <_write_r>
   191ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191cc:	ffffefff 	.word	0xffffefff

000191d0 <__sseek>:
   191d0:	b570      	push	{r4, r5, r6, lr}
   191d2:	000c      	movs	r4, r1
   191d4:	250e      	movs	r5, #14
   191d6:	5f49      	ldrsh	r1, [r1, r5]
   191d8:	f000 f86c 	bl	192b4 <_lseek_r>
   191dc:	89a3      	ldrh	r3, [r4, #12]
   191de:	1c42      	adds	r2, r0, #1
   191e0:	d103      	bne.n	191ea <__sseek+0x1a>
   191e2:	4a05      	ldr	r2, [pc, #20]	; (191f8 <__sseek+0x28>)
   191e4:	4013      	ands	r3, r2
   191e6:	81a3      	strh	r3, [r4, #12]
   191e8:	bd70      	pop	{r4, r5, r6, pc}
   191ea:	2280      	movs	r2, #128	; 0x80
   191ec:	0152      	lsls	r2, r2, #5
   191ee:	4313      	orrs	r3, r2
   191f0:	81a3      	strh	r3, [r4, #12]
   191f2:	6560      	str	r0, [r4, #84]	; 0x54
   191f4:	e7f8      	b.n	191e8 <__sseek+0x18>
   191f6:	46c0      	nop			; (mov r8, r8)
   191f8:	ffffefff 	.word	0xffffefff

000191fc <__sclose>:
   191fc:	b510      	push	{r4, lr}
   191fe:	230e      	movs	r3, #14
   19200:	5ec9      	ldrsh	r1, [r1, r3]
   19202:	f000 f821 	bl	19248 <_close_r>
   19206:	bd10      	pop	{r4, pc}

00019208 <__ascii_wctomb>:
   19208:	1e0b      	subs	r3, r1, #0
   1920a:	d004      	beq.n	19216 <__ascii_wctomb+0xe>
   1920c:	2aff      	cmp	r2, #255	; 0xff
   1920e:	d904      	bls.n	1921a <__ascii_wctomb+0x12>
   19210:	238a      	movs	r3, #138	; 0x8a
   19212:	6003      	str	r3, [r0, #0]
   19214:	3b8b      	subs	r3, #139	; 0x8b
   19216:	0018      	movs	r0, r3
   19218:	4770      	bx	lr
   1921a:	700a      	strb	r2, [r1, #0]
   1921c:	2301      	movs	r3, #1
   1921e:	e7fa      	b.n	19216 <__ascii_wctomb+0xe>

00019220 <_write_r>:
   19220:	b570      	push	{r4, r5, r6, lr}
   19222:	0005      	movs	r5, r0
   19224:	0008      	movs	r0, r1
   19226:	0011      	movs	r1, r2
   19228:	2200      	movs	r2, #0
   1922a:	4c06      	ldr	r4, [pc, #24]	; (19244 <_write_r+0x24>)
   1922c:	6022      	str	r2, [r4, #0]
   1922e:	001a      	movs	r2, r3
   19230:	f7f9 f800 	bl	12234 <_write>
   19234:	1c43      	adds	r3, r0, #1
   19236:	d103      	bne.n	19240 <_write_r+0x20>
   19238:	6823      	ldr	r3, [r4, #0]
   1923a:	2b00      	cmp	r3, #0
   1923c:	d000      	beq.n	19240 <_write_r+0x20>
   1923e:	602b      	str	r3, [r5, #0]
   19240:	bd70      	pop	{r4, r5, r6, pc}
   19242:	46c0      	nop			; (mov r8, r8)
   19244:	200017a8 	.word	0x200017a8

00019248 <_close_r>:
   19248:	2300      	movs	r3, #0
   1924a:	b570      	push	{r4, r5, r6, lr}
   1924c:	4c06      	ldr	r4, [pc, #24]	; (19268 <_close_r+0x20>)
   1924e:	0005      	movs	r5, r0
   19250:	0008      	movs	r0, r1
   19252:	6023      	str	r3, [r4, #0]
   19254:	f7f9 f828 	bl	122a8 <_close>
   19258:	1c43      	adds	r3, r0, #1
   1925a:	d103      	bne.n	19264 <_close_r+0x1c>
   1925c:	6823      	ldr	r3, [r4, #0]
   1925e:	2b00      	cmp	r3, #0
   19260:	d000      	beq.n	19264 <_close_r+0x1c>
   19262:	602b      	str	r3, [r5, #0]
   19264:	bd70      	pop	{r4, r5, r6, pc}
   19266:	46c0      	nop			; (mov r8, r8)
   19268:	200017a8 	.word	0x200017a8

0001926c <_fstat_r>:
   1926c:	2300      	movs	r3, #0
   1926e:	b570      	push	{r4, r5, r6, lr}
   19270:	4c06      	ldr	r4, [pc, #24]	; (1928c <_fstat_r+0x20>)
   19272:	0005      	movs	r5, r0
   19274:	0008      	movs	r0, r1
   19276:	0011      	movs	r1, r2
   19278:	6023      	str	r3, [r4, #0]
   1927a:	f7f9 f818 	bl	122ae <_fstat>
   1927e:	1c43      	adds	r3, r0, #1
   19280:	d103      	bne.n	1928a <_fstat_r+0x1e>
   19282:	6823      	ldr	r3, [r4, #0]
   19284:	2b00      	cmp	r3, #0
   19286:	d000      	beq.n	1928a <_fstat_r+0x1e>
   19288:	602b      	str	r3, [r5, #0]
   1928a:	bd70      	pop	{r4, r5, r6, pc}
   1928c:	200017a8 	.word	0x200017a8

00019290 <_isatty_r>:
   19290:	2300      	movs	r3, #0
   19292:	b570      	push	{r4, r5, r6, lr}
   19294:	4c06      	ldr	r4, [pc, #24]	; (192b0 <_isatty_r+0x20>)
   19296:	0005      	movs	r5, r0
   19298:	0008      	movs	r0, r1
   1929a:	6023      	str	r3, [r4, #0]
   1929c:	f7f9 f80c 	bl	122b8 <_isatty>
   192a0:	1c43      	adds	r3, r0, #1
   192a2:	d103      	bne.n	192ac <_isatty_r+0x1c>
   192a4:	6823      	ldr	r3, [r4, #0]
   192a6:	2b00      	cmp	r3, #0
   192a8:	d000      	beq.n	192ac <_isatty_r+0x1c>
   192aa:	602b      	str	r3, [r5, #0]
   192ac:	bd70      	pop	{r4, r5, r6, pc}
   192ae:	46c0      	nop			; (mov r8, r8)
   192b0:	200017a8 	.word	0x200017a8

000192b4 <_lseek_r>:
   192b4:	b570      	push	{r4, r5, r6, lr}
   192b6:	0005      	movs	r5, r0
   192b8:	0008      	movs	r0, r1
   192ba:	0011      	movs	r1, r2
   192bc:	2200      	movs	r2, #0
   192be:	4c06      	ldr	r4, [pc, #24]	; (192d8 <_lseek_r+0x24>)
   192c0:	6022      	str	r2, [r4, #0]
   192c2:	001a      	movs	r2, r3
   192c4:	f7f8 fffa 	bl	122bc <_lseek>
   192c8:	1c43      	adds	r3, r0, #1
   192ca:	d103      	bne.n	192d4 <_lseek_r+0x20>
   192cc:	6823      	ldr	r3, [r4, #0]
   192ce:	2b00      	cmp	r3, #0
   192d0:	d000      	beq.n	192d4 <_lseek_r+0x20>
   192d2:	602b      	str	r3, [r5, #0]
   192d4:	bd70      	pop	{r4, r5, r6, pc}
   192d6:	46c0      	nop			; (mov r8, r8)
   192d8:	200017a8 	.word	0x200017a8

000192dc <memchr>:
   192dc:	b2c9      	uxtb	r1, r1
   192de:	1882      	adds	r2, r0, r2
   192e0:	4290      	cmp	r0, r2
   192e2:	d101      	bne.n	192e8 <memchr+0xc>
   192e4:	2000      	movs	r0, #0
   192e6:	4770      	bx	lr
   192e8:	7803      	ldrb	r3, [r0, #0]
   192ea:	428b      	cmp	r3, r1
   192ec:	d0fb      	beq.n	192e6 <memchr+0xa>
   192ee:	3001      	adds	r0, #1
   192f0:	e7f6      	b.n	192e0 <memchr+0x4>

000192f2 <_realloc_r>:
   192f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192f4:	0007      	movs	r7, r0
   192f6:	000d      	movs	r5, r1
   192f8:	0016      	movs	r6, r2
   192fa:	2900      	cmp	r1, #0
   192fc:	d105      	bne.n	1930a <_realloc_r+0x18>
   192fe:	0011      	movs	r1, r2
   19300:	f7fe fbb4 	bl	17a6c <_malloc_r>
   19304:	0004      	movs	r4, r0
   19306:	0020      	movs	r0, r4
   19308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1930a:	2a00      	cmp	r2, #0
   1930c:	d103      	bne.n	19316 <_realloc_r+0x24>
   1930e:	f7fe fb63 	bl	179d8 <_free_r>
   19312:	0034      	movs	r4, r6
   19314:	e7f7      	b.n	19306 <_realloc_r+0x14>
   19316:	f000 f827 	bl	19368 <_malloc_usable_size_r>
   1931a:	002c      	movs	r4, r5
   1931c:	4286      	cmp	r6, r0
   1931e:	d9f2      	bls.n	19306 <_realloc_r+0x14>
   19320:	0031      	movs	r1, r6
   19322:	0038      	movs	r0, r7
   19324:	f7fe fba2 	bl	17a6c <_malloc_r>
   19328:	1e04      	subs	r4, r0, #0
   1932a:	d0ec      	beq.n	19306 <_realloc_r+0x14>
   1932c:	0029      	movs	r1, r5
   1932e:	0032      	movs	r2, r6
   19330:	f7fe fb2e 	bl	17990 <memcpy>
   19334:	0029      	movs	r1, r5
   19336:	0038      	movs	r0, r7
   19338:	f7fe fb4e 	bl	179d8 <_free_r>
   1933c:	e7e3      	b.n	19306 <_realloc_r+0x14>
	...

00019340 <_read_r>:
   19340:	b570      	push	{r4, r5, r6, lr}
   19342:	0005      	movs	r5, r0
   19344:	0008      	movs	r0, r1
   19346:	0011      	movs	r1, r2
   19348:	2200      	movs	r2, #0
   1934a:	4c06      	ldr	r4, [pc, #24]	; (19364 <_read_r+0x24>)
   1934c:	6022      	str	r2, [r4, #0]
   1934e:	001a      	movs	r2, r3
   19350:	f7f8 ff4e 	bl	121f0 <_read>
   19354:	1c43      	adds	r3, r0, #1
   19356:	d103      	bne.n	19360 <_read_r+0x20>
   19358:	6823      	ldr	r3, [r4, #0]
   1935a:	2b00      	cmp	r3, #0
   1935c:	d000      	beq.n	19360 <_read_r+0x20>
   1935e:	602b      	str	r3, [r5, #0]
   19360:	bd70      	pop	{r4, r5, r6, pc}
   19362:	46c0      	nop			; (mov r8, r8)
   19364:	200017a8 	.word	0x200017a8

00019368 <_malloc_usable_size_r>:
   19368:	1f0b      	subs	r3, r1, #4
   1936a:	681b      	ldr	r3, [r3, #0]
   1936c:	1f18      	subs	r0, r3, #4
   1936e:	2b00      	cmp	r3, #0
   19370:	da01      	bge.n	19376 <_malloc_usable_size_r+0xe>
   19372:	580b      	ldr	r3, [r1, r0]
   19374:	18c0      	adds	r0, r0, r3
   19376:	4770      	bx	lr
   19378:	2264227b 	.word	0x2264227b
   1937c:	62227b3a 	.word	0x62227b3a
   19380:	6c5f7461 	.word	0x6c5f7461
   19384:	6c657665 	.word	0x6c657665
   19388:	30353a22 	.word	0x30353a22
   1938c:	00007d7d 	.word	0x00007d7d
	...
   193b8:	2264227b 	.word	0x2264227b
   193bc:	70227b3a 	.word	0x70227b3a
   193c0:	5f6c6c69 	.word	0x5f6c6c69
   193c4:	75716572 	.word	0x75716572
   193c8:	22747365 	.word	0x22747365
   193cc:	7572743a 	.word	0x7572743a
   193d0:	007d7d65 	.word	0x007d7d65
	...
   193f8:	2264227b 	.word	0x2264227b
   193fc:	61227b3a 	.word	0x61227b3a
   19400:	6d72616c 	.word	0x6d72616c
   19404:	72743a22 	.word	0x72743a22
   19408:	7d7d6575 	.word	0x7d7d6575
	...

00019438 <bkspc>:
   19438:	00000820 20746f6e 20746579 2e746573      ...not yet set.
   19448:	65735520 74657320 69766544 614e6563      Use setDeviceNa
   19458:	0000656d 61697242 774b206e 0a0d6e6f     me..Brian Kwon..
   19468:	00000000 4f525245 000a0d52 69766544     ....ERROR...Devi
   19478:	6e206563 20656d61 00207369 706c6568     ce name is .help
   19488:	20202020 20202020 20202020 20202020                     
   19498:	20202020 20202020 6e697250 74207374             Prints t
   194a8:	20736968 7373656d 0d656761 6576090a     his message...ve
   194b8:	6c625f72 20202020 20202020 20202020     r_bl            
   194c8:	20202020 20202020 72502020 73746e69               Prints
   194d8:	65687420 6f6f6220 616f6c74 20726564      the bootloader 
   194e8:	6d726966 65726177 72657620 6e6f6973     firmware version
   194f8:	76090a0d 615f7265 20207070 20202020     ...ver_app      
   19508:	20202020 20202020 20202020 50202020                    P
   19518:	746e6972 68742073 70612065 63696c70     rints the applic
   19528:	6f697461 6f63206e 66206564 776d7269     ation code firmw
   19538:	20657261 73726576 0d6e6f69 616d090a     are version...ma
   19548:	20202063 20202020 20202020 20202020     c               
   19558:	20202020 20202020 72502020 73746e69               Prints
   19568:	65687420 63616d20 64646120 73736572      the mac address
   19578:	20666f20 69766564 0a0d6563 20706909      of device...ip 
   19588:	20202020 20202020 20202020 20202020                     
   19598:	20202020 20202020 69725020 2073746e              Prints 
   195a8:	20656874 20207069 72646461 20737365     the ip  address 
   195b8:	6420666f 63697665 090a0d65 4e766564     of device...devN
   195c8:	20656d61 20202020 20202020 20202020     ame             
   195d8:	20202020 20202020 6e697250 74207374             Prints t
   195e8:	6e206568 20656d61 7420666f 64206568     he name of the d
   195f8:	6c657665 7265706f 73090a0d 65447465     eveloper...setDe
   19608:	65636976 656d614e 74733c20 676e6972     viceName <string
   19618:	6d616e20 53203e65 20737465 20656874      name> Sets the 
   19628:	656d616e 20666f20 20656874 69766564     name of the devi
   19638:	74206563 6874206f 69672065 206e6576     ce to the given 
   19648:	69727473 0a0d676e 74656709 69766544     string...getDevi
   19658:	614e6563 2020656d 20202020 20202020     ceName          
   19668:	20202020 74656720 68742073 616e2065          gets the na
   19678:	6f20656d 68742066 65642065 65636976     me of the device
   19688:	73090a0d 74726174 7a75625f 676e697a     ...start_buzzing
   19698:	20202020 20202020 20202020 54202020                    T
   196a8:	736e7275 206e6f20 7a7a7542 0a0d7265     urns on Buzzer..
   196b8:	6f747309 75625f70 6e697a7a 20202067     .stop_buzzing   
   196c8:	20202020 20202020 20202020 72755420                  Tur
   196d8:	6f20736e 42206666 657a7a75 090a0d72     ns off Buzzer...
   196e8:	64616572 0972695f 09090909 61655209     read_ir......Rea
   196f8:	56207364 65756c61 6f726620 5249206d     ds Value from IR
   19708:	6e655320 0d726f73 7570090a 61625f62      Sensor...pub_ba
   19718:	72657474 20202079 20202020 20202020     ttery           
   19728:	20202020 75502020 73696c62 75442068           Publish Du
   19738:	20796d6d 756c6176 6f742065 65687420     mmy value to the
   19748:	73614420 616f6268 0a0d6472 71657209      Dashboard...req
   19758:	74736575 6c69705f 2020206c 20202020     uest_pill       
   19768:	20202020 20202020 6e655320 52207364              Sends R
   19778:	65757165 66207473 7020726f 206c6c69     equest for pill 
   19788:	74206f74 63206568 64756f6c 73090a0d     to the cloud...s
   19798:	646e756f 616c615f 20206d72 20202020     ound_alarm      
   197a8:	20202020 20202020 53202020 646e756f                Sound
   197b8:	6c612073 206d7261 20726f66 6c6c6970     s alarm for pill
   197c8:	73696d20 200a0d73 00000020 2e382e38      miss..  ...8.8.
   197d8:	0d382e38 0000000a 322d3139 36392d36     8.8.....91-26-96
   197e8:	2d33432d 372d3546 000a0d42 74746142     -C3-F5-7B...Batt
   197f8:	4c797265 6c657665 00000000 72727543     eryLevel....Curr
   19808:	20746e65 756c6176 666f2065 5f524920     ent value of IR_
   19818:	736e6553 6920726f 00003a73 65757274     Sensor is:..true
   19828:	00000a0d 736c6166 000a0d65 6c6c6970     ....false...pill
   19838:	7165725f 74736575 00000000 69766544     _request....Devi
   19848:	6e206563 20656d61 20746573 00206f74     ce name set to .
   19858:	72616c61 0000006d 706c6568 00000000     alarm...help....
   19868:	5f726576 00006c62 5f726576 00707061     ver_bl..ver_app.
   19878:	0063616d 00007069 4e766564 00656d61     mac.ip..devName.
   19888:	44746573 63697665 6d614e65 00000065     setDeviceName...
   19898:	44746567 63697665 6d614e65 00000065     getDeviceName...
   198a8:	72617473 75625f74 6e697a7a 00000067     start_buzzing...
   198b8:	706f7473 7a75625f 676e697a 00000000     stop_buzzing....
   198c8:	64616572 0072695f 5f627570 74746162     read_ir.pub_batt
   198d8:	00797265 75716572 5f747365 6c6c6970     ery.request_pill
   198e8:	00000000 6e756f73 6c615f64 006d7261     ....sound_alarm.
   198f8:	332e3831 0a0d382e 00000000 312e3231     18.3.8......12.1
   19908:	0a0d312e 00000000                       .1......

00019910 <mmc_trans_multipliers>:
   19910:	00000000 0000000a 0000000c 0000000d     ................
   19920:	0000000f 00000014 0000001a 0000001e     ................
   19930:	00000023 00000028 0000002d 00000034     #...(...-...4...
   19940:	00000037 0000003c 00000046 00000050     7...<...F...P...

00019950 <sd_mmc_trans_units>:
   19950:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0001996c <sd_trans_multipliers>:
   1996c:	00000000 0000000a 0000000c 0000000d     ................
   1997c:	0000000f 00000014 00000019 0000001e     ................
   1998c:	00000023 00000028 0000002d 00000032     #...(...-...2...
   1999c:	00000037 0000003c 00000046 00000050     7...<...F...P...

000199ac <__FUNCTION__.14672>:
   199ac:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   199bc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   199cc:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   199dc:	6320746c 0000646d 0000d6a8 0000d678     lt cmd......x...
   199ec:	0000d670 0000d688 0000d680 0000d6a0     p...............
   199fc:	0000d690 0000d698                       ........

00019a04 <__FUNCTION__.13113>:
   19a04:	5f666968 646e6573 00000000              hif_send....

00019a10 <__FUNCTION__.13123>:
   19a10:	5f666968 00727369                       hif_isr.

00019a18 <__FUNCTION__.13132>:
   19a18:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00019a28 <__FUNCTION__.13144>:
   19a28:	5f666968 65636572 00657669              hif_receive.

00019a34 <__FUNCTION__.13160>:
   19a34:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   19a44:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   19a54:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   19a64:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   19a74:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   19a84:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   19a94:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   19aa4:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   19ab4:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   19ac4:	6c616320 6361626c 7369206b 746f6e20      callback is not
   19ad4:	67657220 65747369 00646572 6b6f6353      registered.Scok
   19ae4:	63207465 626c6c61 206b6361 6e207369     et callback is n
   19af4:	7220746f 73696765 65726574 00000064     ot registered...
   19b04:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   19b14:	20746f6e 69676572 72657473 00006465     not registered..
   19b24:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   19b34:	6e207369 7220746f 73696765 65726574     is not registere
   19b44:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   19b54:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   19b64:	64657265 00000000 66696828 6e692029     ered....(hif) in
   19b74:	696c6176 72672064 2070756f 00004449     valid group ID..
   19b84:	66696828 6f682029 61207473 64207070     (hif) host app d
   19b94:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   19ba4:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   19bb4:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   19bc4:	66696828 61462029 2065736c 65746e69     (hif) False inte
   19bd4:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   19be4:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   19bf4:	7265746e 74707572 67657220 00000000     nterrupt reg....
   19c04:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   19c14:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   19c24:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   19c34:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   19c44:	696c6176 72612064 656d7567 0000746e     valid argument..
   19c54:	20505041 75716552 65747365 69532064     APP Requested Si
   19c64:	6920657a 616c2073 72656772 61687420     ze is larger tha
   19c74:	6874206e 65722065 65766963 75622064     n the recived bu
   19c84:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   19c94:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   19ca4:	65747365 64412064 73657264 65622073     ested Address be
   19cb4:	646e6f79 65687420 63657220 64657669     yond the recived
   19cc4:	66756220 20726566 72646461 20737365      buffer address 
   19cd4:	20646e61 676e656c 00006874 20705247     and length..GRp 
   19ce4:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   19cf4:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   19d04:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   19d14:	6b617720 74207075 63206568 00706968      wakup the chip.

00019d24 <__FUNCTION__.13095>:
   19d24:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00019d30 <__FUNCTION__.13124>:
   19d30:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00019d40 <__FUNCTION__.13155>:
   19d40:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   19d50:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   19d60:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   19d70:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   19d80:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   19d90:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   19da0:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   19db0:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   19dc0:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   19dd0:	20706557 2079656b 65646e69 64252078     Wep key index %d
   19de0:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   19df0:	2079656b 676e656c 25206874 00000a64     key length %d...
   19e00:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   19e10:	656c2079 6874676e 00000000 65646e75     y length....unde
   19e20:	656e6966 65732064 79742063 00006570     fined sec type..
   19e30:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   19e40:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   19e50:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   19e60:	69754220 2520646c 69542073 2520656d      Build %s Time %
   19e70:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   19e80:	69726420 20726576 20726576 7525203a      driver ver : %u
   19e90:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   19ea0:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   19eb0:	353a3631 36343a33 00000000 20766f4e     16:53:46....Nov 
   19ec0:	32203931 00393130 76697244 62207265     19 2019.Driver b
   19ed0:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   19ee0:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   19ef0:	65562065 6f697372 0000006e              e Version...

00019efc <__FUNCTION__.12952>:
   19efc:	70696863 6b61775f 00000065              chip_wake...

00019f08 <__FUNCTION__.13001>:
   19f08:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   19f18:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   19f28:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   19f38:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   19f48:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   19f58:	70696863 00000000 76697244 65567265     chip....DriverVe
   19f68:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00019f78 <__FUNCTION__.12999>:
   19f78:	645f6d6e 695f7672 0074696e              nm_drv_init.

00019f84 <__FUNCTION__.13006>:
   19f84:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   19f94:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   19fa4:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   19fb4:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   19fc4:	73616c66 69642068 6c626173 61662065     flash disable fa
   19fd4:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   19fe4:	6c696166 696e6920 75622074 00000073     fail init bus...
   19ff4:	6c696166 74206465 6e65206f 656c6261     failed to enable
   1a004:	746e6920 75727265 2e737470 0000002e      interrupts.....
   1a014:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1a024:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   1a034:	20444920 0a786c25 00000000 0000e688      ID %lx.........
   1a044:	0000e688 0000e6b8 0000e63a 0000e65e     ........:...^...
   1a054:	0000e66c 0000e69e 0000e69e 0000e6e6     l...............
   1a064:	0000e61e 0000e720 0000e720 0000e720     .... ... ... ...
   1a074:	0000e720 0000e67a cac4c9c3               ...z.......

0001a080 <__FUNCTION__.12268>:
   1a080:	5f697073 00646d63                       spi_cmd.

0001a088 <__FUNCTION__.12275>:
   1a088:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001a098 <__FUNCTION__.12284>:
   1a098:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001a0a4 <__FUNCTION__.12300>:
   1a0a4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001a0b4 <__FUNCTION__.12315>:
   1a0b4:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001a0c4 <__FUNCTION__.12327>:
   1a0c4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001a0d4 <__FUNCTION__.12338>:
   1a0d4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001a0e4 <__FUNCTION__.12350>:
   1a0e4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001a0f4 <__FUNCTION__.12363>:
   1a0f4:	735f6d6e 725f6970 00646165              nm_spi_read.

0001a100 <__FUNCTION__.12384>:
   1a100:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001a10c <crc7_syndrome_table>:
   1a10c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1a11c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1a12c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1a13c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1a14c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1a15c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1a16c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1a17c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1a18c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1a19c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1a1ac:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1a1bc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1a1cc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1a1dc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1a1ec:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1a1fc:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1a20c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a21c:	6e692064 6e726574 72206c61 20646165     d internal read 
   1a22c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1a23c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1a24c:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   1a25c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a26c:	6e692064 6e726574 72206c61 20646165     d internal read 
   1a27c:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   1a28c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   1a29c:	6e726574 77206c61 65746972 6f727020     ternal write pro
   1a2ac:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   1a2bc:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   1a2cc:	20646d63 64616572 69686320 64692070     cmd read chip id
   1a2dc:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a2ec:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1a2fc:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1a30c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a31c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1a32c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1a33c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1a34c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a35c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1a36c:	00000000 65736552 6e612074 65722064     ....Reset and re
   1a37c:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   1a38c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a39c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1a3ac:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1a3bc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1a3cc:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1a3dc:	69727720 62206574 6b636f6c 30252820      write block (%0
   1a3ec:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1a3fc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a40c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1a41c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1a42c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a43c:	61642064 62206174 6b636f6c 69727720     d data block wri
   1a44c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1a45c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a46c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1a47c:	63726320 69727720 202c6574 20737562      crc write, bus 
   1a48c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   1a49c:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   1a4ac:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   1a4bc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a4cc:	72206174 6f707365 2065736e 64616572     ta response read
   1a4dc:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1a4ec:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a4fc:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1a50c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a51c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1a52c:	73756220 72726520 2e2e726f 0000002e      bus error......
   1a53c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a54c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1a55c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1a56c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a57c:	656c6961 61642064 72206174 6f707365     ailed data respo
   1a58c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1a59c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1a5ac:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1a5bc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1a5cc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1a5dc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a5ec:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1a5fc:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1a60c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a61c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1a62c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1a63c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a64c:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1a65c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1a66c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1a67c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1a68c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a69c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a6ac:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1a6bc:	6e612074 65722064 20797274 25206425     t and retry %d %
   1a6cc:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1a6dc:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   1a6ec:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1a6fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a70c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1a71c:	74697277 65722065 25282067 29783830     write reg (%08x)
   1a72c:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1a73c:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1a74c:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   1a75c:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   1a76c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1a77c:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   1a78c:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
   1a79c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1a7ac:	42001c00 0001131a 00011316 00011316     ...B............
   1a7bc:	0001137c 0001137c 0001132e 00011320     |...|....... ...
   1a7cc:	00011334 0001136a 0001153c 0001151c     4...j...<.......
   1a7dc:	0001151c 000115a8 0001152e 0001154a     ............J...
   1a7ec:	00011520 00011558 00011598               ...X.......

0001a7f8 <_tcc_apbcmasks>:
   1a7f8:	00000100 00000200 00000400              ............

0001a804 <_tcc_cc_nums>:
   1a804:	00020204                                ....

0001a808 <_tcc_gclk_ids>:
   1a808:	001b1a1a                                ....

0001a80c <_tcc_maxs>:
   1a80c:	00ffffff 00ffffff 0000ffff              ............

0001a818 <_tcc_ow_nums>:
   1a818:	00020408                                ....

0001a81c <_tcc_intflag>:
   1a81c:	00000001 00000002 00000004 00000008     ................
   1a82c:	00001000 00002000 00004000 00008000     ..... ...@......
   1a83c:	00010000 00020000 00040000 00080000     ................

0001a84c <tcc_interrupt_vectors.12458>:
   1a84c:	0011100f                                ....

0001a850 <LfnOfs>:
   1a850:	07050301 12100e09 1c181614 0000001e     ................

0001a860 <excvt.4558>:
   1a860:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   1a870:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   1a880:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   1a890:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1a8a0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   1a8b0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1a8c0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   1a8d0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   1a8e0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   1a8f0:	00005d5b                                []..

0001a8f4 <Tbl>:
   1a8f4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   1a904:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   1a914:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   1a924:	00d600ff 00f800dc 00d800a3 019200d7     ................
   1a934:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   1a944:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   1a954:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   1a964:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   1a974:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   1a984:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   1a994:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   1a9a4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   1a9b4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   1a9c4:	00da00de 00d900db 00dd00fd 00b400af     ................
   1a9d4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   1a9e4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0001a9f4 <tbl_lower.4308>:
   1a9f4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1aa04:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1aa14:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   1aa24:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   1aa34:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   1aa44:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   1aa54:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   1aa64:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   1aa74:	01050103 01090107 010d010b 0111010f     ................
   1aa84:	01150113 01190117 011d011b 0121011f     ..............!.
   1aa94:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   1aaa4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   1aab4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   1aac4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   1aad4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   1aae4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   1aaf4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   1ab04:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   1ab14:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   1ab24:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   1ab34:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   1ab44:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   1ab54:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   1ab64:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   1ab74:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   1ab84:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   1ab94:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   1aba4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   1abb4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   1abc4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0001abd4 <tbl_upper.4309>:
   1abd4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   1abe4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   1abf4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   1ac04:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   1ac14:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   1ac24:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   1ac34:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   1ac44:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   1ac54:	01040102 01080106 010c010a 0110010e     ................
   1ac64:	01140112 01180116 011c011a 0120011e     .............. .
   1ac74:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   1ac84:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   1ac94:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   1aca4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   1acb4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   1acc4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   1acd4:	03940393 03960395 03980397 039a0399     ................
   1ace4:	039c039b 039e039d 03a0039f 03a303a1     ................
   1acf4:	03a503a4 03a703a6 03a903a8 041003aa     ................
   1ad04:	04120411 04140413 04160415 04180417     ................
   1ad14:	041a0419 041c041b 041e041d 0420041f     .............. .
   1ad24:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   1ad34:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   1ad44:	04030402 04050404 04070406 04090408     ................
   1ad54:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   1ad64:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   1ad74:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   1ad84:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   1ad94:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   1ada4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   1adb4:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1adcc:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ae0c:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1ae24:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ae64:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   1ae74:	0001642e 00016428 00016422 0001641c     .d..(d.."d...d..
   1ae84:	00016434 0001643c 00016434 00016416     4d..<d..4d...d..
   1ae94:	00016410 00016434 0001640a 0001640a     .d..4d...d...d..
   1aea4:	00016404 000163fe 0001643c 000164a6     .d...c..<d...d..
   1aeb4:	000164a0 0001649a 00016494 000164ac     .d...d...d...d..
   1aec4:	000164b4 000164ac 0001648e 00016488     .d...d...d...d..
   1aed4:	000164ac 00016482 00016482 0001647c     .d...d...d..|d..
   1aee4:	00016476 000164b4 00016520 0001651a     vd...d.. e...e..
   1aef4:	00016514 0001650e 00016526 00016526     .e...e..&e..&e..
   1af04:	00016526 00016508 00016502 00016526     &e...e...e..&e..
   1af14:	000164fc 000164fc 000164f6 000164f0     .d...d...d...d..
   1af24:	33323130 37363534 62613938 66656463     0123456789abcdef
   1af34:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   1af44:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   1af54:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   1af64:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1af74:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1af84:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1af94:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   1afa4:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   1afb4:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   1afc4:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   1afd4:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   1afe4:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   1aff4:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   1b004:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   1b014:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   1b024:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   1b034:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   1b044:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   1b054:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   1b064:	42002800 00016b90 00016b98 00016ba6     .(.B.k...k...k..
   1b074:	00016bde 00016bf4 25200a0d 00732a2e     .k...k.... %.*s.
   1b084:	203e3e20 00000000 732a2e25 000a0d20      >> ....%.*s ...
   1b094:	4464654c 00617461 736c6166 00000065     LedData.false...
   1b0a4:	65757274 00000000 4641544f 41462055     true....OTAFU FA
   1b0b4:	2045534c 0000000d 46524550 494d524f     LSE ....PERFORMI
   1b0c4:	4f20474e 55464154 00000d20 6661746f     NG OTAFU ...otaf
   1b0d4:	64203a75 2e656e6f 0000000d 49572049     u: done.....I WI
   1b0e4:	4e204c4c 5320574f 53205445 44454843     LL NOW SET SCHED
   1b0f4:	20454c55 44205942 0d205941 00000000     ULE BY DAY .....
   1b104:	49572049 4e204c4c 5320574f 53205445     I WILL NOW SET S
   1b114:	44454843 20454c55 57205942 204b4545     CHEDULE BY WEEK 
   1b124:	0000000d 49572049 4e204c4c 4120574f     ....I WILL NOW A
   1b134:	45485455 4349544e 20455441 20554f59     UTHENTICATE YOU 
   1b144:	0000000d 4941465b 43203a4c 646c756f     ....[FAIL: Could
   1b154:	746f6e20 65706f20 6946206e 61776d72      not open Firmwa
   1b164:	46206572 5d656c69 73657220 0d642520     re File] res %d.
   1b174:	0000000a 61746f74 61705f6c 3a736567     ....total_pages:
   1b184:	0d642520 0000000a 4941465b 43203a4c      %d.....[FAIL: C
   1b194:	646c756f 746f6e20 61657220 6c422064     ould not read Bl
   1b1a4:	206b636f 6d6f7266 72694620 7261776d     ock from Firmwar
   1b1b4:	69462065 205d656c 20736572 202c6425     e File] res %d, 
   1b1c4:	65747962 65722073 25206461 000a0d64     bytes read %d...
   1b1d4:	6e65704f 20676e69 61726170 632e736d     Opening params.c
   1b1e4:	0a0d7673 00000000 4941465b 43203a4c     sv......[FAIL: C
   1b1f4:	646c756f 746f6e20 65706f20 6170206e     ould not open pa
   1b204:	736d6172 6c696620 72205d65 25207365     rams file] res %
   1b214:	000a0d64 4941465b 43203a4c 646c756f     d...[FAIL: Could
   1b224:	746f6e20 61657220 61502064 656d6172      not read Parame
   1b234:	73726574 6c694620 72205d65 25207365     ters File] res %
   1b244:	000a0d64 7479425b 72207365 20646165     d...[Bytes read 
   1b254:	6d6f7266 72617020 2e736d61 3a767363     from params.csv:
   1b264:	25205d20 000a0d64 0000002c 4352435b      ] %d...,...[CRC
   1b274:	74614d20 73656863 000a0d5d 766e495b      Matches]...[Inv
   1b284:	64696c61 43524320 6572202c 776f642d     alid CRC, re-dow
   1b294:	616f6c6e 6e692064 78656e20 6f622074     nload in next bo
   1b2a4:	6320746f 656c6379 6552202e 74746573     ot cycle. Resett
   1b2b4:	20676e69 63206f74 65727275 6920746e     ing to current i
   1b2c4:	6567616d 0a0d5d2e 00000000 00000030     mage.]......0...
   1b2d4:	70613a30 69622e70 0000006e 61726170     0:app.bin...para
   1b2e4:	632e736d 00007673 2264227b 74227b3a     ms.csv..{"d":{"t
   1b2f4:	22706d65 7d64253a 0000007d 70747468     emp":%d}}...http
   1b304:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1b314:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   1b324:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   1b334:	00000000 70747468 696c635f 5f746e65     ....http_client_
   1b344:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   1b354:	6f632074 656c706d 2e646574 0000000d     t completed.....
   1b364:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   1b374:	6b636162 6572203a 76696563 72206465     back: received r
   1b384:	6f707365 2065736e 64207525 20617461     esponse %u data 
   1b394:	657a6973 0d752520 0000000a 70747468     size %u.....http
   1b3a4:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1b3b4:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   1b3c4:	73616572 253a6e6f 000a0d64 53202d2d     reason:%d...-- S
   1b3d4:	5452414d 534f4420 50412045 43494c50     MART DOSE APPLIC
   1b3e4:	4f495441 2d2d204e 52455620 4e4f4953     ATION -- VERSION
   1b3f4:	2d204220 2d0a0d2d 4153202d 3532574d      B --..-- SAMW25
   1b404:	4c50585f 454e4941 52505f44 2d2d204f     _XPLAINED_PRO --
   1b414:	2d2d0a0d 6d6f4320 656c6970 4e203a64     ..-- Compiled: N
   1b424:	3120766f 30322039 31203931 37343a37     ov 19 2019 17:47
   1b434:	2036343a 000d2d2d 68540a0d 65207369     :46 --....This e
   1b444:	706d6178 7220656c 69757165 20736572     xample requires 
   1b454:	20656874 74205041 6168206f 69206576     the AP to have i
   1b464:	7265746e 2074656e 65636361 0d2e7373     nternet access..
   1b474:	00000d0a 35455345 2d203631 66695720     ....ESE516 - Wif
   1b484:	6e492069 43207469 0d65646f 00000000     i Init Code.....
   1b494:	74696e69 6f74735f 65676172 6c70203a     init_storage: pl
   1b4a4:	65736165 756c7020 6e612067 2f445320     ease plug an SD/
   1b4b4:	20434d4d 64726163 206e6920 746f6c73     MMC card in slot
   1b4c4:	0d2e2e2e 00000000 74696e69 6f74735f     ........init_sto
   1b4d4:	65676172 4453203a 72614320 6e692064     rage: SD Card in
   1b4e4:	6c617473 6166206c 64656c69 00000d2e     stall failed....
   1b4f4:	74696e69 6f74735f 65676172 7274203a     init_storage: tr
   1b504:	6e752079 67756c70 646e6120 2d657220     y unplug and re-
   1b514:	67756c70 65687420 72616320 000d2e64     plug the card...
   1b524:	74696e69 6f74735f 65676172 6f6d203a     init_storage: mo
   1b534:	69746e75 5320676e 61632044 2e2e6472     unting SD card..
   1b544:	00000d2e 74696e69 6f74735f 65676172     ....init_storage
   1b554:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   1b564:	6c696166 20216465 73657228 29642520     failed! (res %d)
   1b574:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   1b584:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   1b594:	0d2e4b4f 00000000 666e6f63 72756769     OK......configur
   1b5a4:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   1b5b4:	20505454 65696c63 6920746e 6974696e     TTP client initi
   1b5c4:	7a696c61 6f697461 6166206e 64656c69     alization failed
   1b5d4:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   1b5e4:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   1b5f4:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   1b604:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   1b614:	00000000 5454514d 67657220 65747369     ....MQTT registe
   1b624:	61632072 61626c6c 66206b63 656c6961     r callback faile
   1b634:	45202e64 726f7272 646f6320 73692065     d. Error code is
   1b644:	64252820 000a0d29 6e69616d 326d203a      (%d)...main: m2
   1b654:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   1b664:	72726520 2021726f 73657228 29642520      error! (res %d)
   1b674:	00000a0d 6e69616d 6f63203a 63656e6e     ....main: connec
   1b684:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
   1b694:	2e2e7325 000a0d2e 6e69616d 6f64203a     %s......main: do
   1b6a4:	0d2e656e 00000000 3e525245 7953203e     ne......ERR>> Sy
   1b6b4:	63697473 6f63206b 6769666e 74617275     stick configurat
   1b6c4:	206e6f69 6f727265 000a0d72              ion error...

0001b6d0 <main_mqtt_broker>:
   1b6d0:	6c696174 632e726f 64756f6c 7474716d     tailor.cloudmqtt
   1b6e0:	6d6f632e 00000000 6f430a0d 63656e6e     .com......Connec
   1b6f0:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   1b700:	0000002e 44714b56 546f5637 3056582d     ....VKqD7VoT-XV0
   1b710:	00000000 73617573 62627670 00000000     ....suaspvbb....
   1b720:	5454514d 72452020 20726f72 4f4e202d     MQTT  Error - NO
   1b730:	6f432054 63656e6e 20646574 62206f74     T Connected to b
   1b740:	656b6f72 00000d72 5454514d 6e6f4320     roker...MQTT Con
   1b750:	7463656e 74206465 7262206f 72656b6f     nected to broker
   1b760:	0000000d 6e6e6f43 20746365 6c696166     ....Connect fail
   1b770:	206f7420 76726573 25287265 20212973      to server(%s)! 
   1b780:	72746572 74692079 74756120 74616d6f     retry it automat
   1b790:	6c616369 0d2e796c 0000000a 6661746f     ically......otaf
   1b7a0:	00000075 44746553 44657461 796c6961     u...SetDateDaily
   1b7b0:	00000000 44746553 57657461 6c6b6565     ....SetDateWeekl
   1b7c0:	00000079 68736148 61506465 00007373     y...HashedPass..
   1b7d0:	5454514d 6e6f4320 7463656e 000d6465     MQTT Connected..
   1b7e0:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   1b7f0:	20656e69 72756f79 63636120 21737365     ine your access!
   1b800:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   1b810:	00000000 5454514d 73696420 6e6e6f63     ....MQTT disconn
   1b820:	65746365 00000d64 6f736572 5f65766c     ected...resolve_
   1b830:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   1b840:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   1b850:	0a0d0a0d 00000000 72617473 6f645f74     ........start_do
   1b860:	6f6c6e77 203a6461 20434d4d 726f7473     wnload: MMC stor
   1b870:	20656761 20746f6e 64616572 000d2e79     age not ready...
   1b880:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1b890:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
   1b8a0:	7463656e 0d2e6465 00000000 72617473     nected......star
   1b8b0:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
   1b8c0:	20747365 73207369 20746e65 65726c61     est is sent alre
   1b8d0:	2e796461 0000000d 72617473 6f645f74     ady.....start_do
   1b8e0:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
   1b8f0:	6e776f64 64616f6c 726c6120 79646165     download already
   1b900:	00000d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
   1b910:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
   1b920:	71657220 74736575 0d2e2e2e 00000000      request........
   1b930:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   1b940:	6570752e 652e6e6e 7e2f7564 61697262     .upenn.edu/~bria
   1b950:	6e776b6e 616d532f 6f447472 69466573     nkwn/SmartDoseFi
   1b960:	61776d72 702f6572 6d617261 73632e73     rmware/params.cs
   1b970:	00000076 70747468 2f2f3a73 2e777777     v...https://www.
   1b980:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   1b990:	61697262 6e776b6e 616d532f 6f447472     briankwn/SmartDo
   1b9a0:	69466573 61776d72 612f6572 622e7070     seFirmware/app.b
   1b9b0:	00006e69 726f7473 69665f65 705f656c     in..store_file_p
   1b9c0:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   1b9d0:	000d2e61 726f7473 69665f65 705f656c     a...store_file_p
   1b9e0:	656b6361 63203a74 74616572 20676e69     acket: creating 
   1b9f0:	656c6966 73255b20 000a0d5d 726f7473     file [%s]...stor
   1ba00:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   1ba10:	20656c69 656d616e 20736920 61766e69     ile name is inva
   1ba20:	2e64696c 776f4420 616f6c6e 61632064     lid. Download ca
   1ba30:	6c65636e 0d2e6465 00000000 726f7473     nceled......stor
   1ba40:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   1ba50:	20656c69 61657263 6e6f6974 72726520     ile creation err
   1ba60:	2021726f 3a746572 0a0d6425 00000000     or! ret:%d......
   1ba70:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   1ba80:	66203a74 20656c69 74697277 72652065     t: file write er
   1ba90:	2c726f72 776f6420 616f6c6e 61632064     ror, download ca
   1baa0:	6c65636e 0d2e6465 00000000 726f7473     nceled......stor
   1bab0:	69665f65 705f656c 656b6361 72203a74     e_file_packet: r
   1bac0:	69656365 5b646576 5d756c25 6966202c     eceived[%lu], fi
   1bad0:	7320656c 5b657a69 5d756c25 00000a0d     le size[%lu]....
   1bae0:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   1baf0:	66203a74 20656c69 6e776f64 64616f6c     t: file download
   1bb00:	73206465 65636375 75667373 2e796c6c     ed successfully.
   1bb10:	0000000d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   1bb20:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
   1bb30:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   1bb40:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
   1bb50:	000d4445 6e6e6570 30343731 69666977     ED..penn1740wifi
   1bb60:	00000000 50726941 4e6e6e65 442d7465     ....AirPennNet-D
   1bb70:	63697665 00000065 69666977 3a62635f     evice...wifi_cb:
   1bb80:	20504920 72646461 20737365 25207369      IP address is %
   1bb90:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   1bba0:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   1bbb0:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   1bbc0:	0000000d                                ....

0001bbc4 <_global_impure_ptr>:
   1bbc4:	20000204                                ... 

0001bbc8 <__sf_fake_stderr>:
	...

0001bbe8 <__sf_fake_stdin>:
	...

0001bc08 <__sf_fake_stdout>:
	...
   1bc28:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   1bc38:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1bc48:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1bc58:	37363534 62613938 66656463 20200000              456789abcdef.

0001bc65 <_ctype_>:
   1bc65:	20202000 20202020 28282020 20282828     .         ((((( 
   1bc75:	20202020 20202020 20202020 20202020                     
   1bc85:	10108820 10101010 10101010 10101010      ...............
   1bc95:	04040410 04040404 10040404 10101010     ................
   1bca5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1bcb5:	01010101 01010101 01010101 10101010     ................
   1bcc5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1bcd5:	02020202 02020202 02020202 10101010     ................
   1bce5:	00000020 00000000 00000000 00000000      ...............
	...

0001bd68 <_init>:
   1bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd6a:	46c0      	nop			; (mov r8, r8)
   1bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bd6e:	bc08      	pop	{r3}
   1bd70:	469e      	mov	lr, r3
   1bd72:	4770      	bx	lr

0001bd74 <__init_array_start>:
   1bd74:	0000b0dd 	.word	0x0000b0dd

0001bd78 <_fini>:
   1bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd7a:	46c0      	nop			; (mov r8, r8)
   1bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bd7e:	bc08      	pop	{r3}
   1bd80:	469e      	mov	lr, r3
   1bd82:	4770      	bx	lr

0001bd84 <__fini_array_start>:
   1bd84:	0000b0b5 	.word	0x0000b0b5
