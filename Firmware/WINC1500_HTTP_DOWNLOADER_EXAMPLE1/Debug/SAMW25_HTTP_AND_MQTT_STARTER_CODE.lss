
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010084  0000b000  0000b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000320  20000000  0001b084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000131c  20000320  0001b3a4  00020320  2**2
                  ALLOC
  3 .stack        00002004  2000163c  0001c6c0  00020320  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  6 .debug_info   00083d37  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c8c1  00000000  00000000  000a40d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00021c64  00000000  00000000  000b0999  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001808  00000000  00000000  000d25fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000021a0  00000000  00000000  000d3e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a879  00000000  00000000  000d5fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002acc8  00000000  00000000  0010081e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a09ee  00000000  00000000  0012b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005050  00000000  00000000  001cbed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000b000 <exception_table>:
    b000:	40 36 00 20 b5 1c 01 00 b1 1c 01 00 b1 1c 01 00     @6. ............
	...
    b02c:	b1 1c 01 00 00 00 00 00 00 00 00 00 b1 1c 01 00     ................
    b03c:	8d 44 01 00 b1 1c 01 00 b1 1c 01 00 b1 1c 01 00     .D..............
    b04c:	c1 fc 00 00 41 f9 00 00 b1 1c 01 00 b1 1c 01 00     ....A...........
    b05c:	b1 1c 01 00 b1 1c 01 00 e9 00 01 00 f9 00 01 00     ................
    b06c:	09 01 01 00 19 01 01 00 29 01 01 00 39 01 01 00     ........)...9...
    b07c:	81 1c 01 00 91 1c 01 00 a1 1c 01 00 b1 1c 01 00     ................
    b08c:	b1 1c 01 00 b1 1c 01 00 00 00 00 00 00 00 00 00     ................
    b09c:	b1 1c 01 00 b1 1c 01 00 b1 1c 01 00 b1 1c 01 00     ................
    b0ac:	b1 1c 01 00 00 00 00 00                             ........

0000b0b4 <__do_global_dtors_aux>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	4c06      	ldr	r4, [pc, #24]	; (b0d0 <__do_global_dtors_aux+0x1c>)
    b0b8:	7823      	ldrb	r3, [r4, #0]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d107      	bne.n	b0ce <__do_global_dtors_aux+0x1a>
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <__do_global_dtors_aux+0x20>)
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d002      	beq.n	b0ca <__do_global_dtors_aux+0x16>
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <__do_global_dtors_aux+0x24>)
    b0c6:	e000      	b.n	b0ca <__do_global_dtors_aux+0x16>
    b0c8:	bf00      	nop
    b0ca:	2301      	movs	r3, #1
    b0cc:	7023      	strb	r3, [r4, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	20000320 	.word	0x20000320
    b0d4:	00000000 	.word	0x00000000
    b0d8:	0001b084 	.word	0x0001b084

0000b0dc <frame_dummy>:
    b0dc:	4b08      	ldr	r3, [pc, #32]	; (b100 <frame_dummy+0x24>)
    b0de:	b510      	push	{r4, lr}
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <frame_dummy+0x10>
    b0e4:	4907      	ldr	r1, [pc, #28]	; (b104 <frame_dummy+0x28>)
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <frame_dummy+0x2c>)
    b0e8:	e000      	b.n	b0ec <frame_dummy+0x10>
    b0ea:	bf00      	nop
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <frame_dummy+0x30>)
    b0ee:	6803      	ldr	r3, [r0, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <frame_dummy+0x1a>
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	4b06      	ldr	r3, [pc, #24]	; (b110 <frame_dummy+0x34>)
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d0fb      	beq.n	b0f4 <frame_dummy+0x18>
    b0fc:	4798      	blx	r3
    b0fe:	e7f9      	b.n	b0f4 <frame_dummy+0x18>
    b100:	00000000 	.word	0x00000000
    b104:	20000324 	.word	0x20000324
    b108:	0001b084 	.word	0x0001b084
    b10c:	0001b084 	.word	0x0001b084
    b110:	00000000 	.word	0x00000000

0000b114 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    b114:	b5f0      	push	{r4, r5, r6, r7, lr}
    b116:	46c6      	mov	lr, r8
    b118:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    b11a:	2303      	movs	r3, #3
    b11c:	0007      	movs	r7, r0
    b11e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    b120:	6813      	ldr	r3, [r2, #0]
    b122:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    b124:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    b126:	2903      	cmp	r1, #3
    b128:	d902      	bls.n	b130 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    b12a:	4244      	negs	r4, r0
    b12c:	2003      	movs	r0, #3
    b12e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    b130:	2c00      	cmp	r4, #0
    b132:	d016      	beq.n	b162 <crc32_recalculate+0x4e>
		length -= temp_length;
    b134:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    b136:	1d3e      	adds	r6, r7, #4
    b138:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    b13a:	00e0      	lsls	r0, r4, #3
    b13c:	4240      	negs	r0, r0
    b13e:	3020      	adds	r0, #32
    b140:	40c5      	lsrs	r5, r0
	crc ^= data;
    b142:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    b144:	00e0      	lsls	r0, r4, #3
    b146:	d019      	beq.n	b17c <crc32_recalculate+0x68>
		if (crc & 1) {
    b148:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b14a:	4d27      	ldr	r5, [pc, #156]	; (b1e8 <crc32_recalculate+0xd4>)
    b14c:	e003      	b.n	b156 <crc32_recalculate+0x42>
			crc >>= 1;
    b14e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b150:	3801      	subs	r0, #1
    b152:	2800      	cmp	r0, #0
    b154:	d004      	beq.n	b160 <crc32_recalculate+0x4c>
		if (crc & 1) {
    b156:	421c      	tst	r4, r3
    b158:	d0f9      	beq.n	b14e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b15a:	085b      	lsrs	r3, r3, #1
    b15c:	406b      	eors	r3, r5
    b15e:	e7f7      	b.n	b150 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    b160:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    b162:	2003      	movs	r0, #3
    b164:	000c      	movs	r4, r1
    b166:	4384      	bics	r4, r0

	if (temp_length) {
    b168:	d01e      	beq.n	b1a8 <crc32_recalculate+0x94>
		length -= temp_length;
    b16a:	1b08      	subs	r0, r1, r4
    b16c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    b16e:	0889      	lsrs	r1, r1, #2
    b170:	4688      	mov	r8, r1
    b172:	003e      	movs	r6, r7
    b174:	000d      	movs	r5, r1
		if (crc & 1) {
    b176:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b178:	4c1b      	ldr	r4, [pc, #108]	; (b1e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    b17a:	e00b      	b.n	b194 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    b17c:	0037      	movs	r7, r6
    b17e:	e7f0      	b.n	b162 <crc32_recalculate+0x4e>
			crc >>= 1;
    b180:	085b      	lsrs	r3, r3, #1
    b182:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b184:	2900      	cmp	r1, #0
    b186:	d004      	beq.n	b192 <crc32_recalculate+0x7e>
		if (crc & 1) {
    b188:	4218      	tst	r0, r3
    b18a:	d0f9      	beq.n	b180 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b18c:	085b      	lsrs	r3, r3, #1
    b18e:	4063      	eors	r3, r4
    b190:	e7f7      	b.n	b182 <crc32_recalculate+0x6e>
    b192:	3604      	adds	r6, #4
		while (temp_length--) {
    b194:	3d01      	subs	r5, #1
    b196:	d303      	bcc.n	b1a0 <crc32_recalculate+0x8c>
	crc ^= data;
    b198:	6831      	ldr	r1, [r6, #0]
    b19a:	404b      	eors	r3, r1
    b19c:	2120      	movs	r1, #32
    b19e:	e7f3      	b.n	b188 <crc32_recalculate+0x74>
    b1a0:	4641      	mov	r1, r8
    b1a2:	0089      	lsls	r1, r1, #2
    b1a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    b1a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    b1a8:	2900      	cmp	r1, #0
    b1aa:	d017      	beq.n	b1dc <crc32_recalculate+0xc8>
		word = *word_ptr;
    b1ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    b1ae:	00c8      	lsls	r0, r1, #3
    b1b0:	4240      	negs	r0, r0
    b1b2:	3020      	adds	r0, #32
    b1b4:	2501      	movs	r5, #1
    b1b6:	426d      	negs	r5, r5
    b1b8:	40c5      	lsrs	r5, r0
    b1ba:	0028      	movs	r0, r5
    b1bc:	4020      	ands	r0, r4
	crc ^= data;
    b1be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    b1c0:	00c9      	lsls	r1, r1, #3
    b1c2:	d00b      	beq.n	b1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b1c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b1c6:	4c08      	ldr	r4, [pc, #32]	; (b1e8 <crc32_recalculate+0xd4>)
    b1c8:	e003      	b.n	b1d2 <crc32_recalculate+0xbe>
			crc >>= 1;
    b1ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b1cc:	3901      	subs	r1, #1
    b1ce:	2900      	cmp	r1, #0
    b1d0:	d004      	beq.n	b1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b1d2:	4218      	tst	r0, r3
    b1d4:	d0f9      	beq.n	b1ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b1d6:	085b      	lsrs	r3, r3, #1
    b1d8:	4063      	eors	r3, r4
    b1da:	e7f7      	b.n	b1cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    b1dc:	43db      	mvns	r3, r3
    b1de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    b1e0:	2000      	movs	r0, #0
    b1e2:	bc04      	pop	{r2}
    b1e4:	4690      	mov	r8, r2
    b1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1e8:	edb88320 	.word	0xedb88320

0000b1ec <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b1ec:	b510      	push	{r4, lr}
    b1ee:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    b1f0:	7c03      	ldrb	r3, [r0, #16]
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d005      	beq.n	b202 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b1f6:	6883      	ldr	r3, [r0, #8]
    b1f8:	1c58      	adds	r0, r3, #1
    b1fa:	68e1      	ldr	r1, [r4, #12]
    b1fc:	4b07      	ldr	r3, [pc, #28]	; (b21c <advance_pointer+0x30>)
    b1fe:	4798      	blx	r3
    b200:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b202:	6863      	ldr	r3, [r4, #4]
    b204:	1c58      	adds	r0, r3, #1
    b206:	68e1      	ldr	r1, [r4, #12]
    b208:	4b04      	ldr	r3, [pc, #16]	; (b21c <advance_pointer+0x30>)
    b20a:	4798      	blx	r3
    b20c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b20e:	68a3      	ldr	r3, [r4, #8]
    b210:	1a59      	subs	r1, r3, r1
    b212:	424a      	negs	r2, r1
    b214:	414a      	adcs	r2, r1
    b216:	7422      	strb	r2, [r4, #16]
 }
    b218:	bd10      	pop	{r4, pc}
    b21a:	46c0      	nop			; (mov r8, r8)
    b21c:	000170ed 	.word	0x000170ed

0000b220 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b220:	b570      	push	{r4, r5, r6, lr}
    b222:	0005      	movs	r5, r0
    b224:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b226:	2014      	movs	r0, #20
    b228:	4b04      	ldr	r3, [pc, #16]	; (b23c <circular_buf_init+0x1c>)
    b22a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b22c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    b22e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    b230:	2300      	movs	r3, #0
    b232:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    b234:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    b236:	7403      	strb	r3, [r0, #16]
 }
    b238:	bd70      	pop	{r4, r5, r6, pc}
    b23a:	46c0      	nop			; (mov r8, r8)
    b23c:	00017375 	.word	0x00017375

0000b240 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b240:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b242:	6803      	ldr	r3, [r0, #0]
    b244:	6842      	ldr	r2, [r0, #4]
    b246:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    b248:	4b01      	ldr	r3, [pc, #4]	; (b250 <circular_buf_put+0x10>)
    b24a:	4798      	blx	r3
 }
    b24c:	bd10      	pop	{r4, pc}
    b24e:	46c0      	nop			; (mov r8, r8)
    b250:	0000b1ed 	.word	0x0000b1ed

0000b254 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b254:	7c02      	ldrb	r2, [r0, #16]
    b256:	2300      	movs	r3, #0
    b258:	2a00      	cmp	r2, #0
    b25a:	d105      	bne.n	b268 <circular_buf_empty+0x14>
    b25c:	6843      	ldr	r3, [r0, #4]
    b25e:	6880      	ldr	r0, [r0, #8]
    b260:	1a1b      	subs	r3, r3, r0
    b262:	4258      	negs	r0, r3
    b264:	4143      	adcs	r3, r0
    b266:	b2db      	uxtb	r3, r3
    b268:	0018      	movs	r0, r3
 }
    b26a:	4770      	bx	lr

0000b26c <circular_buf_get>:
 {
    b26c:	b570      	push	{r4, r5, r6, lr}
    b26e:	0004      	movs	r4, r0
    b270:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    b272:	4b0a      	ldr	r3, [pc, #40]	; (b29c <circular_buf_get+0x30>)
    b274:	4798      	blx	r3
    b276:	2800      	cmp	r0, #0
    b278:	d10d      	bne.n	b296 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    b27a:	6823      	ldr	r3, [r4, #0]
    b27c:	68a2      	ldr	r2, [r4, #8]
    b27e:	5c9b      	ldrb	r3, [r3, r2]
    b280:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    b282:	2300      	movs	r3, #0
    b284:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b286:	68a3      	ldr	r3, [r4, #8]
    b288:	1c58      	adds	r0, r3, #1
    b28a:	68e1      	ldr	r1, [r4, #12]
    b28c:	4b04      	ldr	r3, [pc, #16]	; (b2a0 <circular_buf_get+0x34>)
    b28e:	4798      	blx	r3
    b290:	60a1      	str	r1, [r4, #8]
		 r = 0;
    b292:	2000      	movs	r0, #0
 }
    b294:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    b296:	2001      	movs	r0, #1
    b298:	4240      	negs	r0, r0
	 return r;
    b29a:	e7fb      	b.n	b294 <circular_buf_get+0x28>
    b29c:	0000b255 	.word	0x0000b255
    b2a0:	000170ed 	.word	0x000170ed

0000b2a4 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    b2a4:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    b2a6:	4b06      	ldr	r3, [pc, #24]	; (b2c0 <usart_write_callback+0x1c>)
    b2a8:	6818      	ldr	r0, [r3, #0]
    b2aa:	4906      	ldr	r1, [pc, #24]	; (b2c4 <usart_write_callback+0x20>)
    b2ac:	4b06      	ldr	r3, [pc, #24]	; (b2c8 <usart_write_callback+0x24>)
    b2ae:	4798      	blx	r3
    b2b0:	1c43      	adds	r3, r0, #1
    b2b2:	d004      	beq.n	b2be <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b2b4:	2201      	movs	r2, #1
    b2b6:	4903      	ldr	r1, [pc, #12]	; (b2c4 <usart_write_callback+0x20>)
    b2b8:	4804      	ldr	r0, [pc, #16]	; (b2cc <usart_write_callback+0x28>)
    b2ba:	4b05      	ldr	r3, [pc, #20]	; (b2d0 <usart_write_callback+0x2c>)
    b2bc:	4798      	blx	r3
	}
	
}
    b2be:	bd10      	pop	{r4, pc}
    b2c0:	20001338 	.word	0x20001338
    b2c4:	20001334 	.word	0x20001334
    b2c8:	0000b26d 	.word	0x0000b26d
    b2cc:	20000ef8 	.word	0x20000ef8
    b2d0:	00010cc1 	.word	0x00010cc1

0000b2d4 <InitializeSerialConsole>:
{
    b2d4:	b530      	push	{r4, r5, lr}
    b2d6:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    b2d8:	2580      	movs	r5, #128	; 0x80
    b2da:	00ad      	lsls	r5, r5, #2
    b2dc:	0029      	movs	r1, r5
    b2de:	4836      	ldr	r0, [pc, #216]	; (b3b8 <InitializeSerialConsole+0xe4>)
    b2e0:	4c36      	ldr	r4, [pc, #216]	; (b3bc <InitializeSerialConsole+0xe8>)
    b2e2:	47a0      	blx	r4
    b2e4:	4b36      	ldr	r3, [pc, #216]	; (b3c0 <InitializeSerialConsole+0xec>)
    b2e6:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    b2e8:	0029      	movs	r1, r5
    b2ea:	4836      	ldr	r0, [pc, #216]	; (b3c4 <InitializeSerialConsole+0xf0>)
    b2ec:	47a0      	blx	r4
    b2ee:	4b36      	ldr	r3, [pc, #216]	; (b3c8 <InitializeSerialConsole+0xf4>)
    b2f0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b2f2:	2380      	movs	r3, #128	; 0x80
    b2f4:	05db      	lsls	r3, r3, #23
    b2f6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b2f8:	2300      	movs	r3, #0
    b2fa:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b2fc:	22ff      	movs	r2, #255	; 0xff
    b2fe:	4669      	mov	r1, sp
    b300:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b302:	2200      	movs	r2, #0
    b304:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b306:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b308:	2101      	movs	r1, #1
    b30a:	2024      	movs	r0, #36	; 0x24
    b30c:	466c      	mov	r4, sp
    b30e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b310:	3001      	adds	r0, #1
    b312:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b314:	3125      	adds	r1, #37	; 0x25
    b316:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b318:	3101      	adds	r1, #1
    b31a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b31c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b31e:	3105      	adds	r1, #5
    b320:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b322:	3101      	adds	r1, #1
    b324:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b326:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b328:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b32a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b32c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b32e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b330:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b332:	2313      	movs	r3, #19
    b334:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b336:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    b338:	23e1      	movs	r3, #225	; 0xe1
    b33a:	025b      	lsls	r3, r3, #9
    b33c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b33e:	23c4      	movs	r3, #196	; 0xc4
    b340:	039b      	lsls	r3, r3, #14
    b342:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b344:	2301      	movs	r3, #1
    b346:	425b      	negs	r3, r3
    b348:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b34a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b34c:	4b1f      	ldr	r3, [pc, #124]	; (b3cc <InitializeSerialConsole+0xf8>)
    b34e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b350:	4b1f      	ldr	r3, [pc, #124]	; (b3d0 <InitializeSerialConsole+0xfc>)
    b352:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    b354:	4d1f      	ldr	r5, [pc, #124]	; (b3d4 <InitializeSerialConsole+0x100>)
    b356:	4c20      	ldr	r4, [pc, #128]	; (b3d8 <InitializeSerialConsole+0x104>)
    b358:	466a      	mov	r2, sp
    b35a:	4920      	ldr	r1, [pc, #128]	; (b3dc <InitializeSerialConsole+0x108>)
    b35c:	0028      	movs	r0, r5
    b35e:	47a0      	blx	r4
    b360:	2800      	cmp	r0, #0
    b362:	d1f9      	bne.n	b358 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b364:	4d1b      	ldr	r5, [pc, #108]	; (b3d4 <InitializeSerialConsole+0x100>)
    b366:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b368:	0020      	movs	r0, r4
    b36a:	4b1d      	ldr	r3, [pc, #116]	; (b3e0 <InitializeSerialConsole+0x10c>)
    b36c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b36e:	231f      	movs	r3, #31
    b370:	4018      	ands	r0, r3
    b372:	3b1e      	subs	r3, #30
    b374:	4083      	lsls	r3, r0
    b376:	4a1b      	ldr	r2, [pc, #108]	; (b3e4 <InitializeSerialConsole+0x110>)
    b378:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b37a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b37c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b37e:	2b00      	cmp	r3, #0
    b380:	d1fc      	bne.n	b37c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b382:	6823      	ldr	r3, [r4, #0]
    b384:	2202      	movs	r2, #2
    b386:	4313      	orrs	r3, r2
    b388:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    b38a:	4c12      	ldr	r4, [pc, #72]	; (b3d4 <InitializeSerialConsole+0x100>)
    b38c:	2200      	movs	r2, #0
    b38e:	4916      	ldr	r1, [pc, #88]	; (b3e8 <InitializeSerialConsole+0x114>)
    b390:	0020      	movs	r0, r4
    b392:	4d16      	ldr	r5, [pc, #88]	; (b3ec <InitializeSerialConsole+0x118>)
    b394:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    b396:	2201      	movs	r2, #1
    b398:	4915      	ldr	r1, [pc, #84]	; (b3f0 <InitializeSerialConsole+0x11c>)
    b39a:	0020      	movs	r0, r4
    b39c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b39e:	2231      	movs	r2, #49	; 0x31
    b3a0:	5ca3      	ldrb	r3, [r4, r2]
    b3a2:	2103      	movs	r1, #3
    b3a4:	430b      	orrs	r3, r1
    b3a6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    b3a8:	3a30      	subs	r2, #48	; 0x30
    b3aa:	4912      	ldr	r1, [pc, #72]	; (b3f4 <InitializeSerialConsole+0x120>)
    b3ac:	0020      	movs	r0, r4
    b3ae:	4b12      	ldr	r3, [pc, #72]	; (b3f8 <InitializeSerialConsole+0x124>)
    b3b0:	4798      	blx	r3
}
    b3b2:	b011      	add	sp, #68	; 0x44
    b3b4:	bd30      	pop	{r4, r5, pc}
    b3b6:	46c0      	nop			; (mov r8, r8)
    b3b8:	20001134 	.word	0x20001134
    b3bc:	0000b221 	.word	0x0000b221
    b3c0:	20000f2c 	.word	0x20000f2c
    b3c4:	20000f34 	.word	0x20000f34
    b3c8:	20001338 	.word	0x20001338
    b3cc:	002a0003 	.word	0x002a0003
    b3d0:	002b0003 	.word	0x002b0003
    b3d4:	20000ef8 	.word	0x20000ef8
    b3d8:	0001083d 	.word	0x0001083d
    b3dc:	42001800 	.word	0x42001800
    b3e0:	000100b9 	.word	0x000100b9
    b3e4:	e000e100 	.word	0xe000e100
    b3e8:	0000b2a5 	.word	0x0000b2a5
    b3ec:	00010ca9 	.word	0x00010ca9
    b3f0:	0000b471 	.word	0x0000b471
    b3f4:	20000f30 	.word	0x20000f30
    b3f8:	00010ce1 	.word	0x00010ce1

0000b3fc <SerialConsoleWriteString>:
{
    b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3fe:	46c6      	mov	lr, r8
    b400:	b500      	push	{lr}
    b402:	0005      	movs	r5, r0
    b404:	2400      	movs	r4, #0
	if(string != NULL)
    b406:	2800      	cmp	r0, #0
    b408:	d012      	beq.n	b430 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
    b40a:	4e11      	ldr	r6, [pc, #68]	; (b450 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
    b40c:	4f11      	ldr	r7, [pc, #68]	; (b454 <SerialConsoleWriteString+0x58>)
    b40e:	4b12      	ldr	r3, [pc, #72]	; (b458 <SerialConsoleWriteString+0x5c>)
    b410:	4698      	mov	r8, r3
    b412:	e003      	b.n	b41c <SerialConsoleWriteString+0x20>
    b414:	5d29      	ldrb	r1, [r5, r4]
    b416:	6838      	ldr	r0, [r7, #0]
    b418:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    b41a:	3401      	adds	r4, #1
    b41c:	0028      	movs	r0, r5
    b41e:	47b0      	blx	r6
    b420:	4284      	cmp	r4, r0
    b422:	d3f7      	bcc.n	b414 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    b424:	2101      	movs	r1, #1
    b426:	480d      	ldr	r0, [pc, #52]	; (b45c <SerialConsoleWriteString+0x60>)
    b428:	4b0d      	ldr	r3, [pc, #52]	; (b460 <SerialConsoleWriteString+0x64>)
    b42a:	4798      	blx	r3
    b42c:	2800      	cmp	r0, #0
    b42e:	d002      	beq.n	b436 <SerialConsoleWriteString+0x3a>
}
    b430:	bc04      	pop	{r2}
    b432:	4690      	mov	r8, r2
    b434:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    b436:	4c0b      	ldr	r4, [pc, #44]	; (b464 <SerialConsoleWriteString+0x68>)
    b438:	4b06      	ldr	r3, [pc, #24]	; (b454 <SerialConsoleWriteString+0x58>)
    b43a:	6818      	ldr	r0, [r3, #0]
    b43c:	0021      	movs	r1, r4
    b43e:	4b0a      	ldr	r3, [pc, #40]	; (b468 <SerialConsoleWriteString+0x6c>)
    b440:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b442:	2201      	movs	r2, #1
    b444:	0021      	movs	r1, r4
    b446:	4805      	ldr	r0, [pc, #20]	; (b45c <SerialConsoleWriteString+0x60>)
    b448:	4b08      	ldr	r3, [pc, #32]	; (b46c <SerialConsoleWriteString+0x70>)
    b44a:	4798      	blx	r3
}
    b44c:	e7f0      	b.n	b430 <SerialConsoleWriteString+0x34>
    b44e:	46c0      	nop			; (mov r8, r8)
    b450:	000178fb 	.word	0x000178fb
    b454:	20001338 	.word	0x20001338
    b458:	0000b241 	.word	0x0000b241
    b45c:	20000ef8 	.word	0x20000ef8
    b460:	00010d01 	.word	0x00010d01
    b464:	20001334 	.word	0x20001334
    b468:	0000b26d 	.word	0x0000b26d
    b46c:	00010cc1 	.word	0x00010cc1

0000b470 <usart_read_callback>:
{
    b470:	b510      	push	{r4, lr}
	SerialConsoleWriteString(&latestRx);
    b472:	4c07      	ldr	r4, [pc, #28]	; (b490 <usart_read_callback+0x20>)
    b474:	0020      	movs	r0, r4
    b476:	4b07      	ldr	r3, [pc, #28]	; (b494 <usart_read_callback+0x24>)
    b478:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    b47a:	7821      	ldrb	r1, [r4, #0]
    b47c:	4b06      	ldr	r3, [pc, #24]	; (b498 <usart_read_callback+0x28>)
    b47e:	6818      	ldr	r0, [r3, #0]
    b480:	4b06      	ldr	r3, [pc, #24]	; (b49c <usart_read_callback+0x2c>)
    b482:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    b484:	2201      	movs	r2, #1
    b486:	0021      	movs	r1, r4
    b488:	4805      	ldr	r0, [pc, #20]	; (b4a0 <usart_read_callback+0x30>)
    b48a:	4b06      	ldr	r3, [pc, #24]	; (b4a4 <usart_read_callback+0x34>)
    b48c:	4798      	blx	r3
}
    b48e:	bd10      	pop	{r4, pc}
    b490:	20000f30 	.word	0x20000f30
    b494:	0000b3fd 	.word	0x0000b3fd
    b498:	20000f2c 	.word	0x20000f2c
    b49c:	0000b241 	.word	0x0000b241
    b4a0:	20000ef8 	.word	0x20000ef8
    b4a4:	00010ce1 	.word	0x00010ce1

0000b4a8 <LogMessage>:
{
    b4a8:	b40e      	push	{r1, r2, r3}
};
    b4aa:	b003      	add	sp, #12
    b4ac:	4770      	bx	lr
	...

0000b4b0 <GetUsartModule>:


struct usart_module* GetUsartModule(void)
{
	return &usart_instance;
    b4b0:	4800      	ldr	r0, [pc, #0]	; (b4b4 <GetUsartModule+0x4>)
    b4b2:	4770      	bx	lr
    b4b4:	20000ef8 	.word	0x20000ef8

0000b4b8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b4b8:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b4ba:	4b06      	ldr	r3, [pc, #24]	; (b4d4 <sd_mmc_configure_slot+0x1c>)
    b4bc:	6819      	ldr	r1, [r3, #0]
    b4be:	7f8b      	ldrb	r3, [r1, #30]
    b4c0:	1e5a      	subs	r2, r3, #1
    b4c2:	4193      	sbcs	r3, r2
    b4c4:	b2db      	uxtb	r3, r3
    b4c6:	7b4a      	ldrb	r2, [r1, #13]
    b4c8:	6809      	ldr	r1, [r1, #0]
    b4ca:	4803      	ldr	r0, [pc, #12]	; (b4d8 <sd_mmc_configure_slot+0x20>)
    b4cc:	7800      	ldrb	r0, [r0, #0]
    b4ce:	4c03      	ldr	r4, [pc, #12]	; (b4dc <sd_mmc_configure_slot+0x24>)
    b4d0:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    b4d2:	bd10      	pop	{r4, pc}
    b4d4:	2000033c 	.word	0x2000033c
    b4d8:	20000364 	.word	0x20000364
    b4dc:	0000c161 	.word	0x0000c161

0000b4e0 <sd_mmc_select_slot>:
{
    b4e0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    b4e2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    b4e4:	2800      	cmp	r0, #0
    b4e6:	d001      	beq.n	b4ec <sd_mmc_select_slot+0xc>
}
    b4e8:	0018      	movs	r0, r3
    b4ea:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b4ec:	4b0e      	ldr	r3, [pc, #56]	; (b528 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b4ee:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b4f0:	3b03      	subs	r3, #3
    b4f2:	2b01      	cmp	r3, #1
    b4f4:	d90d      	bls.n	b512 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    b4f6:	2200      	movs	r2, #0
    b4f8:	4b0c      	ldr	r3, [pc, #48]	; (b52c <sd_mmc_select_slot+0x4c>)
    b4fa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b4fc:	4c0a      	ldr	r4, [pc, #40]	; (b528 <sd_mmc_select_slot+0x48>)
    b4fe:	4b0c      	ldr	r3, [pc, #48]	; (b530 <sd_mmc_select_slot+0x50>)
    b500:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    b502:	4b0c      	ldr	r3, [pc, #48]	; (b534 <sd_mmc_select_slot+0x54>)
    b504:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b506:	7aa3      	ldrb	r3, [r4, #10]
    b508:	3b02      	subs	r3, #2
    b50a:	4258      	negs	r0, r3
    b50c:	4143      	adcs	r3, r0
    b50e:	b2db      	uxtb	r3, r3
    b510:	e7ea      	b.n	b4e8 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b512:	4b05      	ldr	r3, [pc, #20]	; (b528 <sd_mmc_select_slot+0x48>)
    b514:	2202      	movs	r2, #2
    b516:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b518:	4a07      	ldr	r2, [pc, #28]	; (b538 <sd_mmc_select_slot+0x58>)
    b51a:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    b51c:	2201      	movs	r2, #1
    b51e:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    b520:	2200      	movs	r2, #0
    b522:	779a      	strb	r2, [r3, #30]
    b524:	e7e7      	b.n	b4f6 <sd_mmc_select_slot+0x16>
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	20000340 	.word	0x20000340
    b52c:	20000364 	.word	0x20000364
    b530:	2000033c 	.word	0x2000033c
    b534:	0000b4b9 	.word	0x0000b4b9
    b538:	00061a80 	.word	0x00061a80

0000b53c <sd_mmc_cmd13>:
{
    b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b53e:	4d09      	ldr	r5, [pc, #36]	; (b564 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b540:	4f09      	ldr	r7, [pc, #36]	; (b568 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    b542:	4e0a      	ldr	r6, [pc, #40]	; (b56c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b544:	2100      	movs	r1, #0
    b546:	480a      	ldr	r0, [pc, #40]	; (b570 <sd_mmc_cmd13+0x34>)
    b548:	47b8      	blx	r7
    b54a:	1e04      	subs	r4, r0, #0
    b54c:	d007      	beq.n	b55e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    b54e:	47b0      	blx	r6
    b550:	23ff      	movs	r3, #255	; 0xff
    b552:	4203      	tst	r3, r0
    b554:	d003      	beq.n	b55e <sd_mmc_cmd13+0x22>
    b556:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    b558:	2d00      	cmp	r5, #0
    b55a:	d1f3      	bne.n	b544 <sd_mmc_cmd13+0x8>
			return false;
    b55c:	2400      	movs	r4, #0
}
    b55e:	0020      	movs	r0, r4
    b560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b562:	46c0      	nop			; (mov r8, r8)
    b564:	00030d41 	.word	0x00030d41
    b568:	0000c3a5 	.word	0x0000c3a5
    b56c:	0000c3bd 	.word	0x0000c3bd
    b570:	00001b0d 	.word	0x00001b0d

0000b574 <sd_mmc_cmd9_spi>:
{
    b574:	b510      	push	{r4, lr}
    b576:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b578:	4b0c      	ldr	r3, [pc, #48]	; (b5ac <sd_mmc_cmd9_spi+0x38>)
    b57a:	681b      	ldr	r3, [r3, #0]
    b57c:	8919      	ldrh	r1, [r3, #8]
    b57e:	0409      	lsls	r1, r1, #16
    b580:	2301      	movs	r3, #1
    b582:	9300      	str	r3, [sp, #0]
    b584:	2210      	movs	r2, #16
    b586:	480a      	ldr	r0, [pc, #40]	; (b5b0 <sd_mmc_cmd9_spi+0x3c>)
    b588:	4c0a      	ldr	r4, [pc, #40]	; (b5b4 <sd_mmc_cmd9_spi+0x40>)
    b58a:	47a0      	blx	r4
    b58c:	2800      	cmp	r0, #0
    b58e:	d101      	bne.n	b594 <sd_mmc_cmd9_spi+0x20>
}
    b590:	b002      	add	sp, #8
    b592:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b594:	4b05      	ldr	r3, [pc, #20]	; (b5ac <sd_mmc_cmd9_spi+0x38>)
    b596:	6818      	ldr	r0, [r3, #0]
    b598:	300e      	adds	r0, #14
    b59a:	2101      	movs	r1, #1
    b59c:	4b06      	ldr	r3, [pc, #24]	; (b5b8 <sd_mmc_cmd9_spi+0x44>)
    b59e:	4798      	blx	r3
    b5a0:	2800      	cmp	r0, #0
    b5a2:	d0f5      	beq.n	b590 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    b5a4:	4b05      	ldr	r3, [pc, #20]	; (b5bc <sd_mmc_cmd9_spi+0x48>)
    b5a6:	4798      	blx	r3
    b5a8:	e7f2      	b.n	b590 <sd_mmc_cmd9_spi+0x1c>
    b5aa:	46c0      	nop			; (mov r8, r8)
    b5ac:	2000033c 	.word	0x2000033c
    b5b0:	00081109 	.word	0x00081109
    b5b4:	0000c215 	.word	0x0000c215
    b5b8:	0000c441 	.word	0x0000c441
    b5bc:	0000c4cd 	.word	0x0000c4cd

0000b5c0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    b5c0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    b5c2:	4b04      	ldr	r3, [pc, #16]	; (b5d4 <sd_mmc_deselect_slot+0x14>)
    b5c4:	781b      	ldrb	r3, [r3, #0]
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	d000      	beq.n	b5cc <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    b5ca:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    b5cc:	2000      	movs	r0, #0
    b5ce:	4b02      	ldr	r3, [pc, #8]	; (b5d8 <sd_mmc_deselect_slot+0x18>)
    b5d0:	4798      	blx	r3
}
    b5d2:	e7fa      	b.n	b5ca <sd_mmc_deselect_slot+0xa>
    b5d4:	20000364 	.word	0x20000364
    b5d8:	0000c1b5 	.word	0x0000c1b5

0000b5dc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b5dc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b5de:	2204      	movs	r2, #4
    b5e0:	4b03      	ldr	r3, [pc, #12]	; (b5f0 <sd_mmc_init+0x14>)
    b5e2:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b5e4:	32fb      	adds	r2, #251	; 0xfb
    b5e6:	4b03      	ldr	r3, [pc, #12]	; (b5f4 <sd_mmc_init+0x18>)
    b5e8:	701a      	strb	r2, [r3, #0]
	driver_init();
    b5ea:	4b03      	ldr	r3, [pc, #12]	; (b5f8 <sd_mmc_init+0x1c>)
    b5ec:	4798      	blx	r3
}
    b5ee:	bd10      	pop	{r4, pc}
    b5f0:	20000340 	.word	0x20000340
    b5f4:	20000364 	.word	0x20000364
    b5f8:	0000c061 	.word	0x0000c061

0000b5fc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5fe:	46c6      	mov	lr, r8
    b600:	b500      	push	{lr}
    b602:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b604:	4bcb      	ldr	r3, [pc, #812]	; (b934 <sd_mmc_check+0x338>)
    b606:	4798      	blx	r3
    b608:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b60a:	2801      	cmp	r0, #1
    b60c:	d006      	beq.n	b61c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    b60e:	4bca      	ldr	r3, [pc, #808]	; (b938 <sd_mmc_check+0x33c>)
    b610:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    b612:	0020      	movs	r0, r4
    b614:	b008      	add	sp, #32
    b616:	bc04      	pop	{r2}
    b618:	4690      	mov	r8, r2
    b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    b61c:	4bc7      	ldr	r3, [pc, #796]	; (b93c <sd_mmc_check+0x340>)
    b61e:	681b      	ldr	r3, [r3, #0]
    b620:	2201      	movs	r2, #1
    b622:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b624:	2200      	movs	r2, #0
    b626:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b628:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    b62a:	4bc5      	ldr	r3, [pc, #788]	; (b940 <sd_mmc_check+0x344>)
    b62c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b62e:	2100      	movs	r1, #0
    b630:	2088      	movs	r0, #136	; 0x88
    b632:	0140      	lsls	r0, r0, #5
    b634:	4bc3      	ldr	r3, [pc, #780]	; (b944 <sd_mmc_check+0x348>)
    b636:	4798      	blx	r3
    b638:	2800      	cmp	r0, #0
    b63a:	d107      	bne.n	b64c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b63c:	4bbf      	ldr	r3, [pc, #764]	; (b93c <sd_mmc_check+0x340>)
    b63e:	681b      	ldr	r3, [r3, #0]
    b640:	2203      	movs	r2, #3
    b642:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b644:	4bbc      	ldr	r3, [pc, #752]	; (b938 <sd_mmc_check+0x33c>)
    b646:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b648:	2403      	movs	r4, #3
    b64a:	e7e2      	b.n	b612 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b64c:	21d5      	movs	r1, #213	; 0xd5
    b64e:	0049      	lsls	r1, r1, #1
    b650:	48bd      	ldr	r0, [pc, #756]	; (b948 <sd_mmc_check+0x34c>)
    b652:	4bbc      	ldr	r3, [pc, #752]	; (b944 <sd_mmc_check+0x348>)
    b654:	4798      	blx	r3
	*v2 = 0;
    b656:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b658:	2800      	cmp	r0, #0
    b65a:	d125      	bne.n	b6a8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b65c:	4bb7      	ldr	r3, [pc, #732]	; (b93c <sd_mmc_check+0x340>)
    b65e:	681b      	ldr	r3, [r3, #0]
    b660:	7adb      	ldrb	r3, [r3, #11]
    b662:	07db      	lsls	r3, r3, #31
    b664:	d500      	bpl.n	b668 <sd_mmc_check+0x6c>
    b666:	e1eb      	b.n	ba40 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b668:	4bb4      	ldr	r3, [pc, #720]	; (b93c <sd_mmc_check+0x340>)
    b66a:	681b      	ldr	r3, [r3, #0]
    b66c:	7ada      	ldrb	r2, [r3, #11]
    b66e:	2309      	movs	r3, #9
    b670:	4013      	ands	r3, r2
    b672:	2b01      	cmp	r3, #1
    b674:	d10f      	bne.n	b696 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b676:	2180      	movs	r1, #128	; 0x80
    b678:	0089      	lsls	r1, r1, #2
    b67a:	48b4      	ldr	r0, [pc, #720]	; (b94c <sd_mmc_check+0x350>)
    b67c:	4bb1      	ldr	r3, [pc, #708]	; (b944 <sd_mmc_check+0x348>)
    b67e:	4798      	blx	r3
    b680:	2800      	cmp	r0, #0
    b682:	d0db      	beq.n	b63c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b684:	4bad      	ldr	r3, [pc, #692]	; (b93c <sd_mmc_check+0x340>)
    b686:	681b      	ldr	r3, [r3, #0]
    b688:	7adb      	ldrb	r3, [r3, #11]
    b68a:	07db      	lsls	r3, r3, #31
    b68c:	d503      	bpl.n	b696 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    b68e:	4bb0      	ldr	r3, [pc, #704]	; (b950 <sd_mmc_check+0x354>)
    b690:	4798      	blx	r3
    b692:	2800      	cmp	r0, #0
    b694:	d0d2      	beq.n	b63c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b696:	4baf      	ldr	r3, [pc, #700]	; (b954 <sd_mmc_check+0x358>)
    b698:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b69a:	4ba8      	ldr	r3, [pc, #672]	; (b93c <sd_mmc_check+0x340>)
    b69c:	681b      	ldr	r3, [r3, #0]
    b69e:	2200      	movs	r2, #0
    b6a0:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b6a2:	4ba5      	ldr	r3, [pc, #660]	; (b938 <sd_mmc_check+0x33c>)
    b6a4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    b6a6:	e7b4      	b.n	b612 <sd_mmc_check+0x16>
	resp = driver_get_response();
    b6a8:	4bab      	ldr	r3, [pc, #684]	; (b958 <sd_mmc_check+0x35c>)
    b6aa:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    b6ac:	1c43      	adds	r3, r0, #1
    b6ae:	d100      	bne.n	b6b2 <sd_mmc_check+0xb6>
    b6b0:	e1c4      	b.n	ba3c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b6b2:	0500      	lsls	r0, r0, #20
    b6b4:	0d00      	lsrs	r0, r0, #20
    b6b6:	23d5      	movs	r3, #213	; 0xd5
    b6b8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    b6ba:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b6bc:	4298      	cmp	r0, r3
    b6be:	d1bd      	bne.n	b63c <sd_mmc_check+0x40>
    b6c0:	e7cc      	b.n	b65c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b6c2:	2100      	movs	r1, #0
    b6c4:	48a5      	ldr	r0, [pc, #660]	; (b95c <sd_mmc_check+0x360>)
    b6c6:	4b9f      	ldr	r3, [pc, #636]	; (b944 <sd_mmc_check+0x348>)
    b6c8:	4798      	blx	r3
    b6ca:	2800      	cmp	r0, #0
    b6cc:	d119      	bne.n	b702 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    b6ce:	4b9b      	ldr	r3, [pc, #620]	; (b93c <sd_mmc_check+0x340>)
    b6d0:	681b      	ldr	r3, [r3, #0]
    b6d2:	2202      	movs	r2, #2
    b6d4:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b6d6:	2100      	movs	r1, #0
    b6d8:	2088      	movs	r0, #136	; 0x88
    b6da:	0140      	lsls	r0, r0, #5
    b6dc:	4b99      	ldr	r3, [pc, #612]	; (b944 <sd_mmc_check+0x348>)
    b6de:	4798      	blx	r3
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d0ab      	beq.n	b63c <sd_mmc_check+0x40>
    b6e4:	4d9e      	ldr	r5, [pc, #632]	; (b960 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b6e6:	4f97      	ldr	r7, [pc, #604]	; (b944 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    b6e8:	4e9b      	ldr	r6, [pc, #620]	; (b958 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b6ea:	2100      	movs	r1, #0
    b6ec:	489d      	ldr	r0, [pc, #628]	; (b964 <sd_mmc_check+0x368>)
    b6ee:	47b8      	blx	r7
    b6f0:	2800      	cmp	r0, #0
    b6f2:	d0a3      	beq.n	b63c <sd_mmc_check+0x40>
		resp = driver_get_response();
    b6f4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    b6f6:	07c3      	lsls	r3, r0, #31
    b6f8:	d57d      	bpl.n	b7f6 <sd_mmc_check+0x1fa>
    b6fa:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    b6fc:	2d00      	cmp	r5, #0
    b6fe:	d1f4      	bne.n	b6ea <sd_mmc_check+0xee>
    b700:	e79c      	b.n	b63c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    b702:	4b95      	ldr	r3, [pc, #596]	; (b958 <sd_mmc_check+0x35c>)
    b704:	4798      	blx	r3
    b706:	0043      	lsls	r3, r0, #1
    b708:	d505      	bpl.n	b716 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b70a:	4b8c      	ldr	r3, [pc, #560]	; (b93c <sd_mmc_check+0x340>)
    b70c:	681a      	ldr	r2, [r3, #0]
    b70e:	7ad3      	ldrb	r3, [r2, #11]
    b710:	2108      	movs	r1, #8
    b712:	430b      	orrs	r3, r1
    b714:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b716:	2100      	movs	r1, #0
    b718:	4893      	ldr	r0, [pc, #588]	; (b968 <sd_mmc_check+0x36c>)
    b71a:	4b8a      	ldr	r3, [pc, #552]	; (b944 <sd_mmc_check+0x348>)
    b71c:	4798      	blx	r3
    b71e:	2800      	cmp	r0, #0
    b720:	d08c      	beq.n	b63c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b722:	4b86      	ldr	r3, [pc, #536]	; (b93c <sd_mmc_check+0x340>)
    b724:	681b      	ldr	r3, [r3, #0]
    b726:	7adb      	ldrb	r3, [r3, #11]
    b728:	07da      	lsls	r2, r3, #31
    b72a:	d400      	bmi.n	b72e <sd_mmc_check+0x132>
    b72c:	e1a4      	b.n	ba78 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    b72e:	4b8f      	ldr	r3, [pc, #572]	; (b96c <sd_mmc_check+0x370>)
    b730:	4798      	blx	r3
    b732:	2800      	cmp	r0, #0
    b734:	d082      	beq.n	b63c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b736:	4b81      	ldr	r3, [pc, #516]	; (b93c <sd_mmc_check+0x340>)
    b738:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b73a:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b73c:	2107      	movs	r1, #7
    b73e:	4019      	ands	r1, r3
    b740:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b742:	488b      	ldr	r0, [pc, #556]	; (b970 <sd_mmc_check+0x374>)
    b744:	5808      	ldr	r0, [r1, r0]
    b746:	21fa      	movs	r1, #250	; 0xfa
    b748:	0089      	lsls	r1, r1, #2
    b74a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    b74c:	065b      	lsls	r3, r3, #25
    b74e:	0f1b      	lsrs	r3, r3, #28
    b750:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b752:	4888      	ldr	r0, [pc, #544]	; (b974 <sd_mmc_check+0x378>)
    b754:	581b      	ldr	r3, [r3, r0]
    b756:	434b      	muls	r3, r1
    b758:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    b75a:	7b93      	ldrb	r3, [r2, #14]
    b75c:	099b      	lsrs	r3, r3, #6
    b75e:	d000      	beq.n	b762 <sd_mmc_check+0x166>
    b760:	e13c      	b.n	b9dc <sd_mmc_check+0x3e0>
    b762:	7d91      	ldrb	r1, [r2, #22]
    b764:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b766:	7d53      	ldrb	r3, [r2, #21]
    b768:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b76a:	7d10      	ldrb	r0, [r2, #20]
    b76c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b76e:	4303      	orrs	r3, r0
    b770:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b772:	7e10      	ldrb	r0, [r2, #24]
    b774:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b776:	7dd1      	ldrb	r1, [r2, #23]
    b778:	0049      	lsls	r1, r1, #1
    b77a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    b77c:	051b      	lsls	r3, r3, #20
    b77e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b780:	3301      	adds	r3, #1
    b782:	2107      	movs	r1, #7
    b784:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b786:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b788:	408b      	lsls	r3, r1
    b78a:	7cd0      	ldrb	r0, [r2, #19]
    b78c:	210f      	movs	r1, #15
    b78e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b790:	408b      	lsls	r3, r1
				/ 1024;
    b792:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b794:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    b796:	8911      	ldrh	r1, [r2, #8]
    b798:	0409      	lsls	r1, r1, #16
    b79a:	4877      	ldr	r0, [pc, #476]	; (b978 <sd_mmc_check+0x37c>)
    b79c:	4b69      	ldr	r3, [pc, #420]	; (b944 <sd_mmc_check+0x348>)
    b79e:	4798      	blx	r3
    b7a0:	2800      	cmp	r0, #0
    b7a2:	d100      	bne.n	b7a6 <sd_mmc_check+0x1aa>
    b7a4:	e74a      	b.n	b63c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    b7a6:	2301      	movs	r3, #1
    b7a8:	9300      	str	r3, [sp, #0]
    b7aa:	2208      	movs	r2, #8
    b7ac:	2100      	movs	r1, #0
    b7ae:	4873      	ldr	r0, [pc, #460]	; (b97c <sd_mmc_check+0x380>)
    b7b0:	4d73      	ldr	r5, [pc, #460]	; (b980 <sd_mmc_check+0x384>)
    b7b2:	47a8      	blx	r5
    b7b4:	2800      	cmp	r0, #0
    b7b6:	d100      	bne.n	b7ba <sd_mmc_check+0x1be>
    b7b8:	e740      	b.n	b63c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    b7ba:	2101      	movs	r1, #1
    b7bc:	a806      	add	r0, sp, #24
    b7be:	4b71      	ldr	r3, [pc, #452]	; (b984 <sd_mmc_check+0x388>)
    b7c0:	4798      	blx	r3
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d100      	bne.n	b7c8 <sd_mmc_check+0x1cc>
    b7c6:	e739      	b.n	b63c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    b7c8:	4b6f      	ldr	r3, [pc, #444]	; (b988 <sd_mmc_check+0x38c>)
    b7ca:	4798      	blx	r3
    b7cc:	2800      	cmp	r0, #0
    b7ce:	d100      	bne.n	b7d2 <sd_mmc_check+0x1d6>
    b7d0:	e734      	b.n	b63c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b7d2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    b7d4:	781b      	ldrb	r3, [r3, #0]
    b7d6:	220f      	movs	r2, #15
    b7d8:	4013      	ands	r3, r2
    b7da:	2b01      	cmp	r3, #1
    b7dc:	d100      	bne.n	b7e0 <sd_mmc_check+0x1e4>
    b7de:	e119      	b.n	ba14 <sd_mmc_check+0x418>
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d100      	bne.n	b7e6 <sd_mmc_check+0x1ea>
    b7e4:	e109      	b.n	b9fa <sd_mmc_check+0x3fe>
    b7e6:	2b02      	cmp	r3, #2
    b7e8:	d100      	bne.n	b7ec <sd_mmc_check+0x1f0>
    b7ea:	e118      	b.n	ba1e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b7ec:	4b53      	ldr	r3, [pc, #332]	; (b93c <sd_mmc_check+0x340>)
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	2210      	movs	r2, #16
    b7f2:	731a      	strb	r2, [r3, #12]
    b7f4:	e105      	b.n	ba02 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b7f6:	2100      	movs	r1, #0
    b7f8:	4858      	ldr	r0, [pc, #352]	; (b95c <sd_mmc_check+0x360>)
    b7fa:	4b52      	ldr	r3, [pc, #328]	; (b944 <sd_mmc_check+0x348>)
    b7fc:	4798      	blx	r3
    b7fe:	2800      	cmp	r0, #0
    b800:	d100      	bne.n	b804 <sd_mmc_check+0x208>
    b802:	e71b      	b.n	b63c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    b804:	4b54      	ldr	r3, [pc, #336]	; (b958 <sd_mmc_check+0x35c>)
    b806:	4798      	blx	r3
    b808:	23c0      	movs	r3, #192	; 0xc0
    b80a:	05db      	lsls	r3, r3, #23
    b80c:	4018      	ands	r0, r3
    b80e:	2380      	movs	r3, #128	; 0x80
    b810:	05db      	lsls	r3, r3, #23
    b812:	4298      	cmp	r0, r3
    b814:	d105      	bne.n	b822 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b816:	4b49      	ldr	r3, [pc, #292]	; (b93c <sd_mmc_check+0x340>)
    b818:	681a      	ldr	r2, [r3, #0]
    b81a:	7ad1      	ldrb	r1, [r2, #11]
    b81c:	2308      	movs	r3, #8
    b81e:	430b      	orrs	r3, r1
    b820:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b822:	2100      	movs	r1, #0
    b824:	4850      	ldr	r0, [pc, #320]	; (b968 <sd_mmc_check+0x36c>)
    b826:	4b47      	ldr	r3, [pc, #284]	; (b944 <sd_mmc_check+0x348>)
    b828:	4798      	blx	r3
    b82a:	2800      	cmp	r0, #0
    b82c:	d100      	bne.n	b830 <sd_mmc_check+0x234>
    b82e:	e705      	b.n	b63c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    b830:	4b4e      	ldr	r3, [pc, #312]	; (b96c <sd_mmc_check+0x370>)
    b832:	4798      	blx	r3
    b834:	2800      	cmp	r0, #0
    b836:	d100      	bne.n	b83a <sd_mmc_check+0x23e>
    b838:	e700      	b.n	b63c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b83a:	4b40      	ldr	r3, [pc, #256]	; (b93c <sd_mmc_check+0x340>)
    b83c:	681a      	ldr	r2, [r3, #0]
    b83e:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    b840:	069b      	lsls	r3, r3, #26
    b842:	0f1b      	lsrs	r3, r3, #28
    b844:	2b02      	cmp	r3, #2
    b846:	d100      	bne.n	b84a <sd_mmc_check+0x24e>
    b848:	e0a8      	b.n	b99c <sd_mmc_check+0x3a0>
    b84a:	d907      	bls.n	b85c <sd_mmc_check+0x260>
    b84c:	2b03      	cmp	r3, #3
    b84e:	d100      	bne.n	b852 <sd_mmc_check+0x256>
    b850:	e0a7      	b.n	b9a2 <sd_mmc_check+0x3a6>
    b852:	2b04      	cmp	r3, #4
    b854:	d104      	bne.n	b860 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    b856:	2340      	movs	r3, #64	; 0x40
    b858:	7313      	strb	r3, [r2, #12]
    b85a:	e003      	b.n	b864 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b85c:	2b01      	cmp	r3, #1
    b85e:	d066      	beq.n	b92e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    b860:	2312      	movs	r3, #18
    b862:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b864:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    b866:	0659      	lsls	r1, r3, #25
    b868:	0f09      	lsrs	r1, r1, #28
    b86a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b86c:	2007      	movs	r0, #7
    b86e:	4003      	ands	r3, r0
    b870:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b872:	483f      	ldr	r0, [pc, #252]	; (b970 <sd_mmc_check+0x374>)
    b874:	5818      	ldr	r0, [r3, r0]
    b876:	23fa      	movs	r3, #250	; 0xfa
    b878:	009b      	lsls	r3, r3, #2
    b87a:	4343      	muls	r3, r0
    b87c:	4843      	ldr	r0, [pc, #268]	; (b98c <sd_mmc_check+0x390>)
    b87e:	5809      	ldr	r1, [r1, r0]
    b880:	434b      	muls	r3, r1
    b882:	6013      	str	r3, [r2, #0]
    b884:	7d91      	ldrb	r1, [r2, #22]
    b886:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b888:	7d53      	ldrb	r3, [r2, #21]
    b88a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b88c:	7d10      	ldrb	r0, [r2, #20]
    b88e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b890:	4303      	orrs	r3, r0
    b892:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    b894:	051b      	lsls	r3, r3, #20
    b896:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    b898:	493d      	ldr	r1, [pc, #244]	; (b990 <sd_mmc_check+0x394>)
    b89a:	428b      	cmp	r3, r1
    b89c:	d00f      	beq.n	b8be <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b89e:	7e10      	ldrb	r0, [r2, #24]
    b8a0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b8a2:	7dd1      	ldrb	r1, [r2, #23]
    b8a4:	0049      	lsls	r1, r1, #1
    b8a6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b8a8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    b8aa:	2007      	movs	r0, #7
    b8ac:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b8ae:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b8b0:	408b      	lsls	r3, r1
    b8b2:	7cd1      	ldrb	r1, [r2, #19]
    b8b4:	3008      	adds	r0, #8
    b8b6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b8b8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    b8ba:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b8bc:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    b8be:	7b13      	ldrb	r3, [r2, #12]
    b8c0:	2b3f      	cmp	r3, #63	; 0x3f
    b8c2:	d97b      	bls.n	b9bc <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    b8c4:	2100      	movs	r1, #0
    b8c6:	9100      	str	r1, [sp, #0]
    b8c8:	2301      	movs	r3, #1
    b8ca:	2280      	movs	r2, #128	; 0x80
    b8cc:	0092      	lsls	r2, r2, #2
    b8ce:	4831      	ldr	r0, [pc, #196]	; (b994 <sd_mmc_check+0x398>)
    b8d0:	4d2b      	ldr	r5, [pc, #172]	; (b980 <sd_mmc_check+0x384>)
    b8d2:	47a8      	blx	r5
    b8d4:	2800      	cmp	r0, #0
    b8d6:	d100      	bne.n	b8da <sd_mmc_check+0x2de>
    b8d8:	e6b0      	b.n	b63c <sd_mmc_check+0x40>
    b8da:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    b8dc:	4e2e      	ldr	r6, [pc, #184]	; (b998 <sd_mmc_check+0x39c>)
    b8de:	a805      	add	r0, sp, #20
    b8e0:	47b0      	blx	r6
    b8e2:	2800      	cmp	r0, #0
    b8e4:	d100      	bne.n	b8e8 <sd_mmc_check+0x2ec>
    b8e6:	e6a9      	b.n	b63c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    b8e8:	3501      	adds	r5, #1
    b8ea:	b2ad      	uxth	r5, r5
    b8ec:	2d32      	cmp	r5, #50	; 0x32
    b8ee:	d1f6      	bne.n	b8de <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    b8f0:	4b12      	ldr	r3, [pc, #72]	; (b93c <sd_mmc_check+0x340>)
    b8f2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b8f4:	7d8a      	ldrb	r2, [r1, #22]
    b8f6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b8f8:	7d4b      	ldrb	r3, [r1, #21]
    b8fa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b8fc:	7d09      	ldrb	r1, [r1, #20]
    b8fe:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b900:	430b      	orrs	r3, r1
    b902:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    b904:	051b      	lsls	r3, r3, #20
    b906:	0d1b      	lsrs	r3, r3, #20
    b908:	4a21      	ldr	r2, [pc, #132]	; (b990 <sd_mmc_check+0x394>)
    b90a:	4293      	cmp	r3, r2
    b90c:	d154      	bne.n	b9b8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    b90e:	4e22      	ldr	r6, [pc, #136]	; (b998 <sd_mmc_check+0x39c>)
    b910:	a806      	add	r0, sp, #24
    b912:	47b0      	blx	r6
    b914:	2800      	cmp	r0, #0
    b916:	d100      	bne.n	b91a <sd_mmc_check+0x31e>
    b918:	e690      	b.n	b63c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    b91a:	3501      	adds	r5, #1
    b91c:	b2ad      	uxth	r5, r5
    b91e:	2d35      	cmp	r5, #53	; 0x35
    b920:	d9f6      	bls.n	b910 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    b922:	4b06      	ldr	r3, [pc, #24]	; (b93c <sd_mmc_check+0x340>)
    b924:	681a      	ldr	r2, [r3, #0]
    b926:	9b06      	ldr	r3, [sp, #24]
    b928:	085b      	lsrs	r3, r3, #1
    b92a:	6053      	str	r3, [r2, #4]
    b92c:	e044      	b.n	b9b8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    b92e:	2314      	movs	r3, #20
    b930:	7313      	strb	r3, [r2, #12]
    b932:	e797      	b.n	b864 <sd_mmc_check+0x268>
    b934:	0000b4e1 	.word	0x0000b4e1
    b938:	0000b5c1 	.word	0x0000b5c1
    b93c:	2000033c 	.word	0x2000033c
    b940:	0000c1dd 	.word	0x0000c1dd
    b944:	0000c3a5 	.word	0x0000c3a5
    b948:	00005508 	.word	0x00005508
    b94c:	00001110 	.word	0x00001110
    b950:	0000b53d 	.word	0x0000b53d
    b954:	0000b4b9 	.word	0x0000b4b9
    b958:	0000c3bd 	.word	0x0000c3bd
    b95c:	0000053a 	.word	0x0000053a
    b960:	00001bef 	.word	0x00001bef
    b964:	00001101 	.word	0x00001101
    b968:	0000113b 	.word	0x0000113b
    b96c:	0000b575 	.word	0x0000b575
    b970:	00018d44 	.word	0x00018d44
    b974:	00018d60 	.word	0x00018d60
    b978:	00001137 	.word	0x00001137
    b97c:	00081133 	.word	0x00081133
    b980:	0000c215 	.word	0x0000c215
    b984:	0000c441 	.word	0x0000c441
    b988:	0000c4cd 	.word	0x0000c4cd
    b98c:	00018d04 	.word	0x00018d04
    b990:	00000fff 	.word	0x00000fff
    b994:	00081108 	.word	0x00081108
    b998:	0000c3c9 	.word	0x0000c3c9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    b99c:	2322      	movs	r3, #34	; 0x22
    b99e:	7313      	strb	r3, [r2, #12]
    b9a0:	e760      	b.n	b864 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    b9a2:	2330      	movs	r3, #48	; 0x30
    b9a4:	7313      	strb	r3, [r2, #12]
    b9a6:	e75d      	b.n	b864 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    b9a8:	a806      	add	r0, sp, #24
    b9aa:	4b36      	ldr	r3, [pc, #216]	; (ba84 <sd_mmc_check+0x488>)
    b9ac:	4798      	blx	r3
    b9ae:	2800      	cmp	r0, #0
    b9b0:	d100      	bne.n	b9b4 <sd_mmc_check+0x3b8>
    b9b2:	e643      	b.n	b63c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    b9b4:	3501      	adds	r5, #1
    b9b6:	b2ad      	uxth	r5, r5
    b9b8:	2d7f      	cmp	r5, #127	; 0x7f
    b9ba:	d9f5      	bls.n	b9a8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b9bc:	2180      	movs	r1, #128	; 0x80
    b9be:	0089      	lsls	r1, r1, #2
    b9c0:	4831      	ldr	r0, [pc, #196]	; (ba88 <sd_mmc_check+0x48c>)
    b9c2:	4b32      	ldr	r3, [pc, #200]	; (ba8c <sd_mmc_check+0x490>)
    b9c4:	4798      	blx	r3
    b9c6:	2800      	cmp	r0, #0
    b9c8:	d100      	bne.n	b9cc <sd_mmc_check+0x3d0>
    b9ca:	e637      	b.n	b63c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    b9cc:	4b30      	ldr	r3, [pc, #192]	; (ba90 <sd_mmc_check+0x494>)
    b9ce:	4798      	blx	r3
    b9d0:	2800      	cmp	r0, #0
    b9d2:	d100      	bne.n	b9d6 <sd_mmc_check+0x3da>
    b9d4:	e632      	b.n	b63c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b9d6:	4b2f      	ldr	r3, [pc, #188]	; (ba94 <sd_mmc_check+0x498>)
    b9d8:	4798      	blx	r3
    b9da:	e65e      	b.n	b69a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b9dc:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b9de:	7d93      	ldrb	r3, [r2, #22]
    b9e0:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b9e2:	7d51      	ldrb	r1, [r2, #21]
    b9e4:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b9e6:	430b      	orrs	r3, r1
    b9e8:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    b9ea:	029b      	lsls	r3, r3, #10
				* 512;
    b9ec:	085b      	lsrs	r3, r3, #1
    b9ee:	2180      	movs	r1, #128	; 0x80
    b9f0:	0089      	lsls	r1, r1, #2
    b9f2:	468c      	mov	ip, r1
    b9f4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    b9f6:	6053      	str	r3, [r2, #4]
    b9f8:	e6cd      	b.n	b796 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b9fa:	4b27      	ldr	r3, [pc, #156]	; (ba98 <sd_mmc_check+0x49c>)
    b9fc:	681b      	ldr	r3, [r3, #0]
    b9fe:	2210      	movs	r2, #16
    ba00:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    ba02:	4b25      	ldr	r3, [pc, #148]	; (ba98 <sd_mmc_check+0x49c>)
    ba04:	681b      	ldr	r3, [r3, #0]
    ba06:	7adb      	ldrb	r3, [r3, #11]
    ba08:	2209      	movs	r2, #9
    ba0a:	4013      	ands	r3, r2
    ba0c:	2b01      	cmp	r3, #1
    ba0e:	d000      	beq.n	ba12 <sd_mmc_check+0x416>
    ba10:	e638      	b.n	b684 <sd_mmc_check+0x88>
    ba12:	e630      	b.n	b676 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    ba14:	4b20      	ldr	r3, [pc, #128]	; (ba98 <sd_mmc_check+0x49c>)
    ba16:	681b      	ldr	r3, [r3, #0]
    ba18:	221a      	movs	r2, #26
    ba1a:	731a      	strb	r2, [r3, #12]
    ba1c:	e7f1      	b.n	ba02 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    ba1e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    ba20:	789b      	ldrb	r3, [r3, #2]
    ba22:	09db      	lsrs	r3, r3, #7
    ba24:	2b01      	cmp	r3, #1
    ba26:	d104      	bne.n	ba32 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    ba28:	4b1b      	ldr	r3, [pc, #108]	; (ba98 <sd_mmc_check+0x49c>)
    ba2a:	681b      	ldr	r3, [r3, #0]
    ba2c:	2230      	movs	r2, #48	; 0x30
    ba2e:	731a      	strb	r2, [r3, #12]
    ba30:	e7e7      	b.n	ba02 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    ba32:	4b19      	ldr	r3, [pc, #100]	; (ba98 <sd_mmc_check+0x49c>)
    ba34:	681b      	ldr	r3, [r3, #0]
    ba36:	2220      	movs	r2, #32
    ba38:	731a      	strb	r2, [r3, #12]
    ba3a:	e7e2      	b.n	ba02 <sd_mmc_check+0x406>
	*v2 = 0;
    ba3c:	2600      	movs	r6, #0
    ba3e:	e60d      	b.n	b65c <sd_mmc_check+0x60>
    ba40:	1e73      	subs	r3, r6, #1
    ba42:	419e      	sbcs	r6, r3
    ba44:	07b3      	lsls	r3, r6, #30
    ba46:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    ba48:	4d14      	ldr	r5, [pc, #80]	; (ba9c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    ba4a:	4f10      	ldr	r7, [pc, #64]	; (ba8c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    ba4c:	46b8      	mov	r8, r7
		resp = driver_get_response();
    ba4e:	4e14      	ldr	r6, [pc, #80]	; (baa0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    ba50:	2100      	movs	r1, #0
    ba52:	4814      	ldr	r0, [pc, #80]	; (baa4 <sd_mmc_check+0x4a8>)
    ba54:	47b8      	blx	r7
    ba56:	2800      	cmp	r0, #0
    ba58:	d100      	bne.n	ba5c <sd_mmc_check+0x460>
    ba5a:	e638      	b.n	b6ce <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    ba5c:	9903      	ldr	r1, [sp, #12]
    ba5e:	4812      	ldr	r0, [pc, #72]	; (baa8 <sd_mmc_check+0x4ac>)
    ba60:	47c0      	blx	r8
    ba62:	2800      	cmp	r0, #0
    ba64:	d100      	bne.n	ba68 <sd_mmc_check+0x46c>
    ba66:	e632      	b.n	b6ce <sd_mmc_check+0xd2>
		resp = driver_get_response();
    ba68:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    ba6a:	07c3      	lsls	r3, r0, #31
    ba6c:	d400      	bmi.n	ba70 <sd_mmc_check+0x474>
    ba6e:	e628      	b.n	b6c2 <sd_mmc_check+0xc6>
    ba70:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    ba72:	2d00      	cmp	r5, #0
    ba74:	d1ec      	bne.n	ba50 <sd_mmc_check+0x454>
    ba76:	e62a      	b.n	b6ce <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    ba78:	2209      	movs	r2, #9
    ba7a:	4013      	ands	r3, r2
    ba7c:	2b01      	cmp	r3, #1
    ba7e:	d000      	beq.n	ba82 <sd_mmc_check+0x486>
    ba80:	e609      	b.n	b696 <sd_mmc_check+0x9a>
    ba82:	e5f8      	b.n	b676 <sd_mmc_check+0x7a>
    ba84:	0000c3c9 	.word	0x0000c3c9
    ba88:	00001110 	.word	0x00001110
    ba8c:	0000c3a5 	.word	0x0000c3a5
    ba90:	0000b53d 	.word	0x0000b53d
    ba94:	0000b4b9 	.word	0x0000b4b9
    ba98:	2000033c 	.word	0x2000033c
    ba9c:	00001bef 	.word	0x00001bef
    baa0:	0000c3bd 	.word	0x0000c3bd
    baa4:	00001137 	.word	0x00001137
    baa8:	00001129 	.word	0x00001129

0000baac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    baac:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    baae:	4b06      	ldr	r3, [pc, #24]	; (bac8 <sd_mmc_get_type+0x1c>)
    bab0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    bab2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bab4:	2800      	cmp	r0, #0
    bab6:	d001      	beq.n	babc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    bab8:	0018      	movs	r0, r3
    baba:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    babc:	4b03      	ldr	r3, [pc, #12]	; (bacc <sd_mmc_get_type+0x20>)
    babe:	4798      	blx	r3
	return sd_mmc_card->type;
    bac0:	4b03      	ldr	r3, [pc, #12]	; (bad0 <sd_mmc_get_type+0x24>)
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	7adb      	ldrb	r3, [r3, #11]
    bac6:	e7f7      	b.n	bab8 <sd_mmc_get_type+0xc>
    bac8:	0000b4e1 	.word	0x0000b4e1
    bacc:	0000b5c1 	.word	0x0000b5c1
    bad0:	2000033c 	.word	0x2000033c

0000bad4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    bad4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bad6:	4b06      	ldr	r3, [pc, #24]	; (baf0 <sd_mmc_get_capacity+0x1c>)
    bad8:	4798      	blx	r3
		return 0;
    bada:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    badc:	2800      	cmp	r0, #0
    bade:	d001      	beq.n	bae4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    bae0:	0018      	movs	r0, r3
    bae2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bae4:	4b03      	ldr	r3, [pc, #12]	; (baf4 <sd_mmc_get_capacity+0x20>)
    bae6:	4798      	blx	r3
	return sd_mmc_card->capacity;
    bae8:	4b03      	ldr	r3, [pc, #12]	; (baf8 <sd_mmc_get_capacity+0x24>)
    baea:	681b      	ldr	r3, [r3, #0]
    baec:	685b      	ldr	r3, [r3, #4]
    baee:	e7f7      	b.n	bae0 <sd_mmc_get_capacity+0xc>
    baf0:	0000b4e1 	.word	0x0000b4e1
    baf4:	0000b5c1 	.word	0x0000b5c1
    baf8:	2000033c 	.word	0x2000033c

0000bafc <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    bafc:	2000      	movs	r0, #0
    bafe:	4770      	bx	lr

0000bb00 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bb00:	b570      	push	{r4, r5, r6, lr}
    bb02:	b082      	sub	sp, #8
    bb04:	000e      	movs	r6, r1
    bb06:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bb08:	4b16      	ldr	r3, [pc, #88]	; (bb64 <sd_mmc_init_read_blocks+0x64>)
    bb0a:	4798      	blx	r3
    bb0c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bb0e:	d002      	beq.n	bb16 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    bb10:	0020      	movs	r0, r4
    bb12:	b002      	add	sp, #8
    bb14:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    bb16:	4b14      	ldr	r3, [pc, #80]	; (bb68 <sd_mmc_init_read_blocks+0x68>)
    bb18:	4798      	blx	r3
    bb1a:	2800      	cmp	r0, #0
    bb1c:	d017      	beq.n	bb4e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    bb1e:	2d01      	cmp	r5, #1
    bb20:	d919      	bls.n	bb56 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    bb22:	4812      	ldr	r0, [pc, #72]	; (bb6c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bb24:	4b12      	ldr	r3, [pc, #72]	; (bb70 <sd_mmc_init_read_blocks+0x70>)
    bb26:	681b      	ldr	r3, [r3, #0]
    bb28:	7adb      	ldrb	r3, [r3, #11]
    bb2a:	071b      	lsls	r3, r3, #28
    bb2c:	d400      	bmi.n	bb30 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    bb2e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bb30:	2301      	movs	r3, #1
    bb32:	9300      	str	r3, [sp, #0]
    bb34:	002b      	movs	r3, r5
    bb36:	2280      	movs	r2, #128	; 0x80
    bb38:	0092      	lsls	r2, r2, #2
    bb3a:	0031      	movs	r1, r6
    bb3c:	4e0d      	ldr	r6, [pc, #52]	; (bb74 <sd_mmc_init_read_blocks+0x74>)
    bb3e:	47b0      	blx	r6
    bb40:	2800      	cmp	r0, #0
    bb42:	d00a      	beq.n	bb5a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    bb44:	4b0c      	ldr	r3, [pc, #48]	; (bb78 <sd_mmc_init_read_blocks+0x78>)
    bb46:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bb48:	4b0c      	ldr	r3, [pc, #48]	; (bb7c <sd_mmc_init_read_blocks+0x7c>)
    bb4a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    bb4c:	e7e0      	b.n	bb10 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    bb4e:	4b0c      	ldr	r3, [pc, #48]	; (bb80 <sd_mmc_init_read_blocks+0x80>)
    bb50:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bb52:	3405      	adds	r4, #5
    bb54:	e7dc      	b.n	bb10 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    bb56:	480b      	ldr	r0, [pc, #44]	; (bb84 <sd_mmc_init_read_blocks+0x84>)
    bb58:	e7e4      	b.n	bb24 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    bb5a:	4b09      	ldr	r3, [pc, #36]	; (bb80 <sd_mmc_init_read_blocks+0x80>)
    bb5c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bb5e:	2405      	movs	r4, #5
    bb60:	e7d6      	b.n	bb10 <sd_mmc_init_read_blocks+0x10>
    bb62:	46c0      	nop			; (mov r8, r8)
    bb64:	0000b4e1 	.word	0x0000b4e1
    bb68:	0000b53d 	.word	0x0000b53d
    bb6c:	00101112 	.word	0x00101112
    bb70:	2000033c 	.word	0x2000033c
    bb74:	0000c215 	.word	0x0000c215
    bb78:	20000360 	.word	0x20000360
    bb7c:	20000362 	.word	0x20000362
    bb80:	0000b5c1 	.word	0x0000b5c1
    bb84:	00081111 	.word	0x00081111

0000bb88 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    bb88:	b510      	push	{r4, lr}
    bb8a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    bb8c:	4b07      	ldr	r3, [pc, #28]	; (bbac <sd_mmc_start_read_blocks+0x24>)
    bb8e:	4798      	blx	r3
    bb90:	2800      	cmp	r0, #0
    bb92:	d104      	bne.n	bb9e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bb94:	2200      	movs	r2, #0
    bb96:	4b06      	ldr	r3, [pc, #24]	; (bbb0 <sd_mmc_start_read_blocks+0x28>)
    bb98:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bb9a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bb9c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bb9e:	4a04      	ldr	r2, [pc, #16]	; (bbb0 <sd_mmc_start_read_blocks+0x28>)
    bba0:	8813      	ldrh	r3, [r2, #0]
    bba2:	1b1c      	subs	r4, r3, r4
    bba4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bba6:	2000      	movs	r0, #0
    bba8:	e7f8      	b.n	bb9c <sd_mmc_start_read_blocks+0x14>
    bbaa:	46c0      	nop			; (mov r8, r8)
    bbac:	0000c441 	.word	0x0000c441
    bbb0:	20000360 	.word	0x20000360

0000bbb4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    bbb4:	b510      	push	{r4, lr}
    bbb6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    bbb8:	4b14      	ldr	r3, [pc, #80]	; (bc0c <sd_mmc_wait_end_of_read_blocks+0x58>)
    bbba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bbbc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    bbbe:	2800      	cmp	r0, #0
    bbc0:	d101      	bne.n	bbc6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bbc2:	0018      	movs	r0, r3
    bbc4:	bd10      	pop	{r4, pc}
	if (abort) {
    bbc6:	2c00      	cmp	r4, #0
    bbc8:	d010      	beq.n	bbec <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    bbca:	2200      	movs	r2, #0
    bbcc:	4b10      	ldr	r3, [pc, #64]	; (bc10 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    bbce:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    bbd0:	4b10      	ldr	r3, [pc, #64]	; (bc14 <sd_mmc_wait_end_of_read_blocks+0x60>)
    bbd2:	881b      	ldrh	r3, [r3, #0]
    bbd4:	2b01      	cmp	r3, #1
    bbd6:	d00f      	beq.n	bbf8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    bbd8:	2100      	movs	r1, #0
    bbda:	480f      	ldr	r0, [pc, #60]	; (bc18 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bbdc:	4b0f      	ldr	r3, [pc, #60]	; (bc1c <sd_mmc_wait_end_of_read_blocks+0x68>)
    bbde:	4798      	blx	r3
    bbe0:	2800      	cmp	r0, #0
    bbe2:	d00d      	beq.n	bc00 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    bbe4:	4b0e      	ldr	r3, [pc, #56]	; (bc20 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bbe6:	4798      	blx	r3
	return SD_MMC_OK;
    bbe8:	2300      	movs	r3, #0
    bbea:	e7ea      	b.n	bbc2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bbec:	4b08      	ldr	r3, [pc, #32]	; (bc10 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    bbee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bbf0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bbf2:	2a00      	cmp	r2, #0
    bbf4:	d0ec      	beq.n	bbd0 <sd_mmc_wait_end_of_read_blocks+0x1c>
    bbf6:	e7e4      	b.n	bbc2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    bbf8:	4b09      	ldr	r3, [pc, #36]	; (bc20 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bbfa:	4798      	blx	r3
		return SD_MMC_OK;
    bbfc:	2300      	movs	r3, #0
    bbfe:	e7e0      	b.n	bbc2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    bc00:	2100      	movs	r1, #0
    bc02:	4805      	ldr	r0, [pc, #20]	; (bc18 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bc04:	4b05      	ldr	r3, [pc, #20]	; (bc1c <sd_mmc_wait_end_of_read_blocks+0x68>)
    bc06:	4798      	blx	r3
    bc08:	e7ec      	b.n	bbe4 <sd_mmc_wait_end_of_read_blocks+0x30>
    bc0a:	46c0      	nop			; (mov r8, r8)
    bc0c:	0000c4cd 	.word	0x0000c4cd
    bc10:	20000360 	.word	0x20000360
    bc14:	20000362 	.word	0x20000362
    bc18:	0000310c 	.word	0x0000310c
    bc1c:	0000c3a5 	.word	0x0000c3a5
    bc20:	0000b5c1 	.word	0x0000b5c1

0000bc24 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bc24:	b570      	push	{r4, r5, r6, lr}
    bc26:	b082      	sub	sp, #8
    bc28:	000e      	movs	r6, r1
    bc2a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bc2c:	4b11      	ldr	r3, [pc, #68]	; (bc74 <sd_mmc_init_write_blocks+0x50>)
    bc2e:	4798      	blx	r3
    bc30:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bc32:	d116      	bne.n	bc62 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    bc34:	2d01      	cmp	r5, #1
    bc36:	d917      	bls.n	bc68 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    bc38:	480f      	ldr	r0, [pc, #60]	; (bc78 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bc3a:	4b10      	ldr	r3, [pc, #64]	; (bc7c <sd_mmc_init_write_blocks+0x58>)
    bc3c:	681b      	ldr	r3, [r3, #0]
    bc3e:	7adb      	ldrb	r3, [r3, #11]
    bc40:	071b      	lsls	r3, r3, #28
    bc42:	d400      	bmi.n	bc46 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bc44:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bc46:	2301      	movs	r3, #1
    bc48:	9300      	str	r3, [sp, #0]
    bc4a:	002b      	movs	r3, r5
    bc4c:	2280      	movs	r2, #128	; 0x80
    bc4e:	0092      	lsls	r2, r2, #2
    bc50:	0031      	movs	r1, r6
    bc52:	4e0b      	ldr	r6, [pc, #44]	; (bc80 <sd_mmc_init_write_blocks+0x5c>)
    bc54:	47b0      	blx	r6
    bc56:	2800      	cmp	r0, #0
    bc58:	d008      	beq.n	bc6c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bc5a:	4b0a      	ldr	r3, [pc, #40]	; (bc84 <sd_mmc_init_write_blocks+0x60>)
    bc5c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bc5e:	4b0a      	ldr	r3, [pc, #40]	; (bc88 <sd_mmc_init_write_blocks+0x64>)
    bc60:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    bc62:	0020      	movs	r0, r4
    bc64:	b002      	add	sp, #8
    bc66:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    bc68:	4808      	ldr	r0, [pc, #32]	; (bc8c <sd_mmc_init_write_blocks+0x68>)
    bc6a:	e7e6      	b.n	bc3a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    bc6c:	4b08      	ldr	r3, [pc, #32]	; (bc90 <sd_mmc_init_write_blocks+0x6c>)
    bc6e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bc70:	2405      	movs	r4, #5
    bc72:	e7f6      	b.n	bc62 <sd_mmc_init_write_blocks+0x3e>
    bc74:	0000b4e1 	.word	0x0000b4e1
    bc78:	00109119 	.word	0x00109119
    bc7c:	2000033c 	.word	0x2000033c
    bc80:	0000c215 	.word	0x0000c215
    bc84:	20000360 	.word	0x20000360
    bc88:	20000362 	.word	0x20000362
    bc8c:	00089118 	.word	0x00089118
    bc90:	0000b5c1 	.word	0x0000b5c1

0000bc94 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    bc94:	b510      	push	{r4, lr}
    bc96:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    bc98:	4b07      	ldr	r3, [pc, #28]	; (bcb8 <sd_mmc_start_write_blocks+0x24>)
    bc9a:	4798      	blx	r3
    bc9c:	2800      	cmp	r0, #0
    bc9e:	d104      	bne.n	bcaa <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bca0:	2200      	movs	r2, #0
    bca2:	4b06      	ldr	r3, [pc, #24]	; (bcbc <sd_mmc_start_write_blocks+0x28>)
    bca4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bca6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bca8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bcaa:	4a04      	ldr	r2, [pc, #16]	; (bcbc <sd_mmc_start_write_blocks+0x28>)
    bcac:	8813      	ldrh	r3, [r2, #0]
    bcae:	1b1c      	subs	r4, r3, r4
    bcb0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bcb2:	2000      	movs	r0, #0
    bcb4:	e7f8      	b.n	bca8 <sd_mmc_start_write_blocks+0x14>
    bcb6:	46c0      	nop			; (mov r8, r8)
    bcb8:	0000c4d1 	.word	0x0000c4d1
    bcbc:	20000360 	.word	0x20000360

0000bcc0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    bcc0:	b510      	push	{r4, lr}
    bcc2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    bcc4:	4b0e      	ldr	r3, [pc, #56]	; (bd00 <sd_mmc_wait_end_of_write_blocks+0x40>)
    bcc6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bcc8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    bcca:	2800      	cmp	r0, #0
    bccc:	d101      	bne.n	bcd2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bcce:	0018      	movs	r0, r3
    bcd0:	bd10      	pop	{r4, pc}
	if (abort) {
    bcd2:	2c00      	cmp	r4, #0
    bcd4:	d00a      	beq.n	bcec <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    bcd6:	2200      	movs	r2, #0
    bcd8:	4b0a      	ldr	r3, [pc, #40]	; (bd04 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bcda:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    bcdc:	4b0a      	ldr	r3, [pc, #40]	; (bd08 <sd_mmc_wait_end_of_write_blocks+0x48>)
    bcde:	881b      	ldrh	r3, [r3, #0]
    bce0:	2b01      	cmp	r3, #1
    bce2:	d009      	beq.n	bcf8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    bce4:	4b09      	ldr	r3, [pc, #36]	; (bd0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bce6:	4798      	blx	r3
	return SD_MMC_OK;
    bce8:	2300      	movs	r3, #0
    bcea:	e7f0      	b.n	bcce <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bcec:	4b05      	ldr	r3, [pc, #20]	; (bd04 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bcee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bcf0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bcf2:	2a00      	cmp	r2, #0
    bcf4:	d0f2      	beq.n	bcdc <sd_mmc_wait_end_of_write_blocks+0x1c>
    bcf6:	e7ea      	b.n	bcce <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    bcf8:	4b04      	ldr	r3, [pc, #16]	; (bd0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bcfa:	4798      	blx	r3
		return SD_MMC_OK;
    bcfc:	2300      	movs	r3, #0
    bcfe:	e7e6      	b.n	bcce <sd_mmc_wait_end_of_write_blocks+0xe>
    bd00:	0000c551 	.word	0x0000c551
    bd04:	20000360 	.word	0x20000360
    bd08:	20000362 	.word	0x20000362
    bd0c:	0000b5c1 	.word	0x0000b5c1

0000bd10 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    bd10:	b510      	push	{r4, lr}
    bd12:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    bd14:	4b0f      	ldr	r3, [pc, #60]	; (bd54 <sd_mmc_test_unit_ready+0x44>)
    bd16:	4798      	blx	r3
    bd18:	2801      	cmp	r0, #1
    bd1a:	d019      	beq.n	bd50 <sd_mmc_test_unit_ready+0x40>
    bd1c:	2800      	cmp	r0, #0
    bd1e:	d003      	beq.n	bd28 <sd_mmc_test_unit_ready+0x18>
    bd20:	2802      	cmp	r0, #2
    bd22:	d010      	beq.n	bd46 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    bd24:	2001      	movs	r0, #1
	}
}
    bd26:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    bd28:	4b0b      	ldr	r3, [pc, #44]	; (bd58 <sd_mmc_test_unit_ready+0x48>)
    bd2a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    bd2c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    bd2e:	2b00      	cmp	r3, #0
    bd30:	d1f9      	bne.n	bd26 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    bd32:	0020      	movs	r0, r4
    bd34:	4b09      	ldr	r3, [pc, #36]	; (bd5c <sd_mmc_test_unit_ready+0x4c>)
    bd36:	4798      	blx	r3
    bd38:	0003      	movs	r3, r0
    bd3a:	2003      	movs	r0, #3
    bd3c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    bd3e:	4243      	negs	r3, r0
    bd40:	4158      	adcs	r0, r3
    bd42:	0040      	lsls	r0, r0, #1
    bd44:	e7ef      	b.n	bd26 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    bd46:	2200      	movs	r2, #0
    bd48:	4b03      	ldr	r3, [pc, #12]	; (bd58 <sd_mmc_test_unit_ready+0x48>)
    bd4a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    bd4c:	2002      	movs	r0, #2
    bd4e:	e7ea      	b.n	bd26 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    bd50:	2003      	movs	r0, #3
    bd52:	e7e8      	b.n	bd26 <sd_mmc_test_unit_ready+0x16>
    bd54:	0000b5fd 	.word	0x0000b5fd
    bd58:	20000368 	.word	0x20000368
    bd5c:	0000baad 	.word	0x0000baad

0000bd60 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    bd60:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    bd62:	2000      	movs	r0, #0
    bd64:	4b01      	ldr	r3, [pc, #4]	; (bd6c <sd_mmc_test_unit_ready_0+0xc>)
    bd66:	4798      	blx	r3
}
    bd68:	bd10      	pop	{r4, pc}
    bd6a:	46c0      	nop			; (mov r8, r8)
    bd6c:	0000bd11 	.word	0x0000bd11

0000bd70 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    bd70:	b570      	push	{r4, r5, r6, lr}
    bd72:	0004      	movs	r4, r0
    bd74:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    bd76:	4b04      	ldr	r3, [pc, #16]	; (bd88 <sd_mmc_read_capacity+0x18>)
    bd78:	4798      	blx	r3
    bd7a:	0040      	lsls	r0, r0, #1
    bd7c:	3801      	subs	r0, #1
    bd7e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    bd80:	0020      	movs	r0, r4
    bd82:	4b02      	ldr	r3, [pc, #8]	; (bd8c <sd_mmc_read_capacity+0x1c>)
    bd84:	4798      	blx	r3
}
    bd86:	bd70      	pop	{r4, r5, r6, pc}
    bd88:	0000bad5 	.word	0x0000bad5
    bd8c:	0000bd11 	.word	0x0000bd11

0000bd90 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    bd90:	b510      	push	{r4, lr}
    bd92:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    bd94:	2000      	movs	r0, #0
    bd96:	4b01      	ldr	r3, [pc, #4]	; (bd9c <sd_mmc_read_capacity_0+0xc>)
    bd98:	4798      	blx	r3
}
    bd9a:	bd10      	pop	{r4, pc}
    bd9c:	0000bd71 	.word	0x0000bd71

0000bda0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    bda0:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    bda2:	2000      	movs	r0, #0
    bda4:	4b01      	ldr	r3, [pc, #4]	; (bdac <sd_mmc_wr_protect_0+0xc>)
    bda6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    bda8:	bd10      	pop	{r4, pc}
    bdaa:	46c0      	nop			; (mov r8, r8)
    bdac:	0000bafd 	.word	0x0000bafd

0000bdb0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    bdb0:	b510      	push	{r4, lr}
    bdb2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    bdb4:	2201      	movs	r2, #1
    bdb6:	4b0c      	ldr	r3, [pc, #48]	; (bde8 <sd_mmc_mem_2_ram+0x38>)
    bdb8:	4798      	blx	r3
    bdba:	2800      	cmp	r0, #0
    bdbc:	d004      	beq.n	bdc8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    bdbe:	3802      	subs	r0, #2
    bdc0:	4243      	negs	r3, r0
    bdc2:	4158      	adcs	r0, r3
    bdc4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    bdc6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bdc8:	2101      	movs	r1, #1
    bdca:	0020      	movs	r0, r4
    bdcc:	4b07      	ldr	r3, [pc, #28]	; (bdec <sd_mmc_mem_2_ram+0x3c>)
    bdce:	4798      	blx	r3
    bdd0:	0003      	movs	r3, r0
		return CTRL_FAIL;
    bdd2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d1f6      	bne.n	bdc6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    bdd8:	2000      	movs	r0, #0
    bdda:	4b05      	ldr	r3, [pc, #20]	; (bdf0 <sd_mmc_mem_2_ram+0x40>)
    bddc:	4798      	blx	r3
    bdde:	1e43      	subs	r3, r0, #1
    bde0:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    bde2:	b2c0      	uxtb	r0, r0
    bde4:	e7ef      	b.n	bdc6 <sd_mmc_mem_2_ram+0x16>
    bde6:	46c0      	nop			; (mov r8, r8)
    bde8:	0000bb01 	.word	0x0000bb01
    bdec:	0000bb89 	.word	0x0000bb89
    bdf0:	0000bbb5 	.word	0x0000bbb5

0000bdf4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    bdf4:	b510      	push	{r4, lr}
    bdf6:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    bdf8:	0001      	movs	r1, r0
    bdfa:	2000      	movs	r0, #0
    bdfc:	4b01      	ldr	r3, [pc, #4]	; (be04 <sd_mmc_mem_2_ram_0+0x10>)
    bdfe:	4798      	blx	r3
}
    be00:	bd10      	pop	{r4, pc}
    be02:	46c0      	nop			; (mov r8, r8)
    be04:	0000bdb1 	.word	0x0000bdb1

0000be08 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    be08:	b510      	push	{r4, lr}
    be0a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    be0c:	2201      	movs	r2, #1
    be0e:	4b0c      	ldr	r3, [pc, #48]	; (be40 <sd_mmc_ram_2_mem+0x38>)
    be10:	4798      	blx	r3
    be12:	2800      	cmp	r0, #0
    be14:	d004      	beq.n	be20 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    be16:	3802      	subs	r0, #2
    be18:	4243      	negs	r3, r0
    be1a:	4158      	adcs	r0, r3
    be1c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    be1e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    be20:	2101      	movs	r1, #1
    be22:	0020      	movs	r0, r4
    be24:	4b07      	ldr	r3, [pc, #28]	; (be44 <sd_mmc_ram_2_mem+0x3c>)
    be26:	4798      	blx	r3
    be28:	0003      	movs	r3, r0
		return CTRL_FAIL;
    be2a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    be2c:	2b00      	cmp	r3, #0
    be2e:	d1f6      	bne.n	be1e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    be30:	2000      	movs	r0, #0
    be32:	4b05      	ldr	r3, [pc, #20]	; (be48 <sd_mmc_ram_2_mem+0x40>)
    be34:	4798      	blx	r3
    be36:	1e43      	subs	r3, r0, #1
    be38:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    be3a:	b2c0      	uxtb	r0, r0
    be3c:	e7ef      	b.n	be1e <sd_mmc_ram_2_mem+0x16>
    be3e:	46c0      	nop			; (mov r8, r8)
    be40:	0000bc25 	.word	0x0000bc25
    be44:	0000bc95 	.word	0x0000bc95
    be48:	0000bcc1 	.word	0x0000bcc1

0000be4c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    be4c:	b510      	push	{r4, lr}
    be4e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    be50:	0001      	movs	r1, r0
    be52:	2000      	movs	r0, #0
    be54:	4b01      	ldr	r3, [pc, #4]	; (be5c <sd_mmc_ram_2_mem_0+0x10>)
    be56:	4798      	blx	r3
}
    be58:	bd10      	pop	{r4, pc}
    be5a:	46c0      	nop			; (mov r8, r8)
    be5c:	0000be09 	.word	0x0000be09

0000be60 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    be60:	b500      	push	{lr}
    be62:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    be64:	466b      	mov	r3, sp
    be66:	1dd9      	adds	r1, r3, #7
    be68:	23ff      	movs	r3, #255	; 0xff
    be6a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    be6c:	2201      	movs	r2, #1
    be6e:	480b      	ldr	r0, [pc, #44]	; (be9c <sd_mmc_spi_start_write_block+0x3c>)
    be70:	4b0b      	ldr	r3, [pc, #44]	; (bea0 <sd_mmc_spi_start_write_block+0x40>)
    be72:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    be74:	4b0b      	ldr	r3, [pc, #44]	; (bea4 <sd_mmc_spi_start_write_block+0x44>)
    be76:	881b      	ldrh	r3, [r3, #0]
    be78:	2b01      	cmp	r3, #1
    be7a:	d00a      	beq.n	be92 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    be7c:	22fc      	movs	r2, #252	; 0xfc
    be7e:	466b      	mov	r3, sp
    be80:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    be82:	2201      	movs	r2, #1
    be84:	466b      	mov	r3, sp
    be86:	1d99      	adds	r1, r3, #6
    be88:	4804      	ldr	r0, [pc, #16]	; (be9c <sd_mmc_spi_start_write_block+0x3c>)
    be8a:	4b05      	ldr	r3, [pc, #20]	; (bea0 <sd_mmc_spi_start_write_block+0x40>)
    be8c:	4798      	blx	r3
}
    be8e:	b003      	add	sp, #12
    be90:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    be92:	22fe      	movs	r2, #254	; 0xfe
    be94:	466b      	mov	r3, sp
    be96:	719a      	strb	r2, [r3, #6]
    be98:	e7f3      	b.n	be82 <sd_mmc_spi_start_write_block+0x22>
    be9a:	46c0      	nop			; (mov r8, r8)
    be9c:	2000036c 	.word	0x2000036c
    bea0:	000105a1 	.word	0x000105a1
    bea4:	200003b0 	.word	0x200003b0

0000bea8 <sd_mmc_spi_wait_busy>:
{
    bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    beaa:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    beac:	466b      	mov	r3, sp
    beae:	1ddc      	adds	r4, r3, #7
    beb0:	23ff      	movs	r3, #255	; 0xff
    beb2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    beb4:	4e12      	ldr	r6, [pc, #72]	; (bf00 <sd_mmc_spi_wait_busy+0x58>)
    beb6:	2201      	movs	r2, #1
    beb8:	0021      	movs	r1, r4
    beba:	0030      	movs	r0, r6
    bebc:	4d11      	ldr	r5, [pc, #68]	; (bf04 <sd_mmc_spi_wait_busy+0x5c>)
    bebe:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bec0:	23ff      	movs	r3, #255	; 0xff
    bec2:	2201      	movs	r2, #1
    bec4:	0021      	movs	r1, r4
    bec6:	0030      	movs	r0, r6
    bec8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    beca:	23ff      	movs	r3, #255	; 0xff
    becc:	2201      	movs	r2, #1
    bece:	0021      	movs	r1, r4
    bed0:	0030      	movs	r0, r6
    bed2:	47a8      	blx	r5
    bed4:	4c0c      	ldr	r4, [pc, #48]	; (bf08 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    bed6:	466b      	mov	r3, sp
    bed8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    beda:	4e09      	ldr	r6, [pc, #36]	; (bf00 <sd_mmc_spi_wait_busy+0x58>)
    bedc:	4f09      	ldr	r7, [pc, #36]	; (bf04 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    bede:	782b      	ldrb	r3, [r5, #0]
    bee0:	2bff      	cmp	r3, #255	; 0xff
    bee2:	d009      	beq.n	bef8 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bee4:	23ff      	movs	r3, #255	; 0xff
    bee6:	2201      	movs	r2, #1
    bee8:	0029      	movs	r1, r5
    beea:	0030      	movs	r0, r6
    beec:	47b8      	blx	r7
    beee:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    bef0:	2c00      	cmp	r4, #0
    bef2:	d1f4      	bne.n	bede <sd_mmc_spi_wait_busy+0x36>
			return false;
    bef4:	2000      	movs	r0, #0
    bef6:	e000      	b.n	befa <sd_mmc_spi_wait_busy+0x52>
	return true;
    bef8:	2001      	movs	r0, #1
}
    befa:	b003      	add	sp, #12
    befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	2000036c 	.word	0x2000036c
    bf04:	000103d9 	.word	0x000103d9
    bf08:	00030d40 	.word	0x00030d40

0000bf0c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    bf0c:	b570      	push	{r4, r5, r6, lr}
    bf0e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    bf10:	4b14      	ldr	r3, [pc, #80]	; (bf64 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    bf12:	881c      	ldrh	r4, [r3, #0]
    bf14:	2c01      	cmp	r4, #1
    bf16:	d023      	beq.n	bf60 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    bf18:	4b13      	ldr	r3, [pc, #76]	; (bf68 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    bf1a:	8819      	ldrh	r1, [r3, #0]
    bf1c:	4b13      	ldr	r3, [pc, #76]	; (bf6c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    bf1e:	6818      	ldr	r0, [r3, #0]
    bf20:	4b13      	ldr	r3, [pc, #76]	; (bf70 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    bf22:	4798      	blx	r3
		return true; // It is not the End of multi write
    bf24:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    bf26:	4284      	cmp	r4, r0
    bf28:	d902      	bls.n	bf30 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    bf2a:	0018      	movs	r0, r3
    bf2c:	b002      	add	sp, #8
    bf2e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    bf30:	466b      	mov	r3, sp
    bf32:	1ddc      	adds	r4, r3, #7
    bf34:	23ff      	movs	r3, #255	; 0xff
    bf36:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    bf38:	4e0e      	ldr	r6, [pc, #56]	; (bf74 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    bf3a:	2201      	movs	r2, #1
    bf3c:	0021      	movs	r1, r4
    bf3e:	0030      	movs	r0, r6
    bf40:	4d0d      	ldr	r5, [pc, #52]	; (bf78 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    bf42:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    bf44:	23fd      	movs	r3, #253	; 0xfd
    bf46:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    bf48:	2201      	movs	r2, #1
    bf4a:	0021      	movs	r1, r4
    bf4c:	0030      	movs	r0, r6
    bf4e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    bf50:	4b0a      	ldr	r3, [pc, #40]	; (bf7c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    bf52:	4798      	blx	r3
    bf54:	1e03      	subs	r3, r0, #0
    bf56:	d1e8      	bne.n	bf2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    bf58:	2105      	movs	r1, #5
    bf5a:	4a09      	ldr	r2, [pc, #36]	; (bf80 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    bf5c:	7011      	strb	r1, [r2, #0]
		return false;
    bf5e:	e7e4      	b.n	bf2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    bf60:	2301      	movs	r3, #1
    bf62:	e7e2      	b.n	bf2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
    bf64:	200003b0 	.word	0x200003b0
    bf68:	200003a8 	.word	0x200003a8
    bf6c:	200003b8 	.word	0x200003b8
    bf70:	00016fe1 	.word	0x00016fe1
    bf74:	2000036c 	.word	0x2000036c
    bf78:	000105a1 	.word	0x000105a1
    bf7c:	0000bea9 	.word	0x0000bea9
    bf80:	200003af 	.word	0x200003af

0000bf84 <sd_mmc_spi_start_read_block>:
{
    bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf86:	b083      	sub	sp, #12
	token = 0;
    bf88:	2200      	movs	r2, #0
    bf8a:	466b      	mov	r3, sp
    bf8c:	71da      	strb	r2, [r3, #7]
    bf8e:	4c14      	ldr	r4, [pc, #80]	; (bfe0 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    bf90:	466b      	mov	r3, sp
    bf92:	1ddd      	adds	r5, r3, #7
    bf94:	4e13      	ldr	r6, [pc, #76]	; (bfe4 <sd_mmc_spi_start_read_block+0x60>)
    bf96:	4f14      	ldr	r7, [pc, #80]	; (bfe8 <sd_mmc_spi_start_read_block+0x64>)
    bf98:	23ff      	movs	r3, #255	; 0xff
    bf9a:	2201      	movs	r2, #1
    bf9c:	0029      	movs	r1, r5
    bf9e:	0030      	movs	r0, r6
    bfa0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    bfa2:	782b      	ldrb	r3, [r5, #0]
    bfa4:	220f      	movs	r2, #15
    bfa6:	0019      	movs	r1, r3
    bfa8:	4391      	bics	r1, r2
    bfaa:	1e0a      	subs	r2, r1, #0
    bfac:	d009      	beq.n	bfc2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    bfae:	2bfe      	cmp	r3, #254	; 0xfe
    bfb0:	d013      	beq.n	bfda <sd_mmc_spi_start_read_block+0x56>
    bfb2:	3c01      	subs	r4, #1
		if (i-- == 0) {
    bfb4:	2c00      	cmp	r4, #0
    bfb6:	d1ef      	bne.n	bf98 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    bfb8:	2204      	movs	r2, #4
    bfba:	4b0c      	ldr	r3, [pc, #48]	; (bfec <sd_mmc_spi_start_read_block+0x68>)
    bfbc:	701a      	strb	r2, [r3, #0]
			return false;
    bfbe:	2000      	movs	r0, #0
    bfc0:	e00c      	b.n	bfdc <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    bfc2:	075b      	lsls	r3, r3, #29
    bfc4:	d004      	beq.n	bfd0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    bfc6:	3207      	adds	r2, #7
    bfc8:	4b08      	ldr	r3, [pc, #32]	; (bfec <sd_mmc_spi_start_read_block+0x68>)
    bfca:	701a      	strb	r2, [r3, #0]
			return false;
    bfcc:	2000      	movs	r0, #0
    bfce:	e005      	b.n	bfdc <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    bfd0:	220b      	movs	r2, #11
    bfd2:	4b06      	ldr	r3, [pc, #24]	; (bfec <sd_mmc_spi_start_read_block+0x68>)
    bfd4:	701a      	strb	r2, [r3, #0]
			return false;
    bfd6:	2000      	movs	r0, #0
    bfd8:	e000      	b.n	bfdc <sd_mmc_spi_start_read_block+0x58>
	return true;
    bfda:	2001      	movs	r0, #1
}
    bfdc:	b003      	add	sp, #12
    bfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfe0:	0007a120 	.word	0x0007a120
    bfe4:	2000036c 	.word	0x2000036c
    bfe8:	000103d9 	.word	0x000103d9
    bfec:	200003af 	.word	0x200003af

0000bff0 <sd_mmc_spi_stop_write_block>:
{
    bff0:	b530      	push	{r4, r5, lr}
    bff2:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    bff4:	a901      	add	r1, sp, #4
    bff6:	2301      	movs	r3, #1
    bff8:	425b      	negs	r3, r3
    bffa:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    bffc:	4d14      	ldr	r5, [pc, #80]	; (c050 <sd_mmc_spi_stop_write_block+0x60>)
    bffe:	2202      	movs	r2, #2
    c000:	0028      	movs	r0, r5
    c002:	4b14      	ldr	r3, [pc, #80]	; (c054 <sd_mmc_spi_stop_write_block+0x64>)
    c004:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    c006:	466b      	mov	r3, sp
    c008:	1ddc      	adds	r4, r3, #7
    c00a:	23ff      	movs	r3, #255	; 0xff
    c00c:	2201      	movs	r2, #1
    c00e:	0021      	movs	r1, r4
    c010:	0028      	movs	r0, r5
    c012:	4d11      	ldr	r5, [pc, #68]	; (c058 <sd_mmc_spi_stop_write_block+0x68>)
    c014:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    c016:	7822      	ldrb	r2, [r4, #0]
    c018:	2311      	movs	r3, #17
    c01a:	4013      	ands	r3, r2
    c01c:	2b01      	cmp	r3, #1
    c01e:	d005      	beq.n	c02c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c020:	2201      	movs	r2, #1
    c022:	4b0e      	ldr	r3, [pc, #56]	; (c05c <sd_mmc_spi_stop_write_block+0x6c>)
    c024:	701a      	strb	r2, [r3, #0]
		return false;
    c026:	2000      	movs	r0, #0
}
    c028:	b003      	add	sp, #12
    c02a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    c02c:	231e      	movs	r3, #30
    c02e:	401a      	ands	r2, r3
    c030:	2a04      	cmp	r2, #4
    c032:	d00b      	beq.n	c04c <sd_mmc_spi_stop_write_block+0x5c>
    c034:	2a0a      	cmp	r2, #10
    c036:	d104      	bne.n	c042 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    c038:	3a02      	subs	r2, #2
    c03a:	4b08      	ldr	r3, [pc, #32]	; (c05c <sd_mmc_spi_stop_write_block+0x6c>)
    c03c:	701a      	strb	r2, [r3, #0]
		return false;
    c03e:	2000      	movs	r0, #0
    c040:	e7f2      	b.n	c028 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    c042:	220a      	movs	r2, #10
    c044:	4b05      	ldr	r3, [pc, #20]	; (c05c <sd_mmc_spi_stop_write_block+0x6c>)
    c046:	701a      	strb	r2, [r3, #0]
		return false;
    c048:	2000      	movs	r0, #0
    c04a:	e7ed      	b.n	c028 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    c04c:	2001      	movs	r0, #1
    c04e:	e7eb      	b.n	c028 <sd_mmc_spi_stop_write_block+0x38>
    c050:	2000036c 	.word	0x2000036c
    c054:	000105a1 	.word	0x000105a1
    c058:	000103d9 	.word	0x000103d9
    c05c:	200003af 	.word	0x200003af

0000c060 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c060:	b570      	push	{r4, r5, r6, lr}
    c062:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c064:	2300      	movs	r3, #0
    c066:	4a2d      	ldr	r2, [pc, #180]	; (c11c <sd_mmc_spi_init+0xbc>)
    c068:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    c06a:	ac02      	add	r4, sp, #8
    c06c:	2501      	movs	r5, #1
    c06e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c070:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c072:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c074:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c076:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c078:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    c07a:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    c07c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    c07e:	2224      	movs	r2, #36	; 0x24
    c080:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c082:	3a18      	subs	r2, #24
    c084:	2100      	movs	r1, #0
    c086:	a808      	add	r0, sp, #32
    c088:	4b25      	ldr	r3, [pc, #148]	; (c120 <sd_mmc_spi_init+0xc0>)
    c08a:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c08c:	2380      	movs	r3, #128	; 0x80
    c08e:	025b      	lsls	r3, r3, #9
    c090:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c092:	4b24      	ldr	r3, [pc, #144]	; (c124 <sd_mmc_spi_init+0xc4>)
    c094:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c096:	4b24      	ldr	r3, [pc, #144]	; (c128 <sd_mmc_spi_init+0xc8>)
    c098:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c09a:	4b24      	ldr	r3, [pc, #144]	; (c12c <sd_mmc_spi_init+0xcc>)
    c09c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c09e:	4b24      	ldr	r3, [pc, #144]	; (c130 <sd_mmc_spi_init+0xd0>)
    c0a0:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c0a2:	4b24      	ldr	r3, [pc, #144]	; (c134 <sd_mmc_spi_init+0xd4>)
    c0a4:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c0a6:	4e24      	ldr	r6, [pc, #144]	; (c138 <sd_mmc_spi_init+0xd8>)
    c0a8:	0022      	movs	r2, r4
    c0aa:	4924      	ldr	r1, [pc, #144]	; (c13c <sd_mmc_spi_init+0xdc>)
    c0ac:	0030      	movs	r0, r6
    c0ae:	4b24      	ldr	r3, [pc, #144]	; (c140 <sd_mmc_spi_init+0xe0>)
    c0b0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c0b2:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c0b4:	0020      	movs	r0, r4
    c0b6:	4b23      	ldr	r3, [pc, #140]	; (c144 <sd_mmc_spi_init+0xe4>)
    c0b8:	4798      	blx	r3
    c0ba:	231f      	movs	r3, #31
    c0bc:	4018      	ands	r0, r3
    c0be:	4085      	lsls	r5, r0
    c0c0:	4b21      	ldr	r3, [pc, #132]	; (c148 <sd_mmc_spi_init+0xe8>)
    c0c2:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c0c4:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    c0c6:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	d1fc      	bne.n	c0c6 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c0cc:	6823      	ldr	r3, [r4, #0]
    c0ce:	2202      	movs	r2, #2
    c0d0:	4313      	orrs	r3, r2
    c0d2:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    c0d4:	4a1d      	ldr	r2, [pc, #116]	; (c14c <sd_mmc_spi_init+0xec>)
    c0d6:	2300      	movs	r3, #0
    c0d8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c0da:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    c0dc:	491c      	ldr	r1, [pc, #112]	; (c150 <sd_mmc_spi_init+0xf0>)
    c0de:	7808      	ldrb	r0, [r1, #0]
    c0e0:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c0e2:	4c1c      	ldr	r4, [pc, #112]	; (c154 <sd_mmc_spi_init+0xf4>)
    c0e4:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c0e6:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c0e8:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    c0ea:	a901      	add	r1, sp, #4
    c0ec:	2201      	movs	r2, #1
    c0ee:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c0f0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c0f2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c0f4:	4b18      	ldr	r3, [pc, #96]	; (c158 <sd_mmc_spi_init+0xf8>)
    c0f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c0f8:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c0fa:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c0fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c0fe:	2900      	cmp	r1, #0
    c100:	d104      	bne.n	c10c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    c102:	0953      	lsrs	r3, r2, #5
    c104:	01db      	lsls	r3, r3, #7
    c106:	4915      	ldr	r1, [pc, #84]	; (c15c <sd_mmc_spi_init+0xfc>)
    c108:	468c      	mov	ip, r1
    c10a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c10c:	211f      	movs	r1, #31
    c10e:	4011      	ands	r1, r2
    c110:	2201      	movs	r2, #1
    c112:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    c114:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    c116:	b010      	add	sp, #64	; 0x40
    c118:	bd70      	pop	{r4, r5, r6, pc}
    c11a:	46c0      	nop			; (mov r8, r8)
    c11c:	200003af 	.word	0x200003af
    c120:	000173d3 	.word	0x000173d3
    c124:	00100002 	.word	0x00100002
    c128:	00110002 	.word	0x00110002
    c12c:	00120002 	.word	0x00120002
    c130:	00130002 	.word	0x00130002
    c134:	00061a80 	.word	0x00061a80
    c138:	2000036c 	.word	0x2000036c
    c13c:	42000c00 	.word	0x42000c00
    c140:	00010201 	.word	0x00010201
    c144:	000100b9 	.word	0x000100b9
    c148:	e000e100 	.word	0xe000e100
    c14c:	200003bc 	.word	0x200003bc
    c150:	20000000 	.word	0x20000000
    c154:	200003ac 	.word	0x200003ac
    c158:	0000faa5 	.word	0x0000faa5
    c15c:	41004400 	.word	0x41004400

0000c160 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c162:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c164:	2200      	movs	r2, #0
    c166:	4b0d      	ldr	r3, [pc, #52]	; (c19c <sd_mmc_spi_select_device+0x3c>)
    c168:	701a      	strb	r2, [r3, #0]
    c16a:	000c      	movs	r4, r1
    c16c:	4b0c      	ldr	r3, [pc, #48]	; (c1a0 <sd_mmc_spi_select_device+0x40>)
    c16e:	4299      	cmp	r1, r3
    c170:	d900      	bls.n	c174 <sd_mmc_spi_select_device+0x14>
    c172:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c174:	4d0b      	ldr	r5, [pc, #44]	; (c1a4 <sd_mmc_spi_select_device+0x44>)
    c176:	4e0c      	ldr	r6, [pc, #48]	; (c1a8 <sd_mmc_spi_select_device+0x48>)
    c178:	e001      	b.n	c17e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    c17a:	08e3      	lsrs	r3, r4, #3
    c17c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c17e:	0021      	movs	r1, r4
    c180:	0028      	movs	r0, r5
    c182:	47b0      	blx	r6
    c184:	2817      	cmp	r0, #23
    c186:	d0f8      	beq.n	c17a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c188:	0079      	lsls	r1, r7, #1
    c18a:	19cf      	adds	r7, r1, r7
    c18c:	4907      	ldr	r1, [pc, #28]	; (c1ac <sd_mmc_spi_select_device+0x4c>)
    c18e:	19c9      	adds	r1, r1, r7
    c190:	2201      	movs	r2, #1
    c192:	4804      	ldr	r0, [pc, #16]	; (c1a4 <sd_mmc_spi_select_device+0x44>)
    c194:	4b06      	ldr	r3, [pc, #24]	; (c1b0 <sd_mmc_spi_select_device+0x50>)
    c196:	4798      	blx	r3
}
    c198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c19a:	46c0      	nop			; (mov r8, r8)
    c19c:	200003af 	.word	0x200003af
    c1a0:	00989680 	.word	0x00989680
    c1a4:	2000036c 	.word	0x2000036c
    c1a8:	00010149 	.word	0x00010149
    c1ac:	200003ac 	.word	0x200003ac
    c1b0:	000104ad 	.word	0x000104ad

0000c1b4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c1b4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c1b6:	2200      	movs	r2, #0
    c1b8:	4b04      	ldr	r3, [pc, #16]	; (c1cc <sd_mmc_spi_deselect_device+0x18>)
    c1ba:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c1bc:	0041      	lsls	r1, r0, #1
    c1be:	1808      	adds	r0, r1, r0
    c1c0:	4903      	ldr	r1, [pc, #12]	; (c1d0 <sd_mmc_spi_deselect_device+0x1c>)
    c1c2:	1809      	adds	r1, r1, r0
    c1c4:	4803      	ldr	r0, [pc, #12]	; (c1d4 <sd_mmc_spi_deselect_device+0x20>)
    c1c6:	4b04      	ldr	r3, [pc, #16]	; (c1d8 <sd_mmc_spi_deselect_device+0x24>)
    c1c8:	4798      	blx	r3
}
    c1ca:	bd10      	pop	{r4, pc}
    c1cc:	200003af 	.word	0x200003af
    c1d0:	200003ac 	.word	0x200003ac
    c1d4:	2000036c 	.word	0x2000036c
    c1d8:	000104ad 	.word	0x000104ad

0000c1dc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c1dc:	b570      	push	{r4, r5, r6, lr}
    c1de:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    c1e0:	22ff      	movs	r2, #255	; 0xff
    c1e2:	466b      	mov	r3, sp
    c1e4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c1e6:	2200      	movs	r2, #0
    c1e8:	4b07      	ldr	r3, [pc, #28]	; (c208 <sd_mmc_spi_send_clock+0x2c>)
    c1ea:	701a      	strb	r2, [r3, #0]
    c1ec:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c1ee:	4e07      	ldr	r6, [pc, #28]	; (c20c <sd_mmc_spi_send_clock+0x30>)
    c1f0:	4d07      	ldr	r5, [pc, #28]	; (c210 <sd_mmc_spi_send_clock+0x34>)
    c1f2:	2201      	movs	r2, #1
    c1f4:	466b      	mov	r3, sp
    c1f6:	1dd9      	adds	r1, r3, #7
    c1f8:	0030      	movs	r0, r6
    c1fa:	47a8      	blx	r5
    c1fc:	3c01      	subs	r4, #1
    c1fe:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    c200:	2c00      	cmp	r4, #0
    c202:	d1f6      	bne.n	c1f2 <sd_mmc_spi_send_clock+0x16>
	}
}
    c204:	b002      	add	sp, #8
    c206:	bd70      	pop	{r4, r5, r6, pc}
    c208:	200003af 	.word	0x200003af
    c20c:	2000036c 	.word	0x2000036c
    c210:	000105a1 	.word	0x000105a1

0000c214 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c214:	b5f0      	push	{r4, r5, r6, r7, lr}
    c216:	46c6      	mov	lr, r8
    c218:	b500      	push	{lr}
    c21a:	b086      	sub	sp, #24
    c21c:	4680      	mov	r8, r0
    c21e:	9200      	str	r2, [sp, #0]
    c220:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    c222:	22ff      	movs	r2, #255	; 0xff
    c224:	230f      	movs	r3, #15
    c226:	a802      	add	r0, sp, #8
    c228:	4684      	mov	ip, r0
    c22a:	4463      	add	r3, ip
    c22c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c22e:	2200      	movs	r2, #0
    c230:	4b53      	ldr	r3, [pc, #332]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c232:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c234:	ab04      	add	r3, sp, #16
    c236:	323f      	adds	r2, #63	; 0x3f
    c238:	4640      	mov	r0, r8
    c23a:	4002      	ands	r2, r0
    c23c:	2040      	movs	r0, #64	; 0x40
    c23e:	4302      	orrs	r2, r0
    c240:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c242:	0e0a      	lsrs	r2, r1, #24
    c244:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c246:	0c0a      	lsrs	r2, r1, #16
    c248:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c24a:	0a0a      	lsrs	r2, r1, #8
    c24c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c24e:	7119      	strb	r1, [r3, #4]
    c250:	2700      	movs	r7, #0
	crc = 0;
    c252:	2300      	movs	r3, #0
		value = *buf++;
    c254:	a904      	add	r1, sp, #16
    c256:	2208      	movs	r2, #8
				crc ^= 0x09;
    c258:	2409      	movs	r4, #9
    c25a:	e011      	b.n	c280 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    c25c:	0076      	lsls	r6, r6, #1
    c25e:	b2f6      	uxtb	r6, r6
    c260:	3801      	subs	r0, #1
    c262:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    c264:	2800      	cmp	r0, #0
    c266:	d008      	beq.n	c27a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    c268:	005b      	lsls	r3, r3, #1
    c26a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    c26c:	001d      	movs	r5, r3
    c26e:	4075      	eors	r5, r6
    c270:	062d      	lsls	r5, r5, #24
    c272:	d5f3      	bpl.n	c25c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    c274:	4063      	eors	r3, r4
    c276:	b2db      	uxtb	r3, r3
    c278:	e7f0      	b.n	c25c <sd_mmc_spi_adtc_start+0x48>
    c27a:	3701      	adds	r7, #1
	while (size--) {
    c27c:	2f05      	cmp	r7, #5
    c27e:	d002      	beq.n	c286 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    c280:	5c7e      	ldrb	r6, [r7, r1]
    c282:	0010      	movs	r0, r2
    c284:	e7f0      	b.n	c268 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    c286:	005b      	lsls	r3, r3, #1
    c288:	2201      	movs	r2, #1
    c28a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c28c:	ac04      	add	r4, sp, #16
    c28e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c290:	4e3c      	ldr	r6, [pc, #240]	; (c384 <sd_mmc_spi_adtc_start+0x170>)
    c292:	2201      	movs	r2, #1
    c294:	210f      	movs	r1, #15
    c296:	ab02      	add	r3, sp, #8
    c298:	469c      	mov	ip, r3
    c29a:	4461      	add	r1, ip
    c29c:	0030      	movs	r0, r6
    c29e:	4f3a      	ldr	r7, [pc, #232]	; (c388 <sd_mmc_spi_adtc_start+0x174>)
    c2a0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c2a2:	2206      	movs	r2, #6
    c2a4:	0021      	movs	r1, r4
    c2a6:	0030      	movs	r0, r6
    c2a8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c2aa:	ab02      	add	r3, sp, #8
    c2ac:	1dd9      	adds	r1, r3, #7
    c2ae:	23ff      	movs	r3, #255	; 0xff
    c2b0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c2b2:	2201      	movs	r2, #1
    c2b4:	0030      	movs	r0, r6
    c2b6:	4e35      	ldr	r6, [pc, #212]	; (c38c <sd_mmc_spi_adtc_start+0x178>)
    c2b8:	47b0      	blx	r6
    c2ba:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c2bc:	ab02      	add	r3, sp, #8
    c2be:	1dde      	adds	r6, r3, #7
    c2c0:	4f30      	ldr	r7, [pc, #192]	; (c384 <sd_mmc_spi_adtc_start+0x170>)
    c2c2:	4d32      	ldr	r5, [pc, #200]	; (c38c <sd_mmc_spi_adtc_start+0x178>)
    c2c4:	23ff      	movs	r3, #255	; 0xff
    c2c6:	2201      	movs	r2, #1
    c2c8:	0031      	movs	r1, r6
    c2ca:	0038      	movs	r0, r7
    c2cc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c2ce:	7833      	ldrb	r3, [r6, #0]
    c2d0:	b25a      	sxtb	r2, r3
    c2d2:	2a00      	cmp	r2, #0
    c2d4:	da0b      	bge.n	c2ee <sd_mmc_spi_adtc_start+0xda>
    c2d6:	3c01      	subs	r4, #1
    c2d8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c2da:	2c00      	cmp	r4, #0
    c2dc:	d1f2      	bne.n	c2c4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c2de:	2202      	movs	r2, #2
    c2e0:	4b27      	ldr	r3, [pc, #156]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c2e2:	701a      	strb	r2, [r3, #0]
			return false;
    c2e4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    c2e6:	b006      	add	sp, #24
    c2e8:	bc04      	pop	{r2}
    c2ea:	4690      	mov	r8, r2
    c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    c2ee:	4a28      	ldr	r2, [pc, #160]	; (c390 <sd_mmc_spi_adtc_start+0x17c>)
    c2f0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    c2f2:	071a      	lsls	r2, r3, #28
    c2f4:	d41a      	bmi.n	c32c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c2f6:	075a      	lsls	r2, r3, #29
    c2f8:	d41d      	bmi.n	c336 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    c2fa:	2201      	movs	r2, #1
    c2fc:	4393      	bics	r3, r2
    c2fe:	d11f      	bne.n	c340 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    c300:	4643      	mov	r3, r8
    c302:	049b      	lsls	r3, r3, #18
    c304:	d420      	bmi.n	c348 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    c306:	4643      	mov	r3, r8
    c308:	059b      	lsls	r3, r3, #22
    c30a:	d425      	bmi.n	c358 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    c30c:	4643      	mov	r3, r8
    c30e:	055b      	lsls	r3, r3, #21
    c310:	d42b      	bmi.n	c36a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    c312:	4b20      	ldr	r3, [pc, #128]	; (c394 <sd_mmc_spi_adtc_start+0x180>)
    c314:	466a      	mov	r2, sp
    c316:	8812      	ldrh	r2, [r2, #0]
    c318:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c31a:	4b1f      	ldr	r3, [pc, #124]	; (c398 <sd_mmc_spi_adtc_start+0x184>)
    c31c:	466a      	mov	r2, sp
    c31e:	8892      	ldrh	r2, [r2, #4]
    c320:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c322:	2200      	movs	r2, #0
    c324:	4b1d      	ldr	r3, [pc, #116]	; (c39c <sd_mmc_spi_adtc_start+0x188>)
    c326:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c328:	2001      	movs	r0, #1
    c32a:	e7dc      	b.n	c2e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c32c:	2206      	movs	r2, #6
    c32e:	4b14      	ldr	r3, [pc, #80]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c330:	701a      	strb	r2, [r3, #0]
		return false;
    c332:	2000      	movs	r0, #0
    c334:	e7d7      	b.n	c2e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c336:	2209      	movs	r2, #9
    c338:	4b11      	ldr	r3, [pc, #68]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c33a:	701a      	strb	r2, [r3, #0]
		return false;
    c33c:	2000      	movs	r0, #0
    c33e:	e7d2      	b.n	c2e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c340:	4b0f      	ldr	r3, [pc, #60]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c342:	701a      	strb	r2, [r3, #0]
		return false;
    c344:	2000      	movs	r0, #0
    c346:	e7ce      	b.n	c2e6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    c348:	4b15      	ldr	r3, [pc, #84]	; (c3a0 <sd_mmc_spi_adtc_start+0x18c>)
    c34a:	4798      	blx	r3
    c34c:	2800      	cmp	r0, #0
    c34e:	d1da      	bne.n	c306 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c350:	2203      	movs	r2, #3
    c352:	4b0b      	ldr	r3, [pc, #44]	; (c380 <sd_mmc_spi_adtc_start+0x16c>)
    c354:	701a      	strb	r2, [r3, #0]
			return false;
    c356:	e7c6      	b.n	c2e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    c358:	490d      	ldr	r1, [pc, #52]	; (c390 <sd_mmc_spi_adtc_start+0x17c>)
    c35a:	2300      	movs	r3, #0
    c35c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c35e:	33ff      	adds	r3, #255	; 0xff
    c360:	2201      	movs	r2, #1
    c362:	4808      	ldr	r0, [pc, #32]	; (c384 <sd_mmc_spi_adtc_start+0x170>)
    c364:	4e09      	ldr	r6, [pc, #36]	; (c38c <sd_mmc_spi_adtc_start+0x178>)
    c366:	47b0      	blx	r6
    c368:	e7d0      	b.n	c30c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c36a:	4e09      	ldr	r6, [pc, #36]	; (c390 <sd_mmc_spi_adtc_start+0x17c>)
    c36c:	23ff      	movs	r3, #255	; 0xff
    c36e:	2204      	movs	r2, #4
    c370:	0031      	movs	r1, r6
    c372:	4804      	ldr	r0, [pc, #16]	; (c384 <sd_mmc_spi_adtc_start+0x170>)
    c374:	4f05      	ldr	r7, [pc, #20]	; (c38c <sd_mmc_spi_adtc_start+0x178>)
    c376:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c378:	6833      	ldr	r3, [r6, #0]
    c37a:	ba1b      	rev	r3, r3
    c37c:	6033      	str	r3, [r6, #0]
    c37e:	e7c8      	b.n	c312 <sd_mmc_spi_adtc_start+0xfe>
    c380:	200003af 	.word	0x200003af
    c384:	2000036c 	.word	0x2000036c
    c388:	000105a1 	.word	0x000105a1
    c38c:	000103d9 	.word	0x000103d9
    c390:	200003b4 	.word	0x200003b4
    c394:	200003a8 	.word	0x200003a8
    c398:	200003b0 	.word	0x200003b0
    c39c:	200003b8 	.word	0x200003b8
    c3a0:	0000bea9 	.word	0x0000bea9

0000c3a4 <sd_mmc_spi_send_cmd>:
{
    c3a4:	b510      	push	{r4, lr}
    c3a6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c3a8:	2300      	movs	r3, #0
    c3aa:	9300      	str	r3, [sp, #0]
    c3ac:	2200      	movs	r2, #0
    c3ae:	4c02      	ldr	r4, [pc, #8]	; (c3b8 <sd_mmc_spi_send_cmd+0x14>)
    c3b0:	47a0      	blx	r4
}
    c3b2:	b002      	add	sp, #8
    c3b4:	bd10      	pop	{r4, pc}
    c3b6:	46c0      	nop			; (mov r8, r8)
    c3b8:	0000c215 	.word	0x0000c215

0000c3bc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    c3bc:	4b01      	ldr	r3, [pc, #4]	; (c3c4 <sd_mmc_spi_get_response+0x8>)
    c3be:	6818      	ldr	r0, [r3, #0]
}
    c3c0:	4770      	bx	lr
    c3c2:	46c0      	nop			; (mov r8, r8)
    c3c4:	200003b4 	.word	0x200003b4

0000c3c8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c3c8:	b510      	push	{r4, lr}
    c3ca:	b084      	sub	sp, #16
    c3cc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c3ce:	2200      	movs	r2, #0
    c3d0:	4b14      	ldr	r3, [pc, #80]	; (c424 <sd_mmc_spi_read_word+0x5c>)
    c3d2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c3d4:	4b14      	ldr	r3, [pc, #80]	; (c428 <sd_mmc_spi_read_word+0x60>)
    c3d6:	8819      	ldrh	r1, [r3, #0]
    c3d8:	4b14      	ldr	r3, [pc, #80]	; (c42c <sd_mmc_spi_read_word+0x64>)
    c3da:	6818      	ldr	r0, [r3, #0]
    c3dc:	4b14      	ldr	r3, [pc, #80]	; (c430 <sd_mmc_spi_read_word+0x68>)
    c3de:	4798      	blx	r3
    c3e0:	2900      	cmp	r1, #0
    c3e2:	d103      	bne.n	c3ec <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c3e4:	4b13      	ldr	r3, [pc, #76]	; (c434 <sd_mmc_spi_read_word+0x6c>)
    c3e6:	4798      	blx	r3
    c3e8:	2800      	cmp	r0, #0
    c3ea:	d010      	beq.n	c40e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c3ec:	23ff      	movs	r3, #255	; 0xff
    c3ee:	2204      	movs	r2, #4
    c3f0:	a901      	add	r1, sp, #4
    c3f2:	4811      	ldr	r0, [pc, #68]	; (c438 <sd_mmc_spi_read_word+0x70>)
    c3f4:	4c11      	ldr	r4, [pc, #68]	; (c43c <sd_mmc_spi_read_word+0x74>)
    c3f6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    c3f8:	4b0c      	ldr	r3, [pc, #48]	; (c42c <sd_mmc_spi_read_word+0x64>)
    c3fa:	681a      	ldr	r2, [r3, #0]
    c3fc:	1d10      	adds	r0, r2, #4
    c3fe:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c400:	4b09      	ldr	r3, [pc, #36]	; (c428 <sd_mmc_spi_read_word+0x60>)
    c402:	8819      	ldrh	r1, [r3, #0]
    c404:	4b0a      	ldr	r3, [pc, #40]	; (c430 <sd_mmc_spi_read_word+0x68>)
    c406:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    c408:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c40a:	2900      	cmp	r1, #0
    c40c:	d001      	beq.n	c412 <sd_mmc_spi_read_word+0x4a>
}
    c40e:	b004      	add	sp, #16
    c410:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c412:	23ff      	movs	r3, #255	; 0xff
    c414:	2202      	movs	r2, #2
    c416:	a903      	add	r1, sp, #12
    c418:	4807      	ldr	r0, [pc, #28]	; (c438 <sd_mmc_spi_read_word+0x70>)
    c41a:	4c08      	ldr	r4, [pc, #32]	; (c43c <sd_mmc_spi_read_word+0x74>)
    c41c:	47a0      	blx	r4
	return true;
    c41e:	2001      	movs	r0, #1
    c420:	e7f5      	b.n	c40e <sd_mmc_spi_read_word+0x46>
    c422:	46c0      	nop			; (mov r8, r8)
    c424:	200003af 	.word	0x200003af
    c428:	200003a8 	.word	0x200003a8
    c42c:	200003b8 	.word	0x200003b8
    c430:	000170ed 	.word	0x000170ed
    c434:	0000bf85 	.word	0x0000bf85
    c438:	2000036c 	.word	0x2000036c
    c43c:	000103d9 	.word	0x000103d9

0000c440 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c440:	b5f0      	push	{r4, r5, r6, r7, lr}
    c442:	46de      	mov	lr, fp
    c444:	4657      	mov	r7, sl
    c446:	4646      	mov	r6, r8
    c448:	b5c0      	push	{r6, r7, lr}
    c44a:	b082      	sub	sp, #8
    c44c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c44e:	2200      	movs	r2, #0
    c450:	4b17      	ldr	r3, [pc, #92]	; (c4b0 <sd_mmc_spi_start_read_blocks+0x70>)
    c452:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    c454:	1e4c      	subs	r4, r1, #1
    c456:	b2a4      	uxth	r4, r4
    c458:	2900      	cmp	r1, #0
    c45a:	d026      	beq.n	c4aa <sd_mmc_spi_start_read_blocks+0x6a>
    c45c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c45e:	4b15      	ldr	r3, [pc, #84]	; (c4b4 <sd_mmc_spi_start_read_blocks+0x74>)
    c460:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c462:	4f15      	ldr	r7, [pc, #84]	; (c4b8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    c464:	47d0      	blx	sl
    c466:	4680      	mov	r8, r0
    c468:	2800      	cmp	r0, #0
    c46a:	d017      	beq.n	c49c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c46c:	883a      	ldrh	r2, [r7, #0]
    c46e:	465b      	mov	r3, fp
    c470:	1999      	adds	r1, r3, r6
    c472:	23ff      	movs	r3, #255	; 0xff
    c474:	4811      	ldr	r0, [pc, #68]	; (c4bc <sd_mmc_spi_start_read_blocks+0x7c>)
    c476:	4d12      	ldr	r5, [pc, #72]	; (c4c0 <sd_mmc_spi_start_read_blocks+0x80>)
    c478:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c47a:	883b      	ldrh	r3, [r7, #0]
    c47c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c47e:	4a11      	ldr	r2, [pc, #68]	; (c4c4 <sd_mmc_spi_start_read_blocks+0x84>)
    c480:	6811      	ldr	r1, [r2, #0]
    c482:	468c      	mov	ip, r1
    c484:	4463      	add	r3, ip
    c486:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c488:	23ff      	movs	r3, #255	; 0xff
    c48a:	2202      	movs	r2, #2
    c48c:	a901      	add	r1, sp, #4
    c48e:	480b      	ldr	r0, [pc, #44]	; (c4bc <sd_mmc_spi_start_read_blocks+0x7c>)
    c490:	47a8      	blx	r5
	while (nb_block--) {
    c492:	3c01      	subs	r4, #1
    c494:	b2a4      	uxth	r4, r4
    c496:	4b0c      	ldr	r3, [pc, #48]	; (c4c8 <sd_mmc_spi_start_read_blocks+0x88>)
    c498:	429c      	cmp	r4, r3
    c49a:	d1e3      	bne.n	c464 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    c49c:	4640      	mov	r0, r8
    c49e:	b002      	add	sp, #8
    c4a0:	bc1c      	pop	{r2, r3, r4}
    c4a2:	4690      	mov	r8, r2
    c4a4:	469a      	mov	sl, r3
    c4a6:	46a3      	mov	fp, r4
    c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    c4aa:	2301      	movs	r3, #1
    c4ac:	4698      	mov	r8, r3
    c4ae:	e7f5      	b.n	c49c <sd_mmc_spi_start_read_blocks+0x5c>
    c4b0:	200003af 	.word	0x200003af
    c4b4:	0000bf85 	.word	0x0000bf85
    c4b8:	200003a8 	.word	0x200003a8
    c4bc:	2000036c 	.word	0x2000036c
    c4c0:	000103d9 	.word	0x000103d9
    c4c4:	200003b8 	.word	0x200003b8
    c4c8:	0000ffff 	.word	0x0000ffff

0000c4cc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    c4cc:	2001      	movs	r0, #1
    c4ce:	4770      	bx	lr

0000c4d0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4d2:	46c6      	mov	lr, r8
    c4d4:	b500      	push	{lr}
    c4d6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c4d8:	2200      	movs	r2, #0
    c4da:	4b15      	ldr	r3, [pc, #84]	; (c530 <sd_mmc_spi_start_write_blocks+0x60>)
    c4dc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c4de:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c4e0:	4f14      	ldr	r7, [pc, #80]	; (c534 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c4e2:	4e15      	ldr	r6, [pc, #84]	; (c538 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    c4e4:	e000      	b.n	c4e8 <sd_mmc_spi_start_write_blocks+0x18>
{
    c4e6:	0021      	movs	r1, r4
	while (nb_block--) {
    c4e8:	1e4c      	subs	r4, r1, #1
    c4ea:	b2a4      	uxth	r4, r4
    c4ec:	2900      	cmp	r1, #0
    c4ee:	d01b      	beq.n	c528 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    c4f0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c4f2:	8832      	ldrh	r2, [r6, #0]
    c4f4:	4643      	mov	r3, r8
    c4f6:	1959      	adds	r1, r3, r5
    c4f8:	4810      	ldr	r0, [pc, #64]	; (c53c <sd_mmc_spi_start_write_blocks+0x6c>)
    c4fa:	4b11      	ldr	r3, [pc, #68]	; (c540 <sd_mmc_spi_start_write_blocks+0x70>)
    c4fc:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c4fe:	8833      	ldrh	r3, [r6, #0]
    c500:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c502:	4a10      	ldr	r2, [pc, #64]	; (c544 <sd_mmc_spi_start_write_blocks+0x74>)
    c504:	6811      	ldr	r1, [r2, #0]
    c506:	468c      	mov	ip, r1
    c508:	4463      	add	r3, ip
    c50a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c50c:	4b0e      	ldr	r3, [pc, #56]	; (c548 <sd_mmc_spi_start_write_blocks+0x78>)
    c50e:	4798      	blx	r3
    c510:	2800      	cmp	r0, #0
    c512:	d00a      	beq.n	c52a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c514:	2c00      	cmp	r4, #0
    c516:	d0e6      	beq.n	c4e6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c518:	4b0c      	ldr	r3, [pc, #48]	; (c54c <sd_mmc_spi_start_write_blocks+0x7c>)
    c51a:	4798      	blx	r3
    c51c:	2800      	cmp	r0, #0
    c51e:	d1e2      	bne.n	c4e6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c520:	2205      	movs	r2, #5
    c522:	4b03      	ldr	r3, [pc, #12]	; (c530 <sd_mmc_spi_start_write_blocks+0x60>)
    c524:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c526:	e000      	b.n	c52a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    c528:	2001      	movs	r0, #1
}
    c52a:	bc04      	pop	{r2}
    c52c:	4690      	mov	r8, r2
    c52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c530:	200003af 	.word	0x200003af
    c534:	0000be61 	.word	0x0000be61
    c538:	200003a8 	.word	0x200003a8
    c53c:	2000036c 	.word	0x2000036c
    c540:	000105a1 	.word	0x000105a1
    c544:	200003b8 	.word	0x200003b8
    c548:	0000bff1 	.word	0x0000bff1
    c54c:	0000bea9 	.word	0x0000bea9

0000c550 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c550:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c552:	4b05      	ldr	r3, [pc, #20]	; (c568 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    c554:	4798      	blx	r3
    c556:	2800      	cmp	r0, #0
    c558:	d103      	bne.n	c562 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c55a:	2205      	movs	r2, #5
    c55c:	4b03      	ldr	r3, [pc, #12]	; (c56c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    c55e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    c560:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    c562:	4b03      	ldr	r3, [pc, #12]	; (c570 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    c564:	4798      	blx	r3
    c566:	e7fb      	b.n	c560 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    c568:	0000bea9 	.word	0x0000bea9
    c56c:	200003af 	.word	0x200003af
    c570:	0000bf0d 	.word	0x0000bf0d

0000c574 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c574:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c576:	2000      	movs	r0, #0
    c578:	4b08      	ldr	r3, [pc, #32]	; (c59c <delay_init+0x28>)
    c57a:	4798      	blx	r3
    c57c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    c57e:	4c08      	ldr	r4, [pc, #32]	; (c5a0 <delay_init+0x2c>)
    c580:	21fa      	movs	r1, #250	; 0xfa
    c582:	0089      	lsls	r1, r1, #2
    c584:	47a0      	blx	r4
    c586:	4b07      	ldr	r3, [pc, #28]	; (c5a4 <delay_init+0x30>)
    c588:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c58a:	4907      	ldr	r1, [pc, #28]	; (c5a8 <delay_init+0x34>)
    c58c:	0028      	movs	r0, r5
    c58e:	47a0      	blx	r4
    c590:	4b06      	ldr	r3, [pc, #24]	; (c5ac <delay_init+0x38>)
    c592:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c594:	2205      	movs	r2, #5
    c596:	4b06      	ldr	r3, [pc, #24]	; (c5b0 <delay_init+0x3c>)
    c598:	601a      	str	r2, [r3, #0]
}
    c59a:	bd70      	pop	{r4, r5, r6, pc}
    c59c:	000113e1 	.word	0x000113e1
    c5a0:	00016fe1 	.word	0x00016fe1
    c5a4:	20000004 	.word	0x20000004
    c5a8:	000f4240 	.word	0x000f4240
    c5ac:	20000008 	.word	0x20000008
    c5b0:	e000e010 	.word	0xe000e010

0000c5b4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    c5b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    c5b6:	4b08      	ldr	r3, [pc, #32]	; (c5d8 <delay_cycles_ms+0x24>)
    c5b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    c5ba:	4a08      	ldr	r2, [pc, #32]	; (c5dc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    c5bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c5be:	2180      	movs	r1, #128	; 0x80
    c5c0:	0249      	lsls	r1, r1, #9
	while (n--) {
    c5c2:	3801      	subs	r0, #1
    c5c4:	d307      	bcc.n	c5d6 <delay_cycles_ms+0x22>
	if (n > 0) {
    c5c6:	2c00      	cmp	r4, #0
    c5c8:	d0fb      	beq.n	c5c2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    c5ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    c5cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c5ce:	6813      	ldr	r3, [r2, #0]
    c5d0:	420b      	tst	r3, r1
    c5d2:	d0fc      	beq.n	c5ce <delay_cycles_ms+0x1a>
    c5d4:	e7f5      	b.n	c5c2 <delay_cycles_ms+0xe>
	}
}
    c5d6:	bd30      	pop	{r4, r5, pc}
    c5d8:	20000004 	.word	0x20000004
    c5dc:	e000e010 	.word	0xe000e010

0000c5e0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c5e0:	b510      	push	{r4, lr}
	if (gpfIsr) {
    c5e2:	4b03      	ldr	r3, [pc, #12]	; (c5f0 <chip_isr+0x10>)
    c5e4:	681b      	ldr	r3, [r3, #0]
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d000      	beq.n	c5ec <chip_isr+0xc>
		gpfIsr();
    c5ea:	4798      	blx	r3
	}
}
    c5ec:	bd10      	pop	{r4, pc}
    c5ee:	46c0      	nop			; (mov r8, r8)
    c5f0:	200003c0 	.word	0x200003c0

0000c5f4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c5f4:	b570      	push	{r4, r5, r6, lr}
    c5f6:	b082      	sub	sp, #8
	gpfIsr = NULL;
    c5f8:	2300      	movs	r3, #0
    c5fa:	4a15      	ldr	r2, [pc, #84]	; (c650 <nm_bsp_init+0x5c>)
    c5fc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c5fe:	ac01      	add	r4, sp, #4
    c600:	2501      	movs	r5, #1
    c602:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    c604:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c606:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c608:	0021      	movs	r1, r4
    c60a:	201b      	movs	r0, #27
    c60c:	4e11      	ldr	r6, [pc, #68]	; (c654 <nm_bsp_init+0x60>)
    c60e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c610:	0021      	movs	r1, r4
    c612:	201c      	movs	r0, #28
    c614:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c616:	0021      	movs	r1, r4
    c618:	2028      	movs	r0, #40	; 0x28
    c61a:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c61c:	4b0e      	ldr	r3, [pc, #56]	; (c658 <nm_bsp_init+0x64>)
    c61e:	2280      	movs	r2, #128	; 0x80
    c620:	0552      	lsls	r2, r2, #21
    c622:	615a      	str	r2, [r3, #20]
    c624:	2280      	movs	r2, #128	; 0x80
    c626:	0512      	lsls	r2, r2, #20
    c628:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c62a:	4b0c      	ldr	r3, [pc, #48]	; (c65c <nm_bsp_init+0x68>)
    c62c:	681b      	ldr	r3, [r3, #0]
    c62e:	421d      	tst	r5, r3
    c630:	d003      	beq.n	c63a <nm_bsp_init+0x46>
    c632:	4b0a      	ldr	r3, [pc, #40]	; (c65c <nm_bsp_init+0x68>)
    c634:	681b      	ldr	r3, [r3, #0]
    c636:	079b      	lsls	r3, r3, #30
    c638:	d401      	bmi.n	c63e <nm_bsp_init+0x4a>
	    delay_init();
    c63a:	4b09      	ldr	r3, [pc, #36]	; (c660 <nm_bsp_init+0x6c>)
    c63c:	4798      	blx	r3
	cpu_irq_enable();
    c63e:	2201      	movs	r2, #1
    c640:	4b08      	ldr	r3, [pc, #32]	; (c664 <nm_bsp_init+0x70>)
    c642:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c644:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    c648:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    c64a:	2000      	movs	r0, #0
    c64c:	b002      	add	sp, #8
    c64e:	bd70      	pop	{r4, r5, r6, pc}
    c650:	200003c0 	.word	0x200003c0
    c654:	0000faa5 	.word	0x0000faa5
    c658:	41004400 	.word	0x41004400
    c65c:	e000e010 	.word	0xe000e010
    c660:	0000c575 	.word	0x0000c575
    c664:	2000000e 	.word	0x2000000e

0000c668 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c668:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    c66a:	1e44      	subs	r4, r0, #1
    c66c:	2800      	cmp	r0, #0
    c66e:	d004      	beq.n	c67a <nm_bsp_sleep+0x12>
		delay_ms(1);
    c670:	4d02      	ldr	r5, [pc, #8]	; (c67c <nm_bsp_sleep+0x14>)
    c672:	2001      	movs	r0, #1
    c674:	47a8      	blx	r5
	while (u32TimeMsec--) {
    c676:	3c01      	subs	r4, #1
    c678:	d2fb      	bcs.n	c672 <nm_bsp_sleep+0xa>
	}
}
    c67a:	bd70      	pop	{r4, r5, r6, pc}
    c67c:	0000c5b5 	.word	0x0000c5b5

0000c680 <nm_bsp_reset>:
{
    c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c682:	4c07      	ldr	r4, [pc, #28]	; (c6a0 <nm_bsp_reset+0x20>)
    c684:	2780      	movs	r7, #128	; 0x80
    c686:	057f      	lsls	r7, r7, #21
    c688:	6167      	str	r7, [r4, #20]
    c68a:	2580      	movs	r5, #128	; 0x80
    c68c:	052d      	lsls	r5, r5, #20
    c68e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    c690:	2001      	movs	r0, #1
    c692:	4e04      	ldr	r6, [pc, #16]	; (c6a4 <nm_bsp_reset+0x24>)
    c694:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c696:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    c698:	200a      	movs	r0, #10
    c69a:	47b0      	blx	r6
    c69c:	61a5      	str	r5, [r4, #24]
}
    c69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6a0:	41004400 	.word	0x41004400
    c6a4:	0000c669 	.word	0x0000c669

0000c6a8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c6a8:	b510      	push	{r4, lr}
    c6aa:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c6ac:	4b0e      	ldr	r3, [pc, #56]	; (c6e8 <nm_bsp_register_isr+0x40>)
    c6ae:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c6b0:	ac01      	add	r4, sp, #4
    c6b2:	0020      	movs	r0, r4
    c6b4:	4b0d      	ldr	r3, [pc, #52]	; (c6ec <nm_bsp_register_isr+0x44>)
    c6b6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c6b8:	2329      	movs	r3, #41	; 0x29
    c6ba:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c6bc:	2300      	movs	r3, #0
    c6be:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c6c0:	3301      	adds	r3, #1
    c6c2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c6c4:	3301      	adds	r3, #1
    c6c6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c6c8:	0021      	movs	r1, r4
    c6ca:	2009      	movs	r0, #9
    c6cc:	4b08      	ldr	r3, [pc, #32]	; (c6f0 <nm_bsp_register_isr+0x48>)
    c6ce:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c6d0:	2200      	movs	r2, #0
    c6d2:	2109      	movs	r1, #9
    c6d4:	4807      	ldr	r0, [pc, #28]	; (c6f4 <nm_bsp_register_isr+0x4c>)
    c6d6:	4b08      	ldr	r3, [pc, #32]	; (c6f8 <nm_bsp_register_isr+0x50>)
    c6d8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c6da:	2100      	movs	r1, #0
    c6dc:	2009      	movs	r0, #9
    c6de:	4b07      	ldr	r3, [pc, #28]	; (c6fc <nm_bsp_register_isr+0x54>)
    c6e0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c6e2:	b004      	add	sp, #16
    c6e4:	bd10      	pop	{r4, pc}
    c6e6:	46c0      	nop			; (mov r8, r8)
    c6e8:	200003c0 	.word	0x200003c0
    c6ec:	0000fa19 	.word	0x0000fa19
    c6f0:	0000fa2d 	.word	0x0000fa2d
    c6f4:	0000c5e1 	.word	0x0000c5e1
    c6f8:	0000f8d5 	.word	0x0000f8d5
    c6fc:	0000f901 	.word	0x0000f901

0000c700 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c700:	b510      	push	{r4, lr}
	if (u8Enable) {
    c702:	2800      	cmp	r0, #0
    c704:	d104      	bne.n	c710 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c706:	2100      	movs	r1, #0
    c708:	2009      	movs	r0, #9
    c70a:	4b04      	ldr	r3, [pc, #16]	; (c71c <nm_bsp_interrupt_ctrl+0x1c>)
    c70c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c70e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c710:	2100      	movs	r1, #0
    c712:	2009      	movs	r0, #9
    c714:	4b02      	ldr	r3, [pc, #8]	; (c720 <nm_bsp_interrupt_ctrl+0x20>)
    c716:	4798      	blx	r3
    c718:	e7f9      	b.n	c70e <nm_bsp_interrupt_ctrl+0xe>
    c71a:	46c0      	nop			; (mov r8, r8)
    c71c:	0000f921 	.word	0x0000f921
    c720:	0000f901 	.word	0x0000f901

0000c724 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    c724:	b530      	push	{r4, r5, lr}
    c726:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    c728:	4c30      	ldr	r4, [pc, #192]	; (c7ec <nm_bus_init+0xc8>)
    c72a:	230e      	movs	r3, #14
    c72c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c72e:	2300      	movs	r3, #0
    c730:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c732:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c734:	a901      	add	r1, sp, #4
    c736:	2201      	movs	r2, #1
    c738:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c73a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c73c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c73e:	200e      	movs	r0, #14
    c740:	4b2b      	ldr	r3, [pc, #172]	; (c7f0 <nm_bus_init+0xcc>)
    c742:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c744:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c746:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c748:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c74a:	2900      	cmp	r1, #0
    c74c:	d104      	bne.n	c758 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    c74e:	0953      	lsrs	r3, r2, #5
    c750:	01db      	lsls	r3, r3, #7
    c752:	4928      	ldr	r1, [pc, #160]	; (c7f4 <nm_bus_init+0xd0>)
    c754:	468c      	mov	ip, r1
    c756:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c758:	211f      	movs	r1, #31
    c75a:	4011      	ands	r1, r2
    c75c:	2201      	movs	r2, #1
    c75e:	0010      	movs	r0, r2
    c760:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c762:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c764:	ac02      	add	r4, sp, #8
    c766:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c768:	2300      	movs	r3, #0
    c76a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c76c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    c76e:	21c0      	movs	r1, #192	; 0xc0
    c770:	0389      	lsls	r1, r1, #14
    c772:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c774:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c776:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c778:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c77a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c77c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c77e:	3223      	adds	r2, #35	; 0x23
    c780:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c782:	3a18      	subs	r2, #24
    c784:	2100      	movs	r1, #0
    c786:	a808      	add	r0, sp, #32
    c788:	4b1b      	ldr	r3, [pc, #108]	; (c7f8 <nm_bus_init+0xd4>)
    c78a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    c78c:	4b1b      	ldr	r3, [pc, #108]	; (c7fc <nm_bus_init+0xd8>)
    c78e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    c790:	4b1b      	ldr	r3, [pc, #108]	; (c800 <nm_bus_init+0xdc>)
    c792:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    c794:	2301      	movs	r3, #1
    c796:	425b      	negs	r3, r3
    c798:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    c79a:	4b1a      	ldr	r3, [pc, #104]	; (c804 <nm_bus_init+0xe0>)
    c79c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    c79e:	4b1a      	ldr	r3, [pc, #104]	; (c808 <nm_bus_init+0xe4>)
    c7a0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    c7a2:	0022      	movs	r2, r4
    c7a4:	4919      	ldr	r1, [pc, #100]	; (c80c <nm_bus_init+0xe8>)
    c7a6:	481a      	ldr	r0, [pc, #104]	; (c810 <nm_bus_init+0xec>)
    c7a8:	4b1a      	ldr	r3, [pc, #104]	; (c814 <nm_bus_init+0xf0>)
    c7aa:	4798      	blx	r3
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d11a      	bne.n	c7e6 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c7b0:	4d17      	ldr	r5, [pc, #92]	; (c810 <nm_bus_init+0xec>)
    c7b2:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c7b4:	0020      	movs	r0, r4
    c7b6:	4b18      	ldr	r3, [pc, #96]	; (c818 <nm_bus_init+0xf4>)
    c7b8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c7ba:	231f      	movs	r3, #31
    c7bc:	4018      	ands	r0, r3
    c7be:	3b1e      	subs	r3, #30
    c7c0:	4083      	lsls	r3, r0
    c7c2:	4a16      	ldr	r2, [pc, #88]	; (c81c <nm_bus_init+0xf8>)
    c7c4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c7c6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c7c8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d1fc      	bne.n	c7c8 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c7ce:	6823      	ldr	r3, [r4, #0]
    c7d0:	2202      	movs	r2, #2
    c7d2:	4313      	orrs	r3, r2
    c7d4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    c7d6:	4b12      	ldr	r3, [pc, #72]	; (c820 <nm_bus_init+0xfc>)
    c7d8:	4798      	blx	r3
	nm_bsp_sleep(1);
    c7da:	2001      	movs	r0, #1
    c7dc:	4b11      	ldr	r3, [pc, #68]	; (c824 <nm_bus_init+0x100>)
    c7de:	4798      	blx	r3
#endif
	return result;
    c7e0:	2000      	movs	r0, #0
}
    c7e2:	b011      	add	sp, #68	; 0x44
    c7e4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    c7e6:	2006      	movs	r0, #6
    c7e8:	4240      	negs	r0, r0
    c7ea:	e7fa      	b.n	c7e2 <nm_bus_init+0xbe>
    c7ec:	2000133c 	.word	0x2000133c
    c7f0:	0000faa5 	.word	0x0000faa5
    c7f4:	41004400 	.word	0x41004400
    c7f8:	000173d3 	.word	0x000173d3
    c7fc:	000c0002 	.word	0x000c0002
    c800:	000d0002 	.word	0x000d0002
    c804:	000f0002 	.word	0x000f0002
    c808:	00b71b00 	.word	0x00b71b00
    c80c:	42001000 	.word	0x42001000
    c810:	20001340 	.word	0x20001340
    c814:	00010201 	.word	0x00010201
    c818:	000100b9 	.word	0x000100b9
    c81c:	e000e100 	.word	0xe000e100
    c820:	0000c681 	.word	0x0000c681
    c824:	0000c669 	.word	0x0000c669

0000c828 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    c828:	b5f0      	push	{r4, r5, r6, r7, lr}
    c82a:	46de      	mov	lr, fp
    c82c:	4657      	mov	r7, sl
    c82e:	464e      	mov	r6, r9
    c830:	4645      	mov	r5, r8
    c832:	b5e0      	push	{r5, r6, r7, lr}
    c834:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    c836:	2803      	cmp	r0, #3
    c838:	d000      	beq.n	c83c <nm_bus_ioctl+0x14>
    c83a:	e075      	b.n	c928 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    c83c:	680e      	ldr	r6, [r1, #0]
    c83e:	684d      	ldr	r5, [r1, #4]
    c840:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    c842:	2200      	movs	r2, #0
    c844:	466b      	mov	r3, sp
    c846:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c848:	2d00      	cmp	r5, #0
    c84a:	d027      	beq.n	c89c <nm_bus_ioctl+0x74>
    c84c:	2c00      	cmp	r4, #0
    c84e:	d065      	beq.n	c91c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    c850:	2e00      	cmp	r6, #0
    c852:	d100      	bne.n	c856 <nm_bus_ioctl+0x2e>
    c854:	e077      	b.n	c946 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c856:	2300      	movs	r3, #0
    c858:	4698      	mov	r8, r3
    c85a:	2300      	movs	r3, #0
    c85c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    c85e:	2201      	movs	r2, #1
    c860:	493b      	ldr	r1, [pc, #236]	; (c950 <nm_bus_ioctl+0x128>)
    c862:	483c      	ldr	r0, [pc, #240]	; (c954 <nm_bus_ioctl+0x12c>)
    c864:	4b3c      	ldr	r3, [pc, #240]	; (c958 <nm_bus_ioctl+0x130>)
    c866:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c868:	4b3a      	ldr	r3, [pc, #232]	; (c954 <nm_bus_ioctl+0x12c>)
    c86a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    c86c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    c86e:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c870:	4699      	mov	r9, r3
			pu8Miso++;
    c872:	4659      	mov	r1, fp
    c874:	424b      	negs	r3, r1
    c876:	4159      	adcs	r1, r3
    c878:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    c87a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c87c:	4653      	mov	r3, sl
    c87e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c880:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    c882:	4239      	tst	r1, r7
    c884:	d0fc      	beq.n	c880 <nm_bus_ioctl+0x58>
    c886:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c888:	4239      	tst	r1, r7
    c88a:	d0fc      	beq.n	c886 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c88c:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c88e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    c890:	4211      	tst	r1, r2
    c892:	d0fc      	beq.n	c88e <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c894:	4649      	mov	r1, r9
    c896:	7989      	ldrb	r1, [r1, #6]
    c898:	468c      	mov	ip, r1
    c89a:	e011      	b.n	c8c0 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c89c:	2e00      	cmp	r6, #0
    c89e:	d03a      	beq.n	c916 <nm_bus_ioctl+0xee>
    c8a0:	2c00      	cmp	r4, #0
    c8a2:	d03e      	beq.n	c922 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c8a4:	2300      	movs	r3, #0
    c8a6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    c8a8:	3301      	adds	r3, #1
    c8aa:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    c8ac:	466b      	mov	r3, sp
    c8ae:	1ddd      	adds	r5, r3, #7
    c8b0:	e7d5      	b.n	c85e <nm_bus_ioctl+0x36>
    c8b2:	4660      	mov	r0, ip
    c8b4:	2801      	cmp	r0, #1
    c8b6:	d00d      	beq.n	c8d4 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c8b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c8ba:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    c8bc:	2900      	cmp	r1, #0
    c8be:	d00d      	beq.n	c8dc <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c8c0:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c8c2:	4211      	tst	r1, r2
    c8c4:	d0fc      	beq.n	c8c0 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c8c6:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    c8c8:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c8ca:	4210      	tst	r0, r2
    c8cc:	d0f1      	beq.n	c8b2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c8ce:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    c8d0:	311e      	adds	r1, #30
    c8d2:	e7ee      	b.n	c8b2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c8d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c8d6:	05c0      	lsls	r0, r0, #23
    c8d8:	0dc0      	lsrs	r0, r0, #23
    c8da:	e7ef      	b.n	c8bc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    c8dc:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    c8de:	3c01      	subs	r4, #1
    c8e0:	b2a4      	uxth	r4, r4
			pu8Miso++;
    c8e2:	445d      	add	r5, fp
			pu8Mosi++;
    c8e4:	4643      	mov	r3, r8
    c8e6:	4259      	negs	r1, r3
    c8e8:	414b      	adcs	r3, r1
    c8ea:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    c8ec:	2c00      	cmp	r4, #0
    c8ee:	d1c4      	bne.n	c87a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8f0:	4b18      	ldr	r3, [pc, #96]	; (c954 <nm_bus_ioctl+0x12c>)
    c8f2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    c8f4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c8f6:	7e0b      	ldrb	r3, [r1, #24]
    c8f8:	4213      	tst	r3, r2
    c8fa:	d0fc      	beq.n	c8f6 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    c8fc:	2200      	movs	r2, #0
    c8fe:	4914      	ldr	r1, [pc, #80]	; (c950 <nm_bus_ioctl+0x128>)
    c900:	4814      	ldr	r0, [pc, #80]	; (c954 <nm_bus_ioctl+0x12c>)
    c902:	4b15      	ldr	r3, [pc, #84]	; (c958 <nm_bus_ioctl+0x130>)
    c904:	4798      	blx	r3
	return M2M_SUCCESS;
    c906:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    c908:	b003      	add	sp, #12
    c90a:	bc3c      	pop	{r2, r3, r4, r5}
    c90c:	4690      	mov	r8, r2
    c90e:	4699      	mov	r9, r3
    c910:	46a2      	mov	sl, r4
    c912:	46ab      	mov	fp, r5
    c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    c916:	200f      	movs	r0, #15
    c918:	4240      	negs	r0, r0
    c91a:	e7f5      	b.n	c908 <nm_bus_ioctl+0xe0>
    c91c:	200f      	movs	r0, #15
    c91e:	4240      	negs	r0, r0
    c920:	e7f2      	b.n	c908 <nm_bus_ioctl+0xe0>
    c922:	200f      	movs	r0, #15
    c924:	4240      	negs	r0, r0
		break;
    c926:	e7ef      	b.n	c908 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    c928:	2283      	movs	r2, #131	; 0x83
    c92a:	0052      	lsls	r2, r2, #1
    c92c:	490b      	ldr	r1, [pc, #44]	; (c95c <nm_bus_ioctl+0x134>)
    c92e:	480c      	ldr	r0, [pc, #48]	; (c960 <nm_bus_ioctl+0x138>)
    c930:	4b0c      	ldr	r3, [pc, #48]	; (c964 <nm_bus_ioctl+0x13c>)
    c932:	4798      	blx	r3
    c934:	480c      	ldr	r0, [pc, #48]	; (c968 <nm_bus_ioctl+0x140>)
    c936:	4b0d      	ldr	r3, [pc, #52]	; (c96c <nm_bus_ioctl+0x144>)
    c938:	4798      	blx	r3
    c93a:	200d      	movs	r0, #13
    c93c:	4b0c      	ldr	r3, [pc, #48]	; (c970 <nm_bus_ioctl+0x148>)
    c93e:	4798      	blx	r3
			s8Ret = -1;
    c940:	2001      	movs	r0, #1
    c942:	4240      	negs	r0, r0
	return s8Ret;
    c944:	e7e0      	b.n	c908 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    c946:	2301      	movs	r3, #1
    c948:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    c94a:	466b      	mov	r3, sp
    c94c:	1dde      	adds	r6, r3, #7
    c94e:	e784      	b.n	c85a <nm_bus_ioctl+0x32>
    c950:	2000133c 	.word	0x2000133c
    c954:	20001340 	.word	0x20001340
    c958:	000104ad 	.word	0x000104ad
    c95c:	00018da0 	.word	0x00018da0
    c960:	00018db0 	.word	0x00018db0
    c964:	00017535 	.word	0x00017535
    c968:	00018dc4 	.word	0x00018dc4
    c96c:	00017651 	.word	0x00017651
    c970:	00017569 	.word	0x00017569

0000c974 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    c974:	b530      	push	{r4, r5, lr}
    c976:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    c978:	ab01      	add	r3, sp, #4
    c97a:	2200      	movs	r2, #0
    c97c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    c97e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    c980:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c982:	4d13      	ldr	r5, [pc, #76]	; (c9d0 <nm_bus_deinit+0x5c>)
    c984:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    c986:	0020      	movs	r0, r4
    c988:	4b12      	ldr	r3, [pc, #72]	; (c9d4 <nm_bus_deinit+0x60>)
    c98a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c98c:	231f      	movs	r3, #31
    c98e:	4018      	ands	r0, r3
    c990:	3b1e      	subs	r3, #30
    c992:	4083      	lsls	r3, r0
    c994:	2280      	movs	r2, #128	; 0x80
    c996:	4910      	ldr	r1, [pc, #64]	; (c9d8 <nm_bus_deinit+0x64>)
    c998:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c99a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c99c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c99e:	2b00      	cmp	r3, #0
    c9a0:	d1fc      	bne.n	c99c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    c9a2:	338f      	adds	r3, #143	; 0x8f
    c9a4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    c9a6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    c9a8:	6823      	ldr	r3, [r4, #0]
    c9aa:	2202      	movs	r2, #2
    c9ac:	4393      	bics	r3, r2
    c9ae:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    c9b0:	a901      	add	r1, sp, #4
    c9b2:	200c      	movs	r0, #12
    c9b4:	4c09      	ldr	r4, [pc, #36]	; (c9dc <nm_bus_deinit+0x68>)
    c9b6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    c9b8:	a901      	add	r1, sp, #4
    c9ba:	200f      	movs	r0, #15
    c9bc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    c9be:	a901      	add	r1, sp, #4
    c9c0:	200d      	movs	r0, #13
    c9c2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    c9c4:	a901      	add	r1, sp, #4
    c9c6:	200e      	movs	r0, #14
    c9c8:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    c9ca:	2000      	movs	r0, #0
    c9cc:	b003      	add	sp, #12
    c9ce:	bd30      	pop	{r4, r5, pc}
    c9d0:	20001340 	.word	0x20001340
    c9d4:	000100b9 	.word	0x000100b9
    c9d8:	e000e100 	.word	0xe000e100
    c9dc:	0000faa5 	.word	0x0000faa5

0000c9e0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    c9e0:	2a00      	cmp	r2, #0
    c9e2:	d006      	beq.n	c9f2 <m2m_memcpy+0x12>
    c9e4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    c9e6:	780b      	ldrb	r3, [r1, #0]
    c9e8:	7003      	strb	r3, [r0, #0]
		pDst++;
    c9ea:	3001      	adds	r0, #1
		pSrc++;
    c9ec:	3101      	adds	r1, #1
	}while(--sz);
    c9ee:	4290      	cmp	r0, r2
    c9f0:	d1f9      	bne.n	c9e6 <m2m_memcpy+0x6>
}
    c9f2:	4770      	bx	lr

0000c9f4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    c9f4:	2a00      	cmp	r2, #0
    c9f6:	d004      	beq.n	ca02 <m2m_memset+0xe>
    c9f8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    c9fa:	7001      	strb	r1, [r0, #0]
		pBuf++;
    c9fc:	3001      	adds	r0, #1
	}while(--sz);
    c9fe:	4290      	cmp	r0, r2
    ca00:	d1fb      	bne.n	c9fa <m2m_memset+0x6>
}
    ca02:	4770      	bx	lr

0000ca04 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    ca04:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    ca06:	7802      	ldrb	r2, [r0, #0]
    ca08:	2a00      	cmp	r2, #0
    ca0a:	d007      	beq.n	ca1c <m2m_strlen+0x18>
    ca0c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    ca0e:	3001      	adds	r0, #1
    ca10:	b280      	uxth	r0, r0
		pcStr++;
    ca12:	3301      	adds	r3, #1
	while(*pcStr)
    ca14:	781a      	ldrb	r2, [r3, #0]
    ca16:	2a00      	cmp	r2, #0
    ca18:	d1f9      	bne.n	ca0e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    ca1a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    ca1c:	2000      	movs	r0, #0
    ca1e:	e7fc      	b.n	ca1a <m2m_strlen+0x16>

0000ca20 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    ca20:	4a02      	ldr	r2, [pc, #8]	; (ca2c <isr+0xc>)
    ca22:	78d3      	ldrb	r3, [r2, #3]
    ca24:	3301      	adds	r3, #1
    ca26:	b2db      	uxtb	r3, r3
    ca28:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    ca2a:	4770      	bx	lr
    ca2c:	2000137c 	.word	0x2000137c

0000ca30 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    ca30:	4770      	bx	lr
	...

0000ca34 <hif_set_rx_done>:
{
    ca34:	b500      	push	{lr}
    ca36:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    ca38:	2200      	movs	r2, #0
    ca3a:	4b0a      	ldr	r3, [pc, #40]	; (ca64 <hif_set_rx_done+0x30>)
    ca3c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    ca3e:	2001      	movs	r0, #1
    ca40:	4b09      	ldr	r3, [pc, #36]	; (ca68 <hif_set_rx_done+0x34>)
    ca42:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    ca44:	a901      	add	r1, sp, #4
    ca46:	4809      	ldr	r0, [pc, #36]	; (ca6c <hif_set_rx_done+0x38>)
    ca48:	4b09      	ldr	r3, [pc, #36]	; (ca70 <hif_set_rx_done+0x3c>)
    ca4a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ca4c:	2800      	cmp	r0, #0
    ca4e:	d001      	beq.n	ca54 <hif_set_rx_done+0x20>
}
    ca50:	b003      	add	sp, #12
    ca52:	bd00      	pop	{pc}
	reg |= NBIT1;
    ca54:	2102      	movs	r1, #2
    ca56:	9b01      	ldr	r3, [sp, #4]
    ca58:	4319      	orrs	r1, r3
    ca5a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    ca5c:	4803      	ldr	r0, [pc, #12]	; (ca6c <hif_set_rx_done+0x38>)
    ca5e:	4b05      	ldr	r3, [pc, #20]	; (ca74 <hif_set_rx_done+0x40>)
    ca60:	4798      	blx	r3
    ca62:	e7f5      	b.n	ca50 <hif_set_rx_done+0x1c>
    ca64:	2000137c 	.word	0x2000137c
    ca68:	0000c701 	.word	0x0000c701
    ca6c:	00001070 	.word	0x00001070
    ca70:	0000de45 	.word	0x0000de45
    ca74:	0000de51 	.word	0x0000de51

0000ca78 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    ca78:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    ca7a:	4b0c      	ldr	r3, [pc, #48]	; (caac <hif_chip_wake+0x34>)
    ca7c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    ca7e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    ca80:	2b00      	cmp	r3, #0
    ca82:	d10d      	bne.n	caa0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    ca84:	4b09      	ldr	r3, [pc, #36]	; (caac <hif_chip_wake+0x34>)
    ca86:	785b      	ldrb	r3, [r3, #1]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d103      	bne.n	ca94 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    ca8c:	4b07      	ldr	r3, [pc, #28]	; (caac <hif_chip_wake+0x34>)
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d106      	bne.n	caa2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    ca94:	4a05      	ldr	r2, [pc, #20]	; (caac <hif_chip_wake+0x34>)
    ca96:	7853      	ldrb	r3, [r2, #1]
    ca98:	3301      	adds	r3, #1
    ca9a:	b2db      	uxtb	r3, r3
    ca9c:	7053      	strb	r3, [r2, #1]
    ca9e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    caa0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    caa2:	4b03      	ldr	r3, [pc, #12]	; (cab0 <hif_chip_wake+0x38>)
    caa4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    caa6:	2800      	cmp	r0, #0
    caa8:	d0f4      	beq.n	ca94 <hif_chip_wake+0x1c>
    caaa:	e7f9      	b.n	caa0 <hif_chip_wake+0x28>
    caac:	2000137c 	.word	0x2000137c
    cab0:	0000db2d 	.word	0x0000db2d

0000cab4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    cab4:	4b05      	ldr	r3, [pc, #20]	; (cacc <hif_chip_sleep_sc+0x18>)
    cab6:	785b      	ldrb	r3, [r3, #1]
    cab8:	2b00      	cmp	r3, #0
    caba:	d004      	beq.n	cac6 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    cabc:	4a03      	ldr	r2, [pc, #12]	; (cacc <hif_chip_sleep_sc+0x18>)
    cabe:	7853      	ldrb	r3, [r2, #1]
    cac0:	3b01      	subs	r3, #1
    cac2:	b2db      	uxtb	r3, r3
    cac4:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    cac6:	2000      	movs	r0, #0
    cac8:	4770      	bx	lr
    caca:	46c0      	nop			; (mov r8, r8)
    cacc:	2000137c 	.word	0x2000137c

0000cad0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    cad0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    cad2:	4b0b      	ldr	r3, [pc, #44]	; (cb00 <hif_chip_sleep+0x30>)
    cad4:	785b      	ldrb	r3, [r3, #1]
    cad6:	2b00      	cmp	r3, #0
    cad8:	d004      	beq.n	cae4 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    cada:	4a09      	ldr	r2, [pc, #36]	; (cb00 <hif_chip_sleep+0x30>)
    cadc:	7853      	ldrb	r3, [r2, #1]
    cade:	3b01      	subs	r3, #1
    cae0:	b2db      	uxtb	r3, r3
    cae2:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    cae4:	4b06      	ldr	r3, [pc, #24]	; (cb00 <hif_chip_sleep+0x30>)
    cae6:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    cae8:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    caea:	2b00      	cmp	r3, #0
    caec:	d103      	bne.n	caf6 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    caee:	4b04      	ldr	r3, [pc, #16]	; (cb00 <hif_chip_sleep+0x30>)
    caf0:	781b      	ldrb	r3, [r3, #0]
    caf2:	2b00      	cmp	r3, #0
    caf4:	d100      	bne.n	caf8 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    caf6:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    caf8:	4b02      	ldr	r3, [pc, #8]	; (cb04 <hif_chip_sleep+0x34>)
    cafa:	4798      	blx	r3
    cafc:	e7fb      	b.n	caf6 <hif_chip_sleep+0x26>
    cafe:	46c0      	nop			; (mov r8, r8)
    cb00:	2000137c 	.word	0x2000137c
    cb04:	0000dac5 	.word	0x0000dac5

0000cb08 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb0a:	46de      	mov	lr, fp
    cb0c:	4657      	mov	r7, sl
    cb0e:	b580      	push	{r7, lr}
    cb10:	b089      	sub	sp, #36	; 0x24
    cb12:	4683      	mov	fp, r0
    cb14:	468a      	mov	sl, r1
    cb16:	9201      	str	r2, [sp, #4]
    cb18:	9300      	str	r3, [sp, #0]
    cb1a:	ab10      	add	r3, sp, #64	; 0x40
    cb1c:	cb80      	ldmia	r3!, {r7}
    cb1e:	881e      	ldrh	r6, [r3, #0]
    cb20:	ab12      	add	r3, sp, #72	; 0x48
    cb22:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    cb24:	227f      	movs	r2, #127	; 0x7f
    cb26:	400a      	ands	r2, r1
    cb28:	ab07      	add	r3, sp, #28
    cb2a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    cb2c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    cb2e:	2208      	movs	r2, #8
    cb30:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    cb32:	2f00      	cmp	r7, #0
    cb34:	d03d      	beq.n	cbb2 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    cb36:	885a      	ldrh	r2, [r3, #2]
    cb38:	1992      	adds	r2, r2, r6
    cb3a:	18aa      	adds	r2, r5, r2
    cb3c:	b292      	uxth	r2, r2
    cb3e:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    cb40:	4b69      	ldr	r3, [pc, #420]	; (cce8 <hif_send+0x1e0>)
    cb42:	4798      	blx	r3
    cb44:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    cb46:	d000      	beq.n	cb4a <hif_send+0x42>
    cb48:	e0c1      	b.n	ccce <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    cb4a:	2300      	movs	r3, #0
    cb4c:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    cb4e:	aa02      	add	r2, sp, #8
    cb50:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    cb52:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    cb54:	9b04      	ldr	r3, [sp, #16]
    cb56:	465a      	mov	r2, fp
    cb58:	431a      	orrs	r2, r3
    cb5a:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    cb5c:	9a04      	ldr	r2, [sp, #16]
    cb5e:	4653      	mov	r3, sl
    cb60:	021b      	lsls	r3, r3, #8
    cb62:	4313      	orrs	r3, r2
    cb64:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    cb66:	ab07      	add	r3, sp, #28
    cb68:	885b      	ldrh	r3, [r3, #2]
    cb6a:	9a04      	ldr	r2, [sp, #16]
    cb6c:	041b      	lsls	r3, r3, #16
    cb6e:	4313      	orrs	r3, r2
    cb70:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    cb72:	9904      	ldr	r1, [sp, #16]
    cb74:	485d      	ldr	r0, [pc, #372]	; (ccec <hif_send+0x1e4>)
    cb76:	4b5e      	ldr	r3, [pc, #376]	; (ccf0 <hif_send+0x1e8>)
    cb78:	4798      	blx	r3
    cb7a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cb7c:	d157      	bne.n	cc2e <hif_send+0x126>

		reg = 0UL;
    cb7e:	2300      	movs	r3, #0
    cb80:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    cb82:	9b04      	ldr	r3, [sp, #16]
    cb84:	2202      	movs	r2, #2
    cb86:	4313      	orrs	r3, r2
    cb88:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    cb8a:	9904      	ldr	r1, [sp, #16]
    cb8c:	4859      	ldr	r0, [pc, #356]	; (ccf4 <hif_send+0x1ec>)
    cb8e:	4b58      	ldr	r3, [pc, #352]	; (ccf0 <hif_send+0x1e8>)
    cb90:	4798      	blx	r3
    cb92:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cb94:	d14b      	bne.n	cc2e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    cb96:	2200      	movs	r2, #0
    cb98:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    cb9a:	ab02      	add	r3, sp, #8
    cb9c:	80da      	strh	r2, [r3, #6]
    cb9e:	3306      	adds	r3, #6
    cba0:	881b      	ldrh	r3, [r3, #0]
    cba2:	b29b      	uxth	r3, r3
    cba4:	4a54      	ldr	r2, [pc, #336]	; (ccf8 <hif_send+0x1f0>)
    cba6:	4293      	cmp	r3, r2
    cba8:	d849      	bhi.n	cc3e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    cbaa:	4c54      	ldr	r4, [pc, #336]	; (ccfc <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    cbac:	4b54      	ldr	r3, [pc, #336]	; (cd00 <hif_send+0x1f8>)
    cbae:	469a      	mov	sl, r3
    cbb0:	e017      	b.n	cbe2 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    cbb2:	ab07      	add	r3, sp, #28
    cbb4:	885a      	ldrh	r2, [r3, #2]
    cbb6:	9900      	ldr	r1, [sp, #0]
    cbb8:	468c      	mov	ip, r1
    cbba:	4462      	add	r2, ip
    cbbc:	b292      	uxth	r2, r2
    cbbe:	805a      	strh	r2, [r3, #2]
    cbc0:	e7be      	b.n	cb40 <hif_send+0x38>
				nm_bsp_sleep(1);
    cbc2:	2001      	movs	r0, #1
    cbc4:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    cbc6:	9b04      	ldr	r3, [sp, #16]
    cbc8:	079b      	lsls	r3, r3, #30
    cbca:	d528      	bpl.n	cc1e <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    cbcc:	ab02      	add	r3, sp, #8
    cbce:	88da      	ldrh	r2, [r3, #6]
    cbd0:	3201      	adds	r2, #1
    cbd2:	b292      	uxth	r2, r2
    cbd4:	80da      	strh	r2, [r3, #6]
    cbd6:	3306      	adds	r3, #6
    cbd8:	881b      	ldrh	r3, [r3, #0]
    cbda:	b29b      	uxth	r3, r3
    cbdc:	4a46      	ldr	r2, [pc, #280]	; (ccf8 <hif_send+0x1f0>)
    cbde:	4293      	cmp	r3, r2
    cbe0:	d82d      	bhi.n	cc3e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    cbe2:	a904      	add	r1, sp, #16
    cbe4:	4843      	ldr	r0, [pc, #268]	; (ccf4 <hif_send+0x1ec>)
    cbe6:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    cbe8:	2800      	cmp	r0, #0
    cbea:	d128      	bne.n	cc3e <hif_send+0x136>
			if(cnt >= 500) {
    cbec:	ab02      	add	r3, sp, #8
    cbee:	3306      	adds	r3, #6
    cbf0:	881b      	ldrh	r3, [r3, #0]
    cbf2:	b29b      	uxth	r3, r3
    cbf4:	22f4      	movs	r2, #244	; 0xf4
    cbf6:	32ff      	adds	r2, #255	; 0xff
    cbf8:	4293      	cmp	r3, r2
    cbfa:	d9e4      	bls.n	cbc6 <hif_send+0xbe>
				if(cnt < 501) {
    cbfc:	ab02      	add	r3, sp, #8
    cbfe:	3306      	adds	r3, #6
    cc00:	881b      	ldrh	r3, [r3, #0]
    cc02:	b29b      	uxth	r3, r3
    cc04:	3201      	adds	r2, #1
    cc06:	4293      	cmp	r3, r2
    cc08:	d8db      	bhi.n	cbc2 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    cc0a:	483e      	ldr	r0, [pc, #248]	; (cd04 <hif_send+0x1fc>)
    cc0c:	4b3e      	ldr	r3, [pc, #248]	; (cd08 <hif_send+0x200>)
    cc0e:	4798      	blx	r3
    cc10:	483e      	ldr	r0, [pc, #248]	; (cd0c <hif_send+0x204>)
    cc12:	4b3f      	ldr	r3, [pc, #252]	; (cd10 <hif_send+0x208>)
    cc14:	4798      	blx	r3
    cc16:	200d      	movs	r0, #13
    cc18:	4b3e      	ldr	r3, [pc, #248]	; (cd14 <hif_send+0x20c>)
    cc1a:	4798      	blx	r3
    cc1c:	e7d1      	b.n	cbc2 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    cc1e:	a905      	add	r1, sp, #20
    cc20:	483d      	ldr	r0, [pc, #244]	; (cd18 <hif_send+0x210>)
    cc22:	4b36      	ldr	r3, [pc, #216]	; (ccfc <hif_send+0x1f4>)
    cc24:	4798      	blx	r3
    cc26:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    cc28:	d009      	beq.n	cc3e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    cc2a:	2300      	movs	r3, #0
    cc2c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    cc2e:	4b3b      	ldr	r3, [pc, #236]	; (cd1c <hif_send+0x214>)
    cc30:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    cc32:	0020      	movs	r0, r4
    cc34:	b009      	add	sp, #36	; 0x24
    cc36:	bc0c      	pop	{r2, r3}
    cc38:	4692      	mov	sl, r2
    cc3a:	469b      	mov	fp, r3
    cc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    cc3e:	9b05      	ldr	r3, [sp, #20]
    cc40:	2b00      	cmp	r3, #0
    cc42:	d03f      	beq.n	ccc4 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    cc44:	9b05      	ldr	r3, [sp, #20]
    cc46:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    cc48:	a907      	add	r1, sp, #28
    cc4a:	884b      	ldrh	r3, [r1, #2]
    cc4c:	b29b      	uxth	r3, r3
    cc4e:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    cc50:	9806      	ldr	r0, [sp, #24]
    cc52:	2208      	movs	r2, #8
    cc54:	4b32      	ldr	r3, [pc, #200]	; (cd20 <hif_send+0x218>)
    cc56:	4798      	blx	r3
    cc58:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cc5a:	d1e8      	bne.n	cc2e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    cc5c:	9b06      	ldr	r3, [sp, #24]
    cc5e:	3308      	adds	r3, #8
    cc60:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    cc62:	9b01      	ldr	r3, [sp, #4]
    cc64:	2b00      	cmp	r3, #0
    cc66:	d00b      	beq.n	cc80 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    cc68:	9806      	ldr	r0, [sp, #24]
    cc6a:	9a00      	ldr	r2, [sp, #0]
    cc6c:	0019      	movs	r1, r3
    cc6e:	4b2c      	ldr	r3, [pc, #176]	; (cd20 <hif_send+0x218>)
    cc70:	4798      	blx	r3
    cc72:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cc74:	d1db      	bne.n	cc2e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    cc76:	9b06      	ldr	r3, [sp, #24]
    cc78:	9a00      	ldr	r2, [sp, #0]
    cc7a:	4694      	mov	ip, r2
    cc7c:	4463      	add	r3, ip
    cc7e:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    cc80:	2f00      	cmp	r7, #0
    cc82:	d00e      	beq.n	cca2 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    cc84:	9b06      	ldr	r3, [sp, #24]
    cc86:	9a00      	ldr	r2, [sp, #0]
    cc88:	1aad      	subs	r5, r5, r2
    cc8a:	18ed      	adds	r5, r5, r3
    cc8c:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    cc8e:	9806      	ldr	r0, [sp, #24]
    cc90:	0032      	movs	r2, r6
    cc92:	0039      	movs	r1, r7
    cc94:	4b22      	ldr	r3, [pc, #136]	; (cd20 <hif_send+0x218>)
    cc96:	4798      	blx	r3
    cc98:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cc9a:	d1c8      	bne.n	cc2e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    cc9c:	9b06      	ldr	r3, [sp, #24]
    cc9e:	18f3      	adds	r3, r6, r3
    cca0:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    cca2:	9b05      	ldr	r3, [sp, #20]
    cca4:	009b      	lsls	r3, r3, #2
    cca6:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    cca8:	9b04      	ldr	r3, [sp, #16]
    ccaa:	2202      	movs	r2, #2
    ccac:	4313      	orrs	r3, r2
    ccae:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    ccb0:	9904      	ldr	r1, [sp, #16]
    ccb2:	481c      	ldr	r0, [pc, #112]	; (cd24 <hif_send+0x21c>)
    ccb4:	4b0e      	ldr	r3, [pc, #56]	; (ccf0 <hif_send+0x1e8>)
    ccb6:	4798      	blx	r3
    ccb8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    ccba:	d1b8      	bne.n	cc2e <hif_send+0x126>
 	ret = hif_chip_sleep();
    ccbc:	4b1a      	ldr	r3, [pc, #104]	; (cd28 <hif_send+0x220>)
    ccbe:	4798      	blx	r3
    ccc0:	0004      	movs	r4, r0
	return ret;
    ccc2:	e7b6      	b.n	cc32 <hif_send+0x12a>
			ret = hif_chip_sleep();
    ccc4:	4b18      	ldr	r3, [pc, #96]	; (cd28 <hif_send+0x220>)
    ccc6:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    ccc8:	2403      	movs	r4, #3
    ccca:	4264      	negs	r4, r4
			goto ERR2;
    cccc:	e7b1      	b.n	cc32 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    ccce:	2298      	movs	r2, #152	; 0x98
    ccd0:	32ff      	adds	r2, #255	; 0xff
    ccd2:	4916      	ldr	r1, [pc, #88]	; (cd2c <hif_send+0x224>)
    ccd4:	4816      	ldr	r0, [pc, #88]	; (cd30 <hif_send+0x228>)
    ccd6:	4b0c      	ldr	r3, [pc, #48]	; (cd08 <hif_send+0x200>)
    ccd8:	4798      	blx	r3
    ccda:	4816      	ldr	r0, [pc, #88]	; (cd34 <hif_send+0x22c>)
    ccdc:	4b0c      	ldr	r3, [pc, #48]	; (cd10 <hif_send+0x208>)
    ccde:	4798      	blx	r3
    cce0:	200d      	movs	r0, #13
    cce2:	4b0c      	ldr	r3, [pc, #48]	; (cd14 <hif_send+0x20c>)
    cce4:	4798      	blx	r3
		goto ERR2;
    cce6:	e7a4      	b.n	cc32 <hif_send+0x12a>
    cce8:	0000ca79 	.word	0x0000ca79
    ccec:	0000108c 	.word	0x0000108c
    ccf0:	0000de51 	.word	0x0000de51
    ccf4:	00001078 	.word	0x00001078
    ccf8:	000003e7 	.word	0x000003e7
    ccfc:	0000de45 	.word	0x0000de45
    cd00:	0000c669 	.word	0x0000c669
    cd04:	000190e0 	.word	0x000190e0
    cd08:	00017535 	.word	0x00017535
    cd0c:	000190ec 	.word	0x000190ec
    cd10:	00017651 	.word	0x00017651
    cd14:	00017569 	.word	0x00017569
    cd18:	00150400 	.word	0x00150400
    cd1c:	0000cab5 	.word	0x0000cab5
    cd20:	0000dec5 	.word	0x0000dec5
    cd24:	0000106c 	.word	0x0000106c
    cd28:	0000cad1 	.word	0x0000cad1
    cd2c:	00018df8 	.word	0x00018df8
    cd30:	00018db0 	.word	0x00018db0
    cd34:	000190fc 	.word	0x000190fc

0000cd38 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd3a:	46ce      	mov	lr, r9
    cd3c:	4647      	mov	r7, r8
    cd3e:	b580      	push	{r7, lr}
    cd40:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    cd42:	2200      	movs	r2, #0
    cd44:	4bd1      	ldr	r3, [pc, #836]	; (d08c <hif_handle_isr+0x354>)
    cd46:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    cd48:	4699      	mov	r9, r3
    cd4a:	4698      	mov	r8, r3
    cd4c:	e081      	b.n	ce52 <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    cd4e:	4bcf      	ldr	r3, [pc, #828]	; (d08c <hif_handle_isr+0x354>)
    cd50:	9a05      	ldr	r2, [sp, #20]
    cd52:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    cd54:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    cd56:	af04      	add	r7, sp, #16
    cd58:	2204      	movs	r2, #4
    cd5a:	0039      	movs	r1, r7
    cd5c:	9805      	ldr	r0, [sp, #20]
    cd5e:	4bcc      	ldr	r3, [pc, #816]	; (d090 <hif_handle_isr+0x358>)
    cd60:	4798      	blx	r3
    cd62:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    cd64:	887b      	ldrh	r3, [r7, #2]
    cd66:	b29b      	uxth	r3, r3
    cd68:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d134      	bne.n	cdd8 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    cd6e:	ab04      	add	r3, sp, #16
    cd70:	885b      	ldrh	r3, [r3, #2]
    cd72:	b29b      	uxth	r3, r3
    cd74:	429e      	cmp	r6, r3
    cd76:	d004      	beq.n	cd82 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    cd78:	ab04      	add	r3, sp, #16
    cd7a:	885b      	ldrh	r3, [r3, #2]
    cd7c:	1af3      	subs	r3, r6, r3
    cd7e:	2b04      	cmp	r3, #4
    cd80:	dc3a      	bgt.n	cdf8 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    cd82:	ab04      	add	r3, sp, #16
    cd84:	781b      	ldrb	r3, [r3, #0]
    cd86:	2b01      	cmp	r3, #1
    cd88:	d04f      	beq.n	ce2a <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    cd8a:	ab04      	add	r3, sp, #16
    cd8c:	781b      	ldrb	r3, [r3, #0]
    cd8e:	2b02      	cmp	r3, #2
    cd90:	d07d      	beq.n	ce8e <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    cd92:	ab04      	add	r3, sp, #16
    cd94:	781b      	ldrb	r3, [r3, #0]
    cd96:	2b04      	cmp	r3, #4
    cd98:	d100      	bne.n	cd9c <hif_handle_isr+0x64>
    cd9a:	e095      	b.n	cec8 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    cd9c:	ab04      	add	r3, sp, #16
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	2b06      	cmp	r3, #6
    cda2:	d100      	bne.n	cda6 <hif_handle_isr+0x6e>
    cda4:	e0ad      	b.n	cf02 <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    cda6:	ab04      	add	r3, sp, #16
    cda8:	781b      	ldrb	r3, [r3, #0]
    cdaa:	2b07      	cmp	r3, #7
    cdac:	d100      	bne.n	cdb0 <hif_handle_isr+0x78>
    cdae:	e0c5      	b.n	cf3c <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    cdb0:	ab04      	add	r3, sp, #16
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	2b05      	cmp	r3, #5
    cdb6:	d100      	bne.n	cdba <hif_handle_isr+0x82>
    cdb8:	e0dc      	b.n	cf74 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    cdba:	2284      	movs	r2, #132	; 0x84
    cdbc:	0092      	lsls	r2, r2, #2
    cdbe:	49b5      	ldr	r1, [pc, #724]	; (d094 <hif_handle_isr+0x35c>)
    cdc0:	48b5      	ldr	r0, [pc, #724]	; (d098 <hif_handle_isr+0x360>)
    cdc2:	4bb6      	ldr	r3, [pc, #728]	; (d09c <hif_handle_isr+0x364>)
    cdc4:	4798      	blx	r3
    cdc6:	48b6      	ldr	r0, [pc, #728]	; (d0a0 <hif_handle_isr+0x368>)
    cdc8:	4bb6      	ldr	r3, [pc, #728]	; (d0a4 <hif_handle_isr+0x36c>)
    cdca:	4798      	blx	r3
    cdcc:	200d      	movs	r0, #13
    cdce:	4bb6      	ldr	r3, [pc, #728]	; (d0a8 <hif_handle_isr+0x370>)
    cdd0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    cdd2:	2406      	movs	r4, #6
    cdd4:	4264      	negs	r4, r4
    cdd6:	e119      	b.n	d00c <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    cdd8:	22e9      	movs	r2, #233	; 0xe9
    cdda:	0052      	lsls	r2, r2, #1
    cddc:	49ad      	ldr	r1, [pc, #692]	; (d094 <hif_handle_isr+0x35c>)
    cdde:	48ae      	ldr	r0, [pc, #696]	; (d098 <hif_handle_isr+0x360>)
    cde0:	4bae      	ldr	r3, [pc, #696]	; (d09c <hif_handle_isr+0x364>)
    cde2:	4798      	blx	r3
    cde4:	48b1      	ldr	r0, [pc, #708]	; (d0ac <hif_handle_isr+0x374>)
    cde6:	4baf      	ldr	r3, [pc, #700]	; (d0a4 <hif_handle_isr+0x36c>)
    cde8:	4798      	blx	r3
    cdea:	200d      	movs	r0, #13
    cdec:	4bae      	ldr	r3, [pc, #696]	; (d0a8 <hif_handle_isr+0x370>)
    cdee:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    cdf0:	2001      	movs	r0, #1
    cdf2:	4baf      	ldr	r3, [pc, #700]	; (d0b0 <hif_handle_isr+0x378>)
    cdf4:	4798      	blx	r3
    cdf6:	e109      	b.n	d00c <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    cdf8:	22dc      	movs	r2, #220	; 0xdc
    cdfa:	32ff      	adds	r2, #255	; 0xff
    cdfc:	49a5      	ldr	r1, [pc, #660]	; (d094 <hif_handle_isr+0x35c>)
    cdfe:	48a6      	ldr	r0, [pc, #664]	; (d098 <hif_handle_isr+0x360>)
    ce00:	4ca6      	ldr	r4, [pc, #664]	; (d09c <hif_handle_isr+0x364>)
    ce02:	47a0      	blx	r4
    ce04:	a904      	add	r1, sp, #16
    ce06:	884a      	ldrh	r2, [r1, #2]
    ce08:	b292      	uxth	r2, r2
    ce0a:	780b      	ldrb	r3, [r1, #0]
    ce0c:	b2db      	uxtb	r3, r3
    ce0e:	7849      	ldrb	r1, [r1, #1]
    ce10:	9100      	str	r1, [sp, #0]
    ce12:	0031      	movs	r1, r6
    ce14:	48a7      	ldr	r0, [pc, #668]	; (d0b4 <hif_handle_isr+0x37c>)
    ce16:	47a0      	blx	r4
    ce18:	200d      	movs	r0, #13
    ce1a:	4ba3      	ldr	r3, [pc, #652]	; (d0a8 <hif_handle_isr+0x370>)
    ce1c:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    ce1e:	2001      	movs	r0, #1
    ce20:	4ba3      	ldr	r3, [pc, #652]	; (d0b0 <hif_handle_isr+0x378>)
    ce22:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    ce24:	2406      	movs	r4, #6
    ce26:	4264      	negs	r4, r4
    ce28:	e0f0      	b.n	d00c <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    ce2a:	4b98      	ldr	r3, [pc, #608]	; (d08c <hif_handle_isr+0x354>)
    ce2c:	691b      	ldr	r3, [r3, #16]
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d020      	beq.n	ce74 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ce32:	4b96      	ldr	r3, [pc, #600]	; (d08c <hif_handle_isr+0x354>)
    ce34:	691b      	ldr	r3, [r3, #16]
    ce36:	aa04      	add	r2, sp, #16
    ce38:	7850      	ldrb	r0, [r2, #1]
    ce3a:	b2c0      	uxtb	r0, r0
    ce3c:	8851      	ldrh	r1, [r2, #2]
    ce3e:	9a05      	ldr	r2, [sp, #20]
    ce40:	3208      	adds	r2, #8
    ce42:	3908      	subs	r1, #8
    ce44:	b289      	uxth	r1, r1
    ce46:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    ce48:	4b90      	ldr	r3, [pc, #576]	; (d08c <hif_handle_isr+0x354>)
    ce4a:	789b      	ldrb	r3, [r3, #2]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d000      	beq.n	ce52 <hif_handle_isr+0x11a>
    ce50:	e0a1      	b.n	cf96 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    ce52:	464b      	mov	r3, r9
    ce54:	78db      	ldrb	r3, [r3, #3]
    ce56:	2b00      	cmp	r3, #0
    ce58:	d100      	bne.n	ce5c <hif_handle_isr+0x124>
    ce5a:	e15b      	b.n	d114 <hif_handle_isr+0x3dc>
    ce5c:	4643      	mov	r3, r8
    ce5e:	791b      	ldrb	r3, [r3, #4]
    ce60:	2b00      	cmp	r3, #0
    ce62:	d000      	beq.n	ce66 <hif_handle_isr+0x12e>
    ce64:	e156      	b.n	d114 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    ce66:	4a89      	ldr	r2, [pc, #548]	; (d08c <hif_handle_isr+0x354>)
    ce68:	78d3      	ldrb	r3, [r2, #3]
    ce6a:	3b01      	subs	r3, #1
    ce6c:	b2db      	uxtb	r3, r3
    ce6e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    ce70:	4d91      	ldr	r5, [pc, #580]	; (d0b8 <hif_handle_isr+0x380>)
    ce72:	e0d6      	b.n	d022 <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    ce74:	22e8      	movs	r2, #232	; 0xe8
    ce76:	32ff      	adds	r2, #255	; 0xff
    ce78:	4986      	ldr	r1, [pc, #536]	; (d094 <hif_handle_isr+0x35c>)
    ce7a:	4887      	ldr	r0, [pc, #540]	; (d098 <hif_handle_isr+0x360>)
    ce7c:	4b87      	ldr	r3, [pc, #540]	; (d09c <hif_handle_isr+0x364>)
    ce7e:	4798      	blx	r3
    ce80:	488e      	ldr	r0, [pc, #568]	; (d0bc <hif_handle_isr+0x384>)
    ce82:	4b88      	ldr	r3, [pc, #544]	; (d0a4 <hif_handle_isr+0x36c>)
    ce84:	4798      	blx	r3
    ce86:	200d      	movs	r0, #13
    ce88:	4b87      	ldr	r3, [pc, #540]	; (d0a8 <hif_handle_isr+0x370>)
    ce8a:	4798      	blx	r3
    ce8c:	e7dc      	b.n	ce48 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    ce8e:	4b7f      	ldr	r3, [pc, #508]	; (d08c <hif_handle_isr+0x354>)
    ce90:	695b      	ldr	r3, [r3, #20]
    ce92:	2b00      	cmp	r3, #0
    ce94:	d00b      	beq.n	ceae <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ce96:	4b7d      	ldr	r3, [pc, #500]	; (d08c <hif_handle_isr+0x354>)
    ce98:	695b      	ldr	r3, [r3, #20]
    ce9a:	aa04      	add	r2, sp, #16
    ce9c:	7850      	ldrb	r0, [r2, #1]
    ce9e:	b2c0      	uxtb	r0, r0
    cea0:	8851      	ldrh	r1, [r2, #2]
    cea2:	9a05      	ldr	r2, [sp, #20]
    cea4:	3208      	adds	r2, #8
    cea6:	3908      	subs	r1, #8
    cea8:	b289      	uxth	r1, r1
    ceaa:	4798      	blx	r3
    ceac:	e7cc      	b.n	ce48 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    ceae:	22f0      	movs	r2, #240	; 0xf0
    ceb0:	32ff      	adds	r2, #255	; 0xff
    ceb2:	4978      	ldr	r1, [pc, #480]	; (d094 <hif_handle_isr+0x35c>)
    ceb4:	4878      	ldr	r0, [pc, #480]	; (d098 <hif_handle_isr+0x360>)
    ceb6:	4b79      	ldr	r3, [pc, #484]	; (d09c <hif_handle_isr+0x364>)
    ceb8:	4798      	blx	r3
    ceba:	4881      	ldr	r0, [pc, #516]	; (d0c0 <hif_handle_isr+0x388>)
    cebc:	4b79      	ldr	r3, [pc, #484]	; (d0a4 <hif_handle_isr+0x36c>)
    cebe:	4798      	blx	r3
    cec0:	200d      	movs	r0, #13
    cec2:	4b79      	ldr	r3, [pc, #484]	; (d0a8 <hif_handle_isr+0x370>)
    cec4:	4798      	blx	r3
    cec6:	e7bf      	b.n	ce48 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    cec8:	4b70      	ldr	r3, [pc, #448]	; (d08c <hif_handle_isr+0x354>)
    ceca:	699b      	ldr	r3, [r3, #24]
    cecc:	2b00      	cmp	r3, #0
    cece:	d00b      	beq.n	cee8 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ced0:	4b6e      	ldr	r3, [pc, #440]	; (d08c <hif_handle_isr+0x354>)
    ced2:	699b      	ldr	r3, [r3, #24]
    ced4:	aa04      	add	r2, sp, #16
    ced6:	7850      	ldrb	r0, [r2, #1]
    ced8:	b2c0      	uxtb	r0, r0
    ceda:	8851      	ldrh	r1, [r2, #2]
    cedc:	9a05      	ldr	r2, [sp, #20]
    cede:	3208      	adds	r2, #8
    cee0:	3908      	subs	r1, #8
    cee2:	b289      	uxth	r1, r1
    cee4:	4798      	blx	r3
    cee6:	e7af      	b.n	ce48 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    cee8:	22f8      	movs	r2, #248	; 0xf8
    ceea:	32ff      	adds	r2, #255	; 0xff
    ceec:	4969      	ldr	r1, [pc, #420]	; (d094 <hif_handle_isr+0x35c>)
    ceee:	486a      	ldr	r0, [pc, #424]	; (d098 <hif_handle_isr+0x360>)
    cef0:	4b6a      	ldr	r3, [pc, #424]	; (d09c <hif_handle_isr+0x364>)
    cef2:	4798      	blx	r3
    cef4:	4873      	ldr	r0, [pc, #460]	; (d0c4 <hif_handle_isr+0x38c>)
    cef6:	4b6b      	ldr	r3, [pc, #428]	; (d0a4 <hif_handle_isr+0x36c>)
    cef8:	4798      	blx	r3
    cefa:	200d      	movs	r0, #13
    cefc:	4b6a      	ldr	r3, [pc, #424]	; (d0a8 <hif_handle_isr+0x370>)
    cefe:	4798      	blx	r3
    cf00:	e7a2      	b.n	ce48 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    cf02:	4b62      	ldr	r3, [pc, #392]	; (d08c <hif_handle_isr+0x354>)
    cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cf06:	2b00      	cmp	r3, #0
    cf08:	d00b      	beq.n	cf22 <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cf0a:	4b60      	ldr	r3, [pc, #384]	; (d08c <hif_handle_isr+0x354>)
    cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cf0e:	aa04      	add	r2, sp, #16
    cf10:	7850      	ldrb	r0, [r2, #1]
    cf12:	b2c0      	uxtb	r0, r0
    cf14:	8851      	ldrh	r1, [r2, #2]
    cf16:	9a05      	ldr	r2, [sp, #20]
    cf18:	3208      	adds	r2, #8
    cf1a:	3908      	subs	r1, #8
    cf1c:	b289      	uxth	r1, r1
    cf1e:	4798      	blx	r3
    cf20:	e792      	b.n	ce48 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    cf22:	2280      	movs	r2, #128	; 0x80
    cf24:	0092      	lsls	r2, r2, #2
    cf26:	495b      	ldr	r1, [pc, #364]	; (d094 <hif_handle_isr+0x35c>)
    cf28:	485b      	ldr	r0, [pc, #364]	; (d098 <hif_handle_isr+0x360>)
    cf2a:	4b5c      	ldr	r3, [pc, #368]	; (d09c <hif_handle_isr+0x364>)
    cf2c:	4798      	blx	r3
    cf2e:	4866      	ldr	r0, [pc, #408]	; (d0c8 <hif_handle_isr+0x390>)
    cf30:	4b5c      	ldr	r3, [pc, #368]	; (d0a4 <hif_handle_isr+0x36c>)
    cf32:	4798      	blx	r3
    cf34:	200d      	movs	r0, #13
    cf36:	4b5c      	ldr	r3, [pc, #368]	; (d0a8 <hif_handle_isr+0x370>)
    cf38:	4798      	blx	r3
    cf3a:	e785      	b.n	ce48 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    cf3c:	4b53      	ldr	r3, [pc, #332]	; (d08c <hif_handle_isr+0x354>)
    cf3e:	69db      	ldr	r3, [r3, #28]
    cf40:	2b00      	cmp	r3, #0
    cf42:	d00b      	beq.n	cf5c <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cf44:	4b51      	ldr	r3, [pc, #324]	; (d08c <hif_handle_isr+0x354>)
    cf46:	69db      	ldr	r3, [r3, #28]
    cf48:	aa04      	add	r2, sp, #16
    cf4a:	7850      	ldrb	r0, [r2, #1]
    cf4c:	b2c0      	uxtb	r0, r0
    cf4e:	8851      	ldrh	r1, [r2, #2]
    cf50:	9a05      	ldr	r2, [sp, #20]
    cf52:	3208      	adds	r2, #8
    cf54:	3908      	subs	r1, #8
    cf56:	b289      	uxth	r1, r1
    cf58:	4798      	blx	r3
    cf5a:	e775      	b.n	ce48 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    cf5c:	4a5b      	ldr	r2, [pc, #364]	; (d0cc <hif_handle_isr+0x394>)
    cf5e:	494d      	ldr	r1, [pc, #308]	; (d094 <hif_handle_isr+0x35c>)
    cf60:	484d      	ldr	r0, [pc, #308]	; (d098 <hif_handle_isr+0x360>)
    cf62:	4b4e      	ldr	r3, [pc, #312]	; (d09c <hif_handle_isr+0x364>)
    cf64:	4798      	blx	r3
    cf66:	485a      	ldr	r0, [pc, #360]	; (d0d0 <hif_handle_isr+0x398>)
    cf68:	4b4e      	ldr	r3, [pc, #312]	; (d0a4 <hif_handle_isr+0x36c>)
    cf6a:	4798      	blx	r3
    cf6c:	200d      	movs	r0, #13
    cf6e:	4b4e      	ldr	r3, [pc, #312]	; (d0a8 <hif_handle_isr+0x370>)
    cf70:	4798      	blx	r3
    cf72:	e769      	b.n	ce48 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    cf74:	4b45      	ldr	r3, [pc, #276]	; (d08c <hif_handle_isr+0x354>)
    cf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d100      	bne.n	cf7e <hif_handle_isr+0x246>
    cf7c:	e764      	b.n	ce48 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cf7e:	4b43      	ldr	r3, [pc, #268]	; (d08c <hif_handle_isr+0x354>)
    cf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cf82:	aa04      	add	r2, sp, #16
    cf84:	7850      	ldrb	r0, [r2, #1]
    cf86:	b2c0      	uxtb	r0, r0
    cf88:	8851      	ldrh	r1, [r2, #2]
    cf8a:	9a05      	ldr	r2, [sp, #20]
    cf8c:	3208      	adds	r2, #8
    cf8e:	3908      	subs	r1, #8
    cf90:	b289      	uxth	r1, r1
    cf92:	4798      	blx	r3
    cf94:	e758      	b.n	ce48 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    cf96:	4a4f      	ldr	r2, [pc, #316]	; (d0d4 <hif_handle_isr+0x39c>)
    cf98:	493e      	ldr	r1, [pc, #248]	; (d094 <hif_handle_isr+0x35c>)
    cf9a:	483f      	ldr	r0, [pc, #252]	; (d098 <hif_handle_isr+0x360>)
    cf9c:	4c3f      	ldr	r4, [pc, #252]	; (d09c <hif_handle_isr+0x364>)
    cf9e:	47a0      	blx	r4
    cfa0:	ab04      	add	r3, sp, #16
    cfa2:	7819      	ldrb	r1, [r3, #0]
    cfa4:	b2c9      	uxtb	r1, r1
    cfa6:	785a      	ldrb	r2, [r3, #1]
    cfa8:	b2d2      	uxtb	r2, r2
    cfaa:	484b      	ldr	r0, [pc, #300]	; (d0d8 <hif_handle_isr+0x3a0>)
    cfac:	47a0      	blx	r4
    cfae:	200d      	movs	r0, #13
    cfb0:	4b3d      	ldr	r3, [pc, #244]	; (d0a8 <hif_handle_isr+0x370>)
    cfb2:	4798      	blx	r3
					ret = hif_set_rx_done();
    cfb4:	4b49      	ldr	r3, [pc, #292]	; (d0dc <hif_handle_isr+0x3a4>)
    cfb6:	4798      	blx	r3
    cfb8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    cfba:	d127      	bne.n	d00c <hif_handle_isr+0x2d4>
    cfbc:	e749      	b.n	ce52 <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    cfbe:	4a48      	ldr	r2, [pc, #288]	; (d0e0 <hif_handle_isr+0x3a8>)
    cfc0:	4934      	ldr	r1, [pc, #208]	; (d094 <hif_handle_isr+0x35c>)
    cfc2:	4835      	ldr	r0, [pc, #212]	; (d098 <hif_handle_isr+0x360>)
    cfc4:	4b35      	ldr	r3, [pc, #212]	; (d09c <hif_handle_isr+0x364>)
    cfc6:	4798      	blx	r3
    cfc8:	4846      	ldr	r0, [pc, #280]	; (d0e4 <hif_handle_isr+0x3ac>)
    cfca:	4b36      	ldr	r3, [pc, #216]	; (d0a4 <hif_handle_isr+0x36c>)
    cfcc:	4798      	blx	r3
    cfce:	200d      	movs	r0, #13
    cfd0:	4b35      	ldr	r3, [pc, #212]	; (d0a8 <hif_handle_isr+0x370>)
    cfd2:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    cfd4:	2402      	movs	r4, #2
    cfd6:	4264      	negs	r4, r4
    cfd8:	e018      	b.n	d00c <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    cfda:	4a43      	ldr	r2, [pc, #268]	; (d0e8 <hif_handle_isr+0x3b0>)
    cfdc:	492d      	ldr	r1, [pc, #180]	; (d094 <hif_handle_isr+0x35c>)
    cfde:	482e      	ldr	r0, [pc, #184]	; (d098 <hif_handle_isr+0x360>)
    cfe0:	4c2e      	ldr	r4, [pc, #184]	; (d09c <hif_handle_isr+0x364>)
    cfe2:	47a0      	blx	r4
    cfe4:	9903      	ldr	r1, [sp, #12]
    cfe6:	4841      	ldr	r0, [pc, #260]	; (d0ec <hif_handle_isr+0x3b4>)
    cfe8:	47a0      	blx	r4
    cfea:	200d      	movs	r0, #13
    cfec:	4b2e      	ldr	r3, [pc, #184]	; (d0a8 <hif_handle_isr+0x370>)
    cfee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    cff0:	240c      	movs	r4, #12
    cff2:	4264      	negs	r4, r4
    cff4:	e00a      	b.n	d00c <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    cff6:	4a3e      	ldr	r2, [pc, #248]	; (d0f0 <hif_handle_isr+0x3b8>)
    cff8:	4926      	ldr	r1, [pc, #152]	; (d094 <hif_handle_isr+0x35c>)
    cffa:	4827      	ldr	r0, [pc, #156]	; (d098 <hif_handle_isr+0x360>)
    cffc:	4b27      	ldr	r3, [pc, #156]	; (d09c <hif_handle_isr+0x364>)
    cffe:	4798      	blx	r3
    d000:	483c      	ldr	r0, [pc, #240]	; (d0f4 <hif_handle_isr+0x3bc>)
    d002:	4b28      	ldr	r3, [pc, #160]	; (d0a4 <hif_handle_isr+0x36c>)
    d004:	4798      	blx	r3
    d006:	200d      	movs	r0, #13
    d008:	4b27      	ldr	r3, [pc, #156]	; (d0a8 <hif_handle_isr+0x370>)
    d00a:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    d00c:	4a3a      	ldr	r2, [pc, #232]	; (d0f8 <hif_handle_isr+0x3c0>)
    d00e:	493b      	ldr	r1, [pc, #236]	; (d0fc <hif_handle_isr+0x3c4>)
    d010:	4821      	ldr	r0, [pc, #132]	; (d098 <hif_handle_isr+0x360>)
    d012:	4f22      	ldr	r7, [pc, #136]	; (d09c <hif_handle_isr+0x364>)
    d014:	47b8      	blx	r7
    d016:	0021      	movs	r1, r4
    d018:	4839      	ldr	r0, [pc, #228]	; (d100 <hif_handle_isr+0x3c8>)
    d01a:	47b8      	blx	r7
    d01c:	200d      	movs	r0, #13
    d01e:	4b22      	ldr	r3, [pc, #136]	; (d0a8 <hif_handle_isr+0x370>)
    d020:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d022:	a903      	add	r1, sp, #12
    d024:	4837      	ldr	r0, [pc, #220]	; (d104 <hif_handle_isr+0x3cc>)
    d026:	47a8      	blx	r5
    d028:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    d02a:	d1e4      	bne.n	cff6 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    d02c:	9b03      	ldr	r3, [sp, #12]
    d02e:	07db      	lsls	r3, r3, #31
    d030:	d5d3      	bpl.n	cfda <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    d032:	2000      	movs	r0, #0
    d034:	4b1e      	ldr	r3, [pc, #120]	; (d0b0 <hif_handle_isr+0x378>)
    d036:	4798      	blx	r3
			reg &= ~NBIT0;
    d038:	2301      	movs	r3, #1
    d03a:	9903      	ldr	r1, [sp, #12]
    d03c:	4399      	bics	r1, r3
    d03e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d040:	4830      	ldr	r0, [pc, #192]	; (d104 <hif_handle_isr+0x3cc>)
    d042:	4b31      	ldr	r3, [pc, #196]	; (d108 <hif_handle_isr+0x3d0>)
    d044:	4798      	blx	r3
    d046:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    d048:	d1e0      	bne.n	d00c <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    d04a:	2201      	movs	r2, #1
    d04c:	4b0f      	ldr	r3, [pc, #60]	; (d08c <hif_handle_isr+0x354>)
    d04e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d050:	9b03      	ldr	r3, [sp, #12]
    d052:	049e      	lsls	r6, r3, #18
    d054:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    d056:	d0b2      	beq.n	cfbe <hif_handle_isr+0x286>
				uint32 address = 0;
    d058:	2300      	movs	r3, #0
    d05a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d05c:	a905      	add	r1, sp, #20
    d05e:	482b      	ldr	r0, [pc, #172]	; (d10c <hif_handle_isr+0x3d4>)
    d060:	4b15      	ldr	r3, [pc, #84]	; (d0b8 <hif_handle_isr+0x380>)
    d062:	4798      	blx	r3
    d064:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    d066:	d100      	bne.n	d06a <hif_handle_isr+0x332>
    d068:	e671      	b.n	cd4e <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d06a:	22e4      	movs	r2, #228	; 0xe4
    d06c:	0052      	lsls	r2, r2, #1
    d06e:	4909      	ldr	r1, [pc, #36]	; (d094 <hif_handle_isr+0x35c>)
    d070:	4809      	ldr	r0, [pc, #36]	; (d098 <hif_handle_isr+0x360>)
    d072:	4b0a      	ldr	r3, [pc, #40]	; (d09c <hif_handle_isr+0x364>)
    d074:	4798      	blx	r3
    d076:	4826      	ldr	r0, [pc, #152]	; (d110 <hif_handle_isr+0x3d8>)
    d078:	4b0a      	ldr	r3, [pc, #40]	; (d0a4 <hif_handle_isr+0x36c>)
    d07a:	4798      	blx	r3
    d07c:	200d      	movs	r0, #13
    d07e:	4b0a      	ldr	r3, [pc, #40]	; (d0a8 <hif_handle_isr+0x370>)
    d080:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d082:	2001      	movs	r0, #1
    d084:	4b0a      	ldr	r3, [pc, #40]	; (d0b0 <hif_handle_isr+0x378>)
    d086:	4798      	blx	r3
    d088:	e7c0      	b.n	d00c <hif_handle_isr+0x2d4>
    d08a:	46c0      	nop			; (mov r8, r8)
    d08c:	2000137c 	.word	0x2000137c
    d090:	0000de5d 	.word	0x0000de5d
    d094:	00018e04 	.word	0x00018e04
    d098:	00018db0 	.word	0x00018db0
    d09c:	00017535 	.word	0x00017535
    d0a0:	00018f60 	.word	0x00018f60
    d0a4:	00017651 	.word	0x00017651
    d0a8:	00017569 	.word	0x00017569
    d0ac:	00018e5c 	.word	0x00018e5c
    d0b0:	0000c701 	.word	0x0000c701
    d0b4:	00018e74 	.word	0x00018e74
    d0b8:	0000de45 	.word	0x0000de45
    d0bc:	00018eb4 	.word	0x00018eb4
    d0c0:	00018ed4 	.word	0x00018ed4
    d0c4:	00018ef8 	.word	0x00018ef8
    d0c8:	00018f18 	.word	0x00018f18
    d0cc:	00000207 	.word	0x00000207
    d0d0:	00018f3c 	.word	0x00018f3c
    d0d4:	00000216 	.word	0x00000216
    d0d8:	00018f78 	.word	0x00018f78
    d0dc:	0000ca35 	.word	0x0000ca35
    d0e0:	0000021d 	.word	0x0000021d
    d0e4:	00018fa4 	.word	0x00018fa4
    d0e8:	00000225 	.word	0x00000225
    d0ec:	00018fb8 	.word	0x00018fb8
    d0f0:	0000022e 	.word	0x0000022e
    d0f4:	00018fd4 	.word	0x00018fd4
    d0f8:	00000257 	.word	0x00000257
    d0fc:	00018e0c 	.word	0x00018e0c
    d100:	00018ff8 	.word	0x00018ff8
    d104:	00001070 	.word	0x00001070
    d108:	0000de51 	.word	0x0000de51
    d10c:	00001084 	.word	0x00001084
    d110:	00018e38 	.word	0x00018e38
			}
		}
	}

	return ret;
}
    d114:	2000      	movs	r0, #0
    d116:	b007      	add	sp, #28
    d118:	bc0c      	pop	{r2, r3}
    d11a:	4690      	mov	r8, r2
    d11c:	4699      	mov	r9, r3
    d11e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d120 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d120:	b570      	push	{r4, r5, r6, lr}
    d122:	0014      	movs	r4, r2
    d124:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d126:	2800      	cmp	r0, #0
    d128:	d003      	beq.n	d132 <hif_receive+0x12>
    d12a:	2900      	cmp	r1, #0
    d12c:	d001      	beq.n	d132 <hif_receive+0x12>
    d12e:	2a00      	cmp	r2, #0
    d130:	d113      	bne.n	d15a <hif_receive+0x3a>
	{
		if(isDone)
    d132:	2d00      	cmp	r5, #0
    d134:	d002      	beq.n	d13c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d136:	4b28      	ldr	r3, [pc, #160]	; (d1d8 <hif_receive+0xb8>)
    d138:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    d13a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    d13c:	229e      	movs	r2, #158	; 0x9e
    d13e:	0092      	lsls	r2, r2, #2
    d140:	4926      	ldr	r1, [pc, #152]	; (d1dc <hif_receive+0xbc>)
    d142:	4827      	ldr	r0, [pc, #156]	; (d1e0 <hif_receive+0xc0>)
    d144:	4b27      	ldr	r3, [pc, #156]	; (d1e4 <hif_receive+0xc4>)
    d146:	4798      	blx	r3
    d148:	4827      	ldr	r0, [pc, #156]	; (d1e8 <hif_receive+0xc8>)
    d14a:	4b28      	ldr	r3, [pc, #160]	; (d1ec <hif_receive+0xcc>)
    d14c:	4798      	blx	r3
    d14e:	200d      	movs	r0, #13
    d150:	4b27      	ldr	r3, [pc, #156]	; (d1f0 <hif_receive+0xd0>)
    d152:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d154:	200c      	movs	r0, #12
    d156:	4240      	negs	r0, r0
    d158:	e7ef      	b.n	d13a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    d15a:	4b26      	ldr	r3, [pc, #152]	; (d1f4 <hif_receive+0xd4>)
    d15c:	68db      	ldr	r3, [r3, #12]
    d15e:	429a      	cmp	r2, r3
    d160:	d81a      	bhi.n	d198 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d162:	4b24      	ldr	r3, [pc, #144]	; (d1f4 <hif_receive+0xd4>)
    d164:	689b      	ldr	r3, [r3, #8]
    d166:	4298      	cmp	r0, r3
    d168:	d327      	bcc.n	d1ba <hif_receive+0x9a>
    d16a:	1886      	adds	r6, r0, r2
    d16c:	4a21      	ldr	r2, [pc, #132]	; (d1f4 <hif_receive+0xd4>)
    d16e:	6893      	ldr	r3, [r2, #8]
    d170:	68d2      	ldr	r2, [r2, #12]
    d172:	189b      	adds	r3, r3, r2
    d174:	429e      	cmp	r6, r3
    d176:	d820      	bhi.n	d1ba <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d178:	0022      	movs	r2, r4
    d17a:	4b1f      	ldr	r3, [pc, #124]	; (d1f8 <hif_receive+0xd8>)
    d17c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    d17e:	2800      	cmp	r0, #0
    d180:	d1db      	bne.n	d13a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d182:	4a1c      	ldr	r2, [pc, #112]	; (d1f4 <hif_receive+0xd4>)
    d184:	6893      	ldr	r3, [r2, #8]
    d186:	68d2      	ldr	r2, [r2, #12]
    d188:	189b      	adds	r3, r3, r2
    d18a:	429e      	cmp	r6, r3
    d18c:	d001      	beq.n	d192 <hif_receive+0x72>
    d18e:	2d00      	cmp	r5, #0
    d190:	d0d3      	beq.n	d13a <hif_receive+0x1a>
		ret = hif_set_rx_done();
    d192:	4b11      	ldr	r3, [pc, #68]	; (d1d8 <hif_receive+0xb8>)
    d194:	4798      	blx	r3
    d196:	e7d0      	b.n	d13a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d198:	22a0      	movs	r2, #160	; 0xa0
    d19a:	0092      	lsls	r2, r2, #2
    d19c:	490f      	ldr	r1, [pc, #60]	; (d1dc <hif_receive+0xbc>)
    d19e:	4810      	ldr	r0, [pc, #64]	; (d1e0 <hif_receive+0xc0>)
    d1a0:	4d10      	ldr	r5, [pc, #64]	; (d1e4 <hif_receive+0xc4>)
    d1a2:	47a8      	blx	r5
    d1a4:	4b13      	ldr	r3, [pc, #76]	; (d1f4 <hif_receive+0xd4>)
    d1a6:	68da      	ldr	r2, [r3, #12]
    d1a8:	0021      	movs	r1, r4
    d1aa:	4814      	ldr	r0, [pc, #80]	; (d1fc <hif_receive+0xdc>)
    d1ac:	47a8      	blx	r5
    d1ae:	200d      	movs	r0, #13
    d1b0:	4b0f      	ldr	r3, [pc, #60]	; (d1f0 <hif_receive+0xd0>)
    d1b2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d1b4:	200c      	movs	r0, #12
    d1b6:	4240      	negs	r0, r0
		goto ERR1;
    d1b8:	e7bf      	b.n	d13a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d1ba:	4a11      	ldr	r2, [pc, #68]	; (d200 <hif_receive+0xe0>)
    d1bc:	4907      	ldr	r1, [pc, #28]	; (d1dc <hif_receive+0xbc>)
    d1be:	4808      	ldr	r0, [pc, #32]	; (d1e0 <hif_receive+0xc0>)
    d1c0:	4b08      	ldr	r3, [pc, #32]	; (d1e4 <hif_receive+0xc4>)
    d1c2:	4798      	blx	r3
    d1c4:	480f      	ldr	r0, [pc, #60]	; (d204 <hif_receive+0xe4>)
    d1c6:	4b09      	ldr	r3, [pc, #36]	; (d1ec <hif_receive+0xcc>)
    d1c8:	4798      	blx	r3
    d1ca:	200d      	movs	r0, #13
    d1cc:	4b08      	ldr	r3, [pc, #32]	; (d1f0 <hif_receive+0xd0>)
    d1ce:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d1d0:	200c      	movs	r0, #12
    d1d2:	4240      	negs	r0, r0
		goto ERR1;
    d1d4:	e7b1      	b.n	d13a <hif_receive+0x1a>
    d1d6:	46c0      	nop			; (mov r8, r8)
    d1d8:	0000ca35 	.word	0x0000ca35
    d1dc:	00018e1c 	.word	0x00018e1c
    d1e0:	00018db0 	.word	0x00018db0
    d1e4:	00017535 	.word	0x00017535
    d1e8:	00019028 	.word	0x00019028
    d1ec:	00017651 	.word	0x00017651
    d1f0:	00017569 	.word	0x00017569
    d1f4:	2000137c 	.word	0x2000137c
    d1f8:	0000de5d 	.word	0x0000de5d
    d1fc:	00019048 	.word	0x00019048
    d200:	00000286 	.word	0x00000286
    d204:	00019090 	.word	0x00019090

0000d208 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d208:	b570      	push	{r4, r5, r6, lr}
    d20a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    d20c:	2807      	cmp	r0, #7
    d20e:	d81f      	bhi.n	d250 <hif_register_cb+0x48>
    d210:	0083      	lsls	r3, r0, #2
    d212:	4a16      	ldr	r2, [pc, #88]	; (d26c <hif_register_cb+0x64>)
    d214:	58d3      	ldr	r3, [r2, r3]
    d216:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d218:	4b15      	ldr	r3, [pc, #84]	; (d270 <hif_register_cb+0x68>)
    d21a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    d21c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    d21e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    d220:	4b13      	ldr	r3, [pc, #76]	; (d270 <hif_register_cb+0x68>)
    d222:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    d224:	2000      	movs	r0, #0
			break;
    d226:	e7fa      	b.n	d21e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    d228:	4b11      	ldr	r3, [pc, #68]	; (d270 <hif_register_cb+0x68>)
    d22a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    d22c:	2000      	movs	r0, #0
			break;
    d22e:	e7f6      	b.n	d21e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    d230:	4b0f      	ldr	r3, [pc, #60]	; (d270 <hif_register_cb+0x68>)
    d232:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    d234:	2000      	movs	r0, #0
			break;
    d236:	e7f2      	b.n	d21e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    d238:	4b0d      	ldr	r3, [pc, #52]	; (d270 <hif_register_cb+0x68>)
    d23a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    d23c:	2000      	movs	r0, #0
			break;
    d23e:	e7ee      	b.n	d21e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    d240:	4b0b      	ldr	r3, [pc, #44]	; (d270 <hif_register_cb+0x68>)
    d242:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    d244:	2000      	movs	r0, #0
			break;
    d246:	e7ea      	b.n	d21e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    d248:	4b09      	ldr	r3, [pc, #36]	; (d270 <hif_register_cb+0x68>)
    d24a:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    d24c:	2000      	movs	r0, #0
			break;
    d24e:	e7e6      	b.n	d21e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    d250:	4a08      	ldr	r2, [pc, #32]	; (d274 <hif_register_cb+0x6c>)
    d252:	4909      	ldr	r1, [pc, #36]	; (d278 <hif_register_cb+0x70>)
    d254:	4809      	ldr	r0, [pc, #36]	; (d27c <hif_register_cb+0x74>)
    d256:	4d0a      	ldr	r5, [pc, #40]	; (d280 <hif_register_cb+0x78>)
    d258:	47a8      	blx	r5
    d25a:	0021      	movs	r1, r4
    d25c:	4809      	ldr	r0, [pc, #36]	; (d284 <hif_register_cb+0x7c>)
    d25e:	47a8      	blx	r5
    d260:	200d      	movs	r0, #13
    d262:	4b09      	ldr	r3, [pc, #36]	; (d288 <hif_register_cb+0x80>)
    d264:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d266:	200c      	movs	r0, #12
    d268:	4240      	negs	r0, r0
			break;
    d26a:	e7d8      	b.n	d21e <hif_register_cb+0x16>
    d26c:	00018dd8 	.word	0x00018dd8
    d270:	2000137c 	.word	0x2000137c
    d274:	000002be 	.word	0x000002be
    d278:	00018e28 	.word	0x00018e28
    d27c:	00018db0 	.word	0x00018db0
    d280:	00017535 	.word	0x00017535
    d284:	000190d4 	.word	0x000190d4
    d288:	00017569 	.word	0x00017569

0000d28c <hif_init>:
{
    d28c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d28e:	222c      	movs	r2, #44	; 0x2c
    d290:	2100      	movs	r1, #0
    d292:	4806      	ldr	r0, [pc, #24]	; (d2ac <hif_init+0x20>)
    d294:	4b06      	ldr	r3, [pc, #24]	; (d2b0 <hif_init+0x24>)
    d296:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d298:	4806      	ldr	r0, [pc, #24]	; (d2b4 <hif_init+0x28>)
    d29a:	4b07      	ldr	r3, [pc, #28]	; (d2b8 <hif_init+0x2c>)
    d29c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d29e:	4907      	ldr	r1, [pc, #28]	; (d2bc <hif_init+0x30>)
    d2a0:	2003      	movs	r0, #3
    d2a2:	4b07      	ldr	r3, [pc, #28]	; (d2c0 <hif_init+0x34>)
    d2a4:	4798      	blx	r3
}
    d2a6:	2000      	movs	r0, #0
    d2a8:	bd10      	pop	{r4, pc}
    d2aa:	46c0      	nop			; (mov r8, r8)
    d2ac:	2000137c 	.word	0x2000137c
    d2b0:	0000c9f5 	.word	0x0000c9f5
    d2b4:	0000ca21 	.word	0x0000ca21
    d2b8:	0000c6a9 	.word	0x0000c6a9
    d2bc:	0000ca31 	.word	0x0000ca31
    d2c0:	0000d209 	.word	0x0000d209

0000d2c4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d2c4:	b530      	push	{r4, r5, lr}
    d2c6:	b09f      	sub	sp, #124	; 0x7c
    d2c8:	0004      	movs	r4, r0
    d2ca:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d2cc:	282c      	cmp	r0, #44	; 0x2c
    d2ce:	d02f      	beq.n	d330 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d2d0:	281b      	cmp	r0, #27
    d2d2:	d03d      	beq.n	d350 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d2d4:	2806      	cmp	r0, #6
    d2d6:	d04b      	beq.n	d370 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d2d8:	280e      	cmp	r0, #14
    d2da:	d027      	beq.n	d32c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d2dc:	2832      	cmp	r0, #50	; 0x32
    d2de:	d057      	beq.n	d390 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d2e0:	282f      	cmp	r0, #47	; 0x2f
    d2e2:	d065      	beq.n	d3b0 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d2e4:	2834      	cmp	r0, #52	; 0x34
    d2e6:	d100      	bne.n	d2ea <m2m_wifi_cb+0x26>
    d2e8:	e077      	b.n	d3da <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d2ea:	2811      	cmp	r0, #17
    d2ec:	d100      	bne.n	d2f0 <m2m_wifi_cb+0x2c>
    d2ee:	e096      	b.n	d41e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d2f0:	2813      	cmp	r0, #19
    d2f2:	d100      	bne.n	d2f6 <m2m_wifi_cb+0x32>
    d2f4:	e0ac      	b.n	d450 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d2f6:	2804      	cmp	r0, #4
    d2f8:	d100      	bne.n	d2fc <m2m_wifi_cb+0x38>
    d2fa:	e0bb      	b.n	d474 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d2fc:	2865      	cmp	r0, #101	; 0x65
    d2fe:	d100      	bne.n	d302 <m2m_wifi_cb+0x3e>
    d300:	e0ca      	b.n	d498 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d302:	2809      	cmp	r0, #9
    d304:	d100      	bne.n	d308 <m2m_wifi_cb+0x44>
    d306:	e0d9      	b.n	d4bc <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d308:	282a      	cmp	r0, #42	; 0x2a
    d30a:	d100      	bne.n	d30e <m2m_wifi_cb+0x4a>
    d30c:	e0e8      	b.n	d4e0 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d30e:	2820      	cmp	r0, #32
    d310:	d100      	bne.n	d314 <m2m_wifi_cb+0x50>
    d312:	e0f7      	b.n	d504 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d314:	2224      	movs	r2, #36	; 0x24
    d316:	32ff      	adds	r2, #255	; 0xff
    d318:	4989      	ldr	r1, [pc, #548]	; (d540 <m2m_wifi_cb+0x27c>)
    d31a:	488a      	ldr	r0, [pc, #552]	; (d544 <m2m_wifi_cb+0x280>)
    d31c:	4d8a      	ldr	r5, [pc, #552]	; (d548 <m2m_wifi_cb+0x284>)
    d31e:	47a8      	blx	r5
    d320:	0021      	movs	r1, r4
    d322:	488a      	ldr	r0, [pc, #552]	; (d54c <m2m_wifi_cb+0x288>)
    d324:	47a8      	blx	r5
    d326:	200d      	movs	r0, #13
    d328:	4b89      	ldr	r3, [pc, #548]	; (d550 <m2m_wifi_cb+0x28c>)
    d32a:	4798      	blx	r3
	}
}
    d32c:	b01f      	add	sp, #124	; 0x7c
    d32e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d330:	2300      	movs	r3, #0
    d332:	2204      	movs	r2, #4
    d334:	a903      	add	r1, sp, #12
    d336:	0028      	movs	r0, r5
    d338:	4c86      	ldr	r4, [pc, #536]	; (d554 <m2m_wifi_cb+0x290>)
    d33a:	47a0      	blx	r4
    d33c:	2800      	cmp	r0, #0
    d33e:	d1f5      	bne.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d340:	4b85      	ldr	r3, [pc, #532]	; (d558 <m2m_wifi_cb+0x294>)
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	2b00      	cmp	r3, #0
    d346:	d0f1      	beq.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d348:	a903      	add	r1, sp, #12
    d34a:	302c      	adds	r0, #44	; 0x2c
    d34c:	4798      	blx	r3
    d34e:	e7ed      	b.n	d32c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d350:	2300      	movs	r3, #0
    d352:	2208      	movs	r2, #8
    d354:	a903      	add	r1, sp, #12
    d356:	0028      	movs	r0, r5
    d358:	4c7e      	ldr	r4, [pc, #504]	; (d554 <m2m_wifi_cb+0x290>)
    d35a:	47a0      	blx	r4
    d35c:	2800      	cmp	r0, #0
    d35e:	d1e5      	bne.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d360:	4b7d      	ldr	r3, [pc, #500]	; (d558 <m2m_wifi_cb+0x294>)
    d362:	681b      	ldr	r3, [r3, #0]
    d364:	2b00      	cmp	r3, #0
    d366:	d0e1      	beq.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d368:	a903      	add	r1, sp, #12
    d36a:	301b      	adds	r0, #27
    d36c:	4798      	blx	r3
    d36e:	e7dd      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d370:	2301      	movs	r3, #1
    d372:	2230      	movs	r2, #48	; 0x30
    d374:	a903      	add	r1, sp, #12
    d376:	0028      	movs	r0, r5
    d378:	4c76      	ldr	r4, [pc, #472]	; (d554 <m2m_wifi_cb+0x290>)
    d37a:	47a0      	blx	r4
    d37c:	2800      	cmp	r0, #0
    d37e:	d1d5      	bne.n	d32c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d380:	4b75      	ldr	r3, [pc, #468]	; (d558 <m2m_wifi_cb+0x294>)
    d382:	681b      	ldr	r3, [r3, #0]
    d384:	2b00      	cmp	r3, #0
    d386:	d0d1      	beq.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d388:	a903      	add	r1, sp, #12
    d38a:	3006      	adds	r0, #6
    d38c:	4798      	blx	r3
    d38e:	e7cd      	b.n	d32c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d390:	2300      	movs	r3, #0
    d392:	2218      	movs	r2, #24
    d394:	a903      	add	r1, sp, #12
    d396:	0028      	movs	r0, r5
    d398:	4c6e      	ldr	r4, [pc, #440]	; (d554 <m2m_wifi_cb+0x290>)
    d39a:	47a0      	blx	r4
    d39c:	2800      	cmp	r0, #0
    d39e:	d1c5      	bne.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d3a0:	4b6d      	ldr	r3, [pc, #436]	; (d558 <m2m_wifi_cb+0x294>)
    d3a2:	681b      	ldr	r3, [r3, #0]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d0c1      	beq.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d3a8:	a903      	add	r1, sp, #12
    d3aa:	3032      	adds	r0, #50	; 0x32
    d3ac:	4798      	blx	r3
    d3ae:	e7bd      	b.n	d32c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d3b0:	2264      	movs	r2, #100	; 0x64
    d3b2:	2100      	movs	r1, #0
    d3b4:	a803      	add	r0, sp, #12
    d3b6:	4b69      	ldr	r3, [pc, #420]	; (d55c <m2m_wifi_cb+0x298>)
    d3b8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d3ba:	2300      	movs	r3, #0
    d3bc:	2264      	movs	r2, #100	; 0x64
    d3be:	a903      	add	r1, sp, #12
    d3c0:	0028      	movs	r0, r5
    d3c2:	4c64      	ldr	r4, [pc, #400]	; (d554 <m2m_wifi_cb+0x290>)
    d3c4:	47a0      	blx	r4
    d3c6:	2800      	cmp	r0, #0
    d3c8:	d1b0      	bne.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d3ca:	4b63      	ldr	r3, [pc, #396]	; (d558 <m2m_wifi_cb+0x294>)
    d3cc:	681b      	ldr	r3, [r3, #0]
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d0ac      	beq.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d3d2:	a903      	add	r1, sp, #12
    d3d4:	302f      	adds	r0, #47	; 0x2f
    d3d6:	4798      	blx	r3
    d3d8:	e7a8      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d3da:	2300      	movs	r3, #0
    d3dc:	2204      	movs	r2, #4
    d3de:	a903      	add	r1, sp, #12
    d3e0:	0028      	movs	r0, r5
    d3e2:	4c5c      	ldr	r4, [pc, #368]	; (d554 <m2m_wifi_cb+0x290>)
    d3e4:	47a0      	blx	r4
    d3e6:	2800      	cmp	r0, #0
    d3e8:	d1a0      	bne.n	d32c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d3ea:	485d      	ldr	r0, [pc, #372]	; (d560 <m2m_wifi_cb+0x29c>)
    d3ec:	4d56      	ldr	r5, [pc, #344]	; (d548 <m2m_wifi_cb+0x284>)
    d3ee:	47a8      	blx	r5
    d3f0:	9c03      	ldr	r4, [sp, #12]
    d3f2:	0a23      	lsrs	r3, r4, #8
    d3f4:	20ff      	movs	r0, #255	; 0xff
    d3f6:	4003      	ands	r3, r0
    d3f8:	0c22      	lsrs	r2, r4, #16
    d3fa:	4002      	ands	r2, r0
    d3fc:	0e21      	lsrs	r1, r4, #24
    d3fe:	4020      	ands	r0, r4
    d400:	9000      	str	r0, [sp, #0]
    d402:	4858      	ldr	r0, [pc, #352]	; (d564 <m2m_wifi_cb+0x2a0>)
    d404:	47a8      	blx	r5
    d406:	200d      	movs	r0, #13
    d408:	4b51      	ldr	r3, [pc, #324]	; (d550 <m2m_wifi_cb+0x28c>)
    d40a:	4798      	blx	r3
			if (gpfAppWifiCb)
    d40c:	4b52      	ldr	r3, [pc, #328]	; (d558 <m2m_wifi_cb+0x294>)
    d40e:	681b      	ldr	r3, [r3, #0]
    d410:	2b00      	cmp	r3, #0
    d412:	d100      	bne.n	d416 <m2m_wifi_cb+0x152>
    d414:	e78a      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d416:	2100      	movs	r1, #0
    d418:	2034      	movs	r0, #52	; 0x34
    d41a:	4798      	blx	r3
    d41c:	e786      	b.n	d32c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    d41e:	2200      	movs	r2, #0
    d420:	4b51      	ldr	r3, [pc, #324]	; (d568 <m2m_wifi_cb+0x2a4>)
    d422:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d424:	2300      	movs	r3, #0
    d426:	3204      	adds	r2, #4
    d428:	a903      	add	r1, sp, #12
    d42a:	0028      	movs	r0, r5
    d42c:	4c49      	ldr	r4, [pc, #292]	; (d554 <m2m_wifi_cb+0x290>)
    d42e:	47a0      	blx	r4
    d430:	2800      	cmp	r0, #0
    d432:	d000      	beq.n	d436 <m2m_wifi_cb+0x172>
    d434:	e77a      	b.n	d32c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    d436:	ab03      	add	r3, sp, #12
    d438:	781a      	ldrb	r2, [r3, #0]
    d43a:	4b4c      	ldr	r3, [pc, #304]	; (d56c <m2m_wifi_cb+0x2a8>)
    d43c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d43e:	4b46      	ldr	r3, [pc, #280]	; (d558 <m2m_wifi_cb+0x294>)
    d440:	681b      	ldr	r3, [r3, #0]
    d442:	2b00      	cmp	r3, #0
    d444:	d100      	bne.n	d448 <m2m_wifi_cb+0x184>
    d446:	e771      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d448:	a903      	add	r1, sp, #12
    d44a:	3011      	adds	r0, #17
    d44c:	4798      	blx	r3
    d44e:	e76d      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d450:	2300      	movs	r3, #0
    d452:	222c      	movs	r2, #44	; 0x2c
    d454:	a903      	add	r1, sp, #12
    d456:	0028      	movs	r0, r5
    d458:	4c3e      	ldr	r4, [pc, #248]	; (d554 <m2m_wifi_cb+0x290>)
    d45a:	47a0      	blx	r4
    d45c:	2800      	cmp	r0, #0
    d45e:	d000      	beq.n	d462 <m2m_wifi_cb+0x19e>
    d460:	e764      	b.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d462:	4b3d      	ldr	r3, [pc, #244]	; (d558 <m2m_wifi_cb+0x294>)
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	2b00      	cmp	r3, #0
    d468:	d100      	bne.n	d46c <m2m_wifi_cb+0x1a8>
    d46a:	e75f      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d46c:	a903      	add	r1, sp, #12
    d46e:	3013      	adds	r0, #19
    d470:	4798      	blx	r3
    d472:	e75b      	b.n	d32c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d474:	2300      	movs	r3, #0
    d476:	2204      	movs	r2, #4
    d478:	a91c      	add	r1, sp, #112	; 0x70
    d47a:	0028      	movs	r0, r5
    d47c:	4c35      	ldr	r4, [pc, #212]	; (d554 <m2m_wifi_cb+0x290>)
    d47e:	47a0      	blx	r4
    d480:	2800      	cmp	r0, #0
    d482:	d000      	beq.n	d486 <m2m_wifi_cb+0x1c2>
    d484:	e752      	b.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d486:	4b34      	ldr	r3, [pc, #208]	; (d558 <m2m_wifi_cb+0x294>)
    d488:	681b      	ldr	r3, [r3, #0]
    d48a:	2b00      	cmp	r3, #0
    d48c:	d100      	bne.n	d490 <m2m_wifi_cb+0x1cc>
    d48e:	e74d      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d490:	a91c      	add	r1, sp, #112	; 0x70
    d492:	3004      	adds	r0, #4
    d494:	4798      	blx	r3
    d496:	e749      	b.n	d32c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d498:	2300      	movs	r3, #0
    d49a:	2204      	movs	r2, #4
    d49c:	a91c      	add	r1, sp, #112	; 0x70
    d49e:	0028      	movs	r0, r5
    d4a0:	4c2c      	ldr	r4, [pc, #176]	; (d554 <m2m_wifi_cb+0x290>)
    d4a2:	47a0      	blx	r4
    d4a4:	2800      	cmp	r0, #0
    d4a6:	d000      	beq.n	d4aa <m2m_wifi_cb+0x1e6>
    d4a8:	e740      	b.n	d32c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d4aa:	4b2b      	ldr	r3, [pc, #172]	; (d558 <m2m_wifi_cb+0x294>)
    d4ac:	681b      	ldr	r3, [r3, #0]
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	d100      	bne.n	d4b4 <m2m_wifi_cb+0x1f0>
    d4b2:	e73b      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d4b4:	a91c      	add	r1, sp, #112	; 0x70
    d4b6:	3065      	adds	r0, #101	; 0x65
    d4b8:	4798      	blx	r3
    d4ba:	e737      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d4bc:	2301      	movs	r3, #1
    d4be:	2264      	movs	r2, #100	; 0x64
    d4c0:	a903      	add	r1, sp, #12
    d4c2:	0028      	movs	r0, r5
    d4c4:	4c23      	ldr	r4, [pc, #140]	; (d554 <m2m_wifi_cb+0x290>)
    d4c6:	47a0      	blx	r4
    d4c8:	2800      	cmp	r0, #0
    d4ca:	d000      	beq.n	d4ce <m2m_wifi_cb+0x20a>
    d4cc:	e72e      	b.n	d32c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d4ce:	4b22      	ldr	r3, [pc, #136]	; (d558 <m2m_wifi_cb+0x294>)
    d4d0:	681b      	ldr	r3, [r3, #0]
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	d100      	bne.n	d4d8 <m2m_wifi_cb+0x214>
    d4d6:	e729      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d4d8:	a903      	add	r1, sp, #12
    d4da:	3009      	adds	r0, #9
    d4dc:	4798      	blx	r3
    d4de:	e725      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d4e0:	2301      	movs	r3, #1
    d4e2:	2204      	movs	r2, #4
    d4e4:	a903      	add	r1, sp, #12
    d4e6:	0028      	movs	r0, r5
    d4e8:	4c1a      	ldr	r4, [pc, #104]	; (d554 <m2m_wifi_cb+0x290>)
    d4ea:	47a0      	blx	r4
    d4ec:	2800      	cmp	r0, #0
    d4ee:	d000      	beq.n	d4f2 <m2m_wifi_cb+0x22e>
    d4f0:	e71c      	b.n	d32c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d4f2:	4b19      	ldr	r3, [pc, #100]	; (d558 <m2m_wifi_cb+0x294>)
    d4f4:	681b      	ldr	r3, [r3, #0]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d100      	bne.n	d4fc <m2m_wifi_cb+0x238>
    d4fa:	e717      	b.n	d32c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d4fc:	a903      	add	r1, sp, #12
    d4fe:	302a      	adds	r0, #42	; 0x2a
    d500:	4798      	blx	r3
    d502:	e713      	b.n	d32c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d504:	2300      	movs	r3, #0
    d506:	2208      	movs	r2, #8
    d508:	a903      	add	r1, sp, #12
    d50a:	0028      	movs	r0, r5
    d50c:	4c11      	ldr	r4, [pc, #68]	; (d554 <m2m_wifi_cb+0x290>)
    d50e:	47a0      	blx	r4
    d510:	2800      	cmp	r0, #0
    d512:	d000      	beq.n	d516 <m2m_wifi_cb+0x252>
    d514:	e70a      	b.n	d32c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d516:	ab03      	add	r3, sp, #12
    d518:	889a      	ldrh	r2, [r3, #4]
    d51a:	0028      	movs	r0, r5
    d51c:	3008      	adds	r0, #8
    d51e:	2301      	movs	r3, #1
    d520:	9903      	ldr	r1, [sp, #12]
    d522:	4c0c      	ldr	r4, [pc, #48]	; (d554 <m2m_wifi_cb+0x290>)
    d524:	47a0      	blx	r4
    d526:	2800      	cmp	r0, #0
    d528:	d000      	beq.n	d52c <m2m_wifi_cb+0x268>
    d52a:	e6ff      	b.n	d32c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    d52c:	4b0a      	ldr	r3, [pc, #40]	; (d558 <m2m_wifi_cb+0x294>)
    d52e:	681b      	ldr	r3, [r3, #0]
    d530:	2b00      	cmp	r3, #0
    d532:	d100      	bne.n	d536 <m2m_wifi_cb+0x272>
    d534:	e6fa      	b.n	d32c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d536:	a903      	add	r1, sp, #12
    d538:	3020      	adds	r0, #32
    d53a:	4798      	blx	r3
    d53c:	e6f6      	b.n	d32c <m2m_wifi_cb+0x68>
    d53e:	46c0      	nop			; (mov r8, r8)
    d540:	00019118 	.word	0x00019118
    d544:	00018db0 	.word	0x00018db0
    d548:	00017535 	.word	0x00017535
    d54c:	00019168 	.word	0x00019168
    d550:	00017569 	.word	0x00017569
    d554:	0000d121 	.word	0x0000d121
    d558:	200003c4 	.word	0x200003c4
    d55c:	0000c9f5 	.word	0x0000c9f5
    d560:	000190e0 	.word	0x000190e0
    d564:	00019148 	.word	0x00019148
    d568:	200003c9 	.word	0x200003c9
    d56c:	200003c8 	.word	0x200003c8

0000d570 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d570:	b5f0      	push	{r4, r5, r6, r7, lr}
    d572:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d574:	2201      	movs	r2, #1
    d576:	230f      	movs	r3, #15
    d578:	446b      	add	r3, sp
    d57a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d57c:	2800      	cmp	r0, #0
    d57e:	d061      	beq.n	d644 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d580:	6802      	ldr	r2, [r0, #0]
    d582:	4b32      	ldr	r3, [pc, #200]	; (d64c <m2m_wifi_init+0xdc>)
    d584:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d586:	2200      	movs	r2, #0
    d588:	4b31      	ldr	r3, [pc, #196]	; (d650 <m2m_wifi_init+0xe0>)
    d58a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d58c:	200f      	movs	r0, #15
    d58e:	4468      	add	r0, sp
    d590:	4b30      	ldr	r3, [pc, #192]	; (d654 <m2m_wifi_init+0xe4>)
    d592:	4798      	blx	r3
    d594:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d596:	d002      	beq.n	d59e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    d598:	0020      	movs	r0, r4
    d59a:	b00f      	add	sp, #60	; 0x3c
    d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    d59e:	2000      	movs	r0, #0
    d5a0:	4b2d      	ldr	r3, [pc, #180]	; (d658 <m2m_wifi_init+0xe8>)
    d5a2:	4798      	blx	r3
    d5a4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d5a6:	d149      	bne.n	d63c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    d5a8:	492c      	ldr	r1, [pc, #176]	; (d65c <m2m_wifi_init+0xec>)
    d5aa:	2001      	movs	r0, #1
    d5ac:	4b2c      	ldr	r3, [pc, #176]	; (d660 <m2m_wifi_init+0xf0>)
    d5ae:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    d5b0:	ae04      	add	r6, sp, #16
    d5b2:	0030      	movs	r0, r6
    d5b4:	4b2b      	ldr	r3, [pc, #172]	; (d664 <m2m_wifi_init+0xf4>)
    d5b6:	4798      	blx	r3
    d5b8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    d5ba:	482b      	ldr	r0, [pc, #172]	; (d668 <m2m_wifi_init+0xf8>)
    d5bc:	4d2b      	ldr	r5, [pc, #172]	; (d66c <m2m_wifi_init+0xfc>)
    d5be:	47a8      	blx	r5
    d5c0:	79b3      	ldrb	r3, [r6, #6]
    d5c2:	7972      	ldrb	r2, [r6, #5]
    d5c4:	7931      	ldrb	r1, [r6, #4]
    d5c6:	8c30      	ldrh	r0, [r6, #32]
    d5c8:	9000      	str	r0, [sp, #0]
    d5ca:	4829      	ldr	r0, [pc, #164]	; (d670 <m2m_wifi_init+0x100>)
    d5cc:	47a8      	blx	r5
    d5ce:	200d      	movs	r0, #13
    d5d0:	4f28      	ldr	r7, [pc, #160]	; (d674 <m2m_wifi_init+0x104>)
    d5d2:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    d5d4:	4824      	ldr	r0, [pc, #144]	; (d668 <m2m_wifi_init+0xf8>)
    d5d6:	47a8      	blx	r5
    d5d8:	2226      	movs	r2, #38	; 0x26
    d5da:	446a      	add	r2, sp
    d5dc:	211a      	movs	r1, #26
    d5de:	4469      	add	r1, sp
    d5e0:	4825      	ldr	r0, [pc, #148]	; (d678 <m2m_wifi_init+0x108>)
    d5e2:	47a8      	blx	r5
    d5e4:	200d      	movs	r0, #13
    d5e6:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    d5e8:	481f      	ldr	r0, [pc, #124]	; (d668 <m2m_wifi_init+0xf8>)
    d5ea:	47a8      	blx	r5
    d5ec:	7a73      	ldrb	r3, [r6, #9]
    d5ee:	7a32      	ldrb	r2, [r6, #8]
    d5f0:	79f1      	ldrb	r1, [r6, #7]
    d5f2:	4822      	ldr	r0, [pc, #136]	; (d67c <m2m_wifi_init+0x10c>)
    d5f4:	47a8      	blx	r5
    d5f6:	200d      	movs	r0, #13
    d5f8:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    d5fa:	481b      	ldr	r0, [pc, #108]	; (d668 <m2m_wifi_init+0xf8>)
    d5fc:	47a8      	blx	r5
    d5fe:	2304      	movs	r3, #4
    d600:	2205      	movs	r2, #5
    d602:	2113      	movs	r1, #19
    d604:	481e      	ldr	r0, [pc, #120]	; (d680 <m2m_wifi_init+0x110>)
    d606:	47a8      	blx	r5
    d608:	200d      	movs	r0, #13
    d60a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    d60c:	4816      	ldr	r0, [pc, #88]	; (d668 <m2m_wifi_init+0xf8>)
    d60e:	47a8      	blx	r5
    d610:	4a1c      	ldr	r2, [pc, #112]	; (d684 <m2m_wifi_init+0x114>)
    d612:	491d      	ldr	r1, [pc, #116]	; (d688 <m2m_wifi_init+0x118>)
    d614:	481d      	ldr	r0, [pc, #116]	; (d68c <m2m_wifi_init+0x11c>)
    d616:	47a8      	blx	r5
    d618:	200d      	movs	r0, #13
    d61a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    d61c:	0023      	movs	r3, r4
    d61e:	330d      	adds	r3, #13
    d620:	d1ba      	bne.n	d598 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    d622:	22e8      	movs	r2, #232	; 0xe8
    d624:	32ff      	adds	r2, #255	; 0xff
    d626:	491a      	ldr	r1, [pc, #104]	; (d690 <m2m_wifi_init+0x120>)
    d628:	481a      	ldr	r0, [pc, #104]	; (d694 <m2m_wifi_init+0x124>)
    d62a:	4b10      	ldr	r3, [pc, #64]	; (d66c <m2m_wifi_init+0xfc>)
    d62c:	4798      	blx	r3
    d62e:	481a      	ldr	r0, [pc, #104]	; (d698 <m2m_wifi_init+0x128>)
    d630:	4b1a      	ldr	r3, [pc, #104]	; (d69c <m2m_wifi_init+0x12c>)
    d632:	4798      	blx	r3
    d634:	200d      	movs	r0, #13
    d636:	4b0f      	ldr	r3, [pc, #60]	; (d674 <m2m_wifi_init+0x104>)
    d638:	4798      	blx	r3
    d63a:	e7ad      	b.n	d598 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    d63c:	2000      	movs	r0, #0
    d63e:	4b18      	ldr	r3, [pc, #96]	; (d6a0 <m2m_wifi_init+0x130>)
    d640:	4798      	blx	r3
    d642:	e7a9      	b.n	d598 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    d644:	240c      	movs	r4, #12
    d646:	4264      	negs	r4, r4
    d648:	e7a6      	b.n	d598 <m2m_wifi_init+0x28>
    d64a:	46c0      	nop			; (mov r8, r8)
    d64c:	200003c4 	.word	0x200003c4
    d650:	200003c9 	.word	0x200003c9
    d654:	0000e011 	.word	0x0000e011
    d658:	0000d28d 	.word	0x0000d28d
    d65c:	0000d2c5 	.word	0x0000d2c5
    d660:	0000d209 	.word	0x0000d209
    d664:	0000df2d 	.word	0x0000df2d
    d668:	000190e0 	.word	0x000190e0
    d66c:	00017535 	.word	0x00017535
    d670:	00019224 	.word	0x00019224
    d674:	00017569 	.word	0x00017569
    d678:	0001924c 	.word	0x0001924c
    d67c:	00019268 	.word	0x00019268
    d680:	0001928c 	.word	0x0001928c
    d684:	000192a4 	.word	0x000192a4
    d688:	000192b0 	.word	0x000192b0
    d68c:	000192bc 	.word	0x000192bc
    d690:	00019124 	.word	0x00019124
    d694:	00018db0 	.word	0x00018db0
    d698:	000192d4 	.word	0x000192d4
    d69c:	00017651 	.word	0x00017651
    d6a0:	0000e0e5 	.word	0x0000e0e5

0000d6a4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    d6a4:	b510      	push	{r4, lr}
	return hif_handle_isr();
    d6a6:	4b01      	ldr	r3, [pc, #4]	; (d6ac <m2m_wifi_handle_events+0x8>)
    d6a8:	4798      	blx	r3
}
    d6aa:	bd10      	pop	{r4, pc}
    d6ac:	0000cd39 	.word	0x0000cd39

0000d6b0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6b2:	46ce      	mov	lr, r9
    d6b4:	4647      	mov	r7, r8
    d6b6:	b580      	push	{r7, lr}
    d6b8:	b0a3      	sub	sp, #140	; 0x8c
    d6ba:	9005      	str	r0, [sp, #20]
    d6bc:	000c      	movs	r4, r1
    d6be:	0015      	movs	r5, r2
    d6c0:	001f      	movs	r7, r3
    d6c2:	ab2a      	add	r3, sp, #168	; 0xa8
    d6c4:	881b      	ldrh	r3, [r3, #0]
    d6c6:	4699      	mov	r9, r3
    d6c8:	ab2b      	add	r3, sp, #172	; 0xac
    d6ca:	781b      	ldrb	r3, [r3, #0]
    d6cc:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    d6ce:	2a01      	cmp	r2, #1
    d6d0:	d003      	beq.n	d6da <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    d6d2:	2f00      	cmp	r7, #0
    d6d4:	d040      	beq.n	d758 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d6d6:	2a02      	cmp	r2, #2
    d6d8:	d04c      	beq.n	d774 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    d6da:	1e63      	subs	r3, r4, #1
    d6dc:	2b1f      	cmp	r3, #31
    d6de:	d900      	bls.n	d6e2 <m2m_wifi_connect_sc+0x32>
    d6e0:	e078      	b.n	d7d4 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    d6e2:	464b      	mov	r3, r9
    d6e4:	3b01      	subs	r3, #1
    d6e6:	b29b      	uxth	r3, r3
    d6e8:	2b0d      	cmp	r3, #13
    d6ea:	d903      	bls.n	d6f4 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    d6ec:	464b      	mov	r3, r9
    d6ee:	2bff      	cmp	r3, #255	; 0xff
    d6f0:	d000      	beq.n	d6f4 <m2m_wifi_connect_sc+0x44>
    d6f2:	e07e      	b.n	d7f2 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    d6f4:	ae07      	add	r6, sp, #28
    d6f6:	0022      	movs	r2, r4
    d6f8:	9905      	ldr	r1, [sp, #20]
    d6fa:	205a      	movs	r0, #90	; 0x5a
    d6fc:	ab02      	add	r3, sp, #8
    d6fe:	469c      	mov	ip, r3
    d700:	4460      	add	r0, ip
    d702:	4b79      	ldr	r3, [pc, #484]	; (d8e8 <m2m_wifi_connect_sc+0x238>)
    d704:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    d706:	1934      	adds	r4, r6, r4
    d708:	3446      	adds	r4, #70	; 0x46
    d70a:	2300      	movs	r3, #0
    d70c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    d70e:	3344      	adds	r3, #68	; 0x44
    d710:	464a      	mov	r2, r9
    d712:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    d714:	4643      	mov	r3, r8
    d716:	1e5a      	subs	r2, r3, #1
    d718:	4193      	sbcs	r3, r2
    d71a:	2267      	movs	r2, #103	; 0x67
    d71c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    d71e:	2341      	movs	r3, #65	; 0x41
    d720:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    d722:	2d03      	cmp	r5, #3
    d724:	d100      	bne.n	d728 <m2m_wifi_connect_sc+0x78>
    d726:	e072      	b.n	d80e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    d728:	2d02      	cmp	r5, #2
    d72a:	d100      	bne.n	d72e <m2m_wifi_connect_sc+0x7e>
    d72c:	e0ac      	b.n	d888 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    d72e:	2d04      	cmp	r5, #4
    d730:	d100      	bne.n	d734 <m2m_wifi_connect_sc+0x84>
    d732:	e0c4      	b.n	d8be <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    d734:	2d01      	cmp	r5, #1
    d736:	d000      	beq.n	d73a <m2m_wifi_connect_sc+0x8a>
    d738:	e0c7      	b.n	d8ca <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    d73a:	2300      	movs	r3, #0
    d73c:	9302      	str	r3, [sp, #8]
    d73e:	9301      	str	r3, [sp, #4]
    d740:	9300      	str	r3, [sp, #0]
    d742:	336c      	adds	r3, #108	; 0x6c
    d744:	aa07      	add	r2, sp, #28
    d746:	2128      	movs	r1, #40	; 0x28
    d748:	2001      	movs	r0, #1
    d74a:	4c68      	ldr	r4, [pc, #416]	; (d8ec <m2m_wifi_connect_sc+0x23c>)
    d74c:	47a0      	blx	r4

ERR1:
	return ret;
}
    d74e:	b023      	add	sp, #140	; 0x8c
    d750:	bc0c      	pop	{r2, r3}
    d752:	4690      	mov	r8, r2
    d754:	4699      	mov	r9, r3
    d756:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    d758:	4a65      	ldr	r2, [pc, #404]	; (d8f0 <m2m_wifi_connect_sc+0x240>)
    d75a:	4966      	ldr	r1, [pc, #408]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d75c:	4866      	ldr	r0, [pc, #408]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d75e:	4b67      	ldr	r3, [pc, #412]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d760:	4798      	blx	r3
    d762:	4867      	ldr	r0, [pc, #412]	; (d900 <m2m_wifi_connect_sc+0x250>)
    d764:	4b67      	ldr	r3, [pc, #412]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d766:	4798      	blx	r3
    d768:	200d      	movs	r0, #13
    d76a:	4b67      	ldr	r3, [pc, #412]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d76c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d76e:	200c      	movs	r0, #12
    d770:	4240      	negs	r0, r0
			goto ERR1;
    d772:	e7ec      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d774:	0038      	movs	r0, r7
    d776:	4b65      	ldr	r3, [pc, #404]	; (d90c <m2m_wifi_connect_sc+0x25c>)
    d778:	4798      	blx	r3
    d77a:	2840      	cmp	r0, #64	; 0x40
    d77c:	d1ad      	bne.n	d6da <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    d77e:	783b      	ldrb	r3, [r7, #0]
    d780:	001a      	movs	r2, r3
    d782:	3a30      	subs	r2, #48	; 0x30
    d784:	2a36      	cmp	r2, #54	; 0x36
    d786:	d817      	bhi.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d788:	3a0a      	subs	r2, #10
    d78a:	2a06      	cmp	r2, #6
    d78c:	d914      	bls.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d78e:	3b47      	subs	r3, #71	; 0x47
    d790:	2b19      	cmp	r3, #25
    d792:	d911      	bls.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d794:	1c7a      	adds	r2, r7, #1
    d796:	0038      	movs	r0, r7
    d798:	3040      	adds	r0, #64	; 0x40
    d79a:	7813      	ldrb	r3, [r2, #0]
    d79c:	0019      	movs	r1, r3
    d79e:	3930      	subs	r1, #48	; 0x30
    d7a0:	2936      	cmp	r1, #54	; 0x36
    d7a2:	d809      	bhi.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d7a4:	390a      	subs	r1, #10
    d7a6:	2906      	cmp	r1, #6
    d7a8:	d906      	bls.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d7aa:	3b47      	subs	r3, #71	; 0x47
    d7ac:	2b19      	cmp	r3, #25
    d7ae:	d903      	bls.n	d7b8 <m2m_wifi_connect_sc+0x108>
    d7b0:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    d7b2:	4282      	cmp	r2, r0
    d7b4:	d1f1      	bne.n	d79a <m2m_wifi_connect_sc+0xea>
    d7b6:	e790      	b.n	d6da <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    d7b8:	4a55      	ldr	r2, [pc, #340]	; (d910 <m2m_wifi_connect_sc+0x260>)
    d7ba:	494e      	ldr	r1, [pc, #312]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d7bc:	484e      	ldr	r0, [pc, #312]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d7be:	4b4f      	ldr	r3, [pc, #316]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d7c0:	4798      	blx	r3
    d7c2:	4854      	ldr	r0, [pc, #336]	; (d914 <m2m_wifi_connect_sc+0x264>)
    d7c4:	4b4f      	ldr	r3, [pc, #316]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d7c6:	4798      	blx	r3
    d7c8:	200d      	movs	r0, #13
    d7ca:	4b4f      	ldr	r3, [pc, #316]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d7cc:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    d7ce:	200c      	movs	r0, #12
    d7d0:	4240      	negs	r0, r0
					goto ERR1;
    d7d2:	e7bc      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    d7d4:	228c      	movs	r2, #140	; 0x8c
    d7d6:	0092      	lsls	r2, r2, #2
    d7d8:	4946      	ldr	r1, [pc, #280]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d7da:	4847      	ldr	r0, [pc, #284]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d7dc:	4b47      	ldr	r3, [pc, #284]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d7de:	4798      	blx	r3
    d7e0:	484d      	ldr	r0, [pc, #308]	; (d918 <m2m_wifi_connect_sc+0x268>)
    d7e2:	4b48      	ldr	r3, [pc, #288]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d7e4:	4798      	blx	r3
    d7e6:	200d      	movs	r0, #13
    d7e8:	4b47      	ldr	r3, [pc, #284]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d7ea:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d7ec:	200c      	movs	r0, #12
    d7ee:	4240      	negs	r0, r0
		goto ERR1;
    d7f0:	e7ad      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    d7f2:	4a4a      	ldr	r2, [pc, #296]	; (d91c <m2m_wifi_connect_sc+0x26c>)
    d7f4:	493f      	ldr	r1, [pc, #252]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d7f6:	4840      	ldr	r0, [pc, #256]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d7f8:	4b40      	ldr	r3, [pc, #256]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d7fa:	4798      	blx	r3
    d7fc:	4848      	ldr	r0, [pc, #288]	; (d920 <m2m_wifi_connect_sc+0x270>)
    d7fe:	4b41      	ldr	r3, [pc, #260]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d800:	4798      	blx	r3
    d802:	200d      	movs	r0, #13
    d804:	4b40      	ldr	r3, [pc, #256]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d806:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d808:	200c      	movs	r0, #12
    d80a:	4240      	negs	r0, r0
			goto ERR1;
    d80c:	e79f      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    d80e:	783b      	ldrb	r3, [r7, #0]
    d810:	3b01      	subs	r3, #1
    d812:	b2db      	uxtb	r3, r3
    d814:	aa07      	add	r2, sp, #28
    d816:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    d818:	2b03      	cmp	r3, #3
    d81a:	d817      	bhi.n	d84c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    d81c:	787a      	ldrb	r2, [r7, #1]
    d81e:	1e51      	subs	r1, r2, #1
    d820:	ab07      	add	r3, sp, #28
    d822:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    d824:	2310      	movs	r3, #16
    d826:	0011      	movs	r1, r2
    d828:	4399      	bics	r1, r3
    d82a:	290b      	cmp	r1, #11
    d82c:	d01e      	beq.n	d86c <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    d82e:	4a3d      	ldr	r2, [pc, #244]	; (d924 <m2m_wifi_connect_sc+0x274>)
    d830:	4930      	ldr	r1, [pc, #192]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d832:	4831      	ldr	r0, [pc, #196]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d834:	4c31      	ldr	r4, [pc, #196]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d836:	47a0      	blx	r4
    d838:	ab07      	add	r3, sp, #28
    d83a:	7859      	ldrb	r1, [r3, #1]
    d83c:	483a      	ldr	r0, [pc, #232]	; (d928 <m2m_wifi_connect_sc+0x278>)
    d83e:	47a0      	blx	r4
    d840:	200d      	movs	r0, #13
    d842:	4b31      	ldr	r3, [pc, #196]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d844:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d846:	200c      	movs	r0, #12
    d848:	4240      	negs	r0, r0
			goto ERR1;
    d84a:	e780      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    d84c:	2294      	movs	r2, #148	; 0x94
    d84e:	0092      	lsls	r2, r2, #2
    d850:	4928      	ldr	r1, [pc, #160]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d852:	4829      	ldr	r0, [pc, #164]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d854:	4c29      	ldr	r4, [pc, #164]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d856:	47a0      	blx	r4
    d858:	ab07      	add	r3, sp, #28
    d85a:	7819      	ldrb	r1, [r3, #0]
    d85c:	4833      	ldr	r0, [pc, #204]	; (d92c <m2m_wifi_connect_sc+0x27c>)
    d85e:	47a0      	blx	r4
    d860:	200d      	movs	r0, #13
    d862:	4b29      	ldr	r3, [pc, #164]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d864:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d866:	200c      	movs	r0, #12
    d868:	4240      	negs	r0, r0
			goto ERR1;
    d86a:	e770      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    d86c:	1cb9      	adds	r1, r7, #2
    d86e:	2016      	movs	r0, #22
    d870:	ab02      	add	r3, sp, #8
    d872:	469c      	mov	ip, r3
    d874:	4460      	add	r0, ip
    d876:	4b1c      	ldr	r3, [pc, #112]	; (d8e8 <m2m_wifi_connect_sc+0x238>)
    d878:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    d87a:	787b      	ldrb	r3, [r7, #1]
    d87c:	aa07      	add	r2, sp, #28
    d87e:	4694      	mov	ip, r2
    d880:	4463      	add	r3, ip
    d882:	2200      	movs	r2, #0
    d884:	709a      	strb	r2, [r3, #2]
    d886:	e758      	b.n	d73a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    d888:	0038      	movs	r0, r7
    d88a:	4b20      	ldr	r3, [pc, #128]	; (d90c <m2m_wifi_connect_sc+0x25c>)
    d88c:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    d88e:	1e43      	subs	r3, r0, #1
    d890:	b29b      	uxth	r3, r3
    d892:	2b3f      	cmp	r3, #63	; 0x3f
    d894:	d805      	bhi.n	d8a2 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    d896:	1c42      	adds	r2, r0, #1
    d898:	0039      	movs	r1, r7
    d89a:	a807      	add	r0, sp, #28
    d89c:	4b12      	ldr	r3, [pc, #72]	; (d8e8 <m2m_wifi_connect_sc+0x238>)
    d89e:	4798      	blx	r3
    d8a0:	e74b      	b.n	d73a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    d8a2:	4a23      	ldr	r2, [pc, #140]	; (d930 <m2m_wifi_connect_sc+0x280>)
    d8a4:	4913      	ldr	r1, [pc, #76]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d8a6:	4814      	ldr	r0, [pc, #80]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d8a8:	4b14      	ldr	r3, [pc, #80]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d8aa:	4798      	blx	r3
    d8ac:	4821      	ldr	r0, [pc, #132]	; (d934 <m2m_wifi_connect_sc+0x284>)
    d8ae:	4b15      	ldr	r3, [pc, #84]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d8b0:	4798      	blx	r3
    d8b2:	200d      	movs	r0, #13
    d8b4:	4b14      	ldr	r3, [pc, #80]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d8b6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d8b8:	200c      	movs	r0, #12
    d8ba:	4240      	negs	r0, r0
			goto ERR1;
    d8bc:	e747      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    d8be:	223e      	movs	r2, #62	; 0x3e
    d8c0:	0039      	movs	r1, r7
    d8c2:	a807      	add	r0, sp, #28
    d8c4:	4b08      	ldr	r3, [pc, #32]	; (d8e8 <m2m_wifi_connect_sc+0x238>)
    d8c6:	4798      	blx	r3
    d8c8:	e737      	b.n	d73a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    d8ca:	4a1b      	ldr	r2, [pc, #108]	; (d938 <m2m_wifi_connect_sc+0x288>)
    d8cc:	4909      	ldr	r1, [pc, #36]	; (d8f4 <m2m_wifi_connect_sc+0x244>)
    d8ce:	480a      	ldr	r0, [pc, #40]	; (d8f8 <m2m_wifi_connect_sc+0x248>)
    d8d0:	4b0a      	ldr	r3, [pc, #40]	; (d8fc <m2m_wifi_connect_sc+0x24c>)
    d8d2:	4798      	blx	r3
    d8d4:	4819      	ldr	r0, [pc, #100]	; (d93c <m2m_wifi_connect_sc+0x28c>)
    d8d6:	4b0b      	ldr	r3, [pc, #44]	; (d904 <m2m_wifi_connect_sc+0x254>)
    d8d8:	4798      	blx	r3
    d8da:	200d      	movs	r0, #13
    d8dc:	4b0a      	ldr	r3, [pc, #40]	; (d908 <m2m_wifi_connect_sc+0x258>)
    d8de:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d8e0:	200c      	movs	r0, #12
    d8e2:	4240      	negs	r0, r0
		goto ERR1;
    d8e4:	e733      	b.n	d74e <m2m_wifi_connect_sc+0x9e>
    d8e6:	46c0      	nop			; (mov r8, r8)
    d8e8:	0000c9e1 	.word	0x0000c9e1
    d8ec:	0000cb09 	.word	0x0000cb09
    d8f0:	0000021a 	.word	0x0000021a
    d8f4:	00019134 	.word	0x00019134
    d8f8:	00018db0 	.word	0x00018db0
    d8fc:	00017535 	.word	0x00017535
    d900:	0001917c 	.word	0x0001917c
    d904:	00017651 	.word	0x00017651
    d908:	00017569 	.word	0x00017569
    d90c:	0000ca05 	.word	0x0000ca05
    d910:	00000226 	.word	0x00000226
    d914:	00019190 	.word	0x00019190
    d918:	0001919c 	.word	0x0001919c
    d91c:	00000239 	.word	0x00000239
    d920:	000191b0 	.word	0x000191b0
    d924:	00000257 	.word	0x00000257
    d928:	000191d8 	.word	0x000191d8
    d92c:	000191bc 	.word	0x000191bc
    d930:	00000266 	.word	0x00000266
    d934:	000191f4 	.word	0x000191f4
    d938:	00000276 	.word	0x00000276
    d93c:	00019210 	.word	0x00019210

0000d940 <m2m_wifi_connect>:
{
    d940:	b530      	push	{r4, r5, lr}
    d942:	b083      	sub	sp, #12
    d944:	ac06      	add	r4, sp, #24
    d946:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    d948:	2500      	movs	r5, #0
    d94a:	9501      	str	r5, [sp, #4]
    d94c:	9400      	str	r4, [sp, #0]
    d94e:	4c02      	ldr	r4, [pc, #8]	; (d958 <m2m_wifi_connect+0x18>)
    d950:	47a0      	blx	r4
}
    d952:	b003      	add	sp, #12
    d954:	bd30      	pop	{r4, r5, pc}
    d956:	46c0      	nop			; (mov r8, r8)
    d958:	0000d6b1 	.word	0x0000d6b1

0000d95c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    d95c:	2000      	movs	r0, #0
    d95e:	4770      	bx	lr

0000d960 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    d960:	b5f0      	push	{r4, r5, r6, r7, lr}
    d962:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    d964:	2580      	movs	r5, #128	; 0x80
    d966:	006d      	lsls	r5, r5, #1
    d968:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    d96a:	24a5      	movs	r4, #165	; 0xa5
    d96c:	0164      	lsls	r4, r4, #5
    d96e:	4f08      	ldr	r7, [pc, #32]	; (d990 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    d970:	4e08      	ldr	r6, [pc, #32]	; (d994 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    d972:	0029      	movs	r1, r5
    d974:	0020      	movs	r0, r4
    d976:	47b8      	blx	r7
			uint32 reg = 0;
    d978:	2300      	movs	r3, #0
    d97a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    d97c:	a901      	add	r1, sp, #4
    d97e:	0020      	movs	r0, r4
    d980:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    d982:	2800      	cmp	r0, #0
    d984:	d1f5      	bne.n	d972 <chip_apply_conf+0x12>
				if(reg == val32)
    d986:	9b01      	ldr	r3, [sp, #4]
    d988:	429d      	cmp	r5, r3
    d98a:	d1f2      	bne.n	d972 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    d98c:	b003      	add	sp, #12
    d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d990:	0000de51 	.word	0x0000de51
    d994:	0000de45 	.word	0x0000de45

0000d998 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    d998:	b500      	push	{lr}
    d99a:	b083      	sub	sp, #12
	uint32 reg = 0;
    d99c:	2300      	movs	r3, #0
    d99e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    d9a0:	a901      	add	r1, sp, #4
    d9a2:	4811      	ldr	r0, [pc, #68]	; (d9e8 <enable_interrupts+0x50>)
    d9a4:	4b11      	ldr	r3, [pc, #68]	; (d9ec <enable_interrupts+0x54>)
    d9a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d9a8:	2800      	cmp	r0, #0
    d9aa:	d001      	beq.n	d9b0 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    d9ac:	b003      	add	sp, #12
    d9ae:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    d9b0:	2180      	movs	r1, #128	; 0x80
    d9b2:	0049      	lsls	r1, r1, #1
    d9b4:	9b01      	ldr	r3, [sp, #4]
    d9b6:	4319      	orrs	r1, r3
    d9b8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    d9ba:	480b      	ldr	r0, [pc, #44]	; (d9e8 <enable_interrupts+0x50>)
    d9bc:	4b0c      	ldr	r3, [pc, #48]	; (d9f0 <enable_interrupts+0x58>)
    d9be:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d9c0:	2800      	cmp	r0, #0
    d9c2:	d1f3      	bne.n	d9ac <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    d9c4:	a901      	add	r1, sp, #4
    d9c6:	20d0      	movs	r0, #208	; 0xd0
    d9c8:	0140      	lsls	r0, r0, #5
    d9ca:	4b08      	ldr	r3, [pc, #32]	; (d9ec <enable_interrupts+0x54>)
    d9cc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d9ce:	2800      	cmp	r0, #0
    d9d0:	d1ec      	bne.n	d9ac <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    d9d2:	2180      	movs	r1, #128	; 0x80
    d9d4:	0249      	lsls	r1, r1, #9
    d9d6:	9b01      	ldr	r3, [sp, #4]
    d9d8:	4319      	orrs	r1, r3
    d9da:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    d9dc:	20d0      	movs	r0, #208	; 0xd0
    d9de:	0140      	lsls	r0, r0, #5
    d9e0:	4b03      	ldr	r3, [pc, #12]	; (d9f0 <enable_interrupts+0x58>)
    d9e2:	4798      	blx	r3
    d9e4:	e7e2      	b.n	d9ac <enable_interrupts+0x14>
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	00001408 	.word	0x00001408
    d9ec:	0000de45 	.word	0x0000de45
    d9f0:	0000de51 	.word	0x0000de51

0000d9f4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    d9f4:	b510      	push	{r4, lr}
    d9f6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    d9f8:	4b28      	ldr	r3, [pc, #160]	; (da9c <nmi_get_chipid+0xa8>)
    d9fa:	681c      	ldr	r4, [r3, #0]
    d9fc:	2c00      	cmp	r4, #0
    d9fe:	d004      	beq.n	da0a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    da00:	4b26      	ldr	r3, [pc, #152]	; (da9c <nmi_get_chipid+0xa8>)
    da02:	681c      	ldr	r4, [r3, #0]
}
    da04:	0020      	movs	r0, r4
    da06:	b002      	add	sp, #8
    da08:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    da0a:	0019      	movs	r1, r3
    da0c:	2080      	movs	r0, #128	; 0x80
    da0e:	0140      	lsls	r0, r0, #5
    da10:	4b23      	ldr	r3, [pc, #140]	; (daa0 <nmi_get_chipid+0xac>)
    da12:	4798      	blx	r3
    da14:	2800      	cmp	r0, #0
    da16:	d003      	beq.n	da20 <nmi_get_chipid+0x2c>
			chipid = 0;
    da18:	2200      	movs	r2, #0
    da1a:	4b20      	ldr	r3, [pc, #128]	; (da9c <nmi_get_chipid+0xa8>)
    da1c:	601a      	str	r2, [r3, #0]
			return 0;
    da1e:	e7f1      	b.n	da04 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    da20:	a901      	add	r1, sp, #4
    da22:	4820      	ldr	r0, [pc, #128]	; (daa4 <nmi_get_chipid+0xb0>)
    da24:	4b1e      	ldr	r3, [pc, #120]	; (daa0 <nmi_get_chipid+0xac>)
    da26:	4798      	blx	r3
    da28:	2800      	cmp	r0, #0
    da2a:	d003      	beq.n	da34 <nmi_get_chipid+0x40>
			chipid = 0;
    da2c:	2200      	movs	r2, #0
    da2e:	4b1b      	ldr	r3, [pc, #108]	; (da9c <nmi_get_chipid+0xa8>)
    da30:	601a      	str	r2, [r3, #0]
			return 0;
    da32:	e7e7      	b.n	da04 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    da34:	4b19      	ldr	r3, [pc, #100]	; (da9c <nmi_get_chipid+0xa8>)
    da36:	681b      	ldr	r3, [r3, #0]
    da38:	4a1b      	ldr	r2, [pc, #108]	; (daa8 <nmi_get_chipid+0xb4>)
    da3a:	4293      	cmp	r3, r2
    da3c:	d00e      	beq.n	da5c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    da3e:	4a1b      	ldr	r2, [pc, #108]	; (daac <nmi_get_chipid+0xb8>)
    da40:	4293      	cmp	r3, r2
    da42:	d012      	beq.n	da6a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    da44:	4a1a      	ldr	r2, [pc, #104]	; (dab0 <nmi_get_chipid+0xbc>)
    da46:	4293      	cmp	r3, r2
    da48:	d01c      	beq.n	da84 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    da4a:	4914      	ldr	r1, [pc, #80]	; (da9c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    da4c:	4a19      	ldr	r2, [pc, #100]	; (dab4 <nmi_get_chipid+0xc0>)
    da4e:	680b      	ldr	r3, [r1, #0]
    da50:	401a      	ands	r2, r3
		chipid |= 0x050000;
    da52:	23a0      	movs	r3, #160	; 0xa0
    da54:	02db      	lsls	r3, r3, #11
    da56:	4313      	orrs	r3, r2
    da58:	600b      	str	r3, [r1, #0]
    da5a:	e7d1      	b.n	da00 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	2b01      	cmp	r3, #1
    da60:	d0f3      	beq.n	da4a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    da62:	4a15      	ldr	r2, [pc, #84]	; (dab8 <nmi_get_chipid+0xc4>)
    da64:	4b0d      	ldr	r3, [pc, #52]	; (da9c <nmi_get_chipid+0xa8>)
    da66:	601a      	str	r2, [r3, #0]
    da68:	e7ef      	b.n	da4a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    da6a:	9b01      	ldr	r3, [sp, #4]
    da6c:	2b03      	cmp	r3, #3
    da6e:	d0ec      	beq.n	da4a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    da70:	2b04      	cmp	r3, #4
    da72:	d003      	beq.n	da7c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    da74:	4a11      	ldr	r2, [pc, #68]	; (dabc <nmi_get_chipid+0xc8>)
    da76:	4b09      	ldr	r3, [pc, #36]	; (da9c <nmi_get_chipid+0xa8>)
    da78:	601a      	str	r2, [r3, #0]
    da7a:	e7e6      	b.n	da4a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    da7c:	4a10      	ldr	r2, [pc, #64]	; (dac0 <nmi_get_chipid+0xcc>)
    da7e:	4b07      	ldr	r3, [pc, #28]	; (da9c <nmi_get_chipid+0xa8>)
    da80:	601a      	str	r2, [r3, #0]
    da82:	e7e2      	b.n	da4a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    da84:	4905      	ldr	r1, [pc, #20]	; (da9c <nmi_get_chipid+0xa8>)
    da86:	20ec      	movs	r0, #236	; 0xec
    da88:	0380      	lsls	r0, r0, #14
    da8a:	4b05      	ldr	r3, [pc, #20]	; (daa0 <nmi_get_chipid+0xac>)
    da8c:	4798      	blx	r3
    da8e:	2800      	cmp	r0, #0
    da90:	d0db      	beq.n	da4a <nmi_get_chipid+0x56>
			chipid = 0;
    da92:	2200      	movs	r2, #0
    da94:	4b01      	ldr	r3, [pc, #4]	; (da9c <nmi_get_chipid+0xa8>)
    da96:	601a      	str	r2, [r3, #0]
			return 0;
    da98:	e7b4      	b.n	da04 <nmi_get_chipid+0x10>
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	200003cc 	.word	0x200003cc
    daa0:	0000de45 	.word	0x0000de45
    daa4:	000013f4 	.word	0x000013f4
    daa8:	001002a0 	.word	0x001002a0
    daac:	001002b0 	.word	0x001002b0
    dab0:	001000f0 	.word	0x001000f0
    dab4:	fff0ffff 	.word	0xfff0ffff
    dab8:	001002a1 	.word	0x001002a1
    dabc:	001002b2 	.word	0x001002b2
    dac0:	001002b1 	.word	0x001002b1

0000dac4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    dac4:	b530      	push	{r4, r5, lr}
    dac6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dac8:	4c16      	ldr	r4, [pc, #88]	; (db24 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    daca:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dacc:	a901      	add	r1, sp, #4
    dace:	2010      	movs	r0, #16
    dad0:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    dad2:	2800      	cmp	r0, #0
    dad4:	d11c      	bne.n	db10 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    dad6:	9b01      	ldr	r3, [sp, #4]
    dad8:	422b      	tst	r3, r5
    dada:	d1f7      	bne.n	dacc <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    dadc:	a901      	add	r1, sp, #4
    dade:	3001      	adds	r0, #1
    dae0:	4b10      	ldr	r3, [pc, #64]	; (db24 <chip_sleep+0x60>)
    dae2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    dae4:	2800      	cmp	r0, #0
    dae6:	d113      	bne.n	db10 <chip_sleep+0x4c>
	if(reg & NBIT1)
    dae8:	9901      	ldr	r1, [sp, #4]
    daea:	078b      	lsls	r3, r1, #30
    daec:	d507      	bpl.n	dafe <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    daee:	2302      	movs	r3, #2
    daf0:	4399      	bics	r1, r3
    daf2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    daf4:	3001      	adds	r0, #1
    daf6:	4b0c      	ldr	r3, [pc, #48]	; (db28 <chip_sleep+0x64>)
    daf8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    dafa:	2800      	cmp	r0, #0
    dafc:	d108      	bne.n	db10 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    dafe:	a901      	add	r1, sp, #4
    db00:	200b      	movs	r0, #11
    db02:	4b08      	ldr	r3, [pc, #32]	; (db24 <chip_sleep+0x60>)
    db04:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    db06:	2800      	cmp	r0, #0
    db08:	d102      	bne.n	db10 <chip_sleep+0x4c>
	if(reg & NBIT0)
    db0a:	9901      	ldr	r1, [sp, #4]
    db0c:	07cb      	lsls	r3, r1, #31
    db0e:	d401      	bmi.n	db14 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    db10:	b003      	add	sp, #12
    db12:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    db14:	2301      	movs	r3, #1
    db16:	4399      	bics	r1, r3
    db18:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    db1a:	300b      	adds	r0, #11
    db1c:	4b02      	ldr	r3, [pc, #8]	; (db28 <chip_sleep+0x64>)
    db1e:	4798      	blx	r3
    db20:	e7f6      	b.n	db10 <chip_sleep+0x4c>
    db22:	46c0      	nop			; (mov r8, r8)
    db24:	0000de45 	.word	0x0000de45
    db28:	0000de51 	.word	0x0000de51

0000db2c <chip_wake>:
sint8 chip_wake(void)
{
    db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db2e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    db30:	2300      	movs	r3, #0
    db32:	9301      	str	r3, [sp, #4]
    db34:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    db36:	a901      	add	r1, sp, #4
    db38:	200b      	movs	r0, #11
    db3a:	4b28      	ldr	r3, [pc, #160]	; (dbdc <chip_wake+0xb0>)
    db3c:	4798      	blx	r3
    db3e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    db40:	d130      	bne.n	dba4 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    db42:	9901      	ldr	r1, [sp, #4]
    db44:	07cb      	lsls	r3, r1, #31
    db46:	d406      	bmi.n	db56 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    db48:	2301      	movs	r3, #1
    db4a:	4319      	orrs	r1, r3
    db4c:	200b      	movs	r0, #11
    db4e:	4b24      	ldr	r3, [pc, #144]	; (dbe0 <chip_wake+0xb4>)
    db50:	4798      	blx	r3
    db52:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    db54:	d126      	bne.n	dba4 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    db56:	a901      	add	r1, sp, #4
    db58:	2001      	movs	r0, #1
    db5a:	4b20      	ldr	r3, [pc, #128]	; (dbdc <chip_wake+0xb0>)
    db5c:	4798      	blx	r3
    db5e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    db60:	d120      	bne.n	dba4 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    db62:	9901      	ldr	r1, [sp, #4]
    db64:	078b      	lsls	r3, r1, #30
    db66:	d520      	bpl.n	dbaa <chip_wake+0x7e>
{
    db68:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    db6a:	4f1c      	ldr	r7, [pc, #112]	; (dbdc <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    db6c:	4e1d      	ldr	r6, [pc, #116]	; (dbe4 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    db6e:	4669      	mov	r1, sp
    db70:	200f      	movs	r0, #15
    db72:	47b8      	blx	r7
    db74:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    db76:	d120      	bne.n	dbba <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    db78:	9b00      	ldr	r3, [sp, #0]
    db7a:	075b      	lsls	r3, r3, #29
    db7c:	d42b      	bmi.n	dbd6 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    db7e:	2002      	movs	r0, #2
    db80:	47b0      	blx	r6
    db82:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    db84:	2d00      	cmp	r5, #0
    db86:	d1f2      	bne.n	db6e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    db88:	22ad      	movs	r2, #173	; 0xad
    db8a:	0052      	lsls	r2, r2, #1
    db8c:	4916      	ldr	r1, [pc, #88]	; (dbe8 <chip_wake+0xbc>)
    db8e:	4817      	ldr	r0, [pc, #92]	; (dbec <chip_wake+0xc0>)
    db90:	4b17      	ldr	r3, [pc, #92]	; (dbf0 <chip_wake+0xc4>)
    db92:	4798      	blx	r3
    db94:	4817      	ldr	r0, [pc, #92]	; (dbf4 <chip_wake+0xc8>)
    db96:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <chip_wake+0xcc>)
    db98:	4798      	blx	r3
    db9a:	200d      	movs	r0, #13
    db9c:	4b17      	ldr	r3, [pc, #92]	; (dbfc <chip_wake+0xd0>)
    db9e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    dba0:	2404      	movs	r4, #4
    dba2:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    dba4:	0020      	movs	r0, r4
    dba6:	b003      	add	sp, #12
    dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    dbaa:	2302      	movs	r3, #2
    dbac:	4319      	orrs	r1, r3
    dbae:	2001      	movs	r0, #1
    dbb0:	4b0b      	ldr	r3, [pc, #44]	; (dbe0 <chip_wake+0xb4>)
    dbb2:	4798      	blx	r3
    dbb4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    dbb6:	d0d7      	beq.n	db68 <chip_wake+0x3c>
    dbb8:	e7f4      	b.n	dba4 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    dbba:	22a8      	movs	r2, #168	; 0xa8
    dbbc:	0052      	lsls	r2, r2, #1
    dbbe:	490a      	ldr	r1, [pc, #40]	; (dbe8 <chip_wake+0xbc>)
    dbc0:	480a      	ldr	r0, [pc, #40]	; (dbec <chip_wake+0xc0>)
    dbc2:	4d0b      	ldr	r5, [pc, #44]	; (dbf0 <chip_wake+0xc4>)
    dbc4:	47a8      	blx	r5
    dbc6:	9a00      	ldr	r2, [sp, #0]
    dbc8:	0021      	movs	r1, r4
    dbca:	480d      	ldr	r0, [pc, #52]	; (dc00 <chip_wake+0xd4>)
    dbcc:	47a8      	blx	r5
    dbce:	200d      	movs	r0, #13
    dbd0:	4b0a      	ldr	r3, [pc, #40]	; (dbfc <chip_wake+0xd0>)
    dbd2:	4798      	blx	r3
			goto _WAKE_EXIT;
    dbd4:	e7e6      	b.n	dba4 <chip_wake+0x78>
	nm_bus_reset();
    dbd6:	4b0b      	ldr	r3, [pc, #44]	; (dc04 <chip_wake+0xd8>)
    dbd8:	4798      	blx	r3
    dbda:	e7e3      	b.n	dba4 <chip_wake+0x78>
    dbdc:	0000de45 	.word	0x0000de45
    dbe0:	0000de51 	.word	0x0000de51
    dbe4:	0000c669 	.word	0x0000c669
    dbe8:	000192f0 	.word	0x000192f0
    dbec:	00018db0 	.word	0x00018db0
    dbf0:	00017535 	.word	0x00017535
    dbf4:	00019338 	.word	0x00019338
    dbf8:	00017651 	.word	0x00017651
    dbfc:	00017569 	.word	0x00017569
    dc00:	00019320 	.word	0x00019320
    dc04:	0000de2d 	.word	0x0000de2d

0000dc08 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc0a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dc0c:	4d2d      	ldr	r5, [pc, #180]	; (dcc4 <wait_for_bootrom+0xbc>)
    dc0e:	4c2e      	ldr	r4, [pc, #184]	; (dcc8 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    dc10:	4e2e      	ldr	r6, [pc, #184]	; (dccc <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dc12:	0028      	movs	r0, r5
    dc14:	47a0      	blx	r4
		if (reg & 0x80000000) {
    dc16:	2800      	cmp	r0, #0
    dc18:	db02      	blt.n	dc20 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    dc1a:	2001      	movs	r0, #1
    dc1c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dc1e:	e7f8      	b.n	dc12 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    dc20:	482b      	ldr	r0, [pc, #172]	; (dcd0 <wait_for_bootrom+0xc8>)
    dc22:	4b29      	ldr	r3, [pc, #164]	; (dcc8 <wait_for_bootrom+0xc0>)
    dc24:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    dc26:	07c3      	lsls	r3, r0, #31
    dc28:	d409      	bmi.n	dc3e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    dc2a:	4e28      	ldr	r6, [pc, #160]	; (dccc <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    dc2c:	4c29      	ldr	r4, [pc, #164]	; (dcd4 <wait_for_bootrom+0xcc>)
    dc2e:	4d26      	ldr	r5, [pc, #152]	; (dcc8 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    dc30:	2001      	movs	r0, #1
    dc32:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    dc34:	0020      	movs	r0, r4
    dc36:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    dc38:	4b27      	ldr	r3, [pc, #156]	; (dcd8 <wait_for_bootrom+0xd0>)
    dc3a:	4298      	cmp	r0, r3
    dc3c:	d1f8      	bne.n	dc30 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    dc3e:	2f02      	cmp	r7, #2
    dc40:	d021      	beq.n	dc86 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    dc42:	2f03      	cmp	r7, #3
    dc44:	d029      	beq.n	dc9a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    dc46:	2f04      	cmp	r7, #4
    dc48:	d030      	beq.n	dcac <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    dc4a:	4924      	ldr	r1, [pc, #144]	; (dcdc <wait_for_bootrom+0xd4>)
    dc4c:	4824      	ldr	r0, [pc, #144]	; (dce0 <wait_for_bootrom+0xd8>)
    dc4e:	4b25      	ldr	r3, [pc, #148]	; (dce4 <wait_for_bootrom+0xdc>)
    dc50:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    dc52:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    dc54:	4b24      	ldr	r3, [pc, #144]	; (dce8 <wait_for_bootrom+0xe0>)
    dc56:	4798      	blx	r3
    dc58:	0500      	lsls	r0, r0, #20
    dc5a:	0d00      	lsrs	r0, r0, #20
    dc5c:	4b23      	ldr	r3, [pc, #140]	; (dcec <wait_for_bootrom+0xe4>)
    dc5e:	4298      	cmp	r0, r3
    dc60:	d82a      	bhi.n	dcb8 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    dc62:	0020      	movs	r0, r4
    dc64:	4b22      	ldr	r3, [pc, #136]	; (dcf0 <wait_for_bootrom+0xe8>)
    dc66:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    dc68:	4822      	ldr	r0, [pc, #136]	; (dcf4 <wait_for_bootrom+0xec>)
    dc6a:	4c23      	ldr	r4, [pc, #140]	; (dcf8 <wait_for_bootrom+0xf0>)
    dc6c:	47a0      	blx	r4
    dc6e:	491b      	ldr	r1, [pc, #108]	; (dcdc <wait_for_bootrom+0xd4>)
    dc70:	4822      	ldr	r0, [pc, #136]	; (dcfc <wait_for_bootrom+0xf4>)
    dc72:	47a0      	blx	r4
    dc74:	200d      	movs	r0, #13
    dc76:	4b22      	ldr	r3, [pc, #136]	; (dd00 <wait_for_bootrom+0xf8>)
    dc78:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    dc7a:	4922      	ldr	r1, [pc, #136]	; (dd04 <wait_for_bootrom+0xfc>)
    dc7c:	4815      	ldr	r0, [pc, #84]	; (dcd4 <wait_for_bootrom+0xcc>)
    dc7e:	4b19      	ldr	r3, [pc, #100]	; (dce4 <wait_for_bootrom+0xdc>)
    dc80:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    dc82:	2000      	movs	r0, #0
    dc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    dc86:	4920      	ldr	r1, [pc, #128]	; (dd08 <wait_for_bootrom+0x100>)
    dc88:	4820      	ldr	r0, [pc, #128]	; (dd0c <wait_for_bootrom+0x104>)
    dc8a:	4c16      	ldr	r4, [pc, #88]	; (dce4 <wait_for_bootrom+0xdc>)
    dc8c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    dc8e:	2180      	movs	r1, #128	; 0x80
    dc90:	0349      	lsls	r1, r1, #13
    dc92:	4813      	ldr	r0, [pc, #76]	; (dce0 <wait_for_bootrom+0xd8>)
    dc94:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    dc96:	2400      	movs	r4, #0
    dc98:	e7dc      	b.n	dc54 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    dc9a:	491b      	ldr	r1, [pc, #108]	; (dd08 <wait_for_bootrom+0x100>)
    dc9c:	481b      	ldr	r0, [pc, #108]	; (dd0c <wait_for_bootrom+0x104>)
    dc9e:	4c11      	ldr	r4, [pc, #68]	; (dce4 <wait_for_bootrom+0xdc>)
    dca0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    dca2:	2100      	movs	r1, #0
    dca4:	480e      	ldr	r0, [pc, #56]	; (dce0 <wait_for_bootrom+0xd8>)
    dca6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    dca8:	2400      	movs	r4, #0
    dcaa:	e7d3      	b.n	dc54 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    dcac:	490b      	ldr	r1, [pc, #44]	; (dcdc <wait_for_bootrom+0xd4>)
    dcae:	480c      	ldr	r0, [pc, #48]	; (dce0 <wait_for_bootrom+0xd8>)
    dcb0:	4b0c      	ldr	r3, [pc, #48]	; (dce4 <wait_for_bootrom+0xdc>)
    dcb2:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    dcb4:	2480      	movs	r4, #128	; 0x80
    dcb6:	e7cd      	b.n	dc54 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    dcb8:	2002      	movs	r0, #2
    dcba:	4320      	orrs	r0, r4
    dcbc:	4b0c      	ldr	r3, [pc, #48]	; (dcf0 <wait_for_bootrom+0xe8>)
    dcbe:	4798      	blx	r3
    dcc0:	e7d2      	b.n	dc68 <wait_for_bootrom+0x60>
    dcc2:	46c0      	nop			; (mov r8, r8)
    dcc4:	00001014 	.word	0x00001014
    dcc8:	0000de39 	.word	0x0000de39
    dccc:	0000c669 	.word	0x0000c669
    dcd0:	000207bc 	.word	0x000207bc
    dcd4:	000c000c 	.word	0x000c000c
    dcd8:	10add09e 	.word	0x10add09e
    dcdc:	13301354 	.word	0x13301354
    dce0:	0000108c 	.word	0x0000108c
    dce4:	0000de51 	.word	0x0000de51
    dce8:	0000d9f5 	.word	0x0000d9f5
    dcec:	0000039f 	.word	0x0000039f
    dcf0:	0000d961 	.word	0x0000d961
    dcf4:	000190e0 	.word	0x000190e0
    dcf8:	00017535 	.word	0x00017535
    dcfc:	00019354 	.word	0x00019354
    dd00:	00017569 	.word	0x00017569
    dd04:	ef522f61 	.word	0xef522f61
    dd08:	3c1cd57d 	.word	0x3c1cd57d
    dd0c:	000207ac 	.word	0x000207ac

0000dd10 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    dd10:	b570      	push	{r4, r5, r6, lr}
    dd12:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    dd14:	4b15      	ldr	r3, [pc, #84]	; (dd6c <wait_for_firmware_start+0x5c>)
    dd16:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    dd18:	4b15      	ldr	r3, [pc, #84]	; (dd70 <wait_for_firmware_start+0x60>)
    dd1a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    dd1c:	3802      	subs	r0, #2
    dd1e:	2801      	cmp	r0, #1
    dd20:	d911      	bls.n	dd46 <wait_for_firmware_start+0x36>
{
    dd22:	2401      	movs	r4, #1
    dd24:	4264      	negs	r4, r4
    dd26:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dd28:	4e12      	ldr	r6, [pc, #72]	; (dd74 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    dd2a:	4d13      	ldr	r5, [pc, #76]	; (dd78 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    dd2c:	9b00      	ldr	r3, [sp, #0]
    dd2e:	4298      	cmp	r0, r3
    dd30:	d00e      	beq.n	dd50 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dd32:	2002      	movs	r0, #2
    dd34:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    dd36:	9801      	ldr	r0, [sp, #4]
    dd38:	47a8      	blx	r5
    dd3a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    dd3c:	2c00      	cmp	r4, #0
    dd3e:	d1f5      	bne.n	dd2c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    dd40:	2005      	movs	r0, #5
    dd42:	4240      	negs	r0, r0
    dd44:	e009      	b.n	dd5a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    dd46:	4b0d      	ldr	r3, [pc, #52]	; (dd7c <wait_for_firmware_start+0x6c>)
    dd48:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    dd4a:	4b0d      	ldr	r3, [pc, #52]	; (dd80 <wait_for_firmware_start+0x70>)
    dd4c:	9300      	str	r3, [sp, #0]
    dd4e:	e7e8      	b.n	dd22 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    dd50:	9a00      	ldr	r2, [sp, #0]
    dd52:	4b07      	ldr	r3, [pc, #28]	; (dd70 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    dd54:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    dd56:	429a      	cmp	r2, r3
    dd58:	d001      	beq.n	dd5e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    dd5a:	b002      	add	sp, #8
    dd5c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    dd5e:	2100      	movs	r1, #0
    dd60:	4802      	ldr	r0, [pc, #8]	; (dd6c <wait_for_firmware_start+0x5c>)
    dd62:	4b08      	ldr	r3, [pc, #32]	; (dd84 <wait_for_firmware_start+0x74>)
    dd64:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    dd66:	2000      	movs	r0, #0
    dd68:	e7f7      	b.n	dd5a <wait_for_firmware_start+0x4a>
    dd6a:	46c0      	nop			; (mov r8, r8)
    dd6c:	0000108c 	.word	0x0000108c
    dd70:	02532636 	.word	0x02532636
    dd74:	0000c669 	.word	0x0000c669
    dd78:	0000de39 	.word	0x0000de39
    dd7c:	000207ac 	.word	0x000207ac
    dd80:	d75dc1c3 	.word	0xd75dc1c3
    dd84:	0000de51 	.word	0x0000de51

0000dd88 <chip_deinit>:

sint8 chip_deinit(void)
{
    dd88:	b510      	push	{r4, lr}
    dd8a:	b082      	sub	sp, #8
	uint32 reg = 0;
    dd8c:	2300      	movs	r3, #0
    dd8e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    dd90:	a901      	add	r1, sp, #4
    dd92:	20a0      	movs	r0, #160	; 0xa0
    dd94:	0140      	lsls	r0, r0, #5
    dd96:	4b14      	ldr	r3, [pc, #80]	; (dde8 <chip_deinit+0x60>)
    dd98:	4798      	blx	r3
    dd9a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    dd9c:	d115      	bne.n	ddca <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    dd9e:	4913      	ldr	r1, [pc, #76]	; (ddec <chip_deinit+0x64>)
    dda0:	9b01      	ldr	r3, [sp, #4]
    dda2:	4019      	ands	r1, r3
    dda4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    dda6:	20a0      	movs	r0, #160	; 0xa0
    dda8:	0140      	lsls	r0, r0, #5
    ddaa:	4b11      	ldr	r3, [pc, #68]	; (ddf0 <chip_deinit+0x68>)
    ddac:	4798      	blx	r3
    ddae:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    ddb0:	d016      	beq.n	dde0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    ddb2:	4a10      	ldr	r2, [pc, #64]	; (ddf4 <chip_deinit+0x6c>)
    ddb4:	4910      	ldr	r1, [pc, #64]	; (ddf8 <chip_deinit+0x70>)
    ddb6:	4811      	ldr	r0, [pc, #68]	; (ddfc <chip_deinit+0x74>)
    ddb8:	4b11      	ldr	r3, [pc, #68]	; (de00 <chip_deinit+0x78>)
    ddba:	4798      	blx	r3
    ddbc:	4811      	ldr	r0, [pc, #68]	; (de04 <chip_deinit+0x7c>)
    ddbe:	4b12      	ldr	r3, [pc, #72]	; (de08 <chip_deinit+0x80>)
    ddc0:	4798      	blx	r3
    ddc2:	200d      	movs	r0, #13
    ddc4:	4b11      	ldr	r3, [pc, #68]	; (de0c <chip_deinit+0x84>)
    ddc6:	4798      	blx	r3
		goto ERR1;
    ddc8:	e00a      	b.n	dde0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    ddca:	4a11      	ldr	r2, [pc, #68]	; (de10 <chip_deinit+0x88>)
    ddcc:	490a      	ldr	r1, [pc, #40]	; (ddf8 <chip_deinit+0x70>)
    ddce:	480b      	ldr	r0, [pc, #44]	; (ddfc <chip_deinit+0x74>)
    ddd0:	4b0b      	ldr	r3, [pc, #44]	; (de00 <chip_deinit+0x78>)
    ddd2:	4798      	blx	r3
    ddd4:	480b      	ldr	r0, [pc, #44]	; (de04 <chip_deinit+0x7c>)
    ddd6:	4b0c      	ldr	r3, [pc, #48]	; (de08 <chip_deinit+0x80>)
    ddd8:	4798      	blx	r3
    ddda:	200d      	movs	r0, #13
    dddc:	4b0b      	ldr	r3, [pc, #44]	; (de0c <chip_deinit+0x84>)
    ddde:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    dde0:	0020      	movs	r0, r4
    dde2:	b002      	add	sp, #8
    dde4:	bd10      	pop	{r4, pc}
    dde6:	46c0      	nop			; (mov r8, r8)
    dde8:	0000de45 	.word	0x0000de45
    ddec:	fffffbff 	.word	0xfffffbff
    ddf0:	0000de51 	.word	0x0000de51
    ddf4:	00000207 	.word	0x00000207
    ddf8:	000192fc 	.word	0x000192fc
    ddfc:	00018db0 	.word	0x00018db0
    de00:	00017535 	.word	0x00017535
    de04:	00019308 	.word	0x00019308
    de08:	00017651 	.word	0x00017651
    de0c:	00017569 	.word	0x00017569
    de10:	00000201 	.word	0x00000201

0000de14 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    de14:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    de16:	4b01      	ldr	r3, [pc, #4]	; (de1c <nm_bus_iface_init+0x8>)
    de18:	4798      	blx	r3
	return ret;
}
    de1a:	bd10      	pop	{r4, pc}
    de1c:	0000c725 	.word	0x0000c725

0000de20 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    de20:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    de22:	4b01      	ldr	r3, [pc, #4]	; (de28 <nm_bus_iface_deinit+0x8>)
    de24:	4798      	blx	r3

	return ret;
}
    de26:	bd10      	pop	{r4, pc}
    de28:	0000c975 	.word	0x0000c975

0000de2c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    de2c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    de2e:	4b01      	ldr	r3, [pc, #4]	; (de34 <nm_bus_reset+0x8>)
    de30:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    de32:	bd10      	pop	{r4, pc}
    de34:	0000e7d5 	.word	0x0000e7d5

0000de38 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    de38:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    de3a:	4b01      	ldr	r3, [pc, #4]	; (de40 <nm_read_reg+0x8>)
    de3c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    de3e:	bd10      	pop	{r4, pc}
    de40:	0000e80d 	.word	0x0000e80d

0000de44 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    de44:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    de46:	4b01      	ldr	r3, [pc, #4]	; (de4c <nm_read_reg_with_ret+0x8>)
    de48:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    de4a:	bd10      	pop	{r4, pc}
    de4c:	0000e821 	.word	0x0000e821

0000de50 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    de50:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    de52:	4b01      	ldr	r3, [pc, #4]	; (de58 <nm_write_reg+0x8>)
    de54:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    de56:	bd10      	pop	{r4, pc}
    de58:	0000e839 	.word	0x0000e839

0000de5c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    de5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de5e:	46d6      	mov	lr, sl
    de60:	464f      	mov	r7, r9
    de62:	4646      	mov	r6, r8
    de64:	b5c0      	push	{r6, r7, lr}
    de66:	b082      	sub	sp, #8
    de68:	4680      	mov	r8, r0
    de6a:	4689      	mov	r9, r1
    de6c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    de6e:	4b13      	ldr	r3, [pc, #76]	; (debc <nm_read_block+0x60>)
    de70:	881f      	ldrh	r7, [r3, #0]
    de72:	3f08      	subs	r7, #8
    de74:	b2bb      	uxth	r3, r7
    de76:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    de78:	001e      	movs	r6, r3
    de7a:	0004      	movs	r4, r0
    de7c:	429a      	cmp	r2, r3
    de7e:	d91a      	bls.n	deb6 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    de80:	4b0f      	ldr	r3, [pc, #60]	; (dec0 <nm_read_block+0x64>)
    de82:	469a      	mov	sl, r3
    de84:	1a37      	subs	r7, r6, r0
    de86:	4643      	mov	r3, r8
    de88:	1ae1      	subs	r1, r4, r3
    de8a:	4449      	add	r1, r9
    de8c:	9a01      	ldr	r2, [sp, #4]
    de8e:	0020      	movs	r0, r4
    de90:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    de92:	2800      	cmp	r0, #0
    de94:	d109      	bne.n	deaa <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    de96:	1bad      	subs	r5, r5, r6
    de98:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    de9a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    de9c:	42b5      	cmp	r5, r6
    de9e:	d8f2      	bhi.n	de86 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dea0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    dea2:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dea4:	0020      	movs	r0, r4
    dea6:	4b06      	ldr	r3, [pc, #24]	; (dec0 <nm_read_block+0x64>)
    dea8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    deaa:	b002      	add	sp, #8
    deac:	bc1c      	pop	{r2, r3, r4}
    deae:	4690      	mov	r8, r2
    deb0:	4699      	mov	r9, r3
    deb2:	46a2      	mov	sl, r4
    deb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    deb6:	2100      	movs	r1, #0
    deb8:	e7f2      	b.n	dea0 <nm_read_block+0x44>
    deba:	46c0      	nop			; (mov r8, r8)
    debc:	2000000c 	.word	0x2000000c
    dec0:	0000e979 	.word	0x0000e979

0000dec4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dec6:	46d6      	mov	lr, sl
    dec8:	464f      	mov	r7, r9
    deca:	4646      	mov	r6, r8
    decc:	b5c0      	push	{r6, r7, lr}
    dece:	b082      	sub	sp, #8
    ded0:	4680      	mov	r8, r0
    ded2:	4689      	mov	r9, r1
    ded4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ded6:	4b13      	ldr	r3, [pc, #76]	; (df24 <nm_write_block+0x60>)
    ded8:	881f      	ldrh	r7, [r3, #0]
    deda:	3f08      	subs	r7, #8
    dedc:	b2bb      	uxth	r3, r7
    dede:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    dee0:	001e      	movs	r6, r3
    dee2:	0004      	movs	r4, r0
    dee4:	429a      	cmp	r2, r3
    dee6:	d91a      	bls.n	df1e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    dee8:	4b0f      	ldr	r3, [pc, #60]	; (df28 <nm_write_block+0x64>)
    deea:	469a      	mov	sl, r3
    deec:	1a37      	subs	r7, r6, r0
    deee:	4643      	mov	r3, r8
    def0:	1ae1      	subs	r1, r4, r3
    def2:	4449      	add	r1, r9
    def4:	9a01      	ldr	r2, [sp, #4]
    def6:	0020      	movs	r0, r4
    def8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    defa:	2800      	cmp	r0, #0
    defc:	d109      	bne.n	df12 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    defe:	1bad      	subs	r5, r5, r6
    df00:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    df02:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    df04:	42b5      	cmp	r5, r6
    df06:	d8f2      	bhi.n	deee <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    df08:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    df0a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    df0c:	0020      	movs	r0, r4
    df0e:	4b06      	ldr	r3, [pc, #24]	; (df28 <nm_write_block+0x64>)
    df10:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    df12:	b002      	add	sp, #8
    df14:	bc1c      	pop	{r2, r3, r4}
    df16:	4690      	mov	r8, r2
    df18:	4699      	mov	r9, r3
    df1a:	46a2      	mov	sl, r4
    df1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    df1e:	2100      	movs	r1, #0
    df20:	e7f2      	b.n	df08 <nm_write_block+0x44>
    df22:	46c0      	nop			; (mov r8, r8)
    df24:	2000000c 	.word	0x2000000c
    df28:	0000ead5 	.word	0x0000ead5

0000df2c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    df2c:	b570      	push	{r4, r5, r6, lr}
    df2e:	b084      	sub	sp, #16
    df30:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    df32:	2300      	movs	r3, #0
    df34:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    df36:	2208      	movs	r2, #8
    df38:	2100      	movs	r1, #0
    df3a:	a801      	add	r0, sp, #4
    df3c:	4b2d      	ldr	r3, [pc, #180]	; (dff4 <nm_get_firmware_full_info+0xc8>)
    df3e:	4798      	blx	r3
	if (pstrRev != NULL)
    df40:	2c00      	cmp	r4, #0
    df42:	d044      	beq.n	dfce <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    df44:	2228      	movs	r2, #40	; 0x28
    df46:	2100      	movs	r1, #0
    df48:	0020      	movs	r0, r4
    df4a:	4b2b      	ldr	r3, [pc, #172]	; (dff8 <nm_get_firmware_full_info+0xcc>)
    df4c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    df4e:	a903      	add	r1, sp, #12
    df50:	482a      	ldr	r0, [pc, #168]	; (dffc <nm_get_firmware_full_info+0xd0>)
    df52:	4b2b      	ldr	r3, [pc, #172]	; (e000 <nm_get_firmware_full_info+0xd4>)
    df54:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    df56:	2800      	cmp	r0, #0
    df58:	d13a      	bne.n	dfd0 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    df5a:	9b03      	ldr	r3, [sp, #12]
    df5c:	2b00      	cmp	r3, #0
    df5e:	d039      	beq.n	dfd4 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    df60:	20c0      	movs	r0, #192	; 0xc0
    df62:	0280      	lsls	r0, r0, #10
    df64:	4318      	orrs	r0, r3
    df66:	2208      	movs	r2, #8
    df68:	a901      	add	r1, sp, #4
    df6a:	4b26      	ldr	r3, [pc, #152]	; (e004 <nm_get_firmware_full_info+0xd8>)
    df6c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    df6e:	2800      	cmp	r0, #0
    df70:	d12e      	bne.n	dfd0 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    df72:	9b02      	ldr	r3, [sp, #8]
    df74:	0418      	lsls	r0, r3, #16
    df76:	0c00      	lsrs	r0, r0, #16
    df78:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    df7a:	d02e      	beq.n	dfda <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    df7c:	23c0      	movs	r3, #192	; 0xc0
    df7e:	029b      	lsls	r3, r3, #10
    df80:	4318      	orrs	r0, r3
    df82:	2228      	movs	r2, #40	; 0x28
    df84:	0021      	movs	r1, r4
    df86:	4b1f      	ldr	r3, [pc, #124]	; (e004 <nm_get_firmware_full_info+0xd8>)
    df88:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    df8a:	2800      	cmp	r0, #0
    df8c:	d120      	bne.n	dfd0 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    df8e:	7921      	ldrb	r1, [r4, #4]
    df90:	0209      	lsls	r1, r1, #8
    df92:	79a2      	ldrb	r2, [r4, #6]
    df94:	230f      	movs	r3, #15
    df96:	401a      	ands	r2, r3
    df98:	430a      	orrs	r2, r1
    df9a:	7961      	ldrb	r1, [r4, #5]
    df9c:	0109      	lsls	r1, r1, #4
    df9e:	25ff      	movs	r5, #255	; 0xff
    dfa0:	4029      	ands	r1, r5
    dfa2:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    dfa4:	79e1      	ldrb	r1, [r4, #7]
    dfa6:	0209      	lsls	r1, r1, #8
    dfa8:	7a66      	ldrb	r6, [r4, #9]
    dfaa:	4033      	ands	r3, r6
    dfac:	430b      	orrs	r3, r1
    dfae:	7a21      	ldrb	r1, [r4, #8]
    dfb0:	0109      	lsls	r1, r1, #4
    dfb2:	400d      	ands	r5, r1
    dfb4:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    dfb6:	2a00      	cmp	r2, #0
    dfb8:	d012      	beq.n	dfe0 <nm_get_firmware_full_info+0xb4>
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d013      	beq.n	dfe6 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    dfbe:	4912      	ldr	r1, [pc, #72]	; (e008 <nm_get_firmware_full_info+0xdc>)
    dfc0:	428b      	cmp	r3, r1
    dfc2:	d813      	bhi.n	dfec <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    dfc4:	4b11      	ldr	r3, [pc, #68]	; (e00c <nm_get_firmware_full_info+0xe0>)
    dfc6:	429a      	cmp	r2, r3
    dfc8:	d802      	bhi.n	dfd0 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    dfca:	380d      	subs	r0, #13
    dfcc:	e000      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    dfce:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    dfd0:	b004      	add	sp, #16
    dfd2:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    dfd4:	200c      	movs	r0, #12
    dfd6:	4240      	negs	r0, r0
    dfd8:	e7fa      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    dfda:	200c      	movs	r0, #12
    dfdc:	4240      	negs	r0, r0
    dfde:	e7f7      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    dfe0:	200c      	movs	r0, #12
    dfe2:	4240      	negs	r0, r0
    dfe4:	e7f4      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
    dfe6:	200c      	movs	r0, #12
    dfe8:	4240      	negs	r0, r0
    dfea:	e7f1      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    dfec:	200d      	movs	r0, #13
    dfee:	4240      	negs	r0, r0
    dff0:	e7ee      	b.n	dfd0 <nm_get_firmware_full_info+0xa4>
    dff2:	46c0      	nop			; (mov r8, r8)
    dff4:	000173d3 	.word	0x000173d3
    dff8:	0000c9f5 	.word	0x0000c9f5
    dffc:	000c0008 	.word	0x000c0008
    e000:	0000de45 	.word	0x0000de45
    e004:	0000de5d 	.word	0x0000de5d
    e008:	00001354 	.word	0x00001354
    e00c:	00001353 	.word	0x00001353

0000e010 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    e010:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    e012:	2800      	cmp	r0, #0
    e014:	d037      	beq.n	e086 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    e016:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    e018:	1e6b      	subs	r3, r5, #1
    e01a:	2b03      	cmp	r3, #3
    e01c:	d900      	bls.n	e020 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    e01e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    e020:	2000      	movs	r0, #0
    e022:	4b20      	ldr	r3, [pc, #128]	; (e0a4 <nm_drv_init+0x94>)
    e024:	4798      	blx	r3
    e026:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e028:	d12f      	bne.n	e08a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    e02a:	481f      	ldr	r0, [pc, #124]	; (e0a8 <nm_drv_init+0x98>)
    e02c:	4c1f      	ldr	r4, [pc, #124]	; (e0ac <nm_drv_init+0x9c>)
    e02e:	47a0      	blx	r4
    e030:	4b1f      	ldr	r3, [pc, #124]	; (e0b0 <nm_drv_init+0xa0>)
    e032:	4798      	blx	r3
    e034:	0001      	movs	r1, r0
    e036:	481f      	ldr	r0, [pc, #124]	; (e0b4 <nm_drv_init+0xa4>)
    e038:	47a0      	blx	r4
    e03a:	200d      	movs	r0, #13
    e03c:	4b1e      	ldr	r3, [pc, #120]	; (e0b8 <nm_drv_init+0xa8>)
    e03e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    e040:	4b1e      	ldr	r3, [pc, #120]	; (e0bc <nm_drv_init+0xac>)
    e042:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    e044:	0028      	movs	r0, r5
    e046:	4b1e      	ldr	r3, [pc, #120]	; (e0c0 <nm_drv_init+0xb0>)
    e048:	4798      	blx	r3
    e04a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e04c:	d117      	bne.n	e07e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    e04e:	0028      	movs	r0, r5
    e050:	4b1c      	ldr	r3, [pc, #112]	; (e0c4 <nm_drv_init+0xb4>)
    e052:	4798      	blx	r3
    e054:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e056:	d112      	bne.n	e07e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    e058:	3d02      	subs	r5, #2
    e05a:	2d01      	cmp	r5, #1
    e05c:	d911      	bls.n	e082 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    e05e:	4b1a      	ldr	r3, [pc, #104]	; (e0c8 <nm_drv_init+0xb8>)
    e060:	4798      	blx	r3
    e062:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e064:	d00d      	beq.n	e082 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    e066:	22a7      	movs	r2, #167	; 0xa7
    e068:	0052      	lsls	r2, r2, #1
    e06a:	4918      	ldr	r1, [pc, #96]	; (e0cc <nm_drv_init+0xbc>)
    e06c:	4818      	ldr	r0, [pc, #96]	; (e0d0 <nm_drv_init+0xc0>)
    e06e:	4b0f      	ldr	r3, [pc, #60]	; (e0ac <nm_drv_init+0x9c>)
    e070:	4798      	blx	r3
    e072:	4818      	ldr	r0, [pc, #96]	; (e0d4 <nm_drv_init+0xc4>)
    e074:	4b18      	ldr	r3, [pc, #96]	; (e0d8 <nm_drv_init+0xc8>)
    e076:	4798      	blx	r3
    e078:	200d      	movs	r0, #13
    e07a:	4b0f      	ldr	r3, [pc, #60]	; (e0b8 <nm_drv_init+0xa8>)
    e07c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    e07e:	4b17      	ldr	r3, [pc, #92]	; (e0dc <nm_drv_init+0xcc>)
    e080:	4798      	blx	r3
ERR1:
	return ret;
}
    e082:	0020      	movs	r0, r4
    e084:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    e086:	2501      	movs	r5, #1
    e088:	e7ca      	b.n	e020 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    e08a:	2290      	movs	r2, #144	; 0x90
    e08c:	0052      	lsls	r2, r2, #1
    e08e:	490f      	ldr	r1, [pc, #60]	; (e0cc <nm_drv_init+0xbc>)
    e090:	480f      	ldr	r0, [pc, #60]	; (e0d0 <nm_drv_init+0xc0>)
    e092:	4b06      	ldr	r3, [pc, #24]	; (e0ac <nm_drv_init+0x9c>)
    e094:	4798      	blx	r3
    e096:	4812      	ldr	r0, [pc, #72]	; (e0e0 <nm_drv_init+0xd0>)
    e098:	4b0f      	ldr	r3, [pc, #60]	; (e0d8 <nm_drv_init+0xc8>)
    e09a:	4798      	blx	r3
    e09c:	200d      	movs	r0, #13
    e09e:	4b06      	ldr	r3, [pc, #24]	; (e0b8 <nm_drv_init+0xa8>)
    e0a0:	4798      	blx	r3
		goto ERR1;
    e0a2:	e7ee      	b.n	e082 <nm_drv_init+0x72>
    e0a4:	0000de15 	.word	0x0000de15
    e0a8:	000190e0 	.word	0x000190e0
    e0ac:	00017535 	.word	0x00017535
    e0b0:	0000d9f5 	.word	0x0000d9f5
    e0b4:	00019424 	.word	0x00019424
    e0b8:	00017569 	.word	0x00017569
    e0bc:	0000e851 	.word	0x0000e851
    e0c0:	0000dc09 	.word	0x0000dc09
    e0c4:	0000dd11 	.word	0x0000dd11
    e0c8:	0000d999 	.word	0x0000d999
    e0cc:	0001936c 	.word	0x0001936c
    e0d0:	00018db0 	.word	0x00018db0
    e0d4:	000193e8 	.word	0x000193e8
    e0d8:	00017651 	.word	0x00017651
    e0dc:	0000de21 	.word	0x0000de21
    e0e0:	00019408 	.word	0x00019408

0000e0e4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    e0e4:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    e0e6:	4b1c      	ldr	r3, [pc, #112]	; (e158 <nm_drv_deinit+0x74>)
    e0e8:	4798      	blx	r3
    e0ea:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e0ec:	d10b      	bne.n	e106 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    e0ee:	2000      	movs	r0, #0
    e0f0:	4b1a      	ldr	r3, [pc, #104]	; (e15c <nm_drv_deinit+0x78>)
    e0f2:	4798      	blx	r3
    e0f4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e0f6:	d114      	bne.n	e122 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    e0f8:	4b19      	ldr	r3, [pc, #100]	; (e160 <nm_drv_deinit+0x7c>)
    e0fa:	4798      	blx	r3
    e0fc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e0fe:	d11d      	bne.n	e13c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    e100:	4b18      	ldr	r3, [pc, #96]	; (e164 <nm_drv_deinit+0x80>)
    e102:	4798      	blx	r3
    e104:	e00b      	b.n	e11e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    e106:	2266      	movs	r2, #102	; 0x66
    e108:	32ff      	adds	r2, #255	; 0xff
    e10a:	4917      	ldr	r1, [pc, #92]	; (e168 <nm_drv_deinit+0x84>)
    e10c:	4817      	ldr	r0, [pc, #92]	; (e16c <nm_drv_deinit+0x88>)
    e10e:	4b18      	ldr	r3, [pc, #96]	; (e170 <nm_drv_deinit+0x8c>)
    e110:	4798      	blx	r3
    e112:	4818      	ldr	r0, [pc, #96]	; (e174 <nm_drv_deinit+0x90>)
    e114:	4b18      	ldr	r3, [pc, #96]	; (e178 <nm_drv_deinit+0x94>)
    e116:	4798      	blx	r3
    e118:	200d      	movs	r0, #13
    e11a:	4b18      	ldr	r3, [pc, #96]	; (e17c <nm_drv_deinit+0x98>)
    e11c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    e11e:	0020      	movs	r0, r4
    e120:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    e122:	22b6      	movs	r2, #182	; 0xb6
    e124:	0052      	lsls	r2, r2, #1
    e126:	4910      	ldr	r1, [pc, #64]	; (e168 <nm_drv_deinit+0x84>)
    e128:	4810      	ldr	r0, [pc, #64]	; (e16c <nm_drv_deinit+0x88>)
    e12a:	4b11      	ldr	r3, [pc, #68]	; (e170 <nm_drv_deinit+0x8c>)
    e12c:	4798      	blx	r3
    e12e:	4814      	ldr	r0, [pc, #80]	; (e180 <nm_drv_deinit+0x9c>)
    e130:	4b11      	ldr	r3, [pc, #68]	; (e178 <nm_drv_deinit+0x94>)
    e132:	4798      	blx	r3
    e134:	200d      	movs	r0, #13
    e136:	4b11      	ldr	r3, [pc, #68]	; (e17c <nm_drv_deinit+0x98>)
    e138:	4798      	blx	r3
		goto ERR1;
    e13a:	e7f0      	b.n	e11e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    e13c:	22b9      	movs	r2, #185	; 0xb9
    e13e:	0052      	lsls	r2, r2, #1
    e140:	4909      	ldr	r1, [pc, #36]	; (e168 <nm_drv_deinit+0x84>)
    e142:	480a      	ldr	r0, [pc, #40]	; (e16c <nm_drv_deinit+0x88>)
    e144:	4b0a      	ldr	r3, [pc, #40]	; (e170 <nm_drv_deinit+0x8c>)
    e146:	4798      	blx	r3
    e148:	480e      	ldr	r0, [pc, #56]	; (e184 <nm_drv_deinit+0xa0>)
    e14a:	4b0b      	ldr	r3, [pc, #44]	; (e178 <nm_drv_deinit+0x94>)
    e14c:	4798      	blx	r3
    e14e:	200d      	movs	r0, #13
    e150:	4b0a      	ldr	r3, [pc, #40]	; (e17c <nm_drv_deinit+0x98>)
    e152:	4798      	blx	r3
		goto ERR1;
    e154:	e7e3      	b.n	e11e <nm_drv_deinit+0x3a>
    e156:	46c0      	nop			; (mov r8, r8)
    e158:	0000dd89 	.word	0x0000dd89
    e15c:	0000f6b1 	.word	0x0000f6b1
    e160:	0000de21 	.word	0x0000de21
    e164:	0000e7fd 	.word	0x0000e7fd
    e168:	00019378 	.word	0x00019378
    e16c:	00018db0 	.word	0x00018db0
    e170:	00017535 	.word	0x00017535
    e174:	00019388 	.word	0x00019388
    e178:	00017651 	.word	0x00017651
    e17c:	00017569 	.word	0x00017569
    e180:	000193a8 	.word	0x000193a8
    e184:	000193cc 	.word	0x000193cc

0000e188 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    e188:	b500      	push	{lr}
    e18a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    e18c:	ab01      	add	r3, sp, #4
    e18e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    e190:	2200      	movs	r2, #0
    e192:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    e194:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e196:	0019      	movs	r1, r3
    e198:	2003      	movs	r0, #3
    e19a:	4b02      	ldr	r3, [pc, #8]	; (e1a4 <nmi_spi_write+0x1c>)
    e19c:	4798      	blx	r3
}
    e19e:	b005      	add	sp, #20
    e1a0:	bd00      	pop	{pc}
    e1a2:	46c0      	nop			; (mov r8, r8)
    e1a4:	0000c829 	.word	0x0000c829

0000e1a8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    e1a8:	b570      	push	{r4, r5, r6, lr}
    e1aa:	b084      	sub	sp, #16
    e1ac:	ac08      	add	r4, sp, #32
    e1ae:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    e1b0:	ac01      	add	r4, sp, #4
    e1b2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    e1b4:	303f      	adds	r0, #63	; 0x3f
    e1b6:	b2c4      	uxtb	r4, r0
    e1b8:	2c0e      	cmp	r4, #14
    e1ba:	d900      	bls.n	e1be <spi_cmd+0x16>
    e1bc:	e084      	b.n	e2c8 <spi_cmd+0x120>
    e1be:	00a0      	lsls	r0, r4, #2
    e1c0:	4c4f      	ldr	r4, [pc, #316]	; (e300 <spi_cmd+0x158>)
    e1c2:	5820      	ldr	r0, [r4, r0]
    e1c4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    e1c6:	ab01      	add	r3, sp, #4
    e1c8:	0c0a      	lsrs	r2, r1, #16
    e1ca:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e1cc:	0a0a      	lsrs	r2, r1, #8
    e1ce:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    e1d0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    e1d2:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    e1d4:	4b4b      	ldr	r3, [pc, #300]	; (e304 <spi_cmd+0x15c>)
    e1d6:	781b      	ldrb	r3, [r3, #0]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d077      	beq.n	e2cc <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    e1dc:	3901      	subs	r1, #1
    e1de:	b2c9      	uxtb	r1, r1
    e1e0:	e083      	b.n	e2ea <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    e1e2:	0a0b      	lsrs	r3, r1, #8
    e1e4:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e1e6:	2d00      	cmp	r5, #0
    e1e8:	d107      	bne.n	e1fa <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    e1ea:	aa01      	add	r2, sp, #4
    e1ec:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    e1ee:	ab01      	add	r3, sp, #4
    e1f0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    e1f2:	2200      	movs	r2, #0
    e1f4:	70da      	strb	r2, [r3, #3]
		len = 5;
    e1f6:	2105      	movs	r1, #5
		break;
    e1f8:	e7ec      	b.n	e1d4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e1fa:	2280      	movs	r2, #128	; 0x80
    e1fc:	4252      	negs	r2, r2
    e1fe:	4313      	orrs	r3, r2
    e200:	aa01      	add	r2, sp, #4
    e202:	7053      	strb	r3, [r2, #1]
    e204:	e7f3      	b.n	e1ee <spi_cmd+0x46>
		bc[1] = 0x00;
    e206:	ab01      	add	r3, sp, #4
    e208:	2200      	movs	r2, #0
    e20a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e20c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e20e:	70da      	strb	r2, [r3, #3]
		len = 5;
    e210:	2105      	movs	r1, #5
		break;
    e212:	e7df      	b.n	e1d4 <spi_cmd+0x2c>
		bc[1] = 0x00;
    e214:	ab01      	add	r3, sp, #4
    e216:	2200      	movs	r2, #0
    e218:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e21a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e21c:	70da      	strb	r2, [r3, #3]
		len = 5;
    e21e:	2105      	movs	r1, #5
		break;
    e220:	e7d8      	b.n	e1d4 <spi_cmd+0x2c>
		bc[1] = 0xff;
    e222:	ab01      	add	r3, sp, #4
    e224:	22ff      	movs	r2, #255	; 0xff
    e226:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    e228:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    e22a:	70da      	strb	r2, [r3, #3]
		len = 5;
    e22c:	2105      	movs	r1, #5
		break;
    e22e:	e7d1      	b.n	e1d4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e230:	aa01      	add	r2, sp, #4
    e232:	0c08      	lsrs	r0, r1, #16
    e234:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e236:	0a08      	lsrs	r0, r1, #8
    e238:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e23a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    e23c:	0a19      	lsrs	r1, r3, #8
    e23e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    e240:	7153      	strb	r3, [r2, #5]
		len = 7;
    e242:	2107      	movs	r1, #7
		break;
    e244:	e7c6      	b.n	e1d4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e246:	aa01      	add	r2, sp, #4
    e248:	0c08      	lsrs	r0, r1, #16
    e24a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e24c:	0a08      	lsrs	r0, r1, #8
    e24e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e250:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    e252:	0c19      	lsrs	r1, r3, #16
    e254:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    e256:	0a19      	lsrs	r1, r3, #8
    e258:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    e25a:	7193      	strb	r3, [r2, #6]
		len = 8;
    e25c:	2108      	movs	r1, #8
		break;
    e25e:	e7b9      	b.n	e1d4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    e260:	0a0b      	lsrs	r3, r1, #8
    e262:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e264:	2d00      	cmp	r5, #0
    e266:	d10c      	bne.n	e282 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    e268:	a801      	add	r0, sp, #4
    e26a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    e26c:	ab01      	add	r3, sp, #4
    e26e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    e270:	0e11      	lsrs	r1, r2, #24
    e272:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    e274:	0c11      	lsrs	r1, r2, #16
    e276:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    e278:	0a11      	lsrs	r1, r2, #8
    e27a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    e27c:	719a      	strb	r2, [r3, #6]
		len = 8;
    e27e:	2108      	movs	r1, #8
		break;
    e280:	e7a8      	b.n	e1d4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e282:	2080      	movs	r0, #128	; 0x80
    e284:	4240      	negs	r0, r0
    e286:	4303      	orrs	r3, r0
    e288:	a801      	add	r0, sp, #4
    e28a:	7043      	strb	r3, [r0, #1]
    e28c:	e7ee      	b.n	e26c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    e28e:	ab01      	add	r3, sp, #4
    e290:	0c08      	lsrs	r0, r1, #16
    e292:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e294:	0a08      	lsrs	r0, r1, #8
    e296:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    e298:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    e29a:	0e11      	lsrs	r1, r2, #24
    e29c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    e29e:	0c11      	lsrs	r1, r2, #16
    e2a0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    e2a2:	0a11      	lsrs	r1, r2, #8
    e2a4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    e2a6:	71da      	strb	r2, [r3, #7]
		len = 9;
    e2a8:	2109      	movs	r1, #9
		break;
    e2aa:	e793      	b.n	e1d4 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    e2ac:	2290      	movs	r2, #144	; 0x90
    e2ae:	0052      	lsls	r2, r2, #1
    e2b0:	4915      	ldr	r1, [pc, #84]	; (e308 <spi_cmd+0x160>)
    e2b2:	4816      	ldr	r0, [pc, #88]	; (e30c <spi_cmd+0x164>)
    e2b4:	4b16      	ldr	r3, [pc, #88]	; (e310 <spi_cmd+0x168>)
    e2b6:	4798      	blx	r3
    e2b8:	4816      	ldr	r0, [pc, #88]	; (e314 <spi_cmd+0x16c>)
    e2ba:	4b17      	ldr	r3, [pc, #92]	; (e318 <spi_cmd+0x170>)
    e2bc:	4798      	blx	r3
    e2be:	200d      	movs	r0, #13
    e2c0:	4b16      	ldr	r3, [pc, #88]	; (e31c <spi_cmd+0x174>)
    e2c2:	4798      	blx	r3
			result = N_FAIL;
    e2c4:	2300      	movs	r3, #0
    e2c6:	e017      	b.n	e2f8 <spi_cmd+0x150>
	switch (cmd) {
    e2c8:	2300      	movs	r3, #0
    e2ca:	e015      	b.n	e2f8 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e2cc:	1e4e      	subs	r6, r1, #1
    e2ce:	aa01      	add	r2, sp, #4
    e2d0:	1995      	adds	r5, r2, r6
    e2d2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    e2d4:	4c12      	ldr	r4, [pc, #72]	; (e320 <spi_cmd+0x178>)
    e2d6:	005b      	lsls	r3, r3, #1
    e2d8:	7810      	ldrb	r0, [r2, #0]
    e2da:	4043      	eors	r3, r0
    e2dc:	5ce3      	ldrb	r3, [r4, r3]
    e2de:	3201      	adds	r2, #1
	while (len--)
    e2e0:	42aa      	cmp	r2, r5
    e2e2:	d1f8      	bne.n	e2d6 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e2e4:	005b      	lsls	r3, r3, #1
    e2e6:	aa01      	add	r2, sp, #4
    e2e8:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    e2ea:	b289      	uxth	r1, r1
    e2ec:	a801      	add	r0, sp, #4
    e2ee:	4b0d      	ldr	r3, [pc, #52]	; (e324 <spi_cmd+0x17c>)
    e2f0:	4798      	blx	r3
    e2f2:	2301      	movs	r3, #1
    e2f4:	2800      	cmp	r0, #0
    e2f6:	d1d9      	bne.n	e2ac <spi_cmd+0x104>
		}
	}

	return result;
}
    e2f8:	0018      	movs	r0, r3
    e2fa:	b004      	add	sp, #16
    e2fc:	bd70      	pop	{r4, r5, r6, pc}
    e2fe:	46c0      	nop			; (mov r8, r8)
    e300:	00019434 	.word	0x00019434
    e304:	200003d0 	.word	0x200003d0
    e308:	00019474 	.word	0x00019474
    e30c:	00018db0 	.word	0x00018db0
    e310:	00017535 	.word	0x00017535
    e314:	00019904 	.word	0x00019904
    e318:	00017651 	.word	0x00017651
    e31c:	00017569 	.word	0x00017569
    e320:	00019500 	.word	0x00019500
    e324:	0000e189 	.word	0x0000e189

0000e328 <nmi_spi_read>:
{
    e328:	b500      	push	{lr}
    e32a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    e32c:	ab01      	add	r3, sp, #4
    e32e:	2200      	movs	r2, #0
    e330:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    e332:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    e334:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e336:	0019      	movs	r1, r3
    e338:	2003      	movs	r0, #3
    e33a:	4b02      	ldr	r3, [pc, #8]	; (e344 <nmi_spi_read+0x1c>)
    e33c:	4798      	blx	r3
}
    e33e:	b005      	add	sp, #20
    e340:	bd00      	pop	{pc}
    e342:	46c0      	nop			; (mov r8, r8)
    e344:	0000c829 	.word	0x0000c829

0000e348 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    e348:	b5f0      	push	{r4, r5, r6, r7, lr}
    e34a:	46c6      	mov	lr, r8
    e34c:	b500      	push	{lr}
    e34e:	b082      	sub	sp, #8
    e350:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    e352:	28cf      	cmp	r0, #207	; 0xcf
    e354:	d02b      	beq.n	e3ae <spi_cmd_rsp+0x66>
    e356:	0003      	movs	r3, r0
    e358:	333b      	adds	r3, #59	; 0x3b
    e35a:	b2db      	uxtb	r3, r3
    e35c:	2b01      	cmp	r3, #1
    e35e:	d926      	bls.n	e3ae <spi_cmd_rsp+0x66>
{
    e360:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e362:	466b      	mov	r3, sp
    e364:	1dde      	adds	r6, r3, #7
    e366:	4b26      	ldr	r3, [pc, #152]	; (e400 <spi_cmd_rsp+0xb8>)
    e368:	4698      	mov	r8, r3
    e36a:	2101      	movs	r1, #1
    e36c:	0030      	movs	r0, r6
    e36e:	47c0      	blx	r8
    e370:	1e05      	subs	r5, r0, #0
    e372:	d125      	bne.n	e3c0 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    e374:	7833      	ldrb	r3, [r6, #0]
    e376:	42bb      	cmp	r3, r7
    e378:	d030      	beq.n	e3dc <spi_cmd_rsp+0x94>
    e37a:	3c01      	subs	r4, #1
    e37c:	b2e4      	uxtb	r4, r4
    e37e:	2c00      	cmp	r4, #0
    e380:	d1f3      	bne.n	e36a <spi_cmd_rsp+0x22>
    e382:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e384:	466b      	mov	r3, sp
    e386:	1dde      	adds	r6, r3, #7
    e388:	4f1d      	ldr	r7, [pc, #116]	; (e400 <spi_cmd_rsp+0xb8>)
    e38a:	2101      	movs	r1, #1
    e38c:	0030      	movs	r0, r6
    e38e:	47b8      	blx	r7
    e390:	2800      	cmp	r0, #0
    e392:	d125      	bne.n	e3e0 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    e394:	7833      	ldrb	r3, [r6, #0]
    e396:	2b00      	cmp	r3, #0
    e398:	d02f      	beq.n	e3fa <spi_cmd_rsp+0xb2>
    e39a:	3c01      	subs	r4, #1
    e39c:	b2e4      	uxtb	r4, r4
    e39e:	2c00      	cmp	r4, #0
    e3a0:	d1f3      	bne.n	e38a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    e3a2:	2501      	movs	r5, #1

_fail_:

	return result;
}
    e3a4:	0028      	movs	r0, r5
    e3a6:	b002      	add	sp, #8
    e3a8:	bc04      	pop	{r2}
    e3aa:	4690      	mov	r8, r2
    e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e3ae:	2101      	movs	r1, #1
    e3b0:	466b      	mov	r3, sp
    e3b2:	1dd8      	adds	r0, r3, #7
    e3b4:	4b12      	ldr	r3, [pc, #72]	; (e400 <spi_cmd_rsp+0xb8>)
    e3b6:	4798      	blx	r3
			result = N_FAIL;
    e3b8:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e3ba:	2800      	cmp	r0, #0
    e3bc:	d0d0      	beq.n	e360 <spi_cmd_rsp+0x18>
    e3be:	e7f1      	b.n	e3a4 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e3c0:	225c      	movs	r2, #92	; 0x5c
    e3c2:	32ff      	adds	r2, #255	; 0xff
    e3c4:	490f      	ldr	r1, [pc, #60]	; (e404 <spi_cmd_rsp+0xbc>)
    e3c6:	4810      	ldr	r0, [pc, #64]	; (e408 <spi_cmd_rsp+0xc0>)
    e3c8:	4b10      	ldr	r3, [pc, #64]	; (e40c <spi_cmd_rsp+0xc4>)
    e3ca:	4798      	blx	r3
    e3cc:	4810      	ldr	r0, [pc, #64]	; (e410 <spi_cmd_rsp+0xc8>)
    e3ce:	4b11      	ldr	r3, [pc, #68]	; (e414 <spi_cmd_rsp+0xcc>)
    e3d0:	4798      	blx	r3
    e3d2:	200d      	movs	r0, #13
    e3d4:	4b10      	ldr	r3, [pc, #64]	; (e418 <spi_cmd_rsp+0xd0>)
    e3d6:	4798      	blx	r3
			result = N_FAIL;
    e3d8:	2500      	movs	r5, #0
			goto _fail_;
    e3da:	e7e3      	b.n	e3a4 <spi_cmd_rsp+0x5c>
    e3dc:	240b      	movs	r4, #11
    e3de:	e7d1      	b.n	e384 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e3e0:	226a      	movs	r2, #106	; 0x6a
    e3e2:	32ff      	adds	r2, #255	; 0xff
    e3e4:	4907      	ldr	r1, [pc, #28]	; (e404 <spi_cmd_rsp+0xbc>)
    e3e6:	4808      	ldr	r0, [pc, #32]	; (e408 <spi_cmd_rsp+0xc0>)
    e3e8:	4b08      	ldr	r3, [pc, #32]	; (e40c <spi_cmd_rsp+0xc4>)
    e3ea:	4798      	blx	r3
    e3ec:	4808      	ldr	r0, [pc, #32]	; (e410 <spi_cmd_rsp+0xc8>)
    e3ee:	4b09      	ldr	r3, [pc, #36]	; (e414 <spi_cmd_rsp+0xcc>)
    e3f0:	4798      	blx	r3
    e3f2:	200d      	movs	r0, #13
    e3f4:	4b08      	ldr	r3, [pc, #32]	; (e418 <spi_cmd_rsp+0xd0>)
    e3f6:	4798      	blx	r3
			goto _fail_;
    e3f8:	e7d4      	b.n	e3a4 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    e3fa:	2501      	movs	r5, #1
    e3fc:	e7d2      	b.n	e3a4 <spi_cmd_rsp+0x5c>
    e3fe:	46c0      	nop			; (mov r8, r8)
    e400:	0000e329 	.word	0x0000e329
    e404:	0001948c 	.word	0x0001948c
    e408:	00018db0 	.word	0x00018db0
    e40c:	00017535 	.word	0x00017535
    e410:	00019930 	.word	0x00019930
    e414:	00017651 	.word	0x00017651
    e418:	00017569 	.word	0x00017569

0000e41c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e41e:	46de      	mov	lr, fp
    e420:	4657      	mov	r7, sl
    e422:	464e      	mov	r6, r9
    e424:	4645      	mov	r5, r8
    e426:	b5e0      	push	{r5, r6, r7, lr}
    e428:	b087      	sub	sp, #28
    e42a:	9001      	str	r0, [sp, #4]
    e42c:	4689      	mov	r9, r1
    e42e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    e430:	2300      	movs	r3, #0
    e432:	469a      	mov	sl, r3
    e434:	2380      	movs	r3, #128	; 0x80
    e436:	019b      	lsls	r3, r3, #6
    e438:	469b      	mov	fp, r3
    e43a:	466a      	mov	r2, sp
    e43c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e43e:	4b3c      	ldr	r3, [pc, #240]	; (e530 <spi_data_read+0x114>)
    e440:	4698      	mov	r8, r3
    e442:	e02f      	b.n	e4a4 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    e444:	22be      	movs	r2, #190	; 0xbe
    e446:	0092      	lsls	r2, r2, #2
    e448:	493a      	ldr	r1, [pc, #232]	; (e534 <spi_data_read+0x118>)
    e44a:	483b      	ldr	r0, [pc, #236]	; (e538 <spi_data_read+0x11c>)
    e44c:	4b3b      	ldr	r3, [pc, #236]	; (e53c <spi_data_read+0x120>)
    e44e:	4798      	blx	r3
    e450:	483b      	ldr	r0, [pc, #236]	; (e540 <spi_data_read+0x124>)
    e452:	4b3c      	ldr	r3, [pc, #240]	; (e544 <spi_data_read+0x128>)
    e454:	4798      	blx	r3
    e456:	200d      	movs	r0, #13
    e458:	4b3b      	ldr	r3, [pc, #236]	; (e548 <spi_data_read+0x12c>)
    e45a:	4798      	blx	r3
    e45c:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    e45e:	0028      	movs	r0, r5
    e460:	b007      	add	sp, #28
    e462:	bc3c      	pop	{r2, r3, r4, r5}
    e464:	4690      	mov	r8, r2
    e466:	4699      	mov	r9, r3
    e468:	46a2      	mov	sl, r4
    e46a:	46ab      	mov	fp, r5
    e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    e46e:	2c00      	cmp	r4, #0
    e470:	dd2e      	ble.n	e4d0 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    e472:	9b01      	ldr	r3, [sp, #4]
    e474:	4453      	add	r3, sl
    e476:	0018      	movs	r0, r3
    e478:	0039      	movs	r1, r7
    e47a:	4b2d      	ldr	r3, [pc, #180]	; (e530 <spi_data_read+0x114>)
    e47c:	4798      	blx	r3
    e47e:	1e04      	subs	r4, r0, #0
    e480:	d134      	bne.n	e4ec <spi_data_read+0xd0>
		if(!clockless)
    e482:	9b02      	ldr	r3, [sp, #8]
    e484:	2b00      	cmp	r3, #0
    e486:	d103      	bne.n	e490 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    e488:	4b30      	ldr	r3, [pc, #192]	; (e54c <spi_data_read+0x130>)
    e48a:	781b      	ldrb	r3, [r3, #0]
    e48c:	2b00      	cmp	r3, #0
    e48e:	d039      	beq.n	e504 <spi_data_read+0xe8>
		ix += nbytes;
    e490:	4653      	mov	r3, sl
    e492:	18fb      	adds	r3, r7, r3
    e494:	b21b      	sxth	r3, r3
    e496:	469a      	mov	sl, r3
		sz -= nbytes;
    e498:	464b      	mov	r3, r9
    e49a:	1bdf      	subs	r7, r3, r7
    e49c:	b2bb      	uxth	r3, r7
    e49e:	4699      	mov	r9, r3
	} while (sz);
    e4a0:	2b00      	cmp	r3, #0
    e4a2:	d043      	beq.n	e52c <spi_data_read+0x110>
    e4a4:	464f      	mov	r7, r9
    e4a6:	45d9      	cmp	r9, fp
    e4a8:	d901      	bls.n	e4ae <spi_data_read+0x92>
    e4aa:	466b      	mov	r3, sp
    e4ac:	89df      	ldrh	r7, [r3, #14]
    e4ae:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    e4b0:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e4b2:	ab04      	add	r3, sp, #16
    e4b4:	1cde      	adds	r6, r3, #3
    e4b6:	2101      	movs	r1, #1
    e4b8:	0030      	movs	r0, r6
    e4ba:	47c0      	blx	r8
    e4bc:	1e05      	subs	r5, r0, #0
    e4be:	d1c1      	bne.n	e444 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    e4c0:	7833      	ldrb	r3, [r6, #0]
    e4c2:	091b      	lsrs	r3, r3, #4
    e4c4:	2b0f      	cmp	r3, #15
    e4c6:	d0d2      	beq.n	e46e <spi_data_read+0x52>
    e4c8:	3c01      	subs	r4, #1
    e4ca:	b224      	sxth	r4, r4
		} while (retry--);
    e4cc:	1c63      	adds	r3, r4, #1
    e4ce:	d1f2      	bne.n	e4b6 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    e4d0:	22c1      	movs	r2, #193	; 0xc1
    e4d2:	0092      	lsls	r2, r2, #2
    e4d4:	4917      	ldr	r1, [pc, #92]	; (e534 <spi_data_read+0x118>)
    e4d6:	4818      	ldr	r0, [pc, #96]	; (e538 <spi_data_read+0x11c>)
    e4d8:	4c18      	ldr	r4, [pc, #96]	; (e53c <spi_data_read+0x120>)
    e4da:	47a0      	blx	r4
    e4dc:	ab04      	add	r3, sp, #16
    e4de:	78d9      	ldrb	r1, [r3, #3]
    e4e0:	481b      	ldr	r0, [pc, #108]	; (e550 <spi_data_read+0x134>)
    e4e2:	47a0      	blx	r4
    e4e4:	200d      	movs	r0, #13
    e4e6:	4b18      	ldr	r3, [pc, #96]	; (e548 <spi_data_read+0x12c>)
    e4e8:	4798      	blx	r3
			break;
    e4ea:	e7b8      	b.n	e45e <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    e4ec:	4a19      	ldr	r2, [pc, #100]	; (e554 <spi_data_read+0x138>)
    e4ee:	4911      	ldr	r1, [pc, #68]	; (e534 <spi_data_read+0x118>)
    e4f0:	4811      	ldr	r0, [pc, #68]	; (e538 <spi_data_read+0x11c>)
    e4f2:	4b12      	ldr	r3, [pc, #72]	; (e53c <spi_data_read+0x120>)
    e4f4:	4798      	blx	r3
    e4f6:	4818      	ldr	r0, [pc, #96]	; (e558 <spi_data_read+0x13c>)
    e4f8:	4b12      	ldr	r3, [pc, #72]	; (e544 <spi_data_read+0x128>)
    e4fa:	4798      	blx	r3
    e4fc:	200d      	movs	r0, #13
    e4fe:	4b12      	ldr	r3, [pc, #72]	; (e548 <spi_data_read+0x12c>)
    e500:	4798      	blx	r3
			break;
    e502:	e7ac      	b.n	e45e <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    e504:	2102      	movs	r1, #2
    e506:	a805      	add	r0, sp, #20
    e508:	4b09      	ldr	r3, [pc, #36]	; (e530 <spi_data_read+0x114>)
    e50a:	4798      	blx	r3
    e50c:	2800      	cmp	r0, #0
    e50e:	d0bf      	beq.n	e490 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    e510:	22c6      	movs	r2, #198	; 0xc6
    e512:	0092      	lsls	r2, r2, #2
    e514:	4907      	ldr	r1, [pc, #28]	; (e534 <spi_data_read+0x118>)
    e516:	4808      	ldr	r0, [pc, #32]	; (e538 <spi_data_read+0x11c>)
    e518:	4b08      	ldr	r3, [pc, #32]	; (e53c <spi_data_read+0x120>)
    e51a:	4798      	blx	r3
    e51c:	480f      	ldr	r0, [pc, #60]	; (e55c <spi_data_read+0x140>)
    e51e:	4b09      	ldr	r3, [pc, #36]	; (e544 <spi_data_read+0x128>)
    e520:	4798      	blx	r3
    e522:	200d      	movs	r0, #13
    e524:	4b08      	ldr	r3, [pc, #32]	; (e548 <spi_data_read+0x12c>)
    e526:	4798      	blx	r3
					result = N_FAIL;
    e528:	0025      	movs	r5, r4
					break;
    e52a:	e798      	b.n	e45e <spi_data_read+0x42>
    e52c:	2501      	movs	r5, #1
    e52e:	e796      	b.n	e45e <spi_data_read+0x42>
    e530:	0000e329 	.word	0x0000e329
    e534:	00019498 	.word	0x00019498
    e538:	00018db0 	.word	0x00018db0
    e53c:	00017535 	.word	0x00017535
    e540:	00019964 	.word	0x00019964
    e544:	00017651 	.word	0x00017651
    e548:	00017569 	.word	0x00017569
    e54c:	200003d0 	.word	0x200003d0
    e550:	00019998 	.word	0x00019998
    e554:	0000030d 	.word	0x0000030d
    e558:	000199c8 	.word	0x000199c8
    e55c:	000199f8 	.word	0x000199f8

0000e560 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    e560:	b5f0      	push	{r4, r5, r6, r7, lr}
    e562:	46d6      	mov	lr, sl
    e564:	464f      	mov	r7, r9
    e566:	4646      	mov	r6, r8
    e568:	b5c0      	push	{r6, r7, lr}
    e56a:	b086      	sub	sp, #24
    e56c:	9003      	str	r0, [sp, #12]
    e56e:	9104      	str	r1, [sp, #16]
    e570:	2830      	cmp	r0, #48	; 0x30
    e572:	d80f      	bhi.n	e594 <spi_write_reg+0x34>
    e574:	4b30      	ldr	r3, [pc, #192]	; (e638 <spi_write_reg+0xd8>)
    e576:	781f      	ldrb	r7, [r3, #0]
    e578:	b2fb      	uxtb	r3, r7
    e57a:	9305      	str	r3, [sp, #20]
    e57c:	2300      	movs	r3, #0
    e57e:	2230      	movs	r2, #48	; 0x30
    e580:	9903      	ldr	r1, [sp, #12]
    e582:	428a      	cmp	r2, r1
    e584:	415b      	adcs	r3, r3
    e586:	b2db      	uxtb	r3, r3
    e588:	469a      	mov	sl, r3
    e58a:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e58c:	4b2b      	ldr	r3, [pc, #172]	; (e63c <spi_write_reg+0xdc>)
    e58e:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e590:	46d1      	mov	r9, sl
    e592:	e033      	b.n	e5fc <spi_write_reg+0x9c>
    e594:	4b2a      	ldr	r3, [pc, #168]	; (e640 <spi_write_reg+0xe0>)
    e596:	781f      	ldrb	r7, [r3, #0]
    e598:	e7ee      	b.n	e578 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    e59a:	9805      	ldr	r0, [sp, #20]
    e59c:	4b29      	ldr	r3, [pc, #164]	; (e644 <spi_write_reg+0xe4>)
    e59e:	4798      	blx	r3
    e5a0:	0004      	movs	r4, r0
	if (result != N_OK) {
    e5a2:	2801      	cmp	r0, #1
    e5a4:	d041      	beq.n	e62a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e5a6:	4a28      	ldr	r2, [pc, #160]	; (e648 <spi_write_reg+0xe8>)
    e5a8:	4928      	ldr	r1, [pc, #160]	; (e64c <spi_write_reg+0xec>)
    e5aa:	4829      	ldr	r0, [pc, #164]	; (e650 <spi_write_reg+0xf0>)
    e5ac:	4e29      	ldr	r6, [pc, #164]	; (e654 <spi_write_reg+0xf4>)
    e5ae:	47b0      	blx	r6
    e5b0:	9903      	ldr	r1, [sp, #12]
    e5b2:	4829      	ldr	r0, [pc, #164]	; (e658 <spi_write_reg+0xf8>)
    e5b4:	47b0      	blx	r6
    e5b6:	200d      	movs	r0, #13
    e5b8:	4b28      	ldr	r3, [pc, #160]	; (e65c <spi_write_reg+0xfc>)
    e5ba:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    e5bc:	2001      	movs	r0, #1
    e5be:	4e28      	ldr	r6, [pc, #160]	; (e660 <spi_write_reg+0x100>)
    e5c0:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e5c2:	2300      	movs	r3, #0
    e5c4:	9300      	str	r3, [sp, #0]
    e5c6:	2200      	movs	r2, #0
    e5c8:	2100      	movs	r1, #0
    e5ca:	20cf      	movs	r0, #207	; 0xcf
    e5cc:	4f1b      	ldr	r7, [pc, #108]	; (e63c <spi_write_reg+0xdc>)
    e5ce:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e5d0:	20cf      	movs	r0, #207	; 0xcf
    e5d2:	4b1c      	ldr	r3, [pc, #112]	; (e644 <spi_write_reg+0xe4>)
    e5d4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    e5d6:	22ea      	movs	r2, #234	; 0xea
    e5d8:	0092      	lsls	r2, r2, #2
    e5da:	491c      	ldr	r1, [pc, #112]	; (e64c <spi_write_reg+0xec>)
    e5dc:	481c      	ldr	r0, [pc, #112]	; (e650 <spi_write_reg+0xf0>)
    e5de:	4f1d      	ldr	r7, [pc, #116]	; (e654 <spi_write_reg+0xf4>)
    e5e0:	47b8      	blx	r7
    e5e2:	9b04      	ldr	r3, [sp, #16]
    e5e4:	9a03      	ldr	r2, [sp, #12]
    e5e6:	0029      	movs	r1, r5
    e5e8:	481e      	ldr	r0, [pc, #120]	; (e664 <spi_write_reg+0x104>)
    e5ea:	47b8      	blx	r7
    e5ec:	200d      	movs	r0, #13
    e5ee:	4b1b      	ldr	r3, [pc, #108]	; (e65c <spi_write_reg+0xfc>)
    e5f0:	4798      	blx	r3
		nm_bsp_sleep(1);
    e5f2:	2001      	movs	r0, #1
    e5f4:	47b0      	blx	r6
    e5f6:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e5f8:	2d00      	cmp	r5, #0
    e5fa:	d016      	beq.n	e62a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e5fc:	464b      	mov	r3, r9
    e5fe:	9300      	str	r3, [sp, #0]
    e600:	2304      	movs	r3, #4
    e602:	9a04      	ldr	r2, [sp, #16]
    e604:	9f03      	ldr	r7, [sp, #12]
    e606:	0039      	movs	r1, r7
    e608:	9805      	ldr	r0, [sp, #20]
    e60a:	47c0      	blx	r8
    e60c:	0004      	movs	r4, r0
	if (result != N_OK) {
    e60e:	2801      	cmp	r0, #1
    e610:	d0c3      	beq.n	e59a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    e612:	4a15      	ldr	r2, [pc, #84]	; (e668 <spi_write_reg+0x108>)
    e614:	490d      	ldr	r1, [pc, #52]	; (e64c <spi_write_reg+0xec>)
    e616:	480e      	ldr	r0, [pc, #56]	; (e650 <spi_write_reg+0xf0>)
    e618:	4e0e      	ldr	r6, [pc, #56]	; (e654 <spi_write_reg+0xf4>)
    e61a:	47b0      	blx	r6
    e61c:	0039      	movs	r1, r7
    e61e:	4813      	ldr	r0, [pc, #76]	; (e66c <spi_write_reg+0x10c>)
    e620:	47b0      	blx	r6
    e622:	200d      	movs	r0, #13
    e624:	4b0d      	ldr	r3, [pc, #52]	; (e65c <spi_write_reg+0xfc>)
    e626:	4798      	blx	r3
		goto _FAIL_;
    e628:	e7c8      	b.n	e5bc <spi_write_reg+0x5c>
	}

	return result;
}
    e62a:	0020      	movs	r0, r4
    e62c:	b006      	add	sp, #24
    e62e:	bc1c      	pop	{r2, r3, r4}
    e630:	4690      	mov	r8, r2
    e632:	4699      	mov	r9, r3
    e634:	46a2      	mov	sl, r4
    e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e638:	00019470 	.word	0x00019470
    e63c:	0000e1a9 	.word	0x0000e1a9
    e640:	00019471 	.word	0x00019471
    e644:	0000e349 	.word	0x0000e349
    e648:	00000395 	.word	0x00000395
    e64c:	000194b8 	.word	0x000194b8
    e650:	00018db0 	.word	0x00018db0
    e654:	00017535 	.word	0x00017535
    e658:	00019af0 	.word	0x00019af0
    e65c:	00017569 	.word	0x00017569
    e660:	0000c669 	.word	0x0000c669
    e664:	00019b28 	.word	0x00019b28
    e668:	0000038f 	.word	0x0000038f
    e66c:	00019ac4 	.word	0x00019ac4

0000e670 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    e670:	b5f0      	push	{r4, r5, r6, r7, lr}
    e672:	46de      	mov	lr, fp
    e674:	4657      	mov	r7, sl
    e676:	464e      	mov	r6, r9
    e678:	4645      	mov	r5, r8
    e67a:	b5e0      	push	{r5, r6, r7, lr}
    e67c:	b087      	sub	sp, #28
    e67e:	9002      	str	r0, [sp, #8]
    e680:	468b      	mov	fp, r1
    e682:	28ff      	cmp	r0, #255	; 0xff
    e684:	d80f      	bhi.n	e6a6 <spi_read_reg+0x36>
    e686:	4b41      	ldr	r3, [pc, #260]	; (e78c <spi_read_reg+0x11c>)
    e688:	781f      	ldrb	r7, [r3, #0]
    e68a:	b2fb      	uxtb	r3, r7
    e68c:	9303      	str	r3, [sp, #12]
    e68e:	2300      	movs	r3, #0
    e690:	22ff      	movs	r2, #255	; 0xff
    e692:	9902      	ldr	r1, [sp, #8]
    e694:	428a      	cmp	r2, r1
    e696:	415b      	adcs	r3, r3
    e698:	b2db      	uxtb	r3, r3
    e69a:	469a      	mov	sl, r3
    e69c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e69e:	4b3c      	ldr	r3, [pc, #240]	; (e790 <spi_read_reg+0x120>)
    e6a0:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    e6a2:	46d1      	mov	r9, sl
    e6a4:	e031      	b.n	e70a <spi_read_reg+0x9a>
    e6a6:	4b3b      	ldr	r3, [pc, #236]	; (e794 <spi_read_reg+0x124>)
    e6a8:	781f      	ldrb	r7, [r3, #0]
    e6aa:	e7ee      	b.n	e68a <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    e6ac:	9803      	ldr	r0, [sp, #12]
    e6ae:	4b3a      	ldr	r3, [pc, #232]	; (e798 <spi_read_reg+0x128>)
    e6b0:	4798      	blx	r3
    e6b2:	0004      	movs	r4, r0
	if (result != N_OK) {
    e6b4:	2801      	cmp	r0, #1
    e6b6:	d040      	beq.n	e73a <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    e6b8:	4a38      	ldr	r2, [pc, #224]	; (e79c <spi_read_reg+0x12c>)
    e6ba:	4939      	ldr	r1, [pc, #228]	; (e7a0 <spi_read_reg+0x130>)
    e6bc:	4839      	ldr	r0, [pc, #228]	; (e7a4 <spi_read_reg+0x134>)
    e6be:	4e3a      	ldr	r6, [pc, #232]	; (e7a8 <spi_read_reg+0x138>)
    e6c0:	47b0      	blx	r6
    e6c2:	9902      	ldr	r1, [sp, #8]
    e6c4:	4839      	ldr	r0, [pc, #228]	; (e7ac <spi_read_reg+0x13c>)
    e6c6:	47b0      	blx	r6
    e6c8:	200d      	movs	r0, #13
    e6ca:	4b39      	ldr	r3, [pc, #228]	; (e7b0 <spi_read_reg+0x140>)
    e6cc:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    e6ce:	2001      	movs	r0, #1
    e6d0:	4e38      	ldr	r6, [pc, #224]	; (e7b4 <spi_read_reg+0x144>)
    e6d2:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e6d4:	2300      	movs	r3, #0
    e6d6:	9300      	str	r3, [sp, #0]
    e6d8:	2200      	movs	r2, #0
    e6da:	2100      	movs	r1, #0
    e6dc:	20cf      	movs	r0, #207	; 0xcf
    e6de:	4f2c      	ldr	r7, [pc, #176]	; (e790 <spi_read_reg+0x120>)
    e6e0:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e6e2:	20cf      	movs	r0, #207	; 0xcf
    e6e4:	4b2c      	ldr	r3, [pc, #176]	; (e798 <spi_read_reg+0x128>)
    e6e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    e6e8:	4a33      	ldr	r2, [pc, #204]	; (e7b8 <spi_read_reg+0x148>)
    e6ea:	492d      	ldr	r1, [pc, #180]	; (e7a0 <spi_read_reg+0x130>)
    e6ec:	482d      	ldr	r0, [pc, #180]	; (e7a4 <spi_read_reg+0x134>)
    e6ee:	4f2e      	ldr	r7, [pc, #184]	; (e7a8 <spi_read_reg+0x138>)
    e6f0:	47b8      	blx	r7
    e6f2:	9a02      	ldr	r2, [sp, #8]
    e6f4:	0029      	movs	r1, r5
    e6f6:	4831      	ldr	r0, [pc, #196]	; (e7bc <spi_read_reg+0x14c>)
    e6f8:	47b8      	blx	r7
    e6fa:	200d      	movs	r0, #13
    e6fc:	4b2c      	ldr	r3, [pc, #176]	; (e7b0 <spi_read_reg+0x140>)
    e6fe:	4798      	blx	r3
		nm_bsp_sleep(1);
    e700:	2001      	movs	r0, #1
    e702:	47b0      	blx	r6
    e704:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e706:	2d00      	cmp	r5, #0
    e708:	d038      	beq.n	e77c <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e70a:	464b      	mov	r3, r9
    e70c:	9300      	str	r3, [sp, #0]
    e70e:	2304      	movs	r3, #4
    e710:	2200      	movs	r2, #0
    e712:	9f02      	ldr	r7, [sp, #8]
    e714:	0039      	movs	r1, r7
    e716:	9803      	ldr	r0, [sp, #12]
    e718:	47c0      	blx	r8
    e71a:	0004      	movs	r4, r0
	if (result != N_OK) {
    e71c:	2801      	cmp	r0, #1
    e71e:	d0c5      	beq.n	e6ac <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    e720:	2282      	movs	r2, #130	; 0x82
    e722:	00d2      	lsls	r2, r2, #3
    e724:	491e      	ldr	r1, [pc, #120]	; (e7a0 <spi_read_reg+0x130>)
    e726:	481f      	ldr	r0, [pc, #124]	; (e7a4 <spi_read_reg+0x134>)
    e728:	4e1f      	ldr	r6, [pc, #124]	; (e7a8 <spi_read_reg+0x138>)
    e72a:	47b0      	blx	r6
    e72c:	0039      	movs	r1, r7
    e72e:	4824      	ldr	r0, [pc, #144]	; (e7c0 <spi_read_reg+0x150>)
    e730:	47b0      	blx	r6
    e732:	200d      	movs	r0, #13
    e734:	4b1e      	ldr	r3, [pc, #120]	; (e7b0 <spi_read_reg+0x140>)
    e736:	4798      	blx	r3
		goto _FAIL_;
    e738:	e7c9      	b.n	e6ce <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    e73a:	464a      	mov	r2, r9
    e73c:	2104      	movs	r1, #4
    e73e:	a805      	add	r0, sp, #20
    e740:	4b20      	ldr	r3, [pc, #128]	; (e7c4 <spi_read_reg+0x154>)
    e742:	4798      	blx	r3
    e744:	0004      	movs	r4, r0
	if (result != N_OK) {
    e746:	2801      	cmp	r0, #1
    e748:	d00b      	beq.n	e762 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    e74a:	4a1f      	ldr	r2, [pc, #124]	; (e7c8 <spi_read_reg+0x158>)
    e74c:	4914      	ldr	r1, [pc, #80]	; (e7a0 <spi_read_reg+0x130>)
    e74e:	4815      	ldr	r0, [pc, #84]	; (e7a4 <spi_read_reg+0x134>)
    e750:	4b15      	ldr	r3, [pc, #84]	; (e7a8 <spi_read_reg+0x138>)
    e752:	4798      	blx	r3
    e754:	481d      	ldr	r0, [pc, #116]	; (e7cc <spi_read_reg+0x15c>)
    e756:	4b1e      	ldr	r3, [pc, #120]	; (e7d0 <spi_read_reg+0x160>)
    e758:	4798      	blx	r3
    e75a:	200d      	movs	r0, #13
    e75c:	4b14      	ldr	r3, [pc, #80]	; (e7b0 <spi_read_reg+0x140>)
    e75e:	4798      	blx	r3
		goto _FAIL_;
    e760:	e7b5      	b.n	e6ce <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    e762:	aa05      	add	r2, sp, #20
    e764:	7853      	ldrb	r3, [r2, #1]
    e766:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    e768:	7891      	ldrb	r1, [r2, #2]
    e76a:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    e76c:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    e76e:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    e770:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    e772:	78d2      	ldrb	r2, [r2, #3]
    e774:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    e776:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    e778:	465a      	mov	r2, fp
    e77a:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    e77c:	0020      	movs	r0, r4
    e77e:	b007      	add	sp, #28
    e780:	bc3c      	pop	{r2, r3, r4, r5}
    e782:	4690      	mov	r8, r2
    e784:	4699      	mov	r9, r3
    e786:	46a2      	mov	sl, r4
    e788:	46ab      	mov	fp, r5
    e78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e78c:	00019472 	.word	0x00019472
    e790:	0000e1a9 	.word	0x0000e1a9
    e794:	00019473 	.word	0x00019473
    e798:	0000e349 	.word	0x0000e349
    e79c:	00000416 	.word	0x00000416
    e7a0:	000194d8 	.word	0x000194d8
    e7a4:	00018db0 	.word	0x00018db0
    e7a8:	00017535 	.word	0x00017535
    e7ac:	00019a58 	.word	0x00019a58
    e7b0:	00017569 	.word	0x00017569
    e7b4:	0000c669 	.word	0x0000c669
    e7b8:	00000435 	.word	0x00000435
    e7bc:	00019aac 	.word	0x00019aac
    e7c0:	00019a2c 	.word	0x00019a2c
    e7c4:	0000e41d 	.word	0x0000e41d
    e7c8:	0000041d 	.word	0x0000041d
    e7cc:	00019a8c 	.word	0x00019a8c
    e7d0:	00017651 	.word	0x00017651

0000e7d4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    e7d4:	b510      	push	{r4, lr}
    e7d6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e7d8:	2300      	movs	r3, #0
    e7da:	9300      	str	r3, [sp, #0]
    e7dc:	2200      	movs	r2, #0
    e7de:	2100      	movs	r1, #0
    e7e0:	20cf      	movs	r0, #207	; 0xcf
    e7e2:	4c04      	ldr	r4, [pc, #16]	; (e7f4 <nm_spi_reset+0x20>)
    e7e4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    e7e6:	20cf      	movs	r0, #207	; 0xcf
    e7e8:	4b03      	ldr	r3, [pc, #12]	; (e7f8 <nm_spi_reset+0x24>)
    e7ea:	4798      	blx	r3
	return M2M_SUCCESS;
}
    e7ec:	2000      	movs	r0, #0
    e7ee:	b002      	add	sp, #8
    e7f0:	bd10      	pop	{r4, pc}
    e7f2:	46c0      	nop			; (mov r8, r8)
    e7f4:	0000e1a9 	.word	0x0000e1a9
    e7f8:	0000e349 	.word	0x0000e349

0000e7fc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    e7fc:	2200      	movs	r2, #0
    e7fe:	4b02      	ldr	r3, [pc, #8]	; (e808 <nm_spi_deinit+0xc>)
    e800:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    e802:	2000      	movs	r0, #0
    e804:	4770      	bx	lr
    e806:	46c0      	nop			; (mov r8, r8)
    e808:	200003d0 	.word	0x200003d0

0000e80c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    e80c:	b500      	push	{lr}
    e80e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    e810:	a901      	add	r1, sp, #4
    e812:	4b02      	ldr	r3, [pc, #8]	; (e81c <nm_spi_read_reg+0x10>)
    e814:	4798      	blx	r3

	return u32Val;
}
    e816:	9801      	ldr	r0, [sp, #4]
    e818:	b003      	add	sp, #12
    e81a:	bd00      	pop	{pc}
    e81c:	0000e671 	.word	0x0000e671

0000e820 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e820:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    e822:	4b04      	ldr	r3, [pc, #16]	; (e834 <nm_spi_read_reg_with_ret+0x14>)
    e824:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e826:	2300      	movs	r3, #0
    e828:	2801      	cmp	r0, #1
    e82a:	d101      	bne.n	e830 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e82c:	0018      	movs	r0, r3
    e82e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e830:	3b06      	subs	r3, #6
    e832:	e7fb      	b.n	e82c <nm_spi_read_reg_with_ret+0xc>
    e834:	0000e671 	.word	0x0000e671

0000e838 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e838:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    e83a:	4b04      	ldr	r3, [pc, #16]	; (e84c <nm_spi_write_reg+0x14>)
    e83c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e83e:	2300      	movs	r3, #0
    e840:	2801      	cmp	r0, #1
    e842:	d101      	bne.n	e848 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e844:	0018      	movs	r0, r3
    e846:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e848:	3b06      	subs	r3, #6
    e84a:	e7fb      	b.n	e844 <nm_spi_write_reg+0xc>
    e84c:	0000e561 	.word	0x0000e561

0000e850 <nm_spi_init>:
{
    e850:	b510      	push	{r4, lr}
    e852:	b082      	sub	sp, #8
	uint32 reg = 0;
    e854:	2300      	movs	r3, #0
    e856:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    e858:	4a35      	ldr	r2, [pc, #212]	; (e930 <nm_spi_init+0xe0>)
    e85a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    e85c:	4669      	mov	r1, sp
    e85e:	4835      	ldr	r0, [pc, #212]	; (e934 <nm_spi_init+0xe4>)
    e860:	4b35      	ldr	r3, [pc, #212]	; (e938 <nm_spi_init+0xe8>)
    e862:	4798      	blx	r3
    e864:	2800      	cmp	r0, #0
    e866:	d028      	beq.n	e8ba <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    e868:	4b31      	ldr	r3, [pc, #196]	; (e930 <nm_spi_init+0xe0>)
    e86a:	781b      	ldrb	r3, [r3, #0]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d10d      	bne.n	e88c <nm_spi_init+0x3c>
		reg &= ~0x70;
    e870:	337c      	adds	r3, #124	; 0x7c
    e872:	9900      	ldr	r1, [sp, #0]
    e874:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    e876:	3b2c      	subs	r3, #44	; 0x2c
    e878:	4319      	orrs	r1, r3
    e87a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    e87c:	482d      	ldr	r0, [pc, #180]	; (e934 <nm_spi_init+0xe4>)
    e87e:	4b2f      	ldr	r3, [pc, #188]	; (e93c <nm_spi_init+0xec>)
    e880:	4798      	blx	r3
    e882:	1e04      	subs	r4, r0, #0
    e884:	d03a      	beq.n	e8fc <nm_spi_init+0xac>
		gu8Crc_off = 1;
    e886:	2201      	movs	r2, #1
    e888:	4b29      	ldr	r3, [pc, #164]	; (e930 <nm_spi_init+0xe0>)
    e88a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    e88c:	a901      	add	r1, sp, #4
    e88e:	2080      	movs	r0, #128	; 0x80
    e890:	0140      	lsls	r0, r0, #5
    e892:	4b29      	ldr	r3, [pc, #164]	; (e938 <nm_spi_init+0xe8>)
    e894:	4798      	blx	r3
    e896:	2800      	cmp	r0, #0
    e898:	d03c      	beq.n	e914 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    e89a:	4c26      	ldr	r4, [pc, #152]	; (e934 <nm_spi_init+0xe4>)
    e89c:	0020      	movs	r0, r4
    e89e:	4b28      	ldr	r3, [pc, #160]	; (e940 <nm_spi_init+0xf0>)
    e8a0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    e8a2:	2370      	movs	r3, #112	; 0x70
    e8a4:	0001      	movs	r1, r0
    e8a6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    e8a8:	2050      	movs	r0, #80	; 0x50
    e8aa:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    e8ac:	0020      	movs	r0, r4
    e8ae:	4b25      	ldr	r3, [pc, #148]	; (e944 <nm_spi_init+0xf4>)
    e8b0:	4798      	blx	r3
	return M2M_SUCCESS;
    e8b2:	2400      	movs	r4, #0
}
    e8b4:	0020      	movs	r0, r4
    e8b6:	b002      	add	sp, #8
    e8b8:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    e8ba:	2201      	movs	r2, #1
    e8bc:	4b1c      	ldr	r3, [pc, #112]	; (e930 <nm_spi_init+0xe0>)
    e8be:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    e8c0:	2298      	movs	r2, #152	; 0x98
    e8c2:	00d2      	lsls	r2, r2, #3
    e8c4:	4920      	ldr	r1, [pc, #128]	; (e948 <nm_spi_init+0xf8>)
    e8c6:	4821      	ldr	r0, [pc, #132]	; (e94c <nm_spi_init+0xfc>)
    e8c8:	4b21      	ldr	r3, [pc, #132]	; (e950 <nm_spi_init+0x100>)
    e8ca:	4798      	blx	r3
    e8cc:	4821      	ldr	r0, [pc, #132]	; (e954 <nm_spi_init+0x104>)
    e8ce:	4b22      	ldr	r3, [pc, #136]	; (e958 <nm_spi_init+0x108>)
    e8d0:	4798      	blx	r3
    e8d2:	200d      	movs	r0, #13
    e8d4:	4b21      	ldr	r3, [pc, #132]	; (e95c <nm_spi_init+0x10c>)
    e8d6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    e8d8:	4669      	mov	r1, sp
    e8da:	4816      	ldr	r0, [pc, #88]	; (e934 <nm_spi_init+0xe4>)
    e8dc:	4b16      	ldr	r3, [pc, #88]	; (e938 <nm_spi_init+0xe8>)
    e8de:	4798      	blx	r3
    e8e0:	1e04      	subs	r4, r0, #0
    e8e2:	d1c1      	bne.n	e868 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    e8e4:	4a1e      	ldr	r2, [pc, #120]	; (e960 <nm_spi_init+0x110>)
    e8e6:	4918      	ldr	r1, [pc, #96]	; (e948 <nm_spi_init+0xf8>)
    e8e8:	4818      	ldr	r0, [pc, #96]	; (e94c <nm_spi_init+0xfc>)
    e8ea:	4b19      	ldr	r3, [pc, #100]	; (e950 <nm_spi_init+0x100>)
    e8ec:	4798      	blx	r3
    e8ee:	481d      	ldr	r0, [pc, #116]	; (e964 <nm_spi_init+0x114>)
    e8f0:	4b19      	ldr	r3, [pc, #100]	; (e958 <nm_spi_init+0x108>)
    e8f2:	4798      	blx	r3
    e8f4:	200d      	movs	r0, #13
    e8f6:	4b19      	ldr	r3, [pc, #100]	; (e95c <nm_spi_init+0x10c>)
    e8f8:	4798      	blx	r3
			return 0;
    e8fa:	e7db      	b.n	e8b4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    e8fc:	4a1a      	ldr	r2, [pc, #104]	; (e968 <nm_spi_init+0x118>)
    e8fe:	4912      	ldr	r1, [pc, #72]	; (e948 <nm_spi_init+0xf8>)
    e900:	4812      	ldr	r0, [pc, #72]	; (e94c <nm_spi_init+0xfc>)
    e902:	4b13      	ldr	r3, [pc, #76]	; (e950 <nm_spi_init+0x100>)
    e904:	4798      	blx	r3
    e906:	4819      	ldr	r0, [pc, #100]	; (e96c <nm_spi_init+0x11c>)
    e908:	4b13      	ldr	r3, [pc, #76]	; (e958 <nm_spi_init+0x108>)
    e90a:	4798      	blx	r3
    e90c:	200d      	movs	r0, #13
    e90e:	4b13      	ldr	r3, [pc, #76]	; (e95c <nm_spi_init+0x10c>)
    e910:	4798      	blx	r3
			return 0;
    e912:	e7cf      	b.n	e8b4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    e914:	4a16      	ldr	r2, [pc, #88]	; (e970 <nm_spi_init+0x120>)
    e916:	490c      	ldr	r1, [pc, #48]	; (e948 <nm_spi_init+0xf8>)
    e918:	480c      	ldr	r0, [pc, #48]	; (e94c <nm_spi_init+0xfc>)
    e91a:	4b0d      	ldr	r3, [pc, #52]	; (e950 <nm_spi_init+0x100>)
    e91c:	4798      	blx	r3
    e91e:	4815      	ldr	r0, [pc, #84]	; (e974 <nm_spi_init+0x124>)
    e920:	4b0d      	ldr	r3, [pc, #52]	; (e958 <nm_spi_init+0x108>)
    e922:	4798      	blx	r3
    e924:	200d      	movs	r0, #13
    e926:	4b0d      	ldr	r3, [pc, #52]	; (e95c <nm_spi_init+0x10c>)
    e928:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    e92a:	2406      	movs	r4, #6
    e92c:	4264      	negs	r4, r4
    e92e:	e7c1      	b.n	e8b4 <nm_spi_init+0x64>
    e930:	200003d0 	.word	0x200003d0
    e934:	0000e824 	.word	0x0000e824
    e938:	0000e671 	.word	0x0000e671
    e93c:	0000e561 	.word	0x0000e561
    e940:	0000e80d 	.word	0x0000e80d
    e944:	0000e839 	.word	0x0000e839
    e948:	000194f4 	.word	0x000194f4
    e94c:	00018db0 	.word	0x00018db0
    e950:	00017535 	.word	0x00017535
    e954:	00019600 	.word	0x00019600
    e958:	00017651 	.word	0x00017651
    e95c:	00017569 	.word	0x00017569
    e960:	000004c3 	.word	0x000004c3
    e964:	00019650 	.word	0x00019650
    e968:	000004cd 	.word	0x000004cd
    e96c:	0001967c 	.word	0x0001967c
    e970:	000004d7 	.word	0x000004d7
    e974:	000196b0 	.word	0x000196b0

0000e978 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    e978:	b5f0      	push	{r4, r5, r6, r7, lr}
    e97a:	46de      	mov	lr, fp
    e97c:	4657      	mov	r7, sl
    e97e:	464e      	mov	r6, r9
    e980:	4645      	mov	r5, r8
    e982:	b5e0      	push	{r5, r6, r7, lr}
    e984:	b087      	sub	sp, #28
    e986:	9002      	str	r0, [sp, #8]
    e988:	9103      	str	r1, [sp, #12]
    e98a:	0016      	movs	r6, r2
    e98c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    e98e:	2300      	movs	r3, #0
    e990:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    e992:	2400      	movs	r4, #0
    e994:	4b3e      	ldr	r3, [pc, #248]	; (ea90 <nm_spi_read_block+0x118>)
    e996:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    e998:	46a9      	mov	r9, r5
    e99a:	e037      	b.n	ea0c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    e99c:	2301      	movs	r3, #1
    e99e:	469b      	mov	fp, r3
		size = 2;
    e9a0:	3601      	adds	r6, #1
    e9a2:	e035      	b.n	ea10 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    e9a4:	20c8      	movs	r0, #200	; 0xc8
    e9a6:	4b3b      	ldr	r3, [pc, #236]	; (ea94 <nm_spi_read_block+0x11c>)
    e9a8:	4798      	blx	r3
	if (result != N_OK) {
    e9aa:	2801      	cmp	r0, #1
    e9ac:	d045      	beq.n	ea3a <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    e9ae:	4a3a      	ldr	r2, [pc, #232]	; (ea98 <nm_spi_read_block+0x120>)
    e9b0:	493a      	ldr	r1, [pc, #232]	; (ea9c <nm_spi_read_block+0x124>)
    e9b2:	483b      	ldr	r0, [pc, #236]	; (eaa0 <nm_spi_read_block+0x128>)
    e9b4:	4f3b      	ldr	r7, [pc, #236]	; (eaa4 <nm_spi_read_block+0x12c>)
    e9b6:	47b8      	blx	r7
    e9b8:	9902      	ldr	r1, [sp, #8]
    e9ba:	483b      	ldr	r0, [pc, #236]	; (eaa8 <nm_spi_read_block+0x130>)
    e9bc:	47b8      	blx	r7
    e9be:	200d      	movs	r0, #13
    e9c0:	4b3a      	ldr	r3, [pc, #232]	; (eaac <nm_spi_read_block+0x134>)
    e9c2:	4798      	blx	r3
		nm_bsp_sleep(1);
    e9c4:	2001      	movs	r0, #1
    e9c6:	4f3a      	ldr	r7, [pc, #232]	; (eab0 <nm_spi_read_block+0x138>)
    e9c8:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e9ca:	9400      	str	r4, [sp, #0]
    e9cc:	0023      	movs	r3, r4
    e9ce:	0022      	movs	r2, r4
    e9d0:	0021      	movs	r1, r4
    e9d2:	20cf      	movs	r0, #207	; 0xcf
    e9d4:	4d2e      	ldr	r5, [pc, #184]	; (ea90 <nm_spi_read_block+0x118>)
    e9d6:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    e9d8:	20cf      	movs	r0, #207	; 0xcf
    e9da:	4b2e      	ldr	r3, [pc, #184]	; (ea94 <nm_spi_read_block+0x11c>)
    e9dc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    e9de:	4a35      	ldr	r2, [pc, #212]	; (eab4 <nm_spi_read_block+0x13c>)
    e9e0:	492e      	ldr	r1, [pc, #184]	; (ea9c <nm_spi_read_block+0x124>)
    e9e2:	482f      	ldr	r0, [pc, #188]	; (eaa0 <nm_spi_read_block+0x128>)
    e9e4:	4b2f      	ldr	r3, [pc, #188]	; (eaa4 <nm_spi_read_block+0x12c>)
    e9e6:	469a      	mov	sl, r3
    e9e8:	4798      	blx	r3
    e9ea:	0033      	movs	r3, r6
    e9ec:	9a02      	ldr	r2, [sp, #8]
    e9ee:	4649      	mov	r1, r9
    e9f0:	4831      	ldr	r0, [pc, #196]	; (eab8 <nm_spi_read_block+0x140>)
    e9f2:	47d0      	blx	sl
    e9f4:	200d      	movs	r0, #13
    e9f6:	4b2d      	ldr	r3, [pc, #180]	; (eaac <nm_spi_read_block+0x134>)
    e9f8:	4798      	blx	r3
		nm_bsp_sleep(1);
    e9fa:	2001      	movs	r0, #1
    e9fc:	47b8      	blx	r7
    e9fe:	2301      	movs	r3, #1
    ea00:	425b      	negs	r3, r3
    ea02:	469c      	mov	ip, r3
    ea04:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    ea06:	464b      	mov	r3, r9
    ea08:	2b00      	cmp	r3, #0
    ea0a:	d038      	beq.n	ea7e <nm_spi_read_block+0x106>
	if (size == 1)
    ea0c:	2e01      	cmp	r6, #1
    ea0e:	d0c5      	beq.n	e99c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    ea10:	9400      	str	r4, [sp, #0]
    ea12:	0033      	movs	r3, r6
    ea14:	0022      	movs	r2, r4
    ea16:	9d02      	ldr	r5, [sp, #8]
    ea18:	0029      	movs	r1, r5
    ea1a:	20c8      	movs	r0, #200	; 0xc8
    ea1c:	47c0      	blx	r8
	if (result != N_OK) {
    ea1e:	2801      	cmp	r0, #1
    ea20:	d0c0      	beq.n	e9a4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    ea22:	4a26      	ldr	r2, [pc, #152]	; (eabc <nm_spi_read_block+0x144>)
    ea24:	491d      	ldr	r1, [pc, #116]	; (ea9c <nm_spi_read_block+0x124>)
    ea26:	481e      	ldr	r0, [pc, #120]	; (eaa0 <nm_spi_read_block+0x128>)
    ea28:	4f1e      	ldr	r7, [pc, #120]	; (eaa4 <nm_spi_read_block+0x12c>)
    ea2a:	47b8      	blx	r7
    ea2c:	0029      	movs	r1, r5
    ea2e:	4824      	ldr	r0, [pc, #144]	; (eac0 <nm_spi_read_block+0x148>)
    ea30:	47b8      	blx	r7
    ea32:	200d      	movs	r0, #13
    ea34:	4b1d      	ldr	r3, [pc, #116]	; (eaac <nm_spi_read_block+0x134>)
    ea36:	4798      	blx	r3
    ea38:	e7c4      	b.n	e9c4 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    ea3a:	465b      	mov	r3, fp
    ea3c:	2b00      	cmp	r3, #0
    ea3e:	d016      	beq.n	ea6e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    ea40:	af05      	add	r7, sp, #20
    ea42:	0022      	movs	r2, r4
    ea44:	0031      	movs	r1, r6
    ea46:	0038      	movs	r0, r7
    ea48:	4b1e      	ldr	r3, [pc, #120]	; (eac4 <nm_spi_read_block+0x14c>)
    ea4a:	4798      	blx	r3
		buf[0] = tmp[0];
    ea4c:	783b      	ldrb	r3, [r7, #0]
    ea4e:	9a03      	ldr	r2, [sp, #12]
    ea50:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    ea52:	2801      	cmp	r0, #1
    ea54:	d011      	beq.n	ea7a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    ea56:	4a1c      	ldr	r2, [pc, #112]	; (eac8 <nm_spi_read_block+0x150>)
    ea58:	4910      	ldr	r1, [pc, #64]	; (ea9c <nm_spi_read_block+0x124>)
    ea5a:	4811      	ldr	r0, [pc, #68]	; (eaa0 <nm_spi_read_block+0x128>)
    ea5c:	4b11      	ldr	r3, [pc, #68]	; (eaa4 <nm_spi_read_block+0x12c>)
    ea5e:	4798      	blx	r3
    ea60:	481a      	ldr	r0, [pc, #104]	; (eacc <nm_spi_read_block+0x154>)
    ea62:	4b1b      	ldr	r3, [pc, #108]	; (ead0 <nm_spi_read_block+0x158>)
    ea64:	4798      	blx	r3
    ea66:	200d      	movs	r0, #13
    ea68:	4b10      	ldr	r3, [pc, #64]	; (eaac <nm_spi_read_block+0x134>)
    ea6a:	4798      	blx	r3
    ea6c:	e7aa      	b.n	e9c4 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    ea6e:	0022      	movs	r2, r4
    ea70:	0031      	movs	r1, r6
    ea72:	9803      	ldr	r0, [sp, #12]
    ea74:	4b13      	ldr	r3, [pc, #76]	; (eac4 <nm_spi_read_block+0x14c>)
    ea76:	4798      	blx	r3
    ea78:	e7eb      	b.n	ea52 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ea7a:	2000      	movs	r0, #0
    ea7c:	e001      	b.n	ea82 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ea7e:	2006      	movs	r0, #6
    ea80:	4240      	negs	r0, r0

	return s8Ret;
}
    ea82:	b007      	add	sp, #28
    ea84:	bc3c      	pop	{r2, r3, r4, r5}
    ea86:	4690      	mov	r8, r2
    ea88:	4699      	mov	r9, r3
    ea8a:	46a2      	mov	sl, r4
    ea8c:	46ab      	mov	fp, r5
    ea8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea90:	0000e1a9 	.word	0x0000e1a9
    ea94:	0000e349 	.word	0x0000e349
    ea98:	0000045c 	.word	0x0000045c
    ea9c:	000194e8 	.word	0x000194e8
    eaa0:	00018db0 	.word	0x00018db0
    eaa4:	00017535 	.word	0x00017535
    eaa8:	00019704 	.word	0x00019704
    eaac:	00017569 	.word	0x00017569
    eab0:	0000c669 	.word	0x0000c669
    eab4:	0000047d 	.word	0x0000047d
    eab8:	00019764 	.word	0x00019764
    eabc:	00000456 	.word	0x00000456
    eac0:	000196d4 	.word	0x000196d4
    eac4:	0000e41d 	.word	0x0000e41d
    eac8:	0000046c 	.word	0x0000046c
    eacc:	0001973c 	.word	0x0001973c
    ead0:	00017651 	.word	0x00017651

0000ead4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ead4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ead6:	46de      	mov	lr, fp
    ead8:	4647      	mov	r7, r8
    eada:	b580      	push	{r7, lr}
    eadc:	b089      	sub	sp, #36	; 0x24
    eade:	9004      	str	r0, [sp, #16]
    eae0:	468b      	mov	fp, r1
    eae2:	9203      	str	r2, [sp, #12]
    eae4:	260a      	movs	r6, #10
    eae6:	2780      	movs	r7, #128	; 0x80
    eae8:	01bf      	lsls	r7, r7, #6
    eaea:	466b      	mov	r3, sp
    eaec:	82df      	strh	r7, [r3, #22]
    eaee:	0035      	movs	r5, r6
    eaf0:	e02d      	b.n	eb4e <nm_spi_write_block+0x7a>
		size = 2;
    eaf2:	3301      	adds	r3, #1
    eaf4:	9303      	str	r3, [sp, #12]
    eaf6:	e02d      	b.n	eb54 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    eaf8:	4a82      	ldr	r2, [pc, #520]	; (ed04 <nm_spi_write_block+0x230>)
    eafa:	4983      	ldr	r1, [pc, #524]	; (ed08 <nm_spi_write_block+0x234>)
    eafc:	4883      	ldr	r0, [pc, #524]	; (ed0c <nm_spi_write_block+0x238>)
    eafe:	4c84      	ldr	r4, [pc, #528]	; (ed10 <nm_spi_write_block+0x23c>)
    eb00:	47a0      	blx	r4
    eb02:	0031      	movs	r1, r6
    eb04:	4883      	ldr	r0, [pc, #524]	; (ed14 <nm_spi_write_block+0x240>)
    eb06:	47a0      	blx	r4
    eb08:	200d      	movs	r0, #13
    eb0a:	4b83      	ldr	r3, [pc, #524]	; (ed18 <nm_spi_write_block+0x244>)
    eb0c:	4798      	blx	r3
		nm_bsp_sleep(1);
    eb0e:	2001      	movs	r0, #1
    eb10:	4c82      	ldr	r4, [pc, #520]	; (ed1c <nm_spi_write_block+0x248>)
    eb12:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    eb14:	2300      	movs	r3, #0
    eb16:	9300      	str	r3, [sp, #0]
    eb18:	2200      	movs	r2, #0
    eb1a:	2100      	movs	r1, #0
    eb1c:	20cf      	movs	r0, #207	; 0xcf
    eb1e:	4e80      	ldr	r6, [pc, #512]	; (ed20 <nm_spi_write_block+0x24c>)
    eb20:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    eb22:	20cf      	movs	r0, #207	; 0xcf
    eb24:	4b7f      	ldr	r3, [pc, #508]	; (ed24 <nm_spi_write_block+0x250>)
    eb26:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    eb28:	4a7f      	ldr	r2, [pc, #508]	; (ed28 <nm_spi_write_block+0x254>)
    eb2a:	4977      	ldr	r1, [pc, #476]	; (ed08 <nm_spi_write_block+0x234>)
    eb2c:	4877      	ldr	r0, [pc, #476]	; (ed0c <nm_spi_write_block+0x238>)
    eb2e:	4e78      	ldr	r6, [pc, #480]	; (ed10 <nm_spi_write_block+0x23c>)
    eb30:	47b0      	blx	r6
    eb32:	9b03      	ldr	r3, [sp, #12]
    eb34:	9a04      	ldr	r2, [sp, #16]
    eb36:	0029      	movs	r1, r5
    eb38:	487c      	ldr	r0, [pc, #496]	; (ed2c <nm_spi_write_block+0x258>)
    eb3a:	47b0      	blx	r6
    eb3c:	200d      	movs	r0, #13
    eb3e:	4b76      	ldr	r3, [pc, #472]	; (ed18 <nm_spi_write_block+0x244>)
    eb40:	4798      	blx	r3
		nm_bsp_sleep(1);
    eb42:	2001      	movs	r0, #1
    eb44:	47a0      	blx	r4
    eb46:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    eb48:	2d00      	cmp	r5, #0
    eb4a:	d100      	bne.n	eb4e <nm_spi_write_block+0x7a>
    eb4c:	e0d2      	b.n	ecf4 <nm_spi_write_block+0x220>
	if (size == 1)
    eb4e:	9b03      	ldr	r3, [sp, #12]
    eb50:	2b01      	cmp	r3, #1
    eb52:	d0ce      	beq.n	eaf2 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    eb54:	2300      	movs	r3, #0
    eb56:	9300      	str	r3, [sp, #0]
    eb58:	9b03      	ldr	r3, [sp, #12]
    eb5a:	2200      	movs	r2, #0
    eb5c:	9e04      	ldr	r6, [sp, #16]
    eb5e:	0031      	movs	r1, r6
    eb60:	20c7      	movs	r0, #199	; 0xc7
    eb62:	4c6f      	ldr	r4, [pc, #444]	; (ed20 <nm_spi_write_block+0x24c>)
    eb64:	47a0      	blx	r4
	if (result != N_OK) {
    eb66:	2801      	cmp	r0, #1
    eb68:	d1c6      	bne.n	eaf8 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    eb6a:	20c7      	movs	r0, #199	; 0xc7
    eb6c:	4b6d      	ldr	r3, [pc, #436]	; (ed24 <nm_spi_write_block+0x250>)
    eb6e:	4798      	blx	r3
	if (result != N_OK) {
    eb70:	2801      	cmp	r0, #1
    eb72:	d00b      	beq.n	eb8c <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    eb74:	4a6e      	ldr	r2, [pc, #440]	; (ed30 <nm_spi_write_block+0x25c>)
    eb76:	4964      	ldr	r1, [pc, #400]	; (ed08 <nm_spi_write_block+0x234>)
    eb78:	4864      	ldr	r0, [pc, #400]	; (ed0c <nm_spi_write_block+0x238>)
    eb7a:	4c65      	ldr	r4, [pc, #404]	; (ed10 <nm_spi_write_block+0x23c>)
    eb7c:	47a0      	blx	r4
    eb7e:	9904      	ldr	r1, [sp, #16]
    eb80:	486c      	ldr	r0, [pc, #432]	; (ed34 <nm_spi_write_block+0x260>)
    eb82:	47a0      	blx	r4
    eb84:	200d      	movs	r0, #13
    eb86:	4b64      	ldr	r3, [pc, #400]	; (ed18 <nm_spi_write_block+0x244>)
    eb88:	4798      	blx	r3
    eb8a:	e7c0      	b.n	eb0e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    eb8c:	2200      	movs	r2, #0
    eb8e:	ab07      	add	r3, sp, #28
    eb90:	801a      	strh	r2, [r3, #0]
    eb92:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    eb94:	2600      	movs	r6, #0
				order = 0x1;
    eb96:	46a8      	mov	r8, r5
    eb98:	0035      	movs	r5, r6
    eb9a:	0026      	movs	r6, r4
    eb9c:	e021      	b.n	ebe2 <nm_spi_write_block+0x10e>
				order = 0x2;
    eb9e:	2300      	movs	r3, #0
    eba0:	42b7      	cmp	r7, r6
    eba2:	415b      	adcs	r3, r3
    eba4:	3302      	adds	r3, #2
		cmd |= order;
    eba6:	200b      	movs	r0, #11
    eba8:	aa04      	add	r2, sp, #16
    ebaa:	4694      	mov	ip, r2
    ebac:	4460      	add	r0, ip
    ebae:	2210      	movs	r2, #16
    ebb0:	4252      	negs	r2, r2
    ebb2:	4313      	orrs	r3, r2
    ebb4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    ebb6:	2101      	movs	r1, #1
    ebb8:	4b5f      	ldr	r3, [pc, #380]	; (ed38 <nm_spi_write_block+0x264>)
    ebba:	4798      	blx	r3
    ebbc:	2800      	cmp	r0, #0
    ebbe:	d11d      	bne.n	ebfc <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    ebc0:	465b      	mov	r3, fp
    ebc2:	1958      	adds	r0, r3, r5
    ebc4:	0021      	movs	r1, r4
    ebc6:	4b5c      	ldr	r3, [pc, #368]	; (ed38 <nm_spi_write_block+0x264>)
    ebc8:	4798      	blx	r3
    ebca:	2800      	cmp	r0, #0
    ebcc:	d12e      	bne.n	ec2c <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    ebce:	4b5b      	ldr	r3, [pc, #364]	; (ed3c <nm_spi_write_block+0x268>)
    ebd0:	781b      	ldrb	r3, [r3, #0]
    ebd2:	2b00      	cmp	r3, #0
    ebd4:	d037      	beq.n	ec46 <nm_spi_write_block+0x172>
		ix += nbytes;
    ebd6:	1965      	adds	r5, r4, r5
    ebd8:	b22d      	sxth	r5, r5
		sz -= nbytes;
    ebda:	1b36      	subs	r6, r6, r4
    ebdc:	b2b6      	uxth	r6, r6
	} while (sz);
    ebde:	2e00      	cmp	r6, #0
    ebe0:	d052      	beq.n	ec88 <nm_spi_write_block+0x1b4>
    ebe2:	1c34      	adds	r4, r6, #0
    ebe4:	42be      	cmp	r6, r7
    ebe6:	d901      	bls.n	ebec <nm_spi_write_block+0x118>
    ebe8:	466b      	mov	r3, sp
    ebea:	8adc      	ldrh	r4, [r3, #22]
    ebec:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    ebee:	2d00      	cmp	r5, #0
    ebf0:	d1d5      	bne.n	eb9e <nm_spi_write_block+0xca>
				order = 0x3;
    ebf2:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    ebf4:	42be      	cmp	r6, r7
    ebf6:	d9d6      	bls.n	eba6 <nm_spi_write_block+0xd2>
				order = 0x1;
    ebf8:	3b02      	subs	r3, #2
    ebfa:	e7d4      	b.n	eba6 <nm_spi_write_block+0xd2>
    ebfc:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    ebfe:	4a50      	ldr	r2, [pc, #320]	; (ed40 <nm_spi_write_block+0x26c>)
    ec00:	4950      	ldr	r1, [pc, #320]	; (ed44 <nm_spi_write_block+0x270>)
    ec02:	4842      	ldr	r0, [pc, #264]	; (ed0c <nm_spi_write_block+0x238>)
    ec04:	4b42      	ldr	r3, [pc, #264]	; (ed10 <nm_spi_write_block+0x23c>)
    ec06:	4798      	blx	r3
    ec08:	484f      	ldr	r0, [pc, #316]	; (ed48 <nm_spi_write_block+0x274>)
    ec0a:	4b50      	ldr	r3, [pc, #320]	; (ed4c <nm_spi_write_block+0x278>)
    ec0c:	4798      	blx	r3
    ec0e:	200d      	movs	r0, #13
    ec10:	4b41      	ldr	r3, [pc, #260]	; (ed18 <nm_spi_write_block+0x244>)
    ec12:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ec14:	4a4e      	ldr	r2, [pc, #312]	; (ed50 <nm_spi_write_block+0x27c>)
    ec16:	493c      	ldr	r1, [pc, #240]	; (ed08 <nm_spi_write_block+0x234>)
    ec18:	483c      	ldr	r0, [pc, #240]	; (ed0c <nm_spi_write_block+0x238>)
    ec1a:	4b3d      	ldr	r3, [pc, #244]	; (ed10 <nm_spi_write_block+0x23c>)
    ec1c:	4798      	blx	r3
    ec1e:	484d      	ldr	r0, [pc, #308]	; (ed54 <nm_spi_write_block+0x280>)
    ec20:	4b4a      	ldr	r3, [pc, #296]	; (ed4c <nm_spi_write_block+0x278>)
    ec22:	4798      	blx	r3
    ec24:	200d      	movs	r0, #13
    ec26:	4b3c      	ldr	r3, [pc, #240]	; (ed18 <nm_spi_write_block+0x244>)
    ec28:	4798      	blx	r3
    ec2a:	e770      	b.n	eb0e <nm_spi_write_block+0x3a>
    ec2c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    ec2e:	4a4a      	ldr	r2, [pc, #296]	; (ed58 <nm_spi_write_block+0x284>)
    ec30:	4944      	ldr	r1, [pc, #272]	; (ed44 <nm_spi_write_block+0x270>)
    ec32:	4836      	ldr	r0, [pc, #216]	; (ed0c <nm_spi_write_block+0x238>)
    ec34:	4b36      	ldr	r3, [pc, #216]	; (ed10 <nm_spi_write_block+0x23c>)
    ec36:	4798      	blx	r3
    ec38:	4848      	ldr	r0, [pc, #288]	; (ed5c <nm_spi_write_block+0x288>)
    ec3a:	4b44      	ldr	r3, [pc, #272]	; (ed4c <nm_spi_write_block+0x278>)
    ec3c:	4798      	blx	r3
    ec3e:	200d      	movs	r0, #13
    ec40:	4b35      	ldr	r3, [pc, #212]	; (ed18 <nm_spi_write_block+0x244>)
    ec42:	4798      	blx	r3
    ec44:	e7e6      	b.n	ec14 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    ec46:	2102      	movs	r1, #2
    ec48:	a807      	add	r0, sp, #28
    ec4a:	4b3b      	ldr	r3, [pc, #236]	; (ed38 <nm_spi_write_block+0x264>)
    ec4c:	4798      	blx	r3
    ec4e:	2800      	cmp	r0, #0
    ec50:	d0c1      	beq.n	ebd6 <nm_spi_write_block+0x102>
    ec52:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    ec54:	22d7      	movs	r2, #215	; 0xd7
    ec56:	0092      	lsls	r2, r2, #2
    ec58:	493a      	ldr	r1, [pc, #232]	; (ed44 <nm_spi_write_block+0x270>)
    ec5a:	482c      	ldr	r0, [pc, #176]	; (ed0c <nm_spi_write_block+0x238>)
    ec5c:	4b2c      	ldr	r3, [pc, #176]	; (ed10 <nm_spi_write_block+0x23c>)
    ec5e:	4798      	blx	r3
    ec60:	483f      	ldr	r0, [pc, #252]	; (ed60 <nm_spi_write_block+0x28c>)
    ec62:	4b3a      	ldr	r3, [pc, #232]	; (ed4c <nm_spi_write_block+0x278>)
    ec64:	4798      	blx	r3
    ec66:	200d      	movs	r0, #13
    ec68:	4b2b      	ldr	r3, [pc, #172]	; (ed18 <nm_spi_write_block+0x244>)
    ec6a:	4798      	blx	r3
    ec6c:	e7d2      	b.n	ec14 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    ec6e:	229a      	movs	r2, #154	; 0x9a
    ec70:	0052      	lsls	r2, r2, #1
    ec72:	493c      	ldr	r1, [pc, #240]	; (ed64 <nm_spi_write_block+0x290>)
    ec74:	4825      	ldr	r0, [pc, #148]	; (ed0c <nm_spi_write_block+0x238>)
    ec76:	4b26      	ldr	r3, [pc, #152]	; (ed10 <nm_spi_write_block+0x23c>)
    ec78:	4798      	blx	r3
    ec7a:	483b      	ldr	r0, [pc, #236]	; (ed68 <nm_spi_write_block+0x294>)
    ec7c:	4b33      	ldr	r3, [pc, #204]	; (ed4c <nm_spi_write_block+0x278>)
    ec7e:	4798      	blx	r3
    ec80:	200d      	movs	r0, #13
    ec82:	4b25      	ldr	r3, [pc, #148]	; (ed18 <nm_spi_write_block+0x244>)
    ec84:	4798      	blx	r3
    ec86:	e027      	b.n	ecd8 <nm_spi_write_block+0x204>
    ec88:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    ec8a:	4b2c      	ldr	r3, [pc, #176]	; (ed3c <nm_spi_write_block+0x268>)
    ec8c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    ec8e:	1e63      	subs	r3, r4, #1
    ec90:	419c      	sbcs	r4, r3
    ec92:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    ec94:	b2a1      	uxth	r1, r4
    ec96:	a807      	add	r0, sp, #28
    ec98:	4b34      	ldr	r3, [pc, #208]	; (ed6c <nm_spi_write_block+0x298>)
    ec9a:	4798      	blx	r3
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d1e6      	bne.n	ec6e <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    eca0:	ab08      	add	r3, sp, #32
    eca2:	191b      	adds	r3, r3, r4
    eca4:	3b05      	subs	r3, #5
    eca6:	781b      	ldrb	r3, [r3, #0]
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d106      	bne.n	ecba <nm_spi_write_block+0x1e6>
    ecac:	ab08      	add	r3, sp, #32
    ecae:	469c      	mov	ip, r3
    ecb0:	4464      	add	r4, ip
    ecb2:	3c06      	subs	r4, #6
    ecb4:	7823      	ldrb	r3, [r4, #0]
    ecb6:	2bc3      	cmp	r3, #195	; 0xc3
    ecb8:	d01a      	beq.n	ecf0 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    ecba:	223c      	movs	r2, #60	; 0x3c
    ecbc:	32ff      	adds	r2, #255	; 0xff
    ecbe:	4929      	ldr	r1, [pc, #164]	; (ed64 <nm_spi_write_block+0x290>)
    ecc0:	4812      	ldr	r0, [pc, #72]	; (ed0c <nm_spi_write_block+0x238>)
    ecc2:	4c13      	ldr	r4, [pc, #76]	; (ed10 <nm_spi_write_block+0x23c>)
    ecc4:	47a0      	blx	r4
    ecc6:	a907      	add	r1, sp, #28
    ecc8:	788b      	ldrb	r3, [r1, #2]
    ecca:	784a      	ldrb	r2, [r1, #1]
    eccc:	7809      	ldrb	r1, [r1, #0]
    ecce:	4828      	ldr	r0, [pc, #160]	; (ed70 <nm_spi_write_block+0x29c>)
    ecd0:	47a0      	blx	r4
    ecd2:	200d      	movs	r0, #13
    ecd4:	4b10      	ldr	r3, [pc, #64]	; (ed18 <nm_spi_write_block+0x244>)
    ecd6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ecd8:	4a26      	ldr	r2, [pc, #152]	; (ed74 <nm_spi_write_block+0x2a0>)
    ecda:	490b      	ldr	r1, [pc, #44]	; (ed08 <nm_spi_write_block+0x234>)
    ecdc:	480b      	ldr	r0, [pc, #44]	; (ed0c <nm_spi_write_block+0x238>)
    ecde:	4b0c      	ldr	r3, [pc, #48]	; (ed10 <nm_spi_write_block+0x23c>)
    ece0:	4798      	blx	r3
    ece2:	481c      	ldr	r0, [pc, #112]	; (ed54 <nm_spi_write_block+0x280>)
    ece4:	4b19      	ldr	r3, [pc, #100]	; (ed4c <nm_spi_write_block+0x278>)
    ece6:	4798      	blx	r3
    ece8:	200d      	movs	r0, #13
    ecea:	4b0b      	ldr	r3, [pc, #44]	; (ed18 <nm_spi_write_block+0x244>)
    ecec:	4798      	blx	r3
    ecee:	e70e      	b.n	eb0e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ecf0:	2000      	movs	r0, #0
    ecf2:	e001      	b.n	ecf8 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ecf4:	2006      	movs	r0, #6
    ecf6:	4240      	negs	r0, r0

	return s8Ret;
}
    ecf8:	b009      	add	sp, #36	; 0x24
    ecfa:	bc0c      	pop	{r2, r3}
    ecfc:	4690      	mov	r8, r2
    ecfe:	469b      	mov	fp, r3
    ed00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed02:	46c0      	nop			; (mov r8, r8)
    ed04:	000003c3 	.word	0x000003c3
    ed08:	000194c8 	.word	0x000194c8
    ed0c:	00018db0 	.word	0x00018db0
    ed10:	00017535 	.word	0x00017535
    ed14:	00019780 	.word	0x00019780
    ed18:	00017569 	.word	0x00017569
    ed1c:	0000c669 	.word	0x0000c669
    ed20:	0000e1a9 	.word	0x0000e1a9
    ed24:	0000e349 	.word	0x0000e349
    ed28:	000003eb 	.word	0x000003eb
    ed2c:	00019764 	.word	0x00019764
    ed30:	000003c9 	.word	0x000003c9
    ed34:	000197b0 	.word	0x000197b0
    ed38:	0000e189 	.word	0x0000e189
    ed3c:	200003d0 	.word	0x200003d0
    ed40:	00000349 	.word	0x00000349
    ed44:	000194a8 	.word	0x000194a8
    ed48:	000197e8 	.word	0x000197e8
    ed4c:	00017651 	.word	0x00017651
    ed50:	000003d9 	.word	0x000003d9
    ed54:	000198dc 	.word	0x000198dc
    ed58:	00000352 	.word	0x00000352
    ed5c:	00019820 	.word	0x00019820
    ed60:	00019854 	.word	0x00019854
    ed64:	0001947c 	.word	0x0001947c
    ed68:	0001988c 	.word	0x0001988c
    ed6c:	0000e329 	.word	0x0000e329
    ed70:	000198ac 	.word	0x000198ac
    ed74:	000003e1 	.word	0x000003e1

0000ed78 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed7a:	46de      	mov	lr, fp
    ed7c:	4657      	mov	r7, sl
    ed7e:	464e      	mov	r6, r9
    ed80:	4645      	mov	r5, r8
    ed82:	b5e0      	push	{r5, r6, r7, lr}
    ed84:	b085      	sub	sp, #20
    ed86:	9001      	str	r0, [sp, #4]
    ed88:	000e      	movs	r6, r1
    ed8a:	9202      	str	r2, [sp, #8]
    ed8c:	001d      	movs	r5, r3
    ed8e:	ab0e      	add	r3, sp, #56	; 0x38
    ed90:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    ed92:	2c00      	cmp	r4, #0
    ed94:	d064      	beq.n	ee60 <Socket_ReadSocketData+0xe8>
    ed96:	0103      	lsls	r3, r0, #4
    ed98:	4935      	ldr	r1, [pc, #212]	; (ee70 <Socket_ReadSocketData+0xf8>)
    ed9a:	585b      	ldr	r3, [r3, r1]
    ed9c:	2b00      	cmp	r3, #0
    ed9e:	d05f      	beq.n	ee60 <Socket_ReadSocketData+0xe8>
    eda0:	0101      	lsls	r1, r0, #4
    eda2:	4b33      	ldr	r3, [pc, #204]	; (ee70 <Socket_ReadSocketData+0xf8>)
    eda4:	185b      	adds	r3, r3, r1
    eda6:	889b      	ldrh	r3, [r3, #4]
    eda8:	b29b      	uxth	r3, r3
    edaa:	2b00      	cmp	r3, #0
    edac:	d058      	beq.n	ee60 <Socket_ReadSocketData+0xe8>
    edae:	4b30      	ldr	r3, [pc, #192]	; (ee70 <Socket_ReadSocketData+0xf8>)
    edb0:	185b      	adds	r3, r3, r1
    edb2:	7a9b      	ldrb	r3, [r3, #10]
    edb4:	2b01      	cmp	r3, #1
    edb6:	d153      	bne.n	ee60 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    edb8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    edba:	4b2d      	ldr	r3, [pc, #180]	; (ee70 <Socket_ReadSocketData+0xf8>)
    edbc:	469b      	mov	fp, r3
    edbe:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    edc0:	465b      	mov	r3, fp
    edc2:	220a      	movs	r2, #10
    edc4:	4690      	mov	r8, r2
    edc6:	44d8      	add	r8, fp
    edc8:	468a      	mov	sl, r1
    edca:	9500      	str	r5, [sp, #0]
    edcc:	9303      	str	r3, [sp, #12]
    edce:	e015      	b.n	edfc <Socket_ReadSocketData+0x84>
    edd0:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    edd2:	2301      	movs	r3, #1
    edd4:	e01c      	b.n	ee10 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    edd6:	3301      	adds	r3, #1
    edd8:	2200      	movs	r2, #0
    edda:	2100      	movs	r1, #0
    eddc:	2000      	movs	r0, #0
    edde:	4c25      	ldr	r4, [pc, #148]	; (ee74 <Socket_ReadSocketData+0xfc>)
    ede0:	47a0      	blx	r4
    ede2:	e03d      	b.n	ee60 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ede4:	4824      	ldr	r0, [pc, #144]	; (ee78 <Socket_ReadSocketData+0x100>)
    ede6:	4d25      	ldr	r5, [pc, #148]	; (ee7c <Socket_ReadSocketData+0x104>)
    ede8:	47a8      	blx	r5
    edea:	0021      	movs	r1, r4
    edec:	4824      	ldr	r0, [pc, #144]	; (ee80 <Socket_ReadSocketData+0x108>)
    edee:	47a8      	blx	r5
    edf0:	200d      	movs	r0, #13
    edf2:	4b24      	ldr	r3, [pc, #144]	; (ee84 <Socket_ReadSocketData+0x10c>)
    edf4:	4798      	blx	r3
				break;
    edf6:	e033      	b.n	ee60 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    edf8:	2c00      	cmp	r4, #0
    edfa:	d031      	beq.n	ee60 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    edfc:	465b      	mov	r3, fp
    edfe:	889b      	ldrh	r3, [r3, #4]
    ee00:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    ee02:	b21b      	sxth	r3, r3
    ee04:	2b00      	cmp	r3, #0
    ee06:	dde3      	ble.n	edd0 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    ee08:	9b03      	ldr	r3, [sp, #12]
    ee0a:	889d      	ldrh	r5, [r3, #4]
    ee0c:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    ee0e:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    ee10:	4a17      	ldr	r2, [pc, #92]	; (ee70 <Socket_ReadSocketData+0xf8>)
    ee12:	4651      	mov	r1, sl
    ee14:	5889      	ldr	r1, [r1, r2]
    ee16:	002a      	movs	r2, r5
    ee18:	9800      	ldr	r0, [sp, #0]
    ee1a:	4f16      	ldr	r7, [pc, #88]	; (ee74 <Socket_ReadSocketData+0xfc>)
    ee1c:	47b8      	blx	r7
    ee1e:	2800      	cmp	r0, #0
    ee20:	d1e0      	bne.n	ede4 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ee22:	4b13      	ldr	r3, [pc, #76]	; (ee70 <Socket_ReadSocketData+0xf8>)
    ee24:	4652      	mov	r2, sl
    ee26:	58d3      	ldr	r3, [r2, r3]
    ee28:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ee2a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ee2c:	88f3      	ldrh	r3, [r6, #6]
    ee2e:	1b5b      	subs	r3, r3, r5
    ee30:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    ee32:	4b15      	ldr	r3, [pc, #84]	; (ee88 <Socket_ReadSocketData+0x110>)
    ee34:	681b      	ldr	r3, [r3, #0]
    ee36:	2b00      	cmp	r3, #0
    ee38:	d005      	beq.n	ee46 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ee3a:	4b13      	ldr	r3, [pc, #76]	; (ee88 <Socket_ReadSocketData+0x110>)
    ee3c:	681b      	ldr	r3, [r3, #0]
    ee3e:	0032      	movs	r2, r6
    ee40:	9902      	ldr	r1, [sp, #8]
    ee42:	9801      	ldr	r0, [sp, #4]
    ee44:	4798      	blx	r3
				u16ReadCount -= u16Read;
    ee46:	1b64      	subs	r4, r4, r5
    ee48:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    ee4a:	9b00      	ldr	r3, [sp, #0]
    ee4c:	469c      	mov	ip, r3
    ee4e:	44ac      	add	ip, r5
    ee50:	4663      	mov	r3, ip
    ee52:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ee54:	4643      	mov	r3, r8
    ee56:	781b      	ldrb	r3, [r3, #0]
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d1cd      	bne.n	edf8 <Socket_ReadSocketData+0x80>
    ee5c:	2c00      	cmp	r4, #0
    ee5e:	d1ba      	bne.n	edd6 <Socket_ReadSocketData+0x5e>
	}
}
    ee60:	b005      	add	sp, #20
    ee62:	bc3c      	pop	{r2, r3, r4, r5}
    ee64:	4690      	mov	r8, r2
    ee66:	4699      	mov	r9, r3
    ee68:	46a2      	mov	sl, r4
    ee6a:	46ab      	mov	fp, r5
    ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee6e:	46c0      	nop			; (mov r8, r8)
    ee70:	200013ac 	.word	0x200013ac
    ee74:	0000d121 	.word	0x0000d121
    ee78:	000190e0 	.word	0x000190e0
    ee7c:	00017535 	.word	0x00017535
    ee80:	00019b44 	.word	0x00019b44
    ee84:	00017569 	.word	0x00017569
    ee88:	2000145c 	.word	0x2000145c

0000ee8c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee8e:	46d6      	mov	lr, sl
    ee90:	464f      	mov	r7, r9
    ee92:	4646      	mov	r6, r8
    ee94:	b5c0      	push	{r6, r7, lr}
    ee96:	b09a      	sub	sp, #104	; 0x68
    ee98:	000d      	movs	r5, r1
    ee9a:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    ee9c:	2841      	cmp	r0, #65	; 0x41
    ee9e:	d039      	beq.n	ef14 <m2m_ip_cb+0x88>
    eea0:	2854      	cmp	r0, #84	; 0x54
    eea2:	d037      	beq.n	ef14 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    eea4:	2842      	cmp	r0, #66	; 0x42
    eea6:	d053      	beq.n	ef50 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    eea8:	2843      	cmp	r0, #67	; 0x43
    eeaa:	d06a      	beq.n	ef82 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    eeac:	2844      	cmp	r0, #68	; 0x44
    eeae:	d100      	bne.n	eeb2 <m2m_ip_cb+0x26>
    eeb0:	e0af      	b.n	f012 <m2m_ip_cb+0x186>
    eeb2:	284b      	cmp	r0, #75	; 0x4b
    eeb4:	d100      	bne.n	eeb8 <m2m_ip_cb+0x2c>
    eeb6:	e0ac      	b.n	f012 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    eeb8:	284a      	cmp	r0, #74	; 0x4a
    eeba:	d100      	bne.n	eebe <m2m_ip_cb+0x32>
    eebc:	e0cf      	b.n	f05e <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    eebe:	2846      	cmp	r0, #70	; 0x46
    eec0:	d100      	bne.n	eec4 <m2m_ip_cb+0x38>
    eec2:	e0e5      	b.n	f090 <m2m_ip_cb+0x204>
    eec4:	2848      	cmp	r0, #72	; 0x48
    eec6:	d100      	bne.n	eeca <m2m_ip_cb+0x3e>
    eec8:	e10e      	b.n	f0e8 <m2m_ip_cb+0x25c>
    eeca:	284d      	cmp	r0, #77	; 0x4d
    eecc:	d100      	bne.n	eed0 <m2m_ip_cb+0x44>
    eece:	e0dc      	b.n	f08a <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    eed0:	2845      	cmp	r0, #69	; 0x45
    eed2:	d100      	bne.n	eed6 <m2m_ip_cb+0x4a>
    eed4:	e12c      	b.n	f130 <m2m_ip_cb+0x2a4>
    eed6:	2847      	cmp	r0, #71	; 0x47
    eed8:	d100      	bne.n	eedc <m2m_ip_cb+0x50>
    eeda:	e14d      	b.n	f178 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    eedc:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    eede:	284c      	cmp	r0, #76	; 0x4c
    eee0:	d100      	bne.n	eee4 <m2m_ip_cb+0x58>
    eee2:	e126      	b.n	f132 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    eee4:	2852      	cmp	r0, #82	; 0x52
    eee6:	d12d      	bne.n	ef44 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    eee8:	2301      	movs	r3, #1
    eeea:	2214      	movs	r2, #20
    eeec:	a909      	add	r1, sp, #36	; 0x24
    eeee:	0020      	movs	r0, r4
    eef0:	4ca2      	ldr	r4, [pc, #648]	; (f17c <m2m_ip_cb+0x2f0>)
    eef2:	47a0      	blx	r4
    eef4:	2800      	cmp	r0, #0
    eef6:	d125      	bne.n	ef44 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    eef8:	4ba1      	ldr	r3, [pc, #644]	; (f180 <m2m_ip_cb+0x2f4>)
    eefa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eefc:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    eefe:	681b      	ldr	r3, [r3, #0]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d01f      	beq.n	ef44 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    ef04:	4b9e      	ldr	r3, [pc, #632]	; (f180 <m2m_ip_cb+0x2f4>)
    ef06:	681c      	ldr	r4, [r3, #0]
    ef08:	ab09      	add	r3, sp, #36	; 0x24
    ef0a:	7c1a      	ldrb	r2, [r3, #16]
    ef0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ef0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef10:	47a0      	blx	r4
			}
		}
	}
}
    ef12:	e017      	b.n	ef44 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    ef14:	2300      	movs	r3, #0
    ef16:	2204      	movs	r2, #4
    ef18:	a909      	add	r1, sp, #36	; 0x24
    ef1a:	0020      	movs	r0, r4
    ef1c:	4c97      	ldr	r4, [pc, #604]	; (f17c <m2m_ip_cb+0x2f0>)
    ef1e:	47a0      	blx	r4
    ef20:	2800      	cmp	r0, #0
    ef22:	d10f      	bne.n	ef44 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    ef24:	ab09      	add	r3, sp, #36	; 0x24
    ef26:	785a      	ldrb	r2, [r3, #1]
    ef28:	ab05      	add	r3, sp, #20
    ef2a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ef2c:	4b95      	ldr	r3, [pc, #596]	; (f184 <m2m_ip_cb+0x2f8>)
    ef2e:	681b      	ldr	r3, [r3, #0]
    ef30:	2b00      	cmp	r3, #0
    ef32:	d007      	beq.n	ef44 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    ef34:	4b93      	ldr	r3, [pc, #588]	; (f184 <m2m_ip_cb+0x2f8>)
    ef36:	681b      	ldr	r3, [r3, #0]
    ef38:	aa09      	add	r2, sp, #36	; 0x24
    ef3a:	2000      	movs	r0, #0
    ef3c:	5610      	ldrsb	r0, [r2, r0]
    ef3e:	aa05      	add	r2, sp, #20
    ef40:	2101      	movs	r1, #1
    ef42:	4798      	blx	r3
}
    ef44:	b01a      	add	sp, #104	; 0x68
    ef46:	bc1c      	pop	{r2, r3, r4}
    ef48:	4690      	mov	r8, r2
    ef4a:	4699      	mov	r9, r3
    ef4c:	46a2      	mov	sl, r4
    ef4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    ef50:	2300      	movs	r3, #0
    ef52:	2204      	movs	r2, #4
    ef54:	a909      	add	r1, sp, #36	; 0x24
    ef56:	0020      	movs	r0, r4
    ef58:	4c88      	ldr	r4, [pc, #544]	; (f17c <m2m_ip_cb+0x2f0>)
    ef5a:	47a0      	blx	r4
    ef5c:	2800      	cmp	r0, #0
    ef5e:	d1f1      	bne.n	ef44 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    ef60:	ab09      	add	r3, sp, #36	; 0x24
    ef62:	785a      	ldrb	r2, [r3, #1]
    ef64:	ab05      	add	r3, sp, #20
    ef66:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ef68:	4b86      	ldr	r3, [pc, #536]	; (f184 <m2m_ip_cb+0x2f8>)
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	2b00      	cmp	r3, #0
    ef6e:	d0e9      	beq.n	ef44 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    ef70:	4b84      	ldr	r3, [pc, #528]	; (f184 <m2m_ip_cb+0x2f8>)
    ef72:	681b      	ldr	r3, [r3, #0]
    ef74:	aa09      	add	r2, sp, #36	; 0x24
    ef76:	2000      	movs	r0, #0
    ef78:	5610      	ldrsb	r0, [r2, r0]
    ef7a:	aa05      	add	r2, sp, #20
    ef7c:	2102      	movs	r1, #2
    ef7e:	4798      	blx	r3
    ef80:	e7e0      	b.n	ef44 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    ef82:	2300      	movs	r3, #0
    ef84:	220c      	movs	r2, #12
    ef86:	a905      	add	r1, sp, #20
    ef88:	0020      	movs	r0, r4
    ef8a:	4c7c      	ldr	r4, [pc, #496]	; (f17c <m2m_ip_cb+0x2f0>)
    ef8c:	47a0      	blx	r4
    ef8e:	2800      	cmp	r0, #0
    ef90:	d1d8      	bne.n	ef44 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    ef92:	ab05      	add	r3, sp, #20
    ef94:	2209      	movs	r2, #9
    ef96:	569a      	ldrsb	r2, [r3, r2]
    ef98:	2a00      	cmp	r2, #0
    ef9a:	db24      	blt.n	efe6 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    ef9c:	0018      	movs	r0, r3
    ef9e:	2108      	movs	r1, #8
    efa0:	5659      	ldrsb	r1, [r3, r1]
    efa2:	4b79      	ldr	r3, [pc, #484]	; (f188 <m2m_ip_cb+0x2fc>)
    efa4:	0109      	lsls	r1, r1, #4
    efa6:	1859      	adds	r1, r3, r1
    efa8:	7ac9      	ldrb	r1, [r1, #11]
    efaa:	b2c9      	uxtb	r1, r1
    efac:	0114      	lsls	r4, r2, #4
    efae:	191b      	adds	r3, r3, r4
    efb0:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    efb2:	2101      	movs	r1, #1
    efb4:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    efb6:	8941      	ldrh	r1, [r0, #10]
    efb8:	3908      	subs	r1, #8
    efba:	b289      	uxth	r1, r1
    efbc:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    efbe:	4973      	ldr	r1, [pc, #460]	; (f18c <m2m_ip_cb+0x300>)
    efc0:	880b      	ldrh	r3, [r1, #0]
    efc2:	3301      	adds	r3, #1
    efc4:	b29b      	uxth	r3, r3
    efc6:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    efc8:	880b      	ldrh	r3, [r1, #0]
    efca:	b29b      	uxth	r3, r3
    efcc:	2b00      	cmp	r3, #0
    efce:	d103      	bne.n	efd8 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    efd0:	880b      	ldrh	r3, [r1, #0]
    efd2:	3301      	adds	r3, #1
    efd4:	b29b      	uxth	r3, r3
    efd6:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    efd8:	4b6c      	ldr	r3, [pc, #432]	; (f18c <m2m_ip_cb+0x300>)
    efda:	8819      	ldrh	r1, [r3, #0]
    efdc:	b289      	uxth	r1, r1
    efde:	0110      	lsls	r0, r2, #4
    efe0:	4b69      	ldr	r3, [pc, #420]	; (f188 <m2m_ip_cb+0x2fc>)
    efe2:	181b      	adds	r3, r3, r0
    efe4:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    efe6:	ab09      	add	r3, sp, #36	; 0x24
    efe8:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    efea:	2202      	movs	r2, #2
    efec:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    efee:	aa05      	add	r2, sp, #20
    eff0:	8851      	ldrh	r1, [r2, #2]
    eff2:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    eff4:	9a06      	ldr	r2, [sp, #24]
    eff6:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    eff8:	4b62      	ldr	r3, [pc, #392]	; (f184 <m2m_ip_cb+0x2f8>)
    effa:	681b      	ldr	r3, [r3, #0]
    effc:	2b00      	cmp	r3, #0
    effe:	d0a1      	beq.n	ef44 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    f000:	4b60      	ldr	r3, [pc, #384]	; (f184 <m2m_ip_cb+0x2f8>)
    f002:	681b      	ldr	r3, [r3, #0]
    f004:	aa05      	add	r2, sp, #20
    f006:	2008      	movs	r0, #8
    f008:	5610      	ldrsb	r0, [r2, r0]
    f00a:	aa09      	add	r2, sp, #36	; 0x24
    f00c:	2104      	movs	r1, #4
    f00e:	4798      	blx	r3
    f010:	e798      	b.n	ef44 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    f012:	2300      	movs	r3, #0
    f014:	2204      	movs	r2, #4
    f016:	a909      	add	r1, sp, #36	; 0x24
    f018:	0020      	movs	r0, r4
    f01a:	4c58      	ldr	r4, [pc, #352]	; (f17c <m2m_ip_cb+0x2f0>)
    f01c:	47a0      	blx	r4
    f01e:	2800      	cmp	r0, #0
    f020:	d000      	beq.n	f024 <m2m_ip_cb+0x198>
    f022:	e78f      	b.n	ef44 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    f024:	ab09      	add	r3, sp, #36	; 0x24
    f026:	2000      	movs	r0, #0
    f028:	5618      	ldrsb	r0, [r3, r0]
    f02a:	aa05      	add	r2, sp, #20
    f02c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    f02e:	785b      	ldrb	r3, [r3, #1]
    f030:	b25b      	sxtb	r3, r3
    f032:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    f034:	2b00      	cmp	r3, #0
    f036:	d107      	bne.n	f048 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f038:	ab09      	add	r3, sp, #36	; 0x24
    f03a:	885b      	ldrh	r3, [r3, #2]
    f03c:	3b08      	subs	r3, #8
    f03e:	b29b      	uxth	r3, r3
    f040:	0101      	lsls	r1, r0, #4
    f042:	4a51      	ldr	r2, [pc, #324]	; (f188 <m2m_ip_cb+0x2fc>)
    f044:	1852      	adds	r2, r2, r1
    f046:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    f048:	4b4e      	ldr	r3, [pc, #312]	; (f184 <m2m_ip_cb+0x2f8>)
    f04a:	681b      	ldr	r3, [r3, #0]
    f04c:	2b00      	cmp	r3, #0
    f04e:	d100      	bne.n	f052 <m2m_ip_cb+0x1c6>
    f050:	e778      	b.n	ef44 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    f052:	4b4c      	ldr	r3, [pc, #304]	; (f184 <m2m_ip_cb+0x2f8>)
    f054:	681b      	ldr	r3, [r3, #0]
    f056:	aa05      	add	r2, sp, #20
    f058:	2105      	movs	r1, #5
    f05a:	4798      	blx	r3
	{
    f05c:	e772      	b.n	ef44 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    f05e:	2300      	movs	r3, #0
    f060:	2244      	movs	r2, #68	; 0x44
    f062:	a909      	add	r1, sp, #36	; 0x24
    f064:	0020      	movs	r0, r4
    f066:	4c45      	ldr	r4, [pc, #276]	; (f17c <m2m_ip_cb+0x2f0>)
    f068:	47a0      	blx	r4
    f06a:	2800      	cmp	r0, #0
    f06c:	d000      	beq.n	f070 <m2m_ip_cb+0x1e4>
    f06e:	e769      	b.n	ef44 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    f070:	4b47      	ldr	r3, [pc, #284]	; (f190 <m2m_ip_cb+0x304>)
    f072:	681b      	ldr	r3, [r3, #0]
    f074:	2b00      	cmp	r3, #0
    f076:	d100      	bne.n	f07a <m2m_ip_cb+0x1ee>
    f078:	e764      	b.n	ef44 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    f07a:	4b45      	ldr	r3, [pc, #276]	; (f190 <m2m_ip_cb+0x304>)
    f07c:	681b      	ldr	r3, [r3, #0]
    f07e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f080:	9203      	str	r2, [sp, #12]
    f082:	0011      	movs	r1, r2
    f084:	a809      	add	r0, sp, #36	; 0x24
    f086:	4798      	blx	r3
    f088:	e75c      	b.n	ef44 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    f08a:	2306      	movs	r3, #6
    f08c:	469a      	mov	sl, r3
    f08e:	e001      	b.n	f094 <m2m_ip_cb+0x208>
    f090:	2306      	movs	r3, #6
    f092:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    f094:	2300      	movs	r3, #0
    f096:	2210      	movs	r2, #16
    f098:	a905      	add	r1, sp, #20
    f09a:	0020      	movs	r0, r4
    f09c:	4f37      	ldr	r7, [pc, #220]	; (f17c <m2m_ip_cb+0x2f0>)
    f09e:	47b8      	blx	r7
    f0a0:	2800      	cmp	r0, #0
    f0a2:	d000      	beq.n	f0a6 <m2m_ip_cb+0x21a>
    f0a4:	e74e      	b.n	ef44 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    f0a6:	aa05      	add	r2, sp, #20
    f0a8:	200c      	movs	r0, #12
    f0aa:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    f0ac:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    f0ae:	0107      	lsls	r7, r0, #4
    f0b0:	4935      	ldr	r1, [pc, #212]	; (f188 <m2m_ip_cb+0x2fc>)
    f0b2:	19c9      	adds	r1, r1, r7
    f0b4:	2700      	movs	r7, #0
    f0b6:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    f0b8:	2608      	movs	r6, #8
    f0ba:	5f97      	ldrsh	r7, [r2, r6]
    f0bc:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    f0be:	8957      	ldrh	r7, [r2, #10]
    f0c0:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    f0c2:	af09      	add	r7, sp, #36	; 0x24
    f0c4:	8856      	ldrh	r6, [r2, #2]
    f0c6:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    f0c8:	9a06      	ldr	r2, [sp, #24]
    f0ca:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f0cc:	88ca      	ldrh	r2, [r1, #6]
    f0ce:	b292      	uxth	r2, r2
    f0d0:	4293      	cmp	r3, r2
    f0d2:	d00c      	beq.n	f0ee <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    f0d4:	2d10      	cmp	r5, #16
    f0d6:	d800      	bhi.n	f0da <m2m_ip_cb+0x24e>
    f0d8:	e734      	b.n	ef44 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f0da:	2301      	movs	r3, #1
    f0dc:	2200      	movs	r2, #0
    f0de:	2100      	movs	r1, #0
    f0e0:	2000      	movs	r0, #0
    f0e2:	4c26      	ldr	r4, [pc, #152]	; (f17c <m2m_ip_cb+0x2f0>)
    f0e4:	47a0      	blx	r4
	{
    f0e6:	e72d      	b.n	ef44 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    f0e8:	2309      	movs	r3, #9
    f0ea:	469a      	mov	sl, r3
    f0ec:	e7d2      	b.n	f094 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    f0ee:	4643      	mov	r3, r8
    f0f0:	2b00      	cmp	r3, #0
    f0f2:	dd01      	ble.n	f0f8 <m2m_ip_cb+0x26c>
    f0f4:	45a8      	cmp	r8, r5
    f0f6:	db0f      	blt.n	f118 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    f0f8:	ab09      	add	r3, sp, #36	; 0x24
    f0fa:	4642      	mov	r2, r8
    f0fc:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    f0fe:	2300      	movs	r3, #0
    f100:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    f102:	4b20      	ldr	r3, [pc, #128]	; (f184 <m2m_ip_cb+0x2f8>)
    f104:	681b      	ldr	r3, [r3, #0]
    f106:	2b00      	cmp	r3, #0
    f108:	d100      	bne.n	f10c <m2m_ip_cb+0x280>
    f10a:	e71b      	b.n	ef44 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    f10c:	4b1d      	ldr	r3, [pc, #116]	; (f184 <m2m_ip_cb+0x2f8>)
    f10e:	681b      	ldr	r3, [r3, #0]
    f110:	aa09      	add	r2, sp, #36	; 0x24
    f112:	4651      	mov	r1, sl
    f114:	4798      	blx	r3
    f116:	e715      	b.n	ef44 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    f118:	0023      	movs	r3, r4
    f11a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    f11c:	4642      	mov	r2, r8
    f11e:	4669      	mov	r1, sp
    f120:	818a      	strh	r2, [r1, #12]
    f122:	898a      	ldrh	r2, [r1, #12]
    f124:	9200      	str	r2, [sp, #0]
    f126:	4652      	mov	r2, sl
    f128:	0039      	movs	r1, r7
    f12a:	4c1a      	ldr	r4, [pc, #104]	; (f194 <m2m_ip_cb+0x308>)
    f12c:	47a0      	blx	r4
    f12e:	e709      	b.n	ef44 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f130:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    f132:	2300      	movs	r3, #0
    f134:	2208      	movs	r2, #8
    f136:	a909      	add	r1, sp, #36	; 0x24
    f138:	0020      	movs	r0, r4
    f13a:	4c10      	ldr	r4, [pc, #64]	; (f17c <m2m_ip_cb+0x2f0>)
    f13c:	47a0      	blx	r4
    f13e:	2800      	cmp	r0, #0
    f140:	d000      	beq.n	f144 <m2m_ip_cb+0x2b8>
    f142:	e6ff      	b.n	ef44 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    f144:	ab09      	add	r3, sp, #36	; 0x24
    f146:	2000      	movs	r0, #0
    f148:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    f14a:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    f14c:	8859      	ldrh	r1, [r3, #2]
    f14e:	ab05      	add	r3, sp, #20
    f150:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f152:	0101      	lsls	r1, r0, #4
    f154:	4b0c      	ldr	r3, [pc, #48]	; (f188 <m2m_ip_cb+0x2fc>)
    f156:	185b      	adds	r3, r3, r1
    f158:	88db      	ldrh	r3, [r3, #6]
    f15a:	b29b      	uxth	r3, r3
    f15c:	429a      	cmp	r2, r3
    f15e:	d000      	beq.n	f162 <m2m_ip_cb+0x2d6>
    f160:	e6f0      	b.n	ef44 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    f162:	4b08      	ldr	r3, [pc, #32]	; (f184 <m2m_ip_cb+0x2f8>)
    f164:	681b      	ldr	r3, [r3, #0]
    f166:	2b00      	cmp	r3, #0
    f168:	d100      	bne.n	f16c <m2m_ip_cb+0x2e0>
    f16a:	e6eb      	b.n	ef44 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    f16c:	4b05      	ldr	r3, [pc, #20]	; (f184 <m2m_ip_cb+0x2f8>)
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	aa05      	add	r2, sp, #20
    f172:	0029      	movs	r1, r5
    f174:	4798      	blx	r3
	{
    f176:	e6e5      	b.n	ef44 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    f178:	2508      	movs	r5, #8
    f17a:	e7da      	b.n	f132 <m2m_ip_cb+0x2a6>
    f17c:	0000d121 	.word	0x0000d121
    f180:	20001460 	.word	0x20001460
    f184:	2000145c 	.word	0x2000145c
    f188:	200013ac 	.word	0x200013ac
    f18c:	200003d2 	.word	0x200003d2
    f190:	20001464 	.word	0x20001464
    f194:	0000ed79 	.word	0x0000ed79

0000f198 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    f198:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    f19a:	4b0a      	ldr	r3, [pc, #40]	; (f1c4 <socketInit+0x2c>)
    f19c:	781b      	ldrb	r3, [r3, #0]
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d000      	beq.n	f1a4 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    f1a2:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f1a4:	22b0      	movs	r2, #176	; 0xb0
    f1a6:	2100      	movs	r1, #0
    f1a8:	4807      	ldr	r0, [pc, #28]	; (f1c8 <socketInit+0x30>)
    f1aa:	4b08      	ldr	r3, [pc, #32]	; (f1cc <socketInit+0x34>)
    f1ac:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    f1ae:	4908      	ldr	r1, [pc, #32]	; (f1d0 <socketInit+0x38>)
    f1b0:	2002      	movs	r0, #2
    f1b2:	4b08      	ldr	r3, [pc, #32]	; (f1d4 <socketInit+0x3c>)
    f1b4:	4798      	blx	r3
		gbSocketInit	= 1;
    f1b6:	2201      	movs	r2, #1
    f1b8:	4b02      	ldr	r3, [pc, #8]	; (f1c4 <socketInit+0x2c>)
    f1ba:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    f1bc:	2200      	movs	r2, #0
    f1be:	4b06      	ldr	r3, [pc, #24]	; (f1d8 <socketInit+0x40>)
    f1c0:	801a      	strh	r2, [r3, #0]
}
    f1c2:	e7ee      	b.n	f1a2 <socketInit+0xa>
    f1c4:	200003d1 	.word	0x200003d1
    f1c8:	200013ac 	.word	0x200013ac
    f1cc:	0000c9f5 	.word	0x0000c9f5
    f1d0:	0000ee8d 	.word	0x0000ee8d
    f1d4:	0000d209 	.word	0x0000d209
    f1d8:	200003d2 	.word	0x200003d2

0000f1dc <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    f1dc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f1de:	22b0      	movs	r2, #176	; 0xb0
    f1e0:	2100      	movs	r1, #0
    f1e2:	4807      	ldr	r0, [pc, #28]	; (f200 <socketDeinit+0x24>)
    f1e4:	4b07      	ldr	r3, [pc, #28]	; (f204 <socketDeinit+0x28>)
    f1e6:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    f1e8:	2100      	movs	r1, #0
    f1ea:	2002      	movs	r0, #2
    f1ec:	4b06      	ldr	r3, [pc, #24]	; (f208 <socketDeinit+0x2c>)
    f1ee:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    f1f0:	2300      	movs	r3, #0
    f1f2:	4a06      	ldr	r2, [pc, #24]	; (f20c <socketDeinit+0x30>)
    f1f4:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    f1f6:	4a06      	ldr	r2, [pc, #24]	; (f210 <socketDeinit+0x34>)
    f1f8:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    f1fa:	4a06      	ldr	r2, [pc, #24]	; (f214 <socketDeinit+0x38>)
    f1fc:	7013      	strb	r3, [r2, #0]
}
    f1fe:	bd10      	pop	{r4, pc}
    f200:	200013ac 	.word	0x200013ac
    f204:	0000c9f5 	.word	0x0000c9f5
    f208:	0000d209 	.word	0x0000d209
    f20c:	2000145c 	.word	0x2000145c
    f210:	20001464 	.word	0x20001464
    f214:	200003d1 	.word	0x200003d1

0000f218 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    f218:	4b02      	ldr	r3, [pc, #8]	; (f224 <registerSocketCallback+0xc>)
    f21a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    f21c:	4b02      	ldr	r3, [pc, #8]	; (f228 <registerSocketCallback+0x10>)
    f21e:	6019      	str	r1, [r3, #0]
}
    f220:	4770      	bx	lr
    f222:	46c0      	nop			; (mov r8, r8)
    f224:	2000145c 	.word	0x2000145c
    f228:	20001464 	.word	0x20001464

0000f22c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    f22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f22e:	46d6      	mov	lr, sl
    f230:	4647      	mov	r7, r8
    f232:	b580      	push	{r7, lr}
    f234:	b089      	sub	sp, #36	; 0x24
    f236:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    f238:	2802      	cmp	r0, #2
    f23a:	d000      	beq.n	f23e <socket+0x12>
    f23c:	e09c      	b.n	f378 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    f23e:	2901      	cmp	r1, #1
    f240:	d00a      	beq.n	f258 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    f242:	2902      	cmp	r1, #2
    f244:	d100      	bne.n	f248 <socket+0x1c>
    f246:	e070      	b.n	f32a <socket+0xfe>
	SOCKET					sock = -1;
    f248:	2501      	movs	r5, #1
    f24a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    f24c:	0028      	movs	r0, r5
    f24e:	b009      	add	sp, #36	; 0x24
    f250:	bc0c      	pop	{r2, r3}
    f252:	4690      	mov	r8, r2
    f254:	469a      	mov	sl, r3
    f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    f258:	4c49      	ldr	r4, [pc, #292]	; (f380 <socket+0x154>)
    f25a:	7827      	ldrb	r7, [r4, #0]
    f25c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f25e:	7826      	ldrb	r6, [r4, #0]
    f260:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f262:	7820      	ldrb	r0, [r4, #0]
    f264:	3001      	adds	r0, #1
    f266:	3106      	adds	r1, #6
    f268:	4b46      	ldr	r3, [pc, #280]	; (f384 <socket+0x158>)
    f26a:	4798      	blx	r3
    f26c:	b2c9      	uxtb	r1, r1
    f26e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    f270:	0132      	lsls	r2, r6, #4
    f272:	4b45      	ldr	r3, [pc, #276]	; (f388 <socket+0x15c>)
    f274:	189b      	adds	r3, r3, r2
    f276:	7a9b      	ldrb	r3, [r3, #10]
    f278:	2506      	movs	r5, #6
    f27a:	2b00      	cmp	r3, #0
    f27c:	d018      	beq.n	f2b0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    f27e:	4e40      	ldr	r6, [pc, #256]	; (f380 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f280:	4b40      	ldr	r3, [pc, #256]	; (f384 <socket+0x158>)
    f282:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    f284:	4b40      	ldr	r3, [pc, #256]	; (f388 <socket+0x15c>)
    f286:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    f288:	7837      	ldrb	r7, [r6, #0]
    f28a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f28c:	7834      	ldrb	r4, [r6, #0]
    f28e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f290:	7830      	ldrb	r0, [r6, #0]
    f292:	3001      	adds	r0, #1
    f294:	2107      	movs	r1, #7
    f296:	47d0      	blx	sl
    f298:	b2c9      	uxtb	r1, r1
    f29a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    f29c:	0123      	lsls	r3, r4, #4
    f29e:	4443      	add	r3, r8
    f2a0:	7a9b      	ldrb	r3, [r3, #10]
    f2a2:	2b00      	cmp	r3, #0
    f2a4:	d007      	beq.n	f2b6 <socket+0x8a>
    f2a6:	3d01      	subs	r5, #1
    f2a8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    f2aa:	2d00      	cmp	r5, #0
    f2ac:	d1ec      	bne.n	f288 <socket+0x5c>
    f2ae:	e7cb      	b.n	f248 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f2b0:	4b35      	ldr	r3, [pc, #212]	; (f388 <socket+0x15c>)
    f2b2:	18d4      	adds	r4, r2, r3
    f2b4:	e002      	b.n	f2bc <socket+0x90>
    f2b6:	0124      	lsls	r4, r4, #4
    f2b8:	4b33      	ldr	r3, [pc, #204]	; (f388 <socket+0x15c>)
    f2ba:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    f2bc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    f2be:	2d00      	cmp	r5, #0
    f2c0:	dbc4      	blt.n	f24c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    f2c2:	2210      	movs	r2, #16
    f2c4:	2100      	movs	r1, #0
    f2c6:	0020      	movs	r0, r4
    f2c8:	4b30      	ldr	r3, [pc, #192]	; (f38c <socket+0x160>)
    f2ca:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    f2cc:	2301      	movs	r3, #1
    f2ce:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    f2d0:	4a2f      	ldr	r2, [pc, #188]	; (f390 <socket+0x164>)
    f2d2:	8813      	ldrh	r3, [r2, #0]
    f2d4:	3301      	adds	r3, #1
    f2d6:	b29b      	uxth	r3, r3
    f2d8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    f2da:	8813      	ldrh	r3, [r2, #0]
    f2dc:	b29b      	uxth	r3, r3
    f2de:	2b00      	cmp	r3, #0
    f2e0:	d103      	bne.n	f2ea <socket+0xbe>
				++gu16SessionID;
    f2e2:	8813      	ldrh	r3, [r2, #0]
    f2e4:	3301      	adds	r3, #1
    f2e6:	b29b      	uxth	r3, r3
    f2e8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    f2ea:	4e29      	ldr	r6, [pc, #164]	; (f390 <socket+0x164>)
    f2ec:	8833      	ldrh	r3, [r6, #0]
    f2ee:	b29b      	uxth	r3, r3
    f2f0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    f2f2:	4828      	ldr	r0, [pc, #160]	; (f394 <socket+0x168>)
    f2f4:	4f28      	ldr	r7, [pc, #160]	; (f398 <socket+0x16c>)
    f2f6:	47b8      	blx	r7
    f2f8:	8832      	ldrh	r2, [r6, #0]
    f2fa:	b292      	uxth	r2, r2
    f2fc:	0029      	movs	r1, r5
    f2fe:	4827      	ldr	r0, [pc, #156]	; (f39c <socket+0x170>)
    f300:	47b8      	blx	r7
    f302:	200d      	movs	r0, #13
    f304:	4b26      	ldr	r3, [pc, #152]	; (f3a0 <socket+0x174>)
    f306:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    f308:	9b05      	ldr	r3, [sp, #20]
    f30a:	07db      	lsls	r3, r3, #31
    f30c:	d59e      	bpl.n	f24c <socket+0x20>
				strSSLCreate.sslSock = sock;
    f30e:	aa07      	add	r2, sp, #28
    f310:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    f312:	2321      	movs	r3, #33	; 0x21
    f314:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    f316:	2300      	movs	r3, #0
    f318:	9302      	str	r3, [sp, #8]
    f31a:	9301      	str	r3, [sp, #4]
    f31c:	9300      	str	r3, [sp, #0]
    f31e:	3304      	adds	r3, #4
    f320:	2150      	movs	r1, #80	; 0x50
    f322:	2002      	movs	r0, #2
    f324:	4c1f      	ldr	r4, [pc, #124]	; (f3a4 <socket+0x178>)
    f326:	47a0      	blx	r4
    f328:	e790      	b.n	f24c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    f32a:	4b1f      	ldr	r3, [pc, #124]	; (f3a8 <socket+0x17c>)
    f32c:	781d      	ldrb	r5, [r3, #0]
    f32e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f330:	781c      	ldrb	r4, [r3, #0]
    f332:	0124      	lsls	r4, r4, #4
    f334:	4a1d      	ldr	r2, [pc, #116]	; (f3ac <socket+0x180>)
    f336:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f338:	7819      	ldrb	r1, [r3, #0]
    f33a:	3101      	adds	r1, #1
    f33c:	2203      	movs	r2, #3
    f33e:	400a      	ands	r2, r1
    f340:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    f342:	7aa3      	ldrb	r3, [r4, #10]
    f344:	2b00      	cmp	r3, #0
    f346:	d014      	beq.n	f372 <socket+0x146>
    f348:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    f34a:	4917      	ldr	r1, [pc, #92]	; (f3a8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f34c:	4f17      	ldr	r7, [pc, #92]	; (f3ac <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f34e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    f350:	780d      	ldrb	r5, [r1, #0]
    f352:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f354:	780c      	ldrb	r4, [r1, #0]
    f356:	0124      	lsls	r4, r4, #4
    f358:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f35a:	780b      	ldrb	r3, [r1, #0]
    f35c:	3301      	adds	r3, #1
    f35e:	4003      	ands	r3, r0
    f360:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    f362:	7aa3      	ldrb	r3, [r4, #10]
    f364:	2b00      	cmp	r3, #0
    f366:	d004      	beq.n	f372 <socket+0x146>
    f368:	3a01      	subs	r2, #1
    f36a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    f36c:	2a00      	cmp	r2, #0
    f36e:	d1ef      	bne.n	f350 <socket+0x124>
    f370:	e76a      	b.n	f248 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    f372:	3507      	adds	r5, #7
    f374:	b26d      	sxtb	r5, r5
					break;
    f376:	e7a2      	b.n	f2be <socket+0x92>
	SOCKET					sock = -1;
    f378:	2501      	movs	r5, #1
    f37a:	426d      	negs	r5, r5
    f37c:	e766      	b.n	f24c <socket+0x20>
    f37e:	46c0      	nop			; (mov r8, r8)
    f380:	200003d4 	.word	0x200003d4
    f384:	000172c1 	.word	0x000172c1
    f388:	200013ac 	.word	0x200013ac
    f38c:	0000c9f5 	.word	0x0000c9f5
    f390:	200003d2 	.word	0x200003d2
    f394:	000190e0 	.word	0x000190e0
    f398:	00017535 	.word	0x00017535
    f39c:	00019b70 	.word	0x00019b70
    f3a0:	00017569 	.word	0x00017569
    f3a4:	0000cb09 	.word	0x0000cb09
    f3a8:	200003d5 	.word	0x200003d5
    f3ac:	2000141c 	.word	0x2000141c

0000f3b0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    f3b0:	b570      	push	{r4, r5, r6, lr}
    f3b2:	b088      	sub	sp, #32
    f3b4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    f3b6:	db30      	blt.n	f41a <connect+0x6a>
    f3b8:	2900      	cmp	r1, #0
    f3ba:	d031      	beq.n	f420 <connect+0x70>
    f3bc:	0100      	lsls	r0, r0, #4
    f3be:	4b1d      	ldr	r3, [pc, #116]	; (f434 <connect+0x84>)
    f3c0:	181b      	adds	r3, r3, r0
    f3c2:	7a9b      	ldrb	r3, [r3, #10]
    f3c4:	2b01      	cmp	r3, #1
    f3c6:	d12e      	bne.n	f426 <connect+0x76>
    f3c8:	2a00      	cmp	r2, #0
    f3ca:	d02f      	beq.n	f42c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f3cc:	4b19      	ldr	r3, [pc, #100]	; (f434 <connect+0x84>)
    f3ce:	181b      	adds	r3, r3, r0
    f3d0:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    f3d2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f3d4:	07db      	lsls	r3, r3, #31
    f3d6:	d505      	bpl.n	f3e4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    f3d8:	4b16      	ldr	r3, [pc, #88]	; (f434 <connect+0x84>)
    f3da:	181b      	adds	r3, r3, r0
    f3dc:	7ada      	ldrb	r2, [r3, #11]
    f3de:	ab05      	add	r3, sp, #20
    f3e0:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    f3e2:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    f3e4:	ad05      	add	r5, sp, #20
    f3e6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    f3e8:	2208      	movs	r2, #8
    f3ea:	0028      	movs	r0, r5
    f3ec:	4b12      	ldr	r3, [pc, #72]	; (f438 <connect+0x88>)
    f3ee:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    f3f0:	0124      	lsls	r4, r4, #4
    f3f2:	4b10      	ldr	r3, [pc, #64]	; (f434 <connect+0x84>)
    f3f4:	191c      	adds	r4, r3, r4
    f3f6:	88e3      	ldrh	r3, [r4, #6]
    f3f8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    f3fa:	2300      	movs	r3, #0
    f3fc:	9302      	str	r3, [sp, #8]
    f3fe:	9301      	str	r3, [sp, #4]
    f400:	9300      	str	r3, [sp, #0]
    f402:	330c      	adds	r3, #12
    f404:	002a      	movs	r2, r5
    f406:	0031      	movs	r1, r6
    f408:	2002      	movs	r0, #2
    f40a:	4c0c      	ldr	r4, [pc, #48]	; (f43c <connect+0x8c>)
    f40c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f40e:	2800      	cmp	r0, #0
    f410:	d001      	beq.n	f416 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    f412:	2009      	movs	r0, #9
    f414:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    f416:	b008      	add	sp, #32
    f418:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f41a:	2006      	movs	r0, #6
    f41c:	4240      	negs	r0, r0
    f41e:	e7fa      	b.n	f416 <connect+0x66>
    f420:	2006      	movs	r0, #6
    f422:	4240      	negs	r0, r0
    f424:	e7f7      	b.n	f416 <connect+0x66>
    f426:	2006      	movs	r0, #6
    f428:	4240      	negs	r0, r0
    f42a:	e7f4      	b.n	f416 <connect+0x66>
    f42c:	2006      	movs	r0, #6
    f42e:	4240      	negs	r0, r0
    f430:	e7f1      	b.n	f416 <connect+0x66>
    f432:	46c0      	nop			; (mov r8, r8)
    f434:	200013ac 	.word	0x200013ac
    f438:	0000c9e1 	.word	0x0000c9e1
    f43c:	0000cb09 	.word	0x0000cb09

0000f440 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    f440:	b530      	push	{r4, r5, lr}
    f442:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    f444:	2800      	cmp	r0, #0
    f446:	db36      	blt.n	f4b6 <send+0x76>
    f448:	2900      	cmp	r1, #0
    f44a:	d037      	beq.n	f4bc <send+0x7c>
    f44c:	23af      	movs	r3, #175	; 0xaf
    f44e:	00db      	lsls	r3, r3, #3
    f450:	429a      	cmp	r2, r3
    f452:	d836      	bhi.n	f4c2 <send+0x82>
    f454:	0104      	lsls	r4, r0, #4
    f456:	4b1e      	ldr	r3, [pc, #120]	; (f4d0 <send+0x90>)
    f458:	191b      	adds	r3, r3, r4
    f45a:	7a9b      	ldrb	r3, [r3, #10]
    f45c:	2b01      	cmp	r3, #1
    f45e:	d133      	bne.n	f4c8 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    f460:	ab04      	add	r3, sp, #16
    f462:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    f464:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    f466:	0025      	movs	r5, r4
    f468:	4c19      	ldr	r4, [pc, #100]	; (f4d0 <send+0x90>)
    f46a:	1964      	adds	r4, r4, r5
    f46c:	88e4      	ldrh	r4, [r4, #6]
    f46e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    f470:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    f472:	2806      	cmp	r0, #6
    f474:	dd00      	ble.n	f478 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    f476:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f478:	0104      	lsls	r4, r0, #4
    f47a:	4b15      	ldr	r3, [pc, #84]	; (f4d0 <send+0x90>)
    f47c:	191b      	adds	r3, r3, r4
    f47e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    f480:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f482:	07e4      	lsls	r4, r4, #31
    f484:	d505      	bpl.n	f492 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    f486:	0100      	lsls	r0, r0, #4
    f488:	4b11      	ldr	r3, [pc, #68]	; (f4d0 <send+0x90>)
    f48a:	1818      	adds	r0, r3, r0
    f48c:	8905      	ldrh	r5, [r0, #8]
    f48e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    f490:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    f492:	2080      	movs	r0, #128	; 0x80
    f494:	4318      	orrs	r0, r3
    f496:	9502      	str	r5, [sp, #8]
    f498:	9201      	str	r2, [sp, #4]
    f49a:	9100      	str	r1, [sp, #0]
    f49c:	2310      	movs	r3, #16
    f49e:	aa04      	add	r2, sp, #16
    f4a0:	0001      	movs	r1, r0
    f4a2:	2002      	movs	r0, #2
    f4a4:	4c0b      	ldr	r4, [pc, #44]	; (f4d4 <send+0x94>)
    f4a6:	47a0      	blx	r4
    f4a8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    f4aa:	2800      	cmp	r0, #0
    f4ac:	d000      	beq.n	f4b0 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    f4ae:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    f4b0:	0018      	movs	r0, r3
    f4b2:	b009      	add	sp, #36	; 0x24
    f4b4:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f4b6:	2306      	movs	r3, #6
    f4b8:	425b      	negs	r3, r3
    f4ba:	e7f9      	b.n	f4b0 <send+0x70>
    f4bc:	2306      	movs	r3, #6
    f4be:	425b      	negs	r3, r3
    f4c0:	e7f6      	b.n	f4b0 <send+0x70>
    f4c2:	2306      	movs	r3, #6
    f4c4:	425b      	negs	r3, r3
    f4c6:	e7f3      	b.n	f4b0 <send+0x70>
    f4c8:	2306      	movs	r3, #6
    f4ca:	425b      	negs	r3, r3
    f4cc:	e7f0      	b.n	f4b0 <send+0x70>
    f4ce:	46c0      	nop			; (mov r8, r8)
    f4d0:	200013ac 	.word	0x200013ac
    f4d4:	0000cb09 	.word	0x0000cb09

0000f4d8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    f4d8:	b530      	push	{r4, r5, lr}
    f4da:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    f4dc:	2800      	cmp	r0, #0
    f4de:	db34      	blt.n	f54a <recv+0x72>
    f4e0:	2900      	cmp	r1, #0
    f4e2:	d035      	beq.n	f550 <recv+0x78>
    f4e4:	2a00      	cmp	r2, #0
    f4e6:	d036      	beq.n	f556 <recv+0x7e>
    f4e8:	0105      	lsls	r5, r0, #4
    f4ea:	4c1e      	ldr	r4, [pc, #120]	; (f564 <recv+0x8c>)
    f4ec:	1964      	adds	r4, r4, r5
    f4ee:	7aa4      	ldrb	r4, [r4, #10]
    f4f0:	2c01      	cmp	r4, #1
    f4f2:	d133      	bne.n	f55c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    f4f4:	4c1b      	ldr	r4, [pc, #108]	; (f564 <recv+0x8c>)
    f4f6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    f4f8:	1964      	adds	r4, r4, r5
    f4fa:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    f4fc:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    f4fe:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    f500:	2900      	cmp	r1, #0
    f502:	d11d      	bne.n	f540 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    f504:	2101      	movs	r1, #1
    f506:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f508:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    f50a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f50c:	07d2      	lsls	r2, r2, #31
    f50e:	d500      	bpl.n	f512 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    f510:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    f512:	2b00      	cmp	r3, #0
    f514:	d117      	bne.n	f546 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    f516:	3b01      	subs	r3, #1
    f518:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    f51a:	aa04      	add	r2, sp, #16
    f51c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    f51e:	0100      	lsls	r0, r0, #4
    f520:	4b10      	ldr	r3, [pc, #64]	; (f564 <recv+0x8c>)
    f522:	1818      	adds	r0, r3, r0
    f524:	88c3      	ldrh	r3, [r0, #6]
    f526:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    f528:	2300      	movs	r3, #0
    f52a:	9302      	str	r3, [sp, #8]
    f52c:	9301      	str	r3, [sp, #4]
    f52e:	9300      	str	r3, [sp, #0]
    f530:	3308      	adds	r3, #8
    f532:	2002      	movs	r0, #2
    f534:	4c0c      	ldr	r4, [pc, #48]	; (f568 <recv+0x90>)
    f536:	47a0      	blx	r4
    f538:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    f53a:	2800      	cmp	r0, #0
    f53c:	d000      	beq.n	f540 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    f53e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    f540:	0010      	movs	r0, r2
    f542:	b007      	add	sp, #28
    f544:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    f546:	9304      	str	r3, [sp, #16]
    f548:	e7e7      	b.n	f51a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f54a:	2206      	movs	r2, #6
    f54c:	4252      	negs	r2, r2
    f54e:	e7f7      	b.n	f540 <recv+0x68>
    f550:	2206      	movs	r2, #6
    f552:	4252      	negs	r2, r2
    f554:	e7f4      	b.n	f540 <recv+0x68>
    f556:	2206      	movs	r2, #6
    f558:	4252      	negs	r2, r2
    f55a:	e7f1      	b.n	f540 <recv+0x68>
    f55c:	2206      	movs	r2, #6
    f55e:	4252      	negs	r2, r2
    f560:	e7ee      	b.n	f540 <recv+0x68>
    f562:	46c0      	nop			; (mov r8, r8)
    f564:	200013ac 	.word	0x200013ac
    f568:	0000cb09 	.word	0x0000cb09

0000f56c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    f56c:	b530      	push	{r4, r5, lr}
    f56e:	b087      	sub	sp, #28
    f570:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    f572:	481e      	ldr	r0, [pc, #120]	; (f5ec <close+0x80>)
    f574:	4d1e      	ldr	r5, [pc, #120]	; (f5f0 <close+0x84>)
    f576:	47a8      	blx	r5
    f578:	0021      	movs	r1, r4
    f57a:	481e      	ldr	r0, [pc, #120]	; (f5f4 <close+0x88>)
    f57c:	47a8      	blx	r5
    f57e:	200d      	movs	r0, #13
    f580:	4b1d      	ldr	r3, [pc, #116]	; (f5f8 <close+0x8c>)
    f582:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    f584:	2c00      	cmp	r4, #0
    f586:	db2a      	blt.n	f5de <close+0x72>
    f588:	0122      	lsls	r2, r4, #4
    f58a:	4b1c      	ldr	r3, [pc, #112]	; (f5fc <close+0x90>)
    f58c:	189b      	adds	r3, r3, r2
    f58e:	7a9b      	ldrb	r3, [r3, #10]
    f590:	2b01      	cmp	r3, #1
    f592:	d127      	bne.n	f5e4 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    f594:	a905      	add	r1, sp, #20
    f596:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    f598:	4b18      	ldr	r3, [pc, #96]	; (f5fc <close+0x90>)
    f59a:	189b      	adds	r3, r3, r2
    f59c:	88da      	ldrh	r2, [r3, #6]
    f59e:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    f5a0:	2200      	movs	r2, #0
    f5a2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    f5a4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f5a6:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    f5a8:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f5aa:	07db      	lsls	r3, r3, #31
    f5ac:	d500      	bpl.n	f5b0 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    f5ae:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    f5b0:	2300      	movs	r3, #0
    f5b2:	9302      	str	r3, [sp, #8]
    f5b4:	9301      	str	r3, [sp, #4]
    f5b6:	9300      	str	r3, [sp, #0]
    f5b8:	3304      	adds	r3, #4
    f5ba:	aa05      	add	r2, sp, #20
    f5bc:	2002      	movs	r0, #2
    f5be:	4d10      	ldr	r5, [pc, #64]	; (f600 <close+0x94>)
    f5c0:	47a8      	blx	r5
    f5c2:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f5c4:	d001      	beq.n	f5ca <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    f5c6:	2509      	movs	r5, #9
    f5c8:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    f5ca:	0124      	lsls	r4, r4, #4
    f5cc:	480b      	ldr	r0, [pc, #44]	; (f5fc <close+0x90>)
    f5ce:	1820      	adds	r0, r4, r0
    f5d0:	2210      	movs	r2, #16
    f5d2:	2100      	movs	r1, #0
    f5d4:	4b0b      	ldr	r3, [pc, #44]	; (f604 <close+0x98>)
    f5d6:	4798      	blx	r3
	}
	return s8Ret;
}
    f5d8:	0028      	movs	r0, r5
    f5da:	b007      	add	sp, #28
    f5dc:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f5de:	2506      	movs	r5, #6
    f5e0:	426d      	negs	r5, r5
    f5e2:	e7f9      	b.n	f5d8 <close+0x6c>
    f5e4:	2506      	movs	r5, #6
    f5e6:	426d      	negs	r5, r5
    f5e8:	e7f6      	b.n	f5d8 <close+0x6c>
    f5ea:	46c0      	nop			; (mov r8, r8)
    f5ec:	000190e0 	.word	0x000190e0
    f5f0:	00017535 	.word	0x00017535
    f5f4:	00019b58 	.word	0x00019b58
    f5f8:	00017569 	.word	0x00017569
    f5fc:	200013ac 	.word	0x200013ac
    f600:	0000cb09 	.word	0x0000cb09
    f604:	0000c9f5 	.word	0x0000c9f5

0000f608 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    f608:	b570      	push	{r4, r5, r6, lr}
    f60a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    f60c:	2300      	movs	r3, #0
    f60e:	9301      	str	r3, [sp, #4]
    f610:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    f612:	2100      	movs	r1, #0
    f614:	7802      	ldrb	r2, [r0, #0]
    f616:	1c44      	adds	r4, r0, #1
    f618:	3005      	adds	r0, #5
    f61a:	000b      	movs	r3, r1
    f61c:	e009      	b.n	f632 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    f61e:	009d      	lsls	r5, r3, #2
    f620:	195b      	adds	r3, r3, r5
    f622:	005b      	lsls	r3, r3, #1
    f624:	189b      	adds	r3, r3, r2
    f626:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    f628:	0022      	movs	r2, r4
    f62a:	3401      	adds	r4, #1
			if(j > 4)
    f62c:	42a0      	cmp	r0, r4
    f62e:	d00a      	beq.n	f646 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    f630:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    f632:	2a2e      	cmp	r2, #46	; 0x2e
    f634:	d00a      	beq.n	f64c <nmi_inet_addr+0x44>
    f636:	2a00      	cmp	r2, #0
    f638:	d00c      	beq.n	f654 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    f63a:	3a30      	subs	r2, #48	; 0x30
    f63c:	b2d2      	uxtb	r2, r2
    f63e:	2a09      	cmp	r2, #9
    f640:	d9ed      	bls.n	f61e <nmi_inet_addr+0x16>
				return 0;
    f642:	2000      	movs	r0, #0
    f644:	e000      	b.n	f648 <nmi_inet_addr+0x40>
				return 0;
    f646:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    f648:	b002      	add	sp, #8
    f64a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    f64c:	466a      	mov	r2, sp
    f64e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f650:	0020      	movs	r0, r4
    f652:	e002      	b.n	f65a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    f654:	466a      	mov	r2, sp
    f656:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f658:	0020      	movs	r0, r4
    f65a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    f65c:	2e04      	cmp	r6, #4
    f65e:	d1d9      	bne.n	f614 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    f660:	2204      	movs	r2, #4
    f662:	4669      	mov	r1, sp
    f664:	a801      	add	r0, sp, #4
    f666:	4b02      	ldr	r3, [pc, #8]	; (f670 <nmi_inet_addr+0x68>)
    f668:	4798      	blx	r3
	return u32IP;
    f66a:	9801      	ldr	r0, [sp, #4]
    f66c:	e7ec      	b.n	f648 <nmi_inet_addr+0x40>
    f66e:	46c0      	nop			; (mov r8, r8)
    f670:	0000c9e1 	.word	0x0000c9e1

0000f674 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    f674:	b510      	push	{r4, lr}
    f676:	b084      	sub	sp, #16
    f678:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    f67a:	4b0b      	ldr	r3, [pc, #44]	; (f6a8 <gethostbyname+0x34>)
    f67c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    f67e:	b2c3      	uxtb	r3, r0
    f680:	2b40      	cmp	r3, #64	; 0x40
    f682:	d80d      	bhi.n	f6a0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    f684:	23ff      	movs	r3, #255	; 0xff
    f686:	4003      	ands	r3, r0
    f688:	3301      	adds	r3, #1
    f68a:	2200      	movs	r2, #0
    f68c:	9202      	str	r2, [sp, #8]
    f68e:	9201      	str	r2, [sp, #4]
    f690:	9200      	str	r2, [sp, #0]
    f692:	0022      	movs	r2, r4
    f694:	214a      	movs	r1, #74	; 0x4a
    f696:	2002      	movs	r0, #2
    f698:	4c04      	ldr	r4, [pc, #16]	; (f6ac <gethostbyname+0x38>)
    f69a:	47a0      	blx	r4
	}
	return s8Err;
}
    f69c:	b004      	add	sp, #16
    f69e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    f6a0:	2006      	movs	r0, #6
    f6a2:	4240      	negs	r0, r0
    f6a4:	e7fa      	b.n	f69c <gethostbyname+0x28>
    f6a6:	46c0      	nop			; (mov r8, r8)
    f6a8:	0000ca05 	.word	0x0000ca05
    f6ac:	0000cb09 	.word	0x0000cb09

0000f6b0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    f6b0:	b570      	push	{r4, r5, r6, lr}
    f6b2:	b082      	sub	sp, #8
    f6b4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f6b6:	4b2a      	ldr	r3, [pc, #168]	; (f760 <spi_flash_enable+0xb0>)
    f6b8:	4798      	blx	r3
    f6ba:	0500      	lsls	r0, r0, #20
    f6bc:	0d00      	lsrs	r0, r0, #20
    f6be:	4b29      	ldr	r3, [pc, #164]	; (f764 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    f6c0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f6c2:	4298      	cmp	r0, r3
    f6c4:	d802      	bhi.n	f6cc <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    f6c6:	0028      	movs	r0, r5
    f6c8:	b002      	add	sp, #8
    f6ca:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    f6cc:	a901      	add	r1, sp, #4
    f6ce:	4826      	ldr	r0, [pc, #152]	; (f768 <spi_flash_enable+0xb8>)
    f6d0:	4b26      	ldr	r3, [pc, #152]	; (f76c <spi_flash_enable+0xbc>)
    f6d2:	4798      	blx	r3
    f6d4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    f6d6:	d1f6      	bne.n	f6c6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    f6d8:	4b25      	ldr	r3, [pc, #148]	; (f770 <spi_flash_enable+0xc0>)
    f6da:	9a01      	ldr	r2, [sp, #4]
    f6dc:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    f6de:	4925      	ldr	r1, [pc, #148]	; (f774 <spi_flash_enable+0xc4>)
    f6e0:	4319      	orrs	r1, r3
    f6e2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f6e4:	4820      	ldr	r0, [pc, #128]	; (f768 <spi_flash_enable+0xb8>)
    f6e6:	4b24      	ldr	r3, [pc, #144]	; (f778 <spi_flash_enable+0xc8>)
    f6e8:	4798      	blx	r3
		if(enable) {
    f6ea:	2c00      	cmp	r4, #0
    f6ec:	d020      	beq.n	f730 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f6ee:	2100      	movs	r1, #0
    f6f0:	4822      	ldr	r0, [pc, #136]	; (f77c <spi_flash_enable+0xcc>)
    f6f2:	4c21      	ldr	r4, [pc, #132]	; (f778 <spi_flash_enable+0xc8>)
    f6f4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f6f6:	21ab      	movs	r1, #171	; 0xab
    f6f8:	4821      	ldr	r0, [pc, #132]	; (f780 <spi_flash_enable+0xd0>)
    f6fa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f6fc:	2101      	movs	r1, #1
    f6fe:	4821      	ldr	r0, [pc, #132]	; (f784 <spi_flash_enable+0xd4>)
    f700:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f702:	2100      	movs	r1, #0
    f704:	4820      	ldr	r0, [pc, #128]	; (f788 <spi_flash_enable+0xd8>)
    f706:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    f708:	2181      	movs	r1, #129	; 0x81
    f70a:	4820      	ldr	r0, [pc, #128]	; (f78c <spi_flash_enable+0xdc>)
    f70c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f70e:	4e20      	ldr	r6, [pc, #128]	; (f790 <spi_flash_enable+0xe0>)
    f710:	4c20      	ldr	r4, [pc, #128]	; (f794 <spi_flash_enable+0xe4>)
    f712:	0030      	movs	r0, r6
    f714:	47a0      	blx	r4
    f716:	2801      	cmp	r0, #1
    f718:	d1fb      	bne.n	f712 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    f71a:	4b15      	ldr	r3, [pc, #84]	; (f770 <spi_flash_enable+0xc0>)
    f71c:	9a01      	ldr	r2, [sp, #4]
    f71e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    f720:	2180      	movs	r1, #128	; 0x80
    f722:	0249      	lsls	r1, r1, #9
    f724:	4319      	orrs	r1, r3
    f726:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f728:	480f      	ldr	r0, [pc, #60]	; (f768 <spi_flash_enable+0xb8>)
    f72a:	4b13      	ldr	r3, [pc, #76]	; (f778 <spi_flash_enable+0xc8>)
    f72c:	4798      	blx	r3
    f72e:	e7ca      	b.n	f6c6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f730:	2100      	movs	r1, #0
    f732:	4812      	ldr	r0, [pc, #72]	; (f77c <spi_flash_enable+0xcc>)
    f734:	4c10      	ldr	r4, [pc, #64]	; (f778 <spi_flash_enable+0xc8>)
    f736:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f738:	21b9      	movs	r1, #185	; 0xb9
    f73a:	4811      	ldr	r0, [pc, #68]	; (f780 <spi_flash_enable+0xd0>)
    f73c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f73e:	2101      	movs	r1, #1
    f740:	4810      	ldr	r0, [pc, #64]	; (f784 <spi_flash_enable+0xd4>)
    f742:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f744:	2100      	movs	r1, #0
    f746:	4810      	ldr	r0, [pc, #64]	; (f788 <spi_flash_enable+0xd8>)
    f748:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    f74a:	2181      	movs	r1, #129	; 0x81
    f74c:	480f      	ldr	r0, [pc, #60]	; (f78c <spi_flash_enable+0xdc>)
    f74e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f750:	4e0f      	ldr	r6, [pc, #60]	; (f790 <spi_flash_enable+0xe0>)
    f752:	4c10      	ldr	r4, [pc, #64]	; (f794 <spi_flash_enable+0xe4>)
    f754:	0030      	movs	r0, r6
    f756:	47a0      	blx	r4
    f758:	2801      	cmp	r0, #1
    f75a:	d1fb      	bne.n	f754 <spi_flash_enable+0xa4>
    f75c:	e7dd      	b.n	f71a <spi_flash_enable+0x6a>
    f75e:	46c0      	nop			; (mov r8, r8)
    f760:	0000d9f5 	.word	0x0000d9f5
    f764:	0000039f 	.word	0x0000039f
    f768:	00001410 	.word	0x00001410
    f76c:	0000de45 	.word	0x0000de45
    f770:	f8888fff 	.word	0xf8888fff
    f774:	01111000 	.word	0x01111000
    f778:	0000de51 	.word	0x0000de51
    f77c:	00010208 	.word	0x00010208
    f780:	0001020c 	.word	0x0001020c
    f784:	00010214 	.word	0x00010214
    f788:	0001021c 	.word	0x0001021c
    f78c:	00010204 	.word	0x00010204
    f790:	00010218 	.word	0x00010218
    f794:	0000de39 	.word	0x0000de39

0000f798 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    f798:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f79a:	2301      	movs	r3, #1
    f79c:	2800      	cmp	r0, #0
    f79e:	d001      	beq.n	f7a4 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f7a0:	0018      	movs	r0, r3
    f7a2:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f7a4:	4b01      	ldr	r3, [pc, #4]	; (f7ac <mem_test_unit_ready+0x14>)
    f7a6:	4798      	blx	r3
    f7a8:	0003      	movs	r3, r0
    f7aa:	e7f9      	b.n	f7a0 <mem_test_unit_ready+0x8>
    f7ac:	0000bd61 	.word	0x0000bd61

0000f7b0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    f7b0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f7b2:	2301      	movs	r3, #1
    f7b4:	2800      	cmp	r0, #0
    f7b6:	d001      	beq.n	f7bc <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f7b8:	0018      	movs	r0, r3
    f7ba:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f7bc:	0008      	movs	r0, r1
    f7be:	4b02      	ldr	r3, [pc, #8]	; (f7c8 <mem_read_capacity+0x18>)
    f7c0:	4798      	blx	r3
    f7c2:	0003      	movs	r3, r0
    f7c4:	e7f8      	b.n	f7b8 <mem_read_capacity+0x8>
    f7c6:	46c0      	nop			; (mov r8, r8)
    f7c8:	0000bd91 	.word	0x0000bd91

0000f7cc <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    f7cc:	4243      	negs	r3, r0
    f7ce:	4158      	adcs	r0, r3
    f7d0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    f7d2:	4770      	bx	lr

0000f7d4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    f7d4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f7d6:	2301      	movs	r3, #1
    f7d8:	2800      	cmp	r0, #0
    f7da:	d001      	beq.n	f7e0 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    f7dc:	0018      	movs	r0, r3
    f7de:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f7e0:	4b01      	ldr	r3, [pc, #4]	; (f7e8 <mem_wr_protect+0x14>)
    f7e2:	4798      	blx	r3
    f7e4:	0003      	movs	r3, r0
    f7e6:	e7f9      	b.n	f7dc <mem_wr_protect+0x8>
    f7e8:	0000bda1 	.word	0x0000bda1

0000f7ec <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    f7ec:	b510      	push	{r4, lr}
    f7ee:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f7f0:	2301      	movs	r3, #1
    f7f2:	2800      	cmp	r0, #0
    f7f4:	d001      	beq.n	f7fa <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    f7f6:	0018      	movs	r0, r3
    f7f8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f7fa:	0011      	movs	r1, r2
    f7fc:	0020      	movs	r0, r4
    f7fe:	4b02      	ldr	r3, [pc, #8]	; (f808 <memory_2_ram+0x1c>)
    f800:	4798      	blx	r3
    f802:	0003      	movs	r3, r0
    f804:	e7f7      	b.n	f7f6 <memory_2_ram+0xa>
    f806:	46c0      	nop			; (mov r8, r8)
    f808:	0000bdf5 	.word	0x0000bdf5

0000f80c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    f80c:	b510      	push	{r4, lr}
    f80e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f810:	2301      	movs	r3, #1
    f812:	2800      	cmp	r0, #0
    f814:	d001      	beq.n	f81a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    f816:	0018      	movs	r0, r3
    f818:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f81a:	0011      	movs	r1, r2
    f81c:	0020      	movs	r0, r4
    f81e:	4b02      	ldr	r3, [pc, #8]	; (f828 <ram_2_memory+0x1c>)
    f820:	4798      	blx	r3
    f822:	0003      	movs	r3, r0
    f824:	e7f7      	b.n	f816 <ram_2_memory+0xa>
    f826:	46c0      	nop			; (mov r8, r8)
    f828:	0000be4d 	.word	0x0000be4d

0000f82c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    f82c:	4b0c      	ldr	r3, [pc, #48]	; (f860 <cpu_irq_enter_critical+0x34>)
    f82e:	681b      	ldr	r3, [r3, #0]
    f830:	2b00      	cmp	r3, #0
    f832:	d106      	bne.n	f842 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f834:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    f838:	2b00      	cmp	r3, #0
    f83a:	d007      	beq.n	f84c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    f83c:	2200      	movs	r2, #0
    f83e:	4b09      	ldr	r3, [pc, #36]	; (f864 <cpu_irq_enter_critical+0x38>)
    f840:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    f842:	4a07      	ldr	r2, [pc, #28]	; (f860 <cpu_irq_enter_critical+0x34>)
    f844:	6813      	ldr	r3, [r2, #0]
    f846:	3301      	adds	r3, #1
    f848:	6013      	str	r3, [r2, #0]
}
    f84a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    f84c:	b672      	cpsid	i
    f84e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    f852:	2200      	movs	r2, #0
    f854:	4b04      	ldr	r3, [pc, #16]	; (f868 <cpu_irq_enter_critical+0x3c>)
    f856:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    f858:	3201      	adds	r2, #1
    f85a:	4b02      	ldr	r3, [pc, #8]	; (f864 <cpu_irq_enter_critical+0x38>)
    f85c:	701a      	strb	r2, [r3, #0]
    f85e:	e7f0      	b.n	f842 <cpu_irq_enter_critical+0x16>
    f860:	200003d8 	.word	0x200003d8
    f864:	200003dc 	.word	0x200003dc
    f868:	2000000e 	.word	0x2000000e

0000f86c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    f86c:	4b08      	ldr	r3, [pc, #32]	; (f890 <cpu_irq_leave_critical+0x24>)
    f86e:	681a      	ldr	r2, [r3, #0]
    f870:	3a01      	subs	r2, #1
    f872:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    f874:	681b      	ldr	r3, [r3, #0]
    f876:	2b00      	cmp	r3, #0
    f878:	d109      	bne.n	f88e <cpu_irq_leave_critical+0x22>
    f87a:	4b06      	ldr	r3, [pc, #24]	; (f894 <cpu_irq_leave_critical+0x28>)
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	2b00      	cmp	r3, #0
    f880:	d005      	beq.n	f88e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    f882:	2201      	movs	r2, #1
    f884:	4b04      	ldr	r3, [pc, #16]	; (f898 <cpu_irq_leave_critical+0x2c>)
    f886:	701a      	strb	r2, [r3, #0]
    f888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f88c:	b662      	cpsie	i
	}
}
    f88e:	4770      	bx	lr
    f890:	200003d8 	.word	0x200003d8
    f894:	200003dc 	.word	0x200003dc
    f898:	2000000e 	.word	0x2000000e

0000f89c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    f89c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f89e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    f8a0:	ac01      	add	r4, sp, #4
    f8a2:	2501      	movs	r5, #1
    f8a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    f8a6:	2700      	movs	r7, #0
    f8a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f8aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    f8ac:	0021      	movs	r1, r4
    f8ae:	2017      	movs	r0, #23
    f8b0:	4e06      	ldr	r6, [pc, #24]	; (f8cc <system_board_init+0x30>)
    f8b2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    f8b4:	2280      	movs	r2, #128	; 0x80
    f8b6:	0412      	lsls	r2, r2, #16
    f8b8:	4b05      	ldr	r3, [pc, #20]	; (f8d0 <system_board_init+0x34>)
    f8ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f8bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f8be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    f8c0:	0021      	movs	r1, r4
    f8c2:	2037      	movs	r0, #55	; 0x37
    f8c4:	47b0      	blx	r6
}
    f8c6:	b003      	add	sp, #12
    f8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8ca:	46c0      	nop			; (mov r8, r8)
    f8cc:	0000faa5 	.word	0x0000faa5
    f8d0:	41004400 	.word	0x41004400

0000f8d4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f8d4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    f8d6:	2a00      	cmp	r2, #0
    f8d8:	d001      	beq.n	f8de <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    f8da:	0018      	movs	r0, r3
    f8dc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    f8de:	008b      	lsls	r3, r1, #2
    f8e0:	4a06      	ldr	r2, [pc, #24]	; (f8fc <extint_register_callback+0x28>)
    f8e2:	589b      	ldr	r3, [r3, r2]
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	d003      	beq.n	f8f0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    f8e8:	4283      	cmp	r3, r0
    f8ea:	d005      	beq.n	f8f8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    f8ec:	231d      	movs	r3, #29
    f8ee:	e7f4      	b.n	f8da <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    f8f0:	0089      	lsls	r1, r1, #2
    f8f2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    f8f4:	2300      	movs	r3, #0
    f8f6:	e7f0      	b.n	f8da <extint_register_callback+0x6>
		return STATUS_OK;
    f8f8:	2300      	movs	r3, #0
    f8fa:	e7ee      	b.n	f8da <extint_register_callback+0x6>
    f8fc:	2000146c 	.word	0x2000146c

0000f900 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f900:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f902:	2900      	cmp	r1, #0
    f904:	d001      	beq.n	f90a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    f906:	0018      	movs	r0, r3
    f908:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    f90a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    f90c:	281f      	cmp	r0, #31
    f90e:	d800      	bhi.n	f912 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    f910:	4a02      	ldr	r2, [pc, #8]	; (f91c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    f912:	2301      	movs	r3, #1
    f914:	4083      	lsls	r3, r0
    f916:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    f918:	2300      	movs	r3, #0
    f91a:	e7f4      	b.n	f906 <extint_chan_enable_callback+0x6>
    f91c:	40001800 	.word	0x40001800

0000f920 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f920:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f922:	2900      	cmp	r1, #0
    f924:	d001      	beq.n	f92a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    f926:	0018      	movs	r0, r3
    f928:	4770      	bx	lr
		return NULL;
    f92a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    f92c:	281f      	cmp	r0, #31
    f92e:	d800      	bhi.n	f932 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    f930:	4a02      	ldr	r2, [pc, #8]	; (f93c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    f932:	2301      	movs	r3, #1
    f934:	4083      	lsls	r3, r0
    f936:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    f938:	2300      	movs	r3, #0
    f93a:	e7f4      	b.n	f926 <extint_chan_disable_callback+0x6>
    f93c:	40001800 	.word	0x40001800

0000f940 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    f940:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f942:	2200      	movs	r2, #0
    f944:	4b10      	ldr	r3, [pc, #64]	; (f988 <EIC_Handler+0x48>)
    f946:	701a      	strb	r2, [r3, #0]
    f948:	2300      	movs	r3, #0
    f94a:	4910      	ldr	r1, [pc, #64]	; (f98c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    f94c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f94e:	4e10      	ldr	r6, [pc, #64]	; (f990 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f950:	4c0d      	ldr	r4, [pc, #52]	; (f988 <EIC_Handler+0x48>)
    f952:	e00a      	b.n	f96a <EIC_Handler+0x2a>
		return eics[eic_index];
    f954:	490d      	ldr	r1, [pc, #52]	; (f98c <EIC_Handler+0x4c>)
    f956:	e008      	b.n	f96a <EIC_Handler+0x2a>
    f958:	7823      	ldrb	r3, [r4, #0]
    f95a:	3301      	adds	r3, #1
    f95c:	b2db      	uxtb	r3, r3
    f95e:	7023      	strb	r3, [r4, #0]
    f960:	2b0f      	cmp	r3, #15
    f962:	d810      	bhi.n	f986 <EIC_Handler+0x46>
		return NULL;
    f964:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    f966:	2b1f      	cmp	r3, #31
    f968:	d9f4      	bls.n	f954 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    f96a:	0028      	movs	r0, r5
    f96c:	4018      	ands	r0, r3
    f96e:	2201      	movs	r2, #1
    f970:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    f972:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    f974:	4210      	tst	r0, r2
    f976:	d0ef      	beq.n	f958 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    f978:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f97a:	009b      	lsls	r3, r3, #2
    f97c:	599b      	ldr	r3, [r3, r6]
    f97e:	2b00      	cmp	r3, #0
    f980:	d0ea      	beq.n	f958 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    f982:	4798      	blx	r3
    f984:	e7e8      	b.n	f958 <EIC_Handler+0x18>
			}
		}
	}
}
    f986:	bd70      	pop	{r4, r5, r6, pc}
    f988:	20001468 	.word	0x20001468
    f98c:	40001800 	.word	0x40001800
    f990:	2000146c 	.word	0x2000146c

0000f994 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    f994:	4a04      	ldr	r2, [pc, #16]	; (f9a8 <_extint_enable+0x14>)
    f996:	7813      	ldrb	r3, [r2, #0]
    f998:	2102      	movs	r1, #2
    f99a:	430b      	orrs	r3, r1
    f99c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f99e:	7853      	ldrb	r3, [r2, #1]
    f9a0:	b25b      	sxtb	r3, r3
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	dbfb      	blt.n	f99e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    f9a6:	4770      	bx	lr
    f9a8:	40001800 	.word	0x40001800

0000f9ac <_system_extint_init>:
{
    f9ac:	b500      	push	{lr}
    f9ae:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    f9b0:	4a12      	ldr	r2, [pc, #72]	; (f9fc <_system_extint_init+0x50>)
    f9b2:	6993      	ldr	r3, [r2, #24]
    f9b4:	2140      	movs	r1, #64	; 0x40
    f9b6:	430b      	orrs	r3, r1
    f9b8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    f9ba:	a901      	add	r1, sp, #4
    f9bc:	2300      	movs	r3, #0
    f9be:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    f9c0:	2005      	movs	r0, #5
    f9c2:	4b0f      	ldr	r3, [pc, #60]	; (fa00 <_system_extint_init+0x54>)
    f9c4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    f9c6:	2005      	movs	r0, #5
    f9c8:	4b0e      	ldr	r3, [pc, #56]	; (fa04 <_system_extint_init+0x58>)
    f9ca:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    f9cc:	4a0e      	ldr	r2, [pc, #56]	; (fa08 <_system_extint_init+0x5c>)
    f9ce:	7813      	ldrb	r3, [r2, #0]
    f9d0:	2101      	movs	r1, #1
    f9d2:	430b      	orrs	r3, r1
    f9d4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f9d6:	7853      	ldrb	r3, [r2, #1]
    f9d8:	b25b      	sxtb	r3, r3
    f9da:	2b00      	cmp	r3, #0
    f9dc:	dbfb      	blt.n	f9d6 <_system_extint_init+0x2a>
    f9de:	4b0b      	ldr	r3, [pc, #44]	; (fa0c <_system_extint_init+0x60>)
    f9e0:	0019      	movs	r1, r3
    f9e2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    f9e4:	2200      	movs	r2, #0
    f9e6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    f9e8:	4299      	cmp	r1, r3
    f9ea:	d1fc      	bne.n	f9e6 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f9ec:	2210      	movs	r2, #16
    f9ee:	4b08      	ldr	r3, [pc, #32]	; (fa10 <_system_extint_init+0x64>)
    f9f0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    f9f2:	4b08      	ldr	r3, [pc, #32]	; (fa14 <_system_extint_init+0x68>)
    f9f4:	4798      	blx	r3
}
    f9f6:	b003      	add	sp, #12
    f9f8:	bd00      	pop	{pc}
    f9fa:	46c0      	nop			; (mov r8, r8)
    f9fc:	40000400 	.word	0x40000400
    fa00:	000114f9 	.word	0x000114f9
    fa04:	0001146d 	.word	0x0001146d
    fa08:	40001800 	.word	0x40001800
    fa0c:	2000146c 	.word	0x2000146c
    fa10:	e000e100 	.word	0xe000e100
    fa14:	0000f995 	.word	0x0000f995

0000fa18 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fa18:	2300      	movs	r3, #0
    fa1a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    fa1c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fa1e:	2201      	movs	r2, #1
    fa20:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    fa22:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    fa24:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fa26:	3302      	adds	r3, #2
    fa28:	72c3      	strb	r3, [r0, #11]
}
    fa2a:	4770      	bx	lr

0000fa2c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa2e:	b083      	sub	sp, #12
    fa30:	0005      	movs	r5, r0
    fa32:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fa34:	a901      	add	r1, sp, #4
    fa36:	2300      	movs	r3, #0
    fa38:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    fa3a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    fa3c:	7923      	ldrb	r3, [r4, #4]
    fa3e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    fa40:	7a23      	ldrb	r3, [r4, #8]
    fa42:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    fa44:	7820      	ldrb	r0, [r4, #0]
    fa46:	4b15      	ldr	r3, [pc, #84]	; (fa9c <extint_chan_set_config+0x70>)
    fa48:	4798      	blx	r3
		return NULL;
    fa4a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    fa4c:	2d1f      	cmp	r5, #31
    fa4e:	d800      	bhi.n	fa52 <extint_chan_set_config+0x26>
		return eics[eic_index];
    fa50:	4813      	ldr	r0, [pc, #76]	; (faa0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    fa52:	2207      	movs	r2, #7
    fa54:	402a      	ands	r2, r5
    fa56:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    fa58:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    fa5a:	7aa3      	ldrb	r3, [r4, #10]
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d001      	beq.n	fa64 <extint_chan_set_config+0x38>
    fa60:	2308      	movs	r3, #8
    fa62:	431f      	orrs	r7, r3
    fa64:	08eb      	lsrs	r3, r5, #3
    fa66:	009b      	lsls	r3, r3, #2
    fa68:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    fa6a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fa6c:	260f      	movs	r6, #15
    fa6e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    fa70:	43b1      	bics	r1, r6
			(new_config << config_pos);
    fa72:	4097      	lsls	r7, r2
    fa74:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fa76:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    fa78:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    fa7a:	7a63      	ldrb	r3, [r4, #9]
    fa7c:	2b00      	cmp	r3, #0
    fa7e:	d106      	bne.n	fa8e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    fa80:	6943      	ldr	r3, [r0, #20]
    fa82:	2201      	movs	r2, #1
    fa84:	40aa      	lsls	r2, r5
    fa86:	4393      	bics	r3, r2
    fa88:	6143      	str	r3, [r0, #20]
	}
}
    fa8a:	b003      	add	sp, #12
    fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    fa8e:	6942      	ldr	r2, [r0, #20]
    fa90:	2301      	movs	r3, #1
    fa92:	40ab      	lsls	r3, r5
    fa94:	4313      	orrs	r3, r2
    fa96:	6143      	str	r3, [r0, #20]
    fa98:	e7f7      	b.n	fa8a <extint_chan_set_config+0x5e>
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	000115f1 	.word	0x000115f1
    faa0:	40001800 	.word	0x40001800

0000faa4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    faa4:	b500      	push	{lr}
    faa6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    faa8:	ab01      	add	r3, sp, #4
    faaa:	2280      	movs	r2, #128	; 0x80
    faac:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    faae:	780a      	ldrb	r2, [r1, #0]
    fab0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    fab2:	784a      	ldrb	r2, [r1, #1]
    fab4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    fab6:	788a      	ldrb	r2, [r1, #2]
    fab8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    faba:	0019      	movs	r1, r3
    fabc:	4b01      	ldr	r3, [pc, #4]	; (fac4 <port_pin_set_config+0x20>)
    fabe:	4798      	blx	r3
}
    fac0:	b003      	add	sp, #12
    fac2:	bd00      	pop	{pc}
    fac4:	000115f1 	.word	0x000115f1

0000fac8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fac8:	6801      	ldr	r1, [r0, #0]
    faca:	2208      	movs	r2, #8
    facc:	4b05      	ldr	r3, [pc, #20]	; (fae4 <rtc_calendar_enable+0x1c>)
    face:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fad0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fad2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fad4:	b25b      	sxtb	r3, r3
    fad6:	2b00      	cmp	r3, #0
    fad8:	dbfb      	blt.n	fad2 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    fada:	880b      	ldrh	r3, [r1, #0]
    fadc:	2202      	movs	r2, #2
    fade:	4313      	orrs	r3, r2
    fae0:	800b      	strh	r3, [r1, #0]
}
    fae2:	4770      	bx	lr
    fae4:	e000e100 	.word	0xe000e100

0000fae8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    fae8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    faea:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    faec:	2408      	movs	r4, #8
    faee:	2380      	movs	r3, #128	; 0x80
    faf0:	4907      	ldr	r1, [pc, #28]	; (fb10 <rtc_calendar_disable+0x28>)
    faf2:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    faf4:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    faf6:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    faf8:	b25b      	sxtb	r3, r3
    fafa:	2b00      	cmp	r3, #0
    fafc:	dbfb      	blt.n	faf6 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    fafe:	23c1      	movs	r3, #193	; 0xc1
    fb00:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    fb02:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    fb04:	8813      	ldrh	r3, [r2, #0]
    fb06:	2102      	movs	r1, #2
    fb08:	438b      	bics	r3, r1
    fb0a:	8013      	strh	r3, [r2, #0]
}
    fb0c:	bd10      	pop	{r4, pc}
    fb0e:	46c0      	nop			; (mov r8, r8)
    fb10:	e000e100 	.word	0xe000e100

0000fb14 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    fb14:	b570      	push	{r4, r5, r6, lr}
    fb16:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fb18:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    fb1a:	4b07      	ldr	r3, [pc, #28]	; (fb38 <rtc_calendar_reset+0x24>)
    fb1c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    fb1e:	2300      	movs	r3, #0
    fb20:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    fb22:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    fb24:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fb26:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    fb28:	b25b      	sxtb	r3, r3
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	dbfb      	blt.n	fb26 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    fb2e:	882b      	ldrh	r3, [r5, #0]
    fb30:	2201      	movs	r2, #1
    fb32:	4313      	orrs	r3, r2
    fb34:	802b      	strh	r3, [r5, #0]
}
    fb36:	bd70      	pop	{r4, r5, r6, pc}
    fb38:	0000fae9 	.word	0x0000fae9

0000fb3c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    fb3c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    fb3e:	88cb      	ldrh	r3, [r1, #6]
    fb40:	88c2      	ldrh	r2, [r0, #6]
    fb42:	1a9a      	subs	r2, r3, r2
    fb44:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    fb46:	794b      	ldrb	r3, [r1, #5]
    fb48:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    fb4a:	790c      	ldrb	r4, [r1, #4]
    fb4c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    fb4e:	4323      	orrs	r3, r4
    fb50:	788c      	ldrb	r4, [r1, #2]
    fb52:	0324      	lsls	r4, r4, #12
    fb54:	4323      	orrs	r3, r4
    fb56:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    fb58:	7902      	ldrb	r2, [r0, #4]
    fb5a:	2a00      	cmp	r2, #0
    fb5c:	d105      	bne.n	fb6a <rtc_calendar_time_to_register_value+0x2e>
    fb5e:	78ca      	ldrb	r2, [r1, #3]
    fb60:	2a00      	cmp	r2, #0
    fb62:	d002      	beq.n	fb6a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    fb64:	2280      	movs	r2, #128	; 0x80
    fb66:	0252      	lsls	r2, r2, #9
    fb68:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    fb6a:	7848      	ldrb	r0, [r1, #1]
    fb6c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    fb6e:	780a      	ldrb	r2, [r1, #0]
    fb70:	4310      	orrs	r0, r2
    fb72:	4318      	orrs	r0, r3

	return register_value;
}
    fb74:	bd10      	pop	{r4, pc}

0000fb76 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    fb76:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fb78:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    fb7a:	88c4      	ldrh	r4, [r0, #6]
    fb7c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fb7e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    fb80:	018b      	lsls	r3, r1, #6
    fb82:	0f1b      	lsrs	r3, r3, #28
    fb84:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    fb86:	028b      	lsls	r3, r1, #10
    fb88:	0edb      	lsrs	r3, r3, #27
    fb8a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    fb8c:	7903      	ldrb	r3, [r0, #4]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d10c      	bne.n	fbac <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    fb92:	040b      	lsls	r3, r1, #16
    fb94:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    fb96:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    fb98:	03cb      	lsls	r3, r1, #15
    fb9a:	0fdb      	lsrs	r3, r3, #31
    fb9c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    fb9e:	0988      	lsrs	r0, r1, #6
    fba0:	233f      	movs	r3, #63	; 0x3f
    fba2:	4018      	ands	r0, r3
    fba4:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    fba6:	4019      	ands	r1, r3
    fba8:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    fbaa:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    fbac:	03cb      	lsls	r3, r1, #15
    fbae:	0edb      	lsrs	r3, r3, #27
    fbb0:	7093      	strb	r3, [r2, #2]
    fbb2:	e7f4      	b.n	fb9e <rtc_calendar_register_value_to_time+0x28>

0000fbb4 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    fbb4:	b510      	push	{r4, lr}
    fbb6:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fbb8:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    fbba:	7941      	ldrb	r1, [r0, #5]
    fbbc:	2900      	cmp	r1, #0
    fbbe:	d006      	beq.n	fbce <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    fbc0:	8859      	ldrh	r1, [r3, #2]
    fbc2:	0449      	lsls	r1, r1, #17
    fbc4:	d50b      	bpl.n	fbde <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    fbc6:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    fbc8:	4b0a      	ldr	r3, [pc, #40]	; (fbf4 <rtc_calendar_get_time+0x40>)
    fbca:	4798      	blx	r3
}
    fbcc:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    fbce:	490a      	ldr	r1, [pc, #40]	; (fbf8 <rtc_calendar_get_time+0x44>)
    fbd0:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fbd2:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fbd4:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fbd6:	b249      	sxtb	r1, r1
    fbd8:	2900      	cmp	r1, #0
    fbda:	dbfb      	blt.n	fbd4 <rtc_calendar_get_time+0x20>
    fbdc:	e7f3      	b.n	fbc6 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    fbde:	8859      	ldrh	r1, [r3, #2]
    fbe0:	24c0      	movs	r4, #192	; 0xc0
    fbe2:	0224      	lsls	r4, r4, #8
    fbe4:	4321      	orrs	r1, r4
    fbe6:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fbe8:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fbea:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fbec:	b249      	sxtb	r1, r1
    fbee:	2900      	cmp	r1, #0
    fbf0:	dbfb      	blt.n	fbea <rtc_calendar_get_time+0x36>
    fbf2:	e7e8      	b.n	fbc6 <rtc_calendar_get_time+0x12>
    fbf4:	0000fb77 	.word	0x0000fb77
    fbf8:	ffff8000 	.word	0xffff8000

0000fbfc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    fbfc:	b570      	push	{r4, r5, r6, lr}
    fbfe:	000d      	movs	r5, r1
    fc00:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    fc02:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    fc04:	2a01      	cmp	r2, #1
    fc06:	d901      	bls.n	fc0c <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    fc08:	0018      	movs	r0, r3
    fc0a:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    fc0c:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    fc0e:	4b06      	ldr	r3, [pc, #24]	; (fc28 <rtc_calendar_set_alarm+0x2c>)
    fc10:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fc12:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    fc14:	b25b      	sxtb	r3, r3
    fc16:	2b00      	cmp	r3, #0
    fc18:	dbfb      	blt.n	fc12 <rtc_calendar_set_alarm+0x16>
    fc1a:	00e4      	lsls	r4, r4, #3
    fc1c:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    fc1e:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    fc20:	7a2b      	ldrb	r3, [r5, #8]
    fc22:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    fc24:	2300      	movs	r3, #0
    fc26:	e7ef      	b.n	fc08 <rtc_calendar_set_alarm+0xc>
    fc28:	0000fb3d 	.word	0x0000fb3d

0000fc2c <rtc_calendar_init>:
{
    fc2c:	b530      	push	{r4, r5, lr}
    fc2e:	b083      	sub	sp, #12
    fc30:	0005      	movs	r5, r0
    fc32:	0014      	movs	r4, r2
	module->hw = hw;
    fc34:	6001      	str	r1, [r0, #0]
    fc36:	4a1c      	ldr	r2, [pc, #112]	; (fca8 <rtc_calendar_init+0x7c>)
    fc38:	6993      	ldr	r3, [r2, #24]
    fc3a:	2120      	movs	r1, #32
    fc3c:	430b      	orrs	r3, r1
    fc3e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    fc40:	a901      	add	r1, sp, #4
    fc42:	2302      	movs	r3, #2
    fc44:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    fc46:	2004      	movs	r0, #4
    fc48:	4b18      	ldr	r3, [pc, #96]	; (fcac <rtc_calendar_init+0x80>)
    fc4a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    fc4c:	2004      	movs	r0, #4
    fc4e:	4b18      	ldr	r3, [pc, #96]	; (fcb0 <rtc_calendar_init+0x84>)
    fc50:	4798      	blx	r3
	rtc_calendar_reset(module);
    fc52:	0028      	movs	r0, r5
    fc54:	4b17      	ldr	r3, [pc, #92]	; (fcb4 <rtc_calendar_init+0x88>)
    fc56:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    fc58:	7923      	ldrb	r3, [r4, #4]
    fc5a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    fc5c:	78e3      	ldrb	r3, [r4, #3]
    fc5e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    fc60:	88e3      	ldrh	r3, [r4, #6]
    fc62:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    fc64:	4b14      	ldr	r3, [pc, #80]	; (fcb8 <rtc_calendar_init+0x8c>)
    fc66:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fc68:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fc6a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    fc6c:	7921      	ldrb	r1, [r4, #4]
    fc6e:	2900      	cmp	r1, #0
    fc70:	d017      	beq.n	fca2 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fc72:	2108      	movs	r1, #8
    fc74:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    fc76:	78a1      	ldrb	r1, [r4, #2]
    fc78:	2900      	cmp	r1, #0
    fc7a:	d001      	beq.n	fc80 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    fc7c:	2180      	movs	r1, #128	; 0x80
    fc7e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    fc80:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    fc82:	78e3      	ldrb	r3, [r4, #3]
    fc84:	2b00      	cmp	r3, #0
    fc86:	d004      	beq.n	fc92 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    fc88:	8853      	ldrh	r3, [r2, #2]
    fc8a:	2180      	movs	r1, #128	; 0x80
    fc8c:	01c9      	lsls	r1, r1, #7
    fc8e:	430b      	orrs	r3, r1
    fc90:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    fc92:	0021      	movs	r1, r4
    fc94:	3108      	adds	r1, #8
    fc96:	2200      	movs	r2, #0
    fc98:	0028      	movs	r0, r5
    fc9a:	4b08      	ldr	r3, [pc, #32]	; (fcbc <rtc_calendar_init+0x90>)
    fc9c:	4798      	blx	r3
}
    fc9e:	b003      	add	sp, #12
    fca0:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    fca2:	2148      	movs	r1, #72	; 0x48
    fca4:	430b      	orrs	r3, r1
    fca6:	e7e6      	b.n	fc76 <rtc_calendar_init+0x4a>
    fca8:	40000400 	.word	0x40000400
    fcac:	000114f9 	.word	0x000114f9
    fcb0:	0001146d 	.word	0x0001146d
    fcb4:	0000fb15 	.word	0x0000fb15
    fcb8:	200014ac 	.word	0x200014ac
    fcbc:	0000fbfd 	.word	0x0000fbfd

0000fcc0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    fcc0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    fcc2:	4b0f      	ldr	r3, [pc, #60]	; (fd00 <RTC_Handler+0x40>)
    fcc4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fcc6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    fcc8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    fcca:	8a13      	ldrh	r3, [r2, #16]
    fccc:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    fcce:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    fcd0:	79e3      	ldrb	r3, [r4, #7]
    fcd2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    fcd4:	b258      	sxtb	r0, r3
    fcd6:	2800      	cmp	r0, #0
    fcd8:	db06      	blt.n	fce8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    fcda:	07db      	lsls	r3, r3, #31
    fcdc:	d503      	bpl.n	fce6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    fcde:	07cb      	lsls	r3, r1, #31
    fce0:	d40a      	bmi.n	fcf8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    fce2:	2301      	movs	r3, #1
    fce4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    fce6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    fce8:	078b      	lsls	r3, r1, #30
    fcea:	d402      	bmi.n	fcf2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    fcec:	2380      	movs	r3, #128	; 0x80
    fcee:	7223      	strb	r3, [r4, #8]
    fcf0:	e7f9      	b.n	fce6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    fcf2:	68d3      	ldr	r3, [r2, #12]
    fcf4:	4798      	blx	r3
    fcf6:	e7f9      	b.n	fcec <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    fcf8:	6893      	ldr	r3, [r2, #8]
    fcfa:	4798      	blx	r3
    fcfc:	e7f1      	b.n	fce2 <RTC_Handler+0x22>
    fcfe:	46c0      	nop			; (mov r8, r8)
    fd00:	200014ac 	.word	0x200014ac

0000fd04 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    fd04:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd06:	46de      	mov	lr, fp
    fd08:	4657      	mov	r7, sl
    fd0a:	464e      	mov	r6, r9
    fd0c:	4645      	mov	r5, r8
    fd0e:	b5e0      	push	{r5, r6, r7, lr}
    fd10:	b087      	sub	sp, #28
    fd12:	4680      	mov	r8, r0
    fd14:	9104      	str	r1, [sp, #16]
    fd16:	0016      	movs	r6, r2
    fd18:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    fd1a:	2200      	movs	r2, #0
    fd1c:	2300      	movs	r3, #0
    fd1e:	2100      	movs	r1, #0
    fd20:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    fd22:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    fd24:	2001      	movs	r0, #1
    fd26:	0021      	movs	r1, r4
    fd28:	9600      	str	r6, [sp, #0]
    fd2a:	9701      	str	r7, [sp, #4]
    fd2c:	465c      	mov	r4, fp
    fd2e:	9403      	str	r4, [sp, #12]
    fd30:	4644      	mov	r4, r8
    fd32:	9405      	str	r4, [sp, #20]
    fd34:	e013      	b.n	fd5e <long_division+0x5a>
    fd36:	2420      	movs	r4, #32
    fd38:	1a64      	subs	r4, r4, r1
    fd3a:	0005      	movs	r5, r0
    fd3c:	40e5      	lsrs	r5, r4
    fd3e:	46a8      	mov	r8, r5
    fd40:	e014      	b.n	fd6c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    fd42:	9c00      	ldr	r4, [sp, #0]
    fd44:	9d01      	ldr	r5, [sp, #4]
    fd46:	1b12      	subs	r2, r2, r4
    fd48:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    fd4a:	465c      	mov	r4, fp
    fd4c:	464d      	mov	r5, r9
    fd4e:	432c      	orrs	r4, r5
    fd50:	46a3      	mov	fp, r4
    fd52:	9c03      	ldr	r4, [sp, #12]
    fd54:	4645      	mov	r5, r8
    fd56:	432c      	orrs	r4, r5
    fd58:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    fd5a:	3901      	subs	r1, #1
    fd5c:	d325      	bcc.n	fdaa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    fd5e:	2420      	movs	r4, #32
    fd60:	4264      	negs	r4, r4
    fd62:	190c      	adds	r4, r1, r4
    fd64:	d4e7      	bmi.n	fd36 <long_division+0x32>
    fd66:	0005      	movs	r5, r0
    fd68:	40a5      	lsls	r5, r4
    fd6a:	46a8      	mov	r8, r5
    fd6c:	0004      	movs	r4, r0
    fd6e:	408c      	lsls	r4, r1
    fd70:	46a1      	mov	r9, r4
		r = r << 1;
    fd72:	1892      	adds	r2, r2, r2
    fd74:	415b      	adcs	r3, r3
    fd76:	0014      	movs	r4, r2
    fd78:	001d      	movs	r5, r3
		if (n & bit_shift) {
    fd7a:	9e05      	ldr	r6, [sp, #20]
    fd7c:	464f      	mov	r7, r9
    fd7e:	403e      	ands	r6, r7
    fd80:	46b4      	mov	ip, r6
    fd82:	9e04      	ldr	r6, [sp, #16]
    fd84:	4647      	mov	r7, r8
    fd86:	403e      	ands	r6, r7
    fd88:	46b2      	mov	sl, r6
    fd8a:	4666      	mov	r6, ip
    fd8c:	4657      	mov	r7, sl
    fd8e:	433e      	orrs	r6, r7
    fd90:	d003      	beq.n	fd9a <long_division+0x96>
			r |= 0x01;
    fd92:	0006      	movs	r6, r0
    fd94:	4326      	orrs	r6, r4
    fd96:	0032      	movs	r2, r6
    fd98:	002b      	movs	r3, r5
		if (r >= d) {
    fd9a:	9c00      	ldr	r4, [sp, #0]
    fd9c:	9d01      	ldr	r5, [sp, #4]
    fd9e:	429d      	cmp	r5, r3
    fda0:	d8db      	bhi.n	fd5a <long_division+0x56>
    fda2:	d1ce      	bne.n	fd42 <long_division+0x3e>
    fda4:	4294      	cmp	r4, r2
    fda6:	d8d8      	bhi.n	fd5a <long_division+0x56>
    fda8:	e7cb      	b.n	fd42 <long_division+0x3e>
    fdaa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    fdac:	4658      	mov	r0, fp
    fdae:	0019      	movs	r1, r3
    fdb0:	b007      	add	sp, #28
    fdb2:	bc3c      	pop	{r2, r3, r4, r5}
    fdb4:	4690      	mov	r8, r2
    fdb6:	4699      	mov	r9, r3
    fdb8:	46a2      	mov	sl, r4
    fdba:	46ab      	mov	fp, r5
    fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fdbe <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    fdbe:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    fdc0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fdc2:	2340      	movs	r3, #64	; 0x40
    fdc4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    fdc6:	4281      	cmp	r1, r0
    fdc8:	d202      	bcs.n	fdd0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    fdca:	0018      	movs	r0, r3
    fdcc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    fdce:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    fdd0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    fdd2:	1c63      	adds	r3, r4, #1
    fdd4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    fdd6:	4288      	cmp	r0, r1
    fdd8:	d9f9      	bls.n	fdce <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fdda:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    fddc:	2cff      	cmp	r4, #255	; 0xff
    fdde:	d8f4      	bhi.n	fdca <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    fde0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    fde2:	2300      	movs	r3, #0
    fde4:	e7f1      	b.n	fdca <_sercom_get_sync_baud_val+0xc>
	...

0000fde8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdea:	b083      	sub	sp, #12
    fdec:	000f      	movs	r7, r1
    fdee:	0016      	movs	r6, r2
    fdf0:	aa08      	add	r2, sp, #32
    fdf2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    fdf4:	0004      	movs	r4, r0
    fdf6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fdf8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    fdfa:	42bc      	cmp	r4, r7
    fdfc:	d902      	bls.n	fe04 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    fdfe:	0010      	movs	r0, r2
    fe00:	b003      	add	sp, #12
    fe02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    fe04:	2b00      	cmp	r3, #0
    fe06:	d114      	bne.n	fe32 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    fe08:	0002      	movs	r2, r0
    fe0a:	0008      	movs	r0, r1
    fe0c:	2100      	movs	r1, #0
    fe0e:	4c19      	ldr	r4, [pc, #100]	; (fe74 <_sercom_get_async_baud_val+0x8c>)
    fe10:	47a0      	blx	r4
    fe12:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    fe14:	003a      	movs	r2, r7
    fe16:	2300      	movs	r3, #0
    fe18:	2000      	movs	r0, #0
    fe1a:	4c17      	ldr	r4, [pc, #92]	; (fe78 <_sercom_get_async_baud_val+0x90>)
    fe1c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    fe1e:	2200      	movs	r2, #0
    fe20:	2301      	movs	r3, #1
    fe22:	1a12      	subs	r2, r2, r0
    fe24:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    fe26:	0c12      	lsrs	r2, r2, #16
    fe28:	041b      	lsls	r3, r3, #16
    fe2a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    fe2c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    fe2e:	2200      	movs	r2, #0
    fe30:	e7e5      	b.n	fdfe <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    fe32:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    fe34:	2b01      	cmp	r3, #1
    fe36:	d1f9      	bne.n	fe2c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    fe38:	000a      	movs	r2, r1
    fe3a:	2300      	movs	r3, #0
    fe3c:	2100      	movs	r1, #0
    fe3e:	4c0d      	ldr	r4, [pc, #52]	; (fe74 <_sercom_get_async_baud_val+0x8c>)
    fe40:	47a0      	blx	r4
    fe42:	0002      	movs	r2, r0
    fe44:	000b      	movs	r3, r1
    fe46:	9200      	str	r2, [sp, #0]
    fe48:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    fe4a:	0038      	movs	r0, r7
    fe4c:	2100      	movs	r1, #0
    fe4e:	4c0a      	ldr	r4, [pc, #40]	; (fe78 <_sercom_get_async_baud_val+0x90>)
    fe50:	47a0      	blx	r4
    fe52:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    fe54:	2380      	movs	r3, #128	; 0x80
    fe56:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fe58:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    fe5a:	4298      	cmp	r0, r3
    fe5c:	d8cf      	bhi.n	fdfe <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    fe5e:	0f79      	lsrs	r1, r7, #29
    fe60:	00f8      	lsls	r0, r7, #3
    fe62:	9a00      	ldr	r2, [sp, #0]
    fe64:	9b01      	ldr	r3, [sp, #4]
    fe66:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    fe68:	00ea      	lsls	r2, r5, #3
    fe6a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    fe6c:	b2d2      	uxtb	r2, r2
    fe6e:	0352      	lsls	r2, r2, #13
    fe70:	432a      	orrs	r2, r5
    fe72:	e7db      	b.n	fe2c <_sercom_get_async_baud_val+0x44>
    fe74:	000172cd 	.word	0x000172cd
    fe78:	0000fd05 	.word	0x0000fd05

0000fe7c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    fe7c:	b510      	push	{r4, lr}
    fe7e:	b082      	sub	sp, #8
    fe80:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    fe82:	4b0e      	ldr	r3, [pc, #56]	; (febc <sercom_set_gclk_generator+0x40>)
    fe84:	781b      	ldrb	r3, [r3, #0]
    fe86:	2b00      	cmp	r3, #0
    fe88:	d007      	beq.n	fe9a <sercom_set_gclk_generator+0x1e>
    fe8a:	2900      	cmp	r1, #0
    fe8c:	d105      	bne.n	fe9a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    fe8e:	4b0b      	ldr	r3, [pc, #44]	; (febc <sercom_set_gclk_generator+0x40>)
    fe90:	785b      	ldrb	r3, [r3, #1]
    fe92:	4283      	cmp	r3, r0
    fe94:	d010      	beq.n	feb8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    fe96:	201d      	movs	r0, #29
    fe98:	e00c      	b.n	feb4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    fe9a:	a901      	add	r1, sp, #4
    fe9c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    fe9e:	2013      	movs	r0, #19
    fea0:	4b07      	ldr	r3, [pc, #28]	; (fec0 <sercom_set_gclk_generator+0x44>)
    fea2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    fea4:	2013      	movs	r0, #19
    fea6:	4b07      	ldr	r3, [pc, #28]	; (fec4 <sercom_set_gclk_generator+0x48>)
    fea8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    feaa:	4b04      	ldr	r3, [pc, #16]	; (febc <sercom_set_gclk_generator+0x40>)
    feac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    feae:	2201      	movs	r2, #1
    feb0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    feb2:	2000      	movs	r0, #0
}
    feb4:	b002      	add	sp, #8
    feb6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    feb8:	2000      	movs	r0, #0
    feba:	e7fb      	b.n	feb4 <sercom_set_gclk_generator+0x38>
    febc:	200003e0 	.word	0x200003e0
    fec0:	000114f9 	.word	0x000114f9
    fec4:	0001146d 	.word	0x0001146d

0000fec8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    fec8:	4b40      	ldr	r3, [pc, #256]	; (ffcc <_sercom_get_default_pad+0x104>)
    feca:	4298      	cmp	r0, r3
    fecc:	d031      	beq.n	ff32 <_sercom_get_default_pad+0x6a>
    fece:	d90a      	bls.n	fee6 <_sercom_get_default_pad+0x1e>
    fed0:	4b3f      	ldr	r3, [pc, #252]	; (ffd0 <_sercom_get_default_pad+0x108>)
    fed2:	4298      	cmp	r0, r3
    fed4:	d04d      	beq.n	ff72 <_sercom_get_default_pad+0xaa>
    fed6:	4b3f      	ldr	r3, [pc, #252]	; (ffd4 <_sercom_get_default_pad+0x10c>)
    fed8:	4298      	cmp	r0, r3
    feda:	d05a      	beq.n	ff92 <_sercom_get_default_pad+0xca>
    fedc:	4b3e      	ldr	r3, [pc, #248]	; (ffd8 <_sercom_get_default_pad+0x110>)
    fede:	4298      	cmp	r0, r3
    fee0:	d037      	beq.n	ff52 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    fee2:	2000      	movs	r0, #0
}
    fee4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    fee6:	4b3d      	ldr	r3, [pc, #244]	; (ffdc <_sercom_get_default_pad+0x114>)
    fee8:	4298      	cmp	r0, r3
    feea:	d00c      	beq.n	ff06 <_sercom_get_default_pad+0x3e>
    feec:	4b3c      	ldr	r3, [pc, #240]	; (ffe0 <_sercom_get_default_pad+0x118>)
    feee:	4298      	cmp	r0, r3
    fef0:	d1f7      	bne.n	fee2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fef2:	2901      	cmp	r1, #1
    fef4:	d017      	beq.n	ff26 <_sercom_get_default_pad+0x5e>
    fef6:	2900      	cmp	r1, #0
    fef8:	d05d      	beq.n	ffb6 <_sercom_get_default_pad+0xee>
    fefa:	2902      	cmp	r1, #2
    fefc:	d015      	beq.n	ff2a <_sercom_get_default_pad+0x62>
    fefe:	2903      	cmp	r1, #3
    ff00:	d015      	beq.n	ff2e <_sercom_get_default_pad+0x66>
	return 0;
    ff02:	2000      	movs	r0, #0
    ff04:	e7ee      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ff06:	2901      	cmp	r1, #1
    ff08:	d007      	beq.n	ff1a <_sercom_get_default_pad+0x52>
    ff0a:	2900      	cmp	r1, #0
    ff0c:	d051      	beq.n	ffb2 <_sercom_get_default_pad+0xea>
    ff0e:	2902      	cmp	r1, #2
    ff10:	d005      	beq.n	ff1e <_sercom_get_default_pad+0x56>
    ff12:	2903      	cmp	r1, #3
    ff14:	d005      	beq.n	ff22 <_sercom_get_default_pad+0x5a>
	return 0;
    ff16:	2000      	movs	r0, #0
    ff18:	e7e4      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ff1a:	4832      	ldr	r0, [pc, #200]	; (ffe4 <_sercom_get_default_pad+0x11c>)
    ff1c:	e7e2      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff1e:	4832      	ldr	r0, [pc, #200]	; (ffe8 <_sercom_get_default_pad+0x120>)
    ff20:	e7e0      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff22:	4832      	ldr	r0, [pc, #200]	; (ffec <_sercom_get_default_pad+0x124>)
    ff24:	e7de      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff26:	4832      	ldr	r0, [pc, #200]	; (fff0 <_sercom_get_default_pad+0x128>)
    ff28:	e7dc      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff2a:	4832      	ldr	r0, [pc, #200]	; (fff4 <_sercom_get_default_pad+0x12c>)
    ff2c:	e7da      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff2e:	4832      	ldr	r0, [pc, #200]	; (fff8 <_sercom_get_default_pad+0x130>)
    ff30:	e7d8      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff32:	2901      	cmp	r1, #1
    ff34:	d007      	beq.n	ff46 <_sercom_get_default_pad+0x7e>
    ff36:	2900      	cmp	r1, #0
    ff38:	d03f      	beq.n	ffba <_sercom_get_default_pad+0xf2>
    ff3a:	2902      	cmp	r1, #2
    ff3c:	d005      	beq.n	ff4a <_sercom_get_default_pad+0x82>
    ff3e:	2903      	cmp	r1, #3
    ff40:	d005      	beq.n	ff4e <_sercom_get_default_pad+0x86>
	return 0;
    ff42:	2000      	movs	r0, #0
    ff44:	e7ce      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ff46:	482d      	ldr	r0, [pc, #180]	; (fffc <_sercom_get_default_pad+0x134>)
    ff48:	e7cc      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff4a:	482d      	ldr	r0, [pc, #180]	; (10000 <_sercom_get_default_pad+0x138>)
    ff4c:	e7ca      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff4e:	482d      	ldr	r0, [pc, #180]	; (10004 <_sercom_get_default_pad+0x13c>)
    ff50:	e7c8      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff52:	2901      	cmp	r1, #1
    ff54:	d007      	beq.n	ff66 <_sercom_get_default_pad+0x9e>
    ff56:	2900      	cmp	r1, #0
    ff58:	d031      	beq.n	ffbe <_sercom_get_default_pad+0xf6>
    ff5a:	2902      	cmp	r1, #2
    ff5c:	d005      	beq.n	ff6a <_sercom_get_default_pad+0xa2>
    ff5e:	2903      	cmp	r1, #3
    ff60:	d005      	beq.n	ff6e <_sercom_get_default_pad+0xa6>
	return 0;
    ff62:	2000      	movs	r0, #0
    ff64:	e7be      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ff66:	4828      	ldr	r0, [pc, #160]	; (10008 <_sercom_get_default_pad+0x140>)
    ff68:	e7bc      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff6a:	4828      	ldr	r0, [pc, #160]	; (1000c <_sercom_get_default_pad+0x144>)
    ff6c:	e7ba      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff6e:	4828      	ldr	r0, [pc, #160]	; (10010 <_sercom_get_default_pad+0x148>)
    ff70:	e7b8      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff72:	2901      	cmp	r1, #1
    ff74:	d007      	beq.n	ff86 <_sercom_get_default_pad+0xbe>
    ff76:	2900      	cmp	r1, #0
    ff78:	d023      	beq.n	ffc2 <_sercom_get_default_pad+0xfa>
    ff7a:	2902      	cmp	r1, #2
    ff7c:	d005      	beq.n	ff8a <_sercom_get_default_pad+0xc2>
    ff7e:	2903      	cmp	r1, #3
    ff80:	d005      	beq.n	ff8e <_sercom_get_default_pad+0xc6>
	return 0;
    ff82:	2000      	movs	r0, #0
    ff84:	e7ae      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ff86:	4823      	ldr	r0, [pc, #140]	; (10014 <_sercom_get_default_pad+0x14c>)
    ff88:	e7ac      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff8a:	4823      	ldr	r0, [pc, #140]	; (10018 <_sercom_get_default_pad+0x150>)
    ff8c:	e7aa      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff8e:	4823      	ldr	r0, [pc, #140]	; (1001c <_sercom_get_default_pad+0x154>)
    ff90:	e7a8      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ff92:	2901      	cmp	r1, #1
    ff94:	d007      	beq.n	ffa6 <_sercom_get_default_pad+0xde>
    ff96:	2900      	cmp	r1, #0
    ff98:	d015      	beq.n	ffc6 <_sercom_get_default_pad+0xfe>
    ff9a:	2902      	cmp	r1, #2
    ff9c:	d005      	beq.n	ffaa <_sercom_get_default_pad+0xe2>
    ff9e:	2903      	cmp	r1, #3
    ffa0:	d005      	beq.n	ffae <_sercom_get_default_pad+0xe6>
	return 0;
    ffa2:	2000      	movs	r0, #0
    ffa4:	e79e      	b.n	fee4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ffa6:	481e      	ldr	r0, [pc, #120]	; (10020 <_sercom_get_default_pad+0x158>)
    ffa8:	e79c      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffaa:	481e      	ldr	r0, [pc, #120]	; (10024 <_sercom_get_default_pad+0x15c>)
    ffac:	e79a      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffae:	481e      	ldr	r0, [pc, #120]	; (10028 <_sercom_get_default_pad+0x160>)
    ffb0:	e798      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffb2:	481e      	ldr	r0, [pc, #120]	; (1002c <_sercom_get_default_pad+0x164>)
    ffb4:	e796      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffb6:	2003      	movs	r0, #3
    ffb8:	e794      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffba:	481d      	ldr	r0, [pc, #116]	; (10030 <_sercom_get_default_pad+0x168>)
    ffbc:	e792      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffbe:	481d      	ldr	r0, [pc, #116]	; (10034 <_sercom_get_default_pad+0x16c>)
    ffc0:	e790      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffc2:	481d      	ldr	r0, [pc, #116]	; (10038 <_sercom_get_default_pad+0x170>)
    ffc4:	e78e      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffc6:	481d      	ldr	r0, [pc, #116]	; (1003c <_sercom_get_default_pad+0x174>)
    ffc8:	e78c      	b.n	fee4 <_sercom_get_default_pad+0x1c>
    ffca:	46c0      	nop			; (mov r8, r8)
    ffcc:	42001000 	.word	0x42001000
    ffd0:	42001800 	.word	0x42001800
    ffd4:	42001c00 	.word	0x42001c00
    ffd8:	42001400 	.word	0x42001400
    ffdc:	42000800 	.word	0x42000800
    ffe0:	42000c00 	.word	0x42000c00
    ffe4:	00050003 	.word	0x00050003
    ffe8:	00060003 	.word	0x00060003
    ffec:	00070003 	.word	0x00070003
    fff0:	00010003 	.word	0x00010003
    fff4:	001e0003 	.word	0x001e0003
    fff8:	001f0003 	.word	0x001f0003
    fffc:	00090003 	.word	0x00090003
   10000:	000a0003 	.word	0x000a0003
   10004:	000b0003 	.word	0x000b0003
   10008:	00110003 	.word	0x00110003
   1000c:	00120003 	.word	0x00120003
   10010:	00130003 	.word	0x00130003
   10014:	000d0003 	.word	0x000d0003
   10018:	000e0003 	.word	0x000e0003
   1001c:	000f0003 	.word	0x000f0003
   10020:	00170003 	.word	0x00170003
   10024:	00180003 	.word	0x00180003
   10028:	00190003 	.word	0x00190003
   1002c:	00040003 	.word	0x00040003
   10030:	00080003 	.word	0x00080003
   10034:	00100003 	.word	0x00100003
   10038:	000c0003 	.word	0x000c0003
   1003c:	00160003 	.word	0x00160003

00010040 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   10040:	b530      	push	{r4, r5, lr}
   10042:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   10044:	4b0b      	ldr	r3, [pc, #44]	; (10074 <_sercom_get_sercom_inst_index+0x34>)
   10046:	466a      	mov	r2, sp
   10048:	cb32      	ldmia	r3!, {r1, r4, r5}
   1004a:	c232      	stmia	r2!, {r1, r4, r5}
   1004c:	cb32      	ldmia	r3!, {r1, r4, r5}
   1004e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   10050:	9b00      	ldr	r3, [sp, #0]
   10052:	4283      	cmp	r3, r0
   10054:	d00b      	beq.n	1006e <_sercom_get_sercom_inst_index+0x2e>
   10056:	2301      	movs	r3, #1
   10058:	009a      	lsls	r2, r3, #2
   1005a:	4669      	mov	r1, sp
   1005c:	5852      	ldr	r2, [r2, r1]
   1005e:	4282      	cmp	r2, r0
   10060:	d006      	beq.n	10070 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10062:	3301      	adds	r3, #1
   10064:	2b06      	cmp	r3, #6
   10066:	d1f7      	bne.n	10058 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   10068:	2000      	movs	r0, #0
}
   1006a:	b007      	add	sp, #28
   1006c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1006e:	2300      	movs	r3, #0
			return i;
   10070:	b2d8      	uxtb	r0, r3
   10072:	e7fa      	b.n	1006a <_sercom_get_sercom_inst_index+0x2a>
   10074:	00019b8c 	.word	0x00019b8c

00010078 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   10078:	4770      	bx	lr
	...

0001007c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1007c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1007e:	4b0a      	ldr	r3, [pc, #40]	; (100a8 <_sercom_set_handler+0x2c>)
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	2b00      	cmp	r3, #0
   10084:	d10c      	bne.n	100a0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   10086:	4f09      	ldr	r7, [pc, #36]	; (100ac <_sercom_set_handler+0x30>)
   10088:	4e09      	ldr	r6, [pc, #36]	; (100b0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1008a:	4d0a      	ldr	r5, [pc, #40]	; (100b4 <_sercom_set_handler+0x38>)
   1008c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1008e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   10090:	195a      	adds	r2, r3, r5
   10092:	6014      	str	r4, [r2, #0]
   10094:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10096:	2b18      	cmp	r3, #24
   10098:	d1f9      	bne.n	1008e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1009a:	2201      	movs	r2, #1
   1009c:	4b02      	ldr	r3, [pc, #8]	; (100a8 <_sercom_set_handler+0x2c>)
   1009e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   100a0:	0080      	lsls	r0, r0, #2
   100a2:	4b02      	ldr	r3, [pc, #8]	; (100ac <_sercom_set_handler+0x30>)
   100a4:	50c1      	str	r1, [r0, r3]
}
   100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100a8:	200003e2 	.word	0x200003e2
   100ac:	200003e4 	.word	0x200003e4
   100b0:	00010079 	.word	0x00010079
   100b4:	200014b0 	.word	0x200014b0

000100b8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   100b8:	b500      	push	{lr}
   100ba:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   100bc:	2309      	movs	r3, #9
   100be:	466a      	mov	r2, sp
   100c0:	7013      	strb	r3, [r2, #0]
   100c2:	3301      	adds	r3, #1
   100c4:	7053      	strb	r3, [r2, #1]
   100c6:	3301      	adds	r3, #1
   100c8:	7093      	strb	r3, [r2, #2]
   100ca:	3301      	adds	r3, #1
   100cc:	70d3      	strb	r3, [r2, #3]
   100ce:	3301      	adds	r3, #1
   100d0:	7113      	strb	r3, [r2, #4]
   100d2:	3301      	adds	r3, #1
   100d4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   100d6:	4b03      	ldr	r3, [pc, #12]	; (100e4 <_sercom_get_interrupt_vector+0x2c>)
   100d8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   100da:	466b      	mov	r3, sp
   100dc:	5618      	ldrsb	r0, [r3, r0]
}
   100de:	b003      	add	sp, #12
   100e0:	bd00      	pop	{pc}
   100e2:	46c0      	nop			; (mov r8, r8)
   100e4:	00010041 	.word	0x00010041

000100e8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   100e8:	b510      	push	{r4, lr}
   100ea:	4b02      	ldr	r3, [pc, #8]	; (100f4 <SERCOM0_Handler+0xc>)
   100ec:	681b      	ldr	r3, [r3, #0]
   100ee:	2000      	movs	r0, #0
   100f0:	4798      	blx	r3
   100f2:	bd10      	pop	{r4, pc}
   100f4:	200003e4 	.word	0x200003e4

000100f8 <SERCOM1_Handler>:
   100f8:	b510      	push	{r4, lr}
   100fa:	4b02      	ldr	r3, [pc, #8]	; (10104 <SERCOM1_Handler+0xc>)
   100fc:	685b      	ldr	r3, [r3, #4]
   100fe:	2001      	movs	r0, #1
   10100:	4798      	blx	r3
   10102:	bd10      	pop	{r4, pc}
   10104:	200003e4 	.word	0x200003e4

00010108 <SERCOM2_Handler>:
   10108:	b510      	push	{r4, lr}
   1010a:	4b02      	ldr	r3, [pc, #8]	; (10114 <SERCOM2_Handler+0xc>)
   1010c:	689b      	ldr	r3, [r3, #8]
   1010e:	2002      	movs	r0, #2
   10110:	4798      	blx	r3
   10112:	bd10      	pop	{r4, pc}
   10114:	200003e4 	.word	0x200003e4

00010118 <SERCOM3_Handler>:
   10118:	b510      	push	{r4, lr}
   1011a:	4b02      	ldr	r3, [pc, #8]	; (10124 <SERCOM3_Handler+0xc>)
   1011c:	68db      	ldr	r3, [r3, #12]
   1011e:	2003      	movs	r0, #3
   10120:	4798      	blx	r3
   10122:	bd10      	pop	{r4, pc}
   10124:	200003e4 	.word	0x200003e4

00010128 <SERCOM4_Handler>:
   10128:	b510      	push	{r4, lr}
   1012a:	4b02      	ldr	r3, [pc, #8]	; (10134 <SERCOM4_Handler+0xc>)
   1012c:	691b      	ldr	r3, [r3, #16]
   1012e:	2004      	movs	r0, #4
   10130:	4798      	blx	r3
   10132:	bd10      	pop	{r4, pc}
   10134:	200003e4 	.word	0x200003e4

00010138 <SERCOM5_Handler>:
   10138:	b510      	push	{r4, lr}
   1013a:	4b02      	ldr	r3, [pc, #8]	; (10144 <SERCOM5_Handler+0xc>)
   1013c:	695b      	ldr	r3, [r3, #20]
   1013e:	2005      	movs	r0, #5
   10140:	4798      	blx	r3
   10142:	bd10      	pop	{r4, pc}
   10144:	200003e4 	.word	0x200003e4

00010148 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   10148:	b570      	push	{r4, r5, r6, lr}
   1014a:	b082      	sub	sp, #8
   1014c:	0005      	movs	r5, r0
   1014e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   10150:	2200      	movs	r2, #0
   10152:	466b      	mov	r3, sp
   10154:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   10156:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   10158:	0030      	movs	r0, r6
   1015a:	4b24      	ldr	r3, [pc, #144]	; (101ec <spi_set_baudrate+0xa4>)
   1015c:	4798      	blx	r3
   1015e:	231f      	movs	r3, #31
   10160:	4018      	ands	r0, r3
   10162:	3b1e      	subs	r3, #30
   10164:	4083      	lsls	r3, r0
   10166:	2280      	movs	r2, #128	; 0x80
   10168:	4921      	ldr	r1, [pc, #132]	; (101f0 <spi_set_baudrate+0xa8>)
   1016a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1016c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1016e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10170:	2b00      	cmp	r3, #0
   10172:	d1fc      	bne.n	1016e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   10174:	338f      	adds	r3, #143	; 0x8f
   10176:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   10178:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1017a:	6833      	ldr	r3, [r6, #0]
   1017c:	2202      	movs	r2, #2
   1017e:	4393      	bics	r3, r2
   10180:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10182:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10184:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   10186:	2b00      	cmp	r3, #0
   10188:	d1fc      	bne.n	10184 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1018a:	4b1a      	ldr	r3, [pc, #104]	; (101f4 <spi_set_baudrate+0xac>)
   1018c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1018e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   10190:	b2c0      	uxtb	r0, r0
   10192:	4b19      	ldr	r3, [pc, #100]	; (101f8 <spi_set_baudrate+0xb0>)
   10194:	4798      	blx	r3
   10196:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   10198:	466b      	mov	r3, sp
   1019a:	1d9a      	adds	r2, r3, #6
   1019c:	0020      	movs	r0, r4
   1019e:	4b17      	ldr	r3, [pc, #92]	; (101fc <spi_set_baudrate+0xb4>)
   101a0:	4798      	blx	r3
   101a2:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   101a4:	d003      	beq.n	101ae <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   101a6:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   101a8:	0020      	movs	r0, r4
   101aa:	b002      	add	sp, #8
   101ac:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   101ae:	466b      	mov	r3, sp
   101b0:	3306      	adds	r3, #6
   101b2:	781b      	ldrb	r3, [r3, #0]
   101b4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   101b6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   101b8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   101ba:	2b00      	cmp	r3, #0
   101bc:	d1fc      	bne.n	101b8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   101be:	0030      	movs	r0, r6
   101c0:	4b0a      	ldr	r3, [pc, #40]	; (101ec <spi_set_baudrate+0xa4>)
   101c2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   101c4:	231f      	movs	r3, #31
   101c6:	4018      	ands	r0, r3
   101c8:	3b1e      	subs	r3, #30
   101ca:	4083      	lsls	r3, r0
   101cc:	4a08      	ldr	r2, [pc, #32]	; (101f0 <spi_set_baudrate+0xa8>)
   101ce:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   101d0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   101d2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   101d4:	2b00      	cmp	r3, #0
   101d6:	d1fc      	bne.n	101d2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   101d8:	6833      	ldr	r3, [r6, #0]
   101da:	2202      	movs	r2, #2
   101dc:	4313      	orrs	r3, r2
   101de:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   101e0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   101e2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   101e4:	2b00      	cmp	r3, #0
   101e6:	d1fc      	bne.n	101e2 <spi_set_baudrate+0x9a>
   101e8:	e7de      	b.n	101a8 <spi_set_baudrate+0x60>
   101ea:	46c0      	nop			; (mov r8, r8)
   101ec:	000100b9 	.word	0x000100b9
   101f0:	e000e100 	.word	0xe000e100
   101f4:	00010041 	.word	0x00010041
   101f8:	00011515 	.word	0x00011515
   101fc:	0000fdbf 	.word	0x0000fdbf

00010200 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   10200:	b5f0      	push	{r4, r5, r6, r7, lr}
   10202:	b08b      	sub	sp, #44	; 0x2c
   10204:	0005      	movs	r5, r0
   10206:	000c      	movs	r4, r1
   10208:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1020a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1020c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1020e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10210:	079b      	lsls	r3, r3, #30
   10212:	d501      	bpl.n	10218 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   10214:	b00b      	add	sp, #44	; 0x2c
   10216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10218:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1021a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1021c:	07db      	lsls	r3, r3, #31
   1021e:	d4f9      	bmi.n	10214 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10220:	0008      	movs	r0, r1
   10222:	4b60      	ldr	r3, [pc, #384]	; (103a4 <spi_init+0x1a4>)
   10224:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   10226:	4a60      	ldr	r2, [pc, #384]	; (103a8 <spi_init+0x1a8>)
   10228:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1022a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1022c:	2301      	movs	r3, #1
   1022e:	40bb      	lsls	r3, r7
   10230:	430b      	orrs	r3, r1
   10232:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10234:	a909      	add	r1, sp, #36	; 0x24
   10236:	2724      	movs	r7, #36	; 0x24
   10238:	5df3      	ldrb	r3, [r6, r7]
   1023a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1023c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1023e:	b2c3      	uxtb	r3, r0
   10240:	9301      	str	r3, [sp, #4]
   10242:	0018      	movs	r0, r3
   10244:	4b59      	ldr	r3, [pc, #356]	; (103ac <spi_init+0x1ac>)
   10246:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10248:	9801      	ldr	r0, [sp, #4]
   1024a:	4b59      	ldr	r3, [pc, #356]	; (103b0 <spi_init+0x1b0>)
   1024c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1024e:	5df0      	ldrb	r0, [r6, r7]
   10250:	2100      	movs	r1, #0
   10252:	4b58      	ldr	r3, [pc, #352]	; (103b4 <spi_init+0x1b4>)
   10254:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   10256:	7833      	ldrb	r3, [r6, #0]
   10258:	2b01      	cmp	r3, #1
   1025a:	d038      	beq.n	102ce <spi_init+0xce>
   1025c:	002b      	movs	r3, r5
   1025e:	330c      	adds	r3, #12
   10260:	0029      	movs	r1, r5
   10262:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   10264:	2200      	movs	r2, #0
   10266:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   10268:	428b      	cmp	r3, r1
   1026a:	d1fc      	bne.n	10266 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1026c:	2300      	movs	r3, #0
   1026e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   10270:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   10272:	2400      	movs	r4, #0
   10274:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   10276:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   10278:	3336      	adds	r3, #54	; 0x36
   1027a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1027c:	3301      	adds	r3, #1
   1027e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   10280:	3301      	adds	r3, #1
   10282:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   10284:	3b35      	subs	r3, #53	; 0x35
   10286:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   10288:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1028a:	6828      	ldr	r0, [r5, #0]
   1028c:	4b45      	ldr	r3, [pc, #276]	; (103a4 <spi_init+0x1a4>)
   1028e:	4798      	blx	r3
   10290:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   10292:	4949      	ldr	r1, [pc, #292]	; (103b8 <spi_init+0x1b8>)
   10294:	4b49      	ldr	r3, [pc, #292]	; (103bc <spi_init+0x1bc>)
   10296:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10298:	00bf      	lsls	r7, r7, #2
   1029a:	4b49      	ldr	r3, [pc, #292]	; (103c0 <spi_init+0x1c0>)
   1029c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1029e:	682f      	ldr	r7, [r5, #0]
   102a0:	ab04      	add	r3, sp, #16
   102a2:	2280      	movs	r2, #128	; 0x80
   102a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   102a6:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   102a8:	3a7f      	subs	r2, #127	; 0x7f
   102aa:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   102ac:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   102ae:	7833      	ldrb	r3, [r6, #0]
   102b0:	2b00      	cmp	r3, #0
   102b2:	d102      	bne.n	102ba <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   102b4:	2200      	movs	r2, #0
   102b6:	ab04      	add	r3, sp, #16
   102b8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   102ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   102bc:	9305      	str	r3, [sp, #20]
   102be:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   102c0:	9306      	str	r3, [sp, #24]
   102c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   102c4:	9307      	str	r3, [sp, #28]
   102c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
   102c8:	9308      	str	r3, [sp, #32]
   102ca:	2400      	movs	r4, #0
   102cc:	e00b      	b.n	102e6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   102ce:	6823      	ldr	r3, [r4, #0]
   102d0:	220c      	movs	r2, #12
   102d2:	4313      	orrs	r3, r2
   102d4:	6023      	str	r3, [r4, #0]
   102d6:	e7c1      	b.n	1025c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   102d8:	0038      	movs	r0, r7
   102da:	4b3a      	ldr	r3, [pc, #232]	; (103c4 <spi_init+0x1c4>)
   102dc:	4798      	blx	r3
   102de:	e00a      	b.n	102f6 <spi_init+0xf6>
   102e0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   102e2:	2c04      	cmp	r4, #4
   102e4:	d010      	beq.n	10308 <spi_init+0x108>
   102e6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   102e8:	00a3      	lsls	r3, r4, #2
   102ea:	aa02      	add	r2, sp, #8
   102ec:	200c      	movs	r0, #12
   102ee:	1812      	adds	r2, r2, r0
   102f0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   102f2:	2800      	cmp	r0, #0
   102f4:	d0f0      	beq.n	102d8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   102f6:	1c43      	adds	r3, r0, #1
   102f8:	d0f2      	beq.n	102e0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   102fa:	a904      	add	r1, sp, #16
   102fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   102fe:	0c00      	lsrs	r0, r0, #16
   10300:	b2c0      	uxtb	r0, r0
   10302:	4b31      	ldr	r3, [pc, #196]	; (103c8 <spi_init+0x1c8>)
   10304:	4798      	blx	r3
   10306:	e7eb      	b.n	102e0 <spi_init+0xe0>
	module->mode             = config->mode;
   10308:	7833      	ldrb	r3, [r6, #0]
   1030a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1030c:	7c33      	ldrb	r3, [r6, #16]
   1030e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   10310:	7cb3      	ldrb	r3, [r6, #18]
   10312:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   10314:	7d33      	ldrb	r3, [r6, #20]
   10316:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   10318:	2200      	movs	r2, #0
   1031a:	ab02      	add	r3, sp, #8
   1031c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1031e:	7833      	ldrb	r3, [r6, #0]
   10320:	2b01      	cmp	r3, #1
   10322:	d028      	beq.n	10376 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   10324:	6873      	ldr	r3, [r6, #4]
   10326:	68b2      	ldr	r2, [r6, #8]
   10328:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1032a:	68f2      	ldr	r2, [r6, #12]
   1032c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1032e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   10330:	7c72      	ldrb	r2, [r6, #17]
   10332:	2a00      	cmp	r2, #0
   10334:	d103      	bne.n	1033e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10336:	4a25      	ldr	r2, [pc, #148]	; (103cc <spi_init+0x1cc>)
   10338:	7892      	ldrb	r2, [r2, #2]
   1033a:	0792      	lsls	r2, r2, #30
   1033c:	d501      	bpl.n	10342 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1033e:	2280      	movs	r2, #128	; 0x80
   10340:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   10342:	7cb2      	ldrb	r2, [r6, #18]
   10344:	2a00      	cmp	r2, #0
   10346:	d002      	beq.n	1034e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   10348:	2280      	movs	r2, #128	; 0x80
   1034a:	0292      	lsls	r2, r2, #10
   1034c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1034e:	7cf2      	ldrb	r2, [r6, #19]
   10350:	2a00      	cmp	r2, #0
   10352:	d002      	beq.n	1035a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   10354:	2280      	movs	r2, #128	; 0x80
   10356:	0092      	lsls	r2, r2, #2
   10358:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1035a:	7d32      	ldrb	r2, [r6, #20]
   1035c:	2a00      	cmp	r2, #0
   1035e:	d002      	beq.n	10366 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   10360:	2280      	movs	r2, #128	; 0x80
   10362:	0192      	lsls	r2, r2, #6
   10364:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   10366:	683a      	ldr	r2, [r7, #0]
   10368:	4313      	orrs	r3, r2
   1036a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	430b      	orrs	r3, r1
   10370:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   10372:	2000      	movs	r0, #0
   10374:	e74e      	b.n	10214 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10376:	6828      	ldr	r0, [r5, #0]
   10378:	4b0a      	ldr	r3, [pc, #40]	; (103a4 <spi_init+0x1a4>)
   1037a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1037c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1037e:	b2c0      	uxtb	r0, r0
   10380:	4b13      	ldr	r3, [pc, #76]	; (103d0 <spi_init+0x1d0>)
   10382:	4798      	blx	r3
   10384:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   10386:	ab02      	add	r3, sp, #8
   10388:	1d9a      	adds	r2, r3, #6
   1038a:	69b0      	ldr	r0, [r6, #24]
   1038c:	4b11      	ldr	r3, [pc, #68]	; (103d4 <spi_init+0x1d4>)
   1038e:	4798      	blx	r3
   10390:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   10392:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   10394:	2b00      	cmp	r3, #0
   10396:	d000      	beq.n	1039a <spi_init+0x19a>
   10398:	e73c      	b.n	10214 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1039a:	ab02      	add	r3, sp, #8
   1039c:	3306      	adds	r3, #6
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	733b      	strb	r3, [r7, #12]
   103a2:	e7bf      	b.n	10324 <spi_init+0x124>
   103a4:	00010041 	.word	0x00010041
   103a8:	40000400 	.word	0x40000400
   103ac:	000114f9 	.word	0x000114f9
   103b0:	0001146d 	.word	0x0001146d
   103b4:	0000fe7d 	.word	0x0000fe7d
   103b8:	0001066d 	.word	0x0001066d
   103bc:	0001007d 	.word	0x0001007d
   103c0:	200014b0 	.word	0x200014b0
   103c4:	0000fec9 	.word	0x0000fec9
   103c8:	000115f1 	.word	0x000115f1
   103cc:	41002000 	.word	0x41002000
   103d0:	00011515 	.word	0x00011515
   103d4:	0000fdbf 	.word	0x0000fdbf

000103d8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   103d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   103da:	46d6      	mov	lr, sl
   103dc:	4647      	mov	r7, r8
   103de:	b580      	push	{r7, lr}
   103e0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   103e2:	2438      	movs	r4, #56	; 0x38
   103e4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   103e6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   103e8:	2d05      	cmp	r5, #5
   103ea:	d002      	beq.n	103f2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   103ec:	3412      	adds	r4, #18
	if (length == 0) {
   103ee:	2a00      	cmp	r2, #0
   103f0:	d105      	bne.n	103fe <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   103f2:	0020      	movs	r0, r4
   103f4:	b003      	add	sp, #12
   103f6:	bc0c      	pop	{r2, r3}
   103f8:	4690      	mov	r8, r2
   103fa:	469a      	mov	sl, r3
   103fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   103fe:	79c4      	ldrb	r4, [r0, #7]
   10400:	2c00      	cmp	r4, #0
   10402:	d144      	bne.n	1048e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   10404:	341c      	adds	r4, #28
   10406:	e7f4      	b.n	103f2 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10408:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1040a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1040c:	423c      	tst	r4, r7
   1040e:	d0fc      	beq.n	1040a <spi_read_buffer_wait+0x32>
   10410:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   10412:	423c      	tst	r4, r7
   10414:	d01a      	beq.n	1044c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10416:	4644      	mov	r4, r8
   10418:	62ac      	str	r4, [r5, #40]	; 0x28
   1041a:	e017      	b.n	1044c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1041c:	7984      	ldrb	r4, [r0, #6]
   1041e:	2c01      	cmp	r4, #1
   10420:	d026      	beq.n	10470 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10422:	6aad      	ldr	r5, [r5, #40]	; 0x28
   10424:	b2ec      	uxtb	r4, r5
   10426:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   10428:	9c01      	ldr	r4, [sp, #4]
   1042a:	2c00      	cmp	r4, #0
   1042c:	d13a      	bne.n	104a4 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1042e:	1c75      	adds	r5, r6, #1
   10430:	b2ad      	uxth	r5, r5
   10432:	4664      	mov	r4, ip
   10434:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10436:	7984      	ldrb	r4, [r0, #6]
   10438:	2c01      	cmp	r4, #1
   1043a:	d01e      	beq.n	1047a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1043c:	002e      	movs	r6, r5
	while (length--) {
   1043e:	3a01      	subs	r2, #1
   10440:	b292      	uxth	r2, r2
   10442:	4552      	cmp	r2, sl
   10444:	d01f      	beq.n	10486 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   10446:	7944      	ldrb	r4, [r0, #5]
   10448:	2c01      	cmp	r4, #1
   1044a:	d0dd      	beq.n	10408 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1044c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1044e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   10450:	421c      	tst	r4, r3
   10452:	d0fc      	beq.n	1044e <spi_read_buffer_wait+0x76>
   10454:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   10456:	421c      	tst	r4, r3
   10458:	d017      	beq.n	1048a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1045a:	8b6c      	ldrh	r4, [r5, #26]
   1045c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1045e:	2400      	movs	r4, #0
   10460:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10462:	4664      	mov	r4, ip
   10464:	421c      	tst	r4, r3
   10466:	d0d9      	beq.n	1041c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10468:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1046a:	241e      	movs	r4, #30
   1046c:	9401      	str	r4, [sp, #4]
   1046e:	e7d5      	b.n	1041c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10470:	6aac      	ldr	r4, [r5, #40]	; 0x28
   10472:	05e4      	lsls	r4, r4, #23
   10474:	0de4      	lsrs	r4, r4, #23
   10476:	46a4      	mov	ip, r4
   10478:	e7d6      	b.n	10428 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1047a:	3602      	adds	r6, #2
   1047c:	b2b6      	uxth	r6, r6
   1047e:	4664      	mov	r4, ip
   10480:	0a24      	lsrs	r4, r4, #8
   10482:	554c      	strb	r4, [r1, r5]
   10484:	e7db      	b.n	1043e <spi_read_buffer_wait+0x66>
   10486:	9c01      	ldr	r4, [sp, #4]
   10488:	e7b3      	b.n	103f2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1048a:	2410      	movs	r4, #16
   1048c:	e7b1      	b.n	103f2 <spi_read_buffer_wait+0x1a>
	while (length--) {
   1048e:	3a01      	subs	r2, #1
   10490:	b292      	uxth	r2, r2
   10492:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   10494:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10496:	05db      	lsls	r3, r3, #23
   10498:	0ddb      	lsrs	r3, r3, #23
   1049a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1049c:	2304      	movs	r3, #4
	while (length--) {
   1049e:	4c02      	ldr	r4, [pc, #8]	; (104a8 <spi_read_buffer_wait+0xd0>)
   104a0:	46a2      	mov	sl, r4
   104a2:	e7d0      	b.n	10446 <spi_read_buffer_wait+0x6e>
   104a4:	9c01      	ldr	r4, [sp, #4]
   104a6:	e7a4      	b.n	103f2 <spi_read_buffer_wait+0x1a>
   104a8:	0000ffff 	.word	0x0000ffff

000104ac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   104ac:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   104ae:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   104b0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   104b2:	2c01      	cmp	r4, #1
   104b4:	d001      	beq.n	104ba <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   104b6:	0018      	movs	r0, r3
   104b8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   104ba:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   104bc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   104be:	2c00      	cmp	r4, #0
   104c0:	d1f9      	bne.n	104b6 <spi_select_slave+0xa>
		if (select) {
   104c2:	2a00      	cmp	r2, #0
   104c4:	d058      	beq.n	10578 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   104c6:	784b      	ldrb	r3, [r1, #1]
   104c8:	2b00      	cmp	r3, #0
   104ca:	d044      	beq.n	10556 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   104cc:	6803      	ldr	r3, [r0, #0]
   104ce:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   104d0:	07db      	lsls	r3, r3, #31
   104d2:	d410      	bmi.n	104f6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   104d4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   104d6:	09d1      	lsrs	r1, r2, #7
		return NULL;
   104d8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   104da:	2900      	cmp	r1, #0
   104dc:	d104      	bne.n	104e8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   104de:	0953      	lsrs	r3, r2, #5
   104e0:	01db      	lsls	r3, r3, #7
   104e2:	492e      	ldr	r1, [pc, #184]	; (1059c <spi_select_slave+0xf0>)
   104e4:	468c      	mov	ip, r1
   104e6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   104e8:	211f      	movs	r1, #31
   104ea:	4011      	ands	r1, r2
   104ec:	2201      	movs	r2, #1
   104ee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   104f0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   104f2:	2305      	movs	r3, #5
   104f4:	e7df      	b.n	104b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   104f6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   104f8:	09d4      	lsrs	r4, r2, #7
		return NULL;
   104fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   104fc:	2c00      	cmp	r4, #0
   104fe:	d104      	bne.n	1050a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   10500:	0953      	lsrs	r3, r2, #5
   10502:	01db      	lsls	r3, r3, #7
   10504:	4c25      	ldr	r4, [pc, #148]	; (1059c <spi_select_slave+0xf0>)
   10506:	46a4      	mov	ip, r4
   10508:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1050a:	241f      	movs	r4, #31
   1050c:	4014      	ands	r4, r2
   1050e:	2201      	movs	r2, #1
   10510:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   10512:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10514:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10516:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   10518:	07d2      	lsls	r2, r2, #31
   1051a:	d501      	bpl.n	10520 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1051c:	788a      	ldrb	r2, [r1, #2]
   1051e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   10520:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   10522:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   10524:	2a00      	cmp	r2, #0
   10526:	d1c6      	bne.n	104b6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10528:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1052a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1052c:	7e13      	ldrb	r3, [r2, #24]
   1052e:	420b      	tst	r3, r1
   10530:	d0fc      	beq.n	1052c <spi_select_slave+0x80>
   10532:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   10534:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   10536:	0749      	lsls	r1, r1, #29
   10538:	d5bd      	bpl.n	104b6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1053a:	8b53      	ldrh	r3, [r2, #26]
   1053c:	075b      	lsls	r3, r3, #29
   1053e:	d501      	bpl.n	10544 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10540:	2304      	movs	r3, #4
   10542:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10544:	7983      	ldrb	r3, [r0, #6]
   10546:	2b01      	cmp	r3, #1
   10548:	d002      	beq.n	10550 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1054a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1054c:	2300      	movs	r3, #0
   1054e:	e7b2      	b.n	104b6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10550:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10552:	2300      	movs	r3, #0
   10554:	e7af      	b.n	104b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   10556:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10558:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1055a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1055c:	2900      	cmp	r1, #0
   1055e:	d104      	bne.n	1056a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   10560:	0953      	lsrs	r3, r2, #5
   10562:	01db      	lsls	r3, r3, #7
   10564:	490d      	ldr	r1, [pc, #52]	; (1059c <spi_select_slave+0xf0>)
   10566:	468c      	mov	ip, r1
   10568:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1056a:	211f      	movs	r1, #31
   1056c:	4011      	ands	r1, r2
   1056e:	2201      	movs	r2, #1
   10570:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   10572:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   10574:	2300      	movs	r3, #0
   10576:	e79e      	b.n	104b6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   10578:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1057a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1057c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1057e:	2900      	cmp	r1, #0
   10580:	d104      	bne.n	1058c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   10582:	0953      	lsrs	r3, r2, #5
   10584:	01db      	lsls	r3, r3, #7
   10586:	4905      	ldr	r1, [pc, #20]	; (1059c <spi_select_slave+0xf0>)
   10588:	468c      	mov	ip, r1
   1058a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1058c:	211f      	movs	r1, #31
   1058e:	4011      	ands	r1, r2
   10590:	2201      	movs	r2, #1
   10592:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10594:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   10596:	2300      	movs	r3, #0
   10598:	e78d      	b.n	104b6 <spi_select_slave+0xa>
   1059a:	46c0      	nop			; (mov r8, r8)
   1059c:	41004400 	.word	0x41004400

000105a0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   105a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   105a2:	46de      	mov	lr, fp
   105a4:	4657      	mov	r7, sl
   105a6:	464e      	mov	r6, r9
   105a8:	4645      	mov	r5, r8
   105aa:	b5e0      	push	{r5, r6, r7, lr}
   105ac:	b083      	sub	sp, #12
   105ae:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   105b0:	2338      	movs	r3, #56	; 0x38
   105b2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   105b4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   105b6:	2c05      	cmp	r4, #5
   105b8:	d002      	beq.n	105c0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   105ba:	3312      	adds	r3, #18
	if (length == 0) {
   105bc:	2a00      	cmp	r2, #0
   105be:	d14b      	bne.n	10658 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   105c0:	0018      	movs	r0, r3
   105c2:	b003      	add	sp, #12
   105c4:	bc3c      	pop	{r2, r3, r4, r5}
   105c6:	4690      	mov	r8, r2
   105c8:	4699      	mov	r9, r3
   105ca:	46a2      	mov	sl, r4
   105cc:	46ab      	mov	fp, r5
   105ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   105d0:	3702      	adds	r7, #2
   105d2:	b2bf      	uxth	r7, r7
   105d4:	4641      	mov	r1, r8
   105d6:	4653      	mov	r3, sl
   105d8:	5c59      	ldrb	r1, [r3, r1]
   105da:	0209      	lsls	r1, r1, #8
   105dc:	465b      	mov	r3, fp
   105de:	430b      	orrs	r3, r1
   105e0:	e018      	b.n	10614 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   105e2:	7983      	ldrb	r3, [r0, #6]
   105e4:	2b01      	cmp	r3, #1
   105e6:	d02a      	beq.n	1063e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   105e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   105ea:	3e01      	subs	r6, #1
   105ec:	b2b6      	uxth	r6, r6
   105ee:	4566      	cmp	r6, ip
   105f0:	d027      	beq.n	10642 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   105f2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   105f4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   105f6:	4223      	tst	r3, r4
   105f8:	d0fc      	beq.n	105f4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   105fa:	1c7b      	adds	r3, r7, #1
   105fc:	b29b      	uxth	r3, r3
   105fe:	4698      	mov	r8, r3
   10600:	4653      	mov	r3, sl
   10602:	5ddb      	ldrb	r3, [r3, r7]
   10604:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10606:	7981      	ldrb	r1, [r0, #6]
   10608:	2901      	cmp	r1, #1
   1060a:	d0e1      	beq.n	105d0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1060c:	4669      	mov	r1, sp
   1060e:	80cb      	strh	r3, [r1, #6]
   10610:	88cb      	ldrh	r3, [r1, #6]
   10612:	4647      	mov	r7, r8
   10614:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   10616:	4221      	tst	r1, r4
   10618:	d002      	beq.n	10620 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1061a:	05db      	lsls	r3, r3, #23
   1061c:	0ddb      	lsrs	r3, r3, #23
   1061e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   10620:	79c3      	ldrb	r3, [r0, #7]
   10622:	2b00      	cmp	r3, #0
   10624:	d0e1      	beq.n	105ea <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10626:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10628:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1062a:	422b      	tst	r3, r5
   1062c:	d0fc      	beq.n	10628 <spi_write_buffer_wait+0x88>
   1062e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   10630:	422b      	tst	r3, r5
   10632:	d0da      	beq.n	105ea <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10634:	8b53      	ldrh	r3, [r2, #26]
   10636:	422b      	tst	r3, r5
   10638:	d0d3      	beq.n	105e2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1063a:	8355      	strh	r5, [r2, #26]
   1063c:	e7d1      	b.n	105e2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1063e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10640:	e7d3      	b.n	105ea <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   10642:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   10644:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   10646:	2a01      	cmp	r2, #1
   10648:	d1ba      	bne.n	105c0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1064a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1064c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1064e:	7e0b      	ldrb	r3, [r1, #24]
   10650:	4213      	tst	r3, r2
   10652:	d0fc      	beq.n	1064e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   10654:	2300      	movs	r3, #0
   10656:	e7b3      	b.n	105c0 <spi_write_buffer_wait+0x20>
	while (length--) {
   10658:	3a01      	subs	r2, #1
   1065a:	b296      	uxth	r6, r2
   1065c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1065e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   10660:	2504      	movs	r5, #4
	while (length--) {
   10662:	4b01      	ldr	r3, [pc, #4]	; (10668 <spi_write_buffer_wait+0xc8>)
   10664:	469c      	mov	ip, r3
   10666:	e7c4      	b.n	105f2 <spi_write_buffer_wait+0x52>
   10668:	0000ffff 	.word	0x0000ffff

0001066c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1066e:	0080      	lsls	r0, r0, #2
   10670:	4b70      	ldr	r3, [pc, #448]	; (10834 <_spi_interrupt_handler+0x1c8>)
   10672:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10674:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   10676:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   10678:	5ce7      	ldrb	r7, [r4, r3]
   1067a:	2236      	movs	r2, #54	; 0x36
   1067c:	5ca2      	ldrb	r2, [r4, r2]
   1067e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   10680:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   10682:	7db5      	ldrb	r5, [r6, #22]
   10684:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   10686:	07eb      	lsls	r3, r5, #31
   10688:	d502      	bpl.n	10690 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1068a:	7963      	ldrb	r3, [r4, #5]
   1068c:	2b01      	cmp	r3, #1
   1068e:	d01e      	beq.n	106ce <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   10690:	076b      	lsls	r3, r5, #29
   10692:	d511      	bpl.n	106b8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10694:	8b73      	ldrh	r3, [r6, #26]
   10696:	075b      	lsls	r3, r3, #29
   10698:	d55a      	bpl.n	10750 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1069a:	7a63      	ldrb	r3, [r4, #9]
   1069c:	2b01      	cmp	r3, #1
   1069e:	d008      	beq.n	106b2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   106a0:	221e      	movs	r2, #30
   106a2:	2338      	movs	r3, #56	; 0x38
   106a4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   106a6:	3b35      	subs	r3, #53	; 0x35
   106a8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   106aa:	3302      	adds	r3, #2
   106ac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   106ae:	073b      	lsls	r3, r7, #28
   106b0:	d44a      	bmi.n	10748 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   106b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   106b4:	2304      	movs	r3, #4
   106b6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   106b8:	07ab      	lsls	r3, r5, #30
   106ba:	d503      	bpl.n	106c4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   106bc:	7963      	ldrb	r3, [r4, #5]
   106be:	2b01      	cmp	r3, #1
   106c0:	d100      	bne.n	106c4 <_spi_interrupt_handler+0x58>
   106c2:	e097      	b.n	107f4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   106c4:	b26d      	sxtb	r5, r5
   106c6:	2d00      	cmp	r5, #0
   106c8:	da00      	bge.n	106cc <_spi_interrupt_handler+0x60>
   106ca:	e0a9      	b.n	10820 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   106cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   106ce:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   106d0:	2b00      	cmp	r3, #0
   106d2:	d022      	beq.n	1071a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   106d4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   106d6:	2b00      	cmp	r3, #0
   106d8:	d0da      	beq.n	10690 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   106da:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   106dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   106de:	7813      	ldrb	r3, [r2, #0]
   106e0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   106e2:	1c50      	adds	r0, r2, #1
   106e4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   106e6:	79a0      	ldrb	r0, [r4, #6]
   106e8:	2801      	cmp	r0, #1
   106ea:	d027      	beq.n	1073c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   106ec:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   106ee:	05db      	lsls	r3, r3, #23
   106f0:	0ddb      	lsrs	r3, r3, #23
   106f2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   106f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   106f6:	3b01      	subs	r3, #1
   106f8:	b29b      	uxth	r3, r3
   106fa:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   106fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   106fe:	b29b      	uxth	r3, r3
   10700:	2b00      	cmp	r3, #0
   10702:	d1c5      	bne.n	10690 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10704:	3301      	adds	r3, #1
   10706:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   10708:	7a63      	ldrb	r3, [r4, #9]
   1070a:	2b01      	cmp	r3, #1
   1070c:	d1c0      	bne.n	10690 <_spi_interrupt_handler+0x24>
   1070e:	79e3      	ldrb	r3, [r4, #7]
   10710:	2b00      	cmp	r3, #0
   10712:	d1bd      	bne.n	10690 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10714:	3302      	adds	r3, #2
   10716:	75b3      	strb	r3, [r6, #22]
   10718:	e7ba      	b.n	10690 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1071a:	4b47      	ldr	r3, [pc, #284]	; (10838 <_spi_interrupt_handler+0x1cc>)
   1071c:	881b      	ldrh	r3, [r3, #0]
   1071e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10720:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10722:	3b01      	subs	r3, #1
   10724:	b29b      	uxth	r3, r3
   10726:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10728:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1072a:	b29b      	uxth	r3, r3
   1072c:	2b00      	cmp	r3, #0
   1072e:	d101      	bne.n	10734 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10730:	3301      	adds	r3, #1
   10732:	7533      	strb	r3, [r6, #20]
		if (0
   10734:	7963      	ldrb	r3, [r4, #5]
   10736:	2b01      	cmp	r3, #1
   10738:	d0cc      	beq.n	106d4 <_spi_interrupt_handler+0x68>
   1073a:	e7a9      	b.n	10690 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1073c:	7850      	ldrb	r0, [r2, #1]
   1073e:	0200      	lsls	r0, r0, #8
   10740:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   10742:	3202      	adds	r2, #2
   10744:	62e2      	str	r2, [r4, #44]	; 0x2c
   10746:	e7d2      	b.n	106ee <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   10748:	0020      	movs	r0, r4
   1074a:	69a3      	ldr	r3, [r4, #24]
   1074c:	4798      	blx	r3
   1074e:	e7b0      	b.n	106b2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   10750:	7a63      	ldrb	r3, [r4, #9]
   10752:	2b01      	cmp	r3, #1
   10754:	d028      	beq.n	107a8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10756:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   10758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1075a:	05db      	lsls	r3, r3, #23
   1075c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1075e:	b2da      	uxtb	r2, r3
   10760:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10762:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   10764:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10766:	1c51      	adds	r1, r2, #1
   10768:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1076a:	79a1      	ldrb	r1, [r4, #6]
   1076c:	2901      	cmp	r1, #1
   1076e:	d034      	beq.n	107da <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   10770:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10772:	3b01      	subs	r3, #1
   10774:	b29b      	uxth	r3, r3
   10776:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   10778:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1077a:	b29b      	uxth	r3, r3
   1077c:	2b00      	cmp	r3, #0
   1077e:	d000      	beq.n	10782 <_spi_interrupt_handler+0x116>
   10780:	e79a      	b.n	106b8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   10782:	2200      	movs	r2, #0
   10784:	3338      	adds	r3, #56	; 0x38
   10786:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   10788:	3b34      	subs	r3, #52	; 0x34
   1078a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1078c:	7a63      	ldrb	r3, [r4, #9]
   1078e:	2b02      	cmp	r3, #2
   10790:	d029      	beq.n	107e6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   10792:	7a63      	ldrb	r3, [r4, #9]
   10794:	2b00      	cmp	r3, #0
   10796:	d000      	beq.n	1079a <_spi_interrupt_handler+0x12e>
   10798:	e78e      	b.n	106b8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1079a:	07bb      	lsls	r3, r7, #30
   1079c:	d400      	bmi.n	107a0 <_spi_interrupt_handler+0x134>
   1079e:	e78b      	b.n	106b8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   107a0:	0020      	movs	r0, r4
   107a2:	6923      	ldr	r3, [r4, #16]
   107a4:	4798      	blx	r3
   107a6:	e787      	b.n	106b8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   107a8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   107aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   107ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   107ae:	3b01      	subs	r3, #1
   107b0:	b29b      	uxth	r3, r3
   107b2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   107b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   107b6:	b29b      	uxth	r3, r3
   107b8:	2b00      	cmp	r3, #0
   107ba:	d000      	beq.n	107be <_spi_interrupt_handler+0x152>
   107bc:	e77c      	b.n	106b8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   107be:	3304      	adds	r3, #4
   107c0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   107c2:	2200      	movs	r2, #0
   107c4:	3334      	adds	r3, #52	; 0x34
   107c6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   107c8:	3b35      	subs	r3, #53	; 0x35
   107ca:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   107cc:	07fb      	lsls	r3, r7, #31
   107ce:	d400      	bmi.n	107d2 <_spi_interrupt_handler+0x166>
   107d0:	e772      	b.n	106b8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   107d2:	0020      	movs	r0, r4
   107d4:	68e3      	ldr	r3, [r4, #12]
   107d6:	4798      	blx	r3
   107d8:	e76e      	b.n	106b8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   107da:	0a1b      	lsrs	r3, r3, #8
   107dc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   107de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   107e0:	3301      	adds	r3, #1
   107e2:	62a3      	str	r3, [r4, #40]	; 0x28
   107e4:	e7c4      	b.n	10770 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   107e6:	077b      	lsls	r3, r7, #29
   107e8:	d400      	bmi.n	107ec <_spi_interrupt_handler+0x180>
   107ea:	e765      	b.n	106b8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   107ec:	0020      	movs	r0, r4
   107ee:	6963      	ldr	r3, [r4, #20]
   107f0:	4798      	blx	r3
   107f2:	e761      	b.n	106b8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   107f4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   107f6:	2b01      	cmp	r3, #1
   107f8:	d000      	beq.n	107fc <_spi_interrupt_handler+0x190>
   107fa:	e763      	b.n	106c4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   107fc:	79e3      	ldrb	r3, [r4, #7]
   107fe:	2b00      	cmp	r3, #0
   10800:	d000      	beq.n	10804 <_spi_interrupt_handler+0x198>
   10802:	e75f      	b.n	106c4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10804:	3302      	adds	r3, #2
   10806:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   10808:	3301      	adds	r3, #1
   1080a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1080c:	2200      	movs	r2, #0
   1080e:	3335      	adds	r3, #53	; 0x35
   10810:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10812:	07fb      	lsls	r3, r7, #31
   10814:	d400      	bmi.n	10818 <_spi_interrupt_handler+0x1ac>
   10816:	e755      	b.n	106c4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   10818:	0020      	movs	r0, r4
   1081a:	68e3      	ldr	r3, [r4, #12]
   1081c:	4798      	blx	r3
   1081e:	e751      	b.n	106c4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10820:	2380      	movs	r3, #128	; 0x80
   10822:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10824:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   10826:	067b      	lsls	r3, r7, #25
   10828:	d400      	bmi.n	1082c <_spi_interrupt_handler+0x1c0>
   1082a:	e74f      	b.n	106cc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1082c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1082e:	0020      	movs	r0, r4
   10830:	4798      	blx	r3
}
   10832:	e74b      	b.n	106cc <_spi_interrupt_handler+0x60>
   10834:	200014b0 	.word	0x200014b0
   10838:	200014c8 	.word	0x200014c8

0001083c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1083c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083e:	46de      	mov	lr, fp
   10840:	4657      	mov	r7, sl
   10842:	464e      	mov	r6, r9
   10844:	4645      	mov	r5, r8
   10846:	b5e0      	push	{r5, r6, r7, lr}
   10848:	b091      	sub	sp, #68	; 0x44
   1084a:	0005      	movs	r5, r0
   1084c:	000c      	movs	r4, r1
   1084e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10850:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10852:	0008      	movs	r0, r1
   10854:	4bbc      	ldr	r3, [pc, #752]	; (10b48 <usart_init+0x30c>)
   10856:	4798      	blx	r3
   10858:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1085a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1085c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1085e:	07db      	lsls	r3, r3, #31
   10860:	d506      	bpl.n	10870 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   10862:	b011      	add	sp, #68	; 0x44
   10864:	bc3c      	pop	{r2, r3, r4, r5}
   10866:	4690      	mov	r8, r2
   10868:	4699      	mov	r9, r3
   1086a:	46a2      	mov	sl, r4
   1086c:	46ab      	mov	fp, r5
   1086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10870:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   10872:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10874:	079b      	lsls	r3, r3, #30
   10876:	d4f4      	bmi.n	10862 <usart_init+0x26>
   10878:	49b4      	ldr	r1, [pc, #720]	; (10b4c <usart_init+0x310>)
   1087a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1087c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1087e:	2301      	movs	r3, #1
   10880:	40bb      	lsls	r3, r7
   10882:	4303      	orrs	r3, r0
   10884:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10886:	a90f      	add	r1, sp, #60	; 0x3c
   10888:	272d      	movs	r7, #45	; 0x2d
   1088a:	5df3      	ldrb	r3, [r6, r7]
   1088c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1088e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10890:	b2d3      	uxtb	r3, r2
   10892:	9302      	str	r3, [sp, #8]
   10894:	0018      	movs	r0, r3
   10896:	4bae      	ldr	r3, [pc, #696]	; (10b50 <usart_init+0x314>)
   10898:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1089a:	9802      	ldr	r0, [sp, #8]
   1089c:	4bad      	ldr	r3, [pc, #692]	; (10b54 <usart_init+0x318>)
   1089e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   108a0:	5df0      	ldrb	r0, [r6, r7]
   108a2:	2100      	movs	r1, #0
   108a4:	4bac      	ldr	r3, [pc, #688]	; (10b58 <usart_init+0x31c>)
   108a6:	4798      	blx	r3
	module->character_size = config->character_size;
   108a8:	7af3      	ldrb	r3, [r6, #11]
   108aa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   108ac:	2324      	movs	r3, #36	; 0x24
   108ae:	5cf3      	ldrb	r3, [r6, r3]
   108b0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   108b2:	2325      	movs	r3, #37	; 0x25
   108b4:	5cf3      	ldrb	r3, [r6, r3]
   108b6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   108b8:	7ef3      	ldrb	r3, [r6, #27]
   108ba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   108bc:	7f33      	ldrb	r3, [r6, #28]
   108be:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   108c0:	682b      	ldr	r3, [r5, #0]
   108c2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   108c4:	0018      	movs	r0, r3
   108c6:	4ba0      	ldr	r3, [pc, #640]	; (10b48 <usart_init+0x30c>)
   108c8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   108ca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   108cc:	2200      	movs	r2, #0
   108ce:	230e      	movs	r3, #14
   108d0:	a906      	add	r1, sp, #24
   108d2:	468c      	mov	ip, r1
   108d4:	4463      	add	r3, ip
   108d6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   108d8:	8a32      	ldrh	r2, [r6, #16]
   108da:	9202      	str	r2, [sp, #8]
   108dc:	2380      	movs	r3, #128	; 0x80
   108de:	01db      	lsls	r3, r3, #7
   108e0:	429a      	cmp	r2, r3
   108e2:	d100      	bne.n	108e6 <usart_init+0xaa>
   108e4:	e09e      	b.n	10a24 <usart_init+0x1e8>
   108e6:	d90f      	bls.n	10908 <usart_init+0xcc>
   108e8:	23c0      	movs	r3, #192	; 0xc0
   108ea:	01db      	lsls	r3, r3, #7
   108ec:	9a02      	ldr	r2, [sp, #8]
   108ee:	429a      	cmp	r2, r3
   108f0:	d100      	bne.n	108f4 <usart_init+0xb8>
   108f2:	e092      	b.n	10a1a <usart_init+0x1de>
   108f4:	2380      	movs	r3, #128	; 0x80
   108f6:	021b      	lsls	r3, r3, #8
   108f8:	429a      	cmp	r2, r3
   108fa:	d000      	beq.n	108fe <usart_init+0xc2>
   108fc:	e11f      	b.n	10b3e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   108fe:	2303      	movs	r3, #3
   10900:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10902:	2300      	movs	r3, #0
   10904:	9307      	str	r3, [sp, #28]
   10906:	e008      	b.n	1091a <usart_init+0xde>
	switch (config->sample_rate) {
   10908:	2380      	movs	r3, #128	; 0x80
   1090a:	019b      	lsls	r3, r3, #6
   1090c:	429a      	cmp	r2, r3
   1090e:	d000      	beq.n	10912 <usart_init+0xd6>
   10910:	e115      	b.n	10b3e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10912:	2310      	movs	r3, #16
   10914:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10916:	3b0f      	subs	r3, #15
   10918:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1091a:	6833      	ldr	r3, [r6, #0]
   1091c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1091e:	68f3      	ldr	r3, [r6, #12]
   10920:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10922:	6973      	ldr	r3, [r6, #20]
   10924:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10926:	7e33      	ldrb	r3, [r6, #24]
   10928:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1092a:	2326      	movs	r3, #38	; 0x26
   1092c:	5cf3      	ldrb	r3, [r6, r3]
   1092e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10930:	6873      	ldr	r3, [r6, #4]
   10932:	4699      	mov	r9, r3
	switch (transfer_mode)
   10934:	2b00      	cmp	r3, #0
   10936:	d100      	bne.n	1093a <usart_init+0xfe>
   10938:	e0a0      	b.n	10a7c <usart_init+0x240>
   1093a:	2380      	movs	r3, #128	; 0x80
   1093c:	055b      	lsls	r3, r3, #21
   1093e:	4599      	cmp	r9, r3
   10940:	d100      	bne.n	10944 <usart_init+0x108>
   10942:	e084      	b.n	10a4e <usart_init+0x212>
	if(config->encoding_format_enable) {
   10944:	7e73      	ldrb	r3, [r6, #25]
   10946:	2b00      	cmp	r3, #0
   10948:	d002      	beq.n	10950 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1094a:	7eb3      	ldrb	r3, [r6, #26]
   1094c:	4642      	mov	r2, r8
   1094e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10950:	682a      	ldr	r2, [r5, #0]
   10952:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   10954:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10956:	2b00      	cmp	r3, #0
   10958:	d1fc      	bne.n	10954 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1095a:	330e      	adds	r3, #14
   1095c:	aa06      	add	r2, sp, #24
   1095e:	4694      	mov	ip, r2
   10960:	4463      	add	r3, ip
   10962:	881b      	ldrh	r3, [r3, #0]
   10964:	4642      	mov	r2, r8
   10966:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   10968:	9b05      	ldr	r3, [sp, #20]
   1096a:	9a03      	ldr	r2, [sp, #12]
   1096c:	4313      	orrs	r3, r2
   1096e:	9a04      	ldr	r2, [sp, #16]
   10970:	4313      	orrs	r3, r2
   10972:	464a      	mov	r2, r9
   10974:	4313      	orrs	r3, r2
   10976:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10978:	465b      	mov	r3, fp
   1097a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1097c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1097e:	4653      	mov	r3, sl
   10980:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   10982:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   10984:	2327      	movs	r3, #39	; 0x27
   10986:	5cf3      	ldrb	r3, [r6, r3]
   10988:	2b00      	cmp	r3, #0
   1098a:	d101      	bne.n	10990 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1098c:	3304      	adds	r3, #4
   1098e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10990:	7e73      	ldrb	r3, [r6, #25]
   10992:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10994:	7f32      	ldrb	r2, [r6, #28]
   10996:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10998:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1099a:	7f72      	ldrb	r2, [r6, #29]
   1099c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1099e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   109a0:	2224      	movs	r2, #36	; 0x24
   109a2:	5cb2      	ldrb	r2, [r6, r2]
   109a4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   109a6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   109a8:	2225      	movs	r2, #37	; 0x25
   109aa:	5cb2      	ldrb	r2, [r6, r2]
   109ac:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   109ae:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   109b0:	7ab1      	ldrb	r1, [r6, #10]
   109b2:	7af2      	ldrb	r2, [r6, #11]
   109b4:	4311      	orrs	r1, r2
   109b6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   109b8:	8933      	ldrh	r3, [r6, #8]
   109ba:	2bff      	cmp	r3, #255	; 0xff
   109bc:	d100      	bne.n	109c0 <usart_init+0x184>
   109be:	e081      	b.n	10ac4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   109c0:	2280      	movs	r2, #128	; 0x80
   109c2:	0452      	lsls	r2, r2, #17
   109c4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   109c6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   109c8:	232c      	movs	r3, #44	; 0x2c
   109ca:	5cf3      	ldrb	r3, [r6, r3]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d103      	bne.n	109d8 <usart_init+0x19c>
   109d0:	4b62      	ldr	r3, [pc, #392]	; (10b5c <usart_init+0x320>)
   109d2:	789b      	ldrb	r3, [r3, #2]
   109d4:	079b      	lsls	r3, r3, #30
   109d6:	d501      	bpl.n	109dc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   109d8:	2380      	movs	r3, #128	; 0x80
   109da:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   109dc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   109de:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   109e0:	2b00      	cmp	r3, #0
   109e2:	d1fc      	bne.n	109de <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   109e4:	4643      	mov	r3, r8
   109e6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   109e8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   109ea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   109ec:	2b00      	cmp	r3, #0
   109ee:	d1fc      	bne.n	109ea <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   109f0:	4643      	mov	r3, r8
   109f2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   109f4:	ab0e      	add	r3, sp, #56	; 0x38
   109f6:	2280      	movs	r2, #128	; 0x80
   109f8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   109fa:	2200      	movs	r2, #0
   109fc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   109fe:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10a00:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10a02:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10a04:	930a      	str	r3, [sp, #40]	; 0x28
   10a06:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10a08:	930b      	str	r3, [sp, #44]	; 0x2c
   10a0a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10a0c:	930c      	str	r3, [sp, #48]	; 0x30
   10a0e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10a10:	9302      	str	r3, [sp, #8]
   10a12:	930d      	str	r3, [sp, #52]	; 0x34
   10a14:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10a16:	ae0a      	add	r6, sp, #40	; 0x28
   10a18:	e063      	b.n	10ae2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10a1a:	2308      	movs	r3, #8
   10a1c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10a1e:	3b07      	subs	r3, #7
   10a20:	9307      	str	r3, [sp, #28]
   10a22:	e77a      	b.n	1091a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   10a24:	6833      	ldr	r3, [r6, #0]
   10a26:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10a28:	68f3      	ldr	r3, [r6, #12]
   10a2a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10a2c:	6973      	ldr	r3, [r6, #20]
   10a2e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10a30:	7e33      	ldrb	r3, [r6, #24]
   10a32:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10a34:	2326      	movs	r3, #38	; 0x26
   10a36:	5cf3      	ldrb	r3, [r6, r3]
   10a38:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10a3a:	6873      	ldr	r3, [r6, #4]
   10a3c:	4699      	mov	r9, r3
	switch (transfer_mode)
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d018      	beq.n	10a74 <usart_init+0x238>
   10a42:	2380      	movs	r3, #128	; 0x80
   10a44:	055b      	lsls	r3, r3, #21
   10a46:	4599      	cmp	r9, r3
   10a48:	d001      	beq.n	10a4e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   10a4a:	2000      	movs	r0, #0
   10a4c:	e025      	b.n	10a9a <usart_init+0x25e>
			if (!config->use_external_clock) {
   10a4e:	2327      	movs	r3, #39	; 0x27
   10a50:	5cf3      	ldrb	r3, [r6, r3]
   10a52:	2b00      	cmp	r3, #0
   10a54:	d000      	beq.n	10a58 <usart_init+0x21c>
   10a56:	e775      	b.n	10944 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10a58:	6a33      	ldr	r3, [r6, #32]
   10a5a:	001f      	movs	r7, r3
   10a5c:	b2c0      	uxtb	r0, r0
   10a5e:	4b40      	ldr	r3, [pc, #256]	; (10b60 <usart_init+0x324>)
   10a60:	4798      	blx	r3
   10a62:	0001      	movs	r1, r0
   10a64:	220e      	movs	r2, #14
   10a66:	ab06      	add	r3, sp, #24
   10a68:	469c      	mov	ip, r3
   10a6a:	4462      	add	r2, ip
   10a6c:	0038      	movs	r0, r7
   10a6e:	4b3d      	ldr	r3, [pc, #244]	; (10b64 <usart_init+0x328>)
   10a70:	4798      	blx	r3
   10a72:	e012      	b.n	10a9a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10a74:	2308      	movs	r3, #8
   10a76:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10a78:	2300      	movs	r3, #0
   10a7a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   10a7c:	2327      	movs	r3, #39	; 0x27
   10a7e:	5cf3      	ldrb	r3, [r6, r3]
   10a80:	2b00      	cmp	r3, #0
   10a82:	d00e      	beq.n	10aa2 <usart_init+0x266>
				status_code =
   10a84:	9b06      	ldr	r3, [sp, #24]
   10a86:	9300      	str	r3, [sp, #0]
   10a88:	9b07      	ldr	r3, [sp, #28]
   10a8a:	220e      	movs	r2, #14
   10a8c:	a906      	add	r1, sp, #24
   10a8e:	468c      	mov	ip, r1
   10a90:	4462      	add	r2, ip
   10a92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10a94:	6a30      	ldr	r0, [r6, #32]
   10a96:	4f34      	ldr	r7, [pc, #208]	; (10b68 <usart_init+0x32c>)
   10a98:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   10a9a:	2800      	cmp	r0, #0
   10a9c:	d000      	beq.n	10aa0 <usart_init+0x264>
   10a9e:	e6e0      	b.n	10862 <usart_init+0x26>
   10aa0:	e750      	b.n	10944 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   10aa2:	6a33      	ldr	r3, [r6, #32]
   10aa4:	001f      	movs	r7, r3
   10aa6:	b2c0      	uxtb	r0, r0
   10aa8:	4b2d      	ldr	r3, [pc, #180]	; (10b60 <usart_init+0x324>)
   10aaa:	4798      	blx	r3
   10aac:	0001      	movs	r1, r0
				status_code =
   10aae:	9b06      	ldr	r3, [sp, #24]
   10ab0:	9300      	str	r3, [sp, #0]
   10ab2:	9b07      	ldr	r3, [sp, #28]
   10ab4:	220e      	movs	r2, #14
   10ab6:	a806      	add	r0, sp, #24
   10ab8:	4684      	mov	ip, r0
   10aba:	4462      	add	r2, ip
   10abc:	0038      	movs	r0, r7
   10abe:	4f2a      	ldr	r7, [pc, #168]	; (10b68 <usart_init+0x32c>)
   10ac0:	47b8      	blx	r7
   10ac2:	e7ea      	b.n	10a9a <usart_init+0x25e>
		if(config->lin_slave_enable) {
   10ac4:	7ef3      	ldrb	r3, [r6, #27]
   10ac6:	2b00      	cmp	r3, #0
   10ac8:	d100      	bne.n	10acc <usart_init+0x290>
   10aca:	e77d      	b.n	109c8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10acc:	2380      	movs	r3, #128	; 0x80
   10ace:	04db      	lsls	r3, r3, #19
   10ad0:	431f      	orrs	r7, r3
   10ad2:	e779      	b.n	109c8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10ad4:	0020      	movs	r0, r4
   10ad6:	4b25      	ldr	r3, [pc, #148]	; (10b6c <usart_init+0x330>)
   10ad8:	4798      	blx	r3
   10ada:	e007      	b.n	10aec <usart_init+0x2b0>
   10adc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10ade:	2f04      	cmp	r7, #4
   10ae0:	d00d      	beq.n	10afe <usart_init+0x2c2>
   10ae2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10ae4:	00bb      	lsls	r3, r7, #2
   10ae6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   10ae8:	2800      	cmp	r0, #0
   10aea:	d0f3      	beq.n	10ad4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   10aec:	1c43      	adds	r3, r0, #1
   10aee:	d0f5      	beq.n	10adc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10af0:	a90e      	add	r1, sp, #56	; 0x38
   10af2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10af4:	0c00      	lsrs	r0, r0, #16
   10af6:	b2c0      	uxtb	r0, r0
   10af8:	4b1d      	ldr	r3, [pc, #116]	; (10b70 <usart_init+0x334>)
   10afa:	4798      	blx	r3
   10afc:	e7ee      	b.n	10adc <usart_init+0x2a0>
		module->callback[i]            = NULL;
   10afe:	2300      	movs	r3, #0
   10b00:	60eb      	str	r3, [r5, #12]
   10b02:	612b      	str	r3, [r5, #16]
   10b04:	616b      	str	r3, [r5, #20]
   10b06:	61ab      	str	r3, [r5, #24]
   10b08:	61eb      	str	r3, [r5, #28]
   10b0a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   10b0c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10b0e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10b10:	2200      	movs	r2, #0
   10b12:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10b14:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10b16:	3330      	adds	r3, #48	; 0x30
   10b18:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   10b1a:	3301      	adds	r3, #1
   10b1c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   10b1e:	3301      	adds	r3, #1
   10b20:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   10b22:	3301      	adds	r3, #1
   10b24:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10b26:	6828      	ldr	r0, [r5, #0]
   10b28:	4b07      	ldr	r3, [pc, #28]	; (10b48 <usart_init+0x30c>)
   10b2a:	4798      	blx	r3
   10b2c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10b2e:	4911      	ldr	r1, [pc, #68]	; (10b74 <usart_init+0x338>)
   10b30:	4b11      	ldr	r3, [pc, #68]	; (10b78 <usart_init+0x33c>)
   10b32:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10b34:	00a4      	lsls	r4, r4, #2
   10b36:	4b11      	ldr	r3, [pc, #68]	; (10b7c <usart_init+0x340>)
   10b38:	50e5      	str	r5, [r4, r3]
	return status_code;
   10b3a:	2000      	movs	r0, #0
   10b3c:	e691      	b.n	10862 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10b3e:	2310      	movs	r3, #16
   10b40:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10b42:	2300      	movs	r3, #0
   10b44:	9307      	str	r3, [sp, #28]
   10b46:	e6e8      	b.n	1091a <usart_init+0xde>
   10b48:	00010041 	.word	0x00010041
   10b4c:	40000400 	.word	0x40000400
   10b50:	000114f9 	.word	0x000114f9
   10b54:	0001146d 	.word	0x0001146d
   10b58:	0000fe7d 	.word	0x0000fe7d
   10b5c:	41002000 	.word	0x41002000
   10b60:	00011515 	.word	0x00011515
   10b64:	0000fdbf 	.word	0x0000fdbf
   10b68:	0000fde9 	.word	0x0000fde9
   10b6c:	0000fec9 	.word	0x0000fec9
   10b70:	000115f1 	.word	0x000115f1
   10b74:	00010d1d 	.word	0x00010d1d
   10b78:	0001007d 	.word	0x0001007d
   10b7c:	200014b0 	.word	0x200014b0

00010b80 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10b80:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10b82:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10b84:	2a00      	cmp	r2, #0
   10b86:	d101      	bne.n	10b8c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10b88:	0018      	movs	r0, r3
   10b8a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   10b8c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   10b8e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10b90:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10b92:	2a00      	cmp	r2, #0
   10b94:	d1f8      	bne.n	10b88 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10b96:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10b98:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   10b9a:	2a00      	cmp	r2, #0
   10b9c:	d1fc      	bne.n	10b98 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   10b9e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10ba0:	2102      	movs	r1, #2
   10ba2:	7e1a      	ldrb	r2, [r3, #24]
   10ba4:	420a      	tst	r2, r1
   10ba6:	d0fc      	beq.n	10ba2 <usart_write_wait+0x22>
	return STATUS_OK;
   10ba8:	2300      	movs	r3, #0
   10baa:	e7ed      	b.n	10b88 <usart_write_wait+0x8>

00010bac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   10bac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   10bae:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   10bb0:	2a00      	cmp	r2, #0
   10bb2:	d101      	bne.n	10bb8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   10bb4:	0018      	movs	r0, r3
   10bb6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   10bb8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10bba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10bbc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   10bbe:	2a00      	cmp	r2, #0
   10bc0:	d1f8      	bne.n	10bb4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10bc2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   10bc4:	7e10      	ldrb	r0, [r2, #24]
   10bc6:	0740      	lsls	r0, r0, #29
   10bc8:	d5f4      	bpl.n	10bb4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   10bca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10bcc:	2b00      	cmp	r3, #0
   10bce:	d1fc      	bne.n	10bca <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10bd0:	8b53      	ldrh	r3, [r2, #26]
   10bd2:	b2db      	uxtb	r3, r3
	if (error_code) {
   10bd4:	0698      	lsls	r0, r3, #26
   10bd6:	d01d      	beq.n	10c14 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   10bd8:	0798      	lsls	r0, r3, #30
   10bda:	d503      	bpl.n	10be4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10bdc:	2302      	movs	r3, #2
   10bde:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   10be0:	3318      	adds	r3, #24
   10be2:	e7e7      	b.n	10bb4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10be4:	0758      	lsls	r0, r3, #29
   10be6:	d503      	bpl.n	10bf0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10be8:	2304      	movs	r3, #4
   10bea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   10bec:	331a      	adds	r3, #26
   10bee:	e7e1      	b.n	10bb4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10bf0:	07d8      	lsls	r0, r3, #31
   10bf2:	d503      	bpl.n	10bfc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10bf4:	2301      	movs	r3, #1
   10bf6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   10bf8:	3312      	adds	r3, #18
   10bfa:	e7db      	b.n	10bb4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   10bfc:	06d8      	lsls	r0, r3, #27
   10bfe:	d503      	bpl.n	10c08 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10c00:	2310      	movs	r3, #16
   10c02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   10c04:	3332      	adds	r3, #50	; 0x32
   10c06:	e7d5      	b.n	10bb4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   10c08:	069b      	lsls	r3, r3, #26
   10c0a:	d503      	bpl.n	10c14 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10c0c:	2320      	movs	r3, #32
   10c0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   10c10:	3321      	adds	r3, #33	; 0x21
   10c12:	e7cf      	b.n	10bb4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   10c14:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   10c16:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   10c18:	2300      	movs	r3, #0
   10c1a:	e7cb      	b.n	10bb4 <usart_read_wait+0x8>

00010c1c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c1e:	0006      	movs	r6, r0
   10c20:	000c      	movs	r4, r1
   10c22:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c24:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10c26:	4b0a      	ldr	r3, [pc, #40]	; (10c50 <_usart_write_buffer+0x34>)
   10c28:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   10c2a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   10c2c:	b29b      	uxth	r3, r3
   10c2e:	2b00      	cmp	r3, #0
   10c30:	d003      	beq.n	10c3a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   10c32:	4b08      	ldr	r3, [pc, #32]	; (10c54 <_usart_write_buffer+0x38>)
   10c34:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10c36:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   10c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   10c3a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   10c3c:	4b05      	ldr	r3, [pc, #20]	; (10c54 <_usart_write_buffer+0x38>)
   10c3e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   10c40:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   10c42:	2205      	movs	r2, #5
   10c44:	2333      	movs	r3, #51	; 0x33
   10c46:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   10c48:	3b32      	subs	r3, #50	; 0x32
   10c4a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   10c4c:	2000      	movs	r0, #0
   10c4e:	e7f3      	b.n	10c38 <_usart_write_buffer+0x1c>
   10c50:	0000f82d 	.word	0x0000f82d
   10c54:	0000f86d 	.word	0x0000f86d

00010c58 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c5a:	0004      	movs	r4, r0
   10c5c:	000d      	movs	r5, r1
   10c5e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c60:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10c62:	4b0f      	ldr	r3, [pc, #60]	; (10ca0 <_usart_read_buffer+0x48>)
   10c64:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   10c66:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10c68:	b29b      	uxth	r3, r3
   10c6a:	2b00      	cmp	r3, #0
   10c6c:	d003      	beq.n	10c76 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   10c6e:	4b0d      	ldr	r3, [pc, #52]	; (10ca4 <_usart_read_buffer+0x4c>)
   10c70:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10c72:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   10c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   10c76:	85a6      	strh	r6, [r4, #44]	; 0x2c
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <_usart_read_buffer+0x4c>)
   10c7a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   10c7c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   10c7e:	2205      	movs	r2, #5
   10c80:	2332      	movs	r3, #50	; 0x32
   10c82:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   10c84:	3b2e      	subs	r3, #46	; 0x2e
   10c86:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   10c88:	7a23      	ldrb	r3, [r4, #8]
   10c8a:	2b00      	cmp	r3, #0
   10c8c:	d001      	beq.n	10c92 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   10c8e:	2320      	movs	r3, #32
   10c90:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   10c92:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   10c94:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   10c96:	2b00      	cmp	r3, #0
   10c98:	d0ec      	beq.n	10c74 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   10c9a:	2308      	movs	r3, #8
   10c9c:	75bb      	strb	r3, [r7, #22]
   10c9e:	e7e9      	b.n	10c74 <_usart_read_buffer+0x1c>
   10ca0:	0000f82d 	.word	0x0000f82d
   10ca4:	0000f86d 	.word	0x0000f86d

00010ca8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   10ca8:	1c93      	adds	r3, r2, #2
   10caa:	009b      	lsls	r3, r3, #2
   10cac:	18c3      	adds	r3, r0, r3
   10cae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   10cb0:	2130      	movs	r1, #48	; 0x30
   10cb2:	2301      	movs	r3, #1
   10cb4:	4093      	lsls	r3, r2
   10cb6:	001a      	movs	r2, r3
   10cb8:	5c43      	ldrb	r3, [r0, r1]
   10cba:	4313      	orrs	r3, r2
   10cbc:	5443      	strb	r3, [r0, r1]
}
   10cbe:	4770      	bx	lr

00010cc0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10cc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10cc2:	2317      	movs	r3, #23
	if (length == 0) {
   10cc4:	2a00      	cmp	r2, #0
   10cc6:	d101      	bne.n	10ccc <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   10cc8:	0018      	movs	r0, r3
   10cca:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   10ccc:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   10cce:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   10cd0:	2c00      	cmp	r4, #0
   10cd2:	d0f9      	beq.n	10cc8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   10cd4:	4b01      	ldr	r3, [pc, #4]	; (10cdc <usart_write_buffer_job+0x1c>)
   10cd6:	4798      	blx	r3
   10cd8:	0003      	movs	r3, r0
   10cda:	e7f5      	b.n	10cc8 <usart_write_buffer_job+0x8>
   10cdc:	00010c1d 	.word	0x00010c1d

00010ce0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10ce0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10ce2:	2317      	movs	r3, #23
	if (length == 0) {
   10ce4:	2a00      	cmp	r2, #0
   10ce6:	d101      	bne.n	10cec <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   10ce8:	0018      	movs	r0, r3
   10cea:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   10cec:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   10cee:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   10cf0:	2c00      	cmp	r4, #0
   10cf2:	d0f9      	beq.n	10ce8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   10cf4:	4b01      	ldr	r3, [pc, #4]	; (10cfc <usart_read_buffer_job+0x1c>)
   10cf6:	4798      	blx	r3
   10cf8:	0003      	movs	r3, r0
   10cfa:	e7f5      	b.n	10ce8 <usart_read_buffer_job+0x8>
   10cfc:	00010c59 	.word	0x00010c59

00010d00 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   10d00:	2900      	cmp	r1, #0
   10d02:	d003      	beq.n	10d0c <usart_get_job_status+0xc>
   10d04:	2901      	cmp	r1, #1
   10d06:	d005      	beq.n	10d14 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   10d08:	2017      	movs	r0, #23
   10d0a:	e002      	b.n	10d12 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   10d0c:	2332      	movs	r3, #50	; 0x32
   10d0e:	5cc0      	ldrb	r0, [r0, r3]
   10d10:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   10d12:	4770      	bx	lr
			status_code = module->tx_status;
   10d14:	2333      	movs	r3, #51	; 0x33
   10d16:	5cc0      	ldrb	r0, [r0, r3]
   10d18:	b2c0      	uxtb	r0, r0
			break;
   10d1a:	e7fa      	b.n	10d12 <usart_get_job_status+0x12>

00010d1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   10d1e:	0080      	lsls	r0, r0, #2
   10d20:	4b62      	ldr	r3, [pc, #392]	; (10eac <_usart_interrupt_handler+0x190>)
   10d22:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10d24:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10d26:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d1fc      	bne.n	10d26 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10d2c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   10d2e:	7da6      	ldrb	r6, [r4, #22]
   10d30:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   10d32:	2330      	movs	r3, #48	; 0x30
   10d34:	5ceb      	ldrb	r3, [r5, r3]
   10d36:	2231      	movs	r2, #49	; 0x31
   10d38:	5caf      	ldrb	r7, [r5, r2]
   10d3a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10d3c:	07f3      	lsls	r3, r6, #31
   10d3e:	d522      	bpl.n	10d86 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   10d40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10d42:	b29b      	uxth	r3, r3
   10d44:	2b00      	cmp	r3, #0
   10d46:	d01c      	beq.n	10d82 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10d48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10d4a:	7813      	ldrb	r3, [r2, #0]
   10d4c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10d4e:	1c51      	adds	r1, r2, #1
   10d50:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10d52:	7969      	ldrb	r1, [r5, #5]
   10d54:	2901      	cmp	r1, #1
   10d56:	d00e      	beq.n	10d76 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10d58:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10d5a:	05db      	lsls	r3, r3, #23
   10d5c:	0ddb      	lsrs	r3, r3, #23
   10d5e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10d60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10d62:	3b01      	subs	r3, #1
   10d64:	b29b      	uxth	r3, r3
   10d66:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d10c      	bne.n	10d86 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10d6c:	3301      	adds	r3, #1
   10d6e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10d70:	3301      	adds	r3, #1
   10d72:	75a3      	strb	r3, [r4, #22]
   10d74:	e007      	b.n	10d86 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10d76:	7851      	ldrb	r1, [r2, #1]
   10d78:	0209      	lsls	r1, r1, #8
   10d7a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   10d7c:	3202      	adds	r2, #2
   10d7e:	62aa      	str	r2, [r5, #40]	; 0x28
   10d80:	e7eb      	b.n	10d5a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10d82:	2301      	movs	r3, #1
   10d84:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10d86:	07b3      	lsls	r3, r6, #30
   10d88:	d506      	bpl.n	10d98 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10d8a:	2302      	movs	r3, #2
   10d8c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   10d8e:	2200      	movs	r2, #0
   10d90:	3331      	adds	r3, #49	; 0x31
   10d92:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10d94:	07fb      	lsls	r3, r7, #31
   10d96:	d41a      	bmi.n	10dce <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10d98:	0773      	lsls	r3, r6, #29
   10d9a:	d565      	bpl.n	10e68 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   10d9c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10d9e:	b29b      	uxth	r3, r3
   10da0:	2b00      	cmp	r3, #0
   10da2:	d05f      	beq.n	10e64 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10da4:	8b63      	ldrh	r3, [r4, #26]
   10da6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10da8:	071a      	lsls	r2, r3, #28
   10daa:	d414      	bmi.n	10dd6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10dac:	223f      	movs	r2, #63	; 0x3f
   10dae:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10db0:	2b00      	cmp	r3, #0
   10db2:	d034      	beq.n	10e1e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10db4:	079a      	lsls	r2, r3, #30
   10db6:	d511      	bpl.n	10ddc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10db8:	221a      	movs	r2, #26
   10dba:	2332      	movs	r3, #50	; 0x32
   10dbc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10dbe:	3b30      	subs	r3, #48	; 0x30
   10dc0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   10dc2:	077b      	lsls	r3, r7, #29
   10dc4:	d550      	bpl.n	10e68 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10dc6:	0028      	movs	r0, r5
   10dc8:	696b      	ldr	r3, [r5, #20]
   10dca:	4798      	blx	r3
   10dcc:	e04c      	b.n	10e68 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10dce:	0028      	movs	r0, r5
   10dd0:	68eb      	ldr	r3, [r5, #12]
   10dd2:	4798      	blx	r3
   10dd4:	e7e0      	b.n	10d98 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10dd6:	2237      	movs	r2, #55	; 0x37
   10dd8:	4013      	ands	r3, r2
   10dda:	e7e9      	b.n	10db0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10ddc:	075a      	lsls	r2, r3, #29
   10dde:	d505      	bpl.n	10dec <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   10de0:	221e      	movs	r2, #30
   10de2:	2332      	movs	r3, #50	; 0x32
   10de4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10de6:	3b2e      	subs	r3, #46	; 0x2e
   10de8:	8363      	strh	r3, [r4, #26]
   10dea:	e7ea      	b.n	10dc2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10dec:	07da      	lsls	r2, r3, #31
   10dee:	d505      	bpl.n	10dfc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   10df0:	2213      	movs	r2, #19
   10df2:	2332      	movs	r3, #50	; 0x32
   10df4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10df6:	3b31      	subs	r3, #49	; 0x31
   10df8:	8363      	strh	r3, [r4, #26]
   10dfa:	e7e2      	b.n	10dc2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10dfc:	06da      	lsls	r2, r3, #27
   10dfe:	d505      	bpl.n	10e0c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   10e00:	2242      	movs	r2, #66	; 0x42
   10e02:	2332      	movs	r3, #50	; 0x32
   10e04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10e06:	3b22      	subs	r3, #34	; 0x22
   10e08:	8363      	strh	r3, [r4, #26]
   10e0a:	e7da      	b.n	10dc2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10e0c:	2220      	movs	r2, #32
   10e0e:	421a      	tst	r2, r3
   10e10:	d0d7      	beq.n	10dc2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10e12:	3221      	adds	r2, #33	; 0x21
   10e14:	2332      	movs	r3, #50	; 0x32
   10e16:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10e18:	3b12      	subs	r3, #18
   10e1a:	8363      	strh	r3, [r4, #26]
   10e1c:	e7d1      	b.n	10dc2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   10e1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10e20:	05db      	lsls	r3, r3, #23
   10e22:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   10e24:	b2da      	uxtb	r2, r3
   10e26:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10e28:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   10e2a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10e2c:	1c51      	adds	r1, r2, #1
   10e2e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10e30:	7969      	ldrb	r1, [r5, #5]
   10e32:	2901      	cmp	r1, #1
   10e34:	d010      	beq.n	10e58 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   10e36:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10e38:	3b01      	subs	r3, #1
   10e3a:	b29b      	uxth	r3, r3
   10e3c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   10e3e:	2b00      	cmp	r3, #0
   10e40:	d112      	bne.n	10e68 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10e42:	3304      	adds	r3, #4
   10e44:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   10e46:	2200      	movs	r2, #0
   10e48:	332e      	adds	r3, #46	; 0x2e
   10e4a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   10e4c:	07bb      	lsls	r3, r7, #30
   10e4e:	d50b      	bpl.n	10e68 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10e50:	0028      	movs	r0, r5
   10e52:	692b      	ldr	r3, [r5, #16]
   10e54:	4798      	blx	r3
   10e56:	e007      	b.n	10e68 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10e58:	0a1b      	lsrs	r3, r3, #8
   10e5a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   10e5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10e5e:	3301      	adds	r3, #1
   10e60:	626b      	str	r3, [r5, #36]	; 0x24
   10e62:	e7e8      	b.n	10e36 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10e64:	2304      	movs	r3, #4
   10e66:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10e68:	06f3      	lsls	r3, r6, #27
   10e6a:	d504      	bpl.n	10e76 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10e6c:	2310      	movs	r3, #16
   10e6e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10e70:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10e72:	06fb      	lsls	r3, r7, #27
   10e74:	d40e      	bmi.n	10e94 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10e76:	06b3      	lsls	r3, r6, #26
   10e78:	d504      	bpl.n	10e84 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10e7a:	2320      	movs	r3, #32
   10e7c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10e7e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10e80:	073b      	lsls	r3, r7, #28
   10e82:	d40b      	bmi.n	10e9c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10e84:	0733      	lsls	r3, r6, #28
   10e86:	d504      	bpl.n	10e92 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10e88:	2308      	movs	r3, #8
   10e8a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10e8c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10e8e:	06bb      	lsls	r3, r7, #26
   10e90:	d408      	bmi.n	10ea4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   10e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10e94:	0028      	movs	r0, r5
   10e96:	69eb      	ldr	r3, [r5, #28]
   10e98:	4798      	blx	r3
   10e9a:	e7ec      	b.n	10e76 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   10e9c:	0028      	movs	r0, r5
   10e9e:	69ab      	ldr	r3, [r5, #24]
   10ea0:	4798      	blx	r3
   10ea2:	e7ef      	b.n	10e84 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10ea4:	6a2b      	ldr	r3, [r5, #32]
   10ea6:	0028      	movs	r0, r5
   10ea8:	4798      	blx	r3
}
   10eaa:	e7f2      	b.n	10e92 <_usart_interrupt_handler+0x176>
   10eac:	200014b0 	.word	0x200014b0

00010eb0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10eb0:	b510      	push	{r4, lr}
	switch (clock_source) {
   10eb2:	2808      	cmp	r0, #8
   10eb4:	d803      	bhi.n	10ebe <system_clock_source_get_hz+0xe>
   10eb6:	0080      	lsls	r0, r0, #2
   10eb8:	4b1c      	ldr	r3, [pc, #112]	; (10f2c <system_clock_source_get_hz+0x7c>)
   10eba:	581b      	ldr	r3, [r3, r0]
   10ebc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   10ebe:	2000      	movs	r0, #0
   10ec0:	e032      	b.n	10f28 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   10ec2:	4b1b      	ldr	r3, [pc, #108]	; (10f30 <system_clock_source_get_hz+0x80>)
   10ec4:	6918      	ldr	r0, [r3, #16]
   10ec6:	e02f      	b.n	10f28 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10ec8:	4b1a      	ldr	r3, [pc, #104]	; (10f34 <system_clock_source_get_hz+0x84>)
   10eca:	6a1b      	ldr	r3, [r3, #32]
   10ecc:	059b      	lsls	r3, r3, #22
   10ece:	0f9b      	lsrs	r3, r3, #30
   10ed0:	4819      	ldr	r0, [pc, #100]	; (10f38 <system_clock_source_get_hz+0x88>)
   10ed2:	40d8      	lsrs	r0, r3
   10ed4:	e028      	b.n	10f28 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   10ed6:	4b16      	ldr	r3, [pc, #88]	; (10f30 <system_clock_source_get_hz+0x80>)
   10ed8:	6958      	ldr	r0, [r3, #20]
   10eda:	e025      	b.n	10f28 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10edc:	4b14      	ldr	r3, [pc, #80]	; (10f30 <system_clock_source_get_hz+0x80>)
   10ede:	681b      	ldr	r3, [r3, #0]
			return 0;
   10ee0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10ee2:	079b      	lsls	r3, r3, #30
   10ee4:	d520      	bpl.n	10f28 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10ee6:	4913      	ldr	r1, [pc, #76]	; (10f34 <system_clock_source_get_hz+0x84>)
   10ee8:	2210      	movs	r2, #16
   10eea:	68cb      	ldr	r3, [r1, #12]
   10eec:	421a      	tst	r2, r3
   10eee:	d0fc      	beq.n	10eea <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   10ef0:	4b0f      	ldr	r3, [pc, #60]	; (10f30 <system_clock_source_get_hz+0x80>)
   10ef2:	681a      	ldr	r2, [r3, #0]
   10ef4:	2324      	movs	r3, #36	; 0x24
   10ef6:	4013      	ands	r3, r2
   10ef8:	2b04      	cmp	r3, #4
   10efa:	d001      	beq.n	10f00 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   10efc:	480f      	ldr	r0, [pc, #60]	; (10f3c <system_clock_source_get_hz+0x8c>)
   10efe:	e013      	b.n	10f28 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10f00:	2000      	movs	r0, #0
   10f02:	4b0f      	ldr	r3, [pc, #60]	; (10f40 <system_clock_source_get_hz+0x90>)
   10f04:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   10f06:	4b0a      	ldr	r3, [pc, #40]	; (10f30 <system_clock_source_get_hz+0x80>)
   10f08:	689b      	ldr	r3, [r3, #8]
   10f0a:	041b      	lsls	r3, r3, #16
   10f0c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10f0e:	4358      	muls	r0, r3
   10f10:	e00a      	b.n	10f28 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10f12:	2350      	movs	r3, #80	; 0x50
   10f14:	4a07      	ldr	r2, [pc, #28]	; (10f34 <system_clock_source_get_hz+0x84>)
   10f16:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   10f18:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10f1a:	075b      	lsls	r3, r3, #29
   10f1c:	d504      	bpl.n	10f28 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   10f1e:	4b04      	ldr	r3, [pc, #16]	; (10f30 <system_clock_source_get_hz+0x80>)
   10f20:	68d8      	ldr	r0, [r3, #12]
   10f22:	e001      	b.n	10f28 <system_clock_source_get_hz+0x78>
		return 32768UL;
   10f24:	2080      	movs	r0, #128	; 0x80
   10f26:	0200      	lsls	r0, r0, #8
	}
}
   10f28:	bd10      	pop	{r4, pc}
   10f2a:	46c0      	nop			; (mov r8, r8)
   10f2c:	00019ba4 	.word	0x00019ba4
   10f30:	200003fc 	.word	0x200003fc
   10f34:	40000800 	.word	0x40000800
   10f38:	007a1200 	.word	0x007a1200
   10f3c:	02dc6c00 	.word	0x02dc6c00
   10f40:	00011515 	.word	0x00011515

00010f44 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   10f44:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   10f46:	490c      	ldr	r1, [pc, #48]	; (10f78 <system_clock_source_osc8m_set_config+0x34>)
   10f48:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   10f4a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   10f4c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   10f4e:	7840      	ldrb	r0, [r0, #1]
   10f50:	2201      	movs	r2, #1
   10f52:	4010      	ands	r0, r2
   10f54:	0180      	lsls	r0, r0, #6
   10f56:	2640      	movs	r6, #64	; 0x40
   10f58:	43b3      	bics	r3, r6
   10f5a:	4303      	orrs	r3, r0
   10f5c:	402a      	ands	r2, r5
   10f5e:	01d2      	lsls	r2, r2, #7
   10f60:	2080      	movs	r0, #128	; 0x80
   10f62:	4383      	bics	r3, r0
   10f64:	4313      	orrs	r3, r2
   10f66:	2203      	movs	r2, #3
   10f68:	4022      	ands	r2, r4
   10f6a:	0212      	lsls	r2, r2, #8
   10f6c:	4803      	ldr	r0, [pc, #12]	; (10f7c <system_clock_source_osc8m_set_config+0x38>)
   10f6e:	4003      	ands	r3, r0
   10f70:	4313      	orrs	r3, r2
   10f72:	620b      	str	r3, [r1, #32]
}
   10f74:	bd70      	pop	{r4, r5, r6, pc}
   10f76:	46c0      	nop			; (mov r8, r8)
   10f78:	40000800 	.word	0x40000800
   10f7c:	fffffcff 	.word	0xfffffcff

00010f80 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   10f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f82:	46de      	mov	lr, fp
   10f84:	4657      	mov	r7, sl
   10f86:	464e      	mov	r6, r9
   10f88:	4645      	mov	r5, r8
   10f8a:	b5e0      	push	{r5, r6, r7, lr}
   10f8c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   10f8e:	4b26      	ldr	r3, [pc, #152]	; (11028 <system_clock_source_xosc32k_set_config+0xa8>)
   10f90:	469b      	mov	fp, r3
   10f92:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   10f94:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   10f96:	7800      	ldrb	r0, [r0, #0]
   10f98:	4242      	negs	r2, r0
   10f9a:	4142      	adcs	r2, r0
   10f9c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   10f9e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   10fa0:	78ca      	ldrb	r2, [r1, #3]
   10fa2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   10fa4:	790a      	ldrb	r2, [r1, #4]
   10fa6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   10fa8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   10faa:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   10fac:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   10fae:	688a      	ldr	r2, [r1, #8]
   10fb0:	491e      	ldr	r1, [pc, #120]	; (1102c <system_clock_source_xosc32k_set_config+0xac>)
   10fb2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   10fb4:	2101      	movs	r1, #1
   10fb6:	464a      	mov	r2, r9
   10fb8:	0092      	lsls	r2, r2, #2
   10fba:	4691      	mov	r9, r2
   10fbc:	2204      	movs	r2, #4
   10fbe:	4393      	bics	r3, r2
   10fc0:	464a      	mov	r2, r9
   10fc2:	4313      	orrs	r3, r2
   10fc4:	4642      	mov	r2, r8
   10fc6:	400a      	ands	r2, r1
   10fc8:	00d2      	lsls	r2, r2, #3
   10fca:	4690      	mov	r8, r2
   10fcc:	2208      	movs	r2, #8
   10fce:	4393      	bics	r3, r2
   10fd0:	4642      	mov	r2, r8
   10fd2:	4313      	orrs	r3, r2
   10fd4:	4662      	mov	r2, ip
   10fd6:	400a      	ands	r2, r1
   10fd8:	0112      	lsls	r2, r2, #4
   10fda:	4694      	mov	ip, r2
   10fdc:	2210      	movs	r2, #16
   10fde:	4393      	bics	r3, r2
   10fe0:	4662      	mov	r2, ip
   10fe2:	4313      	orrs	r3, r2
   10fe4:	4008      	ands	r0, r1
   10fe6:	0140      	lsls	r0, r0, #5
   10fe8:	2220      	movs	r2, #32
   10fea:	4393      	bics	r3, r2
   10fec:	4303      	orrs	r3, r0
   10fee:	400f      	ands	r7, r1
   10ff0:	01bf      	lsls	r7, r7, #6
   10ff2:	2040      	movs	r0, #64	; 0x40
   10ff4:	4383      	bics	r3, r0
   10ff6:	433b      	orrs	r3, r7
   10ff8:	400e      	ands	r6, r1
   10ffa:	01f6      	lsls	r6, r6, #7
   10ffc:	3040      	adds	r0, #64	; 0x40
   10ffe:	4383      	bics	r3, r0
   11000:	4333      	orrs	r3, r6
   11002:	3879      	subs	r0, #121	; 0x79
   11004:	4005      	ands	r5, r0
   11006:	022d      	lsls	r5, r5, #8
   11008:	4809      	ldr	r0, [pc, #36]	; (11030 <system_clock_source_xosc32k_set_config+0xb0>)
   1100a:	4003      	ands	r3, r0
   1100c:	432b      	orrs	r3, r5
   1100e:	4021      	ands	r1, r4
   11010:	0309      	lsls	r1, r1, #12
   11012:	4808      	ldr	r0, [pc, #32]	; (11034 <system_clock_source_xosc32k_set_config+0xb4>)
   11014:	4003      	ands	r3, r0
   11016:	430b      	orrs	r3, r1
   11018:	465a      	mov	r2, fp
   1101a:	8293      	strh	r3, [r2, #20]
}
   1101c:	bc3c      	pop	{r2, r3, r4, r5}
   1101e:	4690      	mov	r8, r2
   11020:	4699      	mov	r9, r3
   11022:	46a2      	mov	sl, r4
   11024:	46ab      	mov	fp, r5
   11026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11028:	40000800 	.word	0x40000800
   1102c:	200003fc 	.word	0x200003fc
   11030:	fffff8ff 	.word	0xfffff8ff
   11034:	ffffefff 	.word	0xffffefff

00011038 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   11038:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1103a:	7a03      	ldrb	r3, [r0, #8]
   1103c:	069b      	lsls	r3, r3, #26
   1103e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   11040:	8942      	ldrh	r2, [r0, #10]
   11042:	0592      	lsls	r2, r2, #22
   11044:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   11046:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   11048:	4918      	ldr	r1, [pc, #96]	; (110ac <system_clock_source_dfll_set_config+0x74>)
   1104a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1104c:	7983      	ldrb	r3, [r0, #6]
   1104e:	79c2      	ldrb	r2, [r0, #7]
   11050:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   11052:	8842      	ldrh	r2, [r0, #2]
   11054:	8884      	ldrh	r4, [r0, #4]
   11056:	4322      	orrs	r2, r4
   11058:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   1105a:	7842      	ldrb	r2, [r0, #1]
   1105c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   1105e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   11060:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   11062:	7803      	ldrb	r3, [r0, #0]
   11064:	2b04      	cmp	r3, #4
   11066:	d011      	beq.n	1108c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   11068:	2b20      	cmp	r3, #32
   1106a:	d10e      	bne.n	1108a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1106c:	7b03      	ldrb	r3, [r0, #12]
   1106e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   11070:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   11072:	4313      	orrs	r3, r2
   11074:	89c2      	ldrh	r2, [r0, #14]
   11076:	0412      	lsls	r2, r2, #16
   11078:	490d      	ldr	r1, [pc, #52]	; (110b0 <system_clock_source_dfll_set_config+0x78>)
   1107a:	400a      	ands	r2, r1
   1107c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1107e:	4a0b      	ldr	r2, [pc, #44]	; (110ac <system_clock_source_dfll_set_config+0x74>)
   11080:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   11082:	6811      	ldr	r1, [r2, #0]
   11084:	4b0b      	ldr	r3, [pc, #44]	; (110b4 <system_clock_source_dfll_set_config+0x7c>)
   11086:	430b      	orrs	r3, r1
   11088:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   1108a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1108c:	7b03      	ldrb	r3, [r0, #12]
   1108e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   11090:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   11092:	4313      	orrs	r3, r2
   11094:	89c2      	ldrh	r2, [r0, #14]
   11096:	0412      	lsls	r2, r2, #16
   11098:	4905      	ldr	r1, [pc, #20]	; (110b0 <system_clock_source_dfll_set_config+0x78>)
   1109a:	400a      	ands	r2, r1
   1109c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1109e:	4a03      	ldr	r2, [pc, #12]	; (110ac <system_clock_source_dfll_set_config+0x74>)
   110a0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   110a2:	6813      	ldr	r3, [r2, #0]
   110a4:	2104      	movs	r1, #4
   110a6:	430b      	orrs	r3, r1
   110a8:	6013      	str	r3, [r2, #0]
   110aa:	e7ee      	b.n	1108a <system_clock_source_dfll_set_config+0x52>
   110ac:	200003fc 	.word	0x200003fc
   110b0:	03ff0000 	.word	0x03ff0000
   110b4:	00000424 	.word	0x00000424

000110b8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   110b8:	2808      	cmp	r0, #8
   110ba:	d803      	bhi.n	110c4 <system_clock_source_enable+0xc>
   110bc:	0080      	lsls	r0, r0, #2
   110be:	4b25      	ldr	r3, [pc, #148]	; (11154 <system_clock_source_enable+0x9c>)
   110c0:	581b      	ldr	r3, [r3, r0]
   110c2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   110c4:	2017      	movs	r0, #23
   110c6:	e044      	b.n	11152 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   110c8:	4a23      	ldr	r2, [pc, #140]	; (11158 <system_clock_source_enable+0xa0>)
   110ca:	6a13      	ldr	r3, [r2, #32]
   110cc:	2102      	movs	r1, #2
   110ce:	430b      	orrs	r3, r1
   110d0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   110d2:	2000      	movs	r0, #0
   110d4:	e03d      	b.n	11152 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   110d6:	4a20      	ldr	r2, [pc, #128]	; (11158 <system_clock_source_enable+0xa0>)
   110d8:	6993      	ldr	r3, [r2, #24]
   110da:	2102      	movs	r1, #2
   110dc:	430b      	orrs	r3, r1
   110de:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   110e0:	2000      	movs	r0, #0
		break;
   110e2:	e036      	b.n	11152 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   110e4:	4a1c      	ldr	r2, [pc, #112]	; (11158 <system_clock_source_enable+0xa0>)
   110e6:	8a13      	ldrh	r3, [r2, #16]
   110e8:	2102      	movs	r1, #2
   110ea:	430b      	orrs	r3, r1
   110ec:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   110ee:	2000      	movs	r0, #0
		break;
   110f0:	e02f      	b.n	11152 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   110f2:	4a19      	ldr	r2, [pc, #100]	; (11158 <system_clock_source_enable+0xa0>)
   110f4:	8a93      	ldrh	r3, [r2, #20]
   110f6:	2102      	movs	r1, #2
   110f8:	430b      	orrs	r3, r1
   110fa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   110fc:	2000      	movs	r0, #0
		break;
   110fe:	e028      	b.n	11152 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   11100:	4916      	ldr	r1, [pc, #88]	; (1115c <system_clock_source_enable+0xa4>)
   11102:	680b      	ldr	r3, [r1, #0]
   11104:	2202      	movs	r2, #2
   11106:	4313      	orrs	r3, r2
   11108:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1110a:	4b13      	ldr	r3, [pc, #76]	; (11158 <system_clock_source_enable+0xa0>)
   1110c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1110e:	0019      	movs	r1, r3
   11110:	320e      	adds	r2, #14
   11112:	68cb      	ldr	r3, [r1, #12]
   11114:	421a      	tst	r2, r3
   11116:	d0fc      	beq.n	11112 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   11118:	4a10      	ldr	r2, [pc, #64]	; (1115c <system_clock_source_enable+0xa4>)
   1111a:	6891      	ldr	r1, [r2, #8]
   1111c:	4b0e      	ldr	r3, [pc, #56]	; (11158 <system_clock_source_enable+0xa0>)
   1111e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   11120:	6852      	ldr	r2, [r2, #4]
   11122:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   11124:	2200      	movs	r2, #0
   11126:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11128:	0019      	movs	r1, r3
   1112a:	3210      	adds	r2, #16
   1112c:	68cb      	ldr	r3, [r1, #12]
   1112e:	421a      	tst	r2, r3
   11130:	d0fc      	beq.n	1112c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   11132:	4b0a      	ldr	r3, [pc, #40]	; (1115c <system_clock_source_enable+0xa4>)
   11134:	681b      	ldr	r3, [r3, #0]
   11136:	b29b      	uxth	r3, r3
   11138:	4a07      	ldr	r2, [pc, #28]	; (11158 <system_clock_source_enable+0xa0>)
   1113a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1113c:	2000      	movs	r0, #0
   1113e:	e008      	b.n	11152 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   11140:	4905      	ldr	r1, [pc, #20]	; (11158 <system_clock_source_enable+0xa0>)
   11142:	2244      	movs	r2, #68	; 0x44
   11144:	5c8b      	ldrb	r3, [r1, r2]
   11146:	2002      	movs	r0, #2
   11148:	4303      	orrs	r3, r0
   1114a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1114c:	2000      	movs	r0, #0
		break;
   1114e:	e000      	b.n	11152 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   11150:	2000      	movs	r0, #0
}
   11152:	4770      	bx	lr
   11154:	00019bc8 	.word	0x00019bc8
   11158:	40000800 	.word	0x40000800
   1115c:	200003fc 	.word	0x200003fc

00011160 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   11160:	b5f0      	push	{r4, r5, r6, r7, lr}
   11162:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   11164:	22c2      	movs	r2, #194	; 0xc2
   11166:	00d2      	lsls	r2, r2, #3
   11168:	4b47      	ldr	r3, [pc, #284]	; (11288 <system_clock_init+0x128>)
   1116a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1116c:	4a47      	ldr	r2, [pc, #284]	; (1128c <system_clock_init+0x12c>)
   1116e:	6853      	ldr	r3, [r2, #4]
   11170:	211e      	movs	r1, #30
   11172:	438b      	bics	r3, r1
   11174:	391a      	subs	r1, #26
   11176:	430b      	orrs	r3, r1
   11178:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1117a:	2202      	movs	r2, #2
   1117c:	ab01      	add	r3, sp, #4
   1117e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   11180:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   11182:	4d43      	ldr	r5, [pc, #268]	; (11290 <system_clock_init+0x130>)
   11184:	b2e0      	uxtb	r0, r4
   11186:	a901      	add	r1, sp, #4
   11188:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1118a:	3401      	adds	r4, #1
   1118c:	2c25      	cmp	r4, #37	; 0x25
   1118e:	d1f9      	bne.n	11184 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   11190:	a80a      	add	r0, sp, #40	; 0x28
   11192:	2300      	movs	r3, #0
   11194:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   11196:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   11198:	2280      	movs	r2, #128	; 0x80
   1119a:	0212      	lsls	r2, r2, #8
   1119c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   1119e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   111a0:	2201      	movs	r2, #1
   111a2:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   111a4:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   111a6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   111a8:	3202      	adds	r2, #2
   111aa:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   111ac:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   111ae:	4b39      	ldr	r3, [pc, #228]	; (11294 <system_clock_init+0x134>)
   111b0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   111b2:	2005      	movs	r0, #5
   111b4:	4b38      	ldr	r3, [pc, #224]	; (11298 <system_clock_init+0x138>)
   111b6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   111b8:	4933      	ldr	r1, [pc, #204]	; (11288 <system_clock_init+0x128>)
   111ba:	2202      	movs	r2, #2
   111bc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   111be:	421a      	tst	r2, r3
   111c0:	d0fc      	beq.n	111bc <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   111c2:	4a31      	ldr	r2, [pc, #196]	; (11288 <system_clock_init+0x128>)
   111c4:	8a93      	ldrh	r3, [r2, #20]
   111c6:	2180      	movs	r1, #128	; 0x80
   111c8:	430b      	orrs	r3, r1
   111ca:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   111cc:	ab05      	add	r3, sp, #20
   111ce:	2100      	movs	r1, #0
   111d0:	2200      	movs	r2, #0
   111d2:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   111d4:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   111d6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   111d8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   111da:	313f      	adds	r1, #63	; 0x3f
   111dc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   111de:	393b      	subs	r1, #59	; 0x3b
   111e0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   111e2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   111e4:	4b2d      	ldr	r3, [pc, #180]	; (1129c <system_clock_init+0x13c>)
   111e6:	681b      	ldr	r3, [r3, #0]
   111e8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   111ea:	2b3f      	cmp	r3, #63	; 0x3f
   111ec:	d04a      	beq.n	11284 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   111ee:	a805      	add	r0, sp, #20
   111f0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   111f2:	4b2b      	ldr	r3, [pc, #172]	; (112a0 <system_clock_init+0x140>)
   111f4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   111f6:	2307      	movs	r3, #7
   111f8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   111fa:	3338      	adds	r3, #56	; 0x38
   111fc:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   111fe:	4b29      	ldr	r3, [pc, #164]	; (112a4 <system_clock_init+0x144>)
   11200:	4798      	blx	r3
	config->run_in_standby  = false;
   11202:	a804      	add	r0, sp, #16
   11204:	2500      	movs	r5, #0
   11206:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   11208:	2601      	movs	r6, #1
   1120a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1120c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1120e:	4b26      	ldr	r3, [pc, #152]	; (112a8 <system_clock_init+0x148>)
   11210:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   11212:	2006      	movs	r0, #6
   11214:	4f20      	ldr	r7, [pc, #128]	; (11298 <system_clock_init+0x138>)
   11216:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11218:	4b24      	ldr	r3, [pc, #144]	; (112ac <system_clock_init+0x14c>)
   1121a:	4798      	blx	r3
	config->division_factor    = 1;
   1121c:	ac01      	add	r4, sp, #4
   1121e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   11220:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   11222:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   11224:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   11226:	2305      	movs	r3, #5
   11228:	7023      	strb	r3, [r4, #0]
   1122a:	0021      	movs	r1, r4
   1122c:	2001      	movs	r0, #1
   1122e:	4b20      	ldr	r3, [pc, #128]	; (112b0 <system_clock_init+0x150>)
   11230:	4798      	blx	r3
   11232:	2001      	movs	r0, #1
   11234:	4b1f      	ldr	r3, [pc, #124]	; (112b4 <system_clock_init+0x154>)
   11236:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   11238:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1123a:	0021      	movs	r1, r4
   1123c:	2000      	movs	r0, #0
   1123e:	4b14      	ldr	r3, [pc, #80]	; (11290 <system_clock_init+0x130>)
   11240:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   11242:	2000      	movs	r0, #0
   11244:	4b1c      	ldr	r3, [pc, #112]	; (112b8 <system_clock_init+0x158>)
   11246:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   11248:	2007      	movs	r0, #7
   1124a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1124c:	490e      	ldr	r1, [pc, #56]	; (11288 <system_clock_init+0x128>)
   1124e:	22d0      	movs	r2, #208	; 0xd0
   11250:	68cb      	ldr	r3, [r1, #12]
   11252:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   11254:	2bd0      	cmp	r3, #208	; 0xd0
   11256:	d1fb      	bne.n	11250 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   11258:	4a18      	ldr	r2, [pc, #96]	; (112bc <system_clock_init+0x15c>)
   1125a:	2300      	movs	r3, #0
   1125c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1125e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   11260:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   11262:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   11264:	a901      	add	r1, sp, #4
   11266:	2201      	movs	r2, #1
   11268:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1126a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1126c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   1126e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   11270:	3307      	adds	r3, #7
   11272:	700b      	strb	r3, [r1, #0]
   11274:	2000      	movs	r0, #0
   11276:	4b0e      	ldr	r3, [pc, #56]	; (112b0 <system_clock_init+0x150>)
   11278:	4798      	blx	r3
   1127a:	2000      	movs	r0, #0
   1127c:	4b0d      	ldr	r3, [pc, #52]	; (112b4 <system_clock_init+0x154>)
   1127e:	4798      	blx	r3
#endif
}
   11280:	b00f      	add	sp, #60	; 0x3c
   11282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   11284:	3b20      	subs	r3, #32
   11286:	e7b2      	b.n	111ee <system_clock_init+0x8e>
   11288:	40000800 	.word	0x40000800
   1128c:	41004000 	.word	0x41004000
   11290:	000114f9 	.word	0x000114f9
   11294:	00010f81 	.word	0x00010f81
   11298:	000110b9 	.word	0x000110b9
   1129c:	00806024 	.word	0x00806024
   112a0:	000005b9 	.word	0x000005b9
   112a4:	00011039 	.word	0x00011039
   112a8:	00010f45 	.word	0x00010f45
   112ac:	000112c1 	.word	0x000112c1
   112b0:	000112e5 	.word	0x000112e5
   112b4:	0001139d 	.word	0x0001139d
   112b8:	0001146d 	.word	0x0001146d
   112bc:	40000400 	.word	0x40000400

000112c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   112c0:	4a06      	ldr	r2, [pc, #24]	; (112dc <system_gclk_init+0x1c>)
   112c2:	6993      	ldr	r3, [r2, #24]
   112c4:	2108      	movs	r1, #8
   112c6:	430b      	orrs	r3, r1
   112c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   112ca:	2201      	movs	r2, #1
   112cc:	4b04      	ldr	r3, [pc, #16]	; (112e0 <system_gclk_init+0x20>)
   112ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   112d0:	0019      	movs	r1, r3
   112d2:	780b      	ldrb	r3, [r1, #0]
   112d4:	4213      	tst	r3, r2
   112d6:	d1fc      	bne.n	112d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   112d8:	4770      	bx	lr
   112da:	46c0      	nop			; (mov r8, r8)
   112dc:	40000400 	.word	0x40000400
   112e0:	40000c00 	.word	0x40000c00

000112e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   112e4:	b570      	push	{r4, r5, r6, lr}
   112e6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   112e8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   112ea:	780d      	ldrb	r5, [r1, #0]
   112ec:	022d      	lsls	r5, r5, #8
   112ee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   112f0:	784b      	ldrb	r3, [r1, #1]
   112f2:	2b00      	cmp	r3, #0
   112f4:	d002      	beq.n	112fc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   112f6:	2380      	movs	r3, #128	; 0x80
   112f8:	02db      	lsls	r3, r3, #11
   112fa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   112fc:	7a4b      	ldrb	r3, [r1, #9]
   112fe:	2b00      	cmp	r3, #0
   11300:	d002      	beq.n	11308 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   11302:	2380      	movs	r3, #128	; 0x80
   11304:	031b      	lsls	r3, r3, #12
   11306:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   11308:	6848      	ldr	r0, [r1, #4]
   1130a:	2801      	cmp	r0, #1
   1130c:	d910      	bls.n	11330 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1130e:	1e43      	subs	r3, r0, #1
   11310:	4218      	tst	r0, r3
   11312:	d134      	bne.n	1137e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   11314:	2802      	cmp	r0, #2
   11316:	d930      	bls.n	1137a <system_gclk_gen_set_config+0x96>
   11318:	2302      	movs	r3, #2
   1131a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1131c:	3201      	adds	r2, #1
						mask <<= 1) {
   1131e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   11320:	4298      	cmp	r0, r3
   11322:	d8fb      	bhi.n	1131c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   11324:	0212      	lsls	r2, r2, #8
   11326:	4332      	orrs	r2, r6
   11328:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1132a:	2380      	movs	r3, #128	; 0x80
   1132c:	035b      	lsls	r3, r3, #13
   1132e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11330:	7a0b      	ldrb	r3, [r1, #8]
   11332:	2b00      	cmp	r3, #0
   11334:	d002      	beq.n	1133c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   11336:	2380      	movs	r3, #128	; 0x80
   11338:	039b      	lsls	r3, r3, #14
   1133a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1133c:	4a13      	ldr	r2, [pc, #76]	; (1138c <system_gclk_gen_set_config+0xa8>)
   1133e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   11340:	b25b      	sxtb	r3, r3
   11342:	2b00      	cmp	r3, #0
   11344:	dbfb      	blt.n	1133e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   11346:	4b12      	ldr	r3, [pc, #72]	; (11390 <system_gclk_gen_set_config+0xac>)
   11348:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1134a:	4b12      	ldr	r3, [pc, #72]	; (11394 <system_gclk_gen_set_config+0xb0>)
   1134c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1134e:	4a0f      	ldr	r2, [pc, #60]	; (1138c <system_gclk_gen_set_config+0xa8>)
   11350:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   11352:	b25b      	sxtb	r3, r3
   11354:	2b00      	cmp	r3, #0
   11356:	dbfb      	blt.n	11350 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   11358:	4b0c      	ldr	r3, [pc, #48]	; (1138c <system_gclk_gen_set_config+0xa8>)
   1135a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1135c:	001a      	movs	r2, r3
   1135e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   11360:	b25b      	sxtb	r3, r3
   11362:	2b00      	cmp	r3, #0
   11364:	dbfb      	blt.n	1135e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   11366:	4a09      	ldr	r2, [pc, #36]	; (1138c <system_gclk_gen_set_config+0xa8>)
   11368:	6853      	ldr	r3, [r2, #4]
   1136a:	2180      	movs	r1, #128	; 0x80
   1136c:	0249      	lsls	r1, r1, #9
   1136e:	400b      	ands	r3, r1
   11370:	431d      	orrs	r5, r3
   11372:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   11374:	4b08      	ldr	r3, [pc, #32]	; (11398 <system_gclk_gen_set_config+0xb4>)
   11376:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11378:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1137a:	2200      	movs	r2, #0
   1137c:	e7d2      	b.n	11324 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1137e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   11380:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   11382:	2380      	movs	r3, #128	; 0x80
   11384:	029b      	lsls	r3, r3, #10
   11386:	431d      	orrs	r5, r3
   11388:	e7d2      	b.n	11330 <system_gclk_gen_set_config+0x4c>
   1138a:	46c0      	nop			; (mov r8, r8)
   1138c:	40000c00 	.word	0x40000c00
   11390:	0000f82d 	.word	0x0000f82d
   11394:	40000c08 	.word	0x40000c08
   11398:	0000f86d 	.word	0x0000f86d

0001139c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1139c:	b510      	push	{r4, lr}
   1139e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   113a0:	4a0b      	ldr	r2, [pc, #44]	; (113d0 <system_gclk_gen_enable+0x34>)
   113a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   113a4:	b25b      	sxtb	r3, r3
   113a6:	2b00      	cmp	r3, #0
   113a8:	dbfb      	blt.n	113a2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   113aa:	4b0a      	ldr	r3, [pc, #40]	; (113d4 <system_gclk_gen_enable+0x38>)
   113ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   113ae:	4b0a      	ldr	r3, [pc, #40]	; (113d8 <system_gclk_gen_enable+0x3c>)
   113b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   113b2:	4a07      	ldr	r2, [pc, #28]	; (113d0 <system_gclk_gen_enable+0x34>)
   113b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   113b6:	b25b      	sxtb	r3, r3
   113b8:	2b00      	cmp	r3, #0
   113ba:	dbfb      	blt.n	113b4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   113bc:	4a04      	ldr	r2, [pc, #16]	; (113d0 <system_gclk_gen_enable+0x34>)
   113be:	6851      	ldr	r1, [r2, #4]
   113c0:	2380      	movs	r3, #128	; 0x80
   113c2:	025b      	lsls	r3, r3, #9
   113c4:	430b      	orrs	r3, r1
   113c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   113c8:	4b04      	ldr	r3, [pc, #16]	; (113dc <system_gclk_gen_enable+0x40>)
   113ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   113cc:	bd10      	pop	{r4, pc}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	40000c00 	.word	0x40000c00
   113d4:	0000f82d 	.word	0x0000f82d
   113d8:	40000c04 	.word	0x40000c04
   113dc:	0000f86d 	.word	0x0000f86d

000113e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   113e0:	b570      	push	{r4, r5, r6, lr}
   113e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   113e4:	4a1a      	ldr	r2, [pc, #104]	; (11450 <system_gclk_gen_get_hz+0x70>)
   113e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   113e8:	b25b      	sxtb	r3, r3
   113ea:	2b00      	cmp	r3, #0
   113ec:	dbfb      	blt.n	113e6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   113ee:	4b19      	ldr	r3, [pc, #100]	; (11454 <system_gclk_gen_get_hz+0x74>)
   113f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   113f2:	4b19      	ldr	r3, [pc, #100]	; (11458 <system_gclk_gen_get_hz+0x78>)
   113f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   113f6:	4a16      	ldr	r2, [pc, #88]	; (11450 <system_gclk_gen_get_hz+0x70>)
   113f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   113fa:	b25b      	sxtb	r3, r3
   113fc:	2b00      	cmp	r3, #0
   113fe:	dbfb      	blt.n	113f8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   11400:	4e13      	ldr	r6, [pc, #76]	; (11450 <system_gclk_gen_get_hz+0x70>)
   11402:	6870      	ldr	r0, [r6, #4]
   11404:	04c0      	lsls	r0, r0, #19
   11406:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   11408:	4b14      	ldr	r3, [pc, #80]	; (1145c <system_gclk_gen_get_hz+0x7c>)
   1140a:	4798      	blx	r3
   1140c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1140e:	4b12      	ldr	r3, [pc, #72]	; (11458 <system_gclk_gen_get_hz+0x78>)
   11410:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   11412:	6876      	ldr	r6, [r6, #4]
   11414:	02f6      	lsls	r6, r6, #11
   11416:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11418:	4b11      	ldr	r3, [pc, #68]	; (11460 <system_gclk_gen_get_hz+0x80>)
   1141a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1141c:	4a0c      	ldr	r2, [pc, #48]	; (11450 <system_gclk_gen_get_hz+0x70>)
   1141e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11420:	b25b      	sxtb	r3, r3
   11422:	2b00      	cmp	r3, #0
   11424:	dbfb      	blt.n	1141e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   11426:	4b0a      	ldr	r3, [pc, #40]	; (11450 <system_gclk_gen_get_hz+0x70>)
   11428:	689c      	ldr	r4, [r3, #8]
   1142a:	0224      	lsls	r4, r4, #8
   1142c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1142e:	4b0d      	ldr	r3, [pc, #52]	; (11464 <system_gclk_gen_get_hz+0x84>)
   11430:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   11432:	2e00      	cmp	r6, #0
   11434:	d107      	bne.n	11446 <system_gclk_gen_get_hz+0x66>
   11436:	2c01      	cmp	r4, #1
   11438:	d907      	bls.n	1144a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1143a:	0021      	movs	r1, r4
   1143c:	0028      	movs	r0, r5
   1143e:	4b0a      	ldr	r3, [pc, #40]	; (11468 <system_gclk_gen_get_hz+0x88>)
   11440:	4798      	blx	r3
   11442:	0005      	movs	r5, r0
   11444:	e001      	b.n	1144a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   11446:	3401      	adds	r4, #1
   11448:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1144a:	0028      	movs	r0, r5
   1144c:	bd70      	pop	{r4, r5, r6, pc}
   1144e:	46c0      	nop			; (mov r8, r8)
   11450:	40000c00 	.word	0x40000c00
   11454:	0000f82d 	.word	0x0000f82d
   11458:	40000c04 	.word	0x40000c04
   1145c:	00010eb1 	.word	0x00010eb1
   11460:	40000c08 	.word	0x40000c08
   11464:	0000f86d 	.word	0x0000f86d
   11468:	00016fe1 	.word	0x00016fe1

0001146c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1146c:	b510      	push	{r4, lr}
   1146e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11470:	4b06      	ldr	r3, [pc, #24]	; (1148c <system_gclk_chan_enable+0x20>)
   11472:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11474:	4b06      	ldr	r3, [pc, #24]	; (11490 <system_gclk_chan_enable+0x24>)
   11476:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   11478:	4a06      	ldr	r2, [pc, #24]	; (11494 <system_gclk_chan_enable+0x28>)
   1147a:	8853      	ldrh	r3, [r2, #2]
   1147c:	2180      	movs	r1, #128	; 0x80
   1147e:	01c9      	lsls	r1, r1, #7
   11480:	430b      	orrs	r3, r1
   11482:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   11484:	4b04      	ldr	r3, [pc, #16]	; (11498 <system_gclk_chan_enable+0x2c>)
   11486:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11488:	bd10      	pop	{r4, pc}
   1148a:	46c0      	nop			; (mov r8, r8)
   1148c:	0000f82d 	.word	0x0000f82d
   11490:	40000c02 	.word	0x40000c02
   11494:	40000c00 	.word	0x40000c00
   11498:	0000f86d 	.word	0x0000f86d

0001149c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1149c:	b510      	push	{r4, lr}
   1149e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   114a0:	4b0f      	ldr	r3, [pc, #60]	; (114e0 <system_gclk_chan_disable+0x44>)
   114a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   114a4:	4b0f      	ldr	r3, [pc, #60]	; (114e4 <system_gclk_chan_disable+0x48>)
   114a6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   114a8:	4a0f      	ldr	r2, [pc, #60]	; (114e8 <system_gclk_chan_disable+0x4c>)
   114aa:	8853      	ldrh	r3, [r2, #2]
   114ac:	051b      	lsls	r3, r3, #20
   114ae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   114b0:	8853      	ldrh	r3, [r2, #2]
   114b2:	490e      	ldr	r1, [pc, #56]	; (114ec <system_gclk_chan_disable+0x50>)
   114b4:	400b      	ands	r3, r1
   114b6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   114b8:	8853      	ldrh	r3, [r2, #2]
   114ba:	490d      	ldr	r1, [pc, #52]	; (114f0 <system_gclk_chan_disable+0x54>)
   114bc:	400b      	ands	r3, r1
   114be:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   114c0:	0011      	movs	r1, r2
   114c2:	2280      	movs	r2, #128	; 0x80
   114c4:	01d2      	lsls	r2, r2, #7
   114c6:	884b      	ldrh	r3, [r1, #2]
   114c8:	4213      	tst	r3, r2
   114ca:	d1fc      	bne.n	114c6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   114cc:	4906      	ldr	r1, [pc, #24]	; (114e8 <system_gclk_chan_disable+0x4c>)
   114ce:	884a      	ldrh	r2, [r1, #2]
   114d0:	0203      	lsls	r3, r0, #8
   114d2:	4806      	ldr	r0, [pc, #24]	; (114ec <system_gclk_chan_disable+0x50>)
   114d4:	4002      	ands	r2, r0
   114d6:	4313      	orrs	r3, r2
   114d8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   114da:	4b06      	ldr	r3, [pc, #24]	; (114f4 <system_gclk_chan_disable+0x58>)
   114dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   114de:	bd10      	pop	{r4, pc}
   114e0:	0000f82d 	.word	0x0000f82d
   114e4:	40000c02 	.word	0x40000c02
   114e8:	40000c00 	.word	0x40000c00
   114ec:	fffff0ff 	.word	0xfffff0ff
   114f0:	ffffbfff 	.word	0xffffbfff
   114f4:	0000f86d 	.word	0x0000f86d

000114f8 <system_gclk_chan_set_config>:
{
   114f8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   114fa:	780c      	ldrb	r4, [r1, #0]
   114fc:	0224      	lsls	r4, r4, #8
   114fe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   11500:	4b02      	ldr	r3, [pc, #8]	; (1150c <system_gclk_chan_set_config+0x14>)
   11502:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   11504:	b2a4      	uxth	r4, r4
   11506:	4b02      	ldr	r3, [pc, #8]	; (11510 <system_gclk_chan_set_config+0x18>)
   11508:	805c      	strh	r4, [r3, #2]
}
   1150a:	bd10      	pop	{r4, pc}
   1150c:	0001149d 	.word	0x0001149d
   11510:	40000c00 	.word	0x40000c00

00011514 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   11514:	b510      	push	{r4, lr}
   11516:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11518:	4b06      	ldr	r3, [pc, #24]	; (11534 <system_gclk_chan_get_hz+0x20>)
   1151a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1151c:	4b06      	ldr	r3, [pc, #24]	; (11538 <system_gclk_chan_get_hz+0x24>)
   1151e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   11520:	4b06      	ldr	r3, [pc, #24]	; (1153c <system_gclk_chan_get_hz+0x28>)
   11522:	885c      	ldrh	r4, [r3, #2]
   11524:	0524      	lsls	r4, r4, #20
   11526:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   11528:	4b05      	ldr	r3, [pc, #20]	; (11540 <system_gclk_chan_get_hz+0x2c>)
   1152a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1152c:	0020      	movs	r0, r4
   1152e:	4b05      	ldr	r3, [pc, #20]	; (11544 <system_gclk_chan_get_hz+0x30>)
   11530:	4798      	blx	r3
}
   11532:	bd10      	pop	{r4, pc}
   11534:	0000f82d 	.word	0x0000f82d
   11538:	40000c02 	.word	0x40000c02
   1153c:	40000c00 	.word	0x40000c00
   11540:	0000f86d 	.word	0x0000f86d
   11544:	000113e1 	.word	0x000113e1

00011548 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   11548:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1154a:	78d3      	ldrb	r3, [r2, #3]
   1154c:	2b00      	cmp	r3, #0
   1154e:	d135      	bne.n	115bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   11550:	7813      	ldrb	r3, [r2, #0]
   11552:	2b80      	cmp	r3, #128	; 0x80
   11554:	d029      	beq.n	115aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   11556:	061b      	lsls	r3, r3, #24
   11558:	2480      	movs	r4, #128	; 0x80
   1155a:	0264      	lsls	r4, r4, #9
   1155c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1155e:	7854      	ldrb	r4, [r2, #1]
   11560:	2502      	movs	r5, #2
   11562:	43ac      	bics	r4, r5
   11564:	d106      	bne.n	11574 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   11566:	7894      	ldrb	r4, [r2, #2]
   11568:	2c00      	cmp	r4, #0
   1156a:	d120      	bne.n	115ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1156c:	2480      	movs	r4, #128	; 0x80
   1156e:	02a4      	lsls	r4, r4, #10
   11570:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   11572:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11574:	7854      	ldrb	r4, [r2, #1]
   11576:	3c01      	subs	r4, #1
   11578:	2c01      	cmp	r4, #1
   1157a:	d91c      	bls.n	115b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1157c:	040d      	lsls	r5, r1, #16
   1157e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   11580:	24a0      	movs	r4, #160	; 0xa0
   11582:	05e4      	lsls	r4, r4, #23
   11584:	432c      	orrs	r4, r5
   11586:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11588:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1158a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1158c:	24d0      	movs	r4, #208	; 0xd0
   1158e:	0624      	lsls	r4, r4, #24
   11590:	432c      	orrs	r4, r5
   11592:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11594:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   11596:	78d4      	ldrb	r4, [r2, #3]
   11598:	2c00      	cmp	r4, #0
   1159a:	d122      	bne.n	115e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1159c:	035b      	lsls	r3, r3, #13
   1159e:	d51c      	bpl.n	115da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   115a0:	7893      	ldrb	r3, [r2, #2]
   115a2:	2b01      	cmp	r3, #1
   115a4:	d01e      	beq.n	115e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   115a6:	6141      	str	r1, [r0, #20]
   115a8:	e017      	b.n	115da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   115aa:	2300      	movs	r3, #0
   115ac:	e7d7      	b.n	1155e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   115ae:	24c0      	movs	r4, #192	; 0xc0
   115b0:	02e4      	lsls	r4, r4, #11
   115b2:	4323      	orrs	r3, r4
   115b4:	e7dd      	b.n	11572 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   115b6:	4c0d      	ldr	r4, [pc, #52]	; (115ec <_system_pinmux_config+0xa4>)
   115b8:	4023      	ands	r3, r4
   115ba:	e7df      	b.n	1157c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   115bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   115be:	040c      	lsls	r4, r1, #16
   115c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   115c2:	23a0      	movs	r3, #160	; 0xa0
   115c4:	05db      	lsls	r3, r3, #23
   115c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   115c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   115ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   115cc:	23d0      	movs	r3, #208	; 0xd0
   115ce:	061b      	lsls	r3, r3, #24
   115d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   115d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   115d4:	78d3      	ldrb	r3, [r2, #3]
   115d6:	2b00      	cmp	r3, #0
   115d8:	d103      	bne.n	115e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   115da:	7853      	ldrb	r3, [r2, #1]
   115dc:	3b01      	subs	r3, #1
   115de:	2b01      	cmp	r3, #1
   115e0:	d902      	bls.n	115e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   115e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   115e4:	6181      	str	r1, [r0, #24]
   115e6:	e7f8      	b.n	115da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   115e8:	6081      	str	r1, [r0, #8]
}
   115ea:	e7fa      	b.n	115e2 <_system_pinmux_config+0x9a>
   115ec:	fffbffff 	.word	0xfffbffff

000115f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   115f0:	b510      	push	{r4, lr}
   115f2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   115f4:	09c1      	lsrs	r1, r0, #7
		return NULL;
   115f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   115f8:	2900      	cmp	r1, #0
   115fa:	d104      	bne.n	11606 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   115fc:	0943      	lsrs	r3, r0, #5
   115fe:	01db      	lsls	r3, r3, #7
   11600:	4905      	ldr	r1, [pc, #20]	; (11618 <system_pinmux_pin_set_config+0x28>)
   11602:	468c      	mov	ip, r1
   11604:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   11606:	241f      	movs	r4, #31
   11608:	4020      	ands	r0, r4
   1160a:	2101      	movs	r1, #1
   1160c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1160e:	0018      	movs	r0, r3
   11610:	4b02      	ldr	r3, [pc, #8]	; (1161c <system_pinmux_pin_set_config+0x2c>)
   11612:	4798      	blx	r3
}
   11614:	bd10      	pop	{r4, pc}
   11616:	46c0      	nop			; (mov r8, r8)
   11618:	41004400 	.word	0x41004400
   1161c:	00011549 	.word	0x00011549

00011620 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   11620:	4770      	bx	lr
	...

00011624 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11624:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11626:	4b05      	ldr	r3, [pc, #20]	; (1163c <system_init+0x18>)
   11628:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1162a:	4b05      	ldr	r3, [pc, #20]	; (11640 <system_init+0x1c>)
   1162c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1162e:	4b05      	ldr	r3, [pc, #20]	; (11644 <system_init+0x20>)
   11630:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11632:	4b05      	ldr	r3, [pc, #20]	; (11648 <system_init+0x24>)
   11634:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11636:	4b05      	ldr	r3, [pc, #20]	; (1164c <system_init+0x28>)
   11638:	4798      	blx	r3
}
   1163a:	bd10      	pop	{r4, pc}
   1163c:	00011161 	.word	0x00011161
   11640:	0000f89d 	.word	0x0000f89d
   11644:	00011621 	.word	0x00011621
   11648:	0000f9ad 	.word	0x0000f9ad
   1164c:	00011621 	.word	0x00011621

00011650 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   11650:	4b09      	ldr	r3, [pc, #36]	; (11678 <_tcc_get_inst_index+0x28>)
   11652:	4298      	cmp	r0, r3
   11654:	d00c      	beq.n	11670 <_tcc_get_inst_index+0x20>
   11656:	4b09      	ldr	r3, [pc, #36]	; (1167c <_tcc_get_inst_index+0x2c>)
   11658:	4298      	cmp	r0, r3
   1165a:	d007      	beq.n	1166c <_tcc_get_inst_index+0x1c>
   1165c:	4a08      	ldr	r2, [pc, #32]	; (11680 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1165e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   11660:	4290      	cmp	r0, r2
   11662:	d001      	beq.n	11668 <_tcc_get_inst_index+0x18>
}
   11664:	0018      	movs	r0, r3
   11666:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   11668:	3302      	adds	r3, #2
   1166a:	e002      	b.n	11672 <_tcc_get_inst_index+0x22>
   1166c:	2301      	movs	r3, #1
   1166e:	e000      	b.n	11672 <_tcc_get_inst_index+0x22>
   11670:	2300      	movs	r3, #0
			return i;
   11672:	b2db      	uxtb	r3, r3
   11674:	e7f6      	b.n	11664 <_tcc_get_inst_index+0x14>
   11676:	46c0      	nop			; (mov r8, r8)
   11678:	42002000 	.word	0x42002000
   1167c:	42002400 	.word	0x42002400
   11680:	42002800 	.word	0x42002800

00011684 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   11684:	b510      	push	{r4, lr}
   11686:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11688:	0008      	movs	r0, r1
   1168a:	4b4f      	ldr	r3, [pc, #316]	; (117c8 <tcc_get_config_defaults+0x144>)
   1168c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1168e:	2300      	movs	r3, #0
   11690:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   11692:	0080      	lsls	r0, r0, #2
   11694:	4a4d      	ldr	r2, [pc, #308]	; (117cc <tcc_get_config_defaults+0x148>)
   11696:	5882      	ldr	r2, [r0, r2]
   11698:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1169a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1169c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1169e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   116a0:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   116a2:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   116a4:	61e3      	str	r3, [r4, #28]
   116a6:	6223      	str	r3, [r4, #32]
   116a8:	6263      	str	r3, [r4, #36]	; 0x24
   116aa:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   116ac:	7523      	strb	r3, [r4, #20]
   116ae:	7563      	strb	r3, [r4, #21]
   116b0:	75a3      	strb	r3, [r4, #22]
   116b2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   116b4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   116b6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   116b8:	7423      	strb	r3, [r4, #16]
   116ba:	7463      	strb	r3, [r4, #17]
   116bc:	74a3      	strb	r3, [r4, #18]
   116be:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   116c0:	222c      	movs	r2, #44	; 0x2c
   116c2:	54a3      	strb	r3, [r4, r2]
   116c4:	3201      	adds	r2, #1
   116c6:	54a3      	strb	r3, [r4, r2]
   116c8:	3201      	adds	r2, #1
   116ca:	54a3      	strb	r3, [r4, r2]
   116cc:	3201      	adds	r2, #1
   116ce:	54a3      	strb	r3, [r4, r2]
   116d0:	3201      	adds	r2, #1
   116d2:	54a3      	strb	r3, [r4, r2]
   116d4:	3201      	adds	r2, #1
   116d6:	54a3      	strb	r3, [r4, r2]
   116d8:	3201      	adds	r2, #1
   116da:	54a3      	strb	r3, [r4, r2]
   116dc:	3201      	adds	r2, #1
   116de:	54a3      	strb	r3, [r4, r2]
   116e0:	3201      	adds	r2, #1
   116e2:	54a3      	strb	r3, [r4, r2]
   116e4:	3201      	adds	r2, #1
   116e6:	54a3      	strb	r3, [r4, r2]
   116e8:	3201      	adds	r2, #1
   116ea:	54a3      	strb	r3, [r4, r2]
   116ec:	3201      	adds	r2, #1
   116ee:	54a3      	strb	r3, [r4, r2]
   116f0:	3201      	adds	r2, #1
   116f2:	54a3      	strb	r3, [r4, r2]
   116f4:	3201      	adds	r2, #1
   116f6:	54a3      	strb	r3, [r4, r2]
   116f8:	3201      	adds	r2, #1
   116fa:	54a3      	strb	r3, [r4, r2]
   116fc:	3201      	adds	r2, #1
   116fe:	54a3      	strb	r3, [r4, r2]
   11700:	3201      	adds	r2, #1
   11702:	54a3      	strb	r3, [r4, r2]
   11704:	3201      	adds	r2, #1
   11706:	54a3      	strb	r3, [r4, r2]
   11708:	3201      	adds	r2, #1
   1170a:	54a3      	strb	r3, [r4, r2]
   1170c:	3201      	adds	r2, #1
   1170e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   11710:	3201      	adds	r2, #1
   11712:	54a3      	strb	r3, [r4, r2]
   11714:	3201      	adds	r2, #1
   11716:	54a3      	strb	r3, [r4, r2]
   11718:	3201      	adds	r2, #1
   1171a:	54a3      	strb	r3, [r4, r2]
   1171c:	3201      	adds	r2, #1
   1171e:	54a3      	strb	r3, [r4, r2]
   11720:	3201      	adds	r2, #1
   11722:	54a3      	strb	r3, [r4, r2]
   11724:	3201      	adds	r2, #1
   11726:	54a3      	strb	r3, [r4, r2]
   11728:	3201      	adds	r2, #1
   1172a:	54a3      	strb	r3, [r4, r2]
   1172c:	3201      	adds	r2, #1
   1172e:	54a3      	strb	r3, [r4, r2]
   11730:	3201      	adds	r2, #1
   11732:	54a3      	strb	r3, [r4, r2]
   11734:	3201      	adds	r2, #1
   11736:	54a3      	strb	r3, [r4, r2]
   11738:	3201      	adds	r2, #1
   1173a:	54a3      	strb	r3, [r4, r2]
   1173c:	3201      	adds	r2, #1
   1173e:	54a3      	strb	r3, [r4, r2]
   11740:	3201      	adds	r2, #1
   11742:	54a3      	strb	r3, [r4, r2]
   11744:	3201      	adds	r2, #1
   11746:	54a3      	strb	r3, [r4, r2]
   11748:	3201      	adds	r2, #1
   1174a:	54a3      	strb	r3, [r4, r2]
   1174c:	3201      	adds	r2, #1
   1174e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   11750:	3201      	adds	r2, #1
   11752:	54a3      	strb	r3, [r4, r2]
   11754:	3201      	adds	r2, #1
   11756:	54a3      	strb	r3, [r4, r2]
   11758:	3201      	adds	r2, #1
   1175a:	54a3      	strb	r3, [r4, r2]
   1175c:	3201      	adds	r2, #1
   1175e:	54a3      	strb	r3, [r4, r2]
   11760:	3201      	adds	r2, #1
   11762:	54a3      	strb	r3, [r4, r2]
   11764:	3201      	adds	r2, #1
   11766:	54a3      	strb	r3, [r4, r2]
   11768:	3201      	adds	r2, #1
   1176a:	54a3      	strb	r3, [r4, r2]
   1176c:	3201      	adds	r2, #1
   1176e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   11770:	3241      	adds	r2, #65	; 0x41
   11772:	54a3      	strb	r3, [r4, r2]
   11774:	65a3      	str	r3, [r4, #88]	; 0x58
   11776:	67a3      	str	r3, [r4, #120]	; 0x78
   11778:	3201      	adds	r2, #1
   1177a:	54a3      	strb	r3, [r4, r2]
   1177c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1177e:	67e3      	str	r3, [r4, #124]	; 0x7c
   11780:	3201      	adds	r2, #1
   11782:	54a3      	strb	r3, [r4, r2]
   11784:	6623      	str	r3, [r4, #96]	; 0x60
   11786:	3a1a      	subs	r2, #26
   11788:	50a3      	str	r3, [r4, r2]
   1178a:	321b      	adds	r2, #27
   1178c:	54a3      	strb	r3, [r4, r2]
   1178e:	6663      	str	r3, [r4, #100]	; 0x64
   11790:	3a17      	subs	r2, #23
   11792:	50a3      	str	r3, [r4, r2]
   11794:	3218      	adds	r2, #24
   11796:	54a3      	strb	r3, [r4, r2]
   11798:	66a3      	str	r3, [r4, #104]	; 0x68
   1179a:	3a14      	subs	r2, #20
   1179c:	50a3      	str	r3, [r4, r2]
   1179e:	3215      	adds	r2, #21
   117a0:	54a3      	strb	r3, [r4, r2]
   117a2:	66e3      	str	r3, [r4, #108]	; 0x6c
   117a4:	3a11      	subs	r2, #17
   117a6:	50a3      	str	r3, [r4, r2]
   117a8:	3212      	adds	r2, #18
   117aa:	54a3      	strb	r3, [r4, r2]
   117ac:	6723      	str	r3, [r4, #112]	; 0x70
   117ae:	3a0e      	subs	r2, #14
   117b0:	50a3      	str	r3, [r4, r2]
   117b2:	320f      	adds	r2, #15
   117b4:	54a3      	strb	r3, [r4, r2]
   117b6:	6763      	str	r3, [r4, #116]	; 0x74
   117b8:	3a0b      	subs	r2, #11
   117ba:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   117bc:	2101      	movs	r1, #1
   117be:	320c      	adds	r2, #12
   117c0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   117c2:	3201      	adds	r2, #1
   117c4:	54a3      	strb	r3, [r4, r2]
}
   117c6:	bd10      	pop	{r4, pc}
   117c8:	00011651 	.word	0x00011651
   117cc:	00019c00 	.word	0x00019c00

000117d0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   117d2:	46de      	mov	lr, fp
   117d4:	4657      	mov	r7, sl
   117d6:	464e      	mov	r6, r9
   117d8:	4645      	mov	r5, r8
   117da:	b5e0      	push	{r5, r6, r7, lr}
   117dc:	b091      	sub	sp, #68	; 0x44
   117de:	9001      	str	r0, [sp, #4]
   117e0:	000c      	movs	r4, r1
   117e2:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   117e4:	0008      	movs	r0, r1
   117e6:	4bc3      	ldr	r3, [pc, #780]	; (11af4 <tcc_init+0x324>)
   117e8:	4798      	blx	r3
   117ea:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   117ec:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   117ee:	48c2      	ldr	r0, [pc, #776]	; (11af8 <tcc_init+0x328>)
   117f0:	6a02      	ldr	r2, [r0, #32]
   117f2:	009e      	lsls	r6, r3, #2
   117f4:	4fc1      	ldr	r7, [pc, #772]	; (11afc <tcc_init+0x32c>)
   117f6:	59f7      	ldr	r7, [r6, r7]
   117f8:	433a      	orrs	r2, r7
   117fa:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   117fc:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   117fe:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11800:	0792      	lsls	r2, r2, #30
   11802:	d506      	bpl.n	11812 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   11804:	b011      	add	sp, #68	; 0x44
   11806:	bc3c      	pop	{r2, r3, r4, r5}
   11808:	4690      	mov	r8, r2
   1180a:	4699      	mov	r9, r3
   1180c:	46a2      	mov	sl, r4
   1180e:	46ab      	mov	fp, r5
   11810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   11812:	6822      	ldr	r2, [r4, #0]
   11814:	2701      	movs	r7, #1
   11816:	4017      	ands	r7, r2
   11818:	d1f4      	bne.n	11804 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1181a:	48b9      	ldr	r0, [pc, #740]	; (11b00 <tcc_init+0x330>)
   1181c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1181e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   11820:	682e      	ldr	r6, [r5, #0]
   11822:	42b2      	cmp	r2, r6
   11824:	d3ee      	bcc.n	11804 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   11826:	686e      	ldr	r6, [r5, #4]
   11828:	42b2      	cmp	r2, r6
   1182a:	d3eb      	bcc.n	11804 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1182c:	69e8      	ldr	r0, [r5, #28]
   1182e:	4282      	cmp	r2, r0
   11830:	d200      	bcs.n	11834 <tcc_init+0x64>
   11832:	e1b9      	b.n	11ba8 <tcc_init+0x3d8>
   11834:	6a28      	ldr	r0, [r5, #32]
   11836:	4282      	cmp	r2, r0
   11838:	d200      	bcs.n	1183c <tcc_init+0x6c>
   1183a:	e1b7      	b.n	11bac <tcc_init+0x3dc>
   1183c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1183e:	4282      	cmp	r2, r0
   11840:	d200      	bcs.n	11844 <tcc_init+0x74>
   11842:	e1b5      	b.n	11bb0 <tcc_init+0x3e0>
   11844:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11846:	4282      	cmp	r2, r0
   11848:	d200      	bcs.n	1184c <tcc_init+0x7c>
   1184a:	e1b3      	b.n	11bb4 <tcc_init+0x3e4>
   1184c:	2298      	movs	r2, #152	; 0x98
   1184e:	4694      	mov	ip, r2
   11850:	44ac      	add	ip, r5
   11852:	4662      	mov	r2, ip
   11854:	9208      	str	r2, [sp, #32]
   11856:	2000      	movs	r0, #0
   11858:	e003      	b.n	11862 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1185a:	3001      	adds	r0, #1
   1185c:	3201      	adds	r2, #1
   1185e:	2808      	cmp	r0, #8
   11860:	d008      	beq.n	11874 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   11862:	7816      	ldrb	r6, [r2, #0]
   11864:	2e00      	cmp	r6, #0
   11866:	d0f8      	beq.n	1185a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   11868:	4ea6      	ldr	r6, [pc, #664]	; (11b04 <tcc_init+0x334>)
   1186a:	5c76      	ldrb	r6, [r6, r1]
   1186c:	4286      	cmp	r6, r0
   1186e:	dcf4      	bgt.n	1185a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   11870:	2017      	movs	r0, #23
   11872:	e7c7      	b.n	11804 <tcc_init+0x34>
   11874:	2200      	movs	r2, #0
   11876:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11878:	2080      	movs	r0, #128	; 0x80
   1187a:	0440      	lsls	r0, r0, #17
   1187c:	4684      	mov	ip, r0
   1187e:	e002      	b.n	11886 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   11880:	3201      	adds	r2, #1
   11882:	2a04      	cmp	r2, #4
   11884:	d00e      	beq.n	118a4 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   11886:	18a8      	adds	r0, r5, r2
   11888:	7c00      	ldrb	r0, [r0, #16]
   1188a:	2801      	cmp	r0, #1
   1188c:	d1f8      	bne.n	11880 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1188e:	489e      	ldr	r0, [pc, #632]	; (11b08 <tcc_init+0x338>)
   11890:	5c40      	ldrb	r0, [r0, r1]
   11892:	4290      	cmp	r0, r2
   11894:	da00      	bge.n	11898 <tcc_init+0xc8>
   11896:	e18f      	b.n	11bb8 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11898:	4660      	mov	r0, ip
   1189a:	4090      	lsls	r0, r2
   1189c:	9e02      	ldr	r6, [sp, #8]
   1189e:	4306      	orrs	r6, r0
   118a0:	9602      	str	r6, [sp, #8]
   118a2:	e7ed      	b.n	11880 <tcc_init+0xb0>
	if (config->run_in_standby) {
   118a4:	329d      	adds	r2, #157	; 0x9d
   118a6:	5caa      	ldrb	r2, [r5, r2]
   118a8:	2a00      	cmp	r2, #0
   118aa:	d004      	beq.n	118b6 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   118ac:	2280      	movs	r2, #128	; 0x80
   118ae:	0112      	lsls	r2, r2, #4
   118b0:	9902      	ldr	r1, [sp, #8]
   118b2:	4311      	orrs	r1, r2
   118b4:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   118b6:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   118b8:	1e51      	subs	r1, r2, #1
   118ba:	418a      	sbcs	r2, r1
   118bc:	0092      	lsls	r2, r2, #2
   118be:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   118c0:	7a6a      	ldrb	r2, [r5, #9]
   118c2:	2a01      	cmp	r2, #1
   118c4:	d022      	beq.n	1190c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   118c6:	4a90      	ldr	r2, [pc, #576]	; (11b08 <tcc_init+0x338>)
   118c8:	5cd2      	ldrb	r2, [r2, r3]
   118ca:	0011      	movs	r1, r2
   118cc:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   118ce:	2235      	movs	r2, #53	; 0x35
   118d0:	5caa      	ldrb	r2, [r5, r2]
   118d2:	428a      	cmp	r2, r1
   118d4:	d300      	bcc.n	118d8 <tcc_init+0x108>
   118d6:	e179      	b.n	11bcc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   118d8:	212c      	movs	r1, #44	; 0x2c
   118da:	5c69      	ldrb	r1, [r5, r1]
   118dc:	290f      	cmp	r1, #15
   118de:	d900      	bls.n	118e2 <tcc_init+0x112>
   118e0:	e174      	b.n	11bcc <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   118e2:	7b28      	ldrb	r0, [r5, #12]
   118e4:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   118e6:	7ae8      	ldrb	r0, [r5, #11]
   118e8:	900b      	str	r0, [sp, #44]	; 0x2c
   118ea:	202d      	movs	r0, #45	; 0x2d
   118ec:	4682      	mov	sl, r0
   118ee:	44aa      	add	sl, r5
   118f0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   118f2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   118f4:	ae0e      	add	r6, sp, #56	; 0x38
   118f6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   118f8:	26c0      	movs	r6, #192	; 0xc0
   118fa:	0136      	lsls	r6, r6, #4
   118fc:	46b1      	mov	r9, r6
   118fe:	4684      	mov	ip, r0
   11900:	46a0      	mov	r8, r4
   11902:	0028      	movs	r0, r5
   11904:	4655      	mov	r5, sl
   11906:	9309      	str	r3, [sp, #36]	; 0x24
   11908:	4682      	mov	sl, r0
   1190a:	e035      	b.n	11978 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1190c:	9906      	ldr	r1, [sp, #24]
   1190e:	4311      	orrs	r1, r2
   11910:	9106      	str	r1, [sp, #24]
   11912:	e7d8      	b.n	118c6 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11914:	0292      	lsls	r2, r2, #10
   11916:	464f      	mov	r7, r9
   11918:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1191a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1191c:	7919      	ldrb	r1, [r3, #4]
   1191e:	468b      	mov	fp, r1
   11920:	2103      	movs	r1, #3
   11922:	465f      	mov	r7, fp
   11924:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11926:	430a      	orrs	r2, r1
   11928:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1192a:	795a      	ldrb	r2, [r3, #5]
   1192c:	0152      	lsls	r2, r2, #5
   1192e:	2160      	movs	r1, #96	; 0x60
   11930:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11932:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   11934:	7999      	ldrb	r1, [r3, #6]
   11936:	0209      	lsls	r1, r1, #8
   11938:	26c0      	movs	r6, #192	; 0xc0
   1193a:	00b6      	lsls	r6, r6, #2
   1193c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1193e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   11940:	79da      	ldrb	r2, [r3, #7]
   11942:	0312      	lsls	r2, r2, #12
   11944:	21e0      	movs	r1, #224	; 0xe0
   11946:	01c9      	lsls	r1, r1, #7
   11948:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1194a:	4316      	orrs	r6, r2
   1194c:	4334      	orrs	r4, r6
   1194e:	9a03      	ldr	r2, [sp, #12]
   11950:	4314      	orrs	r4, r2
   11952:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   11954:	4662      	mov	r2, ip
   11956:	9907      	ldr	r1, [sp, #28]
   11958:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1195a:	2a04      	cmp	r2, #4
   1195c:	d02a      	beq.n	119b4 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1195e:	7c9a      	ldrb	r2, [r3, #18]
   11960:	9905      	ldr	r1, [sp, #20]
   11962:	4291      	cmp	r1, r2
   11964:	d800      	bhi.n	11968 <tcc_init+0x198>
   11966:	e131      	b.n	11bcc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11968:	7a59      	ldrb	r1, [r3, #9]
   1196a:	350a      	adds	r5, #10
   1196c:	2304      	movs	r3, #4
   1196e:	469b      	mov	fp, r3
   11970:	44dc      	add	ip, fp
   11972:	290f      	cmp	r1, #15
   11974:	d900      	bls.n	11978 <tcc_init+0x1a8>
   11976:	e129      	b.n	11bcc <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11978:	0609      	lsls	r1, r1, #24
   1197a:	23f0      	movs	r3, #240	; 0xf0
   1197c:	051b      	lsls	r3, r3, #20
   1197e:	4019      	ands	r1, r3
   11980:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   11982:	782e      	ldrb	r6, [r5, #0]
   11984:	0436      	lsls	r6, r6, #16
   11986:	20ff      	movs	r0, #255	; 0xff
   11988:	0400      	lsls	r0, r0, #16
   1198a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1198c:	7868      	ldrb	r0, [r5, #1]
   1198e:	2480      	movs	r4, #128	; 0x80
   11990:	2800      	cmp	r0, #0
   11992:	d100      	bne.n	11996 <tcc_init+0x1c6>
   11994:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   11996:	7898      	ldrb	r0, [r3, #2]
   11998:	2708      	movs	r7, #8
   1199a:	9703      	str	r7, [sp, #12]
   1199c:	2800      	cmp	r0, #0
   1199e:	d101      	bne.n	119a4 <tcc_init+0x1d4>
   119a0:	9804      	ldr	r0, [sp, #16]
   119a2:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   119a4:	78d8      	ldrb	r0, [r3, #3]
   119a6:	4683      	mov	fp, r0
   119a8:	2010      	movs	r0, #16
   119aa:	465f      	mov	r7, fp
   119ac:	2f00      	cmp	r7, #0
   119ae:	d1b1      	bne.n	11914 <tcc_init+0x144>
   119b0:	9804      	ldr	r0, [sp, #16]
   119b2:	e7af      	b.n	11914 <tcc_init+0x144>
   119b4:	4644      	mov	r4, r8
   119b6:	4655      	mov	r5, sl
   119b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   119ba:	4a52      	ldr	r2, [pc, #328]	; (11b04 <tcc_init+0x334>)
   119bc:	5cd2      	ldrb	r2, [r2, r3]
   119be:	4691      	mov	r9, r2
   119c0:	4651      	mov	r1, sl
   119c2:	3150      	adds	r1, #80	; 0x50
   119c4:	4650      	mov	r0, sl
   119c6:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   119c8:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   119ca:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   119cc:	2601      	movs	r6, #1
   119ce:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   119d0:	2602      	movs	r6, #2
   119d2:	36ff      	adds	r6, #255	; 0xff
   119d4:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   119d6:	2680      	movs	r6, #128	; 0x80
   119d8:	0276      	lsls	r6, r6, #9
   119da:	46b0      	mov	r8, r6
   119dc:	46a4      	mov	ip, r4
   119de:	001c      	movs	r4, r3
   119e0:	464b      	mov	r3, r9
   119e2:	e00f      	b.n	11a04 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   119e4:	7806      	ldrb	r6, [r0, #0]
   119e6:	2e00      	cmp	r6, #0
   119e8:	d007      	beq.n	119fa <tcc_init+0x22a>
			if (i >= ow_num) {
   119ea:	4293      	cmp	r3, r2
   119ec:	d800      	bhi.n	119f0 <tcc_init+0x220>
   119ee:	e0e7      	b.n	11bc0 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   119f0:	2e02      	cmp	r6, #2
   119f2:	d014      	beq.n	11a1e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   119f4:	4656      	mov	r6, sl
   119f6:	4096      	lsls	r6, r2
   119f8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   119fa:	3201      	adds	r2, #1
   119fc:	3101      	adds	r1, #1
   119fe:	3002      	adds	r0, #2
   11a00:	2a08      	cmp	r2, #8
   11a02:	d010      	beq.n	11a26 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   11a04:	780e      	ldrb	r6, [r1, #0]
   11a06:	2e00      	cmp	r6, #0
   11a08:	d0ec      	beq.n	119e4 <tcc_init+0x214>
			if (i >= ow_num) {
   11a0a:	4293      	cmp	r3, r2
   11a0c:	d800      	bhi.n	11a10 <tcc_init+0x240>
   11a0e:	e0d5      	b.n	11bbc <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11a10:	4646      	mov	r6, r8
   11a12:	4096      	lsls	r6, r2
   11a14:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11a16:	7806      	ldrb	r6, [r0, #0]
   11a18:	2e00      	cmp	r6, #0
   11a1a:	d1e9      	bne.n	119f0 <tcc_init+0x220>
   11a1c:	e7ed      	b.n	119fa <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11a1e:	465e      	mov	r6, fp
   11a20:	4096      	lsls	r6, r2
   11a22:	4337      	orrs	r7, r6
   11a24:	e7e9      	b.n	119fa <tcc_init+0x22a>
   11a26:	4699      	mov	r9, r3
   11a28:	0023      	movs	r3, r4
   11a2a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11a2c:	7e6a      	ldrb	r2, [r5, #25]
   11a2e:	0112      	lsls	r2, r2, #4
   11a30:	2130      	movs	r1, #48	; 0x30
   11a32:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   11a34:	7e28      	ldrb	r0, [r5, #24]
   11a36:	2207      	movs	r2, #7
   11a38:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11a3a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11a3c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   11a3e:	2080      	movs	r0, #128	; 0x80
   11a40:	0240      	lsls	r0, r0, #9
   11a42:	000e      	movs	r6, r1
   11a44:	e002      	b.n	11a4c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11a46:	3201      	adds	r2, #1
   11a48:	2a04      	cmp	r2, #4
   11a4a:	d00b      	beq.n	11a64 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   11a4c:	18a9      	adds	r1, r5, r2
   11a4e:	7d09      	ldrb	r1, [r1, #20]
   11a50:	2900      	cmp	r1, #0
   11a52:	d0f8      	beq.n	11a46 <tcc_init+0x276>
			if (n >= cc_num) {
   11a54:	9905      	ldr	r1, [sp, #20]
   11a56:	4291      	cmp	r1, r2
   11a58:	dc00      	bgt.n	11a5c <tcc_init+0x28c>
   11a5a:	e0b3      	b.n	11bc4 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   11a5c:	0001      	movs	r1, r0
   11a5e:	4091      	lsls	r1, r2
   11a60:	430e      	orrs	r6, r1
   11a62:	e7f0      	b.n	11a46 <tcc_init+0x276>
   11a64:	46b2      	mov	sl, r6
   11a66:	9801      	ldr	r0, [sp, #4]
   11a68:	0002      	movs	r2, r0
   11a6a:	3204      	adds	r2, #4
   11a6c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   11a6e:	2100      	movs	r1, #0
   11a70:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11a72:	4282      	cmp	r2, r0
   11a74:	d1fc      	bne.n	11a70 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   11a76:	2200      	movs	r2, #0
   11a78:	9801      	ldr	r0, [sp, #4]
   11a7a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   11a7c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   11a7e:	0099      	lsls	r1, r3, #2
   11a80:	4a22      	ldr	r2, [pc, #136]	; (11b0c <tcc_init+0x33c>)
   11a82:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   11a84:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   11a86:	22a0      	movs	r2, #160	; 0xa0
   11a88:	5ca9      	ldrb	r1, [r5, r2]
   11a8a:	3a64      	subs	r2, #100	; 0x64
   11a8c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   11a8e:	a90d      	add	r1, sp, #52	; 0x34
   11a90:	7aaa      	ldrb	r2, [r5, #10]
   11a92:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   11a94:	4a1e      	ldr	r2, [pc, #120]	; (11b10 <tcc_init+0x340>)
   11a96:	5cd6      	ldrb	r6, [r2, r3]
   11a98:	0030      	movs	r0, r6
   11a9a:	4b1e      	ldr	r3, [pc, #120]	; (11b14 <tcc_init+0x344>)
   11a9c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   11a9e:	0030      	movs	r0, r6
   11aa0:	4b1d      	ldr	r3, [pc, #116]	; (11b18 <tcc_init+0x348>)
   11aa2:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11aa4:	464b      	mov	r3, r9
   11aa6:	2b00      	cmp	r3, #0
   11aa8:	dd3c      	ble.n	11b24 <tcc_init+0x354>
   11aaa:	002e      	movs	r6, r5
   11aac:	3658      	adds	r6, #88	; 0x58
   11aae:	3398      	adds	r3, #152	; 0x98
   11ab0:	4698      	mov	r8, r3
   11ab2:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ab4:	2301      	movs	r3, #1
   11ab6:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   11ab8:	46ab      	mov	fp, r5
   11aba:	4645      	mov	r5, r8
   11abc:	46a0      	mov	r8, r4
   11abe:	9c08      	ldr	r4, [sp, #32]
   11ac0:	e003      	b.n	11aca <tcc_init+0x2fa>
   11ac2:	3401      	adds	r4, #1
   11ac4:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11ac6:	42ac      	cmp	r4, r5
   11ac8:	d02a      	beq.n	11b20 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   11aca:	7823      	ldrb	r3, [r4, #0]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d0f8      	beq.n	11ac2 <tcc_init+0x2f2>
   11ad0:	ab0c      	add	r3, sp, #48	; 0x30
   11ad2:	464a      	mov	r2, r9
   11ad4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11ad6:	2300      	movs	r3, #0
   11ad8:	aa0c      	add	r2, sp, #48	; 0x30
   11ada:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   11adc:	0013      	movs	r3, r2
   11ade:	2220      	movs	r2, #32
   11ae0:	18b2      	adds	r2, r6, r2
   11ae2:	7812      	ldrb	r2, [r2, #0]
   11ae4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   11ae6:	464a      	mov	r2, r9
   11ae8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   11aea:	7830      	ldrb	r0, [r6, #0]
   11aec:	0019      	movs	r1, r3
   11aee:	4b0b      	ldr	r3, [pc, #44]	; (11b1c <tcc_init+0x34c>)
   11af0:	4798      	blx	r3
   11af2:	e7e6      	b.n	11ac2 <tcc_init+0x2f2>
   11af4:	00011651 	.word	0x00011651
   11af8:	40000400 	.word	0x40000400
   11afc:	00019bec 	.word	0x00019bec
   11b00:	00019c00 	.word	0x00019c00
   11b04:	00019c0c 	.word	0x00019c0c
   11b08:	00019bf8 	.word	0x00019bf8
   11b0c:	200014cc 	.word	0x200014cc
   11b10:	00019bfc 	.word	0x00019bfc
   11b14:	000114f9 	.word	0x000114f9
   11b18:	0001146d 	.word	0x0001146d
   11b1c:	000115f1 	.word	0x000115f1
   11b20:	4644      	mov	r4, r8
   11b22:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11b26:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11b2a:	0212      	lsls	r2, r2, #8
   11b2c:	4313      	orrs	r3, r2
   11b2e:	9a02      	ldr	r2, [sp, #8]
   11b30:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   11b32:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11b34:	2204      	movs	r2, #4
   11b36:	68a3      	ldr	r3, [r4, #8]
   11b38:	421a      	tst	r2, r3
   11b3a:	d1fc      	bne.n	11b36 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   11b3c:	23ff      	movs	r3, #255	; 0xff
   11b3e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11b40:	2204      	movs	r2, #4
   11b42:	68a3      	ldr	r3, [r4, #8]
   11b44:	421a      	tst	r2, r3
   11b46:	d1fc      	bne.n	11b42 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11b48:	466b      	mov	r3, sp
   11b4a:	7e1b      	ldrb	r3, [r3, #24]
   11b4c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   11b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11b50:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11b54:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11b56:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11b58:	4a1d      	ldr	r2, [pc, #116]	; (11bd0 <tcc_init+0x400>)
   11b5a:	68a3      	ldr	r3, [r4, #8]
   11b5c:	4213      	tst	r3, r2
   11b5e:	d1fc      	bne.n	11b5a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11b60:	4653      	mov	r3, sl
   11b62:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11b64:	2210      	movs	r2, #16
   11b66:	68a3      	ldr	r3, [r4, #8]
   11b68:	421a      	tst	r2, r3
   11b6a:	d1fc      	bne.n	11b66 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   11b6c:	682b      	ldr	r3, [r5, #0]
   11b6e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11b70:	4a18      	ldr	r2, [pc, #96]	; (11bd4 <tcc_init+0x404>)
   11b72:	68a3      	ldr	r3, [r4, #8]
   11b74:	4213      	tst	r3, r2
   11b76:	d1fc      	bne.n	11b72 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11b78:	686b      	ldr	r3, [r5, #4]
   11b7a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11b7c:	9805      	ldr	r0, [sp, #20]
   11b7e:	2800      	cmp	r0, #0
   11b80:	dd22      	ble.n	11bc8 <tcc_init+0x3f8>
   11b82:	351c      	adds	r5, #28
   11b84:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11b86:	4e14      	ldr	r6, [pc, #80]	; (11bd8 <tcc_init+0x408>)
   11b88:	0032      	movs	r2, r6
   11b8a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   11b8c:	68a3      	ldr	r3, [r4, #8]
   11b8e:	421a      	tst	r2, r3
   11b90:	d1fc      	bne.n	11b8c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11b92:	cd04      	ldmia	r5!, {r2}
   11b94:	000b      	movs	r3, r1
   11b96:	3310      	adds	r3, #16
   11b98:	009b      	lsls	r3, r3, #2
   11b9a:	18e3      	adds	r3, r4, r3
   11b9c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11b9e:	3101      	adds	r1, #1
   11ba0:	4288      	cmp	r0, r1
   11ba2:	dcf1      	bgt.n	11b88 <tcc_init+0x3b8>
	return STATUS_OK;
   11ba4:	2000      	movs	r0, #0
   11ba6:	e62d      	b.n	11804 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   11ba8:	2017      	movs	r0, #23
   11baa:	e62b      	b.n	11804 <tcc_init+0x34>
   11bac:	2017      	movs	r0, #23
   11bae:	e629      	b.n	11804 <tcc_init+0x34>
   11bb0:	2017      	movs	r0, #23
   11bb2:	e627      	b.n	11804 <tcc_init+0x34>
   11bb4:	2017      	movs	r0, #23
   11bb6:	e625      	b.n	11804 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11bb8:	2017      	movs	r0, #23
   11bba:	e623      	b.n	11804 <tcc_init+0x34>
			if (i >= ow_num) {
   11bbc:	2017      	movs	r0, #23
   11bbe:	e621      	b.n	11804 <tcc_init+0x34>
			if (i >= ow_num) {
   11bc0:	2017      	movs	r0, #23
   11bc2:	e61f      	b.n	11804 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11bc4:	2017      	movs	r0, #23
   11bc6:	e61d      	b.n	11804 <tcc_init+0x34>
	return STATUS_OK;
   11bc8:	2000      	movs	r0, #0
   11bca:	e61b      	b.n	11804 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11bcc:	2017      	movs	r0, #23
   11bce:	e619      	b.n	11804 <tcc_init+0x34>
   11bd0:	00020040 	.word	0x00020040
   11bd4:	00040080 	.word	0x00040080
   11bd8:	00080100 	.word	0x00080100

00011bdc <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   11bdc:	0092      	lsls	r2, r2, #2
   11bde:	1883      	adds	r3, r0, r2
   11be0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   11be2:	4b03      	ldr	r3, [pc, #12]	; (11bf0 <tcc_register_callback+0x14>)
   11be4:	58d3      	ldr	r3, [r2, r3]
   11be6:	6b42      	ldr	r2, [r0, #52]	; 0x34
   11be8:	4313      	orrs	r3, r2
   11bea:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   11bec:	2000      	movs	r0, #0
   11bee:	4770      	bx	lr
   11bf0:	00019c10 	.word	0x00019c10

00011bf4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   11bf4:	b570      	push	{r4, r5, r6, lr}
   11bf6:	0004      	movs	r4, r0
   11bf8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   11bfa:	6800      	ldr	r0, [r0, #0]
   11bfc:	4b09      	ldr	r3, [pc, #36]	; (11c24 <tcc_enable_callback+0x30>)
   11bfe:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   11c00:	4b09      	ldr	r3, [pc, #36]	; (11c28 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11c02:	5c1b      	ldrb	r3, [r3, r0]
   11c04:	221f      	movs	r2, #31
   11c06:	401a      	ands	r2, r3
   11c08:	2301      	movs	r3, #1
   11c0a:	4093      	lsls	r3, r2
   11c0c:	4a07      	ldr	r2, [pc, #28]	; (11c2c <tcc_enable_callback+0x38>)
   11c0e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   11c10:	00ad      	lsls	r5, r5, #2
   11c12:	4b07      	ldr	r3, [pc, #28]	; (11c30 <tcc_enable_callback+0x3c>)
   11c14:	58ea      	ldr	r2, [r5, r3]
   11c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11c18:	4313      	orrs	r3, r2
   11c1a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   11c1c:	6823      	ldr	r3, [r4, #0]
   11c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
   11c20:	bd70      	pop	{r4, r5, r6, pc}
   11c22:	46c0      	nop			; (mov r8, r8)
   11c24:	00011651 	.word	0x00011651
   11c28:	00019c40 	.word	0x00019c40
   11c2c:	e000e100 	.word	0xe000e100
   11c30:	00019c10 	.word	0x00019c10

00011c34 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   11c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c36:	46c6      	mov	lr, r8
   11c38:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   11c3a:	0080      	lsls	r0, r0, #2
   11c3c:	4b0e      	ldr	r3, [pc, #56]	; (11c78 <_tcc_interrupt_handler+0x44>)
   11c3e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   11c40:	683b      	ldr	r3, [r7, #0]
   11c42:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   11c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11c48:	4013      	ands	r3, r2
   11c4a:	401e      	ands	r6, r3
   11c4c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11c4e:	4b0b      	ldr	r3, [pc, #44]	; (11c7c <_tcc_interrupt_handler+0x48>)
   11c50:	4698      	mov	r8, r3
   11c52:	e002      	b.n	11c5a <_tcc_interrupt_handler+0x26>
   11c54:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11c56:	2c30      	cmp	r4, #48	; 0x30
   11c58:	d00a      	beq.n	11c70 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11c5a:	4643      	mov	r3, r8
   11c5c:	58e5      	ldr	r5, [r4, r3]
   11c5e:	4235      	tst	r5, r6
   11c60:	d0f8      	beq.n	11c54 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   11c62:	193b      	adds	r3, r7, r4
   11c64:	685b      	ldr	r3, [r3, #4]
   11c66:	0038      	movs	r0, r7
   11c68:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   11c6a:	683b      	ldr	r3, [r7, #0]
   11c6c:	62dd      	str	r5, [r3, #44]	; 0x2c
   11c6e:	e7f1      	b.n	11c54 <_tcc_interrupt_handler+0x20>
		}
	}
}
   11c70:	bc04      	pop	{r2}
   11c72:	4690      	mov	r8, r2
   11c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c76:	46c0      	nop			; (mov r8, r8)
   11c78:	200014cc 	.word	0x200014cc
   11c7c:	00019c10 	.word	0x00019c10

00011c80 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   11c80:	b510      	push	{r4, lr}
   11c82:	2000      	movs	r0, #0
   11c84:	4b01      	ldr	r3, [pc, #4]	; (11c8c <TCC0_Handler+0xc>)
   11c86:	4798      	blx	r3
   11c88:	bd10      	pop	{r4, pc}
   11c8a:	46c0      	nop			; (mov r8, r8)
   11c8c:	00011c35 	.word	0x00011c35

00011c90 <TCC1_Handler>:
   11c90:	b510      	push	{r4, lr}
   11c92:	2001      	movs	r0, #1
   11c94:	4b01      	ldr	r3, [pc, #4]	; (11c9c <TCC1_Handler+0xc>)
   11c96:	4798      	blx	r3
   11c98:	bd10      	pop	{r4, pc}
   11c9a:	46c0      	nop			; (mov r8, r8)
   11c9c:	00011c35 	.word	0x00011c35

00011ca0 <TCC2_Handler>:
   11ca0:	b510      	push	{r4, lr}
   11ca2:	2002      	movs	r0, #2
   11ca4:	4b01      	ldr	r3, [pc, #4]	; (11cac <TCC2_Handler+0xc>)
   11ca6:	4798      	blx	r3
   11ca8:	bd10      	pop	{r4, pc}
   11caa:	46c0      	nop			; (mov r8, r8)
   11cac:	00011c35 	.word	0x00011c35

00011cb0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11cb0:	e7fe      	b.n	11cb0 <Dummy_Handler>
	...

00011cb4 <Reset_Handler>:
{
   11cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11cb6:	4a2a      	ldr	r2, [pc, #168]	; (11d60 <Reset_Handler+0xac>)
   11cb8:	4b2a      	ldr	r3, [pc, #168]	; (11d64 <Reset_Handler+0xb0>)
   11cba:	429a      	cmp	r2, r3
   11cbc:	d011      	beq.n	11ce2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   11cbe:	001a      	movs	r2, r3
   11cc0:	4b29      	ldr	r3, [pc, #164]	; (11d68 <Reset_Handler+0xb4>)
   11cc2:	429a      	cmp	r2, r3
   11cc4:	d20d      	bcs.n	11ce2 <Reset_Handler+0x2e>
   11cc6:	4a29      	ldr	r2, [pc, #164]	; (11d6c <Reset_Handler+0xb8>)
   11cc8:	3303      	adds	r3, #3
   11cca:	1a9b      	subs	r3, r3, r2
   11ccc:	089b      	lsrs	r3, r3, #2
   11cce:	3301      	adds	r3, #1
   11cd0:	009b      	lsls	r3, r3, #2
   11cd2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   11cd4:	4823      	ldr	r0, [pc, #140]	; (11d64 <Reset_Handler+0xb0>)
   11cd6:	4922      	ldr	r1, [pc, #136]	; (11d60 <Reset_Handler+0xac>)
   11cd8:	588c      	ldr	r4, [r1, r2]
   11cda:	5084      	str	r4, [r0, r2]
   11cdc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   11cde:	429a      	cmp	r2, r3
   11ce0:	d1fa      	bne.n	11cd8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   11ce2:	4a23      	ldr	r2, [pc, #140]	; (11d70 <Reset_Handler+0xbc>)
   11ce4:	4b23      	ldr	r3, [pc, #140]	; (11d74 <Reset_Handler+0xc0>)
   11ce6:	429a      	cmp	r2, r3
   11ce8:	d20a      	bcs.n	11d00 <Reset_Handler+0x4c>
   11cea:	43d3      	mvns	r3, r2
   11cec:	4921      	ldr	r1, [pc, #132]	; (11d74 <Reset_Handler+0xc0>)
   11cee:	185b      	adds	r3, r3, r1
   11cf0:	2103      	movs	r1, #3
   11cf2:	438b      	bics	r3, r1
   11cf4:	3304      	adds	r3, #4
   11cf6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   11cf8:	2100      	movs	r1, #0
   11cfa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   11cfc:	4293      	cmp	r3, r2
   11cfe:	d1fc      	bne.n	11cfa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11d00:	4a1d      	ldr	r2, [pc, #116]	; (11d78 <Reset_Handler+0xc4>)
   11d02:	21ff      	movs	r1, #255	; 0xff
   11d04:	4b1d      	ldr	r3, [pc, #116]	; (11d7c <Reset_Handler+0xc8>)
   11d06:	438b      	bics	r3, r1
   11d08:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11d0a:	39fd      	subs	r1, #253	; 0xfd
   11d0c:	2390      	movs	r3, #144	; 0x90
   11d0e:	005b      	lsls	r3, r3, #1
   11d10:	4a1b      	ldr	r2, [pc, #108]	; (11d80 <Reset_Handler+0xcc>)
   11d12:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11d14:	4a1b      	ldr	r2, [pc, #108]	; (11d84 <Reset_Handler+0xd0>)
   11d16:	78d3      	ldrb	r3, [r2, #3]
   11d18:	2503      	movs	r5, #3
   11d1a:	43ab      	bics	r3, r5
   11d1c:	2402      	movs	r4, #2
   11d1e:	4323      	orrs	r3, r4
   11d20:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11d22:	78d3      	ldrb	r3, [r2, #3]
   11d24:	270c      	movs	r7, #12
   11d26:	43bb      	bics	r3, r7
   11d28:	2608      	movs	r6, #8
   11d2a:	4333      	orrs	r3, r6
   11d2c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   11d2e:	4b16      	ldr	r3, [pc, #88]	; (11d88 <Reset_Handler+0xd4>)
   11d30:	7b98      	ldrb	r0, [r3, #14]
   11d32:	2230      	movs	r2, #48	; 0x30
   11d34:	4390      	bics	r0, r2
   11d36:	2220      	movs	r2, #32
   11d38:	4310      	orrs	r0, r2
   11d3a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11d3c:	7b99      	ldrb	r1, [r3, #14]
   11d3e:	43b9      	bics	r1, r7
   11d40:	4331      	orrs	r1, r6
   11d42:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11d44:	7b9a      	ldrb	r2, [r3, #14]
   11d46:	43aa      	bics	r2, r5
   11d48:	4322      	orrs	r2, r4
   11d4a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11d4c:	4a0f      	ldr	r2, [pc, #60]	; (11d8c <Reset_Handler+0xd8>)
   11d4e:	6853      	ldr	r3, [r2, #4]
   11d50:	2180      	movs	r1, #128	; 0x80
   11d52:	430b      	orrs	r3, r1
   11d54:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11d56:	4b0e      	ldr	r3, [pc, #56]	; (11d90 <Reset_Handler+0xdc>)
   11d58:	4798      	blx	r3
        main();
   11d5a:	4b0e      	ldr	r3, [pc, #56]	; (11d94 <Reset_Handler+0xe0>)
   11d5c:	4798      	blx	r3
   11d5e:	e7fe      	b.n	11d5e <Reset_Handler+0xaa>
   11d60:	0001b084 	.word	0x0001b084
   11d64:	20000000 	.word	0x20000000
   11d68:	20000320 	.word	0x20000320
   11d6c:	20000004 	.word	0x20000004
   11d70:	20000320 	.word	0x20000320
   11d74:	2000163c 	.word	0x2000163c
   11d78:	e000ed00 	.word	0xe000ed00
   11d7c:	0000b000 	.word	0x0000b000
   11d80:	41007000 	.word	0x41007000
   11d84:	41005000 	.word	0x41005000
   11d88:	41004800 	.word	0x41004800
   11d8c:	41004000 	.word	0x41004000
   11d90:	0001732d 	.word	0x0001732d
   11d94:	00016b59 	.word	0x00016b59

00011d98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d9a:	46c6      	mov	lr, r8
   11d9c:	b500      	push	{lr}
   11d9e:	000c      	movs	r4, r1
   11da0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   11da2:	2800      	cmp	r0, #0
   11da4:	d10f      	bne.n	11dc6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   11da6:	2a00      	cmp	r2, #0
   11da8:	dd11      	ble.n	11dce <_read+0x36>
   11daa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   11dac:	4e09      	ldr	r6, [pc, #36]	; (11dd4 <_read+0x3c>)
   11dae:	4d0a      	ldr	r5, [pc, #40]	; (11dd8 <_read+0x40>)
   11db0:	6830      	ldr	r0, [r6, #0]
   11db2:	0021      	movs	r1, r4
   11db4:	682b      	ldr	r3, [r5, #0]
   11db6:	4798      	blx	r3
		ptr++;
   11db8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   11dba:	42bc      	cmp	r4, r7
   11dbc:	d1f8      	bne.n	11db0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   11dbe:	4640      	mov	r0, r8
   11dc0:	bc04      	pop	{r2}
   11dc2:	4690      	mov	r8, r2
   11dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   11dc6:	2301      	movs	r3, #1
   11dc8:	425b      	negs	r3, r3
   11dca:	4698      	mov	r8, r3
   11dcc:	e7f7      	b.n	11dbe <_read+0x26>
	for (; len > 0; --len) {
   11dce:	4680      	mov	r8, r0
   11dd0:	e7f5      	b.n	11dbe <_read+0x26>
   11dd2:	46c0      	nop			; (mov r8, r8)
   11dd4:	200014e0 	.word	0x200014e0
   11dd8:	200014d8 	.word	0x200014d8

00011ddc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   11ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dde:	46c6      	mov	lr, r8
   11de0:	b500      	push	{lr}
   11de2:	000e      	movs	r6, r1
   11de4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   11de6:	3801      	subs	r0, #1
   11de8:	2802      	cmp	r0, #2
   11dea:	d810      	bhi.n	11e0e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   11dec:	2a00      	cmp	r2, #0
   11dee:	d011      	beq.n	11e14 <_write+0x38>
   11df0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   11df2:	4b0c      	ldr	r3, [pc, #48]	; (11e24 <_write+0x48>)
   11df4:	4698      	mov	r8, r3
   11df6:	4f0c      	ldr	r7, [pc, #48]	; (11e28 <_write+0x4c>)
   11df8:	4643      	mov	r3, r8
   11dfa:	6818      	ldr	r0, [r3, #0]
   11dfc:	5d31      	ldrb	r1, [r6, r4]
   11dfe:	683b      	ldr	r3, [r7, #0]
   11e00:	4798      	blx	r3
   11e02:	2800      	cmp	r0, #0
   11e04:	db08      	blt.n	11e18 <_write+0x3c>
			return -1;
		}
		++nChars;
   11e06:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   11e08:	42a5      	cmp	r5, r4
   11e0a:	d1f5      	bne.n	11df8 <_write+0x1c>
   11e0c:	e006      	b.n	11e1c <_write+0x40>
		return -1;
   11e0e:	2401      	movs	r4, #1
   11e10:	4264      	negs	r4, r4
   11e12:	e003      	b.n	11e1c <_write+0x40>
	for (; len != 0; --len) {
   11e14:	0014      	movs	r4, r2
   11e16:	e001      	b.n	11e1c <_write+0x40>
			return -1;
   11e18:	2401      	movs	r4, #1
   11e1a:	4264      	negs	r4, r4
	}
	return nChars;
}
   11e1c:	0020      	movs	r0, r4
   11e1e:	bc04      	pop	{r2}
   11e20:	4690      	mov	r8, r2
   11e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e24:	200014e0 	.word	0x200014e0
   11e28:	200014dc 	.word	0x200014dc

00011e2c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   11e2c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   11e2e:	4a06      	ldr	r2, [pc, #24]	; (11e48 <_sbrk+0x1c>)
   11e30:	6812      	ldr	r2, [r2, #0]
   11e32:	2a00      	cmp	r2, #0
   11e34:	d004      	beq.n	11e40 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   11e36:	4a04      	ldr	r2, [pc, #16]	; (11e48 <_sbrk+0x1c>)
   11e38:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   11e3a:	18c3      	adds	r3, r0, r3
   11e3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   11e3e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   11e40:	4902      	ldr	r1, [pc, #8]	; (11e4c <_sbrk+0x20>)
   11e42:	4a01      	ldr	r2, [pc, #4]	; (11e48 <_sbrk+0x1c>)
   11e44:	6011      	str	r1, [r2, #0]
   11e46:	e7f6      	b.n	11e36 <_sbrk+0xa>
   11e48:	20000414 	.word	0x20000414
   11e4c:	20003640 	.word	0x20003640

00011e50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   11e50:	2001      	movs	r0, #1
   11e52:	4240      	negs	r0, r0
   11e54:	4770      	bx	lr

00011e56 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   11e56:	2380      	movs	r3, #128	; 0x80
   11e58:	019b      	lsls	r3, r3, #6
   11e5a:	604b      	str	r3, [r1, #4]

	return 0;
}
   11e5c:	2000      	movs	r0, #0
   11e5e:	4770      	bx	lr

00011e60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   11e60:	2001      	movs	r0, #1
   11e62:	4770      	bx	lr

00011e64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   11e64:	2000      	movs	r0, #0
   11e66:	4770      	bx	lr

00011e68 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11e68:	b530      	push	{r4, r5, lr}
   11e6a:	b087      	sub	sp, #28
   11e6c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   11e6e:	aa01      	add	r2, sp, #4
   11e70:	23a0      	movs	r3, #160	; 0xa0
   11e72:	011b      	lsls	r3, r3, #4
   11e74:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   11e76:	2300      	movs	r3, #0
   11e78:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   11e7a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   11e7c:	21fa      	movs	r1, #250	; 0xfa
   11e7e:	00c9      	lsls	r1, r1, #3
   11e80:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   11e82:	2101      	movs	r1, #1
   11e84:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   11e86:	2004      	movs	r0, #4
   11e88:	7210      	strb	r0, [r2, #8]
   11e8a:	7253      	strb	r3, [r2, #9]
   11e8c:	7293      	strb	r3, [r2, #10]
   11e8e:	72d3      	strb	r3, [r2, #11]
   11e90:	7311      	strb	r1, [r2, #12]
   11e92:	7351      	strb	r1, [r2, #13]
   11e94:	4b14      	ldr	r3, [pc, #80]	; (11ee8 <disk_initialize+0x80>)
   11e96:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11e98:	2306      	movs	r3, #6
   11e9a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   11e9c:	4d13      	ldr	r5, [pc, #76]	; (11eec <disk_initialize+0x84>)
   11e9e:	4914      	ldr	r1, [pc, #80]	; (11ef0 <disk_initialize+0x88>)
   11ea0:	0028      	movs	r0, r5
   11ea2:	4b14      	ldr	r3, [pc, #80]	; (11ef4 <disk_initialize+0x8c>)
   11ea4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   11ea6:	0028      	movs	r0, r5
   11ea8:	4b13      	ldr	r3, [pc, #76]	; (11ef8 <disk_initialize+0x90>)
   11eaa:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   11eac:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   11eae:	2c01      	cmp	r4, #1
   11eb0:	d901      	bls.n	11eb6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   11eb2:	b007      	add	sp, #28
   11eb4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   11eb6:	0020      	movs	r0, r4
   11eb8:	4b10      	ldr	r3, [pc, #64]	; (11efc <disk_initialize+0x94>)
   11eba:	4798      	blx	r3
   11ebc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   11ebe:	2803      	cmp	r0, #3
   11ec0:	d106      	bne.n	11ed0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   11ec2:	0020      	movs	r0, r4
   11ec4:	4b0d      	ldr	r3, [pc, #52]	; (11efc <disk_initialize+0x94>)
   11ec6:	4798      	blx	r3
   11ec8:	0003      	movs	r3, r0
		return STA_NOINIT;
   11eca:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   11ecc:	2b03      	cmp	r3, #3
   11ece:	d0f0      	beq.n	11eb2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d106      	bne.n	11ee2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   11ed4:	0020      	movs	r0, r4
   11ed6:	4b0a      	ldr	r3, [pc, #40]	; (11f00 <disk_initialize+0x98>)
   11ed8:	4798      	blx	r3
	return 0;
   11eda:	1e43      	subs	r3, r0, #1
   11edc:	4198      	sbcs	r0, r3
   11ede:	0080      	lsls	r0, r0, #2
   11ee0:	e7e7      	b.n	11eb2 <disk_initialize+0x4a>
		return STA_NOINIT;
   11ee2:	2001      	movs	r0, #1
   11ee4:	e7e5      	b.n	11eb2 <disk_initialize+0x4a>
   11ee6:	46c0      	nop			; (mov r8, r8)
   11ee8:	000007de 	.word	0x000007de
   11eec:	200014e4 	.word	0x200014e4
   11ef0:	40001400 	.word	0x40001400
   11ef4:	0000fc2d 	.word	0x0000fc2d
   11ef8:	0000fac9 	.word	0x0000fac9
   11efc:	0000f799 	.word	0x0000f799
   11f00:	0000f7d5 	.word	0x0000f7d5

00011f04 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   11f04:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   11f06:	4b05      	ldr	r3, [pc, #20]	; (11f1c <disk_status+0x18>)
   11f08:	4798      	blx	r3
   11f0a:	1e03      	subs	r3, r0, #0
   11f0c:	d004      	beq.n	11f18 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   11f0e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   11f10:	2b02      	cmp	r3, #2
   11f12:	d000      	beq.n	11f16 <disk_status+0x12>
	default:
		return STA_NOINIT;
   11f14:	3802      	subs	r0, #2
	}
}
   11f16:	bd10      	pop	{r4, pc}
		return 0;
   11f18:	2000      	movs	r0, #0
   11f1a:	e7fc      	b.n	11f16 <disk_status+0x12>
   11f1c:	0000f799 	.word	0x0000f799

00011f20 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   11f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f22:	46de      	mov	lr, fp
   11f24:	464f      	mov	r7, r9
   11f26:	4646      	mov	r6, r8
   11f28:	b5c0      	push	{r6, r7, lr}
   11f2a:	b084      	sub	sp, #16
   11f2c:	9001      	str	r0, [sp, #4]
   11f2e:	000d      	movs	r5, r1
   11f30:	0014      	movs	r4, r2
   11f32:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   11f34:	4b18      	ldr	r3, [pc, #96]	; (11f98 <disk_read+0x78>)
   11f36:	4798      	blx	r3
   11f38:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   11f3a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   11f3c:	2e00      	cmp	r6, #0
   11f3e:	d105      	bne.n	11f4c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11f40:	b004      	add	sp, #16
   11f42:	bc1c      	pop	{r2, r3, r4}
   11f44:	4690      	mov	r8, r2
   11f46:	4699      	mov	r9, r3
   11f48:	46a3      	mov	fp, r4
   11f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   11f4c:	a903      	add	r1, sp, #12
   11f4e:	9801      	ldr	r0, [sp, #4]
   11f50:	4b12      	ldr	r3, [pc, #72]	; (11f9c <disk_read+0x7c>)
   11f52:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11f54:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   11f56:	0032      	movs	r2, r6
   11f58:	437a      	muls	r2, r7
   11f5a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   11f5c:	9b03      	ldr	r3, [sp, #12]
   11f5e:	3301      	adds	r3, #1
   11f60:	4373      	muls	r3, r6
		return RES_PARERR;
   11f62:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   11f64:	429a      	cmp	r2, r3
   11f66:	d8eb      	bhi.n	11f40 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   11f68:	2f00      	cmp	r7, #0
   11f6a:	d011      	beq.n	11f90 <disk_read+0x70>
   11f6c:	0273      	lsls	r3, r6, #9
   11f6e:	4698      	mov	r8, r3
   11f70:	1c7b      	adds	r3, r7, #1
   11f72:	469b      	mov	fp, r3
   11f74:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   11f76:	4e0a      	ldr	r6, [pc, #40]	; (11fa0 <disk_read+0x80>)
   11f78:	002a      	movs	r2, r5
   11f7a:	0021      	movs	r1, r4
   11f7c:	9801      	ldr	r0, [sp, #4]
   11f7e:	47b0      	blx	r6
   11f80:	2800      	cmp	r0, #0
   11f82:	d107      	bne.n	11f94 <disk_read+0x74>
   11f84:	3701      	adds	r7, #1
   11f86:	444c      	add	r4, r9
   11f88:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   11f8a:	455f      	cmp	r7, fp
   11f8c:	d1f4      	bne.n	11f78 <disk_read+0x58>
   11f8e:	e7d7      	b.n	11f40 <disk_read+0x20>
	return RES_OK;
   11f90:	2000      	movs	r0, #0
   11f92:	e7d5      	b.n	11f40 <disk_read+0x20>
			return RES_ERROR;
   11f94:	2001      	movs	r0, #1
   11f96:	e7d3      	b.n	11f40 <disk_read+0x20>
   11f98:	0000f7cd 	.word	0x0000f7cd
   11f9c:	0000f7b1 	.word	0x0000f7b1
   11fa0:	0000f7ed 	.word	0x0000f7ed

00011fa4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   11fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fa6:	46de      	mov	lr, fp
   11fa8:	464f      	mov	r7, r9
   11faa:	4646      	mov	r6, r8
   11fac:	b5c0      	push	{r6, r7, lr}
   11fae:	b084      	sub	sp, #16
   11fb0:	9001      	str	r0, [sp, #4]
   11fb2:	000d      	movs	r5, r1
   11fb4:	0014      	movs	r4, r2
   11fb6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   11fb8:	4b18      	ldr	r3, [pc, #96]	; (1201c <disk_write+0x78>)
   11fba:	4798      	blx	r3
   11fbc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   11fbe:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   11fc0:	2e00      	cmp	r6, #0
   11fc2:	d105      	bne.n	11fd0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11fc4:	b004      	add	sp, #16
   11fc6:	bc1c      	pop	{r2, r3, r4}
   11fc8:	4690      	mov	r8, r2
   11fca:	4699      	mov	r9, r3
   11fcc:	46a3      	mov	fp, r4
   11fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   11fd0:	a903      	add	r1, sp, #12
   11fd2:	9801      	ldr	r0, [sp, #4]
   11fd4:	4b12      	ldr	r3, [pc, #72]	; (12020 <disk_write+0x7c>)
   11fd6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11fd8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   11fda:	0032      	movs	r2, r6
   11fdc:	437a      	muls	r2, r7
   11fde:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   11fe0:	9b03      	ldr	r3, [sp, #12]
   11fe2:	3301      	adds	r3, #1
   11fe4:	4373      	muls	r3, r6
		return RES_PARERR;
   11fe6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   11fe8:	429a      	cmp	r2, r3
   11fea:	d8eb      	bhi.n	11fc4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   11fec:	2f00      	cmp	r7, #0
   11fee:	d011      	beq.n	12014 <disk_write+0x70>
   11ff0:	0273      	lsls	r3, r6, #9
   11ff2:	4698      	mov	r8, r3
   11ff4:	1c7b      	adds	r3, r7, #1
   11ff6:	469b      	mov	fp, r3
   11ff8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   11ffa:	4e0a      	ldr	r6, [pc, #40]	; (12024 <disk_write+0x80>)
   11ffc:	002a      	movs	r2, r5
   11ffe:	0021      	movs	r1, r4
   12000:	9801      	ldr	r0, [sp, #4]
   12002:	47b0      	blx	r6
   12004:	2800      	cmp	r0, #0
   12006:	d107      	bne.n	12018 <disk_write+0x74>
   12008:	3701      	adds	r7, #1
   1200a:	444c      	add	r4, r9
   1200c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1200e:	455f      	cmp	r7, fp
   12010:	d1f4      	bne.n	11ffc <disk_write+0x58>
   12012:	e7d7      	b.n	11fc4 <disk_write+0x20>
	return RES_OK;
   12014:	2000      	movs	r0, #0
   12016:	e7d5      	b.n	11fc4 <disk_write+0x20>
			return RES_ERROR;
   12018:	2001      	movs	r0, #1
   1201a:	e7d3      	b.n	11fc4 <disk_write+0x20>
   1201c:	0000f7cd 	.word	0x0000f7cd
   12020:	0000f7b1 	.word	0x0000f7b1
   12024:	0000f80d 	.word	0x0000f80d

00012028 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   12028:	b510      	push	{r4, lr}
   1202a:	b082      	sub	sp, #8
   1202c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1202e:	2901      	cmp	r1, #1
   12030:	d00b      	beq.n	1204a <disk_ioctl+0x22>
   12032:	2900      	cmp	r1, #0
   12034:	d020      	beq.n	12078 <disk_ioctl+0x50>
   12036:	2902      	cmp	r1, #2
   12038:	d00f      	beq.n	1205a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1203a:	2004      	movs	r0, #4
	switch (ctrl) {
   1203c:	2903      	cmp	r1, #3
   1203e:	d102      	bne.n	12046 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   12040:	2301      	movs	r3, #1
   12042:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   12044:	2000      	movs	r0, #0
	}

	return res;
}
   12046:	b002      	add	sp, #8
   12048:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1204a:	a901      	add	r1, sp, #4
   1204c:	4b0e      	ldr	r3, [pc, #56]	; (12088 <disk_ioctl+0x60>)
   1204e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   12050:	9b01      	ldr	r3, [sp, #4]
   12052:	3301      	adds	r3, #1
   12054:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   12056:	2000      	movs	r0, #0
	break;
   12058:	e7f5      	b.n	12046 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1205a:	4b0c      	ldr	r3, [pc, #48]	; (1208c <disk_ioctl+0x64>)
   1205c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1205e:	1e43      	subs	r3, r0, #1
   12060:	b2db      	uxtb	r3, r3
   12062:	2b01      	cmp	r3, #1
   12064:	d904      	bls.n	12070 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   12066:	1f03      	subs	r3, r0, #4
   12068:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1206a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1206c:	4213      	tst	r3, r2
   1206e:	d1ea      	bne.n	12046 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   12070:	2300      	movs	r3, #0
   12072:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   12074:	2000      	movs	r0, #0
	break;
   12076:	e7e6      	b.n	12046 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   12078:	4b05      	ldr	r3, [pc, #20]	; (12090 <disk_ioctl+0x68>)
   1207a:	4798      	blx	r3
   1207c:	2800      	cmp	r0, #0
   1207e:	d001      	beq.n	12084 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   12080:	2003      	movs	r0, #3
   12082:	e7e0      	b.n	12046 <disk_ioctl+0x1e>
			res = RES_OK;
   12084:	2000      	movs	r0, #0
   12086:	e7de      	b.n	12046 <disk_ioctl+0x1e>
   12088:	0000f7b1 	.word	0x0000f7b1
   1208c:	0000f7cd 	.word	0x0000f7cd
   12090:	0000f799 	.word	0x0000f799

00012094 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   12094:	b500      	push	{lr}
   12096:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   12098:	4669      	mov	r1, sp
   1209a:	480f      	ldr	r0, [pc, #60]	; (120d8 <get_fattime+0x44>)
   1209c:	4b0f      	ldr	r3, [pc, #60]	; (120dc <get_fattime+0x48>)
   1209e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   120a0:	466b      	mov	r3, sp
   120a2:	7958      	ldrb	r0, [r3, #5]
   120a4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   120a6:	791b      	ldrb	r3, [r3, #4]
   120a8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   120aa:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   120ac:	466b      	mov	r3, sp
   120ae:	789b      	ldrb	r3, [r3, #2]
   120b0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   120b2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   120b4:	466b      	mov	r3, sp
   120b6:	785b      	ldrb	r3, [r3, #1]
   120b8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   120ba:	4318      	orrs	r0, r3
   120bc:	466b      	mov	r3, sp
   120be:	781b      	ldrb	r3, [r3, #0]
   120c0:	085b      	lsrs	r3, r3, #1
   120c2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   120c4:	466b      	mov	r3, sp
   120c6:	88db      	ldrh	r3, [r3, #6]
   120c8:	4a05      	ldr	r2, [pc, #20]	; (120e0 <get_fattime+0x4c>)
   120ca:	4694      	mov	ip, r2
   120cc:	4463      	add	r3, ip
   120ce:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   120d0:	4318      	orrs	r0, r3

	return ul_time;
}
   120d2:	b003      	add	sp, #12
   120d4:	bd00      	pop	{pc}
   120d6:	46c0      	nop			; (mov r8, r8)
   120d8:	200014e4 	.word	0x200014e4
   120dc:	0000fbb5 	.word	0x0000fbb5
   120e0:	fffff844 	.word	0xfffff844

000120e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   120e4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   120e6:	2a00      	cmp	r2, #0
   120e8:	d005      	beq.n	120f6 <mem_cpy+0x12>
   120ea:	2300      	movs	r3, #0
		*d++ = *s++;
   120ec:	5ccc      	ldrb	r4, [r1, r3]
   120ee:	54c4      	strb	r4, [r0, r3]
   120f0:	3301      	adds	r3, #1
	while (cnt--)
   120f2:	4293      	cmp	r3, r2
   120f4:	d1fa      	bne.n	120ec <mem_cpy+0x8>
}
   120f6:	bd10      	pop	{r4, pc}

000120f8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   120f8:	2a00      	cmp	r2, #0
   120fa:	d005      	beq.n	12108 <mem_set+0x10>
   120fc:	0003      	movs	r3, r0
   120fe:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   12100:	7019      	strb	r1, [r3, #0]
   12102:	3301      	adds	r3, #1
	while (cnt--)
   12104:	4293      	cmp	r3, r2
   12106:	d1fb      	bne.n	12100 <mem_set+0x8>
}
   12108:	4770      	bx	lr

0001210a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1210a:	0002      	movs	r2, r0
	clst -= 2;
   1210c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1210e:	6983      	ldr	r3, [r0, #24]
   12110:	3b02      	subs	r3, #2
   12112:	2000      	movs	r0, #0
   12114:	4299      	cmp	r1, r3
   12116:	d203      	bcs.n	12120 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   12118:	7890      	ldrb	r0, [r2, #2]
   1211a:	4341      	muls	r1, r0
   1211c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1211e:	1808      	adds	r0, r1, r0
}
   12120:	4770      	bx	lr

00012122 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   12122:	0002      	movs	r2, r0
   12124:	0001      	movs	r1, r0
   12126:	310b      	adds	r1, #11
	BYTE sum = 0;
   12128:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1212a:	0843      	lsrs	r3, r0, #1
   1212c:	01c0      	lsls	r0, r0, #7
   1212e:	4303      	orrs	r3, r0
   12130:	7810      	ldrb	r0, [r2, #0]
   12132:	1818      	adds	r0, r3, r0
   12134:	b2c0      	uxtb	r0, r0
   12136:	3201      	adds	r2, #1
   12138:	428a      	cmp	r2, r1
   1213a:	d1f6      	bne.n	1212a <sum_sfn+0x8>
	return sum;
}
   1213c:	4770      	bx	lr
	...

00012140 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   12140:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   12142:	2800      	cmp	r0, #0
   12144:	d010      	beq.n	12168 <validate+0x28>
   12146:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   12148:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1214a:	2a00      	cmp	r2, #0
   1214c:	d101      	bne.n	12152 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1214e:	0018      	movs	r0, r3
   12150:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   12152:	88c2      	ldrh	r2, [r0, #6]
   12154:	428a      	cmp	r2, r1
   12156:	d1fa      	bne.n	1214e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   12158:	7840      	ldrb	r0, [r0, #1]
   1215a:	4b04      	ldr	r3, [pc, #16]	; (1216c <validate+0x2c>)
   1215c:	4798      	blx	r3
		return FR_NOT_READY;
   1215e:	2303      	movs	r3, #3
	return FR_OK;
   12160:	07c0      	lsls	r0, r0, #31
   12162:	17c0      	asrs	r0, r0, #31
   12164:	4003      	ands	r3, r0
   12166:	e7f2      	b.n	1214e <validate+0xe>
		return FR_INVALID_OBJECT;
   12168:	2309      	movs	r3, #9
   1216a:	e7f0      	b.n	1214e <validate+0xe>
   1216c:	00011f05 	.word	0x00011f05

00012170 <check_fs>:
{
   12170:	b570      	push	{r4, r5, r6, lr}
   12172:	0004      	movs	r4, r0
   12174:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12176:	0001      	movs	r1, r0
   12178:	3130      	adds	r1, #48	; 0x30
   1217a:	7840      	ldrb	r0, [r0, #1]
   1217c:	2301      	movs	r3, #1
   1217e:	4d1f      	ldr	r5, [pc, #124]	; (121fc <check_fs+0x8c>)
   12180:	47a8      	blx	r5
		return 3;
   12182:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12184:	2800      	cmp	r0, #0
   12186:	d001      	beq.n	1218c <check_fs+0x1c>
}
   12188:	0018      	movs	r0, r3
   1218a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1218c:	4b1c      	ldr	r3, [pc, #112]	; (12200 <check_fs+0x90>)
   1218e:	5ce3      	ldrb	r3, [r4, r3]
   12190:	021b      	lsls	r3, r3, #8
   12192:	4a1c      	ldr	r2, [pc, #112]	; (12204 <check_fs+0x94>)
   12194:	5ca2      	ldrb	r2, [r4, r2]
   12196:	431a      	orrs	r2, r3
   12198:	491b      	ldr	r1, [pc, #108]	; (12208 <check_fs+0x98>)
   1219a:	b212      	sxth	r2, r2
		return 2;
   1219c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1219e:	428a      	cmp	r2, r1
   121a0:	d1f2      	bne.n	12188 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   121a2:	3367      	adds	r3, #103	; 0x67
   121a4:	5ce3      	ldrb	r3, [r4, r3]
   121a6:	061b      	lsls	r3, r3, #24
   121a8:	2268      	movs	r2, #104	; 0x68
   121aa:	5ca2      	ldrb	r2, [r4, r2]
   121ac:	0412      	lsls	r2, r2, #16
   121ae:	4313      	orrs	r3, r2
   121b0:	2266      	movs	r2, #102	; 0x66
   121b2:	5ca2      	ldrb	r2, [r4, r2]
   121b4:	4313      	orrs	r3, r2
   121b6:	2267      	movs	r2, #103	; 0x67
   121b8:	5ca2      	ldrb	r2, [r4, r2]
   121ba:	0212      	lsls	r2, r2, #8
   121bc:	4313      	orrs	r3, r2
   121be:	021b      	lsls	r3, r3, #8
   121c0:	0a1b      	lsrs	r3, r3, #8
   121c2:	4a12      	ldr	r2, [pc, #72]	; (1220c <check_fs+0x9c>)
   121c4:	4293      	cmp	r3, r2
   121c6:	d016      	beq.n	121f6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   121c8:	2385      	movs	r3, #133	; 0x85
   121ca:	5ce3      	ldrb	r3, [r4, r3]
   121cc:	061b      	lsls	r3, r3, #24
   121ce:	2284      	movs	r2, #132	; 0x84
   121d0:	5ca2      	ldrb	r2, [r4, r2]
   121d2:	0412      	lsls	r2, r2, #16
   121d4:	4313      	orrs	r3, r2
   121d6:	2282      	movs	r2, #130	; 0x82
   121d8:	5ca2      	ldrb	r2, [r4, r2]
   121da:	4313      	orrs	r3, r2
   121dc:	2283      	movs	r2, #131	; 0x83
   121de:	5ca2      	ldrb	r2, [r4, r2]
   121e0:	0212      	lsls	r2, r2, #8
   121e2:	4313      	orrs	r3, r2
   121e4:	021b      	lsls	r3, r3, #8
   121e6:	0a1b      	lsrs	r3, r3, #8
   121e8:	4a09      	ldr	r2, [pc, #36]	; (12210 <check_fs+0xa0>)
   121ea:	4694      	mov	ip, r2
   121ec:	4463      	add	r3, ip
   121ee:	1e58      	subs	r0, r3, #1
   121f0:	4183      	sbcs	r3, r0
		return 3;
   121f2:	b2db      	uxtb	r3, r3
   121f4:	e7c8      	b.n	12188 <check_fs+0x18>
		return 0;
   121f6:	2300      	movs	r3, #0
   121f8:	e7c6      	b.n	12188 <check_fs+0x18>
   121fa:	46c0      	nop			; (mov r8, r8)
   121fc:	00011f21 	.word	0x00011f21
   12200:	0000022f 	.word	0x0000022f
   12204:	0000022e 	.word	0x0000022e
   12208:	ffffaa55 	.word	0xffffaa55
   1220c:	00544146 	.word	0x00544146
   12210:	ffabbeba 	.word	0xffabbeba

00012214 <chk_mounted>:
{
   12214:	b5f0      	push	{r4, r5, r6, r7, lr}
   12216:	46d6      	mov	lr, sl
   12218:	464f      	mov	r7, r9
   1221a:	4646      	mov	r6, r8
   1221c:	b5c0      	push	{r6, r7, lr}
   1221e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12220:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   12222:	781c      	ldrb	r4, [r3, #0]
   12224:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   12226:	2c09      	cmp	r4, #9
   12228:	d80e      	bhi.n	12248 <chk_mounted+0x34>
   1222a:	785a      	ldrb	r2, [r3, #1]
   1222c:	2a3a      	cmp	r2, #58	; 0x3a
   1222e:	d001      	beq.n	12234 <chk_mounted+0x20>
   12230:	2400      	movs	r4, #0
   12232:	e00a      	b.n	1224a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   12234:	3302      	adds	r3, #2
   12236:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   12238:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1223a:	2c07      	cmp	r4, #7
   1223c:	d905      	bls.n	1224a <chk_mounted+0x36>
}
   1223e:	bc1c      	pop	{r2, r3, r4}
   12240:	4690      	mov	r8, r2
   12242:	4699      	mov	r9, r3
   12244:	46a2      	mov	sl, r4
   12246:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12248:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1224a:	00a3      	lsls	r3, r4, #2
   1224c:	4ac5      	ldr	r2, [pc, #788]	; (12564 <chk_mounted+0x350>)
   1224e:	589e      	ldr	r6, [r3, r2]
   12250:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   12252:	2e00      	cmp	r6, #0
   12254:	d100      	bne.n	12258 <chk_mounted+0x44>
   12256:	e0e8      	b.n	1242a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   12258:	7833      	ldrb	r3, [r6, #0]
   1225a:	2b00      	cmp	r3, #0
   1225c:	d00d      	beq.n	1227a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1225e:	7870      	ldrb	r0, [r6, #1]
   12260:	4bc1      	ldr	r3, [pc, #772]	; (12568 <chk_mounted+0x354>)
   12262:	4798      	blx	r3
   12264:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   12266:	07c2      	lsls	r2, r0, #31
   12268:	d407      	bmi.n	1227a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1226a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1226c:	2d00      	cmp	r5, #0
   1226e:	d0e6      	beq.n	1223e <chk_mounted+0x2a>
   12270:	075b      	lsls	r3, r3, #29
   12272:	d400      	bmi.n	12276 <chk_mounted+0x62>
   12274:	e0db      	b.n	1242e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   12276:	300a      	adds	r0, #10
   12278:	e7e1      	b.n	1223e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1227a:	2300      	movs	r3, #0
   1227c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1227e:	b2e0      	uxtb	r0, r4
   12280:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   12282:	4bba      	ldr	r3, [pc, #744]	; (1256c <chk_mounted+0x358>)
   12284:	4798      	blx	r3
   12286:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   12288:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1228a:	07da      	lsls	r2, r3, #31
   1228c:	d4d7      	bmi.n	1223e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1228e:	2d00      	cmp	r5, #0
   12290:	d002      	beq.n	12298 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   12292:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   12294:	075b      	lsls	r3, r3, #29
   12296:	d4d2      	bmi.n	1223e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   12298:	2100      	movs	r1, #0
   1229a:	0030      	movs	r0, r6
   1229c:	4bb4      	ldr	r3, [pc, #720]	; (12570 <chk_mounted+0x35c>)
   1229e:	4798      	blx	r3
   122a0:	0003      	movs	r3, r0
   122a2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   122a4:	2801      	cmp	r0, #1
   122a6:	d100      	bne.n	122aa <chk_mounted+0x96>
   122a8:	e09a      	b.n	123e0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   122aa:	2b03      	cmp	r3, #3
   122ac:	d100      	bne.n	122b0 <chk_mounted+0x9c>
   122ae:	e0c0      	b.n	12432 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   122b0:	200d      	movs	r0, #13
   122b2:	2b00      	cmp	r3, #0
   122b4:	d1c3      	bne.n	1223e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   122b6:	333c      	adds	r3, #60	; 0x3c
   122b8:	5cf2      	ldrb	r2, [r6, r3]
   122ba:	0212      	lsls	r2, r2, #8
   122bc:	3b01      	subs	r3, #1
   122be:	5cf3      	ldrb	r3, [r6, r3]
   122c0:	4313      	orrs	r3, r2
   122c2:	2280      	movs	r2, #128	; 0x80
   122c4:	0092      	lsls	r2, r2, #2
   122c6:	b21b      	sxth	r3, r3
   122c8:	4293      	cmp	r3, r2
   122ca:	d1b8      	bne.n	1223e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   122cc:	2347      	movs	r3, #71	; 0x47
   122ce:	5cf3      	ldrb	r3, [r6, r3]
   122d0:	021b      	lsls	r3, r3, #8
   122d2:	3abb      	subs	r2, #187	; 0xbb
   122d4:	3aff      	subs	r2, #255	; 0xff
   122d6:	5cb5      	ldrb	r5, [r6, r2]
   122d8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   122da:	d10d      	bne.n	122f8 <chk_mounted+0xe4>
   122dc:	2357      	movs	r3, #87	; 0x57
   122de:	5cf5      	ldrb	r5, [r6, r3]
   122e0:	062d      	lsls	r5, r5, #24
   122e2:	3b01      	subs	r3, #1
   122e4:	5cf3      	ldrb	r3, [r6, r3]
   122e6:	041b      	lsls	r3, r3, #16
   122e8:	431d      	orrs	r5, r3
   122ea:	2354      	movs	r3, #84	; 0x54
   122ec:	5cf3      	ldrb	r3, [r6, r3]
   122ee:	431d      	orrs	r5, r3
   122f0:	2355      	movs	r3, #85	; 0x55
   122f2:	5cf3      	ldrb	r3, [r6, r3]
   122f4:	021b      	lsls	r3, r3, #8
   122f6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   122f8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   122fa:	2340      	movs	r3, #64	; 0x40
   122fc:	5cf2      	ldrb	r2, [r6, r3]
   122fe:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   12300:	1e53      	subs	r3, r2, #1
   12302:	200d      	movs	r0, #13
   12304:	2b01      	cmp	r3, #1
   12306:	d89a      	bhi.n	1223e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   12308:	233d      	movs	r3, #61	; 0x3d
   1230a:	5cf1      	ldrb	r1, [r6, r3]
   1230c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1230e:	2900      	cmp	r1, #0
   12310:	d095      	beq.n	1223e <chk_mounted+0x2a>
   12312:	1e4b      	subs	r3, r1, #1
   12314:	4219      	tst	r1, r3
   12316:	d192      	bne.n	1223e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12318:	2342      	movs	r3, #66	; 0x42
   1231a:	5cf3      	ldrb	r3, [r6, r3]
   1231c:	021b      	lsls	r3, r3, #8
   1231e:	3034      	adds	r0, #52	; 0x34
   12320:	5c30      	ldrb	r0, [r6, r0]
   12322:	4318      	orrs	r0, r3
   12324:	4680      	mov	r8, r0
   12326:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12328:	200d      	movs	r0, #13
   1232a:	4643      	mov	r3, r8
   1232c:	071b      	lsls	r3, r3, #28
   1232e:	d000      	beq.n	12332 <chk_mounted+0x11e>
   12330:	e785      	b.n	1223e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   12332:	2344      	movs	r3, #68	; 0x44
   12334:	5cf3      	ldrb	r3, [r6, r3]
   12336:	021b      	lsls	r3, r3, #8
   12338:	3036      	adds	r0, #54	; 0x36
   1233a:	5c30      	ldrb	r0, [r6, r0]
   1233c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1233e:	d10d      	bne.n	1235c <chk_mounted+0x148>
   12340:	3353      	adds	r3, #83	; 0x53
   12342:	5cf3      	ldrb	r3, [r6, r3]
   12344:	061b      	lsls	r3, r3, #24
   12346:	2052      	movs	r0, #82	; 0x52
   12348:	5c30      	ldrb	r0, [r6, r0]
   1234a:	0400      	lsls	r0, r0, #16
   1234c:	4303      	orrs	r3, r0
   1234e:	2050      	movs	r0, #80	; 0x50
   12350:	5c30      	ldrb	r0, [r6, r0]
   12352:	4303      	orrs	r3, r0
   12354:	2051      	movs	r0, #81	; 0x51
   12356:	5c30      	ldrb	r0, [r6, r0]
   12358:	0200      	lsls	r0, r0, #8
   1235a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1235c:	203f      	movs	r0, #63	; 0x3f
   1235e:	5c30      	ldrb	r0, [r6, r0]
   12360:	0200      	lsls	r0, r0, #8
   12362:	273e      	movs	r7, #62	; 0x3e
   12364:	5df7      	ldrb	r7, [r6, r7]
   12366:	4307      	orrs	r7, r0
   12368:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1236a:	200d      	movs	r0, #13
   1236c:	2f00      	cmp	r7, #0
   1236e:	d100      	bne.n	12372 <chk_mounted+0x15e>
   12370:	e765      	b.n	1223e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   12372:	436a      	muls	r2, r5
   12374:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   12376:	4642      	mov	r2, r8
   12378:	0917      	lsrs	r7, r2, #4
   1237a:	4457      	add	r7, sl
   1237c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1237e:	42bb      	cmp	r3, r7
   12380:	d200      	bcs.n	12384 <chk_mounted+0x170>
   12382:	e75c      	b.n	1223e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   12384:	1bd8      	subs	r0, r3, r7
   12386:	4b7b      	ldr	r3, [pc, #492]	; (12574 <chk_mounted+0x360>)
   12388:	4798      	blx	r3
   1238a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1238c:	200d      	movs	r0, #13
   1238e:	2b00      	cmp	r3, #0
   12390:	d100      	bne.n	12394 <chk_mounted+0x180>
   12392:	e754      	b.n	1223e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   12394:	4a78      	ldr	r2, [pc, #480]	; (12578 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   12396:	429a      	cmp	r2, r3
   12398:	4192      	sbcs	r2, r2
   1239a:	4252      	negs	r2, r2
   1239c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1239e:	4977      	ldr	r1, [pc, #476]	; (1257c <chk_mounted+0x368>)
   123a0:	428b      	cmp	r3, r1
   123a2:	d848      	bhi.n	12436 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   123a4:	3302      	adds	r3, #2
   123a6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   123a8:	19e7      	adds	r7, r4, r7
   123aa:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   123ac:	4454      	add	r4, sl
   123ae:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   123b0:	200d      	movs	r0, #13
   123b2:	4641      	mov	r1, r8
   123b4:	2900      	cmp	r1, #0
   123b6:	d100      	bne.n	123ba <chk_mounted+0x1a6>
   123b8:	e741      	b.n	1223e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   123ba:	444c      	add	r4, r9
   123bc:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   123be:	2a02      	cmp	r2, #2
   123c0:	d12c      	bne.n	1241c <chk_mounted+0x208>
   123c2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   123c4:	496e      	ldr	r1, [pc, #440]	; (12580 <chk_mounted+0x36c>)
   123c6:	468c      	mov	ip, r1
   123c8:	4463      	add	r3, ip
   123ca:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   123cc:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   123ce:	429d      	cmp	r5, r3
   123d0:	d200      	bcs.n	123d4 <chk_mounted+0x1c0>
   123d2:	e734      	b.n	1223e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   123d4:	2301      	movs	r3, #1
   123d6:	425b      	negs	r3, r3
   123d8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   123da:	2300      	movs	r3, #0
   123dc:	60f3      	str	r3, [r6, #12]
   123de:	e0b6      	b.n	1254e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   123e0:	33f2      	adds	r3, #242	; 0xf2
   123e2:	33ff      	adds	r3, #255	; 0xff
   123e4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   123e6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   123e8:	2b00      	cmp	r3, #0
   123ea:	d100      	bne.n	123ee <chk_mounted+0x1da>
   123ec:	e727      	b.n	1223e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   123ee:	23fa      	movs	r3, #250	; 0xfa
   123f0:	33ff      	adds	r3, #255	; 0xff
   123f2:	5cf4      	ldrb	r4, [r6, r3]
   123f4:	0624      	lsls	r4, r4, #24
   123f6:	3b01      	subs	r3, #1
   123f8:	5cf3      	ldrb	r3, [r6, r3]
   123fa:	041b      	lsls	r3, r3, #16
   123fc:	431c      	orrs	r4, r3
   123fe:	23fb      	movs	r3, #251	; 0xfb
   12400:	005b      	lsls	r3, r3, #1
   12402:	5cf3      	ldrb	r3, [r6, r3]
   12404:	431c      	orrs	r4, r3
   12406:	23f8      	movs	r3, #248	; 0xf8
   12408:	33ff      	adds	r3, #255	; 0xff
   1240a:	5cf2      	ldrb	r2, [r6, r3]
   1240c:	0212      	lsls	r2, r2, #8
   1240e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12410:	0021      	movs	r1, r4
   12412:	0030      	movs	r0, r6
   12414:	4b56      	ldr	r3, [pc, #344]	; (12570 <chk_mounted+0x35c>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	e746      	b.n	122aa <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1241c:	2103      	movs	r1, #3
   1241e:	4359      	muls	r1, r3
   12420:	0849      	lsrs	r1, r1, #1
   12422:	2001      	movs	r0, #1
   12424:	4003      	ands	r3, r0
   12426:	18cb      	adds	r3, r1, r3
   12428:	e7cc      	b.n	123c4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1242a:	200c      	movs	r0, #12
   1242c:	e707      	b.n	1223e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   1242e:	2000      	movs	r0, #0
   12430:	e705      	b.n	1223e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   12432:	2001      	movs	r0, #1
   12434:	e703      	b.n	1223e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12436:	3302      	adds	r3, #2
   12438:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1243a:	19e7      	adds	r7, r4, r7
   1243c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1243e:	4652      	mov	r2, sl
   12440:	18a2      	adds	r2, r4, r2
   12442:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12444:	200d      	movs	r0, #13
   12446:	4642      	mov	r2, r8
   12448:	2a00      	cmp	r2, #0
   1244a:	d000      	beq.n	1244e <chk_mounted+0x23a>
   1244c:	e6f7      	b.n	1223e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1244e:	225f      	movs	r2, #95	; 0x5f
   12450:	5cb2      	ldrb	r2, [r6, r2]
   12452:	0612      	lsls	r2, r2, #24
   12454:	215e      	movs	r1, #94	; 0x5e
   12456:	5c71      	ldrb	r1, [r6, r1]
   12458:	0409      	lsls	r1, r1, #16
   1245a:	430a      	orrs	r2, r1
   1245c:	215c      	movs	r1, #92	; 0x5c
   1245e:	5c71      	ldrb	r1, [r6, r1]
   12460:	430a      	orrs	r2, r1
   12462:	215d      	movs	r1, #93	; 0x5d
   12464:	5c71      	ldrb	r1, [r6, r1]
   12466:	0209      	lsls	r1, r1, #8
   12468:	430a      	orrs	r2, r1
   1246a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1246c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1246e:	4a44      	ldr	r2, [pc, #272]	; (12580 <chk_mounted+0x36c>)
   12470:	4694      	mov	ip, r2
   12472:	4463      	add	r3, ip
   12474:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   12476:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12478:	429d      	cmp	r5, r3
   1247a:	d200      	bcs.n	1247e <chk_mounted+0x26a>
   1247c:	e6df      	b.n	1223e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1247e:	2301      	movs	r3, #1
   12480:	425b      	negs	r3, r3
   12482:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   12484:	2300      	movs	r3, #0
   12486:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   12488:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1248a:	3361      	adds	r3, #97	; 0x61
   1248c:	5cf3      	ldrb	r3, [r6, r3]
   1248e:	021b      	lsls	r3, r3, #8
   12490:	2260      	movs	r2, #96	; 0x60
   12492:	5cb2      	ldrb	r2, [r6, r2]
   12494:	431a      	orrs	r2, r3
   12496:	1912      	adds	r2, r2, r4
   12498:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1249a:	0031      	movs	r1, r6
   1249c:	3130      	adds	r1, #48	; 0x30
   1249e:	7870      	ldrb	r0, [r6, #1]
   124a0:	2301      	movs	r3, #1
   124a2:	4c38      	ldr	r4, [pc, #224]	; (12584 <chk_mounted+0x370>)
   124a4:	47a0      	blx	r4
   124a6:	2203      	movs	r2, #3
   124a8:	2800      	cmp	r0, #0
   124aa:	d150      	bne.n	1254e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   124ac:	4b36      	ldr	r3, [pc, #216]	; (12588 <chk_mounted+0x374>)
   124ae:	5cf2      	ldrb	r2, [r6, r3]
   124b0:	0212      	lsls	r2, r2, #8
   124b2:	4b36      	ldr	r3, [pc, #216]	; (1258c <chk_mounted+0x378>)
   124b4:	5cf3      	ldrb	r3, [r6, r3]
   124b6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   124b8:	4935      	ldr	r1, [pc, #212]	; (12590 <chk_mounted+0x37c>)
   124ba:	b21b      	sxth	r3, r3
   124bc:	2203      	movs	r2, #3
   124be:	428b      	cmp	r3, r1
   124c0:	d145      	bne.n	1254e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   124c2:	2333      	movs	r3, #51	; 0x33
   124c4:	5cf3      	ldrb	r3, [r6, r3]
   124c6:	061b      	lsls	r3, r3, #24
   124c8:	322f      	adds	r2, #47	; 0x2f
   124ca:	5cb2      	ldrb	r2, [r6, r2]
   124cc:	0412      	lsls	r2, r2, #16
   124ce:	4313      	orrs	r3, r2
   124d0:	2230      	movs	r2, #48	; 0x30
   124d2:	5cb2      	ldrb	r2, [r6, r2]
   124d4:	4313      	orrs	r3, r2
   124d6:	2231      	movs	r2, #49	; 0x31
   124d8:	5cb2      	ldrb	r2, [r6, r2]
   124da:	0212      	lsls	r2, r2, #8
   124dc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   124de:	492d      	ldr	r1, [pc, #180]	; (12594 <chk_mounted+0x380>)
   124e0:	2203      	movs	r2, #3
   124e2:	428b      	cmp	r3, r1
   124e4:	d133      	bne.n	1254e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   124e6:	4b2c      	ldr	r3, [pc, #176]	; (12598 <chk_mounted+0x384>)
   124e8:	5cf3      	ldrb	r3, [r6, r3]
   124ea:	061b      	lsls	r3, r3, #24
   124ec:	4a2b      	ldr	r2, [pc, #172]	; (1259c <chk_mounted+0x388>)
   124ee:	5cb2      	ldrb	r2, [r6, r2]
   124f0:	0412      	lsls	r2, r2, #16
   124f2:	4313      	orrs	r3, r2
   124f4:	2285      	movs	r2, #133	; 0x85
   124f6:	0092      	lsls	r2, r2, #2
   124f8:	5cb2      	ldrb	r2, [r6, r2]
   124fa:	4313      	orrs	r3, r2
   124fc:	4a28      	ldr	r2, [pc, #160]	; (125a0 <chk_mounted+0x38c>)
   124fe:	5cb2      	ldrb	r2, [r6, r2]
   12500:	0212      	lsls	r2, r2, #8
   12502:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   12504:	4927      	ldr	r1, [pc, #156]	; (125a4 <chk_mounted+0x390>)
   12506:	2203      	movs	r2, #3
   12508:	428b      	cmp	r3, r1
   1250a:	d120      	bne.n	1254e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1250c:	4b26      	ldr	r3, [pc, #152]	; (125a8 <chk_mounted+0x394>)
   1250e:	5cf3      	ldrb	r3, [r6, r3]
   12510:	061b      	lsls	r3, r3, #24
   12512:	4a26      	ldr	r2, [pc, #152]	; (125ac <chk_mounted+0x398>)
   12514:	5cb2      	ldrb	r2, [r6, r2]
   12516:	0412      	lsls	r2, r2, #16
   12518:	4313      	orrs	r3, r2
   1251a:	2287      	movs	r2, #135	; 0x87
   1251c:	0092      	lsls	r2, r2, #2
   1251e:	5cb2      	ldrb	r2, [r6, r2]
   12520:	4313      	orrs	r3, r2
   12522:	4a23      	ldr	r2, [pc, #140]	; (125b0 <chk_mounted+0x39c>)
   12524:	5cb2      	ldrb	r2, [r6, r2]
   12526:	0212      	lsls	r2, r2, #8
   12528:	4313      	orrs	r3, r2
   1252a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1252c:	4b21      	ldr	r3, [pc, #132]	; (125b4 <chk_mounted+0x3a0>)
   1252e:	5cf3      	ldrb	r3, [r6, r3]
   12530:	061b      	lsls	r3, r3, #24
   12532:	4a21      	ldr	r2, [pc, #132]	; (125b8 <chk_mounted+0x3a4>)
   12534:	5cb2      	ldrb	r2, [r6, r2]
   12536:	0412      	lsls	r2, r2, #16
   12538:	4313      	orrs	r3, r2
   1253a:	2286      	movs	r2, #134	; 0x86
   1253c:	0092      	lsls	r2, r2, #2
   1253e:	5cb2      	ldrb	r2, [r6, r2]
   12540:	4313      	orrs	r3, r2
   12542:	4a1e      	ldr	r2, [pc, #120]	; (125bc <chk_mounted+0x3a8>)
   12544:	5cb2      	ldrb	r2, [r6, r2]
   12546:	0212      	lsls	r2, r2, #8
   12548:	4313      	orrs	r3, r2
   1254a:	6133      	str	r3, [r6, #16]
   1254c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   1254e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   12550:	4a1b      	ldr	r2, [pc, #108]	; (125c0 <chk_mounted+0x3ac>)
   12552:	8813      	ldrh	r3, [r2, #0]
   12554:	3301      	adds	r3, #1
   12556:	b29b      	uxth	r3, r3
   12558:	8013      	strh	r3, [r2, #0]
   1255a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1255c:	2000      	movs	r0, #0
   1255e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   12560:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   12562:	e66c      	b.n	1223e <chk_mounted+0x2a>
   12564:	20000418 	.word	0x20000418
   12568:	00011f05 	.word	0x00011f05
   1256c:	00011e69 	.word	0x00011e69
   12570:	00012171 	.word	0x00012171
   12574:	00016fe1 	.word	0x00016fe1
   12578:	00000ff5 	.word	0x00000ff5
   1257c:	0000fff5 	.word	0x0000fff5
   12580:	000001ff 	.word	0x000001ff
   12584:	00011f21 	.word	0x00011f21
   12588:	0000022f 	.word	0x0000022f
   1258c:	0000022e 	.word	0x0000022e
   12590:	ffffaa55 	.word	0xffffaa55
   12594:	41615252 	.word	0x41615252
   12598:	00000217 	.word	0x00000217
   1259c:	00000216 	.word	0x00000216
   125a0:	00000215 	.word	0x00000215
   125a4:	61417272 	.word	0x61417272
   125a8:	0000021f 	.word	0x0000021f
   125ac:	0000021e 	.word	0x0000021e
   125b0:	0000021d 	.word	0x0000021d
   125b4:	0000021b 	.word	0x0000021b
   125b8:	0000021a 	.word	0x0000021a
   125bc:	00000219 	.word	0x00000219
   125c0:	20000438 	.word	0x20000438

000125c4 <move_window>:
{
   125c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   125c6:	46ce      	mov	lr, r9
   125c8:	b500      	push	{lr}
   125ca:	b082      	sub	sp, #8
   125cc:	0004      	movs	r4, r0
   125ce:	000f      	movs	r7, r1
	wsect = fs->winsect;
   125d0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   125d2:	428d      	cmp	r5, r1
   125d4:	d03f      	beq.n	12656 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   125d6:	7903      	ldrb	r3, [r0, #4]
   125d8:	2b00      	cmp	r3, #0
   125da:	d107      	bne.n	125ec <move_window+0x28>
	return FR_OK;
   125dc:	2300      	movs	r3, #0
		if (sector) {
   125de:	2f00      	cmp	r7, #0
   125e0:	d12c      	bne.n	1263c <move_window+0x78>
}
   125e2:	0018      	movs	r0, r3
   125e4:	b002      	add	sp, #8
   125e6:	bc04      	pop	{r2}
   125e8:	4691      	mov	r9, r2
   125ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   125ec:	2330      	movs	r3, #48	; 0x30
   125ee:	469c      	mov	ip, r3
   125f0:	4484      	add	ip, r0
   125f2:	4663      	mov	r3, ip
   125f4:	4661      	mov	r1, ip
   125f6:	9301      	str	r3, [sp, #4]
   125f8:	7840      	ldrb	r0, [r0, #1]
   125fa:	2301      	movs	r3, #1
   125fc:	002a      	movs	r2, r5
   125fe:	4e17      	ldr	r6, [pc, #92]	; (1265c <move_window+0x98>)
   12600:	47b0      	blx	r6
				return FR_DISK_ERR;
   12602:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12604:	2800      	cmp	r0, #0
   12606:	d1ec      	bne.n	125e2 <move_window+0x1e>
			fs->wflag = 0;
   12608:	2300      	movs	r3, #0
   1260a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1260c:	6a23      	ldr	r3, [r4, #32]
   1260e:	69e2      	ldr	r2, [r4, #28]
   12610:	4694      	mov	ip, r2
   12612:	4463      	add	r3, ip
   12614:	429d      	cmp	r5, r3
   12616:	d2e1      	bcs.n	125dc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12618:	78e6      	ldrb	r6, [r4, #3]
   1261a:	2e01      	cmp	r6, #1
   1261c:	d9de      	bls.n	125dc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1261e:	4b0f      	ldr	r3, [pc, #60]	; (1265c <move_window+0x98>)
   12620:	4699      	mov	r9, r3
					wsect += fs->fsize;
   12622:	69e3      	ldr	r3, [r4, #28]
   12624:	469c      	mov	ip, r3
   12626:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   12628:	7860      	ldrb	r0, [r4, #1]
   1262a:	2301      	movs	r3, #1
   1262c:	002a      	movs	r2, r5
   1262e:	9901      	ldr	r1, [sp, #4]
   12630:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12632:	3e01      	subs	r6, #1
   12634:	b2f6      	uxtb	r6, r6
   12636:	2e01      	cmp	r6, #1
   12638:	d1f3      	bne.n	12622 <move_window+0x5e>
   1263a:	e7cf      	b.n	125dc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1263c:	0021      	movs	r1, r4
   1263e:	3130      	adds	r1, #48	; 0x30
   12640:	7860      	ldrb	r0, [r4, #1]
   12642:	3301      	adds	r3, #1
   12644:	003a      	movs	r2, r7
   12646:	4d06      	ldr	r5, [pc, #24]	; (12660 <move_window+0x9c>)
   12648:	47a8      	blx	r5
				return FR_DISK_ERR;
   1264a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1264c:	2800      	cmp	r0, #0
   1264e:	d1c8      	bne.n	125e2 <move_window+0x1e>
			fs->winsect = sector;
   12650:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   12652:	2300      	movs	r3, #0
   12654:	e7c5      	b.n	125e2 <move_window+0x1e>
   12656:	2300      	movs	r3, #0
   12658:	e7c3      	b.n	125e2 <move_window+0x1e>
   1265a:	46c0      	nop			; (mov r8, r8)
   1265c:	00011fa5 	.word	0x00011fa5
   12660:	00011f21 	.word	0x00011f21

00012664 <get_fat>:
{
   12664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12666:	0005      	movs	r5, r0
   12668:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1266a:	2901      	cmp	r1, #1
   1266c:	d974      	bls.n	12758 <get_fat+0xf4>
		return 1;
   1266e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12670:	69ab      	ldr	r3, [r5, #24]
   12672:	4299      	cmp	r1, r3
   12674:	d271      	bcs.n	1275a <get_fat+0xf6>
	switch (fs->fs_type) {
   12676:	782b      	ldrb	r3, [r5, #0]
   12678:	2b02      	cmp	r3, #2
   1267a:	d034      	beq.n	126e6 <get_fat+0x82>
   1267c:	2b03      	cmp	r3, #3
   1267e:	d049      	beq.n	12714 <get_fat+0xb0>
   12680:	2b01      	cmp	r3, #1
   12682:	d002      	beq.n	1268a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12684:	2001      	movs	r0, #1
   12686:	4240      	negs	r0, r0
   12688:	e067      	b.n	1275a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   1268a:	084e      	lsrs	r6, r1, #1
   1268c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1268e:	0a71      	lsrs	r1, r6, #9
   12690:	6a2b      	ldr	r3, [r5, #32]
   12692:	469c      	mov	ip, r3
   12694:	4461      	add	r1, ip
   12696:	0028      	movs	r0, r5
   12698:	4b30      	ldr	r3, [pc, #192]	; (1275c <get_fat+0xf8>)
   1269a:	4798      	blx	r3
   1269c:	2800      	cmp	r0, #0
   1269e:	d002      	beq.n	126a6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   126a0:	2001      	movs	r0, #1
   126a2:	4240      	negs	r0, r0
   126a4:	e059      	b.n	1275a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   126a6:	05f3      	lsls	r3, r6, #23
   126a8:	0ddb      	lsrs	r3, r3, #23
   126aa:	18eb      	adds	r3, r5, r3
   126ac:	3330      	adds	r3, #48	; 0x30
   126ae:	781f      	ldrb	r7, [r3, #0]
   126b0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   126b2:	0a71      	lsrs	r1, r6, #9
   126b4:	6a2b      	ldr	r3, [r5, #32]
   126b6:	469c      	mov	ip, r3
   126b8:	4461      	add	r1, ip
   126ba:	0028      	movs	r0, r5
   126bc:	4b27      	ldr	r3, [pc, #156]	; (1275c <get_fat+0xf8>)
   126be:	4798      	blx	r3
   126c0:	2800      	cmp	r0, #0
   126c2:	d002      	beq.n	126ca <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   126c4:	2001      	movs	r0, #1
   126c6:	4240      	negs	r0, r0
   126c8:	e047      	b.n	1275a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   126ca:	05f6      	lsls	r6, r6, #23
   126cc:	0df6      	lsrs	r6, r6, #23
   126ce:	19ad      	adds	r5, r5, r6
   126d0:	3530      	adds	r5, #48	; 0x30
   126d2:	7828      	ldrb	r0, [r5, #0]
   126d4:	0200      	lsls	r0, r0, #8
   126d6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   126d8:	07e3      	lsls	r3, r4, #31
   126da:	d501      	bpl.n	126e0 <get_fat+0x7c>
   126dc:	0900      	lsrs	r0, r0, #4
   126de:	e03c      	b.n	1275a <get_fat+0xf6>
   126e0:	0500      	lsls	r0, r0, #20
   126e2:	0d00      	lsrs	r0, r0, #20
   126e4:	e039      	b.n	1275a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   126e6:	0a09      	lsrs	r1, r1, #8
   126e8:	6a2b      	ldr	r3, [r5, #32]
   126ea:	469c      	mov	ip, r3
   126ec:	4461      	add	r1, ip
   126ee:	0028      	movs	r0, r5
   126f0:	4b1a      	ldr	r3, [pc, #104]	; (1275c <get_fat+0xf8>)
   126f2:	4798      	blx	r3
   126f4:	2800      	cmp	r0, #0
   126f6:	d002      	beq.n	126fe <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   126f8:	2001      	movs	r0, #1
   126fa:	4240      	negs	r0, r0
   126fc:	e02d      	b.n	1275a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   126fe:	0064      	lsls	r4, r4, #1
   12700:	23ff      	movs	r3, #255	; 0xff
   12702:	005b      	lsls	r3, r3, #1
   12704:	401c      	ands	r4, r3
		return LD_WORD(p);
   12706:	192d      	adds	r5, r5, r4
   12708:	3530      	adds	r5, #48	; 0x30
   1270a:	786b      	ldrb	r3, [r5, #1]
   1270c:	021b      	lsls	r3, r3, #8
   1270e:	7828      	ldrb	r0, [r5, #0]
   12710:	4318      	orrs	r0, r3
   12712:	e022      	b.n	1275a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12714:	09c9      	lsrs	r1, r1, #7
   12716:	6a2b      	ldr	r3, [r5, #32]
   12718:	469c      	mov	ip, r3
   1271a:	4461      	add	r1, ip
   1271c:	0028      	movs	r0, r5
   1271e:	4b0f      	ldr	r3, [pc, #60]	; (1275c <get_fat+0xf8>)
   12720:	4798      	blx	r3
   12722:	2800      	cmp	r0, #0
   12724:	d002      	beq.n	1272c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12726:	2001      	movs	r0, #1
   12728:	4240      	negs	r0, r0
   1272a:	e016      	b.n	1275a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1272c:	00a4      	lsls	r4, r4, #2
   1272e:	23fe      	movs	r3, #254	; 0xfe
   12730:	005b      	lsls	r3, r3, #1
   12732:	401c      	ands	r4, r3
   12734:	0023      	movs	r3, r4
   12736:	3330      	adds	r3, #48	; 0x30
   12738:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1273a:	78d8      	ldrb	r0, [r3, #3]
   1273c:	0600      	lsls	r0, r0, #24
   1273e:	789a      	ldrb	r2, [r3, #2]
   12740:	0412      	lsls	r2, r2, #16
   12742:	4310      	orrs	r0, r2
   12744:	192c      	adds	r4, r5, r4
   12746:	3430      	adds	r4, #48	; 0x30
   12748:	7822      	ldrb	r2, [r4, #0]
   1274a:	4310      	orrs	r0, r2
   1274c:	785b      	ldrb	r3, [r3, #1]
   1274e:	021b      	lsls	r3, r3, #8
   12750:	4318      	orrs	r0, r3
   12752:	0100      	lsls	r0, r0, #4
   12754:	0900      	lsrs	r0, r0, #4
   12756:	e000      	b.n	1275a <get_fat+0xf6>
		return 1;
   12758:	2001      	movs	r0, #1
}
   1275a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1275c:	000125c5 	.word	0x000125c5

00012760 <dir_sdi>:
{
   12760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12762:	0004      	movs	r4, r0
   12764:	000d      	movs	r5, r1
	dj->index = idx;
   12766:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   12768:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   1276a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1276c:	2901      	cmp	r1, #1
   1276e:	d003      	beq.n	12778 <dir_sdi+0x18>
   12770:	6823      	ldr	r3, [r4, #0]
   12772:	699a      	ldr	r2, [r3, #24]
   12774:	4291      	cmp	r1, r2
   12776:	d300      	bcc.n	1277a <dir_sdi+0x1a>
}
   12778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1277a:	2900      	cmp	r1, #0
   1277c:	d119      	bne.n	127b2 <dir_sdi+0x52>
   1277e:	781a      	ldrb	r2, [r3, #0]
   12780:	2a03      	cmp	r2, #3
   12782:	d013      	beq.n	127ac <dir_sdi+0x4c>
		dj->clust = clst;
   12784:	2200      	movs	r2, #0
   12786:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12788:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   1278a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   1278c:	42aa      	cmp	r2, r5
   1278e:	d9f3      	bls.n	12778 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12790:	092a      	lsrs	r2, r5, #4
   12792:	b292      	uxth	r2, r2
   12794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12796:	189b      	adds	r3, r3, r2
   12798:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   1279a:	6823      	ldr	r3, [r4, #0]
   1279c:	3330      	adds	r3, #48	; 0x30
   1279e:	220f      	movs	r2, #15
   127a0:	4015      	ands	r5, r2
   127a2:	016d      	lsls	r5, r5, #5
   127a4:	195d      	adds	r5, r3, r5
   127a6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   127a8:	2000      	movs	r0, #0
   127aa:	e7e5      	b.n	12778 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   127ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   127ae:	2900      	cmp	r1, #0
   127b0:	d0e8      	beq.n	12784 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   127b2:	789e      	ldrb	r6, [r3, #2]
   127b4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   127b6:	42b5      	cmp	r5, r6
   127b8:	d313      	bcc.n	127e2 <dir_sdi+0x82>
   127ba:	1bad      	subs	r5, r5, r6
   127bc:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   127be:	4f10      	ldr	r7, [pc, #64]	; (12800 <dir_sdi+0xa0>)
   127c0:	e000      	b.n	127c4 <dir_sdi+0x64>
   127c2:	001d      	movs	r5, r3
   127c4:	6820      	ldr	r0, [r4, #0]
   127c6:	47b8      	blx	r7
   127c8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   127ca:	1c43      	adds	r3, r0, #1
   127cc:	d012      	beq.n	127f4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   127ce:	2801      	cmp	r0, #1
   127d0:	d912      	bls.n	127f8 <dir_sdi+0x98>
   127d2:	6823      	ldr	r3, [r4, #0]
   127d4:	699b      	ldr	r3, [r3, #24]
   127d6:	4298      	cmp	r0, r3
   127d8:	d210      	bcs.n	127fc <dir_sdi+0x9c>
   127da:	1bab      	subs	r3, r5, r6
   127dc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   127de:	42b5      	cmp	r5, r6
   127e0:	d2ef      	bcs.n	127c2 <dir_sdi+0x62>
		dj->clust = clst;
   127e2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   127e4:	6820      	ldr	r0, [r4, #0]
   127e6:	4b07      	ldr	r3, [pc, #28]	; (12804 <dir_sdi+0xa4>)
   127e8:	4798      	blx	r3
   127ea:	092b      	lsrs	r3, r5, #4
   127ec:	b29b      	uxth	r3, r3
   127ee:	1818      	adds	r0, r3, r0
   127f0:	6120      	str	r0, [r4, #16]
   127f2:	e7d2      	b.n	1279a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   127f4:	2001      	movs	r0, #1
   127f6:	e7bf      	b.n	12778 <dir_sdi+0x18>
				return FR_INT_ERR;
   127f8:	2002      	movs	r0, #2
   127fa:	e7bd      	b.n	12778 <dir_sdi+0x18>
   127fc:	2002      	movs	r0, #2
   127fe:	e7bb      	b.n	12778 <dir_sdi+0x18>
   12800:	00012665 	.word	0x00012665
   12804:	0001210b 	.word	0x0001210b

00012808 <put_fat>:
{
   12808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1280a:	46c6      	mov	lr, r8
   1280c:	b500      	push	{lr}
   1280e:	0007      	movs	r7, r0
   12810:	000c      	movs	r4, r1
   12812:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   12814:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12816:	2901      	cmp	r1, #1
   12818:	d902      	bls.n	12820 <put_fat+0x18>
   1281a:	6983      	ldr	r3, [r0, #24]
   1281c:	4299      	cmp	r1, r3
   1281e:	d303      	bcc.n	12828 <put_fat+0x20>
}
   12820:	0028      	movs	r0, r5
   12822:	bc04      	pop	{r2}
   12824:	4690      	mov	r8, r2
   12826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   12828:	7803      	ldrb	r3, [r0, #0]
   1282a:	2b02      	cmp	r3, #2
   1282c:	d053      	beq.n	128d6 <put_fat+0xce>
   1282e:	2b03      	cmp	r3, #3
   12830:	d063      	beq.n	128fa <put_fat+0xf2>
			res = FR_INT_ERR;
   12832:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   12834:	2b01      	cmp	r3, #1
   12836:	d002      	beq.n	1283e <put_fat+0x36>
		fs->wflag = 1;
   12838:	2301      	movs	r3, #1
   1283a:	713b      	strb	r3, [r7, #4]
   1283c:	e7f0      	b.n	12820 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   1283e:	084b      	lsrs	r3, r1, #1
   12840:	4698      	mov	r8, r3
   12842:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12844:	4643      	mov	r3, r8
   12846:	0a59      	lsrs	r1, r3, #9
   12848:	6a03      	ldr	r3, [r0, #32]
   1284a:	469c      	mov	ip, r3
   1284c:	4461      	add	r1, ip
   1284e:	4b3b      	ldr	r3, [pc, #236]	; (1293c <put_fat+0x134>)
   12850:	4798      	blx	r3
   12852:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12854:	d1f0      	bne.n	12838 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   12856:	4643      	mov	r3, r8
   12858:	05db      	lsls	r3, r3, #23
   1285a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1285c:	07e2      	lsls	r2, r4, #31
   1285e:	d51f      	bpl.n	128a0 <put_fat+0x98>
   12860:	18fb      	adds	r3, r7, r3
   12862:	3330      	adds	r3, #48	; 0x30
   12864:	7819      	ldrb	r1, [r3, #0]
   12866:	220f      	movs	r2, #15
   12868:	400a      	ands	r2, r1
   1286a:	0131      	lsls	r1, r6, #4
   1286c:	20ff      	movs	r0, #255	; 0xff
   1286e:	0100      	lsls	r0, r0, #4
   12870:	4001      	ands	r1, r0
   12872:	430a      	orrs	r2, r1
   12874:	701a      	strb	r2, [r3, #0]
			bc++;
   12876:	4644      	mov	r4, r8
   12878:	3401      	adds	r4, #1
			fs->wflag = 1;
   1287a:	2301      	movs	r3, #1
   1287c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1287e:	0a61      	lsrs	r1, r4, #9
   12880:	6a3b      	ldr	r3, [r7, #32]
   12882:	469c      	mov	ip, r3
   12884:	4461      	add	r1, ip
   12886:	0038      	movs	r0, r7
   12888:	4b2c      	ldr	r3, [pc, #176]	; (1293c <put_fat+0x134>)
   1288a:	4798      	blx	r3
			if (res != FR_OK) break;
   1288c:	2800      	cmp	r0, #0
   1288e:	d151      	bne.n	12934 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   12890:	05e4      	lsls	r4, r4, #23
   12892:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12894:	0936      	lsrs	r6, r6, #4
   12896:	b2f6      	uxtb	r6, r6
   12898:	193c      	adds	r4, r7, r4
   1289a:	3430      	adds	r4, #48	; 0x30
   1289c:	7026      	strb	r6, [r4, #0]
			break;
   1289e:	e7cb      	b.n	12838 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	3330      	adds	r3, #48	; 0x30
   128a4:	701e      	strb	r6, [r3, #0]
			bc++;
   128a6:	4644      	mov	r4, r8
   128a8:	3401      	adds	r4, #1
			fs->wflag = 1;
   128aa:	2301      	movs	r3, #1
   128ac:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   128ae:	0a61      	lsrs	r1, r4, #9
   128b0:	6a3b      	ldr	r3, [r7, #32]
   128b2:	469c      	mov	ip, r3
   128b4:	4461      	add	r1, ip
   128b6:	0038      	movs	r0, r7
   128b8:	4b20      	ldr	r3, [pc, #128]	; (1293c <put_fat+0x134>)
   128ba:	4798      	blx	r3
			if (res != FR_OK) break;
   128bc:	2800      	cmp	r0, #0
   128be:	d13b      	bne.n	12938 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   128c0:	05e4      	lsls	r4, r4, #23
   128c2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   128c4:	193b      	adds	r3, r7, r4
   128c6:	3330      	adds	r3, #48	; 0x30
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	220f      	movs	r2, #15
   128cc:	4393      	bics	r3, r2
   128ce:	0536      	lsls	r6, r6, #20
   128d0:	0f36      	lsrs	r6, r6, #28
   128d2:	431e      	orrs	r6, r3
   128d4:	e7e0      	b.n	12898 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   128d6:	0a09      	lsrs	r1, r1, #8
   128d8:	6a03      	ldr	r3, [r0, #32]
   128da:	469c      	mov	ip, r3
   128dc:	4461      	add	r1, ip
   128de:	4b17      	ldr	r3, [pc, #92]	; (1293c <put_fat+0x134>)
   128e0:	4798      	blx	r3
   128e2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   128e4:	d1a8      	bne.n	12838 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   128e6:	0063      	lsls	r3, r4, #1
   128e8:	24ff      	movs	r4, #255	; 0xff
   128ea:	0064      	lsls	r4, r4, #1
   128ec:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   128ee:	18fb      	adds	r3, r7, r3
   128f0:	3330      	adds	r3, #48	; 0x30
   128f2:	701e      	strb	r6, [r3, #0]
   128f4:	0a36      	lsrs	r6, r6, #8
   128f6:	705e      	strb	r6, [r3, #1]
			break;
   128f8:	e79e      	b.n	12838 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   128fa:	09c9      	lsrs	r1, r1, #7
   128fc:	6a03      	ldr	r3, [r0, #32]
   128fe:	469c      	mov	ip, r3
   12900:	4461      	add	r1, ip
   12902:	4b0e      	ldr	r3, [pc, #56]	; (1293c <put_fat+0x134>)
   12904:	4798      	blx	r3
   12906:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12908:	d196      	bne.n	12838 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   1290a:	00a4      	lsls	r4, r4, #2
   1290c:	23fe      	movs	r3, #254	; 0xfe
   1290e:	005b      	lsls	r3, r3, #1
   12910:	401c      	ands	r4, r3
   12912:	0022      	movs	r2, r4
   12914:	3230      	adds	r2, #48	; 0x30
   12916:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12918:	78d3      	ldrb	r3, [r2, #3]
   1291a:	193c      	adds	r4, r7, r4
   1291c:	3430      	adds	r4, #48	; 0x30
   1291e:	091b      	lsrs	r3, r3, #4
   12920:	071b      	lsls	r3, r3, #28
   12922:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   12924:	7026      	strb	r6, [r4, #0]
   12926:	0a33      	lsrs	r3, r6, #8
   12928:	7053      	strb	r3, [r2, #1]
   1292a:	0c33      	lsrs	r3, r6, #16
   1292c:	7093      	strb	r3, [r2, #2]
   1292e:	0e36      	lsrs	r6, r6, #24
   12930:	70d6      	strb	r6, [r2, #3]
			break;
   12932:	e781      	b.n	12838 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12934:	0005      	movs	r5, r0
   12936:	e77f      	b.n	12838 <put_fat+0x30>
   12938:	0005      	movs	r5, r0
   1293a:	e77d      	b.n	12838 <put_fat+0x30>
   1293c:	000125c5 	.word	0x000125c5

00012940 <create_chain>:
{
   12940:	b5f0      	push	{r4, r5, r6, r7, lr}
   12942:	46c6      	mov	lr, r8
   12944:	b500      	push	{lr}
   12946:	0005      	movs	r5, r0
   12948:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   1294a:	2900      	cmp	r1, #0
   1294c:	d107      	bne.n	1295e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   1294e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12950:	2e00      	cmp	r6, #0
   12952:	d00d      	beq.n	12970 <create_chain+0x30>
   12954:	6983      	ldr	r3, [r0, #24]
   12956:	429e      	cmp	r6, r3
   12958:	d30b      	bcc.n	12972 <create_chain+0x32>
   1295a:	2601      	movs	r6, #1
   1295c:	e009      	b.n	12972 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1295e:	4b26      	ldr	r3, [pc, #152]	; (129f8 <create_chain+0xb8>)
   12960:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12962:	2801      	cmp	r0, #1
   12964:	d93d      	bls.n	129e2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12966:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   12968:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1296a:	4298      	cmp	r0, r3
   1296c:	d201      	bcs.n	12972 <create_chain+0x32>
   1296e:	e03d      	b.n	129ec <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12970:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   12972:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   12974:	4f20      	ldr	r7, [pc, #128]	; (129f8 <create_chain+0xb8>)
   12976:	e00a      	b.n	1298e <create_chain+0x4e>
   12978:	0021      	movs	r1, r4
   1297a:	0028      	movs	r0, r5
   1297c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   1297e:	2800      	cmp	r0, #0
   12980:	d00d      	beq.n	1299e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12982:	1c43      	adds	r3, r0, #1
   12984:	d032      	beq.n	129ec <create_chain+0xac>
   12986:	2801      	cmp	r0, #1
   12988:	d030      	beq.n	129ec <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1298a:	42b4      	cmp	r4, r6
   1298c:	d02d      	beq.n	129ea <create_chain+0xaa>
		ncl++;							/* Next cluster */
   1298e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12990:	69ab      	ldr	r3, [r5, #24]
   12992:	429c      	cmp	r4, r3
   12994:	d3f0      	bcc.n	12978 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   12996:	2e01      	cmp	r6, #1
   12998:	d925      	bls.n	129e6 <create_chain+0xa6>
			ncl = 2;
   1299a:	2402      	movs	r4, #2
   1299c:	e7ec      	b.n	12978 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   1299e:	4a17      	ldr	r2, [pc, #92]	; (129fc <create_chain+0xbc>)
   129a0:	0021      	movs	r1, r4
   129a2:	0028      	movs	r0, r5
   129a4:	4b16      	ldr	r3, [pc, #88]	; (12a00 <create_chain+0xc0>)
   129a6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   129a8:	2800      	cmp	r0, #0
   129aa:	d113      	bne.n	129d4 <create_chain+0x94>
   129ac:	4643      	mov	r3, r8
   129ae:	2b00      	cmp	r3, #0
   129b0:	d109      	bne.n	129c6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   129b2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   129b4:	692b      	ldr	r3, [r5, #16]
   129b6:	1c5a      	adds	r2, r3, #1
   129b8:	d01b      	beq.n	129f2 <create_chain+0xb2>
			fs->free_clust--;
   129ba:	3b01      	subs	r3, #1
   129bc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   129be:	2301      	movs	r3, #1
   129c0:	716b      	strb	r3, [r5, #5]
   129c2:	0020      	movs	r0, r4
   129c4:	e012      	b.n	129ec <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   129c6:	0022      	movs	r2, r4
   129c8:	4641      	mov	r1, r8
   129ca:	0028      	movs	r0, r5
   129cc:	4b0c      	ldr	r3, [pc, #48]	; (12a00 <create_chain+0xc0>)
   129ce:	4798      	blx	r3
	if (res == FR_OK) {
   129d0:	2800      	cmp	r0, #0
   129d2:	d0ee      	beq.n	129b2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   129d4:	3801      	subs	r0, #1
   129d6:	4242      	negs	r2, r0
   129d8:	4142      	adcs	r2, r0
   129da:	4250      	negs	r0, r2
   129dc:	2301      	movs	r3, #1
   129de:	4318      	orrs	r0, r3
   129e0:	e004      	b.n	129ec <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   129e2:	2001      	movs	r0, #1
   129e4:	e002      	b.n	129ec <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   129e6:	2000      	movs	r0, #0
   129e8:	e000      	b.n	129ec <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   129ea:	2000      	movs	r0, #0
}
   129ec:	bc04      	pop	{r2}
   129ee:	4690      	mov	r8, r2
   129f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129f2:	0020      	movs	r0, r4
   129f4:	e7fa      	b.n	129ec <create_chain+0xac>
   129f6:	46c0      	nop			; (mov r8, r8)
   129f8:	00012665 	.word	0x00012665
   129fc:	0fffffff 	.word	0x0fffffff
   12a00:	00012809 	.word	0x00012809

00012a04 <remove_chain>:
{
   12a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a06:	46ce      	mov	lr, r9
   12a08:	4647      	mov	r7, r8
   12a0a:	b580      	push	{r7, lr}
   12a0c:	0004      	movs	r4, r0
   12a0e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   12a10:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12a12:	2901      	cmp	r1, #1
   12a14:	d902      	bls.n	12a1c <remove_chain+0x18>
   12a16:	69a3      	ldr	r3, [r4, #24]
   12a18:	4299      	cmp	r1, r3
   12a1a:	d303      	bcc.n	12a24 <remove_chain+0x20>
}
   12a1c:	bc0c      	pop	{r2, r3}
   12a1e:	4690      	mov	r8, r2
   12a20:	4699      	mov	r9, r3
   12a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12a24:	4f13      	ldr	r7, [pc, #76]	; (12a74 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12a26:	4b14      	ldr	r3, [pc, #80]	; (12a78 <remove_chain+0x74>)
   12a28:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   12a2a:	2301      	movs	r3, #1
   12a2c:	4699      	mov	r9, r3
   12a2e:	e003      	b.n	12a38 <remove_chain+0x34>
   12a30:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12a32:	69a3      	ldr	r3, [r4, #24]
   12a34:	42b3      	cmp	r3, r6
   12a36:	d9f1      	bls.n	12a1c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12a38:	0029      	movs	r1, r5
   12a3a:	0020      	movs	r0, r4
   12a3c:	47b8      	blx	r7
   12a3e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12a40:	d011      	beq.n	12a66 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12a42:	2801      	cmp	r0, #1
   12a44:	d011      	beq.n	12a6a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12a46:	1c43      	adds	r3, r0, #1
   12a48:	d011      	beq.n	12a6e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12a4a:	2200      	movs	r2, #0
   12a4c:	0029      	movs	r1, r5
   12a4e:	0020      	movs	r0, r4
   12a50:	47c0      	blx	r8
			if (res != FR_OK) break;
   12a52:	2800      	cmp	r0, #0
   12a54:	d1e2      	bne.n	12a1c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12a56:	6923      	ldr	r3, [r4, #16]
   12a58:	1c5a      	adds	r2, r3, #1
   12a5a:	d0e9      	beq.n	12a30 <remove_chain+0x2c>
				fs->free_clust++;
   12a5c:	3301      	adds	r3, #1
   12a5e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12a60:	464b      	mov	r3, r9
   12a62:	7163      	strb	r3, [r4, #5]
   12a64:	e7e4      	b.n	12a30 <remove_chain+0x2c>
   12a66:	2000      	movs	r0, #0
   12a68:	e7d8      	b.n	12a1c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12a6a:	2002      	movs	r0, #2
   12a6c:	e7d6      	b.n	12a1c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12a6e:	2001      	movs	r0, #1
   12a70:	e7d4      	b.n	12a1c <remove_chain+0x18>
   12a72:	46c0      	nop			; (mov r8, r8)
   12a74:	00012665 	.word	0x00012665
   12a78:	00012809 	.word	0x00012809

00012a7c <dir_next>:
{
   12a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a7e:	46d6      	mov	lr, sl
   12a80:	4647      	mov	r7, r8
   12a82:	b580      	push	{r7, lr}
   12a84:	0006      	movs	r6, r0
   12a86:	000d      	movs	r5, r1
	i = dj->index + 1;
   12a88:	88c4      	ldrh	r4, [r0, #6]
   12a8a:	3401      	adds	r4, #1
   12a8c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   12a8e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12a90:	2c00      	cmp	r4, #0
   12a92:	d103      	bne.n	12a9c <dir_next+0x20>
}
   12a94:	bc0c      	pop	{r2, r3}
   12a96:	4690      	mov	r8, r2
   12a98:	469a      	mov	sl, r3
   12a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12a9c:	6933      	ldr	r3, [r6, #16]
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d0f8      	beq.n	12a94 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   12aa2:	270f      	movs	r7, #15
   12aa4:	4027      	ands	r7, r4
   12aa6:	d10f      	bne.n	12ac8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   12aa8:	3301      	adds	r3, #1
   12aaa:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   12aac:	68f1      	ldr	r1, [r6, #12]
   12aae:	2900      	cmp	r1, #0
   12ab0:	d104      	bne.n	12abc <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12ab2:	6833      	ldr	r3, [r6, #0]
   12ab4:	891b      	ldrh	r3, [r3, #8]
   12ab6:	42a3      	cmp	r3, r4
   12ab8:	d9ec      	bls.n	12a94 <dir_next+0x18>
   12aba:	e005      	b.n	12ac8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   12abc:	6830      	ldr	r0, [r6, #0]
   12abe:	7883      	ldrb	r3, [r0, #2]
   12ac0:	3b01      	subs	r3, #1
   12ac2:	0922      	lsrs	r2, r4, #4
   12ac4:	421a      	tst	r2, r3
   12ac6:	d007      	beq.n	12ad8 <dir_next+0x5c>
	dj->index = i;
   12ac8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12aca:	6833      	ldr	r3, [r6, #0]
   12acc:	3330      	adds	r3, #48	; 0x30
   12ace:	017f      	lsls	r7, r7, #5
   12ad0:	19df      	adds	r7, r3, r7
   12ad2:	6177      	str	r7, [r6, #20]
	return FR_OK;
   12ad4:	2000      	movs	r0, #0
   12ad6:	e7dd      	b.n	12a94 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   12ad8:	4b2c      	ldr	r3, [pc, #176]	; (12b8c <dir_next+0x110>)
   12ada:	4798      	blx	r3
   12adc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12ade:	2002      	movs	r0, #2
   12ae0:	4643      	mov	r3, r8
   12ae2:	2b01      	cmp	r3, #1
   12ae4:	d9d6      	bls.n	12a94 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12ae6:	3301      	adds	r3, #1
   12ae8:	d04b      	beq.n	12b82 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12aea:	6833      	ldr	r3, [r6, #0]
   12aec:	699a      	ldr	r2, [r3, #24]
   12aee:	4590      	cmp	r8, r2
   12af0:	d33f      	bcc.n	12b72 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   12af2:	3002      	adds	r0, #2
   12af4:	2d00      	cmp	r5, #0
   12af6:	d0cd      	beq.n	12a94 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   12af8:	68f1      	ldr	r1, [r6, #12]
   12afa:	0018      	movs	r0, r3
   12afc:	4b24      	ldr	r3, [pc, #144]	; (12b90 <dir_next+0x114>)
   12afe:	4798      	blx	r3
   12b00:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   12b02:	2007      	movs	r0, #7
   12b04:	4643      	mov	r3, r8
   12b06:	2b00      	cmp	r3, #0
   12b08:	d0c4      	beq.n	12a94 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   12b0a:	3805      	subs	r0, #5
   12b0c:	2b01      	cmp	r3, #1
   12b0e:	d0c1      	beq.n	12a94 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12b10:	3801      	subs	r0, #1
   12b12:	3301      	adds	r3, #1
   12b14:	d0be      	beq.n	12a94 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   12b16:	2100      	movs	r1, #0
   12b18:	6830      	ldr	r0, [r6, #0]
   12b1a:	4b1e      	ldr	r3, [pc, #120]	; (12b94 <dir_next+0x118>)
   12b1c:	4798      	blx	r3
   12b1e:	0003      	movs	r3, r0
   12b20:	2001      	movs	r0, #1
   12b22:	2b00      	cmp	r3, #0
   12b24:	d1b6      	bne.n	12a94 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   12b26:	6830      	ldr	r0, [r6, #0]
   12b28:	3030      	adds	r0, #48	; 0x30
   12b2a:	2280      	movs	r2, #128	; 0x80
   12b2c:	0092      	lsls	r2, r2, #2
   12b2e:	2100      	movs	r1, #0
   12b30:	4b19      	ldr	r3, [pc, #100]	; (12b98 <dir_next+0x11c>)
   12b32:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12b34:	6835      	ldr	r5, [r6, #0]
   12b36:	4641      	mov	r1, r8
   12b38:	0028      	movs	r0, r5
   12b3a:	4b18      	ldr	r3, [pc, #96]	; (12b9c <dir_next+0x120>)
   12b3c:	4798      	blx	r3
   12b3e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12b40:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12b42:	2301      	movs	r3, #1
   12b44:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12b46:	6833      	ldr	r3, [r6, #0]
   12b48:	789a      	ldrb	r2, [r3, #2]
   12b4a:	42aa      	cmp	r2, r5
   12b4c:	d90e      	bls.n	12b6c <dir_next+0xf0>
						dj->fs->wflag = 1;
   12b4e:	4652      	mov	r2, sl
   12b50:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12b52:	2100      	movs	r1, #0
   12b54:	6830      	ldr	r0, [r6, #0]
   12b56:	4b0f      	ldr	r3, [pc, #60]	; (12b94 <dir_next+0x118>)
   12b58:	4798      	blx	r3
   12b5a:	2800      	cmp	r0, #0
   12b5c:	d113      	bne.n	12b86 <dir_next+0x10a>
						dj->fs->winsect++;
   12b5e:	6832      	ldr	r2, [r6, #0]
   12b60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12b62:	3301      	adds	r3, #1
   12b64:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12b66:	3501      	adds	r5, #1
   12b68:	b2ed      	uxtb	r5, r5
   12b6a:	e7ec      	b.n	12b46 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   12b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12b6e:	1b52      	subs	r2, r2, r5
   12b70:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12b72:	4643      	mov	r3, r8
   12b74:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12b76:	4641      	mov	r1, r8
   12b78:	6830      	ldr	r0, [r6, #0]
   12b7a:	4b08      	ldr	r3, [pc, #32]	; (12b9c <dir_next+0x120>)
   12b7c:	4798      	blx	r3
   12b7e:	6130      	str	r0, [r6, #16]
   12b80:	e7a2      	b.n	12ac8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12b82:	2001      	movs	r0, #1
   12b84:	e786      	b.n	12a94 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12b86:	2001      	movs	r0, #1
   12b88:	e784      	b.n	12a94 <dir_next+0x18>
   12b8a:	46c0      	nop			; (mov r8, r8)
   12b8c:	00012665 	.word	0x00012665
   12b90:	00012941 	.word	0x00012941
   12b94:	000125c5 	.word	0x000125c5
   12b98:	000120f9 	.word	0x000120f9
   12b9c:	0001210b 	.word	0x0001210b

00012ba0 <dir_find>:
{
   12ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ba2:	46de      	mov	lr, fp
   12ba4:	4657      	mov	r7, sl
   12ba6:	464e      	mov	r6, r9
   12ba8:	4645      	mov	r5, r8
   12baa:	b5e0      	push	{r5, r6, r7, lr}
   12bac:	b083      	sub	sp, #12
   12bae:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12bb0:	2100      	movs	r1, #0
   12bb2:	4b5a      	ldr	r3, [pc, #360]	; (12d1c <dir_find+0x17c>)
   12bb4:	4798      	blx	r3
   12bb6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   12bb8:	d000      	beq.n	12bbc <dir_find+0x1c>
   12bba:	e09e      	b.n	12cfa <dir_find+0x15a>
   12bbc:	23ff      	movs	r3, #255	; 0xff
   12bbe:	4699      	mov	r9, r3
   12bc0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   12bc2:	4b57      	ldr	r3, [pc, #348]	; (12d20 <dir_find+0x180>)
   12bc4:	469b      	mov	fp, r3
   12bc6:	e01b      	b.n	12c00 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   12bc8:	2b0f      	cmp	r3, #15
   12bca:	d030      	beq.n	12c2e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   12bcc:	4653      	mov	r3, sl
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d105      	bne.n	12bde <dir_find+0x3e>
   12bd2:	0020      	movs	r0, r4
   12bd4:	4b53      	ldr	r3, [pc, #332]	; (12d24 <dir_find+0x184>)
   12bd6:	4798      	blx	r3
   12bd8:	4581      	cmp	r9, r0
   12bda:	d100      	bne.n	12bde <dir_find+0x3e>
   12bdc:	e08d      	b.n	12cfa <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12bde:	2301      	movs	r3, #1
   12be0:	425b      	negs	r3, r3
   12be2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   12be4:	69a8      	ldr	r0, [r5, #24]
   12be6:	7ac3      	ldrb	r3, [r0, #11]
   12be8:	07db      	lsls	r3, r3, #31
   12bea:	d400      	bmi.n	12bee <dir_find+0x4e>
   12bec:	e07d      	b.n	12cea <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12bee:	23ff      	movs	r3, #255	; 0xff
   12bf0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   12bf2:	2100      	movs	r1, #0
   12bf4:	0028      	movs	r0, r5
   12bf6:	4b4c      	ldr	r3, [pc, #304]	; (12d28 <dir_find+0x188>)
   12bf8:	4798      	blx	r3
   12bfa:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   12bfc:	d000      	beq.n	12c00 <dir_find+0x60>
   12bfe:	e07c      	b.n	12cfa <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   12c00:	6929      	ldr	r1, [r5, #16]
   12c02:	6828      	ldr	r0, [r5, #0]
   12c04:	47d8      	blx	fp
   12c06:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   12c08:	d177      	bne.n	12cfa <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   12c0a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   12c0c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12c0e:	2e00      	cmp	r6, #0
   12c10:	d100      	bne.n	12c14 <dir_find+0x74>
   12c12:	e080      	b.n	12d16 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   12c14:	7ae2      	ldrb	r2, [r4, #11]
   12c16:	233f      	movs	r3, #63	; 0x3f
   12c18:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   12c1a:	2ee5      	cmp	r6, #229	; 0xe5
   12c1c:	d100      	bne.n	12c20 <dir_find+0x80>
   12c1e:	e077      	b.n	12d10 <dir_find+0x170>
   12c20:	0712      	lsls	r2, r2, #28
   12c22:	d5d1      	bpl.n	12bc8 <dir_find+0x28>
   12c24:	2b0f      	cmp	r3, #15
   12c26:	d002      	beq.n	12c2e <dir_find+0x8e>
			ord = 0xFF;
   12c28:	23ff      	movs	r3, #255	; 0xff
   12c2a:	469a      	mov	sl, r3
   12c2c:	e7e1      	b.n	12bf2 <dir_find+0x52>
				if (dj->lfn) {
   12c2e:	69ef      	ldr	r7, [r5, #28]
   12c30:	2f00      	cmp	r7, #0
   12c32:	d0de      	beq.n	12bf2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   12c34:	0673      	lsls	r3, r6, #25
   12c36:	d518      	bpl.n	12c6a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   12c38:	7b63      	ldrb	r3, [r4, #13]
   12c3a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   12c3c:	2340      	movs	r3, #64	; 0x40
   12c3e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   12c40:	88eb      	ldrh	r3, [r5, #6]
   12c42:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12c44:	7b63      	ldrb	r3, [r4, #13]
   12c46:	9300      	str	r3, [sp, #0]
   12c48:	22ff      	movs	r2, #255	; 0xff
   12c4a:	4692      	mov	sl, r2
   12c4c:	454b      	cmp	r3, r9
   12c4e:	d1d0      	bne.n	12bf2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   12c50:	7823      	ldrb	r3, [r4, #0]
   12c52:	3abf      	subs	r2, #191	; 0xbf
   12c54:	4393      	bics	r3, r2
   12c56:	3b01      	subs	r3, #1
   12c58:	005a      	lsls	r2, r3, #1
   12c5a:	18d2      	adds	r2, r2, r3
   12c5c:	0092      	lsls	r2, r2, #2
   12c5e:	4692      	mov	sl, r2
   12c60:	449a      	add	sl, r3
	s = 0; wc = 1;
   12c62:	2201      	movs	r2, #1
   12c64:	2300      	movs	r3, #0
   12c66:	4699      	mov	r9, r3
   12c68:	e01d      	b.n	12ca6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12c6a:	45b2      	cmp	sl, r6
   12c6c:	d0ea      	beq.n	12c44 <dir_find+0xa4>
   12c6e:	23ff      	movs	r3, #255	; 0xff
   12c70:	469a      	mov	sl, r3
   12c72:	e7be      	b.n	12bf2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   12c74:	4b2d      	ldr	r3, [pc, #180]	; (12d2c <dir_find+0x18c>)
   12c76:	4798      	blx	r3
   12c78:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   12c7a:	4653      	mov	r3, sl
   12c7c:	2bfe      	cmp	r3, #254	; 0xfe
   12c7e:	d81f      	bhi.n	12cc0 <dir_find+0x120>
   12c80:	2301      	movs	r3, #1
   12c82:	4453      	add	r3, sl
   12c84:	4698      	mov	r8, r3
   12c86:	4653      	mov	r3, sl
   12c88:	005b      	lsls	r3, r3, #1
   12c8a:	5bd8      	ldrh	r0, [r3, r7]
   12c8c:	4b27      	ldr	r3, [pc, #156]	; (12d2c <dir_find+0x18c>)
   12c8e:	4798      	blx	r3
   12c90:	0002      	movs	r2, r0
   12c92:	9b01      	ldr	r3, [sp, #4]
   12c94:	4283      	cmp	r3, r0
   12c96:	d113      	bne.n	12cc0 <dir_find+0x120>
   12c98:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   12c9a:	2301      	movs	r3, #1
   12c9c:	469c      	mov	ip, r3
   12c9e:	44e1      	add	r9, ip
   12ca0:	464b      	mov	r3, r9
   12ca2:	2b0d      	cmp	r3, #13
   12ca4:	d011      	beq.n	12cca <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   12ca6:	4b22      	ldr	r3, [pc, #136]	; (12d30 <dir_find+0x190>)
   12ca8:	4649      	mov	r1, r9
   12caa:	5cc9      	ldrb	r1, [r1, r3]
   12cac:	1863      	adds	r3, r4, r1
   12cae:	785b      	ldrb	r3, [r3, #1]
   12cb0:	021b      	lsls	r3, r3, #8
   12cb2:	5c60      	ldrb	r0, [r4, r1]
   12cb4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   12cb6:	2a00      	cmp	r2, #0
   12cb8:	d1dc      	bne.n	12c74 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   12cba:	4b1e      	ldr	r3, [pc, #120]	; (12d34 <dir_find+0x194>)
   12cbc:	4298      	cmp	r0, r3
   12cbe:	d0ec      	beq.n	12c9a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12cc0:	9b00      	ldr	r3, [sp, #0]
   12cc2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12cc4:	23ff      	movs	r3, #255	; 0xff
   12cc6:	469a      	mov	sl, r3
   12cc8:	e793      	b.n	12bf2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   12cca:	7823      	ldrb	r3, [r4, #0]
   12ccc:	065b      	lsls	r3, r3, #25
   12cce:	d506      	bpl.n	12cde <dir_find+0x13e>
   12cd0:	2a00      	cmp	r2, #0
   12cd2:	d004      	beq.n	12cde <dir_find+0x13e>
   12cd4:	4653      	mov	r3, sl
   12cd6:	005b      	lsls	r3, r3, #1
   12cd8:	5bdb      	ldrh	r3, [r3, r7]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d1f0      	bne.n	12cc0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12cde:	3e01      	subs	r6, #1
   12ce0:	b2f3      	uxtb	r3, r6
   12ce2:	469a      	mov	sl, r3
   12ce4:	9b00      	ldr	r3, [sp, #0]
   12ce6:	4699      	mov	r9, r3
   12ce8:	e783      	b.n	12bf2 <dir_find+0x52>
   12cea:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   12cec:	5ce1      	ldrb	r1, [r4, r3]
   12cee:	5cc2      	ldrb	r2, [r0, r3]
   12cf0:	4291      	cmp	r1, r2
   12cf2:	d10a      	bne.n	12d0a <dir_find+0x16a>
   12cf4:	3301      	adds	r3, #1
   12cf6:	2b0b      	cmp	r3, #11
   12cf8:	d1f8      	bne.n	12cec <dir_find+0x14c>
}
   12cfa:	0038      	movs	r0, r7
   12cfc:	b003      	add	sp, #12
   12cfe:	bc3c      	pop	{r2, r3, r4, r5}
   12d00:	4690      	mov	r8, r2
   12d02:	4699      	mov	r9, r3
   12d04:	46a2      	mov	sl, r4
   12d06:	46ab      	mov	fp, r5
   12d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12d0a:	23ff      	movs	r3, #255	; 0xff
   12d0c:	469a      	mov	sl, r3
   12d0e:	e770      	b.n	12bf2 <dir_find+0x52>
			ord = 0xFF;
   12d10:	23ff      	movs	r3, #255	; 0xff
   12d12:	469a      	mov	sl, r3
   12d14:	e76d      	b.n	12bf2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12d16:	2704      	movs	r7, #4
   12d18:	e7ef      	b.n	12cfa <dir_find+0x15a>
   12d1a:	46c0      	nop			; (mov r8, r8)
   12d1c:	00012761 	.word	0x00012761
   12d20:	000125c5 	.word	0x000125c5
   12d24:	00012123 	.word	0x00012123
   12d28:	00012a7d 	.word	0x00012a7d
   12d2c:	00013ae5 	.word	0x00013ae5
   12d30:	00019c44 	.word	0x00019c44
   12d34:	0000ffff 	.word	0x0000ffff

00012d38 <dir_register>:
{
   12d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d3a:	46de      	mov	lr, fp
   12d3c:	4657      	mov	r7, sl
   12d3e:	464e      	mov	r6, r9
   12d40:	4645      	mov	r5, r8
   12d42:	b5e0      	push	{r5, r6, r7, lr}
   12d44:	b089      	sub	sp, #36	; 0x24
   12d46:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   12d48:	6987      	ldr	r7, [r0, #24]
   12d4a:	69c3      	ldr	r3, [r0, #28]
   12d4c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   12d4e:	ad05      	add	r5, sp, #20
   12d50:	220c      	movs	r2, #12
   12d52:	0039      	movs	r1, r7
   12d54:	0028      	movs	r0, r5
   12d56:	4ba7      	ldr	r3, [pc, #668]	; (12ff4 <dir_register+0x2bc>)
   12d58:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   12d5a:	7aeb      	ldrb	r3, [r5, #11]
   12d5c:	07db      	lsls	r3, r3, #31
   12d5e:	d400      	bmi.n	12d62 <dir_register+0x2a>
   12d60:	e070      	b.n	12e44 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   12d62:	2300      	movs	r3, #0
   12d64:	72fb      	strb	r3, [r7, #11]
   12d66:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   12d68:	220b      	movs	r2, #11
   12d6a:	a905      	add	r1, sp, #20
   12d6c:	0038      	movs	r0, r7
   12d6e:	4ba1      	ldr	r3, [pc, #644]	; (12ff4 <dir_register+0x2bc>)
   12d70:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12d72:	2301      	movs	r3, #1
		ns[i--] = c;
   12d74:	ad03      	add	r5, sp, #12
   12d76:	001e      	movs	r6, r3
   12d78:	46a0      	mov	r8, r4
   12d7a:	e049      	b.n	12e10 <dir_register+0xd8>
   12d7c:	3801      	subs	r0, #1
   12d7e:	1829      	adds	r1, r5, r0
   12d80:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   12d82:	091b      	lsrs	r3, r3, #4
   12d84:	b29b      	uxth	r3, r3
	} while (seq);
   12d86:	2b00      	cmp	r3, #0
   12d88:	d007      	beq.n	12d9a <dir_register+0x62>
		c = (seq % 16) + '0';
   12d8a:	0021      	movs	r1, r4
   12d8c:	4019      	ands	r1, r3
   12d8e:	000a      	movs	r2, r1
   12d90:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   12d92:	2a39      	cmp	r2, #57	; 0x39
   12d94:	d9f2      	bls.n	12d7c <dir_register+0x44>
   12d96:	3207      	adds	r2, #7
   12d98:	e7f0      	b.n	12d7c <dir_register+0x44>
	ns[i] = '~';
   12d9a:	337e      	adds	r3, #126	; 0x7e
   12d9c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   12d9e:	2800      	cmp	r0, #0
   12da0:	d00a      	beq.n	12db8 <dir_register+0x80>
   12da2:	783b      	ldrb	r3, [r7, #0]
   12da4:	2b20      	cmp	r3, #32
   12da6:	d009      	beq.n	12dbc <dir_register+0x84>
   12da8:	2300      	movs	r3, #0
   12daa:	3301      	adds	r3, #1
   12dac:	4298      	cmp	r0, r3
   12dae:	d007      	beq.n	12dc0 <dir_register+0x88>
   12db0:	5cfa      	ldrb	r2, [r7, r3]
   12db2:	2a20      	cmp	r2, #32
   12db4:	d1f9      	bne.n	12daa <dir_register+0x72>
   12db6:	e009      	b.n	12dcc <dir_register+0x94>
   12db8:	0003      	movs	r3, r0
   12dba:	e007      	b.n	12dcc <dir_register+0x94>
   12dbc:	2300      	movs	r3, #0
   12dbe:	e005      	b.n	12dcc <dir_register+0x94>
   12dc0:	0003      	movs	r3, r0
   12dc2:	e003      	b.n	12dcc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12dc4:	54fa      	strb	r2, [r7, r3]
   12dc6:	3301      	adds	r3, #1
	} while (j < 8);
   12dc8:	2b07      	cmp	r3, #7
   12dca:	d805      	bhi.n	12dd8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12dcc:	2220      	movs	r2, #32
   12dce:	2807      	cmp	r0, #7
   12dd0:	d8f8      	bhi.n	12dc4 <dir_register+0x8c>
   12dd2:	5c2a      	ldrb	r2, [r5, r0]
   12dd4:	3001      	adds	r0, #1
   12dd6:	e7f5      	b.n	12dc4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   12dd8:	4640      	mov	r0, r8
   12dda:	4b87      	ldr	r3, [pc, #540]	; (12ff8 <dir_register+0x2c0>)
   12ddc:	4798      	blx	r3
			if (res != FR_OK) break;
   12dde:	2800      	cmp	r0, #0
   12de0:	d11c      	bne.n	12e1c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   12de2:	3601      	adds	r6, #1
   12de4:	b2b6      	uxth	r6, r6
   12de6:	2e64      	cmp	r6, #100	; 0x64
   12de8:	d015      	beq.n	12e16 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   12dea:	220b      	movs	r2, #11
   12dec:	a905      	add	r1, sp, #20
   12dee:	0038      	movs	r0, r7
   12df0:	4b80      	ldr	r3, [pc, #512]	; (12ff4 <dir_register+0x2bc>)
   12df2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12df4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   12df6:	2e05      	cmp	r6, #5
   12df8:	d90a      	bls.n	12e10 <dir_register+0xd8>
   12dfa:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   12dfc:	085a      	lsrs	r2, r3, #1
   12dfe:	03db      	lsls	r3, r3, #15
   12e00:	4313      	orrs	r3, r2
   12e02:	880a      	ldrh	r2, [r1, #0]
   12e04:	189b      	adds	r3, r3, r2
   12e06:	b29b      	uxth	r3, r3
   12e08:	3102      	adds	r1, #2
   12e0a:	880a      	ldrh	r2, [r1, #0]
   12e0c:	2a00      	cmp	r2, #0
   12e0e:	d1f5      	bne.n	12dfc <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   12e10:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   12e12:	240f      	movs	r4, #15
   12e14:	e7b9      	b.n	12d8a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12e16:	2307      	movs	r3, #7
   12e18:	4698      	mov	r8, r3
   12e1a:	e006      	b.n	12e2a <dir_register+0xf2>
   12e1c:	4644      	mov	r4, r8
   12e1e:	4680      	mov	r8, r0
   12e20:	2e64      	cmp	r6, #100	; 0x64
   12e22:	d100      	bne.n	12e26 <dir_register+0xee>
   12e24:	e0a5      	b.n	12f72 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   12e26:	2804      	cmp	r0, #4
   12e28:	d007      	beq.n	12e3a <dir_register+0x102>
}
   12e2a:	4640      	mov	r0, r8
   12e2c:	b009      	add	sp, #36	; 0x24
   12e2e:	bc3c      	pop	{r2, r3, r4, r5}
   12e30:	4690      	mov	r8, r2
   12e32:	4699      	mov	r9, r3
   12e34:	46a2      	mov	sl, r4
   12e36:	46ab      	mov	fp, r5
   12e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   12e3a:	ab05      	add	r3, sp, #20
   12e3c:	7adb      	ldrb	r3, [r3, #11]
   12e3e:	72fb      	strb	r3, [r7, #11]
   12e40:	4653      	mov	r3, sl
   12e42:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12e44:	ab05      	add	r3, sp, #20
   12e46:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   12e48:	2201      	movs	r2, #1
   12e4a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12e4c:	079b      	lsls	r3, r3, #30
   12e4e:	d511      	bpl.n	12e74 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   12e50:	4653      	mov	r3, sl
   12e52:	881b      	ldrh	r3, [r3, #0]
   12e54:	2b00      	cmp	r3, #0
   12e56:	d01b      	beq.n	12e90 <dir_register+0x158>
   12e58:	2000      	movs	r0, #0
   12e5a:	4652      	mov	r2, sl
   12e5c:	3001      	adds	r0, #1
   12e5e:	b280      	uxth	r0, r0
   12e60:	0043      	lsls	r3, r0, #1
   12e62:	5a9b      	ldrh	r3, [r3, r2]
   12e64:	2b00      	cmp	r3, #0
   12e66:	d1f9      	bne.n	12e5c <dir_register+0x124>
		ne = (ne + 25) / 13;
   12e68:	3019      	adds	r0, #25
   12e6a:	210d      	movs	r1, #13
   12e6c:	4b63      	ldr	r3, [pc, #396]	; (12ffc <dir_register+0x2c4>)
   12e6e:	4798      	blx	r3
   12e70:	b283      	uxth	r3, r0
   12e72:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   12e74:	2100      	movs	r1, #0
   12e76:	0020      	movs	r0, r4
   12e78:	4b61      	ldr	r3, [pc, #388]	; (13000 <dir_register+0x2c8>)
   12e7a:	4798      	blx	r3
   12e7c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   12e7e:	2800      	cmp	r0, #0
   12e80:	d1d3      	bne.n	12e2a <dir_register+0xf2>
   12e82:	4682      	mov	sl, r0
   12e84:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   12e86:	4f5f      	ldr	r7, [pc, #380]	; (13004 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   12e88:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12e8a:	4b5f      	ldr	r3, [pc, #380]	; (13008 <dir_register+0x2d0>)
   12e8c:	4699      	mov	r9, r3
   12e8e:	e00b      	b.n	12ea8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   12e90:	2000      	movs	r0, #0
   12e92:	e7e9      	b.n	12e68 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   12e94:	1c6b      	adds	r3, r5, #1
   12e96:	b29b      	uxth	r3, r3
   12e98:	459b      	cmp	fp, r3
   12e9a:	d06d      	beq.n	12f78 <dir_register+0x240>
   12e9c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12e9e:	2101      	movs	r1, #1
   12ea0:	0020      	movs	r0, r4
   12ea2:	47c8      	blx	r9
	} while (res == FR_OK);
   12ea4:	2800      	cmp	r0, #0
   12ea6:	d112      	bne.n	12ece <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   12ea8:	6921      	ldr	r1, [r4, #16]
   12eaa:	6820      	ldr	r0, [r4, #0]
   12eac:	47b8      	blx	r7
		if (res != FR_OK) break;
   12eae:	2800      	cmp	r0, #0
   12eb0:	d000      	beq.n	12eb4 <dir_register+0x17c>
   12eb2:	e098      	b.n	12fe6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   12eb4:	6963      	ldr	r3, [r4, #20]
   12eb6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   12eb8:	2be5      	cmp	r3, #229	; 0xe5
   12eba:	d001      	beq.n	12ec0 <dir_register+0x188>
   12ebc:	2b00      	cmp	r3, #0
   12ebe:	d104      	bne.n	12eca <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   12ec0:	2d00      	cmp	r5, #0
   12ec2:	d1e7      	bne.n	12e94 <dir_register+0x15c>
   12ec4:	88e3      	ldrh	r3, [r4, #6]
   12ec6:	469a      	mov	sl, r3
   12ec8:	e7e4      	b.n	12e94 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   12eca:	0035      	movs	r5, r6
   12ecc:	e7e7      	b.n	12e9e <dir_register+0x166>
   12ece:	4680      	mov	r8, r0
   12ed0:	e7ab      	b.n	12e2a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   12ed2:	4651      	mov	r1, sl
   12ed4:	0020      	movs	r0, r4
   12ed6:	4b4a      	ldr	r3, [pc, #296]	; (13000 <dir_register+0x2c8>)
   12ed8:	4798      	blx	r3
   12eda:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12edc:	2800      	cmp	r0, #0
   12ede:	d1a4      	bne.n	12e2a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   12ee0:	69a0      	ldr	r0, [r4, #24]
   12ee2:	4b4a      	ldr	r3, [pc, #296]	; (1300c <dir_register+0x2d4>)
   12ee4:	4798      	blx	r3
   12ee6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12ee8:	46a8      	mov	r8, r5
   12eea:	e01f      	b.n	12f2c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12eec:	0022      	movs	r2, r4
   12eee:	e067      	b.n	12fc0 <dir_register+0x288>
   12ef0:	465e      	mov	r6, fp
   12ef2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   12ef4:	4946      	ldr	r1, [pc, #280]	; (13010 <dir_register+0x2d8>)
   12ef6:	428b      	cmp	r3, r1
   12ef8:	d003      	beq.n	12f02 <dir_register+0x1ca>
   12efa:	0052      	lsls	r2, r2, #1
   12efc:	5b93      	ldrh	r3, [r2, r6]
   12efe:	2b00      	cmp	r3, #0
   12f00:	d103      	bne.n	12f0a <dir_register+0x1d2>
   12f02:	2340      	movs	r3, #64	; 0x40
   12f04:	464a      	mov	r2, r9
   12f06:	431a      	orrs	r2, r3
   12f08:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   12f0a:	464b      	mov	r3, r9
   12f0c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   12f0e:	2301      	movs	r3, #1
   12f10:	6822      	ldr	r2, [r4, #0]
   12f12:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   12f14:	2100      	movs	r1, #0
   12f16:	0020      	movs	r0, r4
   12f18:	4b3b      	ldr	r3, [pc, #236]	; (13008 <dir_register+0x2d0>)
   12f1a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   12f1c:	2800      	cmp	r0, #0
   12f1e:	d166      	bne.n	12fee <dir_register+0x2b6>
   12f20:	4645      	mov	r5, r8
   12f22:	3d01      	subs	r5, #1
   12f24:	b2ab      	uxth	r3, r5
   12f26:	4698      	mov	r8, r3
   12f28:	2b00      	cmp	r3, #0
   12f2a:	d027      	beq.n	12f7c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   12f2c:	6921      	ldr	r1, [r4, #16]
   12f2e:	6820      	ldr	r0, [r4, #0]
   12f30:	4b34      	ldr	r3, [pc, #208]	; (13004 <dir_register+0x2cc>)
   12f32:	4798      	blx	r3
				if (res != FR_OK) break;
   12f34:	2800      	cmp	r0, #0
   12f36:	d158      	bne.n	12fea <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   12f38:	69e6      	ldr	r6, [r4, #28]
   12f3a:	6960      	ldr	r0, [r4, #20]
   12f3c:	4643      	mov	r3, r8
   12f3e:	466a      	mov	r2, sp
   12f40:	70d3      	strb	r3, [r2, #3]
   12f42:	78d3      	ldrb	r3, [r2, #3]
   12f44:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   12f46:	7913      	ldrb	r3, [r2, #4]
   12f48:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   12f4a:	230f      	movs	r3, #15
   12f4c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   12f4e:	2300      	movs	r3, #0
   12f50:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   12f52:	7683      	strb	r3, [r0, #26]
   12f54:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   12f56:	464b      	mov	r3, r9
   12f58:	3b01      	subs	r3, #1
   12f5a:	005a      	lsls	r2, r3, #1
   12f5c:	18d2      	adds	r2, r2, r3
   12f5e:	0092      	lsls	r2, r2, #2
   12f60:	18d2      	adds	r2, r2, r3
   12f62:	492c      	ldr	r1, [pc, #176]	; (13014 <dir_register+0x2dc>)
   12f64:	000d      	movs	r5, r1
   12f66:	350d      	adds	r5, #13
	s = wc = 0;
   12f68:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12f6a:	4f29      	ldr	r7, [pc, #164]	; (13010 <dir_register+0x2d8>)
   12f6c:	46b3      	mov	fp, r6
   12f6e:	46a4      	mov	ip, r4
   12f70:	e029      	b.n	12fc6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12f72:	2307      	movs	r3, #7
   12f74:	4698      	mov	r8, r3
   12f76:	e758      	b.n	12e2a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   12f78:	2b01      	cmp	r3, #1
   12f7a:	d8aa      	bhi.n	12ed2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   12f7c:	6921      	ldr	r1, [r4, #16]
   12f7e:	6820      	ldr	r0, [r4, #0]
   12f80:	4b20      	ldr	r3, [pc, #128]	; (13004 <dir_register+0x2cc>)
   12f82:	4798      	blx	r3
   12f84:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12f86:	2800      	cmp	r0, #0
   12f88:	d000      	beq.n	12f8c <dir_register+0x254>
   12f8a:	e74e      	b.n	12e2a <dir_register+0xf2>
			dir = dj->dir;
   12f8c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   12f8e:	2220      	movs	r2, #32
   12f90:	2100      	movs	r1, #0
   12f92:	0028      	movs	r0, r5
   12f94:	4b20      	ldr	r3, [pc, #128]	; (13018 <dir_register+0x2e0>)
   12f96:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   12f98:	220b      	movs	r2, #11
   12f9a:	69a1      	ldr	r1, [r4, #24]
   12f9c:	0028      	movs	r0, r5
   12f9e:	4b15      	ldr	r3, [pc, #84]	; (12ff4 <dir_register+0x2bc>)
   12fa0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   12fa2:	69a3      	ldr	r3, [r4, #24]
   12fa4:	7ada      	ldrb	r2, [r3, #11]
   12fa6:	2318      	movs	r3, #24
   12fa8:	4013      	ands	r3, r2
   12faa:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   12fac:	6823      	ldr	r3, [r4, #0]
   12fae:	2201      	movs	r2, #1
   12fb0:	711a      	strb	r2, [r3, #4]
   12fb2:	e73a      	b.n	12e2a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12fb4:	780c      	ldrb	r4, [r1, #0]
   12fb6:	26ff      	movs	r6, #255	; 0xff
   12fb8:	5506      	strb	r6, [r0, r4]
   12fba:	1904      	adds	r4, r0, r4
   12fbc:	26ff      	movs	r6, #255	; 0xff
   12fbe:	7066      	strb	r6, [r4, #1]
   12fc0:	3101      	adds	r1, #1
	} while (++s < 13);
   12fc2:	42a9      	cmp	r1, r5
   12fc4:	d094      	beq.n	12ef0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12fc6:	42bb      	cmp	r3, r7
   12fc8:	d0f4      	beq.n	12fb4 <dir_register+0x27c>
   12fca:	1c54      	adds	r4, r2, #1
   12fcc:	0052      	lsls	r2, r2, #1
   12fce:	465b      	mov	r3, fp
   12fd0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12fd2:	780a      	ldrb	r2, [r1, #0]
   12fd4:	5483      	strb	r3, [r0, r2]
   12fd6:	1882      	adds	r2, r0, r2
   12fd8:	0a1e      	lsrs	r6, r3, #8
   12fda:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   12fdc:	2b00      	cmp	r3, #0
   12fde:	d185      	bne.n	12eec <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12fe0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   12fe2:	003b      	movs	r3, r7
   12fe4:	e7ec      	b.n	12fc0 <dir_register+0x288>
   12fe6:	4680      	mov	r8, r0
   12fe8:	e71f      	b.n	12e2a <dir_register+0xf2>
   12fea:	4680      	mov	r8, r0
   12fec:	e71d      	b.n	12e2a <dir_register+0xf2>
   12fee:	4680      	mov	r8, r0
   12ff0:	e71b      	b.n	12e2a <dir_register+0xf2>
   12ff2:	46c0      	nop			; (mov r8, r8)
   12ff4:	000120e5 	.word	0x000120e5
   12ff8:	00012ba1 	.word	0x00012ba1
   12ffc:	000170f5 	.word	0x000170f5
   13000:	00012761 	.word	0x00012761
   13004:	000125c5 	.word	0x000125c5
   13008:	00012a7d 	.word	0x00012a7d
   1300c:	00012123 	.word	0x00012123
   13010:	0000ffff 	.word	0x0000ffff
   13014:	00019c44 	.word	0x00019c44
   13018:	000120f9 	.word	0x000120f9

0001301c <sync>:
{
   1301c:	b570      	push	{r4, r5, r6, lr}
   1301e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   13020:	2100      	movs	r1, #0
   13022:	4b2c      	ldr	r3, [pc, #176]	; (130d4 <sync+0xb8>)
   13024:	4798      	blx	r3
	if (res == FR_OK) {
   13026:	2800      	cmp	r0, #0
   13028:	d10a      	bne.n	13040 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1302a:	7823      	ldrb	r3, [r4, #0]
   1302c:	2b03      	cmp	r3, #3
   1302e:	d008      	beq.n	13042 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   13030:	7860      	ldrb	r0, [r4, #1]
   13032:	2200      	movs	r2, #0
   13034:	2100      	movs	r1, #0
   13036:	4b28      	ldr	r3, [pc, #160]	; (130d8 <sync+0xbc>)
   13038:	4798      	blx	r3
   1303a:	1e43      	subs	r3, r0, #1
   1303c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   1303e:	b2c0      	uxtb	r0, r0
}
   13040:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   13042:	7963      	ldrb	r3, [r4, #5]
   13044:	2b00      	cmp	r3, #0
   13046:	d0f3      	beq.n	13030 <sync+0x14>
			fs->winsect = 0;
   13048:	2600      	movs	r6, #0
   1304a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   1304c:	0025      	movs	r5, r4
   1304e:	3530      	adds	r5, #48	; 0x30
   13050:	2280      	movs	r2, #128	; 0x80
   13052:	0092      	lsls	r2, r2, #2
   13054:	2100      	movs	r1, #0
   13056:	0028      	movs	r0, r5
   13058:	4b20      	ldr	r3, [pc, #128]	; (130dc <sync+0xc0>)
   1305a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   1305c:	2255      	movs	r2, #85	; 0x55
   1305e:	4b20      	ldr	r3, [pc, #128]	; (130e0 <sync+0xc4>)
   13060:	54e2      	strb	r2, [r4, r3]
   13062:	3255      	adds	r2, #85	; 0x55
   13064:	4b1f      	ldr	r3, [pc, #124]	; (130e4 <sync+0xc8>)
   13066:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   13068:	3bde      	subs	r3, #222	; 0xde
   1306a:	3bff      	subs	r3, #255	; 0xff
   1306c:	3a7a      	subs	r2, #122	; 0x7a
   1306e:	54a3      	strb	r3, [r4, r2]
   13070:	3201      	adds	r2, #1
   13072:	54a3      	strb	r3, [r4, r2]
   13074:	330f      	adds	r3, #15
   13076:	3201      	adds	r2, #1
   13078:	54a3      	strb	r3, [r4, r2]
   1307a:	320f      	adds	r2, #15
   1307c:	2133      	movs	r1, #51	; 0x33
   1307e:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   13080:	313f      	adds	r1, #63	; 0x3f
   13082:	2085      	movs	r0, #133	; 0x85
   13084:	0080      	lsls	r0, r0, #2
   13086:	5421      	strb	r1, [r4, r0]
   13088:	4817      	ldr	r0, [pc, #92]	; (130e8 <sync+0xcc>)
   1308a:	5421      	strb	r1, [r4, r0]
   1308c:	4917      	ldr	r1, [pc, #92]	; (130ec <sync+0xd0>)
   1308e:	5462      	strb	r2, [r4, r1]
   13090:	4a17      	ldr	r2, [pc, #92]	; (130f0 <sync+0xd4>)
   13092:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   13094:	6923      	ldr	r3, [r4, #16]
   13096:	3201      	adds	r2, #1
   13098:	54a3      	strb	r3, [r4, r2]
   1309a:	0a19      	lsrs	r1, r3, #8
   1309c:	4a15      	ldr	r2, [pc, #84]	; (130f4 <sync+0xd8>)
   1309e:	54a1      	strb	r1, [r4, r2]
   130a0:	0c19      	lsrs	r1, r3, #16
   130a2:	4a15      	ldr	r2, [pc, #84]	; (130f8 <sync+0xdc>)
   130a4:	54a1      	strb	r1, [r4, r2]
   130a6:	0e1b      	lsrs	r3, r3, #24
   130a8:	4a14      	ldr	r2, [pc, #80]	; (130fc <sync+0xe0>)
   130aa:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   130ac:	68e3      	ldr	r3, [r4, #12]
   130ae:	3201      	adds	r2, #1
   130b0:	54a3      	strb	r3, [r4, r2]
   130b2:	0a19      	lsrs	r1, r3, #8
   130b4:	4a12      	ldr	r2, [pc, #72]	; (13100 <sync+0xe4>)
   130b6:	54a1      	strb	r1, [r4, r2]
   130b8:	0c19      	lsrs	r1, r3, #16
   130ba:	4a12      	ldr	r2, [pc, #72]	; (13104 <sync+0xe8>)
   130bc:	54a1      	strb	r1, [r4, r2]
   130be:	0e1b      	lsrs	r3, r3, #24
   130c0:	4a11      	ldr	r2, [pc, #68]	; (13108 <sync+0xec>)
   130c2:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   130c4:	7860      	ldrb	r0, [r4, #1]
   130c6:	2301      	movs	r3, #1
   130c8:	6962      	ldr	r2, [r4, #20]
   130ca:	0029      	movs	r1, r5
   130cc:	4d0f      	ldr	r5, [pc, #60]	; (1310c <sync+0xf0>)
   130ce:	47a8      	blx	r5
			fs->fsi_flag = 0;
   130d0:	7166      	strb	r6, [r4, #5]
   130d2:	e7ad      	b.n	13030 <sync+0x14>
   130d4:	000125c5 	.word	0x000125c5
   130d8:	00012029 	.word	0x00012029
   130dc:	000120f9 	.word	0x000120f9
   130e0:	0000022e 	.word	0x0000022e
   130e4:	0000022f 	.word	0x0000022f
   130e8:	00000215 	.word	0x00000215
   130ec:	00000216 	.word	0x00000216
   130f0:	00000217 	.word	0x00000217
   130f4:	00000219 	.word	0x00000219
   130f8:	0000021a 	.word	0x0000021a
   130fc:	0000021b 	.word	0x0000021b
   13100:	0000021d 	.word	0x0000021d
   13104:	0000021e 	.word	0x0000021e
   13108:	0000021f 	.word	0x0000021f
   1310c:	00011fa5 	.word	0x00011fa5

00013110 <follow_path>:
{
   13110:	b5f0      	push	{r4, r5, r6, r7, lr}
   13112:	46de      	mov	lr, fp
   13114:	4657      	mov	r7, sl
   13116:	464e      	mov	r6, r9
   13118:	4645      	mov	r5, r8
   1311a:	b5e0      	push	{r5, r6, r7, lr}
   1311c:	b083      	sub	sp, #12
   1311e:	4682      	mov	sl, r0
   13120:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   13122:	780b      	ldrb	r3, [r1, #0]
   13124:	2b2f      	cmp	r3, #47	; 0x2f
   13126:	d00f      	beq.n	13148 <follow_path+0x38>
   13128:	2b5c      	cmp	r3, #92	; 0x5c
   1312a:	d00d      	beq.n	13148 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   1312c:	2300      	movs	r3, #0
   1312e:	4652      	mov	r2, sl
   13130:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   13132:	782b      	ldrb	r3, [r5, #0]
   13134:	4657      	mov	r7, sl
   13136:	2b1f      	cmp	r3, #31
   13138:	d809      	bhi.n	1314e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   1313a:	2100      	movs	r1, #0
   1313c:	4650      	mov	r0, sl
   1313e:	4bb2      	ldr	r3, [pc, #712]	; (13408 <follow_path+0x2f8>)
   13140:	4798      	blx	r3
		dj->dir = 0;
   13142:	2300      	movs	r3, #0
   13144:	617b      	str	r3, [r7, #20]
   13146:	e13a      	b.n	133be <follow_path+0x2ae>
		path++;
   13148:	3501      	adds	r5, #1
   1314a:	e7ef      	b.n	1312c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1314c:	3501      	adds	r5, #1
   1314e:	7828      	ldrb	r0, [r5, #0]
   13150:	282f      	cmp	r0, #47	; 0x2f
   13152:	d0fb      	beq.n	1314c <follow_path+0x3c>
   13154:	285c      	cmp	r0, #92	; 0x5c
   13156:	d0f9      	beq.n	1314c <follow_path+0x3c>
	lfn = dj->lfn;
   13158:	69fb      	ldr	r3, [r7, #28]
   1315a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   1315c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1315e:	281f      	cmp	r0, #31
   13160:	d800      	bhi.n	13164 <follow_path+0x54>
   13162:	e13b      	b.n	133dc <follow_path+0x2cc>
   13164:	282f      	cmp	r0, #47	; 0x2f
   13166:	d100      	bne.n	1316a <follow_path+0x5a>
   13168:	e13b      	b.n	133e2 <follow_path+0x2d2>
   1316a:	285c      	cmp	r0, #92	; 0x5c
   1316c:	d100      	bne.n	13170 <follow_path+0x60>
   1316e:	e13b      	b.n	133e8 <follow_path+0x2d8>
   13170:	1c6e      	adds	r6, r5, #1
   13172:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   13174:	2380      	movs	r3, #128	; 0x80
   13176:	005b      	lsls	r3, r3, #1
   13178:	4698      	mov	r8, r3
   1317a:	46bb      	mov	fp, r7
   1317c:	002b      	movs	r3, r5
   1317e:	0025      	movs	r5, r4
   13180:	0034      	movs	r4, r6
   13182:	4656      	mov	r6, sl
   13184:	4699      	mov	r9, r3
   13186:	e011      	b.n	131ac <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   13188:	2b00      	cmp	r3, #0
   1318a:	d135      	bne.n	131f8 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   1318c:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   1318e:	1c6b      	adds	r3, r5, #1
   13190:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   13192:	281f      	cmp	r0, #31
   13194:	d91e      	bls.n	131d4 <follow_path+0xc4>
   13196:	282f      	cmp	r0, #47	; 0x2f
   13198:	d100      	bne.n	1319c <follow_path+0x8c>
   1319a:	e128      	b.n	133ee <follow_path+0x2de>
   1319c:	285c      	cmp	r0, #92	; 0x5c
   1319e:	d100      	bne.n	131a2 <follow_path+0x92>
   131a0:	e142      	b.n	13428 <follow_path+0x318>
   131a2:	3602      	adds	r6, #2
   131a4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   131a6:	4543      	cmp	r3, r8
   131a8:	d026      	beq.n	131f8 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   131aa:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   131ac:	2101      	movs	r1, #1
   131ae:	4b97      	ldr	r3, [pc, #604]	; (1340c <follow_path+0x2fc>)
   131b0:	4798      	blx	r3
   131b2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   131b4:	d020      	beq.n	131f8 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   131b6:	287f      	cmp	r0, #127	; 0x7f
   131b8:	d8e8      	bhi.n	1318c <follow_path+0x7c>
	while (*str && *str != chr) str++;
   131ba:	2822      	cmp	r0, #34	; 0x22
   131bc:	d100      	bne.n	131c0 <follow_path+0xb0>
   131be:	e0fd      	b.n	133bc <follow_path+0x2ac>
   131c0:	232a      	movs	r3, #42	; 0x2a
   131c2:	4a93      	ldr	r2, [pc, #588]	; (13410 <follow_path+0x300>)
   131c4:	b29f      	uxth	r7, r3
   131c6:	428f      	cmp	r7, r1
   131c8:	d0de      	beq.n	13188 <follow_path+0x78>
   131ca:	3201      	adds	r2, #1
   131cc:	7813      	ldrb	r3, [r2, #0]
   131ce:	2b00      	cmp	r3, #0
   131d0:	d1f8      	bne.n	131c4 <follow_path+0xb4>
   131d2:	e7db      	b.n	1318c <follow_path+0x7c>
   131d4:	002c      	movs	r4, r5
   131d6:	465f      	mov	r7, fp
   131d8:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   131da:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   131dc:	2604      	movs	r6, #4
   131de:	e10b      	b.n	133f8 <follow_path+0x2e8>
		di--;
   131e0:	3c01      	subs	r4, #1
   131e2:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   131e4:	2c00      	cmp	r4, #0
   131e6:	d100      	bne.n	131ea <follow_path+0xda>
   131e8:	e0e8      	b.n	133bc <follow_path+0x2ac>
		w = lfn[di-1];
   131ea:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   131ec:	2a20      	cmp	r2, #32
   131ee:	d0f7      	beq.n	131e0 <follow_path+0xd0>
   131f0:	2a2e      	cmp	r2, #46	; 0x2e
   131f2:	d0f5      	beq.n	131e0 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   131f4:	2c00      	cmp	r4, #0
   131f6:	d101      	bne.n	131fc <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   131f8:	2006      	movs	r0, #6
	return res;
   131fa:	e0e0      	b.n	133be <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   131fc:	0063      	lsls	r3, r4, #1
   131fe:	4698      	mov	r8, r3
   13200:	2300      	movs	r3, #0
   13202:	4652      	mov	r2, sl
   13204:	4641      	mov	r1, r8
   13206:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   13208:	220b      	movs	r2, #11
   1320a:	2120      	movs	r1, #32
   1320c:	69b8      	ldr	r0, [r7, #24]
   1320e:	4b81      	ldr	r3, [pc, #516]	; (13414 <follow_path+0x304>)
   13210:	4798      	blx	r3
   13212:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   13214:	2300      	movs	r3, #0
   13216:	e001      	b.n	1321c <follow_path+0x10c>
   13218:	3301      	adds	r3, #1
   1321a:	3202      	adds	r2, #2
   1321c:	8811      	ldrh	r1, [r2, #0]
   1321e:	2920      	cmp	r1, #32
   13220:	d0fa      	beq.n	13218 <follow_path+0x108>
   13222:	292e      	cmp	r1, #46	; 0x2e
   13224:	d0f8      	beq.n	13218 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   13226:	2b00      	cmp	r3, #0
   13228:	d001      	beq.n	1322e <follow_path+0x11e>
   1322a:	2203      	movs	r2, #3
   1322c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1322e:	4652      	mov	r2, sl
   13230:	4442      	add	r2, r8
   13232:	3a02      	subs	r2, #2
   13234:	8812      	ldrh	r2, [r2, #0]
   13236:	2a2e      	cmp	r2, #46	; 0x2e
   13238:	d009      	beq.n	1324e <follow_path+0x13e>
   1323a:	4642      	mov	r2, r8
   1323c:	3a04      	subs	r2, #4
   1323e:	4452      	add	r2, sl
   13240:	3c01      	subs	r4, #1
   13242:	2c00      	cmp	r4, #0
   13244:	d003      	beq.n	1324e <follow_path+0x13e>
   13246:	3a02      	subs	r2, #2
   13248:	8851      	ldrh	r1, [r2, #2]
   1324a:	292e      	cmp	r1, #46	; 0x2e
   1324c:	d1f8      	bne.n	13240 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   1324e:	2208      	movs	r2, #8
   13250:	9201      	str	r2, [sp, #4]
   13252:	2200      	movs	r2, #0
   13254:	4693      	mov	fp, r2
   13256:	4691      	mov	r9, r2
   13258:	46a0      	mov	r8, r4
   1325a:	e006      	b.n	1326a <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1325c:	4544      	cmp	r4, r8
   1325e:	d100      	bne.n	13262 <follow_path+0x152>
   13260:	e0e6      	b.n	13430 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   13262:	2303      	movs	r3, #3
   13264:	431e      	orrs	r6, r3
   13266:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   13268:	0023      	movs	r3, r4
   1326a:	1c5c      	adds	r4, r3, #1
   1326c:	005b      	lsls	r3, r3, #1
   1326e:	4652      	mov	r2, sl
   13270:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   13272:	2800      	cmp	r0, #0
   13274:	d02c      	beq.n	132d0 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   13276:	2820      	cmp	r0, #32
   13278:	d0f3      	beq.n	13262 <follow_path+0x152>
   1327a:	282e      	cmp	r0, #46	; 0x2e
   1327c:	d0ee      	beq.n	1325c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1327e:	9b01      	ldr	r3, [sp, #4]
   13280:	459b      	cmp	fp, r3
   13282:	d219      	bcs.n	132b8 <follow_path+0x1a8>
   13284:	4544      	cmp	r4, r8
   13286:	d100      	bne.n	1328a <follow_path+0x17a>
   13288:	e0d2      	b.n	13430 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   1328a:	287f      	cmp	r0, #127	; 0x7f
   1328c:	d85e      	bhi.n	1334c <follow_path+0x23c>
	while (*str && *str != chr) str++;
   1328e:	282b      	cmp	r0, #43	; 0x2b
   13290:	d06e      	beq.n	13370 <follow_path+0x260>
   13292:	232c      	movs	r3, #44	; 0x2c
   13294:	4a60      	ldr	r2, [pc, #384]	; (13418 <follow_path+0x308>)
   13296:	b299      	uxth	r1, r3
   13298:	4281      	cmp	r1, r0
   1329a:	d067      	beq.n	1336c <follow_path+0x25c>
   1329c:	3201      	adds	r2, #1
   1329e:	7813      	ldrb	r3, [r2, #0]
   132a0:	2b00      	cmp	r3, #0
   132a2:	d1f8      	bne.n	13296 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   132a4:	0003      	movs	r3, r0
   132a6:	3b41      	subs	r3, #65	; 0x41
   132a8:	b29b      	uxth	r3, r3
   132aa:	2b19      	cmp	r3, #25
   132ac:	d86c      	bhi.n	13388 <follow_path+0x278>
					b |= 2;
   132ae:	2302      	movs	r3, #2
   132b0:	464a      	mov	r2, r9
   132b2:	431a      	orrs	r2, r3
   132b4:	4691      	mov	r9, r2
   132b6:	e05f      	b.n	13378 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   132b8:	9b01      	ldr	r3, [sp, #4]
   132ba:	2b0b      	cmp	r3, #11
   132bc:	d03b      	beq.n	13336 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   132be:	4544      	cmp	r4, r8
   132c0:	d100      	bne.n	132c4 <follow_path+0x1b4>
   132c2:	e0b9      	b.n	13438 <follow_path+0x328>
   132c4:	2303      	movs	r3, #3
   132c6:	431e      	orrs	r6, r3
   132c8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   132ca:	4544      	cmp	r4, r8
   132cc:	d800      	bhi.n	132d0 <follow_path+0x1c0>
   132ce:	e0b3      	b.n	13438 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   132d0:	69bb      	ldr	r3, [r7, #24]
   132d2:	781a      	ldrb	r2, [r3, #0]
   132d4:	2ae5      	cmp	r2, #229	; 0xe5
   132d6:	d036      	beq.n	13346 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   132d8:	9b01      	ldr	r3, [sp, #4]
   132da:	2b08      	cmp	r3, #8
   132dc:	d060      	beq.n	133a0 <follow_path+0x290>
   132de:	230c      	movs	r3, #12
   132e0:	464a      	mov	r2, r9
   132e2:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   132e4:	2b0c      	cmp	r3, #12
   132e6:	d060      	beq.n	133aa <follow_path+0x29a>
   132e8:	43d2      	mvns	r2, r2
   132ea:	0792      	lsls	r2, r2, #30
   132ec:	d05d      	beq.n	133aa <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   132ee:	07b2      	lsls	r2, r6, #30
   132f0:	d406      	bmi.n	13300 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   132f2:	2203      	movs	r2, #3
   132f4:	4649      	mov	r1, r9
   132f6:	400a      	ands	r2, r1
   132f8:	2a01      	cmp	r2, #1
   132fa:	d059      	beq.n	133b0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   132fc:	2b04      	cmp	r3, #4
   132fe:	d05a      	beq.n	133b6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   13300:	69bb      	ldr	r3, [r7, #24]
   13302:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   13304:	0038      	movs	r0, r7
   13306:	4b45      	ldr	r3, [pc, #276]	; (1341c <follow_path+0x30c>)
   13308:	4798      	blx	r3
			ns = *(dj->fn+NS);
   1330a:	69bb      	ldr	r3, [r7, #24]
   1330c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   1330e:	2800      	cmp	r0, #0
   13310:	d15c      	bne.n	133cc <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   13312:	075b      	lsls	r3, r3, #29
   13314:	d453      	bmi.n	133be <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   13316:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   13318:	7ad3      	ldrb	r3, [r2, #11]
   1331a:	06db      	lsls	r3, r3, #27
   1331c:	d55c      	bpl.n	133d8 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   1331e:	7d51      	ldrb	r1, [r2, #21]
   13320:	0209      	lsls	r1, r1, #8
   13322:	7d13      	ldrb	r3, [r2, #20]
   13324:	430b      	orrs	r3, r1
   13326:	041b      	lsls	r3, r3, #16
   13328:	7ed1      	ldrb	r1, [r2, #27]
   1332a:	0209      	lsls	r1, r1, #8
   1332c:	7e92      	ldrb	r2, [r2, #26]
   1332e:	430a      	orrs	r2, r1
   13330:	4313      	orrs	r3, r2
   13332:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   13334:	e70b      	b.n	1314e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   13336:	2303      	movs	r3, #3
   13338:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1333a:	69bb      	ldr	r3, [r7, #24]
   1333c:	781a      	ldrb	r2, [r3, #0]
   1333e:	2ae5      	cmp	r2, #229	; 0xe5
   13340:	d1cd      	bne.n	132de <follow_path+0x1ce>
   13342:	220b      	movs	r2, #11
   13344:	9201      	str	r2, [sp, #4]
   13346:	2205      	movs	r2, #5
   13348:	701a      	strb	r2, [r3, #0]
   1334a:	e7c5      	b.n	132d8 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1334c:	2100      	movs	r1, #0
   1334e:	4b2f      	ldr	r3, [pc, #188]	; (1340c <follow_path+0x2fc>)
   13350:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   13352:	2800      	cmp	r0, #0
   13354:	d100      	bne.n	13358 <follow_path+0x248>
   13356:	e079      	b.n	1344c <follow_path+0x33c>
   13358:	4b31      	ldr	r3, [pc, #196]	; (13420 <follow_path+0x310>)
   1335a:	469c      	mov	ip, r3
   1335c:	4460      	add	r0, ip
   1335e:	3880      	subs	r0, #128	; 0x80
   13360:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   13362:	2302      	movs	r3, #2
   13364:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   13366:	2800      	cmp	r0, #0
   13368:	d002      	beq.n	13370 <follow_path+0x260>
   1336a:	e790      	b.n	1328e <follow_path+0x17e>
   1336c:	2b00      	cmp	r3, #0
   1336e:	d099      	beq.n	132a4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   13370:	2303      	movs	r3, #3
   13372:	431e      	orrs	r6, r3
   13374:	b2f6      	uxtb	r6, r6
   13376:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   13378:	69bb      	ldr	r3, [r7, #24]
   1337a:	465a      	mov	r2, fp
   1337c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   1337e:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   13380:	2201      	movs	r2, #1
   13382:	4694      	mov	ip, r2
   13384:	44e3      	add	fp, ip
   13386:	e770      	b.n	1326a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   13388:	0003      	movs	r3, r0
   1338a:	3b61      	subs	r3, #97	; 0x61
   1338c:	b29b      	uxth	r3, r3
   1338e:	2b19      	cmp	r3, #25
   13390:	d8f2      	bhi.n	13378 <follow_path+0x268>
						b |= 1; w -= 0x20;
   13392:	2301      	movs	r3, #1
   13394:	464a      	mov	r2, r9
   13396:	431a      	orrs	r2, r3
   13398:	4691      	mov	r9, r2
   1339a:	3820      	subs	r0, #32
   1339c:	b280      	uxth	r0, r0
   1339e:	e7eb      	b.n	13378 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   133a0:	464b      	mov	r3, r9
   133a2:	009b      	lsls	r3, r3, #2
   133a4:	b2db      	uxtb	r3, r3
   133a6:	4699      	mov	r9, r3
   133a8:	e799      	b.n	132de <follow_path+0x1ce>
		cf |= NS_LFN;
   133aa:	2202      	movs	r2, #2
   133ac:	4316      	orrs	r6, r2
   133ae:	e79e      	b.n	132ee <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   133b0:	320f      	adds	r2, #15
   133b2:	4316      	orrs	r6, r2
   133b4:	e7a2      	b.n	132fc <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   133b6:	3304      	adds	r3, #4
   133b8:	431e      	orrs	r6, r3
   133ba:	e7a1      	b.n	13300 <follow_path+0x1f0>
   133bc:	2006      	movs	r0, #6
}
   133be:	b003      	add	sp, #12
   133c0:	bc3c      	pop	{r2, r3, r4, r5}
   133c2:	4690      	mov	r8, r2
   133c4:	4699      	mov	r9, r3
   133c6:	46a2      	mov	sl, r4
   133c8:	46ab      	mov	fp, r5
   133ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   133cc:	2804      	cmp	r0, #4
   133ce:	d1f6      	bne.n	133be <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   133d0:	075b      	lsls	r3, r3, #29
   133d2:	d4f4      	bmi.n	133be <follow_path+0x2ae>
   133d4:	3001      	adds	r0, #1
   133d6:	e7f2      	b.n	133be <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   133d8:	2005      	movs	r0, #5
   133da:	e7f0      	b.n	133be <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   133dc:	2301      	movs	r3, #1
	si = di = 0;
   133de:	2400      	movs	r4, #0
   133e0:	e6fb      	b.n	131da <follow_path+0xca>
		w = p[si++];					/* Get a character */
   133e2:	2301      	movs	r3, #1
	si = di = 0;
   133e4:	2400      	movs	r4, #0
   133e6:	e005      	b.n	133f4 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   133e8:	2301      	movs	r3, #1
	si = di = 0;
   133ea:	2400      	movs	r4, #0
   133ec:	e002      	b.n	133f4 <follow_path+0x2e4>
   133ee:	002c      	movs	r4, r5
   133f0:	465f      	mov	r7, fp
   133f2:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   133f4:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   133f6:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   133f8:	2c00      	cmp	r4, #0
   133fa:	d0df      	beq.n	133bc <follow_path+0x2ac>
   133fc:	4b09      	ldr	r3, [pc, #36]	; (13424 <follow_path+0x314>)
   133fe:	18e3      	adds	r3, r4, r3
   13400:	005b      	lsls	r3, r3, #1
   13402:	4453      	add	r3, sl
   13404:	e6f1      	b.n	131ea <follow_path+0xda>
   13406:	46c0      	nop			; (mov r8, r8)
   13408:	00012761 	.word	0x00012761
   1340c:	00013a9d 	.word	0x00013a9d
   13410:	00019cd5 	.word	0x00019cd5
   13414:	000120f9 	.word	0x000120f9
   13418:	00019ce1 	.word	0x00019ce1
   1341c:	00012ba1 	.word	0x00012ba1
   13420:	00019c54 	.word	0x00019c54
   13424:	7fffffff 	.word	0x7fffffff
   13428:	002c      	movs	r4, r5
   1342a:	465f      	mov	r7, fp
   1342c:	464d      	mov	r5, r9
   1342e:	e7e1      	b.n	133f4 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	2b0b      	cmp	r3, #11
   13434:	d100      	bne.n	13438 <follow_path+0x328>
   13436:	e77e      	b.n	13336 <follow_path+0x226>
			b <<= 2; continue;
   13438:	464b      	mov	r3, r9
   1343a:	009b      	lsls	r3, r3, #2
   1343c:	b2db      	uxtb	r3, r3
   1343e:	4699      	mov	r9, r3
   13440:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   13442:	220b      	movs	r2, #11
   13444:	9201      	str	r2, [sp, #4]
   13446:	3a03      	subs	r2, #3
   13448:	4693      	mov	fp, r2
   1344a:	e70e      	b.n	1326a <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   1344c:	2302      	movs	r3, #2
   1344e:	431e      	orrs	r6, r3
   13450:	e78e      	b.n	13370 <follow_path+0x260>
   13452:	46c0      	nop			; (mov r8, r8)

00013454 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   13454:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   13456:	2807      	cmp	r0, #7
   13458:	d901      	bls.n	1345e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   1345a:	0018      	movs	r0, r3
   1345c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   1345e:	0083      	lsls	r3, r0, #2
   13460:	4a07      	ldr	r2, [pc, #28]	; (13480 <f_mount+0x2c>)
   13462:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   13464:	2b00      	cmp	r3, #0
   13466:	d001      	beq.n	1346c <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   13468:	2200      	movs	r2, #0
   1346a:	701a      	strb	r2, [r3, #0]
	if (fs) {
   1346c:	2900      	cmp	r1, #0
   1346e:	d001      	beq.n	13474 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   13470:	2300      	movs	r3, #0
   13472:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   13474:	0080      	lsls	r0, r0, #2
   13476:	4b02      	ldr	r3, [pc, #8]	; (13480 <f_mount+0x2c>)
   13478:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   1347a:	2300      	movs	r3, #0
   1347c:	e7ed      	b.n	1345a <f_mount+0x6>
   1347e:	46c0      	nop			; (mov r8, r8)
   13480:	20000418 	.word	0x20000418

00013484 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   13484:	b5f0      	push	{r4, r5, r6, r7, lr}
   13486:	46c6      	mov	lr, r8
   13488:	b500      	push	{lr}
   1348a:	4c59      	ldr	r4, [pc, #356]	; (135f0 <f_open+0x16c>)
   1348c:	44a5      	add	sp, r4
   1348e:	0005      	movs	r5, r0
   13490:	9101      	str	r1, [sp, #4]
   13492:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   13494:	2300      	movs	r3, #0
   13496:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   13498:	261f      	movs	r6, #31
   1349a:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   1349c:	221e      	movs	r2, #30
   1349e:	403a      	ands	r2, r7
   134a0:	a985      	add	r1, sp, #532	; 0x214
   134a2:	a801      	add	r0, sp, #4
   134a4:	4b53      	ldr	r3, [pc, #332]	; (135f4 <f_open+0x170>)
   134a6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   134a8:	ab82      	add	r3, sp, #520	; 0x208
   134aa:	938b      	str	r3, [sp, #556]	; 0x22c
   134ac:	ab02      	add	r3, sp, #8
   134ae:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   134b0:	2800      	cmp	r0, #0
   134b2:	d006      	beq.n	134c2 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   134b4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   134b6:	231c      	movs	r3, #28
   134b8:	423b      	tst	r3, r7
   134ba:	d145      	bne.n	13548 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   134bc:	2800      	cmp	r0, #0
   134be:	d13d      	bne.n	1353c <f_open+0xb8>
   134c0:	e00c      	b.n	134dc <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   134c2:	9901      	ldr	r1, [sp, #4]
   134c4:	a885      	add	r0, sp, #532	; 0x214
   134c6:	4b4c      	ldr	r3, [pc, #304]	; (135f8 <f_open+0x174>)
   134c8:	4798      	blx	r3
	dir = dj.dir;
   134ca:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   134cc:	2800      	cmp	r0, #0
   134ce:	d1f2      	bne.n	134b6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   134d0:	2c00      	cmp	r4, #0
   134d2:	d100      	bne.n	134d6 <f_open+0x52>
   134d4:	e086      	b.n	135e4 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   134d6:	231c      	movs	r3, #28
   134d8:	423b      	tst	r3, r7
   134da:	d146      	bne.n	1356a <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   134dc:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   134de:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   134e0:	06da      	lsls	r2, r3, #27
   134e2:	d42b      	bmi.n	1353c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   134e4:	07ba      	lsls	r2, r7, #30
   134e6:	d502      	bpl.n	134ee <f_open+0x6a>
					res = FR_DENIED;
   134e8:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   134ea:	07db      	lsls	r3, r3, #31
   134ec:	d426      	bmi.n	1353c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   134ee:	073b      	lsls	r3, r7, #28
   134f0:	d501      	bpl.n	134f6 <f_open+0x72>
			mode |= FA__WRITTEN;
   134f2:	2320      	movs	r3, #32
   134f4:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   134f6:	9b85      	ldr	r3, [sp, #532]	; 0x214
   134f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134fa:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   134fc:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   134fe:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   13500:	7d62      	ldrb	r2, [r4, #21]
   13502:	0212      	lsls	r2, r2, #8
   13504:	7d23      	ldrb	r3, [r4, #20]
   13506:	4313      	orrs	r3, r2
   13508:	041b      	lsls	r3, r3, #16
   1350a:	7ee1      	ldrb	r1, [r4, #27]
   1350c:	0209      	lsls	r1, r1, #8
   1350e:	7ea2      	ldrb	r2, [r4, #26]
   13510:	430a      	orrs	r2, r1
   13512:	4313      	orrs	r3, r2
   13514:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   13516:	7fe3      	ldrb	r3, [r4, #31]
   13518:	061b      	lsls	r3, r3, #24
   1351a:	7fa2      	ldrb	r2, [r4, #30]
   1351c:	0412      	lsls	r2, r2, #16
   1351e:	4313      	orrs	r3, r2
   13520:	7f22      	ldrb	r2, [r4, #28]
   13522:	4313      	orrs	r3, r2
   13524:	7f62      	ldrb	r2, [r4, #29]
   13526:	0212      	lsls	r2, r2, #8
   13528:	4313      	orrs	r3, r2
   1352a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   1352c:	2300      	movs	r3, #0
   1352e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   13530:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   13532:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13534:	602b      	str	r3, [r5, #0]
   13536:	88db      	ldrh	r3, [r3, #6]
   13538:	80ab      	strh	r3, [r5, #4]
   1353a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   1353c:	238e      	movs	r3, #142	; 0x8e
   1353e:	009b      	lsls	r3, r3, #2
   13540:	449d      	add	sp, r3
   13542:	bc04      	pop	{r2}
   13544:	4690      	mov	r8, r2
   13546:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   13548:	2804      	cmp	r0, #4
   1354a:	d005      	beq.n	13558 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1354c:	2308      	movs	r3, #8
   1354e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   13550:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   13552:	2800      	cmp	r0, #0
   13554:	d0d3      	beq.n	134fe <f_open+0x7a>
   13556:	e7f1      	b.n	1353c <f_open+0xb8>
				res = dir_register(&dj);
   13558:	a885      	add	r0, sp, #532	; 0x214
   1355a:	4b28      	ldr	r3, [pc, #160]	; (135fc <f_open+0x178>)
   1355c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1355e:	2308      	movs	r3, #8
   13560:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   13562:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   13564:	2800      	cmp	r0, #0
   13566:	d008      	beq.n	1357a <f_open+0xf6>
   13568:	e7e8      	b.n	1353c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1356a:	7ae3      	ldrb	r3, [r4, #11]
   1356c:	2211      	movs	r2, #17
				res = FR_DENIED;
   1356e:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13570:	421a      	tst	r2, r3
   13572:	d1e3      	bne.n	1353c <f_open+0xb8>
					res = FR_EXIST;
   13574:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   13576:	077b      	lsls	r3, r7, #29
   13578:	d4e0      	bmi.n	1353c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1357a:	0733      	lsls	r3, r6, #28
   1357c:	d5bb      	bpl.n	134f6 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   1357e:	4b20      	ldr	r3, [pc, #128]	; (13600 <f_open+0x17c>)
   13580:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   13582:	73a0      	strb	r0, [r4, #14]
   13584:	0a03      	lsrs	r3, r0, #8
   13586:	73e3      	strb	r3, [r4, #15]
   13588:	0c03      	lsrs	r3, r0, #16
   1358a:	7423      	strb	r3, [r4, #16]
   1358c:	0e00      	lsrs	r0, r0, #24
   1358e:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   13590:	2300      	movs	r3, #0
   13592:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   13594:	7723      	strb	r3, [r4, #28]
   13596:	7763      	strb	r3, [r4, #29]
   13598:	77a3      	strb	r3, [r4, #30]
   1359a:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1359c:	7d62      	ldrb	r2, [r4, #21]
   1359e:	0212      	lsls	r2, r2, #8
   135a0:	7d27      	ldrb	r7, [r4, #20]
   135a2:	4317      	orrs	r7, r2
   135a4:	043f      	lsls	r7, r7, #16
   135a6:	7ee1      	ldrb	r1, [r4, #27]
   135a8:	0209      	lsls	r1, r1, #8
   135aa:	7ea2      	ldrb	r2, [r4, #26]
   135ac:	430a      	orrs	r2, r1
   135ae:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   135b0:	76a3      	strb	r3, [r4, #26]
   135b2:	76e3      	strb	r3, [r4, #27]
   135b4:	7523      	strb	r3, [r4, #20]
   135b6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   135b8:	9885      	ldr	r0, [sp, #532]	; 0x214
   135ba:	3301      	adds	r3, #1
   135bc:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   135be:	2f00      	cmp	r7, #0
   135c0:	d097      	beq.n	134f2 <f_open+0x6e>
				dw = dj.fs->winsect;
   135c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   135c4:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   135c6:	0039      	movs	r1, r7
   135c8:	4b0e      	ldr	r3, [pc, #56]	; (13604 <f_open+0x180>)
   135ca:	4798      	blx	r3
				if (res == FR_OK) {
   135cc:	2800      	cmp	r0, #0
   135ce:	d1b5      	bne.n	1353c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   135d0:	9885      	ldr	r0, [sp, #532]	; 0x214
   135d2:	3f01      	subs	r7, #1
   135d4:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   135d6:	4641      	mov	r1, r8
   135d8:	4b0b      	ldr	r3, [pc, #44]	; (13608 <f_open+0x184>)
   135da:	4798      	blx	r3
	if (res == FR_OK) {
   135dc:	2800      	cmp	r0, #0
   135de:	d100      	bne.n	135e2 <f_open+0x15e>
   135e0:	e787      	b.n	134f2 <f_open+0x6e>
   135e2:	e7ab      	b.n	1353c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   135e4:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   135e6:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   135e8:	423b      	tst	r3, r7
   135ea:	d0b2      	beq.n	13552 <f_open+0xce>
			res = FR_INVALID_NAME;
   135ec:	2006      	movs	r0, #6
   135ee:	e7ad      	b.n	1354c <f_open+0xc8>
   135f0:	fffffdc8 	.word	0xfffffdc8
   135f4:	00012215 	.word	0x00012215
   135f8:	00013111 	.word	0x00013111
   135fc:	00012d39 	.word	0x00012d39
   13600:	00012095 	.word	0x00012095
   13604:	00012a05 	.word	0x00012a05
   13608:	000125c5 	.word	0x000125c5

0001360c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   1360c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1360e:	46de      	mov	lr, fp
   13610:	4657      	mov	r7, sl
   13612:	464e      	mov	r6, r9
   13614:	4645      	mov	r5, r8
   13616:	b5e0      	push	{r5, r6, r7, lr}
   13618:	b083      	sub	sp, #12
   1361a:	0004      	movs	r4, r0
   1361c:	000f      	movs	r7, r1
   1361e:	0015      	movs	r5, r2
   13620:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
   13622:	2300      	movs	r3, #0
   13624:	464a      	mov	r2, r9
   13626:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   13628:	8881      	ldrh	r1, [r0, #4]
   1362a:	6800      	ldr	r0, [r0, #0]
   1362c:	4b5e      	ldr	r3, [pc, #376]	; (137a8 <f_read+0x19c>)
   1362e:	4798      	blx	r3
   13630:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   13632:	2800      	cmp	r0, #0
   13634:	d000      	beq.n	13638 <f_read+0x2c>
   13636:	e0af      	b.n	13798 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   13638:	79a3      	ldrb	r3, [r4, #6]
   1363a:	b25a      	sxtb	r2, r3
   1363c:	2a00      	cmp	r2, #0
   1363e:	da00      	bge.n	13642 <f_read+0x36>
   13640:	e0a8      	b.n	13794 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   13642:	07db      	lsls	r3, r3, #31
   13644:	d402      	bmi.n	1364c <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   13646:	2307      	movs	r3, #7
   13648:	9300      	str	r3, [sp, #0]
   1364a:	e0a5      	b.n	13798 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
   1364c:	68e3      	ldr	r3, [r4, #12]
   1364e:	68a2      	ldr	r2, [r4, #8]
   13650:	1a9e      	subs	r6, r3, r2
   13652:	42ae      	cmp	r6, r5
   13654:	d900      	bls.n	13658 <f_read+0x4c>
   13656:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
   13658:	2e00      	cmp	r6, #0
   1365a:	d153      	bne.n	13704 <f_read+0xf8>
   1365c:	e09c      	b.n	13798 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   1365e:	6961      	ldr	r1, [r4, #20]
   13660:	4b52      	ldr	r3, [pc, #328]	; (137ac <f_read+0x1a0>)
   13662:	4798      	blx	r3
   13664:	e05c      	b.n	13720 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   13666:	79a2      	ldrb	r2, [r4, #6]
   13668:	2380      	movs	r3, #128	; 0x80
   1366a:	425b      	negs	r3, r3
   1366c:	4313      	orrs	r3, r2
   1366e:	71a3      	strb	r3, [r4, #6]
   13670:	2302      	movs	r3, #2
   13672:	9300      	str	r3, [sp, #0]
   13674:	e090      	b.n	13798 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13676:	79a2      	ldrb	r2, [r4, #6]
   13678:	2380      	movs	r3, #128	; 0x80
   1367a:	425b      	negs	r3, r3
   1367c:	4313      	orrs	r3, r2
   1367e:	71a3      	strb	r3, [r4, #6]
   13680:	2301      	movs	r3, #1
   13682:	9300      	str	r3, [sp, #0]
   13684:	e088      	b.n	13798 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13686:	79a2      	ldrb	r2, [r4, #6]
   13688:	2380      	movs	r3, #128	; 0x80
   1368a:	425b      	negs	r3, r3
   1368c:	4313      	orrs	r3, r2
   1368e:	71a3      	strb	r3, [r4, #6]
   13690:	2302      	movs	r3, #2
   13692:	9300      	str	r3, [sp, #0]
   13694:	e080      	b.n	13798 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
   13696:	79a2      	ldrb	r2, [r4, #6]
   13698:	2380      	movs	r3, #128	; 0x80
   1369a:	425b      	negs	r3, r3
   1369c:	4313      	orrs	r3, r2
   1369e:	71a3      	strb	r3, [r4, #6]
   136a0:	2301      	movs	r3, #1
   136a2:	9300      	str	r3, [sp, #0]
   136a4:	e078      	b.n	13798 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   136a6:	3130      	adds	r1, #48	; 0x30
   136a8:	0240      	lsls	r0, r0, #9
   136aa:	1838      	adds	r0, r7, r0
   136ac:	2280      	movs	r2, #128	; 0x80
   136ae:	0092      	lsls	r2, r2, #2
   136b0:	4b3f      	ldr	r3, [pc, #252]	; (137b0 <f_read+0x1a4>)
   136b2:	4798      	blx	r3
   136b4:	e063      	b.n	1377e <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   136b6:	4643      	mov	r3, r8
   136b8:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   136ba:	68a3      	ldr	r3, [r4, #8]
   136bc:	05dd      	lsls	r5, r3, #23
   136be:	0ded      	lsrs	r5, r5, #23
   136c0:	2380      	movs	r3, #128	; 0x80
   136c2:	009b      	lsls	r3, r3, #2
   136c4:	1b5d      	subs	r5, r3, r5
   136c6:	42b5      	cmp	r5, r6
   136c8:	d900      	bls.n	136cc <f_read+0xc0>
   136ca:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   136cc:	69a1      	ldr	r1, [r4, #24]
   136ce:	6820      	ldr	r0, [r4, #0]
   136d0:	4b38      	ldr	r3, [pc, #224]	; (137b4 <f_read+0x1a8>)
   136d2:	4798      	blx	r3
   136d4:	2800      	cmp	r0, #0
   136d6:	d155      	bne.n	13784 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   136d8:	68a3      	ldr	r3, [r4, #8]
   136da:	05d9      	lsls	r1, r3, #23
   136dc:	0dc9      	lsrs	r1, r1, #23
   136de:	3130      	adds	r1, #48	; 0x30
   136e0:	6823      	ldr	r3, [r4, #0]
   136e2:	469c      	mov	ip, r3
   136e4:	4461      	add	r1, ip
   136e6:	002a      	movs	r2, r5
   136e8:	0038      	movs	r0, r7
   136ea:	4b31      	ldr	r3, [pc, #196]	; (137b0 <f_read+0x1a4>)
   136ec:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   136ee:	197f      	adds	r7, r7, r5
   136f0:	68a3      	ldr	r3, [r4, #8]
   136f2:	195b      	adds	r3, r3, r5
   136f4:	60a3      	str	r3, [r4, #8]
   136f6:	464b      	mov	r3, r9
   136f8:	681b      	ldr	r3, [r3, #0]
   136fa:	195b      	adds	r3, r3, r5
   136fc:	464a      	mov	r2, r9
   136fe:	6013      	str	r3, [r2, #0]
   13700:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
   13702:	d049      	beq.n	13798 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   13704:	68a3      	ldr	r3, [r4, #8]
   13706:	05da      	lsls	r2, r3, #23
   13708:	d1d7      	bne.n	136ba <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1370a:	6820      	ldr	r0, [r4, #0]
   1370c:	7882      	ldrb	r2, [r0, #2]
   1370e:	3a01      	subs	r2, #1
   13710:	0a5d      	lsrs	r5, r3, #9
   13712:	4015      	ands	r5, r2
   13714:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
   13716:	2d00      	cmp	r5, #0
   13718:	d107      	bne.n	1372a <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
   1371a:	2b00      	cmp	r3, #0
   1371c:	d19f      	bne.n	1365e <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
   1371e:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   13720:	2801      	cmp	r0, #1
   13722:	d9a0      	bls.n	13666 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13724:	1c43      	adds	r3, r0, #1
   13726:	d0a6      	beq.n	13676 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
   13728:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1372a:	6823      	ldr	r3, [r4, #0]
   1372c:	469a      	mov	sl, r3
   1372e:	6961      	ldr	r1, [r4, #20]
   13730:	0018      	movs	r0, r3
   13732:	4b21      	ldr	r3, [pc, #132]	; (137b8 <f_read+0x1ac>)
   13734:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13736:	2800      	cmp	r0, #0
   13738:	d0a5      	beq.n	13686 <f_read+0x7a>
			sect += csect;
   1373a:	4680      	mov	r8, r0
   1373c:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   1373e:	0a73      	lsrs	r3, r6, #9
   13740:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
   13742:	d0b8      	beq.n	136b6 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13744:	4653      	mov	r3, sl
   13746:	789b      	ldrb	r3, [r3, #2]
   13748:	465a      	mov	r2, fp
   1374a:	18aa      	adds	r2, r5, r2
   1374c:	429a      	cmp	r2, r3
   1374e:	d901      	bls.n	13754 <f_read+0x148>
					cc = fp->fs->csize - csect;
   13750:	1b5b      	subs	r3, r3, r5
   13752:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   13754:	465b      	mov	r3, fp
   13756:	466a      	mov	r2, sp
   13758:	71d3      	strb	r3, [r2, #7]
   1375a:	79d3      	ldrb	r3, [r2, #7]
   1375c:	4652      	mov	r2, sl
   1375e:	7850      	ldrb	r0, [r2, #1]
   13760:	4642      	mov	r2, r8
   13762:	0039      	movs	r1, r7
   13764:	4d15      	ldr	r5, [pc, #84]	; (137bc <f_read+0x1b0>)
   13766:	47a8      	blx	r5
   13768:	2800      	cmp	r0, #0
   1376a:	d194      	bne.n	13696 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   1376c:	6821      	ldr	r1, [r4, #0]
   1376e:	790b      	ldrb	r3, [r1, #4]
   13770:	2b00      	cmp	r3, #0
   13772:	d004      	beq.n	1377e <f_read+0x172>
   13774:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13776:	4642      	mov	r2, r8
   13778:	1a98      	subs	r0, r3, r2
   1377a:	4583      	cmp	fp, r0
   1377c:	d893      	bhi.n	136a6 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   1377e:	465b      	mov	r3, fp
   13780:	025d      	lsls	r5, r3, #9
				continue;
   13782:	e7b4      	b.n	136ee <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
   13784:	79a2      	ldrb	r2, [r4, #6]
   13786:	2380      	movs	r3, #128	; 0x80
   13788:	425b      	negs	r3, r3
   1378a:	4313      	orrs	r3, r2
   1378c:	71a3      	strb	r3, [r4, #6]
   1378e:	2301      	movs	r3, #1
   13790:	9300      	str	r3, [sp, #0]
   13792:	e001      	b.n	13798 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13794:	2302      	movs	r3, #2
   13796:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
   13798:	9800      	ldr	r0, [sp, #0]
   1379a:	b003      	add	sp, #12
   1379c:	bc3c      	pop	{r2, r3, r4, r5}
   1379e:	4690      	mov	r8, r2
   137a0:	4699      	mov	r9, r3
   137a2:	46a2      	mov	sl, r4
   137a4:	46ab      	mov	fp, r5
   137a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137a8:	00012141 	.word	0x00012141
   137ac:	00012665 	.word	0x00012665
   137b0:	000120e5 	.word	0x000120e5
   137b4:	000125c5 	.word	0x000125c5
   137b8:	0001210b 	.word	0x0001210b
   137bc:	00011f21 	.word	0x00011f21

000137c0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   137c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   137c2:	46de      	mov	lr, fp
   137c4:	4657      	mov	r7, sl
   137c6:	464e      	mov	r6, r9
   137c8:	4645      	mov	r5, r8
   137ca:	b5e0      	push	{r5, r6, r7, lr}
   137cc:	b083      	sub	sp, #12
   137ce:	0004      	movs	r4, r0
   137d0:	000d      	movs	r5, r1
   137d2:	0016      	movs	r6, r2
   137d4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   137d6:	2300      	movs	r3, #0
   137d8:	464a      	mov	r2, r9
   137da:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   137dc:	8881      	ldrh	r1, [r0, #4]
   137de:	6800      	ldr	r0, [r0, #0]
   137e0:	4b7f      	ldr	r3, [pc, #508]	; (139e0 <f_write+0x220>)
   137e2:	4798      	blx	r3
   137e4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   137e6:	2800      	cmp	r0, #0
   137e8:	d000      	beq.n	137ec <f_write+0x2c>
   137ea:	e0f1      	b.n	139d0 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   137ec:	79a3      	ldrb	r3, [r4, #6]
   137ee:	b25a      	sxtb	r2, r3
   137f0:	2a00      	cmp	r2, #0
   137f2:	da00      	bge.n	137f6 <f_write+0x36>
   137f4:	e0ea      	b.n	139cc <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   137f6:	079b      	lsls	r3, r3, #30
   137f8:	d402      	bmi.n	13800 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   137fa:	2307      	movs	r3, #7
   137fc:	9300      	str	r3, [sp, #0]
   137fe:	e0e7      	b.n	139d0 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   13800:	68e3      	ldr	r3, [r4, #12]
   13802:	199a      	adds	r2, r3, r6
   13804:	4293      	cmp	r3, r2
   13806:	d810      	bhi.n	1382a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   13808:	2e00      	cmp	r6, #0
   1380a:	d00e      	beq.n	1382a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1380c:	002f      	movs	r7, r5
   1380e:	e07b      	b.n	13908 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   13810:	2100      	movs	r1, #0
   13812:	4b74      	ldr	r3, [pc, #464]	; (139e4 <f_write+0x224>)
   13814:	4798      	blx	r3
   13816:	0003      	movs	r3, r0
   13818:	6120      	str	r0, [r4, #16]
   1381a:	e003      	b.n	13824 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1381c:	6961      	ldr	r1, [r4, #20]
   1381e:	4b71      	ldr	r3, [pc, #452]	; (139e4 <f_write+0x224>)
   13820:	4798      	blx	r3
   13822:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13824:	2b00      	cmp	r3, #0
   13826:	d000      	beq.n	1382a <f_write+0x6a>
   13828:	e080      	b.n	1392c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1382a:	68a3      	ldr	r3, [r4, #8]
   1382c:	68e2      	ldr	r2, [r4, #12]
   1382e:	4293      	cmp	r3, r2
   13830:	d900      	bls.n	13834 <f_write+0x74>
   13832:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   13834:	79a3      	ldrb	r3, [r4, #6]
   13836:	2220      	movs	r2, #32
   13838:	4313      	orrs	r3, r2
   1383a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1383c:	e0c8      	b.n	139d0 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1383e:	79a2      	ldrb	r2, [r4, #6]
   13840:	3b81      	subs	r3, #129	; 0x81
   13842:	4313      	orrs	r3, r2
   13844:	71a3      	strb	r3, [r4, #6]
   13846:	2302      	movs	r3, #2
   13848:	9300      	str	r3, [sp, #0]
   1384a:	e0c1      	b.n	139d0 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1384c:	79a2      	ldrb	r2, [r4, #6]
   1384e:	3b7f      	subs	r3, #127	; 0x7f
   13850:	4313      	orrs	r3, r2
   13852:	71a3      	strb	r3, [r4, #6]
   13854:	2301      	movs	r3, #1
   13856:	9300      	str	r3, [sp, #0]
   13858:	e0ba      	b.n	139d0 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1385a:	2100      	movs	r1, #0
   1385c:	4b62      	ldr	r3, [pc, #392]	; (139e8 <f_write+0x228>)
   1385e:	4798      	blx	r3
   13860:	2800      	cmp	r0, #0
   13862:	d06d      	beq.n	13940 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   13864:	79a2      	ldrb	r2, [r4, #6]
   13866:	2380      	movs	r3, #128	; 0x80
   13868:	425b      	negs	r3, r3
   1386a:	4313      	orrs	r3, r2
   1386c:	71a3      	strb	r3, [r4, #6]
   1386e:	2301      	movs	r3, #1
   13870:	9300      	str	r3, [sp, #0]
   13872:	e0ad      	b.n	139d0 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13874:	79a2      	ldrb	r2, [r4, #6]
   13876:	2380      	movs	r3, #128	; 0x80
   13878:	425b      	negs	r3, r3
   1387a:	4313      	orrs	r3, r2
   1387c:	71a3      	strb	r3, [r4, #6]
   1387e:	2302      	movs	r3, #2
   13880:	9300      	str	r3, [sp, #0]
   13882:	e0a5      	b.n	139d0 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   13884:	79a2      	ldrb	r2, [r4, #6]
   13886:	2380      	movs	r3, #128	; 0x80
   13888:	425b      	negs	r3, r3
   1388a:	4313      	orrs	r3, r2
   1388c:	71a3      	strb	r3, [r4, #6]
   1388e:	2301      	movs	r3, #1
   13890:	9300      	str	r3, [sp, #0]
   13892:	e09d      	b.n	139d0 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13894:	0240      	lsls	r0, r0, #9
   13896:	1839      	adds	r1, r7, r0
   13898:	3330      	adds	r3, #48	; 0x30
   1389a:	0018      	movs	r0, r3
   1389c:	2280      	movs	r2, #128	; 0x80
   1389e:	0092      	lsls	r2, r2, #2
   138a0:	4b52      	ldr	r3, [pc, #328]	; (139ec <f_write+0x22c>)
   138a2:	4798      	blx	r3
					fp->fs->wflag = 0;
   138a4:	2300      	movs	r3, #0
   138a6:	6822      	ldr	r2, [r4, #0]
   138a8:	7113      	strb	r3, [r2, #4]
   138aa:	e072      	b.n	13992 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   138ac:	68a3      	ldr	r3, [r4, #8]
   138ae:	68e2      	ldr	r2, [r4, #12]
   138b0:	4293      	cmp	r3, r2
   138b2:	d271      	bcs.n	13998 <f_write+0x1d8>
			fp->dsect = sect;
   138b4:	4643      	mov	r3, r8
   138b6:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   138b8:	68a3      	ldr	r3, [r4, #8]
   138ba:	05dd      	lsls	r5, r3, #23
   138bc:	0ded      	lsrs	r5, r5, #23
   138be:	2380      	movs	r3, #128	; 0x80
   138c0:	009b      	lsls	r3, r3, #2
   138c2:	1b5d      	subs	r5, r3, r5
   138c4:	42b5      	cmp	r5, r6
   138c6:	d900      	bls.n	138ca <f_write+0x10a>
   138c8:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   138ca:	69a1      	ldr	r1, [r4, #24]
   138cc:	6820      	ldr	r0, [r4, #0]
   138ce:	4b46      	ldr	r3, [pc, #280]	; (139e8 <f_write+0x228>)
   138d0:	4798      	blx	r3
   138d2:	2800      	cmp	r0, #0
   138d4:	d172      	bne.n	139bc <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   138d6:	68a3      	ldr	r3, [r4, #8]
   138d8:	05d8      	lsls	r0, r3, #23
   138da:	0dc0      	lsrs	r0, r0, #23
   138dc:	3030      	adds	r0, #48	; 0x30
   138de:	6823      	ldr	r3, [r4, #0]
   138e0:	469c      	mov	ip, r3
   138e2:	4460      	add	r0, ip
   138e4:	002a      	movs	r2, r5
   138e6:	0039      	movs	r1, r7
   138e8:	4b40      	ldr	r3, [pc, #256]	; (139ec <f_write+0x22c>)
   138ea:	4798      	blx	r3
		fp->fs->wflag = 1;
   138ec:	2301      	movs	r3, #1
   138ee:	6822      	ldr	r2, [r4, #0]
   138f0:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   138f2:	197f      	adds	r7, r7, r5
   138f4:	68a3      	ldr	r3, [r4, #8]
   138f6:	195b      	adds	r3, r3, r5
   138f8:	60a3      	str	r3, [r4, #8]
   138fa:	464b      	mov	r3, r9
   138fc:	681b      	ldr	r3, [r3, #0]
   138fe:	195b      	adds	r3, r3, r5
   13900:	464a      	mov	r2, r9
   13902:	6013      	str	r3, [r2, #0]
   13904:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   13906:	d090      	beq.n	1382a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   13908:	68a3      	ldr	r3, [r4, #8]
   1390a:	05da      	lsls	r2, r3, #23
   1390c:	d1d4      	bne.n	138b8 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1390e:	6820      	ldr	r0, [r4, #0]
   13910:	7882      	ldrb	r2, [r0, #2]
   13912:	3a01      	subs	r2, #1
   13914:	0a5d      	lsrs	r5, r3, #9
   13916:	4015      	ands	r5, r2
   13918:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   1391a:	2d00      	cmp	r5, #0
   1391c:	d10b      	bne.n	13936 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1391e:	2b00      	cmp	r3, #0
   13920:	d000      	beq.n	13924 <f_write+0x164>
   13922:	e77b      	b.n	1381c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   13924:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   13926:	2b00      	cmp	r3, #0
   13928:	d100      	bne.n	1392c <f_write+0x16c>
   1392a:	e771      	b.n	13810 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1392c:	2b01      	cmp	r3, #1
   1392e:	d086      	beq.n	1383e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13930:	1c5a      	adds	r2, r3, #1
   13932:	d08b      	beq.n	1384c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   13934:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   13936:	6820      	ldr	r0, [r4, #0]
   13938:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1393a:	69a2      	ldr	r2, [r4, #24]
   1393c:	4293      	cmp	r3, r2
   1393e:	d08c      	beq.n	1385a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13940:	6823      	ldr	r3, [r4, #0]
   13942:	469a      	mov	sl, r3
   13944:	6961      	ldr	r1, [r4, #20]
   13946:	0018      	movs	r0, r3
   13948:	4b29      	ldr	r3, [pc, #164]	; (139f0 <f_write+0x230>)
   1394a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1394c:	2800      	cmp	r0, #0
   1394e:	d091      	beq.n	13874 <f_write+0xb4>
			sect += csect;
   13950:	4680      	mov	r8, r0
   13952:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13954:	0a73      	lsrs	r3, r6, #9
   13956:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   13958:	d0a8      	beq.n	138ac <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1395a:	4653      	mov	r3, sl
   1395c:	789b      	ldrb	r3, [r3, #2]
   1395e:	465a      	mov	r2, fp
   13960:	18aa      	adds	r2, r5, r2
   13962:	429a      	cmp	r2, r3
   13964:	d901      	bls.n	1396a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   13966:	1b5b      	subs	r3, r3, r5
   13968:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1396a:	465b      	mov	r3, fp
   1396c:	466a      	mov	r2, sp
   1396e:	71d3      	strb	r3, [r2, #7]
   13970:	79d3      	ldrb	r3, [r2, #7]
   13972:	4652      	mov	r2, sl
   13974:	7850      	ldrb	r0, [r2, #1]
   13976:	4642      	mov	r2, r8
   13978:	0039      	movs	r1, r7
   1397a:	4d1e      	ldr	r5, [pc, #120]	; (139f4 <f_write+0x234>)
   1397c:	47a8      	blx	r5
   1397e:	2800      	cmp	r0, #0
   13980:	d000      	beq.n	13984 <f_write+0x1c4>
   13982:	e77f      	b.n	13884 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13984:	6823      	ldr	r3, [r4, #0]
   13986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13988:	4641      	mov	r1, r8
   1398a:	1a50      	subs	r0, r2, r1
   1398c:	4583      	cmp	fp, r0
   1398e:	d900      	bls.n	13992 <f_write+0x1d2>
   13990:	e780      	b.n	13894 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   13992:	465b      	mov	r3, fp
   13994:	025d      	lsls	r5, r3, #9
				continue;
   13996:	e7ac      	b.n	138f2 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13998:	2100      	movs	r1, #0
   1399a:	4650      	mov	r0, sl
   1399c:	4b12      	ldr	r3, [pc, #72]	; (139e8 <f_write+0x228>)
   1399e:	4798      	blx	r3
   139a0:	2800      	cmp	r0, #0
   139a2:	d103      	bne.n	139ac <f_write+0x1ec>
				fp->fs->winsect = sect;
   139a4:	6823      	ldr	r3, [r4, #0]
   139a6:	4642      	mov	r2, r8
   139a8:	62da      	str	r2, [r3, #44]	; 0x2c
   139aa:	e783      	b.n	138b4 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   139ac:	79a2      	ldrb	r2, [r4, #6]
   139ae:	2380      	movs	r3, #128	; 0x80
   139b0:	425b      	negs	r3, r3
   139b2:	4313      	orrs	r3, r2
   139b4:	71a3      	strb	r3, [r4, #6]
   139b6:	2301      	movs	r3, #1
   139b8:	9300      	str	r3, [sp, #0]
   139ba:	e009      	b.n	139d0 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   139bc:	79a2      	ldrb	r2, [r4, #6]
   139be:	2380      	movs	r3, #128	; 0x80
   139c0:	425b      	negs	r3, r3
   139c2:	4313      	orrs	r3, r2
   139c4:	71a3      	strb	r3, [r4, #6]
   139c6:	2301      	movs	r3, #1
   139c8:	9300      	str	r3, [sp, #0]
   139ca:	e001      	b.n	139d0 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   139cc:	2302      	movs	r3, #2
   139ce:	9300      	str	r3, [sp, #0]
}
   139d0:	9800      	ldr	r0, [sp, #0]
   139d2:	b003      	add	sp, #12
   139d4:	bc3c      	pop	{r2, r3, r4, r5}
   139d6:	4690      	mov	r8, r2
   139d8:	4699      	mov	r9, r3
   139da:	46a2      	mov	sl, r4
   139dc:	46ab      	mov	fp, r5
   139de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139e0:	00012141 	.word	0x00012141
   139e4:	00012941 	.word	0x00012941
   139e8:	000125c5 	.word	0x000125c5
   139ec:	000120e5 	.word	0x000120e5
   139f0:	0001210b 	.word	0x0001210b
   139f4:	00011fa5 	.word	0x00011fa5

000139f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   139f8:	b570      	push	{r4, r5, r6, lr}
   139fa:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   139fc:	8881      	ldrh	r1, [r0, #4]
   139fe:	6800      	ldr	r0, [r0, #0]
   13a00:	4b1c      	ldr	r3, [pc, #112]	; (13a74 <f_sync+0x7c>)
   13a02:	4798      	blx	r3
	if (res == FR_OK) {
   13a04:	2800      	cmp	r0, #0
   13a06:	d102      	bne.n	13a0e <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13a08:	79a3      	ldrb	r3, [r4, #6]
   13a0a:	069b      	lsls	r3, r3, #26
   13a0c:	d400      	bmi.n	13a10 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13a0e:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   13a10:	69e1      	ldr	r1, [r4, #28]
   13a12:	6820      	ldr	r0, [r4, #0]
   13a14:	4b18      	ldr	r3, [pc, #96]	; (13a78 <f_sync+0x80>)
   13a16:	4798      	blx	r3
			if (res == FR_OK) {
   13a18:	2800      	cmp	r0, #0
   13a1a:	d1f8      	bne.n	13a0e <f_sync+0x16>
				dir = fp->dir_ptr;
   13a1c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13a1e:	7aeb      	ldrb	r3, [r5, #11]
   13a20:	2220      	movs	r2, #32
   13a22:	4313      	orrs	r3, r2
   13a24:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13a26:	7b23      	ldrb	r3, [r4, #12]
   13a28:	772b      	strb	r3, [r5, #28]
   13a2a:	89a3      	ldrh	r3, [r4, #12]
   13a2c:	0a1b      	lsrs	r3, r3, #8
   13a2e:	776b      	strb	r3, [r5, #29]
   13a30:	89e3      	ldrh	r3, [r4, #14]
   13a32:	77ab      	strb	r3, [r5, #30]
   13a34:	7be3      	ldrb	r3, [r4, #15]
   13a36:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   13a38:	7c23      	ldrb	r3, [r4, #16]
   13a3a:	76ab      	strb	r3, [r5, #26]
   13a3c:	8a23      	ldrh	r3, [r4, #16]
   13a3e:	0a1b      	lsrs	r3, r3, #8
   13a40:	76eb      	strb	r3, [r5, #27]
   13a42:	8a63      	ldrh	r3, [r4, #18]
   13a44:	752b      	strb	r3, [r5, #20]
   13a46:	8a63      	ldrh	r3, [r4, #18]
   13a48:	0a1b      	lsrs	r3, r3, #8
   13a4a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   13a4c:	4b0b      	ldr	r3, [pc, #44]	; (13a7c <f_sync+0x84>)
   13a4e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   13a50:	75a8      	strb	r0, [r5, #22]
   13a52:	0a03      	lsrs	r3, r0, #8
   13a54:	75eb      	strb	r3, [r5, #23]
   13a56:	0c03      	lsrs	r3, r0, #16
   13a58:	762b      	strb	r3, [r5, #24]
   13a5a:	0e00      	lsrs	r0, r0, #24
   13a5c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   13a5e:	79a3      	ldrb	r3, [r4, #6]
   13a60:	2220      	movs	r2, #32
   13a62:	4393      	bics	r3, r2
   13a64:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   13a66:	2301      	movs	r3, #1
   13a68:	6822      	ldr	r2, [r4, #0]
   13a6a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   13a6c:	6820      	ldr	r0, [r4, #0]
   13a6e:	4b04      	ldr	r3, [pc, #16]	; (13a80 <f_sync+0x88>)
   13a70:	4798      	blx	r3
   13a72:	e7cc      	b.n	13a0e <f_sync+0x16>
   13a74:	00012141 	.word	0x00012141
   13a78:	000125c5 	.word	0x000125c5
   13a7c:	00012095 	.word	0x00012095
   13a80:	0001301d 	.word	0x0001301d

00013a84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   13a84:	b510      	push	{r4, lr}
   13a86:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   13a88:	4b03      	ldr	r3, [pc, #12]	; (13a98 <f_close+0x14>)
   13a8a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   13a8c:	2800      	cmp	r0, #0
   13a8e:	d101      	bne.n	13a94 <f_close+0x10>
   13a90:	2300      	movs	r3, #0
   13a92:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   13a94:	bd10      	pop	{r4, pc}
   13a96:	46c0      	nop			; (mov r8, r8)
   13a98:	000139f9 	.word	0x000139f9

00013a9c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13a9c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   13a9e:	287f      	cmp	r0, #127	; 0x7f
   13aa0:	d911      	bls.n	13ac6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   13aa2:	2900      	cmp	r1, #0
   13aa4:	d111      	bne.n	13aca <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   13aa6:	28c7      	cmp	r0, #199	; 0xc7
   13aa8:	d017      	beq.n	13ada <ff_convert+0x3e>
   13aaa:	4a0d      	ldr	r2, [pc, #52]	; (13ae0 <ff_convert+0x44>)
   13aac:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   13aae:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   13ab0:	8811      	ldrh	r1, [r2, #0]
   13ab2:	4281      	cmp	r1, r0
   13ab4:	d004      	beq.n	13ac0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   13ab6:	3301      	adds	r3, #1
   13ab8:	b29b      	uxth	r3, r3
   13aba:	3202      	adds	r2, #2
   13abc:	2b80      	cmp	r3, #128	; 0x80
   13abe:	d1f7      	bne.n	13ab0 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   13ac0:	3380      	adds	r3, #128	; 0x80
   13ac2:	20ff      	movs	r0, #255	; 0xff
   13ac4:	4003      	ands	r3, r0
		}
	}

	return c;
}
   13ac6:	0018      	movs	r0, r3
   13ac8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   13aca:	2300      	movs	r3, #0
   13acc:	28ff      	cmp	r0, #255	; 0xff
   13ace:	d8fa      	bhi.n	13ac6 <ff_convert+0x2a>
   13ad0:	3880      	subs	r0, #128	; 0x80
   13ad2:	0040      	lsls	r0, r0, #1
   13ad4:	4b02      	ldr	r3, [pc, #8]	; (13ae0 <ff_convert+0x44>)
   13ad6:	5ac3      	ldrh	r3, [r0, r3]
   13ad8:	e7f5      	b.n	13ac6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   13ada:	2300      	movs	r3, #0
   13adc:	e7f0      	b.n	13ac0 <ff_convert+0x24>
   13ade:	46c0      	nop			; (mov r8, r8)
   13ae0:	00019ce8 	.word	0x00019ce8

00013ae4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13ae4:	2861      	cmp	r0, #97	; 0x61
   13ae6:	d014      	beq.n	13b12 <ff_wtoupper+0x2e>
   13ae8:	4b0b      	ldr	r3, [pc, #44]	; (13b18 <ff_wtoupper+0x34>)
   13aea:	3304      	adds	r3, #4
   13aec:	2101      	movs	r1, #1
   13aee:	2262      	movs	r2, #98	; 0x62
   13af0:	4290      	cmp	r0, r2
   13af2:	d007      	beq.n	13b04 <ff_wtoupper+0x20>
   13af4:	3101      	adds	r1, #1
   13af6:	3302      	adds	r3, #2
   13af8:	1e9a      	subs	r2, r3, #2
   13afa:	8812      	ldrh	r2, [r2, #0]
   13afc:	2a00      	cmp	r2, #0
   13afe:	d1f7      	bne.n	13af0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   13b00:	0003      	movs	r3, r0
   13b02:	e004      	b.n	13b0e <ff_wtoupper+0x2a>
   13b04:	1e03      	subs	r3, r0, #0
   13b06:	d002      	beq.n	13b0e <ff_wtoupper+0x2a>
   13b08:	0049      	lsls	r1, r1, #1
   13b0a:	4b04      	ldr	r3, [pc, #16]	; (13b1c <ff_wtoupper+0x38>)
   13b0c:	5acb      	ldrh	r3, [r1, r3]
}
   13b0e:	0018      	movs	r0, r3
   13b10:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13b12:	2100      	movs	r1, #0
   13b14:	e7f8      	b.n	13b08 <ff_wtoupper+0x24>
   13b16:	46c0      	nop			; (mov r8, r8)
   13b18:	00019de8 	.word	0x00019de8
   13b1c:	00019fc8 	.word	0x00019fc8

00013b20 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   13b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b22:	46de      	mov	lr, fp
   13b24:	4657      	mov	r7, sl
   13b26:	464e      	mov	r6, r9
   13b28:	4645      	mov	r5, r8
   13b2a:	b5e0      	push	{r5, r6, r7, lr}
   13b2c:	b083      	sub	sp, #12
   13b2e:	0007      	movs	r7, r0
   13b30:	4688      	mov	r8, r1
   13b32:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   13b34:	2400      	movs	r4, #0
   13b36:	2900      	cmp	r1, #0
   13b38:	dd18      	ble.n	13b6c <sendPacket+0x4c>
   13b3a:	4b15      	ldr	r3, [pc, #84]	; (13b90 <sendPacket+0x70>)
   13b3c:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13b3e:	4b15      	ldr	r3, [pc, #84]	; (13b94 <sendPacket+0x74>)
   13b40:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   13b42:	9801      	ldr	r0, [sp, #4]
   13b44:	47d0      	blx	sl
   13b46:	2800      	cmp	r0, #0
   13b48:	d110      	bne.n	13b6c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13b4a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   13b4c:	68f3      	ldr	r3, [r6, #12]
   13b4e:	4699      	mov	r9, r3
   13b50:	693b      	ldr	r3, [r7, #16]
   13b52:	191d      	adds	r5, r3, r4
   13b54:	9801      	ldr	r0, [sp, #4]
   13b56:	47d8      	blx	fp
   13b58:	0003      	movs	r3, r0
   13b5a:	4642      	mov	r2, r8
   13b5c:	0029      	movs	r1, r5
   13b5e:	0030      	movs	r0, r6
   13b60:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   13b62:	2800      	cmp	r0, #0
   13b64:	db02      	blt.n	13b6c <sendPacket+0x4c>
            break;
        sent += rc;
   13b66:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   13b68:	45a0      	cmp	r8, r4
   13b6a:	dcea      	bgt.n	13b42 <sendPacket+0x22>
    }
    if (sent == length)
   13b6c:	45a0      	cmp	r8, r4
   13b6e:	d10c      	bne.n	13b8a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   13b70:	69b9      	ldr	r1, [r7, #24]
   13b72:	0038      	movs	r0, r7
   13b74:	3054      	adds	r0, #84	; 0x54
   13b76:	4b08      	ldr	r3, [pc, #32]	; (13b98 <sendPacket+0x78>)
   13b78:	4798      	blx	r3
        rc = SUCCESS;
   13b7a:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   13b7c:	b003      	add	sp, #12
   13b7e:	bc3c      	pop	{r2, r3, r4, r5}
   13b80:	4690      	mov	r8, r2
   13b82:	4699      	mov	r9, r3
   13b84:	46a2      	mov	sl, r4
   13b86:	46ab      	mov	fp, r5
   13b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   13b8a:	2001      	movs	r0, #1
   13b8c:	4240      	negs	r0, r0
    return rc;
   13b8e:	e7f5      	b.n	13b7c <sendPacket+0x5c>
   13b90:	0001449d 	.word	0x0001449d
   13b94:	000144d1 	.word	0x000144d1
   13b98:	000144bd 	.word	0x000144bd

00013b9c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13b9c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   13b9e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   13ba0:	2100      	movs	r1, #0
   13ba2:	6241      	str	r1, [r0, #36]	; 0x24
   13ba4:	62c1      	str	r1, [r0, #44]	; 0x2c
   13ba6:	6341      	str	r1, [r0, #52]	; 0x34
   13ba8:	63c1      	str	r1, [r0, #60]	; 0x3c
   13baa:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   13bac:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   13bae:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   13bb0:	9b02      	ldr	r3, [sp, #8]
   13bb2:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   13bb4:	9b03      	ldr	r3, [sp, #12]
   13bb6:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   13bb8:	9b04      	ldr	r3, [sp, #16]
   13bba:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   13bbc:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   13bbe:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   13bc0:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   13bc2:	2301      	movs	r3, #1
   13bc4:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   13bc6:	3054      	adds	r0, #84	; 0x54
   13bc8:	4b01      	ldr	r3, [pc, #4]	; (13bd0 <MQTTClientInit+0x34>)
   13bca:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   13bcc:	bd10      	pop	{r4, pc}
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	000144e5 	.word	0x000144e5

00013bd4 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   13bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bd6:	46de      	mov	lr, fp
   13bd8:	4657      	mov	r7, sl
   13bda:	464e      	mov	r6, r9
   13bdc:	4645      	mov	r5, r8
   13bde:	b5e0      	push	{r5, r6, r7, lr}
   13be0:	b085      	sub	sp, #20
   13be2:	4682      	mov	sl, r0
   13be4:	000f      	movs	r7, r1
   13be6:	4691      	mov	r9, r2
   13be8:	0004      	movs	r4, r0
   13bea:	3424      	adds	r4, #36	; 0x24
   13bec:	234c      	movs	r3, #76	; 0x4c
   13bee:	4453      	add	r3, sl
   13bf0:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   13bf2:	2301      	movs	r3, #1
   13bf4:	425b      	negs	r3, r3
   13bf6:	9301      	str	r3, [sp, #4]
   13bf8:	e056      	b.n	13ca8 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   13bfa:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   13bfc:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   13bfe:	687a      	ldr	r2, [r7, #4]
   13c00:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   13c02:	780a      	ldrb	r2, [r1, #0]
   13c04:	2a00      	cmp	r2, #0
   13c06:	d04a      	beq.n	13c9e <deliverMessage+0xca>
   13c08:	42b3      	cmp	r3, r6
   13c0a:	d24a      	bcs.n	13ca2 <deliverMessage+0xce>
   13c0c:	3101      	adds	r1, #1
   13c0e:	1e70      	subs	r0, r6, #1
   13c10:	e008      	b.n	13c24 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   13c12:	2a2f      	cmp	r2, #47	; 0x2f
   13c14:	d10f      	bne.n	13c36 <deliverMessage+0x62>
        curn++;
   13c16:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13c18:	780a      	ldrb	r2, [r1, #0]
   13c1a:	2a00      	cmp	r2, #0
   13c1c:	d03f      	beq.n	13c9e <deliverMessage+0xca>
   13c1e:	429e      	cmp	r6, r3
   13c20:	d93f      	bls.n	13ca2 <deliverMessage+0xce>
   13c22:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   13c24:	781d      	ldrb	r5, [r3, #0]
   13c26:	2d2f      	cmp	r5, #47	; 0x2f
   13c28:	d0f3      	beq.n	13c12 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   13c2a:	2a2b      	cmp	r2, #43	; 0x2b
   13c2c:	d008      	beq.n	13c40 <deliverMessage+0x6c>
   13c2e:	2a23      	cmp	r2, #35	; 0x23
   13c30:	d013      	beq.n	13c5a <deliverMessage+0x86>
   13c32:	4295      	cmp	r5, r2
   13c34:	d0ef      	beq.n	13c16 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   13c36:	429e      	cmp	r6, r3
   13c38:	d133      	bne.n	13ca2 <deliverMessage+0xce>
   13c3a:	2a00      	cmp	r2, #0
   13c3c:	d03d      	beq.n	13cba <deliverMessage+0xe6>
   13c3e:	e030      	b.n	13ca2 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   13c40:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13c42:	42ae      	cmp	r6, r5
   13c44:	d927      	bls.n	13c96 <deliverMessage+0xc2>
   13c46:	785a      	ldrb	r2, [r3, #1]
   13c48:	2a2f      	cmp	r2, #47	; 0x2f
   13c4a:	d01f      	beq.n	13c8c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   13c4c:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13c4e:	4283      	cmp	r3, r0
   13c50:	d0e1      	beq.n	13c16 <deliverMessage+0x42>
   13c52:	785a      	ldrb	r2, [r3, #1]
   13c54:	2a2f      	cmp	r2, #47	; 0x2f
   13c56:	d1f9      	bne.n	13c4c <deliverMessage+0x78>
   13c58:	e7dd      	b.n	13c16 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   13c5a:	1e73      	subs	r3, r6, #1
   13c5c:	e7db      	b.n	13c16 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13c5e:	9b01      	ldr	r3, [sp, #4]
   13c60:	3301      	adds	r3, #1
   13c62:	d007      	beq.n	13c74 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   13c64:	9801      	ldr	r0, [sp, #4]
   13c66:	b005      	add	sp, #20
   13c68:	bc3c      	pop	{r2, r3, r4, r5}
   13c6a:	4690      	mov	r8, r2
   13c6c:	4699      	mov	r9, r3
   13c6e:	46a2      	mov	sl, r4
   13c70:	46ab      	mov	fp, r5
   13c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13c74:	4653      	mov	r3, sl
   13c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13c78:	2b00      	cmp	r3, #0
   13c7a:	d0f3      	beq.n	13c64 <deliverMessage+0x90>
    md->topicName = aTopicName;
   13c7c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13c7e:	464a      	mov	r2, r9
   13c80:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   13c82:	a802      	add	r0, sp, #8
   13c84:	4798      	blx	r3
        rc = SUCCESS;
   13c86:	2300      	movs	r3, #0
   13c88:	9301      	str	r3, [sp, #4]
    return rc;
   13c8a:	e7eb      	b.n	13c64 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   13c8c:	780a      	ldrb	r2, [r1, #0]
   13c8e:	2a00      	cmp	r2, #0
   13c90:	d007      	beq.n	13ca2 <deliverMessage+0xce>
        curn++;
   13c92:	002b      	movs	r3, r5
   13c94:	e7c5      	b.n	13c22 <deliverMessage+0x4e>
   13c96:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13c98:	780a      	ldrb	r2, [r1, #0]
   13c9a:	2a00      	cmp	r2, #0
   13c9c:	d101      	bne.n	13ca2 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   13c9e:	429e      	cmp	r6, r3
   13ca0:	d00b      	beq.n	13cba <deliverMessage+0xe6>
   13ca2:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13ca4:	4544      	cmp	r4, r8
   13ca6:	d0da      	beq.n	13c5e <deliverMessage+0x8a>
   13ca8:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   13caa:	6821      	ldr	r1, [r4, #0]
   13cac:	2900      	cmp	r1, #0
   13cae:	d0f8      	beq.n	13ca2 <deliverMessage+0xce>
   13cb0:	0038      	movs	r0, r7
   13cb2:	4b08      	ldr	r3, [pc, #32]	; (13cd4 <deliverMessage+0x100>)
   13cb4:	4798      	blx	r3
   13cb6:	2800      	cmp	r0, #0
   13cb8:	d09f      	beq.n	13bfa <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   13cba:	465b      	mov	r3, fp
   13cbc:	685b      	ldr	r3, [r3, #4]
   13cbe:	2b00      	cmp	r3, #0
   13cc0:	d0ef      	beq.n	13ca2 <deliverMessage+0xce>
    md->topicName = aTopicName;
   13cc2:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13cc4:	464a      	mov	r2, r9
   13cc6:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   13cc8:	a802      	add	r0, sp, #8
   13cca:	4798      	blx	r3
                rc = SUCCESS;
   13ccc:	2300      	movs	r3, #0
   13cce:	9301      	str	r3, [sp, #4]
   13cd0:	e7e7      	b.n	13ca2 <deliverMessage+0xce>
   13cd2:	46c0      	nop			; (mov r8, r8)
   13cd4:	00014e15 	.word	0x00014e15

00013cd8 <keepalive>:


int keepalive(MQTTClient* c)
{
   13cd8:	b510      	push	{r4, lr}
   13cda:	b082      	sub	sp, #8
   13cdc:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   13cde:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   13ce0:	69a3      	ldr	r3, [r4, #24]
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d101      	bne.n	13cea <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   13ce6:	b002      	add	sp, #8
   13ce8:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   13cea:	0020      	movs	r0, r4
   13cec:	3054      	adds	r0, #84	; 0x54
   13cee:	4b14      	ldr	r3, [pc, #80]	; (13d40 <keepalive+0x68>)
   13cf0:	4798      	blx	r3
   13cf2:	2800      	cmp	r0, #0
   13cf4:	d01d      	beq.n	13d32 <keepalive+0x5a>
        if (!c->ping_outstanding)
   13cf6:	7f23      	ldrb	r3, [r4, #28]
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	d11d      	bne.n	13d38 <keepalive+0x60>
            TimerInit(&timer);
   13cfc:	4668      	mov	r0, sp
   13cfe:	4b11      	ldr	r3, [pc, #68]	; (13d44 <keepalive+0x6c>)
   13d00:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   13d02:	21fa      	movs	r1, #250	; 0xfa
   13d04:	0089      	lsls	r1, r1, #2
   13d06:	4668      	mov	r0, sp
   13d08:	4b0f      	ldr	r3, [pc, #60]	; (13d48 <keepalive+0x70>)
   13d0a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   13d0c:	68a1      	ldr	r1, [r4, #8]
   13d0e:	6920      	ldr	r0, [r4, #16]
   13d10:	4b0e      	ldr	r3, [pc, #56]	; (13d4c <keepalive+0x74>)
   13d12:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   13d14:	2800      	cmp	r0, #0
   13d16:	dd09      	ble.n	13d2c <keepalive+0x54>
   13d18:	466a      	mov	r2, sp
   13d1a:	0001      	movs	r1, r0
   13d1c:	0020      	movs	r0, r4
   13d1e:	4b0c      	ldr	r3, [pc, #48]	; (13d50 <keepalive+0x78>)
   13d20:	4798      	blx	r3
   13d22:	2800      	cmp	r0, #0
   13d24:	d1df      	bne.n	13ce6 <keepalive+0xe>
                c->ping_outstanding = 1;
   13d26:	2301      	movs	r3, #1
   13d28:	7723      	strb	r3, [r4, #28]
   13d2a:	e7dc      	b.n	13ce6 <keepalive+0xe>
    int rc = FAILURE;
   13d2c:	2001      	movs	r0, #1
   13d2e:	4240      	negs	r0, r0
   13d30:	e7d9      	b.n	13ce6 <keepalive+0xe>
   13d32:	2001      	movs	r0, #1
   13d34:	4240      	negs	r0, r0
   13d36:	e7d6      	b.n	13ce6 <keepalive+0xe>
   13d38:	2001      	movs	r0, #1
   13d3a:	4240      	negs	r0, r0
    return rc;
   13d3c:	e7d3      	b.n	13ce6 <keepalive+0xe>
   13d3e:	46c0      	nop			; (mov r8, r8)
   13d40:	0001449d 	.word	0x0001449d
   13d44:	000144e5 	.word	0x000144e5
   13d48:	000144ad 	.word	0x000144ad
   13d4c:	00014afd 	.word	0x00014afd
   13d50:	00013b21 	.word	0x00013b21

00013d54 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   13d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d56:	46de      	mov	lr, fp
   13d58:	464f      	mov	r7, r9
   13d5a:	4646      	mov	r6, r8
   13d5c:	b5c0      	push	{r6, r7, lr}
   13d5e:	b090      	sub	sp, #64	; 0x40
   13d60:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   13d62:	6d05      	ldr	r5, [r0, #80]	; 0x50
   13d64:	68ae      	ldr	r6, [r5, #8]
   13d66:	6947      	ldr	r7, [r0, #20]
   13d68:	9107      	str	r1, [sp, #28]
   13d6a:	0008      	movs	r0, r1
   13d6c:	4b65      	ldr	r3, [pc, #404]	; (13f04 <cycle+0x1b0>)
   13d6e:	4798      	blx	r3
   13d70:	0003      	movs	r3, r0
   13d72:	2201      	movs	r2, #1
   13d74:	0039      	movs	r1, r7
   13d76:	0028      	movs	r0, r5
   13d78:	47b0      	blx	r6
   13d7a:	0005      	movs	r5, r0
   13d7c:	2801      	cmp	r0, #1
   13d7e:	d000      	beq.n	13d82 <cycle+0x2e>
   13d80:	e0bd      	b.n	13efe <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   13d82:	9807      	ldr	r0, [sp, #28]
   13d84:	4b5f      	ldr	r3, [pc, #380]	; (13f04 <cycle+0x1b0>)
   13d86:	4798      	blx	r3
   13d88:	9006      	str	r0, [sp, #24]
   13d8a:	2604      	movs	r6, #4
    *value = 0;
   13d8c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   13d8e:	237f      	movs	r3, #127	; 0x7f
   13d90:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   13d92:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13d94:	6883      	ldr	r3, [r0, #8]
   13d96:	4698      	mov	r8, r3
   13d98:	9b06      	ldr	r3, [sp, #24]
   13d9a:	2201      	movs	r2, #1
   13d9c:	a90c      	add	r1, sp, #48	; 0x30
   13d9e:	47c0      	blx	r8
        if (rc != 1)
   13da0:	2801      	cmp	r0, #1
   13da2:	d10e      	bne.n	13dc2 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   13da4:	ab02      	add	r3, sp, #8
   13da6:	2228      	movs	r2, #40	; 0x28
   13da8:	189b      	adds	r3, r3, r2
   13daa:	781b      	ldrb	r3, [r3, #0]
   13dac:	465a      	mov	r2, fp
   13dae:	401a      	ands	r2, r3
   13db0:	436a      	muls	r2, r5
   13db2:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   13db4:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   13db6:	b25b      	sxtb	r3, r3
   13db8:	2b00      	cmp	r3, #0
   13dba:	da02      	bge.n	13dc2 <cycle+0x6e>
   13dbc:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13dbe:	2e00      	cmp	r6, #0
   13dc0:	d1e7      	bne.n	13d92 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13dc2:	6963      	ldr	r3, [r4, #20]
   13dc4:	1c58      	adds	r0, r3, #1
   13dc6:	0039      	movs	r1, r7
   13dc8:	4b4f      	ldr	r3, [pc, #316]	; (13f08 <cycle+0x1b4>)
   13dca:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13dcc:	2f00      	cmp	r7, #0
   13dce:	dd10      	ble.n	13df2 <cycle+0x9e>
   13dd0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13dd2:	68b3      	ldr	r3, [r6, #8]
   13dd4:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13dd6:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13dd8:	6963      	ldr	r3, [r4, #20]
   13dda:	181d      	adds	r5, r3, r0
   13ddc:	9807      	ldr	r0, [sp, #28]
   13dde:	4b49      	ldr	r3, [pc, #292]	; (13f04 <cycle+0x1b0>)
   13de0:	4798      	blx	r3
   13de2:	0003      	movs	r3, r0
   13de4:	003a      	movs	r2, r7
   13de6:	0029      	movs	r1, r5
   13de8:	0030      	movs	r0, r6
   13dea:	47c8      	blx	r9
   13dec:	42b8      	cmp	r0, r7
   13dee:	d000      	beq.n	13df2 <cycle+0x9e>
   13df0:	e085      	b.n	13efe <cycle+0x1aa>
    header.byte = c->readbuf[0];
   13df2:	6963      	ldr	r3, [r4, #20]
   13df4:	781d      	ldrb	r5, [r3, #0]
   13df6:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   13df8:	2d05      	cmp	r5, #5
   13dfa:	d051      	beq.n	13ea0 <cycle+0x14c>
   13dfc:	2d0d      	cmp	r5, #13
   13dfe:	d06e      	beq.n	13ede <cycle+0x18a>
        rc = SUCCESS;
   13e00:	2600      	movs	r6, #0
    switch (packet_type)
   13e02:	2d03      	cmp	r5, #3
   13e04:	d16e      	bne.n	13ee4 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13e06:	68e2      	ldr	r2, [r4, #12]
   13e08:	9204      	str	r2, [sp, #16]
   13e0a:	9303      	str	r3, [sp, #12]
   13e0c:	ab0f      	add	r3, sp, #60	; 0x3c
   13e0e:	9302      	str	r3, [sp, #8]
   13e10:	ab0e      	add	r3, sp, #56	; 0x38
   13e12:	9301      	str	r3, [sp, #4]
   13e14:	ab09      	add	r3, sp, #36	; 0x24
   13e16:	9300      	str	r3, [sp, #0]
   13e18:	ab0d      	add	r3, sp, #52	; 0x34
   13e1a:	2229      	movs	r2, #41	; 0x29
   13e1c:	a902      	add	r1, sp, #8
   13e1e:	468c      	mov	ip, r1
   13e20:	4462      	add	r2, ip
   13e22:	a908      	add	r1, sp, #32
   13e24:	202a      	movs	r0, #42	; 0x2a
   13e26:	4460      	add	r0, ip
   13e28:	4e38      	ldr	r6, [pc, #224]	; (13f0c <cycle+0x1b8>)
   13e2a:	47b0      	blx	r6
        rc = SUCCESS;
   13e2c:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13e2e:	2801      	cmp	r0, #1
   13e30:	d15b      	bne.n	13eea <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   13e32:	ae0c      	add	r6, sp, #48	; 0x30
   13e34:	ab02      	add	r3, sp, #8
   13e36:	7e1b      	ldrb	r3, [r3, #24]
   13e38:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   13e3a:	0032      	movs	r2, r6
   13e3c:	a909      	add	r1, sp, #36	; 0x24
   13e3e:	0020      	movs	r0, r4
   13e40:	4b33      	ldr	r3, [pc, #204]	; (13f10 <cycle+0x1bc>)
   13e42:	4798      	blx	r3
            if (msg.qos != QOS0)
   13e44:	7833      	ldrb	r3, [r6, #0]
   13e46:	2b00      	cmp	r3, #0
   13e48:	d028      	beq.n	13e9c <cycle+0x148>
            {
                if (msg.qos == QOS1)
   13e4a:	2b01      	cmp	r3, #1
   13e4c:	d004      	beq.n	13e58 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   13e4e:	2b02      	cmp	r3, #2
   13e50:	d016      	beq.n	13e80 <cycle+0x12c>
   13e52:	2601      	movs	r6, #1
   13e54:	4276      	negs	r6, r6
   13e56:	e048      	b.n	13eea <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   13e58:	ab0c      	add	r3, sp, #48	; 0x30
   13e5a:	889b      	ldrh	r3, [r3, #4]
   13e5c:	9300      	str	r3, [sp, #0]
   13e5e:	2300      	movs	r3, #0
   13e60:	2204      	movs	r2, #4
   13e62:	68a1      	ldr	r1, [r4, #8]
   13e64:	6920      	ldr	r0, [r4, #16]
   13e66:	4e2b      	ldr	r6, [pc, #172]	; (13f14 <cycle+0x1c0>)
   13e68:	47b0      	blx	r6
   13e6a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   13e6c:	2900      	cmp	r1, #0
   13e6e:	dd12      	ble.n	13e96 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   13e70:	9a07      	ldr	r2, [sp, #28]
   13e72:	0020      	movs	r0, r4
   13e74:	4b28      	ldr	r3, [pc, #160]	; (13f18 <cycle+0x1c4>)
   13e76:	4798      	blx	r3
   13e78:	0006      	movs	r6, r0
                if (rc == FAILURE)
   13e7a:	1c43      	adds	r3, r0, #1
   13e7c:	d132      	bne.n	13ee4 <cycle+0x190>
   13e7e:	e034      	b.n	13eea <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   13e80:	ab0c      	add	r3, sp, #48	; 0x30
   13e82:	889b      	ldrh	r3, [r3, #4]
   13e84:	9300      	str	r3, [sp, #0]
   13e86:	2300      	movs	r3, #0
   13e88:	2205      	movs	r2, #5
   13e8a:	68a1      	ldr	r1, [r4, #8]
   13e8c:	6920      	ldr	r0, [r4, #16]
   13e8e:	4e21      	ldr	r6, [pc, #132]	; (13f14 <cycle+0x1c0>)
   13e90:	47b0      	blx	r6
   13e92:	0001      	movs	r1, r0
   13e94:	e7ea      	b.n	13e6c <cycle+0x118>
   13e96:	2601      	movs	r6, #1
   13e98:	4276      	negs	r6, r6
   13e9a:	e026      	b.n	13eea <cycle+0x196>
        rc = SUCCESS;
   13e9c:	2600      	movs	r6, #0
   13e9e:	e021      	b.n	13ee4 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13ea0:	68e2      	ldr	r2, [r4, #12]
   13ea2:	9200      	str	r2, [sp, #0]
   13ea4:	aa0c      	add	r2, sp, #48	; 0x30
   13ea6:	a908      	add	r1, sp, #32
   13ea8:	a809      	add	r0, sp, #36	; 0x24
   13eaa:	4e1c      	ldr	r6, [pc, #112]	; (13f1c <cycle+0x1c8>)
   13eac:	47b0      	blx	r6
   13eae:	2801      	cmp	r0, #1
   13eb0:	d002      	beq.n	13eb8 <cycle+0x164>
   13eb2:	2601      	movs	r6, #1
   13eb4:	4276      	negs	r6, r6
   13eb6:	e01b      	b.n	13ef0 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   13eb8:	ab0c      	add	r3, sp, #48	; 0x30
   13eba:	881b      	ldrh	r3, [r3, #0]
   13ebc:	9300      	str	r3, [sp, #0]
   13ebe:	2300      	movs	r3, #0
   13ec0:	2206      	movs	r2, #6
   13ec2:	68a1      	ldr	r1, [r4, #8]
   13ec4:	6920      	ldr	r0, [r4, #16]
   13ec6:	4e13      	ldr	r6, [pc, #76]	; (13f14 <cycle+0x1c0>)
   13ec8:	47b0      	blx	r6
   13eca:	2800      	cmp	r0, #0
   13ecc:	ddf1      	ble.n	13eb2 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   13ece:	9a07      	ldr	r2, [sp, #28]
   13ed0:	0001      	movs	r1, r0
   13ed2:	0020      	movs	r0, r4
   13ed4:	4b10      	ldr	r3, [pc, #64]	; (13f18 <cycle+0x1c4>)
   13ed6:	4798      	blx	r3
   13ed8:	1e06      	subs	r6, r0, #0
   13eda:	d1ea      	bne.n	13eb2 <cycle+0x15e>
   13edc:	e002      	b.n	13ee4 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   13ede:	2300      	movs	r3, #0
   13ee0:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   13ee2:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   13ee4:	0020      	movs	r0, r4
   13ee6:	4b0e      	ldr	r3, [pc, #56]	; (13f20 <cycle+0x1cc>)
   13ee8:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   13eea:	2e00      	cmp	r6, #0
   13eec:	d100      	bne.n	13ef0 <cycle+0x19c>
   13eee:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   13ef0:	0030      	movs	r0, r6
   13ef2:	b010      	add	sp, #64	; 0x40
   13ef4:	bc1c      	pop	{r2, r3, r4}
   13ef6:	4690      	mov	r8, r2
   13ef8:	4699      	mov	r9, r3
   13efa:	46a3      	mov	fp, r4
   13efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13efe:	4d09      	ldr	r5, [pc, #36]	; (13f24 <cycle+0x1d0>)
        rc = SUCCESS;
   13f00:	2600      	movs	r6, #0
   13f02:	e7ef      	b.n	13ee4 <cycle+0x190>
   13f04:	000144d1 	.word	0x000144d1
   13f08:	00014c15 	.word	0x00014c15
   13f0c:	00014b0d 	.word	0x00014b0d
   13f10:	00013bd5 	.word	0x00013bd5
   13f14:	00014f49 	.word	0x00014f49
   13f18:	00013b21 	.word	0x00013b21
   13f1c:	00014ba5 	.word	0x00014ba5
   13f20:	00013cd9 	.word	0x00013cd9
   13f24:	0000ffff 	.word	0x0000ffff

00013f28 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   13f28:	b570      	push	{r4, r5, r6, lr}
   13f2a:	b082      	sub	sp, #8
   13f2c:	0005      	movs	r5, r0
   13f2e:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   13f30:	4668      	mov	r0, sp
   13f32:	4b0a      	ldr	r3, [pc, #40]	; (13f5c <MQTTYield+0x34>)
   13f34:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   13f36:	0021      	movs	r1, r4
   13f38:	4668      	mov	r0, sp
   13f3a:	4b09      	ldr	r3, [pc, #36]	; (13f60 <MQTTYield+0x38>)
   13f3c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   13f3e:	4c09      	ldr	r4, [pc, #36]	; (13f64 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   13f40:	4e09      	ldr	r6, [pc, #36]	; (13f68 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   13f42:	4669      	mov	r1, sp
   13f44:	0028      	movs	r0, r5
   13f46:	47a0      	blx	r4
   13f48:	1c43      	adds	r3, r0, #1
   13f4a:	d004      	beq.n	13f56 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   13f4c:	4668      	mov	r0, sp
   13f4e:	47b0      	blx	r6
   13f50:	2800      	cmp	r0, #0
   13f52:	d0f6      	beq.n	13f42 <MQTTYield+0x1a>
    int rc = SUCCESS;
   13f54:	2000      	movs	r0, #0
        
    return rc;
}
   13f56:	b002      	add	sp, #8
   13f58:	bd70      	pop	{r4, r5, r6, pc}
   13f5a:	46c0      	nop			; (mov r8, r8)
   13f5c:	000144e5 	.word	0x000144e5
   13f60:	000144ad 	.word	0x000144ad
   13f64:	00013d55 	.word	0x00013d55
   13f68:	0001449d 	.word	0x0001449d

00013f6c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   13f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f6e:	b083      	sub	sp, #12
   13f70:	9001      	str	r0, [sp, #4]
   13f72:	000e      	movs	r6, r1
   13f74:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   13f76:	2401      	movs	r4, #1
   13f78:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   13f7a:	4f08      	ldr	r7, [pc, #32]	; (13f9c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   13f7c:	4d08      	ldr	r5, [pc, #32]	; (13fa0 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   13f7e:	9800      	ldr	r0, [sp, #0]
   13f80:	47b8      	blx	r7
   13f82:	2800      	cmp	r0, #0
   13f84:	d106      	bne.n	13f94 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   13f86:	9900      	ldr	r1, [sp, #0]
   13f88:	9801      	ldr	r0, [sp, #4]
   13f8a:	47a8      	blx	r5
   13f8c:	0004      	movs	r4, r0
   13f8e:	42b0      	cmp	r0, r6
   13f90:	d1f5      	bne.n	13f7e <waitfor+0x12>
   13f92:	0034      	movs	r4, r6
    
    return rc;
}
   13f94:	0020      	movs	r0, r4
   13f96:	b003      	add	sp, #12
   13f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f9a:	46c0      	nop			; (mov r8, r8)
   13f9c:	0001449d 	.word	0x0001449d
   13fa0:	00013d55 	.word	0x00013d55

00013fa4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   13fa4:	b530      	push	{r4, r5, lr}
   13fa6:	b09b      	sub	sp, #108	; 0x6c
   13fa8:	0004      	movs	r4, r0
   13faa:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   13fac:	2258      	movs	r2, #88	; 0x58
   13fae:	4928      	ldr	r1, [pc, #160]	; (14050 <MQTTConnect+0xac>)
   13fb0:	a802      	add	r0, sp, #8
   13fb2:	4b28      	ldr	r3, [pc, #160]	; (14054 <MQTTConnect+0xb0>)
   13fb4:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   13fb6:	6a23      	ldr	r3, [r4, #32]
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d13f      	bne.n	1403c <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   13fbc:	a818      	add	r0, sp, #96	; 0x60
   13fbe:	4b26      	ldr	r3, [pc, #152]	; (14058 <MQTTConnect+0xb4>)
   13fc0:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   13fc2:	6861      	ldr	r1, [r4, #4]
   13fc4:	a818      	add	r0, sp, #96	; 0x60
   13fc6:	4b25      	ldr	r3, [pc, #148]	; (1405c <MQTTConnect+0xb8>)
   13fc8:	4798      	blx	r3

    if (options == 0)
   13fca:	2d00      	cmp	r5, #0
   13fcc:	d015      	beq.n	13ffa <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   13fce:	8b29      	ldrh	r1, [r5, #24]
   13fd0:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   13fd2:	0020      	movs	r0, r4
   13fd4:	3054      	adds	r0, #84	; 0x54
   13fd6:	4b22      	ldr	r3, [pc, #136]	; (14060 <MQTTConnect+0xbc>)
   13fd8:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   13fda:	002a      	movs	r2, r5
   13fdc:	68a1      	ldr	r1, [r4, #8]
   13fde:	6920      	ldr	r0, [r4, #16]
   13fe0:	4b20      	ldr	r3, [pc, #128]	; (14064 <MQTTConnect+0xc0>)
   13fe2:	4798      	blx	r3
   13fe4:	2800      	cmp	r0, #0
   13fe6:	dd2c      	ble.n	14042 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   13fe8:	aa18      	add	r2, sp, #96	; 0x60
   13fea:	0001      	movs	r1, r0
   13fec:	0020      	movs	r0, r4
   13fee:	4b1e      	ldr	r3, [pc, #120]	; (14068 <MQTTConnect+0xc4>)
   13ff0:	4798      	blx	r3
   13ff2:	2800      	cmp	r0, #0
   13ff4:	d003      	beq.n	13ffe <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   13ff6:	b01b      	add	sp, #108	; 0x6c
   13ff8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   13ffa:	ad02      	add	r5, sp, #8
   13ffc:	e7e7      	b.n	13fce <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   13ffe:	aa18      	add	r2, sp, #96	; 0x60
   14000:	2102      	movs	r1, #2
   14002:	0020      	movs	r0, r4
   14004:	4b19      	ldr	r3, [pc, #100]	; (1406c <MQTTConnect+0xc8>)
   14006:	4798      	blx	r3
   14008:	2802      	cmp	r0, #2
   1400a:	d11d      	bne.n	14048 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   1400c:	466b      	mov	r3, sp
   1400e:	1d99      	adds	r1, r3, #6
   14010:	23ff      	movs	r3, #255	; 0xff
   14012:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   14014:	466b      	mov	r3, sp
   14016:	1dd8      	adds	r0, r3, #7
   14018:	2300      	movs	r3, #0
   1401a:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1401c:	68e3      	ldr	r3, [r4, #12]
   1401e:	6962      	ldr	r2, [r4, #20]
   14020:	4d13      	ldr	r5, [pc, #76]	; (14070 <MQTTConnect+0xcc>)
   14022:	47a8      	blx	r5
   14024:	2801      	cmp	r0, #1
   14026:	d002      	beq.n	1402e <MQTTConnect+0x8a>
            rc = FAILURE;
   14028:	2001      	movs	r0, #1
   1402a:	4240      	negs	r0, r0
   1402c:	e7e3      	b.n	13ff6 <MQTTConnect+0x52>
            rc = connack_rc;
   1402e:	466b      	mov	r3, sp
   14030:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   14032:	2800      	cmp	r0, #0
   14034:	d1df      	bne.n	13ff6 <MQTTConnect+0x52>
        c->isconnected = 1;
   14036:	2301      	movs	r3, #1
   14038:	6223      	str	r3, [r4, #32]
    return rc;
   1403a:	e7dc      	b.n	13ff6 <MQTTConnect+0x52>
    int rc = FAILURE;
   1403c:	2001      	movs	r0, #1
   1403e:	4240      	negs	r0, r0
   14040:	e7d9      	b.n	13ff6 <MQTTConnect+0x52>
   14042:	2001      	movs	r0, #1
   14044:	4240      	negs	r0, r0
   14046:	e7d6      	b.n	13ff6 <MQTTConnect+0x52>
        rc = FAILURE;
   14048:	2001      	movs	r0, #1
   1404a:	4240      	negs	r0, r0
   1404c:	e7d3      	b.n	13ff6 <MQTTConnect+0x52>
   1404e:	46c0      	nop			; (mov r8, r8)
   14050:	0001a1a8 	.word	0x0001a1a8
   14054:	0001739d 	.word	0x0001739d
   14058:	000144e5 	.word	0x000144e5
   1405c:	000144ad 	.word	0x000144ad
   14060:	000144bd 	.word	0x000144bd
   14064:	00014919 	.word	0x00014919
   14068:	00013b21 	.word	0x00013b21
   1406c:	00013f6d 	.word	0x00013f6d
   14070:	00014a61 	.word	0x00014a61

00014074 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   14074:	b5f0      	push	{r4, r5, r6, r7, lr}
   14076:	b091      	sub	sp, #68	; 0x44
   14078:	0004      	movs	r4, r0
   1407a:	000f      	movs	r7, r1
   1407c:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   1407e:	2300      	movs	r3, #0
   14080:	930c      	str	r3, [sp, #48]	; 0x30
   14082:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   14084:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   14086:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   14088:	6a03      	ldr	r3, [r0, #32]
   1408a:	2b00      	cmp	r3, #0
   1408c:	d05c      	beq.n	14148 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   1408e:	a80e      	add	r0, sp, #56	; 0x38
   14090:	4b32      	ldr	r3, [pc, #200]	; (1415c <MQTTSubscribe+0xe8>)
   14092:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14094:	6861      	ldr	r1, [r4, #4]
   14096:	a80e      	add	r0, sp, #56	; 0x38
   14098:	4b31      	ldr	r3, [pc, #196]	; (14160 <MQTTSubscribe+0xec>)
   1409a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1409c:	6920      	ldr	r0, [r4, #16]
   1409e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   140a0:	6823      	ldr	r3, [r4, #0]
   140a2:	4a30      	ldr	r2, [pc, #192]	; (14164 <MQTTSubscribe+0xf0>)
   140a4:	4293      	cmp	r3, r2
   140a6:	d017      	beq.n	140d8 <MQTTSubscribe+0x64>
   140a8:	3301      	adds	r3, #1
   140aa:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   140ac:	b29b      	uxth	r3, r3
   140ae:	aa0a      	add	r2, sp, #40	; 0x28
   140b0:	9202      	str	r2, [sp, #8]
   140b2:	aa0b      	add	r2, sp, #44	; 0x2c
   140b4:	9201      	str	r2, [sp, #4]
   140b6:	2201      	movs	r2, #1
   140b8:	9200      	str	r2, [sp, #0]
   140ba:	2200      	movs	r2, #0
   140bc:	4e2a      	ldr	r6, [pc, #168]	; (14168 <MQTTSubscribe+0xf4>)
   140be:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   140c0:	2800      	cmp	r0, #0
   140c2:	dd44      	ble.n	1414e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   140c4:	aa0e      	add	r2, sp, #56	; 0x38
   140c6:	0001      	movs	r1, r0
   140c8:	0020      	movs	r0, r4
   140ca:	4b28      	ldr	r3, [pc, #160]	; (1416c <MQTTSubscribe+0xf8>)
   140cc:	4798      	blx	r3
   140ce:	1e06      	subs	r6, r0, #0
   140d0:	d004      	beq.n	140dc <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   140d2:	0030      	movs	r0, r6
   140d4:	b011      	add	sp, #68	; 0x44
   140d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   140d8:	2301      	movs	r3, #1
   140da:	e7e6      	b.n	140aa <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   140dc:	aa0e      	add	r2, sp, #56	; 0x38
   140de:	2109      	movs	r1, #9
   140e0:	0020      	movs	r0, r4
   140e2:	4b23      	ldr	r3, [pc, #140]	; (14170 <MQTTSubscribe+0xfc>)
   140e4:	4798      	blx	r3
   140e6:	2809      	cmp	r0, #9
   140e8:	d134      	bne.n	14154 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   140ea:	2300      	movs	r3, #0
   140ec:	9308      	str	r3, [sp, #32]
   140ee:	3b01      	subs	r3, #1
   140f0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   140f2:	68e3      	ldr	r3, [r4, #12]
   140f4:	9301      	str	r3, [sp, #4]
   140f6:	6963      	ldr	r3, [r4, #20]
   140f8:	9300      	str	r3, [sp, #0]
   140fa:	ab09      	add	r3, sp, #36	; 0x24
   140fc:	aa08      	add	r2, sp, #32
   140fe:	2101      	movs	r1, #1
   14100:	300d      	adds	r0, #13
   14102:	ad02      	add	r5, sp, #8
   14104:	46ac      	mov	ip, r5
   14106:	4460      	add	r0, ip
   14108:	4d1a      	ldr	r5, [pc, #104]	; (14174 <MQTTSubscribe+0x100>)
   1410a:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1410c:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1410e:	2801      	cmp	r0, #1
   14110:	d00e      	beq.n	14130 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   14112:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14114:	2b00      	cmp	r3, #0
   14116:	d010      	beq.n	1413a <MQTTSubscribe+0xc6>
   14118:	0022      	movs	r2, r4
   1411a:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1411c:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   1411e:	6810      	ldr	r0, [r2, #0]
   14120:	2800      	cmp	r0, #0
   14122:	d00b      	beq.n	1413c <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   14124:	3301      	adds	r3, #1
   14126:	3208      	adds	r2, #8
   14128:	2b05      	cmp	r3, #5
   1412a:	d1f8      	bne.n	1411e <MQTTSubscribe+0xaa>
   1412c:	000e      	movs	r6, r1
   1412e:	e7d0      	b.n	140d2 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   14130:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   14132:	2980      	cmp	r1, #128	; 0x80
   14134:	d1ed      	bne.n	14112 <MQTTSubscribe+0x9e>
   14136:	000e      	movs	r6, r1
   14138:	e7cb      	b.n	140d2 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   1413a:	0033      	movs	r3, r6
   1413c:	00db      	lsls	r3, r3, #3
   1413e:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   14140:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   14142:	9b05      	ldr	r3, [sp, #20]
   14144:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   14146:	e7c4      	b.n	140d2 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   14148:	2601      	movs	r6, #1
   1414a:	4276      	negs	r6, r6
   1414c:	e7c1      	b.n	140d2 <MQTTSubscribe+0x5e>
   1414e:	2601      	movs	r6, #1
   14150:	4276      	negs	r6, r6
   14152:	e7be      	b.n	140d2 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   14154:	2601      	movs	r6, #1
   14156:	4276      	negs	r6, r6
    return rc;
   14158:	e7bb      	b.n	140d2 <MQTTSubscribe+0x5e>
   1415a:	46c0      	nop			; (mov r8, r8)
   1415c:	000144e5 	.word	0x000144e5
   14160:	000144ad 	.word	0x000144ad
   14164:	0000ffff 	.word	0x0000ffff
   14168:	00014fe1 	.word	0x00014fe1
   1416c:	00013b21 	.word	0x00013b21
   14170:	00013f6d 	.word	0x00013f6d
   14174:	00015095 	.word	0x00015095

00014178 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   14178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1417a:	b08f      	sub	sp, #60	; 0x3c
   1417c:	0005      	movs	r5, r0
   1417e:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   14180:	2300      	movs	r3, #0
   14182:	930a      	str	r3, [sp, #40]	; 0x28
   14184:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   14186:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   14188:	6a03      	ldr	r3, [r0, #32]
   1418a:	2b00      	cmp	r3, #0
   1418c:	d062      	beq.n	14254 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   1418e:	a80c      	add	r0, sp, #48	; 0x30
   14190:	4b36      	ldr	r3, [pc, #216]	; (1426c <MQTTPublish+0xf4>)
   14192:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14194:	6869      	ldr	r1, [r5, #4]
   14196:	a80c      	add	r0, sp, #48	; 0x30
   14198:	4b35      	ldr	r3, [pc, #212]	; (14270 <MQTTPublish+0xf8>)
   1419a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1419c:	7823      	ldrb	r3, [r4, #0]
   1419e:	3b01      	subs	r3, #1
   141a0:	2b01      	cmp	r3, #1
   141a2:	d921      	bls.n	141e8 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   141a4:	7823      	ldrb	r3, [r4, #0]
   141a6:	68e2      	ldr	r2, [r4, #12]
   141a8:	9206      	str	r2, [sp, #24]
   141aa:	68a2      	ldr	r2, [r4, #8]
   141ac:	9205      	str	r2, [sp, #20]
   141ae:	aa09      	add	r2, sp, #36	; 0x24
   141b0:	a902      	add	r1, sp, #8
   141b2:	cac1      	ldmia	r2!, {r0, r6, r7}
   141b4:	c1c1      	stmia	r1!, {r0, r6, r7}
   141b6:	88a2      	ldrh	r2, [r4, #4]
   141b8:	9201      	str	r2, [sp, #4]
   141ba:	7862      	ldrb	r2, [r4, #1]
   141bc:	9200      	str	r2, [sp, #0]
   141be:	2200      	movs	r2, #0
   141c0:	68a9      	ldr	r1, [r5, #8]
   141c2:	6928      	ldr	r0, [r5, #16]
   141c4:	4e2b      	ldr	r6, [pc, #172]	; (14274 <MQTTPublish+0xfc>)
   141c6:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   141c8:	2800      	cmp	r0, #0
   141ca:	dd46      	ble.n	1425a <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   141cc:	aa0c      	add	r2, sp, #48	; 0x30
   141ce:	0001      	movs	r1, r0
   141d0:	0028      	movs	r0, r5
   141d2:	4b29      	ldr	r3, [pc, #164]	; (14278 <MQTTPublish+0x100>)
   141d4:	4798      	blx	r3
   141d6:	2800      	cmp	r0, #0
   141d8:	d104      	bne.n	141e4 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   141da:	7823      	ldrb	r3, [r4, #0]
   141dc:	2b01      	cmp	r3, #1
   141de:	d00d      	beq.n	141fc <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   141e0:	2b02      	cmp	r3, #2
   141e2:	d021      	beq.n	14228 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   141e4:	b00f      	add	sp, #60	; 0x3c
   141e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   141e8:	682b      	ldr	r3, [r5, #0]
   141ea:	4a24      	ldr	r2, [pc, #144]	; (1427c <MQTTPublish+0x104>)
   141ec:	4293      	cmp	r3, r2
   141ee:	d003      	beq.n	141f8 <MQTTPublish+0x80>
   141f0:	3301      	adds	r3, #1
   141f2:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   141f4:	80a3      	strh	r3, [r4, #4]
   141f6:	e7d5      	b.n	141a4 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   141f8:	2301      	movs	r3, #1
   141fa:	e7fa      	b.n	141f2 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   141fc:	aa0c      	add	r2, sp, #48	; 0x30
   141fe:	2104      	movs	r1, #4
   14200:	0028      	movs	r0, r5
   14202:	4b1f      	ldr	r3, [pc, #124]	; (14280 <MQTTPublish+0x108>)
   14204:	4798      	blx	r3
   14206:	2804      	cmp	r0, #4
   14208:	d12a      	bne.n	14260 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1420a:	696b      	ldr	r3, [r5, #20]
   1420c:	68ea      	ldr	r2, [r5, #12]
   1420e:	9200      	str	r2, [sp, #0]
   14210:	2222      	movs	r2, #34	; 0x22
   14212:	446a      	add	r2, sp
   14214:	a908      	add	r1, sp, #32
   14216:	301d      	adds	r0, #29
   14218:	4468      	add	r0, sp
   1421a:	4c1a      	ldr	r4, [pc, #104]	; (14284 <MQTTPublish+0x10c>)
   1421c:	47a0      	blx	r4
   1421e:	3801      	subs	r0, #1
   14220:	1e43      	subs	r3, r0, #1
   14222:	4198      	sbcs	r0, r3
   14224:	4240      	negs	r0, r0
   14226:	e7dd      	b.n	141e4 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   14228:	aa0c      	add	r2, sp, #48	; 0x30
   1422a:	2107      	movs	r1, #7
   1422c:	0028      	movs	r0, r5
   1422e:	4b14      	ldr	r3, [pc, #80]	; (14280 <MQTTPublish+0x108>)
   14230:	4798      	blx	r3
   14232:	2807      	cmp	r0, #7
   14234:	d117      	bne.n	14266 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   14236:	696b      	ldr	r3, [r5, #20]
   14238:	68ea      	ldr	r2, [r5, #12]
   1423a:	9200      	str	r2, [sp, #0]
   1423c:	2222      	movs	r2, #34	; 0x22
   1423e:	446a      	add	r2, sp
   14240:	a908      	add	r1, sp, #32
   14242:	301a      	adds	r0, #26
   14244:	4468      	add	r0, sp
   14246:	4c0f      	ldr	r4, [pc, #60]	; (14284 <MQTTPublish+0x10c>)
   14248:	47a0      	blx	r4
   1424a:	3801      	subs	r0, #1
   1424c:	1e43      	subs	r3, r0, #1
   1424e:	4198      	sbcs	r0, r3
   14250:	4240      	negs	r0, r0
   14252:	e7c7      	b.n	141e4 <MQTTPublish+0x6c>
    int rc = FAILURE;
   14254:	2001      	movs	r0, #1
   14256:	4240      	negs	r0, r0
   14258:	e7c4      	b.n	141e4 <MQTTPublish+0x6c>
   1425a:	2001      	movs	r0, #1
   1425c:	4240      	negs	r0, r0
   1425e:	e7c1      	b.n	141e4 <MQTTPublish+0x6c>
            rc = FAILURE;
   14260:	2001      	movs	r0, #1
   14262:	4240      	negs	r0, r0
   14264:	e7be      	b.n	141e4 <MQTTPublish+0x6c>
            rc = FAILURE;
   14266:	2001      	movs	r0, #1
   14268:	4240      	negs	r0, r0
    return rc;
   1426a:	e7bb      	b.n	141e4 <MQTTPublish+0x6c>
   1426c:	000144e5 	.word	0x000144e5
   14270:	000144ad 	.word	0x000144ad
   14274:	00014e81 	.word	0x00014e81
   14278:	00013b21 	.word	0x00013b21
   1427c:	0000ffff 	.word	0x0000ffff
   14280:	00013f6d 	.word	0x00013f6d
   14284:	00014ba5 	.word	0x00014ba5

00014288 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   14288:	b510      	push	{r4, lr}
   1428a:	b082      	sub	sp, #8
   1428c:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1428e:	4668      	mov	r0, sp
   14290:	4b0b      	ldr	r3, [pc, #44]	; (142c0 <MQTTDisconnect+0x38>)
   14292:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14294:	6861      	ldr	r1, [r4, #4]
   14296:	4668      	mov	r0, sp
   14298:	4b0a      	ldr	r3, [pc, #40]	; (142c4 <MQTTDisconnect+0x3c>)
   1429a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1429c:	68a1      	ldr	r1, [r4, #8]
   1429e:	6920      	ldr	r0, [r4, #16]
   142a0:	4b09      	ldr	r3, [pc, #36]	; (142c8 <MQTTDisconnect+0x40>)
   142a2:	4798      	blx	r3
    if (len > 0)
   142a4:	2800      	cmp	r0, #0
   142a6:	dd08      	ble.n	142ba <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   142a8:	466a      	mov	r2, sp
   142aa:	0001      	movs	r1, r0
   142ac:	0020      	movs	r0, r4
   142ae:	4b07      	ldr	r3, [pc, #28]	; (142cc <MQTTDisconnect+0x44>)
   142b0:	4798      	blx	r3
        
    c->isconnected = 0;
   142b2:	2300      	movs	r3, #0
   142b4:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   142b6:	b002      	add	sp, #8
   142b8:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   142ba:	2001      	movs	r0, #1
   142bc:	4240      	negs	r0, r0
   142be:	e7f8      	b.n	142b2 <MQTTDisconnect+0x2a>
   142c0:	000144e5 	.word	0x000144e5
   142c4:	000144ad 	.word	0x000144ad
   142c8:	00014aed 	.word	0x00014aed
   142cc:	00013b21 	.word	0x00013b21

000142d0 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   142d0:	b510      	push	{r4, lr}
   142d2:	0004      	movs	r4, r0
	close(n->socket);
   142d4:	2000      	movs	r0, #0
   142d6:	5620      	ldrsb	r0, [r4, r0]
   142d8:	4b04      	ldr	r3, [pc, #16]	; (142ec <WINC1500_disconnect+0x1c>)
   142da:	4798      	blx	r3
	n->socket=-1;
   142dc:	2301      	movs	r3, #1
   142de:	425b      	negs	r3, r3
   142e0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   142e2:	2200      	movs	r2, #0
   142e4:	4b02      	ldr	r3, [pc, #8]	; (142f0 <WINC1500_disconnect+0x20>)
   142e6:	701a      	strb	r2, [r3, #0]
}
   142e8:	bd10      	pop	{r4, pc}
   142ea:	46c0      	nop			; (mov r8, r8)
   142ec:	0000f56d 	.word	0x0000f56d
   142f0:	20000440 	.word	0x20000440

000142f4 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   142f4:	b570      	push	{r4, r5, r6, lr}
   142f6:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   142f8:	2200      	movs	r2, #0
   142fa:	4b0d      	ldr	r3, [pc, #52]	; (14330 <WINC1500_write+0x3c>)
   142fc:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   142fe:	b2b2      	uxth	r2, r6
   14300:	7800      	ldrb	r0, [r0, #0]
   14302:	b240      	sxtb	r0, r0
   14304:	2300      	movs	r3, #0
   14306:	4c0b      	ldr	r4, [pc, #44]	; (14334 <WINC1500_write+0x40>)
   14308:	47a0      	blx	r4
   1430a:	2800      	cmp	r0, #0
   1430c:	d10c      	bne.n	14328 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   1430e:	4b08      	ldr	r3, [pc, #32]	; (14330 <WINC1500_write+0x3c>)
   14310:	781b      	ldrb	r3, [r3, #0]
   14312:	2b00      	cmp	r3, #0
   14314:	d106      	bne.n	14324 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   14316:	4d08      	ldr	r5, [pc, #32]	; (14338 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   14318:	4c05      	ldr	r4, [pc, #20]	; (14330 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   1431a:	2000      	movs	r0, #0
   1431c:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   1431e:	7823      	ldrb	r3, [r4, #0]
   14320:	2b00      	cmp	r3, #0
   14322:	d0fa      	beq.n	1431a <WINC1500_write+0x26>
}
   14324:	0030      	movs	r0, r6
   14326:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   14328:	2601      	movs	r6, #1
   1432a:	4276      	negs	r6, r6
   1432c:	e7fa      	b.n	14324 <WINC1500_write+0x30>
   1432e:	46c0      	nop			; (mov r8, r8)
   14330:	20000443 	.word	0x20000443
   14334:	0000f441 	.word	0x0000f441
   14338:	0000d6a5 	.word	0x0000d6a5

0001433c <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1433c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1433e:	b083      	sub	sp, #12
   14340:	9101      	str	r1, [sp, #4]
   14342:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   14344:	2b00      	cmp	r3, #0
   14346:	d100      	bne.n	1434a <WINC1500_read+0xe>
   14348:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1434a:	4a22      	ldr	r2, [pc, #136]	; (143d4 <WINC1500_read+0x98>)
   1434c:	6812      	ldr	r2, [r2, #0]
   1434e:	2a00      	cmp	r2, #0
   14350:	d013      	beq.n	1437a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   14352:	4b20      	ldr	r3, [pc, #128]	; (143d4 <WINC1500_read+0x98>)
   14354:	681d      	ldr	r5, [r3, #0]
   14356:	42a5      	cmp	r5, r4
   14358:	db39      	blt.n	143ce <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1435a:	4e1f      	ldr	r6, [pc, #124]	; (143d8 <WINC1500_read+0x9c>)
   1435c:	6837      	ldr	r7, [r6, #0]
   1435e:	491f      	ldr	r1, [pc, #124]	; (143dc <WINC1500_read+0xa0>)
   14360:	19c9      	adds	r1, r1, r7
   14362:	0022      	movs	r2, r4
   14364:	9801      	ldr	r0, [sp, #4]
   14366:	4b1e      	ldr	r3, [pc, #120]	; (143e0 <WINC1500_read+0xa4>)
   14368:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1436a:	1b2d      	subs	r5, r5, r4
   1436c:	4b19      	ldr	r3, [pc, #100]	; (143d4 <WINC1500_read+0x98>)
   1436e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   14370:	193f      	adds	r7, r7, r4
   14372:	6037      	str	r7, [r6, #0]
  return len;
   14374:	0020      	movs	r0, r4
}
   14376:	b003      	add	sp, #12
   14378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   1437a:	2100      	movs	r1, #0
   1437c:	4a19      	ldr	r2, [pc, #100]	; (143e4 <WINC1500_read+0xa8>)
   1437e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   14380:	7800      	ldrb	r0, [r0, #0]
   14382:	b240      	sxtb	r0, r0
   14384:	2280      	movs	r2, #128	; 0x80
   14386:	0052      	lsls	r2, r2, #1
   14388:	4914      	ldr	r1, [pc, #80]	; (143dc <WINC1500_read+0xa0>)
   1438a:	4d17      	ldr	r5, [pc, #92]	; (143e8 <WINC1500_read+0xac>)
   1438c:	47a8      	blx	r5
   1438e:	2800      	cmp	r0, #0
   14390:	d11a      	bne.n	143c8 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   14392:	4b14      	ldr	r3, [pc, #80]	; (143e4 <WINC1500_read+0xa8>)
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	2b00      	cmp	r3, #0
   14398:	d106      	bne.n	143a8 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   1439a:	4f14      	ldr	r7, [pc, #80]	; (143ec <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   1439c:	4d11      	ldr	r5, [pc, #68]	; (143e4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   1439e:	2000      	movs	r0, #0
   143a0:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   143a2:	782b      	ldrb	r3, [r5, #0]
   143a4:	2b00      	cmp	r3, #0
   143a6:	d0fa      	beq.n	1439e <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   143a8:	4b11      	ldr	r3, [pc, #68]	; (143f0 <WINC1500_read+0xb4>)
   143aa:	6818      	ldr	r0, [r3, #0]
   143ac:	2800      	cmp	r0, #0
   143ae:	dd05      	ble.n	143bc <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   143b0:	4b08      	ldr	r3, [pc, #32]	; (143d4 <WINC1500_read+0x98>)
   143b2:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   143b4:	2200      	movs	r2, #0
   143b6:	4b08      	ldr	r3, [pc, #32]	; (143d8 <WINC1500_read+0x9c>)
   143b8:	601a      	str	r2, [r3, #0]
   143ba:	e7ca      	b.n	14352 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   143bc:	2300      	movs	r3, #0
   143be:	4a05      	ldr	r2, [pc, #20]	; (143d4 <WINC1500_read+0x98>)
   143c0:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   143c2:	4a05      	ldr	r2, [pc, #20]	; (143d8 <WINC1500_read+0x9c>)
   143c4:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   143c6:	e7d6      	b.n	14376 <WINC1500_read+0x3a>
		  return -1;
   143c8:	2001      	movs	r0, #1
   143ca:	4240      	negs	r0, r0
   143cc:	e7d3      	b.n	14376 <WINC1500_read+0x3a>
	  return -1;
   143ce:	2001      	movs	r0, #1
   143d0:	4240      	negs	r0, r0
   143d2:	e7d0      	b.n	14376 <WINC1500_read+0x3a>
   143d4:	20000550 	.word	0x20000550
   143d8:	20000554 	.word	0x20000554
   143dc:	20000444 	.word	0x20000444
   143e0:	0001739d 	.word	0x0001739d
   143e4:	20000442 	.word	0x20000442
   143e8:	0000f4d9 	.word	0x0000f4d9
   143ec:	0000d6a5 	.word	0x0000d6a5
   143f0:	20000548 	.word	0x20000548

000143f4 <dnsResolveCallback>:
{
   143f4:	b510      	push	{r4, lr}
   143f6:	0002      	movs	r2, r0
   143f8:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   143fa:	4b08      	ldr	r3, [pc, #32]	; (1441c <dnsResolveCallback+0x28>)
   143fc:	781b      	ldrb	r3, [r3, #0]
   143fe:	2b00      	cmp	r3, #0
   14400:	d10b      	bne.n	1441a <dnsResolveCallback+0x26>
   14402:	4b07      	ldr	r3, [pc, #28]	; (14420 <dnsResolveCallback+0x2c>)
   14404:	6818      	ldr	r0, [r3, #0]
   14406:	0011      	movs	r1, r2
   14408:	4b06      	ldr	r3, [pc, #24]	; (14424 <dnsResolveCallback+0x30>)
   1440a:	4798      	blx	r3
   1440c:	2800      	cmp	r0, #0
   1440e:	d104      	bne.n	1441a <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   14410:	4b05      	ldr	r3, [pc, #20]	; (14428 <dnsResolveCallback+0x34>)
   14412:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   14414:	2201      	movs	r2, #1
   14416:	4b01      	ldr	r3, [pc, #4]	; (1441c <dnsResolveCallback+0x28>)
   14418:	701a      	strb	r2, [r3, #0]
}
   1441a:	bd10      	pop	{r4, pc}
   1441c:	20000441 	.word	0x20000441
   14420:	2000054c 	.word	0x2000054c
   14424:	0001789d 	.word	0x0001789d
   14428:	20000544 	.word	0x20000544

0001442c <tcpClientSocketEventHandler>:
{
   1442c:	b530      	push	{r4, r5, lr}
   1442e:	4b12      	ldr	r3, [pc, #72]	; (14478 <tcpClientSocketEventHandler+0x4c>)
   14430:	24a8      	movs	r4, #168	; 0xa8
   14432:	00a4      	lsls	r4, r4, #2
   14434:	191d      	adds	r5, r3, r4
   14436:	e002      	b.n	1443e <tcpClientSocketEventHandler+0x12>
   14438:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1443a:	42ab      	cmp	r3, r5
   1443c:	d00b      	beq.n	14456 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1443e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   14440:	2c00      	cmp	r4, #0
   14442:	d0f9      	beq.n	14438 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   14444:	6a24      	ldr	r4, [r4, #32]
   14446:	4284      	cmp	r4, r0
   14448:	d1f6      	bne.n	14438 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   1444a:	2906      	cmp	r1, #6
   1444c:	d00c      	beq.n	14468 <tcpClientSocketEventHandler+0x3c>
   1444e:	2907      	cmp	r1, #7
   14450:	d006      	beq.n	14460 <tcpClientSocketEventHandler+0x34>
   14452:	2905      	cmp	r1, #5
   14454:	d000      	beq.n	14458 <tcpClientSocketEventHandler+0x2c>
}
   14456:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   14458:	2201      	movs	r2, #1
   1445a:	4b08      	ldr	r3, [pc, #32]	; (1447c <tcpClientSocketEventHandler+0x50>)
   1445c:	701a      	strb	r2, [r3, #0]
			break;
   1445e:	e7fa      	b.n	14456 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   14460:	2201      	movs	r2, #1
   14462:	4b07      	ldr	r3, [pc, #28]	; (14480 <tcpClientSocketEventHandler+0x54>)
   14464:	701a      	strb	r2, [r3, #0]
			break;
   14466:	e7f6      	b.n	14456 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   14468:	2304      	movs	r3, #4
   1446a:	5ed2      	ldrsh	r2, [r2, r3]
   1446c:	4b05      	ldr	r3, [pc, #20]	; (14484 <tcpClientSocketEventHandler+0x58>)
   1446e:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   14470:	2201      	movs	r2, #1
   14472:	4b05      	ldr	r3, [pc, #20]	; (14488 <tcpClientSocketEventHandler+0x5c>)
   14474:	701a      	strb	r2, [r3, #0]
}
   14476:	e7ee      	b.n	14456 <tcpClientSocketEventHandler+0x2a>
   14478:	20000558 	.word	0x20000558
   1447c:	20000440 	.word	0x20000440
   14480:	20000443 	.word	0x20000443
   14484:	20000548 	.word	0x20000548
   14488:	20000442 	.word	0x20000442

0001448c <SysTick_Handler>:
	MilliTimer++;
   1448c:	4a02      	ldr	r2, [pc, #8]	; (14498 <SysTick_Handler+0xc>)
   1448e:	6813      	ldr	r3, [r2, #0]
   14490:	3301      	adds	r3, #1
   14492:	6013      	str	r3, [r2, #0]
}
   14494:	4770      	bx	lr
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	2000043c 	.word	0x2000043c

0001449c <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   1449c:	6840      	ldr	r0, [r0, #4]
   1449e:	4b02      	ldr	r3, [pc, #8]	; (144a8 <TimerIsExpired+0xc>)
   144a0:	681b      	ldr	r3, [r3, #0]
   144a2:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   144a4:	0fc0      	lsrs	r0, r0, #31
}
   144a6:	4770      	bx	lr
   144a8:	2000043c 	.word	0x2000043c

000144ac <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   144ac:	4b02      	ldr	r3, [pc, #8]	; (144b8 <TimerCountdownMS+0xc>)
   144ae:	681b      	ldr	r3, [r3, #0]
   144b0:	1859      	adds	r1, r3, r1
   144b2:	6041      	str	r1, [r0, #4]
}
   144b4:	4770      	bx	lr
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	2000043c 	.word	0x2000043c

000144bc <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   144bc:	23fa      	movs	r3, #250	; 0xfa
   144be:	009b      	lsls	r3, r3, #2
   144c0:	4359      	muls	r1, r3
   144c2:	4b02      	ldr	r3, [pc, #8]	; (144cc <TimerCountdown+0x10>)
   144c4:	681b      	ldr	r3, [r3, #0]
   144c6:	18c9      	adds	r1, r1, r3
   144c8:	6041      	str	r1, [r0, #4]
}
   144ca:	4770      	bx	lr
   144cc:	2000043c 	.word	0x2000043c

000144d0 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   144d0:	6840      	ldr	r0, [r0, #4]
   144d2:	4b03      	ldr	r3, [pc, #12]	; (144e0 <TimerLeftMS+0x10>)
   144d4:	681b      	ldr	r3, [r3, #0]
   144d6:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   144d8:	43c3      	mvns	r3, r0
   144da:	17db      	asrs	r3, r3, #31
   144dc:	4018      	ands	r0, r3
}
   144de:	4770      	bx	lr
   144e0:	2000043c 	.word	0x2000043c

000144e4 <TimerInit>:
	timer->end_time = 0;
   144e4:	2300      	movs	r3, #0
   144e6:	6043      	str	r3, [r0, #4]
}
   144e8:	4770      	bx	lr
	...

000144ec <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   144ec:	2301      	movs	r3, #1
   144ee:	425b      	negs	r3, r3
   144f0:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   144f2:	4b03      	ldr	r3, [pc, #12]	; (14500 <NetworkInit+0x14>)
   144f4:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   144f6:	4b03      	ldr	r3, [pc, #12]	; (14504 <NetworkInit+0x18>)
   144f8:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   144fa:	4b03      	ldr	r3, [pc, #12]	; (14508 <NetworkInit+0x1c>)
   144fc:	6103      	str	r3, [r0, #16]
}
   144fe:	4770      	bx	lr
   14500:	0001433d 	.word	0x0001433d
   14504:	000142f5 	.word	0x000142f5
   14508:	000142d1 	.word	0x000142d1

0001450c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1450c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1450e:	b087      	sub	sp, #28
   14510:	0006      	movs	r6, r0
   14512:	0015      	movs	r5, r2
   14514:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   14516:	4c25      	ldr	r4, [pc, #148]	; (145ac <ConnectNetwork+0xa0>)
   14518:	2300      	movs	r3, #0
   1451a:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   1451c:	4b24      	ldr	r3, [pc, #144]	; (145b0 <ConnectNetwork+0xa4>)
   1451e:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   14520:	0008      	movs	r0, r1
   14522:	4b24      	ldr	r3, [pc, #144]	; (145b4 <ConnectNetwork+0xa8>)
   14524:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   14526:	7823      	ldrb	r3, [r4, #0]
   14528:	2b00      	cmp	r3, #0
   1452a:	d106      	bne.n	1453a <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   1452c:	4f22      	ldr	r7, [pc, #136]	; (145b8 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   1452e:	4c1f      	ldr	r4, [pc, #124]	; (145ac <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   14530:	2000      	movs	r0, #0
   14532:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   14534:	7823      	ldrb	r3, [r4, #0]
   14536:	2b00      	cmp	r3, #0
   14538:	d0fa      	beq.n	14530 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1453a:	4b20      	ldr	r3, [pc, #128]	; (145bc <ConnectNetwork+0xb0>)
   1453c:	681a      	ldr	r2, [r3, #0]
   1453e:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   14540:	2302      	movs	r3, #2
   14542:	a902      	add	r1, sp, #8
   14544:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   14546:	022b      	lsls	r3, r5, #8
   14548:	491d      	ldr	r1, [pc, #116]	; (145c0 <ConnectNetwork+0xb4>)
   1454a:	400b      	ands	r3, r1
   1454c:	b2ad      	uxth	r5, r5
   1454e:	0a2d      	lsrs	r5, r5, #8
   14550:	431d      	orrs	r5, r3
   14552:	ab02      	add	r3, sp, #8
   14554:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   14556:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   14558:	6833      	ldr	r3, [r6, #0]
   1455a:	2b00      	cmp	r3, #0
   1455c:	db16      	blt.n	1458c <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1455e:	6830      	ldr	r0, [r6, #0]
   14560:	1c43      	adds	r3, r0, #1
   14562:	d01b      	beq.n	1459c <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   14564:	b240      	sxtb	r0, r0
   14566:	2210      	movs	r2, #16
   14568:	a902      	add	r1, sp, #8
   1456a:	4b16      	ldr	r3, [pc, #88]	; (145c4 <ConnectNetwork+0xb8>)
   1456c:	4798      	blx	r3
   1456e:	2800      	cmp	r0, #0
   14570:	d119      	bne.n	145a6 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   14572:	2200      	movs	r2, #0
   14574:	4b14      	ldr	r3, [pc, #80]	; (145c8 <ConnectNetwork+0xbc>)
   14576:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   14578:	4d0f      	ldr	r5, [pc, #60]	; (145b8 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   1457a:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   1457c:	2000      	movs	r0, #0
   1457e:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   14580:	7823      	ldrb	r3, [r4, #0]
   14582:	2b00      	cmp	r3, #0
   14584:	d0fa      	beq.n	1457c <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   14586:	2000      	movs	r0, #0
   14588:	b007      	add	sp, #28
   1458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1458c:	466b      	mov	r3, sp
   1458e:	791a      	ldrb	r2, [r3, #4]
   14590:	2101      	movs	r1, #1
   14592:	2002      	movs	r0, #2
   14594:	4b0d      	ldr	r3, [pc, #52]	; (145cc <ConnectNetwork+0xc0>)
   14596:	4798      	blx	r3
   14598:	6030      	str	r0, [r6, #0]
   1459a:	e7e0      	b.n	1455e <ConnectNetwork+0x52>
   close(n->socket);
   1459c:	4b0c      	ldr	r3, [pc, #48]	; (145d0 <ConnectNetwork+0xc4>)
   1459e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   145a0:	2009      	movs	r0, #9
   145a2:	4240      	negs	r0, r0
   145a4:	e7f0      	b.n	14588 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   145a6:	2009      	movs	r0, #9
   145a8:	4240      	negs	r0, r0
   145aa:	e7ed      	b.n	14588 <ConnectNetwork+0x7c>
   145ac:	20000441 	.word	0x20000441
   145b0:	2000054c 	.word	0x2000054c
   145b4:	0000f675 	.word	0x0000f675
   145b8:	0000d6a5 	.word	0x0000d6a5
   145bc:	20000544 	.word	0x20000544
   145c0:	00ffff00 	.word	0x00ffff00
   145c4:	0000f3b1 	.word	0x0000f3b1
   145c8:	20000440 	.word	0x20000440
   145cc:	0000f22d 	.word	0x0000f22d
   145d0:	0000f56d 	.word	0x0000f56d

000145d4 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   145d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   145d6:	b085      	sub	sp, #20
   145d8:	0006      	movs	r6, r0
   145da:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   145dc:	2800      	cmp	r0, #0
   145de:	d03d      	beq.n	1465c <mqtt_init+0x88>
   145e0:	2900      	cmp	r1, #0
   145e2:	d03e      	beq.n	14662 <mqtt_init+0x8e>
   145e4:	690b      	ldr	r3, [r1, #16]
   145e6:	2b00      	cmp	r3, #0
   145e8:	d03e      	beq.n	14668 <mqtt_init+0x94>
   145ea:	688b      	ldr	r3, [r1, #8]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d03e      	beq.n	1466e <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   145f0:	888b      	ldrh	r3, [r1, #4]
   145f2:	27fa      	movs	r7, #250	; 0xfa
   145f4:	00bf      	lsls	r7, r7, #2
   145f6:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   145f8:	0004      	movs	r4, r0
   145fa:	3420      	adds	r4, #32
   145fc:	0020      	movs	r0, r4
   145fe:	4b1f      	ldr	r3, [pc, #124]	; (1467c <mqtt_init+0xa8>)
   14600:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   14602:	1d30      	adds	r0, r6, #4
   14604:	2218      	movs	r2, #24
   14606:	0029      	movs	r1, r5
   14608:	4b1d      	ldr	r3, [pc, #116]	; (14680 <mqtt_init+0xac>)
   1460a:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1460c:	4b1d      	ldr	r3, [pc, #116]	; (14684 <mqtt_init+0xb0>)
   1460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14610:	2b00      	cmp	r3, #0
   14612:	d01a      	beq.n	1464a <mqtt_init+0x76>
   14614:	4b1b      	ldr	r3, [pc, #108]	; (14684 <mqtt_init+0xb0>)
   14616:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14618:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1461a:	6819      	ldr	r1, [r3, #0]
   1461c:	2900      	cmp	r1, #0
   1461e:	d015      	beq.n	1464c <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14620:	3201      	adds	r2, #1
   14622:	3360      	adds	r3, #96	; 0x60
   14624:	2a07      	cmp	r2, #7
   14626:	d1f8      	bne.n	1461a <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   14628:	69f0      	ldr	r0, [r6, #28]
   1462a:	2800      	cmp	r0, #0
   1462c:	d022      	beq.n	14674 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1462e:	692b      	ldr	r3, [r5, #16]
   14630:	68ea      	ldr	r2, [r5, #12]
   14632:	9202      	str	r2, [sp, #8]
   14634:	68aa      	ldr	r2, [r5, #8]
   14636:	9201      	str	r2, [sp, #4]
   14638:	696a      	ldr	r2, [r5, #20]
   1463a:	9200      	str	r2, [sp, #0]
   1463c:	003a      	movs	r2, r7
   1463e:	0021      	movs	r1, r4
   14640:	4c11      	ldr	r4, [pc, #68]	; (14688 <mqtt_init+0xb4>)
   14642:	47a0      	blx	r4
		return SUCCESS;
   14644:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   14646:	b005      	add	sp, #20
   14648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1464a:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   1464c:	480d      	ldr	r0, [pc, #52]	; (14684 <mqtt_init+0xb0>)
   1464e:	0053      	lsls	r3, r2, #1
   14650:	1899      	adds	r1, r3, r2
   14652:	0149      	lsls	r1, r1, #5
   14654:	1841      	adds	r1, r0, r1
   14656:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   14658:	61f1      	str	r1, [r6, #28]
   1465a:	e7e5      	b.n	14628 <mqtt_init+0x54>
		return FAILURE;
   1465c:	2001      	movs	r0, #1
   1465e:	4240      	negs	r0, r0
   14660:	e7f1      	b.n	14646 <mqtt_init+0x72>
   14662:	2001      	movs	r0, #1
   14664:	4240      	negs	r0, r0
   14666:	e7ee      	b.n	14646 <mqtt_init+0x72>
   14668:	2001      	movs	r0, #1
   1466a:	4240      	negs	r0, r0
   1466c:	e7eb      	b.n	14646 <mqtt_init+0x72>
   1466e:	2001      	movs	r0, #1
   14670:	4240      	negs	r0, r0
   14672:	e7e8      	b.n	14646 <mqtt_init+0x72>
		return FAILURE;
   14674:	2001      	movs	r0, #1
   14676:	4240      	negs	r0, r0
   14678:	e7e5      	b.n	14646 <mqtt_init+0x72>
   1467a:	46c0      	nop			; (mov r8, r8)
   1467c:	000144ed 	.word	0x000144ed
   14680:	0001739d 	.word	0x0001739d
   14684:	20000558 	.word	0x20000558
   14688:	00013b9d 	.word	0x00013b9d

0001468c <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   1468c:	4b05      	ldr	r3, [pc, #20]	; (146a4 <mqtt_get_config_defaults+0x18>)
   1468e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   14690:	2300      	movs	r3, #0
   14692:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   14694:	223c      	movs	r2, #60	; 0x3c
   14696:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   14698:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   1469a:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   1469c:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   1469e:	6143      	str	r3, [r0, #20]
}
   146a0:	4770      	bx	lr
   146a2:	46c0      	nop			; (mov r8, r8)
   146a4:	0000075b 	.word	0x0000075b

000146a8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   146a8:	2800      	cmp	r0, #0
   146aa:	d002      	beq.n	146b2 <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   146ac:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   146ae:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   146b0:	4770      	bx	lr
		return FAILURE;
   146b2:	2001      	movs	r0, #1
   146b4:	4240      	negs	r0, r0
   146b6:	e7fb      	b.n	146b0 <mqtt_register_callback+0x8>

000146b8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   146b8:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   146ba:	4b01      	ldr	r3, [pc, #4]	; (146c0 <mqtt_socket_event_handler+0x8>)
   146bc:	4798      	blx	r3
}
   146be:	bd10      	pop	{r4, pc}
   146c0:	0001442d 	.word	0x0001442d

000146c4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   146c4:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   146c6:	4b01      	ldr	r3, [pc, #4]	; (146cc <mqtt_socket_resolve_handler+0x8>)
   146c8:	4798      	blx	r3
}
   146ca:	bd10      	pop	{r4, pc}
   146cc:	000143f5 	.word	0x000143f5

000146d0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   146d0:	b530      	push	{r4, r5, lr}
   146d2:	b083      	sub	sp, #12
   146d4:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   146d6:	7983      	ldrb	r3, [r0, #6]
   146d8:	8882      	ldrh	r2, [r0, #4]
   146da:	3020      	adds	r0, #32
   146dc:	4d06      	ldr	r5, [pc, #24]	; (146f8 <mqtt_connect+0x28>)
   146de:	47a8      	blx	r5
   146e0:	9001      	str	r0, [sp, #4]
	if(module->callback)
   146e2:	6823      	ldr	r3, [r4, #0]
   146e4:	2b00      	cmp	r3, #0
   146e6:	d003      	beq.n	146f0 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   146e8:	aa01      	add	r2, sp, #4
   146ea:	2100      	movs	r1, #0
   146ec:	0020      	movs	r0, r4
   146ee:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   146f0:	9801      	ldr	r0, [sp, #4]
   146f2:	b003      	add	sp, #12
   146f4:	bd30      	pop	{r4, r5, pc}
   146f6:	46c0      	nop			; (mov r8, r8)
   146f8:	0001450d 	.word	0x0001450d

000146fc <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   146fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   146fe:	46de      	mov	lr, fp
   14700:	4657      	mov	r7, sl
   14702:	464e      	mov	r6, r9
   14704:	b5c0      	push	{r6, r7, lr}
   14706:	b098      	sub	sp, #96	; 0x60
   14708:	0005      	movs	r5, r0
   1470a:	4689      	mov	r9, r1
   1470c:	4693      	mov	fp, r2
   1470e:	469a      	mov	sl, r3
   14710:	ab24      	add	r3, sp, #144	; 0x90
   14712:	781f      	ldrb	r7, [r3, #0]
   14714:	ab25      	add	r3, sp, #148	; 0x94
   14716:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   14718:	ac01      	add	r4, sp, #4
   1471a:	2258      	movs	r2, #88	; 0x58
   1471c:	491a      	ldr	r1, [pc, #104]	; (14788 <mqtt_connect_broker+0x8c>)
   1471e:	0020      	movs	r0, r4
   14720:	4b1a      	ldr	r3, [pc, #104]	; (1478c <mqtt_connect_broker+0x90>)
   14722:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   14724:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14726:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   14728:	465b      	mov	r3, fp
   1472a:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1472c:	4653      	mov	r3, sl
   1472e:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   14730:	464b      	mov	r3, r9
   14732:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   14734:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14736:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   14738:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1473a:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   1473c:	233c      	movs	r3, #60	; 0x3c
   1473e:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   14740:	3301      	adds	r3, #1
   14742:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   14744:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14746:	2b00      	cmp	r3, #0
   14748:	d005      	beq.n	14756 <mqtt_connect_broker+0x5a>
   1474a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1474c:	2b00      	cmp	r3, #0
   1474e:	d002      	beq.n	14756 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   14750:	2201      	movs	r2, #1
   14752:	ab01      	add	r3, sp, #4
   14754:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   14756:	a901      	add	r1, sp, #4
   14758:	69e8      	ldr	r0, [r5, #28]
   1475a:	4b0d      	ldr	r3, [pc, #52]	; (14790 <mqtt_connect_broker+0x94>)
   1475c:	4798      	blx	r3
   1475e:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   14760:	ab17      	add	r3, sp, #92	; 0x5c
   14762:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   14764:	682b      	ldr	r3, [r5, #0]
   14766:	2b00      	cmp	r3, #0
   14768:	d003      	beq.n	14772 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1476a:	aa17      	add	r2, sp, #92	; 0x5c
   1476c:	2101      	movs	r1, #1
   1476e:	0028      	movs	r0, r5
   14770:	4798      	blx	r3
	
	module->isConnected = true;
   14772:	2201      	movs	r2, #1
   14774:	2334      	movs	r3, #52	; 0x34
   14776:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   14778:	0020      	movs	r0, r4
   1477a:	b018      	add	sp, #96	; 0x60
   1477c:	bc1c      	pop	{r2, r3, r4}
   1477e:	4691      	mov	r9, r2
   14780:	469a      	mov	sl, r3
   14782:	46a3      	mov	fp, r4
   14784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14786:	46c0      	nop			; (mov r8, r8)
   14788:	0001a200 	.word	0x0001a200
   1478c:	0001739d 	.word	0x0001739d
   14790:	00013fa5 	.word	0x00013fa5

00014794 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   14794:	b530      	push	{r4, r5, lr}
   14796:	b083      	sub	sp, #12
   14798:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1479a:	69c0      	ldr	r0, [r0, #28]
   1479c:	4b08      	ldr	r3, [pc, #32]	; (147c0 <mqtt_disconnect+0x2c>)
   1479e:	4798      	blx	r3
   147a0:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   147a2:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   147a4:	6823      	ldr	r3, [r4, #0]
   147a6:	2b00      	cmp	r3, #0
   147a8:	d003      	beq.n	147b2 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   147aa:	aa01      	add	r2, sp, #4
   147ac:	2105      	movs	r1, #5
   147ae:	0020      	movs	r0, r4
   147b0:	4798      	blx	r3
	
	module->isConnected = false;
   147b2:	2200      	movs	r2, #0
   147b4:	2334      	movs	r3, #52	; 0x34
   147b6:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   147b8:	0028      	movs	r0, r5
   147ba:	b003      	add	sp, #12
   147bc:	bd30      	pop	{r4, r5, pc}
   147be:	46c0      	nop			; (mov r8, r8)
   147c0:	00014289 	.word	0x00014289

000147c4 <mqtt_deinit>:
{
   147c4:	b510      	push	{r4, lr}
   147c6:	1e04      	subs	r4, r0, #0
	if(module)
   147c8:	d022      	beq.n	14810 <mqtt_deinit+0x4c>
		if(module->isConnected)
   147ca:	2334      	movs	r3, #52	; 0x34
   147cc:	5cc3      	ldrb	r3, [r0, r3]
   147ce:	2b00      	cmp	r3, #0
   147d0:	d10f      	bne.n	147f2 <mqtt_deinit+0x2e>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   147d2:	4b11      	ldr	r3, [pc, #68]	; (14818 <mqtt_deinit+0x54>)
   147d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   147d6:	429c      	cmp	r4, r3
   147d8:	d00f      	beq.n	147fa <mqtt_deinit+0x36>
   147da:	4b0f      	ldr	r3, [pc, #60]	; (14818 <mqtt_deinit+0x54>)
   147dc:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   147de:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == module)
   147e0:	6819      	ldr	r1, [r3, #0]
   147e2:	428c      	cmp	r4, r1
   147e4:	d00a      	beq.n	147fc <mqtt_deinit+0x38>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   147e6:	3201      	adds	r2, #1
   147e8:	3360      	adds	r3, #96	; 0x60
   147ea:	2a07      	cmp	r2, #7
   147ec:	d1f8      	bne.n	147e0 <mqtt_deinit+0x1c>
		return SUCCESS;
   147ee:	2000      	movs	r0, #0
}
   147f0:	bd10      	pop	{r4, pc}
			mqtt_disconnect(module, 0);
   147f2:	2100      	movs	r1, #0
   147f4:	4b09      	ldr	r3, [pc, #36]	; (1481c <mqtt_deinit+0x58>)
   147f6:	4798      	blx	r3
   147f8:	e7eb      	b.n	147d2 <mqtt_deinit+0xe>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   147fa:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = NULL;
   147fc:	0053      	lsls	r3, r2, #1
   147fe:	189a      	adds	r2, r3, r2
   14800:	0152      	lsls	r2, r2, #5
   14802:	4b05      	ldr	r3, [pc, #20]	; (14818 <mqtt_deinit+0x54>)
   14804:	189a      	adds	r2, r3, r2
   14806:	2300      	movs	r3, #0
   14808:	65d3      	str	r3, [r2, #92]	; 0x5c
			module->client = NULL;
   1480a:	61e3      	str	r3, [r4, #28]
		return SUCCESS;
   1480c:	2000      	movs	r0, #0
   1480e:	e7ef      	b.n	147f0 <mqtt_deinit+0x2c>
		return FAILURE;
   14810:	2001      	movs	r0, #1
   14812:	4240      	negs	r0, r0
   14814:	e7ec      	b.n	147f0 <mqtt_deinit+0x2c>
   14816:	46c0      	nop			; (mov r8, r8)
   14818:	20000558 	.word	0x20000558
   1481c:	00014795 	.word	0x00014795

00014820 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   14820:	b570      	push	{r4, r5, r6, lr}
   14822:	b084      	sub	sp, #16
   14824:	0004      	movs	r4, r0
   14826:	a808      	add	r0, sp, #32
   14828:	7805      	ldrb	r5, [r0, #0]
   1482a:	a809      	add	r0, sp, #36	; 0x24
   1482c:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1482e:	466e      	mov	r6, sp
   14830:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   14832:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   14834:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   14836:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   14838:	466a      	mov	r2, sp
   1483a:	69e0      	ldr	r0, [r4, #28]
   1483c:	4b06      	ldr	r3, [pc, #24]	; (14858 <mqtt_publish+0x38>)
   1483e:	4798      	blx	r3
   14840:	0005      	movs	r5, r0
	
	if(module->callback)
   14842:	6823      	ldr	r3, [r4, #0]
   14844:	2b00      	cmp	r3, #0
   14846:	d003      	beq.n	14850 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   14848:	2200      	movs	r2, #0
   1484a:	2102      	movs	r1, #2
   1484c:	0020      	movs	r0, r4
   1484e:	4798      	blx	r3
	
	return rc;
}
   14850:	0028      	movs	r0, r5
   14852:	b004      	add	sp, #16
   14854:	bd70      	pop	{r4, r5, r6, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	00014179 	.word	0x00014179

0001485c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1485c:	b570      	push	{r4, r5, r6, lr}
   1485e:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   14860:	69c0      	ldr	r0, [r0, #28]
   14862:	4d06      	ldr	r5, [pc, #24]	; (1487c <mqtt_subscribe+0x20>)
   14864:	47a8      	blx	r5
   14866:	0005      	movs	r5, r0
	
	if(module->callback)
   14868:	6823      	ldr	r3, [r4, #0]
   1486a:	2b00      	cmp	r3, #0
   1486c:	d003      	beq.n	14876 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1486e:	2200      	movs	r2, #0
   14870:	2103      	movs	r1, #3
   14872:	0020      	movs	r0, r4
   14874:	4798      	blx	r3
	
	return rc;
}
   14876:	0028      	movs	r0, r5
   14878:	bd70      	pop	{r4, r5, r6, pc}
   1487a:	46c0      	nop			; (mov r8, r8)
   1487c:	00014075 	.word	0x00014075

00014880 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   14880:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   14882:	69c0      	ldr	r0, [r0, #28]
   14884:	4b01      	ldr	r3, [pc, #4]	; (1488c <mqtt_yield+0xc>)
   14886:	4798      	blx	r3
   14888:	bd10      	pop	{r4, pc}
   1488a:	46c0      	nop			; (mov r8, r8)
   1488c:	00013f29 	.word	0x00013f29

00014890 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   14890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14892:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   14894:	7a03      	ldrb	r3, [r0, #8]
   14896:	2b03      	cmp	r3, #3
   14898:	d024      	beq.n	148e4 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   1489a:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   1489c:	2b04      	cmp	r3, #4
   1489e:	d01f      	beq.n	148e0 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   148a0:	68e0      	ldr	r0, [r4, #12]
   148a2:	6921      	ldr	r1, [r4, #16]
   148a4:	6962      	ldr	r2, [r4, #20]
   148a6:	4b1b      	ldr	r3, [pc, #108]	; (14914 <MQTTSerialize_connectLength+0x84>)
   148a8:	4798      	blx	r3
   148aa:	1c85      	adds	r5, r0, #2
   148ac:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   148ae:	7ee3      	ldrb	r3, [r4, #27]
   148b0:	2b00      	cmp	r3, #0
   148b2:	d119      	bne.n	148e8 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   148b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   148b6:	2b00      	cmp	r3, #0
   148b8:	d024      	beq.n	14904 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   148ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
   148bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   148be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   148c0:	4b14      	ldr	r3, [pc, #80]	; (14914 <MQTTSerialize_connectLength+0x84>)
   148c2:	4798      	blx	r3
   148c4:	3002      	adds	r0, #2
   148c6:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   148c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   148ca:	2b00      	cmp	r3, #0
   148cc:	d01e      	beq.n	1490c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   148ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   148d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   148d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   148d4:	4b0f      	ldr	r3, [pc, #60]	; (14914 <MQTTSerialize_connectLength+0x84>)
   148d6:	4798      	blx	r3
   148d8:	3002      	adds	r0, #2
   148da:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   148dc:	0028      	movs	r0, r5
   148de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   148e0:	360a      	adds	r6, #10
   148e2:	e7dd      	b.n	148a0 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   148e4:	260c      	movs	r6, #12
   148e6:	e7db      	b.n	148a0 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   148e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   148ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   148ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   148ee:	4f09      	ldr	r7, [pc, #36]	; (14914 <MQTTSerialize_connectLength+0x84>)
   148f0:	47b8      	blx	r7
   148f2:	0006      	movs	r6, r0
   148f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   148f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   148f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   148fa:	47b8      	blx	r7
   148fc:	1836      	adds	r6, r6, r0
   148fe:	3604      	adds	r6, #4
   14900:	19ad      	adds	r5, r5, r6
   14902:	e7d7      	b.n	148b4 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   14904:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14906:	2b00      	cmp	r3, #0
   14908:	d1d7      	bne.n	148ba <MQTTSerialize_connectLength+0x2a>
   1490a:	e7dd      	b.n	148c8 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   1490c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1490e:	2b00      	cmp	r3, #0
   14910:	d1dd      	bne.n	148ce <MQTTSerialize_connectLength+0x3e>
   14912:	e7e3      	b.n	148dc <MQTTSerialize_connectLength+0x4c>
   14914:	00014df9 	.word	0x00014df9

00014918 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1491a:	b083      	sub	sp, #12
   1491c:	0006      	movs	r6, r0
   1491e:	000f      	movs	r7, r1
   14920:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   14922:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   14924:	0010      	movs	r0, r2
   14926:	4b45      	ldr	r3, [pc, #276]	; (14a3c <MQTTSerialize_connect+0x124>)
   14928:	4798      	blx	r3
   1492a:	0004      	movs	r4, r0
   1492c:	4b44      	ldr	r3, [pc, #272]	; (14a40 <MQTTSerialize_connect+0x128>)
   1492e:	4798      	blx	r3
   14930:	42b8      	cmp	r0, r7
   14932:	dd00      	ble.n	14936 <MQTTSerialize_connect+0x1e>
   14934:	e07f      	b.n	14a36 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   14936:	2110      	movs	r1, #16
   14938:	a801      	add	r0, sp, #4
   1493a:	4b42      	ldr	r3, [pc, #264]	; (14a44 <MQTTSerialize_connect+0x12c>)
   1493c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1493e:	0021      	movs	r1, r4
   14940:	9801      	ldr	r0, [sp, #4]
   14942:	4b41      	ldr	r3, [pc, #260]	; (14a48 <MQTTSerialize_connect+0x130>)
   14944:	4798      	blx	r3
   14946:	9b01      	ldr	r3, [sp, #4]
   14948:	469c      	mov	ip, r3
   1494a:	4460      	add	r0, ip
   1494c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   1494e:	7a2b      	ldrb	r3, [r5, #8]
   14950:	2b04      	cmp	r3, #4
   14952:	d045      	beq.n	149e0 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   14954:	493d      	ldr	r1, [pc, #244]	; (14a4c <MQTTSerialize_connect+0x134>)
   14956:	a801      	add	r0, sp, #4
   14958:	4b3d      	ldr	r3, [pc, #244]	; (14a50 <MQTTSerialize_connect+0x138>)
   1495a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1495c:	2103      	movs	r1, #3
   1495e:	a801      	add	r0, sp, #4
   14960:	4b38      	ldr	r3, [pc, #224]	; (14a44 <MQTTSerialize_connect+0x12c>)
   14962:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   14964:	7ea9      	ldrb	r1, [r5, #26]
   14966:	2301      	movs	r3, #1
   14968:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1496a:	7eea      	ldrb	r2, [r5, #27]
   1496c:	1e50      	subs	r0, r2, #1
   1496e:	4182      	sbcs	r2, r0
   14970:	b2d2      	uxtb	r2, r2
   14972:	4013      	ands	r3, r2
   14974:	009b      	lsls	r3, r3, #2
   14976:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   14978:	4319      	orrs	r1, r3
   1497a:	2b00      	cmp	r3, #0
   1497c:	d00b      	beq.n	14996 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   1497e:	233d      	movs	r3, #61	; 0x3d
   14980:	5cea      	ldrb	r2, [r5, r3]
   14982:	3b3a      	subs	r3, #58	; 0x3a
   14984:	4013      	ands	r3, r2
   14986:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   14988:	223c      	movs	r2, #60	; 0x3c
   1498a:	5ca8      	ldrb	r0, [r5, r2]
   1498c:	3a3b      	subs	r2, #59	; 0x3b
   1498e:	4002      	ands	r2, r0
   14990:	0152      	lsls	r2, r2, #5
   14992:	4319      	orrs	r1, r3
   14994:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   14996:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   14998:	2b00      	cmp	r3, #0
   1499a:	d02a      	beq.n	149f2 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   1499c:	2380      	movs	r3, #128	; 0x80
   1499e:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   149a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   149a2:	2b00      	cmp	r3, #0
   149a4:	d029      	beq.n	149fa <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   149a6:	2340      	movs	r3, #64	; 0x40
   149a8:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   149aa:	b2cc      	uxtb	r4, r1
   149ac:	0021      	movs	r1, r4
   149ae:	a801      	add	r0, sp, #4
   149b0:	4b24      	ldr	r3, [pc, #144]	; (14a44 <MQTTSerialize_connect+0x12c>)
   149b2:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   149b4:	8b29      	ldrh	r1, [r5, #24]
   149b6:	a801      	add	r0, sp, #4
   149b8:	4b26      	ldr	r3, [pc, #152]	; (14a54 <MQTTSerialize_connect+0x13c>)
   149ba:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   149bc:	68e9      	ldr	r1, [r5, #12]
   149be:	692a      	ldr	r2, [r5, #16]
   149c0:	696b      	ldr	r3, [r5, #20]
   149c2:	a801      	add	r0, sp, #4
   149c4:	4f24      	ldr	r7, [pc, #144]	; (14a58 <MQTTSerialize_connect+0x140>)
   149c6:	47b8      	blx	r7
	if (options->willFlag)
   149c8:	7eeb      	ldrb	r3, [r5, #27]
   149ca:	2b00      	cmp	r3, #0
   149cc:	d119      	bne.n	14a02 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   149ce:	b263      	sxtb	r3, r4
   149d0:	2b00      	cmp	r3, #0
   149d2:	db22      	blt.n	14a1a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   149d4:	0663      	lsls	r3, r4, #25
   149d6:	d427      	bmi.n	14a28 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   149d8:	9b01      	ldr	r3, [sp, #4]
   149da:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   149dc:	b003      	add	sp, #12
   149de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   149e0:	491e      	ldr	r1, [pc, #120]	; (14a5c <MQTTSerialize_connect+0x144>)
   149e2:	a801      	add	r0, sp, #4
   149e4:	4b1a      	ldr	r3, [pc, #104]	; (14a50 <MQTTSerialize_connect+0x138>)
   149e6:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   149e8:	2104      	movs	r1, #4
   149ea:	a801      	add	r0, sp, #4
   149ec:	4b15      	ldr	r3, [pc, #84]	; (14a44 <MQTTSerialize_connect+0x12c>)
   149ee:	4798      	blx	r3
   149f0:	e7b8      	b.n	14964 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   149f2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   149f4:	2b00      	cmp	r3, #0
   149f6:	d1d1      	bne.n	1499c <MQTTSerialize_connect+0x84>
   149f8:	e7d2      	b.n	149a0 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   149fa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   149fc:	2b00      	cmp	r3, #0
   149fe:	d1d2      	bne.n	149a6 <MQTTSerialize_connect+0x8e>
   14a00:	e7d3      	b.n	149aa <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   14a02:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14a04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14a08:	a801      	add	r0, sp, #4
   14a0a:	4f13      	ldr	r7, [pc, #76]	; (14a58 <MQTTSerialize_connect+0x140>)
   14a0c:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   14a0e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   14a10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14a12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14a14:	a801      	add	r0, sp, #4
   14a16:	47b8      	blx	r7
   14a18:	e7d9      	b.n	149ce <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14a1a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14a1c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   14a1e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14a20:	a801      	add	r0, sp, #4
   14a22:	4f0d      	ldr	r7, [pc, #52]	; (14a58 <MQTTSerialize_connect+0x140>)
   14a24:	47b8      	blx	r7
   14a26:	e7d5      	b.n	149d4 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14a28:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14a2a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14a2c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14a2e:	a801      	add	r0, sp, #4
   14a30:	4c09      	ldr	r4, [pc, #36]	; (14a58 <MQTTSerialize_connect+0x140>)
   14a32:	47a0      	blx	r4
   14a34:	e7d0      	b.n	149d8 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14a36:	2002      	movs	r0, #2
   14a38:	4240      	negs	r0, r0
	return rc;
   14a3a:	e7cf      	b.n	149dc <MQTTSerialize_connect+0xc4>
   14a3c:	00014891 	.word	0x00014891
   14a40:	00014c9d 	.word	0x00014c9d
   14a44:	00014cff 	.word	0x00014cff
   14a48:	00014c15 	.word	0x00014c15
   14a4c:	0001a260 	.word	0x0001a260
   14a50:	00014d35 	.word	0x00014d35
   14a54:	00014d0b 	.word	0x00014d0b
   14a58:	00014d6d 	.word	0x00014d6d
   14a5c:	0001a258 	.word	0x0001a258

00014a60 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   14a60:	b570      	push	{r4, r5, r6, lr}
   14a62:	b082      	sub	sp, #8
   14a64:	0005      	movs	r5, r0
   14a66:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14a68:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14a6a:	a801      	add	r0, sp, #4
   14a6c:	4b0e      	ldr	r3, [pc, #56]	; (14aa8 <MQTTDeserialize_connack+0x48>)
   14a6e:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   14a70:	23f0      	movs	r3, #240	; 0xf0
   14a72:	4003      	ands	r3, r0
	int rc = 0;
   14a74:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   14a76:	2b20      	cmp	r3, #32
   14a78:	d001      	beq.n	14a7e <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14a7a:	b002      	add	sp, #8
   14a7c:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14a7e:	4669      	mov	r1, sp
   14a80:	9801      	ldr	r0, [sp, #4]
   14a82:	4b0a      	ldr	r3, [pc, #40]	; (14aac <MQTTDeserialize_connack+0x4c>)
   14a84:	4798      	blx	r3
   14a86:	9b01      	ldr	r3, [sp, #4]
   14a88:	181b      	adds	r3, r3, r0
   14a8a:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   14a8c:	9b00      	ldr	r3, [sp, #0]
   14a8e:	2b01      	cmp	r3, #1
   14a90:	ddf3      	ble.n	14a7a <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   14a92:	a801      	add	r0, sp, #4
   14a94:	4e04      	ldr	r6, [pc, #16]	; (14aa8 <MQTTDeserialize_connack+0x48>)
   14a96:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   14a98:	0600      	lsls	r0, r0, #24
   14a9a:	0fc0      	lsrs	r0, r0, #31
   14a9c:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   14a9e:	a801      	add	r0, sp, #4
   14aa0:	47b0      	blx	r6
   14aa2:	7020      	strb	r0, [r4, #0]
	rc = 1;
   14aa4:	2001      	movs	r0, #1
   14aa6:	e7e8      	b.n	14a7a <MQTTDeserialize_connack+0x1a>
   14aa8:	00014cf3 	.word	0x00014cf3
   14aac:	00014cc5 	.word	0x00014cc5

00014ab0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   14ab0:	b510      	push	{r4, lr}
   14ab2:	b082      	sub	sp, #8
   14ab4:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   14ab6:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   14ab8:	2901      	cmp	r1, #1
   14aba:	dd0f      	ble.n	14adc <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   14abc:	210f      	movs	r1, #15
   14abe:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14ac0:	0109      	lsls	r1, r1, #4
   14ac2:	a801      	add	r0, sp, #4
   14ac4:	4b07      	ldr	r3, [pc, #28]	; (14ae4 <MQTTSerialize_zero+0x34>)
   14ac6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14ac8:	2100      	movs	r1, #0
   14aca:	9801      	ldr	r0, [sp, #4]
   14acc:	4b06      	ldr	r3, [pc, #24]	; (14ae8 <MQTTSerialize_zero+0x38>)
   14ace:	4798      	blx	r3
   14ad0:	9b01      	ldr	r3, [sp, #4]
   14ad2:	469c      	mov	ip, r3
   14ad4:	4460      	add	r0, ip
	rc = ptr - buf;
   14ad6:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14ad8:	b002      	add	sp, #8
   14ada:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14adc:	2002      	movs	r0, #2
   14ade:	4240      	negs	r0, r0
	return rc;
   14ae0:	e7fa      	b.n	14ad8 <MQTTSerialize_zero+0x28>
   14ae2:	46c0      	nop			; (mov r8, r8)
   14ae4:	00014cff 	.word	0x00014cff
   14ae8:	00014c15 	.word	0x00014c15

00014aec <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14aec:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   14aee:	220e      	movs	r2, #14
   14af0:	4b01      	ldr	r3, [pc, #4]	; (14af8 <MQTTSerialize_disconnect+0xc>)
   14af2:	4798      	blx	r3
}
   14af4:	bd10      	pop	{r4, pc}
   14af6:	46c0      	nop			; (mov r8, r8)
   14af8:	00014ab1 	.word	0x00014ab1

00014afc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14afc:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   14afe:	220c      	movs	r2, #12
   14b00:	4b01      	ldr	r3, [pc, #4]	; (14b08 <MQTTSerialize_pingreq+0xc>)
   14b02:	4798      	blx	r3
}
   14b04:	bd10      	pop	{r4, pc}
   14b06:	46c0      	nop			; (mov r8, r8)
   14b08:	00014ab1 	.word	0x00014ab1

00014b0c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b0e:	b085      	sub	sp, #20
   14b10:	0005      	movs	r5, r0
   14b12:	000e      	movs	r6, r1
   14b14:	0014      	movs	r4, r2
   14b16:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b1a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14b1c:	2300      	movs	r3, #0
   14b1e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14b20:	a803      	add	r0, sp, #12
   14b22:	4b1c      	ldr	r3, [pc, #112]	; (14b94 <MQTTDeserialize_publish+0x88>)
   14b24:	4798      	blx	r3
   14b26:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14b28:	22f0      	movs	r2, #240	; 0xf0
   14b2a:	4010      	ands	r0, r2
	int rc = 0;
   14b2c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   14b2e:	2830      	cmp	r0, #48	; 0x30
   14b30:	d002      	beq.n	14b38 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14b32:	0038      	movs	r0, r7
   14b34:	b005      	add	sp, #20
   14b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   14b38:	071a      	lsls	r2, r3, #28
   14b3a:	0fd2      	lsrs	r2, r2, #31
   14b3c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   14b3e:	075a      	lsls	r2, r3, #29
   14b40:	0f92      	lsrs	r2, r2, #30
   14b42:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   14b44:	07db      	lsls	r3, r3, #31
   14b46:	0fdb      	lsrs	r3, r3, #31
   14b48:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14b4a:	a902      	add	r1, sp, #8
   14b4c:	9803      	ldr	r0, [sp, #12]
   14b4e:	4b12      	ldr	r3, [pc, #72]	; (14b98 <MQTTDeserialize_publish+0x8c>)
   14b50:	4798      	blx	r3
   14b52:	0007      	movs	r7, r0
   14b54:	9b03      	ldr	r3, [sp, #12]
   14b56:	181c      	adds	r4, r3, r0
   14b58:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   14b5a:	9b02      	ldr	r3, [sp, #8]
   14b5c:	469c      	mov	ip, r3
   14b5e:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14b60:	0022      	movs	r2, r4
   14b62:	a903      	add	r1, sp, #12
   14b64:	980a      	ldr	r0, [sp, #40]	; 0x28
   14b66:	4b0d      	ldr	r3, [pc, #52]	; (14b9c <MQTTDeserialize_publish+0x90>)
   14b68:	4798      	blx	r3
   14b6a:	2800      	cmp	r0, #0
   14b6c:	d0e1      	beq.n	14b32 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   14b6e:	9b03      	ldr	r3, [sp, #12]
   14b70:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14b72:	d4de      	bmi.n	14b32 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   14b74:	6833      	ldr	r3, [r6, #0]
   14b76:	2b00      	cmp	r3, #0
   14b78:	dd04      	ble.n	14b84 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   14b7a:	a803      	add	r0, sp, #12
   14b7c:	4b08      	ldr	r3, [pc, #32]	; (14ba0 <MQTTDeserialize_publish+0x94>)
   14b7e:	4798      	blx	r3
   14b80:	9b01      	ldr	r3, [sp, #4]
   14b82:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   14b84:	9b03      	ldr	r3, [sp, #12]
   14b86:	1ae4      	subs	r4, r4, r3
   14b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b8a:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   14b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14b8e:	6013      	str	r3, [r2, #0]
	rc = 1;
   14b90:	2701      	movs	r7, #1
   14b92:	e7ce      	b.n	14b32 <MQTTDeserialize_publish+0x26>
   14b94:	00014cf3 	.word	0x00014cf3
   14b98:	00014cc5 	.word	0x00014cc5
   14b9c:	00014db9 	.word	0x00014db9
   14ba0:	00014ce1 	.word	0x00014ce1

00014ba4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   14ba4:	b570      	push	{r4, r5, r6, lr}
   14ba6:	b082      	sub	sp, #8
   14ba8:	0005      	movs	r5, r0
   14baa:	000e      	movs	r6, r1
   14bac:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14bae:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14bb0:	a801      	add	r0, sp, #4
   14bb2:	4b0c      	ldr	r3, [pc, #48]	; (14be4 <MQTTDeserialize_ack+0x40>)
   14bb4:	4798      	blx	r3
	*dup = header.bits.dup;
   14bb6:	0703      	lsls	r3, r0, #28
   14bb8:	0fdb      	lsrs	r3, r3, #31
   14bba:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   14bbc:	0600      	lsls	r0, r0, #24
   14bbe:	0f00      	lsrs	r0, r0, #28
   14bc0:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14bc2:	4669      	mov	r1, sp
   14bc4:	9801      	ldr	r0, [sp, #4]
   14bc6:	4b08      	ldr	r3, [pc, #32]	; (14be8 <MQTTDeserialize_ack+0x44>)
   14bc8:	4798      	blx	r3
   14bca:	9b01      	ldr	r3, [sp, #4]
   14bcc:	181b      	adds	r3, r3, r0
   14bce:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   14bd0:	9b00      	ldr	r3, [sp, #0]
   14bd2:	2b01      	cmp	r3, #1
   14bd4:	dd04      	ble.n	14be0 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   14bd6:	a801      	add	r0, sp, #4
   14bd8:	4b04      	ldr	r3, [pc, #16]	; (14bec <MQTTDeserialize_ack+0x48>)
   14bda:	4798      	blx	r3
   14bdc:	8020      	strh	r0, [r4, #0]

	rc = 1;
   14bde:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14be0:	b002      	add	sp, #8
   14be2:	bd70      	pop	{r4, r5, r6, pc}
   14be4:	00014cf3 	.word	0x00014cf3
   14be8:	00014cc5 	.word	0x00014cc5
   14bec:	00014ce1 	.word	0x00014ce1

00014bf0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   14bf0:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   14bf2:	2900      	cmp	r1, #0
   14bf4:	dd0a      	ble.n	14c0c <bufchar+0x1c>
   14bf6:	4b06      	ldr	r3, [pc, #24]	; (14c10 <bufchar+0x20>)
   14bf8:	681b      	ldr	r3, [r3, #0]
   14bfa:	185d      	adds	r5, r3, r1
   14bfc:	002c      	movs	r4, r5
		*c = *bufptr++;
   14bfe:	781a      	ldrb	r2, [r3, #0]
   14c00:	7002      	strb	r2, [r0, #0]
   14c02:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   14c04:	42a3      	cmp	r3, r4
   14c06:	d1fa      	bne.n	14bfe <bufchar+0xe>
   14c08:	4b01      	ldr	r3, [pc, #4]	; (14c10 <bufchar+0x20>)
   14c0a:	601d      	str	r5, [r3, #0]
	return count;
}
   14c0c:	0008      	movs	r0, r1
   14c0e:	bd30      	pop	{r4, r5, pc}
   14c10:	200007f8 	.word	0x200007f8

00014c14 <MQTTPacket_encode>:
{
   14c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c16:	b083      	sub	sp, #12
   14c18:	2500      	movs	r5, #0
		char d = length % 128;
   14c1a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   14c1c:	2780      	movs	r7, #128	; 0x80
   14c1e:	427f      	negs	r7, r7
   14c20:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   14c22:	17ca      	asrs	r2, r1, #31
   14c24:	0e54      	lsrs	r4, r2, #25
   14c26:	190b      	adds	r3, r1, r4
   14c28:	4033      	ands	r3, r6
   14c2a:	1b1b      	subs	r3, r3, r4
   14c2c:	b2db      	uxtb	r3, r3
		length /= 128;
   14c2e:	4032      	ands	r2, r6
   14c30:	1851      	adds	r1, r2, r1
   14c32:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   14c34:	2900      	cmp	r1, #0
   14c36:	dd03      	ble.n	14c40 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   14c38:	433b      	orrs	r3, r7
		buf[rc++] = d;
   14c3a:	5543      	strb	r3, [r0, r5]
   14c3c:	3501      	adds	r5, #1
   14c3e:	e7ef      	b.n	14c20 <MQTTPacket_encode+0xc>
   14c40:	5543      	strb	r3, [r0, r5]
   14c42:	9801      	ldr	r0, [sp, #4]
   14c44:	3001      	adds	r0, #1
}
   14c46:	b003      	add	sp, #12
   14c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014c4a <MQTTPacket_decode>:
{
   14c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c4c:	46ce      	mov	lr, r9
   14c4e:	4647      	mov	r7, r8
   14c50:	b580      	push	{r7, lr}
   14c52:	b083      	sub	sp, #12
   14c54:	4680      	mov	r8, r0
   14c56:	000f      	movs	r7, r1
	*value = 0;
   14c58:	2300      	movs	r3, #0
   14c5a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14c5c:	2401      	movs	r4, #1
	int multiplier = 1;
   14c5e:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   14c60:	466b      	mov	r3, sp
   14c62:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   14c64:	237f      	movs	r3, #127	; 0x7f
   14c66:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   14c68:	2101      	movs	r1, #1
   14c6a:	0028      	movs	r0, r5
   14c6c:	47c0      	blx	r8
		if (rc != 1)
   14c6e:	2801      	cmp	r0, #1
   14c70:	d10e      	bne.n	14c90 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   14c72:	782b      	ldrb	r3, [r5, #0]
   14c74:	464a      	mov	r2, r9
   14c76:	401a      	ands	r2, r3
   14c78:	4372      	muls	r2, r6
   14c7a:	6839      	ldr	r1, [r7, #0]
   14c7c:	468c      	mov	ip, r1
   14c7e:	4462      	add	r2, ip
   14c80:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   14c82:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   14c84:	b25b      	sxtb	r3, r3
   14c86:	2b00      	cmp	r3, #0
   14c88:	da02      	bge.n	14c90 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14c8a:	3401      	adds	r4, #1
   14c8c:	2c05      	cmp	r4, #5
   14c8e:	d1eb      	bne.n	14c68 <MQTTPacket_decode+0x1e>
}
   14c90:	0020      	movs	r0, r4
   14c92:	b003      	add	sp, #12
   14c94:	bc0c      	pop	{r2, r3}
   14c96:	4690      	mov	r8, r2
   14c98:	4699      	mov	r9, r3
   14c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014c9c <MQTTPacket_len>:
{
   14c9c:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   14c9e:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   14ca0:	3002      	adds	r0, #2
	if (rem_len < 128)
   14ca2:	2a7f      	cmp	r2, #127	; 0x7f
   14ca4:	dd07      	ble.n	14cb6 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   14ca6:	4905      	ldr	r1, [pc, #20]	; (14cbc <MQTTPacket_len+0x20>)
		rem_len += 2;
   14ca8:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   14caa:	428a      	cmp	r2, r1
   14cac:	dd03      	ble.n	14cb6 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   14cae:	4904      	ldr	r1, [pc, #16]	; (14cc0 <MQTTPacket_len+0x24>)
		rem_len += 4;
   14cb0:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   14cb2:	428a      	cmp	r2, r1
   14cb4:	dd00      	ble.n	14cb8 <MQTTPacket_len+0x1c>
}
   14cb6:	4770      	bx	lr
		rem_len += 3;
   14cb8:	1d18      	adds	r0, r3, #4
   14cba:	e7fc      	b.n	14cb6 <MQTTPacket_len+0x1a>
   14cbc:	00003fff 	.word	0x00003fff
   14cc0:	001ffffe 	.word	0x001ffffe

00014cc4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   14cc4:	b510      	push	{r4, lr}
	bufptr = buf;
   14cc6:	4b03      	ldr	r3, [pc, #12]	; (14cd4 <MQTTPacket_decodeBuf+0x10>)
   14cc8:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   14cca:	4803      	ldr	r0, [pc, #12]	; (14cd8 <MQTTPacket_decodeBuf+0x14>)
   14ccc:	4b03      	ldr	r3, [pc, #12]	; (14cdc <MQTTPacket_decodeBuf+0x18>)
   14cce:	4798      	blx	r3
}
   14cd0:	bd10      	pop	{r4, pc}
   14cd2:	46c0      	nop			; (mov r8, r8)
   14cd4:	200007f8 	.word	0x200007f8
   14cd8:	00014bf1 	.word	0x00014bf1
   14cdc:	00014c4b 	.word	0x00014c4b

00014ce0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   14ce0:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   14ce2:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   14ce4:	7813      	ldrb	r3, [r2, #0]
   14ce6:	021b      	lsls	r3, r3, #8
   14ce8:	7850      	ldrb	r0, [r2, #1]
   14cea:	1818      	adds	r0, r3, r0
	*pptr += 2;
   14cec:	3202      	adds	r2, #2
   14cee:	600a      	str	r2, [r1, #0]
	return len;
}
   14cf0:	4770      	bx	lr

00014cf2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   14cf2:	0002      	movs	r2, r0
	char c = **pptr;
   14cf4:	6803      	ldr	r3, [r0, #0]
   14cf6:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   14cf8:	3301      	adds	r3, #1
   14cfa:	6013      	str	r3, [r2, #0]
	return c;
}
   14cfc:	4770      	bx	lr

00014cfe <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   14cfe:	6803      	ldr	r3, [r0, #0]
   14d00:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   14d02:	6803      	ldr	r3, [r0, #0]
   14d04:	3301      	adds	r3, #1
   14d06:	6003      	str	r3, [r0, #0]
}
   14d08:	4770      	bx	lr

00014d0a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   14d0a:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   14d0c:	17ca      	asrs	r2, r1, #31
   14d0e:	23ff      	movs	r3, #255	; 0xff
   14d10:	001c      	movs	r4, r3
   14d12:	4014      	ands	r4, r2
   14d14:	1864      	adds	r4, r4, r1
   14d16:	1224      	asrs	r4, r4, #8
   14d18:	6805      	ldr	r5, [r0, #0]
   14d1a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   14d1c:	6804      	ldr	r4, [r0, #0]
   14d1e:	1c65      	adds	r5, r4, #1
   14d20:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   14d22:	0e12      	lsrs	r2, r2, #24
   14d24:	1889      	adds	r1, r1, r2
   14d26:	400b      	ands	r3, r1
   14d28:	1a9b      	subs	r3, r3, r2
   14d2a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   14d2c:	6803      	ldr	r3, [r0, #0]
   14d2e:	3301      	adds	r3, #1
   14d30:	6003      	str	r3, [r0, #0]
}
   14d32:	bd30      	pop	{r4, r5, pc}

00014d34 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   14d34:	b570      	push	{r4, r5, r6, lr}
   14d36:	0004      	movs	r4, r0
   14d38:	000e      	movs	r6, r1
	int len = strlen(string);
   14d3a:	0008      	movs	r0, r1
   14d3c:	4b08      	ldr	r3, [pc, #32]	; (14d60 <writeCString+0x2c>)
   14d3e:	4798      	blx	r3
   14d40:	0005      	movs	r5, r0
	writeInt(pptr, len);
   14d42:	0001      	movs	r1, r0
   14d44:	0020      	movs	r0, r4
   14d46:	4b07      	ldr	r3, [pc, #28]	; (14d64 <writeCString+0x30>)
   14d48:	4798      	blx	r3
	memcpy(*pptr, string, len);
   14d4a:	002a      	movs	r2, r5
   14d4c:	0031      	movs	r1, r6
   14d4e:	6820      	ldr	r0, [r4, #0]
   14d50:	4b05      	ldr	r3, [pc, #20]	; (14d68 <writeCString+0x34>)
   14d52:	4798      	blx	r3
	*pptr += len;
   14d54:	6823      	ldr	r3, [r4, #0]
   14d56:	469c      	mov	ip, r3
   14d58:	4465      	add	r5, ip
   14d5a:	6025      	str	r5, [r4, #0]
}
   14d5c:	bd70      	pop	{r4, r5, r6, pc}
   14d5e:	46c0      	nop			; (mov r8, r8)
   14d60:	000178fb 	.word	0x000178fb
   14d64:	00014d0b 	.word	0x00014d0b
   14d68:	0001739d 	.word	0x0001739d

00014d6c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   14d6c:	b530      	push	{r4, r5, lr}
   14d6e:	b085      	sub	sp, #20
   14d70:	0005      	movs	r5, r0
   14d72:	9101      	str	r1, [sp, #4]
   14d74:	9303      	str	r3, [sp, #12]
   14d76:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   14d78:	dc06      	bgt.n	14d88 <writeMQTTString+0x1c>
   14d7a:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   14d7c:	2900      	cmp	r1, #0
   14d7e:	d010      	beq.n	14da2 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   14d80:	4b0a      	ldr	r3, [pc, #40]	; (14dac <writeMQTTString+0x40>)
   14d82:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   14d84:	b005      	add	sp, #20
   14d86:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   14d88:	0011      	movs	r1, r2
   14d8a:	4b09      	ldr	r3, [pc, #36]	; (14db0 <writeMQTTString+0x44>)
   14d8c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   14d8e:	0022      	movs	r2, r4
   14d90:	9903      	ldr	r1, [sp, #12]
   14d92:	6828      	ldr	r0, [r5, #0]
   14d94:	4b07      	ldr	r3, [pc, #28]	; (14db4 <writeMQTTString+0x48>)
   14d96:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   14d98:	682b      	ldr	r3, [r5, #0]
   14d9a:	469c      	mov	ip, r3
   14d9c:	4464      	add	r4, ip
   14d9e:	602c      	str	r4, [r5, #0]
   14da0:	e7f0      	b.n	14d84 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   14da2:	2100      	movs	r1, #0
   14da4:	4b02      	ldr	r3, [pc, #8]	; (14db0 <writeMQTTString+0x44>)
   14da6:	4798      	blx	r3
}
   14da8:	e7ec      	b.n	14d84 <writeMQTTString+0x18>
   14daa:	46c0      	nop			; (mov r8, r8)
   14dac:	00014d35 	.word	0x00014d35
   14db0:	00014d0b 	.word	0x00014d0b
   14db4:	0001739d 	.word	0x0001739d

00014db8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   14db8:	b570      	push	{r4, r5, r6, lr}
   14dba:	0005      	movs	r5, r0
   14dbc:	000c      	movs	r4, r1
   14dbe:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   14dc0:	680b      	ldr	r3, [r1, #0]
   14dc2:	1ad3      	subs	r3, r2, r3
   14dc4:	2b01      	cmp	r3, #1
   14dc6:	dd12      	ble.n	14dee <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   14dc8:	0008      	movs	r0, r1
   14dca:	4b0a      	ldr	r3, [pc, #40]	; (14df4 <readMQTTLenString+0x3c>)
   14dcc:	4798      	blx	r3
   14dce:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14dd0:	6822      	ldr	r2, [r4, #0]
   14dd2:	1811      	adds	r1, r2, r0
	int rc = 0;
   14dd4:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14dd6:	428e      	cmp	r6, r1
   14dd8:	d305      	bcc.n	14de6 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   14dda:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   14ddc:	6823      	ldr	r3, [r4, #0]
   14dde:	469c      	mov	ip, r3
   14de0:	4460      	add	r0, ip
   14de2:	6020      	str	r0, [r4, #0]
			rc = 1;
   14de4:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   14de6:	2200      	movs	r2, #0
   14de8:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   14dea:	0018      	movs	r0, r3
   14dec:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   14dee:	2300      	movs	r3, #0
   14df0:	e7f9      	b.n	14de6 <readMQTTLenString+0x2e>
   14df2:	46c0      	nop			; (mov r8, r8)
   14df4:	00014ce1 	.word	0x00014ce1

00014df8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   14df8:	b500      	push	{lr}
   14dfa:	b085      	sub	sp, #20
   14dfc:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   14dfe:	2800      	cmp	r0, #0
   14e00:	d003      	beq.n	14e0a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   14e02:	4b03      	ldr	r3, [pc, #12]	; (14e10 <MQTTstrlen+0x18>)
   14e04:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   14e06:	b005      	add	sp, #20
   14e08:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   14e0a:	9802      	ldr	r0, [sp, #8]
	return rc;
   14e0c:	e7fb      	b.n	14e06 <MQTTstrlen+0xe>
   14e0e:	46c0      	nop			; (mov r8, r8)
   14e10:	000178fb 	.word	0x000178fb

00014e14 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   14e14:	b570      	push	{r4, r5, r6, lr}
   14e16:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   14e18:	6806      	ldr	r6, [r0, #0]
   14e1a:	2e00      	cmp	r6, #0
   14e1c:	d00b      	beq.n	14e36 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   14e1e:	0030      	movs	r0, r6
   14e20:	4b0b      	ldr	r3, [pc, #44]	; (14e50 <MQTTPacket_equals+0x3c>)
   14e22:	4798      	blx	r3
   14e24:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   14e26:	0028      	movs	r0, r5
   14e28:	4b09      	ldr	r3, [pc, #36]	; (14e50 <MQTTPacket_equals+0x3c>)
   14e2a:	4798      	blx	r3
   14e2c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14e2e:	4284      	cmp	r4, r0
   14e30:	d004      	beq.n	14e3c <MQTTPacket_equals+0x28>
}
   14e32:	0018      	movs	r0, r3
   14e34:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   14e36:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   14e38:	6844      	ldr	r4, [r0, #4]
   14e3a:	e7f4      	b.n	14e26 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14e3c:	0022      	movs	r2, r4
   14e3e:	0029      	movs	r1, r5
   14e40:	0030      	movs	r0, r6
   14e42:	4b04      	ldr	r3, [pc, #16]	; (14e54 <MQTTPacket_equals+0x40>)
   14e44:	4798      	blx	r3
   14e46:	4243      	negs	r3, r0
   14e48:	4143      	adcs	r3, r0
   14e4a:	b2db      	uxtb	r3, r3
   14e4c:	e7f1      	b.n	14e32 <MQTTPacket_equals+0x1e>
   14e4e:	46c0      	nop			; (mov r8, r8)
   14e50:	000178fb 	.word	0x000178fb
   14e54:	00017909 	.word	0x00017909

00014e58 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14e58:	b510      	push	{r4, lr}
   14e5a:	b084      	sub	sp, #16
   14e5c:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14e5e:	0008      	movs	r0, r1
   14e60:	0011      	movs	r1, r2
   14e62:	001a      	movs	r2, r3
   14e64:	4b05      	ldr	r3, [pc, #20]	; (14e7c <MQTTSerialize_publishLength+0x24>)
   14e66:	4798      	blx	r3
   14e68:	3002      	adds	r0, #2
   14e6a:	9b06      	ldr	r3, [sp, #24]
   14e6c:	469c      	mov	ip, r3
   14e6e:	4460      	add	r0, ip
	if (qos > 0)
   14e70:	2c00      	cmp	r4, #0
   14e72:	dd00      	ble.n	14e76 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   14e74:	3002      	adds	r0, #2
	return len;
}
   14e76:	b004      	add	sp, #16
   14e78:	bd10      	pop	{r4, pc}
   14e7a:	46c0      	nop			; (mov r8, r8)
   14e7c:	00014df9 	.word	0x00014df9

00014e80 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   14e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e82:	46de      	mov	lr, fp
   14e84:	4657      	mov	r7, sl
   14e86:	464e      	mov	r6, r9
   14e88:	b5c0      	push	{r6, r7, lr}
   14e8a:	b084      	sub	sp, #16
   14e8c:	0007      	movs	r7, r0
   14e8e:	468b      	mov	fp, r1
   14e90:	4692      	mov	sl, r2
   14e92:	001e      	movs	r6, r3
   14e94:	ab0c      	add	r3, sp, #48	; 0x30
   14e96:	781b      	ldrb	r3, [r3, #0]
   14e98:	4699      	mov	r9, r3
   14e9a:	ab0d      	add	r3, sp, #52	; 0x34
   14e9c:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   14e9e:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   14ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14ea2:	9300      	str	r3, [sp, #0]
   14ea4:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14eaa:	0030      	movs	r0, r6
   14eac:	4d1f      	ldr	r5, [pc, #124]	; (14f2c <MQTTSerialize_publish+0xac>)
   14eae:	47a8      	blx	r5
   14eb0:	0005      	movs	r5, r0
   14eb2:	4b1f      	ldr	r3, [pc, #124]	; (14f30 <MQTTSerialize_publish+0xb0>)
   14eb4:	4798      	blx	r3
   14eb6:	4558      	cmp	r0, fp
   14eb8:	dc34      	bgt.n	14f24 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   14eba:	2201      	movs	r2, #1
   14ebc:	4653      	mov	r3, sl
   14ebe:	4013      	ands	r3, r2
   14ec0:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   14ec2:	2103      	movs	r1, #3
   14ec4:	4031      	ands	r1, r6
   14ec6:	0048      	lsls	r0, r1, #1
   14ec8:	2130      	movs	r1, #48	; 0x30
   14eca:	4319      	orrs	r1, r3
   14ecc:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   14ece:	464b      	mov	r3, r9
   14ed0:	4013      	ands	r3, r2
   14ed2:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14ed4:	4319      	orrs	r1, r3
   14ed6:	a803      	add	r0, sp, #12
   14ed8:	4b16      	ldr	r3, [pc, #88]	; (14f34 <MQTTSerialize_publish+0xb4>)
   14eda:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14edc:	0029      	movs	r1, r5
   14ede:	9803      	ldr	r0, [sp, #12]
   14ee0:	4b15      	ldr	r3, [pc, #84]	; (14f38 <MQTTSerialize_publish+0xb8>)
   14ee2:	4798      	blx	r3
   14ee4:	9b03      	ldr	r3, [sp, #12]
   14ee6:	469c      	mov	ip, r3
   14ee8:	4460      	add	r0, ip
   14eea:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   14eec:	990e      	ldr	r1, [sp, #56]	; 0x38
   14eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14ef0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14ef2:	a803      	add	r0, sp, #12
   14ef4:	4d11      	ldr	r5, [pc, #68]	; (14f3c <MQTTSerialize_publish+0xbc>)
   14ef6:	47a8      	blx	r5

	if (qos > 0)
   14ef8:	2e00      	cmp	r6, #0
   14efa:	dd03      	ble.n	14f04 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   14efc:	0021      	movs	r1, r4
   14efe:	a803      	add	r0, sp, #12
   14f00:	4b0f      	ldr	r3, [pc, #60]	; (14f40 <MQTTSerialize_publish+0xc0>)
   14f02:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   14f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f06:	9911      	ldr	r1, [sp, #68]	; 0x44
   14f08:	9803      	ldr	r0, [sp, #12]
   14f0a:	4b0e      	ldr	r3, [pc, #56]	; (14f44 <MQTTSerialize_publish+0xc4>)
   14f0c:	4798      	blx	r3
	ptr += payloadlen;
   14f0e:	9b03      	ldr	r3, [sp, #12]
   14f10:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f12:	4694      	mov	ip, r2
   14f14:	4463      	add	r3, ip

	rc = ptr - buf;
   14f16:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14f18:	b004      	add	sp, #16
   14f1a:	bc1c      	pop	{r2, r3, r4}
   14f1c:	4691      	mov	r9, r2
   14f1e:	469a      	mov	sl, r3
   14f20:	46a3      	mov	fp, r4
   14f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14f24:	2002      	movs	r0, #2
   14f26:	4240      	negs	r0, r0
	return rc;
   14f28:	e7f6      	b.n	14f18 <MQTTSerialize_publish+0x98>
   14f2a:	46c0      	nop			; (mov r8, r8)
   14f2c:	00014e59 	.word	0x00014e59
   14f30:	00014c9d 	.word	0x00014c9d
   14f34:	00014cff 	.word	0x00014cff
   14f38:	00014c15 	.word	0x00014c15
   14f3c:	00014d6d 	.word	0x00014d6d
   14f40:	00014d0b 	.word	0x00014d0b
   14f44:	0001739d 	.word	0x0001739d

00014f48 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14f48:	b530      	push	{r4, r5, lr}
   14f4a:	b083      	sub	sp, #12
   14f4c:	0004      	movs	r4, r0
   14f4e:	a806      	add	r0, sp, #24
   14f50:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   14f52:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   14f54:	2903      	cmp	r1, #3
   14f56:	dd1e      	ble.n	14f96 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   14f58:	210f      	movs	r1, #15
   14f5a:	4011      	ands	r1, r2
	header.bits.dup = dup;
   14f5c:	2001      	movs	r0, #1
   14f5e:	4003      	ands	r3, r0
   14f60:	00db      	lsls	r3, r3, #3
   14f62:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   14f64:	3a06      	subs	r2, #6
   14f66:	4250      	negs	r0, r2
   14f68:	4142      	adcs	r2, r0
   14f6a:	0052      	lsls	r2, r2, #1
   14f6c:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   14f6e:	4311      	orrs	r1, r2
   14f70:	a801      	add	r0, sp, #4
   14f72:	4b0a      	ldr	r3, [pc, #40]	; (14f9c <MQTTSerialize_ack+0x54>)
   14f74:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   14f76:	2102      	movs	r1, #2
   14f78:	9801      	ldr	r0, [sp, #4]
   14f7a:	4b09      	ldr	r3, [pc, #36]	; (14fa0 <MQTTSerialize_ack+0x58>)
   14f7c:	4798      	blx	r3
   14f7e:	9b01      	ldr	r3, [sp, #4]
   14f80:	469c      	mov	ip, r3
   14f82:	4460      	add	r0, ip
   14f84:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   14f86:	0029      	movs	r1, r5
   14f88:	a801      	add	r0, sp, #4
   14f8a:	4b06      	ldr	r3, [pc, #24]	; (14fa4 <MQTTSerialize_ack+0x5c>)
   14f8c:	4798      	blx	r3
	rc = ptr - buf;
   14f8e:	9b01      	ldr	r3, [sp, #4]
   14f90:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14f92:	b003      	add	sp, #12
   14f94:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14f96:	2002      	movs	r0, #2
   14f98:	4240      	negs	r0, r0
	return rc;
   14f9a:	e7fa      	b.n	14f92 <MQTTSerialize_ack+0x4a>
   14f9c:	00014cff 	.word	0x00014cff
   14fa0:	00014c15 	.word	0x00014c15
   14fa4:	00014d0b 	.word	0x00014d0b

00014fa8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   14fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14faa:	46c6      	mov	lr, r8
   14fac:	b500      	push	{lr}
   14fae:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   14fb0:	dd12      	ble.n	14fd8 <MQTTSerialize_subscribeLength+0x30>
   14fb2:	000c      	movs	r4, r1
   14fb4:	2602      	movs	r6, #2
   14fb6:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   14fb8:	4b08      	ldr	r3, [pc, #32]	; (14fdc <MQTTSerialize_subscribeLength+0x34>)
   14fba:	4698      	mov	r8, r3
   14fbc:	6820      	ldr	r0, [r4, #0]
   14fbe:	6861      	ldr	r1, [r4, #4]
   14fc0:	68a2      	ldr	r2, [r4, #8]
   14fc2:	47c0      	blx	r8
   14fc4:	3003      	adds	r0, #3
   14fc6:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   14fc8:	3501      	adds	r5, #1
   14fca:	340c      	adds	r4, #12
   14fcc:	42af      	cmp	r7, r5
   14fce:	d1f5      	bne.n	14fbc <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   14fd0:	0030      	movs	r0, r6
   14fd2:	bc04      	pop	{r2}
   14fd4:	4690      	mov	r8, r2
   14fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   14fd8:	2602      	movs	r6, #2
	return len;
   14fda:	e7f9      	b.n	14fd0 <MQTTSerialize_subscribeLength+0x28>
   14fdc:	00014df9 	.word	0x00014df9

00014fe0 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   14fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fe2:	46d6      	mov	lr, sl
   14fe4:	464f      	mov	r7, r9
   14fe6:	4646      	mov	r6, r8
   14fe8:	b5c0      	push	{r6, r7, lr}
   14fea:	b084      	sub	sp, #16
   14fec:	4682      	mov	sl, r0
   14fee:	000e      	movs	r6, r1
   14ff0:	0015      	movs	r5, r2
   14ff2:	9301      	str	r3, [sp, #4]
   14ff4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   14ff6:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   14ff8:	990d      	ldr	r1, [sp, #52]	; 0x34
   14ffa:	0038      	movs	r0, r7
   14ffc:	4b1f      	ldr	r3, [pc, #124]	; (1507c <MQTTSerialize_subscribe+0x9c>)
   14ffe:	4798      	blx	r3
   15000:	0004      	movs	r4, r0
   15002:	4b1f      	ldr	r3, [pc, #124]	; (15080 <MQTTSerialize_subscribe+0xa0>)
   15004:	4798      	blx	r3
   15006:	42b0      	cmp	r0, r6
   15008:	dc34      	bgt.n	15074 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   1500a:	2101      	movs	r1, #1
   1500c:	4029      	ands	r1, r5
   1500e:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   15010:	2180      	movs	r1, #128	; 0x80
   15012:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   15014:	2302      	movs	r3, #2
   15016:	4319      	orrs	r1, r3
   15018:	a803      	add	r0, sp, #12
   1501a:	4b1a      	ldr	r3, [pc, #104]	; (15084 <MQTTSerialize_subscribe+0xa4>)
   1501c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1501e:	0021      	movs	r1, r4
   15020:	9803      	ldr	r0, [sp, #12]
   15022:	4b19      	ldr	r3, [pc, #100]	; (15088 <MQTTSerialize_subscribe+0xa8>)
   15024:	4798      	blx	r3
   15026:	9a03      	ldr	r2, [sp, #12]
   15028:	4694      	mov	ip, r2
   1502a:	4460      	add	r0, ip
   1502c:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   1502e:	9901      	ldr	r1, [sp, #4]
   15030:	a803      	add	r0, sp, #12
   15032:	4b16      	ldr	r3, [pc, #88]	; (1508c <MQTTSerialize_subscribe+0xac>)
   15034:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   15036:	2f00      	cmp	r7, #0
   15038:	dd13      	ble.n	15062 <MQTTSerialize_subscribe+0x82>
   1503a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1503c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1503e:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   15040:	4b13      	ldr	r3, [pc, #76]	; (15090 <MQTTSerialize_subscribe+0xb0>)
   15042:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   15044:	4b0f      	ldr	r3, [pc, #60]	; (15084 <MQTTSerialize_subscribe+0xa4>)
   15046:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   15048:	6821      	ldr	r1, [r4, #0]
   1504a:	6862      	ldr	r2, [r4, #4]
   1504c:	68a3      	ldr	r3, [r4, #8]
   1504e:	a803      	add	r0, sp, #12
   15050:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   15052:	ce02      	ldmia	r6!, {r1}
   15054:	b2c9      	uxtb	r1, r1
   15056:	a803      	add	r0, sp, #12
   15058:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   1505a:	3501      	adds	r5, #1
   1505c:	340c      	adds	r4, #12
   1505e:	42af      	cmp	r7, r5
   15060:	d1f2      	bne.n	15048 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   15062:	9b03      	ldr	r3, [sp, #12]
   15064:	4652      	mov	r2, sl
   15066:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   15068:	b004      	add	sp, #16
   1506a:	bc1c      	pop	{r2, r3, r4}
   1506c:	4690      	mov	r8, r2
   1506e:	4699      	mov	r9, r3
   15070:	46a2      	mov	sl, r4
   15072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   15074:	2002      	movs	r0, #2
   15076:	4240      	negs	r0, r0
	return rc;
   15078:	e7f6      	b.n	15068 <MQTTSerialize_subscribe+0x88>
   1507a:	46c0      	nop			; (mov r8, r8)
   1507c:	00014fa9 	.word	0x00014fa9
   15080:	00014c9d 	.word	0x00014c9d
   15084:	00014cff 	.word	0x00014cff
   15088:	00014c15 	.word	0x00014c15
   1508c:	00014d0b 	.word	0x00014d0b
   15090:	00014d6d 	.word	0x00014d6d

00015094 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   15094:	b5f0      	push	{r4, r5, r6, r7, lr}
   15096:	46ce      	mov	lr, r9
   15098:	4647      	mov	r7, r8
   1509a:	b580      	push	{r7, lr}
   1509c:	b083      	sub	sp, #12
   1509e:	0004      	movs	r4, r0
   150a0:	000e      	movs	r6, r1
   150a2:	0015      	movs	r5, r2
   150a4:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   150a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   150a8:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   150aa:	a801      	add	r0, sp, #4
   150ac:	4b1e      	ldr	r3, [pc, #120]	; (15128 <MQTTDeserialize_suback+0x94>)
   150ae:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   150b0:	23f0      	movs	r3, #240	; 0xf0
   150b2:	4003      	ands	r3, r0
	int rc = 0;
   150b4:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   150b6:	2b90      	cmp	r3, #144	; 0x90
   150b8:	d004      	beq.n	150c4 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   150ba:	b003      	add	sp, #12
   150bc:	bc0c      	pop	{r2, r3}
   150be:	4690      	mov	r8, r2
   150c0:	4699      	mov	r9, r3
   150c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   150c4:	4669      	mov	r1, sp
   150c6:	9801      	ldr	r0, [sp, #4]
   150c8:	4b18      	ldr	r3, [pc, #96]	; (1512c <MQTTDeserialize_suback+0x98>)
   150ca:	4798      	blx	r3
   150cc:	9b01      	ldr	r3, [sp, #4]
   150ce:	181b      	adds	r3, r3, r0
   150d0:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   150d2:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   150d4:	2a01      	cmp	r2, #1
   150d6:	ddf0      	ble.n	150ba <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   150d8:	4698      	mov	r8, r3
   150da:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   150dc:	a801      	add	r0, sp, #4
   150de:	4b14      	ldr	r3, [pc, #80]	; (15130 <MQTTDeserialize_suback+0x9c>)
   150e0:	4798      	blx	r3
   150e2:	8020      	strh	r0, [r4, #0]
	*count = 0;
   150e4:	2300      	movs	r3, #0
   150e6:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   150e8:	9b01      	ldr	r3, [sp, #4]
   150ea:	4598      	cmp	r8, r3
   150ec:	d916      	bls.n	1511c <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   150ee:	2e00      	cmp	r6, #0
   150f0:	db16      	blt.n	15120 <MQTTDeserialize_suback+0x8c>
   150f2:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   150f4:	4a0c      	ldr	r2, [pc, #48]	; (15128 <MQTTDeserialize_suback+0x94>)
   150f6:	4691      	mov	r9, r2
   150f8:	1c5a      	adds	r2, r3, #1
   150fa:	602a      	str	r2, [r5, #0]
   150fc:	009b      	lsls	r3, r3, #2
   150fe:	18fc      	adds	r4, r7, r3
   15100:	a801      	add	r0, sp, #4
   15102:	47c8      	blx	r9
   15104:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   15106:	9b01      	ldr	r3, [sp, #4]
   15108:	4598      	cmp	r8, r3
   1510a:	d905      	bls.n	15118 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   1510c:	682b      	ldr	r3, [r5, #0]
   1510e:	42b3      	cmp	r3, r6
   15110:	ddf2      	ble.n	150f8 <MQTTDeserialize_suback+0x64>
			rc = -1;
   15112:	2001      	movs	r0, #1
   15114:	4240      	negs	r0, r0
	return rc;
   15116:	e7d0      	b.n	150ba <MQTTDeserialize_suback+0x26>
	rc = 1;
   15118:	2001      	movs	r0, #1
   1511a:	e7ce      	b.n	150ba <MQTTDeserialize_suback+0x26>
   1511c:	2001      	movs	r0, #1
   1511e:	e7cc      	b.n	150ba <MQTTDeserialize_suback+0x26>
			rc = -1;
   15120:	2001      	movs	r0, #1
   15122:	4240      	negs	r0, r0
   15124:	e7c9      	b.n	150ba <MQTTDeserialize_suback+0x26>
   15126:	46c0      	nop			; (mov r8, r8)
   15128:	00014cf3 	.word	0x00014cf3
   1512c:	00014cc5 	.word	0x00014cc5
   15130:	00014ce1 	.word	0x00014ce1

00015134 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   15134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15136:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   15138:	2041      	movs	r0, #65	; 0x41
   1513a:	5c23      	ldrb	r3, [r4, r0]
   1513c:	2501      	movs	r5, #1
   1513e:	432b      	orrs	r3, r5
   15140:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   15142:	b292      	uxth	r2, r2
   15144:	2000      	movs	r0, #0
   15146:	5620      	ldrsb	r0, [r4, r0]
   15148:	2300      	movs	r3, #0
   1514a:	4d12      	ldr	r5, [pc, #72]	; (15194 <_http_client_send_wait+0x60>)
   1514c:	47a8      	blx	r5
   1514e:	2800      	cmp	r0, #0
   15150:	db16      	blt.n	15180 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   15152:	2341      	movs	r3, #65	; 0x41
   15154:	5ce3      	ldrb	r3, [r4, r3]
   15156:	07db      	lsls	r3, r3, #31
   15158:	d518      	bpl.n	1518c <_http_client_send_wait+0x58>
   1515a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   1515c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1515e:	2b02      	cmp	r3, #2
   15160:	d917      	bls.n	15192 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   15162:	4f0d      	ldr	r7, [pc, #52]	; (15198 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   15164:	4e0d      	ldr	r6, [pc, #52]	; (1519c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   15166:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   15168:	2000      	movs	r0, #0
   1516a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   1516c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1516e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   15170:	5d63      	ldrb	r3, [r4, r5]
   15172:	07db      	lsls	r3, r3, #31
   15174:	d50c      	bpl.n	15190 <_http_client_send_wait+0x5c>
   15176:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15178:	2b02      	cmp	r3, #2
   1517a:	d8f5      	bhi.n	15168 <_http_client_send_wait+0x34>
	return 0;
   1517c:	2000      	movs	r0, #0
   1517e:	e008      	b.n	15192 <_http_client_send_wait+0x5e>
		module->sending = 0;
   15180:	2241      	movs	r2, #65	; 0x41
   15182:	5ca3      	ldrb	r3, [r4, r2]
   15184:	2101      	movs	r1, #1
   15186:	438b      	bics	r3, r1
   15188:	54a3      	strb	r3, [r4, r2]
		return result;
   1518a:	e002      	b.n	15192 <_http_client_send_wait+0x5e>
	return 0;
   1518c:	2000      	movs	r0, #0
   1518e:	e000      	b.n	15192 <_http_client_send_wait+0x5e>
   15190:	2000      	movs	r0, #0
}
   15192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15194:	0000f441 	.word	0x0000f441
   15198:	0000d6a5 	.word	0x0000d6a5
   1519c:	000162c9 	.word	0x000162c9

000151a0 <http_client_get_config_defaults>:
	config->port = 80;
   151a0:	2350      	movs	r3, #80	; 0x50
   151a2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   151a4:	2300      	movs	r3, #0
   151a6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   151a8:	4a05      	ldr	r2, [pc, #20]	; (151c0 <http_client_get_config_defaults+0x20>)
   151aa:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   151ac:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   151ae:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   151b0:	3301      	adds	r3, #1
   151b2:	33ff      	adds	r3, #255	; 0xff
   151b4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   151b6:	3bae      	subs	r3, #174	; 0xae
   151b8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   151ba:	4b02      	ldr	r3, [pc, #8]	; (151c4 <http_client_get_config_defaults+0x24>)
   151bc:	6183      	str	r3, [r0, #24]
}
   151be:	4770      	bx	lr
   151c0:	00004e20 	.word	0x00004e20
   151c4:	0001a430 	.word	0x0001a430

000151c8 <http_client_init>:
{
   151c8:	b570      	push	{r4, r5, r6, lr}
   151ca:	0004      	movs	r4, r0
   151cc:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   151ce:	2800      	cmp	r0, #0
   151d0:	d038      	beq.n	15244 <http_client_init+0x7c>
   151d2:	2900      	cmp	r1, #0
   151d4:	d039      	beq.n	1524a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   151d6:	690b      	ldr	r3, [r1, #16]
   151d8:	2b00      	cmp	r3, #0
   151da:	d039      	beq.n	15250 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   151dc:	684b      	ldr	r3, [r1, #4]
   151de:	2b00      	cmp	r3, #0
   151e0:	d039      	beq.n	15256 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   151e2:	694b      	ldr	r3, [r1, #20]
   151e4:	2b51      	cmp	r3, #81	; 0x51
   151e6:	d939      	bls.n	1525c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   151e8:	22e8      	movs	r2, #232	; 0xe8
   151ea:	2100      	movs	r1, #0
   151ec:	4b1e      	ldr	r3, [pc, #120]	; (15268 <http_client_init+0xa0>)
   151ee:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   151f0:	0020      	movs	r0, r4
   151f2:	3050      	adds	r0, #80	; 0x50
   151f4:	221c      	movs	r2, #28
   151f6:	0029      	movs	r1, r5
   151f8:	4b1c      	ldr	r3, [pc, #112]	; (1526c <http_client_init+0xa4>)
   151fa:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   151fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   151fe:	2b00      	cmp	r3, #0
   15200:	d008      	beq.n	15214 <http_client_init+0x4c>
	if (config->timeout > 0) {
   15202:	892b      	ldrh	r3, [r5, #8]
   15204:	2b00      	cmp	r3, #0
   15206:	d111      	bne.n	1522c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   15208:	2300      	movs	r3, #0
   1520a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1520c:	22d8      	movs	r2, #216	; 0xd8
   1520e:	50a3      	str	r3, [r4, r2]
	return 0;
   15210:	2000      	movs	r0, #0
}
   15212:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   15214:	6928      	ldr	r0, [r5, #16]
   15216:	4b16      	ldr	r3, [pc, #88]	; (15270 <http_client_init+0xa8>)
   15218:	4798      	blx	r3
   1521a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1521c:	2800      	cmp	r0, #0
   1521e:	d020      	beq.n	15262 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   15220:	2241      	movs	r2, #65	; 0x41
   15222:	5ca3      	ldrb	r3, [r4, r2]
   15224:	2104      	movs	r1, #4
   15226:	430b      	orrs	r3, r1
   15228:	54a3      	strb	r3, [r4, r2]
   1522a:	e7ea      	b.n	15202 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1522c:	6868      	ldr	r0, [r5, #4]
   1522e:	2300      	movs	r3, #0
   15230:	0022      	movs	r2, r4
   15232:	4910      	ldr	r1, [pc, #64]	; (15274 <http_client_init+0xac>)
   15234:	4d10      	ldr	r5, [pc, #64]	; (15278 <http_client_init+0xb0>)
   15236:	47a8      	blx	r5
   15238:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   1523a:	2800      	cmp	r0, #0
   1523c:	dae4      	bge.n	15208 <http_client_init+0x40>
			return -ENOSPC;
   1523e:	201c      	movs	r0, #28
   15240:	4240      	negs	r0, r0
   15242:	e7e6      	b.n	15212 <http_client_init+0x4a>
		return -EINVAL;
   15244:	2016      	movs	r0, #22
   15246:	4240      	negs	r0, r0
   15248:	e7e3      	b.n	15212 <http_client_init+0x4a>
   1524a:	2016      	movs	r0, #22
   1524c:	4240      	negs	r0, r0
   1524e:	e7e0      	b.n	15212 <http_client_init+0x4a>
		return -EINVAL;
   15250:	2016      	movs	r0, #22
   15252:	4240      	negs	r0, r0
   15254:	e7dd      	b.n	15212 <http_client_init+0x4a>
		return -EINVAL;
   15256:	2016      	movs	r0, #22
   15258:	4240      	negs	r0, r0
   1525a:	e7da      	b.n	15212 <http_client_init+0x4a>
		return -EINVAL;
   1525c:	2016      	movs	r0, #22
   1525e:	4240      	negs	r0, r0
   15260:	e7d7      	b.n	15212 <http_client_init+0x4a>
			return -ENOMEM;
   15262:	200c      	movs	r0, #12
   15264:	4240      	negs	r0, r0
   15266:	e7d4      	b.n	15212 <http_client_init+0x4a>
   15268:	000173d3 	.word	0x000173d3
   1526c:	0001739d 	.word	0x0001739d
   15270:	00017375 	.word	0x00017375
   15274:	0001538d 	.word	0x0001538d
   15278:	00016255 	.word	0x00016255

0001527c <http_client_register_callback>:
	if (module == NULL) {
   1527c:	2800      	cmp	r0, #0
   1527e:	d002      	beq.n	15286 <http_client_register_callback+0xa>
	module->cb = callback;
   15280:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   15282:	2000      	movs	r0, #0
}
   15284:	4770      	bx	lr
		return -EINVAL;
   15286:	2016      	movs	r0, #22
   15288:	4240      	negs	r0, r0
   1528a:	e7fb      	b.n	15284 <http_client_register_callback+0x8>

0001528c <_http_client_clear_conn>:
{
   1528c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1528e:	b085      	sub	sp, #20
   15290:	0004      	movs	r4, r0
   15292:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   15294:	23c0      	movs	r3, #192	; 0xc0
   15296:	58c3      	ldr	r3, [r0, r3]
   15298:	2b00      	cmp	r3, #0
   1529a:	d002      	beq.n	152a2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   1529c:	22c4      	movs	r2, #196	; 0xc4
   1529e:	5880      	ldr	r0, [r0, r2]
   152a0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   152a2:	0020      	movs	r0, r4
   152a4:	30b0      	adds	r0, #176	; 0xb0
   152a6:	2218      	movs	r2, #24
   152a8:	2100      	movs	r1, #0
   152aa:	4b17      	ldr	r3, [pc, #92]	; (15308 <_http_client_clear_conn+0x7c>)
   152ac:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   152ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   152b0:	2b00      	cmp	r3, #0
   152b2:	d124      	bne.n	152fe <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   152b4:	2300      	movs	r3, #0
   152b6:	56e3      	ldrsb	r3, [r4, r3]
   152b8:	009b      	lsls	r3, r3, #2
   152ba:	2500      	movs	r5, #0
   152bc:	4a13      	ldr	r2, [pc, #76]	; (1530c <_http_client_clear_conn+0x80>)
   152be:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   152c0:	0020      	movs	r0, r4
   152c2:	306c      	adds	r0, #108	; 0x6c
   152c4:	226c      	movs	r2, #108	; 0x6c
   152c6:	2100      	movs	r1, #0
   152c8:	4f0f      	ldr	r7, [pc, #60]	; (15308 <_http_client_clear_conn+0x7c>)
   152ca:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   152cc:	0020      	movs	r0, r4
   152ce:	30d8      	adds	r0, #216	; 0xd8
   152d0:	2210      	movs	r2, #16
   152d2:	2100      	movs	r1, #0
   152d4:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   152d6:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   152d8:	23d8      	movs	r3, #216	; 0xd8
   152da:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   152dc:	2241      	movs	r2, #65	; 0x41
   152de:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   152e0:	2101      	movs	r1, #1
   152e2:	438b      	bics	r3, r1
   152e4:	3101      	adds	r1, #1
   152e6:	438b      	bics	r3, r1
   152e8:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   152ea:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   152ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   152ee:	2b00      	cmp	r3, #0
   152f0:	d003      	beq.n	152fa <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   152f2:	aa01      	add	r2, sp, #4
   152f4:	3102      	adds	r1, #2
   152f6:	0020      	movs	r0, r4
   152f8:	4798      	blx	r3
}
   152fa:	b005      	add	sp, #20
   152fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   152fe:	2000      	movs	r0, #0
   15300:	5620      	ldrsb	r0, [r4, r0]
   15302:	4b03      	ldr	r3, [pc, #12]	; (15310 <_http_client_clear_conn+0x84>)
   15304:	4798      	blx	r3
   15306:	e7d5      	b.n	152b4 <_http_client_clear_conn+0x28>
   15308:	000173d3 	.word	0x000173d3
   1530c:	200007fc 	.word	0x200007fc
   15310:	0000f56d 	.word	0x0000f56d

00015314 <http_client_socket_resolve_handler>:
{
   15314:	b5f0      	push	{r4, r5, r6, r7, lr}
   15316:	b087      	sub	sp, #28
   15318:	9000      	str	r0, [sp, #0]
   1531a:	9101      	str	r1, [sp, #4]
   1531c:	4c17      	ldr	r4, [pc, #92]	; (1537c <http_client_socket_resolve_handler+0x68>)
   1531e:	0026      	movs	r6, r4
   15320:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   15322:	4f17      	ldr	r7, [pc, #92]	; (15380 <http_client_socket_resolve_handler+0x6c>)
   15324:	e015      	b.n	15352 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   15326:	2302      	movs	r3, #2
   15328:	aa02      	add	r2, sp, #8
   1532a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   1532c:	334e      	adds	r3, #78	; 0x4e
   1532e:	5aeb      	ldrh	r3, [r5, r3]
   15330:	021a      	lsls	r2, r3, #8
   15332:	0a1b      	lsrs	r3, r3, #8
   15334:	4313      	orrs	r3, r2
   15336:	aa02      	add	r2, sp, #8
   15338:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1533a:	9b01      	ldr	r3, [sp, #4]
   1533c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1533e:	2000      	movs	r0, #0
   15340:	5628      	ldrsb	r0, [r5, r0]
   15342:	2210      	movs	r2, #16
   15344:	a902      	add	r1, sp, #8
   15346:	4b0f      	ldr	r3, [pc, #60]	; (15384 <http_client_socket_resolve_handler+0x70>)
   15348:	4798      	blx	r3
				return;
   1534a:	e015      	b.n	15378 <http_client_socket_resolve_handler+0x64>
   1534c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1534e:	42b4      	cmp	r4, r6
   15350:	d012      	beq.n	15378 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   15352:	6825      	ldr	r5, [r4, #0]
   15354:	2d00      	cmp	r5, #0
   15356:	d0f9      	beq.n	1534c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   15358:	1c69      	adds	r1, r5, #1
   1535a:	9800      	ldr	r0, [sp, #0]
   1535c:	47b8      	blx	r7
   1535e:	2800      	cmp	r0, #0
   15360:	d1f4      	bne.n	1534c <http_client_socket_resolve_handler+0x38>
   15362:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   15364:	2b01      	cmp	r3, #1
   15366:	d1f1      	bne.n	1534c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   15368:	9b01      	ldr	r3, [sp, #4]
   1536a:	2b00      	cmp	r3, #0
   1536c:	d1db      	bne.n	15326 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1536e:	2176      	movs	r1, #118	; 0x76
   15370:	4249      	negs	r1, r1
   15372:	0028      	movs	r0, r5
   15374:	4b04      	ldr	r3, [pc, #16]	; (15388 <http_client_socket_resolve_handler+0x74>)
   15376:	4798      	blx	r3
}
   15378:	b007      	add	sp, #28
   1537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1537c:	200007fc 	.word	0x200007fc
   15380:	0001789d 	.word	0x0001789d
   15384:	0000f3b1 	.word	0x0000f3b1
   15388:	0001528d 	.word	0x0001528d

0001538c <http_client_timer_callback>:
{
   1538c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   1538e:	2a00      	cmp	r2, #0
   15390:	d004      	beq.n	1539c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   15392:	213e      	movs	r1, #62	; 0x3e
   15394:	4249      	negs	r1, r1
   15396:	0010      	movs	r0, r2
   15398:	4b01      	ldr	r3, [pc, #4]	; (153a0 <http_client_timer_callback+0x14>)
   1539a:	4798      	blx	r3
}
   1539c:	bd10      	pop	{r4, pc}
   1539e:	46c0      	nop			; (mov r8, r8)
   153a0:	0001528d 	.word	0x0001528d

000153a4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   153a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   153a6:	46de      	mov	lr, fp
   153a8:	4657      	mov	r7, sl
   153aa:	b580      	push	{r7, lr}
   153ac:	b095      	sub	sp, #84	; 0x54
   153ae:	af02      	add	r7, sp, #8
   153b0:	0004      	movs	r4, r0
   153b2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   153b4:	2310      	movs	r3, #16
   153b6:	2208      	movs	r2, #8
   153b8:	18ba      	adds	r2, r7, r2
   153ba:	18d2      	adds	r2, r2, r3
   153bc:	4bb1      	ldr	r3, [pc, #708]	; (15684 <_http_client_request+0x2e0>)
   153be:	cb23      	ldmia	r3!, {r0, r1, r5}
   153c0:	c223      	stmia	r2!, {r0, r1, r5}
   153c2:	681b      	ldr	r3, [r3, #0]
   153c4:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   153c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   153c8:	1dd3      	adds	r3, r2, #7
   153ca:	08db      	lsrs	r3, r3, #3
   153cc:	00db      	lsls	r3, r3, #3
   153ce:	4669      	mov	r1, sp
   153d0:	1acb      	subs	r3, r1, r3
   153d2:	469d      	mov	sp, r3
   153d4:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   153d6:	2c00      	cmp	r4, #0
   153d8:	d100      	bne.n	153dc <_http_client_request+0x38>
   153da:	e1f0      	b.n	157be <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   153dc:	2341      	movs	r3, #65	; 0x41
   153de:	5ce3      	ldrb	r3, [r4, r3]
   153e0:	07db      	lsls	r3, r3, #31
   153e2:	d500      	bpl.n	153e6 <_http_client_request+0x42>
   153e4:	e1eb      	b.n	157be <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   153e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   153e8:	2b03      	cmp	r3, #3
   153ea:	d004      	beq.n	153f6 <_http_client_request+0x52>
   153ec:	2b04      	cmp	r3, #4
   153ee:	d100      	bne.n	153f2 <_http_client_request+0x4e>
   153f0:	e120      	b.n	15634 <_http_client_request+0x290>
   153f2:	46dd      	mov	sp, fp
   153f4:	e1e4      	b.n	157c0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   153f6:	2300      	movs	r3, #0
   153f8:	21cc      	movs	r1, #204	; 0xcc
   153fa:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   153fc:	3104      	adds	r1, #4
   153fe:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   15400:	9400      	str	r4, [sp, #0]
   15402:	4ba1      	ldr	r3, [pc, #644]	; (15688 <_http_client_request+0x2e4>)
   15404:	0031      	movs	r1, r6
   15406:	202c      	movs	r0, #44	; 0x2c
   15408:	2508      	movs	r5, #8
   1540a:	46ac      	mov	ip, r5
   1540c:	44bc      	add	ip, r7
   1540e:	4460      	add	r0, ip
   15410:	4d9e      	ldr	r5, [pc, #632]	; (1568c <_http_client_request+0x2e8>)
   15412:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   15414:	23c8      	movs	r3, #200	; 0xc8
   15416:	5ce3      	ldrb	r3, [r4, r3]
   15418:	2b01      	cmp	r3, #1
   1541a:	d100      	bne.n	1541e <_http_client_request+0x7a>
   1541c:	e0a9      	b.n	15572 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   1541e:	2b02      	cmp	r3, #2
   15420:	d100      	bne.n	15424 <_http_client_request+0x80>
   15422:	e0af      	b.n	15584 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   15424:	2b03      	cmp	r3, #3
   15426:	d100      	bne.n	1542a <_http_client_request+0x86>
   15428:	e0b5      	b.n	15596 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1542a:	2b04      	cmp	r3, #4
   1542c:	d100      	bne.n	15430 <_http_client_request+0x8c>
   1542e:	e0bb      	b.n	155a8 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   15430:	2b05      	cmp	r3, #5
   15432:	d100      	bne.n	15436 <_http_client_request+0x92>
   15434:	e0c1      	b.n	155ba <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   15436:	2b06      	cmp	r3, #6
   15438:	d100      	bne.n	1543c <_http_client_request+0x98>
   1543a:	e0c7      	b.n	155cc <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1543c:	0025      	movs	r5, r4
   1543e:	3570      	adds	r5, #112	; 0x70
   15440:	0028      	movs	r0, r5
   15442:	4b93      	ldr	r3, [pc, #588]	; (15690 <_http_client_request+0x2ec>)
   15444:	469a      	mov	sl, r3
   15446:	4798      	blx	r3
   15448:	0002      	movs	r2, r0
   1544a:	0029      	movs	r1, r5
   1544c:	232c      	movs	r3, #44	; 0x2c
   1544e:	2008      	movs	r0, #8
   15450:	1838      	adds	r0, r7, r0
   15452:	18c0      	adds	r0, r0, r3
   15454:	4d8f      	ldr	r5, [pc, #572]	; (15694 <_http_client_request+0x2f0>)
   15456:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   15458:	220b      	movs	r2, #11
   1545a:	498f      	ldr	r1, [pc, #572]	; (15698 <_http_client_request+0x2f4>)
   1545c:	232c      	movs	r3, #44	; 0x2c
   1545e:	2008      	movs	r0, #8
   15460:	1838      	adds	r0, r7, r0
   15462:	18c0      	adds	r0, r0, r3
   15464:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   15466:	220c      	movs	r2, #12
   15468:	498c      	ldr	r1, [pc, #560]	; (1569c <_http_client_request+0x2f8>)
   1546a:	232c      	movs	r3, #44	; 0x2c
   1546c:	2008      	movs	r0, #8
   1546e:	1838      	adds	r0, r7, r0
   15470:	18c0      	adds	r0, r0, r3
   15472:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   15474:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   15476:	607b      	str	r3, [r7, #4]
   15478:	0018      	movs	r0, r3
   1547a:	47d0      	blx	sl
   1547c:	0002      	movs	r2, r0
   1547e:	6879      	ldr	r1, [r7, #4]
   15480:	232c      	movs	r3, #44	; 0x2c
   15482:	2008      	movs	r0, #8
   15484:	1838      	adds	r0, r7, r0
   15486:	18c0      	adds	r0, r0, r3
   15488:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1548a:	2202      	movs	r2, #2
   1548c:	4984      	ldr	r1, [pc, #528]	; (156a0 <_http_client_request+0x2fc>)
   1548e:	232c      	movs	r3, #44	; 0x2c
   15490:	2008      	movs	r0, #8
   15492:	1838      	adds	r0, r7, r0
   15494:	18c0      	adds	r0, r0, r3
   15496:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   15498:	2206      	movs	r2, #6
   1549a:	4982      	ldr	r1, [pc, #520]	; (156a4 <_http_client_request+0x300>)
   1549c:	232c      	movs	r3, #44	; 0x2c
   1549e:	2008      	movs	r0, #8
   154a0:	1838      	adds	r0, r7, r0
   154a2:	18c0      	adds	r0, r0, r3
   154a4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   154a6:	1c63      	adds	r3, r4, #1
   154a8:	607b      	str	r3, [r7, #4]
   154aa:	0018      	movs	r0, r3
   154ac:	47d0      	blx	sl
   154ae:	0002      	movs	r2, r0
   154b0:	6879      	ldr	r1, [r7, #4]
   154b2:	232c      	movs	r3, #44	; 0x2c
   154b4:	2008      	movs	r0, #8
   154b6:	1838      	adds	r0, r7, r0
   154b8:	18c0      	adds	r0, r0, r3
   154ba:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   154bc:	2202      	movs	r2, #2
   154be:	4978      	ldr	r1, [pc, #480]	; (156a0 <_http_client_request+0x2fc>)
   154c0:	232c      	movs	r3, #44	; 0x2c
   154c2:	2008      	movs	r0, #8
   154c4:	1838      	adds	r0, r7, r0
   154c6:	18c0      	adds	r0, r0, r3
   154c8:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   154ca:	2218      	movs	r2, #24
   154cc:	4976      	ldr	r1, [pc, #472]	; (156a8 <_http_client_request+0x304>)
   154ce:	232c      	movs	r3, #44	; 0x2c
   154d0:	2008      	movs	r0, #8
   154d2:	1838      	adds	r0, r7, r0
   154d4:	18c0      	adds	r0, r0, r3
   154d6:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   154d8:	2213      	movs	r2, #19
   154da:	4974      	ldr	r1, [pc, #464]	; (156ac <_http_client_request+0x308>)
   154dc:	232c      	movs	r3, #44	; 0x2c
   154de:	2008      	movs	r0, #8
   154e0:	1838      	adds	r0, r7, r0
   154e2:	18c0      	adds	r0, r0, r3
   154e4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   154e6:	2217      	movs	r2, #23
   154e8:	4971      	ldr	r1, [pc, #452]	; (156b0 <_http_client_request+0x30c>)
   154ea:	232c      	movs	r3, #44	; 0x2c
   154ec:	2008      	movs	r0, #8
   154ee:	1838      	adds	r0, r7, r0
   154f0:	18c0      	adds	r0, r0, r3
   154f2:	47a8      	blx	r5

		if (entity->read != NULL) {
   154f4:	0023      	movs	r3, r4
   154f6:	33b0      	adds	r3, #176	; 0xb0
   154f8:	68db      	ldr	r3, [r3, #12]
   154fa:	2b00      	cmp	r3, #0
   154fc:	d07b      	beq.n	155f6 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   154fe:	23b0      	movs	r3, #176	; 0xb0
   15500:	5ce3      	ldrb	r3, [r4, r3]
   15502:	2b00      	cmp	r3, #0
   15504:	d16b      	bne.n	155de <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   15506:	0023      	movs	r3, r4
   15508:	33b0      	adds	r3, #176	; 0xb0
   1550a:	689b      	ldr	r3, [r3, #8]
   1550c:	2b00      	cmp	r3, #0
   1550e:	d072      	beq.n	155f6 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   15510:	0022      	movs	r2, r4
   15512:	32b0      	adds	r2, #176	; 0xb0
   15514:	6950      	ldr	r0, [r2, #20]
   15516:	4798      	blx	r3
   15518:	23cc      	movs	r3, #204	; 0xcc
   1551a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   1551c:	2800      	cmp	r0, #0
   1551e:	da00      	bge.n	15522 <_http_client_request+0x17e>
   15520:	e0ac      	b.n	1567c <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   15522:	0002      	movs	r2, r0
   15524:	4963      	ldr	r1, [pc, #396]	; (156b4 <_http_client_request+0x310>)
   15526:	2320      	movs	r3, #32
   15528:	2008      	movs	r0, #8
   1552a:	1838      	adds	r0, r7, r0
   1552c:	18c0      	adds	r0, r0, r3
   1552e:	4b62      	ldr	r3, [pc, #392]	; (156b8 <_http_client_request+0x314>)
   15530:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   15532:	2210      	movs	r2, #16
   15534:	4961      	ldr	r1, [pc, #388]	; (156bc <_http_client_request+0x318>)
   15536:	232c      	movs	r3, #44	; 0x2c
   15538:	2008      	movs	r0, #8
   1553a:	1838      	adds	r0, r7, r0
   1553c:	18c0      	adds	r0, r0, r3
   1553e:	4d55      	ldr	r5, [pc, #340]	; (15694 <_http_client_request+0x2f0>)
   15540:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   15542:	2320      	movs	r3, #32
   15544:	2208      	movs	r2, #8
   15546:	18ba      	adds	r2, r7, r2
   15548:	18d0      	adds	r0, r2, r3
   1554a:	4b51      	ldr	r3, [pc, #324]	; (15690 <_http_client_request+0x2ec>)
   1554c:	4798      	blx	r3
   1554e:	0002      	movs	r2, r0
   15550:	2320      	movs	r3, #32
   15552:	2108      	movs	r1, #8
   15554:	1879      	adds	r1, r7, r1
   15556:	18c9      	adds	r1, r1, r3
   15558:	330c      	adds	r3, #12
   1555a:	2008      	movs	r0, #8
   1555c:	1838      	adds	r0, r7, r0
   1555e:	18c0      	adds	r0, r0, r3
   15560:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15562:	2202      	movs	r2, #2
   15564:	494e      	ldr	r1, [pc, #312]	; (156a0 <_http_client_request+0x2fc>)
   15566:	232c      	movs	r3, #44	; 0x2c
   15568:	2008      	movs	r0, #8
   1556a:	1838      	adds	r0, r7, r0
   1556c:	18c0      	adds	r0, r0, r3
   1556e:	47a8      	blx	r5
   15570:	e041      	b.n	155f6 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   15572:	2204      	movs	r2, #4
   15574:	4952      	ldr	r1, [pc, #328]	; (156c0 <_http_client_request+0x31c>)
   15576:	332b      	adds	r3, #43	; 0x2b
   15578:	2008      	movs	r0, #8
   1557a:	1838      	adds	r0, r7, r0
   1557c:	18c0      	adds	r0, r0, r3
   1557e:	4b45      	ldr	r3, [pc, #276]	; (15694 <_http_client_request+0x2f0>)
   15580:	4798      	blx	r3
   15582:	e75b      	b.n	1543c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   15584:	2205      	movs	r2, #5
   15586:	494f      	ldr	r1, [pc, #316]	; (156c4 <_http_client_request+0x320>)
   15588:	332a      	adds	r3, #42	; 0x2a
   1558a:	2008      	movs	r0, #8
   1558c:	1838      	adds	r0, r7, r0
   1558e:	18c0      	adds	r0, r0, r3
   15590:	4b40      	ldr	r3, [pc, #256]	; (15694 <_http_client_request+0x2f0>)
   15592:	4798      	blx	r3
   15594:	e752      	b.n	1543c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   15596:	2207      	movs	r2, #7
   15598:	494b      	ldr	r1, [pc, #300]	; (156c8 <_http_client_request+0x324>)
   1559a:	3329      	adds	r3, #41	; 0x29
   1559c:	2008      	movs	r0, #8
   1559e:	1838      	adds	r0, r7, r0
   155a0:	18c0      	adds	r0, r0, r3
   155a2:	4b3c      	ldr	r3, [pc, #240]	; (15694 <_http_client_request+0x2f0>)
   155a4:	4798      	blx	r3
   155a6:	e749      	b.n	1543c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   155a8:	2204      	movs	r2, #4
   155aa:	4948      	ldr	r1, [pc, #288]	; (156cc <_http_client_request+0x328>)
   155ac:	3328      	adds	r3, #40	; 0x28
   155ae:	2008      	movs	r0, #8
   155b0:	1838      	adds	r0, r7, r0
   155b2:	18c0      	adds	r0, r0, r3
   155b4:	4b37      	ldr	r3, [pc, #220]	; (15694 <_http_client_request+0x2f0>)
   155b6:	4798      	blx	r3
   155b8:	e740      	b.n	1543c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   155ba:	2208      	movs	r2, #8
   155bc:	4944      	ldr	r1, [pc, #272]	; (156d0 <_http_client_request+0x32c>)
   155be:	3327      	adds	r3, #39	; 0x27
   155c0:	2008      	movs	r0, #8
   155c2:	1838      	adds	r0, r7, r0
   155c4:	18c0      	adds	r0, r0, r3
   155c6:	4b33      	ldr	r3, [pc, #204]	; (15694 <_http_client_request+0x2f0>)
   155c8:	4798      	blx	r3
   155ca:	e737      	b.n	1543c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   155cc:	2205      	movs	r2, #5
   155ce:	4941      	ldr	r1, [pc, #260]	; (156d4 <_http_client_request+0x330>)
   155d0:	3326      	adds	r3, #38	; 0x26
   155d2:	2008      	movs	r0, #8
   155d4:	1838      	adds	r0, r7, r0
   155d6:	18c0      	adds	r0, r0, r3
   155d8:	4b2e      	ldr	r3, [pc, #184]	; (15694 <_http_client_request+0x2f0>)
   155da:	4798      	blx	r3
   155dc:	e72e      	b.n	1543c <_http_client_request+0x98>
				module->req.content_length = -1;
   155de:	2201      	movs	r2, #1
   155e0:	4252      	negs	r2, r2
   155e2:	23cc      	movs	r3, #204	; 0xcc
   155e4:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   155e6:	321d      	adds	r2, #29
   155e8:	493b      	ldr	r1, [pc, #236]	; (156d8 <_http_client_request+0x334>)
   155ea:	3ba0      	subs	r3, #160	; 0xa0
   155ec:	2008      	movs	r0, #8
   155ee:	1838      	adds	r0, r7, r0
   155f0:	18c0      	adds	r0, r0, r3
   155f2:	4b28      	ldr	r3, [pc, #160]	; (15694 <_http_client_request+0x2f0>)
   155f4:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   155f6:	23d4      	movs	r3, #212	; 0xd4
   155f8:	58e5      	ldr	r5, [r4, r3]
   155fa:	2d00      	cmp	r5, #0
   155fc:	d00a      	beq.n	15614 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   155fe:	0028      	movs	r0, r5
   15600:	4b23      	ldr	r3, [pc, #140]	; (15690 <_http_client_request+0x2ec>)
   15602:	4798      	blx	r3
   15604:	0002      	movs	r2, r0
   15606:	0029      	movs	r1, r5
   15608:	232c      	movs	r3, #44	; 0x2c
   1560a:	2008      	movs	r0, #8
   1560c:	1838      	adds	r0, r7, r0
   1560e:	18c0      	adds	r0, r0, r3
   15610:	4b20      	ldr	r3, [pc, #128]	; (15694 <_http_client_request+0x2f0>)
   15612:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15614:	2202      	movs	r2, #2
   15616:	4922      	ldr	r1, [pc, #136]	; (156a0 <_http_client_request+0x2fc>)
   15618:	232c      	movs	r3, #44	; 0x2c
   1561a:	2008      	movs	r0, #8
   1561c:	1838      	adds	r0, r7, r0
   1561e:	18c0      	adds	r0, r0, r3
   15620:	4b1c      	ldr	r3, [pc, #112]	; (15694 <_http_client_request+0x2f0>)
   15622:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   15624:	232c      	movs	r3, #44	; 0x2c
   15626:	2208      	movs	r2, #8
   15628:	18ba      	adds	r2, r7, r2
   1562a:	18d0      	adds	r0, r2, r3
   1562c:	4b2b      	ldr	r3, [pc, #172]	; (156dc <_http_client_request+0x338>)
   1562e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   15630:	2304      	movs	r3, #4
   15632:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   15634:	23cc      	movs	r3, #204	; 0xcc
   15636:	58e2      	ldr	r2, [r4, r3]
   15638:	2a00      	cmp	r2, #0
   1563a:	db51      	blt.n	156e0 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   1563c:	dc00      	bgt.n	15640 <_http_client_request+0x29c>
   1563e:	e0f0      	b.n	15822 <_http_client_request+0x47e>
   15640:	0023      	movs	r3, r4
   15642:	33b0      	adds	r3, #176	; 0xb0
   15644:	68dd      	ldr	r5, [r3, #12]
   15646:	2d00      	cmp	r5, #0
   15648:	d100      	bne.n	1564c <_http_client_request+0x2a8>
   1564a:	e0ea      	b.n	15822 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   1564c:	23d0      	movs	r3, #208	; 0xd0
   1564e:	58e3      	ldr	r3, [r4, r3]
   15650:	429a      	cmp	r2, r3
   15652:	dd00      	ble.n	15656 <_http_client_request+0x2b2>
   15654:	e0ba      	b.n	157cc <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   15656:	23c0      	movs	r3, #192	; 0xc0
   15658:	58e3      	ldr	r3, [r4, r3]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d002      	beq.n	15664 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   1565e:	22c4      	movs	r2, #196	; 0xc4
   15660:	58a0      	ldr	r0, [r4, r2]
   15662:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   15664:	2302      	movs	r3, #2
   15666:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15668:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1566a:	2b00      	cmp	r3, #0
   1566c:	d100      	bne.n	15670 <_http_client_request+0x2cc>
   1566e:	e6c0      	b.n	153f2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15670:	220c      	movs	r2, #12
   15672:	18ba      	adds	r2, r7, r2
   15674:	2101      	movs	r1, #1
   15676:	0020      	movs	r0, r4
   15678:	4798      	blx	r3
   1567a:	e6ba      	b.n	153f2 <_http_client_request+0x4e>
					module->req.content_length = 0;
   1567c:	2200      	movs	r2, #0
   1567e:	50e2      	str	r2, [r4, r3]
   15680:	e7b9      	b.n	155f6 <_http_client_request+0x252>
   15682:	46c0      	nop			; (mov r8, r8)
   15684:	0001a318 	.word	0x0001a318
   15688:	00015135 	.word	0x00015135
   1568c:	00016101 	.word	0x00016101
   15690:	000178fb 	.word	0x000178fb
   15694:	00016155 	.word	0x00016155
   15698:	0001a38c 	.word	0x0001a38c
   1569c:	0001a398 	.word	0x0001a398
   156a0:	0001a87c 	.word	0x0001a87c
   156a4:	0001a3a8 	.word	0x0001a3a8
   156a8:	0001a3b0 	.word	0x0001a3b0
   156ac:	0001a3cc 	.word	0x0001a3cc
   156b0:	0001a3e0 	.word	0x0001a3e0
   156b4:	0001a418 	.word	0x0001a418
   156b8:	00017859 	.word	0x00017859
   156bc:	0001a41c 	.word	0x0001a41c
   156c0:	0001a358 	.word	0x0001a358
   156c4:	0001a360 	.word	0x0001a360
   156c8:	0001a368 	.word	0x0001a368
   156cc:	0001a370 	.word	0x0001a370
   156d0:	0001a378 	.word	0x0001a378
   156d4:	0001a384 	.word	0x0001a384
   156d8:	0001a3f8 	.word	0x0001a3f8
   156dc:	00016111 	.word	0x00016111
		if (module->req.content_length < 0 && entity->read) {
   156e0:	0023      	movs	r3, r4
   156e2:	33b0      	adds	r3, #176	; 0xb0
   156e4:	68dd      	ldr	r5, [r3, #12]
   156e6:	2d00      	cmp	r5, #0
   156e8:	d100      	bne.n	156ec <_http_client_request+0x348>
   156ea:	e09a      	b.n	15822 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   156ec:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   156ee:	58e3      	ldr	r3, [r4, r3]
   156f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   156f2:	3a07      	subs	r2, #7
   156f4:	1d71      	adds	r1, r6, #5
   156f6:	0020      	movs	r0, r4
   156f8:	30b0      	adds	r0, #176	; 0xb0
   156fa:	6940      	ldr	r0, [r0, #20]
   156fc:	47a8      	blx	r5
   156fe:	0005      	movs	r5, r0
   15700:	43c3      	mvns	r3, r0
   15702:	17db      	asrs	r3, r3, #31
   15704:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   15706:	220a      	movs	r2, #10
   15708:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1570a:	210d      	movs	r1, #13
   1570c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1570e:	1973      	adds	r3, r6, r5
   15710:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   15712:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   15714:	230f      	movs	r3, #15
   15716:	402b      	ands	r3, r5
   15718:	3206      	adds	r2, #6
   1571a:	3905      	subs	r1, #5
   1571c:	468c      	mov	ip, r1
   1571e:	44bc      	add	ip, r7
   15720:	4462      	add	r2, ip
   15722:	5cd3      	ldrb	r3, [r2, r3]
   15724:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   15726:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   15728:	2d0f      	cmp	r5, #15
   1572a:	dd0d      	ble.n	15748 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   1572c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   1572e:	17eb      	asrs	r3, r5, #31
   15730:	220f      	movs	r2, #15
   15732:	4013      	ands	r3, r2
   15734:	195b      	adds	r3, r3, r5
   15736:	111b      	asrs	r3, r3, #4
   15738:	4013      	ands	r3, r2
   1573a:	3201      	adds	r2, #1
   1573c:	2008      	movs	r0, #8
   1573e:	4684      	mov	ip, r0
   15740:	44bc      	add	ip, r7
   15742:	4462      	add	r2, ip
   15744:	5cd3      	ldrb	r3, [r2, r3]
   15746:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   15748:	2dff      	cmp	r5, #255	; 0xff
   1574a:	dd0d      	ble.n	15768 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   1574c:	17ea      	asrs	r2, r5, #31
   1574e:	23ff      	movs	r3, #255	; 0xff
   15750:	4013      	ands	r3, r2
   15752:	195b      	adds	r3, r3, r5
   15754:	051b      	lsls	r3, r3, #20
   15756:	0f1b      	lsrs	r3, r3, #28
   15758:	2210      	movs	r2, #16
   1575a:	2108      	movs	r1, #8
   1575c:	468c      	mov	ip, r1
   1575e:	44bc      	add	ip, r7
   15760:	4462      	add	r2, ip
   15762:	5cd3      	ldrb	r3, [r2, r3]
   15764:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   15766:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   15768:	1cca      	adds	r2, r1, #3
   1576a:	1b92      	subs	r2, r2, r6
   1576c:	1d2b      	adds	r3, r5, #4
   1576e:	18d2      	adds	r2, r2, r3
   15770:	b292      	uxth	r2, r2
   15772:	2000      	movs	r0, #0
   15774:	5620      	ldrsb	r0, [r4, r0]
   15776:	2300      	movs	r3, #0
   15778:	4e30      	ldr	r6, [pc, #192]	; (1583c <_http_client_request+0x498>)
   1577a:	47b0      	blx	r6
   1577c:	2800      	cmp	r0, #0
   1577e:	db19      	blt.n	157b4 <_http_client_request+0x410>
			module->req.sent_length += size;
   15780:	22d0      	movs	r2, #208	; 0xd0
   15782:	58a3      	ldr	r3, [r4, r2]
   15784:	195b      	adds	r3, r3, r5
   15786:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   15788:	2d00      	cmp	r5, #0
   1578a:	d000      	beq.n	1578e <_http_client_request+0x3ea>
   1578c:	e631      	b.n	153f2 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   1578e:	23c0      	movs	r3, #192	; 0xc0
   15790:	58e3      	ldr	r3, [r4, r3]
   15792:	2b00      	cmp	r3, #0
   15794:	d002      	beq.n	1579c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   15796:	3a0c      	subs	r2, #12
   15798:	58a0      	ldr	r0, [r4, r2]
   1579a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1579c:	2302      	movs	r3, #2
   1579e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   157a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   157a2:	2b00      	cmp	r3, #0
   157a4:	d100      	bne.n	157a8 <_http_client_request+0x404>
   157a6:	e624      	b.n	153f2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   157a8:	220c      	movs	r2, #12
   157aa:	18ba      	adds	r2, r7, r2
   157ac:	2101      	movs	r1, #1
   157ae:	0020      	movs	r0, r4
   157b0:	4798      	blx	r3
   157b2:	e61e      	b.n	153f2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   157b4:	2105      	movs	r1, #5
   157b6:	4249      	negs	r1, r1
   157b8:	0020      	movs	r0, r4
   157ba:	4b21      	ldr	r3, [pc, #132]	; (15840 <_http_client_request+0x49c>)
   157bc:	4798      	blx	r3
   157be:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   157c0:	46bd      	mov	sp, r7
   157c2:	b013      	add	sp, #76	; 0x4c
   157c4:	bc0c      	pop	{r2, r3}
   157c6:	4692      	mov	sl, r2
   157c8:	469b      	mov	fp, r3
   157ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   157cc:	0022      	movs	r2, r4
   157ce:	32b0      	adds	r2, #176	; 0xb0
   157d0:	6950      	ldr	r0, [r2, #20]
   157d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   157d4:	0031      	movs	r1, r6
   157d6:	47a8      	blx	r5
			if (size < 0) {
   157d8:	2800      	cmp	r0, #0
   157da:	db16      	blt.n	1580a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   157dc:	23cc      	movs	r3, #204	; 0xcc
   157de:	58e5      	ldr	r5, [r4, r3]
   157e0:	3304      	adds	r3, #4
   157e2:	58e3      	ldr	r3, [r4, r3]
   157e4:	1aed      	subs	r5, r5, r3
   157e6:	4285      	cmp	r5, r0
   157e8:	dd00      	ble.n	157ec <_http_client_request+0x448>
   157ea:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   157ec:	b2aa      	uxth	r2, r5
   157ee:	2000      	movs	r0, #0
   157f0:	5620      	ldrsb	r0, [r4, r0]
   157f2:	2300      	movs	r3, #0
   157f4:	0031      	movs	r1, r6
   157f6:	4e11      	ldr	r6, [pc, #68]	; (1583c <_http_client_request+0x498>)
   157f8:	47b0      	blx	r6
   157fa:	2800      	cmp	r0, #0
   157fc:	db0b      	blt.n	15816 <_http_client_request+0x472>
				module->req.sent_length += size;
   157fe:	23d0      	movs	r3, #208	; 0xd0
   15800:	58e2      	ldr	r2, [r4, r3]
   15802:	4694      	mov	ip, r2
   15804:	4465      	add	r5, ip
   15806:	50e5      	str	r5, [r4, r3]
   15808:	e5f3      	b.n	153f2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1580a:	2105      	movs	r1, #5
   1580c:	4249      	negs	r1, r1
   1580e:	0020      	movs	r0, r4
   15810:	4b0b      	ldr	r3, [pc, #44]	; (15840 <_http_client_request+0x49c>)
   15812:	4798      	blx	r3
   15814:	e5ed      	b.n	153f2 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   15816:	2105      	movs	r1, #5
   15818:	4249      	negs	r1, r1
   1581a:	0020      	movs	r0, r4
   1581c:	4b08      	ldr	r3, [pc, #32]	; (15840 <_http_client_request+0x49c>)
   1581e:	4798      	blx	r3
					return;
   15820:	e7cd      	b.n	157be <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   15822:	2302      	movs	r3, #2
   15824:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   15826:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15828:	2b00      	cmp	r3, #0
   1582a:	d100      	bne.n	1582e <_http_client_request+0x48a>
   1582c:	e5e1      	b.n	153f2 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1582e:	220c      	movs	r2, #12
   15830:	18ba      	adds	r2, r7, r2
   15832:	2101      	movs	r1, #1
   15834:	0020      	movs	r0, r4
   15836:	4798      	blx	r3
   15838:	e5db      	b.n	153f2 <_http_client_request+0x4e>
   1583a:	46c0      	nop			; (mov r8, r8)
   1583c:	0000f441 	.word	0x0000f441
   15840:	0001528d 	.word	0x0001528d

00015844 <http_client_send_request>:
{
   15844:	b5f0      	push	{r4, r5, r6, r7, lr}
   15846:	46d6      	mov	lr, sl
   15848:	b500      	push	{lr}
   1584a:	b088      	sub	sp, #32
   1584c:	0004      	movs	r4, r0
   1584e:	000f      	movs	r7, r1
   15850:	4692      	mov	sl, r2
   15852:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   15854:	2800      	cmp	r0, #0
   15856:	d100      	bne.n	1585a <http_client_send_request+0x16>
   15858:	e0d3      	b.n	15a02 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   1585a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1585c:	2b02      	cmp	r3, #2
   1585e:	d900      	bls.n	15862 <http_client_send_request+0x1e>
   15860:	e0d3      	b.n	15a0a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   15862:	2207      	movs	r2, #7
   15864:	4981      	ldr	r1, [pc, #516]	; (15a6c <http_client_send_request+0x228>)
   15866:	0038      	movs	r0, r7
   15868:	4b81      	ldr	r3, [pc, #516]	; (15a70 <http_client_send_request+0x22c>)
   1586a:	4798      	blx	r3
		i = 7;
   1586c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   1586e:	2800      	cmp	r0, #0
   15870:	d007      	beq.n	15882 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   15872:	2208      	movs	r2, #8
   15874:	497f      	ldr	r1, [pc, #508]	; (15a74 <http_client_send_request+0x230>)
   15876:	0038      	movs	r0, r7
   15878:	4b7d      	ldr	r3, [pc, #500]	; (15a70 <http_client_send_request+0x22c>)
   1587a:	4798      	blx	r3
		i = 8;
   1587c:	4246      	negs	r6, r0
   1587e:	4146      	adcs	r6, r0
   15880:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   15882:	1c63      	adds	r3, r4, #1
   15884:	19bd      	adds	r5, r7, r6
   15886:	9302      	str	r3, [sp, #8]
   15888:	0018      	movs	r0, r3
   1588a:	4b7b      	ldr	r3, [pc, #492]	; (15a78 <http_client_send_request+0x234>)
   1588c:	4798      	blx	r3
   1588e:	0002      	movs	r2, r0
   15890:	0029      	movs	r1, r5
   15892:	9802      	ldr	r0, [sp, #8]
   15894:	4b76      	ldr	r3, [pc, #472]	; (15a70 <http_client_send_request+0x22c>)
   15896:	4798      	blx	r3
   15898:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1589a:	782b      	ldrb	r3, [r5, #0]
   1589c:	2b00      	cmp	r3, #0
   1589e:	d052      	beq.n	15946 <http_client_send_request+0x102>
   158a0:	2b2f      	cmp	r3, #47	; 0x2f
   158a2:	d052      	beq.n	1594a <http_client_send_request+0x106>
   158a4:	1c71      	adds	r1, r6, #1
   158a6:	1879      	adds	r1, r7, r1
   158a8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   158aa:	3201      	adds	r2, #1
   158ac:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   158ae:	000d      	movs	r5, r1
   158b0:	780b      	ldrb	r3, [r1, #0]
   158b2:	2b00      	cmp	r3, #0
   158b4:	d002      	beq.n	158bc <http_client_send_request+0x78>
   158b6:	3101      	adds	r1, #1
   158b8:	2b2f      	cmp	r3, #47	; 0x2f
   158ba:	d1f6      	bne.n	158aa <http_client_send_request+0x66>
	module->host[j] = '\0';
   158bc:	18a2      	adds	r2, r4, r2
   158be:	2300      	movs	r3, #0
   158c0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   158c2:	7863      	ldrb	r3, [r4, #1]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d100      	bne.n	158ca <http_client_send_request+0x86>
   158c8:	e0a3      	b.n	15a12 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   158ca:	0028      	movs	r0, r5
   158cc:	4b6a      	ldr	r3, [pc, #424]	; (15a78 <http_client_send_request+0x234>)
   158ce:	4798      	blx	r3
   158d0:	283f      	cmp	r0, #63	; 0x3f
   158d2:	d900      	bls.n	158d6 <http_client_send_request+0x92>
   158d4:	e0a1      	b.n	15a1a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   158d6:	23d4      	movs	r3, #212	; 0xd4
   158d8:	58e0      	ldr	r0, [r4, r3]
   158da:	2800      	cmp	r0, #0
   158dc:	d001      	beq.n	158e2 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   158de:	4b67      	ldr	r3, [pc, #412]	; (15a7c <http_client_send_request+0x238>)
   158e0:	4798      	blx	r3
	if (ext_header != NULL) {
   158e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   158e4:	2b00      	cmp	r3, #0
   158e6:	d032      	beq.n	1594e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   158e8:	0018      	movs	r0, r3
   158ea:	4b65      	ldr	r3, [pc, #404]	; (15a80 <http_client_send_request+0x23c>)
   158ec:	4798      	blx	r3
   158ee:	23d4      	movs	r3, #212	; 0xd4
   158f0:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   158f2:	2800      	cmp	r0, #0
   158f4:	d100      	bne.n	158f8 <http_client_send_request+0xb4>
   158f6:	e094      	b.n	15a22 <http_client_send_request+0x1de>
	module->sending = 0;
   158f8:	2241      	movs	r2, #65	; 0x41
   158fa:	5ca3      	ldrb	r3, [r4, r2]
   158fc:	2101      	movs	r1, #1
   158fe:	438b      	bics	r3, r1
   15900:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   15902:	2300      	movs	r3, #0
   15904:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   15906:	782b      	ldrb	r3, [r5, #0]
   15908:	2b2f      	cmp	r3, #47	; 0x2f
   1590a:	d024      	beq.n	15956 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   1590c:	222f      	movs	r2, #47	; 0x2f
   1590e:	2370      	movs	r3, #112	; 0x70
   15910:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   15912:	782b      	ldrb	r3, [r5, #0]
   15914:	2b00      	cmp	r3, #0
   15916:	d124      	bne.n	15962 <http_client_send_request+0x11e>
	if (entity != NULL) {
   15918:	9b03      	ldr	r3, [sp, #12]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d027      	beq.n	1596e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1591e:	0020      	movs	r0, r4
   15920:	30b0      	adds	r0, #176	; 0xb0
   15922:	2218      	movs	r2, #24
   15924:	0019      	movs	r1, r3
   15926:	4b57      	ldr	r3, [pc, #348]	; (15a84 <http_client_send_request+0x240>)
   15928:	4798      	blx	r3
	module->req.method = method;
   1592a:	23c8      	movs	r3, #200	; 0xc8
   1592c:	4652      	mov	r2, sl
   1592e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   15930:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15932:	2b01      	cmp	r3, #1
   15934:	d022      	beq.n	1597c <http_client_send_request+0x138>
   15936:	2b00      	cmp	r3, #0
   15938:	d027      	beq.n	1598a <http_client_send_request+0x146>
   1593a:	2b02      	cmp	r3, #2
   1593c:	d03a      	beq.n	159b4 <http_client_send_request+0x170>
		return -EAGAIN;
   1593e:	230b      	movs	r3, #11
   15940:	425b      	negs	r3, r3
   15942:	9301      	str	r3, [sp, #4]
   15944:	e08d      	b.n	15a62 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   15946:	2200      	movs	r2, #0
   15948:	e7b8      	b.n	158bc <http_client_send_request+0x78>
   1594a:	2200      	movs	r2, #0
   1594c:	e7b6      	b.n	158bc <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   1594e:	2200      	movs	r2, #0
   15950:	23d4      	movs	r3, #212	; 0xd4
   15952:	50e2      	str	r2, [r4, r3]
   15954:	e7d0      	b.n	158f8 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   15956:	0020      	movs	r0, r4
   15958:	3070      	adds	r0, #112	; 0x70
   1595a:	0029      	movs	r1, r5
   1595c:	4b4a      	ldr	r3, [pc, #296]	; (15a88 <http_client_send_request+0x244>)
   1595e:	4798      	blx	r3
   15960:	e7da      	b.n	15918 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   15962:	0029      	movs	r1, r5
   15964:	0020      	movs	r0, r4
   15966:	3071      	adds	r0, #113	; 0x71
   15968:	4b47      	ldr	r3, [pc, #284]	; (15a88 <http_client_send_request+0x244>)
   1596a:	4798      	blx	r3
   1596c:	e7d4      	b.n	15918 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1596e:	0020      	movs	r0, r4
   15970:	30b0      	adds	r0, #176	; 0xb0
   15972:	2218      	movs	r2, #24
   15974:	2100      	movs	r1, #0
   15976:	4b45      	ldr	r3, [pc, #276]	; (15a8c <http_client_send_request+0x248>)
   15978:	4798      	blx	r3
   1597a:	e7d6      	b.n	1592a <http_client_send_request+0xe6>
		if (!reconnect) {
   1597c:	9b01      	ldr	r3, [sp, #4]
   1597e:	2b00      	cmp	r3, #0
   15980:	d06f      	beq.n	15a62 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   15982:	2100      	movs	r1, #0
   15984:	0020      	movs	r0, r4
   15986:	4b42      	ldr	r3, [pc, #264]	; (15a90 <http_client_send_request+0x24c>)
   15988:	4798      	blx	r3
		if (module->config.tls) {
   1598a:	2352      	movs	r3, #82	; 0x52
   1598c:	5ce2      	ldrb	r2, [r4, r3]
   1598e:	1e53      	subs	r3, r2, #1
   15990:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   15992:	b2d2      	uxtb	r2, r2
   15994:	2101      	movs	r1, #1
   15996:	2002      	movs	r0, #2
   15998:	4b3e      	ldr	r3, [pc, #248]	; (15a94 <http_client_send_request+0x250>)
   1599a:	4798      	blx	r3
   1599c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   1599e:	2800      	cmp	r0, #0
   159a0:	db43      	blt.n	15a2a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   159a2:	0080      	lsls	r0, r0, #2
   159a4:	4b3c      	ldr	r3, [pc, #240]	; (15a98 <http_client_send_request+0x254>)
   159a6:	50c4      	str	r4, [r0, r3]
   159a8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   159aa:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   159ac:	2620      	movs	r6, #32
			isv6 = 1;
   159ae:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   159b0:	2730      	movs	r7, #48	; 0x30
   159b2:	e00c      	b.n	159ce <http_client_send_request+0x18a>
		if (!reconnect) {
   159b4:	9b01      	ldr	r3, [sp, #4]
   159b6:	2b00      	cmp	r3, #0
   159b8:	d1e3      	bne.n	15982 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   159ba:	3303      	adds	r3, #3
   159bc:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   159be:	0020      	movs	r0, r4
   159c0:	4b36      	ldr	r3, [pc, #216]	; (15a9c <http_client_send_request+0x258>)
   159c2:	4798      	blx	r3
			break;
   159c4:	e04d      	b.n	15a62 <http_client_send_request+0x21e>
			if (isv6) {
   159c6:	2900      	cmp	r1, #0
   159c8:	d001      	beq.n	159ce <http_client_send_request+0x18a>
   159ca:	e012      	b.n	159f2 <http_client_send_request+0x1ae>
			isv6 = 1;
   159cc:	0001      	movs	r1, r0
	while (*host != '\0') {
   159ce:	782a      	ldrb	r2, [r5, #0]
   159d0:	2a00      	cmp	r2, #0
   159d2:	d02e      	beq.n	15a32 <http_client_send_request+0x1ee>
		ch = *host++;
   159d4:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   159d6:	0013      	movs	r3, r2
   159d8:	43b3      	bics	r3, r6
   159da:	3b41      	subs	r3, #65	; 0x41
   159dc:	2b05      	cmp	r3, #5
   159de:	d9f5      	bls.n	159cc <http_client_send_request+0x188>
   159e0:	2a3a      	cmp	r2, #58	; 0x3a
   159e2:	d00a      	beq.n	159fa <http_client_send_request+0x1b6>
   159e4:	2a2f      	cmp	r2, #47	; 0x2f
   159e6:	d00a      	beq.n	159fe <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   159e8:	2a2e      	cmp	r2, #46	; 0x2e
   159ea:	d0ec      	beq.n	159c6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   159ec:	403a      	ands	r2, r7
   159ee:	2a30      	cmp	r2, #48	; 0x30
   159f0:	d0ed      	beq.n	159ce <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   159f2:	9802      	ldr	r0, [sp, #8]
   159f4:	4b2a      	ldr	r3, [pc, #168]	; (15aa0 <http_client_send_request+0x25c>)
   159f6:	4798      	blx	r3
   159f8:	e02f      	b.n	15a5a <http_client_send_request+0x216>
			isv6 = 1;
   159fa:	0001      	movs	r1, r0
   159fc:	e7e7      	b.n	159ce <http_client_send_request+0x18a>
   159fe:	0001      	movs	r1, r0
   15a00:	e7e5      	b.n	159ce <http_client_send_request+0x18a>
		return -EINVAL;
   15a02:	2316      	movs	r3, #22
   15a04:	425b      	negs	r3, r3
   15a06:	9301      	str	r3, [sp, #4]
   15a08:	e02b      	b.n	15a62 <http_client_send_request+0x21e>
		return -EBUSY;
   15a0a:	2310      	movs	r3, #16
   15a0c:	425b      	negs	r3, r3
   15a0e:	9301      	str	r3, [sp, #4]
   15a10:	e027      	b.n	15a62 <http_client_send_request+0x21e>
		return -EINVAL;
   15a12:	2316      	movs	r3, #22
   15a14:	425b      	negs	r3, r3
   15a16:	9301      	str	r3, [sp, #4]
   15a18:	e023      	b.n	15a62 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   15a1a:	235b      	movs	r3, #91	; 0x5b
   15a1c:	425b      	negs	r3, r3
   15a1e:	9301      	str	r3, [sp, #4]
   15a20:	e01f      	b.n	15a62 <http_client_send_request+0x21e>
			return -ENOMEM;
   15a22:	230c      	movs	r3, #12
   15a24:	425b      	negs	r3, r3
   15a26:	9301      	str	r3, [sp, #4]
   15a28:	e01b      	b.n	15a62 <http_client_send_request+0x21e>
			return -ENOSPC;
   15a2a:	231c      	movs	r3, #28
   15a2c:	425b      	negs	r3, r3
   15a2e:	9301      	str	r3, [sp, #4]
   15a30:	e017      	b.n	15a62 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   15a32:	2302      	movs	r3, #2
   15a34:	aa04      	add	r2, sp, #16
   15a36:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15a38:	334e      	adds	r3, #78	; 0x4e
   15a3a:	5ae3      	ldrh	r3, [r4, r3]
   15a3c:	021a      	lsls	r2, r3, #8
   15a3e:	0a1b      	lsrs	r3, r3, #8
   15a40:	4313      	orrs	r3, r2
   15a42:	aa04      	add	r2, sp, #16
   15a44:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   15a46:	9802      	ldr	r0, [sp, #8]
   15a48:	4b16      	ldr	r3, [pc, #88]	; (15aa4 <http_client_send_request+0x260>)
   15a4a:	4798      	blx	r3
   15a4c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15a4e:	2000      	movs	r0, #0
   15a50:	5620      	ldrsb	r0, [r4, r0]
   15a52:	2210      	movs	r2, #16
   15a54:	a904      	add	r1, sp, #16
   15a56:	4b14      	ldr	r3, [pc, #80]	; (15aa8 <http_client_send_request+0x264>)
   15a58:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   15a5a:	2301      	movs	r3, #1
   15a5c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   15a5e:	2300      	movs	r3, #0
   15a60:	9301      	str	r3, [sp, #4]
}
   15a62:	9801      	ldr	r0, [sp, #4]
   15a64:	b008      	add	sp, #32
   15a66:	bc04      	pop	{r2}
   15a68:	4692      	mov	sl, r2
   15a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a6c:	0001a43c 	.word	0x0001a43c
   15a70:	00017909 	.word	0x00017909
   15a74:	0001a444 	.word	0x0001a444
   15a78:	000178fb 	.word	0x000178fb
   15a7c:	00017389 	.word	0x00017389
   15a80:	000178c1 	.word	0x000178c1
   15a84:	0001739d 	.word	0x0001739d
   15a88:	000178b1 	.word	0x000178b1
   15a8c:	000173d3 	.word	0x000173d3
   15a90:	0001528d 	.word	0x0001528d
   15a94:	0000f22d 	.word	0x0000f22d
   15a98:	200007fc 	.word	0x200007fc
   15a9c:	000153a5 	.word	0x000153a5
   15aa0:	0000f675 	.word	0x0000f675
   15aa4:	0000f609 	.word	0x0000f609
   15aa8:	0000f3b1 	.word	0x0000f3b1

00015aac <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   15aac:	b510      	push	{r4, lr}
	if (module == NULL) {
   15aae:	2800      	cmp	r0, #0
   15ab0:	d00d      	beq.n	15ace <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   15ab2:	6c41      	ldr	r1, [r0, #68]	; 0x44
   15ab4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15ab6:	4291      	cmp	r1, r2
   15ab8:	d20a      	bcs.n	15ad0 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   15aba:	1a52      	subs	r2, r2, r1
   15abc:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   15abe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15ac0:	469c      	mov	ip, r3
   15ac2:	4461      	add	r1, ip
	recv(module->sock,
   15ac4:	7800      	ldrb	r0, [r0, #0]
   15ac6:	b240      	sxtb	r0, r0
   15ac8:	2300      	movs	r3, #0
   15aca:	4c04      	ldr	r4, [pc, #16]	; (15adc <_http_client_recv_packet+0x30>)
   15acc:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   15ace:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   15ad0:	218b      	movs	r1, #139	; 0x8b
   15ad2:	4249      	negs	r1, r1
   15ad4:	4b02      	ldr	r3, [pc, #8]	; (15ae0 <_http_client_recv_packet+0x34>)
   15ad6:	4798      	blx	r3
		return;
   15ad8:	e7f9      	b.n	15ace <_http_client_recv_packet+0x22>
   15ada:	46c0      	nop			; (mov r8, r8)
   15adc:	0000f4d9 	.word	0x0000f4d9
   15ae0:	0001528d 	.word	0x0001528d

00015ae4 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   15ae4:	b570      	push	{r4, r5, r6, lr}
   15ae6:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   15ae8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   15aea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   15aec:	1a5c      	subs	r4, r3, r1
   15aee:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   15af0:	2c00      	cmp	r4, #0
   15af2:	dc02      	bgt.n	15afa <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   15af4:	2300      	movs	r3, #0
   15af6:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   15af8:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   15afa:	0022      	movs	r2, r4
   15afc:	4b01      	ldr	r3, [pc, #4]	; (15b04 <_http_client_move_buffer+0x20>)
   15afe:	4798      	blx	r3
		module->recved_size = remain;
   15b00:	646c      	str	r4, [r5, #68]	; 0x44
   15b02:	e7f9      	b.n	15af8 <_http_client_move_buffer+0x14>
   15b04:	000173af 	.word	0x000173af

00015b08 <_http_client_handle_header>:
{
   15b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b0a:	46ce      	mov	lr, r9
   15b0c:	b500      	push	{lr}
   15b0e:	b084      	sub	sp, #16
   15b10:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   15b12:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   15b14:	4b62      	ldr	r3, [pc, #392]	; (15ca0 <_http_client_handle_header+0x198>)
   15b16:	4699      	mov	r9, r3
   15b18:	e049      	b.n	15bae <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   15b1a:	0021      	movs	r1, r4
   15b1c:	0038      	movs	r0, r7
   15b1e:	4b61      	ldr	r3, [pc, #388]	; (15ca4 <_http_client_handle_header+0x19c>)
   15b20:	4798      	blx	r3
			return 0;
   15b22:	2600      	movs	r6, #0
}
   15b24:	0030      	movs	r0, r6
   15b26:	b004      	add	sp, #16
   15b28:	bc04      	pop	{r2}
   15b2a:	4691      	mov	r9, r2
   15b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   15b2e:	1ca1      	adds	r1, r4, #2
   15b30:	0038      	movs	r0, r7
   15b32:	4b5c      	ldr	r3, [pc, #368]	; (15ca4 <_http_client_handle_header+0x19c>)
   15b34:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   15b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d00a      	beq.n	15b52 <_http_client_handle_header+0x4a>
   15b3c:	22e4      	movs	r2, #228	; 0xe4
   15b3e:	5ab9      	ldrh	r1, [r7, r2]
   15b40:	2900      	cmp	r1, #0
   15b42:	d006      	beq.n	15b52 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   15b44:	3a08      	subs	r2, #8
   15b46:	58b8      	ldr	r0, [r7, r2]
   15b48:	2800      	cmp	r0, #0
   15b4a:	db07      	blt.n	15b5c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   15b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   15b4e:	4290      	cmp	r0, r2
   15b50:	dc10      	bgt.n	15b74 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   15b52:	2201      	movs	r2, #1
   15b54:	23d8      	movs	r3, #216	; 0xd8
   15b56:	50fa      	str	r2, [r7, r3]
			return 1;
   15b58:	2601      	movs	r6, #1
   15b5a:	e7e3      	b.n	15b24 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   15b5c:	aa01      	add	r2, sp, #4
   15b5e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   15b60:	2101      	movs	r1, #1
   15b62:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   15b64:	2100      	movs	r1, #0
   15b66:	20e0      	movs	r0, #224	; 0xe0
   15b68:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   15b6a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15b6c:	3102      	adds	r1, #2
   15b6e:	0038      	movs	r0, r7
   15b70:	4798      	blx	r3
   15b72:	e7ee      	b.n	15b52 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   15b74:	aa01      	add	r2, sp, #4
   15b76:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   15b78:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   15b7a:	2100      	movs	r1, #0
   15b7c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   15b7e:	20e0      	movs	r0, #224	; 0xe0
   15b80:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15b82:	3102      	adds	r1, #2
   15b84:	0038      	movs	r0, r7
   15b86:	4798      	blx	r3
   15b88:	e7e3      	b.n	15b52 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   15b8a:	0020      	movs	r0, r4
   15b8c:	3010      	adds	r0, #16
   15b8e:	4b46      	ldr	r3, [pc, #280]	; (15ca8 <_http_client_handle_header+0x1a0>)
   15b90:	4798      	blx	r3
   15b92:	23dc      	movs	r3, #220	; 0xdc
   15b94:	50f8      	str	r0, [r7, r3]
   15b96:	e009      	b.n	15bac <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15b98:	3201      	adds	r2, #1
   15b9a:	4295      	cmp	r5, r2
   15b9c:	d006      	beq.n	15bac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15b9e:	7813      	ldrb	r3, [r2, #0]
   15ba0:	2b20      	cmp	r3, #32
   15ba2:	d12b      	bne.n	15bfc <_http_client_handle_header+0xf4>
   15ba4:	e7f8      	b.n	15b98 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   15ba6:	3a21      	subs	r2, #33	; 0x21
   15ba8:	3389      	adds	r3, #137	; 0x89
   15baa:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   15bac:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   15bae:	493f      	ldr	r1, [pc, #252]	; (15cac <_http_client_handle_header+0x1a4>)
   15bb0:	0020      	movs	r0, r4
   15bb2:	47c8      	blx	r9
   15bb4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   15bb6:	d0b0      	beq.n	15b1a <_http_client_handle_header+0x12>
   15bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15bbc:	4694      	mov	ip, r2
   15bbe:	4463      	add	r3, ip
   15bc0:	4298      	cmp	r0, r3
   15bc2:	d2aa      	bcs.n	15b1a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   15bc4:	2202      	movs	r2, #2
   15bc6:	4939      	ldr	r1, [pc, #228]	; (15cac <_http_client_handle_header+0x1a4>)
   15bc8:	0020      	movs	r0, r4
   15bca:	4b39      	ldr	r3, [pc, #228]	; (15cb0 <_http_client_handle_header+0x1a8>)
   15bcc:	4798      	blx	r3
   15bce:	2800      	cmp	r0, #0
   15bd0:	d0ad      	beq.n	15b2e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   15bd2:	2210      	movs	r2, #16
   15bd4:	4937      	ldr	r1, [pc, #220]	; (15cb4 <_http_client_handle_header+0x1ac>)
   15bd6:	0020      	movs	r0, r4
   15bd8:	4b35      	ldr	r3, [pc, #212]	; (15cb0 <_http_client_handle_header+0x1a8>)
   15bda:	4798      	blx	r3
   15bdc:	2800      	cmp	r0, #0
   15bde:	d0d4      	beq.n	15b8a <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   15be0:	2213      	movs	r2, #19
   15be2:	4935      	ldr	r1, [pc, #212]	; (15cb8 <_http_client_handle_header+0x1b0>)
   15be4:	0020      	movs	r0, r4
   15be6:	4b32      	ldr	r3, [pc, #200]	; (15cb0 <_http_client_handle_header+0x1a8>)
   15be8:	4798      	blx	r3
   15bea:	1e06      	subs	r6, r0, #0
   15bec:	d110      	bne.n	15c10 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   15bee:	0022      	movs	r2, r4
   15bf0:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15bf2:	4295      	cmp	r5, r2
   15bf4:	d9da      	bls.n	15bac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15bf6:	7ce3      	ldrb	r3, [r4, #19]
   15bf8:	2b20      	cmp	r3, #32
   15bfa:	d0cd      	beq.n	15b98 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   15bfc:	2220      	movs	r2, #32
   15bfe:	4393      	bics	r3, r2
   15c00:	2b43      	cmp	r3, #67	; 0x43
   15c02:	d0d0      	beq.n	15ba6 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   15c04:	2186      	movs	r1, #134	; 0x86
   15c06:	4249      	negs	r1, r1
   15c08:	0038      	movs	r0, r7
   15c0a:	4b2c      	ldr	r3, [pc, #176]	; (15cbc <_http_client_handle_header+0x1b4>)
   15c0c:	4798      	blx	r3
					return 0;
   15c0e:	e789      	b.n	15b24 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   15c10:	220c      	movs	r2, #12
   15c12:	492b      	ldr	r1, [pc, #172]	; (15cc0 <_http_client_handle_header+0x1b8>)
   15c14:	0020      	movs	r0, r4
   15c16:	4b26      	ldr	r3, [pc, #152]	; (15cb0 <_http_client_handle_header+0x1a8>)
   15c18:	4798      	blx	r3
   15c1a:	2800      	cmp	r0, #0
   15c1c:	d11d      	bne.n	15c5a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   15c1e:	0022      	movs	r2, r4
   15c20:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15c22:	4295      	cmp	r5, r2
   15c24:	d9c2      	bls.n	15bac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15c26:	7b23      	ldrb	r3, [r4, #12]
   15c28:	2b20      	cmp	r3, #32
   15c2a:	d009      	beq.n	15c40 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   15c2c:	2220      	movs	r2, #32
   15c2e:	4393      	bics	r3, r2
   15c30:	2b4b      	cmp	r3, #75	; 0x4b
   15c32:	d00c      	beq.n	15c4e <_http_client_handle_header+0x146>
					module->permanent = 0;
   15c34:	2241      	movs	r2, #65	; 0x41
   15c36:	5cbb      	ldrb	r3, [r7, r2]
   15c38:	2102      	movs	r1, #2
   15c3a:	438b      	bics	r3, r1
   15c3c:	54bb      	strb	r3, [r7, r2]
   15c3e:	e7b5      	b.n	15bac <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15c40:	3201      	adds	r2, #1
   15c42:	4295      	cmp	r5, r2
   15c44:	d0b2      	beq.n	15bac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15c46:	7813      	ldrb	r3, [r2, #0]
   15c48:	2b20      	cmp	r3, #32
   15c4a:	d1ef      	bne.n	15c2c <_http_client_handle_header+0x124>
   15c4c:	e7f8      	b.n	15c40 <_http_client_handle_header+0x138>
					module->permanent = 1;
   15c4e:	3221      	adds	r2, #33	; 0x21
   15c50:	5cbb      	ldrb	r3, [r7, r2]
   15c52:	2102      	movs	r1, #2
   15c54:	430b      	orrs	r3, r1
   15c56:	54bb      	strb	r3, [r7, r2]
   15c58:	e7a8      	b.n	15bac <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   15c5a:	2205      	movs	r2, #5
   15c5c:	4919      	ldr	r1, [pc, #100]	; (15cc4 <_http_client_handle_header+0x1bc>)
   15c5e:	0020      	movs	r0, r4
   15c60:	4b13      	ldr	r3, [pc, #76]	; (15cb0 <_http_client_handle_header+0x1a8>)
   15c62:	4798      	blx	r3
   15c64:	2800      	cmp	r0, #0
   15c66:	d1a1      	bne.n	15bac <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   15c68:	0020      	movs	r0, r4
   15c6a:	3009      	adds	r0, #9
   15c6c:	4b0e      	ldr	r3, [pc, #56]	; (15ca8 <_http_client_handle_header+0x1a0>)
   15c6e:	4798      	blx	r3
   15c70:	23e4      	movs	r3, #228	; 0xe4
   15c72:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   15c74:	2200      	movs	r2, #0
   15c76:	3b08      	subs	r3, #8
   15c78:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   15c7a:	7963      	ldrb	r3, [r4, #5]
   15c7c:	2b31      	cmp	r3, #49	; 0x31
   15c7e:	d802      	bhi.n	15c86 <_http_client_handle_header+0x17e>
   15c80:	79e3      	ldrb	r3, [r4, #7]
   15c82:	2b30      	cmp	r3, #48	; 0x30
   15c84:	d905      	bls.n	15c92 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   15c86:	2241      	movs	r2, #65	; 0x41
   15c88:	5cbb      	ldrb	r3, [r7, r2]
   15c8a:	2102      	movs	r1, #2
   15c8c:	430b      	orrs	r3, r1
   15c8e:	54bb      	strb	r3, [r7, r2]
   15c90:	e78c      	b.n	15bac <_http_client_handle_header+0xa4>
				module->permanent = 0;
   15c92:	2241      	movs	r2, #65	; 0x41
   15c94:	5cbb      	ldrb	r3, [r7, r2]
   15c96:	2102      	movs	r1, #2
   15c98:	438b      	bics	r3, r1
   15c9a:	54bb      	strb	r3, [r7, r2]
   15c9c:	e786      	b.n	15bac <_http_client_handle_header+0xa4>
   15c9e:	46c0      	nop			; (mov r8, r8)
   15ca0:	0001792b 	.word	0x0001792b
   15ca4:	00015ae5 	.word	0x00015ae5
   15ca8:	00017321 	.word	0x00017321
   15cac:	0001a87c 	.word	0x0001a87c
   15cb0:	00017909 	.word	0x00017909
   15cb4:	0001a41c 	.word	0x0001a41c
   15cb8:	0001a32c 	.word	0x0001a32c
   15cbc:	0001528d 	.word	0x0001528d
   15cc0:	0001a340 	.word	0x0001a340
   15cc4:	0001a350 	.word	0x0001a350

00015cc8 <_http_client_handle_entity>:
{
   15cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cca:	46ce      	mov	lr, r9
   15ccc:	b500      	push	{lr}
   15cce:	b086      	sub	sp, #24
   15cd0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   15cd2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   15cd4:	23dc      	movs	r3, #220	; 0xdc
   15cd6:	58c3      	ldr	r3, [r0, r3]
   15cd8:	2b00      	cmp	r3, #0
   15cda:	db69      	blt.n	15db0 <_http_client_handle_entity+0xe8>
   15cdc:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15cde:	4293      	cmp	r3, r2
   15ce0:	dc2b      	bgt.n	15d3a <_http_client_handle_entity+0x72>
	return 0;
   15ce2:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   15ce4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   15ce6:	4293      	cmp	r3, r2
   15ce8:	dc4e      	bgt.n	15d88 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   15cea:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   15cec:	2e00      	cmp	r6, #0
   15cee:	d003      	beq.n	15cf8 <_http_client_handle_entity+0x30>
   15cf0:	22e4      	movs	r2, #228	; 0xe4
   15cf2:	5aa1      	ldrh	r1, [r4, r2]
   15cf4:	2900      	cmp	r1, #0
   15cf6:	d10e      	bne.n	15d16 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   15cf8:	2300      	movs	r3, #0
   15cfa:	22d8      	movs	r2, #216	; 0xd8
   15cfc:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   15cfe:	320c      	adds	r2, #12
   15d00:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   15d02:	3341      	adds	r3, #65	; 0x41
   15d04:	5ce3      	ldrb	r3, [r4, r3]
   15d06:	079b      	lsls	r3, r3, #30
   15d08:	d40f      	bmi.n	15d2a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   15d0a:	2100      	movs	r1, #0
   15d0c:	0020      	movs	r0, r4
   15d0e:	4b71      	ldr	r3, [pc, #452]	; (15ed4 <_http_client_handle_entity+0x20c>)
   15d10:	4798      	blx	r3
	return 0;
   15d12:	2000      	movs	r0, #0
   15d14:	e038      	b.n	15d88 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   15d16:	aa03      	add	r2, sp, #12
   15d18:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   15d1a:	2100      	movs	r1, #0
   15d1c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   15d1e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   15d20:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15d22:	3102      	adds	r1, #2
   15d24:	0020      	movs	r0, r4
   15d26:	47b0      	blx	r6
   15d28:	e7e6      	b.n	15cf8 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   15d2a:	23dc      	movs	r3, #220	; 0xdc
   15d2c:	58e1      	ldr	r1, [r4, r3]
   15d2e:	1869      	adds	r1, r5, r1
   15d30:	0020      	movs	r0, r4
   15d32:	4b69      	ldr	r3, [pc, #420]	; (15ed8 <_http_client_handle_entity+0x210>)
   15d34:	4798      	blx	r3
				return module->recved_size;
   15d36:	6c60      	ldr	r0, [r4, #68]	; 0x44
   15d38:	e026      	b.n	15d88 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   15d3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15d3c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   15d3e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   15d40:	21e0      	movs	r1, #224	; 0xe0
   15d42:	5840      	ldr	r0, [r0, r1]
   15d44:	4684      	mov	ip, r0
   15d46:	4462      	add	r2, ip
   15d48:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   15d4a:	4293      	cmp	r3, r2
   15d4c:	dc20      	bgt.n	15d90 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   15d4e:	2300      	movs	r3, #0
   15d50:	22d8      	movs	r2, #216	; 0xd8
   15d52:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15d54:	320c      	adds	r2, #12
   15d56:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15d58:	3ae3      	subs	r2, #227	; 0xe3
   15d5a:	ab03      	add	r3, sp, #12
   15d5c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15d5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15d60:	2b00      	cmp	r3, #0
   15d62:	d007      	beq.n	15d74 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15d64:	ae03      	add	r6, sp, #12
   15d66:	0032      	movs	r2, r6
   15d68:	2103      	movs	r1, #3
   15d6a:	0020      	movs	r0, r4
   15d6c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   15d6e:	7a33      	ldrb	r3, [r6, #8]
   15d70:	2b01      	cmp	r3, #1
   15d72:	d103      	bne.n	15d7c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   15d74:	2341      	movs	r3, #65	; 0x41
   15d76:	5ce3      	ldrb	r3, [r4, r3]
   15d78:	079b      	lsls	r3, r3, #30
   15d7a:	d510      	bpl.n	15d9e <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   15d7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15d7e:	18e9      	adds	r1, r5, r3
   15d80:	0020      	movs	r0, r4
   15d82:	4b55      	ldr	r3, [pc, #340]	; (15ed8 <_http_client_handle_entity+0x210>)
   15d84:	4798      	blx	r3
	return 0;
   15d86:	2000      	movs	r0, #0
}
   15d88:	b006      	add	sp, #24
   15d8a:	bc04      	pop	{r2}
   15d8c:	4691      	mov	r9, r2
   15d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   15d90:	2200      	movs	r2, #0
   15d92:	ab03      	add	r3, sp, #12
   15d94:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15d96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15d98:	2b00      	cmp	r3, #0
   15d9a:	d0ef      	beq.n	15d7c <_http_client_handle_entity+0xb4>
   15d9c:	e7e2      	b.n	15d64 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   15d9e:	484f      	ldr	r0, [pc, #316]	; (15edc <_http_client_handle_entity+0x214>)
   15da0:	4b4f      	ldr	r3, [pc, #316]	; (15ee0 <_http_client_handle_entity+0x218>)
   15da2:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   15da4:	2100      	movs	r1, #0
   15da6:	0020      	movs	r0, r4
   15da8:	4b4a      	ldr	r3, [pc, #296]	; (15ed4 <_http_client_handle_entity+0x20c>)
   15daa:	4798      	blx	r3
					return 0;
   15dac:	2000      	movs	r0, #0
   15dae:	e7eb      	b.n	15d88 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   15db0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   15db2:	2300      	movs	r3, #0
   15db4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   15db6:	26e0      	movs	r6, #224	; 0xe0
   15db8:	e00a      	b.n	15dd0 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   15dba:	2341      	movs	r3, #65	; 0x41
   15dbc:	5ce3      	ldrb	r3, [r4, r3]
   15dbe:	079b      	lsls	r3, r3, #30
   15dc0:	d51b      	bpl.n	15dfa <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   15dc2:	1ca9      	adds	r1, r5, #2
   15dc4:	0020      	movs	r0, r4
   15dc6:	4b44      	ldr	r3, [pc, #272]	; (15ed8 <_http_client_handle_entity+0x210>)
   15dc8:	4798      	blx	r3
	} while(module->recved_size > 0);
   15dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15dcc:	2b00      	cmp	r3, #0
   15dce:	d073      	beq.n	15eb8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   15dd0:	59a3      	ldr	r3, [r4, r6]
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	db30      	blt.n	15e38 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   15dd6:	d116      	bne.n	15e06 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   15dd8:	22d8      	movs	r2, #216	; 0xd8
   15dda:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15ddc:	320c      	adds	r2, #12
   15dde:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15de0:	3ae3      	subs	r2, #227	; 0xe3
   15de2:	4669      	mov	r1, sp
   15de4:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   15de6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   15de8:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   15dea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15dec:	2b00      	cmp	r3, #0
   15dee:	d0e4      	beq.n	15dba <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15df0:	466a      	mov	r2, sp
   15df2:	2103      	movs	r1, #3
   15df4:	0020      	movs	r0, r4
   15df6:	4798      	blx	r3
   15df8:	e7df      	b.n	15dba <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   15dfa:	2100      	movs	r1, #0
   15dfc:	0020      	movs	r0, r4
   15dfe:	4b35      	ldr	r3, [pc, #212]	; (15ed4 <_http_client_handle_entity+0x20c>)
   15e00:	4798      	blx	r3
	return 0;
   15e02:	2000      	movs	r0, #0
   15e04:	e7c0      	b.n	15d88 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   15e06:	42bb      	cmp	r3, r7
   15e08:	dcdf      	bgt.n	15dca <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   15e0a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   15e0c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   15e0e:	2300      	movs	r3, #0
   15e10:	466a      	mov	r2, sp
   15e12:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   15e14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15e16:	2b00      	cmp	r3, #0
   15e18:	d002      	beq.n	15e20 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15e1a:	2103      	movs	r1, #3
   15e1c:	0020      	movs	r0, r4
   15e1e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   15e20:	59a3      	ldr	r3, [r4, r6]
   15e22:	1c99      	adds	r1, r3, #2
   15e24:	1869      	adds	r1, r5, r1
   15e26:	0020      	movs	r0, r4
   15e28:	4b2b      	ldr	r3, [pc, #172]	; (15ed8 <_http_client_handle_entity+0x210>)
   15e2a:	4798      	blx	r3
				length = (int)module->recved_size;
   15e2c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   15e2e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   15e30:	2301      	movs	r3, #1
   15e32:	425b      	negs	r3, r3
   15e34:	51a3      	str	r3, [r4, r6]
   15e36:	e7c8      	b.n	15dca <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   15e38:	2300      	movs	r3, #0
   15e3a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15e3c:	2f00      	cmp	r7, #0
   15e3e:	dd04      	ble.n	15e4a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   15e40:	782b      	ldrb	r3, [r5, #0]
   15e42:	2b0a      	cmp	r3, #10
   15e44:	d11c      	bne.n	15e80 <_http_client_handle_entity+0x1b8>
					buffer++;
   15e46:	3501      	adds	r5, #1
					length--;
   15e48:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15e4a:	59a3      	ldr	r3, [r4, r6]
   15e4c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15e4e:	4293      	cmp	r3, r2
   15e50:	dc39      	bgt.n	15ec6 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   15e52:	2f00      	cmp	r7, #0
   15e54:	d1b9      	bne.n	15dca <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   15e56:	2201      	movs	r2, #1
   15e58:	4252      	negs	r2, r2
   15e5a:	23e0      	movs	r3, #224	; 0xe0
   15e5c:	50e2      	str	r2, [r4, r3]
   15e5e:	e7d0      	b.n	15e02 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   15e60:	001a      	movs	r2, r3
   15e62:	3a61      	subs	r2, #97	; 0x61
   15e64:	2a05      	cmp	r2, #5
   15e66:	d818      	bhi.n	15e9a <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   15e68:	59a2      	ldr	r2, [r4, r6]
   15e6a:	0112      	lsls	r2, r2, #4
   15e6c:	18d3      	adds	r3, r2, r3
   15e6e:	3b61      	subs	r3, #97	; 0x61
   15e70:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15e72:	3501      	adds	r5, #1
   15e74:	3f01      	subs	r7, #1
   15e76:	2f00      	cmp	r7, #0
   15e78:	d020      	beq.n	15ebc <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   15e7a:	782b      	ldrb	r3, [r5, #0]
   15e7c:	2b0a      	cmp	r3, #10
   15e7e:	d0e2      	beq.n	15e46 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   15e80:	464a      	mov	r2, r9
   15e82:	2a00      	cmp	r2, #0
   15e84:	d1f5      	bne.n	15e72 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   15e86:	001a      	movs	r2, r3
   15e88:	3a30      	subs	r2, #48	; 0x30
   15e8a:	2a09      	cmp	r2, #9
   15e8c:	d8e8      	bhi.n	15e60 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   15e8e:	59a2      	ldr	r2, [r4, r6]
   15e90:	0112      	lsls	r2, r2, #4
   15e92:	18d3      	adds	r3, r2, r3
   15e94:	3b30      	subs	r3, #48	; 0x30
   15e96:	51a3      	str	r3, [r4, r6]
   15e98:	e7eb      	b.n	15e72 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   15e9a:	001a      	movs	r2, r3
   15e9c:	3a41      	subs	r2, #65	; 0x41
   15e9e:	2a05      	cmp	r2, #5
   15ea0:	d805      	bhi.n	15eae <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   15ea2:	59a2      	ldr	r2, [r4, r6]
   15ea4:	0112      	lsls	r2, r2, #4
   15ea6:	18d3      	adds	r3, r2, r3
   15ea8:	3b41      	subs	r3, #65	; 0x41
   15eaa:	51a3      	str	r3, [r4, r6]
   15eac:	e7e1      	b.n	15e72 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   15eae:	3b3b      	subs	r3, #59	; 0x3b
   15eb0:	425a      	negs	r2, r3
   15eb2:	415a      	adcs	r2, r3
   15eb4:	4691      	mov	r9, r2
   15eb6:	e7dc      	b.n	15e72 <_http_client_handle_entity+0x1aa>
	return 0;
   15eb8:	2000      	movs	r0, #0
   15eba:	e765      	b.n	15d88 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15ebc:	23e0      	movs	r3, #224	; 0xe0
   15ebe:	58e3      	ldr	r3, [r4, r3]
   15ec0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15ec2:	4293      	cmp	r3, r2
   15ec4:	ddc7      	ble.n	15e56 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   15ec6:	218b      	movs	r1, #139	; 0x8b
   15ec8:	4249      	negs	r1, r1
   15eca:	0020      	movs	r0, r4
   15ecc:	4b01      	ldr	r3, [pc, #4]	; (15ed4 <_http_client_handle_entity+0x20c>)
   15ece:	4798      	blx	r3
   15ed0:	e797      	b.n	15e02 <_http_client_handle_entity+0x13a>
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	0001528d 	.word	0x0001528d
   15ed8:	00015ae5 	.word	0x00015ae5
   15edc:	0001a328 	.word	0x0001a328
   15ee0:	00017651 	.word	0x00017651

00015ee4 <_http_client_handle_response>:
{
   15ee4:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   15ee6:	23d8      	movs	r3, #216	; 0xd8
   15ee8:	58c3      	ldr	r3, [r0, r3]
   15eea:	2b00      	cmp	r3, #0
   15eec:	d003      	beq.n	15ef6 <_http_client_handle_response+0x12>
   15eee:	2b01      	cmp	r3, #1
   15ef0:	d004      	beq.n	15efc <_http_client_handle_response+0x18>
	return 0;
   15ef2:	2000      	movs	r0, #0
   15ef4:	e001      	b.n	15efa <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   15ef6:	4b03      	ldr	r3, [pc, #12]	; (15f04 <_http_client_handle_response+0x20>)
   15ef8:	4798      	blx	r3
}
   15efa:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   15efc:	4b02      	ldr	r3, [pc, #8]	; (15f08 <_http_client_handle_response+0x24>)
   15efe:	4798      	blx	r3
   15f00:	e7fb      	b.n	15efa <_http_client_handle_response+0x16>
   15f02:	46c0      	nop			; (mov r8, r8)
   15f04:	00015b09 	.word	0x00015b09
   15f08:	00015cc9 	.word	0x00015cc9

00015f0c <_http_client_recved_packet>:
{
   15f0c:	b570      	push	{r4, r5, r6, lr}
   15f0e:	0004      	movs	r4, r0
	module->recved_size += read_len;
   15f10:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15f12:	469c      	mov	ip, r3
   15f14:	4461      	add	r1, ip
   15f16:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   15f18:	2358      	movs	r3, #88	; 0x58
   15f1a:	5ac3      	ldrh	r3, [r0, r3]
   15f1c:	2b00      	cmp	r3, #0
   15f1e:	d105      	bne.n	15f2c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   15f20:	4d05      	ldr	r5, [pc, #20]	; (15f38 <_http_client_recved_packet+0x2c>)
   15f22:	0020      	movs	r0, r4
   15f24:	47a8      	blx	r5
   15f26:	2800      	cmp	r0, #0
   15f28:	d1fb      	bne.n	15f22 <_http_client_recved_packet+0x16>
}
   15f2a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   15f2c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   15f2e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   15f30:	4b02      	ldr	r3, [pc, #8]	; (15f3c <_http_client_recved_packet+0x30>)
   15f32:	4798      	blx	r3
   15f34:	e7f4      	b.n	15f20 <_http_client_recved_packet+0x14>
   15f36:	46c0      	nop			; (mov r8, r8)
   15f38:	00015ee5 	.word	0x00015ee5
   15f3c:	000162b9 	.word	0x000162b9

00015f40 <http_client_socket_event_handler>:
{
   15f40:	b510      	push	{r4, lr}
   15f42:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   15f44:	0080      	lsls	r0, r0, #2
   15f46:	4b65      	ldr	r3, [pc, #404]	; (160dc <http_client_socket_event_handler+0x19c>)
   15f48:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   15f4a:	2c00      	cmp	r4, #0
   15f4c:	d006      	beq.n	15f5c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   15f4e:	2906      	cmp	r1, #6
   15f50:	d051      	beq.n	15ff6 <http_client_socket_event_handler+0xb6>
   15f52:	2907      	cmp	r1, #7
   15f54:	d100      	bne.n	15f58 <http_client_socket_event_handler+0x18>
   15f56:	e08a      	b.n	1606e <http_client_socket_event_handler+0x12e>
   15f58:	2905      	cmp	r1, #5
   15f5a:	d001      	beq.n	15f60 <http_client_socket_event_handler+0x20>
}
   15f5c:	b004      	add	sp, #16
   15f5e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   15f60:	2301      	movs	r3, #1
   15f62:	56d3      	ldrsb	r3, [r2, r3]
   15f64:	1e1a      	subs	r2, r3, #0
   15f66:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   15f68:	db15      	blt.n	15f96 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   15f6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d003      	beq.n	15f78 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   15f70:	aa01      	add	r2, sp, #4
   15f72:	2100      	movs	r1, #0
   15f74:	0020      	movs	r0, r4
   15f76:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   15f78:	2303      	movs	r3, #3
   15f7a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   15f7c:	3355      	adds	r3, #85	; 0x55
   15f7e:	5ae2      	ldrh	r2, [r4, r3]
   15f80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   15f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15f84:	4b56      	ldr	r3, [pc, #344]	; (160e0 <http_client_socket_event_handler+0x1a0>)
   15f86:	4798      	blx	r3
    		_http_client_recv_packet(module);
   15f88:	0020      	movs	r0, r4
   15f8a:	4b56      	ldr	r3, [pc, #344]	; (160e4 <http_client_socket_event_handler+0x1a4>)
   15f8c:	4798      	blx	r3
			_http_client_request(module);
   15f8e:	0020      	movs	r0, r4
   15f90:	4b55      	ldr	r3, [pc, #340]	; (160e8 <http_client_socket_event_handler+0x1a8>)
   15f92:	4798      	blx	r3
   15f94:	e7e2      	b.n	15f5c <http_client_socket_event_handler+0x1c>
	switch (err) {
   15f96:	330e      	adds	r3, #14
   15f98:	b2d9      	uxtb	r1, r3
   15f9a:	290e      	cmp	r1, #14
   15f9c:	d81e      	bhi.n	15fdc <http_client_socket_event_handler+0x9c>
   15f9e:	008b      	lsls	r3, r1, #2
   15fa0:	4952      	ldr	r1, [pc, #328]	; (160ec <http_client_socket_event_handler+0x1ac>)
   15fa2:	58cb      	ldr	r3, [r1, r3]
   15fa4:	469f      	mov	pc, r3
			return -ENOENT;
   15fa6:	2102      	movs	r1, #2
   15fa8:	4249      	negs	r1, r1
   15faa:	e01d      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   15fac:	2170      	movs	r1, #112	; 0x70
   15fae:	4249      	negs	r1, r1
   15fb0:	e01a      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15fb2:	210c      	movs	r1, #12
   15fb4:	4249      	negs	r1, r1
   15fb6:	e017      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   15fb8:	2116      	movs	r1, #22
   15fba:	4249      	negs	r1, r1
   15fbc:	e014      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15fbe:	210c      	movs	r1, #12
   15fc0:	4249      	negs	r1, r1
   15fc2:	e011      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   15fc4:	2179      	movs	r1, #121	; 0x79
   15fc6:	4249      	negs	r1, r1
   15fc8:	e00e      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   15fca:	2168      	movs	r1, #104	; 0x68
   15fcc:	4249      	negs	r1, r1
   15fce:	e00b      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   15fd0:	210b      	movs	r1, #11
   15fd2:	4249      	negs	r1, r1
   15fd4:	e008      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   15fd6:	2110      	movs	r1, #16
   15fd8:	4249      	negs	r1, r1
   15fda:	e005      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   15fdc:	2a00      	cmp	r2, #0
   15fde:	db07      	blt.n	15ff0 <http_client_socket_event_handler+0xb0>
			return 0;
   15fe0:	2100      	movs	r1, #0
   15fe2:	e001      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
			return -EIO;
   15fe4:	2105      	movs	r1, #5
   15fe6:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   15fe8:	0020      	movs	r0, r4
   15fea:	4b41      	ldr	r3, [pc, #260]	; (160f0 <http_client_socket_event_handler+0x1b0>)
   15fec:	4798      	blx	r3
   15fee:	e7b5      	b.n	15f5c <http_client_socket_event_handler+0x1c>
				return -EIO;
   15ff0:	2105      	movs	r1, #5
   15ff2:	4249      	negs	r1, r1
   15ff4:	e7f8      	b.n	15fe8 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   15ff6:	2304      	movs	r3, #4
   15ff8:	5ed1      	ldrsh	r1, [r2, r3]
   15ffa:	2900      	cmp	r1, #0
   15ffc:	dd06      	ble.n	1600c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   15ffe:	0020      	movs	r0, r4
   16000:	4b3c      	ldr	r3, [pc, #240]	; (160f4 <http_client_socket_event_handler+0x1b4>)
   16002:	4798      	blx	r3
		_http_client_recv_packet(module);
   16004:	0020      	movs	r0, r4
   16006:	4b37      	ldr	r3, [pc, #220]	; (160e4 <http_client_socket_event_handler+0x1a4>)
   16008:	4798      	blx	r3
		break;
   1600a:	e7a7      	b.n	15f5c <http_client_socket_event_handler+0x1c>
	switch (err) {
   1600c:	000b      	movs	r3, r1
   1600e:	330e      	adds	r3, #14
   16010:	b29a      	uxth	r2, r3
   16012:	2a0e      	cmp	r2, #14
   16014:	d81e      	bhi.n	16054 <http_client_socket_event_handler+0x114>
   16016:	0093      	lsls	r3, r2, #2
   16018:	4a37      	ldr	r2, [pc, #220]	; (160f8 <http_client_socket_event_handler+0x1b8>)
   1601a:	58d3      	ldr	r3, [r2, r3]
   1601c:	469f      	mov	pc, r3
			return -ENOENT;
   1601e:	2102      	movs	r1, #2
   16020:	4249      	negs	r1, r1
   16022:	e01d      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   16024:	2170      	movs	r1, #112	; 0x70
   16026:	4249      	negs	r1, r1
   16028:	e01a      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   1602a:	210c      	movs	r1, #12
   1602c:	4249      	negs	r1, r1
   1602e:	e017      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   16030:	2116      	movs	r1, #22
   16032:	4249      	negs	r1, r1
   16034:	e014      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   16036:	210c      	movs	r1, #12
   16038:	4249      	negs	r1, r1
   1603a:	e011      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   1603c:	2179      	movs	r1, #121	; 0x79
   1603e:	4249      	negs	r1, r1
   16040:	e00e      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   16042:	2168      	movs	r1, #104	; 0x68
   16044:	4249      	negs	r1, r1
   16046:	e00b      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   16048:	210b      	movs	r1, #11
   1604a:	4249      	negs	r1, r1
   1604c:	e008      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   1604e:	2110      	movs	r1, #16
   16050:	4249      	negs	r1, r1
   16052:	e005      	b.n	16060 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   16054:	2900      	cmp	r1, #0
   16056:	db07      	blt.n	16068 <http_client_socket_event_handler+0x128>
			return 0;
   16058:	2100      	movs	r1, #0
   1605a:	e001      	b.n	16060 <http_client_socket_event_handler+0x120>
			return -EIO;
   1605c:	2105      	movs	r1, #5
   1605e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   16060:	0020      	movs	r0, r4
   16062:	4b23      	ldr	r3, [pc, #140]	; (160f0 <http_client_socket_event_handler+0x1b0>)
   16064:	4798      	blx	r3
   16066:	e7cd      	b.n	16004 <http_client_socket_event_handler+0xc4>
				return -EIO;
   16068:	2105      	movs	r1, #5
   1606a:	4249      	negs	r1, r1
   1606c:	e7f8      	b.n	16060 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   1606e:	2300      	movs	r3, #0
   16070:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   16072:	2b00      	cmp	r3, #0
   16074:	db08      	blt.n	16088 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   16076:	0020      	movs	r0, r4
   16078:	4b1b      	ldr	r3, [pc, #108]	; (160e8 <http_client_socket_event_handler+0x1a8>)
   1607a:	4798      	blx	r3
		module->sending = 0;
   1607c:	2241      	movs	r2, #65	; 0x41
   1607e:	5ca3      	ldrb	r3, [r4, r2]
   16080:	2101      	movs	r1, #1
   16082:	438b      	bics	r3, r1
   16084:	54a3      	strb	r3, [r4, r2]
    	break;
   16086:	e769      	b.n	15f5c <http_client_socket_event_handler+0x1c>
	switch (err) {
   16088:	330e      	adds	r3, #14
   1608a:	b29a      	uxth	r2, r3
   1608c:	2a0d      	cmp	r2, #13
   1608e:	d81e      	bhi.n	160ce <http_client_socket_event_handler+0x18e>
   16090:	0093      	lsls	r3, r2, #2
   16092:	4a1a      	ldr	r2, [pc, #104]	; (160fc <http_client_socket_event_handler+0x1bc>)
   16094:	58d3      	ldr	r3, [r2, r3]
   16096:	469f      	mov	pc, r3
			return -ENOENT;
   16098:	2102      	movs	r1, #2
   1609a:	4249      	negs	r1, r1
   1609c:	e019      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   1609e:	2170      	movs	r1, #112	; 0x70
   160a0:	4249      	negs	r1, r1
   160a2:	e016      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   160a4:	210c      	movs	r1, #12
   160a6:	4249      	negs	r1, r1
   160a8:	e013      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   160aa:	2116      	movs	r1, #22
   160ac:	4249      	negs	r1, r1
   160ae:	e010      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   160b0:	210c      	movs	r1, #12
   160b2:	4249      	negs	r1, r1
   160b4:	e00d      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   160b6:	2179      	movs	r1, #121	; 0x79
   160b8:	4249      	negs	r1, r1
   160ba:	e00a      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   160bc:	2168      	movs	r1, #104	; 0x68
   160be:	4249      	negs	r1, r1
   160c0:	e007      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   160c2:	210b      	movs	r1, #11
   160c4:	4249      	negs	r1, r1
   160c6:	e004      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   160c8:	2110      	movs	r1, #16
   160ca:	4249      	negs	r1, r1
   160cc:	e001      	b.n	160d2 <http_client_socket_event_handler+0x192>
			return -EIO;
   160ce:	2105      	movs	r1, #5
   160d0:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   160d2:	0020      	movs	r0, r4
   160d4:	4b06      	ldr	r3, [pc, #24]	; (160f0 <http_client_socket_event_handler+0x1b0>)
   160d6:	4798      	blx	r3
   160d8:	e7d0      	b.n	1607c <http_client_socket_event_handler+0x13c>
   160da:	46c0      	nop			; (mov r8, r8)
   160dc:	200007fc 	.word	0x200007fc
   160e0:	0001628d 	.word	0x0001628d
   160e4:	00015aad 	.word	0x00015aad
   160e8:	000153a5 	.word	0x000153a5
   160ec:	0001a268 	.word	0x0001a268
   160f0:	0001528d 	.word	0x0001528d
   160f4:	00015f0d 	.word	0x00015f0d
   160f8:	0001a2a4 	.word	0x0001a2a4
   160fc:	0001a2e0 	.word	0x0001a2e0

00016100 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   16100:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   16102:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   16104:	2200      	movs	r2, #0
   16106:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   16108:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   1610a:	9b00      	ldr	r3, [sp, #0]
   1610c:	60c3      	str	r3, [r0, #12]
}
   1610e:	4770      	bx	lr

00016110 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   16110:	b510      	push	{r4, lr}
   16112:	0004      	movs	r4, r0
	if(writer->written > 0) {
   16114:	6842      	ldr	r2, [r0, #4]
   16116:	2a00      	cmp	r2, #0
   16118:	d100      	bne.n	1611c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   1611a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1611c:	6901      	ldr	r1, [r0, #16]
   1611e:	68c0      	ldr	r0, [r0, #12]
   16120:	68a3      	ldr	r3, [r4, #8]
   16122:	4798      	blx	r3
		writer->written = 0;
   16124:	2300      	movs	r3, #0
   16126:	6063      	str	r3, [r4, #4]
}
   16128:	e7f7      	b.n	1611a <stream_writer_send_remain+0xa>
	...

0001612c <stream_writer_send_8>:
{
   1612c:	b570      	push	{r4, r5, r6, lr}
   1612e:	0004      	movs	r4, r0
   16130:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   16132:	6803      	ldr	r3, [r0, #0]
   16134:	6842      	ldr	r2, [r0, #4]
   16136:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   16138:	2b00      	cmp	r3, #0
   1613a:	dd05      	ble.n	16148 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   1613c:	6922      	ldr	r2, [r4, #16]
   1613e:	6863      	ldr	r3, [r4, #4]
   16140:	1c59      	adds	r1, r3, #1
   16142:	6061      	str	r1, [r4, #4]
   16144:	54d5      	strb	r5, [r2, r3]
}
   16146:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   16148:	4b01      	ldr	r3, [pc, #4]	; (16150 <stream_writer_send_8+0x24>)
   1614a:	4798      	blx	r3
   1614c:	e7f6      	b.n	1613c <stream_writer_send_8+0x10>
   1614e:	46c0      	nop			; (mov r8, r8)
   16150:	00016111 	.word	0x00016111

00016154 <stream_writer_send_buffer>:
{
   16154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16156:	0006      	movs	r6, r0
   16158:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   1615a:	2a00      	cmp	r2, #0
   1615c:	d008      	beq.n	16170 <stream_writer_send_buffer+0x1c>
   1615e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   16160:	4f04      	ldr	r7, [pc, #16]	; (16174 <stream_writer_send_buffer+0x20>)
   16162:	2100      	movs	r1, #0
   16164:	5661      	ldrsb	r1, [r4, r1]
   16166:	0030      	movs	r0, r6
   16168:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   1616a:	3401      	adds	r4, #1
   1616c:	42a5      	cmp	r5, r4
   1616e:	d1f8      	bne.n	16162 <stream_writer_send_buffer+0xe>
}
   16170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16172:	46c0      	nop			; (mov r8, r8)
   16174:	0001612d 	.word	0x0001612d

00016178 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   16178:	4a02      	ldr	r2, [pc, #8]	; (16184 <sw_timer_tcc_callback+0xc>)
   1617a:	6813      	ldr	r3, [r2, #0]
   1617c:	3301      	adds	r3, #1
   1617e:	6013      	str	r3, [r2, #0]
}
   16180:	4770      	bx	lr
   16182:	46c0      	nop			; (mov r8, r8)
   16184:	20000818 	.word	0x20000818

00016188 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   16188:	2364      	movs	r3, #100	; 0x64
   1618a:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   1618c:	2300      	movs	r3, #0
   1618e:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   16190:	7043      	strb	r3, [r0, #1]
}
   16192:	4770      	bx	lr

00016194 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   16194:	b5f0      	push	{r4, r5, r6, r7, lr}
   16196:	46c6      	mov	lr, r8
   16198:	b500      	push	{lr}
   1619a:	b0ac      	sub	sp, #176	; 0xb0
   1619c:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1619e:	466e      	mov	r6, sp
   161a0:	4b1d      	ldr	r3, [pc, #116]	; (16218 <sw_timer_init+0x84>)
   161a2:	466a      	mov	r2, sp
   161a4:	cb92      	ldmia	r3!, {r1, r4, r7}
   161a6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   161a8:	886b      	ldrh	r3, [r5, #2]
   161aa:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   161ac:	3014      	adds	r0, #20
   161ae:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   161b0:	782b      	ldrb	r3, [r5, #0]
   161b2:	009b      	lsls	r3, r3, #2
   161b4:	5999      	ldr	r1, [r3, r6]
   161b6:	0017      	movs	r7, r2
   161b8:	0010      	movs	r0, r2
   161ba:	4b18      	ldr	r3, [pc, #96]	; (1621c <sw_timer_init+0x88>)
   161bc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   161be:	2000      	movs	r0, #0
   161c0:	4b17      	ldr	r3, [pc, #92]	; (16220 <sw_timer_init+0x8c>)
   161c2:	4798      	blx	r3
   161c4:	4b17      	ldr	r3, [pc, #92]	; (16224 <sw_timer_init+0x90>)
   161c6:	7a1b      	ldrb	r3, [r3, #8]
   161c8:	b2db      	uxtb	r3, r3
   161ca:	40d8      	lsrs	r0, r3
   161cc:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   161ce:	8869      	ldrh	r1, [r5, #2]
   161d0:	20fa      	movs	r0, #250	; 0xfa
   161d2:	0200      	lsls	r0, r0, #8
   161d4:	4b14      	ldr	r3, [pc, #80]	; (16228 <sw_timer_init+0x94>)
   161d6:	4798      	blx	r3
   161d8:	0001      	movs	r1, r0
   161da:	4640      	mov	r0, r8
   161dc:	4b13      	ldr	r3, [pc, #76]	; (1622c <sw_timer_init+0x98>)
   161de:	4798      	blx	r3
   161e0:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   161e2:	2305      	movs	r3, #5
   161e4:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   161e6:	782b      	ldrb	r3, [r5, #0]
   161e8:	009b      	lsls	r3, r3, #2
   161ea:	5999      	ldr	r1, [r3, r6]
   161ec:	003a      	movs	r2, r7
   161ee:	0020      	movs	r0, r4
   161f0:	4b0f      	ldr	r3, [pc, #60]	; (16230 <sw_timer_init+0x9c>)
   161f2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   161f4:	786a      	ldrb	r2, [r5, #1]
   161f6:	3208      	adds	r2, #8
   161f8:	b2d2      	uxtb	r2, r2
   161fa:	490e      	ldr	r1, [pc, #56]	; (16234 <sw_timer_init+0xa0>)
   161fc:	0020      	movs	r0, r4
   161fe:	4b0e      	ldr	r3, [pc, #56]	; (16238 <sw_timer_init+0xa4>)
   16200:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   16202:	7869      	ldrb	r1, [r5, #1]
   16204:	3108      	adds	r1, #8
   16206:	b2c9      	uxtb	r1, r1
   16208:	0020      	movs	r0, r4
   1620a:	4b0c      	ldr	r3, [pc, #48]	; (1623c <sw_timer_init+0xa8>)
   1620c:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1620e:	b02c      	add	sp, #176	; 0xb0
   16210:	bc04      	pop	{r2}
   16212:	4690      	mov	r8, r2
   16214:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16216:	46c0      	nop			; (mov r8, r8)
   16218:	0001a450 	.word	0x0001a450
   1621c:	00011685 	.word	0x00011685
   16220:	000113e1 	.word	0x000113e1
   16224:	40000400 	.word	0x40000400
   16228:	000170f5 	.word	0x000170f5
   1622c:	00016fe1 	.word	0x00016fe1
   16230:	000117d1 	.word	0x000117d1
   16234:	00016179 	.word	0x00016179
   16238:	00011bdd 	.word	0x00011bdd
   1623c:	00011bf5 	.word	0x00011bf5

00016240 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   16240:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   16242:	2102      	movs	r1, #2
   16244:	6893      	ldr	r3, [r2, #8]
   16246:	4219      	tst	r1, r3
   16248:	d1fc      	bne.n	16244 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1624a:	6813      	ldr	r3, [r2, #0]
   1624c:	2102      	movs	r1, #2
   1624e:	430b      	orrs	r3, r1
   16250:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   16252:	4770      	bx	lr

00016254 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   16254:	b570      	push	{r4, r5, r6, lr}
   16256:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   16258:	7805      	ldrb	r5, [r0, #0]
   1625a:	07e8      	lsls	r0, r5, #31
   1625c:	d502      	bpl.n	16264 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   1625e:	2001      	movs	r0, #1
   16260:	4240      	negs	r0, r0
}
   16262:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   16264:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   16266:	0029      	movs	r1, r5
   16268:	2002      	movs	r0, #2
   1626a:	4381      	bics	r1, r0
   1626c:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   1626e:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   16270:	6d61      	ldr	r1, [r4, #84]	; 0x54
   16272:	0018      	movs	r0, r3
   16274:	4b04      	ldr	r3, [pc, #16]	; (16288 <sw_timer_register_callback+0x34>)
   16276:	4798      	blx	r3
   16278:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   1627a:	7823      	ldrb	r3, [r4, #0]
   1627c:	2201      	movs	r2, #1
   1627e:	4313      	orrs	r3, r2
   16280:	7023      	strb	r3, [r4, #0]
			return index;
   16282:	2000      	movs	r0, #0
   16284:	e7ed      	b.n	16262 <sw_timer_register_callback+0xe>
   16286:	46c0      	nop			; (mov r8, r8)
   16288:	00016fe1 	.word	0x00016fe1

0001628c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1628c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   1628e:	008b      	lsls	r3, r1, #2
   16290:	185d      	adds	r5, r3, r1
   16292:	00ad      	lsls	r5, r5, #2
   16294:	5c29      	ldrb	r1, [r5, r0]
   16296:	2602      	movs	r6, #2
   16298:	4331      	orrs	r1, r6
   1629a:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1629c:	1944      	adds	r4, r0, r5
   1629e:	6d41      	ldr	r1, [r0, #84]	; 0x54
   162a0:	0010      	movs	r0, r2
   162a2:	4b03      	ldr	r3, [pc, #12]	; (162b0 <sw_timer_enable_callback+0x24>)
   162a4:	4798      	blx	r3
   162a6:	4b03      	ldr	r3, [pc, #12]	; (162b4 <sw_timer_enable_callback+0x28>)
   162a8:	681b      	ldr	r3, [r3, #0]
   162aa:	18c0      	adds	r0, r0, r3
   162ac:	6120      	str	r0, [r4, #16]
}
   162ae:	bd70      	pop	{r4, r5, r6, pc}
   162b0:	00016fe1 	.word	0x00016fe1
   162b4:	20000818 	.word	0x20000818

000162b8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   162b8:	008b      	lsls	r3, r1, #2
   162ba:	1859      	adds	r1, r3, r1
   162bc:	0089      	lsls	r1, r1, #2
   162be:	5c0b      	ldrb	r3, [r1, r0]
   162c0:	2202      	movs	r2, #2
   162c2:	4393      	bics	r3, r2
   162c4:	540b      	strb	r3, [r1, r0]
}
   162c6:	4770      	bx	lr

000162c8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   162c8:	b570      	push	{r4, r5, r6, lr}
   162ca:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   162cc:	7803      	ldrb	r3, [r0, #0]
   162ce:	07db      	lsls	r3, r3, #31
   162d0:	d507      	bpl.n	162e2 <sw_timer_task+0x1a>
   162d2:	7803      	ldrb	r3, [r0, #0]
   162d4:	079b      	lsls	r3, r3, #30
   162d6:	d504      	bpl.n	162e2 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   162d8:	4b10      	ldr	r3, [pc, #64]	; (1631c <sw_timer_task+0x54>)
   162da:	681a      	ldr	r2, [r3, #0]
   162dc:	6903      	ldr	r3, [r0, #16]
   162de:	1a9b      	subs	r3, r3, r2
   162e0:	d400      	bmi.n	162e4 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   162e2:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   162e4:	7803      	ldrb	r3, [r0, #0]
   162e6:	075b      	lsls	r3, r3, #29
   162e8:	d4fb      	bmi.n	162e2 <sw_timer_task+0x1a>
				handler->busy = 1;
   162ea:	7803      	ldrb	r3, [r0, #0]
   162ec:	2104      	movs	r1, #4
   162ee:	430b      	orrs	r3, r1
   162f0:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   162f2:	68c3      	ldr	r3, [r0, #12]
   162f4:	2b00      	cmp	r3, #0
   162f6:	d00b      	beq.n	16310 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   162f8:	18d2      	adds	r2, r2, r3
   162fa:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   162fc:	68a2      	ldr	r2, [r4, #8]
   162fe:	2100      	movs	r1, #0
   16300:	0020      	movs	r0, r4
   16302:	6865      	ldr	r5, [r4, #4]
   16304:	47a8      	blx	r5
				handler->busy = 0;
   16306:	7823      	ldrb	r3, [r4, #0]
   16308:	2204      	movs	r2, #4
   1630a:	4393      	bics	r3, r2
   1630c:	7023      	strb	r3, [r4, #0]
}
   1630e:	e7e8      	b.n	162e2 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   16310:	7802      	ldrb	r2, [r0, #0]
   16312:	2102      	movs	r1, #2
   16314:	438a      	bics	r2, r1
   16316:	7002      	strb	r2, [r0, #0]
   16318:	e7f0      	b.n	162fc <sw_timer_task+0x34>
   1631a:	46c0      	nop			; (mov r8, r8)
   1631c:	20000818 	.word	0x20000818

00016320 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   16320:	4b02      	ldr	r3, [pc, #8]	; (1632c <add_state+0xc>)
   16322:	781a      	ldrb	r2, [r3, #0]
   16324:	4310      	orrs	r0, r2
   16326:	7018      	strb	r0, [r3, #0]
}
   16328:	4770      	bx	lr
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	20000851 	.word	0x20000851

00016330 <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
   16330:	b570      	push	{r4, r5, r6, lr}
   16332:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   16334:	6843      	ldr	r3, [r0, #4]
   16336:	689a      	ldr	r2, [r3, #8]
   16338:	6859      	ldr	r1, [r3, #4]
   1633a:	4816      	ldr	r0, [pc, #88]	; (16394 <SubscribeHandler+0x64>)
   1633c:	4d16      	ldr	r5, [pc, #88]	; (16398 <SubscribeHandler+0x68>)
   1633e:	47a8      	blx	r5
	printf(" >> ");
   16340:	4816      	ldr	r0, [pc, #88]	; (1639c <SubscribeHandler+0x6c>)
   16342:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
   16344:	6823      	ldr	r3, [r4, #0]
   16346:	689a      	ldr	r2, [r3, #8]
   16348:	68d9      	ldr	r1, [r3, #12]
   1634a:	4815      	ldr	r0, [pc, #84]	; (163a0 <SubscribeHandler+0x70>)
   1634c:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   1634e:	6826      	ldr	r6, [r4, #0]
   16350:	68f5      	ldr	r5, [r6, #12]
   16352:	6863      	ldr	r3, [r4, #4]
   16354:	6898      	ldr	r0, [r3, #8]
   16356:	002a      	movs	r2, r5
   16358:	4912      	ldr	r1, [pc, #72]	; (163a4 <SubscribeHandler+0x74>)
   1635a:	4b13      	ldr	r3, [pc, #76]	; (163a8 <SubscribeHandler+0x78>)
   1635c:	4798      	blx	r3
   1635e:	2800      	cmp	r0, #0
   16360:	d117      	bne.n	16392 <SubscribeHandler+0x62>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   16362:	68b4      	ldr	r4, [r6, #8]
   16364:	002a      	movs	r2, r5
   16366:	4911      	ldr	r1, [pc, #68]	; (163ac <SubscribeHandler+0x7c>)
   16368:	0020      	movs	r0, r4
   1636a:	4b0f      	ldr	r3, [pc, #60]	; (163a8 <SubscribeHandler+0x78>)
   1636c:	4798      	blx	r3
   1636e:	2800      	cmp	r0, #0
   16370:	d00b      	beq.n	1638a <SubscribeHandler+0x5a>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   16372:	002a      	movs	r2, r5
   16374:	490e      	ldr	r1, [pc, #56]	; (163b0 <SubscribeHandler+0x80>)
   16376:	0020      	movs	r0, r4
   16378:	4b0b      	ldr	r3, [pc, #44]	; (163a8 <SubscribeHandler+0x78>)
   1637a:	4798      	blx	r3
   1637c:	2800      	cmp	r0, #0
   1637e:	d108      	bne.n	16392 <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
   16380:	2280      	movs	r2, #128	; 0x80
   16382:	0412      	lsls	r2, r2, #16
   16384:	4b0b      	ldr	r3, [pc, #44]	; (163b4 <SubscribeHandler+0x84>)
   16386:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
   16388:	e003      	b.n	16392 <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
   1638a:	2280      	movs	r2, #128	; 0x80
   1638c:	0412      	lsls	r2, r2, #16
   1638e:	4b09      	ldr	r3, [pc, #36]	; (163b4 <SubscribeHandler+0x84>)
   16390:	619a      	str	r2, [r3, #24]
   16392:	bd70      	pop	{r4, r5, r6, pc}
   16394:	0001a470 	.word	0x0001a470
   16398:	00017535 	.word	0x00017535
   1639c:	0001a478 	.word	0x0001a478
   163a0:	0001a480 	.word	0x0001a480
   163a4:	0001a488 	.word	0x0001a488
   163a8:	00017909 	.word	0x00017909
   163ac:	0001a490 	.word	0x0001a490
   163b0:	0001a498 	.word	0x0001a498
   163b4:	41004400 	.word	0x41004400

000163b8 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   163b8:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   163ba:	4b0a      	ldr	r3, [pc, #40]	; (163e4 <extint_detection_callback+0x2c>)
   163bc:	681a      	ldr	r2, [r3, #0]
   163be:	3201      	adds	r2, #1
   163c0:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   163c2:	681b      	ldr	r3, [r3, #0]
   163c4:	2b28      	cmp	r3, #40	; 0x28
   163c6:	d902      	bls.n	163ce <extint_detection_callback+0x16>
   163c8:	2201      	movs	r2, #1
   163ca:	4b06      	ldr	r3, [pc, #24]	; (163e4 <extint_detection_callback+0x2c>)
   163cc:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
   163ce:	4b05      	ldr	r3, [pc, #20]	; (163e4 <extint_detection_callback+0x2c>)
   163d0:	681b      	ldr	r3, [r3, #0]
   163d2:	4a05      	ldr	r2, [pc, #20]	; (163e8 <extint_detection_callback+0x30>)
   163d4:	213f      	movs	r1, #63	; 0x3f
   163d6:	4805      	ldr	r0, [pc, #20]	; (163ec <extint_detection_callback+0x34>)
   163d8:	4c05      	ldr	r4, [pc, #20]	; (163f0 <extint_detection_callback+0x38>)
   163da:	47a0      	blx	r4
	isPressed = true;
   163dc:	2201      	movs	r2, #1
   163de:	4b05      	ldr	r3, [pc, #20]	; (163f4 <extint_detection_callback+0x3c>)
   163e0:	701a      	strb	r2, [r3, #0]
	
}
   163e2:	bd10      	pop	{r4, pc}
   163e4:	2000014c 	.word	0x2000014c
   163e8:	0001a600 	.word	0x0001a600
   163ec:	20000010 	.word	0x20000010
   163f0:	000177f5 	.word	0x000177f5
   163f4:	20000aac 	.word	0x20000aac

000163f8 <socket_resolve_handler>:
{
   163f8:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   163fa:	4b01      	ldr	r3, [pc, #4]	; (16400 <socket_resolve_handler+0x8>)
   163fc:	4798      	blx	r3
}
   163fe:	bd10      	pop	{r4, pc}
   16400:	000146c5 	.word	0x000146c5

00016404 <socket_event_handler>:
{
   16404:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   16406:	4b01      	ldr	r3, [pc, #4]	; (1640c <socket_event_handler+0x8>)
   16408:	4798      	blx	r3
}
   1640a:	bd10      	pop	{r4, pc}
   1640c:	000146b9 	.word	0x000146b9

00016410 <start_download>:
{
   16410:	b510      	push	{r4, lr}
   16412:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   16414:	4b18      	ldr	r3, [pc, #96]	; (16478 <start_download+0x68>)
   16416:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   16418:	07da      	lsls	r2, r3, #31
   1641a:	d514      	bpl.n	16446 <start_download+0x36>
	if (!is_state_set(WIFI_CONNECTED)) {
   1641c:	079a      	lsls	r2, r3, #30
   1641e:	d517      	bpl.n	16450 <start_download+0x40>
	if (is_state_set(GET_REQUESTED)) {
   16420:	075a      	lsls	r2, r3, #29
   16422:	d419      	bmi.n	16458 <start_download+0x48>
	if (is_state_set(DOWNLOADING)) {
   16424:	071b      	lsls	r3, r3, #28
   16426:	d41b      	bmi.n	16460 <start_download+0x50>
	printf("start_download: sending HTTP request...\r\n");
   16428:	4814      	ldr	r0, [pc, #80]	; (1647c <start_download+0x6c>)
   1642a:	4b15      	ldr	r3, [pc, #84]	; (16480 <start_download+0x70>)
   1642c:	4798      	blx	r3
	if(second_file == 0){
   1642e:	4b15      	ldr	r3, [pc, #84]	; (16484 <start_download+0x74>)
   16430:	781b      	ldrb	r3, [r3, #0]
   16432:	2b00      	cmp	r3, #0
   16434:	d018      	beq.n	16468 <start_download+0x58>
		http_client_send_request(&http_client_module_inst, PARAMS_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16436:	2300      	movs	r3, #0
   16438:	9300      	str	r3, [sp, #0]
   1643a:	2201      	movs	r2, #1
   1643c:	4912      	ldr	r1, [pc, #72]	; (16488 <start_download+0x78>)
   1643e:	4813      	ldr	r0, [pc, #76]	; (1648c <start_download+0x7c>)
   16440:	4c13      	ldr	r4, [pc, #76]	; (16490 <start_download+0x80>)
   16442:	47a0      	blx	r4
   16444:	e002      	b.n	1644c <start_download+0x3c>
		printf("start_download: MMC storage not ready.\r\n");
   16446:	4813      	ldr	r0, [pc, #76]	; (16494 <start_download+0x84>)
   16448:	4b0d      	ldr	r3, [pc, #52]	; (16480 <start_download+0x70>)
   1644a:	4798      	blx	r3
}
   1644c:	b002      	add	sp, #8
   1644e:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
   16450:	4811      	ldr	r0, [pc, #68]	; (16498 <start_download+0x88>)
   16452:	4b0b      	ldr	r3, [pc, #44]	; (16480 <start_download+0x70>)
   16454:	4798      	blx	r3
		return;
   16456:	e7f9      	b.n	1644c <start_download+0x3c>
		printf("start_download: request is sent already.\r\n");
   16458:	4810      	ldr	r0, [pc, #64]	; (1649c <start_download+0x8c>)
   1645a:	4b09      	ldr	r3, [pc, #36]	; (16480 <start_download+0x70>)
   1645c:	4798      	blx	r3
		return;
   1645e:	e7f5      	b.n	1644c <start_download+0x3c>
		printf("start_download: running download already.\r\n");
   16460:	480f      	ldr	r0, [pc, #60]	; (164a0 <start_download+0x90>)
   16462:	4b07      	ldr	r3, [pc, #28]	; (16480 <start_download+0x70>)
   16464:	4798      	blx	r3
		return;
   16466:	e7f1      	b.n	1644c <start_download+0x3c>
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16468:	9300      	str	r3, [sp, #0]
   1646a:	2201      	movs	r2, #1
   1646c:	490d      	ldr	r1, [pc, #52]	; (164a4 <start_download+0x94>)
   1646e:	4807      	ldr	r0, [pc, #28]	; (1648c <start_download+0x7c>)
   16470:	4c07      	ldr	r4, [pc, #28]	; (16490 <start_download+0x80>)
   16472:	47a0      	blx	r4
   16474:	e7ea      	b.n	1644c <start_download+0x3c>
   16476:	46c0      	nop			; (mov r8, r8)
   16478:	20000851 	.word	0x20000851
   1647c:	0001ac00 	.word	0x0001ac00
   16480:	00017651 	.word	0x00017651
   16484:	20000eec 	.word	0x20000eec
   16488:	0001ac70 	.word	0x0001ac70
   1648c:	20001550 	.word	0x20001550
   16490:	00015845 	.word	0x00015845
   16494:	0001ab54 	.word	0x0001ab54
   16498:	0001ab7c 	.word	0x0001ab7c
   1649c:	0001aba8 	.word	0x0001aba8
   164a0:	0001abd4 	.word	0x0001abd4
   164a4:	0001ac2c 	.word	0x0001ac2c

000164a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   164a8:	b570      	push	{r4, r5, r6, lr}
   164aa:	b082      	sub	sp, #8
   164ac:	0005      	movs	r5, r0
   164ae:	000e      	movs	r6, r1
	uint16_t temp = 0;
   164b0:	2200      	movs	r2, #0
   164b2:	466b      	mov	r3, sp
   164b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   164b6:	4c06      	ldr	r4, [pc, #24]	; (164d0 <usart_serial_getchar+0x28>)
   164b8:	466b      	mov	r3, sp
   164ba:	1d99      	adds	r1, r3, #6
   164bc:	0028      	movs	r0, r5
   164be:	47a0      	blx	r4
   164c0:	2800      	cmp	r0, #0
   164c2:	d1f9      	bne.n	164b8 <usart_serial_getchar+0x10>

	*c = temp;
   164c4:	466b      	mov	r3, sp
   164c6:	3306      	adds	r3, #6
   164c8:	881b      	ldrh	r3, [r3, #0]
   164ca:	7033      	strb	r3, [r6, #0]
}
   164cc:	b002      	add	sp, #8
   164ce:	bd70      	pop	{r4, r5, r6, pc}
   164d0:	00010bad 	.word	0x00010bad

000164d4 <usart_serial_putchar>:
{
   164d4:	b570      	push	{r4, r5, r6, lr}
   164d6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   164d8:	b28c      	uxth	r4, r1
   164da:	4e03      	ldr	r6, [pc, #12]	; (164e8 <usart_serial_putchar+0x14>)
   164dc:	0021      	movs	r1, r4
   164de:	0028      	movs	r0, r5
   164e0:	47b0      	blx	r6
   164e2:	2800      	cmp	r0, #0
   164e4:	d1fa      	bne.n	164dc <usart_serial_putchar+0x8>
}
   164e6:	bd70      	pop	{r4, r5, r6, pc}
   164e8:	00010b81 	.word	0x00010b81

000164ec <store_file_packet>:
{
   164ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   164ee:	b083      	sub	sp, #12
   164f0:	0005      	movs	r5, r0
   164f2:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   164f4:	2800      	cmp	r0, #0
   164f6:	d010      	beq.n	1651a <store_file_packet+0x2e>
   164f8:	2900      	cmp	r1, #0
   164fa:	d00e      	beq.n	1651a <store_file_packet+0x2e>
	return ((down_state & mask) != 0);
   164fc:	4b3b      	ldr	r3, [pc, #236]	; (165ec <store_file_packet+0x100>)
   164fe:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   16500:	071b      	lsls	r3, r3, #28
   16502:	d432      	bmi.n	1656a <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16504:	4b3a      	ldr	r3, [pc, #232]	; (165f0 <store_file_packet+0x104>)
   16506:	2230      	movs	r2, #48	; 0x30
   16508:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   1650a:	320a      	adds	r2, #10
   1650c:	705a      	strb	r2, [r3, #1]
		if(second_file == 0){
   1650e:	4b39      	ldr	r3, [pc, #228]	; (165f4 <store_file_packet+0x108>)
   16510:	781b      	ldrb	r3, [r3, #0]
   16512:	2b00      	cmp	r3, #0
   16514:	d067      	beq.n	165e6 <store_file_packet+0xfa>
			cp = (char *)(PARAMS_HTTP_FILE_URL + strlen(PARAMS_HTTP_FILE_URL));
   16516:	4c38      	ldr	r4, [pc, #224]	; (165f8 <store_file_packet+0x10c>)
   16518:	e005      	b.n	16526 <store_file_packet+0x3a>
		printf("store_file_packet: empty data.\r\n");
   1651a:	4838      	ldr	r0, [pc, #224]	; (165fc <store_file_packet+0x110>)
   1651c:	4b38      	ldr	r3, [pc, #224]	; (16600 <store_file_packet+0x114>)
   1651e:	4798      	blx	r3
}
   16520:	b003      	add	sp, #12
   16522:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   16524:	0004      	movs	r4, r0
   16526:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   16528:	7803      	ldrb	r3, [r0, #0]
   1652a:	2b2f      	cmp	r3, #47	; 0x2f
   1652c:	d1fa      	bne.n	16524 <store_file_packet+0x38>
		if (strlen(cp) > 1) {
   1652e:	4b35      	ldr	r3, [pc, #212]	; (16604 <store_file_packet+0x118>)
   16530:	4798      	blx	r3
   16532:	2801      	cmp	r0, #1
   16534:	d92d      	bls.n	16592 <store_file_packet+0xa6>
			strcpy(&save_file_name[2], cp);
   16536:	4f2e      	ldr	r7, [pc, #184]	; (165f0 <store_file_packet+0x104>)
   16538:	1cb8      	adds	r0, r7, #2
   1653a:	0021      	movs	r1, r4
   1653c:	4b32      	ldr	r3, [pc, #200]	; (16608 <store_file_packet+0x11c>)
   1653e:	4798      	blx	r3
		f_open(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16540:	22fa      	movs	r2, #250	; 0xfa
   16542:	0039      	movs	r1, r7
   16544:	4831      	ldr	r0, [pc, #196]	; (1660c <store_file_packet+0x120>)
   16546:	4c32      	ldr	r4, [pc, #200]	; (16610 <store_file_packet+0x124>)
   16548:	47a0      	blx	r4
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   1654a:	0039      	movs	r1, r7
   1654c:	4831      	ldr	r0, [pc, #196]	; (16614 <store_file_packet+0x128>)
   1654e:	4b32      	ldr	r3, [pc, #200]	; (16618 <store_file_packet+0x12c>)
   16550:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16552:	220a      	movs	r2, #10
   16554:	0039      	movs	r1, r7
   16556:	482d      	ldr	r0, [pc, #180]	; (1660c <store_file_packet+0x120>)
   16558:	47a0      	blx	r4
		if (ret != FR_OK) {
   1655a:	2800      	cmp	r0, #0
   1655c:	d120      	bne.n	165a0 <store_file_packet+0xb4>
		received_file_size = 0;
   1655e:	2200      	movs	r2, #0
   16560:	4b2e      	ldr	r3, [pc, #184]	; (1661c <store_file_packet+0x130>)
   16562:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   16564:	2008      	movs	r0, #8
   16566:	4b2e      	ldr	r3, [pc, #184]	; (16620 <store_file_packet+0x134>)
   16568:	4798      	blx	r3
		UINT wsize = 0;
   1656a:	2300      	movs	r3, #0
   1656c:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   1656e:	ab01      	add	r3, sp, #4
   16570:	0032      	movs	r2, r6
   16572:	0029      	movs	r1, r5
   16574:	4825      	ldr	r0, [pc, #148]	; (1660c <store_file_packet+0x120>)
   16576:	4c2b      	ldr	r4, [pc, #172]	; (16624 <store_file_packet+0x138>)
   16578:	47a0      	blx	r4
		if (ret != FR_OK) {
   1657a:	2800      	cmp	r0, #0
   1657c:	d015      	beq.n	165aa <store_file_packet+0xbe>
			f_close(&file_object);
   1657e:	4823      	ldr	r0, [pc, #140]	; (1660c <store_file_packet+0x120>)
   16580:	4b29      	ldr	r3, [pc, #164]	; (16628 <store_file_packet+0x13c>)
   16582:	4798      	blx	r3
			add_state(CANCELED);
   16584:	2020      	movs	r0, #32
   16586:	4b26      	ldr	r3, [pc, #152]	; (16620 <store_file_packet+0x134>)
   16588:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   1658a:	4828      	ldr	r0, [pc, #160]	; (1662c <store_file_packet+0x140>)
   1658c:	4b1c      	ldr	r3, [pc, #112]	; (16600 <store_file_packet+0x114>)
   1658e:	4798      	blx	r3
			return;
   16590:	e7c6      	b.n	16520 <store_file_packet+0x34>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   16592:	4827      	ldr	r0, [pc, #156]	; (16630 <store_file_packet+0x144>)
   16594:	4b1a      	ldr	r3, [pc, #104]	; (16600 <store_file_packet+0x114>)
   16596:	4798      	blx	r3
			add_state(CANCELED);
   16598:	2020      	movs	r0, #32
   1659a:	4b21      	ldr	r3, [pc, #132]	; (16620 <store_file_packet+0x134>)
   1659c:	4798      	blx	r3
			return;
   1659e:	e7bf      	b.n	16520 <store_file_packet+0x34>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   165a0:	0001      	movs	r1, r0
   165a2:	4824      	ldr	r0, [pc, #144]	; (16634 <store_file_packet+0x148>)
   165a4:	4b1c      	ldr	r3, [pc, #112]	; (16618 <store_file_packet+0x12c>)
   165a6:	4798      	blx	r3
			return;
   165a8:	e7ba      	b.n	16520 <store_file_packet+0x34>
		received_file_size += wsize;
   165aa:	4c1c      	ldr	r4, [pc, #112]	; (1661c <store_file_packet+0x130>)
   165ac:	6823      	ldr	r3, [r4, #0]
   165ae:	9a01      	ldr	r2, [sp, #4]
   165b0:	4694      	mov	ip, r2
   165b2:	4463      	add	r3, ip
   165b4:	0019      	movs	r1, r3
   165b6:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   165b8:	4d1f      	ldr	r5, [pc, #124]	; (16638 <store_file_packet+0x14c>)
   165ba:	682a      	ldr	r2, [r5, #0]
   165bc:	481f      	ldr	r0, [pc, #124]	; (1663c <store_file_packet+0x150>)
   165be:	4b16      	ldr	r3, [pc, #88]	; (16618 <store_file_packet+0x12c>)
   165c0:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   165c2:	6822      	ldr	r2, [r4, #0]
   165c4:	682b      	ldr	r3, [r5, #0]
   165c6:	429a      	cmp	r2, r3
   165c8:	d3aa      	bcc.n	16520 <store_file_packet+0x34>
			f_close(&file_object);
   165ca:	4810      	ldr	r0, [pc, #64]	; (1660c <store_file_packet+0x120>)
   165cc:	4b16      	ldr	r3, [pc, #88]	; (16628 <store_file_packet+0x13c>)
   165ce:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   165d0:	481b      	ldr	r0, [pc, #108]	; (16640 <store_file_packet+0x154>)
   165d2:	4b0b      	ldr	r3, [pc, #44]	; (16600 <store_file_packet+0x114>)
   165d4:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   165d6:	2280      	movs	r2, #128	; 0x80
   165d8:	0412      	lsls	r2, r2, #16
   165da:	4b1a      	ldr	r3, [pc, #104]	; (16644 <store_file_packet+0x158>)
   165dc:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   165de:	2010      	movs	r0, #16
   165e0:	4b0f      	ldr	r3, [pc, #60]	; (16620 <store_file_packet+0x134>)
   165e2:	4798      	blx	r3
			return;
   165e4:	e79c      	b.n	16520 <store_file_packet+0x34>
			cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   165e6:	4c18      	ldr	r4, [pc, #96]	; (16648 <store_file_packet+0x15c>)
   165e8:	e79d      	b.n	16526 <store_file_packet+0x3a>
   165ea:	46c0      	nop			; (mov r8, r8)
   165ec:	20000851 	.word	0x20000851
   165f0:	20000050 	.word	0x20000050
   165f4:	20000eec 	.word	0x20000eec
   165f8:	0001acae 	.word	0x0001acae
   165fc:	0001acb0 	.word	0x0001acb0
   16600:	00017651 	.word	0x00017651
   16604:	000178fb 	.word	0x000178fb
   16608:	000178b1 	.word	0x000178b1
   1660c:	20000a84 	.word	0x20000a84
   16610:	00013485 	.word	0x00013485
   16614:	0001acd0 	.word	0x0001acd0
   16618:	00017535 	.word	0x00017535
   1661c:	20000ee8 	.word	0x20000ee8
   16620:	00016321 	.word	0x00016321
   16624:	000137c1 	.word	0x000137c1
   16628:	00013a85 	.word	0x00013a85
   1662c:	0001ad6c 	.word	0x0001ad6c
   16630:	0001acf8 	.word	0x0001acf8
   16634:	0001ad38 	.word	0x0001ad38
   16638:	20000aa8 	.word	0x20000aa8
   1663c:	0001ada8 	.word	0x0001ada8
   16640:	0001addc 	.word	0x0001addc
   16644:	41004400 	.word	0x41004400
   16648:	0001ac6d 	.word	0x0001ac6d

0001664c <mqtt_callback>:
{
   1664c:	b570      	push	{r4, r5, r6, lr}
   1664e:	b086      	sub	sp, #24
   16650:	0004      	movs	r4, r0
	switch (type) {
   16652:	2901      	cmp	r1, #1
   16654:	d02c      	beq.n	166b0 <mqtt_callback+0x64>
   16656:	2905      	cmp	r1, #5
   16658:	d040      	beq.n	166dc <mqtt_callback+0x90>
   1665a:	2900      	cmp	r1, #0
   1665c:	d001      	beq.n	16662 <mqtt_callback+0x16>
}
   1665e:	b006      	add	sp, #24
   16660:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   16662:	6813      	ldr	r3, [r2, #0]
   16664:	2b00      	cmp	r3, #0
   16666:	db19      	blt.n	1669c <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   16668:	4821      	ldr	r0, [pc, #132]	; (166f0 <mqtt_callback+0xa4>)
   1666a:	4b22      	ldr	r3, [pc, #136]	; (166f4 <mqtt_callback+0xa8>)
   1666c:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   1666e:	4a22      	ldr	r2, [pc, #136]	; (166f8 <mqtt_callback+0xac>)
   16670:	2300      	movs	r3, #0
   16672:	9305      	str	r3, [sp, #20]
   16674:	9304      	str	r3, [sp, #16]
   16676:	9303      	str	r3, [sp, #12]
   16678:	9302      	str	r3, [sp, #8]
   1667a:	9301      	str	r3, [sp, #4]
   1667c:	9200      	str	r2, [sp, #0]
   1667e:	4b1f      	ldr	r3, [pc, #124]	; (166fc <mqtt_callback+0xb0>)
   16680:	2101      	movs	r1, #1
   16682:	0020      	movs	r0, r4
   16684:	4c1e      	ldr	r4, [pc, #120]	; (16700 <mqtt_callback+0xb4>)
   16686:	47a0      	blx	r4
   16688:	2800      	cmp	r0, #0
   1668a:	d003      	beq.n	16694 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   1668c:	481d      	ldr	r0, [pc, #116]	; (16704 <mqtt_callback+0xb8>)
   1668e:	4b1e      	ldr	r3, [pc, #120]	; (16708 <mqtt_callback+0xbc>)
   16690:	4798      	blx	r3
   16692:	e7e4      	b.n	1665e <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   16694:	481d      	ldr	r0, [pc, #116]	; (1670c <mqtt_callback+0xc0>)
   16696:	4b1c      	ldr	r3, [pc, #112]	; (16708 <mqtt_callback+0xbc>)
   16698:	4798      	blx	r3
   1669a:	e7e0      	b.n	1665e <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1669c:	4d1c      	ldr	r5, [pc, #112]	; (16710 <mqtt_callback+0xc4>)
   1669e:	0029      	movs	r1, r5
   166a0:	481c      	ldr	r0, [pc, #112]	; (16714 <mqtt_callback+0xc8>)
   166a2:	4b14      	ldr	r3, [pc, #80]	; (166f4 <mqtt_callback+0xa8>)
   166a4:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   166a6:	0029      	movs	r1, r5
   166a8:	0020      	movs	r0, r4
   166aa:	4b1b      	ldr	r3, [pc, #108]	; (16718 <mqtt_callback+0xcc>)
   166ac:	4798      	blx	r3
   166ae:	e7d6      	b.n	1665e <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   166b0:	7811      	ldrb	r1, [r2, #0]
   166b2:	2900      	cmp	r1, #0
   166b4:	d10e      	bne.n	166d4 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
   166b6:	4e19      	ldr	r6, [pc, #100]	; (1671c <mqtt_callback+0xd0>)
   166b8:	0033      	movs	r3, r6
   166ba:	2202      	movs	r2, #2
   166bc:	4918      	ldr	r1, [pc, #96]	; (16720 <mqtt_callback+0xd4>)
   166be:	4d19      	ldr	r5, [pc, #100]	; (16724 <mqtt_callback+0xd8>)
   166c0:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   166c2:	0033      	movs	r3, r6
   166c4:	2202      	movs	r2, #2
   166c6:	4918      	ldr	r1, [pc, #96]	; (16728 <mqtt_callback+0xdc>)
   166c8:	0020      	movs	r0, r4
   166ca:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   166cc:	4817      	ldr	r0, [pc, #92]	; (1672c <mqtt_callback+0xe0>)
   166ce:	4b0e      	ldr	r3, [pc, #56]	; (16708 <mqtt_callback+0xbc>)
   166d0:	4798      	blx	r3
   166d2:	e7c4      	b.n	1665e <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   166d4:	4816      	ldr	r0, [pc, #88]	; (16730 <mqtt_callback+0xe4>)
   166d6:	4b07      	ldr	r3, [pc, #28]	; (166f4 <mqtt_callback+0xa8>)
   166d8:	4798      	blx	r3
   166da:	e7c0      	b.n	1665e <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   166dc:	4815      	ldr	r0, [pc, #84]	; (16734 <mqtt_callback+0xe8>)
   166de:	4b0a      	ldr	r3, [pc, #40]	; (16708 <mqtt_callback+0xbc>)
   166e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   166e2:	4915      	ldr	r1, [pc, #84]	; (16738 <mqtt_callback+0xec>)
   166e4:	2231      	movs	r2, #49	; 0x31
   166e6:	5c8b      	ldrb	r3, [r1, r2]
   166e8:	2002      	movs	r0, #2
   166ea:	4383      	bics	r3, r0
   166ec:	548b      	strb	r3, [r1, r2]
}
   166ee:	e7b6      	b.n	1665e <mqtt_callback+0x12>
   166f0:	0001aa0c 	.word	0x0001aa0c
   166f4:	00017535 	.word	0x00017535
   166f8:	0001aa38 	.word	0x0001aa38
   166fc:	0001aa28 	.word	0x0001aa28
   16700:	000146fd 	.word	0x000146fd
   16704:	0001aa44 	.word	0x0001aa44
   16708:	00017651 	.word	0x00017651
   1670c:	0001aa6c 	.word	0x0001aa6c
   16710:	0001a9f8 	.word	0x0001a9f8
   16714:	0001aa88 	.word	0x0001aa88
   16718:	000146d1 	.word	0x000146d1
   1671c:	00016331 	.word	0x00016331
   16720:	0001aac0 	.word	0x0001aac0
   16724:	0001485d 	.word	0x0001485d
   16728:	0001a488 	.word	0x0001a488
   1672c:	0001aacc 	.word	0x0001aacc
   16730:	0001aadc 	.word	0x0001aadc
   16734:	0001ab10 	.word	0x0001ab10
   16738:	2000081c 	.word	0x2000081c

0001673c <resolve_cb>:
{
   1673c:	b570      	push	{r4, r5, r6, lr}
   1673e:	b082      	sub	sp, #8
   16740:	0005      	movs	r5, r0
   16742:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   16744:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16746:	21ff      	movs	r1, #255	; 0xff
   16748:	400b      	ands	r3, r1
   1674a:	000a      	movs	r2, r1
   1674c:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1674e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16750:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   16752:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16754:	4001      	ands	r1, r0
   16756:	9100      	str	r1, [sp, #0]
   16758:	0029      	movs	r1, r5
   1675a:	4804      	ldr	r0, [pc, #16]	; (1676c <resolve_cb+0x30>)
   1675c:	4e04      	ldr	r6, [pc, #16]	; (16770 <resolve_cb+0x34>)
   1675e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16760:	0021      	movs	r1, r4
   16762:	0028      	movs	r0, r5
   16764:	4b03      	ldr	r3, [pc, #12]	; (16774 <resolve_cb+0x38>)
   16766:	4798      	blx	r3
}
   16768:	b002      	add	sp, #8
   1676a:	bd70      	pop	{r4, r5, r6, pc}
   1676c:	0001ab24 	.word	0x0001ab24
   16770:	00017535 	.word	0x00017535
   16774:	00015315 	.word	0x00015315

00016778 <socket_cb>:
{
   16778:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1677a:	4b01      	ldr	r3, [pc, #4]	; (16780 <socket_cb+0x8>)
   1677c:	4798      	blx	r3
}
   1677e:	bd10      	pop	{r4, pc}
   16780:	00015f41 	.word	0x00015f41

00016784 <http_client_callback>:
{
   16784:	b510      	push	{r4, lr}
   16786:	0014      	movs	r4, r2
	switch (type) {
   16788:	2904      	cmp	r1, #4
   1678a:	d806      	bhi.n	1679a <http_client_callback+0x16>
   1678c:	0089      	lsls	r1, r1, #2
   1678e:	4b2a      	ldr	r3, [pc, #168]	; (16838 <http_client_callback+0xb4>)
   16790:	585b      	ldr	r3, [r3, r1]
   16792:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16794:	4829      	ldr	r0, [pc, #164]	; (1683c <http_client_callback+0xb8>)
   16796:	4b2a      	ldr	r3, [pc, #168]	; (16840 <http_client_callback+0xbc>)
   16798:	4798      	blx	r3
}
   1679a:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   1679c:	4829      	ldr	r0, [pc, #164]	; (16844 <http_client_callback+0xc0>)
   1679e:	4b28      	ldr	r3, [pc, #160]	; (16840 <http_client_callback+0xbc>)
   167a0:	4798      	blx	r3
		add_state(GET_REQUESTED);
   167a2:	2004      	movs	r0, #4
   167a4:	4b28      	ldr	r3, [pc, #160]	; (16848 <http_client_callback+0xc4>)
   167a6:	4798      	blx	r3
		break;
   167a8:	e7f7      	b.n	1679a <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   167aa:	8811      	ldrh	r1, [r2, #0]
   167ac:	6852      	ldr	r2, [r2, #4]
   167ae:	4827      	ldr	r0, [pc, #156]	; (1684c <http_client_callback+0xc8>)
   167b0:	4b27      	ldr	r3, [pc, #156]	; (16850 <http_client_callback+0xcc>)
   167b2:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   167b4:	8823      	ldrh	r3, [r4, #0]
   167b6:	2bc8      	cmp	r3, #200	; 0xc8
   167b8:	d10f      	bne.n	167da <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   167ba:	6861      	ldr	r1, [r4, #4]
   167bc:	4b25      	ldr	r3, [pc, #148]	; (16854 <http_client_callback+0xd0>)
   167be:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   167c0:	2200      	movs	r2, #0
   167c2:	4b25      	ldr	r3, [pc, #148]	; (16858 <http_client_callback+0xd4>)
   167c4:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   167c6:	4b25      	ldr	r3, [pc, #148]	; (1685c <http_client_callback+0xd8>)
   167c8:	4299      	cmp	r1, r3
   167ca:	d8e6      	bhi.n	1679a <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   167cc:	68a0      	ldr	r0, [r4, #8]
   167ce:	4b24      	ldr	r3, [pc, #144]	; (16860 <http_client_callback+0xdc>)
   167d0:	4798      	blx	r3
			add_state(COMPLETED);
   167d2:	2010      	movs	r0, #16
   167d4:	4b1c      	ldr	r3, [pc, #112]	; (16848 <http_client_callback+0xc4>)
   167d6:	4798      	blx	r3
   167d8:	e7df      	b.n	1679a <http_client_callback+0x16>
			add_state(CANCELED);
   167da:	2020      	movs	r0, #32
   167dc:	4b1a      	ldr	r3, [pc, #104]	; (16848 <http_client_callback+0xc4>)
   167de:	4798      	blx	r3
			return;
   167e0:	e7db      	b.n	1679a <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   167e2:	6811      	ldr	r1, [r2, #0]
   167e4:	6850      	ldr	r0, [r2, #4]
   167e6:	4b1e      	ldr	r3, [pc, #120]	; (16860 <http_client_callback+0xdc>)
   167e8:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   167ea:	7a23      	ldrb	r3, [r4, #8]
   167ec:	2b00      	cmp	r3, #0
   167ee:	d0d4      	beq.n	1679a <http_client_callback+0x16>
			add_state(COMPLETED);
   167f0:	2010      	movs	r0, #16
   167f2:	4b15      	ldr	r3, [pc, #84]	; (16848 <http_client_callback+0xc4>)
   167f4:	4798      	blx	r3
   167f6:	e7d0      	b.n	1679a <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   167f8:	6811      	ldr	r1, [r2, #0]
   167fa:	481a      	ldr	r0, [pc, #104]	; (16864 <http_client_callback+0xe0>)
   167fc:	4b14      	ldr	r3, [pc, #80]	; (16850 <http_client_callback+0xcc>)
   167fe:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   16800:	6823      	ldr	r3, [r4, #0]
   16802:	330b      	adds	r3, #11
   16804:	d1c9      	bne.n	1679a <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   16806:	4b18      	ldr	r3, [pc, #96]	; (16868 <http_client_callback+0xe4>)
   16808:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   1680a:	071b      	lsls	r3, r3, #28
   1680c:	d406      	bmi.n	1681c <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   1680e:	4b16      	ldr	r3, [pc, #88]	; (16868 <http_client_callback+0xe4>)
   16810:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16812:	075a      	lsls	r2, r3, #29
   16814:	d40b      	bmi.n	1682e <http_client_callback+0xaa>
			start_download();
   16816:	4b15      	ldr	r3, [pc, #84]	; (1686c <http_client_callback+0xe8>)
   16818:	4798      	blx	r3
   1681a:	e7be      	b.n	1679a <http_client_callback+0x16>
				f_close(&file_object);
   1681c:	4814      	ldr	r0, [pc, #80]	; (16870 <http_client_callback+0xec>)
   1681e:	4b15      	ldr	r3, [pc, #84]	; (16874 <http_client_callback+0xf0>)
   16820:	4798      	blx	r3
	down_state &= ~mask;
   16822:	4a11      	ldr	r2, [pc, #68]	; (16868 <http_client_callback+0xe4>)
   16824:	7813      	ldrb	r3, [r2, #0]
   16826:	2108      	movs	r1, #8
   16828:	438b      	bics	r3, r1
   1682a:	7013      	strb	r3, [r2, #0]
   1682c:	e7ef      	b.n	1680e <http_client_callback+0x8a>
   1682e:	2204      	movs	r2, #4
   16830:	4393      	bics	r3, r2
   16832:	4a0d      	ldr	r2, [pc, #52]	; (16868 <http_client_callback+0xe4>)
   16834:	7013      	strb	r3, [r2, #0]
   16836:	e7ee      	b.n	16816 <http_client_callback+0x92>
   16838:	0001a45c 	.word	0x0001a45c
   1683c:	0001a614 	.word	0x0001a614
   16840:	00017651 	.word	0x00017651
   16844:	0001a64c 	.word	0x0001a64c
   16848:	00016321 	.word	0x00016321
   1684c:	0001a678 	.word	0x0001a678
   16850:	00017535 	.word	0x00017535
   16854:	20000aa8 	.word	0x20000aa8
   16858:	20000ee8 	.word	0x20000ee8
   1685c:	000005a6 	.word	0x000005a6
   16860:	000164ed 	.word	0x000164ed
   16864:	0001a6b4 	.word	0x0001a6b4
   16868:	20000851 	.word	0x20000851
   1686c:	00016411 	.word	0x00016411
   16870:	20000a84 	.word	0x20000a84
   16874:	00013a85 	.word	0x00013a85

00016878 <wifi_cb>:
{
   16878:	b510      	push	{r4, lr}
   1687a:	b082      	sub	sp, #8
	switch (u8MsgType) {
   1687c:	282c      	cmp	r0, #44	; 0x2c
   1687e:	d003      	beq.n	16888 <wifi_cb+0x10>
   16880:	2832      	cmp	r0, #50	; 0x32
   16882:	d035      	beq.n	168f0 <wifi_cb+0x78>
}
   16884:	b002      	add	sp, #8
   16886:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16888:	780b      	ldrb	r3, [r1, #0]
   1688a:	2b01      	cmp	r3, #1
   1688c:	d01c      	beq.n	168c8 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1688e:	2b00      	cmp	r3, #0
   16890:	d1f8      	bne.n	16884 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16892:	4826      	ldr	r0, [pc, #152]	; (1692c <wifi_cb+0xb4>)
   16894:	4b26      	ldr	r3, [pc, #152]	; (16930 <wifi_cb+0xb8>)
   16896:	4798      	blx	r3
	down_state &= ~mask;
   16898:	4a26      	ldr	r2, [pc, #152]	; (16934 <wifi_cb+0xbc>)
   1689a:	7813      	ldrb	r3, [r2, #0]
   1689c:	2102      	movs	r1, #2
   1689e:	438b      	bics	r3, r1
   168a0:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   168a2:	071b      	lsls	r3, r3, #28
   168a4:	d416      	bmi.n	168d4 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   168a6:	4b23      	ldr	r3, [pc, #140]	; (16934 <wifi_cb+0xbc>)
   168a8:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   168aa:	075a      	lsls	r2, r3, #29
   168ac:	d41b      	bmi.n	168e6 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
   168ae:	2101      	movs	r1, #1
   168b0:	4821      	ldr	r0, [pc, #132]	; (16938 <wifi_cb+0xc0>)
   168b2:	4b22      	ldr	r3, [pc, #136]	; (1693c <wifi_cb+0xc4>)
   168b4:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   168b6:	23ff      	movs	r3, #255	; 0xff
   168b8:	9300      	str	r3, [sp, #0]
   168ba:	4b21      	ldr	r3, [pc, #132]	; (16940 <wifi_cb+0xc8>)
   168bc:	2202      	movs	r2, #2
   168be:	2112      	movs	r1, #18
   168c0:	4820      	ldr	r0, [pc, #128]	; (16944 <wifi_cb+0xcc>)
   168c2:	4c21      	ldr	r4, [pc, #132]	; (16948 <wifi_cb+0xd0>)
   168c4:	47a0      	blx	r4
   168c6:	e7dd      	b.n	16884 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   168c8:	4820      	ldr	r0, [pc, #128]	; (1694c <wifi_cb+0xd4>)
   168ca:	4b19      	ldr	r3, [pc, #100]	; (16930 <wifi_cb+0xb8>)
   168cc:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   168ce:	4b20      	ldr	r3, [pc, #128]	; (16950 <wifi_cb+0xd8>)
   168d0:	4798      	blx	r3
   168d2:	e7d7      	b.n	16884 <wifi_cb+0xc>
				f_close(&file_object);
   168d4:	481f      	ldr	r0, [pc, #124]	; (16954 <wifi_cb+0xdc>)
   168d6:	4b20      	ldr	r3, [pc, #128]	; (16958 <wifi_cb+0xe0>)
   168d8:	4798      	blx	r3
	down_state &= ~mask;
   168da:	4a16      	ldr	r2, [pc, #88]	; (16934 <wifi_cb+0xbc>)
   168dc:	7813      	ldrb	r3, [r2, #0]
   168de:	2108      	movs	r1, #8
   168e0:	438b      	bics	r3, r1
   168e2:	7013      	strb	r3, [r2, #0]
   168e4:	e7df      	b.n	168a6 <wifi_cb+0x2e>
   168e6:	2204      	movs	r2, #4
   168e8:	4393      	bics	r3, r2
   168ea:	4a12      	ldr	r2, [pc, #72]	; (16934 <wifi_cb+0xbc>)
   168ec:	7013      	strb	r3, [r2, #0]
   168ee:	e7de      	b.n	168ae <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   168f0:	788b      	ldrb	r3, [r1, #2]
   168f2:	784a      	ldrb	r2, [r1, #1]
   168f4:	7808      	ldrb	r0, [r1, #0]
   168f6:	78c9      	ldrb	r1, [r1, #3]
   168f8:	9100      	str	r1, [sp, #0]
   168fa:	0001      	movs	r1, r0
   168fc:	4817      	ldr	r0, [pc, #92]	; (1695c <wifi_cb+0xe4>)
   168fe:	4c18      	ldr	r4, [pc, #96]	; (16960 <wifi_cb+0xe8>)
   16900:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   16902:	2002      	movs	r0, #2
   16904:	4b17      	ldr	r3, [pc, #92]	; (16964 <wifi_cb+0xec>)
   16906:	4798      	blx	r3
		if(do_download_flag == 1)
   16908:	4b17      	ldr	r3, [pc, #92]	; (16968 <wifi_cb+0xf0>)
   1690a:	781b      	ldrb	r3, [r3, #0]
   1690c:	2b01      	cmp	r3, #1
   1690e:	d009      	beq.n	16924 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16910:	4916      	ldr	r1, [pc, #88]	; (1696c <wifi_cb+0xf4>)
   16912:	4809      	ldr	r0, [pc, #36]	; (16938 <wifi_cb+0xc0>)
   16914:	4b16      	ldr	r3, [pc, #88]	; (16970 <wifi_cb+0xf8>)
   16916:	4798      	blx	r3
   16918:	2800      	cmp	r0, #0
   1691a:	d0b3      	beq.n	16884 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   1691c:	4815      	ldr	r0, [pc, #84]	; (16974 <wifi_cb+0xfc>)
   1691e:	4b04      	ldr	r3, [pc, #16]	; (16930 <wifi_cb+0xb8>)
   16920:	4798      	blx	r3
}
   16922:	e7af      	b.n	16884 <wifi_cb+0xc>
			start_download();
   16924:	4b14      	ldr	r3, [pc, #80]	; (16978 <wifi_cb+0x100>)
   16926:	4798      	blx	r3
   16928:	e7ac      	b.n	16884 <wifi_cb+0xc>
   1692a:	46c0      	nop			; (mov r8, r8)
   1692c:	0001ae30 	.word	0x0001ae30
   16930:	00017651 	.word	0x00017651
   16934:	20000851 	.word	0x20000851
   16938:	20000ab0 	.word	0x20000ab0
   1693c:	00014795 	.word	0x00014795
   16940:	0001ae50 	.word	0x0001ae50
   16944:	0001ae60 	.word	0x0001ae60
   16948:	0000d941 	.word	0x0000d941
   1694c:	0001ae10 	.word	0x0001ae10
   16950:	0000d95d 	.word	0x0000d95d
   16954:	20000a84 	.word	0x20000a84
   16958:	00013a85 	.word	0x00013a85
   1695c:	0001ae74 	.word	0x0001ae74
   16960:	00017535 	.word	0x00017535
   16964:	00016321 	.word	0x00016321
   16968:	20000850 	.word	0x20000850
   1696c:	0001a9f8 	.word	0x0001a9f8
   16970:	000146d1 	.word	0x000146d1
   16974:	0001ae9c 	.word	0x0001ae9c
   16978:	00016411 	.word	0x00016411

0001697c <configure_extint_channel>:
{
   1697c:	b510      	push	{r4, lr}
   1697e:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   16980:	ac01      	add	r4, sp, #4
   16982:	0020      	movs	r0, r4
   16984:	4b07      	ldr	r3, [pc, #28]	; (169a4 <configure_extint_channel+0x28>)
   16986:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   16988:	2337      	movs	r3, #55	; 0x37
   1698a:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   1698c:	2300      	movs	r3, #0
   1698e:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   16990:	3301      	adds	r3, #1
   16992:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16994:	3301      	adds	r3, #1
   16996:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16998:	0021      	movs	r1, r4
   1699a:	2007      	movs	r0, #7
   1699c:	4b02      	ldr	r3, [pc, #8]	; (169a8 <configure_extint_channel+0x2c>)
   1699e:	4798      	blx	r3
}
   169a0:	b004      	add	sp, #16
   169a2:	bd10      	pop	{r4, pc}
   169a4:	0000fa19 	.word	0x0000fa19
   169a8:	0000fa2d 	.word	0x0000fa2d

000169ac <configure_extint_callbacks>:
{
   169ac:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   169ae:	2200      	movs	r2, #0
   169b0:	2107      	movs	r1, #7
   169b2:	4804      	ldr	r0, [pc, #16]	; (169c4 <configure_extint_callbacks+0x18>)
   169b4:	4b04      	ldr	r3, [pc, #16]	; (169c8 <configure_extint_callbacks+0x1c>)
   169b6:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   169b8:	2100      	movs	r1, #0
   169ba:	2007      	movs	r0, #7
   169bc:	4b03      	ldr	r3, [pc, #12]	; (169cc <configure_extint_callbacks+0x20>)
   169be:	4798      	blx	r3
}
   169c0:	bd10      	pop	{r4, pc}
   169c2:	46c0      	nop			; (mov r8, r8)
   169c4:	000163b9 	.word	0x000163b9
   169c8:	0000f8d5 	.word	0x0000f8d5
   169cc:	0000f901 	.word	0x0000f901

000169d0 <check_crc>:
* @param[in]    void
* @return       uint8_t : 0 if failed 1 if successful 

**/
uint8_t check_crc()
{
   169d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   169d2:	b0bb      	sub	sp, #236	; 0xec
	char firmware_file_name[] = "0:app.bin";
   169d4:	ac37      	add	r4, sp, #220	; 0xdc
   169d6:	4b4c      	ldr	r3, [pc, #304]	; (16b08 <check_crc+0x138>)
   169d8:	0022      	movs	r2, r4
   169da:	cb03      	ldmia	r3!, {r0, r1}
   169dc:	c203      	stmia	r2!, {r0, r1}
   169de:	881b      	ldrh	r3, [r3, #0]
   169e0:	8013      	strh	r3, [r2, #0]
	FIL firmware_file;
	FRESULT res;
	uint32_t page_size = 64;		//Number of bytes per page --//page size is 64 bytes
	uint32_t total_pages = (firmware_file.fsize / page_size);
   169e2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   169e4:	9301      	str	r3, [sp, #4]
   169e6:	099d      	lsrs	r5, r3, #6
	SerialConsoleWriteString("Checking \r\n");
   169e8:	4848      	ldr	r0, [pc, #288]	; (16b0c <check_crc+0x13c>)
   169ea:	4b49      	ldr	r3, [pc, #292]	; (16b10 <check_crc+0x140>)
   169ec:	4798      	blx	r3
	char block[page_size];
	uint32_t br;
	crc32_t crc_calculated=0;
   169ee:	2300      	movs	r3, #0
   169f0:	932c      	str	r3, [sp, #176]	; 0xb0
	
	res = f_open(&firmware_file, (char const *)firmware_file_name, FA_READ);
   169f2:	2201      	movs	r2, #1
   169f4:	0021      	movs	r1, r4
   169f6:	a82e      	add	r0, sp, #184	; 0xb8
   169f8:	4b46      	ldr	r3, [pc, #280]	; (16b14 <check_crc+0x144>)
   169fa:	4798      	blx	r3
	if (res != FR_OK) {
   169fc:	2800      	cmp	r0, #0
   169fe:	d113      	bne.n	16a28 <check_crc+0x58>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
		//set result to -1, file not read correctly
	}
	
	for (uint32_t i = 0 ; i < (total_pages) ; i++)
   16a00:	2d00      	cmp	r5, #0
   16a02:	d01d      	beq.n	16a40 <check_crc+0x70>
   16a04:	2400      	movs	r4, #0
	{
						
		res = f_read (&firmware_file,block, page_size, &br);
   16a06:	4e44      	ldr	r6, [pc, #272]	; (16b18 <check_crc+0x148>)
		if (res != FR_OK) {
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
				break;
		}
		res = crc32_recalculate(block,page_size,&crc_calculated);
   16a08:	4f44      	ldr	r7, [pc, #272]	; (16b1c <check_crc+0x14c>)
		res = f_read (&firmware_file,block, page_size, &br);
   16a0a:	ab2d      	add	r3, sp, #180	; 0xb4
   16a0c:	2240      	movs	r2, #64	; 0x40
   16a0e:	a902      	add	r1, sp, #8
   16a10:	a82e      	add	r0, sp, #184	; 0xb8
   16a12:	47b0      	blx	r6
		if (res != FR_OK) {
   16a14:	2800      	cmp	r0, #0
   16a16:	d10d      	bne.n	16a34 <check_crc+0x64>
		res = crc32_recalculate(block,page_size,&crc_calculated);
   16a18:	aa2c      	add	r2, sp, #176	; 0xb0
   16a1a:	2140      	movs	r1, #64	; 0x40
   16a1c:	a802      	add	r0, sp, #8
   16a1e:	47b8      	blx	r7
	for (uint32_t i = 0 ; i < (total_pages) ; i++)
   16a20:	3401      	adds	r4, #1
   16a22:	42a5      	cmp	r5, r4
   16a24:	d1f1      	bne.n	16a0a <check_crc+0x3a>
   16a26:	e00b      	b.n	16a40 <check_crc+0x70>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open Firmware File] res %d\r\n", res);
   16a28:	0002      	movs	r2, r0
   16a2a:	493d      	ldr	r1, [pc, #244]	; (16b20 <check_crc+0x150>)
   16a2c:	2000      	movs	r0, #0
   16a2e:	4b3d      	ldr	r3, [pc, #244]	; (16b24 <check_crc+0x154>)
   16a30:	4798      	blx	r3
   16a32:	e7e5      	b.n	16a00 <check_crc+0x30>
				LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
   16a34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   16a36:	0002      	movs	r2, r0
   16a38:	493b      	ldr	r1, [pc, #236]	; (16b28 <check_crc+0x158>)
   16a3a:	2000      	movs	r0, #0
   16a3c:	4c39      	ldr	r4, [pc, #228]	; (16b24 <check_crc+0x154>)
   16a3e:	47a0      	blx	r4
	}
	
	
	// Calculate remainder
	uint32_t remainder = (firmware_file.fsize % page_size);
   16a40:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   16a42:	9301      	str	r3, [sp, #4]
   16a44:	243f      	movs	r4, #63	; 0x3f
   16a46:	401c      	ands	r4, r3
	res = f_read (&firmware_file,block, page_size, &br);
   16a48:	ab2d      	add	r3, sp, #180	; 0xb4
   16a4a:	2240      	movs	r2, #64	; 0x40
   16a4c:	a902      	add	r1, sp, #8
   16a4e:	a82e      	add	r0, sp, #184	; 0xb8
   16a50:	4d31      	ldr	r5, [pc, #196]	; (16b18 <check_crc+0x148>)
   16a52:	47a8      	blx	r5
	if (res != FR_OK) {
   16a54:	2800      	cmp	r0, #0
   16a56:	d13d      	bne.n	16ad4 <check_crc+0x104>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
		
	}

	res = crc32_recalculate(block,remainder,&crc_calculated);
   16a58:	aa2c      	add	r2, sp, #176	; 0xb0
   16a5a:	0021      	movs	r1, r4
   16a5c:	a802      	add	r0, sp, #8
   16a5e:	4b2f      	ldr	r3, [pc, #188]	; (16b1c <check_crc+0x14c>)
   16a60:	4798      	blx	r3
	
	char params_file_name[] = "params.csv";
   16a62:	ac29      	add	r4, sp, #164	; 0xa4
   16a64:	4b31      	ldr	r3, [pc, #196]	; (16b2c <check_crc+0x15c>)
   16a66:	0022      	movs	r2, r4
   16a68:	cb03      	ldmia	r3!, {r0, r1}
   16a6a:	c203      	stmia	r2!, {r0, r1}
   16a6c:	8819      	ldrh	r1, [r3, #0]
   16a6e:	8011      	strh	r1, [r2, #0]
   16a70:	789b      	ldrb	r3, [r3, #2]
   16a72:	7093      	strb	r3, [r2, #2]
	FIL params_file;
	
	SerialConsoleWriteString("Opening params.csv\r\n");
   16a74:	482e      	ldr	r0, [pc, #184]	; (16b30 <check_crc+0x160>)
   16a76:	4b26      	ldr	r3, [pc, #152]	; (16b10 <check_crc+0x140>)
   16a78:	4798      	blx	r3
	res = f_open(&params_file, (char const *)params_file_name, FA_READ);
   16a7a:	2201      	movs	r2, #1
   16a7c:	0021      	movs	r1, r4
   16a7e:	a820      	add	r0, sp, #128	; 0x80
   16a80:	4b24      	ldr	r3, [pc, #144]	; (16b14 <check_crc+0x144>)
   16a82:	4798      	blx	r3
	if (res != FR_OK) {
   16a84:	2800      	cmp	r0, #0
   16a86:	d12c      	bne.n	16ae2 <check_crc+0x112>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
	}
			
	char params[50];
	
	res = f_read (&params_file,(char const *)params, 50, &br);
   16a88:	ab2d      	add	r3, sp, #180	; 0xb4
   16a8a:	2232      	movs	r2, #50	; 0x32
   16a8c:	a913      	add	r1, sp, #76	; 0x4c
   16a8e:	a820      	add	r0, sp, #128	; 0x80
   16a90:	4c21      	ldr	r4, [pc, #132]	; (16b18 <check_crc+0x148>)
   16a92:	47a0      	blx	r4
	if (res != FR_OK) {
   16a94:	2800      	cmp	r0, #0
   16a96:	d12a      	bne.n	16aee <check_crc+0x11e>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
			
	}
	LogMessage(LOG_INFO_LVL ,"[Bytes read from params.csv: ] %d\r\n", br);
   16a98:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   16a9a:	4926      	ldr	r1, [pc, #152]	; (16b34 <check_crc+0x164>)
   16a9c:	2000      	movs	r0, #0
   16a9e:	4b21      	ldr	r3, [pc, #132]	; (16b24 <check_crc+0x154>)
   16aa0:	4798      	blx	r3
			
	f_close(&params_file);
   16aa2:	a820      	add	r0, sp, #128	; 0x80
   16aa4:	4b24      	ldr	r3, [pc, #144]	; (16b38 <check_crc+0x168>)
   16aa6:	4798      	blx	r3

	char * flag = strtok(params, ",");
   16aa8:	4d24      	ldr	r5, [pc, #144]	; (16b3c <check_crc+0x16c>)
   16aaa:	0029      	movs	r1, r5
   16aac:	a813      	add	r0, sp, #76	; 0x4c
   16aae:	4c24      	ldr	r4, [pc, #144]	; (16b40 <check_crc+0x170>)
   16ab0:	47a0      	blx	r4
	char * string_crc_from_file = strtok(NULL, ",");
   16ab2:	0029      	movs	r1, r5
   16ab4:	2000      	movs	r0, #0
   16ab6:	47a0      	blx	r4
	char * useless;
	uint32_t crc_from_file = strtoul(string_crc_from_file,&useless,16);
   16ab8:	2210      	movs	r2, #16
   16aba:	a912      	add	r1, sp, #72	; 0x48
   16abc:	4b21      	ldr	r3, [pc, #132]	; (16b44 <check_crc+0x174>)
   16abe:	4798      	blx	r3
	
	if(crc_calculated == crc_from_file)
   16ac0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   16ac2:	4298      	cmp	r0, r3
   16ac4:	d019      	beq.n	16afa <check_crc+0x12a>
		LogMessage(LOG_INFO_LVL ,"[CRC Matches]\r\n");
		return 1;
	}
	else
	{	
		LogMessage(LOG_INFO_LVL ,"[-10 for Griffindor]\r\n");
   16ac6:	4920      	ldr	r1, [pc, #128]	; (16b48 <check_crc+0x178>)
   16ac8:	2000      	movs	r0, #0
   16aca:	4b16      	ldr	r3, [pc, #88]	; (16b24 <check_crc+0x154>)
   16acc:	4798      	blx	r3
		return 0;
   16ace:	2000      	movs	r0, #0
	}
}
   16ad0:	b03b      	add	sp, #236	; 0xec
   16ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Block from Firmware File] res %d, bytes read %d\r\n", res, br);
   16ad4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   16ad6:	0002      	movs	r2, r0
   16ad8:	4913      	ldr	r1, [pc, #76]	; (16b28 <check_crc+0x158>)
   16ada:	2000      	movs	r0, #0
   16adc:	4d11      	ldr	r5, [pc, #68]	; (16b24 <check_crc+0x154>)
   16ade:	47a8      	blx	r5
   16ae0:	e7ba      	b.n	16a58 <check_crc+0x88>
		LogMessage(LOG_INFO_LVL ,"[FAIL: Could not open params file] res %d\r\n", res);
   16ae2:	0002      	movs	r2, r0
   16ae4:	4919      	ldr	r1, [pc, #100]	; (16b4c <check_crc+0x17c>)
   16ae6:	2000      	movs	r0, #0
   16ae8:	4b0e      	ldr	r3, [pc, #56]	; (16b24 <check_crc+0x154>)
   16aea:	4798      	blx	r3
   16aec:	e7cc      	b.n	16a88 <check_crc+0xb8>
			LogMessage(LOG_INFO_LVL ,"[FAIL: Could not read Parameters File] res %d\r\n", res);
   16aee:	0002      	movs	r2, r0
   16af0:	4917      	ldr	r1, [pc, #92]	; (16b50 <check_crc+0x180>)
   16af2:	2000      	movs	r0, #0
   16af4:	4b0b      	ldr	r3, [pc, #44]	; (16b24 <check_crc+0x154>)
   16af6:	4798      	blx	r3
   16af8:	e7ce      	b.n	16a98 <check_crc+0xc8>
		LogMessage(LOG_INFO_LVL ,"[CRC Matches]\r\n");
   16afa:	4916      	ldr	r1, [pc, #88]	; (16b54 <check_crc+0x184>)
   16afc:	2000      	movs	r0, #0
   16afe:	4b09      	ldr	r3, [pc, #36]	; (16b24 <check_crc+0x154>)
   16b00:	4798      	blx	r3
		return 1;
   16b02:	2001      	movs	r0, #1
   16b04:	e7e4      	b.n	16ad0 <check_crc+0x100>
   16b06:	46c0      	nop			; (mov r8, r8)
   16b08:	0001a5e8 	.word	0x0001a5e8
   16b0c:	0001a4a0 	.word	0x0001a4a0
   16b10:	0000b3fd 	.word	0x0000b3fd
   16b14:	00013485 	.word	0x00013485
   16b18:	0001360d 	.word	0x0001360d
   16b1c:	0000b115 	.word	0x0000b115
   16b20:	0001a4ac 	.word	0x0001a4ac
   16b24:	0000b4a9 	.word	0x0000b4a9
   16b28:	0001a4dc 	.word	0x0001a4dc
   16b2c:	0001a5f4 	.word	0x0001a5f4
   16b30:	0001a524 	.word	0x0001a524
   16b34:	0001a598 	.word	0x0001a598
   16b38:	00013a85 	.word	0x00013a85
   16b3c:	0001a5bc 	.word	0x0001a5bc
   16b40:	0001795d 	.word	0x0001795d
   16b44:	00017c4d 	.word	0x00017c4d
   16b48:	0001a5d0 	.word	0x0001a5d0
   16b4c:	0001a53c 	.word	0x0001a53c
   16b50:	0001a568 	.word	0x0001a568
   16b54:	0001a5c0 	.word	0x0001a5c0

00016b58 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   16b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b5a:	b091      	sub	sp, #68	; 0x44
	down_state = NOT_READY;
   16b5c:	2200      	movs	r2, #0
   16b5e:	4bc2      	ldr	r3, [pc, #776]	; (16e68 <main+0x310>)
   16b60:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
   16b62:	4bc2      	ldr	r3, [pc, #776]	; (16e6c <main+0x314>)
   16b64:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   16b66:	4bc2      	ldr	r3, [pc, #776]	; (16e70 <main+0x318>)
   16b68:	4798      	blx	r3
	stdio_base = (void *)GetUsartModule();
   16b6a:	4bc2      	ldr	r3, [pc, #776]	; (16e74 <main+0x31c>)
   16b6c:	4798      	blx	r3
   16b6e:	4bc2      	ldr	r3, [pc, #776]	; (16e78 <main+0x320>)
   16b70:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   16b72:	4ac2      	ldr	r2, [pc, #776]	; (16e7c <main+0x324>)
   16b74:	4bc2      	ldr	r3, [pc, #776]	; (16e80 <main+0x328>)
   16b76:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16b78:	4ac2      	ldr	r2, [pc, #776]	; (16e84 <main+0x32c>)
   16b7a:	4bc3      	ldr	r3, [pc, #780]	; (16e88 <main+0x330>)
   16b7c:	601a      	str	r2, [r3, #0]
	setbuf(stdout, NULL);
   16b7e:	4dc3      	ldr	r5, [pc, #780]	; (16e8c <main+0x334>)
   16b80:	682b      	ldr	r3, [r5, #0]
   16b82:	6898      	ldr	r0, [r3, #8]
   16b84:	2100      	movs	r1, #0
   16b86:	4cc2      	ldr	r4, [pc, #776]	; (16e90 <main+0x338>)
   16b88:	47a0      	blx	r4
	setbuf(stdin, NULL);
   16b8a:	682b      	ldr	r3, [r5, #0]
   16b8c:	6858      	ldr	r0, [r3, #4]
   16b8e:	2100      	movs	r1, #0
   16b90:	47a0      	blx	r4
	configure_console();
	printf(STRING_HEADER);
   16b92:	48c0      	ldr	r0, [pc, #768]	; (16e94 <main+0x33c>)
   16b94:	4cc0      	ldr	r4, [pc, #768]	; (16e98 <main+0x340>)
   16b96:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
   16b98:	48c0      	ldr	r0, [pc, #768]	; (16e9c <main+0x344>)
   16b9a:	47a0      	blx	r4
	printf("ESE516 - Wifi Init Code\r\n");
   16b9c:	48c0      	ldr	r0, [pc, #768]	; (16ea0 <main+0x348>)
   16b9e:	47a0      	blx	r4
	sd_mmc_init();
   16ba0:	4bc0      	ldr	r3, [pc, #768]	; (16ea4 <main+0x34c>)
   16ba2:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");		
   16ba4:	48c0      	ldr	r0, [pc, #768]	; (16ea8 <main+0x350>)
   16ba6:	47a0      	blx	r4
			status = sd_mmc_test_unit_ready(0);
   16ba8:	4ec0      	ldr	r6, [pc, #768]	; (16eac <main+0x354>)
				printf("init_storage: SD Card install failed.\r\n");
   16baa:	4cbb      	ldr	r4, [pc, #748]	; (16e98 <main+0x340>)
   16bac:	e008      	b.n	16bc0 <main+0x68>
   16bae:	48c0      	ldr	r0, [pc, #768]	; (16eb0 <main+0x358>)
   16bb0:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   16bb2:	48c0      	ldr	r0, [pc, #768]	; (16eb4 <main+0x35c>)
   16bb4:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16bb6:	4dc0      	ldr	r5, [pc, #768]	; (16eb8 <main+0x360>)
   16bb8:	2000      	movs	r0, #0
   16bba:	47a8      	blx	r5
   16bbc:	2802      	cmp	r0, #2
   16bbe:	d1fb      	bne.n	16bb8 <main+0x60>
			status = sd_mmc_test_unit_ready(0);
   16bc0:	2000      	movs	r0, #0
   16bc2:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   16bc4:	2801      	cmp	r0, #1
   16bc6:	d0f2      	beq.n	16bae <main+0x56>
		} while (CTRL_GOOD != status);
   16bc8:	2800      	cmp	r0, #0
   16bca:	d1f9      	bne.n	16bc0 <main+0x68>
		printf("init_storage: mounting SD card...\r\n");
   16bcc:	48bb      	ldr	r0, [pc, #748]	; (16ebc <main+0x364>)
   16bce:	4bb2      	ldr	r3, [pc, #712]	; (16e98 <main+0x340>)
   16bd0:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   16bd2:	4cbb      	ldr	r4, [pc, #748]	; (16ec0 <main+0x368>)
   16bd4:	228c      	movs	r2, #140	; 0x8c
   16bd6:	0092      	lsls	r2, r2, #2
   16bd8:	2100      	movs	r1, #0
   16bda:	0020      	movs	r0, r4
   16bdc:	4bb9      	ldr	r3, [pc, #740]	; (16ec4 <main+0x36c>)
   16bde:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16be0:	0021      	movs	r1, r4
   16be2:	2000      	movs	r0, #0
   16be4:	4bb8      	ldr	r3, [pc, #736]	; (16ec8 <main+0x370>)
   16be6:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   16be8:	280b      	cmp	r0, #11
   16bea:	d041      	beq.n	16c70 <main+0x118>
		printf("init_storage: SD card mount OK.\r\n");
   16bec:	48b7      	ldr	r0, [pc, #732]	; (16ecc <main+0x374>)
   16bee:	4baa      	ldr	r3, [pc, #680]	; (16e98 <main+0x340>)
   16bf0:	4798      	blx	r3
		add_state(STORAGE_READY);
   16bf2:	2001      	movs	r0, #1
   16bf4:	4bb6      	ldr	r3, [pc, #728]	; (16ed0 <main+0x378>)
   16bf6:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   16bf8:	ac03      	add	r4, sp, #12
   16bfa:	0020      	movs	r0, r4
   16bfc:	4bb5      	ldr	r3, [pc, #724]	; (16ed4 <main+0x37c>)
   16bfe:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   16c00:	4db5      	ldr	r5, [pc, #724]	; (16ed8 <main+0x380>)
   16c02:	0021      	movs	r1, r4
   16c04:	0028      	movs	r0, r5
   16c06:	4bb5      	ldr	r3, [pc, #724]	; (16edc <main+0x384>)
   16c08:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   16c0a:	0028      	movs	r0, r5
   16c0c:	4bb4      	ldr	r3, [pc, #720]	; (16ee0 <main+0x388>)
   16c0e:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   16c10:	0020      	movs	r0, r4
   16c12:	4bb4      	ldr	r3, [pc, #720]	; (16ee4 <main+0x38c>)
   16c14:	4798      	blx	r3
	httpc_conf.port = 443;
   16c16:	23bc      	movs	r3, #188	; 0xbc
   16c18:	33ff      	adds	r3, #255	; 0xff
   16c1a:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   16c1c:	3bbb      	subs	r3, #187	; 0xbb
   16c1e:	3bff      	subs	r3, #255	; 0xff
   16c20:	70a3      	strb	r3, [r4, #2]
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16c22:	4bb1      	ldr	r3, [pc, #708]	; (16ee8 <main+0x390>)
   16c24:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   16c26:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16c28:	0021      	movs	r1, r4
   16c2a:	48b0      	ldr	r0, [pc, #704]	; (16eec <main+0x394>)
   16c2c:	4bb0      	ldr	r3, [pc, #704]	; (16ef0 <main+0x398>)
   16c2e:	4798      	blx	r3
   16c30:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   16c32:	db22      	blt.n	16c7a <main+0x122>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   16c34:	49af      	ldr	r1, [pc, #700]	; (16ef4 <main+0x39c>)
   16c36:	48ad      	ldr	r0, [pc, #692]	; (16eec <main+0x394>)
   16c38:	4baf      	ldr	r3, [pc, #700]	; (16ef8 <main+0x3a0>)
   16c3a:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   16c3c:	ac03      	add	r4, sp, #12
   16c3e:	0020      	movs	r0, r4
   16c40:	4bae      	ldr	r3, [pc, #696]	; (16efc <main+0x3a4>)
   16c42:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   16c44:	4bae      	ldr	r3, [pc, #696]	; (16f00 <main+0x3a8>)
   16c46:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16c48:	2380      	movs	r3, #128	; 0x80
   16c4a:	009b      	lsls	r3, r3, #2
   16c4c:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   16c4e:	4aad      	ldr	r2, [pc, #692]	; (16f04 <main+0x3ac>)
   16c50:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16c52:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   16c54:	4bac      	ldr	r3, [pc, #688]	; (16f08 <main+0x3b0>)
   16c56:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   16c58:	4bac      	ldr	r3, [pc, #688]	; (16f0c <main+0x3b4>)
   16c5a:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16c5c:	0021      	movs	r1, r4
   16c5e:	48ac      	ldr	r0, [pc, #688]	; (16f10 <main+0x3b8>)
   16c60:	4bac      	ldr	r3, [pc, #688]	; (16f14 <main+0x3bc>)
   16c62:	4798      	blx	r3
   16c64:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   16c66:	da0c      	bge.n	16c82 <main+0x12a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   16c68:	48ab      	ldr	r0, [pc, #684]	; (16f18 <main+0x3c0>)
   16c6a:	4bac      	ldr	r3, [pc, #688]	; (16f1c <main+0x3c4>)
   16c6c:	4798      	blx	r3
   16c6e:	e7fe      	b.n	16c6e <main+0x116>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   16c70:	210b      	movs	r1, #11
   16c72:	48ab      	ldr	r0, [pc, #684]	; (16f20 <main+0x3c8>)
   16c74:	4ba9      	ldr	r3, [pc, #676]	; (16f1c <main+0x3c4>)
   16c76:	4798      	blx	r3
   16c78:	e7be      	b.n	16bf8 <main+0xa0>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16c7a:	48aa      	ldr	r0, [pc, #680]	; (16f24 <main+0x3cc>)
   16c7c:	4ba7      	ldr	r3, [pc, #668]	; (16f1c <main+0x3c4>)
   16c7e:	4798      	blx	r3
   16c80:	e7fe      	b.n	16c80 <main+0x128>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16c82:	49a9      	ldr	r1, [pc, #676]	; (16f28 <main+0x3d0>)
   16c84:	48a2      	ldr	r0, [pc, #648]	; (16f10 <main+0x3b8>)
   16c86:	4ba9      	ldr	r3, [pc, #676]	; (16f2c <main+0x3d4>)
   16c88:	4798      	blx	r3
   16c8a:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   16c8c:	db15      	blt.n	16cba <main+0x162>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
   16c8e:	4ba8      	ldr	r3, [pc, #672]	; (16f30 <main+0x3d8>)
   16c90:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   16c92:	4ba8      	ldr	r3, [pc, #672]	; (16f34 <main+0x3dc>)
   16c94:	4798      	blx	r3
	configure_extint_callbacks();
   16c96:	4ba8      	ldr	r3, [pc, #672]	; (16f38 <main+0x3e0>)
   16c98:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16c9a:	2218      	movs	r2, #24
   16c9c:	2100      	movs	r1, #0
   16c9e:	a80a      	add	r0, sp, #40	; 0x28
   16ca0:	4b88      	ldr	r3, [pc, #544]	; (16ec4 <main+0x36c>)
   16ca2:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   16ca4:	4ba5      	ldr	r3, [pc, #660]	; (16f3c <main+0x3e4>)
   16ca6:	930a      	str	r3, [sp, #40]	; 0x28
	ret = m2m_wifi_init(&param);
   16ca8:	a80a      	add	r0, sp, #40	; 0x28
   16caa:	4ba5      	ldr	r3, [pc, #660]	; (16f40 <main+0x3e8>)
   16cac:	4798      	blx	r3
   16cae:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   16cb0:	d007      	beq.n	16cc2 <main+0x16a>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16cb2:	48a4      	ldr	r0, [pc, #656]	; (16f44 <main+0x3ec>)
   16cb4:	4b99      	ldr	r3, [pc, #612]	; (16f1c <main+0x3c4>)
   16cb6:	4798      	blx	r3
   16cb8:	e7fe      	b.n	16cb8 <main+0x160>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   16cba:	48a3      	ldr	r0, [pc, #652]	; (16f48 <main+0x3f0>)
   16cbc:	4b97      	ldr	r3, [pc, #604]	; (16f1c <main+0x3c4>)
   16cbe:	4798      	blx	r3
   16cc0:	e7fe      	b.n	16cc0 <main+0x168>
   16cc2:	2000      	movs	r0, #0
   16cc4:	4ba1      	ldr	r3, [pc, #644]	; (16f4c <main+0x3f4>)
   16cc6:	4798      	blx	r3
   16cc8:	4ba1      	ldr	r3, [pc, #644]	; (16f50 <main+0x3f8>)
   16cca:	7a1b      	ldrb	r3, [r3, #8]
   16ccc:	b2db      	uxtb	r3, r3
   16cce:	40d8      	lsrs	r0, r3
		while (1) {
				}
		}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   16cd0:	21fa      	movs	r1, #250	; 0xfa
   16cd2:	0089      	lsls	r1, r1, #2
   16cd4:	4b9f      	ldr	r3, [pc, #636]	; (16f54 <main+0x3fc>)
   16cd6:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   16cd8:	3801      	subs	r0, #1
   16cda:	4b9f      	ldr	r3, [pc, #636]	; (16f58 <main+0x400>)
   16cdc:	4298      	cmp	r0, r3
   16cde:	d900      	bls.n	16ce2 <main+0x18a>
   16ce0:	e0bd      	b.n	16e5e <main+0x306>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   16ce2:	4a9e      	ldr	r2, [pc, #632]	; (16f5c <main+0x404>)
   16ce4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   16ce6:	489e      	ldr	r0, [pc, #632]	; (16f60 <main+0x408>)
   16ce8:	6a03      	ldr	r3, [r0, #32]
   16cea:	021b      	lsls	r3, r3, #8
   16cec:	0a1b      	lsrs	r3, r3, #8
   16cee:	21c0      	movs	r1, #192	; 0xc0
   16cf0:	0609      	lsls	r1, r1, #24
   16cf2:	430b      	orrs	r3, r1
   16cf4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   16cf6:	2300      	movs	r3, #0
   16cf8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   16cfa:	2107      	movs	r1, #7
   16cfc:	6011      	str	r1, [r2, #0]
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	//DOWNLOAD A FILE
	do_download_flag = false; // might hold off on download for now
   16cfe:	4a99      	ldr	r2, [pc, #612]	; (16f64 <main+0x40c>)
   16d00:	7013      	strb	r3, [r2, #0]

	/* Initialize socket module. */
	socketInit();
   16d02:	4b99      	ldr	r3, [pc, #612]	; (16f68 <main+0x410>)
   16d04:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_event_handler, socket_resolve_handler);//registerSocketCallback(socket_cb, resolve_cb);
   16d06:	4999      	ldr	r1, [pc, #612]	; (16f6c <main+0x414>)
   16d08:	4899      	ldr	r0, [pc, #612]	; (16f70 <main+0x418>)
   16d0a:	4b9a      	ldr	r3, [pc, #616]	; (16f74 <main+0x41c>)
   16d0c:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16d0e:	4c9a      	ldr	r4, [pc, #616]	; (16f78 <main+0x420>)
   16d10:	0021      	movs	r1, r4
   16d12:	489a      	ldr	r0, [pc, #616]	; (16f7c <main+0x424>)
   16d14:	4b81      	ldr	r3, [pc, #516]	; (16f1c <main+0x3c4>)
   16d16:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16d18:	23ff      	movs	r3, #255	; 0xff
   16d1a:	9300      	str	r3, [sp, #0]
   16d1c:	4b98      	ldr	r3, [pc, #608]	; (16f80 <main+0x428>)
   16d1e:	2202      	movs	r2, #2
   16d20:	2112      	movs	r1, #18
   16d22:	0020      	movs	r0, r4
   16d24:	4c97      	ldr	r4, [pc, #604]	; (16f84 <main+0x42c>)
   16d26:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   16d28:	4b4f      	ldr	r3, [pc, #316]	; (16e68 <main+0x310>)

	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16d2a:	781a      	ldrb	r2, [r3, #0]
   16d2c:	2332      	movs	r3, #50	; 0x32
   16d2e:	421a      	tst	r2, r3
   16d30:	d022      	beq.n	16d78 <main+0x220>
		sw_timer_task(&swt_module_inst);
	}
	
	//temporarily not downloading before program, just downloading after

	printf("main: done.\r\n");
   16d32:	4895      	ldr	r0, [pc, #596]	; (16f88 <main+0x430>)
   16d34:	4c58      	ldr	r4, [pc, #352]	; (16e98 <main+0x340>)
   16d36:	47a0      	blx	r4
	//printf("main2: done.\r\n");

	//Disable socket for HTTP Transfer
	//socketDeinit();

	delay_s(1);
   16d38:	20fa      	movs	r0, #250	; 0xfa
   16d3a:	0080      	lsls	r0, r0, #2
   16d3c:	4b93      	ldr	r3, [pc, #588]	; (16f8c <main+0x434>)
   16d3e:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
   16d40:	2200      	movs	r2, #0
   16d42:	4b88      	ldr	r3, [pc, #544]	; (16f64 <main+0x40c>)
   16d44:	701a      	strb	r2, [r3, #0]
	//Re-enable socket for MQTT Transfer
	//socketInit();
	//registerSocketCallback(socket_event_handler, socket_resolve_handler);

		/* Connect to router. */
	printf("check3\r\n");
   16d46:	4892      	ldr	r0, [pc, #584]	; (16f90 <main+0x438>)
   16d48:	47a0      	blx	r4
	//if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
	//{
	//	printf("Error connecting to MQTT Broker!\r\n");
	//}
	printf("check4\r\n");
   16d4a:	4892      	ldr	r0, [pc, #584]	; (16f94 <main+0x43c>)
   16d4c:	47a0      	blx	r4


	while (1) {
	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   16d4e:	4d92      	ldr	r5, [pc, #584]	; (16f98 <main+0x440>)
		sw_timer_task(&swt_module_inst);
		if(isPressed)
   16d50:	4c92      	ldr	r4, [pc, #584]	; (16f9c <main+0x444>)
		sw_timer_task(&swt_module_inst);
   16d52:	4f61      	ldr	r7, [pc, #388]	; (16ed8 <main+0x380>)
   16d54:	4e92      	ldr	r6, [pc, #584]	; (16fa0 <main+0x448>)
		m2m_wifi_handle_events(NULL);
   16d56:	2000      	movs	r0, #0
   16d58:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
   16d5a:	0038      	movs	r0, r7
   16d5c:	47b0      	blx	r6
		if(isPressed)
   16d5e:	7823      	ldrb	r3, [r4, #0]
   16d60:	2b00      	cmp	r3, #0
   16d62:	d116      	bne.n	16d92 <main+0x23a>
			otafu();
			isPressed = false;
		}

		//Handle MQTT messages
			if(mqtt_inst.isConnected)
   16d64:	2334      	movs	r3, #52	; 0x34
   16d66:	4a6a      	ldr	r2, [pc, #424]	; (16f10 <main+0x3b8>)
   16d68:	5cd3      	ldrb	r3, [r2, r3]
   16d6a:	2b00      	cmp	r3, #0
   16d6c:	d0f3      	beq.n	16d56 <main+0x1fe>
			mqtt_yield(&mqtt_inst, 100);
   16d6e:	2164      	movs	r1, #100	; 0x64
   16d70:	0010      	movs	r0, r2
   16d72:	4b8c      	ldr	r3, [pc, #560]	; (16fa4 <main+0x44c>)
   16d74:	4798      	blx	r3
   16d76:	e7ec      	b.n	16d52 <main+0x1fa>
		m2m_wifi_handle_events(NULL);
   16d78:	4e87      	ldr	r6, [pc, #540]	; (16f98 <main+0x440>)
		sw_timer_task(&swt_module_inst);
   16d7a:	4d57      	ldr	r5, [pc, #348]	; (16ed8 <main+0x380>)
   16d7c:	4c88      	ldr	r4, [pc, #544]	; (16fa0 <main+0x448>)
		m2m_wifi_handle_events(NULL);
   16d7e:	2000      	movs	r0, #0
   16d80:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16d82:	0028      	movs	r0, r5
   16d84:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   16d86:	4b38      	ldr	r3, [pc, #224]	; (16e68 <main+0x310>)
	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16d88:	781b      	ldrb	r3, [r3, #0]
   16d8a:	2232      	movs	r2, #50	; 0x32
   16d8c:	421a      	tst	r2, r3
   16d8e:	d0f6      	beq.n	16d7e <main+0x226>
   16d90:	e7cf      	b.n	16d32 <main+0x1da>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   16d92:	4e85      	ldr	r6, [pc, #532]	; (16fa8 <main+0x450>)
   16d94:	0030      	movs	r0, r6
   16d96:	4b85      	ldr	r3, [pc, #532]	; (16fac <main+0x454>)
   16d98:	4798      	blx	r3
   16d9a:	0003      	movs	r3, r0
   16d9c:	4d5c      	ldr	r5, [pc, #368]	; (16f10 <main+0x3b8>)
   16d9e:	2400      	movs	r4, #0
   16da0:	9401      	str	r4, [sp, #4]
   16da2:	2702      	movs	r7, #2
   16da4:	9700      	str	r7, [sp, #0]
   16da6:	0032      	movs	r2, r6
   16da8:	4981      	ldr	r1, [pc, #516]	; (16fb0 <main+0x458>)
   16daa:	0028      	movs	r0, r5
   16dac:	4e81      	ldr	r6, [pc, #516]	; (16fb4 <main+0x45c>)
   16dae:	47b0      	blx	r6
	do_download_flag = true;
   16db0:	2601      	movs	r6, #1
   16db2:	4b6c      	ldr	r3, [pc, #432]	; (16f64 <main+0x40c>)
   16db4:	701e      	strb	r6, [r3, #0]
	second_file = 0;
   16db6:	4b80      	ldr	r3, [pc, #512]	; (16fb8 <main+0x460>)
   16db8:	701c      	strb	r4, [r3, #0]
	mqtt_deinit(&mqtt_inst);
   16dba:	0028      	movs	r0, r5
   16dbc:	4b7f      	ldr	r3, [pc, #508]	; (16fbc <main+0x464>)
   16dbe:	4798      	blx	r3
	socketDeinit();
   16dc0:	4b7f      	ldr	r3, [pc, #508]	; (16fc0 <main+0x468>)
   16dc2:	4798      	blx	r3
	delay_s(1);
   16dc4:	20fa      	movs	r0, #250	; 0xfa
   16dc6:	0080      	lsls	r0, r0, #2
   16dc8:	4b70      	ldr	r3, [pc, #448]	; (16f8c <main+0x434>)
   16dca:	4798      	blx	r3
	socketInit();
   16dcc:	4b66      	ldr	r3, [pc, #408]	; (16f68 <main+0x410>)
   16dce:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
   16dd0:	497c      	ldr	r1, [pc, #496]	; (16fc4 <main+0x46c>)
   16dd2:	487d      	ldr	r0, [pc, #500]	; (16fc8 <main+0x470>)
   16dd4:	4b67      	ldr	r3, [pc, #412]	; (16f74 <main+0x41c>)
   16dd6:	4798      	blx	r3
	down_state = NOT_READY;
   16dd8:	4d23      	ldr	r5, [pc, #140]	; (16e68 <main+0x310>)
   16dda:	702c      	strb	r4, [r5, #0]
	add_state(WIFI_CONNECTED);
   16ddc:	0038      	movs	r0, r7
   16dde:	4c3c      	ldr	r4, [pc, #240]	; (16ed0 <main+0x378>)
   16de0:	47a0      	blx	r4
	add_state(STORAGE_READY);
   16de2:	0030      	movs	r0, r6
   16de4:	47a0      	blx	r4
	start_download();
   16de6:	4b79      	ldr	r3, [pc, #484]	; (16fcc <main+0x474>)
   16de8:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dea:	782a      	ldrb	r2, [r5, #0]
   16dec:	2330      	movs	r3, #48	; 0x30
   16dee:	421a      	tst	r2, r3
   16df0:	d10b      	bne.n	16e0a <main+0x2b2>
		m2m_wifi_handle_events(NULL);
   16df2:	4e69      	ldr	r6, [pc, #420]	; (16f98 <main+0x440>)
		sw_timer_task(&swt_module_inst);
   16df4:	4d38      	ldr	r5, [pc, #224]	; (16ed8 <main+0x380>)
   16df6:	4c6a      	ldr	r4, [pc, #424]	; (16fa0 <main+0x448>)
		m2m_wifi_handle_events(NULL);
   16df8:	2000      	movs	r0, #0
   16dfa:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16dfc:	0028      	movs	r0, r5
   16dfe:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   16e00:	4b19      	ldr	r3, [pc, #100]	; (16e68 <main+0x310>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16e02:	781b      	ldrb	r3, [r3, #0]
   16e04:	2230      	movs	r2, #48	; 0x30
   16e06:	421a      	tst	r2, r3
   16e08:	d0f6      	beq.n	16df8 <main+0x2a0>
	second_file = 1;
   16e0a:	2601      	movs	r6, #1
   16e0c:	4b6a      	ldr	r3, [pc, #424]	; (16fb8 <main+0x460>)
   16e0e:	701e      	strb	r6, [r3, #0]
	down_state = NOT_READY;
   16e10:	4c15      	ldr	r4, [pc, #84]	; (16e68 <main+0x310>)
   16e12:	2300      	movs	r3, #0
   16e14:	7023      	strb	r3, [r4, #0]
	add_state(WIFI_CONNECTED);
   16e16:	2002      	movs	r0, #2
   16e18:	4d2d      	ldr	r5, [pc, #180]	; (16ed0 <main+0x378>)
   16e1a:	47a8      	blx	r5
	add_state(STORAGE_READY);
   16e1c:	0030      	movs	r0, r6
   16e1e:	47a8      	blx	r5
	start_download();
   16e20:	4b6a      	ldr	r3, [pc, #424]	; (16fcc <main+0x474>)
   16e22:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16e24:	7822      	ldrb	r2, [r4, #0]
   16e26:	2330      	movs	r3, #48	; 0x30
   16e28:	421a      	tst	r2, r3
   16e2a:	d10b      	bne.n	16e44 <main+0x2ec>
		m2m_wifi_handle_events(NULL);
   16e2c:	4e5a      	ldr	r6, [pc, #360]	; (16f98 <main+0x440>)
		sw_timer_task(&swt_module_inst);
   16e2e:	4d2a      	ldr	r5, [pc, #168]	; (16ed8 <main+0x380>)
   16e30:	4c5b      	ldr	r4, [pc, #364]	; (16fa0 <main+0x448>)
		m2m_wifi_handle_events(NULL);
   16e32:	2000      	movs	r0, #0
   16e34:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16e36:	0028      	movs	r0, r5
   16e38:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   16e3a:	4b0b      	ldr	r3, [pc, #44]	; (16e68 <main+0x310>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16e3c:	781b      	ldrb	r3, [r3, #0]
   16e3e:	2230      	movs	r2, #48	; 0x30
   16e40:	421a      	tst	r2, r3
   16e42:	d0f6      	beq.n	16e32 <main+0x2da>
	printf("otafu: done.\r\n");
   16e44:	4862      	ldr	r0, [pc, #392]	; (16fd0 <main+0x478>)
   16e46:	4b14      	ldr	r3, [pc, #80]	; (16e98 <main+0x340>)
   16e48:	4798      	blx	r3
	uint8_t result_crc= check_crc();	
   16e4a:	4b62      	ldr	r3, [pc, #392]	; (16fd4 <main+0x47c>)
   16e4c:	4798      	blx	r3
  __ASM volatile ("dsb");
   16e4e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16e52:	4a61      	ldr	r2, [pc, #388]	; (16fd8 <main+0x480>)
   16e54:	4b42      	ldr	r3, [pc, #264]	; (16f60 <main+0x408>)
   16e56:	60da      	str	r2, [r3, #12]
   16e58:	f3bf 8f4f 	dsb	sy
   16e5c:	e7fe      	b.n	16e5c <main+0x304>
		puts("ERR>> Systick configuration error\r\n");
   16e5e:	485f      	ldr	r0, [pc, #380]	; (16fdc <main+0x484>)
   16e60:	4b0d      	ldr	r3, [pc, #52]	; (16e98 <main+0x340>)
   16e62:	4798      	blx	r3
   16e64:	e7fe      	b.n	16e64 <main+0x30c>
   16e66:	46c0      	nop			; (mov r8, r8)
   16e68:	20000851 	.word	0x20000851
   16e6c:	00011625 	.word	0x00011625
   16e70:	0000b2d5 	.word	0x0000b2d5
   16e74:	0000b4b1 	.word	0x0000b4b1
   16e78:	200014e0 	.word	0x200014e0
   16e7c:	000164d5 	.word	0x000164d5
   16e80:	200014dc 	.word	0x200014dc
   16e84:	000164a9 	.word	0x000164a9
   16e88:	200014d8 	.word	0x200014d8
   16e8c:	20000150 	.word	0x20000150
   16e90:	00017689 	.word	0x00017689
   16e94:	0001a6e4 	.word	0x0001a6e4
   16e98:	00017651 	.word	0x00017651
   16e9c:	0001a744 	.word	0x0001a744
   16ea0:	0001a780 	.word	0x0001a780
   16ea4:	0000b5dd 	.word	0x0000b5dd
   16ea8:	0001a79c 	.word	0x0001a79c
   16eac:	0000bd11 	.word	0x0000bd11
   16eb0:	0001a7d4 	.word	0x0001a7d4
   16eb4:	0001a7fc 	.word	0x0001a7fc
   16eb8:	0000b5fd 	.word	0x0000b5fd
   16ebc:	0001a82c 	.word	0x0001a82c
   16ec0:	20000854 	.word	0x20000854
   16ec4:	000173d3 	.word	0x000173d3
   16ec8:	00013455 	.word	0x00013455
   16ecc:	0001a880 	.word	0x0001a880
   16ed0:	00016321 	.word	0x00016321
   16ed4:	00016189 	.word	0x00016189
   16ed8:	200014f8 	.word	0x200014f8
   16edc:	00016195 	.word	0x00016195
   16ee0:	00016241 	.word	0x00016241
   16ee4:	000151a1 	.word	0x000151a1
   16ee8:	000005a6 	.word	0x000005a6
   16eec:	20001550 	.word	0x20001550
   16ef0:	000151c9 	.word	0x000151c9
   16ef4:	00016785 	.word	0x00016785
   16ef8:	0001527d 	.word	0x0001527d
   16efc:	0001468d 	.word	0x0001468d
   16f00:	20000ae8 	.word	0x20000ae8
   16f04:	20000ce8 	.word	0x20000ce8
   16f08:	00002d69 	.word	0x00002d69
   16f0c:	00001770 	.word	0x00001770
   16f10:	20000ab0 	.word	0x20000ab0
   16f14:	000145d5 	.word	0x000145d5
   16f18:	0001a8ec 	.word	0x0001a8ec
   16f1c:	00017535 	.word	0x00017535
   16f20:	0001a850 	.word	0x0001a850
   16f24:	0001a8a4 	.word	0x0001a8a4
   16f28:	0001664d 	.word	0x0001664d
   16f2c:	000146a9 	.word	0x000146a9
   16f30:	0000c5f5 	.word	0x0000c5f5
   16f34:	0001697d 	.word	0x0001697d
   16f38:	000169ad 	.word	0x000169ad
   16f3c:	00016879 	.word	0x00016879
   16f40:	0000d571 	.word	0x0000d571
   16f44:	0001a954 	.word	0x0001a954
   16f48:	0001a920 	.word	0x0001a920
   16f4c:	000113e1 	.word	0x000113e1
   16f50:	40000400 	.word	0x40000400
   16f54:	00016fe1 	.word	0x00016fe1
   16f58:	00ffffff 	.word	0x00ffffff
   16f5c:	e000e010 	.word	0xe000e010
   16f60:	e000ed00 	.word	0xe000ed00
   16f64:	20000850 	.word	0x20000850
   16f68:	0000f199 	.word	0x0000f199
   16f6c:	000163f9 	.word	0x000163f9
   16f70:	00016405 	.word	0x00016405
   16f74:	0000f219 	.word	0x0000f219
   16f78:	0001ae60 	.word	0x0001ae60
   16f7c:	0001a980 	.word	0x0001a980
   16f80:	0001ae50 	.word	0x0001ae50
   16f84:	0000d941 	.word	0x0000d941
   16f88:	0001a9a4 	.word	0x0001a9a4
   16f8c:	0000c5b5 	.word	0x0000c5b5
   16f90:	0001a9b4 	.word	0x0001a9b4
   16f94:	0001a9bc 	.word	0x0001a9bc
   16f98:	0000d6a5 	.word	0x0000d6a5
   16f9c:	20000aac 	.word	0x20000aac
   16fa0:	000162c9 	.word	0x000162c9
   16fa4:	00014881 	.word	0x00014881
   16fa8:	20000010 	.word	0x20000010
   16fac:	000178fb 	.word	0x000178fb
   16fb0:	0001aac0 	.word	0x0001aac0
   16fb4:	00014821 	.word	0x00014821
   16fb8:	20000eec 	.word	0x20000eec
   16fbc:	000147c5 	.word	0x000147c5
   16fc0:	0000f1dd 	.word	0x0000f1dd
   16fc4:	0001673d 	.word	0x0001673d
   16fc8:	00016779 	.word	0x00016779
   16fcc:	00016411 	.word	0x00016411
   16fd0:	0001a9c4 	.word	0x0001a9c4
   16fd4:	000169d1 	.word	0x000169d1
   16fd8:	05fa0004 	.word	0x05fa0004
   16fdc:	0001a9d4 	.word	0x0001a9d4

00016fe0 <__udivsi3>:
   16fe0:	2200      	movs	r2, #0
   16fe2:	0843      	lsrs	r3, r0, #1
   16fe4:	428b      	cmp	r3, r1
   16fe6:	d374      	bcc.n	170d2 <__udivsi3+0xf2>
   16fe8:	0903      	lsrs	r3, r0, #4
   16fea:	428b      	cmp	r3, r1
   16fec:	d35f      	bcc.n	170ae <__udivsi3+0xce>
   16fee:	0a03      	lsrs	r3, r0, #8
   16ff0:	428b      	cmp	r3, r1
   16ff2:	d344      	bcc.n	1707e <__udivsi3+0x9e>
   16ff4:	0b03      	lsrs	r3, r0, #12
   16ff6:	428b      	cmp	r3, r1
   16ff8:	d328      	bcc.n	1704c <__udivsi3+0x6c>
   16ffa:	0c03      	lsrs	r3, r0, #16
   16ffc:	428b      	cmp	r3, r1
   16ffe:	d30d      	bcc.n	1701c <__udivsi3+0x3c>
   17000:	22ff      	movs	r2, #255	; 0xff
   17002:	0209      	lsls	r1, r1, #8
   17004:	ba12      	rev	r2, r2
   17006:	0c03      	lsrs	r3, r0, #16
   17008:	428b      	cmp	r3, r1
   1700a:	d302      	bcc.n	17012 <__udivsi3+0x32>
   1700c:	1212      	asrs	r2, r2, #8
   1700e:	0209      	lsls	r1, r1, #8
   17010:	d065      	beq.n	170de <__udivsi3+0xfe>
   17012:	0b03      	lsrs	r3, r0, #12
   17014:	428b      	cmp	r3, r1
   17016:	d319      	bcc.n	1704c <__udivsi3+0x6c>
   17018:	e000      	b.n	1701c <__udivsi3+0x3c>
   1701a:	0a09      	lsrs	r1, r1, #8
   1701c:	0bc3      	lsrs	r3, r0, #15
   1701e:	428b      	cmp	r3, r1
   17020:	d301      	bcc.n	17026 <__udivsi3+0x46>
   17022:	03cb      	lsls	r3, r1, #15
   17024:	1ac0      	subs	r0, r0, r3
   17026:	4152      	adcs	r2, r2
   17028:	0b83      	lsrs	r3, r0, #14
   1702a:	428b      	cmp	r3, r1
   1702c:	d301      	bcc.n	17032 <__udivsi3+0x52>
   1702e:	038b      	lsls	r3, r1, #14
   17030:	1ac0      	subs	r0, r0, r3
   17032:	4152      	adcs	r2, r2
   17034:	0b43      	lsrs	r3, r0, #13
   17036:	428b      	cmp	r3, r1
   17038:	d301      	bcc.n	1703e <__udivsi3+0x5e>
   1703a:	034b      	lsls	r3, r1, #13
   1703c:	1ac0      	subs	r0, r0, r3
   1703e:	4152      	adcs	r2, r2
   17040:	0b03      	lsrs	r3, r0, #12
   17042:	428b      	cmp	r3, r1
   17044:	d301      	bcc.n	1704a <__udivsi3+0x6a>
   17046:	030b      	lsls	r3, r1, #12
   17048:	1ac0      	subs	r0, r0, r3
   1704a:	4152      	adcs	r2, r2
   1704c:	0ac3      	lsrs	r3, r0, #11
   1704e:	428b      	cmp	r3, r1
   17050:	d301      	bcc.n	17056 <__udivsi3+0x76>
   17052:	02cb      	lsls	r3, r1, #11
   17054:	1ac0      	subs	r0, r0, r3
   17056:	4152      	adcs	r2, r2
   17058:	0a83      	lsrs	r3, r0, #10
   1705a:	428b      	cmp	r3, r1
   1705c:	d301      	bcc.n	17062 <__udivsi3+0x82>
   1705e:	028b      	lsls	r3, r1, #10
   17060:	1ac0      	subs	r0, r0, r3
   17062:	4152      	adcs	r2, r2
   17064:	0a43      	lsrs	r3, r0, #9
   17066:	428b      	cmp	r3, r1
   17068:	d301      	bcc.n	1706e <__udivsi3+0x8e>
   1706a:	024b      	lsls	r3, r1, #9
   1706c:	1ac0      	subs	r0, r0, r3
   1706e:	4152      	adcs	r2, r2
   17070:	0a03      	lsrs	r3, r0, #8
   17072:	428b      	cmp	r3, r1
   17074:	d301      	bcc.n	1707a <__udivsi3+0x9a>
   17076:	020b      	lsls	r3, r1, #8
   17078:	1ac0      	subs	r0, r0, r3
   1707a:	4152      	adcs	r2, r2
   1707c:	d2cd      	bcs.n	1701a <__udivsi3+0x3a>
   1707e:	09c3      	lsrs	r3, r0, #7
   17080:	428b      	cmp	r3, r1
   17082:	d301      	bcc.n	17088 <__udivsi3+0xa8>
   17084:	01cb      	lsls	r3, r1, #7
   17086:	1ac0      	subs	r0, r0, r3
   17088:	4152      	adcs	r2, r2
   1708a:	0983      	lsrs	r3, r0, #6
   1708c:	428b      	cmp	r3, r1
   1708e:	d301      	bcc.n	17094 <__udivsi3+0xb4>
   17090:	018b      	lsls	r3, r1, #6
   17092:	1ac0      	subs	r0, r0, r3
   17094:	4152      	adcs	r2, r2
   17096:	0943      	lsrs	r3, r0, #5
   17098:	428b      	cmp	r3, r1
   1709a:	d301      	bcc.n	170a0 <__udivsi3+0xc0>
   1709c:	014b      	lsls	r3, r1, #5
   1709e:	1ac0      	subs	r0, r0, r3
   170a0:	4152      	adcs	r2, r2
   170a2:	0903      	lsrs	r3, r0, #4
   170a4:	428b      	cmp	r3, r1
   170a6:	d301      	bcc.n	170ac <__udivsi3+0xcc>
   170a8:	010b      	lsls	r3, r1, #4
   170aa:	1ac0      	subs	r0, r0, r3
   170ac:	4152      	adcs	r2, r2
   170ae:	08c3      	lsrs	r3, r0, #3
   170b0:	428b      	cmp	r3, r1
   170b2:	d301      	bcc.n	170b8 <__udivsi3+0xd8>
   170b4:	00cb      	lsls	r3, r1, #3
   170b6:	1ac0      	subs	r0, r0, r3
   170b8:	4152      	adcs	r2, r2
   170ba:	0883      	lsrs	r3, r0, #2
   170bc:	428b      	cmp	r3, r1
   170be:	d301      	bcc.n	170c4 <__udivsi3+0xe4>
   170c0:	008b      	lsls	r3, r1, #2
   170c2:	1ac0      	subs	r0, r0, r3
   170c4:	4152      	adcs	r2, r2
   170c6:	0843      	lsrs	r3, r0, #1
   170c8:	428b      	cmp	r3, r1
   170ca:	d301      	bcc.n	170d0 <__udivsi3+0xf0>
   170cc:	004b      	lsls	r3, r1, #1
   170ce:	1ac0      	subs	r0, r0, r3
   170d0:	4152      	adcs	r2, r2
   170d2:	1a41      	subs	r1, r0, r1
   170d4:	d200      	bcs.n	170d8 <__udivsi3+0xf8>
   170d6:	4601      	mov	r1, r0
   170d8:	4152      	adcs	r2, r2
   170da:	4610      	mov	r0, r2
   170dc:	4770      	bx	lr
   170de:	e7ff      	b.n	170e0 <__udivsi3+0x100>
   170e0:	b501      	push	{r0, lr}
   170e2:	2000      	movs	r0, #0
   170e4:	f000 f8f0 	bl	172c8 <__aeabi_idiv0>
   170e8:	bd02      	pop	{r1, pc}
   170ea:	46c0      	nop			; (mov r8, r8)

000170ec <__aeabi_uidivmod>:
   170ec:	2900      	cmp	r1, #0
   170ee:	d0f7      	beq.n	170e0 <__udivsi3+0x100>
   170f0:	e776      	b.n	16fe0 <__udivsi3>
   170f2:	4770      	bx	lr

000170f4 <__divsi3>:
   170f4:	4603      	mov	r3, r0
   170f6:	430b      	orrs	r3, r1
   170f8:	d47f      	bmi.n	171fa <__divsi3+0x106>
   170fa:	2200      	movs	r2, #0
   170fc:	0843      	lsrs	r3, r0, #1
   170fe:	428b      	cmp	r3, r1
   17100:	d374      	bcc.n	171ec <__divsi3+0xf8>
   17102:	0903      	lsrs	r3, r0, #4
   17104:	428b      	cmp	r3, r1
   17106:	d35f      	bcc.n	171c8 <__divsi3+0xd4>
   17108:	0a03      	lsrs	r3, r0, #8
   1710a:	428b      	cmp	r3, r1
   1710c:	d344      	bcc.n	17198 <__divsi3+0xa4>
   1710e:	0b03      	lsrs	r3, r0, #12
   17110:	428b      	cmp	r3, r1
   17112:	d328      	bcc.n	17166 <__divsi3+0x72>
   17114:	0c03      	lsrs	r3, r0, #16
   17116:	428b      	cmp	r3, r1
   17118:	d30d      	bcc.n	17136 <__divsi3+0x42>
   1711a:	22ff      	movs	r2, #255	; 0xff
   1711c:	0209      	lsls	r1, r1, #8
   1711e:	ba12      	rev	r2, r2
   17120:	0c03      	lsrs	r3, r0, #16
   17122:	428b      	cmp	r3, r1
   17124:	d302      	bcc.n	1712c <__divsi3+0x38>
   17126:	1212      	asrs	r2, r2, #8
   17128:	0209      	lsls	r1, r1, #8
   1712a:	d065      	beq.n	171f8 <__divsi3+0x104>
   1712c:	0b03      	lsrs	r3, r0, #12
   1712e:	428b      	cmp	r3, r1
   17130:	d319      	bcc.n	17166 <__divsi3+0x72>
   17132:	e000      	b.n	17136 <__divsi3+0x42>
   17134:	0a09      	lsrs	r1, r1, #8
   17136:	0bc3      	lsrs	r3, r0, #15
   17138:	428b      	cmp	r3, r1
   1713a:	d301      	bcc.n	17140 <__divsi3+0x4c>
   1713c:	03cb      	lsls	r3, r1, #15
   1713e:	1ac0      	subs	r0, r0, r3
   17140:	4152      	adcs	r2, r2
   17142:	0b83      	lsrs	r3, r0, #14
   17144:	428b      	cmp	r3, r1
   17146:	d301      	bcc.n	1714c <__divsi3+0x58>
   17148:	038b      	lsls	r3, r1, #14
   1714a:	1ac0      	subs	r0, r0, r3
   1714c:	4152      	adcs	r2, r2
   1714e:	0b43      	lsrs	r3, r0, #13
   17150:	428b      	cmp	r3, r1
   17152:	d301      	bcc.n	17158 <__divsi3+0x64>
   17154:	034b      	lsls	r3, r1, #13
   17156:	1ac0      	subs	r0, r0, r3
   17158:	4152      	adcs	r2, r2
   1715a:	0b03      	lsrs	r3, r0, #12
   1715c:	428b      	cmp	r3, r1
   1715e:	d301      	bcc.n	17164 <__divsi3+0x70>
   17160:	030b      	lsls	r3, r1, #12
   17162:	1ac0      	subs	r0, r0, r3
   17164:	4152      	adcs	r2, r2
   17166:	0ac3      	lsrs	r3, r0, #11
   17168:	428b      	cmp	r3, r1
   1716a:	d301      	bcc.n	17170 <__divsi3+0x7c>
   1716c:	02cb      	lsls	r3, r1, #11
   1716e:	1ac0      	subs	r0, r0, r3
   17170:	4152      	adcs	r2, r2
   17172:	0a83      	lsrs	r3, r0, #10
   17174:	428b      	cmp	r3, r1
   17176:	d301      	bcc.n	1717c <__divsi3+0x88>
   17178:	028b      	lsls	r3, r1, #10
   1717a:	1ac0      	subs	r0, r0, r3
   1717c:	4152      	adcs	r2, r2
   1717e:	0a43      	lsrs	r3, r0, #9
   17180:	428b      	cmp	r3, r1
   17182:	d301      	bcc.n	17188 <__divsi3+0x94>
   17184:	024b      	lsls	r3, r1, #9
   17186:	1ac0      	subs	r0, r0, r3
   17188:	4152      	adcs	r2, r2
   1718a:	0a03      	lsrs	r3, r0, #8
   1718c:	428b      	cmp	r3, r1
   1718e:	d301      	bcc.n	17194 <__divsi3+0xa0>
   17190:	020b      	lsls	r3, r1, #8
   17192:	1ac0      	subs	r0, r0, r3
   17194:	4152      	adcs	r2, r2
   17196:	d2cd      	bcs.n	17134 <__divsi3+0x40>
   17198:	09c3      	lsrs	r3, r0, #7
   1719a:	428b      	cmp	r3, r1
   1719c:	d301      	bcc.n	171a2 <__divsi3+0xae>
   1719e:	01cb      	lsls	r3, r1, #7
   171a0:	1ac0      	subs	r0, r0, r3
   171a2:	4152      	adcs	r2, r2
   171a4:	0983      	lsrs	r3, r0, #6
   171a6:	428b      	cmp	r3, r1
   171a8:	d301      	bcc.n	171ae <__divsi3+0xba>
   171aa:	018b      	lsls	r3, r1, #6
   171ac:	1ac0      	subs	r0, r0, r3
   171ae:	4152      	adcs	r2, r2
   171b0:	0943      	lsrs	r3, r0, #5
   171b2:	428b      	cmp	r3, r1
   171b4:	d301      	bcc.n	171ba <__divsi3+0xc6>
   171b6:	014b      	lsls	r3, r1, #5
   171b8:	1ac0      	subs	r0, r0, r3
   171ba:	4152      	adcs	r2, r2
   171bc:	0903      	lsrs	r3, r0, #4
   171be:	428b      	cmp	r3, r1
   171c0:	d301      	bcc.n	171c6 <__divsi3+0xd2>
   171c2:	010b      	lsls	r3, r1, #4
   171c4:	1ac0      	subs	r0, r0, r3
   171c6:	4152      	adcs	r2, r2
   171c8:	08c3      	lsrs	r3, r0, #3
   171ca:	428b      	cmp	r3, r1
   171cc:	d301      	bcc.n	171d2 <__divsi3+0xde>
   171ce:	00cb      	lsls	r3, r1, #3
   171d0:	1ac0      	subs	r0, r0, r3
   171d2:	4152      	adcs	r2, r2
   171d4:	0883      	lsrs	r3, r0, #2
   171d6:	428b      	cmp	r3, r1
   171d8:	d301      	bcc.n	171de <__divsi3+0xea>
   171da:	008b      	lsls	r3, r1, #2
   171dc:	1ac0      	subs	r0, r0, r3
   171de:	4152      	adcs	r2, r2
   171e0:	0843      	lsrs	r3, r0, #1
   171e2:	428b      	cmp	r3, r1
   171e4:	d301      	bcc.n	171ea <__divsi3+0xf6>
   171e6:	004b      	lsls	r3, r1, #1
   171e8:	1ac0      	subs	r0, r0, r3
   171ea:	4152      	adcs	r2, r2
   171ec:	1a41      	subs	r1, r0, r1
   171ee:	d200      	bcs.n	171f2 <__divsi3+0xfe>
   171f0:	4601      	mov	r1, r0
   171f2:	4152      	adcs	r2, r2
   171f4:	4610      	mov	r0, r2
   171f6:	4770      	bx	lr
   171f8:	e05d      	b.n	172b6 <__divsi3+0x1c2>
   171fa:	0fca      	lsrs	r2, r1, #31
   171fc:	d000      	beq.n	17200 <__divsi3+0x10c>
   171fe:	4249      	negs	r1, r1
   17200:	1003      	asrs	r3, r0, #32
   17202:	d300      	bcc.n	17206 <__divsi3+0x112>
   17204:	4240      	negs	r0, r0
   17206:	4053      	eors	r3, r2
   17208:	2200      	movs	r2, #0
   1720a:	469c      	mov	ip, r3
   1720c:	0903      	lsrs	r3, r0, #4
   1720e:	428b      	cmp	r3, r1
   17210:	d32d      	bcc.n	1726e <__divsi3+0x17a>
   17212:	0a03      	lsrs	r3, r0, #8
   17214:	428b      	cmp	r3, r1
   17216:	d312      	bcc.n	1723e <__divsi3+0x14a>
   17218:	22fc      	movs	r2, #252	; 0xfc
   1721a:	0189      	lsls	r1, r1, #6
   1721c:	ba12      	rev	r2, r2
   1721e:	0a03      	lsrs	r3, r0, #8
   17220:	428b      	cmp	r3, r1
   17222:	d30c      	bcc.n	1723e <__divsi3+0x14a>
   17224:	0189      	lsls	r1, r1, #6
   17226:	1192      	asrs	r2, r2, #6
   17228:	428b      	cmp	r3, r1
   1722a:	d308      	bcc.n	1723e <__divsi3+0x14a>
   1722c:	0189      	lsls	r1, r1, #6
   1722e:	1192      	asrs	r2, r2, #6
   17230:	428b      	cmp	r3, r1
   17232:	d304      	bcc.n	1723e <__divsi3+0x14a>
   17234:	0189      	lsls	r1, r1, #6
   17236:	d03a      	beq.n	172ae <__divsi3+0x1ba>
   17238:	1192      	asrs	r2, r2, #6
   1723a:	e000      	b.n	1723e <__divsi3+0x14a>
   1723c:	0989      	lsrs	r1, r1, #6
   1723e:	09c3      	lsrs	r3, r0, #7
   17240:	428b      	cmp	r3, r1
   17242:	d301      	bcc.n	17248 <__divsi3+0x154>
   17244:	01cb      	lsls	r3, r1, #7
   17246:	1ac0      	subs	r0, r0, r3
   17248:	4152      	adcs	r2, r2
   1724a:	0983      	lsrs	r3, r0, #6
   1724c:	428b      	cmp	r3, r1
   1724e:	d301      	bcc.n	17254 <__divsi3+0x160>
   17250:	018b      	lsls	r3, r1, #6
   17252:	1ac0      	subs	r0, r0, r3
   17254:	4152      	adcs	r2, r2
   17256:	0943      	lsrs	r3, r0, #5
   17258:	428b      	cmp	r3, r1
   1725a:	d301      	bcc.n	17260 <__divsi3+0x16c>
   1725c:	014b      	lsls	r3, r1, #5
   1725e:	1ac0      	subs	r0, r0, r3
   17260:	4152      	adcs	r2, r2
   17262:	0903      	lsrs	r3, r0, #4
   17264:	428b      	cmp	r3, r1
   17266:	d301      	bcc.n	1726c <__divsi3+0x178>
   17268:	010b      	lsls	r3, r1, #4
   1726a:	1ac0      	subs	r0, r0, r3
   1726c:	4152      	adcs	r2, r2
   1726e:	08c3      	lsrs	r3, r0, #3
   17270:	428b      	cmp	r3, r1
   17272:	d301      	bcc.n	17278 <__divsi3+0x184>
   17274:	00cb      	lsls	r3, r1, #3
   17276:	1ac0      	subs	r0, r0, r3
   17278:	4152      	adcs	r2, r2
   1727a:	0883      	lsrs	r3, r0, #2
   1727c:	428b      	cmp	r3, r1
   1727e:	d301      	bcc.n	17284 <__divsi3+0x190>
   17280:	008b      	lsls	r3, r1, #2
   17282:	1ac0      	subs	r0, r0, r3
   17284:	4152      	adcs	r2, r2
   17286:	d2d9      	bcs.n	1723c <__divsi3+0x148>
   17288:	0843      	lsrs	r3, r0, #1
   1728a:	428b      	cmp	r3, r1
   1728c:	d301      	bcc.n	17292 <__divsi3+0x19e>
   1728e:	004b      	lsls	r3, r1, #1
   17290:	1ac0      	subs	r0, r0, r3
   17292:	4152      	adcs	r2, r2
   17294:	1a41      	subs	r1, r0, r1
   17296:	d200      	bcs.n	1729a <__divsi3+0x1a6>
   17298:	4601      	mov	r1, r0
   1729a:	4663      	mov	r3, ip
   1729c:	4152      	adcs	r2, r2
   1729e:	105b      	asrs	r3, r3, #1
   172a0:	4610      	mov	r0, r2
   172a2:	d301      	bcc.n	172a8 <__divsi3+0x1b4>
   172a4:	4240      	negs	r0, r0
   172a6:	2b00      	cmp	r3, #0
   172a8:	d500      	bpl.n	172ac <__divsi3+0x1b8>
   172aa:	4249      	negs	r1, r1
   172ac:	4770      	bx	lr
   172ae:	4663      	mov	r3, ip
   172b0:	105b      	asrs	r3, r3, #1
   172b2:	d300      	bcc.n	172b6 <__divsi3+0x1c2>
   172b4:	4240      	negs	r0, r0
   172b6:	b501      	push	{r0, lr}
   172b8:	2000      	movs	r0, #0
   172ba:	f000 f805 	bl	172c8 <__aeabi_idiv0>
   172be:	bd02      	pop	{r1, pc}

000172c0 <__aeabi_idivmod>:
   172c0:	2900      	cmp	r1, #0
   172c2:	d0f8      	beq.n	172b6 <__divsi3+0x1c2>
   172c4:	e716      	b.n	170f4 <__divsi3>
   172c6:	4770      	bx	lr

000172c8 <__aeabi_idiv0>:
   172c8:	4770      	bx	lr
   172ca:	46c0      	nop			; (mov r8, r8)

000172cc <__aeabi_lmul>:
   172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172ce:	46ce      	mov	lr, r9
   172d0:	4647      	mov	r7, r8
   172d2:	0415      	lsls	r5, r2, #16
   172d4:	0c2d      	lsrs	r5, r5, #16
   172d6:	002e      	movs	r6, r5
   172d8:	b580      	push	{r7, lr}
   172da:	0407      	lsls	r7, r0, #16
   172dc:	0c14      	lsrs	r4, r2, #16
   172de:	0c3f      	lsrs	r7, r7, #16
   172e0:	4699      	mov	r9, r3
   172e2:	0c03      	lsrs	r3, r0, #16
   172e4:	437e      	muls	r6, r7
   172e6:	435d      	muls	r5, r3
   172e8:	4367      	muls	r7, r4
   172ea:	4363      	muls	r3, r4
   172ec:	197f      	adds	r7, r7, r5
   172ee:	0c34      	lsrs	r4, r6, #16
   172f0:	19e4      	adds	r4, r4, r7
   172f2:	469c      	mov	ip, r3
   172f4:	42a5      	cmp	r5, r4
   172f6:	d903      	bls.n	17300 <__aeabi_lmul+0x34>
   172f8:	2380      	movs	r3, #128	; 0x80
   172fa:	025b      	lsls	r3, r3, #9
   172fc:	4698      	mov	r8, r3
   172fe:	44c4      	add	ip, r8
   17300:	464b      	mov	r3, r9
   17302:	4351      	muls	r1, r2
   17304:	4343      	muls	r3, r0
   17306:	0436      	lsls	r6, r6, #16
   17308:	0c36      	lsrs	r6, r6, #16
   1730a:	0c25      	lsrs	r5, r4, #16
   1730c:	0424      	lsls	r4, r4, #16
   1730e:	4465      	add	r5, ip
   17310:	19a4      	adds	r4, r4, r6
   17312:	1859      	adds	r1, r3, r1
   17314:	1949      	adds	r1, r1, r5
   17316:	0020      	movs	r0, r4
   17318:	bc0c      	pop	{r2, r3}
   1731a:	4690      	mov	r8, r2
   1731c:	4699      	mov	r9, r3
   1731e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017320 <atoi>:
   17320:	b510      	push	{r4, lr}
   17322:	220a      	movs	r2, #10
   17324:	2100      	movs	r1, #0
   17326:	f000 fbf5 	bl	17b14 <strtol>
   1732a:	bd10      	pop	{r4, pc}

0001732c <__libc_init_array>:
   1732c:	b570      	push	{r4, r5, r6, lr}
   1732e:	2600      	movs	r6, #0
   17330:	4d0c      	ldr	r5, [pc, #48]	; (17364 <__libc_init_array+0x38>)
   17332:	4c0d      	ldr	r4, [pc, #52]	; (17368 <__libc_init_array+0x3c>)
   17334:	1b64      	subs	r4, r4, r5
   17336:	10a4      	asrs	r4, r4, #2
   17338:	42a6      	cmp	r6, r4
   1733a:	d109      	bne.n	17350 <__libc_init_array+0x24>
   1733c:	2600      	movs	r6, #0
   1733e:	f003 fe91 	bl	1b064 <_init>
   17342:	4d0a      	ldr	r5, [pc, #40]	; (1736c <__libc_init_array+0x40>)
   17344:	4c0a      	ldr	r4, [pc, #40]	; (17370 <__libc_init_array+0x44>)
   17346:	1b64      	subs	r4, r4, r5
   17348:	10a4      	asrs	r4, r4, #2
   1734a:	42a6      	cmp	r6, r4
   1734c:	d105      	bne.n	1735a <__libc_init_array+0x2e>
   1734e:	bd70      	pop	{r4, r5, r6, pc}
   17350:	00b3      	lsls	r3, r6, #2
   17352:	58eb      	ldr	r3, [r5, r3]
   17354:	4798      	blx	r3
   17356:	3601      	adds	r6, #1
   17358:	e7ee      	b.n	17338 <__libc_init_array+0xc>
   1735a:	00b3      	lsls	r3, r6, #2
   1735c:	58eb      	ldr	r3, [r5, r3]
   1735e:	4798      	blx	r3
   17360:	3601      	adds	r6, #1
   17362:	e7f2      	b.n	1734a <__libc_init_array+0x1e>
   17364:	0001b070 	.word	0x0001b070
   17368:	0001b070 	.word	0x0001b070
   1736c:	0001b070 	.word	0x0001b070
   17370:	0001b074 	.word	0x0001b074

00017374 <malloc>:
   17374:	b510      	push	{r4, lr}
   17376:	4b03      	ldr	r3, [pc, #12]	; (17384 <malloc+0x10>)
   17378:	0001      	movs	r1, r0
   1737a:	6818      	ldr	r0, [r3, #0]
   1737c:	f000 f87c 	bl	17478 <_malloc_r>
   17380:	bd10      	pop	{r4, pc}
   17382:	46c0      	nop			; (mov r8, r8)
   17384:	20000150 	.word	0x20000150

00017388 <free>:
   17388:	b510      	push	{r4, lr}
   1738a:	4b03      	ldr	r3, [pc, #12]	; (17398 <free+0x10>)
   1738c:	0001      	movs	r1, r0
   1738e:	6818      	ldr	r0, [r3, #0]
   17390:	f000 f828 	bl	173e4 <_free_r>
   17394:	bd10      	pop	{r4, pc}
   17396:	46c0      	nop			; (mov r8, r8)
   17398:	20000150 	.word	0x20000150

0001739c <memcpy>:
   1739c:	2300      	movs	r3, #0
   1739e:	b510      	push	{r4, lr}
   173a0:	429a      	cmp	r2, r3
   173a2:	d100      	bne.n	173a6 <memcpy+0xa>
   173a4:	bd10      	pop	{r4, pc}
   173a6:	5ccc      	ldrb	r4, [r1, r3]
   173a8:	54c4      	strb	r4, [r0, r3]
   173aa:	3301      	adds	r3, #1
   173ac:	e7f8      	b.n	173a0 <memcpy+0x4>

000173ae <memmove>:
   173ae:	b510      	push	{r4, lr}
   173b0:	4288      	cmp	r0, r1
   173b2:	d902      	bls.n	173ba <memmove+0xc>
   173b4:	188b      	adds	r3, r1, r2
   173b6:	4298      	cmp	r0, r3
   173b8:	d308      	bcc.n	173cc <memmove+0x1e>
   173ba:	2300      	movs	r3, #0
   173bc:	429a      	cmp	r2, r3
   173be:	d007      	beq.n	173d0 <memmove+0x22>
   173c0:	5ccc      	ldrb	r4, [r1, r3]
   173c2:	54c4      	strb	r4, [r0, r3]
   173c4:	3301      	adds	r3, #1
   173c6:	e7f9      	b.n	173bc <memmove+0xe>
   173c8:	5c8b      	ldrb	r3, [r1, r2]
   173ca:	5483      	strb	r3, [r0, r2]
   173cc:	3a01      	subs	r2, #1
   173ce:	d2fb      	bcs.n	173c8 <memmove+0x1a>
   173d0:	bd10      	pop	{r4, pc}

000173d2 <memset>:
   173d2:	0003      	movs	r3, r0
   173d4:	1882      	adds	r2, r0, r2
   173d6:	4293      	cmp	r3, r2
   173d8:	d100      	bne.n	173dc <memset+0xa>
   173da:	4770      	bx	lr
   173dc:	7019      	strb	r1, [r3, #0]
   173de:	3301      	adds	r3, #1
   173e0:	e7f9      	b.n	173d6 <memset+0x4>
	...

000173e4 <_free_r>:
   173e4:	b570      	push	{r4, r5, r6, lr}
   173e6:	0005      	movs	r5, r0
   173e8:	2900      	cmp	r1, #0
   173ea:	d010      	beq.n	1740e <_free_r+0x2a>
   173ec:	1f0c      	subs	r4, r1, #4
   173ee:	6823      	ldr	r3, [r4, #0]
   173f0:	2b00      	cmp	r3, #0
   173f2:	da00      	bge.n	173f6 <_free_r+0x12>
   173f4:	18e4      	adds	r4, r4, r3
   173f6:	0028      	movs	r0, r5
   173f8:	f000 ff16 	bl	18228 <__malloc_lock>
   173fc:	4a1d      	ldr	r2, [pc, #116]	; (17474 <_free_r+0x90>)
   173fe:	6813      	ldr	r3, [r2, #0]
   17400:	2b00      	cmp	r3, #0
   17402:	d105      	bne.n	17410 <_free_r+0x2c>
   17404:	6063      	str	r3, [r4, #4]
   17406:	6014      	str	r4, [r2, #0]
   17408:	0028      	movs	r0, r5
   1740a:	f000 ff0e 	bl	1822a <__malloc_unlock>
   1740e:	bd70      	pop	{r4, r5, r6, pc}
   17410:	42a3      	cmp	r3, r4
   17412:	d909      	bls.n	17428 <_free_r+0x44>
   17414:	6821      	ldr	r1, [r4, #0]
   17416:	1860      	adds	r0, r4, r1
   17418:	4283      	cmp	r3, r0
   1741a:	d1f3      	bne.n	17404 <_free_r+0x20>
   1741c:	6818      	ldr	r0, [r3, #0]
   1741e:	685b      	ldr	r3, [r3, #4]
   17420:	1841      	adds	r1, r0, r1
   17422:	6021      	str	r1, [r4, #0]
   17424:	e7ee      	b.n	17404 <_free_r+0x20>
   17426:	0013      	movs	r3, r2
   17428:	685a      	ldr	r2, [r3, #4]
   1742a:	2a00      	cmp	r2, #0
   1742c:	d001      	beq.n	17432 <_free_r+0x4e>
   1742e:	42a2      	cmp	r2, r4
   17430:	d9f9      	bls.n	17426 <_free_r+0x42>
   17432:	6819      	ldr	r1, [r3, #0]
   17434:	1858      	adds	r0, r3, r1
   17436:	42a0      	cmp	r0, r4
   17438:	d10b      	bne.n	17452 <_free_r+0x6e>
   1743a:	6820      	ldr	r0, [r4, #0]
   1743c:	1809      	adds	r1, r1, r0
   1743e:	1858      	adds	r0, r3, r1
   17440:	6019      	str	r1, [r3, #0]
   17442:	4282      	cmp	r2, r0
   17444:	d1e0      	bne.n	17408 <_free_r+0x24>
   17446:	6810      	ldr	r0, [r2, #0]
   17448:	6852      	ldr	r2, [r2, #4]
   1744a:	1841      	adds	r1, r0, r1
   1744c:	6019      	str	r1, [r3, #0]
   1744e:	605a      	str	r2, [r3, #4]
   17450:	e7da      	b.n	17408 <_free_r+0x24>
   17452:	42a0      	cmp	r0, r4
   17454:	d902      	bls.n	1745c <_free_r+0x78>
   17456:	230c      	movs	r3, #12
   17458:	602b      	str	r3, [r5, #0]
   1745a:	e7d5      	b.n	17408 <_free_r+0x24>
   1745c:	6821      	ldr	r1, [r4, #0]
   1745e:	1860      	adds	r0, r4, r1
   17460:	4282      	cmp	r2, r0
   17462:	d103      	bne.n	1746c <_free_r+0x88>
   17464:	6810      	ldr	r0, [r2, #0]
   17466:	6852      	ldr	r2, [r2, #4]
   17468:	1841      	adds	r1, r0, r1
   1746a:	6021      	str	r1, [r4, #0]
   1746c:	6062      	str	r2, [r4, #4]
   1746e:	605c      	str	r4, [r3, #4]
   17470:	e7ca      	b.n	17408 <_free_r+0x24>
   17472:	46c0      	nop			; (mov r8, r8)
   17474:	20000ef0 	.word	0x20000ef0

00017478 <_malloc_r>:
   17478:	2303      	movs	r3, #3
   1747a:	b570      	push	{r4, r5, r6, lr}
   1747c:	1ccd      	adds	r5, r1, #3
   1747e:	439d      	bics	r5, r3
   17480:	3508      	adds	r5, #8
   17482:	0006      	movs	r6, r0
   17484:	2d0c      	cmp	r5, #12
   17486:	d21e      	bcs.n	174c6 <_malloc_r+0x4e>
   17488:	250c      	movs	r5, #12
   1748a:	42a9      	cmp	r1, r5
   1748c:	d81d      	bhi.n	174ca <_malloc_r+0x52>
   1748e:	0030      	movs	r0, r6
   17490:	f000 feca 	bl	18228 <__malloc_lock>
   17494:	4a25      	ldr	r2, [pc, #148]	; (1752c <_malloc_r+0xb4>)
   17496:	6814      	ldr	r4, [r2, #0]
   17498:	0021      	movs	r1, r4
   1749a:	2900      	cmp	r1, #0
   1749c:	d119      	bne.n	174d2 <_malloc_r+0x5a>
   1749e:	4c24      	ldr	r4, [pc, #144]	; (17530 <_malloc_r+0xb8>)
   174a0:	6823      	ldr	r3, [r4, #0]
   174a2:	2b00      	cmp	r3, #0
   174a4:	d103      	bne.n	174ae <_malloc_r+0x36>
   174a6:	0030      	movs	r0, r6
   174a8:	f000 f8dc 	bl	17664 <_sbrk_r>
   174ac:	6020      	str	r0, [r4, #0]
   174ae:	0029      	movs	r1, r5
   174b0:	0030      	movs	r0, r6
   174b2:	f000 f8d7 	bl	17664 <_sbrk_r>
   174b6:	1c43      	adds	r3, r0, #1
   174b8:	d12c      	bne.n	17514 <_malloc_r+0x9c>
   174ba:	230c      	movs	r3, #12
   174bc:	0030      	movs	r0, r6
   174be:	6033      	str	r3, [r6, #0]
   174c0:	f000 feb3 	bl	1822a <__malloc_unlock>
   174c4:	e003      	b.n	174ce <_malloc_r+0x56>
   174c6:	2d00      	cmp	r5, #0
   174c8:	dadf      	bge.n	1748a <_malloc_r+0x12>
   174ca:	230c      	movs	r3, #12
   174cc:	6033      	str	r3, [r6, #0]
   174ce:	2000      	movs	r0, #0
   174d0:	bd70      	pop	{r4, r5, r6, pc}
   174d2:	680b      	ldr	r3, [r1, #0]
   174d4:	1b5b      	subs	r3, r3, r5
   174d6:	d41a      	bmi.n	1750e <_malloc_r+0x96>
   174d8:	2b0b      	cmp	r3, #11
   174da:	d903      	bls.n	174e4 <_malloc_r+0x6c>
   174dc:	600b      	str	r3, [r1, #0]
   174de:	18cc      	adds	r4, r1, r3
   174e0:	6025      	str	r5, [r4, #0]
   174e2:	e003      	b.n	174ec <_malloc_r+0x74>
   174e4:	428c      	cmp	r4, r1
   174e6:	d10e      	bne.n	17506 <_malloc_r+0x8e>
   174e8:	6863      	ldr	r3, [r4, #4]
   174ea:	6013      	str	r3, [r2, #0]
   174ec:	0030      	movs	r0, r6
   174ee:	f000 fe9c 	bl	1822a <__malloc_unlock>
   174f2:	0020      	movs	r0, r4
   174f4:	2207      	movs	r2, #7
   174f6:	300b      	adds	r0, #11
   174f8:	1d23      	adds	r3, r4, #4
   174fa:	4390      	bics	r0, r2
   174fc:	1ac3      	subs	r3, r0, r3
   174fe:	d0e7      	beq.n	174d0 <_malloc_r+0x58>
   17500:	425a      	negs	r2, r3
   17502:	50e2      	str	r2, [r4, r3]
   17504:	e7e4      	b.n	174d0 <_malloc_r+0x58>
   17506:	684b      	ldr	r3, [r1, #4]
   17508:	6063      	str	r3, [r4, #4]
   1750a:	000c      	movs	r4, r1
   1750c:	e7ee      	b.n	174ec <_malloc_r+0x74>
   1750e:	000c      	movs	r4, r1
   17510:	6849      	ldr	r1, [r1, #4]
   17512:	e7c2      	b.n	1749a <_malloc_r+0x22>
   17514:	2303      	movs	r3, #3
   17516:	1cc4      	adds	r4, r0, #3
   17518:	439c      	bics	r4, r3
   1751a:	42a0      	cmp	r0, r4
   1751c:	d0e0      	beq.n	174e0 <_malloc_r+0x68>
   1751e:	1a21      	subs	r1, r4, r0
   17520:	0030      	movs	r0, r6
   17522:	f000 f89f 	bl	17664 <_sbrk_r>
   17526:	1c43      	adds	r3, r0, #1
   17528:	d1da      	bne.n	174e0 <_malloc_r+0x68>
   1752a:	e7c6      	b.n	174ba <_malloc_r+0x42>
   1752c:	20000ef0 	.word	0x20000ef0
   17530:	20000ef4 	.word	0x20000ef4

00017534 <iprintf>:
   17534:	b40f      	push	{r0, r1, r2, r3}
   17536:	4b0b      	ldr	r3, [pc, #44]	; (17564 <iprintf+0x30>)
   17538:	b513      	push	{r0, r1, r4, lr}
   1753a:	681c      	ldr	r4, [r3, #0]
   1753c:	2c00      	cmp	r4, #0
   1753e:	d005      	beq.n	1754c <iprintf+0x18>
   17540:	69a3      	ldr	r3, [r4, #24]
   17542:	2b00      	cmp	r3, #0
   17544:	d102      	bne.n	1754c <iprintf+0x18>
   17546:	0020      	movs	r0, r4
   17548:	f000 fd58 	bl	17ffc <__sinit>
   1754c:	ab05      	add	r3, sp, #20
   1754e:	9a04      	ldr	r2, [sp, #16]
   17550:	68a1      	ldr	r1, [r4, #8]
   17552:	0020      	movs	r0, r4
   17554:	9301      	str	r3, [sp, #4]
   17556:	f000 fff7 	bl	18548 <_vfiprintf_r>
   1755a:	bc16      	pop	{r1, r2, r4}
   1755c:	bc08      	pop	{r3}
   1755e:	b004      	add	sp, #16
   17560:	4718      	bx	r3
   17562:	46c0      	nop			; (mov r8, r8)
   17564:	20000150 	.word	0x20000150

00017568 <putchar>:
   17568:	4b08      	ldr	r3, [pc, #32]	; (1758c <putchar+0x24>)
   1756a:	b570      	push	{r4, r5, r6, lr}
   1756c:	681c      	ldr	r4, [r3, #0]
   1756e:	0005      	movs	r5, r0
   17570:	2c00      	cmp	r4, #0
   17572:	d005      	beq.n	17580 <putchar+0x18>
   17574:	69a3      	ldr	r3, [r4, #24]
   17576:	2b00      	cmp	r3, #0
   17578:	d102      	bne.n	17580 <putchar+0x18>
   1757a:	0020      	movs	r0, r4
   1757c:	f000 fd3e 	bl	17ffc <__sinit>
   17580:	0029      	movs	r1, r5
   17582:	68a2      	ldr	r2, [r4, #8]
   17584:	0020      	movs	r0, r4
   17586:	f001 fa83 	bl	18a90 <_putc_r>
   1758a:	bd70      	pop	{r4, r5, r6, pc}
   1758c:	20000150 	.word	0x20000150

00017590 <_puts_r>:
   17590:	b570      	push	{r4, r5, r6, lr}
   17592:	0005      	movs	r5, r0
   17594:	000e      	movs	r6, r1
   17596:	2800      	cmp	r0, #0
   17598:	d004      	beq.n	175a4 <_puts_r+0x14>
   1759a:	6983      	ldr	r3, [r0, #24]
   1759c:	2b00      	cmp	r3, #0
   1759e:	d101      	bne.n	175a4 <_puts_r+0x14>
   175a0:	f000 fd2c 	bl	17ffc <__sinit>
   175a4:	69ab      	ldr	r3, [r5, #24]
   175a6:	68ac      	ldr	r4, [r5, #8]
   175a8:	2b00      	cmp	r3, #0
   175aa:	d102      	bne.n	175b2 <_puts_r+0x22>
   175ac:	0028      	movs	r0, r5
   175ae:	f000 fd25 	bl	17ffc <__sinit>
   175b2:	4b24      	ldr	r3, [pc, #144]	; (17644 <_puts_r+0xb4>)
   175b4:	429c      	cmp	r4, r3
   175b6:	d10f      	bne.n	175d8 <_puts_r+0x48>
   175b8:	686c      	ldr	r4, [r5, #4]
   175ba:	89a3      	ldrh	r3, [r4, #12]
   175bc:	071b      	lsls	r3, r3, #28
   175be:	d502      	bpl.n	175c6 <_puts_r+0x36>
   175c0:	6923      	ldr	r3, [r4, #16]
   175c2:	2b00      	cmp	r3, #0
   175c4:	d120      	bne.n	17608 <_puts_r+0x78>
   175c6:	0021      	movs	r1, r4
   175c8:	0028      	movs	r0, r5
   175ca:	f000 fba9 	bl	17d20 <__swsetup_r>
   175ce:	2800      	cmp	r0, #0
   175d0:	d01a      	beq.n	17608 <_puts_r+0x78>
   175d2:	2001      	movs	r0, #1
   175d4:	4240      	negs	r0, r0
   175d6:	bd70      	pop	{r4, r5, r6, pc}
   175d8:	4b1b      	ldr	r3, [pc, #108]	; (17648 <_puts_r+0xb8>)
   175da:	429c      	cmp	r4, r3
   175dc:	d101      	bne.n	175e2 <_puts_r+0x52>
   175de:	68ac      	ldr	r4, [r5, #8]
   175e0:	e7eb      	b.n	175ba <_puts_r+0x2a>
   175e2:	4b1a      	ldr	r3, [pc, #104]	; (1764c <_puts_r+0xbc>)
   175e4:	429c      	cmp	r4, r3
   175e6:	d1e8      	bne.n	175ba <_puts_r+0x2a>
   175e8:	68ec      	ldr	r4, [r5, #12]
   175ea:	e7e6      	b.n	175ba <_puts_r+0x2a>
   175ec:	3b01      	subs	r3, #1
   175ee:	3601      	adds	r6, #1
   175f0:	60a3      	str	r3, [r4, #8]
   175f2:	2b00      	cmp	r3, #0
   175f4:	da04      	bge.n	17600 <_puts_r+0x70>
   175f6:	69a2      	ldr	r2, [r4, #24]
   175f8:	4293      	cmp	r3, r2
   175fa:	db16      	blt.n	1762a <_puts_r+0x9a>
   175fc:	290a      	cmp	r1, #10
   175fe:	d014      	beq.n	1762a <_puts_r+0x9a>
   17600:	6823      	ldr	r3, [r4, #0]
   17602:	1c5a      	adds	r2, r3, #1
   17604:	6022      	str	r2, [r4, #0]
   17606:	7019      	strb	r1, [r3, #0]
   17608:	7831      	ldrb	r1, [r6, #0]
   1760a:	68a3      	ldr	r3, [r4, #8]
   1760c:	2900      	cmp	r1, #0
   1760e:	d1ed      	bne.n	175ec <_puts_r+0x5c>
   17610:	3b01      	subs	r3, #1
   17612:	60a3      	str	r3, [r4, #8]
   17614:	2b00      	cmp	r3, #0
   17616:	da0f      	bge.n	17638 <_puts_r+0xa8>
   17618:	0022      	movs	r2, r4
   1761a:	310a      	adds	r1, #10
   1761c:	0028      	movs	r0, r5
   1761e:	f000 fb29 	bl	17c74 <__swbuf_r>
   17622:	1c43      	adds	r3, r0, #1
   17624:	d0d5      	beq.n	175d2 <_puts_r+0x42>
   17626:	200a      	movs	r0, #10
   17628:	e7d5      	b.n	175d6 <_puts_r+0x46>
   1762a:	0022      	movs	r2, r4
   1762c:	0028      	movs	r0, r5
   1762e:	f000 fb21 	bl	17c74 <__swbuf_r>
   17632:	1c43      	adds	r3, r0, #1
   17634:	d1e8      	bne.n	17608 <_puts_r+0x78>
   17636:	e7cc      	b.n	175d2 <_puts_r+0x42>
   17638:	200a      	movs	r0, #10
   1763a:	6823      	ldr	r3, [r4, #0]
   1763c:	1c5a      	adds	r2, r3, #1
   1763e:	6022      	str	r2, [r4, #0]
   17640:	7018      	strb	r0, [r3, #0]
   17642:	e7c8      	b.n	175d6 <_puts_r+0x46>
   17644:	0001aee4 	.word	0x0001aee4
   17648:	0001af04 	.word	0x0001af04
   1764c:	0001aec4 	.word	0x0001aec4

00017650 <puts>:
   17650:	b510      	push	{r4, lr}
   17652:	4b03      	ldr	r3, [pc, #12]	; (17660 <puts+0x10>)
   17654:	0001      	movs	r1, r0
   17656:	6818      	ldr	r0, [r3, #0]
   17658:	f7ff ff9a 	bl	17590 <_puts_r>
   1765c:	bd10      	pop	{r4, pc}
   1765e:	46c0      	nop			; (mov r8, r8)
   17660:	20000150 	.word	0x20000150

00017664 <_sbrk_r>:
   17664:	2300      	movs	r3, #0
   17666:	b570      	push	{r4, r5, r6, lr}
   17668:	4c06      	ldr	r4, [pc, #24]	; (17684 <_sbrk_r+0x20>)
   1766a:	0005      	movs	r5, r0
   1766c:	0008      	movs	r0, r1
   1766e:	6023      	str	r3, [r4, #0]
   17670:	f7fa fbdc 	bl	11e2c <_sbrk>
   17674:	1c43      	adds	r3, r0, #1
   17676:	d103      	bne.n	17680 <_sbrk_r+0x1c>
   17678:	6823      	ldr	r3, [r4, #0]
   1767a:	2b00      	cmp	r3, #0
   1767c:	d000      	beq.n	17680 <_sbrk_r+0x1c>
   1767e:	602b      	str	r3, [r5, #0]
   17680:	bd70      	pop	{r4, r5, r6, pc}
   17682:	46c0      	nop			; (mov r8, r8)
   17684:	20001638 	.word	0x20001638

00017688 <setbuf>:
   17688:	424a      	negs	r2, r1
   1768a:	414a      	adcs	r2, r1
   1768c:	2380      	movs	r3, #128	; 0x80
   1768e:	b510      	push	{r4, lr}
   17690:	0052      	lsls	r2, r2, #1
   17692:	00db      	lsls	r3, r3, #3
   17694:	f000 f802 	bl	1769c <setvbuf>
   17698:	bd10      	pop	{r4, pc}
	...

0001769c <setvbuf>:
   1769c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1769e:	001d      	movs	r5, r3
   176a0:	4b4f      	ldr	r3, [pc, #316]	; (177e0 <setvbuf+0x144>)
   176a2:	b085      	sub	sp, #20
   176a4:	681e      	ldr	r6, [r3, #0]
   176a6:	0004      	movs	r4, r0
   176a8:	000f      	movs	r7, r1
   176aa:	9200      	str	r2, [sp, #0]
   176ac:	2e00      	cmp	r6, #0
   176ae:	d005      	beq.n	176bc <setvbuf+0x20>
   176b0:	69b3      	ldr	r3, [r6, #24]
   176b2:	2b00      	cmp	r3, #0
   176b4:	d102      	bne.n	176bc <setvbuf+0x20>
   176b6:	0030      	movs	r0, r6
   176b8:	f000 fca0 	bl	17ffc <__sinit>
   176bc:	4b49      	ldr	r3, [pc, #292]	; (177e4 <setvbuf+0x148>)
   176be:	429c      	cmp	r4, r3
   176c0:	d150      	bne.n	17764 <setvbuf+0xc8>
   176c2:	6874      	ldr	r4, [r6, #4]
   176c4:	9b00      	ldr	r3, [sp, #0]
   176c6:	2b02      	cmp	r3, #2
   176c8:	d005      	beq.n	176d6 <setvbuf+0x3a>
   176ca:	2b01      	cmp	r3, #1
   176cc:	d900      	bls.n	176d0 <setvbuf+0x34>
   176ce:	e084      	b.n	177da <setvbuf+0x13e>
   176d0:	2d00      	cmp	r5, #0
   176d2:	da00      	bge.n	176d6 <setvbuf+0x3a>
   176d4:	e081      	b.n	177da <setvbuf+0x13e>
   176d6:	0021      	movs	r1, r4
   176d8:	0030      	movs	r0, r6
   176da:	f000 fc21 	bl	17f20 <_fflush_r>
   176de:	6b61      	ldr	r1, [r4, #52]	; 0x34
   176e0:	2900      	cmp	r1, #0
   176e2:	d008      	beq.n	176f6 <setvbuf+0x5a>
   176e4:	0023      	movs	r3, r4
   176e6:	3344      	adds	r3, #68	; 0x44
   176e8:	4299      	cmp	r1, r3
   176ea:	d002      	beq.n	176f2 <setvbuf+0x56>
   176ec:	0030      	movs	r0, r6
   176ee:	f7ff fe79 	bl	173e4 <_free_r>
   176f2:	2300      	movs	r3, #0
   176f4:	6363      	str	r3, [r4, #52]	; 0x34
   176f6:	2300      	movs	r3, #0
   176f8:	61a3      	str	r3, [r4, #24]
   176fa:	6063      	str	r3, [r4, #4]
   176fc:	89a3      	ldrh	r3, [r4, #12]
   176fe:	061b      	lsls	r3, r3, #24
   17700:	d503      	bpl.n	1770a <setvbuf+0x6e>
   17702:	6921      	ldr	r1, [r4, #16]
   17704:	0030      	movs	r0, r6
   17706:	f7ff fe6d 	bl	173e4 <_free_r>
   1770a:	89a3      	ldrh	r3, [r4, #12]
   1770c:	4a36      	ldr	r2, [pc, #216]	; (177e8 <setvbuf+0x14c>)
   1770e:	4013      	ands	r3, r2
   17710:	81a3      	strh	r3, [r4, #12]
   17712:	9b00      	ldr	r3, [sp, #0]
   17714:	2b02      	cmp	r3, #2
   17716:	d05a      	beq.n	177ce <setvbuf+0x132>
   17718:	ab03      	add	r3, sp, #12
   1771a:	aa02      	add	r2, sp, #8
   1771c:	0021      	movs	r1, r4
   1771e:	0030      	movs	r0, r6
   17720:	f000 fd04 	bl	1812c <__swhatbuf_r>
   17724:	89a3      	ldrh	r3, [r4, #12]
   17726:	4318      	orrs	r0, r3
   17728:	81a0      	strh	r0, [r4, #12]
   1772a:	2d00      	cmp	r5, #0
   1772c:	d124      	bne.n	17778 <setvbuf+0xdc>
   1772e:	9d02      	ldr	r5, [sp, #8]
   17730:	0028      	movs	r0, r5
   17732:	f7ff fe1f 	bl	17374 <malloc>
   17736:	9501      	str	r5, [sp, #4]
   17738:	1e07      	subs	r7, r0, #0
   1773a:	d142      	bne.n	177c2 <setvbuf+0x126>
   1773c:	9b02      	ldr	r3, [sp, #8]
   1773e:	9301      	str	r3, [sp, #4]
   17740:	42ab      	cmp	r3, r5
   17742:	d139      	bne.n	177b8 <setvbuf+0x11c>
   17744:	2001      	movs	r0, #1
   17746:	4240      	negs	r0, r0
   17748:	2302      	movs	r3, #2
   1774a:	89a2      	ldrh	r2, [r4, #12]
   1774c:	4313      	orrs	r3, r2
   1774e:	81a3      	strh	r3, [r4, #12]
   17750:	2300      	movs	r3, #0
   17752:	60a3      	str	r3, [r4, #8]
   17754:	0023      	movs	r3, r4
   17756:	3347      	adds	r3, #71	; 0x47
   17758:	6023      	str	r3, [r4, #0]
   1775a:	6123      	str	r3, [r4, #16]
   1775c:	2301      	movs	r3, #1
   1775e:	6163      	str	r3, [r4, #20]
   17760:	b005      	add	sp, #20
   17762:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17764:	4b21      	ldr	r3, [pc, #132]	; (177ec <setvbuf+0x150>)
   17766:	429c      	cmp	r4, r3
   17768:	d101      	bne.n	1776e <setvbuf+0xd2>
   1776a:	68b4      	ldr	r4, [r6, #8]
   1776c:	e7aa      	b.n	176c4 <setvbuf+0x28>
   1776e:	4b20      	ldr	r3, [pc, #128]	; (177f0 <setvbuf+0x154>)
   17770:	429c      	cmp	r4, r3
   17772:	d1a7      	bne.n	176c4 <setvbuf+0x28>
   17774:	68f4      	ldr	r4, [r6, #12]
   17776:	e7a5      	b.n	176c4 <setvbuf+0x28>
   17778:	2f00      	cmp	r7, #0
   1777a:	d0d9      	beq.n	17730 <setvbuf+0x94>
   1777c:	69b3      	ldr	r3, [r6, #24]
   1777e:	2b00      	cmp	r3, #0
   17780:	d102      	bne.n	17788 <setvbuf+0xec>
   17782:	0030      	movs	r0, r6
   17784:	f000 fc3a 	bl	17ffc <__sinit>
   17788:	9b00      	ldr	r3, [sp, #0]
   1778a:	2b01      	cmp	r3, #1
   1778c:	d103      	bne.n	17796 <setvbuf+0xfa>
   1778e:	89a3      	ldrh	r3, [r4, #12]
   17790:	9a00      	ldr	r2, [sp, #0]
   17792:	431a      	orrs	r2, r3
   17794:	81a2      	strh	r2, [r4, #12]
   17796:	2008      	movs	r0, #8
   17798:	89a3      	ldrh	r3, [r4, #12]
   1779a:	6027      	str	r7, [r4, #0]
   1779c:	6127      	str	r7, [r4, #16]
   1779e:	6165      	str	r5, [r4, #20]
   177a0:	4018      	ands	r0, r3
   177a2:	d018      	beq.n	177d6 <setvbuf+0x13a>
   177a4:	2001      	movs	r0, #1
   177a6:	4018      	ands	r0, r3
   177a8:	2300      	movs	r3, #0
   177aa:	4298      	cmp	r0, r3
   177ac:	d011      	beq.n	177d2 <setvbuf+0x136>
   177ae:	426d      	negs	r5, r5
   177b0:	60a3      	str	r3, [r4, #8]
   177b2:	61a5      	str	r5, [r4, #24]
   177b4:	0018      	movs	r0, r3
   177b6:	e7d3      	b.n	17760 <setvbuf+0xc4>
   177b8:	9801      	ldr	r0, [sp, #4]
   177ba:	f7ff fddb 	bl	17374 <malloc>
   177be:	1e07      	subs	r7, r0, #0
   177c0:	d0c0      	beq.n	17744 <setvbuf+0xa8>
   177c2:	2380      	movs	r3, #128	; 0x80
   177c4:	89a2      	ldrh	r2, [r4, #12]
   177c6:	9d01      	ldr	r5, [sp, #4]
   177c8:	4313      	orrs	r3, r2
   177ca:	81a3      	strh	r3, [r4, #12]
   177cc:	e7d6      	b.n	1777c <setvbuf+0xe0>
   177ce:	2000      	movs	r0, #0
   177d0:	e7ba      	b.n	17748 <setvbuf+0xac>
   177d2:	60a5      	str	r5, [r4, #8]
   177d4:	e7c4      	b.n	17760 <setvbuf+0xc4>
   177d6:	60a0      	str	r0, [r4, #8]
   177d8:	e7c2      	b.n	17760 <setvbuf+0xc4>
   177da:	2001      	movs	r0, #1
   177dc:	4240      	negs	r0, r0
   177de:	e7bf      	b.n	17760 <setvbuf+0xc4>
   177e0:	20000150 	.word	0x20000150
   177e4:	0001aee4 	.word	0x0001aee4
   177e8:	fffff35c 	.word	0xfffff35c
   177ec:	0001af04 	.word	0x0001af04
   177f0:	0001aec4 	.word	0x0001aec4

000177f4 <sniprintf>:
   177f4:	b40c      	push	{r2, r3}
   177f6:	b530      	push	{r4, r5, lr}
   177f8:	4b16      	ldr	r3, [pc, #88]	; (17854 <sniprintf+0x60>)
   177fa:	b09d      	sub	sp, #116	; 0x74
   177fc:	1e0c      	subs	r4, r1, #0
   177fe:	681d      	ldr	r5, [r3, #0]
   17800:	da08      	bge.n	17814 <sniprintf+0x20>
   17802:	238b      	movs	r3, #139	; 0x8b
   17804:	2001      	movs	r0, #1
   17806:	602b      	str	r3, [r5, #0]
   17808:	4240      	negs	r0, r0
   1780a:	b01d      	add	sp, #116	; 0x74
   1780c:	bc30      	pop	{r4, r5}
   1780e:	bc08      	pop	{r3}
   17810:	b002      	add	sp, #8
   17812:	4718      	bx	r3
   17814:	2382      	movs	r3, #130	; 0x82
   17816:	a902      	add	r1, sp, #8
   17818:	009b      	lsls	r3, r3, #2
   1781a:	818b      	strh	r3, [r1, #12]
   1781c:	2300      	movs	r3, #0
   1781e:	9002      	str	r0, [sp, #8]
   17820:	6108      	str	r0, [r1, #16]
   17822:	429c      	cmp	r4, r3
   17824:	d000      	beq.n	17828 <sniprintf+0x34>
   17826:	1e63      	subs	r3, r4, #1
   17828:	608b      	str	r3, [r1, #8]
   1782a:	614b      	str	r3, [r1, #20]
   1782c:	2301      	movs	r3, #1
   1782e:	425b      	negs	r3, r3
   17830:	81cb      	strh	r3, [r1, #14]
   17832:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17834:	ab21      	add	r3, sp, #132	; 0x84
   17836:	0028      	movs	r0, r5
   17838:	9301      	str	r3, [sp, #4]
   1783a:	f000 fd59 	bl	182f0 <_svfiprintf_r>
   1783e:	1c43      	adds	r3, r0, #1
   17840:	da01      	bge.n	17846 <sniprintf+0x52>
   17842:	238b      	movs	r3, #139	; 0x8b
   17844:	602b      	str	r3, [r5, #0]
   17846:	2c00      	cmp	r4, #0
   17848:	d0df      	beq.n	1780a <sniprintf+0x16>
   1784a:	2300      	movs	r3, #0
   1784c:	9a02      	ldr	r2, [sp, #8]
   1784e:	7013      	strb	r3, [r2, #0]
   17850:	e7db      	b.n	1780a <sniprintf+0x16>
   17852:	46c0      	nop			; (mov r8, r8)
   17854:	20000150 	.word	0x20000150

00017858 <siprintf>:
   17858:	b40e      	push	{r1, r2, r3}
   1785a:	b510      	push	{r4, lr}
   1785c:	b09d      	sub	sp, #116	; 0x74
   1785e:	a902      	add	r1, sp, #8
   17860:	9002      	str	r0, [sp, #8]
   17862:	6108      	str	r0, [r1, #16]
   17864:	480b      	ldr	r0, [pc, #44]	; (17894 <siprintf+0x3c>)
   17866:	2482      	movs	r4, #130	; 0x82
   17868:	6088      	str	r0, [r1, #8]
   1786a:	6148      	str	r0, [r1, #20]
   1786c:	2001      	movs	r0, #1
   1786e:	4240      	negs	r0, r0
   17870:	ab1f      	add	r3, sp, #124	; 0x7c
   17872:	81c8      	strh	r0, [r1, #14]
   17874:	4808      	ldr	r0, [pc, #32]	; (17898 <siprintf+0x40>)
   17876:	cb04      	ldmia	r3!, {r2}
   17878:	00a4      	lsls	r4, r4, #2
   1787a:	6800      	ldr	r0, [r0, #0]
   1787c:	9301      	str	r3, [sp, #4]
   1787e:	818c      	strh	r4, [r1, #12]
   17880:	f000 fd36 	bl	182f0 <_svfiprintf_r>
   17884:	2300      	movs	r3, #0
   17886:	9a02      	ldr	r2, [sp, #8]
   17888:	7013      	strb	r3, [r2, #0]
   1788a:	b01d      	add	sp, #116	; 0x74
   1788c:	bc10      	pop	{r4}
   1788e:	bc08      	pop	{r3}
   17890:	b003      	add	sp, #12
   17892:	4718      	bx	r3
   17894:	7fffffff 	.word	0x7fffffff
   17898:	20000150 	.word	0x20000150

0001789c <strcmp>:
   1789c:	7802      	ldrb	r2, [r0, #0]
   1789e:	780b      	ldrb	r3, [r1, #0]
   178a0:	2a00      	cmp	r2, #0
   178a2:	d003      	beq.n	178ac <strcmp+0x10>
   178a4:	3001      	adds	r0, #1
   178a6:	3101      	adds	r1, #1
   178a8:	429a      	cmp	r2, r3
   178aa:	d0f7      	beq.n	1789c <strcmp>
   178ac:	1ad0      	subs	r0, r2, r3
   178ae:	4770      	bx	lr

000178b0 <strcpy>:
   178b0:	1c03      	adds	r3, r0, #0
   178b2:	780a      	ldrb	r2, [r1, #0]
   178b4:	3101      	adds	r1, #1
   178b6:	701a      	strb	r2, [r3, #0]
   178b8:	3301      	adds	r3, #1
   178ba:	2a00      	cmp	r2, #0
   178bc:	d1f9      	bne.n	178b2 <strcpy+0x2>
   178be:	4770      	bx	lr

000178c0 <strdup>:
   178c0:	b510      	push	{r4, lr}
   178c2:	4b03      	ldr	r3, [pc, #12]	; (178d0 <strdup+0x10>)
   178c4:	0001      	movs	r1, r0
   178c6:	6818      	ldr	r0, [r3, #0]
   178c8:	f000 f804 	bl	178d4 <_strdup_r>
   178cc:	bd10      	pop	{r4, pc}
   178ce:	46c0      	nop			; (mov r8, r8)
   178d0:	20000150 	.word	0x20000150

000178d4 <_strdup_r>:
   178d4:	b570      	push	{r4, r5, r6, lr}
   178d6:	0005      	movs	r5, r0
   178d8:	0008      	movs	r0, r1
   178da:	000e      	movs	r6, r1
   178dc:	f000 f80d 	bl	178fa <strlen>
   178e0:	1c44      	adds	r4, r0, #1
   178e2:	0021      	movs	r1, r4
   178e4:	0028      	movs	r0, r5
   178e6:	f7ff fdc7 	bl	17478 <_malloc_r>
   178ea:	1e05      	subs	r5, r0, #0
   178ec:	d003      	beq.n	178f6 <_strdup_r+0x22>
   178ee:	0022      	movs	r2, r4
   178f0:	0031      	movs	r1, r6
   178f2:	f7ff fd53 	bl	1739c <memcpy>
   178f6:	0028      	movs	r0, r5
   178f8:	bd70      	pop	{r4, r5, r6, pc}

000178fa <strlen>:
   178fa:	2300      	movs	r3, #0
   178fc:	5cc2      	ldrb	r2, [r0, r3]
   178fe:	3301      	adds	r3, #1
   17900:	2a00      	cmp	r2, #0
   17902:	d1fb      	bne.n	178fc <strlen+0x2>
   17904:	1e58      	subs	r0, r3, #1
   17906:	4770      	bx	lr

00017908 <strncmp>:
   17908:	2300      	movs	r3, #0
   1790a:	b530      	push	{r4, r5, lr}
   1790c:	429a      	cmp	r2, r3
   1790e:	d00a      	beq.n	17926 <strncmp+0x1e>
   17910:	3a01      	subs	r2, #1
   17912:	5cc4      	ldrb	r4, [r0, r3]
   17914:	5ccd      	ldrb	r5, [r1, r3]
   17916:	42ac      	cmp	r4, r5
   17918:	d104      	bne.n	17924 <strncmp+0x1c>
   1791a:	429a      	cmp	r2, r3
   1791c:	d002      	beq.n	17924 <strncmp+0x1c>
   1791e:	3301      	adds	r3, #1
   17920:	2c00      	cmp	r4, #0
   17922:	d1f6      	bne.n	17912 <strncmp+0xa>
   17924:	1b63      	subs	r3, r4, r5
   17926:	0018      	movs	r0, r3
   17928:	bd30      	pop	{r4, r5, pc}

0001792a <strstr>:
   1792a:	b510      	push	{r4, lr}
   1792c:	0002      	movs	r2, r0
   1792e:	7800      	ldrb	r0, [r0, #0]
   17930:	2800      	cmp	r0, #0
   17932:	d104      	bne.n	1793e <strstr+0x14>
   17934:	7809      	ldrb	r1, [r1, #0]
   17936:	2900      	cmp	r1, #0
   17938:	d00d      	beq.n	17956 <strstr+0x2c>
   1793a:	bd10      	pop	{r4, pc}
   1793c:	3201      	adds	r2, #1
   1793e:	7810      	ldrb	r0, [r2, #0]
   17940:	2800      	cmp	r0, #0
   17942:	d0fa      	beq.n	1793a <strstr+0x10>
   17944:	2300      	movs	r3, #0
   17946:	5cc8      	ldrb	r0, [r1, r3]
   17948:	2800      	cmp	r0, #0
   1794a:	d004      	beq.n	17956 <strstr+0x2c>
   1794c:	5cd4      	ldrb	r4, [r2, r3]
   1794e:	4284      	cmp	r4, r0
   17950:	d1f4      	bne.n	1793c <strstr+0x12>
   17952:	3301      	adds	r3, #1
   17954:	e7f7      	b.n	17946 <strstr+0x1c>
   17956:	0010      	movs	r0, r2
   17958:	e7ef      	b.n	1793a <strstr+0x10>
	...

0001795c <strtok>:
   1795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1795e:	4b12      	ldr	r3, [pc, #72]	; (179a8 <strtok+0x4c>)
   17960:	0006      	movs	r6, r0
   17962:	681d      	ldr	r5, [r3, #0]
   17964:	000f      	movs	r7, r1
   17966:	6dac      	ldr	r4, [r5, #88]	; 0x58
   17968:	2c00      	cmp	r4, #0
   1796a:	d116      	bne.n	1799a <strtok+0x3e>
   1796c:	2050      	movs	r0, #80	; 0x50
   1796e:	f7ff fd01 	bl	17374 <malloc>
   17972:	65a8      	str	r0, [r5, #88]	; 0x58
   17974:	6004      	str	r4, [r0, #0]
   17976:	6044      	str	r4, [r0, #4]
   17978:	6084      	str	r4, [r0, #8]
   1797a:	60c4      	str	r4, [r0, #12]
   1797c:	6104      	str	r4, [r0, #16]
   1797e:	6144      	str	r4, [r0, #20]
   17980:	6184      	str	r4, [r0, #24]
   17982:	6284      	str	r4, [r0, #40]	; 0x28
   17984:	62c4      	str	r4, [r0, #44]	; 0x2c
   17986:	6304      	str	r4, [r0, #48]	; 0x30
   17988:	6344      	str	r4, [r0, #52]	; 0x34
   1798a:	6384      	str	r4, [r0, #56]	; 0x38
   1798c:	63c4      	str	r4, [r0, #60]	; 0x3c
   1798e:	6404      	str	r4, [r0, #64]	; 0x40
   17990:	6444      	str	r4, [r0, #68]	; 0x44
   17992:	6484      	str	r4, [r0, #72]	; 0x48
   17994:	64c4      	str	r4, [r0, #76]	; 0x4c
   17996:	7704      	strb	r4, [r0, #28]
   17998:	6244      	str	r4, [r0, #36]	; 0x24
   1799a:	6daa      	ldr	r2, [r5, #88]	; 0x58
   1799c:	0039      	movs	r1, r7
   1799e:	0030      	movs	r0, r6
   179a0:	2301      	movs	r3, #1
   179a2:	f000 f803 	bl	179ac <__strtok_r>
   179a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179a8:	20000150 	.word	0x20000150

000179ac <__strtok_r>:
   179ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   179ae:	2800      	cmp	r0, #0
   179b0:	d104      	bne.n	179bc <__strtok_r+0x10>
   179b2:	6810      	ldr	r0, [r2, #0]
   179b4:	2800      	cmp	r0, #0
   179b6:	d101      	bne.n	179bc <__strtok_r+0x10>
   179b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179ba:	0020      	movs	r0, r4
   179bc:	000e      	movs	r6, r1
   179be:	7805      	ldrb	r5, [r0, #0]
   179c0:	1c44      	adds	r4, r0, #1
   179c2:	7837      	ldrb	r7, [r6, #0]
   179c4:	2f00      	cmp	r7, #0
   179c6:	d104      	bne.n	179d2 <__strtok_r+0x26>
   179c8:	2d00      	cmp	r5, #0
   179ca:	d110      	bne.n	179ee <__strtok_r+0x42>
   179cc:	6015      	str	r5, [r2, #0]
   179ce:	0028      	movs	r0, r5
   179d0:	e7f2      	b.n	179b8 <__strtok_r+0xc>
   179d2:	3601      	adds	r6, #1
   179d4:	42bd      	cmp	r5, r7
   179d6:	d1f4      	bne.n	179c2 <__strtok_r+0x16>
   179d8:	2b00      	cmp	r3, #0
   179da:	d1ee      	bne.n	179ba <__strtok_r+0xe>
   179dc:	6014      	str	r4, [r2, #0]
   179de:	7003      	strb	r3, [r0, #0]
   179e0:	e7ea      	b.n	179b8 <__strtok_r+0xc>
   179e2:	0033      	movs	r3, r6
   179e4:	e00e      	b.n	17a04 <__strtok_r+0x58>
   179e6:	3501      	adds	r5, #1
   179e8:	001c      	movs	r4, r3
   179ea:	2f00      	cmp	r7, #0
   179ec:	d102      	bne.n	179f4 <__strtok_r+0x48>
   179ee:	000d      	movs	r5, r1
   179f0:	7826      	ldrb	r6, [r4, #0]
   179f2:	1c63      	adds	r3, r4, #1
   179f4:	782f      	ldrb	r7, [r5, #0]
   179f6:	42be      	cmp	r6, r7
   179f8:	d1f5      	bne.n	179e6 <__strtok_r+0x3a>
   179fa:	2e00      	cmp	r6, #0
   179fc:	d0f1      	beq.n	179e2 <__strtok_r+0x36>
   179fe:	2400      	movs	r4, #0
   17a00:	1e59      	subs	r1, r3, #1
   17a02:	700c      	strb	r4, [r1, #0]
   17a04:	6013      	str	r3, [r2, #0]
   17a06:	e7d7      	b.n	179b8 <__strtok_r+0xc>

00017a08 <_strtol_l.isra.0>:
   17a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a0a:	001f      	movs	r7, r3
   17a0c:	000e      	movs	r6, r1
   17a0e:	b087      	sub	sp, #28
   17a10:	9005      	str	r0, [sp, #20]
   17a12:	9103      	str	r1, [sp, #12]
   17a14:	9202      	str	r2, [sp, #8]
   17a16:	980c      	ldr	r0, [sp, #48]	; 0x30
   17a18:	7834      	ldrb	r4, [r6, #0]
   17a1a:	f000 fb84 	bl	18126 <__locale_ctype_ptr_l>
   17a1e:	2208      	movs	r2, #8
   17a20:	1900      	adds	r0, r0, r4
   17a22:	7843      	ldrb	r3, [r0, #1]
   17a24:	1c75      	adds	r5, r6, #1
   17a26:	4013      	ands	r3, r2
   17a28:	d10c      	bne.n	17a44 <_strtol_l.isra.0+0x3c>
   17a2a:	2c2d      	cmp	r4, #45	; 0x2d
   17a2c:	d10c      	bne.n	17a48 <_strtol_l.isra.0+0x40>
   17a2e:	3301      	adds	r3, #1
   17a30:	782c      	ldrb	r4, [r5, #0]
   17a32:	9301      	str	r3, [sp, #4]
   17a34:	1cb5      	adds	r5, r6, #2
   17a36:	2f00      	cmp	r7, #0
   17a38:	d00c      	beq.n	17a54 <_strtol_l.isra.0+0x4c>
   17a3a:	2f10      	cmp	r7, #16
   17a3c:	d114      	bne.n	17a68 <_strtol_l.isra.0+0x60>
   17a3e:	2c30      	cmp	r4, #48	; 0x30
   17a40:	d00a      	beq.n	17a58 <_strtol_l.isra.0+0x50>
   17a42:	e011      	b.n	17a68 <_strtol_l.isra.0+0x60>
   17a44:	002e      	movs	r6, r5
   17a46:	e7e6      	b.n	17a16 <_strtol_l.isra.0+0xe>
   17a48:	9301      	str	r3, [sp, #4]
   17a4a:	2c2b      	cmp	r4, #43	; 0x2b
   17a4c:	d1f3      	bne.n	17a36 <_strtol_l.isra.0+0x2e>
   17a4e:	782c      	ldrb	r4, [r5, #0]
   17a50:	1cb5      	adds	r5, r6, #2
   17a52:	e7f0      	b.n	17a36 <_strtol_l.isra.0+0x2e>
   17a54:	2c30      	cmp	r4, #48	; 0x30
   17a56:	d12f      	bne.n	17ab8 <_strtol_l.isra.0+0xb0>
   17a58:	2220      	movs	r2, #32
   17a5a:	782b      	ldrb	r3, [r5, #0]
   17a5c:	4393      	bics	r3, r2
   17a5e:	2b58      	cmp	r3, #88	; 0x58
   17a60:	d151      	bne.n	17b06 <_strtol_l.isra.0+0xfe>
   17a62:	2710      	movs	r7, #16
   17a64:	786c      	ldrb	r4, [r5, #1]
   17a66:	3502      	adds	r5, #2
   17a68:	9b01      	ldr	r3, [sp, #4]
   17a6a:	4a29      	ldr	r2, [pc, #164]	; (17b10 <_strtol_l.isra.0+0x108>)
   17a6c:	0039      	movs	r1, r7
   17a6e:	189e      	adds	r6, r3, r2
   17a70:	0030      	movs	r0, r6
   17a72:	f7ff fb3b 	bl	170ec <__aeabi_uidivmod>
   17a76:	0030      	movs	r0, r6
   17a78:	9104      	str	r1, [sp, #16]
   17a7a:	0039      	movs	r1, r7
   17a7c:	f7ff fab0 	bl	16fe0 <__udivsi3>
   17a80:	2101      	movs	r1, #1
   17a82:	2300      	movs	r3, #0
   17a84:	4249      	negs	r1, r1
   17a86:	0002      	movs	r2, r0
   17a88:	468c      	mov	ip, r1
   17a8a:	0018      	movs	r0, r3
   17a8c:	0021      	movs	r1, r4
   17a8e:	3930      	subs	r1, #48	; 0x30
   17a90:	2909      	cmp	r1, #9
   17a92:	d813      	bhi.n	17abc <_strtol_l.isra.0+0xb4>
   17a94:	000c      	movs	r4, r1
   17a96:	42a7      	cmp	r7, r4
   17a98:	dd1c      	ble.n	17ad4 <_strtol_l.isra.0+0xcc>
   17a9a:	1c59      	adds	r1, r3, #1
   17a9c:	d009      	beq.n	17ab2 <_strtol_l.isra.0+0xaa>
   17a9e:	4663      	mov	r3, ip
   17aa0:	4282      	cmp	r2, r0
   17aa2:	d306      	bcc.n	17ab2 <_strtol_l.isra.0+0xaa>
   17aa4:	d102      	bne.n	17aac <_strtol_l.isra.0+0xa4>
   17aa6:	9904      	ldr	r1, [sp, #16]
   17aa8:	42a1      	cmp	r1, r4
   17aaa:	db02      	blt.n	17ab2 <_strtol_l.isra.0+0xaa>
   17aac:	2301      	movs	r3, #1
   17aae:	4378      	muls	r0, r7
   17ab0:	1820      	adds	r0, r4, r0
   17ab2:	782c      	ldrb	r4, [r5, #0]
   17ab4:	3501      	adds	r5, #1
   17ab6:	e7e9      	b.n	17a8c <_strtol_l.isra.0+0x84>
   17ab8:	270a      	movs	r7, #10
   17aba:	e7d5      	b.n	17a68 <_strtol_l.isra.0+0x60>
   17abc:	0021      	movs	r1, r4
   17abe:	3941      	subs	r1, #65	; 0x41
   17ac0:	2919      	cmp	r1, #25
   17ac2:	d801      	bhi.n	17ac8 <_strtol_l.isra.0+0xc0>
   17ac4:	3c37      	subs	r4, #55	; 0x37
   17ac6:	e7e6      	b.n	17a96 <_strtol_l.isra.0+0x8e>
   17ac8:	0021      	movs	r1, r4
   17aca:	3961      	subs	r1, #97	; 0x61
   17acc:	2919      	cmp	r1, #25
   17ace:	d801      	bhi.n	17ad4 <_strtol_l.isra.0+0xcc>
   17ad0:	3c57      	subs	r4, #87	; 0x57
   17ad2:	e7e0      	b.n	17a96 <_strtol_l.isra.0+0x8e>
   17ad4:	1c5a      	adds	r2, r3, #1
   17ad6:	d108      	bne.n	17aea <_strtol_l.isra.0+0xe2>
   17ad8:	9a05      	ldr	r2, [sp, #20]
   17ada:	3323      	adds	r3, #35	; 0x23
   17adc:	6013      	str	r3, [r2, #0]
   17ade:	9b02      	ldr	r3, [sp, #8]
   17ae0:	0030      	movs	r0, r6
   17ae2:	2b00      	cmp	r3, #0
   17ae4:	d10b      	bne.n	17afe <_strtol_l.isra.0+0xf6>
   17ae6:	b007      	add	sp, #28
   17ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17aea:	9a01      	ldr	r2, [sp, #4]
   17aec:	2a00      	cmp	r2, #0
   17aee:	d000      	beq.n	17af2 <_strtol_l.isra.0+0xea>
   17af0:	4240      	negs	r0, r0
   17af2:	9a02      	ldr	r2, [sp, #8]
   17af4:	2a00      	cmp	r2, #0
   17af6:	d0f6      	beq.n	17ae6 <_strtol_l.isra.0+0xde>
   17af8:	9a03      	ldr	r2, [sp, #12]
   17afa:	2b00      	cmp	r3, #0
   17afc:	d000      	beq.n	17b00 <_strtol_l.isra.0+0xf8>
   17afe:	1e6a      	subs	r2, r5, #1
   17b00:	9b02      	ldr	r3, [sp, #8]
   17b02:	601a      	str	r2, [r3, #0]
   17b04:	e7ef      	b.n	17ae6 <_strtol_l.isra.0+0xde>
   17b06:	2430      	movs	r4, #48	; 0x30
   17b08:	2f00      	cmp	r7, #0
   17b0a:	d1ad      	bne.n	17a68 <_strtol_l.isra.0+0x60>
   17b0c:	3708      	adds	r7, #8
   17b0e:	e7ab      	b.n	17a68 <_strtol_l.isra.0+0x60>
   17b10:	7fffffff 	.word	0x7fffffff

00017b14 <strtol>:
   17b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17b16:	0013      	movs	r3, r2
   17b18:	4a06      	ldr	r2, [pc, #24]	; (17b34 <strtol+0x20>)
   17b1a:	0005      	movs	r5, r0
   17b1c:	6810      	ldr	r0, [r2, #0]
   17b1e:	6a04      	ldr	r4, [r0, #32]
   17b20:	2c00      	cmp	r4, #0
   17b22:	d100      	bne.n	17b26 <strtol+0x12>
   17b24:	4c04      	ldr	r4, [pc, #16]	; (17b38 <strtol+0x24>)
   17b26:	000a      	movs	r2, r1
   17b28:	9400      	str	r4, [sp, #0]
   17b2a:	0029      	movs	r1, r5
   17b2c:	f7ff ff6c 	bl	17a08 <_strtol_l.isra.0>
   17b30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17b32:	46c0      	nop			; (mov r8, r8)
   17b34:	20000150 	.word	0x20000150
   17b38:	200001b4 	.word	0x200001b4

00017b3c <_strtoul_l.isra.0>:
   17b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b3e:	001f      	movs	r7, r3
   17b40:	000e      	movs	r6, r1
   17b42:	b087      	sub	sp, #28
   17b44:	9005      	str	r0, [sp, #20]
   17b46:	9103      	str	r1, [sp, #12]
   17b48:	9201      	str	r2, [sp, #4]
   17b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   17b4c:	7834      	ldrb	r4, [r6, #0]
   17b4e:	f000 faea 	bl	18126 <__locale_ctype_ptr_l>
   17b52:	2208      	movs	r2, #8
   17b54:	1900      	adds	r0, r0, r4
   17b56:	7843      	ldrb	r3, [r0, #1]
   17b58:	1c75      	adds	r5, r6, #1
   17b5a:	4013      	ands	r3, r2
   17b5c:	d10c      	bne.n	17b78 <_strtoul_l.isra.0+0x3c>
   17b5e:	2c2d      	cmp	r4, #45	; 0x2d
   17b60:	d10c      	bne.n	17b7c <_strtoul_l.isra.0+0x40>
   17b62:	3301      	adds	r3, #1
   17b64:	782c      	ldrb	r4, [r5, #0]
   17b66:	9302      	str	r3, [sp, #8]
   17b68:	1cb5      	adds	r5, r6, #2
   17b6a:	2f00      	cmp	r7, #0
   17b6c:	d00c      	beq.n	17b88 <_strtoul_l.isra.0+0x4c>
   17b6e:	2f10      	cmp	r7, #16
   17b70:	d114      	bne.n	17b9c <_strtoul_l.isra.0+0x60>
   17b72:	2c30      	cmp	r4, #48	; 0x30
   17b74:	d00a      	beq.n	17b8c <_strtoul_l.isra.0+0x50>
   17b76:	e011      	b.n	17b9c <_strtoul_l.isra.0+0x60>
   17b78:	002e      	movs	r6, r5
   17b7a:	e7e6      	b.n	17b4a <_strtoul_l.isra.0+0xe>
   17b7c:	9302      	str	r3, [sp, #8]
   17b7e:	2c2b      	cmp	r4, #43	; 0x2b
   17b80:	d1f3      	bne.n	17b6a <_strtoul_l.isra.0+0x2e>
   17b82:	782c      	ldrb	r4, [r5, #0]
   17b84:	1cb5      	adds	r5, r6, #2
   17b86:	e7f0      	b.n	17b6a <_strtoul_l.isra.0+0x2e>
   17b88:	2c30      	cmp	r4, #48	; 0x30
   17b8a:	d12f      	bne.n	17bec <_strtoul_l.isra.0+0xb0>
   17b8c:	2220      	movs	r2, #32
   17b8e:	782b      	ldrb	r3, [r5, #0]
   17b90:	4393      	bics	r3, r2
   17b92:	2b58      	cmp	r3, #88	; 0x58
   17b94:	d154      	bne.n	17c40 <_strtoul_l.isra.0+0x104>
   17b96:	2710      	movs	r7, #16
   17b98:	786c      	ldrb	r4, [r5, #1]
   17b9a:	3502      	adds	r5, #2
   17b9c:	2001      	movs	r0, #1
   17b9e:	0039      	movs	r1, r7
   17ba0:	4240      	negs	r0, r0
   17ba2:	f7ff fa1d 	bl	16fe0 <__udivsi3>
   17ba6:	0006      	movs	r6, r0
   17ba8:	2001      	movs	r0, #1
   17baa:	0039      	movs	r1, r7
   17bac:	4240      	negs	r0, r0
   17bae:	f7ff fa9d 	bl	170ec <__aeabi_uidivmod>
   17bb2:	2300      	movs	r3, #0
   17bb4:	9104      	str	r1, [sp, #16]
   17bb6:	2101      	movs	r1, #1
   17bb8:	2201      	movs	r2, #1
   17bba:	0018      	movs	r0, r3
   17bbc:	468c      	mov	ip, r1
   17bbe:	4252      	negs	r2, r2
   17bc0:	0021      	movs	r1, r4
   17bc2:	3930      	subs	r1, #48	; 0x30
   17bc4:	2909      	cmp	r1, #9
   17bc6:	d813      	bhi.n	17bf0 <_strtoul_l.isra.0+0xb4>
   17bc8:	000c      	movs	r4, r1
   17bca:	42a7      	cmp	r7, r4
   17bcc:	dd1e      	ble.n	17c0c <_strtoul_l.isra.0+0xd0>
   17bce:	2b00      	cmp	r3, #0
   17bd0:	db1a      	blt.n	17c08 <_strtoul_l.isra.0+0xcc>
   17bd2:	0013      	movs	r3, r2
   17bd4:	4286      	cmp	r6, r0
   17bd6:	d306      	bcc.n	17be6 <_strtoul_l.isra.0+0xaa>
   17bd8:	d102      	bne.n	17be0 <_strtoul_l.isra.0+0xa4>
   17bda:	9904      	ldr	r1, [sp, #16]
   17bdc:	42a1      	cmp	r1, r4
   17bde:	db02      	blt.n	17be6 <_strtoul_l.isra.0+0xaa>
   17be0:	4663      	mov	r3, ip
   17be2:	4378      	muls	r0, r7
   17be4:	1820      	adds	r0, r4, r0
   17be6:	782c      	ldrb	r4, [r5, #0]
   17be8:	3501      	adds	r5, #1
   17bea:	e7e9      	b.n	17bc0 <_strtoul_l.isra.0+0x84>
   17bec:	270a      	movs	r7, #10
   17bee:	e7d5      	b.n	17b9c <_strtoul_l.isra.0+0x60>
   17bf0:	0021      	movs	r1, r4
   17bf2:	3941      	subs	r1, #65	; 0x41
   17bf4:	2919      	cmp	r1, #25
   17bf6:	d801      	bhi.n	17bfc <_strtoul_l.isra.0+0xc0>
   17bf8:	3c37      	subs	r4, #55	; 0x37
   17bfa:	e7e6      	b.n	17bca <_strtoul_l.isra.0+0x8e>
   17bfc:	0021      	movs	r1, r4
   17bfe:	3961      	subs	r1, #97	; 0x61
   17c00:	2919      	cmp	r1, #25
   17c02:	d803      	bhi.n	17c0c <_strtoul_l.isra.0+0xd0>
   17c04:	3c57      	subs	r4, #87	; 0x57
   17c06:	e7e0      	b.n	17bca <_strtoul_l.isra.0+0x8e>
   17c08:	0013      	movs	r3, r2
   17c0a:	e7ec      	b.n	17be6 <_strtoul_l.isra.0+0xaa>
   17c0c:	2b00      	cmp	r3, #0
   17c0e:	da09      	bge.n	17c24 <_strtoul_l.isra.0+0xe8>
   17c10:	2322      	movs	r3, #34	; 0x22
   17c12:	2001      	movs	r0, #1
   17c14:	9a05      	ldr	r2, [sp, #20]
   17c16:	4240      	negs	r0, r0
   17c18:	6013      	str	r3, [r2, #0]
   17c1a:	9b01      	ldr	r3, [sp, #4]
   17c1c:	2b00      	cmp	r3, #0
   17c1e:	d10b      	bne.n	17c38 <_strtoul_l.isra.0+0xfc>
   17c20:	b007      	add	sp, #28
   17c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c24:	9a02      	ldr	r2, [sp, #8]
   17c26:	2a00      	cmp	r2, #0
   17c28:	d000      	beq.n	17c2c <_strtoul_l.isra.0+0xf0>
   17c2a:	4240      	negs	r0, r0
   17c2c:	9a01      	ldr	r2, [sp, #4]
   17c2e:	2a00      	cmp	r2, #0
   17c30:	d0f6      	beq.n	17c20 <_strtoul_l.isra.0+0xe4>
   17c32:	9a03      	ldr	r2, [sp, #12]
   17c34:	2b00      	cmp	r3, #0
   17c36:	d000      	beq.n	17c3a <_strtoul_l.isra.0+0xfe>
   17c38:	1e6a      	subs	r2, r5, #1
   17c3a:	9b01      	ldr	r3, [sp, #4]
   17c3c:	601a      	str	r2, [r3, #0]
   17c3e:	e7ef      	b.n	17c20 <_strtoul_l.isra.0+0xe4>
   17c40:	2430      	movs	r4, #48	; 0x30
   17c42:	2f00      	cmp	r7, #0
   17c44:	d1aa      	bne.n	17b9c <_strtoul_l.isra.0+0x60>
   17c46:	3708      	adds	r7, #8
   17c48:	e7a8      	b.n	17b9c <_strtoul_l.isra.0+0x60>
	...

00017c4c <strtoul>:
   17c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17c4e:	0013      	movs	r3, r2
   17c50:	4a06      	ldr	r2, [pc, #24]	; (17c6c <strtoul+0x20>)
   17c52:	0005      	movs	r5, r0
   17c54:	6810      	ldr	r0, [r2, #0]
   17c56:	6a04      	ldr	r4, [r0, #32]
   17c58:	2c00      	cmp	r4, #0
   17c5a:	d100      	bne.n	17c5e <strtoul+0x12>
   17c5c:	4c04      	ldr	r4, [pc, #16]	; (17c70 <strtoul+0x24>)
   17c5e:	000a      	movs	r2, r1
   17c60:	9400      	str	r4, [sp, #0]
   17c62:	0029      	movs	r1, r5
   17c64:	f7ff ff6a 	bl	17b3c <_strtoul_l.isra.0>
   17c68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17c6a:	46c0      	nop			; (mov r8, r8)
   17c6c:	20000150 	.word	0x20000150
   17c70:	200001b4 	.word	0x200001b4

00017c74 <__swbuf_r>:
   17c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c76:	0005      	movs	r5, r0
   17c78:	000e      	movs	r6, r1
   17c7a:	0014      	movs	r4, r2
   17c7c:	2800      	cmp	r0, #0
   17c7e:	d004      	beq.n	17c8a <__swbuf_r+0x16>
   17c80:	6983      	ldr	r3, [r0, #24]
   17c82:	2b00      	cmp	r3, #0
   17c84:	d101      	bne.n	17c8a <__swbuf_r+0x16>
   17c86:	f000 f9b9 	bl	17ffc <__sinit>
   17c8a:	4b22      	ldr	r3, [pc, #136]	; (17d14 <__swbuf_r+0xa0>)
   17c8c:	429c      	cmp	r4, r3
   17c8e:	d12d      	bne.n	17cec <__swbuf_r+0x78>
   17c90:	686c      	ldr	r4, [r5, #4]
   17c92:	69a3      	ldr	r3, [r4, #24]
   17c94:	60a3      	str	r3, [r4, #8]
   17c96:	89a3      	ldrh	r3, [r4, #12]
   17c98:	071b      	lsls	r3, r3, #28
   17c9a:	d531      	bpl.n	17d00 <__swbuf_r+0x8c>
   17c9c:	6923      	ldr	r3, [r4, #16]
   17c9e:	2b00      	cmp	r3, #0
   17ca0:	d02e      	beq.n	17d00 <__swbuf_r+0x8c>
   17ca2:	6823      	ldr	r3, [r4, #0]
   17ca4:	6922      	ldr	r2, [r4, #16]
   17ca6:	b2f7      	uxtb	r7, r6
   17ca8:	1a98      	subs	r0, r3, r2
   17caa:	6963      	ldr	r3, [r4, #20]
   17cac:	b2f6      	uxtb	r6, r6
   17cae:	4298      	cmp	r0, r3
   17cb0:	db05      	blt.n	17cbe <__swbuf_r+0x4a>
   17cb2:	0021      	movs	r1, r4
   17cb4:	0028      	movs	r0, r5
   17cb6:	f000 f933 	bl	17f20 <_fflush_r>
   17cba:	2800      	cmp	r0, #0
   17cbc:	d126      	bne.n	17d0c <__swbuf_r+0x98>
   17cbe:	68a3      	ldr	r3, [r4, #8]
   17cc0:	3001      	adds	r0, #1
   17cc2:	3b01      	subs	r3, #1
   17cc4:	60a3      	str	r3, [r4, #8]
   17cc6:	6823      	ldr	r3, [r4, #0]
   17cc8:	1c5a      	adds	r2, r3, #1
   17cca:	6022      	str	r2, [r4, #0]
   17ccc:	701f      	strb	r7, [r3, #0]
   17cce:	6963      	ldr	r3, [r4, #20]
   17cd0:	4298      	cmp	r0, r3
   17cd2:	d004      	beq.n	17cde <__swbuf_r+0x6a>
   17cd4:	89a3      	ldrh	r3, [r4, #12]
   17cd6:	07db      	lsls	r3, r3, #31
   17cd8:	d51a      	bpl.n	17d10 <__swbuf_r+0x9c>
   17cda:	2e0a      	cmp	r6, #10
   17cdc:	d118      	bne.n	17d10 <__swbuf_r+0x9c>
   17cde:	0021      	movs	r1, r4
   17ce0:	0028      	movs	r0, r5
   17ce2:	f000 f91d 	bl	17f20 <_fflush_r>
   17ce6:	2800      	cmp	r0, #0
   17ce8:	d012      	beq.n	17d10 <__swbuf_r+0x9c>
   17cea:	e00f      	b.n	17d0c <__swbuf_r+0x98>
   17cec:	4b0a      	ldr	r3, [pc, #40]	; (17d18 <__swbuf_r+0xa4>)
   17cee:	429c      	cmp	r4, r3
   17cf0:	d101      	bne.n	17cf6 <__swbuf_r+0x82>
   17cf2:	68ac      	ldr	r4, [r5, #8]
   17cf4:	e7cd      	b.n	17c92 <__swbuf_r+0x1e>
   17cf6:	4b09      	ldr	r3, [pc, #36]	; (17d1c <__swbuf_r+0xa8>)
   17cf8:	429c      	cmp	r4, r3
   17cfa:	d1ca      	bne.n	17c92 <__swbuf_r+0x1e>
   17cfc:	68ec      	ldr	r4, [r5, #12]
   17cfe:	e7c8      	b.n	17c92 <__swbuf_r+0x1e>
   17d00:	0021      	movs	r1, r4
   17d02:	0028      	movs	r0, r5
   17d04:	f000 f80c 	bl	17d20 <__swsetup_r>
   17d08:	2800      	cmp	r0, #0
   17d0a:	d0ca      	beq.n	17ca2 <__swbuf_r+0x2e>
   17d0c:	2601      	movs	r6, #1
   17d0e:	4276      	negs	r6, r6
   17d10:	0030      	movs	r0, r6
   17d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d14:	0001aee4 	.word	0x0001aee4
   17d18:	0001af04 	.word	0x0001af04
   17d1c:	0001aec4 	.word	0x0001aec4

00017d20 <__swsetup_r>:
   17d20:	4b36      	ldr	r3, [pc, #216]	; (17dfc <__swsetup_r+0xdc>)
   17d22:	b570      	push	{r4, r5, r6, lr}
   17d24:	681d      	ldr	r5, [r3, #0]
   17d26:	0006      	movs	r6, r0
   17d28:	000c      	movs	r4, r1
   17d2a:	2d00      	cmp	r5, #0
   17d2c:	d005      	beq.n	17d3a <__swsetup_r+0x1a>
   17d2e:	69ab      	ldr	r3, [r5, #24]
   17d30:	2b00      	cmp	r3, #0
   17d32:	d102      	bne.n	17d3a <__swsetup_r+0x1a>
   17d34:	0028      	movs	r0, r5
   17d36:	f000 f961 	bl	17ffc <__sinit>
   17d3a:	4b31      	ldr	r3, [pc, #196]	; (17e00 <__swsetup_r+0xe0>)
   17d3c:	429c      	cmp	r4, r3
   17d3e:	d10f      	bne.n	17d60 <__swsetup_r+0x40>
   17d40:	686c      	ldr	r4, [r5, #4]
   17d42:	230c      	movs	r3, #12
   17d44:	5ee2      	ldrsh	r2, [r4, r3]
   17d46:	b293      	uxth	r3, r2
   17d48:	0719      	lsls	r1, r3, #28
   17d4a:	d42d      	bmi.n	17da8 <__swsetup_r+0x88>
   17d4c:	06d9      	lsls	r1, r3, #27
   17d4e:	d411      	bmi.n	17d74 <__swsetup_r+0x54>
   17d50:	2309      	movs	r3, #9
   17d52:	2001      	movs	r0, #1
   17d54:	6033      	str	r3, [r6, #0]
   17d56:	3337      	adds	r3, #55	; 0x37
   17d58:	4313      	orrs	r3, r2
   17d5a:	81a3      	strh	r3, [r4, #12]
   17d5c:	4240      	negs	r0, r0
   17d5e:	bd70      	pop	{r4, r5, r6, pc}
   17d60:	4b28      	ldr	r3, [pc, #160]	; (17e04 <__swsetup_r+0xe4>)
   17d62:	429c      	cmp	r4, r3
   17d64:	d101      	bne.n	17d6a <__swsetup_r+0x4a>
   17d66:	68ac      	ldr	r4, [r5, #8]
   17d68:	e7eb      	b.n	17d42 <__swsetup_r+0x22>
   17d6a:	4b27      	ldr	r3, [pc, #156]	; (17e08 <__swsetup_r+0xe8>)
   17d6c:	429c      	cmp	r4, r3
   17d6e:	d1e8      	bne.n	17d42 <__swsetup_r+0x22>
   17d70:	68ec      	ldr	r4, [r5, #12]
   17d72:	e7e6      	b.n	17d42 <__swsetup_r+0x22>
   17d74:	075b      	lsls	r3, r3, #29
   17d76:	d513      	bpl.n	17da0 <__swsetup_r+0x80>
   17d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17d7a:	2900      	cmp	r1, #0
   17d7c:	d008      	beq.n	17d90 <__swsetup_r+0x70>
   17d7e:	0023      	movs	r3, r4
   17d80:	3344      	adds	r3, #68	; 0x44
   17d82:	4299      	cmp	r1, r3
   17d84:	d002      	beq.n	17d8c <__swsetup_r+0x6c>
   17d86:	0030      	movs	r0, r6
   17d88:	f7ff fb2c 	bl	173e4 <_free_r>
   17d8c:	2300      	movs	r3, #0
   17d8e:	6363      	str	r3, [r4, #52]	; 0x34
   17d90:	2224      	movs	r2, #36	; 0x24
   17d92:	89a3      	ldrh	r3, [r4, #12]
   17d94:	4393      	bics	r3, r2
   17d96:	81a3      	strh	r3, [r4, #12]
   17d98:	2300      	movs	r3, #0
   17d9a:	6063      	str	r3, [r4, #4]
   17d9c:	6923      	ldr	r3, [r4, #16]
   17d9e:	6023      	str	r3, [r4, #0]
   17da0:	2308      	movs	r3, #8
   17da2:	89a2      	ldrh	r2, [r4, #12]
   17da4:	4313      	orrs	r3, r2
   17da6:	81a3      	strh	r3, [r4, #12]
   17da8:	6923      	ldr	r3, [r4, #16]
   17daa:	2b00      	cmp	r3, #0
   17dac:	d10b      	bne.n	17dc6 <__swsetup_r+0xa6>
   17dae:	21a0      	movs	r1, #160	; 0xa0
   17db0:	2280      	movs	r2, #128	; 0x80
   17db2:	89a3      	ldrh	r3, [r4, #12]
   17db4:	0089      	lsls	r1, r1, #2
   17db6:	0092      	lsls	r2, r2, #2
   17db8:	400b      	ands	r3, r1
   17dba:	4293      	cmp	r3, r2
   17dbc:	d003      	beq.n	17dc6 <__swsetup_r+0xa6>
   17dbe:	0021      	movs	r1, r4
   17dc0:	0030      	movs	r0, r6
   17dc2:	f000 f9db 	bl	1817c <__smakebuf_r>
   17dc6:	2301      	movs	r3, #1
   17dc8:	89a2      	ldrh	r2, [r4, #12]
   17dca:	4013      	ands	r3, r2
   17dcc:	d011      	beq.n	17df2 <__swsetup_r+0xd2>
   17dce:	2300      	movs	r3, #0
   17dd0:	60a3      	str	r3, [r4, #8]
   17dd2:	6963      	ldr	r3, [r4, #20]
   17dd4:	425b      	negs	r3, r3
   17dd6:	61a3      	str	r3, [r4, #24]
   17dd8:	2000      	movs	r0, #0
   17dda:	6923      	ldr	r3, [r4, #16]
   17ddc:	4283      	cmp	r3, r0
   17dde:	d1be      	bne.n	17d5e <__swsetup_r+0x3e>
   17de0:	230c      	movs	r3, #12
   17de2:	5ee2      	ldrsh	r2, [r4, r3]
   17de4:	0613      	lsls	r3, r2, #24
   17de6:	d5ba      	bpl.n	17d5e <__swsetup_r+0x3e>
   17de8:	2340      	movs	r3, #64	; 0x40
   17dea:	4313      	orrs	r3, r2
   17dec:	81a3      	strh	r3, [r4, #12]
   17dee:	3801      	subs	r0, #1
   17df0:	e7b5      	b.n	17d5e <__swsetup_r+0x3e>
   17df2:	0792      	lsls	r2, r2, #30
   17df4:	d400      	bmi.n	17df8 <__swsetup_r+0xd8>
   17df6:	6963      	ldr	r3, [r4, #20]
   17df8:	60a3      	str	r3, [r4, #8]
   17dfa:	e7ed      	b.n	17dd8 <__swsetup_r+0xb8>
   17dfc:	20000150 	.word	0x20000150
   17e00:	0001aee4 	.word	0x0001aee4
   17e04:	0001af04 	.word	0x0001af04
   17e08:	0001aec4 	.word	0x0001aec4

00017e0c <__sflush_r>:
   17e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17e0e:	898a      	ldrh	r2, [r1, #12]
   17e10:	0005      	movs	r5, r0
   17e12:	000c      	movs	r4, r1
   17e14:	0713      	lsls	r3, r2, #28
   17e16:	d460      	bmi.n	17eda <__sflush_r+0xce>
   17e18:	684b      	ldr	r3, [r1, #4]
   17e1a:	2b00      	cmp	r3, #0
   17e1c:	dc04      	bgt.n	17e28 <__sflush_r+0x1c>
   17e1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17e20:	2b00      	cmp	r3, #0
   17e22:	dc01      	bgt.n	17e28 <__sflush_r+0x1c>
   17e24:	2000      	movs	r0, #0
   17e26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17e28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17e2a:	2f00      	cmp	r7, #0
   17e2c:	d0fa      	beq.n	17e24 <__sflush_r+0x18>
   17e2e:	2300      	movs	r3, #0
   17e30:	682e      	ldr	r6, [r5, #0]
   17e32:	602b      	str	r3, [r5, #0]
   17e34:	2380      	movs	r3, #128	; 0x80
   17e36:	015b      	lsls	r3, r3, #5
   17e38:	401a      	ands	r2, r3
   17e3a:	d034      	beq.n	17ea6 <__sflush_r+0x9a>
   17e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   17e3e:	89a3      	ldrh	r3, [r4, #12]
   17e40:	075b      	lsls	r3, r3, #29
   17e42:	d506      	bpl.n	17e52 <__sflush_r+0x46>
   17e44:	6863      	ldr	r3, [r4, #4]
   17e46:	1ac0      	subs	r0, r0, r3
   17e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17e4a:	2b00      	cmp	r3, #0
   17e4c:	d001      	beq.n	17e52 <__sflush_r+0x46>
   17e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   17e50:	1ac0      	subs	r0, r0, r3
   17e52:	0002      	movs	r2, r0
   17e54:	6a21      	ldr	r1, [r4, #32]
   17e56:	2300      	movs	r3, #0
   17e58:	0028      	movs	r0, r5
   17e5a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17e5c:	47b8      	blx	r7
   17e5e:	89a1      	ldrh	r1, [r4, #12]
   17e60:	1c43      	adds	r3, r0, #1
   17e62:	d106      	bne.n	17e72 <__sflush_r+0x66>
   17e64:	682b      	ldr	r3, [r5, #0]
   17e66:	2b1d      	cmp	r3, #29
   17e68:	d831      	bhi.n	17ece <__sflush_r+0xc2>
   17e6a:	4a2c      	ldr	r2, [pc, #176]	; (17f1c <__sflush_r+0x110>)
   17e6c:	40da      	lsrs	r2, r3
   17e6e:	07d3      	lsls	r3, r2, #31
   17e70:	d52d      	bpl.n	17ece <__sflush_r+0xc2>
   17e72:	2300      	movs	r3, #0
   17e74:	6063      	str	r3, [r4, #4]
   17e76:	6923      	ldr	r3, [r4, #16]
   17e78:	6023      	str	r3, [r4, #0]
   17e7a:	04cb      	lsls	r3, r1, #19
   17e7c:	d505      	bpl.n	17e8a <__sflush_r+0x7e>
   17e7e:	1c43      	adds	r3, r0, #1
   17e80:	d102      	bne.n	17e88 <__sflush_r+0x7c>
   17e82:	682b      	ldr	r3, [r5, #0]
   17e84:	2b00      	cmp	r3, #0
   17e86:	d100      	bne.n	17e8a <__sflush_r+0x7e>
   17e88:	6560      	str	r0, [r4, #84]	; 0x54
   17e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17e8c:	602e      	str	r6, [r5, #0]
   17e8e:	2900      	cmp	r1, #0
   17e90:	d0c8      	beq.n	17e24 <__sflush_r+0x18>
   17e92:	0023      	movs	r3, r4
   17e94:	3344      	adds	r3, #68	; 0x44
   17e96:	4299      	cmp	r1, r3
   17e98:	d002      	beq.n	17ea0 <__sflush_r+0x94>
   17e9a:	0028      	movs	r0, r5
   17e9c:	f7ff faa2 	bl	173e4 <_free_r>
   17ea0:	2000      	movs	r0, #0
   17ea2:	6360      	str	r0, [r4, #52]	; 0x34
   17ea4:	e7bf      	b.n	17e26 <__sflush_r+0x1a>
   17ea6:	2301      	movs	r3, #1
   17ea8:	6a21      	ldr	r1, [r4, #32]
   17eaa:	0028      	movs	r0, r5
   17eac:	47b8      	blx	r7
   17eae:	1c43      	adds	r3, r0, #1
   17eb0:	d1c5      	bne.n	17e3e <__sflush_r+0x32>
   17eb2:	682b      	ldr	r3, [r5, #0]
   17eb4:	2b00      	cmp	r3, #0
   17eb6:	d0c2      	beq.n	17e3e <__sflush_r+0x32>
   17eb8:	2b1d      	cmp	r3, #29
   17eba:	d001      	beq.n	17ec0 <__sflush_r+0xb4>
   17ebc:	2b16      	cmp	r3, #22
   17ebe:	d101      	bne.n	17ec4 <__sflush_r+0xb8>
   17ec0:	602e      	str	r6, [r5, #0]
   17ec2:	e7af      	b.n	17e24 <__sflush_r+0x18>
   17ec4:	2340      	movs	r3, #64	; 0x40
   17ec6:	89a2      	ldrh	r2, [r4, #12]
   17ec8:	4313      	orrs	r3, r2
   17eca:	81a3      	strh	r3, [r4, #12]
   17ecc:	e7ab      	b.n	17e26 <__sflush_r+0x1a>
   17ece:	2340      	movs	r3, #64	; 0x40
   17ed0:	430b      	orrs	r3, r1
   17ed2:	2001      	movs	r0, #1
   17ed4:	81a3      	strh	r3, [r4, #12]
   17ed6:	4240      	negs	r0, r0
   17ed8:	e7a5      	b.n	17e26 <__sflush_r+0x1a>
   17eda:	690f      	ldr	r7, [r1, #16]
   17edc:	2f00      	cmp	r7, #0
   17ede:	d0a1      	beq.n	17e24 <__sflush_r+0x18>
   17ee0:	680b      	ldr	r3, [r1, #0]
   17ee2:	600f      	str	r7, [r1, #0]
   17ee4:	1bdb      	subs	r3, r3, r7
   17ee6:	9301      	str	r3, [sp, #4]
   17ee8:	2300      	movs	r3, #0
   17eea:	0792      	lsls	r2, r2, #30
   17eec:	d100      	bne.n	17ef0 <__sflush_r+0xe4>
   17eee:	694b      	ldr	r3, [r1, #20]
   17ef0:	60a3      	str	r3, [r4, #8]
   17ef2:	9b01      	ldr	r3, [sp, #4]
   17ef4:	2b00      	cmp	r3, #0
   17ef6:	dc00      	bgt.n	17efa <__sflush_r+0xee>
   17ef8:	e794      	b.n	17e24 <__sflush_r+0x18>
   17efa:	9b01      	ldr	r3, [sp, #4]
   17efc:	003a      	movs	r2, r7
   17efe:	6a21      	ldr	r1, [r4, #32]
   17f00:	0028      	movs	r0, r5
   17f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17f04:	47b0      	blx	r6
   17f06:	2800      	cmp	r0, #0
   17f08:	dc03      	bgt.n	17f12 <__sflush_r+0x106>
   17f0a:	2340      	movs	r3, #64	; 0x40
   17f0c:	89a2      	ldrh	r2, [r4, #12]
   17f0e:	4313      	orrs	r3, r2
   17f10:	e7df      	b.n	17ed2 <__sflush_r+0xc6>
   17f12:	9b01      	ldr	r3, [sp, #4]
   17f14:	183f      	adds	r7, r7, r0
   17f16:	1a1b      	subs	r3, r3, r0
   17f18:	9301      	str	r3, [sp, #4]
   17f1a:	e7ea      	b.n	17ef2 <__sflush_r+0xe6>
   17f1c:	20400001 	.word	0x20400001

00017f20 <_fflush_r>:
   17f20:	690b      	ldr	r3, [r1, #16]
   17f22:	b570      	push	{r4, r5, r6, lr}
   17f24:	0005      	movs	r5, r0
   17f26:	000c      	movs	r4, r1
   17f28:	2b00      	cmp	r3, #0
   17f2a:	d101      	bne.n	17f30 <_fflush_r+0x10>
   17f2c:	2000      	movs	r0, #0
   17f2e:	bd70      	pop	{r4, r5, r6, pc}
   17f30:	2800      	cmp	r0, #0
   17f32:	d004      	beq.n	17f3e <_fflush_r+0x1e>
   17f34:	6983      	ldr	r3, [r0, #24]
   17f36:	2b00      	cmp	r3, #0
   17f38:	d101      	bne.n	17f3e <_fflush_r+0x1e>
   17f3a:	f000 f85f 	bl	17ffc <__sinit>
   17f3e:	4b0b      	ldr	r3, [pc, #44]	; (17f6c <_fflush_r+0x4c>)
   17f40:	429c      	cmp	r4, r3
   17f42:	d109      	bne.n	17f58 <_fflush_r+0x38>
   17f44:	686c      	ldr	r4, [r5, #4]
   17f46:	220c      	movs	r2, #12
   17f48:	5ea3      	ldrsh	r3, [r4, r2]
   17f4a:	2b00      	cmp	r3, #0
   17f4c:	d0ee      	beq.n	17f2c <_fflush_r+0xc>
   17f4e:	0021      	movs	r1, r4
   17f50:	0028      	movs	r0, r5
   17f52:	f7ff ff5b 	bl	17e0c <__sflush_r>
   17f56:	e7ea      	b.n	17f2e <_fflush_r+0xe>
   17f58:	4b05      	ldr	r3, [pc, #20]	; (17f70 <_fflush_r+0x50>)
   17f5a:	429c      	cmp	r4, r3
   17f5c:	d101      	bne.n	17f62 <_fflush_r+0x42>
   17f5e:	68ac      	ldr	r4, [r5, #8]
   17f60:	e7f1      	b.n	17f46 <_fflush_r+0x26>
   17f62:	4b04      	ldr	r3, [pc, #16]	; (17f74 <_fflush_r+0x54>)
   17f64:	429c      	cmp	r4, r3
   17f66:	d1ee      	bne.n	17f46 <_fflush_r+0x26>
   17f68:	68ec      	ldr	r4, [r5, #12]
   17f6a:	e7ec      	b.n	17f46 <_fflush_r+0x26>
   17f6c:	0001aee4 	.word	0x0001aee4
   17f70:	0001af04 	.word	0x0001af04
   17f74:	0001aec4 	.word	0x0001aec4

00017f78 <_cleanup_r>:
   17f78:	b510      	push	{r4, lr}
   17f7a:	4902      	ldr	r1, [pc, #8]	; (17f84 <_cleanup_r+0xc>)
   17f7c:	f000 f8b2 	bl	180e4 <_fwalk_reent>
   17f80:	bd10      	pop	{r4, pc}
   17f82:	46c0      	nop			; (mov r8, r8)
   17f84:	00017f21 	.word	0x00017f21

00017f88 <std.isra.0>:
   17f88:	2300      	movs	r3, #0
   17f8a:	b510      	push	{r4, lr}
   17f8c:	0004      	movs	r4, r0
   17f8e:	6003      	str	r3, [r0, #0]
   17f90:	6043      	str	r3, [r0, #4]
   17f92:	6083      	str	r3, [r0, #8]
   17f94:	8181      	strh	r1, [r0, #12]
   17f96:	6643      	str	r3, [r0, #100]	; 0x64
   17f98:	81c2      	strh	r2, [r0, #14]
   17f9a:	6103      	str	r3, [r0, #16]
   17f9c:	6143      	str	r3, [r0, #20]
   17f9e:	6183      	str	r3, [r0, #24]
   17fa0:	0019      	movs	r1, r3
   17fa2:	2208      	movs	r2, #8
   17fa4:	305c      	adds	r0, #92	; 0x5c
   17fa6:	f7ff fa14 	bl	173d2 <memset>
   17faa:	4b05      	ldr	r3, [pc, #20]	; (17fc0 <std.isra.0+0x38>)
   17fac:	6224      	str	r4, [r4, #32]
   17fae:	6263      	str	r3, [r4, #36]	; 0x24
   17fb0:	4b04      	ldr	r3, [pc, #16]	; (17fc4 <std.isra.0+0x3c>)
   17fb2:	62a3      	str	r3, [r4, #40]	; 0x28
   17fb4:	4b04      	ldr	r3, [pc, #16]	; (17fc8 <std.isra.0+0x40>)
   17fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
   17fb8:	4b04      	ldr	r3, [pc, #16]	; (17fcc <std.isra.0+0x44>)
   17fba:	6323      	str	r3, [r4, #48]	; 0x30
   17fbc:	bd10      	pop	{r4, pc}
   17fbe:	46c0      	nop			; (mov r8, r8)
   17fc0:	00018afd 	.word	0x00018afd
   17fc4:	00018b25 	.word	0x00018b25
   17fc8:	00018b5d 	.word	0x00018b5d
   17fcc:	00018b89 	.word	0x00018b89

00017fd0 <__sfmoreglue>:
   17fd0:	b570      	push	{r4, r5, r6, lr}
   17fd2:	2568      	movs	r5, #104	; 0x68
   17fd4:	1e4a      	subs	r2, r1, #1
   17fd6:	4355      	muls	r5, r2
   17fd8:	000e      	movs	r6, r1
   17fda:	0029      	movs	r1, r5
   17fdc:	3174      	adds	r1, #116	; 0x74
   17fde:	f7ff fa4b 	bl	17478 <_malloc_r>
   17fe2:	1e04      	subs	r4, r0, #0
   17fe4:	d008      	beq.n	17ff8 <__sfmoreglue+0x28>
   17fe6:	2100      	movs	r1, #0
   17fe8:	002a      	movs	r2, r5
   17fea:	6001      	str	r1, [r0, #0]
   17fec:	6046      	str	r6, [r0, #4]
   17fee:	300c      	adds	r0, #12
   17ff0:	60a0      	str	r0, [r4, #8]
   17ff2:	3268      	adds	r2, #104	; 0x68
   17ff4:	f7ff f9ed 	bl	173d2 <memset>
   17ff8:	0020      	movs	r0, r4
   17ffa:	bd70      	pop	{r4, r5, r6, pc}

00017ffc <__sinit>:
   17ffc:	6983      	ldr	r3, [r0, #24]
   17ffe:	b513      	push	{r0, r1, r4, lr}
   18000:	0004      	movs	r4, r0
   18002:	2b00      	cmp	r3, #0
   18004:	d128      	bne.n	18058 <__sinit+0x5c>
   18006:	6483      	str	r3, [r0, #72]	; 0x48
   18008:	64c3      	str	r3, [r0, #76]	; 0x4c
   1800a:	6503      	str	r3, [r0, #80]	; 0x50
   1800c:	4b13      	ldr	r3, [pc, #76]	; (1805c <__sinit+0x60>)
   1800e:	4a14      	ldr	r2, [pc, #80]	; (18060 <__sinit+0x64>)
   18010:	681b      	ldr	r3, [r3, #0]
   18012:	6282      	str	r2, [r0, #40]	; 0x28
   18014:	9301      	str	r3, [sp, #4]
   18016:	4298      	cmp	r0, r3
   18018:	d101      	bne.n	1801e <__sinit+0x22>
   1801a:	2301      	movs	r3, #1
   1801c:	6183      	str	r3, [r0, #24]
   1801e:	0020      	movs	r0, r4
   18020:	f000 f820 	bl	18064 <__sfp>
   18024:	6060      	str	r0, [r4, #4]
   18026:	0020      	movs	r0, r4
   18028:	f000 f81c 	bl	18064 <__sfp>
   1802c:	60a0      	str	r0, [r4, #8]
   1802e:	0020      	movs	r0, r4
   18030:	f000 f818 	bl	18064 <__sfp>
   18034:	2200      	movs	r2, #0
   18036:	60e0      	str	r0, [r4, #12]
   18038:	2104      	movs	r1, #4
   1803a:	6860      	ldr	r0, [r4, #4]
   1803c:	f7ff ffa4 	bl	17f88 <std.isra.0>
   18040:	2201      	movs	r2, #1
   18042:	2109      	movs	r1, #9
   18044:	68a0      	ldr	r0, [r4, #8]
   18046:	f7ff ff9f 	bl	17f88 <std.isra.0>
   1804a:	2202      	movs	r2, #2
   1804c:	2112      	movs	r1, #18
   1804e:	68e0      	ldr	r0, [r4, #12]
   18050:	f7ff ff9a 	bl	17f88 <std.isra.0>
   18054:	2301      	movs	r3, #1
   18056:	61a3      	str	r3, [r4, #24]
   18058:	bd13      	pop	{r0, r1, r4, pc}
   1805a:	46c0      	nop			; (mov r8, r8)
   1805c:	0001aec0 	.word	0x0001aec0
   18060:	00017f79 	.word	0x00017f79

00018064 <__sfp>:
   18064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18066:	4b1e      	ldr	r3, [pc, #120]	; (180e0 <__sfp+0x7c>)
   18068:	0007      	movs	r7, r0
   1806a:	681e      	ldr	r6, [r3, #0]
   1806c:	69b3      	ldr	r3, [r6, #24]
   1806e:	2b00      	cmp	r3, #0
   18070:	d102      	bne.n	18078 <__sfp+0x14>
   18072:	0030      	movs	r0, r6
   18074:	f7ff ffc2 	bl	17ffc <__sinit>
   18078:	3648      	adds	r6, #72	; 0x48
   1807a:	68b4      	ldr	r4, [r6, #8]
   1807c:	6873      	ldr	r3, [r6, #4]
   1807e:	3b01      	subs	r3, #1
   18080:	d504      	bpl.n	1808c <__sfp+0x28>
   18082:	6833      	ldr	r3, [r6, #0]
   18084:	2b00      	cmp	r3, #0
   18086:	d007      	beq.n	18098 <__sfp+0x34>
   18088:	6836      	ldr	r6, [r6, #0]
   1808a:	e7f6      	b.n	1807a <__sfp+0x16>
   1808c:	220c      	movs	r2, #12
   1808e:	5ea5      	ldrsh	r5, [r4, r2]
   18090:	2d00      	cmp	r5, #0
   18092:	d00d      	beq.n	180b0 <__sfp+0x4c>
   18094:	3468      	adds	r4, #104	; 0x68
   18096:	e7f2      	b.n	1807e <__sfp+0x1a>
   18098:	2104      	movs	r1, #4
   1809a:	0038      	movs	r0, r7
   1809c:	f7ff ff98 	bl	17fd0 <__sfmoreglue>
   180a0:	6030      	str	r0, [r6, #0]
   180a2:	2800      	cmp	r0, #0
   180a4:	d1f0      	bne.n	18088 <__sfp+0x24>
   180a6:	230c      	movs	r3, #12
   180a8:	0004      	movs	r4, r0
   180aa:	603b      	str	r3, [r7, #0]
   180ac:	0020      	movs	r0, r4
   180ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180b0:	2301      	movs	r3, #1
   180b2:	0020      	movs	r0, r4
   180b4:	425b      	negs	r3, r3
   180b6:	81e3      	strh	r3, [r4, #14]
   180b8:	3302      	adds	r3, #2
   180ba:	81a3      	strh	r3, [r4, #12]
   180bc:	6665      	str	r5, [r4, #100]	; 0x64
   180be:	6025      	str	r5, [r4, #0]
   180c0:	60a5      	str	r5, [r4, #8]
   180c2:	6065      	str	r5, [r4, #4]
   180c4:	6125      	str	r5, [r4, #16]
   180c6:	6165      	str	r5, [r4, #20]
   180c8:	61a5      	str	r5, [r4, #24]
   180ca:	2208      	movs	r2, #8
   180cc:	0029      	movs	r1, r5
   180ce:	305c      	adds	r0, #92	; 0x5c
   180d0:	f7ff f97f 	bl	173d2 <memset>
   180d4:	6365      	str	r5, [r4, #52]	; 0x34
   180d6:	63a5      	str	r5, [r4, #56]	; 0x38
   180d8:	64a5      	str	r5, [r4, #72]	; 0x48
   180da:	64e5      	str	r5, [r4, #76]	; 0x4c
   180dc:	e7e6      	b.n	180ac <__sfp+0x48>
   180de:	46c0      	nop			; (mov r8, r8)
   180e0:	0001aec0 	.word	0x0001aec0

000180e4 <_fwalk_reent>:
   180e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   180e6:	0004      	movs	r4, r0
   180e8:	0007      	movs	r7, r0
   180ea:	2600      	movs	r6, #0
   180ec:	9101      	str	r1, [sp, #4]
   180ee:	3448      	adds	r4, #72	; 0x48
   180f0:	2c00      	cmp	r4, #0
   180f2:	d101      	bne.n	180f8 <_fwalk_reent+0x14>
   180f4:	0030      	movs	r0, r6
   180f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   180f8:	6863      	ldr	r3, [r4, #4]
   180fa:	68a5      	ldr	r5, [r4, #8]
   180fc:	9300      	str	r3, [sp, #0]
   180fe:	9b00      	ldr	r3, [sp, #0]
   18100:	3b01      	subs	r3, #1
   18102:	9300      	str	r3, [sp, #0]
   18104:	d501      	bpl.n	1810a <_fwalk_reent+0x26>
   18106:	6824      	ldr	r4, [r4, #0]
   18108:	e7f2      	b.n	180f0 <_fwalk_reent+0xc>
   1810a:	89ab      	ldrh	r3, [r5, #12]
   1810c:	2b01      	cmp	r3, #1
   1810e:	d908      	bls.n	18122 <_fwalk_reent+0x3e>
   18110:	220e      	movs	r2, #14
   18112:	5eab      	ldrsh	r3, [r5, r2]
   18114:	3301      	adds	r3, #1
   18116:	d004      	beq.n	18122 <_fwalk_reent+0x3e>
   18118:	0029      	movs	r1, r5
   1811a:	0038      	movs	r0, r7
   1811c:	9b01      	ldr	r3, [sp, #4]
   1811e:	4798      	blx	r3
   18120:	4306      	orrs	r6, r0
   18122:	3568      	adds	r5, #104	; 0x68
   18124:	e7eb      	b.n	180fe <_fwalk_reent+0x1a>

00018126 <__locale_ctype_ptr_l>:
   18126:	30ec      	adds	r0, #236	; 0xec
   18128:	6800      	ldr	r0, [r0, #0]
   1812a:	4770      	bx	lr

0001812c <__swhatbuf_r>:
   1812c:	b570      	push	{r4, r5, r6, lr}
   1812e:	000e      	movs	r6, r1
   18130:	001d      	movs	r5, r3
   18132:	230e      	movs	r3, #14
   18134:	5ec9      	ldrsh	r1, [r1, r3]
   18136:	b090      	sub	sp, #64	; 0x40
   18138:	0014      	movs	r4, r2
   1813a:	2900      	cmp	r1, #0
   1813c:	da07      	bge.n	1814e <__swhatbuf_r+0x22>
   1813e:	2300      	movs	r3, #0
   18140:	602b      	str	r3, [r5, #0]
   18142:	89b3      	ldrh	r3, [r6, #12]
   18144:	061b      	lsls	r3, r3, #24
   18146:	d411      	bmi.n	1816c <__swhatbuf_r+0x40>
   18148:	2380      	movs	r3, #128	; 0x80
   1814a:	00db      	lsls	r3, r3, #3
   1814c:	e00f      	b.n	1816e <__swhatbuf_r+0x42>
   1814e:	aa01      	add	r2, sp, #4
   18150:	f000 fd52 	bl	18bf8 <_fstat_r>
   18154:	2800      	cmp	r0, #0
   18156:	dbf2      	blt.n	1813e <__swhatbuf_r+0x12>
   18158:	22f0      	movs	r2, #240	; 0xf0
   1815a:	9b02      	ldr	r3, [sp, #8]
   1815c:	0212      	lsls	r2, r2, #8
   1815e:	4013      	ands	r3, r2
   18160:	4a05      	ldr	r2, [pc, #20]	; (18178 <__swhatbuf_r+0x4c>)
   18162:	189b      	adds	r3, r3, r2
   18164:	425a      	negs	r2, r3
   18166:	4153      	adcs	r3, r2
   18168:	602b      	str	r3, [r5, #0]
   1816a:	e7ed      	b.n	18148 <__swhatbuf_r+0x1c>
   1816c:	2340      	movs	r3, #64	; 0x40
   1816e:	2000      	movs	r0, #0
   18170:	6023      	str	r3, [r4, #0]
   18172:	b010      	add	sp, #64	; 0x40
   18174:	bd70      	pop	{r4, r5, r6, pc}
   18176:	46c0      	nop			; (mov r8, r8)
   18178:	ffffe000 	.word	0xffffe000

0001817c <__smakebuf_r>:
   1817c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1817e:	2602      	movs	r6, #2
   18180:	898b      	ldrh	r3, [r1, #12]
   18182:	0005      	movs	r5, r0
   18184:	000c      	movs	r4, r1
   18186:	4233      	tst	r3, r6
   18188:	d006      	beq.n	18198 <__smakebuf_r+0x1c>
   1818a:	0023      	movs	r3, r4
   1818c:	3347      	adds	r3, #71	; 0x47
   1818e:	6023      	str	r3, [r4, #0]
   18190:	6123      	str	r3, [r4, #16]
   18192:	2301      	movs	r3, #1
   18194:	6163      	str	r3, [r4, #20]
   18196:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   18198:	ab01      	add	r3, sp, #4
   1819a:	466a      	mov	r2, sp
   1819c:	f7ff ffc6 	bl	1812c <__swhatbuf_r>
   181a0:	9900      	ldr	r1, [sp, #0]
   181a2:	0007      	movs	r7, r0
   181a4:	0028      	movs	r0, r5
   181a6:	f7ff f967 	bl	17478 <_malloc_r>
   181aa:	2800      	cmp	r0, #0
   181ac:	d108      	bne.n	181c0 <__smakebuf_r+0x44>
   181ae:	220c      	movs	r2, #12
   181b0:	5ea3      	ldrsh	r3, [r4, r2]
   181b2:	059a      	lsls	r2, r3, #22
   181b4:	d4ef      	bmi.n	18196 <__smakebuf_r+0x1a>
   181b6:	2203      	movs	r2, #3
   181b8:	4393      	bics	r3, r2
   181ba:	431e      	orrs	r6, r3
   181bc:	81a6      	strh	r6, [r4, #12]
   181be:	e7e4      	b.n	1818a <__smakebuf_r+0xe>
   181c0:	4b0f      	ldr	r3, [pc, #60]	; (18200 <__smakebuf_r+0x84>)
   181c2:	62ab      	str	r3, [r5, #40]	; 0x28
   181c4:	2380      	movs	r3, #128	; 0x80
   181c6:	89a2      	ldrh	r2, [r4, #12]
   181c8:	6020      	str	r0, [r4, #0]
   181ca:	4313      	orrs	r3, r2
   181cc:	81a3      	strh	r3, [r4, #12]
   181ce:	9b00      	ldr	r3, [sp, #0]
   181d0:	6120      	str	r0, [r4, #16]
   181d2:	6163      	str	r3, [r4, #20]
   181d4:	9b01      	ldr	r3, [sp, #4]
   181d6:	2b00      	cmp	r3, #0
   181d8:	d00d      	beq.n	181f6 <__smakebuf_r+0x7a>
   181da:	230e      	movs	r3, #14
   181dc:	5ee1      	ldrsh	r1, [r4, r3]
   181de:	0028      	movs	r0, r5
   181e0:	f000 fd1c 	bl	18c1c <_isatty_r>
   181e4:	2800      	cmp	r0, #0
   181e6:	d006      	beq.n	181f6 <__smakebuf_r+0x7a>
   181e8:	2203      	movs	r2, #3
   181ea:	89a3      	ldrh	r3, [r4, #12]
   181ec:	4393      	bics	r3, r2
   181ee:	001a      	movs	r2, r3
   181f0:	2301      	movs	r3, #1
   181f2:	4313      	orrs	r3, r2
   181f4:	81a3      	strh	r3, [r4, #12]
   181f6:	89a0      	ldrh	r0, [r4, #12]
   181f8:	4338      	orrs	r0, r7
   181fa:	81a0      	strh	r0, [r4, #12]
   181fc:	e7cb      	b.n	18196 <__smakebuf_r+0x1a>
   181fe:	46c0      	nop			; (mov r8, r8)
   18200:	00017f79 	.word	0x00017f79

00018204 <__ascii_mbtowc>:
   18204:	b082      	sub	sp, #8
   18206:	2900      	cmp	r1, #0
   18208:	d100      	bne.n	1820c <__ascii_mbtowc+0x8>
   1820a:	a901      	add	r1, sp, #4
   1820c:	1e10      	subs	r0, r2, #0
   1820e:	d006      	beq.n	1821e <__ascii_mbtowc+0x1a>
   18210:	2b00      	cmp	r3, #0
   18212:	d006      	beq.n	18222 <__ascii_mbtowc+0x1e>
   18214:	7813      	ldrb	r3, [r2, #0]
   18216:	600b      	str	r3, [r1, #0]
   18218:	7810      	ldrb	r0, [r2, #0]
   1821a:	1e43      	subs	r3, r0, #1
   1821c:	4198      	sbcs	r0, r3
   1821e:	b002      	add	sp, #8
   18220:	4770      	bx	lr
   18222:	2002      	movs	r0, #2
   18224:	4240      	negs	r0, r0
   18226:	e7fa      	b.n	1821e <__ascii_mbtowc+0x1a>

00018228 <__malloc_lock>:
   18228:	4770      	bx	lr

0001822a <__malloc_unlock>:
   1822a:	4770      	bx	lr

0001822c <__ssputs_r>:
   1822c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1822e:	688e      	ldr	r6, [r1, #8]
   18230:	b085      	sub	sp, #20
   18232:	0007      	movs	r7, r0
   18234:	000c      	movs	r4, r1
   18236:	9203      	str	r2, [sp, #12]
   18238:	9301      	str	r3, [sp, #4]
   1823a:	429e      	cmp	r6, r3
   1823c:	d839      	bhi.n	182b2 <__ssputs_r+0x86>
   1823e:	2390      	movs	r3, #144	; 0x90
   18240:	898a      	ldrh	r2, [r1, #12]
   18242:	00db      	lsls	r3, r3, #3
   18244:	421a      	tst	r2, r3
   18246:	d034      	beq.n	182b2 <__ssputs_r+0x86>
   18248:	2503      	movs	r5, #3
   1824a:	6909      	ldr	r1, [r1, #16]
   1824c:	6823      	ldr	r3, [r4, #0]
   1824e:	1a5b      	subs	r3, r3, r1
   18250:	9302      	str	r3, [sp, #8]
   18252:	6963      	ldr	r3, [r4, #20]
   18254:	9802      	ldr	r0, [sp, #8]
   18256:	435d      	muls	r5, r3
   18258:	0feb      	lsrs	r3, r5, #31
   1825a:	195d      	adds	r5, r3, r5
   1825c:	9b01      	ldr	r3, [sp, #4]
   1825e:	106d      	asrs	r5, r5, #1
   18260:	3301      	adds	r3, #1
   18262:	181b      	adds	r3, r3, r0
   18264:	42ab      	cmp	r3, r5
   18266:	d900      	bls.n	1826a <__ssputs_r+0x3e>
   18268:	001d      	movs	r5, r3
   1826a:	0553      	lsls	r3, r2, #21
   1826c:	d532      	bpl.n	182d4 <__ssputs_r+0xa8>
   1826e:	0029      	movs	r1, r5
   18270:	0038      	movs	r0, r7
   18272:	f7ff f901 	bl	17478 <_malloc_r>
   18276:	1e06      	subs	r6, r0, #0
   18278:	d109      	bne.n	1828e <__ssputs_r+0x62>
   1827a:	230c      	movs	r3, #12
   1827c:	603b      	str	r3, [r7, #0]
   1827e:	2340      	movs	r3, #64	; 0x40
   18280:	2001      	movs	r0, #1
   18282:	89a2      	ldrh	r2, [r4, #12]
   18284:	4240      	negs	r0, r0
   18286:	4313      	orrs	r3, r2
   18288:	81a3      	strh	r3, [r4, #12]
   1828a:	b005      	add	sp, #20
   1828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1828e:	9a02      	ldr	r2, [sp, #8]
   18290:	6921      	ldr	r1, [r4, #16]
   18292:	f7ff f883 	bl	1739c <memcpy>
   18296:	89a3      	ldrh	r3, [r4, #12]
   18298:	4a14      	ldr	r2, [pc, #80]	; (182ec <__ssputs_r+0xc0>)
   1829a:	401a      	ands	r2, r3
   1829c:	2380      	movs	r3, #128	; 0x80
   1829e:	4313      	orrs	r3, r2
   182a0:	81a3      	strh	r3, [r4, #12]
   182a2:	9b02      	ldr	r3, [sp, #8]
   182a4:	6126      	str	r6, [r4, #16]
   182a6:	18f6      	adds	r6, r6, r3
   182a8:	6026      	str	r6, [r4, #0]
   182aa:	6165      	str	r5, [r4, #20]
   182ac:	9e01      	ldr	r6, [sp, #4]
   182ae:	1aed      	subs	r5, r5, r3
   182b0:	60a5      	str	r5, [r4, #8]
   182b2:	9b01      	ldr	r3, [sp, #4]
   182b4:	42b3      	cmp	r3, r6
   182b6:	d200      	bcs.n	182ba <__ssputs_r+0x8e>
   182b8:	001e      	movs	r6, r3
   182ba:	0032      	movs	r2, r6
   182bc:	9903      	ldr	r1, [sp, #12]
   182be:	6820      	ldr	r0, [r4, #0]
   182c0:	f7ff f875 	bl	173ae <memmove>
   182c4:	68a3      	ldr	r3, [r4, #8]
   182c6:	2000      	movs	r0, #0
   182c8:	1b9b      	subs	r3, r3, r6
   182ca:	60a3      	str	r3, [r4, #8]
   182cc:	6823      	ldr	r3, [r4, #0]
   182ce:	199e      	adds	r6, r3, r6
   182d0:	6026      	str	r6, [r4, #0]
   182d2:	e7da      	b.n	1828a <__ssputs_r+0x5e>
   182d4:	002a      	movs	r2, r5
   182d6:	0038      	movs	r0, r7
   182d8:	f000 fcd1 	bl	18c7e <_realloc_r>
   182dc:	1e06      	subs	r6, r0, #0
   182de:	d1e0      	bne.n	182a2 <__ssputs_r+0x76>
   182e0:	6921      	ldr	r1, [r4, #16]
   182e2:	0038      	movs	r0, r7
   182e4:	f7ff f87e 	bl	173e4 <_free_r>
   182e8:	e7c7      	b.n	1827a <__ssputs_r+0x4e>
   182ea:	46c0      	nop			; (mov r8, r8)
   182ec:	fffffb7f 	.word	0xfffffb7f

000182f0 <_svfiprintf_r>:
   182f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   182f2:	b09f      	sub	sp, #124	; 0x7c
   182f4:	9002      	str	r0, [sp, #8]
   182f6:	9305      	str	r3, [sp, #20]
   182f8:	898b      	ldrh	r3, [r1, #12]
   182fa:	000f      	movs	r7, r1
   182fc:	0016      	movs	r6, r2
   182fe:	061b      	lsls	r3, r3, #24
   18300:	d511      	bpl.n	18326 <_svfiprintf_r+0x36>
   18302:	690b      	ldr	r3, [r1, #16]
   18304:	2b00      	cmp	r3, #0
   18306:	d10e      	bne.n	18326 <_svfiprintf_r+0x36>
   18308:	2140      	movs	r1, #64	; 0x40
   1830a:	f7ff f8b5 	bl	17478 <_malloc_r>
   1830e:	6038      	str	r0, [r7, #0]
   18310:	6138      	str	r0, [r7, #16]
   18312:	2800      	cmp	r0, #0
   18314:	d105      	bne.n	18322 <_svfiprintf_r+0x32>
   18316:	230c      	movs	r3, #12
   18318:	9a02      	ldr	r2, [sp, #8]
   1831a:	3801      	subs	r0, #1
   1831c:	6013      	str	r3, [r2, #0]
   1831e:	b01f      	add	sp, #124	; 0x7c
   18320:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18322:	2340      	movs	r3, #64	; 0x40
   18324:	617b      	str	r3, [r7, #20]
   18326:	2300      	movs	r3, #0
   18328:	ad06      	add	r5, sp, #24
   1832a:	616b      	str	r3, [r5, #20]
   1832c:	3320      	adds	r3, #32
   1832e:	766b      	strb	r3, [r5, #25]
   18330:	3310      	adds	r3, #16
   18332:	76ab      	strb	r3, [r5, #26]
   18334:	0034      	movs	r4, r6
   18336:	7823      	ldrb	r3, [r4, #0]
   18338:	2b00      	cmp	r3, #0
   1833a:	d147      	bne.n	183cc <_svfiprintf_r+0xdc>
   1833c:	1ba3      	subs	r3, r4, r6
   1833e:	9304      	str	r3, [sp, #16]
   18340:	d00d      	beq.n	1835e <_svfiprintf_r+0x6e>
   18342:	1ba3      	subs	r3, r4, r6
   18344:	0032      	movs	r2, r6
   18346:	0039      	movs	r1, r7
   18348:	9802      	ldr	r0, [sp, #8]
   1834a:	f7ff ff6f 	bl	1822c <__ssputs_r>
   1834e:	1c43      	adds	r3, r0, #1
   18350:	d100      	bne.n	18354 <_svfiprintf_r+0x64>
   18352:	e0b5      	b.n	184c0 <_svfiprintf_r+0x1d0>
   18354:	696a      	ldr	r2, [r5, #20]
   18356:	9b04      	ldr	r3, [sp, #16]
   18358:	4694      	mov	ip, r2
   1835a:	4463      	add	r3, ip
   1835c:	616b      	str	r3, [r5, #20]
   1835e:	7823      	ldrb	r3, [r4, #0]
   18360:	2b00      	cmp	r3, #0
   18362:	d100      	bne.n	18366 <_svfiprintf_r+0x76>
   18364:	e0ac      	b.n	184c0 <_svfiprintf_r+0x1d0>
   18366:	2201      	movs	r2, #1
   18368:	2300      	movs	r3, #0
   1836a:	4252      	negs	r2, r2
   1836c:	606a      	str	r2, [r5, #4]
   1836e:	a902      	add	r1, sp, #8
   18370:	3254      	adds	r2, #84	; 0x54
   18372:	1852      	adds	r2, r2, r1
   18374:	3401      	adds	r4, #1
   18376:	602b      	str	r3, [r5, #0]
   18378:	60eb      	str	r3, [r5, #12]
   1837a:	60ab      	str	r3, [r5, #8]
   1837c:	7013      	strb	r3, [r2, #0]
   1837e:	65ab      	str	r3, [r5, #88]	; 0x58
   18380:	4e58      	ldr	r6, [pc, #352]	; (184e4 <_svfiprintf_r+0x1f4>)
   18382:	2205      	movs	r2, #5
   18384:	7821      	ldrb	r1, [r4, #0]
   18386:	0030      	movs	r0, r6
   18388:	f000 fc6e 	bl	18c68 <memchr>
   1838c:	1c62      	adds	r2, r4, #1
   1838e:	2800      	cmp	r0, #0
   18390:	d120      	bne.n	183d4 <_svfiprintf_r+0xe4>
   18392:	6829      	ldr	r1, [r5, #0]
   18394:	06cb      	lsls	r3, r1, #27
   18396:	d504      	bpl.n	183a2 <_svfiprintf_r+0xb2>
   18398:	2353      	movs	r3, #83	; 0x53
   1839a:	ae02      	add	r6, sp, #8
   1839c:	3020      	adds	r0, #32
   1839e:	199b      	adds	r3, r3, r6
   183a0:	7018      	strb	r0, [r3, #0]
   183a2:	070b      	lsls	r3, r1, #28
   183a4:	d504      	bpl.n	183b0 <_svfiprintf_r+0xc0>
   183a6:	2353      	movs	r3, #83	; 0x53
   183a8:	202b      	movs	r0, #43	; 0x2b
   183aa:	ae02      	add	r6, sp, #8
   183ac:	199b      	adds	r3, r3, r6
   183ae:	7018      	strb	r0, [r3, #0]
   183b0:	7823      	ldrb	r3, [r4, #0]
   183b2:	2b2a      	cmp	r3, #42	; 0x2a
   183b4:	d016      	beq.n	183e4 <_svfiprintf_r+0xf4>
   183b6:	2000      	movs	r0, #0
   183b8:	210a      	movs	r1, #10
   183ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183bc:	7822      	ldrb	r2, [r4, #0]
   183be:	3a30      	subs	r2, #48	; 0x30
   183c0:	2a09      	cmp	r2, #9
   183c2:	d955      	bls.n	18470 <_svfiprintf_r+0x180>
   183c4:	2800      	cmp	r0, #0
   183c6:	d015      	beq.n	183f4 <_svfiprintf_r+0x104>
   183c8:	9309      	str	r3, [sp, #36]	; 0x24
   183ca:	e013      	b.n	183f4 <_svfiprintf_r+0x104>
   183cc:	2b25      	cmp	r3, #37	; 0x25
   183ce:	d0b5      	beq.n	1833c <_svfiprintf_r+0x4c>
   183d0:	3401      	adds	r4, #1
   183d2:	e7b0      	b.n	18336 <_svfiprintf_r+0x46>
   183d4:	2301      	movs	r3, #1
   183d6:	1b80      	subs	r0, r0, r6
   183d8:	4083      	lsls	r3, r0
   183da:	6829      	ldr	r1, [r5, #0]
   183dc:	0014      	movs	r4, r2
   183de:	430b      	orrs	r3, r1
   183e0:	602b      	str	r3, [r5, #0]
   183e2:	e7cd      	b.n	18380 <_svfiprintf_r+0x90>
   183e4:	9b05      	ldr	r3, [sp, #20]
   183e6:	1d18      	adds	r0, r3, #4
   183e8:	681b      	ldr	r3, [r3, #0]
   183ea:	9005      	str	r0, [sp, #20]
   183ec:	2b00      	cmp	r3, #0
   183ee:	db39      	blt.n	18464 <_svfiprintf_r+0x174>
   183f0:	9309      	str	r3, [sp, #36]	; 0x24
   183f2:	0014      	movs	r4, r2
   183f4:	7823      	ldrb	r3, [r4, #0]
   183f6:	2b2e      	cmp	r3, #46	; 0x2e
   183f8:	d10b      	bne.n	18412 <_svfiprintf_r+0x122>
   183fa:	7863      	ldrb	r3, [r4, #1]
   183fc:	1c62      	adds	r2, r4, #1
   183fe:	2b2a      	cmp	r3, #42	; 0x2a
   18400:	d13e      	bne.n	18480 <_svfiprintf_r+0x190>
   18402:	9b05      	ldr	r3, [sp, #20]
   18404:	3402      	adds	r4, #2
   18406:	1d1a      	adds	r2, r3, #4
   18408:	681b      	ldr	r3, [r3, #0]
   1840a:	9205      	str	r2, [sp, #20]
   1840c:	2b00      	cmp	r3, #0
   1840e:	db34      	blt.n	1847a <_svfiprintf_r+0x18a>
   18410:	9307      	str	r3, [sp, #28]
   18412:	4e35      	ldr	r6, [pc, #212]	; (184e8 <_svfiprintf_r+0x1f8>)
   18414:	7821      	ldrb	r1, [r4, #0]
   18416:	2203      	movs	r2, #3
   18418:	0030      	movs	r0, r6
   1841a:	f000 fc25 	bl	18c68 <memchr>
   1841e:	2800      	cmp	r0, #0
   18420:	d006      	beq.n	18430 <_svfiprintf_r+0x140>
   18422:	2340      	movs	r3, #64	; 0x40
   18424:	1b80      	subs	r0, r0, r6
   18426:	4083      	lsls	r3, r0
   18428:	682a      	ldr	r2, [r5, #0]
   1842a:	3401      	adds	r4, #1
   1842c:	4313      	orrs	r3, r2
   1842e:	602b      	str	r3, [r5, #0]
   18430:	7821      	ldrb	r1, [r4, #0]
   18432:	2206      	movs	r2, #6
   18434:	482d      	ldr	r0, [pc, #180]	; (184ec <_svfiprintf_r+0x1fc>)
   18436:	1c66      	adds	r6, r4, #1
   18438:	7629      	strb	r1, [r5, #24]
   1843a:	f000 fc15 	bl	18c68 <memchr>
   1843e:	2800      	cmp	r0, #0
   18440:	d046      	beq.n	184d0 <_svfiprintf_r+0x1e0>
   18442:	4b2b      	ldr	r3, [pc, #172]	; (184f0 <_svfiprintf_r+0x200>)
   18444:	2b00      	cmp	r3, #0
   18446:	d12f      	bne.n	184a8 <_svfiprintf_r+0x1b8>
   18448:	6829      	ldr	r1, [r5, #0]
   1844a:	9b05      	ldr	r3, [sp, #20]
   1844c:	2207      	movs	r2, #7
   1844e:	05c9      	lsls	r1, r1, #23
   18450:	d528      	bpl.n	184a4 <_svfiprintf_r+0x1b4>
   18452:	189b      	adds	r3, r3, r2
   18454:	4393      	bics	r3, r2
   18456:	3308      	adds	r3, #8
   18458:	9305      	str	r3, [sp, #20]
   1845a:	696b      	ldr	r3, [r5, #20]
   1845c:	9a03      	ldr	r2, [sp, #12]
   1845e:	189b      	adds	r3, r3, r2
   18460:	616b      	str	r3, [r5, #20]
   18462:	e767      	b.n	18334 <_svfiprintf_r+0x44>
   18464:	425b      	negs	r3, r3
   18466:	60eb      	str	r3, [r5, #12]
   18468:	2302      	movs	r3, #2
   1846a:	430b      	orrs	r3, r1
   1846c:	602b      	str	r3, [r5, #0]
   1846e:	e7c0      	b.n	183f2 <_svfiprintf_r+0x102>
   18470:	434b      	muls	r3, r1
   18472:	3401      	adds	r4, #1
   18474:	189b      	adds	r3, r3, r2
   18476:	2001      	movs	r0, #1
   18478:	e7a0      	b.n	183bc <_svfiprintf_r+0xcc>
   1847a:	2301      	movs	r3, #1
   1847c:	425b      	negs	r3, r3
   1847e:	e7c7      	b.n	18410 <_svfiprintf_r+0x120>
   18480:	2300      	movs	r3, #0
   18482:	0014      	movs	r4, r2
   18484:	200a      	movs	r0, #10
   18486:	001a      	movs	r2, r3
   18488:	606b      	str	r3, [r5, #4]
   1848a:	7821      	ldrb	r1, [r4, #0]
   1848c:	3930      	subs	r1, #48	; 0x30
   1848e:	2909      	cmp	r1, #9
   18490:	d903      	bls.n	1849a <_svfiprintf_r+0x1aa>
   18492:	2b00      	cmp	r3, #0
   18494:	d0bd      	beq.n	18412 <_svfiprintf_r+0x122>
   18496:	9207      	str	r2, [sp, #28]
   18498:	e7bb      	b.n	18412 <_svfiprintf_r+0x122>
   1849a:	4342      	muls	r2, r0
   1849c:	3401      	adds	r4, #1
   1849e:	1852      	adds	r2, r2, r1
   184a0:	2301      	movs	r3, #1
   184a2:	e7f2      	b.n	1848a <_svfiprintf_r+0x19a>
   184a4:	3307      	adds	r3, #7
   184a6:	e7d5      	b.n	18454 <_svfiprintf_r+0x164>
   184a8:	ab05      	add	r3, sp, #20
   184aa:	9300      	str	r3, [sp, #0]
   184ac:	003a      	movs	r2, r7
   184ae:	4b11      	ldr	r3, [pc, #68]	; (184f4 <_svfiprintf_r+0x204>)
   184b0:	0029      	movs	r1, r5
   184b2:	9802      	ldr	r0, [sp, #8]
   184b4:	e000      	b.n	184b8 <_svfiprintf_r+0x1c8>
   184b6:	bf00      	nop
   184b8:	9003      	str	r0, [sp, #12]
   184ba:	9b03      	ldr	r3, [sp, #12]
   184bc:	3301      	adds	r3, #1
   184be:	d1cc      	bne.n	1845a <_svfiprintf_r+0x16a>
   184c0:	89bb      	ldrh	r3, [r7, #12]
   184c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   184c4:	065b      	lsls	r3, r3, #25
   184c6:	d400      	bmi.n	184ca <_svfiprintf_r+0x1da>
   184c8:	e729      	b.n	1831e <_svfiprintf_r+0x2e>
   184ca:	2001      	movs	r0, #1
   184cc:	4240      	negs	r0, r0
   184ce:	e726      	b.n	1831e <_svfiprintf_r+0x2e>
   184d0:	ab05      	add	r3, sp, #20
   184d2:	9300      	str	r3, [sp, #0]
   184d4:	003a      	movs	r2, r7
   184d6:	4b07      	ldr	r3, [pc, #28]	; (184f4 <_svfiprintf_r+0x204>)
   184d8:	0029      	movs	r1, r5
   184da:	9802      	ldr	r0, [sp, #8]
   184dc:	f000 f9be 	bl	1885c <_printf_i>
   184e0:	e7ea      	b.n	184b8 <_svfiprintf_r+0x1c8>
   184e2:	46c0      	nop			; (mov r8, r8)
   184e4:	0001af2e 	.word	0x0001af2e
   184e8:	0001af34 	.word	0x0001af34
   184ec:	0001af38 	.word	0x0001af38
   184f0:	00000000 	.word	0x00000000
   184f4:	0001822d 	.word	0x0001822d

000184f8 <__sfputc_r>:
   184f8:	6893      	ldr	r3, [r2, #8]
   184fa:	b510      	push	{r4, lr}
   184fc:	3b01      	subs	r3, #1
   184fe:	6093      	str	r3, [r2, #8]
   18500:	2b00      	cmp	r3, #0
   18502:	da05      	bge.n	18510 <__sfputc_r+0x18>
   18504:	6994      	ldr	r4, [r2, #24]
   18506:	42a3      	cmp	r3, r4
   18508:	db08      	blt.n	1851c <__sfputc_r+0x24>
   1850a:	b2cb      	uxtb	r3, r1
   1850c:	2b0a      	cmp	r3, #10
   1850e:	d005      	beq.n	1851c <__sfputc_r+0x24>
   18510:	6813      	ldr	r3, [r2, #0]
   18512:	1c58      	adds	r0, r3, #1
   18514:	6010      	str	r0, [r2, #0]
   18516:	7019      	strb	r1, [r3, #0]
   18518:	b2c8      	uxtb	r0, r1
   1851a:	bd10      	pop	{r4, pc}
   1851c:	f7ff fbaa 	bl	17c74 <__swbuf_r>
   18520:	e7fb      	b.n	1851a <__sfputc_r+0x22>

00018522 <__sfputs_r>:
   18522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18524:	0006      	movs	r6, r0
   18526:	000f      	movs	r7, r1
   18528:	0014      	movs	r4, r2
   1852a:	18d5      	adds	r5, r2, r3
   1852c:	42ac      	cmp	r4, r5
   1852e:	d101      	bne.n	18534 <__sfputs_r+0x12>
   18530:	2000      	movs	r0, #0
   18532:	e007      	b.n	18544 <__sfputs_r+0x22>
   18534:	7821      	ldrb	r1, [r4, #0]
   18536:	003a      	movs	r2, r7
   18538:	0030      	movs	r0, r6
   1853a:	f7ff ffdd 	bl	184f8 <__sfputc_r>
   1853e:	3401      	adds	r4, #1
   18540:	1c43      	adds	r3, r0, #1
   18542:	d1f3      	bne.n	1852c <__sfputs_r+0xa>
   18544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018548 <_vfiprintf_r>:
   18548:	b5f0      	push	{r4, r5, r6, r7, lr}
   1854a:	b09f      	sub	sp, #124	; 0x7c
   1854c:	0006      	movs	r6, r0
   1854e:	000f      	movs	r7, r1
   18550:	0014      	movs	r4, r2
   18552:	9305      	str	r3, [sp, #20]
   18554:	2800      	cmp	r0, #0
   18556:	d004      	beq.n	18562 <_vfiprintf_r+0x1a>
   18558:	6983      	ldr	r3, [r0, #24]
   1855a:	2b00      	cmp	r3, #0
   1855c:	d101      	bne.n	18562 <_vfiprintf_r+0x1a>
   1855e:	f7ff fd4d 	bl	17ffc <__sinit>
   18562:	4b7f      	ldr	r3, [pc, #508]	; (18760 <_vfiprintf_r+0x218>)
   18564:	429f      	cmp	r7, r3
   18566:	d15c      	bne.n	18622 <_vfiprintf_r+0xda>
   18568:	6877      	ldr	r7, [r6, #4]
   1856a:	89bb      	ldrh	r3, [r7, #12]
   1856c:	071b      	lsls	r3, r3, #28
   1856e:	d562      	bpl.n	18636 <_vfiprintf_r+0xee>
   18570:	693b      	ldr	r3, [r7, #16]
   18572:	2b00      	cmp	r3, #0
   18574:	d05f      	beq.n	18636 <_vfiprintf_r+0xee>
   18576:	2300      	movs	r3, #0
   18578:	ad06      	add	r5, sp, #24
   1857a:	616b      	str	r3, [r5, #20]
   1857c:	3320      	adds	r3, #32
   1857e:	766b      	strb	r3, [r5, #25]
   18580:	3310      	adds	r3, #16
   18582:	76ab      	strb	r3, [r5, #26]
   18584:	9402      	str	r4, [sp, #8]
   18586:	9c02      	ldr	r4, [sp, #8]
   18588:	7823      	ldrb	r3, [r4, #0]
   1858a:	2b00      	cmp	r3, #0
   1858c:	d15d      	bne.n	1864a <_vfiprintf_r+0x102>
   1858e:	9b02      	ldr	r3, [sp, #8]
   18590:	1ae3      	subs	r3, r4, r3
   18592:	9304      	str	r3, [sp, #16]
   18594:	d00d      	beq.n	185b2 <_vfiprintf_r+0x6a>
   18596:	9b04      	ldr	r3, [sp, #16]
   18598:	9a02      	ldr	r2, [sp, #8]
   1859a:	0039      	movs	r1, r7
   1859c:	0030      	movs	r0, r6
   1859e:	f7ff ffc0 	bl	18522 <__sfputs_r>
   185a2:	1c43      	adds	r3, r0, #1
   185a4:	d100      	bne.n	185a8 <_vfiprintf_r+0x60>
   185a6:	e0cc      	b.n	18742 <_vfiprintf_r+0x1fa>
   185a8:	696a      	ldr	r2, [r5, #20]
   185aa:	9b04      	ldr	r3, [sp, #16]
   185ac:	4694      	mov	ip, r2
   185ae:	4463      	add	r3, ip
   185b0:	616b      	str	r3, [r5, #20]
   185b2:	7823      	ldrb	r3, [r4, #0]
   185b4:	2b00      	cmp	r3, #0
   185b6:	d100      	bne.n	185ba <_vfiprintf_r+0x72>
   185b8:	e0c3      	b.n	18742 <_vfiprintf_r+0x1fa>
   185ba:	2201      	movs	r2, #1
   185bc:	2300      	movs	r3, #0
   185be:	4252      	negs	r2, r2
   185c0:	606a      	str	r2, [r5, #4]
   185c2:	a902      	add	r1, sp, #8
   185c4:	3254      	adds	r2, #84	; 0x54
   185c6:	1852      	adds	r2, r2, r1
   185c8:	3401      	adds	r4, #1
   185ca:	602b      	str	r3, [r5, #0]
   185cc:	60eb      	str	r3, [r5, #12]
   185ce:	60ab      	str	r3, [r5, #8]
   185d0:	7013      	strb	r3, [r2, #0]
   185d2:	65ab      	str	r3, [r5, #88]	; 0x58
   185d4:	7821      	ldrb	r1, [r4, #0]
   185d6:	2205      	movs	r2, #5
   185d8:	4862      	ldr	r0, [pc, #392]	; (18764 <_vfiprintf_r+0x21c>)
   185da:	f000 fb45 	bl	18c68 <memchr>
   185de:	1c63      	adds	r3, r4, #1
   185e0:	469c      	mov	ip, r3
   185e2:	2800      	cmp	r0, #0
   185e4:	d135      	bne.n	18652 <_vfiprintf_r+0x10a>
   185e6:	6829      	ldr	r1, [r5, #0]
   185e8:	06cb      	lsls	r3, r1, #27
   185ea:	d504      	bpl.n	185f6 <_vfiprintf_r+0xae>
   185ec:	2353      	movs	r3, #83	; 0x53
   185ee:	aa02      	add	r2, sp, #8
   185f0:	3020      	adds	r0, #32
   185f2:	189b      	adds	r3, r3, r2
   185f4:	7018      	strb	r0, [r3, #0]
   185f6:	070b      	lsls	r3, r1, #28
   185f8:	d504      	bpl.n	18604 <_vfiprintf_r+0xbc>
   185fa:	2353      	movs	r3, #83	; 0x53
   185fc:	202b      	movs	r0, #43	; 0x2b
   185fe:	aa02      	add	r2, sp, #8
   18600:	189b      	adds	r3, r3, r2
   18602:	7018      	strb	r0, [r3, #0]
   18604:	7823      	ldrb	r3, [r4, #0]
   18606:	2b2a      	cmp	r3, #42	; 0x2a
   18608:	d02c      	beq.n	18664 <_vfiprintf_r+0x11c>
   1860a:	2000      	movs	r0, #0
   1860c:	210a      	movs	r1, #10
   1860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18610:	7822      	ldrb	r2, [r4, #0]
   18612:	3a30      	subs	r2, #48	; 0x30
   18614:	2a09      	cmp	r2, #9
   18616:	d800      	bhi.n	1861a <_vfiprintf_r+0xd2>
   18618:	e06b      	b.n	186f2 <_vfiprintf_r+0x1aa>
   1861a:	2800      	cmp	r0, #0
   1861c:	d02a      	beq.n	18674 <_vfiprintf_r+0x12c>
   1861e:	9309      	str	r3, [sp, #36]	; 0x24
   18620:	e028      	b.n	18674 <_vfiprintf_r+0x12c>
   18622:	4b51      	ldr	r3, [pc, #324]	; (18768 <_vfiprintf_r+0x220>)
   18624:	429f      	cmp	r7, r3
   18626:	d101      	bne.n	1862c <_vfiprintf_r+0xe4>
   18628:	68b7      	ldr	r7, [r6, #8]
   1862a:	e79e      	b.n	1856a <_vfiprintf_r+0x22>
   1862c:	4b4f      	ldr	r3, [pc, #316]	; (1876c <_vfiprintf_r+0x224>)
   1862e:	429f      	cmp	r7, r3
   18630:	d19b      	bne.n	1856a <_vfiprintf_r+0x22>
   18632:	68f7      	ldr	r7, [r6, #12]
   18634:	e799      	b.n	1856a <_vfiprintf_r+0x22>
   18636:	0039      	movs	r1, r7
   18638:	0030      	movs	r0, r6
   1863a:	f7ff fb71 	bl	17d20 <__swsetup_r>
   1863e:	2800      	cmp	r0, #0
   18640:	d099      	beq.n	18576 <_vfiprintf_r+0x2e>
   18642:	2001      	movs	r0, #1
   18644:	4240      	negs	r0, r0
   18646:	b01f      	add	sp, #124	; 0x7c
   18648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1864a:	2b25      	cmp	r3, #37	; 0x25
   1864c:	d09f      	beq.n	1858e <_vfiprintf_r+0x46>
   1864e:	3401      	adds	r4, #1
   18650:	e79a      	b.n	18588 <_vfiprintf_r+0x40>
   18652:	4b44      	ldr	r3, [pc, #272]	; (18764 <_vfiprintf_r+0x21c>)
   18654:	6829      	ldr	r1, [r5, #0]
   18656:	1ac0      	subs	r0, r0, r3
   18658:	2301      	movs	r3, #1
   1865a:	4083      	lsls	r3, r0
   1865c:	430b      	orrs	r3, r1
   1865e:	602b      	str	r3, [r5, #0]
   18660:	4664      	mov	r4, ip
   18662:	e7b7      	b.n	185d4 <_vfiprintf_r+0x8c>
   18664:	9b05      	ldr	r3, [sp, #20]
   18666:	1d18      	adds	r0, r3, #4
   18668:	681b      	ldr	r3, [r3, #0]
   1866a:	9005      	str	r0, [sp, #20]
   1866c:	2b00      	cmp	r3, #0
   1866e:	db3a      	blt.n	186e6 <_vfiprintf_r+0x19e>
   18670:	9309      	str	r3, [sp, #36]	; 0x24
   18672:	4664      	mov	r4, ip
   18674:	7823      	ldrb	r3, [r4, #0]
   18676:	2b2e      	cmp	r3, #46	; 0x2e
   18678:	d10b      	bne.n	18692 <_vfiprintf_r+0x14a>
   1867a:	7863      	ldrb	r3, [r4, #1]
   1867c:	1c62      	adds	r2, r4, #1
   1867e:	2b2a      	cmp	r3, #42	; 0x2a
   18680:	d13f      	bne.n	18702 <_vfiprintf_r+0x1ba>
   18682:	9b05      	ldr	r3, [sp, #20]
   18684:	3402      	adds	r4, #2
   18686:	1d1a      	adds	r2, r3, #4
   18688:	681b      	ldr	r3, [r3, #0]
   1868a:	9205      	str	r2, [sp, #20]
   1868c:	2b00      	cmp	r3, #0
   1868e:	db35      	blt.n	186fc <_vfiprintf_r+0x1b4>
   18690:	9307      	str	r3, [sp, #28]
   18692:	7821      	ldrb	r1, [r4, #0]
   18694:	2203      	movs	r2, #3
   18696:	4836      	ldr	r0, [pc, #216]	; (18770 <_vfiprintf_r+0x228>)
   18698:	f000 fae6 	bl	18c68 <memchr>
   1869c:	2800      	cmp	r0, #0
   1869e:	d007      	beq.n	186b0 <_vfiprintf_r+0x168>
   186a0:	4b33      	ldr	r3, [pc, #204]	; (18770 <_vfiprintf_r+0x228>)
   186a2:	682a      	ldr	r2, [r5, #0]
   186a4:	1ac0      	subs	r0, r0, r3
   186a6:	2340      	movs	r3, #64	; 0x40
   186a8:	4083      	lsls	r3, r0
   186aa:	4313      	orrs	r3, r2
   186ac:	602b      	str	r3, [r5, #0]
   186ae:	3401      	adds	r4, #1
   186b0:	7821      	ldrb	r1, [r4, #0]
   186b2:	1c63      	adds	r3, r4, #1
   186b4:	2206      	movs	r2, #6
   186b6:	482f      	ldr	r0, [pc, #188]	; (18774 <_vfiprintf_r+0x22c>)
   186b8:	9302      	str	r3, [sp, #8]
   186ba:	7629      	strb	r1, [r5, #24]
   186bc:	f000 fad4 	bl	18c68 <memchr>
   186c0:	2800      	cmp	r0, #0
   186c2:	d044      	beq.n	1874e <_vfiprintf_r+0x206>
   186c4:	4b2c      	ldr	r3, [pc, #176]	; (18778 <_vfiprintf_r+0x230>)
   186c6:	2b00      	cmp	r3, #0
   186c8:	d12f      	bne.n	1872a <_vfiprintf_r+0x1e2>
   186ca:	6829      	ldr	r1, [r5, #0]
   186cc:	9b05      	ldr	r3, [sp, #20]
   186ce:	2207      	movs	r2, #7
   186d0:	05c9      	lsls	r1, r1, #23
   186d2:	d528      	bpl.n	18726 <_vfiprintf_r+0x1de>
   186d4:	189b      	adds	r3, r3, r2
   186d6:	4393      	bics	r3, r2
   186d8:	3308      	adds	r3, #8
   186da:	9305      	str	r3, [sp, #20]
   186dc:	696b      	ldr	r3, [r5, #20]
   186de:	9a03      	ldr	r2, [sp, #12]
   186e0:	189b      	adds	r3, r3, r2
   186e2:	616b      	str	r3, [r5, #20]
   186e4:	e74f      	b.n	18586 <_vfiprintf_r+0x3e>
   186e6:	425b      	negs	r3, r3
   186e8:	60eb      	str	r3, [r5, #12]
   186ea:	2302      	movs	r3, #2
   186ec:	430b      	orrs	r3, r1
   186ee:	602b      	str	r3, [r5, #0]
   186f0:	e7bf      	b.n	18672 <_vfiprintf_r+0x12a>
   186f2:	434b      	muls	r3, r1
   186f4:	3401      	adds	r4, #1
   186f6:	189b      	adds	r3, r3, r2
   186f8:	2001      	movs	r0, #1
   186fa:	e789      	b.n	18610 <_vfiprintf_r+0xc8>
   186fc:	2301      	movs	r3, #1
   186fe:	425b      	negs	r3, r3
   18700:	e7c6      	b.n	18690 <_vfiprintf_r+0x148>
   18702:	2300      	movs	r3, #0
   18704:	0014      	movs	r4, r2
   18706:	200a      	movs	r0, #10
   18708:	001a      	movs	r2, r3
   1870a:	606b      	str	r3, [r5, #4]
   1870c:	7821      	ldrb	r1, [r4, #0]
   1870e:	3930      	subs	r1, #48	; 0x30
   18710:	2909      	cmp	r1, #9
   18712:	d903      	bls.n	1871c <_vfiprintf_r+0x1d4>
   18714:	2b00      	cmp	r3, #0
   18716:	d0bc      	beq.n	18692 <_vfiprintf_r+0x14a>
   18718:	9207      	str	r2, [sp, #28]
   1871a:	e7ba      	b.n	18692 <_vfiprintf_r+0x14a>
   1871c:	4342      	muls	r2, r0
   1871e:	3401      	adds	r4, #1
   18720:	1852      	adds	r2, r2, r1
   18722:	2301      	movs	r3, #1
   18724:	e7f2      	b.n	1870c <_vfiprintf_r+0x1c4>
   18726:	3307      	adds	r3, #7
   18728:	e7d5      	b.n	186d6 <_vfiprintf_r+0x18e>
   1872a:	ab05      	add	r3, sp, #20
   1872c:	9300      	str	r3, [sp, #0]
   1872e:	003a      	movs	r2, r7
   18730:	4b12      	ldr	r3, [pc, #72]	; (1877c <_vfiprintf_r+0x234>)
   18732:	0029      	movs	r1, r5
   18734:	0030      	movs	r0, r6
   18736:	e000      	b.n	1873a <_vfiprintf_r+0x1f2>
   18738:	bf00      	nop
   1873a:	9003      	str	r0, [sp, #12]
   1873c:	9b03      	ldr	r3, [sp, #12]
   1873e:	3301      	adds	r3, #1
   18740:	d1cc      	bne.n	186dc <_vfiprintf_r+0x194>
   18742:	89bb      	ldrh	r3, [r7, #12]
   18744:	065b      	lsls	r3, r3, #25
   18746:	d500      	bpl.n	1874a <_vfiprintf_r+0x202>
   18748:	e77b      	b.n	18642 <_vfiprintf_r+0xfa>
   1874a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1874c:	e77b      	b.n	18646 <_vfiprintf_r+0xfe>
   1874e:	ab05      	add	r3, sp, #20
   18750:	9300      	str	r3, [sp, #0]
   18752:	003a      	movs	r2, r7
   18754:	4b09      	ldr	r3, [pc, #36]	; (1877c <_vfiprintf_r+0x234>)
   18756:	0029      	movs	r1, r5
   18758:	0030      	movs	r0, r6
   1875a:	f000 f87f 	bl	1885c <_printf_i>
   1875e:	e7ec      	b.n	1873a <_vfiprintf_r+0x1f2>
   18760:	0001aee4 	.word	0x0001aee4
   18764:	0001af2e 	.word	0x0001af2e
   18768:	0001af04 	.word	0x0001af04
   1876c:	0001aec4 	.word	0x0001aec4
   18770:	0001af34 	.word	0x0001af34
   18774:	0001af38 	.word	0x0001af38
   18778:	00000000 	.word	0x00000000
   1877c:	00018523 	.word	0x00018523

00018780 <_printf_common>:
   18780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18782:	0015      	movs	r5, r2
   18784:	9301      	str	r3, [sp, #4]
   18786:	688a      	ldr	r2, [r1, #8]
   18788:	690b      	ldr	r3, [r1, #16]
   1878a:	9000      	str	r0, [sp, #0]
   1878c:	000c      	movs	r4, r1
   1878e:	4293      	cmp	r3, r2
   18790:	da00      	bge.n	18794 <_printf_common+0x14>
   18792:	0013      	movs	r3, r2
   18794:	0022      	movs	r2, r4
   18796:	602b      	str	r3, [r5, #0]
   18798:	3243      	adds	r2, #67	; 0x43
   1879a:	7812      	ldrb	r2, [r2, #0]
   1879c:	2a00      	cmp	r2, #0
   1879e:	d001      	beq.n	187a4 <_printf_common+0x24>
   187a0:	3301      	adds	r3, #1
   187a2:	602b      	str	r3, [r5, #0]
   187a4:	6823      	ldr	r3, [r4, #0]
   187a6:	069b      	lsls	r3, r3, #26
   187a8:	d502      	bpl.n	187b0 <_printf_common+0x30>
   187aa:	682b      	ldr	r3, [r5, #0]
   187ac:	3302      	adds	r3, #2
   187ae:	602b      	str	r3, [r5, #0]
   187b0:	2706      	movs	r7, #6
   187b2:	6823      	ldr	r3, [r4, #0]
   187b4:	401f      	ands	r7, r3
   187b6:	d027      	beq.n	18808 <_printf_common+0x88>
   187b8:	0023      	movs	r3, r4
   187ba:	3343      	adds	r3, #67	; 0x43
   187bc:	781b      	ldrb	r3, [r3, #0]
   187be:	1e5a      	subs	r2, r3, #1
   187c0:	4193      	sbcs	r3, r2
   187c2:	6822      	ldr	r2, [r4, #0]
   187c4:	0692      	lsls	r2, r2, #26
   187c6:	d430      	bmi.n	1882a <_printf_common+0xaa>
   187c8:	0022      	movs	r2, r4
   187ca:	9901      	ldr	r1, [sp, #4]
   187cc:	3243      	adds	r2, #67	; 0x43
   187ce:	9800      	ldr	r0, [sp, #0]
   187d0:	9e08      	ldr	r6, [sp, #32]
   187d2:	47b0      	blx	r6
   187d4:	1c43      	adds	r3, r0, #1
   187d6:	d025      	beq.n	18824 <_printf_common+0xa4>
   187d8:	2306      	movs	r3, #6
   187da:	6820      	ldr	r0, [r4, #0]
   187dc:	682a      	ldr	r2, [r5, #0]
   187de:	68e1      	ldr	r1, [r4, #12]
   187e0:	4003      	ands	r3, r0
   187e2:	2500      	movs	r5, #0
   187e4:	2b04      	cmp	r3, #4
   187e6:	d103      	bne.n	187f0 <_printf_common+0x70>
   187e8:	1a8d      	subs	r5, r1, r2
   187ea:	43eb      	mvns	r3, r5
   187ec:	17db      	asrs	r3, r3, #31
   187ee:	401d      	ands	r5, r3
   187f0:	68a3      	ldr	r3, [r4, #8]
   187f2:	6922      	ldr	r2, [r4, #16]
   187f4:	4293      	cmp	r3, r2
   187f6:	dd01      	ble.n	187fc <_printf_common+0x7c>
   187f8:	1a9b      	subs	r3, r3, r2
   187fa:	18ed      	adds	r5, r5, r3
   187fc:	2700      	movs	r7, #0
   187fe:	42bd      	cmp	r5, r7
   18800:	d120      	bne.n	18844 <_printf_common+0xc4>
   18802:	2000      	movs	r0, #0
   18804:	e010      	b.n	18828 <_printf_common+0xa8>
   18806:	3701      	adds	r7, #1
   18808:	68e3      	ldr	r3, [r4, #12]
   1880a:	682a      	ldr	r2, [r5, #0]
   1880c:	1a9b      	subs	r3, r3, r2
   1880e:	429f      	cmp	r7, r3
   18810:	dad2      	bge.n	187b8 <_printf_common+0x38>
   18812:	0022      	movs	r2, r4
   18814:	2301      	movs	r3, #1
   18816:	3219      	adds	r2, #25
   18818:	9901      	ldr	r1, [sp, #4]
   1881a:	9800      	ldr	r0, [sp, #0]
   1881c:	9e08      	ldr	r6, [sp, #32]
   1881e:	47b0      	blx	r6
   18820:	1c43      	adds	r3, r0, #1
   18822:	d1f0      	bne.n	18806 <_printf_common+0x86>
   18824:	2001      	movs	r0, #1
   18826:	4240      	negs	r0, r0
   18828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1882a:	2030      	movs	r0, #48	; 0x30
   1882c:	18e1      	adds	r1, r4, r3
   1882e:	3143      	adds	r1, #67	; 0x43
   18830:	7008      	strb	r0, [r1, #0]
   18832:	0021      	movs	r1, r4
   18834:	1c5a      	adds	r2, r3, #1
   18836:	3145      	adds	r1, #69	; 0x45
   18838:	7809      	ldrb	r1, [r1, #0]
   1883a:	18a2      	adds	r2, r4, r2
   1883c:	3243      	adds	r2, #67	; 0x43
   1883e:	3302      	adds	r3, #2
   18840:	7011      	strb	r1, [r2, #0]
   18842:	e7c1      	b.n	187c8 <_printf_common+0x48>
   18844:	0022      	movs	r2, r4
   18846:	2301      	movs	r3, #1
   18848:	321a      	adds	r2, #26
   1884a:	9901      	ldr	r1, [sp, #4]
   1884c:	9800      	ldr	r0, [sp, #0]
   1884e:	9e08      	ldr	r6, [sp, #32]
   18850:	47b0      	blx	r6
   18852:	1c43      	adds	r3, r0, #1
   18854:	d0e6      	beq.n	18824 <_printf_common+0xa4>
   18856:	3701      	adds	r7, #1
   18858:	e7d1      	b.n	187fe <_printf_common+0x7e>
	...

0001885c <_printf_i>:
   1885c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1885e:	b08b      	sub	sp, #44	; 0x2c
   18860:	9206      	str	r2, [sp, #24]
   18862:	000a      	movs	r2, r1
   18864:	3243      	adds	r2, #67	; 0x43
   18866:	9307      	str	r3, [sp, #28]
   18868:	9005      	str	r0, [sp, #20]
   1886a:	9204      	str	r2, [sp, #16]
   1886c:	7e0a      	ldrb	r2, [r1, #24]
   1886e:	000c      	movs	r4, r1
   18870:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18872:	2a6e      	cmp	r2, #110	; 0x6e
   18874:	d100      	bne.n	18878 <_printf_i+0x1c>
   18876:	e08f      	b.n	18998 <_printf_i+0x13c>
   18878:	d817      	bhi.n	188aa <_printf_i+0x4e>
   1887a:	2a63      	cmp	r2, #99	; 0x63
   1887c:	d02c      	beq.n	188d8 <_printf_i+0x7c>
   1887e:	d808      	bhi.n	18892 <_printf_i+0x36>
   18880:	2a00      	cmp	r2, #0
   18882:	d100      	bne.n	18886 <_printf_i+0x2a>
   18884:	e099      	b.n	189ba <_printf_i+0x15e>
   18886:	2a58      	cmp	r2, #88	; 0x58
   18888:	d054      	beq.n	18934 <_printf_i+0xd8>
   1888a:	0026      	movs	r6, r4
   1888c:	3642      	adds	r6, #66	; 0x42
   1888e:	7032      	strb	r2, [r6, #0]
   18890:	e029      	b.n	188e6 <_printf_i+0x8a>
   18892:	2a64      	cmp	r2, #100	; 0x64
   18894:	d001      	beq.n	1889a <_printf_i+0x3e>
   18896:	2a69      	cmp	r2, #105	; 0x69
   18898:	d1f7      	bne.n	1888a <_printf_i+0x2e>
   1889a:	6821      	ldr	r1, [r4, #0]
   1889c:	681a      	ldr	r2, [r3, #0]
   1889e:	0608      	lsls	r0, r1, #24
   188a0:	d523      	bpl.n	188ea <_printf_i+0x8e>
   188a2:	1d11      	adds	r1, r2, #4
   188a4:	6019      	str	r1, [r3, #0]
   188a6:	6815      	ldr	r5, [r2, #0]
   188a8:	e025      	b.n	188f6 <_printf_i+0x9a>
   188aa:	2a73      	cmp	r2, #115	; 0x73
   188ac:	d100      	bne.n	188b0 <_printf_i+0x54>
   188ae:	e088      	b.n	189c2 <_printf_i+0x166>
   188b0:	d808      	bhi.n	188c4 <_printf_i+0x68>
   188b2:	2a6f      	cmp	r2, #111	; 0x6f
   188b4:	d029      	beq.n	1890a <_printf_i+0xae>
   188b6:	2a70      	cmp	r2, #112	; 0x70
   188b8:	d1e7      	bne.n	1888a <_printf_i+0x2e>
   188ba:	2220      	movs	r2, #32
   188bc:	6809      	ldr	r1, [r1, #0]
   188be:	430a      	orrs	r2, r1
   188c0:	6022      	str	r2, [r4, #0]
   188c2:	e003      	b.n	188cc <_printf_i+0x70>
   188c4:	2a75      	cmp	r2, #117	; 0x75
   188c6:	d020      	beq.n	1890a <_printf_i+0xae>
   188c8:	2a78      	cmp	r2, #120	; 0x78
   188ca:	d1de      	bne.n	1888a <_printf_i+0x2e>
   188cc:	0022      	movs	r2, r4
   188ce:	2178      	movs	r1, #120	; 0x78
   188d0:	3245      	adds	r2, #69	; 0x45
   188d2:	7011      	strb	r1, [r2, #0]
   188d4:	4a6c      	ldr	r2, [pc, #432]	; (18a88 <_printf_i+0x22c>)
   188d6:	e030      	b.n	1893a <_printf_i+0xde>
   188d8:	000e      	movs	r6, r1
   188da:	681a      	ldr	r2, [r3, #0]
   188dc:	3642      	adds	r6, #66	; 0x42
   188de:	1d11      	adds	r1, r2, #4
   188e0:	6019      	str	r1, [r3, #0]
   188e2:	6813      	ldr	r3, [r2, #0]
   188e4:	7033      	strb	r3, [r6, #0]
   188e6:	2301      	movs	r3, #1
   188e8:	e079      	b.n	189de <_printf_i+0x182>
   188ea:	0649      	lsls	r1, r1, #25
   188ec:	d5d9      	bpl.n	188a2 <_printf_i+0x46>
   188ee:	1d11      	adds	r1, r2, #4
   188f0:	6019      	str	r1, [r3, #0]
   188f2:	2300      	movs	r3, #0
   188f4:	5ed5      	ldrsh	r5, [r2, r3]
   188f6:	2d00      	cmp	r5, #0
   188f8:	da03      	bge.n	18902 <_printf_i+0xa6>
   188fa:	232d      	movs	r3, #45	; 0x2d
   188fc:	9a04      	ldr	r2, [sp, #16]
   188fe:	426d      	negs	r5, r5
   18900:	7013      	strb	r3, [r2, #0]
   18902:	4b62      	ldr	r3, [pc, #392]	; (18a8c <_printf_i+0x230>)
   18904:	270a      	movs	r7, #10
   18906:	9303      	str	r3, [sp, #12]
   18908:	e02f      	b.n	1896a <_printf_i+0x10e>
   1890a:	6820      	ldr	r0, [r4, #0]
   1890c:	6819      	ldr	r1, [r3, #0]
   1890e:	0605      	lsls	r5, r0, #24
   18910:	d503      	bpl.n	1891a <_printf_i+0xbe>
   18912:	1d08      	adds	r0, r1, #4
   18914:	6018      	str	r0, [r3, #0]
   18916:	680d      	ldr	r5, [r1, #0]
   18918:	e005      	b.n	18926 <_printf_i+0xca>
   1891a:	0640      	lsls	r0, r0, #25
   1891c:	d5f9      	bpl.n	18912 <_printf_i+0xb6>
   1891e:	680d      	ldr	r5, [r1, #0]
   18920:	1d08      	adds	r0, r1, #4
   18922:	6018      	str	r0, [r3, #0]
   18924:	b2ad      	uxth	r5, r5
   18926:	4b59      	ldr	r3, [pc, #356]	; (18a8c <_printf_i+0x230>)
   18928:	2708      	movs	r7, #8
   1892a:	9303      	str	r3, [sp, #12]
   1892c:	2a6f      	cmp	r2, #111	; 0x6f
   1892e:	d018      	beq.n	18962 <_printf_i+0x106>
   18930:	270a      	movs	r7, #10
   18932:	e016      	b.n	18962 <_printf_i+0x106>
   18934:	3145      	adds	r1, #69	; 0x45
   18936:	700a      	strb	r2, [r1, #0]
   18938:	4a54      	ldr	r2, [pc, #336]	; (18a8c <_printf_i+0x230>)
   1893a:	9203      	str	r2, [sp, #12]
   1893c:	681a      	ldr	r2, [r3, #0]
   1893e:	6821      	ldr	r1, [r4, #0]
   18940:	1d10      	adds	r0, r2, #4
   18942:	6018      	str	r0, [r3, #0]
   18944:	6815      	ldr	r5, [r2, #0]
   18946:	0608      	lsls	r0, r1, #24
   18948:	d522      	bpl.n	18990 <_printf_i+0x134>
   1894a:	07cb      	lsls	r3, r1, #31
   1894c:	d502      	bpl.n	18954 <_printf_i+0xf8>
   1894e:	2320      	movs	r3, #32
   18950:	4319      	orrs	r1, r3
   18952:	6021      	str	r1, [r4, #0]
   18954:	2710      	movs	r7, #16
   18956:	2d00      	cmp	r5, #0
   18958:	d103      	bne.n	18962 <_printf_i+0x106>
   1895a:	2320      	movs	r3, #32
   1895c:	6822      	ldr	r2, [r4, #0]
   1895e:	439a      	bics	r2, r3
   18960:	6022      	str	r2, [r4, #0]
   18962:	0023      	movs	r3, r4
   18964:	2200      	movs	r2, #0
   18966:	3343      	adds	r3, #67	; 0x43
   18968:	701a      	strb	r2, [r3, #0]
   1896a:	6863      	ldr	r3, [r4, #4]
   1896c:	60a3      	str	r3, [r4, #8]
   1896e:	2b00      	cmp	r3, #0
   18970:	db5c      	blt.n	18a2c <_printf_i+0x1d0>
   18972:	2204      	movs	r2, #4
   18974:	6821      	ldr	r1, [r4, #0]
   18976:	4391      	bics	r1, r2
   18978:	6021      	str	r1, [r4, #0]
   1897a:	2d00      	cmp	r5, #0
   1897c:	d158      	bne.n	18a30 <_printf_i+0x1d4>
   1897e:	9e04      	ldr	r6, [sp, #16]
   18980:	2b00      	cmp	r3, #0
   18982:	d064      	beq.n	18a4e <_printf_i+0x1f2>
   18984:	0026      	movs	r6, r4
   18986:	9b03      	ldr	r3, [sp, #12]
   18988:	3642      	adds	r6, #66	; 0x42
   1898a:	781b      	ldrb	r3, [r3, #0]
   1898c:	7033      	strb	r3, [r6, #0]
   1898e:	e05e      	b.n	18a4e <_printf_i+0x1f2>
   18990:	0648      	lsls	r0, r1, #25
   18992:	d5da      	bpl.n	1894a <_printf_i+0xee>
   18994:	b2ad      	uxth	r5, r5
   18996:	e7d8      	b.n	1894a <_printf_i+0xee>
   18998:	6809      	ldr	r1, [r1, #0]
   1899a:	681a      	ldr	r2, [r3, #0]
   1899c:	0608      	lsls	r0, r1, #24
   1899e:	d505      	bpl.n	189ac <_printf_i+0x150>
   189a0:	1d11      	adds	r1, r2, #4
   189a2:	6019      	str	r1, [r3, #0]
   189a4:	6813      	ldr	r3, [r2, #0]
   189a6:	6962      	ldr	r2, [r4, #20]
   189a8:	601a      	str	r2, [r3, #0]
   189aa:	e006      	b.n	189ba <_printf_i+0x15e>
   189ac:	0649      	lsls	r1, r1, #25
   189ae:	d5f7      	bpl.n	189a0 <_printf_i+0x144>
   189b0:	1d11      	adds	r1, r2, #4
   189b2:	6019      	str	r1, [r3, #0]
   189b4:	6813      	ldr	r3, [r2, #0]
   189b6:	8aa2      	ldrh	r2, [r4, #20]
   189b8:	801a      	strh	r2, [r3, #0]
   189ba:	2300      	movs	r3, #0
   189bc:	9e04      	ldr	r6, [sp, #16]
   189be:	6123      	str	r3, [r4, #16]
   189c0:	e054      	b.n	18a6c <_printf_i+0x210>
   189c2:	681a      	ldr	r2, [r3, #0]
   189c4:	1d11      	adds	r1, r2, #4
   189c6:	6019      	str	r1, [r3, #0]
   189c8:	6816      	ldr	r6, [r2, #0]
   189ca:	2100      	movs	r1, #0
   189cc:	6862      	ldr	r2, [r4, #4]
   189ce:	0030      	movs	r0, r6
   189d0:	f000 f94a 	bl	18c68 <memchr>
   189d4:	2800      	cmp	r0, #0
   189d6:	d001      	beq.n	189dc <_printf_i+0x180>
   189d8:	1b80      	subs	r0, r0, r6
   189da:	6060      	str	r0, [r4, #4]
   189dc:	6863      	ldr	r3, [r4, #4]
   189de:	6123      	str	r3, [r4, #16]
   189e0:	2300      	movs	r3, #0
   189e2:	9a04      	ldr	r2, [sp, #16]
   189e4:	7013      	strb	r3, [r2, #0]
   189e6:	e041      	b.n	18a6c <_printf_i+0x210>
   189e8:	6923      	ldr	r3, [r4, #16]
   189ea:	0032      	movs	r2, r6
   189ec:	9906      	ldr	r1, [sp, #24]
   189ee:	9805      	ldr	r0, [sp, #20]
   189f0:	9d07      	ldr	r5, [sp, #28]
   189f2:	47a8      	blx	r5
   189f4:	1c43      	adds	r3, r0, #1
   189f6:	d043      	beq.n	18a80 <_printf_i+0x224>
   189f8:	6823      	ldr	r3, [r4, #0]
   189fa:	2500      	movs	r5, #0
   189fc:	079b      	lsls	r3, r3, #30
   189fe:	d40f      	bmi.n	18a20 <_printf_i+0x1c4>
   18a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a02:	68e0      	ldr	r0, [r4, #12]
   18a04:	4298      	cmp	r0, r3
   18a06:	da3d      	bge.n	18a84 <_printf_i+0x228>
   18a08:	0018      	movs	r0, r3
   18a0a:	e03b      	b.n	18a84 <_printf_i+0x228>
   18a0c:	0022      	movs	r2, r4
   18a0e:	2301      	movs	r3, #1
   18a10:	3219      	adds	r2, #25
   18a12:	9906      	ldr	r1, [sp, #24]
   18a14:	9805      	ldr	r0, [sp, #20]
   18a16:	9e07      	ldr	r6, [sp, #28]
   18a18:	47b0      	blx	r6
   18a1a:	1c43      	adds	r3, r0, #1
   18a1c:	d030      	beq.n	18a80 <_printf_i+0x224>
   18a1e:	3501      	adds	r5, #1
   18a20:	68e3      	ldr	r3, [r4, #12]
   18a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18a24:	1a9b      	subs	r3, r3, r2
   18a26:	429d      	cmp	r5, r3
   18a28:	dbf0      	blt.n	18a0c <_printf_i+0x1b0>
   18a2a:	e7e9      	b.n	18a00 <_printf_i+0x1a4>
   18a2c:	2d00      	cmp	r5, #0
   18a2e:	d0a9      	beq.n	18984 <_printf_i+0x128>
   18a30:	9e04      	ldr	r6, [sp, #16]
   18a32:	0028      	movs	r0, r5
   18a34:	0039      	movs	r1, r7
   18a36:	f7fe fb59 	bl	170ec <__aeabi_uidivmod>
   18a3a:	9b03      	ldr	r3, [sp, #12]
   18a3c:	3e01      	subs	r6, #1
   18a3e:	5c5b      	ldrb	r3, [r3, r1]
   18a40:	0028      	movs	r0, r5
   18a42:	7033      	strb	r3, [r6, #0]
   18a44:	0039      	movs	r1, r7
   18a46:	f7fe facb 	bl	16fe0 <__udivsi3>
   18a4a:	1e05      	subs	r5, r0, #0
   18a4c:	d1f1      	bne.n	18a32 <_printf_i+0x1d6>
   18a4e:	2f08      	cmp	r7, #8
   18a50:	d109      	bne.n	18a66 <_printf_i+0x20a>
   18a52:	6823      	ldr	r3, [r4, #0]
   18a54:	07db      	lsls	r3, r3, #31
   18a56:	d506      	bpl.n	18a66 <_printf_i+0x20a>
   18a58:	6863      	ldr	r3, [r4, #4]
   18a5a:	6922      	ldr	r2, [r4, #16]
   18a5c:	4293      	cmp	r3, r2
   18a5e:	dc02      	bgt.n	18a66 <_printf_i+0x20a>
   18a60:	2330      	movs	r3, #48	; 0x30
   18a62:	3e01      	subs	r6, #1
   18a64:	7033      	strb	r3, [r6, #0]
   18a66:	9b04      	ldr	r3, [sp, #16]
   18a68:	1b9b      	subs	r3, r3, r6
   18a6a:	6123      	str	r3, [r4, #16]
   18a6c:	9b07      	ldr	r3, [sp, #28]
   18a6e:	aa09      	add	r2, sp, #36	; 0x24
   18a70:	9300      	str	r3, [sp, #0]
   18a72:	0021      	movs	r1, r4
   18a74:	9b06      	ldr	r3, [sp, #24]
   18a76:	9805      	ldr	r0, [sp, #20]
   18a78:	f7ff fe82 	bl	18780 <_printf_common>
   18a7c:	1c43      	adds	r3, r0, #1
   18a7e:	d1b3      	bne.n	189e8 <_printf_i+0x18c>
   18a80:	2001      	movs	r0, #1
   18a82:	4240      	negs	r0, r0
   18a84:	b00b      	add	sp, #44	; 0x2c
   18a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a88:	0001af50 	.word	0x0001af50
   18a8c:	0001af3f 	.word	0x0001af3f

00018a90 <_putc_r>:
   18a90:	b570      	push	{r4, r5, r6, lr}
   18a92:	0006      	movs	r6, r0
   18a94:	000d      	movs	r5, r1
   18a96:	0014      	movs	r4, r2
   18a98:	2800      	cmp	r0, #0
   18a9a:	d004      	beq.n	18aa6 <_putc_r+0x16>
   18a9c:	6983      	ldr	r3, [r0, #24]
   18a9e:	2b00      	cmp	r3, #0
   18aa0:	d101      	bne.n	18aa6 <_putc_r+0x16>
   18aa2:	f7ff faab 	bl	17ffc <__sinit>
   18aa6:	4b12      	ldr	r3, [pc, #72]	; (18af0 <_putc_r+0x60>)
   18aa8:	429c      	cmp	r4, r3
   18aaa:	d111      	bne.n	18ad0 <_putc_r+0x40>
   18aac:	6874      	ldr	r4, [r6, #4]
   18aae:	68a3      	ldr	r3, [r4, #8]
   18ab0:	3b01      	subs	r3, #1
   18ab2:	60a3      	str	r3, [r4, #8]
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	da05      	bge.n	18ac4 <_putc_r+0x34>
   18ab8:	69a2      	ldr	r2, [r4, #24]
   18aba:	4293      	cmp	r3, r2
   18abc:	db12      	blt.n	18ae4 <_putc_r+0x54>
   18abe:	b2eb      	uxtb	r3, r5
   18ac0:	2b0a      	cmp	r3, #10
   18ac2:	d00f      	beq.n	18ae4 <_putc_r+0x54>
   18ac4:	6823      	ldr	r3, [r4, #0]
   18ac6:	b2e8      	uxtb	r0, r5
   18ac8:	1c5a      	adds	r2, r3, #1
   18aca:	6022      	str	r2, [r4, #0]
   18acc:	701d      	strb	r5, [r3, #0]
   18ace:	bd70      	pop	{r4, r5, r6, pc}
   18ad0:	4b08      	ldr	r3, [pc, #32]	; (18af4 <_putc_r+0x64>)
   18ad2:	429c      	cmp	r4, r3
   18ad4:	d101      	bne.n	18ada <_putc_r+0x4a>
   18ad6:	68b4      	ldr	r4, [r6, #8]
   18ad8:	e7e9      	b.n	18aae <_putc_r+0x1e>
   18ada:	4b07      	ldr	r3, [pc, #28]	; (18af8 <_putc_r+0x68>)
   18adc:	429c      	cmp	r4, r3
   18ade:	d1e6      	bne.n	18aae <_putc_r+0x1e>
   18ae0:	68f4      	ldr	r4, [r6, #12]
   18ae2:	e7e4      	b.n	18aae <_putc_r+0x1e>
   18ae4:	0022      	movs	r2, r4
   18ae6:	0029      	movs	r1, r5
   18ae8:	0030      	movs	r0, r6
   18aea:	f7ff f8c3 	bl	17c74 <__swbuf_r>
   18aee:	e7ee      	b.n	18ace <_putc_r+0x3e>
   18af0:	0001aee4 	.word	0x0001aee4
   18af4:	0001af04 	.word	0x0001af04
   18af8:	0001aec4 	.word	0x0001aec4

00018afc <__sread>:
   18afc:	b570      	push	{r4, r5, r6, lr}
   18afe:	000c      	movs	r4, r1
   18b00:	250e      	movs	r5, #14
   18b02:	5f49      	ldrsh	r1, [r1, r5]
   18b04:	f000 f8e2 	bl	18ccc <_read_r>
   18b08:	2800      	cmp	r0, #0
   18b0a:	db03      	blt.n	18b14 <__sread+0x18>
   18b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18b0e:	181b      	adds	r3, r3, r0
   18b10:	6563      	str	r3, [r4, #84]	; 0x54
   18b12:	bd70      	pop	{r4, r5, r6, pc}
   18b14:	89a3      	ldrh	r3, [r4, #12]
   18b16:	4a02      	ldr	r2, [pc, #8]	; (18b20 <__sread+0x24>)
   18b18:	4013      	ands	r3, r2
   18b1a:	81a3      	strh	r3, [r4, #12]
   18b1c:	e7f9      	b.n	18b12 <__sread+0x16>
   18b1e:	46c0      	nop			; (mov r8, r8)
   18b20:	ffffefff 	.word	0xffffefff

00018b24 <__swrite>:
   18b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b26:	001f      	movs	r7, r3
   18b28:	898b      	ldrh	r3, [r1, #12]
   18b2a:	0005      	movs	r5, r0
   18b2c:	000c      	movs	r4, r1
   18b2e:	0016      	movs	r6, r2
   18b30:	05db      	lsls	r3, r3, #23
   18b32:	d505      	bpl.n	18b40 <__swrite+0x1c>
   18b34:	230e      	movs	r3, #14
   18b36:	5ec9      	ldrsh	r1, [r1, r3]
   18b38:	2200      	movs	r2, #0
   18b3a:	2302      	movs	r3, #2
   18b3c:	f000 f880 	bl	18c40 <_lseek_r>
   18b40:	89a3      	ldrh	r3, [r4, #12]
   18b42:	4a05      	ldr	r2, [pc, #20]	; (18b58 <__swrite+0x34>)
   18b44:	0028      	movs	r0, r5
   18b46:	4013      	ands	r3, r2
   18b48:	81a3      	strh	r3, [r4, #12]
   18b4a:	0032      	movs	r2, r6
   18b4c:	230e      	movs	r3, #14
   18b4e:	5ee1      	ldrsh	r1, [r4, r3]
   18b50:	003b      	movs	r3, r7
   18b52:	f000 f82b 	bl	18bac <_write_r>
   18b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b58:	ffffefff 	.word	0xffffefff

00018b5c <__sseek>:
   18b5c:	b570      	push	{r4, r5, r6, lr}
   18b5e:	000c      	movs	r4, r1
   18b60:	250e      	movs	r5, #14
   18b62:	5f49      	ldrsh	r1, [r1, r5]
   18b64:	f000 f86c 	bl	18c40 <_lseek_r>
   18b68:	89a3      	ldrh	r3, [r4, #12]
   18b6a:	1c42      	adds	r2, r0, #1
   18b6c:	d103      	bne.n	18b76 <__sseek+0x1a>
   18b6e:	4a05      	ldr	r2, [pc, #20]	; (18b84 <__sseek+0x28>)
   18b70:	4013      	ands	r3, r2
   18b72:	81a3      	strh	r3, [r4, #12]
   18b74:	bd70      	pop	{r4, r5, r6, pc}
   18b76:	2280      	movs	r2, #128	; 0x80
   18b78:	0152      	lsls	r2, r2, #5
   18b7a:	4313      	orrs	r3, r2
   18b7c:	81a3      	strh	r3, [r4, #12]
   18b7e:	6560      	str	r0, [r4, #84]	; 0x54
   18b80:	e7f8      	b.n	18b74 <__sseek+0x18>
   18b82:	46c0      	nop			; (mov r8, r8)
   18b84:	ffffefff 	.word	0xffffefff

00018b88 <__sclose>:
   18b88:	b510      	push	{r4, lr}
   18b8a:	230e      	movs	r3, #14
   18b8c:	5ec9      	ldrsh	r1, [r1, r3]
   18b8e:	f000 f821 	bl	18bd4 <_close_r>
   18b92:	bd10      	pop	{r4, pc}

00018b94 <__ascii_wctomb>:
   18b94:	1e0b      	subs	r3, r1, #0
   18b96:	d004      	beq.n	18ba2 <__ascii_wctomb+0xe>
   18b98:	2aff      	cmp	r2, #255	; 0xff
   18b9a:	d904      	bls.n	18ba6 <__ascii_wctomb+0x12>
   18b9c:	238a      	movs	r3, #138	; 0x8a
   18b9e:	6003      	str	r3, [r0, #0]
   18ba0:	3b8b      	subs	r3, #139	; 0x8b
   18ba2:	0018      	movs	r0, r3
   18ba4:	4770      	bx	lr
   18ba6:	700a      	strb	r2, [r1, #0]
   18ba8:	2301      	movs	r3, #1
   18baa:	e7fa      	b.n	18ba2 <__ascii_wctomb+0xe>

00018bac <_write_r>:
   18bac:	b570      	push	{r4, r5, r6, lr}
   18bae:	0005      	movs	r5, r0
   18bb0:	0008      	movs	r0, r1
   18bb2:	0011      	movs	r1, r2
   18bb4:	2200      	movs	r2, #0
   18bb6:	4c06      	ldr	r4, [pc, #24]	; (18bd0 <_write_r+0x24>)
   18bb8:	6022      	str	r2, [r4, #0]
   18bba:	001a      	movs	r2, r3
   18bbc:	f7f9 f90e 	bl	11ddc <_write>
   18bc0:	1c43      	adds	r3, r0, #1
   18bc2:	d103      	bne.n	18bcc <_write_r+0x20>
   18bc4:	6823      	ldr	r3, [r4, #0]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	d000      	beq.n	18bcc <_write_r+0x20>
   18bca:	602b      	str	r3, [r5, #0]
   18bcc:	bd70      	pop	{r4, r5, r6, pc}
   18bce:	46c0      	nop			; (mov r8, r8)
   18bd0:	20001638 	.word	0x20001638

00018bd4 <_close_r>:
   18bd4:	2300      	movs	r3, #0
   18bd6:	b570      	push	{r4, r5, r6, lr}
   18bd8:	4c06      	ldr	r4, [pc, #24]	; (18bf4 <_close_r+0x20>)
   18bda:	0005      	movs	r5, r0
   18bdc:	0008      	movs	r0, r1
   18bde:	6023      	str	r3, [r4, #0]
   18be0:	f7f9 f936 	bl	11e50 <_close>
   18be4:	1c43      	adds	r3, r0, #1
   18be6:	d103      	bne.n	18bf0 <_close_r+0x1c>
   18be8:	6823      	ldr	r3, [r4, #0]
   18bea:	2b00      	cmp	r3, #0
   18bec:	d000      	beq.n	18bf0 <_close_r+0x1c>
   18bee:	602b      	str	r3, [r5, #0]
   18bf0:	bd70      	pop	{r4, r5, r6, pc}
   18bf2:	46c0      	nop			; (mov r8, r8)
   18bf4:	20001638 	.word	0x20001638

00018bf8 <_fstat_r>:
   18bf8:	2300      	movs	r3, #0
   18bfa:	b570      	push	{r4, r5, r6, lr}
   18bfc:	4c06      	ldr	r4, [pc, #24]	; (18c18 <_fstat_r+0x20>)
   18bfe:	0005      	movs	r5, r0
   18c00:	0008      	movs	r0, r1
   18c02:	0011      	movs	r1, r2
   18c04:	6023      	str	r3, [r4, #0]
   18c06:	f7f9 f926 	bl	11e56 <_fstat>
   18c0a:	1c43      	adds	r3, r0, #1
   18c0c:	d103      	bne.n	18c16 <_fstat_r+0x1e>
   18c0e:	6823      	ldr	r3, [r4, #0]
   18c10:	2b00      	cmp	r3, #0
   18c12:	d000      	beq.n	18c16 <_fstat_r+0x1e>
   18c14:	602b      	str	r3, [r5, #0]
   18c16:	bd70      	pop	{r4, r5, r6, pc}
   18c18:	20001638 	.word	0x20001638

00018c1c <_isatty_r>:
   18c1c:	2300      	movs	r3, #0
   18c1e:	b570      	push	{r4, r5, r6, lr}
   18c20:	4c06      	ldr	r4, [pc, #24]	; (18c3c <_isatty_r+0x20>)
   18c22:	0005      	movs	r5, r0
   18c24:	0008      	movs	r0, r1
   18c26:	6023      	str	r3, [r4, #0]
   18c28:	f7f9 f91a 	bl	11e60 <_isatty>
   18c2c:	1c43      	adds	r3, r0, #1
   18c2e:	d103      	bne.n	18c38 <_isatty_r+0x1c>
   18c30:	6823      	ldr	r3, [r4, #0]
   18c32:	2b00      	cmp	r3, #0
   18c34:	d000      	beq.n	18c38 <_isatty_r+0x1c>
   18c36:	602b      	str	r3, [r5, #0]
   18c38:	bd70      	pop	{r4, r5, r6, pc}
   18c3a:	46c0      	nop			; (mov r8, r8)
   18c3c:	20001638 	.word	0x20001638

00018c40 <_lseek_r>:
   18c40:	b570      	push	{r4, r5, r6, lr}
   18c42:	0005      	movs	r5, r0
   18c44:	0008      	movs	r0, r1
   18c46:	0011      	movs	r1, r2
   18c48:	2200      	movs	r2, #0
   18c4a:	4c06      	ldr	r4, [pc, #24]	; (18c64 <_lseek_r+0x24>)
   18c4c:	6022      	str	r2, [r4, #0]
   18c4e:	001a      	movs	r2, r3
   18c50:	f7f9 f908 	bl	11e64 <_lseek>
   18c54:	1c43      	adds	r3, r0, #1
   18c56:	d103      	bne.n	18c60 <_lseek_r+0x20>
   18c58:	6823      	ldr	r3, [r4, #0]
   18c5a:	2b00      	cmp	r3, #0
   18c5c:	d000      	beq.n	18c60 <_lseek_r+0x20>
   18c5e:	602b      	str	r3, [r5, #0]
   18c60:	bd70      	pop	{r4, r5, r6, pc}
   18c62:	46c0      	nop			; (mov r8, r8)
   18c64:	20001638 	.word	0x20001638

00018c68 <memchr>:
   18c68:	b2c9      	uxtb	r1, r1
   18c6a:	1882      	adds	r2, r0, r2
   18c6c:	4290      	cmp	r0, r2
   18c6e:	d101      	bne.n	18c74 <memchr+0xc>
   18c70:	2000      	movs	r0, #0
   18c72:	4770      	bx	lr
   18c74:	7803      	ldrb	r3, [r0, #0]
   18c76:	428b      	cmp	r3, r1
   18c78:	d0fb      	beq.n	18c72 <memchr+0xa>
   18c7a:	3001      	adds	r0, #1
   18c7c:	e7f6      	b.n	18c6c <memchr+0x4>

00018c7e <_realloc_r>:
   18c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c80:	0007      	movs	r7, r0
   18c82:	000d      	movs	r5, r1
   18c84:	0016      	movs	r6, r2
   18c86:	2900      	cmp	r1, #0
   18c88:	d105      	bne.n	18c96 <_realloc_r+0x18>
   18c8a:	0011      	movs	r1, r2
   18c8c:	f7fe fbf4 	bl	17478 <_malloc_r>
   18c90:	0004      	movs	r4, r0
   18c92:	0020      	movs	r0, r4
   18c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c96:	2a00      	cmp	r2, #0
   18c98:	d103      	bne.n	18ca2 <_realloc_r+0x24>
   18c9a:	f7fe fba3 	bl	173e4 <_free_r>
   18c9e:	0034      	movs	r4, r6
   18ca0:	e7f7      	b.n	18c92 <_realloc_r+0x14>
   18ca2:	f000 f827 	bl	18cf4 <_malloc_usable_size_r>
   18ca6:	002c      	movs	r4, r5
   18ca8:	4286      	cmp	r6, r0
   18caa:	d9f2      	bls.n	18c92 <_realloc_r+0x14>
   18cac:	0031      	movs	r1, r6
   18cae:	0038      	movs	r0, r7
   18cb0:	f7fe fbe2 	bl	17478 <_malloc_r>
   18cb4:	1e04      	subs	r4, r0, #0
   18cb6:	d0ec      	beq.n	18c92 <_realloc_r+0x14>
   18cb8:	0029      	movs	r1, r5
   18cba:	0032      	movs	r2, r6
   18cbc:	f7fe fb6e 	bl	1739c <memcpy>
   18cc0:	0029      	movs	r1, r5
   18cc2:	0038      	movs	r0, r7
   18cc4:	f7fe fb8e 	bl	173e4 <_free_r>
   18cc8:	e7e3      	b.n	18c92 <_realloc_r+0x14>
	...

00018ccc <_read_r>:
   18ccc:	b570      	push	{r4, r5, r6, lr}
   18cce:	0005      	movs	r5, r0
   18cd0:	0008      	movs	r0, r1
   18cd2:	0011      	movs	r1, r2
   18cd4:	2200      	movs	r2, #0
   18cd6:	4c06      	ldr	r4, [pc, #24]	; (18cf0 <_read_r+0x24>)
   18cd8:	6022      	str	r2, [r4, #0]
   18cda:	001a      	movs	r2, r3
   18cdc:	f7f9 f85c 	bl	11d98 <_read>
   18ce0:	1c43      	adds	r3, r0, #1
   18ce2:	d103      	bne.n	18cec <_read_r+0x20>
   18ce4:	6823      	ldr	r3, [r4, #0]
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	d000      	beq.n	18cec <_read_r+0x20>
   18cea:	602b      	str	r3, [r5, #0]
   18cec:	bd70      	pop	{r4, r5, r6, pc}
   18cee:	46c0      	nop			; (mov r8, r8)
   18cf0:	20001638 	.word	0x20001638

00018cf4 <_malloc_usable_size_r>:
   18cf4:	1f0b      	subs	r3, r1, #4
   18cf6:	681b      	ldr	r3, [r3, #0]
   18cf8:	1f18      	subs	r0, r3, #4
   18cfa:	2b00      	cmp	r3, #0
   18cfc:	da01      	bge.n	18d02 <_malloc_usable_size_r+0xe>
   18cfe:	580b      	ldr	r3, [r1, r0]
   18d00:	18c0      	adds	r0, r0, r3
   18d02:	4770      	bx	lr

00018d04 <mmc_trans_multipliers>:
   18d04:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18d14:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   18d24:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   18d34:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018d44 <sd_mmc_trans_units>:
   18d44:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00018d60 <sd_trans_multipliers>:
   18d60:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18d70:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   18d80:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   18d90:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018da0 <__FUNCTION__.14672>:
   18da0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   18db0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   18dc0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   18dd0:	746c 6320 646d 0000 d250 0000 d220 0000     lt cmd..P... ...
   18de0:	d218 0000 d230 0000 d228 0000 d248 0000     ....0...(...H...
   18df0:	d238 0000 d240 0000                         8...@...

00018df8 <__FUNCTION__.13113>:
   18df8:	6968 5f66 6573 646e 0000 0000               hif_send....

00018e04 <__FUNCTION__.13123>:
   18e04:	6968 5f66 7369 0072                         hif_isr.

00018e0c <__FUNCTION__.13132>:
   18e0c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00018e1c <__FUNCTION__.13144>:
   18e1c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00018e28 <__FUNCTION__.13160>:
   18e28:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   18e38:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   18e48:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   18e58:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   18e68:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   18e78:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   18e88:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   18e98:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   18ea8:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   18eb8:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   18ec8:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   18ed8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   18ee8:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   18ef8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   18f08:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   18f18:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   18f28:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   18f38:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   18f48:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   18f58:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   18f68:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   18f78:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   18f88:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   18f98:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   18fa8:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   18fb8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   18fc8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   18fd8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   18fe8:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   18ff8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   19008:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   19018:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   19028:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   19038:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   19048:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   19058:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   19068:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   19078:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   19088:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   19098:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   190a8:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   190b8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   190c8:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   190d8:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   190e8:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   190f8:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   19108:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00019118 <__FUNCTION__.13095>:
   19118:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00019124 <__FUNCTION__.13124>:
   19124:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00019134 <__FUNCTION__.13155>:
   19134:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   19144:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   19154:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   19164:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   19174:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   19184:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   19194:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   191a4:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   191b4:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   191c4:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   191d4:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   191e4:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   191f4:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   19204:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   19214:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   19224:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   19234:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   19244:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   19254:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   19264:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   19274:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   19284:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   19294:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   192a4:	3431 353a 3a33 3330 0000 0000 6f4e 2076     14:53:03....Nov 
   192b4:	3231 3220 3130 0039 7244 7669 7265 6220     12 2019.Driver b
   192c4:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   192d4:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   192e4:	2065 6556 7372 6f69 006e 0000               e Version...

000192f0 <__FUNCTION__.12952>:
   192f0:	6863 7069 775f 6b61 0065 0000               chip_wake...

000192fc <__FUNCTION__.13001>:
   192fc:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   1930c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   1931c:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   1932c:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   1933c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   1934c:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   1935c:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0001936c <__FUNCTION__.12999>:
   1936c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00019378 <__FUNCTION__.13006>:
   19378:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   19388:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   19398:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   193a8:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   193b8:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   193c8:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   193d8:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   193e8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   193f8:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   19408:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   19418:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   19428:	4920 2044 6c25 0a78 0000 0000 e230 0000      ID %lx.....0...
   19438:	e230 0000 e260 0000 e1e2 0000 e206 0000     0...`...........
   19448:	e214 0000 e246 0000 e246 0000 e28e 0000     ....F...F.......
   19458:	e1c6 0000 e2c8 0000 e2c8 0000 e2c8 0000     ................
   19468:	e2c8 0000 e222 0000 c9c3 cac4               ....".......

00019474 <__FUNCTION__.12268>:
   19474:	7073 5f69 6d63 0064                         spi_cmd.

0001947c <__FUNCTION__.12275>:
   1947c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0001948c <__FUNCTION__.12284>:
   1948c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00019498 <__FUNCTION__.12300>:
   19498:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

000194a8 <__FUNCTION__.12315>:
   194a8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000194b8 <__FUNCTION__.12327>:
   194b8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000194c8 <__FUNCTION__.12338>:
   194c8:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000194d8 <__FUNCTION__.12350>:
   194d8:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000194e8 <__FUNCTION__.12363>:
   194e8:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000194f4 <__FUNCTION__.12384>:
   194f4:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00019500 <crc7_syndrome_table>:
   19500:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   19510:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   19520:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   19530:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   19540:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   19550:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   19560:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   19570:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   19580:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   19590:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   195a0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   195b0:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   195c0:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   195d0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   195e0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   195f0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   19600:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19610:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   19620:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   19630:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   19640:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   19650:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19660:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   19670:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   19680:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   19690:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   196a0:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   196b0:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   196c0:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   196d0:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   196e0:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   196f0:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   19700:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19710:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   19720:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   19730:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   19740:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   19750:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   19760:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   19770:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   19780:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19790:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   197a0:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   197b0:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   197c0:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   197d0:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   197e0:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   197f0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   19800:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   19810:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   19820:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19830:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   19840:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   19850:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19860:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   19870:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   19880:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   19890:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   198a0:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   198b0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   198c0:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   198d0:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   198e0:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   198f0:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   19900:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19910:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   19920:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   19930:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19940:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   19950:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   19960:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19970:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   19980:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   19990:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   199a0:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   199b0:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   199c0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   199d0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   199e0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   199f0:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   19a00:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   19a10:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   19a20:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   19a30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   19a40:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   19a50:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   19a60:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   19a70:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   19a80:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   19a90:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19aa0:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   19ab0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   19ac0:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   19ad0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   19ae0:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   19af0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19b00:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   19b10:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   19b20:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   19b30:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   19b40:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   19b50:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   19b60:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   19b70:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   19b80:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
   19b90:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   19ba0:	1c00 4200 0ec2 0001 0ebe 0001 0ebe 0001     ...B............
   19bb0:	0f24 0001 0f24 0001 0ed6 0001 0ec8 0001     $...$...........
   19bc0:	0edc 0001 0f12 0001 10e4 0001 10c4 0001     ................
   19bd0:	10c4 0001 1150 0001 10d6 0001 10f2 0001     ....P...........
   19be0:	10c8 0001 1100 0001 1140 0001               ........@...

00019bec <_tcc_apbcmasks>:
   19bec:	0100 0000 0200 0000 0400 0000               ............

00019bf8 <_tcc_cc_nums>:
   19bf8:	0204 0002                                   ....

00019bfc <_tcc_gclk_ids>:
   19bfc:	1a1a 001b                                   ....

00019c00 <_tcc_maxs>:
   19c00:	ffff 00ff ffff 00ff ffff 0000               ............

00019c0c <_tcc_ow_nums>:
   19c0c:	0408 0002                                   ....

00019c10 <_tcc_intflag>:
   19c10:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   19c20:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   19c30:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00019c40 <tcc_interrupt_vectors.12458>:
   19c40:	100f 0011                                   ....

00019c44 <LfnOfs>:
   19c44:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00019c54 <excvt.4558>:
   19c54:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   19c64:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   19c74:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   19c84:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   19c94:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   19ca4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   19cb4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   19cc4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   19cd4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   19ce4:	5d5b 0000                                   []..

00019ce8 <Tbl>:
   19ce8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   19cf8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   19d08:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   19d18:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   19d28:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   19d38:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   19d48:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   19d58:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   19d68:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   19d78:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   19d88:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   19d98:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   19da8:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   19db8:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   19dc8:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   19dd8:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00019de8 <tbl_lower.4308>:
   19de8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   19df8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   19e08:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   19e18:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   19e28:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   19e38:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   19e48:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   19e58:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   19e68:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   19e78:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   19e88:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   19e98:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   19ea8:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   19eb8:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   19ec8:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   19ed8:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   19ee8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   19ef8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   19f08:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   19f18:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   19f28:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   19f38:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   19f48:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   19f58:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   19f68:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   19f78:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   19f88:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   19f98:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   19fa8:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   19fb8:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00019fc8 <tbl_upper.4309>:
   19fc8:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   19fd8:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   19fe8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   19ff8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   1a008:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   1a018:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   1a028:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   1a038:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   1a048:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   1a058:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   1a068:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   1a078:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   1a088:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   1a098:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   1a0a8:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   1a0b8:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   1a0c8:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   1a0d8:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   1a0e8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   1a0f8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   1a108:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   1a118:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   1a128:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   1a138:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   1a148:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   1a158:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   1a168:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   1a178:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   1a188:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   1a198:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   1a1a8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   1a1c0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   1a200:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   1a218:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   1a258:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   1a268:	5fd6 0001 5fd0 0001 5fca 0001 5fc4 0001     ._..._..._..._..
   1a278:	5fdc 0001 5fe4 0001 5fdc 0001 5fbe 0001     ._..._..._..._..
   1a288:	5fb8 0001 5fdc 0001 5fb2 0001 5fb2 0001     ._..._..._..._..
   1a298:	5fac 0001 5fa6 0001 5fe4 0001 604e 0001     ._..._..._..N`..
   1a2a8:	6048 0001 6042 0001 603c 0001 6054 0001     H`..B`..<`..T`..
   1a2b8:	605c 0001 6054 0001 6036 0001 6030 0001     \`..T`..6`..0`..
   1a2c8:	6054 0001 602a 0001 602a 0001 6024 0001     T`..*`..*`..$`..
   1a2d8:	601e 0001 605c 0001 60c8 0001 60c2 0001     .`..\`...`...`..
   1a2e8:	60bc 0001 60b6 0001 60ce 0001 60ce 0001     .`...`...`...`..
   1a2f8:	60ce 0001 60b0 0001 60aa 0001 60ce 0001     .`...`...`...`..
   1a308:	60a4 0001 60a4 0001 609e 0001 6098 0001     .`...`...`...`..
   1a318:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   1a328:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
   1a338:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
   1a348:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
   1a358:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   1a368:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   1a378:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   1a388:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   1a398:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   1a3a8:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
   1a3b8:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
   1a3c8:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
   1a3d8:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
   1a3e8:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
   1a3f8:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
   1a408:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
   1a418:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
   1a428:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
   1a438:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
   1a448:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
   1a458:	2800 4200 6794 0001 679c 0001 67aa 0001     .(.B.g...g...g..
   1a468:	67e2 0001 67f8 0001 0a0d 2520 2a2e 0073     .g...g.... %.*s.
   1a478:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
   1a488:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
   1a498:	7274 6575 0000 0000 6843 6365 696b 676e     true....Checking
   1a4a8:	0d20 000a 465b 4941 3a4c 4320 756f 646c      ...[FAIL: Could
   1a4b8:	6e20 746f 6f20 6570 206e 6946 6d72 6177      not open Firmwa
   1a4c8:	6572 4620 6c69 5d65 7220 7365 2520 0d64     re File] res %d.
   1a4d8:	000a 0000 465b 4941 3a4c 4320 756f 646c     ....[FAIL: Could
   1a4e8:	6e20 746f 7220 6165 2064 6c42 636f 206b      not read Block 
   1a4f8:	7266 6d6f 4620 7269 776d 7261 2065 6946     from Firmware Fi
   1a508:	656c 205d 6572 2073 6425 202c 7962 6574     le] res %d, byte
   1a518:	2073 6572 6461 2520 0d64 000a 704f 6e65     s read %d...Open
   1a528:	6e69 2067 6170 6172 736d 632e 7673 0a0d     ing params.csv..
   1a538:	0000 0000 465b 4941 3a4c 4320 756f 646c     ....[FAIL: Could
   1a548:	6e20 746f 6f20 6570 206e 6170 6172 736d      not open params
   1a558:	6620 6c69 5d65 7220 7365 2520 0d64 000a      file] res %d...
   1a568:	465b 4941 3a4c 4320 756f 646c 6e20 746f     [FAIL: Could not
   1a578:	7220 6165 2064 6150 6172 656d 6574 7372      read Parameters
   1a588:	4620 6c69 5d65 7220 7365 2520 0d64 000a      File] res %d...
   1a598:	425b 7479 7365 7220 6165 2064 7266 6d6f     [Bytes read from
   1a5a8:	7020 7261 6d61 2e73 7363 3a76 5d20 2520      params.csv: ] %
   1a5b8:	0d64 000a 002c 0000 435b 4352 4d20 7461     d...,...[CRC Mat
   1a5c8:	6863 7365 0d5d 000a 2d5b 3031 6620 726f     ches]...[-10 for
   1a5d8:	4720 6972 6666 6e69 6f64 5d72 0a0d 0000      Griffindor]....
   1a5e8:	3a30 7061 2e70 6962 006e 0000 6170 6172     0:app.bin...para
   1a5f8:	736d 632e 7673 0000 227b 2264 7b3a 7422     ms.csv..{"d":{"t
   1a608:	6d65 2270 253a 7d64 007d 0000 7468 7074     emp":%d}}...http
   1a618:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   1a628:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   1a638:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   1a648:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   1a658:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   1a668:	2074 6f63 706d 656c 6574 2e64 000d 0000     t completed.....
   1a678:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1a688:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   1a698:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   1a6a8:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   1a6b8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   1a6c8:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   1a6d8:	6572 7361 6e6f 253a 0d64 000a 2d2d 5320     reason:%d...-- S
   1a6e8:	414d 5452 4420 534f 2045 5041 4c50 4349     MART DOSE APPLIC
   1a6f8:	5441 4f49 204e 2d2d 0a0d 2d2d 5320 4d41     ATION --..-- SAM
   1a708:	3257 5f35 5058 414c 4e49 4445 505f 4f52     W25_XPLAINED_PRO
   1a718:	2d20 0d2d 2d0a 202d 6f43 706d 6c69 6465      --..-- Compiled
   1a728:	203a 6f4e 2076 3231 3220 3130 2039 3431     : Nov 12 2019 14
   1a738:	353a 3a33 3830 2d20 0d2d 0000 0a0d 6854     :53:08 --.....Th
   1a748:	7369 6520 6178 706d 656c 7220 7165 6975     is example requi
   1a758:	6572 2073 6874 2065 5041 7420 206f 6168     res the AP to ha
   1a768:	6576 6920 746e 7265 656e 2074 6361 6563     ve internet acce
   1a778:	7373 0d2e 0d0a 0000 5345 3545 3631 2d20     ss......ESE516 -
   1a788:	5720 6669 2069 6e49 7469 4320 646f 0d65      Wifi Init Code.
   1a798:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1a7a8:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   1a7b8:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   1a7c8:	6c73 746f 2e2e 0d2e 0000 0000 6e69 7469     slot........init
   1a7d8:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   1a7e8:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   1a7f8:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1a808:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   1a818:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   1a828:	2e64 000d 6e69 7469 735f 6f74 6172 6567     d...init_storage
   1a838:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   1a848:	6472 2e2e 0d2e 0000 6e69 7469 735f 6f74     rd......init_sto
   1a858:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1a868:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   1a878:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   1a888:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1a898:	6e75 2074 4b4f 0d2e 0000 0000 6f63 666e     unt OK......conf
   1a8a8:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   1a8b8:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   1a8c8:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   1a8d8:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   1a8e8:	0000 0000 514d 5454 6920 696e 6974 6c61     ....MQTT initial
   1a8f8:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   1a908:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   1a918:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   1a928:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   1a938:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   1a948:	2065 7369 2820 6425 0d29 000a 616d 6e69     e is (%d)...main
   1a958:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   1a968:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   1a978:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   1a988:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   1a998:	4120 2050 7325 2e2e 0d2e 000a 616d 6e69      AP %s......main
   1a9a8:	203a 6f64 656e 0d2e 0000 0000 6863 6365     : done......chec
   1a9b8:	336b 000d 6863 6365 346b 000d 746f 6661     k3..check4..otaf
   1a9c8:	3a75 6420 6e6f 2e65 000d 0000 5245 3e52     u: done.....ERR>
   1a9d8:	203e 7953 7473 6369 206b 6f63 666e 6769     > Systick config
   1a9e8:	7275 7461 6f69 206e 7265 6f72 0d72 000a     uration error...

0001a9f8 <main_mqtt_broker>:
   1a9f8:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
   1aa08:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
   1aa18:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   1aa28:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   1aa38:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   1aa48:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   1aa58:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   1aa68:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   1aa78:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
   1aa88:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   1aa98:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   1aaa8:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   1aab8:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
   1aac8:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   1aad8:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
   1aae8:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   1aaf8:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   1ab08:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   1ab18:	6f63 6e6e 6365 6574 0d64 0000 6572 6f73     connected...reso
   1ab28:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   1ab38:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   1ab48:	2e64 6425 0a0d 0a0d 0000 0000 7473 7261     d.%d........star
   1ab58:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   1ab68:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   1ab78:	2e79 000d 7473 7261 5f74 6f64 6e77 6f6c     y...start_downlo
   1ab88:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   1ab98:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
   1aba8:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1abb8:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   1abc8:	6c61 6572 6461 2e79 000d 0000 7473 7261     already.....star
   1abd8:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   1abe8:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   1abf8:	6165 7964 0d2e 0000 7473 7261 5f74 6f64     eady....start_do
   1ac08:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   1ac18:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   1ac28:	0000 0000 7468 7074 3a73 2f2f 7777 2e77     ....https://www.
   1ac38:	6573 7361 752e 6570 6e6e 652e 7564 7e2f     seas.upenn.edu/~
   1ac48:	7262 6169 6b6e 6e77 532f 616d 7472 6f44     briankwn/SmartDo
   1ac58:	6573 6946 6d72 6177 6572 702f 7261 6d61     seFirmware/param
   1ac68:	2e73 7363 0076 0000 7468 7074 3a73 2f2f     s.csv...https://
   1ac78:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   1ac88:	7564 7e2f 7262 6169 6b6e 6e77 532f 616d     du/~briankwn/Sma
   1ac98:	7472 6f44 6573 6946 6d72 6177 6572 612f     rtDoseFirmware/a
   1aca8:	7070 622e 6e69 0000 7473 726f 5f65 6966     pp.bin..store_fi
   1acb8:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   1acc8:	6420 7461 2e61 000d 7473 726f 5f65 6966      data...store_fi
   1acd8:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   1ace8:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   1acf8:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1ad08:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   1ad18:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   1ad28:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1ad38:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1ad48:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   1ad58:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   1ad68:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1ad78:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   1ad88:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   1ad98:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1ada8:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1adb8:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   1adc8:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   1add8:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1ade8:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   1adf8:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   1ae08:	6c6c 2e79 000d 0000 6977 6966 635f 3a62     lly.....wifi_cb:
   1ae18:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   1ae28:	4554 0d44 0000 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   1ae38:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   1ae48:	454e 5443 4445 000d 6570 6e6e 3731 3034     NECTED..penn1740
   1ae58:	6977 6966 0000 0000 6941 5072 6e65 4e6e     wifi....AirPennN
   1ae68:	7465 442d 7665 6369 0065 0000 6977 6966     et-Device...wifi
   1ae78:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
   1ae88:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
   1ae98:	0000 0000 7245 6f72 2072 6f63 6e6e 6365     ....Error connec
   1aea8:	6974 676e 7420 206f 514d 5454 4220 6f72     ting to MQTT Bro
   1aeb8:	656b 2172 000d 0000                         ker!....

0001aec0 <_global_impure_ptr>:
   1aec0:	0154 2000                                   T.. 

0001aec4 <__sf_fake_stderr>:
	...

0001aee4 <__sf_fake_stdin>:
	...

0001af04 <__sf_fake_stdout>:
	...
   1af24:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   1af34:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   1af44:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   1af54:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0001af61 <_ctype_>:
   1af61:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1af71:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1af81:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1af91:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1afa1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1afb1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1afc1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1afd1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1afe1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0001b064 <_init>:
   1b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b066:	46c0      	nop			; (mov r8, r8)
   1b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b06a:	bc08      	pop	{r3}
   1b06c:	469e      	mov	lr, r3
   1b06e:	4770      	bx	lr

0001b070 <__init_array_start>:
   1b070:	0000b0dd 	.word	0x0000b0dd

0001b074 <_fini>:
   1b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b076:	46c0      	nop			; (mov r8, r8)
   1b078:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b07a:	bc08      	pop	{r3}
   1b07c:	469e      	mov	lr, r3
   1b07e:	4770      	bx	lr

0001b080 <__fini_array_start>:
   1b080:	0000b0b5 	.word	0x0000b0b5
