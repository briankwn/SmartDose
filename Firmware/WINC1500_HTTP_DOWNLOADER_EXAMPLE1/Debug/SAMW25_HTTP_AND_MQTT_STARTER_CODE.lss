
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f400  0000b000  0000b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000254  20000000  0001a400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000013d8  20000254  0001a654  00020254  2**2
                  ALLOC
  3 .stack        00002004  2000162c  0001ba2c  00020254  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000859b7  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000cada  00000000  00000000  000a5c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00021a81  00000000  00000000  000b2766  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001868  00000000  00000000  000d41e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000021f0  00000000  00000000  000d5a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017b3b  00000000  00000000  000d7c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002babd  00000000  00000000  000ef77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0a58  00000000  00000000  0011b237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ed8  00000000  00000000  001bbc90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000b000 <exception_table>:
    b000:	30 36 00 20 15 1f 01 00 11 1f 01 00 11 1f 01 00     06. ............
	...
    b02c:	11 1f 01 00 00 00 00 00 00 00 00 00 11 1f 01 00     ................
    b03c:	39 45 01 00 11 1f 01 00 11 1f 01 00 11 1f 01 00     9E..............
    b04c:	21 ff 00 00 a1 fb 00 00 11 1f 01 00 11 1f 01 00     !...............
    b05c:	11 1f 01 00 11 1f 01 00 49 03 01 00 59 03 01 00     ........I...Y...
    b06c:	69 03 01 00 79 03 01 00 89 03 01 00 99 03 01 00     i...y...........
    b07c:	e1 1e 01 00 f1 1e 01 00 01 1f 01 00 11 1f 01 00     ................
    b08c:	11 1f 01 00 11 1f 01 00 00 00 00 00 00 00 00 00     ................
    b09c:	11 1f 01 00 11 1f 01 00 11 1f 01 00 11 1f 01 00     ................
    b0ac:	11 1f 01 00 00 00 00 00                             ........

0000b0b4 <__do_global_dtors_aux>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	4c06      	ldr	r4, [pc, #24]	; (b0d0 <__do_global_dtors_aux+0x1c>)
    b0b8:	7823      	ldrb	r3, [r4, #0]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d107      	bne.n	b0ce <__do_global_dtors_aux+0x1a>
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <__do_global_dtors_aux+0x20>)
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d002      	beq.n	b0ca <__do_global_dtors_aux+0x16>
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <__do_global_dtors_aux+0x24>)
    b0c6:	e000      	b.n	b0ca <__do_global_dtors_aux+0x16>
    b0c8:	bf00      	nop
    b0ca:	2301      	movs	r3, #1
    b0cc:	7023      	strb	r3, [r4, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	20000254 	.word	0x20000254
    b0d4:	00000000 	.word	0x00000000
    b0d8:	0001a400 	.word	0x0001a400

0000b0dc <frame_dummy>:
    b0dc:	4b08      	ldr	r3, [pc, #32]	; (b100 <frame_dummy+0x24>)
    b0de:	b510      	push	{r4, lr}
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <frame_dummy+0x10>
    b0e4:	4907      	ldr	r1, [pc, #28]	; (b104 <frame_dummy+0x28>)
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <frame_dummy+0x2c>)
    b0e8:	e000      	b.n	b0ec <frame_dummy+0x10>
    b0ea:	bf00      	nop
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <frame_dummy+0x30>)
    b0ee:	6803      	ldr	r3, [r0, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <frame_dummy+0x1a>
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	4b06      	ldr	r3, [pc, #24]	; (b110 <frame_dummy+0x34>)
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d0fb      	beq.n	b0f4 <frame_dummy+0x18>
    b0fc:	4798      	blx	r3
    b0fe:	e7f9      	b.n	b0f4 <frame_dummy+0x18>
    b100:	00000000 	.word	0x00000000
    b104:	20000258 	.word	0x20000258
    b108:	0001a400 	.word	0x0001a400
    b10c:	0001a400 	.word	0x0001a400
    b110:	00000000 	.word	0x00000000

0000b114 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b114:	b510      	push	{r4, lr}
    b116:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    b118:	7c03      	ldrb	r3, [r0, #16]
    b11a:	2b00      	cmp	r3, #0
    b11c:	d005      	beq.n	b12a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b11e:	6883      	ldr	r3, [r0, #8]
    b120:	1c58      	adds	r0, r3, #1
    b122:	68e1      	ldr	r1, [r4, #12]
    b124:	4b07      	ldr	r3, [pc, #28]	; (b144 <advance_pointer+0x30>)
    b126:	4798      	blx	r3
    b128:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b12a:	6863      	ldr	r3, [r4, #4]
    b12c:	1c58      	adds	r0, r3, #1
    b12e:	68e1      	ldr	r1, [r4, #12]
    b130:	4b04      	ldr	r3, [pc, #16]	; (b144 <advance_pointer+0x30>)
    b132:	4798      	blx	r3
    b134:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b136:	68a3      	ldr	r3, [r4, #8]
    b138:	1a59      	subs	r1, r3, r1
    b13a:	424a      	negs	r2, r1
    b13c:	414a      	adcs	r2, r1
    b13e:	7422      	strb	r2, [r4, #16]
 }
    b140:	bd10      	pop	{r4, pc}
    b142:	46c0      	nop			; (mov r8, r8)
    b144:	000167a5 	.word	0x000167a5

0000b148 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b148:	b570      	push	{r4, r5, r6, lr}
    b14a:	0005      	movs	r5, r0
    b14c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b14e:	2014      	movs	r0, #20
    b150:	4b04      	ldr	r3, [pc, #16]	; (b164 <circular_buf_init+0x1c>)
    b152:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b154:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    b156:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    b158:	2300      	movs	r3, #0
    b15a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    b15c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    b15e:	7403      	strb	r3, [r0, #16]
 }
    b160:	bd70      	pop	{r4, r5, r6, pc}
    b162:	46c0      	nop			; (mov r8, r8)
    b164:	00016a21 	.word	0x00016a21

0000b168 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b168:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b16a:	6803      	ldr	r3, [r0, #0]
    b16c:	6842      	ldr	r2, [r0, #4]
    b16e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    b170:	4b01      	ldr	r3, [pc, #4]	; (b178 <circular_buf_put+0x10>)
    b172:	4798      	blx	r3
 }
    b174:	bd10      	pop	{r4, pc}
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	0000b115 	.word	0x0000b115

0000b17c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b17c:	7c02      	ldrb	r2, [r0, #16]
    b17e:	2300      	movs	r3, #0
    b180:	2a00      	cmp	r2, #0
    b182:	d105      	bne.n	b190 <circular_buf_empty+0x14>
    b184:	6843      	ldr	r3, [r0, #4]
    b186:	6880      	ldr	r0, [r0, #8]
    b188:	1a1b      	subs	r3, r3, r0
    b18a:	4258      	negs	r0, r3
    b18c:	4143      	adcs	r3, r0
    b18e:	b2db      	uxtb	r3, r3
    b190:	0018      	movs	r0, r3
 }
    b192:	4770      	bx	lr

0000b194 <circular_buf_get>:
 {
    b194:	b570      	push	{r4, r5, r6, lr}
    b196:	0004      	movs	r4, r0
    b198:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    b19a:	4b0a      	ldr	r3, [pc, #40]	; (b1c4 <circular_buf_get+0x30>)
    b19c:	4798      	blx	r3
    b19e:	2800      	cmp	r0, #0
    b1a0:	d10d      	bne.n	b1be <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    b1a2:	6823      	ldr	r3, [r4, #0]
    b1a4:	68a2      	ldr	r2, [r4, #8]
    b1a6:	5c9b      	ldrb	r3, [r3, r2]
    b1a8:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    b1aa:	2300      	movs	r3, #0
    b1ac:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b1ae:	68a3      	ldr	r3, [r4, #8]
    b1b0:	1c58      	adds	r0, r3, #1
    b1b2:	68e1      	ldr	r1, [r4, #12]
    b1b4:	4b04      	ldr	r3, [pc, #16]	; (b1c8 <circular_buf_get+0x34>)
    b1b6:	4798      	blx	r3
    b1b8:	60a1      	str	r1, [r4, #8]
		 r = 0;
    b1ba:	2000      	movs	r0, #0
 }
    b1bc:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    b1be:	2001      	movs	r0, #1
    b1c0:	4240      	negs	r0, r0
	 return r;
    b1c2:	e7fb      	b.n	b1bc <circular_buf_get+0x28>
    b1c4:	0000b17d 	.word	0x0000b17d
    b1c8:	000167a5 	.word	0x000167a5

0000b1cc <start_buzzing>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    b1cc:	2208      	movs	r2, #8
    b1ce:	4b01      	ldr	r3, [pc, #4]	; (b1d4 <start_buzzing+0x8>)
    b1d0:	619a      	str	r2, [r3, #24]
}

void start_buzzing()
{
	port_pin_set_output_level(buzzer_pin, true);
}
    b1d2:	4770      	bx	lr
    b1d4:	41004480 	.word	0x41004480

0000b1d8 <stop_buzzing>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
    b1d8:	2208      	movs	r2, #8
    b1da:	4b01      	ldr	r3, [pc, #4]	; (b1e0 <stop_buzzing+0x8>)
    b1dc:	615a      	str	r2, [r3, #20]

void stop_buzzing()
{
	port_pin_set_output_level(buzzer_pin, false);
}
    b1de:	4770      	bx	lr
    b1e0:	41004480 	.word	0x41004480

0000b1e4 <help>:
void help(){
    b1e4:	b510      	push	{r4, lr}
	SerialConsoleWriteString("\r\n");
    b1e6:	4803      	ldr	r0, [pc, #12]	; (b1f4 <help+0x10>)
    b1e8:	4c03      	ldr	r4, [pc, #12]	; (b1f8 <help+0x14>)
    b1ea:	47a0      	blx	r4
	SerialConsoleWriteString(
    b1ec:	4803      	ldr	r0, [pc, #12]	; (b1fc <help+0x18>)
    b1ee:	47a0      	blx	r4
}
    b1f0:	bd10      	pop	{r4, pc}
    b1f2:	46c0      	nop			; (mov r8, r8)
    b1f4:	00019d50 	.word	0x00019d50
    b1f8:	0000b67d 	.word	0x0000b67d
    b1fc:	000180ec 	.word	0x000180ec

0000b200 <devName>:
void devName(){
    b200:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Brian Kwon\r\n");
    b202:	4802      	ldr	r0, [pc, #8]	; (b20c <devName+0xc>)
    b204:	4b02      	ldr	r3, [pc, #8]	; (b210 <devName+0x10>)
    b206:	4798      	blx	r3
}
    b208:	bd10      	pop	{r4, pc}
    b20a:	46c0      	nop			; (mov r8, r8)
    b20c:	000180c4 	.word	0x000180c4
    b210:	0000b67d 	.word	0x0000b67d

0000b214 <ver_bl>:
void ver_bl(){
    b214:	b510      	push	{r4, lr}
	SerialConsoleWriteString("12.1.1\r\n");
    b216:	4802      	ldr	r0, [pc, #8]	; (b220 <ver_bl+0xc>)
    b218:	4b02      	ldr	r3, [pc, #8]	; (b224 <ver_bl+0x10>)
    b21a:	4798      	blx	r3
}
    b21c:	bd10      	pop	{r4, pc}
    b21e:	46c0      	nop			; (mov r8, r8)
    b220:	00018400 	.word	0x00018400
    b224:	0000b67d 	.word	0x0000b67d

0000b228 <ver_app>:
void ver_app(){
    b228:	b510      	push	{r4, lr}
	SerialConsoleWriteString("18.3.8\r\n");
    b22a:	4802      	ldr	r0, [pc, #8]	; (b234 <ver_app+0xc>)
    b22c:	4b02      	ldr	r3, [pc, #8]	; (b238 <ver_app+0x10>)
    b22e:	4798      	blx	r3
}
    b230:	bd10      	pop	{r4, pc}
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	000183f4 	.word	0x000183f4
    b238:	0000b67d 	.word	0x0000b67d

0000b23c <mac>:
void mac(){
    b23c:	b510      	push	{r4, lr}
	SerialConsoleWriteString("91-26-96-C3-F5-7B\r\n");
    b23e:	4802      	ldr	r0, [pc, #8]	; (b248 <mac+0xc>)
    b240:	4b02      	ldr	r3, [pc, #8]	; (b24c <mac+0x10>)
    b242:	4798      	blx	r3
}
    b244:	bd10      	pop	{r4, pc}
    b246:	46c0      	nop			; (mov r8, r8)
    b248:	00018300 	.word	0x00018300
    b24c:	0000b67d 	.word	0x0000b67d

0000b250 <ip>:
void ip(){
    b250:	b510      	push	{r4, lr}
	SerialConsoleWriteString("8.8.8.8\r\n");
    b252:	4802      	ldr	r0, [pc, #8]	; (b25c <ip+0xc>)
    b254:	4b02      	ldr	r3, [pc, #8]	; (b260 <ip+0x10>)
    b256:	4798      	blx	r3
}
    b258:	bd10      	pop	{r4, pc}
    b25a:	46c0      	nop			; (mov r8, r8)
    b25c:	000182f4 	.word	0x000182f4
    b260:	0000b67d 	.word	0x0000b67d

0000b264 <read_ir>:

void read_ir()
{
    b264:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    b266:	4b07      	ldr	r3, [pc, #28]	; (b284 <read_ir+0x20>)
    b268:	6a1c      	ldr	r4, [r3, #32]
	bool level=port_pin_get_input_level(ir_pin);
	SerialConsoleWriteString("Current value of IR_Sensor is:");
    b26a:	4807      	ldr	r0, [pc, #28]	; (b288 <read_ir+0x24>)
    b26c:	4b07      	ldr	r3, [pc, #28]	; (b28c <read_ir+0x28>)
    b26e:	4798      	blx	r3
	if (level == false ) SerialConsoleWriteString("true\r\n"); //Why?
    b270:	02e3      	lsls	r3, r4, #11
    b272:	d503      	bpl.n	b27c <read_ir+0x18>
	else SerialConsoleWriteString("false\r\n");
    b274:	4806      	ldr	r0, [pc, #24]	; (b290 <read_ir+0x2c>)
    b276:	4b05      	ldr	r3, [pc, #20]	; (b28c <read_ir+0x28>)
    b278:	4798      	blx	r3
}
    b27a:	bd10      	pop	{r4, pc}
	if (level == false ) SerialConsoleWriteString("true\r\n"); //Why?
    b27c:	4805      	ldr	r0, [pc, #20]	; (b294 <read_ir+0x30>)
    b27e:	4b03      	ldr	r3, [pc, #12]	; (b28c <read_ir+0x28>)
    b280:	4798      	blx	r3
    b282:	e7fa      	b.n	b27a <read_ir+0x16>
    b284:	41004400 	.word	0x41004400
    b288:	00018334 	.word	0x00018334
    b28c:	0000b67d 	.word	0x0000b67d
    b290:	0001835c 	.word	0x0001835c
    b294:	00018354 	.word	0x00018354

0000b298 <setDeviceName>:
void setDeviceName(){
    b298:	b570      	push	{r4, r5, r6, lr}
	strcpy(nameofdevice, varinp);
    b29a:	4d0d      	ldr	r5, [pc, #52]	; (b2d0 <setDeviceName+0x38>)
    b29c:	490d      	ldr	r1, [pc, #52]	; (b2d4 <setDeviceName+0x3c>)
    b29e:	0028      	movs	r0, r5
    b2a0:	4b0d      	ldr	r3, [pc, #52]	; (b2d8 <setDeviceName+0x40>)
    b2a2:	4798      	blx	r3
	strcpy(outstring,"Device name set to ");
    b2a4:	4c0d      	ldr	r4, [pc, #52]	; (b2dc <setDeviceName+0x44>)
    b2a6:	2214      	movs	r2, #20
    b2a8:	490d      	ldr	r1, [pc, #52]	; (b2e0 <setDeviceName+0x48>)
    b2aa:	0020      	movs	r0, r4
    b2ac:	4b0d      	ldr	r3, [pc, #52]	; (b2e4 <setDeviceName+0x4c>)
    b2ae:	4798      	blx	r3
	strcat(outstring, nameofdevice);
    b2b0:	0029      	movs	r1, r5
    b2b2:	0020      	movs	r0, r4
    b2b4:	4b0c      	ldr	r3, [pc, #48]	; (b2e8 <setDeviceName+0x50>)
    b2b6:	4798      	blx	r3
	SerialConsoleWriteString(outstring);
    b2b8:	0020      	movs	r0, r4
    b2ba:	4d0c      	ldr	r5, [pc, #48]	; (b2ec <setDeviceName+0x54>)
    b2bc:	47a8      	blx	r5
	SerialConsoleWriteString("\r\n");
    b2be:	480c      	ldr	r0, [pc, #48]	; (b2f0 <setDeviceName+0x58>)
    b2c0:	47a8      	blx	r5
	memset(outstring, 0, 30); //clear outstring when done with it
    b2c2:	221e      	movs	r2, #30
    b2c4:	2100      	movs	r1, #0
    b2c6:	0020      	movs	r0, r4
    b2c8:	4b0a      	ldr	r3, [pc, #40]	; (b2f4 <setDeviceName+0x5c>)
    b2ca:	4798      	blx	r3
}
    b2cc:	bd70      	pop	{r4, r5, r6, pc}
    b2ce:	46c0      	nop			; (mov r8, r8)
    b2d0:	20000e7c 	.word	0x20000e7c
    b2d4:	20000e68 	.word	0x20000e68
    b2d8:	00016f93 	.word	0x00016f93
    b2dc:	20000e48 	.word	0x20000e48
    b2e0:	00018364 	.word	0x00018364
    b2e4:	00016a49 	.word	0x00016a49
    b2e8:	00016f49 	.word	0x00016f49
    b2ec:	0000b67d 	.word	0x0000b67d
    b2f0:	00019d50 	.word	0x00019d50
    b2f4:	00016a7f 	.word	0x00016a7f

0000b2f8 <getDeviceName>:
void getDeviceName(){
    b2f8:	b570      	push	{r4, r5, r6, lr}
	strcpy(outstring, "Device name is ");
    b2fa:	4c0a      	ldr	r4, [pc, #40]	; (b324 <getDeviceName+0x2c>)
    b2fc:	2210      	movs	r2, #16
    b2fe:	490a      	ldr	r1, [pc, #40]	; (b328 <getDeviceName+0x30>)
    b300:	0020      	movs	r0, r4
    b302:	4b0a      	ldr	r3, [pc, #40]	; (b32c <getDeviceName+0x34>)
    b304:	4798      	blx	r3
	strcat(outstring, nameofdevice);
    b306:	490a      	ldr	r1, [pc, #40]	; (b330 <getDeviceName+0x38>)
    b308:	0020      	movs	r0, r4
    b30a:	4b0a      	ldr	r3, [pc, #40]	; (b334 <getDeviceName+0x3c>)
    b30c:	4798      	blx	r3
	SerialConsoleWriteString(outstring);
    b30e:	0020      	movs	r0, r4
    b310:	4d09      	ldr	r5, [pc, #36]	; (b338 <getDeviceName+0x40>)
    b312:	47a8      	blx	r5
	SerialConsoleWriteString("\r\n");
    b314:	4809      	ldr	r0, [pc, #36]	; (b33c <getDeviceName+0x44>)
    b316:	47a8      	blx	r5
	memset(outstring, 0, 30); //clear outstring when done with it
    b318:	221e      	movs	r2, #30
    b31a:	2100      	movs	r1, #0
    b31c:	0020      	movs	r0, r4
    b31e:	4b08      	ldr	r3, [pc, #32]	; (b340 <getDeviceName+0x48>)
    b320:	4798      	blx	r3
}
    b322:	bd70      	pop	{r4, r5, r6, pc}
    b324:	20000e48 	.word	0x20000e48
    b328:	000180dc 	.word	0x000180dc
    b32c:	00016a49 	.word	0x00016a49
    b330:	20000e7c 	.word	0x20000e7c
    b334:	00016f49 	.word	0x00016f49
    b338:	0000b67d 	.word	0x0000b67d
    b33c:	00019d50 	.word	0x00019d50
    b340:	00016a7f 	.word	0x00016a7f

0000b344 <pub_battery>:
	strcpy(nameofdevice, "not yet set. Use setDeviceName"); //device name stored in RAM
	inp = NULL; //pointer for input variable
	
}

void pub_battery(){
    b344:	b530      	push	{r4, r5, lr}
    b346:	b093      	sub	sp, #76	; 0x4c
	volatile char mqtt_msg1 [64]= "{\"d\":{\"bat_level\":50}}";
    b348:	ac02      	add	r4, sp, #8
    b34a:	4b11      	ldr	r3, [pc, #68]	; (b390 <pub_battery+0x4c>)
    b34c:	0022      	movs	r2, r4
    b34e:	cb23      	ldmia	r3!, {r0, r1, r5}
    b350:	c223      	stmia	r2!, {r0, r1, r5}
    b352:	cb03      	ldmia	r3!, {r0, r1}
    b354:	c203      	stmia	r2!, {r0, r1}
    b356:	8819      	ldrh	r1, [r3, #0]
    b358:	8011      	strh	r1, [r2, #0]
    b35a:	789b      	ldrb	r3, [r3, #2]
    b35c:	7093      	strb	r3, [r2, #2]
    b35e:	2229      	movs	r2, #41	; 0x29
    b360:	2100      	movs	r1, #0
    b362:	201f      	movs	r0, #31
    b364:	4468      	add	r0, sp
    b366:	4b0b      	ldr	r3, [pc, #44]	; (b394 <pub_battery+0x50>)
    b368:	4798      	blx	r3
	mqtt_publish(&mqtt_instance, BATTERY_TOPIC, mqtt_msg1, strlen(mqtt_msg1), 2, 0);
    b36a:	0020      	movs	r0, r4
    b36c:	4b0a      	ldr	r3, [pc, #40]	; (b398 <pub_battery+0x54>)
    b36e:	4798      	blx	r3
    b370:	0003      	movs	r3, r0
    b372:	2200      	movs	r2, #0
    b374:	9201      	str	r2, [sp, #4]
    b376:	3202      	adds	r2, #2
    b378:	9200      	str	r2, [sp, #0]
    b37a:	0022      	movs	r2, r4
    b37c:	4907      	ldr	r1, [pc, #28]	; (b39c <pub_battery+0x58>)
    b37e:	4808      	ldr	r0, [pc, #32]	; (b3a0 <pub_battery+0x5c>)
    b380:	4c08      	ldr	r4, [pc, #32]	; (b3a4 <pub_battery+0x60>)
    b382:	47a0      	blx	r4
	SerialConsoleWriteString("I Published\r\n");
    b384:	4808      	ldr	r0, [pc, #32]	; (b3a8 <pub_battery+0x64>)
    b386:	4b09      	ldr	r3, [pc, #36]	; (b3ac <pub_battery+0x68>)
    b388:	4798      	blx	r3
}
    b38a:	b013      	add	sp, #76	; 0x4c
    b38c:	bd30      	pop	{r4, r5, pc}
    b38e:	46c0      	nop			; (mov r8, r8)
    b390:	00018060 	.word	0x00018060
    b394:	00016a7f 	.word	0x00016a7f
    b398:	00016fdf 	.word	0x00016fdf
    b39c:	00018314 	.word	0x00018314
    b3a0:	20000eb0 	.word	0x20000eb0
    b3a4:	00014871 	.word	0x00014871
    b3a8:	00018324 	.word	0x00018324
    b3ac:	0000b67d 	.word	0x0000b67d

0000b3b0 <execConsoleCommand>:
void execConsoleCommand(char *name){
    b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3b2:	0005      	movs	r5, r0
	inp = NULL;
    b3b4:	4e17      	ldr	r6, [pc, #92]	; (b414 <execConsoleCommand+0x64>)
    b3b6:	2300      	movs	r3, #0
    b3b8:	6033      	str	r3, [r6, #0]
	inp = strchr(name,' '); //get pointer of space character
    b3ba:	2120      	movs	r1, #32
    b3bc:	4b16      	ldr	r3, [pc, #88]	; (b418 <execConsoleCommand+0x68>)
    b3be:	4798      	blx	r3
    b3c0:	1e04      	subs	r4, r0, #0
    b3c2:	6030      	str	r0, [r6, #0]
	if(inp != NULL){ // if we find a space
    b3c4:	d00b      	beq.n	b3de <execConsoleCommand+0x2e>
		memset(varinp, 0, 20); // clear input variable
    b3c6:	4e15      	ldr	r6, [pc, #84]	; (b41c <execConsoleCommand+0x6c>)
    b3c8:	2214      	movs	r2, #20
    b3ca:	2100      	movs	r1, #0
    b3cc:	0030      	movs	r0, r6
    b3ce:	4b14      	ldr	r3, [pc, #80]	; (b420 <execConsoleCommand+0x70>)
    b3d0:	4798      	blx	r3
		strcpy(varinp, (inp +1)); //copy everything after the space into new variable
    b3d2:	1c61      	adds	r1, r4, #1
    b3d4:	0030      	movs	r0, r6
    b3d6:	4b13      	ldr	r3, [pc, #76]	; (b424 <execConsoleCommand+0x74>)
    b3d8:	4798      	blx	r3
		*inp = '\0'; //terminate the string on the space
    b3da:	2300      	movs	r3, #0
    b3dc:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < NUMOFCMDS; i++){
    b3de:	2400      	movs	r4, #0
		if (strcmp(name, commandarr[i].name) == 0){
    b3e0:	4f11      	ldr	r7, [pc, #68]	; (b428 <execConsoleCommand+0x78>)
    b3e2:	4e12      	ldr	r6, [pc, #72]	; (b42c <execConsoleCommand+0x7c>)
    b3e4:	00e3      	lsls	r3, r4, #3
    b3e6:	59d9      	ldr	r1, [r3, r7]
    b3e8:	0028      	movs	r0, r5
    b3ea:	47b0      	blx	r6
    b3ec:	2800      	cmp	r0, #0
    b3ee:	d006      	beq.n	b3fe <execConsoleCommand+0x4e>
	for (int i = 0; i < NUMOFCMDS; i++){
    b3f0:	3401      	adds	r4, #1
    b3f2:	2c0c      	cmp	r4, #12
    b3f4:	d1f6      	bne.n	b3e4 <execConsoleCommand+0x34>
	SerialConsoleWriteString("ERROR\r\n"); // if we get to here there's no match
    b3f6:	480e      	ldr	r0, [pc, #56]	; (b430 <execConsoleCommand+0x80>)
    b3f8:	4b0e      	ldr	r3, [pc, #56]	; (b434 <execConsoleCommand+0x84>)
    b3fa:	4798      	blx	r3
}
    b3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			commandarr[i].cmd();
    b3fe:	00e4      	lsls	r4, r4, #3
    b400:	4b09      	ldr	r3, [pc, #36]	; (b428 <execConsoleCommand+0x78>)
    b402:	191c      	adds	r4, r3, r4
    b404:	6863      	ldr	r3, [r4, #4]
    b406:	4798      	blx	r3
			memset(varinp, 0, 20); // clear input variable -- prevents using the <devicename> input from the previous function, still bugs on error <deviceName>
    b408:	2214      	movs	r2, #20
    b40a:	2100      	movs	r1, #0
    b40c:	4803      	ldr	r0, [pc, #12]	; (b41c <execConsoleCommand+0x6c>)
    b40e:	4b04      	ldr	r3, [pc, #16]	; (b420 <execConsoleCommand+0x70>)
    b410:	4798      	blx	r3
			return;
    b412:	e7f3      	b.n	b3fc <execConsoleCommand+0x4c>
    b414:	20000e2c 	.word	0x20000e2c
    b418:	00016f63 	.word	0x00016f63
    b41c:	20000e68 	.word	0x20000e68
    b420:	00016a7f 	.word	0x00016a7f
    b424:	00016f93 	.word	0x00016f93
    b428:	20000000 	.word	0x20000000
    b42c:	00016f7f 	.word	0x00016f7f
    b430:	000180d4 	.word	0x000180d4
    b434:	0000b67d 	.word	0x0000b67d

0000b438 <ReadIntoBuffer>:
void ReadIntoBuffer(){
    b438:	b570      	push	{r4, r5, r6, lr}
	if(rxBuffRdy > 0){
    b43a:	4b21      	ldr	r3, [pc, #132]	; (b4c0 <ReadIntoBuffer+0x88>)
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	2b00      	cmp	r3, #0
    b440:	d100      	bne.n	b444 <ReadIntoBuffer+0xc>
}
    b442:	bd70      	pop	{r4, r5, r6, pc}
		if(SerialConsoleReadCharacter(&command[cmditer]) == 0){
    b444:	4b1f      	ldr	r3, [pc, #124]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b446:	7818      	ldrb	r0, [r3, #0]
    b448:	4b1f      	ldr	r3, [pc, #124]	; (b4c8 <ReadIntoBuffer+0x90>)
    b44a:	18c0      	adds	r0, r0, r3
    b44c:	4b1f      	ldr	r3, [pc, #124]	; (b4cc <ReadIntoBuffer+0x94>)
    b44e:	4798      	blx	r3
    b450:	2800      	cmp	r0, #0
    b452:	d1f6      	bne.n	b442 <ReadIntoBuffer+0xa>
			if(command[cmditer] == '\r'){ //carriage return detect
    b454:	4b1b      	ldr	r3, [pc, #108]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	4a1b      	ldr	r2, [pc, #108]	; (b4c8 <ReadIntoBuffer+0x90>)
    b45a:	5cd3      	ldrb	r3, [r2, r3]
    b45c:	2b0d      	cmp	r3, #13
    b45e:	d00e      	beq.n	b47e <ReadIntoBuffer+0x46>
			if(command[cmditer] == '\b'){
    b460:	4b18      	ldr	r3, [pc, #96]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b462:	781b      	ldrb	r3, [r3, #0]
    b464:	4a18      	ldr	r2, [pc, #96]	; (b4c8 <ReadIntoBuffer+0x90>)
    b466:	5cd3      	ldrb	r3, [r2, r3]
    b468:	2b08      	cmp	r3, #8
    b46a:	d01b      	beq.n	b4a4 <ReadIntoBuffer+0x6c>
			cmditer ++;
    b46c:	4a15      	ldr	r2, [pc, #84]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b46e:	7813      	ldrb	r3, [r2, #0]
    b470:	3301      	adds	r3, #1
    b472:	7013      	strb	r3, [r2, #0]
			rxBuffRdy --;
    b474:	4a12      	ldr	r2, [pc, #72]	; (b4c0 <ReadIntoBuffer+0x88>)
    b476:	7813      	ldrb	r3, [r2, #0]
    b478:	3b01      	subs	r3, #1
    b47a:	7013      	strb	r3, [r2, #0]
}
    b47c:	e7e1      	b.n	b442 <ReadIntoBuffer+0xa>
				SerialConsoleWriteString("\r\n"); // fixing mirroring for carriage return
    b47e:	4814      	ldr	r0, [pc, #80]	; (b4d0 <ReadIntoBuffer+0x98>)
    b480:	4b14      	ldr	r3, [pc, #80]	; (b4d4 <ReadIntoBuffer+0x9c>)
    b482:	4798      	blx	r3
				command[cmditer] = '\0'; // turn into c string for processing
    b484:	4c10      	ldr	r4, [pc, #64]	; (b4c8 <ReadIntoBuffer+0x90>)
    b486:	4d0f      	ldr	r5, [pc, #60]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b488:	782b      	ldrb	r3, [r5, #0]
    b48a:	2200      	movs	r2, #0
    b48c:	54e2      	strb	r2, [r4, r3]
				execConsoleCommand(&command);
    b48e:	0020      	movs	r0, r4
    b490:	4b11      	ldr	r3, [pc, #68]	; (b4d8 <ReadIntoBuffer+0xa0>)
    b492:	4798      	blx	r3
				memset(command, 0, 20);//clear command buffer when done with command
    b494:	2214      	movs	r2, #20
    b496:	2100      	movs	r1, #0
    b498:	0020      	movs	r0, r4
    b49a:	4b10      	ldr	r3, [pc, #64]	; (b4dc <ReadIntoBuffer+0xa4>)
    b49c:	4798      	blx	r3
				cmditer = -1; //reset index once buffer is cleared
    b49e:	23ff      	movs	r3, #255	; 0xff
    b4a0:	702b      	strb	r3, [r5, #0]
    b4a2:	e7dd      	b.n	b460 <ReadIntoBuffer+0x28>
				SerialConsoleWriteString(bkspc);
    b4a4:	480e      	ldr	r0, [pc, #56]	; (b4e0 <ReadIntoBuffer+0xa8>)
    b4a6:	4b0b      	ldr	r3, [pc, #44]	; (b4d4 <ReadIntoBuffer+0x9c>)
    b4a8:	4798      	blx	r3
				command[cmditer] = '\0';
    b4aa:	4906      	ldr	r1, [pc, #24]	; (b4c4 <ReadIntoBuffer+0x8c>)
    b4ac:	780b      	ldrb	r3, [r1, #0]
    b4ae:	4806      	ldr	r0, [pc, #24]	; (b4c8 <ReadIntoBuffer+0x90>)
    b4b0:	2400      	movs	r4, #0
    b4b2:	54c4      	strb	r4, [r0, r3]
				cmditer --;
    b4b4:	1e5a      	subs	r2, r3, #1
				command[cmditer]= '\0';
    b4b6:	b2d2      	uxtb	r2, r2
    b4b8:	5484      	strb	r4, [r0, r2]
				cmditer --;
    b4ba:	3b02      	subs	r3, #2
    b4bc:	700b      	strb	r3, [r1, #0]
    b4be:	e7d5      	b.n	b46c <ReadIntoBuffer+0x34>
    b4c0:	20000e30 	.word	0x20000e30
    b4c4:	20000e31 	.word	0x20000e31
    b4c8:	20000e34 	.word	0x20000e34
    b4cc:	0000b735 	.word	0x0000b735
    b4d0:	00019d50 	.word	0x00019d50
    b4d4:	0000b67d 	.word	0x0000b67d
    b4d8:	0000b3b1 	.word	0x0000b3b1
    b4dc:	00016a7f 	.word	0x00016a7f
    b4e0:	000180a0 	.word	0x000180a0

0000b4e4 <cli_init>:
void cli_init(struct mqtt_module *mqtt_inst_ref){
    b4e4:	b570      	push	{r4, r5, r6, lr}
    b4e6:	0001      	movs	r1, r0
	mqtt_instance = *mqtt_inst_ref;
    b4e8:	2238      	movs	r2, #56	; 0x38
    b4ea:	4807      	ldr	r0, [pc, #28]	; (b508 <cli_init+0x24>)
    b4ec:	4d07      	ldr	r5, [pc, #28]	; (b50c <cli_init+0x28>)
    b4ee:	47a8      	blx	r5
	cmditer=0; //location in read in command buffer
    b4f0:	2400      	movs	r4, #0
    b4f2:	4b07      	ldr	r3, [pc, #28]	; (b510 <cli_init+0x2c>)
    b4f4:	701c      	strb	r4, [r3, #0]
	rxBuffRdy = 0;
    b4f6:	4b07      	ldr	r3, [pc, #28]	; (b514 <cli_init+0x30>)
    b4f8:	701c      	strb	r4, [r3, #0]
	strcpy(nameofdevice, "not yet set. Use setDeviceName"); //device name stored in RAM
    b4fa:	221f      	movs	r2, #31
    b4fc:	4906      	ldr	r1, [pc, #24]	; (b518 <cli_init+0x34>)
    b4fe:	4807      	ldr	r0, [pc, #28]	; (b51c <cli_init+0x38>)
    b500:	47a8      	blx	r5
	inp = NULL; //pointer for input variable
    b502:	4b07      	ldr	r3, [pc, #28]	; (b520 <cli_init+0x3c>)
    b504:	601c      	str	r4, [r3, #0]
}
    b506:	bd70      	pop	{r4, r5, r6, pc}
    b508:	20000eb0 	.word	0x20000eb0
    b50c:	00016a49 	.word	0x00016a49
    b510:	20000e31 	.word	0x20000e31
    b514:	20000e30 	.word	0x20000e30
    b518:	000180a4 	.word	0x000180a4
    b51c:	20000e7c 	.word	0x20000e7c
    b520:	20000e2c 	.word	0x20000e2c

0000b524 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    b524:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    b526:	4b06      	ldr	r3, [pc, #24]	; (b540 <usart_write_callback+0x1c>)
    b528:	6818      	ldr	r0, [r3, #0]
    b52a:	4906      	ldr	r1, [pc, #24]	; (b544 <usart_write_callback+0x20>)
    b52c:	4b06      	ldr	r3, [pc, #24]	; (b548 <usart_write_callback+0x24>)
    b52e:	4798      	blx	r3
    b530:	1c43      	adds	r3, r0, #1
    b532:	d004      	beq.n	b53e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b534:	2201      	movs	r2, #1
    b536:	4903      	ldr	r1, [pc, #12]	; (b544 <usart_write_callback+0x20>)
    b538:	4804      	ldr	r0, [pc, #16]	; (b54c <usart_write_callback+0x28>)
    b53a:	4b05      	ldr	r3, [pc, #20]	; (b550 <usart_write_callback+0x2c>)
    b53c:	4798      	blx	r3
	}
	
}
    b53e:	bd10      	pop	{r4, pc}
    b540:	20001328 	.word	0x20001328
    b544:	20001324 	.word	0x20001324
    b548:	0000b195 	.word	0x0000b195
    b54c:	20000ee8 	.word	0x20000ee8
    b550:	00010f21 	.word	0x00010f21

0000b554 <InitializeSerialConsole>:
{
    b554:	b530      	push	{r4, r5, lr}
    b556:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    b558:	2580      	movs	r5, #128	; 0x80
    b55a:	00ad      	lsls	r5, r5, #2
    b55c:	0029      	movs	r1, r5
    b55e:	4836      	ldr	r0, [pc, #216]	; (b638 <InitializeSerialConsole+0xe4>)
    b560:	4c36      	ldr	r4, [pc, #216]	; (b63c <InitializeSerialConsole+0xe8>)
    b562:	47a0      	blx	r4
    b564:	4b36      	ldr	r3, [pc, #216]	; (b640 <InitializeSerialConsole+0xec>)
    b566:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    b568:	0029      	movs	r1, r5
    b56a:	4836      	ldr	r0, [pc, #216]	; (b644 <InitializeSerialConsole+0xf0>)
    b56c:	47a0      	blx	r4
    b56e:	4b36      	ldr	r3, [pc, #216]	; (b648 <InitializeSerialConsole+0xf4>)
    b570:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b572:	2380      	movs	r3, #128	; 0x80
    b574:	05db      	lsls	r3, r3, #23
    b576:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b578:	2300      	movs	r3, #0
    b57a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b57c:	22ff      	movs	r2, #255	; 0xff
    b57e:	4669      	mov	r1, sp
    b580:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b582:	2200      	movs	r2, #0
    b584:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b586:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b588:	2101      	movs	r1, #1
    b58a:	2024      	movs	r0, #36	; 0x24
    b58c:	466c      	mov	r4, sp
    b58e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b590:	3001      	adds	r0, #1
    b592:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b594:	3125      	adds	r1, #37	; 0x25
    b596:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b598:	3101      	adds	r1, #1
    b59a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b59c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b59e:	3105      	adds	r1, #5
    b5a0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b5a2:	3101      	adds	r1, #1
    b5a4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b5a6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b5a8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b5aa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b5ac:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b5ae:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b5b0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b5b2:	2313      	movs	r3, #19
    b5b4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b5b6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    b5b8:	23e1      	movs	r3, #225	; 0xe1
    b5ba:	025b      	lsls	r3, r3, #9
    b5bc:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b5be:	23c4      	movs	r3, #196	; 0xc4
    b5c0:	039b      	lsls	r3, r3, #14
    b5c2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b5c4:	2301      	movs	r3, #1
    b5c6:	425b      	negs	r3, r3
    b5c8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b5ca:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b5cc:	4b1f      	ldr	r3, [pc, #124]	; (b64c <InitializeSerialConsole+0xf8>)
    b5ce:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b5d0:	4b1f      	ldr	r3, [pc, #124]	; (b650 <InitializeSerialConsole+0xfc>)
    b5d2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    b5d4:	4d1f      	ldr	r5, [pc, #124]	; (b654 <InitializeSerialConsole+0x100>)
    b5d6:	4c20      	ldr	r4, [pc, #128]	; (b658 <InitializeSerialConsole+0x104>)
    b5d8:	466a      	mov	r2, sp
    b5da:	4920      	ldr	r1, [pc, #128]	; (b65c <InitializeSerialConsole+0x108>)
    b5dc:	0028      	movs	r0, r5
    b5de:	47a0      	blx	r4
    b5e0:	2800      	cmp	r0, #0
    b5e2:	d1f9      	bne.n	b5d8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b5e4:	4d1b      	ldr	r5, [pc, #108]	; (b654 <InitializeSerialConsole+0x100>)
    b5e6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b5e8:	0020      	movs	r0, r4
    b5ea:	4b1d      	ldr	r3, [pc, #116]	; (b660 <InitializeSerialConsole+0x10c>)
    b5ec:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b5ee:	231f      	movs	r3, #31
    b5f0:	4018      	ands	r0, r3
    b5f2:	3b1e      	subs	r3, #30
    b5f4:	4083      	lsls	r3, r0
    b5f6:	4a1b      	ldr	r2, [pc, #108]	; (b664 <InitializeSerialConsole+0x110>)
    b5f8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b5fa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b5fc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b5fe:	2b00      	cmp	r3, #0
    b600:	d1fc      	bne.n	b5fc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b602:	6823      	ldr	r3, [r4, #0]
    b604:	2202      	movs	r2, #2
    b606:	4313      	orrs	r3, r2
    b608:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    b60a:	4c12      	ldr	r4, [pc, #72]	; (b654 <InitializeSerialConsole+0x100>)
    b60c:	2200      	movs	r2, #0
    b60e:	4916      	ldr	r1, [pc, #88]	; (b668 <InitializeSerialConsole+0x114>)
    b610:	0020      	movs	r0, r4
    b612:	4d16      	ldr	r5, [pc, #88]	; (b66c <InitializeSerialConsole+0x118>)
    b614:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    b616:	2201      	movs	r2, #1
    b618:	4915      	ldr	r1, [pc, #84]	; (b670 <InitializeSerialConsole+0x11c>)
    b61a:	0020      	movs	r0, r4
    b61c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b61e:	2231      	movs	r2, #49	; 0x31
    b620:	5ca3      	ldrb	r3, [r4, r2]
    b622:	2103      	movs	r1, #3
    b624:	430b      	orrs	r3, r1
    b626:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    b628:	3a30      	subs	r2, #48	; 0x30
    b62a:	4912      	ldr	r1, [pc, #72]	; (b674 <InitializeSerialConsole+0x120>)
    b62c:	0020      	movs	r0, r4
    b62e:	4b12      	ldr	r3, [pc, #72]	; (b678 <InitializeSerialConsole+0x124>)
    b630:	4798      	blx	r3
}
    b632:	b011      	add	sp, #68	; 0x44
    b634:	bd30      	pop	{r4, r5, pc}
    b636:	46c0      	nop			; (mov r8, r8)
    b638:	20001124 	.word	0x20001124
    b63c:	0000b149 	.word	0x0000b149
    b640:	20000f1c 	.word	0x20000f1c
    b644:	20000f24 	.word	0x20000f24
    b648:	20001328 	.word	0x20001328
    b64c:	002a0003 	.word	0x002a0003
    b650:	002b0003 	.word	0x002b0003
    b654:	20000ee8 	.word	0x20000ee8
    b658:	00010a9d 	.word	0x00010a9d
    b65c:	42001800 	.word	0x42001800
    b660:	00010319 	.word	0x00010319
    b664:	e000e100 	.word	0xe000e100
    b668:	0000b525 	.word	0x0000b525
    b66c:	00010f09 	.word	0x00010f09
    b670:	0000b6f1 	.word	0x0000b6f1
    b674:	20000f20 	.word	0x20000f20
    b678:	00010f41 	.word	0x00010f41

0000b67c <SerialConsoleWriteString>:
{
    b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b67e:	46c6      	mov	lr, r8
    b680:	b500      	push	{lr}
    b682:	0005      	movs	r5, r0
    b684:	2400      	movs	r4, #0
	if(string != NULL)
    b686:	2800      	cmp	r0, #0
    b688:	d012      	beq.n	b6b0 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
    b68a:	4e11      	ldr	r6, [pc, #68]	; (b6d0 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
    b68c:	4f11      	ldr	r7, [pc, #68]	; (b6d4 <SerialConsoleWriteString+0x58>)
    b68e:	4b12      	ldr	r3, [pc, #72]	; (b6d8 <SerialConsoleWriteString+0x5c>)
    b690:	4698      	mov	r8, r3
    b692:	e003      	b.n	b69c <SerialConsoleWriteString+0x20>
    b694:	5d29      	ldrb	r1, [r5, r4]
    b696:	6838      	ldr	r0, [r7, #0]
    b698:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    b69a:	3401      	adds	r4, #1
    b69c:	0028      	movs	r0, r5
    b69e:	47b0      	blx	r6
    b6a0:	4284      	cmp	r4, r0
    b6a2:	d3f7      	bcc.n	b694 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    b6a4:	2101      	movs	r1, #1
    b6a6:	480d      	ldr	r0, [pc, #52]	; (b6dc <SerialConsoleWriteString+0x60>)
    b6a8:	4b0d      	ldr	r3, [pc, #52]	; (b6e0 <SerialConsoleWriteString+0x64>)
    b6aa:	4798      	blx	r3
    b6ac:	2800      	cmp	r0, #0
    b6ae:	d002      	beq.n	b6b6 <SerialConsoleWriteString+0x3a>
}
    b6b0:	bc04      	pop	{r2}
    b6b2:	4690      	mov	r8, r2
    b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    b6b6:	4c0b      	ldr	r4, [pc, #44]	; (b6e4 <SerialConsoleWriteString+0x68>)
    b6b8:	4b06      	ldr	r3, [pc, #24]	; (b6d4 <SerialConsoleWriteString+0x58>)
    b6ba:	6818      	ldr	r0, [r3, #0]
    b6bc:	0021      	movs	r1, r4
    b6be:	4b0a      	ldr	r3, [pc, #40]	; (b6e8 <SerialConsoleWriteString+0x6c>)
    b6c0:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b6c2:	2201      	movs	r2, #1
    b6c4:	0021      	movs	r1, r4
    b6c6:	4805      	ldr	r0, [pc, #20]	; (b6dc <SerialConsoleWriteString+0x60>)
    b6c8:	4b08      	ldr	r3, [pc, #32]	; (b6ec <SerialConsoleWriteString+0x70>)
    b6ca:	4798      	blx	r3
}
    b6cc:	e7f0      	b.n	b6b0 <SerialConsoleWriteString+0x34>
    b6ce:	46c0      	nop			; (mov r8, r8)
    b6d0:	00016fdf 	.word	0x00016fdf
    b6d4:	20001328 	.word	0x20001328
    b6d8:	0000b169 	.word	0x0000b169
    b6dc:	20000ee8 	.word	0x20000ee8
    b6e0:	00010f61 	.word	0x00010f61
    b6e4:	20001324 	.word	0x20001324
    b6e8:	0000b195 	.word	0x0000b195
    b6ec:	00010f21 	.word	0x00010f21

0000b6f0 <usart_read_callback>:
{
    b6f0:	b510      	push	{r4, lr}
	SerialConsoleWriteString(&latestRx);
    b6f2:	4c09      	ldr	r4, [pc, #36]	; (b718 <usart_read_callback+0x28>)
    b6f4:	0020      	movs	r0, r4
    b6f6:	4b09      	ldr	r3, [pc, #36]	; (b71c <usart_read_callback+0x2c>)
    b6f8:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    b6fa:	7821      	ldrb	r1, [r4, #0]
    b6fc:	4b08      	ldr	r3, [pc, #32]	; (b720 <usart_read_callback+0x30>)
    b6fe:	6818      	ldr	r0, [r3, #0]
    b700:	4b08      	ldr	r3, [pc, #32]	; (b724 <usart_read_callback+0x34>)
    b702:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    b704:	2201      	movs	r2, #1
    b706:	0021      	movs	r1, r4
    b708:	4807      	ldr	r0, [pc, #28]	; (b728 <usart_read_callback+0x38>)
    b70a:	4b08      	ldr	r3, [pc, #32]	; (b72c <usart_read_callback+0x3c>)
    b70c:	4798      	blx	r3
	rxBuffRdy = rxBuffRdy + 1;;
    b70e:	4a08      	ldr	r2, [pc, #32]	; (b730 <usart_read_callback+0x40>)
    b710:	7813      	ldrb	r3, [r2, #0]
    b712:	3301      	adds	r3, #1
    b714:	7013      	strb	r3, [r2, #0]
}
    b716:	bd10      	pop	{r4, pc}
    b718:	20000f20 	.word	0x20000f20
    b71c:	0000b67d 	.word	0x0000b67d
    b720:	20000f1c 	.word	0x20000f1c
    b724:	0000b169 	.word	0x0000b169
    b728:	20000ee8 	.word	0x20000ee8
    b72c:	00010f41 	.word	0x00010f41
    b730:	20000e30 	.word	0x20000e30

0000b734 <SerialConsoleReadCharacter>:
{
    b734:	b510      	push	{r4, lr}
    b736:	0001      	movs	r1, r0
	return circular_buf_get(cbufRx, (uint8_t*) rxChar);
    b738:	4b02      	ldr	r3, [pc, #8]	; (b744 <SerialConsoleReadCharacter+0x10>)
    b73a:	6818      	ldr	r0, [r3, #0]
    b73c:	4b02      	ldr	r3, [pc, #8]	; (b748 <SerialConsoleReadCharacter+0x14>)
    b73e:	4798      	blx	r3
}
    b740:	bd10      	pop	{r4, pc}
    b742:	46c0      	nop			; (mov r8, r8)
    b744:	20000f1c 	.word	0x20000f1c
    b748:	0000b195 	.word	0x0000b195

0000b74c <GetUsartModule>:


struct usart_module* GetUsartModule(void)
{
	return &usart_instance;
    b74c:	4800      	ldr	r0, [pc, #0]	; (b750 <GetUsartModule+0x4>)
    b74e:	4770      	bx	lr
    b750:	20000ee8 	.word	0x20000ee8

0000b754 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b754:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b756:	4b06      	ldr	r3, [pc, #24]	; (b770 <sd_mmc_configure_slot+0x1c>)
    b758:	6819      	ldr	r1, [r3, #0]
    b75a:	7f8b      	ldrb	r3, [r1, #30]
    b75c:	1e5a      	subs	r2, r3, #1
    b75e:	4193      	sbcs	r3, r2
    b760:	b2db      	uxtb	r3, r3
    b762:	7b4a      	ldrb	r2, [r1, #13]
    b764:	6809      	ldr	r1, [r1, #0]
    b766:	4803      	ldr	r0, [pc, #12]	; (b774 <sd_mmc_configure_slot+0x20>)
    b768:	7800      	ldrb	r0, [r0, #0]
    b76a:	4c03      	ldr	r4, [pc, #12]	; (b778 <sd_mmc_configure_slot+0x24>)
    b76c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    b76e:	bd10      	pop	{r4, pc}
    b770:	20000270 	.word	0x20000270
    b774:	20000298 	.word	0x20000298
    b778:	0000c3fd 	.word	0x0000c3fd

0000b77c <sd_mmc_select_slot>:
{
    b77c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    b77e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    b780:	2800      	cmp	r0, #0
    b782:	d001      	beq.n	b788 <sd_mmc_select_slot+0xc>
}
    b784:	0018      	movs	r0, r3
    b786:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b788:	4b0e      	ldr	r3, [pc, #56]	; (b7c4 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b78a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b78c:	3b03      	subs	r3, #3
    b78e:	2b01      	cmp	r3, #1
    b790:	d90d      	bls.n	b7ae <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    b792:	2200      	movs	r2, #0
    b794:	4b0c      	ldr	r3, [pc, #48]	; (b7c8 <sd_mmc_select_slot+0x4c>)
    b796:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b798:	4c0a      	ldr	r4, [pc, #40]	; (b7c4 <sd_mmc_select_slot+0x48>)
    b79a:	4b0c      	ldr	r3, [pc, #48]	; (b7cc <sd_mmc_select_slot+0x50>)
    b79c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    b79e:	4b0c      	ldr	r3, [pc, #48]	; (b7d0 <sd_mmc_select_slot+0x54>)
    b7a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b7a2:	7aa3      	ldrb	r3, [r4, #10]
    b7a4:	3b02      	subs	r3, #2
    b7a6:	4258      	negs	r0, r3
    b7a8:	4143      	adcs	r3, r0
    b7aa:	b2db      	uxtb	r3, r3
    b7ac:	e7ea      	b.n	b784 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b7ae:	4b05      	ldr	r3, [pc, #20]	; (b7c4 <sd_mmc_select_slot+0x48>)
    b7b0:	2202      	movs	r2, #2
    b7b2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b7b4:	4a07      	ldr	r2, [pc, #28]	; (b7d4 <sd_mmc_select_slot+0x58>)
    b7b6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    b7b8:	2201      	movs	r2, #1
    b7ba:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    b7bc:	2200      	movs	r2, #0
    b7be:	779a      	strb	r2, [r3, #30]
    b7c0:	e7e7      	b.n	b792 <sd_mmc_select_slot+0x16>
    b7c2:	46c0      	nop			; (mov r8, r8)
    b7c4:	20000274 	.word	0x20000274
    b7c8:	20000298 	.word	0x20000298
    b7cc:	20000270 	.word	0x20000270
    b7d0:	0000b755 	.word	0x0000b755
    b7d4:	00061a80 	.word	0x00061a80

0000b7d8 <sd_mmc_cmd13>:
{
    b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7da:	4d09      	ldr	r5, [pc, #36]	; (b800 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b7dc:	4f09      	ldr	r7, [pc, #36]	; (b804 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    b7de:	4e0a      	ldr	r6, [pc, #40]	; (b808 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b7e0:	2100      	movs	r1, #0
    b7e2:	480a      	ldr	r0, [pc, #40]	; (b80c <sd_mmc_cmd13+0x34>)
    b7e4:	47b8      	blx	r7
    b7e6:	1e04      	subs	r4, r0, #0
    b7e8:	d007      	beq.n	b7fa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    b7ea:	47b0      	blx	r6
    b7ec:	23ff      	movs	r3, #255	; 0xff
    b7ee:	4203      	tst	r3, r0
    b7f0:	d003      	beq.n	b7fa <sd_mmc_cmd13+0x22>
    b7f2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    b7f4:	2d00      	cmp	r5, #0
    b7f6:	d1f3      	bne.n	b7e0 <sd_mmc_cmd13+0x8>
			return false;
    b7f8:	2400      	movs	r4, #0
}
    b7fa:	0020      	movs	r0, r4
    b7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7fe:	46c0      	nop			; (mov r8, r8)
    b800:	00030d41 	.word	0x00030d41
    b804:	0000c641 	.word	0x0000c641
    b808:	0000c659 	.word	0x0000c659
    b80c:	00001b0d 	.word	0x00001b0d

0000b810 <sd_mmc_cmd9_spi>:
{
    b810:	b510      	push	{r4, lr}
    b812:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b814:	4b0c      	ldr	r3, [pc, #48]	; (b848 <sd_mmc_cmd9_spi+0x38>)
    b816:	681b      	ldr	r3, [r3, #0]
    b818:	8919      	ldrh	r1, [r3, #8]
    b81a:	0409      	lsls	r1, r1, #16
    b81c:	2301      	movs	r3, #1
    b81e:	9300      	str	r3, [sp, #0]
    b820:	2210      	movs	r2, #16
    b822:	480a      	ldr	r0, [pc, #40]	; (b84c <sd_mmc_cmd9_spi+0x3c>)
    b824:	4c0a      	ldr	r4, [pc, #40]	; (b850 <sd_mmc_cmd9_spi+0x40>)
    b826:	47a0      	blx	r4
    b828:	2800      	cmp	r0, #0
    b82a:	d101      	bne.n	b830 <sd_mmc_cmd9_spi+0x20>
}
    b82c:	b002      	add	sp, #8
    b82e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b830:	4b05      	ldr	r3, [pc, #20]	; (b848 <sd_mmc_cmd9_spi+0x38>)
    b832:	6818      	ldr	r0, [r3, #0]
    b834:	300e      	adds	r0, #14
    b836:	2101      	movs	r1, #1
    b838:	4b06      	ldr	r3, [pc, #24]	; (b854 <sd_mmc_cmd9_spi+0x44>)
    b83a:	4798      	blx	r3
    b83c:	2800      	cmp	r0, #0
    b83e:	d0f5      	beq.n	b82c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    b840:	4b05      	ldr	r3, [pc, #20]	; (b858 <sd_mmc_cmd9_spi+0x48>)
    b842:	4798      	blx	r3
    b844:	e7f2      	b.n	b82c <sd_mmc_cmd9_spi+0x1c>
    b846:	46c0      	nop			; (mov r8, r8)
    b848:	20000270 	.word	0x20000270
    b84c:	00081109 	.word	0x00081109
    b850:	0000c4b1 	.word	0x0000c4b1
    b854:	0000c6dd 	.word	0x0000c6dd
    b858:	0000c769 	.word	0x0000c769

0000b85c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    b85c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    b85e:	4b04      	ldr	r3, [pc, #16]	; (b870 <sd_mmc_deselect_slot+0x14>)
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	2b00      	cmp	r3, #0
    b864:	d000      	beq.n	b868 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    b866:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    b868:	2000      	movs	r0, #0
    b86a:	4b02      	ldr	r3, [pc, #8]	; (b874 <sd_mmc_deselect_slot+0x18>)
    b86c:	4798      	blx	r3
}
    b86e:	e7fa      	b.n	b866 <sd_mmc_deselect_slot+0xa>
    b870:	20000298 	.word	0x20000298
    b874:	0000c451 	.word	0x0000c451

0000b878 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b878:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b87a:	2204      	movs	r2, #4
    b87c:	4b03      	ldr	r3, [pc, #12]	; (b88c <sd_mmc_init+0x14>)
    b87e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b880:	32fb      	adds	r2, #251	; 0xfb
    b882:	4b03      	ldr	r3, [pc, #12]	; (b890 <sd_mmc_init+0x18>)
    b884:	701a      	strb	r2, [r3, #0]
	driver_init();
    b886:	4b03      	ldr	r3, [pc, #12]	; (b894 <sd_mmc_init+0x1c>)
    b888:	4798      	blx	r3
}
    b88a:	bd10      	pop	{r4, pc}
    b88c:	20000274 	.word	0x20000274
    b890:	20000298 	.word	0x20000298
    b894:	0000c2fd 	.word	0x0000c2fd

0000b898 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b898:	b5f0      	push	{r4, r5, r6, r7, lr}
    b89a:	46c6      	mov	lr, r8
    b89c:	b500      	push	{lr}
    b89e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b8a0:	4bcb      	ldr	r3, [pc, #812]	; (bbd0 <sd_mmc_check+0x338>)
    b8a2:	4798      	blx	r3
    b8a4:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b8a6:	2801      	cmp	r0, #1
    b8a8:	d006      	beq.n	b8b8 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    b8aa:	4bca      	ldr	r3, [pc, #808]	; (bbd4 <sd_mmc_check+0x33c>)
    b8ac:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    b8ae:	0020      	movs	r0, r4
    b8b0:	b008      	add	sp, #32
    b8b2:	bc04      	pop	{r2}
    b8b4:	4690      	mov	r8, r2
    b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    b8b8:	4bc7      	ldr	r3, [pc, #796]	; (bbd8 <sd_mmc_check+0x340>)
    b8ba:	681b      	ldr	r3, [r3, #0]
    b8bc:	2201      	movs	r2, #1
    b8be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b8c0:	2200      	movs	r2, #0
    b8c2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b8c4:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    b8c6:	4bc5      	ldr	r3, [pc, #788]	; (bbdc <sd_mmc_check+0x344>)
    b8c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b8ca:	2100      	movs	r1, #0
    b8cc:	2088      	movs	r0, #136	; 0x88
    b8ce:	0140      	lsls	r0, r0, #5
    b8d0:	4bc3      	ldr	r3, [pc, #780]	; (bbe0 <sd_mmc_check+0x348>)
    b8d2:	4798      	blx	r3
    b8d4:	2800      	cmp	r0, #0
    b8d6:	d107      	bne.n	b8e8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b8d8:	4bbf      	ldr	r3, [pc, #764]	; (bbd8 <sd_mmc_check+0x340>)
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	2203      	movs	r2, #3
    b8de:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b8e0:	4bbc      	ldr	r3, [pc, #752]	; (bbd4 <sd_mmc_check+0x33c>)
    b8e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b8e4:	2403      	movs	r4, #3
    b8e6:	e7e2      	b.n	b8ae <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b8e8:	21d5      	movs	r1, #213	; 0xd5
    b8ea:	0049      	lsls	r1, r1, #1
    b8ec:	48bd      	ldr	r0, [pc, #756]	; (bbe4 <sd_mmc_check+0x34c>)
    b8ee:	4bbc      	ldr	r3, [pc, #752]	; (bbe0 <sd_mmc_check+0x348>)
    b8f0:	4798      	blx	r3
	*v2 = 0;
    b8f2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b8f4:	2800      	cmp	r0, #0
    b8f6:	d125      	bne.n	b944 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b8f8:	4bb7      	ldr	r3, [pc, #732]	; (bbd8 <sd_mmc_check+0x340>)
    b8fa:	681b      	ldr	r3, [r3, #0]
    b8fc:	7adb      	ldrb	r3, [r3, #11]
    b8fe:	07db      	lsls	r3, r3, #31
    b900:	d500      	bpl.n	b904 <sd_mmc_check+0x6c>
    b902:	e1eb      	b.n	bcdc <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b904:	4bb4      	ldr	r3, [pc, #720]	; (bbd8 <sd_mmc_check+0x340>)
    b906:	681b      	ldr	r3, [r3, #0]
    b908:	7ada      	ldrb	r2, [r3, #11]
    b90a:	2309      	movs	r3, #9
    b90c:	4013      	ands	r3, r2
    b90e:	2b01      	cmp	r3, #1
    b910:	d10f      	bne.n	b932 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b912:	2180      	movs	r1, #128	; 0x80
    b914:	0089      	lsls	r1, r1, #2
    b916:	48b4      	ldr	r0, [pc, #720]	; (bbe8 <sd_mmc_check+0x350>)
    b918:	4bb1      	ldr	r3, [pc, #708]	; (bbe0 <sd_mmc_check+0x348>)
    b91a:	4798      	blx	r3
    b91c:	2800      	cmp	r0, #0
    b91e:	d0db      	beq.n	b8d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b920:	4bad      	ldr	r3, [pc, #692]	; (bbd8 <sd_mmc_check+0x340>)
    b922:	681b      	ldr	r3, [r3, #0]
    b924:	7adb      	ldrb	r3, [r3, #11]
    b926:	07db      	lsls	r3, r3, #31
    b928:	d503      	bpl.n	b932 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    b92a:	4bb0      	ldr	r3, [pc, #704]	; (bbec <sd_mmc_check+0x354>)
    b92c:	4798      	blx	r3
    b92e:	2800      	cmp	r0, #0
    b930:	d0d2      	beq.n	b8d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b932:	4baf      	ldr	r3, [pc, #700]	; (bbf0 <sd_mmc_check+0x358>)
    b934:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b936:	4ba8      	ldr	r3, [pc, #672]	; (bbd8 <sd_mmc_check+0x340>)
    b938:	681b      	ldr	r3, [r3, #0]
    b93a:	2200      	movs	r2, #0
    b93c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b93e:	4ba5      	ldr	r3, [pc, #660]	; (bbd4 <sd_mmc_check+0x33c>)
    b940:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    b942:	e7b4      	b.n	b8ae <sd_mmc_check+0x16>
	resp = driver_get_response();
    b944:	4bab      	ldr	r3, [pc, #684]	; (bbf4 <sd_mmc_check+0x35c>)
    b946:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    b948:	1c43      	adds	r3, r0, #1
    b94a:	d100      	bne.n	b94e <sd_mmc_check+0xb6>
    b94c:	e1c4      	b.n	bcd8 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b94e:	0500      	lsls	r0, r0, #20
    b950:	0d00      	lsrs	r0, r0, #20
    b952:	23d5      	movs	r3, #213	; 0xd5
    b954:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    b956:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b958:	4298      	cmp	r0, r3
    b95a:	d1bd      	bne.n	b8d8 <sd_mmc_check+0x40>
    b95c:	e7cc      	b.n	b8f8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b95e:	2100      	movs	r1, #0
    b960:	48a5      	ldr	r0, [pc, #660]	; (bbf8 <sd_mmc_check+0x360>)
    b962:	4b9f      	ldr	r3, [pc, #636]	; (bbe0 <sd_mmc_check+0x348>)
    b964:	4798      	blx	r3
    b966:	2800      	cmp	r0, #0
    b968:	d119      	bne.n	b99e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    b96a:	4b9b      	ldr	r3, [pc, #620]	; (bbd8 <sd_mmc_check+0x340>)
    b96c:	681b      	ldr	r3, [r3, #0]
    b96e:	2202      	movs	r2, #2
    b970:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b972:	2100      	movs	r1, #0
    b974:	2088      	movs	r0, #136	; 0x88
    b976:	0140      	lsls	r0, r0, #5
    b978:	4b99      	ldr	r3, [pc, #612]	; (bbe0 <sd_mmc_check+0x348>)
    b97a:	4798      	blx	r3
    b97c:	2800      	cmp	r0, #0
    b97e:	d0ab      	beq.n	b8d8 <sd_mmc_check+0x40>
    b980:	4d9e      	ldr	r5, [pc, #632]	; (bbfc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b982:	4f97      	ldr	r7, [pc, #604]	; (bbe0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    b984:	4e9b      	ldr	r6, [pc, #620]	; (bbf4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b986:	2100      	movs	r1, #0
    b988:	489d      	ldr	r0, [pc, #628]	; (bc00 <sd_mmc_check+0x368>)
    b98a:	47b8      	blx	r7
    b98c:	2800      	cmp	r0, #0
    b98e:	d0a3      	beq.n	b8d8 <sd_mmc_check+0x40>
		resp = driver_get_response();
    b990:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    b992:	07c3      	lsls	r3, r0, #31
    b994:	d57d      	bpl.n	ba92 <sd_mmc_check+0x1fa>
    b996:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    b998:	2d00      	cmp	r5, #0
    b99a:	d1f4      	bne.n	b986 <sd_mmc_check+0xee>
    b99c:	e79c      	b.n	b8d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    b99e:	4b95      	ldr	r3, [pc, #596]	; (bbf4 <sd_mmc_check+0x35c>)
    b9a0:	4798      	blx	r3
    b9a2:	0043      	lsls	r3, r0, #1
    b9a4:	d505      	bpl.n	b9b2 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b9a6:	4b8c      	ldr	r3, [pc, #560]	; (bbd8 <sd_mmc_check+0x340>)
    b9a8:	681a      	ldr	r2, [r3, #0]
    b9aa:	7ad3      	ldrb	r3, [r2, #11]
    b9ac:	2108      	movs	r1, #8
    b9ae:	430b      	orrs	r3, r1
    b9b0:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b9b2:	2100      	movs	r1, #0
    b9b4:	4893      	ldr	r0, [pc, #588]	; (bc04 <sd_mmc_check+0x36c>)
    b9b6:	4b8a      	ldr	r3, [pc, #552]	; (bbe0 <sd_mmc_check+0x348>)
    b9b8:	4798      	blx	r3
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d08c      	beq.n	b8d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b9be:	4b86      	ldr	r3, [pc, #536]	; (bbd8 <sd_mmc_check+0x340>)
    b9c0:	681b      	ldr	r3, [r3, #0]
    b9c2:	7adb      	ldrb	r3, [r3, #11]
    b9c4:	07da      	lsls	r2, r3, #31
    b9c6:	d400      	bmi.n	b9ca <sd_mmc_check+0x132>
    b9c8:	e1a4      	b.n	bd14 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    b9ca:	4b8f      	ldr	r3, [pc, #572]	; (bc08 <sd_mmc_check+0x370>)
    b9cc:	4798      	blx	r3
    b9ce:	2800      	cmp	r0, #0
    b9d0:	d082      	beq.n	b8d8 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b9d2:	4b81      	ldr	r3, [pc, #516]	; (bbd8 <sd_mmc_check+0x340>)
    b9d4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b9d6:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b9d8:	2107      	movs	r1, #7
    b9da:	4019      	ands	r1, r3
    b9dc:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b9de:	488b      	ldr	r0, [pc, #556]	; (bc0c <sd_mmc_check+0x374>)
    b9e0:	5808      	ldr	r0, [r1, r0]
    b9e2:	21fa      	movs	r1, #250	; 0xfa
    b9e4:	0089      	lsls	r1, r1, #2
    b9e6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    b9e8:	065b      	lsls	r3, r3, #25
    b9ea:	0f1b      	lsrs	r3, r3, #28
    b9ec:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b9ee:	4888      	ldr	r0, [pc, #544]	; (bc10 <sd_mmc_check+0x378>)
    b9f0:	581b      	ldr	r3, [r3, r0]
    b9f2:	434b      	muls	r3, r1
    b9f4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    b9f6:	7b93      	ldrb	r3, [r2, #14]
    b9f8:	099b      	lsrs	r3, r3, #6
    b9fa:	d000      	beq.n	b9fe <sd_mmc_check+0x166>
    b9fc:	e13c      	b.n	bc78 <sd_mmc_check+0x3e0>
    b9fe:	7d91      	ldrb	r1, [r2, #22]
    ba00:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    ba02:	7d53      	ldrb	r3, [r2, #21]
    ba04:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    ba06:	7d10      	ldrb	r0, [r2, #20]
    ba08:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    ba0a:	4303      	orrs	r3, r0
    ba0c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    ba0e:	7e10      	ldrb	r0, [r2, #24]
    ba10:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    ba12:	7dd1      	ldrb	r1, [r2, #23]
    ba14:	0049      	lsls	r1, r1, #1
    ba16:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    ba18:	051b      	lsls	r3, r3, #20
    ba1a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    ba1c:	3301      	adds	r3, #1
    ba1e:	2107      	movs	r1, #7
    ba20:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    ba22:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    ba24:	408b      	lsls	r3, r1
    ba26:	7cd0      	ldrb	r0, [r2, #19]
    ba28:	210f      	movs	r1, #15
    ba2a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    ba2c:	408b      	lsls	r3, r1
				/ 1024;
    ba2e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    ba30:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    ba32:	8911      	ldrh	r1, [r2, #8]
    ba34:	0409      	lsls	r1, r1, #16
    ba36:	4877      	ldr	r0, [pc, #476]	; (bc14 <sd_mmc_check+0x37c>)
    ba38:	4b69      	ldr	r3, [pc, #420]	; (bbe0 <sd_mmc_check+0x348>)
    ba3a:	4798      	blx	r3
    ba3c:	2800      	cmp	r0, #0
    ba3e:	d100      	bne.n	ba42 <sd_mmc_check+0x1aa>
    ba40:	e74a      	b.n	b8d8 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    ba42:	2301      	movs	r3, #1
    ba44:	9300      	str	r3, [sp, #0]
    ba46:	2208      	movs	r2, #8
    ba48:	2100      	movs	r1, #0
    ba4a:	4873      	ldr	r0, [pc, #460]	; (bc18 <sd_mmc_check+0x380>)
    ba4c:	4d73      	ldr	r5, [pc, #460]	; (bc1c <sd_mmc_check+0x384>)
    ba4e:	47a8      	blx	r5
    ba50:	2800      	cmp	r0, #0
    ba52:	d100      	bne.n	ba56 <sd_mmc_check+0x1be>
    ba54:	e740      	b.n	b8d8 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    ba56:	2101      	movs	r1, #1
    ba58:	a806      	add	r0, sp, #24
    ba5a:	4b71      	ldr	r3, [pc, #452]	; (bc20 <sd_mmc_check+0x388>)
    ba5c:	4798      	blx	r3
    ba5e:	2800      	cmp	r0, #0
    ba60:	d100      	bne.n	ba64 <sd_mmc_check+0x1cc>
    ba62:	e739      	b.n	b8d8 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    ba64:	4b6f      	ldr	r3, [pc, #444]	; (bc24 <sd_mmc_check+0x38c>)
    ba66:	4798      	blx	r3
    ba68:	2800      	cmp	r0, #0
    ba6a:	d100      	bne.n	ba6e <sd_mmc_check+0x1d6>
    ba6c:	e734      	b.n	b8d8 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    ba6e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    ba70:	781b      	ldrb	r3, [r3, #0]
    ba72:	220f      	movs	r2, #15
    ba74:	4013      	ands	r3, r2
    ba76:	2b01      	cmp	r3, #1
    ba78:	d100      	bne.n	ba7c <sd_mmc_check+0x1e4>
    ba7a:	e119      	b.n	bcb0 <sd_mmc_check+0x418>
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d100      	bne.n	ba82 <sd_mmc_check+0x1ea>
    ba80:	e109      	b.n	bc96 <sd_mmc_check+0x3fe>
    ba82:	2b02      	cmp	r3, #2
    ba84:	d100      	bne.n	ba88 <sd_mmc_check+0x1f0>
    ba86:	e118      	b.n	bcba <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    ba88:	4b53      	ldr	r3, [pc, #332]	; (bbd8 <sd_mmc_check+0x340>)
    ba8a:	681b      	ldr	r3, [r3, #0]
    ba8c:	2210      	movs	r2, #16
    ba8e:	731a      	strb	r2, [r3, #12]
    ba90:	e105      	b.n	bc9e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    ba92:	2100      	movs	r1, #0
    ba94:	4858      	ldr	r0, [pc, #352]	; (bbf8 <sd_mmc_check+0x360>)
    ba96:	4b52      	ldr	r3, [pc, #328]	; (bbe0 <sd_mmc_check+0x348>)
    ba98:	4798      	blx	r3
    ba9a:	2800      	cmp	r0, #0
    ba9c:	d100      	bne.n	baa0 <sd_mmc_check+0x208>
    ba9e:	e71b      	b.n	b8d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    baa0:	4b54      	ldr	r3, [pc, #336]	; (bbf4 <sd_mmc_check+0x35c>)
    baa2:	4798      	blx	r3
    baa4:	23c0      	movs	r3, #192	; 0xc0
    baa6:	05db      	lsls	r3, r3, #23
    baa8:	4018      	ands	r0, r3
    baaa:	2380      	movs	r3, #128	; 0x80
    baac:	05db      	lsls	r3, r3, #23
    baae:	4298      	cmp	r0, r3
    bab0:	d105      	bne.n	babe <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    bab2:	4b49      	ldr	r3, [pc, #292]	; (bbd8 <sd_mmc_check+0x340>)
    bab4:	681a      	ldr	r2, [r3, #0]
    bab6:	7ad1      	ldrb	r1, [r2, #11]
    bab8:	2308      	movs	r3, #8
    baba:	430b      	orrs	r3, r1
    babc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    babe:	2100      	movs	r1, #0
    bac0:	4850      	ldr	r0, [pc, #320]	; (bc04 <sd_mmc_check+0x36c>)
    bac2:	4b47      	ldr	r3, [pc, #284]	; (bbe0 <sd_mmc_check+0x348>)
    bac4:	4798      	blx	r3
    bac6:	2800      	cmp	r0, #0
    bac8:	d100      	bne.n	bacc <sd_mmc_check+0x234>
    baca:	e705      	b.n	b8d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    bacc:	4b4e      	ldr	r3, [pc, #312]	; (bc08 <sd_mmc_check+0x370>)
    bace:	4798      	blx	r3
    bad0:	2800      	cmp	r0, #0
    bad2:	d100      	bne.n	bad6 <sd_mmc_check+0x23e>
    bad4:	e700      	b.n	b8d8 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    bad6:	4b40      	ldr	r3, [pc, #256]	; (bbd8 <sd_mmc_check+0x340>)
    bad8:	681a      	ldr	r2, [r3, #0]
    bada:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    badc:	069b      	lsls	r3, r3, #26
    bade:	0f1b      	lsrs	r3, r3, #28
    bae0:	2b02      	cmp	r3, #2
    bae2:	d100      	bne.n	bae6 <sd_mmc_check+0x24e>
    bae4:	e0a8      	b.n	bc38 <sd_mmc_check+0x3a0>
    bae6:	d907      	bls.n	baf8 <sd_mmc_check+0x260>
    bae8:	2b03      	cmp	r3, #3
    baea:	d100      	bne.n	baee <sd_mmc_check+0x256>
    baec:	e0a7      	b.n	bc3e <sd_mmc_check+0x3a6>
    baee:	2b04      	cmp	r3, #4
    baf0:	d104      	bne.n	bafc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    baf2:	2340      	movs	r3, #64	; 0x40
    baf4:	7313      	strb	r3, [r2, #12]
    baf6:	e003      	b.n	bb00 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    baf8:	2b01      	cmp	r3, #1
    bafa:	d066      	beq.n	bbca <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    bafc:	2312      	movs	r3, #18
    bafe:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb00:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    bb02:	0659      	lsls	r1, r3, #25
    bb04:	0f09      	lsrs	r1, r1, #28
    bb06:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    bb08:	2007      	movs	r0, #7
    bb0a:	4003      	ands	r3, r0
    bb0c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    bb0e:	483f      	ldr	r0, [pc, #252]	; (bc0c <sd_mmc_check+0x374>)
    bb10:	5818      	ldr	r0, [r3, r0]
    bb12:	23fa      	movs	r3, #250	; 0xfa
    bb14:	009b      	lsls	r3, r3, #2
    bb16:	4343      	muls	r3, r0
    bb18:	4843      	ldr	r0, [pc, #268]	; (bc28 <sd_mmc_check+0x390>)
    bb1a:	5809      	ldr	r1, [r1, r0]
    bb1c:	434b      	muls	r3, r1
    bb1e:	6013      	str	r3, [r2, #0]
    bb20:	7d91      	ldrb	r1, [r2, #22]
    bb22:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bb24:	7d53      	ldrb	r3, [r2, #21]
    bb26:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb28:	7d10      	ldrb	r0, [r2, #20]
    bb2a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb2c:	4303      	orrs	r3, r0
    bb2e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    bb30:	051b      	lsls	r3, r3, #20
    bb32:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    bb34:	493d      	ldr	r1, [pc, #244]	; (bc2c <sd_mmc_check+0x394>)
    bb36:	428b      	cmp	r3, r1
    bb38:	d00f      	beq.n	bb5a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb3a:	7e10      	ldrb	r0, [r2, #24]
    bb3c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bb3e:	7dd1      	ldrb	r1, [r2, #23]
    bb40:	0049      	lsls	r1, r1, #1
    bb42:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    bb44:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    bb46:	2007      	movs	r0, #7
    bb48:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    bb4a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    bb4c:	408b      	lsls	r3, r1
    bb4e:	7cd1      	ldrb	r1, [r2, #19]
    bb50:	3008      	adds	r0, #8
    bb52:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    bb54:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    bb56:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    bb58:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    bb5a:	7b13      	ldrb	r3, [r2, #12]
    bb5c:	2b3f      	cmp	r3, #63	; 0x3f
    bb5e:	d97b      	bls.n	bc58 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    bb60:	2100      	movs	r1, #0
    bb62:	9100      	str	r1, [sp, #0]
    bb64:	2301      	movs	r3, #1
    bb66:	2280      	movs	r2, #128	; 0x80
    bb68:	0092      	lsls	r2, r2, #2
    bb6a:	4831      	ldr	r0, [pc, #196]	; (bc30 <sd_mmc_check+0x398>)
    bb6c:	4d2b      	ldr	r5, [pc, #172]	; (bc1c <sd_mmc_check+0x384>)
    bb6e:	47a8      	blx	r5
    bb70:	2800      	cmp	r0, #0
    bb72:	d100      	bne.n	bb76 <sd_mmc_check+0x2de>
    bb74:	e6b0      	b.n	b8d8 <sd_mmc_check+0x40>
    bb76:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    bb78:	4e2e      	ldr	r6, [pc, #184]	; (bc34 <sd_mmc_check+0x39c>)
    bb7a:	a805      	add	r0, sp, #20
    bb7c:	47b0      	blx	r6
    bb7e:	2800      	cmp	r0, #0
    bb80:	d100      	bne.n	bb84 <sd_mmc_check+0x2ec>
    bb82:	e6a9      	b.n	b8d8 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    bb84:	3501      	adds	r5, #1
    bb86:	b2ad      	uxth	r5, r5
    bb88:	2d32      	cmp	r5, #50	; 0x32
    bb8a:	d1f6      	bne.n	bb7a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    bb8c:	4b12      	ldr	r3, [pc, #72]	; (bbd8 <sd_mmc_check+0x340>)
    bb8e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bb90:	7d8a      	ldrb	r2, [r1, #22]
    bb92:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bb94:	7d4b      	ldrb	r3, [r1, #21]
    bb96:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb98:	7d09      	ldrb	r1, [r1, #20]
    bb9a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bb9c:	430b      	orrs	r3, r1
    bb9e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    bba0:	051b      	lsls	r3, r3, #20
    bba2:	0d1b      	lsrs	r3, r3, #20
    bba4:	4a21      	ldr	r2, [pc, #132]	; (bc2c <sd_mmc_check+0x394>)
    bba6:	4293      	cmp	r3, r2
    bba8:	d154      	bne.n	bc54 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    bbaa:	4e22      	ldr	r6, [pc, #136]	; (bc34 <sd_mmc_check+0x39c>)
    bbac:	a806      	add	r0, sp, #24
    bbae:	47b0      	blx	r6
    bbb0:	2800      	cmp	r0, #0
    bbb2:	d100      	bne.n	bbb6 <sd_mmc_check+0x31e>
    bbb4:	e690      	b.n	b8d8 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    bbb6:	3501      	adds	r5, #1
    bbb8:	b2ad      	uxth	r5, r5
    bbba:	2d35      	cmp	r5, #53	; 0x35
    bbbc:	d9f6      	bls.n	bbac <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    bbbe:	4b06      	ldr	r3, [pc, #24]	; (bbd8 <sd_mmc_check+0x340>)
    bbc0:	681a      	ldr	r2, [r3, #0]
    bbc2:	9b06      	ldr	r3, [sp, #24]
    bbc4:	085b      	lsrs	r3, r3, #1
    bbc6:	6053      	str	r3, [r2, #4]
    bbc8:	e044      	b.n	bc54 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    bbca:	2314      	movs	r3, #20
    bbcc:	7313      	strb	r3, [r2, #12]
    bbce:	e797      	b.n	bb00 <sd_mmc_check+0x268>
    bbd0:	0000b77d 	.word	0x0000b77d
    bbd4:	0000b85d 	.word	0x0000b85d
    bbd8:	20000270 	.word	0x20000270
    bbdc:	0000c479 	.word	0x0000c479
    bbe0:	0000c641 	.word	0x0000c641
    bbe4:	00005508 	.word	0x00005508
    bbe8:	00001110 	.word	0x00001110
    bbec:	0000b7d9 	.word	0x0000b7d9
    bbf0:	0000b755 	.word	0x0000b755
    bbf4:	0000c659 	.word	0x0000c659
    bbf8:	0000053a 	.word	0x0000053a
    bbfc:	00001bef 	.word	0x00001bef
    bc00:	00001101 	.word	0x00001101
    bc04:	0000113b 	.word	0x0000113b
    bc08:	0000b811 	.word	0x0000b811
    bc0c:	0001844c 	.word	0x0001844c
    bc10:	00018468 	.word	0x00018468
    bc14:	00001137 	.word	0x00001137
    bc18:	00081133 	.word	0x00081133
    bc1c:	0000c4b1 	.word	0x0000c4b1
    bc20:	0000c6dd 	.word	0x0000c6dd
    bc24:	0000c769 	.word	0x0000c769
    bc28:	0001840c 	.word	0x0001840c
    bc2c:	00000fff 	.word	0x00000fff
    bc30:	00081108 	.word	0x00081108
    bc34:	0000c665 	.word	0x0000c665
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    bc38:	2322      	movs	r3, #34	; 0x22
    bc3a:	7313      	strb	r3, [r2, #12]
    bc3c:	e760      	b.n	bb00 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    bc3e:	2330      	movs	r3, #48	; 0x30
    bc40:	7313      	strb	r3, [r2, #12]
    bc42:	e75d      	b.n	bb00 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    bc44:	a806      	add	r0, sp, #24
    bc46:	4b36      	ldr	r3, [pc, #216]	; (bd20 <sd_mmc_check+0x488>)
    bc48:	4798      	blx	r3
    bc4a:	2800      	cmp	r0, #0
    bc4c:	d100      	bne.n	bc50 <sd_mmc_check+0x3b8>
    bc4e:	e643      	b.n	b8d8 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    bc50:	3501      	adds	r5, #1
    bc52:	b2ad      	uxth	r5, r5
    bc54:	2d7f      	cmp	r5, #127	; 0x7f
    bc56:	d9f5      	bls.n	bc44 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    bc58:	2180      	movs	r1, #128	; 0x80
    bc5a:	0089      	lsls	r1, r1, #2
    bc5c:	4831      	ldr	r0, [pc, #196]	; (bd24 <sd_mmc_check+0x48c>)
    bc5e:	4b32      	ldr	r3, [pc, #200]	; (bd28 <sd_mmc_check+0x490>)
    bc60:	4798      	blx	r3
    bc62:	2800      	cmp	r0, #0
    bc64:	d100      	bne.n	bc68 <sd_mmc_check+0x3d0>
    bc66:	e637      	b.n	b8d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    bc68:	4b30      	ldr	r3, [pc, #192]	; (bd2c <sd_mmc_check+0x494>)
    bc6a:	4798      	blx	r3
    bc6c:	2800      	cmp	r0, #0
    bc6e:	d100      	bne.n	bc72 <sd_mmc_check+0x3da>
    bc70:	e632      	b.n	b8d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    bc72:	4b2f      	ldr	r3, [pc, #188]	; (bd30 <sd_mmc_check+0x498>)
    bc74:	4798      	blx	r3
    bc76:	e65e      	b.n	b936 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bc78:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    bc7a:	7d93      	ldrb	r3, [r2, #22]
    bc7c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bc7e:	7d51      	ldrb	r1, [r2, #21]
    bc80:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    bc82:	430b      	orrs	r3, r1
    bc84:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    bc86:	029b      	lsls	r3, r3, #10
				* 512;
    bc88:	085b      	lsrs	r3, r3, #1
    bc8a:	2180      	movs	r1, #128	; 0x80
    bc8c:	0089      	lsls	r1, r1, #2
    bc8e:	468c      	mov	ip, r1
    bc90:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    bc92:	6053      	str	r3, [r2, #4]
    bc94:	e6cd      	b.n	ba32 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    bc96:	4b27      	ldr	r3, [pc, #156]	; (bd34 <sd_mmc_check+0x49c>)
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	2210      	movs	r2, #16
    bc9c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bc9e:	4b25      	ldr	r3, [pc, #148]	; (bd34 <sd_mmc_check+0x49c>)
    bca0:	681b      	ldr	r3, [r3, #0]
    bca2:	7adb      	ldrb	r3, [r3, #11]
    bca4:	2209      	movs	r2, #9
    bca6:	4013      	ands	r3, r2
    bca8:	2b01      	cmp	r3, #1
    bcaa:	d000      	beq.n	bcae <sd_mmc_check+0x416>
    bcac:	e638      	b.n	b920 <sd_mmc_check+0x88>
    bcae:	e630      	b.n	b912 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    bcb0:	4b20      	ldr	r3, [pc, #128]	; (bd34 <sd_mmc_check+0x49c>)
    bcb2:	681b      	ldr	r3, [r3, #0]
    bcb4:	221a      	movs	r2, #26
    bcb6:	731a      	strb	r2, [r3, #12]
    bcb8:	e7f1      	b.n	bc9e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    bcba:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    bcbc:	789b      	ldrb	r3, [r3, #2]
    bcbe:	09db      	lsrs	r3, r3, #7
    bcc0:	2b01      	cmp	r3, #1
    bcc2:	d104      	bne.n	bcce <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    bcc4:	4b1b      	ldr	r3, [pc, #108]	; (bd34 <sd_mmc_check+0x49c>)
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	2230      	movs	r2, #48	; 0x30
    bcca:	731a      	strb	r2, [r3, #12]
    bccc:	e7e7      	b.n	bc9e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    bcce:	4b19      	ldr	r3, [pc, #100]	; (bd34 <sd_mmc_check+0x49c>)
    bcd0:	681b      	ldr	r3, [r3, #0]
    bcd2:	2220      	movs	r2, #32
    bcd4:	731a      	strb	r2, [r3, #12]
    bcd6:	e7e2      	b.n	bc9e <sd_mmc_check+0x406>
	*v2 = 0;
    bcd8:	2600      	movs	r6, #0
    bcda:	e60d      	b.n	b8f8 <sd_mmc_check+0x60>
    bcdc:	1e73      	subs	r3, r6, #1
    bcde:	419e      	sbcs	r6, r3
    bce0:	07b3      	lsls	r3, r6, #30
    bce2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    bce4:	4d14      	ldr	r5, [pc, #80]	; (bd38 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bce6:	4f10      	ldr	r7, [pc, #64]	; (bd28 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bce8:	46b8      	mov	r8, r7
		resp = driver_get_response();
    bcea:	4e14      	ldr	r6, [pc, #80]	; (bd3c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    bcec:	2100      	movs	r1, #0
    bcee:	4814      	ldr	r0, [pc, #80]	; (bd40 <sd_mmc_check+0x4a8>)
    bcf0:	47b8      	blx	r7
    bcf2:	2800      	cmp	r0, #0
    bcf4:	d100      	bne.n	bcf8 <sd_mmc_check+0x460>
    bcf6:	e638      	b.n	b96a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    bcf8:	9903      	ldr	r1, [sp, #12]
    bcfa:	4812      	ldr	r0, [pc, #72]	; (bd44 <sd_mmc_check+0x4ac>)
    bcfc:	47c0      	blx	r8
    bcfe:	2800      	cmp	r0, #0
    bd00:	d100      	bne.n	bd04 <sd_mmc_check+0x46c>
    bd02:	e632      	b.n	b96a <sd_mmc_check+0xd2>
		resp = driver_get_response();
    bd04:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    bd06:	07c3      	lsls	r3, r0, #31
    bd08:	d400      	bmi.n	bd0c <sd_mmc_check+0x474>
    bd0a:	e628      	b.n	b95e <sd_mmc_check+0xc6>
    bd0c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    bd0e:	2d00      	cmp	r5, #0
    bd10:	d1ec      	bne.n	bcec <sd_mmc_check+0x454>
    bd12:	e62a      	b.n	b96a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    bd14:	2209      	movs	r2, #9
    bd16:	4013      	ands	r3, r2
    bd18:	2b01      	cmp	r3, #1
    bd1a:	d000      	beq.n	bd1e <sd_mmc_check+0x486>
    bd1c:	e609      	b.n	b932 <sd_mmc_check+0x9a>
    bd1e:	e5f8      	b.n	b912 <sd_mmc_check+0x7a>
    bd20:	0000c665 	.word	0x0000c665
    bd24:	00001110 	.word	0x00001110
    bd28:	0000c641 	.word	0x0000c641
    bd2c:	0000b7d9 	.word	0x0000b7d9
    bd30:	0000b755 	.word	0x0000b755
    bd34:	20000270 	.word	0x20000270
    bd38:	00001bef 	.word	0x00001bef
    bd3c:	0000c659 	.word	0x0000c659
    bd40:	00001137 	.word	0x00001137
    bd44:	00001129 	.word	0x00001129

0000bd48 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    bd48:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bd4a:	4b06      	ldr	r3, [pc, #24]	; (bd64 <sd_mmc_get_type+0x1c>)
    bd4c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    bd4e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bd50:	2800      	cmp	r0, #0
    bd52:	d001      	beq.n	bd58 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    bd54:	0018      	movs	r0, r3
    bd56:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bd58:	4b03      	ldr	r3, [pc, #12]	; (bd68 <sd_mmc_get_type+0x20>)
    bd5a:	4798      	blx	r3
	return sd_mmc_card->type;
    bd5c:	4b03      	ldr	r3, [pc, #12]	; (bd6c <sd_mmc_get_type+0x24>)
    bd5e:	681b      	ldr	r3, [r3, #0]
    bd60:	7adb      	ldrb	r3, [r3, #11]
    bd62:	e7f7      	b.n	bd54 <sd_mmc_get_type+0xc>
    bd64:	0000b77d 	.word	0x0000b77d
    bd68:	0000b85d 	.word	0x0000b85d
    bd6c:	20000270 	.word	0x20000270

0000bd70 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    bd70:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bd72:	4b06      	ldr	r3, [pc, #24]	; (bd8c <sd_mmc_get_capacity+0x1c>)
    bd74:	4798      	blx	r3
		return 0;
    bd76:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bd78:	2800      	cmp	r0, #0
    bd7a:	d001      	beq.n	bd80 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    bd7c:	0018      	movs	r0, r3
    bd7e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    bd80:	4b03      	ldr	r3, [pc, #12]	; (bd90 <sd_mmc_get_capacity+0x20>)
    bd82:	4798      	blx	r3
	return sd_mmc_card->capacity;
    bd84:	4b03      	ldr	r3, [pc, #12]	; (bd94 <sd_mmc_get_capacity+0x24>)
    bd86:	681b      	ldr	r3, [r3, #0]
    bd88:	685b      	ldr	r3, [r3, #4]
    bd8a:	e7f7      	b.n	bd7c <sd_mmc_get_capacity+0xc>
    bd8c:	0000b77d 	.word	0x0000b77d
    bd90:	0000b85d 	.word	0x0000b85d
    bd94:	20000270 	.word	0x20000270

0000bd98 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    bd98:	2000      	movs	r0, #0
    bd9a:	4770      	bx	lr

0000bd9c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bd9c:	b570      	push	{r4, r5, r6, lr}
    bd9e:	b082      	sub	sp, #8
    bda0:	000e      	movs	r6, r1
    bda2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bda4:	4b16      	ldr	r3, [pc, #88]	; (be00 <sd_mmc_init_read_blocks+0x64>)
    bda6:	4798      	blx	r3
    bda8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bdaa:	d002      	beq.n	bdb2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    bdac:	0020      	movs	r0, r4
    bdae:	b002      	add	sp, #8
    bdb0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    bdb2:	4b14      	ldr	r3, [pc, #80]	; (be04 <sd_mmc_init_read_blocks+0x68>)
    bdb4:	4798      	blx	r3
    bdb6:	2800      	cmp	r0, #0
    bdb8:	d017      	beq.n	bdea <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    bdba:	2d01      	cmp	r5, #1
    bdbc:	d919      	bls.n	bdf2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    bdbe:	4812      	ldr	r0, [pc, #72]	; (be08 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bdc0:	4b12      	ldr	r3, [pc, #72]	; (be0c <sd_mmc_init_read_blocks+0x70>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	7adb      	ldrb	r3, [r3, #11]
    bdc6:	071b      	lsls	r3, r3, #28
    bdc8:	d400      	bmi.n	bdcc <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    bdca:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bdcc:	2301      	movs	r3, #1
    bdce:	9300      	str	r3, [sp, #0]
    bdd0:	002b      	movs	r3, r5
    bdd2:	2280      	movs	r2, #128	; 0x80
    bdd4:	0092      	lsls	r2, r2, #2
    bdd6:	0031      	movs	r1, r6
    bdd8:	4e0d      	ldr	r6, [pc, #52]	; (be10 <sd_mmc_init_read_blocks+0x74>)
    bdda:	47b0      	blx	r6
    bddc:	2800      	cmp	r0, #0
    bdde:	d00a      	beq.n	bdf6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    bde0:	4b0c      	ldr	r3, [pc, #48]	; (be14 <sd_mmc_init_read_blocks+0x78>)
    bde2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bde4:	4b0c      	ldr	r3, [pc, #48]	; (be18 <sd_mmc_init_read_blocks+0x7c>)
    bde6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    bde8:	e7e0      	b.n	bdac <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    bdea:	4b0c      	ldr	r3, [pc, #48]	; (be1c <sd_mmc_init_read_blocks+0x80>)
    bdec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bdee:	3405      	adds	r4, #5
    bdf0:	e7dc      	b.n	bdac <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    bdf2:	480b      	ldr	r0, [pc, #44]	; (be20 <sd_mmc_init_read_blocks+0x84>)
    bdf4:	e7e4      	b.n	bdc0 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    bdf6:	4b09      	ldr	r3, [pc, #36]	; (be1c <sd_mmc_init_read_blocks+0x80>)
    bdf8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bdfa:	2405      	movs	r4, #5
    bdfc:	e7d6      	b.n	bdac <sd_mmc_init_read_blocks+0x10>
    bdfe:	46c0      	nop			; (mov r8, r8)
    be00:	0000b77d 	.word	0x0000b77d
    be04:	0000b7d9 	.word	0x0000b7d9
    be08:	00101112 	.word	0x00101112
    be0c:	20000270 	.word	0x20000270
    be10:	0000c4b1 	.word	0x0000c4b1
    be14:	20000294 	.word	0x20000294
    be18:	20000296 	.word	0x20000296
    be1c:	0000b85d 	.word	0x0000b85d
    be20:	00081111 	.word	0x00081111

0000be24 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    be24:	b510      	push	{r4, lr}
    be26:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    be28:	4b07      	ldr	r3, [pc, #28]	; (be48 <sd_mmc_start_read_blocks+0x24>)
    be2a:	4798      	blx	r3
    be2c:	2800      	cmp	r0, #0
    be2e:	d104      	bne.n	be3a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    be30:	2200      	movs	r2, #0
    be32:	4b06      	ldr	r3, [pc, #24]	; (be4c <sd_mmc_start_read_blocks+0x28>)
    be34:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    be36:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    be38:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    be3a:	4a04      	ldr	r2, [pc, #16]	; (be4c <sd_mmc_start_read_blocks+0x28>)
    be3c:	8813      	ldrh	r3, [r2, #0]
    be3e:	1b1c      	subs	r4, r3, r4
    be40:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    be42:	2000      	movs	r0, #0
    be44:	e7f8      	b.n	be38 <sd_mmc_start_read_blocks+0x14>
    be46:	46c0      	nop			; (mov r8, r8)
    be48:	0000c6dd 	.word	0x0000c6dd
    be4c:	20000294 	.word	0x20000294

0000be50 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    be50:	b510      	push	{r4, lr}
    be52:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    be54:	4b14      	ldr	r3, [pc, #80]	; (bea8 <sd_mmc_wait_end_of_read_blocks+0x58>)
    be56:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    be58:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    be5a:	2800      	cmp	r0, #0
    be5c:	d101      	bne.n	be62 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    be5e:	0018      	movs	r0, r3
    be60:	bd10      	pop	{r4, pc}
	if (abort) {
    be62:	2c00      	cmp	r4, #0
    be64:	d010      	beq.n	be88 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    be66:	2200      	movs	r2, #0
    be68:	4b10      	ldr	r3, [pc, #64]	; (beac <sd_mmc_wait_end_of_read_blocks+0x5c>)
    be6a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    be6c:	4b10      	ldr	r3, [pc, #64]	; (beb0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    be6e:	881b      	ldrh	r3, [r3, #0]
    be70:	2b01      	cmp	r3, #1
    be72:	d00f      	beq.n	be94 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    be74:	2100      	movs	r1, #0
    be76:	480f      	ldr	r0, [pc, #60]	; (beb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
    be78:	4b0f      	ldr	r3, [pc, #60]	; (beb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
    be7a:	4798      	blx	r3
    be7c:	2800      	cmp	r0, #0
    be7e:	d00d      	beq.n	be9c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    be80:	4b0e      	ldr	r3, [pc, #56]	; (bebc <sd_mmc_wait_end_of_read_blocks+0x6c>)
    be82:	4798      	blx	r3
	return SD_MMC_OK;
    be84:	2300      	movs	r3, #0
    be86:	e7ea      	b.n	be5e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    be88:	4b08      	ldr	r3, [pc, #32]	; (beac <sd_mmc_wait_end_of_read_blocks+0x5c>)
    be8a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    be8c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    be8e:	2a00      	cmp	r2, #0
    be90:	d0ec      	beq.n	be6c <sd_mmc_wait_end_of_read_blocks+0x1c>
    be92:	e7e4      	b.n	be5e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    be94:	4b09      	ldr	r3, [pc, #36]	; (bebc <sd_mmc_wait_end_of_read_blocks+0x6c>)
    be96:	4798      	blx	r3
		return SD_MMC_OK;
    be98:	2300      	movs	r3, #0
    be9a:	e7e0      	b.n	be5e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    be9c:	2100      	movs	r1, #0
    be9e:	4805      	ldr	r0, [pc, #20]	; (beb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bea0:	4b05      	ldr	r3, [pc, #20]	; (beb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
    bea2:	4798      	blx	r3
    bea4:	e7ec      	b.n	be80 <sd_mmc_wait_end_of_read_blocks+0x30>
    bea6:	46c0      	nop			; (mov r8, r8)
    bea8:	0000c769 	.word	0x0000c769
    beac:	20000294 	.word	0x20000294
    beb0:	20000296 	.word	0x20000296
    beb4:	0000310c 	.word	0x0000310c
    beb8:	0000c641 	.word	0x0000c641
    bebc:	0000b85d 	.word	0x0000b85d

0000bec0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bec0:	b570      	push	{r4, r5, r6, lr}
    bec2:	b082      	sub	sp, #8
    bec4:	000e      	movs	r6, r1
    bec6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bec8:	4b11      	ldr	r3, [pc, #68]	; (bf10 <sd_mmc_init_write_blocks+0x50>)
    beca:	4798      	blx	r3
    becc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bece:	d116      	bne.n	befe <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    bed0:	2d01      	cmp	r5, #1
    bed2:	d917      	bls.n	bf04 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    bed4:	480f      	ldr	r0, [pc, #60]	; (bf14 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bed6:	4b10      	ldr	r3, [pc, #64]	; (bf18 <sd_mmc_init_write_blocks+0x58>)
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	7adb      	ldrb	r3, [r3, #11]
    bedc:	071b      	lsls	r3, r3, #28
    bede:	d400      	bmi.n	bee2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bee0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bee2:	2301      	movs	r3, #1
    bee4:	9300      	str	r3, [sp, #0]
    bee6:	002b      	movs	r3, r5
    bee8:	2280      	movs	r2, #128	; 0x80
    beea:	0092      	lsls	r2, r2, #2
    beec:	0031      	movs	r1, r6
    beee:	4e0b      	ldr	r6, [pc, #44]	; (bf1c <sd_mmc_init_write_blocks+0x5c>)
    bef0:	47b0      	blx	r6
    bef2:	2800      	cmp	r0, #0
    bef4:	d008      	beq.n	bf08 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bef6:	4b0a      	ldr	r3, [pc, #40]	; (bf20 <sd_mmc_init_write_blocks+0x60>)
    bef8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    befa:	4b0a      	ldr	r3, [pc, #40]	; (bf24 <sd_mmc_init_write_blocks+0x64>)
    befc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    befe:	0020      	movs	r0, r4
    bf00:	b002      	add	sp, #8
    bf02:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    bf04:	4808      	ldr	r0, [pc, #32]	; (bf28 <sd_mmc_init_write_blocks+0x68>)
    bf06:	e7e6      	b.n	bed6 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    bf08:	4b08      	ldr	r3, [pc, #32]	; (bf2c <sd_mmc_init_write_blocks+0x6c>)
    bf0a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bf0c:	2405      	movs	r4, #5
    bf0e:	e7f6      	b.n	befe <sd_mmc_init_write_blocks+0x3e>
    bf10:	0000b77d 	.word	0x0000b77d
    bf14:	00109119 	.word	0x00109119
    bf18:	20000270 	.word	0x20000270
    bf1c:	0000c4b1 	.word	0x0000c4b1
    bf20:	20000294 	.word	0x20000294
    bf24:	20000296 	.word	0x20000296
    bf28:	00089118 	.word	0x00089118
    bf2c:	0000b85d 	.word	0x0000b85d

0000bf30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    bf30:	b510      	push	{r4, lr}
    bf32:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    bf34:	4b07      	ldr	r3, [pc, #28]	; (bf54 <sd_mmc_start_write_blocks+0x24>)
    bf36:	4798      	blx	r3
    bf38:	2800      	cmp	r0, #0
    bf3a:	d104      	bne.n	bf46 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bf3c:	2200      	movs	r2, #0
    bf3e:	4b06      	ldr	r3, [pc, #24]	; (bf58 <sd_mmc_start_write_blocks+0x28>)
    bf40:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bf42:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bf44:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bf46:	4a04      	ldr	r2, [pc, #16]	; (bf58 <sd_mmc_start_write_blocks+0x28>)
    bf48:	8813      	ldrh	r3, [r2, #0]
    bf4a:	1b1c      	subs	r4, r3, r4
    bf4c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bf4e:	2000      	movs	r0, #0
    bf50:	e7f8      	b.n	bf44 <sd_mmc_start_write_blocks+0x14>
    bf52:	46c0      	nop			; (mov r8, r8)
    bf54:	0000c76d 	.word	0x0000c76d
    bf58:	20000294 	.word	0x20000294

0000bf5c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    bf5c:	b510      	push	{r4, lr}
    bf5e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    bf60:	4b0e      	ldr	r3, [pc, #56]	; (bf9c <sd_mmc_wait_end_of_write_blocks+0x40>)
    bf62:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bf64:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    bf66:	2800      	cmp	r0, #0
    bf68:	d101      	bne.n	bf6e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bf6a:	0018      	movs	r0, r3
    bf6c:	bd10      	pop	{r4, pc}
	if (abort) {
    bf6e:	2c00      	cmp	r4, #0
    bf70:	d00a      	beq.n	bf88 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    bf72:	2200      	movs	r2, #0
    bf74:	4b0a      	ldr	r3, [pc, #40]	; (bfa0 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bf76:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    bf78:	4b0a      	ldr	r3, [pc, #40]	; (bfa4 <sd_mmc_wait_end_of_write_blocks+0x48>)
    bf7a:	881b      	ldrh	r3, [r3, #0]
    bf7c:	2b01      	cmp	r3, #1
    bf7e:	d009      	beq.n	bf94 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    bf80:	4b09      	ldr	r3, [pc, #36]	; (bfa8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bf82:	4798      	blx	r3
	return SD_MMC_OK;
    bf84:	2300      	movs	r3, #0
    bf86:	e7f0      	b.n	bf6a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bf88:	4b05      	ldr	r3, [pc, #20]	; (bfa0 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bf8a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bf8c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bf8e:	2a00      	cmp	r2, #0
    bf90:	d0f2      	beq.n	bf78 <sd_mmc_wait_end_of_write_blocks+0x1c>
    bf92:	e7ea      	b.n	bf6a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    bf94:	4b04      	ldr	r3, [pc, #16]	; (bfa8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bf96:	4798      	blx	r3
		return SD_MMC_OK;
    bf98:	2300      	movs	r3, #0
    bf9a:	e7e6      	b.n	bf6a <sd_mmc_wait_end_of_write_blocks+0xe>
    bf9c:	0000c7ed 	.word	0x0000c7ed
    bfa0:	20000294 	.word	0x20000294
    bfa4:	20000296 	.word	0x20000296
    bfa8:	0000b85d 	.word	0x0000b85d

0000bfac <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    bfac:	b510      	push	{r4, lr}
    bfae:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    bfb0:	4b0f      	ldr	r3, [pc, #60]	; (bff0 <sd_mmc_test_unit_ready+0x44>)
    bfb2:	4798      	blx	r3
    bfb4:	2801      	cmp	r0, #1
    bfb6:	d019      	beq.n	bfec <sd_mmc_test_unit_ready+0x40>
    bfb8:	2800      	cmp	r0, #0
    bfba:	d003      	beq.n	bfc4 <sd_mmc_test_unit_ready+0x18>
    bfbc:	2802      	cmp	r0, #2
    bfbe:	d010      	beq.n	bfe2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    bfc0:	2001      	movs	r0, #1
	}
}
    bfc2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    bfc4:	4b0b      	ldr	r3, [pc, #44]	; (bff4 <sd_mmc_test_unit_ready+0x48>)
    bfc6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    bfc8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d1f9      	bne.n	bfc2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    bfce:	0020      	movs	r0, r4
    bfd0:	4b09      	ldr	r3, [pc, #36]	; (bff8 <sd_mmc_test_unit_ready+0x4c>)
    bfd2:	4798      	blx	r3
    bfd4:	0003      	movs	r3, r0
    bfd6:	2003      	movs	r0, #3
    bfd8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    bfda:	4243      	negs	r3, r0
    bfdc:	4158      	adcs	r0, r3
    bfde:	0040      	lsls	r0, r0, #1
    bfe0:	e7ef      	b.n	bfc2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    bfe2:	2200      	movs	r2, #0
    bfe4:	4b03      	ldr	r3, [pc, #12]	; (bff4 <sd_mmc_test_unit_ready+0x48>)
    bfe6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    bfe8:	2002      	movs	r0, #2
    bfea:	e7ea      	b.n	bfc2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    bfec:	2003      	movs	r0, #3
    bfee:	e7e8      	b.n	bfc2 <sd_mmc_test_unit_ready+0x16>
    bff0:	0000b899 	.word	0x0000b899
    bff4:	2000029c 	.word	0x2000029c
    bff8:	0000bd49 	.word	0x0000bd49

0000bffc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    bffc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    bffe:	2000      	movs	r0, #0
    c000:	4b01      	ldr	r3, [pc, #4]	; (c008 <sd_mmc_test_unit_ready_0+0xc>)
    c002:	4798      	blx	r3
}
    c004:	bd10      	pop	{r4, pc}
    c006:	46c0      	nop			; (mov r8, r8)
    c008:	0000bfad 	.word	0x0000bfad

0000c00c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    c00c:	b570      	push	{r4, r5, r6, lr}
    c00e:	0004      	movs	r4, r0
    c010:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    c012:	4b04      	ldr	r3, [pc, #16]	; (c024 <sd_mmc_read_capacity+0x18>)
    c014:	4798      	blx	r3
    c016:	0040      	lsls	r0, r0, #1
    c018:	3801      	subs	r0, #1
    c01a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    c01c:	0020      	movs	r0, r4
    c01e:	4b02      	ldr	r3, [pc, #8]	; (c028 <sd_mmc_read_capacity+0x1c>)
    c020:	4798      	blx	r3
}
    c022:	bd70      	pop	{r4, r5, r6, pc}
    c024:	0000bd71 	.word	0x0000bd71
    c028:	0000bfad 	.word	0x0000bfad

0000c02c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    c02c:	b510      	push	{r4, lr}
    c02e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    c030:	2000      	movs	r0, #0
    c032:	4b01      	ldr	r3, [pc, #4]	; (c038 <sd_mmc_read_capacity_0+0xc>)
    c034:	4798      	blx	r3
}
    c036:	bd10      	pop	{r4, pc}
    c038:	0000c00d 	.word	0x0000c00d

0000c03c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    c03c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    c03e:	2000      	movs	r0, #0
    c040:	4b01      	ldr	r3, [pc, #4]	; (c048 <sd_mmc_wr_protect_0+0xc>)
    c042:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    c044:	bd10      	pop	{r4, pc}
    c046:	46c0      	nop			; (mov r8, r8)
    c048:	0000bd99 	.word	0x0000bd99

0000c04c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    c04c:	b510      	push	{r4, lr}
    c04e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    c050:	2201      	movs	r2, #1
    c052:	4b0c      	ldr	r3, [pc, #48]	; (c084 <sd_mmc_mem_2_ram+0x38>)
    c054:	4798      	blx	r3
    c056:	2800      	cmp	r0, #0
    c058:	d004      	beq.n	c064 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    c05a:	3802      	subs	r0, #2
    c05c:	4243      	negs	r3, r0
    c05e:	4158      	adcs	r0, r3
    c060:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    c062:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    c064:	2101      	movs	r1, #1
    c066:	0020      	movs	r0, r4
    c068:	4b07      	ldr	r3, [pc, #28]	; (c088 <sd_mmc_mem_2_ram+0x3c>)
    c06a:	4798      	blx	r3
    c06c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    c06e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    c070:	2b00      	cmp	r3, #0
    c072:	d1f6      	bne.n	c062 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    c074:	2000      	movs	r0, #0
    c076:	4b05      	ldr	r3, [pc, #20]	; (c08c <sd_mmc_mem_2_ram+0x40>)
    c078:	4798      	blx	r3
    c07a:	1e43      	subs	r3, r0, #1
    c07c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    c07e:	b2c0      	uxtb	r0, r0
    c080:	e7ef      	b.n	c062 <sd_mmc_mem_2_ram+0x16>
    c082:	46c0      	nop			; (mov r8, r8)
    c084:	0000bd9d 	.word	0x0000bd9d
    c088:	0000be25 	.word	0x0000be25
    c08c:	0000be51 	.word	0x0000be51

0000c090 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    c090:	b510      	push	{r4, lr}
    c092:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    c094:	0001      	movs	r1, r0
    c096:	2000      	movs	r0, #0
    c098:	4b01      	ldr	r3, [pc, #4]	; (c0a0 <sd_mmc_mem_2_ram_0+0x10>)
    c09a:	4798      	blx	r3
}
    c09c:	bd10      	pop	{r4, pc}
    c09e:	46c0      	nop			; (mov r8, r8)
    c0a0:	0000c04d 	.word	0x0000c04d

0000c0a4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    c0a4:	b510      	push	{r4, lr}
    c0a6:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    c0a8:	2201      	movs	r2, #1
    c0aa:	4b0c      	ldr	r3, [pc, #48]	; (c0dc <sd_mmc_ram_2_mem+0x38>)
    c0ac:	4798      	blx	r3
    c0ae:	2800      	cmp	r0, #0
    c0b0:	d004      	beq.n	c0bc <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    c0b2:	3802      	subs	r0, #2
    c0b4:	4243      	negs	r3, r0
    c0b6:	4158      	adcs	r0, r3
    c0b8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    c0ba:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    c0bc:	2101      	movs	r1, #1
    c0be:	0020      	movs	r0, r4
    c0c0:	4b07      	ldr	r3, [pc, #28]	; (c0e0 <sd_mmc_ram_2_mem+0x3c>)
    c0c2:	4798      	blx	r3
    c0c4:	0003      	movs	r3, r0
		return CTRL_FAIL;
    c0c6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	d1f6      	bne.n	c0ba <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    c0cc:	2000      	movs	r0, #0
    c0ce:	4b05      	ldr	r3, [pc, #20]	; (c0e4 <sd_mmc_ram_2_mem+0x40>)
    c0d0:	4798      	blx	r3
    c0d2:	1e43      	subs	r3, r0, #1
    c0d4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    c0d6:	b2c0      	uxtb	r0, r0
    c0d8:	e7ef      	b.n	c0ba <sd_mmc_ram_2_mem+0x16>
    c0da:	46c0      	nop			; (mov r8, r8)
    c0dc:	0000bec1 	.word	0x0000bec1
    c0e0:	0000bf31 	.word	0x0000bf31
    c0e4:	0000bf5d 	.word	0x0000bf5d

0000c0e8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    c0e8:	b510      	push	{r4, lr}
    c0ea:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    c0ec:	0001      	movs	r1, r0
    c0ee:	2000      	movs	r0, #0
    c0f0:	4b01      	ldr	r3, [pc, #4]	; (c0f8 <sd_mmc_ram_2_mem_0+0x10>)
    c0f2:	4798      	blx	r3
}
    c0f4:	bd10      	pop	{r4, pc}
    c0f6:	46c0      	nop			; (mov r8, r8)
    c0f8:	0000c0a5 	.word	0x0000c0a5

0000c0fc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    c0fc:	b500      	push	{lr}
    c0fe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    c100:	466b      	mov	r3, sp
    c102:	1dd9      	adds	r1, r3, #7
    c104:	23ff      	movs	r3, #255	; 0xff
    c106:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    c108:	2201      	movs	r2, #1
    c10a:	480b      	ldr	r0, [pc, #44]	; (c138 <sd_mmc_spi_start_write_block+0x3c>)
    c10c:	4b0b      	ldr	r3, [pc, #44]	; (c13c <sd_mmc_spi_start_write_block+0x40>)
    c10e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    c110:	4b0b      	ldr	r3, [pc, #44]	; (c140 <sd_mmc_spi_start_write_block+0x44>)
    c112:	881b      	ldrh	r3, [r3, #0]
    c114:	2b01      	cmp	r3, #1
    c116:	d00a      	beq.n	c12e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    c118:	22fc      	movs	r2, #252	; 0xfc
    c11a:	466b      	mov	r3, sp
    c11c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    c11e:	2201      	movs	r2, #1
    c120:	466b      	mov	r3, sp
    c122:	1d99      	adds	r1, r3, #6
    c124:	4804      	ldr	r0, [pc, #16]	; (c138 <sd_mmc_spi_start_write_block+0x3c>)
    c126:	4b05      	ldr	r3, [pc, #20]	; (c13c <sd_mmc_spi_start_write_block+0x40>)
    c128:	4798      	blx	r3
}
    c12a:	b003      	add	sp, #12
    c12c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    c12e:	22fe      	movs	r2, #254	; 0xfe
    c130:	466b      	mov	r3, sp
    c132:	719a      	strb	r2, [r3, #6]
    c134:	e7f3      	b.n	c11e <sd_mmc_spi_start_write_block+0x22>
    c136:	46c0      	nop			; (mov r8, r8)
    c138:	200002a0 	.word	0x200002a0
    c13c:	00010801 	.word	0x00010801
    c140:	200002e4 	.word	0x200002e4

0000c144 <sd_mmc_spi_wait_busy>:
{
    c144:	b5f0      	push	{r4, r5, r6, r7, lr}
    c146:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    c148:	466b      	mov	r3, sp
    c14a:	1ddc      	adds	r4, r3, #7
    c14c:	23ff      	movs	r3, #255	; 0xff
    c14e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c150:	4e12      	ldr	r6, [pc, #72]	; (c19c <sd_mmc_spi_wait_busy+0x58>)
    c152:	2201      	movs	r2, #1
    c154:	0021      	movs	r1, r4
    c156:	0030      	movs	r0, r6
    c158:	4d11      	ldr	r5, [pc, #68]	; (c1a0 <sd_mmc_spi_wait_busy+0x5c>)
    c15a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c15c:	23ff      	movs	r3, #255	; 0xff
    c15e:	2201      	movs	r2, #1
    c160:	0021      	movs	r1, r4
    c162:	0030      	movs	r0, r6
    c164:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c166:	23ff      	movs	r3, #255	; 0xff
    c168:	2201      	movs	r2, #1
    c16a:	0021      	movs	r1, r4
    c16c:	0030      	movs	r0, r6
    c16e:	47a8      	blx	r5
    c170:	4c0c      	ldr	r4, [pc, #48]	; (c1a4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    c172:	466b      	mov	r3, sp
    c174:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c176:	4e09      	ldr	r6, [pc, #36]	; (c19c <sd_mmc_spi_wait_busy+0x58>)
    c178:	4f09      	ldr	r7, [pc, #36]	; (c1a0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    c17a:	782b      	ldrb	r3, [r5, #0]
    c17c:	2bff      	cmp	r3, #255	; 0xff
    c17e:	d009      	beq.n	c194 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c180:	23ff      	movs	r3, #255	; 0xff
    c182:	2201      	movs	r2, #1
    c184:	0029      	movs	r1, r5
    c186:	0030      	movs	r0, r6
    c188:	47b8      	blx	r7
    c18a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    c18c:	2c00      	cmp	r4, #0
    c18e:	d1f4      	bne.n	c17a <sd_mmc_spi_wait_busy+0x36>
			return false;
    c190:	2000      	movs	r0, #0
    c192:	e000      	b.n	c196 <sd_mmc_spi_wait_busy+0x52>
	return true;
    c194:	2001      	movs	r0, #1
}
    c196:	b003      	add	sp, #12
    c198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c19a:	46c0      	nop			; (mov r8, r8)
    c19c:	200002a0 	.word	0x200002a0
    c1a0:	00010639 	.word	0x00010639
    c1a4:	00030d40 	.word	0x00030d40

0000c1a8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    c1a8:	b570      	push	{r4, r5, r6, lr}
    c1aa:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    c1ac:	4b14      	ldr	r3, [pc, #80]	; (c200 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    c1ae:	881c      	ldrh	r4, [r3, #0]
    c1b0:	2c01      	cmp	r4, #1
    c1b2:	d023      	beq.n	c1fc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    c1b4:	4b13      	ldr	r3, [pc, #76]	; (c204 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    c1b6:	8819      	ldrh	r1, [r3, #0]
    c1b8:	4b13      	ldr	r3, [pc, #76]	; (c208 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    c1ba:	6818      	ldr	r0, [r3, #0]
    c1bc:	4b13      	ldr	r3, [pc, #76]	; (c20c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    c1be:	4798      	blx	r3
		return true; // It is not the End of multi write
    c1c0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    c1c2:	4284      	cmp	r4, r0
    c1c4:	d902      	bls.n	c1cc <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    c1c6:	0018      	movs	r0, r3
    c1c8:	b002      	add	sp, #8
    c1ca:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    c1cc:	466b      	mov	r3, sp
    c1ce:	1ddc      	adds	r4, r3, #7
    c1d0:	23ff      	movs	r3, #255	; 0xff
    c1d2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c1d4:	4e0e      	ldr	r6, [pc, #56]	; (c210 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    c1d6:	2201      	movs	r2, #1
    c1d8:	0021      	movs	r1, r4
    c1da:	0030      	movs	r0, r6
    c1dc:	4d0d      	ldr	r5, [pc, #52]	; (c214 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    c1de:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    c1e0:	23fd      	movs	r3, #253	; 0xfd
    c1e2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c1e4:	2201      	movs	r2, #1
    c1e6:	0021      	movs	r1, r4
    c1e8:	0030      	movs	r0, r6
    c1ea:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    c1ec:	4b0a      	ldr	r3, [pc, #40]	; (c218 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    c1ee:	4798      	blx	r3
    c1f0:	1e03      	subs	r3, r0, #0
    c1f2:	d1e8      	bne.n	c1c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c1f4:	2105      	movs	r1, #5
    c1f6:	4a09      	ldr	r2, [pc, #36]	; (c21c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    c1f8:	7011      	strb	r1, [r2, #0]
		return false;
    c1fa:	e7e4      	b.n	c1c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    c1fc:	2301      	movs	r3, #1
    c1fe:	e7e2      	b.n	c1c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    c200:	200002e4 	.word	0x200002e4
    c204:	200002dc 	.word	0x200002dc
    c208:	200002ec 	.word	0x200002ec
    c20c:	00016699 	.word	0x00016699
    c210:	200002a0 	.word	0x200002a0
    c214:	00010801 	.word	0x00010801
    c218:	0000c145 	.word	0x0000c145
    c21c:	200002e3 	.word	0x200002e3

0000c220 <sd_mmc_spi_start_read_block>:
{
    c220:	b5f0      	push	{r4, r5, r6, r7, lr}
    c222:	b083      	sub	sp, #12
	token = 0;
    c224:	2200      	movs	r2, #0
    c226:	466b      	mov	r3, sp
    c228:	71da      	strb	r2, [r3, #7]
    c22a:	4c14      	ldr	r4, [pc, #80]	; (c27c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    c22c:	466b      	mov	r3, sp
    c22e:	1ddd      	adds	r5, r3, #7
    c230:	4e13      	ldr	r6, [pc, #76]	; (c280 <sd_mmc_spi_start_read_block+0x60>)
    c232:	4f14      	ldr	r7, [pc, #80]	; (c284 <sd_mmc_spi_start_read_block+0x64>)
    c234:	23ff      	movs	r3, #255	; 0xff
    c236:	2201      	movs	r2, #1
    c238:	0029      	movs	r1, r5
    c23a:	0030      	movs	r0, r6
    c23c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    c23e:	782b      	ldrb	r3, [r5, #0]
    c240:	220f      	movs	r2, #15
    c242:	0019      	movs	r1, r3
    c244:	4391      	bics	r1, r2
    c246:	1e0a      	subs	r2, r1, #0
    c248:	d009      	beq.n	c25e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    c24a:	2bfe      	cmp	r3, #254	; 0xfe
    c24c:	d013      	beq.n	c276 <sd_mmc_spi_start_read_block+0x56>
    c24e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    c250:	2c00      	cmp	r4, #0
    c252:	d1ef      	bne.n	c234 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    c254:	2204      	movs	r2, #4
    c256:	4b0c      	ldr	r3, [pc, #48]	; (c288 <sd_mmc_spi_start_read_block+0x68>)
    c258:	701a      	strb	r2, [r3, #0]
			return false;
    c25a:	2000      	movs	r0, #0
    c25c:	e00c      	b.n	c278 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    c25e:	075b      	lsls	r3, r3, #29
    c260:	d004      	beq.n	c26c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    c262:	3207      	adds	r2, #7
    c264:	4b08      	ldr	r3, [pc, #32]	; (c288 <sd_mmc_spi_start_read_block+0x68>)
    c266:	701a      	strb	r2, [r3, #0]
			return false;
    c268:	2000      	movs	r0, #0
    c26a:	e005      	b.n	c278 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    c26c:	220b      	movs	r2, #11
    c26e:	4b06      	ldr	r3, [pc, #24]	; (c288 <sd_mmc_spi_start_read_block+0x68>)
    c270:	701a      	strb	r2, [r3, #0]
			return false;
    c272:	2000      	movs	r0, #0
    c274:	e000      	b.n	c278 <sd_mmc_spi_start_read_block+0x58>
	return true;
    c276:	2001      	movs	r0, #1
}
    c278:	b003      	add	sp, #12
    c27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c27c:	0007a120 	.word	0x0007a120
    c280:	200002a0 	.word	0x200002a0
    c284:	00010639 	.word	0x00010639
    c288:	200002e3 	.word	0x200002e3

0000c28c <sd_mmc_spi_stop_write_block>:
{
    c28c:	b530      	push	{r4, r5, lr}
    c28e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    c290:	a901      	add	r1, sp, #4
    c292:	2301      	movs	r3, #1
    c294:	425b      	negs	r3, r3
    c296:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    c298:	4d14      	ldr	r5, [pc, #80]	; (c2ec <sd_mmc_spi_stop_write_block+0x60>)
    c29a:	2202      	movs	r2, #2
    c29c:	0028      	movs	r0, r5
    c29e:	4b14      	ldr	r3, [pc, #80]	; (c2f0 <sd_mmc_spi_stop_write_block+0x64>)
    c2a0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    c2a2:	466b      	mov	r3, sp
    c2a4:	1ddc      	adds	r4, r3, #7
    c2a6:	23ff      	movs	r3, #255	; 0xff
    c2a8:	2201      	movs	r2, #1
    c2aa:	0021      	movs	r1, r4
    c2ac:	0028      	movs	r0, r5
    c2ae:	4d11      	ldr	r5, [pc, #68]	; (c2f4 <sd_mmc_spi_stop_write_block+0x68>)
    c2b0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    c2b2:	7822      	ldrb	r2, [r4, #0]
    c2b4:	2311      	movs	r3, #17
    c2b6:	4013      	ands	r3, r2
    c2b8:	2b01      	cmp	r3, #1
    c2ba:	d005      	beq.n	c2c8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c2bc:	2201      	movs	r2, #1
    c2be:	4b0e      	ldr	r3, [pc, #56]	; (c2f8 <sd_mmc_spi_stop_write_block+0x6c>)
    c2c0:	701a      	strb	r2, [r3, #0]
		return false;
    c2c2:	2000      	movs	r0, #0
}
    c2c4:	b003      	add	sp, #12
    c2c6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    c2c8:	231e      	movs	r3, #30
    c2ca:	401a      	ands	r2, r3
    c2cc:	2a04      	cmp	r2, #4
    c2ce:	d00b      	beq.n	c2e8 <sd_mmc_spi_stop_write_block+0x5c>
    c2d0:	2a0a      	cmp	r2, #10
    c2d2:	d104      	bne.n	c2de <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    c2d4:	3a02      	subs	r2, #2
    c2d6:	4b08      	ldr	r3, [pc, #32]	; (c2f8 <sd_mmc_spi_stop_write_block+0x6c>)
    c2d8:	701a      	strb	r2, [r3, #0]
		return false;
    c2da:	2000      	movs	r0, #0
    c2dc:	e7f2      	b.n	c2c4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    c2de:	220a      	movs	r2, #10
    c2e0:	4b05      	ldr	r3, [pc, #20]	; (c2f8 <sd_mmc_spi_stop_write_block+0x6c>)
    c2e2:	701a      	strb	r2, [r3, #0]
		return false;
    c2e4:	2000      	movs	r0, #0
    c2e6:	e7ed      	b.n	c2c4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    c2e8:	2001      	movs	r0, #1
    c2ea:	e7eb      	b.n	c2c4 <sd_mmc_spi_stop_write_block+0x38>
    c2ec:	200002a0 	.word	0x200002a0
    c2f0:	00010801 	.word	0x00010801
    c2f4:	00010639 	.word	0x00010639
    c2f8:	200002e3 	.word	0x200002e3

0000c2fc <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c2fc:	b570      	push	{r4, r5, r6, lr}
    c2fe:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c300:	2300      	movs	r3, #0
    c302:	4a2d      	ldr	r2, [pc, #180]	; (c3b8 <sd_mmc_spi_init+0xbc>)
    c304:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    c306:	ac02      	add	r4, sp, #8
    c308:	2501      	movs	r5, #1
    c30a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c30c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c30e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c310:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c312:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c314:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    c316:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    c318:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    c31a:	2224      	movs	r2, #36	; 0x24
    c31c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c31e:	3a18      	subs	r2, #24
    c320:	2100      	movs	r1, #0
    c322:	a808      	add	r0, sp, #32
    c324:	4b25      	ldr	r3, [pc, #148]	; (c3bc <sd_mmc_spi_init+0xc0>)
    c326:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c328:	2380      	movs	r3, #128	; 0x80
    c32a:	025b      	lsls	r3, r3, #9
    c32c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c32e:	4b24      	ldr	r3, [pc, #144]	; (c3c0 <sd_mmc_spi_init+0xc4>)
    c330:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c332:	4b24      	ldr	r3, [pc, #144]	; (c3c4 <sd_mmc_spi_init+0xc8>)
    c334:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c336:	4b24      	ldr	r3, [pc, #144]	; (c3c8 <sd_mmc_spi_init+0xcc>)
    c338:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c33a:	4b24      	ldr	r3, [pc, #144]	; (c3cc <sd_mmc_spi_init+0xd0>)
    c33c:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c33e:	4b24      	ldr	r3, [pc, #144]	; (c3d0 <sd_mmc_spi_init+0xd4>)
    c340:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c342:	4e24      	ldr	r6, [pc, #144]	; (c3d4 <sd_mmc_spi_init+0xd8>)
    c344:	0022      	movs	r2, r4
    c346:	4924      	ldr	r1, [pc, #144]	; (c3d8 <sd_mmc_spi_init+0xdc>)
    c348:	0030      	movs	r0, r6
    c34a:	4b24      	ldr	r3, [pc, #144]	; (c3dc <sd_mmc_spi_init+0xe0>)
    c34c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c34e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c350:	0020      	movs	r0, r4
    c352:	4b23      	ldr	r3, [pc, #140]	; (c3e0 <sd_mmc_spi_init+0xe4>)
    c354:	4798      	blx	r3
    c356:	231f      	movs	r3, #31
    c358:	4018      	ands	r0, r3
    c35a:	4085      	lsls	r5, r0
    c35c:	4b21      	ldr	r3, [pc, #132]	; (c3e4 <sd_mmc_spi_init+0xe8>)
    c35e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c360:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    c362:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    c364:	2b00      	cmp	r3, #0
    c366:	d1fc      	bne.n	c362 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c368:	6823      	ldr	r3, [r4, #0]
    c36a:	2202      	movs	r2, #2
    c36c:	4313      	orrs	r3, r2
    c36e:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    c370:	4a1d      	ldr	r2, [pc, #116]	; (c3e8 <sd_mmc_spi_init+0xec>)
    c372:	2300      	movs	r3, #0
    c374:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c376:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    c378:	491c      	ldr	r1, [pc, #112]	; (c3ec <sd_mmc_spi_init+0xf0>)
    c37a:	7808      	ldrb	r0, [r1, #0]
    c37c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c37e:	4c1c      	ldr	r4, [pc, #112]	; (c3f0 <sd_mmc_spi_init+0xf4>)
    c380:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c382:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c384:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c386:	a901      	add	r1, sp, #4
    c388:	2201      	movs	r2, #1
    c38a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c38c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c38e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c390:	4b18      	ldr	r3, [pc, #96]	; (c3f4 <sd_mmc_spi_init+0xf8>)
    c392:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c394:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c396:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c398:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c39a:	2900      	cmp	r1, #0
    c39c:	d104      	bne.n	c3a8 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    c39e:	0953      	lsrs	r3, r2, #5
    c3a0:	01db      	lsls	r3, r3, #7
    c3a2:	4915      	ldr	r1, [pc, #84]	; (c3f8 <sd_mmc_spi_init+0xfc>)
    c3a4:	468c      	mov	ip, r1
    c3a6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c3a8:	211f      	movs	r1, #31
    c3aa:	4011      	ands	r1, r2
    c3ac:	2201      	movs	r2, #1
    c3ae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    c3b0:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    c3b2:	b010      	add	sp, #64	; 0x40
    c3b4:	bd70      	pop	{r4, r5, r6, pc}
    c3b6:	46c0      	nop			; (mov r8, r8)
    c3b8:	200002e3 	.word	0x200002e3
    c3bc:	00016a7f 	.word	0x00016a7f
    c3c0:	00100002 	.word	0x00100002
    c3c4:	00110002 	.word	0x00110002
    c3c8:	00120002 	.word	0x00120002
    c3cc:	00130002 	.word	0x00130002
    c3d0:	00061a80 	.word	0x00061a80
    c3d4:	200002a0 	.word	0x200002a0
    c3d8:	42000c00 	.word	0x42000c00
    c3dc:	00010461 	.word	0x00010461
    c3e0:	00010319 	.word	0x00010319
    c3e4:	e000e100 	.word	0xe000e100
    c3e8:	200002f0 	.word	0x200002f0
    c3ec:	20000060 	.word	0x20000060
    c3f0:	200002e0 	.word	0x200002e0
    c3f4:	0000fd05 	.word	0x0000fd05
    c3f8:	41004400 	.word	0x41004400

0000c3fc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3fe:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c400:	2200      	movs	r2, #0
    c402:	4b0d      	ldr	r3, [pc, #52]	; (c438 <sd_mmc_spi_select_device+0x3c>)
    c404:	701a      	strb	r2, [r3, #0]
    c406:	000c      	movs	r4, r1
    c408:	4b0c      	ldr	r3, [pc, #48]	; (c43c <sd_mmc_spi_select_device+0x40>)
    c40a:	4299      	cmp	r1, r3
    c40c:	d900      	bls.n	c410 <sd_mmc_spi_select_device+0x14>
    c40e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c410:	4d0b      	ldr	r5, [pc, #44]	; (c440 <sd_mmc_spi_select_device+0x44>)
    c412:	4e0c      	ldr	r6, [pc, #48]	; (c444 <sd_mmc_spi_select_device+0x48>)
    c414:	e001      	b.n	c41a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    c416:	08e3      	lsrs	r3, r4, #3
    c418:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c41a:	0021      	movs	r1, r4
    c41c:	0028      	movs	r0, r5
    c41e:	47b0      	blx	r6
    c420:	2817      	cmp	r0, #23
    c422:	d0f8      	beq.n	c416 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c424:	0079      	lsls	r1, r7, #1
    c426:	19cf      	adds	r7, r1, r7
    c428:	4907      	ldr	r1, [pc, #28]	; (c448 <sd_mmc_spi_select_device+0x4c>)
    c42a:	19c9      	adds	r1, r1, r7
    c42c:	2201      	movs	r2, #1
    c42e:	4804      	ldr	r0, [pc, #16]	; (c440 <sd_mmc_spi_select_device+0x44>)
    c430:	4b06      	ldr	r3, [pc, #24]	; (c44c <sd_mmc_spi_select_device+0x50>)
    c432:	4798      	blx	r3
}
    c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c436:	46c0      	nop			; (mov r8, r8)
    c438:	200002e3 	.word	0x200002e3
    c43c:	00989680 	.word	0x00989680
    c440:	200002a0 	.word	0x200002a0
    c444:	000103a9 	.word	0x000103a9
    c448:	200002e0 	.word	0x200002e0
    c44c:	0001070d 	.word	0x0001070d

0000c450 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c450:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c452:	2200      	movs	r2, #0
    c454:	4b04      	ldr	r3, [pc, #16]	; (c468 <sd_mmc_spi_deselect_device+0x18>)
    c456:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c458:	0041      	lsls	r1, r0, #1
    c45a:	1808      	adds	r0, r1, r0
    c45c:	4903      	ldr	r1, [pc, #12]	; (c46c <sd_mmc_spi_deselect_device+0x1c>)
    c45e:	1809      	adds	r1, r1, r0
    c460:	4803      	ldr	r0, [pc, #12]	; (c470 <sd_mmc_spi_deselect_device+0x20>)
    c462:	4b04      	ldr	r3, [pc, #16]	; (c474 <sd_mmc_spi_deselect_device+0x24>)
    c464:	4798      	blx	r3
}
    c466:	bd10      	pop	{r4, pc}
    c468:	200002e3 	.word	0x200002e3
    c46c:	200002e0 	.word	0x200002e0
    c470:	200002a0 	.word	0x200002a0
    c474:	0001070d 	.word	0x0001070d

0000c478 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c478:	b570      	push	{r4, r5, r6, lr}
    c47a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    c47c:	22ff      	movs	r2, #255	; 0xff
    c47e:	466b      	mov	r3, sp
    c480:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c482:	2200      	movs	r2, #0
    c484:	4b07      	ldr	r3, [pc, #28]	; (c4a4 <sd_mmc_spi_send_clock+0x2c>)
    c486:	701a      	strb	r2, [r3, #0]
    c488:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c48a:	4e07      	ldr	r6, [pc, #28]	; (c4a8 <sd_mmc_spi_send_clock+0x30>)
    c48c:	4d07      	ldr	r5, [pc, #28]	; (c4ac <sd_mmc_spi_send_clock+0x34>)
    c48e:	2201      	movs	r2, #1
    c490:	466b      	mov	r3, sp
    c492:	1dd9      	adds	r1, r3, #7
    c494:	0030      	movs	r0, r6
    c496:	47a8      	blx	r5
    c498:	3c01      	subs	r4, #1
    c49a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    c49c:	2c00      	cmp	r4, #0
    c49e:	d1f6      	bne.n	c48e <sd_mmc_spi_send_clock+0x16>
	}
}
    c4a0:	b002      	add	sp, #8
    c4a2:	bd70      	pop	{r4, r5, r6, pc}
    c4a4:	200002e3 	.word	0x200002e3
    c4a8:	200002a0 	.word	0x200002a0
    c4ac:	00010801 	.word	0x00010801

0000c4b0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b2:	46c6      	mov	lr, r8
    c4b4:	b500      	push	{lr}
    c4b6:	b086      	sub	sp, #24
    c4b8:	4680      	mov	r8, r0
    c4ba:	9200      	str	r2, [sp, #0]
    c4bc:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    c4be:	22ff      	movs	r2, #255	; 0xff
    c4c0:	230f      	movs	r3, #15
    c4c2:	a802      	add	r0, sp, #8
    c4c4:	4684      	mov	ip, r0
    c4c6:	4463      	add	r3, ip
    c4c8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c4ca:	2200      	movs	r2, #0
    c4cc:	4b53      	ldr	r3, [pc, #332]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c4ce:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c4d0:	ab04      	add	r3, sp, #16
    c4d2:	323f      	adds	r2, #63	; 0x3f
    c4d4:	4640      	mov	r0, r8
    c4d6:	4002      	ands	r2, r0
    c4d8:	2040      	movs	r0, #64	; 0x40
    c4da:	4302      	orrs	r2, r0
    c4dc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c4de:	0e0a      	lsrs	r2, r1, #24
    c4e0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c4e2:	0c0a      	lsrs	r2, r1, #16
    c4e4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c4e6:	0a0a      	lsrs	r2, r1, #8
    c4e8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c4ea:	7119      	strb	r1, [r3, #4]
    c4ec:	2700      	movs	r7, #0
	crc = 0;
    c4ee:	2300      	movs	r3, #0
		value = *buf++;
    c4f0:	a904      	add	r1, sp, #16
    c4f2:	2208      	movs	r2, #8
				crc ^= 0x09;
    c4f4:	2409      	movs	r4, #9
    c4f6:	e011      	b.n	c51c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    c4f8:	0076      	lsls	r6, r6, #1
    c4fa:	b2f6      	uxtb	r6, r6
    c4fc:	3801      	subs	r0, #1
    c4fe:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    c500:	2800      	cmp	r0, #0
    c502:	d008      	beq.n	c516 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    c504:	005b      	lsls	r3, r3, #1
    c506:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    c508:	001d      	movs	r5, r3
    c50a:	4075      	eors	r5, r6
    c50c:	062d      	lsls	r5, r5, #24
    c50e:	d5f3      	bpl.n	c4f8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    c510:	4063      	eors	r3, r4
    c512:	b2db      	uxtb	r3, r3
    c514:	e7f0      	b.n	c4f8 <sd_mmc_spi_adtc_start+0x48>
    c516:	3701      	adds	r7, #1
	while (size--) {
    c518:	2f05      	cmp	r7, #5
    c51a:	d002      	beq.n	c522 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    c51c:	5c7e      	ldrb	r6, [r7, r1]
    c51e:	0010      	movs	r0, r2
    c520:	e7f0      	b.n	c504 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    c522:	005b      	lsls	r3, r3, #1
    c524:	2201      	movs	r2, #1
    c526:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c528:	ac04      	add	r4, sp, #16
    c52a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c52c:	4e3c      	ldr	r6, [pc, #240]	; (c620 <sd_mmc_spi_adtc_start+0x170>)
    c52e:	2201      	movs	r2, #1
    c530:	210f      	movs	r1, #15
    c532:	ab02      	add	r3, sp, #8
    c534:	469c      	mov	ip, r3
    c536:	4461      	add	r1, ip
    c538:	0030      	movs	r0, r6
    c53a:	4f3a      	ldr	r7, [pc, #232]	; (c624 <sd_mmc_spi_adtc_start+0x174>)
    c53c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c53e:	2206      	movs	r2, #6
    c540:	0021      	movs	r1, r4
    c542:	0030      	movs	r0, r6
    c544:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c546:	ab02      	add	r3, sp, #8
    c548:	1dd9      	adds	r1, r3, #7
    c54a:	23ff      	movs	r3, #255	; 0xff
    c54c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c54e:	2201      	movs	r2, #1
    c550:	0030      	movs	r0, r6
    c552:	4e35      	ldr	r6, [pc, #212]	; (c628 <sd_mmc_spi_adtc_start+0x178>)
    c554:	47b0      	blx	r6
    c556:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c558:	ab02      	add	r3, sp, #8
    c55a:	1dde      	adds	r6, r3, #7
    c55c:	4f30      	ldr	r7, [pc, #192]	; (c620 <sd_mmc_spi_adtc_start+0x170>)
    c55e:	4d32      	ldr	r5, [pc, #200]	; (c628 <sd_mmc_spi_adtc_start+0x178>)
    c560:	23ff      	movs	r3, #255	; 0xff
    c562:	2201      	movs	r2, #1
    c564:	0031      	movs	r1, r6
    c566:	0038      	movs	r0, r7
    c568:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c56a:	7833      	ldrb	r3, [r6, #0]
    c56c:	b25a      	sxtb	r2, r3
    c56e:	2a00      	cmp	r2, #0
    c570:	da0b      	bge.n	c58a <sd_mmc_spi_adtc_start+0xda>
    c572:	3c01      	subs	r4, #1
    c574:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c576:	2c00      	cmp	r4, #0
    c578:	d1f2      	bne.n	c560 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c57a:	2202      	movs	r2, #2
    c57c:	4b27      	ldr	r3, [pc, #156]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c57e:	701a      	strb	r2, [r3, #0]
			return false;
    c580:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    c582:	b006      	add	sp, #24
    c584:	bc04      	pop	{r2}
    c586:	4690      	mov	r8, r2
    c588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    c58a:	4a28      	ldr	r2, [pc, #160]	; (c62c <sd_mmc_spi_adtc_start+0x17c>)
    c58c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    c58e:	071a      	lsls	r2, r3, #28
    c590:	d41a      	bmi.n	c5c8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c592:	075a      	lsls	r2, r3, #29
    c594:	d41d      	bmi.n	c5d2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    c596:	2201      	movs	r2, #1
    c598:	4393      	bics	r3, r2
    c59a:	d11f      	bne.n	c5dc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    c59c:	4643      	mov	r3, r8
    c59e:	049b      	lsls	r3, r3, #18
    c5a0:	d420      	bmi.n	c5e4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    c5a2:	4643      	mov	r3, r8
    c5a4:	059b      	lsls	r3, r3, #22
    c5a6:	d425      	bmi.n	c5f4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    c5a8:	4643      	mov	r3, r8
    c5aa:	055b      	lsls	r3, r3, #21
    c5ac:	d42b      	bmi.n	c606 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    c5ae:	4b20      	ldr	r3, [pc, #128]	; (c630 <sd_mmc_spi_adtc_start+0x180>)
    c5b0:	466a      	mov	r2, sp
    c5b2:	8812      	ldrh	r2, [r2, #0]
    c5b4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c5b6:	4b1f      	ldr	r3, [pc, #124]	; (c634 <sd_mmc_spi_adtc_start+0x184>)
    c5b8:	466a      	mov	r2, sp
    c5ba:	8892      	ldrh	r2, [r2, #4]
    c5bc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c5be:	2200      	movs	r2, #0
    c5c0:	4b1d      	ldr	r3, [pc, #116]	; (c638 <sd_mmc_spi_adtc_start+0x188>)
    c5c2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c5c4:	2001      	movs	r0, #1
    c5c6:	e7dc      	b.n	c582 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c5c8:	2206      	movs	r2, #6
    c5ca:	4b14      	ldr	r3, [pc, #80]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c5cc:	701a      	strb	r2, [r3, #0]
		return false;
    c5ce:	2000      	movs	r0, #0
    c5d0:	e7d7      	b.n	c582 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c5d2:	2209      	movs	r2, #9
    c5d4:	4b11      	ldr	r3, [pc, #68]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c5d6:	701a      	strb	r2, [r3, #0]
		return false;
    c5d8:	2000      	movs	r0, #0
    c5da:	e7d2      	b.n	c582 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c5dc:	4b0f      	ldr	r3, [pc, #60]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c5de:	701a      	strb	r2, [r3, #0]
		return false;
    c5e0:	2000      	movs	r0, #0
    c5e2:	e7ce      	b.n	c582 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    c5e4:	4b15      	ldr	r3, [pc, #84]	; (c63c <sd_mmc_spi_adtc_start+0x18c>)
    c5e6:	4798      	blx	r3
    c5e8:	2800      	cmp	r0, #0
    c5ea:	d1da      	bne.n	c5a2 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c5ec:	2203      	movs	r2, #3
    c5ee:	4b0b      	ldr	r3, [pc, #44]	; (c61c <sd_mmc_spi_adtc_start+0x16c>)
    c5f0:	701a      	strb	r2, [r3, #0]
			return false;
    c5f2:	e7c6      	b.n	c582 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    c5f4:	490d      	ldr	r1, [pc, #52]	; (c62c <sd_mmc_spi_adtc_start+0x17c>)
    c5f6:	2300      	movs	r3, #0
    c5f8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c5fa:	33ff      	adds	r3, #255	; 0xff
    c5fc:	2201      	movs	r2, #1
    c5fe:	4808      	ldr	r0, [pc, #32]	; (c620 <sd_mmc_spi_adtc_start+0x170>)
    c600:	4e09      	ldr	r6, [pc, #36]	; (c628 <sd_mmc_spi_adtc_start+0x178>)
    c602:	47b0      	blx	r6
    c604:	e7d0      	b.n	c5a8 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c606:	4e09      	ldr	r6, [pc, #36]	; (c62c <sd_mmc_spi_adtc_start+0x17c>)
    c608:	23ff      	movs	r3, #255	; 0xff
    c60a:	2204      	movs	r2, #4
    c60c:	0031      	movs	r1, r6
    c60e:	4804      	ldr	r0, [pc, #16]	; (c620 <sd_mmc_spi_adtc_start+0x170>)
    c610:	4f05      	ldr	r7, [pc, #20]	; (c628 <sd_mmc_spi_adtc_start+0x178>)
    c612:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c614:	6833      	ldr	r3, [r6, #0]
    c616:	ba1b      	rev	r3, r3
    c618:	6033      	str	r3, [r6, #0]
    c61a:	e7c8      	b.n	c5ae <sd_mmc_spi_adtc_start+0xfe>
    c61c:	200002e3 	.word	0x200002e3
    c620:	200002a0 	.word	0x200002a0
    c624:	00010801 	.word	0x00010801
    c628:	00010639 	.word	0x00010639
    c62c:	200002e8 	.word	0x200002e8
    c630:	200002dc 	.word	0x200002dc
    c634:	200002e4 	.word	0x200002e4
    c638:	200002ec 	.word	0x200002ec
    c63c:	0000c145 	.word	0x0000c145

0000c640 <sd_mmc_spi_send_cmd>:
{
    c640:	b510      	push	{r4, lr}
    c642:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c644:	2300      	movs	r3, #0
    c646:	9300      	str	r3, [sp, #0]
    c648:	2200      	movs	r2, #0
    c64a:	4c02      	ldr	r4, [pc, #8]	; (c654 <sd_mmc_spi_send_cmd+0x14>)
    c64c:	47a0      	blx	r4
}
    c64e:	b002      	add	sp, #8
    c650:	bd10      	pop	{r4, pc}
    c652:	46c0      	nop			; (mov r8, r8)
    c654:	0000c4b1 	.word	0x0000c4b1

0000c658 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    c658:	4b01      	ldr	r3, [pc, #4]	; (c660 <sd_mmc_spi_get_response+0x8>)
    c65a:	6818      	ldr	r0, [r3, #0]
}
    c65c:	4770      	bx	lr
    c65e:	46c0      	nop			; (mov r8, r8)
    c660:	200002e8 	.word	0x200002e8

0000c664 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c664:	b510      	push	{r4, lr}
    c666:	b084      	sub	sp, #16
    c668:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c66a:	2200      	movs	r2, #0
    c66c:	4b14      	ldr	r3, [pc, #80]	; (c6c0 <sd_mmc_spi_read_word+0x5c>)
    c66e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c670:	4b14      	ldr	r3, [pc, #80]	; (c6c4 <sd_mmc_spi_read_word+0x60>)
    c672:	8819      	ldrh	r1, [r3, #0]
    c674:	4b14      	ldr	r3, [pc, #80]	; (c6c8 <sd_mmc_spi_read_word+0x64>)
    c676:	6818      	ldr	r0, [r3, #0]
    c678:	4b14      	ldr	r3, [pc, #80]	; (c6cc <sd_mmc_spi_read_word+0x68>)
    c67a:	4798      	blx	r3
    c67c:	2900      	cmp	r1, #0
    c67e:	d103      	bne.n	c688 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c680:	4b13      	ldr	r3, [pc, #76]	; (c6d0 <sd_mmc_spi_read_word+0x6c>)
    c682:	4798      	blx	r3
    c684:	2800      	cmp	r0, #0
    c686:	d010      	beq.n	c6aa <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c688:	23ff      	movs	r3, #255	; 0xff
    c68a:	2204      	movs	r2, #4
    c68c:	a901      	add	r1, sp, #4
    c68e:	4811      	ldr	r0, [pc, #68]	; (c6d4 <sd_mmc_spi_read_word+0x70>)
    c690:	4c11      	ldr	r4, [pc, #68]	; (c6d8 <sd_mmc_spi_read_word+0x74>)
    c692:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    c694:	4b0c      	ldr	r3, [pc, #48]	; (c6c8 <sd_mmc_spi_read_word+0x64>)
    c696:	681a      	ldr	r2, [r3, #0]
    c698:	1d10      	adds	r0, r2, #4
    c69a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c69c:	4b09      	ldr	r3, [pc, #36]	; (c6c4 <sd_mmc_spi_read_word+0x60>)
    c69e:	8819      	ldrh	r1, [r3, #0]
    c6a0:	4b0a      	ldr	r3, [pc, #40]	; (c6cc <sd_mmc_spi_read_word+0x68>)
    c6a2:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    c6a4:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c6a6:	2900      	cmp	r1, #0
    c6a8:	d001      	beq.n	c6ae <sd_mmc_spi_read_word+0x4a>
}
    c6aa:	b004      	add	sp, #16
    c6ac:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c6ae:	23ff      	movs	r3, #255	; 0xff
    c6b0:	2202      	movs	r2, #2
    c6b2:	a903      	add	r1, sp, #12
    c6b4:	4807      	ldr	r0, [pc, #28]	; (c6d4 <sd_mmc_spi_read_word+0x70>)
    c6b6:	4c08      	ldr	r4, [pc, #32]	; (c6d8 <sd_mmc_spi_read_word+0x74>)
    c6b8:	47a0      	blx	r4
	return true;
    c6ba:	2001      	movs	r0, #1
    c6bc:	e7f5      	b.n	c6aa <sd_mmc_spi_read_word+0x46>
    c6be:	46c0      	nop			; (mov r8, r8)
    c6c0:	200002e3 	.word	0x200002e3
    c6c4:	200002dc 	.word	0x200002dc
    c6c8:	200002ec 	.word	0x200002ec
    c6cc:	000167a5 	.word	0x000167a5
    c6d0:	0000c221 	.word	0x0000c221
    c6d4:	200002a0 	.word	0x200002a0
    c6d8:	00010639 	.word	0x00010639

0000c6dc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6de:	46de      	mov	lr, fp
    c6e0:	4657      	mov	r7, sl
    c6e2:	4646      	mov	r6, r8
    c6e4:	b5c0      	push	{r6, r7, lr}
    c6e6:	b082      	sub	sp, #8
    c6e8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c6ea:	2200      	movs	r2, #0
    c6ec:	4b17      	ldr	r3, [pc, #92]	; (c74c <sd_mmc_spi_start_read_blocks+0x70>)
    c6ee:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    c6f0:	1e4c      	subs	r4, r1, #1
    c6f2:	b2a4      	uxth	r4, r4
    c6f4:	2900      	cmp	r1, #0
    c6f6:	d026      	beq.n	c746 <sd_mmc_spi_start_read_blocks+0x6a>
    c6f8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c6fa:	4b15      	ldr	r3, [pc, #84]	; (c750 <sd_mmc_spi_start_read_blocks+0x74>)
    c6fc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c6fe:	4f15      	ldr	r7, [pc, #84]	; (c754 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    c700:	47d0      	blx	sl
    c702:	4680      	mov	r8, r0
    c704:	2800      	cmp	r0, #0
    c706:	d017      	beq.n	c738 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c708:	883a      	ldrh	r2, [r7, #0]
    c70a:	465b      	mov	r3, fp
    c70c:	1999      	adds	r1, r3, r6
    c70e:	23ff      	movs	r3, #255	; 0xff
    c710:	4811      	ldr	r0, [pc, #68]	; (c758 <sd_mmc_spi_start_read_blocks+0x7c>)
    c712:	4d12      	ldr	r5, [pc, #72]	; (c75c <sd_mmc_spi_start_read_blocks+0x80>)
    c714:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c716:	883b      	ldrh	r3, [r7, #0]
    c718:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c71a:	4a11      	ldr	r2, [pc, #68]	; (c760 <sd_mmc_spi_start_read_blocks+0x84>)
    c71c:	6811      	ldr	r1, [r2, #0]
    c71e:	468c      	mov	ip, r1
    c720:	4463      	add	r3, ip
    c722:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c724:	23ff      	movs	r3, #255	; 0xff
    c726:	2202      	movs	r2, #2
    c728:	a901      	add	r1, sp, #4
    c72a:	480b      	ldr	r0, [pc, #44]	; (c758 <sd_mmc_spi_start_read_blocks+0x7c>)
    c72c:	47a8      	blx	r5
	while (nb_block--) {
    c72e:	3c01      	subs	r4, #1
    c730:	b2a4      	uxth	r4, r4
    c732:	4b0c      	ldr	r3, [pc, #48]	; (c764 <sd_mmc_spi_start_read_blocks+0x88>)
    c734:	429c      	cmp	r4, r3
    c736:	d1e3      	bne.n	c700 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    c738:	4640      	mov	r0, r8
    c73a:	b002      	add	sp, #8
    c73c:	bc1c      	pop	{r2, r3, r4}
    c73e:	4690      	mov	r8, r2
    c740:	469a      	mov	sl, r3
    c742:	46a3      	mov	fp, r4
    c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    c746:	2301      	movs	r3, #1
    c748:	4698      	mov	r8, r3
    c74a:	e7f5      	b.n	c738 <sd_mmc_spi_start_read_blocks+0x5c>
    c74c:	200002e3 	.word	0x200002e3
    c750:	0000c221 	.word	0x0000c221
    c754:	200002dc 	.word	0x200002dc
    c758:	200002a0 	.word	0x200002a0
    c75c:	00010639 	.word	0x00010639
    c760:	200002ec 	.word	0x200002ec
    c764:	0000ffff 	.word	0x0000ffff

0000c768 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    c768:	2001      	movs	r0, #1
    c76a:	4770      	bx	lr

0000c76c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c76e:	46c6      	mov	lr, r8
    c770:	b500      	push	{lr}
    c772:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c774:	2200      	movs	r2, #0
    c776:	4b15      	ldr	r3, [pc, #84]	; (c7cc <sd_mmc_spi_start_write_blocks+0x60>)
    c778:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c77a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c77c:	4f14      	ldr	r7, [pc, #80]	; (c7d0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c77e:	4e15      	ldr	r6, [pc, #84]	; (c7d4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    c780:	e000      	b.n	c784 <sd_mmc_spi_start_write_blocks+0x18>
{
    c782:	0021      	movs	r1, r4
	while (nb_block--) {
    c784:	1e4c      	subs	r4, r1, #1
    c786:	b2a4      	uxth	r4, r4
    c788:	2900      	cmp	r1, #0
    c78a:	d01b      	beq.n	c7c4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    c78c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c78e:	8832      	ldrh	r2, [r6, #0]
    c790:	4643      	mov	r3, r8
    c792:	1959      	adds	r1, r3, r5
    c794:	4810      	ldr	r0, [pc, #64]	; (c7d8 <sd_mmc_spi_start_write_blocks+0x6c>)
    c796:	4b11      	ldr	r3, [pc, #68]	; (c7dc <sd_mmc_spi_start_write_blocks+0x70>)
    c798:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c79a:	8833      	ldrh	r3, [r6, #0]
    c79c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c79e:	4a10      	ldr	r2, [pc, #64]	; (c7e0 <sd_mmc_spi_start_write_blocks+0x74>)
    c7a0:	6811      	ldr	r1, [r2, #0]
    c7a2:	468c      	mov	ip, r1
    c7a4:	4463      	add	r3, ip
    c7a6:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c7a8:	4b0e      	ldr	r3, [pc, #56]	; (c7e4 <sd_mmc_spi_start_write_blocks+0x78>)
    c7aa:	4798      	blx	r3
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d00a      	beq.n	c7c6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c7b0:	2c00      	cmp	r4, #0
    c7b2:	d0e6      	beq.n	c782 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c7b4:	4b0c      	ldr	r3, [pc, #48]	; (c7e8 <sd_mmc_spi_start_write_blocks+0x7c>)
    c7b6:	4798      	blx	r3
    c7b8:	2800      	cmp	r0, #0
    c7ba:	d1e2      	bne.n	c782 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c7bc:	2205      	movs	r2, #5
    c7be:	4b03      	ldr	r3, [pc, #12]	; (c7cc <sd_mmc_spi_start_write_blocks+0x60>)
    c7c0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c7c2:	e000      	b.n	c7c6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    c7c4:	2001      	movs	r0, #1
}
    c7c6:	bc04      	pop	{r2}
    c7c8:	4690      	mov	r8, r2
    c7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7cc:	200002e3 	.word	0x200002e3
    c7d0:	0000c0fd 	.word	0x0000c0fd
    c7d4:	200002dc 	.word	0x200002dc
    c7d8:	200002a0 	.word	0x200002a0
    c7dc:	00010801 	.word	0x00010801
    c7e0:	200002ec 	.word	0x200002ec
    c7e4:	0000c28d 	.word	0x0000c28d
    c7e8:	0000c145 	.word	0x0000c145

0000c7ec <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c7ec:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c7ee:	4b05      	ldr	r3, [pc, #20]	; (c804 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    c7f0:	4798      	blx	r3
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d103      	bne.n	c7fe <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c7f6:	2205      	movs	r2, #5
    c7f8:	4b03      	ldr	r3, [pc, #12]	; (c808 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    c7fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    c7fc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    c7fe:	4b03      	ldr	r3, [pc, #12]	; (c80c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    c800:	4798      	blx	r3
    c802:	e7fb      	b.n	c7fc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    c804:	0000c145 	.word	0x0000c145
    c808:	200002e3 	.word	0x200002e3
    c80c:	0000c1a9 	.word	0x0000c1a9

0000c810 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c810:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c812:	2000      	movs	r0, #0
    c814:	4b08      	ldr	r3, [pc, #32]	; (c838 <delay_init+0x28>)
    c816:	4798      	blx	r3
    c818:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    c81a:	4c08      	ldr	r4, [pc, #32]	; (c83c <delay_init+0x2c>)
    c81c:	21fa      	movs	r1, #250	; 0xfa
    c81e:	0089      	lsls	r1, r1, #2
    c820:	47a0      	blx	r4
    c822:	4b07      	ldr	r3, [pc, #28]	; (c840 <delay_init+0x30>)
    c824:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c826:	4907      	ldr	r1, [pc, #28]	; (c844 <delay_init+0x34>)
    c828:	0028      	movs	r0, r5
    c82a:	47a0      	blx	r4
    c82c:	4b06      	ldr	r3, [pc, #24]	; (c848 <delay_init+0x38>)
    c82e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c830:	2205      	movs	r2, #5
    c832:	4b06      	ldr	r3, [pc, #24]	; (c84c <delay_init+0x3c>)
    c834:	601a      	str	r2, [r3, #0]
}
    c836:	bd70      	pop	{r4, r5, r6, pc}
    c838:	00011641 	.word	0x00011641
    c83c:	00016699 	.word	0x00016699
    c840:	20000064 	.word	0x20000064
    c844:	000f4240 	.word	0x000f4240
    c848:	20000068 	.word	0x20000068
    c84c:	e000e010 	.word	0xe000e010

0000c850 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    c850:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    c852:	4b08      	ldr	r3, [pc, #32]	; (c874 <delay_cycles_ms+0x24>)
    c854:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    c856:	4a08      	ldr	r2, [pc, #32]	; (c878 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    c858:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c85a:	2180      	movs	r1, #128	; 0x80
    c85c:	0249      	lsls	r1, r1, #9
	while (n--) {
    c85e:	3801      	subs	r0, #1
    c860:	d307      	bcc.n	c872 <delay_cycles_ms+0x22>
	if (n > 0) {
    c862:	2c00      	cmp	r4, #0
    c864:	d0fb      	beq.n	c85e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    c866:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    c868:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c86a:	6813      	ldr	r3, [r2, #0]
    c86c:	420b      	tst	r3, r1
    c86e:	d0fc      	beq.n	c86a <delay_cycles_ms+0x1a>
    c870:	e7f5      	b.n	c85e <delay_cycles_ms+0xe>
	}
}
    c872:	bd30      	pop	{r4, r5, pc}
    c874:	20000064 	.word	0x20000064
    c878:	e000e010 	.word	0xe000e010

0000c87c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c87c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    c87e:	4b03      	ldr	r3, [pc, #12]	; (c88c <chip_isr+0x10>)
    c880:	681b      	ldr	r3, [r3, #0]
    c882:	2b00      	cmp	r3, #0
    c884:	d000      	beq.n	c888 <chip_isr+0xc>
		gpfIsr();
    c886:	4798      	blx	r3
	}
}
    c888:	bd10      	pop	{r4, pc}
    c88a:	46c0      	nop			; (mov r8, r8)
    c88c:	200002f4 	.word	0x200002f4

0000c890 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c890:	b570      	push	{r4, r5, r6, lr}
    c892:	b082      	sub	sp, #8
	gpfIsr = NULL;
    c894:	2300      	movs	r3, #0
    c896:	4a15      	ldr	r2, [pc, #84]	; (c8ec <nm_bsp_init+0x5c>)
    c898:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c89a:	ac01      	add	r4, sp, #4
    c89c:	2501      	movs	r5, #1
    c89e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    c8a0:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c8a2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c8a4:	0021      	movs	r1, r4
    c8a6:	201b      	movs	r0, #27
    c8a8:	4e11      	ldr	r6, [pc, #68]	; (c8f0 <nm_bsp_init+0x60>)
    c8aa:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c8ac:	0021      	movs	r1, r4
    c8ae:	201c      	movs	r0, #28
    c8b0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c8b2:	0021      	movs	r1, r4
    c8b4:	2028      	movs	r0, #40	; 0x28
    c8b6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    c8b8:	4b0e      	ldr	r3, [pc, #56]	; (c8f4 <nm_bsp_init+0x64>)
    c8ba:	2280      	movs	r2, #128	; 0x80
    c8bc:	0552      	lsls	r2, r2, #21
    c8be:	615a      	str	r2, [r3, #20]
    c8c0:	2280      	movs	r2, #128	; 0x80
    c8c2:	0512      	lsls	r2, r2, #20
    c8c4:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c8c6:	4b0c      	ldr	r3, [pc, #48]	; (c8f8 <nm_bsp_init+0x68>)
    c8c8:	681b      	ldr	r3, [r3, #0]
    c8ca:	421d      	tst	r5, r3
    c8cc:	d003      	beq.n	c8d6 <nm_bsp_init+0x46>
    c8ce:	4b0a      	ldr	r3, [pc, #40]	; (c8f8 <nm_bsp_init+0x68>)
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	079b      	lsls	r3, r3, #30
    c8d4:	d401      	bmi.n	c8da <nm_bsp_init+0x4a>
	    delay_init();
    c8d6:	4b09      	ldr	r3, [pc, #36]	; (c8fc <nm_bsp_init+0x6c>)
    c8d8:	4798      	blx	r3
	cpu_irq_enable();
    c8da:	2201      	movs	r2, #1
    c8dc:	4b08      	ldr	r3, [pc, #32]	; (c900 <nm_bsp_init+0x70>)
    c8de:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c8e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    c8e4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    c8e6:	2000      	movs	r0, #0
    c8e8:	b002      	add	sp, #8
    c8ea:	bd70      	pop	{r4, r5, r6, pc}
    c8ec:	200002f4 	.word	0x200002f4
    c8f0:	0000fd05 	.word	0x0000fd05
    c8f4:	41004400 	.word	0x41004400
    c8f8:	e000e010 	.word	0xe000e010
    c8fc:	0000c811 	.word	0x0000c811
    c900:	2000006e 	.word	0x2000006e

0000c904 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c904:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    c906:	1e44      	subs	r4, r0, #1
    c908:	2800      	cmp	r0, #0
    c90a:	d004      	beq.n	c916 <nm_bsp_sleep+0x12>
		delay_ms(1);
    c90c:	4d02      	ldr	r5, [pc, #8]	; (c918 <nm_bsp_sleep+0x14>)
    c90e:	2001      	movs	r0, #1
    c910:	47a8      	blx	r5
	while (u32TimeMsec--) {
    c912:	3c01      	subs	r4, #1
    c914:	d2fb      	bcs.n	c90e <nm_bsp_sleep+0xa>
	}
}
    c916:	bd70      	pop	{r4, r5, r6, pc}
    c918:	0000c851 	.word	0x0000c851

0000c91c <nm_bsp_reset>:
{
    c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c91e:	4c07      	ldr	r4, [pc, #28]	; (c93c <nm_bsp_reset+0x20>)
    c920:	2780      	movs	r7, #128	; 0x80
    c922:	057f      	lsls	r7, r7, #21
    c924:	6167      	str	r7, [r4, #20]
    c926:	2580      	movs	r5, #128	; 0x80
    c928:	052d      	lsls	r5, r5, #20
    c92a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    c92c:	2001      	movs	r0, #1
    c92e:	4e04      	ldr	r6, [pc, #16]	; (c940 <nm_bsp_reset+0x24>)
    c930:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c932:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    c934:	200a      	movs	r0, #10
    c936:	47b0      	blx	r6
    c938:	61a5      	str	r5, [r4, #24]
}
    c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c93c:	41004400 	.word	0x41004400
    c940:	0000c905 	.word	0x0000c905

0000c944 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c944:	b510      	push	{r4, lr}
    c946:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c948:	4b0e      	ldr	r3, [pc, #56]	; (c984 <nm_bsp_register_isr+0x40>)
    c94a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c94c:	ac01      	add	r4, sp, #4
    c94e:	0020      	movs	r0, r4
    c950:	4b0d      	ldr	r3, [pc, #52]	; (c988 <nm_bsp_register_isr+0x44>)
    c952:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c954:	2329      	movs	r3, #41	; 0x29
    c956:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c958:	2300      	movs	r3, #0
    c95a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c95c:	3301      	adds	r3, #1
    c95e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c960:	3301      	adds	r3, #1
    c962:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c964:	0021      	movs	r1, r4
    c966:	2009      	movs	r0, #9
    c968:	4b08      	ldr	r3, [pc, #32]	; (c98c <nm_bsp_register_isr+0x48>)
    c96a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c96c:	2200      	movs	r2, #0
    c96e:	2109      	movs	r1, #9
    c970:	4807      	ldr	r0, [pc, #28]	; (c990 <nm_bsp_register_isr+0x4c>)
    c972:	4b08      	ldr	r3, [pc, #32]	; (c994 <nm_bsp_register_isr+0x50>)
    c974:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c976:	2100      	movs	r1, #0
    c978:	2009      	movs	r0, #9
    c97a:	4b07      	ldr	r3, [pc, #28]	; (c998 <nm_bsp_register_isr+0x54>)
    c97c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c97e:	b004      	add	sp, #16
    c980:	bd10      	pop	{r4, pc}
    c982:	46c0      	nop			; (mov r8, r8)
    c984:	200002f4 	.word	0x200002f4
    c988:	0000fc79 	.word	0x0000fc79
    c98c:	0000fc8d 	.word	0x0000fc8d
    c990:	0000c87d 	.word	0x0000c87d
    c994:	0000fb35 	.word	0x0000fb35
    c998:	0000fb61 	.word	0x0000fb61

0000c99c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c99c:	b510      	push	{r4, lr}
	if (u8Enable) {
    c99e:	2800      	cmp	r0, #0
    c9a0:	d104      	bne.n	c9ac <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c9a2:	2100      	movs	r1, #0
    c9a4:	2009      	movs	r0, #9
    c9a6:	4b04      	ldr	r3, [pc, #16]	; (c9b8 <nm_bsp_interrupt_ctrl+0x1c>)
    c9a8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c9aa:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c9ac:	2100      	movs	r1, #0
    c9ae:	2009      	movs	r0, #9
    c9b0:	4b02      	ldr	r3, [pc, #8]	; (c9bc <nm_bsp_interrupt_ctrl+0x20>)
    c9b2:	4798      	blx	r3
    c9b4:	e7f9      	b.n	c9aa <nm_bsp_interrupt_ctrl+0xe>
    c9b6:	46c0      	nop			; (mov r8, r8)
    c9b8:	0000fb81 	.word	0x0000fb81
    c9bc:	0000fb61 	.word	0x0000fb61

0000c9c0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    c9c0:	b530      	push	{r4, r5, lr}
    c9c2:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    c9c4:	4c30      	ldr	r4, [pc, #192]	; (ca88 <nm_bus_init+0xc8>)
    c9c6:	230e      	movs	r3, #14
    c9c8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c9ca:	2300      	movs	r3, #0
    c9cc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c9ce:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c9d0:	a901      	add	r1, sp, #4
    c9d2:	2201      	movs	r2, #1
    c9d4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c9d6:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c9d8:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c9da:	200e      	movs	r0, #14
    c9dc:	4b2b      	ldr	r3, [pc, #172]	; (ca8c <nm_bus_init+0xcc>)
    c9de:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c9e0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c9e2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c9e4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c9e6:	2900      	cmp	r1, #0
    c9e8:	d104      	bne.n	c9f4 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    c9ea:	0953      	lsrs	r3, r2, #5
    c9ec:	01db      	lsls	r3, r3, #7
    c9ee:	4928      	ldr	r1, [pc, #160]	; (ca90 <nm_bus_init+0xd0>)
    c9f0:	468c      	mov	ip, r1
    c9f2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c9f4:	211f      	movs	r1, #31
    c9f6:	4011      	ands	r1, r2
    c9f8:	2201      	movs	r2, #1
    c9fa:	0010      	movs	r0, r2
    c9fc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c9fe:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    ca00:	ac02      	add	r4, sp, #8
    ca02:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    ca04:	2300      	movs	r3, #0
    ca06:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    ca08:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    ca0a:	21c0      	movs	r1, #192	; 0xc0
    ca0c:	0389      	lsls	r1, r1, #14
    ca0e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    ca10:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    ca12:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    ca14:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    ca16:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    ca18:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    ca1a:	3223      	adds	r2, #35	; 0x23
    ca1c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    ca1e:	3a18      	subs	r2, #24
    ca20:	2100      	movs	r1, #0
    ca22:	a808      	add	r0, sp, #32
    ca24:	4b1b      	ldr	r3, [pc, #108]	; (ca94 <nm_bus_init+0xd4>)
    ca26:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    ca28:	4b1b      	ldr	r3, [pc, #108]	; (ca98 <nm_bus_init+0xd8>)
    ca2a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    ca2c:	4b1b      	ldr	r3, [pc, #108]	; (ca9c <nm_bus_init+0xdc>)
    ca2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    ca30:	2301      	movs	r3, #1
    ca32:	425b      	negs	r3, r3
    ca34:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    ca36:	4b1a      	ldr	r3, [pc, #104]	; (caa0 <nm_bus_init+0xe0>)
    ca38:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    ca3a:	4b1a      	ldr	r3, [pc, #104]	; (caa4 <nm_bus_init+0xe4>)
    ca3c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    ca3e:	0022      	movs	r2, r4
    ca40:	4919      	ldr	r1, [pc, #100]	; (caa8 <nm_bus_init+0xe8>)
    ca42:	481a      	ldr	r0, [pc, #104]	; (caac <nm_bus_init+0xec>)
    ca44:	4b1a      	ldr	r3, [pc, #104]	; (cab0 <nm_bus_init+0xf0>)
    ca46:	4798      	blx	r3
    ca48:	2800      	cmp	r0, #0
    ca4a:	d11a      	bne.n	ca82 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca4c:	4d17      	ldr	r5, [pc, #92]	; (caac <nm_bus_init+0xec>)
    ca4e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ca50:	0020      	movs	r0, r4
    ca52:	4b18      	ldr	r3, [pc, #96]	; (cab4 <nm_bus_init+0xf4>)
    ca54:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ca56:	231f      	movs	r3, #31
    ca58:	4018      	ands	r0, r3
    ca5a:	3b1e      	subs	r3, #30
    ca5c:	4083      	lsls	r3, r0
    ca5e:	4a16      	ldr	r2, [pc, #88]	; (cab8 <nm_bus_init+0xf8>)
    ca60:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca62:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ca64:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    ca66:	2b00      	cmp	r3, #0
    ca68:	d1fc      	bne.n	ca64 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ca6a:	6823      	ldr	r3, [r4, #0]
    ca6c:	2202      	movs	r2, #2
    ca6e:	4313      	orrs	r3, r2
    ca70:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    ca72:	4b12      	ldr	r3, [pc, #72]	; (cabc <nm_bus_init+0xfc>)
    ca74:	4798      	blx	r3
	nm_bsp_sleep(1);
    ca76:	2001      	movs	r0, #1
    ca78:	4b11      	ldr	r3, [pc, #68]	; (cac0 <nm_bus_init+0x100>)
    ca7a:	4798      	blx	r3
#endif
	return result;
    ca7c:	2000      	movs	r0, #0
}
    ca7e:	b011      	add	sp, #68	; 0x44
    ca80:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    ca82:	2006      	movs	r0, #6
    ca84:	4240      	negs	r0, r0
    ca86:	e7fa      	b.n	ca7e <nm_bus_init+0xbe>
    ca88:	2000132c 	.word	0x2000132c
    ca8c:	0000fd05 	.word	0x0000fd05
    ca90:	41004400 	.word	0x41004400
    ca94:	00016a7f 	.word	0x00016a7f
    ca98:	000c0002 	.word	0x000c0002
    ca9c:	000d0002 	.word	0x000d0002
    caa0:	000f0002 	.word	0x000f0002
    caa4:	00b71b00 	.word	0x00b71b00
    caa8:	42001000 	.word	0x42001000
    caac:	20001330 	.word	0x20001330
    cab0:	00010461 	.word	0x00010461
    cab4:	00010319 	.word	0x00010319
    cab8:	e000e100 	.word	0xe000e100
    cabc:	0000c91d 	.word	0x0000c91d
    cac0:	0000c905 	.word	0x0000c905

0000cac4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    cac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cac6:	46de      	mov	lr, fp
    cac8:	4657      	mov	r7, sl
    caca:	464e      	mov	r6, r9
    cacc:	4645      	mov	r5, r8
    cace:	b5e0      	push	{r5, r6, r7, lr}
    cad0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    cad2:	2803      	cmp	r0, #3
    cad4:	d000      	beq.n	cad8 <nm_bus_ioctl+0x14>
    cad6:	e075      	b.n	cbc4 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    cad8:	680e      	ldr	r6, [r1, #0]
    cada:	684d      	ldr	r5, [r1, #4]
    cadc:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    cade:	2200      	movs	r2, #0
    cae0:	466b      	mov	r3, sp
    cae2:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    cae4:	2d00      	cmp	r5, #0
    cae6:	d027      	beq.n	cb38 <nm_bus_ioctl+0x74>
    cae8:	2c00      	cmp	r4, #0
    caea:	d065      	beq.n	cbb8 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    caec:	2e00      	cmp	r6, #0
    caee:	d100      	bne.n	caf2 <nm_bus_ioctl+0x2e>
    caf0:	e077      	b.n	cbe2 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    caf2:	2300      	movs	r3, #0
    caf4:	4698      	mov	r8, r3
    caf6:	2300      	movs	r3, #0
    caf8:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    cafa:	2201      	movs	r2, #1
    cafc:	493b      	ldr	r1, [pc, #236]	; (cbec <nm_bus_ioctl+0x128>)
    cafe:	483c      	ldr	r0, [pc, #240]	; (cbf0 <nm_bus_ioctl+0x12c>)
    cb00:	4b3c      	ldr	r3, [pc, #240]	; (cbf4 <nm_bus_ioctl+0x130>)
    cb02:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cb04:	4b3a      	ldr	r3, [pc, #232]	; (cbf0 <nm_bus_ioctl+0x12c>)
    cb06:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    cb08:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    cb0a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb0c:	4699      	mov	r9, r3
			pu8Miso++;
    cb0e:	4659      	mov	r1, fp
    cb10:	424b      	negs	r3, r1
    cb12:	4159      	adcs	r1, r3
    cb14:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    cb16:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb18:	4653      	mov	r3, sl
    cb1a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cb1c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    cb1e:	4239      	tst	r1, r7
    cb20:	d0fc      	beq.n	cb1c <nm_bus_ioctl+0x58>
    cb22:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cb24:	4239      	tst	r1, r7
    cb26:	d0fc      	beq.n	cb22 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cb28:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb2a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    cb2c:	4211      	tst	r1, r2
    cb2e:	d0fc      	beq.n	cb2a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb30:	4649      	mov	r1, r9
    cb32:	7989      	ldrb	r1, [r1, #6]
    cb34:	468c      	mov	ip, r1
    cb36:	e011      	b.n	cb5c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    cb38:	2e00      	cmp	r6, #0
    cb3a:	d03a      	beq.n	cbb2 <nm_bus_ioctl+0xee>
    cb3c:	2c00      	cmp	r4, #0
    cb3e:	d03e      	beq.n	cbbe <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    cb40:	2300      	movs	r3, #0
    cb42:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    cb44:	3301      	adds	r3, #1
    cb46:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    cb48:	466b      	mov	r3, sp
    cb4a:	1ddd      	adds	r5, r3, #7
    cb4c:	e7d5      	b.n	cafa <nm_bus_ioctl+0x36>
    cb4e:	4660      	mov	r0, ip
    cb50:	2801      	cmp	r0, #1
    cb52:	d00d      	beq.n	cb70 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cb54:	6a98      	ldr	r0, [r3, #40]	; 0x28
    cb56:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    cb58:	2900      	cmp	r1, #0
    cb5a:	d00d      	beq.n	cb78 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb5c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cb5e:	4211      	tst	r1, r2
    cb60:	d0fc      	beq.n	cb5c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb62:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    cb64:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb66:	4210      	tst	r0, r2
    cb68:	d0f1      	beq.n	cb4e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cb6a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    cb6c:	311e      	adds	r1, #30
    cb6e:	e7ee      	b.n	cb4e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cb70:	6a98      	ldr	r0, [r3, #40]	; 0x28
    cb72:	05c0      	lsls	r0, r0, #23
    cb74:	0dc0      	lsrs	r0, r0, #23
    cb76:	e7ef      	b.n	cb58 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    cb78:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    cb7a:	3c01      	subs	r4, #1
    cb7c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    cb7e:	445d      	add	r5, fp
			pu8Mosi++;
    cb80:	4643      	mov	r3, r8
    cb82:	4259      	negs	r1, r3
    cb84:	414b      	adcs	r3, r1
    cb86:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    cb88:	2c00      	cmp	r4, #0
    cb8a:	d1c4      	bne.n	cb16 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb8c:	4b18      	ldr	r3, [pc, #96]	; (cbf0 <nm_bus_ioctl+0x12c>)
    cb8e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    cb90:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cb92:	7e0b      	ldrb	r3, [r1, #24]
    cb94:	4213      	tst	r3, r2
    cb96:	d0fc      	beq.n	cb92 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    cb98:	2200      	movs	r2, #0
    cb9a:	4914      	ldr	r1, [pc, #80]	; (cbec <nm_bus_ioctl+0x128>)
    cb9c:	4814      	ldr	r0, [pc, #80]	; (cbf0 <nm_bus_ioctl+0x12c>)
    cb9e:	4b15      	ldr	r3, [pc, #84]	; (cbf4 <nm_bus_ioctl+0x130>)
    cba0:	4798      	blx	r3
	return M2M_SUCCESS;
    cba2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    cba4:	b003      	add	sp, #12
    cba6:	bc3c      	pop	{r2, r3, r4, r5}
    cba8:	4690      	mov	r8, r2
    cbaa:	4699      	mov	r9, r3
    cbac:	46a2      	mov	sl, r4
    cbae:	46ab      	mov	fp, r5
    cbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    cbb2:	200f      	movs	r0, #15
    cbb4:	4240      	negs	r0, r0
    cbb6:	e7f5      	b.n	cba4 <nm_bus_ioctl+0xe0>
    cbb8:	200f      	movs	r0, #15
    cbba:	4240      	negs	r0, r0
    cbbc:	e7f2      	b.n	cba4 <nm_bus_ioctl+0xe0>
    cbbe:	200f      	movs	r0, #15
    cbc0:	4240      	negs	r0, r0
		break;
    cbc2:	e7ef      	b.n	cba4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    cbc4:	2283      	movs	r2, #131	; 0x83
    cbc6:	0052      	lsls	r2, r2, #1
    cbc8:	490b      	ldr	r1, [pc, #44]	; (cbf8 <nm_bus_ioctl+0x134>)
    cbca:	480c      	ldr	r0, [pc, #48]	; (cbfc <nm_bus_ioctl+0x138>)
    cbcc:	4b0c      	ldr	r3, [pc, #48]	; (cc00 <nm_bus_ioctl+0x13c>)
    cbce:	4798      	blx	r3
    cbd0:	480c      	ldr	r0, [pc, #48]	; (cc04 <nm_bus_ioctl+0x140>)
    cbd2:	4b0d      	ldr	r3, [pc, #52]	; (cc08 <nm_bus_ioctl+0x144>)
    cbd4:	4798      	blx	r3
    cbd6:	200d      	movs	r0, #13
    cbd8:	4b0c      	ldr	r3, [pc, #48]	; (cc0c <nm_bus_ioctl+0x148>)
    cbda:	4798      	blx	r3
			s8Ret = -1;
    cbdc:	2001      	movs	r0, #1
    cbde:	4240      	negs	r0, r0
	return s8Ret;
    cbe0:	e7e0      	b.n	cba4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    cbe2:	2301      	movs	r3, #1
    cbe4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    cbe6:	466b      	mov	r3, sp
    cbe8:	1dde      	adds	r6, r3, #7
    cbea:	e784      	b.n	caf6 <nm_bus_ioctl+0x32>
    cbec:	2000132c 	.word	0x2000132c
    cbf0:	20001330 	.word	0x20001330
    cbf4:	0001070d 	.word	0x0001070d
    cbf8:	000184a8 	.word	0x000184a8
    cbfc:	000184b8 	.word	0x000184b8
    cc00:	00016be1 	.word	0x00016be1
    cc04:	000184cc 	.word	0x000184cc
    cc08:	00016cfd 	.word	0x00016cfd
    cc0c:	00016c15 	.word	0x00016c15

0000cc10 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    cc10:	b530      	push	{r4, r5, lr}
    cc12:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    cc14:	ab01      	add	r3, sp, #4
    cc16:	2200      	movs	r2, #0
    cc18:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    cc1a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    cc1c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc1e:	4d13      	ldr	r5, [pc, #76]	; (cc6c <nm_bus_deinit+0x5c>)
    cc20:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    cc22:	0020      	movs	r0, r4
    cc24:	4b12      	ldr	r3, [pc, #72]	; (cc70 <nm_bus_deinit+0x60>)
    cc26:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cc28:	231f      	movs	r3, #31
    cc2a:	4018      	ands	r0, r3
    cc2c:	3b1e      	subs	r3, #30
    cc2e:	4083      	lsls	r3, r0
    cc30:	2280      	movs	r2, #128	; 0x80
    cc32:	4910      	ldr	r1, [pc, #64]	; (cc74 <nm_bus_deinit+0x64>)
    cc34:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc36:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cc38:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d1fc      	bne.n	cc38 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cc3e:	338f      	adds	r3, #143	; 0x8f
    cc40:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cc42:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    cc44:	6823      	ldr	r3, [r4, #0]
    cc46:	2202      	movs	r2, #2
    cc48:	4393      	bics	r3, r2
    cc4a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    cc4c:	a901      	add	r1, sp, #4
    cc4e:	200c      	movs	r0, #12
    cc50:	4c09      	ldr	r4, [pc, #36]	; (cc78 <nm_bus_deinit+0x68>)
    cc52:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    cc54:	a901      	add	r1, sp, #4
    cc56:	200f      	movs	r0, #15
    cc58:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    cc5a:	a901      	add	r1, sp, #4
    cc5c:	200d      	movs	r0, #13
    cc5e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    cc60:	a901      	add	r1, sp, #4
    cc62:	200e      	movs	r0, #14
    cc64:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    cc66:	2000      	movs	r0, #0
    cc68:	b003      	add	sp, #12
    cc6a:	bd30      	pop	{r4, r5, pc}
    cc6c:	20001330 	.word	0x20001330
    cc70:	00010319 	.word	0x00010319
    cc74:	e000e100 	.word	0xe000e100
    cc78:	0000fd05 	.word	0x0000fd05

0000cc7c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    cc7c:	2a00      	cmp	r2, #0
    cc7e:	d006      	beq.n	cc8e <m2m_memcpy+0x12>
    cc80:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    cc82:	780b      	ldrb	r3, [r1, #0]
    cc84:	7003      	strb	r3, [r0, #0]
		pDst++;
    cc86:	3001      	adds	r0, #1
		pSrc++;
    cc88:	3101      	adds	r1, #1
	}while(--sz);
    cc8a:	4290      	cmp	r0, r2
    cc8c:	d1f9      	bne.n	cc82 <m2m_memcpy+0x6>
}
    cc8e:	4770      	bx	lr

0000cc90 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    cc90:	2a00      	cmp	r2, #0
    cc92:	d004      	beq.n	cc9e <m2m_memset+0xe>
    cc94:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    cc96:	7001      	strb	r1, [r0, #0]
		pBuf++;
    cc98:	3001      	adds	r0, #1
	}while(--sz);
    cc9a:	4290      	cmp	r0, r2
    cc9c:	d1fb      	bne.n	cc96 <m2m_memset+0x6>
}
    cc9e:	4770      	bx	lr

0000cca0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    cca0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    cca2:	7802      	ldrb	r2, [r0, #0]
    cca4:	2a00      	cmp	r2, #0
    cca6:	d007      	beq.n	ccb8 <m2m_strlen+0x18>
    cca8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    ccaa:	3001      	adds	r0, #1
    ccac:	b280      	uxth	r0, r0
		pcStr++;
    ccae:	3301      	adds	r3, #1
	while(*pcStr)
    ccb0:	781a      	ldrb	r2, [r3, #0]
    ccb2:	2a00      	cmp	r2, #0
    ccb4:	d1f9      	bne.n	ccaa <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    ccb6:	4770      	bx	lr
	uint16	u16StrLen = 0;
    ccb8:	2000      	movs	r0, #0
    ccba:	e7fc      	b.n	ccb6 <m2m_strlen+0x16>

0000ccbc <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    ccbc:	4a02      	ldr	r2, [pc, #8]	; (ccc8 <isr+0xc>)
    ccbe:	78d3      	ldrb	r3, [r2, #3]
    ccc0:	3301      	adds	r3, #1
    ccc2:	b2db      	uxtb	r3, r3
    ccc4:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    ccc6:	4770      	bx	lr
    ccc8:	2000136c 	.word	0x2000136c

0000cccc <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    cccc:	4770      	bx	lr
	...

0000ccd0 <hif_set_rx_done>:
{
    ccd0:	b500      	push	{lr}
    ccd2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    ccd4:	2200      	movs	r2, #0
    ccd6:	4b0a      	ldr	r3, [pc, #40]	; (cd00 <hif_set_rx_done+0x30>)
    ccd8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    ccda:	2001      	movs	r0, #1
    ccdc:	4b09      	ldr	r3, [pc, #36]	; (cd04 <hif_set_rx_done+0x34>)
    ccde:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    cce0:	a901      	add	r1, sp, #4
    cce2:	4809      	ldr	r0, [pc, #36]	; (cd08 <hif_set_rx_done+0x38>)
    cce4:	4b09      	ldr	r3, [pc, #36]	; (cd0c <hif_set_rx_done+0x3c>)
    cce6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    cce8:	2800      	cmp	r0, #0
    ccea:	d001      	beq.n	ccf0 <hif_set_rx_done+0x20>
}
    ccec:	b003      	add	sp, #12
    ccee:	bd00      	pop	{pc}
	reg |= NBIT1;
    ccf0:	2102      	movs	r1, #2
    ccf2:	9b01      	ldr	r3, [sp, #4]
    ccf4:	4319      	orrs	r1, r3
    ccf6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    ccf8:	4803      	ldr	r0, [pc, #12]	; (cd08 <hif_set_rx_done+0x38>)
    ccfa:	4b05      	ldr	r3, [pc, #20]	; (cd10 <hif_set_rx_done+0x40>)
    ccfc:	4798      	blx	r3
    ccfe:	e7f5      	b.n	ccec <hif_set_rx_done+0x1c>
    cd00:	2000136c 	.word	0x2000136c
    cd04:	0000c99d 	.word	0x0000c99d
    cd08:	00001070 	.word	0x00001070
    cd0c:	0000e0e1 	.word	0x0000e0e1
    cd10:	0000e0ed 	.word	0x0000e0ed

0000cd14 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    cd14:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    cd16:	4b0c      	ldr	r3, [pc, #48]	; (cd48 <hif_chip_wake+0x34>)
    cd18:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    cd1a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d10d      	bne.n	cd3c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    cd20:	4b09      	ldr	r3, [pc, #36]	; (cd48 <hif_chip_wake+0x34>)
    cd22:	785b      	ldrb	r3, [r3, #1]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d103      	bne.n	cd30 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cd28:	4b07      	ldr	r3, [pc, #28]	; (cd48 <hif_chip_wake+0x34>)
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d106      	bne.n	cd3e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    cd30:	4a05      	ldr	r2, [pc, #20]	; (cd48 <hif_chip_wake+0x34>)
    cd32:	7853      	ldrb	r3, [r2, #1]
    cd34:	3301      	adds	r3, #1
    cd36:	b2db      	uxtb	r3, r3
    cd38:	7053      	strb	r3, [r2, #1]
    cd3a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    cd3c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    cd3e:	4b03      	ldr	r3, [pc, #12]	; (cd4c <hif_chip_wake+0x38>)
    cd40:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    cd42:	2800      	cmp	r0, #0
    cd44:	d0f4      	beq.n	cd30 <hif_chip_wake+0x1c>
    cd46:	e7f9      	b.n	cd3c <hif_chip_wake+0x28>
    cd48:	2000136c 	.word	0x2000136c
    cd4c:	0000ddc9 	.word	0x0000ddc9

0000cd50 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    cd50:	4b05      	ldr	r3, [pc, #20]	; (cd68 <hif_chip_sleep_sc+0x18>)
    cd52:	785b      	ldrb	r3, [r3, #1]
    cd54:	2b00      	cmp	r3, #0
    cd56:	d004      	beq.n	cd62 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    cd58:	4a03      	ldr	r2, [pc, #12]	; (cd68 <hif_chip_sleep_sc+0x18>)
    cd5a:	7853      	ldrb	r3, [r2, #1]
    cd5c:	3b01      	subs	r3, #1
    cd5e:	b2db      	uxtb	r3, r3
    cd60:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    cd62:	2000      	movs	r0, #0
    cd64:	4770      	bx	lr
    cd66:	46c0      	nop			; (mov r8, r8)
    cd68:	2000136c 	.word	0x2000136c

0000cd6c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    cd6c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    cd6e:	4b0b      	ldr	r3, [pc, #44]	; (cd9c <hif_chip_sleep+0x30>)
    cd70:	785b      	ldrb	r3, [r3, #1]
    cd72:	2b00      	cmp	r3, #0
    cd74:	d004      	beq.n	cd80 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    cd76:	4a09      	ldr	r2, [pc, #36]	; (cd9c <hif_chip_sleep+0x30>)
    cd78:	7853      	ldrb	r3, [r2, #1]
    cd7a:	3b01      	subs	r3, #1
    cd7c:	b2db      	uxtb	r3, r3
    cd7e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    cd80:	4b06      	ldr	r3, [pc, #24]	; (cd9c <hif_chip_sleep+0x30>)
    cd82:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    cd84:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    cd86:	2b00      	cmp	r3, #0
    cd88:	d103      	bne.n	cd92 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    cd8a:	4b04      	ldr	r3, [pc, #16]	; (cd9c <hif_chip_sleep+0x30>)
    cd8c:	781b      	ldrb	r3, [r3, #0]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d100      	bne.n	cd94 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    cd92:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    cd94:	4b02      	ldr	r3, [pc, #8]	; (cda0 <hif_chip_sleep+0x34>)
    cd96:	4798      	blx	r3
    cd98:	e7fb      	b.n	cd92 <hif_chip_sleep+0x26>
    cd9a:	46c0      	nop			; (mov r8, r8)
    cd9c:	2000136c 	.word	0x2000136c
    cda0:	0000dd61 	.word	0x0000dd61

0000cda4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    cda4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cda6:	46de      	mov	lr, fp
    cda8:	4657      	mov	r7, sl
    cdaa:	b580      	push	{r7, lr}
    cdac:	b089      	sub	sp, #36	; 0x24
    cdae:	4683      	mov	fp, r0
    cdb0:	468a      	mov	sl, r1
    cdb2:	9201      	str	r2, [sp, #4]
    cdb4:	9300      	str	r3, [sp, #0]
    cdb6:	ab10      	add	r3, sp, #64	; 0x40
    cdb8:	cb80      	ldmia	r3!, {r7}
    cdba:	881e      	ldrh	r6, [r3, #0]
    cdbc:	ab12      	add	r3, sp, #72	; 0x48
    cdbe:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    cdc0:	227f      	movs	r2, #127	; 0x7f
    cdc2:	400a      	ands	r2, r1
    cdc4:	ab07      	add	r3, sp, #28
    cdc6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    cdc8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    cdca:	2208      	movs	r2, #8
    cdcc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    cdce:	2f00      	cmp	r7, #0
    cdd0:	d03d      	beq.n	ce4e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    cdd2:	885a      	ldrh	r2, [r3, #2]
    cdd4:	1992      	adds	r2, r2, r6
    cdd6:	18aa      	adds	r2, r5, r2
    cdd8:	b292      	uxth	r2, r2
    cdda:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    cddc:	4b69      	ldr	r3, [pc, #420]	; (cf84 <hif_send+0x1e0>)
    cdde:	4798      	blx	r3
    cde0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    cde2:	d000      	beq.n	cde6 <hif_send+0x42>
    cde4:	e0c1      	b.n	cf6a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    cde6:	2300      	movs	r3, #0
    cde8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    cdea:	aa02      	add	r2, sp, #8
    cdec:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    cdee:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    cdf0:	9b04      	ldr	r3, [sp, #16]
    cdf2:	465a      	mov	r2, fp
    cdf4:	431a      	orrs	r2, r3
    cdf6:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    cdf8:	9a04      	ldr	r2, [sp, #16]
    cdfa:	4653      	mov	r3, sl
    cdfc:	021b      	lsls	r3, r3, #8
    cdfe:	4313      	orrs	r3, r2
    ce00:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    ce02:	ab07      	add	r3, sp, #28
    ce04:	885b      	ldrh	r3, [r3, #2]
    ce06:	9a04      	ldr	r2, [sp, #16]
    ce08:	041b      	lsls	r3, r3, #16
    ce0a:	4313      	orrs	r3, r2
    ce0c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    ce0e:	9904      	ldr	r1, [sp, #16]
    ce10:	485d      	ldr	r0, [pc, #372]	; (cf88 <hif_send+0x1e4>)
    ce12:	4b5e      	ldr	r3, [pc, #376]	; (cf8c <hif_send+0x1e8>)
    ce14:	4798      	blx	r3
    ce16:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    ce18:	d157      	bne.n	ceca <hif_send+0x126>

		reg = 0UL;
    ce1a:	2300      	movs	r3, #0
    ce1c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    ce1e:	9b04      	ldr	r3, [sp, #16]
    ce20:	2202      	movs	r2, #2
    ce22:	4313      	orrs	r3, r2
    ce24:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    ce26:	9904      	ldr	r1, [sp, #16]
    ce28:	4859      	ldr	r0, [pc, #356]	; (cf90 <hif_send+0x1ec>)
    ce2a:	4b58      	ldr	r3, [pc, #352]	; (cf8c <hif_send+0x1e8>)
    ce2c:	4798      	blx	r3
    ce2e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    ce30:	d14b      	bne.n	ceca <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    ce32:	2200      	movs	r2, #0
    ce34:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    ce36:	ab02      	add	r3, sp, #8
    ce38:	80da      	strh	r2, [r3, #6]
    ce3a:	3306      	adds	r3, #6
    ce3c:	881b      	ldrh	r3, [r3, #0]
    ce3e:	b29b      	uxth	r3, r3
    ce40:	4a54      	ldr	r2, [pc, #336]	; (cf94 <hif_send+0x1f0>)
    ce42:	4293      	cmp	r3, r2
    ce44:	d849      	bhi.n	ceda <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    ce46:	4c54      	ldr	r4, [pc, #336]	; (cf98 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    ce48:	4b54      	ldr	r3, [pc, #336]	; (cf9c <hif_send+0x1f8>)
    ce4a:	469a      	mov	sl, r3
    ce4c:	e017      	b.n	ce7e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    ce4e:	ab07      	add	r3, sp, #28
    ce50:	885a      	ldrh	r2, [r3, #2]
    ce52:	9900      	ldr	r1, [sp, #0]
    ce54:	468c      	mov	ip, r1
    ce56:	4462      	add	r2, ip
    ce58:	b292      	uxth	r2, r2
    ce5a:	805a      	strh	r2, [r3, #2]
    ce5c:	e7be      	b.n	cddc <hif_send+0x38>
				nm_bsp_sleep(1);
    ce5e:	2001      	movs	r0, #1
    ce60:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    ce62:	9b04      	ldr	r3, [sp, #16]
    ce64:	079b      	lsls	r3, r3, #30
    ce66:	d528      	bpl.n	ceba <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    ce68:	ab02      	add	r3, sp, #8
    ce6a:	88da      	ldrh	r2, [r3, #6]
    ce6c:	3201      	adds	r2, #1
    ce6e:	b292      	uxth	r2, r2
    ce70:	80da      	strh	r2, [r3, #6]
    ce72:	3306      	adds	r3, #6
    ce74:	881b      	ldrh	r3, [r3, #0]
    ce76:	b29b      	uxth	r3, r3
    ce78:	4a46      	ldr	r2, [pc, #280]	; (cf94 <hif_send+0x1f0>)
    ce7a:	4293      	cmp	r3, r2
    ce7c:	d82d      	bhi.n	ceda <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    ce7e:	a904      	add	r1, sp, #16
    ce80:	4843      	ldr	r0, [pc, #268]	; (cf90 <hif_send+0x1ec>)
    ce82:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    ce84:	2800      	cmp	r0, #0
    ce86:	d128      	bne.n	ceda <hif_send+0x136>
			if(cnt >= 500) {
    ce88:	ab02      	add	r3, sp, #8
    ce8a:	3306      	adds	r3, #6
    ce8c:	881b      	ldrh	r3, [r3, #0]
    ce8e:	b29b      	uxth	r3, r3
    ce90:	22f4      	movs	r2, #244	; 0xf4
    ce92:	32ff      	adds	r2, #255	; 0xff
    ce94:	4293      	cmp	r3, r2
    ce96:	d9e4      	bls.n	ce62 <hif_send+0xbe>
				if(cnt < 501) {
    ce98:	ab02      	add	r3, sp, #8
    ce9a:	3306      	adds	r3, #6
    ce9c:	881b      	ldrh	r3, [r3, #0]
    ce9e:	b29b      	uxth	r3, r3
    cea0:	3201      	adds	r2, #1
    cea2:	4293      	cmp	r3, r2
    cea4:	d8db      	bhi.n	ce5e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    cea6:	483e      	ldr	r0, [pc, #248]	; (cfa0 <hif_send+0x1fc>)
    cea8:	4b3e      	ldr	r3, [pc, #248]	; (cfa4 <hif_send+0x200>)
    ceaa:	4798      	blx	r3
    ceac:	483e      	ldr	r0, [pc, #248]	; (cfa8 <hif_send+0x204>)
    ceae:	4b3f      	ldr	r3, [pc, #252]	; (cfac <hif_send+0x208>)
    ceb0:	4798      	blx	r3
    ceb2:	200d      	movs	r0, #13
    ceb4:	4b3e      	ldr	r3, [pc, #248]	; (cfb0 <hif_send+0x20c>)
    ceb6:	4798      	blx	r3
    ceb8:	e7d1      	b.n	ce5e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    ceba:	a905      	add	r1, sp, #20
    cebc:	483d      	ldr	r0, [pc, #244]	; (cfb4 <hif_send+0x210>)
    cebe:	4b36      	ldr	r3, [pc, #216]	; (cf98 <hif_send+0x1f4>)
    cec0:	4798      	blx	r3
    cec2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    cec4:	d009      	beq.n	ceda <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    cec6:	2300      	movs	r3, #0
    cec8:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    ceca:	4b3b      	ldr	r3, [pc, #236]	; (cfb8 <hif_send+0x214>)
    cecc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    cece:	0020      	movs	r0, r4
    ced0:	b009      	add	sp, #36	; 0x24
    ced2:	bc0c      	pop	{r2, r3}
    ced4:	4692      	mov	sl, r2
    ced6:	469b      	mov	fp, r3
    ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    ceda:	9b05      	ldr	r3, [sp, #20]
    cedc:	2b00      	cmp	r3, #0
    cede:	d03f      	beq.n	cf60 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    cee0:	9b05      	ldr	r3, [sp, #20]
    cee2:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    cee4:	a907      	add	r1, sp, #28
    cee6:	884b      	ldrh	r3, [r1, #2]
    cee8:	b29b      	uxth	r3, r3
    ceea:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    ceec:	9806      	ldr	r0, [sp, #24]
    ceee:	2208      	movs	r2, #8
    cef0:	4b32      	ldr	r3, [pc, #200]	; (cfbc <hif_send+0x218>)
    cef2:	4798      	blx	r3
    cef4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cef6:	d1e8      	bne.n	ceca <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    cef8:	9b06      	ldr	r3, [sp, #24]
    cefa:	3308      	adds	r3, #8
    cefc:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    cefe:	9b01      	ldr	r3, [sp, #4]
    cf00:	2b00      	cmp	r3, #0
    cf02:	d00b      	beq.n	cf1c <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    cf04:	9806      	ldr	r0, [sp, #24]
    cf06:	9a00      	ldr	r2, [sp, #0]
    cf08:	0019      	movs	r1, r3
    cf0a:	4b2c      	ldr	r3, [pc, #176]	; (cfbc <hif_send+0x218>)
    cf0c:	4798      	blx	r3
    cf0e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cf10:	d1db      	bne.n	ceca <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    cf12:	9b06      	ldr	r3, [sp, #24]
    cf14:	9a00      	ldr	r2, [sp, #0]
    cf16:	4694      	mov	ip, r2
    cf18:	4463      	add	r3, ip
    cf1a:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    cf1c:	2f00      	cmp	r7, #0
    cf1e:	d00e      	beq.n	cf3e <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    cf20:	9b06      	ldr	r3, [sp, #24]
    cf22:	9a00      	ldr	r2, [sp, #0]
    cf24:	1aad      	subs	r5, r5, r2
    cf26:	18ed      	adds	r5, r5, r3
    cf28:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    cf2a:	9806      	ldr	r0, [sp, #24]
    cf2c:	0032      	movs	r2, r6
    cf2e:	0039      	movs	r1, r7
    cf30:	4b22      	ldr	r3, [pc, #136]	; (cfbc <hif_send+0x218>)
    cf32:	4798      	blx	r3
    cf34:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cf36:	d1c8      	bne.n	ceca <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    cf38:	9b06      	ldr	r3, [sp, #24]
    cf3a:	18f3      	adds	r3, r6, r3
    cf3c:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    cf3e:	9b05      	ldr	r3, [sp, #20]
    cf40:	009b      	lsls	r3, r3, #2
    cf42:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    cf44:	9b04      	ldr	r3, [sp, #16]
    cf46:	2202      	movs	r2, #2
    cf48:	4313      	orrs	r3, r2
    cf4a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    cf4c:	9904      	ldr	r1, [sp, #16]
    cf4e:	481c      	ldr	r0, [pc, #112]	; (cfc0 <hif_send+0x21c>)
    cf50:	4b0e      	ldr	r3, [pc, #56]	; (cf8c <hif_send+0x1e8>)
    cf52:	4798      	blx	r3
    cf54:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cf56:	d1b8      	bne.n	ceca <hif_send+0x126>
 	ret = hif_chip_sleep();
    cf58:	4b1a      	ldr	r3, [pc, #104]	; (cfc4 <hif_send+0x220>)
    cf5a:	4798      	blx	r3
    cf5c:	0004      	movs	r4, r0
	return ret;
    cf5e:	e7b6      	b.n	cece <hif_send+0x12a>
			ret = hif_chip_sleep();
    cf60:	4b18      	ldr	r3, [pc, #96]	; (cfc4 <hif_send+0x220>)
    cf62:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    cf64:	2403      	movs	r4, #3
    cf66:	4264      	negs	r4, r4
			goto ERR2;
    cf68:	e7b1      	b.n	cece <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    cf6a:	2298      	movs	r2, #152	; 0x98
    cf6c:	32ff      	adds	r2, #255	; 0xff
    cf6e:	4916      	ldr	r1, [pc, #88]	; (cfc8 <hif_send+0x224>)
    cf70:	4816      	ldr	r0, [pc, #88]	; (cfcc <hif_send+0x228>)
    cf72:	4b0c      	ldr	r3, [pc, #48]	; (cfa4 <hif_send+0x200>)
    cf74:	4798      	blx	r3
    cf76:	4816      	ldr	r0, [pc, #88]	; (cfd0 <hif_send+0x22c>)
    cf78:	4b0c      	ldr	r3, [pc, #48]	; (cfac <hif_send+0x208>)
    cf7a:	4798      	blx	r3
    cf7c:	200d      	movs	r0, #13
    cf7e:	4b0c      	ldr	r3, [pc, #48]	; (cfb0 <hif_send+0x20c>)
    cf80:	4798      	blx	r3
		goto ERR2;
    cf82:	e7a4      	b.n	cece <hif_send+0x12a>
    cf84:	0000cd15 	.word	0x0000cd15
    cf88:	0000108c 	.word	0x0000108c
    cf8c:	0000e0ed 	.word	0x0000e0ed
    cf90:	00001078 	.word	0x00001078
    cf94:	000003e7 	.word	0x000003e7
    cf98:	0000e0e1 	.word	0x0000e0e1
    cf9c:	0000c905 	.word	0x0000c905
    cfa0:	000187e8 	.word	0x000187e8
    cfa4:	00016be1 	.word	0x00016be1
    cfa8:	000187f4 	.word	0x000187f4
    cfac:	00016cfd 	.word	0x00016cfd
    cfb0:	00016c15 	.word	0x00016c15
    cfb4:	00150400 	.word	0x00150400
    cfb8:	0000cd51 	.word	0x0000cd51
    cfbc:	0000e161 	.word	0x0000e161
    cfc0:	0000106c 	.word	0x0000106c
    cfc4:	0000cd6d 	.word	0x0000cd6d
    cfc8:	00018500 	.word	0x00018500
    cfcc:	000184b8 	.word	0x000184b8
    cfd0:	00018804 	.word	0x00018804

0000cfd4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    cfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfd6:	46ce      	mov	lr, r9
    cfd8:	4647      	mov	r7, r8
    cfda:	b580      	push	{r7, lr}
    cfdc:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    cfde:	2200      	movs	r2, #0
    cfe0:	4bd1      	ldr	r3, [pc, #836]	; (d328 <hif_handle_isr+0x354>)
    cfe2:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    cfe4:	4699      	mov	r9, r3
    cfe6:	4698      	mov	r8, r3
    cfe8:	e081      	b.n	d0ee <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    cfea:	4bcf      	ldr	r3, [pc, #828]	; (d328 <hif_handle_isr+0x354>)
    cfec:	9a05      	ldr	r2, [sp, #20]
    cfee:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    cff0:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    cff2:	af04      	add	r7, sp, #16
    cff4:	2204      	movs	r2, #4
    cff6:	0039      	movs	r1, r7
    cff8:	9805      	ldr	r0, [sp, #20]
    cffa:	4bcc      	ldr	r3, [pc, #816]	; (d32c <hif_handle_isr+0x358>)
    cffc:	4798      	blx	r3
    cffe:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    d000:	887b      	ldrh	r3, [r7, #2]
    d002:	b29b      	uxth	r3, r3
    d004:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    d006:	2800      	cmp	r0, #0
    d008:	d134      	bne.n	d074 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    d00a:	ab04      	add	r3, sp, #16
    d00c:	885b      	ldrh	r3, [r3, #2]
    d00e:	b29b      	uxth	r3, r3
    d010:	429e      	cmp	r6, r3
    d012:	d004      	beq.n	d01e <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    d014:	ab04      	add	r3, sp, #16
    d016:	885b      	ldrh	r3, [r3, #2]
    d018:	1af3      	subs	r3, r6, r3
    d01a:	2b04      	cmp	r3, #4
    d01c:	dc3a      	bgt.n	d094 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    d01e:	ab04      	add	r3, sp, #16
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	2b01      	cmp	r3, #1
    d024:	d04f      	beq.n	d0c6 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    d026:	ab04      	add	r3, sp, #16
    d028:	781b      	ldrb	r3, [r3, #0]
    d02a:	2b02      	cmp	r3, #2
    d02c:	d07d      	beq.n	d12a <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    d02e:	ab04      	add	r3, sp, #16
    d030:	781b      	ldrb	r3, [r3, #0]
    d032:	2b04      	cmp	r3, #4
    d034:	d100      	bne.n	d038 <hif_handle_isr+0x64>
    d036:	e095      	b.n	d164 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    d038:	ab04      	add	r3, sp, #16
    d03a:	781b      	ldrb	r3, [r3, #0]
    d03c:	2b06      	cmp	r3, #6
    d03e:	d100      	bne.n	d042 <hif_handle_isr+0x6e>
    d040:	e0ad      	b.n	d19e <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    d042:	ab04      	add	r3, sp, #16
    d044:	781b      	ldrb	r3, [r3, #0]
    d046:	2b07      	cmp	r3, #7
    d048:	d100      	bne.n	d04c <hif_handle_isr+0x78>
    d04a:	e0c5      	b.n	d1d8 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    d04c:	ab04      	add	r3, sp, #16
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	2b05      	cmp	r3, #5
    d052:	d100      	bne.n	d056 <hif_handle_isr+0x82>
    d054:	e0dc      	b.n	d210 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    d056:	2284      	movs	r2, #132	; 0x84
    d058:	0092      	lsls	r2, r2, #2
    d05a:	49b5      	ldr	r1, [pc, #724]	; (d330 <hif_handle_isr+0x35c>)
    d05c:	48b5      	ldr	r0, [pc, #724]	; (d334 <hif_handle_isr+0x360>)
    d05e:	4bb6      	ldr	r3, [pc, #728]	; (d338 <hif_handle_isr+0x364>)
    d060:	4798      	blx	r3
    d062:	48b6      	ldr	r0, [pc, #728]	; (d33c <hif_handle_isr+0x368>)
    d064:	4bb6      	ldr	r3, [pc, #728]	; (d340 <hif_handle_isr+0x36c>)
    d066:	4798      	blx	r3
    d068:	200d      	movs	r0, #13
    d06a:	4bb6      	ldr	r3, [pc, #728]	; (d344 <hif_handle_isr+0x370>)
    d06c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    d06e:	2406      	movs	r4, #6
    d070:	4264      	negs	r4, r4
    d072:	e119      	b.n	d2a8 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    d074:	22e9      	movs	r2, #233	; 0xe9
    d076:	0052      	lsls	r2, r2, #1
    d078:	49ad      	ldr	r1, [pc, #692]	; (d330 <hif_handle_isr+0x35c>)
    d07a:	48ae      	ldr	r0, [pc, #696]	; (d334 <hif_handle_isr+0x360>)
    d07c:	4bae      	ldr	r3, [pc, #696]	; (d338 <hif_handle_isr+0x364>)
    d07e:	4798      	blx	r3
    d080:	48b1      	ldr	r0, [pc, #708]	; (d348 <hif_handle_isr+0x374>)
    d082:	4baf      	ldr	r3, [pc, #700]	; (d340 <hif_handle_isr+0x36c>)
    d084:	4798      	blx	r3
    d086:	200d      	movs	r0, #13
    d088:	4bae      	ldr	r3, [pc, #696]	; (d344 <hif_handle_isr+0x370>)
    d08a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d08c:	2001      	movs	r0, #1
    d08e:	4baf      	ldr	r3, [pc, #700]	; (d34c <hif_handle_isr+0x378>)
    d090:	4798      	blx	r3
    d092:	e109      	b.n	d2a8 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    d094:	22dc      	movs	r2, #220	; 0xdc
    d096:	32ff      	adds	r2, #255	; 0xff
    d098:	49a5      	ldr	r1, [pc, #660]	; (d330 <hif_handle_isr+0x35c>)
    d09a:	48a6      	ldr	r0, [pc, #664]	; (d334 <hif_handle_isr+0x360>)
    d09c:	4ca6      	ldr	r4, [pc, #664]	; (d338 <hif_handle_isr+0x364>)
    d09e:	47a0      	blx	r4
    d0a0:	a904      	add	r1, sp, #16
    d0a2:	884a      	ldrh	r2, [r1, #2]
    d0a4:	b292      	uxth	r2, r2
    d0a6:	780b      	ldrb	r3, [r1, #0]
    d0a8:	b2db      	uxtb	r3, r3
    d0aa:	7849      	ldrb	r1, [r1, #1]
    d0ac:	9100      	str	r1, [sp, #0]
    d0ae:	0031      	movs	r1, r6
    d0b0:	48a7      	ldr	r0, [pc, #668]	; (d350 <hif_handle_isr+0x37c>)
    d0b2:	47a0      	blx	r4
    d0b4:	200d      	movs	r0, #13
    d0b6:	4ba3      	ldr	r3, [pc, #652]	; (d344 <hif_handle_isr+0x370>)
    d0b8:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    d0ba:	2001      	movs	r0, #1
    d0bc:	4ba3      	ldr	r3, [pc, #652]	; (d34c <hif_handle_isr+0x378>)
    d0be:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    d0c0:	2406      	movs	r4, #6
    d0c2:	4264      	negs	r4, r4
    d0c4:	e0f0      	b.n	d2a8 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    d0c6:	4b98      	ldr	r3, [pc, #608]	; (d328 <hif_handle_isr+0x354>)
    d0c8:	691b      	ldr	r3, [r3, #16]
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	d020      	beq.n	d110 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d0ce:	4b96      	ldr	r3, [pc, #600]	; (d328 <hif_handle_isr+0x354>)
    d0d0:	691b      	ldr	r3, [r3, #16]
    d0d2:	aa04      	add	r2, sp, #16
    d0d4:	7850      	ldrb	r0, [r2, #1]
    d0d6:	b2c0      	uxtb	r0, r0
    d0d8:	8851      	ldrh	r1, [r2, #2]
    d0da:	9a05      	ldr	r2, [sp, #20]
    d0dc:	3208      	adds	r2, #8
    d0de:	3908      	subs	r1, #8
    d0e0:	b289      	uxth	r1, r1
    d0e2:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    d0e4:	4b90      	ldr	r3, [pc, #576]	; (d328 <hif_handle_isr+0x354>)
    d0e6:	789b      	ldrb	r3, [r3, #2]
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d000      	beq.n	d0ee <hif_handle_isr+0x11a>
    d0ec:	e0a1      	b.n	d232 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    d0ee:	464b      	mov	r3, r9
    d0f0:	78db      	ldrb	r3, [r3, #3]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	d100      	bne.n	d0f8 <hif_handle_isr+0x124>
    d0f6:	e15b      	b.n	d3b0 <hif_handle_isr+0x3dc>
    d0f8:	4643      	mov	r3, r8
    d0fa:	791b      	ldrb	r3, [r3, #4]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d000      	beq.n	d102 <hif_handle_isr+0x12e>
    d100:	e156      	b.n	d3b0 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    d102:	4a89      	ldr	r2, [pc, #548]	; (d328 <hif_handle_isr+0x354>)
    d104:	78d3      	ldrb	r3, [r2, #3]
    d106:	3b01      	subs	r3, #1
    d108:	b2db      	uxtb	r3, r3
    d10a:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d10c:	4d91      	ldr	r5, [pc, #580]	; (d354 <hif_handle_isr+0x380>)
    d10e:	e0d6      	b.n	d2be <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    d110:	22e8      	movs	r2, #232	; 0xe8
    d112:	32ff      	adds	r2, #255	; 0xff
    d114:	4986      	ldr	r1, [pc, #536]	; (d330 <hif_handle_isr+0x35c>)
    d116:	4887      	ldr	r0, [pc, #540]	; (d334 <hif_handle_isr+0x360>)
    d118:	4b87      	ldr	r3, [pc, #540]	; (d338 <hif_handle_isr+0x364>)
    d11a:	4798      	blx	r3
    d11c:	488e      	ldr	r0, [pc, #568]	; (d358 <hif_handle_isr+0x384>)
    d11e:	4b88      	ldr	r3, [pc, #544]	; (d340 <hif_handle_isr+0x36c>)
    d120:	4798      	blx	r3
    d122:	200d      	movs	r0, #13
    d124:	4b87      	ldr	r3, [pc, #540]	; (d344 <hif_handle_isr+0x370>)
    d126:	4798      	blx	r3
    d128:	e7dc      	b.n	d0e4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    d12a:	4b7f      	ldr	r3, [pc, #508]	; (d328 <hif_handle_isr+0x354>)
    d12c:	695b      	ldr	r3, [r3, #20]
    d12e:	2b00      	cmp	r3, #0
    d130:	d00b      	beq.n	d14a <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d132:	4b7d      	ldr	r3, [pc, #500]	; (d328 <hif_handle_isr+0x354>)
    d134:	695b      	ldr	r3, [r3, #20]
    d136:	aa04      	add	r2, sp, #16
    d138:	7850      	ldrb	r0, [r2, #1]
    d13a:	b2c0      	uxtb	r0, r0
    d13c:	8851      	ldrh	r1, [r2, #2]
    d13e:	9a05      	ldr	r2, [sp, #20]
    d140:	3208      	adds	r2, #8
    d142:	3908      	subs	r1, #8
    d144:	b289      	uxth	r1, r1
    d146:	4798      	blx	r3
    d148:	e7cc      	b.n	d0e4 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    d14a:	22f0      	movs	r2, #240	; 0xf0
    d14c:	32ff      	adds	r2, #255	; 0xff
    d14e:	4978      	ldr	r1, [pc, #480]	; (d330 <hif_handle_isr+0x35c>)
    d150:	4878      	ldr	r0, [pc, #480]	; (d334 <hif_handle_isr+0x360>)
    d152:	4b79      	ldr	r3, [pc, #484]	; (d338 <hif_handle_isr+0x364>)
    d154:	4798      	blx	r3
    d156:	4881      	ldr	r0, [pc, #516]	; (d35c <hif_handle_isr+0x388>)
    d158:	4b79      	ldr	r3, [pc, #484]	; (d340 <hif_handle_isr+0x36c>)
    d15a:	4798      	blx	r3
    d15c:	200d      	movs	r0, #13
    d15e:	4b79      	ldr	r3, [pc, #484]	; (d344 <hif_handle_isr+0x370>)
    d160:	4798      	blx	r3
    d162:	e7bf      	b.n	d0e4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    d164:	4b70      	ldr	r3, [pc, #448]	; (d328 <hif_handle_isr+0x354>)
    d166:	699b      	ldr	r3, [r3, #24]
    d168:	2b00      	cmp	r3, #0
    d16a:	d00b      	beq.n	d184 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d16c:	4b6e      	ldr	r3, [pc, #440]	; (d328 <hif_handle_isr+0x354>)
    d16e:	699b      	ldr	r3, [r3, #24]
    d170:	aa04      	add	r2, sp, #16
    d172:	7850      	ldrb	r0, [r2, #1]
    d174:	b2c0      	uxtb	r0, r0
    d176:	8851      	ldrh	r1, [r2, #2]
    d178:	9a05      	ldr	r2, [sp, #20]
    d17a:	3208      	adds	r2, #8
    d17c:	3908      	subs	r1, #8
    d17e:	b289      	uxth	r1, r1
    d180:	4798      	blx	r3
    d182:	e7af      	b.n	d0e4 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    d184:	22f8      	movs	r2, #248	; 0xf8
    d186:	32ff      	adds	r2, #255	; 0xff
    d188:	4969      	ldr	r1, [pc, #420]	; (d330 <hif_handle_isr+0x35c>)
    d18a:	486a      	ldr	r0, [pc, #424]	; (d334 <hif_handle_isr+0x360>)
    d18c:	4b6a      	ldr	r3, [pc, #424]	; (d338 <hif_handle_isr+0x364>)
    d18e:	4798      	blx	r3
    d190:	4873      	ldr	r0, [pc, #460]	; (d360 <hif_handle_isr+0x38c>)
    d192:	4b6b      	ldr	r3, [pc, #428]	; (d340 <hif_handle_isr+0x36c>)
    d194:	4798      	blx	r3
    d196:	200d      	movs	r0, #13
    d198:	4b6a      	ldr	r3, [pc, #424]	; (d344 <hif_handle_isr+0x370>)
    d19a:	4798      	blx	r3
    d19c:	e7a2      	b.n	d0e4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    d19e:	4b62      	ldr	r3, [pc, #392]	; (d328 <hif_handle_isr+0x354>)
    d1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d00b      	beq.n	d1be <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d1a6:	4b60      	ldr	r3, [pc, #384]	; (d328 <hif_handle_isr+0x354>)
    d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d1aa:	aa04      	add	r2, sp, #16
    d1ac:	7850      	ldrb	r0, [r2, #1]
    d1ae:	b2c0      	uxtb	r0, r0
    d1b0:	8851      	ldrh	r1, [r2, #2]
    d1b2:	9a05      	ldr	r2, [sp, #20]
    d1b4:	3208      	adds	r2, #8
    d1b6:	3908      	subs	r1, #8
    d1b8:	b289      	uxth	r1, r1
    d1ba:	4798      	blx	r3
    d1bc:	e792      	b.n	d0e4 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    d1be:	2280      	movs	r2, #128	; 0x80
    d1c0:	0092      	lsls	r2, r2, #2
    d1c2:	495b      	ldr	r1, [pc, #364]	; (d330 <hif_handle_isr+0x35c>)
    d1c4:	485b      	ldr	r0, [pc, #364]	; (d334 <hif_handle_isr+0x360>)
    d1c6:	4b5c      	ldr	r3, [pc, #368]	; (d338 <hif_handle_isr+0x364>)
    d1c8:	4798      	blx	r3
    d1ca:	4866      	ldr	r0, [pc, #408]	; (d364 <hif_handle_isr+0x390>)
    d1cc:	4b5c      	ldr	r3, [pc, #368]	; (d340 <hif_handle_isr+0x36c>)
    d1ce:	4798      	blx	r3
    d1d0:	200d      	movs	r0, #13
    d1d2:	4b5c      	ldr	r3, [pc, #368]	; (d344 <hif_handle_isr+0x370>)
    d1d4:	4798      	blx	r3
    d1d6:	e785      	b.n	d0e4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    d1d8:	4b53      	ldr	r3, [pc, #332]	; (d328 <hif_handle_isr+0x354>)
    d1da:	69db      	ldr	r3, [r3, #28]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d00b      	beq.n	d1f8 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d1e0:	4b51      	ldr	r3, [pc, #324]	; (d328 <hif_handle_isr+0x354>)
    d1e2:	69db      	ldr	r3, [r3, #28]
    d1e4:	aa04      	add	r2, sp, #16
    d1e6:	7850      	ldrb	r0, [r2, #1]
    d1e8:	b2c0      	uxtb	r0, r0
    d1ea:	8851      	ldrh	r1, [r2, #2]
    d1ec:	9a05      	ldr	r2, [sp, #20]
    d1ee:	3208      	adds	r2, #8
    d1f0:	3908      	subs	r1, #8
    d1f2:	b289      	uxth	r1, r1
    d1f4:	4798      	blx	r3
    d1f6:	e775      	b.n	d0e4 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    d1f8:	4a5b      	ldr	r2, [pc, #364]	; (d368 <hif_handle_isr+0x394>)
    d1fa:	494d      	ldr	r1, [pc, #308]	; (d330 <hif_handle_isr+0x35c>)
    d1fc:	484d      	ldr	r0, [pc, #308]	; (d334 <hif_handle_isr+0x360>)
    d1fe:	4b4e      	ldr	r3, [pc, #312]	; (d338 <hif_handle_isr+0x364>)
    d200:	4798      	blx	r3
    d202:	485a      	ldr	r0, [pc, #360]	; (d36c <hif_handle_isr+0x398>)
    d204:	4b4e      	ldr	r3, [pc, #312]	; (d340 <hif_handle_isr+0x36c>)
    d206:	4798      	blx	r3
    d208:	200d      	movs	r0, #13
    d20a:	4b4e      	ldr	r3, [pc, #312]	; (d344 <hif_handle_isr+0x370>)
    d20c:	4798      	blx	r3
    d20e:	e769      	b.n	d0e4 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    d210:	4b45      	ldr	r3, [pc, #276]	; (d328 <hif_handle_isr+0x354>)
    d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d214:	2b00      	cmp	r3, #0
    d216:	d100      	bne.n	d21a <hif_handle_isr+0x246>
    d218:	e764      	b.n	d0e4 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d21a:	4b43      	ldr	r3, [pc, #268]	; (d328 <hif_handle_isr+0x354>)
    d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d21e:	aa04      	add	r2, sp, #16
    d220:	7850      	ldrb	r0, [r2, #1]
    d222:	b2c0      	uxtb	r0, r0
    d224:	8851      	ldrh	r1, [r2, #2]
    d226:	9a05      	ldr	r2, [sp, #20]
    d228:	3208      	adds	r2, #8
    d22a:	3908      	subs	r1, #8
    d22c:	b289      	uxth	r1, r1
    d22e:	4798      	blx	r3
    d230:	e758      	b.n	d0e4 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    d232:	4a4f      	ldr	r2, [pc, #316]	; (d370 <hif_handle_isr+0x39c>)
    d234:	493e      	ldr	r1, [pc, #248]	; (d330 <hif_handle_isr+0x35c>)
    d236:	483f      	ldr	r0, [pc, #252]	; (d334 <hif_handle_isr+0x360>)
    d238:	4c3f      	ldr	r4, [pc, #252]	; (d338 <hif_handle_isr+0x364>)
    d23a:	47a0      	blx	r4
    d23c:	ab04      	add	r3, sp, #16
    d23e:	7819      	ldrb	r1, [r3, #0]
    d240:	b2c9      	uxtb	r1, r1
    d242:	785a      	ldrb	r2, [r3, #1]
    d244:	b2d2      	uxtb	r2, r2
    d246:	484b      	ldr	r0, [pc, #300]	; (d374 <hif_handle_isr+0x3a0>)
    d248:	47a0      	blx	r4
    d24a:	200d      	movs	r0, #13
    d24c:	4b3d      	ldr	r3, [pc, #244]	; (d344 <hif_handle_isr+0x370>)
    d24e:	4798      	blx	r3
					ret = hif_set_rx_done();
    d250:	4b49      	ldr	r3, [pc, #292]	; (d378 <hif_handle_isr+0x3a4>)
    d252:	4798      	blx	r3
    d254:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    d256:	d127      	bne.n	d2a8 <hif_handle_isr+0x2d4>
    d258:	e749      	b.n	d0ee <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    d25a:	4a48      	ldr	r2, [pc, #288]	; (d37c <hif_handle_isr+0x3a8>)
    d25c:	4934      	ldr	r1, [pc, #208]	; (d330 <hif_handle_isr+0x35c>)
    d25e:	4835      	ldr	r0, [pc, #212]	; (d334 <hif_handle_isr+0x360>)
    d260:	4b35      	ldr	r3, [pc, #212]	; (d338 <hif_handle_isr+0x364>)
    d262:	4798      	blx	r3
    d264:	4846      	ldr	r0, [pc, #280]	; (d380 <hif_handle_isr+0x3ac>)
    d266:	4b36      	ldr	r3, [pc, #216]	; (d340 <hif_handle_isr+0x36c>)
    d268:	4798      	blx	r3
    d26a:	200d      	movs	r0, #13
    d26c:	4b35      	ldr	r3, [pc, #212]	; (d344 <hif_handle_isr+0x370>)
    d26e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    d270:	2402      	movs	r4, #2
    d272:	4264      	negs	r4, r4
    d274:	e018      	b.n	d2a8 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    d276:	4a43      	ldr	r2, [pc, #268]	; (d384 <hif_handle_isr+0x3b0>)
    d278:	492d      	ldr	r1, [pc, #180]	; (d330 <hif_handle_isr+0x35c>)
    d27a:	482e      	ldr	r0, [pc, #184]	; (d334 <hif_handle_isr+0x360>)
    d27c:	4c2e      	ldr	r4, [pc, #184]	; (d338 <hif_handle_isr+0x364>)
    d27e:	47a0      	blx	r4
    d280:	9903      	ldr	r1, [sp, #12]
    d282:	4841      	ldr	r0, [pc, #260]	; (d388 <hif_handle_isr+0x3b4>)
    d284:	47a0      	blx	r4
    d286:	200d      	movs	r0, #13
    d288:	4b2e      	ldr	r3, [pc, #184]	; (d344 <hif_handle_isr+0x370>)
    d28a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d28c:	240c      	movs	r4, #12
    d28e:	4264      	negs	r4, r4
    d290:	e00a      	b.n	d2a8 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    d292:	4a3e      	ldr	r2, [pc, #248]	; (d38c <hif_handle_isr+0x3b8>)
    d294:	4926      	ldr	r1, [pc, #152]	; (d330 <hif_handle_isr+0x35c>)
    d296:	4827      	ldr	r0, [pc, #156]	; (d334 <hif_handle_isr+0x360>)
    d298:	4b27      	ldr	r3, [pc, #156]	; (d338 <hif_handle_isr+0x364>)
    d29a:	4798      	blx	r3
    d29c:	483c      	ldr	r0, [pc, #240]	; (d390 <hif_handle_isr+0x3bc>)
    d29e:	4b28      	ldr	r3, [pc, #160]	; (d340 <hif_handle_isr+0x36c>)
    d2a0:	4798      	blx	r3
    d2a2:	200d      	movs	r0, #13
    d2a4:	4b27      	ldr	r3, [pc, #156]	; (d344 <hif_handle_isr+0x370>)
    d2a6:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    d2a8:	4a3a      	ldr	r2, [pc, #232]	; (d394 <hif_handle_isr+0x3c0>)
    d2aa:	493b      	ldr	r1, [pc, #236]	; (d398 <hif_handle_isr+0x3c4>)
    d2ac:	4821      	ldr	r0, [pc, #132]	; (d334 <hif_handle_isr+0x360>)
    d2ae:	4f22      	ldr	r7, [pc, #136]	; (d338 <hif_handle_isr+0x364>)
    d2b0:	47b8      	blx	r7
    d2b2:	0021      	movs	r1, r4
    d2b4:	4839      	ldr	r0, [pc, #228]	; (d39c <hif_handle_isr+0x3c8>)
    d2b6:	47b8      	blx	r7
    d2b8:	200d      	movs	r0, #13
    d2ba:	4b22      	ldr	r3, [pc, #136]	; (d344 <hif_handle_isr+0x370>)
    d2bc:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    d2be:	a903      	add	r1, sp, #12
    d2c0:	4837      	ldr	r0, [pc, #220]	; (d3a0 <hif_handle_isr+0x3cc>)
    d2c2:	47a8      	blx	r5
    d2c4:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    d2c6:	d1e4      	bne.n	d292 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    d2c8:	9b03      	ldr	r3, [sp, #12]
    d2ca:	07db      	lsls	r3, r3, #31
    d2cc:	d5d3      	bpl.n	d276 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    d2ce:	2000      	movs	r0, #0
    d2d0:	4b1e      	ldr	r3, [pc, #120]	; (d34c <hif_handle_isr+0x378>)
    d2d2:	4798      	blx	r3
			reg &= ~NBIT0;
    d2d4:	2301      	movs	r3, #1
    d2d6:	9903      	ldr	r1, [sp, #12]
    d2d8:	4399      	bics	r1, r3
    d2da:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    d2dc:	4830      	ldr	r0, [pc, #192]	; (d3a0 <hif_handle_isr+0x3cc>)
    d2de:	4b31      	ldr	r3, [pc, #196]	; (d3a4 <hif_handle_isr+0x3d0>)
    d2e0:	4798      	blx	r3
    d2e2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    d2e4:	d1e0      	bne.n	d2a8 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    d2e6:	2201      	movs	r2, #1
    d2e8:	4b0f      	ldr	r3, [pc, #60]	; (d328 <hif_handle_isr+0x354>)
    d2ea:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    d2ec:	9b03      	ldr	r3, [sp, #12]
    d2ee:	049e      	lsls	r6, r3, #18
    d2f0:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    d2f2:	d0b2      	beq.n	d25a <hif_handle_isr+0x286>
				uint32 address = 0;
    d2f4:	2300      	movs	r3, #0
    d2f6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    d2f8:	a905      	add	r1, sp, #20
    d2fa:	482b      	ldr	r0, [pc, #172]	; (d3a8 <hif_handle_isr+0x3d4>)
    d2fc:	4b15      	ldr	r3, [pc, #84]	; (d354 <hif_handle_isr+0x380>)
    d2fe:	4798      	blx	r3
    d300:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    d302:	d100      	bne.n	d306 <hif_handle_isr+0x332>
    d304:	e671      	b.n	cfea <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    d306:	22e4      	movs	r2, #228	; 0xe4
    d308:	0052      	lsls	r2, r2, #1
    d30a:	4909      	ldr	r1, [pc, #36]	; (d330 <hif_handle_isr+0x35c>)
    d30c:	4809      	ldr	r0, [pc, #36]	; (d334 <hif_handle_isr+0x360>)
    d30e:	4b0a      	ldr	r3, [pc, #40]	; (d338 <hif_handle_isr+0x364>)
    d310:	4798      	blx	r3
    d312:	4826      	ldr	r0, [pc, #152]	; (d3ac <hif_handle_isr+0x3d8>)
    d314:	4b0a      	ldr	r3, [pc, #40]	; (d340 <hif_handle_isr+0x36c>)
    d316:	4798      	blx	r3
    d318:	200d      	movs	r0, #13
    d31a:	4b0a      	ldr	r3, [pc, #40]	; (d344 <hif_handle_isr+0x370>)
    d31c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    d31e:	2001      	movs	r0, #1
    d320:	4b0a      	ldr	r3, [pc, #40]	; (d34c <hif_handle_isr+0x378>)
    d322:	4798      	blx	r3
    d324:	e7c0      	b.n	d2a8 <hif_handle_isr+0x2d4>
    d326:	46c0      	nop			; (mov r8, r8)
    d328:	2000136c 	.word	0x2000136c
    d32c:	0000e0f9 	.word	0x0000e0f9
    d330:	0001850c 	.word	0x0001850c
    d334:	000184b8 	.word	0x000184b8
    d338:	00016be1 	.word	0x00016be1
    d33c:	00018668 	.word	0x00018668
    d340:	00016cfd 	.word	0x00016cfd
    d344:	00016c15 	.word	0x00016c15
    d348:	00018564 	.word	0x00018564
    d34c:	0000c99d 	.word	0x0000c99d
    d350:	0001857c 	.word	0x0001857c
    d354:	0000e0e1 	.word	0x0000e0e1
    d358:	000185bc 	.word	0x000185bc
    d35c:	000185dc 	.word	0x000185dc
    d360:	00018600 	.word	0x00018600
    d364:	00018620 	.word	0x00018620
    d368:	00000207 	.word	0x00000207
    d36c:	00018644 	.word	0x00018644
    d370:	00000216 	.word	0x00000216
    d374:	00018680 	.word	0x00018680
    d378:	0000ccd1 	.word	0x0000ccd1
    d37c:	0000021d 	.word	0x0000021d
    d380:	000186ac 	.word	0x000186ac
    d384:	00000225 	.word	0x00000225
    d388:	000186c0 	.word	0x000186c0
    d38c:	0000022e 	.word	0x0000022e
    d390:	000186dc 	.word	0x000186dc
    d394:	00000257 	.word	0x00000257
    d398:	00018514 	.word	0x00018514
    d39c:	00018700 	.word	0x00018700
    d3a0:	00001070 	.word	0x00001070
    d3a4:	0000e0ed 	.word	0x0000e0ed
    d3a8:	00001084 	.word	0x00001084
    d3ac:	00018540 	.word	0x00018540
			}
		}
	}

	return ret;
}
    d3b0:	2000      	movs	r0, #0
    d3b2:	b007      	add	sp, #28
    d3b4:	bc0c      	pop	{r2, r3}
    d3b6:	4690      	mov	r8, r2
    d3b8:	4699      	mov	r9, r3
    d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d3bc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d3bc:	b570      	push	{r4, r5, r6, lr}
    d3be:	0014      	movs	r4, r2
    d3c0:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d3c2:	2800      	cmp	r0, #0
    d3c4:	d003      	beq.n	d3ce <hif_receive+0x12>
    d3c6:	2900      	cmp	r1, #0
    d3c8:	d001      	beq.n	d3ce <hif_receive+0x12>
    d3ca:	2a00      	cmp	r2, #0
    d3cc:	d113      	bne.n	d3f6 <hif_receive+0x3a>
	{
		if(isDone)
    d3ce:	2d00      	cmp	r5, #0
    d3d0:	d002      	beq.n	d3d8 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d3d2:	4b28      	ldr	r3, [pc, #160]	; (d474 <hif_receive+0xb8>)
    d3d4:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    d3d6:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    d3d8:	229e      	movs	r2, #158	; 0x9e
    d3da:	0092      	lsls	r2, r2, #2
    d3dc:	4926      	ldr	r1, [pc, #152]	; (d478 <hif_receive+0xbc>)
    d3de:	4827      	ldr	r0, [pc, #156]	; (d47c <hif_receive+0xc0>)
    d3e0:	4b27      	ldr	r3, [pc, #156]	; (d480 <hif_receive+0xc4>)
    d3e2:	4798      	blx	r3
    d3e4:	4827      	ldr	r0, [pc, #156]	; (d484 <hif_receive+0xc8>)
    d3e6:	4b28      	ldr	r3, [pc, #160]	; (d488 <hif_receive+0xcc>)
    d3e8:	4798      	blx	r3
    d3ea:	200d      	movs	r0, #13
    d3ec:	4b27      	ldr	r3, [pc, #156]	; (d48c <hif_receive+0xd0>)
    d3ee:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d3f0:	200c      	movs	r0, #12
    d3f2:	4240      	negs	r0, r0
    d3f4:	e7ef      	b.n	d3d6 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    d3f6:	4b26      	ldr	r3, [pc, #152]	; (d490 <hif_receive+0xd4>)
    d3f8:	68db      	ldr	r3, [r3, #12]
    d3fa:	429a      	cmp	r2, r3
    d3fc:	d81a      	bhi.n	d434 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d3fe:	4b24      	ldr	r3, [pc, #144]	; (d490 <hif_receive+0xd4>)
    d400:	689b      	ldr	r3, [r3, #8]
    d402:	4298      	cmp	r0, r3
    d404:	d327      	bcc.n	d456 <hif_receive+0x9a>
    d406:	1886      	adds	r6, r0, r2
    d408:	4a21      	ldr	r2, [pc, #132]	; (d490 <hif_receive+0xd4>)
    d40a:	6893      	ldr	r3, [r2, #8]
    d40c:	68d2      	ldr	r2, [r2, #12]
    d40e:	189b      	adds	r3, r3, r2
    d410:	429e      	cmp	r6, r3
    d412:	d820      	bhi.n	d456 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d414:	0022      	movs	r2, r4
    d416:	4b1f      	ldr	r3, [pc, #124]	; (d494 <hif_receive+0xd8>)
    d418:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    d41a:	2800      	cmp	r0, #0
    d41c:	d1db      	bne.n	d3d6 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d41e:	4a1c      	ldr	r2, [pc, #112]	; (d490 <hif_receive+0xd4>)
    d420:	6893      	ldr	r3, [r2, #8]
    d422:	68d2      	ldr	r2, [r2, #12]
    d424:	189b      	adds	r3, r3, r2
    d426:	429e      	cmp	r6, r3
    d428:	d001      	beq.n	d42e <hif_receive+0x72>
    d42a:	2d00      	cmp	r5, #0
    d42c:	d0d3      	beq.n	d3d6 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    d42e:	4b11      	ldr	r3, [pc, #68]	; (d474 <hif_receive+0xb8>)
    d430:	4798      	blx	r3
    d432:	e7d0      	b.n	d3d6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d434:	22a0      	movs	r2, #160	; 0xa0
    d436:	0092      	lsls	r2, r2, #2
    d438:	490f      	ldr	r1, [pc, #60]	; (d478 <hif_receive+0xbc>)
    d43a:	4810      	ldr	r0, [pc, #64]	; (d47c <hif_receive+0xc0>)
    d43c:	4d10      	ldr	r5, [pc, #64]	; (d480 <hif_receive+0xc4>)
    d43e:	47a8      	blx	r5
    d440:	4b13      	ldr	r3, [pc, #76]	; (d490 <hif_receive+0xd4>)
    d442:	68da      	ldr	r2, [r3, #12]
    d444:	0021      	movs	r1, r4
    d446:	4814      	ldr	r0, [pc, #80]	; (d498 <hif_receive+0xdc>)
    d448:	47a8      	blx	r5
    d44a:	200d      	movs	r0, #13
    d44c:	4b0f      	ldr	r3, [pc, #60]	; (d48c <hif_receive+0xd0>)
    d44e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d450:	200c      	movs	r0, #12
    d452:	4240      	negs	r0, r0
		goto ERR1;
    d454:	e7bf      	b.n	d3d6 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d456:	4a11      	ldr	r2, [pc, #68]	; (d49c <hif_receive+0xe0>)
    d458:	4907      	ldr	r1, [pc, #28]	; (d478 <hif_receive+0xbc>)
    d45a:	4808      	ldr	r0, [pc, #32]	; (d47c <hif_receive+0xc0>)
    d45c:	4b08      	ldr	r3, [pc, #32]	; (d480 <hif_receive+0xc4>)
    d45e:	4798      	blx	r3
    d460:	480f      	ldr	r0, [pc, #60]	; (d4a0 <hif_receive+0xe4>)
    d462:	4b09      	ldr	r3, [pc, #36]	; (d488 <hif_receive+0xcc>)
    d464:	4798      	blx	r3
    d466:	200d      	movs	r0, #13
    d468:	4b08      	ldr	r3, [pc, #32]	; (d48c <hif_receive+0xd0>)
    d46a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d46c:	200c      	movs	r0, #12
    d46e:	4240      	negs	r0, r0
		goto ERR1;
    d470:	e7b1      	b.n	d3d6 <hif_receive+0x1a>
    d472:	46c0      	nop			; (mov r8, r8)
    d474:	0000ccd1 	.word	0x0000ccd1
    d478:	00018524 	.word	0x00018524
    d47c:	000184b8 	.word	0x000184b8
    d480:	00016be1 	.word	0x00016be1
    d484:	00018730 	.word	0x00018730
    d488:	00016cfd 	.word	0x00016cfd
    d48c:	00016c15 	.word	0x00016c15
    d490:	2000136c 	.word	0x2000136c
    d494:	0000e0f9 	.word	0x0000e0f9
    d498:	00018750 	.word	0x00018750
    d49c:	00000286 	.word	0x00000286
    d4a0:	00018798 	.word	0x00018798

0000d4a4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d4a4:	b570      	push	{r4, r5, r6, lr}
    d4a6:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    d4a8:	2807      	cmp	r0, #7
    d4aa:	d81f      	bhi.n	d4ec <hif_register_cb+0x48>
    d4ac:	0083      	lsls	r3, r0, #2
    d4ae:	4a16      	ldr	r2, [pc, #88]	; (d508 <hif_register_cb+0x64>)
    d4b0:	58d3      	ldr	r3, [r2, r3]
    d4b2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d4b4:	4b15      	ldr	r3, [pc, #84]	; (d50c <hif_register_cb+0x68>)
    d4b6:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    d4b8:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    d4ba:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    d4bc:	4b13      	ldr	r3, [pc, #76]	; (d50c <hif_register_cb+0x68>)
    d4be:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    d4c0:	2000      	movs	r0, #0
			break;
    d4c2:	e7fa      	b.n	d4ba <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    d4c4:	4b11      	ldr	r3, [pc, #68]	; (d50c <hif_register_cb+0x68>)
    d4c6:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    d4c8:	2000      	movs	r0, #0
			break;
    d4ca:	e7f6      	b.n	d4ba <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    d4cc:	4b0f      	ldr	r3, [pc, #60]	; (d50c <hif_register_cb+0x68>)
    d4ce:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    d4d0:	2000      	movs	r0, #0
			break;
    d4d2:	e7f2      	b.n	d4ba <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    d4d4:	4b0d      	ldr	r3, [pc, #52]	; (d50c <hif_register_cb+0x68>)
    d4d6:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    d4d8:	2000      	movs	r0, #0
			break;
    d4da:	e7ee      	b.n	d4ba <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    d4dc:	4b0b      	ldr	r3, [pc, #44]	; (d50c <hif_register_cb+0x68>)
    d4de:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    d4e0:	2000      	movs	r0, #0
			break;
    d4e2:	e7ea      	b.n	d4ba <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    d4e4:	4b09      	ldr	r3, [pc, #36]	; (d50c <hif_register_cb+0x68>)
    d4e6:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    d4e8:	2000      	movs	r0, #0
			break;
    d4ea:	e7e6      	b.n	d4ba <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    d4ec:	4a08      	ldr	r2, [pc, #32]	; (d510 <hif_register_cb+0x6c>)
    d4ee:	4909      	ldr	r1, [pc, #36]	; (d514 <hif_register_cb+0x70>)
    d4f0:	4809      	ldr	r0, [pc, #36]	; (d518 <hif_register_cb+0x74>)
    d4f2:	4d0a      	ldr	r5, [pc, #40]	; (d51c <hif_register_cb+0x78>)
    d4f4:	47a8      	blx	r5
    d4f6:	0021      	movs	r1, r4
    d4f8:	4809      	ldr	r0, [pc, #36]	; (d520 <hif_register_cb+0x7c>)
    d4fa:	47a8      	blx	r5
    d4fc:	200d      	movs	r0, #13
    d4fe:	4b09      	ldr	r3, [pc, #36]	; (d524 <hif_register_cb+0x80>)
    d500:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d502:	200c      	movs	r0, #12
    d504:	4240      	negs	r0, r0
			break;
    d506:	e7d8      	b.n	d4ba <hif_register_cb+0x16>
    d508:	000184e0 	.word	0x000184e0
    d50c:	2000136c 	.word	0x2000136c
    d510:	000002be 	.word	0x000002be
    d514:	00018530 	.word	0x00018530
    d518:	000184b8 	.word	0x000184b8
    d51c:	00016be1 	.word	0x00016be1
    d520:	000187dc 	.word	0x000187dc
    d524:	00016c15 	.word	0x00016c15

0000d528 <hif_init>:
{
    d528:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d52a:	222c      	movs	r2, #44	; 0x2c
    d52c:	2100      	movs	r1, #0
    d52e:	4806      	ldr	r0, [pc, #24]	; (d548 <hif_init+0x20>)
    d530:	4b06      	ldr	r3, [pc, #24]	; (d54c <hif_init+0x24>)
    d532:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d534:	4806      	ldr	r0, [pc, #24]	; (d550 <hif_init+0x28>)
    d536:	4b07      	ldr	r3, [pc, #28]	; (d554 <hif_init+0x2c>)
    d538:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d53a:	4907      	ldr	r1, [pc, #28]	; (d558 <hif_init+0x30>)
    d53c:	2003      	movs	r0, #3
    d53e:	4b07      	ldr	r3, [pc, #28]	; (d55c <hif_init+0x34>)
    d540:	4798      	blx	r3
}
    d542:	2000      	movs	r0, #0
    d544:	bd10      	pop	{r4, pc}
    d546:	46c0      	nop			; (mov r8, r8)
    d548:	2000136c 	.word	0x2000136c
    d54c:	0000cc91 	.word	0x0000cc91
    d550:	0000ccbd 	.word	0x0000ccbd
    d554:	0000c945 	.word	0x0000c945
    d558:	0000cccd 	.word	0x0000cccd
    d55c:	0000d4a5 	.word	0x0000d4a5

0000d560 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d560:	b530      	push	{r4, r5, lr}
    d562:	b09f      	sub	sp, #124	; 0x7c
    d564:	0004      	movs	r4, r0
    d566:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d568:	282c      	cmp	r0, #44	; 0x2c
    d56a:	d02f      	beq.n	d5cc <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d56c:	281b      	cmp	r0, #27
    d56e:	d03d      	beq.n	d5ec <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d570:	2806      	cmp	r0, #6
    d572:	d04b      	beq.n	d60c <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d574:	280e      	cmp	r0, #14
    d576:	d027      	beq.n	d5c8 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d578:	2832      	cmp	r0, #50	; 0x32
    d57a:	d057      	beq.n	d62c <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d57c:	282f      	cmp	r0, #47	; 0x2f
    d57e:	d065      	beq.n	d64c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d580:	2834      	cmp	r0, #52	; 0x34
    d582:	d100      	bne.n	d586 <m2m_wifi_cb+0x26>
    d584:	e077      	b.n	d676 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d586:	2811      	cmp	r0, #17
    d588:	d100      	bne.n	d58c <m2m_wifi_cb+0x2c>
    d58a:	e096      	b.n	d6ba <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d58c:	2813      	cmp	r0, #19
    d58e:	d100      	bne.n	d592 <m2m_wifi_cb+0x32>
    d590:	e0ac      	b.n	d6ec <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d592:	2804      	cmp	r0, #4
    d594:	d100      	bne.n	d598 <m2m_wifi_cb+0x38>
    d596:	e0bb      	b.n	d710 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d598:	2865      	cmp	r0, #101	; 0x65
    d59a:	d100      	bne.n	d59e <m2m_wifi_cb+0x3e>
    d59c:	e0ca      	b.n	d734 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d59e:	2809      	cmp	r0, #9
    d5a0:	d100      	bne.n	d5a4 <m2m_wifi_cb+0x44>
    d5a2:	e0d9      	b.n	d758 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d5a4:	282a      	cmp	r0, #42	; 0x2a
    d5a6:	d100      	bne.n	d5aa <m2m_wifi_cb+0x4a>
    d5a8:	e0e8      	b.n	d77c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d5aa:	2820      	cmp	r0, #32
    d5ac:	d100      	bne.n	d5b0 <m2m_wifi_cb+0x50>
    d5ae:	e0f7      	b.n	d7a0 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d5b0:	2224      	movs	r2, #36	; 0x24
    d5b2:	32ff      	adds	r2, #255	; 0xff
    d5b4:	4989      	ldr	r1, [pc, #548]	; (d7dc <m2m_wifi_cb+0x27c>)
    d5b6:	488a      	ldr	r0, [pc, #552]	; (d7e0 <m2m_wifi_cb+0x280>)
    d5b8:	4d8a      	ldr	r5, [pc, #552]	; (d7e4 <m2m_wifi_cb+0x284>)
    d5ba:	47a8      	blx	r5
    d5bc:	0021      	movs	r1, r4
    d5be:	488a      	ldr	r0, [pc, #552]	; (d7e8 <m2m_wifi_cb+0x288>)
    d5c0:	47a8      	blx	r5
    d5c2:	200d      	movs	r0, #13
    d5c4:	4b89      	ldr	r3, [pc, #548]	; (d7ec <m2m_wifi_cb+0x28c>)
    d5c6:	4798      	blx	r3
	}
}
    d5c8:	b01f      	add	sp, #124	; 0x7c
    d5ca:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d5cc:	2300      	movs	r3, #0
    d5ce:	2204      	movs	r2, #4
    d5d0:	a903      	add	r1, sp, #12
    d5d2:	0028      	movs	r0, r5
    d5d4:	4c86      	ldr	r4, [pc, #536]	; (d7f0 <m2m_wifi_cb+0x290>)
    d5d6:	47a0      	blx	r4
    d5d8:	2800      	cmp	r0, #0
    d5da:	d1f5      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d5dc:	4b85      	ldr	r3, [pc, #532]	; (d7f4 <m2m_wifi_cb+0x294>)
    d5de:	681b      	ldr	r3, [r3, #0]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d0f1      	beq.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d5e4:	a903      	add	r1, sp, #12
    d5e6:	302c      	adds	r0, #44	; 0x2c
    d5e8:	4798      	blx	r3
    d5ea:	e7ed      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d5ec:	2300      	movs	r3, #0
    d5ee:	2208      	movs	r2, #8
    d5f0:	a903      	add	r1, sp, #12
    d5f2:	0028      	movs	r0, r5
    d5f4:	4c7e      	ldr	r4, [pc, #504]	; (d7f0 <m2m_wifi_cb+0x290>)
    d5f6:	47a0      	blx	r4
    d5f8:	2800      	cmp	r0, #0
    d5fa:	d1e5      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d5fc:	4b7d      	ldr	r3, [pc, #500]	; (d7f4 <m2m_wifi_cb+0x294>)
    d5fe:	681b      	ldr	r3, [r3, #0]
    d600:	2b00      	cmp	r3, #0
    d602:	d0e1      	beq.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d604:	a903      	add	r1, sp, #12
    d606:	301b      	adds	r0, #27
    d608:	4798      	blx	r3
    d60a:	e7dd      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d60c:	2301      	movs	r3, #1
    d60e:	2230      	movs	r2, #48	; 0x30
    d610:	a903      	add	r1, sp, #12
    d612:	0028      	movs	r0, r5
    d614:	4c76      	ldr	r4, [pc, #472]	; (d7f0 <m2m_wifi_cb+0x290>)
    d616:	47a0      	blx	r4
    d618:	2800      	cmp	r0, #0
    d61a:	d1d5      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d61c:	4b75      	ldr	r3, [pc, #468]	; (d7f4 <m2m_wifi_cb+0x294>)
    d61e:	681b      	ldr	r3, [r3, #0]
    d620:	2b00      	cmp	r3, #0
    d622:	d0d1      	beq.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d624:	a903      	add	r1, sp, #12
    d626:	3006      	adds	r0, #6
    d628:	4798      	blx	r3
    d62a:	e7cd      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d62c:	2300      	movs	r3, #0
    d62e:	2218      	movs	r2, #24
    d630:	a903      	add	r1, sp, #12
    d632:	0028      	movs	r0, r5
    d634:	4c6e      	ldr	r4, [pc, #440]	; (d7f0 <m2m_wifi_cb+0x290>)
    d636:	47a0      	blx	r4
    d638:	2800      	cmp	r0, #0
    d63a:	d1c5      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d63c:	4b6d      	ldr	r3, [pc, #436]	; (d7f4 <m2m_wifi_cb+0x294>)
    d63e:	681b      	ldr	r3, [r3, #0]
    d640:	2b00      	cmp	r3, #0
    d642:	d0c1      	beq.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d644:	a903      	add	r1, sp, #12
    d646:	3032      	adds	r0, #50	; 0x32
    d648:	4798      	blx	r3
    d64a:	e7bd      	b.n	d5c8 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d64c:	2264      	movs	r2, #100	; 0x64
    d64e:	2100      	movs	r1, #0
    d650:	a803      	add	r0, sp, #12
    d652:	4b69      	ldr	r3, [pc, #420]	; (d7f8 <m2m_wifi_cb+0x298>)
    d654:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d656:	2300      	movs	r3, #0
    d658:	2264      	movs	r2, #100	; 0x64
    d65a:	a903      	add	r1, sp, #12
    d65c:	0028      	movs	r0, r5
    d65e:	4c64      	ldr	r4, [pc, #400]	; (d7f0 <m2m_wifi_cb+0x290>)
    d660:	47a0      	blx	r4
    d662:	2800      	cmp	r0, #0
    d664:	d1b0      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d666:	4b63      	ldr	r3, [pc, #396]	; (d7f4 <m2m_wifi_cb+0x294>)
    d668:	681b      	ldr	r3, [r3, #0]
    d66a:	2b00      	cmp	r3, #0
    d66c:	d0ac      	beq.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d66e:	a903      	add	r1, sp, #12
    d670:	302f      	adds	r0, #47	; 0x2f
    d672:	4798      	blx	r3
    d674:	e7a8      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d676:	2300      	movs	r3, #0
    d678:	2204      	movs	r2, #4
    d67a:	a903      	add	r1, sp, #12
    d67c:	0028      	movs	r0, r5
    d67e:	4c5c      	ldr	r4, [pc, #368]	; (d7f0 <m2m_wifi_cb+0x290>)
    d680:	47a0      	blx	r4
    d682:	2800      	cmp	r0, #0
    d684:	d1a0      	bne.n	d5c8 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d686:	485d      	ldr	r0, [pc, #372]	; (d7fc <m2m_wifi_cb+0x29c>)
    d688:	4d56      	ldr	r5, [pc, #344]	; (d7e4 <m2m_wifi_cb+0x284>)
    d68a:	47a8      	blx	r5
    d68c:	9c03      	ldr	r4, [sp, #12]
    d68e:	0a23      	lsrs	r3, r4, #8
    d690:	20ff      	movs	r0, #255	; 0xff
    d692:	4003      	ands	r3, r0
    d694:	0c22      	lsrs	r2, r4, #16
    d696:	4002      	ands	r2, r0
    d698:	0e21      	lsrs	r1, r4, #24
    d69a:	4020      	ands	r0, r4
    d69c:	9000      	str	r0, [sp, #0]
    d69e:	4858      	ldr	r0, [pc, #352]	; (d800 <m2m_wifi_cb+0x2a0>)
    d6a0:	47a8      	blx	r5
    d6a2:	200d      	movs	r0, #13
    d6a4:	4b51      	ldr	r3, [pc, #324]	; (d7ec <m2m_wifi_cb+0x28c>)
    d6a6:	4798      	blx	r3
			if (gpfAppWifiCb)
    d6a8:	4b52      	ldr	r3, [pc, #328]	; (d7f4 <m2m_wifi_cb+0x294>)
    d6aa:	681b      	ldr	r3, [r3, #0]
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	d100      	bne.n	d6b2 <m2m_wifi_cb+0x152>
    d6b0:	e78a      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d6b2:	2100      	movs	r1, #0
    d6b4:	2034      	movs	r0, #52	; 0x34
    d6b6:	4798      	blx	r3
    d6b8:	e786      	b.n	d5c8 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    d6ba:	2200      	movs	r2, #0
    d6bc:	4b51      	ldr	r3, [pc, #324]	; (d804 <m2m_wifi_cb+0x2a4>)
    d6be:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d6c0:	2300      	movs	r3, #0
    d6c2:	3204      	adds	r2, #4
    d6c4:	a903      	add	r1, sp, #12
    d6c6:	0028      	movs	r0, r5
    d6c8:	4c49      	ldr	r4, [pc, #292]	; (d7f0 <m2m_wifi_cb+0x290>)
    d6ca:	47a0      	blx	r4
    d6cc:	2800      	cmp	r0, #0
    d6ce:	d000      	beq.n	d6d2 <m2m_wifi_cb+0x172>
    d6d0:	e77a      	b.n	d5c8 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    d6d2:	ab03      	add	r3, sp, #12
    d6d4:	781a      	ldrb	r2, [r3, #0]
    d6d6:	4b4c      	ldr	r3, [pc, #304]	; (d808 <m2m_wifi_cb+0x2a8>)
    d6d8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d6da:	4b46      	ldr	r3, [pc, #280]	; (d7f4 <m2m_wifi_cb+0x294>)
    d6dc:	681b      	ldr	r3, [r3, #0]
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d100      	bne.n	d6e4 <m2m_wifi_cb+0x184>
    d6e2:	e771      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d6e4:	a903      	add	r1, sp, #12
    d6e6:	3011      	adds	r0, #17
    d6e8:	4798      	blx	r3
    d6ea:	e76d      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d6ec:	2300      	movs	r3, #0
    d6ee:	222c      	movs	r2, #44	; 0x2c
    d6f0:	a903      	add	r1, sp, #12
    d6f2:	0028      	movs	r0, r5
    d6f4:	4c3e      	ldr	r4, [pc, #248]	; (d7f0 <m2m_wifi_cb+0x290>)
    d6f6:	47a0      	blx	r4
    d6f8:	2800      	cmp	r0, #0
    d6fa:	d000      	beq.n	d6fe <m2m_wifi_cb+0x19e>
    d6fc:	e764      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d6fe:	4b3d      	ldr	r3, [pc, #244]	; (d7f4 <m2m_wifi_cb+0x294>)
    d700:	681b      	ldr	r3, [r3, #0]
    d702:	2b00      	cmp	r3, #0
    d704:	d100      	bne.n	d708 <m2m_wifi_cb+0x1a8>
    d706:	e75f      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d708:	a903      	add	r1, sp, #12
    d70a:	3013      	adds	r0, #19
    d70c:	4798      	blx	r3
    d70e:	e75b      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d710:	2300      	movs	r3, #0
    d712:	2204      	movs	r2, #4
    d714:	a91c      	add	r1, sp, #112	; 0x70
    d716:	0028      	movs	r0, r5
    d718:	4c35      	ldr	r4, [pc, #212]	; (d7f0 <m2m_wifi_cb+0x290>)
    d71a:	47a0      	blx	r4
    d71c:	2800      	cmp	r0, #0
    d71e:	d000      	beq.n	d722 <m2m_wifi_cb+0x1c2>
    d720:	e752      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d722:	4b34      	ldr	r3, [pc, #208]	; (d7f4 <m2m_wifi_cb+0x294>)
    d724:	681b      	ldr	r3, [r3, #0]
    d726:	2b00      	cmp	r3, #0
    d728:	d100      	bne.n	d72c <m2m_wifi_cb+0x1cc>
    d72a:	e74d      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d72c:	a91c      	add	r1, sp, #112	; 0x70
    d72e:	3004      	adds	r0, #4
    d730:	4798      	blx	r3
    d732:	e749      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d734:	2300      	movs	r3, #0
    d736:	2204      	movs	r2, #4
    d738:	a91c      	add	r1, sp, #112	; 0x70
    d73a:	0028      	movs	r0, r5
    d73c:	4c2c      	ldr	r4, [pc, #176]	; (d7f0 <m2m_wifi_cb+0x290>)
    d73e:	47a0      	blx	r4
    d740:	2800      	cmp	r0, #0
    d742:	d000      	beq.n	d746 <m2m_wifi_cb+0x1e6>
    d744:	e740      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d746:	4b2b      	ldr	r3, [pc, #172]	; (d7f4 <m2m_wifi_cb+0x294>)
    d748:	681b      	ldr	r3, [r3, #0]
    d74a:	2b00      	cmp	r3, #0
    d74c:	d100      	bne.n	d750 <m2m_wifi_cb+0x1f0>
    d74e:	e73b      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d750:	a91c      	add	r1, sp, #112	; 0x70
    d752:	3065      	adds	r0, #101	; 0x65
    d754:	4798      	blx	r3
    d756:	e737      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d758:	2301      	movs	r3, #1
    d75a:	2264      	movs	r2, #100	; 0x64
    d75c:	a903      	add	r1, sp, #12
    d75e:	0028      	movs	r0, r5
    d760:	4c23      	ldr	r4, [pc, #140]	; (d7f0 <m2m_wifi_cb+0x290>)
    d762:	47a0      	blx	r4
    d764:	2800      	cmp	r0, #0
    d766:	d000      	beq.n	d76a <m2m_wifi_cb+0x20a>
    d768:	e72e      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d76a:	4b22      	ldr	r3, [pc, #136]	; (d7f4 <m2m_wifi_cb+0x294>)
    d76c:	681b      	ldr	r3, [r3, #0]
    d76e:	2b00      	cmp	r3, #0
    d770:	d100      	bne.n	d774 <m2m_wifi_cb+0x214>
    d772:	e729      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d774:	a903      	add	r1, sp, #12
    d776:	3009      	adds	r0, #9
    d778:	4798      	blx	r3
    d77a:	e725      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d77c:	2301      	movs	r3, #1
    d77e:	2204      	movs	r2, #4
    d780:	a903      	add	r1, sp, #12
    d782:	0028      	movs	r0, r5
    d784:	4c1a      	ldr	r4, [pc, #104]	; (d7f0 <m2m_wifi_cb+0x290>)
    d786:	47a0      	blx	r4
    d788:	2800      	cmp	r0, #0
    d78a:	d000      	beq.n	d78e <m2m_wifi_cb+0x22e>
    d78c:	e71c      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d78e:	4b19      	ldr	r3, [pc, #100]	; (d7f4 <m2m_wifi_cb+0x294>)
    d790:	681b      	ldr	r3, [r3, #0]
    d792:	2b00      	cmp	r3, #0
    d794:	d100      	bne.n	d798 <m2m_wifi_cb+0x238>
    d796:	e717      	b.n	d5c8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d798:	a903      	add	r1, sp, #12
    d79a:	302a      	adds	r0, #42	; 0x2a
    d79c:	4798      	blx	r3
    d79e:	e713      	b.n	d5c8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d7a0:	2300      	movs	r3, #0
    d7a2:	2208      	movs	r2, #8
    d7a4:	a903      	add	r1, sp, #12
    d7a6:	0028      	movs	r0, r5
    d7a8:	4c11      	ldr	r4, [pc, #68]	; (d7f0 <m2m_wifi_cb+0x290>)
    d7aa:	47a0      	blx	r4
    d7ac:	2800      	cmp	r0, #0
    d7ae:	d000      	beq.n	d7b2 <m2m_wifi_cb+0x252>
    d7b0:	e70a      	b.n	d5c8 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d7b2:	ab03      	add	r3, sp, #12
    d7b4:	889a      	ldrh	r2, [r3, #4]
    d7b6:	0028      	movs	r0, r5
    d7b8:	3008      	adds	r0, #8
    d7ba:	2301      	movs	r3, #1
    d7bc:	9903      	ldr	r1, [sp, #12]
    d7be:	4c0c      	ldr	r4, [pc, #48]	; (d7f0 <m2m_wifi_cb+0x290>)
    d7c0:	47a0      	blx	r4
    d7c2:	2800      	cmp	r0, #0
    d7c4:	d000      	beq.n	d7c8 <m2m_wifi_cb+0x268>
    d7c6:	e6ff      	b.n	d5c8 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    d7c8:	4b0a      	ldr	r3, [pc, #40]	; (d7f4 <m2m_wifi_cb+0x294>)
    d7ca:	681b      	ldr	r3, [r3, #0]
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d100      	bne.n	d7d2 <m2m_wifi_cb+0x272>
    d7d0:	e6fa      	b.n	d5c8 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d7d2:	a903      	add	r1, sp, #12
    d7d4:	3020      	adds	r0, #32
    d7d6:	4798      	blx	r3
    d7d8:	e6f6      	b.n	d5c8 <m2m_wifi_cb+0x68>
    d7da:	46c0      	nop			; (mov r8, r8)
    d7dc:	00018820 	.word	0x00018820
    d7e0:	000184b8 	.word	0x000184b8
    d7e4:	00016be1 	.word	0x00016be1
    d7e8:	00018870 	.word	0x00018870
    d7ec:	00016c15 	.word	0x00016c15
    d7f0:	0000d3bd 	.word	0x0000d3bd
    d7f4:	200002f8 	.word	0x200002f8
    d7f8:	0000cc91 	.word	0x0000cc91
    d7fc:	000187e8 	.word	0x000187e8
    d800:	00018850 	.word	0x00018850
    d804:	200002fd 	.word	0x200002fd
    d808:	200002fc 	.word	0x200002fc

0000d80c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d80e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d810:	2201      	movs	r2, #1
    d812:	230f      	movs	r3, #15
    d814:	446b      	add	r3, sp
    d816:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d818:	2800      	cmp	r0, #0
    d81a:	d061      	beq.n	d8e0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d81c:	6802      	ldr	r2, [r0, #0]
    d81e:	4b32      	ldr	r3, [pc, #200]	; (d8e8 <m2m_wifi_init+0xdc>)
    d820:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d822:	2200      	movs	r2, #0
    d824:	4b31      	ldr	r3, [pc, #196]	; (d8ec <m2m_wifi_init+0xe0>)
    d826:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d828:	200f      	movs	r0, #15
    d82a:	4468      	add	r0, sp
    d82c:	4b30      	ldr	r3, [pc, #192]	; (d8f0 <m2m_wifi_init+0xe4>)
    d82e:	4798      	blx	r3
    d830:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d832:	d002      	beq.n	d83a <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    d834:	0020      	movs	r0, r4
    d836:	b00f      	add	sp, #60	; 0x3c
    d838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    d83a:	2000      	movs	r0, #0
    d83c:	4b2d      	ldr	r3, [pc, #180]	; (d8f4 <m2m_wifi_init+0xe8>)
    d83e:	4798      	blx	r3
    d840:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d842:	d149      	bne.n	d8d8 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    d844:	492c      	ldr	r1, [pc, #176]	; (d8f8 <m2m_wifi_init+0xec>)
    d846:	2001      	movs	r0, #1
    d848:	4b2c      	ldr	r3, [pc, #176]	; (d8fc <m2m_wifi_init+0xf0>)
    d84a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    d84c:	ae04      	add	r6, sp, #16
    d84e:	0030      	movs	r0, r6
    d850:	4b2b      	ldr	r3, [pc, #172]	; (d900 <m2m_wifi_init+0xf4>)
    d852:	4798      	blx	r3
    d854:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    d856:	482b      	ldr	r0, [pc, #172]	; (d904 <m2m_wifi_init+0xf8>)
    d858:	4d2b      	ldr	r5, [pc, #172]	; (d908 <m2m_wifi_init+0xfc>)
    d85a:	47a8      	blx	r5
    d85c:	79b3      	ldrb	r3, [r6, #6]
    d85e:	7972      	ldrb	r2, [r6, #5]
    d860:	7931      	ldrb	r1, [r6, #4]
    d862:	8c30      	ldrh	r0, [r6, #32]
    d864:	9000      	str	r0, [sp, #0]
    d866:	4829      	ldr	r0, [pc, #164]	; (d90c <m2m_wifi_init+0x100>)
    d868:	47a8      	blx	r5
    d86a:	200d      	movs	r0, #13
    d86c:	4f28      	ldr	r7, [pc, #160]	; (d910 <m2m_wifi_init+0x104>)
    d86e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    d870:	4824      	ldr	r0, [pc, #144]	; (d904 <m2m_wifi_init+0xf8>)
    d872:	47a8      	blx	r5
    d874:	2226      	movs	r2, #38	; 0x26
    d876:	446a      	add	r2, sp
    d878:	211a      	movs	r1, #26
    d87a:	4469      	add	r1, sp
    d87c:	4825      	ldr	r0, [pc, #148]	; (d914 <m2m_wifi_init+0x108>)
    d87e:	47a8      	blx	r5
    d880:	200d      	movs	r0, #13
    d882:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    d884:	481f      	ldr	r0, [pc, #124]	; (d904 <m2m_wifi_init+0xf8>)
    d886:	47a8      	blx	r5
    d888:	7a73      	ldrb	r3, [r6, #9]
    d88a:	7a32      	ldrb	r2, [r6, #8]
    d88c:	79f1      	ldrb	r1, [r6, #7]
    d88e:	4822      	ldr	r0, [pc, #136]	; (d918 <m2m_wifi_init+0x10c>)
    d890:	47a8      	blx	r5
    d892:	200d      	movs	r0, #13
    d894:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    d896:	481b      	ldr	r0, [pc, #108]	; (d904 <m2m_wifi_init+0xf8>)
    d898:	47a8      	blx	r5
    d89a:	2304      	movs	r3, #4
    d89c:	2205      	movs	r2, #5
    d89e:	2113      	movs	r1, #19
    d8a0:	481e      	ldr	r0, [pc, #120]	; (d91c <m2m_wifi_init+0x110>)
    d8a2:	47a8      	blx	r5
    d8a4:	200d      	movs	r0, #13
    d8a6:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    d8a8:	4816      	ldr	r0, [pc, #88]	; (d904 <m2m_wifi_init+0xf8>)
    d8aa:	47a8      	blx	r5
    d8ac:	4a1c      	ldr	r2, [pc, #112]	; (d920 <m2m_wifi_init+0x114>)
    d8ae:	491d      	ldr	r1, [pc, #116]	; (d924 <m2m_wifi_init+0x118>)
    d8b0:	481d      	ldr	r0, [pc, #116]	; (d928 <m2m_wifi_init+0x11c>)
    d8b2:	47a8      	blx	r5
    d8b4:	200d      	movs	r0, #13
    d8b6:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    d8b8:	0023      	movs	r3, r4
    d8ba:	330d      	adds	r3, #13
    d8bc:	d1ba      	bne.n	d834 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    d8be:	22e8      	movs	r2, #232	; 0xe8
    d8c0:	32ff      	adds	r2, #255	; 0xff
    d8c2:	491a      	ldr	r1, [pc, #104]	; (d92c <m2m_wifi_init+0x120>)
    d8c4:	481a      	ldr	r0, [pc, #104]	; (d930 <m2m_wifi_init+0x124>)
    d8c6:	4b10      	ldr	r3, [pc, #64]	; (d908 <m2m_wifi_init+0xfc>)
    d8c8:	4798      	blx	r3
    d8ca:	481a      	ldr	r0, [pc, #104]	; (d934 <m2m_wifi_init+0x128>)
    d8cc:	4b1a      	ldr	r3, [pc, #104]	; (d938 <m2m_wifi_init+0x12c>)
    d8ce:	4798      	blx	r3
    d8d0:	200d      	movs	r0, #13
    d8d2:	4b0f      	ldr	r3, [pc, #60]	; (d910 <m2m_wifi_init+0x104>)
    d8d4:	4798      	blx	r3
    d8d6:	e7ad      	b.n	d834 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    d8d8:	2000      	movs	r0, #0
    d8da:	4b18      	ldr	r3, [pc, #96]	; (d93c <m2m_wifi_init+0x130>)
    d8dc:	4798      	blx	r3
    d8de:	e7a9      	b.n	d834 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    d8e0:	240c      	movs	r4, #12
    d8e2:	4264      	negs	r4, r4
    d8e4:	e7a6      	b.n	d834 <m2m_wifi_init+0x28>
    d8e6:	46c0      	nop			; (mov r8, r8)
    d8e8:	200002f8 	.word	0x200002f8
    d8ec:	200002fd 	.word	0x200002fd
    d8f0:	0000e2ad 	.word	0x0000e2ad
    d8f4:	0000d529 	.word	0x0000d529
    d8f8:	0000d561 	.word	0x0000d561
    d8fc:	0000d4a5 	.word	0x0000d4a5
    d900:	0000e1c9 	.word	0x0000e1c9
    d904:	000187e8 	.word	0x000187e8
    d908:	00016be1 	.word	0x00016be1
    d90c:	0001892c 	.word	0x0001892c
    d910:	00016c15 	.word	0x00016c15
    d914:	00018954 	.word	0x00018954
    d918:	00018970 	.word	0x00018970
    d91c:	00018994 	.word	0x00018994
    d920:	000189ac 	.word	0x000189ac
    d924:	000189b8 	.word	0x000189b8
    d928:	000189c4 	.word	0x000189c4
    d92c:	0001882c 	.word	0x0001882c
    d930:	000184b8 	.word	0x000184b8
    d934:	000189dc 	.word	0x000189dc
    d938:	00016cfd 	.word	0x00016cfd
    d93c:	0000e381 	.word	0x0000e381

0000d940 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    d940:	b510      	push	{r4, lr}
	return hif_handle_isr();
    d942:	4b01      	ldr	r3, [pc, #4]	; (d948 <m2m_wifi_handle_events+0x8>)
    d944:	4798      	blx	r3
}
    d946:	bd10      	pop	{r4, pc}
    d948:	0000cfd5 	.word	0x0000cfd5

0000d94c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    d94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d94e:	46ce      	mov	lr, r9
    d950:	4647      	mov	r7, r8
    d952:	b580      	push	{r7, lr}
    d954:	b0a3      	sub	sp, #140	; 0x8c
    d956:	9005      	str	r0, [sp, #20]
    d958:	000c      	movs	r4, r1
    d95a:	0015      	movs	r5, r2
    d95c:	001f      	movs	r7, r3
    d95e:	ab2a      	add	r3, sp, #168	; 0xa8
    d960:	881b      	ldrh	r3, [r3, #0]
    d962:	4699      	mov	r9, r3
    d964:	ab2b      	add	r3, sp, #172	; 0xac
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    d96a:	2a01      	cmp	r2, #1
    d96c:	d003      	beq.n	d976 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    d96e:	2f00      	cmp	r7, #0
    d970:	d040      	beq.n	d9f4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d972:	2a02      	cmp	r2, #2
    d974:	d04c      	beq.n	da10 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    d976:	1e63      	subs	r3, r4, #1
    d978:	2b1f      	cmp	r3, #31
    d97a:	d900      	bls.n	d97e <m2m_wifi_connect_sc+0x32>
    d97c:	e078      	b.n	da70 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    d97e:	464b      	mov	r3, r9
    d980:	3b01      	subs	r3, #1
    d982:	b29b      	uxth	r3, r3
    d984:	2b0d      	cmp	r3, #13
    d986:	d903      	bls.n	d990 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    d988:	464b      	mov	r3, r9
    d98a:	2bff      	cmp	r3, #255	; 0xff
    d98c:	d000      	beq.n	d990 <m2m_wifi_connect_sc+0x44>
    d98e:	e07e      	b.n	da8e <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    d990:	ae07      	add	r6, sp, #28
    d992:	0022      	movs	r2, r4
    d994:	9905      	ldr	r1, [sp, #20]
    d996:	205a      	movs	r0, #90	; 0x5a
    d998:	ab02      	add	r3, sp, #8
    d99a:	469c      	mov	ip, r3
    d99c:	4460      	add	r0, ip
    d99e:	4b79      	ldr	r3, [pc, #484]	; (db84 <m2m_wifi_connect_sc+0x238>)
    d9a0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    d9a2:	1934      	adds	r4, r6, r4
    d9a4:	3446      	adds	r4, #70	; 0x46
    d9a6:	2300      	movs	r3, #0
    d9a8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    d9aa:	3344      	adds	r3, #68	; 0x44
    d9ac:	464a      	mov	r2, r9
    d9ae:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    d9b0:	4643      	mov	r3, r8
    d9b2:	1e5a      	subs	r2, r3, #1
    d9b4:	4193      	sbcs	r3, r2
    d9b6:	2267      	movs	r2, #103	; 0x67
    d9b8:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    d9ba:	2341      	movs	r3, #65	; 0x41
    d9bc:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    d9be:	2d03      	cmp	r5, #3
    d9c0:	d100      	bne.n	d9c4 <m2m_wifi_connect_sc+0x78>
    d9c2:	e072      	b.n	daaa <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    d9c4:	2d02      	cmp	r5, #2
    d9c6:	d100      	bne.n	d9ca <m2m_wifi_connect_sc+0x7e>
    d9c8:	e0ac      	b.n	db24 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    d9ca:	2d04      	cmp	r5, #4
    d9cc:	d100      	bne.n	d9d0 <m2m_wifi_connect_sc+0x84>
    d9ce:	e0c4      	b.n	db5a <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    d9d0:	2d01      	cmp	r5, #1
    d9d2:	d000      	beq.n	d9d6 <m2m_wifi_connect_sc+0x8a>
    d9d4:	e0c7      	b.n	db66 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    d9d6:	2300      	movs	r3, #0
    d9d8:	9302      	str	r3, [sp, #8]
    d9da:	9301      	str	r3, [sp, #4]
    d9dc:	9300      	str	r3, [sp, #0]
    d9de:	336c      	adds	r3, #108	; 0x6c
    d9e0:	aa07      	add	r2, sp, #28
    d9e2:	2128      	movs	r1, #40	; 0x28
    d9e4:	2001      	movs	r0, #1
    d9e6:	4c68      	ldr	r4, [pc, #416]	; (db88 <m2m_wifi_connect_sc+0x23c>)
    d9e8:	47a0      	blx	r4

ERR1:
	return ret;
}
    d9ea:	b023      	add	sp, #140	; 0x8c
    d9ec:	bc0c      	pop	{r2, r3}
    d9ee:	4690      	mov	r8, r2
    d9f0:	4699      	mov	r9, r3
    d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    d9f4:	4a65      	ldr	r2, [pc, #404]	; (db8c <m2m_wifi_connect_sc+0x240>)
    d9f6:	4966      	ldr	r1, [pc, #408]	; (db90 <m2m_wifi_connect_sc+0x244>)
    d9f8:	4866      	ldr	r0, [pc, #408]	; (db94 <m2m_wifi_connect_sc+0x248>)
    d9fa:	4b67      	ldr	r3, [pc, #412]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    d9fc:	4798      	blx	r3
    d9fe:	4867      	ldr	r0, [pc, #412]	; (db9c <m2m_wifi_connect_sc+0x250>)
    da00:	4b67      	ldr	r3, [pc, #412]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    da02:	4798      	blx	r3
    da04:	200d      	movs	r0, #13
    da06:	4b67      	ldr	r3, [pc, #412]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    da08:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    da0a:	200c      	movs	r0, #12
    da0c:	4240      	negs	r0, r0
			goto ERR1;
    da0e:	e7ec      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    da10:	0038      	movs	r0, r7
    da12:	4b65      	ldr	r3, [pc, #404]	; (dba8 <m2m_wifi_connect_sc+0x25c>)
    da14:	4798      	blx	r3
    da16:	2840      	cmp	r0, #64	; 0x40
    da18:	d1ad      	bne.n	d976 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    da1a:	783b      	ldrb	r3, [r7, #0]
    da1c:	001a      	movs	r2, r3
    da1e:	3a30      	subs	r2, #48	; 0x30
    da20:	2a36      	cmp	r2, #54	; 0x36
    da22:	d817      	bhi.n	da54 <m2m_wifi_connect_sc+0x108>
    da24:	3a0a      	subs	r2, #10
    da26:	2a06      	cmp	r2, #6
    da28:	d914      	bls.n	da54 <m2m_wifi_connect_sc+0x108>
    da2a:	3b47      	subs	r3, #71	; 0x47
    da2c:	2b19      	cmp	r3, #25
    da2e:	d911      	bls.n	da54 <m2m_wifi_connect_sc+0x108>
    da30:	1c7a      	adds	r2, r7, #1
    da32:	0038      	movs	r0, r7
    da34:	3040      	adds	r0, #64	; 0x40
    da36:	7813      	ldrb	r3, [r2, #0]
    da38:	0019      	movs	r1, r3
    da3a:	3930      	subs	r1, #48	; 0x30
    da3c:	2936      	cmp	r1, #54	; 0x36
    da3e:	d809      	bhi.n	da54 <m2m_wifi_connect_sc+0x108>
    da40:	390a      	subs	r1, #10
    da42:	2906      	cmp	r1, #6
    da44:	d906      	bls.n	da54 <m2m_wifi_connect_sc+0x108>
    da46:	3b47      	subs	r3, #71	; 0x47
    da48:	2b19      	cmp	r3, #25
    da4a:	d903      	bls.n	da54 <m2m_wifi_connect_sc+0x108>
    da4c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    da4e:	4282      	cmp	r2, r0
    da50:	d1f1      	bne.n	da36 <m2m_wifi_connect_sc+0xea>
    da52:	e790      	b.n	d976 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    da54:	4a55      	ldr	r2, [pc, #340]	; (dbac <m2m_wifi_connect_sc+0x260>)
    da56:	494e      	ldr	r1, [pc, #312]	; (db90 <m2m_wifi_connect_sc+0x244>)
    da58:	484e      	ldr	r0, [pc, #312]	; (db94 <m2m_wifi_connect_sc+0x248>)
    da5a:	4b4f      	ldr	r3, [pc, #316]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    da5c:	4798      	blx	r3
    da5e:	4854      	ldr	r0, [pc, #336]	; (dbb0 <m2m_wifi_connect_sc+0x264>)
    da60:	4b4f      	ldr	r3, [pc, #316]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    da62:	4798      	blx	r3
    da64:	200d      	movs	r0, #13
    da66:	4b4f      	ldr	r3, [pc, #316]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    da68:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    da6a:	200c      	movs	r0, #12
    da6c:	4240      	negs	r0, r0
					goto ERR1;
    da6e:	e7bc      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    da70:	228c      	movs	r2, #140	; 0x8c
    da72:	0092      	lsls	r2, r2, #2
    da74:	4946      	ldr	r1, [pc, #280]	; (db90 <m2m_wifi_connect_sc+0x244>)
    da76:	4847      	ldr	r0, [pc, #284]	; (db94 <m2m_wifi_connect_sc+0x248>)
    da78:	4b47      	ldr	r3, [pc, #284]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    da7a:	4798      	blx	r3
    da7c:	484d      	ldr	r0, [pc, #308]	; (dbb4 <m2m_wifi_connect_sc+0x268>)
    da7e:	4b48      	ldr	r3, [pc, #288]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    da80:	4798      	blx	r3
    da82:	200d      	movs	r0, #13
    da84:	4b47      	ldr	r3, [pc, #284]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    da86:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    da88:	200c      	movs	r0, #12
    da8a:	4240      	negs	r0, r0
		goto ERR1;
    da8c:	e7ad      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    da8e:	4a4a      	ldr	r2, [pc, #296]	; (dbb8 <m2m_wifi_connect_sc+0x26c>)
    da90:	493f      	ldr	r1, [pc, #252]	; (db90 <m2m_wifi_connect_sc+0x244>)
    da92:	4840      	ldr	r0, [pc, #256]	; (db94 <m2m_wifi_connect_sc+0x248>)
    da94:	4b40      	ldr	r3, [pc, #256]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    da96:	4798      	blx	r3
    da98:	4848      	ldr	r0, [pc, #288]	; (dbbc <m2m_wifi_connect_sc+0x270>)
    da9a:	4b41      	ldr	r3, [pc, #260]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    da9c:	4798      	blx	r3
    da9e:	200d      	movs	r0, #13
    daa0:	4b40      	ldr	r3, [pc, #256]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    daa2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    daa4:	200c      	movs	r0, #12
    daa6:	4240      	negs	r0, r0
			goto ERR1;
    daa8:	e79f      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    daaa:	783b      	ldrb	r3, [r7, #0]
    daac:	3b01      	subs	r3, #1
    daae:	b2db      	uxtb	r3, r3
    dab0:	aa07      	add	r2, sp, #28
    dab2:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    dab4:	2b03      	cmp	r3, #3
    dab6:	d817      	bhi.n	dae8 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    dab8:	787a      	ldrb	r2, [r7, #1]
    daba:	1e51      	subs	r1, r2, #1
    dabc:	ab07      	add	r3, sp, #28
    dabe:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    dac0:	2310      	movs	r3, #16
    dac2:	0011      	movs	r1, r2
    dac4:	4399      	bics	r1, r3
    dac6:	290b      	cmp	r1, #11
    dac8:	d01e      	beq.n	db08 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    daca:	4a3d      	ldr	r2, [pc, #244]	; (dbc0 <m2m_wifi_connect_sc+0x274>)
    dacc:	4930      	ldr	r1, [pc, #192]	; (db90 <m2m_wifi_connect_sc+0x244>)
    dace:	4831      	ldr	r0, [pc, #196]	; (db94 <m2m_wifi_connect_sc+0x248>)
    dad0:	4c31      	ldr	r4, [pc, #196]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    dad2:	47a0      	blx	r4
    dad4:	ab07      	add	r3, sp, #28
    dad6:	7859      	ldrb	r1, [r3, #1]
    dad8:	483a      	ldr	r0, [pc, #232]	; (dbc4 <m2m_wifi_connect_sc+0x278>)
    dada:	47a0      	blx	r4
    dadc:	200d      	movs	r0, #13
    dade:	4b31      	ldr	r3, [pc, #196]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    dae0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dae2:	200c      	movs	r0, #12
    dae4:	4240      	negs	r0, r0
			goto ERR1;
    dae6:	e780      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    dae8:	2294      	movs	r2, #148	; 0x94
    daea:	0092      	lsls	r2, r2, #2
    daec:	4928      	ldr	r1, [pc, #160]	; (db90 <m2m_wifi_connect_sc+0x244>)
    daee:	4829      	ldr	r0, [pc, #164]	; (db94 <m2m_wifi_connect_sc+0x248>)
    daf0:	4c29      	ldr	r4, [pc, #164]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    daf2:	47a0      	blx	r4
    daf4:	ab07      	add	r3, sp, #28
    daf6:	7819      	ldrb	r1, [r3, #0]
    daf8:	4833      	ldr	r0, [pc, #204]	; (dbc8 <m2m_wifi_connect_sc+0x27c>)
    dafa:	47a0      	blx	r4
    dafc:	200d      	movs	r0, #13
    dafe:	4b29      	ldr	r3, [pc, #164]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    db00:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    db02:	200c      	movs	r0, #12
    db04:	4240      	negs	r0, r0
			goto ERR1;
    db06:	e770      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    db08:	1cb9      	adds	r1, r7, #2
    db0a:	2016      	movs	r0, #22
    db0c:	ab02      	add	r3, sp, #8
    db0e:	469c      	mov	ip, r3
    db10:	4460      	add	r0, ip
    db12:	4b1c      	ldr	r3, [pc, #112]	; (db84 <m2m_wifi_connect_sc+0x238>)
    db14:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    db16:	787b      	ldrb	r3, [r7, #1]
    db18:	aa07      	add	r2, sp, #28
    db1a:	4694      	mov	ip, r2
    db1c:	4463      	add	r3, ip
    db1e:	2200      	movs	r2, #0
    db20:	709a      	strb	r2, [r3, #2]
    db22:	e758      	b.n	d9d6 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    db24:	0038      	movs	r0, r7
    db26:	4b20      	ldr	r3, [pc, #128]	; (dba8 <m2m_wifi_connect_sc+0x25c>)
    db28:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    db2a:	1e43      	subs	r3, r0, #1
    db2c:	b29b      	uxth	r3, r3
    db2e:	2b3f      	cmp	r3, #63	; 0x3f
    db30:	d805      	bhi.n	db3e <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    db32:	1c42      	adds	r2, r0, #1
    db34:	0039      	movs	r1, r7
    db36:	a807      	add	r0, sp, #28
    db38:	4b12      	ldr	r3, [pc, #72]	; (db84 <m2m_wifi_connect_sc+0x238>)
    db3a:	4798      	blx	r3
    db3c:	e74b      	b.n	d9d6 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    db3e:	4a23      	ldr	r2, [pc, #140]	; (dbcc <m2m_wifi_connect_sc+0x280>)
    db40:	4913      	ldr	r1, [pc, #76]	; (db90 <m2m_wifi_connect_sc+0x244>)
    db42:	4814      	ldr	r0, [pc, #80]	; (db94 <m2m_wifi_connect_sc+0x248>)
    db44:	4b14      	ldr	r3, [pc, #80]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    db46:	4798      	blx	r3
    db48:	4821      	ldr	r0, [pc, #132]	; (dbd0 <m2m_wifi_connect_sc+0x284>)
    db4a:	4b15      	ldr	r3, [pc, #84]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    db4c:	4798      	blx	r3
    db4e:	200d      	movs	r0, #13
    db50:	4b14      	ldr	r3, [pc, #80]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    db52:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    db54:	200c      	movs	r0, #12
    db56:	4240      	negs	r0, r0
			goto ERR1;
    db58:	e747      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    db5a:	223e      	movs	r2, #62	; 0x3e
    db5c:	0039      	movs	r1, r7
    db5e:	a807      	add	r0, sp, #28
    db60:	4b08      	ldr	r3, [pc, #32]	; (db84 <m2m_wifi_connect_sc+0x238>)
    db62:	4798      	blx	r3
    db64:	e737      	b.n	d9d6 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    db66:	4a1b      	ldr	r2, [pc, #108]	; (dbd4 <m2m_wifi_connect_sc+0x288>)
    db68:	4909      	ldr	r1, [pc, #36]	; (db90 <m2m_wifi_connect_sc+0x244>)
    db6a:	480a      	ldr	r0, [pc, #40]	; (db94 <m2m_wifi_connect_sc+0x248>)
    db6c:	4b0a      	ldr	r3, [pc, #40]	; (db98 <m2m_wifi_connect_sc+0x24c>)
    db6e:	4798      	blx	r3
    db70:	4819      	ldr	r0, [pc, #100]	; (dbd8 <m2m_wifi_connect_sc+0x28c>)
    db72:	4b0b      	ldr	r3, [pc, #44]	; (dba0 <m2m_wifi_connect_sc+0x254>)
    db74:	4798      	blx	r3
    db76:	200d      	movs	r0, #13
    db78:	4b0a      	ldr	r3, [pc, #40]	; (dba4 <m2m_wifi_connect_sc+0x258>)
    db7a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    db7c:	200c      	movs	r0, #12
    db7e:	4240      	negs	r0, r0
		goto ERR1;
    db80:	e733      	b.n	d9ea <m2m_wifi_connect_sc+0x9e>
    db82:	46c0      	nop			; (mov r8, r8)
    db84:	0000cc7d 	.word	0x0000cc7d
    db88:	0000cda5 	.word	0x0000cda5
    db8c:	0000021a 	.word	0x0000021a
    db90:	0001883c 	.word	0x0001883c
    db94:	000184b8 	.word	0x000184b8
    db98:	00016be1 	.word	0x00016be1
    db9c:	00018884 	.word	0x00018884
    dba0:	00016cfd 	.word	0x00016cfd
    dba4:	00016c15 	.word	0x00016c15
    dba8:	0000cca1 	.word	0x0000cca1
    dbac:	00000226 	.word	0x00000226
    dbb0:	00018898 	.word	0x00018898
    dbb4:	000188a4 	.word	0x000188a4
    dbb8:	00000239 	.word	0x00000239
    dbbc:	000188b8 	.word	0x000188b8
    dbc0:	00000257 	.word	0x00000257
    dbc4:	000188e0 	.word	0x000188e0
    dbc8:	000188c4 	.word	0x000188c4
    dbcc:	00000266 	.word	0x00000266
    dbd0:	000188fc 	.word	0x000188fc
    dbd4:	00000276 	.word	0x00000276
    dbd8:	00018918 	.word	0x00018918

0000dbdc <m2m_wifi_connect>:
{
    dbdc:	b530      	push	{r4, r5, lr}
    dbde:	b083      	sub	sp, #12
    dbe0:	ac06      	add	r4, sp, #24
    dbe2:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    dbe4:	2500      	movs	r5, #0
    dbe6:	9501      	str	r5, [sp, #4]
    dbe8:	9400      	str	r4, [sp, #0]
    dbea:	4c02      	ldr	r4, [pc, #8]	; (dbf4 <m2m_wifi_connect+0x18>)
    dbec:	47a0      	blx	r4
}
    dbee:	b003      	add	sp, #12
    dbf0:	bd30      	pop	{r4, r5, pc}
    dbf2:	46c0      	nop			; (mov r8, r8)
    dbf4:	0000d94d 	.word	0x0000d94d

0000dbf8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    dbf8:	2000      	movs	r0, #0
    dbfa:	4770      	bx	lr

0000dbfc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbfe:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    dc00:	2580      	movs	r5, #128	; 0x80
    dc02:	006d      	lsls	r5, r5, #1
    dc04:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    dc06:	24a5      	movs	r4, #165	; 0xa5
    dc08:	0164      	lsls	r4, r4, #5
    dc0a:	4f08      	ldr	r7, [pc, #32]	; (dc2c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    dc0c:	4e08      	ldr	r6, [pc, #32]	; (dc30 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    dc0e:	0029      	movs	r1, r5
    dc10:	0020      	movs	r0, r4
    dc12:	47b8      	blx	r7
			uint32 reg = 0;
    dc14:	2300      	movs	r3, #0
    dc16:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    dc18:	a901      	add	r1, sp, #4
    dc1a:	0020      	movs	r0, r4
    dc1c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    dc1e:	2800      	cmp	r0, #0
    dc20:	d1f5      	bne.n	dc0e <chip_apply_conf+0x12>
				if(reg == val32)
    dc22:	9b01      	ldr	r3, [sp, #4]
    dc24:	429d      	cmp	r5, r3
    dc26:	d1f2      	bne.n	dc0e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    dc28:	b003      	add	sp, #12
    dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc2c:	0000e0ed 	.word	0x0000e0ed
    dc30:	0000e0e1 	.word	0x0000e0e1

0000dc34 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    dc34:	b500      	push	{lr}
    dc36:	b083      	sub	sp, #12
	uint32 reg = 0;
    dc38:	2300      	movs	r3, #0
    dc3a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    dc3c:	a901      	add	r1, sp, #4
    dc3e:	4811      	ldr	r0, [pc, #68]	; (dc84 <enable_interrupts+0x50>)
    dc40:	4b11      	ldr	r3, [pc, #68]	; (dc88 <enable_interrupts+0x54>)
    dc42:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    dc44:	2800      	cmp	r0, #0
    dc46:	d001      	beq.n	dc4c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    dc48:	b003      	add	sp, #12
    dc4a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    dc4c:	2180      	movs	r1, #128	; 0x80
    dc4e:	0049      	lsls	r1, r1, #1
    dc50:	9b01      	ldr	r3, [sp, #4]
    dc52:	4319      	orrs	r1, r3
    dc54:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    dc56:	480b      	ldr	r0, [pc, #44]	; (dc84 <enable_interrupts+0x50>)
    dc58:	4b0c      	ldr	r3, [pc, #48]	; (dc8c <enable_interrupts+0x58>)
    dc5a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    dc5c:	2800      	cmp	r0, #0
    dc5e:	d1f3      	bne.n	dc48 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    dc60:	a901      	add	r1, sp, #4
    dc62:	20d0      	movs	r0, #208	; 0xd0
    dc64:	0140      	lsls	r0, r0, #5
    dc66:	4b08      	ldr	r3, [pc, #32]	; (dc88 <enable_interrupts+0x54>)
    dc68:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    dc6a:	2800      	cmp	r0, #0
    dc6c:	d1ec      	bne.n	dc48 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    dc6e:	2180      	movs	r1, #128	; 0x80
    dc70:	0249      	lsls	r1, r1, #9
    dc72:	9b01      	ldr	r3, [sp, #4]
    dc74:	4319      	orrs	r1, r3
    dc76:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    dc78:	20d0      	movs	r0, #208	; 0xd0
    dc7a:	0140      	lsls	r0, r0, #5
    dc7c:	4b03      	ldr	r3, [pc, #12]	; (dc8c <enable_interrupts+0x58>)
    dc7e:	4798      	blx	r3
    dc80:	e7e2      	b.n	dc48 <enable_interrupts+0x14>
    dc82:	46c0      	nop			; (mov r8, r8)
    dc84:	00001408 	.word	0x00001408
    dc88:	0000e0e1 	.word	0x0000e0e1
    dc8c:	0000e0ed 	.word	0x0000e0ed

0000dc90 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    dc90:	b510      	push	{r4, lr}
    dc92:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    dc94:	4b28      	ldr	r3, [pc, #160]	; (dd38 <nmi_get_chipid+0xa8>)
    dc96:	681c      	ldr	r4, [r3, #0]
    dc98:	2c00      	cmp	r4, #0
    dc9a:	d004      	beq.n	dca6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    dc9c:	4b26      	ldr	r3, [pc, #152]	; (dd38 <nmi_get_chipid+0xa8>)
    dc9e:	681c      	ldr	r4, [r3, #0]
}
    dca0:	0020      	movs	r0, r4
    dca2:	b002      	add	sp, #8
    dca4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    dca6:	0019      	movs	r1, r3
    dca8:	2080      	movs	r0, #128	; 0x80
    dcaa:	0140      	lsls	r0, r0, #5
    dcac:	4b23      	ldr	r3, [pc, #140]	; (dd3c <nmi_get_chipid+0xac>)
    dcae:	4798      	blx	r3
    dcb0:	2800      	cmp	r0, #0
    dcb2:	d003      	beq.n	dcbc <nmi_get_chipid+0x2c>
			chipid = 0;
    dcb4:	2200      	movs	r2, #0
    dcb6:	4b20      	ldr	r3, [pc, #128]	; (dd38 <nmi_get_chipid+0xa8>)
    dcb8:	601a      	str	r2, [r3, #0]
			return 0;
    dcba:	e7f1      	b.n	dca0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    dcbc:	a901      	add	r1, sp, #4
    dcbe:	4820      	ldr	r0, [pc, #128]	; (dd40 <nmi_get_chipid+0xb0>)
    dcc0:	4b1e      	ldr	r3, [pc, #120]	; (dd3c <nmi_get_chipid+0xac>)
    dcc2:	4798      	blx	r3
    dcc4:	2800      	cmp	r0, #0
    dcc6:	d003      	beq.n	dcd0 <nmi_get_chipid+0x40>
			chipid = 0;
    dcc8:	2200      	movs	r2, #0
    dcca:	4b1b      	ldr	r3, [pc, #108]	; (dd38 <nmi_get_chipid+0xa8>)
    dccc:	601a      	str	r2, [r3, #0]
			return 0;
    dcce:	e7e7      	b.n	dca0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    dcd0:	4b19      	ldr	r3, [pc, #100]	; (dd38 <nmi_get_chipid+0xa8>)
    dcd2:	681b      	ldr	r3, [r3, #0]
    dcd4:	4a1b      	ldr	r2, [pc, #108]	; (dd44 <nmi_get_chipid+0xb4>)
    dcd6:	4293      	cmp	r3, r2
    dcd8:	d00e      	beq.n	dcf8 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    dcda:	4a1b      	ldr	r2, [pc, #108]	; (dd48 <nmi_get_chipid+0xb8>)
    dcdc:	4293      	cmp	r3, r2
    dcde:	d012      	beq.n	dd06 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    dce0:	4a1a      	ldr	r2, [pc, #104]	; (dd4c <nmi_get_chipid+0xbc>)
    dce2:	4293      	cmp	r3, r2
    dce4:	d01c      	beq.n	dd20 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    dce6:	4914      	ldr	r1, [pc, #80]	; (dd38 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    dce8:	4a19      	ldr	r2, [pc, #100]	; (dd50 <nmi_get_chipid+0xc0>)
    dcea:	680b      	ldr	r3, [r1, #0]
    dcec:	401a      	ands	r2, r3
		chipid |= 0x050000;
    dcee:	23a0      	movs	r3, #160	; 0xa0
    dcf0:	02db      	lsls	r3, r3, #11
    dcf2:	4313      	orrs	r3, r2
    dcf4:	600b      	str	r3, [r1, #0]
    dcf6:	e7d1      	b.n	dc9c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    dcf8:	9b01      	ldr	r3, [sp, #4]
    dcfa:	2b01      	cmp	r3, #1
    dcfc:	d0f3      	beq.n	dce6 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    dcfe:	4a15      	ldr	r2, [pc, #84]	; (dd54 <nmi_get_chipid+0xc4>)
    dd00:	4b0d      	ldr	r3, [pc, #52]	; (dd38 <nmi_get_chipid+0xa8>)
    dd02:	601a      	str	r2, [r3, #0]
    dd04:	e7ef      	b.n	dce6 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    dd06:	9b01      	ldr	r3, [sp, #4]
    dd08:	2b03      	cmp	r3, #3
    dd0a:	d0ec      	beq.n	dce6 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    dd0c:	2b04      	cmp	r3, #4
    dd0e:	d003      	beq.n	dd18 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    dd10:	4a11      	ldr	r2, [pc, #68]	; (dd58 <nmi_get_chipid+0xc8>)
    dd12:	4b09      	ldr	r3, [pc, #36]	; (dd38 <nmi_get_chipid+0xa8>)
    dd14:	601a      	str	r2, [r3, #0]
    dd16:	e7e6      	b.n	dce6 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    dd18:	4a10      	ldr	r2, [pc, #64]	; (dd5c <nmi_get_chipid+0xcc>)
    dd1a:	4b07      	ldr	r3, [pc, #28]	; (dd38 <nmi_get_chipid+0xa8>)
    dd1c:	601a      	str	r2, [r3, #0]
    dd1e:	e7e2      	b.n	dce6 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    dd20:	4905      	ldr	r1, [pc, #20]	; (dd38 <nmi_get_chipid+0xa8>)
    dd22:	20ec      	movs	r0, #236	; 0xec
    dd24:	0380      	lsls	r0, r0, #14
    dd26:	4b05      	ldr	r3, [pc, #20]	; (dd3c <nmi_get_chipid+0xac>)
    dd28:	4798      	blx	r3
    dd2a:	2800      	cmp	r0, #0
    dd2c:	d0db      	beq.n	dce6 <nmi_get_chipid+0x56>
			chipid = 0;
    dd2e:	2200      	movs	r2, #0
    dd30:	4b01      	ldr	r3, [pc, #4]	; (dd38 <nmi_get_chipid+0xa8>)
    dd32:	601a      	str	r2, [r3, #0]
			return 0;
    dd34:	e7b4      	b.n	dca0 <nmi_get_chipid+0x10>
    dd36:	46c0      	nop			; (mov r8, r8)
    dd38:	20000300 	.word	0x20000300
    dd3c:	0000e0e1 	.word	0x0000e0e1
    dd40:	000013f4 	.word	0x000013f4
    dd44:	001002a0 	.word	0x001002a0
    dd48:	001002b0 	.word	0x001002b0
    dd4c:	001000f0 	.word	0x001000f0
    dd50:	fff0ffff 	.word	0xfff0ffff
    dd54:	001002a1 	.word	0x001002a1
    dd58:	001002b2 	.word	0x001002b2
    dd5c:	001002b1 	.word	0x001002b1

0000dd60 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    dd60:	b530      	push	{r4, r5, lr}
    dd62:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dd64:	4c16      	ldr	r4, [pc, #88]	; (ddc0 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    dd66:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    dd68:	a901      	add	r1, sp, #4
    dd6a:	2010      	movs	r0, #16
    dd6c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    dd6e:	2800      	cmp	r0, #0
    dd70:	d11c      	bne.n	ddac <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    dd72:	9b01      	ldr	r3, [sp, #4]
    dd74:	422b      	tst	r3, r5
    dd76:	d1f7      	bne.n	dd68 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    dd78:	a901      	add	r1, sp, #4
    dd7a:	3001      	adds	r0, #1
    dd7c:	4b10      	ldr	r3, [pc, #64]	; (ddc0 <chip_sleep+0x60>)
    dd7e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    dd80:	2800      	cmp	r0, #0
    dd82:	d113      	bne.n	ddac <chip_sleep+0x4c>
	if(reg & NBIT1)
    dd84:	9901      	ldr	r1, [sp, #4]
    dd86:	078b      	lsls	r3, r1, #30
    dd88:	d507      	bpl.n	dd9a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    dd8a:	2302      	movs	r3, #2
    dd8c:	4399      	bics	r1, r3
    dd8e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    dd90:	3001      	adds	r0, #1
    dd92:	4b0c      	ldr	r3, [pc, #48]	; (ddc4 <chip_sleep+0x64>)
    dd94:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    dd96:	2800      	cmp	r0, #0
    dd98:	d108      	bne.n	ddac <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    dd9a:	a901      	add	r1, sp, #4
    dd9c:	200b      	movs	r0, #11
    dd9e:	4b08      	ldr	r3, [pc, #32]	; (ddc0 <chip_sleep+0x60>)
    dda0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    dda2:	2800      	cmp	r0, #0
    dda4:	d102      	bne.n	ddac <chip_sleep+0x4c>
	if(reg & NBIT0)
    dda6:	9901      	ldr	r1, [sp, #4]
    dda8:	07cb      	lsls	r3, r1, #31
    ddaa:	d401      	bmi.n	ddb0 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    ddac:	b003      	add	sp, #12
    ddae:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    ddb0:	2301      	movs	r3, #1
    ddb2:	4399      	bics	r1, r3
    ddb4:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    ddb6:	300b      	adds	r0, #11
    ddb8:	4b02      	ldr	r3, [pc, #8]	; (ddc4 <chip_sleep+0x64>)
    ddba:	4798      	blx	r3
    ddbc:	e7f6      	b.n	ddac <chip_sleep+0x4c>
    ddbe:	46c0      	nop			; (mov r8, r8)
    ddc0:	0000e0e1 	.word	0x0000e0e1
    ddc4:	0000e0ed 	.word	0x0000e0ed

0000ddc8 <chip_wake>:
sint8 chip_wake(void)
{
    ddc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddca:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    ddcc:	2300      	movs	r3, #0
    ddce:	9301      	str	r3, [sp, #4]
    ddd0:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    ddd2:	a901      	add	r1, sp, #4
    ddd4:	200b      	movs	r0, #11
    ddd6:	4b28      	ldr	r3, [pc, #160]	; (de78 <chip_wake+0xb0>)
    ddd8:	4798      	blx	r3
    ddda:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    dddc:	d130      	bne.n	de40 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    ddde:	9901      	ldr	r1, [sp, #4]
    dde0:	07cb      	lsls	r3, r1, #31
    dde2:	d406      	bmi.n	ddf2 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    dde4:	2301      	movs	r3, #1
    dde6:	4319      	orrs	r1, r3
    dde8:	200b      	movs	r0, #11
    ddea:	4b24      	ldr	r3, [pc, #144]	; (de7c <chip_wake+0xb4>)
    ddec:	4798      	blx	r3
    ddee:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    ddf0:	d126      	bne.n	de40 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    ddf2:	a901      	add	r1, sp, #4
    ddf4:	2001      	movs	r0, #1
    ddf6:	4b20      	ldr	r3, [pc, #128]	; (de78 <chip_wake+0xb0>)
    ddf8:	4798      	blx	r3
    ddfa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    ddfc:	d120      	bne.n	de40 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    ddfe:	9901      	ldr	r1, [sp, #4]
    de00:	078b      	lsls	r3, r1, #30
    de02:	d520      	bpl.n	de46 <chip_wake+0x7e>
{
    de04:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    de06:	4f1c      	ldr	r7, [pc, #112]	; (de78 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    de08:	4e1d      	ldr	r6, [pc, #116]	; (de80 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    de0a:	4669      	mov	r1, sp
    de0c:	200f      	movs	r0, #15
    de0e:	47b8      	blx	r7
    de10:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    de12:	d120      	bne.n	de56 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    de14:	9b00      	ldr	r3, [sp, #0]
    de16:	075b      	lsls	r3, r3, #29
    de18:	d42b      	bmi.n	de72 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    de1a:	2002      	movs	r0, #2
    de1c:	47b0      	blx	r6
    de1e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    de20:	2d00      	cmp	r5, #0
    de22:	d1f2      	bne.n	de0a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    de24:	22ad      	movs	r2, #173	; 0xad
    de26:	0052      	lsls	r2, r2, #1
    de28:	4916      	ldr	r1, [pc, #88]	; (de84 <chip_wake+0xbc>)
    de2a:	4817      	ldr	r0, [pc, #92]	; (de88 <chip_wake+0xc0>)
    de2c:	4b17      	ldr	r3, [pc, #92]	; (de8c <chip_wake+0xc4>)
    de2e:	4798      	blx	r3
    de30:	4817      	ldr	r0, [pc, #92]	; (de90 <chip_wake+0xc8>)
    de32:	4b18      	ldr	r3, [pc, #96]	; (de94 <chip_wake+0xcc>)
    de34:	4798      	blx	r3
    de36:	200d      	movs	r0, #13
    de38:	4b17      	ldr	r3, [pc, #92]	; (de98 <chip_wake+0xd0>)
    de3a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    de3c:	2404      	movs	r4, #4
    de3e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    de40:	0020      	movs	r0, r4
    de42:	b003      	add	sp, #12
    de44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    de46:	2302      	movs	r3, #2
    de48:	4319      	orrs	r1, r3
    de4a:	2001      	movs	r0, #1
    de4c:	4b0b      	ldr	r3, [pc, #44]	; (de7c <chip_wake+0xb4>)
    de4e:	4798      	blx	r3
    de50:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    de52:	d0d7      	beq.n	de04 <chip_wake+0x3c>
    de54:	e7f4      	b.n	de40 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    de56:	22a8      	movs	r2, #168	; 0xa8
    de58:	0052      	lsls	r2, r2, #1
    de5a:	490a      	ldr	r1, [pc, #40]	; (de84 <chip_wake+0xbc>)
    de5c:	480a      	ldr	r0, [pc, #40]	; (de88 <chip_wake+0xc0>)
    de5e:	4d0b      	ldr	r5, [pc, #44]	; (de8c <chip_wake+0xc4>)
    de60:	47a8      	blx	r5
    de62:	9a00      	ldr	r2, [sp, #0]
    de64:	0021      	movs	r1, r4
    de66:	480d      	ldr	r0, [pc, #52]	; (de9c <chip_wake+0xd4>)
    de68:	47a8      	blx	r5
    de6a:	200d      	movs	r0, #13
    de6c:	4b0a      	ldr	r3, [pc, #40]	; (de98 <chip_wake+0xd0>)
    de6e:	4798      	blx	r3
			goto _WAKE_EXIT;
    de70:	e7e6      	b.n	de40 <chip_wake+0x78>
	nm_bus_reset();
    de72:	4b0b      	ldr	r3, [pc, #44]	; (dea0 <chip_wake+0xd8>)
    de74:	4798      	blx	r3
    de76:	e7e3      	b.n	de40 <chip_wake+0x78>
    de78:	0000e0e1 	.word	0x0000e0e1
    de7c:	0000e0ed 	.word	0x0000e0ed
    de80:	0000c905 	.word	0x0000c905
    de84:	000189f8 	.word	0x000189f8
    de88:	000184b8 	.word	0x000184b8
    de8c:	00016be1 	.word	0x00016be1
    de90:	00018a40 	.word	0x00018a40
    de94:	00016cfd 	.word	0x00016cfd
    de98:	00016c15 	.word	0x00016c15
    de9c:	00018a28 	.word	0x00018a28
    dea0:	0000e0c9 	.word	0x0000e0c9

0000dea4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dea6:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    dea8:	4d2d      	ldr	r5, [pc, #180]	; (df60 <wait_for_bootrom+0xbc>)
    deaa:	4c2e      	ldr	r4, [pc, #184]	; (df64 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    deac:	4e2e      	ldr	r6, [pc, #184]	; (df68 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    deae:	0028      	movs	r0, r5
    deb0:	47a0      	blx	r4
		if (reg & 0x80000000) {
    deb2:	2800      	cmp	r0, #0
    deb4:	db02      	blt.n	debc <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    deb6:	2001      	movs	r0, #1
    deb8:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    deba:	e7f8      	b.n	deae <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    debc:	482b      	ldr	r0, [pc, #172]	; (df6c <wait_for_bootrom+0xc8>)
    debe:	4b29      	ldr	r3, [pc, #164]	; (df64 <wait_for_bootrom+0xc0>)
    dec0:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    dec2:	07c3      	lsls	r3, r0, #31
    dec4:	d409      	bmi.n	deda <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    dec6:	4e28      	ldr	r6, [pc, #160]	; (df68 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    dec8:	4c29      	ldr	r4, [pc, #164]	; (df70 <wait_for_bootrom+0xcc>)
    deca:	4d26      	ldr	r5, [pc, #152]	; (df64 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    decc:	2001      	movs	r0, #1
    dece:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    ded0:	0020      	movs	r0, r4
    ded2:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    ded4:	4b27      	ldr	r3, [pc, #156]	; (df74 <wait_for_bootrom+0xd0>)
    ded6:	4298      	cmp	r0, r3
    ded8:	d1f8      	bne.n	decc <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    deda:	2f02      	cmp	r7, #2
    dedc:	d021      	beq.n	df22 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    dede:	2f03      	cmp	r7, #3
    dee0:	d029      	beq.n	df36 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    dee2:	2f04      	cmp	r7, #4
    dee4:	d030      	beq.n	df48 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    dee6:	4924      	ldr	r1, [pc, #144]	; (df78 <wait_for_bootrom+0xd4>)
    dee8:	4824      	ldr	r0, [pc, #144]	; (df7c <wait_for_bootrom+0xd8>)
    deea:	4b25      	ldr	r3, [pc, #148]	; (df80 <wait_for_bootrom+0xdc>)
    deec:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    deee:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    def0:	4b24      	ldr	r3, [pc, #144]	; (df84 <wait_for_bootrom+0xe0>)
    def2:	4798      	blx	r3
    def4:	0500      	lsls	r0, r0, #20
    def6:	0d00      	lsrs	r0, r0, #20
    def8:	4b23      	ldr	r3, [pc, #140]	; (df88 <wait_for_bootrom+0xe4>)
    defa:	4298      	cmp	r0, r3
    defc:	d82a      	bhi.n	df54 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    defe:	0020      	movs	r0, r4
    df00:	4b22      	ldr	r3, [pc, #136]	; (df8c <wait_for_bootrom+0xe8>)
    df02:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    df04:	4822      	ldr	r0, [pc, #136]	; (df90 <wait_for_bootrom+0xec>)
    df06:	4c23      	ldr	r4, [pc, #140]	; (df94 <wait_for_bootrom+0xf0>)
    df08:	47a0      	blx	r4
    df0a:	491b      	ldr	r1, [pc, #108]	; (df78 <wait_for_bootrom+0xd4>)
    df0c:	4822      	ldr	r0, [pc, #136]	; (df98 <wait_for_bootrom+0xf4>)
    df0e:	47a0      	blx	r4
    df10:	200d      	movs	r0, #13
    df12:	4b22      	ldr	r3, [pc, #136]	; (df9c <wait_for_bootrom+0xf8>)
    df14:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    df16:	4922      	ldr	r1, [pc, #136]	; (dfa0 <wait_for_bootrom+0xfc>)
    df18:	4815      	ldr	r0, [pc, #84]	; (df70 <wait_for_bootrom+0xcc>)
    df1a:	4b19      	ldr	r3, [pc, #100]	; (df80 <wait_for_bootrom+0xdc>)
    df1c:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    df1e:	2000      	movs	r0, #0
    df20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    df22:	4920      	ldr	r1, [pc, #128]	; (dfa4 <wait_for_bootrom+0x100>)
    df24:	4820      	ldr	r0, [pc, #128]	; (dfa8 <wait_for_bootrom+0x104>)
    df26:	4c16      	ldr	r4, [pc, #88]	; (df80 <wait_for_bootrom+0xdc>)
    df28:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    df2a:	2180      	movs	r1, #128	; 0x80
    df2c:	0349      	lsls	r1, r1, #13
    df2e:	4813      	ldr	r0, [pc, #76]	; (df7c <wait_for_bootrom+0xd8>)
    df30:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    df32:	2400      	movs	r4, #0
    df34:	e7dc      	b.n	def0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    df36:	491b      	ldr	r1, [pc, #108]	; (dfa4 <wait_for_bootrom+0x100>)
    df38:	481b      	ldr	r0, [pc, #108]	; (dfa8 <wait_for_bootrom+0x104>)
    df3a:	4c11      	ldr	r4, [pc, #68]	; (df80 <wait_for_bootrom+0xdc>)
    df3c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    df3e:	2100      	movs	r1, #0
    df40:	480e      	ldr	r0, [pc, #56]	; (df7c <wait_for_bootrom+0xd8>)
    df42:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    df44:	2400      	movs	r4, #0
    df46:	e7d3      	b.n	def0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    df48:	490b      	ldr	r1, [pc, #44]	; (df78 <wait_for_bootrom+0xd4>)
    df4a:	480c      	ldr	r0, [pc, #48]	; (df7c <wait_for_bootrom+0xd8>)
    df4c:	4b0c      	ldr	r3, [pc, #48]	; (df80 <wait_for_bootrom+0xdc>)
    df4e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    df50:	2480      	movs	r4, #128	; 0x80
    df52:	e7cd      	b.n	def0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    df54:	2002      	movs	r0, #2
    df56:	4320      	orrs	r0, r4
    df58:	4b0c      	ldr	r3, [pc, #48]	; (df8c <wait_for_bootrom+0xe8>)
    df5a:	4798      	blx	r3
    df5c:	e7d2      	b.n	df04 <wait_for_bootrom+0x60>
    df5e:	46c0      	nop			; (mov r8, r8)
    df60:	00001014 	.word	0x00001014
    df64:	0000e0d5 	.word	0x0000e0d5
    df68:	0000c905 	.word	0x0000c905
    df6c:	000207bc 	.word	0x000207bc
    df70:	000c000c 	.word	0x000c000c
    df74:	10add09e 	.word	0x10add09e
    df78:	13301354 	.word	0x13301354
    df7c:	0000108c 	.word	0x0000108c
    df80:	0000e0ed 	.word	0x0000e0ed
    df84:	0000dc91 	.word	0x0000dc91
    df88:	0000039f 	.word	0x0000039f
    df8c:	0000dbfd 	.word	0x0000dbfd
    df90:	000187e8 	.word	0x000187e8
    df94:	00016be1 	.word	0x00016be1
    df98:	00018a5c 	.word	0x00018a5c
    df9c:	00016c15 	.word	0x00016c15
    dfa0:	ef522f61 	.word	0xef522f61
    dfa4:	3c1cd57d 	.word	0x3c1cd57d
    dfa8:	000207ac 	.word	0x000207ac

0000dfac <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    dfac:	b570      	push	{r4, r5, r6, lr}
    dfae:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    dfb0:	4b15      	ldr	r3, [pc, #84]	; (e008 <wait_for_firmware_start+0x5c>)
    dfb2:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    dfb4:	4b15      	ldr	r3, [pc, #84]	; (e00c <wait_for_firmware_start+0x60>)
    dfb6:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    dfb8:	3802      	subs	r0, #2
    dfba:	2801      	cmp	r0, #1
    dfbc:	d911      	bls.n	dfe2 <wait_for_firmware_start+0x36>
{
    dfbe:	2401      	movs	r4, #1
    dfc0:	4264      	negs	r4, r4
    dfc2:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dfc4:	4e12      	ldr	r6, [pc, #72]	; (e010 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    dfc6:	4d13      	ldr	r5, [pc, #76]	; (e014 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    dfc8:	9b00      	ldr	r3, [sp, #0]
    dfca:	4298      	cmp	r0, r3
    dfcc:	d00e      	beq.n	dfec <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dfce:	2002      	movs	r0, #2
    dfd0:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    dfd2:	9801      	ldr	r0, [sp, #4]
    dfd4:	47a8      	blx	r5
    dfd6:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    dfd8:	2c00      	cmp	r4, #0
    dfda:	d1f5      	bne.n	dfc8 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    dfdc:	2005      	movs	r0, #5
    dfde:	4240      	negs	r0, r0
    dfe0:	e009      	b.n	dff6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    dfe2:	4b0d      	ldr	r3, [pc, #52]	; (e018 <wait_for_firmware_start+0x6c>)
    dfe4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    dfe6:	4b0d      	ldr	r3, [pc, #52]	; (e01c <wait_for_firmware_start+0x70>)
    dfe8:	9300      	str	r3, [sp, #0]
    dfea:	e7e8      	b.n	dfbe <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    dfec:	9a00      	ldr	r2, [sp, #0]
    dfee:	4b07      	ldr	r3, [pc, #28]	; (e00c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    dff0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    dff2:	429a      	cmp	r2, r3
    dff4:	d001      	beq.n	dffa <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    dff6:	b002      	add	sp, #8
    dff8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    dffa:	2100      	movs	r1, #0
    dffc:	4802      	ldr	r0, [pc, #8]	; (e008 <wait_for_firmware_start+0x5c>)
    dffe:	4b08      	ldr	r3, [pc, #32]	; (e020 <wait_for_firmware_start+0x74>)
    e000:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    e002:	2000      	movs	r0, #0
    e004:	e7f7      	b.n	dff6 <wait_for_firmware_start+0x4a>
    e006:	46c0      	nop			; (mov r8, r8)
    e008:	0000108c 	.word	0x0000108c
    e00c:	02532636 	.word	0x02532636
    e010:	0000c905 	.word	0x0000c905
    e014:	0000e0d5 	.word	0x0000e0d5
    e018:	000207ac 	.word	0x000207ac
    e01c:	d75dc1c3 	.word	0xd75dc1c3
    e020:	0000e0ed 	.word	0x0000e0ed

0000e024 <chip_deinit>:

sint8 chip_deinit(void)
{
    e024:	b510      	push	{r4, lr}
    e026:	b082      	sub	sp, #8
	uint32 reg = 0;
    e028:	2300      	movs	r3, #0
    e02a:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    e02c:	a901      	add	r1, sp, #4
    e02e:	20a0      	movs	r0, #160	; 0xa0
    e030:	0140      	lsls	r0, r0, #5
    e032:	4b14      	ldr	r3, [pc, #80]	; (e084 <chip_deinit+0x60>)
    e034:	4798      	blx	r3
    e036:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    e038:	d115      	bne.n	e066 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    e03a:	4913      	ldr	r1, [pc, #76]	; (e088 <chip_deinit+0x64>)
    e03c:	9b01      	ldr	r3, [sp, #4]
    e03e:	4019      	ands	r1, r3
    e040:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    e042:	20a0      	movs	r0, #160	; 0xa0
    e044:	0140      	lsls	r0, r0, #5
    e046:	4b11      	ldr	r3, [pc, #68]	; (e08c <chip_deinit+0x68>)
    e048:	4798      	blx	r3
    e04a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    e04c:	d016      	beq.n	e07c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    e04e:	4a10      	ldr	r2, [pc, #64]	; (e090 <chip_deinit+0x6c>)
    e050:	4910      	ldr	r1, [pc, #64]	; (e094 <chip_deinit+0x70>)
    e052:	4811      	ldr	r0, [pc, #68]	; (e098 <chip_deinit+0x74>)
    e054:	4b11      	ldr	r3, [pc, #68]	; (e09c <chip_deinit+0x78>)
    e056:	4798      	blx	r3
    e058:	4811      	ldr	r0, [pc, #68]	; (e0a0 <chip_deinit+0x7c>)
    e05a:	4b12      	ldr	r3, [pc, #72]	; (e0a4 <chip_deinit+0x80>)
    e05c:	4798      	blx	r3
    e05e:	200d      	movs	r0, #13
    e060:	4b11      	ldr	r3, [pc, #68]	; (e0a8 <chip_deinit+0x84>)
    e062:	4798      	blx	r3
		goto ERR1;
    e064:	e00a      	b.n	e07c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    e066:	4a11      	ldr	r2, [pc, #68]	; (e0ac <chip_deinit+0x88>)
    e068:	490a      	ldr	r1, [pc, #40]	; (e094 <chip_deinit+0x70>)
    e06a:	480b      	ldr	r0, [pc, #44]	; (e098 <chip_deinit+0x74>)
    e06c:	4b0b      	ldr	r3, [pc, #44]	; (e09c <chip_deinit+0x78>)
    e06e:	4798      	blx	r3
    e070:	480b      	ldr	r0, [pc, #44]	; (e0a0 <chip_deinit+0x7c>)
    e072:	4b0c      	ldr	r3, [pc, #48]	; (e0a4 <chip_deinit+0x80>)
    e074:	4798      	blx	r3
    e076:	200d      	movs	r0, #13
    e078:	4b0b      	ldr	r3, [pc, #44]	; (e0a8 <chip_deinit+0x84>)
    e07a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    e07c:	0020      	movs	r0, r4
    e07e:	b002      	add	sp, #8
    e080:	bd10      	pop	{r4, pc}
    e082:	46c0      	nop			; (mov r8, r8)
    e084:	0000e0e1 	.word	0x0000e0e1
    e088:	fffffbff 	.word	0xfffffbff
    e08c:	0000e0ed 	.word	0x0000e0ed
    e090:	00000207 	.word	0x00000207
    e094:	00018a04 	.word	0x00018a04
    e098:	000184b8 	.word	0x000184b8
    e09c:	00016be1 	.word	0x00016be1
    e0a0:	00018a10 	.word	0x00018a10
    e0a4:	00016cfd 	.word	0x00016cfd
    e0a8:	00016c15 	.word	0x00016c15
    e0ac:	00000201 	.word	0x00000201

0000e0b0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    e0b0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    e0b2:	4b01      	ldr	r3, [pc, #4]	; (e0b8 <nm_bus_iface_init+0x8>)
    e0b4:	4798      	blx	r3
	return ret;
}
    e0b6:	bd10      	pop	{r4, pc}
    e0b8:	0000c9c1 	.word	0x0000c9c1

0000e0bc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    e0bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    e0be:	4b01      	ldr	r3, [pc, #4]	; (e0c4 <nm_bus_iface_deinit+0x8>)
    e0c0:	4798      	blx	r3

	return ret;
}
    e0c2:	bd10      	pop	{r4, pc}
    e0c4:	0000cc11 	.word	0x0000cc11

0000e0c8 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    e0c8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    e0ca:	4b01      	ldr	r3, [pc, #4]	; (e0d0 <nm_bus_reset+0x8>)
    e0cc:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    e0ce:	bd10      	pop	{r4, pc}
    e0d0:	0000ea71 	.word	0x0000ea71

0000e0d4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    e0d4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    e0d6:	4b01      	ldr	r3, [pc, #4]	; (e0dc <nm_read_reg+0x8>)
    e0d8:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    e0da:	bd10      	pop	{r4, pc}
    e0dc:	0000eaa9 	.word	0x0000eaa9

0000e0e0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e0e0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    e0e2:	4b01      	ldr	r3, [pc, #4]	; (e0e8 <nm_read_reg_with_ret+0x8>)
    e0e4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    e0e6:	bd10      	pop	{r4, pc}
    e0e8:	0000eabd 	.word	0x0000eabd

0000e0ec <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e0ec:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    e0ee:	4b01      	ldr	r3, [pc, #4]	; (e0f4 <nm_write_reg+0x8>)
    e0f0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    e0f2:	bd10      	pop	{r4, pc}
    e0f4:	0000ead5 	.word	0x0000ead5

0000e0f8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0fa:	46d6      	mov	lr, sl
    e0fc:	464f      	mov	r7, r9
    e0fe:	4646      	mov	r6, r8
    e100:	b5c0      	push	{r6, r7, lr}
    e102:	b082      	sub	sp, #8
    e104:	4680      	mov	r8, r0
    e106:	4689      	mov	r9, r1
    e108:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e10a:	4b13      	ldr	r3, [pc, #76]	; (e158 <nm_read_block+0x60>)
    e10c:	881f      	ldrh	r7, [r3, #0]
    e10e:	3f08      	subs	r7, #8
    e110:	b2bb      	uxth	r3, r7
    e112:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e114:	001e      	movs	r6, r3
    e116:	0004      	movs	r4, r0
    e118:	429a      	cmp	r2, r3
    e11a:	d91a      	bls.n	e152 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e11c:	4b0f      	ldr	r3, [pc, #60]	; (e15c <nm_read_block+0x64>)
    e11e:	469a      	mov	sl, r3
    e120:	1a37      	subs	r7, r6, r0
    e122:	4643      	mov	r3, r8
    e124:	1ae1      	subs	r1, r4, r3
    e126:	4449      	add	r1, r9
    e128:	9a01      	ldr	r2, [sp, #4]
    e12a:	0020      	movs	r0, r4
    e12c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    e12e:	2800      	cmp	r0, #0
    e130:	d109      	bne.n	e146 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    e132:	1bad      	subs	r5, r5, r6
    e134:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    e136:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    e138:	42b5      	cmp	r5, r6
    e13a:	d8f2      	bhi.n	e122 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e13c:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e13e:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e140:	0020      	movs	r0, r4
    e142:	4b06      	ldr	r3, [pc, #24]	; (e15c <nm_read_block+0x64>)
    e144:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    e146:	b002      	add	sp, #8
    e148:	bc1c      	pop	{r2, r3, r4}
    e14a:	4690      	mov	r8, r2
    e14c:	4699      	mov	r9, r3
    e14e:	46a2      	mov	sl, r4
    e150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    e152:	2100      	movs	r1, #0
    e154:	e7f2      	b.n	e13c <nm_read_block+0x44>
    e156:	46c0      	nop			; (mov r8, r8)
    e158:	2000006c 	.word	0x2000006c
    e15c:	0000ec15 	.word	0x0000ec15

0000e160 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e160:	b5f0      	push	{r4, r5, r6, r7, lr}
    e162:	46d6      	mov	lr, sl
    e164:	464f      	mov	r7, r9
    e166:	4646      	mov	r6, r8
    e168:	b5c0      	push	{r6, r7, lr}
    e16a:	b082      	sub	sp, #8
    e16c:	4680      	mov	r8, r0
    e16e:	4689      	mov	r9, r1
    e170:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e172:	4b13      	ldr	r3, [pc, #76]	; (e1c0 <nm_write_block+0x60>)
    e174:	881f      	ldrh	r7, [r3, #0]
    e176:	3f08      	subs	r7, #8
    e178:	b2bb      	uxth	r3, r7
    e17a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e17c:	001e      	movs	r6, r3
    e17e:	0004      	movs	r4, r0
    e180:	429a      	cmp	r2, r3
    e182:	d91a      	bls.n	e1ba <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e184:	4b0f      	ldr	r3, [pc, #60]	; (e1c4 <nm_write_block+0x64>)
    e186:	469a      	mov	sl, r3
    e188:	1a37      	subs	r7, r6, r0
    e18a:	4643      	mov	r3, r8
    e18c:	1ae1      	subs	r1, r4, r3
    e18e:	4449      	add	r1, r9
    e190:	9a01      	ldr	r2, [sp, #4]
    e192:	0020      	movs	r0, r4
    e194:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    e196:	2800      	cmp	r0, #0
    e198:	d109      	bne.n	e1ae <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    e19a:	1bad      	subs	r5, r5, r6
    e19c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    e19e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    e1a0:	42b5      	cmp	r5, r6
    e1a2:	d8f2      	bhi.n	e18a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e1a4:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e1a6:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e1a8:	0020      	movs	r0, r4
    e1aa:	4b06      	ldr	r3, [pc, #24]	; (e1c4 <nm_write_block+0x64>)
    e1ac:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    e1ae:	b002      	add	sp, #8
    e1b0:	bc1c      	pop	{r2, r3, r4}
    e1b2:	4690      	mov	r8, r2
    e1b4:	4699      	mov	r9, r3
    e1b6:	46a2      	mov	sl, r4
    e1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    e1ba:	2100      	movs	r1, #0
    e1bc:	e7f2      	b.n	e1a4 <nm_write_block+0x44>
    e1be:	46c0      	nop			; (mov r8, r8)
    e1c0:	2000006c 	.word	0x2000006c
    e1c4:	0000ed71 	.word	0x0000ed71

0000e1c8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    e1c8:	b570      	push	{r4, r5, r6, lr}
    e1ca:	b084      	sub	sp, #16
    e1cc:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    e1ce:	2300      	movs	r3, #0
    e1d0:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    e1d2:	2208      	movs	r2, #8
    e1d4:	2100      	movs	r1, #0
    e1d6:	a801      	add	r0, sp, #4
    e1d8:	4b2d      	ldr	r3, [pc, #180]	; (e290 <nm_get_firmware_full_info+0xc8>)
    e1da:	4798      	blx	r3
	if (pstrRev != NULL)
    e1dc:	2c00      	cmp	r4, #0
    e1de:	d044      	beq.n	e26a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    e1e0:	2228      	movs	r2, #40	; 0x28
    e1e2:	2100      	movs	r1, #0
    e1e4:	0020      	movs	r0, r4
    e1e6:	4b2b      	ldr	r3, [pc, #172]	; (e294 <nm_get_firmware_full_info+0xcc>)
    e1e8:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    e1ea:	a903      	add	r1, sp, #12
    e1ec:	482a      	ldr	r0, [pc, #168]	; (e298 <nm_get_firmware_full_info+0xd0>)
    e1ee:	4b2b      	ldr	r3, [pc, #172]	; (e29c <nm_get_firmware_full_info+0xd4>)
    e1f0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    e1f2:	2800      	cmp	r0, #0
    e1f4:	d13a      	bne.n	e26c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    e1f6:	9b03      	ldr	r3, [sp, #12]
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	d039      	beq.n	e270 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    e1fc:	20c0      	movs	r0, #192	; 0xc0
    e1fe:	0280      	lsls	r0, r0, #10
    e200:	4318      	orrs	r0, r3
    e202:	2208      	movs	r2, #8
    e204:	a901      	add	r1, sp, #4
    e206:	4b26      	ldr	r3, [pc, #152]	; (e2a0 <nm_get_firmware_full_info+0xd8>)
    e208:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    e20a:	2800      	cmp	r0, #0
    e20c:	d12e      	bne.n	e26c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    e20e:	9b02      	ldr	r3, [sp, #8]
    e210:	0418      	lsls	r0, r3, #16
    e212:	0c00      	lsrs	r0, r0, #16
    e214:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    e216:	d02e      	beq.n	e276 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    e218:	23c0      	movs	r3, #192	; 0xc0
    e21a:	029b      	lsls	r3, r3, #10
    e21c:	4318      	orrs	r0, r3
    e21e:	2228      	movs	r2, #40	; 0x28
    e220:	0021      	movs	r1, r4
    e222:	4b1f      	ldr	r3, [pc, #124]	; (e2a0 <nm_get_firmware_full_info+0xd8>)
    e224:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    e226:	2800      	cmp	r0, #0
    e228:	d120      	bne.n	e26c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    e22a:	7921      	ldrb	r1, [r4, #4]
    e22c:	0209      	lsls	r1, r1, #8
    e22e:	79a2      	ldrb	r2, [r4, #6]
    e230:	230f      	movs	r3, #15
    e232:	401a      	ands	r2, r3
    e234:	430a      	orrs	r2, r1
    e236:	7961      	ldrb	r1, [r4, #5]
    e238:	0109      	lsls	r1, r1, #4
    e23a:	25ff      	movs	r5, #255	; 0xff
    e23c:	4029      	ands	r1, r5
    e23e:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    e240:	79e1      	ldrb	r1, [r4, #7]
    e242:	0209      	lsls	r1, r1, #8
    e244:	7a66      	ldrb	r6, [r4, #9]
    e246:	4033      	ands	r3, r6
    e248:	430b      	orrs	r3, r1
    e24a:	7a21      	ldrb	r1, [r4, #8]
    e24c:	0109      	lsls	r1, r1, #4
    e24e:	400d      	ands	r5, r1
    e250:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    e252:	2a00      	cmp	r2, #0
    e254:	d012      	beq.n	e27c <nm_get_firmware_full_info+0xb4>
    e256:	2b00      	cmp	r3, #0
    e258:	d013      	beq.n	e282 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    e25a:	4912      	ldr	r1, [pc, #72]	; (e2a4 <nm_get_firmware_full_info+0xdc>)
    e25c:	428b      	cmp	r3, r1
    e25e:	d813      	bhi.n	e288 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    e260:	4b11      	ldr	r3, [pc, #68]	; (e2a8 <nm_get_firmware_full_info+0xe0>)
    e262:	429a      	cmp	r2, r3
    e264:	d802      	bhi.n	e26c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    e266:	380d      	subs	r0, #13
    e268:	e000      	b.n	e26c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    e26a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    e26c:	b004      	add	sp, #16
    e26e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    e270:	200c      	movs	r0, #12
    e272:	4240      	negs	r0, r0
    e274:	e7fa      	b.n	e26c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    e276:	200c      	movs	r0, #12
    e278:	4240      	negs	r0, r0
    e27a:	e7f7      	b.n	e26c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    e27c:	200c      	movs	r0, #12
    e27e:	4240      	negs	r0, r0
    e280:	e7f4      	b.n	e26c <nm_get_firmware_full_info+0xa4>
    e282:	200c      	movs	r0, #12
    e284:	4240      	negs	r0, r0
    e286:	e7f1      	b.n	e26c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    e288:	200d      	movs	r0, #13
    e28a:	4240      	negs	r0, r0
    e28c:	e7ee      	b.n	e26c <nm_get_firmware_full_info+0xa4>
    e28e:	46c0      	nop			; (mov r8, r8)
    e290:	00016a7f 	.word	0x00016a7f
    e294:	0000cc91 	.word	0x0000cc91
    e298:	000c0008 	.word	0x000c0008
    e29c:	0000e0e1 	.word	0x0000e0e1
    e2a0:	0000e0f9 	.word	0x0000e0f9
    e2a4:	00001354 	.word	0x00001354
    e2a8:	00001353 	.word	0x00001353

0000e2ac <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    e2ac:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    e2ae:	2800      	cmp	r0, #0
    e2b0:	d037      	beq.n	e322 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    e2b2:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    e2b4:	1e6b      	subs	r3, r5, #1
    e2b6:	2b03      	cmp	r3, #3
    e2b8:	d900      	bls.n	e2bc <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    e2ba:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    e2bc:	2000      	movs	r0, #0
    e2be:	4b20      	ldr	r3, [pc, #128]	; (e340 <nm_drv_init+0x94>)
    e2c0:	4798      	blx	r3
    e2c2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e2c4:	d12f      	bne.n	e326 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    e2c6:	481f      	ldr	r0, [pc, #124]	; (e344 <nm_drv_init+0x98>)
    e2c8:	4c1f      	ldr	r4, [pc, #124]	; (e348 <nm_drv_init+0x9c>)
    e2ca:	47a0      	blx	r4
    e2cc:	4b1f      	ldr	r3, [pc, #124]	; (e34c <nm_drv_init+0xa0>)
    e2ce:	4798      	blx	r3
    e2d0:	0001      	movs	r1, r0
    e2d2:	481f      	ldr	r0, [pc, #124]	; (e350 <nm_drv_init+0xa4>)
    e2d4:	47a0      	blx	r4
    e2d6:	200d      	movs	r0, #13
    e2d8:	4b1e      	ldr	r3, [pc, #120]	; (e354 <nm_drv_init+0xa8>)
    e2da:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    e2dc:	4b1e      	ldr	r3, [pc, #120]	; (e358 <nm_drv_init+0xac>)
    e2de:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    e2e0:	0028      	movs	r0, r5
    e2e2:	4b1e      	ldr	r3, [pc, #120]	; (e35c <nm_drv_init+0xb0>)
    e2e4:	4798      	blx	r3
    e2e6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e2e8:	d117      	bne.n	e31a <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    e2ea:	0028      	movs	r0, r5
    e2ec:	4b1c      	ldr	r3, [pc, #112]	; (e360 <nm_drv_init+0xb4>)
    e2ee:	4798      	blx	r3
    e2f0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e2f2:	d112      	bne.n	e31a <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    e2f4:	3d02      	subs	r5, #2
    e2f6:	2d01      	cmp	r5, #1
    e2f8:	d911      	bls.n	e31e <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    e2fa:	4b1a      	ldr	r3, [pc, #104]	; (e364 <nm_drv_init+0xb8>)
    e2fc:	4798      	blx	r3
    e2fe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e300:	d00d      	beq.n	e31e <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    e302:	22a7      	movs	r2, #167	; 0xa7
    e304:	0052      	lsls	r2, r2, #1
    e306:	4918      	ldr	r1, [pc, #96]	; (e368 <nm_drv_init+0xbc>)
    e308:	4818      	ldr	r0, [pc, #96]	; (e36c <nm_drv_init+0xc0>)
    e30a:	4b0f      	ldr	r3, [pc, #60]	; (e348 <nm_drv_init+0x9c>)
    e30c:	4798      	blx	r3
    e30e:	4818      	ldr	r0, [pc, #96]	; (e370 <nm_drv_init+0xc4>)
    e310:	4b18      	ldr	r3, [pc, #96]	; (e374 <nm_drv_init+0xc8>)
    e312:	4798      	blx	r3
    e314:	200d      	movs	r0, #13
    e316:	4b0f      	ldr	r3, [pc, #60]	; (e354 <nm_drv_init+0xa8>)
    e318:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    e31a:	4b17      	ldr	r3, [pc, #92]	; (e378 <nm_drv_init+0xcc>)
    e31c:	4798      	blx	r3
ERR1:
	return ret;
}
    e31e:	0020      	movs	r0, r4
    e320:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    e322:	2501      	movs	r5, #1
    e324:	e7ca      	b.n	e2bc <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    e326:	2290      	movs	r2, #144	; 0x90
    e328:	0052      	lsls	r2, r2, #1
    e32a:	490f      	ldr	r1, [pc, #60]	; (e368 <nm_drv_init+0xbc>)
    e32c:	480f      	ldr	r0, [pc, #60]	; (e36c <nm_drv_init+0xc0>)
    e32e:	4b06      	ldr	r3, [pc, #24]	; (e348 <nm_drv_init+0x9c>)
    e330:	4798      	blx	r3
    e332:	4812      	ldr	r0, [pc, #72]	; (e37c <nm_drv_init+0xd0>)
    e334:	4b0f      	ldr	r3, [pc, #60]	; (e374 <nm_drv_init+0xc8>)
    e336:	4798      	blx	r3
    e338:	200d      	movs	r0, #13
    e33a:	4b06      	ldr	r3, [pc, #24]	; (e354 <nm_drv_init+0xa8>)
    e33c:	4798      	blx	r3
		goto ERR1;
    e33e:	e7ee      	b.n	e31e <nm_drv_init+0x72>
    e340:	0000e0b1 	.word	0x0000e0b1
    e344:	000187e8 	.word	0x000187e8
    e348:	00016be1 	.word	0x00016be1
    e34c:	0000dc91 	.word	0x0000dc91
    e350:	00018b2c 	.word	0x00018b2c
    e354:	00016c15 	.word	0x00016c15
    e358:	0000eaed 	.word	0x0000eaed
    e35c:	0000dea5 	.word	0x0000dea5
    e360:	0000dfad 	.word	0x0000dfad
    e364:	0000dc35 	.word	0x0000dc35
    e368:	00018a74 	.word	0x00018a74
    e36c:	000184b8 	.word	0x000184b8
    e370:	00018af0 	.word	0x00018af0
    e374:	00016cfd 	.word	0x00016cfd
    e378:	0000e0bd 	.word	0x0000e0bd
    e37c:	00018b10 	.word	0x00018b10

0000e380 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    e380:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    e382:	4b1c      	ldr	r3, [pc, #112]	; (e3f4 <nm_drv_deinit+0x74>)
    e384:	4798      	blx	r3
    e386:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e388:	d10b      	bne.n	e3a2 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    e38a:	2000      	movs	r0, #0
    e38c:	4b1a      	ldr	r3, [pc, #104]	; (e3f8 <nm_drv_deinit+0x78>)
    e38e:	4798      	blx	r3
    e390:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e392:	d114      	bne.n	e3be <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    e394:	4b19      	ldr	r3, [pc, #100]	; (e3fc <nm_drv_deinit+0x7c>)
    e396:	4798      	blx	r3
    e398:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e39a:	d11d      	bne.n	e3d8 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    e39c:	4b18      	ldr	r3, [pc, #96]	; (e400 <nm_drv_deinit+0x80>)
    e39e:	4798      	blx	r3
    e3a0:	e00b      	b.n	e3ba <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    e3a2:	2266      	movs	r2, #102	; 0x66
    e3a4:	32ff      	adds	r2, #255	; 0xff
    e3a6:	4917      	ldr	r1, [pc, #92]	; (e404 <nm_drv_deinit+0x84>)
    e3a8:	4817      	ldr	r0, [pc, #92]	; (e408 <nm_drv_deinit+0x88>)
    e3aa:	4b18      	ldr	r3, [pc, #96]	; (e40c <nm_drv_deinit+0x8c>)
    e3ac:	4798      	blx	r3
    e3ae:	4818      	ldr	r0, [pc, #96]	; (e410 <nm_drv_deinit+0x90>)
    e3b0:	4b18      	ldr	r3, [pc, #96]	; (e414 <nm_drv_deinit+0x94>)
    e3b2:	4798      	blx	r3
    e3b4:	200d      	movs	r0, #13
    e3b6:	4b18      	ldr	r3, [pc, #96]	; (e418 <nm_drv_deinit+0x98>)
    e3b8:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    e3ba:	0020      	movs	r0, r4
    e3bc:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    e3be:	22b6      	movs	r2, #182	; 0xb6
    e3c0:	0052      	lsls	r2, r2, #1
    e3c2:	4910      	ldr	r1, [pc, #64]	; (e404 <nm_drv_deinit+0x84>)
    e3c4:	4810      	ldr	r0, [pc, #64]	; (e408 <nm_drv_deinit+0x88>)
    e3c6:	4b11      	ldr	r3, [pc, #68]	; (e40c <nm_drv_deinit+0x8c>)
    e3c8:	4798      	blx	r3
    e3ca:	4814      	ldr	r0, [pc, #80]	; (e41c <nm_drv_deinit+0x9c>)
    e3cc:	4b11      	ldr	r3, [pc, #68]	; (e414 <nm_drv_deinit+0x94>)
    e3ce:	4798      	blx	r3
    e3d0:	200d      	movs	r0, #13
    e3d2:	4b11      	ldr	r3, [pc, #68]	; (e418 <nm_drv_deinit+0x98>)
    e3d4:	4798      	blx	r3
		goto ERR1;
    e3d6:	e7f0      	b.n	e3ba <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    e3d8:	22b9      	movs	r2, #185	; 0xb9
    e3da:	0052      	lsls	r2, r2, #1
    e3dc:	4909      	ldr	r1, [pc, #36]	; (e404 <nm_drv_deinit+0x84>)
    e3de:	480a      	ldr	r0, [pc, #40]	; (e408 <nm_drv_deinit+0x88>)
    e3e0:	4b0a      	ldr	r3, [pc, #40]	; (e40c <nm_drv_deinit+0x8c>)
    e3e2:	4798      	blx	r3
    e3e4:	480e      	ldr	r0, [pc, #56]	; (e420 <nm_drv_deinit+0xa0>)
    e3e6:	4b0b      	ldr	r3, [pc, #44]	; (e414 <nm_drv_deinit+0x94>)
    e3e8:	4798      	blx	r3
    e3ea:	200d      	movs	r0, #13
    e3ec:	4b0a      	ldr	r3, [pc, #40]	; (e418 <nm_drv_deinit+0x98>)
    e3ee:	4798      	blx	r3
		goto ERR1;
    e3f0:	e7e3      	b.n	e3ba <nm_drv_deinit+0x3a>
    e3f2:	46c0      	nop			; (mov r8, r8)
    e3f4:	0000e025 	.word	0x0000e025
    e3f8:	0000f911 	.word	0x0000f911
    e3fc:	0000e0bd 	.word	0x0000e0bd
    e400:	0000ea99 	.word	0x0000ea99
    e404:	00018a80 	.word	0x00018a80
    e408:	000184b8 	.word	0x000184b8
    e40c:	00016be1 	.word	0x00016be1
    e410:	00018a90 	.word	0x00018a90
    e414:	00016cfd 	.word	0x00016cfd
    e418:	00016c15 	.word	0x00016c15
    e41c:	00018ab0 	.word	0x00018ab0
    e420:	00018ad4 	.word	0x00018ad4

0000e424 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    e424:	b500      	push	{lr}
    e426:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    e428:	ab01      	add	r3, sp, #4
    e42a:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    e42c:	2200      	movs	r2, #0
    e42e:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    e430:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e432:	0019      	movs	r1, r3
    e434:	2003      	movs	r0, #3
    e436:	4b02      	ldr	r3, [pc, #8]	; (e440 <nmi_spi_write+0x1c>)
    e438:	4798      	blx	r3
}
    e43a:	b005      	add	sp, #20
    e43c:	bd00      	pop	{pc}
    e43e:	46c0      	nop			; (mov r8, r8)
    e440:	0000cac5 	.word	0x0000cac5

0000e444 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    e444:	b570      	push	{r4, r5, r6, lr}
    e446:	b084      	sub	sp, #16
    e448:	ac08      	add	r4, sp, #32
    e44a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    e44c:	ac01      	add	r4, sp, #4
    e44e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    e450:	303f      	adds	r0, #63	; 0x3f
    e452:	b2c4      	uxtb	r4, r0
    e454:	2c0e      	cmp	r4, #14
    e456:	d900      	bls.n	e45a <spi_cmd+0x16>
    e458:	e084      	b.n	e564 <spi_cmd+0x120>
    e45a:	00a0      	lsls	r0, r4, #2
    e45c:	4c4f      	ldr	r4, [pc, #316]	; (e59c <spi_cmd+0x158>)
    e45e:	5820      	ldr	r0, [r4, r0]
    e460:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    e462:	ab01      	add	r3, sp, #4
    e464:	0c0a      	lsrs	r2, r1, #16
    e466:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e468:	0a0a      	lsrs	r2, r1, #8
    e46a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    e46c:	70d9      	strb	r1, [r3, #3]
		len = 5;
    e46e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    e470:	4b4b      	ldr	r3, [pc, #300]	; (e5a0 <spi_cmd+0x15c>)
    e472:	781b      	ldrb	r3, [r3, #0]
    e474:	2b00      	cmp	r3, #0
    e476:	d077      	beq.n	e568 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    e478:	3901      	subs	r1, #1
    e47a:	b2c9      	uxtb	r1, r1
    e47c:	e083      	b.n	e586 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    e47e:	0a0b      	lsrs	r3, r1, #8
    e480:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e482:	2d00      	cmp	r5, #0
    e484:	d107      	bne.n	e496 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    e486:	aa01      	add	r2, sp, #4
    e488:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    e48a:	ab01      	add	r3, sp, #4
    e48c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    e48e:	2200      	movs	r2, #0
    e490:	70da      	strb	r2, [r3, #3]
		len = 5;
    e492:	2105      	movs	r1, #5
		break;
    e494:	e7ec      	b.n	e470 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e496:	2280      	movs	r2, #128	; 0x80
    e498:	4252      	negs	r2, r2
    e49a:	4313      	orrs	r3, r2
    e49c:	aa01      	add	r2, sp, #4
    e49e:	7053      	strb	r3, [r2, #1]
    e4a0:	e7f3      	b.n	e48a <spi_cmd+0x46>
		bc[1] = 0x00;
    e4a2:	ab01      	add	r3, sp, #4
    e4a4:	2200      	movs	r2, #0
    e4a6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e4a8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e4aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    e4ac:	2105      	movs	r1, #5
		break;
    e4ae:	e7df      	b.n	e470 <spi_cmd+0x2c>
		bc[1] = 0x00;
    e4b0:	ab01      	add	r3, sp, #4
    e4b2:	2200      	movs	r2, #0
    e4b4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e4b6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e4b8:	70da      	strb	r2, [r3, #3]
		len = 5;
    e4ba:	2105      	movs	r1, #5
		break;
    e4bc:	e7d8      	b.n	e470 <spi_cmd+0x2c>
		bc[1] = 0xff;
    e4be:	ab01      	add	r3, sp, #4
    e4c0:	22ff      	movs	r2, #255	; 0xff
    e4c2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    e4c4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    e4c6:	70da      	strb	r2, [r3, #3]
		len = 5;
    e4c8:	2105      	movs	r1, #5
		break;
    e4ca:	e7d1      	b.n	e470 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e4cc:	aa01      	add	r2, sp, #4
    e4ce:	0c08      	lsrs	r0, r1, #16
    e4d0:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e4d2:	0a08      	lsrs	r0, r1, #8
    e4d4:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e4d6:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    e4d8:	0a19      	lsrs	r1, r3, #8
    e4da:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    e4dc:	7153      	strb	r3, [r2, #5]
		len = 7;
    e4de:	2107      	movs	r1, #7
		break;
    e4e0:	e7c6      	b.n	e470 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e4e2:	aa01      	add	r2, sp, #4
    e4e4:	0c08      	lsrs	r0, r1, #16
    e4e6:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e4e8:	0a08      	lsrs	r0, r1, #8
    e4ea:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e4ec:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    e4ee:	0c19      	lsrs	r1, r3, #16
    e4f0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    e4f2:	0a19      	lsrs	r1, r3, #8
    e4f4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    e4f6:	7193      	strb	r3, [r2, #6]
		len = 8;
    e4f8:	2108      	movs	r1, #8
		break;
    e4fa:	e7b9      	b.n	e470 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    e4fc:	0a0b      	lsrs	r3, r1, #8
    e4fe:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e500:	2d00      	cmp	r5, #0
    e502:	d10c      	bne.n	e51e <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    e504:	a801      	add	r0, sp, #4
    e506:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    e508:	ab01      	add	r3, sp, #4
    e50a:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    e50c:	0e11      	lsrs	r1, r2, #24
    e50e:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    e510:	0c11      	lsrs	r1, r2, #16
    e512:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    e514:	0a11      	lsrs	r1, r2, #8
    e516:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    e518:	719a      	strb	r2, [r3, #6]
		len = 8;
    e51a:	2108      	movs	r1, #8
		break;
    e51c:	e7a8      	b.n	e470 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e51e:	2080      	movs	r0, #128	; 0x80
    e520:	4240      	negs	r0, r0
    e522:	4303      	orrs	r3, r0
    e524:	a801      	add	r0, sp, #4
    e526:	7043      	strb	r3, [r0, #1]
    e528:	e7ee      	b.n	e508 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    e52a:	ab01      	add	r3, sp, #4
    e52c:	0c08      	lsrs	r0, r1, #16
    e52e:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e530:	0a08      	lsrs	r0, r1, #8
    e532:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    e534:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    e536:	0e11      	lsrs	r1, r2, #24
    e538:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    e53a:	0c11      	lsrs	r1, r2, #16
    e53c:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    e53e:	0a11      	lsrs	r1, r2, #8
    e540:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    e542:	71da      	strb	r2, [r3, #7]
		len = 9;
    e544:	2109      	movs	r1, #9
		break;
    e546:	e793      	b.n	e470 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    e548:	2290      	movs	r2, #144	; 0x90
    e54a:	0052      	lsls	r2, r2, #1
    e54c:	4915      	ldr	r1, [pc, #84]	; (e5a4 <spi_cmd+0x160>)
    e54e:	4816      	ldr	r0, [pc, #88]	; (e5a8 <spi_cmd+0x164>)
    e550:	4b16      	ldr	r3, [pc, #88]	; (e5ac <spi_cmd+0x168>)
    e552:	4798      	blx	r3
    e554:	4816      	ldr	r0, [pc, #88]	; (e5b0 <spi_cmd+0x16c>)
    e556:	4b17      	ldr	r3, [pc, #92]	; (e5b4 <spi_cmd+0x170>)
    e558:	4798      	blx	r3
    e55a:	200d      	movs	r0, #13
    e55c:	4b16      	ldr	r3, [pc, #88]	; (e5b8 <spi_cmd+0x174>)
    e55e:	4798      	blx	r3
			result = N_FAIL;
    e560:	2300      	movs	r3, #0
    e562:	e017      	b.n	e594 <spi_cmd+0x150>
	switch (cmd) {
    e564:	2300      	movs	r3, #0
    e566:	e015      	b.n	e594 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e568:	1e4e      	subs	r6, r1, #1
    e56a:	aa01      	add	r2, sp, #4
    e56c:	1995      	adds	r5, r2, r6
    e56e:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    e570:	4c12      	ldr	r4, [pc, #72]	; (e5bc <spi_cmd+0x178>)
    e572:	005b      	lsls	r3, r3, #1
    e574:	7810      	ldrb	r0, [r2, #0]
    e576:	4043      	eors	r3, r0
    e578:	5ce3      	ldrb	r3, [r4, r3]
    e57a:	3201      	adds	r2, #1
	while (len--)
    e57c:	42aa      	cmp	r2, r5
    e57e:	d1f8      	bne.n	e572 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e580:	005b      	lsls	r3, r3, #1
    e582:	aa01      	add	r2, sp, #4
    e584:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    e586:	b289      	uxth	r1, r1
    e588:	a801      	add	r0, sp, #4
    e58a:	4b0d      	ldr	r3, [pc, #52]	; (e5c0 <spi_cmd+0x17c>)
    e58c:	4798      	blx	r3
    e58e:	2301      	movs	r3, #1
    e590:	2800      	cmp	r0, #0
    e592:	d1d9      	bne.n	e548 <spi_cmd+0x104>
		}
	}

	return result;
}
    e594:	0018      	movs	r0, r3
    e596:	b004      	add	sp, #16
    e598:	bd70      	pop	{r4, r5, r6, pc}
    e59a:	46c0      	nop			; (mov r8, r8)
    e59c:	00018b3c 	.word	0x00018b3c
    e5a0:	20000304 	.word	0x20000304
    e5a4:	00018b7c 	.word	0x00018b7c
    e5a8:	000184b8 	.word	0x000184b8
    e5ac:	00016be1 	.word	0x00016be1
    e5b0:	0001900c 	.word	0x0001900c
    e5b4:	00016cfd 	.word	0x00016cfd
    e5b8:	00016c15 	.word	0x00016c15
    e5bc:	00018c08 	.word	0x00018c08
    e5c0:	0000e425 	.word	0x0000e425

0000e5c4 <nmi_spi_read>:
{
    e5c4:	b500      	push	{lr}
    e5c6:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    e5c8:	ab01      	add	r3, sp, #4
    e5ca:	2200      	movs	r2, #0
    e5cc:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    e5ce:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    e5d0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e5d2:	0019      	movs	r1, r3
    e5d4:	2003      	movs	r0, #3
    e5d6:	4b02      	ldr	r3, [pc, #8]	; (e5e0 <nmi_spi_read+0x1c>)
    e5d8:	4798      	blx	r3
}
    e5da:	b005      	add	sp, #20
    e5dc:	bd00      	pop	{pc}
    e5de:	46c0      	nop			; (mov r8, r8)
    e5e0:	0000cac5 	.word	0x0000cac5

0000e5e4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5e6:	46c6      	mov	lr, r8
    e5e8:	b500      	push	{lr}
    e5ea:	b082      	sub	sp, #8
    e5ec:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    e5ee:	28cf      	cmp	r0, #207	; 0xcf
    e5f0:	d02b      	beq.n	e64a <spi_cmd_rsp+0x66>
    e5f2:	0003      	movs	r3, r0
    e5f4:	333b      	adds	r3, #59	; 0x3b
    e5f6:	b2db      	uxtb	r3, r3
    e5f8:	2b01      	cmp	r3, #1
    e5fa:	d926      	bls.n	e64a <spi_cmd_rsp+0x66>
{
    e5fc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e5fe:	466b      	mov	r3, sp
    e600:	1dde      	adds	r6, r3, #7
    e602:	4b26      	ldr	r3, [pc, #152]	; (e69c <spi_cmd_rsp+0xb8>)
    e604:	4698      	mov	r8, r3
    e606:	2101      	movs	r1, #1
    e608:	0030      	movs	r0, r6
    e60a:	47c0      	blx	r8
    e60c:	1e05      	subs	r5, r0, #0
    e60e:	d125      	bne.n	e65c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    e610:	7833      	ldrb	r3, [r6, #0]
    e612:	42bb      	cmp	r3, r7
    e614:	d030      	beq.n	e678 <spi_cmd_rsp+0x94>
    e616:	3c01      	subs	r4, #1
    e618:	b2e4      	uxtb	r4, r4
    e61a:	2c00      	cmp	r4, #0
    e61c:	d1f3      	bne.n	e606 <spi_cmd_rsp+0x22>
    e61e:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e620:	466b      	mov	r3, sp
    e622:	1dde      	adds	r6, r3, #7
    e624:	4f1d      	ldr	r7, [pc, #116]	; (e69c <spi_cmd_rsp+0xb8>)
    e626:	2101      	movs	r1, #1
    e628:	0030      	movs	r0, r6
    e62a:	47b8      	blx	r7
    e62c:	2800      	cmp	r0, #0
    e62e:	d125      	bne.n	e67c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    e630:	7833      	ldrb	r3, [r6, #0]
    e632:	2b00      	cmp	r3, #0
    e634:	d02f      	beq.n	e696 <spi_cmd_rsp+0xb2>
    e636:	3c01      	subs	r4, #1
    e638:	b2e4      	uxtb	r4, r4
    e63a:	2c00      	cmp	r4, #0
    e63c:	d1f3      	bne.n	e626 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    e63e:	2501      	movs	r5, #1

_fail_:

	return result;
}
    e640:	0028      	movs	r0, r5
    e642:	b002      	add	sp, #8
    e644:	bc04      	pop	{r2}
    e646:	4690      	mov	r8, r2
    e648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e64a:	2101      	movs	r1, #1
    e64c:	466b      	mov	r3, sp
    e64e:	1dd8      	adds	r0, r3, #7
    e650:	4b12      	ldr	r3, [pc, #72]	; (e69c <spi_cmd_rsp+0xb8>)
    e652:	4798      	blx	r3
			result = N_FAIL;
    e654:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e656:	2800      	cmp	r0, #0
    e658:	d0d0      	beq.n	e5fc <spi_cmd_rsp+0x18>
    e65a:	e7f1      	b.n	e640 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e65c:	225c      	movs	r2, #92	; 0x5c
    e65e:	32ff      	adds	r2, #255	; 0xff
    e660:	490f      	ldr	r1, [pc, #60]	; (e6a0 <spi_cmd_rsp+0xbc>)
    e662:	4810      	ldr	r0, [pc, #64]	; (e6a4 <spi_cmd_rsp+0xc0>)
    e664:	4b10      	ldr	r3, [pc, #64]	; (e6a8 <spi_cmd_rsp+0xc4>)
    e666:	4798      	blx	r3
    e668:	4810      	ldr	r0, [pc, #64]	; (e6ac <spi_cmd_rsp+0xc8>)
    e66a:	4b11      	ldr	r3, [pc, #68]	; (e6b0 <spi_cmd_rsp+0xcc>)
    e66c:	4798      	blx	r3
    e66e:	200d      	movs	r0, #13
    e670:	4b10      	ldr	r3, [pc, #64]	; (e6b4 <spi_cmd_rsp+0xd0>)
    e672:	4798      	blx	r3
			result = N_FAIL;
    e674:	2500      	movs	r5, #0
			goto _fail_;
    e676:	e7e3      	b.n	e640 <spi_cmd_rsp+0x5c>
    e678:	240b      	movs	r4, #11
    e67a:	e7d1      	b.n	e620 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e67c:	226a      	movs	r2, #106	; 0x6a
    e67e:	32ff      	adds	r2, #255	; 0xff
    e680:	4907      	ldr	r1, [pc, #28]	; (e6a0 <spi_cmd_rsp+0xbc>)
    e682:	4808      	ldr	r0, [pc, #32]	; (e6a4 <spi_cmd_rsp+0xc0>)
    e684:	4b08      	ldr	r3, [pc, #32]	; (e6a8 <spi_cmd_rsp+0xc4>)
    e686:	4798      	blx	r3
    e688:	4808      	ldr	r0, [pc, #32]	; (e6ac <spi_cmd_rsp+0xc8>)
    e68a:	4b09      	ldr	r3, [pc, #36]	; (e6b0 <spi_cmd_rsp+0xcc>)
    e68c:	4798      	blx	r3
    e68e:	200d      	movs	r0, #13
    e690:	4b08      	ldr	r3, [pc, #32]	; (e6b4 <spi_cmd_rsp+0xd0>)
    e692:	4798      	blx	r3
			goto _fail_;
    e694:	e7d4      	b.n	e640 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    e696:	2501      	movs	r5, #1
    e698:	e7d2      	b.n	e640 <spi_cmd_rsp+0x5c>
    e69a:	46c0      	nop			; (mov r8, r8)
    e69c:	0000e5c5 	.word	0x0000e5c5
    e6a0:	00018b94 	.word	0x00018b94
    e6a4:	000184b8 	.word	0x000184b8
    e6a8:	00016be1 	.word	0x00016be1
    e6ac:	00019038 	.word	0x00019038
    e6b0:	00016cfd 	.word	0x00016cfd
    e6b4:	00016c15 	.word	0x00016c15

0000e6b8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    e6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6ba:	46de      	mov	lr, fp
    e6bc:	4657      	mov	r7, sl
    e6be:	464e      	mov	r6, r9
    e6c0:	4645      	mov	r5, r8
    e6c2:	b5e0      	push	{r5, r6, r7, lr}
    e6c4:	b087      	sub	sp, #28
    e6c6:	9001      	str	r0, [sp, #4]
    e6c8:	4689      	mov	r9, r1
    e6ca:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    e6cc:	2300      	movs	r3, #0
    e6ce:	469a      	mov	sl, r3
    e6d0:	2380      	movs	r3, #128	; 0x80
    e6d2:	019b      	lsls	r3, r3, #6
    e6d4:	469b      	mov	fp, r3
    e6d6:	466a      	mov	r2, sp
    e6d8:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e6da:	4b3c      	ldr	r3, [pc, #240]	; (e7cc <spi_data_read+0x114>)
    e6dc:	4698      	mov	r8, r3
    e6de:	e02f      	b.n	e740 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    e6e0:	22be      	movs	r2, #190	; 0xbe
    e6e2:	0092      	lsls	r2, r2, #2
    e6e4:	493a      	ldr	r1, [pc, #232]	; (e7d0 <spi_data_read+0x118>)
    e6e6:	483b      	ldr	r0, [pc, #236]	; (e7d4 <spi_data_read+0x11c>)
    e6e8:	4b3b      	ldr	r3, [pc, #236]	; (e7d8 <spi_data_read+0x120>)
    e6ea:	4798      	blx	r3
    e6ec:	483b      	ldr	r0, [pc, #236]	; (e7dc <spi_data_read+0x124>)
    e6ee:	4b3c      	ldr	r3, [pc, #240]	; (e7e0 <spi_data_read+0x128>)
    e6f0:	4798      	blx	r3
    e6f2:	200d      	movs	r0, #13
    e6f4:	4b3b      	ldr	r3, [pc, #236]	; (e7e4 <spi_data_read+0x12c>)
    e6f6:	4798      	blx	r3
    e6f8:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    e6fa:	0028      	movs	r0, r5
    e6fc:	b007      	add	sp, #28
    e6fe:	bc3c      	pop	{r2, r3, r4, r5}
    e700:	4690      	mov	r8, r2
    e702:	4699      	mov	r9, r3
    e704:	46a2      	mov	sl, r4
    e706:	46ab      	mov	fp, r5
    e708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    e70a:	2c00      	cmp	r4, #0
    e70c:	dd2e      	ble.n	e76c <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    e70e:	9b01      	ldr	r3, [sp, #4]
    e710:	4453      	add	r3, sl
    e712:	0018      	movs	r0, r3
    e714:	0039      	movs	r1, r7
    e716:	4b2d      	ldr	r3, [pc, #180]	; (e7cc <spi_data_read+0x114>)
    e718:	4798      	blx	r3
    e71a:	1e04      	subs	r4, r0, #0
    e71c:	d134      	bne.n	e788 <spi_data_read+0xd0>
		if(!clockless)
    e71e:	9b02      	ldr	r3, [sp, #8]
    e720:	2b00      	cmp	r3, #0
    e722:	d103      	bne.n	e72c <spi_data_read+0x74>
			if (!gu8Crc_off) {
    e724:	4b30      	ldr	r3, [pc, #192]	; (e7e8 <spi_data_read+0x130>)
    e726:	781b      	ldrb	r3, [r3, #0]
    e728:	2b00      	cmp	r3, #0
    e72a:	d039      	beq.n	e7a0 <spi_data_read+0xe8>
		ix += nbytes;
    e72c:	4653      	mov	r3, sl
    e72e:	18fb      	adds	r3, r7, r3
    e730:	b21b      	sxth	r3, r3
    e732:	469a      	mov	sl, r3
		sz -= nbytes;
    e734:	464b      	mov	r3, r9
    e736:	1bdf      	subs	r7, r3, r7
    e738:	b2bb      	uxth	r3, r7
    e73a:	4699      	mov	r9, r3
	} while (sz);
    e73c:	2b00      	cmp	r3, #0
    e73e:	d043      	beq.n	e7c8 <spi_data_read+0x110>
    e740:	464f      	mov	r7, r9
    e742:	45d9      	cmp	r9, fp
    e744:	d901      	bls.n	e74a <spi_data_read+0x92>
    e746:	466b      	mov	r3, sp
    e748:	89df      	ldrh	r7, [r3, #14]
    e74a:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    e74c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e74e:	ab04      	add	r3, sp, #16
    e750:	1cde      	adds	r6, r3, #3
    e752:	2101      	movs	r1, #1
    e754:	0030      	movs	r0, r6
    e756:	47c0      	blx	r8
    e758:	1e05      	subs	r5, r0, #0
    e75a:	d1c1      	bne.n	e6e0 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    e75c:	7833      	ldrb	r3, [r6, #0]
    e75e:	091b      	lsrs	r3, r3, #4
    e760:	2b0f      	cmp	r3, #15
    e762:	d0d2      	beq.n	e70a <spi_data_read+0x52>
    e764:	3c01      	subs	r4, #1
    e766:	b224      	sxth	r4, r4
		} while (retry--);
    e768:	1c63      	adds	r3, r4, #1
    e76a:	d1f2      	bne.n	e752 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    e76c:	22c1      	movs	r2, #193	; 0xc1
    e76e:	0092      	lsls	r2, r2, #2
    e770:	4917      	ldr	r1, [pc, #92]	; (e7d0 <spi_data_read+0x118>)
    e772:	4818      	ldr	r0, [pc, #96]	; (e7d4 <spi_data_read+0x11c>)
    e774:	4c18      	ldr	r4, [pc, #96]	; (e7d8 <spi_data_read+0x120>)
    e776:	47a0      	blx	r4
    e778:	ab04      	add	r3, sp, #16
    e77a:	78d9      	ldrb	r1, [r3, #3]
    e77c:	481b      	ldr	r0, [pc, #108]	; (e7ec <spi_data_read+0x134>)
    e77e:	47a0      	blx	r4
    e780:	200d      	movs	r0, #13
    e782:	4b18      	ldr	r3, [pc, #96]	; (e7e4 <spi_data_read+0x12c>)
    e784:	4798      	blx	r3
			break;
    e786:	e7b8      	b.n	e6fa <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    e788:	4a19      	ldr	r2, [pc, #100]	; (e7f0 <spi_data_read+0x138>)
    e78a:	4911      	ldr	r1, [pc, #68]	; (e7d0 <spi_data_read+0x118>)
    e78c:	4811      	ldr	r0, [pc, #68]	; (e7d4 <spi_data_read+0x11c>)
    e78e:	4b12      	ldr	r3, [pc, #72]	; (e7d8 <spi_data_read+0x120>)
    e790:	4798      	blx	r3
    e792:	4818      	ldr	r0, [pc, #96]	; (e7f4 <spi_data_read+0x13c>)
    e794:	4b12      	ldr	r3, [pc, #72]	; (e7e0 <spi_data_read+0x128>)
    e796:	4798      	blx	r3
    e798:	200d      	movs	r0, #13
    e79a:	4b12      	ldr	r3, [pc, #72]	; (e7e4 <spi_data_read+0x12c>)
    e79c:	4798      	blx	r3
			break;
    e79e:	e7ac      	b.n	e6fa <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    e7a0:	2102      	movs	r1, #2
    e7a2:	a805      	add	r0, sp, #20
    e7a4:	4b09      	ldr	r3, [pc, #36]	; (e7cc <spi_data_read+0x114>)
    e7a6:	4798      	blx	r3
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d0bf      	beq.n	e72c <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    e7ac:	22c6      	movs	r2, #198	; 0xc6
    e7ae:	0092      	lsls	r2, r2, #2
    e7b0:	4907      	ldr	r1, [pc, #28]	; (e7d0 <spi_data_read+0x118>)
    e7b2:	4808      	ldr	r0, [pc, #32]	; (e7d4 <spi_data_read+0x11c>)
    e7b4:	4b08      	ldr	r3, [pc, #32]	; (e7d8 <spi_data_read+0x120>)
    e7b6:	4798      	blx	r3
    e7b8:	480f      	ldr	r0, [pc, #60]	; (e7f8 <spi_data_read+0x140>)
    e7ba:	4b09      	ldr	r3, [pc, #36]	; (e7e0 <spi_data_read+0x128>)
    e7bc:	4798      	blx	r3
    e7be:	200d      	movs	r0, #13
    e7c0:	4b08      	ldr	r3, [pc, #32]	; (e7e4 <spi_data_read+0x12c>)
    e7c2:	4798      	blx	r3
					result = N_FAIL;
    e7c4:	0025      	movs	r5, r4
					break;
    e7c6:	e798      	b.n	e6fa <spi_data_read+0x42>
    e7c8:	2501      	movs	r5, #1
    e7ca:	e796      	b.n	e6fa <spi_data_read+0x42>
    e7cc:	0000e5c5 	.word	0x0000e5c5
    e7d0:	00018ba0 	.word	0x00018ba0
    e7d4:	000184b8 	.word	0x000184b8
    e7d8:	00016be1 	.word	0x00016be1
    e7dc:	0001906c 	.word	0x0001906c
    e7e0:	00016cfd 	.word	0x00016cfd
    e7e4:	00016c15 	.word	0x00016c15
    e7e8:	20000304 	.word	0x20000304
    e7ec:	000190a0 	.word	0x000190a0
    e7f0:	0000030d 	.word	0x0000030d
    e7f4:	000190d0 	.word	0x000190d0
    e7f8:	00019100 	.word	0x00019100

0000e7fc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7fe:	46d6      	mov	lr, sl
    e800:	464f      	mov	r7, r9
    e802:	4646      	mov	r6, r8
    e804:	b5c0      	push	{r6, r7, lr}
    e806:	b086      	sub	sp, #24
    e808:	9003      	str	r0, [sp, #12]
    e80a:	9104      	str	r1, [sp, #16]
    e80c:	2830      	cmp	r0, #48	; 0x30
    e80e:	d80f      	bhi.n	e830 <spi_write_reg+0x34>
    e810:	4b30      	ldr	r3, [pc, #192]	; (e8d4 <spi_write_reg+0xd8>)
    e812:	781f      	ldrb	r7, [r3, #0]
    e814:	b2fb      	uxtb	r3, r7
    e816:	9305      	str	r3, [sp, #20]
    e818:	2300      	movs	r3, #0
    e81a:	2230      	movs	r2, #48	; 0x30
    e81c:	9903      	ldr	r1, [sp, #12]
    e81e:	428a      	cmp	r2, r1
    e820:	415b      	adcs	r3, r3
    e822:	b2db      	uxtb	r3, r3
    e824:	469a      	mov	sl, r3
    e826:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e828:	4b2b      	ldr	r3, [pc, #172]	; (e8d8 <spi_write_reg+0xdc>)
    e82a:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e82c:	46d1      	mov	r9, sl
    e82e:	e033      	b.n	e898 <spi_write_reg+0x9c>
    e830:	4b2a      	ldr	r3, [pc, #168]	; (e8dc <spi_write_reg+0xe0>)
    e832:	781f      	ldrb	r7, [r3, #0]
    e834:	e7ee      	b.n	e814 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    e836:	9805      	ldr	r0, [sp, #20]
    e838:	4b29      	ldr	r3, [pc, #164]	; (e8e0 <spi_write_reg+0xe4>)
    e83a:	4798      	blx	r3
    e83c:	0004      	movs	r4, r0
	if (result != N_OK) {
    e83e:	2801      	cmp	r0, #1
    e840:	d041      	beq.n	e8c6 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e842:	4a28      	ldr	r2, [pc, #160]	; (e8e4 <spi_write_reg+0xe8>)
    e844:	4928      	ldr	r1, [pc, #160]	; (e8e8 <spi_write_reg+0xec>)
    e846:	4829      	ldr	r0, [pc, #164]	; (e8ec <spi_write_reg+0xf0>)
    e848:	4e29      	ldr	r6, [pc, #164]	; (e8f0 <spi_write_reg+0xf4>)
    e84a:	47b0      	blx	r6
    e84c:	9903      	ldr	r1, [sp, #12]
    e84e:	4829      	ldr	r0, [pc, #164]	; (e8f4 <spi_write_reg+0xf8>)
    e850:	47b0      	blx	r6
    e852:	200d      	movs	r0, #13
    e854:	4b28      	ldr	r3, [pc, #160]	; (e8f8 <spi_write_reg+0xfc>)
    e856:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    e858:	2001      	movs	r0, #1
    e85a:	4e28      	ldr	r6, [pc, #160]	; (e8fc <spi_write_reg+0x100>)
    e85c:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e85e:	2300      	movs	r3, #0
    e860:	9300      	str	r3, [sp, #0]
    e862:	2200      	movs	r2, #0
    e864:	2100      	movs	r1, #0
    e866:	20cf      	movs	r0, #207	; 0xcf
    e868:	4f1b      	ldr	r7, [pc, #108]	; (e8d8 <spi_write_reg+0xdc>)
    e86a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e86c:	20cf      	movs	r0, #207	; 0xcf
    e86e:	4b1c      	ldr	r3, [pc, #112]	; (e8e0 <spi_write_reg+0xe4>)
    e870:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    e872:	22ea      	movs	r2, #234	; 0xea
    e874:	0092      	lsls	r2, r2, #2
    e876:	491c      	ldr	r1, [pc, #112]	; (e8e8 <spi_write_reg+0xec>)
    e878:	481c      	ldr	r0, [pc, #112]	; (e8ec <spi_write_reg+0xf0>)
    e87a:	4f1d      	ldr	r7, [pc, #116]	; (e8f0 <spi_write_reg+0xf4>)
    e87c:	47b8      	blx	r7
    e87e:	9b04      	ldr	r3, [sp, #16]
    e880:	9a03      	ldr	r2, [sp, #12]
    e882:	0029      	movs	r1, r5
    e884:	481e      	ldr	r0, [pc, #120]	; (e900 <spi_write_reg+0x104>)
    e886:	47b8      	blx	r7
    e888:	200d      	movs	r0, #13
    e88a:	4b1b      	ldr	r3, [pc, #108]	; (e8f8 <spi_write_reg+0xfc>)
    e88c:	4798      	blx	r3
		nm_bsp_sleep(1);
    e88e:	2001      	movs	r0, #1
    e890:	47b0      	blx	r6
    e892:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e894:	2d00      	cmp	r5, #0
    e896:	d016      	beq.n	e8c6 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e898:	464b      	mov	r3, r9
    e89a:	9300      	str	r3, [sp, #0]
    e89c:	2304      	movs	r3, #4
    e89e:	9a04      	ldr	r2, [sp, #16]
    e8a0:	9f03      	ldr	r7, [sp, #12]
    e8a2:	0039      	movs	r1, r7
    e8a4:	9805      	ldr	r0, [sp, #20]
    e8a6:	47c0      	blx	r8
    e8a8:	0004      	movs	r4, r0
	if (result != N_OK) {
    e8aa:	2801      	cmp	r0, #1
    e8ac:	d0c3      	beq.n	e836 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    e8ae:	4a15      	ldr	r2, [pc, #84]	; (e904 <spi_write_reg+0x108>)
    e8b0:	490d      	ldr	r1, [pc, #52]	; (e8e8 <spi_write_reg+0xec>)
    e8b2:	480e      	ldr	r0, [pc, #56]	; (e8ec <spi_write_reg+0xf0>)
    e8b4:	4e0e      	ldr	r6, [pc, #56]	; (e8f0 <spi_write_reg+0xf4>)
    e8b6:	47b0      	blx	r6
    e8b8:	0039      	movs	r1, r7
    e8ba:	4813      	ldr	r0, [pc, #76]	; (e908 <spi_write_reg+0x10c>)
    e8bc:	47b0      	blx	r6
    e8be:	200d      	movs	r0, #13
    e8c0:	4b0d      	ldr	r3, [pc, #52]	; (e8f8 <spi_write_reg+0xfc>)
    e8c2:	4798      	blx	r3
		goto _FAIL_;
    e8c4:	e7c8      	b.n	e858 <spi_write_reg+0x5c>
	}

	return result;
}
    e8c6:	0020      	movs	r0, r4
    e8c8:	b006      	add	sp, #24
    e8ca:	bc1c      	pop	{r2, r3, r4}
    e8cc:	4690      	mov	r8, r2
    e8ce:	4699      	mov	r9, r3
    e8d0:	46a2      	mov	sl, r4
    e8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8d4:	00018b78 	.word	0x00018b78
    e8d8:	0000e445 	.word	0x0000e445
    e8dc:	00018b79 	.word	0x00018b79
    e8e0:	0000e5e5 	.word	0x0000e5e5
    e8e4:	00000395 	.word	0x00000395
    e8e8:	00018bc0 	.word	0x00018bc0
    e8ec:	000184b8 	.word	0x000184b8
    e8f0:	00016be1 	.word	0x00016be1
    e8f4:	000191f8 	.word	0x000191f8
    e8f8:	00016c15 	.word	0x00016c15
    e8fc:	0000c905 	.word	0x0000c905
    e900:	00019230 	.word	0x00019230
    e904:	0000038f 	.word	0x0000038f
    e908:	000191cc 	.word	0x000191cc

0000e90c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    e90c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e90e:	46de      	mov	lr, fp
    e910:	4657      	mov	r7, sl
    e912:	464e      	mov	r6, r9
    e914:	4645      	mov	r5, r8
    e916:	b5e0      	push	{r5, r6, r7, lr}
    e918:	b087      	sub	sp, #28
    e91a:	9002      	str	r0, [sp, #8]
    e91c:	468b      	mov	fp, r1
    e91e:	28ff      	cmp	r0, #255	; 0xff
    e920:	d80f      	bhi.n	e942 <spi_read_reg+0x36>
    e922:	4b41      	ldr	r3, [pc, #260]	; (ea28 <spi_read_reg+0x11c>)
    e924:	781f      	ldrb	r7, [r3, #0]
    e926:	b2fb      	uxtb	r3, r7
    e928:	9303      	str	r3, [sp, #12]
    e92a:	2300      	movs	r3, #0
    e92c:	22ff      	movs	r2, #255	; 0xff
    e92e:	9902      	ldr	r1, [sp, #8]
    e930:	428a      	cmp	r2, r1
    e932:	415b      	adcs	r3, r3
    e934:	b2db      	uxtb	r3, r3
    e936:	469a      	mov	sl, r3
    e938:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e93a:	4b3c      	ldr	r3, [pc, #240]	; (ea2c <spi_read_reg+0x120>)
    e93c:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    e93e:	46d1      	mov	r9, sl
    e940:	e031      	b.n	e9a6 <spi_read_reg+0x9a>
    e942:	4b3b      	ldr	r3, [pc, #236]	; (ea30 <spi_read_reg+0x124>)
    e944:	781f      	ldrb	r7, [r3, #0]
    e946:	e7ee      	b.n	e926 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    e948:	9803      	ldr	r0, [sp, #12]
    e94a:	4b3a      	ldr	r3, [pc, #232]	; (ea34 <spi_read_reg+0x128>)
    e94c:	4798      	blx	r3
    e94e:	0004      	movs	r4, r0
	if (result != N_OK) {
    e950:	2801      	cmp	r0, #1
    e952:	d040      	beq.n	e9d6 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    e954:	4a38      	ldr	r2, [pc, #224]	; (ea38 <spi_read_reg+0x12c>)
    e956:	4939      	ldr	r1, [pc, #228]	; (ea3c <spi_read_reg+0x130>)
    e958:	4839      	ldr	r0, [pc, #228]	; (ea40 <spi_read_reg+0x134>)
    e95a:	4e3a      	ldr	r6, [pc, #232]	; (ea44 <spi_read_reg+0x138>)
    e95c:	47b0      	blx	r6
    e95e:	9902      	ldr	r1, [sp, #8]
    e960:	4839      	ldr	r0, [pc, #228]	; (ea48 <spi_read_reg+0x13c>)
    e962:	47b0      	blx	r6
    e964:	200d      	movs	r0, #13
    e966:	4b39      	ldr	r3, [pc, #228]	; (ea4c <spi_read_reg+0x140>)
    e968:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    e96a:	2001      	movs	r0, #1
    e96c:	4e38      	ldr	r6, [pc, #224]	; (ea50 <spi_read_reg+0x144>)
    e96e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e970:	2300      	movs	r3, #0
    e972:	9300      	str	r3, [sp, #0]
    e974:	2200      	movs	r2, #0
    e976:	2100      	movs	r1, #0
    e978:	20cf      	movs	r0, #207	; 0xcf
    e97a:	4f2c      	ldr	r7, [pc, #176]	; (ea2c <spi_read_reg+0x120>)
    e97c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e97e:	20cf      	movs	r0, #207	; 0xcf
    e980:	4b2c      	ldr	r3, [pc, #176]	; (ea34 <spi_read_reg+0x128>)
    e982:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    e984:	4a33      	ldr	r2, [pc, #204]	; (ea54 <spi_read_reg+0x148>)
    e986:	492d      	ldr	r1, [pc, #180]	; (ea3c <spi_read_reg+0x130>)
    e988:	482d      	ldr	r0, [pc, #180]	; (ea40 <spi_read_reg+0x134>)
    e98a:	4f2e      	ldr	r7, [pc, #184]	; (ea44 <spi_read_reg+0x138>)
    e98c:	47b8      	blx	r7
    e98e:	9a02      	ldr	r2, [sp, #8]
    e990:	0029      	movs	r1, r5
    e992:	4831      	ldr	r0, [pc, #196]	; (ea58 <spi_read_reg+0x14c>)
    e994:	47b8      	blx	r7
    e996:	200d      	movs	r0, #13
    e998:	4b2c      	ldr	r3, [pc, #176]	; (ea4c <spi_read_reg+0x140>)
    e99a:	4798      	blx	r3
		nm_bsp_sleep(1);
    e99c:	2001      	movs	r0, #1
    e99e:	47b0      	blx	r6
    e9a0:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e9a2:	2d00      	cmp	r5, #0
    e9a4:	d038      	beq.n	ea18 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e9a6:	464b      	mov	r3, r9
    e9a8:	9300      	str	r3, [sp, #0]
    e9aa:	2304      	movs	r3, #4
    e9ac:	2200      	movs	r2, #0
    e9ae:	9f02      	ldr	r7, [sp, #8]
    e9b0:	0039      	movs	r1, r7
    e9b2:	9803      	ldr	r0, [sp, #12]
    e9b4:	47c0      	blx	r8
    e9b6:	0004      	movs	r4, r0
	if (result != N_OK) {
    e9b8:	2801      	cmp	r0, #1
    e9ba:	d0c5      	beq.n	e948 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    e9bc:	2282      	movs	r2, #130	; 0x82
    e9be:	00d2      	lsls	r2, r2, #3
    e9c0:	491e      	ldr	r1, [pc, #120]	; (ea3c <spi_read_reg+0x130>)
    e9c2:	481f      	ldr	r0, [pc, #124]	; (ea40 <spi_read_reg+0x134>)
    e9c4:	4e1f      	ldr	r6, [pc, #124]	; (ea44 <spi_read_reg+0x138>)
    e9c6:	47b0      	blx	r6
    e9c8:	0039      	movs	r1, r7
    e9ca:	4824      	ldr	r0, [pc, #144]	; (ea5c <spi_read_reg+0x150>)
    e9cc:	47b0      	blx	r6
    e9ce:	200d      	movs	r0, #13
    e9d0:	4b1e      	ldr	r3, [pc, #120]	; (ea4c <spi_read_reg+0x140>)
    e9d2:	4798      	blx	r3
		goto _FAIL_;
    e9d4:	e7c9      	b.n	e96a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    e9d6:	464a      	mov	r2, r9
    e9d8:	2104      	movs	r1, #4
    e9da:	a805      	add	r0, sp, #20
    e9dc:	4b20      	ldr	r3, [pc, #128]	; (ea60 <spi_read_reg+0x154>)
    e9de:	4798      	blx	r3
    e9e0:	0004      	movs	r4, r0
	if (result != N_OK) {
    e9e2:	2801      	cmp	r0, #1
    e9e4:	d00b      	beq.n	e9fe <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    e9e6:	4a1f      	ldr	r2, [pc, #124]	; (ea64 <spi_read_reg+0x158>)
    e9e8:	4914      	ldr	r1, [pc, #80]	; (ea3c <spi_read_reg+0x130>)
    e9ea:	4815      	ldr	r0, [pc, #84]	; (ea40 <spi_read_reg+0x134>)
    e9ec:	4b15      	ldr	r3, [pc, #84]	; (ea44 <spi_read_reg+0x138>)
    e9ee:	4798      	blx	r3
    e9f0:	481d      	ldr	r0, [pc, #116]	; (ea68 <spi_read_reg+0x15c>)
    e9f2:	4b1e      	ldr	r3, [pc, #120]	; (ea6c <spi_read_reg+0x160>)
    e9f4:	4798      	blx	r3
    e9f6:	200d      	movs	r0, #13
    e9f8:	4b14      	ldr	r3, [pc, #80]	; (ea4c <spi_read_reg+0x140>)
    e9fa:	4798      	blx	r3
		goto _FAIL_;
    e9fc:	e7b5      	b.n	e96a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    e9fe:	aa05      	add	r2, sp, #20
    ea00:	7853      	ldrb	r3, [r2, #1]
    ea02:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    ea04:	7891      	ldrb	r1, [r2, #2]
    ea06:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    ea08:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    ea0a:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    ea0c:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    ea0e:	78d2      	ldrb	r2, [r2, #3]
    ea10:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    ea12:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    ea14:	465a      	mov	r2, fp
    ea16:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    ea18:	0020      	movs	r0, r4
    ea1a:	b007      	add	sp, #28
    ea1c:	bc3c      	pop	{r2, r3, r4, r5}
    ea1e:	4690      	mov	r8, r2
    ea20:	4699      	mov	r9, r3
    ea22:	46a2      	mov	sl, r4
    ea24:	46ab      	mov	fp, r5
    ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea28:	00018b7a 	.word	0x00018b7a
    ea2c:	0000e445 	.word	0x0000e445
    ea30:	00018b7b 	.word	0x00018b7b
    ea34:	0000e5e5 	.word	0x0000e5e5
    ea38:	00000416 	.word	0x00000416
    ea3c:	00018be0 	.word	0x00018be0
    ea40:	000184b8 	.word	0x000184b8
    ea44:	00016be1 	.word	0x00016be1
    ea48:	00019160 	.word	0x00019160
    ea4c:	00016c15 	.word	0x00016c15
    ea50:	0000c905 	.word	0x0000c905
    ea54:	00000435 	.word	0x00000435
    ea58:	000191b4 	.word	0x000191b4
    ea5c:	00019134 	.word	0x00019134
    ea60:	0000e6b9 	.word	0x0000e6b9
    ea64:	0000041d 	.word	0x0000041d
    ea68:	00019194 	.word	0x00019194
    ea6c:	00016cfd 	.word	0x00016cfd

0000ea70 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    ea70:	b510      	push	{r4, lr}
    ea72:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ea74:	2300      	movs	r3, #0
    ea76:	9300      	str	r3, [sp, #0]
    ea78:	2200      	movs	r2, #0
    ea7a:	2100      	movs	r1, #0
    ea7c:	20cf      	movs	r0, #207	; 0xcf
    ea7e:	4c04      	ldr	r4, [pc, #16]	; (ea90 <nm_spi_reset+0x20>)
    ea80:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    ea82:	20cf      	movs	r0, #207	; 0xcf
    ea84:	4b03      	ldr	r3, [pc, #12]	; (ea94 <nm_spi_reset+0x24>)
    ea86:	4798      	blx	r3
	return M2M_SUCCESS;
}
    ea88:	2000      	movs	r0, #0
    ea8a:	b002      	add	sp, #8
    ea8c:	bd10      	pop	{r4, pc}
    ea8e:	46c0      	nop			; (mov r8, r8)
    ea90:	0000e445 	.word	0x0000e445
    ea94:	0000e5e5 	.word	0x0000e5e5

0000ea98 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    ea98:	2200      	movs	r2, #0
    ea9a:	4b02      	ldr	r3, [pc, #8]	; (eaa4 <nm_spi_deinit+0xc>)
    ea9c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    ea9e:	2000      	movs	r0, #0
    eaa0:	4770      	bx	lr
    eaa2:	46c0      	nop			; (mov r8, r8)
    eaa4:	20000304 	.word	0x20000304

0000eaa8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    eaa8:	b500      	push	{lr}
    eaaa:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    eaac:	a901      	add	r1, sp, #4
    eaae:	4b02      	ldr	r3, [pc, #8]	; (eab8 <nm_spi_read_reg+0x10>)
    eab0:	4798      	blx	r3

	return u32Val;
}
    eab2:	9801      	ldr	r0, [sp, #4]
    eab4:	b003      	add	sp, #12
    eab6:	bd00      	pop	{pc}
    eab8:	0000e90d 	.word	0x0000e90d

0000eabc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    eabc:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    eabe:	4b04      	ldr	r3, [pc, #16]	; (ead0 <nm_spi_read_reg_with_ret+0x14>)
    eac0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    eac2:	2300      	movs	r3, #0
    eac4:	2801      	cmp	r0, #1
    eac6:	d101      	bne.n	eacc <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    eac8:	0018      	movs	r0, r3
    eaca:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    eacc:	3b06      	subs	r3, #6
    eace:	e7fb      	b.n	eac8 <nm_spi_read_reg_with_ret+0xc>
    ead0:	0000e90d 	.word	0x0000e90d

0000ead4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ead4:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ead6:	4b04      	ldr	r3, [pc, #16]	; (eae8 <nm_spi_write_reg+0x14>)
    ead8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    eada:	2300      	movs	r3, #0
    eadc:	2801      	cmp	r0, #1
    eade:	d101      	bne.n	eae4 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    eae0:	0018      	movs	r0, r3
    eae2:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    eae4:	3b06      	subs	r3, #6
    eae6:	e7fb      	b.n	eae0 <nm_spi_write_reg+0xc>
    eae8:	0000e7fd 	.word	0x0000e7fd

0000eaec <nm_spi_init>:
{
    eaec:	b510      	push	{r4, lr}
    eaee:	b082      	sub	sp, #8
	uint32 reg = 0;
    eaf0:	2300      	movs	r3, #0
    eaf2:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    eaf4:	4a35      	ldr	r2, [pc, #212]	; (ebcc <nm_spi_init+0xe0>)
    eaf6:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    eaf8:	4669      	mov	r1, sp
    eafa:	4835      	ldr	r0, [pc, #212]	; (ebd0 <nm_spi_init+0xe4>)
    eafc:	4b35      	ldr	r3, [pc, #212]	; (ebd4 <nm_spi_init+0xe8>)
    eafe:	4798      	blx	r3
    eb00:	2800      	cmp	r0, #0
    eb02:	d028      	beq.n	eb56 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    eb04:	4b31      	ldr	r3, [pc, #196]	; (ebcc <nm_spi_init+0xe0>)
    eb06:	781b      	ldrb	r3, [r3, #0]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d10d      	bne.n	eb28 <nm_spi_init+0x3c>
		reg &= ~0x70;
    eb0c:	337c      	adds	r3, #124	; 0x7c
    eb0e:	9900      	ldr	r1, [sp, #0]
    eb10:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    eb12:	3b2c      	subs	r3, #44	; 0x2c
    eb14:	4319      	orrs	r1, r3
    eb16:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    eb18:	482d      	ldr	r0, [pc, #180]	; (ebd0 <nm_spi_init+0xe4>)
    eb1a:	4b2f      	ldr	r3, [pc, #188]	; (ebd8 <nm_spi_init+0xec>)
    eb1c:	4798      	blx	r3
    eb1e:	1e04      	subs	r4, r0, #0
    eb20:	d03a      	beq.n	eb98 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    eb22:	2201      	movs	r2, #1
    eb24:	4b29      	ldr	r3, [pc, #164]	; (ebcc <nm_spi_init+0xe0>)
    eb26:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    eb28:	a901      	add	r1, sp, #4
    eb2a:	2080      	movs	r0, #128	; 0x80
    eb2c:	0140      	lsls	r0, r0, #5
    eb2e:	4b29      	ldr	r3, [pc, #164]	; (ebd4 <nm_spi_init+0xe8>)
    eb30:	4798      	blx	r3
    eb32:	2800      	cmp	r0, #0
    eb34:	d03c      	beq.n	ebb0 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    eb36:	4c26      	ldr	r4, [pc, #152]	; (ebd0 <nm_spi_init+0xe4>)
    eb38:	0020      	movs	r0, r4
    eb3a:	4b28      	ldr	r3, [pc, #160]	; (ebdc <nm_spi_init+0xf0>)
    eb3c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    eb3e:	2370      	movs	r3, #112	; 0x70
    eb40:	0001      	movs	r1, r0
    eb42:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    eb44:	2050      	movs	r0, #80	; 0x50
    eb46:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    eb48:	0020      	movs	r0, r4
    eb4a:	4b25      	ldr	r3, [pc, #148]	; (ebe0 <nm_spi_init+0xf4>)
    eb4c:	4798      	blx	r3
	return M2M_SUCCESS;
    eb4e:	2400      	movs	r4, #0
}
    eb50:	0020      	movs	r0, r4
    eb52:	b002      	add	sp, #8
    eb54:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    eb56:	2201      	movs	r2, #1
    eb58:	4b1c      	ldr	r3, [pc, #112]	; (ebcc <nm_spi_init+0xe0>)
    eb5a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    eb5c:	2298      	movs	r2, #152	; 0x98
    eb5e:	00d2      	lsls	r2, r2, #3
    eb60:	4920      	ldr	r1, [pc, #128]	; (ebe4 <nm_spi_init+0xf8>)
    eb62:	4821      	ldr	r0, [pc, #132]	; (ebe8 <nm_spi_init+0xfc>)
    eb64:	4b21      	ldr	r3, [pc, #132]	; (ebec <nm_spi_init+0x100>)
    eb66:	4798      	blx	r3
    eb68:	4821      	ldr	r0, [pc, #132]	; (ebf0 <nm_spi_init+0x104>)
    eb6a:	4b22      	ldr	r3, [pc, #136]	; (ebf4 <nm_spi_init+0x108>)
    eb6c:	4798      	blx	r3
    eb6e:	200d      	movs	r0, #13
    eb70:	4b21      	ldr	r3, [pc, #132]	; (ebf8 <nm_spi_init+0x10c>)
    eb72:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    eb74:	4669      	mov	r1, sp
    eb76:	4816      	ldr	r0, [pc, #88]	; (ebd0 <nm_spi_init+0xe4>)
    eb78:	4b16      	ldr	r3, [pc, #88]	; (ebd4 <nm_spi_init+0xe8>)
    eb7a:	4798      	blx	r3
    eb7c:	1e04      	subs	r4, r0, #0
    eb7e:	d1c1      	bne.n	eb04 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    eb80:	4a1e      	ldr	r2, [pc, #120]	; (ebfc <nm_spi_init+0x110>)
    eb82:	4918      	ldr	r1, [pc, #96]	; (ebe4 <nm_spi_init+0xf8>)
    eb84:	4818      	ldr	r0, [pc, #96]	; (ebe8 <nm_spi_init+0xfc>)
    eb86:	4b19      	ldr	r3, [pc, #100]	; (ebec <nm_spi_init+0x100>)
    eb88:	4798      	blx	r3
    eb8a:	481d      	ldr	r0, [pc, #116]	; (ec00 <nm_spi_init+0x114>)
    eb8c:	4b19      	ldr	r3, [pc, #100]	; (ebf4 <nm_spi_init+0x108>)
    eb8e:	4798      	blx	r3
    eb90:	200d      	movs	r0, #13
    eb92:	4b19      	ldr	r3, [pc, #100]	; (ebf8 <nm_spi_init+0x10c>)
    eb94:	4798      	blx	r3
			return 0;
    eb96:	e7db      	b.n	eb50 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    eb98:	4a1a      	ldr	r2, [pc, #104]	; (ec04 <nm_spi_init+0x118>)
    eb9a:	4912      	ldr	r1, [pc, #72]	; (ebe4 <nm_spi_init+0xf8>)
    eb9c:	4812      	ldr	r0, [pc, #72]	; (ebe8 <nm_spi_init+0xfc>)
    eb9e:	4b13      	ldr	r3, [pc, #76]	; (ebec <nm_spi_init+0x100>)
    eba0:	4798      	blx	r3
    eba2:	4819      	ldr	r0, [pc, #100]	; (ec08 <nm_spi_init+0x11c>)
    eba4:	4b13      	ldr	r3, [pc, #76]	; (ebf4 <nm_spi_init+0x108>)
    eba6:	4798      	blx	r3
    eba8:	200d      	movs	r0, #13
    ebaa:	4b13      	ldr	r3, [pc, #76]	; (ebf8 <nm_spi_init+0x10c>)
    ebac:	4798      	blx	r3
			return 0;
    ebae:	e7cf      	b.n	eb50 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ebb0:	4a16      	ldr	r2, [pc, #88]	; (ec0c <nm_spi_init+0x120>)
    ebb2:	490c      	ldr	r1, [pc, #48]	; (ebe4 <nm_spi_init+0xf8>)
    ebb4:	480c      	ldr	r0, [pc, #48]	; (ebe8 <nm_spi_init+0xfc>)
    ebb6:	4b0d      	ldr	r3, [pc, #52]	; (ebec <nm_spi_init+0x100>)
    ebb8:	4798      	blx	r3
    ebba:	4815      	ldr	r0, [pc, #84]	; (ec10 <nm_spi_init+0x124>)
    ebbc:	4b0d      	ldr	r3, [pc, #52]	; (ebf4 <nm_spi_init+0x108>)
    ebbe:	4798      	blx	r3
    ebc0:	200d      	movs	r0, #13
    ebc2:	4b0d      	ldr	r3, [pc, #52]	; (ebf8 <nm_spi_init+0x10c>)
    ebc4:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ebc6:	2406      	movs	r4, #6
    ebc8:	4264      	negs	r4, r4
    ebca:	e7c1      	b.n	eb50 <nm_spi_init+0x64>
    ebcc:	20000304 	.word	0x20000304
    ebd0:	0000e824 	.word	0x0000e824
    ebd4:	0000e90d 	.word	0x0000e90d
    ebd8:	0000e7fd 	.word	0x0000e7fd
    ebdc:	0000eaa9 	.word	0x0000eaa9
    ebe0:	0000ead5 	.word	0x0000ead5
    ebe4:	00018bfc 	.word	0x00018bfc
    ebe8:	000184b8 	.word	0x000184b8
    ebec:	00016be1 	.word	0x00016be1
    ebf0:	00018d08 	.word	0x00018d08
    ebf4:	00016cfd 	.word	0x00016cfd
    ebf8:	00016c15 	.word	0x00016c15
    ebfc:	000004c3 	.word	0x000004c3
    ec00:	00018d58 	.word	0x00018d58
    ec04:	000004cd 	.word	0x000004cd
    ec08:	00018d84 	.word	0x00018d84
    ec0c:	000004d7 	.word	0x000004d7
    ec10:	00018db8 	.word	0x00018db8

0000ec14 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec16:	46de      	mov	lr, fp
    ec18:	4657      	mov	r7, sl
    ec1a:	464e      	mov	r6, r9
    ec1c:	4645      	mov	r5, r8
    ec1e:	b5e0      	push	{r5, r6, r7, lr}
    ec20:	b087      	sub	sp, #28
    ec22:	9002      	str	r0, [sp, #8]
    ec24:	9103      	str	r1, [sp, #12]
    ec26:	0016      	movs	r6, r2
    ec28:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    ec2a:	2300      	movs	r3, #0
    ec2c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    ec2e:	2400      	movs	r4, #0
    ec30:	4b3e      	ldr	r3, [pc, #248]	; (ed2c <nm_spi_read_block+0x118>)
    ec32:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    ec34:	46a9      	mov	r9, r5
    ec36:	e037      	b.n	eca8 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    ec38:	2301      	movs	r3, #1
    ec3a:	469b      	mov	fp, r3
		size = 2;
    ec3c:	3601      	adds	r6, #1
    ec3e:	e035      	b.n	ecac <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    ec40:	20c8      	movs	r0, #200	; 0xc8
    ec42:	4b3b      	ldr	r3, [pc, #236]	; (ed30 <nm_spi_read_block+0x11c>)
    ec44:	4798      	blx	r3
	if (result != N_OK) {
    ec46:	2801      	cmp	r0, #1
    ec48:	d045      	beq.n	ecd6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    ec4a:	4a3a      	ldr	r2, [pc, #232]	; (ed34 <nm_spi_read_block+0x120>)
    ec4c:	493a      	ldr	r1, [pc, #232]	; (ed38 <nm_spi_read_block+0x124>)
    ec4e:	483b      	ldr	r0, [pc, #236]	; (ed3c <nm_spi_read_block+0x128>)
    ec50:	4f3b      	ldr	r7, [pc, #236]	; (ed40 <nm_spi_read_block+0x12c>)
    ec52:	47b8      	blx	r7
    ec54:	9902      	ldr	r1, [sp, #8]
    ec56:	483b      	ldr	r0, [pc, #236]	; (ed44 <nm_spi_read_block+0x130>)
    ec58:	47b8      	blx	r7
    ec5a:	200d      	movs	r0, #13
    ec5c:	4b3a      	ldr	r3, [pc, #232]	; (ed48 <nm_spi_read_block+0x134>)
    ec5e:	4798      	blx	r3
		nm_bsp_sleep(1);
    ec60:	2001      	movs	r0, #1
    ec62:	4f3a      	ldr	r7, [pc, #232]	; (ed4c <nm_spi_read_block+0x138>)
    ec64:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ec66:	9400      	str	r4, [sp, #0]
    ec68:	0023      	movs	r3, r4
    ec6a:	0022      	movs	r2, r4
    ec6c:	0021      	movs	r1, r4
    ec6e:	20cf      	movs	r0, #207	; 0xcf
    ec70:	4d2e      	ldr	r5, [pc, #184]	; (ed2c <nm_spi_read_block+0x118>)
    ec72:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    ec74:	20cf      	movs	r0, #207	; 0xcf
    ec76:	4b2e      	ldr	r3, [pc, #184]	; (ed30 <nm_spi_read_block+0x11c>)
    ec78:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ec7a:	4a35      	ldr	r2, [pc, #212]	; (ed50 <nm_spi_read_block+0x13c>)
    ec7c:	492e      	ldr	r1, [pc, #184]	; (ed38 <nm_spi_read_block+0x124>)
    ec7e:	482f      	ldr	r0, [pc, #188]	; (ed3c <nm_spi_read_block+0x128>)
    ec80:	4b2f      	ldr	r3, [pc, #188]	; (ed40 <nm_spi_read_block+0x12c>)
    ec82:	469a      	mov	sl, r3
    ec84:	4798      	blx	r3
    ec86:	0033      	movs	r3, r6
    ec88:	9a02      	ldr	r2, [sp, #8]
    ec8a:	4649      	mov	r1, r9
    ec8c:	4831      	ldr	r0, [pc, #196]	; (ed54 <nm_spi_read_block+0x140>)
    ec8e:	47d0      	blx	sl
    ec90:	200d      	movs	r0, #13
    ec92:	4b2d      	ldr	r3, [pc, #180]	; (ed48 <nm_spi_read_block+0x134>)
    ec94:	4798      	blx	r3
		nm_bsp_sleep(1);
    ec96:	2001      	movs	r0, #1
    ec98:	47b8      	blx	r7
    ec9a:	2301      	movs	r3, #1
    ec9c:	425b      	negs	r3, r3
    ec9e:	469c      	mov	ip, r3
    eca0:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    eca2:	464b      	mov	r3, r9
    eca4:	2b00      	cmp	r3, #0
    eca6:	d038      	beq.n	ed1a <nm_spi_read_block+0x106>
	if (size == 1)
    eca8:	2e01      	cmp	r6, #1
    ecaa:	d0c5      	beq.n	ec38 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    ecac:	9400      	str	r4, [sp, #0]
    ecae:	0033      	movs	r3, r6
    ecb0:	0022      	movs	r2, r4
    ecb2:	9d02      	ldr	r5, [sp, #8]
    ecb4:	0029      	movs	r1, r5
    ecb6:	20c8      	movs	r0, #200	; 0xc8
    ecb8:	47c0      	blx	r8
	if (result != N_OK) {
    ecba:	2801      	cmp	r0, #1
    ecbc:	d0c0      	beq.n	ec40 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    ecbe:	4a26      	ldr	r2, [pc, #152]	; (ed58 <nm_spi_read_block+0x144>)
    ecc0:	491d      	ldr	r1, [pc, #116]	; (ed38 <nm_spi_read_block+0x124>)
    ecc2:	481e      	ldr	r0, [pc, #120]	; (ed3c <nm_spi_read_block+0x128>)
    ecc4:	4f1e      	ldr	r7, [pc, #120]	; (ed40 <nm_spi_read_block+0x12c>)
    ecc6:	47b8      	blx	r7
    ecc8:	0029      	movs	r1, r5
    ecca:	4824      	ldr	r0, [pc, #144]	; (ed5c <nm_spi_read_block+0x148>)
    eccc:	47b8      	blx	r7
    ecce:	200d      	movs	r0, #13
    ecd0:	4b1d      	ldr	r3, [pc, #116]	; (ed48 <nm_spi_read_block+0x134>)
    ecd2:	4798      	blx	r3
    ecd4:	e7c4      	b.n	ec60 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    ecd6:	465b      	mov	r3, fp
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d016      	beq.n	ed0a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    ecdc:	af05      	add	r7, sp, #20
    ecde:	0022      	movs	r2, r4
    ece0:	0031      	movs	r1, r6
    ece2:	0038      	movs	r0, r7
    ece4:	4b1e      	ldr	r3, [pc, #120]	; (ed60 <nm_spi_read_block+0x14c>)
    ece6:	4798      	blx	r3
		buf[0] = tmp[0];
    ece8:	783b      	ldrb	r3, [r7, #0]
    ecea:	9a03      	ldr	r2, [sp, #12]
    ecec:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    ecee:	2801      	cmp	r0, #1
    ecf0:	d011      	beq.n	ed16 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    ecf2:	4a1c      	ldr	r2, [pc, #112]	; (ed64 <nm_spi_read_block+0x150>)
    ecf4:	4910      	ldr	r1, [pc, #64]	; (ed38 <nm_spi_read_block+0x124>)
    ecf6:	4811      	ldr	r0, [pc, #68]	; (ed3c <nm_spi_read_block+0x128>)
    ecf8:	4b11      	ldr	r3, [pc, #68]	; (ed40 <nm_spi_read_block+0x12c>)
    ecfa:	4798      	blx	r3
    ecfc:	481a      	ldr	r0, [pc, #104]	; (ed68 <nm_spi_read_block+0x154>)
    ecfe:	4b1b      	ldr	r3, [pc, #108]	; (ed6c <nm_spi_read_block+0x158>)
    ed00:	4798      	blx	r3
    ed02:	200d      	movs	r0, #13
    ed04:	4b10      	ldr	r3, [pc, #64]	; (ed48 <nm_spi_read_block+0x134>)
    ed06:	4798      	blx	r3
    ed08:	e7aa      	b.n	ec60 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    ed0a:	0022      	movs	r2, r4
    ed0c:	0031      	movs	r1, r6
    ed0e:	9803      	ldr	r0, [sp, #12]
    ed10:	4b13      	ldr	r3, [pc, #76]	; (ed60 <nm_spi_read_block+0x14c>)
    ed12:	4798      	blx	r3
    ed14:	e7eb      	b.n	ecee <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ed16:	2000      	movs	r0, #0
    ed18:	e001      	b.n	ed1e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ed1a:	2006      	movs	r0, #6
    ed1c:	4240      	negs	r0, r0

	return s8Ret;
}
    ed1e:	b007      	add	sp, #28
    ed20:	bc3c      	pop	{r2, r3, r4, r5}
    ed22:	4690      	mov	r8, r2
    ed24:	4699      	mov	r9, r3
    ed26:	46a2      	mov	sl, r4
    ed28:	46ab      	mov	fp, r5
    ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed2c:	0000e445 	.word	0x0000e445
    ed30:	0000e5e5 	.word	0x0000e5e5
    ed34:	0000045c 	.word	0x0000045c
    ed38:	00018bf0 	.word	0x00018bf0
    ed3c:	000184b8 	.word	0x000184b8
    ed40:	00016be1 	.word	0x00016be1
    ed44:	00018e0c 	.word	0x00018e0c
    ed48:	00016c15 	.word	0x00016c15
    ed4c:	0000c905 	.word	0x0000c905
    ed50:	0000047d 	.word	0x0000047d
    ed54:	00018e6c 	.word	0x00018e6c
    ed58:	00000456 	.word	0x00000456
    ed5c:	00018ddc 	.word	0x00018ddc
    ed60:	0000e6b9 	.word	0x0000e6b9
    ed64:	0000046c 	.word	0x0000046c
    ed68:	00018e44 	.word	0x00018e44
    ed6c:	00016cfd 	.word	0x00016cfd

0000ed70 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed72:	46de      	mov	lr, fp
    ed74:	4647      	mov	r7, r8
    ed76:	b580      	push	{r7, lr}
    ed78:	b089      	sub	sp, #36	; 0x24
    ed7a:	9004      	str	r0, [sp, #16]
    ed7c:	468b      	mov	fp, r1
    ed7e:	9203      	str	r2, [sp, #12]
    ed80:	260a      	movs	r6, #10
    ed82:	2780      	movs	r7, #128	; 0x80
    ed84:	01bf      	lsls	r7, r7, #6
    ed86:	466b      	mov	r3, sp
    ed88:	82df      	strh	r7, [r3, #22]
    ed8a:	0035      	movs	r5, r6
    ed8c:	e02d      	b.n	edea <nm_spi_write_block+0x7a>
		size = 2;
    ed8e:	3301      	adds	r3, #1
    ed90:	9303      	str	r3, [sp, #12]
    ed92:	e02d      	b.n	edf0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    ed94:	4a82      	ldr	r2, [pc, #520]	; (efa0 <nm_spi_write_block+0x230>)
    ed96:	4983      	ldr	r1, [pc, #524]	; (efa4 <nm_spi_write_block+0x234>)
    ed98:	4883      	ldr	r0, [pc, #524]	; (efa8 <nm_spi_write_block+0x238>)
    ed9a:	4c84      	ldr	r4, [pc, #528]	; (efac <nm_spi_write_block+0x23c>)
    ed9c:	47a0      	blx	r4
    ed9e:	0031      	movs	r1, r6
    eda0:	4883      	ldr	r0, [pc, #524]	; (efb0 <nm_spi_write_block+0x240>)
    eda2:	47a0      	blx	r4
    eda4:	200d      	movs	r0, #13
    eda6:	4b83      	ldr	r3, [pc, #524]	; (efb4 <nm_spi_write_block+0x244>)
    eda8:	4798      	blx	r3
		nm_bsp_sleep(1);
    edaa:	2001      	movs	r0, #1
    edac:	4c82      	ldr	r4, [pc, #520]	; (efb8 <nm_spi_write_block+0x248>)
    edae:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    edb0:	2300      	movs	r3, #0
    edb2:	9300      	str	r3, [sp, #0]
    edb4:	2200      	movs	r2, #0
    edb6:	2100      	movs	r1, #0
    edb8:	20cf      	movs	r0, #207	; 0xcf
    edba:	4e80      	ldr	r6, [pc, #512]	; (efbc <nm_spi_write_block+0x24c>)
    edbc:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    edbe:	20cf      	movs	r0, #207	; 0xcf
    edc0:	4b7f      	ldr	r3, [pc, #508]	; (efc0 <nm_spi_write_block+0x250>)
    edc2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    edc4:	4a7f      	ldr	r2, [pc, #508]	; (efc4 <nm_spi_write_block+0x254>)
    edc6:	4977      	ldr	r1, [pc, #476]	; (efa4 <nm_spi_write_block+0x234>)
    edc8:	4877      	ldr	r0, [pc, #476]	; (efa8 <nm_spi_write_block+0x238>)
    edca:	4e78      	ldr	r6, [pc, #480]	; (efac <nm_spi_write_block+0x23c>)
    edcc:	47b0      	blx	r6
    edce:	9b03      	ldr	r3, [sp, #12]
    edd0:	9a04      	ldr	r2, [sp, #16]
    edd2:	0029      	movs	r1, r5
    edd4:	487c      	ldr	r0, [pc, #496]	; (efc8 <nm_spi_write_block+0x258>)
    edd6:	47b0      	blx	r6
    edd8:	200d      	movs	r0, #13
    edda:	4b76      	ldr	r3, [pc, #472]	; (efb4 <nm_spi_write_block+0x244>)
    eddc:	4798      	blx	r3
		nm_bsp_sleep(1);
    edde:	2001      	movs	r0, #1
    ede0:	47a0      	blx	r4
    ede2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    ede4:	2d00      	cmp	r5, #0
    ede6:	d100      	bne.n	edea <nm_spi_write_block+0x7a>
    ede8:	e0d2      	b.n	ef90 <nm_spi_write_block+0x220>
	if (size == 1)
    edea:	9b03      	ldr	r3, [sp, #12]
    edec:	2b01      	cmp	r3, #1
    edee:	d0ce      	beq.n	ed8e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    edf0:	2300      	movs	r3, #0
    edf2:	9300      	str	r3, [sp, #0]
    edf4:	9b03      	ldr	r3, [sp, #12]
    edf6:	2200      	movs	r2, #0
    edf8:	9e04      	ldr	r6, [sp, #16]
    edfa:	0031      	movs	r1, r6
    edfc:	20c7      	movs	r0, #199	; 0xc7
    edfe:	4c6f      	ldr	r4, [pc, #444]	; (efbc <nm_spi_write_block+0x24c>)
    ee00:	47a0      	blx	r4
	if (result != N_OK) {
    ee02:	2801      	cmp	r0, #1
    ee04:	d1c6      	bne.n	ed94 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    ee06:	20c7      	movs	r0, #199	; 0xc7
    ee08:	4b6d      	ldr	r3, [pc, #436]	; (efc0 <nm_spi_write_block+0x250>)
    ee0a:	4798      	blx	r3
	if (result != N_OK) {
    ee0c:	2801      	cmp	r0, #1
    ee0e:	d00b      	beq.n	ee28 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    ee10:	4a6e      	ldr	r2, [pc, #440]	; (efcc <nm_spi_write_block+0x25c>)
    ee12:	4964      	ldr	r1, [pc, #400]	; (efa4 <nm_spi_write_block+0x234>)
    ee14:	4864      	ldr	r0, [pc, #400]	; (efa8 <nm_spi_write_block+0x238>)
    ee16:	4c65      	ldr	r4, [pc, #404]	; (efac <nm_spi_write_block+0x23c>)
    ee18:	47a0      	blx	r4
    ee1a:	9904      	ldr	r1, [sp, #16]
    ee1c:	486c      	ldr	r0, [pc, #432]	; (efd0 <nm_spi_write_block+0x260>)
    ee1e:	47a0      	blx	r4
    ee20:	200d      	movs	r0, #13
    ee22:	4b64      	ldr	r3, [pc, #400]	; (efb4 <nm_spi_write_block+0x244>)
    ee24:	4798      	blx	r3
    ee26:	e7c0      	b.n	edaa <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    ee28:	2200      	movs	r2, #0
    ee2a:	ab07      	add	r3, sp, #28
    ee2c:	801a      	strh	r2, [r3, #0]
    ee2e:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    ee30:	2600      	movs	r6, #0
				order = 0x1;
    ee32:	46a8      	mov	r8, r5
    ee34:	0035      	movs	r5, r6
    ee36:	0026      	movs	r6, r4
    ee38:	e021      	b.n	ee7e <nm_spi_write_block+0x10e>
				order = 0x2;
    ee3a:	2300      	movs	r3, #0
    ee3c:	42b7      	cmp	r7, r6
    ee3e:	415b      	adcs	r3, r3
    ee40:	3302      	adds	r3, #2
		cmd |= order;
    ee42:	200b      	movs	r0, #11
    ee44:	aa04      	add	r2, sp, #16
    ee46:	4694      	mov	ip, r2
    ee48:	4460      	add	r0, ip
    ee4a:	2210      	movs	r2, #16
    ee4c:	4252      	negs	r2, r2
    ee4e:	4313      	orrs	r3, r2
    ee50:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    ee52:	2101      	movs	r1, #1
    ee54:	4b5f      	ldr	r3, [pc, #380]	; (efd4 <nm_spi_write_block+0x264>)
    ee56:	4798      	blx	r3
    ee58:	2800      	cmp	r0, #0
    ee5a:	d11d      	bne.n	ee98 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    ee5c:	465b      	mov	r3, fp
    ee5e:	1958      	adds	r0, r3, r5
    ee60:	0021      	movs	r1, r4
    ee62:	4b5c      	ldr	r3, [pc, #368]	; (efd4 <nm_spi_write_block+0x264>)
    ee64:	4798      	blx	r3
    ee66:	2800      	cmp	r0, #0
    ee68:	d12e      	bne.n	eec8 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    ee6a:	4b5b      	ldr	r3, [pc, #364]	; (efd8 <nm_spi_write_block+0x268>)
    ee6c:	781b      	ldrb	r3, [r3, #0]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d037      	beq.n	eee2 <nm_spi_write_block+0x172>
		ix += nbytes;
    ee72:	1965      	adds	r5, r4, r5
    ee74:	b22d      	sxth	r5, r5
		sz -= nbytes;
    ee76:	1b36      	subs	r6, r6, r4
    ee78:	b2b6      	uxth	r6, r6
	} while (sz);
    ee7a:	2e00      	cmp	r6, #0
    ee7c:	d052      	beq.n	ef24 <nm_spi_write_block+0x1b4>
    ee7e:	1c34      	adds	r4, r6, #0
    ee80:	42be      	cmp	r6, r7
    ee82:	d901      	bls.n	ee88 <nm_spi_write_block+0x118>
    ee84:	466b      	mov	r3, sp
    ee86:	8adc      	ldrh	r4, [r3, #22]
    ee88:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    ee8a:	2d00      	cmp	r5, #0
    ee8c:	d1d5      	bne.n	ee3a <nm_spi_write_block+0xca>
				order = 0x3;
    ee8e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    ee90:	42be      	cmp	r6, r7
    ee92:	d9d6      	bls.n	ee42 <nm_spi_write_block+0xd2>
				order = 0x1;
    ee94:	3b02      	subs	r3, #2
    ee96:	e7d4      	b.n	ee42 <nm_spi_write_block+0xd2>
    ee98:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    ee9a:	4a50      	ldr	r2, [pc, #320]	; (efdc <nm_spi_write_block+0x26c>)
    ee9c:	4950      	ldr	r1, [pc, #320]	; (efe0 <nm_spi_write_block+0x270>)
    ee9e:	4842      	ldr	r0, [pc, #264]	; (efa8 <nm_spi_write_block+0x238>)
    eea0:	4b42      	ldr	r3, [pc, #264]	; (efac <nm_spi_write_block+0x23c>)
    eea2:	4798      	blx	r3
    eea4:	484f      	ldr	r0, [pc, #316]	; (efe4 <nm_spi_write_block+0x274>)
    eea6:	4b50      	ldr	r3, [pc, #320]	; (efe8 <nm_spi_write_block+0x278>)
    eea8:	4798      	blx	r3
    eeaa:	200d      	movs	r0, #13
    eeac:	4b41      	ldr	r3, [pc, #260]	; (efb4 <nm_spi_write_block+0x244>)
    eeae:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    eeb0:	4a4e      	ldr	r2, [pc, #312]	; (efec <nm_spi_write_block+0x27c>)
    eeb2:	493c      	ldr	r1, [pc, #240]	; (efa4 <nm_spi_write_block+0x234>)
    eeb4:	483c      	ldr	r0, [pc, #240]	; (efa8 <nm_spi_write_block+0x238>)
    eeb6:	4b3d      	ldr	r3, [pc, #244]	; (efac <nm_spi_write_block+0x23c>)
    eeb8:	4798      	blx	r3
    eeba:	484d      	ldr	r0, [pc, #308]	; (eff0 <nm_spi_write_block+0x280>)
    eebc:	4b4a      	ldr	r3, [pc, #296]	; (efe8 <nm_spi_write_block+0x278>)
    eebe:	4798      	blx	r3
    eec0:	200d      	movs	r0, #13
    eec2:	4b3c      	ldr	r3, [pc, #240]	; (efb4 <nm_spi_write_block+0x244>)
    eec4:	4798      	blx	r3
    eec6:	e770      	b.n	edaa <nm_spi_write_block+0x3a>
    eec8:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    eeca:	4a4a      	ldr	r2, [pc, #296]	; (eff4 <nm_spi_write_block+0x284>)
    eecc:	4944      	ldr	r1, [pc, #272]	; (efe0 <nm_spi_write_block+0x270>)
    eece:	4836      	ldr	r0, [pc, #216]	; (efa8 <nm_spi_write_block+0x238>)
    eed0:	4b36      	ldr	r3, [pc, #216]	; (efac <nm_spi_write_block+0x23c>)
    eed2:	4798      	blx	r3
    eed4:	4848      	ldr	r0, [pc, #288]	; (eff8 <nm_spi_write_block+0x288>)
    eed6:	4b44      	ldr	r3, [pc, #272]	; (efe8 <nm_spi_write_block+0x278>)
    eed8:	4798      	blx	r3
    eeda:	200d      	movs	r0, #13
    eedc:	4b35      	ldr	r3, [pc, #212]	; (efb4 <nm_spi_write_block+0x244>)
    eede:	4798      	blx	r3
    eee0:	e7e6      	b.n	eeb0 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    eee2:	2102      	movs	r1, #2
    eee4:	a807      	add	r0, sp, #28
    eee6:	4b3b      	ldr	r3, [pc, #236]	; (efd4 <nm_spi_write_block+0x264>)
    eee8:	4798      	blx	r3
    eeea:	2800      	cmp	r0, #0
    eeec:	d0c1      	beq.n	ee72 <nm_spi_write_block+0x102>
    eeee:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    eef0:	22d7      	movs	r2, #215	; 0xd7
    eef2:	0092      	lsls	r2, r2, #2
    eef4:	493a      	ldr	r1, [pc, #232]	; (efe0 <nm_spi_write_block+0x270>)
    eef6:	482c      	ldr	r0, [pc, #176]	; (efa8 <nm_spi_write_block+0x238>)
    eef8:	4b2c      	ldr	r3, [pc, #176]	; (efac <nm_spi_write_block+0x23c>)
    eefa:	4798      	blx	r3
    eefc:	483f      	ldr	r0, [pc, #252]	; (effc <nm_spi_write_block+0x28c>)
    eefe:	4b3a      	ldr	r3, [pc, #232]	; (efe8 <nm_spi_write_block+0x278>)
    ef00:	4798      	blx	r3
    ef02:	200d      	movs	r0, #13
    ef04:	4b2b      	ldr	r3, [pc, #172]	; (efb4 <nm_spi_write_block+0x244>)
    ef06:	4798      	blx	r3
    ef08:	e7d2      	b.n	eeb0 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    ef0a:	229a      	movs	r2, #154	; 0x9a
    ef0c:	0052      	lsls	r2, r2, #1
    ef0e:	493c      	ldr	r1, [pc, #240]	; (f000 <nm_spi_write_block+0x290>)
    ef10:	4825      	ldr	r0, [pc, #148]	; (efa8 <nm_spi_write_block+0x238>)
    ef12:	4b26      	ldr	r3, [pc, #152]	; (efac <nm_spi_write_block+0x23c>)
    ef14:	4798      	blx	r3
    ef16:	483b      	ldr	r0, [pc, #236]	; (f004 <nm_spi_write_block+0x294>)
    ef18:	4b33      	ldr	r3, [pc, #204]	; (efe8 <nm_spi_write_block+0x278>)
    ef1a:	4798      	blx	r3
    ef1c:	200d      	movs	r0, #13
    ef1e:	4b25      	ldr	r3, [pc, #148]	; (efb4 <nm_spi_write_block+0x244>)
    ef20:	4798      	blx	r3
    ef22:	e027      	b.n	ef74 <nm_spi_write_block+0x204>
    ef24:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    ef26:	4b2c      	ldr	r3, [pc, #176]	; (efd8 <nm_spi_write_block+0x268>)
    ef28:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    ef2a:	1e63      	subs	r3, r4, #1
    ef2c:	419c      	sbcs	r4, r3
    ef2e:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    ef30:	b2a1      	uxth	r1, r4
    ef32:	a807      	add	r0, sp, #28
    ef34:	4b34      	ldr	r3, [pc, #208]	; (f008 <nm_spi_write_block+0x298>)
    ef36:	4798      	blx	r3
    ef38:	2800      	cmp	r0, #0
    ef3a:	d1e6      	bne.n	ef0a <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    ef3c:	ab08      	add	r3, sp, #32
    ef3e:	191b      	adds	r3, r3, r4
    ef40:	3b05      	subs	r3, #5
    ef42:	781b      	ldrb	r3, [r3, #0]
    ef44:	2b00      	cmp	r3, #0
    ef46:	d106      	bne.n	ef56 <nm_spi_write_block+0x1e6>
    ef48:	ab08      	add	r3, sp, #32
    ef4a:	469c      	mov	ip, r3
    ef4c:	4464      	add	r4, ip
    ef4e:	3c06      	subs	r4, #6
    ef50:	7823      	ldrb	r3, [r4, #0]
    ef52:	2bc3      	cmp	r3, #195	; 0xc3
    ef54:	d01a      	beq.n	ef8c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    ef56:	223c      	movs	r2, #60	; 0x3c
    ef58:	32ff      	adds	r2, #255	; 0xff
    ef5a:	4929      	ldr	r1, [pc, #164]	; (f000 <nm_spi_write_block+0x290>)
    ef5c:	4812      	ldr	r0, [pc, #72]	; (efa8 <nm_spi_write_block+0x238>)
    ef5e:	4c13      	ldr	r4, [pc, #76]	; (efac <nm_spi_write_block+0x23c>)
    ef60:	47a0      	blx	r4
    ef62:	a907      	add	r1, sp, #28
    ef64:	788b      	ldrb	r3, [r1, #2]
    ef66:	784a      	ldrb	r2, [r1, #1]
    ef68:	7809      	ldrb	r1, [r1, #0]
    ef6a:	4828      	ldr	r0, [pc, #160]	; (f00c <nm_spi_write_block+0x29c>)
    ef6c:	47a0      	blx	r4
    ef6e:	200d      	movs	r0, #13
    ef70:	4b10      	ldr	r3, [pc, #64]	; (efb4 <nm_spi_write_block+0x244>)
    ef72:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ef74:	4a26      	ldr	r2, [pc, #152]	; (f010 <nm_spi_write_block+0x2a0>)
    ef76:	490b      	ldr	r1, [pc, #44]	; (efa4 <nm_spi_write_block+0x234>)
    ef78:	480b      	ldr	r0, [pc, #44]	; (efa8 <nm_spi_write_block+0x238>)
    ef7a:	4b0c      	ldr	r3, [pc, #48]	; (efac <nm_spi_write_block+0x23c>)
    ef7c:	4798      	blx	r3
    ef7e:	481c      	ldr	r0, [pc, #112]	; (eff0 <nm_spi_write_block+0x280>)
    ef80:	4b19      	ldr	r3, [pc, #100]	; (efe8 <nm_spi_write_block+0x278>)
    ef82:	4798      	blx	r3
    ef84:	200d      	movs	r0, #13
    ef86:	4b0b      	ldr	r3, [pc, #44]	; (efb4 <nm_spi_write_block+0x244>)
    ef88:	4798      	blx	r3
    ef8a:	e70e      	b.n	edaa <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ef8c:	2000      	movs	r0, #0
    ef8e:	e001      	b.n	ef94 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ef90:	2006      	movs	r0, #6
    ef92:	4240      	negs	r0, r0

	return s8Ret;
}
    ef94:	b009      	add	sp, #36	; 0x24
    ef96:	bc0c      	pop	{r2, r3}
    ef98:	4690      	mov	r8, r2
    ef9a:	469b      	mov	fp, r3
    ef9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef9e:	46c0      	nop			; (mov r8, r8)
    efa0:	000003c3 	.word	0x000003c3
    efa4:	00018bd0 	.word	0x00018bd0
    efa8:	000184b8 	.word	0x000184b8
    efac:	00016be1 	.word	0x00016be1
    efb0:	00018e88 	.word	0x00018e88
    efb4:	00016c15 	.word	0x00016c15
    efb8:	0000c905 	.word	0x0000c905
    efbc:	0000e445 	.word	0x0000e445
    efc0:	0000e5e5 	.word	0x0000e5e5
    efc4:	000003eb 	.word	0x000003eb
    efc8:	00018e6c 	.word	0x00018e6c
    efcc:	000003c9 	.word	0x000003c9
    efd0:	00018eb8 	.word	0x00018eb8
    efd4:	0000e425 	.word	0x0000e425
    efd8:	20000304 	.word	0x20000304
    efdc:	00000349 	.word	0x00000349
    efe0:	00018bb0 	.word	0x00018bb0
    efe4:	00018ef0 	.word	0x00018ef0
    efe8:	00016cfd 	.word	0x00016cfd
    efec:	000003d9 	.word	0x000003d9
    eff0:	00018fe4 	.word	0x00018fe4
    eff4:	00000352 	.word	0x00000352
    eff8:	00018f28 	.word	0x00018f28
    effc:	00018f5c 	.word	0x00018f5c
    f000:	00018b84 	.word	0x00018b84
    f004:	00018f94 	.word	0x00018f94
    f008:	0000e5c5 	.word	0x0000e5c5
    f00c:	00018fb4 	.word	0x00018fb4
    f010:	000003e1 	.word	0x000003e1

0000f014 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    f014:	b5f0      	push	{r4, r5, r6, r7, lr}
    f016:	46de      	mov	lr, fp
    f018:	4657      	mov	r7, sl
    f01a:	464e      	mov	r6, r9
    f01c:	4645      	mov	r5, r8
    f01e:	b5e0      	push	{r5, r6, r7, lr}
    f020:	b085      	sub	sp, #20
    f022:	9001      	str	r0, [sp, #4]
    f024:	000e      	movs	r6, r1
    f026:	9202      	str	r2, [sp, #8]
    f028:	001d      	movs	r5, r3
    f02a:	ab0e      	add	r3, sp, #56	; 0x38
    f02c:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    f02e:	2c00      	cmp	r4, #0
    f030:	d064      	beq.n	f0fc <Socket_ReadSocketData+0xe8>
    f032:	0103      	lsls	r3, r0, #4
    f034:	4935      	ldr	r1, [pc, #212]	; (f10c <Socket_ReadSocketData+0xf8>)
    f036:	585b      	ldr	r3, [r3, r1]
    f038:	2b00      	cmp	r3, #0
    f03a:	d05f      	beq.n	f0fc <Socket_ReadSocketData+0xe8>
    f03c:	0101      	lsls	r1, r0, #4
    f03e:	4b33      	ldr	r3, [pc, #204]	; (f10c <Socket_ReadSocketData+0xf8>)
    f040:	185b      	adds	r3, r3, r1
    f042:	889b      	ldrh	r3, [r3, #4]
    f044:	b29b      	uxth	r3, r3
    f046:	2b00      	cmp	r3, #0
    f048:	d058      	beq.n	f0fc <Socket_ReadSocketData+0xe8>
    f04a:	4b30      	ldr	r3, [pc, #192]	; (f10c <Socket_ReadSocketData+0xf8>)
    f04c:	185b      	adds	r3, r3, r1
    f04e:	7a9b      	ldrb	r3, [r3, #10]
    f050:	2b01      	cmp	r3, #1
    f052:	d153      	bne.n	f0fc <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    f054:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    f056:	4b2d      	ldr	r3, [pc, #180]	; (f10c <Socket_ReadSocketData+0xf8>)
    f058:	469b      	mov	fp, r3
    f05a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    f05c:	465b      	mov	r3, fp
    f05e:	220a      	movs	r2, #10
    f060:	4690      	mov	r8, r2
    f062:	44d8      	add	r8, fp
    f064:	468a      	mov	sl, r1
    f066:	9500      	str	r5, [sp, #0]
    f068:	9303      	str	r3, [sp, #12]
    f06a:	e015      	b.n	f098 <Socket_ReadSocketData+0x84>
    f06c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    f06e:	2301      	movs	r3, #1
    f070:	e01c      	b.n	f0ac <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f072:	3301      	adds	r3, #1
    f074:	2200      	movs	r2, #0
    f076:	2100      	movs	r1, #0
    f078:	2000      	movs	r0, #0
    f07a:	4c25      	ldr	r4, [pc, #148]	; (f110 <Socket_ReadSocketData+0xfc>)
    f07c:	47a0      	blx	r4
    f07e:	e03d      	b.n	f0fc <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    f080:	4824      	ldr	r0, [pc, #144]	; (f114 <Socket_ReadSocketData+0x100>)
    f082:	4d25      	ldr	r5, [pc, #148]	; (f118 <Socket_ReadSocketData+0x104>)
    f084:	47a8      	blx	r5
    f086:	0021      	movs	r1, r4
    f088:	4824      	ldr	r0, [pc, #144]	; (f11c <Socket_ReadSocketData+0x108>)
    f08a:	47a8      	blx	r5
    f08c:	200d      	movs	r0, #13
    f08e:	4b24      	ldr	r3, [pc, #144]	; (f120 <Socket_ReadSocketData+0x10c>)
    f090:	4798      	blx	r3
				break;
    f092:	e033      	b.n	f0fc <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    f094:	2c00      	cmp	r4, #0
    f096:	d031      	beq.n	f0fc <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    f098:	465b      	mov	r3, fp
    f09a:	889b      	ldrh	r3, [r3, #4]
    f09c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    f09e:	b21b      	sxth	r3, r3
    f0a0:	2b00      	cmp	r3, #0
    f0a2:	dde3      	ble.n	f06c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    f0a4:	9b03      	ldr	r3, [sp, #12]
    f0a6:	889d      	ldrh	r5, [r3, #4]
    f0a8:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    f0aa:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    f0ac:	4a17      	ldr	r2, [pc, #92]	; (f10c <Socket_ReadSocketData+0xf8>)
    f0ae:	4651      	mov	r1, sl
    f0b0:	5889      	ldr	r1, [r1, r2]
    f0b2:	002a      	movs	r2, r5
    f0b4:	9800      	ldr	r0, [sp, #0]
    f0b6:	4f16      	ldr	r7, [pc, #88]	; (f110 <Socket_ReadSocketData+0xfc>)
    f0b8:	47b8      	blx	r7
    f0ba:	2800      	cmp	r0, #0
    f0bc:	d1e0      	bne.n	f080 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    f0be:	4b13      	ldr	r3, [pc, #76]	; (f10c <Socket_ReadSocketData+0xf8>)
    f0c0:	4652      	mov	r2, sl
    f0c2:	58d3      	ldr	r3, [r2, r3]
    f0c4:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    f0c6:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    f0c8:	88f3      	ldrh	r3, [r6, #6]
    f0ca:	1b5b      	subs	r3, r3, r5
    f0cc:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    f0ce:	4b15      	ldr	r3, [pc, #84]	; (f124 <Socket_ReadSocketData+0x110>)
    f0d0:	681b      	ldr	r3, [r3, #0]
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d005      	beq.n	f0e2 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    f0d6:	4b13      	ldr	r3, [pc, #76]	; (f124 <Socket_ReadSocketData+0x110>)
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	0032      	movs	r2, r6
    f0dc:	9902      	ldr	r1, [sp, #8]
    f0de:	9801      	ldr	r0, [sp, #4]
    f0e0:	4798      	blx	r3
				u16ReadCount -= u16Read;
    f0e2:	1b64      	subs	r4, r4, r5
    f0e4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    f0e6:	9b00      	ldr	r3, [sp, #0]
    f0e8:	469c      	mov	ip, r3
    f0ea:	44ac      	add	ip, r5
    f0ec:	4663      	mov	r3, ip
    f0ee:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    f0f0:	4643      	mov	r3, r8
    f0f2:	781b      	ldrb	r3, [r3, #0]
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d1cd      	bne.n	f094 <Socket_ReadSocketData+0x80>
    f0f8:	2c00      	cmp	r4, #0
    f0fa:	d1ba      	bne.n	f072 <Socket_ReadSocketData+0x5e>
	}
}
    f0fc:	b005      	add	sp, #20
    f0fe:	bc3c      	pop	{r2, r3, r4, r5}
    f100:	4690      	mov	r8, r2
    f102:	4699      	mov	r9, r3
    f104:	46a2      	mov	sl, r4
    f106:	46ab      	mov	fp, r5
    f108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f10a:	46c0      	nop			; (mov r8, r8)
    f10c:	2000139c 	.word	0x2000139c
    f110:	0000d3bd 	.word	0x0000d3bd
    f114:	000187e8 	.word	0x000187e8
    f118:	00016be1 	.word	0x00016be1
    f11c:	0001924c 	.word	0x0001924c
    f120:	00016c15 	.word	0x00016c15
    f124:	2000144c 	.word	0x2000144c

0000f128 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    f128:	b5f0      	push	{r4, r5, r6, r7, lr}
    f12a:	46d6      	mov	lr, sl
    f12c:	464f      	mov	r7, r9
    f12e:	4646      	mov	r6, r8
    f130:	b5c0      	push	{r6, r7, lr}
    f132:	b09a      	sub	sp, #104	; 0x68
    f134:	000d      	movs	r5, r1
    f136:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    f138:	2841      	cmp	r0, #65	; 0x41
    f13a:	d039      	beq.n	f1b0 <m2m_ip_cb+0x88>
    f13c:	2854      	cmp	r0, #84	; 0x54
    f13e:	d037      	beq.n	f1b0 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    f140:	2842      	cmp	r0, #66	; 0x42
    f142:	d053      	beq.n	f1ec <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    f144:	2843      	cmp	r0, #67	; 0x43
    f146:	d06a      	beq.n	f21e <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    f148:	2844      	cmp	r0, #68	; 0x44
    f14a:	d100      	bne.n	f14e <m2m_ip_cb+0x26>
    f14c:	e0af      	b.n	f2ae <m2m_ip_cb+0x186>
    f14e:	284b      	cmp	r0, #75	; 0x4b
    f150:	d100      	bne.n	f154 <m2m_ip_cb+0x2c>
    f152:	e0ac      	b.n	f2ae <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    f154:	284a      	cmp	r0, #74	; 0x4a
    f156:	d100      	bne.n	f15a <m2m_ip_cb+0x32>
    f158:	e0cf      	b.n	f2fa <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    f15a:	2846      	cmp	r0, #70	; 0x46
    f15c:	d100      	bne.n	f160 <m2m_ip_cb+0x38>
    f15e:	e0e5      	b.n	f32c <m2m_ip_cb+0x204>
    f160:	2848      	cmp	r0, #72	; 0x48
    f162:	d100      	bne.n	f166 <m2m_ip_cb+0x3e>
    f164:	e10e      	b.n	f384 <m2m_ip_cb+0x25c>
    f166:	284d      	cmp	r0, #77	; 0x4d
    f168:	d100      	bne.n	f16c <m2m_ip_cb+0x44>
    f16a:	e0dc      	b.n	f326 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    f16c:	2845      	cmp	r0, #69	; 0x45
    f16e:	d100      	bne.n	f172 <m2m_ip_cb+0x4a>
    f170:	e12c      	b.n	f3cc <m2m_ip_cb+0x2a4>
    f172:	2847      	cmp	r0, #71	; 0x47
    f174:	d100      	bne.n	f178 <m2m_ip_cb+0x50>
    f176:	e14d      	b.n	f414 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f178:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    f17a:	284c      	cmp	r0, #76	; 0x4c
    f17c:	d100      	bne.n	f180 <m2m_ip_cb+0x58>
    f17e:	e126      	b.n	f3ce <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    f180:	2852      	cmp	r0, #82	; 0x52
    f182:	d12d      	bne.n	f1e0 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    f184:	2301      	movs	r3, #1
    f186:	2214      	movs	r2, #20
    f188:	a909      	add	r1, sp, #36	; 0x24
    f18a:	0020      	movs	r0, r4
    f18c:	4ca2      	ldr	r4, [pc, #648]	; (f418 <m2m_ip_cb+0x2f0>)
    f18e:	47a0      	blx	r4
    f190:	2800      	cmp	r0, #0
    f192:	d125      	bne.n	f1e0 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    f194:	4ba1      	ldr	r3, [pc, #644]	; (f41c <m2m_ip_cb+0x2f4>)
    f196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f198:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    f19a:	681b      	ldr	r3, [r3, #0]
    f19c:	2b00      	cmp	r3, #0
    f19e:	d01f      	beq.n	f1e0 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    f1a0:	4b9e      	ldr	r3, [pc, #632]	; (f41c <m2m_ip_cb+0x2f4>)
    f1a2:	681c      	ldr	r4, [r3, #0]
    f1a4:	ab09      	add	r3, sp, #36	; 0x24
    f1a6:	7c1a      	ldrb	r2, [r3, #16]
    f1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f1aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    f1ac:	47a0      	blx	r4
			}
		}
	}
}
    f1ae:	e017      	b.n	f1e0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    f1b0:	2300      	movs	r3, #0
    f1b2:	2204      	movs	r2, #4
    f1b4:	a909      	add	r1, sp, #36	; 0x24
    f1b6:	0020      	movs	r0, r4
    f1b8:	4c97      	ldr	r4, [pc, #604]	; (f418 <m2m_ip_cb+0x2f0>)
    f1ba:	47a0      	blx	r4
    f1bc:	2800      	cmp	r0, #0
    f1be:	d10f      	bne.n	f1e0 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    f1c0:	ab09      	add	r3, sp, #36	; 0x24
    f1c2:	785a      	ldrb	r2, [r3, #1]
    f1c4:	ab05      	add	r3, sp, #20
    f1c6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f1c8:	4b95      	ldr	r3, [pc, #596]	; (f420 <m2m_ip_cb+0x2f8>)
    f1ca:	681b      	ldr	r3, [r3, #0]
    f1cc:	2b00      	cmp	r3, #0
    f1ce:	d007      	beq.n	f1e0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    f1d0:	4b93      	ldr	r3, [pc, #588]	; (f420 <m2m_ip_cb+0x2f8>)
    f1d2:	681b      	ldr	r3, [r3, #0]
    f1d4:	aa09      	add	r2, sp, #36	; 0x24
    f1d6:	2000      	movs	r0, #0
    f1d8:	5610      	ldrsb	r0, [r2, r0]
    f1da:	aa05      	add	r2, sp, #20
    f1dc:	2101      	movs	r1, #1
    f1de:	4798      	blx	r3
}
    f1e0:	b01a      	add	sp, #104	; 0x68
    f1e2:	bc1c      	pop	{r2, r3, r4}
    f1e4:	4690      	mov	r8, r2
    f1e6:	4699      	mov	r9, r3
    f1e8:	46a2      	mov	sl, r4
    f1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    f1ec:	2300      	movs	r3, #0
    f1ee:	2204      	movs	r2, #4
    f1f0:	a909      	add	r1, sp, #36	; 0x24
    f1f2:	0020      	movs	r0, r4
    f1f4:	4c88      	ldr	r4, [pc, #544]	; (f418 <m2m_ip_cb+0x2f0>)
    f1f6:	47a0      	blx	r4
    f1f8:	2800      	cmp	r0, #0
    f1fa:	d1f1      	bne.n	f1e0 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    f1fc:	ab09      	add	r3, sp, #36	; 0x24
    f1fe:	785a      	ldrb	r2, [r3, #1]
    f200:	ab05      	add	r3, sp, #20
    f202:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    f204:	4b86      	ldr	r3, [pc, #536]	; (f420 <m2m_ip_cb+0x2f8>)
    f206:	681b      	ldr	r3, [r3, #0]
    f208:	2b00      	cmp	r3, #0
    f20a:	d0e9      	beq.n	f1e0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    f20c:	4b84      	ldr	r3, [pc, #528]	; (f420 <m2m_ip_cb+0x2f8>)
    f20e:	681b      	ldr	r3, [r3, #0]
    f210:	aa09      	add	r2, sp, #36	; 0x24
    f212:	2000      	movs	r0, #0
    f214:	5610      	ldrsb	r0, [r2, r0]
    f216:	aa05      	add	r2, sp, #20
    f218:	2102      	movs	r1, #2
    f21a:	4798      	blx	r3
    f21c:	e7e0      	b.n	f1e0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    f21e:	2300      	movs	r3, #0
    f220:	220c      	movs	r2, #12
    f222:	a905      	add	r1, sp, #20
    f224:	0020      	movs	r0, r4
    f226:	4c7c      	ldr	r4, [pc, #496]	; (f418 <m2m_ip_cb+0x2f0>)
    f228:	47a0      	blx	r4
    f22a:	2800      	cmp	r0, #0
    f22c:	d1d8      	bne.n	f1e0 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    f22e:	ab05      	add	r3, sp, #20
    f230:	2209      	movs	r2, #9
    f232:	569a      	ldrsb	r2, [r3, r2]
    f234:	2a00      	cmp	r2, #0
    f236:	db24      	blt.n	f282 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    f238:	0018      	movs	r0, r3
    f23a:	2108      	movs	r1, #8
    f23c:	5659      	ldrsb	r1, [r3, r1]
    f23e:	4b79      	ldr	r3, [pc, #484]	; (f424 <m2m_ip_cb+0x2fc>)
    f240:	0109      	lsls	r1, r1, #4
    f242:	1859      	adds	r1, r3, r1
    f244:	7ac9      	ldrb	r1, [r1, #11]
    f246:	b2c9      	uxtb	r1, r1
    f248:	0114      	lsls	r4, r2, #4
    f24a:	191b      	adds	r3, r3, r4
    f24c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    f24e:	2101      	movs	r1, #1
    f250:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f252:	8941      	ldrh	r1, [r0, #10]
    f254:	3908      	subs	r1, #8
    f256:	b289      	uxth	r1, r1
    f258:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    f25a:	4973      	ldr	r1, [pc, #460]	; (f428 <m2m_ip_cb+0x300>)
    f25c:	880b      	ldrh	r3, [r1, #0]
    f25e:	3301      	adds	r3, #1
    f260:	b29b      	uxth	r3, r3
    f262:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    f264:	880b      	ldrh	r3, [r1, #0]
    f266:	b29b      	uxth	r3, r3
    f268:	2b00      	cmp	r3, #0
    f26a:	d103      	bne.n	f274 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    f26c:	880b      	ldrh	r3, [r1, #0]
    f26e:	3301      	adds	r3, #1
    f270:	b29b      	uxth	r3, r3
    f272:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    f274:	4b6c      	ldr	r3, [pc, #432]	; (f428 <m2m_ip_cb+0x300>)
    f276:	8819      	ldrh	r1, [r3, #0]
    f278:	b289      	uxth	r1, r1
    f27a:	0110      	lsls	r0, r2, #4
    f27c:	4b69      	ldr	r3, [pc, #420]	; (f424 <m2m_ip_cb+0x2fc>)
    f27e:	181b      	adds	r3, r3, r0
    f280:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    f282:	ab09      	add	r3, sp, #36	; 0x24
    f284:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    f286:	2202      	movs	r2, #2
    f288:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    f28a:	aa05      	add	r2, sp, #20
    f28c:	8851      	ldrh	r1, [r2, #2]
    f28e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    f290:	9a06      	ldr	r2, [sp, #24]
    f292:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    f294:	4b62      	ldr	r3, [pc, #392]	; (f420 <m2m_ip_cb+0x2f8>)
    f296:	681b      	ldr	r3, [r3, #0]
    f298:	2b00      	cmp	r3, #0
    f29a:	d0a1      	beq.n	f1e0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    f29c:	4b60      	ldr	r3, [pc, #384]	; (f420 <m2m_ip_cb+0x2f8>)
    f29e:	681b      	ldr	r3, [r3, #0]
    f2a0:	aa05      	add	r2, sp, #20
    f2a2:	2008      	movs	r0, #8
    f2a4:	5610      	ldrsb	r0, [r2, r0]
    f2a6:	aa09      	add	r2, sp, #36	; 0x24
    f2a8:	2104      	movs	r1, #4
    f2aa:	4798      	blx	r3
    f2ac:	e798      	b.n	f1e0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    f2ae:	2300      	movs	r3, #0
    f2b0:	2204      	movs	r2, #4
    f2b2:	a909      	add	r1, sp, #36	; 0x24
    f2b4:	0020      	movs	r0, r4
    f2b6:	4c58      	ldr	r4, [pc, #352]	; (f418 <m2m_ip_cb+0x2f0>)
    f2b8:	47a0      	blx	r4
    f2ba:	2800      	cmp	r0, #0
    f2bc:	d000      	beq.n	f2c0 <m2m_ip_cb+0x198>
    f2be:	e78f      	b.n	f1e0 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    f2c0:	ab09      	add	r3, sp, #36	; 0x24
    f2c2:	2000      	movs	r0, #0
    f2c4:	5618      	ldrsb	r0, [r3, r0]
    f2c6:	aa05      	add	r2, sp, #20
    f2c8:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    f2ca:	785b      	ldrb	r3, [r3, #1]
    f2cc:	b25b      	sxtb	r3, r3
    f2ce:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d107      	bne.n	f2e4 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    f2d4:	ab09      	add	r3, sp, #36	; 0x24
    f2d6:	885b      	ldrh	r3, [r3, #2]
    f2d8:	3b08      	subs	r3, #8
    f2da:	b29b      	uxth	r3, r3
    f2dc:	0101      	lsls	r1, r0, #4
    f2de:	4a51      	ldr	r2, [pc, #324]	; (f424 <m2m_ip_cb+0x2fc>)
    f2e0:	1852      	adds	r2, r2, r1
    f2e2:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    f2e4:	4b4e      	ldr	r3, [pc, #312]	; (f420 <m2m_ip_cb+0x2f8>)
    f2e6:	681b      	ldr	r3, [r3, #0]
    f2e8:	2b00      	cmp	r3, #0
    f2ea:	d100      	bne.n	f2ee <m2m_ip_cb+0x1c6>
    f2ec:	e778      	b.n	f1e0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    f2ee:	4b4c      	ldr	r3, [pc, #304]	; (f420 <m2m_ip_cb+0x2f8>)
    f2f0:	681b      	ldr	r3, [r3, #0]
    f2f2:	aa05      	add	r2, sp, #20
    f2f4:	2105      	movs	r1, #5
    f2f6:	4798      	blx	r3
	{
    f2f8:	e772      	b.n	f1e0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    f2fa:	2300      	movs	r3, #0
    f2fc:	2244      	movs	r2, #68	; 0x44
    f2fe:	a909      	add	r1, sp, #36	; 0x24
    f300:	0020      	movs	r0, r4
    f302:	4c45      	ldr	r4, [pc, #276]	; (f418 <m2m_ip_cb+0x2f0>)
    f304:	47a0      	blx	r4
    f306:	2800      	cmp	r0, #0
    f308:	d000      	beq.n	f30c <m2m_ip_cb+0x1e4>
    f30a:	e769      	b.n	f1e0 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    f30c:	4b47      	ldr	r3, [pc, #284]	; (f42c <m2m_ip_cb+0x304>)
    f30e:	681b      	ldr	r3, [r3, #0]
    f310:	2b00      	cmp	r3, #0
    f312:	d100      	bne.n	f316 <m2m_ip_cb+0x1ee>
    f314:	e764      	b.n	f1e0 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    f316:	4b45      	ldr	r3, [pc, #276]	; (f42c <m2m_ip_cb+0x304>)
    f318:	681b      	ldr	r3, [r3, #0]
    f31a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f31c:	9203      	str	r2, [sp, #12]
    f31e:	0011      	movs	r1, r2
    f320:	a809      	add	r0, sp, #36	; 0x24
    f322:	4798      	blx	r3
    f324:	e75c      	b.n	f1e0 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    f326:	2306      	movs	r3, #6
    f328:	469a      	mov	sl, r3
    f32a:	e001      	b.n	f330 <m2m_ip_cb+0x208>
    f32c:	2306      	movs	r3, #6
    f32e:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    f330:	2300      	movs	r3, #0
    f332:	2210      	movs	r2, #16
    f334:	a905      	add	r1, sp, #20
    f336:	0020      	movs	r0, r4
    f338:	4f37      	ldr	r7, [pc, #220]	; (f418 <m2m_ip_cb+0x2f0>)
    f33a:	47b8      	blx	r7
    f33c:	2800      	cmp	r0, #0
    f33e:	d000      	beq.n	f342 <m2m_ip_cb+0x21a>
    f340:	e74e      	b.n	f1e0 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    f342:	aa05      	add	r2, sp, #20
    f344:	200c      	movs	r0, #12
    f346:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    f348:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    f34a:	0107      	lsls	r7, r0, #4
    f34c:	4935      	ldr	r1, [pc, #212]	; (f424 <m2m_ip_cb+0x2fc>)
    f34e:	19c9      	adds	r1, r1, r7
    f350:	2700      	movs	r7, #0
    f352:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    f354:	2608      	movs	r6, #8
    f356:	5f97      	ldrsh	r7, [r2, r6]
    f358:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    f35a:	8957      	ldrh	r7, [r2, #10]
    f35c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    f35e:	af09      	add	r7, sp, #36	; 0x24
    f360:	8856      	ldrh	r6, [r2, #2]
    f362:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    f364:	9a06      	ldr	r2, [sp, #24]
    f366:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f368:	88ca      	ldrh	r2, [r1, #6]
    f36a:	b292      	uxth	r2, r2
    f36c:	4293      	cmp	r3, r2
    f36e:	d00c      	beq.n	f38a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    f370:	2d10      	cmp	r5, #16
    f372:	d800      	bhi.n	f376 <m2m_ip_cb+0x24e>
    f374:	e734      	b.n	f1e0 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    f376:	2301      	movs	r3, #1
    f378:	2200      	movs	r2, #0
    f37a:	2100      	movs	r1, #0
    f37c:	2000      	movs	r0, #0
    f37e:	4c26      	ldr	r4, [pc, #152]	; (f418 <m2m_ip_cb+0x2f0>)
    f380:	47a0      	blx	r4
	{
    f382:	e72d      	b.n	f1e0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    f384:	2309      	movs	r3, #9
    f386:	469a      	mov	sl, r3
    f388:	e7d2      	b.n	f330 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    f38a:	4643      	mov	r3, r8
    f38c:	2b00      	cmp	r3, #0
    f38e:	dd01      	ble.n	f394 <m2m_ip_cb+0x26c>
    f390:	45a8      	cmp	r8, r5
    f392:	db0f      	blt.n	f3b4 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    f394:	ab09      	add	r3, sp, #36	; 0x24
    f396:	4642      	mov	r2, r8
    f398:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    f39a:	2300      	movs	r3, #0
    f39c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    f39e:	4b20      	ldr	r3, [pc, #128]	; (f420 <m2m_ip_cb+0x2f8>)
    f3a0:	681b      	ldr	r3, [r3, #0]
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d100      	bne.n	f3a8 <m2m_ip_cb+0x280>
    f3a6:	e71b      	b.n	f1e0 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    f3a8:	4b1d      	ldr	r3, [pc, #116]	; (f420 <m2m_ip_cb+0x2f8>)
    f3aa:	681b      	ldr	r3, [r3, #0]
    f3ac:	aa09      	add	r2, sp, #36	; 0x24
    f3ae:	4651      	mov	r1, sl
    f3b0:	4798      	blx	r3
    f3b2:	e715      	b.n	f1e0 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    f3b4:	0023      	movs	r3, r4
    f3b6:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    f3b8:	4642      	mov	r2, r8
    f3ba:	4669      	mov	r1, sp
    f3bc:	818a      	strh	r2, [r1, #12]
    f3be:	898a      	ldrh	r2, [r1, #12]
    f3c0:	9200      	str	r2, [sp, #0]
    f3c2:	4652      	mov	r2, sl
    f3c4:	0039      	movs	r1, r7
    f3c6:	4c1a      	ldr	r4, [pc, #104]	; (f430 <m2m_ip_cb+0x308>)
    f3c8:	47a0      	blx	r4
    f3ca:	e709      	b.n	f1e0 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f3cc:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    f3ce:	2300      	movs	r3, #0
    f3d0:	2208      	movs	r2, #8
    f3d2:	a909      	add	r1, sp, #36	; 0x24
    f3d4:	0020      	movs	r0, r4
    f3d6:	4c10      	ldr	r4, [pc, #64]	; (f418 <m2m_ip_cb+0x2f0>)
    f3d8:	47a0      	blx	r4
    f3da:	2800      	cmp	r0, #0
    f3dc:	d000      	beq.n	f3e0 <m2m_ip_cb+0x2b8>
    f3de:	e6ff      	b.n	f1e0 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    f3e0:	ab09      	add	r3, sp, #36	; 0x24
    f3e2:	2000      	movs	r0, #0
    f3e4:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    f3e6:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    f3e8:	8859      	ldrh	r1, [r3, #2]
    f3ea:	ab05      	add	r3, sp, #20
    f3ec:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f3ee:	0101      	lsls	r1, r0, #4
    f3f0:	4b0c      	ldr	r3, [pc, #48]	; (f424 <m2m_ip_cb+0x2fc>)
    f3f2:	185b      	adds	r3, r3, r1
    f3f4:	88db      	ldrh	r3, [r3, #6]
    f3f6:	b29b      	uxth	r3, r3
    f3f8:	429a      	cmp	r2, r3
    f3fa:	d000      	beq.n	f3fe <m2m_ip_cb+0x2d6>
    f3fc:	e6f0      	b.n	f1e0 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    f3fe:	4b08      	ldr	r3, [pc, #32]	; (f420 <m2m_ip_cb+0x2f8>)
    f400:	681b      	ldr	r3, [r3, #0]
    f402:	2b00      	cmp	r3, #0
    f404:	d100      	bne.n	f408 <m2m_ip_cb+0x2e0>
    f406:	e6eb      	b.n	f1e0 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    f408:	4b05      	ldr	r3, [pc, #20]	; (f420 <m2m_ip_cb+0x2f8>)
    f40a:	681b      	ldr	r3, [r3, #0]
    f40c:	aa05      	add	r2, sp, #20
    f40e:	0029      	movs	r1, r5
    f410:	4798      	blx	r3
	{
    f412:	e6e5      	b.n	f1e0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    f414:	2508      	movs	r5, #8
    f416:	e7da      	b.n	f3ce <m2m_ip_cb+0x2a6>
    f418:	0000d3bd 	.word	0x0000d3bd
    f41c:	20001450 	.word	0x20001450
    f420:	2000144c 	.word	0x2000144c
    f424:	2000139c 	.word	0x2000139c
    f428:	20000306 	.word	0x20000306
    f42c:	20001454 	.word	0x20001454
    f430:	0000f015 	.word	0x0000f015

0000f434 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    f434:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    f436:	4b0a      	ldr	r3, [pc, #40]	; (f460 <socketInit+0x2c>)
    f438:	781b      	ldrb	r3, [r3, #0]
    f43a:	2b00      	cmp	r3, #0
    f43c:	d000      	beq.n	f440 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    f43e:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f440:	22b0      	movs	r2, #176	; 0xb0
    f442:	2100      	movs	r1, #0
    f444:	4807      	ldr	r0, [pc, #28]	; (f464 <socketInit+0x30>)
    f446:	4b08      	ldr	r3, [pc, #32]	; (f468 <socketInit+0x34>)
    f448:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    f44a:	4908      	ldr	r1, [pc, #32]	; (f46c <socketInit+0x38>)
    f44c:	2002      	movs	r0, #2
    f44e:	4b08      	ldr	r3, [pc, #32]	; (f470 <socketInit+0x3c>)
    f450:	4798      	blx	r3
		gbSocketInit	= 1;
    f452:	2201      	movs	r2, #1
    f454:	4b02      	ldr	r3, [pc, #8]	; (f460 <socketInit+0x2c>)
    f456:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    f458:	2200      	movs	r2, #0
    f45a:	4b06      	ldr	r3, [pc, #24]	; (f474 <socketInit+0x40>)
    f45c:	801a      	strh	r2, [r3, #0]
}
    f45e:	e7ee      	b.n	f43e <socketInit+0xa>
    f460:	20000305 	.word	0x20000305
    f464:	2000139c 	.word	0x2000139c
    f468:	0000cc91 	.word	0x0000cc91
    f46c:	0000f129 	.word	0x0000f129
    f470:	0000d4a5 	.word	0x0000d4a5
    f474:	20000306 	.word	0x20000306

0000f478 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    f478:	4b02      	ldr	r3, [pc, #8]	; (f484 <registerSocketCallback+0xc>)
    f47a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    f47c:	4b02      	ldr	r3, [pc, #8]	; (f488 <registerSocketCallback+0x10>)
    f47e:	6019      	str	r1, [r3, #0]
}
    f480:	4770      	bx	lr
    f482:	46c0      	nop			; (mov r8, r8)
    f484:	2000144c 	.word	0x2000144c
    f488:	20001454 	.word	0x20001454

0000f48c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    f48c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f48e:	46d6      	mov	lr, sl
    f490:	4647      	mov	r7, r8
    f492:	b580      	push	{r7, lr}
    f494:	b089      	sub	sp, #36	; 0x24
    f496:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    f498:	2802      	cmp	r0, #2
    f49a:	d000      	beq.n	f49e <socket+0x12>
    f49c:	e09c      	b.n	f5d8 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    f49e:	2901      	cmp	r1, #1
    f4a0:	d00a      	beq.n	f4b8 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    f4a2:	2902      	cmp	r1, #2
    f4a4:	d100      	bne.n	f4a8 <socket+0x1c>
    f4a6:	e070      	b.n	f58a <socket+0xfe>
	SOCKET					sock = -1;
    f4a8:	2501      	movs	r5, #1
    f4aa:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    f4ac:	0028      	movs	r0, r5
    f4ae:	b009      	add	sp, #36	; 0x24
    f4b0:	bc0c      	pop	{r2, r3}
    f4b2:	4690      	mov	r8, r2
    f4b4:	469a      	mov	sl, r3
    f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    f4b8:	4c49      	ldr	r4, [pc, #292]	; (f5e0 <socket+0x154>)
    f4ba:	7827      	ldrb	r7, [r4, #0]
    f4bc:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f4be:	7826      	ldrb	r6, [r4, #0]
    f4c0:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f4c2:	7820      	ldrb	r0, [r4, #0]
    f4c4:	3001      	adds	r0, #1
    f4c6:	3106      	adds	r1, #6
    f4c8:	4b46      	ldr	r3, [pc, #280]	; (f5e4 <socket+0x158>)
    f4ca:	4798      	blx	r3
    f4cc:	b2c9      	uxtb	r1, r1
    f4ce:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    f4d0:	0132      	lsls	r2, r6, #4
    f4d2:	4b45      	ldr	r3, [pc, #276]	; (f5e8 <socket+0x15c>)
    f4d4:	189b      	adds	r3, r3, r2
    f4d6:	7a9b      	ldrb	r3, [r3, #10]
    f4d8:	2506      	movs	r5, #6
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d018      	beq.n	f510 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    f4de:	4e40      	ldr	r6, [pc, #256]	; (f5e0 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f4e0:	4b40      	ldr	r3, [pc, #256]	; (f5e4 <socket+0x158>)
    f4e2:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    f4e4:	4b40      	ldr	r3, [pc, #256]	; (f5e8 <socket+0x15c>)
    f4e6:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    f4e8:	7837      	ldrb	r7, [r6, #0]
    f4ea:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f4ec:	7834      	ldrb	r4, [r6, #0]
    f4ee:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f4f0:	7830      	ldrb	r0, [r6, #0]
    f4f2:	3001      	adds	r0, #1
    f4f4:	2107      	movs	r1, #7
    f4f6:	47d0      	blx	sl
    f4f8:	b2c9      	uxtb	r1, r1
    f4fa:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    f4fc:	0123      	lsls	r3, r4, #4
    f4fe:	4443      	add	r3, r8
    f500:	7a9b      	ldrb	r3, [r3, #10]
    f502:	2b00      	cmp	r3, #0
    f504:	d007      	beq.n	f516 <socket+0x8a>
    f506:	3d01      	subs	r5, #1
    f508:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    f50a:	2d00      	cmp	r5, #0
    f50c:	d1ec      	bne.n	f4e8 <socket+0x5c>
    f50e:	e7cb      	b.n	f4a8 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f510:	4b35      	ldr	r3, [pc, #212]	; (f5e8 <socket+0x15c>)
    f512:	18d4      	adds	r4, r2, r3
    f514:	e002      	b.n	f51c <socket+0x90>
    f516:	0124      	lsls	r4, r4, #4
    f518:	4b33      	ldr	r3, [pc, #204]	; (f5e8 <socket+0x15c>)
    f51a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    f51c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    f51e:	2d00      	cmp	r5, #0
    f520:	dbc4      	blt.n	f4ac <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    f522:	2210      	movs	r2, #16
    f524:	2100      	movs	r1, #0
    f526:	0020      	movs	r0, r4
    f528:	4b30      	ldr	r3, [pc, #192]	; (f5ec <socket+0x160>)
    f52a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    f52c:	2301      	movs	r3, #1
    f52e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    f530:	4a2f      	ldr	r2, [pc, #188]	; (f5f0 <socket+0x164>)
    f532:	8813      	ldrh	r3, [r2, #0]
    f534:	3301      	adds	r3, #1
    f536:	b29b      	uxth	r3, r3
    f538:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    f53a:	8813      	ldrh	r3, [r2, #0]
    f53c:	b29b      	uxth	r3, r3
    f53e:	2b00      	cmp	r3, #0
    f540:	d103      	bne.n	f54a <socket+0xbe>
				++gu16SessionID;
    f542:	8813      	ldrh	r3, [r2, #0]
    f544:	3301      	adds	r3, #1
    f546:	b29b      	uxth	r3, r3
    f548:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    f54a:	4e29      	ldr	r6, [pc, #164]	; (f5f0 <socket+0x164>)
    f54c:	8833      	ldrh	r3, [r6, #0]
    f54e:	b29b      	uxth	r3, r3
    f550:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    f552:	4828      	ldr	r0, [pc, #160]	; (f5f4 <socket+0x168>)
    f554:	4f28      	ldr	r7, [pc, #160]	; (f5f8 <socket+0x16c>)
    f556:	47b8      	blx	r7
    f558:	8832      	ldrh	r2, [r6, #0]
    f55a:	b292      	uxth	r2, r2
    f55c:	0029      	movs	r1, r5
    f55e:	4827      	ldr	r0, [pc, #156]	; (f5fc <socket+0x170>)
    f560:	47b8      	blx	r7
    f562:	200d      	movs	r0, #13
    f564:	4b26      	ldr	r3, [pc, #152]	; (f600 <socket+0x174>)
    f566:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    f568:	9b05      	ldr	r3, [sp, #20]
    f56a:	07db      	lsls	r3, r3, #31
    f56c:	d59e      	bpl.n	f4ac <socket+0x20>
				strSSLCreate.sslSock = sock;
    f56e:	aa07      	add	r2, sp, #28
    f570:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    f572:	2321      	movs	r3, #33	; 0x21
    f574:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    f576:	2300      	movs	r3, #0
    f578:	9302      	str	r3, [sp, #8]
    f57a:	9301      	str	r3, [sp, #4]
    f57c:	9300      	str	r3, [sp, #0]
    f57e:	3304      	adds	r3, #4
    f580:	2150      	movs	r1, #80	; 0x50
    f582:	2002      	movs	r0, #2
    f584:	4c1f      	ldr	r4, [pc, #124]	; (f604 <socket+0x178>)
    f586:	47a0      	blx	r4
    f588:	e790      	b.n	f4ac <socket+0x20>
				u8SockID		= u8NextUdpSock;
    f58a:	4b1f      	ldr	r3, [pc, #124]	; (f608 <socket+0x17c>)
    f58c:	781d      	ldrb	r5, [r3, #0]
    f58e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f590:	781c      	ldrb	r4, [r3, #0]
    f592:	0124      	lsls	r4, r4, #4
    f594:	4a1d      	ldr	r2, [pc, #116]	; (f60c <socket+0x180>)
    f596:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f598:	7819      	ldrb	r1, [r3, #0]
    f59a:	3101      	adds	r1, #1
    f59c:	2203      	movs	r2, #3
    f59e:	400a      	ands	r2, r1
    f5a0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    f5a2:	7aa3      	ldrb	r3, [r4, #10]
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d014      	beq.n	f5d2 <socket+0x146>
    f5a8:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    f5aa:	4917      	ldr	r1, [pc, #92]	; (f608 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f5ac:	4f17      	ldr	r7, [pc, #92]	; (f60c <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f5ae:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    f5b0:	780d      	ldrb	r5, [r1, #0]
    f5b2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f5b4:	780c      	ldrb	r4, [r1, #0]
    f5b6:	0124      	lsls	r4, r4, #4
    f5b8:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f5ba:	780b      	ldrb	r3, [r1, #0]
    f5bc:	3301      	adds	r3, #1
    f5be:	4003      	ands	r3, r0
    f5c0:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    f5c2:	7aa3      	ldrb	r3, [r4, #10]
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d004      	beq.n	f5d2 <socket+0x146>
    f5c8:	3a01      	subs	r2, #1
    f5ca:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    f5cc:	2a00      	cmp	r2, #0
    f5ce:	d1ef      	bne.n	f5b0 <socket+0x124>
    f5d0:	e76a      	b.n	f4a8 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    f5d2:	3507      	adds	r5, #7
    f5d4:	b26d      	sxtb	r5, r5
					break;
    f5d6:	e7a2      	b.n	f51e <socket+0x92>
	SOCKET					sock = -1;
    f5d8:	2501      	movs	r5, #1
    f5da:	426d      	negs	r5, r5
    f5dc:	e766      	b.n	f4ac <socket+0x20>
    f5de:	46c0      	nop			; (mov r8, r8)
    f5e0:	20000308 	.word	0x20000308
    f5e4:	00016979 	.word	0x00016979
    f5e8:	2000139c 	.word	0x2000139c
    f5ec:	0000cc91 	.word	0x0000cc91
    f5f0:	20000306 	.word	0x20000306
    f5f4:	000187e8 	.word	0x000187e8
    f5f8:	00016be1 	.word	0x00016be1
    f5fc:	00019278 	.word	0x00019278
    f600:	00016c15 	.word	0x00016c15
    f604:	0000cda5 	.word	0x0000cda5
    f608:	20000309 	.word	0x20000309
    f60c:	2000140c 	.word	0x2000140c

0000f610 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    f610:	b570      	push	{r4, r5, r6, lr}
    f612:	b088      	sub	sp, #32
    f614:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    f616:	db30      	blt.n	f67a <connect+0x6a>
    f618:	2900      	cmp	r1, #0
    f61a:	d031      	beq.n	f680 <connect+0x70>
    f61c:	0100      	lsls	r0, r0, #4
    f61e:	4b1d      	ldr	r3, [pc, #116]	; (f694 <connect+0x84>)
    f620:	181b      	adds	r3, r3, r0
    f622:	7a9b      	ldrb	r3, [r3, #10]
    f624:	2b01      	cmp	r3, #1
    f626:	d12e      	bne.n	f686 <connect+0x76>
    f628:	2a00      	cmp	r2, #0
    f62a:	d02f      	beq.n	f68c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f62c:	4b19      	ldr	r3, [pc, #100]	; (f694 <connect+0x84>)
    f62e:	181b      	adds	r3, r3, r0
    f630:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    f632:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f634:	07db      	lsls	r3, r3, #31
    f636:	d505      	bpl.n	f644 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    f638:	4b16      	ldr	r3, [pc, #88]	; (f694 <connect+0x84>)
    f63a:	181b      	adds	r3, r3, r0
    f63c:	7ada      	ldrb	r2, [r3, #11]
    f63e:	ab05      	add	r3, sp, #20
    f640:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    f642:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    f644:	ad05      	add	r5, sp, #20
    f646:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    f648:	2208      	movs	r2, #8
    f64a:	0028      	movs	r0, r5
    f64c:	4b12      	ldr	r3, [pc, #72]	; (f698 <connect+0x88>)
    f64e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    f650:	0124      	lsls	r4, r4, #4
    f652:	4b10      	ldr	r3, [pc, #64]	; (f694 <connect+0x84>)
    f654:	191c      	adds	r4, r3, r4
    f656:	88e3      	ldrh	r3, [r4, #6]
    f658:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    f65a:	2300      	movs	r3, #0
    f65c:	9302      	str	r3, [sp, #8]
    f65e:	9301      	str	r3, [sp, #4]
    f660:	9300      	str	r3, [sp, #0]
    f662:	330c      	adds	r3, #12
    f664:	002a      	movs	r2, r5
    f666:	0031      	movs	r1, r6
    f668:	2002      	movs	r0, #2
    f66a:	4c0c      	ldr	r4, [pc, #48]	; (f69c <connect+0x8c>)
    f66c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f66e:	2800      	cmp	r0, #0
    f670:	d001      	beq.n	f676 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    f672:	2009      	movs	r0, #9
    f674:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    f676:	b008      	add	sp, #32
    f678:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f67a:	2006      	movs	r0, #6
    f67c:	4240      	negs	r0, r0
    f67e:	e7fa      	b.n	f676 <connect+0x66>
    f680:	2006      	movs	r0, #6
    f682:	4240      	negs	r0, r0
    f684:	e7f7      	b.n	f676 <connect+0x66>
    f686:	2006      	movs	r0, #6
    f688:	4240      	negs	r0, r0
    f68a:	e7f4      	b.n	f676 <connect+0x66>
    f68c:	2006      	movs	r0, #6
    f68e:	4240      	negs	r0, r0
    f690:	e7f1      	b.n	f676 <connect+0x66>
    f692:	46c0      	nop			; (mov r8, r8)
    f694:	2000139c 	.word	0x2000139c
    f698:	0000cc7d 	.word	0x0000cc7d
    f69c:	0000cda5 	.word	0x0000cda5

0000f6a0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    f6a0:	b530      	push	{r4, r5, lr}
    f6a2:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    f6a4:	2800      	cmp	r0, #0
    f6a6:	db36      	blt.n	f716 <send+0x76>
    f6a8:	2900      	cmp	r1, #0
    f6aa:	d037      	beq.n	f71c <send+0x7c>
    f6ac:	23af      	movs	r3, #175	; 0xaf
    f6ae:	00db      	lsls	r3, r3, #3
    f6b0:	429a      	cmp	r2, r3
    f6b2:	d836      	bhi.n	f722 <send+0x82>
    f6b4:	0104      	lsls	r4, r0, #4
    f6b6:	4b1e      	ldr	r3, [pc, #120]	; (f730 <send+0x90>)
    f6b8:	191b      	adds	r3, r3, r4
    f6ba:	7a9b      	ldrb	r3, [r3, #10]
    f6bc:	2b01      	cmp	r3, #1
    f6be:	d133      	bne.n	f728 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    f6c0:	ab04      	add	r3, sp, #16
    f6c2:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    f6c4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    f6c6:	0025      	movs	r5, r4
    f6c8:	4c19      	ldr	r4, [pc, #100]	; (f730 <send+0x90>)
    f6ca:	1964      	adds	r4, r4, r5
    f6cc:	88e4      	ldrh	r4, [r4, #6]
    f6ce:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    f6d0:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    f6d2:	2806      	cmp	r0, #6
    f6d4:	dd00      	ble.n	f6d8 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    f6d6:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f6d8:	0104      	lsls	r4, r0, #4
    f6da:	4b15      	ldr	r3, [pc, #84]	; (f730 <send+0x90>)
    f6dc:	191b      	adds	r3, r3, r4
    f6de:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    f6e0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f6e2:	07e4      	lsls	r4, r4, #31
    f6e4:	d505      	bpl.n	f6f2 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    f6e6:	0100      	lsls	r0, r0, #4
    f6e8:	4b11      	ldr	r3, [pc, #68]	; (f730 <send+0x90>)
    f6ea:	1818      	adds	r0, r3, r0
    f6ec:	8905      	ldrh	r5, [r0, #8]
    f6ee:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    f6f0:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    f6f2:	2080      	movs	r0, #128	; 0x80
    f6f4:	4318      	orrs	r0, r3
    f6f6:	9502      	str	r5, [sp, #8]
    f6f8:	9201      	str	r2, [sp, #4]
    f6fa:	9100      	str	r1, [sp, #0]
    f6fc:	2310      	movs	r3, #16
    f6fe:	aa04      	add	r2, sp, #16
    f700:	0001      	movs	r1, r0
    f702:	2002      	movs	r0, #2
    f704:	4c0b      	ldr	r4, [pc, #44]	; (f734 <send+0x94>)
    f706:	47a0      	blx	r4
    f708:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    f70a:	2800      	cmp	r0, #0
    f70c:	d000      	beq.n	f710 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    f70e:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    f710:	0018      	movs	r0, r3
    f712:	b009      	add	sp, #36	; 0x24
    f714:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f716:	2306      	movs	r3, #6
    f718:	425b      	negs	r3, r3
    f71a:	e7f9      	b.n	f710 <send+0x70>
    f71c:	2306      	movs	r3, #6
    f71e:	425b      	negs	r3, r3
    f720:	e7f6      	b.n	f710 <send+0x70>
    f722:	2306      	movs	r3, #6
    f724:	425b      	negs	r3, r3
    f726:	e7f3      	b.n	f710 <send+0x70>
    f728:	2306      	movs	r3, #6
    f72a:	425b      	negs	r3, r3
    f72c:	e7f0      	b.n	f710 <send+0x70>
    f72e:	46c0      	nop			; (mov r8, r8)
    f730:	2000139c 	.word	0x2000139c
    f734:	0000cda5 	.word	0x0000cda5

0000f738 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    f738:	b530      	push	{r4, r5, lr}
    f73a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    f73c:	2800      	cmp	r0, #0
    f73e:	db34      	blt.n	f7aa <recv+0x72>
    f740:	2900      	cmp	r1, #0
    f742:	d035      	beq.n	f7b0 <recv+0x78>
    f744:	2a00      	cmp	r2, #0
    f746:	d036      	beq.n	f7b6 <recv+0x7e>
    f748:	0105      	lsls	r5, r0, #4
    f74a:	4c1e      	ldr	r4, [pc, #120]	; (f7c4 <recv+0x8c>)
    f74c:	1964      	adds	r4, r4, r5
    f74e:	7aa4      	ldrb	r4, [r4, #10]
    f750:	2c01      	cmp	r4, #1
    f752:	d133      	bne.n	f7bc <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    f754:	4c1b      	ldr	r4, [pc, #108]	; (f7c4 <recv+0x8c>)
    f756:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    f758:	1964      	adds	r4, r4, r5
    f75a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    f75c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    f75e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    f760:	2900      	cmp	r1, #0
    f762:	d11d      	bne.n	f7a0 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    f764:	2101      	movs	r1, #1
    f766:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f768:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    f76a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f76c:	07d2      	lsls	r2, r2, #31
    f76e:	d500      	bpl.n	f772 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    f770:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    f772:	2b00      	cmp	r3, #0
    f774:	d117      	bne.n	f7a6 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    f776:	3b01      	subs	r3, #1
    f778:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    f77a:	aa04      	add	r2, sp, #16
    f77c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    f77e:	0100      	lsls	r0, r0, #4
    f780:	4b10      	ldr	r3, [pc, #64]	; (f7c4 <recv+0x8c>)
    f782:	1818      	adds	r0, r3, r0
    f784:	88c3      	ldrh	r3, [r0, #6]
    f786:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    f788:	2300      	movs	r3, #0
    f78a:	9302      	str	r3, [sp, #8]
    f78c:	9301      	str	r3, [sp, #4]
    f78e:	9300      	str	r3, [sp, #0]
    f790:	3308      	adds	r3, #8
    f792:	2002      	movs	r0, #2
    f794:	4c0c      	ldr	r4, [pc, #48]	; (f7c8 <recv+0x90>)
    f796:	47a0      	blx	r4
    f798:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    f79a:	2800      	cmp	r0, #0
    f79c:	d000      	beq.n	f7a0 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    f79e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    f7a0:	0010      	movs	r0, r2
    f7a2:	b007      	add	sp, #28
    f7a4:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    f7a6:	9304      	str	r3, [sp, #16]
    f7a8:	e7e7      	b.n	f77a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f7aa:	2206      	movs	r2, #6
    f7ac:	4252      	negs	r2, r2
    f7ae:	e7f7      	b.n	f7a0 <recv+0x68>
    f7b0:	2206      	movs	r2, #6
    f7b2:	4252      	negs	r2, r2
    f7b4:	e7f4      	b.n	f7a0 <recv+0x68>
    f7b6:	2206      	movs	r2, #6
    f7b8:	4252      	negs	r2, r2
    f7ba:	e7f1      	b.n	f7a0 <recv+0x68>
    f7bc:	2206      	movs	r2, #6
    f7be:	4252      	negs	r2, r2
    f7c0:	e7ee      	b.n	f7a0 <recv+0x68>
    f7c2:	46c0      	nop			; (mov r8, r8)
    f7c4:	2000139c 	.word	0x2000139c
    f7c8:	0000cda5 	.word	0x0000cda5

0000f7cc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    f7cc:	b530      	push	{r4, r5, lr}
    f7ce:	b087      	sub	sp, #28
    f7d0:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    f7d2:	481e      	ldr	r0, [pc, #120]	; (f84c <close+0x80>)
    f7d4:	4d1e      	ldr	r5, [pc, #120]	; (f850 <close+0x84>)
    f7d6:	47a8      	blx	r5
    f7d8:	0021      	movs	r1, r4
    f7da:	481e      	ldr	r0, [pc, #120]	; (f854 <close+0x88>)
    f7dc:	47a8      	blx	r5
    f7de:	200d      	movs	r0, #13
    f7e0:	4b1d      	ldr	r3, [pc, #116]	; (f858 <close+0x8c>)
    f7e2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    f7e4:	2c00      	cmp	r4, #0
    f7e6:	db2a      	blt.n	f83e <close+0x72>
    f7e8:	0122      	lsls	r2, r4, #4
    f7ea:	4b1c      	ldr	r3, [pc, #112]	; (f85c <close+0x90>)
    f7ec:	189b      	adds	r3, r3, r2
    f7ee:	7a9b      	ldrb	r3, [r3, #10]
    f7f0:	2b01      	cmp	r3, #1
    f7f2:	d127      	bne.n	f844 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    f7f4:	a905      	add	r1, sp, #20
    f7f6:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    f7f8:	4b18      	ldr	r3, [pc, #96]	; (f85c <close+0x90>)
    f7fa:	189b      	adds	r3, r3, r2
    f7fc:	88da      	ldrh	r2, [r3, #6]
    f7fe:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    f800:	2200      	movs	r2, #0
    f802:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    f804:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f806:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    f808:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f80a:	07db      	lsls	r3, r3, #31
    f80c:	d500      	bpl.n	f810 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    f80e:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    f810:	2300      	movs	r3, #0
    f812:	9302      	str	r3, [sp, #8]
    f814:	9301      	str	r3, [sp, #4]
    f816:	9300      	str	r3, [sp, #0]
    f818:	3304      	adds	r3, #4
    f81a:	aa05      	add	r2, sp, #20
    f81c:	2002      	movs	r0, #2
    f81e:	4d10      	ldr	r5, [pc, #64]	; (f860 <close+0x94>)
    f820:	47a8      	blx	r5
    f822:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f824:	d001      	beq.n	f82a <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    f826:	2509      	movs	r5, #9
    f828:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    f82a:	0124      	lsls	r4, r4, #4
    f82c:	480b      	ldr	r0, [pc, #44]	; (f85c <close+0x90>)
    f82e:	1820      	adds	r0, r4, r0
    f830:	2210      	movs	r2, #16
    f832:	2100      	movs	r1, #0
    f834:	4b0b      	ldr	r3, [pc, #44]	; (f864 <close+0x98>)
    f836:	4798      	blx	r3
	}
	return s8Ret;
}
    f838:	0028      	movs	r0, r5
    f83a:	b007      	add	sp, #28
    f83c:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f83e:	2506      	movs	r5, #6
    f840:	426d      	negs	r5, r5
    f842:	e7f9      	b.n	f838 <close+0x6c>
    f844:	2506      	movs	r5, #6
    f846:	426d      	negs	r5, r5
    f848:	e7f6      	b.n	f838 <close+0x6c>
    f84a:	46c0      	nop			; (mov r8, r8)
    f84c:	000187e8 	.word	0x000187e8
    f850:	00016be1 	.word	0x00016be1
    f854:	00019260 	.word	0x00019260
    f858:	00016c15 	.word	0x00016c15
    f85c:	2000139c 	.word	0x2000139c
    f860:	0000cda5 	.word	0x0000cda5
    f864:	0000cc91 	.word	0x0000cc91

0000f868 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    f868:	b570      	push	{r4, r5, r6, lr}
    f86a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    f86c:	2300      	movs	r3, #0
    f86e:	9301      	str	r3, [sp, #4]
    f870:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    f872:	2100      	movs	r1, #0
    f874:	7802      	ldrb	r2, [r0, #0]
    f876:	1c44      	adds	r4, r0, #1
    f878:	3005      	adds	r0, #5
    f87a:	000b      	movs	r3, r1
    f87c:	e009      	b.n	f892 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    f87e:	009d      	lsls	r5, r3, #2
    f880:	195b      	adds	r3, r3, r5
    f882:	005b      	lsls	r3, r3, #1
    f884:	189b      	adds	r3, r3, r2
    f886:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    f888:	0022      	movs	r2, r4
    f88a:	3401      	adds	r4, #1
			if(j > 4)
    f88c:	42a0      	cmp	r0, r4
    f88e:	d00a      	beq.n	f8a6 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    f890:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    f892:	2a2e      	cmp	r2, #46	; 0x2e
    f894:	d00a      	beq.n	f8ac <nmi_inet_addr+0x44>
    f896:	2a00      	cmp	r2, #0
    f898:	d00c      	beq.n	f8b4 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    f89a:	3a30      	subs	r2, #48	; 0x30
    f89c:	b2d2      	uxtb	r2, r2
    f89e:	2a09      	cmp	r2, #9
    f8a0:	d9ed      	bls.n	f87e <nmi_inet_addr+0x16>
				return 0;
    f8a2:	2000      	movs	r0, #0
    f8a4:	e000      	b.n	f8a8 <nmi_inet_addr+0x40>
				return 0;
    f8a6:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    f8a8:	b002      	add	sp, #8
    f8aa:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    f8ac:	466a      	mov	r2, sp
    f8ae:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f8b0:	0020      	movs	r0, r4
    f8b2:	e002      	b.n	f8ba <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    f8b4:	466a      	mov	r2, sp
    f8b6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f8b8:	0020      	movs	r0, r4
    f8ba:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    f8bc:	2e04      	cmp	r6, #4
    f8be:	d1d9      	bne.n	f874 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    f8c0:	2204      	movs	r2, #4
    f8c2:	4669      	mov	r1, sp
    f8c4:	a801      	add	r0, sp, #4
    f8c6:	4b02      	ldr	r3, [pc, #8]	; (f8d0 <nmi_inet_addr+0x68>)
    f8c8:	4798      	blx	r3
	return u32IP;
    f8ca:	9801      	ldr	r0, [sp, #4]
    f8cc:	e7ec      	b.n	f8a8 <nmi_inet_addr+0x40>
    f8ce:	46c0      	nop			; (mov r8, r8)
    f8d0:	0000cc7d 	.word	0x0000cc7d

0000f8d4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    f8d4:	b510      	push	{r4, lr}
    f8d6:	b084      	sub	sp, #16
    f8d8:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    f8da:	4b0b      	ldr	r3, [pc, #44]	; (f908 <gethostbyname+0x34>)
    f8dc:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    f8de:	b2c3      	uxtb	r3, r0
    f8e0:	2b40      	cmp	r3, #64	; 0x40
    f8e2:	d80d      	bhi.n	f900 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    f8e4:	23ff      	movs	r3, #255	; 0xff
    f8e6:	4003      	ands	r3, r0
    f8e8:	3301      	adds	r3, #1
    f8ea:	2200      	movs	r2, #0
    f8ec:	9202      	str	r2, [sp, #8]
    f8ee:	9201      	str	r2, [sp, #4]
    f8f0:	9200      	str	r2, [sp, #0]
    f8f2:	0022      	movs	r2, r4
    f8f4:	214a      	movs	r1, #74	; 0x4a
    f8f6:	2002      	movs	r0, #2
    f8f8:	4c04      	ldr	r4, [pc, #16]	; (f90c <gethostbyname+0x38>)
    f8fa:	47a0      	blx	r4
	}
	return s8Err;
}
    f8fc:	b004      	add	sp, #16
    f8fe:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    f900:	2006      	movs	r0, #6
    f902:	4240      	negs	r0, r0
    f904:	e7fa      	b.n	f8fc <gethostbyname+0x28>
    f906:	46c0      	nop			; (mov r8, r8)
    f908:	0000cca1 	.word	0x0000cca1
    f90c:	0000cda5 	.word	0x0000cda5

0000f910 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    f910:	b570      	push	{r4, r5, r6, lr}
    f912:	b082      	sub	sp, #8
    f914:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f916:	4b2a      	ldr	r3, [pc, #168]	; (f9c0 <spi_flash_enable+0xb0>)
    f918:	4798      	blx	r3
    f91a:	0500      	lsls	r0, r0, #20
    f91c:	0d00      	lsrs	r0, r0, #20
    f91e:	4b29      	ldr	r3, [pc, #164]	; (f9c4 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    f920:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f922:	4298      	cmp	r0, r3
    f924:	d802      	bhi.n	f92c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    f926:	0028      	movs	r0, r5
    f928:	b002      	add	sp, #8
    f92a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    f92c:	a901      	add	r1, sp, #4
    f92e:	4826      	ldr	r0, [pc, #152]	; (f9c8 <spi_flash_enable+0xb8>)
    f930:	4b26      	ldr	r3, [pc, #152]	; (f9cc <spi_flash_enable+0xbc>)
    f932:	4798      	blx	r3
    f934:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    f936:	d1f6      	bne.n	f926 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    f938:	4b25      	ldr	r3, [pc, #148]	; (f9d0 <spi_flash_enable+0xc0>)
    f93a:	9a01      	ldr	r2, [sp, #4]
    f93c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    f93e:	4925      	ldr	r1, [pc, #148]	; (f9d4 <spi_flash_enable+0xc4>)
    f940:	4319      	orrs	r1, r3
    f942:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f944:	4820      	ldr	r0, [pc, #128]	; (f9c8 <spi_flash_enable+0xb8>)
    f946:	4b24      	ldr	r3, [pc, #144]	; (f9d8 <spi_flash_enable+0xc8>)
    f948:	4798      	blx	r3
		if(enable) {
    f94a:	2c00      	cmp	r4, #0
    f94c:	d020      	beq.n	f990 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f94e:	2100      	movs	r1, #0
    f950:	4822      	ldr	r0, [pc, #136]	; (f9dc <spi_flash_enable+0xcc>)
    f952:	4c21      	ldr	r4, [pc, #132]	; (f9d8 <spi_flash_enable+0xc8>)
    f954:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f956:	21ab      	movs	r1, #171	; 0xab
    f958:	4821      	ldr	r0, [pc, #132]	; (f9e0 <spi_flash_enable+0xd0>)
    f95a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f95c:	2101      	movs	r1, #1
    f95e:	4821      	ldr	r0, [pc, #132]	; (f9e4 <spi_flash_enable+0xd4>)
    f960:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f962:	2100      	movs	r1, #0
    f964:	4820      	ldr	r0, [pc, #128]	; (f9e8 <spi_flash_enable+0xd8>)
    f966:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    f968:	2181      	movs	r1, #129	; 0x81
    f96a:	4820      	ldr	r0, [pc, #128]	; (f9ec <spi_flash_enable+0xdc>)
    f96c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f96e:	4e20      	ldr	r6, [pc, #128]	; (f9f0 <spi_flash_enable+0xe0>)
    f970:	4c20      	ldr	r4, [pc, #128]	; (f9f4 <spi_flash_enable+0xe4>)
    f972:	0030      	movs	r0, r6
    f974:	47a0      	blx	r4
    f976:	2801      	cmp	r0, #1
    f978:	d1fb      	bne.n	f972 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    f97a:	4b15      	ldr	r3, [pc, #84]	; (f9d0 <spi_flash_enable+0xc0>)
    f97c:	9a01      	ldr	r2, [sp, #4]
    f97e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    f980:	2180      	movs	r1, #128	; 0x80
    f982:	0249      	lsls	r1, r1, #9
    f984:	4319      	orrs	r1, r3
    f986:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f988:	480f      	ldr	r0, [pc, #60]	; (f9c8 <spi_flash_enable+0xb8>)
    f98a:	4b13      	ldr	r3, [pc, #76]	; (f9d8 <spi_flash_enable+0xc8>)
    f98c:	4798      	blx	r3
    f98e:	e7ca      	b.n	f926 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f990:	2100      	movs	r1, #0
    f992:	4812      	ldr	r0, [pc, #72]	; (f9dc <spi_flash_enable+0xcc>)
    f994:	4c10      	ldr	r4, [pc, #64]	; (f9d8 <spi_flash_enable+0xc8>)
    f996:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f998:	21b9      	movs	r1, #185	; 0xb9
    f99a:	4811      	ldr	r0, [pc, #68]	; (f9e0 <spi_flash_enable+0xd0>)
    f99c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f99e:	2101      	movs	r1, #1
    f9a0:	4810      	ldr	r0, [pc, #64]	; (f9e4 <spi_flash_enable+0xd4>)
    f9a2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f9a4:	2100      	movs	r1, #0
    f9a6:	4810      	ldr	r0, [pc, #64]	; (f9e8 <spi_flash_enable+0xd8>)
    f9a8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    f9aa:	2181      	movs	r1, #129	; 0x81
    f9ac:	480f      	ldr	r0, [pc, #60]	; (f9ec <spi_flash_enable+0xdc>)
    f9ae:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f9b0:	4e0f      	ldr	r6, [pc, #60]	; (f9f0 <spi_flash_enable+0xe0>)
    f9b2:	4c10      	ldr	r4, [pc, #64]	; (f9f4 <spi_flash_enable+0xe4>)
    f9b4:	0030      	movs	r0, r6
    f9b6:	47a0      	blx	r4
    f9b8:	2801      	cmp	r0, #1
    f9ba:	d1fb      	bne.n	f9b4 <spi_flash_enable+0xa4>
    f9bc:	e7dd      	b.n	f97a <spi_flash_enable+0x6a>
    f9be:	46c0      	nop			; (mov r8, r8)
    f9c0:	0000dc91 	.word	0x0000dc91
    f9c4:	0000039f 	.word	0x0000039f
    f9c8:	00001410 	.word	0x00001410
    f9cc:	0000e0e1 	.word	0x0000e0e1
    f9d0:	f8888fff 	.word	0xf8888fff
    f9d4:	01111000 	.word	0x01111000
    f9d8:	0000e0ed 	.word	0x0000e0ed
    f9dc:	00010208 	.word	0x00010208
    f9e0:	0001020c 	.word	0x0001020c
    f9e4:	00010214 	.word	0x00010214
    f9e8:	0001021c 	.word	0x0001021c
    f9ec:	00010204 	.word	0x00010204
    f9f0:	00010218 	.word	0x00010218
    f9f4:	0000e0d5 	.word	0x0000e0d5

0000f9f8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    f9f8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f9fa:	2301      	movs	r3, #1
    f9fc:	2800      	cmp	r0, #0
    f9fe:	d001      	beq.n	fa04 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    fa00:	0018      	movs	r0, r3
    fa02:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    fa04:	4b01      	ldr	r3, [pc, #4]	; (fa0c <mem_test_unit_ready+0x14>)
    fa06:	4798      	blx	r3
    fa08:	0003      	movs	r3, r0
    fa0a:	e7f9      	b.n	fa00 <mem_test_unit_ready+0x8>
    fa0c:	0000bffd 	.word	0x0000bffd

0000fa10 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    fa10:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    fa12:	2301      	movs	r3, #1
    fa14:	2800      	cmp	r0, #0
    fa16:	d001      	beq.n	fa1c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    fa18:	0018      	movs	r0, r3
    fa1a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    fa1c:	0008      	movs	r0, r1
    fa1e:	4b02      	ldr	r3, [pc, #8]	; (fa28 <mem_read_capacity+0x18>)
    fa20:	4798      	blx	r3
    fa22:	0003      	movs	r3, r0
    fa24:	e7f8      	b.n	fa18 <mem_read_capacity+0x8>
    fa26:	46c0      	nop			; (mov r8, r8)
    fa28:	0000c02d 	.word	0x0000c02d

0000fa2c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    fa2c:	4243      	negs	r3, r0
    fa2e:	4158      	adcs	r0, r3
    fa30:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    fa32:	4770      	bx	lr

0000fa34 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    fa34:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    fa36:	2301      	movs	r3, #1
    fa38:	2800      	cmp	r0, #0
    fa3a:	d001      	beq.n	fa40 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    fa3c:	0018      	movs	r0, r3
    fa3e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    fa40:	4b01      	ldr	r3, [pc, #4]	; (fa48 <mem_wr_protect+0x14>)
    fa42:	4798      	blx	r3
    fa44:	0003      	movs	r3, r0
    fa46:	e7f9      	b.n	fa3c <mem_wr_protect+0x8>
    fa48:	0000c03d 	.word	0x0000c03d

0000fa4c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    fa4c:	b510      	push	{r4, lr}
    fa4e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    fa50:	2301      	movs	r3, #1
    fa52:	2800      	cmp	r0, #0
    fa54:	d001      	beq.n	fa5a <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    fa56:	0018      	movs	r0, r3
    fa58:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    fa5a:	0011      	movs	r1, r2
    fa5c:	0020      	movs	r0, r4
    fa5e:	4b02      	ldr	r3, [pc, #8]	; (fa68 <memory_2_ram+0x1c>)
    fa60:	4798      	blx	r3
    fa62:	0003      	movs	r3, r0
    fa64:	e7f7      	b.n	fa56 <memory_2_ram+0xa>
    fa66:	46c0      	nop			; (mov r8, r8)
    fa68:	0000c091 	.word	0x0000c091

0000fa6c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    fa6c:	b510      	push	{r4, lr}
    fa6e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    fa70:	2301      	movs	r3, #1
    fa72:	2800      	cmp	r0, #0
    fa74:	d001      	beq.n	fa7a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    fa76:	0018      	movs	r0, r3
    fa78:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    fa7a:	0011      	movs	r1, r2
    fa7c:	0020      	movs	r0, r4
    fa7e:	4b02      	ldr	r3, [pc, #8]	; (fa88 <ram_2_memory+0x1c>)
    fa80:	4798      	blx	r3
    fa82:	0003      	movs	r3, r0
    fa84:	e7f7      	b.n	fa76 <ram_2_memory+0xa>
    fa86:	46c0      	nop			; (mov r8, r8)
    fa88:	0000c0e9 	.word	0x0000c0e9

0000fa8c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    fa8c:	4b0c      	ldr	r3, [pc, #48]	; (fac0 <cpu_irq_enter_critical+0x34>)
    fa8e:	681b      	ldr	r3, [r3, #0]
    fa90:	2b00      	cmp	r3, #0
    fa92:	d106      	bne.n	faa2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    fa94:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    fa98:	2b00      	cmp	r3, #0
    fa9a:	d007      	beq.n	faac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    fa9c:	2200      	movs	r2, #0
    fa9e:	4b09      	ldr	r3, [pc, #36]	; (fac4 <cpu_irq_enter_critical+0x38>)
    faa0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    faa2:	4a07      	ldr	r2, [pc, #28]	; (fac0 <cpu_irq_enter_critical+0x34>)
    faa4:	6813      	ldr	r3, [r2, #0]
    faa6:	3301      	adds	r3, #1
    faa8:	6013      	str	r3, [r2, #0]
}
    faaa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    faac:	b672      	cpsid	i
    faae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    fab2:	2200      	movs	r2, #0
    fab4:	4b04      	ldr	r3, [pc, #16]	; (fac8 <cpu_irq_enter_critical+0x3c>)
    fab6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    fab8:	3201      	adds	r2, #1
    faba:	4b02      	ldr	r3, [pc, #8]	; (fac4 <cpu_irq_enter_critical+0x38>)
    fabc:	701a      	strb	r2, [r3, #0]
    fabe:	e7f0      	b.n	faa2 <cpu_irq_enter_critical+0x16>
    fac0:	2000030c 	.word	0x2000030c
    fac4:	20000310 	.word	0x20000310
    fac8:	2000006e 	.word	0x2000006e

0000facc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    facc:	4b08      	ldr	r3, [pc, #32]	; (faf0 <cpu_irq_leave_critical+0x24>)
    face:	681a      	ldr	r2, [r3, #0]
    fad0:	3a01      	subs	r2, #1
    fad2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    fad4:	681b      	ldr	r3, [r3, #0]
    fad6:	2b00      	cmp	r3, #0
    fad8:	d109      	bne.n	faee <cpu_irq_leave_critical+0x22>
    fada:	4b06      	ldr	r3, [pc, #24]	; (faf4 <cpu_irq_leave_critical+0x28>)
    fadc:	781b      	ldrb	r3, [r3, #0]
    fade:	2b00      	cmp	r3, #0
    fae0:	d005      	beq.n	faee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    fae2:	2201      	movs	r2, #1
    fae4:	4b04      	ldr	r3, [pc, #16]	; (faf8 <cpu_irq_leave_critical+0x2c>)
    fae6:	701a      	strb	r2, [r3, #0]
    fae8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    faec:	b662      	cpsie	i
	}
}
    faee:	4770      	bx	lr
    faf0:	2000030c 	.word	0x2000030c
    faf4:	20000310 	.word	0x20000310
    faf8:	2000006e 	.word	0x2000006e

0000fafc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    fafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fafe:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    fb00:	ac01      	add	r4, sp, #4
    fb02:	2501      	movs	r5, #1
    fb04:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    fb06:	2700      	movs	r7, #0
    fb08:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    fb0a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    fb0c:	0021      	movs	r1, r4
    fb0e:	2017      	movs	r0, #23
    fb10:	4e06      	ldr	r6, [pc, #24]	; (fb2c <system_board_init+0x30>)
    fb12:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    fb14:	2280      	movs	r2, #128	; 0x80
    fb16:	0412      	lsls	r2, r2, #16
    fb18:	4b05      	ldr	r3, [pc, #20]	; (fb30 <system_board_init+0x34>)
    fb1a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    fb1c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    fb1e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    fb20:	0021      	movs	r1, r4
    fb22:	2037      	movs	r0, #55	; 0x37
    fb24:	47b0      	blx	r6
}
    fb26:	b003      	add	sp, #12
    fb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb2a:	46c0      	nop			; (mov r8, r8)
    fb2c:	0000fd05 	.word	0x0000fd05
    fb30:	41004400 	.word	0x41004400

0000fb34 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fb34:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    fb36:	2a00      	cmp	r2, #0
    fb38:	d001      	beq.n	fb3e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    fb3a:	0018      	movs	r0, r3
    fb3c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    fb3e:	008b      	lsls	r3, r1, #2
    fb40:	4a06      	ldr	r2, [pc, #24]	; (fb5c <extint_register_callback+0x28>)
    fb42:	589b      	ldr	r3, [r3, r2]
    fb44:	2b00      	cmp	r3, #0
    fb46:	d003      	beq.n	fb50 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    fb48:	4283      	cmp	r3, r0
    fb4a:	d005      	beq.n	fb58 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    fb4c:	231d      	movs	r3, #29
    fb4e:	e7f4      	b.n	fb3a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    fb50:	0089      	lsls	r1, r1, #2
    fb52:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    fb54:	2300      	movs	r3, #0
    fb56:	e7f0      	b.n	fb3a <extint_register_callback+0x6>
		return STATUS_OK;
    fb58:	2300      	movs	r3, #0
    fb5a:	e7ee      	b.n	fb3a <extint_register_callback+0x6>
    fb5c:	2000145c 	.word	0x2000145c

0000fb60 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fb60:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    fb62:	2900      	cmp	r1, #0
    fb64:	d001      	beq.n	fb6a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    fb66:	0018      	movs	r0, r3
    fb68:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    fb6a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    fb6c:	281f      	cmp	r0, #31
    fb6e:	d800      	bhi.n	fb72 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    fb70:	4a02      	ldr	r2, [pc, #8]	; (fb7c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    fb72:	2301      	movs	r3, #1
    fb74:	4083      	lsls	r3, r0
    fb76:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    fb78:	2300      	movs	r3, #0
    fb7a:	e7f4      	b.n	fb66 <extint_chan_enable_callback+0x6>
    fb7c:	40001800 	.word	0x40001800

0000fb80 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fb80:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    fb82:	2900      	cmp	r1, #0
    fb84:	d001      	beq.n	fb8a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    fb86:	0018      	movs	r0, r3
    fb88:	4770      	bx	lr
		return NULL;
    fb8a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    fb8c:	281f      	cmp	r0, #31
    fb8e:	d800      	bhi.n	fb92 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    fb90:	4a02      	ldr	r2, [pc, #8]	; (fb9c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    fb92:	2301      	movs	r3, #1
    fb94:	4083      	lsls	r3, r0
    fb96:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    fb98:	2300      	movs	r3, #0
    fb9a:	e7f4      	b.n	fb86 <extint_chan_disable_callback+0x6>
    fb9c:	40001800 	.word	0x40001800

0000fba0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    fba0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fba2:	2200      	movs	r2, #0
    fba4:	4b10      	ldr	r3, [pc, #64]	; (fbe8 <EIC_Handler+0x48>)
    fba6:	701a      	strb	r2, [r3, #0]
    fba8:	2300      	movs	r3, #0
    fbaa:	4910      	ldr	r1, [pc, #64]	; (fbec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    fbac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fbae:	4e10      	ldr	r6, [pc, #64]	; (fbf0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    fbb0:	4c0d      	ldr	r4, [pc, #52]	; (fbe8 <EIC_Handler+0x48>)
    fbb2:	e00a      	b.n	fbca <EIC_Handler+0x2a>
		return eics[eic_index];
    fbb4:	490d      	ldr	r1, [pc, #52]	; (fbec <EIC_Handler+0x4c>)
    fbb6:	e008      	b.n	fbca <EIC_Handler+0x2a>
    fbb8:	7823      	ldrb	r3, [r4, #0]
    fbba:	3301      	adds	r3, #1
    fbbc:	b2db      	uxtb	r3, r3
    fbbe:	7023      	strb	r3, [r4, #0]
    fbc0:	2b0f      	cmp	r3, #15
    fbc2:	d810      	bhi.n	fbe6 <EIC_Handler+0x46>
		return NULL;
    fbc4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    fbc6:	2b1f      	cmp	r3, #31
    fbc8:	d9f4      	bls.n	fbb4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    fbca:	0028      	movs	r0, r5
    fbcc:	4018      	ands	r0, r3
    fbce:	2201      	movs	r2, #1
    fbd0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    fbd2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    fbd4:	4210      	tst	r0, r2
    fbd6:	d0ef      	beq.n	fbb8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    fbd8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    fbda:	009b      	lsls	r3, r3, #2
    fbdc:	599b      	ldr	r3, [r3, r6]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d0ea      	beq.n	fbb8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    fbe2:	4798      	blx	r3
    fbe4:	e7e8      	b.n	fbb8 <EIC_Handler+0x18>
			}
		}
	}
}
    fbe6:	bd70      	pop	{r4, r5, r6, pc}
    fbe8:	20001458 	.word	0x20001458
    fbec:	40001800 	.word	0x40001800
    fbf0:	2000145c 	.word	0x2000145c

0000fbf4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    fbf4:	4a04      	ldr	r2, [pc, #16]	; (fc08 <_extint_enable+0x14>)
    fbf6:	7813      	ldrb	r3, [r2, #0]
    fbf8:	2102      	movs	r1, #2
    fbfa:	430b      	orrs	r3, r1
    fbfc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fbfe:	7853      	ldrb	r3, [r2, #1]
    fc00:	b25b      	sxtb	r3, r3
    fc02:	2b00      	cmp	r3, #0
    fc04:	dbfb      	blt.n	fbfe <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    fc06:	4770      	bx	lr
    fc08:	40001800 	.word	0x40001800

0000fc0c <_system_extint_init>:
{
    fc0c:	b500      	push	{lr}
    fc0e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    fc10:	4a12      	ldr	r2, [pc, #72]	; (fc5c <_system_extint_init+0x50>)
    fc12:	6993      	ldr	r3, [r2, #24]
    fc14:	2140      	movs	r1, #64	; 0x40
    fc16:	430b      	orrs	r3, r1
    fc18:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    fc1a:	a901      	add	r1, sp, #4
    fc1c:	2300      	movs	r3, #0
    fc1e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    fc20:	2005      	movs	r0, #5
    fc22:	4b0f      	ldr	r3, [pc, #60]	; (fc60 <_system_extint_init+0x54>)
    fc24:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    fc26:	2005      	movs	r0, #5
    fc28:	4b0e      	ldr	r3, [pc, #56]	; (fc64 <_system_extint_init+0x58>)
    fc2a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    fc2c:	4a0e      	ldr	r2, [pc, #56]	; (fc68 <_system_extint_init+0x5c>)
    fc2e:	7813      	ldrb	r3, [r2, #0]
    fc30:	2101      	movs	r1, #1
    fc32:	430b      	orrs	r3, r1
    fc34:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    fc36:	7853      	ldrb	r3, [r2, #1]
    fc38:	b25b      	sxtb	r3, r3
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	dbfb      	blt.n	fc36 <_system_extint_init+0x2a>
    fc3e:	4b0b      	ldr	r3, [pc, #44]	; (fc6c <_system_extint_init+0x60>)
    fc40:	0019      	movs	r1, r3
    fc42:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    fc44:	2200      	movs	r2, #0
    fc46:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    fc48:	4299      	cmp	r1, r3
    fc4a:	d1fc      	bne.n	fc46 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fc4c:	2210      	movs	r2, #16
    fc4e:	4b08      	ldr	r3, [pc, #32]	; (fc70 <_system_extint_init+0x64>)
    fc50:	601a      	str	r2, [r3, #0]
	_extint_enable();
    fc52:	4b08      	ldr	r3, [pc, #32]	; (fc74 <_system_extint_init+0x68>)
    fc54:	4798      	blx	r3
}
    fc56:	b003      	add	sp, #12
    fc58:	bd00      	pop	{pc}
    fc5a:	46c0      	nop			; (mov r8, r8)
    fc5c:	40000400 	.word	0x40000400
    fc60:	00011759 	.word	0x00011759
    fc64:	000116cd 	.word	0x000116cd
    fc68:	40001800 	.word	0x40001800
    fc6c:	2000145c 	.word	0x2000145c
    fc70:	e000e100 	.word	0xe000e100
    fc74:	0000fbf5 	.word	0x0000fbf5

0000fc78 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    fc78:	2300      	movs	r3, #0
    fc7a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    fc7c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    fc7e:	2201      	movs	r2, #1
    fc80:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    fc82:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    fc84:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    fc86:	3302      	adds	r3, #2
    fc88:	72c3      	strb	r3, [r0, #11]
}
    fc8a:	4770      	bx	lr

0000fc8c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc8e:	b083      	sub	sp, #12
    fc90:	0005      	movs	r5, r0
    fc92:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fc94:	a901      	add	r1, sp, #4
    fc96:	2300      	movs	r3, #0
    fc98:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    fc9a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    fc9c:	7923      	ldrb	r3, [r4, #4]
    fc9e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    fca0:	7a23      	ldrb	r3, [r4, #8]
    fca2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    fca4:	7820      	ldrb	r0, [r4, #0]
    fca6:	4b15      	ldr	r3, [pc, #84]	; (fcfc <extint_chan_set_config+0x70>)
    fca8:	4798      	blx	r3
		return NULL;
    fcaa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    fcac:	2d1f      	cmp	r5, #31
    fcae:	d800      	bhi.n	fcb2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    fcb0:	4813      	ldr	r0, [pc, #76]	; (fd00 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    fcb2:	2207      	movs	r2, #7
    fcb4:	402a      	ands	r2, r5
    fcb6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    fcb8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    fcba:	7aa3      	ldrb	r3, [r4, #10]
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d001      	beq.n	fcc4 <extint_chan_set_config+0x38>
    fcc0:	2308      	movs	r3, #8
    fcc2:	431f      	orrs	r7, r3
    fcc4:	08eb      	lsrs	r3, r5, #3
    fcc6:	009b      	lsls	r3, r3, #2
    fcc8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    fcca:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fccc:	260f      	movs	r6, #15
    fcce:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    fcd0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    fcd2:	4097      	lsls	r7, r2
    fcd4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    fcd6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    fcd8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    fcda:	7a63      	ldrb	r3, [r4, #9]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d106      	bne.n	fcee <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    fce0:	6943      	ldr	r3, [r0, #20]
    fce2:	2201      	movs	r2, #1
    fce4:	40aa      	lsls	r2, r5
    fce6:	4393      	bics	r3, r2
    fce8:	6143      	str	r3, [r0, #20]
	}
}
    fcea:	b003      	add	sp, #12
    fcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    fcee:	6942      	ldr	r2, [r0, #20]
    fcf0:	2301      	movs	r3, #1
    fcf2:	40ab      	lsls	r3, r5
    fcf4:	4313      	orrs	r3, r2
    fcf6:	6143      	str	r3, [r0, #20]
    fcf8:	e7f7      	b.n	fcea <extint_chan_set_config+0x5e>
    fcfa:	46c0      	nop			; (mov r8, r8)
    fcfc:	00011851 	.word	0x00011851
    fd00:	40001800 	.word	0x40001800

0000fd04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    fd04:	b500      	push	{lr}
    fd06:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    fd08:	ab01      	add	r3, sp, #4
    fd0a:	2280      	movs	r2, #128	; 0x80
    fd0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    fd0e:	780a      	ldrb	r2, [r1, #0]
    fd10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    fd12:	784a      	ldrb	r2, [r1, #1]
    fd14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    fd16:	788a      	ldrb	r2, [r1, #2]
    fd18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    fd1a:	0019      	movs	r1, r3
    fd1c:	4b01      	ldr	r3, [pc, #4]	; (fd24 <port_pin_set_config+0x20>)
    fd1e:	4798      	blx	r3
}
    fd20:	b003      	add	sp, #12
    fd22:	bd00      	pop	{pc}
    fd24:	00011851 	.word	0x00011851

0000fd28 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fd28:	6801      	ldr	r1, [r0, #0]
    fd2a:	2208      	movs	r2, #8
    fd2c:	4b05      	ldr	r3, [pc, #20]	; (fd44 <rtc_calendar_enable+0x1c>)
    fd2e:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fd30:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fd32:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fd34:	b25b      	sxtb	r3, r3
    fd36:	2b00      	cmp	r3, #0
    fd38:	dbfb      	blt.n	fd32 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    fd3a:	880b      	ldrh	r3, [r1, #0]
    fd3c:	2202      	movs	r2, #2
    fd3e:	4313      	orrs	r3, r2
    fd40:	800b      	strh	r3, [r1, #0]
}
    fd42:	4770      	bx	lr
    fd44:	e000e100 	.word	0xe000e100

0000fd48 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    fd48:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fd4a:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fd4c:	2408      	movs	r4, #8
    fd4e:	2380      	movs	r3, #128	; 0x80
    fd50:	4907      	ldr	r1, [pc, #28]	; (fd70 <rtc_calendar_disable+0x28>)
    fd52:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    fd54:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fd56:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fd58:	b25b      	sxtb	r3, r3
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	dbfb      	blt.n	fd56 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    fd5e:	23c1      	movs	r3, #193	; 0xc1
    fd60:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    fd62:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    fd64:	8813      	ldrh	r3, [r2, #0]
    fd66:	2102      	movs	r1, #2
    fd68:	438b      	bics	r3, r1
    fd6a:	8013      	strh	r3, [r2, #0]
}
    fd6c:	bd10      	pop	{r4, pc}
    fd6e:	46c0      	nop			; (mov r8, r8)
    fd70:	e000e100 	.word	0xe000e100

0000fd74 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    fd74:	b570      	push	{r4, r5, r6, lr}
    fd76:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fd78:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    fd7a:	4b07      	ldr	r3, [pc, #28]	; (fd98 <rtc_calendar_reset+0x24>)
    fd7c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    fd7e:	2300      	movs	r3, #0
    fd80:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    fd82:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    fd84:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fd86:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    fd88:	b25b      	sxtb	r3, r3
    fd8a:	2b00      	cmp	r3, #0
    fd8c:	dbfb      	blt.n	fd86 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    fd8e:	882b      	ldrh	r3, [r5, #0]
    fd90:	2201      	movs	r2, #1
    fd92:	4313      	orrs	r3, r2
    fd94:	802b      	strh	r3, [r5, #0]
}
    fd96:	bd70      	pop	{r4, r5, r6, pc}
    fd98:	0000fd49 	.word	0x0000fd49

0000fd9c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    fd9c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    fd9e:	88cb      	ldrh	r3, [r1, #6]
    fda0:	88c2      	ldrh	r2, [r0, #6]
    fda2:	1a9a      	subs	r2, r3, r2
    fda4:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    fda6:	794b      	ldrb	r3, [r1, #5]
    fda8:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    fdaa:	790c      	ldrb	r4, [r1, #4]
    fdac:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    fdae:	4323      	orrs	r3, r4
    fdb0:	788c      	ldrb	r4, [r1, #2]
    fdb2:	0324      	lsls	r4, r4, #12
    fdb4:	4323      	orrs	r3, r4
    fdb6:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    fdb8:	7902      	ldrb	r2, [r0, #4]
    fdba:	2a00      	cmp	r2, #0
    fdbc:	d105      	bne.n	fdca <rtc_calendar_time_to_register_value+0x2e>
    fdbe:	78ca      	ldrb	r2, [r1, #3]
    fdc0:	2a00      	cmp	r2, #0
    fdc2:	d002      	beq.n	fdca <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    fdc4:	2280      	movs	r2, #128	; 0x80
    fdc6:	0252      	lsls	r2, r2, #9
    fdc8:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    fdca:	7848      	ldrb	r0, [r1, #1]
    fdcc:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    fdce:	780a      	ldrb	r2, [r1, #0]
    fdd0:	4310      	orrs	r0, r2
    fdd2:	4318      	orrs	r0, r3

	return register_value;
}
    fdd4:	bd10      	pop	{r4, pc}

0000fdd6 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    fdd6:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fdd8:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    fdda:	88c4      	ldrh	r4, [r0, #6]
    fddc:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fdde:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    fde0:	018b      	lsls	r3, r1, #6
    fde2:	0f1b      	lsrs	r3, r3, #28
    fde4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    fde6:	028b      	lsls	r3, r1, #10
    fde8:	0edb      	lsrs	r3, r3, #27
    fdea:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    fdec:	7903      	ldrb	r3, [r0, #4]
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d10c      	bne.n	fe0c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    fdf2:	040b      	lsls	r3, r1, #16
    fdf4:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    fdf6:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    fdf8:	03cb      	lsls	r3, r1, #15
    fdfa:	0fdb      	lsrs	r3, r3, #31
    fdfc:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    fdfe:	0988      	lsrs	r0, r1, #6
    fe00:	233f      	movs	r3, #63	; 0x3f
    fe02:	4018      	ands	r0, r3
    fe04:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    fe06:	4019      	ands	r1, r3
    fe08:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    fe0a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    fe0c:	03cb      	lsls	r3, r1, #15
    fe0e:	0edb      	lsrs	r3, r3, #27
    fe10:	7093      	strb	r3, [r2, #2]
    fe12:	e7f4      	b.n	fdfe <rtc_calendar_register_value_to_time+0x28>

0000fe14 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    fe14:	b510      	push	{r4, lr}
    fe16:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fe18:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    fe1a:	7941      	ldrb	r1, [r0, #5]
    fe1c:	2900      	cmp	r1, #0
    fe1e:	d006      	beq.n	fe2e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    fe20:	8859      	ldrh	r1, [r3, #2]
    fe22:	0449      	lsls	r1, r1, #17
    fe24:	d50b      	bpl.n	fe3e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    fe26:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    fe28:	4b0a      	ldr	r3, [pc, #40]	; (fe54 <rtc_calendar_get_time+0x40>)
    fe2a:	4798      	blx	r3
}
    fe2c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    fe2e:	490a      	ldr	r1, [pc, #40]	; (fe58 <rtc_calendar_get_time+0x44>)
    fe30:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fe32:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fe34:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fe36:	b249      	sxtb	r1, r1
    fe38:	2900      	cmp	r1, #0
    fe3a:	dbfb      	blt.n	fe34 <rtc_calendar_get_time+0x20>
    fe3c:	e7f3      	b.n	fe26 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    fe3e:	8859      	ldrh	r1, [r3, #2]
    fe40:	24c0      	movs	r4, #192	; 0xc0
    fe42:	0224      	lsls	r4, r4, #8
    fe44:	4321      	orrs	r1, r4
    fe46:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fe48:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fe4a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fe4c:	b249      	sxtb	r1, r1
    fe4e:	2900      	cmp	r1, #0
    fe50:	dbfb      	blt.n	fe4a <rtc_calendar_get_time+0x36>
    fe52:	e7e8      	b.n	fe26 <rtc_calendar_get_time+0x12>
    fe54:	0000fdd7 	.word	0x0000fdd7
    fe58:	ffff8000 	.word	0xffff8000

0000fe5c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    fe5c:	b570      	push	{r4, r5, r6, lr}
    fe5e:	000d      	movs	r5, r1
    fe60:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    fe62:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    fe64:	2a01      	cmp	r2, #1
    fe66:	d901      	bls.n	fe6c <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    fe68:	0018      	movs	r0, r3
    fe6a:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    fe6c:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    fe6e:	4b06      	ldr	r3, [pc, #24]	; (fe88 <rtc_calendar_set_alarm+0x2c>)
    fe70:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fe72:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    fe74:	b25b      	sxtb	r3, r3
    fe76:	2b00      	cmp	r3, #0
    fe78:	dbfb      	blt.n	fe72 <rtc_calendar_set_alarm+0x16>
    fe7a:	00e4      	lsls	r4, r4, #3
    fe7c:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    fe7e:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    fe80:	7a2b      	ldrb	r3, [r5, #8]
    fe82:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    fe84:	2300      	movs	r3, #0
    fe86:	e7ef      	b.n	fe68 <rtc_calendar_set_alarm+0xc>
    fe88:	0000fd9d 	.word	0x0000fd9d

0000fe8c <rtc_calendar_init>:
{
    fe8c:	b530      	push	{r4, r5, lr}
    fe8e:	b083      	sub	sp, #12
    fe90:	0005      	movs	r5, r0
    fe92:	0014      	movs	r4, r2
	module->hw = hw;
    fe94:	6001      	str	r1, [r0, #0]
    fe96:	4a1c      	ldr	r2, [pc, #112]	; (ff08 <rtc_calendar_init+0x7c>)
    fe98:	6993      	ldr	r3, [r2, #24]
    fe9a:	2120      	movs	r1, #32
    fe9c:	430b      	orrs	r3, r1
    fe9e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    fea0:	a901      	add	r1, sp, #4
    fea2:	2302      	movs	r3, #2
    fea4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    fea6:	2004      	movs	r0, #4
    fea8:	4b18      	ldr	r3, [pc, #96]	; (ff0c <rtc_calendar_init+0x80>)
    feaa:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    feac:	2004      	movs	r0, #4
    feae:	4b18      	ldr	r3, [pc, #96]	; (ff10 <rtc_calendar_init+0x84>)
    feb0:	4798      	blx	r3
	rtc_calendar_reset(module);
    feb2:	0028      	movs	r0, r5
    feb4:	4b17      	ldr	r3, [pc, #92]	; (ff14 <rtc_calendar_init+0x88>)
    feb6:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    feb8:	7923      	ldrb	r3, [r4, #4]
    feba:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    febc:	78e3      	ldrb	r3, [r4, #3]
    febe:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    fec0:	88e3      	ldrh	r3, [r4, #6]
    fec2:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    fec4:	4b14      	ldr	r3, [pc, #80]	; (ff18 <rtc_calendar_init+0x8c>)
    fec6:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fec8:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    feca:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    fecc:	7921      	ldrb	r1, [r4, #4]
    fece:	2900      	cmp	r1, #0
    fed0:	d017      	beq.n	ff02 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fed2:	2108      	movs	r1, #8
    fed4:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    fed6:	78a1      	ldrb	r1, [r4, #2]
    fed8:	2900      	cmp	r1, #0
    feda:	d001      	beq.n	fee0 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    fedc:	2180      	movs	r1, #128	; 0x80
    fede:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    fee0:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    fee2:	78e3      	ldrb	r3, [r4, #3]
    fee4:	2b00      	cmp	r3, #0
    fee6:	d004      	beq.n	fef2 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    fee8:	8853      	ldrh	r3, [r2, #2]
    feea:	2180      	movs	r1, #128	; 0x80
    feec:	01c9      	lsls	r1, r1, #7
    feee:	430b      	orrs	r3, r1
    fef0:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    fef2:	0021      	movs	r1, r4
    fef4:	3108      	adds	r1, #8
    fef6:	2200      	movs	r2, #0
    fef8:	0028      	movs	r0, r5
    fefa:	4b08      	ldr	r3, [pc, #32]	; (ff1c <rtc_calendar_init+0x90>)
    fefc:	4798      	blx	r3
}
    fefe:	b003      	add	sp, #12
    ff00:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    ff02:	2148      	movs	r1, #72	; 0x48
    ff04:	430b      	orrs	r3, r1
    ff06:	e7e6      	b.n	fed6 <rtc_calendar_init+0x4a>
    ff08:	40000400 	.word	0x40000400
    ff0c:	00011759 	.word	0x00011759
    ff10:	000116cd 	.word	0x000116cd
    ff14:	0000fd75 	.word	0x0000fd75
    ff18:	2000149c 	.word	0x2000149c
    ff1c:	0000fe5d 	.word	0x0000fe5d

0000ff20 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    ff20:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    ff22:	4b0f      	ldr	r3, [pc, #60]	; (ff60 <RTC_Handler+0x40>)
    ff24:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    ff26:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    ff28:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    ff2a:	8a13      	ldrh	r3, [r2, #16]
    ff2c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    ff2e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    ff30:	79e3      	ldrb	r3, [r4, #7]
    ff32:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    ff34:	b258      	sxtb	r0, r3
    ff36:	2800      	cmp	r0, #0
    ff38:	db06      	blt.n	ff48 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    ff3a:	07db      	lsls	r3, r3, #31
    ff3c:	d503      	bpl.n	ff46 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    ff3e:	07cb      	lsls	r3, r1, #31
    ff40:	d40a      	bmi.n	ff58 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    ff42:	2301      	movs	r3, #1
    ff44:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    ff46:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    ff48:	078b      	lsls	r3, r1, #30
    ff4a:	d402      	bmi.n	ff52 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    ff4c:	2380      	movs	r3, #128	; 0x80
    ff4e:	7223      	strb	r3, [r4, #8]
    ff50:	e7f9      	b.n	ff46 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    ff52:	68d3      	ldr	r3, [r2, #12]
    ff54:	4798      	blx	r3
    ff56:	e7f9      	b.n	ff4c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    ff58:	6893      	ldr	r3, [r2, #8]
    ff5a:	4798      	blx	r3
    ff5c:	e7f1      	b.n	ff42 <RTC_Handler+0x22>
    ff5e:	46c0      	nop			; (mov r8, r8)
    ff60:	2000149c 	.word	0x2000149c

0000ff64 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    ff64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff66:	46de      	mov	lr, fp
    ff68:	4657      	mov	r7, sl
    ff6a:	464e      	mov	r6, r9
    ff6c:	4645      	mov	r5, r8
    ff6e:	b5e0      	push	{r5, r6, r7, lr}
    ff70:	b087      	sub	sp, #28
    ff72:	4680      	mov	r8, r0
    ff74:	9104      	str	r1, [sp, #16]
    ff76:	0016      	movs	r6, r2
    ff78:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    ff7a:	2200      	movs	r2, #0
    ff7c:	2300      	movs	r3, #0
    ff7e:	2100      	movs	r1, #0
    ff80:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    ff82:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    ff84:	2001      	movs	r0, #1
    ff86:	0021      	movs	r1, r4
    ff88:	9600      	str	r6, [sp, #0]
    ff8a:	9701      	str	r7, [sp, #4]
    ff8c:	465c      	mov	r4, fp
    ff8e:	9403      	str	r4, [sp, #12]
    ff90:	4644      	mov	r4, r8
    ff92:	9405      	str	r4, [sp, #20]
    ff94:	e013      	b.n	ffbe <long_division+0x5a>
    ff96:	2420      	movs	r4, #32
    ff98:	1a64      	subs	r4, r4, r1
    ff9a:	0005      	movs	r5, r0
    ff9c:	40e5      	lsrs	r5, r4
    ff9e:	46a8      	mov	r8, r5
    ffa0:	e014      	b.n	ffcc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    ffa2:	9c00      	ldr	r4, [sp, #0]
    ffa4:	9d01      	ldr	r5, [sp, #4]
    ffa6:	1b12      	subs	r2, r2, r4
    ffa8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    ffaa:	465c      	mov	r4, fp
    ffac:	464d      	mov	r5, r9
    ffae:	432c      	orrs	r4, r5
    ffb0:	46a3      	mov	fp, r4
    ffb2:	9c03      	ldr	r4, [sp, #12]
    ffb4:	4645      	mov	r5, r8
    ffb6:	432c      	orrs	r4, r5
    ffb8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    ffba:	3901      	subs	r1, #1
    ffbc:	d325      	bcc.n	1000a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    ffbe:	2420      	movs	r4, #32
    ffc0:	4264      	negs	r4, r4
    ffc2:	190c      	adds	r4, r1, r4
    ffc4:	d4e7      	bmi.n	ff96 <long_division+0x32>
    ffc6:	0005      	movs	r5, r0
    ffc8:	40a5      	lsls	r5, r4
    ffca:	46a8      	mov	r8, r5
    ffcc:	0004      	movs	r4, r0
    ffce:	408c      	lsls	r4, r1
    ffd0:	46a1      	mov	r9, r4
		r = r << 1;
    ffd2:	1892      	adds	r2, r2, r2
    ffd4:	415b      	adcs	r3, r3
    ffd6:	0014      	movs	r4, r2
    ffd8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    ffda:	9e05      	ldr	r6, [sp, #20]
    ffdc:	464f      	mov	r7, r9
    ffde:	403e      	ands	r6, r7
    ffe0:	46b4      	mov	ip, r6
    ffe2:	9e04      	ldr	r6, [sp, #16]
    ffe4:	4647      	mov	r7, r8
    ffe6:	403e      	ands	r6, r7
    ffe8:	46b2      	mov	sl, r6
    ffea:	4666      	mov	r6, ip
    ffec:	4657      	mov	r7, sl
    ffee:	433e      	orrs	r6, r7
    fff0:	d003      	beq.n	fffa <long_division+0x96>
			r |= 0x01;
    fff2:	0006      	movs	r6, r0
    fff4:	4326      	orrs	r6, r4
    fff6:	0032      	movs	r2, r6
    fff8:	002b      	movs	r3, r5
		if (r >= d) {
    fffa:	9c00      	ldr	r4, [sp, #0]
    fffc:	9d01      	ldr	r5, [sp, #4]
    fffe:	429d      	cmp	r5, r3
   10000:	d8db      	bhi.n	ffba <long_division+0x56>
   10002:	d1ce      	bne.n	ffa2 <long_division+0x3e>
   10004:	4294      	cmp	r4, r2
   10006:	d8d8      	bhi.n	ffba <long_division+0x56>
   10008:	e7cb      	b.n	ffa2 <long_division+0x3e>
   1000a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   1000c:	4658      	mov	r0, fp
   1000e:	0019      	movs	r1, r3
   10010:	b007      	add	sp, #28
   10012:	bc3c      	pop	{r2, r3, r4, r5}
   10014:	4690      	mov	r8, r2
   10016:	4699      	mov	r9, r3
   10018:	46a2      	mov	sl, r4
   1001a:	46ab      	mov	fp, r5
   1001c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001001e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1001e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   10020:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   10022:	2340      	movs	r3, #64	; 0x40
   10024:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   10026:	4281      	cmp	r1, r0
   10028:	d202      	bcs.n	10030 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1002a:	0018      	movs	r0, r3
   1002c:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1002e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   10030:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   10032:	1c63      	adds	r3, r4, #1
   10034:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   10036:	4288      	cmp	r0, r1
   10038:	d9f9      	bls.n	1002e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1003a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1003c:	2cff      	cmp	r4, #255	; 0xff
   1003e:	d8f4      	bhi.n	1002a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   10040:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   10042:	2300      	movs	r3, #0
   10044:	e7f1      	b.n	1002a <_sercom_get_sync_baud_val+0xc>
	...

00010048 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   10048:	b5f0      	push	{r4, r5, r6, r7, lr}
   1004a:	b083      	sub	sp, #12
   1004c:	000f      	movs	r7, r1
   1004e:	0016      	movs	r6, r2
   10050:	aa08      	add	r2, sp, #32
   10052:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   10054:	0004      	movs	r4, r0
   10056:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   10058:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1005a:	42bc      	cmp	r4, r7
   1005c:	d902      	bls.n	10064 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1005e:	0010      	movs	r0, r2
   10060:	b003      	add	sp, #12
   10062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   10064:	2b00      	cmp	r3, #0
   10066:	d114      	bne.n	10092 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   10068:	0002      	movs	r2, r0
   1006a:	0008      	movs	r0, r1
   1006c:	2100      	movs	r1, #0
   1006e:	4c19      	ldr	r4, [pc, #100]	; (100d4 <_sercom_get_async_baud_val+0x8c>)
   10070:	47a0      	blx	r4
   10072:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   10074:	003a      	movs	r2, r7
   10076:	2300      	movs	r3, #0
   10078:	2000      	movs	r0, #0
   1007a:	4c17      	ldr	r4, [pc, #92]	; (100d8 <_sercom_get_async_baud_val+0x90>)
   1007c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1007e:	2200      	movs	r2, #0
   10080:	2301      	movs	r3, #1
   10082:	1a12      	subs	r2, r2, r0
   10084:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   10086:	0c12      	lsrs	r2, r2, #16
   10088:	041b      	lsls	r3, r3, #16
   1008a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   1008c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1008e:	2200      	movs	r2, #0
   10090:	e7e5      	b.n	1005e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   10092:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   10094:	2b01      	cmp	r3, #1
   10096:	d1f9      	bne.n	1008c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   10098:	000a      	movs	r2, r1
   1009a:	2300      	movs	r3, #0
   1009c:	2100      	movs	r1, #0
   1009e:	4c0d      	ldr	r4, [pc, #52]	; (100d4 <_sercom_get_async_baud_val+0x8c>)
   100a0:	47a0      	blx	r4
   100a2:	0002      	movs	r2, r0
   100a4:	000b      	movs	r3, r1
   100a6:	9200      	str	r2, [sp, #0]
   100a8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   100aa:	0038      	movs	r0, r7
   100ac:	2100      	movs	r1, #0
   100ae:	4c0a      	ldr	r4, [pc, #40]	; (100d8 <_sercom_get_async_baud_val+0x90>)
   100b0:	47a0      	blx	r4
   100b2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   100b4:	2380      	movs	r3, #128	; 0x80
   100b6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   100b8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   100ba:	4298      	cmp	r0, r3
   100bc:	d8cf      	bhi.n	1005e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   100be:	0f79      	lsrs	r1, r7, #29
   100c0:	00f8      	lsls	r0, r7, #3
   100c2:	9a00      	ldr	r2, [sp, #0]
   100c4:	9b01      	ldr	r3, [sp, #4]
   100c6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   100c8:	00ea      	lsls	r2, r5, #3
   100ca:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   100cc:	b2d2      	uxtb	r2, r2
   100ce:	0352      	lsls	r2, r2, #13
   100d0:	432a      	orrs	r2, r5
   100d2:	e7db      	b.n	1008c <_sercom_get_async_baud_val+0x44>
   100d4:	00016985 	.word	0x00016985
   100d8:	0000ff65 	.word	0x0000ff65

000100dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   100dc:	b510      	push	{r4, lr}
   100de:	b082      	sub	sp, #8
   100e0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   100e2:	4b0e      	ldr	r3, [pc, #56]	; (1011c <sercom_set_gclk_generator+0x40>)
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	2b00      	cmp	r3, #0
   100e8:	d007      	beq.n	100fa <sercom_set_gclk_generator+0x1e>
   100ea:	2900      	cmp	r1, #0
   100ec:	d105      	bne.n	100fa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   100ee:	4b0b      	ldr	r3, [pc, #44]	; (1011c <sercom_set_gclk_generator+0x40>)
   100f0:	785b      	ldrb	r3, [r3, #1]
   100f2:	4283      	cmp	r3, r0
   100f4:	d010      	beq.n	10118 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   100f6:	201d      	movs	r0, #29
   100f8:	e00c      	b.n	10114 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   100fa:	a901      	add	r1, sp, #4
   100fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   100fe:	2013      	movs	r0, #19
   10100:	4b07      	ldr	r3, [pc, #28]	; (10120 <sercom_set_gclk_generator+0x44>)
   10102:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   10104:	2013      	movs	r0, #19
   10106:	4b07      	ldr	r3, [pc, #28]	; (10124 <sercom_set_gclk_generator+0x48>)
   10108:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   1010a:	4b04      	ldr	r3, [pc, #16]	; (1011c <sercom_set_gclk_generator+0x40>)
   1010c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   1010e:	2201      	movs	r2, #1
   10110:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   10112:	2000      	movs	r0, #0
}
   10114:	b002      	add	sp, #8
   10116:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   10118:	2000      	movs	r0, #0
   1011a:	e7fb      	b.n	10114 <sercom_set_gclk_generator+0x38>
   1011c:	20000314 	.word	0x20000314
   10120:	00011759 	.word	0x00011759
   10124:	000116cd 	.word	0x000116cd

00010128 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   10128:	4b40      	ldr	r3, [pc, #256]	; (1022c <_sercom_get_default_pad+0x104>)
   1012a:	4298      	cmp	r0, r3
   1012c:	d031      	beq.n	10192 <_sercom_get_default_pad+0x6a>
   1012e:	d90a      	bls.n	10146 <_sercom_get_default_pad+0x1e>
   10130:	4b3f      	ldr	r3, [pc, #252]	; (10230 <_sercom_get_default_pad+0x108>)
   10132:	4298      	cmp	r0, r3
   10134:	d04d      	beq.n	101d2 <_sercom_get_default_pad+0xaa>
   10136:	4b3f      	ldr	r3, [pc, #252]	; (10234 <_sercom_get_default_pad+0x10c>)
   10138:	4298      	cmp	r0, r3
   1013a:	d05a      	beq.n	101f2 <_sercom_get_default_pad+0xca>
   1013c:	4b3e      	ldr	r3, [pc, #248]	; (10238 <_sercom_get_default_pad+0x110>)
   1013e:	4298      	cmp	r0, r3
   10140:	d037      	beq.n	101b2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   10142:	2000      	movs	r0, #0
}
   10144:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   10146:	4b3d      	ldr	r3, [pc, #244]	; (1023c <_sercom_get_default_pad+0x114>)
   10148:	4298      	cmp	r0, r3
   1014a:	d00c      	beq.n	10166 <_sercom_get_default_pad+0x3e>
   1014c:	4b3c      	ldr	r3, [pc, #240]	; (10240 <_sercom_get_default_pad+0x118>)
   1014e:	4298      	cmp	r0, r3
   10150:	d1f7      	bne.n	10142 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10152:	2901      	cmp	r1, #1
   10154:	d017      	beq.n	10186 <_sercom_get_default_pad+0x5e>
   10156:	2900      	cmp	r1, #0
   10158:	d05d      	beq.n	10216 <_sercom_get_default_pad+0xee>
   1015a:	2902      	cmp	r1, #2
   1015c:	d015      	beq.n	1018a <_sercom_get_default_pad+0x62>
   1015e:	2903      	cmp	r1, #3
   10160:	d015      	beq.n	1018e <_sercom_get_default_pad+0x66>
	return 0;
   10162:	2000      	movs	r0, #0
   10164:	e7ee      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10166:	2901      	cmp	r1, #1
   10168:	d007      	beq.n	1017a <_sercom_get_default_pad+0x52>
   1016a:	2900      	cmp	r1, #0
   1016c:	d051      	beq.n	10212 <_sercom_get_default_pad+0xea>
   1016e:	2902      	cmp	r1, #2
   10170:	d005      	beq.n	1017e <_sercom_get_default_pad+0x56>
   10172:	2903      	cmp	r1, #3
   10174:	d005      	beq.n	10182 <_sercom_get_default_pad+0x5a>
	return 0;
   10176:	2000      	movs	r0, #0
   10178:	e7e4      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1017a:	4832      	ldr	r0, [pc, #200]	; (10244 <_sercom_get_default_pad+0x11c>)
   1017c:	e7e2      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1017e:	4832      	ldr	r0, [pc, #200]	; (10248 <_sercom_get_default_pad+0x120>)
   10180:	e7e0      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10182:	4832      	ldr	r0, [pc, #200]	; (1024c <_sercom_get_default_pad+0x124>)
   10184:	e7de      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10186:	4832      	ldr	r0, [pc, #200]	; (10250 <_sercom_get_default_pad+0x128>)
   10188:	e7dc      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1018a:	4832      	ldr	r0, [pc, #200]	; (10254 <_sercom_get_default_pad+0x12c>)
   1018c:	e7da      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1018e:	4832      	ldr	r0, [pc, #200]	; (10258 <_sercom_get_default_pad+0x130>)
   10190:	e7d8      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10192:	2901      	cmp	r1, #1
   10194:	d007      	beq.n	101a6 <_sercom_get_default_pad+0x7e>
   10196:	2900      	cmp	r1, #0
   10198:	d03f      	beq.n	1021a <_sercom_get_default_pad+0xf2>
   1019a:	2902      	cmp	r1, #2
   1019c:	d005      	beq.n	101aa <_sercom_get_default_pad+0x82>
   1019e:	2903      	cmp	r1, #3
   101a0:	d005      	beq.n	101ae <_sercom_get_default_pad+0x86>
	return 0;
   101a2:	2000      	movs	r0, #0
   101a4:	e7ce      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   101a6:	482d      	ldr	r0, [pc, #180]	; (1025c <_sercom_get_default_pad+0x134>)
   101a8:	e7cc      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101aa:	482d      	ldr	r0, [pc, #180]	; (10260 <_sercom_get_default_pad+0x138>)
   101ac:	e7ca      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101ae:	482d      	ldr	r0, [pc, #180]	; (10264 <_sercom_get_default_pad+0x13c>)
   101b0:	e7c8      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101b2:	2901      	cmp	r1, #1
   101b4:	d007      	beq.n	101c6 <_sercom_get_default_pad+0x9e>
   101b6:	2900      	cmp	r1, #0
   101b8:	d031      	beq.n	1021e <_sercom_get_default_pad+0xf6>
   101ba:	2902      	cmp	r1, #2
   101bc:	d005      	beq.n	101ca <_sercom_get_default_pad+0xa2>
   101be:	2903      	cmp	r1, #3
   101c0:	d005      	beq.n	101ce <_sercom_get_default_pad+0xa6>
	return 0;
   101c2:	2000      	movs	r0, #0
   101c4:	e7be      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   101c6:	4828      	ldr	r0, [pc, #160]	; (10268 <_sercom_get_default_pad+0x140>)
   101c8:	e7bc      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101ca:	4828      	ldr	r0, [pc, #160]	; (1026c <_sercom_get_default_pad+0x144>)
   101cc:	e7ba      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101ce:	4828      	ldr	r0, [pc, #160]	; (10270 <_sercom_get_default_pad+0x148>)
   101d0:	e7b8      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101d2:	2901      	cmp	r1, #1
   101d4:	d007      	beq.n	101e6 <_sercom_get_default_pad+0xbe>
   101d6:	2900      	cmp	r1, #0
   101d8:	d023      	beq.n	10222 <_sercom_get_default_pad+0xfa>
   101da:	2902      	cmp	r1, #2
   101dc:	d005      	beq.n	101ea <_sercom_get_default_pad+0xc2>
   101de:	2903      	cmp	r1, #3
   101e0:	d005      	beq.n	101ee <_sercom_get_default_pad+0xc6>
	return 0;
   101e2:	2000      	movs	r0, #0
   101e4:	e7ae      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   101e6:	4823      	ldr	r0, [pc, #140]	; (10274 <_sercom_get_default_pad+0x14c>)
   101e8:	e7ac      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101ea:	4823      	ldr	r0, [pc, #140]	; (10278 <_sercom_get_default_pad+0x150>)
   101ec:	e7aa      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101ee:	4823      	ldr	r0, [pc, #140]	; (1027c <_sercom_get_default_pad+0x154>)
   101f0:	e7a8      	b.n	10144 <_sercom_get_default_pad+0x1c>
   101f2:	2901      	cmp	r1, #1
   101f4:	d007      	beq.n	10206 <_sercom_get_default_pad+0xde>
   101f6:	2900      	cmp	r1, #0
   101f8:	d015      	beq.n	10226 <_sercom_get_default_pad+0xfe>
   101fa:	2902      	cmp	r1, #2
   101fc:	d005      	beq.n	1020a <_sercom_get_default_pad+0xe2>
   101fe:	2903      	cmp	r1, #3
   10200:	d005      	beq.n	1020e <_sercom_get_default_pad+0xe6>
	return 0;
   10202:	2000      	movs	r0, #0
   10204:	e79e      	b.n	10144 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   10206:	481e      	ldr	r0, [pc, #120]	; (10280 <_sercom_get_default_pad+0x158>)
   10208:	e79c      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1020a:	481e      	ldr	r0, [pc, #120]	; (10284 <_sercom_get_default_pad+0x15c>)
   1020c:	e79a      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1020e:	481e      	ldr	r0, [pc, #120]	; (10288 <_sercom_get_default_pad+0x160>)
   10210:	e798      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10212:	481e      	ldr	r0, [pc, #120]	; (1028c <_sercom_get_default_pad+0x164>)
   10214:	e796      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10216:	2003      	movs	r0, #3
   10218:	e794      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1021a:	481d      	ldr	r0, [pc, #116]	; (10290 <_sercom_get_default_pad+0x168>)
   1021c:	e792      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1021e:	481d      	ldr	r0, [pc, #116]	; (10294 <_sercom_get_default_pad+0x16c>)
   10220:	e790      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10222:	481d      	ldr	r0, [pc, #116]	; (10298 <_sercom_get_default_pad+0x170>)
   10224:	e78e      	b.n	10144 <_sercom_get_default_pad+0x1c>
   10226:	481d      	ldr	r0, [pc, #116]	; (1029c <_sercom_get_default_pad+0x174>)
   10228:	e78c      	b.n	10144 <_sercom_get_default_pad+0x1c>
   1022a:	46c0      	nop			; (mov r8, r8)
   1022c:	42001000 	.word	0x42001000
   10230:	42001800 	.word	0x42001800
   10234:	42001c00 	.word	0x42001c00
   10238:	42001400 	.word	0x42001400
   1023c:	42000800 	.word	0x42000800
   10240:	42000c00 	.word	0x42000c00
   10244:	00050003 	.word	0x00050003
   10248:	00060003 	.word	0x00060003
   1024c:	00070003 	.word	0x00070003
   10250:	00010003 	.word	0x00010003
   10254:	001e0003 	.word	0x001e0003
   10258:	001f0003 	.word	0x001f0003
   1025c:	00090003 	.word	0x00090003
   10260:	000a0003 	.word	0x000a0003
   10264:	000b0003 	.word	0x000b0003
   10268:	00110003 	.word	0x00110003
   1026c:	00120003 	.word	0x00120003
   10270:	00130003 	.word	0x00130003
   10274:	000d0003 	.word	0x000d0003
   10278:	000e0003 	.word	0x000e0003
   1027c:	000f0003 	.word	0x000f0003
   10280:	00170003 	.word	0x00170003
   10284:	00180003 	.word	0x00180003
   10288:	00190003 	.word	0x00190003
   1028c:	00040003 	.word	0x00040003
   10290:	00080003 	.word	0x00080003
   10294:	00100003 	.word	0x00100003
   10298:	000c0003 	.word	0x000c0003
   1029c:	00160003 	.word	0x00160003

000102a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   102a0:	b530      	push	{r4, r5, lr}
   102a2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   102a4:	4b0b      	ldr	r3, [pc, #44]	; (102d4 <_sercom_get_sercom_inst_index+0x34>)
   102a6:	466a      	mov	r2, sp
   102a8:	cb32      	ldmia	r3!, {r1, r4, r5}
   102aa:	c232      	stmia	r2!, {r1, r4, r5}
   102ac:	cb32      	ldmia	r3!, {r1, r4, r5}
   102ae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   102b0:	9b00      	ldr	r3, [sp, #0]
   102b2:	4283      	cmp	r3, r0
   102b4:	d00b      	beq.n	102ce <_sercom_get_sercom_inst_index+0x2e>
   102b6:	2301      	movs	r3, #1
   102b8:	009a      	lsls	r2, r3, #2
   102ba:	4669      	mov	r1, sp
   102bc:	5852      	ldr	r2, [r2, r1]
   102be:	4282      	cmp	r2, r0
   102c0:	d006      	beq.n	102d0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   102c2:	3301      	adds	r3, #1
   102c4:	2b06      	cmp	r3, #6
   102c6:	d1f7      	bne.n	102b8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   102c8:	2000      	movs	r0, #0
}
   102ca:	b007      	add	sp, #28
   102cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   102ce:	2300      	movs	r3, #0
			return i;
   102d0:	b2d8      	uxtb	r0, r3
   102d2:	e7fa      	b.n	102ca <_sercom_get_sercom_inst_index+0x2a>
   102d4:	00019294 	.word	0x00019294

000102d8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   102d8:	4770      	bx	lr
	...

000102dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   102de:	4b0a      	ldr	r3, [pc, #40]	; (10308 <_sercom_set_handler+0x2c>)
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	2b00      	cmp	r3, #0
   102e4:	d10c      	bne.n	10300 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   102e6:	4f09      	ldr	r7, [pc, #36]	; (1030c <_sercom_set_handler+0x30>)
   102e8:	4e09      	ldr	r6, [pc, #36]	; (10310 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   102ea:	4d0a      	ldr	r5, [pc, #40]	; (10314 <_sercom_set_handler+0x38>)
   102ec:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   102ee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   102f0:	195a      	adds	r2, r3, r5
   102f2:	6014      	str	r4, [r2, #0]
   102f4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   102f6:	2b18      	cmp	r3, #24
   102f8:	d1f9      	bne.n	102ee <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   102fa:	2201      	movs	r2, #1
   102fc:	4b02      	ldr	r3, [pc, #8]	; (10308 <_sercom_set_handler+0x2c>)
   102fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   10300:	0080      	lsls	r0, r0, #2
   10302:	4b02      	ldr	r3, [pc, #8]	; (1030c <_sercom_set_handler+0x30>)
   10304:	50c1      	str	r1, [r0, r3]
}
   10306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10308:	20000316 	.word	0x20000316
   1030c:	20000318 	.word	0x20000318
   10310:	000102d9 	.word	0x000102d9
   10314:	200014a0 	.word	0x200014a0

00010318 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   10318:	b500      	push	{lr}
   1031a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1031c:	2309      	movs	r3, #9
   1031e:	466a      	mov	r2, sp
   10320:	7013      	strb	r3, [r2, #0]
   10322:	3301      	adds	r3, #1
   10324:	7053      	strb	r3, [r2, #1]
   10326:	3301      	adds	r3, #1
   10328:	7093      	strb	r3, [r2, #2]
   1032a:	3301      	adds	r3, #1
   1032c:	70d3      	strb	r3, [r2, #3]
   1032e:	3301      	adds	r3, #1
   10330:	7113      	strb	r3, [r2, #4]
   10332:	3301      	adds	r3, #1
   10334:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   10336:	4b03      	ldr	r3, [pc, #12]	; (10344 <_sercom_get_interrupt_vector+0x2c>)
   10338:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1033a:	466b      	mov	r3, sp
   1033c:	5618      	ldrsb	r0, [r3, r0]
}
   1033e:	b003      	add	sp, #12
   10340:	bd00      	pop	{pc}
   10342:	46c0      	nop			; (mov r8, r8)
   10344:	000102a1 	.word	0x000102a1

00010348 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   10348:	b510      	push	{r4, lr}
   1034a:	4b02      	ldr	r3, [pc, #8]	; (10354 <SERCOM0_Handler+0xc>)
   1034c:	681b      	ldr	r3, [r3, #0]
   1034e:	2000      	movs	r0, #0
   10350:	4798      	blx	r3
   10352:	bd10      	pop	{r4, pc}
   10354:	20000318 	.word	0x20000318

00010358 <SERCOM1_Handler>:
   10358:	b510      	push	{r4, lr}
   1035a:	4b02      	ldr	r3, [pc, #8]	; (10364 <SERCOM1_Handler+0xc>)
   1035c:	685b      	ldr	r3, [r3, #4]
   1035e:	2001      	movs	r0, #1
   10360:	4798      	blx	r3
   10362:	bd10      	pop	{r4, pc}
   10364:	20000318 	.word	0x20000318

00010368 <SERCOM2_Handler>:
   10368:	b510      	push	{r4, lr}
   1036a:	4b02      	ldr	r3, [pc, #8]	; (10374 <SERCOM2_Handler+0xc>)
   1036c:	689b      	ldr	r3, [r3, #8]
   1036e:	2002      	movs	r0, #2
   10370:	4798      	blx	r3
   10372:	bd10      	pop	{r4, pc}
   10374:	20000318 	.word	0x20000318

00010378 <SERCOM3_Handler>:
   10378:	b510      	push	{r4, lr}
   1037a:	4b02      	ldr	r3, [pc, #8]	; (10384 <SERCOM3_Handler+0xc>)
   1037c:	68db      	ldr	r3, [r3, #12]
   1037e:	2003      	movs	r0, #3
   10380:	4798      	blx	r3
   10382:	bd10      	pop	{r4, pc}
   10384:	20000318 	.word	0x20000318

00010388 <SERCOM4_Handler>:
   10388:	b510      	push	{r4, lr}
   1038a:	4b02      	ldr	r3, [pc, #8]	; (10394 <SERCOM4_Handler+0xc>)
   1038c:	691b      	ldr	r3, [r3, #16]
   1038e:	2004      	movs	r0, #4
   10390:	4798      	blx	r3
   10392:	bd10      	pop	{r4, pc}
   10394:	20000318 	.word	0x20000318

00010398 <SERCOM5_Handler>:
   10398:	b510      	push	{r4, lr}
   1039a:	4b02      	ldr	r3, [pc, #8]	; (103a4 <SERCOM5_Handler+0xc>)
   1039c:	695b      	ldr	r3, [r3, #20]
   1039e:	2005      	movs	r0, #5
   103a0:	4798      	blx	r3
   103a2:	bd10      	pop	{r4, pc}
   103a4:	20000318 	.word	0x20000318

000103a8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   103a8:	b570      	push	{r4, r5, r6, lr}
   103aa:	b082      	sub	sp, #8
   103ac:	0005      	movs	r5, r0
   103ae:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   103b0:	2200      	movs	r2, #0
   103b2:	466b      	mov	r3, sp
   103b4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   103b6:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   103b8:	0030      	movs	r0, r6
   103ba:	4b24      	ldr	r3, [pc, #144]	; (1044c <spi_set_baudrate+0xa4>)
   103bc:	4798      	blx	r3
   103be:	231f      	movs	r3, #31
   103c0:	4018      	ands	r0, r3
   103c2:	3b1e      	subs	r3, #30
   103c4:	4083      	lsls	r3, r0
   103c6:	2280      	movs	r2, #128	; 0x80
   103c8:	4921      	ldr	r1, [pc, #132]	; (10450 <spi_set_baudrate+0xa8>)
   103ca:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   103cc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   103ce:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   103d0:	2b00      	cmp	r3, #0
   103d2:	d1fc      	bne.n	103ce <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   103d4:	338f      	adds	r3, #143	; 0x8f
   103d6:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   103d8:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   103da:	6833      	ldr	r3, [r6, #0]
   103dc:	2202      	movs	r2, #2
   103de:	4393      	bics	r3, r2
   103e0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   103e2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   103e4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   103e6:	2b00      	cmp	r3, #0
   103e8:	d1fc      	bne.n	103e4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   103ea:	4b1a      	ldr	r3, [pc, #104]	; (10454 <spi_set_baudrate+0xac>)
   103ec:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   103ee:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   103f0:	b2c0      	uxtb	r0, r0
   103f2:	4b19      	ldr	r3, [pc, #100]	; (10458 <spi_set_baudrate+0xb0>)
   103f4:	4798      	blx	r3
   103f6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   103f8:	466b      	mov	r3, sp
   103fa:	1d9a      	adds	r2, r3, #6
   103fc:	0020      	movs	r0, r4
   103fe:	4b17      	ldr	r3, [pc, #92]	; (1045c <spi_set_baudrate+0xb4>)
   10400:	4798      	blx	r3
   10402:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   10404:	d003      	beq.n	1040e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   10406:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   10408:	0020      	movs	r0, r4
   1040a:	b002      	add	sp, #8
   1040c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1040e:	466b      	mov	r3, sp
   10410:	3306      	adds	r3, #6
   10412:	781b      	ldrb	r3, [r3, #0]
   10414:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10416:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10418:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   1041a:	2b00      	cmp	r3, #0
   1041c:	d1fc      	bne.n	10418 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1041e:	0030      	movs	r0, r6
   10420:	4b0a      	ldr	r3, [pc, #40]	; (1044c <spi_set_baudrate+0xa4>)
   10422:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   10424:	231f      	movs	r3, #31
   10426:	4018      	ands	r0, r3
   10428:	3b1e      	subs	r3, #30
   1042a:	4083      	lsls	r3, r0
   1042c:	4a08      	ldr	r2, [pc, #32]	; (10450 <spi_set_baudrate+0xa8>)
   1042e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10430:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10432:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10434:	2b00      	cmp	r3, #0
   10436:	d1fc      	bne.n	10432 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   10438:	6833      	ldr	r3, [r6, #0]
   1043a:	2202      	movs	r2, #2
   1043c:	4313      	orrs	r3, r2
   1043e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10440:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10442:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10444:	2b00      	cmp	r3, #0
   10446:	d1fc      	bne.n	10442 <spi_set_baudrate+0x9a>
   10448:	e7de      	b.n	10408 <spi_set_baudrate+0x60>
   1044a:	46c0      	nop			; (mov r8, r8)
   1044c:	00010319 	.word	0x00010319
   10450:	e000e100 	.word	0xe000e100
   10454:	000102a1 	.word	0x000102a1
   10458:	00011775 	.word	0x00011775
   1045c:	0001001f 	.word	0x0001001f

00010460 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   10460:	b5f0      	push	{r4, r5, r6, r7, lr}
   10462:	b08b      	sub	sp, #44	; 0x2c
   10464:	0005      	movs	r5, r0
   10466:	000c      	movs	r4, r1
   10468:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1046a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1046c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1046e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10470:	079b      	lsls	r3, r3, #30
   10472:	d501      	bpl.n	10478 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   10474:	b00b      	add	sp, #44	; 0x2c
   10476:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10478:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1047a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1047c:	07db      	lsls	r3, r3, #31
   1047e:	d4f9      	bmi.n	10474 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10480:	0008      	movs	r0, r1
   10482:	4b60      	ldr	r3, [pc, #384]	; (10604 <spi_init+0x1a4>)
   10484:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   10486:	4a60      	ldr	r2, [pc, #384]	; (10608 <spi_init+0x1a8>)
   10488:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1048a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1048c:	2301      	movs	r3, #1
   1048e:	40bb      	lsls	r3, r7
   10490:	430b      	orrs	r3, r1
   10492:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10494:	a909      	add	r1, sp, #36	; 0x24
   10496:	2724      	movs	r7, #36	; 0x24
   10498:	5df3      	ldrb	r3, [r6, r7]
   1049a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1049c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1049e:	b2c3      	uxtb	r3, r0
   104a0:	9301      	str	r3, [sp, #4]
   104a2:	0018      	movs	r0, r3
   104a4:	4b59      	ldr	r3, [pc, #356]	; (1060c <spi_init+0x1ac>)
   104a6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   104a8:	9801      	ldr	r0, [sp, #4]
   104aa:	4b59      	ldr	r3, [pc, #356]	; (10610 <spi_init+0x1b0>)
   104ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   104ae:	5df0      	ldrb	r0, [r6, r7]
   104b0:	2100      	movs	r1, #0
   104b2:	4b58      	ldr	r3, [pc, #352]	; (10614 <spi_init+0x1b4>)
   104b4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   104b6:	7833      	ldrb	r3, [r6, #0]
   104b8:	2b01      	cmp	r3, #1
   104ba:	d038      	beq.n	1052e <spi_init+0xce>
   104bc:	002b      	movs	r3, r5
   104be:	330c      	adds	r3, #12
   104c0:	0029      	movs	r1, r5
   104c2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   104c4:	2200      	movs	r2, #0
   104c6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   104c8:	428b      	cmp	r3, r1
   104ca:	d1fc      	bne.n	104c6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   104cc:	2300      	movs	r3, #0
   104ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   104d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   104d2:	2400      	movs	r4, #0
   104d4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   104d6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   104d8:	3336      	adds	r3, #54	; 0x36
   104da:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   104dc:	3301      	adds	r3, #1
   104de:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   104e0:	3301      	adds	r3, #1
   104e2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   104e4:	3b35      	subs	r3, #53	; 0x35
   104e6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   104e8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   104ea:	6828      	ldr	r0, [r5, #0]
   104ec:	4b45      	ldr	r3, [pc, #276]	; (10604 <spi_init+0x1a4>)
   104ee:	4798      	blx	r3
   104f0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   104f2:	4949      	ldr	r1, [pc, #292]	; (10618 <spi_init+0x1b8>)
   104f4:	4b49      	ldr	r3, [pc, #292]	; (1061c <spi_init+0x1bc>)
   104f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   104f8:	00bf      	lsls	r7, r7, #2
   104fa:	4b49      	ldr	r3, [pc, #292]	; (10620 <spi_init+0x1c0>)
   104fc:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   104fe:	682f      	ldr	r7, [r5, #0]
   10500:	ab04      	add	r3, sp, #16
   10502:	2280      	movs	r2, #128	; 0x80
   10504:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10506:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10508:	3a7f      	subs	r2, #127	; 0x7f
   1050a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1050c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1050e:	7833      	ldrb	r3, [r6, #0]
   10510:	2b00      	cmp	r3, #0
   10512:	d102      	bne.n	1051a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10514:	2200      	movs	r2, #0
   10516:	ab04      	add	r3, sp, #16
   10518:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1051a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1051c:	9305      	str	r3, [sp, #20]
   1051e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10520:	9306      	str	r3, [sp, #24]
   10522:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10524:	9307      	str	r3, [sp, #28]
   10526:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10528:	9308      	str	r3, [sp, #32]
   1052a:	2400      	movs	r4, #0
   1052c:	e00b      	b.n	10546 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1052e:	6823      	ldr	r3, [r4, #0]
   10530:	220c      	movs	r2, #12
   10532:	4313      	orrs	r3, r2
   10534:	6023      	str	r3, [r4, #0]
   10536:	e7c1      	b.n	104bc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10538:	0038      	movs	r0, r7
   1053a:	4b3a      	ldr	r3, [pc, #232]	; (10624 <spi_init+0x1c4>)
   1053c:	4798      	blx	r3
   1053e:	e00a      	b.n	10556 <spi_init+0xf6>
   10540:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10542:	2c04      	cmp	r4, #4
   10544:	d010      	beq.n	10568 <spi_init+0x108>
   10546:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10548:	00a3      	lsls	r3, r4, #2
   1054a:	aa02      	add	r2, sp, #8
   1054c:	200c      	movs	r0, #12
   1054e:	1812      	adds	r2, r2, r0
   10550:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   10552:	2800      	cmp	r0, #0
   10554:	d0f0      	beq.n	10538 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   10556:	1c43      	adds	r3, r0, #1
   10558:	d0f2      	beq.n	10540 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1055a:	a904      	add	r1, sp, #16
   1055c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1055e:	0c00      	lsrs	r0, r0, #16
   10560:	b2c0      	uxtb	r0, r0
   10562:	4b31      	ldr	r3, [pc, #196]	; (10628 <spi_init+0x1c8>)
   10564:	4798      	blx	r3
   10566:	e7eb      	b.n	10540 <spi_init+0xe0>
	module->mode             = config->mode;
   10568:	7833      	ldrb	r3, [r6, #0]
   1056a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1056c:	7c33      	ldrb	r3, [r6, #16]
   1056e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   10570:	7cb3      	ldrb	r3, [r6, #18]
   10572:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   10574:	7d33      	ldrb	r3, [r6, #20]
   10576:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   10578:	2200      	movs	r2, #0
   1057a:	ab02      	add	r3, sp, #8
   1057c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1057e:	7833      	ldrb	r3, [r6, #0]
   10580:	2b01      	cmp	r3, #1
   10582:	d028      	beq.n	105d6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   10584:	6873      	ldr	r3, [r6, #4]
   10586:	68b2      	ldr	r2, [r6, #8]
   10588:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1058a:	68f2      	ldr	r2, [r6, #12]
   1058c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1058e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   10590:	7c72      	ldrb	r2, [r6, #17]
   10592:	2a00      	cmp	r2, #0
   10594:	d103      	bne.n	1059e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10596:	4a25      	ldr	r2, [pc, #148]	; (1062c <spi_init+0x1cc>)
   10598:	7892      	ldrb	r2, [r2, #2]
   1059a:	0792      	lsls	r2, r2, #30
   1059c:	d501      	bpl.n	105a2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1059e:	2280      	movs	r2, #128	; 0x80
   105a0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   105a2:	7cb2      	ldrb	r2, [r6, #18]
   105a4:	2a00      	cmp	r2, #0
   105a6:	d002      	beq.n	105ae <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   105a8:	2280      	movs	r2, #128	; 0x80
   105aa:	0292      	lsls	r2, r2, #10
   105ac:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   105ae:	7cf2      	ldrb	r2, [r6, #19]
   105b0:	2a00      	cmp	r2, #0
   105b2:	d002      	beq.n	105ba <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   105b4:	2280      	movs	r2, #128	; 0x80
   105b6:	0092      	lsls	r2, r2, #2
   105b8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   105ba:	7d32      	ldrb	r2, [r6, #20]
   105bc:	2a00      	cmp	r2, #0
   105be:	d002      	beq.n	105c6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   105c0:	2280      	movs	r2, #128	; 0x80
   105c2:	0192      	lsls	r2, r2, #6
   105c4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   105c6:	683a      	ldr	r2, [r7, #0]
   105c8:	4313      	orrs	r3, r2
   105ca:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   105cc:	687b      	ldr	r3, [r7, #4]
   105ce:	430b      	orrs	r3, r1
   105d0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   105d2:	2000      	movs	r0, #0
   105d4:	e74e      	b.n	10474 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   105d6:	6828      	ldr	r0, [r5, #0]
   105d8:	4b0a      	ldr	r3, [pc, #40]	; (10604 <spi_init+0x1a4>)
   105da:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   105dc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   105de:	b2c0      	uxtb	r0, r0
   105e0:	4b13      	ldr	r3, [pc, #76]	; (10630 <spi_init+0x1d0>)
   105e2:	4798      	blx	r3
   105e4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   105e6:	ab02      	add	r3, sp, #8
   105e8:	1d9a      	adds	r2, r3, #6
   105ea:	69b0      	ldr	r0, [r6, #24]
   105ec:	4b11      	ldr	r3, [pc, #68]	; (10634 <spi_init+0x1d4>)
   105ee:	4798      	blx	r3
   105f0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   105f2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   105f4:	2b00      	cmp	r3, #0
   105f6:	d000      	beq.n	105fa <spi_init+0x19a>
   105f8:	e73c      	b.n	10474 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   105fa:	ab02      	add	r3, sp, #8
   105fc:	3306      	adds	r3, #6
   105fe:	781b      	ldrb	r3, [r3, #0]
   10600:	733b      	strb	r3, [r7, #12]
   10602:	e7bf      	b.n	10584 <spi_init+0x124>
   10604:	000102a1 	.word	0x000102a1
   10608:	40000400 	.word	0x40000400
   1060c:	00011759 	.word	0x00011759
   10610:	000116cd 	.word	0x000116cd
   10614:	000100dd 	.word	0x000100dd
   10618:	000108cd 	.word	0x000108cd
   1061c:	000102dd 	.word	0x000102dd
   10620:	200014a0 	.word	0x200014a0
   10624:	00010129 	.word	0x00010129
   10628:	00011851 	.word	0x00011851
   1062c:	41002000 	.word	0x41002000
   10630:	00011775 	.word	0x00011775
   10634:	0001001f 	.word	0x0001001f

00010638 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   10638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1063a:	46d6      	mov	lr, sl
   1063c:	4647      	mov	r7, r8
   1063e:	b580      	push	{r7, lr}
   10640:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   10642:	2438      	movs	r4, #56	; 0x38
   10644:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   10646:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   10648:	2d05      	cmp	r5, #5
   1064a:	d002      	beq.n	10652 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1064c:	3412      	adds	r4, #18
	if (length == 0) {
   1064e:	2a00      	cmp	r2, #0
   10650:	d105      	bne.n	1065e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   10652:	0020      	movs	r0, r4
   10654:	b003      	add	sp, #12
   10656:	bc0c      	pop	{r2, r3}
   10658:	4690      	mov	r8, r2
   1065a:	469a      	mov	sl, r3
   1065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1065e:	79c4      	ldrb	r4, [r0, #7]
   10660:	2c00      	cmp	r4, #0
   10662:	d144      	bne.n	106ee <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   10664:	341c      	adds	r4, #28
   10666:	e7f4      	b.n	10652 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10668:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1066a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1066c:	423c      	tst	r4, r7
   1066e:	d0fc      	beq.n	1066a <spi_read_buffer_wait+0x32>
   10670:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   10672:	423c      	tst	r4, r7
   10674:	d01a      	beq.n	106ac <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10676:	4644      	mov	r4, r8
   10678:	62ac      	str	r4, [r5, #40]	; 0x28
   1067a:	e017      	b.n	106ac <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1067c:	7984      	ldrb	r4, [r0, #6]
   1067e:	2c01      	cmp	r4, #1
   10680:	d026      	beq.n	106d0 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10682:	6aad      	ldr	r5, [r5, #40]	; 0x28
   10684:	b2ec      	uxtb	r4, r5
   10686:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   10688:	9c01      	ldr	r4, [sp, #4]
   1068a:	2c00      	cmp	r4, #0
   1068c:	d13a      	bne.n	10704 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1068e:	1c75      	adds	r5, r6, #1
   10690:	b2ad      	uxth	r5, r5
   10692:	4664      	mov	r4, ip
   10694:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10696:	7984      	ldrb	r4, [r0, #6]
   10698:	2c01      	cmp	r4, #1
   1069a:	d01e      	beq.n	106da <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1069c:	002e      	movs	r6, r5
	while (length--) {
   1069e:	3a01      	subs	r2, #1
   106a0:	b292      	uxth	r2, r2
   106a2:	4552      	cmp	r2, sl
   106a4:	d01f      	beq.n	106e6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   106a6:	7944      	ldrb	r4, [r0, #5]
   106a8:	2c01      	cmp	r4, #1
   106aa:	d0dd      	beq.n	10668 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   106ac:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   106ae:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   106b0:	421c      	tst	r4, r3
   106b2:	d0fc      	beq.n	106ae <spi_read_buffer_wait+0x76>
   106b4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   106b6:	421c      	tst	r4, r3
   106b8:	d017      	beq.n	106ea <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   106ba:	8b6c      	ldrh	r4, [r5, #26]
   106bc:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   106be:	2400      	movs	r4, #0
   106c0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   106c2:	4664      	mov	r4, ip
   106c4:	421c      	tst	r4, r3
   106c6:	d0d9      	beq.n	1067c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   106c8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   106ca:	241e      	movs	r4, #30
   106cc:	9401      	str	r4, [sp, #4]
   106ce:	e7d5      	b.n	1067c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   106d0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   106d2:	05e4      	lsls	r4, r4, #23
   106d4:	0de4      	lsrs	r4, r4, #23
   106d6:	46a4      	mov	ip, r4
   106d8:	e7d6      	b.n	10688 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   106da:	3602      	adds	r6, #2
   106dc:	b2b6      	uxth	r6, r6
   106de:	4664      	mov	r4, ip
   106e0:	0a24      	lsrs	r4, r4, #8
   106e2:	554c      	strb	r4, [r1, r5]
   106e4:	e7db      	b.n	1069e <spi_read_buffer_wait+0x66>
   106e6:	9c01      	ldr	r4, [sp, #4]
   106e8:	e7b3      	b.n	10652 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   106ea:	2410      	movs	r4, #16
   106ec:	e7b1      	b.n	10652 <spi_read_buffer_wait+0x1a>
	while (length--) {
   106ee:	3a01      	subs	r2, #1
   106f0:	b292      	uxth	r2, r2
   106f2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   106f4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   106f6:	05db      	lsls	r3, r3, #23
   106f8:	0ddb      	lsrs	r3, r3, #23
   106fa:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   106fc:	2304      	movs	r3, #4
	while (length--) {
   106fe:	4c02      	ldr	r4, [pc, #8]	; (10708 <spi_read_buffer_wait+0xd0>)
   10700:	46a2      	mov	sl, r4
   10702:	e7d0      	b.n	106a6 <spi_read_buffer_wait+0x6e>
   10704:	9c01      	ldr	r4, [sp, #4]
   10706:	e7a4      	b.n	10652 <spi_read_buffer_wait+0x1a>
   10708:	0000ffff 	.word	0x0000ffff

0001070c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1070c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1070e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   10710:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   10712:	2c01      	cmp	r4, #1
   10714:	d001      	beq.n	1071a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   10716:	0018      	movs	r0, r3
   10718:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   1071a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   1071c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   1071e:	2c00      	cmp	r4, #0
   10720:	d1f9      	bne.n	10716 <spi_select_slave+0xa>
		if (select) {
   10722:	2a00      	cmp	r2, #0
   10724:	d058      	beq.n	107d8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   10726:	784b      	ldrb	r3, [r1, #1]
   10728:	2b00      	cmp	r3, #0
   1072a:	d044      	beq.n	107b6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1072c:	6803      	ldr	r3, [r0, #0]
   1072e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   10730:	07db      	lsls	r3, r3, #31
   10732:	d410      	bmi.n	10756 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   10734:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10736:	09d1      	lsrs	r1, r2, #7
		return NULL;
   10738:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1073a:	2900      	cmp	r1, #0
   1073c:	d104      	bne.n	10748 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   1073e:	0953      	lsrs	r3, r2, #5
   10740:	01db      	lsls	r3, r3, #7
   10742:	492e      	ldr	r1, [pc, #184]	; (107fc <spi_select_slave+0xf0>)
   10744:	468c      	mov	ip, r1
   10746:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10748:	211f      	movs	r1, #31
   1074a:	4011      	ands	r1, r2
   1074c:	2201      	movs	r2, #1
   1074e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10750:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   10752:	2305      	movs	r3, #5
   10754:	e7df      	b.n	10716 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   10756:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10758:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1075a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1075c:	2c00      	cmp	r4, #0
   1075e:	d104      	bne.n	1076a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   10760:	0953      	lsrs	r3, r2, #5
   10762:	01db      	lsls	r3, r3, #7
   10764:	4c25      	ldr	r4, [pc, #148]	; (107fc <spi_select_slave+0xf0>)
   10766:	46a4      	mov	ip, r4
   10768:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1076a:	241f      	movs	r4, #31
   1076c:	4014      	ands	r4, r2
   1076e:	2201      	movs	r2, #1
   10770:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   10772:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10774:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10776:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   10778:	07d2      	lsls	r2, r2, #31
   1077a:	d501      	bpl.n	10780 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1077c:	788a      	ldrb	r2, [r1, #2]
   1077e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   10780:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   10782:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   10784:	2a00      	cmp	r2, #0
   10786:	d1c6      	bne.n	10716 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10788:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1078a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1078c:	7e13      	ldrb	r3, [r2, #24]
   1078e:	420b      	tst	r3, r1
   10790:	d0fc      	beq.n	1078c <spi_select_slave+0x80>
   10792:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   10794:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   10796:	0749      	lsls	r1, r1, #29
   10798:	d5bd      	bpl.n	10716 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1079a:	8b53      	ldrh	r3, [r2, #26]
   1079c:	075b      	lsls	r3, r3, #29
   1079e:	d501      	bpl.n	107a4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   107a0:	2304      	movs	r3, #4
   107a2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   107a4:	7983      	ldrb	r3, [r0, #6]
   107a6:	2b01      	cmp	r3, #1
   107a8:	d002      	beq.n	107b0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   107aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   107ac:	2300      	movs	r3, #0
   107ae:	e7b2      	b.n	10716 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   107b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   107b2:	2300      	movs	r3, #0
   107b4:	e7af      	b.n	10716 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   107b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   107b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
   107ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   107bc:	2900      	cmp	r1, #0
   107be:	d104      	bne.n	107ca <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   107c0:	0953      	lsrs	r3, r2, #5
   107c2:	01db      	lsls	r3, r3, #7
   107c4:	490d      	ldr	r1, [pc, #52]	; (107fc <spi_select_slave+0xf0>)
   107c6:	468c      	mov	ip, r1
   107c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   107ca:	211f      	movs	r1, #31
   107cc:	4011      	ands	r1, r2
   107ce:	2201      	movs	r2, #1
   107d0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   107d2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   107d4:	2300      	movs	r3, #0
   107d6:	e79e      	b.n	10716 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   107d8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   107da:	09d1      	lsrs	r1, r2, #7
		return NULL;
   107dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   107de:	2900      	cmp	r1, #0
   107e0:	d104      	bne.n	107ec <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   107e2:	0953      	lsrs	r3, r2, #5
   107e4:	01db      	lsls	r3, r3, #7
   107e6:	4905      	ldr	r1, [pc, #20]	; (107fc <spi_select_slave+0xf0>)
   107e8:	468c      	mov	ip, r1
   107ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   107ec:	211f      	movs	r1, #31
   107ee:	4011      	ands	r1, r2
   107f0:	2201      	movs	r2, #1
   107f2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   107f4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   107f6:	2300      	movs	r3, #0
   107f8:	e78d      	b.n	10716 <spi_select_slave+0xa>
   107fa:	46c0      	nop			; (mov r8, r8)
   107fc:	41004400 	.word	0x41004400

00010800 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10800:	b5f0      	push	{r4, r5, r6, r7, lr}
   10802:	46de      	mov	lr, fp
   10804:	4657      	mov	r7, sl
   10806:	464e      	mov	r6, r9
   10808:	4645      	mov	r5, r8
   1080a:	b5e0      	push	{r5, r6, r7, lr}
   1080c:	b083      	sub	sp, #12
   1080e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   10810:	2338      	movs	r3, #56	; 0x38
   10812:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   10814:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   10816:	2c05      	cmp	r4, #5
   10818:	d002      	beq.n	10820 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1081a:	3312      	adds	r3, #18
	if (length == 0) {
   1081c:	2a00      	cmp	r2, #0
   1081e:	d14b      	bne.n	108b8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   10820:	0018      	movs	r0, r3
   10822:	b003      	add	sp, #12
   10824:	bc3c      	pop	{r2, r3, r4, r5}
   10826:	4690      	mov	r8, r2
   10828:	4699      	mov	r9, r3
   1082a:	46a2      	mov	sl, r4
   1082c:	46ab      	mov	fp, r5
   1082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   10830:	3702      	adds	r7, #2
   10832:	b2bf      	uxth	r7, r7
   10834:	4641      	mov	r1, r8
   10836:	4653      	mov	r3, sl
   10838:	5c59      	ldrb	r1, [r3, r1]
   1083a:	0209      	lsls	r1, r1, #8
   1083c:	465b      	mov	r3, fp
   1083e:	430b      	orrs	r3, r1
   10840:	e018      	b.n	10874 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10842:	7983      	ldrb	r3, [r0, #6]
   10844:	2b01      	cmp	r3, #1
   10846:	d02a      	beq.n	1089e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10848:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1084a:	3e01      	subs	r6, #1
   1084c:	b2b6      	uxth	r6, r6
   1084e:	4566      	cmp	r6, ip
   10850:	d027      	beq.n	108a2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10852:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10854:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   10856:	4223      	tst	r3, r4
   10858:	d0fc      	beq.n	10854 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1085a:	1c7b      	adds	r3, r7, #1
   1085c:	b29b      	uxth	r3, r3
   1085e:	4698      	mov	r8, r3
   10860:	4653      	mov	r3, sl
   10862:	5ddb      	ldrb	r3, [r3, r7]
   10864:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10866:	7981      	ldrb	r1, [r0, #6]
   10868:	2901      	cmp	r1, #1
   1086a:	d0e1      	beq.n	10830 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1086c:	4669      	mov	r1, sp
   1086e:	80cb      	strh	r3, [r1, #6]
   10870:	88cb      	ldrh	r3, [r1, #6]
   10872:	4647      	mov	r7, r8
   10874:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   10876:	4221      	tst	r1, r4
   10878:	d002      	beq.n	10880 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1087a:	05db      	lsls	r3, r3, #23
   1087c:	0ddb      	lsrs	r3, r3, #23
   1087e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   10880:	79c3      	ldrb	r3, [r0, #7]
   10882:	2b00      	cmp	r3, #0
   10884:	d0e1      	beq.n	1084a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10886:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10888:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1088a:	422b      	tst	r3, r5
   1088c:	d0fc      	beq.n	10888 <spi_write_buffer_wait+0x88>
   1088e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   10890:	422b      	tst	r3, r5
   10892:	d0da      	beq.n	1084a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10894:	8b53      	ldrh	r3, [r2, #26]
   10896:	422b      	tst	r3, r5
   10898:	d0d3      	beq.n	10842 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1089a:	8355      	strh	r5, [r2, #26]
   1089c:	e7d1      	b.n	10842 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1089e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   108a0:	e7d3      	b.n	1084a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   108a2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   108a4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   108a6:	2a01      	cmp	r2, #1
   108a8:	d1ba      	bne.n	10820 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   108aa:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   108ac:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   108ae:	7e0b      	ldrb	r3, [r1, #24]
   108b0:	4213      	tst	r3, r2
   108b2:	d0fc      	beq.n	108ae <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   108b4:	2300      	movs	r3, #0
   108b6:	e7b3      	b.n	10820 <spi_write_buffer_wait+0x20>
	while (length--) {
   108b8:	3a01      	subs	r2, #1
   108ba:	b296      	uxth	r6, r2
   108bc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   108be:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   108c0:	2504      	movs	r5, #4
	while (length--) {
   108c2:	4b01      	ldr	r3, [pc, #4]	; (108c8 <spi_write_buffer_wait+0xc8>)
   108c4:	469c      	mov	ip, r3
   108c6:	e7c4      	b.n	10852 <spi_write_buffer_wait+0x52>
   108c8:	0000ffff 	.word	0x0000ffff

000108cc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   108cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   108ce:	0080      	lsls	r0, r0, #2
   108d0:	4b70      	ldr	r3, [pc, #448]	; (10a94 <_spi_interrupt_handler+0x1c8>)
   108d2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   108d4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   108d6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   108d8:	5ce7      	ldrb	r7, [r4, r3]
   108da:	2236      	movs	r2, #54	; 0x36
   108dc:	5ca2      	ldrb	r2, [r4, r2]
   108de:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   108e0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   108e2:	7db5      	ldrb	r5, [r6, #22]
   108e4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   108e6:	07eb      	lsls	r3, r5, #31
   108e8:	d502      	bpl.n	108f0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   108ea:	7963      	ldrb	r3, [r4, #5]
   108ec:	2b01      	cmp	r3, #1
   108ee:	d01e      	beq.n	1092e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   108f0:	076b      	lsls	r3, r5, #29
   108f2:	d511      	bpl.n	10918 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   108f4:	8b73      	ldrh	r3, [r6, #26]
   108f6:	075b      	lsls	r3, r3, #29
   108f8:	d55a      	bpl.n	109b0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   108fa:	7a63      	ldrb	r3, [r4, #9]
   108fc:	2b01      	cmp	r3, #1
   108fe:	d008      	beq.n	10912 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   10900:	221e      	movs	r2, #30
   10902:	2338      	movs	r3, #56	; 0x38
   10904:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   10906:	3b35      	subs	r3, #53	; 0x35
   10908:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1090a:	3302      	adds	r3, #2
   1090c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1090e:	073b      	lsls	r3, r7, #28
   10910:	d44a      	bmi.n	109a8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   10912:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10914:	2304      	movs	r3, #4
   10916:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   10918:	07ab      	lsls	r3, r5, #30
   1091a:	d503      	bpl.n	10924 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1091c:	7963      	ldrb	r3, [r4, #5]
   1091e:	2b01      	cmp	r3, #1
   10920:	d100      	bne.n	10924 <_spi_interrupt_handler+0x58>
   10922:	e097      	b.n	10a54 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   10924:	b26d      	sxtb	r5, r5
   10926:	2d00      	cmp	r5, #0
   10928:	da00      	bge.n	1092c <_spi_interrupt_handler+0x60>
   1092a:	e0a9      	b.n	10a80 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   1092c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   1092e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10930:	2b00      	cmp	r3, #0
   10932:	d022      	beq.n	1097a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   10934:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   10936:	2b00      	cmp	r3, #0
   10938:	d0da      	beq.n	108f0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1093a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1093c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1093e:	7813      	ldrb	r3, [r2, #0]
   10940:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   10942:	1c50      	adds	r0, r2, #1
   10944:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10946:	79a0      	ldrb	r0, [r4, #6]
   10948:	2801      	cmp	r0, #1
   1094a:	d027      	beq.n	1099c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1094c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1094e:	05db      	lsls	r3, r3, #23
   10950:	0ddb      	lsrs	r3, r3, #23
   10952:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   10954:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10956:	3b01      	subs	r3, #1
   10958:	b29b      	uxth	r3, r3
   1095a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1095c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1095e:	b29b      	uxth	r3, r3
   10960:	2b00      	cmp	r3, #0
   10962:	d1c5      	bne.n	108f0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10964:	3301      	adds	r3, #1
   10966:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   10968:	7a63      	ldrb	r3, [r4, #9]
   1096a:	2b01      	cmp	r3, #1
   1096c:	d1c0      	bne.n	108f0 <_spi_interrupt_handler+0x24>
   1096e:	79e3      	ldrb	r3, [r4, #7]
   10970:	2b00      	cmp	r3, #0
   10972:	d1bd      	bne.n	108f0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10974:	3302      	adds	r3, #2
   10976:	75b3      	strb	r3, [r6, #22]
   10978:	e7ba      	b.n	108f0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1097a:	4b47      	ldr	r3, [pc, #284]	; (10a98 <_spi_interrupt_handler+0x1cc>)
   1097c:	881b      	ldrh	r3, [r3, #0]
   1097e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10980:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10982:	3b01      	subs	r3, #1
   10984:	b29b      	uxth	r3, r3
   10986:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10988:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1098a:	b29b      	uxth	r3, r3
   1098c:	2b00      	cmp	r3, #0
   1098e:	d101      	bne.n	10994 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10990:	3301      	adds	r3, #1
   10992:	7533      	strb	r3, [r6, #20]
		if (0
   10994:	7963      	ldrb	r3, [r4, #5]
   10996:	2b01      	cmp	r3, #1
   10998:	d0cc      	beq.n	10934 <_spi_interrupt_handler+0x68>
   1099a:	e7a9      	b.n	108f0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1099c:	7850      	ldrb	r0, [r2, #1]
   1099e:	0200      	lsls	r0, r0, #8
   109a0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   109a2:	3202      	adds	r2, #2
   109a4:	62e2      	str	r2, [r4, #44]	; 0x2c
   109a6:	e7d2      	b.n	1094e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   109a8:	0020      	movs	r0, r4
   109aa:	69a3      	ldr	r3, [r4, #24]
   109ac:	4798      	blx	r3
   109ae:	e7b0      	b.n	10912 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   109b0:	7a63      	ldrb	r3, [r4, #9]
   109b2:	2b01      	cmp	r3, #1
   109b4:	d028      	beq.n	10a08 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   109b6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   109b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   109ba:	05db      	lsls	r3, r3, #23
   109bc:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   109be:	b2da      	uxtb	r2, r3
   109c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   109c2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   109c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   109c6:	1c51      	adds	r1, r2, #1
   109c8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   109ca:	79a1      	ldrb	r1, [r4, #6]
   109cc:	2901      	cmp	r1, #1
   109ce:	d034      	beq.n	10a3a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   109d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   109d2:	3b01      	subs	r3, #1
   109d4:	b29b      	uxth	r3, r3
   109d6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   109d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   109da:	b29b      	uxth	r3, r3
   109dc:	2b00      	cmp	r3, #0
   109de:	d000      	beq.n	109e2 <_spi_interrupt_handler+0x116>
   109e0:	e79a      	b.n	10918 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   109e2:	2200      	movs	r2, #0
   109e4:	3338      	adds	r3, #56	; 0x38
   109e6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   109e8:	3b34      	subs	r3, #52	; 0x34
   109ea:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   109ec:	7a63      	ldrb	r3, [r4, #9]
   109ee:	2b02      	cmp	r3, #2
   109f0:	d029      	beq.n	10a46 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   109f2:	7a63      	ldrb	r3, [r4, #9]
   109f4:	2b00      	cmp	r3, #0
   109f6:	d000      	beq.n	109fa <_spi_interrupt_handler+0x12e>
   109f8:	e78e      	b.n	10918 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   109fa:	07bb      	lsls	r3, r7, #30
   109fc:	d400      	bmi.n	10a00 <_spi_interrupt_handler+0x134>
   109fe:	e78b      	b.n	10918 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   10a00:	0020      	movs	r0, r4
   10a02:	6923      	ldr	r3, [r4, #16]
   10a04:	4798      	blx	r3
   10a06:	e787      	b.n	10918 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10a08:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   10a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10a0c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10a0e:	3b01      	subs	r3, #1
   10a10:	b29b      	uxth	r3, r3
   10a12:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   10a14:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10a16:	b29b      	uxth	r3, r3
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d000      	beq.n	10a1e <_spi_interrupt_handler+0x152>
   10a1c:	e77c      	b.n	10918 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   10a1e:	3304      	adds	r3, #4
   10a20:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   10a22:	2200      	movs	r2, #0
   10a24:	3334      	adds	r3, #52	; 0x34
   10a26:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   10a28:	3b35      	subs	r3, #53	; 0x35
   10a2a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   10a2c:	07fb      	lsls	r3, r7, #31
   10a2e:	d400      	bmi.n	10a32 <_spi_interrupt_handler+0x166>
   10a30:	e772      	b.n	10918 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   10a32:	0020      	movs	r0, r4
   10a34:	68e3      	ldr	r3, [r4, #12]
   10a36:	4798      	blx	r3
   10a38:	e76e      	b.n	10918 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   10a3a:	0a1b      	lsrs	r3, r3, #8
   10a3c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   10a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10a40:	3301      	adds	r3, #1
   10a42:	62a3      	str	r3, [r4, #40]	; 0x28
   10a44:	e7c4      	b.n	109d0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   10a46:	077b      	lsls	r3, r7, #29
   10a48:	d400      	bmi.n	10a4c <_spi_interrupt_handler+0x180>
   10a4a:	e765      	b.n	10918 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   10a4c:	0020      	movs	r0, r4
   10a4e:	6963      	ldr	r3, [r4, #20]
   10a50:	4798      	blx	r3
   10a52:	e761      	b.n	10918 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10a54:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10a56:	2b01      	cmp	r3, #1
   10a58:	d000      	beq.n	10a5c <_spi_interrupt_handler+0x190>
   10a5a:	e763      	b.n	10924 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10a5c:	79e3      	ldrb	r3, [r4, #7]
   10a5e:	2b00      	cmp	r3, #0
   10a60:	d000      	beq.n	10a64 <_spi_interrupt_handler+0x198>
   10a62:	e75f      	b.n	10924 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10a64:	3302      	adds	r3, #2
   10a66:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   10a68:	3301      	adds	r3, #1
   10a6a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   10a6c:	2200      	movs	r2, #0
   10a6e:	3335      	adds	r3, #53	; 0x35
   10a70:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10a72:	07fb      	lsls	r3, r7, #31
   10a74:	d400      	bmi.n	10a78 <_spi_interrupt_handler+0x1ac>
   10a76:	e755      	b.n	10924 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   10a78:	0020      	movs	r0, r4
   10a7a:	68e3      	ldr	r3, [r4, #12]
   10a7c:	4798      	blx	r3
   10a7e:	e751      	b.n	10924 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10a80:	2380      	movs	r3, #128	; 0x80
   10a82:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10a84:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   10a86:	067b      	lsls	r3, r7, #25
   10a88:	d400      	bmi.n	10a8c <_spi_interrupt_handler+0x1c0>
   10a8a:	e74f      	b.n	1092c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   10a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a8e:	0020      	movs	r0, r4
   10a90:	4798      	blx	r3
}
   10a92:	e74b      	b.n	1092c <_spi_interrupt_handler+0x60>
   10a94:	200014a0 	.word	0x200014a0
   10a98:	200014b8 	.word	0x200014b8

00010a9c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   10a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a9e:	46de      	mov	lr, fp
   10aa0:	4657      	mov	r7, sl
   10aa2:	464e      	mov	r6, r9
   10aa4:	4645      	mov	r5, r8
   10aa6:	b5e0      	push	{r5, r6, r7, lr}
   10aa8:	b091      	sub	sp, #68	; 0x44
   10aaa:	0005      	movs	r5, r0
   10aac:	000c      	movs	r4, r1
   10aae:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10ab0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10ab2:	0008      	movs	r0, r1
   10ab4:	4bbc      	ldr	r3, [pc, #752]	; (10da8 <usart_init+0x30c>)
   10ab6:	4798      	blx	r3
   10ab8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10aba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   10abc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10abe:	07db      	lsls	r3, r3, #31
   10ac0:	d506      	bpl.n	10ad0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   10ac2:	b011      	add	sp, #68	; 0x44
   10ac4:	bc3c      	pop	{r2, r3, r4, r5}
   10ac6:	4690      	mov	r8, r2
   10ac8:	4699      	mov	r9, r3
   10aca:	46a2      	mov	sl, r4
   10acc:	46ab      	mov	fp, r5
   10ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10ad0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   10ad2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10ad4:	079b      	lsls	r3, r3, #30
   10ad6:	d4f4      	bmi.n	10ac2 <usart_init+0x26>
   10ad8:	49b4      	ldr	r1, [pc, #720]	; (10dac <usart_init+0x310>)
   10ada:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   10adc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10ade:	2301      	movs	r3, #1
   10ae0:	40bb      	lsls	r3, r7
   10ae2:	4303      	orrs	r3, r0
   10ae4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10ae6:	a90f      	add	r1, sp, #60	; 0x3c
   10ae8:	272d      	movs	r7, #45	; 0x2d
   10aea:	5df3      	ldrb	r3, [r6, r7]
   10aec:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10aee:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10af0:	b2d3      	uxtb	r3, r2
   10af2:	9302      	str	r3, [sp, #8]
   10af4:	0018      	movs	r0, r3
   10af6:	4bae      	ldr	r3, [pc, #696]	; (10db0 <usart_init+0x314>)
   10af8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10afa:	9802      	ldr	r0, [sp, #8]
   10afc:	4bad      	ldr	r3, [pc, #692]	; (10db4 <usart_init+0x318>)
   10afe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10b00:	5df0      	ldrb	r0, [r6, r7]
   10b02:	2100      	movs	r1, #0
   10b04:	4bac      	ldr	r3, [pc, #688]	; (10db8 <usart_init+0x31c>)
   10b06:	4798      	blx	r3
	module->character_size = config->character_size;
   10b08:	7af3      	ldrb	r3, [r6, #11]
   10b0a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   10b0c:	2324      	movs	r3, #36	; 0x24
   10b0e:	5cf3      	ldrb	r3, [r6, r3]
   10b10:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10b12:	2325      	movs	r3, #37	; 0x25
   10b14:	5cf3      	ldrb	r3, [r6, r3]
   10b16:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   10b18:	7ef3      	ldrb	r3, [r6, #27]
   10b1a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10b1c:	7f33      	ldrb	r3, [r6, #28]
   10b1e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10b20:	682b      	ldr	r3, [r5, #0]
   10b22:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10b24:	0018      	movs	r0, r3
   10b26:	4ba0      	ldr	r3, [pc, #640]	; (10da8 <usart_init+0x30c>)
   10b28:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10b2a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   10b2c:	2200      	movs	r2, #0
   10b2e:	230e      	movs	r3, #14
   10b30:	a906      	add	r1, sp, #24
   10b32:	468c      	mov	ip, r1
   10b34:	4463      	add	r3, ip
   10b36:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   10b38:	8a32      	ldrh	r2, [r6, #16]
   10b3a:	9202      	str	r2, [sp, #8]
   10b3c:	2380      	movs	r3, #128	; 0x80
   10b3e:	01db      	lsls	r3, r3, #7
   10b40:	429a      	cmp	r2, r3
   10b42:	d100      	bne.n	10b46 <usart_init+0xaa>
   10b44:	e09e      	b.n	10c84 <usart_init+0x1e8>
   10b46:	d90f      	bls.n	10b68 <usart_init+0xcc>
   10b48:	23c0      	movs	r3, #192	; 0xc0
   10b4a:	01db      	lsls	r3, r3, #7
   10b4c:	9a02      	ldr	r2, [sp, #8]
   10b4e:	429a      	cmp	r2, r3
   10b50:	d100      	bne.n	10b54 <usart_init+0xb8>
   10b52:	e092      	b.n	10c7a <usart_init+0x1de>
   10b54:	2380      	movs	r3, #128	; 0x80
   10b56:	021b      	lsls	r3, r3, #8
   10b58:	429a      	cmp	r2, r3
   10b5a:	d000      	beq.n	10b5e <usart_init+0xc2>
   10b5c:	e11f      	b.n	10d9e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10b5e:	2303      	movs	r3, #3
   10b60:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10b62:	2300      	movs	r3, #0
   10b64:	9307      	str	r3, [sp, #28]
   10b66:	e008      	b.n	10b7a <usart_init+0xde>
	switch (config->sample_rate) {
   10b68:	2380      	movs	r3, #128	; 0x80
   10b6a:	019b      	lsls	r3, r3, #6
   10b6c:	429a      	cmp	r2, r3
   10b6e:	d000      	beq.n	10b72 <usart_init+0xd6>
   10b70:	e115      	b.n	10d9e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10b72:	2310      	movs	r3, #16
   10b74:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10b76:	3b0f      	subs	r3, #15
   10b78:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   10b7a:	6833      	ldr	r3, [r6, #0]
   10b7c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10b7e:	68f3      	ldr	r3, [r6, #12]
   10b80:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10b82:	6973      	ldr	r3, [r6, #20]
   10b84:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10b86:	7e33      	ldrb	r3, [r6, #24]
   10b88:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10b8a:	2326      	movs	r3, #38	; 0x26
   10b8c:	5cf3      	ldrb	r3, [r6, r3]
   10b8e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10b90:	6873      	ldr	r3, [r6, #4]
   10b92:	4699      	mov	r9, r3
	switch (transfer_mode)
   10b94:	2b00      	cmp	r3, #0
   10b96:	d100      	bne.n	10b9a <usart_init+0xfe>
   10b98:	e0a0      	b.n	10cdc <usart_init+0x240>
   10b9a:	2380      	movs	r3, #128	; 0x80
   10b9c:	055b      	lsls	r3, r3, #21
   10b9e:	4599      	cmp	r9, r3
   10ba0:	d100      	bne.n	10ba4 <usart_init+0x108>
   10ba2:	e084      	b.n	10cae <usart_init+0x212>
	if(config->encoding_format_enable) {
   10ba4:	7e73      	ldrb	r3, [r6, #25]
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	d002      	beq.n	10bb0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   10baa:	7eb3      	ldrb	r3, [r6, #26]
   10bac:	4642      	mov	r2, r8
   10bae:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10bb0:	682a      	ldr	r2, [r5, #0]
   10bb2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   10bb4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d1fc      	bne.n	10bb4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   10bba:	330e      	adds	r3, #14
   10bbc:	aa06      	add	r2, sp, #24
   10bbe:	4694      	mov	ip, r2
   10bc0:	4463      	add	r3, ip
   10bc2:	881b      	ldrh	r3, [r3, #0]
   10bc4:	4642      	mov	r2, r8
   10bc6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   10bc8:	9b05      	ldr	r3, [sp, #20]
   10bca:	9a03      	ldr	r2, [sp, #12]
   10bcc:	4313      	orrs	r3, r2
   10bce:	9a04      	ldr	r2, [sp, #16]
   10bd0:	4313      	orrs	r3, r2
   10bd2:	464a      	mov	r2, r9
   10bd4:	4313      	orrs	r3, r2
   10bd6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10bd8:	465b      	mov	r3, fp
   10bda:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   10bdc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10bde:	4653      	mov	r3, sl
   10be0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   10be2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   10be4:	2327      	movs	r3, #39	; 0x27
   10be6:	5cf3      	ldrb	r3, [r6, r3]
   10be8:	2b00      	cmp	r3, #0
   10bea:	d101      	bne.n	10bf0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   10bec:	3304      	adds	r3, #4
   10bee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10bf0:	7e73      	ldrb	r3, [r6, #25]
   10bf2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10bf4:	7f32      	ldrb	r2, [r6, #28]
   10bf6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10bf8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10bfa:	7f72      	ldrb	r2, [r6, #29]
   10bfc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10bfe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10c00:	2224      	movs	r2, #36	; 0x24
   10c02:	5cb2      	ldrb	r2, [r6, r2]
   10c04:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   10c06:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   10c08:	2225      	movs	r2, #37	; 0x25
   10c0a:	5cb2      	ldrb	r2, [r6, r2]
   10c0c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10c0e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   10c10:	7ab1      	ldrb	r1, [r6, #10]
   10c12:	7af2      	ldrb	r2, [r6, #11]
   10c14:	4311      	orrs	r1, r2
   10c16:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   10c18:	8933      	ldrh	r3, [r6, #8]
   10c1a:	2bff      	cmp	r3, #255	; 0xff
   10c1c:	d100      	bne.n	10c20 <usart_init+0x184>
   10c1e:	e081      	b.n	10d24 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   10c20:	2280      	movs	r2, #128	; 0x80
   10c22:	0452      	lsls	r2, r2, #17
   10c24:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   10c26:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   10c28:	232c      	movs	r3, #44	; 0x2c
   10c2a:	5cf3      	ldrb	r3, [r6, r3]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d103      	bne.n	10c38 <usart_init+0x19c>
   10c30:	4b62      	ldr	r3, [pc, #392]	; (10dbc <usart_init+0x320>)
   10c32:	789b      	ldrb	r3, [r3, #2]
   10c34:	079b      	lsls	r3, r3, #30
   10c36:	d501      	bpl.n	10c3c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10c38:	2380      	movs	r3, #128	; 0x80
   10c3a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c3c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10c3e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10c40:	2b00      	cmp	r3, #0
   10c42:	d1fc      	bne.n	10c3e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   10c44:	4643      	mov	r3, r8
   10c46:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c48:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10c4a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d1fc      	bne.n	10c4a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   10c50:	4643      	mov	r3, r8
   10c52:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10c54:	ab0e      	add	r3, sp, #56	; 0x38
   10c56:	2280      	movs	r2, #128	; 0x80
   10c58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10c5a:	2200      	movs	r2, #0
   10c5c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   10c5e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10c60:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10c62:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10c64:	930a      	str	r3, [sp, #40]	; 0x28
   10c66:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10c68:	930b      	str	r3, [sp, #44]	; 0x2c
   10c6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10c6c:	930c      	str	r3, [sp, #48]	; 0x30
   10c6e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10c70:	9302      	str	r3, [sp, #8]
   10c72:	930d      	str	r3, [sp, #52]	; 0x34
   10c74:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10c76:	ae0a      	add	r6, sp, #40	; 0x28
   10c78:	e063      	b.n	10d42 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10c7a:	2308      	movs	r3, #8
   10c7c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10c7e:	3b07      	subs	r3, #7
   10c80:	9307      	str	r3, [sp, #28]
   10c82:	e77a      	b.n	10b7a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   10c84:	6833      	ldr	r3, [r6, #0]
   10c86:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10c88:	68f3      	ldr	r3, [r6, #12]
   10c8a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10c8c:	6973      	ldr	r3, [r6, #20]
   10c8e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10c90:	7e33      	ldrb	r3, [r6, #24]
   10c92:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10c94:	2326      	movs	r3, #38	; 0x26
   10c96:	5cf3      	ldrb	r3, [r6, r3]
   10c98:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10c9a:	6873      	ldr	r3, [r6, #4]
   10c9c:	4699      	mov	r9, r3
	switch (transfer_mode)
   10c9e:	2b00      	cmp	r3, #0
   10ca0:	d018      	beq.n	10cd4 <usart_init+0x238>
   10ca2:	2380      	movs	r3, #128	; 0x80
   10ca4:	055b      	lsls	r3, r3, #21
   10ca6:	4599      	cmp	r9, r3
   10ca8:	d001      	beq.n	10cae <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   10caa:	2000      	movs	r0, #0
   10cac:	e025      	b.n	10cfa <usart_init+0x25e>
			if (!config->use_external_clock) {
   10cae:	2327      	movs	r3, #39	; 0x27
   10cb0:	5cf3      	ldrb	r3, [r6, r3]
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	d000      	beq.n	10cb8 <usart_init+0x21c>
   10cb6:	e775      	b.n	10ba4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10cb8:	6a33      	ldr	r3, [r6, #32]
   10cba:	001f      	movs	r7, r3
   10cbc:	b2c0      	uxtb	r0, r0
   10cbe:	4b40      	ldr	r3, [pc, #256]	; (10dc0 <usart_init+0x324>)
   10cc0:	4798      	blx	r3
   10cc2:	0001      	movs	r1, r0
   10cc4:	220e      	movs	r2, #14
   10cc6:	ab06      	add	r3, sp, #24
   10cc8:	469c      	mov	ip, r3
   10cca:	4462      	add	r2, ip
   10ccc:	0038      	movs	r0, r7
   10cce:	4b3d      	ldr	r3, [pc, #244]	; (10dc4 <usart_init+0x328>)
   10cd0:	4798      	blx	r3
   10cd2:	e012      	b.n	10cfa <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10cd4:	2308      	movs	r3, #8
   10cd6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10cd8:	2300      	movs	r3, #0
   10cda:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   10cdc:	2327      	movs	r3, #39	; 0x27
   10cde:	5cf3      	ldrb	r3, [r6, r3]
   10ce0:	2b00      	cmp	r3, #0
   10ce2:	d00e      	beq.n	10d02 <usart_init+0x266>
				status_code =
   10ce4:	9b06      	ldr	r3, [sp, #24]
   10ce6:	9300      	str	r3, [sp, #0]
   10ce8:	9b07      	ldr	r3, [sp, #28]
   10cea:	220e      	movs	r2, #14
   10cec:	a906      	add	r1, sp, #24
   10cee:	468c      	mov	ip, r1
   10cf0:	4462      	add	r2, ip
   10cf2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10cf4:	6a30      	ldr	r0, [r6, #32]
   10cf6:	4f34      	ldr	r7, [pc, #208]	; (10dc8 <usart_init+0x32c>)
   10cf8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   10cfa:	2800      	cmp	r0, #0
   10cfc:	d000      	beq.n	10d00 <usart_init+0x264>
   10cfe:	e6e0      	b.n	10ac2 <usart_init+0x26>
   10d00:	e750      	b.n	10ba4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   10d02:	6a33      	ldr	r3, [r6, #32]
   10d04:	001f      	movs	r7, r3
   10d06:	b2c0      	uxtb	r0, r0
   10d08:	4b2d      	ldr	r3, [pc, #180]	; (10dc0 <usart_init+0x324>)
   10d0a:	4798      	blx	r3
   10d0c:	0001      	movs	r1, r0
				status_code =
   10d0e:	9b06      	ldr	r3, [sp, #24]
   10d10:	9300      	str	r3, [sp, #0]
   10d12:	9b07      	ldr	r3, [sp, #28]
   10d14:	220e      	movs	r2, #14
   10d16:	a806      	add	r0, sp, #24
   10d18:	4684      	mov	ip, r0
   10d1a:	4462      	add	r2, ip
   10d1c:	0038      	movs	r0, r7
   10d1e:	4f2a      	ldr	r7, [pc, #168]	; (10dc8 <usart_init+0x32c>)
   10d20:	47b8      	blx	r7
   10d22:	e7ea      	b.n	10cfa <usart_init+0x25e>
		if(config->lin_slave_enable) {
   10d24:	7ef3      	ldrb	r3, [r6, #27]
   10d26:	2b00      	cmp	r3, #0
   10d28:	d100      	bne.n	10d2c <usart_init+0x290>
   10d2a:	e77d      	b.n	10c28 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10d2c:	2380      	movs	r3, #128	; 0x80
   10d2e:	04db      	lsls	r3, r3, #19
   10d30:	431f      	orrs	r7, r3
   10d32:	e779      	b.n	10c28 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10d34:	0020      	movs	r0, r4
   10d36:	4b25      	ldr	r3, [pc, #148]	; (10dcc <usart_init+0x330>)
   10d38:	4798      	blx	r3
   10d3a:	e007      	b.n	10d4c <usart_init+0x2b0>
   10d3c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10d3e:	2f04      	cmp	r7, #4
   10d40:	d00d      	beq.n	10d5e <usart_init+0x2c2>
   10d42:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10d44:	00bb      	lsls	r3, r7, #2
   10d46:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   10d48:	2800      	cmp	r0, #0
   10d4a:	d0f3      	beq.n	10d34 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   10d4c:	1c43      	adds	r3, r0, #1
   10d4e:	d0f5      	beq.n	10d3c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10d50:	a90e      	add	r1, sp, #56	; 0x38
   10d52:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10d54:	0c00      	lsrs	r0, r0, #16
   10d56:	b2c0      	uxtb	r0, r0
   10d58:	4b1d      	ldr	r3, [pc, #116]	; (10dd0 <usart_init+0x334>)
   10d5a:	4798      	blx	r3
   10d5c:	e7ee      	b.n	10d3c <usart_init+0x2a0>
		module->callback[i]            = NULL;
   10d5e:	2300      	movs	r3, #0
   10d60:	60eb      	str	r3, [r5, #12]
   10d62:	612b      	str	r3, [r5, #16]
   10d64:	616b      	str	r3, [r5, #20]
   10d66:	61ab      	str	r3, [r5, #24]
   10d68:	61eb      	str	r3, [r5, #28]
   10d6a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   10d6c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10d6e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10d70:	2200      	movs	r2, #0
   10d72:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10d74:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10d76:	3330      	adds	r3, #48	; 0x30
   10d78:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   10d7a:	3301      	adds	r3, #1
   10d7c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   10d7e:	3301      	adds	r3, #1
   10d80:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   10d82:	3301      	adds	r3, #1
   10d84:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10d86:	6828      	ldr	r0, [r5, #0]
   10d88:	4b07      	ldr	r3, [pc, #28]	; (10da8 <usart_init+0x30c>)
   10d8a:	4798      	blx	r3
   10d8c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10d8e:	4911      	ldr	r1, [pc, #68]	; (10dd4 <usart_init+0x338>)
   10d90:	4b11      	ldr	r3, [pc, #68]	; (10dd8 <usart_init+0x33c>)
   10d92:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10d94:	00a4      	lsls	r4, r4, #2
   10d96:	4b11      	ldr	r3, [pc, #68]	; (10ddc <usart_init+0x340>)
   10d98:	50e5      	str	r5, [r4, r3]
	return status_code;
   10d9a:	2000      	movs	r0, #0
   10d9c:	e691      	b.n	10ac2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10d9e:	2310      	movs	r3, #16
   10da0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10da2:	2300      	movs	r3, #0
   10da4:	9307      	str	r3, [sp, #28]
   10da6:	e6e8      	b.n	10b7a <usart_init+0xde>
   10da8:	000102a1 	.word	0x000102a1
   10dac:	40000400 	.word	0x40000400
   10db0:	00011759 	.word	0x00011759
   10db4:	000116cd 	.word	0x000116cd
   10db8:	000100dd 	.word	0x000100dd
   10dbc:	41002000 	.word	0x41002000
   10dc0:	00011775 	.word	0x00011775
   10dc4:	0001001f 	.word	0x0001001f
   10dc8:	00010049 	.word	0x00010049
   10dcc:	00010129 	.word	0x00010129
   10dd0:	00011851 	.word	0x00011851
   10dd4:	00010f7d 	.word	0x00010f7d
   10dd8:	000102dd 	.word	0x000102dd
   10ddc:	200014a0 	.word	0x200014a0

00010de0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10de0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10de2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10de4:	2a00      	cmp	r2, #0
   10de6:	d101      	bne.n	10dec <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10de8:	0018      	movs	r0, r3
   10dea:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   10dec:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   10dee:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10df0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10df2:	2a00      	cmp	r2, #0
   10df4:	d1f8      	bne.n	10de8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10df6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10df8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   10dfa:	2a00      	cmp	r2, #0
   10dfc:	d1fc      	bne.n	10df8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   10dfe:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10e00:	2102      	movs	r1, #2
   10e02:	7e1a      	ldrb	r2, [r3, #24]
   10e04:	420a      	tst	r2, r1
   10e06:	d0fc      	beq.n	10e02 <usart_write_wait+0x22>
	return STATUS_OK;
   10e08:	2300      	movs	r3, #0
   10e0a:	e7ed      	b.n	10de8 <usart_write_wait+0x8>

00010e0c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   10e0c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   10e0e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   10e10:	2a00      	cmp	r2, #0
   10e12:	d101      	bne.n	10e18 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   10e14:	0018      	movs	r0, r3
   10e16:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   10e18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10e1a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10e1c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   10e1e:	2a00      	cmp	r2, #0
   10e20:	d1f8      	bne.n	10e14 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10e22:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   10e24:	7e10      	ldrb	r0, [r2, #24]
   10e26:	0740      	lsls	r0, r0, #29
   10e28:	d5f4      	bpl.n	10e14 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   10e2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10e2c:	2b00      	cmp	r3, #0
   10e2e:	d1fc      	bne.n	10e2a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10e30:	8b53      	ldrh	r3, [r2, #26]
   10e32:	b2db      	uxtb	r3, r3
	if (error_code) {
   10e34:	0698      	lsls	r0, r3, #26
   10e36:	d01d      	beq.n	10e74 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   10e38:	0798      	lsls	r0, r3, #30
   10e3a:	d503      	bpl.n	10e44 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10e3c:	2302      	movs	r3, #2
   10e3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   10e40:	3318      	adds	r3, #24
   10e42:	e7e7      	b.n	10e14 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10e44:	0758      	lsls	r0, r3, #29
   10e46:	d503      	bpl.n	10e50 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10e48:	2304      	movs	r3, #4
   10e4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   10e4c:	331a      	adds	r3, #26
   10e4e:	e7e1      	b.n	10e14 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10e50:	07d8      	lsls	r0, r3, #31
   10e52:	d503      	bpl.n	10e5c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10e54:	2301      	movs	r3, #1
   10e56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   10e58:	3312      	adds	r3, #18
   10e5a:	e7db      	b.n	10e14 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   10e5c:	06d8      	lsls	r0, r3, #27
   10e5e:	d503      	bpl.n	10e68 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10e60:	2310      	movs	r3, #16
   10e62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   10e64:	3332      	adds	r3, #50	; 0x32
   10e66:	e7d5      	b.n	10e14 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   10e68:	069b      	lsls	r3, r3, #26
   10e6a:	d503      	bpl.n	10e74 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10e6c:	2320      	movs	r3, #32
   10e6e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   10e70:	3321      	adds	r3, #33	; 0x21
   10e72:	e7cf      	b.n	10e14 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   10e74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   10e76:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   10e78:	2300      	movs	r3, #0
   10e7a:	e7cb      	b.n	10e14 <usart_read_wait+0x8>

00010e7c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e7e:	0006      	movs	r6, r0
   10e80:	000c      	movs	r4, r1
   10e82:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10e84:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10e86:	4b0a      	ldr	r3, [pc, #40]	; (10eb0 <_usart_write_buffer+0x34>)
   10e88:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   10e8a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   10e8c:	b29b      	uxth	r3, r3
   10e8e:	2b00      	cmp	r3, #0
   10e90:	d003      	beq.n	10e9a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   10e92:	4b08      	ldr	r3, [pc, #32]	; (10eb4 <_usart_write_buffer+0x38>)
   10e94:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10e96:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   10e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   10e9a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   10e9c:	4b05      	ldr	r3, [pc, #20]	; (10eb4 <_usart_write_buffer+0x38>)
   10e9e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   10ea0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   10ea2:	2205      	movs	r2, #5
   10ea4:	2333      	movs	r3, #51	; 0x33
   10ea6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   10ea8:	3b32      	subs	r3, #50	; 0x32
   10eaa:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   10eac:	2000      	movs	r0, #0
   10eae:	e7f3      	b.n	10e98 <_usart_write_buffer+0x1c>
   10eb0:	0000fa8d 	.word	0x0000fa8d
   10eb4:	0000facd 	.word	0x0000facd

00010eb8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10eba:	0004      	movs	r4, r0
   10ebc:	000d      	movs	r5, r1
   10ebe:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10ec0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10ec2:	4b0f      	ldr	r3, [pc, #60]	; (10f00 <_usart_read_buffer+0x48>)
   10ec4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   10ec6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10ec8:	b29b      	uxth	r3, r3
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d003      	beq.n	10ed6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   10ece:	4b0d      	ldr	r3, [pc, #52]	; (10f04 <_usart_read_buffer+0x4c>)
   10ed0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10ed2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   10ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   10ed6:	85a6      	strh	r6, [r4, #44]	; 0x2c
   10ed8:	4b0a      	ldr	r3, [pc, #40]	; (10f04 <_usart_read_buffer+0x4c>)
   10eda:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   10edc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   10ede:	2205      	movs	r2, #5
   10ee0:	2332      	movs	r3, #50	; 0x32
   10ee2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   10ee4:	3b2e      	subs	r3, #46	; 0x2e
   10ee6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   10ee8:	7a23      	ldrb	r3, [r4, #8]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d001      	beq.n	10ef2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   10eee:	2320      	movs	r3, #32
   10ef0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   10ef2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   10ef4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d0ec      	beq.n	10ed4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   10efa:	2308      	movs	r3, #8
   10efc:	75bb      	strb	r3, [r7, #22]
   10efe:	e7e9      	b.n	10ed4 <_usart_read_buffer+0x1c>
   10f00:	0000fa8d 	.word	0x0000fa8d
   10f04:	0000facd 	.word	0x0000facd

00010f08 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   10f08:	1c93      	adds	r3, r2, #2
   10f0a:	009b      	lsls	r3, r3, #2
   10f0c:	18c3      	adds	r3, r0, r3
   10f0e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   10f10:	2130      	movs	r1, #48	; 0x30
   10f12:	2301      	movs	r3, #1
   10f14:	4093      	lsls	r3, r2
   10f16:	001a      	movs	r2, r3
   10f18:	5c43      	ldrb	r3, [r0, r1]
   10f1a:	4313      	orrs	r3, r2
   10f1c:	5443      	strb	r3, [r0, r1]
}
   10f1e:	4770      	bx	lr

00010f20 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10f20:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10f22:	2317      	movs	r3, #23
	if (length == 0) {
   10f24:	2a00      	cmp	r2, #0
   10f26:	d101      	bne.n	10f2c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   10f28:	0018      	movs	r0, r3
   10f2a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   10f2c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   10f2e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   10f30:	2c00      	cmp	r4, #0
   10f32:	d0f9      	beq.n	10f28 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   10f34:	4b01      	ldr	r3, [pc, #4]	; (10f3c <usart_write_buffer_job+0x1c>)
   10f36:	4798      	blx	r3
   10f38:	0003      	movs	r3, r0
   10f3a:	e7f5      	b.n	10f28 <usart_write_buffer_job+0x8>
   10f3c:	00010e7d 	.word	0x00010e7d

00010f40 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10f40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10f42:	2317      	movs	r3, #23
	if (length == 0) {
   10f44:	2a00      	cmp	r2, #0
   10f46:	d101      	bne.n	10f4c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   10f48:	0018      	movs	r0, r3
   10f4a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   10f4c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   10f4e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   10f50:	2c00      	cmp	r4, #0
   10f52:	d0f9      	beq.n	10f48 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   10f54:	4b01      	ldr	r3, [pc, #4]	; (10f5c <usart_read_buffer_job+0x1c>)
   10f56:	4798      	blx	r3
   10f58:	0003      	movs	r3, r0
   10f5a:	e7f5      	b.n	10f48 <usart_read_buffer_job+0x8>
   10f5c:	00010eb9 	.word	0x00010eb9

00010f60 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   10f60:	2900      	cmp	r1, #0
   10f62:	d003      	beq.n	10f6c <usart_get_job_status+0xc>
   10f64:	2901      	cmp	r1, #1
   10f66:	d005      	beq.n	10f74 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   10f68:	2017      	movs	r0, #23
   10f6a:	e002      	b.n	10f72 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   10f6c:	2332      	movs	r3, #50	; 0x32
   10f6e:	5cc0      	ldrb	r0, [r0, r3]
   10f70:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   10f72:	4770      	bx	lr
			status_code = module->tx_status;
   10f74:	2333      	movs	r3, #51	; 0x33
   10f76:	5cc0      	ldrb	r0, [r0, r3]
   10f78:	b2c0      	uxtb	r0, r0
			break;
   10f7a:	e7fa      	b.n	10f72 <usart_get_job_status+0x12>

00010f7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   10f7e:	0080      	lsls	r0, r0, #2
   10f80:	4b62      	ldr	r3, [pc, #392]	; (1110c <_usart_interrupt_handler+0x190>)
   10f82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10f84:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10f86:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   10f88:	2b00      	cmp	r3, #0
   10f8a:	d1fc      	bne.n	10f86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10f8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   10f8e:	7da6      	ldrb	r6, [r4, #22]
   10f90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   10f92:	2330      	movs	r3, #48	; 0x30
   10f94:	5ceb      	ldrb	r3, [r5, r3]
   10f96:	2231      	movs	r2, #49	; 0x31
   10f98:	5caf      	ldrb	r7, [r5, r2]
   10f9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10f9c:	07f3      	lsls	r3, r6, #31
   10f9e:	d522      	bpl.n	10fe6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   10fa0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10fa2:	b29b      	uxth	r3, r3
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	d01c      	beq.n	10fe2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10fa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10faa:	7813      	ldrb	r3, [r2, #0]
   10fac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10fae:	1c51      	adds	r1, r2, #1
   10fb0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10fb2:	7969      	ldrb	r1, [r5, #5]
   10fb4:	2901      	cmp	r1, #1
   10fb6:	d00e      	beq.n	10fd6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10fb8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10fba:	05db      	lsls	r3, r3, #23
   10fbc:	0ddb      	lsrs	r3, r3, #23
   10fbe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10fc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10fc2:	3b01      	subs	r3, #1
   10fc4:	b29b      	uxth	r3, r3
   10fc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10fc8:	2b00      	cmp	r3, #0
   10fca:	d10c      	bne.n	10fe6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10fcc:	3301      	adds	r3, #1
   10fce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10fd0:	3301      	adds	r3, #1
   10fd2:	75a3      	strb	r3, [r4, #22]
   10fd4:	e007      	b.n	10fe6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10fd6:	7851      	ldrb	r1, [r2, #1]
   10fd8:	0209      	lsls	r1, r1, #8
   10fda:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   10fdc:	3202      	adds	r2, #2
   10fde:	62aa      	str	r2, [r5, #40]	; 0x28
   10fe0:	e7eb      	b.n	10fba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10fe2:	2301      	movs	r3, #1
   10fe4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10fe6:	07b3      	lsls	r3, r6, #30
   10fe8:	d506      	bpl.n	10ff8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10fea:	2302      	movs	r3, #2
   10fec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   10fee:	2200      	movs	r2, #0
   10ff0:	3331      	adds	r3, #49	; 0x31
   10ff2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10ff4:	07fb      	lsls	r3, r7, #31
   10ff6:	d41a      	bmi.n	1102e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10ff8:	0773      	lsls	r3, r6, #29
   10ffa:	d565      	bpl.n	110c8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   10ffc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10ffe:	b29b      	uxth	r3, r3
   11000:	2b00      	cmp	r3, #0
   11002:	d05f      	beq.n	110c4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   11004:	8b63      	ldrh	r3, [r4, #26]
   11006:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   11008:	071a      	lsls	r2, r3, #28
   1100a:	d414      	bmi.n	11036 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1100c:	223f      	movs	r2, #63	; 0x3f
   1100e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   11010:	2b00      	cmp	r3, #0
   11012:	d034      	beq.n	1107e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   11014:	079a      	lsls	r2, r3, #30
   11016:	d511      	bpl.n	1103c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   11018:	221a      	movs	r2, #26
   1101a:	2332      	movs	r3, #50	; 0x32
   1101c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1101e:	3b30      	subs	r3, #48	; 0x30
   11020:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   11022:	077b      	lsls	r3, r7, #29
   11024:	d550      	bpl.n	110c8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   11026:	0028      	movs	r0, r5
   11028:	696b      	ldr	r3, [r5, #20]
   1102a:	4798      	blx	r3
   1102c:	e04c      	b.n	110c8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1102e:	0028      	movs	r0, r5
   11030:	68eb      	ldr	r3, [r5, #12]
   11032:	4798      	blx	r3
   11034:	e7e0      	b.n	10ff8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   11036:	2237      	movs	r2, #55	; 0x37
   11038:	4013      	ands	r3, r2
   1103a:	e7e9      	b.n	11010 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1103c:	075a      	lsls	r2, r3, #29
   1103e:	d505      	bpl.n	1104c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   11040:	221e      	movs	r2, #30
   11042:	2332      	movs	r3, #50	; 0x32
   11044:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   11046:	3b2e      	subs	r3, #46	; 0x2e
   11048:	8363      	strh	r3, [r4, #26]
   1104a:	e7ea      	b.n	11022 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1104c:	07da      	lsls	r2, r3, #31
   1104e:	d505      	bpl.n	1105c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   11050:	2213      	movs	r2, #19
   11052:	2332      	movs	r3, #50	; 0x32
   11054:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   11056:	3b31      	subs	r3, #49	; 0x31
   11058:	8363      	strh	r3, [r4, #26]
   1105a:	e7e2      	b.n	11022 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1105c:	06da      	lsls	r2, r3, #27
   1105e:	d505      	bpl.n	1106c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   11060:	2242      	movs	r2, #66	; 0x42
   11062:	2332      	movs	r3, #50	; 0x32
   11064:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   11066:	3b22      	subs	r3, #34	; 0x22
   11068:	8363      	strh	r3, [r4, #26]
   1106a:	e7da      	b.n	11022 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1106c:	2220      	movs	r2, #32
   1106e:	421a      	tst	r2, r3
   11070:	d0d7      	beq.n	11022 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   11072:	3221      	adds	r2, #33	; 0x21
   11074:	2332      	movs	r3, #50	; 0x32
   11076:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   11078:	3b12      	subs	r3, #18
   1107a:	8363      	strh	r3, [r4, #26]
   1107c:	e7d1      	b.n	11022 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1107e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11080:	05db      	lsls	r3, r3, #23
   11082:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   11084:	b2da      	uxtb	r2, r3
   11086:	6a69      	ldr	r1, [r5, #36]	; 0x24
   11088:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1108a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1108c:	1c51      	adds	r1, r2, #1
   1108e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   11090:	7969      	ldrb	r1, [r5, #5]
   11092:	2901      	cmp	r1, #1
   11094:	d010      	beq.n	110b8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   11096:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   11098:	3b01      	subs	r3, #1
   1109a:	b29b      	uxth	r3, r3
   1109c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1109e:	2b00      	cmp	r3, #0
   110a0:	d112      	bne.n	110c8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   110a2:	3304      	adds	r3, #4
   110a4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   110a6:	2200      	movs	r2, #0
   110a8:	332e      	adds	r3, #46	; 0x2e
   110aa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   110ac:	07bb      	lsls	r3, r7, #30
   110ae:	d50b      	bpl.n	110c8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   110b0:	0028      	movs	r0, r5
   110b2:	692b      	ldr	r3, [r5, #16]
   110b4:	4798      	blx	r3
   110b6:	e007      	b.n	110c8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   110b8:	0a1b      	lsrs	r3, r3, #8
   110ba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   110bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   110be:	3301      	adds	r3, #1
   110c0:	626b      	str	r3, [r5, #36]	; 0x24
   110c2:	e7e8      	b.n	11096 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   110c4:	2304      	movs	r3, #4
   110c6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   110c8:	06f3      	lsls	r3, r6, #27
   110ca:	d504      	bpl.n	110d6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   110cc:	2310      	movs	r3, #16
   110ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   110d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   110d2:	06fb      	lsls	r3, r7, #27
   110d4:	d40e      	bmi.n	110f4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   110d6:	06b3      	lsls	r3, r6, #26
   110d8:	d504      	bpl.n	110e4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   110da:	2320      	movs	r3, #32
   110dc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   110de:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   110e0:	073b      	lsls	r3, r7, #28
   110e2:	d40b      	bmi.n	110fc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   110e4:	0733      	lsls	r3, r6, #28
   110e6:	d504      	bpl.n	110f2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   110e8:	2308      	movs	r3, #8
   110ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   110ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   110ee:	06bb      	lsls	r3, r7, #26
   110f0:	d408      	bmi.n	11104 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   110f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   110f4:	0028      	movs	r0, r5
   110f6:	69eb      	ldr	r3, [r5, #28]
   110f8:	4798      	blx	r3
   110fa:	e7ec      	b.n	110d6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   110fc:	0028      	movs	r0, r5
   110fe:	69ab      	ldr	r3, [r5, #24]
   11100:	4798      	blx	r3
   11102:	e7ef      	b.n	110e4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   11104:	6a2b      	ldr	r3, [r5, #32]
   11106:	0028      	movs	r0, r5
   11108:	4798      	blx	r3
}
   1110a:	e7f2      	b.n	110f2 <_usart_interrupt_handler+0x176>
   1110c:	200014a0 	.word	0x200014a0

00011110 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   11110:	b510      	push	{r4, lr}
	switch (clock_source) {
   11112:	2808      	cmp	r0, #8
   11114:	d803      	bhi.n	1111e <system_clock_source_get_hz+0xe>
   11116:	0080      	lsls	r0, r0, #2
   11118:	4b1c      	ldr	r3, [pc, #112]	; (1118c <system_clock_source_get_hz+0x7c>)
   1111a:	581b      	ldr	r3, [r3, r0]
   1111c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1111e:	2000      	movs	r0, #0
   11120:	e032      	b.n	11188 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   11122:	4b1b      	ldr	r3, [pc, #108]	; (11190 <system_clock_source_get_hz+0x80>)
   11124:	6918      	ldr	r0, [r3, #16]
   11126:	e02f      	b.n	11188 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   11128:	4b1a      	ldr	r3, [pc, #104]	; (11194 <system_clock_source_get_hz+0x84>)
   1112a:	6a1b      	ldr	r3, [r3, #32]
   1112c:	059b      	lsls	r3, r3, #22
   1112e:	0f9b      	lsrs	r3, r3, #30
   11130:	4819      	ldr	r0, [pc, #100]	; (11198 <system_clock_source_get_hz+0x88>)
   11132:	40d8      	lsrs	r0, r3
   11134:	e028      	b.n	11188 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   11136:	4b16      	ldr	r3, [pc, #88]	; (11190 <system_clock_source_get_hz+0x80>)
   11138:	6958      	ldr	r0, [r3, #20]
   1113a:	e025      	b.n	11188 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1113c:	4b14      	ldr	r3, [pc, #80]	; (11190 <system_clock_source_get_hz+0x80>)
   1113e:	681b      	ldr	r3, [r3, #0]
			return 0;
   11140:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   11142:	079b      	lsls	r3, r3, #30
   11144:	d520      	bpl.n	11188 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11146:	4913      	ldr	r1, [pc, #76]	; (11194 <system_clock_source_get_hz+0x84>)
   11148:	2210      	movs	r2, #16
   1114a:	68cb      	ldr	r3, [r1, #12]
   1114c:	421a      	tst	r2, r3
   1114e:	d0fc      	beq.n	1114a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   11150:	4b0f      	ldr	r3, [pc, #60]	; (11190 <system_clock_source_get_hz+0x80>)
   11152:	681a      	ldr	r2, [r3, #0]
   11154:	2324      	movs	r3, #36	; 0x24
   11156:	4013      	ands	r3, r2
   11158:	2b04      	cmp	r3, #4
   1115a:	d001      	beq.n	11160 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1115c:	480f      	ldr	r0, [pc, #60]	; (1119c <system_clock_source_get_hz+0x8c>)
   1115e:	e013      	b.n	11188 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   11160:	2000      	movs	r0, #0
   11162:	4b0f      	ldr	r3, [pc, #60]	; (111a0 <system_clock_source_get_hz+0x90>)
   11164:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   11166:	4b0a      	ldr	r3, [pc, #40]	; (11190 <system_clock_source_get_hz+0x80>)
   11168:	689b      	ldr	r3, [r3, #8]
   1116a:	041b      	lsls	r3, r3, #16
   1116c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1116e:	4358      	muls	r0, r3
   11170:	e00a      	b.n	11188 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   11172:	2350      	movs	r3, #80	; 0x50
   11174:	4a07      	ldr	r2, [pc, #28]	; (11194 <system_clock_source_get_hz+0x84>)
   11176:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   11178:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1117a:	075b      	lsls	r3, r3, #29
   1117c:	d504      	bpl.n	11188 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1117e:	4b04      	ldr	r3, [pc, #16]	; (11190 <system_clock_source_get_hz+0x80>)
   11180:	68d8      	ldr	r0, [r3, #12]
   11182:	e001      	b.n	11188 <system_clock_source_get_hz+0x78>
		return 32768UL;
   11184:	2080      	movs	r0, #128	; 0x80
   11186:	0200      	lsls	r0, r0, #8
	}
}
   11188:	bd10      	pop	{r4, pc}
   1118a:	46c0      	nop			; (mov r8, r8)
   1118c:	000192ac 	.word	0x000192ac
   11190:	20000330 	.word	0x20000330
   11194:	40000800 	.word	0x40000800
   11198:	007a1200 	.word	0x007a1200
   1119c:	02dc6c00 	.word	0x02dc6c00
   111a0:	00011775 	.word	0x00011775

000111a4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   111a4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   111a6:	490c      	ldr	r1, [pc, #48]	; (111d8 <system_clock_source_osc8m_set_config+0x34>)
   111a8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   111aa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   111ac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   111ae:	7840      	ldrb	r0, [r0, #1]
   111b0:	2201      	movs	r2, #1
   111b2:	4010      	ands	r0, r2
   111b4:	0180      	lsls	r0, r0, #6
   111b6:	2640      	movs	r6, #64	; 0x40
   111b8:	43b3      	bics	r3, r6
   111ba:	4303      	orrs	r3, r0
   111bc:	402a      	ands	r2, r5
   111be:	01d2      	lsls	r2, r2, #7
   111c0:	2080      	movs	r0, #128	; 0x80
   111c2:	4383      	bics	r3, r0
   111c4:	4313      	orrs	r3, r2
   111c6:	2203      	movs	r2, #3
   111c8:	4022      	ands	r2, r4
   111ca:	0212      	lsls	r2, r2, #8
   111cc:	4803      	ldr	r0, [pc, #12]	; (111dc <system_clock_source_osc8m_set_config+0x38>)
   111ce:	4003      	ands	r3, r0
   111d0:	4313      	orrs	r3, r2
   111d2:	620b      	str	r3, [r1, #32]
}
   111d4:	bd70      	pop	{r4, r5, r6, pc}
   111d6:	46c0      	nop			; (mov r8, r8)
   111d8:	40000800 	.word	0x40000800
   111dc:	fffffcff 	.word	0xfffffcff

000111e0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111e2:	46de      	mov	lr, fp
   111e4:	4657      	mov	r7, sl
   111e6:	464e      	mov	r6, r9
   111e8:	4645      	mov	r5, r8
   111ea:	b5e0      	push	{r5, r6, r7, lr}
   111ec:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   111ee:	4b26      	ldr	r3, [pc, #152]	; (11288 <system_clock_source_xosc32k_set_config+0xa8>)
   111f0:	469b      	mov	fp, r3
   111f2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   111f4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   111f6:	7800      	ldrb	r0, [r0, #0]
   111f8:	4242      	negs	r2, r0
   111fa:	4142      	adcs	r2, r0
   111fc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   111fe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   11200:	78ca      	ldrb	r2, [r1, #3]
   11202:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   11204:	790a      	ldrb	r2, [r1, #4]
   11206:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   11208:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1120a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   1120c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1120e:	688a      	ldr	r2, [r1, #8]
   11210:	491e      	ldr	r1, [pc, #120]	; (1128c <system_clock_source_xosc32k_set_config+0xac>)
   11212:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   11214:	2101      	movs	r1, #1
   11216:	464a      	mov	r2, r9
   11218:	0092      	lsls	r2, r2, #2
   1121a:	4691      	mov	r9, r2
   1121c:	2204      	movs	r2, #4
   1121e:	4393      	bics	r3, r2
   11220:	464a      	mov	r2, r9
   11222:	4313      	orrs	r3, r2
   11224:	4642      	mov	r2, r8
   11226:	400a      	ands	r2, r1
   11228:	00d2      	lsls	r2, r2, #3
   1122a:	4690      	mov	r8, r2
   1122c:	2208      	movs	r2, #8
   1122e:	4393      	bics	r3, r2
   11230:	4642      	mov	r2, r8
   11232:	4313      	orrs	r3, r2
   11234:	4662      	mov	r2, ip
   11236:	400a      	ands	r2, r1
   11238:	0112      	lsls	r2, r2, #4
   1123a:	4694      	mov	ip, r2
   1123c:	2210      	movs	r2, #16
   1123e:	4393      	bics	r3, r2
   11240:	4662      	mov	r2, ip
   11242:	4313      	orrs	r3, r2
   11244:	4008      	ands	r0, r1
   11246:	0140      	lsls	r0, r0, #5
   11248:	2220      	movs	r2, #32
   1124a:	4393      	bics	r3, r2
   1124c:	4303      	orrs	r3, r0
   1124e:	400f      	ands	r7, r1
   11250:	01bf      	lsls	r7, r7, #6
   11252:	2040      	movs	r0, #64	; 0x40
   11254:	4383      	bics	r3, r0
   11256:	433b      	orrs	r3, r7
   11258:	400e      	ands	r6, r1
   1125a:	01f6      	lsls	r6, r6, #7
   1125c:	3040      	adds	r0, #64	; 0x40
   1125e:	4383      	bics	r3, r0
   11260:	4333      	orrs	r3, r6
   11262:	3879      	subs	r0, #121	; 0x79
   11264:	4005      	ands	r5, r0
   11266:	022d      	lsls	r5, r5, #8
   11268:	4809      	ldr	r0, [pc, #36]	; (11290 <system_clock_source_xosc32k_set_config+0xb0>)
   1126a:	4003      	ands	r3, r0
   1126c:	432b      	orrs	r3, r5
   1126e:	4021      	ands	r1, r4
   11270:	0309      	lsls	r1, r1, #12
   11272:	4808      	ldr	r0, [pc, #32]	; (11294 <system_clock_source_xosc32k_set_config+0xb4>)
   11274:	4003      	ands	r3, r0
   11276:	430b      	orrs	r3, r1
   11278:	465a      	mov	r2, fp
   1127a:	8293      	strh	r3, [r2, #20]
}
   1127c:	bc3c      	pop	{r2, r3, r4, r5}
   1127e:	4690      	mov	r8, r2
   11280:	4699      	mov	r9, r3
   11282:	46a2      	mov	sl, r4
   11284:	46ab      	mov	fp, r5
   11286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11288:	40000800 	.word	0x40000800
   1128c:	20000330 	.word	0x20000330
   11290:	fffff8ff 	.word	0xfffff8ff
   11294:	ffffefff 	.word	0xffffefff

00011298 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   11298:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1129a:	7a03      	ldrb	r3, [r0, #8]
   1129c:	069b      	lsls	r3, r3, #26
   1129e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   112a0:	8942      	ldrh	r2, [r0, #10]
   112a2:	0592      	lsls	r2, r2, #22
   112a4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   112a6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   112a8:	4918      	ldr	r1, [pc, #96]	; (1130c <system_clock_source_dfll_set_config+0x74>)
   112aa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   112ac:	7983      	ldrb	r3, [r0, #6]
   112ae:	79c2      	ldrb	r2, [r0, #7]
   112b0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   112b2:	8842      	ldrh	r2, [r0, #2]
   112b4:	8884      	ldrh	r4, [r0, #4]
   112b6:	4322      	orrs	r2, r4
   112b8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   112ba:	7842      	ldrb	r2, [r0, #1]
   112bc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   112be:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   112c0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   112c2:	7803      	ldrb	r3, [r0, #0]
   112c4:	2b04      	cmp	r3, #4
   112c6:	d011      	beq.n	112ec <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   112c8:	2b20      	cmp	r3, #32
   112ca:	d10e      	bne.n	112ea <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   112cc:	7b03      	ldrb	r3, [r0, #12]
   112ce:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   112d0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   112d2:	4313      	orrs	r3, r2
   112d4:	89c2      	ldrh	r2, [r0, #14]
   112d6:	0412      	lsls	r2, r2, #16
   112d8:	490d      	ldr	r1, [pc, #52]	; (11310 <system_clock_source_dfll_set_config+0x78>)
   112da:	400a      	ands	r2, r1
   112dc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   112de:	4a0b      	ldr	r2, [pc, #44]	; (1130c <system_clock_source_dfll_set_config+0x74>)
   112e0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   112e2:	6811      	ldr	r1, [r2, #0]
   112e4:	4b0b      	ldr	r3, [pc, #44]	; (11314 <system_clock_source_dfll_set_config+0x7c>)
   112e6:	430b      	orrs	r3, r1
   112e8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   112ea:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   112ec:	7b03      	ldrb	r3, [r0, #12]
   112ee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   112f0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   112f2:	4313      	orrs	r3, r2
   112f4:	89c2      	ldrh	r2, [r0, #14]
   112f6:	0412      	lsls	r2, r2, #16
   112f8:	4905      	ldr	r1, [pc, #20]	; (11310 <system_clock_source_dfll_set_config+0x78>)
   112fa:	400a      	ands	r2, r1
   112fc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   112fe:	4a03      	ldr	r2, [pc, #12]	; (1130c <system_clock_source_dfll_set_config+0x74>)
   11300:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   11302:	6813      	ldr	r3, [r2, #0]
   11304:	2104      	movs	r1, #4
   11306:	430b      	orrs	r3, r1
   11308:	6013      	str	r3, [r2, #0]
   1130a:	e7ee      	b.n	112ea <system_clock_source_dfll_set_config+0x52>
   1130c:	20000330 	.word	0x20000330
   11310:	03ff0000 	.word	0x03ff0000
   11314:	00000424 	.word	0x00000424

00011318 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   11318:	2808      	cmp	r0, #8
   1131a:	d803      	bhi.n	11324 <system_clock_source_enable+0xc>
   1131c:	0080      	lsls	r0, r0, #2
   1131e:	4b25      	ldr	r3, [pc, #148]	; (113b4 <system_clock_source_enable+0x9c>)
   11320:	581b      	ldr	r3, [r3, r0]
   11322:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   11324:	2017      	movs	r0, #23
   11326:	e044      	b.n	113b2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   11328:	4a23      	ldr	r2, [pc, #140]	; (113b8 <system_clock_source_enable+0xa0>)
   1132a:	6a13      	ldr	r3, [r2, #32]
   1132c:	2102      	movs	r1, #2
   1132e:	430b      	orrs	r3, r1
   11330:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   11332:	2000      	movs	r0, #0
   11334:	e03d      	b.n	113b2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   11336:	4a20      	ldr	r2, [pc, #128]	; (113b8 <system_clock_source_enable+0xa0>)
   11338:	6993      	ldr	r3, [r2, #24]
   1133a:	2102      	movs	r1, #2
   1133c:	430b      	orrs	r3, r1
   1133e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   11340:	2000      	movs	r0, #0
		break;
   11342:	e036      	b.n	113b2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   11344:	4a1c      	ldr	r2, [pc, #112]	; (113b8 <system_clock_source_enable+0xa0>)
   11346:	8a13      	ldrh	r3, [r2, #16]
   11348:	2102      	movs	r1, #2
   1134a:	430b      	orrs	r3, r1
   1134c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1134e:	2000      	movs	r0, #0
		break;
   11350:	e02f      	b.n	113b2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   11352:	4a19      	ldr	r2, [pc, #100]	; (113b8 <system_clock_source_enable+0xa0>)
   11354:	8a93      	ldrh	r3, [r2, #20]
   11356:	2102      	movs	r1, #2
   11358:	430b      	orrs	r3, r1
   1135a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1135c:	2000      	movs	r0, #0
		break;
   1135e:	e028      	b.n	113b2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   11360:	4916      	ldr	r1, [pc, #88]	; (113bc <system_clock_source_enable+0xa4>)
   11362:	680b      	ldr	r3, [r1, #0]
   11364:	2202      	movs	r2, #2
   11366:	4313      	orrs	r3, r2
   11368:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1136a:	4b13      	ldr	r3, [pc, #76]	; (113b8 <system_clock_source_enable+0xa0>)
   1136c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1136e:	0019      	movs	r1, r3
   11370:	320e      	adds	r2, #14
   11372:	68cb      	ldr	r3, [r1, #12]
   11374:	421a      	tst	r2, r3
   11376:	d0fc      	beq.n	11372 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   11378:	4a10      	ldr	r2, [pc, #64]	; (113bc <system_clock_source_enable+0xa4>)
   1137a:	6891      	ldr	r1, [r2, #8]
   1137c:	4b0e      	ldr	r3, [pc, #56]	; (113b8 <system_clock_source_enable+0xa0>)
   1137e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   11380:	6852      	ldr	r2, [r2, #4]
   11382:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   11384:	2200      	movs	r2, #0
   11386:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11388:	0019      	movs	r1, r3
   1138a:	3210      	adds	r2, #16
   1138c:	68cb      	ldr	r3, [r1, #12]
   1138e:	421a      	tst	r2, r3
   11390:	d0fc      	beq.n	1138c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   11392:	4b0a      	ldr	r3, [pc, #40]	; (113bc <system_clock_source_enable+0xa4>)
   11394:	681b      	ldr	r3, [r3, #0]
   11396:	b29b      	uxth	r3, r3
   11398:	4a07      	ldr	r2, [pc, #28]	; (113b8 <system_clock_source_enable+0xa0>)
   1139a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1139c:	2000      	movs	r0, #0
   1139e:	e008      	b.n	113b2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   113a0:	4905      	ldr	r1, [pc, #20]	; (113b8 <system_clock_source_enable+0xa0>)
   113a2:	2244      	movs	r2, #68	; 0x44
   113a4:	5c8b      	ldrb	r3, [r1, r2]
   113a6:	2002      	movs	r0, #2
   113a8:	4303      	orrs	r3, r0
   113aa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   113ac:	2000      	movs	r0, #0
		break;
   113ae:	e000      	b.n	113b2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   113b0:	2000      	movs	r0, #0
}
   113b2:	4770      	bx	lr
   113b4:	000192d0 	.word	0x000192d0
   113b8:	40000800 	.word	0x40000800
   113bc:	20000330 	.word	0x20000330

000113c0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   113c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113c2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   113c4:	22c2      	movs	r2, #194	; 0xc2
   113c6:	00d2      	lsls	r2, r2, #3
   113c8:	4b47      	ldr	r3, [pc, #284]	; (114e8 <system_clock_init+0x128>)
   113ca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   113cc:	4a47      	ldr	r2, [pc, #284]	; (114ec <system_clock_init+0x12c>)
   113ce:	6853      	ldr	r3, [r2, #4]
   113d0:	211e      	movs	r1, #30
   113d2:	438b      	bics	r3, r1
   113d4:	391a      	subs	r1, #26
   113d6:	430b      	orrs	r3, r1
   113d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   113da:	2202      	movs	r2, #2
   113dc:	ab01      	add	r3, sp, #4
   113de:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   113e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   113e2:	4d43      	ldr	r5, [pc, #268]	; (114f0 <system_clock_init+0x130>)
   113e4:	b2e0      	uxtb	r0, r4
   113e6:	a901      	add	r1, sp, #4
   113e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   113ea:	3401      	adds	r4, #1
   113ec:	2c25      	cmp	r4, #37	; 0x25
   113ee:	d1f9      	bne.n	113e4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   113f0:	a80a      	add	r0, sp, #40	; 0x28
   113f2:	2300      	movs	r3, #0
   113f4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   113f6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   113f8:	2280      	movs	r2, #128	; 0x80
   113fa:	0212      	lsls	r2, r2, #8
   113fc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   113fe:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   11400:	2201      	movs	r2, #1
   11402:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   11404:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   11406:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   11408:	3202      	adds	r2, #2
   1140a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   1140c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1140e:	4b39      	ldr	r3, [pc, #228]	; (114f4 <system_clock_init+0x134>)
   11410:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   11412:	2005      	movs	r0, #5
   11414:	4b38      	ldr	r3, [pc, #224]	; (114f8 <system_clock_init+0x138>)
   11416:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   11418:	4933      	ldr	r1, [pc, #204]	; (114e8 <system_clock_init+0x128>)
   1141a:	2202      	movs	r2, #2
   1141c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   1141e:	421a      	tst	r2, r3
   11420:	d0fc      	beq.n	1141c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   11422:	4a31      	ldr	r2, [pc, #196]	; (114e8 <system_clock_init+0x128>)
   11424:	8a93      	ldrh	r3, [r2, #20]
   11426:	2180      	movs	r1, #128	; 0x80
   11428:	430b      	orrs	r3, r1
   1142a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   1142c:	ab05      	add	r3, sp, #20
   1142e:	2100      	movs	r1, #0
   11430:	2200      	movs	r2, #0
   11432:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   11434:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   11436:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   11438:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1143a:	313f      	adds	r1, #63	; 0x3f
   1143c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1143e:	393b      	subs	r1, #59	; 0x3b
   11440:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   11442:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   11444:	4b2d      	ldr	r3, [pc, #180]	; (114fc <system_clock_init+0x13c>)
   11446:	681b      	ldr	r3, [r3, #0]
   11448:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   1144a:	2b3f      	cmp	r3, #63	; 0x3f
   1144c:	d04a      	beq.n	114e4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   1144e:	a805      	add	r0, sp, #20
   11450:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   11452:	4b2b      	ldr	r3, [pc, #172]	; (11500 <system_clock_init+0x140>)
   11454:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   11456:	2307      	movs	r3, #7
   11458:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   1145a:	3338      	adds	r3, #56	; 0x38
   1145c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1145e:	4b29      	ldr	r3, [pc, #164]	; (11504 <system_clock_init+0x144>)
   11460:	4798      	blx	r3
	config->run_in_standby  = false;
   11462:	a804      	add	r0, sp, #16
   11464:	2500      	movs	r5, #0
   11466:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   11468:	2601      	movs	r6, #1
   1146a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1146c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1146e:	4b26      	ldr	r3, [pc, #152]	; (11508 <system_clock_init+0x148>)
   11470:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   11472:	2006      	movs	r0, #6
   11474:	4f20      	ldr	r7, [pc, #128]	; (114f8 <system_clock_init+0x138>)
   11476:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11478:	4b24      	ldr	r3, [pc, #144]	; (1150c <system_clock_init+0x14c>)
   1147a:	4798      	blx	r3
	config->division_factor    = 1;
   1147c:	ac01      	add	r4, sp, #4
   1147e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   11480:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   11482:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   11484:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   11486:	2305      	movs	r3, #5
   11488:	7023      	strb	r3, [r4, #0]
   1148a:	0021      	movs	r1, r4
   1148c:	2001      	movs	r0, #1
   1148e:	4b20      	ldr	r3, [pc, #128]	; (11510 <system_clock_init+0x150>)
   11490:	4798      	blx	r3
   11492:	2001      	movs	r0, #1
   11494:	4b1f      	ldr	r3, [pc, #124]	; (11514 <system_clock_init+0x154>)
   11496:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   11498:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1149a:	0021      	movs	r1, r4
   1149c:	2000      	movs	r0, #0
   1149e:	4b14      	ldr	r3, [pc, #80]	; (114f0 <system_clock_init+0x130>)
   114a0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   114a2:	2000      	movs	r0, #0
   114a4:	4b1c      	ldr	r3, [pc, #112]	; (11518 <system_clock_init+0x158>)
   114a6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   114a8:	2007      	movs	r0, #7
   114aa:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   114ac:	490e      	ldr	r1, [pc, #56]	; (114e8 <system_clock_init+0x128>)
   114ae:	22d0      	movs	r2, #208	; 0xd0
   114b0:	68cb      	ldr	r3, [r1, #12]
   114b2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   114b4:	2bd0      	cmp	r3, #208	; 0xd0
   114b6:	d1fb      	bne.n	114b0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   114b8:	4a18      	ldr	r2, [pc, #96]	; (1151c <system_clock_init+0x15c>)
   114ba:	2300      	movs	r3, #0
   114bc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   114be:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   114c0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   114c2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   114c4:	a901      	add	r1, sp, #4
   114c6:	2201      	movs	r2, #1
   114c8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   114ca:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   114cc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   114ce:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   114d0:	3307      	adds	r3, #7
   114d2:	700b      	strb	r3, [r1, #0]
   114d4:	2000      	movs	r0, #0
   114d6:	4b0e      	ldr	r3, [pc, #56]	; (11510 <system_clock_init+0x150>)
   114d8:	4798      	blx	r3
   114da:	2000      	movs	r0, #0
   114dc:	4b0d      	ldr	r3, [pc, #52]	; (11514 <system_clock_init+0x154>)
   114de:	4798      	blx	r3
#endif
}
   114e0:	b00f      	add	sp, #60	; 0x3c
   114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   114e4:	3b20      	subs	r3, #32
   114e6:	e7b2      	b.n	1144e <system_clock_init+0x8e>
   114e8:	40000800 	.word	0x40000800
   114ec:	41004000 	.word	0x41004000
   114f0:	00011759 	.word	0x00011759
   114f4:	000111e1 	.word	0x000111e1
   114f8:	00011319 	.word	0x00011319
   114fc:	00806024 	.word	0x00806024
   11500:	000005b9 	.word	0x000005b9
   11504:	00011299 	.word	0x00011299
   11508:	000111a5 	.word	0x000111a5
   1150c:	00011521 	.word	0x00011521
   11510:	00011545 	.word	0x00011545
   11514:	000115fd 	.word	0x000115fd
   11518:	000116cd 	.word	0x000116cd
   1151c:	40000400 	.word	0x40000400

00011520 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   11520:	4a06      	ldr	r2, [pc, #24]	; (1153c <system_gclk_init+0x1c>)
   11522:	6993      	ldr	r3, [r2, #24]
   11524:	2108      	movs	r1, #8
   11526:	430b      	orrs	r3, r1
   11528:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1152a:	2201      	movs	r2, #1
   1152c:	4b04      	ldr	r3, [pc, #16]	; (11540 <system_gclk_init+0x20>)
   1152e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   11530:	0019      	movs	r1, r3
   11532:	780b      	ldrb	r3, [r1, #0]
   11534:	4213      	tst	r3, r2
   11536:	d1fc      	bne.n	11532 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   11538:	4770      	bx	lr
   1153a:	46c0      	nop			; (mov r8, r8)
   1153c:	40000400 	.word	0x40000400
   11540:	40000c00 	.word	0x40000c00

00011544 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   11544:	b570      	push	{r4, r5, r6, lr}
   11546:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   11548:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1154a:	780d      	ldrb	r5, [r1, #0]
   1154c:	022d      	lsls	r5, r5, #8
   1154e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   11550:	784b      	ldrb	r3, [r1, #1]
   11552:	2b00      	cmp	r3, #0
   11554:	d002      	beq.n	1155c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   11556:	2380      	movs	r3, #128	; 0x80
   11558:	02db      	lsls	r3, r3, #11
   1155a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1155c:	7a4b      	ldrb	r3, [r1, #9]
   1155e:	2b00      	cmp	r3, #0
   11560:	d002      	beq.n	11568 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   11562:	2380      	movs	r3, #128	; 0x80
   11564:	031b      	lsls	r3, r3, #12
   11566:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   11568:	6848      	ldr	r0, [r1, #4]
   1156a:	2801      	cmp	r0, #1
   1156c:	d910      	bls.n	11590 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1156e:	1e43      	subs	r3, r0, #1
   11570:	4218      	tst	r0, r3
   11572:	d134      	bne.n	115de <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   11574:	2802      	cmp	r0, #2
   11576:	d930      	bls.n	115da <system_gclk_gen_set_config+0x96>
   11578:	2302      	movs	r3, #2
   1157a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1157c:	3201      	adds	r2, #1
						mask <<= 1) {
   1157e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   11580:	4298      	cmp	r0, r3
   11582:	d8fb      	bhi.n	1157c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   11584:	0212      	lsls	r2, r2, #8
   11586:	4332      	orrs	r2, r6
   11588:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1158a:	2380      	movs	r3, #128	; 0x80
   1158c:	035b      	lsls	r3, r3, #13
   1158e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11590:	7a0b      	ldrb	r3, [r1, #8]
   11592:	2b00      	cmp	r3, #0
   11594:	d002      	beq.n	1159c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   11596:	2380      	movs	r3, #128	; 0x80
   11598:	039b      	lsls	r3, r3, #14
   1159a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1159c:	4a13      	ldr	r2, [pc, #76]	; (115ec <system_gclk_gen_set_config+0xa8>)
   1159e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   115a0:	b25b      	sxtb	r3, r3
   115a2:	2b00      	cmp	r3, #0
   115a4:	dbfb      	blt.n	1159e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   115a6:	4b12      	ldr	r3, [pc, #72]	; (115f0 <system_gclk_gen_set_config+0xac>)
   115a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   115aa:	4b12      	ldr	r3, [pc, #72]	; (115f4 <system_gclk_gen_set_config+0xb0>)
   115ac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   115ae:	4a0f      	ldr	r2, [pc, #60]	; (115ec <system_gclk_gen_set_config+0xa8>)
   115b0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   115b2:	b25b      	sxtb	r3, r3
   115b4:	2b00      	cmp	r3, #0
   115b6:	dbfb      	blt.n	115b0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   115b8:	4b0c      	ldr	r3, [pc, #48]	; (115ec <system_gclk_gen_set_config+0xa8>)
   115ba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   115bc:	001a      	movs	r2, r3
   115be:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   115c0:	b25b      	sxtb	r3, r3
   115c2:	2b00      	cmp	r3, #0
   115c4:	dbfb      	blt.n	115be <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   115c6:	4a09      	ldr	r2, [pc, #36]	; (115ec <system_gclk_gen_set_config+0xa8>)
   115c8:	6853      	ldr	r3, [r2, #4]
   115ca:	2180      	movs	r1, #128	; 0x80
   115cc:	0249      	lsls	r1, r1, #9
   115ce:	400b      	ands	r3, r1
   115d0:	431d      	orrs	r5, r3
   115d2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   115d4:	4b08      	ldr	r3, [pc, #32]	; (115f8 <system_gclk_gen_set_config+0xb4>)
   115d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   115d8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   115da:	2200      	movs	r2, #0
   115dc:	e7d2      	b.n	11584 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   115de:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   115e0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   115e2:	2380      	movs	r3, #128	; 0x80
   115e4:	029b      	lsls	r3, r3, #10
   115e6:	431d      	orrs	r5, r3
   115e8:	e7d2      	b.n	11590 <system_gclk_gen_set_config+0x4c>
   115ea:	46c0      	nop			; (mov r8, r8)
   115ec:	40000c00 	.word	0x40000c00
   115f0:	0000fa8d 	.word	0x0000fa8d
   115f4:	40000c08 	.word	0x40000c08
   115f8:	0000facd 	.word	0x0000facd

000115fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   115fc:	b510      	push	{r4, lr}
   115fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11600:	4a0b      	ldr	r2, [pc, #44]	; (11630 <system_gclk_gen_enable+0x34>)
   11602:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11604:	b25b      	sxtb	r3, r3
   11606:	2b00      	cmp	r3, #0
   11608:	dbfb      	blt.n	11602 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1160a:	4b0a      	ldr	r3, [pc, #40]	; (11634 <system_gclk_gen_enable+0x38>)
   1160c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1160e:	4b0a      	ldr	r3, [pc, #40]	; (11638 <system_gclk_gen_enable+0x3c>)
   11610:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11612:	4a07      	ldr	r2, [pc, #28]	; (11630 <system_gclk_gen_enable+0x34>)
   11614:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11616:	b25b      	sxtb	r3, r3
   11618:	2b00      	cmp	r3, #0
   1161a:	dbfb      	blt.n	11614 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1161c:	4a04      	ldr	r2, [pc, #16]	; (11630 <system_gclk_gen_enable+0x34>)
   1161e:	6851      	ldr	r1, [r2, #4]
   11620:	2380      	movs	r3, #128	; 0x80
   11622:	025b      	lsls	r3, r3, #9
   11624:	430b      	orrs	r3, r1
   11626:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   11628:	4b04      	ldr	r3, [pc, #16]	; (1163c <system_gclk_gen_enable+0x40>)
   1162a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1162c:	bd10      	pop	{r4, pc}
   1162e:	46c0      	nop			; (mov r8, r8)
   11630:	40000c00 	.word	0x40000c00
   11634:	0000fa8d 	.word	0x0000fa8d
   11638:	40000c04 	.word	0x40000c04
   1163c:	0000facd 	.word	0x0000facd

00011640 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   11640:	b570      	push	{r4, r5, r6, lr}
   11642:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11644:	4a1a      	ldr	r2, [pc, #104]	; (116b0 <system_gclk_gen_get_hz+0x70>)
   11646:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11648:	b25b      	sxtb	r3, r3
   1164a:	2b00      	cmp	r3, #0
   1164c:	dbfb      	blt.n	11646 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1164e:	4b19      	ldr	r3, [pc, #100]	; (116b4 <system_gclk_gen_get_hz+0x74>)
   11650:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11652:	4b19      	ldr	r3, [pc, #100]	; (116b8 <system_gclk_gen_get_hz+0x78>)
   11654:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11656:	4a16      	ldr	r2, [pc, #88]	; (116b0 <system_gclk_gen_get_hz+0x70>)
   11658:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1165a:	b25b      	sxtb	r3, r3
   1165c:	2b00      	cmp	r3, #0
   1165e:	dbfb      	blt.n	11658 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   11660:	4e13      	ldr	r6, [pc, #76]	; (116b0 <system_gclk_gen_get_hz+0x70>)
   11662:	6870      	ldr	r0, [r6, #4]
   11664:	04c0      	lsls	r0, r0, #19
   11666:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   11668:	4b14      	ldr	r3, [pc, #80]	; (116bc <system_gclk_gen_get_hz+0x7c>)
   1166a:	4798      	blx	r3
   1166c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1166e:	4b12      	ldr	r3, [pc, #72]	; (116b8 <system_gclk_gen_get_hz+0x78>)
   11670:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   11672:	6876      	ldr	r6, [r6, #4]
   11674:	02f6      	lsls	r6, r6, #11
   11676:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11678:	4b11      	ldr	r3, [pc, #68]	; (116c0 <system_gclk_gen_get_hz+0x80>)
   1167a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1167c:	4a0c      	ldr	r2, [pc, #48]	; (116b0 <system_gclk_gen_get_hz+0x70>)
   1167e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11680:	b25b      	sxtb	r3, r3
   11682:	2b00      	cmp	r3, #0
   11684:	dbfb      	blt.n	1167e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   11686:	4b0a      	ldr	r3, [pc, #40]	; (116b0 <system_gclk_gen_get_hz+0x70>)
   11688:	689c      	ldr	r4, [r3, #8]
   1168a:	0224      	lsls	r4, r4, #8
   1168c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1168e:	4b0d      	ldr	r3, [pc, #52]	; (116c4 <system_gclk_gen_get_hz+0x84>)
   11690:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   11692:	2e00      	cmp	r6, #0
   11694:	d107      	bne.n	116a6 <system_gclk_gen_get_hz+0x66>
   11696:	2c01      	cmp	r4, #1
   11698:	d907      	bls.n	116aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1169a:	0021      	movs	r1, r4
   1169c:	0028      	movs	r0, r5
   1169e:	4b0a      	ldr	r3, [pc, #40]	; (116c8 <system_gclk_gen_get_hz+0x88>)
   116a0:	4798      	blx	r3
   116a2:	0005      	movs	r5, r0
   116a4:	e001      	b.n	116aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   116a6:	3401      	adds	r4, #1
   116a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   116aa:	0028      	movs	r0, r5
   116ac:	bd70      	pop	{r4, r5, r6, pc}
   116ae:	46c0      	nop			; (mov r8, r8)
   116b0:	40000c00 	.word	0x40000c00
   116b4:	0000fa8d 	.word	0x0000fa8d
   116b8:	40000c04 	.word	0x40000c04
   116bc:	00011111 	.word	0x00011111
   116c0:	40000c08 	.word	0x40000c08
   116c4:	0000facd 	.word	0x0000facd
   116c8:	00016699 	.word	0x00016699

000116cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   116cc:	b510      	push	{r4, lr}
   116ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   116d0:	4b06      	ldr	r3, [pc, #24]	; (116ec <system_gclk_chan_enable+0x20>)
   116d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   116d4:	4b06      	ldr	r3, [pc, #24]	; (116f0 <system_gclk_chan_enable+0x24>)
   116d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   116d8:	4a06      	ldr	r2, [pc, #24]	; (116f4 <system_gclk_chan_enable+0x28>)
   116da:	8853      	ldrh	r3, [r2, #2]
   116dc:	2180      	movs	r1, #128	; 0x80
   116de:	01c9      	lsls	r1, r1, #7
   116e0:	430b      	orrs	r3, r1
   116e2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   116e4:	4b04      	ldr	r3, [pc, #16]	; (116f8 <system_gclk_chan_enable+0x2c>)
   116e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   116e8:	bd10      	pop	{r4, pc}
   116ea:	46c0      	nop			; (mov r8, r8)
   116ec:	0000fa8d 	.word	0x0000fa8d
   116f0:	40000c02 	.word	0x40000c02
   116f4:	40000c00 	.word	0x40000c00
   116f8:	0000facd 	.word	0x0000facd

000116fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   116fc:	b510      	push	{r4, lr}
   116fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11700:	4b0f      	ldr	r3, [pc, #60]	; (11740 <system_gclk_chan_disable+0x44>)
   11702:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11704:	4b0f      	ldr	r3, [pc, #60]	; (11744 <system_gclk_chan_disable+0x48>)
   11706:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   11708:	4a0f      	ldr	r2, [pc, #60]	; (11748 <system_gclk_chan_disable+0x4c>)
   1170a:	8853      	ldrh	r3, [r2, #2]
   1170c:	051b      	lsls	r3, r3, #20
   1170e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   11710:	8853      	ldrh	r3, [r2, #2]
   11712:	490e      	ldr	r1, [pc, #56]	; (1174c <system_gclk_chan_disable+0x50>)
   11714:	400b      	ands	r3, r1
   11716:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   11718:	8853      	ldrh	r3, [r2, #2]
   1171a:	490d      	ldr	r1, [pc, #52]	; (11750 <system_gclk_chan_disable+0x54>)
   1171c:	400b      	ands	r3, r1
   1171e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   11720:	0011      	movs	r1, r2
   11722:	2280      	movs	r2, #128	; 0x80
   11724:	01d2      	lsls	r2, r2, #7
   11726:	884b      	ldrh	r3, [r1, #2]
   11728:	4213      	tst	r3, r2
   1172a:	d1fc      	bne.n	11726 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1172c:	4906      	ldr	r1, [pc, #24]	; (11748 <system_gclk_chan_disable+0x4c>)
   1172e:	884a      	ldrh	r2, [r1, #2]
   11730:	0203      	lsls	r3, r0, #8
   11732:	4806      	ldr	r0, [pc, #24]	; (1174c <system_gclk_chan_disable+0x50>)
   11734:	4002      	ands	r2, r0
   11736:	4313      	orrs	r3, r2
   11738:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1173a:	4b06      	ldr	r3, [pc, #24]	; (11754 <system_gclk_chan_disable+0x58>)
   1173c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1173e:	bd10      	pop	{r4, pc}
   11740:	0000fa8d 	.word	0x0000fa8d
   11744:	40000c02 	.word	0x40000c02
   11748:	40000c00 	.word	0x40000c00
   1174c:	fffff0ff 	.word	0xfffff0ff
   11750:	ffffbfff 	.word	0xffffbfff
   11754:	0000facd 	.word	0x0000facd

00011758 <system_gclk_chan_set_config>:
{
   11758:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1175a:	780c      	ldrb	r4, [r1, #0]
   1175c:	0224      	lsls	r4, r4, #8
   1175e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   11760:	4b02      	ldr	r3, [pc, #8]	; (1176c <system_gclk_chan_set_config+0x14>)
   11762:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   11764:	b2a4      	uxth	r4, r4
   11766:	4b02      	ldr	r3, [pc, #8]	; (11770 <system_gclk_chan_set_config+0x18>)
   11768:	805c      	strh	r4, [r3, #2]
}
   1176a:	bd10      	pop	{r4, pc}
   1176c:	000116fd 	.word	0x000116fd
   11770:	40000c00 	.word	0x40000c00

00011774 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   11774:	b510      	push	{r4, lr}
   11776:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11778:	4b06      	ldr	r3, [pc, #24]	; (11794 <system_gclk_chan_get_hz+0x20>)
   1177a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <system_gclk_chan_get_hz+0x24>)
   1177e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   11780:	4b06      	ldr	r3, [pc, #24]	; (1179c <system_gclk_chan_get_hz+0x28>)
   11782:	885c      	ldrh	r4, [r3, #2]
   11784:	0524      	lsls	r4, r4, #20
   11786:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   11788:	4b05      	ldr	r3, [pc, #20]	; (117a0 <system_gclk_chan_get_hz+0x2c>)
   1178a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1178c:	0020      	movs	r0, r4
   1178e:	4b05      	ldr	r3, [pc, #20]	; (117a4 <system_gclk_chan_get_hz+0x30>)
   11790:	4798      	blx	r3
}
   11792:	bd10      	pop	{r4, pc}
   11794:	0000fa8d 	.word	0x0000fa8d
   11798:	40000c02 	.word	0x40000c02
   1179c:	40000c00 	.word	0x40000c00
   117a0:	0000facd 	.word	0x0000facd
   117a4:	00011641 	.word	0x00011641

000117a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   117a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   117aa:	78d3      	ldrb	r3, [r2, #3]
   117ac:	2b00      	cmp	r3, #0
   117ae:	d135      	bne.n	1181c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   117b0:	7813      	ldrb	r3, [r2, #0]
   117b2:	2b80      	cmp	r3, #128	; 0x80
   117b4:	d029      	beq.n	1180a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   117b6:	061b      	lsls	r3, r3, #24
   117b8:	2480      	movs	r4, #128	; 0x80
   117ba:	0264      	lsls	r4, r4, #9
   117bc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   117be:	7854      	ldrb	r4, [r2, #1]
   117c0:	2502      	movs	r5, #2
   117c2:	43ac      	bics	r4, r5
   117c4:	d106      	bne.n	117d4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   117c6:	7894      	ldrb	r4, [r2, #2]
   117c8:	2c00      	cmp	r4, #0
   117ca:	d120      	bne.n	1180e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   117cc:	2480      	movs	r4, #128	; 0x80
   117ce:	02a4      	lsls	r4, r4, #10
   117d0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   117d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   117d4:	7854      	ldrb	r4, [r2, #1]
   117d6:	3c01      	subs	r4, #1
   117d8:	2c01      	cmp	r4, #1
   117da:	d91c      	bls.n	11816 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   117dc:	040d      	lsls	r5, r1, #16
   117de:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   117e0:	24a0      	movs	r4, #160	; 0xa0
   117e2:	05e4      	lsls	r4, r4, #23
   117e4:	432c      	orrs	r4, r5
   117e6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   117e8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   117ea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   117ec:	24d0      	movs	r4, #208	; 0xd0
   117ee:	0624      	lsls	r4, r4, #24
   117f0:	432c      	orrs	r4, r5
   117f2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   117f4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   117f6:	78d4      	ldrb	r4, [r2, #3]
   117f8:	2c00      	cmp	r4, #0
   117fa:	d122      	bne.n	11842 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   117fc:	035b      	lsls	r3, r3, #13
   117fe:	d51c      	bpl.n	1183a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   11800:	7893      	ldrb	r3, [r2, #2]
   11802:	2b01      	cmp	r3, #1
   11804:	d01e      	beq.n	11844 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   11806:	6141      	str	r1, [r0, #20]
   11808:	e017      	b.n	1183a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1180a:	2300      	movs	r3, #0
   1180c:	e7d7      	b.n	117be <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1180e:	24c0      	movs	r4, #192	; 0xc0
   11810:	02e4      	lsls	r4, r4, #11
   11812:	4323      	orrs	r3, r4
   11814:	e7dd      	b.n	117d2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   11816:	4c0d      	ldr	r4, [pc, #52]	; (1184c <_system_pinmux_config+0xa4>)
   11818:	4023      	ands	r3, r4
   1181a:	e7df      	b.n	117dc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1181c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1181e:	040c      	lsls	r4, r1, #16
   11820:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   11822:	23a0      	movs	r3, #160	; 0xa0
   11824:	05db      	lsls	r3, r3, #23
   11826:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11828:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1182a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1182c:	23d0      	movs	r3, #208	; 0xd0
   1182e:	061b      	lsls	r3, r3, #24
   11830:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11832:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   11834:	78d3      	ldrb	r3, [r2, #3]
   11836:	2b00      	cmp	r3, #0
   11838:	d103      	bne.n	11842 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1183a:	7853      	ldrb	r3, [r2, #1]
   1183c:	3b01      	subs	r3, #1
   1183e:	2b01      	cmp	r3, #1
   11840:	d902      	bls.n	11848 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   11842:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   11844:	6181      	str	r1, [r0, #24]
   11846:	e7f8      	b.n	1183a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   11848:	6081      	str	r1, [r0, #8]
}
   1184a:	e7fa      	b.n	11842 <_system_pinmux_config+0x9a>
   1184c:	fffbffff 	.word	0xfffbffff

00011850 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   11850:	b510      	push	{r4, lr}
   11852:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   11854:	09c1      	lsrs	r1, r0, #7
		return NULL;
   11856:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   11858:	2900      	cmp	r1, #0
   1185a:	d104      	bne.n	11866 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1185c:	0943      	lsrs	r3, r0, #5
   1185e:	01db      	lsls	r3, r3, #7
   11860:	4905      	ldr	r1, [pc, #20]	; (11878 <system_pinmux_pin_set_config+0x28>)
   11862:	468c      	mov	ip, r1
   11864:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   11866:	241f      	movs	r4, #31
   11868:	4020      	ands	r0, r4
   1186a:	2101      	movs	r1, #1
   1186c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1186e:	0018      	movs	r0, r3
   11870:	4b02      	ldr	r3, [pc, #8]	; (1187c <system_pinmux_pin_set_config+0x2c>)
   11872:	4798      	blx	r3
}
   11874:	bd10      	pop	{r4, pc}
   11876:	46c0      	nop			; (mov r8, r8)
   11878:	41004400 	.word	0x41004400
   1187c:	000117a9 	.word	0x000117a9

00011880 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   11880:	4770      	bx	lr
	...

00011884 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11884:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11886:	4b05      	ldr	r3, [pc, #20]	; (1189c <system_init+0x18>)
   11888:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1188a:	4b05      	ldr	r3, [pc, #20]	; (118a0 <system_init+0x1c>)
   1188c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1188e:	4b05      	ldr	r3, [pc, #20]	; (118a4 <system_init+0x20>)
   11890:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11892:	4b05      	ldr	r3, [pc, #20]	; (118a8 <system_init+0x24>)
   11894:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11896:	4b05      	ldr	r3, [pc, #20]	; (118ac <system_init+0x28>)
   11898:	4798      	blx	r3
}
   1189a:	bd10      	pop	{r4, pc}
   1189c:	000113c1 	.word	0x000113c1
   118a0:	0000fafd 	.word	0x0000fafd
   118a4:	00011881 	.word	0x00011881
   118a8:	0000fc0d 	.word	0x0000fc0d
   118ac:	00011881 	.word	0x00011881

000118b0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   118b0:	4b09      	ldr	r3, [pc, #36]	; (118d8 <_tcc_get_inst_index+0x28>)
   118b2:	4298      	cmp	r0, r3
   118b4:	d00c      	beq.n	118d0 <_tcc_get_inst_index+0x20>
   118b6:	4b09      	ldr	r3, [pc, #36]	; (118dc <_tcc_get_inst_index+0x2c>)
   118b8:	4298      	cmp	r0, r3
   118ba:	d007      	beq.n	118cc <_tcc_get_inst_index+0x1c>
   118bc:	4a08      	ldr	r2, [pc, #32]	; (118e0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   118be:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   118c0:	4290      	cmp	r0, r2
   118c2:	d001      	beq.n	118c8 <_tcc_get_inst_index+0x18>
}
   118c4:	0018      	movs	r0, r3
   118c6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   118c8:	3302      	adds	r3, #2
   118ca:	e002      	b.n	118d2 <_tcc_get_inst_index+0x22>
   118cc:	2301      	movs	r3, #1
   118ce:	e000      	b.n	118d2 <_tcc_get_inst_index+0x22>
   118d0:	2300      	movs	r3, #0
			return i;
   118d2:	b2db      	uxtb	r3, r3
   118d4:	e7f6      	b.n	118c4 <_tcc_get_inst_index+0x14>
   118d6:	46c0      	nop			; (mov r8, r8)
   118d8:	42002000 	.word	0x42002000
   118dc:	42002400 	.word	0x42002400
   118e0:	42002800 	.word	0x42002800

000118e4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   118e4:	b510      	push	{r4, lr}
   118e6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   118e8:	0008      	movs	r0, r1
   118ea:	4b4f      	ldr	r3, [pc, #316]	; (11a28 <tcc_get_config_defaults+0x144>)
   118ec:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   118ee:	2300      	movs	r3, #0
   118f0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   118f2:	0080      	lsls	r0, r0, #2
   118f4:	4a4d      	ldr	r2, [pc, #308]	; (11a2c <tcc_get_config_defaults+0x148>)
   118f6:	5882      	ldr	r2, [r0, r2]
   118f8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   118fa:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   118fc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   118fe:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   11900:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   11902:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11904:	61e3      	str	r3, [r4, #28]
   11906:	6223      	str	r3, [r4, #32]
   11908:	6263      	str	r3, [r4, #36]	; 0x24
   1190a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1190c:	7523      	strb	r3, [r4, #20]
   1190e:	7563      	strb	r3, [r4, #21]
   11910:	75a3      	strb	r3, [r4, #22]
   11912:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   11914:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   11916:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   11918:	7423      	strb	r3, [r4, #16]
   1191a:	7463      	strb	r3, [r4, #17]
   1191c:	74a3      	strb	r3, [r4, #18]
   1191e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   11920:	222c      	movs	r2, #44	; 0x2c
   11922:	54a3      	strb	r3, [r4, r2]
   11924:	3201      	adds	r2, #1
   11926:	54a3      	strb	r3, [r4, r2]
   11928:	3201      	adds	r2, #1
   1192a:	54a3      	strb	r3, [r4, r2]
   1192c:	3201      	adds	r2, #1
   1192e:	54a3      	strb	r3, [r4, r2]
   11930:	3201      	adds	r2, #1
   11932:	54a3      	strb	r3, [r4, r2]
   11934:	3201      	adds	r2, #1
   11936:	54a3      	strb	r3, [r4, r2]
   11938:	3201      	adds	r2, #1
   1193a:	54a3      	strb	r3, [r4, r2]
   1193c:	3201      	adds	r2, #1
   1193e:	54a3      	strb	r3, [r4, r2]
   11940:	3201      	adds	r2, #1
   11942:	54a3      	strb	r3, [r4, r2]
   11944:	3201      	adds	r2, #1
   11946:	54a3      	strb	r3, [r4, r2]
   11948:	3201      	adds	r2, #1
   1194a:	54a3      	strb	r3, [r4, r2]
   1194c:	3201      	adds	r2, #1
   1194e:	54a3      	strb	r3, [r4, r2]
   11950:	3201      	adds	r2, #1
   11952:	54a3      	strb	r3, [r4, r2]
   11954:	3201      	adds	r2, #1
   11956:	54a3      	strb	r3, [r4, r2]
   11958:	3201      	adds	r2, #1
   1195a:	54a3      	strb	r3, [r4, r2]
   1195c:	3201      	adds	r2, #1
   1195e:	54a3      	strb	r3, [r4, r2]
   11960:	3201      	adds	r2, #1
   11962:	54a3      	strb	r3, [r4, r2]
   11964:	3201      	adds	r2, #1
   11966:	54a3      	strb	r3, [r4, r2]
   11968:	3201      	adds	r2, #1
   1196a:	54a3      	strb	r3, [r4, r2]
   1196c:	3201      	adds	r2, #1
   1196e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   11970:	3201      	adds	r2, #1
   11972:	54a3      	strb	r3, [r4, r2]
   11974:	3201      	adds	r2, #1
   11976:	54a3      	strb	r3, [r4, r2]
   11978:	3201      	adds	r2, #1
   1197a:	54a3      	strb	r3, [r4, r2]
   1197c:	3201      	adds	r2, #1
   1197e:	54a3      	strb	r3, [r4, r2]
   11980:	3201      	adds	r2, #1
   11982:	54a3      	strb	r3, [r4, r2]
   11984:	3201      	adds	r2, #1
   11986:	54a3      	strb	r3, [r4, r2]
   11988:	3201      	adds	r2, #1
   1198a:	54a3      	strb	r3, [r4, r2]
   1198c:	3201      	adds	r2, #1
   1198e:	54a3      	strb	r3, [r4, r2]
   11990:	3201      	adds	r2, #1
   11992:	54a3      	strb	r3, [r4, r2]
   11994:	3201      	adds	r2, #1
   11996:	54a3      	strb	r3, [r4, r2]
   11998:	3201      	adds	r2, #1
   1199a:	54a3      	strb	r3, [r4, r2]
   1199c:	3201      	adds	r2, #1
   1199e:	54a3      	strb	r3, [r4, r2]
   119a0:	3201      	adds	r2, #1
   119a2:	54a3      	strb	r3, [r4, r2]
   119a4:	3201      	adds	r2, #1
   119a6:	54a3      	strb	r3, [r4, r2]
   119a8:	3201      	adds	r2, #1
   119aa:	54a3      	strb	r3, [r4, r2]
   119ac:	3201      	adds	r2, #1
   119ae:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   119b0:	3201      	adds	r2, #1
   119b2:	54a3      	strb	r3, [r4, r2]
   119b4:	3201      	adds	r2, #1
   119b6:	54a3      	strb	r3, [r4, r2]
   119b8:	3201      	adds	r2, #1
   119ba:	54a3      	strb	r3, [r4, r2]
   119bc:	3201      	adds	r2, #1
   119be:	54a3      	strb	r3, [r4, r2]
   119c0:	3201      	adds	r2, #1
   119c2:	54a3      	strb	r3, [r4, r2]
   119c4:	3201      	adds	r2, #1
   119c6:	54a3      	strb	r3, [r4, r2]
   119c8:	3201      	adds	r2, #1
   119ca:	54a3      	strb	r3, [r4, r2]
   119cc:	3201      	adds	r2, #1
   119ce:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   119d0:	3241      	adds	r2, #65	; 0x41
   119d2:	54a3      	strb	r3, [r4, r2]
   119d4:	65a3      	str	r3, [r4, #88]	; 0x58
   119d6:	67a3      	str	r3, [r4, #120]	; 0x78
   119d8:	3201      	adds	r2, #1
   119da:	54a3      	strb	r3, [r4, r2]
   119dc:	65e3      	str	r3, [r4, #92]	; 0x5c
   119de:	67e3      	str	r3, [r4, #124]	; 0x7c
   119e0:	3201      	adds	r2, #1
   119e2:	54a3      	strb	r3, [r4, r2]
   119e4:	6623      	str	r3, [r4, #96]	; 0x60
   119e6:	3a1a      	subs	r2, #26
   119e8:	50a3      	str	r3, [r4, r2]
   119ea:	321b      	adds	r2, #27
   119ec:	54a3      	strb	r3, [r4, r2]
   119ee:	6663      	str	r3, [r4, #100]	; 0x64
   119f0:	3a17      	subs	r2, #23
   119f2:	50a3      	str	r3, [r4, r2]
   119f4:	3218      	adds	r2, #24
   119f6:	54a3      	strb	r3, [r4, r2]
   119f8:	66a3      	str	r3, [r4, #104]	; 0x68
   119fa:	3a14      	subs	r2, #20
   119fc:	50a3      	str	r3, [r4, r2]
   119fe:	3215      	adds	r2, #21
   11a00:	54a3      	strb	r3, [r4, r2]
   11a02:	66e3      	str	r3, [r4, #108]	; 0x6c
   11a04:	3a11      	subs	r2, #17
   11a06:	50a3      	str	r3, [r4, r2]
   11a08:	3212      	adds	r2, #18
   11a0a:	54a3      	strb	r3, [r4, r2]
   11a0c:	6723      	str	r3, [r4, #112]	; 0x70
   11a0e:	3a0e      	subs	r2, #14
   11a10:	50a3      	str	r3, [r4, r2]
   11a12:	320f      	adds	r2, #15
   11a14:	54a3      	strb	r3, [r4, r2]
   11a16:	6763      	str	r3, [r4, #116]	; 0x74
   11a18:	3a0b      	subs	r2, #11
   11a1a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   11a1c:	2101      	movs	r1, #1
   11a1e:	320c      	adds	r2, #12
   11a20:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   11a22:	3201      	adds	r2, #1
   11a24:	54a3      	strb	r3, [r4, r2]
}
   11a26:	bd10      	pop	{r4, pc}
   11a28:	000118b1 	.word	0x000118b1
   11a2c:	00019308 	.word	0x00019308

00011a30 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   11a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a32:	46de      	mov	lr, fp
   11a34:	4657      	mov	r7, sl
   11a36:	464e      	mov	r6, r9
   11a38:	4645      	mov	r5, r8
   11a3a:	b5e0      	push	{r5, r6, r7, lr}
   11a3c:	b091      	sub	sp, #68	; 0x44
   11a3e:	9001      	str	r0, [sp, #4]
   11a40:	000c      	movs	r4, r1
   11a42:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11a44:	0008      	movs	r0, r1
   11a46:	4bc3      	ldr	r3, [pc, #780]	; (11d54 <tcc_init+0x324>)
   11a48:	4798      	blx	r3
   11a4a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   11a4c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   11a4e:	48c2      	ldr	r0, [pc, #776]	; (11d58 <tcc_init+0x328>)
   11a50:	6a02      	ldr	r2, [r0, #32]
   11a52:	009e      	lsls	r6, r3, #2
   11a54:	4fc1      	ldr	r7, [pc, #772]	; (11d5c <tcc_init+0x32c>)
   11a56:	59f7      	ldr	r7, [r6, r7]
   11a58:	433a      	orrs	r2, r7
   11a5a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11a5c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   11a5e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11a60:	0792      	lsls	r2, r2, #30
   11a62:	d506      	bpl.n	11a72 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   11a64:	b011      	add	sp, #68	; 0x44
   11a66:	bc3c      	pop	{r2, r3, r4, r5}
   11a68:	4690      	mov	r8, r2
   11a6a:	4699      	mov	r9, r3
   11a6c:	46a2      	mov	sl, r4
   11a6e:	46ab      	mov	fp, r5
   11a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   11a72:	6822      	ldr	r2, [r4, #0]
   11a74:	2701      	movs	r7, #1
   11a76:	4017      	ands	r7, r2
   11a78:	d1f4      	bne.n	11a64 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   11a7a:	48b9      	ldr	r0, [pc, #740]	; (11d60 <tcc_init+0x330>)
   11a7c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   11a7e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   11a80:	682e      	ldr	r6, [r5, #0]
   11a82:	42b2      	cmp	r2, r6
   11a84:	d3ee      	bcc.n	11a64 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   11a86:	686e      	ldr	r6, [r5, #4]
   11a88:	42b2      	cmp	r2, r6
   11a8a:	d3eb      	bcc.n	11a64 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   11a8c:	69e8      	ldr	r0, [r5, #28]
   11a8e:	4282      	cmp	r2, r0
   11a90:	d200      	bcs.n	11a94 <tcc_init+0x64>
   11a92:	e1b9      	b.n	11e08 <tcc_init+0x3d8>
   11a94:	6a28      	ldr	r0, [r5, #32]
   11a96:	4282      	cmp	r2, r0
   11a98:	d200      	bcs.n	11a9c <tcc_init+0x6c>
   11a9a:	e1b7      	b.n	11e0c <tcc_init+0x3dc>
   11a9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   11a9e:	4282      	cmp	r2, r0
   11aa0:	d200      	bcs.n	11aa4 <tcc_init+0x74>
   11aa2:	e1b5      	b.n	11e10 <tcc_init+0x3e0>
   11aa4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11aa6:	4282      	cmp	r2, r0
   11aa8:	d200      	bcs.n	11aac <tcc_init+0x7c>
   11aaa:	e1b3      	b.n	11e14 <tcc_init+0x3e4>
   11aac:	2298      	movs	r2, #152	; 0x98
   11aae:	4694      	mov	ip, r2
   11ab0:	44ac      	add	ip, r5
   11ab2:	4662      	mov	r2, ip
   11ab4:	9208      	str	r2, [sp, #32]
   11ab6:	2000      	movs	r0, #0
   11ab8:	e003      	b.n	11ac2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11aba:	3001      	adds	r0, #1
   11abc:	3201      	adds	r2, #1
   11abe:	2808      	cmp	r0, #8
   11ac0:	d008      	beq.n	11ad4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   11ac2:	7816      	ldrb	r6, [r2, #0]
   11ac4:	2e00      	cmp	r6, #0
   11ac6:	d0f8      	beq.n	11aba <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   11ac8:	4ea6      	ldr	r6, [pc, #664]	; (11d64 <tcc_init+0x334>)
   11aca:	5c76      	ldrb	r6, [r6, r1]
   11acc:	4286      	cmp	r6, r0
   11ace:	dcf4      	bgt.n	11aba <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   11ad0:	2017      	movs	r0, #23
   11ad2:	e7c7      	b.n	11a64 <tcc_init+0x34>
   11ad4:	2200      	movs	r2, #0
   11ad6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11ad8:	2080      	movs	r0, #128	; 0x80
   11ada:	0440      	lsls	r0, r0, #17
   11adc:	4684      	mov	ip, r0
   11ade:	e002      	b.n	11ae6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   11ae0:	3201      	adds	r2, #1
   11ae2:	2a04      	cmp	r2, #4
   11ae4:	d00e      	beq.n	11b04 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   11ae6:	18a8      	adds	r0, r5, r2
   11ae8:	7c00      	ldrb	r0, [r0, #16]
   11aea:	2801      	cmp	r0, #1
   11aec:	d1f8      	bne.n	11ae0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   11aee:	489e      	ldr	r0, [pc, #632]	; (11d68 <tcc_init+0x338>)
   11af0:	5c40      	ldrb	r0, [r0, r1]
   11af2:	4290      	cmp	r0, r2
   11af4:	da00      	bge.n	11af8 <tcc_init+0xc8>
   11af6:	e18f      	b.n	11e18 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11af8:	4660      	mov	r0, ip
   11afa:	4090      	lsls	r0, r2
   11afc:	9e02      	ldr	r6, [sp, #8]
   11afe:	4306      	orrs	r6, r0
   11b00:	9602      	str	r6, [sp, #8]
   11b02:	e7ed      	b.n	11ae0 <tcc_init+0xb0>
	if (config->run_in_standby) {
   11b04:	329d      	adds	r2, #157	; 0x9d
   11b06:	5caa      	ldrb	r2, [r5, r2]
   11b08:	2a00      	cmp	r2, #0
   11b0a:	d004      	beq.n	11b16 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   11b0c:	2280      	movs	r2, #128	; 0x80
   11b0e:	0112      	lsls	r2, r2, #4
   11b10:	9902      	ldr	r1, [sp, #8]
   11b12:	4311      	orrs	r1, r2
   11b14:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   11b16:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   11b18:	1e51      	subs	r1, r2, #1
   11b1a:	418a      	sbcs	r2, r1
   11b1c:	0092      	lsls	r2, r2, #2
   11b1e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   11b20:	7a6a      	ldrb	r2, [r5, #9]
   11b22:	2a01      	cmp	r2, #1
   11b24:	d022      	beq.n	11b6c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   11b26:	4a90      	ldr	r2, [pc, #576]	; (11d68 <tcc_init+0x338>)
   11b28:	5cd2      	ldrb	r2, [r2, r3]
   11b2a:	0011      	movs	r1, r2
   11b2c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   11b2e:	2235      	movs	r2, #53	; 0x35
   11b30:	5caa      	ldrb	r2, [r5, r2]
   11b32:	428a      	cmp	r2, r1
   11b34:	d300      	bcc.n	11b38 <tcc_init+0x108>
   11b36:	e179      	b.n	11e2c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11b38:	212c      	movs	r1, #44	; 0x2c
   11b3a:	5c69      	ldrb	r1, [r5, r1]
   11b3c:	290f      	cmp	r1, #15
   11b3e:	d900      	bls.n	11b42 <tcc_init+0x112>
   11b40:	e174      	b.n	11e2c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11b42:	7b28      	ldrb	r0, [r5, #12]
   11b44:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11b46:	7ae8      	ldrb	r0, [r5, #11]
   11b48:	900b      	str	r0, [sp, #44]	; 0x2c
   11b4a:	202d      	movs	r0, #45	; 0x2d
   11b4c:	4682      	mov	sl, r0
   11b4e:	44aa      	add	sl, r5
   11b50:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11b52:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   11b54:	ae0e      	add	r6, sp, #56	; 0x38
   11b56:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11b58:	26c0      	movs	r6, #192	; 0xc0
   11b5a:	0136      	lsls	r6, r6, #4
   11b5c:	46b1      	mov	r9, r6
   11b5e:	4684      	mov	ip, r0
   11b60:	46a0      	mov	r8, r4
   11b62:	0028      	movs	r0, r5
   11b64:	4655      	mov	r5, sl
   11b66:	9309      	str	r3, [sp, #36]	; 0x24
   11b68:	4682      	mov	sl, r0
   11b6a:	e035      	b.n	11bd8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   11b6c:	9906      	ldr	r1, [sp, #24]
   11b6e:	4311      	orrs	r1, r2
   11b70:	9106      	str	r1, [sp, #24]
   11b72:	e7d8      	b.n	11b26 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11b74:	0292      	lsls	r2, r2, #10
   11b76:	464f      	mov	r7, r9
   11b78:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11b7a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   11b7c:	7919      	ldrb	r1, [r3, #4]
   11b7e:	468b      	mov	fp, r1
   11b80:	2103      	movs	r1, #3
   11b82:	465f      	mov	r7, fp
   11b84:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11b86:	430a      	orrs	r2, r1
   11b88:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   11b8a:	795a      	ldrb	r2, [r3, #5]
   11b8c:	0152      	lsls	r2, r2, #5
   11b8e:	2160      	movs	r1, #96	; 0x60
   11b90:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11b92:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   11b94:	7999      	ldrb	r1, [r3, #6]
   11b96:	0209      	lsls	r1, r1, #8
   11b98:	26c0      	movs	r6, #192	; 0xc0
   11b9a:	00b6      	lsls	r6, r6, #2
   11b9c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11b9e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   11ba0:	79da      	ldrb	r2, [r3, #7]
   11ba2:	0312      	lsls	r2, r2, #12
   11ba4:	21e0      	movs	r1, #224	; 0xe0
   11ba6:	01c9      	lsls	r1, r1, #7
   11ba8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11baa:	4316      	orrs	r6, r2
   11bac:	4334      	orrs	r4, r6
   11bae:	9a03      	ldr	r2, [sp, #12]
   11bb0:	4314      	orrs	r4, r2
   11bb2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   11bb4:	4662      	mov	r2, ip
   11bb6:	9907      	ldr	r1, [sp, #28]
   11bb8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   11bba:	2a04      	cmp	r2, #4
   11bbc:	d02a      	beq.n	11c14 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   11bbe:	7c9a      	ldrb	r2, [r3, #18]
   11bc0:	9905      	ldr	r1, [sp, #20]
   11bc2:	4291      	cmp	r1, r2
   11bc4:	d800      	bhi.n	11bc8 <tcc_init+0x198>
   11bc6:	e131      	b.n	11e2c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11bc8:	7a59      	ldrb	r1, [r3, #9]
   11bca:	350a      	adds	r5, #10
   11bcc:	2304      	movs	r3, #4
   11bce:	469b      	mov	fp, r3
   11bd0:	44dc      	add	ip, fp
   11bd2:	290f      	cmp	r1, #15
   11bd4:	d900      	bls.n	11bd8 <tcc_init+0x1a8>
   11bd6:	e129      	b.n	11e2c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11bd8:	0609      	lsls	r1, r1, #24
   11bda:	23f0      	movs	r3, #240	; 0xf0
   11bdc:	051b      	lsls	r3, r3, #20
   11bde:	4019      	ands	r1, r3
   11be0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   11be2:	782e      	ldrb	r6, [r5, #0]
   11be4:	0436      	lsls	r6, r6, #16
   11be6:	20ff      	movs	r0, #255	; 0xff
   11be8:	0400      	lsls	r0, r0, #16
   11bea:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11bec:	7868      	ldrb	r0, [r5, #1]
   11bee:	2480      	movs	r4, #128	; 0x80
   11bf0:	2800      	cmp	r0, #0
   11bf2:	d100      	bne.n	11bf6 <tcc_init+0x1c6>
   11bf4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   11bf6:	7898      	ldrb	r0, [r3, #2]
   11bf8:	2708      	movs	r7, #8
   11bfa:	9703      	str	r7, [sp, #12]
   11bfc:	2800      	cmp	r0, #0
   11bfe:	d101      	bne.n	11c04 <tcc_init+0x1d4>
   11c00:	9804      	ldr	r0, [sp, #16]
   11c02:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   11c04:	78d8      	ldrb	r0, [r3, #3]
   11c06:	4683      	mov	fp, r0
   11c08:	2010      	movs	r0, #16
   11c0a:	465f      	mov	r7, fp
   11c0c:	2f00      	cmp	r7, #0
   11c0e:	d1b1      	bne.n	11b74 <tcc_init+0x144>
   11c10:	9804      	ldr	r0, [sp, #16]
   11c12:	e7af      	b.n	11b74 <tcc_init+0x144>
   11c14:	4644      	mov	r4, r8
   11c16:	4655      	mov	r5, sl
   11c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   11c1a:	4a52      	ldr	r2, [pc, #328]	; (11d64 <tcc_init+0x334>)
   11c1c:	5cd2      	ldrb	r2, [r2, r3]
   11c1e:	4691      	mov	r9, r2
   11c20:	4651      	mov	r1, sl
   11c22:	3150      	adds	r1, #80	; 0x50
   11c24:	4650      	mov	r0, sl
   11c26:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   11c28:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11c2a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11c2c:	2601      	movs	r6, #1
   11c2e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11c30:	2602      	movs	r6, #2
   11c32:	36ff      	adds	r6, #255	; 0xff
   11c34:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11c36:	2680      	movs	r6, #128	; 0x80
   11c38:	0276      	lsls	r6, r6, #9
   11c3a:	46b0      	mov	r8, r6
   11c3c:	46a4      	mov	ip, r4
   11c3e:	001c      	movs	r4, r3
   11c40:	464b      	mov	r3, r9
   11c42:	e00f      	b.n	11c64 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11c44:	7806      	ldrb	r6, [r0, #0]
   11c46:	2e00      	cmp	r6, #0
   11c48:	d007      	beq.n	11c5a <tcc_init+0x22a>
			if (i >= ow_num) {
   11c4a:	4293      	cmp	r3, r2
   11c4c:	d800      	bhi.n	11c50 <tcc_init+0x220>
   11c4e:	e0e7      	b.n	11e20 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   11c50:	2e02      	cmp	r6, #2
   11c52:	d014      	beq.n	11c7e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11c54:	4656      	mov	r6, sl
   11c56:	4096      	lsls	r6, r2
   11c58:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   11c5a:	3201      	adds	r2, #1
   11c5c:	3101      	adds	r1, #1
   11c5e:	3002      	adds	r0, #2
   11c60:	2a08      	cmp	r2, #8
   11c62:	d010      	beq.n	11c86 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   11c64:	780e      	ldrb	r6, [r1, #0]
   11c66:	2e00      	cmp	r6, #0
   11c68:	d0ec      	beq.n	11c44 <tcc_init+0x214>
			if (i >= ow_num) {
   11c6a:	4293      	cmp	r3, r2
   11c6c:	d800      	bhi.n	11c70 <tcc_init+0x240>
   11c6e:	e0d5      	b.n	11e1c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11c70:	4646      	mov	r6, r8
   11c72:	4096      	lsls	r6, r2
   11c74:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11c76:	7806      	ldrb	r6, [r0, #0]
   11c78:	2e00      	cmp	r6, #0
   11c7a:	d1e9      	bne.n	11c50 <tcc_init+0x220>
   11c7c:	e7ed      	b.n	11c5a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   11c7e:	465e      	mov	r6, fp
   11c80:	4096      	lsls	r6, r2
   11c82:	4337      	orrs	r7, r6
   11c84:	e7e9      	b.n	11c5a <tcc_init+0x22a>
   11c86:	4699      	mov	r9, r3
   11c88:	0023      	movs	r3, r4
   11c8a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11c8c:	7e6a      	ldrb	r2, [r5, #25]
   11c8e:	0112      	lsls	r2, r2, #4
   11c90:	2130      	movs	r1, #48	; 0x30
   11c92:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   11c94:	7e28      	ldrb	r0, [r5, #24]
   11c96:	2207      	movs	r2, #7
   11c98:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   11c9a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11c9c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   11c9e:	2080      	movs	r0, #128	; 0x80
   11ca0:	0240      	lsls	r0, r0, #9
   11ca2:	000e      	movs	r6, r1
   11ca4:	e002      	b.n	11cac <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11ca6:	3201      	adds	r2, #1
   11ca8:	2a04      	cmp	r2, #4
   11caa:	d00b      	beq.n	11cc4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   11cac:	18a9      	adds	r1, r5, r2
   11cae:	7d09      	ldrb	r1, [r1, #20]
   11cb0:	2900      	cmp	r1, #0
   11cb2:	d0f8      	beq.n	11ca6 <tcc_init+0x276>
			if (n >= cc_num) {
   11cb4:	9905      	ldr	r1, [sp, #20]
   11cb6:	4291      	cmp	r1, r2
   11cb8:	dc00      	bgt.n	11cbc <tcc_init+0x28c>
   11cba:	e0b3      	b.n	11e24 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   11cbc:	0001      	movs	r1, r0
   11cbe:	4091      	lsls	r1, r2
   11cc0:	430e      	orrs	r6, r1
   11cc2:	e7f0      	b.n	11ca6 <tcc_init+0x276>
   11cc4:	46b2      	mov	sl, r6
   11cc6:	9801      	ldr	r0, [sp, #4]
   11cc8:	0002      	movs	r2, r0
   11cca:	3204      	adds	r2, #4
   11ccc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   11cce:	2100      	movs	r1, #0
   11cd0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11cd2:	4282      	cmp	r2, r0
   11cd4:	d1fc      	bne.n	11cd0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   11cd6:	2200      	movs	r2, #0
   11cd8:	9801      	ldr	r0, [sp, #4]
   11cda:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   11cdc:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   11cde:	0099      	lsls	r1, r3, #2
   11ce0:	4a22      	ldr	r2, [pc, #136]	; (11d6c <tcc_init+0x33c>)
   11ce2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   11ce4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   11ce6:	22a0      	movs	r2, #160	; 0xa0
   11ce8:	5ca9      	ldrb	r1, [r5, r2]
   11cea:	3a64      	subs	r2, #100	; 0x64
   11cec:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   11cee:	a90d      	add	r1, sp, #52	; 0x34
   11cf0:	7aaa      	ldrb	r2, [r5, #10]
   11cf2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   11cf4:	4a1e      	ldr	r2, [pc, #120]	; (11d70 <tcc_init+0x340>)
   11cf6:	5cd6      	ldrb	r6, [r2, r3]
   11cf8:	0030      	movs	r0, r6
   11cfa:	4b1e      	ldr	r3, [pc, #120]	; (11d74 <tcc_init+0x344>)
   11cfc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   11cfe:	0030      	movs	r0, r6
   11d00:	4b1d      	ldr	r3, [pc, #116]	; (11d78 <tcc_init+0x348>)
   11d02:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11d04:	464b      	mov	r3, r9
   11d06:	2b00      	cmp	r3, #0
   11d08:	dd3c      	ble.n	11d84 <tcc_init+0x354>
   11d0a:	002e      	movs	r6, r5
   11d0c:	3658      	adds	r6, #88	; 0x58
   11d0e:	3398      	adds	r3, #152	; 0x98
   11d10:	4698      	mov	r8, r3
   11d12:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11d14:	2301      	movs	r3, #1
   11d16:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   11d18:	46ab      	mov	fp, r5
   11d1a:	4645      	mov	r5, r8
   11d1c:	46a0      	mov	r8, r4
   11d1e:	9c08      	ldr	r4, [sp, #32]
   11d20:	e003      	b.n	11d2a <tcc_init+0x2fa>
   11d22:	3401      	adds	r4, #1
   11d24:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   11d26:	42ac      	cmp	r4, r5
   11d28:	d02a      	beq.n	11d80 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   11d2a:	7823      	ldrb	r3, [r4, #0]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d0f8      	beq.n	11d22 <tcc_init+0x2f2>
   11d30:	ab0c      	add	r3, sp, #48	; 0x30
   11d32:	464a      	mov	r2, r9
   11d34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11d36:	2300      	movs	r3, #0
   11d38:	aa0c      	add	r2, sp, #48	; 0x30
   11d3a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   11d3c:	0013      	movs	r3, r2
   11d3e:	2220      	movs	r2, #32
   11d40:	18b2      	adds	r2, r6, r2
   11d42:	7812      	ldrb	r2, [r2, #0]
   11d44:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   11d46:	464a      	mov	r2, r9
   11d48:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   11d4a:	7830      	ldrb	r0, [r6, #0]
   11d4c:	0019      	movs	r1, r3
   11d4e:	4b0b      	ldr	r3, [pc, #44]	; (11d7c <tcc_init+0x34c>)
   11d50:	4798      	blx	r3
   11d52:	e7e6      	b.n	11d22 <tcc_init+0x2f2>
   11d54:	000118b1 	.word	0x000118b1
   11d58:	40000400 	.word	0x40000400
   11d5c:	000192f4 	.word	0x000192f4
   11d60:	00019308 	.word	0x00019308
   11d64:	00019314 	.word	0x00019314
   11d68:	00019300 	.word	0x00019300
   11d6c:	200014bc 	.word	0x200014bc
   11d70:	00019304 	.word	0x00019304
   11d74:	00011759 	.word	0x00011759
   11d78:	000116cd 	.word	0x000116cd
   11d7c:	00011851 	.word	0x00011851
   11d80:	4644      	mov	r4, r8
   11d82:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d86:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d8a:	0212      	lsls	r2, r2, #8
   11d8c:	4313      	orrs	r3, r2
   11d8e:	9a02      	ldr	r2, [sp, #8]
   11d90:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   11d92:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11d94:	2204      	movs	r2, #4
   11d96:	68a3      	ldr	r3, [r4, #8]
   11d98:	421a      	tst	r2, r3
   11d9a:	d1fc      	bne.n	11d96 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   11d9c:	23ff      	movs	r3, #255	; 0xff
   11d9e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11da0:	2204      	movs	r2, #4
   11da2:	68a3      	ldr	r3, [r4, #8]
   11da4:	421a      	tst	r2, r3
   11da6:	d1fc      	bne.n	11da2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11da8:	466b      	mov	r3, sp
   11daa:	7e1b      	ldrb	r3, [r3, #24]
   11dac:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   11dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11db0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11db4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11db6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11db8:	4a1d      	ldr	r2, [pc, #116]	; (11e30 <tcc_init+0x400>)
   11dba:	68a3      	ldr	r3, [r4, #8]
   11dbc:	4213      	tst	r3, r2
   11dbe:	d1fc      	bne.n	11dba <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11dc0:	4653      	mov	r3, sl
   11dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11dc4:	2210      	movs	r2, #16
   11dc6:	68a3      	ldr	r3, [r4, #8]
   11dc8:	421a      	tst	r2, r3
   11dca:	d1fc      	bne.n	11dc6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   11dcc:	682b      	ldr	r3, [r5, #0]
   11dce:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11dd0:	4a18      	ldr	r2, [pc, #96]	; (11e34 <tcc_init+0x404>)
   11dd2:	68a3      	ldr	r3, [r4, #8]
   11dd4:	4213      	tst	r3, r2
   11dd6:	d1fc      	bne.n	11dd2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11dd8:	686b      	ldr	r3, [r5, #4]
   11dda:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11ddc:	9805      	ldr	r0, [sp, #20]
   11dde:	2800      	cmp	r0, #0
   11de0:	dd22      	ble.n	11e28 <tcc_init+0x3f8>
   11de2:	351c      	adds	r5, #28
   11de4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11de6:	4e14      	ldr	r6, [pc, #80]	; (11e38 <tcc_init+0x408>)
   11de8:	0032      	movs	r2, r6
   11dea:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   11dec:	68a3      	ldr	r3, [r4, #8]
   11dee:	421a      	tst	r2, r3
   11df0:	d1fc      	bne.n	11dec <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11df2:	cd04      	ldmia	r5!, {r2}
   11df4:	000b      	movs	r3, r1
   11df6:	3310      	adds	r3, #16
   11df8:	009b      	lsls	r3, r3, #2
   11dfa:	18e3      	adds	r3, r4, r3
   11dfc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11dfe:	3101      	adds	r1, #1
   11e00:	4288      	cmp	r0, r1
   11e02:	dcf1      	bgt.n	11de8 <tcc_init+0x3b8>
	return STATUS_OK;
   11e04:	2000      	movs	r0, #0
   11e06:	e62d      	b.n	11a64 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   11e08:	2017      	movs	r0, #23
   11e0a:	e62b      	b.n	11a64 <tcc_init+0x34>
   11e0c:	2017      	movs	r0, #23
   11e0e:	e629      	b.n	11a64 <tcc_init+0x34>
   11e10:	2017      	movs	r0, #23
   11e12:	e627      	b.n	11a64 <tcc_init+0x34>
   11e14:	2017      	movs	r0, #23
   11e16:	e625      	b.n	11a64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11e18:	2017      	movs	r0, #23
   11e1a:	e623      	b.n	11a64 <tcc_init+0x34>
			if (i >= ow_num) {
   11e1c:	2017      	movs	r0, #23
   11e1e:	e621      	b.n	11a64 <tcc_init+0x34>
			if (i >= ow_num) {
   11e20:	2017      	movs	r0, #23
   11e22:	e61f      	b.n	11a64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11e24:	2017      	movs	r0, #23
   11e26:	e61d      	b.n	11a64 <tcc_init+0x34>
	return STATUS_OK;
   11e28:	2000      	movs	r0, #0
   11e2a:	e61b      	b.n	11a64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11e2c:	2017      	movs	r0, #23
   11e2e:	e619      	b.n	11a64 <tcc_init+0x34>
   11e30:	00020040 	.word	0x00020040
   11e34:	00040080 	.word	0x00040080
   11e38:	00080100 	.word	0x00080100

00011e3c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   11e3c:	0092      	lsls	r2, r2, #2
   11e3e:	1883      	adds	r3, r0, r2
   11e40:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   11e42:	4b03      	ldr	r3, [pc, #12]	; (11e50 <tcc_register_callback+0x14>)
   11e44:	58d3      	ldr	r3, [r2, r3]
   11e46:	6b42      	ldr	r2, [r0, #52]	; 0x34
   11e48:	4313      	orrs	r3, r2
   11e4a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   11e4c:	2000      	movs	r0, #0
   11e4e:	4770      	bx	lr
   11e50:	00019318 	.word	0x00019318

00011e54 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   11e54:	b570      	push	{r4, r5, r6, lr}
   11e56:	0004      	movs	r4, r0
   11e58:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   11e5a:	6800      	ldr	r0, [r0, #0]
   11e5c:	4b09      	ldr	r3, [pc, #36]	; (11e84 <tcc_enable_callback+0x30>)
   11e5e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   11e60:	4b09      	ldr	r3, [pc, #36]	; (11e88 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11e62:	5c1b      	ldrb	r3, [r3, r0]
   11e64:	221f      	movs	r2, #31
   11e66:	401a      	ands	r2, r3
   11e68:	2301      	movs	r3, #1
   11e6a:	4093      	lsls	r3, r2
   11e6c:	4a07      	ldr	r2, [pc, #28]	; (11e8c <tcc_enable_callback+0x38>)
   11e6e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   11e70:	00ad      	lsls	r5, r5, #2
   11e72:	4b07      	ldr	r3, [pc, #28]	; (11e90 <tcc_enable_callback+0x3c>)
   11e74:	58ea      	ldr	r2, [r5, r3]
   11e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11e78:	4313      	orrs	r3, r2
   11e7a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   11e7c:	6823      	ldr	r3, [r4, #0]
   11e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
   11e80:	bd70      	pop	{r4, r5, r6, pc}
   11e82:	46c0      	nop			; (mov r8, r8)
   11e84:	000118b1 	.word	0x000118b1
   11e88:	00019348 	.word	0x00019348
   11e8c:	e000e100 	.word	0xe000e100
   11e90:	00019318 	.word	0x00019318

00011e94 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   11e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e96:	46c6      	mov	lr, r8
   11e98:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   11e9a:	0080      	lsls	r0, r0, #2
   11e9c:	4b0e      	ldr	r3, [pc, #56]	; (11ed8 <_tcc_interrupt_handler+0x44>)
   11e9e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   11ea0:	683b      	ldr	r3, [r7, #0]
   11ea2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   11ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11ea8:	4013      	ands	r3, r2
   11eaa:	401e      	ands	r6, r3
   11eac:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11eae:	4b0b      	ldr	r3, [pc, #44]	; (11edc <_tcc_interrupt_handler+0x48>)
   11eb0:	4698      	mov	r8, r3
   11eb2:	e002      	b.n	11eba <_tcc_interrupt_handler+0x26>
   11eb4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11eb6:	2c30      	cmp	r4, #48	; 0x30
   11eb8:	d00a      	beq.n	11ed0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11eba:	4643      	mov	r3, r8
   11ebc:	58e5      	ldr	r5, [r4, r3]
   11ebe:	4235      	tst	r5, r6
   11ec0:	d0f8      	beq.n	11eb4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   11ec2:	193b      	adds	r3, r7, r4
   11ec4:	685b      	ldr	r3, [r3, #4]
   11ec6:	0038      	movs	r0, r7
   11ec8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   11eca:	683b      	ldr	r3, [r7, #0]
   11ecc:	62dd      	str	r5, [r3, #44]	; 0x2c
   11ece:	e7f1      	b.n	11eb4 <_tcc_interrupt_handler+0x20>
		}
	}
}
   11ed0:	bc04      	pop	{r2}
   11ed2:	4690      	mov	r8, r2
   11ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ed6:	46c0      	nop			; (mov r8, r8)
   11ed8:	200014bc 	.word	0x200014bc
   11edc:	00019318 	.word	0x00019318

00011ee0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   11ee0:	b510      	push	{r4, lr}
   11ee2:	2000      	movs	r0, #0
   11ee4:	4b01      	ldr	r3, [pc, #4]	; (11eec <TCC0_Handler+0xc>)
   11ee6:	4798      	blx	r3
   11ee8:	bd10      	pop	{r4, pc}
   11eea:	46c0      	nop			; (mov r8, r8)
   11eec:	00011e95 	.word	0x00011e95

00011ef0 <TCC1_Handler>:
   11ef0:	b510      	push	{r4, lr}
   11ef2:	2001      	movs	r0, #1
   11ef4:	4b01      	ldr	r3, [pc, #4]	; (11efc <TCC1_Handler+0xc>)
   11ef6:	4798      	blx	r3
   11ef8:	bd10      	pop	{r4, pc}
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	00011e95 	.word	0x00011e95

00011f00 <TCC2_Handler>:
   11f00:	b510      	push	{r4, lr}
   11f02:	2002      	movs	r0, #2
   11f04:	4b01      	ldr	r3, [pc, #4]	; (11f0c <TCC2_Handler+0xc>)
   11f06:	4798      	blx	r3
   11f08:	bd10      	pop	{r4, pc}
   11f0a:	46c0      	nop			; (mov r8, r8)
   11f0c:	00011e95 	.word	0x00011e95

00011f10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11f10:	e7fe      	b.n	11f10 <Dummy_Handler>
	...

00011f14 <Reset_Handler>:
{
   11f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11f16:	4a2a      	ldr	r2, [pc, #168]	; (11fc0 <Reset_Handler+0xac>)
   11f18:	4b2a      	ldr	r3, [pc, #168]	; (11fc4 <Reset_Handler+0xb0>)
   11f1a:	429a      	cmp	r2, r3
   11f1c:	d011      	beq.n	11f42 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   11f1e:	001a      	movs	r2, r3
   11f20:	4b29      	ldr	r3, [pc, #164]	; (11fc8 <Reset_Handler+0xb4>)
   11f22:	429a      	cmp	r2, r3
   11f24:	d20d      	bcs.n	11f42 <Reset_Handler+0x2e>
   11f26:	4a29      	ldr	r2, [pc, #164]	; (11fcc <Reset_Handler+0xb8>)
   11f28:	3303      	adds	r3, #3
   11f2a:	1a9b      	subs	r3, r3, r2
   11f2c:	089b      	lsrs	r3, r3, #2
   11f2e:	3301      	adds	r3, #1
   11f30:	009b      	lsls	r3, r3, #2
   11f32:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   11f34:	4823      	ldr	r0, [pc, #140]	; (11fc4 <Reset_Handler+0xb0>)
   11f36:	4922      	ldr	r1, [pc, #136]	; (11fc0 <Reset_Handler+0xac>)
   11f38:	588c      	ldr	r4, [r1, r2]
   11f3a:	5084      	str	r4, [r0, r2]
   11f3c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   11f3e:	429a      	cmp	r2, r3
   11f40:	d1fa      	bne.n	11f38 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   11f42:	4a23      	ldr	r2, [pc, #140]	; (11fd0 <Reset_Handler+0xbc>)
   11f44:	4b23      	ldr	r3, [pc, #140]	; (11fd4 <Reset_Handler+0xc0>)
   11f46:	429a      	cmp	r2, r3
   11f48:	d20a      	bcs.n	11f60 <Reset_Handler+0x4c>
   11f4a:	43d3      	mvns	r3, r2
   11f4c:	4921      	ldr	r1, [pc, #132]	; (11fd4 <Reset_Handler+0xc0>)
   11f4e:	185b      	adds	r3, r3, r1
   11f50:	2103      	movs	r1, #3
   11f52:	438b      	bics	r3, r1
   11f54:	3304      	adds	r3, #4
   11f56:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   11f58:	2100      	movs	r1, #0
   11f5a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   11f5c:	4293      	cmp	r3, r2
   11f5e:	d1fc      	bne.n	11f5a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11f60:	4a1d      	ldr	r2, [pc, #116]	; (11fd8 <Reset_Handler+0xc4>)
   11f62:	21ff      	movs	r1, #255	; 0xff
   11f64:	4b1d      	ldr	r3, [pc, #116]	; (11fdc <Reset_Handler+0xc8>)
   11f66:	438b      	bics	r3, r1
   11f68:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11f6a:	39fd      	subs	r1, #253	; 0xfd
   11f6c:	2390      	movs	r3, #144	; 0x90
   11f6e:	005b      	lsls	r3, r3, #1
   11f70:	4a1b      	ldr	r2, [pc, #108]	; (11fe0 <Reset_Handler+0xcc>)
   11f72:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11f74:	4a1b      	ldr	r2, [pc, #108]	; (11fe4 <Reset_Handler+0xd0>)
   11f76:	78d3      	ldrb	r3, [r2, #3]
   11f78:	2503      	movs	r5, #3
   11f7a:	43ab      	bics	r3, r5
   11f7c:	2402      	movs	r4, #2
   11f7e:	4323      	orrs	r3, r4
   11f80:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11f82:	78d3      	ldrb	r3, [r2, #3]
   11f84:	270c      	movs	r7, #12
   11f86:	43bb      	bics	r3, r7
   11f88:	2608      	movs	r6, #8
   11f8a:	4333      	orrs	r3, r6
   11f8c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   11f8e:	4b16      	ldr	r3, [pc, #88]	; (11fe8 <Reset_Handler+0xd4>)
   11f90:	7b98      	ldrb	r0, [r3, #14]
   11f92:	2230      	movs	r2, #48	; 0x30
   11f94:	4390      	bics	r0, r2
   11f96:	2220      	movs	r2, #32
   11f98:	4310      	orrs	r0, r2
   11f9a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11f9c:	7b99      	ldrb	r1, [r3, #14]
   11f9e:	43b9      	bics	r1, r7
   11fa0:	4331      	orrs	r1, r6
   11fa2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11fa4:	7b9a      	ldrb	r2, [r3, #14]
   11fa6:	43aa      	bics	r2, r5
   11fa8:	4322      	orrs	r2, r4
   11faa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11fac:	4a0f      	ldr	r2, [pc, #60]	; (11fec <Reset_Handler+0xd8>)
   11fae:	6853      	ldr	r3, [r2, #4]
   11fb0:	2180      	movs	r1, #128	; 0x80
   11fb2:	430b      	orrs	r3, r1
   11fb4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11fb6:	4b0e      	ldr	r3, [pc, #56]	; (11ff0 <Reset_Handler+0xdc>)
   11fb8:	4798      	blx	r3
        main();
   11fba:	4b0e      	ldr	r3, [pc, #56]	; (11ff4 <Reset_Handler+0xe0>)
   11fbc:	4798      	blx	r3
   11fbe:	e7fe      	b.n	11fbe <Reset_Handler+0xaa>
   11fc0:	0001a400 	.word	0x0001a400
   11fc4:	20000000 	.word	0x20000000
   11fc8:	20000254 	.word	0x20000254
   11fcc:	20000004 	.word	0x20000004
   11fd0:	20000254 	.word	0x20000254
   11fd4:	2000162c 	.word	0x2000162c
   11fd8:	e000ed00 	.word	0xe000ed00
   11fdc:	0000b000 	.word	0x0000b000
   11fe0:	41007000 	.word	0x41007000
   11fe4:	41005000 	.word	0x41005000
   11fe8:	41004800 	.word	0x41004800
   11fec:	41004000 	.word	0x41004000
   11ff0:	000169d9 	.word	0x000169d9
   11ff4:	000162e1 	.word	0x000162e1

00011ff8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ffa:	46c6      	mov	lr, r8
   11ffc:	b500      	push	{lr}
   11ffe:	000c      	movs	r4, r1
   12000:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   12002:	2800      	cmp	r0, #0
   12004:	d10f      	bne.n	12026 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   12006:	2a00      	cmp	r2, #0
   12008:	dd11      	ble.n	1202e <_read+0x36>
   1200a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1200c:	4e09      	ldr	r6, [pc, #36]	; (12034 <_read+0x3c>)
   1200e:	4d0a      	ldr	r5, [pc, #40]	; (12038 <_read+0x40>)
   12010:	6830      	ldr	r0, [r6, #0]
   12012:	0021      	movs	r1, r4
   12014:	682b      	ldr	r3, [r5, #0]
   12016:	4798      	blx	r3
		ptr++;
   12018:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1201a:	42bc      	cmp	r4, r7
   1201c:	d1f8      	bne.n	12010 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1201e:	4640      	mov	r0, r8
   12020:	bc04      	pop	{r2}
   12022:	4690      	mov	r8, r2
   12024:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   12026:	2301      	movs	r3, #1
   12028:	425b      	negs	r3, r3
   1202a:	4698      	mov	r8, r3
   1202c:	e7f7      	b.n	1201e <_read+0x26>
	for (; len > 0; --len) {
   1202e:	4680      	mov	r8, r0
   12030:	e7f5      	b.n	1201e <_read+0x26>
   12032:	46c0      	nop			; (mov r8, r8)
   12034:	200014d0 	.word	0x200014d0
   12038:	200014c8 	.word	0x200014c8

0001203c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1203c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1203e:	46c6      	mov	lr, r8
   12040:	b500      	push	{lr}
   12042:	000e      	movs	r6, r1
   12044:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   12046:	3801      	subs	r0, #1
   12048:	2802      	cmp	r0, #2
   1204a:	d810      	bhi.n	1206e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1204c:	2a00      	cmp	r2, #0
   1204e:	d011      	beq.n	12074 <_write+0x38>
   12050:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   12052:	4b0c      	ldr	r3, [pc, #48]	; (12084 <_write+0x48>)
   12054:	4698      	mov	r8, r3
   12056:	4f0c      	ldr	r7, [pc, #48]	; (12088 <_write+0x4c>)
   12058:	4643      	mov	r3, r8
   1205a:	6818      	ldr	r0, [r3, #0]
   1205c:	5d31      	ldrb	r1, [r6, r4]
   1205e:	683b      	ldr	r3, [r7, #0]
   12060:	4798      	blx	r3
   12062:	2800      	cmp	r0, #0
   12064:	db08      	blt.n	12078 <_write+0x3c>
			return -1;
		}
		++nChars;
   12066:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   12068:	42a5      	cmp	r5, r4
   1206a:	d1f5      	bne.n	12058 <_write+0x1c>
   1206c:	e006      	b.n	1207c <_write+0x40>
		return -1;
   1206e:	2401      	movs	r4, #1
   12070:	4264      	negs	r4, r4
   12072:	e003      	b.n	1207c <_write+0x40>
	for (; len != 0; --len) {
   12074:	0014      	movs	r4, r2
   12076:	e001      	b.n	1207c <_write+0x40>
			return -1;
   12078:	2401      	movs	r4, #1
   1207a:	4264      	negs	r4, r4
	}
	return nChars;
}
   1207c:	0020      	movs	r0, r4
   1207e:	bc04      	pop	{r2}
   12080:	4690      	mov	r8, r2
   12082:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12084:	200014d0 	.word	0x200014d0
   12088:	200014cc 	.word	0x200014cc

0001208c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1208c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1208e:	4a06      	ldr	r2, [pc, #24]	; (120a8 <_sbrk+0x1c>)
   12090:	6812      	ldr	r2, [r2, #0]
   12092:	2a00      	cmp	r2, #0
   12094:	d004      	beq.n	120a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   12096:	4a04      	ldr	r2, [pc, #16]	; (120a8 <_sbrk+0x1c>)
   12098:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1209a:	18c3      	adds	r3, r0, r3
   1209c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1209e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   120a0:	4902      	ldr	r1, [pc, #8]	; (120ac <_sbrk+0x20>)
   120a2:	4a01      	ldr	r2, [pc, #4]	; (120a8 <_sbrk+0x1c>)
   120a4:	6011      	str	r1, [r2, #0]
   120a6:	e7f6      	b.n	12096 <_sbrk+0xa>
   120a8:	20000348 	.word	0x20000348
   120ac:	20003630 	.word	0x20003630

000120b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   120b0:	2001      	movs	r0, #1
   120b2:	4240      	negs	r0, r0
   120b4:	4770      	bx	lr

000120b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   120b6:	2380      	movs	r3, #128	; 0x80
   120b8:	019b      	lsls	r3, r3, #6
   120ba:	604b      	str	r3, [r1, #4]

	return 0;
}
   120bc:	2000      	movs	r0, #0
   120be:	4770      	bx	lr

000120c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   120c0:	2001      	movs	r0, #1
   120c2:	4770      	bx	lr

000120c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   120c4:	2000      	movs	r0, #0
   120c6:	4770      	bx	lr

000120c8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   120c8:	b530      	push	{r4, r5, lr}
   120ca:	b087      	sub	sp, #28
   120cc:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   120ce:	aa01      	add	r2, sp, #4
   120d0:	23a0      	movs	r3, #160	; 0xa0
   120d2:	011b      	lsls	r3, r3, #4
   120d4:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   120d6:	2300      	movs	r3, #0
   120d8:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   120da:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   120dc:	21fa      	movs	r1, #250	; 0xfa
   120de:	00c9      	lsls	r1, r1, #3
   120e0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   120e2:	2101      	movs	r1, #1
   120e4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   120e6:	2004      	movs	r0, #4
   120e8:	7210      	strb	r0, [r2, #8]
   120ea:	7253      	strb	r3, [r2, #9]
   120ec:	7293      	strb	r3, [r2, #10]
   120ee:	72d3      	strb	r3, [r2, #11]
   120f0:	7311      	strb	r1, [r2, #12]
   120f2:	7351      	strb	r1, [r2, #13]
   120f4:	4b14      	ldr	r3, [pc, #80]	; (12148 <disk_initialize+0x80>)
   120f6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   120f8:	2306      	movs	r3, #6
   120fa:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   120fc:	4d13      	ldr	r5, [pc, #76]	; (1214c <disk_initialize+0x84>)
   120fe:	4914      	ldr	r1, [pc, #80]	; (12150 <disk_initialize+0x88>)
   12100:	0028      	movs	r0, r5
   12102:	4b14      	ldr	r3, [pc, #80]	; (12154 <disk_initialize+0x8c>)
   12104:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   12106:	0028      	movs	r0, r5
   12108:	4b13      	ldr	r3, [pc, #76]	; (12158 <disk_initialize+0x90>)
   1210a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1210c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1210e:	2c01      	cmp	r4, #1
   12110:	d901      	bls.n	12116 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   12112:	b007      	add	sp, #28
   12114:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   12116:	0020      	movs	r0, r4
   12118:	4b10      	ldr	r3, [pc, #64]	; (1215c <disk_initialize+0x94>)
   1211a:	4798      	blx	r3
   1211c:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1211e:	2803      	cmp	r0, #3
   12120:	d106      	bne.n	12130 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   12122:	0020      	movs	r0, r4
   12124:	4b0d      	ldr	r3, [pc, #52]	; (1215c <disk_initialize+0x94>)
   12126:	4798      	blx	r3
   12128:	0003      	movs	r3, r0
		return STA_NOINIT;
   1212a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1212c:	2b03      	cmp	r3, #3
   1212e:	d0f0      	beq.n	12112 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   12130:	2b00      	cmp	r3, #0
   12132:	d106      	bne.n	12142 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   12134:	0020      	movs	r0, r4
   12136:	4b0a      	ldr	r3, [pc, #40]	; (12160 <disk_initialize+0x98>)
   12138:	4798      	blx	r3
	return 0;
   1213a:	1e43      	subs	r3, r0, #1
   1213c:	4198      	sbcs	r0, r3
   1213e:	0080      	lsls	r0, r0, #2
   12140:	e7e7      	b.n	12112 <disk_initialize+0x4a>
		return STA_NOINIT;
   12142:	2001      	movs	r0, #1
   12144:	e7e5      	b.n	12112 <disk_initialize+0x4a>
   12146:	46c0      	nop			; (mov r8, r8)
   12148:	000007de 	.word	0x000007de
   1214c:	200014d4 	.word	0x200014d4
   12150:	40001400 	.word	0x40001400
   12154:	0000fe8d 	.word	0x0000fe8d
   12158:	0000fd29 	.word	0x0000fd29
   1215c:	0000f9f9 	.word	0x0000f9f9
   12160:	0000fa35 	.word	0x0000fa35

00012164 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   12164:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   12166:	4b05      	ldr	r3, [pc, #20]	; (1217c <disk_status+0x18>)
   12168:	4798      	blx	r3
   1216a:	1e03      	subs	r3, r0, #0
   1216c:	d004      	beq.n	12178 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1216e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   12170:	2b02      	cmp	r3, #2
   12172:	d000      	beq.n	12176 <disk_status+0x12>
	default:
		return STA_NOINIT;
   12174:	3802      	subs	r0, #2
	}
}
   12176:	bd10      	pop	{r4, pc}
		return 0;
   12178:	2000      	movs	r0, #0
   1217a:	e7fc      	b.n	12176 <disk_status+0x12>
   1217c:	0000f9f9 	.word	0x0000f9f9

00012180 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   12180:	b5f0      	push	{r4, r5, r6, r7, lr}
   12182:	46de      	mov	lr, fp
   12184:	464f      	mov	r7, r9
   12186:	4646      	mov	r6, r8
   12188:	b5c0      	push	{r6, r7, lr}
   1218a:	b084      	sub	sp, #16
   1218c:	9001      	str	r0, [sp, #4]
   1218e:	000d      	movs	r5, r1
   12190:	0014      	movs	r4, r2
   12192:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   12194:	4b18      	ldr	r3, [pc, #96]	; (121f8 <disk_read+0x78>)
   12196:	4798      	blx	r3
   12198:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1219a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1219c:	2e00      	cmp	r6, #0
   1219e:	d105      	bne.n	121ac <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   121a0:	b004      	add	sp, #16
   121a2:	bc1c      	pop	{r2, r3, r4}
   121a4:	4690      	mov	r8, r2
   121a6:	4699      	mov	r9, r3
   121a8:	46a3      	mov	fp, r4
   121aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   121ac:	a903      	add	r1, sp, #12
   121ae:	9801      	ldr	r0, [sp, #4]
   121b0:	4b12      	ldr	r3, [pc, #72]	; (121fc <disk_read+0x7c>)
   121b2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   121b4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   121b6:	0032      	movs	r2, r6
   121b8:	437a      	muls	r2, r7
   121ba:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   121bc:	9b03      	ldr	r3, [sp, #12]
   121be:	3301      	adds	r3, #1
   121c0:	4373      	muls	r3, r6
		return RES_PARERR;
   121c2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   121c4:	429a      	cmp	r2, r3
   121c6:	d8eb      	bhi.n	121a0 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   121c8:	2f00      	cmp	r7, #0
   121ca:	d011      	beq.n	121f0 <disk_read+0x70>
   121cc:	0273      	lsls	r3, r6, #9
   121ce:	4698      	mov	r8, r3
   121d0:	1c7b      	adds	r3, r7, #1
   121d2:	469b      	mov	fp, r3
   121d4:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   121d6:	4e0a      	ldr	r6, [pc, #40]	; (12200 <disk_read+0x80>)
   121d8:	002a      	movs	r2, r5
   121da:	0021      	movs	r1, r4
   121dc:	9801      	ldr	r0, [sp, #4]
   121de:	47b0      	blx	r6
   121e0:	2800      	cmp	r0, #0
   121e2:	d107      	bne.n	121f4 <disk_read+0x74>
   121e4:	3701      	adds	r7, #1
   121e6:	444c      	add	r4, r9
   121e8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   121ea:	455f      	cmp	r7, fp
   121ec:	d1f4      	bne.n	121d8 <disk_read+0x58>
   121ee:	e7d7      	b.n	121a0 <disk_read+0x20>
	return RES_OK;
   121f0:	2000      	movs	r0, #0
   121f2:	e7d5      	b.n	121a0 <disk_read+0x20>
			return RES_ERROR;
   121f4:	2001      	movs	r0, #1
   121f6:	e7d3      	b.n	121a0 <disk_read+0x20>
   121f8:	0000fa2d 	.word	0x0000fa2d
   121fc:	0000fa11 	.word	0x0000fa11
   12200:	0000fa4d 	.word	0x0000fa4d

00012204 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   12204:	b5f0      	push	{r4, r5, r6, r7, lr}
   12206:	46de      	mov	lr, fp
   12208:	464f      	mov	r7, r9
   1220a:	4646      	mov	r6, r8
   1220c:	b5c0      	push	{r6, r7, lr}
   1220e:	b084      	sub	sp, #16
   12210:	9001      	str	r0, [sp, #4]
   12212:	000d      	movs	r5, r1
   12214:	0014      	movs	r4, r2
   12216:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   12218:	4b18      	ldr	r3, [pc, #96]	; (1227c <disk_write+0x78>)
   1221a:	4798      	blx	r3
   1221c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1221e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   12220:	2e00      	cmp	r6, #0
   12222:	d105      	bne.n	12230 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   12224:	b004      	add	sp, #16
   12226:	bc1c      	pop	{r2, r3, r4}
   12228:	4690      	mov	r8, r2
   1222a:	4699      	mov	r9, r3
   1222c:	46a3      	mov	fp, r4
   1222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   12230:	a903      	add	r1, sp, #12
   12232:	9801      	ldr	r0, [sp, #4]
   12234:	4b12      	ldr	r3, [pc, #72]	; (12280 <disk_write+0x7c>)
   12236:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   12238:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1223a:	0032      	movs	r2, r6
   1223c:	437a      	muls	r2, r7
   1223e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   12240:	9b03      	ldr	r3, [sp, #12]
   12242:	3301      	adds	r3, #1
   12244:	4373      	muls	r3, r6
		return RES_PARERR;
   12246:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   12248:	429a      	cmp	r2, r3
   1224a:	d8eb      	bhi.n	12224 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1224c:	2f00      	cmp	r7, #0
   1224e:	d011      	beq.n	12274 <disk_write+0x70>
   12250:	0273      	lsls	r3, r6, #9
   12252:	4698      	mov	r8, r3
   12254:	1c7b      	adds	r3, r7, #1
   12256:	469b      	mov	fp, r3
   12258:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1225a:	4e0a      	ldr	r6, [pc, #40]	; (12284 <disk_write+0x80>)
   1225c:	002a      	movs	r2, r5
   1225e:	0021      	movs	r1, r4
   12260:	9801      	ldr	r0, [sp, #4]
   12262:	47b0      	blx	r6
   12264:	2800      	cmp	r0, #0
   12266:	d107      	bne.n	12278 <disk_write+0x74>
   12268:	3701      	adds	r7, #1
   1226a:	444c      	add	r4, r9
   1226c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1226e:	455f      	cmp	r7, fp
   12270:	d1f4      	bne.n	1225c <disk_write+0x58>
   12272:	e7d7      	b.n	12224 <disk_write+0x20>
	return RES_OK;
   12274:	2000      	movs	r0, #0
   12276:	e7d5      	b.n	12224 <disk_write+0x20>
			return RES_ERROR;
   12278:	2001      	movs	r0, #1
   1227a:	e7d3      	b.n	12224 <disk_write+0x20>
   1227c:	0000fa2d 	.word	0x0000fa2d
   12280:	0000fa11 	.word	0x0000fa11
   12284:	0000fa6d 	.word	0x0000fa6d

00012288 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   12288:	b510      	push	{r4, lr}
   1228a:	b082      	sub	sp, #8
   1228c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1228e:	2901      	cmp	r1, #1
   12290:	d00b      	beq.n	122aa <disk_ioctl+0x22>
   12292:	2900      	cmp	r1, #0
   12294:	d020      	beq.n	122d8 <disk_ioctl+0x50>
   12296:	2902      	cmp	r1, #2
   12298:	d00f      	beq.n	122ba <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1229a:	2004      	movs	r0, #4
	switch (ctrl) {
   1229c:	2903      	cmp	r1, #3
   1229e:	d102      	bne.n	122a6 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   122a0:	2301      	movs	r3, #1
   122a2:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   122a4:	2000      	movs	r0, #0
	}

	return res;
}
   122a6:	b002      	add	sp, #8
   122a8:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   122aa:	a901      	add	r1, sp, #4
   122ac:	4b0e      	ldr	r3, [pc, #56]	; (122e8 <disk_ioctl+0x60>)
   122ae:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   122b0:	9b01      	ldr	r3, [sp, #4]
   122b2:	3301      	adds	r3, #1
   122b4:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   122b6:	2000      	movs	r0, #0
	break;
   122b8:	e7f5      	b.n	122a6 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   122ba:	4b0c      	ldr	r3, [pc, #48]	; (122ec <disk_ioctl+0x64>)
   122bc:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   122be:	1e43      	subs	r3, r0, #1
   122c0:	b2db      	uxtb	r3, r3
   122c2:	2b01      	cmp	r3, #1
   122c4:	d904      	bls.n	122d0 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   122c6:	1f03      	subs	r3, r0, #4
   122c8:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   122ca:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   122cc:	4213      	tst	r3, r2
   122ce:	d1ea      	bne.n	122a6 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   122d0:	2300      	movs	r3, #0
   122d2:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   122d4:	2000      	movs	r0, #0
	break;
   122d6:	e7e6      	b.n	122a6 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   122d8:	4b05      	ldr	r3, [pc, #20]	; (122f0 <disk_ioctl+0x68>)
   122da:	4798      	blx	r3
   122dc:	2800      	cmp	r0, #0
   122de:	d001      	beq.n	122e4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   122e0:	2003      	movs	r0, #3
   122e2:	e7e0      	b.n	122a6 <disk_ioctl+0x1e>
			res = RES_OK;
   122e4:	2000      	movs	r0, #0
   122e6:	e7de      	b.n	122a6 <disk_ioctl+0x1e>
   122e8:	0000fa11 	.word	0x0000fa11
   122ec:	0000fa2d 	.word	0x0000fa2d
   122f0:	0000f9f9 	.word	0x0000f9f9

000122f4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   122f4:	b500      	push	{lr}
   122f6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   122f8:	4669      	mov	r1, sp
   122fa:	480f      	ldr	r0, [pc, #60]	; (12338 <get_fattime+0x44>)
   122fc:	4b0f      	ldr	r3, [pc, #60]	; (1233c <get_fattime+0x48>)
   122fe:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   12300:	466b      	mov	r3, sp
   12302:	7958      	ldrb	r0, [r3, #5]
   12304:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   12306:	791b      	ldrb	r3, [r3, #4]
   12308:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1230a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1230c:	466b      	mov	r3, sp
   1230e:	789b      	ldrb	r3, [r3, #2]
   12310:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   12312:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   12314:	466b      	mov	r3, sp
   12316:	785b      	ldrb	r3, [r3, #1]
   12318:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1231a:	4318      	orrs	r0, r3
   1231c:	466b      	mov	r3, sp
   1231e:	781b      	ldrb	r3, [r3, #0]
   12320:	085b      	lsrs	r3, r3, #1
   12322:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   12324:	466b      	mov	r3, sp
   12326:	88db      	ldrh	r3, [r3, #6]
   12328:	4a05      	ldr	r2, [pc, #20]	; (12340 <get_fattime+0x4c>)
   1232a:	4694      	mov	ip, r2
   1232c:	4463      	add	r3, ip
   1232e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   12330:	4318      	orrs	r0, r3

	return ul_time;
}
   12332:	b003      	add	sp, #12
   12334:	bd00      	pop	{pc}
   12336:	46c0      	nop			; (mov r8, r8)
   12338:	200014d4 	.word	0x200014d4
   1233c:	0000fe15 	.word	0x0000fe15
   12340:	fffff844 	.word	0xfffff844

00012344 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   12344:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   12346:	2a00      	cmp	r2, #0
   12348:	d005      	beq.n	12356 <mem_cpy+0x12>
   1234a:	2300      	movs	r3, #0
		*d++ = *s++;
   1234c:	5ccc      	ldrb	r4, [r1, r3]
   1234e:	54c4      	strb	r4, [r0, r3]
   12350:	3301      	adds	r3, #1
	while (cnt--)
   12352:	4293      	cmp	r3, r2
   12354:	d1fa      	bne.n	1234c <mem_cpy+0x8>
}
   12356:	bd10      	pop	{r4, pc}

00012358 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   12358:	2a00      	cmp	r2, #0
   1235a:	d005      	beq.n	12368 <mem_set+0x10>
   1235c:	0003      	movs	r3, r0
   1235e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   12360:	7019      	strb	r1, [r3, #0]
   12362:	3301      	adds	r3, #1
	while (cnt--)
   12364:	4293      	cmp	r3, r2
   12366:	d1fb      	bne.n	12360 <mem_set+0x8>
}
   12368:	4770      	bx	lr

0001236a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1236a:	0002      	movs	r2, r0
	clst -= 2;
   1236c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1236e:	6983      	ldr	r3, [r0, #24]
   12370:	3b02      	subs	r3, #2
   12372:	2000      	movs	r0, #0
   12374:	4299      	cmp	r1, r3
   12376:	d203      	bcs.n	12380 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   12378:	7890      	ldrb	r0, [r2, #2]
   1237a:	4341      	muls	r1, r0
   1237c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1237e:	1808      	adds	r0, r1, r0
}
   12380:	4770      	bx	lr

00012382 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   12382:	0002      	movs	r2, r0
   12384:	0001      	movs	r1, r0
   12386:	310b      	adds	r1, #11
	BYTE sum = 0;
   12388:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1238a:	0843      	lsrs	r3, r0, #1
   1238c:	01c0      	lsls	r0, r0, #7
   1238e:	4303      	orrs	r3, r0
   12390:	7810      	ldrb	r0, [r2, #0]
   12392:	1818      	adds	r0, r3, r0
   12394:	b2c0      	uxtb	r0, r0
   12396:	3201      	adds	r2, #1
   12398:	428a      	cmp	r2, r1
   1239a:	d1f6      	bne.n	1238a <sum_sfn+0x8>
	return sum;
}
   1239c:	4770      	bx	lr
	...

000123a0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   123a0:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   123a2:	2800      	cmp	r0, #0
   123a4:	d010      	beq.n	123c8 <validate+0x28>
   123a6:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   123a8:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   123aa:	2a00      	cmp	r2, #0
   123ac:	d101      	bne.n	123b2 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   123ae:	0018      	movs	r0, r3
   123b0:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   123b2:	88c2      	ldrh	r2, [r0, #6]
   123b4:	428a      	cmp	r2, r1
   123b6:	d1fa      	bne.n	123ae <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   123b8:	7840      	ldrb	r0, [r0, #1]
   123ba:	4b04      	ldr	r3, [pc, #16]	; (123cc <validate+0x2c>)
   123bc:	4798      	blx	r3
		return FR_NOT_READY;
   123be:	2303      	movs	r3, #3
	return FR_OK;
   123c0:	07c0      	lsls	r0, r0, #31
   123c2:	17c0      	asrs	r0, r0, #31
   123c4:	4003      	ands	r3, r0
   123c6:	e7f2      	b.n	123ae <validate+0xe>
		return FR_INVALID_OBJECT;
   123c8:	2309      	movs	r3, #9
   123ca:	e7f0      	b.n	123ae <validate+0xe>
   123cc:	00012165 	.word	0x00012165

000123d0 <check_fs>:
{
   123d0:	b570      	push	{r4, r5, r6, lr}
   123d2:	0004      	movs	r4, r0
   123d4:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   123d6:	0001      	movs	r1, r0
   123d8:	3130      	adds	r1, #48	; 0x30
   123da:	7840      	ldrb	r0, [r0, #1]
   123dc:	2301      	movs	r3, #1
   123de:	4d1f      	ldr	r5, [pc, #124]	; (1245c <check_fs+0x8c>)
   123e0:	47a8      	blx	r5
		return 3;
   123e2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   123e4:	2800      	cmp	r0, #0
   123e6:	d001      	beq.n	123ec <check_fs+0x1c>
}
   123e8:	0018      	movs	r0, r3
   123ea:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   123ec:	4b1c      	ldr	r3, [pc, #112]	; (12460 <check_fs+0x90>)
   123ee:	5ce3      	ldrb	r3, [r4, r3]
   123f0:	021b      	lsls	r3, r3, #8
   123f2:	4a1c      	ldr	r2, [pc, #112]	; (12464 <check_fs+0x94>)
   123f4:	5ca2      	ldrb	r2, [r4, r2]
   123f6:	431a      	orrs	r2, r3
   123f8:	491b      	ldr	r1, [pc, #108]	; (12468 <check_fs+0x98>)
   123fa:	b212      	sxth	r2, r2
		return 2;
   123fc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   123fe:	428a      	cmp	r2, r1
   12400:	d1f2      	bne.n	123e8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   12402:	3367      	adds	r3, #103	; 0x67
   12404:	5ce3      	ldrb	r3, [r4, r3]
   12406:	061b      	lsls	r3, r3, #24
   12408:	2268      	movs	r2, #104	; 0x68
   1240a:	5ca2      	ldrb	r2, [r4, r2]
   1240c:	0412      	lsls	r2, r2, #16
   1240e:	4313      	orrs	r3, r2
   12410:	2266      	movs	r2, #102	; 0x66
   12412:	5ca2      	ldrb	r2, [r4, r2]
   12414:	4313      	orrs	r3, r2
   12416:	2267      	movs	r2, #103	; 0x67
   12418:	5ca2      	ldrb	r2, [r4, r2]
   1241a:	0212      	lsls	r2, r2, #8
   1241c:	4313      	orrs	r3, r2
   1241e:	021b      	lsls	r3, r3, #8
   12420:	0a1b      	lsrs	r3, r3, #8
   12422:	4a12      	ldr	r2, [pc, #72]	; (1246c <check_fs+0x9c>)
   12424:	4293      	cmp	r3, r2
   12426:	d016      	beq.n	12456 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   12428:	2385      	movs	r3, #133	; 0x85
   1242a:	5ce3      	ldrb	r3, [r4, r3]
   1242c:	061b      	lsls	r3, r3, #24
   1242e:	2284      	movs	r2, #132	; 0x84
   12430:	5ca2      	ldrb	r2, [r4, r2]
   12432:	0412      	lsls	r2, r2, #16
   12434:	4313      	orrs	r3, r2
   12436:	2282      	movs	r2, #130	; 0x82
   12438:	5ca2      	ldrb	r2, [r4, r2]
   1243a:	4313      	orrs	r3, r2
   1243c:	2283      	movs	r2, #131	; 0x83
   1243e:	5ca2      	ldrb	r2, [r4, r2]
   12440:	0212      	lsls	r2, r2, #8
   12442:	4313      	orrs	r3, r2
   12444:	021b      	lsls	r3, r3, #8
   12446:	0a1b      	lsrs	r3, r3, #8
   12448:	4a09      	ldr	r2, [pc, #36]	; (12470 <check_fs+0xa0>)
   1244a:	4694      	mov	ip, r2
   1244c:	4463      	add	r3, ip
   1244e:	1e58      	subs	r0, r3, #1
   12450:	4183      	sbcs	r3, r0
		return 3;
   12452:	b2db      	uxtb	r3, r3
   12454:	e7c8      	b.n	123e8 <check_fs+0x18>
		return 0;
   12456:	2300      	movs	r3, #0
   12458:	e7c6      	b.n	123e8 <check_fs+0x18>
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00012181 	.word	0x00012181
   12460:	0000022f 	.word	0x0000022f
   12464:	0000022e 	.word	0x0000022e
   12468:	ffffaa55 	.word	0xffffaa55
   1246c:	00544146 	.word	0x00544146
   12470:	ffabbeba 	.word	0xffabbeba

00012474 <chk_mounted>:
{
   12474:	b5f0      	push	{r4, r5, r6, r7, lr}
   12476:	46d6      	mov	lr, sl
   12478:	464f      	mov	r7, r9
   1247a:	4646      	mov	r6, r8
   1247c:	b5c0      	push	{r6, r7, lr}
   1247e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12480:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   12482:	781c      	ldrb	r4, [r3, #0]
   12484:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   12486:	2c09      	cmp	r4, #9
   12488:	d80e      	bhi.n	124a8 <chk_mounted+0x34>
   1248a:	785a      	ldrb	r2, [r3, #1]
   1248c:	2a3a      	cmp	r2, #58	; 0x3a
   1248e:	d001      	beq.n	12494 <chk_mounted+0x20>
   12490:	2400      	movs	r4, #0
   12492:	e00a      	b.n	124aa <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   12494:	3302      	adds	r3, #2
   12496:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   12498:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1249a:	2c07      	cmp	r4, #7
   1249c:	d905      	bls.n	124aa <chk_mounted+0x36>
}
   1249e:	bc1c      	pop	{r2, r3, r4}
   124a0:	4690      	mov	r8, r2
   124a2:	4699      	mov	r9, r3
   124a4:	46a2      	mov	sl, r4
   124a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124a8:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   124aa:	00a3      	lsls	r3, r4, #2
   124ac:	4ac5      	ldr	r2, [pc, #788]	; (127c4 <chk_mounted+0x350>)
   124ae:	589e      	ldr	r6, [r3, r2]
   124b0:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   124b2:	2e00      	cmp	r6, #0
   124b4:	d100      	bne.n	124b8 <chk_mounted+0x44>
   124b6:	e0e8      	b.n	1268a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   124b8:	7833      	ldrb	r3, [r6, #0]
   124ba:	2b00      	cmp	r3, #0
   124bc:	d00d      	beq.n	124da <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   124be:	7870      	ldrb	r0, [r6, #1]
   124c0:	4bc1      	ldr	r3, [pc, #772]	; (127c8 <chk_mounted+0x354>)
   124c2:	4798      	blx	r3
   124c4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   124c6:	07c2      	lsls	r2, r0, #31
   124c8:	d407      	bmi.n	124da <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   124ca:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   124cc:	2d00      	cmp	r5, #0
   124ce:	d0e6      	beq.n	1249e <chk_mounted+0x2a>
   124d0:	075b      	lsls	r3, r3, #29
   124d2:	d400      	bmi.n	124d6 <chk_mounted+0x62>
   124d4:	e0db      	b.n	1268e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   124d6:	300a      	adds	r0, #10
   124d8:	e7e1      	b.n	1249e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   124da:	2300      	movs	r3, #0
   124dc:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   124de:	b2e0      	uxtb	r0, r4
   124e0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   124e2:	4bba      	ldr	r3, [pc, #744]	; (127cc <chk_mounted+0x358>)
   124e4:	4798      	blx	r3
   124e6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   124e8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   124ea:	07da      	lsls	r2, r3, #31
   124ec:	d4d7      	bmi.n	1249e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   124ee:	2d00      	cmp	r5, #0
   124f0:	d002      	beq.n	124f8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   124f2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   124f4:	075b      	lsls	r3, r3, #29
   124f6:	d4d2      	bmi.n	1249e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   124f8:	2100      	movs	r1, #0
   124fa:	0030      	movs	r0, r6
   124fc:	4bb4      	ldr	r3, [pc, #720]	; (127d0 <chk_mounted+0x35c>)
   124fe:	4798      	blx	r3
   12500:	0003      	movs	r3, r0
   12502:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   12504:	2801      	cmp	r0, #1
   12506:	d100      	bne.n	1250a <chk_mounted+0x96>
   12508:	e09a      	b.n	12640 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1250a:	2b03      	cmp	r3, #3
   1250c:	d100      	bne.n	12510 <chk_mounted+0x9c>
   1250e:	e0c0      	b.n	12692 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   12510:	200d      	movs	r0, #13
   12512:	2b00      	cmp	r3, #0
   12514:	d1c3      	bne.n	1249e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   12516:	333c      	adds	r3, #60	; 0x3c
   12518:	5cf2      	ldrb	r2, [r6, r3]
   1251a:	0212      	lsls	r2, r2, #8
   1251c:	3b01      	subs	r3, #1
   1251e:	5cf3      	ldrb	r3, [r6, r3]
   12520:	4313      	orrs	r3, r2
   12522:	2280      	movs	r2, #128	; 0x80
   12524:	0092      	lsls	r2, r2, #2
   12526:	b21b      	sxth	r3, r3
   12528:	4293      	cmp	r3, r2
   1252a:	d1b8      	bne.n	1249e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1252c:	2347      	movs	r3, #71	; 0x47
   1252e:	5cf3      	ldrb	r3, [r6, r3]
   12530:	021b      	lsls	r3, r3, #8
   12532:	3abb      	subs	r2, #187	; 0xbb
   12534:	3aff      	subs	r2, #255	; 0xff
   12536:	5cb5      	ldrb	r5, [r6, r2]
   12538:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1253a:	d10d      	bne.n	12558 <chk_mounted+0xe4>
   1253c:	2357      	movs	r3, #87	; 0x57
   1253e:	5cf5      	ldrb	r5, [r6, r3]
   12540:	062d      	lsls	r5, r5, #24
   12542:	3b01      	subs	r3, #1
   12544:	5cf3      	ldrb	r3, [r6, r3]
   12546:	041b      	lsls	r3, r3, #16
   12548:	431d      	orrs	r5, r3
   1254a:	2354      	movs	r3, #84	; 0x54
   1254c:	5cf3      	ldrb	r3, [r6, r3]
   1254e:	431d      	orrs	r5, r3
   12550:	2355      	movs	r3, #85	; 0x55
   12552:	5cf3      	ldrb	r3, [r6, r3]
   12554:	021b      	lsls	r3, r3, #8
   12556:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   12558:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1255a:	2340      	movs	r3, #64	; 0x40
   1255c:	5cf2      	ldrb	r2, [r6, r3]
   1255e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   12560:	1e53      	subs	r3, r2, #1
   12562:	200d      	movs	r0, #13
   12564:	2b01      	cmp	r3, #1
   12566:	d89a      	bhi.n	1249e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   12568:	233d      	movs	r3, #61	; 0x3d
   1256a:	5cf1      	ldrb	r1, [r6, r3]
   1256c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1256e:	2900      	cmp	r1, #0
   12570:	d095      	beq.n	1249e <chk_mounted+0x2a>
   12572:	1e4b      	subs	r3, r1, #1
   12574:	4219      	tst	r1, r3
   12576:	d192      	bne.n	1249e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12578:	2342      	movs	r3, #66	; 0x42
   1257a:	5cf3      	ldrb	r3, [r6, r3]
   1257c:	021b      	lsls	r3, r3, #8
   1257e:	3034      	adds	r0, #52	; 0x34
   12580:	5c30      	ldrb	r0, [r6, r0]
   12582:	4318      	orrs	r0, r3
   12584:	4680      	mov	r8, r0
   12586:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12588:	200d      	movs	r0, #13
   1258a:	4643      	mov	r3, r8
   1258c:	071b      	lsls	r3, r3, #28
   1258e:	d000      	beq.n	12592 <chk_mounted+0x11e>
   12590:	e785      	b.n	1249e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   12592:	2344      	movs	r3, #68	; 0x44
   12594:	5cf3      	ldrb	r3, [r6, r3]
   12596:	021b      	lsls	r3, r3, #8
   12598:	3036      	adds	r0, #54	; 0x36
   1259a:	5c30      	ldrb	r0, [r6, r0]
   1259c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1259e:	d10d      	bne.n	125bc <chk_mounted+0x148>
   125a0:	3353      	adds	r3, #83	; 0x53
   125a2:	5cf3      	ldrb	r3, [r6, r3]
   125a4:	061b      	lsls	r3, r3, #24
   125a6:	2052      	movs	r0, #82	; 0x52
   125a8:	5c30      	ldrb	r0, [r6, r0]
   125aa:	0400      	lsls	r0, r0, #16
   125ac:	4303      	orrs	r3, r0
   125ae:	2050      	movs	r0, #80	; 0x50
   125b0:	5c30      	ldrb	r0, [r6, r0]
   125b2:	4303      	orrs	r3, r0
   125b4:	2051      	movs	r0, #81	; 0x51
   125b6:	5c30      	ldrb	r0, [r6, r0]
   125b8:	0200      	lsls	r0, r0, #8
   125ba:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   125bc:	203f      	movs	r0, #63	; 0x3f
   125be:	5c30      	ldrb	r0, [r6, r0]
   125c0:	0200      	lsls	r0, r0, #8
   125c2:	273e      	movs	r7, #62	; 0x3e
   125c4:	5df7      	ldrb	r7, [r6, r7]
   125c6:	4307      	orrs	r7, r0
   125c8:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   125ca:	200d      	movs	r0, #13
   125cc:	2f00      	cmp	r7, #0
   125ce:	d100      	bne.n	125d2 <chk_mounted+0x15e>
   125d0:	e765      	b.n	1249e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   125d2:	436a      	muls	r2, r5
   125d4:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   125d6:	4642      	mov	r2, r8
   125d8:	0917      	lsrs	r7, r2, #4
   125da:	4457      	add	r7, sl
   125dc:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   125de:	42bb      	cmp	r3, r7
   125e0:	d200      	bcs.n	125e4 <chk_mounted+0x170>
   125e2:	e75c      	b.n	1249e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   125e4:	1bd8      	subs	r0, r3, r7
   125e6:	4b7b      	ldr	r3, [pc, #492]	; (127d4 <chk_mounted+0x360>)
   125e8:	4798      	blx	r3
   125ea:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   125ec:	200d      	movs	r0, #13
   125ee:	2b00      	cmp	r3, #0
   125f0:	d100      	bne.n	125f4 <chk_mounted+0x180>
   125f2:	e754      	b.n	1249e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   125f4:	4a78      	ldr	r2, [pc, #480]	; (127d8 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   125f6:	429a      	cmp	r2, r3
   125f8:	4192      	sbcs	r2, r2
   125fa:	4252      	negs	r2, r2
   125fc:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   125fe:	4977      	ldr	r1, [pc, #476]	; (127dc <chk_mounted+0x368>)
   12600:	428b      	cmp	r3, r1
   12602:	d848      	bhi.n	12696 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12604:	3302      	adds	r3, #2
   12606:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12608:	19e7      	adds	r7, r4, r7
   1260a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1260c:	4454      	add	r4, sl
   1260e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12610:	200d      	movs	r0, #13
   12612:	4641      	mov	r1, r8
   12614:	2900      	cmp	r1, #0
   12616:	d100      	bne.n	1261a <chk_mounted+0x1a6>
   12618:	e741      	b.n	1249e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1261a:	444c      	add	r4, r9
   1261c:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1261e:	2a02      	cmp	r2, #2
   12620:	d12c      	bne.n	1267c <chk_mounted+0x208>
   12622:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12624:	496e      	ldr	r1, [pc, #440]	; (127e0 <chk_mounted+0x36c>)
   12626:	468c      	mov	ip, r1
   12628:	4463      	add	r3, ip
   1262a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   1262c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1262e:	429d      	cmp	r5, r3
   12630:	d200      	bcs.n	12634 <chk_mounted+0x1c0>
   12632:	e734      	b.n	1249e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   12634:	2301      	movs	r3, #1
   12636:	425b      	negs	r3, r3
   12638:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   1263a:	2300      	movs	r3, #0
   1263c:	60f3      	str	r3, [r6, #12]
   1263e:	e0b6      	b.n	127ae <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   12640:	33f2      	adds	r3, #242	; 0xf2
   12642:	33ff      	adds	r3, #255	; 0xff
   12644:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   12646:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   12648:	2b00      	cmp	r3, #0
   1264a:	d100      	bne.n	1264e <chk_mounted+0x1da>
   1264c:	e727      	b.n	1249e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1264e:	23fa      	movs	r3, #250	; 0xfa
   12650:	33ff      	adds	r3, #255	; 0xff
   12652:	5cf4      	ldrb	r4, [r6, r3]
   12654:	0624      	lsls	r4, r4, #24
   12656:	3b01      	subs	r3, #1
   12658:	5cf3      	ldrb	r3, [r6, r3]
   1265a:	041b      	lsls	r3, r3, #16
   1265c:	431c      	orrs	r4, r3
   1265e:	23fb      	movs	r3, #251	; 0xfb
   12660:	005b      	lsls	r3, r3, #1
   12662:	5cf3      	ldrb	r3, [r6, r3]
   12664:	431c      	orrs	r4, r3
   12666:	23f8      	movs	r3, #248	; 0xf8
   12668:	33ff      	adds	r3, #255	; 0xff
   1266a:	5cf2      	ldrb	r2, [r6, r3]
   1266c:	0212      	lsls	r2, r2, #8
   1266e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12670:	0021      	movs	r1, r4
   12672:	0030      	movs	r0, r6
   12674:	4b56      	ldr	r3, [pc, #344]	; (127d0 <chk_mounted+0x35c>)
   12676:	4798      	blx	r3
   12678:	0003      	movs	r3, r0
   1267a:	e746      	b.n	1250a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1267c:	2103      	movs	r1, #3
   1267e:	4359      	muls	r1, r3
   12680:	0849      	lsrs	r1, r1, #1
   12682:	2001      	movs	r0, #1
   12684:	4003      	ands	r3, r0
   12686:	18cb      	adds	r3, r1, r3
   12688:	e7cc      	b.n	12624 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1268a:	200c      	movs	r0, #12
   1268c:	e707      	b.n	1249e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   1268e:	2000      	movs	r0, #0
   12690:	e705      	b.n	1249e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   12692:	2001      	movs	r0, #1
   12694:	e703      	b.n	1249e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12696:	3302      	adds	r3, #2
   12698:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1269a:	19e7      	adds	r7, r4, r7
   1269c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1269e:	4652      	mov	r2, sl
   126a0:	18a2      	adds	r2, r4, r2
   126a2:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   126a4:	200d      	movs	r0, #13
   126a6:	4642      	mov	r2, r8
   126a8:	2a00      	cmp	r2, #0
   126aa:	d000      	beq.n	126ae <chk_mounted+0x23a>
   126ac:	e6f7      	b.n	1249e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   126ae:	225f      	movs	r2, #95	; 0x5f
   126b0:	5cb2      	ldrb	r2, [r6, r2]
   126b2:	0612      	lsls	r2, r2, #24
   126b4:	215e      	movs	r1, #94	; 0x5e
   126b6:	5c71      	ldrb	r1, [r6, r1]
   126b8:	0409      	lsls	r1, r1, #16
   126ba:	430a      	orrs	r2, r1
   126bc:	215c      	movs	r1, #92	; 0x5c
   126be:	5c71      	ldrb	r1, [r6, r1]
   126c0:	430a      	orrs	r2, r1
   126c2:	215d      	movs	r1, #93	; 0x5d
   126c4:	5c71      	ldrb	r1, [r6, r1]
   126c6:	0209      	lsls	r1, r1, #8
   126c8:	430a      	orrs	r2, r1
   126ca:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   126cc:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   126ce:	4a44      	ldr	r2, [pc, #272]	; (127e0 <chk_mounted+0x36c>)
   126d0:	4694      	mov	ip, r2
   126d2:	4463      	add	r3, ip
   126d4:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   126d6:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   126d8:	429d      	cmp	r5, r3
   126da:	d200      	bcs.n	126de <chk_mounted+0x26a>
   126dc:	e6df      	b.n	1249e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   126de:	2301      	movs	r3, #1
   126e0:	425b      	negs	r3, r3
   126e2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   126e4:	2300      	movs	r3, #0
   126e6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   126e8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   126ea:	3361      	adds	r3, #97	; 0x61
   126ec:	5cf3      	ldrb	r3, [r6, r3]
   126ee:	021b      	lsls	r3, r3, #8
   126f0:	2260      	movs	r2, #96	; 0x60
   126f2:	5cb2      	ldrb	r2, [r6, r2]
   126f4:	431a      	orrs	r2, r3
   126f6:	1912      	adds	r2, r2, r4
   126f8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   126fa:	0031      	movs	r1, r6
   126fc:	3130      	adds	r1, #48	; 0x30
   126fe:	7870      	ldrb	r0, [r6, #1]
   12700:	2301      	movs	r3, #1
   12702:	4c38      	ldr	r4, [pc, #224]	; (127e4 <chk_mounted+0x370>)
   12704:	47a0      	blx	r4
   12706:	2203      	movs	r2, #3
   12708:	2800      	cmp	r0, #0
   1270a:	d150      	bne.n	127ae <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1270c:	4b36      	ldr	r3, [pc, #216]	; (127e8 <chk_mounted+0x374>)
   1270e:	5cf2      	ldrb	r2, [r6, r3]
   12710:	0212      	lsls	r2, r2, #8
   12712:	4b36      	ldr	r3, [pc, #216]	; (127ec <chk_mounted+0x378>)
   12714:	5cf3      	ldrb	r3, [r6, r3]
   12716:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12718:	4935      	ldr	r1, [pc, #212]	; (127f0 <chk_mounted+0x37c>)
   1271a:	b21b      	sxth	r3, r3
   1271c:	2203      	movs	r2, #3
   1271e:	428b      	cmp	r3, r1
   12720:	d145      	bne.n	127ae <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   12722:	2333      	movs	r3, #51	; 0x33
   12724:	5cf3      	ldrb	r3, [r6, r3]
   12726:	061b      	lsls	r3, r3, #24
   12728:	322f      	adds	r2, #47	; 0x2f
   1272a:	5cb2      	ldrb	r2, [r6, r2]
   1272c:	0412      	lsls	r2, r2, #16
   1272e:	4313      	orrs	r3, r2
   12730:	2230      	movs	r2, #48	; 0x30
   12732:	5cb2      	ldrb	r2, [r6, r2]
   12734:	4313      	orrs	r3, r2
   12736:	2231      	movs	r2, #49	; 0x31
   12738:	5cb2      	ldrb	r2, [r6, r2]
   1273a:	0212      	lsls	r2, r2, #8
   1273c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1273e:	492d      	ldr	r1, [pc, #180]	; (127f4 <chk_mounted+0x380>)
   12740:	2203      	movs	r2, #3
   12742:	428b      	cmp	r3, r1
   12744:	d133      	bne.n	127ae <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   12746:	4b2c      	ldr	r3, [pc, #176]	; (127f8 <chk_mounted+0x384>)
   12748:	5cf3      	ldrb	r3, [r6, r3]
   1274a:	061b      	lsls	r3, r3, #24
   1274c:	4a2b      	ldr	r2, [pc, #172]	; (127fc <chk_mounted+0x388>)
   1274e:	5cb2      	ldrb	r2, [r6, r2]
   12750:	0412      	lsls	r2, r2, #16
   12752:	4313      	orrs	r3, r2
   12754:	2285      	movs	r2, #133	; 0x85
   12756:	0092      	lsls	r2, r2, #2
   12758:	5cb2      	ldrb	r2, [r6, r2]
   1275a:	4313      	orrs	r3, r2
   1275c:	4a28      	ldr	r2, [pc, #160]	; (12800 <chk_mounted+0x38c>)
   1275e:	5cb2      	ldrb	r2, [r6, r2]
   12760:	0212      	lsls	r2, r2, #8
   12762:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   12764:	4927      	ldr	r1, [pc, #156]	; (12804 <chk_mounted+0x390>)
   12766:	2203      	movs	r2, #3
   12768:	428b      	cmp	r3, r1
   1276a:	d120      	bne.n	127ae <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1276c:	4b26      	ldr	r3, [pc, #152]	; (12808 <chk_mounted+0x394>)
   1276e:	5cf3      	ldrb	r3, [r6, r3]
   12770:	061b      	lsls	r3, r3, #24
   12772:	4a26      	ldr	r2, [pc, #152]	; (1280c <chk_mounted+0x398>)
   12774:	5cb2      	ldrb	r2, [r6, r2]
   12776:	0412      	lsls	r2, r2, #16
   12778:	4313      	orrs	r3, r2
   1277a:	2287      	movs	r2, #135	; 0x87
   1277c:	0092      	lsls	r2, r2, #2
   1277e:	5cb2      	ldrb	r2, [r6, r2]
   12780:	4313      	orrs	r3, r2
   12782:	4a23      	ldr	r2, [pc, #140]	; (12810 <chk_mounted+0x39c>)
   12784:	5cb2      	ldrb	r2, [r6, r2]
   12786:	0212      	lsls	r2, r2, #8
   12788:	4313      	orrs	r3, r2
   1278a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1278c:	4b21      	ldr	r3, [pc, #132]	; (12814 <chk_mounted+0x3a0>)
   1278e:	5cf3      	ldrb	r3, [r6, r3]
   12790:	061b      	lsls	r3, r3, #24
   12792:	4a21      	ldr	r2, [pc, #132]	; (12818 <chk_mounted+0x3a4>)
   12794:	5cb2      	ldrb	r2, [r6, r2]
   12796:	0412      	lsls	r2, r2, #16
   12798:	4313      	orrs	r3, r2
   1279a:	2286      	movs	r2, #134	; 0x86
   1279c:	0092      	lsls	r2, r2, #2
   1279e:	5cb2      	ldrb	r2, [r6, r2]
   127a0:	4313      	orrs	r3, r2
   127a2:	4a1e      	ldr	r2, [pc, #120]	; (1281c <chk_mounted+0x3a8>)
   127a4:	5cb2      	ldrb	r2, [r6, r2]
   127a6:	0212      	lsls	r2, r2, #8
   127a8:	4313      	orrs	r3, r2
   127aa:	6133      	str	r3, [r6, #16]
   127ac:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   127ae:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   127b0:	4a1b      	ldr	r2, [pc, #108]	; (12820 <chk_mounted+0x3ac>)
   127b2:	8813      	ldrh	r3, [r2, #0]
   127b4:	3301      	adds	r3, #1
   127b6:	b29b      	uxth	r3, r3
   127b8:	8013      	strh	r3, [r2, #0]
   127ba:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   127bc:	2000      	movs	r0, #0
   127be:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   127c0:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   127c2:	e66c      	b.n	1249e <chk_mounted+0x2a>
   127c4:	2000034c 	.word	0x2000034c
   127c8:	00012165 	.word	0x00012165
   127cc:	000120c9 	.word	0x000120c9
   127d0:	000123d1 	.word	0x000123d1
   127d4:	00016699 	.word	0x00016699
   127d8:	00000ff5 	.word	0x00000ff5
   127dc:	0000fff5 	.word	0x0000fff5
   127e0:	000001ff 	.word	0x000001ff
   127e4:	00012181 	.word	0x00012181
   127e8:	0000022f 	.word	0x0000022f
   127ec:	0000022e 	.word	0x0000022e
   127f0:	ffffaa55 	.word	0xffffaa55
   127f4:	41615252 	.word	0x41615252
   127f8:	00000217 	.word	0x00000217
   127fc:	00000216 	.word	0x00000216
   12800:	00000215 	.word	0x00000215
   12804:	61417272 	.word	0x61417272
   12808:	0000021f 	.word	0x0000021f
   1280c:	0000021e 	.word	0x0000021e
   12810:	0000021d 	.word	0x0000021d
   12814:	0000021b 	.word	0x0000021b
   12818:	0000021a 	.word	0x0000021a
   1281c:	00000219 	.word	0x00000219
   12820:	2000036c 	.word	0x2000036c

00012824 <move_window>:
{
   12824:	b5f0      	push	{r4, r5, r6, r7, lr}
   12826:	46ce      	mov	lr, r9
   12828:	b500      	push	{lr}
   1282a:	b082      	sub	sp, #8
   1282c:	0004      	movs	r4, r0
   1282e:	000f      	movs	r7, r1
	wsect = fs->winsect;
   12830:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   12832:	428d      	cmp	r5, r1
   12834:	d03f      	beq.n	128b6 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   12836:	7903      	ldrb	r3, [r0, #4]
   12838:	2b00      	cmp	r3, #0
   1283a:	d107      	bne.n	1284c <move_window+0x28>
	return FR_OK;
   1283c:	2300      	movs	r3, #0
		if (sector) {
   1283e:	2f00      	cmp	r7, #0
   12840:	d12c      	bne.n	1289c <move_window+0x78>
}
   12842:	0018      	movs	r0, r3
   12844:	b002      	add	sp, #8
   12846:	bc04      	pop	{r2}
   12848:	4691      	mov	r9, r2
   1284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1284c:	2330      	movs	r3, #48	; 0x30
   1284e:	469c      	mov	ip, r3
   12850:	4484      	add	ip, r0
   12852:	4663      	mov	r3, ip
   12854:	4661      	mov	r1, ip
   12856:	9301      	str	r3, [sp, #4]
   12858:	7840      	ldrb	r0, [r0, #1]
   1285a:	2301      	movs	r3, #1
   1285c:	002a      	movs	r2, r5
   1285e:	4e17      	ldr	r6, [pc, #92]	; (128bc <move_window+0x98>)
   12860:	47b0      	blx	r6
				return FR_DISK_ERR;
   12862:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12864:	2800      	cmp	r0, #0
   12866:	d1ec      	bne.n	12842 <move_window+0x1e>
			fs->wflag = 0;
   12868:	2300      	movs	r3, #0
   1286a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1286c:	6a23      	ldr	r3, [r4, #32]
   1286e:	69e2      	ldr	r2, [r4, #28]
   12870:	4694      	mov	ip, r2
   12872:	4463      	add	r3, ip
   12874:	429d      	cmp	r5, r3
   12876:	d2e1      	bcs.n	1283c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12878:	78e6      	ldrb	r6, [r4, #3]
   1287a:	2e01      	cmp	r6, #1
   1287c:	d9de      	bls.n	1283c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1287e:	4b0f      	ldr	r3, [pc, #60]	; (128bc <move_window+0x98>)
   12880:	4699      	mov	r9, r3
					wsect += fs->fsize;
   12882:	69e3      	ldr	r3, [r4, #28]
   12884:	469c      	mov	ip, r3
   12886:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   12888:	7860      	ldrb	r0, [r4, #1]
   1288a:	2301      	movs	r3, #1
   1288c:	002a      	movs	r2, r5
   1288e:	9901      	ldr	r1, [sp, #4]
   12890:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12892:	3e01      	subs	r6, #1
   12894:	b2f6      	uxtb	r6, r6
   12896:	2e01      	cmp	r6, #1
   12898:	d1f3      	bne.n	12882 <move_window+0x5e>
   1289a:	e7cf      	b.n	1283c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1289c:	0021      	movs	r1, r4
   1289e:	3130      	adds	r1, #48	; 0x30
   128a0:	7860      	ldrb	r0, [r4, #1]
   128a2:	3301      	adds	r3, #1
   128a4:	003a      	movs	r2, r7
   128a6:	4d06      	ldr	r5, [pc, #24]	; (128c0 <move_window+0x9c>)
   128a8:	47a8      	blx	r5
				return FR_DISK_ERR;
   128aa:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   128ac:	2800      	cmp	r0, #0
   128ae:	d1c8      	bne.n	12842 <move_window+0x1e>
			fs->winsect = sector;
   128b0:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   128b2:	2300      	movs	r3, #0
   128b4:	e7c5      	b.n	12842 <move_window+0x1e>
   128b6:	2300      	movs	r3, #0
   128b8:	e7c3      	b.n	12842 <move_window+0x1e>
   128ba:	46c0      	nop			; (mov r8, r8)
   128bc:	00012205 	.word	0x00012205
   128c0:	00012181 	.word	0x00012181

000128c4 <get_fat>:
{
   128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128c6:	0005      	movs	r5, r0
   128c8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   128ca:	2901      	cmp	r1, #1
   128cc:	d974      	bls.n	129b8 <get_fat+0xf4>
		return 1;
   128ce:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   128d0:	69ab      	ldr	r3, [r5, #24]
   128d2:	4299      	cmp	r1, r3
   128d4:	d271      	bcs.n	129ba <get_fat+0xf6>
	switch (fs->fs_type) {
   128d6:	782b      	ldrb	r3, [r5, #0]
   128d8:	2b02      	cmp	r3, #2
   128da:	d034      	beq.n	12946 <get_fat+0x82>
   128dc:	2b03      	cmp	r3, #3
   128de:	d049      	beq.n	12974 <get_fat+0xb0>
   128e0:	2b01      	cmp	r3, #1
   128e2:	d002      	beq.n	128ea <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   128e4:	2001      	movs	r0, #1
   128e6:	4240      	negs	r0, r0
   128e8:	e067      	b.n	129ba <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   128ea:	084e      	lsrs	r6, r1, #1
   128ec:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   128ee:	0a71      	lsrs	r1, r6, #9
   128f0:	6a2b      	ldr	r3, [r5, #32]
   128f2:	469c      	mov	ip, r3
   128f4:	4461      	add	r1, ip
   128f6:	0028      	movs	r0, r5
   128f8:	4b30      	ldr	r3, [pc, #192]	; (129bc <get_fat+0xf8>)
   128fa:	4798      	blx	r3
   128fc:	2800      	cmp	r0, #0
   128fe:	d002      	beq.n	12906 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12900:	2001      	movs	r0, #1
   12902:	4240      	negs	r0, r0
   12904:	e059      	b.n	129ba <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   12906:	05f3      	lsls	r3, r6, #23
   12908:	0ddb      	lsrs	r3, r3, #23
   1290a:	18eb      	adds	r3, r5, r3
   1290c:	3330      	adds	r3, #48	; 0x30
   1290e:	781f      	ldrb	r7, [r3, #0]
   12910:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12912:	0a71      	lsrs	r1, r6, #9
   12914:	6a2b      	ldr	r3, [r5, #32]
   12916:	469c      	mov	ip, r3
   12918:	4461      	add	r1, ip
   1291a:	0028      	movs	r0, r5
   1291c:	4b27      	ldr	r3, [pc, #156]	; (129bc <get_fat+0xf8>)
   1291e:	4798      	blx	r3
   12920:	2800      	cmp	r0, #0
   12922:	d002      	beq.n	1292a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12924:	2001      	movs	r0, #1
   12926:	4240      	negs	r0, r0
   12928:	e047      	b.n	129ba <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   1292a:	05f6      	lsls	r6, r6, #23
   1292c:	0df6      	lsrs	r6, r6, #23
   1292e:	19ad      	adds	r5, r5, r6
   12930:	3530      	adds	r5, #48	; 0x30
   12932:	7828      	ldrb	r0, [r5, #0]
   12934:	0200      	lsls	r0, r0, #8
   12936:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   12938:	07e3      	lsls	r3, r4, #31
   1293a:	d501      	bpl.n	12940 <get_fat+0x7c>
   1293c:	0900      	lsrs	r0, r0, #4
   1293e:	e03c      	b.n	129ba <get_fat+0xf6>
   12940:	0500      	lsls	r0, r0, #20
   12942:	0d00      	lsrs	r0, r0, #20
   12944:	e039      	b.n	129ba <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   12946:	0a09      	lsrs	r1, r1, #8
   12948:	6a2b      	ldr	r3, [r5, #32]
   1294a:	469c      	mov	ip, r3
   1294c:	4461      	add	r1, ip
   1294e:	0028      	movs	r0, r5
   12950:	4b1a      	ldr	r3, [pc, #104]	; (129bc <get_fat+0xf8>)
   12952:	4798      	blx	r3
   12954:	2800      	cmp	r0, #0
   12956:	d002      	beq.n	1295e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12958:	2001      	movs	r0, #1
   1295a:	4240      	negs	r0, r0
   1295c:	e02d      	b.n	129ba <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   1295e:	0064      	lsls	r4, r4, #1
   12960:	23ff      	movs	r3, #255	; 0xff
   12962:	005b      	lsls	r3, r3, #1
   12964:	401c      	ands	r4, r3
		return LD_WORD(p);
   12966:	192d      	adds	r5, r5, r4
   12968:	3530      	adds	r5, #48	; 0x30
   1296a:	786b      	ldrb	r3, [r5, #1]
   1296c:	021b      	lsls	r3, r3, #8
   1296e:	7828      	ldrb	r0, [r5, #0]
   12970:	4318      	orrs	r0, r3
   12972:	e022      	b.n	129ba <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12974:	09c9      	lsrs	r1, r1, #7
   12976:	6a2b      	ldr	r3, [r5, #32]
   12978:	469c      	mov	ip, r3
   1297a:	4461      	add	r1, ip
   1297c:	0028      	movs	r0, r5
   1297e:	4b0f      	ldr	r3, [pc, #60]	; (129bc <get_fat+0xf8>)
   12980:	4798      	blx	r3
   12982:	2800      	cmp	r0, #0
   12984:	d002      	beq.n	1298c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12986:	2001      	movs	r0, #1
   12988:	4240      	negs	r0, r0
   1298a:	e016      	b.n	129ba <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1298c:	00a4      	lsls	r4, r4, #2
   1298e:	23fe      	movs	r3, #254	; 0xfe
   12990:	005b      	lsls	r3, r3, #1
   12992:	401c      	ands	r4, r3
   12994:	0023      	movs	r3, r4
   12996:	3330      	adds	r3, #48	; 0x30
   12998:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1299a:	78d8      	ldrb	r0, [r3, #3]
   1299c:	0600      	lsls	r0, r0, #24
   1299e:	789a      	ldrb	r2, [r3, #2]
   129a0:	0412      	lsls	r2, r2, #16
   129a2:	4310      	orrs	r0, r2
   129a4:	192c      	adds	r4, r5, r4
   129a6:	3430      	adds	r4, #48	; 0x30
   129a8:	7822      	ldrb	r2, [r4, #0]
   129aa:	4310      	orrs	r0, r2
   129ac:	785b      	ldrb	r3, [r3, #1]
   129ae:	021b      	lsls	r3, r3, #8
   129b0:	4318      	orrs	r0, r3
   129b2:	0100      	lsls	r0, r0, #4
   129b4:	0900      	lsrs	r0, r0, #4
   129b6:	e000      	b.n	129ba <get_fat+0xf6>
		return 1;
   129b8:	2001      	movs	r0, #1
}
   129ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   129bc:	00012825 	.word	0x00012825

000129c0 <dir_sdi>:
{
   129c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129c2:	0004      	movs	r4, r0
   129c4:	000d      	movs	r5, r1
	dj->index = idx;
   129c6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   129c8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   129ca:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   129cc:	2901      	cmp	r1, #1
   129ce:	d003      	beq.n	129d8 <dir_sdi+0x18>
   129d0:	6823      	ldr	r3, [r4, #0]
   129d2:	699a      	ldr	r2, [r3, #24]
   129d4:	4291      	cmp	r1, r2
   129d6:	d300      	bcc.n	129da <dir_sdi+0x1a>
}
   129d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   129da:	2900      	cmp	r1, #0
   129dc:	d119      	bne.n	12a12 <dir_sdi+0x52>
   129de:	781a      	ldrb	r2, [r3, #0]
   129e0:	2a03      	cmp	r2, #3
   129e2:	d013      	beq.n	12a0c <dir_sdi+0x4c>
		dj->clust = clst;
   129e4:	2200      	movs	r2, #0
   129e6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   129e8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   129ea:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   129ec:	42aa      	cmp	r2, r5
   129ee:	d9f3      	bls.n	129d8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   129f0:	092a      	lsrs	r2, r5, #4
   129f2:	b292      	uxth	r2, r2
   129f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   129f6:	189b      	adds	r3, r3, r2
   129f8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   129fa:	6823      	ldr	r3, [r4, #0]
   129fc:	3330      	adds	r3, #48	; 0x30
   129fe:	220f      	movs	r2, #15
   12a00:	4015      	ands	r5, r2
   12a02:	016d      	lsls	r5, r5, #5
   12a04:	195d      	adds	r5, r3, r5
   12a06:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   12a08:	2000      	movs	r0, #0
   12a0a:	e7e5      	b.n	129d8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   12a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   12a0e:	2900      	cmp	r1, #0
   12a10:	d0e8      	beq.n	129e4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   12a12:	789e      	ldrb	r6, [r3, #2]
   12a14:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   12a16:	42b5      	cmp	r5, r6
   12a18:	d313      	bcc.n	12a42 <dir_sdi+0x82>
   12a1a:	1bad      	subs	r5, r5, r6
   12a1c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   12a1e:	4f10      	ldr	r7, [pc, #64]	; (12a60 <dir_sdi+0xa0>)
   12a20:	e000      	b.n	12a24 <dir_sdi+0x64>
   12a22:	001d      	movs	r5, r3
   12a24:	6820      	ldr	r0, [r4, #0]
   12a26:	47b8      	blx	r7
   12a28:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12a2a:	1c43      	adds	r3, r0, #1
   12a2c:	d012      	beq.n	12a54 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   12a2e:	2801      	cmp	r0, #1
   12a30:	d912      	bls.n	12a58 <dir_sdi+0x98>
   12a32:	6823      	ldr	r3, [r4, #0]
   12a34:	699b      	ldr	r3, [r3, #24]
   12a36:	4298      	cmp	r0, r3
   12a38:	d210      	bcs.n	12a5c <dir_sdi+0x9c>
   12a3a:	1bab      	subs	r3, r5, r6
   12a3c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   12a3e:	42b5      	cmp	r5, r6
   12a40:	d2ef      	bcs.n	12a22 <dir_sdi+0x62>
		dj->clust = clst;
   12a42:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12a44:	6820      	ldr	r0, [r4, #0]
   12a46:	4b07      	ldr	r3, [pc, #28]	; (12a64 <dir_sdi+0xa4>)
   12a48:	4798      	blx	r3
   12a4a:	092b      	lsrs	r3, r5, #4
   12a4c:	b29b      	uxth	r3, r3
   12a4e:	1818      	adds	r0, r3, r0
   12a50:	6120      	str	r0, [r4, #16]
   12a52:	e7d2      	b.n	129fa <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12a54:	2001      	movs	r0, #1
   12a56:	e7bf      	b.n	129d8 <dir_sdi+0x18>
				return FR_INT_ERR;
   12a58:	2002      	movs	r0, #2
   12a5a:	e7bd      	b.n	129d8 <dir_sdi+0x18>
   12a5c:	2002      	movs	r0, #2
   12a5e:	e7bb      	b.n	129d8 <dir_sdi+0x18>
   12a60:	000128c5 	.word	0x000128c5
   12a64:	0001236b 	.word	0x0001236b

00012a68 <put_fat>:
{
   12a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a6a:	46c6      	mov	lr, r8
   12a6c:	b500      	push	{lr}
   12a6e:	0007      	movs	r7, r0
   12a70:	000c      	movs	r4, r1
   12a72:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   12a74:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12a76:	2901      	cmp	r1, #1
   12a78:	d902      	bls.n	12a80 <put_fat+0x18>
   12a7a:	6983      	ldr	r3, [r0, #24]
   12a7c:	4299      	cmp	r1, r3
   12a7e:	d303      	bcc.n	12a88 <put_fat+0x20>
}
   12a80:	0028      	movs	r0, r5
   12a82:	bc04      	pop	{r2}
   12a84:	4690      	mov	r8, r2
   12a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   12a88:	7803      	ldrb	r3, [r0, #0]
   12a8a:	2b02      	cmp	r3, #2
   12a8c:	d053      	beq.n	12b36 <put_fat+0xce>
   12a8e:	2b03      	cmp	r3, #3
   12a90:	d063      	beq.n	12b5a <put_fat+0xf2>
			res = FR_INT_ERR;
   12a92:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   12a94:	2b01      	cmp	r3, #1
   12a96:	d002      	beq.n	12a9e <put_fat+0x36>
		fs->wflag = 1;
   12a98:	2301      	movs	r3, #1
   12a9a:	713b      	strb	r3, [r7, #4]
   12a9c:	e7f0      	b.n	12a80 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   12a9e:	084b      	lsrs	r3, r1, #1
   12aa0:	4698      	mov	r8, r3
   12aa2:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12aa4:	4643      	mov	r3, r8
   12aa6:	0a59      	lsrs	r1, r3, #9
   12aa8:	6a03      	ldr	r3, [r0, #32]
   12aaa:	469c      	mov	ip, r3
   12aac:	4461      	add	r1, ip
   12aae:	4b3b      	ldr	r3, [pc, #236]	; (12b9c <put_fat+0x134>)
   12ab0:	4798      	blx	r3
   12ab2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12ab4:	d1f0      	bne.n	12a98 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   12ab6:	4643      	mov	r3, r8
   12ab8:	05db      	lsls	r3, r3, #23
   12aba:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12abc:	07e2      	lsls	r2, r4, #31
   12abe:	d51f      	bpl.n	12b00 <put_fat+0x98>
   12ac0:	18fb      	adds	r3, r7, r3
   12ac2:	3330      	adds	r3, #48	; 0x30
   12ac4:	7819      	ldrb	r1, [r3, #0]
   12ac6:	220f      	movs	r2, #15
   12ac8:	400a      	ands	r2, r1
   12aca:	0131      	lsls	r1, r6, #4
   12acc:	20ff      	movs	r0, #255	; 0xff
   12ace:	0100      	lsls	r0, r0, #4
   12ad0:	4001      	ands	r1, r0
   12ad2:	430a      	orrs	r2, r1
   12ad4:	701a      	strb	r2, [r3, #0]
			bc++;
   12ad6:	4644      	mov	r4, r8
   12ad8:	3401      	adds	r4, #1
			fs->wflag = 1;
   12ada:	2301      	movs	r3, #1
   12adc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12ade:	0a61      	lsrs	r1, r4, #9
   12ae0:	6a3b      	ldr	r3, [r7, #32]
   12ae2:	469c      	mov	ip, r3
   12ae4:	4461      	add	r1, ip
   12ae6:	0038      	movs	r0, r7
   12ae8:	4b2c      	ldr	r3, [pc, #176]	; (12b9c <put_fat+0x134>)
   12aea:	4798      	blx	r3
			if (res != FR_OK) break;
   12aec:	2800      	cmp	r0, #0
   12aee:	d151      	bne.n	12b94 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   12af0:	05e4      	lsls	r4, r4, #23
   12af2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12af4:	0936      	lsrs	r6, r6, #4
   12af6:	b2f6      	uxtb	r6, r6
   12af8:	193c      	adds	r4, r7, r4
   12afa:	3430      	adds	r4, #48	; 0x30
   12afc:	7026      	strb	r6, [r4, #0]
			break;
   12afe:	e7cb      	b.n	12a98 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12b00:	18fb      	adds	r3, r7, r3
   12b02:	3330      	adds	r3, #48	; 0x30
   12b04:	701e      	strb	r6, [r3, #0]
			bc++;
   12b06:	4644      	mov	r4, r8
   12b08:	3401      	adds	r4, #1
			fs->wflag = 1;
   12b0a:	2301      	movs	r3, #1
   12b0c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12b0e:	0a61      	lsrs	r1, r4, #9
   12b10:	6a3b      	ldr	r3, [r7, #32]
   12b12:	469c      	mov	ip, r3
   12b14:	4461      	add	r1, ip
   12b16:	0038      	movs	r0, r7
   12b18:	4b20      	ldr	r3, [pc, #128]	; (12b9c <put_fat+0x134>)
   12b1a:	4798      	blx	r3
			if (res != FR_OK) break;
   12b1c:	2800      	cmp	r0, #0
   12b1e:	d13b      	bne.n	12b98 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   12b20:	05e4      	lsls	r4, r4, #23
   12b22:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12b24:	193b      	adds	r3, r7, r4
   12b26:	3330      	adds	r3, #48	; 0x30
   12b28:	781b      	ldrb	r3, [r3, #0]
   12b2a:	220f      	movs	r2, #15
   12b2c:	4393      	bics	r3, r2
   12b2e:	0536      	lsls	r6, r6, #20
   12b30:	0f36      	lsrs	r6, r6, #28
   12b32:	431e      	orrs	r6, r3
   12b34:	e7e0      	b.n	12af8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12b36:	0a09      	lsrs	r1, r1, #8
   12b38:	6a03      	ldr	r3, [r0, #32]
   12b3a:	469c      	mov	ip, r3
   12b3c:	4461      	add	r1, ip
   12b3e:	4b17      	ldr	r3, [pc, #92]	; (12b9c <put_fat+0x134>)
   12b40:	4798      	blx	r3
   12b42:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12b44:	d1a8      	bne.n	12a98 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   12b46:	0063      	lsls	r3, r4, #1
   12b48:	24ff      	movs	r4, #255	; 0xff
   12b4a:	0064      	lsls	r4, r4, #1
   12b4c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   12b4e:	18fb      	adds	r3, r7, r3
   12b50:	3330      	adds	r3, #48	; 0x30
   12b52:	701e      	strb	r6, [r3, #0]
   12b54:	0a36      	lsrs	r6, r6, #8
   12b56:	705e      	strb	r6, [r3, #1]
			break;
   12b58:	e79e      	b.n	12a98 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12b5a:	09c9      	lsrs	r1, r1, #7
   12b5c:	6a03      	ldr	r3, [r0, #32]
   12b5e:	469c      	mov	ip, r3
   12b60:	4461      	add	r1, ip
   12b62:	4b0e      	ldr	r3, [pc, #56]	; (12b9c <put_fat+0x134>)
   12b64:	4798      	blx	r3
   12b66:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12b68:	d196      	bne.n	12a98 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   12b6a:	00a4      	lsls	r4, r4, #2
   12b6c:	23fe      	movs	r3, #254	; 0xfe
   12b6e:	005b      	lsls	r3, r3, #1
   12b70:	401c      	ands	r4, r3
   12b72:	0022      	movs	r2, r4
   12b74:	3230      	adds	r2, #48	; 0x30
   12b76:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12b78:	78d3      	ldrb	r3, [r2, #3]
   12b7a:	193c      	adds	r4, r7, r4
   12b7c:	3430      	adds	r4, #48	; 0x30
   12b7e:	091b      	lsrs	r3, r3, #4
   12b80:	071b      	lsls	r3, r3, #28
   12b82:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   12b84:	7026      	strb	r6, [r4, #0]
   12b86:	0a33      	lsrs	r3, r6, #8
   12b88:	7053      	strb	r3, [r2, #1]
   12b8a:	0c33      	lsrs	r3, r6, #16
   12b8c:	7093      	strb	r3, [r2, #2]
   12b8e:	0e36      	lsrs	r6, r6, #24
   12b90:	70d6      	strb	r6, [r2, #3]
			break;
   12b92:	e781      	b.n	12a98 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12b94:	0005      	movs	r5, r0
   12b96:	e77f      	b.n	12a98 <put_fat+0x30>
   12b98:	0005      	movs	r5, r0
   12b9a:	e77d      	b.n	12a98 <put_fat+0x30>
   12b9c:	00012825 	.word	0x00012825

00012ba0 <create_chain>:
{
   12ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ba2:	46c6      	mov	lr, r8
   12ba4:	b500      	push	{lr}
   12ba6:	0005      	movs	r5, r0
   12ba8:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   12baa:	2900      	cmp	r1, #0
   12bac:	d107      	bne.n	12bbe <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   12bae:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12bb0:	2e00      	cmp	r6, #0
   12bb2:	d00d      	beq.n	12bd0 <create_chain+0x30>
   12bb4:	6983      	ldr	r3, [r0, #24]
   12bb6:	429e      	cmp	r6, r3
   12bb8:	d30b      	bcc.n	12bd2 <create_chain+0x32>
   12bba:	2601      	movs	r6, #1
   12bbc:	e009      	b.n	12bd2 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   12bbe:	4b26      	ldr	r3, [pc, #152]	; (12c58 <create_chain+0xb8>)
   12bc0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12bc2:	2801      	cmp	r0, #1
   12bc4:	d93d      	bls.n	12c42 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12bc6:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   12bc8:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12bca:	4298      	cmp	r0, r3
   12bcc:	d201      	bcs.n	12bd2 <create_chain+0x32>
   12bce:	e03d      	b.n	12c4c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12bd0:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   12bd2:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   12bd4:	4f20      	ldr	r7, [pc, #128]	; (12c58 <create_chain+0xb8>)
   12bd6:	e00a      	b.n	12bee <create_chain+0x4e>
   12bd8:	0021      	movs	r1, r4
   12bda:	0028      	movs	r0, r5
   12bdc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   12bde:	2800      	cmp	r0, #0
   12be0:	d00d      	beq.n	12bfe <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12be2:	1c43      	adds	r3, r0, #1
   12be4:	d032      	beq.n	12c4c <create_chain+0xac>
   12be6:	2801      	cmp	r0, #1
   12be8:	d030      	beq.n	12c4c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12bea:	42b4      	cmp	r4, r6
   12bec:	d02d      	beq.n	12c4a <create_chain+0xaa>
		ncl++;							/* Next cluster */
   12bee:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12bf0:	69ab      	ldr	r3, [r5, #24]
   12bf2:	429c      	cmp	r4, r3
   12bf4:	d3f0      	bcc.n	12bd8 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   12bf6:	2e01      	cmp	r6, #1
   12bf8:	d925      	bls.n	12c46 <create_chain+0xa6>
			ncl = 2;
   12bfa:	2402      	movs	r4, #2
   12bfc:	e7ec      	b.n	12bd8 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   12bfe:	4a17      	ldr	r2, [pc, #92]	; (12c5c <create_chain+0xbc>)
   12c00:	0021      	movs	r1, r4
   12c02:	0028      	movs	r0, r5
   12c04:	4b16      	ldr	r3, [pc, #88]	; (12c60 <create_chain+0xc0>)
   12c06:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   12c08:	2800      	cmp	r0, #0
   12c0a:	d113      	bne.n	12c34 <create_chain+0x94>
   12c0c:	4643      	mov	r3, r8
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d109      	bne.n	12c26 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   12c12:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   12c14:	692b      	ldr	r3, [r5, #16]
   12c16:	1c5a      	adds	r2, r3, #1
   12c18:	d01b      	beq.n	12c52 <create_chain+0xb2>
			fs->free_clust--;
   12c1a:	3b01      	subs	r3, #1
   12c1c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   12c1e:	2301      	movs	r3, #1
   12c20:	716b      	strb	r3, [r5, #5]
   12c22:	0020      	movs	r0, r4
   12c24:	e012      	b.n	12c4c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   12c26:	0022      	movs	r2, r4
   12c28:	4641      	mov	r1, r8
   12c2a:	0028      	movs	r0, r5
   12c2c:	4b0c      	ldr	r3, [pc, #48]	; (12c60 <create_chain+0xc0>)
   12c2e:	4798      	blx	r3
	if (res == FR_OK) {
   12c30:	2800      	cmp	r0, #0
   12c32:	d0ee      	beq.n	12c12 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   12c34:	3801      	subs	r0, #1
   12c36:	4242      	negs	r2, r0
   12c38:	4142      	adcs	r2, r0
   12c3a:	4250      	negs	r0, r2
   12c3c:	2301      	movs	r3, #1
   12c3e:	4318      	orrs	r0, r3
   12c40:	e004      	b.n	12c4c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12c42:	2001      	movs	r0, #1
   12c44:	e002      	b.n	12c4c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   12c46:	2000      	movs	r0, #0
   12c48:	e000      	b.n	12c4c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   12c4a:	2000      	movs	r0, #0
}
   12c4c:	bc04      	pop	{r2}
   12c4e:	4690      	mov	r8, r2
   12c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c52:	0020      	movs	r0, r4
   12c54:	e7fa      	b.n	12c4c <create_chain+0xac>
   12c56:	46c0      	nop			; (mov r8, r8)
   12c58:	000128c5 	.word	0x000128c5
   12c5c:	0fffffff 	.word	0x0fffffff
   12c60:	00012a69 	.word	0x00012a69

00012c64 <remove_chain>:
{
   12c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c66:	46ce      	mov	lr, r9
   12c68:	4647      	mov	r7, r8
   12c6a:	b580      	push	{r7, lr}
   12c6c:	0004      	movs	r4, r0
   12c6e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   12c70:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12c72:	2901      	cmp	r1, #1
   12c74:	d902      	bls.n	12c7c <remove_chain+0x18>
   12c76:	69a3      	ldr	r3, [r4, #24]
   12c78:	4299      	cmp	r1, r3
   12c7a:	d303      	bcc.n	12c84 <remove_chain+0x20>
}
   12c7c:	bc0c      	pop	{r2, r3}
   12c7e:	4690      	mov	r8, r2
   12c80:	4699      	mov	r9, r3
   12c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12c84:	4f13      	ldr	r7, [pc, #76]	; (12cd4 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12c86:	4b14      	ldr	r3, [pc, #80]	; (12cd8 <remove_chain+0x74>)
   12c88:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   12c8a:	2301      	movs	r3, #1
   12c8c:	4699      	mov	r9, r3
   12c8e:	e003      	b.n	12c98 <remove_chain+0x34>
   12c90:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12c92:	69a3      	ldr	r3, [r4, #24]
   12c94:	42b3      	cmp	r3, r6
   12c96:	d9f1      	bls.n	12c7c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12c98:	0029      	movs	r1, r5
   12c9a:	0020      	movs	r0, r4
   12c9c:	47b8      	blx	r7
   12c9e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12ca0:	d011      	beq.n	12cc6 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12ca2:	2801      	cmp	r0, #1
   12ca4:	d011      	beq.n	12cca <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12ca6:	1c43      	adds	r3, r0, #1
   12ca8:	d011      	beq.n	12cce <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12caa:	2200      	movs	r2, #0
   12cac:	0029      	movs	r1, r5
   12cae:	0020      	movs	r0, r4
   12cb0:	47c0      	blx	r8
			if (res != FR_OK) break;
   12cb2:	2800      	cmp	r0, #0
   12cb4:	d1e2      	bne.n	12c7c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12cb6:	6923      	ldr	r3, [r4, #16]
   12cb8:	1c5a      	adds	r2, r3, #1
   12cba:	d0e9      	beq.n	12c90 <remove_chain+0x2c>
				fs->free_clust++;
   12cbc:	3301      	adds	r3, #1
   12cbe:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12cc0:	464b      	mov	r3, r9
   12cc2:	7163      	strb	r3, [r4, #5]
   12cc4:	e7e4      	b.n	12c90 <remove_chain+0x2c>
   12cc6:	2000      	movs	r0, #0
   12cc8:	e7d8      	b.n	12c7c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12cca:	2002      	movs	r0, #2
   12ccc:	e7d6      	b.n	12c7c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12cce:	2001      	movs	r0, #1
   12cd0:	e7d4      	b.n	12c7c <remove_chain+0x18>
   12cd2:	46c0      	nop			; (mov r8, r8)
   12cd4:	000128c5 	.word	0x000128c5
   12cd8:	00012a69 	.word	0x00012a69

00012cdc <dir_next>:
{
   12cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cde:	46d6      	mov	lr, sl
   12ce0:	4647      	mov	r7, r8
   12ce2:	b580      	push	{r7, lr}
   12ce4:	0006      	movs	r6, r0
   12ce6:	000d      	movs	r5, r1
	i = dj->index + 1;
   12ce8:	88c4      	ldrh	r4, [r0, #6]
   12cea:	3401      	adds	r4, #1
   12cec:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   12cee:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12cf0:	2c00      	cmp	r4, #0
   12cf2:	d103      	bne.n	12cfc <dir_next+0x20>
}
   12cf4:	bc0c      	pop	{r2, r3}
   12cf6:	4690      	mov	r8, r2
   12cf8:	469a      	mov	sl, r3
   12cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12cfc:	6933      	ldr	r3, [r6, #16]
   12cfe:	2b00      	cmp	r3, #0
   12d00:	d0f8      	beq.n	12cf4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   12d02:	270f      	movs	r7, #15
   12d04:	4027      	ands	r7, r4
   12d06:	d10f      	bne.n	12d28 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   12d08:	3301      	adds	r3, #1
   12d0a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   12d0c:	68f1      	ldr	r1, [r6, #12]
   12d0e:	2900      	cmp	r1, #0
   12d10:	d104      	bne.n	12d1c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12d12:	6833      	ldr	r3, [r6, #0]
   12d14:	891b      	ldrh	r3, [r3, #8]
   12d16:	42a3      	cmp	r3, r4
   12d18:	d9ec      	bls.n	12cf4 <dir_next+0x18>
   12d1a:	e005      	b.n	12d28 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   12d1c:	6830      	ldr	r0, [r6, #0]
   12d1e:	7883      	ldrb	r3, [r0, #2]
   12d20:	3b01      	subs	r3, #1
   12d22:	0922      	lsrs	r2, r4, #4
   12d24:	421a      	tst	r2, r3
   12d26:	d007      	beq.n	12d38 <dir_next+0x5c>
	dj->index = i;
   12d28:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12d2a:	6833      	ldr	r3, [r6, #0]
   12d2c:	3330      	adds	r3, #48	; 0x30
   12d2e:	017f      	lsls	r7, r7, #5
   12d30:	19df      	adds	r7, r3, r7
   12d32:	6177      	str	r7, [r6, #20]
	return FR_OK;
   12d34:	2000      	movs	r0, #0
   12d36:	e7dd      	b.n	12cf4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   12d38:	4b2c      	ldr	r3, [pc, #176]	; (12dec <dir_next+0x110>)
   12d3a:	4798      	blx	r3
   12d3c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12d3e:	2002      	movs	r0, #2
   12d40:	4643      	mov	r3, r8
   12d42:	2b01      	cmp	r3, #1
   12d44:	d9d6      	bls.n	12cf4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12d46:	3301      	adds	r3, #1
   12d48:	d04b      	beq.n	12de2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12d4a:	6833      	ldr	r3, [r6, #0]
   12d4c:	699a      	ldr	r2, [r3, #24]
   12d4e:	4590      	cmp	r8, r2
   12d50:	d33f      	bcc.n	12dd2 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   12d52:	3002      	adds	r0, #2
   12d54:	2d00      	cmp	r5, #0
   12d56:	d0cd      	beq.n	12cf4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   12d58:	68f1      	ldr	r1, [r6, #12]
   12d5a:	0018      	movs	r0, r3
   12d5c:	4b24      	ldr	r3, [pc, #144]	; (12df0 <dir_next+0x114>)
   12d5e:	4798      	blx	r3
   12d60:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   12d62:	2007      	movs	r0, #7
   12d64:	4643      	mov	r3, r8
   12d66:	2b00      	cmp	r3, #0
   12d68:	d0c4      	beq.n	12cf4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   12d6a:	3805      	subs	r0, #5
   12d6c:	2b01      	cmp	r3, #1
   12d6e:	d0c1      	beq.n	12cf4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12d70:	3801      	subs	r0, #1
   12d72:	3301      	adds	r3, #1
   12d74:	d0be      	beq.n	12cf4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   12d76:	2100      	movs	r1, #0
   12d78:	6830      	ldr	r0, [r6, #0]
   12d7a:	4b1e      	ldr	r3, [pc, #120]	; (12df4 <dir_next+0x118>)
   12d7c:	4798      	blx	r3
   12d7e:	0003      	movs	r3, r0
   12d80:	2001      	movs	r0, #1
   12d82:	2b00      	cmp	r3, #0
   12d84:	d1b6      	bne.n	12cf4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   12d86:	6830      	ldr	r0, [r6, #0]
   12d88:	3030      	adds	r0, #48	; 0x30
   12d8a:	2280      	movs	r2, #128	; 0x80
   12d8c:	0092      	lsls	r2, r2, #2
   12d8e:	2100      	movs	r1, #0
   12d90:	4b19      	ldr	r3, [pc, #100]	; (12df8 <dir_next+0x11c>)
   12d92:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12d94:	6835      	ldr	r5, [r6, #0]
   12d96:	4641      	mov	r1, r8
   12d98:	0028      	movs	r0, r5
   12d9a:	4b18      	ldr	r3, [pc, #96]	; (12dfc <dir_next+0x120>)
   12d9c:	4798      	blx	r3
   12d9e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12da0:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12da2:	2301      	movs	r3, #1
   12da4:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12da6:	6833      	ldr	r3, [r6, #0]
   12da8:	789a      	ldrb	r2, [r3, #2]
   12daa:	42aa      	cmp	r2, r5
   12dac:	d90e      	bls.n	12dcc <dir_next+0xf0>
						dj->fs->wflag = 1;
   12dae:	4652      	mov	r2, sl
   12db0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12db2:	2100      	movs	r1, #0
   12db4:	6830      	ldr	r0, [r6, #0]
   12db6:	4b0f      	ldr	r3, [pc, #60]	; (12df4 <dir_next+0x118>)
   12db8:	4798      	blx	r3
   12dba:	2800      	cmp	r0, #0
   12dbc:	d113      	bne.n	12de6 <dir_next+0x10a>
						dj->fs->winsect++;
   12dbe:	6832      	ldr	r2, [r6, #0]
   12dc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12dc2:	3301      	adds	r3, #1
   12dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12dc6:	3501      	adds	r5, #1
   12dc8:	b2ed      	uxtb	r5, r5
   12dca:	e7ec      	b.n	12da6 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   12dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12dce:	1b52      	subs	r2, r2, r5
   12dd0:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12dd2:	4643      	mov	r3, r8
   12dd4:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12dd6:	4641      	mov	r1, r8
   12dd8:	6830      	ldr	r0, [r6, #0]
   12dda:	4b08      	ldr	r3, [pc, #32]	; (12dfc <dir_next+0x120>)
   12ddc:	4798      	blx	r3
   12dde:	6130      	str	r0, [r6, #16]
   12de0:	e7a2      	b.n	12d28 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12de2:	2001      	movs	r0, #1
   12de4:	e786      	b.n	12cf4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12de6:	2001      	movs	r0, #1
   12de8:	e784      	b.n	12cf4 <dir_next+0x18>
   12dea:	46c0      	nop			; (mov r8, r8)
   12dec:	000128c5 	.word	0x000128c5
   12df0:	00012ba1 	.word	0x00012ba1
   12df4:	00012825 	.word	0x00012825
   12df8:	00012359 	.word	0x00012359
   12dfc:	0001236b 	.word	0x0001236b

00012e00 <dir_find>:
{
   12e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e02:	46de      	mov	lr, fp
   12e04:	4657      	mov	r7, sl
   12e06:	464e      	mov	r6, r9
   12e08:	4645      	mov	r5, r8
   12e0a:	b5e0      	push	{r5, r6, r7, lr}
   12e0c:	b083      	sub	sp, #12
   12e0e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12e10:	2100      	movs	r1, #0
   12e12:	4b5a      	ldr	r3, [pc, #360]	; (12f7c <dir_find+0x17c>)
   12e14:	4798      	blx	r3
   12e16:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   12e18:	d000      	beq.n	12e1c <dir_find+0x1c>
   12e1a:	e09e      	b.n	12f5a <dir_find+0x15a>
   12e1c:	23ff      	movs	r3, #255	; 0xff
   12e1e:	4699      	mov	r9, r3
   12e20:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   12e22:	4b57      	ldr	r3, [pc, #348]	; (12f80 <dir_find+0x180>)
   12e24:	469b      	mov	fp, r3
   12e26:	e01b      	b.n	12e60 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   12e28:	2b0f      	cmp	r3, #15
   12e2a:	d030      	beq.n	12e8e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   12e2c:	4653      	mov	r3, sl
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d105      	bne.n	12e3e <dir_find+0x3e>
   12e32:	0020      	movs	r0, r4
   12e34:	4b53      	ldr	r3, [pc, #332]	; (12f84 <dir_find+0x184>)
   12e36:	4798      	blx	r3
   12e38:	4581      	cmp	r9, r0
   12e3a:	d100      	bne.n	12e3e <dir_find+0x3e>
   12e3c:	e08d      	b.n	12f5a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12e3e:	2301      	movs	r3, #1
   12e40:	425b      	negs	r3, r3
   12e42:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   12e44:	69a8      	ldr	r0, [r5, #24]
   12e46:	7ac3      	ldrb	r3, [r0, #11]
   12e48:	07db      	lsls	r3, r3, #31
   12e4a:	d400      	bmi.n	12e4e <dir_find+0x4e>
   12e4c:	e07d      	b.n	12f4a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12e4e:	23ff      	movs	r3, #255	; 0xff
   12e50:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   12e52:	2100      	movs	r1, #0
   12e54:	0028      	movs	r0, r5
   12e56:	4b4c      	ldr	r3, [pc, #304]	; (12f88 <dir_find+0x188>)
   12e58:	4798      	blx	r3
   12e5a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   12e5c:	d000      	beq.n	12e60 <dir_find+0x60>
   12e5e:	e07c      	b.n	12f5a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   12e60:	6929      	ldr	r1, [r5, #16]
   12e62:	6828      	ldr	r0, [r5, #0]
   12e64:	47d8      	blx	fp
   12e66:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   12e68:	d177      	bne.n	12f5a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   12e6a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   12e6c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12e6e:	2e00      	cmp	r6, #0
   12e70:	d100      	bne.n	12e74 <dir_find+0x74>
   12e72:	e080      	b.n	12f76 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   12e74:	7ae2      	ldrb	r2, [r4, #11]
   12e76:	233f      	movs	r3, #63	; 0x3f
   12e78:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   12e7a:	2ee5      	cmp	r6, #229	; 0xe5
   12e7c:	d100      	bne.n	12e80 <dir_find+0x80>
   12e7e:	e077      	b.n	12f70 <dir_find+0x170>
   12e80:	0712      	lsls	r2, r2, #28
   12e82:	d5d1      	bpl.n	12e28 <dir_find+0x28>
   12e84:	2b0f      	cmp	r3, #15
   12e86:	d002      	beq.n	12e8e <dir_find+0x8e>
			ord = 0xFF;
   12e88:	23ff      	movs	r3, #255	; 0xff
   12e8a:	469a      	mov	sl, r3
   12e8c:	e7e1      	b.n	12e52 <dir_find+0x52>
				if (dj->lfn) {
   12e8e:	69ef      	ldr	r7, [r5, #28]
   12e90:	2f00      	cmp	r7, #0
   12e92:	d0de      	beq.n	12e52 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   12e94:	0673      	lsls	r3, r6, #25
   12e96:	d518      	bpl.n	12eca <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   12e98:	7b63      	ldrb	r3, [r4, #13]
   12e9a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   12e9c:	2340      	movs	r3, #64	; 0x40
   12e9e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   12ea0:	88eb      	ldrh	r3, [r5, #6]
   12ea2:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12ea4:	7b63      	ldrb	r3, [r4, #13]
   12ea6:	9300      	str	r3, [sp, #0]
   12ea8:	22ff      	movs	r2, #255	; 0xff
   12eaa:	4692      	mov	sl, r2
   12eac:	454b      	cmp	r3, r9
   12eae:	d1d0      	bne.n	12e52 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   12eb0:	7823      	ldrb	r3, [r4, #0]
   12eb2:	3abf      	subs	r2, #191	; 0xbf
   12eb4:	4393      	bics	r3, r2
   12eb6:	3b01      	subs	r3, #1
   12eb8:	005a      	lsls	r2, r3, #1
   12eba:	18d2      	adds	r2, r2, r3
   12ebc:	0092      	lsls	r2, r2, #2
   12ebe:	4692      	mov	sl, r2
   12ec0:	449a      	add	sl, r3
	s = 0; wc = 1;
   12ec2:	2201      	movs	r2, #1
   12ec4:	2300      	movs	r3, #0
   12ec6:	4699      	mov	r9, r3
   12ec8:	e01d      	b.n	12f06 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12eca:	45b2      	cmp	sl, r6
   12ecc:	d0ea      	beq.n	12ea4 <dir_find+0xa4>
   12ece:	23ff      	movs	r3, #255	; 0xff
   12ed0:	469a      	mov	sl, r3
   12ed2:	e7be      	b.n	12e52 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   12ed4:	4b2d      	ldr	r3, [pc, #180]	; (12f8c <dir_find+0x18c>)
   12ed6:	4798      	blx	r3
   12ed8:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   12eda:	4653      	mov	r3, sl
   12edc:	2bfe      	cmp	r3, #254	; 0xfe
   12ede:	d81f      	bhi.n	12f20 <dir_find+0x120>
   12ee0:	2301      	movs	r3, #1
   12ee2:	4453      	add	r3, sl
   12ee4:	4698      	mov	r8, r3
   12ee6:	4653      	mov	r3, sl
   12ee8:	005b      	lsls	r3, r3, #1
   12eea:	5bd8      	ldrh	r0, [r3, r7]
   12eec:	4b27      	ldr	r3, [pc, #156]	; (12f8c <dir_find+0x18c>)
   12eee:	4798      	blx	r3
   12ef0:	0002      	movs	r2, r0
   12ef2:	9b01      	ldr	r3, [sp, #4]
   12ef4:	4283      	cmp	r3, r0
   12ef6:	d113      	bne.n	12f20 <dir_find+0x120>
   12ef8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   12efa:	2301      	movs	r3, #1
   12efc:	469c      	mov	ip, r3
   12efe:	44e1      	add	r9, ip
   12f00:	464b      	mov	r3, r9
   12f02:	2b0d      	cmp	r3, #13
   12f04:	d011      	beq.n	12f2a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   12f06:	4b22      	ldr	r3, [pc, #136]	; (12f90 <dir_find+0x190>)
   12f08:	4649      	mov	r1, r9
   12f0a:	5cc9      	ldrb	r1, [r1, r3]
   12f0c:	1863      	adds	r3, r4, r1
   12f0e:	785b      	ldrb	r3, [r3, #1]
   12f10:	021b      	lsls	r3, r3, #8
   12f12:	5c60      	ldrb	r0, [r4, r1]
   12f14:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   12f16:	2a00      	cmp	r2, #0
   12f18:	d1dc      	bne.n	12ed4 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   12f1a:	4b1e      	ldr	r3, [pc, #120]	; (12f94 <dir_find+0x194>)
   12f1c:	4298      	cmp	r0, r3
   12f1e:	d0ec      	beq.n	12efa <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12f20:	9b00      	ldr	r3, [sp, #0]
   12f22:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12f24:	23ff      	movs	r3, #255	; 0xff
   12f26:	469a      	mov	sl, r3
   12f28:	e793      	b.n	12e52 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   12f2a:	7823      	ldrb	r3, [r4, #0]
   12f2c:	065b      	lsls	r3, r3, #25
   12f2e:	d506      	bpl.n	12f3e <dir_find+0x13e>
   12f30:	2a00      	cmp	r2, #0
   12f32:	d004      	beq.n	12f3e <dir_find+0x13e>
   12f34:	4653      	mov	r3, sl
   12f36:	005b      	lsls	r3, r3, #1
   12f38:	5bdb      	ldrh	r3, [r3, r7]
   12f3a:	2b00      	cmp	r3, #0
   12f3c:	d1f0      	bne.n	12f20 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12f3e:	3e01      	subs	r6, #1
   12f40:	b2f3      	uxtb	r3, r6
   12f42:	469a      	mov	sl, r3
   12f44:	9b00      	ldr	r3, [sp, #0]
   12f46:	4699      	mov	r9, r3
   12f48:	e783      	b.n	12e52 <dir_find+0x52>
   12f4a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   12f4c:	5ce1      	ldrb	r1, [r4, r3]
   12f4e:	5cc2      	ldrb	r2, [r0, r3]
   12f50:	4291      	cmp	r1, r2
   12f52:	d10a      	bne.n	12f6a <dir_find+0x16a>
   12f54:	3301      	adds	r3, #1
   12f56:	2b0b      	cmp	r3, #11
   12f58:	d1f8      	bne.n	12f4c <dir_find+0x14c>
}
   12f5a:	0038      	movs	r0, r7
   12f5c:	b003      	add	sp, #12
   12f5e:	bc3c      	pop	{r2, r3, r4, r5}
   12f60:	4690      	mov	r8, r2
   12f62:	4699      	mov	r9, r3
   12f64:	46a2      	mov	sl, r4
   12f66:	46ab      	mov	fp, r5
   12f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12f6a:	23ff      	movs	r3, #255	; 0xff
   12f6c:	469a      	mov	sl, r3
   12f6e:	e770      	b.n	12e52 <dir_find+0x52>
			ord = 0xFF;
   12f70:	23ff      	movs	r3, #255	; 0xff
   12f72:	469a      	mov	sl, r3
   12f74:	e76d      	b.n	12e52 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12f76:	2704      	movs	r7, #4
   12f78:	e7ef      	b.n	12f5a <dir_find+0x15a>
   12f7a:	46c0      	nop			; (mov r8, r8)
   12f7c:	000129c1 	.word	0x000129c1
   12f80:	00012825 	.word	0x00012825
   12f84:	00012383 	.word	0x00012383
   12f88:	00012cdd 	.word	0x00012cdd
   12f8c:	00013b91 	.word	0x00013b91
   12f90:	0001934c 	.word	0x0001934c
   12f94:	0000ffff 	.word	0x0000ffff

00012f98 <dir_register>:
{
   12f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f9a:	46de      	mov	lr, fp
   12f9c:	4657      	mov	r7, sl
   12f9e:	464e      	mov	r6, r9
   12fa0:	4645      	mov	r5, r8
   12fa2:	b5e0      	push	{r5, r6, r7, lr}
   12fa4:	b089      	sub	sp, #36	; 0x24
   12fa6:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   12fa8:	6987      	ldr	r7, [r0, #24]
   12faa:	69c3      	ldr	r3, [r0, #28]
   12fac:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   12fae:	ad05      	add	r5, sp, #20
   12fb0:	220c      	movs	r2, #12
   12fb2:	0039      	movs	r1, r7
   12fb4:	0028      	movs	r0, r5
   12fb6:	4ba7      	ldr	r3, [pc, #668]	; (13254 <dir_register+0x2bc>)
   12fb8:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   12fba:	7aeb      	ldrb	r3, [r5, #11]
   12fbc:	07db      	lsls	r3, r3, #31
   12fbe:	d400      	bmi.n	12fc2 <dir_register+0x2a>
   12fc0:	e070      	b.n	130a4 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   12fc2:	2300      	movs	r3, #0
   12fc4:	72fb      	strb	r3, [r7, #11]
   12fc6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   12fc8:	220b      	movs	r2, #11
   12fca:	a905      	add	r1, sp, #20
   12fcc:	0038      	movs	r0, r7
   12fce:	4ba1      	ldr	r3, [pc, #644]	; (13254 <dir_register+0x2bc>)
   12fd0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12fd2:	2301      	movs	r3, #1
		ns[i--] = c;
   12fd4:	ad03      	add	r5, sp, #12
   12fd6:	001e      	movs	r6, r3
   12fd8:	46a0      	mov	r8, r4
   12fda:	e049      	b.n	13070 <dir_register+0xd8>
   12fdc:	3801      	subs	r0, #1
   12fde:	1829      	adds	r1, r5, r0
   12fe0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   12fe2:	091b      	lsrs	r3, r3, #4
   12fe4:	b29b      	uxth	r3, r3
	} while (seq);
   12fe6:	2b00      	cmp	r3, #0
   12fe8:	d007      	beq.n	12ffa <dir_register+0x62>
		c = (seq % 16) + '0';
   12fea:	0021      	movs	r1, r4
   12fec:	4019      	ands	r1, r3
   12fee:	000a      	movs	r2, r1
   12ff0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   12ff2:	2a39      	cmp	r2, #57	; 0x39
   12ff4:	d9f2      	bls.n	12fdc <dir_register+0x44>
   12ff6:	3207      	adds	r2, #7
   12ff8:	e7f0      	b.n	12fdc <dir_register+0x44>
	ns[i] = '~';
   12ffa:	337e      	adds	r3, #126	; 0x7e
   12ffc:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   12ffe:	2800      	cmp	r0, #0
   13000:	d00a      	beq.n	13018 <dir_register+0x80>
   13002:	783b      	ldrb	r3, [r7, #0]
   13004:	2b20      	cmp	r3, #32
   13006:	d009      	beq.n	1301c <dir_register+0x84>
   13008:	2300      	movs	r3, #0
   1300a:	3301      	adds	r3, #1
   1300c:	4298      	cmp	r0, r3
   1300e:	d007      	beq.n	13020 <dir_register+0x88>
   13010:	5cfa      	ldrb	r2, [r7, r3]
   13012:	2a20      	cmp	r2, #32
   13014:	d1f9      	bne.n	1300a <dir_register+0x72>
   13016:	e009      	b.n	1302c <dir_register+0x94>
   13018:	0003      	movs	r3, r0
   1301a:	e007      	b.n	1302c <dir_register+0x94>
   1301c:	2300      	movs	r3, #0
   1301e:	e005      	b.n	1302c <dir_register+0x94>
   13020:	0003      	movs	r3, r0
   13022:	e003      	b.n	1302c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   13024:	54fa      	strb	r2, [r7, r3]
   13026:	3301      	adds	r3, #1
	} while (j < 8);
   13028:	2b07      	cmp	r3, #7
   1302a:	d805      	bhi.n	13038 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1302c:	2220      	movs	r2, #32
   1302e:	2807      	cmp	r0, #7
   13030:	d8f8      	bhi.n	13024 <dir_register+0x8c>
   13032:	5c2a      	ldrb	r2, [r5, r0]
   13034:	3001      	adds	r0, #1
   13036:	e7f5      	b.n	13024 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   13038:	4640      	mov	r0, r8
   1303a:	4b87      	ldr	r3, [pc, #540]	; (13258 <dir_register+0x2c0>)
   1303c:	4798      	blx	r3
			if (res != FR_OK) break;
   1303e:	2800      	cmp	r0, #0
   13040:	d11c      	bne.n	1307c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   13042:	3601      	adds	r6, #1
   13044:	b2b6      	uxth	r6, r6
   13046:	2e64      	cmp	r6, #100	; 0x64
   13048:	d015      	beq.n	13076 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   1304a:	220b      	movs	r2, #11
   1304c:	a905      	add	r1, sp, #20
   1304e:	0038      	movs	r0, r7
   13050:	4b80      	ldr	r3, [pc, #512]	; (13254 <dir_register+0x2bc>)
   13052:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   13054:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   13056:	2e05      	cmp	r6, #5
   13058:	d90a      	bls.n	13070 <dir_register+0xd8>
   1305a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1305c:	085a      	lsrs	r2, r3, #1
   1305e:	03db      	lsls	r3, r3, #15
   13060:	4313      	orrs	r3, r2
   13062:	880a      	ldrh	r2, [r1, #0]
   13064:	189b      	adds	r3, r3, r2
   13066:	b29b      	uxth	r3, r3
   13068:	3102      	adds	r1, #2
   1306a:	880a      	ldrh	r2, [r1, #0]
   1306c:	2a00      	cmp	r2, #0
   1306e:	d1f5      	bne.n	1305c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   13070:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   13072:	240f      	movs	r4, #15
   13074:	e7b9      	b.n	12fea <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   13076:	2307      	movs	r3, #7
   13078:	4698      	mov	r8, r3
   1307a:	e006      	b.n	1308a <dir_register+0xf2>
   1307c:	4644      	mov	r4, r8
   1307e:	4680      	mov	r8, r0
   13080:	2e64      	cmp	r6, #100	; 0x64
   13082:	d100      	bne.n	13086 <dir_register+0xee>
   13084:	e0a5      	b.n	131d2 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   13086:	2804      	cmp	r0, #4
   13088:	d007      	beq.n	1309a <dir_register+0x102>
}
   1308a:	4640      	mov	r0, r8
   1308c:	b009      	add	sp, #36	; 0x24
   1308e:	bc3c      	pop	{r2, r3, r4, r5}
   13090:	4690      	mov	r8, r2
   13092:	4699      	mov	r9, r3
   13094:	46a2      	mov	sl, r4
   13096:	46ab      	mov	fp, r5
   13098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1309a:	ab05      	add	r3, sp, #20
   1309c:	7adb      	ldrb	r3, [r3, #11]
   1309e:	72fb      	strb	r3, [r7, #11]
   130a0:	4653      	mov	r3, sl
   130a2:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   130a4:	ab05      	add	r3, sp, #20
   130a6:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   130a8:	2201      	movs	r2, #1
   130aa:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   130ac:	079b      	lsls	r3, r3, #30
   130ae:	d511      	bpl.n	130d4 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   130b0:	4653      	mov	r3, sl
   130b2:	881b      	ldrh	r3, [r3, #0]
   130b4:	2b00      	cmp	r3, #0
   130b6:	d01b      	beq.n	130f0 <dir_register+0x158>
   130b8:	2000      	movs	r0, #0
   130ba:	4652      	mov	r2, sl
   130bc:	3001      	adds	r0, #1
   130be:	b280      	uxth	r0, r0
   130c0:	0043      	lsls	r3, r0, #1
   130c2:	5a9b      	ldrh	r3, [r3, r2]
   130c4:	2b00      	cmp	r3, #0
   130c6:	d1f9      	bne.n	130bc <dir_register+0x124>
		ne = (ne + 25) / 13;
   130c8:	3019      	adds	r0, #25
   130ca:	210d      	movs	r1, #13
   130cc:	4b63      	ldr	r3, [pc, #396]	; (1325c <dir_register+0x2c4>)
   130ce:	4798      	blx	r3
   130d0:	b283      	uxth	r3, r0
   130d2:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   130d4:	2100      	movs	r1, #0
   130d6:	0020      	movs	r0, r4
   130d8:	4b61      	ldr	r3, [pc, #388]	; (13260 <dir_register+0x2c8>)
   130da:	4798      	blx	r3
   130dc:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   130de:	2800      	cmp	r0, #0
   130e0:	d1d3      	bne.n	1308a <dir_register+0xf2>
   130e2:	4682      	mov	sl, r0
   130e4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   130e6:	4f5f      	ldr	r7, [pc, #380]	; (13264 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   130e8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   130ea:	4b5f      	ldr	r3, [pc, #380]	; (13268 <dir_register+0x2d0>)
   130ec:	4699      	mov	r9, r3
   130ee:	e00b      	b.n	13108 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   130f0:	2000      	movs	r0, #0
   130f2:	e7e9      	b.n	130c8 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   130f4:	1c6b      	adds	r3, r5, #1
   130f6:	b29b      	uxth	r3, r3
   130f8:	459b      	cmp	fp, r3
   130fa:	d06d      	beq.n	131d8 <dir_register+0x240>
   130fc:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   130fe:	2101      	movs	r1, #1
   13100:	0020      	movs	r0, r4
   13102:	47c8      	blx	r9
	} while (res == FR_OK);
   13104:	2800      	cmp	r0, #0
   13106:	d112      	bne.n	1312e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   13108:	6921      	ldr	r1, [r4, #16]
   1310a:	6820      	ldr	r0, [r4, #0]
   1310c:	47b8      	blx	r7
		if (res != FR_OK) break;
   1310e:	2800      	cmp	r0, #0
   13110:	d000      	beq.n	13114 <dir_register+0x17c>
   13112:	e098      	b.n	13246 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   13114:	6963      	ldr	r3, [r4, #20]
   13116:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   13118:	2be5      	cmp	r3, #229	; 0xe5
   1311a:	d001      	beq.n	13120 <dir_register+0x188>
   1311c:	2b00      	cmp	r3, #0
   1311e:	d104      	bne.n	1312a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   13120:	2d00      	cmp	r5, #0
   13122:	d1e7      	bne.n	130f4 <dir_register+0x15c>
   13124:	88e3      	ldrh	r3, [r4, #6]
   13126:	469a      	mov	sl, r3
   13128:	e7e4      	b.n	130f4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   1312a:	0035      	movs	r5, r6
   1312c:	e7e7      	b.n	130fe <dir_register+0x166>
   1312e:	4680      	mov	r8, r0
   13130:	e7ab      	b.n	1308a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   13132:	4651      	mov	r1, sl
   13134:	0020      	movs	r0, r4
   13136:	4b4a      	ldr	r3, [pc, #296]	; (13260 <dir_register+0x2c8>)
   13138:	4798      	blx	r3
   1313a:	4680      	mov	r8, r0
		if (res == FR_OK) {
   1313c:	2800      	cmp	r0, #0
   1313e:	d1a4      	bne.n	1308a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   13140:	69a0      	ldr	r0, [r4, #24]
   13142:	4b4a      	ldr	r3, [pc, #296]	; (1326c <dir_register+0x2d4>)
   13144:	4798      	blx	r3
   13146:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   13148:	46a8      	mov	r8, r5
   1314a:	e01f      	b.n	1318c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1314c:	0022      	movs	r2, r4
   1314e:	e067      	b.n	13220 <dir_register+0x288>
   13150:	465e      	mov	r6, fp
   13152:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   13154:	4946      	ldr	r1, [pc, #280]	; (13270 <dir_register+0x2d8>)
   13156:	428b      	cmp	r3, r1
   13158:	d003      	beq.n	13162 <dir_register+0x1ca>
   1315a:	0052      	lsls	r2, r2, #1
   1315c:	5b93      	ldrh	r3, [r2, r6]
   1315e:	2b00      	cmp	r3, #0
   13160:	d103      	bne.n	1316a <dir_register+0x1d2>
   13162:	2340      	movs	r3, #64	; 0x40
   13164:	464a      	mov	r2, r9
   13166:	431a      	orrs	r2, r3
   13168:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1316a:	464b      	mov	r3, r9
   1316c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   1316e:	2301      	movs	r3, #1
   13170:	6822      	ldr	r2, [r4, #0]
   13172:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   13174:	2100      	movs	r1, #0
   13176:	0020      	movs	r0, r4
   13178:	4b3b      	ldr	r3, [pc, #236]	; (13268 <dir_register+0x2d0>)
   1317a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   1317c:	2800      	cmp	r0, #0
   1317e:	d166      	bne.n	1324e <dir_register+0x2b6>
   13180:	4645      	mov	r5, r8
   13182:	3d01      	subs	r5, #1
   13184:	b2ab      	uxth	r3, r5
   13186:	4698      	mov	r8, r3
   13188:	2b00      	cmp	r3, #0
   1318a:	d027      	beq.n	131dc <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   1318c:	6921      	ldr	r1, [r4, #16]
   1318e:	6820      	ldr	r0, [r4, #0]
   13190:	4b34      	ldr	r3, [pc, #208]	; (13264 <dir_register+0x2cc>)
   13192:	4798      	blx	r3
				if (res != FR_OK) break;
   13194:	2800      	cmp	r0, #0
   13196:	d158      	bne.n	1324a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   13198:	69e6      	ldr	r6, [r4, #28]
   1319a:	6960      	ldr	r0, [r4, #20]
   1319c:	4643      	mov	r3, r8
   1319e:	466a      	mov	r2, sp
   131a0:	70d3      	strb	r3, [r2, #3]
   131a2:	78d3      	ldrb	r3, [r2, #3]
   131a4:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   131a6:	7913      	ldrb	r3, [r2, #4]
   131a8:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   131aa:	230f      	movs	r3, #15
   131ac:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   131ae:	2300      	movs	r3, #0
   131b0:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   131b2:	7683      	strb	r3, [r0, #26]
   131b4:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   131b6:	464b      	mov	r3, r9
   131b8:	3b01      	subs	r3, #1
   131ba:	005a      	lsls	r2, r3, #1
   131bc:	18d2      	adds	r2, r2, r3
   131be:	0092      	lsls	r2, r2, #2
   131c0:	18d2      	adds	r2, r2, r3
   131c2:	492c      	ldr	r1, [pc, #176]	; (13274 <dir_register+0x2dc>)
   131c4:	000d      	movs	r5, r1
   131c6:	350d      	adds	r5, #13
	s = wc = 0;
   131c8:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   131ca:	4f29      	ldr	r7, [pc, #164]	; (13270 <dir_register+0x2d8>)
   131cc:	46b3      	mov	fp, r6
   131ce:	46a4      	mov	ip, r4
   131d0:	e029      	b.n	13226 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   131d2:	2307      	movs	r3, #7
   131d4:	4698      	mov	r8, r3
   131d6:	e758      	b.n	1308a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   131d8:	2b01      	cmp	r3, #1
   131da:	d8aa      	bhi.n	13132 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   131dc:	6921      	ldr	r1, [r4, #16]
   131de:	6820      	ldr	r0, [r4, #0]
   131e0:	4b20      	ldr	r3, [pc, #128]	; (13264 <dir_register+0x2cc>)
   131e2:	4798      	blx	r3
   131e4:	4680      	mov	r8, r0
		if (res == FR_OK) {
   131e6:	2800      	cmp	r0, #0
   131e8:	d000      	beq.n	131ec <dir_register+0x254>
   131ea:	e74e      	b.n	1308a <dir_register+0xf2>
			dir = dj->dir;
   131ec:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   131ee:	2220      	movs	r2, #32
   131f0:	2100      	movs	r1, #0
   131f2:	0028      	movs	r0, r5
   131f4:	4b20      	ldr	r3, [pc, #128]	; (13278 <dir_register+0x2e0>)
   131f6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   131f8:	220b      	movs	r2, #11
   131fa:	69a1      	ldr	r1, [r4, #24]
   131fc:	0028      	movs	r0, r5
   131fe:	4b15      	ldr	r3, [pc, #84]	; (13254 <dir_register+0x2bc>)
   13200:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   13202:	69a3      	ldr	r3, [r4, #24]
   13204:	7ada      	ldrb	r2, [r3, #11]
   13206:	2318      	movs	r3, #24
   13208:	4013      	ands	r3, r2
   1320a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   1320c:	6823      	ldr	r3, [r4, #0]
   1320e:	2201      	movs	r2, #1
   13210:	711a      	strb	r2, [r3, #4]
   13212:	e73a      	b.n	1308a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   13214:	780c      	ldrb	r4, [r1, #0]
   13216:	26ff      	movs	r6, #255	; 0xff
   13218:	5506      	strb	r6, [r0, r4]
   1321a:	1904      	adds	r4, r0, r4
   1321c:	26ff      	movs	r6, #255	; 0xff
   1321e:	7066      	strb	r6, [r4, #1]
   13220:	3101      	adds	r1, #1
	} while (++s < 13);
   13222:	42a9      	cmp	r1, r5
   13224:	d094      	beq.n	13150 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   13226:	42bb      	cmp	r3, r7
   13228:	d0f4      	beq.n	13214 <dir_register+0x27c>
   1322a:	1c54      	adds	r4, r2, #1
   1322c:	0052      	lsls	r2, r2, #1
   1322e:	465b      	mov	r3, fp
   13230:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   13232:	780a      	ldrb	r2, [r1, #0]
   13234:	5483      	strb	r3, [r0, r2]
   13236:	1882      	adds	r2, r0, r2
   13238:	0a1e      	lsrs	r6, r3, #8
   1323a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1323c:	2b00      	cmp	r3, #0
   1323e:	d185      	bne.n	1314c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   13240:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   13242:	003b      	movs	r3, r7
   13244:	e7ec      	b.n	13220 <dir_register+0x288>
   13246:	4680      	mov	r8, r0
   13248:	e71f      	b.n	1308a <dir_register+0xf2>
   1324a:	4680      	mov	r8, r0
   1324c:	e71d      	b.n	1308a <dir_register+0xf2>
   1324e:	4680      	mov	r8, r0
   13250:	e71b      	b.n	1308a <dir_register+0xf2>
   13252:	46c0      	nop			; (mov r8, r8)
   13254:	00012345 	.word	0x00012345
   13258:	00012e01 	.word	0x00012e01
   1325c:	000167ad 	.word	0x000167ad
   13260:	000129c1 	.word	0x000129c1
   13264:	00012825 	.word	0x00012825
   13268:	00012cdd 	.word	0x00012cdd
   1326c:	00012383 	.word	0x00012383
   13270:	0000ffff 	.word	0x0000ffff
   13274:	0001934c 	.word	0x0001934c
   13278:	00012359 	.word	0x00012359

0001327c <sync>:
{
   1327c:	b570      	push	{r4, r5, r6, lr}
   1327e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   13280:	2100      	movs	r1, #0
   13282:	4b2c      	ldr	r3, [pc, #176]	; (13334 <sync+0xb8>)
   13284:	4798      	blx	r3
	if (res == FR_OK) {
   13286:	2800      	cmp	r0, #0
   13288:	d10a      	bne.n	132a0 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1328a:	7823      	ldrb	r3, [r4, #0]
   1328c:	2b03      	cmp	r3, #3
   1328e:	d008      	beq.n	132a2 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   13290:	7860      	ldrb	r0, [r4, #1]
   13292:	2200      	movs	r2, #0
   13294:	2100      	movs	r1, #0
   13296:	4b28      	ldr	r3, [pc, #160]	; (13338 <sync+0xbc>)
   13298:	4798      	blx	r3
   1329a:	1e43      	subs	r3, r0, #1
   1329c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   1329e:	b2c0      	uxtb	r0, r0
}
   132a0:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   132a2:	7963      	ldrb	r3, [r4, #5]
   132a4:	2b00      	cmp	r3, #0
   132a6:	d0f3      	beq.n	13290 <sync+0x14>
			fs->winsect = 0;
   132a8:	2600      	movs	r6, #0
   132aa:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   132ac:	0025      	movs	r5, r4
   132ae:	3530      	adds	r5, #48	; 0x30
   132b0:	2280      	movs	r2, #128	; 0x80
   132b2:	0092      	lsls	r2, r2, #2
   132b4:	2100      	movs	r1, #0
   132b6:	0028      	movs	r0, r5
   132b8:	4b20      	ldr	r3, [pc, #128]	; (1333c <sync+0xc0>)
   132ba:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   132bc:	2255      	movs	r2, #85	; 0x55
   132be:	4b20      	ldr	r3, [pc, #128]	; (13340 <sync+0xc4>)
   132c0:	54e2      	strb	r2, [r4, r3]
   132c2:	3255      	adds	r2, #85	; 0x55
   132c4:	4b1f      	ldr	r3, [pc, #124]	; (13344 <sync+0xc8>)
   132c6:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   132c8:	3bde      	subs	r3, #222	; 0xde
   132ca:	3bff      	subs	r3, #255	; 0xff
   132cc:	3a7a      	subs	r2, #122	; 0x7a
   132ce:	54a3      	strb	r3, [r4, r2]
   132d0:	3201      	adds	r2, #1
   132d2:	54a3      	strb	r3, [r4, r2]
   132d4:	330f      	adds	r3, #15
   132d6:	3201      	adds	r2, #1
   132d8:	54a3      	strb	r3, [r4, r2]
   132da:	320f      	adds	r2, #15
   132dc:	2133      	movs	r1, #51	; 0x33
   132de:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   132e0:	313f      	adds	r1, #63	; 0x3f
   132e2:	2085      	movs	r0, #133	; 0x85
   132e4:	0080      	lsls	r0, r0, #2
   132e6:	5421      	strb	r1, [r4, r0]
   132e8:	4817      	ldr	r0, [pc, #92]	; (13348 <sync+0xcc>)
   132ea:	5421      	strb	r1, [r4, r0]
   132ec:	4917      	ldr	r1, [pc, #92]	; (1334c <sync+0xd0>)
   132ee:	5462      	strb	r2, [r4, r1]
   132f0:	4a17      	ldr	r2, [pc, #92]	; (13350 <sync+0xd4>)
   132f2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   132f4:	6923      	ldr	r3, [r4, #16]
   132f6:	3201      	adds	r2, #1
   132f8:	54a3      	strb	r3, [r4, r2]
   132fa:	0a19      	lsrs	r1, r3, #8
   132fc:	4a15      	ldr	r2, [pc, #84]	; (13354 <sync+0xd8>)
   132fe:	54a1      	strb	r1, [r4, r2]
   13300:	0c19      	lsrs	r1, r3, #16
   13302:	4a15      	ldr	r2, [pc, #84]	; (13358 <sync+0xdc>)
   13304:	54a1      	strb	r1, [r4, r2]
   13306:	0e1b      	lsrs	r3, r3, #24
   13308:	4a14      	ldr	r2, [pc, #80]	; (1335c <sync+0xe0>)
   1330a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   1330c:	68e3      	ldr	r3, [r4, #12]
   1330e:	3201      	adds	r2, #1
   13310:	54a3      	strb	r3, [r4, r2]
   13312:	0a19      	lsrs	r1, r3, #8
   13314:	4a12      	ldr	r2, [pc, #72]	; (13360 <sync+0xe4>)
   13316:	54a1      	strb	r1, [r4, r2]
   13318:	0c19      	lsrs	r1, r3, #16
   1331a:	4a12      	ldr	r2, [pc, #72]	; (13364 <sync+0xe8>)
   1331c:	54a1      	strb	r1, [r4, r2]
   1331e:	0e1b      	lsrs	r3, r3, #24
   13320:	4a11      	ldr	r2, [pc, #68]	; (13368 <sync+0xec>)
   13322:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   13324:	7860      	ldrb	r0, [r4, #1]
   13326:	2301      	movs	r3, #1
   13328:	6962      	ldr	r2, [r4, #20]
   1332a:	0029      	movs	r1, r5
   1332c:	4d0f      	ldr	r5, [pc, #60]	; (1336c <sync+0xf0>)
   1332e:	47a8      	blx	r5
			fs->fsi_flag = 0;
   13330:	7166      	strb	r6, [r4, #5]
   13332:	e7ad      	b.n	13290 <sync+0x14>
   13334:	00012825 	.word	0x00012825
   13338:	00012289 	.word	0x00012289
   1333c:	00012359 	.word	0x00012359
   13340:	0000022e 	.word	0x0000022e
   13344:	0000022f 	.word	0x0000022f
   13348:	00000215 	.word	0x00000215
   1334c:	00000216 	.word	0x00000216
   13350:	00000217 	.word	0x00000217
   13354:	00000219 	.word	0x00000219
   13358:	0000021a 	.word	0x0000021a
   1335c:	0000021b 	.word	0x0000021b
   13360:	0000021d 	.word	0x0000021d
   13364:	0000021e 	.word	0x0000021e
   13368:	0000021f 	.word	0x0000021f
   1336c:	00012205 	.word	0x00012205

00013370 <follow_path>:
{
   13370:	b5f0      	push	{r4, r5, r6, r7, lr}
   13372:	46de      	mov	lr, fp
   13374:	4657      	mov	r7, sl
   13376:	464e      	mov	r6, r9
   13378:	4645      	mov	r5, r8
   1337a:	b5e0      	push	{r5, r6, r7, lr}
   1337c:	b083      	sub	sp, #12
   1337e:	4682      	mov	sl, r0
   13380:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   13382:	780b      	ldrb	r3, [r1, #0]
   13384:	2b2f      	cmp	r3, #47	; 0x2f
   13386:	d00f      	beq.n	133a8 <follow_path+0x38>
   13388:	2b5c      	cmp	r3, #92	; 0x5c
   1338a:	d00d      	beq.n	133a8 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   1338c:	2300      	movs	r3, #0
   1338e:	4652      	mov	r2, sl
   13390:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   13392:	782b      	ldrb	r3, [r5, #0]
   13394:	4657      	mov	r7, sl
   13396:	2b1f      	cmp	r3, #31
   13398:	d809      	bhi.n	133ae <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   1339a:	2100      	movs	r1, #0
   1339c:	4650      	mov	r0, sl
   1339e:	4bb2      	ldr	r3, [pc, #712]	; (13668 <follow_path+0x2f8>)
   133a0:	4798      	blx	r3
		dj->dir = 0;
   133a2:	2300      	movs	r3, #0
   133a4:	617b      	str	r3, [r7, #20]
   133a6:	e13a      	b.n	1361e <follow_path+0x2ae>
		path++;
   133a8:	3501      	adds	r5, #1
   133aa:	e7ef      	b.n	1338c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   133ac:	3501      	adds	r5, #1
   133ae:	7828      	ldrb	r0, [r5, #0]
   133b0:	282f      	cmp	r0, #47	; 0x2f
   133b2:	d0fb      	beq.n	133ac <follow_path+0x3c>
   133b4:	285c      	cmp	r0, #92	; 0x5c
   133b6:	d0f9      	beq.n	133ac <follow_path+0x3c>
	lfn = dj->lfn;
   133b8:	69fb      	ldr	r3, [r7, #28]
   133ba:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   133bc:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   133be:	281f      	cmp	r0, #31
   133c0:	d800      	bhi.n	133c4 <follow_path+0x54>
   133c2:	e13b      	b.n	1363c <follow_path+0x2cc>
   133c4:	282f      	cmp	r0, #47	; 0x2f
   133c6:	d100      	bne.n	133ca <follow_path+0x5a>
   133c8:	e13b      	b.n	13642 <follow_path+0x2d2>
   133ca:	285c      	cmp	r0, #92	; 0x5c
   133cc:	d100      	bne.n	133d0 <follow_path+0x60>
   133ce:	e13b      	b.n	13648 <follow_path+0x2d8>
   133d0:	1c6e      	adds	r6, r5, #1
   133d2:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   133d4:	2380      	movs	r3, #128	; 0x80
   133d6:	005b      	lsls	r3, r3, #1
   133d8:	4698      	mov	r8, r3
   133da:	46bb      	mov	fp, r7
   133dc:	002b      	movs	r3, r5
   133de:	0025      	movs	r5, r4
   133e0:	0034      	movs	r4, r6
   133e2:	4656      	mov	r6, sl
   133e4:	4699      	mov	r9, r3
   133e6:	e011      	b.n	1340c <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   133e8:	2b00      	cmp	r3, #0
   133ea:	d135      	bne.n	13458 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   133ec:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   133ee:	1c6b      	adds	r3, r5, #1
   133f0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   133f2:	281f      	cmp	r0, #31
   133f4:	d91e      	bls.n	13434 <follow_path+0xc4>
   133f6:	282f      	cmp	r0, #47	; 0x2f
   133f8:	d100      	bne.n	133fc <follow_path+0x8c>
   133fa:	e128      	b.n	1364e <follow_path+0x2de>
   133fc:	285c      	cmp	r0, #92	; 0x5c
   133fe:	d100      	bne.n	13402 <follow_path+0x92>
   13400:	e142      	b.n	13688 <follow_path+0x318>
   13402:	3602      	adds	r6, #2
   13404:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   13406:	4543      	cmp	r3, r8
   13408:	d026      	beq.n	13458 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   1340a:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   1340c:	2101      	movs	r1, #1
   1340e:	4b97      	ldr	r3, [pc, #604]	; (1366c <follow_path+0x2fc>)
   13410:	4798      	blx	r3
   13412:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   13414:	d020      	beq.n	13458 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   13416:	287f      	cmp	r0, #127	; 0x7f
   13418:	d8e8      	bhi.n	133ec <follow_path+0x7c>
	while (*str && *str != chr) str++;
   1341a:	2822      	cmp	r0, #34	; 0x22
   1341c:	d100      	bne.n	13420 <follow_path+0xb0>
   1341e:	e0fd      	b.n	1361c <follow_path+0x2ac>
   13420:	232a      	movs	r3, #42	; 0x2a
   13422:	4a93      	ldr	r2, [pc, #588]	; (13670 <follow_path+0x300>)
   13424:	b29f      	uxth	r7, r3
   13426:	428f      	cmp	r7, r1
   13428:	d0de      	beq.n	133e8 <follow_path+0x78>
   1342a:	3201      	adds	r2, #1
   1342c:	7813      	ldrb	r3, [r2, #0]
   1342e:	2b00      	cmp	r3, #0
   13430:	d1f8      	bne.n	13424 <follow_path+0xb4>
   13432:	e7db      	b.n	133ec <follow_path+0x7c>
   13434:	002c      	movs	r4, r5
   13436:	465f      	mov	r7, fp
   13438:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   1343a:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1343c:	2604      	movs	r6, #4
   1343e:	e10b      	b.n	13658 <follow_path+0x2e8>
		di--;
   13440:	3c01      	subs	r4, #1
   13442:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   13444:	2c00      	cmp	r4, #0
   13446:	d100      	bne.n	1344a <follow_path+0xda>
   13448:	e0e8      	b.n	1361c <follow_path+0x2ac>
		w = lfn[di-1];
   1344a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   1344c:	2a20      	cmp	r2, #32
   1344e:	d0f7      	beq.n	13440 <follow_path+0xd0>
   13450:	2a2e      	cmp	r2, #46	; 0x2e
   13452:	d0f5      	beq.n	13440 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   13454:	2c00      	cmp	r4, #0
   13456:	d101      	bne.n	1345c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13458:	2006      	movs	r0, #6
	return res;
   1345a:	e0e0      	b.n	1361e <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   1345c:	0063      	lsls	r3, r4, #1
   1345e:	4698      	mov	r8, r3
   13460:	2300      	movs	r3, #0
   13462:	4652      	mov	r2, sl
   13464:	4641      	mov	r1, r8
   13466:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   13468:	220b      	movs	r2, #11
   1346a:	2120      	movs	r1, #32
   1346c:	69b8      	ldr	r0, [r7, #24]
   1346e:	4b81      	ldr	r3, [pc, #516]	; (13674 <follow_path+0x304>)
   13470:	4798      	blx	r3
   13472:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   13474:	2300      	movs	r3, #0
   13476:	e001      	b.n	1347c <follow_path+0x10c>
   13478:	3301      	adds	r3, #1
   1347a:	3202      	adds	r2, #2
   1347c:	8811      	ldrh	r1, [r2, #0]
   1347e:	2920      	cmp	r1, #32
   13480:	d0fa      	beq.n	13478 <follow_path+0x108>
   13482:	292e      	cmp	r1, #46	; 0x2e
   13484:	d0f8      	beq.n	13478 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   13486:	2b00      	cmp	r3, #0
   13488:	d001      	beq.n	1348e <follow_path+0x11e>
   1348a:	2203      	movs	r2, #3
   1348c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1348e:	4652      	mov	r2, sl
   13490:	4442      	add	r2, r8
   13492:	3a02      	subs	r2, #2
   13494:	8812      	ldrh	r2, [r2, #0]
   13496:	2a2e      	cmp	r2, #46	; 0x2e
   13498:	d009      	beq.n	134ae <follow_path+0x13e>
   1349a:	4642      	mov	r2, r8
   1349c:	3a04      	subs	r2, #4
   1349e:	4452      	add	r2, sl
   134a0:	3c01      	subs	r4, #1
   134a2:	2c00      	cmp	r4, #0
   134a4:	d003      	beq.n	134ae <follow_path+0x13e>
   134a6:	3a02      	subs	r2, #2
   134a8:	8851      	ldrh	r1, [r2, #2]
   134aa:	292e      	cmp	r1, #46	; 0x2e
   134ac:	d1f8      	bne.n	134a0 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   134ae:	2208      	movs	r2, #8
   134b0:	9201      	str	r2, [sp, #4]
   134b2:	2200      	movs	r2, #0
   134b4:	4693      	mov	fp, r2
   134b6:	4691      	mov	r9, r2
   134b8:	46a0      	mov	r8, r4
   134ba:	e006      	b.n	134ca <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   134bc:	4544      	cmp	r4, r8
   134be:	d100      	bne.n	134c2 <follow_path+0x152>
   134c0:	e0e6      	b.n	13690 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   134c2:	2303      	movs	r3, #3
   134c4:	431e      	orrs	r6, r3
   134c6:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   134c8:	0023      	movs	r3, r4
   134ca:	1c5c      	adds	r4, r3, #1
   134cc:	005b      	lsls	r3, r3, #1
   134ce:	4652      	mov	r2, sl
   134d0:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   134d2:	2800      	cmp	r0, #0
   134d4:	d02c      	beq.n	13530 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   134d6:	2820      	cmp	r0, #32
   134d8:	d0f3      	beq.n	134c2 <follow_path+0x152>
   134da:	282e      	cmp	r0, #46	; 0x2e
   134dc:	d0ee      	beq.n	134bc <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   134de:	9b01      	ldr	r3, [sp, #4]
   134e0:	459b      	cmp	fp, r3
   134e2:	d219      	bcs.n	13518 <follow_path+0x1a8>
   134e4:	4544      	cmp	r4, r8
   134e6:	d100      	bne.n	134ea <follow_path+0x17a>
   134e8:	e0d2      	b.n	13690 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   134ea:	287f      	cmp	r0, #127	; 0x7f
   134ec:	d85e      	bhi.n	135ac <follow_path+0x23c>
	while (*str && *str != chr) str++;
   134ee:	282b      	cmp	r0, #43	; 0x2b
   134f0:	d06e      	beq.n	135d0 <follow_path+0x260>
   134f2:	232c      	movs	r3, #44	; 0x2c
   134f4:	4a60      	ldr	r2, [pc, #384]	; (13678 <follow_path+0x308>)
   134f6:	b299      	uxth	r1, r3
   134f8:	4281      	cmp	r1, r0
   134fa:	d067      	beq.n	135cc <follow_path+0x25c>
   134fc:	3201      	adds	r2, #1
   134fe:	7813      	ldrb	r3, [r2, #0]
   13500:	2b00      	cmp	r3, #0
   13502:	d1f8      	bne.n	134f6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   13504:	0003      	movs	r3, r0
   13506:	3b41      	subs	r3, #65	; 0x41
   13508:	b29b      	uxth	r3, r3
   1350a:	2b19      	cmp	r3, #25
   1350c:	d86c      	bhi.n	135e8 <follow_path+0x278>
					b |= 2;
   1350e:	2302      	movs	r3, #2
   13510:	464a      	mov	r2, r9
   13512:	431a      	orrs	r2, r3
   13514:	4691      	mov	r9, r2
   13516:	e05f      	b.n	135d8 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   13518:	9b01      	ldr	r3, [sp, #4]
   1351a:	2b0b      	cmp	r3, #11
   1351c:	d03b      	beq.n	13596 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1351e:	4544      	cmp	r4, r8
   13520:	d100      	bne.n	13524 <follow_path+0x1b4>
   13522:	e0b9      	b.n	13698 <follow_path+0x328>
   13524:	2303      	movs	r3, #3
   13526:	431e      	orrs	r6, r3
   13528:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   1352a:	4544      	cmp	r4, r8
   1352c:	d800      	bhi.n	13530 <follow_path+0x1c0>
   1352e:	e0b3      	b.n	13698 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   13530:	69bb      	ldr	r3, [r7, #24]
   13532:	781a      	ldrb	r2, [r3, #0]
   13534:	2ae5      	cmp	r2, #229	; 0xe5
   13536:	d036      	beq.n	135a6 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   13538:	9b01      	ldr	r3, [sp, #4]
   1353a:	2b08      	cmp	r3, #8
   1353c:	d060      	beq.n	13600 <follow_path+0x290>
   1353e:	230c      	movs	r3, #12
   13540:	464a      	mov	r2, r9
   13542:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   13544:	2b0c      	cmp	r3, #12
   13546:	d060      	beq.n	1360a <follow_path+0x29a>
   13548:	43d2      	mvns	r2, r2
   1354a:	0792      	lsls	r2, r2, #30
   1354c:	d05d      	beq.n	1360a <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1354e:	07b2      	lsls	r2, r6, #30
   13550:	d406      	bmi.n	13560 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   13552:	2203      	movs	r2, #3
   13554:	4649      	mov	r1, r9
   13556:	400a      	ands	r2, r1
   13558:	2a01      	cmp	r2, #1
   1355a:	d059      	beq.n	13610 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1355c:	2b04      	cmp	r3, #4
   1355e:	d05a      	beq.n	13616 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   13560:	69bb      	ldr	r3, [r7, #24]
   13562:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   13564:	0038      	movs	r0, r7
   13566:	4b45      	ldr	r3, [pc, #276]	; (1367c <follow_path+0x30c>)
   13568:	4798      	blx	r3
			ns = *(dj->fn+NS);
   1356a:	69bb      	ldr	r3, [r7, #24]
   1356c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   1356e:	2800      	cmp	r0, #0
   13570:	d15c      	bne.n	1362c <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   13572:	075b      	lsls	r3, r3, #29
   13574:	d453      	bmi.n	1361e <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   13576:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   13578:	7ad3      	ldrb	r3, [r2, #11]
   1357a:	06db      	lsls	r3, r3, #27
   1357c:	d55c      	bpl.n	13638 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   1357e:	7d51      	ldrb	r1, [r2, #21]
   13580:	0209      	lsls	r1, r1, #8
   13582:	7d13      	ldrb	r3, [r2, #20]
   13584:	430b      	orrs	r3, r1
   13586:	041b      	lsls	r3, r3, #16
   13588:	7ed1      	ldrb	r1, [r2, #27]
   1358a:	0209      	lsls	r1, r1, #8
   1358c:	7e92      	ldrb	r2, [r2, #26]
   1358e:	430a      	orrs	r2, r1
   13590:	4313      	orrs	r3, r2
   13592:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   13594:	e70b      	b.n	133ae <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   13596:	2303      	movs	r3, #3
   13598:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1359a:	69bb      	ldr	r3, [r7, #24]
   1359c:	781a      	ldrb	r2, [r3, #0]
   1359e:	2ae5      	cmp	r2, #229	; 0xe5
   135a0:	d1cd      	bne.n	1353e <follow_path+0x1ce>
   135a2:	220b      	movs	r2, #11
   135a4:	9201      	str	r2, [sp, #4]
   135a6:	2205      	movs	r2, #5
   135a8:	701a      	strb	r2, [r3, #0]
   135aa:	e7c5      	b.n	13538 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   135ac:	2100      	movs	r1, #0
   135ae:	4b2f      	ldr	r3, [pc, #188]	; (1366c <follow_path+0x2fc>)
   135b0:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   135b2:	2800      	cmp	r0, #0
   135b4:	d100      	bne.n	135b8 <follow_path+0x248>
   135b6:	e079      	b.n	136ac <follow_path+0x33c>
   135b8:	4b31      	ldr	r3, [pc, #196]	; (13680 <follow_path+0x310>)
   135ba:	469c      	mov	ip, r3
   135bc:	4460      	add	r0, ip
   135be:	3880      	subs	r0, #128	; 0x80
   135c0:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   135c2:	2302      	movs	r3, #2
   135c4:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   135c6:	2800      	cmp	r0, #0
   135c8:	d002      	beq.n	135d0 <follow_path+0x260>
   135ca:	e790      	b.n	134ee <follow_path+0x17e>
   135cc:	2b00      	cmp	r3, #0
   135ce:	d099      	beq.n	13504 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   135d0:	2303      	movs	r3, #3
   135d2:	431e      	orrs	r6, r3
   135d4:	b2f6      	uxtb	r6, r6
   135d6:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   135d8:	69bb      	ldr	r3, [r7, #24]
   135da:	465a      	mov	r2, fp
   135dc:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   135de:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   135e0:	2201      	movs	r2, #1
   135e2:	4694      	mov	ip, r2
   135e4:	44e3      	add	fp, ip
   135e6:	e770      	b.n	134ca <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   135e8:	0003      	movs	r3, r0
   135ea:	3b61      	subs	r3, #97	; 0x61
   135ec:	b29b      	uxth	r3, r3
   135ee:	2b19      	cmp	r3, #25
   135f0:	d8f2      	bhi.n	135d8 <follow_path+0x268>
						b |= 1; w -= 0x20;
   135f2:	2301      	movs	r3, #1
   135f4:	464a      	mov	r2, r9
   135f6:	431a      	orrs	r2, r3
   135f8:	4691      	mov	r9, r2
   135fa:	3820      	subs	r0, #32
   135fc:	b280      	uxth	r0, r0
   135fe:	e7eb      	b.n	135d8 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   13600:	464b      	mov	r3, r9
   13602:	009b      	lsls	r3, r3, #2
   13604:	b2db      	uxtb	r3, r3
   13606:	4699      	mov	r9, r3
   13608:	e799      	b.n	1353e <follow_path+0x1ce>
		cf |= NS_LFN;
   1360a:	2202      	movs	r2, #2
   1360c:	4316      	orrs	r6, r2
   1360e:	e79e      	b.n	1354e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   13610:	320f      	adds	r2, #15
   13612:	4316      	orrs	r6, r2
   13614:	e7a2      	b.n	1355c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   13616:	3304      	adds	r3, #4
   13618:	431e      	orrs	r6, r3
   1361a:	e7a1      	b.n	13560 <follow_path+0x1f0>
   1361c:	2006      	movs	r0, #6
}
   1361e:	b003      	add	sp, #12
   13620:	bc3c      	pop	{r2, r3, r4, r5}
   13622:	4690      	mov	r8, r2
   13624:	4699      	mov	r9, r3
   13626:	46a2      	mov	sl, r4
   13628:	46ab      	mov	fp, r5
   1362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1362c:	2804      	cmp	r0, #4
   1362e:	d1f6      	bne.n	1361e <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13630:	075b      	lsls	r3, r3, #29
   13632:	d4f4      	bmi.n	1361e <follow_path+0x2ae>
   13634:	3001      	adds	r0, #1
   13636:	e7f2      	b.n	1361e <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   13638:	2005      	movs	r0, #5
   1363a:	e7f0      	b.n	1361e <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   1363c:	2301      	movs	r3, #1
	si = di = 0;
   1363e:	2400      	movs	r4, #0
   13640:	e6fb      	b.n	1343a <follow_path+0xca>
		w = p[si++];					/* Get a character */
   13642:	2301      	movs	r3, #1
	si = di = 0;
   13644:	2400      	movs	r4, #0
   13646:	e005      	b.n	13654 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   13648:	2301      	movs	r3, #1
	si = di = 0;
   1364a:	2400      	movs	r4, #0
   1364c:	e002      	b.n	13654 <follow_path+0x2e4>
   1364e:	002c      	movs	r4, r5
   13650:	465f      	mov	r7, fp
   13652:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   13654:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   13656:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   13658:	2c00      	cmp	r4, #0
   1365a:	d0df      	beq.n	1361c <follow_path+0x2ac>
   1365c:	4b09      	ldr	r3, [pc, #36]	; (13684 <follow_path+0x314>)
   1365e:	18e3      	adds	r3, r4, r3
   13660:	005b      	lsls	r3, r3, #1
   13662:	4453      	add	r3, sl
   13664:	e6f1      	b.n	1344a <follow_path+0xda>
   13666:	46c0      	nop			; (mov r8, r8)
   13668:	000129c1 	.word	0x000129c1
   1366c:	00013b49 	.word	0x00013b49
   13670:	000193dd 	.word	0x000193dd
   13674:	00012359 	.word	0x00012359
   13678:	000193e9 	.word	0x000193e9
   1367c:	00012e01 	.word	0x00012e01
   13680:	0001935c 	.word	0x0001935c
   13684:	7fffffff 	.word	0x7fffffff
   13688:	002c      	movs	r4, r5
   1368a:	465f      	mov	r7, fp
   1368c:	464d      	mov	r5, r9
   1368e:	e7e1      	b.n	13654 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   13690:	9b01      	ldr	r3, [sp, #4]
   13692:	2b0b      	cmp	r3, #11
   13694:	d100      	bne.n	13698 <follow_path+0x328>
   13696:	e77e      	b.n	13596 <follow_path+0x226>
			b <<= 2; continue;
   13698:	464b      	mov	r3, r9
   1369a:	009b      	lsls	r3, r3, #2
   1369c:	b2db      	uxtb	r3, r3
   1369e:	4699      	mov	r9, r3
   136a0:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   136a2:	220b      	movs	r2, #11
   136a4:	9201      	str	r2, [sp, #4]
   136a6:	3a03      	subs	r2, #3
   136a8:	4693      	mov	fp, r2
   136aa:	e70e      	b.n	134ca <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   136ac:	2302      	movs	r3, #2
   136ae:	431e      	orrs	r6, r3
   136b0:	e78e      	b.n	135d0 <follow_path+0x260>
   136b2:	46c0      	nop			; (mov r8, r8)

000136b4 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   136b4:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   136b6:	2807      	cmp	r0, #7
   136b8:	d901      	bls.n	136be <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   136ba:	0018      	movs	r0, r3
   136bc:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   136be:	0083      	lsls	r3, r0, #2
   136c0:	4a07      	ldr	r2, [pc, #28]	; (136e0 <f_mount+0x2c>)
   136c2:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   136c4:	2b00      	cmp	r3, #0
   136c6:	d001      	beq.n	136cc <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   136c8:	2200      	movs	r2, #0
   136ca:	701a      	strb	r2, [r3, #0]
	if (fs) {
   136cc:	2900      	cmp	r1, #0
   136ce:	d001      	beq.n	136d4 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   136d0:	2300      	movs	r3, #0
   136d2:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   136d4:	0080      	lsls	r0, r0, #2
   136d6:	4b02      	ldr	r3, [pc, #8]	; (136e0 <f_mount+0x2c>)
   136d8:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   136da:	2300      	movs	r3, #0
   136dc:	e7ed      	b.n	136ba <f_mount+0x6>
   136de:	46c0      	nop			; (mov r8, r8)
   136e0:	2000034c 	.word	0x2000034c

000136e4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   136e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136e6:	46c6      	mov	lr, r8
   136e8:	b500      	push	{lr}
   136ea:	4c59      	ldr	r4, [pc, #356]	; (13850 <f_open+0x16c>)
   136ec:	44a5      	add	sp, r4
   136ee:	0005      	movs	r5, r0
   136f0:	9101      	str	r1, [sp, #4]
   136f2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   136f4:	2300      	movs	r3, #0
   136f6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   136f8:	261f      	movs	r6, #31
   136fa:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   136fc:	221e      	movs	r2, #30
   136fe:	403a      	ands	r2, r7
   13700:	a985      	add	r1, sp, #532	; 0x214
   13702:	a801      	add	r0, sp, #4
   13704:	4b53      	ldr	r3, [pc, #332]	; (13854 <f_open+0x170>)
   13706:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   13708:	ab82      	add	r3, sp, #520	; 0x208
   1370a:	938b      	str	r3, [sp, #556]	; 0x22c
   1370c:	ab02      	add	r3, sp, #8
   1370e:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   13710:	2800      	cmp	r0, #0
   13712:	d006      	beq.n	13722 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   13714:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13716:	231c      	movs	r3, #28
   13718:	423b      	tst	r3, r7
   1371a:	d145      	bne.n	137a8 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1371c:	2800      	cmp	r0, #0
   1371e:	d13d      	bne.n	1379c <f_open+0xb8>
   13720:	e00c      	b.n	1373c <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   13722:	9901      	ldr	r1, [sp, #4]
   13724:	a885      	add	r0, sp, #532	; 0x214
   13726:	4b4c      	ldr	r3, [pc, #304]	; (13858 <f_open+0x174>)
   13728:	4798      	blx	r3
	dir = dj.dir;
   1372a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   1372c:	2800      	cmp	r0, #0
   1372e:	d1f2      	bne.n	13716 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   13730:	2c00      	cmp	r4, #0
   13732:	d100      	bne.n	13736 <f_open+0x52>
   13734:	e086      	b.n	13844 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13736:	231c      	movs	r3, #28
   13738:	423b      	tst	r3, r7
   1373a:	d146      	bne.n	137ca <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1373c:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   1373e:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13740:	06da      	lsls	r2, r3, #27
   13742:	d42b      	bmi.n	1379c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   13744:	07ba      	lsls	r2, r7, #30
   13746:	d502      	bpl.n	1374e <f_open+0x6a>
					res = FR_DENIED;
   13748:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1374a:	07db      	lsls	r3, r3, #31
   1374c:	d426      	bmi.n	1379c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1374e:	073b      	lsls	r3, r7, #28
   13750:	d501      	bpl.n	13756 <f_open+0x72>
			mode |= FA__WRITTEN;
   13752:	2320      	movs	r3, #32
   13754:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   13756:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1375a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   1375c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   1375e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   13760:	7d62      	ldrb	r2, [r4, #21]
   13762:	0212      	lsls	r2, r2, #8
   13764:	7d23      	ldrb	r3, [r4, #20]
   13766:	4313      	orrs	r3, r2
   13768:	041b      	lsls	r3, r3, #16
   1376a:	7ee1      	ldrb	r1, [r4, #27]
   1376c:	0209      	lsls	r1, r1, #8
   1376e:	7ea2      	ldrb	r2, [r4, #26]
   13770:	430a      	orrs	r2, r1
   13772:	4313      	orrs	r3, r2
   13774:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   13776:	7fe3      	ldrb	r3, [r4, #31]
   13778:	061b      	lsls	r3, r3, #24
   1377a:	7fa2      	ldrb	r2, [r4, #30]
   1377c:	0412      	lsls	r2, r2, #16
   1377e:	4313      	orrs	r3, r2
   13780:	7f22      	ldrb	r2, [r4, #28]
   13782:	4313      	orrs	r3, r2
   13784:	7f62      	ldrb	r2, [r4, #29]
   13786:	0212      	lsls	r2, r2, #8
   13788:	4313      	orrs	r3, r2
   1378a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   1378c:	2300      	movs	r3, #0
   1378e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   13790:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   13792:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13794:	602b      	str	r3, [r5, #0]
   13796:	88db      	ldrh	r3, [r3, #6]
   13798:	80ab      	strh	r3, [r5, #4]
   1379a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   1379c:	238e      	movs	r3, #142	; 0x8e
   1379e:	009b      	lsls	r3, r3, #2
   137a0:	449d      	add	sp, r3
   137a2:	bc04      	pop	{r2}
   137a4:	4690      	mov	r8, r2
   137a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   137a8:	2804      	cmp	r0, #4
   137aa:	d005      	beq.n	137b8 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   137ac:	2308      	movs	r3, #8
   137ae:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   137b0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   137b2:	2800      	cmp	r0, #0
   137b4:	d0d3      	beq.n	1375e <f_open+0x7a>
   137b6:	e7f1      	b.n	1379c <f_open+0xb8>
				res = dir_register(&dj);
   137b8:	a885      	add	r0, sp, #532	; 0x214
   137ba:	4b28      	ldr	r3, [pc, #160]	; (1385c <f_open+0x178>)
   137bc:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   137be:	2308      	movs	r3, #8
   137c0:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   137c2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   137c4:	2800      	cmp	r0, #0
   137c6:	d008      	beq.n	137da <f_open+0xf6>
   137c8:	e7e8      	b.n	1379c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   137ca:	7ae3      	ldrb	r3, [r4, #11]
   137cc:	2211      	movs	r2, #17
				res = FR_DENIED;
   137ce:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   137d0:	421a      	tst	r2, r3
   137d2:	d1e3      	bne.n	1379c <f_open+0xb8>
					res = FR_EXIST;
   137d4:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   137d6:	077b      	lsls	r3, r7, #29
   137d8:	d4e0      	bmi.n	1379c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   137da:	0733      	lsls	r3, r6, #28
   137dc:	d5bb      	bpl.n	13756 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   137de:	4b20      	ldr	r3, [pc, #128]	; (13860 <f_open+0x17c>)
   137e0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   137e2:	73a0      	strb	r0, [r4, #14]
   137e4:	0a03      	lsrs	r3, r0, #8
   137e6:	73e3      	strb	r3, [r4, #15]
   137e8:	0c03      	lsrs	r3, r0, #16
   137ea:	7423      	strb	r3, [r4, #16]
   137ec:	0e00      	lsrs	r0, r0, #24
   137ee:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   137f0:	2300      	movs	r3, #0
   137f2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   137f4:	7723      	strb	r3, [r4, #28]
   137f6:	7763      	strb	r3, [r4, #29]
   137f8:	77a3      	strb	r3, [r4, #30]
   137fa:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   137fc:	7d62      	ldrb	r2, [r4, #21]
   137fe:	0212      	lsls	r2, r2, #8
   13800:	7d27      	ldrb	r7, [r4, #20]
   13802:	4317      	orrs	r7, r2
   13804:	043f      	lsls	r7, r7, #16
   13806:	7ee1      	ldrb	r1, [r4, #27]
   13808:	0209      	lsls	r1, r1, #8
   1380a:	7ea2      	ldrb	r2, [r4, #26]
   1380c:	430a      	orrs	r2, r1
   1380e:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   13810:	76a3      	strb	r3, [r4, #26]
   13812:	76e3      	strb	r3, [r4, #27]
   13814:	7523      	strb	r3, [r4, #20]
   13816:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   13818:	9885      	ldr	r0, [sp, #532]	; 0x214
   1381a:	3301      	adds	r3, #1
   1381c:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1381e:	2f00      	cmp	r7, #0
   13820:	d097      	beq.n	13752 <f_open+0x6e>
				dw = dj.fs->winsect;
   13822:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13824:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   13826:	0039      	movs	r1, r7
   13828:	4b0e      	ldr	r3, [pc, #56]	; (13864 <f_open+0x180>)
   1382a:	4798      	blx	r3
				if (res == FR_OK) {
   1382c:	2800      	cmp	r0, #0
   1382e:	d1b5      	bne.n	1379c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   13830:	9885      	ldr	r0, [sp, #532]	; 0x214
   13832:	3f01      	subs	r7, #1
   13834:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   13836:	4641      	mov	r1, r8
   13838:	4b0b      	ldr	r3, [pc, #44]	; (13868 <f_open+0x184>)
   1383a:	4798      	blx	r3
	if (res == FR_OK) {
   1383c:	2800      	cmp	r0, #0
   1383e:	d100      	bne.n	13842 <f_open+0x15e>
   13840:	e787      	b.n	13752 <f_open+0x6e>
   13842:	e7ab      	b.n	1379c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13844:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   13846:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13848:	423b      	tst	r3, r7
   1384a:	d0b2      	beq.n	137b2 <f_open+0xce>
			res = FR_INVALID_NAME;
   1384c:	2006      	movs	r0, #6
   1384e:	e7ad      	b.n	137ac <f_open+0xc8>
   13850:	fffffdc8 	.word	0xfffffdc8
   13854:	00012475 	.word	0x00012475
   13858:	00013371 	.word	0x00013371
   1385c:	00012f99 	.word	0x00012f99
   13860:	000122f5 	.word	0x000122f5
   13864:	00012c65 	.word	0x00012c65
   13868:	00012825 	.word	0x00012825

0001386c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1386c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1386e:	46de      	mov	lr, fp
   13870:	4657      	mov	r7, sl
   13872:	464e      	mov	r6, r9
   13874:	4645      	mov	r5, r8
   13876:	b5e0      	push	{r5, r6, r7, lr}
   13878:	b083      	sub	sp, #12
   1387a:	0004      	movs	r4, r0
   1387c:	000d      	movs	r5, r1
   1387e:	0016      	movs	r6, r2
   13880:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   13882:	2300      	movs	r3, #0
   13884:	464a      	mov	r2, r9
   13886:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   13888:	8881      	ldrh	r1, [r0, #4]
   1388a:	6800      	ldr	r0, [r0, #0]
   1388c:	4b7f      	ldr	r3, [pc, #508]	; (13a8c <f_write+0x220>)
   1388e:	4798      	blx	r3
   13890:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   13892:	2800      	cmp	r0, #0
   13894:	d000      	beq.n	13898 <f_write+0x2c>
   13896:	e0f1      	b.n	13a7c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   13898:	79a3      	ldrb	r3, [r4, #6]
   1389a:	b25a      	sxtb	r2, r3
   1389c:	2a00      	cmp	r2, #0
   1389e:	da00      	bge.n	138a2 <f_write+0x36>
   138a0:	e0ea      	b.n	13a78 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   138a2:	079b      	lsls	r3, r3, #30
   138a4:	d402      	bmi.n	138ac <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   138a6:	2307      	movs	r3, #7
   138a8:	9300      	str	r3, [sp, #0]
   138aa:	e0e7      	b.n	13a7c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   138ac:	68e3      	ldr	r3, [r4, #12]
   138ae:	199a      	adds	r2, r3, r6
   138b0:	4293      	cmp	r3, r2
   138b2:	d810      	bhi.n	138d6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   138b4:	2e00      	cmp	r6, #0
   138b6:	d00e      	beq.n	138d6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   138b8:	002f      	movs	r7, r5
   138ba:	e07b      	b.n	139b4 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   138bc:	2100      	movs	r1, #0
   138be:	4b74      	ldr	r3, [pc, #464]	; (13a90 <f_write+0x224>)
   138c0:	4798      	blx	r3
   138c2:	0003      	movs	r3, r0
   138c4:	6120      	str	r0, [r4, #16]
   138c6:	e003      	b.n	138d0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   138c8:	6961      	ldr	r1, [r4, #20]
   138ca:	4b71      	ldr	r3, [pc, #452]	; (13a90 <f_write+0x224>)
   138cc:	4798      	blx	r3
   138ce:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   138d0:	2b00      	cmp	r3, #0
   138d2:	d000      	beq.n	138d6 <f_write+0x6a>
   138d4:	e080      	b.n	139d8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   138d6:	68a3      	ldr	r3, [r4, #8]
   138d8:	68e2      	ldr	r2, [r4, #12]
   138da:	4293      	cmp	r3, r2
   138dc:	d900      	bls.n	138e0 <f_write+0x74>
   138de:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   138e0:	79a3      	ldrb	r3, [r4, #6]
   138e2:	2220      	movs	r2, #32
   138e4:	4313      	orrs	r3, r2
   138e6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   138e8:	e0c8      	b.n	13a7c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   138ea:	79a2      	ldrb	r2, [r4, #6]
   138ec:	3b81      	subs	r3, #129	; 0x81
   138ee:	4313      	orrs	r3, r2
   138f0:	71a3      	strb	r3, [r4, #6]
   138f2:	2302      	movs	r3, #2
   138f4:	9300      	str	r3, [sp, #0]
   138f6:	e0c1      	b.n	13a7c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   138f8:	79a2      	ldrb	r2, [r4, #6]
   138fa:	3b7f      	subs	r3, #127	; 0x7f
   138fc:	4313      	orrs	r3, r2
   138fe:	71a3      	strb	r3, [r4, #6]
   13900:	2301      	movs	r3, #1
   13902:	9300      	str	r3, [sp, #0]
   13904:	e0ba      	b.n	13a7c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   13906:	2100      	movs	r1, #0
   13908:	4b62      	ldr	r3, [pc, #392]	; (13a94 <f_write+0x228>)
   1390a:	4798      	blx	r3
   1390c:	2800      	cmp	r0, #0
   1390e:	d06d      	beq.n	139ec <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   13910:	79a2      	ldrb	r2, [r4, #6]
   13912:	2380      	movs	r3, #128	; 0x80
   13914:	425b      	negs	r3, r3
   13916:	4313      	orrs	r3, r2
   13918:	71a3      	strb	r3, [r4, #6]
   1391a:	2301      	movs	r3, #1
   1391c:	9300      	str	r3, [sp, #0]
   1391e:	e0ad      	b.n	13a7c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13920:	79a2      	ldrb	r2, [r4, #6]
   13922:	2380      	movs	r3, #128	; 0x80
   13924:	425b      	negs	r3, r3
   13926:	4313      	orrs	r3, r2
   13928:	71a3      	strb	r3, [r4, #6]
   1392a:	2302      	movs	r3, #2
   1392c:	9300      	str	r3, [sp, #0]
   1392e:	e0a5      	b.n	13a7c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   13930:	79a2      	ldrb	r2, [r4, #6]
   13932:	2380      	movs	r3, #128	; 0x80
   13934:	425b      	negs	r3, r3
   13936:	4313      	orrs	r3, r2
   13938:	71a3      	strb	r3, [r4, #6]
   1393a:	2301      	movs	r3, #1
   1393c:	9300      	str	r3, [sp, #0]
   1393e:	e09d      	b.n	13a7c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13940:	0240      	lsls	r0, r0, #9
   13942:	1839      	adds	r1, r7, r0
   13944:	3330      	adds	r3, #48	; 0x30
   13946:	0018      	movs	r0, r3
   13948:	2280      	movs	r2, #128	; 0x80
   1394a:	0092      	lsls	r2, r2, #2
   1394c:	4b52      	ldr	r3, [pc, #328]	; (13a98 <f_write+0x22c>)
   1394e:	4798      	blx	r3
					fp->fs->wflag = 0;
   13950:	2300      	movs	r3, #0
   13952:	6822      	ldr	r2, [r4, #0]
   13954:	7113      	strb	r3, [r2, #4]
   13956:	e072      	b.n	13a3e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   13958:	68a3      	ldr	r3, [r4, #8]
   1395a:	68e2      	ldr	r2, [r4, #12]
   1395c:	4293      	cmp	r3, r2
   1395e:	d271      	bcs.n	13a44 <f_write+0x1d8>
			fp->dsect = sect;
   13960:	4643      	mov	r3, r8
   13962:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   13964:	68a3      	ldr	r3, [r4, #8]
   13966:	05dd      	lsls	r5, r3, #23
   13968:	0ded      	lsrs	r5, r5, #23
   1396a:	2380      	movs	r3, #128	; 0x80
   1396c:	009b      	lsls	r3, r3, #2
   1396e:	1b5d      	subs	r5, r3, r5
   13970:	42b5      	cmp	r5, r6
   13972:	d900      	bls.n	13976 <f_write+0x10a>
   13974:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   13976:	69a1      	ldr	r1, [r4, #24]
   13978:	6820      	ldr	r0, [r4, #0]
   1397a:	4b46      	ldr	r3, [pc, #280]	; (13a94 <f_write+0x228>)
   1397c:	4798      	blx	r3
   1397e:	2800      	cmp	r0, #0
   13980:	d172      	bne.n	13a68 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   13982:	68a3      	ldr	r3, [r4, #8]
   13984:	05d8      	lsls	r0, r3, #23
   13986:	0dc0      	lsrs	r0, r0, #23
   13988:	3030      	adds	r0, #48	; 0x30
   1398a:	6823      	ldr	r3, [r4, #0]
   1398c:	469c      	mov	ip, r3
   1398e:	4460      	add	r0, ip
   13990:	002a      	movs	r2, r5
   13992:	0039      	movs	r1, r7
   13994:	4b40      	ldr	r3, [pc, #256]	; (13a98 <f_write+0x22c>)
   13996:	4798      	blx	r3
		fp->fs->wflag = 1;
   13998:	2301      	movs	r3, #1
   1399a:	6822      	ldr	r2, [r4, #0]
   1399c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1399e:	197f      	adds	r7, r7, r5
   139a0:	68a3      	ldr	r3, [r4, #8]
   139a2:	195b      	adds	r3, r3, r5
   139a4:	60a3      	str	r3, [r4, #8]
   139a6:	464b      	mov	r3, r9
   139a8:	681b      	ldr	r3, [r3, #0]
   139aa:	195b      	adds	r3, r3, r5
   139ac:	464a      	mov	r2, r9
   139ae:	6013      	str	r3, [r2, #0]
   139b0:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   139b2:	d090      	beq.n	138d6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   139b4:	68a3      	ldr	r3, [r4, #8]
   139b6:	05da      	lsls	r2, r3, #23
   139b8:	d1d4      	bne.n	13964 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   139ba:	6820      	ldr	r0, [r4, #0]
   139bc:	7882      	ldrb	r2, [r0, #2]
   139be:	3a01      	subs	r2, #1
   139c0:	0a5d      	lsrs	r5, r3, #9
   139c2:	4015      	ands	r5, r2
   139c4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   139c6:	2d00      	cmp	r5, #0
   139c8:	d10b      	bne.n	139e2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   139ca:	2b00      	cmp	r3, #0
   139cc:	d000      	beq.n	139d0 <f_write+0x164>
   139ce:	e77b      	b.n	138c8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   139d0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   139d2:	2b00      	cmp	r3, #0
   139d4:	d100      	bne.n	139d8 <f_write+0x16c>
   139d6:	e771      	b.n	138bc <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   139d8:	2b01      	cmp	r3, #1
   139da:	d086      	beq.n	138ea <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   139dc:	1c5a      	adds	r2, r3, #1
   139de:	d08b      	beq.n	138f8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   139e0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   139e2:	6820      	ldr	r0, [r4, #0]
   139e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   139e6:	69a2      	ldr	r2, [r4, #24]
   139e8:	4293      	cmp	r3, r2
   139ea:	d08c      	beq.n	13906 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   139ec:	6823      	ldr	r3, [r4, #0]
   139ee:	469a      	mov	sl, r3
   139f0:	6961      	ldr	r1, [r4, #20]
   139f2:	0018      	movs	r0, r3
   139f4:	4b29      	ldr	r3, [pc, #164]	; (13a9c <f_write+0x230>)
   139f6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   139f8:	2800      	cmp	r0, #0
   139fa:	d091      	beq.n	13920 <f_write+0xb4>
			sect += csect;
   139fc:	4680      	mov	r8, r0
   139fe:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13a00:	0a73      	lsrs	r3, r6, #9
   13a02:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   13a04:	d0a8      	beq.n	13958 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13a06:	4653      	mov	r3, sl
   13a08:	789b      	ldrb	r3, [r3, #2]
   13a0a:	465a      	mov	r2, fp
   13a0c:	18aa      	adds	r2, r5, r2
   13a0e:	429a      	cmp	r2, r3
   13a10:	d901      	bls.n	13a16 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   13a12:	1b5b      	subs	r3, r3, r5
   13a14:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   13a16:	465b      	mov	r3, fp
   13a18:	466a      	mov	r2, sp
   13a1a:	71d3      	strb	r3, [r2, #7]
   13a1c:	79d3      	ldrb	r3, [r2, #7]
   13a1e:	4652      	mov	r2, sl
   13a20:	7850      	ldrb	r0, [r2, #1]
   13a22:	4642      	mov	r2, r8
   13a24:	0039      	movs	r1, r7
   13a26:	4d1e      	ldr	r5, [pc, #120]	; (13aa0 <f_write+0x234>)
   13a28:	47a8      	blx	r5
   13a2a:	2800      	cmp	r0, #0
   13a2c:	d000      	beq.n	13a30 <f_write+0x1c4>
   13a2e:	e77f      	b.n	13930 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13a30:	6823      	ldr	r3, [r4, #0]
   13a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13a34:	4641      	mov	r1, r8
   13a36:	1a50      	subs	r0, r2, r1
   13a38:	4583      	cmp	fp, r0
   13a3a:	d900      	bls.n	13a3e <f_write+0x1d2>
   13a3c:	e780      	b.n	13940 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   13a3e:	465b      	mov	r3, fp
   13a40:	025d      	lsls	r5, r3, #9
				continue;
   13a42:	e7ac      	b.n	1399e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13a44:	2100      	movs	r1, #0
   13a46:	4650      	mov	r0, sl
   13a48:	4b12      	ldr	r3, [pc, #72]	; (13a94 <f_write+0x228>)
   13a4a:	4798      	blx	r3
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d103      	bne.n	13a58 <f_write+0x1ec>
				fp->fs->winsect = sect;
   13a50:	6823      	ldr	r3, [r4, #0]
   13a52:	4642      	mov	r2, r8
   13a54:	62da      	str	r2, [r3, #44]	; 0x2c
   13a56:	e783      	b.n	13960 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13a58:	79a2      	ldrb	r2, [r4, #6]
   13a5a:	2380      	movs	r3, #128	; 0x80
   13a5c:	425b      	negs	r3, r3
   13a5e:	4313      	orrs	r3, r2
   13a60:	71a3      	strb	r3, [r4, #6]
   13a62:	2301      	movs	r3, #1
   13a64:	9300      	str	r3, [sp, #0]
   13a66:	e009      	b.n	13a7c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   13a68:	79a2      	ldrb	r2, [r4, #6]
   13a6a:	2380      	movs	r3, #128	; 0x80
   13a6c:	425b      	negs	r3, r3
   13a6e:	4313      	orrs	r3, r2
   13a70:	71a3      	strb	r3, [r4, #6]
   13a72:	2301      	movs	r3, #1
   13a74:	9300      	str	r3, [sp, #0]
   13a76:	e001      	b.n	13a7c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13a78:	2302      	movs	r3, #2
   13a7a:	9300      	str	r3, [sp, #0]
}
   13a7c:	9800      	ldr	r0, [sp, #0]
   13a7e:	b003      	add	sp, #12
   13a80:	bc3c      	pop	{r2, r3, r4, r5}
   13a82:	4690      	mov	r8, r2
   13a84:	4699      	mov	r9, r3
   13a86:	46a2      	mov	sl, r4
   13a88:	46ab      	mov	fp, r5
   13a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a8c:	000123a1 	.word	0x000123a1
   13a90:	00012ba1 	.word	0x00012ba1
   13a94:	00012825 	.word	0x00012825
   13a98:	00012345 	.word	0x00012345
   13a9c:	0001236b 	.word	0x0001236b
   13aa0:	00012205 	.word	0x00012205

00013aa4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13aa4:	b570      	push	{r4, r5, r6, lr}
   13aa6:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13aa8:	8881      	ldrh	r1, [r0, #4]
   13aaa:	6800      	ldr	r0, [r0, #0]
   13aac:	4b1c      	ldr	r3, [pc, #112]	; (13b20 <f_sync+0x7c>)
   13aae:	4798      	blx	r3
	if (res == FR_OK) {
   13ab0:	2800      	cmp	r0, #0
   13ab2:	d102      	bne.n	13aba <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13ab4:	79a3      	ldrb	r3, [r4, #6]
   13ab6:	069b      	lsls	r3, r3, #26
   13ab8:	d400      	bmi.n	13abc <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13aba:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   13abc:	69e1      	ldr	r1, [r4, #28]
   13abe:	6820      	ldr	r0, [r4, #0]
   13ac0:	4b18      	ldr	r3, [pc, #96]	; (13b24 <f_sync+0x80>)
   13ac2:	4798      	blx	r3
			if (res == FR_OK) {
   13ac4:	2800      	cmp	r0, #0
   13ac6:	d1f8      	bne.n	13aba <f_sync+0x16>
				dir = fp->dir_ptr;
   13ac8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13aca:	7aeb      	ldrb	r3, [r5, #11]
   13acc:	2220      	movs	r2, #32
   13ace:	4313      	orrs	r3, r2
   13ad0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13ad2:	7b23      	ldrb	r3, [r4, #12]
   13ad4:	772b      	strb	r3, [r5, #28]
   13ad6:	89a3      	ldrh	r3, [r4, #12]
   13ad8:	0a1b      	lsrs	r3, r3, #8
   13ada:	776b      	strb	r3, [r5, #29]
   13adc:	89e3      	ldrh	r3, [r4, #14]
   13ade:	77ab      	strb	r3, [r5, #30]
   13ae0:	7be3      	ldrb	r3, [r4, #15]
   13ae2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   13ae4:	7c23      	ldrb	r3, [r4, #16]
   13ae6:	76ab      	strb	r3, [r5, #26]
   13ae8:	8a23      	ldrh	r3, [r4, #16]
   13aea:	0a1b      	lsrs	r3, r3, #8
   13aec:	76eb      	strb	r3, [r5, #27]
   13aee:	8a63      	ldrh	r3, [r4, #18]
   13af0:	752b      	strb	r3, [r5, #20]
   13af2:	8a63      	ldrh	r3, [r4, #18]
   13af4:	0a1b      	lsrs	r3, r3, #8
   13af6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   13af8:	4b0b      	ldr	r3, [pc, #44]	; (13b28 <f_sync+0x84>)
   13afa:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   13afc:	75a8      	strb	r0, [r5, #22]
   13afe:	0a03      	lsrs	r3, r0, #8
   13b00:	75eb      	strb	r3, [r5, #23]
   13b02:	0c03      	lsrs	r3, r0, #16
   13b04:	762b      	strb	r3, [r5, #24]
   13b06:	0e00      	lsrs	r0, r0, #24
   13b08:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   13b0a:	79a3      	ldrb	r3, [r4, #6]
   13b0c:	2220      	movs	r2, #32
   13b0e:	4393      	bics	r3, r2
   13b10:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   13b12:	2301      	movs	r3, #1
   13b14:	6822      	ldr	r2, [r4, #0]
   13b16:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   13b18:	6820      	ldr	r0, [r4, #0]
   13b1a:	4b04      	ldr	r3, [pc, #16]	; (13b2c <f_sync+0x88>)
   13b1c:	4798      	blx	r3
   13b1e:	e7cc      	b.n	13aba <f_sync+0x16>
   13b20:	000123a1 	.word	0x000123a1
   13b24:	00012825 	.word	0x00012825
   13b28:	000122f5 	.word	0x000122f5
   13b2c:	0001327d 	.word	0x0001327d

00013b30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   13b30:	b510      	push	{r4, lr}
   13b32:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   13b34:	4b03      	ldr	r3, [pc, #12]	; (13b44 <f_close+0x14>)
   13b36:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   13b38:	2800      	cmp	r0, #0
   13b3a:	d101      	bne.n	13b40 <f_close+0x10>
   13b3c:	2300      	movs	r3, #0
   13b3e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   13b40:	bd10      	pop	{r4, pc}
   13b42:	46c0      	nop			; (mov r8, r8)
   13b44:	00013aa5 	.word	0x00013aa5

00013b48 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13b48:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   13b4a:	287f      	cmp	r0, #127	; 0x7f
   13b4c:	d911      	bls.n	13b72 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   13b4e:	2900      	cmp	r1, #0
   13b50:	d111      	bne.n	13b76 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   13b52:	28c7      	cmp	r0, #199	; 0xc7
   13b54:	d017      	beq.n	13b86 <ff_convert+0x3e>
   13b56:	4a0d      	ldr	r2, [pc, #52]	; (13b8c <ff_convert+0x44>)
   13b58:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   13b5a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   13b5c:	8811      	ldrh	r1, [r2, #0]
   13b5e:	4281      	cmp	r1, r0
   13b60:	d004      	beq.n	13b6c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   13b62:	3301      	adds	r3, #1
   13b64:	b29b      	uxth	r3, r3
   13b66:	3202      	adds	r2, #2
   13b68:	2b80      	cmp	r3, #128	; 0x80
   13b6a:	d1f7      	bne.n	13b5c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   13b6c:	3380      	adds	r3, #128	; 0x80
   13b6e:	20ff      	movs	r0, #255	; 0xff
   13b70:	4003      	ands	r3, r0
		}
	}

	return c;
}
   13b72:	0018      	movs	r0, r3
   13b74:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   13b76:	2300      	movs	r3, #0
   13b78:	28ff      	cmp	r0, #255	; 0xff
   13b7a:	d8fa      	bhi.n	13b72 <ff_convert+0x2a>
   13b7c:	3880      	subs	r0, #128	; 0x80
   13b7e:	0040      	lsls	r0, r0, #1
   13b80:	4b02      	ldr	r3, [pc, #8]	; (13b8c <ff_convert+0x44>)
   13b82:	5ac3      	ldrh	r3, [r0, r3]
   13b84:	e7f5      	b.n	13b72 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   13b86:	2300      	movs	r3, #0
   13b88:	e7f0      	b.n	13b6c <ff_convert+0x24>
   13b8a:	46c0      	nop			; (mov r8, r8)
   13b8c:	000193f0 	.word	0x000193f0

00013b90 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13b90:	2861      	cmp	r0, #97	; 0x61
   13b92:	d014      	beq.n	13bbe <ff_wtoupper+0x2e>
   13b94:	4b0b      	ldr	r3, [pc, #44]	; (13bc4 <ff_wtoupper+0x34>)
   13b96:	3304      	adds	r3, #4
   13b98:	2101      	movs	r1, #1
   13b9a:	2262      	movs	r2, #98	; 0x62
   13b9c:	4290      	cmp	r0, r2
   13b9e:	d007      	beq.n	13bb0 <ff_wtoupper+0x20>
   13ba0:	3101      	adds	r1, #1
   13ba2:	3302      	adds	r3, #2
   13ba4:	1e9a      	subs	r2, r3, #2
   13ba6:	8812      	ldrh	r2, [r2, #0]
   13ba8:	2a00      	cmp	r2, #0
   13baa:	d1f7      	bne.n	13b9c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   13bac:	0003      	movs	r3, r0
   13bae:	e004      	b.n	13bba <ff_wtoupper+0x2a>
   13bb0:	1e03      	subs	r3, r0, #0
   13bb2:	d002      	beq.n	13bba <ff_wtoupper+0x2a>
   13bb4:	0049      	lsls	r1, r1, #1
   13bb6:	4b04      	ldr	r3, [pc, #16]	; (13bc8 <ff_wtoupper+0x38>)
   13bb8:	5acb      	ldrh	r3, [r1, r3]
}
   13bba:	0018      	movs	r0, r3
   13bbc:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13bbe:	2100      	movs	r1, #0
   13bc0:	e7f8      	b.n	13bb4 <ff_wtoupper+0x24>
   13bc2:	46c0      	nop			; (mov r8, r8)
   13bc4:	000194f0 	.word	0x000194f0
   13bc8:	000196d0 	.word	0x000196d0

00013bcc <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   13bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bce:	46de      	mov	lr, fp
   13bd0:	4657      	mov	r7, sl
   13bd2:	464e      	mov	r6, r9
   13bd4:	4645      	mov	r5, r8
   13bd6:	b5e0      	push	{r5, r6, r7, lr}
   13bd8:	b083      	sub	sp, #12
   13bda:	0007      	movs	r7, r0
   13bdc:	4688      	mov	r8, r1
   13bde:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   13be0:	2400      	movs	r4, #0
   13be2:	2900      	cmp	r1, #0
   13be4:	dd18      	ble.n	13c18 <sendPacket+0x4c>
   13be6:	4b15      	ldr	r3, [pc, #84]	; (13c3c <sendPacket+0x70>)
   13be8:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13bea:	4b15      	ldr	r3, [pc, #84]	; (13c40 <sendPacket+0x74>)
   13bec:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   13bee:	9801      	ldr	r0, [sp, #4]
   13bf0:	47d0      	blx	sl
   13bf2:	2800      	cmp	r0, #0
   13bf4:	d110      	bne.n	13c18 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   13bf6:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   13bf8:	68f3      	ldr	r3, [r6, #12]
   13bfa:	4699      	mov	r9, r3
   13bfc:	693b      	ldr	r3, [r7, #16]
   13bfe:	191d      	adds	r5, r3, r4
   13c00:	9801      	ldr	r0, [sp, #4]
   13c02:	47d8      	blx	fp
   13c04:	0003      	movs	r3, r0
   13c06:	4642      	mov	r2, r8
   13c08:	0029      	movs	r1, r5
   13c0a:	0030      	movs	r0, r6
   13c0c:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   13c0e:	2800      	cmp	r0, #0
   13c10:	db02      	blt.n	13c18 <sendPacket+0x4c>
            break;
        sent += rc;
   13c12:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   13c14:	45a0      	cmp	r8, r4
   13c16:	dcea      	bgt.n	13bee <sendPacket+0x22>
    }
    if (sent == length)
   13c18:	45a0      	cmp	r8, r4
   13c1a:	d10c      	bne.n	13c36 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   13c1c:	69b9      	ldr	r1, [r7, #24]
   13c1e:	0038      	movs	r0, r7
   13c20:	3054      	adds	r0, #84	; 0x54
   13c22:	4b08      	ldr	r3, [pc, #32]	; (13c44 <sendPacket+0x78>)
   13c24:	4798      	blx	r3
        rc = SUCCESS;
   13c26:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   13c28:	b003      	add	sp, #12
   13c2a:	bc3c      	pop	{r2, r3, r4, r5}
   13c2c:	4690      	mov	r8, r2
   13c2e:	4699      	mov	r9, r3
   13c30:	46a2      	mov	sl, r4
   13c32:	46ab      	mov	fp, r5
   13c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   13c36:	2001      	movs	r0, #1
   13c38:	4240      	negs	r0, r0
    return rc;
   13c3a:	e7f5      	b.n	13c28 <sendPacket+0x5c>
   13c3c:	00014549 	.word	0x00014549
   13c40:	0001457d 	.word	0x0001457d
   13c44:	00014569 	.word	0x00014569

00013c48 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13c48:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   13c4a:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   13c4c:	2100      	movs	r1, #0
   13c4e:	6241      	str	r1, [r0, #36]	; 0x24
   13c50:	62c1      	str	r1, [r0, #44]	; 0x2c
   13c52:	6341      	str	r1, [r0, #52]	; 0x34
   13c54:	63c1      	str	r1, [r0, #60]	; 0x3c
   13c56:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   13c58:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   13c5a:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   13c5c:	9b02      	ldr	r3, [sp, #8]
   13c5e:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   13c60:	9b03      	ldr	r3, [sp, #12]
   13c62:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   13c64:	9b04      	ldr	r3, [sp, #16]
   13c66:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   13c68:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   13c6a:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   13c6c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   13c6e:	2301      	movs	r3, #1
   13c70:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   13c72:	3054      	adds	r0, #84	; 0x54
   13c74:	4b01      	ldr	r3, [pc, #4]	; (13c7c <MQTTClientInit+0x34>)
   13c76:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   13c78:	bd10      	pop	{r4, pc}
   13c7a:	46c0      	nop			; (mov r8, r8)
   13c7c:	00014591 	.word	0x00014591

00013c80 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   13c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c82:	46de      	mov	lr, fp
   13c84:	4657      	mov	r7, sl
   13c86:	464e      	mov	r6, r9
   13c88:	4645      	mov	r5, r8
   13c8a:	b5e0      	push	{r5, r6, r7, lr}
   13c8c:	b085      	sub	sp, #20
   13c8e:	4682      	mov	sl, r0
   13c90:	000f      	movs	r7, r1
   13c92:	4691      	mov	r9, r2
   13c94:	0004      	movs	r4, r0
   13c96:	3424      	adds	r4, #36	; 0x24
   13c98:	234c      	movs	r3, #76	; 0x4c
   13c9a:	4453      	add	r3, sl
   13c9c:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   13c9e:	2301      	movs	r3, #1
   13ca0:	425b      	negs	r3, r3
   13ca2:	9301      	str	r3, [sp, #4]
   13ca4:	e056      	b.n	13d54 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   13ca6:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   13ca8:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   13caa:	687a      	ldr	r2, [r7, #4]
   13cac:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   13cae:	780a      	ldrb	r2, [r1, #0]
   13cb0:	2a00      	cmp	r2, #0
   13cb2:	d04a      	beq.n	13d4a <deliverMessage+0xca>
   13cb4:	42b3      	cmp	r3, r6
   13cb6:	d24a      	bcs.n	13d4e <deliverMessage+0xce>
   13cb8:	3101      	adds	r1, #1
   13cba:	1e70      	subs	r0, r6, #1
   13cbc:	e008      	b.n	13cd0 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   13cbe:	2a2f      	cmp	r2, #47	; 0x2f
   13cc0:	d10f      	bne.n	13ce2 <deliverMessage+0x62>
        curn++;
   13cc2:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13cc4:	780a      	ldrb	r2, [r1, #0]
   13cc6:	2a00      	cmp	r2, #0
   13cc8:	d03f      	beq.n	13d4a <deliverMessage+0xca>
   13cca:	429e      	cmp	r6, r3
   13ccc:	d93f      	bls.n	13d4e <deliverMessage+0xce>
   13cce:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   13cd0:	781d      	ldrb	r5, [r3, #0]
   13cd2:	2d2f      	cmp	r5, #47	; 0x2f
   13cd4:	d0f3      	beq.n	13cbe <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   13cd6:	2a2b      	cmp	r2, #43	; 0x2b
   13cd8:	d008      	beq.n	13cec <deliverMessage+0x6c>
   13cda:	2a23      	cmp	r2, #35	; 0x23
   13cdc:	d013      	beq.n	13d06 <deliverMessage+0x86>
   13cde:	4295      	cmp	r5, r2
   13ce0:	d0ef      	beq.n	13cc2 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   13ce2:	429e      	cmp	r6, r3
   13ce4:	d133      	bne.n	13d4e <deliverMessage+0xce>
   13ce6:	2a00      	cmp	r2, #0
   13ce8:	d03d      	beq.n	13d66 <deliverMessage+0xe6>
   13cea:	e030      	b.n	13d4e <deliverMessage+0xce>
            char* nextpos = curn + 1;
   13cec:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13cee:	42ae      	cmp	r6, r5
   13cf0:	d927      	bls.n	13d42 <deliverMessage+0xc2>
   13cf2:	785a      	ldrb	r2, [r3, #1]
   13cf4:	2a2f      	cmp	r2, #47	; 0x2f
   13cf6:	d01f      	beq.n	13d38 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   13cf8:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   13cfa:	4283      	cmp	r3, r0
   13cfc:	d0e1      	beq.n	13cc2 <deliverMessage+0x42>
   13cfe:	785a      	ldrb	r2, [r3, #1]
   13d00:	2a2f      	cmp	r2, #47	; 0x2f
   13d02:	d1f9      	bne.n	13cf8 <deliverMessage+0x78>
   13d04:	e7dd      	b.n	13cc2 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   13d06:	1e73      	subs	r3, r6, #1
   13d08:	e7db      	b.n	13cc2 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13d0a:	9b01      	ldr	r3, [sp, #4]
   13d0c:	3301      	adds	r3, #1
   13d0e:	d007      	beq.n	13d20 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   13d10:	9801      	ldr	r0, [sp, #4]
   13d12:	b005      	add	sp, #20
   13d14:	bc3c      	pop	{r2, r3, r4, r5}
   13d16:	4690      	mov	r8, r2
   13d18:	4699      	mov	r9, r3
   13d1a:	46a2      	mov	sl, r4
   13d1c:	46ab      	mov	fp, r5
   13d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13d20:	4653      	mov	r3, sl
   13d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13d24:	2b00      	cmp	r3, #0
   13d26:	d0f3      	beq.n	13d10 <deliverMessage+0x90>
    md->topicName = aTopicName;
   13d28:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13d2a:	464a      	mov	r2, r9
   13d2c:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   13d2e:	a802      	add	r0, sp, #8
   13d30:	4798      	blx	r3
        rc = SUCCESS;
   13d32:	2300      	movs	r3, #0
   13d34:	9301      	str	r3, [sp, #4]
    return rc;
   13d36:	e7eb      	b.n	13d10 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   13d38:	780a      	ldrb	r2, [r1, #0]
   13d3a:	2a00      	cmp	r2, #0
   13d3c:	d007      	beq.n	13d4e <deliverMessage+0xce>
        curn++;
   13d3e:	002b      	movs	r3, r5
   13d40:	e7c5      	b.n	13cce <deliverMessage+0x4e>
   13d42:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13d44:	780a      	ldrb	r2, [r1, #0]
   13d46:	2a00      	cmp	r2, #0
   13d48:	d101      	bne.n	13d4e <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   13d4a:	429e      	cmp	r6, r3
   13d4c:	d00b      	beq.n	13d66 <deliverMessage+0xe6>
   13d4e:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13d50:	4544      	cmp	r4, r8
   13d52:	d0da      	beq.n	13d0a <deliverMessage+0x8a>
   13d54:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   13d56:	6821      	ldr	r1, [r4, #0]
   13d58:	2900      	cmp	r1, #0
   13d5a:	d0f8      	beq.n	13d4e <deliverMessage+0xce>
   13d5c:	0038      	movs	r0, r7
   13d5e:	4b08      	ldr	r3, [pc, #32]	; (13d80 <deliverMessage+0x100>)
   13d60:	4798      	blx	r3
   13d62:	2800      	cmp	r0, #0
   13d64:	d09f      	beq.n	13ca6 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   13d66:	465b      	mov	r3, fp
   13d68:	685b      	ldr	r3, [r3, #4]
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	d0ef      	beq.n	13d4e <deliverMessage+0xce>
    md->topicName = aTopicName;
   13d6e:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13d70:	464a      	mov	r2, r9
   13d72:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   13d74:	a802      	add	r0, sp, #8
   13d76:	4798      	blx	r3
                rc = SUCCESS;
   13d78:	2300      	movs	r3, #0
   13d7a:	9301      	str	r3, [sp, #4]
   13d7c:	e7e7      	b.n	13d4e <deliverMessage+0xce>
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00014e65 	.word	0x00014e65

00013d84 <keepalive>:


int keepalive(MQTTClient* c)
{
   13d84:	b510      	push	{r4, lr}
   13d86:	b082      	sub	sp, #8
   13d88:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   13d8a:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   13d8c:	69a3      	ldr	r3, [r4, #24]
   13d8e:	2b00      	cmp	r3, #0
   13d90:	d101      	bne.n	13d96 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   13d92:	b002      	add	sp, #8
   13d94:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   13d96:	0020      	movs	r0, r4
   13d98:	3054      	adds	r0, #84	; 0x54
   13d9a:	4b14      	ldr	r3, [pc, #80]	; (13dec <keepalive+0x68>)
   13d9c:	4798      	blx	r3
   13d9e:	2800      	cmp	r0, #0
   13da0:	d01d      	beq.n	13dde <keepalive+0x5a>
        if (!c->ping_outstanding)
   13da2:	7f23      	ldrb	r3, [r4, #28]
   13da4:	2b00      	cmp	r3, #0
   13da6:	d11d      	bne.n	13de4 <keepalive+0x60>
            TimerInit(&timer);
   13da8:	4668      	mov	r0, sp
   13daa:	4b11      	ldr	r3, [pc, #68]	; (13df0 <keepalive+0x6c>)
   13dac:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   13dae:	21fa      	movs	r1, #250	; 0xfa
   13db0:	0089      	lsls	r1, r1, #2
   13db2:	4668      	mov	r0, sp
   13db4:	4b0f      	ldr	r3, [pc, #60]	; (13df4 <keepalive+0x70>)
   13db6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   13db8:	68a1      	ldr	r1, [r4, #8]
   13dba:	6920      	ldr	r0, [r4, #16]
   13dbc:	4b0e      	ldr	r3, [pc, #56]	; (13df8 <keepalive+0x74>)
   13dbe:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   13dc0:	2800      	cmp	r0, #0
   13dc2:	dd09      	ble.n	13dd8 <keepalive+0x54>
   13dc4:	466a      	mov	r2, sp
   13dc6:	0001      	movs	r1, r0
   13dc8:	0020      	movs	r0, r4
   13dca:	4b0c      	ldr	r3, [pc, #48]	; (13dfc <keepalive+0x78>)
   13dcc:	4798      	blx	r3
   13dce:	2800      	cmp	r0, #0
   13dd0:	d1df      	bne.n	13d92 <keepalive+0xe>
                c->ping_outstanding = 1;
   13dd2:	2301      	movs	r3, #1
   13dd4:	7723      	strb	r3, [r4, #28]
   13dd6:	e7dc      	b.n	13d92 <keepalive+0xe>
    int rc = FAILURE;
   13dd8:	2001      	movs	r0, #1
   13dda:	4240      	negs	r0, r0
   13ddc:	e7d9      	b.n	13d92 <keepalive+0xe>
   13dde:	2001      	movs	r0, #1
   13de0:	4240      	negs	r0, r0
   13de2:	e7d6      	b.n	13d92 <keepalive+0xe>
   13de4:	2001      	movs	r0, #1
   13de6:	4240      	negs	r0, r0
    return rc;
   13de8:	e7d3      	b.n	13d92 <keepalive+0xe>
   13dea:	46c0      	nop			; (mov r8, r8)
   13dec:	00014549 	.word	0x00014549
   13df0:	00014591 	.word	0x00014591
   13df4:	00014559 	.word	0x00014559
   13df8:	00014b4d 	.word	0x00014b4d
   13dfc:	00013bcd 	.word	0x00013bcd

00013e00 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   13e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e02:	46de      	mov	lr, fp
   13e04:	464f      	mov	r7, r9
   13e06:	4646      	mov	r6, r8
   13e08:	b5c0      	push	{r6, r7, lr}
   13e0a:	b090      	sub	sp, #64	; 0x40
   13e0c:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   13e0e:	6d05      	ldr	r5, [r0, #80]	; 0x50
   13e10:	68ae      	ldr	r6, [r5, #8]
   13e12:	6947      	ldr	r7, [r0, #20]
   13e14:	9107      	str	r1, [sp, #28]
   13e16:	0008      	movs	r0, r1
   13e18:	4b65      	ldr	r3, [pc, #404]	; (13fb0 <cycle+0x1b0>)
   13e1a:	4798      	blx	r3
   13e1c:	0003      	movs	r3, r0
   13e1e:	2201      	movs	r2, #1
   13e20:	0039      	movs	r1, r7
   13e22:	0028      	movs	r0, r5
   13e24:	47b0      	blx	r6
   13e26:	0005      	movs	r5, r0
   13e28:	2801      	cmp	r0, #1
   13e2a:	d000      	beq.n	13e2e <cycle+0x2e>
   13e2c:	e0bd      	b.n	13faa <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   13e2e:	9807      	ldr	r0, [sp, #28]
   13e30:	4b5f      	ldr	r3, [pc, #380]	; (13fb0 <cycle+0x1b0>)
   13e32:	4798      	blx	r3
   13e34:	9006      	str	r0, [sp, #24]
   13e36:	2604      	movs	r6, #4
    *value = 0;
   13e38:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   13e3a:	237f      	movs	r3, #127	; 0x7f
   13e3c:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   13e3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13e40:	6883      	ldr	r3, [r0, #8]
   13e42:	4698      	mov	r8, r3
   13e44:	9b06      	ldr	r3, [sp, #24]
   13e46:	2201      	movs	r2, #1
   13e48:	a90c      	add	r1, sp, #48	; 0x30
   13e4a:	47c0      	blx	r8
        if (rc != 1)
   13e4c:	2801      	cmp	r0, #1
   13e4e:	d10e      	bne.n	13e6e <cycle+0x6e>
        *value += (i & 127) * multiplier;
   13e50:	ab02      	add	r3, sp, #8
   13e52:	2228      	movs	r2, #40	; 0x28
   13e54:	189b      	adds	r3, r3, r2
   13e56:	781b      	ldrb	r3, [r3, #0]
   13e58:	465a      	mov	r2, fp
   13e5a:	401a      	ands	r2, r3
   13e5c:	436a      	muls	r2, r5
   13e5e:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   13e60:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   13e62:	b25b      	sxtb	r3, r3
   13e64:	2b00      	cmp	r3, #0
   13e66:	da02      	bge.n	13e6e <cycle+0x6e>
   13e68:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13e6a:	2e00      	cmp	r6, #0
   13e6c:	d1e7      	bne.n	13e3e <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13e6e:	6963      	ldr	r3, [r4, #20]
   13e70:	1c58      	adds	r0, r3, #1
   13e72:	0039      	movs	r1, r7
   13e74:	4b4f      	ldr	r3, [pc, #316]	; (13fb4 <cycle+0x1b4>)
   13e76:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13e78:	2f00      	cmp	r7, #0
   13e7a:	dd10      	ble.n	13e9e <cycle+0x9e>
   13e7c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13e7e:	68b3      	ldr	r3, [r6, #8]
   13e80:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13e82:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13e84:	6963      	ldr	r3, [r4, #20]
   13e86:	181d      	adds	r5, r3, r0
   13e88:	9807      	ldr	r0, [sp, #28]
   13e8a:	4b49      	ldr	r3, [pc, #292]	; (13fb0 <cycle+0x1b0>)
   13e8c:	4798      	blx	r3
   13e8e:	0003      	movs	r3, r0
   13e90:	003a      	movs	r2, r7
   13e92:	0029      	movs	r1, r5
   13e94:	0030      	movs	r0, r6
   13e96:	47c8      	blx	r9
   13e98:	42b8      	cmp	r0, r7
   13e9a:	d000      	beq.n	13e9e <cycle+0x9e>
   13e9c:	e085      	b.n	13faa <cycle+0x1aa>
    header.byte = c->readbuf[0];
   13e9e:	6963      	ldr	r3, [r4, #20]
   13ea0:	781d      	ldrb	r5, [r3, #0]
   13ea2:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   13ea4:	2d05      	cmp	r5, #5
   13ea6:	d051      	beq.n	13f4c <cycle+0x14c>
   13ea8:	2d0d      	cmp	r5, #13
   13eaa:	d06e      	beq.n	13f8a <cycle+0x18a>
        rc = SUCCESS;
   13eac:	2600      	movs	r6, #0
    switch (packet_type)
   13eae:	2d03      	cmp	r5, #3
   13eb0:	d16e      	bne.n	13f90 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13eb2:	68e2      	ldr	r2, [r4, #12]
   13eb4:	9204      	str	r2, [sp, #16]
   13eb6:	9303      	str	r3, [sp, #12]
   13eb8:	ab0f      	add	r3, sp, #60	; 0x3c
   13eba:	9302      	str	r3, [sp, #8]
   13ebc:	ab0e      	add	r3, sp, #56	; 0x38
   13ebe:	9301      	str	r3, [sp, #4]
   13ec0:	ab09      	add	r3, sp, #36	; 0x24
   13ec2:	9300      	str	r3, [sp, #0]
   13ec4:	ab0d      	add	r3, sp, #52	; 0x34
   13ec6:	2229      	movs	r2, #41	; 0x29
   13ec8:	a902      	add	r1, sp, #8
   13eca:	468c      	mov	ip, r1
   13ecc:	4462      	add	r2, ip
   13ece:	a908      	add	r1, sp, #32
   13ed0:	202a      	movs	r0, #42	; 0x2a
   13ed2:	4460      	add	r0, ip
   13ed4:	4e38      	ldr	r6, [pc, #224]	; (13fb8 <cycle+0x1b8>)
   13ed6:	47b0      	blx	r6
        rc = SUCCESS;
   13ed8:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13eda:	2801      	cmp	r0, #1
   13edc:	d15b      	bne.n	13f96 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   13ede:	ae0c      	add	r6, sp, #48	; 0x30
   13ee0:	ab02      	add	r3, sp, #8
   13ee2:	7e1b      	ldrb	r3, [r3, #24]
   13ee4:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   13ee6:	0032      	movs	r2, r6
   13ee8:	a909      	add	r1, sp, #36	; 0x24
   13eea:	0020      	movs	r0, r4
   13eec:	4b33      	ldr	r3, [pc, #204]	; (13fbc <cycle+0x1bc>)
   13eee:	4798      	blx	r3
            if (msg.qos != QOS0)
   13ef0:	7833      	ldrb	r3, [r6, #0]
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d028      	beq.n	13f48 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   13ef6:	2b01      	cmp	r3, #1
   13ef8:	d004      	beq.n	13f04 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   13efa:	2b02      	cmp	r3, #2
   13efc:	d016      	beq.n	13f2c <cycle+0x12c>
   13efe:	2601      	movs	r6, #1
   13f00:	4276      	negs	r6, r6
   13f02:	e048      	b.n	13f96 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   13f04:	ab0c      	add	r3, sp, #48	; 0x30
   13f06:	889b      	ldrh	r3, [r3, #4]
   13f08:	9300      	str	r3, [sp, #0]
   13f0a:	2300      	movs	r3, #0
   13f0c:	2204      	movs	r2, #4
   13f0e:	68a1      	ldr	r1, [r4, #8]
   13f10:	6920      	ldr	r0, [r4, #16]
   13f12:	4e2b      	ldr	r6, [pc, #172]	; (13fc0 <cycle+0x1c0>)
   13f14:	47b0      	blx	r6
   13f16:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   13f18:	2900      	cmp	r1, #0
   13f1a:	dd12      	ble.n	13f42 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   13f1c:	9a07      	ldr	r2, [sp, #28]
   13f1e:	0020      	movs	r0, r4
   13f20:	4b28      	ldr	r3, [pc, #160]	; (13fc4 <cycle+0x1c4>)
   13f22:	4798      	blx	r3
   13f24:	0006      	movs	r6, r0
                if (rc == FAILURE)
   13f26:	1c43      	adds	r3, r0, #1
   13f28:	d132      	bne.n	13f90 <cycle+0x190>
   13f2a:	e034      	b.n	13f96 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   13f2c:	ab0c      	add	r3, sp, #48	; 0x30
   13f2e:	889b      	ldrh	r3, [r3, #4]
   13f30:	9300      	str	r3, [sp, #0]
   13f32:	2300      	movs	r3, #0
   13f34:	2205      	movs	r2, #5
   13f36:	68a1      	ldr	r1, [r4, #8]
   13f38:	6920      	ldr	r0, [r4, #16]
   13f3a:	4e21      	ldr	r6, [pc, #132]	; (13fc0 <cycle+0x1c0>)
   13f3c:	47b0      	blx	r6
   13f3e:	0001      	movs	r1, r0
   13f40:	e7ea      	b.n	13f18 <cycle+0x118>
   13f42:	2601      	movs	r6, #1
   13f44:	4276      	negs	r6, r6
   13f46:	e026      	b.n	13f96 <cycle+0x196>
        rc = SUCCESS;
   13f48:	2600      	movs	r6, #0
   13f4a:	e021      	b.n	13f90 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13f4c:	68e2      	ldr	r2, [r4, #12]
   13f4e:	9200      	str	r2, [sp, #0]
   13f50:	aa0c      	add	r2, sp, #48	; 0x30
   13f52:	a908      	add	r1, sp, #32
   13f54:	a809      	add	r0, sp, #36	; 0x24
   13f56:	4e1c      	ldr	r6, [pc, #112]	; (13fc8 <cycle+0x1c8>)
   13f58:	47b0      	blx	r6
   13f5a:	2801      	cmp	r0, #1
   13f5c:	d002      	beq.n	13f64 <cycle+0x164>
   13f5e:	2601      	movs	r6, #1
   13f60:	4276      	negs	r6, r6
   13f62:	e01b      	b.n	13f9c <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   13f64:	ab0c      	add	r3, sp, #48	; 0x30
   13f66:	881b      	ldrh	r3, [r3, #0]
   13f68:	9300      	str	r3, [sp, #0]
   13f6a:	2300      	movs	r3, #0
   13f6c:	2206      	movs	r2, #6
   13f6e:	68a1      	ldr	r1, [r4, #8]
   13f70:	6920      	ldr	r0, [r4, #16]
   13f72:	4e13      	ldr	r6, [pc, #76]	; (13fc0 <cycle+0x1c0>)
   13f74:	47b0      	blx	r6
   13f76:	2800      	cmp	r0, #0
   13f78:	ddf1      	ble.n	13f5e <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   13f7a:	9a07      	ldr	r2, [sp, #28]
   13f7c:	0001      	movs	r1, r0
   13f7e:	0020      	movs	r0, r4
   13f80:	4b10      	ldr	r3, [pc, #64]	; (13fc4 <cycle+0x1c4>)
   13f82:	4798      	blx	r3
   13f84:	1e06      	subs	r6, r0, #0
   13f86:	d1ea      	bne.n	13f5e <cycle+0x15e>
   13f88:	e002      	b.n	13f90 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   13f8a:	2300      	movs	r3, #0
   13f8c:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   13f8e:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   13f90:	0020      	movs	r0, r4
   13f92:	4b0e      	ldr	r3, [pc, #56]	; (13fcc <cycle+0x1cc>)
   13f94:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   13f96:	2e00      	cmp	r6, #0
   13f98:	d100      	bne.n	13f9c <cycle+0x19c>
   13f9a:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   13f9c:	0030      	movs	r0, r6
   13f9e:	b010      	add	sp, #64	; 0x40
   13fa0:	bc1c      	pop	{r2, r3, r4}
   13fa2:	4690      	mov	r8, r2
   13fa4:	4699      	mov	r9, r3
   13fa6:	46a3      	mov	fp, r4
   13fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13faa:	4d09      	ldr	r5, [pc, #36]	; (13fd0 <cycle+0x1d0>)
        rc = SUCCESS;
   13fac:	2600      	movs	r6, #0
   13fae:	e7ef      	b.n	13f90 <cycle+0x190>
   13fb0:	0001457d 	.word	0x0001457d
   13fb4:	00014c65 	.word	0x00014c65
   13fb8:	00014b5d 	.word	0x00014b5d
   13fbc:	00013c81 	.word	0x00013c81
   13fc0:	00014f99 	.word	0x00014f99
   13fc4:	00013bcd 	.word	0x00013bcd
   13fc8:	00014bf5 	.word	0x00014bf5
   13fcc:	00013d85 	.word	0x00013d85
   13fd0:	0000ffff 	.word	0x0000ffff

00013fd4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   13fd4:	b570      	push	{r4, r5, r6, lr}
   13fd6:	b082      	sub	sp, #8
   13fd8:	0005      	movs	r5, r0
   13fda:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   13fdc:	4668      	mov	r0, sp
   13fde:	4b0a      	ldr	r3, [pc, #40]	; (14008 <MQTTYield+0x34>)
   13fe0:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   13fe2:	0021      	movs	r1, r4
   13fe4:	4668      	mov	r0, sp
   13fe6:	4b09      	ldr	r3, [pc, #36]	; (1400c <MQTTYield+0x38>)
   13fe8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   13fea:	4c09      	ldr	r4, [pc, #36]	; (14010 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   13fec:	4e09      	ldr	r6, [pc, #36]	; (14014 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   13fee:	4669      	mov	r1, sp
   13ff0:	0028      	movs	r0, r5
   13ff2:	47a0      	blx	r4
   13ff4:	1c43      	adds	r3, r0, #1
   13ff6:	d004      	beq.n	14002 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   13ff8:	4668      	mov	r0, sp
   13ffa:	47b0      	blx	r6
   13ffc:	2800      	cmp	r0, #0
   13ffe:	d0f6      	beq.n	13fee <MQTTYield+0x1a>
    int rc = SUCCESS;
   14000:	2000      	movs	r0, #0
        
    return rc;
}
   14002:	b002      	add	sp, #8
   14004:	bd70      	pop	{r4, r5, r6, pc}
   14006:	46c0      	nop			; (mov r8, r8)
   14008:	00014591 	.word	0x00014591
   1400c:	00014559 	.word	0x00014559
   14010:	00013e01 	.word	0x00013e01
   14014:	00014549 	.word	0x00014549

00014018 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   14018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1401a:	b083      	sub	sp, #12
   1401c:	9001      	str	r0, [sp, #4]
   1401e:	000e      	movs	r6, r1
   14020:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   14022:	2401      	movs	r4, #1
   14024:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   14026:	4f08      	ldr	r7, [pc, #32]	; (14048 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   14028:	4d08      	ldr	r5, [pc, #32]	; (1404c <waitfor+0x34>)
        if (TimerIsExpired(timer))
   1402a:	9800      	ldr	r0, [sp, #0]
   1402c:	47b8      	blx	r7
   1402e:	2800      	cmp	r0, #0
   14030:	d106      	bne.n	14040 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   14032:	9900      	ldr	r1, [sp, #0]
   14034:	9801      	ldr	r0, [sp, #4]
   14036:	47a8      	blx	r5
   14038:	0004      	movs	r4, r0
   1403a:	42b0      	cmp	r0, r6
   1403c:	d1f5      	bne.n	1402a <waitfor+0x12>
   1403e:	0034      	movs	r4, r6
    
    return rc;
}
   14040:	0020      	movs	r0, r4
   14042:	b003      	add	sp, #12
   14044:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14046:	46c0      	nop			; (mov r8, r8)
   14048:	00014549 	.word	0x00014549
   1404c:	00013e01 	.word	0x00013e01

00014050 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   14050:	b530      	push	{r4, r5, lr}
   14052:	b09b      	sub	sp, #108	; 0x6c
   14054:	0004      	movs	r4, r0
   14056:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   14058:	2258      	movs	r2, #88	; 0x58
   1405a:	4928      	ldr	r1, [pc, #160]	; (140fc <MQTTConnect+0xac>)
   1405c:	a802      	add	r0, sp, #8
   1405e:	4b28      	ldr	r3, [pc, #160]	; (14100 <MQTTConnect+0xb0>)
   14060:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   14062:	6a23      	ldr	r3, [r4, #32]
   14064:	2b00      	cmp	r3, #0
   14066:	d13f      	bne.n	140e8 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   14068:	a818      	add	r0, sp, #96	; 0x60
   1406a:	4b26      	ldr	r3, [pc, #152]	; (14104 <MQTTConnect+0xb4>)
   1406c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1406e:	6861      	ldr	r1, [r4, #4]
   14070:	a818      	add	r0, sp, #96	; 0x60
   14072:	4b25      	ldr	r3, [pc, #148]	; (14108 <MQTTConnect+0xb8>)
   14074:	4798      	blx	r3

    if (options == 0)
   14076:	2d00      	cmp	r5, #0
   14078:	d015      	beq.n	140a6 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   1407a:	8b29      	ldrh	r1, [r5, #24]
   1407c:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1407e:	0020      	movs	r0, r4
   14080:	3054      	adds	r0, #84	; 0x54
   14082:	4b22      	ldr	r3, [pc, #136]	; (1410c <MQTTConnect+0xbc>)
   14084:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   14086:	002a      	movs	r2, r5
   14088:	68a1      	ldr	r1, [r4, #8]
   1408a:	6920      	ldr	r0, [r4, #16]
   1408c:	4b20      	ldr	r3, [pc, #128]	; (14110 <MQTTConnect+0xc0>)
   1408e:	4798      	blx	r3
   14090:	2800      	cmp	r0, #0
   14092:	dd2c      	ble.n	140ee <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   14094:	aa18      	add	r2, sp, #96	; 0x60
   14096:	0001      	movs	r1, r0
   14098:	0020      	movs	r0, r4
   1409a:	4b1e      	ldr	r3, [pc, #120]	; (14114 <MQTTConnect+0xc4>)
   1409c:	4798      	blx	r3
   1409e:	2800      	cmp	r0, #0
   140a0:	d003      	beq.n	140aa <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   140a2:	b01b      	add	sp, #108	; 0x6c
   140a4:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   140a6:	ad02      	add	r5, sp, #8
   140a8:	e7e7      	b.n	1407a <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   140aa:	aa18      	add	r2, sp, #96	; 0x60
   140ac:	2102      	movs	r1, #2
   140ae:	0020      	movs	r0, r4
   140b0:	4b19      	ldr	r3, [pc, #100]	; (14118 <MQTTConnect+0xc8>)
   140b2:	4798      	blx	r3
   140b4:	2802      	cmp	r0, #2
   140b6:	d11d      	bne.n	140f4 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   140b8:	466b      	mov	r3, sp
   140ba:	1d99      	adds	r1, r3, #6
   140bc:	23ff      	movs	r3, #255	; 0xff
   140be:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   140c0:	466b      	mov	r3, sp
   140c2:	1dd8      	adds	r0, r3, #7
   140c4:	2300      	movs	r3, #0
   140c6:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   140c8:	68e3      	ldr	r3, [r4, #12]
   140ca:	6962      	ldr	r2, [r4, #20]
   140cc:	4d13      	ldr	r5, [pc, #76]	; (1411c <MQTTConnect+0xcc>)
   140ce:	47a8      	blx	r5
   140d0:	2801      	cmp	r0, #1
   140d2:	d002      	beq.n	140da <MQTTConnect+0x8a>
            rc = FAILURE;
   140d4:	2001      	movs	r0, #1
   140d6:	4240      	negs	r0, r0
   140d8:	e7e3      	b.n	140a2 <MQTTConnect+0x52>
            rc = connack_rc;
   140da:	466b      	mov	r3, sp
   140dc:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   140de:	2800      	cmp	r0, #0
   140e0:	d1df      	bne.n	140a2 <MQTTConnect+0x52>
        c->isconnected = 1;
   140e2:	2301      	movs	r3, #1
   140e4:	6223      	str	r3, [r4, #32]
    return rc;
   140e6:	e7dc      	b.n	140a2 <MQTTConnect+0x52>
    int rc = FAILURE;
   140e8:	2001      	movs	r0, #1
   140ea:	4240      	negs	r0, r0
   140ec:	e7d9      	b.n	140a2 <MQTTConnect+0x52>
   140ee:	2001      	movs	r0, #1
   140f0:	4240      	negs	r0, r0
   140f2:	e7d6      	b.n	140a2 <MQTTConnect+0x52>
        rc = FAILURE;
   140f4:	2001      	movs	r0, #1
   140f6:	4240      	negs	r0, r0
   140f8:	e7d3      	b.n	140a2 <MQTTConnect+0x52>
   140fa:	46c0      	nop			; (mov r8, r8)
   140fc:	000198b0 	.word	0x000198b0
   14100:	00016a49 	.word	0x00016a49
   14104:	00014591 	.word	0x00014591
   14108:	00014559 	.word	0x00014559
   1410c:	00014569 	.word	0x00014569
   14110:	00014969 	.word	0x00014969
   14114:	00013bcd 	.word	0x00013bcd
   14118:	00014019 	.word	0x00014019
   1411c:	00014ab1 	.word	0x00014ab1

00014120 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   14120:	b5f0      	push	{r4, r5, r6, r7, lr}
   14122:	b091      	sub	sp, #68	; 0x44
   14124:	0004      	movs	r4, r0
   14126:	000f      	movs	r7, r1
   14128:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   1412a:	2300      	movs	r3, #0
   1412c:	930c      	str	r3, [sp, #48]	; 0x30
   1412e:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   14130:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   14132:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   14134:	6a03      	ldr	r3, [r0, #32]
   14136:	2b00      	cmp	r3, #0
   14138:	d05c      	beq.n	141f4 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   1413a:	a80e      	add	r0, sp, #56	; 0x38
   1413c:	4b32      	ldr	r3, [pc, #200]	; (14208 <MQTTSubscribe+0xe8>)
   1413e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14140:	6861      	ldr	r1, [r4, #4]
   14142:	a80e      	add	r0, sp, #56	; 0x38
   14144:	4b31      	ldr	r3, [pc, #196]	; (1420c <MQTTSubscribe+0xec>)
   14146:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   14148:	6920      	ldr	r0, [r4, #16]
   1414a:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1414c:	6823      	ldr	r3, [r4, #0]
   1414e:	4a30      	ldr	r2, [pc, #192]	; (14210 <MQTTSubscribe+0xf0>)
   14150:	4293      	cmp	r3, r2
   14152:	d017      	beq.n	14184 <MQTTSubscribe+0x64>
   14154:	3301      	adds	r3, #1
   14156:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   14158:	b29b      	uxth	r3, r3
   1415a:	aa0a      	add	r2, sp, #40	; 0x28
   1415c:	9202      	str	r2, [sp, #8]
   1415e:	aa0b      	add	r2, sp, #44	; 0x2c
   14160:	9201      	str	r2, [sp, #4]
   14162:	2201      	movs	r2, #1
   14164:	9200      	str	r2, [sp, #0]
   14166:	2200      	movs	r2, #0
   14168:	4e2a      	ldr	r6, [pc, #168]	; (14214 <MQTTSubscribe+0xf4>)
   1416a:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1416c:	2800      	cmp	r0, #0
   1416e:	dd44      	ble.n	141fa <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   14170:	aa0e      	add	r2, sp, #56	; 0x38
   14172:	0001      	movs	r1, r0
   14174:	0020      	movs	r0, r4
   14176:	4b28      	ldr	r3, [pc, #160]	; (14218 <MQTTSubscribe+0xf8>)
   14178:	4798      	blx	r3
   1417a:	1e06      	subs	r6, r0, #0
   1417c:	d004      	beq.n	14188 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   1417e:	0030      	movs	r0, r6
   14180:	b011      	add	sp, #68	; 0x44
   14182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   14184:	2301      	movs	r3, #1
   14186:	e7e6      	b.n	14156 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   14188:	aa0e      	add	r2, sp, #56	; 0x38
   1418a:	2109      	movs	r1, #9
   1418c:	0020      	movs	r0, r4
   1418e:	4b23      	ldr	r3, [pc, #140]	; (1421c <MQTTSubscribe+0xfc>)
   14190:	4798      	blx	r3
   14192:	2809      	cmp	r0, #9
   14194:	d134      	bne.n	14200 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   14196:	2300      	movs	r3, #0
   14198:	9308      	str	r3, [sp, #32]
   1419a:	3b01      	subs	r3, #1
   1419c:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1419e:	68e3      	ldr	r3, [r4, #12]
   141a0:	9301      	str	r3, [sp, #4]
   141a2:	6963      	ldr	r3, [r4, #20]
   141a4:	9300      	str	r3, [sp, #0]
   141a6:	ab09      	add	r3, sp, #36	; 0x24
   141a8:	aa08      	add	r2, sp, #32
   141aa:	2101      	movs	r1, #1
   141ac:	300d      	adds	r0, #13
   141ae:	ad02      	add	r5, sp, #8
   141b0:	46ac      	mov	ip, r5
   141b2:	4460      	add	r0, ip
   141b4:	4d1a      	ldr	r5, [pc, #104]	; (14220 <MQTTSubscribe+0x100>)
   141b6:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   141b8:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   141ba:	2801      	cmp	r0, #1
   141bc:	d00e      	beq.n	141dc <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   141be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   141c0:	2b00      	cmp	r3, #0
   141c2:	d010      	beq.n	141e6 <MQTTSubscribe+0xc6>
   141c4:	0022      	movs	r2, r4
   141c6:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   141c8:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   141ca:	6810      	ldr	r0, [r2, #0]
   141cc:	2800      	cmp	r0, #0
   141ce:	d00b      	beq.n	141e8 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   141d0:	3301      	adds	r3, #1
   141d2:	3208      	adds	r2, #8
   141d4:	2b05      	cmp	r3, #5
   141d6:	d1f8      	bne.n	141ca <MQTTSubscribe+0xaa>
   141d8:	000e      	movs	r6, r1
   141da:	e7d0      	b.n	1417e <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   141dc:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   141de:	2980      	cmp	r1, #128	; 0x80
   141e0:	d1ed      	bne.n	141be <MQTTSubscribe+0x9e>
   141e2:	000e      	movs	r6, r1
   141e4:	e7cb      	b.n	1417e <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   141e6:	0033      	movs	r3, r6
   141e8:	00db      	lsls	r3, r3, #3
   141ea:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   141ec:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   141ee:	9b05      	ldr	r3, [sp, #20]
   141f0:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   141f2:	e7c4      	b.n	1417e <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   141f4:	2601      	movs	r6, #1
   141f6:	4276      	negs	r6, r6
   141f8:	e7c1      	b.n	1417e <MQTTSubscribe+0x5e>
   141fa:	2601      	movs	r6, #1
   141fc:	4276      	negs	r6, r6
   141fe:	e7be      	b.n	1417e <MQTTSubscribe+0x5e>
        rc = FAILURE;
   14200:	2601      	movs	r6, #1
   14202:	4276      	negs	r6, r6
    return rc;
   14204:	e7bb      	b.n	1417e <MQTTSubscribe+0x5e>
   14206:	46c0      	nop			; (mov r8, r8)
   14208:	00014591 	.word	0x00014591
   1420c:	00014559 	.word	0x00014559
   14210:	0000ffff 	.word	0x0000ffff
   14214:	00015031 	.word	0x00015031
   14218:	00013bcd 	.word	0x00013bcd
   1421c:	00014019 	.word	0x00014019
   14220:	000150e5 	.word	0x000150e5

00014224 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   14224:	b5f0      	push	{r4, r5, r6, r7, lr}
   14226:	b08f      	sub	sp, #60	; 0x3c
   14228:	0005      	movs	r5, r0
   1422a:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1422c:	2300      	movs	r3, #0
   1422e:	930a      	str	r3, [sp, #40]	; 0x28
   14230:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   14232:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   14234:	6a03      	ldr	r3, [r0, #32]
   14236:	2b00      	cmp	r3, #0
   14238:	d062      	beq.n	14300 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   1423a:	a80c      	add	r0, sp, #48	; 0x30
   1423c:	4b36      	ldr	r3, [pc, #216]	; (14318 <MQTTPublish+0xf4>)
   1423e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14240:	6869      	ldr	r1, [r5, #4]
   14242:	a80c      	add	r0, sp, #48	; 0x30
   14244:	4b35      	ldr	r3, [pc, #212]	; (1431c <MQTTPublish+0xf8>)
   14246:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   14248:	7823      	ldrb	r3, [r4, #0]
   1424a:	3b01      	subs	r3, #1
   1424c:	2b01      	cmp	r3, #1
   1424e:	d921      	bls.n	14294 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   14250:	7823      	ldrb	r3, [r4, #0]
   14252:	68e2      	ldr	r2, [r4, #12]
   14254:	9206      	str	r2, [sp, #24]
   14256:	68a2      	ldr	r2, [r4, #8]
   14258:	9205      	str	r2, [sp, #20]
   1425a:	aa09      	add	r2, sp, #36	; 0x24
   1425c:	a902      	add	r1, sp, #8
   1425e:	cac1      	ldmia	r2!, {r0, r6, r7}
   14260:	c1c1      	stmia	r1!, {r0, r6, r7}
   14262:	88a2      	ldrh	r2, [r4, #4]
   14264:	9201      	str	r2, [sp, #4]
   14266:	7862      	ldrb	r2, [r4, #1]
   14268:	9200      	str	r2, [sp, #0]
   1426a:	2200      	movs	r2, #0
   1426c:	68a9      	ldr	r1, [r5, #8]
   1426e:	6928      	ldr	r0, [r5, #16]
   14270:	4e2b      	ldr	r6, [pc, #172]	; (14320 <MQTTPublish+0xfc>)
   14272:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   14274:	2800      	cmp	r0, #0
   14276:	dd46      	ble.n	14306 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   14278:	aa0c      	add	r2, sp, #48	; 0x30
   1427a:	0001      	movs	r1, r0
   1427c:	0028      	movs	r0, r5
   1427e:	4b29      	ldr	r3, [pc, #164]	; (14324 <MQTTPublish+0x100>)
   14280:	4798      	blx	r3
   14282:	2800      	cmp	r0, #0
   14284:	d104      	bne.n	14290 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   14286:	7823      	ldrb	r3, [r4, #0]
   14288:	2b01      	cmp	r3, #1
   1428a:	d00d      	beq.n	142a8 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   1428c:	2b02      	cmp	r3, #2
   1428e:	d021      	beq.n	142d4 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   14290:	b00f      	add	sp, #60	; 0x3c
   14292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   14294:	682b      	ldr	r3, [r5, #0]
   14296:	4a24      	ldr	r2, [pc, #144]	; (14328 <MQTTPublish+0x104>)
   14298:	4293      	cmp	r3, r2
   1429a:	d003      	beq.n	142a4 <MQTTPublish+0x80>
   1429c:	3301      	adds	r3, #1
   1429e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   142a0:	80a3      	strh	r3, [r4, #4]
   142a2:	e7d5      	b.n	14250 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   142a4:	2301      	movs	r3, #1
   142a6:	e7fa      	b.n	1429e <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   142a8:	aa0c      	add	r2, sp, #48	; 0x30
   142aa:	2104      	movs	r1, #4
   142ac:	0028      	movs	r0, r5
   142ae:	4b1f      	ldr	r3, [pc, #124]	; (1432c <MQTTPublish+0x108>)
   142b0:	4798      	blx	r3
   142b2:	2804      	cmp	r0, #4
   142b4:	d12a      	bne.n	1430c <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   142b6:	696b      	ldr	r3, [r5, #20]
   142b8:	68ea      	ldr	r2, [r5, #12]
   142ba:	9200      	str	r2, [sp, #0]
   142bc:	2222      	movs	r2, #34	; 0x22
   142be:	446a      	add	r2, sp
   142c0:	a908      	add	r1, sp, #32
   142c2:	301d      	adds	r0, #29
   142c4:	4468      	add	r0, sp
   142c6:	4c1a      	ldr	r4, [pc, #104]	; (14330 <MQTTPublish+0x10c>)
   142c8:	47a0      	blx	r4
   142ca:	3801      	subs	r0, #1
   142cc:	1e43      	subs	r3, r0, #1
   142ce:	4198      	sbcs	r0, r3
   142d0:	4240      	negs	r0, r0
   142d2:	e7dd      	b.n	14290 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   142d4:	aa0c      	add	r2, sp, #48	; 0x30
   142d6:	2107      	movs	r1, #7
   142d8:	0028      	movs	r0, r5
   142da:	4b14      	ldr	r3, [pc, #80]	; (1432c <MQTTPublish+0x108>)
   142dc:	4798      	blx	r3
   142de:	2807      	cmp	r0, #7
   142e0:	d117      	bne.n	14312 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   142e2:	696b      	ldr	r3, [r5, #20]
   142e4:	68ea      	ldr	r2, [r5, #12]
   142e6:	9200      	str	r2, [sp, #0]
   142e8:	2222      	movs	r2, #34	; 0x22
   142ea:	446a      	add	r2, sp
   142ec:	a908      	add	r1, sp, #32
   142ee:	301a      	adds	r0, #26
   142f0:	4468      	add	r0, sp
   142f2:	4c0f      	ldr	r4, [pc, #60]	; (14330 <MQTTPublish+0x10c>)
   142f4:	47a0      	blx	r4
   142f6:	3801      	subs	r0, #1
   142f8:	1e43      	subs	r3, r0, #1
   142fa:	4198      	sbcs	r0, r3
   142fc:	4240      	negs	r0, r0
   142fe:	e7c7      	b.n	14290 <MQTTPublish+0x6c>
    int rc = FAILURE;
   14300:	2001      	movs	r0, #1
   14302:	4240      	negs	r0, r0
   14304:	e7c4      	b.n	14290 <MQTTPublish+0x6c>
   14306:	2001      	movs	r0, #1
   14308:	4240      	negs	r0, r0
   1430a:	e7c1      	b.n	14290 <MQTTPublish+0x6c>
            rc = FAILURE;
   1430c:	2001      	movs	r0, #1
   1430e:	4240      	negs	r0, r0
   14310:	e7be      	b.n	14290 <MQTTPublish+0x6c>
            rc = FAILURE;
   14312:	2001      	movs	r0, #1
   14314:	4240      	negs	r0, r0
    return rc;
   14316:	e7bb      	b.n	14290 <MQTTPublish+0x6c>
   14318:	00014591 	.word	0x00014591
   1431c:	00014559 	.word	0x00014559
   14320:	00014ed1 	.word	0x00014ed1
   14324:	00013bcd 	.word	0x00013bcd
   14328:	0000ffff 	.word	0x0000ffff
   1432c:	00014019 	.word	0x00014019
   14330:	00014bf5 	.word	0x00014bf5

00014334 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   14334:	b510      	push	{r4, lr}
   14336:	b082      	sub	sp, #8
   14338:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1433a:	4668      	mov	r0, sp
   1433c:	4b0b      	ldr	r3, [pc, #44]	; (1436c <MQTTDisconnect+0x38>)
   1433e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14340:	6861      	ldr	r1, [r4, #4]
   14342:	4668      	mov	r0, sp
   14344:	4b0a      	ldr	r3, [pc, #40]	; (14370 <MQTTDisconnect+0x3c>)
   14346:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   14348:	68a1      	ldr	r1, [r4, #8]
   1434a:	6920      	ldr	r0, [r4, #16]
   1434c:	4b09      	ldr	r3, [pc, #36]	; (14374 <MQTTDisconnect+0x40>)
   1434e:	4798      	blx	r3
    if (len > 0)
   14350:	2800      	cmp	r0, #0
   14352:	dd08      	ble.n	14366 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   14354:	466a      	mov	r2, sp
   14356:	0001      	movs	r1, r0
   14358:	0020      	movs	r0, r4
   1435a:	4b07      	ldr	r3, [pc, #28]	; (14378 <MQTTDisconnect+0x44>)
   1435c:	4798      	blx	r3
        
    c->isconnected = 0;
   1435e:	2300      	movs	r3, #0
   14360:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   14362:	b002      	add	sp, #8
   14364:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   14366:	2001      	movs	r0, #1
   14368:	4240      	negs	r0, r0
   1436a:	e7f8      	b.n	1435e <MQTTDisconnect+0x2a>
   1436c:	00014591 	.word	0x00014591
   14370:	00014559 	.word	0x00014559
   14374:	00014b3d 	.word	0x00014b3d
   14378:	00013bcd 	.word	0x00013bcd

0001437c <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   1437c:	b510      	push	{r4, lr}
   1437e:	0004      	movs	r4, r0
	close(n->socket);
   14380:	2000      	movs	r0, #0
   14382:	5620      	ldrsb	r0, [r4, r0]
   14384:	4b04      	ldr	r3, [pc, #16]	; (14398 <WINC1500_disconnect+0x1c>)
   14386:	4798      	blx	r3
	n->socket=-1;
   14388:	2301      	movs	r3, #1
   1438a:	425b      	negs	r3, r3
   1438c:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   1438e:	2200      	movs	r2, #0
   14390:	4b02      	ldr	r3, [pc, #8]	; (1439c <WINC1500_disconnect+0x20>)
   14392:	701a      	strb	r2, [r3, #0]
}
   14394:	bd10      	pop	{r4, pc}
   14396:	46c0      	nop			; (mov r8, r8)
   14398:	0000f7cd 	.word	0x0000f7cd
   1439c:	20000374 	.word	0x20000374

000143a0 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   143a0:	b570      	push	{r4, r5, r6, lr}
   143a2:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   143a4:	2200      	movs	r2, #0
   143a6:	4b0d      	ldr	r3, [pc, #52]	; (143dc <WINC1500_write+0x3c>)
   143a8:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   143aa:	b2b2      	uxth	r2, r6
   143ac:	7800      	ldrb	r0, [r0, #0]
   143ae:	b240      	sxtb	r0, r0
   143b0:	2300      	movs	r3, #0
   143b2:	4c0b      	ldr	r4, [pc, #44]	; (143e0 <WINC1500_write+0x40>)
   143b4:	47a0      	blx	r4
   143b6:	2800      	cmp	r0, #0
   143b8:	d10c      	bne.n	143d4 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   143ba:	4b08      	ldr	r3, [pc, #32]	; (143dc <WINC1500_write+0x3c>)
   143bc:	781b      	ldrb	r3, [r3, #0]
   143be:	2b00      	cmp	r3, #0
   143c0:	d106      	bne.n	143d0 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   143c2:	4d08      	ldr	r5, [pc, #32]	; (143e4 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   143c4:	4c05      	ldr	r4, [pc, #20]	; (143dc <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   143c6:	2000      	movs	r0, #0
   143c8:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   143ca:	7823      	ldrb	r3, [r4, #0]
   143cc:	2b00      	cmp	r3, #0
   143ce:	d0fa      	beq.n	143c6 <WINC1500_write+0x26>
}
   143d0:	0030      	movs	r0, r6
   143d2:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   143d4:	2601      	movs	r6, #1
   143d6:	4276      	negs	r6, r6
   143d8:	e7fa      	b.n	143d0 <WINC1500_write+0x30>
   143da:	46c0      	nop			; (mov r8, r8)
   143dc:	20000377 	.word	0x20000377
   143e0:	0000f6a1 	.word	0x0000f6a1
   143e4:	0000d941 	.word	0x0000d941

000143e8 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   143e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ea:	b083      	sub	sp, #12
   143ec:	9101      	str	r1, [sp, #4]
   143ee:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   143f0:	2b00      	cmp	r3, #0
   143f2:	d100      	bne.n	143f6 <WINC1500_read+0xe>
   143f4:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   143f6:	4a22      	ldr	r2, [pc, #136]	; (14480 <WINC1500_read+0x98>)
   143f8:	6812      	ldr	r2, [r2, #0]
   143fa:	2a00      	cmp	r2, #0
   143fc:	d013      	beq.n	14426 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   143fe:	4b20      	ldr	r3, [pc, #128]	; (14480 <WINC1500_read+0x98>)
   14400:	681d      	ldr	r5, [r3, #0]
   14402:	42a5      	cmp	r5, r4
   14404:	db39      	blt.n	1447a <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   14406:	4e1f      	ldr	r6, [pc, #124]	; (14484 <WINC1500_read+0x9c>)
   14408:	6837      	ldr	r7, [r6, #0]
   1440a:	491f      	ldr	r1, [pc, #124]	; (14488 <WINC1500_read+0xa0>)
   1440c:	19c9      	adds	r1, r1, r7
   1440e:	0022      	movs	r2, r4
   14410:	9801      	ldr	r0, [sp, #4]
   14412:	4b1e      	ldr	r3, [pc, #120]	; (1448c <WINC1500_read+0xa4>)
   14414:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   14416:	1b2d      	subs	r5, r5, r4
   14418:	4b19      	ldr	r3, [pc, #100]	; (14480 <WINC1500_read+0x98>)
   1441a:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1441c:	193f      	adds	r7, r7, r4
   1441e:	6037      	str	r7, [r6, #0]
  return len;
   14420:	0020      	movs	r0, r4
}
   14422:	b003      	add	sp, #12
   14424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   14426:	2100      	movs	r1, #0
   14428:	4a19      	ldr	r2, [pc, #100]	; (14490 <WINC1500_read+0xa8>)
   1442a:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1442c:	7800      	ldrb	r0, [r0, #0]
   1442e:	b240      	sxtb	r0, r0
   14430:	2280      	movs	r2, #128	; 0x80
   14432:	0052      	lsls	r2, r2, #1
   14434:	4914      	ldr	r1, [pc, #80]	; (14488 <WINC1500_read+0xa0>)
   14436:	4d17      	ldr	r5, [pc, #92]	; (14494 <WINC1500_read+0xac>)
   14438:	47a8      	blx	r5
   1443a:	2800      	cmp	r0, #0
   1443c:	d11a      	bne.n	14474 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   1443e:	4b14      	ldr	r3, [pc, #80]	; (14490 <WINC1500_read+0xa8>)
   14440:	781b      	ldrb	r3, [r3, #0]
   14442:	2b00      	cmp	r3, #0
   14444:	d106      	bne.n	14454 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   14446:	4f14      	ldr	r7, [pc, #80]	; (14498 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   14448:	4d11      	ldr	r5, [pc, #68]	; (14490 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   1444a:	2000      	movs	r0, #0
   1444c:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   1444e:	782b      	ldrb	r3, [r5, #0]
   14450:	2b00      	cmp	r3, #0
   14452:	d0fa      	beq.n	1444a <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   14454:	4b11      	ldr	r3, [pc, #68]	; (1449c <WINC1500_read+0xb4>)
   14456:	6818      	ldr	r0, [r3, #0]
   14458:	2800      	cmp	r0, #0
   1445a:	dd05      	ble.n	14468 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1445c:	4b08      	ldr	r3, [pc, #32]	; (14480 <WINC1500_read+0x98>)
   1445e:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   14460:	2200      	movs	r2, #0
   14462:	4b08      	ldr	r3, [pc, #32]	; (14484 <WINC1500_read+0x9c>)
   14464:	601a      	str	r2, [r3, #0]
   14466:	e7ca      	b.n	143fe <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   14468:	2300      	movs	r3, #0
   1446a:	4a05      	ldr	r2, [pc, #20]	; (14480 <WINC1500_read+0x98>)
   1446c:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   1446e:	4a05      	ldr	r2, [pc, #20]	; (14484 <WINC1500_read+0x9c>)
   14470:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   14472:	e7d6      	b.n	14422 <WINC1500_read+0x3a>
		  return -1;
   14474:	2001      	movs	r0, #1
   14476:	4240      	negs	r0, r0
   14478:	e7d3      	b.n	14422 <WINC1500_read+0x3a>
	  return -1;
   1447a:	2001      	movs	r0, #1
   1447c:	4240      	negs	r0, r0
   1447e:	e7d0      	b.n	14422 <WINC1500_read+0x3a>
   14480:	20000484 	.word	0x20000484
   14484:	20000488 	.word	0x20000488
   14488:	20000378 	.word	0x20000378
   1448c:	00016a49 	.word	0x00016a49
   14490:	20000376 	.word	0x20000376
   14494:	0000f739 	.word	0x0000f739
   14498:	0000d941 	.word	0x0000d941
   1449c:	2000047c 	.word	0x2000047c

000144a0 <dnsResolveCallback>:
{
   144a0:	b510      	push	{r4, lr}
   144a2:	0002      	movs	r2, r0
   144a4:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   144a6:	4b08      	ldr	r3, [pc, #32]	; (144c8 <dnsResolveCallback+0x28>)
   144a8:	781b      	ldrb	r3, [r3, #0]
   144aa:	2b00      	cmp	r3, #0
   144ac:	d10b      	bne.n	144c6 <dnsResolveCallback+0x26>
   144ae:	4b07      	ldr	r3, [pc, #28]	; (144cc <dnsResolveCallback+0x2c>)
   144b0:	6818      	ldr	r0, [r3, #0]
   144b2:	0011      	movs	r1, r2
   144b4:	4b06      	ldr	r3, [pc, #24]	; (144d0 <dnsResolveCallback+0x30>)
   144b6:	4798      	blx	r3
   144b8:	2800      	cmp	r0, #0
   144ba:	d104      	bne.n	144c6 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   144bc:	4b05      	ldr	r3, [pc, #20]	; (144d4 <dnsResolveCallback+0x34>)
   144be:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   144c0:	2201      	movs	r2, #1
   144c2:	4b01      	ldr	r3, [pc, #4]	; (144c8 <dnsResolveCallback+0x28>)
   144c4:	701a      	strb	r2, [r3, #0]
}
   144c6:	bd10      	pop	{r4, pc}
   144c8:	20000375 	.word	0x20000375
   144cc:	20000480 	.word	0x20000480
   144d0:	00016f7f 	.word	0x00016f7f
   144d4:	20000478 	.word	0x20000478

000144d8 <tcpClientSocketEventHandler>:
{
   144d8:	b530      	push	{r4, r5, lr}
   144da:	4b12      	ldr	r3, [pc, #72]	; (14524 <tcpClientSocketEventHandler+0x4c>)
   144dc:	24a8      	movs	r4, #168	; 0xa8
   144de:	00a4      	lsls	r4, r4, #2
   144e0:	191d      	adds	r5, r3, r4
   144e2:	e002      	b.n	144ea <tcpClientSocketEventHandler+0x12>
   144e4:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   144e6:	42ab      	cmp	r3, r5
   144e8:	d00b      	beq.n	14502 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   144ea:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   144ec:	2c00      	cmp	r4, #0
   144ee:	d0f9      	beq.n	144e4 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   144f0:	6a24      	ldr	r4, [r4, #32]
   144f2:	4284      	cmp	r4, r0
   144f4:	d1f6      	bne.n	144e4 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   144f6:	2906      	cmp	r1, #6
   144f8:	d00c      	beq.n	14514 <tcpClientSocketEventHandler+0x3c>
   144fa:	2907      	cmp	r1, #7
   144fc:	d006      	beq.n	1450c <tcpClientSocketEventHandler+0x34>
   144fe:	2905      	cmp	r1, #5
   14500:	d000      	beq.n	14504 <tcpClientSocketEventHandler+0x2c>
}
   14502:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   14504:	2201      	movs	r2, #1
   14506:	4b08      	ldr	r3, [pc, #32]	; (14528 <tcpClientSocketEventHandler+0x50>)
   14508:	701a      	strb	r2, [r3, #0]
			break;
   1450a:	e7fa      	b.n	14502 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   1450c:	2201      	movs	r2, #1
   1450e:	4b07      	ldr	r3, [pc, #28]	; (1452c <tcpClientSocketEventHandler+0x54>)
   14510:	701a      	strb	r2, [r3, #0]
			break;
   14512:	e7f6      	b.n	14502 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   14514:	2304      	movs	r3, #4
   14516:	5ed2      	ldrsh	r2, [r2, r3]
   14518:	4b05      	ldr	r3, [pc, #20]	; (14530 <tcpClientSocketEventHandler+0x58>)
   1451a:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1451c:	2201      	movs	r2, #1
   1451e:	4b05      	ldr	r3, [pc, #20]	; (14534 <tcpClientSocketEventHandler+0x5c>)
   14520:	701a      	strb	r2, [r3, #0]
}
   14522:	e7ee      	b.n	14502 <tcpClientSocketEventHandler+0x2a>
   14524:	2000048c 	.word	0x2000048c
   14528:	20000374 	.word	0x20000374
   1452c:	20000377 	.word	0x20000377
   14530:	2000047c 	.word	0x2000047c
   14534:	20000376 	.word	0x20000376

00014538 <SysTick_Handler>:
	MilliTimer++;
   14538:	4a02      	ldr	r2, [pc, #8]	; (14544 <SysTick_Handler+0xc>)
   1453a:	6813      	ldr	r3, [r2, #0]
   1453c:	3301      	adds	r3, #1
   1453e:	6013      	str	r3, [r2, #0]
}
   14540:	4770      	bx	lr
   14542:	46c0      	nop			; (mov r8, r8)
   14544:	20000370 	.word	0x20000370

00014548 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   14548:	6840      	ldr	r0, [r0, #4]
   1454a:	4b02      	ldr	r3, [pc, #8]	; (14554 <TimerIsExpired+0xc>)
   1454c:	681b      	ldr	r3, [r3, #0]
   1454e:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   14550:	0fc0      	lsrs	r0, r0, #31
}
   14552:	4770      	bx	lr
   14554:	20000370 	.word	0x20000370

00014558 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   14558:	4b02      	ldr	r3, [pc, #8]	; (14564 <TimerCountdownMS+0xc>)
   1455a:	681b      	ldr	r3, [r3, #0]
   1455c:	1859      	adds	r1, r3, r1
   1455e:	6041      	str	r1, [r0, #4]
}
   14560:	4770      	bx	lr
   14562:	46c0      	nop			; (mov r8, r8)
   14564:	20000370 	.word	0x20000370

00014568 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   14568:	23fa      	movs	r3, #250	; 0xfa
   1456a:	009b      	lsls	r3, r3, #2
   1456c:	4359      	muls	r1, r3
   1456e:	4b02      	ldr	r3, [pc, #8]	; (14578 <TimerCountdown+0x10>)
   14570:	681b      	ldr	r3, [r3, #0]
   14572:	18c9      	adds	r1, r1, r3
   14574:	6041      	str	r1, [r0, #4]
}
   14576:	4770      	bx	lr
   14578:	20000370 	.word	0x20000370

0001457c <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   1457c:	6840      	ldr	r0, [r0, #4]
   1457e:	4b03      	ldr	r3, [pc, #12]	; (1458c <TimerLeftMS+0x10>)
   14580:	681b      	ldr	r3, [r3, #0]
   14582:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   14584:	43c3      	mvns	r3, r0
   14586:	17db      	asrs	r3, r3, #31
   14588:	4018      	ands	r0, r3
}
   1458a:	4770      	bx	lr
   1458c:	20000370 	.word	0x20000370

00014590 <TimerInit>:
	timer->end_time = 0;
   14590:	2300      	movs	r3, #0
   14592:	6043      	str	r3, [r0, #4]
}
   14594:	4770      	bx	lr
	...

00014598 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   14598:	2301      	movs	r3, #1
   1459a:	425b      	negs	r3, r3
   1459c:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   1459e:	4b03      	ldr	r3, [pc, #12]	; (145ac <NetworkInit+0x14>)
   145a0:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   145a2:	4b03      	ldr	r3, [pc, #12]	; (145b0 <NetworkInit+0x18>)
   145a4:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   145a6:	4b03      	ldr	r3, [pc, #12]	; (145b4 <NetworkInit+0x1c>)
   145a8:	6103      	str	r3, [r0, #16]
}
   145aa:	4770      	bx	lr
   145ac:	000143e9 	.word	0x000143e9
   145b0:	000143a1 	.word	0x000143a1
   145b4:	0001437d 	.word	0x0001437d

000145b8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   145b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   145ba:	b087      	sub	sp, #28
   145bc:	0006      	movs	r6, r0
   145be:	0015      	movs	r5, r2
   145c0:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   145c2:	4c25      	ldr	r4, [pc, #148]	; (14658 <ConnectNetwork+0xa0>)
   145c4:	2300      	movs	r3, #0
   145c6:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   145c8:	4b24      	ldr	r3, [pc, #144]	; (1465c <ConnectNetwork+0xa4>)
   145ca:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   145cc:	0008      	movs	r0, r1
   145ce:	4b24      	ldr	r3, [pc, #144]	; (14660 <ConnectNetwork+0xa8>)
   145d0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   145d2:	7823      	ldrb	r3, [r4, #0]
   145d4:	2b00      	cmp	r3, #0
   145d6:	d106      	bne.n	145e6 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   145d8:	4f22      	ldr	r7, [pc, #136]	; (14664 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   145da:	4c1f      	ldr	r4, [pc, #124]	; (14658 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   145dc:	2000      	movs	r0, #0
   145de:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   145e0:	7823      	ldrb	r3, [r4, #0]
   145e2:	2b00      	cmp	r3, #0
   145e4:	d0fa      	beq.n	145dc <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   145e6:	4b20      	ldr	r3, [pc, #128]	; (14668 <ConnectNetwork+0xb0>)
   145e8:	681a      	ldr	r2, [r3, #0]
   145ea:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   145ec:	2302      	movs	r3, #2
   145ee:	a902      	add	r1, sp, #8
   145f0:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   145f2:	022b      	lsls	r3, r5, #8
   145f4:	491d      	ldr	r1, [pc, #116]	; (1466c <ConnectNetwork+0xb4>)
   145f6:	400b      	ands	r3, r1
   145f8:	b2ad      	uxth	r5, r5
   145fa:	0a2d      	lsrs	r5, r5, #8
   145fc:	431d      	orrs	r5, r3
   145fe:	ab02      	add	r3, sp, #8
   14600:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   14602:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   14604:	6833      	ldr	r3, [r6, #0]
   14606:	2b00      	cmp	r3, #0
   14608:	db16      	blt.n	14638 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1460a:	6830      	ldr	r0, [r6, #0]
   1460c:	1c43      	adds	r3, r0, #1
   1460e:	d01b      	beq.n	14648 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   14610:	b240      	sxtb	r0, r0
   14612:	2210      	movs	r2, #16
   14614:	a902      	add	r1, sp, #8
   14616:	4b16      	ldr	r3, [pc, #88]	; (14670 <ConnectNetwork+0xb8>)
   14618:	4798      	blx	r3
   1461a:	2800      	cmp	r0, #0
   1461c:	d119      	bne.n	14652 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   1461e:	2200      	movs	r2, #0
   14620:	4b14      	ldr	r3, [pc, #80]	; (14674 <ConnectNetwork+0xbc>)
   14622:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   14624:	4d0f      	ldr	r5, [pc, #60]	; (14664 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   14626:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   14628:	2000      	movs	r0, #0
   1462a:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   1462c:	7823      	ldrb	r3, [r4, #0]
   1462e:	2b00      	cmp	r3, #0
   14630:	d0fa      	beq.n	14628 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   14632:	2000      	movs	r0, #0
   14634:	b007      	add	sp, #28
   14636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   14638:	466b      	mov	r3, sp
   1463a:	791a      	ldrb	r2, [r3, #4]
   1463c:	2101      	movs	r1, #1
   1463e:	2002      	movs	r0, #2
   14640:	4b0d      	ldr	r3, [pc, #52]	; (14678 <ConnectNetwork+0xc0>)
   14642:	4798      	blx	r3
   14644:	6030      	str	r0, [r6, #0]
   14646:	e7e0      	b.n	1460a <ConnectNetwork+0x52>
   close(n->socket);
   14648:	4b0c      	ldr	r3, [pc, #48]	; (1467c <ConnectNetwork+0xc4>)
   1464a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1464c:	2009      	movs	r0, #9
   1464e:	4240      	negs	r0, r0
   14650:	e7f0      	b.n	14634 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   14652:	2009      	movs	r0, #9
   14654:	4240      	negs	r0, r0
   14656:	e7ed      	b.n	14634 <ConnectNetwork+0x7c>
   14658:	20000375 	.word	0x20000375
   1465c:	20000480 	.word	0x20000480
   14660:	0000f8d5 	.word	0x0000f8d5
   14664:	0000d941 	.word	0x0000d941
   14668:	20000478 	.word	0x20000478
   1466c:	00ffff00 	.word	0x00ffff00
   14670:	0000f611 	.word	0x0000f611
   14674:	20000374 	.word	0x20000374
   14678:	0000f48d 	.word	0x0000f48d
   1467c:	0000f7cd 	.word	0x0000f7cd

00014680 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   14680:	b5f0      	push	{r4, r5, r6, r7, lr}
   14682:	b085      	sub	sp, #20
   14684:	0006      	movs	r6, r0
   14686:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   14688:	2800      	cmp	r0, #0
   1468a:	d03d      	beq.n	14708 <mqtt_init+0x88>
   1468c:	2900      	cmp	r1, #0
   1468e:	d03e      	beq.n	1470e <mqtt_init+0x8e>
   14690:	690b      	ldr	r3, [r1, #16]
   14692:	2b00      	cmp	r3, #0
   14694:	d03e      	beq.n	14714 <mqtt_init+0x94>
   14696:	688b      	ldr	r3, [r1, #8]
   14698:	2b00      	cmp	r3, #0
   1469a:	d03e      	beq.n	1471a <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   1469c:	888b      	ldrh	r3, [r1, #4]
   1469e:	27fa      	movs	r7, #250	; 0xfa
   146a0:	00bf      	lsls	r7, r7, #2
   146a2:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   146a4:	0004      	movs	r4, r0
   146a6:	3420      	adds	r4, #32
   146a8:	0020      	movs	r0, r4
   146aa:	4b1f      	ldr	r3, [pc, #124]	; (14728 <mqtt_init+0xa8>)
   146ac:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   146ae:	1d30      	adds	r0, r6, #4
   146b0:	2218      	movs	r2, #24
   146b2:	0029      	movs	r1, r5
   146b4:	4b1d      	ldr	r3, [pc, #116]	; (1472c <mqtt_init+0xac>)
   146b6:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   146b8:	4b1d      	ldr	r3, [pc, #116]	; (14730 <mqtt_init+0xb0>)
   146ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   146bc:	2b00      	cmp	r3, #0
   146be:	d01a      	beq.n	146f6 <mqtt_init+0x76>
   146c0:	4b1b      	ldr	r3, [pc, #108]	; (14730 <mqtt_init+0xb0>)
   146c2:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   146c4:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   146c6:	6819      	ldr	r1, [r3, #0]
   146c8:	2900      	cmp	r1, #0
   146ca:	d015      	beq.n	146f8 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   146cc:	3201      	adds	r2, #1
   146ce:	3360      	adds	r3, #96	; 0x60
   146d0:	2a07      	cmp	r2, #7
   146d2:	d1f8      	bne.n	146c6 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   146d4:	69f0      	ldr	r0, [r6, #28]
   146d6:	2800      	cmp	r0, #0
   146d8:	d022      	beq.n	14720 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   146da:	692b      	ldr	r3, [r5, #16]
   146dc:	68ea      	ldr	r2, [r5, #12]
   146de:	9202      	str	r2, [sp, #8]
   146e0:	68aa      	ldr	r2, [r5, #8]
   146e2:	9201      	str	r2, [sp, #4]
   146e4:	696a      	ldr	r2, [r5, #20]
   146e6:	9200      	str	r2, [sp, #0]
   146e8:	003a      	movs	r2, r7
   146ea:	0021      	movs	r1, r4
   146ec:	4c11      	ldr	r4, [pc, #68]	; (14734 <mqtt_init+0xb4>)
   146ee:	47a0      	blx	r4
		return SUCCESS;
   146f0:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   146f2:	b005      	add	sp, #20
   146f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   146f6:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   146f8:	480d      	ldr	r0, [pc, #52]	; (14730 <mqtt_init+0xb0>)
   146fa:	0053      	lsls	r3, r2, #1
   146fc:	1899      	adds	r1, r3, r2
   146fe:	0149      	lsls	r1, r1, #5
   14700:	1841      	adds	r1, r0, r1
   14702:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   14704:	61f1      	str	r1, [r6, #28]
   14706:	e7e5      	b.n	146d4 <mqtt_init+0x54>
		return FAILURE;
   14708:	2001      	movs	r0, #1
   1470a:	4240      	negs	r0, r0
   1470c:	e7f1      	b.n	146f2 <mqtt_init+0x72>
   1470e:	2001      	movs	r0, #1
   14710:	4240      	negs	r0, r0
   14712:	e7ee      	b.n	146f2 <mqtt_init+0x72>
   14714:	2001      	movs	r0, #1
   14716:	4240      	negs	r0, r0
   14718:	e7eb      	b.n	146f2 <mqtt_init+0x72>
   1471a:	2001      	movs	r0, #1
   1471c:	4240      	negs	r0, r0
   1471e:	e7e8      	b.n	146f2 <mqtt_init+0x72>
		return FAILURE;
   14720:	2001      	movs	r0, #1
   14722:	4240      	negs	r0, r0
   14724:	e7e5      	b.n	146f2 <mqtt_init+0x72>
   14726:	46c0      	nop			; (mov r8, r8)
   14728:	00014599 	.word	0x00014599
   1472c:	00016a49 	.word	0x00016a49
   14730:	2000048c 	.word	0x2000048c
   14734:	00013c49 	.word	0x00013c49

00014738 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   14738:	4b05      	ldr	r3, [pc, #20]	; (14750 <mqtt_get_config_defaults+0x18>)
   1473a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   1473c:	2300      	movs	r3, #0
   1473e:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   14740:	223c      	movs	r2, #60	; 0x3c
   14742:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   14744:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   14746:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   14748:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   1474a:	6143      	str	r3, [r0, #20]
}
   1474c:	4770      	bx	lr
   1474e:	46c0      	nop			; (mov r8, r8)
   14750:	0000075b 	.word	0x0000075b

00014754 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   14754:	2800      	cmp	r0, #0
   14756:	d002      	beq.n	1475e <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   14758:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   1475a:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   1475c:	4770      	bx	lr
		return FAILURE;
   1475e:	2001      	movs	r0, #1
   14760:	4240      	negs	r0, r0
   14762:	e7fb      	b.n	1475c <mqtt_register_callback+0x8>

00014764 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   14764:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   14766:	4b01      	ldr	r3, [pc, #4]	; (1476c <mqtt_socket_event_handler+0x8>)
   14768:	4798      	blx	r3
}
   1476a:	bd10      	pop	{r4, pc}
   1476c:	000144d9 	.word	0x000144d9

00014770 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   14770:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   14772:	4b01      	ldr	r3, [pc, #4]	; (14778 <mqtt_socket_resolve_handler+0x8>)
   14774:	4798      	blx	r3
}
   14776:	bd10      	pop	{r4, pc}
   14778:	000144a1 	.word	0x000144a1

0001477c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1477c:	b530      	push	{r4, r5, lr}
   1477e:	b083      	sub	sp, #12
   14780:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   14782:	7983      	ldrb	r3, [r0, #6]
   14784:	8882      	ldrh	r2, [r0, #4]
   14786:	3020      	adds	r0, #32
   14788:	4d06      	ldr	r5, [pc, #24]	; (147a4 <mqtt_connect+0x28>)
   1478a:	47a8      	blx	r5
   1478c:	9001      	str	r0, [sp, #4]
	if(module->callback)
   1478e:	6823      	ldr	r3, [r4, #0]
   14790:	2b00      	cmp	r3, #0
   14792:	d003      	beq.n	1479c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   14794:	aa01      	add	r2, sp, #4
   14796:	2100      	movs	r1, #0
   14798:	0020      	movs	r0, r4
   1479a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   1479c:	9801      	ldr	r0, [sp, #4]
   1479e:	b003      	add	sp, #12
   147a0:	bd30      	pop	{r4, r5, pc}
   147a2:	46c0      	nop			; (mov r8, r8)
   147a4:	000145b9 	.word	0x000145b9

000147a8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   147a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   147aa:	46de      	mov	lr, fp
   147ac:	4657      	mov	r7, sl
   147ae:	464e      	mov	r6, r9
   147b0:	b5c0      	push	{r6, r7, lr}
   147b2:	b098      	sub	sp, #96	; 0x60
   147b4:	0005      	movs	r5, r0
   147b6:	4689      	mov	r9, r1
   147b8:	4693      	mov	fp, r2
   147ba:	469a      	mov	sl, r3
   147bc:	ab24      	add	r3, sp, #144	; 0x90
   147be:	781f      	ldrb	r7, [r3, #0]
   147c0:	ab25      	add	r3, sp, #148	; 0x94
   147c2:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   147c4:	ac01      	add	r4, sp, #4
   147c6:	2258      	movs	r2, #88	; 0x58
   147c8:	491a      	ldr	r1, [pc, #104]	; (14834 <mqtt_connect_broker+0x8c>)
   147ca:	0020      	movs	r0, r4
   147cc:	4b1a      	ldr	r3, [pc, #104]	; (14838 <mqtt_connect_broker+0x90>)
   147ce:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   147d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   147d2:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   147d4:	465b      	mov	r3, fp
   147d6:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   147d8:	4653      	mov	r3, sl
   147da:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   147dc:	464b      	mov	r3, r9
   147de:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   147e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   147e2:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   147e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147e6:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   147e8:	233c      	movs	r3, #60	; 0x3c
   147ea:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   147ec:	3301      	adds	r3, #1
   147ee:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   147f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   147f2:	2b00      	cmp	r3, #0
   147f4:	d005      	beq.n	14802 <mqtt_connect_broker+0x5a>
   147f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147f8:	2b00      	cmp	r3, #0
   147fa:	d002      	beq.n	14802 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   147fc:	2201      	movs	r2, #1
   147fe:	ab01      	add	r3, sp, #4
   14800:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   14802:	a901      	add	r1, sp, #4
   14804:	69e8      	ldr	r0, [r5, #28]
   14806:	4b0d      	ldr	r3, [pc, #52]	; (1483c <mqtt_connect_broker+0x94>)
   14808:	4798      	blx	r3
   1480a:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   1480c:	ab17      	add	r3, sp, #92	; 0x5c
   1480e:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   14810:	682b      	ldr	r3, [r5, #0]
   14812:	2b00      	cmp	r3, #0
   14814:	d003      	beq.n	1481e <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   14816:	aa17      	add	r2, sp, #92	; 0x5c
   14818:	2101      	movs	r1, #1
   1481a:	0028      	movs	r0, r5
   1481c:	4798      	blx	r3
	
	module->isConnected = true;
   1481e:	2201      	movs	r2, #1
   14820:	2334      	movs	r3, #52	; 0x34
   14822:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   14824:	0020      	movs	r0, r4
   14826:	b018      	add	sp, #96	; 0x60
   14828:	bc1c      	pop	{r2, r3, r4}
   1482a:	4691      	mov	r9, r2
   1482c:	469a      	mov	sl, r3
   1482e:	46a3      	mov	fp, r4
   14830:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14832:	46c0      	nop			; (mov r8, r8)
   14834:	00019908 	.word	0x00019908
   14838:	00016a49 	.word	0x00016a49
   1483c:	00014051 	.word	0x00014051

00014840 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   14840:	b530      	push	{r4, r5, lr}
   14842:	b083      	sub	sp, #12
   14844:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   14846:	69c0      	ldr	r0, [r0, #28]
   14848:	4b08      	ldr	r3, [pc, #32]	; (1486c <mqtt_disconnect+0x2c>)
   1484a:	4798      	blx	r3
   1484c:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   1484e:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   14850:	6823      	ldr	r3, [r4, #0]
   14852:	2b00      	cmp	r3, #0
   14854:	d003      	beq.n	1485e <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   14856:	aa01      	add	r2, sp, #4
   14858:	2105      	movs	r1, #5
   1485a:	0020      	movs	r0, r4
   1485c:	4798      	blx	r3
	
	module->isConnected = false;
   1485e:	2200      	movs	r2, #0
   14860:	2334      	movs	r3, #52	; 0x34
   14862:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   14864:	0028      	movs	r0, r5
   14866:	b003      	add	sp, #12
   14868:	bd30      	pop	{r4, r5, pc}
   1486a:	46c0      	nop			; (mov r8, r8)
   1486c:	00014335 	.word	0x00014335

00014870 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   14870:	b570      	push	{r4, r5, r6, lr}
   14872:	b084      	sub	sp, #16
   14874:	0004      	movs	r4, r0
   14876:	a808      	add	r0, sp, #32
   14878:	7805      	ldrb	r5, [r0, #0]
   1487a:	a809      	add	r0, sp, #36	; 0x24
   1487c:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1487e:	466e      	mov	r6, sp
   14880:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   14882:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   14884:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   14886:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   14888:	466a      	mov	r2, sp
   1488a:	69e0      	ldr	r0, [r4, #28]
   1488c:	4b06      	ldr	r3, [pc, #24]	; (148a8 <mqtt_publish+0x38>)
   1488e:	4798      	blx	r3
   14890:	0005      	movs	r5, r0
	
	if(module->callback)
   14892:	6823      	ldr	r3, [r4, #0]
   14894:	2b00      	cmp	r3, #0
   14896:	d003      	beq.n	148a0 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   14898:	2200      	movs	r2, #0
   1489a:	2102      	movs	r1, #2
   1489c:	0020      	movs	r0, r4
   1489e:	4798      	blx	r3
	
	return rc;
}
   148a0:	0028      	movs	r0, r5
   148a2:	b004      	add	sp, #16
   148a4:	bd70      	pop	{r4, r5, r6, pc}
   148a6:	46c0      	nop			; (mov r8, r8)
   148a8:	00014225 	.word	0x00014225

000148ac <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   148ac:	b570      	push	{r4, r5, r6, lr}
   148ae:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   148b0:	69c0      	ldr	r0, [r0, #28]
   148b2:	4d06      	ldr	r5, [pc, #24]	; (148cc <mqtt_subscribe+0x20>)
   148b4:	47a8      	blx	r5
   148b6:	0005      	movs	r5, r0
	
	if(module->callback)
   148b8:	6823      	ldr	r3, [r4, #0]
   148ba:	2b00      	cmp	r3, #0
   148bc:	d003      	beq.n	148c6 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   148be:	2200      	movs	r2, #0
   148c0:	2103      	movs	r1, #3
   148c2:	0020      	movs	r0, r4
   148c4:	4798      	blx	r3
	
	return rc;
}
   148c6:	0028      	movs	r0, r5
   148c8:	bd70      	pop	{r4, r5, r6, pc}
   148ca:	46c0      	nop			; (mov r8, r8)
   148cc:	00014121 	.word	0x00014121

000148d0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   148d0:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   148d2:	69c0      	ldr	r0, [r0, #28]
   148d4:	4b01      	ldr	r3, [pc, #4]	; (148dc <mqtt_yield+0xc>)
   148d6:	4798      	blx	r3
   148d8:	bd10      	pop	{r4, pc}
   148da:	46c0      	nop			; (mov r8, r8)
   148dc:	00013fd5 	.word	0x00013fd5

000148e0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   148e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148e2:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   148e4:	7a03      	ldrb	r3, [r0, #8]
   148e6:	2b03      	cmp	r3, #3
   148e8:	d024      	beq.n	14934 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   148ea:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   148ec:	2b04      	cmp	r3, #4
   148ee:	d01f      	beq.n	14930 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   148f0:	68e0      	ldr	r0, [r4, #12]
   148f2:	6921      	ldr	r1, [r4, #16]
   148f4:	6962      	ldr	r2, [r4, #20]
   148f6:	4b1b      	ldr	r3, [pc, #108]	; (14964 <MQTTSerialize_connectLength+0x84>)
   148f8:	4798      	blx	r3
   148fa:	1c85      	adds	r5, r0, #2
   148fc:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   148fe:	7ee3      	ldrb	r3, [r4, #27]
   14900:	2b00      	cmp	r3, #0
   14902:	d119      	bne.n	14938 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   14904:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14906:	2b00      	cmp	r3, #0
   14908:	d024      	beq.n	14954 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   1490a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1490c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1490e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14910:	4b14      	ldr	r3, [pc, #80]	; (14964 <MQTTSerialize_connectLength+0x84>)
   14912:	4798      	blx	r3
   14914:	3002      	adds	r0, #2
   14916:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   14918:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1491a:	2b00      	cmp	r3, #0
   1491c:	d01e      	beq.n	1495c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   1491e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14920:	6d21      	ldr	r1, [r4, #80]	; 0x50
   14922:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14924:	4b0f      	ldr	r3, [pc, #60]	; (14964 <MQTTSerialize_connectLength+0x84>)
   14926:	4798      	blx	r3
   14928:	3002      	adds	r0, #2
   1492a:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   1492c:	0028      	movs	r0, r5
   1492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   14930:	360a      	adds	r6, #10
   14932:	e7dd      	b.n	148f0 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   14934:	260c      	movs	r6, #12
   14936:	e7db      	b.n	148f0 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   14938:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1493a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1493c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1493e:	4f09      	ldr	r7, [pc, #36]	; (14964 <MQTTSerialize_connectLength+0x84>)
   14940:	47b8      	blx	r7
   14942:	0006      	movs	r6, r0
   14944:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14946:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14948:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1494a:	47b8      	blx	r7
   1494c:	1836      	adds	r6, r6, r0
   1494e:	3604      	adds	r6, #4
   14950:	19ad      	adds	r5, r5, r6
   14952:	e7d7      	b.n	14904 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   14954:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14956:	2b00      	cmp	r3, #0
   14958:	d1d7      	bne.n	1490a <MQTTSerialize_connectLength+0x2a>
   1495a:	e7dd      	b.n	14918 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   1495c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1495e:	2b00      	cmp	r3, #0
   14960:	d1dd      	bne.n	1491e <MQTTSerialize_connectLength+0x3e>
   14962:	e7e3      	b.n	1492c <MQTTSerialize_connectLength+0x4c>
   14964:	00014e49 	.word	0x00014e49

00014968 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1496a:	b083      	sub	sp, #12
   1496c:	0006      	movs	r6, r0
   1496e:	000f      	movs	r7, r1
   14970:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   14972:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   14974:	0010      	movs	r0, r2
   14976:	4b45      	ldr	r3, [pc, #276]	; (14a8c <MQTTSerialize_connect+0x124>)
   14978:	4798      	blx	r3
   1497a:	0004      	movs	r4, r0
   1497c:	4b44      	ldr	r3, [pc, #272]	; (14a90 <MQTTSerialize_connect+0x128>)
   1497e:	4798      	blx	r3
   14980:	42b8      	cmp	r0, r7
   14982:	dd00      	ble.n	14986 <MQTTSerialize_connect+0x1e>
   14984:	e07f      	b.n	14a86 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   14986:	2110      	movs	r1, #16
   14988:	a801      	add	r0, sp, #4
   1498a:	4b42      	ldr	r3, [pc, #264]	; (14a94 <MQTTSerialize_connect+0x12c>)
   1498c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1498e:	0021      	movs	r1, r4
   14990:	9801      	ldr	r0, [sp, #4]
   14992:	4b41      	ldr	r3, [pc, #260]	; (14a98 <MQTTSerialize_connect+0x130>)
   14994:	4798      	blx	r3
   14996:	9b01      	ldr	r3, [sp, #4]
   14998:	469c      	mov	ip, r3
   1499a:	4460      	add	r0, ip
   1499c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   1499e:	7a2b      	ldrb	r3, [r5, #8]
   149a0:	2b04      	cmp	r3, #4
   149a2:	d045      	beq.n	14a30 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   149a4:	493d      	ldr	r1, [pc, #244]	; (14a9c <MQTTSerialize_connect+0x134>)
   149a6:	a801      	add	r0, sp, #4
   149a8:	4b3d      	ldr	r3, [pc, #244]	; (14aa0 <MQTTSerialize_connect+0x138>)
   149aa:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   149ac:	2103      	movs	r1, #3
   149ae:	a801      	add	r0, sp, #4
   149b0:	4b38      	ldr	r3, [pc, #224]	; (14a94 <MQTTSerialize_connect+0x12c>)
   149b2:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   149b4:	7ea9      	ldrb	r1, [r5, #26]
   149b6:	2301      	movs	r3, #1
   149b8:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   149ba:	7eea      	ldrb	r2, [r5, #27]
   149bc:	1e50      	subs	r0, r2, #1
   149be:	4182      	sbcs	r2, r0
   149c0:	b2d2      	uxtb	r2, r2
   149c2:	4013      	ands	r3, r2
   149c4:	009b      	lsls	r3, r3, #2
   149c6:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   149c8:	4319      	orrs	r1, r3
   149ca:	2b00      	cmp	r3, #0
   149cc:	d00b      	beq.n	149e6 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   149ce:	233d      	movs	r3, #61	; 0x3d
   149d0:	5cea      	ldrb	r2, [r5, r3]
   149d2:	3b3a      	subs	r3, #58	; 0x3a
   149d4:	4013      	ands	r3, r2
   149d6:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   149d8:	223c      	movs	r2, #60	; 0x3c
   149da:	5ca8      	ldrb	r0, [r5, r2]
   149dc:	3a3b      	subs	r2, #59	; 0x3b
   149de:	4002      	ands	r2, r0
   149e0:	0152      	lsls	r2, r2, #5
   149e2:	4319      	orrs	r1, r3
   149e4:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   149e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   149e8:	2b00      	cmp	r3, #0
   149ea:	d02a      	beq.n	14a42 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   149ec:	2380      	movs	r3, #128	; 0x80
   149ee:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   149f0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   149f2:	2b00      	cmp	r3, #0
   149f4:	d029      	beq.n	14a4a <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   149f6:	2340      	movs	r3, #64	; 0x40
   149f8:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   149fa:	b2cc      	uxtb	r4, r1
   149fc:	0021      	movs	r1, r4
   149fe:	a801      	add	r0, sp, #4
   14a00:	4b24      	ldr	r3, [pc, #144]	; (14a94 <MQTTSerialize_connect+0x12c>)
   14a02:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   14a04:	8b29      	ldrh	r1, [r5, #24]
   14a06:	a801      	add	r0, sp, #4
   14a08:	4b26      	ldr	r3, [pc, #152]	; (14aa4 <MQTTSerialize_connect+0x13c>)
   14a0a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   14a0c:	68e9      	ldr	r1, [r5, #12]
   14a0e:	692a      	ldr	r2, [r5, #16]
   14a10:	696b      	ldr	r3, [r5, #20]
   14a12:	a801      	add	r0, sp, #4
   14a14:	4f24      	ldr	r7, [pc, #144]	; (14aa8 <MQTTSerialize_connect+0x140>)
   14a16:	47b8      	blx	r7
	if (options->willFlag)
   14a18:	7eeb      	ldrb	r3, [r5, #27]
   14a1a:	2b00      	cmp	r3, #0
   14a1c:	d119      	bne.n	14a52 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   14a1e:	b263      	sxtb	r3, r4
   14a20:	2b00      	cmp	r3, #0
   14a22:	db22      	blt.n	14a6a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   14a24:	0663      	lsls	r3, r4, #25
   14a26:	d427      	bmi.n	14a78 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   14a2c:	b003      	add	sp, #12
   14a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   14a30:	491e      	ldr	r1, [pc, #120]	; (14aac <MQTTSerialize_connect+0x144>)
   14a32:	a801      	add	r0, sp, #4
   14a34:	4b1a      	ldr	r3, [pc, #104]	; (14aa0 <MQTTSerialize_connect+0x138>)
   14a36:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   14a38:	2104      	movs	r1, #4
   14a3a:	a801      	add	r0, sp, #4
   14a3c:	4b15      	ldr	r3, [pc, #84]	; (14a94 <MQTTSerialize_connect+0x12c>)
   14a3e:	4798      	blx	r3
   14a40:	e7b8      	b.n	149b4 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   14a42:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14a44:	2b00      	cmp	r3, #0
   14a46:	d1d1      	bne.n	149ec <MQTTSerialize_connect+0x84>
   14a48:	e7d2      	b.n	149f0 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   14a4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14a4c:	2b00      	cmp	r3, #0
   14a4e:	d1d2      	bne.n	149f6 <MQTTSerialize_connect+0x8e>
   14a50:	e7d3      	b.n	149fa <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   14a52:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14a54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14a58:	a801      	add	r0, sp, #4
   14a5a:	4f13      	ldr	r7, [pc, #76]	; (14aa8 <MQTTSerialize_connect+0x140>)
   14a5c:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   14a5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   14a60:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14a62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14a64:	a801      	add	r0, sp, #4
   14a66:	47b8      	blx	r7
   14a68:	e7d9      	b.n	14a1e <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14a6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14a6c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   14a6e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14a70:	a801      	add	r0, sp, #4
   14a72:	4f0d      	ldr	r7, [pc, #52]	; (14aa8 <MQTTSerialize_connect+0x140>)
   14a74:	47b8      	blx	r7
   14a76:	e7d5      	b.n	14a24 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14a78:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14a7a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14a7c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14a7e:	a801      	add	r0, sp, #4
   14a80:	4c09      	ldr	r4, [pc, #36]	; (14aa8 <MQTTSerialize_connect+0x140>)
   14a82:	47a0      	blx	r4
   14a84:	e7d0      	b.n	14a28 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14a86:	2002      	movs	r0, #2
   14a88:	4240      	negs	r0, r0
	return rc;
   14a8a:	e7cf      	b.n	14a2c <MQTTSerialize_connect+0xc4>
   14a8c:	000148e1 	.word	0x000148e1
   14a90:	00014ced 	.word	0x00014ced
   14a94:	00014d4f 	.word	0x00014d4f
   14a98:	00014c65 	.word	0x00014c65
   14a9c:	00019968 	.word	0x00019968
   14aa0:	00014d85 	.word	0x00014d85
   14aa4:	00014d5b 	.word	0x00014d5b
   14aa8:	00014dbd 	.word	0x00014dbd
   14aac:	00019960 	.word	0x00019960

00014ab0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	b082      	sub	sp, #8
   14ab4:	0005      	movs	r5, r0
   14ab6:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14ab8:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14aba:	a801      	add	r0, sp, #4
   14abc:	4b0e      	ldr	r3, [pc, #56]	; (14af8 <MQTTDeserialize_connack+0x48>)
   14abe:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   14ac0:	23f0      	movs	r3, #240	; 0xf0
   14ac2:	4003      	ands	r3, r0
	int rc = 0;
   14ac4:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   14ac6:	2b20      	cmp	r3, #32
   14ac8:	d001      	beq.n	14ace <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14aca:	b002      	add	sp, #8
   14acc:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14ace:	4669      	mov	r1, sp
   14ad0:	9801      	ldr	r0, [sp, #4]
   14ad2:	4b0a      	ldr	r3, [pc, #40]	; (14afc <MQTTDeserialize_connack+0x4c>)
   14ad4:	4798      	blx	r3
   14ad6:	9b01      	ldr	r3, [sp, #4]
   14ad8:	181b      	adds	r3, r3, r0
   14ada:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   14adc:	9b00      	ldr	r3, [sp, #0]
   14ade:	2b01      	cmp	r3, #1
   14ae0:	ddf3      	ble.n	14aca <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   14ae2:	a801      	add	r0, sp, #4
   14ae4:	4e04      	ldr	r6, [pc, #16]	; (14af8 <MQTTDeserialize_connack+0x48>)
   14ae6:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   14ae8:	0600      	lsls	r0, r0, #24
   14aea:	0fc0      	lsrs	r0, r0, #31
   14aec:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   14aee:	a801      	add	r0, sp, #4
   14af0:	47b0      	blx	r6
   14af2:	7020      	strb	r0, [r4, #0]
	rc = 1;
   14af4:	2001      	movs	r0, #1
   14af6:	e7e8      	b.n	14aca <MQTTDeserialize_connack+0x1a>
   14af8:	00014d43 	.word	0x00014d43
   14afc:	00014d15 	.word	0x00014d15

00014b00 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   14b00:	b510      	push	{r4, lr}
   14b02:	b082      	sub	sp, #8
   14b04:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   14b06:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   14b08:	2901      	cmp	r1, #1
   14b0a:	dd0f      	ble.n	14b2c <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   14b0c:	210f      	movs	r1, #15
   14b0e:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14b10:	0109      	lsls	r1, r1, #4
   14b12:	a801      	add	r0, sp, #4
   14b14:	4b07      	ldr	r3, [pc, #28]	; (14b34 <MQTTSerialize_zero+0x34>)
   14b16:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14b18:	2100      	movs	r1, #0
   14b1a:	9801      	ldr	r0, [sp, #4]
   14b1c:	4b06      	ldr	r3, [pc, #24]	; (14b38 <MQTTSerialize_zero+0x38>)
   14b1e:	4798      	blx	r3
   14b20:	9b01      	ldr	r3, [sp, #4]
   14b22:	469c      	mov	ip, r3
   14b24:	4460      	add	r0, ip
	rc = ptr - buf;
   14b26:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14b28:	b002      	add	sp, #8
   14b2a:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14b2c:	2002      	movs	r0, #2
   14b2e:	4240      	negs	r0, r0
	return rc;
   14b30:	e7fa      	b.n	14b28 <MQTTSerialize_zero+0x28>
   14b32:	46c0      	nop			; (mov r8, r8)
   14b34:	00014d4f 	.word	0x00014d4f
   14b38:	00014c65 	.word	0x00014c65

00014b3c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14b3c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   14b3e:	220e      	movs	r2, #14
   14b40:	4b01      	ldr	r3, [pc, #4]	; (14b48 <MQTTSerialize_disconnect+0xc>)
   14b42:	4798      	blx	r3
}
   14b44:	bd10      	pop	{r4, pc}
   14b46:	46c0      	nop			; (mov r8, r8)
   14b48:	00014b01 	.word	0x00014b01

00014b4c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14b4c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   14b4e:	220c      	movs	r2, #12
   14b50:	4b01      	ldr	r3, [pc, #4]	; (14b58 <MQTTSerialize_pingreq+0xc>)
   14b52:	4798      	blx	r3
}
   14b54:	bd10      	pop	{r4, pc}
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	00014b01 	.word	0x00014b01

00014b5c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b5e:	b085      	sub	sp, #20
   14b60:	0005      	movs	r5, r0
   14b62:	000e      	movs	r6, r1
   14b64:	0014      	movs	r4, r2
   14b66:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b6a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14b6c:	2300      	movs	r3, #0
   14b6e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14b70:	a803      	add	r0, sp, #12
   14b72:	4b1c      	ldr	r3, [pc, #112]	; (14be4 <MQTTDeserialize_publish+0x88>)
   14b74:	4798      	blx	r3
   14b76:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14b78:	22f0      	movs	r2, #240	; 0xf0
   14b7a:	4010      	ands	r0, r2
	int rc = 0;
   14b7c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   14b7e:	2830      	cmp	r0, #48	; 0x30
   14b80:	d002      	beq.n	14b88 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14b82:	0038      	movs	r0, r7
   14b84:	b005      	add	sp, #20
   14b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   14b88:	071a      	lsls	r2, r3, #28
   14b8a:	0fd2      	lsrs	r2, r2, #31
   14b8c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   14b8e:	075a      	lsls	r2, r3, #29
   14b90:	0f92      	lsrs	r2, r2, #30
   14b92:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   14b94:	07db      	lsls	r3, r3, #31
   14b96:	0fdb      	lsrs	r3, r3, #31
   14b98:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14b9a:	a902      	add	r1, sp, #8
   14b9c:	9803      	ldr	r0, [sp, #12]
   14b9e:	4b12      	ldr	r3, [pc, #72]	; (14be8 <MQTTDeserialize_publish+0x8c>)
   14ba0:	4798      	blx	r3
   14ba2:	0007      	movs	r7, r0
   14ba4:	9b03      	ldr	r3, [sp, #12]
   14ba6:	181c      	adds	r4, r3, r0
   14ba8:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   14baa:	9b02      	ldr	r3, [sp, #8]
   14bac:	469c      	mov	ip, r3
   14bae:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14bb0:	0022      	movs	r2, r4
   14bb2:	a903      	add	r1, sp, #12
   14bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
   14bb6:	4b0d      	ldr	r3, [pc, #52]	; (14bec <MQTTDeserialize_publish+0x90>)
   14bb8:	4798      	blx	r3
   14bba:	2800      	cmp	r0, #0
   14bbc:	d0e1      	beq.n	14b82 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   14bbe:	9b03      	ldr	r3, [sp, #12]
   14bc0:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14bc2:	d4de      	bmi.n	14b82 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   14bc4:	6833      	ldr	r3, [r6, #0]
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	dd04      	ble.n	14bd4 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   14bca:	a803      	add	r0, sp, #12
   14bcc:	4b08      	ldr	r3, [pc, #32]	; (14bf0 <MQTTDeserialize_publish+0x94>)
   14bce:	4798      	blx	r3
   14bd0:	9b01      	ldr	r3, [sp, #4]
   14bd2:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   14bd4:	9b03      	ldr	r3, [sp, #12]
   14bd6:	1ae4      	subs	r4, r4, r3
   14bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14bda:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   14bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14bde:	6013      	str	r3, [r2, #0]
	rc = 1;
   14be0:	2701      	movs	r7, #1
   14be2:	e7ce      	b.n	14b82 <MQTTDeserialize_publish+0x26>
   14be4:	00014d43 	.word	0x00014d43
   14be8:	00014d15 	.word	0x00014d15
   14bec:	00014e09 	.word	0x00014e09
   14bf0:	00014d31 	.word	0x00014d31

00014bf4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   14bf4:	b570      	push	{r4, r5, r6, lr}
   14bf6:	b082      	sub	sp, #8
   14bf8:	0005      	movs	r5, r0
   14bfa:	000e      	movs	r6, r1
   14bfc:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14bfe:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14c00:	a801      	add	r0, sp, #4
   14c02:	4b0c      	ldr	r3, [pc, #48]	; (14c34 <MQTTDeserialize_ack+0x40>)
   14c04:	4798      	blx	r3
	*dup = header.bits.dup;
   14c06:	0703      	lsls	r3, r0, #28
   14c08:	0fdb      	lsrs	r3, r3, #31
   14c0a:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   14c0c:	0600      	lsls	r0, r0, #24
   14c0e:	0f00      	lsrs	r0, r0, #28
   14c10:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14c12:	4669      	mov	r1, sp
   14c14:	9801      	ldr	r0, [sp, #4]
   14c16:	4b08      	ldr	r3, [pc, #32]	; (14c38 <MQTTDeserialize_ack+0x44>)
   14c18:	4798      	blx	r3
   14c1a:	9b01      	ldr	r3, [sp, #4]
   14c1c:	181b      	adds	r3, r3, r0
   14c1e:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   14c20:	9b00      	ldr	r3, [sp, #0]
   14c22:	2b01      	cmp	r3, #1
   14c24:	dd04      	ble.n	14c30 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   14c26:	a801      	add	r0, sp, #4
   14c28:	4b04      	ldr	r3, [pc, #16]	; (14c3c <MQTTDeserialize_ack+0x48>)
   14c2a:	4798      	blx	r3
   14c2c:	8020      	strh	r0, [r4, #0]

	rc = 1;
   14c2e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14c30:	b002      	add	sp, #8
   14c32:	bd70      	pop	{r4, r5, r6, pc}
   14c34:	00014d43 	.word	0x00014d43
   14c38:	00014d15 	.word	0x00014d15
   14c3c:	00014d31 	.word	0x00014d31

00014c40 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   14c40:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   14c42:	2900      	cmp	r1, #0
   14c44:	dd0a      	ble.n	14c5c <bufchar+0x1c>
   14c46:	4b06      	ldr	r3, [pc, #24]	; (14c60 <bufchar+0x20>)
   14c48:	681b      	ldr	r3, [r3, #0]
   14c4a:	185d      	adds	r5, r3, r1
   14c4c:	002c      	movs	r4, r5
		*c = *bufptr++;
   14c4e:	781a      	ldrb	r2, [r3, #0]
   14c50:	7002      	strb	r2, [r0, #0]
   14c52:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   14c54:	42a3      	cmp	r3, r4
   14c56:	d1fa      	bne.n	14c4e <bufchar+0xe>
   14c58:	4b01      	ldr	r3, [pc, #4]	; (14c60 <bufchar+0x20>)
   14c5a:	601d      	str	r5, [r3, #0]
	return count;
}
   14c5c:	0008      	movs	r0, r1
   14c5e:	bd30      	pop	{r4, r5, pc}
   14c60:	2000072c 	.word	0x2000072c

00014c64 <MQTTPacket_encode>:
{
   14c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c66:	b083      	sub	sp, #12
   14c68:	2500      	movs	r5, #0
		char d = length % 128;
   14c6a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   14c6c:	2780      	movs	r7, #128	; 0x80
   14c6e:	427f      	negs	r7, r7
   14c70:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   14c72:	17ca      	asrs	r2, r1, #31
   14c74:	0e54      	lsrs	r4, r2, #25
   14c76:	190b      	adds	r3, r1, r4
   14c78:	4033      	ands	r3, r6
   14c7a:	1b1b      	subs	r3, r3, r4
   14c7c:	b2db      	uxtb	r3, r3
		length /= 128;
   14c7e:	4032      	ands	r2, r6
   14c80:	1851      	adds	r1, r2, r1
   14c82:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   14c84:	2900      	cmp	r1, #0
   14c86:	dd03      	ble.n	14c90 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   14c88:	433b      	orrs	r3, r7
		buf[rc++] = d;
   14c8a:	5543      	strb	r3, [r0, r5]
   14c8c:	3501      	adds	r5, #1
   14c8e:	e7ef      	b.n	14c70 <MQTTPacket_encode+0xc>
   14c90:	5543      	strb	r3, [r0, r5]
   14c92:	9801      	ldr	r0, [sp, #4]
   14c94:	3001      	adds	r0, #1
}
   14c96:	b003      	add	sp, #12
   14c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014c9a <MQTTPacket_decode>:
{
   14c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c9c:	46ce      	mov	lr, r9
   14c9e:	4647      	mov	r7, r8
   14ca0:	b580      	push	{r7, lr}
   14ca2:	b083      	sub	sp, #12
   14ca4:	4680      	mov	r8, r0
   14ca6:	000f      	movs	r7, r1
	*value = 0;
   14ca8:	2300      	movs	r3, #0
   14caa:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14cac:	2401      	movs	r4, #1
	int multiplier = 1;
   14cae:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   14cb0:	466b      	mov	r3, sp
   14cb2:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   14cb4:	237f      	movs	r3, #127	; 0x7f
   14cb6:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   14cb8:	2101      	movs	r1, #1
   14cba:	0028      	movs	r0, r5
   14cbc:	47c0      	blx	r8
		if (rc != 1)
   14cbe:	2801      	cmp	r0, #1
   14cc0:	d10e      	bne.n	14ce0 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   14cc2:	782b      	ldrb	r3, [r5, #0]
   14cc4:	464a      	mov	r2, r9
   14cc6:	401a      	ands	r2, r3
   14cc8:	4372      	muls	r2, r6
   14cca:	6839      	ldr	r1, [r7, #0]
   14ccc:	468c      	mov	ip, r1
   14cce:	4462      	add	r2, ip
   14cd0:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   14cd2:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   14cd4:	b25b      	sxtb	r3, r3
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	da02      	bge.n	14ce0 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14cda:	3401      	adds	r4, #1
   14cdc:	2c05      	cmp	r4, #5
   14cde:	d1eb      	bne.n	14cb8 <MQTTPacket_decode+0x1e>
}
   14ce0:	0020      	movs	r0, r4
   14ce2:	b003      	add	sp, #12
   14ce4:	bc0c      	pop	{r2, r3}
   14ce6:	4690      	mov	r8, r2
   14ce8:	4699      	mov	r9, r3
   14cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014cec <MQTTPacket_len>:
{
   14cec:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   14cee:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   14cf0:	3002      	adds	r0, #2
	if (rem_len < 128)
   14cf2:	2a7f      	cmp	r2, #127	; 0x7f
   14cf4:	dd07      	ble.n	14d06 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   14cf6:	4905      	ldr	r1, [pc, #20]	; (14d0c <MQTTPacket_len+0x20>)
		rem_len += 2;
   14cf8:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   14cfa:	428a      	cmp	r2, r1
   14cfc:	dd03      	ble.n	14d06 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   14cfe:	4904      	ldr	r1, [pc, #16]	; (14d10 <MQTTPacket_len+0x24>)
		rem_len += 4;
   14d00:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   14d02:	428a      	cmp	r2, r1
   14d04:	dd00      	ble.n	14d08 <MQTTPacket_len+0x1c>
}
   14d06:	4770      	bx	lr
		rem_len += 3;
   14d08:	1d18      	adds	r0, r3, #4
   14d0a:	e7fc      	b.n	14d06 <MQTTPacket_len+0x1a>
   14d0c:	00003fff 	.word	0x00003fff
   14d10:	001ffffe 	.word	0x001ffffe

00014d14 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   14d14:	b510      	push	{r4, lr}
	bufptr = buf;
   14d16:	4b03      	ldr	r3, [pc, #12]	; (14d24 <MQTTPacket_decodeBuf+0x10>)
   14d18:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   14d1a:	4803      	ldr	r0, [pc, #12]	; (14d28 <MQTTPacket_decodeBuf+0x14>)
   14d1c:	4b03      	ldr	r3, [pc, #12]	; (14d2c <MQTTPacket_decodeBuf+0x18>)
   14d1e:	4798      	blx	r3
}
   14d20:	bd10      	pop	{r4, pc}
   14d22:	46c0      	nop			; (mov r8, r8)
   14d24:	2000072c 	.word	0x2000072c
   14d28:	00014c41 	.word	0x00014c41
   14d2c:	00014c9b 	.word	0x00014c9b

00014d30 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   14d30:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   14d32:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   14d34:	7813      	ldrb	r3, [r2, #0]
   14d36:	021b      	lsls	r3, r3, #8
   14d38:	7850      	ldrb	r0, [r2, #1]
   14d3a:	1818      	adds	r0, r3, r0
	*pptr += 2;
   14d3c:	3202      	adds	r2, #2
   14d3e:	600a      	str	r2, [r1, #0]
	return len;
}
   14d40:	4770      	bx	lr

00014d42 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   14d42:	0002      	movs	r2, r0
	char c = **pptr;
   14d44:	6803      	ldr	r3, [r0, #0]
   14d46:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   14d48:	3301      	adds	r3, #1
   14d4a:	6013      	str	r3, [r2, #0]
	return c;
}
   14d4c:	4770      	bx	lr

00014d4e <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   14d4e:	6803      	ldr	r3, [r0, #0]
   14d50:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   14d52:	6803      	ldr	r3, [r0, #0]
   14d54:	3301      	adds	r3, #1
   14d56:	6003      	str	r3, [r0, #0]
}
   14d58:	4770      	bx	lr

00014d5a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   14d5a:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   14d5c:	17ca      	asrs	r2, r1, #31
   14d5e:	23ff      	movs	r3, #255	; 0xff
   14d60:	001c      	movs	r4, r3
   14d62:	4014      	ands	r4, r2
   14d64:	1864      	adds	r4, r4, r1
   14d66:	1224      	asrs	r4, r4, #8
   14d68:	6805      	ldr	r5, [r0, #0]
   14d6a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   14d6c:	6804      	ldr	r4, [r0, #0]
   14d6e:	1c65      	adds	r5, r4, #1
   14d70:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   14d72:	0e12      	lsrs	r2, r2, #24
   14d74:	1889      	adds	r1, r1, r2
   14d76:	400b      	ands	r3, r1
   14d78:	1a9b      	subs	r3, r3, r2
   14d7a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   14d7c:	6803      	ldr	r3, [r0, #0]
   14d7e:	3301      	adds	r3, #1
   14d80:	6003      	str	r3, [r0, #0]
}
   14d82:	bd30      	pop	{r4, r5, pc}

00014d84 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   14d84:	b570      	push	{r4, r5, r6, lr}
   14d86:	0004      	movs	r4, r0
   14d88:	000e      	movs	r6, r1
	int len = strlen(string);
   14d8a:	0008      	movs	r0, r1
   14d8c:	4b08      	ldr	r3, [pc, #32]	; (14db0 <writeCString+0x2c>)
   14d8e:	4798      	blx	r3
   14d90:	0005      	movs	r5, r0
	writeInt(pptr, len);
   14d92:	0001      	movs	r1, r0
   14d94:	0020      	movs	r0, r4
   14d96:	4b07      	ldr	r3, [pc, #28]	; (14db4 <writeCString+0x30>)
   14d98:	4798      	blx	r3
	memcpy(*pptr, string, len);
   14d9a:	002a      	movs	r2, r5
   14d9c:	0031      	movs	r1, r6
   14d9e:	6820      	ldr	r0, [r4, #0]
   14da0:	4b05      	ldr	r3, [pc, #20]	; (14db8 <writeCString+0x34>)
   14da2:	4798      	blx	r3
	*pptr += len;
   14da4:	6823      	ldr	r3, [r4, #0]
   14da6:	469c      	mov	ip, r3
   14da8:	4465      	add	r5, ip
   14daa:	6025      	str	r5, [r4, #0]
}
   14dac:	bd70      	pop	{r4, r5, r6, pc}
   14dae:	46c0      	nop			; (mov r8, r8)
   14db0:	00016fdf 	.word	0x00016fdf
   14db4:	00014d5b 	.word	0x00014d5b
   14db8:	00016a49 	.word	0x00016a49

00014dbc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   14dbc:	b530      	push	{r4, r5, lr}
   14dbe:	b085      	sub	sp, #20
   14dc0:	0005      	movs	r5, r0
   14dc2:	9101      	str	r1, [sp, #4]
   14dc4:	9303      	str	r3, [sp, #12]
   14dc6:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   14dc8:	dc06      	bgt.n	14dd8 <writeMQTTString+0x1c>
   14dca:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   14dcc:	2900      	cmp	r1, #0
   14dce:	d010      	beq.n	14df2 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   14dd0:	4b0a      	ldr	r3, [pc, #40]	; (14dfc <writeMQTTString+0x40>)
   14dd2:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   14dd4:	b005      	add	sp, #20
   14dd6:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   14dd8:	0011      	movs	r1, r2
   14dda:	4b09      	ldr	r3, [pc, #36]	; (14e00 <writeMQTTString+0x44>)
   14ddc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   14dde:	0022      	movs	r2, r4
   14de0:	9903      	ldr	r1, [sp, #12]
   14de2:	6828      	ldr	r0, [r5, #0]
   14de4:	4b07      	ldr	r3, [pc, #28]	; (14e04 <writeMQTTString+0x48>)
   14de6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   14de8:	682b      	ldr	r3, [r5, #0]
   14dea:	469c      	mov	ip, r3
   14dec:	4464      	add	r4, ip
   14dee:	602c      	str	r4, [r5, #0]
   14df0:	e7f0      	b.n	14dd4 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   14df2:	2100      	movs	r1, #0
   14df4:	4b02      	ldr	r3, [pc, #8]	; (14e00 <writeMQTTString+0x44>)
   14df6:	4798      	blx	r3
}
   14df8:	e7ec      	b.n	14dd4 <writeMQTTString+0x18>
   14dfa:	46c0      	nop			; (mov r8, r8)
   14dfc:	00014d85 	.word	0x00014d85
   14e00:	00014d5b 	.word	0x00014d5b
   14e04:	00016a49 	.word	0x00016a49

00014e08 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   14e08:	b570      	push	{r4, r5, r6, lr}
   14e0a:	0005      	movs	r5, r0
   14e0c:	000c      	movs	r4, r1
   14e0e:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   14e10:	680b      	ldr	r3, [r1, #0]
   14e12:	1ad3      	subs	r3, r2, r3
   14e14:	2b01      	cmp	r3, #1
   14e16:	dd12      	ble.n	14e3e <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   14e18:	0008      	movs	r0, r1
   14e1a:	4b0a      	ldr	r3, [pc, #40]	; (14e44 <readMQTTLenString+0x3c>)
   14e1c:	4798      	blx	r3
   14e1e:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14e20:	6822      	ldr	r2, [r4, #0]
   14e22:	1811      	adds	r1, r2, r0
	int rc = 0;
   14e24:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14e26:	428e      	cmp	r6, r1
   14e28:	d305      	bcc.n	14e36 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   14e2a:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   14e2c:	6823      	ldr	r3, [r4, #0]
   14e2e:	469c      	mov	ip, r3
   14e30:	4460      	add	r0, ip
   14e32:	6020      	str	r0, [r4, #0]
			rc = 1;
   14e34:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   14e36:	2200      	movs	r2, #0
   14e38:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   14e3a:	0018      	movs	r0, r3
   14e3c:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   14e3e:	2300      	movs	r3, #0
   14e40:	e7f9      	b.n	14e36 <readMQTTLenString+0x2e>
   14e42:	46c0      	nop			; (mov r8, r8)
   14e44:	00014d31 	.word	0x00014d31

00014e48 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   14e48:	b500      	push	{lr}
   14e4a:	b085      	sub	sp, #20
   14e4c:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   14e4e:	2800      	cmp	r0, #0
   14e50:	d003      	beq.n	14e5a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   14e52:	4b03      	ldr	r3, [pc, #12]	; (14e60 <MQTTstrlen+0x18>)
   14e54:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   14e56:	b005      	add	sp, #20
   14e58:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   14e5a:	9802      	ldr	r0, [sp, #8]
	return rc;
   14e5c:	e7fb      	b.n	14e56 <MQTTstrlen+0xe>
   14e5e:	46c0      	nop			; (mov r8, r8)
   14e60:	00016fdf 	.word	0x00016fdf

00014e64 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   14e64:	b570      	push	{r4, r5, r6, lr}
   14e66:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   14e68:	6806      	ldr	r6, [r0, #0]
   14e6a:	2e00      	cmp	r6, #0
   14e6c:	d00b      	beq.n	14e86 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   14e6e:	0030      	movs	r0, r6
   14e70:	4b0b      	ldr	r3, [pc, #44]	; (14ea0 <MQTTPacket_equals+0x3c>)
   14e72:	4798      	blx	r3
   14e74:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   14e76:	0028      	movs	r0, r5
   14e78:	4b09      	ldr	r3, [pc, #36]	; (14ea0 <MQTTPacket_equals+0x3c>)
   14e7a:	4798      	blx	r3
   14e7c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14e7e:	4284      	cmp	r4, r0
   14e80:	d004      	beq.n	14e8c <MQTTPacket_equals+0x28>
}
   14e82:	0018      	movs	r0, r3
   14e84:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   14e86:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   14e88:	6844      	ldr	r4, [r0, #4]
   14e8a:	e7f4      	b.n	14e76 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14e8c:	0022      	movs	r2, r4
   14e8e:	0029      	movs	r1, r5
   14e90:	0030      	movs	r0, r6
   14e92:	4b04      	ldr	r3, [pc, #16]	; (14ea4 <MQTTPacket_equals+0x40>)
   14e94:	4798      	blx	r3
   14e96:	4243      	negs	r3, r0
   14e98:	4143      	adcs	r3, r0
   14e9a:	b2db      	uxtb	r3, r3
   14e9c:	e7f1      	b.n	14e82 <MQTTPacket_equals+0x1e>
   14e9e:	46c0      	nop			; (mov r8, r8)
   14ea0:	00016fdf 	.word	0x00016fdf
   14ea4:	00016fed 	.word	0x00016fed

00014ea8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14ea8:	b510      	push	{r4, lr}
   14eaa:	b084      	sub	sp, #16
   14eac:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14eae:	0008      	movs	r0, r1
   14eb0:	0011      	movs	r1, r2
   14eb2:	001a      	movs	r2, r3
   14eb4:	4b05      	ldr	r3, [pc, #20]	; (14ecc <MQTTSerialize_publishLength+0x24>)
   14eb6:	4798      	blx	r3
   14eb8:	3002      	adds	r0, #2
   14eba:	9b06      	ldr	r3, [sp, #24]
   14ebc:	469c      	mov	ip, r3
   14ebe:	4460      	add	r0, ip
	if (qos > 0)
   14ec0:	2c00      	cmp	r4, #0
   14ec2:	dd00      	ble.n	14ec6 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   14ec4:	3002      	adds	r0, #2
	return len;
}
   14ec6:	b004      	add	sp, #16
   14ec8:	bd10      	pop	{r4, pc}
   14eca:	46c0      	nop			; (mov r8, r8)
   14ecc:	00014e49 	.word	0x00014e49

00014ed0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   14ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ed2:	46de      	mov	lr, fp
   14ed4:	4657      	mov	r7, sl
   14ed6:	464e      	mov	r6, r9
   14ed8:	b5c0      	push	{r6, r7, lr}
   14eda:	b084      	sub	sp, #16
   14edc:	0007      	movs	r7, r0
   14ede:	468b      	mov	fp, r1
   14ee0:	4692      	mov	sl, r2
   14ee2:	001e      	movs	r6, r3
   14ee4:	ab0c      	add	r3, sp, #48	; 0x30
   14ee6:	781b      	ldrb	r3, [r3, #0]
   14ee8:	4699      	mov	r9, r3
   14eea:	ab0d      	add	r3, sp, #52	; 0x34
   14eec:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   14eee:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   14ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14ef2:	9300      	str	r3, [sp, #0]
   14ef4:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14efa:	0030      	movs	r0, r6
   14efc:	4d1f      	ldr	r5, [pc, #124]	; (14f7c <MQTTSerialize_publish+0xac>)
   14efe:	47a8      	blx	r5
   14f00:	0005      	movs	r5, r0
   14f02:	4b1f      	ldr	r3, [pc, #124]	; (14f80 <MQTTSerialize_publish+0xb0>)
   14f04:	4798      	blx	r3
   14f06:	4558      	cmp	r0, fp
   14f08:	dc34      	bgt.n	14f74 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   14f0a:	2201      	movs	r2, #1
   14f0c:	4653      	mov	r3, sl
   14f0e:	4013      	ands	r3, r2
   14f10:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   14f12:	2103      	movs	r1, #3
   14f14:	4031      	ands	r1, r6
   14f16:	0048      	lsls	r0, r1, #1
   14f18:	2130      	movs	r1, #48	; 0x30
   14f1a:	4319      	orrs	r1, r3
   14f1c:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   14f1e:	464b      	mov	r3, r9
   14f20:	4013      	ands	r3, r2
   14f22:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14f24:	4319      	orrs	r1, r3
   14f26:	a803      	add	r0, sp, #12
   14f28:	4b16      	ldr	r3, [pc, #88]	; (14f84 <MQTTSerialize_publish+0xb4>)
   14f2a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14f2c:	0029      	movs	r1, r5
   14f2e:	9803      	ldr	r0, [sp, #12]
   14f30:	4b15      	ldr	r3, [pc, #84]	; (14f88 <MQTTSerialize_publish+0xb8>)
   14f32:	4798      	blx	r3
   14f34:	9b03      	ldr	r3, [sp, #12]
   14f36:	469c      	mov	ip, r3
   14f38:	4460      	add	r0, ip
   14f3a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   14f3c:	990e      	ldr	r1, [sp, #56]	; 0x38
   14f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14f42:	a803      	add	r0, sp, #12
   14f44:	4d11      	ldr	r5, [pc, #68]	; (14f8c <MQTTSerialize_publish+0xbc>)
   14f46:	47a8      	blx	r5

	if (qos > 0)
   14f48:	2e00      	cmp	r6, #0
   14f4a:	dd03      	ble.n	14f54 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   14f4c:	0021      	movs	r1, r4
   14f4e:	a803      	add	r0, sp, #12
   14f50:	4b0f      	ldr	r3, [pc, #60]	; (14f90 <MQTTSerialize_publish+0xc0>)
   14f52:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   14f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f56:	9911      	ldr	r1, [sp, #68]	; 0x44
   14f58:	9803      	ldr	r0, [sp, #12]
   14f5a:	4b0e      	ldr	r3, [pc, #56]	; (14f94 <MQTTSerialize_publish+0xc4>)
   14f5c:	4798      	blx	r3
	ptr += payloadlen;
   14f5e:	9b03      	ldr	r3, [sp, #12]
   14f60:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f62:	4694      	mov	ip, r2
   14f64:	4463      	add	r3, ip

	rc = ptr - buf;
   14f66:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14f68:	b004      	add	sp, #16
   14f6a:	bc1c      	pop	{r2, r3, r4}
   14f6c:	4691      	mov	r9, r2
   14f6e:	469a      	mov	sl, r3
   14f70:	46a3      	mov	fp, r4
   14f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14f74:	2002      	movs	r0, #2
   14f76:	4240      	negs	r0, r0
	return rc;
   14f78:	e7f6      	b.n	14f68 <MQTTSerialize_publish+0x98>
   14f7a:	46c0      	nop			; (mov r8, r8)
   14f7c:	00014ea9 	.word	0x00014ea9
   14f80:	00014ced 	.word	0x00014ced
   14f84:	00014d4f 	.word	0x00014d4f
   14f88:	00014c65 	.word	0x00014c65
   14f8c:	00014dbd 	.word	0x00014dbd
   14f90:	00014d5b 	.word	0x00014d5b
   14f94:	00016a49 	.word	0x00016a49

00014f98 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14f98:	b530      	push	{r4, r5, lr}
   14f9a:	b083      	sub	sp, #12
   14f9c:	0004      	movs	r4, r0
   14f9e:	a806      	add	r0, sp, #24
   14fa0:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   14fa2:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   14fa4:	2903      	cmp	r1, #3
   14fa6:	dd1e      	ble.n	14fe6 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   14fa8:	210f      	movs	r1, #15
   14faa:	4011      	ands	r1, r2
	header.bits.dup = dup;
   14fac:	2001      	movs	r0, #1
   14fae:	4003      	ands	r3, r0
   14fb0:	00db      	lsls	r3, r3, #3
   14fb2:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   14fb4:	3a06      	subs	r2, #6
   14fb6:	4250      	negs	r0, r2
   14fb8:	4142      	adcs	r2, r0
   14fba:	0052      	lsls	r2, r2, #1
   14fbc:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   14fbe:	4311      	orrs	r1, r2
   14fc0:	a801      	add	r0, sp, #4
   14fc2:	4b0a      	ldr	r3, [pc, #40]	; (14fec <MQTTSerialize_ack+0x54>)
   14fc4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   14fc6:	2102      	movs	r1, #2
   14fc8:	9801      	ldr	r0, [sp, #4]
   14fca:	4b09      	ldr	r3, [pc, #36]	; (14ff0 <MQTTSerialize_ack+0x58>)
   14fcc:	4798      	blx	r3
   14fce:	9b01      	ldr	r3, [sp, #4]
   14fd0:	469c      	mov	ip, r3
   14fd2:	4460      	add	r0, ip
   14fd4:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   14fd6:	0029      	movs	r1, r5
   14fd8:	a801      	add	r0, sp, #4
   14fda:	4b06      	ldr	r3, [pc, #24]	; (14ff4 <MQTTSerialize_ack+0x5c>)
   14fdc:	4798      	blx	r3
	rc = ptr - buf;
   14fde:	9b01      	ldr	r3, [sp, #4]
   14fe0:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14fe2:	b003      	add	sp, #12
   14fe4:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14fe6:	2002      	movs	r0, #2
   14fe8:	4240      	negs	r0, r0
	return rc;
   14fea:	e7fa      	b.n	14fe2 <MQTTSerialize_ack+0x4a>
   14fec:	00014d4f 	.word	0x00014d4f
   14ff0:	00014c65 	.word	0x00014c65
   14ff4:	00014d5b 	.word	0x00014d5b

00014ff8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   14ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ffa:	46c6      	mov	lr, r8
   14ffc:	b500      	push	{lr}
   14ffe:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   15000:	dd12      	ble.n	15028 <MQTTSerialize_subscribeLength+0x30>
   15002:	000c      	movs	r4, r1
   15004:	2602      	movs	r6, #2
   15006:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   15008:	4b08      	ldr	r3, [pc, #32]	; (1502c <MQTTSerialize_subscribeLength+0x34>)
   1500a:	4698      	mov	r8, r3
   1500c:	6820      	ldr	r0, [r4, #0]
   1500e:	6861      	ldr	r1, [r4, #4]
   15010:	68a2      	ldr	r2, [r4, #8]
   15012:	47c0      	blx	r8
   15014:	3003      	adds	r0, #3
   15016:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   15018:	3501      	adds	r5, #1
   1501a:	340c      	adds	r4, #12
   1501c:	42af      	cmp	r7, r5
   1501e:	d1f5      	bne.n	1500c <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   15020:	0030      	movs	r0, r6
   15022:	bc04      	pop	{r2}
   15024:	4690      	mov	r8, r2
   15026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   15028:	2602      	movs	r6, #2
	return len;
   1502a:	e7f9      	b.n	15020 <MQTTSerialize_subscribeLength+0x28>
   1502c:	00014e49 	.word	0x00014e49

00015030 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   15030:	b5f0      	push	{r4, r5, r6, r7, lr}
   15032:	46d6      	mov	lr, sl
   15034:	464f      	mov	r7, r9
   15036:	4646      	mov	r6, r8
   15038:	b5c0      	push	{r6, r7, lr}
   1503a:	b084      	sub	sp, #16
   1503c:	4682      	mov	sl, r0
   1503e:	000e      	movs	r6, r1
   15040:	0015      	movs	r5, r2
   15042:	9301      	str	r3, [sp, #4]
   15044:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   15046:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   15048:	990d      	ldr	r1, [sp, #52]	; 0x34
   1504a:	0038      	movs	r0, r7
   1504c:	4b1f      	ldr	r3, [pc, #124]	; (150cc <MQTTSerialize_subscribe+0x9c>)
   1504e:	4798      	blx	r3
   15050:	0004      	movs	r4, r0
   15052:	4b1f      	ldr	r3, [pc, #124]	; (150d0 <MQTTSerialize_subscribe+0xa0>)
   15054:	4798      	blx	r3
   15056:	42b0      	cmp	r0, r6
   15058:	dc34      	bgt.n	150c4 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   1505a:	2101      	movs	r1, #1
   1505c:	4029      	ands	r1, r5
   1505e:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   15060:	2180      	movs	r1, #128	; 0x80
   15062:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   15064:	2302      	movs	r3, #2
   15066:	4319      	orrs	r1, r3
   15068:	a803      	add	r0, sp, #12
   1506a:	4b1a      	ldr	r3, [pc, #104]	; (150d4 <MQTTSerialize_subscribe+0xa4>)
   1506c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1506e:	0021      	movs	r1, r4
   15070:	9803      	ldr	r0, [sp, #12]
   15072:	4b19      	ldr	r3, [pc, #100]	; (150d8 <MQTTSerialize_subscribe+0xa8>)
   15074:	4798      	blx	r3
   15076:	9a03      	ldr	r2, [sp, #12]
   15078:	4694      	mov	ip, r2
   1507a:	4460      	add	r0, ip
   1507c:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   1507e:	9901      	ldr	r1, [sp, #4]
   15080:	a803      	add	r0, sp, #12
   15082:	4b16      	ldr	r3, [pc, #88]	; (150dc <MQTTSerialize_subscribe+0xac>)
   15084:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   15086:	2f00      	cmp	r7, #0
   15088:	dd13      	ble.n	150b2 <MQTTSerialize_subscribe+0x82>
   1508a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1508c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1508e:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   15090:	4b13      	ldr	r3, [pc, #76]	; (150e0 <MQTTSerialize_subscribe+0xb0>)
   15092:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   15094:	4b0f      	ldr	r3, [pc, #60]	; (150d4 <MQTTSerialize_subscribe+0xa4>)
   15096:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   15098:	6821      	ldr	r1, [r4, #0]
   1509a:	6862      	ldr	r2, [r4, #4]
   1509c:	68a3      	ldr	r3, [r4, #8]
   1509e:	a803      	add	r0, sp, #12
   150a0:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   150a2:	ce02      	ldmia	r6!, {r1}
   150a4:	b2c9      	uxtb	r1, r1
   150a6:	a803      	add	r0, sp, #12
   150a8:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   150aa:	3501      	adds	r5, #1
   150ac:	340c      	adds	r4, #12
   150ae:	42af      	cmp	r7, r5
   150b0:	d1f2      	bne.n	15098 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   150b2:	9b03      	ldr	r3, [sp, #12]
   150b4:	4652      	mov	r2, sl
   150b6:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   150b8:	b004      	add	sp, #16
   150ba:	bc1c      	pop	{r2, r3, r4}
   150bc:	4690      	mov	r8, r2
   150be:	4699      	mov	r9, r3
   150c0:	46a2      	mov	sl, r4
   150c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   150c4:	2002      	movs	r0, #2
   150c6:	4240      	negs	r0, r0
	return rc;
   150c8:	e7f6      	b.n	150b8 <MQTTSerialize_subscribe+0x88>
   150ca:	46c0      	nop			; (mov r8, r8)
   150cc:	00014ff9 	.word	0x00014ff9
   150d0:	00014ced 	.word	0x00014ced
   150d4:	00014d4f 	.word	0x00014d4f
   150d8:	00014c65 	.word	0x00014c65
   150dc:	00014d5b 	.word	0x00014d5b
   150e0:	00014dbd 	.word	0x00014dbd

000150e4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   150e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   150e6:	46ce      	mov	lr, r9
   150e8:	4647      	mov	r7, r8
   150ea:	b580      	push	{r7, lr}
   150ec:	b083      	sub	sp, #12
   150ee:	0004      	movs	r4, r0
   150f0:	000e      	movs	r6, r1
   150f2:	0015      	movs	r5, r2
   150f4:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   150f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   150f8:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   150fa:	a801      	add	r0, sp, #4
   150fc:	4b1e      	ldr	r3, [pc, #120]	; (15178 <MQTTDeserialize_suback+0x94>)
   150fe:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   15100:	23f0      	movs	r3, #240	; 0xf0
   15102:	4003      	ands	r3, r0
	int rc = 0;
   15104:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   15106:	2b90      	cmp	r3, #144	; 0x90
   15108:	d004      	beq.n	15114 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1510a:	b003      	add	sp, #12
   1510c:	bc0c      	pop	{r2, r3}
   1510e:	4690      	mov	r8, r2
   15110:	4699      	mov	r9, r3
   15112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   15114:	4669      	mov	r1, sp
   15116:	9801      	ldr	r0, [sp, #4]
   15118:	4b18      	ldr	r3, [pc, #96]	; (1517c <MQTTDeserialize_suback+0x98>)
   1511a:	4798      	blx	r3
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	181b      	adds	r3, r3, r0
   15120:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   15122:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   15124:	2a01      	cmp	r2, #1
   15126:	ddf0      	ble.n	1510a <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   15128:	4698      	mov	r8, r3
   1512a:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   1512c:	a801      	add	r0, sp, #4
   1512e:	4b14      	ldr	r3, [pc, #80]	; (15180 <MQTTDeserialize_suback+0x9c>)
   15130:	4798      	blx	r3
   15132:	8020      	strh	r0, [r4, #0]
	*count = 0;
   15134:	2300      	movs	r3, #0
   15136:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   15138:	9b01      	ldr	r3, [sp, #4]
   1513a:	4598      	cmp	r8, r3
   1513c:	d916      	bls.n	1516c <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   1513e:	2e00      	cmp	r6, #0
   15140:	db16      	blt.n	15170 <MQTTDeserialize_suback+0x8c>
   15142:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   15144:	4a0c      	ldr	r2, [pc, #48]	; (15178 <MQTTDeserialize_suback+0x94>)
   15146:	4691      	mov	r9, r2
   15148:	1c5a      	adds	r2, r3, #1
   1514a:	602a      	str	r2, [r5, #0]
   1514c:	009b      	lsls	r3, r3, #2
   1514e:	18fc      	adds	r4, r7, r3
   15150:	a801      	add	r0, sp, #4
   15152:	47c8      	blx	r9
   15154:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   15156:	9b01      	ldr	r3, [sp, #4]
   15158:	4598      	cmp	r8, r3
   1515a:	d905      	bls.n	15168 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   1515c:	682b      	ldr	r3, [r5, #0]
   1515e:	42b3      	cmp	r3, r6
   15160:	ddf2      	ble.n	15148 <MQTTDeserialize_suback+0x64>
			rc = -1;
   15162:	2001      	movs	r0, #1
   15164:	4240      	negs	r0, r0
	return rc;
   15166:	e7d0      	b.n	1510a <MQTTDeserialize_suback+0x26>
	rc = 1;
   15168:	2001      	movs	r0, #1
   1516a:	e7ce      	b.n	1510a <MQTTDeserialize_suback+0x26>
   1516c:	2001      	movs	r0, #1
   1516e:	e7cc      	b.n	1510a <MQTTDeserialize_suback+0x26>
			rc = -1;
   15170:	2001      	movs	r0, #1
   15172:	4240      	negs	r0, r0
   15174:	e7c9      	b.n	1510a <MQTTDeserialize_suback+0x26>
   15176:	46c0      	nop			; (mov r8, r8)
   15178:	00014d43 	.word	0x00014d43
   1517c:	00014d15 	.word	0x00014d15
   15180:	00014d31 	.word	0x00014d31

00015184 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   15184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15186:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   15188:	2041      	movs	r0, #65	; 0x41
   1518a:	5c23      	ldrb	r3, [r4, r0]
   1518c:	2501      	movs	r5, #1
   1518e:	432b      	orrs	r3, r5
   15190:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   15192:	b292      	uxth	r2, r2
   15194:	2000      	movs	r0, #0
   15196:	5620      	ldrsb	r0, [r4, r0]
   15198:	2300      	movs	r3, #0
   1519a:	4d12      	ldr	r5, [pc, #72]	; (151e4 <_http_client_send_wait+0x60>)
   1519c:	47a8      	blx	r5
   1519e:	2800      	cmp	r0, #0
   151a0:	db16      	blt.n	151d0 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   151a2:	2341      	movs	r3, #65	; 0x41
   151a4:	5ce3      	ldrb	r3, [r4, r3]
   151a6:	07db      	lsls	r3, r3, #31
   151a8:	d518      	bpl.n	151dc <_http_client_send_wait+0x58>
   151aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   151ac:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   151ae:	2b02      	cmp	r3, #2
   151b0:	d917      	bls.n	151e2 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   151b2:	4f0d      	ldr	r7, [pc, #52]	; (151e8 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   151b4:	4e0d      	ldr	r6, [pc, #52]	; (151ec <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   151b6:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   151b8:	2000      	movs	r0, #0
   151ba:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   151bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
   151be:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   151c0:	5d63      	ldrb	r3, [r4, r5]
   151c2:	07db      	lsls	r3, r3, #31
   151c4:	d50c      	bpl.n	151e0 <_http_client_send_wait+0x5c>
   151c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   151c8:	2b02      	cmp	r3, #2
   151ca:	d8f5      	bhi.n	151b8 <_http_client_send_wait+0x34>
	return 0;
   151cc:	2000      	movs	r0, #0
   151ce:	e008      	b.n	151e2 <_http_client_send_wait+0x5e>
		module->sending = 0;
   151d0:	2241      	movs	r2, #65	; 0x41
   151d2:	5ca3      	ldrb	r3, [r4, r2]
   151d4:	2101      	movs	r1, #1
   151d6:	438b      	bics	r3, r1
   151d8:	54a3      	strb	r3, [r4, r2]
		return result;
   151da:	e002      	b.n	151e2 <_http_client_send_wait+0x5e>
	return 0;
   151dc:	2000      	movs	r0, #0
   151de:	e000      	b.n	151e2 <_http_client_send_wait+0x5e>
   151e0:	2000      	movs	r0, #0
}
   151e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151e4:	0000f6a1 	.word	0x0000f6a1
   151e8:	0000d941 	.word	0x0000d941
   151ec:	00015c11 	.word	0x00015c11

000151f0 <http_client_get_config_defaults>:
	config->port = 80;
   151f0:	2350      	movs	r3, #80	; 0x50
   151f2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   151f4:	2300      	movs	r3, #0
   151f6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   151f8:	4a05      	ldr	r2, [pc, #20]	; (15210 <http_client_get_config_defaults+0x20>)
   151fa:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   151fc:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   151fe:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   15200:	3301      	adds	r3, #1
   15202:	33ff      	adds	r3, #255	; 0xff
   15204:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   15206:	3bae      	subs	r3, #174	; 0xae
   15208:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1520a:	4b02      	ldr	r3, [pc, #8]	; (15214 <http_client_get_config_defaults+0x24>)
   1520c:	6183      	str	r3, [r0, #24]
}
   1520e:	4770      	bx	lr
   15210:	00004e20 	.word	0x00004e20
   15214:	00019a58 	.word	0x00019a58

00015218 <http_client_init>:
{
   15218:	b570      	push	{r4, r5, r6, lr}
   1521a:	0004      	movs	r4, r0
   1521c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   1521e:	2800      	cmp	r0, #0
   15220:	d038      	beq.n	15294 <http_client_init+0x7c>
   15222:	2900      	cmp	r1, #0
   15224:	d039      	beq.n	1529a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   15226:	690b      	ldr	r3, [r1, #16]
   15228:	2b00      	cmp	r3, #0
   1522a:	d039      	beq.n	152a0 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   1522c:	684b      	ldr	r3, [r1, #4]
   1522e:	2b00      	cmp	r3, #0
   15230:	d039      	beq.n	152a6 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   15232:	694b      	ldr	r3, [r1, #20]
   15234:	2b51      	cmp	r3, #81	; 0x51
   15236:	d939      	bls.n	152ac <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   15238:	22e8      	movs	r2, #232	; 0xe8
   1523a:	2100      	movs	r1, #0
   1523c:	4b1e      	ldr	r3, [pc, #120]	; (152b8 <http_client_init+0xa0>)
   1523e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   15240:	0020      	movs	r0, r4
   15242:	3050      	adds	r0, #80	; 0x50
   15244:	221c      	movs	r2, #28
   15246:	0029      	movs	r1, r5
   15248:	4b1c      	ldr	r3, [pc, #112]	; (152bc <http_client_init+0xa4>)
   1524a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   1524c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1524e:	2b00      	cmp	r3, #0
   15250:	d008      	beq.n	15264 <http_client_init+0x4c>
	if (config->timeout > 0) {
   15252:	892b      	ldrh	r3, [r5, #8]
   15254:	2b00      	cmp	r3, #0
   15256:	d111      	bne.n	1527c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   15258:	2300      	movs	r3, #0
   1525a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1525c:	22d8      	movs	r2, #216	; 0xd8
   1525e:	50a3      	str	r3, [r4, r2]
	return 0;
   15260:	2000      	movs	r0, #0
}
   15262:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   15264:	6928      	ldr	r0, [r5, #16]
   15266:	4b16      	ldr	r3, [pc, #88]	; (152c0 <http_client_init+0xa8>)
   15268:	4798      	blx	r3
   1526a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1526c:	2800      	cmp	r0, #0
   1526e:	d020      	beq.n	152b2 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   15270:	2241      	movs	r2, #65	; 0x41
   15272:	5ca3      	ldrb	r3, [r4, r2]
   15274:	2104      	movs	r1, #4
   15276:	430b      	orrs	r3, r1
   15278:	54a3      	strb	r3, [r4, r2]
   1527a:	e7ea      	b.n	15252 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1527c:	6868      	ldr	r0, [r5, #4]
   1527e:	2300      	movs	r3, #0
   15280:	0022      	movs	r2, r4
   15282:	4910      	ldr	r1, [pc, #64]	; (152c4 <http_client_init+0xac>)
   15284:	4d10      	ldr	r5, [pc, #64]	; (152c8 <http_client_init+0xb0>)
   15286:	47a8      	blx	r5
   15288:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   1528a:	2800      	cmp	r0, #0
   1528c:	dae4      	bge.n	15258 <http_client_init+0x40>
			return -ENOSPC;
   1528e:	201c      	movs	r0, #28
   15290:	4240      	negs	r0, r0
   15292:	e7e6      	b.n	15262 <http_client_init+0x4a>
		return -EINVAL;
   15294:	2016      	movs	r0, #22
   15296:	4240      	negs	r0, r0
   15298:	e7e3      	b.n	15262 <http_client_init+0x4a>
   1529a:	2016      	movs	r0, #22
   1529c:	4240      	negs	r0, r0
   1529e:	e7e0      	b.n	15262 <http_client_init+0x4a>
		return -EINVAL;
   152a0:	2016      	movs	r0, #22
   152a2:	4240      	negs	r0, r0
   152a4:	e7dd      	b.n	15262 <http_client_init+0x4a>
		return -EINVAL;
   152a6:	2016      	movs	r0, #22
   152a8:	4240      	negs	r0, r0
   152aa:	e7da      	b.n	15262 <http_client_init+0x4a>
		return -EINVAL;
   152ac:	2016      	movs	r0, #22
   152ae:	4240      	negs	r0, r0
   152b0:	e7d7      	b.n	15262 <http_client_init+0x4a>
			return -ENOMEM;
   152b2:	200c      	movs	r0, #12
   152b4:	4240      	negs	r0, r0
   152b6:	e7d4      	b.n	15262 <http_client_init+0x4a>
   152b8:	00016a7f 	.word	0x00016a7f
   152bc:	00016a49 	.word	0x00016a49
   152c0:	00016a21 	.word	0x00016a21
   152c4:	00015365 	.word	0x00015365
   152c8:	00015bd9 	.word	0x00015bd9

000152cc <http_client_register_callback>:
	if (module == NULL) {
   152cc:	2800      	cmp	r0, #0
   152ce:	d002      	beq.n	152d6 <http_client_register_callback+0xa>
	module->cb = callback;
   152d0:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   152d2:	2000      	movs	r0, #0
}
   152d4:	4770      	bx	lr
		return -EINVAL;
   152d6:	2016      	movs	r0, #22
   152d8:	4240      	negs	r0, r0
   152da:	e7fb      	b.n	152d4 <http_client_register_callback+0x8>

000152dc <_http_client_clear_conn>:
{
   152dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   152de:	b085      	sub	sp, #20
   152e0:	0004      	movs	r4, r0
   152e2:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   152e4:	23c0      	movs	r3, #192	; 0xc0
   152e6:	58c3      	ldr	r3, [r0, r3]
   152e8:	2b00      	cmp	r3, #0
   152ea:	d002      	beq.n	152f2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   152ec:	22c4      	movs	r2, #196	; 0xc4
   152ee:	5880      	ldr	r0, [r0, r2]
   152f0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   152f2:	0020      	movs	r0, r4
   152f4:	30b0      	adds	r0, #176	; 0xb0
   152f6:	2218      	movs	r2, #24
   152f8:	2100      	movs	r1, #0
   152fa:	4b17      	ldr	r3, [pc, #92]	; (15358 <_http_client_clear_conn+0x7c>)
   152fc:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   152fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15300:	2b00      	cmp	r3, #0
   15302:	d124      	bne.n	1534e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   15304:	2300      	movs	r3, #0
   15306:	56e3      	ldrsb	r3, [r4, r3]
   15308:	009b      	lsls	r3, r3, #2
   1530a:	2500      	movs	r5, #0
   1530c:	4a13      	ldr	r2, [pc, #76]	; (1535c <_http_client_clear_conn+0x80>)
   1530e:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   15310:	0020      	movs	r0, r4
   15312:	306c      	adds	r0, #108	; 0x6c
   15314:	226c      	movs	r2, #108	; 0x6c
   15316:	2100      	movs	r1, #0
   15318:	4f0f      	ldr	r7, [pc, #60]	; (15358 <_http_client_clear_conn+0x7c>)
   1531a:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1531c:	0020      	movs	r0, r4
   1531e:	30d8      	adds	r0, #216	; 0xd8
   15320:	2210      	movs	r2, #16
   15322:	2100      	movs	r1, #0
   15324:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   15326:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   15328:	23d8      	movs	r3, #216	; 0xd8
   1532a:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   1532c:	2241      	movs	r2, #65	; 0x41
   1532e:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   15330:	2101      	movs	r1, #1
   15332:	438b      	bics	r3, r1
   15334:	3101      	adds	r1, #1
   15336:	438b      	bics	r3, r1
   15338:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   1533a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   1533c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1533e:	2b00      	cmp	r3, #0
   15340:	d003      	beq.n	1534a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   15342:	aa01      	add	r2, sp, #4
   15344:	3102      	adds	r1, #2
   15346:	0020      	movs	r0, r4
   15348:	4798      	blx	r3
}
   1534a:	b005      	add	sp, #20
   1534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   1534e:	2000      	movs	r0, #0
   15350:	5620      	ldrsb	r0, [r4, r0]
   15352:	4b03      	ldr	r3, [pc, #12]	; (15360 <_http_client_clear_conn+0x84>)
   15354:	4798      	blx	r3
   15356:	e7d5      	b.n	15304 <_http_client_clear_conn+0x28>
   15358:	00016a7f 	.word	0x00016a7f
   1535c:	20000730 	.word	0x20000730
   15360:	0000f7cd 	.word	0x0000f7cd

00015364 <http_client_timer_callback>:
{
   15364:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   15366:	2a00      	cmp	r2, #0
   15368:	d004      	beq.n	15374 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   1536a:	213e      	movs	r1, #62	; 0x3e
   1536c:	4249      	negs	r1, r1
   1536e:	0010      	movs	r0, r2
   15370:	4b01      	ldr	r3, [pc, #4]	; (15378 <http_client_timer_callback+0x14>)
   15372:	4798      	blx	r3
}
   15374:	bd10      	pop	{r4, pc}
   15376:	46c0      	nop			; (mov r8, r8)
   15378:	000152dd 	.word	0x000152dd

0001537c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1537c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1537e:	46de      	mov	lr, fp
   15380:	4657      	mov	r7, sl
   15382:	b580      	push	{r7, lr}
   15384:	b095      	sub	sp, #84	; 0x54
   15386:	af02      	add	r7, sp, #8
   15388:	0004      	movs	r4, r0
   1538a:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1538c:	2310      	movs	r3, #16
   1538e:	2208      	movs	r2, #8
   15390:	18ba      	adds	r2, r7, r2
   15392:	18d2      	adds	r2, r2, r3
   15394:	4bb1      	ldr	r3, [pc, #708]	; (1565c <_http_client_request+0x2e0>)
   15396:	cb23      	ldmia	r3!, {r0, r1, r5}
   15398:	c223      	stmia	r2!, {r0, r1, r5}
   1539a:	681b      	ldr	r3, [r3, #0]
   1539c:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1539e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   153a0:	1dd3      	adds	r3, r2, #7
   153a2:	08db      	lsrs	r3, r3, #3
   153a4:	00db      	lsls	r3, r3, #3
   153a6:	4669      	mov	r1, sp
   153a8:	1acb      	subs	r3, r1, r3
   153aa:	469d      	mov	sp, r3
   153ac:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   153ae:	2c00      	cmp	r4, #0
   153b0:	d100      	bne.n	153b4 <_http_client_request+0x38>
   153b2:	e1f0      	b.n	15796 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   153b4:	2341      	movs	r3, #65	; 0x41
   153b6:	5ce3      	ldrb	r3, [r4, r3]
   153b8:	07db      	lsls	r3, r3, #31
   153ba:	d500      	bpl.n	153be <_http_client_request+0x42>
   153bc:	e1eb      	b.n	15796 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   153be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   153c0:	2b03      	cmp	r3, #3
   153c2:	d004      	beq.n	153ce <_http_client_request+0x52>
   153c4:	2b04      	cmp	r3, #4
   153c6:	d100      	bne.n	153ca <_http_client_request+0x4e>
   153c8:	e120      	b.n	1560c <_http_client_request+0x290>
   153ca:	46dd      	mov	sp, fp
   153cc:	e1e4      	b.n	15798 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   153ce:	2300      	movs	r3, #0
   153d0:	21cc      	movs	r1, #204	; 0xcc
   153d2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   153d4:	3104      	adds	r1, #4
   153d6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   153d8:	9400      	str	r4, [sp, #0]
   153da:	4ba1      	ldr	r3, [pc, #644]	; (15660 <_http_client_request+0x2e4>)
   153dc:	0031      	movs	r1, r6
   153de:	202c      	movs	r0, #44	; 0x2c
   153e0:	2508      	movs	r5, #8
   153e2:	46ac      	mov	ip, r5
   153e4:	44bc      	add	ip, r7
   153e6:	4460      	add	r0, ip
   153e8:	4d9e      	ldr	r5, [pc, #632]	; (15664 <_http_client_request+0x2e8>)
   153ea:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   153ec:	23c8      	movs	r3, #200	; 0xc8
   153ee:	5ce3      	ldrb	r3, [r4, r3]
   153f0:	2b01      	cmp	r3, #1
   153f2:	d100      	bne.n	153f6 <_http_client_request+0x7a>
   153f4:	e0a9      	b.n	1554a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   153f6:	2b02      	cmp	r3, #2
   153f8:	d100      	bne.n	153fc <_http_client_request+0x80>
   153fa:	e0af      	b.n	1555c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   153fc:	2b03      	cmp	r3, #3
   153fe:	d100      	bne.n	15402 <_http_client_request+0x86>
   15400:	e0b5      	b.n	1556e <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   15402:	2b04      	cmp	r3, #4
   15404:	d100      	bne.n	15408 <_http_client_request+0x8c>
   15406:	e0bb      	b.n	15580 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   15408:	2b05      	cmp	r3, #5
   1540a:	d100      	bne.n	1540e <_http_client_request+0x92>
   1540c:	e0c1      	b.n	15592 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1540e:	2b06      	cmp	r3, #6
   15410:	d100      	bne.n	15414 <_http_client_request+0x98>
   15412:	e0c7      	b.n	155a4 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   15414:	0025      	movs	r5, r4
   15416:	3570      	adds	r5, #112	; 0x70
   15418:	0028      	movs	r0, r5
   1541a:	4b93      	ldr	r3, [pc, #588]	; (15668 <_http_client_request+0x2ec>)
   1541c:	469a      	mov	sl, r3
   1541e:	4798      	blx	r3
   15420:	0002      	movs	r2, r0
   15422:	0029      	movs	r1, r5
   15424:	232c      	movs	r3, #44	; 0x2c
   15426:	2008      	movs	r0, #8
   15428:	1838      	adds	r0, r7, r0
   1542a:	18c0      	adds	r0, r0, r3
   1542c:	4d8f      	ldr	r5, [pc, #572]	; (1566c <_http_client_request+0x2f0>)
   1542e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   15430:	220b      	movs	r2, #11
   15432:	498f      	ldr	r1, [pc, #572]	; (15670 <_http_client_request+0x2f4>)
   15434:	232c      	movs	r3, #44	; 0x2c
   15436:	2008      	movs	r0, #8
   15438:	1838      	adds	r0, r7, r0
   1543a:	18c0      	adds	r0, r0, r3
   1543c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1543e:	220c      	movs	r2, #12
   15440:	498c      	ldr	r1, [pc, #560]	; (15674 <_http_client_request+0x2f8>)
   15442:	232c      	movs	r3, #44	; 0x2c
   15444:	2008      	movs	r0, #8
   15446:	1838      	adds	r0, r7, r0
   15448:	18c0      	adds	r0, r0, r3
   1544a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1544c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1544e:	607b      	str	r3, [r7, #4]
   15450:	0018      	movs	r0, r3
   15452:	47d0      	blx	sl
   15454:	0002      	movs	r2, r0
   15456:	6879      	ldr	r1, [r7, #4]
   15458:	232c      	movs	r3, #44	; 0x2c
   1545a:	2008      	movs	r0, #8
   1545c:	1838      	adds	r0, r7, r0
   1545e:	18c0      	adds	r0, r0, r3
   15460:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15462:	2202      	movs	r2, #2
   15464:	4984      	ldr	r1, [pc, #528]	; (15678 <_http_client_request+0x2fc>)
   15466:	232c      	movs	r3, #44	; 0x2c
   15468:	2008      	movs	r0, #8
   1546a:	1838      	adds	r0, r7, r0
   1546c:	18c0      	adds	r0, r0, r3
   1546e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   15470:	2206      	movs	r2, #6
   15472:	4982      	ldr	r1, [pc, #520]	; (1567c <_http_client_request+0x300>)
   15474:	232c      	movs	r3, #44	; 0x2c
   15476:	2008      	movs	r0, #8
   15478:	1838      	adds	r0, r7, r0
   1547a:	18c0      	adds	r0, r0, r3
   1547c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1547e:	1c63      	adds	r3, r4, #1
   15480:	607b      	str	r3, [r7, #4]
   15482:	0018      	movs	r0, r3
   15484:	47d0      	blx	sl
   15486:	0002      	movs	r2, r0
   15488:	6879      	ldr	r1, [r7, #4]
   1548a:	232c      	movs	r3, #44	; 0x2c
   1548c:	2008      	movs	r0, #8
   1548e:	1838      	adds	r0, r7, r0
   15490:	18c0      	adds	r0, r0, r3
   15492:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15494:	2202      	movs	r2, #2
   15496:	4978      	ldr	r1, [pc, #480]	; (15678 <_http_client_request+0x2fc>)
   15498:	232c      	movs	r3, #44	; 0x2c
   1549a:	2008      	movs	r0, #8
   1549c:	1838      	adds	r0, r7, r0
   1549e:	18c0      	adds	r0, r0, r3
   154a0:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   154a2:	2218      	movs	r2, #24
   154a4:	4976      	ldr	r1, [pc, #472]	; (15680 <_http_client_request+0x304>)
   154a6:	232c      	movs	r3, #44	; 0x2c
   154a8:	2008      	movs	r0, #8
   154aa:	1838      	adds	r0, r7, r0
   154ac:	18c0      	adds	r0, r0, r3
   154ae:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   154b0:	2213      	movs	r2, #19
   154b2:	4974      	ldr	r1, [pc, #464]	; (15684 <_http_client_request+0x308>)
   154b4:	232c      	movs	r3, #44	; 0x2c
   154b6:	2008      	movs	r0, #8
   154b8:	1838      	adds	r0, r7, r0
   154ba:	18c0      	adds	r0, r0, r3
   154bc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   154be:	2217      	movs	r2, #23
   154c0:	4971      	ldr	r1, [pc, #452]	; (15688 <_http_client_request+0x30c>)
   154c2:	232c      	movs	r3, #44	; 0x2c
   154c4:	2008      	movs	r0, #8
   154c6:	1838      	adds	r0, r7, r0
   154c8:	18c0      	adds	r0, r0, r3
   154ca:	47a8      	blx	r5

		if (entity->read != NULL) {
   154cc:	0023      	movs	r3, r4
   154ce:	33b0      	adds	r3, #176	; 0xb0
   154d0:	68db      	ldr	r3, [r3, #12]
   154d2:	2b00      	cmp	r3, #0
   154d4:	d07b      	beq.n	155ce <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   154d6:	23b0      	movs	r3, #176	; 0xb0
   154d8:	5ce3      	ldrb	r3, [r4, r3]
   154da:	2b00      	cmp	r3, #0
   154dc:	d16b      	bne.n	155b6 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   154de:	0023      	movs	r3, r4
   154e0:	33b0      	adds	r3, #176	; 0xb0
   154e2:	689b      	ldr	r3, [r3, #8]
   154e4:	2b00      	cmp	r3, #0
   154e6:	d072      	beq.n	155ce <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   154e8:	0022      	movs	r2, r4
   154ea:	32b0      	adds	r2, #176	; 0xb0
   154ec:	6950      	ldr	r0, [r2, #20]
   154ee:	4798      	blx	r3
   154f0:	23cc      	movs	r3, #204	; 0xcc
   154f2:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   154f4:	2800      	cmp	r0, #0
   154f6:	da00      	bge.n	154fa <_http_client_request+0x17e>
   154f8:	e0ac      	b.n	15654 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   154fa:	0002      	movs	r2, r0
   154fc:	4963      	ldr	r1, [pc, #396]	; (1568c <_http_client_request+0x310>)
   154fe:	2320      	movs	r3, #32
   15500:	2008      	movs	r0, #8
   15502:	1838      	adds	r0, r7, r0
   15504:	18c0      	adds	r0, r0, r3
   15506:	4b62      	ldr	r3, [pc, #392]	; (15690 <_http_client_request+0x314>)
   15508:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1550a:	2210      	movs	r2, #16
   1550c:	4961      	ldr	r1, [pc, #388]	; (15694 <_http_client_request+0x318>)
   1550e:	232c      	movs	r3, #44	; 0x2c
   15510:	2008      	movs	r0, #8
   15512:	1838      	adds	r0, r7, r0
   15514:	18c0      	adds	r0, r0, r3
   15516:	4d55      	ldr	r5, [pc, #340]	; (1566c <_http_client_request+0x2f0>)
   15518:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   1551a:	2320      	movs	r3, #32
   1551c:	2208      	movs	r2, #8
   1551e:	18ba      	adds	r2, r7, r2
   15520:	18d0      	adds	r0, r2, r3
   15522:	4b51      	ldr	r3, [pc, #324]	; (15668 <_http_client_request+0x2ec>)
   15524:	4798      	blx	r3
   15526:	0002      	movs	r2, r0
   15528:	2320      	movs	r3, #32
   1552a:	2108      	movs	r1, #8
   1552c:	1879      	adds	r1, r7, r1
   1552e:	18c9      	adds	r1, r1, r3
   15530:	330c      	adds	r3, #12
   15532:	2008      	movs	r0, #8
   15534:	1838      	adds	r0, r7, r0
   15536:	18c0      	adds	r0, r0, r3
   15538:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1553a:	2202      	movs	r2, #2
   1553c:	494e      	ldr	r1, [pc, #312]	; (15678 <_http_client_request+0x2fc>)
   1553e:	232c      	movs	r3, #44	; 0x2c
   15540:	2008      	movs	r0, #8
   15542:	1838      	adds	r0, r7, r0
   15544:	18c0      	adds	r0, r0, r3
   15546:	47a8      	blx	r5
   15548:	e041      	b.n	155ce <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1554a:	2204      	movs	r2, #4
   1554c:	4952      	ldr	r1, [pc, #328]	; (15698 <_http_client_request+0x31c>)
   1554e:	332b      	adds	r3, #43	; 0x2b
   15550:	2008      	movs	r0, #8
   15552:	1838      	adds	r0, r7, r0
   15554:	18c0      	adds	r0, r0, r3
   15556:	4b45      	ldr	r3, [pc, #276]	; (1566c <_http_client_request+0x2f0>)
   15558:	4798      	blx	r3
   1555a:	e75b      	b.n	15414 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1555c:	2205      	movs	r2, #5
   1555e:	494f      	ldr	r1, [pc, #316]	; (1569c <_http_client_request+0x320>)
   15560:	332a      	adds	r3, #42	; 0x2a
   15562:	2008      	movs	r0, #8
   15564:	1838      	adds	r0, r7, r0
   15566:	18c0      	adds	r0, r0, r3
   15568:	4b40      	ldr	r3, [pc, #256]	; (1566c <_http_client_request+0x2f0>)
   1556a:	4798      	blx	r3
   1556c:	e752      	b.n	15414 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1556e:	2207      	movs	r2, #7
   15570:	494b      	ldr	r1, [pc, #300]	; (156a0 <_http_client_request+0x324>)
   15572:	3329      	adds	r3, #41	; 0x29
   15574:	2008      	movs	r0, #8
   15576:	1838      	adds	r0, r7, r0
   15578:	18c0      	adds	r0, r0, r3
   1557a:	4b3c      	ldr	r3, [pc, #240]	; (1566c <_http_client_request+0x2f0>)
   1557c:	4798      	blx	r3
   1557e:	e749      	b.n	15414 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   15580:	2204      	movs	r2, #4
   15582:	4948      	ldr	r1, [pc, #288]	; (156a4 <_http_client_request+0x328>)
   15584:	3328      	adds	r3, #40	; 0x28
   15586:	2008      	movs	r0, #8
   15588:	1838      	adds	r0, r7, r0
   1558a:	18c0      	adds	r0, r0, r3
   1558c:	4b37      	ldr	r3, [pc, #220]	; (1566c <_http_client_request+0x2f0>)
   1558e:	4798      	blx	r3
   15590:	e740      	b.n	15414 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   15592:	2208      	movs	r2, #8
   15594:	4944      	ldr	r1, [pc, #272]	; (156a8 <_http_client_request+0x32c>)
   15596:	3327      	adds	r3, #39	; 0x27
   15598:	2008      	movs	r0, #8
   1559a:	1838      	adds	r0, r7, r0
   1559c:	18c0      	adds	r0, r0, r3
   1559e:	4b33      	ldr	r3, [pc, #204]	; (1566c <_http_client_request+0x2f0>)
   155a0:	4798      	blx	r3
   155a2:	e737      	b.n	15414 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   155a4:	2205      	movs	r2, #5
   155a6:	4941      	ldr	r1, [pc, #260]	; (156ac <_http_client_request+0x330>)
   155a8:	3326      	adds	r3, #38	; 0x26
   155aa:	2008      	movs	r0, #8
   155ac:	1838      	adds	r0, r7, r0
   155ae:	18c0      	adds	r0, r0, r3
   155b0:	4b2e      	ldr	r3, [pc, #184]	; (1566c <_http_client_request+0x2f0>)
   155b2:	4798      	blx	r3
   155b4:	e72e      	b.n	15414 <_http_client_request+0x98>
				module->req.content_length = -1;
   155b6:	2201      	movs	r2, #1
   155b8:	4252      	negs	r2, r2
   155ba:	23cc      	movs	r3, #204	; 0xcc
   155bc:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   155be:	321d      	adds	r2, #29
   155c0:	493b      	ldr	r1, [pc, #236]	; (156b0 <_http_client_request+0x334>)
   155c2:	3ba0      	subs	r3, #160	; 0xa0
   155c4:	2008      	movs	r0, #8
   155c6:	1838      	adds	r0, r7, r0
   155c8:	18c0      	adds	r0, r0, r3
   155ca:	4b28      	ldr	r3, [pc, #160]	; (1566c <_http_client_request+0x2f0>)
   155cc:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   155ce:	23d4      	movs	r3, #212	; 0xd4
   155d0:	58e5      	ldr	r5, [r4, r3]
   155d2:	2d00      	cmp	r5, #0
   155d4:	d00a      	beq.n	155ec <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   155d6:	0028      	movs	r0, r5
   155d8:	4b23      	ldr	r3, [pc, #140]	; (15668 <_http_client_request+0x2ec>)
   155da:	4798      	blx	r3
   155dc:	0002      	movs	r2, r0
   155de:	0029      	movs	r1, r5
   155e0:	232c      	movs	r3, #44	; 0x2c
   155e2:	2008      	movs	r0, #8
   155e4:	1838      	adds	r0, r7, r0
   155e6:	18c0      	adds	r0, r0, r3
   155e8:	4b20      	ldr	r3, [pc, #128]	; (1566c <_http_client_request+0x2f0>)
   155ea:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   155ec:	2202      	movs	r2, #2
   155ee:	4922      	ldr	r1, [pc, #136]	; (15678 <_http_client_request+0x2fc>)
   155f0:	232c      	movs	r3, #44	; 0x2c
   155f2:	2008      	movs	r0, #8
   155f4:	1838      	adds	r0, r7, r0
   155f6:	18c0      	adds	r0, r0, r3
   155f8:	4b1c      	ldr	r3, [pc, #112]	; (1566c <_http_client_request+0x2f0>)
   155fa:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   155fc:	232c      	movs	r3, #44	; 0x2c
   155fe:	2208      	movs	r2, #8
   15600:	18ba      	adds	r2, r7, r2
   15602:	18d0      	adds	r0, r2, r3
   15604:	4b2b      	ldr	r3, [pc, #172]	; (156b4 <_http_client_request+0x338>)
   15606:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   15608:	2304      	movs	r3, #4
   1560a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   1560c:	23cc      	movs	r3, #204	; 0xcc
   1560e:	58e2      	ldr	r2, [r4, r3]
   15610:	2a00      	cmp	r2, #0
   15612:	db51      	blt.n	156b8 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   15614:	dc00      	bgt.n	15618 <_http_client_request+0x29c>
   15616:	e0f0      	b.n	157fa <_http_client_request+0x47e>
   15618:	0023      	movs	r3, r4
   1561a:	33b0      	adds	r3, #176	; 0xb0
   1561c:	68dd      	ldr	r5, [r3, #12]
   1561e:	2d00      	cmp	r5, #0
   15620:	d100      	bne.n	15624 <_http_client_request+0x2a8>
   15622:	e0ea      	b.n	157fa <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   15624:	23d0      	movs	r3, #208	; 0xd0
   15626:	58e3      	ldr	r3, [r4, r3]
   15628:	429a      	cmp	r2, r3
   1562a:	dd00      	ble.n	1562e <_http_client_request+0x2b2>
   1562c:	e0ba      	b.n	157a4 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   1562e:	23c0      	movs	r3, #192	; 0xc0
   15630:	58e3      	ldr	r3, [r4, r3]
   15632:	2b00      	cmp	r3, #0
   15634:	d002      	beq.n	1563c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   15636:	22c4      	movs	r2, #196	; 0xc4
   15638:	58a0      	ldr	r0, [r4, r2]
   1563a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   1563c:	2302      	movs	r3, #2
   1563e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15640:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15642:	2b00      	cmp	r3, #0
   15644:	d100      	bne.n	15648 <_http_client_request+0x2cc>
   15646:	e6c0      	b.n	153ca <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15648:	220c      	movs	r2, #12
   1564a:	18ba      	adds	r2, r7, r2
   1564c:	2101      	movs	r1, #1
   1564e:	0020      	movs	r0, r4
   15650:	4798      	blx	r3
   15652:	e6ba      	b.n	153ca <_http_client_request+0x4e>
					module->req.content_length = 0;
   15654:	2200      	movs	r2, #0
   15656:	50e2      	str	r2, [r4, r3]
   15658:	e7b9      	b.n	155ce <_http_client_request+0x252>
   1565a:	46c0      	nop			; (mov r8, r8)
   1565c:	00019970 	.word	0x00019970
   15660:	00015185 	.word	0x00015185
   15664:	00015a85 	.word	0x00015a85
   15668:	00016fdf 	.word	0x00016fdf
   1566c:	00015ad9 	.word	0x00015ad9
   15670:	000199b4 	.word	0x000199b4
   15674:	000199c0 	.word	0x000199c0
   15678:	00019d50 	.word	0x00019d50
   1567c:	000199d0 	.word	0x000199d0
   15680:	000199d8 	.word	0x000199d8
   15684:	000199f4 	.word	0x000199f4
   15688:	00019a08 	.word	0x00019a08
   1568c:	00019a40 	.word	0x00019a40
   15690:	00016f05 	.word	0x00016f05
   15694:	00019a44 	.word	0x00019a44
   15698:	00019980 	.word	0x00019980
   1569c:	00019988 	.word	0x00019988
   156a0:	00019990 	.word	0x00019990
   156a4:	00019998 	.word	0x00019998
   156a8:	000199a0 	.word	0x000199a0
   156ac:	000199ac 	.word	0x000199ac
   156b0:	00019a20 	.word	0x00019a20
   156b4:	00015a95 	.word	0x00015a95
		if (module->req.content_length < 0 && entity->read) {
   156b8:	0023      	movs	r3, r4
   156ba:	33b0      	adds	r3, #176	; 0xb0
   156bc:	68dd      	ldr	r5, [r3, #12]
   156be:	2d00      	cmp	r5, #0
   156c0:	d100      	bne.n	156c4 <_http_client_request+0x348>
   156c2:	e09a      	b.n	157fa <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   156c4:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   156c6:	58e3      	ldr	r3, [r4, r3]
   156c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   156ca:	3a07      	subs	r2, #7
   156cc:	1d71      	adds	r1, r6, #5
   156ce:	0020      	movs	r0, r4
   156d0:	30b0      	adds	r0, #176	; 0xb0
   156d2:	6940      	ldr	r0, [r0, #20]
   156d4:	47a8      	blx	r5
   156d6:	0005      	movs	r5, r0
   156d8:	43c3      	mvns	r3, r0
   156da:	17db      	asrs	r3, r3, #31
   156dc:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   156de:	220a      	movs	r2, #10
   156e0:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   156e2:	210d      	movs	r1, #13
   156e4:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   156e6:	1973      	adds	r3, r6, r5
   156e8:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   156ea:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   156ec:	230f      	movs	r3, #15
   156ee:	402b      	ands	r3, r5
   156f0:	3206      	adds	r2, #6
   156f2:	3905      	subs	r1, #5
   156f4:	468c      	mov	ip, r1
   156f6:	44bc      	add	ip, r7
   156f8:	4462      	add	r2, ip
   156fa:	5cd3      	ldrb	r3, [r2, r3]
   156fc:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   156fe:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   15700:	2d0f      	cmp	r5, #15
   15702:	dd0d      	ble.n	15720 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   15704:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   15706:	17eb      	asrs	r3, r5, #31
   15708:	220f      	movs	r2, #15
   1570a:	4013      	ands	r3, r2
   1570c:	195b      	adds	r3, r3, r5
   1570e:	111b      	asrs	r3, r3, #4
   15710:	4013      	ands	r3, r2
   15712:	3201      	adds	r2, #1
   15714:	2008      	movs	r0, #8
   15716:	4684      	mov	ip, r0
   15718:	44bc      	add	ip, r7
   1571a:	4462      	add	r2, ip
   1571c:	5cd3      	ldrb	r3, [r2, r3]
   1571e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   15720:	2dff      	cmp	r5, #255	; 0xff
   15722:	dd0d      	ble.n	15740 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   15724:	17ea      	asrs	r2, r5, #31
   15726:	23ff      	movs	r3, #255	; 0xff
   15728:	4013      	ands	r3, r2
   1572a:	195b      	adds	r3, r3, r5
   1572c:	051b      	lsls	r3, r3, #20
   1572e:	0f1b      	lsrs	r3, r3, #28
   15730:	2210      	movs	r2, #16
   15732:	2108      	movs	r1, #8
   15734:	468c      	mov	ip, r1
   15736:	44bc      	add	ip, r7
   15738:	4462      	add	r2, ip
   1573a:	5cd3      	ldrb	r3, [r2, r3]
   1573c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   1573e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   15740:	1cca      	adds	r2, r1, #3
   15742:	1b92      	subs	r2, r2, r6
   15744:	1d2b      	adds	r3, r5, #4
   15746:	18d2      	adds	r2, r2, r3
   15748:	b292      	uxth	r2, r2
   1574a:	2000      	movs	r0, #0
   1574c:	5620      	ldrsb	r0, [r4, r0]
   1574e:	2300      	movs	r3, #0
   15750:	4e30      	ldr	r6, [pc, #192]	; (15814 <_http_client_request+0x498>)
   15752:	47b0      	blx	r6
   15754:	2800      	cmp	r0, #0
   15756:	db19      	blt.n	1578c <_http_client_request+0x410>
			module->req.sent_length += size;
   15758:	22d0      	movs	r2, #208	; 0xd0
   1575a:	58a3      	ldr	r3, [r4, r2]
   1575c:	195b      	adds	r3, r3, r5
   1575e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   15760:	2d00      	cmp	r5, #0
   15762:	d000      	beq.n	15766 <_http_client_request+0x3ea>
   15764:	e631      	b.n	153ca <_http_client_request+0x4e>
				if (module->req.entity.close) {
   15766:	23c0      	movs	r3, #192	; 0xc0
   15768:	58e3      	ldr	r3, [r4, r3]
   1576a:	2b00      	cmp	r3, #0
   1576c:	d002      	beq.n	15774 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   1576e:	3a0c      	subs	r2, #12
   15770:	58a0      	ldr	r0, [r4, r2]
   15772:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   15774:	2302      	movs	r3, #2
   15776:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15778:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1577a:	2b00      	cmp	r3, #0
   1577c:	d100      	bne.n	15780 <_http_client_request+0x404>
   1577e:	e624      	b.n	153ca <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15780:	220c      	movs	r2, #12
   15782:	18ba      	adds	r2, r7, r2
   15784:	2101      	movs	r1, #1
   15786:	0020      	movs	r0, r4
   15788:	4798      	blx	r3
   1578a:	e61e      	b.n	153ca <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   1578c:	2105      	movs	r1, #5
   1578e:	4249      	negs	r1, r1
   15790:	0020      	movs	r0, r4
   15792:	4b21      	ldr	r3, [pc, #132]	; (15818 <_http_client_request+0x49c>)
   15794:	4798      	blx	r3
   15796:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   15798:	46bd      	mov	sp, r7
   1579a:	b013      	add	sp, #76	; 0x4c
   1579c:	bc0c      	pop	{r2, r3}
   1579e:	4692      	mov	sl, r2
   157a0:	469b      	mov	fp, r3
   157a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   157a4:	0022      	movs	r2, r4
   157a6:	32b0      	adds	r2, #176	; 0xb0
   157a8:	6950      	ldr	r0, [r2, #20]
   157aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   157ac:	0031      	movs	r1, r6
   157ae:	47a8      	blx	r5
			if (size < 0) {
   157b0:	2800      	cmp	r0, #0
   157b2:	db16      	blt.n	157e2 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   157b4:	23cc      	movs	r3, #204	; 0xcc
   157b6:	58e5      	ldr	r5, [r4, r3]
   157b8:	3304      	adds	r3, #4
   157ba:	58e3      	ldr	r3, [r4, r3]
   157bc:	1aed      	subs	r5, r5, r3
   157be:	4285      	cmp	r5, r0
   157c0:	dd00      	ble.n	157c4 <_http_client_request+0x448>
   157c2:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   157c4:	b2aa      	uxth	r2, r5
   157c6:	2000      	movs	r0, #0
   157c8:	5620      	ldrsb	r0, [r4, r0]
   157ca:	2300      	movs	r3, #0
   157cc:	0031      	movs	r1, r6
   157ce:	4e11      	ldr	r6, [pc, #68]	; (15814 <_http_client_request+0x498>)
   157d0:	47b0      	blx	r6
   157d2:	2800      	cmp	r0, #0
   157d4:	db0b      	blt.n	157ee <_http_client_request+0x472>
				module->req.sent_length += size;
   157d6:	23d0      	movs	r3, #208	; 0xd0
   157d8:	58e2      	ldr	r2, [r4, r3]
   157da:	4694      	mov	ip, r2
   157dc:	4465      	add	r5, ip
   157de:	50e5      	str	r5, [r4, r3]
   157e0:	e5f3      	b.n	153ca <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   157e2:	2105      	movs	r1, #5
   157e4:	4249      	negs	r1, r1
   157e6:	0020      	movs	r0, r4
   157e8:	4b0b      	ldr	r3, [pc, #44]	; (15818 <_http_client_request+0x49c>)
   157ea:	4798      	blx	r3
   157ec:	e5ed      	b.n	153ca <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   157ee:	2105      	movs	r1, #5
   157f0:	4249      	negs	r1, r1
   157f2:	0020      	movs	r0, r4
   157f4:	4b08      	ldr	r3, [pc, #32]	; (15818 <_http_client_request+0x49c>)
   157f6:	4798      	blx	r3
					return;
   157f8:	e7cd      	b.n	15796 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   157fa:	2302      	movs	r3, #2
   157fc:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   157fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15800:	2b00      	cmp	r3, #0
   15802:	d100      	bne.n	15806 <_http_client_request+0x48a>
   15804:	e5e1      	b.n	153ca <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15806:	220c      	movs	r2, #12
   15808:	18ba      	adds	r2, r7, r2
   1580a:	2101      	movs	r1, #1
   1580c:	0020      	movs	r0, r4
   1580e:	4798      	blx	r3
   15810:	e5db      	b.n	153ca <_http_client_request+0x4e>
   15812:	46c0      	nop			; (mov r8, r8)
   15814:	0000f6a1 	.word	0x0000f6a1
   15818:	000152dd 	.word	0x000152dd

0001581c <http_client_send_request>:
{
   1581c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1581e:	46d6      	mov	lr, sl
   15820:	b500      	push	{lr}
   15822:	b088      	sub	sp, #32
   15824:	0004      	movs	r4, r0
   15826:	000f      	movs	r7, r1
   15828:	4692      	mov	sl, r2
   1582a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   1582c:	2800      	cmp	r0, #0
   1582e:	d100      	bne.n	15832 <http_client_send_request+0x16>
   15830:	e0d3      	b.n	159da <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   15832:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15834:	2b02      	cmp	r3, #2
   15836:	d900      	bls.n	1583a <http_client_send_request+0x1e>
   15838:	e0d3      	b.n	159e2 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   1583a:	2207      	movs	r2, #7
   1583c:	4981      	ldr	r1, [pc, #516]	; (15a44 <http_client_send_request+0x228>)
   1583e:	0038      	movs	r0, r7
   15840:	4b81      	ldr	r3, [pc, #516]	; (15a48 <http_client_send_request+0x22c>)
   15842:	4798      	blx	r3
		i = 7;
   15844:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   15846:	2800      	cmp	r0, #0
   15848:	d007      	beq.n	1585a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   1584a:	2208      	movs	r2, #8
   1584c:	497f      	ldr	r1, [pc, #508]	; (15a4c <http_client_send_request+0x230>)
   1584e:	0038      	movs	r0, r7
   15850:	4b7d      	ldr	r3, [pc, #500]	; (15a48 <http_client_send_request+0x22c>)
   15852:	4798      	blx	r3
		i = 8;
   15854:	4246      	negs	r6, r0
   15856:	4146      	adcs	r6, r0
   15858:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1585a:	1c63      	adds	r3, r4, #1
   1585c:	19bd      	adds	r5, r7, r6
   1585e:	9302      	str	r3, [sp, #8]
   15860:	0018      	movs	r0, r3
   15862:	4b7b      	ldr	r3, [pc, #492]	; (15a50 <http_client_send_request+0x234>)
   15864:	4798      	blx	r3
   15866:	0002      	movs	r2, r0
   15868:	0029      	movs	r1, r5
   1586a:	9802      	ldr	r0, [sp, #8]
   1586c:	4b76      	ldr	r3, [pc, #472]	; (15a48 <http_client_send_request+0x22c>)
   1586e:	4798      	blx	r3
   15870:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15872:	782b      	ldrb	r3, [r5, #0]
   15874:	2b00      	cmp	r3, #0
   15876:	d052      	beq.n	1591e <http_client_send_request+0x102>
   15878:	2b2f      	cmp	r3, #47	; 0x2f
   1587a:	d052      	beq.n	15922 <http_client_send_request+0x106>
   1587c:	1c71      	adds	r1, r6, #1
   1587e:	1879      	adds	r1, r7, r1
   15880:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   15882:	3201      	adds	r2, #1
   15884:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15886:	000d      	movs	r5, r1
   15888:	780b      	ldrb	r3, [r1, #0]
   1588a:	2b00      	cmp	r3, #0
   1588c:	d002      	beq.n	15894 <http_client_send_request+0x78>
   1588e:	3101      	adds	r1, #1
   15890:	2b2f      	cmp	r3, #47	; 0x2f
   15892:	d1f6      	bne.n	15882 <http_client_send_request+0x66>
	module->host[j] = '\0';
   15894:	18a2      	adds	r2, r4, r2
   15896:	2300      	movs	r3, #0
   15898:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   1589a:	7863      	ldrb	r3, [r4, #1]
   1589c:	2b00      	cmp	r3, #0
   1589e:	d100      	bne.n	158a2 <http_client_send_request+0x86>
   158a0:	e0a3      	b.n	159ea <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   158a2:	0028      	movs	r0, r5
   158a4:	4b6a      	ldr	r3, [pc, #424]	; (15a50 <http_client_send_request+0x234>)
   158a6:	4798      	blx	r3
   158a8:	283f      	cmp	r0, #63	; 0x3f
   158aa:	d900      	bls.n	158ae <http_client_send_request+0x92>
   158ac:	e0a1      	b.n	159f2 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   158ae:	23d4      	movs	r3, #212	; 0xd4
   158b0:	58e0      	ldr	r0, [r4, r3]
   158b2:	2800      	cmp	r0, #0
   158b4:	d001      	beq.n	158ba <http_client_send_request+0x9e>
		free(module->req.ext_header);
   158b6:	4b67      	ldr	r3, [pc, #412]	; (15a54 <http_client_send_request+0x238>)
   158b8:	4798      	blx	r3
	if (ext_header != NULL) {
   158ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   158bc:	2b00      	cmp	r3, #0
   158be:	d032      	beq.n	15926 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   158c0:	0018      	movs	r0, r3
   158c2:	4b65      	ldr	r3, [pc, #404]	; (15a58 <http_client_send_request+0x23c>)
   158c4:	4798      	blx	r3
   158c6:	23d4      	movs	r3, #212	; 0xd4
   158c8:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   158ca:	2800      	cmp	r0, #0
   158cc:	d100      	bne.n	158d0 <http_client_send_request+0xb4>
   158ce:	e094      	b.n	159fa <http_client_send_request+0x1de>
	module->sending = 0;
   158d0:	2241      	movs	r2, #65	; 0x41
   158d2:	5ca3      	ldrb	r3, [r4, r2]
   158d4:	2101      	movs	r1, #1
   158d6:	438b      	bics	r3, r1
   158d8:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   158da:	2300      	movs	r3, #0
   158dc:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   158de:	782b      	ldrb	r3, [r5, #0]
   158e0:	2b2f      	cmp	r3, #47	; 0x2f
   158e2:	d024      	beq.n	1592e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   158e4:	222f      	movs	r2, #47	; 0x2f
   158e6:	2370      	movs	r3, #112	; 0x70
   158e8:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   158ea:	782b      	ldrb	r3, [r5, #0]
   158ec:	2b00      	cmp	r3, #0
   158ee:	d124      	bne.n	1593a <http_client_send_request+0x11e>
	if (entity != NULL) {
   158f0:	9b03      	ldr	r3, [sp, #12]
   158f2:	2b00      	cmp	r3, #0
   158f4:	d027      	beq.n	15946 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   158f6:	0020      	movs	r0, r4
   158f8:	30b0      	adds	r0, #176	; 0xb0
   158fa:	2218      	movs	r2, #24
   158fc:	0019      	movs	r1, r3
   158fe:	4b57      	ldr	r3, [pc, #348]	; (15a5c <http_client_send_request+0x240>)
   15900:	4798      	blx	r3
	module->req.method = method;
   15902:	23c8      	movs	r3, #200	; 0xc8
   15904:	4652      	mov	r2, sl
   15906:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   15908:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1590a:	2b01      	cmp	r3, #1
   1590c:	d022      	beq.n	15954 <http_client_send_request+0x138>
   1590e:	2b00      	cmp	r3, #0
   15910:	d027      	beq.n	15962 <http_client_send_request+0x146>
   15912:	2b02      	cmp	r3, #2
   15914:	d03a      	beq.n	1598c <http_client_send_request+0x170>
		return -EAGAIN;
   15916:	230b      	movs	r3, #11
   15918:	425b      	negs	r3, r3
   1591a:	9301      	str	r3, [sp, #4]
   1591c:	e08d      	b.n	15a3a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   1591e:	2200      	movs	r2, #0
   15920:	e7b8      	b.n	15894 <http_client_send_request+0x78>
   15922:	2200      	movs	r2, #0
   15924:	e7b6      	b.n	15894 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   15926:	2200      	movs	r2, #0
   15928:	23d4      	movs	r3, #212	; 0xd4
   1592a:	50e2      	str	r2, [r4, r3]
   1592c:	e7d0      	b.n	158d0 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   1592e:	0020      	movs	r0, r4
   15930:	3070      	adds	r0, #112	; 0x70
   15932:	0029      	movs	r1, r5
   15934:	4b4a      	ldr	r3, [pc, #296]	; (15a60 <http_client_send_request+0x244>)
   15936:	4798      	blx	r3
   15938:	e7da      	b.n	158f0 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   1593a:	0029      	movs	r1, r5
   1593c:	0020      	movs	r0, r4
   1593e:	3071      	adds	r0, #113	; 0x71
   15940:	4b47      	ldr	r3, [pc, #284]	; (15a60 <http_client_send_request+0x244>)
   15942:	4798      	blx	r3
   15944:	e7d4      	b.n	158f0 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   15946:	0020      	movs	r0, r4
   15948:	30b0      	adds	r0, #176	; 0xb0
   1594a:	2218      	movs	r2, #24
   1594c:	2100      	movs	r1, #0
   1594e:	4b45      	ldr	r3, [pc, #276]	; (15a64 <http_client_send_request+0x248>)
   15950:	4798      	blx	r3
   15952:	e7d6      	b.n	15902 <http_client_send_request+0xe6>
		if (!reconnect) {
   15954:	9b01      	ldr	r3, [sp, #4]
   15956:	2b00      	cmp	r3, #0
   15958:	d06f      	beq.n	15a3a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   1595a:	2100      	movs	r1, #0
   1595c:	0020      	movs	r0, r4
   1595e:	4b42      	ldr	r3, [pc, #264]	; (15a68 <http_client_send_request+0x24c>)
   15960:	4798      	blx	r3
		if (module->config.tls) {
   15962:	2352      	movs	r3, #82	; 0x52
   15964:	5ce2      	ldrb	r2, [r4, r3]
   15966:	1e53      	subs	r3, r2, #1
   15968:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1596a:	b2d2      	uxtb	r2, r2
   1596c:	2101      	movs	r1, #1
   1596e:	2002      	movs	r0, #2
   15970:	4b3e      	ldr	r3, [pc, #248]	; (15a6c <http_client_send_request+0x250>)
   15972:	4798      	blx	r3
   15974:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   15976:	2800      	cmp	r0, #0
   15978:	db43      	blt.n	15a02 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   1597a:	0080      	lsls	r0, r0, #2
   1597c:	4b3c      	ldr	r3, [pc, #240]	; (15a70 <http_client_send_request+0x254>)
   1597e:	50c4      	str	r4, [r0, r3]
   15980:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   15982:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15984:	2620      	movs	r6, #32
			isv6 = 1;
   15986:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   15988:	2730      	movs	r7, #48	; 0x30
   1598a:	e00c      	b.n	159a6 <http_client_send_request+0x18a>
		if (!reconnect) {
   1598c:	9b01      	ldr	r3, [sp, #4]
   1598e:	2b00      	cmp	r3, #0
   15990:	d1e3      	bne.n	1595a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   15992:	3303      	adds	r3, #3
   15994:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   15996:	0020      	movs	r0, r4
   15998:	4b36      	ldr	r3, [pc, #216]	; (15a74 <http_client_send_request+0x258>)
   1599a:	4798      	blx	r3
			break;
   1599c:	e04d      	b.n	15a3a <http_client_send_request+0x21e>
			if (isv6) {
   1599e:	2900      	cmp	r1, #0
   159a0:	d001      	beq.n	159a6 <http_client_send_request+0x18a>
   159a2:	e012      	b.n	159ca <http_client_send_request+0x1ae>
			isv6 = 1;
   159a4:	0001      	movs	r1, r0
	while (*host != '\0') {
   159a6:	782a      	ldrb	r2, [r5, #0]
   159a8:	2a00      	cmp	r2, #0
   159aa:	d02e      	beq.n	15a0a <http_client_send_request+0x1ee>
		ch = *host++;
   159ac:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   159ae:	0013      	movs	r3, r2
   159b0:	43b3      	bics	r3, r6
   159b2:	3b41      	subs	r3, #65	; 0x41
   159b4:	2b05      	cmp	r3, #5
   159b6:	d9f5      	bls.n	159a4 <http_client_send_request+0x188>
   159b8:	2a3a      	cmp	r2, #58	; 0x3a
   159ba:	d00a      	beq.n	159d2 <http_client_send_request+0x1b6>
   159bc:	2a2f      	cmp	r2, #47	; 0x2f
   159be:	d00a      	beq.n	159d6 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   159c0:	2a2e      	cmp	r2, #46	; 0x2e
   159c2:	d0ec      	beq.n	1599e <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   159c4:	403a      	ands	r2, r7
   159c6:	2a30      	cmp	r2, #48	; 0x30
   159c8:	d0ed      	beq.n	159a6 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   159ca:	9802      	ldr	r0, [sp, #8]
   159cc:	4b2a      	ldr	r3, [pc, #168]	; (15a78 <http_client_send_request+0x25c>)
   159ce:	4798      	blx	r3
   159d0:	e02f      	b.n	15a32 <http_client_send_request+0x216>
			isv6 = 1;
   159d2:	0001      	movs	r1, r0
   159d4:	e7e7      	b.n	159a6 <http_client_send_request+0x18a>
   159d6:	0001      	movs	r1, r0
   159d8:	e7e5      	b.n	159a6 <http_client_send_request+0x18a>
		return -EINVAL;
   159da:	2316      	movs	r3, #22
   159dc:	425b      	negs	r3, r3
   159de:	9301      	str	r3, [sp, #4]
   159e0:	e02b      	b.n	15a3a <http_client_send_request+0x21e>
		return -EBUSY;
   159e2:	2310      	movs	r3, #16
   159e4:	425b      	negs	r3, r3
   159e6:	9301      	str	r3, [sp, #4]
   159e8:	e027      	b.n	15a3a <http_client_send_request+0x21e>
		return -EINVAL;
   159ea:	2316      	movs	r3, #22
   159ec:	425b      	negs	r3, r3
   159ee:	9301      	str	r3, [sp, #4]
   159f0:	e023      	b.n	15a3a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   159f2:	235b      	movs	r3, #91	; 0x5b
   159f4:	425b      	negs	r3, r3
   159f6:	9301      	str	r3, [sp, #4]
   159f8:	e01f      	b.n	15a3a <http_client_send_request+0x21e>
			return -ENOMEM;
   159fa:	230c      	movs	r3, #12
   159fc:	425b      	negs	r3, r3
   159fe:	9301      	str	r3, [sp, #4]
   15a00:	e01b      	b.n	15a3a <http_client_send_request+0x21e>
			return -ENOSPC;
   15a02:	231c      	movs	r3, #28
   15a04:	425b      	negs	r3, r3
   15a06:	9301      	str	r3, [sp, #4]
   15a08:	e017      	b.n	15a3a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   15a0a:	2302      	movs	r3, #2
   15a0c:	aa04      	add	r2, sp, #16
   15a0e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15a10:	334e      	adds	r3, #78	; 0x4e
   15a12:	5ae3      	ldrh	r3, [r4, r3]
   15a14:	021a      	lsls	r2, r3, #8
   15a16:	0a1b      	lsrs	r3, r3, #8
   15a18:	4313      	orrs	r3, r2
   15a1a:	aa04      	add	r2, sp, #16
   15a1c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   15a1e:	9802      	ldr	r0, [sp, #8]
   15a20:	4b16      	ldr	r3, [pc, #88]	; (15a7c <http_client_send_request+0x260>)
   15a22:	4798      	blx	r3
   15a24:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15a26:	2000      	movs	r0, #0
   15a28:	5620      	ldrsb	r0, [r4, r0]
   15a2a:	2210      	movs	r2, #16
   15a2c:	a904      	add	r1, sp, #16
   15a2e:	4b14      	ldr	r3, [pc, #80]	; (15a80 <http_client_send_request+0x264>)
   15a30:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   15a32:	2301      	movs	r3, #1
   15a34:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   15a36:	2300      	movs	r3, #0
   15a38:	9301      	str	r3, [sp, #4]
}
   15a3a:	9801      	ldr	r0, [sp, #4]
   15a3c:	b008      	add	sp, #32
   15a3e:	bc04      	pop	{r2}
   15a40:	4692      	mov	sl, r2
   15a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a44:	00019a64 	.word	0x00019a64
   15a48:	00016fed 	.word	0x00016fed
   15a4c:	00019a6c 	.word	0x00019a6c
   15a50:	00016fdf 	.word	0x00016fdf
   15a54:	00016a35 	.word	0x00016a35
   15a58:	00016fa5 	.word	0x00016fa5
   15a5c:	00016a49 	.word	0x00016a49
   15a60:	00016f93 	.word	0x00016f93
   15a64:	00016a7f 	.word	0x00016a7f
   15a68:	000152dd 	.word	0x000152dd
   15a6c:	0000f48d 	.word	0x0000f48d
   15a70:	20000730 	.word	0x20000730
   15a74:	0001537d 	.word	0x0001537d
   15a78:	0000f8d5 	.word	0x0000f8d5
   15a7c:	0000f869 	.word	0x0000f869
   15a80:	0000f611 	.word	0x0000f611

00015a84 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   15a84:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   15a86:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   15a88:	2200      	movs	r2, #0
   15a8a:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   15a8c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   15a8e:	9b00      	ldr	r3, [sp, #0]
   15a90:	60c3      	str	r3, [r0, #12]
}
   15a92:	4770      	bx	lr

00015a94 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   15a94:	b510      	push	{r4, lr}
   15a96:	0004      	movs	r4, r0
	if(writer->written > 0) {
   15a98:	6842      	ldr	r2, [r0, #4]
   15a9a:	2a00      	cmp	r2, #0
   15a9c:	d100      	bne.n	15aa0 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   15a9e:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   15aa0:	6901      	ldr	r1, [r0, #16]
   15aa2:	68c0      	ldr	r0, [r0, #12]
   15aa4:	68a3      	ldr	r3, [r4, #8]
   15aa6:	4798      	blx	r3
		writer->written = 0;
   15aa8:	2300      	movs	r3, #0
   15aaa:	6063      	str	r3, [r4, #4]
}
   15aac:	e7f7      	b.n	15a9e <stream_writer_send_remain+0xa>
	...

00015ab0 <stream_writer_send_8>:
{
   15ab0:	b570      	push	{r4, r5, r6, lr}
   15ab2:	0004      	movs	r4, r0
   15ab4:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   15ab6:	6803      	ldr	r3, [r0, #0]
   15ab8:	6842      	ldr	r2, [r0, #4]
   15aba:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   15abc:	2b00      	cmp	r3, #0
   15abe:	dd05      	ble.n	15acc <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   15ac0:	6922      	ldr	r2, [r4, #16]
   15ac2:	6863      	ldr	r3, [r4, #4]
   15ac4:	1c59      	adds	r1, r3, #1
   15ac6:	6061      	str	r1, [r4, #4]
   15ac8:	54d5      	strb	r5, [r2, r3]
}
   15aca:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   15acc:	4b01      	ldr	r3, [pc, #4]	; (15ad4 <stream_writer_send_8+0x24>)
   15ace:	4798      	blx	r3
   15ad0:	e7f6      	b.n	15ac0 <stream_writer_send_8+0x10>
   15ad2:	46c0      	nop			; (mov r8, r8)
   15ad4:	00015a95 	.word	0x00015a95

00015ad8 <stream_writer_send_buffer>:
{
   15ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ada:	0006      	movs	r6, r0
   15adc:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   15ade:	2a00      	cmp	r2, #0
   15ae0:	d008      	beq.n	15af4 <stream_writer_send_buffer+0x1c>
   15ae2:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   15ae4:	4f04      	ldr	r7, [pc, #16]	; (15af8 <stream_writer_send_buffer+0x20>)
   15ae6:	2100      	movs	r1, #0
   15ae8:	5661      	ldrsb	r1, [r4, r1]
   15aea:	0030      	movs	r0, r6
   15aec:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   15aee:	3401      	adds	r4, #1
   15af0:	42a5      	cmp	r5, r4
   15af2:	d1f8      	bne.n	15ae6 <stream_writer_send_buffer+0xe>
}
   15af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15af6:	46c0      	nop			; (mov r8, r8)
   15af8:	00015ab1 	.word	0x00015ab1

00015afc <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   15afc:	4a02      	ldr	r2, [pc, #8]	; (15b08 <sw_timer_tcc_callback+0xc>)
   15afe:	6813      	ldr	r3, [r2, #0]
   15b00:	3301      	adds	r3, #1
   15b02:	6013      	str	r3, [r2, #0]
}
   15b04:	4770      	bx	lr
   15b06:	46c0      	nop			; (mov r8, r8)
   15b08:	2000074c 	.word	0x2000074c

00015b0c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   15b0c:	2364      	movs	r3, #100	; 0x64
   15b0e:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   15b10:	2300      	movs	r3, #0
   15b12:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   15b14:	7043      	strb	r3, [r0, #1]
}
   15b16:	4770      	bx	lr

00015b18 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   15b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b1a:	46c6      	mov	lr, r8
   15b1c:	b500      	push	{lr}
   15b1e:	b0ac      	sub	sp, #176	; 0xb0
   15b20:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   15b22:	466e      	mov	r6, sp
   15b24:	4b1d      	ldr	r3, [pc, #116]	; (15b9c <sw_timer_init+0x84>)
   15b26:	466a      	mov	r2, sp
   15b28:	cb92      	ldmia	r3!, {r1, r4, r7}
   15b2a:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   15b2c:	886b      	ldrh	r3, [r5, #2]
   15b2e:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   15b30:	3014      	adds	r0, #20
   15b32:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   15b34:	782b      	ldrb	r3, [r5, #0]
   15b36:	009b      	lsls	r3, r3, #2
   15b38:	5999      	ldr	r1, [r3, r6]
   15b3a:	0017      	movs	r7, r2
   15b3c:	0010      	movs	r0, r2
   15b3e:	4b18      	ldr	r3, [pc, #96]	; (15ba0 <sw_timer_init+0x88>)
   15b40:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   15b42:	2000      	movs	r0, #0
   15b44:	4b17      	ldr	r3, [pc, #92]	; (15ba4 <sw_timer_init+0x8c>)
   15b46:	4798      	blx	r3
   15b48:	4b17      	ldr	r3, [pc, #92]	; (15ba8 <sw_timer_init+0x90>)
   15b4a:	7a1b      	ldrb	r3, [r3, #8]
   15b4c:	b2db      	uxtb	r3, r3
   15b4e:	40d8      	lsrs	r0, r3
   15b50:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   15b52:	8869      	ldrh	r1, [r5, #2]
   15b54:	20fa      	movs	r0, #250	; 0xfa
   15b56:	0200      	lsls	r0, r0, #8
   15b58:	4b14      	ldr	r3, [pc, #80]	; (15bac <sw_timer_init+0x94>)
   15b5a:	4798      	blx	r3
   15b5c:	0001      	movs	r1, r0
   15b5e:	4640      	mov	r0, r8
   15b60:	4b13      	ldr	r3, [pc, #76]	; (15bb0 <sw_timer_init+0x98>)
   15b62:	4798      	blx	r3
   15b64:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   15b66:	2305      	movs	r3, #5
   15b68:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   15b6a:	782b      	ldrb	r3, [r5, #0]
   15b6c:	009b      	lsls	r3, r3, #2
   15b6e:	5999      	ldr	r1, [r3, r6]
   15b70:	003a      	movs	r2, r7
   15b72:	0020      	movs	r0, r4
   15b74:	4b0f      	ldr	r3, [pc, #60]	; (15bb4 <sw_timer_init+0x9c>)
   15b76:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15b78:	786a      	ldrb	r2, [r5, #1]
   15b7a:	3208      	adds	r2, #8
   15b7c:	b2d2      	uxtb	r2, r2
   15b7e:	490e      	ldr	r1, [pc, #56]	; (15bb8 <sw_timer_init+0xa0>)
   15b80:	0020      	movs	r0, r4
   15b82:	4b0e      	ldr	r3, [pc, #56]	; (15bbc <sw_timer_init+0xa4>)
   15b84:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15b86:	7869      	ldrb	r1, [r5, #1]
   15b88:	3108      	adds	r1, #8
   15b8a:	b2c9      	uxtb	r1, r1
   15b8c:	0020      	movs	r0, r4
   15b8e:	4b0c      	ldr	r3, [pc, #48]	; (15bc0 <sw_timer_init+0xa8>)
   15b90:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   15b92:	b02c      	add	sp, #176	; 0xb0
   15b94:	bc04      	pop	{r2}
   15b96:	4690      	mov	r8, r2
   15b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b9a:	46c0      	nop			; (mov r8, r8)
   15b9c:	00019a78 	.word	0x00019a78
   15ba0:	000118e5 	.word	0x000118e5
   15ba4:	00011641 	.word	0x00011641
   15ba8:	40000400 	.word	0x40000400
   15bac:	000167ad 	.word	0x000167ad
   15bb0:	00016699 	.word	0x00016699
   15bb4:	00011a31 	.word	0x00011a31
   15bb8:	00015afd 	.word	0x00015afd
   15bbc:	00011e3d 	.word	0x00011e3d
   15bc0:	00011e55 	.word	0x00011e55

00015bc4 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   15bc4:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   15bc6:	2102      	movs	r1, #2
   15bc8:	6893      	ldr	r3, [r2, #8]
   15bca:	4219      	tst	r1, r3
   15bcc:	d1fc      	bne.n	15bc8 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   15bce:	6813      	ldr	r3, [r2, #0]
   15bd0:	2102      	movs	r1, #2
   15bd2:	430b      	orrs	r3, r1
   15bd4:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   15bd6:	4770      	bx	lr

00015bd8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   15bd8:	b570      	push	{r4, r5, r6, lr}
   15bda:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   15bdc:	7805      	ldrb	r5, [r0, #0]
   15bde:	07e8      	lsls	r0, r5, #31
   15be0:	d502      	bpl.n	15be8 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   15be2:	2001      	movs	r0, #1
   15be4:	4240      	negs	r0, r0
}
   15be6:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   15be8:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   15bea:	0029      	movs	r1, r5
   15bec:	2002      	movs	r0, #2
   15bee:	4381      	bics	r1, r0
   15bf0:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   15bf2:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   15bf4:	6d61      	ldr	r1, [r4, #84]	; 0x54
   15bf6:	0018      	movs	r0, r3
   15bf8:	4b04      	ldr	r3, [pc, #16]	; (15c0c <sw_timer_register_callback+0x34>)
   15bfa:	4798      	blx	r3
   15bfc:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   15bfe:	7823      	ldrb	r3, [r4, #0]
   15c00:	2201      	movs	r2, #1
   15c02:	4313      	orrs	r3, r2
   15c04:	7023      	strb	r3, [r4, #0]
			return index;
   15c06:	2000      	movs	r0, #0
   15c08:	e7ed      	b.n	15be6 <sw_timer_register_callback+0xe>
   15c0a:	46c0      	nop			; (mov r8, r8)
   15c0c:	00016699 	.word	0x00016699

00015c10 <sw_timer_task>:

	handler->callback_enable = 0;
}

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   15c10:	b570      	push	{r4, r5, r6, lr}
   15c12:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   15c14:	7803      	ldrb	r3, [r0, #0]
   15c16:	07db      	lsls	r3, r3, #31
   15c18:	d507      	bpl.n	15c2a <sw_timer_task+0x1a>
   15c1a:	7803      	ldrb	r3, [r0, #0]
   15c1c:	079b      	lsls	r3, r3, #30
   15c1e:	d504      	bpl.n	15c2a <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15c20:	4b10      	ldr	r3, [pc, #64]	; (15c64 <sw_timer_task+0x54>)
   15c22:	681a      	ldr	r2, [r3, #0]
   15c24:	6903      	ldr	r3, [r0, #16]
   15c26:	1a9b      	subs	r3, r3, r2
   15c28:	d400      	bmi.n	15c2c <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   15c2a:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15c2c:	7803      	ldrb	r3, [r0, #0]
   15c2e:	075b      	lsls	r3, r3, #29
   15c30:	d4fb      	bmi.n	15c2a <sw_timer_task+0x1a>
				handler->busy = 1;
   15c32:	7803      	ldrb	r3, [r0, #0]
   15c34:	2104      	movs	r1, #4
   15c36:	430b      	orrs	r3, r1
   15c38:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   15c3a:	68c3      	ldr	r3, [r0, #12]
   15c3c:	2b00      	cmp	r3, #0
   15c3e:	d00b      	beq.n	15c58 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   15c40:	18d2      	adds	r2, r2, r3
   15c42:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   15c44:	68a2      	ldr	r2, [r4, #8]
   15c46:	2100      	movs	r1, #0
   15c48:	0020      	movs	r0, r4
   15c4a:	6865      	ldr	r5, [r4, #4]
   15c4c:	47a8      	blx	r5
				handler->busy = 0;
   15c4e:	7823      	ldrb	r3, [r4, #0]
   15c50:	2204      	movs	r2, #4
   15c52:	4393      	bics	r3, r2
   15c54:	7023      	strb	r3, [r4, #0]
}
   15c56:	e7e8      	b.n	15c2a <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   15c58:	7802      	ldrb	r2, [r0, #0]
   15c5a:	2102      	movs	r1, #2
   15c5c:	438a      	bics	r2, r1
   15c5e:	7002      	strb	r2, [r0, #0]
   15c60:	e7f0      	b.n	15c44 <sw_timer_task+0x34>
   15c62:	46c0      	nop			; (mov r8, r8)
   15c64:	2000074c 	.word	0x2000074c

00015c68 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   15c68:	4b02      	ldr	r3, [pc, #8]	; (15c74 <add_state+0xc>)
   15c6a:	781a      	ldrb	r2, [r3, #0]
   15c6c:	4310      	orrs	r0, r2
   15c6e:	7018      	strb	r0, [r3, #0]
}
   15c70:	4770      	bx	lr
   15c72:	46c0      	nop			; (mov r8, r8)
   15c74:	20000785 	.word	0x20000785

00015c78 <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
   15c78:	b570      	push	{r4, r5, r6, lr}
   15c7a:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   15c7c:	6843      	ldr	r3, [r0, #4]
   15c7e:	689a      	ldr	r2, [r3, #8]
   15c80:	6859      	ldr	r1, [r3, #4]
   15c82:	4816      	ldr	r0, [pc, #88]	; (15cdc <SubscribeHandler+0x64>)
   15c84:	4d16      	ldr	r5, [pc, #88]	; (15ce0 <SubscribeHandler+0x68>)
   15c86:	47a8      	blx	r5
	printf(" >> ");
   15c88:	4816      	ldr	r0, [pc, #88]	; (15ce4 <SubscribeHandler+0x6c>)
   15c8a:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
   15c8c:	6823      	ldr	r3, [r4, #0]
   15c8e:	689a      	ldr	r2, [r3, #8]
   15c90:	68d9      	ldr	r1, [r3, #12]
   15c92:	4815      	ldr	r0, [pc, #84]	; (15ce8 <SubscribeHandler+0x70>)
   15c94:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   15c96:	6826      	ldr	r6, [r4, #0]
   15c98:	68f5      	ldr	r5, [r6, #12]
   15c9a:	6863      	ldr	r3, [r4, #4]
   15c9c:	6898      	ldr	r0, [r3, #8]
   15c9e:	002a      	movs	r2, r5
   15ca0:	4912      	ldr	r1, [pc, #72]	; (15cec <SubscribeHandler+0x74>)
   15ca2:	4b13      	ldr	r3, [pc, #76]	; (15cf0 <SubscribeHandler+0x78>)
   15ca4:	4798      	blx	r3
   15ca6:	2800      	cmp	r0, #0
   15ca8:	d117      	bne.n	15cda <SubscribeHandler+0x62>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   15caa:	68b4      	ldr	r4, [r6, #8]
   15cac:	002a      	movs	r2, r5
   15cae:	4911      	ldr	r1, [pc, #68]	; (15cf4 <SubscribeHandler+0x7c>)
   15cb0:	0020      	movs	r0, r4
   15cb2:	4b0f      	ldr	r3, [pc, #60]	; (15cf0 <SubscribeHandler+0x78>)
   15cb4:	4798      	blx	r3
   15cb6:	2800      	cmp	r0, #0
   15cb8:	d00b      	beq.n	15cd2 <SubscribeHandler+0x5a>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   15cba:	002a      	movs	r2, r5
   15cbc:	490e      	ldr	r1, [pc, #56]	; (15cf8 <SubscribeHandler+0x80>)
   15cbe:	0020      	movs	r0, r4
   15cc0:	4b0b      	ldr	r3, [pc, #44]	; (15cf0 <SubscribeHandler+0x78>)
   15cc2:	4798      	blx	r3
   15cc4:	2800      	cmp	r0, #0
   15cc6:	d108      	bne.n	15cda <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
   15cc8:	2280      	movs	r2, #128	; 0x80
   15cca:	0412      	lsls	r2, r2, #16
   15ccc:	4b0b      	ldr	r3, [pc, #44]	; (15cfc <SubscribeHandler+0x84>)
   15cce:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
   15cd0:	e003      	b.n	15cda <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
   15cd2:	2280      	movs	r2, #128	; 0x80
   15cd4:	0412      	lsls	r2, r2, #16
   15cd6:	4b09      	ldr	r3, [pc, #36]	; (15cfc <SubscribeHandler+0x84>)
   15cd8:	619a      	str	r2, [r3, #24]
   15cda:	bd70      	pop	{r4, r5, r6, pc}
   15cdc:	00019a98 	.word	0x00019a98
   15ce0:	00016be1 	.word	0x00016be1
   15ce4:	00019aa0 	.word	0x00019aa0
   15ce8:	00019aa8 	.word	0x00019aa8
   15cec:	00019ab0 	.word	0x00019ab0
   15cf0:	00016fed 	.word	0x00016fed
   15cf4:	00019ab8 	.word	0x00019ab8
   15cf8:	00019ac0 	.word	0x00019ac0
   15cfc:	41004400 	.word	0x41004400

00015d00 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15d00:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   15d02:	4b0a      	ldr	r3, [pc, #40]	; (15d2c <extint_detection_callback+0x2c>)
   15d04:	681a      	ldr	r2, [r3, #0]
   15d06:	3201      	adds	r2, #1
   15d08:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   15d0a:	681b      	ldr	r3, [r3, #0]
   15d0c:	2b28      	cmp	r3, #40	; 0x28
   15d0e:	d902      	bls.n	15d16 <extint_detection_callback+0x16>
   15d10:	2201      	movs	r2, #1
   15d12:	4b06      	ldr	r3, [pc, #24]	; (15d2c <extint_detection_callback+0x2c>)
   15d14:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15d16:	4b05      	ldr	r3, [pc, #20]	; (15d2c <extint_detection_callback+0x2c>)
   15d18:	681b      	ldr	r3, [r3, #0]
   15d1a:	4a05      	ldr	r2, [pc, #20]	; (15d30 <extint_detection_callback+0x30>)
   15d1c:	213f      	movs	r1, #63	; 0x3f
   15d1e:	4805      	ldr	r0, [pc, #20]	; (15d34 <extint_detection_callback+0x34>)
   15d20:	4c05      	ldr	r4, [pc, #20]	; (15d38 <extint_detection_callback+0x38>)
   15d22:	47a0      	blx	r4
	isPressed = true;
   15d24:	2201      	movs	r2, #1
   15d26:	4b05      	ldr	r3, [pc, #20]	; (15d3c <extint_detection_callback+0x3c>)
   15d28:	701a      	strb	r2, [r3, #0]
	
}
   15d2a:	bd10      	pop	{r4, pc}
   15d2c:	200001ec 	.word	0x200001ec
   15d30:	00019ac8 	.word	0x00019ac8
   15d34:	20000070 	.word	0x20000070
   15d38:	00016ea1 	.word	0x00016ea1
   15d3c:	200009e0 	.word	0x200009e0

00015d40 <socket_resolve_handler>:
{
   15d40:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   15d42:	4b01      	ldr	r3, [pc, #4]	; (15d48 <socket_resolve_handler+0x8>)
   15d44:	4798      	blx	r3
}
   15d46:	bd10      	pop	{r4, pc}
   15d48:	00014771 	.word	0x00014771

00015d4c <socket_event_handler>:
{
   15d4c:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   15d4e:	4b01      	ldr	r3, [pc, #4]	; (15d54 <socket_event_handler+0x8>)
   15d50:	4798      	blx	r3
}
   15d52:	bd10      	pop	{r4, pc}
   15d54:	00014765 	.word	0x00014765

00015d58 <start_download>:
{
   15d58:	b510      	push	{r4, lr}
   15d5a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   15d5c:	4b18      	ldr	r3, [pc, #96]	; (15dc0 <start_download+0x68>)
   15d5e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   15d60:	07da      	lsls	r2, r3, #31
   15d62:	d514      	bpl.n	15d8e <start_download+0x36>
	if (!is_state_set(WIFI_CONNECTED)) {
   15d64:	079a      	lsls	r2, r3, #30
   15d66:	d517      	bpl.n	15d98 <start_download+0x40>
	if (is_state_set(GET_REQUESTED)) {
   15d68:	075a      	lsls	r2, r3, #29
   15d6a:	d419      	bmi.n	15da0 <start_download+0x48>
	if (is_state_set(DOWNLOADING)) {
   15d6c:	071b      	lsls	r3, r3, #28
   15d6e:	d41b      	bmi.n	15da8 <start_download+0x50>
	printf("start_download: sending HTTP request...\r\n");
   15d70:	4814      	ldr	r0, [pc, #80]	; (15dc4 <start_download+0x6c>)
   15d72:	4b15      	ldr	r3, [pc, #84]	; (15dc8 <start_download+0x70>)
   15d74:	4798      	blx	r3
	if(second_file == 0){
   15d76:	4b15      	ldr	r3, [pc, #84]	; (15dcc <start_download+0x74>)
   15d78:	781b      	ldrb	r3, [r3, #0]
   15d7a:	2b00      	cmp	r3, #0
   15d7c:	d018      	beq.n	15db0 <start_download+0x58>
		http_client_send_request(&http_client_module_inst, PARAMS_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15d7e:	2300      	movs	r3, #0
   15d80:	9300      	str	r3, [sp, #0]
   15d82:	2201      	movs	r2, #1
   15d84:	4912      	ldr	r1, [pc, #72]	; (15dd0 <start_download+0x78>)
   15d86:	4813      	ldr	r0, [pc, #76]	; (15dd4 <start_download+0x7c>)
   15d88:	4c13      	ldr	r4, [pc, #76]	; (15dd8 <start_download+0x80>)
   15d8a:	47a0      	blx	r4
   15d8c:	e002      	b.n	15d94 <start_download+0x3c>
		printf("start_download: MMC storage not ready.\r\n");
   15d8e:	4813      	ldr	r0, [pc, #76]	; (15ddc <start_download+0x84>)
   15d90:	4b0d      	ldr	r3, [pc, #52]	; (15dc8 <start_download+0x70>)
   15d92:	4798      	blx	r3
}
   15d94:	b002      	add	sp, #8
   15d96:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
   15d98:	4811      	ldr	r0, [pc, #68]	; (15de0 <start_download+0x88>)
   15d9a:	4b0b      	ldr	r3, [pc, #44]	; (15dc8 <start_download+0x70>)
   15d9c:	4798      	blx	r3
		return;
   15d9e:	e7f9      	b.n	15d94 <start_download+0x3c>
		printf("start_download: request is sent already.\r\n");
   15da0:	4810      	ldr	r0, [pc, #64]	; (15de4 <start_download+0x8c>)
   15da2:	4b09      	ldr	r3, [pc, #36]	; (15dc8 <start_download+0x70>)
   15da4:	4798      	blx	r3
		return;
   15da6:	e7f5      	b.n	15d94 <start_download+0x3c>
		printf("start_download: running download already.\r\n");
   15da8:	480f      	ldr	r0, [pc, #60]	; (15de8 <start_download+0x90>)
   15daa:	4b07      	ldr	r3, [pc, #28]	; (15dc8 <start_download+0x70>)
   15dac:	4798      	blx	r3
		return;
   15dae:	e7f1      	b.n	15d94 <start_download+0x3c>
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15db0:	9300      	str	r3, [sp, #0]
   15db2:	2201      	movs	r2, #1
   15db4:	490d      	ldr	r1, [pc, #52]	; (15dec <start_download+0x94>)
   15db6:	4807      	ldr	r0, [pc, #28]	; (15dd4 <start_download+0x7c>)
   15db8:	4c07      	ldr	r4, [pc, #28]	; (15dd8 <start_download+0x80>)
   15dba:	47a0      	blx	r4
   15dbc:	e7ea      	b.n	15d94 <start_download+0x3c>
   15dbe:	46c0      	nop			; (mov r8, r8)
   15dc0:	20000785 	.word	0x20000785
   15dc4:	0001a088 	.word	0x0001a088
   15dc8:	00016cfd 	.word	0x00016cfd
   15dcc:	20000e20 	.word	0x20000e20
   15dd0:	0001a0f8 	.word	0x0001a0f8
   15dd4:	20001540 	.word	0x20001540
   15dd8:	0001581d 	.word	0x0001581d
   15ddc:	00019fdc 	.word	0x00019fdc
   15de0:	0001a004 	.word	0x0001a004
   15de4:	0001a030 	.word	0x0001a030
   15de8:	0001a05c 	.word	0x0001a05c
   15dec:	0001a0b4 	.word	0x0001a0b4

00015df0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   15df0:	b570      	push	{r4, r5, r6, lr}
   15df2:	b082      	sub	sp, #8
   15df4:	0005      	movs	r5, r0
   15df6:	000e      	movs	r6, r1
	uint16_t temp = 0;
   15df8:	2200      	movs	r2, #0
   15dfa:	466b      	mov	r3, sp
   15dfc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   15dfe:	4c06      	ldr	r4, [pc, #24]	; (15e18 <usart_serial_getchar+0x28>)
   15e00:	466b      	mov	r3, sp
   15e02:	1d99      	adds	r1, r3, #6
   15e04:	0028      	movs	r0, r5
   15e06:	47a0      	blx	r4
   15e08:	2800      	cmp	r0, #0
   15e0a:	d1f9      	bne.n	15e00 <usart_serial_getchar+0x10>

	*c = temp;
   15e0c:	466b      	mov	r3, sp
   15e0e:	3306      	adds	r3, #6
   15e10:	881b      	ldrh	r3, [r3, #0]
   15e12:	7033      	strb	r3, [r6, #0]
}
   15e14:	b002      	add	sp, #8
   15e16:	bd70      	pop	{r4, r5, r6, pc}
   15e18:	00010e0d 	.word	0x00010e0d

00015e1c <usart_serial_putchar>:
{
   15e1c:	b570      	push	{r4, r5, r6, lr}
   15e1e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   15e20:	b28c      	uxth	r4, r1
   15e22:	4e03      	ldr	r6, [pc, #12]	; (15e30 <usart_serial_putchar+0x14>)
   15e24:	0021      	movs	r1, r4
   15e26:	0028      	movs	r0, r5
   15e28:	47b0      	blx	r6
   15e2a:	2800      	cmp	r0, #0
   15e2c:	d1fa      	bne.n	15e24 <usart_serial_putchar+0x8>
}
   15e2e:	bd70      	pop	{r4, r5, r6, pc}
   15e30:	00010de1 	.word	0x00010de1

00015e34 <store_file_packet>:
{
   15e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e36:	b083      	sub	sp, #12
   15e38:	0005      	movs	r5, r0
   15e3a:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d010      	beq.n	15e62 <store_file_packet+0x2e>
   15e40:	2900      	cmp	r1, #0
   15e42:	d00e      	beq.n	15e62 <store_file_packet+0x2e>
	return ((down_state & mask) != 0);
   15e44:	4b3b      	ldr	r3, [pc, #236]	; (15f34 <store_file_packet+0x100>)
   15e46:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   15e48:	071b      	lsls	r3, r3, #28
   15e4a:	d432      	bmi.n	15eb2 <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15e4c:	4b3a      	ldr	r3, [pc, #232]	; (15f38 <store_file_packet+0x104>)
   15e4e:	2230      	movs	r2, #48	; 0x30
   15e50:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   15e52:	320a      	adds	r2, #10
   15e54:	705a      	strb	r2, [r3, #1]
		if(second_file == 0){
   15e56:	4b39      	ldr	r3, [pc, #228]	; (15f3c <store_file_packet+0x108>)
   15e58:	781b      	ldrb	r3, [r3, #0]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d067      	beq.n	15f2e <store_file_packet+0xfa>
			cp = (char *)(PARAMS_HTTP_FILE_URL + strlen(PARAMS_HTTP_FILE_URL));
   15e5e:	4c38      	ldr	r4, [pc, #224]	; (15f40 <store_file_packet+0x10c>)
   15e60:	e005      	b.n	15e6e <store_file_packet+0x3a>
		printf("store_file_packet: empty data.\r\n");
   15e62:	4838      	ldr	r0, [pc, #224]	; (15f44 <store_file_packet+0x110>)
   15e64:	4b38      	ldr	r3, [pc, #224]	; (15f48 <store_file_packet+0x114>)
   15e66:	4798      	blx	r3
}
   15e68:	b003      	add	sp, #12
   15e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   15e6c:	0004      	movs	r4, r0
   15e6e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   15e70:	7803      	ldrb	r3, [r0, #0]
   15e72:	2b2f      	cmp	r3, #47	; 0x2f
   15e74:	d1fa      	bne.n	15e6c <store_file_packet+0x38>
		if (strlen(cp) > 1) {
   15e76:	4b35      	ldr	r3, [pc, #212]	; (15f4c <store_file_packet+0x118>)
   15e78:	4798      	blx	r3
   15e7a:	2801      	cmp	r0, #1
   15e7c:	d92d      	bls.n	15eda <store_file_packet+0xa6>
			strcpy(&save_file_name[2], cp);
   15e7e:	4f2e      	ldr	r7, [pc, #184]	; (15f38 <store_file_packet+0x104>)
   15e80:	1cb8      	adds	r0, r7, #2
   15e82:	0021      	movs	r1, r4
   15e84:	4b32      	ldr	r3, [pc, #200]	; (15f50 <store_file_packet+0x11c>)
   15e86:	4798      	blx	r3
		f_open(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15e88:	22fa      	movs	r2, #250	; 0xfa
   15e8a:	0039      	movs	r1, r7
   15e8c:	4831      	ldr	r0, [pc, #196]	; (15f54 <store_file_packet+0x120>)
   15e8e:	4c32      	ldr	r4, [pc, #200]	; (15f58 <store_file_packet+0x124>)
   15e90:	47a0      	blx	r4
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   15e92:	0039      	movs	r1, r7
   15e94:	4831      	ldr	r0, [pc, #196]	; (15f5c <store_file_packet+0x128>)
   15e96:	4b32      	ldr	r3, [pc, #200]	; (15f60 <store_file_packet+0x12c>)
   15e98:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15e9a:	220a      	movs	r2, #10
   15e9c:	0039      	movs	r1, r7
   15e9e:	482d      	ldr	r0, [pc, #180]	; (15f54 <store_file_packet+0x120>)
   15ea0:	47a0      	blx	r4
		if (ret != FR_OK) {
   15ea2:	2800      	cmp	r0, #0
   15ea4:	d120      	bne.n	15ee8 <store_file_packet+0xb4>
		received_file_size = 0;
   15ea6:	2200      	movs	r2, #0
   15ea8:	4b2e      	ldr	r3, [pc, #184]	; (15f64 <store_file_packet+0x130>)
   15eaa:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   15eac:	2008      	movs	r0, #8
   15eae:	4b2e      	ldr	r3, [pc, #184]	; (15f68 <store_file_packet+0x134>)
   15eb0:	4798      	blx	r3
		UINT wsize = 0;
   15eb2:	2300      	movs	r3, #0
   15eb4:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   15eb6:	ab01      	add	r3, sp, #4
   15eb8:	0032      	movs	r2, r6
   15eba:	0029      	movs	r1, r5
   15ebc:	4825      	ldr	r0, [pc, #148]	; (15f54 <store_file_packet+0x120>)
   15ebe:	4c2b      	ldr	r4, [pc, #172]	; (15f6c <store_file_packet+0x138>)
   15ec0:	47a0      	blx	r4
		if (ret != FR_OK) {
   15ec2:	2800      	cmp	r0, #0
   15ec4:	d015      	beq.n	15ef2 <store_file_packet+0xbe>
			f_close(&file_object);
   15ec6:	4823      	ldr	r0, [pc, #140]	; (15f54 <store_file_packet+0x120>)
   15ec8:	4b29      	ldr	r3, [pc, #164]	; (15f70 <store_file_packet+0x13c>)
   15eca:	4798      	blx	r3
			add_state(CANCELED);
   15ecc:	2020      	movs	r0, #32
   15ece:	4b26      	ldr	r3, [pc, #152]	; (15f68 <store_file_packet+0x134>)
   15ed0:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   15ed2:	4828      	ldr	r0, [pc, #160]	; (15f74 <store_file_packet+0x140>)
   15ed4:	4b1c      	ldr	r3, [pc, #112]	; (15f48 <store_file_packet+0x114>)
   15ed6:	4798      	blx	r3
			return;
   15ed8:	e7c6      	b.n	15e68 <store_file_packet+0x34>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   15eda:	4827      	ldr	r0, [pc, #156]	; (15f78 <store_file_packet+0x144>)
   15edc:	4b1a      	ldr	r3, [pc, #104]	; (15f48 <store_file_packet+0x114>)
   15ede:	4798      	blx	r3
			add_state(CANCELED);
   15ee0:	2020      	movs	r0, #32
   15ee2:	4b21      	ldr	r3, [pc, #132]	; (15f68 <store_file_packet+0x134>)
   15ee4:	4798      	blx	r3
			return;
   15ee6:	e7bf      	b.n	15e68 <store_file_packet+0x34>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   15ee8:	0001      	movs	r1, r0
   15eea:	4824      	ldr	r0, [pc, #144]	; (15f7c <store_file_packet+0x148>)
   15eec:	4b1c      	ldr	r3, [pc, #112]	; (15f60 <store_file_packet+0x12c>)
   15eee:	4798      	blx	r3
			return;
   15ef0:	e7ba      	b.n	15e68 <store_file_packet+0x34>
		received_file_size += wsize;
   15ef2:	4c1c      	ldr	r4, [pc, #112]	; (15f64 <store_file_packet+0x130>)
   15ef4:	6823      	ldr	r3, [r4, #0]
   15ef6:	9a01      	ldr	r2, [sp, #4]
   15ef8:	4694      	mov	ip, r2
   15efa:	4463      	add	r3, ip
   15efc:	0019      	movs	r1, r3
   15efe:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15f00:	4d1f      	ldr	r5, [pc, #124]	; (15f80 <store_file_packet+0x14c>)
   15f02:	682a      	ldr	r2, [r5, #0]
   15f04:	481f      	ldr	r0, [pc, #124]	; (15f84 <store_file_packet+0x150>)
   15f06:	4b16      	ldr	r3, [pc, #88]	; (15f60 <store_file_packet+0x12c>)
   15f08:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   15f0a:	6822      	ldr	r2, [r4, #0]
   15f0c:	682b      	ldr	r3, [r5, #0]
   15f0e:	429a      	cmp	r2, r3
   15f10:	d3aa      	bcc.n	15e68 <store_file_packet+0x34>
			f_close(&file_object);
   15f12:	4810      	ldr	r0, [pc, #64]	; (15f54 <store_file_packet+0x120>)
   15f14:	4b16      	ldr	r3, [pc, #88]	; (15f70 <store_file_packet+0x13c>)
   15f16:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   15f18:	481b      	ldr	r0, [pc, #108]	; (15f88 <store_file_packet+0x154>)
   15f1a:	4b0b      	ldr	r3, [pc, #44]	; (15f48 <store_file_packet+0x114>)
   15f1c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   15f1e:	2280      	movs	r2, #128	; 0x80
   15f20:	0412      	lsls	r2, r2, #16
   15f22:	4b1a      	ldr	r3, [pc, #104]	; (15f8c <store_file_packet+0x158>)
   15f24:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   15f26:	2010      	movs	r0, #16
   15f28:	4b0f      	ldr	r3, [pc, #60]	; (15f68 <store_file_packet+0x134>)
   15f2a:	4798      	blx	r3
			return;
   15f2c:	e79c      	b.n	15e68 <store_file_packet+0x34>
			cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   15f2e:	4c18      	ldr	r4, [pc, #96]	; (15f90 <store_file_packet+0x15c>)
   15f30:	e79d      	b.n	15e6e <store_file_packet+0x3a>
   15f32:	46c0      	nop			; (mov r8, r8)
   15f34:	20000785 	.word	0x20000785
   15f38:	200000f0 	.word	0x200000f0
   15f3c:	20000e20 	.word	0x20000e20
   15f40:	0001a136 	.word	0x0001a136
   15f44:	0001a138 	.word	0x0001a138
   15f48:	00016cfd 	.word	0x00016cfd
   15f4c:	00016fdf 	.word	0x00016fdf
   15f50:	00016f93 	.word	0x00016f93
   15f54:	200009b8 	.word	0x200009b8
   15f58:	000136e5 	.word	0x000136e5
   15f5c:	0001a158 	.word	0x0001a158
   15f60:	00016be1 	.word	0x00016be1
   15f64:	20000e1c 	.word	0x20000e1c
   15f68:	00015c69 	.word	0x00015c69
   15f6c:	0001386d 	.word	0x0001386d
   15f70:	00013b31 	.word	0x00013b31
   15f74:	0001a1f4 	.word	0x0001a1f4
   15f78:	0001a180 	.word	0x0001a180
   15f7c:	0001a1c0 	.word	0x0001a1c0
   15f80:	200009dc 	.word	0x200009dc
   15f84:	0001a230 	.word	0x0001a230
   15f88:	0001a264 	.word	0x0001a264
   15f8c:	41004400 	.word	0x41004400
   15f90:	0001a0f5 	.word	0x0001a0f5

00015f94 <mqtt_callback>:
{
   15f94:	b570      	push	{r4, r5, r6, lr}
   15f96:	b086      	sub	sp, #24
   15f98:	0004      	movs	r4, r0
	switch (type) {
   15f9a:	2901      	cmp	r1, #1
   15f9c:	d02c      	beq.n	15ff8 <mqtt_callback+0x64>
   15f9e:	2905      	cmp	r1, #5
   15fa0:	d045      	beq.n	1602e <mqtt_callback+0x9a>
   15fa2:	2900      	cmp	r1, #0
   15fa4:	d001      	beq.n	15faa <mqtt_callback+0x16>
}
   15fa6:	b006      	add	sp, #24
   15fa8:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   15faa:	6813      	ldr	r3, [r2, #0]
   15fac:	2b00      	cmp	r3, #0
   15fae:	db19      	blt.n	15fe4 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   15fb0:	4824      	ldr	r0, [pc, #144]	; (16044 <mqtt_callback+0xb0>)
   15fb2:	4b25      	ldr	r3, [pc, #148]	; (16048 <mqtt_callback+0xb4>)
   15fb4:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   15fb6:	4a25      	ldr	r2, [pc, #148]	; (1604c <mqtt_callback+0xb8>)
   15fb8:	2300      	movs	r3, #0
   15fba:	9305      	str	r3, [sp, #20]
   15fbc:	9304      	str	r3, [sp, #16]
   15fbe:	9303      	str	r3, [sp, #12]
   15fc0:	9302      	str	r3, [sp, #8]
   15fc2:	9301      	str	r3, [sp, #4]
   15fc4:	9200      	str	r2, [sp, #0]
   15fc6:	4b22      	ldr	r3, [pc, #136]	; (16050 <mqtt_callback+0xbc>)
   15fc8:	2101      	movs	r1, #1
   15fca:	0020      	movs	r0, r4
   15fcc:	4c21      	ldr	r4, [pc, #132]	; (16054 <mqtt_callback+0xc0>)
   15fce:	47a0      	blx	r4
   15fd0:	2800      	cmp	r0, #0
   15fd2:	d003      	beq.n	15fdc <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   15fd4:	4820      	ldr	r0, [pc, #128]	; (16058 <mqtt_callback+0xc4>)
   15fd6:	4b21      	ldr	r3, [pc, #132]	; (1605c <mqtt_callback+0xc8>)
   15fd8:	4798      	blx	r3
   15fda:	e7e4      	b.n	15fa6 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   15fdc:	4820      	ldr	r0, [pc, #128]	; (16060 <mqtt_callback+0xcc>)
   15fde:	4b1f      	ldr	r3, [pc, #124]	; (1605c <mqtt_callback+0xc8>)
   15fe0:	4798      	blx	r3
   15fe2:	e7e0      	b.n	15fa6 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15fe4:	4d1f      	ldr	r5, [pc, #124]	; (16064 <mqtt_callback+0xd0>)
   15fe6:	0029      	movs	r1, r5
   15fe8:	481f      	ldr	r0, [pc, #124]	; (16068 <mqtt_callback+0xd4>)
   15fea:	4b17      	ldr	r3, [pc, #92]	; (16048 <mqtt_callback+0xb4>)
   15fec:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15fee:	0029      	movs	r1, r5
   15ff0:	0020      	movs	r0, r4
   15ff2:	4b1e      	ldr	r3, [pc, #120]	; (1606c <mqtt_callback+0xd8>)
   15ff4:	4798      	blx	r3
   15ff6:	e7d6      	b.n	15fa6 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15ff8:	7811      	ldrb	r1, [r2, #0]
   15ffa:	2900      	cmp	r1, #0
   15ffc:	d113      	bne.n	16026 <mqtt_callback+0x92>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
   15ffe:	4e1c      	ldr	r6, [pc, #112]	; (16070 <mqtt_callback+0xdc>)
   16000:	0033      	movs	r3, r6
   16002:	2202      	movs	r2, #2
   16004:	491b      	ldr	r1, [pc, #108]	; (16074 <mqtt_callback+0xe0>)
   16006:	4d1c      	ldr	r5, [pc, #112]	; (16078 <mqtt_callback+0xe4>)
   16008:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   1600a:	0033      	movs	r3, r6
   1600c:	2202      	movs	r2, #2
   1600e:	491b      	ldr	r1, [pc, #108]	; (1607c <mqtt_callback+0xe8>)
   16010:	0020      	movs	r0, r4
   16012:	47a8      	blx	r5
			mqtt_subscribe(module_inst, BATTERY_TOPIC, 2, SubscribeHandler);
   16014:	0033      	movs	r3, r6
   16016:	2202      	movs	r2, #2
   16018:	4919      	ldr	r1, [pc, #100]	; (16080 <mqtt_callback+0xec>)
   1601a:	0020      	movs	r0, r4
   1601c:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   1601e:	4819      	ldr	r0, [pc, #100]	; (16084 <mqtt_callback+0xf0>)
   16020:	4b0e      	ldr	r3, [pc, #56]	; (1605c <mqtt_callback+0xc8>)
   16022:	4798      	blx	r3
   16024:	e7bf      	b.n	15fa6 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16026:	4818      	ldr	r0, [pc, #96]	; (16088 <mqtt_callback+0xf4>)
   16028:	4b07      	ldr	r3, [pc, #28]	; (16048 <mqtt_callback+0xb4>)
   1602a:	4798      	blx	r3
   1602c:	e7bb      	b.n	15fa6 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   1602e:	4817      	ldr	r0, [pc, #92]	; (1608c <mqtt_callback+0xf8>)
   16030:	4b0a      	ldr	r3, [pc, #40]	; (1605c <mqtt_callback+0xc8>)
   16032:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   16034:	4916      	ldr	r1, [pc, #88]	; (16090 <mqtt_callback+0xfc>)
   16036:	2231      	movs	r2, #49	; 0x31
   16038:	5c8b      	ldrb	r3, [r1, r2]
   1603a:	2002      	movs	r0, #2
   1603c:	4383      	bics	r3, r0
   1603e:	548b      	strb	r3, [r1, r2]
}
   16040:	e7b1      	b.n	15fa6 <mqtt_callback+0x12>
   16042:	46c0      	nop			; (mov r8, r8)
   16044:	00019ec4 	.word	0x00019ec4
   16048:	00016be1 	.word	0x00016be1
   1604c:	00019ef0 	.word	0x00019ef0
   16050:	00019ee0 	.word	0x00019ee0
   16054:	000147a9 	.word	0x000147a9
   16058:	00019efc 	.word	0x00019efc
   1605c:	00016cfd 	.word	0x00016cfd
   16060:	00019f24 	.word	0x00019f24
   16064:	00019eac 	.word	0x00019eac
   16068:	00019f40 	.word	0x00019f40
   1606c:	0001477d 	.word	0x0001477d
   16070:	00015c79 	.word	0x00015c79
   16074:	00019f78 	.word	0x00019f78
   16078:	000148ad 	.word	0x000148ad
   1607c:	00019ab0 	.word	0x00019ab0
   16080:	00018314 	.word	0x00018314
   16084:	00019f84 	.word	0x00019f84
   16088:	00019f94 	.word	0x00019f94
   1608c:	00019fc8 	.word	0x00019fc8
   16090:	20000750 	.word	0x20000750

00016094 <http_client_callback>:
{
   16094:	b510      	push	{r4, lr}
   16096:	0014      	movs	r4, r2
	switch (type) {
   16098:	2904      	cmp	r1, #4
   1609a:	d806      	bhi.n	160aa <http_client_callback+0x16>
   1609c:	0089      	lsls	r1, r1, #2
   1609e:	4b2a      	ldr	r3, [pc, #168]	; (16148 <http_client_callback+0xb4>)
   160a0:	585b      	ldr	r3, [r3, r1]
   160a2:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   160a4:	4829      	ldr	r0, [pc, #164]	; (1614c <http_client_callback+0xb8>)
   160a6:	4b2a      	ldr	r3, [pc, #168]	; (16150 <http_client_callback+0xbc>)
   160a8:	4798      	blx	r3
}
   160aa:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   160ac:	4829      	ldr	r0, [pc, #164]	; (16154 <http_client_callback+0xc0>)
   160ae:	4b28      	ldr	r3, [pc, #160]	; (16150 <http_client_callback+0xbc>)
   160b0:	4798      	blx	r3
		add_state(GET_REQUESTED);
   160b2:	2004      	movs	r0, #4
   160b4:	4b28      	ldr	r3, [pc, #160]	; (16158 <http_client_callback+0xc4>)
   160b6:	4798      	blx	r3
		break;
   160b8:	e7f7      	b.n	160aa <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   160ba:	8811      	ldrh	r1, [r2, #0]
   160bc:	6852      	ldr	r2, [r2, #4]
   160be:	4827      	ldr	r0, [pc, #156]	; (1615c <http_client_callback+0xc8>)
   160c0:	4b27      	ldr	r3, [pc, #156]	; (16160 <http_client_callback+0xcc>)
   160c2:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   160c4:	8823      	ldrh	r3, [r4, #0]
   160c6:	2bc8      	cmp	r3, #200	; 0xc8
   160c8:	d10f      	bne.n	160ea <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   160ca:	6861      	ldr	r1, [r4, #4]
   160cc:	4b25      	ldr	r3, [pc, #148]	; (16164 <http_client_callback+0xd0>)
   160ce:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   160d0:	2200      	movs	r2, #0
   160d2:	4b25      	ldr	r3, [pc, #148]	; (16168 <http_client_callback+0xd4>)
   160d4:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   160d6:	4b25      	ldr	r3, [pc, #148]	; (1616c <http_client_callback+0xd8>)
   160d8:	4299      	cmp	r1, r3
   160da:	d8e6      	bhi.n	160aa <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   160dc:	68a0      	ldr	r0, [r4, #8]
   160de:	4b24      	ldr	r3, [pc, #144]	; (16170 <http_client_callback+0xdc>)
   160e0:	4798      	blx	r3
			add_state(COMPLETED);
   160e2:	2010      	movs	r0, #16
   160e4:	4b1c      	ldr	r3, [pc, #112]	; (16158 <http_client_callback+0xc4>)
   160e6:	4798      	blx	r3
   160e8:	e7df      	b.n	160aa <http_client_callback+0x16>
			add_state(CANCELED);
   160ea:	2020      	movs	r0, #32
   160ec:	4b1a      	ldr	r3, [pc, #104]	; (16158 <http_client_callback+0xc4>)
   160ee:	4798      	blx	r3
			return;
   160f0:	e7db      	b.n	160aa <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   160f2:	6811      	ldr	r1, [r2, #0]
   160f4:	6850      	ldr	r0, [r2, #4]
   160f6:	4b1e      	ldr	r3, [pc, #120]	; (16170 <http_client_callback+0xdc>)
   160f8:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   160fa:	7a23      	ldrb	r3, [r4, #8]
   160fc:	2b00      	cmp	r3, #0
   160fe:	d0d4      	beq.n	160aa <http_client_callback+0x16>
			add_state(COMPLETED);
   16100:	2010      	movs	r0, #16
   16102:	4b15      	ldr	r3, [pc, #84]	; (16158 <http_client_callback+0xc4>)
   16104:	4798      	blx	r3
   16106:	e7d0      	b.n	160aa <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16108:	6811      	ldr	r1, [r2, #0]
   1610a:	481a      	ldr	r0, [pc, #104]	; (16174 <http_client_callback+0xe0>)
   1610c:	4b14      	ldr	r3, [pc, #80]	; (16160 <http_client_callback+0xcc>)
   1610e:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   16110:	6823      	ldr	r3, [r4, #0]
   16112:	330b      	adds	r3, #11
   16114:	d1c9      	bne.n	160aa <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   16116:	4b18      	ldr	r3, [pc, #96]	; (16178 <http_client_callback+0xe4>)
   16118:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   1611a:	071b      	lsls	r3, r3, #28
   1611c:	d406      	bmi.n	1612c <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   1611e:	4b16      	ldr	r3, [pc, #88]	; (16178 <http_client_callback+0xe4>)
   16120:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16122:	075a      	lsls	r2, r3, #29
   16124:	d40b      	bmi.n	1613e <http_client_callback+0xaa>
			start_download();
   16126:	4b15      	ldr	r3, [pc, #84]	; (1617c <http_client_callback+0xe8>)
   16128:	4798      	blx	r3
   1612a:	e7be      	b.n	160aa <http_client_callback+0x16>
				f_close(&file_object);
   1612c:	4814      	ldr	r0, [pc, #80]	; (16180 <http_client_callback+0xec>)
   1612e:	4b15      	ldr	r3, [pc, #84]	; (16184 <http_client_callback+0xf0>)
   16130:	4798      	blx	r3
	down_state &= ~mask;
   16132:	4a11      	ldr	r2, [pc, #68]	; (16178 <http_client_callback+0xe4>)
   16134:	7813      	ldrb	r3, [r2, #0]
   16136:	2108      	movs	r1, #8
   16138:	438b      	bics	r3, r1
   1613a:	7013      	strb	r3, [r2, #0]
   1613c:	e7ef      	b.n	1611e <http_client_callback+0x8a>
   1613e:	2204      	movs	r2, #4
   16140:	4393      	bics	r3, r2
   16142:	4a0d      	ldr	r2, [pc, #52]	; (16178 <http_client_callback+0xe4>)
   16144:	7013      	strb	r3, [r2, #0]
   16146:	e7ee      	b.n	16126 <http_client_callback+0x92>
   16148:	00019a84 	.word	0x00019a84
   1614c:	00019adc 	.word	0x00019adc
   16150:	00016cfd 	.word	0x00016cfd
   16154:	00019b14 	.word	0x00019b14
   16158:	00015c69 	.word	0x00015c69
   1615c:	00019b40 	.word	0x00019b40
   16160:	00016be1 	.word	0x00016be1
   16164:	200009dc 	.word	0x200009dc
   16168:	20000e1c 	.word	0x20000e1c
   1616c:	000005a6 	.word	0x000005a6
   16170:	00015e35 	.word	0x00015e35
   16174:	00019b7c 	.word	0x00019b7c
   16178:	20000785 	.word	0x20000785
   1617c:	00015d59 	.word	0x00015d59
   16180:	200009b8 	.word	0x200009b8
   16184:	00013b31 	.word	0x00013b31

00016188 <wifi_cb>:
{
   16188:	b510      	push	{r4, lr}
   1618a:	b082      	sub	sp, #8
	switch (u8MsgType) {
   1618c:	282c      	cmp	r0, #44	; 0x2c
   1618e:	d003      	beq.n	16198 <wifi_cb+0x10>
   16190:	2832      	cmp	r0, #50	; 0x32
   16192:	d035      	beq.n	16200 <wifi_cb+0x78>
}
   16194:	b002      	add	sp, #8
   16196:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16198:	780b      	ldrb	r3, [r1, #0]
   1619a:	2b01      	cmp	r3, #1
   1619c:	d01c      	beq.n	161d8 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1619e:	2b00      	cmp	r3, #0
   161a0:	d1f8      	bne.n	16194 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   161a2:	4826      	ldr	r0, [pc, #152]	; (1623c <wifi_cb+0xb4>)
   161a4:	4b26      	ldr	r3, [pc, #152]	; (16240 <wifi_cb+0xb8>)
   161a6:	4798      	blx	r3
	down_state &= ~mask;
   161a8:	4a26      	ldr	r2, [pc, #152]	; (16244 <wifi_cb+0xbc>)
   161aa:	7813      	ldrb	r3, [r2, #0]
   161ac:	2102      	movs	r1, #2
   161ae:	438b      	bics	r3, r1
   161b0:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   161b2:	071b      	lsls	r3, r3, #28
   161b4:	d416      	bmi.n	161e4 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   161b6:	4b23      	ldr	r3, [pc, #140]	; (16244 <wifi_cb+0xbc>)
   161b8:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   161ba:	075a      	lsls	r2, r3, #29
   161bc:	d41b      	bmi.n	161f6 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
   161be:	2101      	movs	r1, #1
   161c0:	4821      	ldr	r0, [pc, #132]	; (16248 <wifi_cb+0xc0>)
   161c2:	4b22      	ldr	r3, [pc, #136]	; (1624c <wifi_cb+0xc4>)
   161c4:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   161c6:	23ff      	movs	r3, #255	; 0xff
   161c8:	9300      	str	r3, [sp, #0]
   161ca:	4b21      	ldr	r3, [pc, #132]	; (16250 <wifi_cb+0xc8>)
   161cc:	2202      	movs	r2, #2
   161ce:	2112      	movs	r1, #18
   161d0:	4820      	ldr	r0, [pc, #128]	; (16254 <wifi_cb+0xcc>)
   161d2:	4c21      	ldr	r4, [pc, #132]	; (16258 <wifi_cb+0xd0>)
   161d4:	47a0      	blx	r4
   161d6:	e7dd      	b.n	16194 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   161d8:	4820      	ldr	r0, [pc, #128]	; (1625c <wifi_cb+0xd4>)
   161da:	4b19      	ldr	r3, [pc, #100]	; (16240 <wifi_cb+0xb8>)
   161dc:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   161de:	4b20      	ldr	r3, [pc, #128]	; (16260 <wifi_cb+0xd8>)
   161e0:	4798      	blx	r3
   161e2:	e7d7      	b.n	16194 <wifi_cb+0xc>
				f_close(&file_object);
   161e4:	481f      	ldr	r0, [pc, #124]	; (16264 <wifi_cb+0xdc>)
   161e6:	4b20      	ldr	r3, [pc, #128]	; (16268 <wifi_cb+0xe0>)
   161e8:	4798      	blx	r3
	down_state &= ~mask;
   161ea:	4a16      	ldr	r2, [pc, #88]	; (16244 <wifi_cb+0xbc>)
   161ec:	7813      	ldrb	r3, [r2, #0]
   161ee:	2108      	movs	r1, #8
   161f0:	438b      	bics	r3, r1
   161f2:	7013      	strb	r3, [r2, #0]
   161f4:	e7df      	b.n	161b6 <wifi_cb+0x2e>
   161f6:	2204      	movs	r2, #4
   161f8:	4393      	bics	r3, r2
   161fa:	4a12      	ldr	r2, [pc, #72]	; (16244 <wifi_cb+0xbc>)
   161fc:	7013      	strb	r3, [r2, #0]
   161fe:	e7de      	b.n	161be <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16200:	788b      	ldrb	r3, [r1, #2]
   16202:	784a      	ldrb	r2, [r1, #1]
   16204:	7808      	ldrb	r0, [r1, #0]
   16206:	78c9      	ldrb	r1, [r1, #3]
   16208:	9100      	str	r1, [sp, #0]
   1620a:	0001      	movs	r1, r0
   1620c:	4817      	ldr	r0, [pc, #92]	; (1626c <wifi_cb+0xe4>)
   1620e:	4c18      	ldr	r4, [pc, #96]	; (16270 <wifi_cb+0xe8>)
   16210:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   16212:	2002      	movs	r0, #2
   16214:	4b17      	ldr	r3, [pc, #92]	; (16274 <wifi_cb+0xec>)
   16216:	4798      	blx	r3
		if(do_download_flag == 1)
   16218:	4b17      	ldr	r3, [pc, #92]	; (16278 <wifi_cb+0xf0>)
   1621a:	781b      	ldrb	r3, [r3, #0]
   1621c:	2b01      	cmp	r3, #1
   1621e:	d009      	beq.n	16234 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16220:	4916      	ldr	r1, [pc, #88]	; (1627c <wifi_cb+0xf4>)
   16222:	4809      	ldr	r0, [pc, #36]	; (16248 <wifi_cb+0xc0>)
   16224:	4b16      	ldr	r3, [pc, #88]	; (16280 <wifi_cb+0xf8>)
   16226:	4798      	blx	r3
   16228:	2800      	cmp	r0, #0
   1622a:	d0b3      	beq.n	16194 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   1622c:	4815      	ldr	r0, [pc, #84]	; (16284 <wifi_cb+0xfc>)
   1622e:	4b04      	ldr	r3, [pc, #16]	; (16240 <wifi_cb+0xb8>)
   16230:	4798      	blx	r3
}
   16232:	e7af      	b.n	16194 <wifi_cb+0xc>
			start_download();
   16234:	4b14      	ldr	r3, [pc, #80]	; (16288 <wifi_cb+0x100>)
   16236:	4798      	blx	r3
   16238:	e7ac      	b.n	16194 <wifi_cb+0xc>
   1623a:	46c0      	nop			; (mov r8, r8)
   1623c:	0001a2b8 	.word	0x0001a2b8
   16240:	00016cfd 	.word	0x00016cfd
   16244:	20000785 	.word	0x20000785
   16248:	200009e4 	.word	0x200009e4
   1624c:	00014841 	.word	0x00014841
   16250:	0001a2d8 	.word	0x0001a2d8
   16254:	0001a2e8 	.word	0x0001a2e8
   16258:	0000dbdd 	.word	0x0000dbdd
   1625c:	0001a298 	.word	0x0001a298
   16260:	0000dbf9 	.word	0x0000dbf9
   16264:	200009b8 	.word	0x200009b8
   16268:	00013b31 	.word	0x00013b31
   1626c:	0001a2fc 	.word	0x0001a2fc
   16270:	00016be1 	.word	0x00016be1
   16274:	00015c69 	.word	0x00015c69
   16278:	20000784 	.word	0x20000784
   1627c:	00019eac 	.word	0x00019eac
   16280:	0001477d 	.word	0x0001477d
   16284:	0001a324 	.word	0x0001a324
   16288:	00015d59 	.word	0x00015d59

0001628c <configure_extint_channel>:
{
   1628c:	b510      	push	{r4, lr}
   1628e:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   16290:	ac01      	add	r4, sp, #4
   16292:	0020      	movs	r0, r4
   16294:	4b07      	ldr	r3, [pc, #28]	; (162b4 <configure_extint_channel+0x28>)
   16296:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   16298:	2337      	movs	r3, #55	; 0x37
   1629a:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   1629c:	2300      	movs	r3, #0
   1629e:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   162a0:	3301      	adds	r3, #1
   162a2:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   162a4:	3301      	adds	r3, #1
   162a6:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   162a8:	0021      	movs	r1, r4
   162aa:	2007      	movs	r0, #7
   162ac:	4b02      	ldr	r3, [pc, #8]	; (162b8 <configure_extint_channel+0x2c>)
   162ae:	4798      	blx	r3
}
   162b0:	b004      	add	sp, #16
   162b2:	bd10      	pop	{r4, pc}
   162b4:	0000fc79 	.word	0x0000fc79
   162b8:	0000fc8d 	.word	0x0000fc8d

000162bc <configure_extint_callbacks>:
{
   162bc:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   162be:	2200      	movs	r2, #0
   162c0:	2107      	movs	r1, #7
   162c2:	4804      	ldr	r0, [pc, #16]	; (162d4 <configure_extint_callbacks+0x18>)
   162c4:	4b04      	ldr	r3, [pc, #16]	; (162d8 <configure_extint_callbacks+0x1c>)
   162c6:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   162c8:	2100      	movs	r1, #0
   162ca:	2007      	movs	r0, #7
   162cc:	4b03      	ldr	r3, [pc, #12]	; (162dc <configure_extint_callbacks+0x20>)
   162ce:	4798      	blx	r3
}
   162d0:	bd10      	pop	{r4, pc}
   162d2:	46c0      	nop			; (mov r8, r8)
   162d4:	00015d01 	.word	0x00015d01
   162d8:	0000fb35 	.word	0x0000fb35
   162dc:	0000fb61 	.word	0x0000fb61

000162e0 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   162e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162e2:	b091      	sub	sp, #68	; 0x44
	down_state = NOT_READY;
   162e4:	2200      	movs	r2, #0
   162e6:	4b97      	ldr	r3, [pc, #604]	; (16544 <main+0x264>)
   162e8:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
   162ea:	4b97      	ldr	r3, [pc, #604]	; (16548 <main+0x268>)
   162ec:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   162ee:	4b97      	ldr	r3, [pc, #604]	; (1654c <main+0x26c>)
   162f0:	4798      	blx	r3
	stdio_base = (void *)GetUsartModule();
   162f2:	4b97      	ldr	r3, [pc, #604]	; (16550 <main+0x270>)
   162f4:	4798      	blx	r3
   162f6:	4b97      	ldr	r3, [pc, #604]	; (16554 <main+0x274>)
   162f8:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   162fa:	4a97      	ldr	r2, [pc, #604]	; (16558 <main+0x278>)
   162fc:	4b97      	ldr	r3, [pc, #604]	; (1655c <main+0x27c>)
   162fe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16300:	4a97      	ldr	r2, [pc, #604]	; (16560 <main+0x280>)
   16302:	4b98      	ldr	r3, [pc, #608]	; (16564 <main+0x284>)
   16304:	601a      	str	r2, [r3, #0]
	setbuf(stdout, NULL);
   16306:	4d98      	ldr	r5, [pc, #608]	; (16568 <main+0x288>)
   16308:	682b      	ldr	r3, [r5, #0]
   1630a:	6898      	ldr	r0, [r3, #8]
   1630c:	2100      	movs	r1, #0
   1630e:	4c97      	ldr	r4, [pc, #604]	; (1656c <main+0x28c>)
   16310:	47a0      	blx	r4
	setbuf(stdin, NULL);
   16312:	682b      	ldr	r3, [r5, #0]
   16314:	6858      	ldr	r0, [r3, #4]
   16316:	2100      	movs	r1, #0
   16318:	47a0      	blx	r4
	configure_console();
	printf(STRING_HEADER);
   1631a:	4895      	ldr	r0, [pc, #596]	; (16570 <main+0x290>)
   1631c:	4c95      	ldr	r4, [pc, #596]	; (16574 <main+0x294>)
   1631e:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
   16320:	4895      	ldr	r0, [pc, #596]	; (16578 <main+0x298>)
   16322:	47a0      	blx	r4
	printf("ESE516 - Wifi Init Code\r\n");
   16324:	4895      	ldr	r0, [pc, #596]	; (1657c <main+0x29c>)
   16326:	47a0      	blx	r4
	sd_mmc_init();
   16328:	4b95      	ldr	r3, [pc, #596]	; (16580 <main+0x2a0>)
   1632a:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");		
   1632c:	4895      	ldr	r0, [pc, #596]	; (16584 <main+0x2a4>)
   1632e:	47a0      	blx	r4
			status = sd_mmc_test_unit_ready(0);
   16330:	4d95      	ldr	r5, [pc, #596]	; (16588 <main+0x2a8>)
				printf("init_storage: SD Card install failed.\r\n");
   16332:	4c90      	ldr	r4, [pc, #576]	; (16574 <main+0x294>)
			status = sd_mmc_test_unit_ready(0);
   16334:	2000      	movs	r0, #0
   16336:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   16338:	2801      	cmp	r0, #1
   1633a:	d059      	beq.n	163f0 <main+0x110>
		} while (CTRL_GOOD != status);
   1633c:	2800      	cmp	r0, #0
   1633e:	d1f9      	bne.n	16334 <main+0x54>
		printf("init_storage: mounting SD card...\r\n");
   16340:	4892      	ldr	r0, [pc, #584]	; (1658c <main+0x2ac>)
   16342:	4b8c      	ldr	r3, [pc, #560]	; (16574 <main+0x294>)
   16344:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   16346:	4c92      	ldr	r4, [pc, #584]	; (16590 <main+0x2b0>)
   16348:	228c      	movs	r2, #140	; 0x8c
   1634a:	0092      	lsls	r2, r2, #2
   1634c:	2100      	movs	r1, #0
   1634e:	0020      	movs	r0, r4
   16350:	4b90      	ldr	r3, [pc, #576]	; (16594 <main+0x2b4>)
   16352:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16354:	0021      	movs	r1, r4
   16356:	2000      	movs	r0, #0
   16358:	4b8f      	ldr	r3, [pc, #572]	; (16598 <main+0x2b8>)
   1635a:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   1635c:	280b      	cmp	r0, #11
   1635e:	d051      	beq.n	16404 <main+0x124>
		printf("init_storage: SD card mount OK.\r\n");
   16360:	488e      	ldr	r0, [pc, #568]	; (1659c <main+0x2bc>)
   16362:	4b84      	ldr	r3, [pc, #528]	; (16574 <main+0x294>)
   16364:	4798      	blx	r3
		add_state(STORAGE_READY);
   16366:	2001      	movs	r0, #1
   16368:	4b8d      	ldr	r3, [pc, #564]	; (165a0 <main+0x2c0>)
   1636a:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   1636c:	ac03      	add	r4, sp, #12
   1636e:	0020      	movs	r0, r4
   16370:	4b8c      	ldr	r3, [pc, #560]	; (165a4 <main+0x2c4>)
   16372:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   16374:	4d8c      	ldr	r5, [pc, #560]	; (165a8 <main+0x2c8>)
   16376:	0021      	movs	r1, r4
   16378:	0028      	movs	r0, r5
   1637a:	4b8c      	ldr	r3, [pc, #560]	; (165ac <main+0x2cc>)
   1637c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   1637e:	0028      	movs	r0, r5
   16380:	4b8b      	ldr	r3, [pc, #556]	; (165b0 <main+0x2d0>)
   16382:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   16384:	0020      	movs	r0, r4
   16386:	4b8b      	ldr	r3, [pc, #556]	; (165b4 <main+0x2d4>)
   16388:	4798      	blx	r3
	httpc_conf.port = 443;
   1638a:	23bc      	movs	r3, #188	; 0xbc
   1638c:	33ff      	adds	r3, #255	; 0xff
   1638e:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   16390:	3bbb      	subs	r3, #187	; 0xbb
   16392:	3bff      	subs	r3, #255	; 0xff
   16394:	70a3      	strb	r3, [r4, #2]
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16396:	4b88      	ldr	r3, [pc, #544]	; (165b8 <main+0x2d8>)
   16398:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1639a:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1639c:	0021      	movs	r1, r4
   1639e:	4887      	ldr	r0, [pc, #540]	; (165bc <main+0x2dc>)
   163a0:	4b87      	ldr	r3, [pc, #540]	; (165c0 <main+0x2e0>)
   163a2:	4798      	blx	r3
   163a4:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   163a6:	db32      	blt.n	1640e <main+0x12e>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   163a8:	4986      	ldr	r1, [pc, #536]	; (165c4 <main+0x2e4>)
   163aa:	4884      	ldr	r0, [pc, #528]	; (165bc <main+0x2dc>)
   163ac:	4b86      	ldr	r3, [pc, #536]	; (165c8 <main+0x2e8>)
   163ae:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   163b0:	ac03      	add	r4, sp, #12
   163b2:	0020      	movs	r0, r4
   163b4:	4b85      	ldr	r3, [pc, #532]	; (165cc <main+0x2ec>)
   163b6:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   163b8:	4b85      	ldr	r3, [pc, #532]	; (165d0 <main+0x2f0>)
   163ba:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   163bc:	2380      	movs	r3, #128	; 0x80
   163be:	009b      	lsls	r3, r3, #2
   163c0:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   163c2:	4a84      	ldr	r2, [pc, #528]	; (165d4 <main+0x2f4>)
   163c4:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   163c6:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   163c8:	4b83      	ldr	r3, [pc, #524]	; (165d8 <main+0x2f8>)
   163ca:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   163cc:	4b83      	ldr	r3, [pc, #524]	; (165dc <main+0x2fc>)
   163ce:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   163d0:	0021      	movs	r1, r4
   163d2:	4883      	ldr	r0, [pc, #524]	; (165e0 <main+0x300>)
   163d4:	4b83      	ldr	r3, [pc, #524]	; (165e4 <main+0x304>)
   163d6:	4798      	blx	r3
   163d8:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   163da:	db1c      	blt.n	16416 <main+0x136>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   163dc:	4982      	ldr	r1, [pc, #520]	; (165e8 <main+0x308>)
   163de:	4880      	ldr	r0, [pc, #512]	; (165e0 <main+0x300>)
   163e0:	4b82      	ldr	r3, [pc, #520]	; (165ec <main+0x30c>)
   163e2:	4798      	blx	r3
   163e4:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   163e6:	da1a      	bge.n	1641e <main+0x13e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   163e8:	4881      	ldr	r0, [pc, #516]	; (165f0 <main+0x310>)
   163ea:	4b82      	ldr	r3, [pc, #520]	; (165f4 <main+0x314>)
   163ec:	4798      	blx	r3
   163ee:	e7fe      	b.n	163ee <main+0x10e>
				printf("init_storage: SD Card install failed.\r\n");
   163f0:	4881      	ldr	r0, [pc, #516]	; (165f8 <main+0x318>)
   163f2:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   163f4:	4881      	ldr	r0, [pc, #516]	; (165fc <main+0x31c>)
   163f6:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   163f8:	4e81      	ldr	r6, [pc, #516]	; (16600 <main+0x320>)
   163fa:	2000      	movs	r0, #0
   163fc:	47b0      	blx	r6
   163fe:	2802      	cmp	r0, #2
   16400:	d1fb      	bne.n	163fa <main+0x11a>
   16402:	e797      	b.n	16334 <main+0x54>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   16404:	210b      	movs	r1, #11
   16406:	487f      	ldr	r0, [pc, #508]	; (16604 <main+0x324>)
   16408:	4b7a      	ldr	r3, [pc, #488]	; (165f4 <main+0x314>)
   1640a:	4798      	blx	r3
   1640c:	e7ae      	b.n	1636c <main+0x8c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1640e:	487e      	ldr	r0, [pc, #504]	; (16608 <main+0x328>)
   16410:	4b78      	ldr	r3, [pc, #480]	; (165f4 <main+0x314>)
   16412:	4798      	blx	r3
   16414:	e7fe      	b.n	16414 <main+0x134>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   16416:	487d      	ldr	r0, [pc, #500]	; (1660c <main+0x32c>)
   16418:	4b76      	ldr	r3, [pc, #472]	; (165f4 <main+0x314>)
   1641a:	4798      	blx	r3
   1641c:	e7fe      	b.n	1641c <main+0x13c>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
   1641e:	4b7c      	ldr	r3, [pc, #496]	; (16610 <main+0x330>)
   16420:	4798      	blx	r3

	/*Cli init*/
	cli_init(&mqtt_inst);
   16422:	486f      	ldr	r0, [pc, #444]	; (165e0 <main+0x300>)
   16424:	4b7b      	ldr	r3, [pc, #492]	; (16614 <main+0x334>)
   16426:	4798      	blx	r3



	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   16428:	4b7b      	ldr	r3, [pc, #492]	; (16618 <main+0x338>)
   1642a:	4798      	blx	r3
	configure_extint_callbacks();
   1642c:	4b7b      	ldr	r3, [pc, #492]	; (1661c <main+0x33c>)
   1642e:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16430:	2218      	movs	r2, #24
   16432:	2100      	movs	r1, #0
   16434:	a80a      	add	r0, sp, #40	; 0x28
   16436:	4b57      	ldr	r3, [pc, #348]	; (16594 <main+0x2b4>)
   16438:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   1643a:	4b79      	ldr	r3, [pc, #484]	; (16620 <main+0x340>)
   1643c:	930a      	str	r3, [sp, #40]	; 0x28
	ret = m2m_wifi_init(&param);
   1643e:	a80a      	add	r0, sp, #40	; 0x28
   16440:	4b78      	ldr	r3, [pc, #480]	; (16624 <main+0x344>)
   16442:	4798      	blx	r3
   16444:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   16446:	d003      	beq.n	16450 <main+0x170>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16448:	4877      	ldr	r0, [pc, #476]	; (16628 <main+0x348>)
   1644a:	4b6a      	ldr	r3, [pc, #424]	; (165f4 <main+0x314>)
   1644c:	4798      	blx	r3
   1644e:	e7fe      	b.n	1644e <main+0x16e>
   16450:	2000      	movs	r0, #0
   16452:	4b76      	ldr	r3, [pc, #472]	; (1662c <main+0x34c>)
   16454:	4798      	blx	r3
   16456:	4b76      	ldr	r3, [pc, #472]	; (16630 <main+0x350>)
   16458:	7a1b      	ldrb	r3, [r3, #8]
   1645a:	b2db      	uxtb	r3, r3
   1645c:	40d8      	lsrs	r0, r3
		while (1) {
				}
		}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   1645e:	21fa      	movs	r1, #250	; 0xfa
   16460:	0089      	lsls	r1, r1, #2
   16462:	4b74      	ldr	r3, [pc, #464]	; (16634 <main+0x354>)
   16464:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   16466:	3801      	subs	r0, #1
   16468:	4b73      	ldr	r3, [pc, #460]	; (16638 <main+0x358>)
   1646a:	4298      	cmp	r0, r3
   1646c:	d866      	bhi.n	1653c <main+0x25c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   1646e:	4a73      	ldr	r2, [pc, #460]	; (1663c <main+0x35c>)
   16470:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   16472:	4873      	ldr	r0, [pc, #460]	; (16640 <main+0x360>)
   16474:	6a03      	ldr	r3, [r0, #32]
   16476:	021b      	lsls	r3, r3, #8
   16478:	0a1b      	lsrs	r3, r3, #8
   1647a:	21c0      	movs	r1, #192	; 0xc0
   1647c:	0609      	lsls	r1, r1, #24
   1647e:	430b      	orrs	r3, r1
   16480:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   16482:	2300      	movs	r3, #0
   16484:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   16486:	2107      	movs	r1, #7
   16488:	6011      	str	r1, [r2, #0]
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	//DOWNLOAD A FILE
	do_download_flag = false; // might hold off on download for now
   1648a:	4a6e      	ldr	r2, [pc, #440]	; (16644 <main+0x364>)
   1648c:	7013      	strb	r3, [r2, #0]

	/* Initialize socket module. */
	socketInit();
   1648e:	4b6e      	ldr	r3, [pc, #440]	; (16648 <main+0x368>)
   16490:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_event_handler, socket_resolve_handler);//registerSocketCallback(socket_cb, resolve_cb);
   16492:	496e      	ldr	r1, [pc, #440]	; (1664c <main+0x36c>)
   16494:	486e      	ldr	r0, [pc, #440]	; (16650 <main+0x370>)
   16496:	4b6f      	ldr	r3, [pc, #444]	; (16654 <main+0x374>)
   16498:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1649a:	4c6f      	ldr	r4, [pc, #444]	; (16658 <main+0x378>)
   1649c:	0021      	movs	r1, r4
   1649e:	486f      	ldr	r0, [pc, #444]	; (1665c <main+0x37c>)
   164a0:	4b54      	ldr	r3, [pc, #336]	; (165f4 <main+0x314>)
   164a2:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   164a4:	23ff      	movs	r3, #255	; 0xff
   164a6:	9300      	str	r3, [sp, #0]
   164a8:	4b6d      	ldr	r3, [pc, #436]	; (16660 <main+0x380>)
   164aa:	2202      	movs	r2, #2
   164ac:	2112      	movs	r1, #18
   164ae:	0020      	movs	r0, r4
   164b0:	4c6c      	ldr	r4, [pc, #432]	; (16664 <main+0x384>)
   164b2:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   164b4:	4b23      	ldr	r3, [pc, #140]	; (16544 <main+0x264>)

	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   164b6:	781b      	ldrb	r3, [r3, #0]
   164b8:	2232      	movs	r2, #50	; 0x32
   164ba:	421a      	tst	r2, r3
   164bc:	d00c      	beq.n	164d8 <main+0x1f8>
		sw_timer_task(&swt_module_inst);
	}
	
	//temporarily not downloading before program, just downloading after

	printf("main: done.\r\n");
   164be:	486a      	ldr	r0, [pc, #424]	; (16668 <main+0x388>)
   164c0:	4b2c      	ldr	r3, [pc, #176]	; (16574 <main+0x294>)
   164c2:	4798      	blx	r3
	//printf("main2: done.\r\n");

	//Disable socket for HTTP Transfer
	//socketDeinit();

	delay_s(1);
   164c4:	20fa      	movs	r0, #250	; 0xfa
   164c6:	0080      	lsls	r0, r0, #2
   164c8:	4b68      	ldr	r3, [pc, #416]	; (1666c <main+0x38c>)
   164ca:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
   164cc:	2200      	movs	r2, #0
   164ce:	4b5d      	ldr	r3, [pc, #372]	; (16644 <main+0x364>)
   164d0:	701a      	strb	r2, [r3, #0]
	//}


	while (1) {
	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   164d2:	4e67      	ldr	r6, [pc, #412]	; (16670 <main+0x390>)
		sw_timer_task(&swt_module_inst);
   164d4:	4d67      	ldr	r5, [pc, #412]	; (16674 <main+0x394>)
   164d6:	e013      	b.n	16500 <main+0x220>
		m2m_wifi_handle_events(NULL);
   164d8:	4e65      	ldr	r6, [pc, #404]	; (16670 <main+0x390>)
		sw_timer_task(&swt_module_inst);
   164da:	4d33      	ldr	r5, [pc, #204]	; (165a8 <main+0x2c8>)
   164dc:	4c65      	ldr	r4, [pc, #404]	; (16674 <main+0x394>)
		m2m_wifi_handle_events(NULL);
   164de:	2000      	movs	r0, #0
   164e0:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   164e2:	0028      	movs	r0, r5
   164e4:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   164e6:	4b17      	ldr	r3, [pc, #92]	; (16544 <main+0x264>)
	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   164e8:	781b      	ldrb	r3, [r3, #0]
   164ea:	2232      	movs	r2, #50	; 0x32
   164ec:	421a      	tst	r2, r3
   164ee:	d0f6      	beq.n	164de <main+0x1fe>
   164f0:	e7e5      	b.n	164be <main+0x1de>
			//mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, mqtt_msg1, strlen(mqtt_msg1), 2, 0);
			//otafu();
			isPressed = false;
		}
		ReadIntoBuffer(); 
   164f2:	4b61      	ldr	r3, [pc, #388]	; (16678 <main+0x398>)
   164f4:	4798      	blx	r3
		//Handle MQTT messages
			if(mqtt_inst.isConnected)
   164f6:	2334      	movs	r3, #52	; 0x34
   164f8:	4a39      	ldr	r2, [pc, #228]	; (165e0 <main+0x300>)
   164fa:	5cd3      	ldrb	r3, [r2, r3]
   164fc:	2b00      	cmp	r3, #0
   164fe:	d118      	bne.n	16532 <main+0x252>
		m2m_wifi_handle_events(NULL);
   16500:	2000      	movs	r0, #0
   16502:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16504:	4828      	ldr	r0, [pc, #160]	; (165a8 <main+0x2c8>)
   16506:	47a8      	blx	r5
		if(isPressed)
   16508:	4b5c      	ldr	r3, [pc, #368]	; (1667c <main+0x39c>)
   1650a:	781b      	ldrb	r3, [r3, #0]
   1650c:	2b00      	cmp	r3, #0
   1650e:	d0f0      	beq.n	164f2 <main+0x212>
			mqtt_publish(&mqtt_inst, BATTERY_TOPIC, mqtt_msg1, strlen(mqtt_msg1), 2, 0);
   16510:	4f5b      	ldr	r7, [pc, #364]	; (16680 <main+0x3a0>)
   16512:	0038      	movs	r0, r7
   16514:	4b5b      	ldr	r3, [pc, #364]	; (16684 <main+0x3a4>)
   16516:	4798      	blx	r3
   16518:	0003      	movs	r3, r0
   1651a:	2400      	movs	r4, #0
   1651c:	9401      	str	r4, [sp, #4]
   1651e:	2202      	movs	r2, #2
   16520:	9200      	str	r2, [sp, #0]
   16522:	003a      	movs	r2, r7
   16524:	4958      	ldr	r1, [pc, #352]	; (16688 <main+0x3a8>)
   16526:	482e      	ldr	r0, [pc, #184]	; (165e0 <main+0x300>)
   16528:	4f58      	ldr	r7, [pc, #352]	; (1668c <main+0x3ac>)
   1652a:	47b8      	blx	r7
			isPressed = false;
   1652c:	4b53      	ldr	r3, [pc, #332]	; (1667c <main+0x39c>)
   1652e:	701c      	strb	r4, [r3, #0]
   16530:	e7df      	b.n	164f2 <main+0x212>
			mqtt_yield(&mqtt_inst, 100);
   16532:	2164      	movs	r1, #100	; 0x64
   16534:	0010      	movs	r0, r2
   16536:	4b56      	ldr	r3, [pc, #344]	; (16690 <main+0x3b0>)
   16538:	4798      	blx	r3
   1653a:	e7e1      	b.n	16500 <main+0x220>
		puts("ERR>> Systick configuration error\r\n");
   1653c:	4855      	ldr	r0, [pc, #340]	; (16694 <main+0x3b4>)
   1653e:	4b0d      	ldr	r3, [pc, #52]	; (16574 <main+0x294>)
   16540:	4798      	blx	r3
   16542:	e7fe      	b.n	16542 <main+0x262>
   16544:	20000785 	.word	0x20000785
   16548:	00011885 	.word	0x00011885
   1654c:	0000b555 	.word	0x0000b555
   16550:	0000b74d 	.word	0x0000b74d
   16554:	200014d0 	.word	0x200014d0
   16558:	00015e1d 	.word	0x00015e1d
   1655c:	200014cc 	.word	0x200014cc
   16560:	00015df1 	.word	0x00015df1
   16564:	200014c8 	.word	0x200014c8
   16568:	200001f0 	.word	0x200001f0
   1656c:	00016d35 	.word	0x00016d35
   16570:	00019bac 	.word	0x00019bac
   16574:	00016cfd 	.word	0x00016cfd
   16578:	00019c18 	.word	0x00019c18
   1657c:	00019c54 	.word	0x00019c54
   16580:	0000b879 	.word	0x0000b879
   16584:	00019c70 	.word	0x00019c70
   16588:	0000bfad 	.word	0x0000bfad
   1658c:	00019d00 	.word	0x00019d00
   16590:	20000788 	.word	0x20000788
   16594:	00016a7f 	.word	0x00016a7f
   16598:	000136b5 	.word	0x000136b5
   1659c:	00019d54 	.word	0x00019d54
   165a0:	00015c69 	.word	0x00015c69
   165a4:	00015b0d 	.word	0x00015b0d
   165a8:	200014e8 	.word	0x200014e8
   165ac:	00015b19 	.word	0x00015b19
   165b0:	00015bc5 	.word	0x00015bc5
   165b4:	000151f1 	.word	0x000151f1
   165b8:	000005a6 	.word	0x000005a6
   165bc:	20001540 	.word	0x20001540
   165c0:	00015219 	.word	0x00015219
   165c4:	00016095 	.word	0x00016095
   165c8:	000152cd 	.word	0x000152cd
   165cc:	00014739 	.word	0x00014739
   165d0:	20000a1c 	.word	0x20000a1c
   165d4:	20000c1c 	.word	0x20000c1c
   165d8:	00004346 	.word	0x00004346
   165dc:	00001770 	.word	0x00001770
   165e0:	200009e4 	.word	0x200009e4
   165e4:	00014681 	.word	0x00014681
   165e8:	00015f95 	.word	0x00015f95
   165ec:	00014755 	.word	0x00014755
   165f0:	00019df4 	.word	0x00019df4
   165f4:	00016be1 	.word	0x00016be1
   165f8:	00019ca8 	.word	0x00019ca8
   165fc:	00019cd0 	.word	0x00019cd0
   16600:	0000b899 	.word	0x0000b899
   16604:	00019d24 	.word	0x00019d24
   16608:	00019d78 	.word	0x00019d78
   1660c:	00019dc0 	.word	0x00019dc0
   16610:	0000c891 	.word	0x0000c891
   16614:	0000b4e5 	.word	0x0000b4e5
   16618:	0001628d 	.word	0x0001628d
   1661c:	000162bd 	.word	0x000162bd
   16620:	00016189 	.word	0x00016189
   16624:	0000d80d 	.word	0x0000d80d
   16628:	00019e28 	.word	0x00019e28
   1662c:	00011641 	.word	0x00011641
   16630:	40000400 	.word	0x40000400
   16634:	00016699 	.word	0x00016699
   16638:	00ffffff 	.word	0x00ffffff
   1663c:	e000e010 	.word	0xe000e010
   16640:	e000ed00 	.word	0xe000ed00
   16644:	20000784 	.word	0x20000784
   16648:	0000f435 	.word	0x0000f435
   1664c:	00015d41 	.word	0x00015d41
   16650:	00015d4d 	.word	0x00015d4d
   16654:	0000f479 	.word	0x0000f479
   16658:	0001a2e8 	.word	0x0001a2e8
   1665c:	00019e54 	.word	0x00019e54
   16660:	0001a2d8 	.word	0x0001a2d8
   16664:	0000dbdd 	.word	0x0000dbdd
   16668:	00019e78 	.word	0x00019e78
   1666c:	0000c851 	.word	0x0000c851
   16670:	0000d941 	.word	0x0000d941
   16674:	00015c11 	.word	0x00015c11
   16678:	0000b439 	.word	0x0000b439
   1667c:	200009e0 	.word	0x200009e0
   16680:	200000b0 	.word	0x200000b0
   16684:	00016fdf 	.word	0x00016fdf
   16688:	00018314 	.word	0x00018314
   1668c:	00014871 	.word	0x00014871
   16690:	000148d1 	.word	0x000148d1
   16694:	00019e88 	.word	0x00019e88

00016698 <__udivsi3>:
   16698:	2200      	movs	r2, #0
   1669a:	0843      	lsrs	r3, r0, #1
   1669c:	428b      	cmp	r3, r1
   1669e:	d374      	bcc.n	1678a <__udivsi3+0xf2>
   166a0:	0903      	lsrs	r3, r0, #4
   166a2:	428b      	cmp	r3, r1
   166a4:	d35f      	bcc.n	16766 <__udivsi3+0xce>
   166a6:	0a03      	lsrs	r3, r0, #8
   166a8:	428b      	cmp	r3, r1
   166aa:	d344      	bcc.n	16736 <__udivsi3+0x9e>
   166ac:	0b03      	lsrs	r3, r0, #12
   166ae:	428b      	cmp	r3, r1
   166b0:	d328      	bcc.n	16704 <__udivsi3+0x6c>
   166b2:	0c03      	lsrs	r3, r0, #16
   166b4:	428b      	cmp	r3, r1
   166b6:	d30d      	bcc.n	166d4 <__udivsi3+0x3c>
   166b8:	22ff      	movs	r2, #255	; 0xff
   166ba:	0209      	lsls	r1, r1, #8
   166bc:	ba12      	rev	r2, r2
   166be:	0c03      	lsrs	r3, r0, #16
   166c0:	428b      	cmp	r3, r1
   166c2:	d302      	bcc.n	166ca <__udivsi3+0x32>
   166c4:	1212      	asrs	r2, r2, #8
   166c6:	0209      	lsls	r1, r1, #8
   166c8:	d065      	beq.n	16796 <__udivsi3+0xfe>
   166ca:	0b03      	lsrs	r3, r0, #12
   166cc:	428b      	cmp	r3, r1
   166ce:	d319      	bcc.n	16704 <__udivsi3+0x6c>
   166d0:	e000      	b.n	166d4 <__udivsi3+0x3c>
   166d2:	0a09      	lsrs	r1, r1, #8
   166d4:	0bc3      	lsrs	r3, r0, #15
   166d6:	428b      	cmp	r3, r1
   166d8:	d301      	bcc.n	166de <__udivsi3+0x46>
   166da:	03cb      	lsls	r3, r1, #15
   166dc:	1ac0      	subs	r0, r0, r3
   166de:	4152      	adcs	r2, r2
   166e0:	0b83      	lsrs	r3, r0, #14
   166e2:	428b      	cmp	r3, r1
   166e4:	d301      	bcc.n	166ea <__udivsi3+0x52>
   166e6:	038b      	lsls	r3, r1, #14
   166e8:	1ac0      	subs	r0, r0, r3
   166ea:	4152      	adcs	r2, r2
   166ec:	0b43      	lsrs	r3, r0, #13
   166ee:	428b      	cmp	r3, r1
   166f0:	d301      	bcc.n	166f6 <__udivsi3+0x5e>
   166f2:	034b      	lsls	r3, r1, #13
   166f4:	1ac0      	subs	r0, r0, r3
   166f6:	4152      	adcs	r2, r2
   166f8:	0b03      	lsrs	r3, r0, #12
   166fa:	428b      	cmp	r3, r1
   166fc:	d301      	bcc.n	16702 <__udivsi3+0x6a>
   166fe:	030b      	lsls	r3, r1, #12
   16700:	1ac0      	subs	r0, r0, r3
   16702:	4152      	adcs	r2, r2
   16704:	0ac3      	lsrs	r3, r0, #11
   16706:	428b      	cmp	r3, r1
   16708:	d301      	bcc.n	1670e <__udivsi3+0x76>
   1670a:	02cb      	lsls	r3, r1, #11
   1670c:	1ac0      	subs	r0, r0, r3
   1670e:	4152      	adcs	r2, r2
   16710:	0a83      	lsrs	r3, r0, #10
   16712:	428b      	cmp	r3, r1
   16714:	d301      	bcc.n	1671a <__udivsi3+0x82>
   16716:	028b      	lsls	r3, r1, #10
   16718:	1ac0      	subs	r0, r0, r3
   1671a:	4152      	adcs	r2, r2
   1671c:	0a43      	lsrs	r3, r0, #9
   1671e:	428b      	cmp	r3, r1
   16720:	d301      	bcc.n	16726 <__udivsi3+0x8e>
   16722:	024b      	lsls	r3, r1, #9
   16724:	1ac0      	subs	r0, r0, r3
   16726:	4152      	adcs	r2, r2
   16728:	0a03      	lsrs	r3, r0, #8
   1672a:	428b      	cmp	r3, r1
   1672c:	d301      	bcc.n	16732 <__udivsi3+0x9a>
   1672e:	020b      	lsls	r3, r1, #8
   16730:	1ac0      	subs	r0, r0, r3
   16732:	4152      	adcs	r2, r2
   16734:	d2cd      	bcs.n	166d2 <__udivsi3+0x3a>
   16736:	09c3      	lsrs	r3, r0, #7
   16738:	428b      	cmp	r3, r1
   1673a:	d301      	bcc.n	16740 <__udivsi3+0xa8>
   1673c:	01cb      	lsls	r3, r1, #7
   1673e:	1ac0      	subs	r0, r0, r3
   16740:	4152      	adcs	r2, r2
   16742:	0983      	lsrs	r3, r0, #6
   16744:	428b      	cmp	r3, r1
   16746:	d301      	bcc.n	1674c <__udivsi3+0xb4>
   16748:	018b      	lsls	r3, r1, #6
   1674a:	1ac0      	subs	r0, r0, r3
   1674c:	4152      	adcs	r2, r2
   1674e:	0943      	lsrs	r3, r0, #5
   16750:	428b      	cmp	r3, r1
   16752:	d301      	bcc.n	16758 <__udivsi3+0xc0>
   16754:	014b      	lsls	r3, r1, #5
   16756:	1ac0      	subs	r0, r0, r3
   16758:	4152      	adcs	r2, r2
   1675a:	0903      	lsrs	r3, r0, #4
   1675c:	428b      	cmp	r3, r1
   1675e:	d301      	bcc.n	16764 <__udivsi3+0xcc>
   16760:	010b      	lsls	r3, r1, #4
   16762:	1ac0      	subs	r0, r0, r3
   16764:	4152      	adcs	r2, r2
   16766:	08c3      	lsrs	r3, r0, #3
   16768:	428b      	cmp	r3, r1
   1676a:	d301      	bcc.n	16770 <__udivsi3+0xd8>
   1676c:	00cb      	lsls	r3, r1, #3
   1676e:	1ac0      	subs	r0, r0, r3
   16770:	4152      	adcs	r2, r2
   16772:	0883      	lsrs	r3, r0, #2
   16774:	428b      	cmp	r3, r1
   16776:	d301      	bcc.n	1677c <__udivsi3+0xe4>
   16778:	008b      	lsls	r3, r1, #2
   1677a:	1ac0      	subs	r0, r0, r3
   1677c:	4152      	adcs	r2, r2
   1677e:	0843      	lsrs	r3, r0, #1
   16780:	428b      	cmp	r3, r1
   16782:	d301      	bcc.n	16788 <__udivsi3+0xf0>
   16784:	004b      	lsls	r3, r1, #1
   16786:	1ac0      	subs	r0, r0, r3
   16788:	4152      	adcs	r2, r2
   1678a:	1a41      	subs	r1, r0, r1
   1678c:	d200      	bcs.n	16790 <__udivsi3+0xf8>
   1678e:	4601      	mov	r1, r0
   16790:	4152      	adcs	r2, r2
   16792:	4610      	mov	r0, r2
   16794:	4770      	bx	lr
   16796:	e7ff      	b.n	16798 <__udivsi3+0x100>
   16798:	b501      	push	{r0, lr}
   1679a:	2000      	movs	r0, #0
   1679c:	f000 f8f0 	bl	16980 <__aeabi_idiv0>
   167a0:	bd02      	pop	{r1, pc}
   167a2:	46c0      	nop			; (mov r8, r8)

000167a4 <__aeabi_uidivmod>:
   167a4:	2900      	cmp	r1, #0
   167a6:	d0f7      	beq.n	16798 <__udivsi3+0x100>
   167a8:	e776      	b.n	16698 <__udivsi3>
   167aa:	4770      	bx	lr

000167ac <__divsi3>:
   167ac:	4603      	mov	r3, r0
   167ae:	430b      	orrs	r3, r1
   167b0:	d47f      	bmi.n	168b2 <__divsi3+0x106>
   167b2:	2200      	movs	r2, #0
   167b4:	0843      	lsrs	r3, r0, #1
   167b6:	428b      	cmp	r3, r1
   167b8:	d374      	bcc.n	168a4 <__divsi3+0xf8>
   167ba:	0903      	lsrs	r3, r0, #4
   167bc:	428b      	cmp	r3, r1
   167be:	d35f      	bcc.n	16880 <__divsi3+0xd4>
   167c0:	0a03      	lsrs	r3, r0, #8
   167c2:	428b      	cmp	r3, r1
   167c4:	d344      	bcc.n	16850 <__divsi3+0xa4>
   167c6:	0b03      	lsrs	r3, r0, #12
   167c8:	428b      	cmp	r3, r1
   167ca:	d328      	bcc.n	1681e <__divsi3+0x72>
   167cc:	0c03      	lsrs	r3, r0, #16
   167ce:	428b      	cmp	r3, r1
   167d0:	d30d      	bcc.n	167ee <__divsi3+0x42>
   167d2:	22ff      	movs	r2, #255	; 0xff
   167d4:	0209      	lsls	r1, r1, #8
   167d6:	ba12      	rev	r2, r2
   167d8:	0c03      	lsrs	r3, r0, #16
   167da:	428b      	cmp	r3, r1
   167dc:	d302      	bcc.n	167e4 <__divsi3+0x38>
   167de:	1212      	asrs	r2, r2, #8
   167e0:	0209      	lsls	r1, r1, #8
   167e2:	d065      	beq.n	168b0 <__divsi3+0x104>
   167e4:	0b03      	lsrs	r3, r0, #12
   167e6:	428b      	cmp	r3, r1
   167e8:	d319      	bcc.n	1681e <__divsi3+0x72>
   167ea:	e000      	b.n	167ee <__divsi3+0x42>
   167ec:	0a09      	lsrs	r1, r1, #8
   167ee:	0bc3      	lsrs	r3, r0, #15
   167f0:	428b      	cmp	r3, r1
   167f2:	d301      	bcc.n	167f8 <__divsi3+0x4c>
   167f4:	03cb      	lsls	r3, r1, #15
   167f6:	1ac0      	subs	r0, r0, r3
   167f8:	4152      	adcs	r2, r2
   167fa:	0b83      	lsrs	r3, r0, #14
   167fc:	428b      	cmp	r3, r1
   167fe:	d301      	bcc.n	16804 <__divsi3+0x58>
   16800:	038b      	lsls	r3, r1, #14
   16802:	1ac0      	subs	r0, r0, r3
   16804:	4152      	adcs	r2, r2
   16806:	0b43      	lsrs	r3, r0, #13
   16808:	428b      	cmp	r3, r1
   1680a:	d301      	bcc.n	16810 <__divsi3+0x64>
   1680c:	034b      	lsls	r3, r1, #13
   1680e:	1ac0      	subs	r0, r0, r3
   16810:	4152      	adcs	r2, r2
   16812:	0b03      	lsrs	r3, r0, #12
   16814:	428b      	cmp	r3, r1
   16816:	d301      	bcc.n	1681c <__divsi3+0x70>
   16818:	030b      	lsls	r3, r1, #12
   1681a:	1ac0      	subs	r0, r0, r3
   1681c:	4152      	adcs	r2, r2
   1681e:	0ac3      	lsrs	r3, r0, #11
   16820:	428b      	cmp	r3, r1
   16822:	d301      	bcc.n	16828 <__divsi3+0x7c>
   16824:	02cb      	lsls	r3, r1, #11
   16826:	1ac0      	subs	r0, r0, r3
   16828:	4152      	adcs	r2, r2
   1682a:	0a83      	lsrs	r3, r0, #10
   1682c:	428b      	cmp	r3, r1
   1682e:	d301      	bcc.n	16834 <__divsi3+0x88>
   16830:	028b      	lsls	r3, r1, #10
   16832:	1ac0      	subs	r0, r0, r3
   16834:	4152      	adcs	r2, r2
   16836:	0a43      	lsrs	r3, r0, #9
   16838:	428b      	cmp	r3, r1
   1683a:	d301      	bcc.n	16840 <__divsi3+0x94>
   1683c:	024b      	lsls	r3, r1, #9
   1683e:	1ac0      	subs	r0, r0, r3
   16840:	4152      	adcs	r2, r2
   16842:	0a03      	lsrs	r3, r0, #8
   16844:	428b      	cmp	r3, r1
   16846:	d301      	bcc.n	1684c <__divsi3+0xa0>
   16848:	020b      	lsls	r3, r1, #8
   1684a:	1ac0      	subs	r0, r0, r3
   1684c:	4152      	adcs	r2, r2
   1684e:	d2cd      	bcs.n	167ec <__divsi3+0x40>
   16850:	09c3      	lsrs	r3, r0, #7
   16852:	428b      	cmp	r3, r1
   16854:	d301      	bcc.n	1685a <__divsi3+0xae>
   16856:	01cb      	lsls	r3, r1, #7
   16858:	1ac0      	subs	r0, r0, r3
   1685a:	4152      	adcs	r2, r2
   1685c:	0983      	lsrs	r3, r0, #6
   1685e:	428b      	cmp	r3, r1
   16860:	d301      	bcc.n	16866 <__divsi3+0xba>
   16862:	018b      	lsls	r3, r1, #6
   16864:	1ac0      	subs	r0, r0, r3
   16866:	4152      	adcs	r2, r2
   16868:	0943      	lsrs	r3, r0, #5
   1686a:	428b      	cmp	r3, r1
   1686c:	d301      	bcc.n	16872 <__divsi3+0xc6>
   1686e:	014b      	lsls	r3, r1, #5
   16870:	1ac0      	subs	r0, r0, r3
   16872:	4152      	adcs	r2, r2
   16874:	0903      	lsrs	r3, r0, #4
   16876:	428b      	cmp	r3, r1
   16878:	d301      	bcc.n	1687e <__divsi3+0xd2>
   1687a:	010b      	lsls	r3, r1, #4
   1687c:	1ac0      	subs	r0, r0, r3
   1687e:	4152      	adcs	r2, r2
   16880:	08c3      	lsrs	r3, r0, #3
   16882:	428b      	cmp	r3, r1
   16884:	d301      	bcc.n	1688a <__divsi3+0xde>
   16886:	00cb      	lsls	r3, r1, #3
   16888:	1ac0      	subs	r0, r0, r3
   1688a:	4152      	adcs	r2, r2
   1688c:	0883      	lsrs	r3, r0, #2
   1688e:	428b      	cmp	r3, r1
   16890:	d301      	bcc.n	16896 <__divsi3+0xea>
   16892:	008b      	lsls	r3, r1, #2
   16894:	1ac0      	subs	r0, r0, r3
   16896:	4152      	adcs	r2, r2
   16898:	0843      	lsrs	r3, r0, #1
   1689a:	428b      	cmp	r3, r1
   1689c:	d301      	bcc.n	168a2 <__divsi3+0xf6>
   1689e:	004b      	lsls	r3, r1, #1
   168a0:	1ac0      	subs	r0, r0, r3
   168a2:	4152      	adcs	r2, r2
   168a4:	1a41      	subs	r1, r0, r1
   168a6:	d200      	bcs.n	168aa <__divsi3+0xfe>
   168a8:	4601      	mov	r1, r0
   168aa:	4152      	adcs	r2, r2
   168ac:	4610      	mov	r0, r2
   168ae:	4770      	bx	lr
   168b0:	e05d      	b.n	1696e <__divsi3+0x1c2>
   168b2:	0fca      	lsrs	r2, r1, #31
   168b4:	d000      	beq.n	168b8 <__divsi3+0x10c>
   168b6:	4249      	negs	r1, r1
   168b8:	1003      	asrs	r3, r0, #32
   168ba:	d300      	bcc.n	168be <__divsi3+0x112>
   168bc:	4240      	negs	r0, r0
   168be:	4053      	eors	r3, r2
   168c0:	2200      	movs	r2, #0
   168c2:	469c      	mov	ip, r3
   168c4:	0903      	lsrs	r3, r0, #4
   168c6:	428b      	cmp	r3, r1
   168c8:	d32d      	bcc.n	16926 <__divsi3+0x17a>
   168ca:	0a03      	lsrs	r3, r0, #8
   168cc:	428b      	cmp	r3, r1
   168ce:	d312      	bcc.n	168f6 <__divsi3+0x14a>
   168d0:	22fc      	movs	r2, #252	; 0xfc
   168d2:	0189      	lsls	r1, r1, #6
   168d4:	ba12      	rev	r2, r2
   168d6:	0a03      	lsrs	r3, r0, #8
   168d8:	428b      	cmp	r3, r1
   168da:	d30c      	bcc.n	168f6 <__divsi3+0x14a>
   168dc:	0189      	lsls	r1, r1, #6
   168de:	1192      	asrs	r2, r2, #6
   168e0:	428b      	cmp	r3, r1
   168e2:	d308      	bcc.n	168f6 <__divsi3+0x14a>
   168e4:	0189      	lsls	r1, r1, #6
   168e6:	1192      	asrs	r2, r2, #6
   168e8:	428b      	cmp	r3, r1
   168ea:	d304      	bcc.n	168f6 <__divsi3+0x14a>
   168ec:	0189      	lsls	r1, r1, #6
   168ee:	d03a      	beq.n	16966 <__divsi3+0x1ba>
   168f0:	1192      	asrs	r2, r2, #6
   168f2:	e000      	b.n	168f6 <__divsi3+0x14a>
   168f4:	0989      	lsrs	r1, r1, #6
   168f6:	09c3      	lsrs	r3, r0, #7
   168f8:	428b      	cmp	r3, r1
   168fa:	d301      	bcc.n	16900 <__divsi3+0x154>
   168fc:	01cb      	lsls	r3, r1, #7
   168fe:	1ac0      	subs	r0, r0, r3
   16900:	4152      	adcs	r2, r2
   16902:	0983      	lsrs	r3, r0, #6
   16904:	428b      	cmp	r3, r1
   16906:	d301      	bcc.n	1690c <__divsi3+0x160>
   16908:	018b      	lsls	r3, r1, #6
   1690a:	1ac0      	subs	r0, r0, r3
   1690c:	4152      	adcs	r2, r2
   1690e:	0943      	lsrs	r3, r0, #5
   16910:	428b      	cmp	r3, r1
   16912:	d301      	bcc.n	16918 <__divsi3+0x16c>
   16914:	014b      	lsls	r3, r1, #5
   16916:	1ac0      	subs	r0, r0, r3
   16918:	4152      	adcs	r2, r2
   1691a:	0903      	lsrs	r3, r0, #4
   1691c:	428b      	cmp	r3, r1
   1691e:	d301      	bcc.n	16924 <__divsi3+0x178>
   16920:	010b      	lsls	r3, r1, #4
   16922:	1ac0      	subs	r0, r0, r3
   16924:	4152      	adcs	r2, r2
   16926:	08c3      	lsrs	r3, r0, #3
   16928:	428b      	cmp	r3, r1
   1692a:	d301      	bcc.n	16930 <__divsi3+0x184>
   1692c:	00cb      	lsls	r3, r1, #3
   1692e:	1ac0      	subs	r0, r0, r3
   16930:	4152      	adcs	r2, r2
   16932:	0883      	lsrs	r3, r0, #2
   16934:	428b      	cmp	r3, r1
   16936:	d301      	bcc.n	1693c <__divsi3+0x190>
   16938:	008b      	lsls	r3, r1, #2
   1693a:	1ac0      	subs	r0, r0, r3
   1693c:	4152      	adcs	r2, r2
   1693e:	d2d9      	bcs.n	168f4 <__divsi3+0x148>
   16940:	0843      	lsrs	r3, r0, #1
   16942:	428b      	cmp	r3, r1
   16944:	d301      	bcc.n	1694a <__divsi3+0x19e>
   16946:	004b      	lsls	r3, r1, #1
   16948:	1ac0      	subs	r0, r0, r3
   1694a:	4152      	adcs	r2, r2
   1694c:	1a41      	subs	r1, r0, r1
   1694e:	d200      	bcs.n	16952 <__divsi3+0x1a6>
   16950:	4601      	mov	r1, r0
   16952:	4663      	mov	r3, ip
   16954:	4152      	adcs	r2, r2
   16956:	105b      	asrs	r3, r3, #1
   16958:	4610      	mov	r0, r2
   1695a:	d301      	bcc.n	16960 <__divsi3+0x1b4>
   1695c:	4240      	negs	r0, r0
   1695e:	2b00      	cmp	r3, #0
   16960:	d500      	bpl.n	16964 <__divsi3+0x1b8>
   16962:	4249      	negs	r1, r1
   16964:	4770      	bx	lr
   16966:	4663      	mov	r3, ip
   16968:	105b      	asrs	r3, r3, #1
   1696a:	d300      	bcc.n	1696e <__divsi3+0x1c2>
   1696c:	4240      	negs	r0, r0
   1696e:	b501      	push	{r0, lr}
   16970:	2000      	movs	r0, #0
   16972:	f000 f805 	bl	16980 <__aeabi_idiv0>
   16976:	bd02      	pop	{r1, pc}

00016978 <__aeabi_idivmod>:
   16978:	2900      	cmp	r1, #0
   1697a:	d0f8      	beq.n	1696e <__divsi3+0x1c2>
   1697c:	e716      	b.n	167ac <__divsi3>
   1697e:	4770      	bx	lr

00016980 <__aeabi_idiv0>:
   16980:	4770      	bx	lr
   16982:	46c0      	nop			; (mov r8, r8)

00016984 <__aeabi_lmul>:
   16984:	b5f0      	push	{r4, r5, r6, r7, lr}
   16986:	46ce      	mov	lr, r9
   16988:	4647      	mov	r7, r8
   1698a:	0415      	lsls	r5, r2, #16
   1698c:	0c2d      	lsrs	r5, r5, #16
   1698e:	002e      	movs	r6, r5
   16990:	b580      	push	{r7, lr}
   16992:	0407      	lsls	r7, r0, #16
   16994:	0c14      	lsrs	r4, r2, #16
   16996:	0c3f      	lsrs	r7, r7, #16
   16998:	4699      	mov	r9, r3
   1699a:	0c03      	lsrs	r3, r0, #16
   1699c:	437e      	muls	r6, r7
   1699e:	435d      	muls	r5, r3
   169a0:	4367      	muls	r7, r4
   169a2:	4363      	muls	r3, r4
   169a4:	197f      	adds	r7, r7, r5
   169a6:	0c34      	lsrs	r4, r6, #16
   169a8:	19e4      	adds	r4, r4, r7
   169aa:	469c      	mov	ip, r3
   169ac:	42a5      	cmp	r5, r4
   169ae:	d903      	bls.n	169b8 <__aeabi_lmul+0x34>
   169b0:	2380      	movs	r3, #128	; 0x80
   169b2:	025b      	lsls	r3, r3, #9
   169b4:	4698      	mov	r8, r3
   169b6:	44c4      	add	ip, r8
   169b8:	464b      	mov	r3, r9
   169ba:	4351      	muls	r1, r2
   169bc:	4343      	muls	r3, r0
   169be:	0436      	lsls	r6, r6, #16
   169c0:	0c36      	lsrs	r6, r6, #16
   169c2:	0c25      	lsrs	r5, r4, #16
   169c4:	0424      	lsls	r4, r4, #16
   169c6:	4465      	add	r5, ip
   169c8:	19a4      	adds	r4, r4, r6
   169ca:	1859      	adds	r1, r3, r1
   169cc:	1949      	adds	r1, r1, r5
   169ce:	0020      	movs	r0, r4
   169d0:	bc0c      	pop	{r2, r3}
   169d2:	4690      	mov	r8, r2
   169d4:	4699      	mov	r9, r3
   169d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000169d8 <__libc_init_array>:
   169d8:	b570      	push	{r4, r5, r6, lr}
   169da:	2600      	movs	r6, #0
   169dc:	4d0c      	ldr	r5, [pc, #48]	; (16a10 <__libc_init_array+0x38>)
   169de:	4c0d      	ldr	r4, [pc, #52]	; (16a14 <__libc_init_array+0x3c>)
   169e0:	1b64      	subs	r4, r4, r5
   169e2:	10a4      	asrs	r4, r4, #2
   169e4:	42a6      	cmp	r6, r4
   169e6:	d109      	bne.n	169fc <__libc_init_array+0x24>
   169e8:	2600      	movs	r6, #0
   169ea:	f003 fcf9 	bl	1a3e0 <_init>
   169ee:	4d0a      	ldr	r5, [pc, #40]	; (16a18 <__libc_init_array+0x40>)
   169f0:	4c0a      	ldr	r4, [pc, #40]	; (16a1c <__libc_init_array+0x44>)
   169f2:	1b64      	subs	r4, r4, r5
   169f4:	10a4      	asrs	r4, r4, #2
   169f6:	42a6      	cmp	r6, r4
   169f8:	d105      	bne.n	16a06 <__libc_init_array+0x2e>
   169fa:	bd70      	pop	{r4, r5, r6, pc}
   169fc:	00b3      	lsls	r3, r6, #2
   169fe:	58eb      	ldr	r3, [r5, r3]
   16a00:	4798      	blx	r3
   16a02:	3601      	adds	r6, #1
   16a04:	e7ee      	b.n	169e4 <__libc_init_array+0xc>
   16a06:	00b3      	lsls	r3, r6, #2
   16a08:	58eb      	ldr	r3, [r5, r3]
   16a0a:	4798      	blx	r3
   16a0c:	3601      	adds	r6, #1
   16a0e:	e7f2      	b.n	169f6 <__libc_init_array+0x1e>
   16a10:	0001a3ec 	.word	0x0001a3ec
   16a14:	0001a3ec 	.word	0x0001a3ec
   16a18:	0001a3ec 	.word	0x0001a3ec
   16a1c:	0001a3f0 	.word	0x0001a3f0

00016a20 <malloc>:
   16a20:	b510      	push	{r4, lr}
   16a22:	4b03      	ldr	r3, [pc, #12]	; (16a30 <malloc+0x10>)
   16a24:	0001      	movs	r1, r0
   16a26:	6818      	ldr	r0, [r3, #0]
   16a28:	f000 f87c 	bl	16b24 <_malloc_r>
   16a2c:	bd10      	pop	{r4, pc}
   16a2e:	46c0      	nop			; (mov r8, r8)
   16a30:	200001f0 	.word	0x200001f0

00016a34 <free>:
   16a34:	b510      	push	{r4, lr}
   16a36:	4b03      	ldr	r3, [pc, #12]	; (16a44 <free+0x10>)
   16a38:	0001      	movs	r1, r0
   16a3a:	6818      	ldr	r0, [r3, #0]
   16a3c:	f000 f828 	bl	16a90 <_free_r>
   16a40:	bd10      	pop	{r4, pc}
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	200001f0 	.word	0x200001f0

00016a48 <memcpy>:
   16a48:	2300      	movs	r3, #0
   16a4a:	b510      	push	{r4, lr}
   16a4c:	429a      	cmp	r2, r3
   16a4e:	d100      	bne.n	16a52 <memcpy+0xa>
   16a50:	bd10      	pop	{r4, pc}
   16a52:	5ccc      	ldrb	r4, [r1, r3]
   16a54:	54c4      	strb	r4, [r0, r3]
   16a56:	3301      	adds	r3, #1
   16a58:	e7f8      	b.n	16a4c <memcpy+0x4>

00016a5a <memmove>:
   16a5a:	b510      	push	{r4, lr}
   16a5c:	4288      	cmp	r0, r1
   16a5e:	d902      	bls.n	16a66 <memmove+0xc>
   16a60:	188b      	adds	r3, r1, r2
   16a62:	4298      	cmp	r0, r3
   16a64:	d308      	bcc.n	16a78 <memmove+0x1e>
   16a66:	2300      	movs	r3, #0
   16a68:	429a      	cmp	r2, r3
   16a6a:	d007      	beq.n	16a7c <memmove+0x22>
   16a6c:	5ccc      	ldrb	r4, [r1, r3]
   16a6e:	54c4      	strb	r4, [r0, r3]
   16a70:	3301      	adds	r3, #1
   16a72:	e7f9      	b.n	16a68 <memmove+0xe>
   16a74:	5c8b      	ldrb	r3, [r1, r2]
   16a76:	5483      	strb	r3, [r0, r2]
   16a78:	3a01      	subs	r2, #1
   16a7a:	d2fb      	bcs.n	16a74 <memmove+0x1a>
   16a7c:	bd10      	pop	{r4, pc}

00016a7e <memset>:
   16a7e:	0003      	movs	r3, r0
   16a80:	1882      	adds	r2, r0, r2
   16a82:	4293      	cmp	r3, r2
   16a84:	d100      	bne.n	16a88 <memset+0xa>
   16a86:	4770      	bx	lr
   16a88:	7019      	strb	r1, [r3, #0]
   16a8a:	3301      	adds	r3, #1
   16a8c:	e7f9      	b.n	16a82 <memset+0x4>
	...

00016a90 <_free_r>:
   16a90:	b570      	push	{r4, r5, r6, lr}
   16a92:	0005      	movs	r5, r0
   16a94:	2900      	cmp	r1, #0
   16a96:	d010      	beq.n	16aba <_free_r+0x2a>
   16a98:	1f0c      	subs	r4, r1, #4
   16a9a:	6823      	ldr	r3, [r4, #0]
   16a9c:	2b00      	cmp	r3, #0
   16a9e:	da00      	bge.n	16aa2 <_free_r+0x12>
   16aa0:	18e4      	adds	r4, r4, r3
   16aa2:	0028      	movs	r0, r5
   16aa4:	f000 fd7a 	bl	1759c <__malloc_lock>
   16aa8:	4a1d      	ldr	r2, [pc, #116]	; (16b20 <_free_r+0x90>)
   16aaa:	6813      	ldr	r3, [r2, #0]
   16aac:	2b00      	cmp	r3, #0
   16aae:	d105      	bne.n	16abc <_free_r+0x2c>
   16ab0:	6063      	str	r3, [r4, #4]
   16ab2:	6014      	str	r4, [r2, #0]
   16ab4:	0028      	movs	r0, r5
   16ab6:	f000 fd72 	bl	1759e <__malloc_unlock>
   16aba:	bd70      	pop	{r4, r5, r6, pc}
   16abc:	42a3      	cmp	r3, r4
   16abe:	d909      	bls.n	16ad4 <_free_r+0x44>
   16ac0:	6821      	ldr	r1, [r4, #0]
   16ac2:	1860      	adds	r0, r4, r1
   16ac4:	4283      	cmp	r3, r0
   16ac6:	d1f3      	bne.n	16ab0 <_free_r+0x20>
   16ac8:	6818      	ldr	r0, [r3, #0]
   16aca:	685b      	ldr	r3, [r3, #4]
   16acc:	1841      	adds	r1, r0, r1
   16ace:	6021      	str	r1, [r4, #0]
   16ad0:	e7ee      	b.n	16ab0 <_free_r+0x20>
   16ad2:	0013      	movs	r3, r2
   16ad4:	685a      	ldr	r2, [r3, #4]
   16ad6:	2a00      	cmp	r2, #0
   16ad8:	d001      	beq.n	16ade <_free_r+0x4e>
   16ada:	42a2      	cmp	r2, r4
   16adc:	d9f9      	bls.n	16ad2 <_free_r+0x42>
   16ade:	6819      	ldr	r1, [r3, #0]
   16ae0:	1858      	adds	r0, r3, r1
   16ae2:	42a0      	cmp	r0, r4
   16ae4:	d10b      	bne.n	16afe <_free_r+0x6e>
   16ae6:	6820      	ldr	r0, [r4, #0]
   16ae8:	1809      	adds	r1, r1, r0
   16aea:	1858      	adds	r0, r3, r1
   16aec:	6019      	str	r1, [r3, #0]
   16aee:	4282      	cmp	r2, r0
   16af0:	d1e0      	bne.n	16ab4 <_free_r+0x24>
   16af2:	6810      	ldr	r0, [r2, #0]
   16af4:	6852      	ldr	r2, [r2, #4]
   16af6:	1841      	adds	r1, r0, r1
   16af8:	6019      	str	r1, [r3, #0]
   16afa:	605a      	str	r2, [r3, #4]
   16afc:	e7da      	b.n	16ab4 <_free_r+0x24>
   16afe:	42a0      	cmp	r0, r4
   16b00:	d902      	bls.n	16b08 <_free_r+0x78>
   16b02:	230c      	movs	r3, #12
   16b04:	602b      	str	r3, [r5, #0]
   16b06:	e7d5      	b.n	16ab4 <_free_r+0x24>
   16b08:	6821      	ldr	r1, [r4, #0]
   16b0a:	1860      	adds	r0, r4, r1
   16b0c:	4282      	cmp	r2, r0
   16b0e:	d103      	bne.n	16b18 <_free_r+0x88>
   16b10:	6810      	ldr	r0, [r2, #0]
   16b12:	6852      	ldr	r2, [r2, #4]
   16b14:	1841      	adds	r1, r0, r1
   16b16:	6021      	str	r1, [r4, #0]
   16b18:	6062      	str	r2, [r4, #4]
   16b1a:	605c      	str	r4, [r3, #4]
   16b1c:	e7ca      	b.n	16ab4 <_free_r+0x24>
   16b1e:	46c0      	nop			; (mov r8, r8)
   16b20:	20000e24 	.word	0x20000e24

00016b24 <_malloc_r>:
   16b24:	2303      	movs	r3, #3
   16b26:	b570      	push	{r4, r5, r6, lr}
   16b28:	1ccd      	adds	r5, r1, #3
   16b2a:	439d      	bics	r5, r3
   16b2c:	3508      	adds	r5, #8
   16b2e:	0006      	movs	r6, r0
   16b30:	2d0c      	cmp	r5, #12
   16b32:	d21e      	bcs.n	16b72 <_malloc_r+0x4e>
   16b34:	250c      	movs	r5, #12
   16b36:	42a9      	cmp	r1, r5
   16b38:	d81d      	bhi.n	16b76 <_malloc_r+0x52>
   16b3a:	0030      	movs	r0, r6
   16b3c:	f000 fd2e 	bl	1759c <__malloc_lock>
   16b40:	4a25      	ldr	r2, [pc, #148]	; (16bd8 <_malloc_r+0xb4>)
   16b42:	6814      	ldr	r4, [r2, #0]
   16b44:	0021      	movs	r1, r4
   16b46:	2900      	cmp	r1, #0
   16b48:	d119      	bne.n	16b7e <_malloc_r+0x5a>
   16b4a:	4c24      	ldr	r4, [pc, #144]	; (16bdc <_malloc_r+0xb8>)
   16b4c:	6823      	ldr	r3, [r4, #0]
   16b4e:	2b00      	cmp	r3, #0
   16b50:	d103      	bne.n	16b5a <_malloc_r+0x36>
   16b52:	0030      	movs	r0, r6
   16b54:	f000 f8dc 	bl	16d10 <_sbrk_r>
   16b58:	6020      	str	r0, [r4, #0]
   16b5a:	0029      	movs	r1, r5
   16b5c:	0030      	movs	r0, r6
   16b5e:	f000 f8d7 	bl	16d10 <_sbrk_r>
   16b62:	1c43      	adds	r3, r0, #1
   16b64:	d12c      	bne.n	16bc0 <_malloc_r+0x9c>
   16b66:	230c      	movs	r3, #12
   16b68:	0030      	movs	r0, r6
   16b6a:	6033      	str	r3, [r6, #0]
   16b6c:	f000 fd17 	bl	1759e <__malloc_unlock>
   16b70:	e003      	b.n	16b7a <_malloc_r+0x56>
   16b72:	2d00      	cmp	r5, #0
   16b74:	dadf      	bge.n	16b36 <_malloc_r+0x12>
   16b76:	230c      	movs	r3, #12
   16b78:	6033      	str	r3, [r6, #0]
   16b7a:	2000      	movs	r0, #0
   16b7c:	bd70      	pop	{r4, r5, r6, pc}
   16b7e:	680b      	ldr	r3, [r1, #0]
   16b80:	1b5b      	subs	r3, r3, r5
   16b82:	d41a      	bmi.n	16bba <_malloc_r+0x96>
   16b84:	2b0b      	cmp	r3, #11
   16b86:	d903      	bls.n	16b90 <_malloc_r+0x6c>
   16b88:	600b      	str	r3, [r1, #0]
   16b8a:	18cc      	adds	r4, r1, r3
   16b8c:	6025      	str	r5, [r4, #0]
   16b8e:	e003      	b.n	16b98 <_malloc_r+0x74>
   16b90:	428c      	cmp	r4, r1
   16b92:	d10e      	bne.n	16bb2 <_malloc_r+0x8e>
   16b94:	6863      	ldr	r3, [r4, #4]
   16b96:	6013      	str	r3, [r2, #0]
   16b98:	0030      	movs	r0, r6
   16b9a:	f000 fd00 	bl	1759e <__malloc_unlock>
   16b9e:	0020      	movs	r0, r4
   16ba0:	2207      	movs	r2, #7
   16ba2:	300b      	adds	r0, #11
   16ba4:	1d23      	adds	r3, r4, #4
   16ba6:	4390      	bics	r0, r2
   16ba8:	1ac3      	subs	r3, r0, r3
   16baa:	d0e7      	beq.n	16b7c <_malloc_r+0x58>
   16bac:	425a      	negs	r2, r3
   16bae:	50e2      	str	r2, [r4, r3]
   16bb0:	e7e4      	b.n	16b7c <_malloc_r+0x58>
   16bb2:	684b      	ldr	r3, [r1, #4]
   16bb4:	6063      	str	r3, [r4, #4]
   16bb6:	000c      	movs	r4, r1
   16bb8:	e7ee      	b.n	16b98 <_malloc_r+0x74>
   16bba:	000c      	movs	r4, r1
   16bbc:	6849      	ldr	r1, [r1, #4]
   16bbe:	e7c2      	b.n	16b46 <_malloc_r+0x22>
   16bc0:	2303      	movs	r3, #3
   16bc2:	1cc4      	adds	r4, r0, #3
   16bc4:	439c      	bics	r4, r3
   16bc6:	42a0      	cmp	r0, r4
   16bc8:	d0e0      	beq.n	16b8c <_malloc_r+0x68>
   16bca:	1a21      	subs	r1, r4, r0
   16bcc:	0030      	movs	r0, r6
   16bce:	f000 f89f 	bl	16d10 <_sbrk_r>
   16bd2:	1c43      	adds	r3, r0, #1
   16bd4:	d1da      	bne.n	16b8c <_malloc_r+0x68>
   16bd6:	e7c6      	b.n	16b66 <_malloc_r+0x42>
   16bd8:	20000e24 	.word	0x20000e24
   16bdc:	20000e28 	.word	0x20000e28

00016be0 <iprintf>:
   16be0:	b40f      	push	{r0, r1, r2, r3}
   16be2:	4b0b      	ldr	r3, [pc, #44]	; (16c10 <iprintf+0x30>)
   16be4:	b513      	push	{r0, r1, r4, lr}
   16be6:	681c      	ldr	r4, [r3, #0]
   16be8:	2c00      	cmp	r4, #0
   16bea:	d005      	beq.n	16bf8 <iprintf+0x18>
   16bec:	69a3      	ldr	r3, [r4, #24]
   16bee:	2b00      	cmp	r3, #0
   16bf0:	d102      	bne.n	16bf8 <iprintf+0x18>
   16bf2:	0020      	movs	r0, r4
   16bf4:	f000 fbd0 	bl	17398 <__sinit>
   16bf8:	ab05      	add	r3, sp, #20
   16bfa:	9a04      	ldr	r2, [sp, #16]
   16bfc:	68a1      	ldr	r1, [r4, #8]
   16bfe:	0020      	movs	r0, r4
   16c00:	9301      	str	r3, [sp, #4]
   16c02:	f000 fe5b 	bl	178bc <_vfiprintf_r>
   16c06:	bc16      	pop	{r1, r2, r4}
   16c08:	bc08      	pop	{r3}
   16c0a:	b004      	add	sp, #16
   16c0c:	4718      	bx	r3
   16c0e:	46c0      	nop			; (mov r8, r8)
   16c10:	200001f0 	.word	0x200001f0

00016c14 <putchar>:
   16c14:	4b08      	ldr	r3, [pc, #32]	; (16c38 <putchar+0x24>)
   16c16:	b570      	push	{r4, r5, r6, lr}
   16c18:	681c      	ldr	r4, [r3, #0]
   16c1a:	0005      	movs	r5, r0
   16c1c:	2c00      	cmp	r4, #0
   16c1e:	d005      	beq.n	16c2c <putchar+0x18>
   16c20:	69a3      	ldr	r3, [r4, #24]
   16c22:	2b00      	cmp	r3, #0
   16c24:	d102      	bne.n	16c2c <putchar+0x18>
   16c26:	0020      	movs	r0, r4
   16c28:	f000 fbb6 	bl	17398 <__sinit>
   16c2c:	0029      	movs	r1, r5
   16c2e:	68a2      	ldr	r2, [r4, #8]
   16c30:	0020      	movs	r0, r4
   16c32:	f001 f8e7 	bl	17e04 <_putc_r>
   16c36:	bd70      	pop	{r4, r5, r6, pc}
   16c38:	200001f0 	.word	0x200001f0

00016c3c <_puts_r>:
   16c3c:	b570      	push	{r4, r5, r6, lr}
   16c3e:	0005      	movs	r5, r0
   16c40:	000e      	movs	r6, r1
   16c42:	2800      	cmp	r0, #0
   16c44:	d004      	beq.n	16c50 <_puts_r+0x14>
   16c46:	6983      	ldr	r3, [r0, #24]
   16c48:	2b00      	cmp	r3, #0
   16c4a:	d101      	bne.n	16c50 <_puts_r+0x14>
   16c4c:	f000 fba4 	bl	17398 <__sinit>
   16c50:	69ab      	ldr	r3, [r5, #24]
   16c52:	68ac      	ldr	r4, [r5, #8]
   16c54:	2b00      	cmp	r3, #0
   16c56:	d102      	bne.n	16c5e <_puts_r+0x22>
   16c58:	0028      	movs	r0, r5
   16c5a:	f000 fb9d 	bl	17398 <__sinit>
   16c5e:	4b24      	ldr	r3, [pc, #144]	; (16cf0 <_puts_r+0xb4>)
   16c60:	429c      	cmp	r4, r3
   16c62:	d10f      	bne.n	16c84 <_puts_r+0x48>
   16c64:	686c      	ldr	r4, [r5, #4]
   16c66:	89a3      	ldrh	r3, [r4, #12]
   16c68:	071b      	lsls	r3, r3, #28
   16c6a:	d502      	bpl.n	16c72 <_puts_r+0x36>
   16c6c:	6923      	ldr	r3, [r4, #16]
   16c6e:	2b00      	cmp	r3, #0
   16c70:	d120      	bne.n	16cb4 <_puts_r+0x78>
   16c72:	0021      	movs	r1, r4
   16c74:	0028      	movs	r0, r5
   16c76:	f000 fa21 	bl	170bc <__swsetup_r>
   16c7a:	2800      	cmp	r0, #0
   16c7c:	d01a      	beq.n	16cb4 <_puts_r+0x78>
   16c7e:	2001      	movs	r0, #1
   16c80:	4240      	negs	r0, r0
   16c82:	bd70      	pop	{r4, r5, r6, pc}
   16c84:	4b1b      	ldr	r3, [pc, #108]	; (16cf4 <_puts_r+0xb8>)
   16c86:	429c      	cmp	r4, r3
   16c88:	d101      	bne.n	16c8e <_puts_r+0x52>
   16c8a:	68ac      	ldr	r4, [r5, #8]
   16c8c:	e7eb      	b.n	16c66 <_puts_r+0x2a>
   16c8e:	4b1a      	ldr	r3, [pc, #104]	; (16cf8 <_puts_r+0xbc>)
   16c90:	429c      	cmp	r4, r3
   16c92:	d1e8      	bne.n	16c66 <_puts_r+0x2a>
   16c94:	68ec      	ldr	r4, [r5, #12]
   16c96:	e7e6      	b.n	16c66 <_puts_r+0x2a>
   16c98:	3b01      	subs	r3, #1
   16c9a:	3601      	adds	r6, #1
   16c9c:	60a3      	str	r3, [r4, #8]
   16c9e:	2b00      	cmp	r3, #0
   16ca0:	da04      	bge.n	16cac <_puts_r+0x70>
   16ca2:	69a2      	ldr	r2, [r4, #24]
   16ca4:	4293      	cmp	r3, r2
   16ca6:	db16      	blt.n	16cd6 <_puts_r+0x9a>
   16ca8:	290a      	cmp	r1, #10
   16caa:	d014      	beq.n	16cd6 <_puts_r+0x9a>
   16cac:	6823      	ldr	r3, [r4, #0]
   16cae:	1c5a      	adds	r2, r3, #1
   16cb0:	6022      	str	r2, [r4, #0]
   16cb2:	7019      	strb	r1, [r3, #0]
   16cb4:	7831      	ldrb	r1, [r6, #0]
   16cb6:	68a3      	ldr	r3, [r4, #8]
   16cb8:	2900      	cmp	r1, #0
   16cba:	d1ed      	bne.n	16c98 <_puts_r+0x5c>
   16cbc:	3b01      	subs	r3, #1
   16cbe:	60a3      	str	r3, [r4, #8]
   16cc0:	2b00      	cmp	r3, #0
   16cc2:	da0f      	bge.n	16ce4 <_puts_r+0xa8>
   16cc4:	0022      	movs	r2, r4
   16cc6:	310a      	adds	r1, #10
   16cc8:	0028      	movs	r0, r5
   16cca:	f000 f9a1 	bl	17010 <__swbuf_r>
   16cce:	1c43      	adds	r3, r0, #1
   16cd0:	d0d5      	beq.n	16c7e <_puts_r+0x42>
   16cd2:	200a      	movs	r0, #10
   16cd4:	e7d5      	b.n	16c82 <_puts_r+0x46>
   16cd6:	0022      	movs	r2, r4
   16cd8:	0028      	movs	r0, r5
   16cda:	f000 f999 	bl	17010 <__swbuf_r>
   16cde:	1c43      	adds	r3, r0, #1
   16ce0:	d1e8      	bne.n	16cb4 <_puts_r+0x78>
   16ce2:	e7cc      	b.n	16c7e <_puts_r+0x42>
   16ce4:	200a      	movs	r0, #10
   16ce6:	6823      	ldr	r3, [r4, #0]
   16ce8:	1c5a      	adds	r2, r3, #1
   16cea:	6022      	str	r2, [r4, #0]
   16cec:	7018      	strb	r0, [r3, #0]
   16cee:	e7c8      	b.n	16c82 <_puts_r+0x46>
   16cf0:	0001a36c 	.word	0x0001a36c
   16cf4:	0001a38c 	.word	0x0001a38c
   16cf8:	0001a34c 	.word	0x0001a34c

00016cfc <puts>:
   16cfc:	b510      	push	{r4, lr}
   16cfe:	4b03      	ldr	r3, [pc, #12]	; (16d0c <puts+0x10>)
   16d00:	0001      	movs	r1, r0
   16d02:	6818      	ldr	r0, [r3, #0]
   16d04:	f7ff ff9a 	bl	16c3c <_puts_r>
   16d08:	bd10      	pop	{r4, pc}
   16d0a:	46c0      	nop			; (mov r8, r8)
   16d0c:	200001f0 	.word	0x200001f0

00016d10 <_sbrk_r>:
   16d10:	2300      	movs	r3, #0
   16d12:	b570      	push	{r4, r5, r6, lr}
   16d14:	4c06      	ldr	r4, [pc, #24]	; (16d30 <_sbrk_r+0x20>)
   16d16:	0005      	movs	r5, r0
   16d18:	0008      	movs	r0, r1
   16d1a:	6023      	str	r3, [r4, #0]
   16d1c:	f7fb f9b6 	bl	1208c <_sbrk>
   16d20:	1c43      	adds	r3, r0, #1
   16d22:	d103      	bne.n	16d2c <_sbrk_r+0x1c>
   16d24:	6823      	ldr	r3, [r4, #0]
   16d26:	2b00      	cmp	r3, #0
   16d28:	d000      	beq.n	16d2c <_sbrk_r+0x1c>
   16d2a:	602b      	str	r3, [r5, #0]
   16d2c:	bd70      	pop	{r4, r5, r6, pc}
   16d2e:	46c0      	nop			; (mov r8, r8)
   16d30:	20001628 	.word	0x20001628

00016d34 <setbuf>:
   16d34:	424a      	negs	r2, r1
   16d36:	414a      	adcs	r2, r1
   16d38:	2380      	movs	r3, #128	; 0x80
   16d3a:	b510      	push	{r4, lr}
   16d3c:	0052      	lsls	r2, r2, #1
   16d3e:	00db      	lsls	r3, r3, #3
   16d40:	f000 f802 	bl	16d48 <setvbuf>
   16d44:	bd10      	pop	{r4, pc}
	...

00016d48 <setvbuf>:
   16d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d4a:	001d      	movs	r5, r3
   16d4c:	4b4f      	ldr	r3, [pc, #316]	; (16e8c <setvbuf+0x144>)
   16d4e:	b085      	sub	sp, #20
   16d50:	681e      	ldr	r6, [r3, #0]
   16d52:	0004      	movs	r4, r0
   16d54:	000f      	movs	r7, r1
   16d56:	9200      	str	r2, [sp, #0]
   16d58:	2e00      	cmp	r6, #0
   16d5a:	d005      	beq.n	16d68 <setvbuf+0x20>
   16d5c:	69b3      	ldr	r3, [r6, #24]
   16d5e:	2b00      	cmp	r3, #0
   16d60:	d102      	bne.n	16d68 <setvbuf+0x20>
   16d62:	0030      	movs	r0, r6
   16d64:	f000 fb18 	bl	17398 <__sinit>
   16d68:	4b49      	ldr	r3, [pc, #292]	; (16e90 <setvbuf+0x148>)
   16d6a:	429c      	cmp	r4, r3
   16d6c:	d150      	bne.n	16e10 <setvbuf+0xc8>
   16d6e:	6874      	ldr	r4, [r6, #4]
   16d70:	9b00      	ldr	r3, [sp, #0]
   16d72:	2b02      	cmp	r3, #2
   16d74:	d005      	beq.n	16d82 <setvbuf+0x3a>
   16d76:	2b01      	cmp	r3, #1
   16d78:	d900      	bls.n	16d7c <setvbuf+0x34>
   16d7a:	e084      	b.n	16e86 <setvbuf+0x13e>
   16d7c:	2d00      	cmp	r5, #0
   16d7e:	da00      	bge.n	16d82 <setvbuf+0x3a>
   16d80:	e081      	b.n	16e86 <setvbuf+0x13e>
   16d82:	0021      	movs	r1, r4
   16d84:	0030      	movs	r0, r6
   16d86:	f000 fa99 	bl	172bc <_fflush_r>
   16d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16d8c:	2900      	cmp	r1, #0
   16d8e:	d008      	beq.n	16da2 <setvbuf+0x5a>
   16d90:	0023      	movs	r3, r4
   16d92:	3344      	adds	r3, #68	; 0x44
   16d94:	4299      	cmp	r1, r3
   16d96:	d002      	beq.n	16d9e <setvbuf+0x56>
   16d98:	0030      	movs	r0, r6
   16d9a:	f7ff fe79 	bl	16a90 <_free_r>
   16d9e:	2300      	movs	r3, #0
   16da0:	6363      	str	r3, [r4, #52]	; 0x34
   16da2:	2300      	movs	r3, #0
   16da4:	61a3      	str	r3, [r4, #24]
   16da6:	6063      	str	r3, [r4, #4]
   16da8:	89a3      	ldrh	r3, [r4, #12]
   16daa:	061b      	lsls	r3, r3, #24
   16dac:	d503      	bpl.n	16db6 <setvbuf+0x6e>
   16dae:	6921      	ldr	r1, [r4, #16]
   16db0:	0030      	movs	r0, r6
   16db2:	f7ff fe6d 	bl	16a90 <_free_r>
   16db6:	89a3      	ldrh	r3, [r4, #12]
   16db8:	4a36      	ldr	r2, [pc, #216]	; (16e94 <setvbuf+0x14c>)
   16dba:	4013      	ands	r3, r2
   16dbc:	81a3      	strh	r3, [r4, #12]
   16dbe:	9b00      	ldr	r3, [sp, #0]
   16dc0:	2b02      	cmp	r3, #2
   16dc2:	d05a      	beq.n	16e7a <setvbuf+0x132>
   16dc4:	ab03      	add	r3, sp, #12
   16dc6:	aa02      	add	r2, sp, #8
   16dc8:	0021      	movs	r1, r4
   16dca:	0030      	movs	r0, r6
   16dcc:	f000 fb7a 	bl	174c4 <__swhatbuf_r>
   16dd0:	89a3      	ldrh	r3, [r4, #12]
   16dd2:	4318      	orrs	r0, r3
   16dd4:	81a0      	strh	r0, [r4, #12]
   16dd6:	2d00      	cmp	r5, #0
   16dd8:	d124      	bne.n	16e24 <setvbuf+0xdc>
   16dda:	9d02      	ldr	r5, [sp, #8]
   16ddc:	0028      	movs	r0, r5
   16dde:	f7ff fe1f 	bl	16a20 <malloc>
   16de2:	9501      	str	r5, [sp, #4]
   16de4:	1e07      	subs	r7, r0, #0
   16de6:	d142      	bne.n	16e6e <setvbuf+0x126>
   16de8:	9b02      	ldr	r3, [sp, #8]
   16dea:	9301      	str	r3, [sp, #4]
   16dec:	42ab      	cmp	r3, r5
   16dee:	d139      	bne.n	16e64 <setvbuf+0x11c>
   16df0:	2001      	movs	r0, #1
   16df2:	4240      	negs	r0, r0
   16df4:	2302      	movs	r3, #2
   16df6:	89a2      	ldrh	r2, [r4, #12]
   16df8:	4313      	orrs	r3, r2
   16dfa:	81a3      	strh	r3, [r4, #12]
   16dfc:	2300      	movs	r3, #0
   16dfe:	60a3      	str	r3, [r4, #8]
   16e00:	0023      	movs	r3, r4
   16e02:	3347      	adds	r3, #71	; 0x47
   16e04:	6023      	str	r3, [r4, #0]
   16e06:	6123      	str	r3, [r4, #16]
   16e08:	2301      	movs	r3, #1
   16e0a:	6163      	str	r3, [r4, #20]
   16e0c:	b005      	add	sp, #20
   16e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e10:	4b21      	ldr	r3, [pc, #132]	; (16e98 <setvbuf+0x150>)
   16e12:	429c      	cmp	r4, r3
   16e14:	d101      	bne.n	16e1a <setvbuf+0xd2>
   16e16:	68b4      	ldr	r4, [r6, #8]
   16e18:	e7aa      	b.n	16d70 <setvbuf+0x28>
   16e1a:	4b20      	ldr	r3, [pc, #128]	; (16e9c <setvbuf+0x154>)
   16e1c:	429c      	cmp	r4, r3
   16e1e:	d1a7      	bne.n	16d70 <setvbuf+0x28>
   16e20:	68f4      	ldr	r4, [r6, #12]
   16e22:	e7a5      	b.n	16d70 <setvbuf+0x28>
   16e24:	2f00      	cmp	r7, #0
   16e26:	d0d9      	beq.n	16ddc <setvbuf+0x94>
   16e28:	69b3      	ldr	r3, [r6, #24]
   16e2a:	2b00      	cmp	r3, #0
   16e2c:	d102      	bne.n	16e34 <setvbuf+0xec>
   16e2e:	0030      	movs	r0, r6
   16e30:	f000 fab2 	bl	17398 <__sinit>
   16e34:	9b00      	ldr	r3, [sp, #0]
   16e36:	2b01      	cmp	r3, #1
   16e38:	d103      	bne.n	16e42 <setvbuf+0xfa>
   16e3a:	89a3      	ldrh	r3, [r4, #12]
   16e3c:	9a00      	ldr	r2, [sp, #0]
   16e3e:	431a      	orrs	r2, r3
   16e40:	81a2      	strh	r2, [r4, #12]
   16e42:	2008      	movs	r0, #8
   16e44:	89a3      	ldrh	r3, [r4, #12]
   16e46:	6027      	str	r7, [r4, #0]
   16e48:	6127      	str	r7, [r4, #16]
   16e4a:	6165      	str	r5, [r4, #20]
   16e4c:	4018      	ands	r0, r3
   16e4e:	d018      	beq.n	16e82 <setvbuf+0x13a>
   16e50:	2001      	movs	r0, #1
   16e52:	4018      	ands	r0, r3
   16e54:	2300      	movs	r3, #0
   16e56:	4298      	cmp	r0, r3
   16e58:	d011      	beq.n	16e7e <setvbuf+0x136>
   16e5a:	426d      	negs	r5, r5
   16e5c:	60a3      	str	r3, [r4, #8]
   16e5e:	61a5      	str	r5, [r4, #24]
   16e60:	0018      	movs	r0, r3
   16e62:	e7d3      	b.n	16e0c <setvbuf+0xc4>
   16e64:	9801      	ldr	r0, [sp, #4]
   16e66:	f7ff fddb 	bl	16a20 <malloc>
   16e6a:	1e07      	subs	r7, r0, #0
   16e6c:	d0c0      	beq.n	16df0 <setvbuf+0xa8>
   16e6e:	2380      	movs	r3, #128	; 0x80
   16e70:	89a2      	ldrh	r2, [r4, #12]
   16e72:	9d01      	ldr	r5, [sp, #4]
   16e74:	4313      	orrs	r3, r2
   16e76:	81a3      	strh	r3, [r4, #12]
   16e78:	e7d6      	b.n	16e28 <setvbuf+0xe0>
   16e7a:	2000      	movs	r0, #0
   16e7c:	e7ba      	b.n	16df4 <setvbuf+0xac>
   16e7e:	60a5      	str	r5, [r4, #8]
   16e80:	e7c4      	b.n	16e0c <setvbuf+0xc4>
   16e82:	60a0      	str	r0, [r4, #8]
   16e84:	e7c2      	b.n	16e0c <setvbuf+0xc4>
   16e86:	2001      	movs	r0, #1
   16e88:	4240      	negs	r0, r0
   16e8a:	e7bf      	b.n	16e0c <setvbuf+0xc4>
   16e8c:	200001f0 	.word	0x200001f0
   16e90:	0001a36c 	.word	0x0001a36c
   16e94:	fffff35c 	.word	0xfffff35c
   16e98:	0001a38c 	.word	0x0001a38c
   16e9c:	0001a34c 	.word	0x0001a34c

00016ea0 <sniprintf>:
   16ea0:	b40c      	push	{r2, r3}
   16ea2:	b530      	push	{r4, r5, lr}
   16ea4:	4b16      	ldr	r3, [pc, #88]	; (16f00 <sniprintf+0x60>)
   16ea6:	b09d      	sub	sp, #116	; 0x74
   16ea8:	1e0c      	subs	r4, r1, #0
   16eaa:	681d      	ldr	r5, [r3, #0]
   16eac:	da08      	bge.n	16ec0 <sniprintf+0x20>
   16eae:	238b      	movs	r3, #139	; 0x8b
   16eb0:	2001      	movs	r0, #1
   16eb2:	602b      	str	r3, [r5, #0]
   16eb4:	4240      	negs	r0, r0
   16eb6:	b01d      	add	sp, #116	; 0x74
   16eb8:	bc30      	pop	{r4, r5}
   16eba:	bc08      	pop	{r3}
   16ebc:	b002      	add	sp, #8
   16ebe:	4718      	bx	r3
   16ec0:	2382      	movs	r3, #130	; 0x82
   16ec2:	a902      	add	r1, sp, #8
   16ec4:	009b      	lsls	r3, r3, #2
   16ec6:	818b      	strh	r3, [r1, #12]
   16ec8:	2300      	movs	r3, #0
   16eca:	9002      	str	r0, [sp, #8]
   16ecc:	6108      	str	r0, [r1, #16]
   16ece:	429c      	cmp	r4, r3
   16ed0:	d000      	beq.n	16ed4 <sniprintf+0x34>
   16ed2:	1e63      	subs	r3, r4, #1
   16ed4:	608b      	str	r3, [r1, #8]
   16ed6:	614b      	str	r3, [r1, #20]
   16ed8:	2301      	movs	r3, #1
   16eda:	425b      	negs	r3, r3
   16edc:	81cb      	strh	r3, [r1, #14]
   16ede:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16ee0:	ab21      	add	r3, sp, #132	; 0x84
   16ee2:	0028      	movs	r0, r5
   16ee4:	9301      	str	r3, [sp, #4]
   16ee6:	f000 fbbd 	bl	17664 <_svfiprintf_r>
   16eea:	1c43      	adds	r3, r0, #1
   16eec:	da01      	bge.n	16ef2 <sniprintf+0x52>
   16eee:	238b      	movs	r3, #139	; 0x8b
   16ef0:	602b      	str	r3, [r5, #0]
   16ef2:	2c00      	cmp	r4, #0
   16ef4:	d0df      	beq.n	16eb6 <sniprintf+0x16>
   16ef6:	2300      	movs	r3, #0
   16ef8:	9a02      	ldr	r2, [sp, #8]
   16efa:	7013      	strb	r3, [r2, #0]
   16efc:	e7db      	b.n	16eb6 <sniprintf+0x16>
   16efe:	46c0      	nop			; (mov r8, r8)
   16f00:	200001f0 	.word	0x200001f0

00016f04 <siprintf>:
   16f04:	b40e      	push	{r1, r2, r3}
   16f06:	b510      	push	{r4, lr}
   16f08:	b09d      	sub	sp, #116	; 0x74
   16f0a:	a902      	add	r1, sp, #8
   16f0c:	9002      	str	r0, [sp, #8]
   16f0e:	6108      	str	r0, [r1, #16]
   16f10:	480b      	ldr	r0, [pc, #44]	; (16f40 <siprintf+0x3c>)
   16f12:	2482      	movs	r4, #130	; 0x82
   16f14:	6088      	str	r0, [r1, #8]
   16f16:	6148      	str	r0, [r1, #20]
   16f18:	2001      	movs	r0, #1
   16f1a:	4240      	negs	r0, r0
   16f1c:	ab1f      	add	r3, sp, #124	; 0x7c
   16f1e:	81c8      	strh	r0, [r1, #14]
   16f20:	4808      	ldr	r0, [pc, #32]	; (16f44 <siprintf+0x40>)
   16f22:	cb04      	ldmia	r3!, {r2}
   16f24:	00a4      	lsls	r4, r4, #2
   16f26:	6800      	ldr	r0, [r0, #0]
   16f28:	9301      	str	r3, [sp, #4]
   16f2a:	818c      	strh	r4, [r1, #12]
   16f2c:	f000 fb9a 	bl	17664 <_svfiprintf_r>
   16f30:	2300      	movs	r3, #0
   16f32:	9a02      	ldr	r2, [sp, #8]
   16f34:	7013      	strb	r3, [r2, #0]
   16f36:	b01d      	add	sp, #116	; 0x74
   16f38:	bc10      	pop	{r4}
   16f3a:	bc08      	pop	{r3}
   16f3c:	b003      	add	sp, #12
   16f3e:	4718      	bx	r3
   16f40:	7fffffff 	.word	0x7fffffff
   16f44:	200001f0 	.word	0x200001f0

00016f48 <strcat>:
   16f48:	0002      	movs	r2, r0
   16f4a:	b510      	push	{r4, lr}
   16f4c:	7813      	ldrb	r3, [r2, #0]
   16f4e:	2b00      	cmp	r3, #0
   16f50:	d105      	bne.n	16f5e <strcat+0x16>
   16f52:	5ccc      	ldrb	r4, [r1, r3]
   16f54:	54d4      	strb	r4, [r2, r3]
   16f56:	3301      	adds	r3, #1
   16f58:	2c00      	cmp	r4, #0
   16f5a:	d1fa      	bne.n	16f52 <strcat+0xa>
   16f5c:	bd10      	pop	{r4, pc}
   16f5e:	3201      	adds	r2, #1
   16f60:	e7f4      	b.n	16f4c <strcat+0x4>

00016f62 <strchr>:
   16f62:	b2c9      	uxtb	r1, r1
   16f64:	7803      	ldrb	r3, [r0, #0]
   16f66:	2b00      	cmp	r3, #0
   16f68:	d004      	beq.n	16f74 <strchr+0x12>
   16f6a:	4299      	cmp	r1, r3
   16f6c:	d100      	bne.n	16f70 <strchr+0xe>
   16f6e:	4770      	bx	lr
   16f70:	3001      	adds	r0, #1
   16f72:	e7f7      	b.n	16f64 <strchr+0x2>
   16f74:	424b      	negs	r3, r1
   16f76:	4159      	adcs	r1, r3
   16f78:	4249      	negs	r1, r1
   16f7a:	4008      	ands	r0, r1
   16f7c:	e7f7      	b.n	16f6e <strchr+0xc>

00016f7e <strcmp>:
   16f7e:	7802      	ldrb	r2, [r0, #0]
   16f80:	780b      	ldrb	r3, [r1, #0]
   16f82:	2a00      	cmp	r2, #0
   16f84:	d003      	beq.n	16f8e <strcmp+0x10>
   16f86:	3001      	adds	r0, #1
   16f88:	3101      	adds	r1, #1
   16f8a:	429a      	cmp	r2, r3
   16f8c:	d0f7      	beq.n	16f7e <strcmp>
   16f8e:	1ad0      	subs	r0, r2, r3
   16f90:	4770      	bx	lr

00016f92 <strcpy>:
   16f92:	1c03      	adds	r3, r0, #0
   16f94:	780a      	ldrb	r2, [r1, #0]
   16f96:	3101      	adds	r1, #1
   16f98:	701a      	strb	r2, [r3, #0]
   16f9a:	3301      	adds	r3, #1
   16f9c:	2a00      	cmp	r2, #0
   16f9e:	d1f9      	bne.n	16f94 <strcpy+0x2>
   16fa0:	4770      	bx	lr
	...

00016fa4 <strdup>:
   16fa4:	b510      	push	{r4, lr}
   16fa6:	4b03      	ldr	r3, [pc, #12]	; (16fb4 <strdup+0x10>)
   16fa8:	0001      	movs	r1, r0
   16faa:	6818      	ldr	r0, [r3, #0]
   16fac:	f000 f804 	bl	16fb8 <_strdup_r>
   16fb0:	bd10      	pop	{r4, pc}
   16fb2:	46c0      	nop			; (mov r8, r8)
   16fb4:	200001f0 	.word	0x200001f0

00016fb8 <_strdup_r>:
   16fb8:	b570      	push	{r4, r5, r6, lr}
   16fba:	0005      	movs	r5, r0
   16fbc:	0008      	movs	r0, r1
   16fbe:	000e      	movs	r6, r1
   16fc0:	f000 f80d 	bl	16fde <strlen>
   16fc4:	1c44      	adds	r4, r0, #1
   16fc6:	0021      	movs	r1, r4
   16fc8:	0028      	movs	r0, r5
   16fca:	f7ff fdab 	bl	16b24 <_malloc_r>
   16fce:	1e05      	subs	r5, r0, #0
   16fd0:	d003      	beq.n	16fda <_strdup_r+0x22>
   16fd2:	0022      	movs	r2, r4
   16fd4:	0031      	movs	r1, r6
   16fd6:	f7ff fd37 	bl	16a48 <memcpy>
   16fda:	0028      	movs	r0, r5
   16fdc:	bd70      	pop	{r4, r5, r6, pc}

00016fde <strlen>:
   16fde:	2300      	movs	r3, #0
   16fe0:	5cc2      	ldrb	r2, [r0, r3]
   16fe2:	3301      	adds	r3, #1
   16fe4:	2a00      	cmp	r2, #0
   16fe6:	d1fb      	bne.n	16fe0 <strlen+0x2>
   16fe8:	1e58      	subs	r0, r3, #1
   16fea:	4770      	bx	lr

00016fec <strncmp>:
   16fec:	2300      	movs	r3, #0
   16fee:	b530      	push	{r4, r5, lr}
   16ff0:	429a      	cmp	r2, r3
   16ff2:	d00a      	beq.n	1700a <strncmp+0x1e>
   16ff4:	3a01      	subs	r2, #1
   16ff6:	5cc4      	ldrb	r4, [r0, r3]
   16ff8:	5ccd      	ldrb	r5, [r1, r3]
   16ffa:	42ac      	cmp	r4, r5
   16ffc:	d104      	bne.n	17008 <strncmp+0x1c>
   16ffe:	429a      	cmp	r2, r3
   17000:	d002      	beq.n	17008 <strncmp+0x1c>
   17002:	3301      	adds	r3, #1
   17004:	2c00      	cmp	r4, #0
   17006:	d1f6      	bne.n	16ff6 <strncmp+0xa>
   17008:	1b63      	subs	r3, r4, r5
   1700a:	0018      	movs	r0, r3
   1700c:	bd30      	pop	{r4, r5, pc}
	...

00017010 <__swbuf_r>:
   17010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17012:	0005      	movs	r5, r0
   17014:	000e      	movs	r6, r1
   17016:	0014      	movs	r4, r2
   17018:	2800      	cmp	r0, #0
   1701a:	d004      	beq.n	17026 <__swbuf_r+0x16>
   1701c:	6983      	ldr	r3, [r0, #24]
   1701e:	2b00      	cmp	r3, #0
   17020:	d101      	bne.n	17026 <__swbuf_r+0x16>
   17022:	f000 f9b9 	bl	17398 <__sinit>
   17026:	4b22      	ldr	r3, [pc, #136]	; (170b0 <__swbuf_r+0xa0>)
   17028:	429c      	cmp	r4, r3
   1702a:	d12d      	bne.n	17088 <__swbuf_r+0x78>
   1702c:	686c      	ldr	r4, [r5, #4]
   1702e:	69a3      	ldr	r3, [r4, #24]
   17030:	60a3      	str	r3, [r4, #8]
   17032:	89a3      	ldrh	r3, [r4, #12]
   17034:	071b      	lsls	r3, r3, #28
   17036:	d531      	bpl.n	1709c <__swbuf_r+0x8c>
   17038:	6923      	ldr	r3, [r4, #16]
   1703a:	2b00      	cmp	r3, #0
   1703c:	d02e      	beq.n	1709c <__swbuf_r+0x8c>
   1703e:	6823      	ldr	r3, [r4, #0]
   17040:	6922      	ldr	r2, [r4, #16]
   17042:	b2f7      	uxtb	r7, r6
   17044:	1a98      	subs	r0, r3, r2
   17046:	6963      	ldr	r3, [r4, #20]
   17048:	b2f6      	uxtb	r6, r6
   1704a:	4298      	cmp	r0, r3
   1704c:	db05      	blt.n	1705a <__swbuf_r+0x4a>
   1704e:	0021      	movs	r1, r4
   17050:	0028      	movs	r0, r5
   17052:	f000 f933 	bl	172bc <_fflush_r>
   17056:	2800      	cmp	r0, #0
   17058:	d126      	bne.n	170a8 <__swbuf_r+0x98>
   1705a:	68a3      	ldr	r3, [r4, #8]
   1705c:	3001      	adds	r0, #1
   1705e:	3b01      	subs	r3, #1
   17060:	60a3      	str	r3, [r4, #8]
   17062:	6823      	ldr	r3, [r4, #0]
   17064:	1c5a      	adds	r2, r3, #1
   17066:	6022      	str	r2, [r4, #0]
   17068:	701f      	strb	r7, [r3, #0]
   1706a:	6963      	ldr	r3, [r4, #20]
   1706c:	4298      	cmp	r0, r3
   1706e:	d004      	beq.n	1707a <__swbuf_r+0x6a>
   17070:	89a3      	ldrh	r3, [r4, #12]
   17072:	07db      	lsls	r3, r3, #31
   17074:	d51a      	bpl.n	170ac <__swbuf_r+0x9c>
   17076:	2e0a      	cmp	r6, #10
   17078:	d118      	bne.n	170ac <__swbuf_r+0x9c>
   1707a:	0021      	movs	r1, r4
   1707c:	0028      	movs	r0, r5
   1707e:	f000 f91d 	bl	172bc <_fflush_r>
   17082:	2800      	cmp	r0, #0
   17084:	d012      	beq.n	170ac <__swbuf_r+0x9c>
   17086:	e00f      	b.n	170a8 <__swbuf_r+0x98>
   17088:	4b0a      	ldr	r3, [pc, #40]	; (170b4 <__swbuf_r+0xa4>)
   1708a:	429c      	cmp	r4, r3
   1708c:	d101      	bne.n	17092 <__swbuf_r+0x82>
   1708e:	68ac      	ldr	r4, [r5, #8]
   17090:	e7cd      	b.n	1702e <__swbuf_r+0x1e>
   17092:	4b09      	ldr	r3, [pc, #36]	; (170b8 <__swbuf_r+0xa8>)
   17094:	429c      	cmp	r4, r3
   17096:	d1ca      	bne.n	1702e <__swbuf_r+0x1e>
   17098:	68ec      	ldr	r4, [r5, #12]
   1709a:	e7c8      	b.n	1702e <__swbuf_r+0x1e>
   1709c:	0021      	movs	r1, r4
   1709e:	0028      	movs	r0, r5
   170a0:	f000 f80c 	bl	170bc <__swsetup_r>
   170a4:	2800      	cmp	r0, #0
   170a6:	d0ca      	beq.n	1703e <__swbuf_r+0x2e>
   170a8:	2601      	movs	r6, #1
   170aa:	4276      	negs	r6, r6
   170ac:	0030      	movs	r0, r6
   170ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170b0:	0001a36c 	.word	0x0001a36c
   170b4:	0001a38c 	.word	0x0001a38c
   170b8:	0001a34c 	.word	0x0001a34c

000170bc <__swsetup_r>:
   170bc:	4b36      	ldr	r3, [pc, #216]	; (17198 <__swsetup_r+0xdc>)
   170be:	b570      	push	{r4, r5, r6, lr}
   170c0:	681d      	ldr	r5, [r3, #0]
   170c2:	0006      	movs	r6, r0
   170c4:	000c      	movs	r4, r1
   170c6:	2d00      	cmp	r5, #0
   170c8:	d005      	beq.n	170d6 <__swsetup_r+0x1a>
   170ca:	69ab      	ldr	r3, [r5, #24]
   170cc:	2b00      	cmp	r3, #0
   170ce:	d102      	bne.n	170d6 <__swsetup_r+0x1a>
   170d0:	0028      	movs	r0, r5
   170d2:	f000 f961 	bl	17398 <__sinit>
   170d6:	4b31      	ldr	r3, [pc, #196]	; (1719c <__swsetup_r+0xe0>)
   170d8:	429c      	cmp	r4, r3
   170da:	d10f      	bne.n	170fc <__swsetup_r+0x40>
   170dc:	686c      	ldr	r4, [r5, #4]
   170de:	230c      	movs	r3, #12
   170e0:	5ee2      	ldrsh	r2, [r4, r3]
   170e2:	b293      	uxth	r3, r2
   170e4:	0719      	lsls	r1, r3, #28
   170e6:	d42d      	bmi.n	17144 <__swsetup_r+0x88>
   170e8:	06d9      	lsls	r1, r3, #27
   170ea:	d411      	bmi.n	17110 <__swsetup_r+0x54>
   170ec:	2309      	movs	r3, #9
   170ee:	2001      	movs	r0, #1
   170f0:	6033      	str	r3, [r6, #0]
   170f2:	3337      	adds	r3, #55	; 0x37
   170f4:	4313      	orrs	r3, r2
   170f6:	81a3      	strh	r3, [r4, #12]
   170f8:	4240      	negs	r0, r0
   170fa:	bd70      	pop	{r4, r5, r6, pc}
   170fc:	4b28      	ldr	r3, [pc, #160]	; (171a0 <__swsetup_r+0xe4>)
   170fe:	429c      	cmp	r4, r3
   17100:	d101      	bne.n	17106 <__swsetup_r+0x4a>
   17102:	68ac      	ldr	r4, [r5, #8]
   17104:	e7eb      	b.n	170de <__swsetup_r+0x22>
   17106:	4b27      	ldr	r3, [pc, #156]	; (171a4 <__swsetup_r+0xe8>)
   17108:	429c      	cmp	r4, r3
   1710a:	d1e8      	bne.n	170de <__swsetup_r+0x22>
   1710c:	68ec      	ldr	r4, [r5, #12]
   1710e:	e7e6      	b.n	170de <__swsetup_r+0x22>
   17110:	075b      	lsls	r3, r3, #29
   17112:	d513      	bpl.n	1713c <__swsetup_r+0x80>
   17114:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17116:	2900      	cmp	r1, #0
   17118:	d008      	beq.n	1712c <__swsetup_r+0x70>
   1711a:	0023      	movs	r3, r4
   1711c:	3344      	adds	r3, #68	; 0x44
   1711e:	4299      	cmp	r1, r3
   17120:	d002      	beq.n	17128 <__swsetup_r+0x6c>
   17122:	0030      	movs	r0, r6
   17124:	f7ff fcb4 	bl	16a90 <_free_r>
   17128:	2300      	movs	r3, #0
   1712a:	6363      	str	r3, [r4, #52]	; 0x34
   1712c:	2224      	movs	r2, #36	; 0x24
   1712e:	89a3      	ldrh	r3, [r4, #12]
   17130:	4393      	bics	r3, r2
   17132:	81a3      	strh	r3, [r4, #12]
   17134:	2300      	movs	r3, #0
   17136:	6063      	str	r3, [r4, #4]
   17138:	6923      	ldr	r3, [r4, #16]
   1713a:	6023      	str	r3, [r4, #0]
   1713c:	2308      	movs	r3, #8
   1713e:	89a2      	ldrh	r2, [r4, #12]
   17140:	4313      	orrs	r3, r2
   17142:	81a3      	strh	r3, [r4, #12]
   17144:	6923      	ldr	r3, [r4, #16]
   17146:	2b00      	cmp	r3, #0
   17148:	d10b      	bne.n	17162 <__swsetup_r+0xa6>
   1714a:	21a0      	movs	r1, #160	; 0xa0
   1714c:	2280      	movs	r2, #128	; 0x80
   1714e:	89a3      	ldrh	r3, [r4, #12]
   17150:	0089      	lsls	r1, r1, #2
   17152:	0092      	lsls	r2, r2, #2
   17154:	400b      	ands	r3, r1
   17156:	4293      	cmp	r3, r2
   17158:	d003      	beq.n	17162 <__swsetup_r+0xa6>
   1715a:	0021      	movs	r1, r4
   1715c:	0030      	movs	r0, r6
   1715e:	f000 f9d9 	bl	17514 <__smakebuf_r>
   17162:	2301      	movs	r3, #1
   17164:	89a2      	ldrh	r2, [r4, #12]
   17166:	4013      	ands	r3, r2
   17168:	d011      	beq.n	1718e <__swsetup_r+0xd2>
   1716a:	2300      	movs	r3, #0
   1716c:	60a3      	str	r3, [r4, #8]
   1716e:	6963      	ldr	r3, [r4, #20]
   17170:	425b      	negs	r3, r3
   17172:	61a3      	str	r3, [r4, #24]
   17174:	2000      	movs	r0, #0
   17176:	6923      	ldr	r3, [r4, #16]
   17178:	4283      	cmp	r3, r0
   1717a:	d1be      	bne.n	170fa <__swsetup_r+0x3e>
   1717c:	230c      	movs	r3, #12
   1717e:	5ee2      	ldrsh	r2, [r4, r3]
   17180:	0613      	lsls	r3, r2, #24
   17182:	d5ba      	bpl.n	170fa <__swsetup_r+0x3e>
   17184:	2340      	movs	r3, #64	; 0x40
   17186:	4313      	orrs	r3, r2
   17188:	81a3      	strh	r3, [r4, #12]
   1718a:	3801      	subs	r0, #1
   1718c:	e7b5      	b.n	170fa <__swsetup_r+0x3e>
   1718e:	0792      	lsls	r2, r2, #30
   17190:	d400      	bmi.n	17194 <__swsetup_r+0xd8>
   17192:	6963      	ldr	r3, [r4, #20]
   17194:	60a3      	str	r3, [r4, #8]
   17196:	e7ed      	b.n	17174 <__swsetup_r+0xb8>
   17198:	200001f0 	.word	0x200001f0
   1719c:	0001a36c 	.word	0x0001a36c
   171a0:	0001a38c 	.word	0x0001a38c
   171a4:	0001a34c 	.word	0x0001a34c

000171a8 <__sflush_r>:
   171a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   171aa:	898a      	ldrh	r2, [r1, #12]
   171ac:	0005      	movs	r5, r0
   171ae:	000c      	movs	r4, r1
   171b0:	0713      	lsls	r3, r2, #28
   171b2:	d460      	bmi.n	17276 <__sflush_r+0xce>
   171b4:	684b      	ldr	r3, [r1, #4]
   171b6:	2b00      	cmp	r3, #0
   171b8:	dc04      	bgt.n	171c4 <__sflush_r+0x1c>
   171ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   171bc:	2b00      	cmp	r3, #0
   171be:	dc01      	bgt.n	171c4 <__sflush_r+0x1c>
   171c0:	2000      	movs	r0, #0
   171c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   171c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   171c6:	2f00      	cmp	r7, #0
   171c8:	d0fa      	beq.n	171c0 <__sflush_r+0x18>
   171ca:	2300      	movs	r3, #0
   171cc:	682e      	ldr	r6, [r5, #0]
   171ce:	602b      	str	r3, [r5, #0]
   171d0:	2380      	movs	r3, #128	; 0x80
   171d2:	015b      	lsls	r3, r3, #5
   171d4:	401a      	ands	r2, r3
   171d6:	d034      	beq.n	17242 <__sflush_r+0x9a>
   171d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   171da:	89a3      	ldrh	r3, [r4, #12]
   171dc:	075b      	lsls	r3, r3, #29
   171de:	d506      	bpl.n	171ee <__sflush_r+0x46>
   171e0:	6863      	ldr	r3, [r4, #4]
   171e2:	1ac0      	subs	r0, r0, r3
   171e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   171e6:	2b00      	cmp	r3, #0
   171e8:	d001      	beq.n	171ee <__sflush_r+0x46>
   171ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   171ec:	1ac0      	subs	r0, r0, r3
   171ee:	0002      	movs	r2, r0
   171f0:	6a21      	ldr	r1, [r4, #32]
   171f2:	2300      	movs	r3, #0
   171f4:	0028      	movs	r0, r5
   171f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   171f8:	47b8      	blx	r7
   171fa:	89a1      	ldrh	r1, [r4, #12]
   171fc:	1c43      	adds	r3, r0, #1
   171fe:	d106      	bne.n	1720e <__sflush_r+0x66>
   17200:	682b      	ldr	r3, [r5, #0]
   17202:	2b1d      	cmp	r3, #29
   17204:	d831      	bhi.n	1726a <__sflush_r+0xc2>
   17206:	4a2c      	ldr	r2, [pc, #176]	; (172b8 <__sflush_r+0x110>)
   17208:	40da      	lsrs	r2, r3
   1720a:	07d3      	lsls	r3, r2, #31
   1720c:	d52d      	bpl.n	1726a <__sflush_r+0xc2>
   1720e:	2300      	movs	r3, #0
   17210:	6063      	str	r3, [r4, #4]
   17212:	6923      	ldr	r3, [r4, #16]
   17214:	6023      	str	r3, [r4, #0]
   17216:	04cb      	lsls	r3, r1, #19
   17218:	d505      	bpl.n	17226 <__sflush_r+0x7e>
   1721a:	1c43      	adds	r3, r0, #1
   1721c:	d102      	bne.n	17224 <__sflush_r+0x7c>
   1721e:	682b      	ldr	r3, [r5, #0]
   17220:	2b00      	cmp	r3, #0
   17222:	d100      	bne.n	17226 <__sflush_r+0x7e>
   17224:	6560      	str	r0, [r4, #84]	; 0x54
   17226:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17228:	602e      	str	r6, [r5, #0]
   1722a:	2900      	cmp	r1, #0
   1722c:	d0c8      	beq.n	171c0 <__sflush_r+0x18>
   1722e:	0023      	movs	r3, r4
   17230:	3344      	adds	r3, #68	; 0x44
   17232:	4299      	cmp	r1, r3
   17234:	d002      	beq.n	1723c <__sflush_r+0x94>
   17236:	0028      	movs	r0, r5
   17238:	f7ff fc2a 	bl	16a90 <_free_r>
   1723c:	2000      	movs	r0, #0
   1723e:	6360      	str	r0, [r4, #52]	; 0x34
   17240:	e7bf      	b.n	171c2 <__sflush_r+0x1a>
   17242:	2301      	movs	r3, #1
   17244:	6a21      	ldr	r1, [r4, #32]
   17246:	0028      	movs	r0, r5
   17248:	47b8      	blx	r7
   1724a:	1c43      	adds	r3, r0, #1
   1724c:	d1c5      	bne.n	171da <__sflush_r+0x32>
   1724e:	682b      	ldr	r3, [r5, #0]
   17250:	2b00      	cmp	r3, #0
   17252:	d0c2      	beq.n	171da <__sflush_r+0x32>
   17254:	2b1d      	cmp	r3, #29
   17256:	d001      	beq.n	1725c <__sflush_r+0xb4>
   17258:	2b16      	cmp	r3, #22
   1725a:	d101      	bne.n	17260 <__sflush_r+0xb8>
   1725c:	602e      	str	r6, [r5, #0]
   1725e:	e7af      	b.n	171c0 <__sflush_r+0x18>
   17260:	2340      	movs	r3, #64	; 0x40
   17262:	89a2      	ldrh	r2, [r4, #12]
   17264:	4313      	orrs	r3, r2
   17266:	81a3      	strh	r3, [r4, #12]
   17268:	e7ab      	b.n	171c2 <__sflush_r+0x1a>
   1726a:	2340      	movs	r3, #64	; 0x40
   1726c:	430b      	orrs	r3, r1
   1726e:	2001      	movs	r0, #1
   17270:	81a3      	strh	r3, [r4, #12]
   17272:	4240      	negs	r0, r0
   17274:	e7a5      	b.n	171c2 <__sflush_r+0x1a>
   17276:	690f      	ldr	r7, [r1, #16]
   17278:	2f00      	cmp	r7, #0
   1727a:	d0a1      	beq.n	171c0 <__sflush_r+0x18>
   1727c:	680b      	ldr	r3, [r1, #0]
   1727e:	600f      	str	r7, [r1, #0]
   17280:	1bdb      	subs	r3, r3, r7
   17282:	9301      	str	r3, [sp, #4]
   17284:	2300      	movs	r3, #0
   17286:	0792      	lsls	r2, r2, #30
   17288:	d100      	bne.n	1728c <__sflush_r+0xe4>
   1728a:	694b      	ldr	r3, [r1, #20]
   1728c:	60a3      	str	r3, [r4, #8]
   1728e:	9b01      	ldr	r3, [sp, #4]
   17290:	2b00      	cmp	r3, #0
   17292:	dc00      	bgt.n	17296 <__sflush_r+0xee>
   17294:	e794      	b.n	171c0 <__sflush_r+0x18>
   17296:	9b01      	ldr	r3, [sp, #4]
   17298:	003a      	movs	r2, r7
   1729a:	6a21      	ldr	r1, [r4, #32]
   1729c:	0028      	movs	r0, r5
   1729e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   172a0:	47b0      	blx	r6
   172a2:	2800      	cmp	r0, #0
   172a4:	dc03      	bgt.n	172ae <__sflush_r+0x106>
   172a6:	2340      	movs	r3, #64	; 0x40
   172a8:	89a2      	ldrh	r2, [r4, #12]
   172aa:	4313      	orrs	r3, r2
   172ac:	e7df      	b.n	1726e <__sflush_r+0xc6>
   172ae:	9b01      	ldr	r3, [sp, #4]
   172b0:	183f      	adds	r7, r7, r0
   172b2:	1a1b      	subs	r3, r3, r0
   172b4:	9301      	str	r3, [sp, #4]
   172b6:	e7ea      	b.n	1728e <__sflush_r+0xe6>
   172b8:	20400001 	.word	0x20400001

000172bc <_fflush_r>:
   172bc:	690b      	ldr	r3, [r1, #16]
   172be:	b570      	push	{r4, r5, r6, lr}
   172c0:	0005      	movs	r5, r0
   172c2:	000c      	movs	r4, r1
   172c4:	2b00      	cmp	r3, #0
   172c6:	d101      	bne.n	172cc <_fflush_r+0x10>
   172c8:	2000      	movs	r0, #0
   172ca:	bd70      	pop	{r4, r5, r6, pc}
   172cc:	2800      	cmp	r0, #0
   172ce:	d004      	beq.n	172da <_fflush_r+0x1e>
   172d0:	6983      	ldr	r3, [r0, #24]
   172d2:	2b00      	cmp	r3, #0
   172d4:	d101      	bne.n	172da <_fflush_r+0x1e>
   172d6:	f000 f85f 	bl	17398 <__sinit>
   172da:	4b0b      	ldr	r3, [pc, #44]	; (17308 <_fflush_r+0x4c>)
   172dc:	429c      	cmp	r4, r3
   172de:	d109      	bne.n	172f4 <_fflush_r+0x38>
   172e0:	686c      	ldr	r4, [r5, #4]
   172e2:	220c      	movs	r2, #12
   172e4:	5ea3      	ldrsh	r3, [r4, r2]
   172e6:	2b00      	cmp	r3, #0
   172e8:	d0ee      	beq.n	172c8 <_fflush_r+0xc>
   172ea:	0021      	movs	r1, r4
   172ec:	0028      	movs	r0, r5
   172ee:	f7ff ff5b 	bl	171a8 <__sflush_r>
   172f2:	e7ea      	b.n	172ca <_fflush_r+0xe>
   172f4:	4b05      	ldr	r3, [pc, #20]	; (1730c <_fflush_r+0x50>)
   172f6:	429c      	cmp	r4, r3
   172f8:	d101      	bne.n	172fe <_fflush_r+0x42>
   172fa:	68ac      	ldr	r4, [r5, #8]
   172fc:	e7f1      	b.n	172e2 <_fflush_r+0x26>
   172fe:	4b04      	ldr	r3, [pc, #16]	; (17310 <_fflush_r+0x54>)
   17300:	429c      	cmp	r4, r3
   17302:	d1ee      	bne.n	172e2 <_fflush_r+0x26>
   17304:	68ec      	ldr	r4, [r5, #12]
   17306:	e7ec      	b.n	172e2 <_fflush_r+0x26>
   17308:	0001a36c 	.word	0x0001a36c
   1730c:	0001a38c 	.word	0x0001a38c
   17310:	0001a34c 	.word	0x0001a34c

00017314 <_cleanup_r>:
   17314:	b510      	push	{r4, lr}
   17316:	4902      	ldr	r1, [pc, #8]	; (17320 <_cleanup_r+0xc>)
   17318:	f000 f8b2 	bl	17480 <_fwalk_reent>
   1731c:	bd10      	pop	{r4, pc}
   1731e:	46c0      	nop			; (mov r8, r8)
   17320:	000172bd 	.word	0x000172bd

00017324 <std.isra.0>:
   17324:	2300      	movs	r3, #0
   17326:	b510      	push	{r4, lr}
   17328:	0004      	movs	r4, r0
   1732a:	6003      	str	r3, [r0, #0]
   1732c:	6043      	str	r3, [r0, #4]
   1732e:	6083      	str	r3, [r0, #8]
   17330:	8181      	strh	r1, [r0, #12]
   17332:	6643      	str	r3, [r0, #100]	; 0x64
   17334:	81c2      	strh	r2, [r0, #14]
   17336:	6103      	str	r3, [r0, #16]
   17338:	6143      	str	r3, [r0, #20]
   1733a:	6183      	str	r3, [r0, #24]
   1733c:	0019      	movs	r1, r3
   1733e:	2208      	movs	r2, #8
   17340:	305c      	adds	r0, #92	; 0x5c
   17342:	f7ff fb9c 	bl	16a7e <memset>
   17346:	4b05      	ldr	r3, [pc, #20]	; (1735c <std.isra.0+0x38>)
   17348:	6224      	str	r4, [r4, #32]
   1734a:	6263      	str	r3, [r4, #36]	; 0x24
   1734c:	4b04      	ldr	r3, [pc, #16]	; (17360 <std.isra.0+0x3c>)
   1734e:	62a3      	str	r3, [r4, #40]	; 0x28
   17350:	4b04      	ldr	r3, [pc, #16]	; (17364 <std.isra.0+0x40>)
   17352:	62e3      	str	r3, [r4, #44]	; 0x2c
   17354:	4b04      	ldr	r3, [pc, #16]	; (17368 <std.isra.0+0x44>)
   17356:	6323      	str	r3, [r4, #48]	; 0x30
   17358:	bd10      	pop	{r4, pc}
   1735a:	46c0      	nop			; (mov r8, r8)
   1735c:	00017e71 	.word	0x00017e71
   17360:	00017e99 	.word	0x00017e99
   17364:	00017ed1 	.word	0x00017ed1
   17368:	00017efd 	.word	0x00017efd

0001736c <__sfmoreglue>:
   1736c:	b570      	push	{r4, r5, r6, lr}
   1736e:	2568      	movs	r5, #104	; 0x68
   17370:	1e4a      	subs	r2, r1, #1
   17372:	4355      	muls	r5, r2
   17374:	000e      	movs	r6, r1
   17376:	0029      	movs	r1, r5
   17378:	3174      	adds	r1, #116	; 0x74
   1737a:	f7ff fbd3 	bl	16b24 <_malloc_r>
   1737e:	1e04      	subs	r4, r0, #0
   17380:	d008      	beq.n	17394 <__sfmoreglue+0x28>
   17382:	2100      	movs	r1, #0
   17384:	002a      	movs	r2, r5
   17386:	6001      	str	r1, [r0, #0]
   17388:	6046      	str	r6, [r0, #4]
   1738a:	300c      	adds	r0, #12
   1738c:	60a0      	str	r0, [r4, #8]
   1738e:	3268      	adds	r2, #104	; 0x68
   17390:	f7ff fb75 	bl	16a7e <memset>
   17394:	0020      	movs	r0, r4
   17396:	bd70      	pop	{r4, r5, r6, pc}

00017398 <__sinit>:
   17398:	6983      	ldr	r3, [r0, #24]
   1739a:	b513      	push	{r0, r1, r4, lr}
   1739c:	0004      	movs	r4, r0
   1739e:	2b00      	cmp	r3, #0
   173a0:	d128      	bne.n	173f4 <__sinit+0x5c>
   173a2:	6483      	str	r3, [r0, #72]	; 0x48
   173a4:	64c3      	str	r3, [r0, #76]	; 0x4c
   173a6:	6503      	str	r3, [r0, #80]	; 0x50
   173a8:	4b13      	ldr	r3, [pc, #76]	; (173f8 <__sinit+0x60>)
   173aa:	4a14      	ldr	r2, [pc, #80]	; (173fc <__sinit+0x64>)
   173ac:	681b      	ldr	r3, [r3, #0]
   173ae:	6282      	str	r2, [r0, #40]	; 0x28
   173b0:	9301      	str	r3, [sp, #4]
   173b2:	4298      	cmp	r0, r3
   173b4:	d101      	bne.n	173ba <__sinit+0x22>
   173b6:	2301      	movs	r3, #1
   173b8:	6183      	str	r3, [r0, #24]
   173ba:	0020      	movs	r0, r4
   173bc:	f000 f820 	bl	17400 <__sfp>
   173c0:	6060      	str	r0, [r4, #4]
   173c2:	0020      	movs	r0, r4
   173c4:	f000 f81c 	bl	17400 <__sfp>
   173c8:	60a0      	str	r0, [r4, #8]
   173ca:	0020      	movs	r0, r4
   173cc:	f000 f818 	bl	17400 <__sfp>
   173d0:	2200      	movs	r2, #0
   173d2:	60e0      	str	r0, [r4, #12]
   173d4:	2104      	movs	r1, #4
   173d6:	6860      	ldr	r0, [r4, #4]
   173d8:	f7ff ffa4 	bl	17324 <std.isra.0>
   173dc:	2201      	movs	r2, #1
   173de:	2109      	movs	r1, #9
   173e0:	68a0      	ldr	r0, [r4, #8]
   173e2:	f7ff ff9f 	bl	17324 <std.isra.0>
   173e6:	2202      	movs	r2, #2
   173e8:	2112      	movs	r1, #18
   173ea:	68e0      	ldr	r0, [r4, #12]
   173ec:	f7ff ff9a 	bl	17324 <std.isra.0>
   173f0:	2301      	movs	r3, #1
   173f2:	61a3      	str	r3, [r4, #24]
   173f4:	bd13      	pop	{r0, r1, r4, pc}
   173f6:	46c0      	nop			; (mov r8, r8)
   173f8:	0001a348 	.word	0x0001a348
   173fc:	00017315 	.word	0x00017315

00017400 <__sfp>:
   17400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17402:	4b1e      	ldr	r3, [pc, #120]	; (1747c <__sfp+0x7c>)
   17404:	0007      	movs	r7, r0
   17406:	681e      	ldr	r6, [r3, #0]
   17408:	69b3      	ldr	r3, [r6, #24]
   1740a:	2b00      	cmp	r3, #0
   1740c:	d102      	bne.n	17414 <__sfp+0x14>
   1740e:	0030      	movs	r0, r6
   17410:	f7ff ffc2 	bl	17398 <__sinit>
   17414:	3648      	adds	r6, #72	; 0x48
   17416:	68b4      	ldr	r4, [r6, #8]
   17418:	6873      	ldr	r3, [r6, #4]
   1741a:	3b01      	subs	r3, #1
   1741c:	d504      	bpl.n	17428 <__sfp+0x28>
   1741e:	6833      	ldr	r3, [r6, #0]
   17420:	2b00      	cmp	r3, #0
   17422:	d007      	beq.n	17434 <__sfp+0x34>
   17424:	6836      	ldr	r6, [r6, #0]
   17426:	e7f6      	b.n	17416 <__sfp+0x16>
   17428:	220c      	movs	r2, #12
   1742a:	5ea5      	ldrsh	r5, [r4, r2]
   1742c:	2d00      	cmp	r5, #0
   1742e:	d00d      	beq.n	1744c <__sfp+0x4c>
   17430:	3468      	adds	r4, #104	; 0x68
   17432:	e7f2      	b.n	1741a <__sfp+0x1a>
   17434:	2104      	movs	r1, #4
   17436:	0038      	movs	r0, r7
   17438:	f7ff ff98 	bl	1736c <__sfmoreglue>
   1743c:	6030      	str	r0, [r6, #0]
   1743e:	2800      	cmp	r0, #0
   17440:	d1f0      	bne.n	17424 <__sfp+0x24>
   17442:	230c      	movs	r3, #12
   17444:	0004      	movs	r4, r0
   17446:	603b      	str	r3, [r7, #0]
   17448:	0020      	movs	r0, r4
   1744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1744c:	2301      	movs	r3, #1
   1744e:	0020      	movs	r0, r4
   17450:	425b      	negs	r3, r3
   17452:	81e3      	strh	r3, [r4, #14]
   17454:	3302      	adds	r3, #2
   17456:	81a3      	strh	r3, [r4, #12]
   17458:	6665      	str	r5, [r4, #100]	; 0x64
   1745a:	6025      	str	r5, [r4, #0]
   1745c:	60a5      	str	r5, [r4, #8]
   1745e:	6065      	str	r5, [r4, #4]
   17460:	6125      	str	r5, [r4, #16]
   17462:	6165      	str	r5, [r4, #20]
   17464:	61a5      	str	r5, [r4, #24]
   17466:	2208      	movs	r2, #8
   17468:	0029      	movs	r1, r5
   1746a:	305c      	adds	r0, #92	; 0x5c
   1746c:	f7ff fb07 	bl	16a7e <memset>
   17470:	6365      	str	r5, [r4, #52]	; 0x34
   17472:	63a5      	str	r5, [r4, #56]	; 0x38
   17474:	64a5      	str	r5, [r4, #72]	; 0x48
   17476:	64e5      	str	r5, [r4, #76]	; 0x4c
   17478:	e7e6      	b.n	17448 <__sfp+0x48>
   1747a:	46c0      	nop			; (mov r8, r8)
   1747c:	0001a348 	.word	0x0001a348

00017480 <_fwalk_reent>:
   17480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17482:	0004      	movs	r4, r0
   17484:	0007      	movs	r7, r0
   17486:	2600      	movs	r6, #0
   17488:	9101      	str	r1, [sp, #4]
   1748a:	3448      	adds	r4, #72	; 0x48
   1748c:	2c00      	cmp	r4, #0
   1748e:	d101      	bne.n	17494 <_fwalk_reent+0x14>
   17490:	0030      	movs	r0, r6
   17492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17494:	6863      	ldr	r3, [r4, #4]
   17496:	68a5      	ldr	r5, [r4, #8]
   17498:	9300      	str	r3, [sp, #0]
   1749a:	9b00      	ldr	r3, [sp, #0]
   1749c:	3b01      	subs	r3, #1
   1749e:	9300      	str	r3, [sp, #0]
   174a0:	d501      	bpl.n	174a6 <_fwalk_reent+0x26>
   174a2:	6824      	ldr	r4, [r4, #0]
   174a4:	e7f2      	b.n	1748c <_fwalk_reent+0xc>
   174a6:	89ab      	ldrh	r3, [r5, #12]
   174a8:	2b01      	cmp	r3, #1
   174aa:	d908      	bls.n	174be <_fwalk_reent+0x3e>
   174ac:	220e      	movs	r2, #14
   174ae:	5eab      	ldrsh	r3, [r5, r2]
   174b0:	3301      	adds	r3, #1
   174b2:	d004      	beq.n	174be <_fwalk_reent+0x3e>
   174b4:	0029      	movs	r1, r5
   174b6:	0038      	movs	r0, r7
   174b8:	9b01      	ldr	r3, [sp, #4]
   174ba:	4798      	blx	r3
   174bc:	4306      	orrs	r6, r0
   174be:	3568      	adds	r5, #104	; 0x68
   174c0:	e7eb      	b.n	1749a <_fwalk_reent+0x1a>
	...

000174c4 <__swhatbuf_r>:
   174c4:	b570      	push	{r4, r5, r6, lr}
   174c6:	000e      	movs	r6, r1
   174c8:	001d      	movs	r5, r3
   174ca:	230e      	movs	r3, #14
   174cc:	5ec9      	ldrsh	r1, [r1, r3]
   174ce:	b090      	sub	sp, #64	; 0x40
   174d0:	0014      	movs	r4, r2
   174d2:	2900      	cmp	r1, #0
   174d4:	da07      	bge.n	174e6 <__swhatbuf_r+0x22>
   174d6:	2300      	movs	r3, #0
   174d8:	602b      	str	r3, [r5, #0]
   174da:	89b3      	ldrh	r3, [r6, #12]
   174dc:	061b      	lsls	r3, r3, #24
   174de:	d411      	bmi.n	17504 <__swhatbuf_r+0x40>
   174e0:	2380      	movs	r3, #128	; 0x80
   174e2:	00db      	lsls	r3, r3, #3
   174e4:	e00f      	b.n	17506 <__swhatbuf_r+0x42>
   174e6:	aa01      	add	r2, sp, #4
   174e8:	f000 fd34 	bl	17f54 <_fstat_r>
   174ec:	2800      	cmp	r0, #0
   174ee:	dbf2      	blt.n	174d6 <__swhatbuf_r+0x12>
   174f0:	22f0      	movs	r2, #240	; 0xf0
   174f2:	9b02      	ldr	r3, [sp, #8]
   174f4:	0212      	lsls	r2, r2, #8
   174f6:	4013      	ands	r3, r2
   174f8:	4a05      	ldr	r2, [pc, #20]	; (17510 <__swhatbuf_r+0x4c>)
   174fa:	189b      	adds	r3, r3, r2
   174fc:	425a      	negs	r2, r3
   174fe:	4153      	adcs	r3, r2
   17500:	602b      	str	r3, [r5, #0]
   17502:	e7ed      	b.n	174e0 <__swhatbuf_r+0x1c>
   17504:	2340      	movs	r3, #64	; 0x40
   17506:	2000      	movs	r0, #0
   17508:	6023      	str	r3, [r4, #0]
   1750a:	b010      	add	sp, #64	; 0x40
   1750c:	bd70      	pop	{r4, r5, r6, pc}
   1750e:	46c0      	nop			; (mov r8, r8)
   17510:	ffffe000 	.word	0xffffe000

00017514 <__smakebuf_r>:
   17514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17516:	2602      	movs	r6, #2
   17518:	898b      	ldrh	r3, [r1, #12]
   1751a:	0005      	movs	r5, r0
   1751c:	000c      	movs	r4, r1
   1751e:	4233      	tst	r3, r6
   17520:	d006      	beq.n	17530 <__smakebuf_r+0x1c>
   17522:	0023      	movs	r3, r4
   17524:	3347      	adds	r3, #71	; 0x47
   17526:	6023      	str	r3, [r4, #0]
   17528:	6123      	str	r3, [r4, #16]
   1752a:	2301      	movs	r3, #1
   1752c:	6163      	str	r3, [r4, #20]
   1752e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17530:	ab01      	add	r3, sp, #4
   17532:	466a      	mov	r2, sp
   17534:	f7ff ffc6 	bl	174c4 <__swhatbuf_r>
   17538:	9900      	ldr	r1, [sp, #0]
   1753a:	0007      	movs	r7, r0
   1753c:	0028      	movs	r0, r5
   1753e:	f7ff faf1 	bl	16b24 <_malloc_r>
   17542:	2800      	cmp	r0, #0
   17544:	d108      	bne.n	17558 <__smakebuf_r+0x44>
   17546:	220c      	movs	r2, #12
   17548:	5ea3      	ldrsh	r3, [r4, r2]
   1754a:	059a      	lsls	r2, r3, #22
   1754c:	d4ef      	bmi.n	1752e <__smakebuf_r+0x1a>
   1754e:	2203      	movs	r2, #3
   17550:	4393      	bics	r3, r2
   17552:	431e      	orrs	r6, r3
   17554:	81a6      	strh	r6, [r4, #12]
   17556:	e7e4      	b.n	17522 <__smakebuf_r+0xe>
   17558:	4b0f      	ldr	r3, [pc, #60]	; (17598 <__smakebuf_r+0x84>)
   1755a:	62ab      	str	r3, [r5, #40]	; 0x28
   1755c:	2380      	movs	r3, #128	; 0x80
   1755e:	89a2      	ldrh	r2, [r4, #12]
   17560:	6020      	str	r0, [r4, #0]
   17562:	4313      	orrs	r3, r2
   17564:	81a3      	strh	r3, [r4, #12]
   17566:	9b00      	ldr	r3, [sp, #0]
   17568:	6120      	str	r0, [r4, #16]
   1756a:	6163      	str	r3, [r4, #20]
   1756c:	9b01      	ldr	r3, [sp, #4]
   1756e:	2b00      	cmp	r3, #0
   17570:	d00d      	beq.n	1758e <__smakebuf_r+0x7a>
   17572:	230e      	movs	r3, #14
   17574:	5ee1      	ldrsh	r1, [r4, r3]
   17576:	0028      	movs	r0, r5
   17578:	f000 fcfe 	bl	17f78 <_isatty_r>
   1757c:	2800      	cmp	r0, #0
   1757e:	d006      	beq.n	1758e <__smakebuf_r+0x7a>
   17580:	2203      	movs	r2, #3
   17582:	89a3      	ldrh	r3, [r4, #12]
   17584:	4393      	bics	r3, r2
   17586:	001a      	movs	r2, r3
   17588:	2301      	movs	r3, #1
   1758a:	4313      	orrs	r3, r2
   1758c:	81a3      	strh	r3, [r4, #12]
   1758e:	89a0      	ldrh	r0, [r4, #12]
   17590:	4338      	orrs	r0, r7
   17592:	81a0      	strh	r0, [r4, #12]
   17594:	e7cb      	b.n	1752e <__smakebuf_r+0x1a>
   17596:	46c0      	nop			; (mov r8, r8)
   17598:	00017315 	.word	0x00017315

0001759c <__malloc_lock>:
   1759c:	4770      	bx	lr

0001759e <__malloc_unlock>:
   1759e:	4770      	bx	lr

000175a0 <__ssputs_r>:
   175a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   175a2:	688e      	ldr	r6, [r1, #8]
   175a4:	b085      	sub	sp, #20
   175a6:	0007      	movs	r7, r0
   175a8:	000c      	movs	r4, r1
   175aa:	9203      	str	r2, [sp, #12]
   175ac:	9301      	str	r3, [sp, #4]
   175ae:	429e      	cmp	r6, r3
   175b0:	d839      	bhi.n	17626 <__ssputs_r+0x86>
   175b2:	2390      	movs	r3, #144	; 0x90
   175b4:	898a      	ldrh	r2, [r1, #12]
   175b6:	00db      	lsls	r3, r3, #3
   175b8:	421a      	tst	r2, r3
   175ba:	d034      	beq.n	17626 <__ssputs_r+0x86>
   175bc:	2503      	movs	r5, #3
   175be:	6909      	ldr	r1, [r1, #16]
   175c0:	6823      	ldr	r3, [r4, #0]
   175c2:	1a5b      	subs	r3, r3, r1
   175c4:	9302      	str	r3, [sp, #8]
   175c6:	6963      	ldr	r3, [r4, #20]
   175c8:	9802      	ldr	r0, [sp, #8]
   175ca:	435d      	muls	r5, r3
   175cc:	0feb      	lsrs	r3, r5, #31
   175ce:	195d      	adds	r5, r3, r5
   175d0:	9b01      	ldr	r3, [sp, #4]
   175d2:	106d      	asrs	r5, r5, #1
   175d4:	3301      	adds	r3, #1
   175d6:	181b      	adds	r3, r3, r0
   175d8:	42ab      	cmp	r3, r5
   175da:	d900      	bls.n	175de <__ssputs_r+0x3e>
   175dc:	001d      	movs	r5, r3
   175de:	0553      	lsls	r3, r2, #21
   175e0:	d532      	bpl.n	17648 <__ssputs_r+0xa8>
   175e2:	0029      	movs	r1, r5
   175e4:	0038      	movs	r0, r7
   175e6:	f7ff fa9d 	bl	16b24 <_malloc_r>
   175ea:	1e06      	subs	r6, r0, #0
   175ec:	d109      	bne.n	17602 <__ssputs_r+0x62>
   175ee:	230c      	movs	r3, #12
   175f0:	603b      	str	r3, [r7, #0]
   175f2:	2340      	movs	r3, #64	; 0x40
   175f4:	2001      	movs	r0, #1
   175f6:	89a2      	ldrh	r2, [r4, #12]
   175f8:	4240      	negs	r0, r0
   175fa:	4313      	orrs	r3, r2
   175fc:	81a3      	strh	r3, [r4, #12]
   175fe:	b005      	add	sp, #20
   17600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17602:	9a02      	ldr	r2, [sp, #8]
   17604:	6921      	ldr	r1, [r4, #16]
   17606:	f7ff fa1f 	bl	16a48 <memcpy>
   1760a:	89a3      	ldrh	r3, [r4, #12]
   1760c:	4a14      	ldr	r2, [pc, #80]	; (17660 <__ssputs_r+0xc0>)
   1760e:	401a      	ands	r2, r3
   17610:	2380      	movs	r3, #128	; 0x80
   17612:	4313      	orrs	r3, r2
   17614:	81a3      	strh	r3, [r4, #12]
   17616:	9b02      	ldr	r3, [sp, #8]
   17618:	6126      	str	r6, [r4, #16]
   1761a:	18f6      	adds	r6, r6, r3
   1761c:	6026      	str	r6, [r4, #0]
   1761e:	6165      	str	r5, [r4, #20]
   17620:	9e01      	ldr	r6, [sp, #4]
   17622:	1aed      	subs	r5, r5, r3
   17624:	60a5      	str	r5, [r4, #8]
   17626:	9b01      	ldr	r3, [sp, #4]
   17628:	42b3      	cmp	r3, r6
   1762a:	d200      	bcs.n	1762e <__ssputs_r+0x8e>
   1762c:	001e      	movs	r6, r3
   1762e:	0032      	movs	r2, r6
   17630:	9903      	ldr	r1, [sp, #12]
   17632:	6820      	ldr	r0, [r4, #0]
   17634:	f7ff fa11 	bl	16a5a <memmove>
   17638:	68a3      	ldr	r3, [r4, #8]
   1763a:	2000      	movs	r0, #0
   1763c:	1b9b      	subs	r3, r3, r6
   1763e:	60a3      	str	r3, [r4, #8]
   17640:	6823      	ldr	r3, [r4, #0]
   17642:	199e      	adds	r6, r3, r6
   17644:	6026      	str	r6, [r4, #0]
   17646:	e7da      	b.n	175fe <__ssputs_r+0x5e>
   17648:	002a      	movs	r2, r5
   1764a:	0038      	movs	r0, r7
   1764c:	f000 fcc5 	bl	17fda <_realloc_r>
   17650:	1e06      	subs	r6, r0, #0
   17652:	d1e0      	bne.n	17616 <__ssputs_r+0x76>
   17654:	6921      	ldr	r1, [r4, #16]
   17656:	0038      	movs	r0, r7
   17658:	f7ff fa1a 	bl	16a90 <_free_r>
   1765c:	e7c7      	b.n	175ee <__ssputs_r+0x4e>
   1765e:	46c0      	nop			; (mov r8, r8)
   17660:	fffffb7f 	.word	0xfffffb7f

00017664 <_svfiprintf_r>:
   17664:	b5f0      	push	{r4, r5, r6, r7, lr}
   17666:	b09f      	sub	sp, #124	; 0x7c
   17668:	9002      	str	r0, [sp, #8]
   1766a:	9305      	str	r3, [sp, #20]
   1766c:	898b      	ldrh	r3, [r1, #12]
   1766e:	000f      	movs	r7, r1
   17670:	0016      	movs	r6, r2
   17672:	061b      	lsls	r3, r3, #24
   17674:	d511      	bpl.n	1769a <_svfiprintf_r+0x36>
   17676:	690b      	ldr	r3, [r1, #16]
   17678:	2b00      	cmp	r3, #0
   1767a:	d10e      	bne.n	1769a <_svfiprintf_r+0x36>
   1767c:	2140      	movs	r1, #64	; 0x40
   1767e:	f7ff fa51 	bl	16b24 <_malloc_r>
   17682:	6038      	str	r0, [r7, #0]
   17684:	6138      	str	r0, [r7, #16]
   17686:	2800      	cmp	r0, #0
   17688:	d105      	bne.n	17696 <_svfiprintf_r+0x32>
   1768a:	230c      	movs	r3, #12
   1768c:	9a02      	ldr	r2, [sp, #8]
   1768e:	3801      	subs	r0, #1
   17690:	6013      	str	r3, [r2, #0]
   17692:	b01f      	add	sp, #124	; 0x7c
   17694:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17696:	2340      	movs	r3, #64	; 0x40
   17698:	617b      	str	r3, [r7, #20]
   1769a:	2300      	movs	r3, #0
   1769c:	ad06      	add	r5, sp, #24
   1769e:	616b      	str	r3, [r5, #20]
   176a0:	3320      	adds	r3, #32
   176a2:	766b      	strb	r3, [r5, #25]
   176a4:	3310      	adds	r3, #16
   176a6:	76ab      	strb	r3, [r5, #26]
   176a8:	0034      	movs	r4, r6
   176aa:	7823      	ldrb	r3, [r4, #0]
   176ac:	2b00      	cmp	r3, #0
   176ae:	d147      	bne.n	17740 <_svfiprintf_r+0xdc>
   176b0:	1ba3      	subs	r3, r4, r6
   176b2:	9304      	str	r3, [sp, #16]
   176b4:	d00d      	beq.n	176d2 <_svfiprintf_r+0x6e>
   176b6:	1ba3      	subs	r3, r4, r6
   176b8:	0032      	movs	r2, r6
   176ba:	0039      	movs	r1, r7
   176bc:	9802      	ldr	r0, [sp, #8]
   176be:	f7ff ff6f 	bl	175a0 <__ssputs_r>
   176c2:	1c43      	adds	r3, r0, #1
   176c4:	d100      	bne.n	176c8 <_svfiprintf_r+0x64>
   176c6:	e0b5      	b.n	17834 <_svfiprintf_r+0x1d0>
   176c8:	696a      	ldr	r2, [r5, #20]
   176ca:	9b04      	ldr	r3, [sp, #16]
   176cc:	4694      	mov	ip, r2
   176ce:	4463      	add	r3, ip
   176d0:	616b      	str	r3, [r5, #20]
   176d2:	7823      	ldrb	r3, [r4, #0]
   176d4:	2b00      	cmp	r3, #0
   176d6:	d100      	bne.n	176da <_svfiprintf_r+0x76>
   176d8:	e0ac      	b.n	17834 <_svfiprintf_r+0x1d0>
   176da:	2201      	movs	r2, #1
   176dc:	2300      	movs	r3, #0
   176de:	4252      	negs	r2, r2
   176e0:	606a      	str	r2, [r5, #4]
   176e2:	a902      	add	r1, sp, #8
   176e4:	3254      	adds	r2, #84	; 0x54
   176e6:	1852      	adds	r2, r2, r1
   176e8:	3401      	adds	r4, #1
   176ea:	602b      	str	r3, [r5, #0]
   176ec:	60eb      	str	r3, [r5, #12]
   176ee:	60ab      	str	r3, [r5, #8]
   176f0:	7013      	strb	r3, [r2, #0]
   176f2:	65ab      	str	r3, [r5, #88]	; 0x58
   176f4:	4e58      	ldr	r6, [pc, #352]	; (17858 <_svfiprintf_r+0x1f4>)
   176f6:	2205      	movs	r2, #5
   176f8:	7821      	ldrb	r1, [r4, #0]
   176fa:	0030      	movs	r0, r6
   176fc:	f000 fc62 	bl	17fc4 <memchr>
   17700:	1c62      	adds	r2, r4, #1
   17702:	2800      	cmp	r0, #0
   17704:	d120      	bne.n	17748 <_svfiprintf_r+0xe4>
   17706:	6829      	ldr	r1, [r5, #0]
   17708:	06cb      	lsls	r3, r1, #27
   1770a:	d504      	bpl.n	17716 <_svfiprintf_r+0xb2>
   1770c:	2353      	movs	r3, #83	; 0x53
   1770e:	ae02      	add	r6, sp, #8
   17710:	3020      	adds	r0, #32
   17712:	199b      	adds	r3, r3, r6
   17714:	7018      	strb	r0, [r3, #0]
   17716:	070b      	lsls	r3, r1, #28
   17718:	d504      	bpl.n	17724 <_svfiprintf_r+0xc0>
   1771a:	2353      	movs	r3, #83	; 0x53
   1771c:	202b      	movs	r0, #43	; 0x2b
   1771e:	ae02      	add	r6, sp, #8
   17720:	199b      	adds	r3, r3, r6
   17722:	7018      	strb	r0, [r3, #0]
   17724:	7823      	ldrb	r3, [r4, #0]
   17726:	2b2a      	cmp	r3, #42	; 0x2a
   17728:	d016      	beq.n	17758 <_svfiprintf_r+0xf4>
   1772a:	2000      	movs	r0, #0
   1772c:	210a      	movs	r1, #10
   1772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17730:	7822      	ldrb	r2, [r4, #0]
   17732:	3a30      	subs	r2, #48	; 0x30
   17734:	2a09      	cmp	r2, #9
   17736:	d955      	bls.n	177e4 <_svfiprintf_r+0x180>
   17738:	2800      	cmp	r0, #0
   1773a:	d015      	beq.n	17768 <_svfiprintf_r+0x104>
   1773c:	9309      	str	r3, [sp, #36]	; 0x24
   1773e:	e013      	b.n	17768 <_svfiprintf_r+0x104>
   17740:	2b25      	cmp	r3, #37	; 0x25
   17742:	d0b5      	beq.n	176b0 <_svfiprintf_r+0x4c>
   17744:	3401      	adds	r4, #1
   17746:	e7b0      	b.n	176aa <_svfiprintf_r+0x46>
   17748:	2301      	movs	r3, #1
   1774a:	1b80      	subs	r0, r0, r6
   1774c:	4083      	lsls	r3, r0
   1774e:	6829      	ldr	r1, [r5, #0]
   17750:	0014      	movs	r4, r2
   17752:	430b      	orrs	r3, r1
   17754:	602b      	str	r3, [r5, #0]
   17756:	e7cd      	b.n	176f4 <_svfiprintf_r+0x90>
   17758:	9b05      	ldr	r3, [sp, #20]
   1775a:	1d18      	adds	r0, r3, #4
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	9005      	str	r0, [sp, #20]
   17760:	2b00      	cmp	r3, #0
   17762:	db39      	blt.n	177d8 <_svfiprintf_r+0x174>
   17764:	9309      	str	r3, [sp, #36]	; 0x24
   17766:	0014      	movs	r4, r2
   17768:	7823      	ldrb	r3, [r4, #0]
   1776a:	2b2e      	cmp	r3, #46	; 0x2e
   1776c:	d10b      	bne.n	17786 <_svfiprintf_r+0x122>
   1776e:	7863      	ldrb	r3, [r4, #1]
   17770:	1c62      	adds	r2, r4, #1
   17772:	2b2a      	cmp	r3, #42	; 0x2a
   17774:	d13e      	bne.n	177f4 <_svfiprintf_r+0x190>
   17776:	9b05      	ldr	r3, [sp, #20]
   17778:	3402      	adds	r4, #2
   1777a:	1d1a      	adds	r2, r3, #4
   1777c:	681b      	ldr	r3, [r3, #0]
   1777e:	9205      	str	r2, [sp, #20]
   17780:	2b00      	cmp	r3, #0
   17782:	db34      	blt.n	177ee <_svfiprintf_r+0x18a>
   17784:	9307      	str	r3, [sp, #28]
   17786:	4e35      	ldr	r6, [pc, #212]	; (1785c <_svfiprintf_r+0x1f8>)
   17788:	7821      	ldrb	r1, [r4, #0]
   1778a:	2203      	movs	r2, #3
   1778c:	0030      	movs	r0, r6
   1778e:	f000 fc19 	bl	17fc4 <memchr>
   17792:	2800      	cmp	r0, #0
   17794:	d006      	beq.n	177a4 <_svfiprintf_r+0x140>
   17796:	2340      	movs	r3, #64	; 0x40
   17798:	1b80      	subs	r0, r0, r6
   1779a:	4083      	lsls	r3, r0
   1779c:	682a      	ldr	r2, [r5, #0]
   1779e:	3401      	adds	r4, #1
   177a0:	4313      	orrs	r3, r2
   177a2:	602b      	str	r3, [r5, #0]
   177a4:	7821      	ldrb	r1, [r4, #0]
   177a6:	2206      	movs	r2, #6
   177a8:	482d      	ldr	r0, [pc, #180]	; (17860 <_svfiprintf_r+0x1fc>)
   177aa:	1c66      	adds	r6, r4, #1
   177ac:	7629      	strb	r1, [r5, #24]
   177ae:	f000 fc09 	bl	17fc4 <memchr>
   177b2:	2800      	cmp	r0, #0
   177b4:	d046      	beq.n	17844 <_svfiprintf_r+0x1e0>
   177b6:	4b2b      	ldr	r3, [pc, #172]	; (17864 <_svfiprintf_r+0x200>)
   177b8:	2b00      	cmp	r3, #0
   177ba:	d12f      	bne.n	1781c <_svfiprintf_r+0x1b8>
   177bc:	6829      	ldr	r1, [r5, #0]
   177be:	9b05      	ldr	r3, [sp, #20]
   177c0:	2207      	movs	r2, #7
   177c2:	05c9      	lsls	r1, r1, #23
   177c4:	d528      	bpl.n	17818 <_svfiprintf_r+0x1b4>
   177c6:	189b      	adds	r3, r3, r2
   177c8:	4393      	bics	r3, r2
   177ca:	3308      	adds	r3, #8
   177cc:	9305      	str	r3, [sp, #20]
   177ce:	696b      	ldr	r3, [r5, #20]
   177d0:	9a03      	ldr	r2, [sp, #12]
   177d2:	189b      	adds	r3, r3, r2
   177d4:	616b      	str	r3, [r5, #20]
   177d6:	e767      	b.n	176a8 <_svfiprintf_r+0x44>
   177d8:	425b      	negs	r3, r3
   177da:	60eb      	str	r3, [r5, #12]
   177dc:	2302      	movs	r3, #2
   177de:	430b      	orrs	r3, r1
   177e0:	602b      	str	r3, [r5, #0]
   177e2:	e7c0      	b.n	17766 <_svfiprintf_r+0x102>
   177e4:	434b      	muls	r3, r1
   177e6:	3401      	adds	r4, #1
   177e8:	189b      	adds	r3, r3, r2
   177ea:	2001      	movs	r0, #1
   177ec:	e7a0      	b.n	17730 <_svfiprintf_r+0xcc>
   177ee:	2301      	movs	r3, #1
   177f0:	425b      	negs	r3, r3
   177f2:	e7c7      	b.n	17784 <_svfiprintf_r+0x120>
   177f4:	2300      	movs	r3, #0
   177f6:	0014      	movs	r4, r2
   177f8:	200a      	movs	r0, #10
   177fa:	001a      	movs	r2, r3
   177fc:	606b      	str	r3, [r5, #4]
   177fe:	7821      	ldrb	r1, [r4, #0]
   17800:	3930      	subs	r1, #48	; 0x30
   17802:	2909      	cmp	r1, #9
   17804:	d903      	bls.n	1780e <_svfiprintf_r+0x1aa>
   17806:	2b00      	cmp	r3, #0
   17808:	d0bd      	beq.n	17786 <_svfiprintf_r+0x122>
   1780a:	9207      	str	r2, [sp, #28]
   1780c:	e7bb      	b.n	17786 <_svfiprintf_r+0x122>
   1780e:	4342      	muls	r2, r0
   17810:	3401      	adds	r4, #1
   17812:	1852      	adds	r2, r2, r1
   17814:	2301      	movs	r3, #1
   17816:	e7f2      	b.n	177fe <_svfiprintf_r+0x19a>
   17818:	3307      	adds	r3, #7
   1781a:	e7d5      	b.n	177c8 <_svfiprintf_r+0x164>
   1781c:	ab05      	add	r3, sp, #20
   1781e:	9300      	str	r3, [sp, #0]
   17820:	003a      	movs	r2, r7
   17822:	4b11      	ldr	r3, [pc, #68]	; (17868 <_svfiprintf_r+0x204>)
   17824:	0029      	movs	r1, r5
   17826:	9802      	ldr	r0, [sp, #8]
   17828:	e000      	b.n	1782c <_svfiprintf_r+0x1c8>
   1782a:	bf00      	nop
   1782c:	9003      	str	r0, [sp, #12]
   1782e:	9b03      	ldr	r3, [sp, #12]
   17830:	3301      	adds	r3, #1
   17832:	d1cc      	bne.n	177ce <_svfiprintf_r+0x16a>
   17834:	89bb      	ldrh	r3, [r7, #12]
   17836:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17838:	065b      	lsls	r3, r3, #25
   1783a:	d400      	bmi.n	1783e <_svfiprintf_r+0x1da>
   1783c:	e729      	b.n	17692 <_svfiprintf_r+0x2e>
   1783e:	2001      	movs	r0, #1
   17840:	4240      	negs	r0, r0
   17842:	e726      	b.n	17692 <_svfiprintf_r+0x2e>
   17844:	ab05      	add	r3, sp, #20
   17846:	9300      	str	r3, [sp, #0]
   17848:	003a      	movs	r2, r7
   1784a:	4b07      	ldr	r3, [pc, #28]	; (17868 <_svfiprintf_r+0x204>)
   1784c:	0029      	movs	r1, r5
   1784e:	9802      	ldr	r0, [sp, #8]
   17850:	f000 f9be 	bl	17bd0 <_printf_i>
   17854:	e7ea      	b.n	1782c <_svfiprintf_r+0x1c8>
   17856:	46c0      	nop			; (mov r8, r8)
   17858:	0001a3ac 	.word	0x0001a3ac
   1785c:	0001a3b2 	.word	0x0001a3b2
   17860:	0001a3b6 	.word	0x0001a3b6
   17864:	00000000 	.word	0x00000000
   17868:	000175a1 	.word	0x000175a1

0001786c <__sfputc_r>:
   1786c:	6893      	ldr	r3, [r2, #8]
   1786e:	b510      	push	{r4, lr}
   17870:	3b01      	subs	r3, #1
   17872:	6093      	str	r3, [r2, #8]
   17874:	2b00      	cmp	r3, #0
   17876:	da05      	bge.n	17884 <__sfputc_r+0x18>
   17878:	6994      	ldr	r4, [r2, #24]
   1787a:	42a3      	cmp	r3, r4
   1787c:	db08      	blt.n	17890 <__sfputc_r+0x24>
   1787e:	b2cb      	uxtb	r3, r1
   17880:	2b0a      	cmp	r3, #10
   17882:	d005      	beq.n	17890 <__sfputc_r+0x24>
   17884:	6813      	ldr	r3, [r2, #0]
   17886:	1c58      	adds	r0, r3, #1
   17888:	6010      	str	r0, [r2, #0]
   1788a:	7019      	strb	r1, [r3, #0]
   1788c:	b2c8      	uxtb	r0, r1
   1788e:	bd10      	pop	{r4, pc}
   17890:	f7ff fbbe 	bl	17010 <__swbuf_r>
   17894:	e7fb      	b.n	1788e <__sfputc_r+0x22>

00017896 <__sfputs_r>:
   17896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17898:	0006      	movs	r6, r0
   1789a:	000f      	movs	r7, r1
   1789c:	0014      	movs	r4, r2
   1789e:	18d5      	adds	r5, r2, r3
   178a0:	42ac      	cmp	r4, r5
   178a2:	d101      	bne.n	178a8 <__sfputs_r+0x12>
   178a4:	2000      	movs	r0, #0
   178a6:	e007      	b.n	178b8 <__sfputs_r+0x22>
   178a8:	7821      	ldrb	r1, [r4, #0]
   178aa:	003a      	movs	r2, r7
   178ac:	0030      	movs	r0, r6
   178ae:	f7ff ffdd 	bl	1786c <__sfputc_r>
   178b2:	3401      	adds	r4, #1
   178b4:	1c43      	adds	r3, r0, #1
   178b6:	d1f3      	bne.n	178a0 <__sfputs_r+0xa>
   178b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000178bc <_vfiprintf_r>:
   178bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   178be:	b09f      	sub	sp, #124	; 0x7c
   178c0:	0006      	movs	r6, r0
   178c2:	000f      	movs	r7, r1
   178c4:	0014      	movs	r4, r2
   178c6:	9305      	str	r3, [sp, #20]
   178c8:	2800      	cmp	r0, #0
   178ca:	d004      	beq.n	178d6 <_vfiprintf_r+0x1a>
   178cc:	6983      	ldr	r3, [r0, #24]
   178ce:	2b00      	cmp	r3, #0
   178d0:	d101      	bne.n	178d6 <_vfiprintf_r+0x1a>
   178d2:	f7ff fd61 	bl	17398 <__sinit>
   178d6:	4b7f      	ldr	r3, [pc, #508]	; (17ad4 <_vfiprintf_r+0x218>)
   178d8:	429f      	cmp	r7, r3
   178da:	d15c      	bne.n	17996 <_vfiprintf_r+0xda>
   178dc:	6877      	ldr	r7, [r6, #4]
   178de:	89bb      	ldrh	r3, [r7, #12]
   178e0:	071b      	lsls	r3, r3, #28
   178e2:	d562      	bpl.n	179aa <_vfiprintf_r+0xee>
   178e4:	693b      	ldr	r3, [r7, #16]
   178e6:	2b00      	cmp	r3, #0
   178e8:	d05f      	beq.n	179aa <_vfiprintf_r+0xee>
   178ea:	2300      	movs	r3, #0
   178ec:	ad06      	add	r5, sp, #24
   178ee:	616b      	str	r3, [r5, #20]
   178f0:	3320      	adds	r3, #32
   178f2:	766b      	strb	r3, [r5, #25]
   178f4:	3310      	adds	r3, #16
   178f6:	76ab      	strb	r3, [r5, #26]
   178f8:	9402      	str	r4, [sp, #8]
   178fa:	9c02      	ldr	r4, [sp, #8]
   178fc:	7823      	ldrb	r3, [r4, #0]
   178fe:	2b00      	cmp	r3, #0
   17900:	d15d      	bne.n	179be <_vfiprintf_r+0x102>
   17902:	9b02      	ldr	r3, [sp, #8]
   17904:	1ae3      	subs	r3, r4, r3
   17906:	9304      	str	r3, [sp, #16]
   17908:	d00d      	beq.n	17926 <_vfiprintf_r+0x6a>
   1790a:	9b04      	ldr	r3, [sp, #16]
   1790c:	9a02      	ldr	r2, [sp, #8]
   1790e:	0039      	movs	r1, r7
   17910:	0030      	movs	r0, r6
   17912:	f7ff ffc0 	bl	17896 <__sfputs_r>
   17916:	1c43      	adds	r3, r0, #1
   17918:	d100      	bne.n	1791c <_vfiprintf_r+0x60>
   1791a:	e0cc      	b.n	17ab6 <_vfiprintf_r+0x1fa>
   1791c:	696a      	ldr	r2, [r5, #20]
   1791e:	9b04      	ldr	r3, [sp, #16]
   17920:	4694      	mov	ip, r2
   17922:	4463      	add	r3, ip
   17924:	616b      	str	r3, [r5, #20]
   17926:	7823      	ldrb	r3, [r4, #0]
   17928:	2b00      	cmp	r3, #0
   1792a:	d100      	bne.n	1792e <_vfiprintf_r+0x72>
   1792c:	e0c3      	b.n	17ab6 <_vfiprintf_r+0x1fa>
   1792e:	2201      	movs	r2, #1
   17930:	2300      	movs	r3, #0
   17932:	4252      	negs	r2, r2
   17934:	606a      	str	r2, [r5, #4]
   17936:	a902      	add	r1, sp, #8
   17938:	3254      	adds	r2, #84	; 0x54
   1793a:	1852      	adds	r2, r2, r1
   1793c:	3401      	adds	r4, #1
   1793e:	602b      	str	r3, [r5, #0]
   17940:	60eb      	str	r3, [r5, #12]
   17942:	60ab      	str	r3, [r5, #8]
   17944:	7013      	strb	r3, [r2, #0]
   17946:	65ab      	str	r3, [r5, #88]	; 0x58
   17948:	7821      	ldrb	r1, [r4, #0]
   1794a:	2205      	movs	r2, #5
   1794c:	4862      	ldr	r0, [pc, #392]	; (17ad8 <_vfiprintf_r+0x21c>)
   1794e:	f000 fb39 	bl	17fc4 <memchr>
   17952:	1c63      	adds	r3, r4, #1
   17954:	469c      	mov	ip, r3
   17956:	2800      	cmp	r0, #0
   17958:	d135      	bne.n	179c6 <_vfiprintf_r+0x10a>
   1795a:	6829      	ldr	r1, [r5, #0]
   1795c:	06cb      	lsls	r3, r1, #27
   1795e:	d504      	bpl.n	1796a <_vfiprintf_r+0xae>
   17960:	2353      	movs	r3, #83	; 0x53
   17962:	aa02      	add	r2, sp, #8
   17964:	3020      	adds	r0, #32
   17966:	189b      	adds	r3, r3, r2
   17968:	7018      	strb	r0, [r3, #0]
   1796a:	070b      	lsls	r3, r1, #28
   1796c:	d504      	bpl.n	17978 <_vfiprintf_r+0xbc>
   1796e:	2353      	movs	r3, #83	; 0x53
   17970:	202b      	movs	r0, #43	; 0x2b
   17972:	aa02      	add	r2, sp, #8
   17974:	189b      	adds	r3, r3, r2
   17976:	7018      	strb	r0, [r3, #0]
   17978:	7823      	ldrb	r3, [r4, #0]
   1797a:	2b2a      	cmp	r3, #42	; 0x2a
   1797c:	d02c      	beq.n	179d8 <_vfiprintf_r+0x11c>
   1797e:	2000      	movs	r0, #0
   17980:	210a      	movs	r1, #10
   17982:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17984:	7822      	ldrb	r2, [r4, #0]
   17986:	3a30      	subs	r2, #48	; 0x30
   17988:	2a09      	cmp	r2, #9
   1798a:	d800      	bhi.n	1798e <_vfiprintf_r+0xd2>
   1798c:	e06b      	b.n	17a66 <_vfiprintf_r+0x1aa>
   1798e:	2800      	cmp	r0, #0
   17990:	d02a      	beq.n	179e8 <_vfiprintf_r+0x12c>
   17992:	9309      	str	r3, [sp, #36]	; 0x24
   17994:	e028      	b.n	179e8 <_vfiprintf_r+0x12c>
   17996:	4b51      	ldr	r3, [pc, #324]	; (17adc <_vfiprintf_r+0x220>)
   17998:	429f      	cmp	r7, r3
   1799a:	d101      	bne.n	179a0 <_vfiprintf_r+0xe4>
   1799c:	68b7      	ldr	r7, [r6, #8]
   1799e:	e79e      	b.n	178de <_vfiprintf_r+0x22>
   179a0:	4b4f      	ldr	r3, [pc, #316]	; (17ae0 <_vfiprintf_r+0x224>)
   179a2:	429f      	cmp	r7, r3
   179a4:	d19b      	bne.n	178de <_vfiprintf_r+0x22>
   179a6:	68f7      	ldr	r7, [r6, #12]
   179a8:	e799      	b.n	178de <_vfiprintf_r+0x22>
   179aa:	0039      	movs	r1, r7
   179ac:	0030      	movs	r0, r6
   179ae:	f7ff fb85 	bl	170bc <__swsetup_r>
   179b2:	2800      	cmp	r0, #0
   179b4:	d099      	beq.n	178ea <_vfiprintf_r+0x2e>
   179b6:	2001      	movs	r0, #1
   179b8:	4240      	negs	r0, r0
   179ba:	b01f      	add	sp, #124	; 0x7c
   179bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179be:	2b25      	cmp	r3, #37	; 0x25
   179c0:	d09f      	beq.n	17902 <_vfiprintf_r+0x46>
   179c2:	3401      	adds	r4, #1
   179c4:	e79a      	b.n	178fc <_vfiprintf_r+0x40>
   179c6:	4b44      	ldr	r3, [pc, #272]	; (17ad8 <_vfiprintf_r+0x21c>)
   179c8:	6829      	ldr	r1, [r5, #0]
   179ca:	1ac0      	subs	r0, r0, r3
   179cc:	2301      	movs	r3, #1
   179ce:	4083      	lsls	r3, r0
   179d0:	430b      	orrs	r3, r1
   179d2:	602b      	str	r3, [r5, #0]
   179d4:	4664      	mov	r4, ip
   179d6:	e7b7      	b.n	17948 <_vfiprintf_r+0x8c>
   179d8:	9b05      	ldr	r3, [sp, #20]
   179da:	1d18      	adds	r0, r3, #4
   179dc:	681b      	ldr	r3, [r3, #0]
   179de:	9005      	str	r0, [sp, #20]
   179e0:	2b00      	cmp	r3, #0
   179e2:	db3a      	blt.n	17a5a <_vfiprintf_r+0x19e>
   179e4:	9309      	str	r3, [sp, #36]	; 0x24
   179e6:	4664      	mov	r4, ip
   179e8:	7823      	ldrb	r3, [r4, #0]
   179ea:	2b2e      	cmp	r3, #46	; 0x2e
   179ec:	d10b      	bne.n	17a06 <_vfiprintf_r+0x14a>
   179ee:	7863      	ldrb	r3, [r4, #1]
   179f0:	1c62      	adds	r2, r4, #1
   179f2:	2b2a      	cmp	r3, #42	; 0x2a
   179f4:	d13f      	bne.n	17a76 <_vfiprintf_r+0x1ba>
   179f6:	9b05      	ldr	r3, [sp, #20]
   179f8:	3402      	adds	r4, #2
   179fa:	1d1a      	adds	r2, r3, #4
   179fc:	681b      	ldr	r3, [r3, #0]
   179fe:	9205      	str	r2, [sp, #20]
   17a00:	2b00      	cmp	r3, #0
   17a02:	db35      	blt.n	17a70 <_vfiprintf_r+0x1b4>
   17a04:	9307      	str	r3, [sp, #28]
   17a06:	7821      	ldrb	r1, [r4, #0]
   17a08:	2203      	movs	r2, #3
   17a0a:	4836      	ldr	r0, [pc, #216]	; (17ae4 <_vfiprintf_r+0x228>)
   17a0c:	f000 fada 	bl	17fc4 <memchr>
   17a10:	2800      	cmp	r0, #0
   17a12:	d007      	beq.n	17a24 <_vfiprintf_r+0x168>
   17a14:	4b33      	ldr	r3, [pc, #204]	; (17ae4 <_vfiprintf_r+0x228>)
   17a16:	682a      	ldr	r2, [r5, #0]
   17a18:	1ac0      	subs	r0, r0, r3
   17a1a:	2340      	movs	r3, #64	; 0x40
   17a1c:	4083      	lsls	r3, r0
   17a1e:	4313      	orrs	r3, r2
   17a20:	602b      	str	r3, [r5, #0]
   17a22:	3401      	adds	r4, #1
   17a24:	7821      	ldrb	r1, [r4, #0]
   17a26:	1c63      	adds	r3, r4, #1
   17a28:	2206      	movs	r2, #6
   17a2a:	482f      	ldr	r0, [pc, #188]	; (17ae8 <_vfiprintf_r+0x22c>)
   17a2c:	9302      	str	r3, [sp, #8]
   17a2e:	7629      	strb	r1, [r5, #24]
   17a30:	f000 fac8 	bl	17fc4 <memchr>
   17a34:	2800      	cmp	r0, #0
   17a36:	d044      	beq.n	17ac2 <_vfiprintf_r+0x206>
   17a38:	4b2c      	ldr	r3, [pc, #176]	; (17aec <_vfiprintf_r+0x230>)
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	d12f      	bne.n	17a9e <_vfiprintf_r+0x1e2>
   17a3e:	6829      	ldr	r1, [r5, #0]
   17a40:	9b05      	ldr	r3, [sp, #20]
   17a42:	2207      	movs	r2, #7
   17a44:	05c9      	lsls	r1, r1, #23
   17a46:	d528      	bpl.n	17a9a <_vfiprintf_r+0x1de>
   17a48:	189b      	adds	r3, r3, r2
   17a4a:	4393      	bics	r3, r2
   17a4c:	3308      	adds	r3, #8
   17a4e:	9305      	str	r3, [sp, #20]
   17a50:	696b      	ldr	r3, [r5, #20]
   17a52:	9a03      	ldr	r2, [sp, #12]
   17a54:	189b      	adds	r3, r3, r2
   17a56:	616b      	str	r3, [r5, #20]
   17a58:	e74f      	b.n	178fa <_vfiprintf_r+0x3e>
   17a5a:	425b      	negs	r3, r3
   17a5c:	60eb      	str	r3, [r5, #12]
   17a5e:	2302      	movs	r3, #2
   17a60:	430b      	orrs	r3, r1
   17a62:	602b      	str	r3, [r5, #0]
   17a64:	e7bf      	b.n	179e6 <_vfiprintf_r+0x12a>
   17a66:	434b      	muls	r3, r1
   17a68:	3401      	adds	r4, #1
   17a6a:	189b      	adds	r3, r3, r2
   17a6c:	2001      	movs	r0, #1
   17a6e:	e789      	b.n	17984 <_vfiprintf_r+0xc8>
   17a70:	2301      	movs	r3, #1
   17a72:	425b      	negs	r3, r3
   17a74:	e7c6      	b.n	17a04 <_vfiprintf_r+0x148>
   17a76:	2300      	movs	r3, #0
   17a78:	0014      	movs	r4, r2
   17a7a:	200a      	movs	r0, #10
   17a7c:	001a      	movs	r2, r3
   17a7e:	606b      	str	r3, [r5, #4]
   17a80:	7821      	ldrb	r1, [r4, #0]
   17a82:	3930      	subs	r1, #48	; 0x30
   17a84:	2909      	cmp	r1, #9
   17a86:	d903      	bls.n	17a90 <_vfiprintf_r+0x1d4>
   17a88:	2b00      	cmp	r3, #0
   17a8a:	d0bc      	beq.n	17a06 <_vfiprintf_r+0x14a>
   17a8c:	9207      	str	r2, [sp, #28]
   17a8e:	e7ba      	b.n	17a06 <_vfiprintf_r+0x14a>
   17a90:	4342      	muls	r2, r0
   17a92:	3401      	adds	r4, #1
   17a94:	1852      	adds	r2, r2, r1
   17a96:	2301      	movs	r3, #1
   17a98:	e7f2      	b.n	17a80 <_vfiprintf_r+0x1c4>
   17a9a:	3307      	adds	r3, #7
   17a9c:	e7d5      	b.n	17a4a <_vfiprintf_r+0x18e>
   17a9e:	ab05      	add	r3, sp, #20
   17aa0:	9300      	str	r3, [sp, #0]
   17aa2:	003a      	movs	r2, r7
   17aa4:	4b12      	ldr	r3, [pc, #72]	; (17af0 <_vfiprintf_r+0x234>)
   17aa6:	0029      	movs	r1, r5
   17aa8:	0030      	movs	r0, r6
   17aaa:	e000      	b.n	17aae <_vfiprintf_r+0x1f2>
   17aac:	bf00      	nop
   17aae:	9003      	str	r0, [sp, #12]
   17ab0:	9b03      	ldr	r3, [sp, #12]
   17ab2:	3301      	adds	r3, #1
   17ab4:	d1cc      	bne.n	17a50 <_vfiprintf_r+0x194>
   17ab6:	89bb      	ldrh	r3, [r7, #12]
   17ab8:	065b      	lsls	r3, r3, #25
   17aba:	d500      	bpl.n	17abe <_vfiprintf_r+0x202>
   17abc:	e77b      	b.n	179b6 <_vfiprintf_r+0xfa>
   17abe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17ac0:	e77b      	b.n	179ba <_vfiprintf_r+0xfe>
   17ac2:	ab05      	add	r3, sp, #20
   17ac4:	9300      	str	r3, [sp, #0]
   17ac6:	003a      	movs	r2, r7
   17ac8:	4b09      	ldr	r3, [pc, #36]	; (17af0 <_vfiprintf_r+0x234>)
   17aca:	0029      	movs	r1, r5
   17acc:	0030      	movs	r0, r6
   17ace:	f000 f87f 	bl	17bd0 <_printf_i>
   17ad2:	e7ec      	b.n	17aae <_vfiprintf_r+0x1f2>
   17ad4:	0001a36c 	.word	0x0001a36c
   17ad8:	0001a3ac 	.word	0x0001a3ac
   17adc:	0001a38c 	.word	0x0001a38c
   17ae0:	0001a34c 	.word	0x0001a34c
   17ae4:	0001a3b2 	.word	0x0001a3b2
   17ae8:	0001a3b6 	.word	0x0001a3b6
   17aec:	00000000 	.word	0x00000000
   17af0:	00017897 	.word	0x00017897

00017af4 <_printf_common>:
   17af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17af6:	0015      	movs	r5, r2
   17af8:	9301      	str	r3, [sp, #4]
   17afa:	688a      	ldr	r2, [r1, #8]
   17afc:	690b      	ldr	r3, [r1, #16]
   17afe:	9000      	str	r0, [sp, #0]
   17b00:	000c      	movs	r4, r1
   17b02:	4293      	cmp	r3, r2
   17b04:	da00      	bge.n	17b08 <_printf_common+0x14>
   17b06:	0013      	movs	r3, r2
   17b08:	0022      	movs	r2, r4
   17b0a:	602b      	str	r3, [r5, #0]
   17b0c:	3243      	adds	r2, #67	; 0x43
   17b0e:	7812      	ldrb	r2, [r2, #0]
   17b10:	2a00      	cmp	r2, #0
   17b12:	d001      	beq.n	17b18 <_printf_common+0x24>
   17b14:	3301      	adds	r3, #1
   17b16:	602b      	str	r3, [r5, #0]
   17b18:	6823      	ldr	r3, [r4, #0]
   17b1a:	069b      	lsls	r3, r3, #26
   17b1c:	d502      	bpl.n	17b24 <_printf_common+0x30>
   17b1e:	682b      	ldr	r3, [r5, #0]
   17b20:	3302      	adds	r3, #2
   17b22:	602b      	str	r3, [r5, #0]
   17b24:	2706      	movs	r7, #6
   17b26:	6823      	ldr	r3, [r4, #0]
   17b28:	401f      	ands	r7, r3
   17b2a:	d027      	beq.n	17b7c <_printf_common+0x88>
   17b2c:	0023      	movs	r3, r4
   17b2e:	3343      	adds	r3, #67	; 0x43
   17b30:	781b      	ldrb	r3, [r3, #0]
   17b32:	1e5a      	subs	r2, r3, #1
   17b34:	4193      	sbcs	r3, r2
   17b36:	6822      	ldr	r2, [r4, #0]
   17b38:	0692      	lsls	r2, r2, #26
   17b3a:	d430      	bmi.n	17b9e <_printf_common+0xaa>
   17b3c:	0022      	movs	r2, r4
   17b3e:	9901      	ldr	r1, [sp, #4]
   17b40:	3243      	adds	r2, #67	; 0x43
   17b42:	9800      	ldr	r0, [sp, #0]
   17b44:	9e08      	ldr	r6, [sp, #32]
   17b46:	47b0      	blx	r6
   17b48:	1c43      	adds	r3, r0, #1
   17b4a:	d025      	beq.n	17b98 <_printf_common+0xa4>
   17b4c:	2306      	movs	r3, #6
   17b4e:	6820      	ldr	r0, [r4, #0]
   17b50:	682a      	ldr	r2, [r5, #0]
   17b52:	68e1      	ldr	r1, [r4, #12]
   17b54:	4003      	ands	r3, r0
   17b56:	2500      	movs	r5, #0
   17b58:	2b04      	cmp	r3, #4
   17b5a:	d103      	bne.n	17b64 <_printf_common+0x70>
   17b5c:	1a8d      	subs	r5, r1, r2
   17b5e:	43eb      	mvns	r3, r5
   17b60:	17db      	asrs	r3, r3, #31
   17b62:	401d      	ands	r5, r3
   17b64:	68a3      	ldr	r3, [r4, #8]
   17b66:	6922      	ldr	r2, [r4, #16]
   17b68:	4293      	cmp	r3, r2
   17b6a:	dd01      	ble.n	17b70 <_printf_common+0x7c>
   17b6c:	1a9b      	subs	r3, r3, r2
   17b6e:	18ed      	adds	r5, r5, r3
   17b70:	2700      	movs	r7, #0
   17b72:	42bd      	cmp	r5, r7
   17b74:	d120      	bne.n	17bb8 <_printf_common+0xc4>
   17b76:	2000      	movs	r0, #0
   17b78:	e010      	b.n	17b9c <_printf_common+0xa8>
   17b7a:	3701      	adds	r7, #1
   17b7c:	68e3      	ldr	r3, [r4, #12]
   17b7e:	682a      	ldr	r2, [r5, #0]
   17b80:	1a9b      	subs	r3, r3, r2
   17b82:	429f      	cmp	r7, r3
   17b84:	dad2      	bge.n	17b2c <_printf_common+0x38>
   17b86:	0022      	movs	r2, r4
   17b88:	2301      	movs	r3, #1
   17b8a:	3219      	adds	r2, #25
   17b8c:	9901      	ldr	r1, [sp, #4]
   17b8e:	9800      	ldr	r0, [sp, #0]
   17b90:	9e08      	ldr	r6, [sp, #32]
   17b92:	47b0      	blx	r6
   17b94:	1c43      	adds	r3, r0, #1
   17b96:	d1f0      	bne.n	17b7a <_printf_common+0x86>
   17b98:	2001      	movs	r0, #1
   17b9a:	4240      	negs	r0, r0
   17b9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17b9e:	2030      	movs	r0, #48	; 0x30
   17ba0:	18e1      	adds	r1, r4, r3
   17ba2:	3143      	adds	r1, #67	; 0x43
   17ba4:	7008      	strb	r0, [r1, #0]
   17ba6:	0021      	movs	r1, r4
   17ba8:	1c5a      	adds	r2, r3, #1
   17baa:	3145      	adds	r1, #69	; 0x45
   17bac:	7809      	ldrb	r1, [r1, #0]
   17bae:	18a2      	adds	r2, r4, r2
   17bb0:	3243      	adds	r2, #67	; 0x43
   17bb2:	3302      	adds	r3, #2
   17bb4:	7011      	strb	r1, [r2, #0]
   17bb6:	e7c1      	b.n	17b3c <_printf_common+0x48>
   17bb8:	0022      	movs	r2, r4
   17bba:	2301      	movs	r3, #1
   17bbc:	321a      	adds	r2, #26
   17bbe:	9901      	ldr	r1, [sp, #4]
   17bc0:	9800      	ldr	r0, [sp, #0]
   17bc2:	9e08      	ldr	r6, [sp, #32]
   17bc4:	47b0      	blx	r6
   17bc6:	1c43      	adds	r3, r0, #1
   17bc8:	d0e6      	beq.n	17b98 <_printf_common+0xa4>
   17bca:	3701      	adds	r7, #1
   17bcc:	e7d1      	b.n	17b72 <_printf_common+0x7e>
	...

00017bd0 <_printf_i>:
   17bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bd2:	b08b      	sub	sp, #44	; 0x2c
   17bd4:	9206      	str	r2, [sp, #24]
   17bd6:	000a      	movs	r2, r1
   17bd8:	3243      	adds	r2, #67	; 0x43
   17bda:	9307      	str	r3, [sp, #28]
   17bdc:	9005      	str	r0, [sp, #20]
   17bde:	9204      	str	r2, [sp, #16]
   17be0:	7e0a      	ldrb	r2, [r1, #24]
   17be2:	000c      	movs	r4, r1
   17be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17be6:	2a6e      	cmp	r2, #110	; 0x6e
   17be8:	d100      	bne.n	17bec <_printf_i+0x1c>
   17bea:	e08f      	b.n	17d0c <_printf_i+0x13c>
   17bec:	d817      	bhi.n	17c1e <_printf_i+0x4e>
   17bee:	2a63      	cmp	r2, #99	; 0x63
   17bf0:	d02c      	beq.n	17c4c <_printf_i+0x7c>
   17bf2:	d808      	bhi.n	17c06 <_printf_i+0x36>
   17bf4:	2a00      	cmp	r2, #0
   17bf6:	d100      	bne.n	17bfa <_printf_i+0x2a>
   17bf8:	e099      	b.n	17d2e <_printf_i+0x15e>
   17bfa:	2a58      	cmp	r2, #88	; 0x58
   17bfc:	d054      	beq.n	17ca8 <_printf_i+0xd8>
   17bfe:	0026      	movs	r6, r4
   17c00:	3642      	adds	r6, #66	; 0x42
   17c02:	7032      	strb	r2, [r6, #0]
   17c04:	e029      	b.n	17c5a <_printf_i+0x8a>
   17c06:	2a64      	cmp	r2, #100	; 0x64
   17c08:	d001      	beq.n	17c0e <_printf_i+0x3e>
   17c0a:	2a69      	cmp	r2, #105	; 0x69
   17c0c:	d1f7      	bne.n	17bfe <_printf_i+0x2e>
   17c0e:	6821      	ldr	r1, [r4, #0]
   17c10:	681a      	ldr	r2, [r3, #0]
   17c12:	0608      	lsls	r0, r1, #24
   17c14:	d523      	bpl.n	17c5e <_printf_i+0x8e>
   17c16:	1d11      	adds	r1, r2, #4
   17c18:	6019      	str	r1, [r3, #0]
   17c1a:	6815      	ldr	r5, [r2, #0]
   17c1c:	e025      	b.n	17c6a <_printf_i+0x9a>
   17c1e:	2a73      	cmp	r2, #115	; 0x73
   17c20:	d100      	bne.n	17c24 <_printf_i+0x54>
   17c22:	e088      	b.n	17d36 <_printf_i+0x166>
   17c24:	d808      	bhi.n	17c38 <_printf_i+0x68>
   17c26:	2a6f      	cmp	r2, #111	; 0x6f
   17c28:	d029      	beq.n	17c7e <_printf_i+0xae>
   17c2a:	2a70      	cmp	r2, #112	; 0x70
   17c2c:	d1e7      	bne.n	17bfe <_printf_i+0x2e>
   17c2e:	2220      	movs	r2, #32
   17c30:	6809      	ldr	r1, [r1, #0]
   17c32:	430a      	orrs	r2, r1
   17c34:	6022      	str	r2, [r4, #0]
   17c36:	e003      	b.n	17c40 <_printf_i+0x70>
   17c38:	2a75      	cmp	r2, #117	; 0x75
   17c3a:	d020      	beq.n	17c7e <_printf_i+0xae>
   17c3c:	2a78      	cmp	r2, #120	; 0x78
   17c3e:	d1de      	bne.n	17bfe <_printf_i+0x2e>
   17c40:	0022      	movs	r2, r4
   17c42:	2178      	movs	r1, #120	; 0x78
   17c44:	3245      	adds	r2, #69	; 0x45
   17c46:	7011      	strb	r1, [r2, #0]
   17c48:	4a6c      	ldr	r2, [pc, #432]	; (17dfc <_printf_i+0x22c>)
   17c4a:	e030      	b.n	17cae <_printf_i+0xde>
   17c4c:	000e      	movs	r6, r1
   17c4e:	681a      	ldr	r2, [r3, #0]
   17c50:	3642      	adds	r6, #66	; 0x42
   17c52:	1d11      	adds	r1, r2, #4
   17c54:	6019      	str	r1, [r3, #0]
   17c56:	6813      	ldr	r3, [r2, #0]
   17c58:	7033      	strb	r3, [r6, #0]
   17c5a:	2301      	movs	r3, #1
   17c5c:	e079      	b.n	17d52 <_printf_i+0x182>
   17c5e:	0649      	lsls	r1, r1, #25
   17c60:	d5d9      	bpl.n	17c16 <_printf_i+0x46>
   17c62:	1d11      	adds	r1, r2, #4
   17c64:	6019      	str	r1, [r3, #0]
   17c66:	2300      	movs	r3, #0
   17c68:	5ed5      	ldrsh	r5, [r2, r3]
   17c6a:	2d00      	cmp	r5, #0
   17c6c:	da03      	bge.n	17c76 <_printf_i+0xa6>
   17c6e:	232d      	movs	r3, #45	; 0x2d
   17c70:	9a04      	ldr	r2, [sp, #16]
   17c72:	426d      	negs	r5, r5
   17c74:	7013      	strb	r3, [r2, #0]
   17c76:	4b62      	ldr	r3, [pc, #392]	; (17e00 <_printf_i+0x230>)
   17c78:	270a      	movs	r7, #10
   17c7a:	9303      	str	r3, [sp, #12]
   17c7c:	e02f      	b.n	17cde <_printf_i+0x10e>
   17c7e:	6820      	ldr	r0, [r4, #0]
   17c80:	6819      	ldr	r1, [r3, #0]
   17c82:	0605      	lsls	r5, r0, #24
   17c84:	d503      	bpl.n	17c8e <_printf_i+0xbe>
   17c86:	1d08      	adds	r0, r1, #4
   17c88:	6018      	str	r0, [r3, #0]
   17c8a:	680d      	ldr	r5, [r1, #0]
   17c8c:	e005      	b.n	17c9a <_printf_i+0xca>
   17c8e:	0640      	lsls	r0, r0, #25
   17c90:	d5f9      	bpl.n	17c86 <_printf_i+0xb6>
   17c92:	680d      	ldr	r5, [r1, #0]
   17c94:	1d08      	adds	r0, r1, #4
   17c96:	6018      	str	r0, [r3, #0]
   17c98:	b2ad      	uxth	r5, r5
   17c9a:	4b59      	ldr	r3, [pc, #356]	; (17e00 <_printf_i+0x230>)
   17c9c:	2708      	movs	r7, #8
   17c9e:	9303      	str	r3, [sp, #12]
   17ca0:	2a6f      	cmp	r2, #111	; 0x6f
   17ca2:	d018      	beq.n	17cd6 <_printf_i+0x106>
   17ca4:	270a      	movs	r7, #10
   17ca6:	e016      	b.n	17cd6 <_printf_i+0x106>
   17ca8:	3145      	adds	r1, #69	; 0x45
   17caa:	700a      	strb	r2, [r1, #0]
   17cac:	4a54      	ldr	r2, [pc, #336]	; (17e00 <_printf_i+0x230>)
   17cae:	9203      	str	r2, [sp, #12]
   17cb0:	681a      	ldr	r2, [r3, #0]
   17cb2:	6821      	ldr	r1, [r4, #0]
   17cb4:	1d10      	adds	r0, r2, #4
   17cb6:	6018      	str	r0, [r3, #0]
   17cb8:	6815      	ldr	r5, [r2, #0]
   17cba:	0608      	lsls	r0, r1, #24
   17cbc:	d522      	bpl.n	17d04 <_printf_i+0x134>
   17cbe:	07cb      	lsls	r3, r1, #31
   17cc0:	d502      	bpl.n	17cc8 <_printf_i+0xf8>
   17cc2:	2320      	movs	r3, #32
   17cc4:	4319      	orrs	r1, r3
   17cc6:	6021      	str	r1, [r4, #0]
   17cc8:	2710      	movs	r7, #16
   17cca:	2d00      	cmp	r5, #0
   17ccc:	d103      	bne.n	17cd6 <_printf_i+0x106>
   17cce:	2320      	movs	r3, #32
   17cd0:	6822      	ldr	r2, [r4, #0]
   17cd2:	439a      	bics	r2, r3
   17cd4:	6022      	str	r2, [r4, #0]
   17cd6:	0023      	movs	r3, r4
   17cd8:	2200      	movs	r2, #0
   17cda:	3343      	adds	r3, #67	; 0x43
   17cdc:	701a      	strb	r2, [r3, #0]
   17cde:	6863      	ldr	r3, [r4, #4]
   17ce0:	60a3      	str	r3, [r4, #8]
   17ce2:	2b00      	cmp	r3, #0
   17ce4:	db5c      	blt.n	17da0 <_printf_i+0x1d0>
   17ce6:	2204      	movs	r2, #4
   17ce8:	6821      	ldr	r1, [r4, #0]
   17cea:	4391      	bics	r1, r2
   17cec:	6021      	str	r1, [r4, #0]
   17cee:	2d00      	cmp	r5, #0
   17cf0:	d158      	bne.n	17da4 <_printf_i+0x1d4>
   17cf2:	9e04      	ldr	r6, [sp, #16]
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	d064      	beq.n	17dc2 <_printf_i+0x1f2>
   17cf8:	0026      	movs	r6, r4
   17cfa:	9b03      	ldr	r3, [sp, #12]
   17cfc:	3642      	adds	r6, #66	; 0x42
   17cfe:	781b      	ldrb	r3, [r3, #0]
   17d00:	7033      	strb	r3, [r6, #0]
   17d02:	e05e      	b.n	17dc2 <_printf_i+0x1f2>
   17d04:	0648      	lsls	r0, r1, #25
   17d06:	d5da      	bpl.n	17cbe <_printf_i+0xee>
   17d08:	b2ad      	uxth	r5, r5
   17d0a:	e7d8      	b.n	17cbe <_printf_i+0xee>
   17d0c:	6809      	ldr	r1, [r1, #0]
   17d0e:	681a      	ldr	r2, [r3, #0]
   17d10:	0608      	lsls	r0, r1, #24
   17d12:	d505      	bpl.n	17d20 <_printf_i+0x150>
   17d14:	1d11      	adds	r1, r2, #4
   17d16:	6019      	str	r1, [r3, #0]
   17d18:	6813      	ldr	r3, [r2, #0]
   17d1a:	6962      	ldr	r2, [r4, #20]
   17d1c:	601a      	str	r2, [r3, #0]
   17d1e:	e006      	b.n	17d2e <_printf_i+0x15e>
   17d20:	0649      	lsls	r1, r1, #25
   17d22:	d5f7      	bpl.n	17d14 <_printf_i+0x144>
   17d24:	1d11      	adds	r1, r2, #4
   17d26:	6019      	str	r1, [r3, #0]
   17d28:	6813      	ldr	r3, [r2, #0]
   17d2a:	8aa2      	ldrh	r2, [r4, #20]
   17d2c:	801a      	strh	r2, [r3, #0]
   17d2e:	2300      	movs	r3, #0
   17d30:	9e04      	ldr	r6, [sp, #16]
   17d32:	6123      	str	r3, [r4, #16]
   17d34:	e054      	b.n	17de0 <_printf_i+0x210>
   17d36:	681a      	ldr	r2, [r3, #0]
   17d38:	1d11      	adds	r1, r2, #4
   17d3a:	6019      	str	r1, [r3, #0]
   17d3c:	6816      	ldr	r6, [r2, #0]
   17d3e:	2100      	movs	r1, #0
   17d40:	6862      	ldr	r2, [r4, #4]
   17d42:	0030      	movs	r0, r6
   17d44:	f000 f93e 	bl	17fc4 <memchr>
   17d48:	2800      	cmp	r0, #0
   17d4a:	d001      	beq.n	17d50 <_printf_i+0x180>
   17d4c:	1b80      	subs	r0, r0, r6
   17d4e:	6060      	str	r0, [r4, #4]
   17d50:	6863      	ldr	r3, [r4, #4]
   17d52:	6123      	str	r3, [r4, #16]
   17d54:	2300      	movs	r3, #0
   17d56:	9a04      	ldr	r2, [sp, #16]
   17d58:	7013      	strb	r3, [r2, #0]
   17d5a:	e041      	b.n	17de0 <_printf_i+0x210>
   17d5c:	6923      	ldr	r3, [r4, #16]
   17d5e:	0032      	movs	r2, r6
   17d60:	9906      	ldr	r1, [sp, #24]
   17d62:	9805      	ldr	r0, [sp, #20]
   17d64:	9d07      	ldr	r5, [sp, #28]
   17d66:	47a8      	blx	r5
   17d68:	1c43      	adds	r3, r0, #1
   17d6a:	d043      	beq.n	17df4 <_printf_i+0x224>
   17d6c:	6823      	ldr	r3, [r4, #0]
   17d6e:	2500      	movs	r5, #0
   17d70:	079b      	lsls	r3, r3, #30
   17d72:	d40f      	bmi.n	17d94 <_printf_i+0x1c4>
   17d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d76:	68e0      	ldr	r0, [r4, #12]
   17d78:	4298      	cmp	r0, r3
   17d7a:	da3d      	bge.n	17df8 <_printf_i+0x228>
   17d7c:	0018      	movs	r0, r3
   17d7e:	e03b      	b.n	17df8 <_printf_i+0x228>
   17d80:	0022      	movs	r2, r4
   17d82:	2301      	movs	r3, #1
   17d84:	3219      	adds	r2, #25
   17d86:	9906      	ldr	r1, [sp, #24]
   17d88:	9805      	ldr	r0, [sp, #20]
   17d8a:	9e07      	ldr	r6, [sp, #28]
   17d8c:	47b0      	blx	r6
   17d8e:	1c43      	adds	r3, r0, #1
   17d90:	d030      	beq.n	17df4 <_printf_i+0x224>
   17d92:	3501      	adds	r5, #1
   17d94:	68e3      	ldr	r3, [r4, #12]
   17d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17d98:	1a9b      	subs	r3, r3, r2
   17d9a:	429d      	cmp	r5, r3
   17d9c:	dbf0      	blt.n	17d80 <_printf_i+0x1b0>
   17d9e:	e7e9      	b.n	17d74 <_printf_i+0x1a4>
   17da0:	2d00      	cmp	r5, #0
   17da2:	d0a9      	beq.n	17cf8 <_printf_i+0x128>
   17da4:	9e04      	ldr	r6, [sp, #16]
   17da6:	0028      	movs	r0, r5
   17da8:	0039      	movs	r1, r7
   17daa:	f7fe fcfb 	bl	167a4 <__aeabi_uidivmod>
   17dae:	9b03      	ldr	r3, [sp, #12]
   17db0:	3e01      	subs	r6, #1
   17db2:	5c5b      	ldrb	r3, [r3, r1]
   17db4:	0028      	movs	r0, r5
   17db6:	7033      	strb	r3, [r6, #0]
   17db8:	0039      	movs	r1, r7
   17dba:	f7fe fc6d 	bl	16698 <__udivsi3>
   17dbe:	1e05      	subs	r5, r0, #0
   17dc0:	d1f1      	bne.n	17da6 <_printf_i+0x1d6>
   17dc2:	2f08      	cmp	r7, #8
   17dc4:	d109      	bne.n	17dda <_printf_i+0x20a>
   17dc6:	6823      	ldr	r3, [r4, #0]
   17dc8:	07db      	lsls	r3, r3, #31
   17dca:	d506      	bpl.n	17dda <_printf_i+0x20a>
   17dcc:	6863      	ldr	r3, [r4, #4]
   17dce:	6922      	ldr	r2, [r4, #16]
   17dd0:	4293      	cmp	r3, r2
   17dd2:	dc02      	bgt.n	17dda <_printf_i+0x20a>
   17dd4:	2330      	movs	r3, #48	; 0x30
   17dd6:	3e01      	subs	r6, #1
   17dd8:	7033      	strb	r3, [r6, #0]
   17dda:	9b04      	ldr	r3, [sp, #16]
   17ddc:	1b9b      	subs	r3, r3, r6
   17dde:	6123      	str	r3, [r4, #16]
   17de0:	9b07      	ldr	r3, [sp, #28]
   17de2:	aa09      	add	r2, sp, #36	; 0x24
   17de4:	9300      	str	r3, [sp, #0]
   17de6:	0021      	movs	r1, r4
   17de8:	9b06      	ldr	r3, [sp, #24]
   17dea:	9805      	ldr	r0, [sp, #20]
   17dec:	f7ff fe82 	bl	17af4 <_printf_common>
   17df0:	1c43      	adds	r3, r0, #1
   17df2:	d1b3      	bne.n	17d5c <_printf_i+0x18c>
   17df4:	2001      	movs	r0, #1
   17df6:	4240      	negs	r0, r0
   17df8:	b00b      	add	sp, #44	; 0x2c
   17dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dfc:	0001a3ce 	.word	0x0001a3ce
   17e00:	0001a3bd 	.word	0x0001a3bd

00017e04 <_putc_r>:
   17e04:	b570      	push	{r4, r5, r6, lr}
   17e06:	0006      	movs	r6, r0
   17e08:	000d      	movs	r5, r1
   17e0a:	0014      	movs	r4, r2
   17e0c:	2800      	cmp	r0, #0
   17e0e:	d004      	beq.n	17e1a <_putc_r+0x16>
   17e10:	6983      	ldr	r3, [r0, #24]
   17e12:	2b00      	cmp	r3, #0
   17e14:	d101      	bne.n	17e1a <_putc_r+0x16>
   17e16:	f7ff fabf 	bl	17398 <__sinit>
   17e1a:	4b12      	ldr	r3, [pc, #72]	; (17e64 <_putc_r+0x60>)
   17e1c:	429c      	cmp	r4, r3
   17e1e:	d111      	bne.n	17e44 <_putc_r+0x40>
   17e20:	6874      	ldr	r4, [r6, #4]
   17e22:	68a3      	ldr	r3, [r4, #8]
   17e24:	3b01      	subs	r3, #1
   17e26:	60a3      	str	r3, [r4, #8]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	da05      	bge.n	17e38 <_putc_r+0x34>
   17e2c:	69a2      	ldr	r2, [r4, #24]
   17e2e:	4293      	cmp	r3, r2
   17e30:	db12      	blt.n	17e58 <_putc_r+0x54>
   17e32:	b2eb      	uxtb	r3, r5
   17e34:	2b0a      	cmp	r3, #10
   17e36:	d00f      	beq.n	17e58 <_putc_r+0x54>
   17e38:	6823      	ldr	r3, [r4, #0]
   17e3a:	b2e8      	uxtb	r0, r5
   17e3c:	1c5a      	adds	r2, r3, #1
   17e3e:	6022      	str	r2, [r4, #0]
   17e40:	701d      	strb	r5, [r3, #0]
   17e42:	bd70      	pop	{r4, r5, r6, pc}
   17e44:	4b08      	ldr	r3, [pc, #32]	; (17e68 <_putc_r+0x64>)
   17e46:	429c      	cmp	r4, r3
   17e48:	d101      	bne.n	17e4e <_putc_r+0x4a>
   17e4a:	68b4      	ldr	r4, [r6, #8]
   17e4c:	e7e9      	b.n	17e22 <_putc_r+0x1e>
   17e4e:	4b07      	ldr	r3, [pc, #28]	; (17e6c <_putc_r+0x68>)
   17e50:	429c      	cmp	r4, r3
   17e52:	d1e6      	bne.n	17e22 <_putc_r+0x1e>
   17e54:	68f4      	ldr	r4, [r6, #12]
   17e56:	e7e4      	b.n	17e22 <_putc_r+0x1e>
   17e58:	0022      	movs	r2, r4
   17e5a:	0029      	movs	r1, r5
   17e5c:	0030      	movs	r0, r6
   17e5e:	f7ff f8d7 	bl	17010 <__swbuf_r>
   17e62:	e7ee      	b.n	17e42 <_putc_r+0x3e>
   17e64:	0001a36c 	.word	0x0001a36c
   17e68:	0001a38c 	.word	0x0001a38c
   17e6c:	0001a34c 	.word	0x0001a34c

00017e70 <__sread>:
   17e70:	b570      	push	{r4, r5, r6, lr}
   17e72:	000c      	movs	r4, r1
   17e74:	250e      	movs	r5, #14
   17e76:	5f49      	ldrsh	r1, [r1, r5]
   17e78:	f000 f8d6 	bl	18028 <_read_r>
   17e7c:	2800      	cmp	r0, #0
   17e7e:	db03      	blt.n	17e88 <__sread+0x18>
   17e80:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17e82:	181b      	adds	r3, r3, r0
   17e84:	6563      	str	r3, [r4, #84]	; 0x54
   17e86:	bd70      	pop	{r4, r5, r6, pc}
   17e88:	89a3      	ldrh	r3, [r4, #12]
   17e8a:	4a02      	ldr	r2, [pc, #8]	; (17e94 <__sread+0x24>)
   17e8c:	4013      	ands	r3, r2
   17e8e:	81a3      	strh	r3, [r4, #12]
   17e90:	e7f9      	b.n	17e86 <__sread+0x16>
   17e92:	46c0      	nop			; (mov r8, r8)
   17e94:	ffffefff 	.word	0xffffefff

00017e98 <__swrite>:
   17e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e9a:	001f      	movs	r7, r3
   17e9c:	898b      	ldrh	r3, [r1, #12]
   17e9e:	0005      	movs	r5, r0
   17ea0:	000c      	movs	r4, r1
   17ea2:	0016      	movs	r6, r2
   17ea4:	05db      	lsls	r3, r3, #23
   17ea6:	d505      	bpl.n	17eb4 <__swrite+0x1c>
   17ea8:	230e      	movs	r3, #14
   17eaa:	5ec9      	ldrsh	r1, [r1, r3]
   17eac:	2200      	movs	r2, #0
   17eae:	2302      	movs	r3, #2
   17eb0:	f000 f874 	bl	17f9c <_lseek_r>
   17eb4:	89a3      	ldrh	r3, [r4, #12]
   17eb6:	4a05      	ldr	r2, [pc, #20]	; (17ecc <__swrite+0x34>)
   17eb8:	0028      	movs	r0, r5
   17eba:	4013      	ands	r3, r2
   17ebc:	81a3      	strh	r3, [r4, #12]
   17ebe:	0032      	movs	r2, r6
   17ec0:	230e      	movs	r3, #14
   17ec2:	5ee1      	ldrsh	r1, [r4, r3]
   17ec4:	003b      	movs	r3, r7
   17ec6:	f000 f81f 	bl	17f08 <_write_r>
   17eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ecc:	ffffefff 	.word	0xffffefff

00017ed0 <__sseek>:
   17ed0:	b570      	push	{r4, r5, r6, lr}
   17ed2:	000c      	movs	r4, r1
   17ed4:	250e      	movs	r5, #14
   17ed6:	5f49      	ldrsh	r1, [r1, r5]
   17ed8:	f000 f860 	bl	17f9c <_lseek_r>
   17edc:	89a3      	ldrh	r3, [r4, #12]
   17ede:	1c42      	adds	r2, r0, #1
   17ee0:	d103      	bne.n	17eea <__sseek+0x1a>
   17ee2:	4a05      	ldr	r2, [pc, #20]	; (17ef8 <__sseek+0x28>)
   17ee4:	4013      	ands	r3, r2
   17ee6:	81a3      	strh	r3, [r4, #12]
   17ee8:	bd70      	pop	{r4, r5, r6, pc}
   17eea:	2280      	movs	r2, #128	; 0x80
   17eec:	0152      	lsls	r2, r2, #5
   17eee:	4313      	orrs	r3, r2
   17ef0:	81a3      	strh	r3, [r4, #12]
   17ef2:	6560      	str	r0, [r4, #84]	; 0x54
   17ef4:	e7f8      	b.n	17ee8 <__sseek+0x18>
   17ef6:	46c0      	nop			; (mov r8, r8)
   17ef8:	ffffefff 	.word	0xffffefff

00017efc <__sclose>:
   17efc:	b510      	push	{r4, lr}
   17efe:	230e      	movs	r3, #14
   17f00:	5ec9      	ldrsh	r1, [r1, r3]
   17f02:	f000 f815 	bl	17f30 <_close_r>
   17f06:	bd10      	pop	{r4, pc}

00017f08 <_write_r>:
   17f08:	b570      	push	{r4, r5, r6, lr}
   17f0a:	0005      	movs	r5, r0
   17f0c:	0008      	movs	r0, r1
   17f0e:	0011      	movs	r1, r2
   17f10:	2200      	movs	r2, #0
   17f12:	4c06      	ldr	r4, [pc, #24]	; (17f2c <_write_r+0x24>)
   17f14:	6022      	str	r2, [r4, #0]
   17f16:	001a      	movs	r2, r3
   17f18:	f7fa f890 	bl	1203c <_write>
   17f1c:	1c43      	adds	r3, r0, #1
   17f1e:	d103      	bne.n	17f28 <_write_r+0x20>
   17f20:	6823      	ldr	r3, [r4, #0]
   17f22:	2b00      	cmp	r3, #0
   17f24:	d000      	beq.n	17f28 <_write_r+0x20>
   17f26:	602b      	str	r3, [r5, #0]
   17f28:	bd70      	pop	{r4, r5, r6, pc}
   17f2a:	46c0      	nop			; (mov r8, r8)
   17f2c:	20001628 	.word	0x20001628

00017f30 <_close_r>:
   17f30:	2300      	movs	r3, #0
   17f32:	b570      	push	{r4, r5, r6, lr}
   17f34:	4c06      	ldr	r4, [pc, #24]	; (17f50 <_close_r+0x20>)
   17f36:	0005      	movs	r5, r0
   17f38:	0008      	movs	r0, r1
   17f3a:	6023      	str	r3, [r4, #0]
   17f3c:	f7fa f8b8 	bl	120b0 <_close>
   17f40:	1c43      	adds	r3, r0, #1
   17f42:	d103      	bne.n	17f4c <_close_r+0x1c>
   17f44:	6823      	ldr	r3, [r4, #0]
   17f46:	2b00      	cmp	r3, #0
   17f48:	d000      	beq.n	17f4c <_close_r+0x1c>
   17f4a:	602b      	str	r3, [r5, #0]
   17f4c:	bd70      	pop	{r4, r5, r6, pc}
   17f4e:	46c0      	nop			; (mov r8, r8)
   17f50:	20001628 	.word	0x20001628

00017f54 <_fstat_r>:
   17f54:	2300      	movs	r3, #0
   17f56:	b570      	push	{r4, r5, r6, lr}
   17f58:	4c06      	ldr	r4, [pc, #24]	; (17f74 <_fstat_r+0x20>)
   17f5a:	0005      	movs	r5, r0
   17f5c:	0008      	movs	r0, r1
   17f5e:	0011      	movs	r1, r2
   17f60:	6023      	str	r3, [r4, #0]
   17f62:	f7fa f8a8 	bl	120b6 <_fstat>
   17f66:	1c43      	adds	r3, r0, #1
   17f68:	d103      	bne.n	17f72 <_fstat_r+0x1e>
   17f6a:	6823      	ldr	r3, [r4, #0]
   17f6c:	2b00      	cmp	r3, #0
   17f6e:	d000      	beq.n	17f72 <_fstat_r+0x1e>
   17f70:	602b      	str	r3, [r5, #0]
   17f72:	bd70      	pop	{r4, r5, r6, pc}
   17f74:	20001628 	.word	0x20001628

00017f78 <_isatty_r>:
   17f78:	2300      	movs	r3, #0
   17f7a:	b570      	push	{r4, r5, r6, lr}
   17f7c:	4c06      	ldr	r4, [pc, #24]	; (17f98 <_isatty_r+0x20>)
   17f7e:	0005      	movs	r5, r0
   17f80:	0008      	movs	r0, r1
   17f82:	6023      	str	r3, [r4, #0]
   17f84:	f7fa f89c 	bl	120c0 <_isatty>
   17f88:	1c43      	adds	r3, r0, #1
   17f8a:	d103      	bne.n	17f94 <_isatty_r+0x1c>
   17f8c:	6823      	ldr	r3, [r4, #0]
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d000      	beq.n	17f94 <_isatty_r+0x1c>
   17f92:	602b      	str	r3, [r5, #0]
   17f94:	bd70      	pop	{r4, r5, r6, pc}
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	20001628 	.word	0x20001628

00017f9c <_lseek_r>:
   17f9c:	b570      	push	{r4, r5, r6, lr}
   17f9e:	0005      	movs	r5, r0
   17fa0:	0008      	movs	r0, r1
   17fa2:	0011      	movs	r1, r2
   17fa4:	2200      	movs	r2, #0
   17fa6:	4c06      	ldr	r4, [pc, #24]	; (17fc0 <_lseek_r+0x24>)
   17fa8:	6022      	str	r2, [r4, #0]
   17faa:	001a      	movs	r2, r3
   17fac:	f7fa f88a 	bl	120c4 <_lseek>
   17fb0:	1c43      	adds	r3, r0, #1
   17fb2:	d103      	bne.n	17fbc <_lseek_r+0x20>
   17fb4:	6823      	ldr	r3, [r4, #0]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	d000      	beq.n	17fbc <_lseek_r+0x20>
   17fba:	602b      	str	r3, [r5, #0]
   17fbc:	bd70      	pop	{r4, r5, r6, pc}
   17fbe:	46c0      	nop			; (mov r8, r8)
   17fc0:	20001628 	.word	0x20001628

00017fc4 <memchr>:
   17fc4:	b2c9      	uxtb	r1, r1
   17fc6:	1882      	adds	r2, r0, r2
   17fc8:	4290      	cmp	r0, r2
   17fca:	d101      	bne.n	17fd0 <memchr+0xc>
   17fcc:	2000      	movs	r0, #0
   17fce:	4770      	bx	lr
   17fd0:	7803      	ldrb	r3, [r0, #0]
   17fd2:	428b      	cmp	r3, r1
   17fd4:	d0fb      	beq.n	17fce <memchr+0xa>
   17fd6:	3001      	adds	r0, #1
   17fd8:	e7f6      	b.n	17fc8 <memchr+0x4>

00017fda <_realloc_r>:
   17fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fdc:	0007      	movs	r7, r0
   17fde:	000d      	movs	r5, r1
   17fe0:	0016      	movs	r6, r2
   17fe2:	2900      	cmp	r1, #0
   17fe4:	d105      	bne.n	17ff2 <_realloc_r+0x18>
   17fe6:	0011      	movs	r1, r2
   17fe8:	f7fe fd9c 	bl	16b24 <_malloc_r>
   17fec:	0004      	movs	r4, r0
   17fee:	0020      	movs	r0, r4
   17ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ff2:	2a00      	cmp	r2, #0
   17ff4:	d103      	bne.n	17ffe <_realloc_r+0x24>
   17ff6:	f7fe fd4b 	bl	16a90 <_free_r>
   17ffa:	0034      	movs	r4, r6
   17ffc:	e7f7      	b.n	17fee <_realloc_r+0x14>
   17ffe:	f000 f827 	bl	18050 <_malloc_usable_size_r>
   18002:	002c      	movs	r4, r5
   18004:	4286      	cmp	r6, r0
   18006:	d9f2      	bls.n	17fee <_realloc_r+0x14>
   18008:	0031      	movs	r1, r6
   1800a:	0038      	movs	r0, r7
   1800c:	f7fe fd8a 	bl	16b24 <_malloc_r>
   18010:	1e04      	subs	r4, r0, #0
   18012:	d0ec      	beq.n	17fee <_realloc_r+0x14>
   18014:	0029      	movs	r1, r5
   18016:	0032      	movs	r2, r6
   18018:	f7fe fd16 	bl	16a48 <memcpy>
   1801c:	0029      	movs	r1, r5
   1801e:	0038      	movs	r0, r7
   18020:	f7fe fd36 	bl	16a90 <_free_r>
   18024:	e7e3      	b.n	17fee <_realloc_r+0x14>
	...

00018028 <_read_r>:
   18028:	b570      	push	{r4, r5, r6, lr}
   1802a:	0005      	movs	r5, r0
   1802c:	0008      	movs	r0, r1
   1802e:	0011      	movs	r1, r2
   18030:	2200      	movs	r2, #0
   18032:	4c06      	ldr	r4, [pc, #24]	; (1804c <_read_r+0x24>)
   18034:	6022      	str	r2, [r4, #0]
   18036:	001a      	movs	r2, r3
   18038:	f7f9 ffde 	bl	11ff8 <_read>
   1803c:	1c43      	adds	r3, r0, #1
   1803e:	d103      	bne.n	18048 <_read_r+0x20>
   18040:	6823      	ldr	r3, [r4, #0]
   18042:	2b00      	cmp	r3, #0
   18044:	d000      	beq.n	18048 <_read_r+0x20>
   18046:	602b      	str	r3, [r5, #0]
   18048:	bd70      	pop	{r4, r5, r6, pc}
   1804a:	46c0      	nop			; (mov r8, r8)
   1804c:	20001628 	.word	0x20001628

00018050 <_malloc_usable_size_r>:
   18050:	1f0b      	subs	r3, r1, #4
   18052:	681b      	ldr	r3, [r3, #0]
   18054:	1f18      	subs	r0, r3, #4
   18056:	2b00      	cmp	r3, #0
   18058:	da01      	bge.n	1805e <_malloc_usable_size_r+0xe>
   1805a:	580b      	ldr	r3, [r1, r0]
   1805c:	18c0      	adds	r0, r0, r3
   1805e:	4770      	bx	lr
   18060:	2264227b 	.word	0x2264227b
   18064:	62227b3a 	.word	0x62227b3a
   18068:	6c5f7461 	.word	0x6c5f7461
   1806c:	6c657665 	.word	0x6c657665
   18070:	30353a22 	.word	0x30353a22
   18074:	00007d7d 	.word	0x00007d7d
	...

000180a0 <bkspc>:
   180a0:	00000820 20746f6e 20746579 2e746573      ...not yet set.
   180b0:	65735520 74657320 69766544 614e6563      Use setDeviceNa
   180c0:	0000656d 61697242 774b206e 0a0d6e6f     me..Brian Kwon..
   180d0:	00000000 4f525245 000a0d52 69766544     ....ERROR...Devi
   180e0:	6e206563 20656d61 00207369 6c656809     ce name is ..hel
   180f0:	20202070 20202020 20202020 20202020     p               
   18100:	20202020 20202020 69725020 2073746e              Prints 
   18110:	73696874 73656d20 65676173 76090a0d     this message...v
   18120:	625f7265 2020206c 20202020 20202020     er_bl           
   18130:	20202020 20202020 50202020 746e6972                Print
   18140:	68742073 6f622065 6f6c746f 72656461     s the bootloader
   18150:	72696620 7261776d 65762065 6f697372      firmware versio
   18160:	090a0d6e 5f726576 20707061 20202020     n...ver_app     
   18170:	20202020 20202020 20202020 20202020                     
   18180:	6e697250 74207374 61206568 696c7070     Prints the appli
   18190:	69746163 63206e6f 2065646f 6d726966     cation code firm
   181a0:	65726177 72657620 6e6f6973 6d090a0d     ware version...m
   181b0:	20206361 20202020 20202020 20202020     ac              
   181c0:	20202020 20202020 50202020 746e6972                Print
   181d0:	68742073 616d2065 64612063 73657264     s the mac addres
   181e0:	666f2073 76656420 0d656369 7069090a     s of device...ip
   181f0:	20202020 20202020 20202020 20202020                     
   18200:	20202020 20202020 72502020 73746e69               Prints
   18210:	65687420 20706920 64646120 73736572      the ip  address
   18220:	20666f20 69766564 0a0d6563 76656409      of device...dev
   18230:	656d614e 20202020 20202020 20202020     Name            
   18240:	20202020 20202020 69725020 2073746e              Prints 
   18250:	20656874 656d616e 20666f20 20656874     the name of the 
   18260:	65766564 65706f6c 090a0d72 44746573     developer...setD
   18270:	63697665 6d614e65 733c2065 6e697274     eviceName <strin
   18280:	616e2067 203e656d 73746553 65687420     g name> Sets the
   18290:	6d616e20 666f2065 65687420 76656420      name of the dev
   182a0:	20656369 74206f74 67206568 6e657669     ice to the given
   182b0:	72747320 0d676e69 6567090a 76654474      string...getDev
   182c0:	4e656369 20656d61 20202020 20202020     iceName         
   182d0:	20202020 65672020 74207374 6e206568           gets the n
   182e0:	20656d61 7420666f 64206568 63697665     ame of the devic
   182f0:	000a0d65 2e382e38 0d382e38 0000000a     e...8.8.8.8.....
   18300:	322d3139 36392d36 2d33432d 372d3546     91-26-96-C3-F5-7
   18310:	000a0d42 74746142 4c797265 6c657665     B...BatteryLevel
   18320:	00000000 75502049 73696c62 0d646568     ....I Published.
   18330:	0000000a 72727543 20746e65 756c6176     ....Current valu
   18340:	666f2065 5f524920 736e6553 6920726f     e of IR_Sensor i
   18350:	00003a73 65757274 00000a0d 736c6166     s:..true....fals
   18360:	000a0d65 69766544 6e206563 20656d61     e...Device name 
   18370:	20746573 00206f74 706c6568 00000000     set to .help....
   18380:	5f726576 00006c62 5f726576 00707061     ver_bl..ver_app.
   18390:	0063616d 00007069 4e766564 00656d61     mac.ip..devName.
   183a0:	44746573 63697665 6d614e65 00000065     setDeviceName...
   183b0:	44746567 63697665 6d614e65 00000065     getDeviceName...
   183c0:	72617473 75625f74 6e697a7a 00000067     start_buzzing...
   183d0:	706f7473 7a75625f 676e697a 00000000     stop_buzzing....
   183e0:	64616572 0072695f 5f627570 74746162     read_ir.pub_batt
   183f0:	00797265 332e3831 0a0d382e 00000000     ery.18.3.8......
   18400:	312e3231 0a0d312e 00000000              12.1.1......

0001840c <mmc_trans_multipliers>:
   1840c:	00000000 0000000a 0000000c 0000000d     ................
   1841c:	0000000f 00000014 0000001a 0000001e     ................
   1842c:	00000023 00000028 0000002d 00000034     #...(...-...4...
   1843c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0001844c <sd_mmc_trans_units>:
   1844c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00018468 <sd_trans_multipliers>:
   18468:	00000000 0000000a 0000000c 0000000d     ................
   18478:	0000000f 00000014 00000019 0000001e     ................
   18488:	00000023 00000028 0000002d 00000032     #...(...-...2...
   18498:	00000037 0000003c 00000046 00000050     7...<...F...P...

000184a8 <__FUNCTION__.14672>:
   184a8:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   184b8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   184c8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   184d8:	6320746c 0000646d 0000d4ec 0000d4bc     lt cmd..........
   184e8:	0000d4b4 0000d4cc 0000d4c4 0000d4e4     ................
   184f8:	0000d4d4 0000d4dc                       ........

00018500 <__FUNCTION__.13113>:
   18500:	5f666968 646e6573 00000000              hif_send....

0001850c <__FUNCTION__.13123>:
   1850c:	5f666968 00727369                       hif_isr.

00018514 <__FUNCTION__.13132>:
   18514:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00018524 <__FUNCTION__.13144>:
   18524:	5f666968 65636572 00657669              hif_receive.

00018530 <__FUNCTION__.13160>:
   18530:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   18540:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   18550:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   18560:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   18570:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   18580:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   18590:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   185a0:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   185b0:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   185c0:	6c616320 6361626c 7369206b 746f6e20      callback is not
   185d0:	67657220 65747369 00646572 6b6f6353      registered.Scok
   185e0:	63207465 626c6c61 206b6361 6e207369     et callback is n
   185f0:	7220746f 73696765 65726574 00000064     ot registered...
   18600:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   18610:	20746f6e 69676572 72657473 00006465     not registered..
   18620:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   18630:	6e207369 7220746f 73696765 65726574     is not registere
   18640:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   18650:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   18660:	64657265 00000000 66696828 6e692029     ered....(hif) in
   18670:	696c6176 72672064 2070756f 00004449     valid group ID..
   18680:	66696828 6f682029 61207473 64207070     (hif) host app d
   18690:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   186a0:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   186b0:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   186c0:	66696828 61462029 2065736c 65746e69     (hif) False inte
   186d0:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   186e0:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   186f0:	7265746e 74707572 67657220 00000000     nterrupt reg....
   18700:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   18710:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   18720:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   18730:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   18740:	696c6176 72612064 656d7567 0000746e     valid argument..
   18750:	20505041 75716552 65747365 69532064     APP Requested Si
   18760:	6920657a 616c2073 72656772 61687420     ze is larger tha
   18770:	6874206e 65722065 65766963 75622064     n the recived bu
   18780:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   18790:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   187a0:	65747365 64412064 73657264 65622073     ested Address be
   187b0:	646e6f79 65687420 63657220 64657669     yond the recived
   187c0:	66756220 20726566 72646461 20737365      buffer address 
   187d0:	20646e61 676e656c 00006874 20705247     and length..GRp 
   187e0:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   187f0:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   18800:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   18810:	6b617720 74207075 63206568 00706968      wakup the chip.

00018820 <__FUNCTION__.13095>:
   18820:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001882c <__FUNCTION__.13124>:
   1882c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001883c <__FUNCTION__.13155>:
   1883c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1884c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   1885c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   1886c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   1887c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   1888c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   1889c:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   188ac:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   188bc:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   188cc:	20706557 2079656b 65646e69 64252078     Wep key index %d
   188dc:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   188ec:	2079656b 676e656c 25206874 00000a64     key length %d...
   188fc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   1890c:	656c2079 6874676e 00000000 65646e75     y length....unde
   1891c:	656e6966 65732064 79742063 00006570     fined sec type..
   1892c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   1893c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   1894c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   1895c:	69754220 2520646c 69542073 2520656d      Build %s Time %
   1896c:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   1897c:	69726420 20726576 20726576 7525203a      driver ver : %u
   1898c:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   1899c:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   189ac:	353a3731 35303a35 00000000 20766f4e     17:55:05....Nov 
   189bc:	32203831 00393130 76697244 62207265     18 2019.Driver b
   189cc:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   189dc:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   189ec:	65562065 6f697372 0000006e              e Version...

000189f8 <__FUNCTION__.12952>:
   189f8:	70696863 6b61775f 00000065              chip_wake...

00018a04 <__FUNCTION__.13001>:
   18a04:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   18a14:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   18a24:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   18a34:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   18a44:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   18a54:	70696863 00000000 76697244 65567265     chip....DriverVe
   18a64:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00018a74 <__FUNCTION__.12999>:
   18a74:	645f6d6e 695f7672 0074696e              nm_drv_init.

00018a80 <__FUNCTION__.13006>:
   18a80:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   18a90:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   18aa0:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   18ab0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   18ac0:	73616c66 69642068 6c626173 61662065     flash disable fa
   18ad0:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   18ae0:	6c696166 696e6920 75622074 00000073     fail init bus...
   18af0:	6c696166 74206465 6e65206f 656c6261     failed to enable
   18b00:	746e6920 75727265 2e737470 0000002e      interrupts.....
   18b10:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   18b20:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   18b30:	20444920 0a786c25 00000000 0000e4cc      ID %lx.........
   18b40:	0000e4cc 0000e4fc 0000e47e 0000e4a2     ........~.......
   18b50:	0000e4b0 0000e4e2 0000e4e2 0000e52a     ............*...
   18b60:	0000e462 0000e564 0000e564 0000e564     b...d...d...d...
   18b70:	0000e564 0000e4be cac4c9c3              d...........

00018b7c <__FUNCTION__.12268>:
   18b7c:	5f697073 00646d63                       spi_cmd.

00018b84 <__FUNCTION__.12275>:
   18b84:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00018b94 <__FUNCTION__.12284>:
   18b94:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00018ba0 <__FUNCTION__.12300>:
   18ba0:	5f697073 61746164 6165725f 00000064     spi_data_read...

00018bb0 <__FUNCTION__.12315>:
   18bb0:	5f697073 61746164 6972775f 00006574     spi_data_write..

00018bc0 <__FUNCTION__.12327>:
   18bc0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00018bd0 <__FUNCTION__.12338>:
   18bd0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00018be0 <__FUNCTION__.12350>:
   18be0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00018bf0 <__FUNCTION__.12363>:
   18bf0:	735f6d6e 725f6970 00646165              nm_spi_read.

00018bfc <__FUNCTION__.12384>:
   18bfc:	735f6d6e 695f6970 0074696e              nm_spi_init.

00018c08 <crc7_syndrome_table>:
   18c08:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18c18:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18c28:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18c38:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18c48:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18c58:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18c68:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18c78:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18c88:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18c98:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18ca8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18cb8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18cc8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18cd8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18ce8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18cf8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   18d08:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d18:	6e692064 6e726574 72206c61 20646165     d internal read 
   18d28:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   18d38:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   18d48:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   18d58:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d68:	6e692064 6e726574 72206c61 20646165     d internal read 
   18d78:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   18d88:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   18d98:	6e726574 77206c61 65746972 6f727020     ternal write pro
   18da8:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   18db8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   18dc8:	20646d63 64616572 69686320 64692070     cmd read chip id
   18dd8:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18de8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   18df8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   18e08:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18e18:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   18e28:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   18e38:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   18e48:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   18e58:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   18e68:	00000000 65736552 6e612074 65722064     ....Reset and re
   18e78:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   18e88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18e98:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   18ea8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   18eb8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   18ec8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   18ed8:	69727720 62206574 6b636f6c 30252820      write block (%0
   18ee8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   18ef8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18f08:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   18f18:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   18f28:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18f38:	61642064 62206174 6b636f6c 69727720     d data block wri
   18f48:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   18f58:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18f68:	656c6961 61642064 62206174 6b636f6c     ailed data block
   18f78:	63726320 69727720 202c6574 20737562      crc write, bus 
   18f88:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   18f98:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   18fa8:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   18fb8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   18fc8:	72206174 6f707365 2065736e 64616572     ta response read
   18fd8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   18fe8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   18ff8:	206b636f 61746164 69727720 2e2e6574     ock data write..
   19008:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19018:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   19028:	73756220 72726520 2e2e726f 0000002e      bus error......
   19038:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19048:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   19058:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   19068:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19078:	656c6961 61642064 72206174 6f707365     ailed data respo
   19088:	2065736e 64616572 7562202c 72652073     nse read, bus er
   19098:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   190a8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   190b8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   190c8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   190d8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   190e8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   190f8:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   19108:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   19118:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   19128:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   19138:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   19148:	72202c64 20646165 20676572 38302528     d, read reg (%08
   19158:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   19168:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   19178:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   19188:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   19198:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   191a8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   191b8:	6e612074 65722064 20797274 25206425     t and retry %d %
   191c8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   191d8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   191e8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   191f8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19208:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   19218:	74697277 65722065 25282067 29783830     write reg (%08x)
   19228:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   19238:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   19248:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   19258:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   19268:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   19278:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   19288:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
   19298:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   192a8:	42001c00 00011122 0001111e 0001111e     ...B"...........
   192b8:	00011184 00011184 00011136 00011128     ........6...(...
   192c8:	0001113c 00011172 00011344 00011324     <...r...D...$...
   192d8:	00011324 000113b0 00011336 00011352     $.......6...R...
   192e8:	00011328 00011360 000113a0              (...`.......

000192f4 <_tcc_apbcmasks>:
   192f4:	00000100 00000200 00000400              ............

00019300 <_tcc_cc_nums>:
   19300:	00020204                                ....

00019304 <_tcc_gclk_ids>:
   19304:	001b1a1a                                ....

00019308 <_tcc_maxs>:
   19308:	00ffffff 00ffffff 0000ffff              ............

00019314 <_tcc_ow_nums>:
   19314:	00020408                                ....

00019318 <_tcc_intflag>:
   19318:	00000001 00000002 00000004 00000008     ................
   19328:	00001000 00002000 00004000 00008000     ..... ...@......
   19338:	00010000 00020000 00040000 00080000     ................

00019348 <tcc_interrupt_vectors.12458>:
   19348:	0011100f                                ....

0001934c <LfnOfs>:
   1934c:	07050301 12100e09 1c181614 0000001e     ................

0001935c <excvt.4558>:
   1935c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   1936c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   1937c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   1938c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1939c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   193ac:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   193bc:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   193cc:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   193dc:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   193ec:	00005d5b                                []..

000193f0 <Tbl>:
   193f0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   19400:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   19410:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   19420:	00d600ff 00f800dc 00d800a3 019200d7     ................
   19430:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   19440:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   19450:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   19460:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   19470:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   19480:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   19490:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   194a0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   194b0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   194c0:	00da00de 00d900db 00dd00fd 00b400af     ................
   194d0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   194e0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000194f0 <tbl_lower.4308>:
   194f0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   19500:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   19510:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   19520:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   19530:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   19540:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   19550:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   19560:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   19570:	01050103 01090107 010d010b 0111010f     ................
   19580:	01150113 01190117 011d011b 0121011f     ..............!.
   19590:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   195a0:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   195b0:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   195c0:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   195d0:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   195e0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   195f0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   19600:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   19610:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   19620:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   19630:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   19640:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   19650:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   19660:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   19670:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   19680:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   19690:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   196a0:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   196b0:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   196c0:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000196d0 <tbl_upper.4309>:
   196d0:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   196e0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   196f0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   19700:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   19710:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   19720:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   19730:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   19740:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   19750:	01040102 01080106 010c010a 0110010e     ................
   19760:	01140112 01180116 011c011a 0120011e     .............. .
   19770:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   19780:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   19790:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   197a0:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   197b0:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   197c0:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   197d0:	03940393 03960395 03980397 039a0399     ................
   197e0:	039c039b 039e039d 03a0039f 03a303a1     ................
   197f0:	03a503a4 03a703a6 03a903a8 041003aa     ................
   19800:	04120411 04140413 04160415 04180417     ................
   19810:	041a0419 041c041b 041e041d 0420041f     .............. .
   19820:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   19830:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   19840:	04030402 04050404 04070406 04090408     ................
   19850:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   19860:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   19870:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   19880:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   19890:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   198a0:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   198b0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   198c8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   19908:	4354514d 00000000 00000004 00000000     MQTC............
	...
   19920:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   19960:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   19970:	33323130 37363534 62613938 66656463     0123456789abcdef
   19980:	20544547 00000000 54534f50 00000020     GET ....POST ...
   19990:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   199a0:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   199b0:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   199c0:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   199d0:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   199e0:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   199f0:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   19a00:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   19a10:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   19a20:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   19a30:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   19a40:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   19a50:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   19a60:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   19a70:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   19a80:	42002800 000160a4 000160ac 000160ba     .(.B.`...`...`..
   19a90:	000160f2 00016108 25200a0d 00732a2e     .`...a.... %.*s.
   19aa0:	203e3e20 00000000 732a2e25 00000000      >> ....%.*s....
   19ab0:	4464654c 00617461 736c6166 00000065     LedData.false...
   19ac0:	65757274 00000000 2264227b 74227b3a     true....{"d":{"t
   19ad0:	22706d65 7d64253a 0000007d 70747468     emp":%d}}...http
   19ae0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   19af0:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   19b00:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   19b10:	00000000 70747468 696c635f 5f746e65     ....http_client_
   19b20:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   19b30:	6f632074 656c706d 2e646574 0000000d     t completed.....
   19b40:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   19b50:	6b636162 6572203a 76696563 72206465     back: received r
   19b60:	6f707365 2065736e 64207525 20617461     esponse %u data 
   19b70:	657a6973 0d752520 0000000a 70747468     size %u.....http
   19b80:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   19b90:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   19ba0:	73616572 253a6e6f 000a0d64 53202d2d     reason:%d...-- S
   19bb0:	5452414d 534f4420 50412045 43494c50     MART DOSE APPLIC
   19bc0:	4f495441 2d2d204e 52455620 4e4f4953     ATION -- VERSION
   19bd0:	2d204220 2d0a0d2d 4153202d 3532574d      B --..-- SAMW25
   19be0:	4c50585f 454e4941 52505f44 2d2d204f     _XPLAINED_PRO --
   19bf0:	2d2d0a0d 6d6f4320 656c6970 4e203a64     ..-- Compiled: N
   19c00:	3120766f 30322038 31203931 35353a37     ov 18 2019 17:55
   19c10:	2030313a 000d2d2d 68540a0d 65207369     :10 --....This e
   19c20:	706d6178 7220656c 69757165 20736572     xample requires 
   19c30:	20656874 74205041 6168206f 69206576     the AP to have i
   19c40:	7265746e 2074656e 65636361 0d2e7373     nternet access..
   19c50:	00000d0a 35455345 2d203631 66695720     ....ESE516 - Wif
   19c60:	6e492069 43207469 0d65646f 00000000     i Init Code.....
   19c70:	74696e69 6f74735f 65676172 6c70203a     init_storage: pl
   19c80:	65736165 756c7020 6e612067 2f445320     ease plug an SD/
   19c90:	20434d4d 64726163 206e6920 746f6c73     MMC card in slot
   19ca0:	0d2e2e2e 00000000 74696e69 6f74735f     ........init_sto
   19cb0:	65676172 4453203a 72614320 6e692064     rage: SD Card in
   19cc0:	6c617473 6166206c 64656c69 00000d2e     stall failed....
   19cd0:	74696e69 6f74735f 65676172 7274203a     init_storage: tr
   19ce0:	6e752079 67756c70 646e6120 2d657220     y unplug and re-
   19cf0:	67756c70 65687420 72616320 000d2e64     plug the card...
   19d00:	74696e69 6f74735f 65676172 6f6d203a     init_storage: mo
   19d10:	69746e75 5320676e 61632044 2e2e6472     unting SD card..
   19d20:	00000d2e 74696e69 6f74735f 65676172     ....init_storage
   19d30:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   19d40:	6c696166 20216465 73657228 29642520     failed! (res %d)
   19d50:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   19d60:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   19d70:	0d2e4b4f 00000000 666e6f63 72756769     OK......configur
   19d80:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   19d90:	20505454 65696c63 6920746e 6974696e     TTP client initi
   19da0:	7a696c61 6f697461 6166206e 64656c69     alization failed
   19db0:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   19dc0:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   19dd0:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   19de0:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   19df0:	00000000 5454514d 67657220 65747369     ....MQTT registe
   19e00:	61632072 61626c6c 66206b63 656c6961     r callback faile
   19e10:	45202e64 726f7272 646f6320 73692065     d. Error code is
   19e20:	64252820 000a0d29 6e69616d 326d203a      (%d)...main: m2
   19e30:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   19e40:	72726520 2021726f 73657228 29642520      error! (res %d)
   19e50:	00000a0d 6e69616d 6f63203a 63656e6e     ....main: connec
   19e60:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
   19e70:	2e2e7325 000a0d2e 6e69616d 6f64203a     %s......main: do
   19e80:	0d2e656e 00000000 3e525245 7953203e     ne......ERR>> Sy
   19e90:	63697473 6f63206b 6769666e 74617275     stick configurat
   19ea0:	206e6f69 6f727265 000a0d72              ion error...

00019eac <main_mqtt_broker>:
   19eac:	6c696174 632e726f 64756f6c 7474716d     tailor.cloudmqtt
   19ebc:	6d6f632e 00000000 6f430a0d 63656e6e     .com......Connec
   19ecc:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   19edc:	0000002e 44714b56 546f5637 3056582d     ....VKqD7VoT-XV0
   19eec:	00000000 73617573 62627670 00000000     ....suaspvbb....
   19efc:	5454514d 72452020 20726f72 4f4e202d     MQTT  Error - NO
   19f0c:	6f432054 63656e6e 20646574 62206f74     T Connected to b
   19f1c:	656b6f72 00000d72 5454514d 6e6f4320     roker...MQTT Con
   19f2c:	7463656e 74206465 7262206f 72656b6f     nected to broker
   19f3c:	0000000d 6e6e6f43 20746365 6c696166     ....Connect fail
   19f4c:	206f7420 76726573 25287265 20212973      to server(%s)! 
   19f5c:	72746572 74692079 74756120 74616d6f     retry it automat
   19f6c:	6c616369 0d2e796c 0000000a 706d6554     ically......Temp
   19f7c:	61746144 00000000 5454514d 6e6f4320     Data....MQTT Con
   19f8c:	7463656e 000d6465 5454514d 6f726220     nected..MQTT bro
   19f9c:	2072656b 6c636564 20656e69 72756f79     ker decline your
   19fac:	63636120 21737365 72726520 6320726f      access! error c
   19fbc:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   19fcc:	73696420 6e6e6f63 65746365 00000d64      disconnected...
   19fdc:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   19fec:	20434d4d 726f7473 20656761 20746f6e     MMC storage not 
   19ffc:	64616572 000d2e79 72617473 6f645f74     ready...start_do
   1a00c:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   1a01c:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   1a02c:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   1a03c:	203a6461 75716572 20747365 73207369     ad: request is s
   1a04c:	20746e65 65726c61 2e796461 0000000d     ent already.....
   1a05c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1a06c:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   1a07c:	726c6120 79646165 00000d2e 72617473      already....star
   1a08c:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   1a09c:	20676e69 50545448 71657220 74736575     ing HTTP request
   1a0ac:	0d2e2e2e 00000000 70747468 2f2f3a73     ........https://
   1a0bc:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   1a0cc:	7e2f7564 61697262 6e776b6e 616d532f     du/~briankwn/Sma
   1a0dc:	6f447472 69466573 61776d72 702f6572     rtDoseFirmware/p
   1a0ec:	6d617261 73632e73 00000076 70747468     arams.csv...http
   1a0fc:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   1a10c:	652e6e6e 7e2f7564 61697262 6e776b6e     nn.edu/~briankwn
   1a11c:	616d532f 6f447472 69466573 61776d72     /SmartDoseFirmwa
   1a12c:	612f6572 622e7070 00006e69 726f7473     re/app.bin..stor
   1a13c:	69665f65 705f656c 656b6361 65203a74     e_file_packet: e
   1a14c:	7974706d 74616420 000d2e61 726f7473     mpty data...stor
   1a15c:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
   1a16c:	74616572 20676e69 656c6966 73255b20     reating file [%s
   1a17c:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
   1a18c:	656b6361 66203a74 20656c69 656d616e     acket: file name
   1a19c:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   1a1ac:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   1a1bc:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   1a1cc:	656b6361 66203a74 20656c69 61657263     acket: file crea
   1a1dc:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
   1a1ec:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
   1a1fc:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   1a20c:	74697277 72652065 2c726f72 776f6420     write error, dow
   1a21c:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   1a22c:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   1a23c:	656b6361 72203a74 69656365 5b646576     acket: received[
   1a24c:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
   1a25c:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
   1a26c:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   1a27c:	6e776f64 64616f6c 73206465 65636375     downloaded succe
   1a28c:	75667373 2e796c6c 0000000d 69666977     ssfully.....wifi
   1a29c:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   1a2ac:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
   1a2bc:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   1a2cc:	4e4f4353 5443454e 000d4445 6e6e6570     SCONNECTED..penn
   1a2dc:	30343731 69666977 00000000 50726941     1740wifi....AirP
   1a2ec:	4e6e6e65 442d7465 63697665 00000065     ennNet-Device...
   1a2fc:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   1a30c:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   1a31c:	0a0d7525 00000000 6f727245 6f632072     %u......Error co
   1a32c:	63656e6e 676e6974 206f7420 5454514d     nnecting to MQTT
   1a33c:	6f724220 2172656b 0000000d               Broker!....

0001a348 <_global_impure_ptr>:
   1a348:	200001f4                                ... 

0001a34c <__sf_fake_stderr>:
	...

0001a36c <__sf_fake_stdin>:
	...

0001a38c <__sf_fake_stdout>:
	...
   1a3ac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1a3bc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1a3cc:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1a3dc:	00006665                                ef..

0001a3e0 <_init>:
   1a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3e2:	46c0      	nop			; (mov r8, r8)
   1a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a3e6:	bc08      	pop	{r3}
   1a3e8:	469e      	mov	lr, r3
   1a3ea:	4770      	bx	lr

0001a3ec <__init_array_start>:
   1a3ec:	0000b0dd 	.word	0x0000b0dd

0001a3f0 <_fini>:
   1a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3f2:	46c0      	nop			; (mov r8, r8)
   1a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a3f6:	bc08      	pop	{r3}
   1a3f8:	469e      	mov	lr, r3
   1a3fa:	4770      	bx	lr

0001a3fc <__fini_array_start>:
   1a3fc:	0000b0b5 	.word	0x0000b0b5
