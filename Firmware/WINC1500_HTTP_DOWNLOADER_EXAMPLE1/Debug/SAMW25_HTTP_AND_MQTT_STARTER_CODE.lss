
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f91c  0000b000  0000b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000320  20000000  0001a91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000131c  20000320  0001ac3c  00020320  2**2
                  ALLOC
  3 .stack        00002004  2000163c  0001bf58  00020320  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  6 .debug_info   00082be8  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c61b  00000000  00000000  000a2f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00021654  00000000  00000000  000af5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017e0  00000000  00000000  000d0bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002150  00000000  00000000  000d23d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016ed6  00000000  00000000  000d4528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002a397  00000000  00000000  000eb3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a081e  00000000  00000000  00115795  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ef8  00000000  00000000  001b5fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000b000 <exception_table>:
    b000:	40 36 00 20 d5 1b 01 00 d1 1b 01 00 d1 1b 01 00     @6. ............
	...
    b02c:	d1 1b 01 00 00 00 00 00 00 00 00 00 d1 1b 01 00     ................
    b03c:	f9 41 01 00 d1 1b 01 00 d1 1b 01 00 d1 1b 01 00     .A..............
    b04c:	e1 fb 00 00 61 f8 00 00 d1 1b 01 00 d1 1b 01 00     ....a...........
    b05c:	d1 1b 01 00 d1 1b 01 00 09 00 01 00 19 00 01 00     ................
    b06c:	29 00 01 00 39 00 01 00 49 00 01 00 59 00 01 00     )...9...I...Y...
    b07c:	a1 1b 01 00 b1 1b 01 00 c1 1b 01 00 d1 1b 01 00     ................
    b08c:	d1 1b 01 00 d1 1b 01 00 00 00 00 00 00 00 00 00     ................
    b09c:	d1 1b 01 00 d1 1b 01 00 d1 1b 01 00 d1 1b 01 00     ................
    b0ac:	d1 1b 01 00 00 00 00 00                             ........

0000b0b4 <__do_global_dtors_aux>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	4c06      	ldr	r4, [pc, #24]	; (b0d0 <__do_global_dtors_aux+0x1c>)
    b0b8:	7823      	ldrb	r3, [r4, #0]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d107      	bne.n	b0ce <__do_global_dtors_aux+0x1a>
    b0be:	4b05      	ldr	r3, [pc, #20]	; (b0d4 <__do_global_dtors_aux+0x20>)
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d002      	beq.n	b0ca <__do_global_dtors_aux+0x16>
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <__do_global_dtors_aux+0x24>)
    b0c6:	e000      	b.n	b0ca <__do_global_dtors_aux+0x16>
    b0c8:	bf00      	nop
    b0ca:	2301      	movs	r3, #1
    b0cc:	7023      	strb	r3, [r4, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	20000320 	.word	0x20000320
    b0d4:	00000000 	.word	0x00000000
    b0d8:	0001a91c 	.word	0x0001a91c

0000b0dc <frame_dummy>:
    b0dc:	4b08      	ldr	r3, [pc, #32]	; (b100 <frame_dummy+0x24>)
    b0de:	b510      	push	{r4, lr}
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <frame_dummy+0x10>
    b0e4:	4907      	ldr	r1, [pc, #28]	; (b104 <frame_dummy+0x28>)
    b0e6:	4808      	ldr	r0, [pc, #32]	; (b108 <frame_dummy+0x2c>)
    b0e8:	e000      	b.n	b0ec <frame_dummy+0x10>
    b0ea:	bf00      	nop
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <frame_dummy+0x30>)
    b0ee:	6803      	ldr	r3, [r0, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <frame_dummy+0x1a>
    b0f4:	bd10      	pop	{r4, pc}
    b0f6:	4b06      	ldr	r3, [pc, #24]	; (b110 <frame_dummy+0x34>)
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d0fb      	beq.n	b0f4 <frame_dummy+0x18>
    b0fc:	4798      	blx	r3
    b0fe:	e7f9      	b.n	b0f4 <frame_dummy+0x18>
    b100:	00000000 	.word	0x00000000
    b104:	20000324 	.word	0x20000324
    b108:	0001a91c 	.word	0x0001a91c
    b10c:	0001a91c 	.word	0x0001a91c
    b110:	00000000 	.word	0x00000000

0000b114 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    b114:	b510      	push	{r4, lr}
    b116:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    b118:	7c03      	ldrb	r3, [r0, #16]
    b11a:	2b00      	cmp	r3, #0
    b11c:	d005      	beq.n	b12a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b11e:	6883      	ldr	r3, [r0, #8]
    b120:	1c58      	adds	r0, r3, #1
    b122:	68e1      	ldr	r1, [r4, #12]
    b124:	4b07      	ldr	r3, [pc, #28]	; (b144 <advance_pointer+0x30>)
    b126:	4798      	blx	r3
    b128:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    b12a:	6863      	ldr	r3, [r4, #4]
    b12c:	1c58      	adds	r0, r3, #1
    b12e:	68e1      	ldr	r1, [r4, #12]
    b130:	4b04      	ldr	r3, [pc, #16]	; (b144 <advance_pointer+0x30>)
    b132:	4798      	blx	r3
    b134:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    b136:	68a3      	ldr	r3, [r4, #8]
    b138:	1a59      	subs	r1, r3, r1
    b13a:	424a      	negs	r2, r1
    b13c:	414a      	adcs	r2, r1
    b13e:	7422      	strb	r2, [r4, #16]
 }
    b140:	bd10      	pop	{r4, pc}
    b142:	46c0      	nop			; (mov r8, r8)
    b144:	00016cc9 	.word	0x00016cc9

0000b148 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    b148:	b570      	push	{r4, r5, r6, lr}
    b14a:	0005      	movs	r5, r0
    b14c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    b14e:	2014      	movs	r0, #20
    b150:	4b04      	ldr	r3, [pc, #16]	; (b164 <circular_buf_init+0x1c>)
    b152:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    b154:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    b156:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    b158:	2300      	movs	r3, #0
    b15a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    b15c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    b15e:	7403      	strb	r3, [r0, #16]
 }
    b160:	bd70      	pop	{r4, r5, r6, pc}
    b162:	46c0      	nop			; (mov r8, r8)
    b164:	00016f51 	.word	0x00016f51

0000b168 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    b168:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    b16a:	6803      	ldr	r3, [r0, #0]
    b16c:	6842      	ldr	r2, [r0, #4]
    b16e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    b170:	4b01      	ldr	r3, [pc, #4]	; (b178 <circular_buf_put+0x10>)
    b172:	4798      	blx	r3
 }
    b174:	bd10      	pop	{r4, pc}
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	0000b115 	.word	0x0000b115

0000b17c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    b17c:	7c02      	ldrb	r2, [r0, #16]
    b17e:	2300      	movs	r3, #0
    b180:	2a00      	cmp	r2, #0
    b182:	d105      	bne.n	b190 <circular_buf_empty+0x14>
    b184:	6843      	ldr	r3, [r0, #4]
    b186:	6880      	ldr	r0, [r0, #8]
    b188:	1a1b      	subs	r3, r3, r0
    b18a:	4258      	negs	r0, r3
    b18c:	4143      	adcs	r3, r0
    b18e:	b2db      	uxtb	r3, r3
    b190:	0018      	movs	r0, r3
 }
    b192:	4770      	bx	lr

0000b194 <circular_buf_get>:
 {
    b194:	b570      	push	{r4, r5, r6, lr}
    b196:	0004      	movs	r4, r0
    b198:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    b19a:	4b0a      	ldr	r3, [pc, #40]	; (b1c4 <circular_buf_get+0x30>)
    b19c:	4798      	blx	r3
    b19e:	2800      	cmp	r0, #0
    b1a0:	d10d      	bne.n	b1be <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    b1a2:	6823      	ldr	r3, [r4, #0]
    b1a4:	68a2      	ldr	r2, [r4, #8]
    b1a6:	5c9b      	ldrb	r3, [r3, r2]
    b1a8:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    b1aa:	2300      	movs	r3, #0
    b1ac:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    b1ae:	68a3      	ldr	r3, [r4, #8]
    b1b0:	1c58      	adds	r0, r3, #1
    b1b2:	68e1      	ldr	r1, [r4, #12]
    b1b4:	4b04      	ldr	r3, [pc, #16]	; (b1c8 <circular_buf_get+0x34>)
    b1b6:	4798      	blx	r3
    b1b8:	60a1      	str	r1, [r4, #8]
		 r = 0;
    b1ba:	2000      	movs	r0, #0
 }
    b1bc:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    b1be:	2001      	movs	r0, #1
    b1c0:	4240      	negs	r0, r0
	 return r;
    b1c2:	e7fb      	b.n	b1bc <circular_buf_get+0x28>
    b1c4:	0000b17d 	.word	0x0000b17d
    b1c8:	00016cc9 	.word	0x00016cc9

0000b1cc <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    b1cc:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    b1ce:	4b06      	ldr	r3, [pc, #24]	; (b1e8 <usart_write_callback+0x1c>)
    b1d0:	6818      	ldr	r0, [r3, #0]
    b1d2:	4906      	ldr	r1, [pc, #24]	; (b1ec <usart_write_callback+0x20>)
    b1d4:	4b06      	ldr	r3, [pc, #24]	; (b1f0 <usart_write_callback+0x24>)
    b1d6:	4798      	blx	r3
    b1d8:	1c43      	adds	r3, r0, #1
    b1da:	d004      	beq.n	b1e6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b1dc:	2201      	movs	r2, #1
    b1de:	4903      	ldr	r1, [pc, #12]	; (b1ec <usart_write_callback+0x20>)
    b1e0:	4804      	ldr	r0, [pc, #16]	; (b1f4 <usart_write_callback+0x28>)
    b1e2:	4b05      	ldr	r3, [pc, #20]	; (b1f8 <usart_write_callback+0x2c>)
    b1e4:	4798      	blx	r3
	}
	
}
    b1e6:	bd10      	pop	{r4, pc}
    b1e8:	20001338 	.word	0x20001338
    b1ec:	20001334 	.word	0x20001334
    b1f0:	0000b195 	.word	0x0000b195
    b1f4:	20000ef8 	.word	0x20000ef8
    b1f8:	00010be1 	.word	0x00010be1

0000b1fc <InitializeSerialConsole>:
{
    b1fc:	b530      	push	{r4, r5, lr}
    b1fe:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    b200:	2580      	movs	r5, #128	; 0x80
    b202:	00ad      	lsls	r5, r5, #2
    b204:	0029      	movs	r1, r5
    b206:	4836      	ldr	r0, [pc, #216]	; (b2e0 <InitializeSerialConsole+0xe4>)
    b208:	4c36      	ldr	r4, [pc, #216]	; (b2e4 <InitializeSerialConsole+0xe8>)
    b20a:	47a0      	blx	r4
    b20c:	4b36      	ldr	r3, [pc, #216]	; (b2e8 <InitializeSerialConsole+0xec>)
    b20e:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    b210:	0029      	movs	r1, r5
    b212:	4836      	ldr	r0, [pc, #216]	; (b2ec <InitializeSerialConsole+0xf0>)
    b214:	47a0      	blx	r4
    b216:	4b36      	ldr	r3, [pc, #216]	; (b2f0 <InitializeSerialConsole+0xf4>)
    b218:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b21a:	2380      	movs	r3, #128	; 0x80
    b21c:	05db      	lsls	r3, r3, #23
    b21e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b220:	2300      	movs	r3, #0
    b222:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b224:	22ff      	movs	r2, #255	; 0xff
    b226:	4669      	mov	r1, sp
    b228:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    b22a:	2200      	movs	r2, #0
    b22c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b22e:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b230:	2101      	movs	r1, #1
    b232:	2024      	movs	r0, #36	; 0x24
    b234:	466c      	mov	r4, sp
    b236:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    b238:	3001      	adds	r0, #1
    b23a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    b23c:	3125      	adds	r1, #37	; 0x25
    b23e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    b240:	3101      	adds	r1, #1
    b242:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    b244:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b246:	3105      	adds	r1, #5
    b248:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    b24a:	3101      	adds	r1, #1
    b24c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b24e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b250:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b252:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b254:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b256:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b258:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    b25a:	2313      	movs	r3, #19
    b25c:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b25e:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    b260:	23e1      	movs	r3, #225	; 0xe1
    b262:	025b      	lsls	r3, r3, #9
    b264:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b266:	23c4      	movs	r3, #196	; 0xc4
    b268:	039b      	lsls	r3, r3, #14
    b26a:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b26c:	2301      	movs	r3, #1
    b26e:	425b      	negs	r3, r3
    b270:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b272:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b274:	4b1f      	ldr	r3, [pc, #124]	; (b2f4 <InitializeSerialConsole+0xf8>)
    b276:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b278:	4b1f      	ldr	r3, [pc, #124]	; (b2f8 <InitializeSerialConsole+0xfc>)
    b27a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    b27c:	4d1f      	ldr	r5, [pc, #124]	; (b2fc <InitializeSerialConsole+0x100>)
    b27e:	4c20      	ldr	r4, [pc, #128]	; (b300 <InitializeSerialConsole+0x104>)
    b280:	466a      	mov	r2, sp
    b282:	4920      	ldr	r1, [pc, #128]	; (b304 <InitializeSerialConsole+0x108>)
    b284:	0028      	movs	r0, r5
    b286:	47a0      	blx	r4
    b288:	2800      	cmp	r0, #0
    b28a:	d1f9      	bne.n	b280 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b28c:	4d1b      	ldr	r5, [pc, #108]	; (b2fc <InitializeSerialConsole+0x100>)
    b28e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b290:	0020      	movs	r0, r4
    b292:	4b1d      	ldr	r3, [pc, #116]	; (b308 <InitializeSerialConsole+0x10c>)
    b294:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b296:	231f      	movs	r3, #31
    b298:	4018      	ands	r0, r3
    b29a:	3b1e      	subs	r3, #30
    b29c:	4083      	lsls	r3, r0
    b29e:	4a1b      	ldr	r2, [pc, #108]	; (b30c <InitializeSerialConsole+0x110>)
    b2a0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b2a2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    b2a4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d1fc      	bne.n	b2a4 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b2aa:	6823      	ldr	r3, [r4, #0]
    b2ac:	2202      	movs	r2, #2
    b2ae:	4313      	orrs	r3, r2
    b2b0:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    b2b2:	4c12      	ldr	r4, [pc, #72]	; (b2fc <InitializeSerialConsole+0x100>)
    b2b4:	2200      	movs	r2, #0
    b2b6:	4916      	ldr	r1, [pc, #88]	; (b310 <InitializeSerialConsole+0x114>)
    b2b8:	0020      	movs	r0, r4
    b2ba:	4d16      	ldr	r5, [pc, #88]	; (b314 <InitializeSerialConsole+0x118>)
    b2bc:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    b2be:	2201      	movs	r2, #1
    b2c0:	4915      	ldr	r1, [pc, #84]	; (b318 <InitializeSerialConsole+0x11c>)
    b2c2:	0020      	movs	r0, r4
    b2c4:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b2c6:	2231      	movs	r2, #49	; 0x31
    b2c8:	5ca3      	ldrb	r3, [r4, r2]
    b2ca:	2103      	movs	r1, #3
    b2cc:	430b      	orrs	r3, r1
    b2ce:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    b2d0:	3a30      	subs	r2, #48	; 0x30
    b2d2:	4912      	ldr	r1, [pc, #72]	; (b31c <InitializeSerialConsole+0x120>)
    b2d4:	0020      	movs	r0, r4
    b2d6:	4b12      	ldr	r3, [pc, #72]	; (b320 <InitializeSerialConsole+0x124>)
    b2d8:	4798      	blx	r3
}
    b2da:	b011      	add	sp, #68	; 0x44
    b2dc:	bd30      	pop	{r4, r5, pc}
    b2de:	46c0      	nop			; (mov r8, r8)
    b2e0:	20001134 	.word	0x20001134
    b2e4:	0000b149 	.word	0x0000b149
    b2e8:	20000f2c 	.word	0x20000f2c
    b2ec:	20000f34 	.word	0x20000f34
    b2f0:	20001338 	.word	0x20001338
    b2f4:	002a0003 	.word	0x002a0003
    b2f8:	002b0003 	.word	0x002b0003
    b2fc:	20000ef8 	.word	0x20000ef8
    b300:	0001075d 	.word	0x0001075d
    b304:	42001800 	.word	0x42001800
    b308:	0000ffd9 	.word	0x0000ffd9
    b30c:	e000e100 	.word	0xe000e100
    b310:	0000b1cd 	.word	0x0000b1cd
    b314:	00010bc9 	.word	0x00010bc9
    b318:	0000b399 	.word	0x0000b399
    b31c:	20000f30 	.word	0x20000f30
    b320:	00010c01 	.word	0x00010c01

0000b324 <SerialConsoleWriteString>:
{
    b324:	b5f0      	push	{r4, r5, r6, r7, lr}
    b326:	46c6      	mov	lr, r8
    b328:	b500      	push	{lr}
    b32a:	0005      	movs	r5, r0
    b32c:	2400      	movs	r4, #0
	if(string != NULL)
    b32e:	2800      	cmp	r0, #0
    b330:	d012      	beq.n	b358 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
    b332:	4e11      	ldr	r6, [pc, #68]	; (b378 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
    b334:	4f11      	ldr	r7, [pc, #68]	; (b37c <SerialConsoleWriteString+0x58>)
    b336:	4b12      	ldr	r3, [pc, #72]	; (b380 <SerialConsoleWriteString+0x5c>)
    b338:	4698      	mov	r8, r3
    b33a:	e003      	b.n	b344 <SerialConsoleWriteString+0x20>
    b33c:	5d29      	ldrb	r1, [r5, r4]
    b33e:	6838      	ldr	r0, [r7, #0]
    b340:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    b342:	3401      	adds	r4, #1
    b344:	0028      	movs	r0, r5
    b346:	47b0      	blx	r6
    b348:	4284      	cmp	r4, r0
    b34a:	d3f7      	bcc.n	b33c <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    b34c:	2101      	movs	r1, #1
    b34e:	480d      	ldr	r0, [pc, #52]	; (b384 <SerialConsoleWriteString+0x60>)
    b350:	4b0d      	ldr	r3, [pc, #52]	; (b388 <SerialConsoleWriteString+0x64>)
    b352:	4798      	blx	r3
    b354:	2800      	cmp	r0, #0
    b356:	d002      	beq.n	b35e <SerialConsoleWriteString+0x3a>
}
    b358:	bc04      	pop	{r2}
    b35a:	4690      	mov	r8, r2
    b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    b35e:	4c0b      	ldr	r4, [pc, #44]	; (b38c <SerialConsoleWriteString+0x68>)
    b360:	4b06      	ldr	r3, [pc, #24]	; (b37c <SerialConsoleWriteString+0x58>)
    b362:	6818      	ldr	r0, [r3, #0]
    b364:	0021      	movs	r1, r4
    b366:	4b0a      	ldr	r3, [pc, #40]	; (b390 <SerialConsoleWriteString+0x6c>)
    b368:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    b36a:	2201      	movs	r2, #1
    b36c:	0021      	movs	r1, r4
    b36e:	4805      	ldr	r0, [pc, #20]	; (b384 <SerialConsoleWriteString+0x60>)
    b370:	4b08      	ldr	r3, [pc, #32]	; (b394 <SerialConsoleWriteString+0x70>)
    b372:	4798      	blx	r3
}
    b374:	e7f0      	b.n	b358 <SerialConsoleWriteString+0x34>
    b376:	46c0      	nop			; (mov r8, r8)
    b378:	000174d7 	.word	0x000174d7
    b37c:	20001338 	.word	0x20001338
    b380:	0000b169 	.word	0x0000b169
    b384:	20000ef8 	.word	0x20000ef8
    b388:	00010c21 	.word	0x00010c21
    b38c:	20001334 	.word	0x20001334
    b390:	0000b195 	.word	0x0000b195
    b394:	00010be1 	.word	0x00010be1

0000b398 <usart_read_callback>:
{
    b398:	b510      	push	{r4, lr}
	SerialConsoleWriteString(&latestRx);
    b39a:	4c07      	ldr	r4, [pc, #28]	; (b3b8 <usart_read_callback+0x20>)
    b39c:	0020      	movs	r0, r4
    b39e:	4b07      	ldr	r3, [pc, #28]	; (b3bc <usart_read_callback+0x24>)
    b3a0:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    b3a2:	7821      	ldrb	r1, [r4, #0]
    b3a4:	4b06      	ldr	r3, [pc, #24]	; (b3c0 <usart_read_callback+0x28>)
    b3a6:	6818      	ldr	r0, [r3, #0]
    b3a8:	4b06      	ldr	r3, [pc, #24]	; (b3c4 <usart_read_callback+0x2c>)
    b3aa:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    b3ac:	2201      	movs	r2, #1
    b3ae:	0021      	movs	r1, r4
    b3b0:	4805      	ldr	r0, [pc, #20]	; (b3c8 <usart_read_callback+0x30>)
    b3b2:	4b06      	ldr	r3, [pc, #24]	; (b3cc <usart_read_callback+0x34>)
    b3b4:	4798      	blx	r3
}
    b3b6:	bd10      	pop	{r4, pc}
    b3b8:	20000f30 	.word	0x20000f30
    b3bc:	0000b325 	.word	0x0000b325
    b3c0:	20000f2c 	.word	0x20000f2c
    b3c4:	0000b169 	.word	0x0000b169
    b3c8:	20000ef8 	.word	0x20000ef8
    b3cc:	00010c01 	.word	0x00010c01

0000b3d0 <GetUsartModule>:


struct usart_module* GetUsartModule(void)
{
	return &usart_instance;
    b3d0:	4800      	ldr	r0, [pc, #0]	; (b3d4 <GetUsartModule+0x4>)
    b3d2:	4770      	bx	lr
    b3d4:	20000ef8 	.word	0x20000ef8

0000b3d8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b3d8:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b3da:	4b06      	ldr	r3, [pc, #24]	; (b3f4 <sd_mmc_configure_slot+0x1c>)
    b3dc:	6819      	ldr	r1, [r3, #0]
    b3de:	7f8b      	ldrb	r3, [r1, #30]
    b3e0:	1e5a      	subs	r2, r3, #1
    b3e2:	4193      	sbcs	r3, r2
    b3e4:	b2db      	uxtb	r3, r3
    b3e6:	7b4a      	ldrb	r2, [r1, #13]
    b3e8:	6809      	ldr	r1, [r1, #0]
    b3ea:	4803      	ldr	r0, [pc, #12]	; (b3f8 <sd_mmc_configure_slot+0x20>)
    b3ec:	7800      	ldrb	r0, [r0, #0]
    b3ee:	4c03      	ldr	r4, [pc, #12]	; (b3fc <sd_mmc_configure_slot+0x24>)
    b3f0:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    b3f2:	bd10      	pop	{r4, pc}
    b3f4:	2000033c 	.word	0x2000033c
    b3f8:	20000364 	.word	0x20000364
    b3fc:	0000c081 	.word	0x0000c081

0000b400 <sd_mmc_select_slot>:
{
    b400:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    b402:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    b404:	2800      	cmp	r0, #0
    b406:	d001      	beq.n	b40c <sd_mmc_select_slot+0xc>
}
    b408:	0018      	movs	r0, r3
    b40a:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b40c:	4b0e      	ldr	r3, [pc, #56]	; (b448 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b40e:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b410:	3b03      	subs	r3, #3
    b412:	2b01      	cmp	r3, #1
    b414:	d90d      	bls.n	b432 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    b416:	2200      	movs	r2, #0
    b418:	4b0c      	ldr	r3, [pc, #48]	; (b44c <sd_mmc_select_slot+0x4c>)
    b41a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b41c:	4c0a      	ldr	r4, [pc, #40]	; (b448 <sd_mmc_select_slot+0x48>)
    b41e:	4b0c      	ldr	r3, [pc, #48]	; (b450 <sd_mmc_select_slot+0x50>)
    b420:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    b422:	4b0c      	ldr	r3, [pc, #48]	; (b454 <sd_mmc_select_slot+0x54>)
    b424:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b426:	7aa3      	ldrb	r3, [r4, #10]
    b428:	3b02      	subs	r3, #2
    b42a:	4258      	negs	r0, r3
    b42c:	4143      	adcs	r3, r0
    b42e:	b2db      	uxtb	r3, r3
    b430:	e7ea      	b.n	b408 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b432:	4b05      	ldr	r3, [pc, #20]	; (b448 <sd_mmc_select_slot+0x48>)
    b434:	2202      	movs	r2, #2
    b436:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b438:	4a07      	ldr	r2, [pc, #28]	; (b458 <sd_mmc_select_slot+0x58>)
    b43a:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    b43c:	2201      	movs	r2, #1
    b43e:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    b440:	2200      	movs	r2, #0
    b442:	779a      	strb	r2, [r3, #30]
    b444:	e7e7      	b.n	b416 <sd_mmc_select_slot+0x16>
    b446:	46c0      	nop			; (mov r8, r8)
    b448:	20000340 	.word	0x20000340
    b44c:	20000364 	.word	0x20000364
    b450:	2000033c 	.word	0x2000033c
    b454:	0000b3d9 	.word	0x0000b3d9
    b458:	00061a80 	.word	0x00061a80

0000b45c <sd_mmc_cmd13>:
{
    b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b45e:	4d09      	ldr	r5, [pc, #36]	; (b484 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b460:	4f09      	ldr	r7, [pc, #36]	; (b488 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    b462:	4e0a      	ldr	r6, [pc, #40]	; (b48c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b464:	2100      	movs	r1, #0
    b466:	480a      	ldr	r0, [pc, #40]	; (b490 <sd_mmc_cmd13+0x34>)
    b468:	47b8      	blx	r7
    b46a:	1e04      	subs	r4, r0, #0
    b46c:	d007      	beq.n	b47e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    b46e:	47b0      	blx	r6
    b470:	23ff      	movs	r3, #255	; 0xff
    b472:	4203      	tst	r3, r0
    b474:	d003      	beq.n	b47e <sd_mmc_cmd13+0x22>
    b476:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    b478:	2d00      	cmp	r5, #0
    b47a:	d1f3      	bne.n	b464 <sd_mmc_cmd13+0x8>
			return false;
    b47c:	2400      	movs	r4, #0
}
    b47e:	0020      	movs	r0, r4
    b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b482:	46c0      	nop			; (mov r8, r8)
    b484:	00030d41 	.word	0x00030d41
    b488:	0000c2c5 	.word	0x0000c2c5
    b48c:	0000c2dd 	.word	0x0000c2dd
    b490:	00001b0d 	.word	0x00001b0d

0000b494 <sd_mmc_cmd9_spi>:
{
    b494:	b510      	push	{r4, lr}
    b496:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b498:	4b0c      	ldr	r3, [pc, #48]	; (b4cc <sd_mmc_cmd9_spi+0x38>)
    b49a:	681b      	ldr	r3, [r3, #0]
    b49c:	8919      	ldrh	r1, [r3, #8]
    b49e:	0409      	lsls	r1, r1, #16
    b4a0:	2301      	movs	r3, #1
    b4a2:	9300      	str	r3, [sp, #0]
    b4a4:	2210      	movs	r2, #16
    b4a6:	480a      	ldr	r0, [pc, #40]	; (b4d0 <sd_mmc_cmd9_spi+0x3c>)
    b4a8:	4c0a      	ldr	r4, [pc, #40]	; (b4d4 <sd_mmc_cmd9_spi+0x40>)
    b4aa:	47a0      	blx	r4
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d101      	bne.n	b4b4 <sd_mmc_cmd9_spi+0x20>
}
    b4b0:	b002      	add	sp, #8
    b4b2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b4b4:	4b05      	ldr	r3, [pc, #20]	; (b4cc <sd_mmc_cmd9_spi+0x38>)
    b4b6:	6818      	ldr	r0, [r3, #0]
    b4b8:	300e      	adds	r0, #14
    b4ba:	2101      	movs	r1, #1
    b4bc:	4b06      	ldr	r3, [pc, #24]	; (b4d8 <sd_mmc_cmd9_spi+0x44>)
    b4be:	4798      	blx	r3
    b4c0:	2800      	cmp	r0, #0
    b4c2:	d0f5      	beq.n	b4b0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    b4c4:	4b05      	ldr	r3, [pc, #20]	; (b4dc <sd_mmc_cmd9_spi+0x48>)
    b4c6:	4798      	blx	r3
    b4c8:	e7f2      	b.n	b4b0 <sd_mmc_cmd9_spi+0x1c>
    b4ca:	46c0      	nop			; (mov r8, r8)
    b4cc:	2000033c 	.word	0x2000033c
    b4d0:	00081109 	.word	0x00081109
    b4d4:	0000c135 	.word	0x0000c135
    b4d8:	0000c361 	.word	0x0000c361
    b4dc:	0000c3ed 	.word	0x0000c3ed

0000b4e0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    b4e0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    b4e2:	4b04      	ldr	r3, [pc, #16]	; (b4f4 <sd_mmc_deselect_slot+0x14>)
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	2b00      	cmp	r3, #0
    b4e8:	d000      	beq.n	b4ec <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    b4ea:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    b4ec:	2000      	movs	r0, #0
    b4ee:	4b02      	ldr	r3, [pc, #8]	; (b4f8 <sd_mmc_deselect_slot+0x18>)
    b4f0:	4798      	blx	r3
}
    b4f2:	e7fa      	b.n	b4ea <sd_mmc_deselect_slot+0xa>
    b4f4:	20000364 	.word	0x20000364
    b4f8:	0000c0d5 	.word	0x0000c0d5

0000b4fc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    b4fc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    b4fe:	2204      	movs	r2, #4
    b500:	4b03      	ldr	r3, [pc, #12]	; (b510 <sd_mmc_init+0x14>)
    b502:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    b504:	32fb      	adds	r2, #251	; 0xfb
    b506:	4b03      	ldr	r3, [pc, #12]	; (b514 <sd_mmc_init+0x18>)
    b508:	701a      	strb	r2, [r3, #0]
	driver_init();
    b50a:	4b03      	ldr	r3, [pc, #12]	; (b518 <sd_mmc_init+0x1c>)
    b50c:	4798      	blx	r3
}
    b50e:	bd10      	pop	{r4, pc}
    b510:	20000340 	.word	0x20000340
    b514:	20000364 	.word	0x20000364
    b518:	0000bf81 	.word	0x0000bf81

0000b51c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b51e:	46c6      	mov	lr, r8
    b520:	b500      	push	{lr}
    b522:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    b524:	4bcb      	ldr	r3, [pc, #812]	; (b854 <sd_mmc_check+0x338>)
    b526:	4798      	blx	r3
    b528:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    b52a:	2801      	cmp	r0, #1
    b52c:	d006      	beq.n	b53c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    b52e:	4bca      	ldr	r3, [pc, #808]	; (b858 <sd_mmc_check+0x33c>)
    b530:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    b532:	0020      	movs	r0, r4
    b534:	b008      	add	sp, #32
    b536:	bc04      	pop	{r2}
    b538:	4690      	mov	r8, r2
    b53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    b53c:	4bc7      	ldr	r3, [pc, #796]	; (b85c <sd_mmc_check+0x340>)
    b53e:	681b      	ldr	r3, [r3, #0]
    b540:	2201      	movs	r2, #1
    b542:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b544:	2200      	movs	r2, #0
    b546:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b548:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    b54a:	4bc5      	ldr	r3, [pc, #788]	; (b860 <sd_mmc_check+0x344>)
    b54c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b54e:	2100      	movs	r1, #0
    b550:	2088      	movs	r0, #136	; 0x88
    b552:	0140      	lsls	r0, r0, #5
    b554:	4bc3      	ldr	r3, [pc, #780]	; (b864 <sd_mmc_check+0x348>)
    b556:	4798      	blx	r3
    b558:	2800      	cmp	r0, #0
    b55a:	d107      	bne.n	b56c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    b55c:	4bbf      	ldr	r3, [pc, #764]	; (b85c <sd_mmc_check+0x340>)
    b55e:	681b      	ldr	r3, [r3, #0]
    b560:	2203      	movs	r2, #3
    b562:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    b564:	4bbc      	ldr	r3, [pc, #752]	; (b858 <sd_mmc_check+0x33c>)
    b566:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    b568:	2403      	movs	r4, #3
    b56a:	e7e2      	b.n	b532 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b56c:	21d5      	movs	r1, #213	; 0xd5
    b56e:	0049      	lsls	r1, r1, #1
    b570:	48bd      	ldr	r0, [pc, #756]	; (b868 <sd_mmc_check+0x34c>)
    b572:	4bbc      	ldr	r3, [pc, #752]	; (b864 <sd_mmc_check+0x348>)
    b574:	4798      	blx	r3
	*v2 = 0;
    b576:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b578:	2800      	cmp	r0, #0
    b57a:	d125      	bne.n	b5c8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b57c:	4bb7      	ldr	r3, [pc, #732]	; (b85c <sd_mmc_check+0x340>)
    b57e:	681b      	ldr	r3, [r3, #0]
    b580:	7adb      	ldrb	r3, [r3, #11]
    b582:	07db      	lsls	r3, r3, #31
    b584:	d500      	bpl.n	b588 <sd_mmc_check+0x6c>
    b586:	e1eb      	b.n	b960 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b588:	4bb4      	ldr	r3, [pc, #720]	; (b85c <sd_mmc_check+0x340>)
    b58a:	681b      	ldr	r3, [r3, #0]
    b58c:	7ada      	ldrb	r2, [r3, #11]
    b58e:	2309      	movs	r3, #9
    b590:	4013      	ands	r3, r2
    b592:	2b01      	cmp	r3, #1
    b594:	d10f      	bne.n	b5b6 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b596:	2180      	movs	r1, #128	; 0x80
    b598:	0089      	lsls	r1, r1, #2
    b59a:	48b4      	ldr	r0, [pc, #720]	; (b86c <sd_mmc_check+0x350>)
    b59c:	4bb1      	ldr	r3, [pc, #708]	; (b864 <sd_mmc_check+0x348>)
    b59e:	4798      	blx	r3
    b5a0:	2800      	cmp	r0, #0
    b5a2:	d0db      	beq.n	b55c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b5a4:	4bad      	ldr	r3, [pc, #692]	; (b85c <sd_mmc_check+0x340>)
    b5a6:	681b      	ldr	r3, [r3, #0]
    b5a8:	7adb      	ldrb	r3, [r3, #11]
    b5aa:	07db      	lsls	r3, r3, #31
    b5ac:	d503      	bpl.n	b5b6 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    b5ae:	4bb0      	ldr	r3, [pc, #704]	; (b870 <sd_mmc_check+0x354>)
    b5b0:	4798      	blx	r3
    b5b2:	2800      	cmp	r0, #0
    b5b4:	d0d2      	beq.n	b55c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b5b6:	4baf      	ldr	r3, [pc, #700]	; (b874 <sd_mmc_check+0x358>)
    b5b8:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    b5ba:	4ba8      	ldr	r3, [pc, #672]	; (b85c <sd_mmc_check+0x340>)
    b5bc:	681b      	ldr	r3, [r3, #0]
    b5be:	2200      	movs	r2, #0
    b5c0:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    b5c2:	4ba5      	ldr	r3, [pc, #660]	; (b858 <sd_mmc_check+0x33c>)
    b5c4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    b5c6:	e7b4      	b.n	b532 <sd_mmc_check+0x16>
	resp = driver_get_response();
    b5c8:	4bab      	ldr	r3, [pc, #684]	; (b878 <sd_mmc_check+0x35c>)
    b5ca:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    b5cc:	1c43      	adds	r3, r0, #1
    b5ce:	d100      	bne.n	b5d2 <sd_mmc_check+0xb6>
    b5d0:	e1c4      	b.n	b95c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b5d2:	0500      	lsls	r0, r0, #20
    b5d4:	0d00      	lsrs	r0, r0, #20
    b5d6:	23d5      	movs	r3, #213	; 0xd5
    b5d8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    b5da:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b5dc:	4298      	cmp	r0, r3
    b5de:	d1bd      	bne.n	b55c <sd_mmc_check+0x40>
    b5e0:	e7cc      	b.n	b57c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b5e2:	2100      	movs	r1, #0
    b5e4:	48a5      	ldr	r0, [pc, #660]	; (b87c <sd_mmc_check+0x360>)
    b5e6:	4b9f      	ldr	r3, [pc, #636]	; (b864 <sd_mmc_check+0x348>)
    b5e8:	4798      	blx	r3
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d119      	bne.n	b622 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    b5ee:	4b9b      	ldr	r3, [pc, #620]	; (b85c <sd_mmc_check+0x340>)
    b5f0:	681b      	ldr	r3, [r3, #0]
    b5f2:	2202      	movs	r2, #2
    b5f4:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b5f6:	2100      	movs	r1, #0
    b5f8:	2088      	movs	r0, #136	; 0x88
    b5fa:	0140      	lsls	r0, r0, #5
    b5fc:	4b99      	ldr	r3, [pc, #612]	; (b864 <sd_mmc_check+0x348>)
    b5fe:	4798      	blx	r3
    b600:	2800      	cmp	r0, #0
    b602:	d0ab      	beq.n	b55c <sd_mmc_check+0x40>
    b604:	4d9e      	ldr	r5, [pc, #632]	; (b880 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b606:	4f97      	ldr	r7, [pc, #604]	; (b864 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    b608:	4e9b      	ldr	r6, [pc, #620]	; (b878 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b60a:	2100      	movs	r1, #0
    b60c:	489d      	ldr	r0, [pc, #628]	; (b884 <sd_mmc_check+0x368>)
    b60e:	47b8      	blx	r7
    b610:	2800      	cmp	r0, #0
    b612:	d0a3      	beq.n	b55c <sd_mmc_check+0x40>
		resp = driver_get_response();
    b614:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    b616:	07c3      	lsls	r3, r0, #31
    b618:	d57d      	bpl.n	b716 <sd_mmc_check+0x1fa>
    b61a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    b61c:	2d00      	cmp	r5, #0
    b61e:	d1f4      	bne.n	b60a <sd_mmc_check+0xee>
    b620:	e79c      	b.n	b55c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    b622:	4b95      	ldr	r3, [pc, #596]	; (b878 <sd_mmc_check+0x35c>)
    b624:	4798      	blx	r3
    b626:	0043      	lsls	r3, r0, #1
    b628:	d505      	bpl.n	b636 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b62a:	4b8c      	ldr	r3, [pc, #560]	; (b85c <sd_mmc_check+0x340>)
    b62c:	681a      	ldr	r2, [r3, #0]
    b62e:	7ad3      	ldrb	r3, [r2, #11]
    b630:	2108      	movs	r1, #8
    b632:	430b      	orrs	r3, r1
    b634:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b636:	2100      	movs	r1, #0
    b638:	4893      	ldr	r0, [pc, #588]	; (b888 <sd_mmc_check+0x36c>)
    b63a:	4b8a      	ldr	r3, [pc, #552]	; (b864 <sd_mmc_check+0x348>)
    b63c:	4798      	blx	r3
    b63e:	2800      	cmp	r0, #0
    b640:	d08c      	beq.n	b55c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b642:	4b86      	ldr	r3, [pc, #536]	; (b85c <sd_mmc_check+0x340>)
    b644:	681b      	ldr	r3, [r3, #0]
    b646:	7adb      	ldrb	r3, [r3, #11]
    b648:	07da      	lsls	r2, r3, #31
    b64a:	d400      	bmi.n	b64e <sd_mmc_check+0x132>
    b64c:	e1a4      	b.n	b998 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    b64e:	4b8f      	ldr	r3, [pc, #572]	; (b88c <sd_mmc_check+0x370>)
    b650:	4798      	blx	r3
    b652:	2800      	cmp	r0, #0
    b654:	d082      	beq.n	b55c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b656:	4b81      	ldr	r3, [pc, #516]	; (b85c <sd_mmc_check+0x340>)
    b658:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b65a:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b65c:	2107      	movs	r1, #7
    b65e:	4019      	ands	r1, r3
    b660:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b662:	488b      	ldr	r0, [pc, #556]	; (b890 <sd_mmc_check+0x374>)
    b664:	5808      	ldr	r0, [r1, r0]
    b666:	21fa      	movs	r1, #250	; 0xfa
    b668:	0089      	lsls	r1, r1, #2
    b66a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    b66c:	065b      	lsls	r3, r3, #25
    b66e:	0f1b      	lsrs	r3, r3, #28
    b670:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b672:	4888      	ldr	r0, [pc, #544]	; (b894 <sd_mmc_check+0x378>)
    b674:	581b      	ldr	r3, [r3, r0]
    b676:	434b      	muls	r3, r1
    b678:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    b67a:	7b93      	ldrb	r3, [r2, #14]
    b67c:	099b      	lsrs	r3, r3, #6
    b67e:	d000      	beq.n	b682 <sd_mmc_check+0x166>
    b680:	e13c      	b.n	b8fc <sd_mmc_check+0x3e0>
    b682:	7d91      	ldrb	r1, [r2, #22]
    b684:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b686:	7d53      	ldrb	r3, [r2, #21]
    b688:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b68a:	7d10      	ldrb	r0, [r2, #20]
    b68c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b68e:	4303      	orrs	r3, r0
    b690:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b692:	7e10      	ldrb	r0, [r2, #24]
    b694:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b696:	7dd1      	ldrb	r1, [r2, #23]
    b698:	0049      	lsls	r1, r1, #1
    b69a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    b69c:	051b      	lsls	r3, r3, #20
    b69e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b6a0:	3301      	adds	r3, #1
    b6a2:	2107      	movs	r1, #7
    b6a4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b6a6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b6a8:	408b      	lsls	r3, r1
    b6aa:	7cd0      	ldrb	r0, [r2, #19]
    b6ac:	210f      	movs	r1, #15
    b6ae:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b6b0:	408b      	lsls	r3, r1
				/ 1024;
    b6b2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b6b4:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    b6b6:	8911      	ldrh	r1, [r2, #8]
    b6b8:	0409      	lsls	r1, r1, #16
    b6ba:	4877      	ldr	r0, [pc, #476]	; (b898 <sd_mmc_check+0x37c>)
    b6bc:	4b69      	ldr	r3, [pc, #420]	; (b864 <sd_mmc_check+0x348>)
    b6be:	4798      	blx	r3
    b6c0:	2800      	cmp	r0, #0
    b6c2:	d100      	bne.n	b6c6 <sd_mmc_check+0x1aa>
    b6c4:	e74a      	b.n	b55c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    b6c6:	2301      	movs	r3, #1
    b6c8:	9300      	str	r3, [sp, #0]
    b6ca:	2208      	movs	r2, #8
    b6cc:	2100      	movs	r1, #0
    b6ce:	4873      	ldr	r0, [pc, #460]	; (b89c <sd_mmc_check+0x380>)
    b6d0:	4d73      	ldr	r5, [pc, #460]	; (b8a0 <sd_mmc_check+0x384>)
    b6d2:	47a8      	blx	r5
    b6d4:	2800      	cmp	r0, #0
    b6d6:	d100      	bne.n	b6da <sd_mmc_check+0x1be>
    b6d8:	e740      	b.n	b55c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    b6da:	2101      	movs	r1, #1
    b6dc:	a806      	add	r0, sp, #24
    b6de:	4b71      	ldr	r3, [pc, #452]	; (b8a4 <sd_mmc_check+0x388>)
    b6e0:	4798      	blx	r3
    b6e2:	2800      	cmp	r0, #0
    b6e4:	d100      	bne.n	b6e8 <sd_mmc_check+0x1cc>
    b6e6:	e739      	b.n	b55c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    b6e8:	4b6f      	ldr	r3, [pc, #444]	; (b8a8 <sd_mmc_check+0x38c>)
    b6ea:	4798      	blx	r3
    b6ec:	2800      	cmp	r0, #0
    b6ee:	d100      	bne.n	b6f2 <sd_mmc_check+0x1d6>
    b6f0:	e734      	b.n	b55c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b6f2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    b6f4:	781b      	ldrb	r3, [r3, #0]
    b6f6:	220f      	movs	r2, #15
    b6f8:	4013      	ands	r3, r2
    b6fa:	2b01      	cmp	r3, #1
    b6fc:	d100      	bne.n	b700 <sd_mmc_check+0x1e4>
    b6fe:	e119      	b.n	b934 <sd_mmc_check+0x418>
    b700:	2b00      	cmp	r3, #0
    b702:	d100      	bne.n	b706 <sd_mmc_check+0x1ea>
    b704:	e109      	b.n	b91a <sd_mmc_check+0x3fe>
    b706:	2b02      	cmp	r3, #2
    b708:	d100      	bne.n	b70c <sd_mmc_check+0x1f0>
    b70a:	e118      	b.n	b93e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b70c:	4b53      	ldr	r3, [pc, #332]	; (b85c <sd_mmc_check+0x340>)
    b70e:	681b      	ldr	r3, [r3, #0]
    b710:	2210      	movs	r2, #16
    b712:	731a      	strb	r2, [r3, #12]
    b714:	e105      	b.n	b922 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b716:	2100      	movs	r1, #0
    b718:	4858      	ldr	r0, [pc, #352]	; (b87c <sd_mmc_check+0x360>)
    b71a:	4b52      	ldr	r3, [pc, #328]	; (b864 <sd_mmc_check+0x348>)
    b71c:	4798      	blx	r3
    b71e:	2800      	cmp	r0, #0
    b720:	d100      	bne.n	b724 <sd_mmc_check+0x208>
    b722:	e71b      	b.n	b55c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    b724:	4b54      	ldr	r3, [pc, #336]	; (b878 <sd_mmc_check+0x35c>)
    b726:	4798      	blx	r3
    b728:	23c0      	movs	r3, #192	; 0xc0
    b72a:	05db      	lsls	r3, r3, #23
    b72c:	4018      	ands	r0, r3
    b72e:	2380      	movs	r3, #128	; 0x80
    b730:	05db      	lsls	r3, r3, #23
    b732:	4298      	cmp	r0, r3
    b734:	d105      	bne.n	b742 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b736:	4b49      	ldr	r3, [pc, #292]	; (b85c <sd_mmc_check+0x340>)
    b738:	681a      	ldr	r2, [r3, #0]
    b73a:	7ad1      	ldrb	r1, [r2, #11]
    b73c:	2308      	movs	r3, #8
    b73e:	430b      	orrs	r3, r1
    b740:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b742:	2100      	movs	r1, #0
    b744:	4850      	ldr	r0, [pc, #320]	; (b888 <sd_mmc_check+0x36c>)
    b746:	4b47      	ldr	r3, [pc, #284]	; (b864 <sd_mmc_check+0x348>)
    b748:	4798      	blx	r3
    b74a:	2800      	cmp	r0, #0
    b74c:	d100      	bne.n	b750 <sd_mmc_check+0x234>
    b74e:	e705      	b.n	b55c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    b750:	4b4e      	ldr	r3, [pc, #312]	; (b88c <sd_mmc_check+0x370>)
    b752:	4798      	blx	r3
    b754:	2800      	cmp	r0, #0
    b756:	d100      	bne.n	b75a <sd_mmc_check+0x23e>
    b758:	e700      	b.n	b55c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b75a:	4b40      	ldr	r3, [pc, #256]	; (b85c <sd_mmc_check+0x340>)
    b75c:	681a      	ldr	r2, [r3, #0]
    b75e:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    b760:	069b      	lsls	r3, r3, #26
    b762:	0f1b      	lsrs	r3, r3, #28
    b764:	2b02      	cmp	r3, #2
    b766:	d100      	bne.n	b76a <sd_mmc_check+0x24e>
    b768:	e0a8      	b.n	b8bc <sd_mmc_check+0x3a0>
    b76a:	d907      	bls.n	b77c <sd_mmc_check+0x260>
    b76c:	2b03      	cmp	r3, #3
    b76e:	d100      	bne.n	b772 <sd_mmc_check+0x256>
    b770:	e0a7      	b.n	b8c2 <sd_mmc_check+0x3a6>
    b772:	2b04      	cmp	r3, #4
    b774:	d104      	bne.n	b780 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    b776:	2340      	movs	r3, #64	; 0x40
    b778:	7313      	strb	r3, [r2, #12]
    b77a:	e003      	b.n	b784 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b77c:	2b01      	cmp	r3, #1
    b77e:	d066      	beq.n	b84e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    b780:	2312      	movs	r3, #18
    b782:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b784:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    b786:	0659      	lsls	r1, r3, #25
    b788:	0f09      	lsrs	r1, r1, #28
    b78a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b78c:	2007      	movs	r0, #7
    b78e:	4003      	ands	r3, r0
    b790:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    b792:	483f      	ldr	r0, [pc, #252]	; (b890 <sd_mmc_check+0x374>)
    b794:	5818      	ldr	r0, [r3, r0]
    b796:	23fa      	movs	r3, #250	; 0xfa
    b798:	009b      	lsls	r3, r3, #2
    b79a:	4343      	muls	r3, r0
    b79c:	4843      	ldr	r0, [pc, #268]	; (b8ac <sd_mmc_check+0x390>)
    b79e:	5809      	ldr	r1, [r1, r0]
    b7a0:	434b      	muls	r3, r1
    b7a2:	6013      	str	r3, [r2, #0]
    b7a4:	7d91      	ldrb	r1, [r2, #22]
    b7a6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b7a8:	7d53      	ldrb	r3, [r2, #21]
    b7aa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b7ac:	7d10      	ldrb	r0, [r2, #20]
    b7ae:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b7b0:	4303      	orrs	r3, r0
    b7b2:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    b7b4:	051b      	lsls	r3, r3, #20
    b7b6:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    b7b8:	493d      	ldr	r1, [pc, #244]	; (b8b0 <sd_mmc_check+0x394>)
    b7ba:	428b      	cmp	r3, r1
    b7bc:	d00f      	beq.n	b7de <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b7be:	7e10      	ldrb	r0, [r2, #24]
    b7c0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b7c2:	7dd1      	ldrb	r1, [r2, #23]
    b7c4:	0049      	lsls	r1, r1, #1
    b7c6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b7c8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    b7ca:	2007      	movs	r0, #7
    b7cc:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b7ce:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b7d0:	408b      	lsls	r3, r1
    b7d2:	7cd1      	ldrb	r1, [r2, #19]
    b7d4:	3008      	adds	r0, #8
    b7d6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    b7d8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    b7da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b7dc:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    b7de:	7b13      	ldrb	r3, [r2, #12]
    b7e0:	2b3f      	cmp	r3, #63	; 0x3f
    b7e2:	d97b      	bls.n	b8dc <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    b7e4:	2100      	movs	r1, #0
    b7e6:	9100      	str	r1, [sp, #0]
    b7e8:	2301      	movs	r3, #1
    b7ea:	2280      	movs	r2, #128	; 0x80
    b7ec:	0092      	lsls	r2, r2, #2
    b7ee:	4831      	ldr	r0, [pc, #196]	; (b8b4 <sd_mmc_check+0x398>)
    b7f0:	4d2b      	ldr	r5, [pc, #172]	; (b8a0 <sd_mmc_check+0x384>)
    b7f2:	47a8      	blx	r5
    b7f4:	2800      	cmp	r0, #0
    b7f6:	d100      	bne.n	b7fa <sd_mmc_check+0x2de>
    b7f8:	e6b0      	b.n	b55c <sd_mmc_check+0x40>
    b7fa:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    b7fc:	4e2e      	ldr	r6, [pc, #184]	; (b8b8 <sd_mmc_check+0x39c>)
    b7fe:	a805      	add	r0, sp, #20
    b800:	47b0      	blx	r6
    b802:	2800      	cmp	r0, #0
    b804:	d100      	bne.n	b808 <sd_mmc_check+0x2ec>
    b806:	e6a9      	b.n	b55c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    b808:	3501      	adds	r5, #1
    b80a:	b2ad      	uxth	r5, r5
    b80c:	2d32      	cmp	r5, #50	; 0x32
    b80e:	d1f6      	bne.n	b7fe <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    b810:	4b12      	ldr	r3, [pc, #72]	; (b85c <sd_mmc_check+0x340>)
    b812:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b814:	7d8a      	ldrb	r2, [r1, #22]
    b816:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b818:	7d4b      	ldrb	r3, [r1, #21]
    b81a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b81c:	7d09      	ldrb	r1, [r1, #20]
    b81e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b820:	430b      	orrs	r3, r1
    b822:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    b824:	051b      	lsls	r3, r3, #20
    b826:	0d1b      	lsrs	r3, r3, #20
    b828:	4a21      	ldr	r2, [pc, #132]	; (b8b0 <sd_mmc_check+0x394>)
    b82a:	4293      	cmp	r3, r2
    b82c:	d154      	bne.n	b8d8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    b82e:	4e22      	ldr	r6, [pc, #136]	; (b8b8 <sd_mmc_check+0x39c>)
    b830:	a806      	add	r0, sp, #24
    b832:	47b0      	blx	r6
    b834:	2800      	cmp	r0, #0
    b836:	d100      	bne.n	b83a <sd_mmc_check+0x31e>
    b838:	e690      	b.n	b55c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    b83a:	3501      	adds	r5, #1
    b83c:	b2ad      	uxth	r5, r5
    b83e:	2d35      	cmp	r5, #53	; 0x35
    b840:	d9f6      	bls.n	b830 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    b842:	4b06      	ldr	r3, [pc, #24]	; (b85c <sd_mmc_check+0x340>)
    b844:	681a      	ldr	r2, [r3, #0]
    b846:	9b06      	ldr	r3, [sp, #24]
    b848:	085b      	lsrs	r3, r3, #1
    b84a:	6053      	str	r3, [r2, #4]
    b84c:	e044      	b.n	b8d8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    b84e:	2314      	movs	r3, #20
    b850:	7313      	strb	r3, [r2, #12]
    b852:	e797      	b.n	b784 <sd_mmc_check+0x268>
    b854:	0000b401 	.word	0x0000b401
    b858:	0000b4e1 	.word	0x0000b4e1
    b85c:	2000033c 	.word	0x2000033c
    b860:	0000c0fd 	.word	0x0000c0fd
    b864:	0000c2c5 	.word	0x0000c2c5
    b868:	00005508 	.word	0x00005508
    b86c:	00001110 	.word	0x00001110
    b870:	0000b45d 	.word	0x0000b45d
    b874:	0000b3d9 	.word	0x0000b3d9
    b878:	0000c2dd 	.word	0x0000c2dd
    b87c:	0000053a 	.word	0x0000053a
    b880:	00001bef 	.word	0x00001bef
    b884:	00001101 	.word	0x00001101
    b888:	0000113b 	.word	0x0000113b
    b88c:	0000b495 	.word	0x0000b495
    b890:	0001873c 	.word	0x0001873c
    b894:	00018758 	.word	0x00018758
    b898:	00001137 	.word	0x00001137
    b89c:	00081133 	.word	0x00081133
    b8a0:	0000c135 	.word	0x0000c135
    b8a4:	0000c361 	.word	0x0000c361
    b8a8:	0000c3ed 	.word	0x0000c3ed
    b8ac:	000186fc 	.word	0x000186fc
    b8b0:	00000fff 	.word	0x00000fff
    b8b4:	00081108 	.word	0x00081108
    b8b8:	0000c2e9 	.word	0x0000c2e9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    b8bc:	2322      	movs	r3, #34	; 0x22
    b8be:	7313      	strb	r3, [r2, #12]
    b8c0:	e760      	b.n	b784 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    b8c2:	2330      	movs	r3, #48	; 0x30
    b8c4:	7313      	strb	r3, [r2, #12]
    b8c6:	e75d      	b.n	b784 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    b8c8:	a806      	add	r0, sp, #24
    b8ca:	4b36      	ldr	r3, [pc, #216]	; (b9a4 <sd_mmc_check+0x488>)
    b8cc:	4798      	blx	r3
    b8ce:	2800      	cmp	r0, #0
    b8d0:	d100      	bne.n	b8d4 <sd_mmc_check+0x3b8>
    b8d2:	e643      	b.n	b55c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    b8d4:	3501      	adds	r5, #1
    b8d6:	b2ad      	uxth	r5, r5
    b8d8:	2d7f      	cmp	r5, #127	; 0x7f
    b8da:	d9f5      	bls.n	b8c8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    b8dc:	2180      	movs	r1, #128	; 0x80
    b8de:	0089      	lsls	r1, r1, #2
    b8e0:	4831      	ldr	r0, [pc, #196]	; (b9a8 <sd_mmc_check+0x48c>)
    b8e2:	4b32      	ldr	r3, [pc, #200]	; (b9ac <sd_mmc_check+0x490>)
    b8e4:	4798      	blx	r3
    b8e6:	2800      	cmp	r0, #0
    b8e8:	d100      	bne.n	b8ec <sd_mmc_check+0x3d0>
    b8ea:	e637      	b.n	b55c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    b8ec:	4b30      	ldr	r3, [pc, #192]	; (b9b0 <sd_mmc_check+0x494>)
    b8ee:	4798      	blx	r3
    b8f0:	2800      	cmp	r0, #0
    b8f2:	d100      	bne.n	b8f6 <sd_mmc_check+0x3da>
    b8f4:	e632      	b.n	b55c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    b8f6:	4b2f      	ldr	r3, [pc, #188]	; (b9b4 <sd_mmc_check+0x498>)
    b8f8:	4798      	blx	r3
    b8fa:	e65e      	b.n	b5ba <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b8fc:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    b8fe:	7d93      	ldrb	r3, [r2, #22]
    b900:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b902:	7d51      	ldrb	r1, [r2, #21]
    b904:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b906:	430b      	orrs	r3, r1
    b908:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    b90a:	029b      	lsls	r3, r3, #10
				* 512;
    b90c:	085b      	lsrs	r3, r3, #1
    b90e:	2180      	movs	r1, #128	; 0x80
    b910:	0089      	lsls	r1, r1, #2
    b912:	468c      	mov	ip, r1
    b914:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    b916:	6053      	str	r3, [r2, #4]
    b918:	e6cd      	b.n	b6b6 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b91a:	4b27      	ldr	r3, [pc, #156]	; (b9b8 <sd_mmc_check+0x49c>)
    b91c:	681b      	ldr	r3, [r3, #0]
    b91e:	2210      	movs	r2, #16
    b920:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b922:	4b25      	ldr	r3, [pc, #148]	; (b9b8 <sd_mmc_check+0x49c>)
    b924:	681b      	ldr	r3, [r3, #0]
    b926:	7adb      	ldrb	r3, [r3, #11]
    b928:	2209      	movs	r2, #9
    b92a:	4013      	ands	r3, r2
    b92c:	2b01      	cmp	r3, #1
    b92e:	d000      	beq.n	b932 <sd_mmc_check+0x416>
    b930:	e638      	b.n	b5a4 <sd_mmc_check+0x88>
    b932:	e630      	b.n	b596 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    b934:	4b20      	ldr	r3, [pc, #128]	; (b9b8 <sd_mmc_check+0x49c>)
    b936:	681b      	ldr	r3, [r3, #0]
    b938:	221a      	movs	r2, #26
    b93a:	731a      	strb	r2, [r3, #12]
    b93c:	e7f1      	b.n	b922 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    b93e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    b940:	789b      	ldrb	r3, [r3, #2]
    b942:	09db      	lsrs	r3, r3, #7
    b944:	2b01      	cmp	r3, #1
    b946:	d104      	bne.n	b952 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    b948:	4b1b      	ldr	r3, [pc, #108]	; (b9b8 <sd_mmc_check+0x49c>)
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	2230      	movs	r2, #48	; 0x30
    b94e:	731a      	strb	r2, [r3, #12]
    b950:	e7e7      	b.n	b922 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    b952:	4b19      	ldr	r3, [pc, #100]	; (b9b8 <sd_mmc_check+0x49c>)
    b954:	681b      	ldr	r3, [r3, #0]
    b956:	2220      	movs	r2, #32
    b958:	731a      	strb	r2, [r3, #12]
    b95a:	e7e2      	b.n	b922 <sd_mmc_check+0x406>
	*v2 = 0;
    b95c:	2600      	movs	r6, #0
    b95e:	e60d      	b.n	b57c <sd_mmc_check+0x60>
    b960:	1e73      	subs	r3, r6, #1
    b962:	419e      	sbcs	r6, r3
    b964:	07b3      	lsls	r3, r6, #30
    b966:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b968:	4d14      	ldr	r5, [pc, #80]	; (b9bc <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    b96a:	4f10      	ldr	r7, [pc, #64]	; (b9ac <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    b96c:	46b8      	mov	r8, r7
		resp = driver_get_response();
    b96e:	4e14      	ldr	r6, [pc, #80]	; (b9c0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    b970:	2100      	movs	r1, #0
    b972:	4814      	ldr	r0, [pc, #80]	; (b9c4 <sd_mmc_check+0x4a8>)
    b974:	47b8      	blx	r7
    b976:	2800      	cmp	r0, #0
    b978:	d100      	bne.n	b97c <sd_mmc_check+0x460>
    b97a:	e638      	b.n	b5ee <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    b97c:	9903      	ldr	r1, [sp, #12]
    b97e:	4812      	ldr	r0, [pc, #72]	; (b9c8 <sd_mmc_check+0x4ac>)
    b980:	47c0      	blx	r8
    b982:	2800      	cmp	r0, #0
    b984:	d100      	bne.n	b988 <sd_mmc_check+0x46c>
    b986:	e632      	b.n	b5ee <sd_mmc_check+0xd2>
		resp = driver_get_response();
    b988:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    b98a:	07c3      	lsls	r3, r0, #31
    b98c:	d400      	bmi.n	b990 <sd_mmc_check+0x474>
    b98e:	e628      	b.n	b5e2 <sd_mmc_check+0xc6>
    b990:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    b992:	2d00      	cmp	r5, #0
    b994:	d1ec      	bne.n	b970 <sd_mmc_check+0x454>
    b996:	e62a      	b.n	b5ee <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b998:	2209      	movs	r2, #9
    b99a:	4013      	ands	r3, r2
    b99c:	2b01      	cmp	r3, #1
    b99e:	d000      	beq.n	b9a2 <sd_mmc_check+0x486>
    b9a0:	e609      	b.n	b5b6 <sd_mmc_check+0x9a>
    b9a2:	e5f8      	b.n	b596 <sd_mmc_check+0x7a>
    b9a4:	0000c2e9 	.word	0x0000c2e9
    b9a8:	00001110 	.word	0x00001110
    b9ac:	0000c2c5 	.word	0x0000c2c5
    b9b0:	0000b45d 	.word	0x0000b45d
    b9b4:	0000b3d9 	.word	0x0000b3d9
    b9b8:	2000033c 	.word	0x2000033c
    b9bc:	00001bef 	.word	0x00001bef
    b9c0:	0000c2dd 	.word	0x0000c2dd
    b9c4:	00001137 	.word	0x00001137
    b9c8:	00001129 	.word	0x00001129

0000b9cc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    b9cc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b9ce:	4b06      	ldr	r3, [pc, #24]	; (b9e8 <sd_mmc_get_type+0x1c>)
    b9d0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    b9d2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b9d4:	2800      	cmp	r0, #0
    b9d6:	d001      	beq.n	b9dc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    b9d8:	0018      	movs	r0, r3
    b9da:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    b9dc:	4b03      	ldr	r3, [pc, #12]	; (b9ec <sd_mmc_get_type+0x20>)
    b9de:	4798      	blx	r3
	return sd_mmc_card->type;
    b9e0:	4b03      	ldr	r3, [pc, #12]	; (b9f0 <sd_mmc_get_type+0x24>)
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	7adb      	ldrb	r3, [r3, #11]
    b9e6:	e7f7      	b.n	b9d8 <sd_mmc_get_type+0xc>
    b9e8:	0000b401 	.word	0x0000b401
    b9ec:	0000b4e1 	.word	0x0000b4e1
    b9f0:	2000033c 	.word	0x2000033c

0000b9f4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    b9f4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b9f6:	4b06      	ldr	r3, [pc, #24]	; (ba10 <sd_mmc_get_capacity+0x1c>)
    b9f8:	4798      	blx	r3
		return 0;
    b9fa:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    b9fc:	2800      	cmp	r0, #0
    b9fe:	d001      	beq.n	ba04 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    ba00:	0018      	movs	r0, r3
    ba02:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    ba04:	4b03      	ldr	r3, [pc, #12]	; (ba14 <sd_mmc_get_capacity+0x20>)
    ba06:	4798      	blx	r3
	return sd_mmc_card->capacity;
    ba08:	4b03      	ldr	r3, [pc, #12]	; (ba18 <sd_mmc_get_capacity+0x24>)
    ba0a:	681b      	ldr	r3, [r3, #0]
    ba0c:	685b      	ldr	r3, [r3, #4]
    ba0e:	e7f7      	b.n	ba00 <sd_mmc_get_capacity+0xc>
    ba10:	0000b401 	.word	0x0000b401
    ba14:	0000b4e1 	.word	0x0000b4e1
    ba18:	2000033c 	.word	0x2000033c

0000ba1c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    ba1c:	2000      	movs	r0, #0
    ba1e:	4770      	bx	lr

0000ba20 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    ba20:	b570      	push	{r4, r5, r6, lr}
    ba22:	b082      	sub	sp, #8
    ba24:	000e      	movs	r6, r1
    ba26:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    ba28:	4b16      	ldr	r3, [pc, #88]	; (ba84 <sd_mmc_init_read_blocks+0x64>)
    ba2a:	4798      	blx	r3
    ba2c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    ba2e:	d002      	beq.n	ba36 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    ba30:	0020      	movs	r0, r4
    ba32:	b002      	add	sp, #8
    ba34:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    ba36:	4b14      	ldr	r3, [pc, #80]	; (ba88 <sd_mmc_init_read_blocks+0x68>)
    ba38:	4798      	blx	r3
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d017      	beq.n	ba6e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    ba3e:	2d01      	cmp	r5, #1
    ba40:	d919      	bls.n	ba76 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    ba42:	4812      	ldr	r0, [pc, #72]	; (ba8c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    ba44:	4b12      	ldr	r3, [pc, #72]	; (ba90 <sd_mmc_init_read_blocks+0x70>)
    ba46:	681b      	ldr	r3, [r3, #0]
    ba48:	7adb      	ldrb	r3, [r3, #11]
    ba4a:	071b      	lsls	r3, r3, #28
    ba4c:	d400      	bmi.n	ba50 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    ba4e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    ba50:	2301      	movs	r3, #1
    ba52:	9300      	str	r3, [sp, #0]
    ba54:	002b      	movs	r3, r5
    ba56:	2280      	movs	r2, #128	; 0x80
    ba58:	0092      	lsls	r2, r2, #2
    ba5a:	0031      	movs	r1, r6
    ba5c:	4e0d      	ldr	r6, [pc, #52]	; (ba94 <sd_mmc_init_read_blocks+0x74>)
    ba5e:	47b0      	blx	r6
    ba60:	2800      	cmp	r0, #0
    ba62:	d00a      	beq.n	ba7a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    ba64:	4b0c      	ldr	r3, [pc, #48]	; (ba98 <sd_mmc_init_read_blocks+0x78>)
    ba66:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    ba68:	4b0c      	ldr	r3, [pc, #48]	; (ba9c <sd_mmc_init_read_blocks+0x7c>)
    ba6a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    ba6c:	e7e0      	b.n	ba30 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    ba6e:	4b0c      	ldr	r3, [pc, #48]	; (baa0 <sd_mmc_init_read_blocks+0x80>)
    ba70:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ba72:	3405      	adds	r4, #5
    ba74:	e7dc      	b.n	ba30 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    ba76:	480b      	ldr	r0, [pc, #44]	; (baa4 <sd_mmc_init_read_blocks+0x84>)
    ba78:	e7e4      	b.n	ba44 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    ba7a:	4b09      	ldr	r3, [pc, #36]	; (baa0 <sd_mmc_init_read_blocks+0x80>)
    ba7c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ba7e:	2405      	movs	r4, #5
    ba80:	e7d6      	b.n	ba30 <sd_mmc_init_read_blocks+0x10>
    ba82:	46c0      	nop			; (mov r8, r8)
    ba84:	0000b401 	.word	0x0000b401
    ba88:	0000b45d 	.word	0x0000b45d
    ba8c:	00101112 	.word	0x00101112
    ba90:	2000033c 	.word	0x2000033c
    ba94:	0000c135 	.word	0x0000c135
    ba98:	20000360 	.word	0x20000360
    ba9c:	20000362 	.word	0x20000362
    baa0:	0000b4e1 	.word	0x0000b4e1
    baa4:	00081111 	.word	0x00081111

0000baa8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    baa8:	b510      	push	{r4, lr}
    baaa:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    baac:	4b07      	ldr	r3, [pc, #28]	; (bacc <sd_mmc_start_read_blocks+0x24>)
    baae:	4798      	blx	r3
    bab0:	2800      	cmp	r0, #0
    bab2:	d104      	bne.n	babe <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bab4:	2200      	movs	r2, #0
    bab6:	4b06      	ldr	r3, [pc, #24]	; (bad0 <sd_mmc_start_read_blocks+0x28>)
    bab8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    baba:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    babc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    babe:	4a04      	ldr	r2, [pc, #16]	; (bad0 <sd_mmc_start_read_blocks+0x28>)
    bac0:	8813      	ldrh	r3, [r2, #0]
    bac2:	1b1c      	subs	r4, r3, r4
    bac4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bac6:	2000      	movs	r0, #0
    bac8:	e7f8      	b.n	babc <sd_mmc_start_read_blocks+0x14>
    baca:	46c0      	nop			; (mov r8, r8)
    bacc:	0000c361 	.word	0x0000c361
    bad0:	20000360 	.word	0x20000360

0000bad4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    bad4:	b510      	push	{r4, lr}
    bad6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    bad8:	4b14      	ldr	r3, [pc, #80]	; (bb2c <sd_mmc_wait_end_of_read_blocks+0x58>)
    bada:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    badc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    bade:	2800      	cmp	r0, #0
    bae0:	d101      	bne.n	bae6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bae2:	0018      	movs	r0, r3
    bae4:	bd10      	pop	{r4, pc}
	if (abort) {
    bae6:	2c00      	cmp	r4, #0
    bae8:	d010      	beq.n	bb0c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    baea:	2200      	movs	r2, #0
    baec:	4b10      	ldr	r3, [pc, #64]	; (bb30 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    baee:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    baf0:	4b10      	ldr	r3, [pc, #64]	; (bb34 <sd_mmc_wait_end_of_read_blocks+0x60>)
    baf2:	881b      	ldrh	r3, [r3, #0]
    baf4:	2b01      	cmp	r3, #1
    baf6:	d00f      	beq.n	bb18 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    baf8:	2100      	movs	r1, #0
    bafa:	480f      	ldr	r0, [pc, #60]	; (bb38 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bafc:	4b0f      	ldr	r3, [pc, #60]	; (bb3c <sd_mmc_wait_end_of_read_blocks+0x68>)
    bafe:	4798      	blx	r3
    bb00:	2800      	cmp	r0, #0
    bb02:	d00d      	beq.n	bb20 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    bb04:	4b0e      	ldr	r3, [pc, #56]	; (bb40 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bb06:	4798      	blx	r3
	return SD_MMC_OK;
    bb08:	2300      	movs	r3, #0
    bb0a:	e7ea      	b.n	bae2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bb0c:	4b08      	ldr	r3, [pc, #32]	; (bb30 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    bb0e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bb10:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bb12:	2a00      	cmp	r2, #0
    bb14:	d0ec      	beq.n	baf0 <sd_mmc_wait_end_of_read_blocks+0x1c>
    bb16:	e7e4      	b.n	bae2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    bb18:	4b09      	ldr	r3, [pc, #36]	; (bb40 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    bb1a:	4798      	blx	r3
		return SD_MMC_OK;
    bb1c:	2300      	movs	r3, #0
    bb1e:	e7e0      	b.n	bae2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    bb20:	2100      	movs	r1, #0
    bb22:	4805      	ldr	r0, [pc, #20]	; (bb38 <sd_mmc_wait_end_of_read_blocks+0x64>)
    bb24:	4b05      	ldr	r3, [pc, #20]	; (bb3c <sd_mmc_wait_end_of_read_blocks+0x68>)
    bb26:	4798      	blx	r3
    bb28:	e7ec      	b.n	bb04 <sd_mmc_wait_end_of_read_blocks+0x30>
    bb2a:	46c0      	nop			; (mov r8, r8)
    bb2c:	0000c3ed 	.word	0x0000c3ed
    bb30:	20000360 	.word	0x20000360
    bb34:	20000362 	.word	0x20000362
    bb38:	0000310c 	.word	0x0000310c
    bb3c:	0000c2c5 	.word	0x0000c2c5
    bb40:	0000b4e1 	.word	0x0000b4e1

0000bb44 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bb44:	b570      	push	{r4, r5, r6, lr}
    bb46:	b082      	sub	sp, #8
    bb48:	000e      	movs	r6, r1
    bb4a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bb4c:	4b11      	ldr	r3, [pc, #68]	; (bb94 <sd_mmc_init_write_blocks+0x50>)
    bb4e:	4798      	blx	r3
    bb50:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    bb52:	d116      	bne.n	bb82 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    bb54:	2d01      	cmp	r5, #1
    bb56:	d917      	bls.n	bb88 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    bb58:	480f      	ldr	r0, [pc, #60]	; (bb98 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bb5a:	4b10      	ldr	r3, [pc, #64]	; (bb9c <sd_mmc_init_write_blocks+0x58>)
    bb5c:	681b      	ldr	r3, [r3, #0]
    bb5e:	7adb      	ldrb	r3, [r3, #11]
    bb60:	071b      	lsls	r3, r3, #28
    bb62:	d400      	bmi.n	bb66 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bb64:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bb66:	2301      	movs	r3, #1
    bb68:	9300      	str	r3, [sp, #0]
    bb6a:	002b      	movs	r3, r5
    bb6c:	2280      	movs	r2, #128	; 0x80
    bb6e:	0092      	lsls	r2, r2, #2
    bb70:	0031      	movs	r1, r6
    bb72:	4e0b      	ldr	r6, [pc, #44]	; (bba0 <sd_mmc_init_write_blocks+0x5c>)
    bb74:	47b0      	blx	r6
    bb76:	2800      	cmp	r0, #0
    bb78:	d008      	beq.n	bb8c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bb7a:	4b0a      	ldr	r3, [pc, #40]	; (bba4 <sd_mmc_init_write_blocks+0x60>)
    bb7c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bb7e:	4b0a      	ldr	r3, [pc, #40]	; (bba8 <sd_mmc_init_write_blocks+0x64>)
    bb80:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    bb82:	0020      	movs	r0, r4
    bb84:	b002      	add	sp, #8
    bb86:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    bb88:	4808      	ldr	r0, [pc, #32]	; (bbac <sd_mmc_init_write_blocks+0x68>)
    bb8a:	e7e6      	b.n	bb5a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    bb8c:	4b08      	ldr	r3, [pc, #32]	; (bbb0 <sd_mmc_init_write_blocks+0x6c>)
    bb8e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bb90:	2405      	movs	r4, #5
    bb92:	e7f6      	b.n	bb82 <sd_mmc_init_write_blocks+0x3e>
    bb94:	0000b401 	.word	0x0000b401
    bb98:	00109119 	.word	0x00109119
    bb9c:	2000033c 	.word	0x2000033c
    bba0:	0000c135 	.word	0x0000c135
    bba4:	20000360 	.word	0x20000360
    bba8:	20000362 	.word	0x20000362
    bbac:	00089118 	.word	0x00089118
    bbb0:	0000b4e1 	.word	0x0000b4e1

0000bbb4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    bbb4:	b510      	push	{r4, lr}
    bbb6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    bbb8:	4b07      	ldr	r3, [pc, #28]	; (bbd8 <sd_mmc_start_write_blocks+0x24>)
    bbba:	4798      	blx	r3
    bbbc:	2800      	cmp	r0, #0
    bbbe:	d104      	bne.n	bbca <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    bbc0:	2200      	movs	r2, #0
    bbc2:	4b06      	ldr	r3, [pc, #24]	; (bbdc <sd_mmc_start_write_blocks+0x28>)
    bbc4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bbc6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    bbc8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    bbca:	4a04      	ldr	r2, [pc, #16]	; (bbdc <sd_mmc_start_write_blocks+0x28>)
    bbcc:	8813      	ldrh	r3, [r2, #0]
    bbce:	1b1c      	subs	r4, r3, r4
    bbd0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    bbd2:	2000      	movs	r0, #0
    bbd4:	e7f8      	b.n	bbc8 <sd_mmc_start_write_blocks+0x14>
    bbd6:	46c0      	nop			; (mov r8, r8)
    bbd8:	0000c3f1 	.word	0x0000c3f1
    bbdc:	20000360 	.word	0x20000360

0000bbe0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    bbe0:	b510      	push	{r4, lr}
    bbe2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    bbe4:	4b0e      	ldr	r3, [pc, #56]	; (bc20 <sd_mmc_wait_end_of_write_blocks+0x40>)
    bbe6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bbe8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    bbea:	2800      	cmp	r0, #0
    bbec:	d101      	bne.n	bbf2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    bbee:	0018      	movs	r0, r3
    bbf0:	bd10      	pop	{r4, pc}
	if (abort) {
    bbf2:	2c00      	cmp	r4, #0
    bbf4:	d00a      	beq.n	bc0c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    bbf6:	2200      	movs	r2, #0
    bbf8:	4b0a      	ldr	r3, [pc, #40]	; (bc24 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bbfa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    bbfc:	4b0a      	ldr	r3, [pc, #40]	; (bc28 <sd_mmc_wait_end_of_write_blocks+0x48>)
    bbfe:	881b      	ldrh	r3, [r3, #0]
    bc00:	2b01      	cmp	r3, #1
    bc02:	d009      	beq.n	bc18 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    bc04:	4b09      	ldr	r3, [pc, #36]	; (bc2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bc06:	4798      	blx	r3
	return SD_MMC_OK;
    bc08:	2300      	movs	r3, #0
    bc0a:	e7f0      	b.n	bbee <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    bc0c:	4b05      	ldr	r3, [pc, #20]	; (bc24 <sd_mmc_wait_end_of_write_blocks+0x44>)
    bc0e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    bc10:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    bc12:	2a00      	cmp	r2, #0
    bc14:	d0f2      	beq.n	bbfc <sd_mmc_wait_end_of_write_blocks+0x1c>
    bc16:	e7ea      	b.n	bbee <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    bc18:	4b04      	ldr	r3, [pc, #16]	; (bc2c <sd_mmc_wait_end_of_write_blocks+0x4c>)
    bc1a:	4798      	blx	r3
		return SD_MMC_OK;
    bc1c:	2300      	movs	r3, #0
    bc1e:	e7e6      	b.n	bbee <sd_mmc_wait_end_of_write_blocks+0xe>
    bc20:	0000c471 	.word	0x0000c471
    bc24:	20000360 	.word	0x20000360
    bc28:	20000362 	.word	0x20000362
    bc2c:	0000b4e1 	.word	0x0000b4e1

0000bc30 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    bc30:	b510      	push	{r4, lr}
    bc32:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    bc34:	4b0f      	ldr	r3, [pc, #60]	; (bc74 <sd_mmc_test_unit_ready+0x44>)
    bc36:	4798      	blx	r3
    bc38:	2801      	cmp	r0, #1
    bc3a:	d019      	beq.n	bc70 <sd_mmc_test_unit_ready+0x40>
    bc3c:	2800      	cmp	r0, #0
    bc3e:	d003      	beq.n	bc48 <sd_mmc_test_unit_ready+0x18>
    bc40:	2802      	cmp	r0, #2
    bc42:	d010      	beq.n	bc66 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    bc44:	2001      	movs	r0, #1
	}
}
    bc46:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    bc48:	4b0b      	ldr	r3, [pc, #44]	; (bc78 <sd_mmc_test_unit_ready+0x48>)
    bc4a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    bc4c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d1f9      	bne.n	bc46 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    bc52:	0020      	movs	r0, r4
    bc54:	4b09      	ldr	r3, [pc, #36]	; (bc7c <sd_mmc_test_unit_ready+0x4c>)
    bc56:	4798      	blx	r3
    bc58:	0003      	movs	r3, r0
    bc5a:	2003      	movs	r0, #3
    bc5c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    bc5e:	4243      	negs	r3, r0
    bc60:	4158      	adcs	r0, r3
    bc62:	0040      	lsls	r0, r0, #1
    bc64:	e7ef      	b.n	bc46 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    bc66:	2200      	movs	r2, #0
    bc68:	4b03      	ldr	r3, [pc, #12]	; (bc78 <sd_mmc_test_unit_ready+0x48>)
    bc6a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    bc6c:	2002      	movs	r0, #2
    bc6e:	e7ea      	b.n	bc46 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    bc70:	2003      	movs	r0, #3
    bc72:	e7e8      	b.n	bc46 <sd_mmc_test_unit_ready+0x16>
    bc74:	0000b51d 	.word	0x0000b51d
    bc78:	20000368 	.word	0x20000368
    bc7c:	0000b9cd 	.word	0x0000b9cd

0000bc80 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    bc80:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    bc82:	2000      	movs	r0, #0
    bc84:	4b01      	ldr	r3, [pc, #4]	; (bc8c <sd_mmc_test_unit_ready_0+0xc>)
    bc86:	4798      	blx	r3
}
    bc88:	bd10      	pop	{r4, pc}
    bc8a:	46c0      	nop			; (mov r8, r8)
    bc8c:	0000bc31 	.word	0x0000bc31

0000bc90 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    bc90:	b570      	push	{r4, r5, r6, lr}
    bc92:	0004      	movs	r4, r0
    bc94:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    bc96:	4b04      	ldr	r3, [pc, #16]	; (bca8 <sd_mmc_read_capacity+0x18>)
    bc98:	4798      	blx	r3
    bc9a:	0040      	lsls	r0, r0, #1
    bc9c:	3801      	subs	r0, #1
    bc9e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    bca0:	0020      	movs	r0, r4
    bca2:	4b02      	ldr	r3, [pc, #8]	; (bcac <sd_mmc_read_capacity+0x1c>)
    bca4:	4798      	blx	r3
}
    bca6:	bd70      	pop	{r4, r5, r6, pc}
    bca8:	0000b9f5 	.word	0x0000b9f5
    bcac:	0000bc31 	.word	0x0000bc31

0000bcb0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    bcb0:	b510      	push	{r4, lr}
    bcb2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    bcb4:	2000      	movs	r0, #0
    bcb6:	4b01      	ldr	r3, [pc, #4]	; (bcbc <sd_mmc_read_capacity_0+0xc>)
    bcb8:	4798      	blx	r3
}
    bcba:	bd10      	pop	{r4, pc}
    bcbc:	0000bc91 	.word	0x0000bc91

0000bcc0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    bcc0:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    bcc2:	2000      	movs	r0, #0
    bcc4:	4b01      	ldr	r3, [pc, #4]	; (bccc <sd_mmc_wr_protect_0+0xc>)
    bcc6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    bcc8:	bd10      	pop	{r4, pc}
    bcca:	46c0      	nop			; (mov r8, r8)
    bccc:	0000ba1d 	.word	0x0000ba1d

0000bcd0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    bcd0:	b510      	push	{r4, lr}
    bcd2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    bcd4:	2201      	movs	r2, #1
    bcd6:	4b0c      	ldr	r3, [pc, #48]	; (bd08 <sd_mmc_mem_2_ram+0x38>)
    bcd8:	4798      	blx	r3
    bcda:	2800      	cmp	r0, #0
    bcdc:	d004      	beq.n	bce8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    bcde:	3802      	subs	r0, #2
    bce0:	4243      	negs	r3, r0
    bce2:	4158      	adcs	r0, r3
    bce4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    bce6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bce8:	2101      	movs	r1, #1
    bcea:	0020      	movs	r0, r4
    bcec:	4b07      	ldr	r3, [pc, #28]	; (bd0c <sd_mmc_mem_2_ram+0x3c>)
    bcee:	4798      	blx	r3
    bcf0:	0003      	movs	r3, r0
		return CTRL_FAIL;
    bcf2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d1f6      	bne.n	bce6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    bcf8:	2000      	movs	r0, #0
    bcfa:	4b05      	ldr	r3, [pc, #20]	; (bd10 <sd_mmc_mem_2_ram+0x40>)
    bcfc:	4798      	blx	r3
    bcfe:	1e43      	subs	r3, r0, #1
    bd00:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    bd02:	b2c0      	uxtb	r0, r0
    bd04:	e7ef      	b.n	bce6 <sd_mmc_mem_2_ram+0x16>
    bd06:	46c0      	nop			; (mov r8, r8)
    bd08:	0000ba21 	.word	0x0000ba21
    bd0c:	0000baa9 	.word	0x0000baa9
    bd10:	0000bad5 	.word	0x0000bad5

0000bd14 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    bd14:	b510      	push	{r4, lr}
    bd16:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    bd18:	0001      	movs	r1, r0
    bd1a:	2000      	movs	r0, #0
    bd1c:	4b01      	ldr	r3, [pc, #4]	; (bd24 <sd_mmc_mem_2_ram_0+0x10>)
    bd1e:	4798      	blx	r3
}
    bd20:	bd10      	pop	{r4, pc}
    bd22:	46c0      	nop			; (mov r8, r8)
    bd24:	0000bcd1 	.word	0x0000bcd1

0000bd28 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    bd28:	b510      	push	{r4, lr}
    bd2a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    bd2c:	2201      	movs	r2, #1
    bd2e:	4b0c      	ldr	r3, [pc, #48]	; (bd60 <sd_mmc_ram_2_mem+0x38>)
    bd30:	4798      	blx	r3
    bd32:	2800      	cmp	r0, #0
    bd34:	d004      	beq.n	bd40 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    bd36:	3802      	subs	r0, #2
    bd38:	4243      	negs	r3, r0
    bd3a:	4158      	adcs	r0, r3
    bd3c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    bd3e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    bd40:	2101      	movs	r1, #1
    bd42:	0020      	movs	r0, r4
    bd44:	4b07      	ldr	r3, [pc, #28]	; (bd64 <sd_mmc_ram_2_mem+0x3c>)
    bd46:	4798      	blx	r3
    bd48:	0003      	movs	r3, r0
		return CTRL_FAIL;
    bd4a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d1f6      	bne.n	bd3e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    bd50:	2000      	movs	r0, #0
    bd52:	4b05      	ldr	r3, [pc, #20]	; (bd68 <sd_mmc_ram_2_mem+0x40>)
    bd54:	4798      	blx	r3
    bd56:	1e43      	subs	r3, r0, #1
    bd58:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    bd5a:	b2c0      	uxtb	r0, r0
    bd5c:	e7ef      	b.n	bd3e <sd_mmc_ram_2_mem+0x16>
    bd5e:	46c0      	nop			; (mov r8, r8)
    bd60:	0000bb45 	.word	0x0000bb45
    bd64:	0000bbb5 	.word	0x0000bbb5
    bd68:	0000bbe1 	.word	0x0000bbe1

0000bd6c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    bd6c:	b510      	push	{r4, lr}
    bd6e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    bd70:	0001      	movs	r1, r0
    bd72:	2000      	movs	r0, #0
    bd74:	4b01      	ldr	r3, [pc, #4]	; (bd7c <sd_mmc_ram_2_mem_0+0x10>)
    bd76:	4798      	blx	r3
}
    bd78:	bd10      	pop	{r4, pc}
    bd7a:	46c0      	nop			; (mov r8, r8)
    bd7c:	0000bd29 	.word	0x0000bd29

0000bd80 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    bd80:	b500      	push	{lr}
    bd82:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    bd84:	466b      	mov	r3, sp
    bd86:	1dd9      	adds	r1, r3, #7
    bd88:	23ff      	movs	r3, #255	; 0xff
    bd8a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    bd8c:	2201      	movs	r2, #1
    bd8e:	480b      	ldr	r0, [pc, #44]	; (bdbc <sd_mmc_spi_start_write_block+0x3c>)
    bd90:	4b0b      	ldr	r3, [pc, #44]	; (bdc0 <sd_mmc_spi_start_write_block+0x40>)
    bd92:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    bd94:	4b0b      	ldr	r3, [pc, #44]	; (bdc4 <sd_mmc_spi_start_write_block+0x44>)
    bd96:	881b      	ldrh	r3, [r3, #0]
    bd98:	2b01      	cmp	r3, #1
    bd9a:	d00a      	beq.n	bdb2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    bd9c:	22fc      	movs	r2, #252	; 0xfc
    bd9e:	466b      	mov	r3, sp
    bda0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    bda2:	2201      	movs	r2, #1
    bda4:	466b      	mov	r3, sp
    bda6:	1d99      	adds	r1, r3, #6
    bda8:	4804      	ldr	r0, [pc, #16]	; (bdbc <sd_mmc_spi_start_write_block+0x3c>)
    bdaa:	4b05      	ldr	r3, [pc, #20]	; (bdc0 <sd_mmc_spi_start_write_block+0x40>)
    bdac:	4798      	blx	r3
}
    bdae:	b003      	add	sp, #12
    bdb0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    bdb2:	22fe      	movs	r2, #254	; 0xfe
    bdb4:	466b      	mov	r3, sp
    bdb6:	719a      	strb	r2, [r3, #6]
    bdb8:	e7f3      	b.n	bda2 <sd_mmc_spi_start_write_block+0x22>
    bdba:	46c0      	nop			; (mov r8, r8)
    bdbc:	2000036c 	.word	0x2000036c
    bdc0:	000104c1 	.word	0x000104c1
    bdc4:	200003b0 	.word	0x200003b0

0000bdc8 <sd_mmc_spi_wait_busy>:
{
    bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdca:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    bdcc:	466b      	mov	r3, sp
    bdce:	1ddc      	adds	r4, r3, #7
    bdd0:	23ff      	movs	r3, #255	; 0xff
    bdd2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bdd4:	4e12      	ldr	r6, [pc, #72]	; (be20 <sd_mmc_spi_wait_busy+0x58>)
    bdd6:	2201      	movs	r2, #1
    bdd8:	0021      	movs	r1, r4
    bdda:	0030      	movs	r0, r6
    bddc:	4d11      	ldr	r5, [pc, #68]	; (be24 <sd_mmc_spi_wait_busy+0x5c>)
    bdde:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bde0:	23ff      	movs	r3, #255	; 0xff
    bde2:	2201      	movs	r2, #1
    bde4:	0021      	movs	r1, r4
    bde6:	0030      	movs	r0, r6
    bde8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bdea:	23ff      	movs	r3, #255	; 0xff
    bdec:	2201      	movs	r2, #1
    bdee:	0021      	movs	r1, r4
    bdf0:	0030      	movs	r0, r6
    bdf2:	47a8      	blx	r5
    bdf4:	4c0c      	ldr	r4, [pc, #48]	; (be28 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    bdf6:	466b      	mov	r3, sp
    bdf8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    bdfa:	4e09      	ldr	r6, [pc, #36]	; (be20 <sd_mmc_spi_wait_busy+0x58>)
    bdfc:	4f09      	ldr	r7, [pc, #36]	; (be24 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    bdfe:	782b      	ldrb	r3, [r5, #0]
    be00:	2bff      	cmp	r3, #255	; 0xff
    be02:	d009      	beq.n	be18 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    be04:	23ff      	movs	r3, #255	; 0xff
    be06:	2201      	movs	r2, #1
    be08:	0029      	movs	r1, r5
    be0a:	0030      	movs	r0, r6
    be0c:	47b8      	blx	r7
    be0e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    be10:	2c00      	cmp	r4, #0
    be12:	d1f4      	bne.n	bdfe <sd_mmc_spi_wait_busy+0x36>
			return false;
    be14:	2000      	movs	r0, #0
    be16:	e000      	b.n	be1a <sd_mmc_spi_wait_busy+0x52>
	return true;
    be18:	2001      	movs	r0, #1
}
    be1a:	b003      	add	sp, #12
    be1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be1e:	46c0      	nop			; (mov r8, r8)
    be20:	2000036c 	.word	0x2000036c
    be24:	000102f9 	.word	0x000102f9
    be28:	00030d40 	.word	0x00030d40

0000be2c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    be2c:	b570      	push	{r4, r5, r6, lr}
    be2e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    be30:	4b14      	ldr	r3, [pc, #80]	; (be84 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    be32:	881c      	ldrh	r4, [r3, #0]
    be34:	2c01      	cmp	r4, #1
    be36:	d023      	beq.n	be80 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    be38:	4b13      	ldr	r3, [pc, #76]	; (be88 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    be3a:	8819      	ldrh	r1, [r3, #0]
    be3c:	4b13      	ldr	r3, [pc, #76]	; (be8c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    be3e:	6818      	ldr	r0, [r3, #0]
    be40:	4b13      	ldr	r3, [pc, #76]	; (be90 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    be42:	4798      	blx	r3
		return true; // It is not the End of multi write
    be44:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    be46:	4284      	cmp	r4, r0
    be48:	d902      	bls.n	be50 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    be4a:	0018      	movs	r0, r3
    be4c:	b002      	add	sp, #8
    be4e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    be50:	466b      	mov	r3, sp
    be52:	1ddc      	adds	r4, r3, #7
    be54:	23ff      	movs	r3, #255	; 0xff
    be56:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    be58:	4e0e      	ldr	r6, [pc, #56]	; (be94 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    be5a:	2201      	movs	r2, #1
    be5c:	0021      	movs	r1, r4
    be5e:	0030      	movs	r0, r6
    be60:	4d0d      	ldr	r5, [pc, #52]	; (be98 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    be62:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    be64:	23fd      	movs	r3, #253	; 0xfd
    be66:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    be68:	2201      	movs	r2, #1
    be6a:	0021      	movs	r1, r4
    be6c:	0030      	movs	r0, r6
    be6e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    be70:	4b0a      	ldr	r3, [pc, #40]	; (be9c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    be72:	4798      	blx	r3
    be74:	1e03      	subs	r3, r0, #0
    be76:	d1e8      	bne.n	be4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    be78:	2105      	movs	r1, #5
    be7a:	4a09      	ldr	r2, [pc, #36]	; (bea0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    be7c:	7011      	strb	r1, [r2, #0]
		return false;
    be7e:	e7e4      	b.n	be4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    be80:	2301      	movs	r3, #1
    be82:	e7e2      	b.n	be4a <sd_mmc_spi_stop_multiwrite_block+0x1e>
    be84:	200003b0 	.word	0x200003b0
    be88:	200003a8 	.word	0x200003a8
    be8c:	200003b8 	.word	0x200003b8
    be90:	00016bbd 	.word	0x00016bbd
    be94:	2000036c 	.word	0x2000036c
    be98:	000104c1 	.word	0x000104c1
    be9c:	0000bdc9 	.word	0x0000bdc9
    bea0:	200003af 	.word	0x200003af

0000bea4 <sd_mmc_spi_start_read_block>:
{
    bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bea6:	b083      	sub	sp, #12
	token = 0;
    bea8:	2200      	movs	r2, #0
    beaa:	466b      	mov	r3, sp
    beac:	71da      	strb	r2, [r3, #7]
    beae:	4c14      	ldr	r4, [pc, #80]	; (bf00 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    beb0:	466b      	mov	r3, sp
    beb2:	1ddd      	adds	r5, r3, #7
    beb4:	4e13      	ldr	r6, [pc, #76]	; (bf04 <sd_mmc_spi_start_read_block+0x60>)
    beb6:	4f14      	ldr	r7, [pc, #80]	; (bf08 <sd_mmc_spi_start_read_block+0x64>)
    beb8:	23ff      	movs	r3, #255	; 0xff
    beba:	2201      	movs	r2, #1
    bebc:	0029      	movs	r1, r5
    bebe:	0030      	movs	r0, r6
    bec0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    bec2:	782b      	ldrb	r3, [r5, #0]
    bec4:	220f      	movs	r2, #15
    bec6:	0019      	movs	r1, r3
    bec8:	4391      	bics	r1, r2
    beca:	1e0a      	subs	r2, r1, #0
    becc:	d009      	beq.n	bee2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    bece:	2bfe      	cmp	r3, #254	; 0xfe
    bed0:	d013      	beq.n	befa <sd_mmc_spi_start_read_block+0x56>
    bed2:	3c01      	subs	r4, #1
		if (i-- == 0) {
    bed4:	2c00      	cmp	r4, #0
    bed6:	d1ef      	bne.n	beb8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    bed8:	2204      	movs	r2, #4
    beda:	4b0c      	ldr	r3, [pc, #48]	; (bf0c <sd_mmc_spi_start_read_block+0x68>)
    bedc:	701a      	strb	r2, [r3, #0]
			return false;
    bede:	2000      	movs	r0, #0
    bee0:	e00c      	b.n	befc <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    bee2:	075b      	lsls	r3, r3, #29
    bee4:	d004      	beq.n	bef0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    bee6:	3207      	adds	r2, #7
    bee8:	4b08      	ldr	r3, [pc, #32]	; (bf0c <sd_mmc_spi_start_read_block+0x68>)
    beea:	701a      	strb	r2, [r3, #0]
			return false;
    beec:	2000      	movs	r0, #0
    beee:	e005      	b.n	befc <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    bef0:	220b      	movs	r2, #11
    bef2:	4b06      	ldr	r3, [pc, #24]	; (bf0c <sd_mmc_spi_start_read_block+0x68>)
    bef4:	701a      	strb	r2, [r3, #0]
			return false;
    bef6:	2000      	movs	r0, #0
    bef8:	e000      	b.n	befc <sd_mmc_spi_start_read_block+0x58>
	return true;
    befa:	2001      	movs	r0, #1
}
    befc:	b003      	add	sp, #12
    befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf00:	0007a120 	.word	0x0007a120
    bf04:	2000036c 	.word	0x2000036c
    bf08:	000102f9 	.word	0x000102f9
    bf0c:	200003af 	.word	0x200003af

0000bf10 <sd_mmc_spi_stop_write_block>:
{
    bf10:	b530      	push	{r4, r5, lr}
    bf12:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    bf14:	a901      	add	r1, sp, #4
    bf16:	2301      	movs	r3, #1
    bf18:	425b      	negs	r3, r3
    bf1a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    bf1c:	4d14      	ldr	r5, [pc, #80]	; (bf70 <sd_mmc_spi_stop_write_block+0x60>)
    bf1e:	2202      	movs	r2, #2
    bf20:	0028      	movs	r0, r5
    bf22:	4b14      	ldr	r3, [pc, #80]	; (bf74 <sd_mmc_spi_stop_write_block+0x64>)
    bf24:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    bf26:	466b      	mov	r3, sp
    bf28:	1ddc      	adds	r4, r3, #7
    bf2a:	23ff      	movs	r3, #255	; 0xff
    bf2c:	2201      	movs	r2, #1
    bf2e:	0021      	movs	r1, r4
    bf30:	0028      	movs	r0, r5
    bf32:	4d11      	ldr	r5, [pc, #68]	; (bf78 <sd_mmc_spi_stop_write_block+0x68>)
    bf34:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    bf36:	7822      	ldrb	r2, [r4, #0]
    bf38:	2311      	movs	r3, #17
    bf3a:	4013      	ands	r3, r2
    bf3c:	2b01      	cmp	r3, #1
    bf3e:	d005      	beq.n	bf4c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    bf40:	2201      	movs	r2, #1
    bf42:	4b0e      	ldr	r3, [pc, #56]	; (bf7c <sd_mmc_spi_stop_write_block+0x6c>)
    bf44:	701a      	strb	r2, [r3, #0]
		return false;
    bf46:	2000      	movs	r0, #0
}
    bf48:	b003      	add	sp, #12
    bf4a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    bf4c:	231e      	movs	r3, #30
    bf4e:	401a      	ands	r2, r3
    bf50:	2a04      	cmp	r2, #4
    bf52:	d00b      	beq.n	bf6c <sd_mmc_spi_stop_write_block+0x5c>
    bf54:	2a0a      	cmp	r2, #10
    bf56:	d104      	bne.n	bf62 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    bf58:	3a02      	subs	r2, #2
    bf5a:	4b08      	ldr	r3, [pc, #32]	; (bf7c <sd_mmc_spi_stop_write_block+0x6c>)
    bf5c:	701a      	strb	r2, [r3, #0]
		return false;
    bf5e:	2000      	movs	r0, #0
    bf60:	e7f2      	b.n	bf48 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    bf62:	220a      	movs	r2, #10
    bf64:	4b05      	ldr	r3, [pc, #20]	; (bf7c <sd_mmc_spi_stop_write_block+0x6c>)
    bf66:	701a      	strb	r2, [r3, #0]
		return false;
    bf68:	2000      	movs	r0, #0
    bf6a:	e7ed      	b.n	bf48 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    bf6c:	2001      	movs	r0, #1
    bf6e:	e7eb      	b.n	bf48 <sd_mmc_spi_stop_write_block+0x38>
    bf70:	2000036c 	.word	0x2000036c
    bf74:	000104c1 	.word	0x000104c1
    bf78:	000102f9 	.word	0x000102f9
    bf7c:	200003af 	.word	0x200003af

0000bf80 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    bf80:	b570      	push	{r4, r5, r6, lr}
    bf82:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    bf84:	2300      	movs	r3, #0
    bf86:	4a2d      	ldr	r2, [pc, #180]	; (c03c <sd_mmc_spi_init+0xbc>)
    bf88:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    bf8a:	ac02      	add	r4, sp, #8
    bf8c:	2501      	movs	r5, #1
    bf8e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    bf90:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bf92:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    bf94:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    bf96:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    bf98:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    bf9a:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    bf9c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    bf9e:	2224      	movs	r2, #36	; 0x24
    bfa0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bfa2:	3a18      	subs	r2, #24
    bfa4:	2100      	movs	r1, #0
    bfa6:	a808      	add	r0, sp, #32
    bfa8:	4b25      	ldr	r3, [pc, #148]	; (c040 <sd_mmc_spi_init+0xc0>)
    bfaa:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    bfac:	2380      	movs	r3, #128	; 0x80
    bfae:	025b      	lsls	r3, r3, #9
    bfb0:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    bfb2:	4b24      	ldr	r3, [pc, #144]	; (c044 <sd_mmc_spi_init+0xc4>)
    bfb4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    bfb6:	4b24      	ldr	r3, [pc, #144]	; (c048 <sd_mmc_spi_init+0xc8>)
    bfb8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    bfba:	4b24      	ldr	r3, [pc, #144]	; (c04c <sd_mmc_spi_init+0xcc>)
    bfbc:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    bfbe:	4b24      	ldr	r3, [pc, #144]	; (c050 <sd_mmc_spi_init+0xd0>)
    bfc0:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    bfc2:	4b24      	ldr	r3, [pc, #144]	; (c054 <sd_mmc_spi_init+0xd4>)
    bfc4:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    bfc6:	4e24      	ldr	r6, [pc, #144]	; (c058 <sd_mmc_spi_init+0xd8>)
    bfc8:	0022      	movs	r2, r4
    bfca:	4924      	ldr	r1, [pc, #144]	; (c05c <sd_mmc_spi_init+0xdc>)
    bfcc:	0030      	movs	r0, r6
    bfce:	4b24      	ldr	r3, [pc, #144]	; (c060 <sd_mmc_spi_init+0xe0>)
    bfd0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    bfd2:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bfd4:	0020      	movs	r0, r4
    bfd6:	4b23      	ldr	r3, [pc, #140]	; (c064 <sd_mmc_spi_init+0xe4>)
    bfd8:	4798      	blx	r3
    bfda:	231f      	movs	r3, #31
    bfdc:	4018      	ands	r0, r3
    bfde:	4085      	lsls	r5, r0
    bfe0:	4b21      	ldr	r3, [pc, #132]	; (c068 <sd_mmc_spi_init+0xe8>)
    bfe2:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    bfe4:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    bfe6:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    bfe8:	2b00      	cmp	r3, #0
    bfea:	d1fc      	bne.n	bfe6 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bfec:	6823      	ldr	r3, [r4, #0]
    bfee:	2202      	movs	r2, #2
    bff0:	4313      	orrs	r3, r2
    bff2:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    bff4:	4a1d      	ldr	r2, [pc, #116]	; (c06c <sd_mmc_spi_init+0xec>)
    bff6:	2300      	movs	r3, #0
    bff8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    bffa:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    bffc:	491c      	ldr	r1, [pc, #112]	; (c070 <sd_mmc_spi_init+0xf0>)
    bffe:	7808      	ldrb	r0, [r1, #0]
    c000:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c002:	4c1c      	ldr	r4, [pc, #112]	; (c074 <sd_mmc_spi_init+0xf4>)
    c004:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c006:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c008:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    c00a:	a901      	add	r1, sp, #4
    c00c:	2201      	movs	r2, #1
    c00e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c010:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c012:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c014:	4b18      	ldr	r3, [pc, #96]	; (c078 <sd_mmc_spi_init+0xf8>)
    c016:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c018:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c01a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c01c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c01e:	2900      	cmp	r1, #0
    c020:	d104      	bne.n	c02c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    c022:	0953      	lsrs	r3, r2, #5
    c024:	01db      	lsls	r3, r3, #7
    c026:	4915      	ldr	r1, [pc, #84]	; (c07c <sd_mmc_spi_init+0xfc>)
    c028:	468c      	mov	ip, r1
    c02a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c02c:	211f      	movs	r1, #31
    c02e:	4011      	ands	r1, r2
    c030:	2201      	movs	r2, #1
    c032:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    c034:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    c036:	b010      	add	sp, #64	; 0x40
    c038:	bd70      	pop	{r4, r5, r6, pc}
    c03a:	46c0      	nop			; (mov r8, r8)
    c03c:	200003af 	.word	0x200003af
    c040:	00016faf 	.word	0x00016faf
    c044:	00100002 	.word	0x00100002
    c048:	00110002 	.word	0x00110002
    c04c:	00120002 	.word	0x00120002
    c050:	00130002 	.word	0x00130002
    c054:	00061a80 	.word	0x00061a80
    c058:	2000036c 	.word	0x2000036c
    c05c:	42000c00 	.word	0x42000c00
    c060:	00010121 	.word	0x00010121
    c064:	0000ffd9 	.word	0x0000ffd9
    c068:	e000e100 	.word	0xe000e100
    c06c:	200003bc 	.word	0x200003bc
    c070:	20000000 	.word	0x20000000
    c074:	200003ac 	.word	0x200003ac
    c078:	0000f9c5 	.word	0x0000f9c5
    c07c:	41004400 	.word	0x41004400

0000c080 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c082:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c084:	2200      	movs	r2, #0
    c086:	4b0d      	ldr	r3, [pc, #52]	; (c0bc <sd_mmc_spi_select_device+0x3c>)
    c088:	701a      	strb	r2, [r3, #0]
    c08a:	000c      	movs	r4, r1
    c08c:	4b0c      	ldr	r3, [pc, #48]	; (c0c0 <sd_mmc_spi_select_device+0x40>)
    c08e:	4299      	cmp	r1, r3
    c090:	d900      	bls.n	c094 <sd_mmc_spi_select_device+0x14>
    c092:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c094:	4d0b      	ldr	r5, [pc, #44]	; (c0c4 <sd_mmc_spi_select_device+0x44>)
    c096:	4e0c      	ldr	r6, [pc, #48]	; (c0c8 <sd_mmc_spi_select_device+0x48>)
    c098:	e001      	b.n	c09e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    c09a:	08e3      	lsrs	r3, r4, #3
    c09c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    c09e:	0021      	movs	r1, r4
    c0a0:	0028      	movs	r0, r5
    c0a2:	47b0      	blx	r6
    c0a4:	2817      	cmp	r0, #23
    c0a6:	d0f8      	beq.n	c09a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    c0a8:	0079      	lsls	r1, r7, #1
    c0aa:	19cf      	adds	r7, r1, r7
    c0ac:	4907      	ldr	r1, [pc, #28]	; (c0cc <sd_mmc_spi_select_device+0x4c>)
    c0ae:	19c9      	adds	r1, r1, r7
    c0b0:	2201      	movs	r2, #1
    c0b2:	4804      	ldr	r0, [pc, #16]	; (c0c4 <sd_mmc_spi_select_device+0x44>)
    c0b4:	4b06      	ldr	r3, [pc, #24]	; (c0d0 <sd_mmc_spi_select_device+0x50>)
    c0b6:	4798      	blx	r3
}
    c0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0ba:	46c0      	nop			; (mov r8, r8)
    c0bc:	200003af 	.word	0x200003af
    c0c0:	00989680 	.word	0x00989680
    c0c4:	2000036c 	.word	0x2000036c
    c0c8:	00010069 	.word	0x00010069
    c0cc:	200003ac 	.word	0x200003ac
    c0d0:	000103cd 	.word	0x000103cd

0000c0d4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    c0d4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c0d6:	2200      	movs	r2, #0
    c0d8:	4b04      	ldr	r3, [pc, #16]	; (c0ec <sd_mmc_spi_deselect_device+0x18>)
    c0da:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    c0dc:	0041      	lsls	r1, r0, #1
    c0de:	1808      	adds	r0, r1, r0
    c0e0:	4903      	ldr	r1, [pc, #12]	; (c0f0 <sd_mmc_spi_deselect_device+0x1c>)
    c0e2:	1809      	adds	r1, r1, r0
    c0e4:	4803      	ldr	r0, [pc, #12]	; (c0f4 <sd_mmc_spi_deselect_device+0x20>)
    c0e6:	4b04      	ldr	r3, [pc, #16]	; (c0f8 <sd_mmc_spi_deselect_device+0x24>)
    c0e8:	4798      	blx	r3
}
    c0ea:	bd10      	pop	{r4, pc}
    c0ec:	200003af 	.word	0x200003af
    c0f0:	200003ac 	.word	0x200003ac
    c0f4:	2000036c 	.word	0x2000036c
    c0f8:	000103cd 	.word	0x000103cd

0000c0fc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    c0fc:	b570      	push	{r4, r5, r6, lr}
    c0fe:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    c100:	22ff      	movs	r2, #255	; 0xff
    c102:	466b      	mov	r3, sp
    c104:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c106:	2200      	movs	r2, #0
    c108:	4b07      	ldr	r3, [pc, #28]	; (c128 <sd_mmc_spi_send_clock+0x2c>)
    c10a:	701a      	strb	r2, [r3, #0]
    c10c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    c10e:	4e07      	ldr	r6, [pc, #28]	; (c12c <sd_mmc_spi_send_clock+0x30>)
    c110:	4d07      	ldr	r5, [pc, #28]	; (c130 <sd_mmc_spi_send_clock+0x34>)
    c112:	2201      	movs	r2, #1
    c114:	466b      	mov	r3, sp
    c116:	1dd9      	adds	r1, r3, #7
    c118:	0030      	movs	r0, r6
    c11a:	47a8      	blx	r5
    c11c:	3c01      	subs	r4, #1
    c11e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    c120:	2c00      	cmp	r4, #0
    c122:	d1f6      	bne.n	c112 <sd_mmc_spi_send_clock+0x16>
	}
}
    c124:	b002      	add	sp, #8
    c126:	bd70      	pop	{r4, r5, r6, pc}
    c128:	200003af 	.word	0x200003af
    c12c:	2000036c 	.word	0x2000036c
    c130:	000104c1 	.word	0x000104c1

0000c134 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    c134:	b5f0      	push	{r4, r5, r6, r7, lr}
    c136:	46c6      	mov	lr, r8
    c138:	b500      	push	{lr}
    c13a:	b086      	sub	sp, #24
    c13c:	4680      	mov	r8, r0
    c13e:	9200      	str	r2, [sp, #0]
    c140:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    c142:	22ff      	movs	r2, #255	; 0xff
    c144:	230f      	movs	r3, #15
    c146:	a802      	add	r0, sp, #8
    c148:	4684      	mov	ip, r0
    c14a:	4463      	add	r3, ip
    c14c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c14e:	2200      	movs	r2, #0
    c150:	4b53      	ldr	r3, [pc, #332]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c152:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    c154:	ab04      	add	r3, sp, #16
    c156:	323f      	adds	r2, #63	; 0x3f
    c158:	4640      	mov	r0, r8
    c15a:	4002      	ands	r2, r0
    c15c:	2040      	movs	r0, #64	; 0x40
    c15e:	4302      	orrs	r2, r0
    c160:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    c162:	0e0a      	lsrs	r2, r1, #24
    c164:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    c166:	0c0a      	lsrs	r2, r1, #16
    c168:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    c16a:	0a0a      	lsrs	r2, r1, #8
    c16c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    c16e:	7119      	strb	r1, [r3, #4]
    c170:	2700      	movs	r7, #0
	crc = 0;
    c172:	2300      	movs	r3, #0
		value = *buf++;
    c174:	a904      	add	r1, sp, #16
    c176:	2208      	movs	r2, #8
				crc ^= 0x09;
    c178:	2409      	movs	r4, #9
    c17a:	e011      	b.n	c1a0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    c17c:	0076      	lsls	r6, r6, #1
    c17e:	b2f6      	uxtb	r6, r6
    c180:	3801      	subs	r0, #1
    c182:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    c184:	2800      	cmp	r0, #0
    c186:	d008      	beq.n	c19a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    c188:	005b      	lsls	r3, r3, #1
    c18a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    c18c:	001d      	movs	r5, r3
    c18e:	4075      	eors	r5, r6
    c190:	062d      	lsls	r5, r5, #24
    c192:	d5f3      	bpl.n	c17c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    c194:	4063      	eors	r3, r4
    c196:	b2db      	uxtb	r3, r3
    c198:	e7f0      	b.n	c17c <sd_mmc_spi_adtc_start+0x48>
    c19a:	3701      	adds	r7, #1
	while (size--) {
    c19c:	2f05      	cmp	r7, #5
    c19e:	d002      	beq.n	c1a6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    c1a0:	5c7e      	ldrb	r6, [r7, r1]
    c1a2:	0010      	movs	r0, r2
    c1a4:	e7f0      	b.n	c188 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    c1a6:	005b      	lsls	r3, r3, #1
    c1a8:	2201      	movs	r2, #1
    c1aa:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    c1ac:	ac04      	add	r4, sp, #16
    c1ae:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    c1b0:	4e3c      	ldr	r6, [pc, #240]	; (c2a4 <sd_mmc_spi_adtc_start+0x170>)
    c1b2:	2201      	movs	r2, #1
    c1b4:	210f      	movs	r1, #15
    c1b6:	ab02      	add	r3, sp, #8
    c1b8:	469c      	mov	ip, r3
    c1ba:	4461      	add	r1, ip
    c1bc:	0030      	movs	r0, r6
    c1be:	4f3a      	ldr	r7, [pc, #232]	; (c2a8 <sd_mmc_spi_adtc_start+0x174>)
    c1c0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    c1c2:	2206      	movs	r2, #6
    c1c4:	0021      	movs	r1, r4
    c1c6:	0030      	movs	r0, r6
    c1c8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    c1ca:	ab02      	add	r3, sp, #8
    c1cc:	1dd9      	adds	r1, r3, #7
    c1ce:	23ff      	movs	r3, #255	; 0xff
    c1d0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c1d2:	2201      	movs	r2, #1
    c1d4:	0030      	movs	r0, r6
    c1d6:	4e35      	ldr	r6, [pc, #212]	; (c2ac <sd_mmc_spi_adtc_start+0x178>)
    c1d8:	47b0      	blx	r6
    c1da:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    c1dc:	ab02      	add	r3, sp, #8
    c1de:	1dde      	adds	r6, r3, #7
    c1e0:	4f30      	ldr	r7, [pc, #192]	; (c2a4 <sd_mmc_spi_adtc_start+0x170>)
    c1e2:	4d32      	ldr	r5, [pc, #200]	; (c2ac <sd_mmc_spi_adtc_start+0x178>)
    c1e4:	23ff      	movs	r3, #255	; 0xff
    c1e6:	2201      	movs	r2, #1
    c1e8:	0031      	movs	r1, r6
    c1ea:	0038      	movs	r0, r7
    c1ec:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    c1ee:	7833      	ldrb	r3, [r6, #0]
    c1f0:	b25a      	sxtb	r2, r3
    c1f2:	2a00      	cmp	r2, #0
    c1f4:	da0b      	bge.n	c20e <sd_mmc_spi_adtc_start+0xda>
    c1f6:	3c01      	subs	r4, #1
    c1f8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    c1fa:	2c00      	cmp	r4, #0
    c1fc:	d1f2      	bne.n	c1e4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    c1fe:	2202      	movs	r2, #2
    c200:	4b27      	ldr	r3, [pc, #156]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c202:	701a      	strb	r2, [r3, #0]
			return false;
    c204:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    c206:	b006      	add	sp, #24
    c208:	bc04      	pop	{r2}
    c20a:	4690      	mov	r8, r2
    c20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    c20e:	4a28      	ldr	r2, [pc, #160]	; (c2b0 <sd_mmc_spi_adtc_start+0x17c>)
    c210:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    c212:	071a      	lsls	r2, r3, #28
    c214:	d41a      	bmi.n	c24c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    c216:	075a      	lsls	r2, r3, #29
    c218:	d41d      	bmi.n	c256 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    c21a:	2201      	movs	r2, #1
    c21c:	4393      	bics	r3, r2
    c21e:	d11f      	bne.n	c260 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    c220:	4643      	mov	r3, r8
    c222:	049b      	lsls	r3, r3, #18
    c224:	d420      	bmi.n	c268 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    c226:	4643      	mov	r3, r8
    c228:	059b      	lsls	r3, r3, #22
    c22a:	d425      	bmi.n	c278 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    c22c:	4643      	mov	r3, r8
    c22e:	055b      	lsls	r3, r3, #21
    c230:	d42b      	bmi.n	c28a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    c232:	4b20      	ldr	r3, [pc, #128]	; (c2b4 <sd_mmc_spi_adtc_start+0x180>)
    c234:	466a      	mov	r2, sp
    c236:	8812      	ldrh	r2, [r2, #0]
    c238:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    c23a:	4b1f      	ldr	r3, [pc, #124]	; (c2b8 <sd_mmc_spi_adtc_start+0x184>)
    c23c:	466a      	mov	r2, sp
    c23e:	8892      	ldrh	r2, [r2, #4]
    c240:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    c242:	2200      	movs	r2, #0
    c244:	4b1d      	ldr	r3, [pc, #116]	; (c2bc <sd_mmc_spi_adtc_start+0x188>)
    c246:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    c248:	2001      	movs	r0, #1
    c24a:	e7dc      	b.n	c206 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    c24c:	2206      	movs	r2, #6
    c24e:	4b14      	ldr	r3, [pc, #80]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c250:	701a      	strb	r2, [r3, #0]
		return false;
    c252:	2000      	movs	r0, #0
    c254:	e7d7      	b.n	c206 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    c256:	2209      	movs	r2, #9
    c258:	4b11      	ldr	r3, [pc, #68]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c25a:	701a      	strb	r2, [r3, #0]
		return false;
    c25c:	2000      	movs	r0, #0
    c25e:	e7d2      	b.n	c206 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c260:	4b0f      	ldr	r3, [pc, #60]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c262:	701a      	strb	r2, [r3, #0]
		return false;
    c264:	2000      	movs	r0, #0
    c266:	e7ce      	b.n	c206 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    c268:	4b15      	ldr	r3, [pc, #84]	; (c2c0 <sd_mmc_spi_adtc_start+0x18c>)
    c26a:	4798      	blx	r3
    c26c:	2800      	cmp	r0, #0
    c26e:	d1da      	bne.n	c226 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    c270:	2203      	movs	r2, #3
    c272:	4b0b      	ldr	r3, [pc, #44]	; (c2a0 <sd_mmc_spi_adtc_start+0x16c>)
    c274:	701a      	strb	r2, [r3, #0]
			return false;
    c276:	e7c6      	b.n	c206 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    c278:	490d      	ldr	r1, [pc, #52]	; (c2b0 <sd_mmc_spi_adtc_start+0x17c>)
    c27a:	2300      	movs	r3, #0
    c27c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    c27e:	33ff      	adds	r3, #255	; 0xff
    c280:	2201      	movs	r2, #1
    c282:	4808      	ldr	r0, [pc, #32]	; (c2a4 <sd_mmc_spi_adtc_start+0x170>)
    c284:	4e09      	ldr	r6, [pc, #36]	; (c2ac <sd_mmc_spi_adtc_start+0x178>)
    c286:	47b0      	blx	r6
    c288:	e7d0      	b.n	c22c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    c28a:	4e09      	ldr	r6, [pc, #36]	; (c2b0 <sd_mmc_spi_adtc_start+0x17c>)
    c28c:	23ff      	movs	r3, #255	; 0xff
    c28e:	2204      	movs	r2, #4
    c290:	0031      	movs	r1, r6
    c292:	4804      	ldr	r0, [pc, #16]	; (c2a4 <sd_mmc_spi_adtc_start+0x170>)
    c294:	4f05      	ldr	r7, [pc, #20]	; (c2ac <sd_mmc_spi_adtc_start+0x178>)
    c296:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    c298:	6833      	ldr	r3, [r6, #0]
    c29a:	ba1b      	rev	r3, r3
    c29c:	6033      	str	r3, [r6, #0]
    c29e:	e7c8      	b.n	c232 <sd_mmc_spi_adtc_start+0xfe>
    c2a0:	200003af 	.word	0x200003af
    c2a4:	2000036c 	.word	0x2000036c
    c2a8:	000104c1 	.word	0x000104c1
    c2ac:	000102f9 	.word	0x000102f9
    c2b0:	200003b4 	.word	0x200003b4
    c2b4:	200003a8 	.word	0x200003a8
    c2b8:	200003b0 	.word	0x200003b0
    c2bc:	200003b8 	.word	0x200003b8
    c2c0:	0000bdc9 	.word	0x0000bdc9

0000c2c4 <sd_mmc_spi_send_cmd>:
{
    c2c4:	b510      	push	{r4, lr}
    c2c6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    c2c8:	2300      	movs	r3, #0
    c2ca:	9300      	str	r3, [sp, #0]
    c2cc:	2200      	movs	r2, #0
    c2ce:	4c02      	ldr	r4, [pc, #8]	; (c2d8 <sd_mmc_spi_send_cmd+0x14>)
    c2d0:	47a0      	blx	r4
}
    c2d2:	b002      	add	sp, #8
    c2d4:	bd10      	pop	{r4, pc}
    c2d6:	46c0      	nop			; (mov r8, r8)
    c2d8:	0000c135 	.word	0x0000c135

0000c2dc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    c2dc:	4b01      	ldr	r3, [pc, #4]	; (c2e4 <sd_mmc_spi_get_response+0x8>)
    c2de:	6818      	ldr	r0, [r3, #0]
}
    c2e0:	4770      	bx	lr
    c2e2:	46c0      	nop			; (mov r8, r8)
    c2e4:	200003b4 	.word	0x200003b4

0000c2e8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    c2e8:	b510      	push	{r4, lr}
    c2ea:	b084      	sub	sp, #16
    c2ec:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c2ee:	2200      	movs	r2, #0
    c2f0:	4b14      	ldr	r3, [pc, #80]	; (c344 <sd_mmc_spi_read_word+0x5c>)
    c2f2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c2f4:	4b14      	ldr	r3, [pc, #80]	; (c348 <sd_mmc_spi_read_word+0x60>)
    c2f6:	8819      	ldrh	r1, [r3, #0]
    c2f8:	4b14      	ldr	r3, [pc, #80]	; (c34c <sd_mmc_spi_read_word+0x64>)
    c2fa:	6818      	ldr	r0, [r3, #0]
    c2fc:	4b14      	ldr	r3, [pc, #80]	; (c350 <sd_mmc_spi_read_word+0x68>)
    c2fe:	4798      	blx	r3
    c300:	2900      	cmp	r1, #0
    c302:	d103      	bne.n	c30c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    c304:	4b13      	ldr	r3, [pc, #76]	; (c354 <sd_mmc_spi_read_word+0x6c>)
    c306:	4798      	blx	r3
    c308:	2800      	cmp	r0, #0
    c30a:	d010      	beq.n	c32e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    c30c:	23ff      	movs	r3, #255	; 0xff
    c30e:	2204      	movs	r2, #4
    c310:	a901      	add	r1, sp, #4
    c312:	4811      	ldr	r0, [pc, #68]	; (c358 <sd_mmc_spi_read_word+0x70>)
    c314:	4c11      	ldr	r4, [pc, #68]	; (c35c <sd_mmc_spi_read_word+0x74>)
    c316:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    c318:	4b0c      	ldr	r3, [pc, #48]	; (c34c <sd_mmc_spi_read_word+0x64>)
    c31a:	681a      	ldr	r2, [r3, #0]
    c31c:	1d10      	adds	r0, r2, #4
    c31e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c320:	4b09      	ldr	r3, [pc, #36]	; (c348 <sd_mmc_spi_read_word+0x60>)
    c322:	8819      	ldrh	r1, [r3, #0]
    c324:	4b0a      	ldr	r3, [pc, #40]	; (c350 <sd_mmc_spi_read_word+0x68>)
    c326:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    c328:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    c32a:	2900      	cmp	r1, #0
    c32c:	d001      	beq.n	c332 <sd_mmc_spi_read_word+0x4a>
}
    c32e:	b004      	add	sp, #16
    c330:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c332:	23ff      	movs	r3, #255	; 0xff
    c334:	2202      	movs	r2, #2
    c336:	a903      	add	r1, sp, #12
    c338:	4807      	ldr	r0, [pc, #28]	; (c358 <sd_mmc_spi_read_word+0x70>)
    c33a:	4c08      	ldr	r4, [pc, #32]	; (c35c <sd_mmc_spi_read_word+0x74>)
    c33c:	47a0      	blx	r4
	return true;
    c33e:	2001      	movs	r0, #1
    c340:	e7f5      	b.n	c32e <sd_mmc_spi_read_word+0x46>
    c342:	46c0      	nop			; (mov r8, r8)
    c344:	200003af 	.word	0x200003af
    c348:	200003a8 	.word	0x200003a8
    c34c:	200003b8 	.word	0x200003b8
    c350:	00016cc9 	.word	0x00016cc9
    c354:	0000bea5 	.word	0x0000bea5
    c358:	2000036c 	.word	0x2000036c
    c35c:	000102f9 	.word	0x000102f9

0000c360 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    c360:	b5f0      	push	{r4, r5, r6, r7, lr}
    c362:	46de      	mov	lr, fp
    c364:	4657      	mov	r7, sl
    c366:	4646      	mov	r6, r8
    c368:	b5c0      	push	{r6, r7, lr}
    c36a:	b082      	sub	sp, #8
    c36c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c36e:	2200      	movs	r2, #0
    c370:	4b17      	ldr	r3, [pc, #92]	; (c3d0 <sd_mmc_spi_start_read_blocks+0x70>)
    c372:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    c374:	1e4c      	subs	r4, r1, #1
    c376:	b2a4      	uxth	r4, r4
    c378:	2900      	cmp	r1, #0
    c37a:	d026      	beq.n	c3ca <sd_mmc_spi_start_read_blocks+0x6a>
    c37c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    c37e:	4b15      	ldr	r3, [pc, #84]	; (c3d4 <sd_mmc_spi_start_read_blocks+0x74>)
    c380:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c382:	4f15      	ldr	r7, [pc, #84]	; (c3d8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    c384:	47d0      	blx	sl
    c386:	4680      	mov	r8, r0
    c388:	2800      	cmp	r0, #0
    c38a:	d017      	beq.n	c3bc <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    c38c:	883a      	ldrh	r2, [r7, #0]
    c38e:	465b      	mov	r3, fp
    c390:	1999      	adds	r1, r3, r6
    c392:	23ff      	movs	r3, #255	; 0xff
    c394:	4811      	ldr	r0, [pc, #68]	; (c3dc <sd_mmc_spi_start_read_blocks+0x7c>)
    c396:	4d12      	ldr	r5, [pc, #72]	; (c3e0 <sd_mmc_spi_start_read_blocks+0x80>)
    c398:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    c39a:	883b      	ldrh	r3, [r7, #0]
    c39c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c39e:	4a11      	ldr	r2, [pc, #68]	; (c3e4 <sd_mmc_spi_start_read_blocks+0x84>)
    c3a0:	6811      	ldr	r1, [r2, #0]
    c3a2:	468c      	mov	ip, r1
    c3a4:	4463      	add	r3, ip
    c3a6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c3a8:	23ff      	movs	r3, #255	; 0xff
    c3aa:	2202      	movs	r2, #2
    c3ac:	a901      	add	r1, sp, #4
    c3ae:	480b      	ldr	r0, [pc, #44]	; (c3dc <sd_mmc_spi_start_read_blocks+0x7c>)
    c3b0:	47a8      	blx	r5
	while (nb_block--) {
    c3b2:	3c01      	subs	r4, #1
    c3b4:	b2a4      	uxth	r4, r4
    c3b6:	4b0c      	ldr	r3, [pc, #48]	; (c3e8 <sd_mmc_spi_start_read_blocks+0x88>)
    c3b8:	429c      	cmp	r4, r3
    c3ba:	d1e3      	bne.n	c384 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    c3bc:	4640      	mov	r0, r8
    c3be:	b002      	add	sp, #8
    c3c0:	bc1c      	pop	{r2, r3, r4}
    c3c2:	4690      	mov	r8, r2
    c3c4:	469a      	mov	sl, r3
    c3c6:	46a3      	mov	fp, r4
    c3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    c3ca:	2301      	movs	r3, #1
    c3cc:	4698      	mov	r8, r3
    c3ce:	e7f5      	b.n	c3bc <sd_mmc_spi_start_read_blocks+0x5c>
    c3d0:	200003af 	.word	0x200003af
    c3d4:	0000bea5 	.word	0x0000bea5
    c3d8:	200003a8 	.word	0x200003a8
    c3dc:	2000036c 	.word	0x2000036c
    c3e0:	000102f9 	.word	0x000102f9
    c3e4:	200003b8 	.word	0x200003b8
    c3e8:	0000ffff 	.word	0x0000ffff

0000c3ec <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    c3ec:	2001      	movs	r0, #1
    c3ee:	4770      	bx	lr

0000c3f0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    c3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3f2:	46c6      	mov	lr, r8
    c3f4:	b500      	push	{lr}
    c3f6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c3f8:	2200      	movs	r2, #0
    c3fa:	4b15      	ldr	r3, [pc, #84]	; (c450 <sd_mmc_spi_start_write_blocks+0x60>)
    c3fc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    c3fe:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    c400:	4f14      	ldr	r7, [pc, #80]	; (c454 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c402:	4e15      	ldr	r6, [pc, #84]	; (c458 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    c404:	e000      	b.n	c408 <sd_mmc_spi_start_write_blocks+0x18>
{
    c406:	0021      	movs	r1, r4
	while (nb_block--) {
    c408:	1e4c      	subs	r4, r1, #1
    c40a:	b2a4      	uxth	r4, r4
    c40c:	2900      	cmp	r1, #0
    c40e:	d01b      	beq.n	c448 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    c410:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    c412:	8832      	ldrh	r2, [r6, #0]
    c414:	4643      	mov	r3, r8
    c416:	1959      	adds	r1, r3, r5
    c418:	4810      	ldr	r0, [pc, #64]	; (c45c <sd_mmc_spi_start_write_blocks+0x6c>)
    c41a:	4b11      	ldr	r3, [pc, #68]	; (c460 <sd_mmc_spi_start_write_blocks+0x70>)
    c41c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    c41e:	8833      	ldrh	r3, [r6, #0]
    c420:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    c422:	4a10      	ldr	r2, [pc, #64]	; (c464 <sd_mmc_spi_start_write_blocks+0x74>)
    c424:	6811      	ldr	r1, [r2, #0]
    c426:	468c      	mov	ip, r1
    c428:	4463      	add	r3, ip
    c42a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    c42c:	4b0e      	ldr	r3, [pc, #56]	; (c468 <sd_mmc_spi_start_write_blocks+0x78>)
    c42e:	4798      	blx	r3
    c430:	2800      	cmp	r0, #0
    c432:	d00a      	beq.n	c44a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    c434:	2c00      	cmp	r4, #0
    c436:	d0e6      	beq.n	c406 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    c438:	4b0c      	ldr	r3, [pc, #48]	; (c46c <sd_mmc_spi_start_write_blocks+0x7c>)
    c43a:	4798      	blx	r3
    c43c:	2800      	cmp	r0, #0
    c43e:	d1e2      	bne.n	c406 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c440:	2205      	movs	r2, #5
    c442:	4b03      	ldr	r3, [pc, #12]	; (c450 <sd_mmc_spi_start_write_blocks+0x60>)
    c444:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    c446:	e000      	b.n	c44a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    c448:	2001      	movs	r0, #1
}
    c44a:	bc04      	pop	{r2}
    c44c:	4690      	mov	r8, r2
    c44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c450:	200003af 	.word	0x200003af
    c454:	0000bd81 	.word	0x0000bd81
    c458:	200003a8 	.word	0x200003a8
    c45c:	2000036c 	.word	0x2000036c
    c460:	000104c1 	.word	0x000104c1
    c464:	200003b8 	.word	0x200003b8
    c468:	0000bf11 	.word	0x0000bf11
    c46c:	0000bdc9 	.word	0x0000bdc9

0000c470 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    c470:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    c472:	4b05      	ldr	r3, [pc, #20]	; (c488 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    c474:	4798      	blx	r3
    c476:	2800      	cmp	r0, #0
    c478:	d103      	bne.n	c482 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c47a:	2205      	movs	r2, #5
    c47c:	4b03      	ldr	r3, [pc, #12]	; (c48c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    c47e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    c480:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    c482:	4b03      	ldr	r3, [pc, #12]	; (c490 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    c484:	4798      	blx	r3
    c486:	e7fb      	b.n	c480 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    c488:	0000bdc9 	.word	0x0000bdc9
    c48c:	200003af 	.word	0x200003af
    c490:	0000be2d 	.word	0x0000be2d

0000c494 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    c494:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    c496:	2000      	movs	r0, #0
    c498:	4b08      	ldr	r3, [pc, #32]	; (c4bc <delay_init+0x28>)
    c49a:	4798      	blx	r3
    c49c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    c49e:	4c08      	ldr	r4, [pc, #32]	; (c4c0 <delay_init+0x2c>)
    c4a0:	21fa      	movs	r1, #250	; 0xfa
    c4a2:	0089      	lsls	r1, r1, #2
    c4a4:	47a0      	blx	r4
    c4a6:	4b07      	ldr	r3, [pc, #28]	; (c4c4 <delay_init+0x30>)
    c4a8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    c4aa:	4907      	ldr	r1, [pc, #28]	; (c4c8 <delay_init+0x34>)
    c4ac:	0028      	movs	r0, r5
    c4ae:	47a0      	blx	r4
    c4b0:	4b06      	ldr	r3, [pc, #24]	; (c4cc <delay_init+0x38>)
    c4b2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    c4b4:	2205      	movs	r2, #5
    c4b6:	4b06      	ldr	r3, [pc, #24]	; (c4d0 <delay_init+0x3c>)
    c4b8:	601a      	str	r2, [r3, #0]
}
    c4ba:	bd70      	pop	{r4, r5, r6, pc}
    c4bc:	00011301 	.word	0x00011301
    c4c0:	00016bbd 	.word	0x00016bbd
    c4c4:	20000004 	.word	0x20000004
    c4c8:	000f4240 	.word	0x000f4240
    c4cc:	20000008 	.word	0x20000008
    c4d0:	e000e010 	.word	0xe000e010

0000c4d4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    c4d4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    c4d6:	4b08      	ldr	r3, [pc, #32]	; (c4f8 <delay_cycles_ms+0x24>)
    c4d8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    c4da:	4a08      	ldr	r2, [pc, #32]	; (c4fc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    c4dc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c4de:	2180      	movs	r1, #128	; 0x80
    c4e0:	0249      	lsls	r1, r1, #9
	while (n--) {
    c4e2:	3801      	subs	r0, #1
    c4e4:	d307      	bcc.n	c4f6 <delay_cycles_ms+0x22>
	if (n > 0) {
    c4e6:	2c00      	cmp	r4, #0
    c4e8:	d0fb      	beq.n	c4e2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    c4ea:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    c4ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    c4ee:	6813      	ldr	r3, [r2, #0]
    c4f0:	420b      	tst	r3, r1
    c4f2:	d0fc      	beq.n	c4ee <delay_cycles_ms+0x1a>
    c4f4:	e7f5      	b.n	c4e2 <delay_cycles_ms+0xe>
	}
}
    c4f6:	bd30      	pop	{r4, r5, pc}
    c4f8:	20000004 	.word	0x20000004
    c4fc:	e000e010 	.word	0xe000e010

0000c500 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    c500:	b510      	push	{r4, lr}
	if (gpfIsr) {
    c502:	4b03      	ldr	r3, [pc, #12]	; (c510 <chip_isr+0x10>)
    c504:	681b      	ldr	r3, [r3, #0]
    c506:	2b00      	cmp	r3, #0
    c508:	d000      	beq.n	c50c <chip_isr+0xc>
		gpfIsr();
    c50a:	4798      	blx	r3
	}
}
    c50c:	bd10      	pop	{r4, pc}
    c50e:	46c0      	nop			; (mov r8, r8)
    c510:	200003c0 	.word	0x200003c0

0000c514 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    c514:	b570      	push	{r4, r5, r6, lr}
    c516:	b082      	sub	sp, #8
	gpfIsr = NULL;
    c518:	2300      	movs	r3, #0
    c51a:	4a15      	ldr	r2, [pc, #84]	; (c570 <nm_bsp_init+0x5c>)
    c51c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c51e:	ac01      	add	r4, sp, #4
    c520:	2501      	movs	r5, #1
    c522:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    c524:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c526:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    c528:	0021      	movs	r1, r4
    c52a:	201b      	movs	r0, #27
    c52c:	4e11      	ldr	r6, [pc, #68]	; (c574 <nm_bsp_init+0x60>)
    c52e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    c530:	0021      	movs	r1, r4
    c532:	201c      	movs	r0, #28
    c534:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    c536:	0021      	movs	r1, r4
    c538:	2028      	movs	r0, #40	; 0x28
    c53a:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c53c:	4b0e      	ldr	r3, [pc, #56]	; (c578 <nm_bsp_init+0x64>)
    c53e:	2280      	movs	r2, #128	; 0x80
    c540:	0552      	lsls	r2, r2, #21
    c542:	615a      	str	r2, [r3, #20]
    c544:	2280      	movs	r2, #128	; 0x80
    c546:	0512      	lsls	r2, r2, #20
    c548:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    c54a:	4b0c      	ldr	r3, [pc, #48]	; (c57c <nm_bsp_init+0x68>)
    c54c:	681b      	ldr	r3, [r3, #0]
    c54e:	421d      	tst	r5, r3
    c550:	d003      	beq.n	c55a <nm_bsp_init+0x46>
    c552:	4b0a      	ldr	r3, [pc, #40]	; (c57c <nm_bsp_init+0x68>)
    c554:	681b      	ldr	r3, [r3, #0]
    c556:	079b      	lsls	r3, r3, #30
    c558:	d401      	bmi.n	c55e <nm_bsp_init+0x4a>
	    delay_init();
    c55a:	4b09      	ldr	r3, [pc, #36]	; (c580 <nm_bsp_init+0x6c>)
    c55c:	4798      	blx	r3
	cpu_irq_enable();
    c55e:	2201      	movs	r2, #1
    c560:	4b08      	ldr	r3, [pc, #32]	; (c584 <nm_bsp_init+0x70>)
    c562:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c564:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    c568:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    c56a:	2000      	movs	r0, #0
    c56c:	b002      	add	sp, #8
    c56e:	bd70      	pop	{r4, r5, r6, pc}
    c570:	200003c0 	.word	0x200003c0
    c574:	0000f9c5 	.word	0x0000f9c5
    c578:	41004400 	.word	0x41004400
    c57c:	e000e010 	.word	0xe000e010
    c580:	0000c495 	.word	0x0000c495
    c584:	2000000e 	.word	0x2000000e

0000c588 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    c588:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    c58a:	1e44      	subs	r4, r0, #1
    c58c:	2800      	cmp	r0, #0
    c58e:	d004      	beq.n	c59a <nm_bsp_sleep+0x12>
		delay_ms(1);
    c590:	4d02      	ldr	r5, [pc, #8]	; (c59c <nm_bsp_sleep+0x14>)
    c592:	2001      	movs	r0, #1
    c594:	47a8      	blx	r5
	while (u32TimeMsec--) {
    c596:	3c01      	subs	r4, #1
    c598:	d2fb      	bcs.n	c592 <nm_bsp_sleep+0xa>
	}
}
    c59a:	bd70      	pop	{r4, r5, r6, pc}
    c59c:	0000c4d5 	.word	0x0000c4d5

0000c5a0 <nm_bsp_reset>:
{
    c5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5a2:	4c07      	ldr	r4, [pc, #28]	; (c5c0 <nm_bsp_reset+0x20>)
    c5a4:	2780      	movs	r7, #128	; 0x80
    c5a6:	057f      	lsls	r7, r7, #21
    c5a8:	6167      	str	r7, [r4, #20]
    c5aa:	2580      	movs	r5, #128	; 0x80
    c5ac:	052d      	lsls	r5, r5, #20
    c5ae:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    c5b0:	2001      	movs	r0, #1
    c5b2:	4e04      	ldr	r6, [pc, #16]	; (c5c4 <nm_bsp_reset+0x24>)
    c5b4:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c5b6:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    c5b8:	200a      	movs	r0, #10
    c5ba:	47b0      	blx	r6
    c5bc:	61a5      	str	r5, [r4, #24]
}
    c5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5c0:	41004400 	.word	0x41004400
    c5c4:	0000c589 	.word	0x0000c589

0000c5c8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    c5c8:	b510      	push	{r4, lr}
    c5ca:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    c5cc:	4b0e      	ldr	r3, [pc, #56]	; (c608 <nm_bsp_register_isr+0x40>)
    c5ce:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    c5d0:	ac01      	add	r4, sp, #4
    c5d2:	0020      	movs	r0, r4
    c5d4:	4b0d      	ldr	r3, [pc, #52]	; (c60c <nm_bsp_register_isr+0x44>)
    c5d6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    c5d8:	2329      	movs	r3, #41	; 0x29
    c5da:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    c5dc:	2300      	movs	r3, #0
    c5de:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    c5e0:	3301      	adds	r3, #1
    c5e2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    c5e4:	3301      	adds	r3, #1
    c5e6:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    c5e8:	0021      	movs	r1, r4
    c5ea:	2009      	movs	r0, #9
    c5ec:	4b08      	ldr	r3, [pc, #32]	; (c610 <nm_bsp_register_isr+0x48>)
    c5ee:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    c5f0:	2200      	movs	r2, #0
    c5f2:	2109      	movs	r1, #9
    c5f4:	4807      	ldr	r0, [pc, #28]	; (c614 <nm_bsp_register_isr+0x4c>)
    c5f6:	4b08      	ldr	r3, [pc, #32]	; (c618 <nm_bsp_register_isr+0x50>)
    c5f8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c5fa:	2100      	movs	r1, #0
    c5fc:	2009      	movs	r0, #9
    c5fe:	4b07      	ldr	r3, [pc, #28]	; (c61c <nm_bsp_register_isr+0x54>)
    c600:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    c602:	b004      	add	sp, #16
    c604:	bd10      	pop	{r4, pc}
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	200003c0 	.word	0x200003c0
    c60c:	0000f939 	.word	0x0000f939
    c610:	0000f94d 	.word	0x0000f94d
    c614:	0000c501 	.word	0x0000c501
    c618:	0000f7f5 	.word	0x0000f7f5
    c61c:	0000f821 	.word	0x0000f821

0000c620 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    c620:	b510      	push	{r4, lr}
	if (u8Enable) {
    c622:	2800      	cmp	r0, #0
    c624:	d104      	bne.n	c630 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    c626:	2100      	movs	r1, #0
    c628:	2009      	movs	r0, #9
    c62a:	4b04      	ldr	r3, [pc, #16]	; (c63c <nm_bsp_interrupt_ctrl+0x1c>)
    c62c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    c62e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    c630:	2100      	movs	r1, #0
    c632:	2009      	movs	r0, #9
    c634:	4b02      	ldr	r3, [pc, #8]	; (c640 <nm_bsp_interrupt_ctrl+0x20>)
    c636:	4798      	blx	r3
    c638:	e7f9      	b.n	c62e <nm_bsp_interrupt_ctrl+0xe>
    c63a:	46c0      	nop			; (mov r8, r8)
    c63c:	0000f841 	.word	0x0000f841
    c640:	0000f821 	.word	0x0000f821

0000c644 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    c644:	b530      	push	{r4, r5, lr}
    c646:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    c648:	4c30      	ldr	r4, [pc, #192]	; (c70c <nm_bus_init+0xc8>)
    c64a:	230e      	movs	r3, #14
    c64c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c64e:	2300      	movs	r3, #0
    c650:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c652:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c654:	a901      	add	r1, sp, #4
    c656:	2201      	movs	r2, #1
    c658:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c65a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c65c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c65e:	200e      	movs	r0, #14
    c660:	4b2b      	ldr	r3, [pc, #172]	; (c710 <nm_bus_init+0xcc>)
    c662:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c664:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c666:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c668:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c66a:	2900      	cmp	r1, #0
    c66c:	d104      	bne.n	c678 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    c66e:	0953      	lsrs	r3, r2, #5
    c670:	01db      	lsls	r3, r3, #7
    c672:	4928      	ldr	r1, [pc, #160]	; (c714 <nm_bus_init+0xd0>)
    c674:	468c      	mov	ip, r1
    c676:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c678:	211f      	movs	r1, #31
    c67a:	4011      	ands	r1, r2
    c67c:	2201      	movs	r2, #1
    c67e:	0010      	movs	r0, r2
    c680:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c682:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c684:	ac02      	add	r4, sp, #8
    c686:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c688:	2300      	movs	r3, #0
    c68a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c68c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    c68e:	21c0      	movs	r1, #192	; 0xc0
    c690:	0389      	lsls	r1, r1, #14
    c692:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c694:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c696:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c698:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c69a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c69c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c69e:	3223      	adds	r2, #35	; 0x23
    c6a0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c6a2:	3a18      	subs	r2, #24
    c6a4:	2100      	movs	r1, #0
    c6a6:	a808      	add	r0, sp, #32
    c6a8:	4b1b      	ldr	r3, [pc, #108]	; (c718 <nm_bus_init+0xd4>)
    c6aa:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    c6ac:	4b1b      	ldr	r3, [pc, #108]	; (c71c <nm_bus_init+0xd8>)
    c6ae:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    c6b0:	4b1b      	ldr	r3, [pc, #108]	; (c720 <nm_bus_init+0xdc>)
    c6b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    c6b4:	2301      	movs	r3, #1
    c6b6:	425b      	negs	r3, r3
    c6b8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    c6ba:	4b1a      	ldr	r3, [pc, #104]	; (c724 <nm_bus_init+0xe0>)
    c6bc:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    c6be:	4b1a      	ldr	r3, [pc, #104]	; (c728 <nm_bus_init+0xe4>)
    c6c0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    c6c2:	0022      	movs	r2, r4
    c6c4:	4919      	ldr	r1, [pc, #100]	; (c72c <nm_bus_init+0xe8>)
    c6c6:	481a      	ldr	r0, [pc, #104]	; (c730 <nm_bus_init+0xec>)
    c6c8:	4b1a      	ldr	r3, [pc, #104]	; (c734 <nm_bus_init+0xf0>)
    c6ca:	4798      	blx	r3
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d11a      	bne.n	c706 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c6d0:	4d17      	ldr	r5, [pc, #92]	; (c730 <nm_bus_init+0xec>)
    c6d2:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c6d4:	0020      	movs	r0, r4
    c6d6:	4b18      	ldr	r3, [pc, #96]	; (c738 <nm_bus_init+0xf4>)
    c6d8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c6da:	231f      	movs	r3, #31
    c6dc:	4018      	ands	r0, r3
    c6de:	3b1e      	subs	r3, #30
    c6e0:	4083      	lsls	r3, r0
    c6e2:	4a16      	ldr	r2, [pc, #88]	; (c73c <nm_bus_init+0xf8>)
    c6e4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c6e6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c6e8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d1fc      	bne.n	c6e8 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c6ee:	6823      	ldr	r3, [r4, #0]
    c6f0:	2202      	movs	r2, #2
    c6f2:	4313      	orrs	r3, r2
    c6f4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    c6f6:	4b12      	ldr	r3, [pc, #72]	; (c740 <nm_bus_init+0xfc>)
    c6f8:	4798      	blx	r3
	nm_bsp_sleep(1);
    c6fa:	2001      	movs	r0, #1
    c6fc:	4b11      	ldr	r3, [pc, #68]	; (c744 <nm_bus_init+0x100>)
    c6fe:	4798      	blx	r3
#endif
	return result;
    c700:	2000      	movs	r0, #0
}
    c702:	b011      	add	sp, #68	; 0x44
    c704:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    c706:	2006      	movs	r0, #6
    c708:	4240      	negs	r0, r0
    c70a:	e7fa      	b.n	c702 <nm_bus_init+0xbe>
    c70c:	2000133c 	.word	0x2000133c
    c710:	0000f9c5 	.word	0x0000f9c5
    c714:	41004400 	.word	0x41004400
    c718:	00016faf 	.word	0x00016faf
    c71c:	000c0002 	.word	0x000c0002
    c720:	000d0002 	.word	0x000d0002
    c724:	000f0002 	.word	0x000f0002
    c728:	00b71b00 	.word	0x00b71b00
    c72c:	42001000 	.word	0x42001000
    c730:	20001340 	.word	0x20001340
    c734:	00010121 	.word	0x00010121
    c738:	0000ffd9 	.word	0x0000ffd9
    c73c:	e000e100 	.word	0xe000e100
    c740:	0000c5a1 	.word	0x0000c5a1
    c744:	0000c589 	.word	0x0000c589

0000c748 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    c748:	b5f0      	push	{r4, r5, r6, r7, lr}
    c74a:	46de      	mov	lr, fp
    c74c:	4657      	mov	r7, sl
    c74e:	464e      	mov	r6, r9
    c750:	4645      	mov	r5, r8
    c752:	b5e0      	push	{r5, r6, r7, lr}
    c754:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    c756:	2803      	cmp	r0, #3
    c758:	d000      	beq.n	c75c <nm_bus_ioctl+0x14>
    c75a:	e075      	b.n	c848 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    c75c:	680e      	ldr	r6, [r1, #0]
    c75e:	684d      	ldr	r5, [r1, #4]
    c760:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    c762:	2200      	movs	r2, #0
    c764:	466b      	mov	r3, sp
    c766:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c768:	2d00      	cmp	r5, #0
    c76a:	d027      	beq.n	c7bc <nm_bus_ioctl+0x74>
    c76c:	2c00      	cmp	r4, #0
    c76e:	d065      	beq.n	c83c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    c770:	2e00      	cmp	r6, #0
    c772:	d100      	bne.n	c776 <nm_bus_ioctl+0x2e>
    c774:	e077      	b.n	c866 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c776:	2300      	movs	r3, #0
    c778:	4698      	mov	r8, r3
    c77a:	2300      	movs	r3, #0
    c77c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    c77e:	2201      	movs	r2, #1
    c780:	493b      	ldr	r1, [pc, #236]	; (c870 <nm_bus_ioctl+0x128>)
    c782:	483c      	ldr	r0, [pc, #240]	; (c874 <nm_bus_ioctl+0x12c>)
    c784:	4b3c      	ldr	r3, [pc, #240]	; (c878 <nm_bus_ioctl+0x130>)
    c786:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c788:	4b3a      	ldr	r3, [pc, #232]	; (c874 <nm_bus_ioctl+0x12c>)
    c78a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    c78c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    c78e:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c790:	4699      	mov	r9, r3
			pu8Miso++;
    c792:	4659      	mov	r1, fp
    c794:	424b      	negs	r3, r1
    c796:	4159      	adcs	r1, r3
    c798:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    c79a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c79c:	4653      	mov	r3, sl
    c79e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c7a0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    c7a2:	4239      	tst	r1, r7
    c7a4:	d0fc      	beq.n	c7a0 <nm_bus_ioctl+0x58>
    c7a6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c7a8:	4239      	tst	r1, r7
    c7aa:	d0fc      	beq.n	c7a6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c7ac:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c7ae:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    c7b0:	4211      	tst	r1, r2
    c7b2:	d0fc      	beq.n	c7ae <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c7b4:	4649      	mov	r1, r9
    c7b6:	7989      	ldrb	r1, [r1, #6]
    c7b8:	468c      	mov	ip, r1
    c7ba:	e011      	b.n	c7e0 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c7bc:	2e00      	cmp	r6, #0
    c7be:	d03a      	beq.n	c836 <nm_bus_ioctl+0xee>
    c7c0:	2c00      	cmp	r4, #0
    c7c2:	d03e      	beq.n	c842 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c7c4:	2300      	movs	r3, #0
    c7c6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    c7c8:	3301      	adds	r3, #1
    c7ca:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    c7cc:	466b      	mov	r3, sp
    c7ce:	1ddd      	adds	r5, r3, #7
    c7d0:	e7d5      	b.n	c77e <nm_bus_ioctl+0x36>
    c7d2:	4660      	mov	r0, ip
    c7d4:	2801      	cmp	r0, #1
    c7d6:	d00d      	beq.n	c7f4 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c7d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c7da:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    c7dc:	2900      	cmp	r1, #0
    c7de:	d00d      	beq.n	c7fc <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c7e0:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c7e2:	4211      	tst	r1, r2
    c7e4:	d0fc      	beq.n	c7e0 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c7e6:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    c7e8:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c7ea:	4210      	tst	r0, r2
    c7ec:	d0f1      	beq.n	c7d2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c7ee:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    c7f0:	311e      	adds	r1, #30
    c7f2:	e7ee      	b.n	c7d2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c7f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    c7f6:	05c0      	lsls	r0, r0, #23
    c7f8:	0dc0      	lsrs	r0, r0, #23
    c7fa:	e7ef      	b.n	c7dc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    c7fc:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    c7fe:	3c01      	subs	r4, #1
    c800:	b2a4      	uxth	r4, r4
			pu8Miso++;
    c802:	445d      	add	r5, fp
			pu8Mosi++;
    c804:	4643      	mov	r3, r8
    c806:	4259      	negs	r1, r3
    c808:	414b      	adcs	r3, r1
    c80a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    c80c:	2c00      	cmp	r4, #0
    c80e:	d1c4      	bne.n	c79a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c810:	4b18      	ldr	r3, [pc, #96]	; (c874 <nm_bus_ioctl+0x12c>)
    c812:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    c814:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c816:	7e0b      	ldrb	r3, [r1, #24]
    c818:	4213      	tst	r3, r2
    c81a:	d0fc      	beq.n	c816 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    c81c:	2200      	movs	r2, #0
    c81e:	4914      	ldr	r1, [pc, #80]	; (c870 <nm_bus_ioctl+0x128>)
    c820:	4814      	ldr	r0, [pc, #80]	; (c874 <nm_bus_ioctl+0x12c>)
    c822:	4b15      	ldr	r3, [pc, #84]	; (c878 <nm_bus_ioctl+0x130>)
    c824:	4798      	blx	r3
	return M2M_SUCCESS;
    c826:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    c828:	b003      	add	sp, #12
    c82a:	bc3c      	pop	{r2, r3, r4, r5}
    c82c:	4690      	mov	r8, r2
    c82e:	4699      	mov	r9, r3
    c830:	46a2      	mov	sl, r4
    c832:	46ab      	mov	fp, r5
    c834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    c836:	200f      	movs	r0, #15
    c838:	4240      	negs	r0, r0
    c83a:	e7f5      	b.n	c828 <nm_bus_ioctl+0xe0>
    c83c:	200f      	movs	r0, #15
    c83e:	4240      	negs	r0, r0
    c840:	e7f2      	b.n	c828 <nm_bus_ioctl+0xe0>
    c842:	200f      	movs	r0, #15
    c844:	4240      	negs	r0, r0
		break;
    c846:	e7ef      	b.n	c828 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    c848:	2283      	movs	r2, #131	; 0x83
    c84a:	0052      	lsls	r2, r2, #1
    c84c:	490b      	ldr	r1, [pc, #44]	; (c87c <nm_bus_ioctl+0x134>)
    c84e:	480c      	ldr	r0, [pc, #48]	; (c880 <nm_bus_ioctl+0x138>)
    c850:	4b0c      	ldr	r3, [pc, #48]	; (c884 <nm_bus_ioctl+0x13c>)
    c852:	4798      	blx	r3
    c854:	480c      	ldr	r0, [pc, #48]	; (c888 <nm_bus_ioctl+0x140>)
    c856:	4b0d      	ldr	r3, [pc, #52]	; (c88c <nm_bus_ioctl+0x144>)
    c858:	4798      	blx	r3
    c85a:	200d      	movs	r0, #13
    c85c:	4b0c      	ldr	r3, [pc, #48]	; (c890 <nm_bus_ioctl+0x148>)
    c85e:	4798      	blx	r3
			s8Ret = -1;
    c860:	2001      	movs	r0, #1
    c862:	4240      	negs	r0, r0
	return s8Ret;
    c864:	e7e0      	b.n	c828 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    c866:	2301      	movs	r3, #1
    c868:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    c86a:	466b      	mov	r3, sp
    c86c:	1dde      	adds	r6, r3, #7
    c86e:	e784      	b.n	c77a <nm_bus_ioctl+0x32>
    c870:	2000133c 	.word	0x2000133c
    c874:	20001340 	.word	0x20001340
    c878:	000103cd 	.word	0x000103cd
    c87c:	00018798 	.word	0x00018798
    c880:	000187a8 	.word	0x000187a8
    c884:	00017111 	.word	0x00017111
    c888:	000187bc 	.word	0x000187bc
    c88c:	0001722d 	.word	0x0001722d
    c890:	00017145 	.word	0x00017145

0000c894 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    c894:	b530      	push	{r4, r5, lr}
    c896:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    c898:	ab01      	add	r3, sp, #4
    c89a:	2200      	movs	r2, #0
    c89c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    c89e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    c8a0:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8a2:	4d13      	ldr	r5, [pc, #76]	; (c8f0 <nm_bus_deinit+0x5c>)
    c8a4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    c8a6:	0020      	movs	r0, r4
    c8a8:	4b12      	ldr	r3, [pc, #72]	; (c8f4 <nm_bus_deinit+0x60>)
    c8aa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c8ac:	231f      	movs	r3, #31
    c8ae:	4018      	ands	r0, r3
    c8b0:	3b1e      	subs	r3, #30
    c8b2:	4083      	lsls	r3, r0
    c8b4:	2280      	movs	r2, #128	; 0x80
    c8b6:	4910      	ldr	r1, [pc, #64]	; (c8f8 <nm_bus_deinit+0x64>)
    c8b8:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8ba:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c8bc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d1fc      	bne.n	c8bc <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    c8c2:	338f      	adds	r3, #143	; 0x8f
    c8c4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    c8c6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    c8c8:	6823      	ldr	r3, [r4, #0]
    c8ca:	2202      	movs	r2, #2
    c8cc:	4393      	bics	r3, r2
    c8ce:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    c8d0:	a901      	add	r1, sp, #4
    c8d2:	200c      	movs	r0, #12
    c8d4:	4c09      	ldr	r4, [pc, #36]	; (c8fc <nm_bus_deinit+0x68>)
    c8d6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    c8d8:	a901      	add	r1, sp, #4
    c8da:	200f      	movs	r0, #15
    c8dc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    c8de:	a901      	add	r1, sp, #4
    c8e0:	200d      	movs	r0, #13
    c8e2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    c8e4:	a901      	add	r1, sp, #4
    c8e6:	200e      	movs	r0, #14
    c8e8:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    c8ea:	2000      	movs	r0, #0
    c8ec:	b003      	add	sp, #12
    c8ee:	bd30      	pop	{r4, r5, pc}
    c8f0:	20001340 	.word	0x20001340
    c8f4:	0000ffd9 	.word	0x0000ffd9
    c8f8:	e000e100 	.word	0xe000e100
    c8fc:	0000f9c5 	.word	0x0000f9c5

0000c900 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    c900:	2a00      	cmp	r2, #0
    c902:	d006      	beq.n	c912 <m2m_memcpy+0x12>
    c904:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    c906:	780b      	ldrb	r3, [r1, #0]
    c908:	7003      	strb	r3, [r0, #0]
		pDst++;
    c90a:	3001      	adds	r0, #1
		pSrc++;
    c90c:	3101      	adds	r1, #1
	}while(--sz);
    c90e:	4290      	cmp	r0, r2
    c910:	d1f9      	bne.n	c906 <m2m_memcpy+0x6>
}
    c912:	4770      	bx	lr

0000c914 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    c914:	2a00      	cmp	r2, #0
    c916:	d004      	beq.n	c922 <m2m_memset+0xe>
    c918:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    c91a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    c91c:	3001      	adds	r0, #1
	}while(--sz);
    c91e:	4290      	cmp	r0, r2
    c920:	d1fb      	bne.n	c91a <m2m_memset+0x6>
}
    c922:	4770      	bx	lr

0000c924 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    c924:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    c926:	7802      	ldrb	r2, [r0, #0]
    c928:	2a00      	cmp	r2, #0
    c92a:	d007      	beq.n	c93c <m2m_strlen+0x18>
    c92c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    c92e:	3001      	adds	r0, #1
    c930:	b280      	uxth	r0, r0
		pcStr++;
    c932:	3301      	adds	r3, #1
	while(*pcStr)
    c934:	781a      	ldrb	r2, [r3, #0]
    c936:	2a00      	cmp	r2, #0
    c938:	d1f9      	bne.n	c92e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    c93a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    c93c:	2000      	movs	r0, #0
    c93e:	e7fc      	b.n	c93a <m2m_strlen+0x16>

0000c940 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    c940:	4a02      	ldr	r2, [pc, #8]	; (c94c <isr+0xc>)
    c942:	78d3      	ldrb	r3, [r2, #3]
    c944:	3301      	adds	r3, #1
    c946:	b2db      	uxtb	r3, r3
    c948:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    c94a:	4770      	bx	lr
    c94c:	2000137c 	.word	0x2000137c

0000c950 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    c950:	4770      	bx	lr
	...

0000c954 <hif_set_rx_done>:
{
    c954:	b500      	push	{lr}
    c956:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    c958:	2200      	movs	r2, #0
    c95a:	4b0a      	ldr	r3, [pc, #40]	; (c984 <hif_set_rx_done+0x30>)
    c95c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    c95e:	2001      	movs	r0, #1
    c960:	4b09      	ldr	r3, [pc, #36]	; (c988 <hif_set_rx_done+0x34>)
    c962:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    c964:	a901      	add	r1, sp, #4
    c966:	4809      	ldr	r0, [pc, #36]	; (c98c <hif_set_rx_done+0x38>)
    c968:	4b09      	ldr	r3, [pc, #36]	; (c990 <hif_set_rx_done+0x3c>)
    c96a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c96c:	2800      	cmp	r0, #0
    c96e:	d001      	beq.n	c974 <hif_set_rx_done+0x20>
}
    c970:	b003      	add	sp, #12
    c972:	bd00      	pop	{pc}
	reg |= NBIT1;
    c974:	2102      	movs	r1, #2
    c976:	9b01      	ldr	r3, [sp, #4]
    c978:	4319      	orrs	r1, r3
    c97a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    c97c:	4803      	ldr	r0, [pc, #12]	; (c98c <hif_set_rx_done+0x38>)
    c97e:	4b05      	ldr	r3, [pc, #20]	; (c994 <hif_set_rx_done+0x40>)
    c980:	4798      	blx	r3
    c982:	e7f5      	b.n	c970 <hif_set_rx_done+0x1c>
    c984:	2000137c 	.word	0x2000137c
    c988:	0000c621 	.word	0x0000c621
    c98c:	00001070 	.word	0x00001070
    c990:	0000dd65 	.word	0x0000dd65
    c994:	0000dd71 	.word	0x0000dd71

0000c998 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    c998:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    c99a:	4b0c      	ldr	r3, [pc, #48]	; (c9cc <hif_chip_wake+0x34>)
    c99c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    c99e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	d10d      	bne.n	c9c0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    c9a4:	4b09      	ldr	r3, [pc, #36]	; (c9cc <hif_chip_wake+0x34>)
    c9a6:	785b      	ldrb	r3, [r3, #1]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d103      	bne.n	c9b4 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    c9ac:	4b07      	ldr	r3, [pc, #28]	; (c9cc <hif_chip_wake+0x34>)
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	d106      	bne.n	c9c2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    c9b4:	4a05      	ldr	r2, [pc, #20]	; (c9cc <hif_chip_wake+0x34>)
    c9b6:	7853      	ldrb	r3, [r2, #1]
    c9b8:	3301      	adds	r3, #1
    c9ba:	b2db      	uxtb	r3, r3
    c9bc:	7053      	strb	r3, [r2, #1]
    c9be:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    c9c0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    c9c2:	4b03      	ldr	r3, [pc, #12]	; (c9d0 <hif_chip_wake+0x38>)
    c9c4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    c9c6:	2800      	cmp	r0, #0
    c9c8:	d0f4      	beq.n	c9b4 <hif_chip_wake+0x1c>
    c9ca:	e7f9      	b.n	c9c0 <hif_chip_wake+0x28>
    c9cc:	2000137c 	.word	0x2000137c
    c9d0:	0000da4d 	.word	0x0000da4d

0000c9d4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    c9d4:	4b05      	ldr	r3, [pc, #20]	; (c9ec <hif_chip_sleep_sc+0x18>)
    c9d6:	785b      	ldrb	r3, [r3, #1]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d004      	beq.n	c9e6 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    c9dc:	4a03      	ldr	r2, [pc, #12]	; (c9ec <hif_chip_sleep_sc+0x18>)
    c9de:	7853      	ldrb	r3, [r2, #1]
    c9e0:	3b01      	subs	r3, #1
    c9e2:	b2db      	uxtb	r3, r3
    c9e4:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    c9e6:	2000      	movs	r0, #0
    c9e8:	4770      	bx	lr
    c9ea:	46c0      	nop			; (mov r8, r8)
    c9ec:	2000137c 	.word	0x2000137c

0000c9f0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    c9f0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    c9f2:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <hif_chip_sleep+0x30>)
    c9f4:	785b      	ldrb	r3, [r3, #1]
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d004      	beq.n	ca04 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    c9fa:	4a09      	ldr	r2, [pc, #36]	; (ca20 <hif_chip_sleep+0x30>)
    c9fc:	7853      	ldrb	r3, [r2, #1]
    c9fe:	3b01      	subs	r3, #1
    ca00:	b2db      	uxtb	r3, r3
    ca02:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    ca04:	4b06      	ldr	r3, [pc, #24]	; (ca20 <hif_chip_sleep+0x30>)
    ca06:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    ca08:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d103      	bne.n	ca16 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    ca0e:	4b04      	ldr	r3, [pc, #16]	; (ca20 <hif_chip_sleep+0x30>)
    ca10:	781b      	ldrb	r3, [r3, #0]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d100      	bne.n	ca18 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    ca16:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    ca18:	4b02      	ldr	r3, [pc, #8]	; (ca24 <hif_chip_sleep+0x34>)
    ca1a:	4798      	blx	r3
    ca1c:	e7fb      	b.n	ca16 <hif_chip_sleep+0x26>
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	2000137c 	.word	0x2000137c
    ca24:	0000d9e5 	.word	0x0000d9e5

0000ca28 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca2a:	46de      	mov	lr, fp
    ca2c:	4657      	mov	r7, sl
    ca2e:	b580      	push	{r7, lr}
    ca30:	b089      	sub	sp, #36	; 0x24
    ca32:	4683      	mov	fp, r0
    ca34:	468a      	mov	sl, r1
    ca36:	9201      	str	r2, [sp, #4]
    ca38:	9300      	str	r3, [sp, #0]
    ca3a:	ab10      	add	r3, sp, #64	; 0x40
    ca3c:	cb80      	ldmia	r3!, {r7}
    ca3e:	881e      	ldrh	r6, [r3, #0]
    ca40:	ab12      	add	r3, sp, #72	; 0x48
    ca42:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    ca44:	227f      	movs	r2, #127	; 0x7f
    ca46:	400a      	ands	r2, r1
    ca48:	ab07      	add	r3, sp, #28
    ca4a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    ca4c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    ca4e:	2208      	movs	r2, #8
    ca50:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    ca52:	2f00      	cmp	r7, #0
    ca54:	d03d      	beq.n	cad2 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    ca56:	885a      	ldrh	r2, [r3, #2]
    ca58:	1992      	adds	r2, r2, r6
    ca5a:	18aa      	adds	r2, r5, r2
    ca5c:	b292      	uxth	r2, r2
    ca5e:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    ca60:	4b69      	ldr	r3, [pc, #420]	; (cc08 <hif_send+0x1e0>)
    ca62:	4798      	blx	r3
    ca64:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    ca66:	d000      	beq.n	ca6a <hif_send+0x42>
    ca68:	e0c1      	b.n	cbee <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    ca6a:	2300      	movs	r3, #0
    ca6c:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    ca6e:	aa02      	add	r2, sp, #8
    ca70:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    ca72:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    ca74:	9b04      	ldr	r3, [sp, #16]
    ca76:	465a      	mov	r2, fp
    ca78:	431a      	orrs	r2, r3
    ca7a:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    ca7c:	9a04      	ldr	r2, [sp, #16]
    ca7e:	4653      	mov	r3, sl
    ca80:	021b      	lsls	r3, r3, #8
    ca82:	4313      	orrs	r3, r2
    ca84:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    ca86:	ab07      	add	r3, sp, #28
    ca88:	885b      	ldrh	r3, [r3, #2]
    ca8a:	9a04      	ldr	r2, [sp, #16]
    ca8c:	041b      	lsls	r3, r3, #16
    ca8e:	4313      	orrs	r3, r2
    ca90:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    ca92:	9904      	ldr	r1, [sp, #16]
    ca94:	485d      	ldr	r0, [pc, #372]	; (cc0c <hif_send+0x1e4>)
    ca96:	4b5e      	ldr	r3, [pc, #376]	; (cc10 <hif_send+0x1e8>)
    ca98:	4798      	blx	r3
    ca9a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    ca9c:	d157      	bne.n	cb4e <hif_send+0x126>

		reg = 0UL;
    ca9e:	2300      	movs	r3, #0
    caa0:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    caa2:	9b04      	ldr	r3, [sp, #16]
    caa4:	2202      	movs	r2, #2
    caa6:	4313      	orrs	r3, r2
    caa8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    caaa:	9904      	ldr	r1, [sp, #16]
    caac:	4859      	ldr	r0, [pc, #356]	; (cc14 <hif_send+0x1ec>)
    caae:	4b58      	ldr	r3, [pc, #352]	; (cc10 <hif_send+0x1e8>)
    cab0:	4798      	blx	r3
    cab2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    cab4:	d14b      	bne.n	cb4e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    cab6:	2200      	movs	r2, #0
    cab8:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    caba:	ab02      	add	r3, sp, #8
    cabc:	80da      	strh	r2, [r3, #6]
    cabe:	3306      	adds	r3, #6
    cac0:	881b      	ldrh	r3, [r3, #0]
    cac2:	b29b      	uxth	r3, r3
    cac4:	4a54      	ldr	r2, [pc, #336]	; (cc18 <hif_send+0x1f0>)
    cac6:	4293      	cmp	r3, r2
    cac8:	d849      	bhi.n	cb5e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    caca:	4c54      	ldr	r4, [pc, #336]	; (cc1c <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    cacc:	4b54      	ldr	r3, [pc, #336]	; (cc20 <hif_send+0x1f8>)
    cace:	469a      	mov	sl, r3
    cad0:	e017      	b.n	cb02 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    cad2:	ab07      	add	r3, sp, #28
    cad4:	885a      	ldrh	r2, [r3, #2]
    cad6:	9900      	ldr	r1, [sp, #0]
    cad8:	468c      	mov	ip, r1
    cada:	4462      	add	r2, ip
    cadc:	b292      	uxth	r2, r2
    cade:	805a      	strh	r2, [r3, #2]
    cae0:	e7be      	b.n	ca60 <hif_send+0x38>
				nm_bsp_sleep(1);
    cae2:	2001      	movs	r0, #1
    cae4:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    cae6:	9b04      	ldr	r3, [sp, #16]
    cae8:	079b      	lsls	r3, r3, #30
    caea:	d528      	bpl.n	cb3e <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    caec:	ab02      	add	r3, sp, #8
    caee:	88da      	ldrh	r2, [r3, #6]
    caf0:	3201      	adds	r2, #1
    caf2:	b292      	uxth	r2, r2
    caf4:	80da      	strh	r2, [r3, #6]
    caf6:	3306      	adds	r3, #6
    caf8:	881b      	ldrh	r3, [r3, #0]
    cafa:	b29b      	uxth	r3, r3
    cafc:	4a46      	ldr	r2, [pc, #280]	; (cc18 <hif_send+0x1f0>)
    cafe:	4293      	cmp	r3, r2
    cb00:	d82d      	bhi.n	cb5e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    cb02:	a904      	add	r1, sp, #16
    cb04:	4843      	ldr	r0, [pc, #268]	; (cc14 <hif_send+0x1ec>)
    cb06:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    cb08:	2800      	cmp	r0, #0
    cb0a:	d128      	bne.n	cb5e <hif_send+0x136>
			if(cnt >= 500) {
    cb0c:	ab02      	add	r3, sp, #8
    cb0e:	3306      	adds	r3, #6
    cb10:	881b      	ldrh	r3, [r3, #0]
    cb12:	b29b      	uxth	r3, r3
    cb14:	22f4      	movs	r2, #244	; 0xf4
    cb16:	32ff      	adds	r2, #255	; 0xff
    cb18:	4293      	cmp	r3, r2
    cb1a:	d9e4      	bls.n	cae6 <hif_send+0xbe>
				if(cnt < 501) {
    cb1c:	ab02      	add	r3, sp, #8
    cb1e:	3306      	adds	r3, #6
    cb20:	881b      	ldrh	r3, [r3, #0]
    cb22:	b29b      	uxth	r3, r3
    cb24:	3201      	adds	r2, #1
    cb26:	4293      	cmp	r3, r2
    cb28:	d8db      	bhi.n	cae2 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    cb2a:	483e      	ldr	r0, [pc, #248]	; (cc24 <hif_send+0x1fc>)
    cb2c:	4b3e      	ldr	r3, [pc, #248]	; (cc28 <hif_send+0x200>)
    cb2e:	4798      	blx	r3
    cb30:	483e      	ldr	r0, [pc, #248]	; (cc2c <hif_send+0x204>)
    cb32:	4b3f      	ldr	r3, [pc, #252]	; (cc30 <hif_send+0x208>)
    cb34:	4798      	blx	r3
    cb36:	200d      	movs	r0, #13
    cb38:	4b3e      	ldr	r3, [pc, #248]	; (cc34 <hif_send+0x20c>)
    cb3a:	4798      	blx	r3
    cb3c:	e7d1      	b.n	cae2 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    cb3e:	a905      	add	r1, sp, #20
    cb40:	483d      	ldr	r0, [pc, #244]	; (cc38 <hif_send+0x210>)
    cb42:	4b36      	ldr	r3, [pc, #216]	; (cc1c <hif_send+0x1f4>)
    cb44:	4798      	blx	r3
    cb46:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    cb48:	d009      	beq.n	cb5e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    cb4a:	2300      	movs	r3, #0
    cb4c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    cb4e:	4b3b      	ldr	r3, [pc, #236]	; (cc3c <hif_send+0x214>)
    cb50:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    cb52:	0020      	movs	r0, r4
    cb54:	b009      	add	sp, #36	; 0x24
    cb56:	bc0c      	pop	{r2, r3}
    cb58:	4692      	mov	sl, r2
    cb5a:	469b      	mov	fp, r3
    cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    cb5e:	9b05      	ldr	r3, [sp, #20]
    cb60:	2b00      	cmp	r3, #0
    cb62:	d03f      	beq.n	cbe4 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    cb64:	9b05      	ldr	r3, [sp, #20]
    cb66:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    cb68:	a907      	add	r1, sp, #28
    cb6a:	884b      	ldrh	r3, [r1, #2]
    cb6c:	b29b      	uxth	r3, r3
    cb6e:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    cb70:	9806      	ldr	r0, [sp, #24]
    cb72:	2208      	movs	r2, #8
    cb74:	4b32      	ldr	r3, [pc, #200]	; (cc40 <hif_send+0x218>)
    cb76:	4798      	blx	r3
    cb78:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cb7a:	d1e8      	bne.n	cb4e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    cb7c:	9b06      	ldr	r3, [sp, #24]
    cb7e:	3308      	adds	r3, #8
    cb80:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d00b      	beq.n	cba0 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    cb88:	9806      	ldr	r0, [sp, #24]
    cb8a:	9a00      	ldr	r2, [sp, #0]
    cb8c:	0019      	movs	r1, r3
    cb8e:	4b2c      	ldr	r3, [pc, #176]	; (cc40 <hif_send+0x218>)
    cb90:	4798      	blx	r3
    cb92:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cb94:	d1db      	bne.n	cb4e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    cb96:	9b06      	ldr	r3, [sp, #24]
    cb98:	9a00      	ldr	r2, [sp, #0]
    cb9a:	4694      	mov	ip, r2
    cb9c:	4463      	add	r3, ip
    cb9e:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    cba0:	2f00      	cmp	r7, #0
    cba2:	d00e      	beq.n	cbc2 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    cba4:	9b06      	ldr	r3, [sp, #24]
    cba6:	9a00      	ldr	r2, [sp, #0]
    cba8:	1aad      	subs	r5, r5, r2
    cbaa:	18ed      	adds	r5, r5, r3
    cbac:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    cbae:	9806      	ldr	r0, [sp, #24]
    cbb0:	0032      	movs	r2, r6
    cbb2:	0039      	movs	r1, r7
    cbb4:	4b22      	ldr	r3, [pc, #136]	; (cc40 <hif_send+0x218>)
    cbb6:	4798      	blx	r3
    cbb8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    cbba:	d1c8      	bne.n	cb4e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    cbbc:	9b06      	ldr	r3, [sp, #24]
    cbbe:	18f3      	adds	r3, r6, r3
    cbc0:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    cbc2:	9b05      	ldr	r3, [sp, #20]
    cbc4:	009b      	lsls	r3, r3, #2
    cbc6:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    cbc8:	9b04      	ldr	r3, [sp, #16]
    cbca:	2202      	movs	r2, #2
    cbcc:	4313      	orrs	r3, r2
    cbce:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    cbd0:	9904      	ldr	r1, [sp, #16]
    cbd2:	481c      	ldr	r0, [pc, #112]	; (cc44 <hif_send+0x21c>)
    cbd4:	4b0e      	ldr	r3, [pc, #56]	; (cc10 <hif_send+0x1e8>)
    cbd6:	4798      	blx	r3
    cbd8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    cbda:	d1b8      	bne.n	cb4e <hif_send+0x126>
 	ret = hif_chip_sleep();
    cbdc:	4b1a      	ldr	r3, [pc, #104]	; (cc48 <hif_send+0x220>)
    cbde:	4798      	blx	r3
    cbe0:	0004      	movs	r4, r0
	return ret;
    cbe2:	e7b6      	b.n	cb52 <hif_send+0x12a>
			ret = hif_chip_sleep();
    cbe4:	4b18      	ldr	r3, [pc, #96]	; (cc48 <hif_send+0x220>)
    cbe6:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    cbe8:	2403      	movs	r4, #3
    cbea:	4264      	negs	r4, r4
			goto ERR2;
    cbec:	e7b1      	b.n	cb52 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    cbee:	2298      	movs	r2, #152	; 0x98
    cbf0:	32ff      	adds	r2, #255	; 0xff
    cbf2:	4916      	ldr	r1, [pc, #88]	; (cc4c <hif_send+0x224>)
    cbf4:	4816      	ldr	r0, [pc, #88]	; (cc50 <hif_send+0x228>)
    cbf6:	4b0c      	ldr	r3, [pc, #48]	; (cc28 <hif_send+0x200>)
    cbf8:	4798      	blx	r3
    cbfa:	4816      	ldr	r0, [pc, #88]	; (cc54 <hif_send+0x22c>)
    cbfc:	4b0c      	ldr	r3, [pc, #48]	; (cc30 <hif_send+0x208>)
    cbfe:	4798      	blx	r3
    cc00:	200d      	movs	r0, #13
    cc02:	4b0c      	ldr	r3, [pc, #48]	; (cc34 <hif_send+0x20c>)
    cc04:	4798      	blx	r3
		goto ERR2;
    cc06:	e7a4      	b.n	cb52 <hif_send+0x12a>
    cc08:	0000c999 	.word	0x0000c999
    cc0c:	0000108c 	.word	0x0000108c
    cc10:	0000dd71 	.word	0x0000dd71
    cc14:	00001078 	.word	0x00001078
    cc18:	000003e7 	.word	0x000003e7
    cc1c:	0000dd65 	.word	0x0000dd65
    cc20:	0000c589 	.word	0x0000c589
    cc24:	00018ad8 	.word	0x00018ad8
    cc28:	00017111 	.word	0x00017111
    cc2c:	00018ae4 	.word	0x00018ae4
    cc30:	0001722d 	.word	0x0001722d
    cc34:	00017145 	.word	0x00017145
    cc38:	00150400 	.word	0x00150400
    cc3c:	0000c9d5 	.word	0x0000c9d5
    cc40:	0000dde5 	.word	0x0000dde5
    cc44:	0000106c 	.word	0x0000106c
    cc48:	0000c9f1 	.word	0x0000c9f1
    cc4c:	000187f0 	.word	0x000187f0
    cc50:	000187a8 	.word	0x000187a8
    cc54:	00018af4 	.word	0x00018af4

0000cc58 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    cc58:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc5a:	46ce      	mov	lr, r9
    cc5c:	4647      	mov	r7, r8
    cc5e:	b580      	push	{r7, lr}
    cc60:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    cc62:	2200      	movs	r2, #0
    cc64:	4bd1      	ldr	r3, [pc, #836]	; (cfac <hif_handle_isr+0x354>)
    cc66:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    cc68:	4699      	mov	r9, r3
    cc6a:	4698      	mov	r8, r3
    cc6c:	e081      	b.n	cd72 <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    cc6e:	4bcf      	ldr	r3, [pc, #828]	; (cfac <hif_handle_isr+0x354>)
    cc70:	9a05      	ldr	r2, [sp, #20]
    cc72:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    cc74:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    cc76:	af04      	add	r7, sp, #16
    cc78:	2204      	movs	r2, #4
    cc7a:	0039      	movs	r1, r7
    cc7c:	9805      	ldr	r0, [sp, #20]
    cc7e:	4bcc      	ldr	r3, [pc, #816]	; (cfb0 <hif_handle_isr+0x358>)
    cc80:	4798      	blx	r3
    cc82:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    cc84:	887b      	ldrh	r3, [r7, #2]
    cc86:	b29b      	uxth	r3, r3
    cc88:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    cc8a:	2800      	cmp	r0, #0
    cc8c:	d134      	bne.n	ccf8 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    cc8e:	ab04      	add	r3, sp, #16
    cc90:	885b      	ldrh	r3, [r3, #2]
    cc92:	b29b      	uxth	r3, r3
    cc94:	429e      	cmp	r6, r3
    cc96:	d004      	beq.n	cca2 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    cc98:	ab04      	add	r3, sp, #16
    cc9a:	885b      	ldrh	r3, [r3, #2]
    cc9c:	1af3      	subs	r3, r6, r3
    cc9e:	2b04      	cmp	r3, #4
    cca0:	dc3a      	bgt.n	cd18 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    cca2:	ab04      	add	r3, sp, #16
    cca4:	781b      	ldrb	r3, [r3, #0]
    cca6:	2b01      	cmp	r3, #1
    cca8:	d04f      	beq.n	cd4a <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    ccaa:	ab04      	add	r3, sp, #16
    ccac:	781b      	ldrb	r3, [r3, #0]
    ccae:	2b02      	cmp	r3, #2
    ccb0:	d07d      	beq.n	cdae <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    ccb2:	ab04      	add	r3, sp, #16
    ccb4:	781b      	ldrb	r3, [r3, #0]
    ccb6:	2b04      	cmp	r3, #4
    ccb8:	d100      	bne.n	ccbc <hif_handle_isr+0x64>
    ccba:	e095      	b.n	cde8 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    ccbc:	ab04      	add	r3, sp, #16
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	2b06      	cmp	r3, #6
    ccc2:	d100      	bne.n	ccc6 <hif_handle_isr+0x6e>
    ccc4:	e0ad      	b.n	ce22 <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    ccc6:	ab04      	add	r3, sp, #16
    ccc8:	781b      	ldrb	r3, [r3, #0]
    ccca:	2b07      	cmp	r3, #7
    cccc:	d100      	bne.n	ccd0 <hif_handle_isr+0x78>
    ccce:	e0c5      	b.n	ce5c <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    ccd0:	ab04      	add	r3, sp, #16
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	2b05      	cmp	r3, #5
    ccd6:	d100      	bne.n	ccda <hif_handle_isr+0x82>
    ccd8:	e0dc      	b.n	ce94 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    ccda:	2284      	movs	r2, #132	; 0x84
    ccdc:	0092      	lsls	r2, r2, #2
    ccde:	49b5      	ldr	r1, [pc, #724]	; (cfb4 <hif_handle_isr+0x35c>)
    cce0:	48b5      	ldr	r0, [pc, #724]	; (cfb8 <hif_handle_isr+0x360>)
    cce2:	4bb6      	ldr	r3, [pc, #728]	; (cfbc <hif_handle_isr+0x364>)
    cce4:	4798      	blx	r3
    cce6:	48b6      	ldr	r0, [pc, #728]	; (cfc0 <hif_handle_isr+0x368>)
    cce8:	4bb6      	ldr	r3, [pc, #728]	; (cfc4 <hif_handle_isr+0x36c>)
    ccea:	4798      	blx	r3
    ccec:	200d      	movs	r0, #13
    ccee:	4bb6      	ldr	r3, [pc, #728]	; (cfc8 <hif_handle_isr+0x370>)
    ccf0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    ccf2:	2406      	movs	r4, #6
    ccf4:	4264      	negs	r4, r4
    ccf6:	e119      	b.n	cf2c <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    ccf8:	22e9      	movs	r2, #233	; 0xe9
    ccfa:	0052      	lsls	r2, r2, #1
    ccfc:	49ad      	ldr	r1, [pc, #692]	; (cfb4 <hif_handle_isr+0x35c>)
    ccfe:	48ae      	ldr	r0, [pc, #696]	; (cfb8 <hif_handle_isr+0x360>)
    cd00:	4bae      	ldr	r3, [pc, #696]	; (cfbc <hif_handle_isr+0x364>)
    cd02:	4798      	blx	r3
    cd04:	48b1      	ldr	r0, [pc, #708]	; (cfcc <hif_handle_isr+0x374>)
    cd06:	4baf      	ldr	r3, [pc, #700]	; (cfc4 <hif_handle_isr+0x36c>)
    cd08:	4798      	blx	r3
    cd0a:	200d      	movs	r0, #13
    cd0c:	4bae      	ldr	r3, [pc, #696]	; (cfc8 <hif_handle_isr+0x370>)
    cd0e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    cd10:	2001      	movs	r0, #1
    cd12:	4baf      	ldr	r3, [pc, #700]	; (cfd0 <hif_handle_isr+0x378>)
    cd14:	4798      	blx	r3
    cd16:	e109      	b.n	cf2c <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    cd18:	22dc      	movs	r2, #220	; 0xdc
    cd1a:	32ff      	adds	r2, #255	; 0xff
    cd1c:	49a5      	ldr	r1, [pc, #660]	; (cfb4 <hif_handle_isr+0x35c>)
    cd1e:	48a6      	ldr	r0, [pc, #664]	; (cfb8 <hif_handle_isr+0x360>)
    cd20:	4ca6      	ldr	r4, [pc, #664]	; (cfbc <hif_handle_isr+0x364>)
    cd22:	47a0      	blx	r4
    cd24:	a904      	add	r1, sp, #16
    cd26:	884a      	ldrh	r2, [r1, #2]
    cd28:	b292      	uxth	r2, r2
    cd2a:	780b      	ldrb	r3, [r1, #0]
    cd2c:	b2db      	uxtb	r3, r3
    cd2e:	7849      	ldrb	r1, [r1, #1]
    cd30:	9100      	str	r1, [sp, #0]
    cd32:	0031      	movs	r1, r6
    cd34:	48a7      	ldr	r0, [pc, #668]	; (cfd4 <hif_handle_isr+0x37c>)
    cd36:	47a0      	blx	r4
    cd38:	200d      	movs	r0, #13
    cd3a:	4ba3      	ldr	r3, [pc, #652]	; (cfc8 <hif_handle_isr+0x370>)
    cd3c:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    cd3e:	2001      	movs	r0, #1
    cd40:	4ba3      	ldr	r3, [pc, #652]	; (cfd0 <hif_handle_isr+0x378>)
    cd42:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    cd44:	2406      	movs	r4, #6
    cd46:	4264      	negs	r4, r4
    cd48:	e0f0      	b.n	cf2c <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    cd4a:	4b98      	ldr	r3, [pc, #608]	; (cfac <hif_handle_isr+0x354>)
    cd4c:	691b      	ldr	r3, [r3, #16]
    cd4e:	2b00      	cmp	r3, #0
    cd50:	d020      	beq.n	cd94 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cd52:	4b96      	ldr	r3, [pc, #600]	; (cfac <hif_handle_isr+0x354>)
    cd54:	691b      	ldr	r3, [r3, #16]
    cd56:	aa04      	add	r2, sp, #16
    cd58:	7850      	ldrb	r0, [r2, #1]
    cd5a:	b2c0      	uxtb	r0, r0
    cd5c:	8851      	ldrh	r1, [r2, #2]
    cd5e:	9a05      	ldr	r2, [sp, #20]
    cd60:	3208      	adds	r2, #8
    cd62:	3908      	subs	r1, #8
    cd64:	b289      	uxth	r1, r1
    cd66:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    cd68:	4b90      	ldr	r3, [pc, #576]	; (cfac <hif_handle_isr+0x354>)
    cd6a:	789b      	ldrb	r3, [r3, #2]
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d000      	beq.n	cd72 <hif_handle_isr+0x11a>
    cd70:	e0a1      	b.n	ceb6 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    cd72:	464b      	mov	r3, r9
    cd74:	78db      	ldrb	r3, [r3, #3]
    cd76:	2b00      	cmp	r3, #0
    cd78:	d100      	bne.n	cd7c <hif_handle_isr+0x124>
    cd7a:	e15b      	b.n	d034 <hif_handle_isr+0x3dc>
    cd7c:	4643      	mov	r3, r8
    cd7e:	791b      	ldrb	r3, [r3, #4]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d000      	beq.n	cd86 <hif_handle_isr+0x12e>
    cd84:	e156      	b.n	d034 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    cd86:	4a89      	ldr	r2, [pc, #548]	; (cfac <hif_handle_isr+0x354>)
    cd88:	78d3      	ldrb	r3, [r2, #3]
    cd8a:	3b01      	subs	r3, #1
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    cd90:	4d91      	ldr	r5, [pc, #580]	; (cfd8 <hif_handle_isr+0x380>)
    cd92:	e0d6      	b.n	cf42 <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    cd94:	22e8      	movs	r2, #232	; 0xe8
    cd96:	32ff      	adds	r2, #255	; 0xff
    cd98:	4986      	ldr	r1, [pc, #536]	; (cfb4 <hif_handle_isr+0x35c>)
    cd9a:	4887      	ldr	r0, [pc, #540]	; (cfb8 <hif_handle_isr+0x360>)
    cd9c:	4b87      	ldr	r3, [pc, #540]	; (cfbc <hif_handle_isr+0x364>)
    cd9e:	4798      	blx	r3
    cda0:	488e      	ldr	r0, [pc, #568]	; (cfdc <hif_handle_isr+0x384>)
    cda2:	4b88      	ldr	r3, [pc, #544]	; (cfc4 <hif_handle_isr+0x36c>)
    cda4:	4798      	blx	r3
    cda6:	200d      	movs	r0, #13
    cda8:	4b87      	ldr	r3, [pc, #540]	; (cfc8 <hif_handle_isr+0x370>)
    cdaa:	4798      	blx	r3
    cdac:	e7dc      	b.n	cd68 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    cdae:	4b7f      	ldr	r3, [pc, #508]	; (cfac <hif_handle_isr+0x354>)
    cdb0:	695b      	ldr	r3, [r3, #20]
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d00b      	beq.n	cdce <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cdb6:	4b7d      	ldr	r3, [pc, #500]	; (cfac <hif_handle_isr+0x354>)
    cdb8:	695b      	ldr	r3, [r3, #20]
    cdba:	aa04      	add	r2, sp, #16
    cdbc:	7850      	ldrb	r0, [r2, #1]
    cdbe:	b2c0      	uxtb	r0, r0
    cdc0:	8851      	ldrh	r1, [r2, #2]
    cdc2:	9a05      	ldr	r2, [sp, #20]
    cdc4:	3208      	adds	r2, #8
    cdc6:	3908      	subs	r1, #8
    cdc8:	b289      	uxth	r1, r1
    cdca:	4798      	blx	r3
    cdcc:	e7cc      	b.n	cd68 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    cdce:	22f0      	movs	r2, #240	; 0xf0
    cdd0:	32ff      	adds	r2, #255	; 0xff
    cdd2:	4978      	ldr	r1, [pc, #480]	; (cfb4 <hif_handle_isr+0x35c>)
    cdd4:	4878      	ldr	r0, [pc, #480]	; (cfb8 <hif_handle_isr+0x360>)
    cdd6:	4b79      	ldr	r3, [pc, #484]	; (cfbc <hif_handle_isr+0x364>)
    cdd8:	4798      	blx	r3
    cdda:	4881      	ldr	r0, [pc, #516]	; (cfe0 <hif_handle_isr+0x388>)
    cddc:	4b79      	ldr	r3, [pc, #484]	; (cfc4 <hif_handle_isr+0x36c>)
    cdde:	4798      	blx	r3
    cde0:	200d      	movs	r0, #13
    cde2:	4b79      	ldr	r3, [pc, #484]	; (cfc8 <hif_handle_isr+0x370>)
    cde4:	4798      	blx	r3
    cde6:	e7bf      	b.n	cd68 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    cde8:	4b70      	ldr	r3, [pc, #448]	; (cfac <hif_handle_isr+0x354>)
    cdea:	699b      	ldr	r3, [r3, #24]
    cdec:	2b00      	cmp	r3, #0
    cdee:	d00b      	beq.n	ce08 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cdf0:	4b6e      	ldr	r3, [pc, #440]	; (cfac <hif_handle_isr+0x354>)
    cdf2:	699b      	ldr	r3, [r3, #24]
    cdf4:	aa04      	add	r2, sp, #16
    cdf6:	7850      	ldrb	r0, [r2, #1]
    cdf8:	b2c0      	uxtb	r0, r0
    cdfa:	8851      	ldrh	r1, [r2, #2]
    cdfc:	9a05      	ldr	r2, [sp, #20]
    cdfe:	3208      	adds	r2, #8
    ce00:	3908      	subs	r1, #8
    ce02:	b289      	uxth	r1, r1
    ce04:	4798      	blx	r3
    ce06:	e7af      	b.n	cd68 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    ce08:	22f8      	movs	r2, #248	; 0xf8
    ce0a:	32ff      	adds	r2, #255	; 0xff
    ce0c:	4969      	ldr	r1, [pc, #420]	; (cfb4 <hif_handle_isr+0x35c>)
    ce0e:	486a      	ldr	r0, [pc, #424]	; (cfb8 <hif_handle_isr+0x360>)
    ce10:	4b6a      	ldr	r3, [pc, #424]	; (cfbc <hif_handle_isr+0x364>)
    ce12:	4798      	blx	r3
    ce14:	4873      	ldr	r0, [pc, #460]	; (cfe4 <hif_handle_isr+0x38c>)
    ce16:	4b6b      	ldr	r3, [pc, #428]	; (cfc4 <hif_handle_isr+0x36c>)
    ce18:	4798      	blx	r3
    ce1a:	200d      	movs	r0, #13
    ce1c:	4b6a      	ldr	r3, [pc, #424]	; (cfc8 <hif_handle_isr+0x370>)
    ce1e:	4798      	blx	r3
    ce20:	e7a2      	b.n	cd68 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    ce22:	4b62      	ldr	r3, [pc, #392]	; (cfac <hif_handle_isr+0x354>)
    ce24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ce26:	2b00      	cmp	r3, #0
    ce28:	d00b      	beq.n	ce42 <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ce2a:	4b60      	ldr	r3, [pc, #384]	; (cfac <hif_handle_isr+0x354>)
    ce2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ce2e:	aa04      	add	r2, sp, #16
    ce30:	7850      	ldrb	r0, [r2, #1]
    ce32:	b2c0      	uxtb	r0, r0
    ce34:	8851      	ldrh	r1, [r2, #2]
    ce36:	9a05      	ldr	r2, [sp, #20]
    ce38:	3208      	adds	r2, #8
    ce3a:	3908      	subs	r1, #8
    ce3c:	b289      	uxth	r1, r1
    ce3e:	4798      	blx	r3
    ce40:	e792      	b.n	cd68 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    ce42:	2280      	movs	r2, #128	; 0x80
    ce44:	0092      	lsls	r2, r2, #2
    ce46:	495b      	ldr	r1, [pc, #364]	; (cfb4 <hif_handle_isr+0x35c>)
    ce48:	485b      	ldr	r0, [pc, #364]	; (cfb8 <hif_handle_isr+0x360>)
    ce4a:	4b5c      	ldr	r3, [pc, #368]	; (cfbc <hif_handle_isr+0x364>)
    ce4c:	4798      	blx	r3
    ce4e:	4866      	ldr	r0, [pc, #408]	; (cfe8 <hif_handle_isr+0x390>)
    ce50:	4b5c      	ldr	r3, [pc, #368]	; (cfc4 <hif_handle_isr+0x36c>)
    ce52:	4798      	blx	r3
    ce54:	200d      	movs	r0, #13
    ce56:	4b5c      	ldr	r3, [pc, #368]	; (cfc8 <hif_handle_isr+0x370>)
    ce58:	4798      	blx	r3
    ce5a:	e785      	b.n	cd68 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    ce5c:	4b53      	ldr	r3, [pc, #332]	; (cfac <hif_handle_isr+0x354>)
    ce5e:	69db      	ldr	r3, [r3, #28]
    ce60:	2b00      	cmp	r3, #0
    ce62:	d00b      	beq.n	ce7c <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ce64:	4b51      	ldr	r3, [pc, #324]	; (cfac <hif_handle_isr+0x354>)
    ce66:	69db      	ldr	r3, [r3, #28]
    ce68:	aa04      	add	r2, sp, #16
    ce6a:	7850      	ldrb	r0, [r2, #1]
    ce6c:	b2c0      	uxtb	r0, r0
    ce6e:	8851      	ldrh	r1, [r2, #2]
    ce70:	9a05      	ldr	r2, [sp, #20]
    ce72:	3208      	adds	r2, #8
    ce74:	3908      	subs	r1, #8
    ce76:	b289      	uxth	r1, r1
    ce78:	4798      	blx	r3
    ce7a:	e775      	b.n	cd68 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    ce7c:	4a5b      	ldr	r2, [pc, #364]	; (cfec <hif_handle_isr+0x394>)
    ce7e:	494d      	ldr	r1, [pc, #308]	; (cfb4 <hif_handle_isr+0x35c>)
    ce80:	484d      	ldr	r0, [pc, #308]	; (cfb8 <hif_handle_isr+0x360>)
    ce82:	4b4e      	ldr	r3, [pc, #312]	; (cfbc <hif_handle_isr+0x364>)
    ce84:	4798      	blx	r3
    ce86:	485a      	ldr	r0, [pc, #360]	; (cff0 <hif_handle_isr+0x398>)
    ce88:	4b4e      	ldr	r3, [pc, #312]	; (cfc4 <hif_handle_isr+0x36c>)
    ce8a:	4798      	blx	r3
    ce8c:	200d      	movs	r0, #13
    ce8e:	4b4e      	ldr	r3, [pc, #312]	; (cfc8 <hif_handle_isr+0x370>)
    ce90:	4798      	blx	r3
    ce92:	e769      	b.n	cd68 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    ce94:	4b45      	ldr	r3, [pc, #276]	; (cfac <hif_handle_isr+0x354>)
    ce96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d100      	bne.n	ce9e <hif_handle_isr+0x246>
    ce9c:	e764      	b.n	cd68 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    ce9e:	4b43      	ldr	r3, [pc, #268]	; (cfac <hif_handle_isr+0x354>)
    cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cea2:	aa04      	add	r2, sp, #16
    cea4:	7850      	ldrb	r0, [r2, #1]
    cea6:	b2c0      	uxtb	r0, r0
    cea8:	8851      	ldrh	r1, [r2, #2]
    ceaa:	9a05      	ldr	r2, [sp, #20]
    ceac:	3208      	adds	r2, #8
    ceae:	3908      	subs	r1, #8
    ceb0:	b289      	uxth	r1, r1
    ceb2:	4798      	blx	r3
    ceb4:	e758      	b.n	cd68 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    ceb6:	4a4f      	ldr	r2, [pc, #316]	; (cff4 <hif_handle_isr+0x39c>)
    ceb8:	493e      	ldr	r1, [pc, #248]	; (cfb4 <hif_handle_isr+0x35c>)
    ceba:	483f      	ldr	r0, [pc, #252]	; (cfb8 <hif_handle_isr+0x360>)
    cebc:	4c3f      	ldr	r4, [pc, #252]	; (cfbc <hif_handle_isr+0x364>)
    cebe:	47a0      	blx	r4
    cec0:	ab04      	add	r3, sp, #16
    cec2:	7819      	ldrb	r1, [r3, #0]
    cec4:	b2c9      	uxtb	r1, r1
    cec6:	785a      	ldrb	r2, [r3, #1]
    cec8:	b2d2      	uxtb	r2, r2
    ceca:	484b      	ldr	r0, [pc, #300]	; (cff8 <hif_handle_isr+0x3a0>)
    cecc:	47a0      	blx	r4
    cece:	200d      	movs	r0, #13
    ced0:	4b3d      	ldr	r3, [pc, #244]	; (cfc8 <hif_handle_isr+0x370>)
    ced2:	4798      	blx	r3
					ret = hif_set_rx_done();
    ced4:	4b49      	ldr	r3, [pc, #292]	; (cffc <hif_handle_isr+0x3a4>)
    ced6:	4798      	blx	r3
    ced8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    ceda:	d127      	bne.n	cf2c <hif_handle_isr+0x2d4>
    cedc:	e749      	b.n	cd72 <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    cede:	4a48      	ldr	r2, [pc, #288]	; (d000 <hif_handle_isr+0x3a8>)
    cee0:	4934      	ldr	r1, [pc, #208]	; (cfb4 <hif_handle_isr+0x35c>)
    cee2:	4835      	ldr	r0, [pc, #212]	; (cfb8 <hif_handle_isr+0x360>)
    cee4:	4b35      	ldr	r3, [pc, #212]	; (cfbc <hif_handle_isr+0x364>)
    cee6:	4798      	blx	r3
    cee8:	4846      	ldr	r0, [pc, #280]	; (d004 <hif_handle_isr+0x3ac>)
    ceea:	4b36      	ldr	r3, [pc, #216]	; (cfc4 <hif_handle_isr+0x36c>)
    ceec:	4798      	blx	r3
    ceee:	200d      	movs	r0, #13
    cef0:	4b35      	ldr	r3, [pc, #212]	; (cfc8 <hif_handle_isr+0x370>)
    cef2:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    cef4:	2402      	movs	r4, #2
    cef6:	4264      	negs	r4, r4
    cef8:	e018      	b.n	cf2c <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    cefa:	4a43      	ldr	r2, [pc, #268]	; (d008 <hif_handle_isr+0x3b0>)
    cefc:	492d      	ldr	r1, [pc, #180]	; (cfb4 <hif_handle_isr+0x35c>)
    cefe:	482e      	ldr	r0, [pc, #184]	; (cfb8 <hif_handle_isr+0x360>)
    cf00:	4c2e      	ldr	r4, [pc, #184]	; (cfbc <hif_handle_isr+0x364>)
    cf02:	47a0      	blx	r4
    cf04:	9903      	ldr	r1, [sp, #12]
    cf06:	4841      	ldr	r0, [pc, #260]	; (d00c <hif_handle_isr+0x3b4>)
    cf08:	47a0      	blx	r4
    cf0a:	200d      	movs	r0, #13
    cf0c:	4b2e      	ldr	r3, [pc, #184]	; (cfc8 <hif_handle_isr+0x370>)
    cf0e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    cf10:	240c      	movs	r4, #12
    cf12:	4264      	negs	r4, r4
    cf14:	e00a      	b.n	cf2c <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    cf16:	4a3e      	ldr	r2, [pc, #248]	; (d010 <hif_handle_isr+0x3b8>)
    cf18:	4926      	ldr	r1, [pc, #152]	; (cfb4 <hif_handle_isr+0x35c>)
    cf1a:	4827      	ldr	r0, [pc, #156]	; (cfb8 <hif_handle_isr+0x360>)
    cf1c:	4b27      	ldr	r3, [pc, #156]	; (cfbc <hif_handle_isr+0x364>)
    cf1e:	4798      	blx	r3
    cf20:	483c      	ldr	r0, [pc, #240]	; (d014 <hif_handle_isr+0x3bc>)
    cf22:	4b28      	ldr	r3, [pc, #160]	; (cfc4 <hif_handle_isr+0x36c>)
    cf24:	4798      	blx	r3
    cf26:	200d      	movs	r0, #13
    cf28:	4b27      	ldr	r3, [pc, #156]	; (cfc8 <hif_handle_isr+0x370>)
    cf2a:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    cf2c:	4a3a      	ldr	r2, [pc, #232]	; (d018 <hif_handle_isr+0x3c0>)
    cf2e:	493b      	ldr	r1, [pc, #236]	; (d01c <hif_handle_isr+0x3c4>)
    cf30:	4821      	ldr	r0, [pc, #132]	; (cfb8 <hif_handle_isr+0x360>)
    cf32:	4f22      	ldr	r7, [pc, #136]	; (cfbc <hif_handle_isr+0x364>)
    cf34:	47b8      	blx	r7
    cf36:	0021      	movs	r1, r4
    cf38:	4839      	ldr	r0, [pc, #228]	; (d020 <hif_handle_isr+0x3c8>)
    cf3a:	47b8      	blx	r7
    cf3c:	200d      	movs	r0, #13
    cf3e:	4b22      	ldr	r3, [pc, #136]	; (cfc8 <hif_handle_isr+0x370>)
    cf40:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    cf42:	a903      	add	r1, sp, #12
    cf44:	4837      	ldr	r0, [pc, #220]	; (d024 <hif_handle_isr+0x3cc>)
    cf46:	47a8      	blx	r5
    cf48:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    cf4a:	d1e4      	bne.n	cf16 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    cf4c:	9b03      	ldr	r3, [sp, #12]
    cf4e:	07db      	lsls	r3, r3, #31
    cf50:	d5d3      	bpl.n	cefa <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    cf52:	2000      	movs	r0, #0
    cf54:	4b1e      	ldr	r3, [pc, #120]	; (cfd0 <hif_handle_isr+0x378>)
    cf56:	4798      	blx	r3
			reg &= ~NBIT0;
    cf58:	2301      	movs	r3, #1
    cf5a:	9903      	ldr	r1, [sp, #12]
    cf5c:	4399      	bics	r1, r3
    cf5e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    cf60:	4830      	ldr	r0, [pc, #192]	; (d024 <hif_handle_isr+0x3cc>)
    cf62:	4b31      	ldr	r3, [pc, #196]	; (d028 <hif_handle_isr+0x3d0>)
    cf64:	4798      	blx	r3
    cf66:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    cf68:	d1e0      	bne.n	cf2c <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    cf6a:	2201      	movs	r2, #1
    cf6c:	4b0f      	ldr	r3, [pc, #60]	; (cfac <hif_handle_isr+0x354>)
    cf6e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    cf70:	9b03      	ldr	r3, [sp, #12]
    cf72:	049e      	lsls	r6, r3, #18
    cf74:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    cf76:	d0b2      	beq.n	cede <hif_handle_isr+0x286>
				uint32 address = 0;
    cf78:	2300      	movs	r3, #0
    cf7a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    cf7c:	a905      	add	r1, sp, #20
    cf7e:	482b      	ldr	r0, [pc, #172]	; (d02c <hif_handle_isr+0x3d4>)
    cf80:	4b15      	ldr	r3, [pc, #84]	; (cfd8 <hif_handle_isr+0x380>)
    cf82:	4798      	blx	r3
    cf84:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    cf86:	d100      	bne.n	cf8a <hif_handle_isr+0x332>
    cf88:	e671      	b.n	cc6e <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    cf8a:	22e4      	movs	r2, #228	; 0xe4
    cf8c:	0052      	lsls	r2, r2, #1
    cf8e:	4909      	ldr	r1, [pc, #36]	; (cfb4 <hif_handle_isr+0x35c>)
    cf90:	4809      	ldr	r0, [pc, #36]	; (cfb8 <hif_handle_isr+0x360>)
    cf92:	4b0a      	ldr	r3, [pc, #40]	; (cfbc <hif_handle_isr+0x364>)
    cf94:	4798      	blx	r3
    cf96:	4826      	ldr	r0, [pc, #152]	; (d030 <hif_handle_isr+0x3d8>)
    cf98:	4b0a      	ldr	r3, [pc, #40]	; (cfc4 <hif_handle_isr+0x36c>)
    cf9a:	4798      	blx	r3
    cf9c:	200d      	movs	r0, #13
    cf9e:	4b0a      	ldr	r3, [pc, #40]	; (cfc8 <hif_handle_isr+0x370>)
    cfa0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    cfa2:	2001      	movs	r0, #1
    cfa4:	4b0a      	ldr	r3, [pc, #40]	; (cfd0 <hif_handle_isr+0x378>)
    cfa6:	4798      	blx	r3
    cfa8:	e7c0      	b.n	cf2c <hif_handle_isr+0x2d4>
    cfaa:	46c0      	nop			; (mov r8, r8)
    cfac:	2000137c 	.word	0x2000137c
    cfb0:	0000dd7d 	.word	0x0000dd7d
    cfb4:	000187fc 	.word	0x000187fc
    cfb8:	000187a8 	.word	0x000187a8
    cfbc:	00017111 	.word	0x00017111
    cfc0:	00018958 	.word	0x00018958
    cfc4:	0001722d 	.word	0x0001722d
    cfc8:	00017145 	.word	0x00017145
    cfcc:	00018854 	.word	0x00018854
    cfd0:	0000c621 	.word	0x0000c621
    cfd4:	0001886c 	.word	0x0001886c
    cfd8:	0000dd65 	.word	0x0000dd65
    cfdc:	000188ac 	.word	0x000188ac
    cfe0:	000188cc 	.word	0x000188cc
    cfe4:	000188f0 	.word	0x000188f0
    cfe8:	00018910 	.word	0x00018910
    cfec:	00000207 	.word	0x00000207
    cff0:	00018934 	.word	0x00018934
    cff4:	00000216 	.word	0x00000216
    cff8:	00018970 	.word	0x00018970
    cffc:	0000c955 	.word	0x0000c955
    d000:	0000021d 	.word	0x0000021d
    d004:	0001899c 	.word	0x0001899c
    d008:	00000225 	.word	0x00000225
    d00c:	000189b0 	.word	0x000189b0
    d010:	0000022e 	.word	0x0000022e
    d014:	000189cc 	.word	0x000189cc
    d018:	00000257 	.word	0x00000257
    d01c:	00018804 	.word	0x00018804
    d020:	000189f0 	.word	0x000189f0
    d024:	00001070 	.word	0x00001070
    d028:	0000dd71 	.word	0x0000dd71
    d02c:	00001084 	.word	0x00001084
    d030:	00018830 	.word	0x00018830
			}
		}
	}

	return ret;
}
    d034:	2000      	movs	r0, #0
    d036:	b007      	add	sp, #28
    d038:	bc0c      	pop	{r2, r3}
    d03a:	4690      	mov	r8, r2
    d03c:	4699      	mov	r9, r3
    d03e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d040 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d040:	b570      	push	{r4, r5, r6, lr}
    d042:	0014      	movs	r4, r2
    d044:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d046:	2800      	cmp	r0, #0
    d048:	d003      	beq.n	d052 <hif_receive+0x12>
    d04a:	2900      	cmp	r1, #0
    d04c:	d001      	beq.n	d052 <hif_receive+0x12>
    d04e:	2a00      	cmp	r2, #0
    d050:	d113      	bne.n	d07a <hif_receive+0x3a>
	{
		if(isDone)
    d052:	2d00      	cmp	r5, #0
    d054:	d002      	beq.n	d05c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d056:	4b28      	ldr	r3, [pc, #160]	; (d0f8 <hif_receive+0xb8>)
    d058:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    d05a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    d05c:	229e      	movs	r2, #158	; 0x9e
    d05e:	0092      	lsls	r2, r2, #2
    d060:	4926      	ldr	r1, [pc, #152]	; (d0fc <hif_receive+0xbc>)
    d062:	4827      	ldr	r0, [pc, #156]	; (d100 <hif_receive+0xc0>)
    d064:	4b27      	ldr	r3, [pc, #156]	; (d104 <hif_receive+0xc4>)
    d066:	4798      	blx	r3
    d068:	4827      	ldr	r0, [pc, #156]	; (d108 <hif_receive+0xc8>)
    d06a:	4b28      	ldr	r3, [pc, #160]	; (d10c <hif_receive+0xcc>)
    d06c:	4798      	blx	r3
    d06e:	200d      	movs	r0, #13
    d070:	4b27      	ldr	r3, [pc, #156]	; (d110 <hif_receive+0xd0>)
    d072:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d074:	200c      	movs	r0, #12
    d076:	4240      	negs	r0, r0
    d078:	e7ef      	b.n	d05a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    d07a:	4b26      	ldr	r3, [pc, #152]	; (d114 <hif_receive+0xd4>)
    d07c:	68db      	ldr	r3, [r3, #12]
    d07e:	429a      	cmp	r2, r3
    d080:	d81a      	bhi.n	d0b8 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d082:	4b24      	ldr	r3, [pc, #144]	; (d114 <hif_receive+0xd4>)
    d084:	689b      	ldr	r3, [r3, #8]
    d086:	4298      	cmp	r0, r3
    d088:	d327      	bcc.n	d0da <hif_receive+0x9a>
    d08a:	1886      	adds	r6, r0, r2
    d08c:	4a21      	ldr	r2, [pc, #132]	; (d114 <hif_receive+0xd4>)
    d08e:	6893      	ldr	r3, [r2, #8]
    d090:	68d2      	ldr	r2, [r2, #12]
    d092:	189b      	adds	r3, r3, r2
    d094:	429e      	cmp	r6, r3
    d096:	d820      	bhi.n	d0da <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d098:	0022      	movs	r2, r4
    d09a:	4b1f      	ldr	r3, [pc, #124]	; (d118 <hif_receive+0xd8>)
    d09c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    d09e:	2800      	cmp	r0, #0
    d0a0:	d1db      	bne.n	d05a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d0a2:	4a1c      	ldr	r2, [pc, #112]	; (d114 <hif_receive+0xd4>)
    d0a4:	6893      	ldr	r3, [r2, #8]
    d0a6:	68d2      	ldr	r2, [r2, #12]
    d0a8:	189b      	adds	r3, r3, r2
    d0aa:	429e      	cmp	r6, r3
    d0ac:	d001      	beq.n	d0b2 <hif_receive+0x72>
    d0ae:	2d00      	cmp	r5, #0
    d0b0:	d0d3      	beq.n	d05a <hif_receive+0x1a>
		ret = hif_set_rx_done();
    d0b2:	4b11      	ldr	r3, [pc, #68]	; (d0f8 <hif_receive+0xb8>)
    d0b4:	4798      	blx	r3
    d0b6:	e7d0      	b.n	d05a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d0b8:	22a0      	movs	r2, #160	; 0xa0
    d0ba:	0092      	lsls	r2, r2, #2
    d0bc:	490f      	ldr	r1, [pc, #60]	; (d0fc <hif_receive+0xbc>)
    d0be:	4810      	ldr	r0, [pc, #64]	; (d100 <hif_receive+0xc0>)
    d0c0:	4d10      	ldr	r5, [pc, #64]	; (d104 <hif_receive+0xc4>)
    d0c2:	47a8      	blx	r5
    d0c4:	4b13      	ldr	r3, [pc, #76]	; (d114 <hif_receive+0xd4>)
    d0c6:	68da      	ldr	r2, [r3, #12]
    d0c8:	0021      	movs	r1, r4
    d0ca:	4814      	ldr	r0, [pc, #80]	; (d11c <hif_receive+0xdc>)
    d0cc:	47a8      	blx	r5
    d0ce:	200d      	movs	r0, #13
    d0d0:	4b0f      	ldr	r3, [pc, #60]	; (d110 <hif_receive+0xd0>)
    d0d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d0d4:	200c      	movs	r0, #12
    d0d6:	4240      	negs	r0, r0
		goto ERR1;
    d0d8:	e7bf      	b.n	d05a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d0da:	4a11      	ldr	r2, [pc, #68]	; (d120 <hif_receive+0xe0>)
    d0dc:	4907      	ldr	r1, [pc, #28]	; (d0fc <hif_receive+0xbc>)
    d0de:	4808      	ldr	r0, [pc, #32]	; (d100 <hif_receive+0xc0>)
    d0e0:	4b08      	ldr	r3, [pc, #32]	; (d104 <hif_receive+0xc4>)
    d0e2:	4798      	blx	r3
    d0e4:	480f      	ldr	r0, [pc, #60]	; (d124 <hif_receive+0xe4>)
    d0e6:	4b09      	ldr	r3, [pc, #36]	; (d10c <hif_receive+0xcc>)
    d0e8:	4798      	blx	r3
    d0ea:	200d      	movs	r0, #13
    d0ec:	4b08      	ldr	r3, [pc, #32]	; (d110 <hif_receive+0xd0>)
    d0ee:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d0f0:	200c      	movs	r0, #12
    d0f2:	4240      	negs	r0, r0
		goto ERR1;
    d0f4:	e7b1      	b.n	d05a <hif_receive+0x1a>
    d0f6:	46c0      	nop			; (mov r8, r8)
    d0f8:	0000c955 	.word	0x0000c955
    d0fc:	00018814 	.word	0x00018814
    d100:	000187a8 	.word	0x000187a8
    d104:	00017111 	.word	0x00017111
    d108:	00018a20 	.word	0x00018a20
    d10c:	0001722d 	.word	0x0001722d
    d110:	00017145 	.word	0x00017145
    d114:	2000137c 	.word	0x2000137c
    d118:	0000dd7d 	.word	0x0000dd7d
    d11c:	00018a40 	.word	0x00018a40
    d120:	00000286 	.word	0x00000286
    d124:	00018a88 	.word	0x00018a88

0000d128 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d128:	b570      	push	{r4, r5, r6, lr}
    d12a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    d12c:	2807      	cmp	r0, #7
    d12e:	d81f      	bhi.n	d170 <hif_register_cb+0x48>
    d130:	0083      	lsls	r3, r0, #2
    d132:	4a16      	ldr	r2, [pc, #88]	; (d18c <hif_register_cb+0x64>)
    d134:	58d3      	ldr	r3, [r2, r3]
    d136:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d138:	4b15      	ldr	r3, [pc, #84]	; (d190 <hif_register_cb+0x68>)
    d13a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    d13c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    d13e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    d140:	4b13      	ldr	r3, [pc, #76]	; (d190 <hif_register_cb+0x68>)
    d142:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    d144:	2000      	movs	r0, #0
			break;
    d146:	e7fa      	b.n	d13e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    d148:	4b11      	ldr	r3, [pc, #68]	; (d190 <hif_register_cb+0x68>)
    d14a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    d14c:	2000      	movs	r0, #0
			break;
    d14e:	e7f6      	b.n	d13e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    d150:	4b0f      	ldr	r3, [pc, #60]	; (d190 <hif_register_cb+0x68>)
    d152:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    d154:	2000      	movs	r0, #0
			break;
    d156:	e7f2      	b.n	d13e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    d158:	4b0d      	ldr	r3, [pc, #52]	; (d190 <hif_register_cb+0x68>)
    d15a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    d15c:	2000      	movs	r0, #0
			break;
    d15e:	e7ee      	b.n	d13e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    d160:	4b0b      	ldr	r3, [pc, #44]	; (d190 <hif_register_cb+0x68>)
    d162:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    d164:	2000      	movs	r0, #0
			break;
    d166:	e7ea      	b.n	d13e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    d168:	4b09      	ldr	r3, [pc, #36]	; (d190 <hif_register_cb+0x68>)
    d16a:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    d16c:	2000      	movs	r0, #0
			break;
    d16e:	e7e6      	b.n	d13e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    d170:	4a08      	ldr	r2, [pc, #32]	; (d194 <hif_register_cb+0x6c>)
    d172:	4909      	ldr	r1, [pc, #36]	; (d198 <hif_register_cb+0x70>)
    d174:	4809      	ldr	r0, [pc, #36]	; (d19c <hif_register_cb+0x74>)
    d176:	4d0a      	ldr	r5, [pc, #40]	; (d1a0 <hif_register_cb+0x78>)
    d178:	47a8      	blx	r5
    d17a:	0021      	movs	r1, r4
    d17c:	4809      	ldr	r0, [pc, #36]	; (d1a4 <hif_register_cb+0x7c>)
    d17e:	47a8      	blx	r5
    d180:	200d      	movs	r0, #13
    d182:	4b09      	ldr	r3, [pc, #36]	; (d1a8 <hif_register_cb+0x80>)
    d184:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d186:	200c      	movs	r0, #12
    d188:	4240      	negs	r0, r0
			break;
    d18a:	e7d8      	b.n	d13e <hif_register_cb+0x16>
    d18c:	000187d0 	.word	0x000187d0
    d190:	2000137c 	.word	0x2000137c
    d194:	000002be 	.word	0x000002be
    d198:	00018820 	.word	0x00018820
    d19c:	000187a8 	.word	0x000187a8
    d1a0:	00017111 	.word	0x00017111
    d1a4:	00018acc 	.word	0x00018acc
    d1a8:	00017145 	.word	0x00017145

0000d1ac <hif_init>:
{
    d1ac:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    d1ae:	222c      	movs	r2, #44	; 0x2c
    d1b0:	2100      	movs	r1, #0
    d1b2:	4806      	ldr	r0, [pc, #24]	; (d1cc <hif_init+0x20>)
    d1b4:	4b06      	ldr	r3, [pc, #24]	; (d1d0 <hif_init+0x24>)
    d1b6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    d1b8:	4806      	ldr	r0, [pc, #24]	; (d1d4 <hif_init+0x28>)
    d1ba:	4b07      	ldr	r3, [pc, #28]	; (d1d8 <hif_init+0x2c>)
    d1bc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    d1be:	4907      	ldr	r1, [pc, #28]	; (d1dc <hif_init+0x30>)
    d1c0:	2003      	movs	r0, #3
    d1c2:	4b07      	ldr	r3, [pc, #28]	; (d1e0 <hif_init+0x34>)
    d1c4:	4798      	blx	r3
}
    d1c6:	2000      	movs	r0, #0
    d1c8:	bd10      	pop	{r4, pc}
    d1ca:	46c0      	nop			; (mov r8, r8)
    d1cc:	2000137c 	.word	0x2000137c
    d1d0:	0000c915 	.word	0x0000c915
    d1d4:	0000c941 	.word	0x0000c941
    d1d8:	0000c5c9 	.word	0x0000c5c9
    d1dc:	0000c951 	.word	0x0000c951
    d1e0:	0000d129 	.word	0x0000d129

0000d1e4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d1e4:	b530      	push	{r4, r5, lr}
    d1e6:	b09f      	sub	sp, #124	; 0x7c
    d1e8:	0004      	movs	r4, r0
    d1ea:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d1ec:	282c      	cmp	r0, #44	; 0x2c
    d1ee:	d02f      	beq.n	d250 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d1f0:	281b      	cmp	r0, #27
    d1f2:	d03d      	beq.n	d270 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d1f4:	2806      	cmp	r0, #6
    d1f6:	d04b      	beq.n	d290 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d1f8:	280e      	cmp	r0, #14
    d1fa:	d027      	beq.n	d24c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d1fc:	2832      	cmp	r0, #50	; 0x32
    d1fe:	d057      	beq.n	d2b0 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d200:	282f      	cmp	r0, #47	; 0x2f
    d202:	d065      	beq.n	d2d0 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d204:	2834      	cmp	r0, #52	; 0x34
    d206:	d100      	bne.n	d20a <m2m_wifi_cb+0x26>
    d208:	e077      	b.n	d2fa <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d20a:	2811      	cmp	r0, #17
    d20c:	d100      	bne.n	d210 <m2m_wifi_cb+0x2c>
    d20e:	e096      	b.n	d33e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d210:	2813      	cmp	r0, #19
    d212:	d100      	bne.n	d216 <m2m_wifi_cb+0x32>
    d214:	e0ac      	b.n	d370 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d216:	2804      	cmp	r0, #4
    d218:	d100      	bne.n	d21c <m2m_wifi_cb+0x38>
    d21a:	e0bb      	b.n	d394 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d21c:	2865      	cmp	r0, #101	; 0x65
    d21e:	d100      	bne.n	d222 <m2m_wifi_cb+0x3e>
    d220:	e0ca      	b.n	d3b8 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d222:	2809      	cmp	r0, #9
    d224:	d100      	bne.n	d228 <m2m_wifi_cb+0x44>
    d226:	e0d9      	b.n	d3dc <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d228:	282a      	cmp	r0, #42	; 0x2a
    d22a:	d100      	bne.n	d22e <m2m_wifi_cb+0x4a>
    d22c:	e0e8      	b.n	d400 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d22e:	2820      	cmp	r0, #32
    d230:	d100      	bne.n	d234 <m2m_wifi_cb+0x50>
    d232:	e0f7      	b.n	d424 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d234:	2224      	movs	r2, #36	; 0x24
    d236:	32ff      	adds	r2, #255	; 0xff
    d238:	4989      	ldr	r1, [pc, #548]	; (d460 <m2m_wifi_cb+0x27c>)
    d23a:	488a      	ldr	r0, [pc, #552]	; (d464 <m2m_wifi_cb+0x280>)
    d23c:	4d8a      	ldr	r5, [pc, #552]	; (d468 <m2m_wifi_cb+0x284>)
    d23e:	47a8      	blx	r5
    d240:	0021      	movs	r1, r4
    d242:	488a      	ldr	r0, [pc, #552]	; (d46c <m2m_wifi_cb+0x288>)
    d244:	47a8      	blx	r5
    d246:	200d      	movs	r0, #13
    d248:	4b89      	ldr	r3, [pc, #548]	; (d470 <m2m_wifi_cb+0x28c>)
    d24a:	4798      	blx	r3
	}
}
    d24c:	b01f      	add	sp, #124	; 0x7c
    d24e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d250:	2300      	movs	r3, #0
    d252:	2204      	movs	r2, #4
    d254:	a903      	add	r1, sp, #12
    d256:	0028      	movs	r0, r5
    d258:	4c86      	ldr	r4, [pc, #536]	; (d474 <m2m_wifi_cb+0x290>)
    d25a:	47a0      	blx	r4
    d25c:	2800      	cmp	r0, #0
    d25e:	d1f5      	bne.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d260:	4b85      	ldr	r3, [pc, #532]	; (d478 <m2m_wifi_cb+0x294>)
    d262:	681b      	ldr	r3, [r3, #0]
    d264:	2b00      	cmp	r3, #0
    d266:	d0f1      	beq.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d268:	a903      	add	r1, sp, #12
    d26a:	302c      	adds	r0, #44	; 0x2c
    d26c:	4798      	blx	r3
    d26e:	e7ed      	b.n	d24c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d270:	2300      	movs	r3, #0
    d272:	2208      	movs	r2, #8
    d274:	a903      	add	r1, sp, #12
    d276:	0028      	movs	r0, r5
    d278:	4c7e      	ldr	r4, [pc, #504]	; (d474 <m2m_wifi_cb+0x290>)
    d27a:	47a0      	blx	r4
    d27c:	2800      	cmp	r0, #0
    d27e:	d1e5      	bne.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d280:	4b7d      	ldr	r3, [pc, #500]	; (d478 <m2m_wifi_cb+0x294>)
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	2b00      	cmp	r3, #0
    d286:	d0e1      	beq.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d288:	a903      	add	r1, sp, #12
    d28a:	301b      	adds	r0, #27
    d28c:	4798      	blx	r3
    d28e:	e7dd      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d290:	2301      	movs	r3, #1
    d292:	2230      	movs	r2, #48	; 0x30
    d294:	a903      	add	r1, sp, #12
    d296:	0028      	movs	r0, r5
    d298:	4c76      	ldr	r4, [pc, #472]	; (d474 <m2m_wifi_cb+0x290>)
    d29a:	47a0      	blx	r4
    d29c:	2800      	cmp	r0, #0
    d29e:	d1d5      	bne.n	d24c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d2a0:	4b75      	ldr	r3, [pc, #468]	; (d478 <m2m_wifi_cb+0x294>)
    d2a2:	681b      	ldr	r3, [r3, #0]
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d0d1      	beq.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d2a8:	a903      	add	r1, sp, #12
    d2aa:	3006      	adds	r0, #6
    d2ac:	4798      	blx	r3
    d2ae:	e7cd      	b.n	d24c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d2b0:	2300      	movs	r3, #0
    d2b2:	2218      	movs	r2, #24
    d2b4:	a903      	add	r1, sp, #12
    d2b6:	0028      	movs	r0, r5
    d2b8:	4c6e      	ldr	r4, [pc, #440]	; (d474 <m2m_wifi_cb+0x290>)
    d2ba:	47a0      	blx	r4
    d2bc:	2800      	cmp	r0, #0
    d2be:	d1c5      	bne.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d2c0:	4b6d      	ldr	r3, [pc, #436]	; (d478 <m2m_wifi_cb+0x294>)
    d2c2:	681b      	ldr	r3, [r3, #0]
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	d0c1      	beq.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d2c8:	a903      	add	r1, sp, #12
    d2ca:	3032      	adds	r0, #50	; 0x32
    d2cc:	4798      	blx	r3
    d2ce:	e7bd      	b.n	d24c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d2d0:	2264      	movs	r2, #100	; 0x64
    d2d2:	2100      	movs	r1, #0
    d2d4:	a803      	add	r0, sp, #12
    d2d6:	4b69      	ldr	r3, [pc, #420]	; (d47c <m2m_wifi_cb+0x298>)
    d2d8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d2da:	2300      	movs	r3, #0
    d2dc:	2264      	movs	r2, #100	; 0x64
    d2de:	a903      	add	r1, sp, #12
    d2e0:	0028      	movs	r0, r5
    d2e2:	4c64      	ldr	r4, [pc, #400]	; (d474 <m2m_wifi_cb+0x290>)
    d2e4:	47a0      	blx	r4
    d2e6:	2800      	cmp	r0, #0
    d2e8:	d1b0      	bne.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d2ea:	4b63      	ldr	r3, [pc, #396]	; (d478 <m2m_wifi_cb+0x294>)
    d2ec:	681b      	ldr	r3, [r3, #0]
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d0ac      	beq.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d2f2:	a903      	add	r1, sp, #12
    d2f4:	302f      	adds	r0, #47	; 0x2f
    d2f6:	4798      	blx	r3
    d2f8:	e7a8      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d2fa:	2300      	movs	r3, #0
    d2fc:	2204      	movs	r2, #4
    d2fe:	a903      	add	r1, sp, #12
    d300:	0028      	movs	r0, r5
    d302:	4c5c      	ldr	r4, [pc, #368]	; (d474 <m2m_wifi_cb+0x290>)
    d304:	47a0      	blx	r4
    d306:	2800      	cmp	r0, #0
    d308:	d1a0      	bne.n	d24c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d30a:	485d      	ldr	r0, [pc, #372]	; (d480 <m2m_wifi_cb+0x29c>)
    d30c:	4d56      	ldr	r5, [pc, #344]	; (d468 <m2m_wifi_cb+0x284>)
    d30e:	47a8      	blx	r5
    d310:	9c03      	ldr	r4, [sp, #12]
    d312:	0a23      	lsrs	r3, r4, #8
    d314:	20ff      	movs	r0, #255	; 0xff
    d316:	4003      	ands	r3, r0
    d318:	0c22      	lsrs	r2, r4, #16
    d31a:	4002      	ands	r2, r0
    d31c:	0e21      	lsrs	r1, r4, #24
    d31e:	4020      	ands	r0, r4
    d320:	9000      	str	r0, [sp, #0]
    d322:	4858      	ldr	r0, [pc, #352]	; (d484 <m2m_wifi_cb+0x2a0>)
    d324:	47a8      	blx	r5
    d326:	200d      	movs	r0, #13
    d328:	4b51      	ldr	r3, [pc, #324]	; (d470 <m2m_wifi_cb+0x28c>)
    d32a:	4798      	blx	r3
			if (gpfAppWifiCb)
    d32c:	4b52      	ldr	r3, [pc, #328]	; (d478 <m2m_wifi_cb+0x294>)
    d32e:	681b      	ldr	r3, [r3, #0]
    d330:	2b00      	cmp	r3, #0
    d332:	d100      	bne.n	d336 <m2m_wifi_cb+0x152>
    d334:	e78a      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d336:	2100      	movs	r1, #0
    d338:	2034      	movs	r0, #52	; 0x34
    d33a:	4798      	blx	r3
    d33c:	e786      	b.n	d24c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    d33e:	2200      	movs	r2, #0
    d340:	4b51      	ldr	r3, [pc, #324]	; (d488 <m2m_wifi_cb+0x2a4>)
    d342:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d344:	2300      	movs	r3, #0
    d346:	3204      	adds	r2, #4
    d348:	a903      	add	r1, sp, #12
    d34a:	0028      	movs	r0, r5
    d34c:	4c49      	ldr	r4, [pc, #292]	; (d474 <m2m_wifi_cb+0x290>)
    d34e:	47a0      	blx	r4
    d350:	2800      	cmp	r0, #0
    d352:	d000      	beq.n	d356 <m2m_wifi_cb+0x172>
    d354:	e77a      	b.n	d24c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    d356:	ab03      	add	r3, sp, #12
    d358:	781a      	ldrb	r2, [r3, #0]
    d35a:	4b4c      	ldr	r3, [pc, #304]	; (d48c <m2m_wifi_cb+0x2a8>)
    d35c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d35e:	4b46      	ldr	r3, [pc, #280]	; (d478 <m2m_wifi_cb+0x294>)
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	2b00      	cmp	r3, #0
    d364:	d100      	bne.n	d368 <m2m_wifi_cb+0x184>
    d366:	e771      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d368:	a903      	add	r1, sp, #12
    d36a:	3011      	adds	r0, #17
    d36c:	4798      	blx	r3
    d36e:	e76d      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d370:	2300      	movs	r3, #0
    d372:	222c      	movs	r2, #44	; 0x2c
    d374:	a903      	add	r1, sp, #12
    d376:	0028      	movs	r0, r5
    d378:	4c3e      	ldr	r4, [pc, #248]	; (d474 <m2m_wifi_cb+0x290>)
    d37a:	47a0      	blx	r4
    d37c:	2800      	cmp	r0, #0
    d37e:	d000      	beq.n	d382 <m2m_wifi_cb+0x19e>
    d380:	e764      	b.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d382:	4b3d      	ldr	r3, [pc, #244]	; (d478 <m2m_wifi_cb+0x294>)
    d384:	681b      	ldr	r3, [r3, #0]
    d386:	2b00      	cmp	r3, #0
    d388:	d100      	bne.n	d38c <m2m_wifi_cb+0x1a8>
    d38a:	e75f      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d38c:	a903      	add	r1, sp, #12
    d38e:	3013      	adds	r0, #19
    d390:	4798      	blx	r3
    d392:	e75b      	b.n	d24c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d394:	2300      	movs	r3, #0
    d396:	2204      	movs	r2, #4
    d398:	a91c      	add	r1, sp, #112	; 0x70
    d39a:	0028      	movs	r0, r5
    d39c:	4c35      	ldr	r4, [pc, #212]	; (d474 <m2m_wifi_cb+0x290>)
    d39e:	47a0      	blx	r4
    d3a0:	2800      	cmp	r0, #0
    d3a2:	d000      	beq.n	d3a6 <m2m_wifi_cb+0x1c2>
    d3a4:	e752      	b.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d3a6:	4b34      	ldr	r3, [pc, #208]	; (d478 <m2m_wifi_cb+0x294>)
    d3a8:	681b      	ldr	r3, [r3, #0]
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d100      	bne.n	d3b0 <m2m_wifi_cb+0x1cc>
    d3ae:	e74d      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d3b0:	a91c      	add	r1, sp, #112	; 0x70
    d3b2:	3004      	adds	r0, #4
    d3b4:	4798      	blx	r3
    d3b6:	e749      	b.n	d24c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d3b8:	2300      	movs	r3, #0
    d3ba:	2204      	movs	r2, #4
    d3bc:	a91c      	add	r1, sp, #112	; 0x70
    d3be:	0028      	movs	r0, r5
    d3c0:	4c2c      	ldr	r4, [pc, #176]	; (d474 <m2m_wifi_cb+0x290>)
    d3c2:	47a0      	blx	r4
    d3c4:	2800      	cmp	r0, #0
    d3c6:	d000      	beq.n	d3ca <m2m_wifi_cb+0x1e6>
    d3c8:	e740      	b.n	d24c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    d3ca:	4b2b      	ldr	r3, [pc, #172]	; (d478 <m2m_wifi_cb+0x294>)
    d3cc:	681b      	ldr	r3, [r3, #0]
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d100      	bne.n	d3d4 <m2m_wifi_cb+0x1f0>
    d3d2:	e73b      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d3d4:	a91c      	add	r1, sp, #112	; 0x70
    d3d6:	3065      	adds	r0, #101	; 0x65
    d3d8:	4798      	blx	r3
    d3da:	e737      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d3dc:	2301      	movs	r3, #1
    d3de:	2264      	movs	r2, #100	; 0x64
    d3e0:	a903      	add	r1, sp, #12
    d3e2:	0028      	movs	r0, r5
    d3e4:	4c23      	ldr	r4, [pc, #140]	; (d474 <m2m_wifi_cb+0x290>)
    d3e6:	47a0      	blx	r4
    d3e8:	2800      	cmp	r0, #0
    d3ea:	d000      	beq.n	d3ee <m2m_wifi_cb+0x20a>
    d3ec:	e72e      	b.n	d24c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d3ee:	4b22      	ldr	r3, [pc, #136]	; (d478 <m2m_wifi_cb+0x294>)
    d3f0:	681b      	ldr	r3, [r3, #0]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d100      	bne.n	d3f8 <m2m_wifi_cb+0x214>
    d3f6:	e729      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d3f8:	a903      	add	r1, sp, #12
    d3fa:	3009      	adds	r0, #9
    d3fc:	4798      	blx	r3
    d3fe:	e725      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d400:	2301      	movs	r3, #1
    d402:	2204      	movs	r2, #4
    d404:	a903      	add	r1, sp, #12
    d406:	0028      	movs	r0, r5
    d408:	4c1a      	ldr	r4, [pc, #104]	; (d474 <m2m_wifi_cb+0x290>)
    d40a:	47a0      	blx	r4
    d40c:	2800      	cmp	r0, #0
    d40e:	d000      	beq.n	d412 <m2m_wifi_cb+0x22e>
    d410:	e71c      	b.n	d24c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    d412:	4b19      	ldr	r3, [pc, #100]	; (d478 <m2m_wifi_cb+0x294>)
    d414:	681b      	ldr	r3, [r3, #0]
    d416:	2b00      	cmp	r3, #0
    d418:	d100      	bne.n	d41c <m2m_wifi_cb+0x238>
    d41a:	e717      	b.n	d24c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d41c:	a903      	add	r1, sp, #12
    d41e:	302a      	adds	r0, #42	; 0x2a
    d420:	4798      	blx	r3
    d422:	e713      	b.n	d24c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d424:	2300      	movs	r3, #0
    d426:	2208      	movs	r2, #8
    d428:	a903      	add	r1, sp, #12
    d42a:	0028      	movs	r0, r5
    d42c:	4c11      	ldr	r4, [pc, #68]	; (d474 <m2m_wifi_cb+0x290>)
    d42e:	47a0      	blx	r4
    d430:	2800      	cmp	r0, #0
    d432:	d000      	beq.n	d436 <m2m_wifi_cb+0x252>
    d434:	e70a      	b.n	d24c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d436:	ab03      	add	r3, sp, #12
    d438:	889a      	ldrh	r2, [r3, #4]
    d43a:	0028      	movs	r0, r5
    d43c:	3008      	adds	r0, #8
    d43e:	2301      	movs	r3, #1
    d440:	9903      	ldr	r1, [sp, #12]
    d442:	4c0c      	ldr	r4, [pc, #48]	; (d474 <m2m_wifi_cb+0x290>)
    d444:	47a0      	blx	r4
    d446:	2800      	cmp	r0, #0
    d448:	d000      	beq.n	d44c <m2m_wifi_cb+0x268>
    d44a:	e6ff      	b.n	d24c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    d44c:	4b0a      	ldr	r3, [pc, #40]	; (d478 <m2m_wifi_cb+0x294>)
    d44e:	681b      	ldr	r3, [r3, #0]
    d450:	2b00      	cmp	r3, #0
    d452:	d100      	bne.n	d456 <m2m_wifi_cb+0x272>
    d454:	e6fa      	b.n	d24c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d456:	a903      	add	r1, sp, #12
    d458:	3020      	adds	r0, #32
    d45a:	4798      	blx	r3
    d45c:	e6f6      	b.n	d24c <m2m_wifi_cb+0x68>
    d45e:	46c0      	nop			; (mov r8, r8)
    d460:	00018b10 	.word	0x00018b10
    d464:	000187a8 	.word	0x000187a8
    d468:	00017111 	.word	0x00017111
    d46c:	00018b60 	.word	0x00018b60
    d470:	00017145 	.word	0x00017145
    d474:	0000d041 	.word	0x0000d041
    d478:	200003c4 	.word	0x200003c4
    d47c:	0000c915 	.word	0x0000c915
    d480:	00018ad8 	.word	0x00018ad8
    d484:	00018b40 	.word	0x00018b40
    d488:	200003c9 	.word	0x200003c9
    d48c:	200003c8 	.word	0x200003c8

0000d490 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d490:	b5f0      	push	{r4, r5, r6, r7, lr}
    d492:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d494:	2201      	movs	r2, #1
    d496:	230f      	movs	r3, #15
    d498:	446b      	add	r3, sp
    d49a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d49c:	2800      	cmp	r0, #0
    d49e:	d061      	beq.n	d564 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d4a0:	6802      	ldr	r2, [r0, #0]
    d4a2:	4b32      	ldr	r3, [pc, #200]	; (d56c <m2m_wifi_init+0xdc>)
    d4a4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d4a6:	2200      	movs	r2, #0
    d4a8:	4b31      	ldr	r3, [pc, #196]	; (d570 <m2m_wifi_init+0xe0>)
    d4aa:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d4ac:	200f      	movs	r0, #15
    d4ae:	4468      	add	r0, sp
    d4b0:	4b30      	ldr	r3, [pc, #192]	; (d574 <m2m_wifi_init+0xe4>)
    d4b2:	4798      	blx	r3
    d4b4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d4b6:	d002      	beq.n	d4be <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    d4b8:	0020      	movs	r0, r4
    d4ba:	b00f      	add	sp, #60	; 0x3c
    d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    d4be:	2000      	movs	r0, #0
    d4c0:	4b2d      	ldr	r3, [pc, #180]	; (d578 <m2m_wifi_init+0xe8>)
    d4c2:	4798      	blx	r3
    d4c4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d4c6:	d149      	bne.n	d55c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    d4c8:	492c      	ldr	r1, [pc, #176]	; (d57c <m2m_wifi_init+0xec>)
    d4ca:	2001      	movs	r0, #1
    d4cc:	4b2c      	ldr	r3, [pc, #176]	; (d580 <m2m_wifi_init+0xf0>)
    d4ce:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    d4d0:	ae04      	add	r6, sp, #16
    d4d2:	0030      	movs	r0, r6
    d4d4:	4b2b      	ldr	r3, [pc, #172]	; (d584 <m2m_wifi_init+0xf4>)
    d4d6:	4798      	blx	r3
    d4d8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    d4da:	482b      	ldr	r0, [pc, #172]	; (d588 <m2m_wifi_init+0xf8>)
    d4dc:	4d2b      	ldr	r5, [pc, #172]	; (d58c <m2m_wifi_init+0xfc>)
    d4de:	47a8      	blx	r5
    d4e0:	79b3      	ldrb	r3, [r6, #6]
    d4e2:	7972      	ldrb	r2, [r6, #5]
    d4e4:	7931      	ldrb	r1, [r6, #4]
    d4e6:	8c30      	ldrh	r0, [r6, #32]
    d4e8:	9000      	str	r0, [sp, #0]
    d4ea:	4829      	ldr	r0, [pc, #164]	; (d590 <m2m_wifi_init+0x100>)
    d4ec:	47a8      	blx	r5
    d4ee:	200d      	movs	r0, #13
    d4f0:	4f28      	ldr	r7, [pc, #160]	; (d594 <m2m_wifi_init+0x104>)
    d4f2:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    d4f4:	4824      	ldr	r0, [pc, #144]	; (d588 <m2m_wifi_init+0xf8>)
    d4f6:	47a8      	blx	r5
    d4f8:	2226      	movs	r2, #38	; 0x26
    d4fa:	446a      	add	r2, sp
    d4fc:	211a      	movs	r1, #26
    d4fe:	4469      	add	r1, sp
    d500:	4825      	ldr	r0, [pc, #148]	; (d598 <m2m_wifi_init+0x108>)
    d502:	47a8      	blx	r5
    d504:	200d      	movs	r0, #13
    d506:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    d508:	481f      	ldr	r0, [pc, #124]	; (d588 <m2m_wifi_init+0xf8>)
    d50a:	47a8      	blx	r5
    d50c:	7a73      	ldrb	r3, [r6, #9]
    d50e:	7a32      	ldrb	r2, [r6, #8]
    d510:	79f1      	ldrb	r1, [r6, #7]
    d512:	4822      	ldr	r0, [pc, #136]	; (d59c <m2m_wifi_init+0x10c>)
    d514:	47a8      	blx	r5
    d516:	200d      	movs	r0, #13
    d518:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    d51a:	481b      	ldr	r0, [pc, #108]	; (d588 <m2m_wifi_init+0xf8>)
    d51c:	47a8      	blx	r5
    d51e:	2304      	movs	r3, #4
    d520:	2205      	movs	r2, #5
    d522:	2113      	movs	r1, #19
    d524:	481e      	ldr	r0, [pc, #120]	; (d5a0 <m2m_wifi_init+0x110>)
    d526:	47a8      	blx	r5
    d528:	200d      	movs	r0, #13
    d52a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    d52c:	4816      	ldr	r0, [pc, #88]	; (d588 <m2m_wifi_init+0xf8>)
    d52e:	47a8      	blx	r5
    d530:	4a1c      	ldr	r2, [pc, #112]	; (d5a4 <m2m_wifi_init+0x114>)
    d532:	491d      	ldr	r1, [pc, #116]	; (d5a8 <m2m_wifi_init+0x118>)
    d534:	481d      	ldr	r0, [pc, #116]	; (d5ac <m2m_wifi_init+0x11c>)
    d536:	47a8      	blx	r5
    d538:	200d      	movs	r0, #13
    d53a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    d53c:	0023      	movs	r3, r4
    d53e:	330d      	adds	r3, #13
    d540:	d1ba      	bne.n	d4b8 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    d542:	22e8      	movs	r2, #232	; 0xe8
    d544:	32ff      	adds	r2, #255	; 0xff
    d546:	491a      	ldr	r1, [pc, #104]	; (d5b0 <m2m_wifi_init+0x120>)
    d548:	481a      	ldr	r0, [pc, #104]	; (d5b4 <m2m_wifi_init+0x124>)
    d54a:	4b10      	ldr	r3, [pc, #64]	; (d58c <m2m_wifi_init+0xfc>)
    d54c:	4798      	blx	r3
    d54e:	481a      	ldr	r0, [pc, #104]	; (d5b8 <m2m_wifi_init+0x128>)
    d550:	4b1a      	ldr	r3, [pc, #104]	; (d5bc <m2m_wifi_init+0x12c>)
    d552:	4798      	blx	r3
    d554:	200d      	movs	r0, #13
    d556:	4b0f      	ldr	r3, [pc, #60]	; (d594 <m2m_wifi_init+0x104>)
    d558:	4798      	blx	r3
    d55a:	e7ad      	b.n	d4b8 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    d55c:	2000      	movs	r0, #0
    d55e:	4b18      	ldr	r3, [pc, #96]	; (d5c0 <m2m_wifi_init+0x130>)
    d560:	4798      	blx	r3
    d562:	e7a9      	b.n	d4b8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    d564:	240c      	movs	r4, #12
    d566:	4264      	negs	r4, r4
    d568:	e7a6      	b.n	d4b8 <m2m_wifi_init+0x28>
    d56a:	46c0      	nop			; (mov r8, r8)
    d56c:	200003c4 	.word	0x200003c4
    d570:	200003c9 	.word	0x200003c9
    d574:	0000df31 	.word	0x0000df31
    d578:	0000d1ad 	.word	0x0000d1ad
    d57c:	0000d1e5 	.word	0x0000d1e5
    d580:	0000d129 	.word	0x0000d129
    d584:	0000de4d 	.word	0x0000de4d
    d588:	00018ad8 	.word	0x00018ad8
    d58c:	00017111 	.word	0x00017111
    d590:	00018c1c 	.word	0x00018c1c
    d594:	00017145 	.word	0x00017145
    d598:	00018c44 	.word	0x00018c44
    d59c:	00018c60 	.word	0x00018c60
    d5a0:	00018c84 	.word	0x00018c84
    d5a4:	00018c9c 	.word	0x00018c9c
    d5a8:	00018ca8 	.word	0x00018ca8
    d5ac:	00018cb4 	.word	0x00018cb4
    d5b0:	00018b1c 	.word	0x00018b1c
    d5b4:	000187a8 	.word	0x000187a8
    d5b8:	00018ccc 	.word	0x00018ccc
    d5bc:	0001722d 	.word	0x0001722d
    d5c0:	0000e005 	.word	0x0000e005

0000d5c4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    d5c4:	b510      	push	{r4, lr}
	return hif_handle_isr();
    d5c6:	4b01      	ldr	r3, [pc, #4]	; (d5cc <m2m_wifi_handle_events+0x8>)
    d5c8:	4798      	blx	r3
}
    d5ca:	bd10      	pop	{r4, pc}
    d5cc:	0000cc59 	.word	0x0000cc59

0000d5d0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d2:	46ce      	mov	lr, r9
    d5d4:	4647      	mov	r7, r8
    d5d6:	b580      	push	{r7, lr}
    d5d8:	b0a3      	sub	sp, #140	; 0x8c
    d5da:	9005      	str	r0, [sp, #20]
    d5dc:	000c      	movs	r4, r1
    d5de:	0015      	movs	r5, r2
    d5e0:	001f      	movs	r7, r3
    d5e2:	ab2a      	add	r3, sp, #168	; 0xa8
    d5e4:	881b      	ldrh	r3, [r3, #0]
    d5e6:	4699      	mov	r9, r3
    d5e8:	ab2b      	add	r3, sp, #172	; 0xac
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    d5ee:	2a01      	cmp	r2, #1
    d5f0:	d003      	beq.n	d5fa <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    d5f2:	2f00      	cmp	r7, #0
    d5f4:	d040      	beq.n	d678 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d5f6:	2a02      	cmp	r2, #2
    d5f8:	d04c      	beq.n	d694 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    d5fa:	1e63      	subs	r3, r4, #1
    d5fc:	2b1f      	cmp	r3, #31
    d5fe:	d900      	bls.n	d602 <m2m_wifi_connect_sc+0x32>
    d600:	e078      	b.n	d6f4 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    d602:	464b      	mov	r3, r9
    d604:	3b01      	subs	r3, #1
    d606:	b29b      	uxth	r3, r3
    d608:	2b0d      	cmp	r3, #13
    d60a:	d903      	bls.n	d614 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    d60c:	464b      	mov	r3, r9
    d60e:	2bff      	cmp	r3, #255	; 0xff
    d610:	d000      	beq.n	d614 <m2m_wifi_connect_sc+0x44>
    d612:	e07e      	b.n	d712 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    d614:	ae07      	add	r6, sp, #28
    d616:	0022      	movs	r2, r4
    d618:	9905      	ldr	r1, [sp, #20]
    d61a:	205a      	movs	r0, #90	; 0x5a
    d61c:	ab02      	add	r3, sp, #8
    d61e:	469c      	mov	ip, r3
    d620:	4460      	add	r0, ip
    d622:	4b79      	ldr	r3, [pc, #484]	; (d808 <m2m_wifi_connect_sc+0x238>)
    d624:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    d626:	1934      	adds	r4, r6, r4
    d628:	3446      	adds	r4, #70	; 0x46
    d62a:	2300      	movs	r3, #0
    d62c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    d62e:	3344      	adds	r3, #68	; 0x44
    d630:	464a      	mov	r2, r9
    d632:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    d634:	4643      	mov	r3, r8
    d636:	1e5a      	subs	r2, r3, #1
    d638:	4193      	sbcs	r3, r2
    d63a:	2267      	movs	r2, #103	; 0x67
    d63c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    d63e:	2341      	movs	r3, #65	; 0x41
    d640:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    d642:	2d03      	cmp	r5, #3
    d644:	d100      	bne.n	d648 <m2m_wifi_connect_sc+0x78>
    d646:	e072      	b.n	d72e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    d648:	2d02      	cmp	r5, #2
    d64a:	d100      	bne.n	d64e <m2m_wifi_connect_sc+0x7e>
    d64c:	e0ac      	b.n	d7a8 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    d64e:	2d04      	cmp	r5, #4
    d650:	d100      	bne.n	d654 <m2m_wifi_connect_sc+0x84>
    d652:	e0c4      	b.n	d7de <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    d654:	2d01      	cmp	r5, #1
    d656:	d000      	beq.n	d65a <m2m_wifi_connect_sc+0x8a>
    d658:	e0c7      	b.n	d7ea <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    d65a:	2300      	movs	r3, #0
    d65c:	9302      	str	r3, [sp, #8]
    d65e:	9301      	str	r3, [sp, #4]
    d660:	9300      	str	r3, [sp, #0]
    d662:	336c      	adds	r3, #108	; 0x6c
    d664:	aa07      	add	r2, sp, #28
    d666:	2128      	movs	r1, #40	; 0x28
    d668:	2001      	movs	r0, #1
    d66a:	4c68      	ldr	r4, [pc, #416]	; (d80c <m2m_wifi_connect_sc+0x23c>)
    d66c:	47a0      	blx	r4

ERR1:
	return ret;
}
    d66e:	b023      	add	sp, #140	; 0x8c
    d670:	bc0c      	pop	{r2, r3}
    d672:	4690      	mov	r8, r2
    d674:	4699      	mov	r9, r3
    d676:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    d678:	4a65      	ldr	r2, [pc, #404]	; (d810 <m2m_wifi_connect_sc+0x240>)
    d67a:	4966      	ldr	r1, [pc, #408]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d67c:	4866      	ldr	r0, [pc, #408]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d67e:	4b67      	ldr	r3, [pc, #412]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d680:	4798      	blx	r3
    d682:	4867      	ldr	r0, [pc, #412]	; (d820 <m2m_wifi_connect_sc+0x250>)
    d684:	4b67      	ldr	r3, [pc, #412]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d686:	4798      	blx	r3
    d688:	200d      	movs	r0, #13
    d68a:	4b67      	ldr	r3, [pc, #412]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d68c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d68e:	200c      	movs	r0, #12
    d690:	4240      	negs	r0, r0
			goto ERR1;
    d692:	e7ec      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    d694:	0038      	movs	r0, r7
    d696:	4b65      	ldr	r3, [pc, #404]	; (d82c <m2m_wifi_connect_sc+0x25c>)
    d698:	4798      	blx	r3
    d69a:	2840      	cmp	r0, #64	; 0x40
    d69c:	d1ad      	bne.n	d5fa <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    d69e:	783b      	ldrb	r3, [r7, #0]
    d6a0:	001a      	movs	r2, r3
    d6a2:	3a30      	subs	r2, #48	; 0x30
    d6a4:	2a36      	cmp	r2, #54	; 0x36
    d6a6:	d817      	bhi.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6a8:	3a0a      	subs	r2, #10
    d6aa:	2a06      	cmp	r2, #6
    d6ac:	d914      	bls.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6ae:	3b47      	subs	r3, #71	; 0x47
    d6b0:	2b19      	cmp	r3, #25
    d6b2:	d911      	bls.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6b4:	1c7a      	adds	r2, r7, #1
    d6b6:	0038      	movs	r0, r7
    d6b8:	3040      	adds	r0, #64	; 0x40
    d6ba:	7813      	ldrb	r3, [r2, #0]
    d6bc:	0019      	movs	r1, r3
    d6be:	3930      	subs	r1, #48	; 0x30
    d6c0:	2936      	cmp	r1, #54	; 0x36
    d6c2:	d809      	bhi.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6c4:	390a      	subs	r1, #10
    d6c6:	2906      	cmp	r1, #6
    d6c8:	d906      	bls.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6ca:	3b47      	subs	r3, #71	; 0x47
    d6cc:	2b19      	cmp	r3, #25
    d6ce:	d903      	bls.n	d6d8 <m2m_wifi_connect_sc+0x108>
    d6d0:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    d6d2:	4282      	cmp	r2, r0
    d6d4:	d1f1      	bne.n	d6ba <m2m_wifi_connect_sc+0xea>
    d6d6:	e790      	b.n	d5fa <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    d6d8:	4a55      	ldr	r2, [pc, #340]	; (d830 <m2m_wifi_connect_sc+0x260>)
    d6da:	494e      	ldr	r1, [pc, #312]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d6dc:	484e      	ldr	r0, [pc, #312]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d6de:	4b4f      	ldr	r3, [pc, #316]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d6e0:	4798      	blx	r3
    d6e2:	4854      	ldr	r0, [pc, #336]	; (d834 <m2m_wifi_connect_sc+0x264>)
    d6e4:	4b4f      	ldr	r3, [pc, #316]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d6e6:	4798      	blx	r3
    d6e8:	200d      	movs	r0, #13
    d6ea:	4b4f      	ldr	r3, [pc, #316]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d6ec:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    d6ee:	200c      	movs	r0, #12
    d6f0:	4240      	negs	r0, r0
					goto ERR1;
    d6f2:	e7bc      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    d6f4:	228c      	movs	r2, #140	; 0x8c
    d6f6:	0092      	lsls	r2, r2, #2
    d6f8:	4946      	ldr	r1, [pc, #280]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d6fa:	4847      	ldr	r0, [pc, #284]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d6fc:	4b47      	ldr	r3, [pc, #284]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d6fe:	4798      	blx	r3
    d700:	484d      	ldr	r0, [pc, #308]	; (d838 <m2m_wifi_connect_sc+0x268>)
    d702:	4b48      	ldr	r3, [pc, #288]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d704:	4798      	blx	r3
    d706:	200d      	movs	r0, #13
    d708:	4b47      	ldr	r3, [pc, #284]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d70a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d70c:	200c      	movs	r0, #12
    d70e:	4240      	negs	r0, r0
		goto ERR1;
    d710:	e7ad      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    d712:	4a4a      	ldr	r2, [pc, #296]	; (d83c <m2m_wifi_connect_sc+0x26c>)
    d714:	493f      	ldr	r1, [pc, #252]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d716:	4840      	ldr	r0, [pc, #256]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d718:	4b40      	ldr	r3, [pc, #256]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d71a:	4798      	blx	r3
    d71c:	4848      	ldr	r0, [pc, #288]	; (d840 <m2m_wifi_connect_sc+0x270>)
    d71e:	4b41      	ldr	r3, [pc, #260]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d720:	4798      	blx	r3
    d722:	200d      	movs	r0, #13
    d724:	4b40      	ldr	r3, [pc, #256]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d726:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d728:	200c      	movs	r0, #12
    d72a:	4240      	negs	r0, r0
			goto ERR1;
    d72c:	e79f      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    d72e:	783b      	ldrb	r3, [r7, #0]
    d730:	3b01      	subs	r3, #1
    d732:	b2db      	uxtb	r3, r3
    d734:	aa07      	add	r2, sp, #28
    d736:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    d738:	2b03      	cmp	r3, #3
    d73a:	d817      	bhi.n	d76c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    d73c:	787a      	ldrb	r2, [r7, #1]
    d73e:	1e51      	subs	r1, r2, #1
    d740:	ab07      	add	r3, sp, #28
    d742:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    d744:	2310      	movs	r3, #16
    d746:	0011      	movs	r1, r2
    d748:	4399      	bics	r1, r3
    d74a:	290b      	cmp	r1, #11
    d74c:	d01e      	beq.n	d78c <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    d74e:	4a3d      	ldr	r2, [pc, #244]	; (d844 <m2m_wifi_connect_sc+0x274>)
    d750:	4930      	ldr	r1, [pc, #192]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d752:	4831      	ldr	r0, [pc, #196]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d754:	4c31      	ldr	r4, [pc, #196]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d756:	47a0      	blx	r4
    d758:	ab07      	add	r3, sp, #28
    d75a:	7859      	ldrb	r1, [r3, #1]
    d75c:	483a      	ldr	r0, [pc, #232]	; (d848 <m2m_wifi_connect_sc+0x278>)
    d75e:	47a0      	blx	r4
    d760:	200d      	movs	r0, #13
    d762:	4b31      	ldr	r3, [pc, #196]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d764:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d766:	200c      	movs	r0, #12
    d768:	4240      	negs	r0, r0
			goto ERR1;
    d76a:	e780      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    d76c:	2294      	movs	r2, #148	; 0x94
    d76e:	0092      	lsls	r2, r2, #2
    d770:	4928      	ldr	r1, [pc, #160]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d772:	4829      	ldr	r0, [pc, #164]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d774:	4c29      	ldr	r4, [pc, #164]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d776:	47a0      	blx	r4
    d778:	ab07      	add	r3, sp, #28
    d77a:	7819      	ldrb	r1, [r3, #0]
    d77c:	4833      	ldr	r0, [pc, #204]	; (d84c <m2m_wifi_connect_sc+0x27c>)
    d77e:	47a0      	blx	r4
    d780:	200d      	movs	r0, #13
    d782:	4b29      	ldr	r3, [pc, #164]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d784:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d786:	200c      	movs	r0, #12
    d788:	4240      	negs	r0, r0
			goto ERR1;
    d78a:	e770      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    d78c:	1cb9      	adds	r1, r7, #2
    d78e:	2016      	movs	r0, #22
    d790:	ab02      	add	r3, sp, #8
    d792:	469c      	mov	ip, r3
    d794:	4460      	add	r0, ip
    d796:	4b1c      	ldr	r3, [pc, #112]	; (d808 <m2m_wifi_connect_sc+0x238>)
    d798:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    d79a:	787b      	ldrb	r3, [r7, #1]
    d79c:	aa07      	add	r2, sp, #28
    d79e:	4694      	mov	ip, r2
    d7a0:	4463      	add	r3, ip
    d7a2:	2200      	movs	r2, #0
    d7a4:	709a      	strb	r2, [r3, #2]
    d7a6:	e758      	b.n	d65a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    d7a8:	0038      	movs	r0, r7
    d7aa:	4b20      	ldr	r3, [pc, #128]	; (d82c <m2m_wifi_connect_sc+0x25c>)
    d7ac:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    d7ae:	1e43      	subs	r3, r0, #1
    d7b0:	b29b      	uxth	r3, r3
    d7b2:	2b3f      	cmp	r3, #63	; 0x3f
    d7b4:	d805      	bhi.n	d7c2 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    d7b6:	1c42      	adds	r2, r0, #1
    d7b8:	0039      	movs	r1, r7
    d7ba:	a807      	add	r0, sp, #28
    d7bc:	4b12      	ldr	r3, [pc, #72]	; (d808 <m2m_wifi_connect_sc+0x238>)
    d7be:	4798      	blx	r3
    d7c0:	e74b      	b.n	d65a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    d7c2:	4a23      	ldr	r2, [pc, #140]	; (d850 <m2m_wifi_connect_sc+0x280>)
    d7c4:	4913      	ldr	r1, [pc, #76]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d7c6:	4814      	ldr	r0, [pc, #80]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d7c8:	4b14      	ldr	r3, [pc, #80]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d7ca:	4798      	blx	r3
    d7cc:	4821      	ldr	r0, [pc, #132]	; (d854 <m2m_wifi_connect_sc+0x284>)
    d7ce:	4b15      	ldr	r3, [pc, #84]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d7d0:	4798      	blx	r3
    d7d2:	200d      	movs	r0, #13
    d7d4:	4b14      	ldr	r3, [pc, #80]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d7d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d7d8:	200c      	movs	r0, #12
    d7da:	4240      	negs	r0, r0
			goto ERR1;
    d7dc:	e747      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    d7de:	223e      	movs	r2, #62	; 0x3e
    d7e0:	0039      	movs	r1, r7
    d7e2:	a807      	add	r0, sp, #28
    d7e4:	4b08      	ldr	r3, [pc, #32]	; (d808 <m2m_wifi_connect_sc+0x238>)
    d7e6:	4798      	blx	r3
    d7e8:	e737      	b.n	d65a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    d7ea:	4a1b      	ldr	r2, [pc, #108]	; (d858 <m2m_wifi_connect_sc+0x288>)
    d7ec:	4909      	ldr	r1, [pc, #36]	; (d814 <m2m_wifi_connect_sc+0x244>)
    d7ee:	480a      	ldr	r0, [pc, #40]	; (d818 <m2m_wifi_connect_sc+0x248>)
    d7f0:	4b0a      	ldr	r3, [pc, #40]	; (d81c <m2m_wifi_connect_sc+0x24c>)
    d7f2:	4798      	blx	r3
    d7f4:	4819      	ldr	r0, [pc, #100]	; (d85c <m2m_wifi_connect_sc+0x28c>)
    d7f6:	4b0b      	ldr	r3, [pc, #44]	; (d824 <m2m_wifi_connect_sc+0x254>)
    d7f8:	4798      	blx	r3
    d7fa:	200d      	movs	r0, #13
    d7fc:	4b0a      	ldr	r3, [pc, #40]	; (d828 <m2m_wifi_connect_sc+0x258>)
    d7fe:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    d800:	200c      	movs	r0, #12
    d802:	4240      	negs	r0, r0
		goto ERR1;
    d804:	e733      	b.n	d66e <m2m_wifi_connect_sc+0x9e>
    d806:	46c0      	nop			; (mov r8, r8)
    d808:	0000c901 	.word	0x0000c901
    d80c:	0000ca29 	.word	0x0000ca29
    d810:	0000021a 	.word	0x0000021a
    d814:	00018b2c 	.word	0x00018b2c
    d818:	000187a8 	.word	0x000187a8
    d81c:	00017111 	.word	0x00017111
    d820:	00018b74 	.word	0x00018b74
    d824:	0001722d 	.word	0x0001722d
    d828:	00017145 	.word	0x00017145
    d82c:	0000c925 	.word	0x0000c925
    d830:	00000226 	.word	0x00000226
    d834:	00018b88 	.word	0x00018b88
    d838:	00018b94 	.word	0x00018b94
    d83c:	00000239 	.word	0x00000239
    d840:	00018ba8 	.word	0x00018ba8
    d844:	00000257 	.word	0x00000257
    d848:	00018bd0 	.word	0x00018bd0
    d84c:	00018bb4 	.word	0x00018bb4
    d850:	00000266 	.word	0x00000266
    d854:	00018bec 	.word	0x00018bec
    d858:	00000276 	.word	0x00000276
    d85c:	00018c08 	.word	0x00018c08

0000d860 <m2m_wifi_connect>:
{
    d860:	b530      	push	{r4, r5, lr}
    d862:	b083      	sub	sp, #12
    d864:	ac06      	add	r4, sp, #24
    d866:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    d868:	2500      	movs	r5, #0
    d86a:	9501      	str	r5, [sp, #4]
    d86c:	9400      	str	r4, [sp, #0]
    d86e:	4c02      	ldr	r4, [pc, #8]	; (d878 <m2m_wifi_connect+0x18>)
    d870:	47a0      	blx	r4
}
    d872:	b003      	add	sp, #12
    d874:	bd30      	pop	{r4, r5, pc}
    d876:	46c0      	nop			; (mov r8, r8)
    d878:	0000d5d1 	.word	0x0000d5d1

0000d87c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    d87c:	2000      	movs	r0, #0
    d87e:	4770      	bx	lr

0000d880 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    d880:	b5f0      	push	{r4, r5, r6, r7, lr}
    d882:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    d884:	2580      	movs	r5, #128	; 0x80
    d886:	006d      	lsls	r5, r5, #1
    d888:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    d88a:	24a5      	movs	r4, #165	; 0xa5
    d88c:	0164      	lsls	r4, r4, #5
    d88e:	4f08      	ldr	r7, [pc, #32]	; (d8b0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    d890:	4e08      	ldr	r6, [pc, #32]	; (d8b4 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    d892:	0029      	movs	r1, r5
    d894:	0020      	movs	r0, r4
    d896:	47b8      	blx	r7
			uint32 reg = 0;
    d898:	2300      	movs	r3, #0
    d89a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    d89c:	a901      	add	r1, sp, #4
    d89e:	0020      	movs	r0, r4
    d8a0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    d8a2:	2800      	cmp	r0, #0
    d8a4:	d1f5      	bne.n	d892 <chip_apply_conf+0x12>
				if(reg == val32)
    d8a6:	9b01      	ldr	r3, [sp, #4]
    d8a8:	429d      	cmp	r5, r3
    d8aa:	d1f2      	bne.n	d892 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    d8ac:	b003      	add	sp, #12
    d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8b0:	0000dd71 	.word	0x0000dd71
    d8b4:	0000dd65 	.word	0x0000dd65

0000d8b8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    d8b8:	b500      	push	{lr}
    d8ba:	b083      	sub	sp, #12
	uint32 reg = 0;
    d8bc:	2300      	movs	r3, #0
    d8be:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    d8c0:	a901      	add	r1, sp, #4
    d8c2:	4811      	ldr	r0, [pc, #68]	; (d908 <enable_interrupts+0x50>)
    d8c4:	4b11      	ldr	r3, [pc, #68]	; (d90c <enable_interrupts+0x54>)
    d8c6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d8c8:	2800      	cmp	r0, #0
    d8ca:	d001      	beq.n	d8d0 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    d8cc:	b003      	add	sp, #12
    d8ce:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    d8d0:	2180      	movs	r1, #128	; 0x80
    d8d2:	0049      	lsls	r1, r1, #1
    d8d4:	9b01      	ldr	r3, [sp, #4]
    d8d6:	4319      	orrs	r1, r3
    d8d8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    d8da:	480b      	ldr	r0, [pc, #44]	; (d908 <enable_interrupts+0x50>)
    d8dc:	4b0c      	ldr	r3, [pc, #48]	; (d910 <enable_interrupts+0x58>)
    d8de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d8e0:	2800      	cmp	r0, #0
    d8e2:	d1f3      	bne.n	d8cc <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    d8e4:	a901      	add	r1, sp, #4
    d8e6:	20d0      	movs	r0, #208	; 0xd0
    d8e8:	0140      	lsls	r0, r0, #5
    d8ea:	4b08      	ldr	r3, [pc, #32]	; (d90c <enable_interrupts+0x54>)
    d8ec:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d1ec      	bne.n	d8cc <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    d8f2:	2180      	movs	r1, #128	; 0x80
    d8f4:	0249      	lsls	r1, r1, #9
    d8f6:	9b01      	ldr	r3, [sp, #4]
    d8f8:	4319      	orrs	r1, r3
    d8fa:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    d8fc:	20d0      	movs	r0, #208	; 0xd0
    d8fe:	0140      	lsls	r0, r0, #5
    d900:	4b03      	ldr	r3, [pc, #12]	; (d910 <enable_interrupts+0x58>)
    d902:	4798      	blx	r3
    d904:	e7e2      	b.n	d8cc <enable_interrupts+0x14>
    d906:	46c0      	nop			; (mov r8, r8)
    d908:	00001408 	.word	0x00001408
    d90c:	0000dd65 	.word	0x0000dd65
    d910:	0000dd71 	.word	0x0000dd71

0000d914 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    d914:	b510      	push	{r4, lr}
    d916:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    d918:	4b28      	ldr	r3, [pc, #160]	; (d9bc <nmi_get_chipid+0xa8>)
    d91a:	681c      	ldr	r4, [r3, #0]
    d91c:	2c00      	cmp	r4, #0
    d91e:	d004      	beq.n	d92a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    d920:	4b26      	ldr	r3, [pc, #152]	; (d9bc <nmi_get_chipid+0xa8>)
    d922:	681c      	ldr	r4, [r3, #0]
}
    d924:	0020      	movs	r0, r4
    d926:	b002      	add	sp, #8
    d928:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    d92a:	0019      	movs	r1, r3
    d92c:	2080      	movs	r0, #128	; 0x80
    d92e:	0140      	lsls	r0, r0, #5
    d930:	4b23      	ldr	r3, [pc, #140]	; (d9c0 <nmi_get_chipid+0xac>)
    d932:	4798      	blx	r3
    d934:	2800      	cmp	r0, #0
    d936:	d003      	beq.n	d940 <nmi_get_chipid+0x2c>
			chipid = 0;
    d938:	2200      	movs	r2, #0
    d93a:	4b20      	ldr	r3, [pc, #128]	; (d9bc <nmi_get_chipid+0xa8>)
    d93c:	601a      	str	r2, [r3, #0]
			return 0;
    d93e:	e7f1      	b.n	d924 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    d940:	a901      	add	r1, sp, #4
    d942:	4820      	ldr	r0, [pc, #128]	; (d9c4 <nmi_get_chipid+0xb0>)
    d944:	4b1e      	ldr	r3, [pc, #120]	; (d9c0 <nmi_get_chipid+0xac>)
    d946:	4798      	blx	r3
    d948:	2800      	cmp	r0, #0
    d94a:	d003      	beq.n	d954 <nmi_get_chipid+0x40>
			chipid = 0;
    d94c:	2200      	movs	r2, #0
    d94e:	4b1b      	ldr	r3, [pc, #108]	; (d9bc <nmi_get_chipid+0xa8>)
    d950:	601a      	str	r2, [r3, #0]
			return 0;
    d952:	e7e7      	b.n	d924 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    d954:	4b19      	ldr	r3, [pc, #100]	; (d9bc <nmi_get_chipid+0xa8>)
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	4a1b      	ldr	r2, [pc, #108]	; (d9c8 <nmi_get_chipid+0xb4>)
    d95a:	4293      	cmp	r3, r2
    d95c:	d00e      	beq.n	d97c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    d95e:	4a1b      	ldr	r2, [pc, #108]	; (d9cc <nmi_get_chipid+0xb8>)
    d960:	4293      	cmp	r3, r2
    d962:	d012      	beq.n	d98a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    d964:	4a1a      	ldr	r2, [pc, #104]	; (d9d0 <nmi_get_chipid+0xbc>)
    d966:	4293      	cmp	r3, r2
    d968:	d01c      	beq.n	d9a4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    d96a:	4914      	ldr	r1, [pc, #80]	; (d9bc <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    d96c:	4a19      	ldr	r2, [pc, #100]	; (d9d4 <nmi_get_chipid+0xc0>)
    d96e:	680b      	ldr	r3, [r1, #0]
    d970:	401a      	ands	r2, r3
		chipid |= 0x050000;
    d972:	23a0      	movs	r3, #160	; 0xa0
    d974:	02db      	lsls	r3, r3, #11
    d976:	4313      	orrs	r3, r2
    d978:	600b      	str	r3, [r1, #0]
    d97a:	e7d1      	b.n	d920 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    d97c:	9b01      	ldr	r3, [sp, #4]
    d97e:	2b01      	cmp	r3, #1
    d980:	d0f3      	beq.n	d96a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    d982:	4a15      	ldr	r2, [pc, #84]	; (d9d8 <nmi_get_chipid+0xc4>)
    d984:	4b0d      	ldr	r3, [pc, #52]	; (d9bc <nmi_get_chipid+0xa8>)
    d986:	601a      	str	r2, [r3, #0]
    d988:	e7ef      	b.n	d96a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    d98a:	9b01      	ldr	r3, [sp, #4]
    d98c:	2b03      	cmp	r3, #3
    d98e:	d0ec      	beq.n	d96a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    d990:	2b04      	cmp	r3, #4
    d992:	d003      	beq.n	d99c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    d994:	4a11      	ldr	r2, [pc, #68]	; (d9dc <nmi_get_chipid+0xc8>)
    d996:	4b09      	ldr	r3, [pc, #36]	; (d9bc <nmi_get_chipid+0xa8>)
    d998:	601a      	str	r2, [r3, #0]
    d99a:	e7e6      	b.n	d96a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    d99c:	4a10      	ldr	r2, [pc, #64]	; (d9e0 <nmi_get_chipid+0xcc>)
    d99e:	4b07      	ldr	r3, [pc, #28]	; (d9bc <nmi_get_chipid+0xa8>)
    d9a0:	601a      	str	r2, [r3, #0]
    d9a2:	e7e2      	b.n	d96a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    d9a4:	4905      	ldr	r1, [pc, #20]	; (d9bc <nmi_get_chipid+0xa8>)
    d9a6:	20ec      	movs	r0, #236	; 0xec
    d9a8:	0380      	lsls	r0, r0, #14
    d9aa:	4b05      	ldr	r3, [pc, #20]	; (d9c0 <nmi_get_chipid+0xac>)
    d9ac:	4798      	blx	r3
    d9ae:	2800      	cmp	r0, #0
    d9b0:	d0db      	beq.n	d96a <nmi_get_chipid+0x56>
			chipid = 0;
    d9b2:	2200      	movs	r2, #0
    d9b4:	4b01      	ldr	r3, [pc, #4]	; (d9bc <nmi_get_chipid+0xa8>)
    d9b6:	601a      	str	r2, [r3, #0]
			return 0;
    d9b8:	e7b4      	b.n	d924 <nmi_get_chipid+0x10>
    d9ba:	46c0      	nop			; (mov r8, r8)
    d9bc:	200003cc 	.word	0x200003cc
    d9c0:	0000dd65 	.word	0x0000dd65
    d9c4:	000013f4 	.word	0x000013f4
    d9c8:	001002a0 	.word	0x001002a0
    d9cc:	001002b0 	.word	0x001002b0
    d9d0:	001000f0 	.word	0x001000f0
    d9d4:	fff0ffff 	.word	0xfff0ffff
    d9d8:	001002a1 	.word	0x001002a1
    d9dc:	001002b2 	.word	0x001002b2
    d9e0:	001002b1 	.word	0x001002b1

0000d9e4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    d9e4:	b530      	push	{r4, r5, lr}
    d9e6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    d9e8:	4c16      	ldr	r4, [pc, #88]	; (da44 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    d9ea:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    d9ec:	a901      	add	r1, sp, #4
    d9ee:	2010      	movs	r0, #16
    d9f0:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    d9f2:	2800      	cmp	r0, #0
    d9f4:	d11c      	bne.n	da30 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    d9f6:	9b01      	ldr	r3, [sp, #4]
    d9f8:	422b      	tst	r3, r5
    d9fa:	d1f7      	bne.n	d9ec <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    d9fc:	a901      	add	r1, sp, #4
    d9fe:	3001      	adds	r0, #1
    da00:	4b10      	ldr	r3, [pc, #64]	; (da44 <chip_sleep+0x60>)
    da02:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    da04:	2800      	cmp	r0, #0
    da06:	d113      	bne.n	da30 <chip_sleep+0x4c>
	if(reg & NBIT1)
    da08:	9901      	ldr	r1, [sp, #4]
    da0a:	078b      	lsls	r3, r1, #30
    da0c:	d507      	bpl.n	da1e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    da0e:	2302      	movs	r3, #2
    da10:	4399      	bics	r1, r3
    da12:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    da14:	3001      	adds	r0, #1
    da16:	4b0c      	ldr	r3, [pc, #48]	; (da48 <chip_sleep+0x64>)
    da18:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    da1a:	2800      	cmp	r0, #0
    da1c:	d108      	bne.n	da30 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    da1e:	a901      	add	r1, sp, #4
    da20:	200b      	movs	r0, #11
    da22:	4b08      	ldr	r3, [pc, #32]	; (da44 <chip_sleep+0x60>)
    da24:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    da26:	2800      	cmp	r0, #0
    da28:	d102      	bne.n	da30 <chip_sleep+0x4c>
	if(reg & NBIT0)
    da2a:	9901      	ldr	r1, [sp, #4]
    da2c:	07cb      	lsls	r3, r1, #31
    da2e:	d401      	bmi.n	da34 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    da30:	b003      	add	sp, #12
    da32:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    da34:	2301      	movs	r3, #1
    da36:	4399      	bics	r1, r3
    da38:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    da3a:	300b      	adds	r0, #11
    da3c:	4b02      	ldr	r3, [pc, #8]	; (da48 <chip_sleep+0x64>)
    da3e:	4798      	blx	r3
    da40:	e7f6      	b.n	da30 <chip_sleep+0x4c>
    da42:	46c0      	nop			; (mov r8, r8)
    da44:	0000dd65 	.word	0x0000dd65
    da48:	0000dd71 	.word	0x0000dd71

0000da4c <chip_wake>:
sint8 chip_wake(void)
{
    da4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da4e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    da50:	2300      	movs	r3, #0
    da52:	9301      	str	r3, [sp, #4]
    da54:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    da56:	a901      	add	r1, sp, #4
    da58:	200b      	movs	r0, #11
    da5a:	4b28      	ldr	r3, [pc, #160]	; (dafc <chip_wake+0xb0>)
    da5c:	4798      	blx	r3
    da5e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    da60:	d130      	bne.n	dac4 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    da62:	9901      	ldr	r1, [sp, #4]
    da64:	07cb      	lsls	r3, r1, #31
    da66:	d406      	bmi.n	da76 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    da68:	2301      	movs	r3, #1
    da6a:	4319      	orrs	r1, r3
    da6c:	200b      	movs	r0, #11
    da6e:	4b24      	ldr	r3, [pc, #144]	; (db00 <chip_wake+0xb4>)
    da70:	4798      	blx	r3
    da72:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    da74:	d126      	bne.n	dac4 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    da76:	a901      	add	r1, sp, #4
    da78:	2001      	movs	r0, #1
    da7a:	4b20      	ldr	r3, [pc, #128]	; (dafc <chip_wake+0xb0>)
    da7c:	4798      	blx	r3
    da7e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    da80:	d120      	bne.n	dac4 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    da82:	9901      	ldr	r1, [sp, #4]
    da84:	078b      	lsls	r3, r1, #30
    da86:	d520      	bpl.n	daca <chip_wake+0x7e>
{
    da88:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    da8a:	4f1c      	ldr	r7, [pc, #112]	; (dafc <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    da8c:	4e1d      	ldr	r6, [pc, #116]	; (db04 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    da8e:	4669      	mov	r1, sp
    da90:	200f      	movs	r0, #15
    da92:	47b8      	blx	r7
    da94:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    da96:	d120      	bne.n	dada <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    da98:	9b00      	ldr	r3, [sp, #0]
    da9a:	075b      	lsls	r3, r3, #29
    da9c:	d42b      	bmi.n	daf6 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    da9e:	2002      	movs	r0, #2
    daa0:	47b0      	blx	r6
    daa2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    daa4:	2d00      	cmp	r5, #0
    daa6:	d1f2      	bne.n	da8e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    daa8:	22ad      	movs	r2, #173	; 0xad
    daaa:	0052      	lsls	r2, r2, #1
    daac:	4916      	ldr	r1, [pc, #88]	; (db08 <chip_wake+0xbc>)
    daae:	4817      	ldr	r0, [pc, #92]	; (db0c <chip_wake+0xc0>)
    dab0:	4b17      	ldr	r3, [pc, #92]	; (db10 <chip_wake+0xc4>)
    dab2:	4798      	blx	r3
    dab4:	4817      	ldr	r0, [pc, #92]	; (db14 <chip_wake+0xc8>)
    dab6:	4b18      	ldr	r3, [pc, #96]	; (db18 <chip_wake+0xcc>)
    dab8:	4798      	blx	r3
    daba:	200d      	movs	r0, #13
    dabc:	4b17      	ldr	r3, [pc, #92]	; (db1c <chip_wake+0xd0>)
    dabe:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    dac0:	2404      	movs	r4, #4
    dac2:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    dac4:	0020      	movs	r0, r4
    dac6:	b003      	add	sp, #12
    dac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    daca:	2302      	movs	r3, #2
    dacc:	4319      	orrs	r1, r3
    dace:	2001      	movs	r0, #1
    dad0:	4b0b      	ldr	r3, [pc, #44]	; (db00 <chip_wake+0xb4>)
    dad2:	4798      	blx	r3
    dad4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    dad6:	d0d7      	beq.n	da88 <chip_wake+0x3c>
    dad8:	e7f4      	b.n	dac4 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    dada:	22a8      	movs	r2, #168	; 0xa8
    dadc:	0052      	lsls	r2, r2, #1
    dade:	490a      	ldr	r1, [pc, #40]	; (db08 <chip_wake+0xbc>)
    dae0:	480a      	ldr	r0, [pc, #40]	; (db0c <chip_wake+0xc0>)
    dae2:	4d0b      	ldr	r5, [pc, #44]	; (db10 <chip_wake+0xc4>)
    dae4:	47a8      	blx	r5
    dae6:	9a00      	ldr	r2, [sp, #0]
    dae8:	0021      	movs	r1, r4
    daea:	480d      	ldr	r0, [pc, #52]	; (db20 <chip_wake+0xd4>)
    daec:	47a8      	blx	r5
    daee:	200d      	movs	r0, #13
    daf0:	4b0a      	ldr	r3, [pc, #40]	; (db1c <chip_wake+0xd0>)
    daf2:	4798      	blx	r3
			goto _WAKE_EXIT;
    daf4:	e7e6      	b.n	dac4 <chip_wake+0x78>
	nm_bus_reset();
    daf6:	4b0b      	ldr	r3, [pc, #44]	; (db24 <chip_wake+0xd8>)
    daf8:	4798      	blx	r3
    dafa:	e7e3      	b.n	dac4 <chip_wake+0x78>
    dafc:	0000dd65 	.word	0x0000dd65
    db00:	0000dd71 	.word	0x0000dd71
    db04:	0000c589 	.word	0x0000c589
    db08:	00018ce8 	.word	0x00018ce8
    db0c:	000187a8 	.word	0x000187a8
    db10:	00017111 	.word	0x00017111
    db14:	00018d30 	.word	0x00018d30
    db18:	0001722d 	.word	0x0001722d
    db1c:	00017145 	.word	0x00017145
    db20:	00018d18 	.word	0x00018d18
    db24:	0000dd4d 	.word	0x0000dd4d

0000db28 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db2a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    db2c:	4d2d      	ldr	r5, [pc, #180]	; (dbe4 <wait_for_bootrom+0xbc>)
    db2e:	4c2e      	ldr	r4, [pc, #184]	; (dbe8 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    db30:	4e2e      	ldr	r6, [pc, #184]	; (dbec <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    db32:	0028      	movs	r0, r5
    db34:	47a0      	blx	r4
		if (reg & 0x80000000) {
    db36:	2800      	cmp	r0, #0
    db38:	db02      	blt.n	db40 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    db3a:	2001      	movs	r0, #1
    db3c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    db3e:	e7f8      	b.n	db32 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    db40:	482b      	ldr	r0, [pc, #172]	; (dbf0 <wait_for_bootrom+0xc8>)
    db42:	4b29      	ldr	r3, [pc, #164]	; (dbe8 <wait_for_bootrom+0xc0>)
    db44:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    db46:	07c3      	lsls	r3, r0, #31
    db48:	d409      	bmi.n	db5e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    db4a:	4e28      	ldr	r6, [pc, #160]	; (dbec <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    db4c:	4c29      	ldr	r4, [pc, #164]	; (dbf4 <wait_for_bootrom+0xcc>)
    db4e:	4d26      	ldr	r5, [pc, #152]	; (dbe8 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    db50:	2001      	movs	r0, #1
    db52:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    db54:	0020      	movs	r0, r4
    db56:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    db58:	4b27      	ldr	r3, [pc, #156]	; (dbf8 <wait_for_bootrom+0xd0>)
    db5a:	4298      	cmp	r0, r3
    db5c:	d1f8      	bne.n	db50 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    db5e:	2f02      	cmp	r7, #2
    db60:	d021      	beq.n	dba6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    db62:	2f03      	cmp	r7, #3
    db64:	d029      	beq.n	dbba <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    db66:	2f04      	cmp	r7, #4
    db68:	d030      	beq.n	dbcc <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    db6a:	4924      	ldr	r1, [pc, #144]	; (dbfc <wait_for_bootrom+0xd4>)
    db6c:	4824      	ldr	r0, [pc, #144]	; (dc00 <wait_for_bootrom+0xd8>)
    db6e:	4b25      	ldr	r3, [pc, #148]	; (dc04 <wait_for_bootrom+0xdc>)
    db70:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    db72:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    db74:	4b24      	ldr	r3, [pc, #144]	; (dc08 <wait_for_bootrom+0xe0>)
    db76:	4798      	blx	r3
    db78:	0500      	lsls	r0, r0, #20
    db7a:	0d00      	lsrs	r0, r0, #20
    db7c:	4b23      	ldr	r3, [pc, #140]	; (dc0c <wait_for_bootrom+0xe4>)
    db7e:	4298      	cmp	r0, r3
    db80:	d82a      	bhi.n	dbd8 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    db82:	0020      	movs	r0, r4
    db84:	4b22      	ldr	r3, [pc, #136]	; (dc10 <wait_for_bootrom+0xe8>)
    db86:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    db88:	4822      	ldr	r0, [pc, #136]	; (dc14 <wait_for_bootrom+0xec>)
    db8a:	4c23      	ldr	r4, [pc, #140]	; (dc18 <wait_for_bootrom+0xf0>)
    db8c:	47a0      	blx	r4
    db8e:	491b      	ldr	r1, [pc, #108]	; (dbfc <wait_for_bootrom+0xd4>)
    db90:	4822      	ldr	r0, [pc, #136]	; (dc1c <wait_for_bootrom+0xf4>)
    db92:	47a0      	blx	r4
    db94:	200d      	movs	r0, #13
    db96:	4b22      	ldr	r3, [pc, #136]	; (dc20 <wait_for_bootrom+0xf8>)
    db98:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    db9a:	4922      	ldr	r1, [pc, #136]	; (dc24 <wait_for_bootrom+0xfc>)
    db9c:	4815      	ldr	r0, [pc, #84]	; (dbf4 <wait_for_bootrom+0xcc>)
    db9e:	4b19      	ldr	r3, [pc, #100]	; (dc04 <wait_for_bootrom+0xdc>)
    dba0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    dba2:	2000      	movs	r0, #0
    dba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    dba6:	4920      	ldr	r1, [pc, #128]	; (dc28 <wait_for_bootrom+0x100>)
    dba8:	4820      	ldr	r0, [pc, #128]	; (dc2c <wait_for_bootrom+0x104>)
    dbaa:	4c16      	ldr	r4, [pc, #88]	; (dc04 <wait_for_bootrom+0xdc>)
    dbac:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    dbae:	2180      	movs	r1, #128	; 0x80
    dbb0:	0349      	lsls	r1, r1, #13
    dbb2:	4813      	ldr	r0, [pc, #76]	; (dc00 <wait_for_bootrom+0xd8>)
    dbb4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    dbb6:	2400      	movs	r4, #0
    dbb8:	e7dc      	b.n	db74 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    dbba:	491b      	ldr	r1, [pc, #108]	; (dc28 <wait_for_bootrom+0x100>)
    dbbc:	481b      	ldr	r0, [pc, #108]	; (dc2c <wait_for_bootrom+0x104>)
    dbbe:	4c11      	ldr	r4, [pc, #68]	; (dc04 <wait_for_bootrom+0xdc>)
    dbc0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    dbc2:	2100      	movs	r1, #0
    dbc4:	480e      	ldr	r0, [pc, #56]	; (dc00 <wait_for_bootrom+0xd8>)
    dbc6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    dbc8:	2400      	movs	r4, #0
    dbca:	e7d3      	b.n	db74 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    dbcc:	490b      	ldr	r1, [pc, #44]	; (dbfc <wait_for_bootrom+0xd4>)
    dbce:	480c      	ldr	r0, [pc, #48]	; (dc00 <wait_for_bootrom+0xd8>)
    dbd0:	4b0c      	ldr	r3, [pc, #48]	; (dc04 <wait_for_bootrom+0xdc>)
    dbd2:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    dbd4:	2480      	movs	r4, #128	; 0x80
    dbd6:	e7cd      	b.n	db74 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    dbd8:	2002      	movs	r0, #2
    dbda:	4320      	orrs	r0, r4
    dbdc:	4b0c      	ldr	r3, [pc, #48]	; (dc10 <wait_for_bootrom+0xe8>)
    dbde:	4798      	blx	r3
    dbe0:	e7d2      	b.n	db88 <wait_for_bootrom+0x60>
    dbe2:	46c0      	nop			; (mov r8, r8)
    dbe4:	00001014 	.word	0x00001014
    dbe8:	0000dd59 	.word	0x0000dd59
    dbec:	0000c589 	.word	0x0000c589
    dbf0:	000207bc 	.word	0x000207bc
    dbf4:	000c000c 	.word	0x000c000c
    dbf8:	10add09e 	.word	0x10add09e
    dbfc:	13301354 	.word	0x13301354
    dc00:	0000108c 	.word	0x0000108c
    dc04:	0000dd71 	.word	0x0000dd71
    dc08:	0000d915 	.word	0x0000d915
    dc0c:	0000039f 	.word	0x0000039f
    dc10:	0000d881 	.word	0x0000d881
    dc14:	00018ad8 	.word	0x00018ad8
    dc18:	00017111 	.word	0x00017111
    dc1c:	00018d4c 	.word	0x00018d4c
    dc20:	00017145 	.word	0x00017145
    dc24:	ef522f61 	.word	0xef522f61
    dc28:	3c1cd57d 	.word	0x3c1cd57d
    dc2c:	000207ac 	.word	0x000207ac

0000dc30 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    dc30:	b570      	push	{r4, r5, r6, lr}
    dc32:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    dc34:	4b15      	ldr	r3, [pc, #84]	; (dc8c <wait_for_firmware_start+0x5c>)
    dc36:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    dc38:	4b15      	ldr	r3, [pc, #84]	; (dc90 <wait_for_firmware_start+0x60>)
    dc3a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    dc3c:	3802      	subs	r0, #2
    dc3e:	2801      	cmp	r0, #1
    dc40:	d911      	bls.n	dc66 <wait_for_firmware_start+0x36>
{
    dc42:	2401      	movs	r4, #1
    dc44:	4264      	negs	r4, r4
    dc46:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dc48:	4e12      	ldr	r6, [pc, #72]	; (dc94 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    dc4a:	4d13      	ldr	r5, [pc, #76]	; (dc98 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    dc4c:	9b00      	ldr	r3, [sp, #0]
    dc4e:	4298      	cmp	r0, r3
    dc50:	d00e      	beq.n	dc70 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    dc52:	2002      	movs	r0, #2
    dc54:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    dc56:	9801      	ldr	r0, [sp, #4]
    dc58:	47a8      	blx	r5
    dc5a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    dc5c:	2c00      	cmp	r4, #0
    dc5e:	d1f5      	bne.n	dc4c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    dc60:	2005      	movs	r0, #5
    dc62:	4240      	negs	r0, r0
    dc64:	e009      	b.n	dc7a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    dc66:	4b0d      	ldr	r3, [pc, #52]	; (dc9c <wait_for_firmware_start+0x6c>)
    dc68:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    dc6a:	4b0d      	ldr	r3, [pc, #52]	; (dca0 <wait_for_firmware_start+0x70>)
    dc6c:	9300      	str	r3, [sp, #0]
    dc6e:	e7e8      	b.n	dc42 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    dc70:	9a00      	ldr	r2, [sp, #0]
    dc72:	4b07      	ldr	r3, [pc, #28]	; (dc90 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    dc74:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    dc76:	429a      	cmp	r2, r3
    dc78:	d001      	beq.n	dc7e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    dc7a:	b002      	add	sp, #8
    dc7c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    dc7e:	2100      	movs	r1, #0
    dc80:	4802      	ldr	r0, [pc, #8]	; (dc8c <wait_for_firmware_start+0x5c>)
    dc82:	4b08      	ldr	r3, [pc, #32]	; (dca4 <wait_for_firmware_start+0x74>)
    dc84:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    dc86:	2000      	movs	r0, #0
    dc88:	e7f7      	b.n	dc7a <wait_for_firmware_start+0x4a>
    dc8a:	46c0      	nop			; (mov r8, r8)
    dc8c:	0000108c 	.word	0x0000108c
    dc90:	02532636 	.word	0x02532636
    dc94:	0000c589 	.word	0x0000c589
    dc98:	0000dd59 	.word	0x0000dd59
    dc9c:	000207ac 	.word	0x000207ac
    dca0:	d75dc1c3 	.word	0xd75dc1c3
    dca4:	0000dd71 	.word	0x0000dd71

0000dca8 <chip_deinit>:

sint8 chip_deinit(void)
{
    dca8:	b510      	push	{r4, lr}
    dcaa:	b082      	sub	sp, #8
	uint32 reg = 0;
    dcac:	2300      	movs	r3, #0
    dcae:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    dcb0:	a901      	add	r1, sp, #4
    dcb2:	20a0      	movs	r0, #160	; 0xa0
    dcb4:	0140      	lsls	r0, r0, #5
    dcb6:	4b14      	ldr	r3, [pc, #80]	; (dd08 <chip_deinit+0x60>)
    dcb8:	4798      	blx	r3
    dcba:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    dcbc:	d115      	bne.n	dcea <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    dcbe:	4913      	ldr	r1, [pc, #76]	; (dd0c <chip_deinit+0x64>)
    dcc0:	9b01      	ldr	r3, [sp, #4]
    dcc2:	4019      	ands	r1, r3
    dcc4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    dcc6:	20a0      	movs	r0, #160	; 0xa0
    dcc8:	0140      	lsls	r0, r0, #5
    dcca:	4b11      	ldr	r3, [pc, #68]	; (dd10 <chip_deinit+0x68>)
    dccc:	4798      	blx	r3
    dcce:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    dcd0:	d016      	beq.n	dd00 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    dcd2:	4a10      	ldr	r2, [pc, #64]	; (dd14 <chip_deinit+0x6c>)
    dcd4:	4910      	ldr	r1, [pc, #64]	; (dd18 <chip_deinit+0x70>)
    dcd6:	4811      	ldr	r0, [pc, #68]	; (dd1c <chip_deinit+0x74>)
    dcd8:	4b11      	ldr	r3, [pc, #68]	; (dd20 <chip_deinit+0x78>)
    dcda:	4798      	blx	r3
    dcdc:	4811      	ldr	r0, [pc, #68]	; (dd24 <chip_deinit+0x7c>)
    dcde:	4b12      	ldr	r3, [pc, #72]	; (dd28 <chip_deinit+0x80>)
    dce0:	4798      	blx	r3
    dce2:	200d      	movs	r0, #13
    dce4:	4b11      	ldr	r3, [pc, #68]	; (dd2c <chip_deinit+0x84>)
    dce6:	4798      	blx	r3
		goto ERR1;
    dce8:	e00a      	b.n	dd00 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    dcea:	4a11      	ldr	r2, [pc, #68]	; (dd30 <chip_deinit+0x88>)
    dcec:	490a      	ldr	r1, [pc, #40]	; (dd18 <chip_deinit+0x70>)
    dcee:	480b      	ldr	r0, [pc, #44]	; (dd1c <chip_deinit+0x74>)
    dcf0:	4b0b      	ldr	r3, [pc, #44]	; (dd20 <chip_deinit+0x78>)
    dcf2:	4798      	blx	r3
    dcf4:	480b      	ldr	r0, [pc, #44]	; (dd24 <chip_deinit+0x7c>)
    dcf6:	4b0c      	ldr	r3, [pc, #48]	; (dd28 <chip_deinit+0x80>)
    dcf8:	4798      	blx	r3
    dcfa:	200d      	movs	r0, #13
    dcfc:	4b0b      	ldr	r3, [pc, #44]	; (dd2c <chip_deinit+0x84>)
    dcfe:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    dd00:	0020      	movs	r0, r4
    dd02:	b002      	add	sp, #8
    dd04:	bd10      	pop	{r4, pc}
    dd06:	46c0      	nop			; (mov r8, r8)
    dd08:	0000dd65 	.word	0x0000dd65
    dd0c:	fffffbff 	.word	0xfffffbff
    dd10:	0000dd71 	.word	0x0000dd71
    dd14:	00000207 	.word	0x00000207
    dd18:	00018cf4 	.word	0x00018cf4
    dd1c:	000187a8 	.word	0x000187a8
    dd20:	00017111 	.word	0x00017111
    dd24:	00018d00 	.word	0x00018d00
    dd28:	0001722d 	.word	0x0001722d
    dd2c:	00017145 	.word	0x00017145
    dd30:	00000201 	.word	0x00000201

0000dd34 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    dd34:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    dd36:	4b01      	ldr	r3, [pc, #4]	; (dd3c <nm_bus_iface_init+0x8>)
    dd38:	4798      	blx	r3
	return ret;
}
    dd3a:	bd10      	pop	{r4, pc}
    dd3c:	0000c645 	.word	0x0000c645

0000dd40 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    dd40:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    dd42:	4b01      	ldr	r3, [pc, #4]	; (dd48 <nm_bus_iface_deinit+0x8>)
    dd44:	4798      	blx	r3

	return ret;
}
    dd46:	bd10      	pop	{r4, pc}
    dd48:	0000c895 	.word	0x0000c895

0000dd4c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    dd4c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    dd4e:	4b01      	ldr	r3, [pc, #4]	; (dd54 <nm_bus_reset+0x8>)
    dd50:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    dd52:	bd10      	pop	{r4, pc}
    dd54:	0000e6f5 	.word	0x0000e6f5

0000dd58 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    dd58:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    dd5a:	4b01      	ldr	r3, [pc, #4]	; (dd60 <nm_read_reg+0x8>)
    dd5c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    dd5e:	bd10      	pop	{r4, pc}
    dd60:	0000e72d 	.word	0x0000e72d

0000dd64 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    dd64:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    dd66:	4b01      	ldr	r3, [pc, #4]	; (dd6c <nm_read_reg_with_ret+0x8>)
    dd68:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    dd6a:	bd10      	pop	{r4, pc}
    dd6c:	0000e741 	.word	0x0000e741

0000dd70 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    dd70:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    dd72:	4b01      	ldr	r3, [pc, #4]	; (dd78 <nm_write_reg+0x8>)
    dd74:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    dd76:	bd10      	pop	{r4, pc}
    dd78:	0000e759 	.word	0x0000e759

0000dd7c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    dd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd7e:	46d6      	mov	lr, sl
    dd80:	464f      	mov	r7, r9
    dd82:	4646      	mov	r6, r8
    dd84:	b5c0      	push	{r6, r7, lr}
    dd86:	b082      	sub	sp, #8
    dd88:	4680      	mov	r8, r0
    dd8a:	4689      	mov	r9, r1
    dd8c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    dd8e:	4b13      	ldr	r3, [pc, #76]	; (dddc <nm_read_block+0x60>)
    dd90:	881f      	ldrh	r7, [r3, #0]
    dd92:	3f08      	subs	r7, #8
    dd94:	b2bb      	uxth	r3, r7
    dd96:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    dd98:	001e      	movs	r6, r3
    dd9a:	0004      	movs	r4, r0
    dd9c:	429a      	cmp	r2, r3
    dd9e:	d91a      	bls.n	ddd6 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    dda0:	4b0f      	ldr	r3, [pc, #60]	; (dde0 <nm_read_block+0x64>)
    dda2:	469a      	mov	sl, r3
    dda4:	1a37      	subs	r7, r6, r0
    dda6:	4643      	mov	r3, r8
    dda8:	1ae1      	subs	r1, r4, r3
    ddaa:	4449      	add	r1, r9
    ddac:	9a01      	ldr	r2, [sp, #4]
    ddae:	0020      	movs	r0, r4
    ddb0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    ddb2:	2800      	cmp	r0, #0
    ddb4:	d109      	bne.n	ddca <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    ddb6:	1bad      	subs	r5, r5, r6
    ddb8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    ddba:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    ddbc:	42b5      	cmp	r5, r6
    ddbe:	d8f2      	bhi.n	dda6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    ddc0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ddc2:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    ddc4:	0020      	movs	r0, r4
    ddc6:	4b06      	ldr	r3, [pc, #24]	; (dde0 <nm_read_block+0x64>)
    ddc8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    ddca:	b002      	add	sp, #8
    ddcc:	bc1c      	pop	{r2, r3, r4}
    ddce:	4690      	mov	r8, r2
    ddd0:	4699      	mov	r9, r3
    ddd2:	46a2      	mov	sl, r4
    ddd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    ddd6:	2100      	movs	r1, #0
    ddd8:	e7f2      	b.n	ddc0 <nm_read_block+0x44>
    ddda:	46c0      	nop			; (mov r8, r8)
    dddc:	2000000c 	.word	0x2000000c
    dde0:	0000e899 	.word	0x0000e899

0000dde4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dde6:	46d6      	mov	lr, sl
    dde8:	464f      	mov	r7, r9
    ddea:	4646      	mov	r6, r8
    ddec:	b5c0      	push	{r6, r7, lr}
    ddee:	b082      	sub	sp, #8
    ddf0:	4680      	mov	r8, r0
    ddf2:	4689      	mov	r9, r1
    ddf4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ddf6:	4b13      	ldr	r3, [pc, #76]	; (de44 <nm_write_block+0x60>)
    ddf8:	881f      	ldrh	r7, [r3, #0]
    ddfa:	3f08      	subs	r7, #8
    ddfc:	b2bb      	uxth	r3, r7
    ddfe:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    de00:	001e      	movs	r6, r3
    de02:	0004      	movs	r4, r0
    de04:	429a      	cmp	r2, r3
    de06:	d91a      	bls.n	de3e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    de08:	4b0f      	ldr	r3, [pc, #60]	; (de48 <nm_write_block+0x64>)
    de0a:	469a      	mov	sl, r3
    de0c:	1a37      	subs	r7, r6, r0
    de0e:	4643      	mov	r3, r8
    de10:	1ae1      	subs	r1, r4, r3
    de12:	4449      	add	r1, r9
    de14:	9a01      	ldr	r2, [sp, #4]
    de16:	0020      	movs	r0, r4
    de18:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    de1a:	2800      	cmp	r0, #0
    de1c:	d109      	bne.n	de32 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    de1e:	1bad      	subs	r5, r5, r6
    de20:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    de22:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    de24:	42b5      	cmp	r5, r6
    de26:	d8f2      	bhi.n	de0e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    de28:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    de2a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    de2c:	0020      	movs	r0, r4
    de2e:	4b06      	ldr	r3, [pc, #24]	; (de48 <nm_write_block+0x64>)
    de30:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    de32:	b002      	add	sp, #8
    de34:	bc1c      	pop	{r2, r3, r4}
    de36:	4690      	mov	r8, r2
    de38:	4699      	mov	r9, r3
    de3a:	46a2      	mov	sl, r4
    de3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    de3e:	2100      	movs	r1, #0
    de40:	e7f2      	b.n	de28 <nm_write_block+0x44>
    de42:	46c0      	nop			; (mov r8, r8)
    de44:	2000000c 	.word	0x2000000c
    de48:	0000e9f5 	.word	0x0000e9f5

0000de4c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    de4c:	b570      	push	{r4, r5, r6, lr}
    de4e:	b084      	sub	sp, #16
    de50:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    de52:	2300      	movs	r3, #0
    de54:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    de56:	2208      	movs	r2, #8
    de58:	2100      	movs	r1, #0
    de5a:	a801      	add	r0, sp, #4
    de5c:	4b2d      	ldr	r3, [pc, #180]	; (df14 <nm_get_firmware_full_info+0xc8>)
    de5e:	4798      	blx	r3
	if (pstrRev != NULL)
    de60:	2c00      	cmp	r4, #0
    de62:	d044      	beq.n	deee <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    de64:	2228      	movs	r2, #40	; 0x28
    de66:	2100      	movs	r1, #0
    de68:	0020      	movs	r0, r4
    de6a:	4b2b      	ldr	r3, [pc, #172]	; (df18 <nm_get_firmware_full_info+0xcc>)
    de6c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    de6e:	a903      	add	r1, sp, #12
    de70:	482a      	ldr	r0, [pc, #168]	; (df1c <nm_get_firmware_full_info+0xd0>)
    de72:	4b2b      	ldr	r3, [pc, #172]	; (df20 <nm_get_firmware_full_info+0xd4>)
    de74:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    de76:	2800      	cmp	r0, #0
    de78:	d13a      	bne.n	def0 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    de7a:	9b03      	ldr	r3, [sp, #12]
    de7c:	2b00      	cmp	r3, #0
    de7e:	d039      	beq.n	def4 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    de80:	20c0      	movs	r0, #192	; 0xc0
    de82:	0280      	lsls	r0, r0, #10
    de84:	4318      	orrs	r0, r3
    de86:	2208      	movs	r2, #8
    de88:	a901      	add	r1, sp, #4
    de8a:	4b26      	ldr	r3, [pc, #152]	; (df24 <nm_get_firmware_full_info+0xd8>)
    de8c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    de8e:	2800      	cmp	r0, #0
    de90:	d12e      	bne.n	def0 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    de92:	9b02      	ldr	r3, [sp, #8]
    de94:	0418      	lsls	r0, r3, #16
    de96:	0c00      	lsrs	r0, r0, #16
    de98:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    de9a:	d02e      	beq.n	defa <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    de9c:	23c0      	movs	r3, #192	; 0xc0
    de9e:	029b      	lsls	r3, r3, #10
    dea0:	4318      	orrs	r0, r3
    dea2:	2228      	movs	r2, #40	; 0x28
    dea4:	0021      	movs	r1, r4
    dea6:	4b1f      	ldr	r3, [pc, #124]	; (df24 <nm_get_firmware_full_info+0xd8>)
    dea8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    deaa:	2800      	cmp	r0, #0
    deac:	d120      	bne.n	def0 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    deae:	7921      	ldrb	r1, [r4, #4]
    deb0:	0209      	lsls	r1, r1, #8
    deb2:	79a2      	ldrb	r2, [r4, #6]
    deb4:	230f      	movs	r3, #15
    deb6:	401a      	ands	r2, r3
    deb8:	430a      	orrs	r2, r1
    deba:	7961      	ldrb	r1, [r4, #5]
    debc:	0109      	lsls	r1, r1, #4
    debe:	25ff      	movs	r5, #255	; 0xff
    dec0:	4029      	ands	r1, r5
    dec2:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    dec4:	79e1      	ldrb	r1, [r4, #7]
    dec6:	0209      	lsls	r1, r1, #8
    dec8:	7a66      	ldrb	r6, [r4, #9]
    deca:	4033      	ands	r3, r6
    decc:	430b      	orrs	r3, r1
    dece:	7a21      	ldrb	r1, [r4, #8]
    ded0:	0109      	lsls	r1, r1, #4
    ded2:	400d      	ands	r5, r1
    ded4:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    ded6:	2a00      	cmp	r2, #0
    ded8:	d012      	beq.n	df00 <nm_get_firmware_full_info+0xb4>
    deda:	2b00      	cmp	r3, #0
    dedc:	d013      	beq.n	df06 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    dede:	4912      	ldr	r1, [pc, #72]	; (df28 <nm_get_firmware_full_info+0xdc>)
    dee0:	428b      	cmp	r3, r1
    dee2:	d813      	bhi.n	df0c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    dee4:	4b11      	ldr	r3, [pc, #68]	; (df2c <nm_get_firmware_full_info+0xe0>)
    dee6:	429a      	cmp	r2, r3
    dee8:	d802      	bhi.n	def0 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    deea:	380d      	subs	r0, #13
    deec:	e000      	b.n	def0 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    deee:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    def0:	b004      	add	sp, #16
    def2:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    def4:	200c      	movs	r0, #12
    def6:	4240      	negs	r0, r0
    def8:	e7fa      	b.n	def0 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    defa:	200c      	movs	r0, #12
    defc:	4240      	negs	r0, r0
    defe:	e7f7      	b.n	def0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    df00:	200c      	movs	r0, #12
    df02:	4240      	negs	r0, r0
    df04:	e7f4      	b.n	def0 <nm_get_firmware_full_info+0xa4>
    df06:	200c      	movs	r0, #12
    df08:	4240      	negs	r0, r0
    df0a:	e7f1      	b.n	def0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    df0c:	200d      	movs	r0, #13
    df0e:	4240      	negs	r0, r0
    df10:	e7ee      	b.n	def0 <nm_get_firmware_full_info+0xa4>
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	00016faf 	.word	0x00016faf
    df18:	0000c915 	.word	0x0000c915
    df1c:	000c0008 	.word	0x000c0008
    df20:	0000dd65 	.word	0x0000dd65
    df24:	0000dd7d 	.word	0x0000dd7d
    df28:	00001354 	.word	0x00001354
    df2c:	00001353 	.word	0x00001353

0000df30 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    df30:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    df32:	2800      	cmp	r0, #0
    df34:	d037      	beq.n	dfa6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    df36:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    df38:	1e6b      	subs	r3, r5, #1
    df3a:	2b03      	cmp	r3, #3
    df3c:	d900      	bls.n	df40 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    df3e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    df40:	2000      	movs	r0, #0
    df42:	4b20      	ldr	r3, [pc, #128]	; (dfc4 <nm_drv_init+0x94>)
    df44:	4798      	blx	r3
    df46:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    df48:	d12f      	bne.n	dfaa <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    df4a:	481f      	ldr	r0, [pc, #124]	; (dfc8 <nm_drv_init+0x98>)
    df4c:	4c1f      	ldr	r4, [pc, #124]	; (dfcc <nm_drv_init+0x9c>)
    df4e:	47a0      	blx	r4
    df50:	4b1f      	ldr	r3, [pc, #124]	; (dfd0 <nm_drv_init+0xa0>)
    df52:	4798      	blx	r3
    df54:	0001      	movs	r1, r0
    df56:	481f      	ldr	r0, [pc, #124]	; (dfd4 <nm_drv_init+0xa4>)
    df58:	47a0      	blx	r4
    df5a:	200d      	movs	r0, #13
    df5c:	4b1e      	ldr	r3, [pc, #120]	; (dfd8 <nm_drv_init+0xa8>)
    df5e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    df60:	4b1e      	ldr	r3, [pc, #120]	; (dfdc <nm_drv_init+0xac>)
    df62:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    df64:	0028      	movs	r0, r5
    df66:	4b1e      	ldr	r3, [pc, #120]	; (dfe0 <nm_drv_init+0xb0>)
    df68:	4798      	blx	r3
    df6a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    df6c:	d117      	bne.n	df9e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    df6e:	0028      	movs	r0, r5
    df70:	4b1c      	ldr	r3, [pc, #112]	; (dfe4 <nm_drv_init+0xb4>)
    df72:	4798      	blx	r3
    df74:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    df76:	d112      	bne.n	df9e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    df78:	3d02      	subs	r5, #2
    df7a:	2d01      	cmp	r5, #1
    df7c:	d911      	bls.n	dfa2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    df7e:	4b1a      	ldr	r3, [pc, #104]	; (dfe8 <nm_drv_init+0xb8>)
    df80:	4798      	blx	r3
    df82:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    df84:	d00d      	beq.n	dfa2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    df86:	22a7      	movs	r2, #167	; 0xa7
    df88:	0052      	lsls	r2, r2, #1
    df8a:	4918      	ldr	r1, [pc, #96]	; (dfec <nm_drv_init+0xbc>)
    df8c:	4818      	ldr	r0, [pc, #96]	; (dff0 <nm_drv_init+0xc0>)
    df8e:	4b0f      	ldr	r3, [pc, #60]	; (dfcc <nm_drv_init+0x9c>)
    df90:	4798      	blx	r3
    df92:	4818      	ldr	r0, [pc, #96]	; (dff4 <nm_drv_init+0xc4>)
    df94:	4b18      	ldr	r3, [pc, #96]	; (dff8 <nm_drv_init+0xc8>)
    df96:	4798      	blx	r3
    df98:	200d      	movs	r0, #13
    df9a:	4b0f      	ldr	r3, [pc, #60]	; (dfd8 <nm_drv_init+0xa8>)
    df9c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    df9e:	4b17      	ldr	r3, [pc, #92]	; (dffc <nm_drv_init+0xcc>)
    dfa0:	4798      	blx	r3
ERR1:
	return ret;
}
    dfa2:	0020      	movs	r0, r4
    dfa4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    dfa6:	2501      	movs	r5, #1
    dfa8:	e7ca      	b.n	df40 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    dfaa:	2290      	movs	r2, #144	; 0x90
    dfac:	0052      	lsls	r2, r2, #1
    dfae:	490f      	ldr	r1, [pc, #60]	; (dfec <nm_drv_init+0xbc>)
    dfb0:	480f      	ldr	r0, [pc, #60]	; (dff0 <nm_drv_init+0xc0>)
    dfb2:	4b06      	ldr	r3, [pc, #24]	; (dfcc <nm_drv_init+0x9c>)
    dfb4:	4798      	blx	r3
    dfb6:	4812      	ldr	r0, [pc, #72]	; (e000 <nm_drv_init+0xd0>)
    dfb8:	4b0f      	ldr	r3, [pc, #60]	; (dff8 <nm_drv_init+0xc8>)
    dfba:	4798      	blx	r3
    dfbc:	200d      	movs	r0, #13
    dfbe:	4b06      	ldr	r3, [pc, #24]	; (dfd8 <nm_drv_init+0xa8>)
    dfc0:	4798      	blx	r3
		goto ERR1;
    dfc2:	e7ee      	b.n	dfa2 <nm_drv_init+0x72>
    dfc4:	0000dd35 	.word	0x0000dd35
    dfc8:	00018ad8 	.word	0x00018ad8
    dfcc:	00017111 	.word	0x00017111
    dfd0:	0000d915 	.word	0x0000d915
    dfd4:	00018e1c 	.word	0x00018e1c
    dfd8:	00017145 	.word	0x00017145
    dfdc:	0000e771 	.word	0x0000e771
    dfe0:	0000db29 	.word	0x0000db29
    dfe4:	0000dc31 	.word	0x0000dc31
    dfe8:	0000d8b9 	.word	0x0000d8b9
    dfec:	00018d64 	.word	0x00018d64
    dff0:	000187a8 	.word	0x000187a8
    dff4:	00018de0 	.word	0x00018de0
    dff8:	0001722d 	.word	0x0001722d
    dffc:	0000dd41 	.word	0x0000dd41
    e000:	00018e00 	.word	0x00018e00

0000e004 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    e004:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    e006:	4b1c      	ldr	r3, [pc, #112]	; (e078 <nm_drv_deinit+0x74>)
    e008:	4798      	blx	r3
    e00a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e00c:	d10b      	bne.n	e026 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    e00e:	2000      	movs	r0, #0
    e010:	4b1a      	ldr	r3, [pc, #104]	; (e07c <nm_drv_deinit+0x78>)
    e012:	4798      	blx	r3
    e014:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e016:	d114      	bne.n	e042 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    e018:	4b19      	ldr	r3, [pc, #100]	; (e080 <nm_drv_deinit+0x7c>)
    e01a:	4798      	blx	r3
    e01c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    e01e:	d11d      	bne.n	e05c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    e020:	4b18      	ldr	r3, [pc, #96]	; (e084 <nm_drv_deinit+0x80>)
    e022:	4798      	blx	r3
    e024:	e00b      	b.n	e03e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    e026:	2266      	movs	r2, #102	; 0x66
    e028:	32ff      	adds	r2, #255	; 0xff
    e02a:	4917      	ldr	r1, [pc, #92]	; (e088 <nm_drv_deinit+0x84>)
    e02c:	4817      	ldr	r0, [pc, #92]	; (e08c <nm_drv_deinit+0x88>)
    e02e:	4b18      	ldr	r3, [pc, #96]	; (e090 <nm_drv_deinit+0x8c>)
    e030:	4798      	blx	r3
    e032:	4818      	ldr	r0, [pc, #96]	; (e094 <nm_drv_deinit+0x90>)
    e034:	4b18      	ldr	r3, [pc, #96]	; (e098 <nm_drv_deinit+0x94>)
    e036:	4798      	blx	r3
    e038:	200d      	movs	r0, #13
    e03a:	4b18      	ldr	r3, [pc, #96]	; (e09c <nm_drv_deinit+0x98>)
    e03c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    e03e:	0020      	movs	r0, r4
    e040:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    e042:	22b6      	movs	r2, #182	; 0xb6
    e044:	0052      	lsls	r2, r2, #1
    e046:	4910      	ldr	r1, [pc, #64]	; (e088 <nm_drv_deinit+0x84>)
    e048:	4810      	ldr	r0, [pc, #64]	; (e08c <nm_drv_deinit+0x88>)
    e04a:	4b11      	ldr	r3, [pc, #68]	; (e090 <nm_drv_deinit+0x8c>)
    e04c:	4798      	blx	r3
    e04e:	4814      	ldr	r0, [pc, #80]	; (e0a0 <nm_drv_deinit+0x9c>)
    e050:	4b11      	ldr	r3, [pc, #68]	; (e098 <nm_drv_deinit+0x94>)
    e052:	4798      	blx	r3
    e054:	200d      	movs	r0, #13
    e056:	4b11      	ldr	r3, [pc, #68]	; (e09c <nm_drv_deinit+0x98>)
    e058:	4798      	blx	r3
		goto ERR1;
    e05a:	e7f0      	b.n	e03e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    e05c:	22b9      	movs	r2, #185	; 0xb9
    e05e:	0052      	lsls	r2, r2, #1
    e060:	4909      	ldr	r1, [pc, #36]	; (e088 <nm_drv_deinit+0x84>)
    e062:	480a      	ldr	r0, [pc, #40]	; (e08c <nm_drv_deinit+0x88>)
    e064:	4b0a      	ldr	r3, [pc, #40]	; (e090 <nm_drv_deinit+0x8c>)
    e066:	4798      	blx	r3
    e068:	480e      	ldr	r0, [pc, #56]	; (e0a4 <nm_drv_deinit+0xa0>)
    e06a:	4b0b      	ldr	r3, [pc, #44]	; (e098 <nm_drv_deinit+0x94>)
    e06c:	4798      	blx	r3
    e06e:	200d      	movs	r0, #13
    e070:	4b0a      	ldr	r3, [pc, #40]	; (e09c <nm_drv_deinit+0x98>)
    e072:	4798      	blx	r3
		goto ERR1;
    e074:	e7e3      	b.n	e03e <nm_drv_deinit+0x3a>
    e076:	46c0      	nop			; (mov r8, r8)
    e078:	0000dca9 	.word	0x0000dca9
    e07c:	0000f5d1 	.word	0x0000f5d1
    e080:	0000dd41 	.word	0x0000dd41
    e084:	0000e71d 	.word	0x0000e71d
    e088:	00018d70 	.word	0x00018d70
    e08c:	000187a8 	.word	0x000187a8
    e090:	00017111 	.word	0x00017111
    e094:	00018d80 	.word	0x00018d80
    e098:	0001722d 	.word	0x0001722d
    e09c:	00017145 	.word	0x00017145
    e0a0:	00018da0 	.word	0x00018da0
    e0a4:	00018dc4 	.word	0x00018dc4

0000e0a8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    e0a8:	b500      	push	{lr}
    e0aa:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    e0ac:	ab01      	add	r3, sp, #4
    e0ae:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    e0b0:	2200      	movs	r2, #0
    e0b2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    e0b4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e0b6:	0019      	movs	r1, r3
    e0b8:	2003      	movs	r0, #3
    e0ba:	4b02      	ldr	r3, [pc, #8]	; (e0c4 <nmi_spi_write+0x1c>)
    e0bc:	4798      	blx	r3
}
    e0be:	b005      	add	sp, #20
    e0c0:	bd00      	pop	{pc}
    e0c2:	46c0      	nop			; (mov r8, r8)
    e0c4:	0000c749 	.word	0x0000c749

0000e0c8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    e0c8:	b570      	push	{r4, r5, r6, lr}
    e0ca:	b084      	sub	sp, #16
    e0cc:	ac08      	add	r4, sp, #32
    e0ce:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    e0d0:	ac01      	add	r4, sp, #4
    e0d2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    e0d4:	303f      	adds	r0, #63	; 0x3f
    e0d6:	b2c4      	uxtb	r4, r0
    e0d8:	2c0e      	cmp	r4, #14
    e0da:	d900      	bls.n	e0de <spi_cmd+0x16>
    e0dc:	e084      	b.n	e1e8 <spi_cmd+0x120>
    e0de:	00a0      	lsls	r0, r4, #2
    e0e0:	4c4f      	ldr	r4, [pc, #316]	; (e220 <spi_cmd+0x158>)
    e0e2:	5820      	ldr	r0, [r4, r0]
    e0e4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    e0e6:	ab01      	add	r3, sp, #4
    e0e8:	0c0a      	lsrs	r2, r1, #16
    e0ea:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e0ec:	0a0a      	lsrs	r2, r1, #8
    e0ee:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    e0f0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    e0f2:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    e0f4:	4b4b      	ldr	r3, [pc, #300]	; (e224 <spi_cmd+0x15c>)
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d077      	beq.n	e1ec <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    e0fc:	3901      	subs	r1, #1
    e0fe:	b2c9      	uxtb	r1, r1
    e100:	e083      	b.n	e20a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    e102:	0a0b      	lsrs	r3, r1, #8
    e104:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e106:	2d00      	cmp	r5, #0
    e108:	d107      	bne.n	e11a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    e10a:	aa01      	add	r2, sp, #4
    e10c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    e10e:	ab01      	add	r3, sp, #4
    e110:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    e112:	2200      	movs	r2, #0
    e114:	70da      	strb	r2, [r3, #3]
		len = 5;
    e116:	2105      	movs	r1, #5
		break;
    e118:	e7ec      	b.n	e0f4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e11a:	2280      	movs	r2, #128	; 0x80
    e11c:	4252      	negs	r2, r2
    e11e:	4313      	orrs	r3, r2
    e120:	aa01      	add	r2, sp, #4
    e122:	7053      	strb	r3, [r2, #1]
    e124:	e7f3      	b.n	e10e <spi_cmd+0x46>
		bc[1] = 0x00;
    e126:	ab01      	add	r3, sp, #4
    e128:	2200      	movs	r2, #0
    e12a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e12c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e12e:	70da      	strb	r2, [r3, #3]
		len = 5;
    e130:	2105      	movs	r1, #5
		break;
    e132:	e7df      	b.n	e0f4 <spi_cmd+0x2c>
		bc[1] = 0x00;
    e134:	ab01      	add	r3, sp, #4
    e136:	2200      	movs	r2, #0
    e138:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    e13a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    e13c:	70da      	strb	r2, [r3, #3]
		len = 5;
    e13e:	2105      	movs	r1, #5
		break;
    e140:	e7d8      	b.n	e0f4 <spi_cmd+0x2c>
		bc[1] = 0xff;
    e142:	ab01      	add	r3, sp, #4
    e144:	22ff      	movs	r2, #255	; 0xff
    e146:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    e148:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    e14a:	70da      	strb	r2, [r3, #3]
		len = 5;
    e14c:	2105      	movs	r1, #5
		break;
    e14e:	e7d1      	b.n	e0f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e150:	aa01      	add	r2, sp, #4
    e152:	0c08      	lsrs	r0, r1, #16
    e154:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e156:	0a08      	lsrs	r0, r1, #8
    e158:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e15a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    e15c:	0a19      	lsrs	r1, r3, #8
    e15e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    e160:	7153      	strb	r3, [r2, #5]
		len = 7;
    e162:	2107      	movs	r1, #7
		break;
    e164:	e7c6      	b.n	e0f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    e166:	aa01      	add	r2, sp, #4
    e168:	0c08      	lsrs	r0, r1, #16
    e16a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    e16c:	0a08      	lsrs	r0, r1, #8
    e16e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    e170:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    e172:	0c19      	lsrs	r1, r3, #16
    e174:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    e176:	0a19      	lsrs	r1, r3, #8
    e178:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    e17a:	7193      	strb	r3, [r2, #6]
		len = 8;
    e17c:	2108      	movs	r1, #8
		break;
    e17e:	e7b9      	b.n	e0f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    e180:	0a0b      	lsrs	r3, r1, #8
    e182:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    e184:	2d00      	cmp	r5, #0
    e186:	d10c      	bne.n	e1a2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    e188:	a801      	add	r0, sp, #4
    e18a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    e18c:	ab01      	add	r3, sp, #4
    e18e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    e190:	0e11      	lsrs	r1, r2, #24
    e192:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    e194:	0c11      	lsrs	r1, r2, #16
    e196:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    e198:	0a11      	lsrs	r1, r2, #8
    e19a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    e19c:	719a      	strb	r2, [r3, #6]
		len = 8;
    e19e:	2108      	movs	r1, #8
		break;
    e1a0:	e7a8      	b.n	e0f4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    e1a2:	2080      	movs	r0, #128	; 0x80
    e1a4:	4240      	negs	r0, r0
    e1a6:	4303      	orrs	r3, r0
    e1a8:	a801      	add	r0, sp, #4
    e1aa:	7043      	strb	r3, [r0, #1]
    e1ac:	e7ee      	b.n	e18c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    e1ae:	ab01      	add	r3, sp, #4
    e1b0:	0c08      	lsrs	r0, r1, #16
    e1b2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    e1b4:	0a08      	lsrs	r0, r1, #8
    e1b6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    e1b8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    e1ba:	0e11      	lsrs	r1, r2, #24
    e1bc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    e1be:	0c11      	lsrs	r1, r2, #16
    e1c0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    e1c2:	0a11      	lsrs	r1, r2, #8
    e1c4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    e1c6:	71da      	strb	r2, [r3, #7]
		len = 9;
    e1c8:	2109      	movs	r1, #9
		break;
    e1ca:	e793      	b.n	e0f4 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    e1cc:	2290      	movs	r2, #144	; 0x90
    e1ce:	0052      	lsls	r2, r2, #1
    e1d0:	4915      	ldr	r1, [pc, #84]	; (e228 <spi_cmd+0x160>)
    e1d2:	4816      	ldr	r0, [pc, #88]	; (e22c <spi_cmd+0x164>)
    e1d4:	4b16      	ldr	r3, [pc, #88]	; (e230 <spi_cmd+0x168>)
    e1d6:	4798      	blx	r3
    e1d8:	4816      	ldr	r0, [pc, #88]	; (e234 <spi_cmd+0x16c>)
    e1da:	4b17      	ldr	r3, [pc, #92]	; (e238 <spi_cmd+0x170>)
    e1dc:	4798      	blx	r3
    e1de:	200d      	movs	r0, #13
    e1e0:	4b16      	ldr	r3, [pc, #88]	; (e23c <spi_cmd+0x174>)
    e1e2:	4798      	blx	r3
			result = N_FAIL;
    e1e4:	2300      	movs	r3, #0
    e1e6:	e017      	b.n	e218 <spi_cmd+0x150>
	switch (cmd) {
    e1e8:	2300      	movs	r3, #0
    e1ea:	e015      	b.n	e218 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e1ec:	1e4e      	subs	r6, r1, #1
    e1ee:	aa01      	add	r2, sp, #4
    e1f0:	1995      	adds	r5, r2, r6
    e1f2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    e1f4:	4c12      	ldr	r4, [pc, #72]	; (e240 <spi_cmd+0x178>)
    e1f6:	005b      	lsls	r3, r3, #1
    e1f8:	7810      	ldrb	r0, [r2, #0]
    e1fa:	4043      	eors	r3, r0
    e1fc:	5ce3      	ldrb	r3, [r4, r3]
    e1fe:	3201      	adds	r2, #1
	while (len--)
    e200:	42aa      	cmp	r2, r5
    e202:	d1f8      	bne.n	e1f6 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    e204:	005b      	lsls	r3, r3, #1
    e206:	aa01      	add	r2, sp, #4
    e208:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    e20a:	b289      	uxth	r1, r1
    e20c:	a801      	add	r0, sp, #4
    e20e:	4b0d      	ldr	r3, [pc, #52]	; (e244 <spi_cmd+0x17c>)
    e210:	4798      	blx	r3
    e212:	2301      	movs	r3, #1
    e214:	2800      	cmp	r0, #0
    e216:	d1d9      	bne.n	e1cc <spi_cmd+0x104>
		}
	}

	return result;
}
    e218:	0018      	movs	r0, r3
    e21a:	b004      	add	sp, #16
    e21c:	bd70      	pop	{r4, r5, r6, pc}
    e21e:	46c0      	nop			; (mov r8, r8)
    e220:	00018e2c 	.word	0x00018e2c
    e224:	200003d0 	.word	0x200003d0
    e228:	00018e6c 	.word	0x00018e6c
    e22c:	000187a8 	.word	0x000187a8
    e230:	00017111 	.word	0x00017111
    e234:	000192fc 	.word	0x000192fc
    e238:	0001722d 	.word	0x0001722d
    e23c:	00017145 	.word	0x00017145
    e240:	00018ef8 	.word	0x00018ef8
    e244:	0000e0a9 	.word	0x0000e0a9

0000e248 <nmi_spi_read>:
{
    e248:	b500      	push	{lr}
    e24a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    e24c:	ab01      	add	r3, sp, #4
    e24e:	2200      	movs	r2, #0
    e250:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    e252:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    e254:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    e256:	0019      	movs	r1, r3
    e258:	2003      	movs	r0, #3
    e25a:	4b02      	ldr	r3, [pc, #8]	; (e264 <nmi_spi_read+0x1c>)
    e25c:	4798      	blx	r3
}
    e25e:	b005      	add	sp, #20
    e260:	bd00      	pop	{pc}
    e262:	46c0      	nop			; (mov r8, r8)
    e264:	0000c749 	.word	0x0000c749

0000e268 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    e268:	b5f0      	push	{r4, r5, r6, r7, lr}
    e26a:	46c6      	mov	lr, r8
    e26c:	b500      	push	{lr}
    e26e:	b082      	sub	sp, #8
    e270:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    e272:	28cf      	cmp	r0, #207	; 0xcf
    e274:	d02b      	beq.n	e2ce <spi_cmd_rsp+0x66>
    e276:	0003      	movs	r3, r0
    e278:	333b      	adds	r3, #59	; 0x3b
    e27a:	b2db      	uxtb	r3, r3
    e27c:	2b01      	cmp	r3, #1
    e27e:	d926      	bls.n	e2ce <spi_cmd_rsp+0x66>
{
    e280:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e282:	466b      	mov	r3, sp
    e284:	1dde      	adds	r6, r3, #7
    e286:	4b26      	ldr	r3, [pc, #152]	; (e320 <spi_cmd_rsp+0xb8>)
    e288:	4698      	mov	r8, r3
    e28a:	2101      	movs	r1, #1
    e28c:	0030      	movs	r0, r6
    e28e:	47c0      	blx	r8
    e290:	1e05      	subs	r5, r0, #0
    e292:	d125      	bne.n	e2e0 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    e294:	7833      	ldrb	r3, [r6, #0]
    e296:	42bb      	cmp	r3, r7
    e298:	d030      	beq.n	e2fc <spi_cmd_rsp+0x94>
    e29a:	3c01      	subs	r4, #1
    e29c:	b2e4      	uxtb	r4, r4
    e29e:	2c00      	cmp	r4, #0
    e2a0:	d1f3      	bne.n	e28a <spi_cmd_rsp+0x22>
    e2a2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e2a4:	466b      	mov	r3, sp
    e2a6:	1dde      	adds	r6, r3, #7
    e2a8:	4f1d      	ldr	r7, [pc, #116]	; (e320 <spi_cmd_rsp+0xb8>)
    e2aa:	2101      	movs	r1, #1
    e2ac:	0030      	movs	r0, r6
    e2ae:	47b8      	blx	r7
    e2b0:	2800      	cmp	r0, #0
    e2b2:	d125      	bne.n	e300 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    e2b4:	7833      	ldrb	r3, [r6, #0]
    e2b6:	2b00      	cmp	r3, #0
    e2b8:	d02f      	beq.n	e31a <spi_cmd_rsp+0xb2>
    e2ba:	3c01      	subs	r4, #1
    e2bc:	b2e4      	uxtb	r4, r4
    e2be:	2c00      	cmp	r4, #0
    e2c0:	d1f3      	bne.n	e2aa <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    e2c2:	2501      	movs	r5, #1

_fail_:

	return result;
}
    e2c4:	0028      	movs	r0, r5
    e2c6:	b002      	add	sp, #8
    e2c8:	bc04      	pop	{r2}
    e2ca:	4690      	mov	r8, r2
    e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e2ce:	2101      	movs	r1, #1
    e2d0:	466b      	mov	r3, sp
    e2d2:	1dd8      	adds	r0, r3, #7
    e2d4:	4b12      	ldr	r3, [pc, #72]	; (e320 <spi_cmd_rsp+0xb8>)
    e2d6:	4798      	blx	r3
			result = N_FAIL;
    e2d8:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e2da:	2800      	cmp	r0, #0
    e2dc:	d0d0      	beq.n	e280 <spi_cmd_rsp+0x18>
    e2de:	e7f1      	b.n	e2c4 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e2e0:	225c      	movs	r2, #92	; 0x5c
    e2e2:	32ff      	adds	r2, #255	; 0xff
    e2e4:	490f      	ldr	r1, [pc, #60]	; (e324 <spi_cmd_rsp+0xbc>)
    e2e6:	4810      	ldr	r0, [pc, #64]	; (e328 <spi_cmd_rsp+0xc0>)
    e2e8:	4b10      	ldr	r3, [pc, #64]	; (e32c <spi_cmd_rsp+0xc4>)
    e2ea:	4798      	blx	r3
    e2ec:	4810      	ldr	r0, [pc, #64]	; (e330 <spi_cmd_rsp+0xc8>)
    e2ee:	4b11      	ldr	r3, [pc, #68]	; (e334 <spi_cmd_rsp+0xcc>)
    e2f0:	4798      	blx	r3
    e2f2:	200d      	movs	r0, #13
    e2f4:	4b10      	ldr	r3, [pc, #64]	; (e338 <spi_cmd_rsp+0xd0>)
    e2f6:	4798      	blx	r3
			result = N_FAIL;
    e2f8:	2500      	movs	r5, #0
			goto _fail_;
    e2fa:	e7e3      	b.n	e2c4 <spi_cmd_rsp+0x5c>
    e2fc:	240b      	movs	r4, #11
    e2fe:	e7d1      	b.n	e2a4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    e300:	226a      	movs	r2, #106	; 0x6a
    e302:	32ff      	adds	r2, #255	; 0xff
    e304:	4907      	ldr	r1, [pc, #28]	; (e324 <spi_cmd_rsp+0xbc>)
    e306:	4808      	ldr	r0, [pc, #32]	; (e328 <spi_cmd_rsp+0xc0>)
    e308:	4b08      	ldr	r3, [pc, #32]	; (e32c <spi_cmd_rsp+0xc4>)
    e30a:	4798      	blx	r3
    e30c:	4808      	ldr	r0, [pc, #32]	; (e330 <spi_cmd_rsp+0xc8>)
    e30e:	4b09      	ldr	r3, [pc, #36]	; (e334 <spi_cmd_rsp+0xcc>)
    e310:	4798      	blx	r3
    e312:	200d      	movs	r0, #13
    e314:	4b08      	ldr	r3, [pc, #32]	; (e338 <spi_cmd_rsp+0xd0>)
    e316:	4798      	blx	r3
			goto _fail_;
    e318:	e7d4      	b.n	e2c4 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    e31a:	2501      	movs	r5, #1
    e31c:	e7d2      	b.n	e2c4 <spi_cmd_rsp+0x5c>
    e31e:	46c0      	nop			; (mov r8, r8)
    e320:	0000e249 	.word	0x0000e249
    e324:	00018e84 	.word	0x00018e84
    e328:	000187a8 	.word	0x000187a8
    e32c:	00017111 	.word	0x00017111
    e330:	00019328 	.word	0x00019328
    e334:	0001722d 	.word	0x0001722d
    e338:	00017145 	.word	0x00017145

0000e33c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e33e:	46de      	mov	lr, fp
    e340:	4657      	mov	r7, sl
    e342:	464e      	mov	r6, r9
    e344:	4645      	mov	r5, r8
    e346:	b5e0      	push	{r5, r6, r7, lr}
    e348:	b087      	sub	sp, #28
    e34a:	9001      	str	r0, [sp, #4]
    e34c:	4689      	mov	r9, r1
    e34e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    e350:	2300      	movs	r3, #0
    e352:	469a      	mov	sl, r3
    e354:	2380      	movs	r3, #128	; 0x80
    e356:	019b      	lsls	r3, r3, #6
    e358:	469b      	mov	fp, r3
    e35a:	466a      	mov	r2, sp
    e35c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e35e:	4b3c      	ldr	r3, [pc, #240]	; (e450 <spi_data_read+0x114>)
    e360:	4698      	mov	r8, r3
    e362:	e02f      	b.n	e3c4 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    e364:	22be      	movs	r2, #190	; 0xbe
    e366:	0092      	lsls	r2, r2, #2
    e368:	493a      	ldr	r1, [pc, #232]	; (e454 <spi_data_read+0x118>)
    e36a:	483b      	ldr	r0, [pc, #236]	; (e458 <spi_data_read+0x11c>)
    e36c:	4b3b      	ldr	r3, [pc, #236]	; (e45c <spi_data_read+0x120>)
    e36e:	4798      	blx	r3
    e370:	483b      	ldr	r0, [pc, #236]	; (e460 <spi_data_read+0x124>)
    e372:	4b3c      	ldr	r3, [pc, #240]	; (e464 <spi_data_read+0x128>)
    e374:	4798      	blx	r3
    e376:	200d      	movs	r0, #13
    e378:	4b3b      	ldr	r3, [pc, #236]	; (e468 <spi_data_read+0x12c>)
    e37a:	4798      	blx	r3
    e37c:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    e37e:	0028      	movs	r0, r5
    e380:	b007      	add	sp, #28
    e382:	bc3c      	pop	{r2, r3, r4, r5}
    e384:	4690      	mov	r8, r2
    e386:	4699      	mov	r9, r3
    e388:	46a2      	mov	sl, r4
    e38a:	46ab      	mov	fp, r5
    e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    e38e:	2c00      	cmp	r4, #0
    e390:	dd2e      	ble.n	e3f0 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    e392:	9b01      	ldr	r3, [sp, #4]
    e394:	4453      	add	r3, sl
    e396:	0018      	movs	r0, r3
    e398:	0039      	movs	r1, r7
    e39a:	4b2d      	ldr	r3, [pc, #180]	; (e450 <spi_data_read+0x114>)
    e39c:	4798      	blx	r3
    e39e:	1e04      	subs	r4, r0, #0
    e3a0:	d134      	bne.n	e40c <spi_data_read+0xd0>
		if(!clockless)
    e3a2:	9b02      	ldr	r3, [sp, #8]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d103      	bne.n	e3b0 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    e3a8:	4b30      	ldr	r3, [pc, #192]	; (e46c <spi_data_read+0x130>)
    e3aa:	781b      	ldrb	r3, [r3, #0]
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d039      	beq.n	e424 <spi_data_read+0xe8>
		ix += nbytes;
    e3b0:	4653      	mov	r3, sl
    e3b2:	18fb      	adds	r3, r7, r3
    e3b4:	b21b      	sxth	r3, r3
    e3b6:	469a      	mov	sl, r3
		sz -= nbytes;
    e3b8:	464b      	mov	r3, r9
    e3ba:	1bdf      	subs	r7, r3, r7
    e3bc:	b2bb      	uxth	r3, r7
    e3be:	4699      	mov	r9, r3
	} while (sz);
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	d043      	beq.n	e44c <spi_data_read+0x110>
    e3c4:	464f      	mov	r7, r9
    e3c6:	45d9      	cmp	r9, fp
    e3c8:	d901      	bls.n	e3ce <spi_data_read+0x92>
    e3ca:	466b      	mov	r3, sp
    e3cc:	89df      	ldrh	r7, [r3, #14]
    e3ce:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    e3d0:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    e3d2:	ab04      	add	r3, sp, #16
    e3d4:	1cde      	adds	r6, r3, #3
    e3d6:	2101      	movs	r1, #1
    e3d8:	0030      	movs	r0, r6
    e3da:	47c0      	blx	r8
    e3dc:	1e05      	subs	r5, r0, #0
    e3de:	d1c1      	bne.n	e364 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    e3e0:	7833      	ldrb	r3, [r6, #0]
    e3e2:	091b      	lsrs	r3, r3, #4
    e3e4:	2b0f      	cmp	r3, #15
    e3e6:	d0d2      	beq.n	e38e <spi_data_read+0x52>
    e3e8:	3c01      	subs	r4, #1
    e3ea:	b224      	sxth	r4, r4
		} while (retry--);
    e3ec:	1c63      	adds	r3, r4, #1
    e3ee:	d1f2      	bne.n	e3d6 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    e3f0:	22c1      	movs	r2, #193	; 0xc1
    e3f2:	0092      	lsls	r2, r2, #2
    e3f4:	4917      	ldr	r1, [pc, #92]	; (e454 <spi_data_read+0x118>)
    e3f6:	4818      	ldr	r0, [pc, #96]	; (e458 <spi_data_read+0x11c>)
    e3f8:	4c18      	ldr	r4, [pc, #96]	; (e45c <spi_data_read+0x120>)
    e3fa:	47a0      	blx	r4
    e3fc:	ab04      	add	r3, sp, #16
    e3fe:	78d9      	ldrb	r1, [r3, #3]
    e400:	481b      	ldr	r0, [pc, #108]	; (e470 <spi_data_read+0x134>)
    e402:	47a0      	blx	r4
    e404:	200d      	movs	r0, #13
    e406:	4b18      	ldr	r3, [pc, #96]	; (e468 <spi_data_read+0x12c>)
    e408:	4798      	blx	r3
			break;
    e40a:	e7b8      	b.n	e37e <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    e40c:	4a19      	ldr	r2, [pc, #100]	; (e474 <spi_data_read+0x138>)
    e40e:	4911      	ldr	r1, [pc, #68]	; (e454 <spi_data_read+0x118>)
    e410:	4811      	ldr	r0, [pc, #68]	; (e458 <spi_data_read+0x11c>)
    e412:	4b12      	ldr	r3, [pc, #72]	; (e45c <spi_data_read+0x120>)
    e414:	4798      	blx	r3
    e416:	4818      	ldr	r0, [pc, #96]	; (e478 <spi_data_read+0x13c>)
    e418:	4b12      	ldr	r3, [pc, #72]	; (e464 <spi_data_read+0x128>)
    e41a:	4798      	blx	r3
    e41c:	200d      	movs	r0, #13
    e41e:	4b12      	ldr	r3, [pc, #72]	; (e468 <spi_data_read+0x12c>)
    e420:	4798      	blx	r3
			break;
    e422:	e7ac      	b.n	e37e <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    e424:	2102      	movs	r1, #2
    e426:	a805      	add	r0, sp, #20
    e428:	4b09      	ldr	r3, [pc, #36]	; (e450 <spi_data_read+0x114>)
    e42a:	4798      	blx	r3
    e42c:	2800      	cmp	r0, #0
    e42e:	d0bf      	beq.n	e3b0 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    e430:	22c6      	movs	r2, #198	; 0xc6
    e432:	0092      	lsls	r2, r2, #2
    e434:	4907      	ldr	r1, [pc, #28]	; (e454 <spi_data_read+0x118>)
    e436:	4808      	ldr	r0, [pc, #32]	; (e458 <spi_data_read+0x11c>)
    e438:	4b08      	ldr	r3, [pc, #32]	; (e45c <spi_data_read+0x120>)
    e43a:	4798      	blx	r3
    e43c:	480f      	ldr	r0, [pc, #60]	; (e47c <spi_data_read+0x140>)
    e43e:	4b09      	ldr	r3, [pc, #36]	; (e464 <spi_data_read+0x128>)
    e440:	4798      	blx	r3
    e442:	200d      	movs	r0, #13
    e444:	4b08      	ldr	r3, [pc, #32]	; (e468 <spi_data_read+0x12c>)
    e446:	4798      	blx	r3
					result = N_FAIL;
    e448:	0025      	movs	r5, r4
					break;
    e44a:	e798      	b.n	e37e <spi_data_read+0x42>
    e44c:	2501      	movs	r5, #1
    e44e:	e796      	b.n	e37e <spi_data_read+0x42>
    e450:	0000e249 	.word	0x0000e249
    e454:	00018e90 	.word	0x00018e90
    e458:	000187a8 	.word	0x000187a8
    e45c:	00017111 	.word	0x00017111
    e460:	0001935c 	.word	0x0001935c
    e464:	0001722d 	.word	0x0001722d
    e468:	00017145 	.word	0x00017145
    e46c:	200003d0 	.word	0x200003d0
    e470:	00019390 	.word	0x00019390
    e474:	0000030d 	.word	0x0000030d
    e478:	000193c0 	.word	0x000193c0
    e47c:	000193f0 	.word	0x000193f0

0000e480 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    e480:	b5f0      	push	{r4, r5, r6, r7, lr}
    e482:	46d6      	mov	lr, sl
    e484:	464f      	mov	r7, r9
    e486:	4646      	mov	r6, r8
    e488:	b5c0      	push	{r6, r7, lr}
    e48a:	b086      	sub	sp, #24
    e48c:	9003      	str	r0, [sp, #12]
    e48e:	9104      	str	r1, [sp, #16]
    e490:	2830      	cmp	r0, #48	; 0x30
    e492:	d80f      	bhi.n	e4b4 <spi_write_reg+0x34>
    e494:	4b30      	ldr	r3, [pc, #192]	; (e558 <spi_write_reg+0xd8>)
    e496:	781f      	ldrb	r7, [r3, #0]
    e498:	b2fb      	uxtb	r3, r7
    e49a:	9305      	str	r3, [sp, #20]
    e49c:	2300      	movs	r3, #0
    e49e:	2230      	movs	r2, #48	; 0x30
    e4a0:	9903      	ldr	r1, [sp, #12]
    e4a2:	428a      	cmp	r2, r1
    e4a4:	415b      	adcs	r3, r3
    e4a6:	b2db      	uxtb	r3, r3
    e4a8:	469a      	mov	sl, r3
    e4aa:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e4ac:	4b2b      	ldr	r3, [pc, #172]	; (e55c <spi_write_reg+0xdc>)
    e4ae:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e4b0:	46d1      	mov	r9, sl
    e4b2:	e033      	b.n	e51c <spi_write_reg+0x9c>
    e4b4:	4b2a      	ldr	r3, [pc, #168]	; (e560 <spi_write_reg+0xe0>)
    e4b6:	781f      	ldrb	r7, [r3, #0]
    e4b8:	e7ee      	b.n	e498 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    e4ba:	9805      	ldr	r0, [sp, #20]
    e4bc:	4b29      	ldr	r3, [pc, #164]	; (e564 <spi_write_reg+0xe4>)
    e4be:	4798      	blx	r3
    e4c0:	0004      	movs	r4, r0
	if (result != N_OK) {
    e4c2:	2801      	cmp	r0, #1
    e4c4:	d041      	beq.n	e54a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    e4c6:	4a28      	ldr	r2, [pc, #160]	; (e568 <spi_write_reg+0xe8>)
    e4c8:	4928      	ldr	r1, [pc, #160]	; (e56c <spi_write_reg+0xec>)
    e4ca:	4829      	ldr	r0, [pc, #164]	; (e570 <spi_write_reg+0xf0>)
    e4cc:	4e29      	ldr	r6, [pc, #164]	; (e574 <spi_write_reg+0xf4>)
    e4ce:	47b0      	blx	r6
    e4d0:	9903      	ldr	r1, [sp, #12]
    e4d2:	4829      	ldr	r0, [pc, #164]	; (e578 <spi_write_reg+0xf8>)
    e4d4:	47b0      	blx	r6
    e4d6:	200d      	movs	r0, #13
    e4d8:	4b28      	ldr	r3, [pc, #160]	; (e57c <spi_write_reg+0xfc>)
    e4da:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    e4dc:	2001      	movs	r0, #1
    e4de:	4e28      	ldr	r6, [pc, #160]	; (e580 <spi_write_reg+0x100>)
    e4e0:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e4e2:	2300      	movs	r3, #0
    e4e4:	9300      	str	r3, [sp, #0]
    e4e6:	2200      	movs	r2, #0
    e4e8:	2100      	movs	r1, #0
    e4ea:	20cf      	movs	r0, #207	; 0xcf
    e4ec:	4f1b      	ldr	r7, [pc, #108]	; (e55c <spi_write_reg+0xdc>)
    e4ee:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e4f0:	20cf      	movs	r0, #207	; 0xcf
    e4f2:	4b1c      	ldr	r3, [pc, #112]	; (e564 <spi_write_reg+0xe4>)
    e4f4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    e4f6:	22ea      	movs	r2, #234	; 0xea
    e4f8:	0092      	lsls	r2, r2, #2
    e4fa:	491c      	ldr	r1, [pc, #112]	; (e56c <spi_write_reg+0xec>)
    e4fc:	481c      	ldr	r0, [pc, #112]	; (e570 <spi_write_reg+0xf0>)
    e4fe:	4f1d      	ldr	r7, [pc, #116]	; (e574 <spi_write_reg+0xf4>)
    e500:	47b8      	blx	r7
    e502:	9b04      	ldr	r3, [sp, #16]
    e504:	9a03      	ldr	r2, [sp, #12]
    e506:	0029      	movs	r1, r5
    e508:	481e      	ldr	r0, [pc, #120]	; (e584 <spi_write_reg+0x104>)
    e50a:	47b8      	blx	r7
    e50c:	200d      	movs	r0, #13
    e50e:	4b1b      	ldr	r3, [pc, #108]	; (e57c <spi_write_reg+0xfc>)
    e510:	4798      	blx	r3
		nm_bsp_sleep(1);
    e512:	2001      	movs	r0, #1
    e514:	47b0      	blx	r6
    e516:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e518:	2d00      	cmp	r5, #0
    e51a:	d016      	beq.n	e54a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    e51c:	464b      	mov	r3, r9
    e51e:	9300      	str	r3, [sp, #0]
    e520:	2304      	movs	r3, #4
    e522:	9a04      	ldr	r2, [sp, #16]
    e524:	9f03      	ldr	r7, [sp, #12]
    e526:	0039      	movs	r1, r7
    e528:	9805      	ldr	r0, [sp, #20]
    e52a:	47c0      	blx	r8
    e52c:	0004      	movs	r4, r0
	if (result != N_OK) {
    e52e:	2801      	cmp	r0, #1
    e530:	d0c3      	beq.n	e4ba <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    e532:	4a15      	ldr	r2, [pc, #84]	; (e588 <spi_write_reg+0x108>)
    e534:	490d      	ldr	r1, [pc, #52]	; (e56c <spi_write_reg+0xec>)
    e536:	480e      	ldr	r0, [pc, #56]	; (e570 <spi_write_reg+0xf0>)
    e538:	4e0e      	ldr	r6, [pc, #56]	; (e574 <spi_write_reg+0xf4>)
    e53a:	47b0      	blx	r6
    e53c:	0039      	movs	r1, r7
    e53e:	4813      	ldr	r0, [pc, #76]	; (e58c <spi_write_reg+0x10c>)
    e540:	47b0      	blx	r6
    e542:	200d      	movs	r0, #13
    e544:	4b0d      	ldr	r3, [pc, #52]	; (e57c <spi_write_reg+0xfc>)
    e546:	4798      	blx	r3
		goto _FAIL_;
    e548:	e7c8      	b.n	e4dc <spi_write_reg+0x5c>
	}

	return result;
}
    e54a:	0020      	movs	r0, r4
    e54c:	b006      	add	sp, #24
    e54e:	bc1c      	pop	{r2, r3, r4}
    e550:	4690      	mov	r8, r2
    e552:	4699      	mov	r9, r3
    e554:	46a2      	mov	sl, r4
    e556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e558:	00018e68 	.word	0x00018e68
    e55c:	0000e0c9 	.word	0x0000e0c9
    e560:	00018e69 	.word	0x00018e69
    e564:	0000e269 	.word	0x0000e269
    e568:	00000395 	.word	0x00000395
    e56c:	00018eb0 	.word	0x00018eb0
    e570:	000187a8 	.word	0x000187a8
    e574:	00017111 	.word	0x00017111
    e578:	000194e8 	.word	0x000194e8
    e57c:	00017145 	.word	0x00017145
    e580:	0000c589 	.word	0x0000c589
    e584:	00019520 	.word	0x00019520
    e588:	0000038f 	.word	0x0000038f
    e58c:	000194bc 	.word	0x000194bc

0000e590 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    e590:	b5f0      	push	{r4, r5, r6, r7, lr}
    e592:	46de      	mov	lr, fp
    e594:	4657      	mov	r7, sl
    e596:	464e      	mov	r6, r9
    e598:	4645      	mov	r5, r8
    e59a:	b5e0      	push	{r5, r6, r7, lr}
    e59c:	b087      	sub	sp, #28
    e59e:	9002      	str	r0, [sp, #8]
    e5a0:	468b      	mov	fp, r1
    e5a2:	28ff      	cmp	r0, #255	; 0xff
    e5a4:	d80f      	bhi.n	e5c6 <spi_read_reg+0x36>
    e5a6:	4b41      	ldr	r3, [pc, #260]	; (e6ac <spi_read_reg+0x11c>)
    e5a8:	781f      	ldrb	r7, [r3, #0]
    e5aa:	b2fb      	uxtb	r3, r7
    e5ac:	9303      	str	r3, [sp, #12]
    e5ae:	2300      	movs	r3, #0
    e5b0:	22ff      	movs	r2, #255	; 0xff
    e5b2:	9902      	ldr	r1, [sp, #8]
    e5b4:	428a      	cmp	r2, r1
    e5b6:	415b      	adcs	r3, r3
    e5b8:	b2db      	uxtb	r3, r3
    e5ba:	469a      	mov	sl, r3
    e5bc:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e5be:	4b3c      	ldr	r3, [pc, #240]	; (e6b0 <spi_read_reg+0x120>)
    e5c0:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    e5c2:	46d1      	mov	r9, sl
    e5c4:	e031      	b.n	e62a <spi_read_reg+0x9a>
    e5c6:	4b3b      	ldr	r3, [pc, #236]	; (e6b4 <spi_read_reg+0x124>)
    e5c8:	781f      	ldrb	r7, [r3, #0]
    e5ca:	e7ee      	b.n	e5aa <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    e5cc:	9803      	ldr	r0, [sp, #12]
    e5ce:	4b3a      	ldr	r3, [pc, #232]	; (e6b8 <spi_read_reg+0x128>)
    e5d0:	4798      	blx	r3
    e5d2:	0004      	movs	r4, r0
	if (result != N_OK) {
    e5d4:	2801      	cmp	r0, #1
    e5d6:	d040      	beq.n	e65a <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    e5d8:	4a38      	ldr	r2, [pc, #224]	; (e6bc <spi_read_reg+0x12c>)
    e5da:	4939      	ldr	r1, [pc, #228]	; (e6c0 <spi_read_reg+0x130>)
    e5dc:	4839      	ldr	r0, [pc, #228]	; (e6c4 <spi_read_reg+0x134>)
    e5de:	4e3a      	ldr	r6, [pc, #232]	; (e6c8 <spi_read_reg+0x138>)
    e5e0:	47b0      	blx	r6
    e5e2:	9902      	ldr	r1, [sp, #8]
    e5e4:	4839      	ldr	r0, [pc, #228]	; (e6cc <spi_read_reg+0x13c>)
    e5e6:	47b0      	blx	r6
    e5e8:	200d      	movs	r0, #13
    e5ea:	4b39      	ldr	r3, [pc, #228]	; (e6d0 <spi_read_reg+0x140>)
    e5ec:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    e5ee:	2001      	movs	r0, #1
    e5f0:	4e38      	ldr	r6, [pc, #224]	; (e6d4 <spi_read_reg+0x144>)
    e5f2:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e5f4:	2300      	movs	r3, #0
    e5f6:	9300      	str	r3, [sp, #0]
    e5f8:	2200      	movs	r2, #0
    e5fa:	2100      	movs	r1, #0
    e5fc:	20cf      	movs	r0, #207	; 0xcf
    e5fe:	4f2c      	ldr	r7, [pc, #176]	; (e6b0 <spi_read_reg+0x120>)
    e600:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    e602:	20cf      	movs	r0, #207	; 0xcf
    e604:	4b2c      	ldr	r3, [pc, #176]	; (e6b8 <spi_read_reg+0x128>)
    e606:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    e608:	4a33      	ldr	r2, [pc, #204]	; (e6d8 <spi_read_reg+0x148>)
    e60a:	492d      	ldr	r1, [pc, #180]	; (e6c0 <spi_read_reg+0x130>)
    e60c:	482d      	ldr	r0, [pc, #180]	; (e6c4 <spi_read_reg+0x134>)
    e60e:	4f2e      	ldr	r7, [pc, #184]	; (e6c8 <spi_read_reg+0x138>)
    e610:	47b8      	blx	r7
    e612:	9a02      	ldr	r2, [sp, #8]
    e614:	0029      	movs	r1, r5
    e616:	4831      	ldr	r0, [pc, #196]	; (e6dc <spi_read_reg+0x14c>)
    e618:	47b8      	blx	r7
    e61a:	200d      	movs	r0, #13
    e61c:	4b2c      	ldr	r3, [pc, #176]	; (e6d0 <spi_read_reg+0x140>)
    e61e:	4798      	blx	r3
		nm_bsp_sleep(1);
    e620:	2001      	movs	r0, #1
    e622:	47b0      	blx	r6
    e624:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    e626:	2d00      	cmp	r5, #0
    e628:	d038      	beq.n	e69c <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    e62a:	464b      	mov	r3, r9
    e62c:	9300      	str	r3, [sp, #0]
    e62e:	2304      	movs	r3, #4
    e630:	2200      	movs	r2, #0
    e632:	9f02      	ldr	r7, [sp, #8]
    e634:	0039      	movs	r1, r7
    e636:	9803      	ldr	r0, [sp, #12]
    e638:	47c0      	blx	r8
    e63a:	0004      	movs	r4, r0
	if (result != N_OK) {
    e63c:	2801      	cmp	r0, #1
    e63e:	d0c5      	beq.n	e5cc <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    e640:	2282      	movs	r2, #130	; 0x82
    e642:	00d2      	lsls	r2, r2, #3
    e644:	491e      	ldr	r1, [pc, #120]	; (e6c0 <spi_read_reg+0x130>)
    e646:	481f      	ldr	r0, [pc, #124]	; (e6c4 <spi_read_reg+0x134>)
    e648:	4e1f      	ldr	r6, [pc, #124]	; (e6c8 <spi_read_reg+0x138>)
    e64a:	47b0      	blx	r6
    e64c:	0039      	movs	r1, r7
    e64e:	4824      	ldr	r0, [pc, #144]	; (e6e0 <spi_read_reg+0x150>)
    e650:	47b0      	blx	r6
    e652:	200d      	movs	r0, #13
    e654:	4b1e      	ldr	r3, [pc, #120]	; (e6d0 <spi_read_reg+0x140>)
    e656:	4798      	blx	r3
		goto _FAIL_;
    e658:	e7c9      	b.n	e5ee <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    e65a:	464a      	mov	r2, r9
    e65c:	2104      	movs	r1, #4
    e65e:	a805      	add	r0, sp, #20
    e660:	4b20      	ldr	r3, [pc, #128]	; (e6e4 <spi_read_reg+0x154>)
    e662:	4798      	blx	r3
    e664:	0004      	movs	r4, r0
	if (result != N_OK) {
    e666:	2801      	cmp	r0, #1
    e668:	d00b      	beq.n	e682 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    e66a:	4a1f      	ldr	r2, [pc, #124]	; (e6e8 <spi_read_reg+0x158>)
    e66c:	4914      	ldr	r1, [pc, #80]	; (e6c0 <spi_read_reg+0x130>)
    e66e:	4815      	ldr	r0, [pc, #84]	; (e6c4 <spi_read_reg+0x134>)
    e670:	4b15      	ldr	r3, [pc, #84]	; (e6c8 <spi_read_reg+0x138>)
    e672:	4798      	blx	r3
    e674:	481d      	ldr	r0, [pc, #116]	; (e6ec <spi_read_reg+0x15c>)
    e676:	4b1e      	ldr	r3, [pc, #120]	; (e6f0 <spi_read_reg+0x160>)
    e678:	4798      	blx	r3
    e67a:	200d      	movs	r0, #13
    e67c:	4b14      	ldr	r3, [pc, #80]	; (e6d0 <spi_read_reg+0x140>)
    e67e:	4798      	blx	r3
		goto _FAIL_;
    e680:	e7b5      	b.n	e5ee <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    e682:	aa05      	add	r2, sp, #20
    e684:	7853      	ldrb	r3, [r2, #1]
    e686:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    e688:	7891      	ldrb	r1, [r2, #2]
    e68a:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    e68c:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    e68e:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    e690:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    e692:	78d2      	ldrb	r2, [r2, #3]
    e694:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    e696:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    e698:	465a      	mov	r2, fp
    e69a:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    e69c:	0020      	movs	r0, r4
    e69e:	b007      	add	sp, #28
    e6a0:	bc3c      	pop	{r2, r3, r4, r5}
    e6a2:	4690      	mov	r8, r2
    e6a4:	4699      	mov	r9, r3
    e6a6:	46a2      	mov	sl, r4
    e6a8:	46ab      	mov	fp, r5
    e6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6ac:	00018e6a 	.word	0x00018e6a
    e6b0:	0000e0c9 	.word	0x0000e0c9
    e6b4:	00018e6b 	.word	0x00018e6b
    e6b8:	0000e269 	.word	0x0000e269
    e6bc:	00000416 	.word	0x00000416
    e6c0:	00018ed0 	.word	0x00018ed0
    e6c4:	000187a8 	.word	0x000187a8
    e6c8:	00017111 	.word	0x00017111
    e6cc:	00019450 	.word	0x00019450
    e6d0:	00017145 	.word	0x00017145
    e6d4:	0000c589 	.word	0x0000c589
    e6d8:	00000435 	.word	0x00000435
    e6dc:	000194a4 	.word	0x000194a4
    e6e0:	00019424 	.word	0x00019424
    e6e4:	0000e33d 	.word	0x0000e33d
    e6e8:	0000041d 	.word	0x0000041d
    e6ec:	00019484 	.word	0x00019484
    e6f0:	0001722d 	.word	0x0001722d

0000e6f4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    e6f4:	b510      	push	{r4, lr}
    e6f6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e6f8:	2300      	movs	r3, #0
    e6fa:	9300      	str	r3, [sp, #0]
    e6fc:	2200      	movs	r2, #0
    e6fe:	2100      	movs	r1, #0
    e700:	20cf      	movs	r0, #207	; 0xcf
    e702:	4c04      	ldr	r4, [pc, #16]	; (e714 <nm_spi_reset+0x20>)
    e704:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    e706:	20cf      	movs	r0, #207	; 0xcf
    e708:	4b03      	ldr	r3, [pc, #12]	; (e718 <nm_spi_reset+0x24>)
    e70a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    e70c:	2000      	movs	r0, #0
    e70e:	b002      	add	sp, #8
    e710:	bd10      	pop	{r4, pc}
    e712:	46c0      	nop			; (mov r8, r8)
    e714:	0000e0c9 	.word	0x0000e0c9
    e718:	0000e269 	.word	0x0000e269

0000e71c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    e71c:	2200      	movs	r2, #0
    e71e:	4b02      	ldr	r3, [pc, #8]	; (e728 <nm_spi_deinit+0xc>)
    e720:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    e722:	2000      	movs	r0, #0
    e724:	4770      	bx	lr
    e726:	46c0      	nop			; (mov r8, r8)
    e728:	200003d0 	.word	0x200003d0

0000e72c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    e72c:	b500      	push	{lr}
    e72e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    e730:	a901      	add	r1, sp, #4
    e732:	4b02      	ldr	r3, [pc, #8]	; (e73c <nm_spi_read_reg+0x10>)
    e734:	4798      	blx	r3

	return u32Val;
}
    e736:	9801      	ldr	r0, [sp, #4]
    e738:	b003      	add	sp, #12
    e73a:	bd00      	pop	{pc}
    e73c:	0000e591 	.word	0x0000e591

0000e740 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e740:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    e742:	4b04      	ldr	r3, [pc, #16]	; (e754 <nm_spi_read_reg_with_ret+0x14>)
    e744:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e746:	2300      	movs	r3, #0
    e748:	2801      	cmp	r0, #1
    e74a:	d101      	bne.n	e750 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e74c:	0018      	movs	r0, r3
    e74e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e750:	3b06      	subs	r3, #6
    e752:	e7fb      	b.n	e74c <nm_spi_read_reg_with_ret+0xc>
    e754:	0000e591 	.word	0x0000e591

0000e758 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e758:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    e75a:	4b04      	ldr	r3, [pc, #16]	; (e76c <nm_spi_write_reg+0x14>)
    e75c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e75e:	2300      	movs	r3, #0
    e760:	2801      	cmp	r0, #1
    e762:	d101      	bne.n	e768 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    e764:	0018      	movs	r0, r3
    e766:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    e768:	3b06      	subs	r3, #6
    e76a:	e7fb      	b.n	e764 <nm_spi_write_reg+0xc>
    e76c:	0000e481 	.word	0x0000e481

0000e770 <nm_spi_init>:
{
    e770:	b510      	push	{r4, lr}
    e772:	b082      	sub	sp, #8
	uint32 reg = 0;
    e774:	2300      	movs	r3, #0
    e776:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    e778:	4a35      	ldr	r2, [pc, #212]	; (e850 <nm_spi_init+0xe0>)
    e77a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    e77c:	4669      	mov	r1, sp
    e77e:	4835      	ldr	r0, [pc, #212]	; (e854 <nm_spi_init+0xe4>)
    e780:	4b35      	ldr	r3, [pc, #212]	; (e858 <nm_spi_init+0xe8>)
    e782:	4798      	blx	r3
    e784:	2800      	cmp	r0, #0
    e786:	d028      	beq.n	e7da <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    e788:	4b31      	ldr	r3, [pc, #196]	; (e850 <nm_spi_init+0xe0>)
    e78a:	781b      	ldrb	r3, [r3, #0]
    e78c:	2b00      	cmp	r3, #0
    e78e:	d10d      	bne.n	e7ac <nm_spi_init+0x3c>
		reg &= ~0x70;
    e790:	337c      	adds	r3, #124	; 0x7c
    e792:	9900      	ldr	r1, [sp, #0]
    e794:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    e796:	3b2c      	subs	r3, #44	; 0x2c
    e798:	4319      	orrs	r1, r3
    e79a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    e79c:	482d      	ldr	r0, [pc, #180]	; (e854 <nm_spi_init+0xe4>)
    e79e:	4b2f      	ldr	r3, [pc, #188]	; (e85c <nm_spi_init+0xec>)
    e7a0:	4798      	blx	r3
    e7a2:	1e04      	subs	r4, r0, #0
    e7a4:	d03a      	beq.n	e81c <nm_spi_init+0xac>
		gu8Crc_off = 1;
    e7a6:	2201      	movs	r2, #1
    e7a8:	4b29      	ldr	r3, [pc, #164]	; (e850 <nm_spi_init+0xe0>)
    e7aa:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    e7ac:	a901      	add	r1, sp, #4
    e7ae:	2080      	movs	r0, #128	; 0x80
    e7b0:	0140      	lsls	r0, r0, #5
    e7b2:	4b29      	ldr	r3, [pc, #164]	; (e858 <nm_spi_init+0xe8>)
    e7b4:	4798      	blx	r3
    e7b6:	2800      	cmp	r0, #0
    e7b8:	d03c      	beq.n	e834 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    e7ba:	4c26      	ldr	r4, [pc, #152]	; (e854 <nm_spi_init+0xe4>)
    e7bc:	0020      	movs	r0, r4
    e7be:	4b28      	ldr	r3, [pc, #160]	; (e860 <nm_spi_init+0xf0>)
    e7c0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    e7c2:	2370      	movs	r3, #112	; 0x70
    e7c4:	0001      	movs	r1, r0
    e7c6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    e7c8:	2050      	movs	r0, #80	; 0x50
    e7ca:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    e7cc:	0020      	movs	r0, r4
    e7ce:	4b25      	ldr	r3, [pc, #148]	; (e864 <nm_spi_init+0xf4>)
    e7d0:	4798      	blx	r3
	return M2M_SUCCESS;
    e7d2:	2400      	movs	r4, #0
}
    e7d4:	0020      	movs	r0, r4
    e7d6:	b002      	add	sp, #8
    e7d8:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    e7da:	2201      	movs	r2, #1
    e7dc:	4b1c      	ldr	r3, [pc, #112]	; (e850 <nm_spi_init+0xe0>)
    e7de:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    e7e0:	2298      	movs	r2, #152	; 0x98
    e7e2:	00d2      	lsls	r2, r2, #3
    e7e4:	4920      	ldr	r1, [pc, #128]	; (e868 <nm_spi_init+0xf8>)
    e7e6:	4821      	ldr	r0, [pc, #132]	; (e86c <nm_spi_init+0xfc>)
    e7e8:	4b21      	ldr	r3, [pc, #132]	; (e870 <nm_spi_init+0x100>)
    e7ea:	4798      	blx	r3
    e7ec:	4821      	ldr	r0, [pc, #132]	; (e874 <nm_spi_init+0x104>)
    e7ee:	4b22      	ldr	r3, [pc, #136]	; (e878 <nm_spi_init+0x108>)
    e7f0:	4798      	blx	r3
    e7f2:	200d      	movs	r0, #13
    e7f4:	4b21      	ldr	r3, [pc, #132]	; (e87c <nm_spi_init+0x10c>)
    e7f6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    e7f8:	4669      	mov	r1, sp
    e7fa:	4816      	ldr	r0, [pc, #88]	; (e854 <nm_spi_init+0xe4>)
    e7fc:	4b16      	ldr	r3, [pc, #88]	; (e858 <nm_spi_init+0xe8>)
    e7fe:	4798      	blx	r3
    e800:	1e04      	subs	r4, r0, #0
    e802:	d1c1      	bne.n	e788 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    e804:	4a1e      	ldr	r2, [pc, #120]	; (e880 <nm_spi_init+0x110>)
    e806:	4918      	ldr	r1, [pc, #96]	; (e868 <nm_spi_init+0xf8>)
    e808:	4818      	ldr	r0, [pc, #96]	; (e86c <nm_spi_init+0xfc>)
    e80a:	4b19      	ldr	r3, [pc, #100]	; (e870 <nm_spi_init+0x100>)
    e80c:	4798      	blx	r3
    e80e:	481d      	ldr	r0, [pc, #116]	; (e884 <nm_spi_init+0x114>)
    e810:	4b19      	ldr	r3, [pc, #100]	; (e878 <nm_spi_init+0x108>)
    e812:	4798      	blx	r3
    e814:	200d      	movs	r0, #13
    e816:	4b19      	ldr	r3, [pc, #100]	; (e87c <nm_spi_init+0x10c>)
    e818:	4798      	blx	r3
			return 0;
    e81a:	e7db      	b.n	e7d4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    e81c:	4a1a      	ldr	r2, [pc, #104]	; (e888 <nm_spi_init+0x118>)
    e81e:	4912      	ldr	r1, [pc, #72]	; (e868 <nm_spi_init+0xf8>)
    e820:	4812      	ldr	r0, [pc, #72]	; (e86c <nm_spi_init+0xfc>)
    e822:	4b13      	ldr	r3, [pc, #76]	; (e870 <nm_spi_init+0x100>)
    e824:	4798      	blx	r3
    e826:	4819      	ldr	r0, [pc, #100]	; (e88c <nm_spi_init+0x11c>)
    e828:	4b13      	ldr	r3, [pc, #76]	; (e878 <nm_spi_init+0x108>)
    e82a:	4798      	blx	r3
    e82c:	200d      	movs	r0, #13
    e82e:	4b13      	ldr	r3, [pc, #76]	; (e87c <nm_spi_init+0x10c>)
    e830:	4798      	blx	r3
			return 0;
    e832:	e7cf      	b.n	e7d4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    e834:	4a16      	ldr	r2, [pc, #88]	; (e890 <nm_spi_init+0x120>)
    e836:	490c      	ldr	r1, [pc, #48]	; (e868 <nm_spi_init+0xf8>)
    e838:	480c      	ldr	r0, [pc, #48]	; (e86c <nm_spi_init+0xfc>)
    e83a:	4b0d      	ldr	r3, [pc, #52]	; (e870 <nm_spi_init+0x100>)
    e83c:	4798      	blx	r3
    e83e:	4815      	ldr	r0, [pc, #84]	; (e894 <nm_spi_init+0x124>)
    e840:	4b0d      	ldr	r3, [pc, #52]	; (e878 <nm_spi_init+0x108>)
    e842:	4798      	blx	r3
    e844:	200d      	movs	r0, #13
    e846:	4b0d      	ldr	r3, [pc, #52]	; (e87c <nm_spi_init+0x10c>)
    e848:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    e84a:	2406      	movs	r4, #6
    e84c:	4264      	negs	r4, r4
    e84e:	e7c1      	b.n	e7d4 <nm_spi_init+0x64>
    e850:	200003d0 	.word	0x200003d0
    e854:	0000e824 	.word	0x0000e824
    e858:	0000e591 	.word	0x0000e591
    e85c:	0000e481 	.word	0x0000e481
    e860:	0000e72d 	.word	0x0000e72d
    e864:	0000e759 	.word	0x0000e759
    e868:	00018eec 	.word	0x00018eec
    e86c:	000187a8 	.word	0x000187a8
    e870:	00017111 	.word	0x00017111
    e874:	00018ff8 	.word	0x00018ff8
    e878:	0001722d 	.word	0x0001722d
    e87c:	00017145 	.word	0x00017145
    e880:	000004c3 	.word	0x000004c3
    e884:	00019048 	.word	0x00019048
    e888:	000004cd 	.word	0x000004cd
    e88c:	00019074 	.word	0x00019074
    e890:	000004d7 	.word	0x000004d7
    e894:	000190a8 	.word	0x000190a8

0000e898 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    e898:	b5f0      	push	{r4, r5, r6, r7, lr}
    e89a:	46de      	mov	lr, fp
    e89c:	4657      	mov	r7, sl
    e89e:	464e      	mov	r6, r9
    e8a0:	4645      	mov	r5, r8
    e8a2:	b5e0      	push	{r5, r6, r7, lr}
    e8a4:	b087      	sub	sp, #28
    e8a6:	9002      	str	r0, [sp, #8]
    e8a8:	9103      	str	r1, [sp, #12]
    e8aa:	0016      	movs	r6, r2
    e8ac:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    e8ae:	2300      	movs	r3, #0
    e8b0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    e8b2:	2400      	movs	r4, #0
    e8b4:	4b3e      	ldr	r3, [pc, #248]	; (e9b0 <nm_spi_read_block+0x118>)
    e8b6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    e8b8:	46a9      	mov	r9, r5
    e8ba:	e037      	b.n	e92c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    e8bc:	2301      	movs	r3, #1
    e8be:	469b      	mov	fp, r3
		size = 2;
    e8c0:	3601      	adds	r6, #1
    e8c2:	e035      	b.n	e930 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    e8c4:	20c8      	movs	r0, #200	; 0xc8
    e8c6:	4b3b      	ldr	r3, [pc, #236]	; (e9b4 <nm_spi_read_block+0x11c>)
    e8c8:	4798      	blx	r3
	if (result != N_OK) {
    e8ca:	2801      	cmp	r0, #1
    e8cc:	d045      	beq.n	e95a <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    e8ce:	4a3a      	ldr	r2, [pc, #232]	; (e9b8 <nm_spi_read_block+0x120>)
    e8d0:	493a      	ldr	r1, [pc, #232]	; (e9bc <nm_spi_read_block+0x124>)
    e8d2:	483b      	ldr	r0, [pc, #236]	; (e9c0 <nm_spi_read_block+0x128>)
    e8d4:	4f3b      	ldr	r7, [pc, #236]	; (e9c4 <nm_spi_read_block+0x12c>)
    e8d6:	47b8      	blx	r7
    e8d8:	9902      	ldr	r1, [sp, #8]
    e8da:	483b      	ldr	r0, [pc, #236]	; (e9c8 <nm_spi_read_block+0x130>)
    e8dc:	47b8      	blx	r7
    e8de:	200d      	movs	r0, #13
    e8e0:	4b3a      	ldr	r3, [pc, #232]	; (e9cc <nm_spi_read_block+0x134>)
    e8e2:	4798      	blx	r3
		nm_bsp_sleep(1);
    e8e4:	2001      	movs	r0, #1
    e8e6:	4f3a      	ldr	r7, [pc, #232]	; (e9d0 <nm_spi_read_block+0x138>)
    e8e8:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    e8ea:	9400      	str	r4, [sp, #0]
    e8ec:	0023      	movs	r3, r4
    e8ee:	0022      	movs	r2, r4
    e8f0:	0021      	movs	r1, r4
    e8f2:	20cf      	movs	r0, #207	; 0xcf
    e8f4:	4d2e      	ldr	r5, [pc, #184]	; (e9b0 <nm_spi_read_block+0x118>)
    e8f6:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    e8f8:	20cf      	movs	r0, #207	; 0xcf
    e8fa:	4b2e      	ldr	r3, [pc, #184]	; (e9b4 <nm_spi_read_block+0x11c>)
    e8fc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    e8fe:	4a35      	ldr	r2, [pc, #212]	; (e9d4 <nm_spi_read_block+0x13c>)
    e900:	492e      	ldr	r1, [pc, #184]	; (e9bc <nm_spi_read_block+0x124>)
    e902:	482f      	ldr	r0, [pc, #188]	; (e9c0 <nm_spi_read_block+0x128>)
    e904:	4b2f      	ldr	r3, [pc, #188]	; (e9c4 <nm_spi_read_block+0x12c>)
    e906:	469a      	mov	sl, r3
    e908:	4798      	blx	r3
    e90a:	0033      	movs	r3, r6
    e90c:	9a02      	ldr	r2, [sp, #8]
    e90e:	4649      	mov	r1, r9
    e910:	4831      	ldr	r0, [pc, #196]	; (e9d8 <nm_spi_read_block+0x140>)
    e912:	47d0      	blx	sl
    e914:	200d      	movs	r0, #13
    e916:	4b2d      	ldr	r3, [pc, #180]	; (e9cc <nm_spi_read_block+0x134>)
    e918:	4798      	blx	r3
		nm_bsp_sleep(1);
    e91a:	2001      	movs	r0, #1
    e91c:	47b8      	blx	r7
    e91e:	2301      	movs	r3, #1
    e920:	425b      	negs	r3, r3
    e922:	469c      	mov	ip, r3
    e924:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    e926:	464b      	mov	r3, r9
    e928:	2b00      	cmp	r3, #0
    e92a:	d038      	beq.n	e99e <nm_spi_read_block+0x106>
	if (size == 1)
    e92c:	2e01      	cmp	r6, #1
    e92e:	d0c5      	beq.n	e8bc <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    e930:	9400      	str	r4, [sp, #0]
    e932:	0033      	movs	r3, r6
    e934:	0022      	movs	r2, r4
    e936:	9d02      	ldr	r5, [sp, #8]
    e938:	0029      	movs	r1, r5
    e93a:	20c8      	movs	r0, #200	; 0xc8
    e93c:	47c0      	blx	r8
	if (result != N_OK) {
    e93e:	2801      	cmp	r0, #1
    e940:	d0c0      	beq.n	e8c4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    e942:	4a26      	ldr	r2, [pc, #152]	; (e9dc <nm_spi_read_block+0x144>)
    e944:	491d      	ldr	r1, [pc, #116]	; (e9bc <nm_spi_read_block+0x124>)
    e946:	481e      	ldr	r0, [pc, #120]	; (e9c0 <nm_spi_read_block+0x128>)
    e948:	4f1e      	ldr	r7, [pc, #120]	; (e9c4 <nm_spi_read_block+0x12c>)
    e94a:	47b8      	blx	r7
    e94c:	0029      	movs	r1, r5
    e94e:	4824      	ldr	r0, [pc, #144]	; (e9e0 <nm_spi_read_block+0x148>)
    e950:	47b8      	blx	r7
    e952:	200d      	movs	r0, #13
    e954:	4b1d      	ldr	r3, [pc, #116]	; (e9cc <nm_spi_read_block+0x134>)
    e956:	4798      	blx	r3
    e958:	e7c4      	b.n	e8e4 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    e95a:	465b      	mov	r3, fp
    e95c:	2b00      	cmp	r3, #0
    e95e:	d016      	beq.n	e98e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    e960:	af05      	add	r7, sp, #20
    e962:	0022      	movs	r2, r4
    e964:	0031      	movs	r1, r6
    e966:	0038      	movs	r0, r7
    e968:	4b1e      	ldr	r3, [pc, #120]	; (e9e4 <nm_spi_read_block+0x14c>)
    e96a:	4798      	blx	r3
		buf[0] = tmp[0];
    e96c:	783b      	ldrb	r3, [r7, #0]
    e96e:	9a03      	ldr	r2, [sp, #12]
    e970:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    e972:	2801      	cmp	r0, #1
    e974:	d011      	beq.n	e99a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    e976:	4a1c      	ldr	r2, [pc, #112]	; (e9e8 <nm_spi_read_block+0x150>)
    e978:	4910      	ldr	r1, [pc, #64]	; (e9bc <nm_spi_read_block+0x124>)
    e97a:	4811      	ldr	r0, [pc, #68]	; (e9c0 <nm_spi_read_block+0x128>)
    e97c:	4b11      	ldr	r3, [pc, #68]	; (e9c4 <nm_spi_read_block+0x12c>)
    e97e:	4798      	blx	r3
    e980:	481a      	ldr	r0, [pc, #104]	; (e9ec <nm_spi_read_block+0x154>)
    e982:	4b1b      	ldr	r3, [pc, #108]	; (e9f0 <nm_spi_read_block+0x158>)
    e984:	4798      	blx	r3
    e986:	200d      	movs	r0, #13
    e988:	4b10      	ldr	r3, [pc, #64]	; (e9cc <nm_spi_read_block+0x134>)
    e98a:	4798      	blx	r3
    e98c:	e7aa      	b.n	e8e4 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    e98e:	0022      	movs	r2, r4
    e990:	0031      	movs	r1, r6
    e992:	9803      	ldr	r0, [sp, #12]
    e994:	4b13      	ldr	r3, [pc, #76]	; (e9e4 <nm_spi_read_block+0x14c>)
    e996:	4798      	blx	r3
    e998:	e7eb      	b.n	e972 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    e99a:	2000      	movs	r0, #0
    e99c:	e001      	b.n	e9a2 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    e99e:	2006      	movs	r0, #6
    e9a0:	4240      	negs	r0, r0

	return s8Ret;
}
    e9a2:	b007      	add	sp, #28
    e9a4:	bc3c      	pop	{r2, r3, r4, r5}
    e9a6:	4690      	mov	r8, r2
    e9a8:	4699      	mov	r9, r3
    e9aa:	46a2      	mov	sl, r4
    e9ac:	46ab      	mov	fp, r5
    e9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9b0:	0000e0c9 	.word	0x0000e0c9
    e9b4:	0000e269 	.word	0x0000e269
    e9b8:	0000045c 	.word	0x0000045c
    e9bc:	00018ee0 	.word	0x00018ee0
    e9c0:	000187a8 	.word	0x000187a8
    e9c4:	00017111 	.word	0x00017111
    e9c8:	000190fc 	.word	0x000190fc
    e9cc:	00017145 	.word	0x00017145
    e9d0:	0000c589 	.word	0x0000c589
    e9d4:	0000047d 	.word	0x0000047d
    e9d8:	0001915c 	.word	0x0001915c
    e9dc:	00000456 	.word	0x00000456
    e9e0:	000190cc 	.word	0x000190cc
    e9e4:	0000e33d 	.word	0x0000e33d
    e9e8:	0000046c 	.word	0x0000046c
    e9ec:	00019134 	.word	0x00019134
    e9f0:	0001722d 	.word	0x0001722d

0000e9f4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    e9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9f6:	46de      	mov	lr, fp
    e9f8:	4647      	mov	r7, r8
    e9fa:	b580      	push	{r7, lr}
    e9fc:	b089      	sub	sp, #36	; 0x24
    e9fe:	9004      	str	r0, [sp, #16]
    ea00:	468b      	mov	fp, r1
    ea02:	9203      	str	r2, [sp, #12]
    ea04:	260a      	movs	r6, #10
    ea06:	2780      	movs	r7, #128	; 0x80
    ea08:	01bf      	lsls	r7, r7, #6
    ea0a:	466b      	mov	r3, sp
    ea0c:	82df      	strh	r7, [r3, #22]
    ea0e:	0035      	movs	r5, r6
    ea10:	e02d      	b.n	ea6e <nm_spi_write_block+0x7a>
		size = 2;
    ea12:	3301      	adds	r3, #1
    ea14:	9303      	str	r3, [sp, #12]
    ea16:	e02d      	b.n	ea74 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    ea18:	4a82      	ldr	r2, [pc, #520]	; (ec24 <nm_spi_write_block+0x230>)
    ea1a:	4983      	ldr	r1, [pc, #524]	; (ec28 <nm_spi_write_block+0x234>)
    ea1c:	4883      	ldr	r0, [pc, #524]	; (ec2c <nm_spi_write_block+0x238>)
    ea1e:	4c84      	ldr	r4, [pc, #528]	; (ec30 <nm_spi_write_block+0x23c>)
    ea20:	47a0      	blx	r4
    ea22:	0031      	movs	r1, r6
    ea24:	4883      	ldr	r0, [pc, #524]	; (ec34 <nm_spi_write_block+0x240>)
    ea26:	47a0      	blx	r4
    ea28:	200d      	movs	r0, #13
    ea2a:	4b83      	ldr	r3, [pc, #524]	; (ec38 <nm_spi_write_block+0x244>)
    ea2c:	4798      	blx	r3
		nm_bsp_sleep(1);
    ea2e:	2001      	movs	r0, #1
    ea30:	4c82      	ldr	r4, [pc, #520]	; (ec3c <nm_spi_write_block+0x248>)
    ea32:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ea34:	2300      	movs	r3, #0
    ea36:	9300      	str	r3, [sp, #0]
    ea38:	2200      	movs	r2, #0
    ea3a:	2100      	movs	r1, #0
    ea3c:	20cf      	movs	r0, #207	; 0xcf
    ea3e:	4e80      	ldr	r6, [pc, #512]	; (ec40 <nm_spi_write_block+0x24c>)
    ea40:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    ea42:	20cf      	movs	r0, #207	; 0xcf
    ea44:	4b7f      	ldr	r3, [pc, #508]	; (ec44 <nm_spi_write_block+0x250>)
    ea46:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    ea48:	4a7f      	ldr	r2, [pc, #508]	; (ec48 <nm_spi_write_block+0x254>)
    ea4a:	4977      	ldr	r1, [pc, #476]	; (ec28 <nm_spi_write_block+0x234>)
    ea4c:	4877      	ldr	r0, [pc, #476]	; (ec2c <nm_spi_write_block+0x238>)
    ea4e:	4e78      	ldr	r6, [pc, #480]	; (ec30 <nm_spi_write_block+0x23c>)
    ea50:	47b0      	blx	r6
    ea52:	9b03      	ldr	r3, [sp, #12]
    ea54:	9a04      	ldr	r2, [sp, #16]
    ea56:	0029      	movs	r1, r5
    ea58:	487c      	ldr	r0, [pc, #496]	; (ec4c <nm_spi_write_block+0x258>)
    ea5a:	47b0      	blx	r6
    ea5c:	200d      	movs	r0, #13
    ea5e:	4b76      	ldr	r3, [pc, #472]	; (ec38 <nm_spi_write_block+0x244>)
    ea60:	4798      	blx	r3
		nm_bsp_sleep(1);
    ea62:	2001      	movs	r0, #1
    ea64:	47a0      	blx	r4
    ea66:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    ea68:	2d00      	cmp	r5, #0
    ea6a:	d100      	bne.n	ea6e <nm_spi_write_block+0x7a>
    ea6c:	e0d2      	b.n	ec14 <nm_spi_write_block+0x220>
	if (size == 1)
    ea6e:	9b03      	ldr	r3, [sp, #12]
    ea70:	2b01      	cmp	r3, #1
    ea72:	d0ce      	beq.n	ea12 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    ea74:	2300      	movs	r3, #0
    ea76:	9300      	str	r3, [sp, #0]
    ea78:	9b03      	ldr	r3, [sp, #12]
    ea7a:	2200      	movs	r2, #0
    ea7c:	9e04      	ldr	r6, [sp, #16]
    ea7e:	0031      	movs	r1, r6
    ea80:	20c7      	movs	r0, #199	; 0xc7
    ea82:	4c6f      	ldr	r4, [pc, #444]	; (ec40 <nm_spi_write_block+0x24c>)
    ea84:	47a0      	blx	r4
	if (result != N_OK) {
    ea86:	2801      	cmp	r0, #1
    ea88:	d1c6      	bne.n	ea18 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    ea8a:	20c7      	movs	r0, #199	; 0xc7
    ea8c:	4b6d      	ldr	r3, [pc, #436]	; (ec44 <nm_spi_write_block+0x250>)
    ea8e:	4798      	blx	r3
	if (result != N_OK) {
    ea90:	2801      	cmp	r0, #1
    ea92:	d00b      	beq.n	eaac <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    ea94:	4a6e      	ldr	r2, [pc, #440]	; (ec50 <nm_spi_write_block+0x25c>)
    ea96:	4964      	ldr	r1, [pc, #400]	; (ec28 <nm_spi_write_block+0x234>)
    ea98:	4864      	ldr	r0, [pc, #400]	; (ec2c <nm_spi_write_block+0x238>)
    ea9a:	4c65      	ldr	r4, [pc, #404]	; (ec30 <nm_spi_write_block+0x23c>)
    ea9c:	47a0      	blx	r4
    ea9e:	9904      	ldr	r1, [sp, #16]
    eaa0:	486c      	ldr	r0, [pc, #432]	; (ec54 <nm_spi_write_block+0x260>)
    eaa2:	47a0      	blx	r4
    eaa4:	200d      	movs	r0, #13
    eaa6:	4b64      	ldr	r3, [pc, #400]	; (ec38 <nm_spi_write_block+0x244>)
    eaa8:	4798      	blx	r3
    eaaa:	e7c0      	b.n	ea2e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    eaac:	2200      	movs	r2, #0
    eaae:	ab07      	add	r3, sp, #28
    eab0:	801a      	strh	r2, [r3, #0]
    eab2:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    eab4:	2600      	movs	r6, #0
				order = 0x1;
    eab6:	46a8      	mov	r8, r5
    eab8:	0035      	movs	r5, r6
    eaba:	0026      	movs	r6, r4
    eabc:	e021      	b.n	eb02 <nm_spi_write_block+0x10e>
				order = 0x2;
    eabe:	2300      	movs	r3, #0
    eac0:	42b7      	cmp	r7, r6
    eac2:	415b      	adcs	r3, r3
    eac4:	3302      	adds	r3, #2
		cmd |= order;
    eac6:	200b      	movs	r0, #11
    eac8:	aa04      	add	r2, sp, #16
    eaca:	4694      	mov	ip, r2
    eacc:	4460      	add	r0, ip
    eace:	2210      	movs	r2, #16
    ead0:	4252      	negs	r2, r2
    ead2:	4313      	orrs	r3, r2
    ead4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    ead6:	2101      	movs	r1, #1
    ead8:	4b5f      	ldr	r3, [pc, #380]	; (ec58 <nm_spi_write_block+0x264>)
    eada:	4798      	blx	r3
    eadc:	2800      	cmp	r0, #0
    eade:	d11d      	bne.n	eb1c <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    eae0:	465b      	mov	r3, fp
    eae2:	1958      	adds	r0, r3, r5
    eae4:	0021      	movs	r1, r4
    eae6:	4b5c      	ldr	r3, [pc, #368]	; (ec58 <nm_spi_write_block+0x264>)
    eae8:	4798      	blx	r3
    eaea:	2800      	cmp	r0, #0
    eaec:	d12e      	bne.n	eb4c <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    eaee:	4b5b      	ldr	r3, [pc, #364]	; (ec5c <nm_spi_write_block+0x268>)
    eaf0:	781b      	ldrb	r3, [r3, #0]
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d037      	beq.n	eb66 <nm_spi_write_block+0x172>
		ix += nbytes;
    eaf6:	1965      	adds	r5, r4, r5
    eaf8:	b22d      	sxth	r5, r5
		sz -= nbytes;
    eafa:	1b36      	subs	r6, r6, r4
    eafc:	b2b6      	uxth	r6, r6
	} while (sz);
    eafe:	2e00      	cmp	r6, #0
    eb00:	d052      	beq.n	eba8 <nm_spi_write_block+0x1b4>
    eb02:	1c34      	adds	r4, r6, #0
    eb04:	42be      	cmp	r6, r7
    eb06:	d901      	bls.n	eb0c <nm_spi_write_block+0x118>
    eb08:	466b      	mov	r3, sp
    eb0a:	8adc      	ldrh	r4, [r3, #22]
    eb0c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    eb0e:	2d00      	cmp	r5, #0
    eb10:	d1d5      	bne.n	eabe <nm_spi_write_block+0xca>
				order = 0x3;
    eb12:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    eb14:	42be      	cmp	r6, r7
    eb16:	d9d6      	bls.n	eac6 <nm_spi_write_block+0xd2>
				order = 0x1;
    eb18:	3b02      	subs	r3, #2
    eb1a:	e7d4      	b.n	eac6 <nm_spi_write_block+0xd2>
    eb1c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    eb1e:	4a50      	ldr	r2, [pc, #320]	; (ec60 <nm_spi_write_block+0x26c>)
    eb20:	4950      	ldr	r1, [pc, #320]	; (ec64 <nm_spi_write_block+0x270>)
    eb22:	4842      	ldr	r0, [pc, #264]	; (ec2c <nm_spi_write_block+0x238>)
    eb24:	4b42      	ldr	r3, [pc, #264]	; (ec30 <nm_spi_write_block+0x23c>)
    eb26:	4798      	blx	r3
    eb28:	484f      	ldr	r0, [pc, #316]	; (ec68 <nm_spi_write_block+0x274>)
    eb2a:	4b50      	ldr	r3, [pc, #320]	; (ec6c <nm_spi_write_block+0x278>)
    eb2c:	4798      	blx	r3
    eb2e:	200d      	movs	r0, #13
    eb30:	4b41      	ldr	r3, [pc, #260]	; (ec38 <nm_spi_write_block+0x244>)
    eb32:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    eb34:	4a4e      	ldr	r2, [pc, #312]	; (ec70 <nm_spi_write_block+0x27c>)
    eb36:	493c      	ldr	r1, [pc, #240]	; (ec28 <nm_spi_write_block+0x234>)
    eb38:	483c      	ldr	r0, [pc, #240]	; (ec2c <nm_spi_write_block+0x238>)
    eb3a:	4b3d      	ldr	r3, [pc, #244]	; (ec30 <nm_spi_write_block+0x23c>)
    eb3c:	4798      	blx	r3
    eb3e:	484d      	ldr	r0, [pc, #308]	; (ec74 <nm_spi_write_block+0x280>)
    eb40:	4b4a      	ldr	r3, [pc, #296]	; (ec6c <nm_spi_write_block+0x278>)
    eb42:	4798      	blx	r3
    eb44:	200d      	movs	r0, #13
    eb46:	4b3c      	ldr	r3, [pc, #240]	; (ec38 <nm_spi_write_block+0x244>)
    eb48:	4798      	blx	r3
    eb4a:	e770      	b.n	ea2e <nm_spi_write_block+0x3a>
    eb4c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    eb4e:	4a4a      	ldr	r2, [pc, #296]	; (ec78 <nm_spi_write_block+0x284>)
    eb50:	4944      	ldr	r1, [pc, #272]	; (ec64 <nm_spi_write_block+0x270>)
    eb52:	4836      	ldr	r0, [pc, #216]	; (ec2c <nm_spi_write_block+0x238>)
    eb54:	4b36      	ldr	r3, [pc, #216]	; (ec30 <nm_spi_write_block+0x23c>)
    eb56:	4798      	blx	r3
    eb58:	4848      	ldr	r0, [pc, #288]	; (ec7c <nm_spi_write_block+0x288>)
    eb5a:	4b44      	ldr	r3, [pc, #272]	; (ec6c <nm_spi_write_block+0x278>)
    eb5c:	4798      	blx	r3
    eb5e:	200d      	movs	r0, #13
    eb60:	4b35      	ldr	r3, [pc, #212]	; (ec38 <nm_spi_write_block+0x244>)
    eb62:	4798      	blx	r3
    eb64:	e7e6      	b.n	eb34 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    eb66:	2102      	movs	r1, #2
    eb68:	a807      	add	r0, sp, #28
    eb6a:	4b3b      	ldr	r3, [pc, #236]	; (ec58 <nm_spi_write_block+0x264>)
    eb6c:	4798      	blx	r3
    eb6e:	2800      	cmp	r0, #0
    eb70:	d0c1      	beq.n	eaf6 <nm_spi_write_block+0x102>
    eb72:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    eb74:	22d7      	movs	r2, #215	; 0xd7
    eb76:	0092      	lsls	r2, r2, #2
    eb78:	493a      	ldr	r1, [pc, #232]	; (ec64 <nm_spi_write_block+0x270>)
    eb7a:	482c      	ldr	r0, [pc, #176]	; (ec2c <nm_spi_write_block+0x238>)
    eb7c:	4b2c      	ldr	r3, [pc, #176]	; (ec30 <nm_spi_write_block+0x23c>)
    eb7e:	4798      	blx	r3
    eb80:	483f      	ldr	r0, [pc, #252]	; (ec80 <nm_spi_write_block+0x28c>)
    eb82:	4b3a      	ldr	r3, [pc, #232]	; (ec6c <nm_spi_write_block+0x278>)
    eb84:	4798      	blx	r3
    eb86:	200d      	movs	r0, #13
    eb88:	4b2b      	ldr	r3, [pc, #172]	; (ec38 <nm_spi_write_block+0x244>)
    eb8a:	4798      	blx	r3
    eb8c:	e7d2      	b.n	eb34 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    eb8e:	229a      	movs	r2, #154	; 0x9a
    eb90:	0052      	lsls	r2, r2, #1
    eb92:	493c      	ldr	r1, [pc, #240]	; (ec84 <nm_spi_write_block+0x290>)
    eb94:	4825      	ldr	r0, [pc, #148]	; (ec2c <nm_spi_write_block+0x238>)
    eb96:	4b26      	ldr	r3, [pc, #152]	; (ec30 <nm_spi_write_block+0x23c>)
    eb98:	4798      	blx	r3
    eb9a:	483b      	ldr	r0, [pc, #236]	; (ec88 <nm_spi_write_block+0x294>)
    eb9c:	4b33      	ldr	r3, [pc, #204]	; (ec6c <nm_spi_write_block+0x278>)
    eb9e:	4798      	blx	r3
    eba0:	200d      	movs	r0, #13
    eba2:	4b25      	ldr	r3, [pc, #148]	; (ec38 <nm_spi_write_block+0x244>)
    eba4:	4798      	blx	r3
    eba6:	e027      	b.n	ebf8 <nm_spi_write_block+0x204>
    eba8:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    ebaa:	4b2c      	ldr	r3, [pc, #176]	; (ec5c <nm_spi_write_block+0x268>)
    ebac:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    ebae:	1e63      	subs	r3, r4, #1
    ebb0:	419c      	sbcs	r4, r3
    ebb2:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    ebb4:	b2a1      	uxth	r1, r4
    ebb6:	a807      	add	r0, sp, #28
    ebb8:	4b34      	ldr	r3, [pc, #208]	; (ec8c <nm_spi_write_block+0x298>)
    ebba:	4798      	blx	r3
    ebbc:	2800      	cmp	r0, #0
    ebbe:	d1e6      	bne.n	eb8e <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    ebc0:	ab08      	add	r3, sp, #32
    ebc2:	191b      	adds	r3, r3, r4
    ebc4:	3b05      	subs	r3, #5
    ebc6:	781b      	ldrb	r3, [r3, #0]
    ebc8:	2b00      	cmp	r3, #0
    ebca:	d106      	bne.n	ebda <nm_spi_write_block+0x1e6>
    ebcc:	ab08      	add	r3, sp, #32
    ebce:	469c      	mov	ip, r3
    ebd0:	4464      	add	r4, ip
    ebd2:	3c06      	subs	r4, #6
    ebd4:	7823      	ldrb	r3, [r4, #0]
    ebd6:	2bc3      	cmp	r3, #195	; 0xc3
    ebd8:	d01a      	beq.n	ec10 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    ebda:	223c      	movs	r2, #60	; 0x3c
    ebdc:	32ff      	adds	r2, #255	; 0xff
    ebde:	4929      	ldr	r1, [pc, #164]	; (ec84 <nm_spi_write_block+0x290>)
    ebe0:	4812      	ldr	r0, [pc, #72]	; (ec2c <nm_spi_write_block+0x238>)
    ebe2:	4c13      	ldr	r4, [pc, #76]	; (ec30 <nm_spi_write_block+0x23c>)
    ebe4:	47a0      	blx	r4
    ebe6:	a907      	add	r1, sp, #28
    ebe8:	788b      	ldrb	r3, [r1, #2]
    ebea:	784a      	ldrb	r2, [r1, #1]
    ebec:	7809      	ldrb	r1, [r1, #0]
    ebee:	4828      	ldr	r0, [pc, #160]	; (ec90 <nm_spi_write_block+0x29c>)
    ebf0:	47a0      	blx	r4
    ebf2:	200d      	movs	r0, #13
    ebf4:	4b10      	ldr	r3, [pc, #64]	; (ec38 <nm_spi_write_block+0x244>)
    ebf6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    ebf8:	4a26      	ldr	r2, [pc, #152]	; (ec94 <nm_spi_write_block+0x2a0>)
    ebfa:	490b      	ldr	r1, [pc, #44]	; (ec28 <nm_spi_write_block+0x234>)
    ebfc:	480b      	ldr	r0, [pc, #44]	; (ec2c <nm_spi_write_block+0x238>)
    ebfe:	4b0c      	ldr	r3, [pc, #48]	; (ec30 <nm_spi_write_block+0x23c>)
    ec00:	4798      	blx	r3
    ec02:	481c      	ldr	r0, [pc, #112]	; (ec74 <nm_spi_write_block+0x280>)
    ec04:	4b19      	ldr	r3, [pc, #100]	; (ec6c <nm_spi_write_block+0x278>)
    ec06:	4798      	blx	r3
    ec08:	200d      	movs	r0, #13
    ec0a:	4b0b      	ldr	r3, [pc, #44]	; (ec38 <nm_spi_write_block+0x244>)
    ec0c:	4798      	blx	r3
    ec0e:	e70e      	b.n	ea2e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ec10:	2000      	movs	r0, #0
    ec12:	e001      	b.n	ec18 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ec14:	2006      	movs	r0, #6
    ec16:	4240      	negs	r0, r0

	return s8Ret;
}
    ec18:	b009      	add	sp, #36	; 0x24
    ec1a:	bc0c      	pop	{r2, r3}
    ec1c:	4690      	mov	r8, r2
    ec1e:	469b      	mov	fp, r3
    ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec22:	46c0      	nop			; (mov r8, r8)
    ec24:	000003c3 	.word	0x000003c3
    ec28:	00018ec0 	.word	0x00018ec0
    ec2c:	000187a8 	.word	0x000187a8
    ec30:	00017111 	.word	0x00017111
    ec34:	00019178 	.word	0x00019178
    ec38:	00017145 	.word	0x00017145
    ec3c:	0000c589 	.word	0x0000c589
    ec40:	0000e0c9 	.word	0x0000e0c9
    ec44:	0000e269 	.word	0x0000e269
    ec48:	000003eb 	.word	0x000003eb
    ec4c:	0001915c 	.word	0x0001915c
    ec50:	000003c9 	.word	0x000003c9
    ec54:	000191a8 	.word	0x000191a8
    ec58:	0000e0a9 	.word	0x0000e0a9
    ec5c:	200003d0 	.word	0x200003d0
    ec60:	00000349 	.word	0x00000349
    ec64:	00018ea0 	.word	0x00018ea0
    ec68:	000191e0 	.word	0x000191e0
    ec6c:	0001722d 	.word	0x0001722d
    ec70:	000003d9 	.word	0x000003d9
    ec74:	000192d4 	.word	0x000192d4
    ec78:	00000352 	.word	0x00000352
    ec7c:	00019218 	.word	0x00019218
    ec80:	0001924c 	.word	0x0001924c
    ec84:	00018e74 	.word	0x00018e74
    ec88:	00019284 	.word	0x00019284
    ec8c:	0000e249 	.word	0x0000e249
    ec90:	000192a4 	.word	0x000192a4
    ec94:	000003e1 	.word	0x000003e1

0000ec98 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    ec98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec9a:	46de      	mov	lr, fp
    ec9c:	4657      	mov	r7, sl
    ec9e:	464e      	mov	r6, r9
    eca0:	4645      	mov	r5, r8
    eca2:	b5e0      	push	{r5, r6, r7, lr}
    eca4:	b085      	sub	sp, #20
    eca6:	9001      	str	r0, [sp, #4]
    eca8:	000e      	movs	r6, r1
    ecaa:	9202      	str	r2, [sp, #8]
    ecac:	001d      	movs	r5, r3
    ecae:	ab0e      	add	r3, sp, #56	; 0x38
    ecb0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    ecb2:	2c00      	cmp	r4, #0
    ecb4:	d064      	beq.n	ed80 <Socket_ReadSocketData+0xe8>
    ecb6:	0103      	lsls	r3, r0, #4
    ecb8:	4935      	ldr	r1, [pc, #212]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ecba:	585b      	ldr	r3, [r3, r1]
    ecbc:	2b00      	cmp	r3, #0
    ecbe:	d05f      	beq.n	ed80 <Socket_ReadSocketData+0xe8>
    ecc0:	0101      	lsls	r1, r0, #4
    ecc2:	4b33      	ldr	r3, [pc, #204]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ecc4:	185b      	adds	r3, r3, r1
    ecc6:	889b      	ldrh	r3, [r3, #4]
    ecc8:	b29b      	uxth	r3, r3
    ecca:	2b00      	cmp	r3, #0
    eccc:	d058      	beq.n	ed80 <Socket_ReadSocketData+0xe8>
    ecce:	4b30      	ldr	r3, [pc, #192]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ecd0:	185b      	adds	r3, r3, r1
    ecd2:	7a9b      	ldrb	r3, [r3, #10]
    ecd4:	2b01      	cmp	r3, #1
    ecd6:	d153      	bne.n	ed80 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    ecd8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ecda:	4b2d      	ldr	r3, [pc, #180]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ecdc:	469b      	mov	fp, r3
    ecde:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ece0:	465b      	mov	r3, fp
    ece2:	220a      	movs	r2, #10
    ece4:	4690      	mov	r8, r2
    ece6:	44d8      	add	r8, fp
    ece8:	468a      	mov	sl, r1
    ecea:	9500      	str	r5, [sp, #0]
    ecec:	9303      	str	r3, [sp, #12]
    ecee:	e015      	b.n	ed1c <Socket_ReadSocketData+0x84>
    ecf0:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    ecf2:	2301      	movs	r3, #1
    ecf4:	e01c      	b.n	ed30 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ecf6:	3301      	adds	r3, #1
    ecf8:	2200      	movs	r2, #0
    ecfa:	2100      	movs	r1, #0
    ecfc:	2000      	movs	r0, #0
    ecfe:	4c25      	ldr	r4, [pc, #148]	; (ed94 <Socket_ReadSocketData+0xfc>)
    ed00:	47a0      	blx	r4
    ed02:	e03d      	b.n	ed80 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ed04:	4824      	ldr	r0, [pc, #144]	; (ed98 <Socket_ReadSocketData+0x100>)
    ed06:	4d25      	ldr	r5, [pc, #148]	; (ed9c <Socket_ReadSocketData+0x104>)
    ed08:	47a8      	blx	r5
    ed0a:	0021      	movs	r1, r4
    ed0c:	4824      	ldr	r0, [pc, #144]	; (eda0 <Socket_ReadSocketData+0x108>)
    ed0e:	47a8      	blx	r5
    ed10:	200d      	movs	r0, #13
    ed12:	4b24      	ldr	r3, [pc, #144]	; (eda4 <Socket_ReadSocketData+0x10c>)
    ed14:	4798      	blx	r3
				break;
    ed16:	e033      	b.n	ed80 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    ed18:	2c00      	cmp	r4, #0
    ed1a:	d031      	beq.n	ed80 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ed1c:	465b      	mov	r3, fp
    ed1e:	889b      	ldrh	r3, [r3, #4]
    ed20:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    ed22:	b21b      	sxth	r3, r3
    ed24:	2b00      	cmp	r3, #0
    ed26:	dde3      	ble.n	ecf0 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    ed28:	9b03      	ldr	r3, [sp, #12]
    ed2a:	889d      	ldrh	r5, [r3, #4]
    ed2c:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    ed2e:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    ed30:	4a17      	ldr	r2, [pc, #92]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ed32:	4651      	mov	r1, sl
    ed34:	5889      	ldr	r1, [r1, r2]
    ed36:	002a      	movs	r2, r5
    ed38:	9800      	ldr	r0, [sp, #0]
    ed3a:	4f16      	ldr	r7, [pc, #88]	; (ed94 <Socket_ReadSocketData+0xfc>)
    ed3c:	47b8      	blx	r7
    ed3e:	2800      	cmp	r0, #0
    ed40:	d1e0      	bne.n	ed04 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ed42:	4b13      	ldr	r3, [pc, #76]	; (ed90 <Socket_ReadSocketData+0xf8>)
    ed44:	4652      	mov	r2, sl
    ed46:	58d3      	ldr	r3, [r2, r3]
    ed48:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ed4a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ed4c:	88f3      	ldrh	r3, [r6, #6]
    ed4e:	1b5b      	subs	r3, r3, r5
    ed50:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    ed52:	4b15      	ldr	r3, [pc, #84]	; (eda8 <Socket_ReadSocketData+0x110>)
    ed54:	681b      	ldr	r3, [r3, #0]
    ed56:	2b00      	cmp	r3, #0
    ed58:	d005      	beq.n	ed66 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ed5a:	4b13      	ldr	r3, [pc, #76]	; (eda8 <Socket_ReadSocketData+0x110>)
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	0032      	movs	r2, r6
    ed60:	9902      	ldr	r1, [sp, #8]
    ed62:	9801      	ldr	r0, [sp, #4]
    ed64:	4798      	blx	r3
				u16ReadCount -= u16Read;
    ed66:	1b64      	subs	r4, r4, r5
    ed68:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    ed6a:	9b00      	ldr	r3, [sp, #0]
    ed6c:	469c      	mov	ip, r3
    ed6e:	44ac      	add	ip, r5
    ed70:	4663      	mov	r3, ip
    ed72:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ed74:	4643      	mov	r3, r8
    ed76:	781b      	ldrb	r3, [r3, #0]
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d1cd      	bne.n	ed18 <Socket_ReadSocketData+0x80>
    ed7c:	2c00      	cmp	r4, #0
    ed7e:	d1ba      	bne.n	ecf6 <Socket_ReadSocketData+0x5e>
	}
}
    ed80:	b005      	add	sp, #20
    ed82:	bc3c      	pop	{r2, r3, r4, r5}
    ed84:	4690      	mov	r8, r2
    ed86:	4699      	mov	r9, r3
    ed88:	46a2      	mov	sl, r4
    ed8a:	46ab      	mov	fp, r5
    ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed8e:	46c0      	nop			; (mov r8, r8)
    ed90:	200013ac 	.word	0x200013ac
    ed94:	0000d041 	.word	0x0000d041
    ed98:	00018ad8 	.word	0x00018ad8
    ed9c:	00017111 	.word	0x00017111
    eda0:	0001953c 	.word	0x0001953c
    eda4:	00017145 	.word	0x00017145
    eda8:	2000145c 	.word	0x2000145c

0000edac <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    edac:	b5f0      	push	{r4, r5, r6, r7, lr}
    edae:	46d6      	mov	lr, sl
    edb0:	464f      	mov	r7, r9
    edb2:	4646      	mov	r6, r8
    edb4:	b5c0      	push	{r6, r7, lr}
    edb6:	b09a      	sub	sp, #104	; 0x68
    edb8:	000d      	movs	r5, r1
    edba:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    edbc:	2841      	cmp	r0, #65	; 0x41
    edbe:	d039      	beq.n	ee34 <m2m_ip_cb+0x88>
    edc0:	2854      	cmp	r0, #84	; 0x54
    edc2:	d037      	beq.n	ee34 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    edc4:	2842      	cmp	r0, #66	; 0x42
    edc6:	d053      	beq.n	ee70 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    edc8:	2843      	cmp	r0, #67	; 0x43
    edca:	d06a      	beq.n	eea2 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    edcc:	2844      	cmp	r0, #68	; 0x44
    edce:	d100      	bne.n	edd2 <m2m_ip_cb+0x26>
    edd0:	e0af      	b.n	ef32 <m2m_ip_cb+0x186>
    edd2:	284b      	cmp	r0, #75	; 0x4b
    edd4:	d100      	bne.n	edd8 <m2m_ip_cb+0x2c>
    edd6:	e0ac      	b.n	ef32 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    edd8:	284a      	cmp	r0, #74	; 0x4a
    edda:	d100      	bne.n	edde <m2m_ip_cb+0x32>
    eddc:	e0cf      	b.n	ef7e <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    edde:	2846      	cmp	r0, #70	; 0x46
    ede0:	d100      	bne.n	ede4 <m2m_ip_cb+0x38>
    ede2:	e0e5      	b.n	efb0 <m2m_ip_cb+0x204>
    ede4:	2848      	cmp	r0, #72	; 0x48
    ede6:	d100      	bne.n	edea <m2m_ip_cb+0x3e>
    ede8:	e10e      	b.n	f008 <m2m_ip_cb+0x25c>
    edea:	284d      	cmp	r0, #77	; 0x4d
    edec:	d100      	bne.n	edf0 <m2m_ip_cb+0x44>
    edee:	e0dc      	b.n	efaa <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    edf0:	2845      	cmp	r0, #69	; 0x45
    edf2:	d100      	bne.n	edf6 <m2m_ip_cb+0x4a>
    edf4:	e12c      	b.n	f050 <m2m_ip_cb+0x2a4>
    edf6:	2847      	cmp	r0, #71	; 0x47
    edf8:	d100      	bne.n	edfc <m2m_ip_cb+0x50>
    edfa:	e14d      	b.n	f098 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    edfc:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    edfe:	284c      	cmp	r0, #76	; 0x4c
    ee00:	d100      	bne.n	ee04 <m2m_ip_cb+0x58>
    ee02:	e126      	b.n	f052 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    ee04:	2852      	cmp	r0, #82	; 0x52
    ee06:	d12d      	bne.n	ee64 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    ee08:	2301      	movs	r3, #1
    ee0a:	2214      	movs	r2, #20
    ee0c:	a909      	add	r1, sp, #36	; 0x24
    ee0e:	0020      	movs	r0, r4
    ee10:	4ca2      	ldr	r4, [pc, #648]	; (f09c <m2m_ip_cb+0x2f0>)
    ee12:	47a0      	blx	r4
    ee14:	2800      	cmp	r0, #0
    ee16:	d125      	bne.n	ee64 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    ee18:	4ba1      	ldr	r3, [pc, #644]	; (f0a0 <m2m_ip_cb+0x2f4>)
    ee1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ee1c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    ee1e:	681b      	ldr	r3, [r3, #0]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d01f      	beq.n	ee64 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    ee24:	4b9e      	ldr	r3, [pc, #632]	; (f0a0 <m2m_ip_cb+0x2f4>)
    ee26:	681c      	ldr	r4, [r3, #0]
    ee28:	ab09      	add	r3, sp, #36	; 0x24
    ee2a:	7c1a      	ldrb	r2, [r3, #16]
    ee2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ee2e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ee30:	47a0      	blx	r4
			}
		}
	}
}
    ee32:	e017      	b.n	ee64 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    ee34:	2300      	movs	r3, #0
    ee36:	2204      	movs	r2, #4
    ee38:	a909      	add	r1, sp, #36	; 0x24
    ee3a:	0020      	movs	r0, r4
    ee3c:	4c97      	ldr	r4, [pc, #604]	; (f09c <m2m_ip_cb+0x2f0>)
    ee3e:	47a0      	blx	r4
    ee40:	2800      	cmp	r0, #0
    ee42:	d10f      	bne.n	ee64 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    ee44:	ab09      	add	r3, sp, #36	; 0x24
    ee46:	785a      	ldrb	r2, [r3, #1]
    ee48:	ab05      	add	r3, sp, #20
    ee4a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ee4c:	4b95      	ldr	r3, [pc, #596]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ee4e:	681b      	ldr	r3, [r3, #0]
    ee50:	2b00      	cmp	r3, #0
    ee52:	d007      	beq.n	ee64 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    ee54:	4b93      	ldr	r3, [pc, #588]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ee56:	681b      	ldr	r3, [r3, #0]
    ee58:	aa09      	add	r2, sp, #36	; 0x24
    ee5a:	2000      	movs	r0, #0
    ee5c:	5610      	ldrsb	r0, [r2, r0]
    ee5e:	aa05      	add	r2, sp, #20
    ee60:	2101      	movs	r1, #1
    ee62:	4798      	blx	r3
}
    ee64:	b01a      	add	sp, #104	; 0x68
    ee66:	bc1c      	pop	{r2, r3, r4}
    ee68:	4690      	mov	r8, r2
    ee6a:	4699      	mov	r9, r3
    ee6c:	46a2      	mov	sl, r4
    ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    ee70:	2300      	movs	r3, #0
    ee72:	2204      	movs	r2, #4
    ee74:	a909      	add	r1, sp, #36	; 0x24
    ee76:	0020      	movs	r0, r4
    ee78:	4c88      	ldr	r4, [pc, #544]	; (f09c <m2m_ip_cb+0x2f0>)
    ee7a:	47a0      	blx	r4
    ee7c:	2800      	cmp	r0, #0
    ee7e:	d1f1      	bne.n	ee64 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    ee80:	ab09      	add	r3, sp, #36	; 0x24
    ee82:	785a      	ldrb	r2, [r3, #1]
    ee84:	ab05      	add	r3, sp, #20
    ee86:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ee88:	4b86      	ldr	r3, [pc, #536]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ee8a:	681b      	ldr	r3, [r3, #0]
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d0e9      	beq.n	ee64 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    ee90:	4b84      	ldr	r3, [pc, #528]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ee92:	681b      	ldr	r3, [r3, #0]
    ee94:	aa09      	add	r2, sp, #36	; 0x24
    ee96:	2000      	movs	r0, #0
    ee98:	5610      	ldrsb	r0, [r2, r0]
    ee9a:	aa05      	add	r2, sp, #20
    ee9c:	2102      	movs	r1, #2
    ee9e:	4798      	blx	r3
    eea0:	e7e0      	b.n	ee64 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    eea2:	2300      	movs	r3, #0
    eea4:	220c      	movs	r2, #12
    eea6:	a905      	add	r1, sp, #20
    eea8:	0020      	movs	r0, r4
    eeaa:	4c7c      	ldr	r4, [pc, #496]	; (f09c <m2m_ip_cb+0x2f0>)
    eeac:	47a0      	blx	r4
    eeae:	2800      	cmp	r0, #0
    eeb0:	d1d8      	bne.n	ee64 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    eeb2:	ab05      	add	r3, sp, #20
    eeb4:	2209      	movs	r2, #9
    eeb6:	569a      	ldrsb	r2, [r3, r2]
    eeb8:	2a00      	cmp	r2, #0
    eeba:	db24      	blt.n	ef06 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    eebc:	0018      	movs	r0, r3
    eebe:	2108      	movs	r1, #8
    eec0:	5659      	ldrsb	r1, [r3, r1]
    eec2:	4b79      	ldr	r3, [pc, #484]	; (f0a8 <m2m_ip_cb+0x2fc>)
    eec4:	0109      	lsls	r1, r1, #4
    eec6:	1859      	adds	r1, r3, r1
    eec8:	7ac9      	ldrb	r1, [r1, #11]
    eeca:	b2c9      	uxtb	r1, r1
    eecc:	0114      	lsls	r4, r2, #4
    eece:	191b      	adds	r3, r3, r4
    eed0:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    eed2:	2101      	movs	r1, #1
    eed4:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    eed6:	8941      	ldrh	r1, [r0, #10]
    eed8:	3908      	subs	r1, #8
    eeda:	b289      	uxth	r1, r1
    eedc:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    eede:	4973      	ldr	r1, [pc, #460]	; (f0ac <m2m_ip_cb+0x300>)
    eee0:	880b      	ldrh	r3, [r1, #0]
    eee2:	3301      	adds	r3, #1
    eee4:	b29b      	uxth	r3, r3
    eee6:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    eee8:	880b      	ldrh	r3, [r1, #0]
    eeea:	b29b      	uxth	r3, r3
    eeec:	2b00      	cmp	r3, #0
    eeee:	d103      	bne.n	eef8 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    eef0:	880b      	ldrh	r3, [r1, #0]
    eef2:	3301      	adds	r3, #1
    eef4:	b29b      	uxth	r3, r3
    eef6:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    eef8:	4b6c      	ldr	r3, [pc, #432]	; (f0ac <m2m_ip_cb+0x300>)
    eefa:	8819      	ldrh	r1, [r3, #0]
    eefc:	b289      	uxth	r1, r1
    eefe:	0110      	lsls	r0, r2, #4
    ef00:	4b69      	ldr	r3, [pc, #420]	; (f0a8 <m2m_ip_cb+0x2fc>)
    ef02:	181b      	adds	r3, r3, r0
    ef04:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    ef06:	ab09      	add	r3, sp, #36	; 0x24
    ef08:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    ef0a:	2202      	movs	r2, #2
    ef0c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    ef0e:	aa05      	add	r2, sp, #20
    ef10:	8851      	ldrh	r1, [r2, #2]
    ef12:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    ef14:	9a06      	ldr	r2, [sp, #24]
    ef16:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    ef18:	4b62      	ldr	r3, [pc, #392]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ef1a:	681b      	ldr	r3, [r3, #0]
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d0a1      	beq.n	ee64 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    ef20:	4b60      	ldr	r3, [pc, #384]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ef22:	681b      	ldr	r3, [r3, #0]
    ef24:	aa05      	add	r2, sp, #20
    ef26:	2008      	movs	r0, #8
    ef28:	5610      	ldrsb	r0, [r2, r0]
    ef2a:	aa09      	add	r2, sp, #36	; 0x24
    ef2c:	2104      	movs	r1, #4
    ef2e:	4798      	blx	r3
    ef30:	e798      	b.n	ee64 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    ef32:	2300      	movs	r3, #0
    ef34:	2204      	movs	r2, #4
    ef36:	a909      	add	r1, sp, #36	; 0x24
    ef38:	0020      	movs	r0, r4
    ef3a:	4c58      	ldr	r4, [pc, #352]	; (f09c <m2m_ip_cb+0x2f0>)
    ef3c:	47a0      	blx	r4
    ef3e:	2800      	cmp	r0, #0
    ef40:	d000      	beq.n	ef44 <m2m_ip_cb+0x198>
    ef42:	e78f      	b.n	ee64 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    ef44:	ab09      	add	r3, sp, #36	; 0x24
    ef46:	2000      	movs	r0, #0
    ef48:	5618      	ldrsb	r0, [r3, r0]
    ef4a:	aa05      	add	r2, sp, #20
    ef4c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    ef4e:	785b      	ldrb	r3, [r3, #1]
    ef50:	b25b      	sxtb	r3, r3
    ef52:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    ef54:	2b00      	cmp	r3, #0
    ef56:	d107      	bne.n	ef68 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    ef58:	ab09      	add	r3, sp, #36	; 0x24
    ef5a:	885b      	ldrh	r3, [r3, #2]
    ef5c:	3b08      	subs	r3, #8
    ef5e:	b29b      	uxth	r3, r3
    ef60:	0101      	lsls	r1, r0, #4
    ef62:	4a51      	ldr	r2, [pc, #324]	; (f0a8 <m2m_ip_cb+0x2fc>)
    ef64:	1852      	adds	r2, r2, r1
    ef66:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    ef68:	4b4e      	ldr	r3, [pc, #312]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	2b00      	cmp	r3, #0
    ef6e:	d100      	bne.n	ef72 <m2m_ip_cb+0x1c6>
    ef70:	e778      	b.n	ee64 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    ef72:	4b4c      	ldr	r3, [pc, #304]	; (f0a4 <m2m_ip_cb+0x2f8>)
    ef74:	681b      	ldr	r3, [r3, #0]
    ef76:	aa05      	add	r2, sp, #20
    ef78:	2105      	movs	r1, #5
    ef7a:	4798      	blx	r3
	{
    ef7c:	e772      	b.n	ee64 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    ef7e:	2300      	movs	r3, #0
    ef80:	2244      	movs	r2, #68	; 0x44
    ef82:	a909      	add	r1, sp, #36	; 0x24
    ef84:	0020      	movs	r0, r4
    ef86:	4c45      	ldr	r4, [pc, #276]	; (f09c <m2m_ip_cb+0x2f0>)
    ef88:	47a0      	blx	r4
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d000      	beq.n	ef90 <m2m_ip_cb+0x1e4>
    ef8e:	e769      	b.n	ee64 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    ef90:	4b47      	ldr	r3, [pc, #284]	; (f0b0 <m2m_ip_cb+0x304>)
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	2b00      	cmp	r3, #0
    ef96:	d100      	bne.n	ef9a <m2m_ip_cb+0x1ee>
    ef98:	e764      	b.n	ee64 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    ef9a:	4b45      	ldr	r3, [pc, #276]	; (f0b0 <m2m_ip_cb+0x304>)
    ef9c:	681b      	ldr	r3, [r3, #0]
    ef9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    efa0:	9203      	str	r2, [sp, #12]
    efa2:	0011      	movs	r1, r2
    efa4:	a809      	add	r0, sp, #36	; 0x24
    efa6:	4798      	blx	r3
    efa8:	e75c      	b.n	ee64 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    efaa:	2306      	movs	r3, #6
    efac:	469a      	mov	sl, r3
    efae:	e001      	b.n	efb4 <m2m_ip_cb+0x208>
    efb0:	2306      	movs	r3, #6
    efb2:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    efb4:	2300      	movs	r3, #0
    efb6:	2210      	movs	r2, #16
    efb8:	a905      	add	r1, sp, #20
    efba:	0020      	movs	r0, r4
    efbc:	4f37      	ldr	r7, [pc, #220]	; (f09c <m2m_ip_cb+0x2f0>)
    efbe:	47b8      	blx	r7
    efc0:	2800      	cmp	r0, #0
    efc2:	d000      	beq.n	efc6 <m2m_ip_cb+0x21a>
    efc4:	e74e      	b.n	ee64 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    efc6:	aa05      	add	r2, sp, #20
    efc8:	200c      	movs	r0, #12
    efca:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    efcc:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    efce:	0107      	lsls	r7, r0, #4
    efd0:	4935      	ldr	r1, [pc, #212]	; (f0a8 <m2m_ip_cb+0x2fc>)
    efd2:	19c9      	adds	r1, r1, r7
    efd4:	2700      	movs	r7, #0
    efd6:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    efd8:	2608      	movs	r6, #8
    efda:	5f97      	ldrsh	r7, [r2, r6]
    efdc:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    efde:	8957      	ldrh	r7, [r2, #10]
    efe0:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    efe2:	af09      	add	r7, sp, #36	; 0x24
    efe4:	8856      	ldrh	r6, [r2, #2]
    efe6:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    efe8:	9a06      	ldr	r2, [sp, #24]
    efea:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    efec:	88ca      	ldrh	r2, [r1, #6]
    efee:	b292      	uxth	r2, r2
    eff0:	4293      	cmp	r3, r2
    eff2:	d00c      	beq.n	f00e <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    eff4:	2d10      	cmp	r5, #16
    eff6:	d800      	bhi.n	effa <m2m_ip_cb+0x24e>
    eff8:	e734      	b.n	ee64 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    effa:	2301      	movs	r3, #1
    effc:	2200      	movs	r2, #0
    effe:	2100      	movs	r1, #0
    f000:	2000      	movs	r0, #0
    f002:	4c26      	ldr	r4, [pc, #152]	; (f09c <m2m_ip_cb+0x2f0>)
    f004:	47a0      	blx	r4
	{
    f006:	e72d      	b.n	ee64 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    f008:	2309      	movs	r3, #9
    f00a:	469a      	mov	sl, r3
    f00c:	e7d2      	b.n	efb4 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    f00e:	4643      	mov	r3, r8
    f010:	2b00      	cmp	r3, #0
    f012:	dd01      	ble.n	f018 <m2m_ip_cb+0x26c>
    f014:	45a8      	cmp	r8, r5
    f016:	db0f      	blt.n	f038 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    f018:	ab09      	add	r3, sp, #36	; 0x24
    f01a:	4642      	mov	r2, r8
    f01c:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    f01e:	2300      	movs	r3, #0
    f020:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    f022:	4b20      	ldr	r3, [pc, #128]	; (f0a4 <m2m_ip_cb+0x2f8>)
    f024:	681b      	ldr	r3, [r3, #0]
    f026:	2b00      	cmp	r3, #0
    f028:	d100      	bne.n	f02c <m2m_ip_cb+0x280>
    f02a:	e71b      	b.n	ee64 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    f02c:	4b1d      	ldr	r3, [pc, #116]	; (f0a4 <m2m_ip_cb+0x2f8>)
    f02e:	681b      	ldr	r3, [r3, #0]
    f030:	aa09      	add	r2, sp, #36	; 0x24
    f032:	4651      	mov	r1, sl
    f034:	4798      	blx	r3
    f036:	e715      	b.n	ee64 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    f038:	0023      	movs	r3, r4
    f03a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    f03c:	4642      	mov	r2, r8
    f03e:	4669      	mov	r1, sp
    f040:	818a      	strh	r2, [r1, #12]
    f042:	898a      	ldrh	r2, [r1, #12]
    f044:	9200      	str	r2, [sp, #0]
    f046:	4652      	mov	r2, sl
    f048:	0039      	movs	r1, r7
    f04a:	4c1a      	ldr	r4, [pc, #104]	; (f0b4 <m2m_ip_cb+0x308>)
    f04c:	47a0      	blx	r4
    f04e:	e709      	b.n	ee64 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    f050:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    f052:	2300      	movs	r3, #0
    f054:	2208      	movs	r2, #8
    f056:	a909      	add	r1, sp, #36	; 0x24
    f058:	0020      	movs	r0, r4
    f05a:	4c10      	ldr	r4, [pc, #64]	; (f09c <m2m_ip_cb+0x2f0>)
    f05c:	47a0      	blx	r4
    f05e:	2800      	cmp	r0, #0
    f060:	d000      	beq.n	f064 <m2m_ip_cb+0x2b8>
    f062:	e6ff      	b.n	ee64 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    f064:	ab09      	add	r3, sp, #36	; 0x24
    f066:	2000      	movs	r0, #0
    f068:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    f06a:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    f06c:	8859      	ldrh	r1, [r3, #2]
    f06e:	ab05      	add	r3, sp, #20
    f070:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    f072:	0101      	lsls	r1, r0, #4
    f074:	4b0c      	ldr	r3, [pc, #48]	; (f0a8 <m2m_ip_cb+0x2fc>)
    f076:	185b      	adds	r3, r3, r1
    f078:	88db      	ldrh	r3, [r3, #6]
    f07a:	b29b      	uxth	r3, r3
    f07c:	429a      	cmp	r2, r3
    f07e:	d000      	beq.n	f082 <m2m_ip_cb+0x2d6>
    f080:	e6f0      	b.n	ee64 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    f082:	4b08      	ldr	r3, [pc, #32]	; (f0a4 <m2m_ip_cb+0x2f8>)
    f084:	681b      	ldr	r3, [r3, #0]
    f086:	2b00      	cmp	r3, #0
    f088:	d100      	bne.n	f08c <m2m_ip_cb+0x2e0>
    f08a:	e6eb      	b.n	ee64 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    f08c:	4b05      	ldr	r3, [pc, #20]	; (f0a4 <m2m_ip_cb+0x2f8>)
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	aa05      	add	r2, sp, #20
    f092:	0029      	movs	r1, r5
    f094:	4798      	blx	r3
	{
    f096:	e6e5      	b.n	ee64 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    f098:	2508      	movs	r5, #8
    f09a:	e7da      	b.n	f052 <m2m_ip_cb+0x2a6>
    f09c:	0000d041 	.word	0x0000d041
    f0a0:	20001460 	.word	0x20001460
    f0a4:	2000145c 	.word	0x2000145c
    f0a8:	200013ac 	.word	0x200013ac
    f0ac:	200003d2 	.word	0x200003d2
    f0b0:	20001464 	.word	0x20001464
    f0b4:	0000ec99 	.word	0x0000ec99

0000f0b8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    f0b8:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    f0ba:	4b0a      	ldr	r3, [pc, #40]	; (f0e4 <socketInit+0x2c>)
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d000      	beq.n	f0c4 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    f0c2:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f0c4:	22b0      	movs	r2, #176	; 0xb0
    f0c6:	2100      	movs	r1, #0
    f0c8:	4807      	ldr	r0, [pc, #28]	; (f0e8 <socketInit+0x30>)
    f0ca:	4b08      	ldr	r3, [pc, #32]	; (f0ec <socketInit+0x34>)
    f0cc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    f0ce:	4908      	ldr	r1, [pc, #32]	; (f0f0 <socketInit+0x38>)
    f0d0:	2002      	movs	r0, #2
    f0d2:	4b08      	ldr	r3, [pc, #32]	; (f0f4 <socketInit+0x3c>)
    f0d4:	4798      	blx	r3
		gbSocketInit	= 1;
    f0d6:	2201      	movs	r2, #1
    f0d8:	4b02      	ldr	r3, [pc, #8]	; (f0e4 <socketInit+0x2c>)
    f0da:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    f0dc:	2200      	movs	r2, #0
    f0de:	4b06      	ldr	r3, [pc, #24]	; (f0f8 <socketInit+0x40>)
    f0e0:	801a      	strh	r2, [r3, #0]
}
    f0e2:	e7ee      	b.n	f0c2 <socketInit+0xa>
    f0e4:	200003d1 	.word	0x200003d1
    f0e8:	200013ac 	.word	0x200013ac
    f0ec:	0000c915 	.word	0x0000c915
    f0f0:	0000edad 	.word	0x0000edad
    f0f4:	0000d129 	.word	0x0000d129
    f0f8:	200003d2 	.word	0x200003d2

0000f0fc <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    f0fc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    f0fe:	22b0      	movs	r2, #176	; 0xb0
    f100:	2100      	movs	r1, #0
    f102:	4807      	ldr	r0, [pc, #28]	; (f120 <socketDeinit+0x24>)
    f104:	4b07      	ldr	r3, [pc, #28]	; (f124 <socketDeinit+0x28>)
    f106:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    f108:	2100      	movs	r1, #0
    f10a:	2002      	movs	r0, #2
    f10c:	4b06      	ldr	r3, [pc, #24]	; (f128 <socketDeinit+0x2c>)
    f10e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    f110:	2300      	movs	r3, #0
    f112:	4a06      	ldr	r2, [pc, #24]	; (f12c <socketDeinit+0x30>)
    f114:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    f116:	4a06      	ldr	r2, [pc, #24]	; (f130 <socketDeinit+0x34>)
    f118:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    f11a:	4a06      	ldr	r2, [pc, #24]	; (f134 <socketDeinit+0x38>)
    f11c:	7013      	strb	r3, [r2, #0]
}
    f11e:	bd10      	pop	{r4, pc}
    f120:	200013ac 	.word	0x200013ac
    f124:	0000c915 	.word	0x0000c915
    f128:	0000d129 	.word	0x0000d129
    f12c:	2000145c 	.word	0x2000145c
    f130:	20001464 	.word	0x20001464
    f134:	200003d1 	.word	0x200003d1

0000f138 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    f138:	4b02      	ldr	r3, [pc, #8]	; (f144 <registerSocketCallback+0xc>)
    f13a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    f13c:	4b02      	ldr	r3, [pc, #8]	; (f148 <registerSocketCallback+0x10>)
    f13e:	6019      	str	r1, [r3, #0]
}
    f140:	4770      	bx	lr
    f142:	46c0      	nop			; (mov r8, r8)
    f144:	2000145c 	.word	0x2000145c
    f148:	20001464 	.word	0x20001464

0000f14c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    f14c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f14e:	46d6      	mov	lr, sl
    f150:	4647      	mov	r7, r8
    f152:	b580      	push	{r7, lr}
    f154:	b089      	sub	sp, #36	; 0x24
    f156:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    f158:	2802      	cmp	r0, #2
    f15a:	d000      	beq.n	f15e <socket+0x12>
    f15c:	e09c      	b.n	f298 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    f15e:	2901      	cmp	r1, #1
    f160:	d00a      	beq.n	f178 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    f162:	2902      	cmp	r1, #2
    f164:	d100      	bne.n	f168 <socket+0x1c>
    f166:	e070      	b.n	f24a <socket+0xfe>
	SOCKET					sock = -1;
    f168:	2501      	movs	r5, #1
    f16a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    f16c:	0028      	movs	r0, r5
    f16e:	b009      	add	sp, #36	; 0x24
    f170:	bc0c      	pop	{r2, r3}
    f172:	4690      	mov	r8, r2
    f174:	469a      	mov	sl, r3
    f176:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    f178:	4c49      	ldr	r4, [pc, #292]	; (f2a0 <socket+0x154>)
    f17a:	7827      	ldrb	r7, [r4, #0]
    f17c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f17e:	7826      	ldrb	r6, [r4, #0]
    f180:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f182:	7820      	ldrb	r0, [r4, #0]
    f184:	3001      	adds	r0, #1
    f186:	3106      	adds	r1, #6
    f188:	4b46      	ldr	r3, [pc, #280]	; (f2a4 <socket+0x158>)
    f18a:	4798      	blx	r3
    f18c:	b2c9      	uxtb	r1, r1
    f18e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    f190:	0132      	lsls	r2, r6, #4
    f192:	4b45      	ldr	r3, [pc, #276]	; (f2a8 <socket+0x15c>)
    f194:	189b      	adds	r3, r3, r2
    f196:	7a9b      	ldrb	r3, [r3, #10]
    f198:	2506      	movs	r5, #6
    f19a:	2b00      	cmp	r3, #0
    f19c:	d018      	beq.n	f1d0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    f19e:	4e40      	ldr	r6, [pc, #256]	; (f2a0 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f1a0:	4b40      	ldr	r3, [pc, #256]	; (f2a4 <socket+0x158>)
    f1a2:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    f1a4:	4b40      	ldr	r3, [pc, #256]	; (f2a8 <socket+0x15c>)
    f1a6:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    f1a8:	7837      	ldrb	r7, [r6, #0]
    f1aa:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f1ac:	7834      	ldrb	r4, [r6, #0]
    f1ae:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    f1b0:	7830      	ldrb	r0, [r6, #0]
    f1b2:	3001      	adds	r0, #1
    f1b4:	2107      	movs	r1, #7
    f1b6:	47d0      	blx	sl
    f1b8:	b2c9      	uxtb	r1, r1
    f1ba:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    f1bc:	0123      	lsls	r3, r4, #4
    f1be:	4443      	add	r3, r8
    f1c0:	7a9b      	ldrb	r3, [r3, #10]
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d007      	beq.n	f1d6 <socket+0x8a>
    f1c6:	3d01      	subs	r5, #1
    f1c8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    f1ca:	2d00      	cmp	r5, #0
    f1cc:	d1ec      	bne.n	f1a8 <socket+0x5c>
    f1ce:	e7cb      	b.n	f168 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    f1d0:	4b35      	ldr	r3, [pc, #212]	; (f2a8 <socket+0x15c>)
    f1d2:	18d4      	adds	r4, r2, r3
    f1d4:	e002      	b.n	f1dc <socket+0x90>
    f1d6:	0124      	lsls	r4, r4, #4
    f1d8:	4b33      	ldr	r3, [pc, #204]	; (f2a8 <socket+0x15c>)
    f1da:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    f1dc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    f1de:	2d00      	cmp	r5, #0
    f1e0:	dbc4      	blt.n	f16c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    f1e2:	2210      	movs	r2, #16
    f1e4:	2100      	movs	r1, #0
    f1e6:	0020      	movs	r0, r4
    f1e8:	4b30      	ldr	r3, [pc, #192]	; (f2ac <socket+0x160>)
    f1ea:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    f1ec:	2301      	movs	r3, #1
    f1ee:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    f1f0:	4a2f      	ldr	r2, [pc, #188]	; (f2b0 <socket+0x164>)
    f1f2:	8813      	ldrh	r3, [r2, #0]
    f1f4:	3301      	adds	r3, #1
    f1f6:	b29b      	uxth	r3, r3
    f1f8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    f1fa:	8813      	ldrh	r3, [r2, #0]
    f1fc:	b29b      	uxth	r3, r3
    f1fe:	2b00      	cmp	r3, #0
    f200:	d103      	bne.n	f20a <socket+0xbe>
				++gu16SessionID;
    f202:	8813      	ldrh	r3, [r2, #0]
    f204:	3301      	adds	r3, #1
    f206:	b29b      	uxth	r3, r3
    f208:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    f20a:	4e29      	ldr	r6, [pc, #164]	; (f2b0 <socket+0x164>)
    f20c:	8833      	ldrh	r3, [r6, #0]
    f20e:	b29b      	uxth	r3, r3
    f210:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    f212:	4828      	ldr	r0, [pc, #160]	; (f2b4 <socket+0x168>)
    f214:	4f28      	ldr	r7, [pc, #160]	; (f2b8 <socket+0x16c>)
    f216:	47b8      	blx	r7
    f218:	8832      	ldrh	r2, [r6, #0]
    f21a:	b292      	uxth	r2, r2
    f21c:	0029      	movs	r1, r5
    f21e:	4827      	ldr	r0, [pc, #156]	; (f2bc <socket+0x170>)
    f220:	47b8      	blx	r7
    f222:	200d      	movs	r0, #13
    f224:	4b26      	ldr	r3, [pc, #152]	; (f2c0 <socket+0x174>)
    f226:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    f228:	9b05      	ldr	r3, [sp, #20]
    f22a:	07db      	lsls	r3, r3, #31
    f22c:	d59e      	bpl.n	f16c <socket+0x20>
				strSSLCreate.sslSock = sock;
    f22e:	aa07      	add	r2, sp, #28
    f230:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    f232:	2321      	movs	r3, #33	; 0x21
    f234:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    f236:	2300      	movs	r3, #0
    f238:	9302      	str	r3, [sp, #8]
    f23a:	9301      	str	r3, [sp, #4]
    f23c:	9300      	str	r3, [sp, #0]
    f23e:	3304      	adds	r3, #4
    f240:	2150      	movs	r1, #80	; 0x50
    f242:	2002      	movs	r0, #2
    f244:	4c1f      	ldr	r4, [pc, #124]	; (f2c4 <socket+0x178>)
    f246:	47a0      	blx	r4
    f248:	e790      	b.n	f16c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    f24a:	4b1f      	ldr	r3, [pc, #124]	; (f2c8 <socket+0x17c>)
    f24c:	781d      	ldrb	r5, [r3, #0]
    f24e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f250:	781c      	ldrb	r4, [r3, #0]
    f252:	0124      	lsls	r4, r4, #4
    f254:	4a1d      	ldr	r2, [pc, #116]	; (f2cc <socket+0x180>)
    f256:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f258:	7819      	ldrb	r1, [r3, #0]
    f25a:	3101      	adds	r1, #1
    f25c:	2203      	movs	r2, #3
    f25e:	400a      	ands	r2, r1
    f260:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    f262:	7aa3      	ldrb	r3, [r4, #10]
    f264:	2b00      	cmp	r3, #0
    f266:	d014      	beq.n	f292 <socket+0x146>
    f268:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    f26a:	4917      	ldr	r1, [pc, #92]	; (f2c8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f26c:	4f17      	ldr	r7, [pc, #92]	; (f2cc <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f26e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    f270:	780d      	ldrb	r5, [r1, #0]
    f272:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    f274:	780c      	ldrb	r4, [r1, #0]
    f276:	0124      	lsls	r4, r4, #4
    f278:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    f27a:	780b      	ldrb	r3, [r1, #0]
    f27c:	3301      	adds	r3, #1
    f27e:	4003      	ands	r3, r0
    f280:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    f282:	7aa3      	ldrb	r3, [r4, #10]
    f284:	2b00      	cmp	r3, #0
    f286:	d004      	beq.n	f292 <socket+0x146>
    f288:	3a01      	subs	r2, #1
    f28a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    f28c:	2a00      	cmp	r2, #0
    f28e:	d1ef      	bne.n	f270 <socket+0x124>
    f290:	e76a      	b.n	f168 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    f292:	3507      	adds	r5, #7
    f294:	b26d      	sxtb	r5, r5
					break;
    f296:	e7a2      	b.n	f1de <socket+0x92>
	SOCKET					sock = -1;
    f298:	2501      	movs	r5, #1
    f29a:	426d      	negs	r5, r5
    f29c:	e766      	b.n	f16c <socket+0x20>
    f29e:	46c0      	nop			; (mov r8, r8)
    f2a0:	200003d4 	.word	0x200003d4
    f2a4:	00016e9d 	.word	0x00016e9d
    f2a8:	200013ac 	.word	0x200013ac
    f2ac:	0000c915 	.word	0x0000c915
    f2b0:	200003d2 	.word	0x200003d2
    f2b4:	00018ad8 	.word	0x00018ad8
    f2b8:	00017111 	.word	0x00017111
    f2bc:	00019568 	.word	0x00019568
    f2c0:	00017145 	.word	0x00017145
    f2c4:	0000ca29 	.word	0x0000ca29
    f2c8:	200003d5 	.word	0x200003d5
    f2cc:	2000141c 	.word	0x2000141c

0000f2d0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    f2d0:	b570      	push	{r4, r5, r6, lr}
    f2d2:	b088      	sub	sp, #32
    f2d4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    f2d6:	db30      	blt.n	f33a <connect+0x6a>
    f2d8:	2900      	cmp	r1, #0
    f2da:	d031      	beq.n	f340 <connect+0x70>
    f2dc:	0100      	lsls	r0, r0, #4
    f2de:	4b1d      	ldr	r3, [pc, #116]	; (f354 <connect+0x84>)
    f2e0:	181b      	adds	r3, r3, r0
    f2e2:	7a9b      	ldrb	r3, [r3, #10]
    f2e4:	2b01      	cmp	r3, #1
    f2e6:	d12e      	bne.n	f346 <connect+0x76>
    f2e8:	2a00      	cmp	r2, #0
    f2ea:	d02f      	beq.n	f34c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f2ec:	4b19      	ldr	r3, [pc, #100]	; (f354 <connect+0x84>)
    f2ee:	181b      	adds	r3, r3, r0
    f2f0:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    f2f2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    f2f4:	07db      	lsls	r3, r3, #31
    f2f6:	d505      	bpl.n	f304 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    f2f8:	4b16      	ldr	r3, [pc, #88]	; (f354 <connect+0x84>)
    f2fa:	181b      	adds	r3, r3, r0
    f2fc:	7ada      	ldrb	r2, [r3, #11]
    f2fe:	ab05      	add	r3, sp, #20
    f300:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    f302:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    f304:	ad05      	add	r5, sp, #20
    f306:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    f308:	2208      	movs	r2, #8
    f30a:	0028      	movs	r0, r5
    f30c:	4b12      	ldr	r3, [pc, #72]	; (f358 <connect+0x88>)
    f30e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    f310:	0124      	lsls	r4, r4, #4
    f312:	4b10      	ldr	r3, [pc, #64]	; (f354 <connect+0x84>)
    f314:	191c      	adds	r4, r3, r4
    f316:	88e3      	ldrh	r3, [r4, #6]
    f318:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    f31a:	2300      	movs	r3, #0
    f31c:	9302      	str	r3, [sp, #8]
    f31e:	9301      	str	r3, [sp, #4]
    f320:	9300      	str	r3, [sp, #0]
    f322:	330c      	adds	r3, #12
    f324:	002a      	movs	r2, r5
    f326:	0031      	movs	r1, r6
    f328:	2002      	movs	r0, #2
    f32a:	4c0c      	ldr	r4, [pc, #48]	; (f35c <connect+0x8c>)
    f32c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f32e:	2800      	cmp	r0, #0
    f330:	d001      	beq.n	f336 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    f332:	2009      	movs	r0, #9
    f334:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    f336:	b008      	add	sp, #32
    f338:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f33a:	2006      	movs	r0, #6
    f33c:	4240      	negs	r0, r0
    f33e:	e7fa      	b.n	f336 <connect+0x66>
    f340:	2006      	movs	r0, #6
    f342:	4240      	negs	r0, r0
    f344:	e7f7      	b.n	f336 <connect+0x66>
    f346:	2006      	movs	r0, #6
    f348:	4240      	negs	r0, r0
    f34a:	e7f4      	b.n	f336 <connect+0x66>
    f34c:	2006      	movs	r0, #6
    f34e:	4240      	negs	r0, r0
    f350:	e7f1      	b.n	f336 <connect+0x66>
    f352:	46c0      	nop			; (mov r8, r8)
    f354:	200013ac 	.word	0x200013ac
    f358:	0000c901 	.word	0x0000c901
    f35c:	0000ca29 	.word	0x0000ca29

0000f360 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    f360:	b530      	push	{r4, r5, lr}
    f362:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    f364:	2800      	cmp	r0, #0
    f366:	db36      	blt.n	f3d6 <send+0x76>
    f368:	2900      	cmp	r1, #0
    f36a:	d037      	beq.n	f3dc <send+0x7c>
    f36c:	23af      	movs	r3, #175	; 0xaf
    f36e:	00db      	lsls	r3, r3, #3
    f370:	429a      	cmp	r2, r3
    f372:	d836      	bhi.n	f3e2 <send+0x82>
    f374:	0104      	lsls	r4, r0, #4
    f376:	4b1e      	ldr	r3, [pc, #120]	; (f3f0 <send+0x90>)
    f378:	191b      	adds	r3, r3, r4
    f37a:	7a9b      	ldrb	r3, [r3, #10]
    f37c:	2b01      	cmp	r3, #1
    f37e:	d133      	bne.n	f3e8 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    f380:	ab04      	add	r3, sp, #16
    f382:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    f384:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    f386:	0025      	movs	r5, r4
    f388:	4c19      	ldr	r4, [pc, #100]	; (f3f0 <send+0x90>)
    f38a:	1964      	adds	r4, r4, r5
    f38c:	88e4      	ldrh	r4, [r4, #6]
    f38e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    f390:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    f392:	2806      	cmp	r0, #6
    f394:	dd00      	ble.n	f398 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    f396:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f398:	0104      	lsls	r4, r0, #4
    f39a:	4b15      	ldr	r3, [pc, #84]	; (f3f0 <send+0x90>)
    f39c:	191b      	adds	r3, r3, r4
    f39e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    f3a0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f3a2:	07e4      	lsls	r4, r4, #31
    f3a4:	d505      	bpl.n	f3b2 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    f3a6:	0100      	lsls	r0, r0, #4
    f3a8:	4b11      	ldr	r3, [pc, #68]	; (f3f0 <send+0x90>)
    f3aa:	1818      	adds	r0, r3, r0
    f3ac:	8905      	ldrh	r5, [r0, #8]
    f3ae:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    f3b0:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    f3b2:	2080      	movs	r0, #128	; 0x80
    f3b4:	4318      	orrs	r0, r3
    f3b6:	9502      	str	r5, [sp, #8]
    f3b8:	9201      	str	r2, [sp, #4]
    f3ba:	9100      	str	r1, [sp, #0]
    f3bc:	2310      	movs	r3, #16
    f3be:	aa04      	add	r2, sp, #16
    f3c0:	0001      	movs	r1, r0
    f3c2:	2002      	movs	r0, #2
    f3c4:	4c0b      	ldr	r4, [pc, #44]	; (f3f4 <send+0x94>)
    f3c6:	47a0      	blx	r4
    f3c8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    f3ca:	2800      	cmp	r0, #0
    f3cc:	d000      	beq.n	f3d0 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    f3ce:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    f3d0:	0018      	movs	r0, r3
    f3d2:	b009      	add	sp, #36	; 0x24
    f3d4:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f3d6:	2306      	movs	r3, #6
    f3d8:	425b      	negs	r3, r3
    f3da:	e7f9      	b.n	f3d0 <send+0x70>
    f3dc:	2306      	movs	r3, #6
    f3de:	425b      	negs	r3, r3
    f3e0:	e7f6      	b.n	f3d0 <send+0x70>
    f3e2:	2306      	movs	r3, #6
    f3e4:	425b      	negs	r3, r3
    f3e6:	e7f3      	b.n	f3d0 <send+0x70>
    f3e8:	2306      	movs	r3, #6
    f3ea:	425b      	negs	r3, r3
    f3ec:	e7f0      	b.n	f3d0 <send+0x70>
    f3ee:	46c0      	nop			; (mov r8, r8)
    f3f0:	200013ac 	.word	0x200013ac
    f3f4:	0000ca29 	.word	0x0000ca29

0000f3f8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    f3f8:	b530      	push	{r4, r5, lr}
    f3fa:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    f3fc:	2800      	cmp	r0, #0
    f3fe:	db34      	blt.n	f46a <recv+0x72>
    f400:	2900      	cmp	r1, #0
    f402:	d035      	beq.n	f470 <recv+0x78>
    f404:	2a00      	cmp	r2, #0
    f406:	d036      	beq.n	f476 <recv+0x7e>
    f408:	0105      	lsls	r5, r0, #4
    f40a:	4c1e      	ldr	r4, [pc, #120]	; (f484 <recv+0x8c>)
    f40c:	1964      	adds	r4, r4, r5
    f40e:	7aa4      	ldrb	r4, [r4, #10]
    f410:	2c01      	cmp	r4, #1
    f412:	d133      	bne.n	f47c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    f414:	4c1b      	ldr	r4, [pc, #108]	; (f484 <recv+0x8c>)
    f416:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    f418:	1964      	adds	r4, r4, r5
    f41a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    f41c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    f41e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    f420:	2900      	cmp	r1, #0
    f422:	d11d      	bne.n	f460 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    f424:	2101      	movs	r1, #1
    f426:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f428:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    f42a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f42c:	07d2      	lsls	r2, r2, #31
    f42e:	d500      	bpl.n	f432 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    f430:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    f432:	2b00      	cmp	r3, #0
    f434:	d117      	bne.n	f466 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    f436:	3b01      	subs	r3, #1
    f438:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    f43a:	aa04      	add	r2, sp, #16
    f43c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    f43e:	0100      	lsls	r0, r0, #4
    f440:	4b10      	ldr	r3, [pc, #64]	; (f484 <recv+0x8c>)
    f442:	1818      	adds	r0, r3, r0
    f444:	88c3      	ldrh	r3, [r0, #6]
    f446:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    f448:	2300      	movs	r3, #0
    f44a:	9302      	str	r3, [sp, #8]
    f44c:	9301      	str	r3, [sp, #4]
    f44e:	9300      	str	r3, [sp, #0]
    f450:	3308      	adds	r3, #8
    f452:	2002      	movs	r0, #2
    f454:	4c0c      	ldr	r4, [pc, #48]	; (f488 <recv+0x90>)
    f456:	47a0      	blx	r4
    f458:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    f45a:	2800      	cmp	r0, #0
    f45c:	d000      	beq.n	f460 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    f45e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    f460:	0010      	movs	r0, r2
    f462:	b007      	add	sp, #28
    f464:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    f466:	9304      	str	r3, [sp, #16]
    f468:	e7e7      	b.n	f43a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    f46a:	2206      	movs	r2, #6
    f46c:	4252      	negs	r2, r2
    f46e:	e7f7      	b.n	f460 <recv+0x68>
    f470:	2206      	movs	r2, #6
    f472:	4252      	negs	r2, r2
    f474:	e7f4      	b.n	f460 <recv+0x68>
    f476:	2206      	movs	r2, #6
    f478:	4252      	negs	r2, r2
    f47a:	e7f1      	b.n	f460 <recv+0x68>
    f47c:	2206      	movs	r2, #6
    f47e:	4252      	negs	r2, r2
    f480:	e7ee      	b.n	f460 <recv+0x68>
    f482:	46c0      	nop			; (mov r8, r8)
    f484:	200013ac 	.word	0x200013ac
    f488:	0000ca29 	.word	0x0000ca29

0000f48c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    f48c:	b530      	push	{r4, r5, lr}
    f48e:	b087      	sub	sp, #28
    f490:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    f492:	481e      	ldr	r0, [pc, #120]	; (f50c <close+0x80>)
    f494:	4d1e      	ldr	r5, [pc, #120]	; (f510 <close+0x84>)
    f496:	47a8      	blx	r5
    f498:	0021      	movs	r1, r4
    f49a:	481e      	ldr	r0, [pc, #120]	; (f514 <close+0x88>)
    f49c:	47a8      	blx	r5
    f49e:	200d      	movs	r0, #13
    f4a0:	4b1d      	ldr	r3, [pc, #116]	; (f518 <close+0x8c>)
    f4a2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    f4a4:	2c00      	cmp	r4, #0
    f4a6:	db2a      	blt.n	f4fe <close+0x72>
    f4a8:	0122      	lsls	r2, r4, #4
    f4aa:	4b1c      	ldr	r3, [pc, #112]	; (f51c <close+0x90>)
    f4ac:	189b      	adds	r3, r3, r2
    f4ae:	7a9b      	ldrb	r3, [r3, #10]
    f4b0:	2b01      	cmp	r3, #1
    f4b2:	d127      	bne.n	f504 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    f4b4:	a905      	add	r1, sp, #20
    f4b6:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    f4b8:	4b18      	ldr	r3, [pc, #96]	; (f51c <close+0x90>)
    f4ba:	189b      	adds	r3, r3, r2
    f4bc:	88da      	ldrh	r2, [r3, #6]
    f4be:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    f4c0:	2200      	movs	r2, #0
    f4c2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    f4c4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f4c6:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    f4c8:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    f4ca:	07db      	lsls	r3, r3, #31
    f4cc:	d500      	bpl.n	f4d0 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    f4ce:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    f4d0:	2300      	movs	r3, #0
    f4d2:	9302      	str	r3, [sp, #8]
    f4d4:	9301      	str	r3, [sp, #4]
    f4d6:	9300      	str	r3, [sp, #0]
    f4d8:	3304      	adds	r3, #4
    f4da:	aa05      	add	r2, sp, #20
    f4dc:	2002      	movs	r0, #2
    f4de:	4d10      	ldr	r5, [pc, #64]	; (f520 <close+0x94>)
    f4e0:	47a8      	blx	r5
    f4e2:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    f4e4:	d001      	beq.n	f4ea <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    f4e6:	2509      	movs	r5, #9
    f4e8:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    f4ea:	0124      	lsls	r4, r4, #4
    f4ec:	480b      	ldr	r0, [pc, #44]	; (f51c <close+0x90>)
    f4ee:	1820      	adds	r0, r4, r0
    f4f0:	2210      	movs	r2, #16
    f4f2:	2100      	movs	r1, #0
    f4f4:	4b0b      	ldr	r3, [pc, #44]	; (f524 <close+0x98>)
    f4f6:	4798      	blx	r3
	}
	return s8Ret;
}
    f4f8:	0028      	movs	r0, r5
    f4fa:	b007      	add	sp, #28
    f4fc:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    f4fe:	2506      	movs	r5, #6
    f500:	426d      	negs	r5, r5
    f502:	e7f9      	b.n	f4f8 <close+0x6c>
    f504:	2506      	movs	r5, #6
    f506:	426d      	negs	r5, r5
    f508:	e7f6      	b.n	f4f8 <close+0x6c>
    f50a:	46c0      	nop			; (mov r8, r8)
    f50c:	00018ad8 	.word	0x00018ad8
    f510:	00017111 	.word	0x00017111
    f514:	00019550 	.word	0x00019550
    f518:	00017145 	.word	0x00017145
    f51c:	200013ac 	.word	0x200013ac
    f520:	0000ca29 	.word	0x0000ca29
    f524:	0000c915 	.word	0x0000c915

0000f528 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    f528:	b570      	push	{r4, r5, r6, lr}
    f52a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    f52c:	2300      	movs	r3, #0
    f52e:	9301      	str	r3, [sp, #4]
    f530:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    f532:	2100      	movs	r1, #0
    f534:	7802      	ldrb	r2, [r0, #0]
    f536:	1c44      	adds	r4, r0, #1
    f538:	3005      	adds	r0, #5
    f53a:	000b      	movs	r3, r1
    f53c:	e009      	b.n	f552 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    f53e:	009d      	lsls	r5, r3, #2
    f540:	195b      	adds	r3, r3, r5
    f542:	005b      	lsls	r3, r3, #1
    f544:	189b      	adds	r3, r3, r2
    f546:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    f548:	0022      	movs	r2, r4
    f54a:	3401      	adds	r4, #1
			if(j > 4)
    f54c:	42a0      	cmp	r0, r4
    f54e:	d00a      	beq.n	f566 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    f550:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    f552:	2a2e      	cmp	r2, #46	; 0x2e
    f554:	d00a      	beq.n	f56c <nmi_inet_addr+0x44>
    f556:	2a00      	cmp	r2, #0
    f558:	d00c      	beq.n	f574 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    f55a:	3a30      	subs	r2, #48	; 0x30
    f55c:	b2d2      	uxtb	r2, r2
    f55e:	2a09      	cmp	r2, #9
    f560:	d9ed      	bls.n	f53e <nmi_inet_addr+0x16>
				return 0;
    f562:	2000      	movs	r0, #0
    f564:	e000      	b.n	f568 <nmi_inet_addr+0x40>
				return 0;
    f566:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    f568:	b002      	add	sp, #8
    f56a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    f56c:	466a      	mov	r2, sp
    f56e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f570:	0020      	movs	r0, r4
    f572:	e002      	b.n	f57a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    f574:	466a      	mov	r2, sp
    f576:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    f578:	0020      	movs	r0, r4
    f57a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    f57c:	2e04      	cmp	r6, #4
    f57e:	d1d9      	bne.n	f534 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    f580:	2204      	movs	r2, #4
    f582:	4669      	mov	r1, sp
    f584:	a801      	add	r0, sp, #4
    f586:	4b02      	ldr	r3, [pc, #8]	; (f590 <nmi_inet_addr+0x68>)
    f588:	4798      	blx	r3
	return u32IP;
    f58a:	9801      	ldr	r0, [sp, #4]
    f58c:	e7ec      	b.n	f568 <nmi_inet_addr+0x40>
    f58e:	46c0      	nop			; (mov r8, r8)
    f590:	0000c901 	.word	0x0000c901

0000f594 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    f594:	b510      	push	{r4, lr}
    f596:	b084      	sub	sp, #16
    f598:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    f59a:	4b0b      	ldr	r3, [pc, #44]	; (f5c8 <gethostbyname+0x34>)
    f59c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    f59e:	b2c3      	uxtb	r3, r0
    f5a0:	2b40      	cmp	r3, #64	; 0x40
    f5a2:	d80d      	bhi.n	f5c0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    f5a4:	23ff      	movs	r3, #255	; 0xff
    f5a6:	4003      	ands	r3, r0
    f5a8:	3301      	adds	r3, #1
    f5aa:	2200      	movs	r2, #0
    f5ac:	9202      	str	r2, [sp, #8]
    f5ae:	9201      	str	r2, [sp, #4]
    f5b0:	9200      	str	r2, [sp, #0]
    f5b2:	0022      	movs	r2, r4
    f5b4:	214a      	movs	r1, #74	; 0x4a
    f5b6:	2002      	movs	r0, #2
    f5b8:	4c04      	ldr	r4, [pc, #16]	; (f5cc <gethostbyname+0x38>)
    f5ba:	47a0      	blx	r4
	}
	return s8Err;
}
    f5bc:	b004      	add	sp, #16
    f5be:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    f5c0:	2006      	movs	r0, #6
    f5c2:	4240      	negs	r0, r0
    f5c4:	e7fa      	b.n	f5bc <gethostbyname+0x28>
    f5c6:	46c0      	nop			; (mov r8, r8)
    f5c8:	0000c925 	.word	0x0000c925
    f5cc:	0000ca29 	.word	0x0000ca29

0000f5d0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    f5d0:	b570      	push	{r4, r5, r6, lr}
    f5d2:	b082      	sub	sp, #8
    f5d4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f5d6:	4b2a      	ldr	r3, [pc, #168]	; (f680 <spi_flash_enable+0xb0>)
    f5d8:	4798      	blx	r3
    f5da:	0500      	lsls	r0, r0, #20
    f5dc:	0d00      	lsrs	r0, r0, #20
    f5de:	4b29      	ldr	r3, [pc, #164]	; (f684 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    f5e0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    f5e2:	4298      	cmp	r0, r3
    f5e4:	d802      	bhi.n	f5ec <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    f5e6:	0028      	movs	r0, r5
    f5e8:	b002      	add	sp, #8
    f5ea:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    f5ec:	a901      	add	r1, sp, #4
    f5ee:	4826      	ldr	r0, [pc, #152]	; (f688 <spi_flash_enable+0xb8>)
    f5f0:	4b26      	ldr	r3, [pc, #152]	; (f68c <spi_flash_enable+0xbc>)
    f5f2:	4798      	blx	r3
    f5f4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    f5f6:	d1f6      	bne.n	f5e6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    f5f8:	4b25      	ldr	r3, [pc, #148]	; (f690 <spi_flash_enable+0xc0>)
    f5fa:	9a01      	ldr	r2, [sp, #4]
    f5fc:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    f5fe:	4925      	ldr	r1, [pc, #148]	; (f694 <spi_flash_enable+0xc4>)
    f600:	4319      	orrs	r1, r3
    f602:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f604:	4820      	ldr	r0, [pc, #128]	; (f688 <spi_flash_enable+0xb8>)
    f606:	4b24      	ldr	r3, [pc, #144]	; (f698 <spi_flash_enable+0xc8>)
    f608:	4798      	blx	r3
		if(enable) {
    f60a:	2c00      	cmp	r4, #0
    f60c:	d020      	beq.n	f650 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f60e:	2100      	movs	r1, #0
    f610:	4822      	ldr	r0, [pc, #136]	; (f69c <spi_flash_enable+0xcc>)
    f612:	4c21      	ldr	r4, [pc, #132]	; (f698 <spi_flash_enable+0xc8>)
    f614:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f616:	21ab      	movs	r1, #171	; 0xab
    f618:	4821      	ldr	r0, [pc, #132]	; (f6a0 <spi_flash_enable+0xd0>)
    f61a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f61c:	2101      	movs	r1, #1
    f61e:	4821      	ldr	r0, [pc, #132]	; (f6a4 <spi_flash_enable+0xd4>)
    f620:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f622:	2100      	movs	r1, #0
    f624:	4820      	ldr	r0, [pc, #128]	; (f6a8 <spi_flash_enable+0xd8>)
    f626:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    f628:	2181      	movs	r1, #129	; 0x81
    f62a:	4820      	ldr	r0, [pc, #128]	; (f6ac <spi_flash_enable+0xdc>)
    f62c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f62e:	4e20      	ldr	r6, [pc, #128]	; (f6b0 <spi_flash_enable+0xe0>)
    f630:	4c20      	ldr	r4, [pc, #128]	; (f6b4 <spi_flash_enable+0xe4>)
    f632:	0030      	movs	r0, r6
    f634:	47a0      	blx	r4
    f636:	2801      	cmp	r0, #1
    f638:	d1fb      	bne.n	f632 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    f63a:	4b15      	ldr	r3, [pc, #84]	; (f690 <spi_flash_enable+0xc0>)
    f63c:	9a01      	ldr	r2, [sp, #4]
    f63e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    f640:	2180      	movs	r1, #128	; 0x80
    f642:	0249      	lsls	r1, r1, #9
    f644:	4319      	orrs	r1, r3
    f646:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    f648:	480f      	ldr	r0, [pc, #60]	; (f688 <spi_flash_enable+0xb8>)
    f64a:	4b13      	ldr	r3, [pc, #76]	; (f698 <spi_flash_enable+0xc8>)
    f64c:	4798      	blx	r3
    f64e:	e7ca      	b.n	f5e6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    f650:	2100      	movs	r1, #0
    f652:	4812      	ldr	r0, [pc, #72]	; (f69c <spi_flash_enable+0xcc>)
    f654:	4c10      	ldr	r4, [pc, #64]	; (f698 <spi_flash_enable+0xc8>)
    f656:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    f658:	21b9      	movs	r1, #185	; 0xb9
    f65a:	4811      	ldr	r0, [pc, #68]	; (f6a0 <spi_flash_enable+0xd0>)
    f65c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    f65e:	2101      	movs	r1, #1
    f660:	4810      	ldr	r0, [pc, #64]	; (f6a4 <spi_flash_enable+0xd4>)
    f662:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    f664:	2100      	movs	r1, #0
    f666:	4810      	ldr	r0, [pc, #64]	; (f6a8 <spi_flash_enable+0xd8>)
    f668:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    f66a:	2181      	movs	r1, #129	; 0x81
    f66c:	480f      	ldr	r0, [pc, #60]	; (f6ac <spi_flash_enable+0xdc>)
    f66e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    f670:	4e0f      	ldr	r6, [pc, #60]	; (f6b0 <spi_flash_enable+0xe0>)
    f672:	4c10      	ldr	r4, [pc, #64]	; (f6b4 <spi_flash_enable+0xe4>)
    f674:	0030      	movs	r0, r6
    f676:	47a0      	blx	r4
    f678:	2801      	cmp	r0, #1
    f67a:	d1fb      	bne.n	f674 <spi_flash_enable+0xa4>
    f67c:	e7dd      	b.n	f63a <spi_flash_enable+0x6a>
    f67e:	46c0      	nop			; (mov r8, r8)
    f680:	0000d915 	.word	0x0000d915
    f684:	0000039f 	.word	0x0000039f
    f688:	00001410 	.word	0x00001410
    f68c:	0000dd65 	.word	0x0000dd65
    f690:	f8888fff 	.word	0xf8888fff
    f694:	01111000 	.word	0x01111000
    f698:	0000dd71 	.word	0x0000dd71
    f69c:	00010208 	.word	0x00010208
    f6a0:	0001020c 	.word	0x0001020c
    f6a4:	00010214 	.word	0x00010214
    f6a8:	0001021c 	.word	0x0001021c
    f6ac:	00010204 	.word	0x00010204
    f6b0:	00010218 	.word	0x00010218
    f6b4:	0000dd59 	.word	0x0000dd59

0000f6b8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    f6b8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f6ba:	2301      	movs	r3, #1
    f6bc:	2800      	cmp	r0, #0
    f6be:	d001      	beq.n	f6c4 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f6c0:	0018      	movs	r0, r3
    f6c2:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    f6c4:	4b01      	ldr	r3, [pc, #4]	; (f6cc <mem_test_unit_ready+0x14>)
    f6c6:	4798      	blx	r3
    f6c8:	0003      	movs	r3, r0
    f6ca:	e7f9      	b.n	f6c0 <mem_test_unit_ready+0x8>
    f6cc:	0000bc81 	.word	0x0000bc81

0000f6d0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    f6d0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f6d2:	2301      	movs	r3, #1
    f6d4:	2800      	cmp	r0, #0
    f6d6:	d001      	beq.n	f6dc <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    f6d8:	0018      	movs	r0, r3
    f6da:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    f6dc:	0008      	movs	r0, r1
    f6de:	4b02      	ldr	r3, [pc, #8]	; (f6e8 <mem_read_capacity+0x18>)
    f6e0:	4798      	blx	r3
    f6e2:	0003      	movs	r3, r0
    f6e4:	e7f8      	b.n	f6d8 <mem_read_capacity+0x8>
    f6e6:	46c0      	nop			; (mov r8, r8)
    f6e8:	0000bcb1 	.word	0x0000bcb1

0000f6ec <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    f6ec:	4243      	negs	r3, r0
    f6ee:	4158      	adcs	r0, r3
    f6f0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    f6f2:	4770      	bx	lr

0000f6f4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    f6f4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f6f6:	2301      	movs	r3, #1
    f6f8:	2800      	cmp	r0, #0
    f6fa:	d001      	beq.n	f700 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    f6fc:	0018      	movs	r0, r3
    f6fe:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    f700:	4b01      	ldr	r3, [pc, #4]	; (f708 <mem_wr_protect+0x14>)
    f702:	4798      	blx	r3
    f704:	0003      	movs	r3, r0
    f706:	e7f9      	b.n	f6fc <mem_wr_protect+0x8>
    f708:	0000bcc1 	.word	0x0000bcc1

0000f70c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    f70c:	b510      	push	{r4, lr}
    f70e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f710:	2301      	movs	r3, #1
    f712:	2800      	cmp	r0, #0
    f714:	d001      	beq.n	f71a <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    f716:	0018      	movs	r0, r3
    f718:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    f71a:	0011      	movs	r1, r2
    f71c:	0020      	movs	r0, r4
    f71e:	4b02      	ldr	r3, [pc, #8]	; (f728 <memory_2_ram+0x1c>)
    f720:	4798      	blx	r3
    f722:	0003      	movs	r3, r0
    f724:	e7f7      	b.n	f716 <memory_2_ram+0xa>
    f726:	46c0      	nop			; (mov r8, r8)
    f728:	0000bd15 	.word	0x0000bd15

0000f72c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    f72c:	b510      	push	{r4, lr}
    f72e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f730:	2301      	movs	r3, #1
    f732:	2800      	cmp	r0, #0
    f734:	d001      	beq.n	f73a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    f736:	0018      	movs	r0, r3
    f738:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    f73a:	0011      	movs	r1, r2
    f73c:	0020      	movs	r0, r4
    f73e:	4b02      	ldr	r3, [pc, #8]	; (f748 <ram_2_memory+0x1c>)
    f740:	4798      	blx	r3
    f742:	0003      	movs	r3, r0
    f744:	e7f7      	b.n	f736 <ram_2_memory+0xa>
    f746:	46c0      	nop			; (mov r8, r8)
    f748:	0000bd6d 	.word	0x0000bd6d

0000f74c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    f74c:	4b0c      	ldr	r3, [pc, #48]	; (f780 <cpu_irq_enter_critical+0x34>)
    f74e:	681b      	ldr	r3, [r3, #0]
    f750:	2b00      	cmp	r3, #0
    f752:	d106      	bne.n	f762 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f754:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    f758:	2b00      	cmp	r3, #0
    f75a:	d007      	beq.n	f76c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    f75c:	2200      	movs	r2, #0
    f75e:	4b09      	ldr	r3, [pc, #36]	; (f784 <cpu_irq_enter_critical+0x38>)
    f760:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    f762:	4a07      	ldr	r2, [pc, #28]	; (f780 <cpu_irq_enter_critical+0x34>)
    f764:	6813      	ldr	r3, [r2, #0]
    f766:	3301      	adds	r3, #1
    f768:	6013      	str	r3, [r2, #0]
}
    f76a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    f76c:	b672      	cpsid	i
    f76e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    f772:	2200      	movs	r2, #0
    f774:	4b04      	ldr	r3, [pc, #16]	; (f788 <cpu_irq_enter_critical+0x3c>)
    f776:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    f778:	3201      	adds	r2, #1
    f77a:	4b02      	ldr	r3, [pc, #8]	; (f784 <cpu_irq_enter_critical+0x38>)
    f77c:	701a      	strb	r2, [r3, #0]
    f77e:	e7f0      	b.n	f762 <cpu_irq_enter_critical+0x16>
    f780:	200003d8 	.word	0x200003d8
    f784:	200003dc 	.word	0x200003dc
    f788:	2000000e 	.word	0x2000000e

0000f78c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    f78c:	4b08      	ldr	r3, [pc, #32]	; (f7b0 <cpu_irq_leave_critical+0x24>)
    f78e:	681a      	ldr	r2, [r3, #0]
    f790:	3a01      	subs	r2, #1
    f792:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    f794:	681b      	ldr	r3, [r3, #0]
    f796:	2b00      	cmp	r3, #0
    f798:	d109      	bne.n	f7ae <cpu_irq_leave_critical+0x22>
    f79a:	4b06      	ldr	r3, [pc, #24]	; (f7b4 <cpu_irq_leave_critical+0x28>)
    f79c:	781b      	ldrb	r3, [r3, #0]
    f79e:	2b00      	cmp	r3, #0
    f7a0:	d005      	beq.n	f7ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    f7a2:	2201      	movs	r2, #1
    f7a4:	4b04      	ldr	r3, [pc, #16]	; (f7b8 <cpu_irq_leave_critical+0x2c>)
    f7a6:	701a      	strb	r2, [r3, #0]
    f7a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f7ac:	b662      	cpsie	i
	}
}
    f7ae:	4770      	bx	lr
    f7b0:	200003d8 	.word	0x200003d8
    f7b4:	200003dc 	.word	0x200003dc
    f7b8:	2000000e 	.word	0x2000000e

0000f7bc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7be:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    f7c0:	ac01      	add	r4, sp, #4
    f7c2:	2501      	movs	r5, #1
    f7c4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    f7c6:	2700      	movs	r7, #0
    f7c8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    f7ca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    f7cc:	0021      	movs	r1, r4
    f7ce:	2017      	movs	r0, #23
    f7d0:	4e06      	ldr	r6, [pc, #24]	; (f7ec <system_board_init+0x30>)
    f7d2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    f7d4:	2280      	movs	r2, #128	; 0x80
    f7d6:	0412      	lsls	r2, r2, #16
    f7d8:	4b05      	ldr	r3, [pc, #20]	; (f7f0 <system_board_init+0x34>)
    f7da:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    f7dc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    f7de:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    f7e0:	0021      	movs	r1, r4
    f7e2:	2037      	movs	r0, #55	; 0x37
    f7e4:	47b0      	blx	r6
}
    f7e6:	b003      	add	sp, #12
    f7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7ea:	46c0      	nop			; (mov r8, r8)
    f7ec:	0000f9c5 	.word	0x0000f9c5
    f7f0:	41004400 	.word	0x41004400

0000f7f4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f7f4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    f7f6:	2a00      	cmp	r2, #0
    f7f8:	d001      	beq.n	f7fe <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    f7fa:	0018      	movs	r0, r3
    f7fc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    f7fe:	008b      	lsls	r3, r1, #2
    f800:	4a06      	ldr	r2, [pc, #24]	; (f81c <extint_register_callback+0x28>)
    f802:	589b      	ldr	r3, [r3, r2]
    f804:	2b00      	cmp	r3, #0
    f806:	d003      	beq.n	f810 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    f808:	4283      	cmp	r3, r0
    f80a:	d005      	beq.n	f818 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    f80c:	231d      	movs	r3, #29
    f80e:	e7f4      	b.n	f7fa <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    f810:	0089      	lsls	r1, r1, #2
    f812:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    f814:	2300      	movs	r3, #0
    f816:	e7f0      	b.n	f7fa <extint_register_callback+0x6>
		return STATUS_OK;
    f818:	2300      	movs	r3, #0
    f81a:	e7ee      	b.n	f7fa <extint_register_callback+0x6>
    f81c:	2000146c 	.word	0x2000146c

0000f820 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f820:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f822:	2900      	cmp	r1, #0
    f824:	d001      	beq.n	f82a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    f826:	0018      	movs	r0, r3
    f828:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    f82a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    f82c:	281f      	cmp	r0, #31
    f82e:	d800      	bhi.n	f832 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    f830:	4a02      	ldr	r2, [pc, #8]	; (f83c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    f832:	2301      	movs	r3, #1
    f834:	4083      	lsls	r3, r0
    f836:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    f838:	2300      	movs	r3, #0
    f83a:	e7f4      	b.n	f826 <extint_chan_enable_callback+0x6>
    f83c:	40001800 	.word	0x40001800

0000f840 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f840:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f842:	2900      	cmp	r1, #0
    f844:	d001      	beq.n	f84a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    f846:	0018      	movs	r0, r3
    f848:	4770      	bx	lr
		return NULL;
    f84a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    f84c:	281f      	cmp	r0, #31
    f84e:	d800      	bhi.n	f852 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    f850:	4a02      	ldr	r2, [pc, #8]	; (f85c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    f852:	2301      	movs	r3, #1
    f854:	4083      	lsls	r3, r0
    f856:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    f858:	2300      	movs	r3, #0
    f85a:	e7f4      	b.n	f846 <extint_chan_disable_callback+0x6>
    f85c:	40001800 	.word	0x40001800

0000f860 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    f860:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f862:	2200      	movs	r2, #0
    f864:	4b10      	ldr	r3, [pc, #64]	; (f8a8 <EIC_Handler+0x48>)
    f866:	701a      	strb	r2, [r3, #0]
    f868:	2300      	movs	r3, #0
    f86a:	4910      	ldr	r1, [pc, #64]	; (f8ac <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    f86c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f86e:	4e10      	ldr	r6, [pc, #64]	; (f8b0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f870:	4c0d      	ldr	r4, [pc, #52]	; (f8a8 <EIC_Handler+0x48>)
    f872:	e00a      	b.n	f88a <EIC_Handler+0x2a>
		return eics[eic_index];
    f874:	490d      	ldr	r1, [pc, #52]	; (f8ac <EIC_Handler+0x4c>)
    f876:	e008      	b.n	f88a <EIC_Handler+0x2a>
    f878:	7823      	ldrb	r3, [r4, #0]
    f87a:	3301      	adds	r3, #1
    f87c:	b2db      	uxtb	r3, r3
    f87e:	7023      	strb	r3, [r4, #0]
    f880:	2b0f      	cmp	r3, #15
    f882:	d810      	bhi.n	f8a6 <EIC_Handler+0x46>
		return NULL;
    f884:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    f886:	2b1f      	cmp	r3, #31
    f888:	d9f4      	bls.n	f874 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    f88a:	0028      	movs	r0, r5
    f88c:	4018      	ands	r0, r3
    f88e:	2201      	movs	r2, #1
    f890:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    f892:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    f894:	4210      	tst	r0, r2
    f896:	d0ef      	beq.n	f878 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    f898:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f89a:	009b      	lsls	r3, r3, #2
    f89c:	599b      	ldr	r3, [r3, r6]
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d0ea      	beq.n	f878 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    f8a2:	4798      	blx	r3
    f8a4:	e7e8      	b.n	f878 <EIC_Handler+0x18>
			}
		}
	}
}
    f8a6:	bd70      	pop	{r4, r5, r6, pc}
    f8a8:	20001468 	.word	0x20001468
    f8ac:	40001800 	.word	0x40001800
    f8b0:	2000146c 	.word	0x2000146c

0000f8b4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    f8b4:	4a04      	ldr	r2, [pc, #16]	; (f8c8 <_extint_enable+0x14>)
    f8b6:	7813      	ldrb	r3, [r2, #0]
    f8b8:	2102      	movs	r1, #2
    f8ba:	430b      	orrs	r3, r1
    f8bc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f8be:	7853      	ldrb	r3, [r2, #1]
    f8c0:	b25b      	sxtb	r3, r3
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	dbfb      	blt.n	f8be <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    f8c6:	4770      	bx	lr
    f8c8:	40001800 	.word	0x40001800

0000f8cc <_system_extint_init>:
{
    f8cc:	b500      	push	{lr}
    f8ce:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    f8d0:	4a12      	ldr	r2, [pc, #72]	; (f91c <_system_extint_init+0x50>)
    f8d2:	6993      	ldr	r3, [r2, #24]
    f8d4:	2140      	movs	r1, #64	; 0x40
    f8d6:	430b      	orrs	r3, r1
    f8d8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    f8da:	a901      	add	r1, sp, #4
    f8dc:	2300      	movs	r3, #0
    f8de:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    f8e0:	2005      	movs	r0, #5
    f8e2:	4b0f      	ldr	r3, [pc, #60]	; (f920 <_system_extint_init+0x54>)
    f8e4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    f8e6:	2005      	movs	r0, #5
    f8e8:	4b0e      	ldr	r3, [pc, #56]	; (f924 <_system_extint_init+0x58>)
    f8ea:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    f8ec:	4a0e      	ldr	r2, [pc, #56]	; (f928 <_system_extint_init+0x5c>)
    f8ee:	7813      	ldrb	r3, [r2, #0]
    f8f0:	2101      	movs	r1, #1
    f8f2:	430b      	orrs	r3, r1
    f8f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f8f6:	7853      	ldrb	r3, [r2, #1]
    f8f8:	b25b      	sxtb	r3, r3
    f8fa:	2b00      	cmp	r3, #0
    f8fc:	dbfb      	blt.n	f8f6 <_system_extint_init+0x2a>
    f8fe:	4b0b      	ldr	r3, [pc, #44]	; (f92c <_system_extint_init+0x60>)
    f900:	0019      	movs	r1, r3
    f902:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    f904:	2200      	movs	r2, #0
    f906:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    f908:	4299      	cmp	r1, r3
    f90a:	d1fc      	bne.n	f906 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f90c:	2210      	movs	r2, #16
    f90e:	4b08      	ldr	r3, [pc, #32]	; (f930 <_system_extint_init+0x64>)
    f910:	601a      	str	r2, [r3, #0]
	_extint_enable();
    f912:	4b08      	ldr	r3, [pc, #32]	; (f934 <_system_extint_init+0x68>)
    f914:	4798      	blx	r3
}
    f916:	b003      	add	sp, #12
    f918:	bd00      	pop	{pc}
    f91a:	46c0      	nop			; (mov r8, r8)
    f91c:	40000400 	.word	0x40000400
    f920:	00011419 	.word	0x00011419
    f924:	0001138d 	.word	0x0001138d
    f928:	40001800 	.word	0x40001800
    f92c:	2000146c 	.word	0x2000146c
    f930:	e000e100 	.word	0xe000e100
    f934:	0000f8b5 	.word	0x0000f8b5

0000f938 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    f938:	2300      	movs	r3, #0
    f93a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    f93c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f93e:	2201      	movs	r2, #1
    f940:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    f942:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    f944:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f946:	3302      	adds	r3, #2
    f948:	72c3      	strb	r3, [r0, #11]
}
    f94a:	4770      	bx	lr

0000f94c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f94e:	b083      	sub	sp, #12
    f950:	0005      	movs	r5, r0
    f952:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f954:	a901      	add	r1, sp, #4
    f956:	2300      	movs	r3, #0
    f958:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    f95a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    f95c:	7923      	ldrb	r3, [r4, #4]
    f95e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    f960:	7a23      	ldrb	r3, [r4, #8]
    f962:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    f964:	7820      	ldrb	r0, [r4, #0]
    f966:	4b15      	ldr	r3, [pc, #84]	; (f9bc <extint_chan_set_config+0x70>)
    f968:	4798      	blx	r3
		return NULL;
    f96a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    f96c:	2d1f      	cmp	r5, #31
    f96e:	d800      	bhi.n	f972 <extint_chan_set_config+0x26>
		return eics[eic_index];
    f970:	4813      	ldr	r0, [pc, #76]	; (f9c0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    f972:	2207      	movs	r2, #7
    f974:	402a      	ands	r2, r5
    f976:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    f978:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    f97a:	7aa3      	ldrb	r3, [r4, #10]
    f97c:	2b00      	cmp	r3, #0
    f97e:	d001      	beq.n	f984 <extint_chan_set_config+0x38>
    f980:	2308      	movs	r3, #8
    f982:	431f      	orrs	r7, r3
    f984:	08eb      	lsrs	r3, r5, #3
    f986:	009b      	lsls	r3, r3, #2
    f988:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    f98a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f98c:	260f      	movs	r6, #15
    f98e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    f990:	43b1      	bics	r1, r6
			(new_config << config_pos);
    f992:	4097      	lsls	r7, r2
    f994:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f996:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    f998:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    f99a:	7a63      	ldrb	r3, [r4, #9]
    f99c:	2b00      	cmp	r3, #0
    f99e:	d106      	bne.n	f9ae <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    f9a0:	6943      	ldr	r3, [r0, #20]
    f9a2:	2201      	movs	r2, #1
    f9a4:	40aa      	lsls	r2, r5
    f9a6:	4393      	bics	r3, r2
    f9a8:	6143      	str	r3, [r0, #20]
	}
}
    f9aa:	b003      	add	sp, #12
    f9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    f9ae:	6942      	ldr	r2, [r0, #20]
    f9b0:	2301      	movs	r3, #1
    f9b2:	40ab      	lsls	r3, r5
    f9b4:	4313      	orrs	r3, r2
    f9b6:	6143      	str	r3, [r0, #20]
    f9b8:	e7f7      	b.n	f9aa <extint_chan_set_config+0x5e>
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	00011511 	.word	0x00011511
    f9c0:	40001800 	.word	0x40001800

0000f9c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    f9c4:	b500      	push	{lr}
    f9c6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f9c8:	ab01      	add	r3, sp, #4
    f9ca:	2280      	movs	r2, #128	; 0x80
    f9cc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    f9ce:	780a      	ldrb	r2, [r1, #0]
    f9d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    f9d2:	784a      	ldrb	r2, [r1, #1]
    f9d4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    f9d6:	788a      	ldrb	r2, [r1, #2]
    f9d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    f9da:	0019      	movs	r1, r3
    f9dc:	4b01      	ldr	r3, [pc, #4]	; (f9e4 <port_pin_set_config+0x20>)
    f9de:	4798      	blx	r3
}
    f9e0:	b003      	add	sp, #12
    f9e2:	bd00      	pop	{pc}
    f9e4:	00011511 	.word	0x00011511

0000f9e8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f9e8:	6801      	ldr	r1, [r0, #0]
    f9ea:	2208      	movs	r2, #8
    f9ec:	4b05      	ldr	r3, [pc, #20]	; (fa04 <rtc_calendar_enable+0x1c>)
    f9ee:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    f9f0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f9f2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    f9f4:	b25b      	sxtb	r3, r3
    f9f6:	2b00      	cmp	r3, #0
    f9f8:	dbfb      	blt.n	f9f2 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    f9fa:	880b      	ldrh	r3, [r1, #0]
    f9fc:	2202      	movs	r2, #2
    f9fe:	4313      	orrs	r3, r2
    fa00:	800b      	strh	r3, [r1, #0]
}
    fa02:	4770      	bx	lr
    fa04:	e000e100 	.word	0xe000e100

0000fa08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    fa08:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fa0a:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fa0c:	2408      	movs	r4, #8
    fa0e:	2380      	movs	r3, #128	; 0x80
    fa10:	4907      	ldr	r1, [pc, #28]	; (fa30 <rtc_calendar_disable+0x28>)
    fa12:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    fa14:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fa16:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    fa18:	b25b      	sxtb	r3, r3
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	dbfb      	blt.n	fa16 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    fa1e:	23c1      	movs	r3, #193	; 0xc1
    fa20:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    fa22:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    fa24:	8813      	ldrh	r3, [r2, #0]
    fa26:	2102      	movs	r1, #2
    fa28:	438b      	bics	r3, r1
    fa2a:	8013      	strh	r3, [r2, #0]
}
    fa2c:	bd10      	pop	{r4, pc}
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	e000e100 	.word	0xe000e100

0000fa34 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    fa34:	b570      	push	{r4, r5, r6, lr}
    fa36:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fa38:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    fa3a:	4b07      	ldr	r3, [pc, #28]	; (fa58 <rtc_calendar_reset+0x24>)
    fa3c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    fa3e:	2300      	movs	r3, #0
    fa40:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    fa42:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    fa44:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fa46:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    fa48:	b25b      	sxtb	r3, r3
    fa4a:	2b00      	cmp	r3, #0
    fa4c:	dbfb      	blt.n	fa46 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    fa4e:	882b      	ldrh	r3, [r5, #0]
    fa50:	2201      	movs	r2, #1
    fa52:	4313      	orrs	r3, r2
    fa54:	802b      	strh	r3, [r5, #0]
}
    fa56:	bd70      	pop	{r4, r5, r6, pc}
    fa58:	0000fa09 	.word	0x0000fa09

0000fa5c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    fa5c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    fa5e:	88cb      	ldrh	r3, [r1, #6]
    fa60:	88c2      	ldrh	r2, [r0, #6]
    fa62:	1a9a      	subs	r2, r3, r2
    fa64:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    fa66:	794b      	ldrb	r3, [r1, #5]
    fa68:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    fa6a:	790c      	ldrb	r4, [r1, #4]
    fa6c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    fa6e:	4323      	orrs	r3, r4
    fa70:	788c      	ldrb	r4, [r1, #2]
    fa72:	0324      	lsls	r4, r4, #12
    fa74:	4323      	orrs	r3, r4
    fa76:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    fa78:	7902      	ldrb	r2, [r0, #4]
    fa7a:	2a00      	cmp	r2, #0
    fa7c:	d105      	bne.n	fa8a <rtc_calendar_time_to_register_value+0x2e>
    fa7e:	78ca      	ldrb	r2, [r1, #3]
    fa80:	2a00      	cmp	r2, #0
    fa82:	d002      	beq.n	fa8a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    fa84:	2280      	movs	r2, #128	; 0x80
    fa86:	0252      	lsls	r2, r2, #9
    fa88:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    fa8a:	7848      	ldrb	r0, [r1, #1]
    fa8c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    fa8e:	780a      	ldrb	r2, [r1, #0]
    fa90:	4310      	orrs	r0, r2
    fa92:	4318      	orrs	r0, r3

	return register_value;
}
    fa94:	bd10      	pop	{r4, pc}

0000fa96 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    fa96:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fa98:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    fa9a:	88c4      	ldrh	r4, [r0, #6]
    fa9c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    fa9e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    faa0:	018b      	lsls	r3, r1, #6
    faa2:	0f1b      	lsrs	r3, r3, #28
    faa4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    faa6:	028b      	lsls	r3, r1, #10
    faa8:	0edb      	lsrs	r3, r3, #27
    faaa:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    faac:	7903      	ldrb	r3, [r0, #4]
    faae:	2b00      	cmp	r3, #0
    fab0:	d10c      	bne.n	facc <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    fab2:	040b      	lsls	r3, r1, #16
    fab4:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    fab6:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    fab8:	03cb      	lsls	r3, r1, #15
    faba:	0fdb      	lsrs	r3, r3, #31
    fabc:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    fabe:	0988      	lsrs	r0, r1, #6
    fac0:	233f      	movs	r3, #63	; 0x3f
    fac2:	4018      	ands	r0, r3
    fac4:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    fac6:	4019      	ands	r1, r3
    fac8:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    faca:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    facc:	03cb      	lsls	r3, r1, #15
    face:	0edb      	lsrs	r3, r3, #27
    fad0:	7093      	strb	r3, [r2, #2]
    fad2:	e7f4      	b.n	fabe <rtc_calendar_register_value_to_time+0x28>

0000fad4 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    fad4:	b510      	push	{r4, lr}
    fad6:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    fad8:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    fada:	7941      	ldrb	r1, [r0, #5]
    fadc:	2900      	cmp	r1, #0
    fade:	d006      	beq.n	faee <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    fae0:	8859      	ldrh	r1, [r3, #2]
    fae2:	0449      	lsls	r1, r1, #17
    fae4:	d50b      	bpl.n	fafe <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    fae6:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    fae8:	4b0a      	ldr	r3, [pc, #40]	; (fb14 <rtc_calendar_get_time+0x40>)
    faea:	4798      	blx	r3
}
    faec:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    faee:	490a      	ldr	r1, [pc, #40]	; (fb18 <rtc_calendar_get_time+0x44>)
    faf0:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    faf2:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    faf4:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    faf6:	b249      	sxtb	r1, r1
    faf8:	2900      	cmp	r1, #0
    fafa:	dbfb      	blt.n	faf4 <rtc_calendar_get_time+0x20>
    fafc:	e7f3      	b.n	fae6 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    fafe:	8859      	ldrh	r1, [r3, #2]
    fb00:	24c0      	movs	r4, #192	; 0xc0
    fb02:	0224      	lsls	r4, r4, #8
    fb04:	4321      	orrs	r1, r4
    fb06:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    fb08:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fb0a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    fb0c:	b249      	sxtb	r1, r1
    fb0e:	2900      	cmp	r1, #0
    fb10:	dbfb      	blt.n	fb0a <rtc_calendar_get_time+0x36>
    fb12:	e7e8      	b.n	fae6 <rtc_calendar_get_time+0x12>
    fb14:	0000fa97 	.word	0x0000fa97
    fb18:	ffff8000 	.word	0xffff8000

0000fb1c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    fb1c:	b570      	push	{r4, r5, r6, lr}
    fb1e:	000d      	movs	r5, r1
    fb20:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    fb22:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    fb24:	2a01      	cmp	r2, #1
    fb26:	d901      	bls.n	fb2c <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    fb28:	0018      	movs	r0, r3
    fb2a:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    fb2c:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    fb2e:	4b06      	ldr	r3, [pc, #24]	; (fb48 <rtc_calendar_set_alarm+0x2c>)
    fb30:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    fb32:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    fb34:	b25b      	sxtb	r3, r3
    fb36:	2b00      	cmp	r3, #0
    fb38:	dbfb      	blt.n	fb32 <rtc_calendar_set_alarm+0x16>
    fb3a:	00e4      	lsls	r4, r4, #3
    fb3c:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    fb3e:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    fb40:	7a2b      	ldrb	r3, [r5, #8]
    fb42:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    fb44:	2300      	movs	r3, #0
    fb46:	e7ef      	b.n	fb28 <rtc_calendar_set_alarm+0xc>
    fb48:	0000fa5d 	.word	0x0000fa5d

0000fb4c <rtc_calendar_init>:
{
    fb4c:	b530      	push	{r4, r5, lr}
    fb4e:	b083      	sub	sp, #12
    fb50:	0005      	movs	r5, r0
    fb52:	0014      	movs	r4, r2
	module->hw = hw;
    fb54:	6001      	str	r1, [r0, #0]
    fb56:	4a1c      	ldr	r2, [pc, #112]	; (fbc8 <rtc_calendar_init+0x7c>)
    fb58:	6993      	ldr	r3, [r2, #24]
    fb5a:	2120      	movs	r1, #32
    fb5c:	430b      	orrs	r3, r1
    fb5e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    fb60:	a901      	add	r1, sp, #4
    fb62:	2302      	movs	r3, #2
    fb64:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    fb66:	2004      	movs	r0, #4
    fb68:	4b18      	ldr	r3, [pc, #96]	; (fbcc <rtc_calendar_init+0x80>)
    fb6a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    fb6c:	2004      	movs	r0, #4
    fb6e:	4b18      	ldr	r3, [pc, #96]	; (fbd0 <rtc_calendar_init+0x84>)
    fb70:	4798      	blx	r3
	rtc_calendar_reset(module);
    fb72:	0028      	movs	r0, r5
    fb74:	4b17      	ldr	r3, [pc, #92]	; (fbd4 <rtc_calendar_init+0x88>)
    fb76:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    fb78:	7923      	ldrb	r3, [r4, #4]
    fb7a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    fb7c:	78e3      	ldrb	r3, [r4, #3]
    fb7e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    fb80:	88e3      	ldrh	r3, [r4, #6]
    fb82:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    fb84:	4b14      	ldr	r3, [pc, #80]	; (fbd8 <rtc_calendar_init+0x8c>)
    fb86:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fb88:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fb8a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    fb8c:	7921      	ldrb	r1, [r4, #4]
    fb8e:	2900      	cmp	r1, #0
    fb90:	d017      	beq.n	fbc2 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    fb92:	2108      	movs	r1, #8
    fb94:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    fb96:	78a1      	ldrb	r1, [r4, #2]
    fb98:	2900      	cmp	r1, #0
    fb9a:	d001      	beq.n	fba0 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    fb9c:	2180      	movs	r1, #128	; 0x80
    fb9e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    fba0:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    fba2:	78e3      	ldrb	r3, [r4, #3]
    fba4:	2b00      	cmp	r3, #0
    fba6:	d004      	beq.n	fbb2 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    fba8:	8853      	ldrh	r3, [r2, #2]
    fbaa:	2180      	movs	r1, #128	; 0x80
    fbac:	01c9      	lsls	r1, r1, #7
    fbae:	430b      	orrs	r3, r1
    fbb0:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    fbb2:	0021      	movs	r1, r4
    fbb4:	3108      	adds	r1, #8
    fbb6:	2200      	movs	r2, #0
    fbb8:	0028      	movs	r0, r5
    fbba:	4b08      	ldr	r3, [pc, #32]	; (fbdc <rtc_calendar_init+0x90>)
    fbbc:	4798      	blx	r3
}
    fbbe:	b003      	add	sp, #12
    fbc0:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    fbc2:	2148      	movs	r1, #72	; 0x48
    fbc4:	430b      	orrs	r3, r1
    fbc6:	e7e6      	b.n	fb96 <rtc_calendar_init+0x4a>
    fbc8:	40000400 	.word	0x40000400
    fbcc:	00011419 	.word	0x00011419
    fbd0:	0001138d 	.word	0x0001138d
    fbd4:	0000fa35 	.word	0x0000fa35
    fbd8:	200014ac 	.word	0x200014ac
    fbdc:	0000fb1d 	.word	0x0000fb1d

0000fbe0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    fbe0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    fbe2:	4b0f      	ldr	r3, [pc, #60]	; (fc20 <RTC_Handler+0x40>)
    fbe4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    fbe6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    fbe8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    fbea:	8a13      	ldrh	r3, [r2, #16]
    fbec:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    fbee:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    fbf0:	79e3      	ldrb	r3, [r4, #7]
    fbf2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    fbf4:	b258      	sxtb	r0, r3
    fbf6:	2800      	cmp	r0, #0
    fbf8:	db06      	blt.n	fc08 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    fbfa:	07db      	lsls	r3, r3, #31
    fbfc:	d503      	bpl.n	fc06 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    fbfe:	07cb      	lsls	r3, r1, #31
    fc00:	d40a      	bmi.n	fc18 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    fc02:	2301      	movs	r3, #1
    fc04:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    fc06:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    fc08:	078b      	lsls	r3, r1, #30
    fc0a:	d402      	bmi.n	fc12 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    fc0c:	2380      	movs	r3, #128	; 0x80
    fc0e:	7223      	strb	r3, [r4, #8]
    fc10:	e7f9      	b.n	fc06 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    fc12:	68d3      	ldr	r3, [r2, #12]
    fc14:	4798      	blx	r3
    fc16:	e7f9      	b.n	fc0c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    fc18:	6893      	ldr	r3, [r2, #8]
    fc1a:	4798      	blx	r3
    fc1c:	e7f1      	b.n	fc02 <RTC_Handler+0x22>
    fc1e:	46c0      	nop			; (mov r8, r8)
    fc20:	200014ac 	.word	0x200014ac

0000fc24 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    fc24:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc26:	46de      	mov	lr, fp
    fc28:	4657      	mov	r7, sl
    fc2a:	464e      	mov	r6, r9
    fc2c:	4645      	mov	r5, r8
    fc2e:	b5e0      	push	{r5, r6, r7, lr}
    fc30:	b087      	sub	sp, #28
    fc32:	4680      	mov	r8, r0
    fc34:	9104      	str	r1, [sp, #16]
    fc36:	0016      	movs	r6, r2
    fc38:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    fc3a:	2200      	movs	r2, #0
    fc3c:	2300      	movs	r3, #0
    fc3e:	2100      	movs	r1, #0
    fc40:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    fc42:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    fc44:	2001      	movs	r0, #1
    fc46:	0021      	movs	r1, r4
    fc48:	9600      	str	r6, [sp, #0]
    fc4a:	9701      	str	r7, [sp, #4]
    fc4c:	465c      	mov	r4, fp
    fc4e:	9403      	str	r4, [sp, #12]
    fc50:	4644      	mov	r4, r8
    fc52:	9405      	str	r4, [sp, #20]
    fc54:	e013      	b.n	fc7e <long_division+0x5a>
    fc56:	2420      	movs	r4, #32
    fc58:	1a64      	subs	r4, r4, r1
    fc5a:	0005      	movs	r5, r0
    fc5c:	40e5      	lsrs	r5, r4
    fc5e:	46a8      	mov	r8, r5
    fc60:	e014      	b.n	fc8c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    fc62:	9c00      	ldr	r4, [sp, #0]
    fc64:	9d01      	ldr	r5, [sp, #4]
    fc66:	1b12      	subs	r2, r2, r4
    fc68:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    fc6a:	465c      	mov	r4, fp
    fc6c:	464d      	mov	r5, r9
    fc6e:	432c      	orrs	r4, r5
    fc70:	46a3      	mov	fp, r4
    fc72:	9c03      	ldr	r4, [sp, #12]
    fc74:	4645      	mov	r5, r8
    fc76:	432c      	orrs	r4, r5
    fc78:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    fc7a:	3901      	subs	r1, #1
    fc7c:	d325      	bcc.n	fcca <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    fc7e:	2420      	movs	r4, #32
    fc80:	4264      	negs	r4, r4
    fc82:	190c      	adds	r4, r1, r4
    fc84:	d4e7      	bmi.n	fc56 <long_division+0x32>
    fc86:	0005      	movs	r5, r0
    fc88:	40a5      	lsls	r5, r4
    fc8a:	46a8      	mov	r8, r5
    fc8c:	0004      	movs	r4, r0
    fc8e:	408c      	lsls	r4, r1
    fc90:	46a1      	mov	r9, r4
		r = r << 1;
    fc92:	1892      	adds	r2, r2, r2
    fc94:	415b      	adcs	r3, r3
    fc96:	0014      	movs	r4, r2
    fc98:	001d      	movs	r5, r3
		if (n & bit_shift) {
    fc9a:	9e05      	ldr	r6, [sp, #20]
    fc9c:	464f      	mov	r7, r9
    fc9e:	403e      	ands	r6, r7
    fca0:	46b4      	mov	ip, r6
    fca2:	9e04      	ldr	r6, [sp, #16]
    fca4:	4647      	mov	r7, r8
    fca6:	403e      	ands	r6, r7
    fca8:	46b2      	mov	sl, r6
    fcaa:	4666      	mov	r6, ip
    fcac:	4657      	mov	r7, sl
    fcae:	433e      	orrs	r6, r7
    fcb0:	d003      	beq.n	fcba <long_division+0x96>
			r |= 0x01;
    fcb2:	0006      	movs	r6, r0
    fcb4:	4326      	orrs	r6, r4
    fcb6:	0032      	movs	r2, r6
    fcb8:	002b      	movs	r3, r5
		if (r >= d) {
    fcba:	9c00      	ldr	r4, [sp, #0]
    fcbc:	9d01      	ldr	r5, [sp, #4]
    fcbe:	429d      	cmp	r5, r3
    fcc0:	d8db      	bhi.n	fc7a <long_division+0x56>
    fcc2:	d1ce      	bne.n	fc62 <long_division+0x3e>
    fcc4:	4294      	cmp	r4, r2
    fcc6:	d8d8      	bhi.n	fc7a <long_division+0x56>
    fcc8:	e7cb      	b.n	fc62 <long_division+0x3e>
    fcca:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    fccc:	4658      	mov	r0, fp
    fcce:	0019      	movs	r1, r3
    fcd0:	b007      	add	sp, #28
    fcd2:	bc3c      	pop	{r2, r3, r4, r5}
    fcd4:	4690      	mov	r8, r2
    fcd6:	4699      	mov	r9, r3
    fcd8:	46a2      	mov	sl, r4
    fcda:	46ab      	mov	fp, r5
    fcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fcde <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    fcde:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    fce0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fce2:	2340      	movs	r3, #64	; 0x40
    fce4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    fce6:	4281      	cmp	r1, r0
    fce8:	d202      	bcs.n	fcf0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    fcea:	0018      	movs	r0, r3
    fcec:	bd10      	pop	{r4, pc}
		baud_calculated++;
    fcee:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    fcf0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    fcf2:	1c63      	adds	r3, r4, #1
    fcf4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    fcf6:	4288      	cmp	r0, r1
    fcf8:	d9f9      	bls.n	fcee <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fcfa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    fcfc:	2cff      	cmp	r4, #255	; 0xff
    fcfe:	d8f4      	bhi.n	fcea <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    fd00:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    fd02:	2300      	movs	r3, #0
    fd04:	e7f1      	b.n	fcea <_sercom_get_sync_baud_val+0xc>
	...

0000fd08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd0a:	b083      	sub	sp, #12
    fd0c:	000f      	movs	r7, r1
    fd0e:	0016      	movs	r6, r2
    fd10:	aa08      	add	r2, sp, #32
    fd12:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    fd14:	0004      	movs	r4, r0
    fd16:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fd18:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    fd1a:	42bc      	cmp	r4, r7
    fd1c:	d902      	bls.n	fd24 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    fd1e:	0010      	movs	r0, r2
    fd20:	b003      	add	sp, #12
    fd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    fd24:	2b00      	cmp	r3, #0
    fd26:	d114      	bne.n	fd52 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    fd28:	0002      	movs	r2, r0
    fd2a:	0008      	movs	r0, r1
    fd2c:	2100      	movs	r1, #0
    fd2e:	4c19      	ldr	r4, [pc, #100]	; (fd94 <_sercom_get_async_baud_val+0x8c>)
    fd30:	47a0      	blx	r4
    fd32:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    fd34:	003a      	movs	r2, r7
    fd36:	2300      	movs	r3, #0
    fd38:	2000      	movs	r0, #0
    fd3a:	4c17      	ldr	r4, [pc, #92]	; (fd98 <_sercom_get_async_baud_val+0x90>)
    fd3c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    fd3e:	2200      	movs	r2, #0
    fd40:	2301      	movs	r3, #1
    fd42:	1a12      	subs	r2, r2, r0
    fd44:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    fd46:	0c12      	lsrs	r2, r2, #16
    fd48:	041b      	lsls	r3, r3, #16
    fd4a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    fd4c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    fd4e:	2200      	movs	r2, #0
    fd50:	e7e5      	b.n	fd1e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    fd52:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    fd54:	2b01      	cmp	r3, #1
    fd56:	d1f9      	bne.n	fd4c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    fd58:	000a      	movs	r2, r1
    fd5a:	2300      	movs	r3, #0
    fd5c:	2100      	movs	r1, #0
    fd5e:	4c0d      	ldr	r4, [pc, #52]	; (fd94 <_sercom_get_async_baud_val+0x8c>)
    fd60:	47a0      	blx	r4
    fd62:	0002      	movs	r2, r0
    fd64:	000b      	movs	r3, r1
    fd66:	9200      	str	r2, [sp, #0]
    fd68:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    fd6a:	0038      	movs	r0, r7
    fd6c:	2100      	movs	r1, #0
    fd6e:	4c0a      	ldr	r4, [pc, #40]	; (fd98 <_sercom_get_async_baud_val+0x90>)
    fd70:	47a0      	blx	r4
    fd72:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    fd74:	2380      	movs	r3, #128	; 0x80
    fd76:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    fd78:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    fd7a:	4298      	cmp	r0, r3
    fd7c:	d8cf      	bhi.n	fd1e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    fd7e:	0f79      	lsrs	r1, r7, #29
    fd80:	00f8      	lsls	r0, r7, #3
    fd82:	9a00      	ldr	r2, [sp, #0]
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    fd88:	00ea      	lsls	r2, r5, #3
    fd8a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    fd8c:	b2d2      	uxtb	r2, r2
    fd8e:	0352      	lsls	r2, r2, #13
    fd90:	432a      	orrs	r2, r5
    fd92:	e7db      	b.n	fd4c <_sercom_get_async_baud_val+0x44>
    fd94:	00016ea9 	.word	0x00016ea9
    fd98:	0000fc25 	.word	0x0000fc25

0000fd9c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    fd9c:	b510      	push	{r4, lr}
    fd9e:	b082      	sub	sp, #8
    fda0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    fda2:	4b0e      	ldr	r3, [pc, #56]	; (fddc <sercom_set_gclk_generator+0x40>)
    fda4:	781b      	ldrb	r3, [r3, #0]
    fda6:	2b00      	cmp	r3, #0
    fda8:	d007      	beq.n	fdba <sercom_set_gclk_generator+0x1e>
    fdaa:	2900      	cmp	r1, #0
    fdac:	d105      	bne.n	fdba <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    fdae:	4b0b      	ldr	r3, [pc, #44]	; (fddc <sercom_set_gclk_generator+0x40>)
    fdb0:	785b      	ldrb	r3, [r3, #1]
    fdb2:	4283      	cmp	r3, r0
    fdb4:	d010      	beq.n	fdd8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    fdb6:	201d      	movs	r0, #29
    fdb8:	e00c      	b.n	fdd4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    fdba:	a901      	add	r1, sp, #4
    fdbc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    fdbe:	2013      	movs	r0, #19
    fdc0:	4b07      	ldr	r3, [pc, #28]	; (fde0 <sercom_set_gclk_generator+0x44>)
    fdc2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    fdc4:	2013      	movs	r0, #19
    fdc6:	4b07      	ldr	r3, [pc, #28]	; (fde4 <sercom_set_gclk_generator+0x48>)
    fdc8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    fdca:	4b04      	ldr	r3, [pc, #16]	; (fddc <sercom_set_gclk_generator+0x40>)
    fdcc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    fdce:	2201      	movs	r2, #1
    fdd0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    fdd2:	2000      	movs	r0, #0
}
    fdd4:	b002      	add	sp, #8
    fdd6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    fdd8:	2000      	movs	r0, #0
    fdda:	e7fb      	b.n	fdd4 <sercom_set_gclk_generator+0x38>
    fddc:	200003e0 	.word	0x200003e0
    fde0:	00011419 	.word	0x00011419
    fde4:	0001138d 	.word	0x0001138d

0000fde8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    fde8:	4b40      	ldr	r3, [pc, #256]	; (feec <_sercom_get_default_pad+0x104>)
    fdea:	4298      	cmp	r0, r3
    fdec:	d031      	beq.n	fe52 <_sercom_get_default_pad+0x6a>
    fdee:	d90a      	bls.n	fe06 <_sercom_get_default_pad+0x1e>
    fdf0:	4b3f      	ldr	r3, [pc, #252]	; (fef0 <_sercom_get_default_pad+0x108>)
    fdf2:	4298      	cmp	r0, r3
    fdf4:	d04d      	beq.n	fe92 <_sercom_get_default_pad+0xaa>
    fdf6:	4b3f      	ldr	r3, [pc, #252]	; (fef4 <_sercom_get_default_pad+0x10c>)
    fdf8:	4298      	cmp	r0, r3
    fdfa:	d05a      	beq.n	feb2 <_sercom_get_default_pad+0xca>
    fdfc:	4b3e      	ldr	r3, [pc, #248]	; (fef8 <_sercom_get_default_pad+0x110>)
    fdfe:	4298      	cmp	r0, r3
    fe00:	d037      	beq.n	fe72 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    fe02:	2000      	movs	r0, #0
}
    fe04:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    fe06:	4b3d      	ldr	r3, [pc, #244]	; (fefc <_sercom_get_default_pad+0x114>)
    fe08:	4298      	cmp	r0, r3
    fe0a:	d00c      	beq.n	fe26 <_sercom_get_default_pad+0x3e>
    fe0c:	4b3c      	ldr	r3, [pc, #240]	; (ff00 <_sercom_get_default_pad+0x118>)
    fe0e:	4298      	cmp	r0, r3
    fe10:	d1f7      	bne.n	fe02 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fe12:	2901      	cmp	r1, #1
    fe14:	d017      	beq.n	fe46 <_sercom_get_default_pad+0x5e>
    fe16:	2900      	cmp	r1, #0
    fe18:	d05d      	beq.n	fed6 <_sercom_get_default_pad+0xee>
    fe1a:	2902      	cmp	r1, #2
    fe1c:	d015      	beq.n	fe4a <_sercom_get_default_pad+0x62>
    fe1e:	2903      	cmp	r1, #3
    fe20:	d015      	beq.n	fe4e <_sercom_get_default_pad+0x66>
	return 0;
    fe22:	2000      	movs	r0, #0
    fe24:	e7ee      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fe26:	2901      	cmp	r1, #1
    fe28:	d007      	beq.n	fe3a <_sercom_get_default_pad+0x52>
    fe2a:	2900      	cmp	r1, #0
    fe2c:	d051      	beq.n	fed2 <_sercom_get_default_pad+0xea>
    fe2e:	2902      	cmp	r1, #2
    fe30:	d005      	beq.n	fe3e <_sercom_get_default_pad+0x56>
    fe32:	2903      	cmp	r1, #3
    fe34:	d005      	beq.n	fe42 <_sercom_get_default_pad+0x5a>
	return 0;
    fe36:	2000      	movs	r0, #0
    fe38:	e7e4      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fe3a:	4832      	ldr	r0, [pc, #200]	; (ff04 <_sercom_get_default_pad+0x11c>)
    fe3c:	e7e2      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe3e:	4832      	ldr	r0, [pc, #200]	; (ff08 <_sercom_get_default_pad+0x120>)
    fe40:	e7e0      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe42:	4832      	ldr	r0, [pc, #200]	; (ff0c <_sercom_get_default_pad+0x124>)
    fe44:	e7de      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe46:	4832      	ldr	r0, [pc, #200]	; (ff10 <_sercom_get_default_pad+0x128>)
    fe48:	e7dc      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe4a:	4832      	ldr	r0, [pc, #200]	; (ff14 <_sercom_get_default_pad+0x12c>)
    fe4c:	e7da      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe4e:	4832      	ldr	r0, [pc, #200]	; (ff18 <_sercom_get_default_pad+0x130>)
    fe50:	e7d8      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe52:	2901      	cmp	r1, #1
    fe54:	d007      	beq.n	fe66 <_sercom_get_default_pad+0x7e>
    fe56:	2900      	cmp	r1, #0
    fe58:	d03f      	beq.n	feda <_sercom_get_default_pad+0xf2>
    fe5a:	2902      	cmp	r1, #2
    fe5c:	d005      	beq.n	fe6a <_sercom_get_default_pad+0x82>
    fe5e:	2903      	cmp	r1, #3
    fe60:	d005      	beq.n	fe6e <_sercom_get_default_pad+0x86>
	return 0;
    fe62:	2000      	movs	r0, #0
    fe64:	e7ce      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fe66:	482d      	ldr	r0, [pc, #180]	; (ff1c <_sercom_get_default_pad+0x134>)
    fe68:	e7cc      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe6a:	482d      	ldr	r0, [pc, #180]	; (ff20 <_sercom_get_default_pad+0x138>)
    fe6c:	e7ca      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe6e:	482d      	ldr	r0, [pc, #180]	; (ff24 <_sercom_get_default_pad+0x13c>)
    fe70:	e7c8      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe72:	2901      	cmp	r1, #1
    fe74:	d007      	beq.n	fe86 <_sercom_get_default_pad+0x9e>
    fe76:	2900      	cmp	r1, #0
    fe78:	d031      	beq.n	fede <_sercom_get_default_pad+0xf6>
    fe7a:	2902      	cmp	r1, #2
    fe7c:	d005      	beq.n	fe8a <_sercom_get_default_pad+0xa2>
    fe7e:	2903      	cmp	r1, #3
    fe80:	d005      	beq.n	fe8e <_sercom_get_default_pad+0xa6>
	return 0;
    fe82:	2000      	movs	r0, #0
    fe84:	e7be      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fe86:	4828      	ldr	r0, [pc, #160]	; (ff28 <_sercom_get_default_pad+0x140>)
    fe88:	e7bc      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe8a:	4828      	ldr	r0, [pc, #160]	; (ff2c <_sercom_get_default_pad+0x144>)
    fe8c:	e7ba      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe8e:	4828      	ldr	r0, [pc, #160]	; (ff30 <_sercom_get_default_pad+0x148>)
    fe90:	e7b8      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fe92:	2901      	cmp	r1, #1
    fe94:	d007      	beq.n	fea6 <_sercom_get_default_pad+0xbe>
    fe96:	2900      	cmp	r1, #0
    fe98:	d023      	beq.n	fee2 <_sercom_get_default_pad+0xfa>
    fe9a:	2902      	cmp	r1, #2
    fe9c:	d005      	beq.n	feaa <_sercom_get_default_pad+0xc2>
    fe9e:	2903      	cmp	r1, #3
    fea0:	d005      	beq.n	feae <_sercom_get_default_pad+0xc6>
	return 0;
    fea2:	2000      	movs	r0, #0
    fea4:	e7ae      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fea6:	4823      	ldr	r0, [pc, #140]	; (ff34 <_sercom_get_default_pad+0x14c>)
    fea8:	e7ac      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feaa:	4823      	ldr	r0, [pc, #140]	; (ff38 <_sercom_get_default_pad+0x150>)
    feac:	e7aa      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feae:	4823      	ldr	r0, [pc, #140]	; (ff3c <_sercom_get_default_pad+0x154>)
    feb0:	e7a8      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feb2:	2901      	cmp	r1, #1
    feb4:	d007      	beq.n	fec6 <_sercom_get_default_pad+0xde>
    feb6:	2900      	cmp	r1, #0
    feb8:	d015      	beq.n	fee6 <_sercom_get_default_pad+0xfe>
    feba:	2902      	cmp	r1, #2
    febc:	d005      	beq.n	feca <_sercom_get_default_pad+0xe2>
    febe:	2903      	cmp	r1, #3
    fec0:	d005      	beq.n	fece <_sercom_get_default_pad+0xe6>
	return 0;
    fec2:	2000      	movs	r0, #0
    fec4:	e79e      	b.n	fe04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    fec6:	481e      	ldr	r0, [pc, #120]	; (ff40 <_sercom_get_default_pad+0x158>)
    fec8:	e79c      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feca:	481e      	ldr	r0, [pc, #120]	; (ff44 <_sercom_get_default_pad+0x15c>)
    fecc:	e79a      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fece:	481e      	ldr	r0, [pc, #120]	; (ff48 <_sercom_get_default_pad+0x160>)
    fed0:	e798      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fed2:	481e      	ldr	r0, [pc, #120]	; (ff4c <_sercom_get_default_pad+0x164>)
    fed4:	e796      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fed6:	2003      	movs	r0, #3
    fed8:	e794      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feda:	481d      	ldr	r0, [pc, #116]	; (ff50 <_sercom_get_default_pad+0x168>)
    fedc:	e792      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fede:	481d      	ldr	r0, [pc, #116]	; (ff54 <_sercom_get_default_pad+0x16c>)
    fee0:	e790      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fee2:	481d      	ldr	r0, [pc, #116]	; (ff58 <_sercom_get_default_pad+0x170>)
    fee4:	e78e      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    fee6:	481d      	ldr	r0, [pc, #116]	; (ff5c <_sercom_get_default_pad+0x174>)
    fee8:	e78c      	b.n	fe04 <_sercom_get_default_pad+0x1c>
    feea:	46c0      	nop			; (mov r8, r8)
    feec:	42001000 	.word	0x42001000
    fef0:	42001800 	.word	0x42001800
    fef4:	42001c00 	.word	0x42001c00
    fef8:	42001400 	.word	0x42001400
    fefc:	42000800 	.word	0x42000800
    ff00:	42000c00 	.word	0x42000c00
    ff04:	00050003 	.word	0x00050003
    ff08:	00060003 	.word	0x00060003
    ff0c:	00070003 	.word	0x00070003
    ff10:	00010003 	.word	0x00010003
    ff14:	001e0003 	.word	0x001e0003
    ff18:	001f0003 	.word	0x001f0003
    ff1c:	00090003 	.word	0x00090003
    ff20:	000a0003 	.word	0x000a0003
    ff24:	000b0003 	.word	0x000b0003
    ff28:	00110003 	.word	0x00110003
    ff2c:	00120003 	.word	0x00120003
    ff30:	00130003 	.word	0x00130003
    ff34:	000d0003 	.word	0x000d0003
    ff38:	000e0003 	.word	0x000e0003
    ff3c:	000f0003 	.word	0x000f0003
    ff40:	00170003 	.word	0x00170003
    ff44:	00180003 	.word	0x00180003
    ff48:	00190003 	.word	0x00190003
    ff4c:	00040003 	.word	0x00040003
    ff50:	00080003 	.word	0x00080003
    ff54:	00100003 	.word	0x00100003
    ff58:	000c0003 	.word	0x000c0003
    ff5c:	00160003 	.word	0x00160003

0000ff60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    ff60:	b530      	push	{r4, r5, lr}
    ff62:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    ff64:	4b0b      	ldr	r3, [pc, #44]	; (ff94 <_sercom_get_sercom_inst_index+0x34>)
    ff66:	466a      	mov	r2, sp
    ff68:	cb32      	ldmia	r3!, {r1, r4, r5}
    ff6a:	c232      	stmia	r2!, {r1, r4, r5}
    ff6c:	cb32      	ldmia	r3!, {r1, r4, r5}
    ff6e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    ff70:	9b00      	ldr	r3, [sp, #0]
    ff72:	4283      	cmp	r3, r0
    ff74:	d00b      	beq.n	ff8e <_sercom_get_sercom_inst_index+0x2e>
    ff76:	2301      	movs	r3, #1
    ff78:	009a      	lsls	r2, r3, #2
    ff7a:	4669      	mov	r1, sp
    ff7c:	5852      	ldr	r2, [r2, r1]
    ff7e:	4282      	cmp	r2, r0
    ff80:	d006      	beq.n	ff90 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ff82:	3301      	adds	r3, #1
    ff84:	2b06      	cmp	r3, #6
    ff86:	d1f7      	bne.n	ff78 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    ff88:	2000      	movs	r0, #0
}
    ff8a:	b007      	add	sp, #28
    ff8c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ff8e:	2300      	movs	r3, #0
			return i;
    ff90:	b2d8      	uxtb	r0, r3
    ff92:	e7fa      	b.n	ff8a <_sercom_get_sercom_inst_index+0x2a>
    ff94:	00019584 	.word	0x00019584

0000ff98 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    ff98:	4770      	bx	lr
	...

0000ff9c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    ff9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    ff9e:	4b0a      	ldr	r3, [pc, #40]	; (ffc8 <_sercom_set_handler+0x2c>)
    ffa0:	781b      	ldrb	r3, [r3, #0]
    ffa2:	2b00      	cmp	r3, #0
    ffa4:	d10c      	bne.n	ffc0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ffa6:	4f09      	ldr	r7, [pc, #36]	; (ffcc <_sercom_set_handler+0x30>)
    ffa8:	4e09      	ldr	r6, [pc, #36]	; (ffd0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    ffaa:	4d0a      	ldr	r5, [pc, #40]	; (ffd4 <_sercom_set_handler+0x38>)
    ffac:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ffae:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    ffb0:	195a      	adds	r2, r3, r5
    ffb2:	6014      	str	r4, [r2, #0]
    ffb4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ffb6:	2b18      	cmp	r3, #24
    ffb8:	d1f9      	bne.n	ffae <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    ffba:	2201      	movs	r2, #1
    ffbc:	4b02      	ldr	r3, [pc, #8]	; (ffc8 <_sercom_set_handler+0x2c>)
    ffbe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ffc0:	0080      	lsls	r0, r0, #2
    ffc2:	4b02      	ldr	r3, [pc, #8]	; (ffcc <_sercom_set_handler+0x30>)
    ffc4:	50c1      	str	r1, [r0, r3]
}
    ffc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffc8:	200003e2 	.word	0x200003e2
    ffcc:	200003e4 	.word	0x200003e4
    ffd0:	0000ff99 	.word	0x0000ff99
    ffd4:	200014b0 	.word	0x200014b0

0000ffd8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    ffd8:	b500      	push	{lr}
    ffda:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    ffdc:	2309      	movs	r3, #9
    ffde:	466a      	mov	r2, sp
    ffe0:	7013      	strb	r3, [r2, #0]
    ffe2:	3301      	adds	r3, #1
    ffe4:	7053      	strb	r3, [r2, #1]
    ffe6:	3301      	adds	r3, #1
    ffe8:	7093      	strb	r3, [r2, #2]
    ffea:	3301      	adds	r3, #1
    ffec:	70d3      	strb	r3, [r2, #3]
    ffee:	3301      	adds	r3, #1
    fff0:	7113      	strb	r3, [r2, #4]
    fff2:	3301      	adds	r3, #1
    fff4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    fff6:	4b03      	ldr	r3, [pc, #12]	; (10004 <_sercom_get_interrupt_vector+0x2c>)
    fff8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    fffa:	466b      	mov	r3, sp
    fffc:	5618      	ldrsb	r0, [r3, r0]
}
    fffe:	b003      	add	sp, #12
   10000:	bd00      	pop	{pc}
   10002:	46c0      	nop			; (mov r8, r8)
   10004:	0000ff61 	.word	0x0000ff61

00010008 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   10008:	b510      	push	{r4, lr}
   1000a:	4b02      	ldr	r3, [pc, #8]	; (10014 <SERCOM0_Handler+0xc>)
   1000c:	681b      	ldr	r3, [r3, #0]
   1000e:	2000      	movs	r0, #0
   10010:	4798      	blx	r3
   10012:	bd10      	pop	{r4, pc}
   10014:	200003e4 	.word	0x200003e4

00010018 <SERCOM1_Handler>:
   10018:	b510      	push	{r4, lr}
   1001a:	4b02      	ldr	r3, [pc, #8]	; (10024 <SERCOM1_Handler+0xc>)
   1001c:	685b      	ldr	r3, [r3, #4]
   1001e:	2001      	movs	r0, #1
   10020:	4798      	blx	r3
   10022:	bd10      	pop	{r4, pc}
   10024:	200003e4 	.word	0x200003e4

00010028 <SERCOM2_Handler>:
   10028:	b510      	push	{r4, lr}
   1002a:	4b02      	ldr	r3, [pc, #8]	; (10034 <SERCOM2_Handler+0xc>)
   1002c:	689b      	ldr	r3, [r3, #8]
   1002e:	2002      	movs	r0, #2
   10030:	4798      	blx	r3
   10032:	bd10      	pop	{r4, pc}
   10034:	200003e4 	.word	0x200003e4

00010038 <SERCOM3_Handler>:
   10038:	b510      	push	{r4, lr}
   1003a:	4b02      	ldr	r3, [pc, #8]	; (10044 <SERCOM3_Handler+0xc>)
   1003c:	68db      	ldr	r3, [r3, #12]
   1003e:	2003      	movs	r0, #3
   10040:	4798      	blx	r3
   10042:	bd10      	pop	{r4, pc}
   10044:	200003e4 	.word	0x200003e4

00010048 <SERCOM4_Handler>:
   10048:	b510      	push	{r4, lr}
   1004a:	4b02      	ldr	r3, [pc, #8]	; (10054 <SERCOM4_Handler+0xc>)
   1004c:	691b      	ldr	r3, [r3, #16]
   1004e:	2004      	movs	r0, #4
   10050:	4798      	blx	r3
   10052:	bd10      	pop	{r4, pc}
   10054:	200003e4 	.word	0x200003e4

00010058 <SERCOM5_Handler>:
   10058:	b510      	push	{r4, lr}
   1005a:	4b02      	ldr	r3, [pc, #8]	; (10064 <SERCOM5_Handler+0xc>)
   1005c:	695b      	ldr	r3, [r3, #20]
   1005e:	2005      	movs	r0, #5
   10060:	4798      	blx	r3
   10062:	bd10      	pop	{r4, pc}
   10064:	200003e4 	.word	0x200003e4

00010068 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   10068:	b570      	push	{r4, r5, r6, lr}
   1006a:	b082      	sub	sp, #8
   1006c:	0005      	movs	r5, r0
   1006e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   10070:	2200      	movs	r2, #0
   10072:	466b      	mov	r3, sp
   10074:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   10076:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   10078:	0030      	movs	r0, r6
   1007a:	4b24      	ldr	r3, [pc, #144]	; (1010c <spi_set_baudrate+0xa4>)
   1007c:	4798      	blx	r3
   1007e:	231f      	movs	r3, #31
   10080:	4018      	ands	r0, r3
   10082:	3b1e      	subs	r3, #30
   10084:	4083      	lsls	r3, r0
   10086:	2280      	movs	r2, #128	; 0x80
   10088:	4921      	ldr	r1, [pc, #132]	; (10110 <spi_set_baudrate+0xa8>)
   1008a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1008c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1008e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10090:	2b00      	cmp	r3, #0
   10092:	d1fc      	bne.n	1008e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   10094:	338f      	adds	r3, #143	; 0x8f
   10096:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   10098:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1009a:	6833      	ldr	r3, [r6, #0]
   1009c:	2202      	movs	r2, #2
   1009e:	4393      	bics	r3, r2
   100a0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   100a2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   100a4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   100a6:	2b00      	cmp	r3, #0
   100a8:	d1fc      	bne.n	100a4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   100aa:	4b1a      	ldr	r3, [pc, #104]	; (10114 <spi_set_baudrate+0xac>)
   100ac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   100ae:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   100b0:	b2c0      	uxtb	r0, r0
   100b2:	4b19      	ldr	r3, [pc, #100]	; (10118 <spi_set_baudrate+0xb0>)
   100b4:	4798      	blx	r3
   100b6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   100b8:	466b      	mov	r3, sp
   100ba:	1d9a      	adds	r2, r3, #6
   100bc:	0020      	movs	r0, r4
   100be:	4b17      	ldr	r3, [pc, #92]	; (1011c <spi_set_baudrate+0xb4>)
   100c0:	4798      	blx	r3
   100c2:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   100c4:	d003      	beq.n	100ce <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   100c6:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   100c8:	0020      	movs	r0, r4
   100ca:	b002      	add	sp, #8
   100cc:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   100ce:	466b      	mov	r3, sp
   100d0:	3306      	adds	r3, #6
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   100d6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   100d8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   100da:	2b00      	cmp	r3, #0
   100dc:	d1fc      	bne.n	100d8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   100de:	0030      	movs	r0, r6
   100e0:	4b0a      	ldr	r3, [pc, #40]	; (1010c <spi_set_baudrate+0xa4>)
   100e2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   100e4:	231f      	movs	r3, #31
   100e6:	4018      	ands	r0, r3
   100e8:	3b1e      	subs	r3, #30
   100ea:	4083      	lsls	r3, r0
   100ec:	4a08      	ldr	r2, [pc, #32]	; (10110 <spi_set_baudrate+0xa8>)
   100ee:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   100f0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   100f2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   100f4:	2b00      	cmp	r3, #0
   100f6:	d1fc      	bne.n	100f2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   100f8:	6833      	ldr	r3, [r6, #0]
   100fa:	2202      	movs	r2, #2
   100fc:	4313      	orrs	r3, r2
   100fe:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10100:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10102:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10104:	2b00      	cmp	r3, #0
   10106:	d1fc      	bne.n	10102 <spi_set_baudrate+0x9a>
   10108:	e7de      	b.n	100c8 <spi_set_baudrate+0x60>
   1010a:	46c0      	nop			; (mov r8, r8)
   1010c:	0000ffd9 	.word	0x0000ffd9
   10110:	e000e100 	.word	0xe000e100
   10114:	0000ff61 	.word	0x0000ff61
   10118:	00011435 	.word	0x00011435
   1011c:	0000fcdf 	.word	0x0000fcdf

00010120 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   10120:	b5f0      	push	{r4, r5, r6, r7, lr}
   10122:	b08b      	sub	sp, #44	; 0x2c
   10124:	0005      	movs	r5, r0
   10126:	000c      	movs	r4, r1
   10128:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1012a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1012c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1012e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   10130:	079b      	lsls	r3, r3, #30
   10132:	d501      	bpl.n	10138 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   10134:	b00b      	add	sp, #44	; 0x2c
   10136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   10138:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1013a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1013c:	07db      	lsls	r3, r3, #31
   1013e:	d4f9      	bmi.n	10134 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10140:	0008      	movs	r0, r1
   10142:	4b60      	ldr	r3, [pc, #384]	; (102c4 <spi_init+0x1a4>)
   10144:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   10146:	4a60      	ldr	r2, [pc, #384]	; (102c8 <spi_init+0x1a8>)
   10148:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1014a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1014c:	2301      	movs	r3, #1
   1014e:	40bb      	lsls	r3, r7
   10150:	430b      	orrs	r3, r1
   10152:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   10154:	a909      	add	r1, sp, #36	; 0x24
   10156:	2724      	movs	r7, #36	; 0x24
   10158:	5df3      	ldrb	r3, [r6, r7]
   1015a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1015c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1015e:	b2c3      	uxtb	r3, r0
   10160:	9301      	str	r3, [sp, #4]
   10162:	0018      	movs	r0, r3
   10164:	4b59      	ldr	r3, [pc, #356]	; (102cc <spi_init+0x1ac>)
   10166:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10168:	9801      	ldr	r0, [sp, #4]
   1016a:	4b59      	ldr	r3, [pc, #356]	; (102d0 <spi_init+0x1b0>)
   1016c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1016e:	5df0      	ldrb	r0, [r6, r7]
   10170:	2100      	movs	r1, #0
   10172:	4b58      	ldr	r3, [pc, #352]	; (102d4 <spi_init+0x1b4>)
   10174:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   10176:	7833      	ldrb	r3, [r6, #0]
   10178:	2b01      	cmp	r3, #1
   1017a:	d038      	beq.n	101ee <spi_init+0xce>
   1017c:	002b      	movs	r3, r5
   1017e:	330c      	adds	r3, #12
   10180:	0029      	movs	r1, r5
   10182:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   10184:	2200      	movs	r2, #0
   10186:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   10188:	428b      	cmp	r3, r1
   1018a:	d1fc      	bne.n	10186 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1018c:	2300      	movs	r3, #0
   1018e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   10190:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   10192:	2400      	movs	r4, #0
   10194:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   10196:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   10198:	3336      	adds	r3, #54	; 0x36
   1019a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1019c:	3301      	adds	r3, #1
   1019e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   101a0:	3301      	adds	r3, #1
   101a2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   101a4:	3b35      	subs	r3, #53	; 0x35
   101a6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   101a8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   101aa:	6828      	ldr	r0, [r5, #0]
   101ac:	4b45      	ldr	r3, [pc, #276]	; (102c4 <spi_init+0x1a4>)
   101ae:	4798      	blx	r3
   101b0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   101b2:	4949      	ldr	r1, [pc, #292]	; (102d8 <spi_init+0x1b8>)
   101b4:	4b49      	ldr	r3, [pc, #292]	; (102dc <spi_init+0x1bc>)
   101b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   101b8:	00bf      	lsls	r7, r7, #2
   101ba:	4b49      	ldr	r3, [pc, #292]	; (102e0 <spi_init+0x1c0>)
   101bc:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   101be:	682f      	ldr	r7, [r5, #0]
   101c0:	ab04      	add	r3, sp, #16
   101c2:	2280      	movs	r2, #128	; 0x80
   101c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   101c6:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   101c8:	3a7f      	subs	r2, #127	; 0x7f
   101ca:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   101cc:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   101ce:	7833      	ldrb	r3, [r6, #0]
   101d0:	2b00      	cmp	r3, #0
   101d2:	d102      	bne.n	101da <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   101d4:	2200      	movs	r2, #0
   101d6:	ab04      	add	r3, sp, #16
   101d8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   101da:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   101dc:	9305      	str	r3, [sp, #20]
   101de:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   101e0:	9306      	str	r3, [sp, #24]
   101e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   101e4:	9307      	str	r3, [sp, #28]
   101e6:	6b73      	ldr	r3, [r6, #52]	; 0x34
   101e8:	9308      	str	r3, [sp, #32]
   101ea:	2400      	movs	r4, #0
   101ec:	e00b      	b.n	10206 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   101ee:	6823      	ldr	r3, [r4, #0]
   101f0:	220c      	movs	r2, #12
   101f2:	4313      	orrs	r3, r2
   101f4:	6023      	str	r3, [r4, #0]
   101f6:	e7c1      	b.n	1017c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   101f8:	0038      	movs	r0, r7
   101fa:	4b3a      	ldr	r3, [pc, #232]	; (102e4 <spi_init+0x1c4>)
   101fc:	4798      	blx	r3
   101fe:	e00a      	b.n	10216 <spi_init+0xf6>
   10200:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   10202:	2c04      	cmp	r4, #4
   10204:	d010      	beq.n	10228 <spi_init+0x108>
   10206:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10208:	00a3      	lsls	r3, r4, #2
   1020a:	aa02      	add	r2, sp, #8
   1020c:	200c      	movs	r0, #12
   1020e:	1812      	adds	r2, r2, r0
   10210:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   10212:	2800      	cmp	r0, #0
   10214:	d0f0      	beq.n	101f8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   10216:	1c43      	adds	r3, r0, #1
   10218:	d0f2      	beq.n	10200 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1021a:	a904      	add	r1, sp, #16
   1021c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1021e:	0c00      	lsrs	r0, r0, #16
   10220:	b2c0      	uxtb	r0, r0
   10222:	4b31      	ldr	r3, [pc, #196]	; (102e8 <spi_init+0x1c8>)
   10224:	4798      	blx	r3
   10226:	e7eb      	b.n	10200 <spi_init+0xe0>
	module->mode             = config->mode;
   10228:	7833      	ldrb	r3, [r6, #0]
   1022a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1022c:	7c33      	ldrb	r3, [r6, #16]
   1022e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   10230:	7cb3      	ldrb	r3, [r6, #18]
   10232:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   10234:	7d33      	ldrb	r3, [r6, #20]
   10236:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   10238:	2200      	movs	r2, #0
   1023a:	ab02      	add	r3, sp, #8
   1023c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1023e:	7833      	ldrb	r3, [r6, #0]
   10240:	2b01      	cmp	r3, #1
   10242:	d028      	beq.n	10296 <spi_init+0x176>
	ctrla |= config->transfer_mode;
   10244:	6873      	ldr	r3, [r6, #4]
   10246:	68b2      	ldr	r2, [r6, #8]
   10248:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1024a:	68f2      	ldr	r2, [r6, #12]
   1024c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1024e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   10250:	7c72      	ldrb	r2, [r6, #17]
   10252:	2a00      	cmp	r2, #0
   10254:	d103      	bne.n	1025e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10256:	4a25      	ldr	r2, [pc, #148]	; (102ec <spi_init+0x1cc>)
   10258:	7892      	ldrb	r2, [r2, #2]
   1025a:	0792      	lsls	r2, r2, #30
   1025c:	d501      	bpl.n	10262 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1025e:	2280      	movs	r2, #128	; 0x80
   10260:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   10262:	7cb2      	ldrb	r2, [r6, #18]
   10264:	2a00      	cmp	r2, #0
   10266:	d002      	beq.n	1026e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   10268:	2280      	movs	r2, #128	; 0x80
   1026a:	0292      	lsls	r2, r2, #10
   1026c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1026e:	7cf2      	ldrb	r2, [r6, #19]
   10270:	2a00      	cmp	r2, #0
   10272:	d002      	beq.n	1027a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   10274:	2280      	movs	r2, #128	; 0x80
   10276:	0092      	lsls	r2, r2, #2
   10278:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1027a:	7d32      	ldrb	r2, [r6, #20]
   1027c:	2a00      	cmp	r2, #0
   1027e:	d002      	beq.n	10286 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   10280:	2280      	movs	r2, #128	; 0x80
   10282:	0192      	lsls	r2, r2, #6
   10284:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   10286:	683a      	ldr	r2, [r7, #0]
   10288:	4313      	orrs	r3, r2
   1028a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1028c:	687b      	ldr	r3, [r7, #4]
   1028e:	430b      	orrs	r3, r1
   10290:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   10292:	2000      	movs	r0, #0
   10294:	e74e      	b.n	10134 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10296:	6828      	ldr	r0, [r5, #0]
   10298:	4b0a      	ldr	r3, [pc, #40]	; (102c4 <spi_init+0x1a4>)
   1029a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1029c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1029e:	b2c0      	uxtb	r0, r0
   102a0:	4b13      	ldr	r3, [pc, #76]	; (102f0 <spi_init+0x1d0>)
   102a2:	4798      	blx	r3
   102a4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   102a6:	ab02      	add	r3, sp, #8
   102a8:	1d9a      	adds	r2, r3, #6
   102aa:	69b0      	ldr	r0, [r6, #24]
   102ac:	4b11      	ldr	r3, [pc, #68]	; (102f4 <spi_init+0x1d4>)
   102ae:	4798      	blx	r3
   102b0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   102b2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   102b4:	2b00      	cmp	r3, #0
   102b6:	d000      	beq.n	102ba <spi_init+0x19a>
   102b8:	e73c      	b.n	10134 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   102ba:	ab02      	add	r3, sp, #8
   102bc:	3306      	adds	r3, #6
   102be:	781b      	ldrb	r3, [r3, #0]
   102c0:	733b      	strb	r3, [r7, #12]
   102c2:	e7bf      	b.n	10244 <spi_init+0x124>
   102c4:	0000ff61 	.word	0x0000ff61
   102c8:	40000400 	.word	0x40000400
   102cc:	00011419 	.word	0x00011419
   102d0:	0001138d 	.word	0x0001138d
   102d4:	0000fd9d 	.word	0x0000fd9d
   102d8:	0001058d 	.word	0x0001058d
   102dc:	0000ff9d 	.word	0x0000ff9d
   102e0:	200014b0 	.word	0x200014b0
   102e4:	0000fde9 	.word	0x0000fde9
   102e8:	00011511 	.word	0x00011511
   102ec:	41002000 	.word	0x41002000
   102f0:	00011435 	.word	0x00011435
   102f4:	0000fcdf 	.word	0x0000fcdf

000102f8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102fa:	46d6      	mov	lr, sl
   102fc:	4647      	mov	r7, r8
   102fe:	b580      	push	{r7, lr}
   10300:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   10302:	2438      	movs	r4, #56	; 0x38
   10304:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   10306:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   10308:	2d05      	cmp	r5, #5
   1030a:	d002      	beq.n	10312 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1030c:	3412      	adds	r4, #18
	if (length == 0) {
   1030e:	2a00      	cmp	r2, #0
   10310:	d105      	bne.n	1031e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   10312:	0020      	movs	r0, r4
   10314:	b003      	add	sp, #12
   10316:	bc0c      	pop	{r2, r3}
   10318:	4690      	mov	r8, r2
   1031a:	469a      	mov	sl, r3
   1031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1031e:	79c4      	ldrb	r4, [r0, #7]
   10320:	2c00      	cmp	r4, #0
   10322:	d144      	bne.n	103ae <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   10324:	341c      	adds	r4, #28
   10326:	e7f4      	b.n	10312 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10328:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1032a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1032c:	423c      	tst	r4, r7
   1032e:	d0fc      	beq.n	1032a <spi_read_buffer_wait+0x32>
   10330:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   10332:	423c      	tst	r4, r7
   10334:	d01a      	beq.n	1036c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10336:	4644      	mov	r4, r8
   10338:	62ac      	str	r4, [r5, #40]	; 0x28
   1033a:	e017      	b.n	1036c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1033c:	7984      	ldrb	r4, [r0, #6]
   1033e:	2c01      	cmp	r4, #1
   10340:	d026      	beq.n	10390 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10342:	6aad      	ldr	r5, [r5, #40]	; 0x28
   10344:	b2ec      	uxtb	r4, r5
   10346:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   10348:	9c01      	ldr	r4, [sp, #4]
   1034a:	2c00      	cmp	r4, #0
   1034c:	d13a      	bne.n	103c4 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1034e:	1c75      	adds	r5, r6, #1
   10350:	b2ad      	uxth	r5, r5
   10352:	4664      	mov	r4, ip
   10354:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10356:	7984      	ldrb	r4, [r0, #6]
   10358:	2c01      	cmp	r4, #1
   1035a:	d01e      	beq.n	1039a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1035c:	002e      	movs	r6, r5
	while (length--) {
   1035e:	3a01      	subs	r2, #1
   10360:	b292      	uxth	r2, r2
   10362:	4552      	cmp	r2, sl
   10364:	d01f      	beq.n	103a6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   10366:	7944      	ldrb	r4, [r0, #5]
   10368:	2c01      	cmp	r4, #1
   1036a:	d0dd      	beq.n	10328 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1036c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1036e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   10370:	421c      	tst	r4, r3
   10372:	d0fc      	beq.n	1036e <spi_read_buffer_wait+0x76>
   10374:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   10376:	421c      	tst	r4, r3
   10378:	d017      	beq.n	103aa <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1037a:	8b6c      	ldrh	r4, [r5, #26]
   1037c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1037e:	2400      	movs	r4, #0
   10380:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10382:	4664      	mov	r4, ip
   10384:	421c      	tst	r4, r3
   10386:	d0d9      	beq.n	1033c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10388:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1038a:	241e      	movs	r4, #30
   1038c:	9401      	str	r4, [sp, #4]
   1038e:	e7d5      	b.n	1033c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10390:	6aac      	ldr	r4, [r5, #40]	; 0x28
   10392:	05e4      	lsls	r4, r4, #23
   10394:	0de4      	lsrs	r4, r4, #23
   10396:	46a4      	mov	ip, r4
   10398:	e7d6      	b.n	10348 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1039a:	3602      	adds	r6, #2
   1039c:	b2b6      	uxth	r6, r6
   1039e:	4664      	mov	r4, ip
   103a0:	0a24      	lsrs	r4, r4, #8
   103a2:	554c      	strb	r4, [r1, r5]
   103a4:	e7db      	b.n	1035e <spi_read_buffer_wait+0x66>
   103a6:	9c01      	ldr	r4, [sp, #4]
   103a8:	e7b3      	b.n	10312 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   103aa:	2410      	movs	r4, #16
   103ac:	e7b1      	b.n	10312 <spi_read_buffer_wait+0x1a>
	while (length--) {
   103ae:	3a01      	subs	r2, #1
   103b0:	b292      	uxth	r2, r2
   103b2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   103b4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   103b6:	05db      	lsls	r3, r3, #23
   103b8:	0ddb      	lsrs	r3, r3, #23
   103ba:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   103bc:	2304      	movs	r3, #4
	while (length--) {
   103be:	4c02      	ldr	r4, [pc, #8]	; (103c8 <spi_read_buffer_wait+0xd0>)
   103c0:	46a2      	mov	sl, r4
   103c2:	e7d0      	b.n	10366 <spi_read_buffer_wait+0x6e>
   103c4:	9c01      	ldr	r4, [sp, #4]
   103c6:	e7a4      	b.n	10312 <spi_read_buffer_wait+0x1a>
   103c8:	0000ffff 	.word	0x0000ffff

000103cc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   103cc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   103ce:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   103d0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   103d2:	2c01      	cmp	r4, #1
   103d4:	d001      	beq.n	103da <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   103d6:	0018      	movs	r0, r3
   103d8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   103da:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   103dc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   103de:	2c00      	cmp	r4, #0
   103e0:	d1f9      	bne.n	103d6 <spi_select_slave+0xa>
		if (select) {
   103e2:	2a00      	cmp	r2, #0
   103e4:	d058      	beq.n	10498 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   103e6:	784b      	ldrb	r3, [r1, #1]
   103e8:	2b00      	cmp	r3, #0
   103ea:	d044      	beq.n	10476 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   103ec:	6803      	ldr	r3, [r0, #0]
   103ee:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   103f0:	07db      	lsls	r3, r3, #31
   103f2:	d410      	bmi.n	10416 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   103f4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   103f6:	09d1      	lsrs	r1, r2, #7
		return NULL;
   103f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   103fa:	2900      	cmp	r1, #0
   103fc:	d104      	bne.n	10408 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   103fe:	0953      	lsrs	r3, r2, #5
   10400:	01db      	lsls	r3, r3, #7
   10402:	492e      	ldr	r1, [pc, #184]	; (104bc <spi_select_slave+0xf0>)
   10404:	468c      	mov	ip, r1
   10406:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10408:	211f      	movs	r1, #31
   1040a:	4011      	ands	r1, r2
   1040c:	2201      	movs	r2, #1
   1040e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10410:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   10412:	2305      	movs	r3, #5
   10414:	e7df      	b.n	103d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   10416:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10418:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1041a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1041c:	2c00      	cmp	r4, #0
   1041e:	d104      	bne.n	1042a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   10420:	0953      	lsrs	r3, r2, #5
   10422:	01db      	lsls	r3, r3, #7
   10424:	4c25      	ldr	r4, [pc, #148]	; (104bc <spi_select_slave+0xf0>)
   10426:	46a4      	mov	ip, r4
   10428:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1042a:	241f      	movs	r4, #31
   1042c:	4014      	ands	r4, r2
   1042e:	2201      	movs	r2, #1
   10430:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   10432:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10434:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10436:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   10438:	07d2      	lsls	r2, r2, #31
   1043a:	d501      	bpl.n	10440 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1043c:	788a      	ldrb	r2, [r1, #2]
   1043e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   10440:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   10442:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   10444:	2a00      	cmp	r2, #0
   10446:	d1c6      	bne.n	103d6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10448:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1044a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1044c:	7e13      	ldrb	r3, [r2, #24]
   1044e:	420b      	tst	r3, r1
   10450:	d0fc      	beq.n	1044c <spi_select_slave+0x80>
   10452:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   10454:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   10456:	0749      	lsls	r1, r1, #29
   10458:	d5bd      	bpl.n	103d6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1045a:	8b53      	ldrh	r3, [r2, #26]
   1045c:	075b      	lsls	r3, r3, #29
   1045e:	d501      	bpl.n	10464 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10460:	2304      	movs	r3, #4
   10462:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10464:	7983      	ldrb	r3, [r0, #6]
   10466:	2b01      	cmp	r3, #1
   10468:	d002      	beq.n	10470 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1046a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1046c:	2300      	movs	r3, #0
   1046e:	e7b2      	b.n	103d6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10470:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10472:	2300      	movs	r3, #0
   10474:	e7af      	b.n	103d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   10476:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   10478:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1047a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1047c:	2900      	cmp	r1, #0
   1047e:	d104      	bne.n	1048a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   10480:	0953      	lsrs	r3, r2, #5
   10482:	01db      	lsls	r3, r3, #7
   10484:	490d      	ldr	r1, [pc, #52]	; (104bc <spi_select_slave+0xf0>)
   10486:	468c      	mov	ip, r1
   10488:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1048a:	211f      	movs	r1, #31
   1048c:	4011      	ands	r1, r2
   1048e:	2201      	movs	r2, #1
   10490:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   10492:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   10494:	2300      	movs	r3, #0
   10496:	e79e      	b.n	103d6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   10498:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1049a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1049c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1049e:	2900      	cmp	r1, #0
   104a0:	d104      	bne.n	104ac <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   104a2:	0953      	lsrs	r3, r2, #5
   104a4:	01db      	lsls	r3, r3, #7
   104a6:	4905      	ldr	r1, [pc, #20]	; (104bc <spi_select_slave+0xf0>)
   104a8:	468c      	mov	ip, r1
   104aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   104ac:	211f      	movs	r1, #31
   104ae:	4011      	ands	r1, r2
   104b0:	2201      	movs	r2, #1
   104b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   104b4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   104b6:	2300      	movs	r3, #0
   104b8:	e78d      	b.n	103d6 <spi_select_slave+0xa>
   104ba:	46c0      	nop			; (mov r8, r8)
   104bc:	41004400 	.word	0x41004400

000104c0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   104c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   104c2:	46de      	mov	lr, fp
   104c4:	4657      	mov	r7, sl
   104c6:	464e      	mov	r6, r9
   104c8:	4645      	mov	r5, r8
   104ca:	b5e0      	push	{r5, r6, r7, lr}
   104cc:	b083      	sub	sp, #12
   104ce:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   104d0:	2338      	movs	r3, #56	; 0x38
   104d2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   104d4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   104d6:	2c05      	cmp	r4, #5
   104d8:	d002      	beq.n	104e0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   104da:	3312      	adds	r3, #18
	if (length == 0) {
   104dc:	2a00      	cmp	r2, #0
   104de:	d14b      	bne.n	10578 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   104e0:	0018      	movs	r0, r3
   104e2:	b003      	add	sp, #12
   104e4:	bc3c      	pop	{r2, r3, r4, r5}
   104e6:	4690      	mov	r8, r2
   104e8:	4699      	mov	r9, r3
   104ea:	46a2      	mov	sl, r4
   104ec:	46ab      	mov	fp, r5
   104ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   104f0:	3702      	adds	r7, #2
   104f2:	b2bf      	uxth	r7, r7
   104f4:	4641      	mov	r1, r8
   104f6:	4653      	mov	r3, sl
   104f8:	5c59      	ldrb	r1, [r3, r1]
   104fa:	0209      	lsls	r1, r1, #8
   104fc:	465b      	mov	r3, fp
   104fe:	430b      	orrs	r3, r1
   10500:	e018      	b.n	10534 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10502:	7983      	ldrb	r3, [r0, #6]
   10504:	2b01      	cmp	r3, #1
   10506:	d02a      	beq.n	1055e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   10508:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1050a:	3e01      	subs	r6, #1
   1050c:	b2b6      	uxth	r6, r6
   1050e:	4566      	cmp	r6, ip
   10510:	d027      	beq.n	10562 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10512:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10514:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   10516:	4223      	tst	r3, r4
   10518:	d0fc      	beq.n	10514 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1051a:	1c7b      	adds	r3, r7, #1
   1051c:	b29b      	uxth	r3, r3
   1051e:	4698      	mov	r8, r3
   10520:	4653      	mov	r3, sl
   10522:	5ddb      	ldrb	r3, [r3, r7]
   10524:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10526:	7981      	ldrb	r1, [r0, #6]
   10528:	2901      	cmp	r1, #1
   1052a:	d0e1      	beq.n	104f0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1052c:	4669      	mov	r1, sp
   1052e:	80cb      	strh	r3, [r1, #6]
   10530:	88cb      	ldrh	r3, [r1, #6]
   10532:	4647      	mov	r7, r8
   10534:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   10536:	4221      	tst	r1, r4
   10538:	d002      	beq.n	10540 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1053a:	05db      	lsls	r3, r3, #23
   1053c:	0ddb      	lsrs	r3, r3, #23
   1053e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   10540:	79c3      	ldrb	r3, [r0, #7]
   10542:	2b00      	cmp	r3, #0
   10544:	d0e1      	beq.n	1050a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   10546:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10548:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1054a:	422b      	tst	r3, r5
   1054c:	d0fc      	beq.n	10548 <spi_write_buffer_wait+0x88>
   1054e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   10550:	422b      	tst	r3, r5
   10552:	d0da      	beq.n	1050a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10554:	8b53      	ldrh	r3, [r2, #26]
   10556:	422b      	tst	r3, r5
   10558:	d0d3      	beq.n	10502 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1055a:	8355      	strh	r5, [r2, #26]
   1055c:	e7d1      	b.n	10502 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1055e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10560:	e7d3      	b.n	1050a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   10562:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   10564:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   10566:	2a01      	cmp	r2, #1
   10568:	d1ba      	bne.n	104e0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1056a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1056c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1056e:	7e0b      	ldrb	r3, [r1, #24]
   10570:	4213      	tst	r3, r2
   10572:	d0fc      	beq.n	1056e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   10574:	2300      	movs	r3, #0
   10576:	e7b3      	b.n	104e0 <spi_write_buffer_wait+0x20>
	while (length--) {
   10578:	3a01      	subs	r2, #1
   1057a:	b296      	uxth	r6, r2
   1057c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1057e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   10580:	2504      	movs	r5, #4
	while (length--) {
   10582:	4b01      	ldr	r3, [pc, #4]	; (10588 <spi_write_buffer_wait+0xc8>)
   10584:	469c      	mov	ip, r3
   10586:	e7c4      	b.n	10512 <spi_write_buffer_wait+0x52>
   10588:	0000ffff 	.word	0x0000ffff

0001058c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1058e:	0080      	lsls	r0, r0, #2
   10590:	4b70      	ldr	r3, [pc, #448]	; (10754 <_spi_interrupt_handler+0x1c8>)
   10592:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10594:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   10596:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   10598:	5ce7      	ldrb	r7, [r4, r3]
   1059a:	2236      	movs	r2, #54	; 0x36
   1059c:	5ca2      	ldrb	r2, [r4, r2]
   1059e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   105a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   105a2:	7db5      	ldrb	r5, [r6, #22]
   105a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   105a6:	07eb      	lsls	r3, r5, #31
   105a8:	d502      	bpl.n	105b0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   105aa:	7963      	ldrb	r3, [r4, #5]
   105ac:	2b01      	cmp	r3, #1
   105ae:	d01e      	beq.n	105ee <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   105b0:	076b      	lsls	r3, r5, #29
   105b2:	d511      	bpl.n	105d8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   105b4:	8b73      	ldrh	r3, [r6, #26]
   105b6:	075b      	lsls	r3, r3, #29
   105b8:	d55a      	bpl.n	10670 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   105ba:	7a63      	ldrb	r3, [r4, #9]
   105bc:	2b01      	cmp	r3, #1
   105be:	d008      	beq.n	105d2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   105c0:	221e      	movs	r2, #30
   105c2:	2338      	movs	r3, #56	; 0x38
   105c4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   105c6:	3b35      	subs	r3, #53	; 0x35
   105c8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   105ca:	3302      	adds	r3, #2
   105cc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   105ce:	073b      	lsls	r3, r7, #28
   105d0:	d44a      	bmi.n	10668 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   105d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   105d4:	2304      	movs	r3, #4
   105d6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   105d8:	07ab      	lsls	r3, r5, #30
   105da:	d503      	bpl.n	105e4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   105dc:	7963      	ldrb	r3, [r4, #5]
   105de:	2b01      	cmp	r3, #1
   105e0:	d100      	bne.n	105e4 <_spi_interrupt_handler+0x58>
   105e2:	e097      	b.n	10714 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   105e4:	b26d      	sxtb	r5, r5
   105e6:	2d00      	cmp	r5, #0
   105e8:	da00      	bge.n	105ec <_spi_interrupt_handler+0x60>
   105ea:	e0a9      	b.n	10740 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   105ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   105ee:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   105f0:	2b00      	cmp	r3, #0
   105f2:	d022      	beq.n	1063a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   105f4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   105f6:	2b00      	cmp	r3, #0
   105f8:	d0da      	beq.n	105b0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   105fa:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   105fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   105fe:	7813      	ldrb	r3, [r2, #0]
   10600:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   10602:	1c50      	adds	r0, r2, #1
   10604:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10606:	79a0      	ldrb	r0, [r4, #6]
   10608:	2801      	cmp	r0, #1
   1060a:	d027      	beq.n	1065c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1060c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1060e:	05db      	lsls	r3, r3, #23
   10610:	0ddb      	lsrs	r3, r3, #23
   10612:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   10614:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10616:	3b01      	subs	r3, #1
   10618:	b29b      	uxth	r3, r3
   1061a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1061c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1061e:	b29b      	uxth	r3, r3
   10620:	2b00      	cmp	r3, #0
   10622:	d1c5      	bne.n	105b0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10624:	3301      	adds	r3, #1
   10626:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   10628:	7a63      	ldrb	r3, [r4, #9]
   1062a:	2b01      	cmp	r3, #1
   1062c:	d1c0      	bne.n	105b0 <_spi_interrupt_handler+0x24>
   1062e:	79e3      	ldrb	r3, [r4, #7]
   10630:	2b00      	cmp	r3, #0
   10632:	d1bd      	bne.n	105b0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10634:	3302      	adds	r3, #2
   10636:	75b3      	strb	r3, [r6, #22]
   10638:	e7ba      	b.n	105b0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1063a:	4b47      	ldr	r3, [pc, #284]	; (10758 <_spi_interrupt_handler+0x1cc>)
   1063c:	881b      	ldrh	r3, [r3, #0]
   1063e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10640:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10642:	3b01      	subs	r3, #1
   10644:	b29b      	uxth	r3, r3
   10646:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10648:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1064a:	b29b      	uxth	r3, r3
   1064c:	2b00      	cmp	r3, #0
   1064e:	d101      	bne.n	10654 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10650:	3301      	adds	r3, #1
   10652:	7533      	strb	r3, [r6, #20]
		if (0
   10654:	7963      	ldrb	r3, [r4, #5]
   10656:	2b01      	cmp	r3, #1
   10658:	d0cc      	beq.n	105f4 <_spi_interrupt_handler+0x68>
   1065a:	e7a9      	b.n	105b0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1065c:	7850      	ldrb	r0, [r2, #1]
   1065e:	0200      	lsls	r0, r0, #8
   10660:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   10662:	3202      	adds	r2, #2
   10664:	62e2      	str	r2, [r4, #44]	; 0x2c
   10666:	e7d2      	b.n	1060e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   10668:	0020      	movs	r0, r4
   1066a:	69a3      	ldr	r3, [r4, #24]
   1066c:	4798      	blx	r3
   1066e:	e7b0      	b.n	105d2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   10670:	7a63      	ldrb	r3, [r4, #9]
   10672:	2b01      	cmp	r3, #1
   10674:	d028      	beq.n	106c8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10676:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   10678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1067a:	05db      	lsls	r3, r3, #23
   1067c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1067e:	b2da      	uxtb	r2, r3
   10680:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10682:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   10684:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10686:	1c51      	adds	r1, r2, #1
   10688:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1068a:	79a1      	ldrb	r1, [r4, #6]
   1068c:	2901      	cmp	r1, #1
   1068e:	d034      	beq.n	106fa <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   10690:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10692:	3b01      	subs	r3, #1
   10694:	b29b      	uxth	r3, r3
   10696:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   10698:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1069a:	b29b      	uxth	r3, r3
   1069c:	2b00      	cmp	r3, #0
   1069e:	d000      	beq.n	106a2 <_spi_interrupt_handler+0x116>
   106a0:	e79a      	b.n	105d8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   106a2:	2200      	movs	r2, #0
   106a4:	3338      	adds	r3, #56	; 0x38
   106a6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   106a8:	3b34      	subs	r3, #52	; 0x34
   106aa:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   106ac:	7a63      	ldrb	r3, [r4, #9]
   106ae:	2b02      	cmp	r3, #2
   106b0:	d029      	beq.n	10706 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   106b2:	7a63      	ldrb	r3, [r4, #9]
   106b4:	2b00      	cmp	r3, #0
   106b6:	d000      	beq.n	106ba <_spi_interrupt_handler+0x12e>
   106b8:	e78e      	b.n	105d8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   106ba:	07bb      	lsls	r3, r7, #30
   106bc:	d400      	bmi.n	106c0 <_spi_interrupt_handler+0x134>
   106be:	e78b      	b.n	105d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   106c0:	0020      	movs	r0, r4
   106c2:	6923      	ldr	r3, [r4, #16]
   106c4:	4798      	blx	r3
   106c6:	e787      	b.n	105d8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   106c8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   106ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   106cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   106ce:	3b01      	subs	r3, #1
   106d0:	b29b      	uxth	r3, r3
   106d2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   106d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   106d6:	b29b      	uxth	r3, r3
   106d8:	2b00      	cmp	r3, #0
   106da:	d000      	beq.n	106de <_spi_interrupt_handler+0x152>
   106dc:	e77c      	b.n	105d8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   106de:	3304      	adds	r3, #4
   106e0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   106e2:	2200      	movs	r2, #0
   106e4:	3334      	adds	r3, #52	; 0x34
   106e6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   106e8:	3b35      	subs	r3, #53	; 0x35
   106ea:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   106ec:	07fb      	lsls	r3, r7, #31
   106ee:	d400      	bmi.n	106f2 <_spi_interrupt_handler+0x166>
   106f0:	e772      	b.n	105d8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   106f2:	0020      	movs	r0, r4
   106f4:	68e3      	ldr	r3, [r4, #12]
   106f6:	4798      	blx	r3
   106f8:	e76e      	b.n	105d8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   106fa:	0a1b      	lsrs	r3, r3, #8
   106fc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   106fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10700:	3301      	adds	r3, #1
   10702:	62a3      	str	r3, [r4, #40]	; 0x28
   10704:	e7c4      	b.n	10690 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   10706:	077b      	lsls	r3, r7, #29
   10708:	d400      	bmi.n	1070c <_spi_interrupt_handler+0x180>
   1070a:	e765      	b.n	105d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1070c:	0020      	movs	r0, r4
   1070e:	6963      	ldr	r3, [r4, #20]
   10710:	4798      	blx	r3
   10712:	e761      	b.n	105d8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10714:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10716:	2b01      	cmp	r3, #1
   10718:	d000      	beq.n	1071c <_spi_interrupt_handler+0x190>
   1071a:	e763      	b.n	105e4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1071c:	79e3      	ldrb	r3, [r4, #7]
   1071e:	2b00      	cmp	r3, #0
   10720:	d000      	beq.n	10724 <_spi_interrupt_handler+0x198>
   10722:	e75f      	b.n	105e4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   10724:	3302      	adds	r3, #2
   10726:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   10728:	3301      	adds	r3, #1
   1072a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1072c:	2200      	movs	r2, #0
   1072e:	3335      	adds	r3, #53	; 0x35
   10730:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10732:	07fb      	lsls	r3, r7, #31
   10734:	d400      	bmi.n	10738 <_spi_interrupt_handler+0x1ac>
   10736:	e755      	b.n	105e4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   10738:	0020      	movs	r0, r4
   1073a:	68e3      	ldr	r3, [r4, #12]
   1073c:	4798      	blx	r3
   1073e:	e751      	b.n	105e4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10740:	2380      	movs	r3, #128	; 0x80
   10742:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   10744:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   10746:	067b      	lsls	r3, r7, #25
   10748:	d400      	bmi.n	1074c <_spi_interrupt_handler+0x1c0>
   1074a:	e74f      	b.n	105ec <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1074c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1074e:	0020      	movs	r0, r4
   10750:	4798      	blx	r3
}
   10752:	e74b      	b.n	105ec <_spi_interrupt_handler+0x60>
   10754:	200014b0 	.word	0x200014b0
   10758:	200014c8 	.word	0x200014c8

0001075c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1075c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1075e:	46de      	mov	lr, fp
   10760:	4657      	mov	r7, sl
   10762:	464e      	mov	r6, r9
   10764:	4645      	mov	r5, r8
   10766:	b5e0      	push	{r5, r6, r7, lr}
   10768:	b091      	sub	sp, #68	; 0x44
   1076a:	0005      	movs	r5, r0
   1076c:	000c      	movs	r4, r1
   1076e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   10770:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10772:	0008      	movs	r0, r1
   10774:	4bbc      	ldr	r3, [pc, #752]	; (10a68 <usart_init+0x30c>)
   10776:	4798      	blx	r3
   10778:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1077a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1077c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1077e:	07db      	lsls	r3, r3, #31
   10780:	d506      	bpl.n	10790 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   10782:	b011      	add	sp, #68	; 0x44
   10784:	bc3c      	pop	{r2, r3, r4, r5}
   10786:	4690      	mov	r8, r2
   10788:	4699      	mov	r9, r3
   1078a:	46a2      	mov	sl, r4
   1078c:	46ab      	mov	fp, r5
   1078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10790:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   10792:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10794:	079b      	lsls	r3, r3, #30
   10796:	d4f4      	bmi.n	10782 <usart_init+0x26>
   10798:	49b4      	ldr	r1, [pc, #720]	; (10a6c <usart_init+0x310>)
   1079a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1079c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1079e:	2301      	movs	r3, #1
   107a0:	40bb      	lsls	r3, r7
   107a2:	4303      	orrs	r3, r0
   107a4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   107a6:	a90f      	add	r1, sp, #60	; 0x3c
   107a8:	272d      	movs	r7, #45	; 0x2d
   107aa:	5df3      	ldrb	r3, [r6, r7]
   107ac:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   107ae:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   107b0:	b2d3      	uxtb	r3, r2
   107b2:	9302      	str	r3, [sp, #8]
   107b4:	0018      	movs	r0, r3
   107b6:	4bae      	ldr	r3, [pc, #696]	; (10a70 <usart_init+0x314>)
   107b8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   107ba:	9802      	ldr	r0, [sp, #8]
   107bc:	4bad      	ldr	r3, [pc, #692]	; (10a74 <usart_init+0x318>)
   107be:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   107c0:	5df0      	ldrb	r0, [r6, r7]
   107c2:	2100      	movs	r1, #0
   107c4:	4bac      	ldr	r3, [pc, #688]	; (10a78 <usart_init+0x31c>)
   107c6:	4798      	blx	r3
	module->character_size = config->character_size;
   107c8:	7af3      	ldrb	r3, [r6, #11]
   107ca:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   107cc:	2324      	movs	r3, #36	; 0x24
   107ce:	5cf3      	ldrb	r3, [r6, r3]
   107d0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   107d2:	2325      	movs	r3, #37	; 0x25
   107d4:	5cf3      	ldrb	r3, [r6, r3]
   107d6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   107d8:	7ef3      	ldrb	r3, [r6, #27]
   107da:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   107dc:	7f33      	ldrb	r3, [r6, #28]
   107de:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   107e0:	682b      	ldr	r3, [r5, #0]
   107e2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   107e4:	0018      	movs	r0, r3
   107e6:	4ba0      	ldr	r3, [pc, #640]	; (10a68 <usart_init+0x30c>)
   107e8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   107ea:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   107ec:	2200      	movs	r2, #0
   107ee:	230e      	movs	r3, #14
   107f0:	a906      	add	r1, sp, #24
   107f2:	468c      	mov	ip, r1
   107f4:	4463      	add	r3, ip
   107f6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   107f8:	8a32      	ldrh	r2, [r6, #16]
   107fa:	9202      	str	r2, [sp, #8]
   107fc:	2380      	movs	r3, #128	; 0x80
   107fe:	01db      	lsls	r3, r3, #7
   10800:	429a      	cmp	r2, r3
   10802:	d100      	bne.n	10806 <usart_init+0xaa>
   10804:	e09e      	b.n	10944 <usart_init+0x1e8>
   10806:	d90f      	bls.n	10828 <usart_init+0xcc>
   10808:	23c0      	movs	r3, #192	; 0xc0
   1080a:	01db      	lsls	r3, r3, #7
   1080c:	9a02      	ldr	r2, [sp, #8]
   1080e:	429a      	cmp	r2, r3
   10810:	d100      	bne.n	10814 <usart_init+0xb8>
   10812:	e092      	b.n	1093a <usart_init+0x1de>
   10814:	2380      	movs	r3, #128	; 0x80
   10816:	021b      	lsls	r3, r3, #8
   10818:	429a      	cmp	r2, r3
   1081a:	d000      	beq.n	1081e <usart_init+0xc2>
   1081c:	e11f      	b.n	10a5e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1081e:	2303      	movs	r3, #3
   10820:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10822:	2300      	movs	r3, #0
   10824:	9307      	str	r3, [sp, #28]
   10826:	e008      	b.n	1083a <usart_init+0xde>
	switch (config->sample_rate) {
   10828:	2380      	movs	r3, #128	; 0x80
   1082a:	019b      	lsls	r3, r3, #6
   1082c:	429a      	cmp	r2, r3
   1082e:	d000      	beq.n	10832 <usart_init+0xd6>
   10830:	e115      	b.n	10a5e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10832:	2310      	movs	r3, #16
   10834:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   10836:	3b0f      	subs	r3, #15
   10838:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1083a:	6833      	ldr	r3, [r6, #0]
   1083c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1083e:	68f3      	ldr	r3, [r6, #12]
   10840:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   10842:	6973      	ldr	r3, [r6, #20]
   10844:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10846:	7e33      	ldrb	r3, [r6, #24]
   10848:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1084a:	2326      	movs	r3, #38	; 0x26
   1084c:	5cf3      	ldrb	r3, [r6, r3]
   1084e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   10850:	6873      	ldr	r3, [r6, #4]
   10852:	4699      	mov	r9, r3
	switch (transfer_mode)
   10854:	2b00      	cmp	r3, #0
   10856:	d100      	bne.n	1085a <usart_init+0xfe>
   10858:	e0a0      	b.n	1099c <usart_init+0x240>
   1085a:	2380      	movs	r3, #128	; 0x80
   1085c:	055b      	lsls	r3, r3, #21
   1085e:	4599      	cmp	r9, r3
   10860:	d100      	bne.n	10864 <usart_init+0x108>
   10862:	e084      	b.n	1096e <usart_init+0x212>
	if(config->encoding_format_enable) {
   10864:	7e73      	ldrb	r3, [r6, #25]
   10866:	2b00      	cmp	r3, #0
   10868:	d002      	beq.n	10870 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1086a:	7eb3      	ldrb	r3, [r6, #26]
   1086c:	4642      	mov	r2, r8
   1086e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10870:	682a      	ldr	r2, [r5, #0]
   10872:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   10874:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10876:	2b00      	cmp	r3, #0
   10878:	d1fc      	bne.n	10874 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1087a:	330e      	adds	r3, #14
   1087c:	aa06      	add	r2, sp, #24
   1087e:	4694      	mov	ip, r2
   10880:	4463      	add	r3, ip
   10882:	881b      	ldrh	r3, [r3, #0]
   10884:	4642      	mov	r2, r8
   10886:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   10888:	9b05      	ldr	r3, [sp, #20]
   1088a:	9a03      	ldr	r2, [sp, #12]
   1088c:	4313      	orrs	r3, r2
   1088e:	9a04      	ldr	r2, [sp, #16]
   10890:	4313      	orrs	r3, r2
   10892:	464a      	mov	r2, r9
   10894:	4313      	orrs	r3, r2
   10896:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10898:	465b      	mov	r3, fp
   1089a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1089c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1089e:	4653      	mov	r3, sl
   108a0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   108a2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   108a4:	2327      	movs	r3, #39	; 0x27
   108a6:	5cf3      	ldrb	r3, [r6, r3]
   108a8:	2b00      	cmp	r3, #0
   108aa:	d101      	bne.n	108b0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   108ac:	3304      	adds	r3, #4
   108ae:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   108b0:	7e73      	ldrb	r3, [r6, #25]
   108b2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   108b4:	7f32      	ldrb	r2, [r6, #28]
   108b6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   108b8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   108ba:	7f72      	ldrb	r2, [r6, #29]
   108bc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   108be:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   108c0:	2224      	movs	r2, #36	; 0x24
   108c2:	5cb2      	ldrb	r2, [r6, r2]
   108c4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   108c6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   108c8:	2225      	movs	r2, #37	; 0x25
   108ca:	5cb2      	ldrb	r2, [r6, r2]
   108cc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   108ce:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   108d0:	7ab1      	ldrb	r1, [r6, #10]
   108d2:	7af2      	ldrb	r2, [r6, #11]
   108d4:	4311      	orrs	r1, r2
   108d6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   108d8:	8933      	ldrh	r3, [r6, #8]
   108da:	2bff      	cmp	r3, #255	; 0xff
   108dc:	d100      	bne.n	108e0 <usart_init+0x184>
   108de:	e081      	b.n	109e4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   108e0:	2280      	movs	r2, #128	; 0x80
   108e2:	0452      	lsls	r2, r2, #17
   108e4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   108e6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   108e8:	232c      	movs	r3, #44	; 0x2c
   108ea:	5cf3      	ldrb	r3, [r6, r3]
   108ec:	2b00      	cmp	r3, #0
   108ee:	d103      	bne.n	108f8 <usart_init+0x19c>
   108f0:	4b62      	ldr	r3, [pc, #392]	; (10a7c <usart_init+0x320>)
   108f2:	789b      	ldrb	r3, [r3, #2]
   108f4:	079b      	lsls	r3, r3, #30
   108f6:	d501      	bpl.n	108fc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   108f8:	2380      	movs	r3, #128	; 0x80
   108fa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   108fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   108fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10900:	2b00      	cmp	r3, #0
   10902:	d1fc      	bne.n	108fe <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   10904:	4643      	mov	r3, r8
   10906:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10908:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1090a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1090c:	2b00      	cmp	r3, #0
   1090e:	d1fc      	bne.n	1090a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   10910:	4643      	mov	r3, r8
   10912:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10914:	ab0e      	add	r3, sp, #56	; 0x38
   10916:	2280      	movs	r2, #128	; 0x80
   10918:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1091a:	2200      	movs	r2, #0
   1091c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1091e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10920:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   10922:	6b33      	ldr	r3, [r6, #48]	; 0x30
   10924:	930a      	str	r3, [sp, #40]	; 0x28
   10926:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10928:	930b      	str	r3, [sp, #44]	; 0x2c
   1092a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1092c:	930c      	str	r3, [sp, #48]	; 0x30
   1092e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10930:	9302      	str	r3, [sp, #8]
   10932:	930d      	str	r3, [sp, #52]	; 0x34
   10934:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10936:	ae0a      	add	r6, sp, #40	; 0x28
   10938:	e063      	b.n	10a02 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1093a:	2308      	movs	r3, #8
   1093c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1093e:	3b07      	subs	r3, #7
   10940:	9307      	str	r3, [sp, #28]
   10942:	e77a      	b.n	1083a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   10944:	6833      	ldr	r3, [r6, #0]
   10946:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   10948:	68f3      	ldr	r3, [r6, #12]
   1094a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1094c:	6973      	ldr	r3, [r6, #20]
   1094e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   10950:	7e33      	ldrb	r3, [r6, #24]
   10952:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   10954:	2326      	movs	r3, #38	; 0x26
   10956:	5cf3      	ldrb	r3, [r6, r3]
   10958:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1095a:	6873      	ldr	r3, [r6, #4]
   1095c:	4699      	mov	r9, r3
	switch (transfer_mode)
   1095e:	2b00      	cmp	r3, #0
   10960:	d018      	beq.n	10994 <usart_init+0x238>
   10962:	2380      	movs	r3, #128	; 0x80
   10964:	055b      	lsls	r3, r3, #21
   10966:	4599      	cmp	r9, r3
   10968:	d001      	beq.n	1096e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1096a:	2000      	movs	r0, #0
   1096c:	e025      	b.n	109ba <usart_init+0x25e>
			if (!config->use_external_clock) {
   1096e:	2327      	movs	r3, #39	; 0x27
   10970:	5cf3      	ldrb	r3, [r6, r3]
   10972:	2b00      	cmp	r3, #0
   10974:	d000      	beq.n	10978 <usart_init+0x21c>
   10976:	e775      	b.n	10864 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10978:	6a33      	ldr	r3, [r6, #32]
   1097a:	001f      	movs	r7, r3
   1097c:	b2c0      	uxtb	r0, r0
   1097e:	4b40      	ldr	r3, [pc, #256]	; (10a80 <usart_init+0x324>)
   10980:	4798      	blx	r3
   10982:	0001      	movs	r1, r0
   10984:	220e      	movs	r2, #14
   10986:	ab06      	add	r3, sp, #24
   10988:	469c      	mov	ip, r3
   1098a:	4462      	add	r2, ip
   1098c:	0038      	movs	r0, r7
   1098e:	4b3d      	ldr	r3, [pc, #244]	; (10a84 <usart_init+0x328>)
   10990:	4798      	blx	r3
   10992:	e012      	b.n	109ba <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10994:	2308      	movs	r3, #8
   10996:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10998:	2300      	movs	r3, #0
   1099a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1099c:	2327      	movs	r3, #39	; 0x27
   1099e:	5cf3      	ldrb	r3, [r6, r3]
   109a0:	2b00      	cmp	r3, #0
   109a2:	d00e      	beq.n	109c2 <usart_init+0x266>
				status_code =
   109a4:	9b06      	ldr	r3, [sp, #24]
   109a6:	9300      	str	r3, [sp, #0]
   109a8:	9b07      	ldr	r3, [sp, #28]
   109aa:	220e      	movs	r2, #14
   109ac:	a906      	add	r1, sp, #24
   109ae:	468c      	mov	ip, r1
   109b0:	4462      	add	r2, ip
   109b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   109b4:	6a30      	ldr	r0, [r6, #32]
   109b6:	4f34      	ldr	r7, [pc, #208]	; (10a88 <usart_init+0x32c>)
   109b8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   109ba:	2800      	cmp	r0, #0
   109bc:	d000      	beq.n	109c0 <usart_init+0x264>
   109be:	e6e0      	b.n	10782 <usart_init+0x26>
   109c0:	e750      	b.n	10864 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   109c2:	6a33      	ldr	r3, [r6, #32]
   109c4:	001f      	movs	r7, r3
   109c6:	b2c0      	uxtb	r0, r0
   109c8:	4b2d      	ldr	r3, [pc, #180]	; (10a80 <usart_init+0x324>)
   109ca:	4798      	blx	r3
   109cc:	0001      	movs	r1, r0
				status_code =
   109ce:	9b06      	ldr	r3, [sp, #24]
   109d0:	9300      	str	r3, [sp, #0]
   109d2:	9b07      	ldr	r3, [sp, #28]
   109d4:	220e      	movs	r2, #14
   109d6:	a806      	add	r0, sp, #24
   109d8:	4684      	mov	ip, r0
   109da:	4462      	add	r2, ip
   109dc:	0038      	movs	r0, r7
   109de:	4f2a      	ldr	r7, [pc, #168]	; (10a88 <usart_init+0x32c>)
   109e0:	47b8      	blx	r7
   109e2:	e7ea      	b.n	109ba <usart_init+0x25e>
		if(config->lin_slave_enable) {
   109e4:	7ef3      	ldrb	r3, [r6, #27]
   109e6:	2b00      	cmp	r3, #0
   109e8:	d100      	bne.n	109ec <usart_init+0x290>
   109ea:	e77d      	b.n	108e8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   109ec:	2380      	movs	r3, #128	; 0x80
   109ee:	04db      	lsls	r3, r3, #19
   109f0:	431f      	orrs	r7, r3
   109f2:	e779      	b.n	108e8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   109f4:	0020      	movs	r0, r4
   109f6:	4b25      	ldr	r3, [pc, #148]	; (10a8c <usart_init+0x330>)
   109f8:	4798      	blx	r3
   109fa:	e007      	b.n	10a0c <usart_init+0x2b0>
   109fc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   109fe:	2f04      	cmp	r7, #4
   10a00:	d00d      	beq.n	10a1e <usart_init+0x2c2>
   10a02:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10a04:	00bb      	lsls	r3, r7, #2
   10a06:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   10a08:	2800      	cmp	r0, #0
   10a0a:	d0f3      	beq.n	109f4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   10a0c:	1c43      	adds	r3, r0, #1
   10a0e:	d0f5      	beq.n	109fc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10a10:	a90e      	add	r1, sp, #56	; 0x38
   10a12:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10a14:	0c00      	lsrs	r0, r0, #16
   10a16:	b2c0      	uxtb	r0, r0
   10a18:	4b1d      	ldr	r3, [pc, #116]	; (10a90 <usart_init+0x334>)
   10a1a:	4798      	blx	r3
   10a1c:	e7ee      	b.n	109fc <usart_init+0x2a0>
		module->callback[i]            = NULL;
   10a1e:	2300      	movs	r3, #0
   10a20:	60eb      	str	r3, [r5, #12]
   10a22:	612b      	str	r3, [r5, #16]
   10a24:	616b      	str	r3, [r5, #20]
   10a26:	61ab      	str	r3, [r5, #24]
   10a28:	61eb      	str	r3, [r5, #28]
   10a2a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   10a2c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10a2e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10a30:	2200      	movs	r2, #0
   10a32:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10a34:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10a36:	3330      	adds	r3, #48	; 0x30
   10a38:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   10a3a:	3301      	adds	r3, #1
   10a3c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   10a3e:	3301      	adds	r3, #1
   10a40:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   10a42:	3301      	adds	r3, #1
   10a44:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10a46:	6828      	ldr	r0, [r5, #0]
   10a48:	4b07      	ldr	r3, [pc, #28]	; (10a68 <usart_init+0x30c>)
   10a4a:	4798      	blx	r3
   10a4c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10a4e:	4911      	ldr	r1, [pc, #68]	; (10a94 <usart_init+0x338>)
   10a50:	4b11      	ldr	r3, [pc, #68]	; (10a98 <usart_init+0x33c>)
   10a52:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10a54:	00a4      	lsls	r4, r4, #2
   10a56:	4b11      	ldr	r3, [pc, #68]	; (10a9c <usart_init+0x340>)
   10a58:	50e5      	str	r5, [r4, r3]
	return status_code;
   10a5a:	2000      	movs	r0, #0
   10a5c:	e691      	b.n	10782 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10a5e:	2310      	movs	r3, #16
   10a60:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10a62:	2300      	movs	r3, #0
   10a64:	9307      	str	r3, [sp, #28]
   10a66:	e6e8      	b.n	1083a <usart_init+0xde>
   10a68:	0000ff61 	.word	0x0000ff61
   10a6c:	40000400 	.word	0x40000400
   10a70:	00011419 	.word	0x00011419
   10a74:	0001138d 	.word	0x0001138d
   10a78:	0000fd9d 	.word	0x0000fd9d
   10a7c:	41002000 	.word	0x41002000
   10a80:	00011435 	.word	0x00011435
   10a84:	0000fcdf 	.word	0x0000fcdf
   10a88:	0000fd09 	.word	0x0000fd09
   10a8c:	0000fde9 	.word	0x0000fde9
   10a90:	00011511 	.word	0x00011511
   10a94:	00010c3d 	.word	0x00010c3d
   10a98:	0000ff9d 	.word	0x0000ff9d
   10a9c:	200014b0 	.word	0x200014b0

00010aa0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10aa0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10aa2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10aa4:	2a00      	cmp	r2, #0
   10aa6:	d101      	bne.n	10aac <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10aa8:	0018      	movs	r0, r3
   10aaa:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   10aac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   10aae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10ab0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10ab2:	2a00      	cmp	r2, #0
   10ab4:	d1f8      	bne.n	10aa8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10ab6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10ab8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   10aba:	2a00      	cmp	r2, #0
   10abc:	d1fc      	bne.n	10ab8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   10abe:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10ac0:	2102      	movs	r1, #2
   10ac2:	7e1a      	ldrb	r2, [r3, #24]
   10ac4:	420a      	tst	r2, r1
   10ac6:	d0fc      	beq.n	10ac2 <usart_write_wait+0x22>
	return STATUS_OK;
   10ac8:	2300      	movs	r3, #0
   10aca:	e7ed      	b.n	10aa8 <usart_write_wait+0x8>

00010acc <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   10acc:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   10ace:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   10ad0:	2a00      	cmp	r2, #0
   10ad2:	d101      	bne.n	10ad8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   10ad4:	0018      	movs	r0, r3
   10ad6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   10ad8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10ada:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10adc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   10ade:	2a00      	cmp	r2, #0
   10ae0:	d1f8      	bne.n	10ad4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10ae2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   10ae4:	7e10      	ldrb	r0, [r2, #24]
   10ae6:	0740      	lsls	r0, r0, #29
   10ae8:	d5f4      	bpl.n	10ad4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   10aea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10aec:	2b00      	cmp	r3, #0
   10aee:	d1fc      	bne.n	10aea <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10af0:	8b53      	ldrh	r3, [r2, #26]
   10af2:	b2db      	uxtb	r3, r3
	if (error_code) {
   10af4:	0698      	lsls	r0, r3, #26
   10af6:	d01d      	beq.n	10b34 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   10af8:	0798      	lsls	r0, r3, #30
   10afa:	d503      	bpl.n	10b04 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10afc:	2302      	movs	r3, #2
   10afe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   10b00:	3318      	adds	r3, #24
   10b02:	e7e7      	b.n	10ad4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10b04:	0758      	lsls	r0, r3, #29
   10b06:	d503      	bpl.n	10b10 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10b08:	2304      	movs	r3, #4
   10b0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   10b0c:	331a      	adds	r3, #26
   10b0e:	e7e1      	b.n	10ad4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10b10:	07d8      	lsls	r0, r3, #31
   10b12:	d503      	bpl.n	10b1c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10b14:	2301      	movs	r3, #1
   10b16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   10b18:	3312      	adds	r3, #18
   10b1a:	e7db      	b.n	10ad4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   10b1c:	06d8      	lsls	r0, r3, #27
   10b1e:	d503      	bpl.n	10b28 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10b20:	2310      	movs	r3, #16
   10b22:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   10b24:	3332      	adds	r3, #50	; 0x32
   10b26:	e7d5      	b.n	10ad4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   10b28:	069b      	lsls	r3, r3, #26
   10b2a:	d503      	bpl.n	10b34 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10b2c:	2320      	movs	r3, #32
   10b2e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   10b30:	3321      	adds	r3, #33	; 0x21
   10b32:	e7cf      	b.n	10ad4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   10b34:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   10b36:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   10b38:	2300      	movs	r3, #0
   10b3a:	e7cb      	b.n	10ad4 <usart_read_wait+0x8>

00010b3c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b3e:	0006      	movs	r6, r0
   10b40:	000c      	movs	r4, r1
   10b42:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10b44:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10b46:	4b0a      	ldr	r3, [pc, #40]	; (10b70 <_usart_write_buffer+0x34>)
   10b48:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   10b4a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   10b4c:	b29b      	uxth	r3, r3
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d003      	beq.n	10b5a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   10b52:	4b08      	ldr	r3, [pc, #32]	; (10b74 <_usart_write_buffer+0x38>)
   10b54:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10b56:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   10b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   10b5a:	85f5      	strh	r5, [r6, #46]	; 0x2e
   10b5c:	4b05      	ldr	r3, [pc, #20]	; (10b74 <_usart_write_buffer+0x38>)
   10b5e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   10b60:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   10b62:	2205      	movs	r2, #5
   10b64:	2333      	movs	r3, #51	; 0x33
   10b66:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   10b68:	3b32      	subs	r3, #50	; 0x32
   10b6a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   10b6c:	2000      	movs	r0, #0
   10b6e:	e7f3      	b.n	10b58 <_usart_write_buffer+0x1c>
   10b70:	0000f74d 	.word	0x0000f74d
   10b74:	0000f78d 	.word	0x0000f78d

00010b78 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b7a:	0004      	movs	r4, r0
   10b7c:	000d      	movs	r5, r1
   10b7e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10b80:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   10b82:	4b0f      	ldr	r3, [pc, #60]	; (10bc0 <_usart_read_buffer+0x48>)
   10b84:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   10b86:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10b88:	b29b      	uxth	r3, r3
   10b8a:	2b00      	cmp	r3, #0
   10b8c:	d003      	beq.n	10b96 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   10b8e:	4b0d      	ldr	r3, [pc, #52]	; (10bc4 <_usart_read_buffer+0x4c>)
   10b90:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   10b92:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   10b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   10b96:	85a6      	strh	r6, [r4, #44]	; 0x2c
   10b98:	4b0a      	ldr	r3, [pc, #40]	; (10bc4 <_usart_read_buffer+0x4c>)
   10b9a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   10b9c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   10b9e:	2205      	movs	r2, #5
   10ba0:	2332      	movs	r3, #50	; 0x32
   10ba2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   10ba4:	3b2e      	subs	r3, #46	; 0x2e
   10ba6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   10ba8:	7a23      	ldrb	r3, [r4, #8]
   10baa:	2b00      	cmp	r3, #0
   10bac:	d001      	beq.n	10bb2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   10bae:	2320      	movs	r3, #32
   10bb0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   10bb2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   10bb4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d0ec      	beq.n	10b94 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   10bba:	2308      	movs	r3, #8
   10bbc:	75bb      	strb	r3, [r7, #22]
   10bbe:	e7e9      	b.n	10b94 <_usart_read_buffer+0x1c>
   10bc0:	0000f74d 	.word	0x0000f74d
   10bc4:	0000f78d 	.word	0x0000f78d

00010bc8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   10bc8:	1c93      	adds	r3, r2, #2
   10bca:	009b      	lsls	r3, r3, #2
   10bcc:	18c3      	adds	r3, r0, r3
   10bce:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   10bd0:	2130      	movs	r1, #48	; 0x30
   10bd2:	2301      	movs	r3, #1
   10bd4:	4093      	lsls	r3, r2
   10bd6:	001a      	movs	r2, r3
   10bd8:	5c43      	ldrb	r3, [r0, r1]
   10bda:	4313      	orrs	r3, r2
   10bdc:	5443      	strb	r3, [r0, r1]
}
   10bde:	4770      	bx	lr

00010be0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   10be0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10be2:	2317      	movs	r3, #23
	if (length == 0) {
   10be4:	2a00      	cmp	r2, #0
   10be6:	d101      	bne.n	10bec <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   10be8:	0018      	movs	r0, r3
   10bea:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   10bec:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   10bee:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   10bf0:	2c00      	cmp	r4, #0
   10bf2:	d0f9      	beq.n	10be8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   10bf4:	4b01      	ldr	r3, [pc, #4]	; (10bfc <usart_write_buffer_job+0x1c>)
   10bf6:	4798      	blx	r3
   10bf8:	0003      	movs	r3, r0
   10bfa:	e7f5      	b.n	10be8 <usart_write_buffer_job+0x8>
   10bfc:	00010b3d 	.word	0x00010b3d

00010c00 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   10c00:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   10c02:	2317      	movs	r3, #23
	if (length == 0) {
   10c04:	2a00      	cmp	r2, #0
   10c06:	d101      	bne.n	10c0c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   10c08:	0018      	movs	r0, r3
   10c0a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   10c0c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   10c0e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   10c10:	2c00      	cmp	r4, #0
   10c12:	d0f9      	beq.n	10c08 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   10c14:	4b01      	ldr	r3, [pc, #4]	; (10c1c <usart_read_buffer_job+0x1c>)
   10c16:	4798      	blx	r3
   10c18:	0003      	movs	r3, r0
   10c1a:	e7f5      	b.n	10c08 <usart_read_buffer_job+0x8>
   10c1c:	00010b79 	.word	0x00010b79

00010c20 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   10c20:	2900      	cmp	r1, #0
   10c22:	d003      	beq.n	10c2c <usart_get_job_status+0xc>
   10c24:	2901      	cmp	r1, #1
   10c26:	d005      	beq.n	10c34 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   10c28:	2017      	movs	r0, #23
   10c2a:	e002      	b.n	10c32 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   10c2c:	2332      	movs	r3, #50	; 0x32
   10c2e:	5cc0      	ldrb	r0, [r0, r3]
   10c30:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   10c32:	4770      	bx	lr
			status_code = module->tx_status;
   10c34:	2333      	movs	r3, #51	; 0x33
   10c36:	5cc0      	ldrb	r0, [r0, r3]
   10c38:	b2c0      	uxtb	r0, r0
			break;
   10c3a:	e7fa      	b.n	10c32 <usart_get_job_status+0x12>

00010c3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   10c3e:	0080      	lsls	r0, r0, #2
   10c40:	4b62      	ldr	r3, [pc, #392]	; (10dcc <_usart_interrupt_handler+0x190>)
   10c42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10c44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   10c46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d1fc      	bne.n	10c46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10c4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   10c4e:	7da6      	ldrb	r6, [r4, #22]
   10c50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   10c52:	2330      	movs	r3, #48	; 0x30
   10c54:	5ceb      	ldrb	r3, [r5, r3]
   10c56:	2231      	movs	r2, #49	; 0x31
   10c58:	5caf      	ldrb	r7, [r5, r2]
   10c5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10c5c:	07f3      	lsls	r3, r6, #31
   10c5e:	d522      	bpl.n	10ca6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   10c60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10c62:	b29b      	uxth	r3, r3
   10c64:	2b00      	cmp	r3, #0
   10c66:	d01c      	beq.n	10ca2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10c68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   10c6a:	7813      	ldrb	r3, [r2, #0]
   10c6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10c6e:	1c51      	adds	r1, r2, #1
   10c70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10c72:	7969      	ldrb	r1, [r5, #5]
   10c74:	2901      	cmp	r1, #1
   10c76:	d00e      	beq.n	10c96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10c78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10c7a:	05db      	lsls	r3, r3, #23
   10c7c:	0ddb      	lsrs	r3, r3, #23
   10c7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10c80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10c82:	3b01      	subs	r3, #1
   10c84:	b29b      	uxth	r3, r3
   10c86:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10c88:	2b00      	cmp	r3, #0
   10c8a:	d10c      	bne.n	10ca6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10c8c:	3301      	adds	r3, #1
   10c8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10c90:	3301      	adds	r3, #1
   10c92:	75a3      	strb	r3, [r4, #22]
   10c94:	e007      	b.n	10ca6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10c96:	7851      	ldrb	r1, [r2, #1]
   10c98:	0209      	lsls	r1, r1, #8
   10c9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   10c9c:	3202      	adds	r2, #2
   10c9e:	62aa      	str	r2, [r5, #40]	; 0x28
   10ca0:	e7eb      	b.n	10c7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10ca2:	2301      	movs	r3, #1
   10ca4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10ca6:	07b3      	lsls	r3, r6, #30
   10ca8:	d506      	bpl.n	10cb8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10caa:	2302      	movs	r3, #2
   10cac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   10cae:	2200      	movs	r2, #0
   10cb0:	3331      	adds	r3, #49	; 0x31
   10cb2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10cb4:	07fb      	lsls	r3, r7, #31
   10cb6:	d41a      	bmi.n	10cee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10cb8:	0773      	lsls	r3, r6, #29
   10cba:	d565      	bpl.n	10d88 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   10cbc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10cbe:	b29b      	uxth	r3, r3
   10cc0:	2b00      	cmp	r3, #0
   10cc2:	d05f      	beq.n	10d84 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10cc4:	8b63      	ldrh	r3, [r4, #26]
   10cc6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10cc8:	071a      	lsls	r2, r3, #28
   10cca:	d414      	bmi.n	10cf6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10ccc:	223f      	movs	r2, #63	; 0x3f
   10cce:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d034      	beq.n	10d3e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10cd4:	079a      	lsls	r2, r3, #30
   10cd6:	d511      	bpl.n	10cfc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10cd8:	221a      	movs	r2, #26
   10cda:	2332      	movs	r3, #50	; 0x32
   10cdc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10cde:	3b30      	subs	r3, #48	; 0x30
   10ce0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   10ce2:	077b      	lsls	r3, r7, #29
   10ce4:	d550      	bpl.n	10d88 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10ce6:	0028      	movs	r0, r5
   10ce8:	696b      	ldr	r3, [r5, #20]
   10cea:	4798      	blx	r3
   10cec:	e04c      	b.n	10d88 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10cee:	0028      	movs	r0, r5
   10cf0:	68eb      	ldr	r3, [r5, #12]
   10cf2:	4798      	blx	r3
   10cf4:	e7e0      	b.n	10cb8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10cf6:	2237      	movs	r2, #55	; 0x37
   10cf8:	4013      	ands	r3, r2
   10cfa:	e7e9      	b.n	10cd0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10cfc:	075a      	lsls	r2, r3, #29
   10cfe:	d505      	bpl.n	10d0c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   10d00:	221e      	movs	r2, #30
   10d02:	2332      	movs	r3, #50	; 0x32
   10d04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10d06:	3b2e      	subs	r3, #46	; 0x2e
   10d08:	8363      	strh	r3, [r4, #26]
   10d0a:	e7ea      	b.n	10ce2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10d0c:	07da      	lsls	r2, r3, #31
   10d0e:	d505      	bpl.n	10d1c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   10d10:	2213      	movs	r2, #19
   10d12:	2332      	movs	r3, #50	; 0x32
   10d14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10d16:	3b31      	subs	r3, #49	; 0x31
   10d18:	8363      	strh	r3, [r4, #26]
   10d1a:	e7e2      	b.n	10ce2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10d1c:	06da      	lsls	r2, r3, #27
   10d1e:	d505      	bpl.n	10d2c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   10d20:	2242      	movs	r2, #66	; 0x42
   10d22:	2332      	movs	r3, #50	; 0x32
   10d24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10d26:	3b22      	subs	r3, #34	; 0x22
   10d28:	8363      	strh	r3, [r4, #26]
   10d2a:	e7da      	b.n	10ce2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10d2c:	2220      	movs	r2, #32
   10d2e:	421a      	tst	r2, r3
   10d30:	d0d7      	beq.n	10ce2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   10d32:	3221      	adds	r2, #33	; 0x21
   10d34:	2332      	movs	r3, #50	; 0x32
   10d36:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10d38:	3b12      	subs	r3, #18
   10d3a:	8363      	strh	r3, [r4, #26]
   10d3c:	e7d1      	b.n	10ce2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   10d3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10d40:	05db      	lsls	r3, r3, #23
   10d42:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   10d44:	b2da      	uxtb	r2, r3
   10d46:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10d48:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   10d4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10d4c:	1c51      	adds	r1, r2, #1
   10d4e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10d50:	7969      	ldrb	r1, [r5, #5]
   10d52:	2901      	cmp	r1, #1
   10d54:	d010      	beq.n	10d78 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   10d56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10d58:	3b01      	subs	r3, #1
   10d5a:	b29b      	uxth	r3, r3
   10d5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
   10d5e:	2b00      	cmp	r3, #0
   10d60:	d112      	bne.n	10d88 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10d62:	3304      	adds	r3, #4
   10d64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   10d66:	2200      	movs	r2, #0
   10d68:	332e      	adds	r3, #46	; 0x2e
   10d6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   10d6c:	07bb      	lsls	r3, r7, #30
   10d6e:	d50b      	bpl.n	10d88 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10d70:	0028      	movs	r0, r5
   10d72:	692b      	ldr	r3, [r5, #16]
   10d74:	4798      	blx	r3
   10d76:	e007      	b.n	10d88 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10d78:	0a1b      	lsrs	r3, r3, #8
   10d7a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   10d7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10d7e:	3301      	adds	r3, #1
   10d80:	626b      	str	r3, [r5, #36]	; 0x24
   10d82:	e7e8      	b.n	10d56 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10d84:	2304      	movs	r3, #4
   10d86:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10d88:	06f3      	lsls	r3, r6, #27
   10d8a:	d504      	bpl.n	10d96 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10d8c:	2310      	movs	r3, #16
   10d8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10d90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10d92:	06fb      	lsls	r3, r7, #27
   10d94:	d40e      	bmi.n	10db4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10d96:	06b3      	lsls	r3, r6, #26
   10d98:	d504      	bpl.n	10da4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10d9a:	2320      	movs	r3, #32
   10d9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10d9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10da0:	073b      	lsls	r3, r7, #28
   10da2:	d40b      	bmi.n	10dbc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10da4:	0733      	lsls	r3, r6, #28
   10da6:	d504      	bpl.n	10db2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10da8:	2308      	movs	r3, #8
   10daa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   10dac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   10dae:	06bb      	lsls	r3, r7, #26
   10db0:	d408      	bmi.n	10dc4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   10db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10db4:	0028      	movs	r0, r5
   10db6:	69eb      	ldr	r3, [r5, #28]
   10db8:	4798      	blx	r3
   10dba:	e7ec      	b.n	10d96 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   10dbc:	0028      	movs	r0, r5
   10dbe:	69ab      	ldr	r3, [r5, #24]
   10dc0:	4798      	blx	r3
   10dc2:	e7ef      	b.n	10da4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10dc4:	6a2b      	ldr	r3, [r5, #32]
   10dc6:	0028      	movs	r0, r5
   10dc8:	4798      	blx	r3
}
   10dca:	e7f2      	b.n	10db2 <_usart_interrupt_handler+0x176>
   10dcc:	200014b0 	.word	0x200014b0

00010dd0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10dd0:	b510      	push	{r4, lr}
	switch (clock_source) {
   10dd2:	2808      	cmp	r0, #8
   10dd4:	d803      	bhi.n	10dde <system_clock_source_get_hz+0xe>
   10dd6:	0080      	lsls	r0, r0, #2
   10dd8:	4b1c      	ldr	r3, [pc, #112]	; (10e4c <system_clock_source_get_hz+0x7c>)
   10dda:	581b      	ldr	r3, [r3, r0]
   10ddc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   10dde:	2000      	movs	r0, #0
   10de0:	e032      	b.n	10e48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   10de2:	4b1b      	ldr	r3, [pc, #108]	; (10e50 <system_clock_source_get_hz+0x80>)
   10de4:	6918      	ldr	r0, [r3, #16]
   10de6:	e02f      	b.n	10e48 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10de8:	4b1a      	ldr	r3, [pc, #104]	; (10e54 <system_clock_source_get_hz+0x84>)
   10dea:	6a1b      	ldr	r3, [r3, #32]
   10dec:	059b      	lsls	r3, r3, #22
   10dee:	0f9b      	lsrs	r3, r3, #30
   10df0:	4819      	ldr	r0, [pc, #100]	; (10e58 <system_clock_source_get_hz+0x88>)
   10df2:	40d8      	lsrs	r0, r3
   10df4:	e028      	b.n	10e48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   10df6:	4b16      	ldr	r3, [pc, #88]	; (10e50 <system_clock_source_get_hz+0x80>)
   10df8:	6958      	ldr	r0, [r3, #20]
   10dfa:	e025      	b.n	10e48 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10dfc:	4b14      	ldr	r3, [pc, #80]	; (10e50 <system_clock_source_get_hz+0x80>)
   10dfe:	681b      	ldr	r3, [r3, #0]
			return 0;
   10e00:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10e02:	079b      	lsls	r3, r3, #30
   10e04:	d520      	bpl.n	10e48 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10e06:	4913      	ldr	r1, [pc, #76]	; (10e54 <system_clock_source_get_hz+0x84>)
   10e08:	2210      	movs	r2, #16
   10e0a:	68cb      	ldr	r3, [r1, #12]
   10e0c:	421a      	tst	r2, r3
   10e0e:	d0fc      	beq.n	10e0a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   10e10:	4b0f      	ldr	r3, [pc, #60]	; (10e50 <system_clock_source_get_hz+0x80>)
   10e12:	681a      	ldr	r2, [r3, #0]
   10e14:	2324      	movs	r3, #36	; 0x24
   10e16:	4013      	ands	r3, r2
   10e18:	2b04      	cmp	r3, #4
   10e1a:	d001      	beq.n	10e20 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   10e1c:	480f      	ldr	r0, [pc, #60]	; (10e5c <system_clock_source_get_hz+0x8c>)
   10e1e:	e013      	b.n	10e48 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10e20:	2000      	movs	r0, #0
   10e22:	4b0f      	ldr	r3, [pc, #60]	; (10e60 <system_clock_source_get_hz+0x90>)
   10e24:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   10e26:	4b0a      	ldr	r3, [pc, #40]	; (10e50 <system_clock_source_get_hz+0x80>)
   10e28:	689b      	ldr	r3, [r3, #8]
   10e2a:	041b      	lsls	r3, r3, #16
   10e2c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10e2e:	4358      	muls	r0, r3
   10e30:	e00a      	b.n	10e48 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10e32:	2350      	movs	r3, #80	; 0x50
   10e34:	4a07      	ldr	r2, [pc, #28]	; (10e54 <system_clock_source_get_hz+0x84>)
   10e36:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   10e38:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10e3a:	075b      	lsls	r3, r3, #29
   10e3c:	d504      	bpl.n	10e48 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   10e3e:	4b04      	ldr	r3, [pc, #16]	; (10e50 <system_clock_source_get_hz+0x80>)
   10e40:	68d8      	ldr	r0, [r3, #12]
   10e42:	e001      	b.n	10e48 <system_clock_source_get_hz+0x78>
		return 32768UL;
   10e44:	2080      	movs	r0, #128	; 0x80
   10e46:	0200      	lsls	r0, r0, #8
	}
}
   10e48:	bd10      	pop	{r4, pc}
   10e4a:	46c0      	nop			; (mov r8, r8)
   10e4c:	0001959c 	.word	0x0001959c
   10e50:	200003fc 	.word	0x200003fc
   10e54:	40000800 	.word	0x40000800
   10e58:	007a1200 	.word	0x007a1200
   10e5c:	02dc6c00 	.word	0x02dc6c00
   10e60:	00011435 	.word	0x00011435

00010e64 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   10e64:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   10e66:	490c      	ldr	r1, [pc, #48]	; (10e98 <system_clock_source_osc8m_set_config+0x34>)
   10e68:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   10e6a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   10e6c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   10e6e:	7840      	ldrb	r0, [r0, #1]
   10e70:	2201      	movs	r2, #1
   10e72:	4010      	ands	r0, r2
   10e74:	0180      	lsls	r0, r0, #6
   10e76:	2640      	movs	r6, #64	; 0x40
   10e78:	43b3      	bics	r3, r6
   10e7a:	4303      	orrs	r3, r0
   10e7c:	402a      	ands	r2, r5
   10e7e:	01d2      	lsls	r2, r2, #7
   10e80:	2080      	movs	r0, #128	; 0x80
   10e82:	4383      	bics	r3, r0
   10e84:	4313      	orrs	r3, r2
   10e86:	2203      	movs	r2, #3
   10e88:	4022      	ands	r2, r4
   10e8a:	0212      	lsls	r2, r2, #8
   10e8c:	4803      	ldr	r0, [pc, #12]	; (10e9c <system_clock_source_osc8m_set_config+0x38>)
   10e8e:	4003      	ands	r3, r0
   10e90:	4313      	orrs	r3, r2
   10e92:	620b      	str	r3, [r1, #32]
}
   10e94:	bd70      	pop	{r4, r5, r6, pc}
   10e96:	46c0      	nop			; (mov r8, r8)
   10e98:	40000800 	.word	0x40000800
   10e9c:	fffffcff 	.word	0xfffffcff

00010ea0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   10ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ea2:	46de      	mov	lr, fp
   10ea4:	4657      	mov	r7, sl
   10ea6:	464e      	mov	r6, r9
   10ea8:	4645      	mov	r5, r8
   10eaa:	b5e0      	push	{r5, r6, r7, lr}
   10eac:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   10eae:	4b26      	ldr	r3, [pc, #152]	; (10f48 <system_clock_source_xosc32k_set_config+0xa8>)
   10eb0:	469b      	mov	fp, r3
   10eb2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   10eb4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   10eb6:	7800      	ldrb	r0, [r0, #0]
   10eb8:	4242      	negs	r2, r0
   10eba:	4142      	adcs	r2, r0
   10ebc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   10ebe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   10ec0:	78ca      	ldrb	r2, [r1, #3]
   10ec2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   10ec4:	790a      	ldrb	r2, [r1, #4]
   10ec6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   10ec8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   10eca:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   10ecc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   10ece:	688a      	ldr	r2, [r1, #8]
   10ed0:	491e      	ldr	r1, [pc, #120]	; (10f4c <system_clock_source_xosc32k_set_config+0xac>)
   10ed2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   10ed4:	2101      	movs	r1, #1
   10ed6:	464a      	mov	r2, r9
   10ed8:	0092      	lsls	r2, r2, #2
   10eda:	4691      	mov	r9, r2
   10edc:	2204      	movs	r2, #4
   10ede:	4393      	bics	r3, r2
   10ee0:	464a      	mov	r2, r9
   10ee2:	4313      	orrs	r3, r2
   10ee4:	4642      	mov	r2, r8
   10ee6:	400a      	ands	r2, r1
   10ee8:	00d2      	lsls	r2, r2, #3
   10eea:	4690      	mov	r8, r2
   10eec:	2208      	movs	r2, #8
   10eee:	4393      	bics	r3, r2
   10ef0:	4642      	mov	r2, r8
   10ef2:	4313      	orrs	r3, r2
   10ef4:	4662      	mov	r2, ip
   10ef6:	400a      	ands	r2, r1
   10ef8:	0112      	lsls	r2, r2, #4
   10efa:	4694      	mov	ip, r2
   10efc:	2210      	movs	r2, #16
   10efe:	4393      	bics	r3, r2
   10f00:	4662      	mov	r2, ip
   10f02:	4313      	orrs	r3, r2
   10f04:	4008      	ands	r0, r1
   10f06:	0140      	lsls	r0, r0, #5
   10f08:	2220      	movs	r2, #32
   10f0a:	4393      	bics	r3, r2
   10f0c:	4303      	orrs	r3, r0
   10f0e:	400f      	ands	r7, r1
   10f10:	01bf      	lsls	r7, r7, #6
   10f12:	2040      	movs	r0, #64	; 0x40
   10f14:	4383      	bics	r3, r0
   10f16:	433b      	orrs	r3, r7
   10f18:	400e      	ands	r6, r1
   10f1a:	01f6      	lsls	r6, r6, #7
   10f1c:	3040      	adds	r0, #64	; 0x40
   10f1e:	4383      	bics	r3, r0
   10f20:	4333      	orrs	r3, r6
   10f22:	3879      	subs	r0, #121	; 0x79
   10f24:	4005      	ands	r5, r0
   10f26:	022d      	lsls	r5, r5, #8
   10f28:	4809      	ldr	r0, [pc, #36]	; (10f50 <system_clock_source_xosc32k_set_config+0xb0>)
   10f2a:	4003      	ands	r3, r0
   10f2c:	432b      	orrs	r3, r5
   10f2e:	4021      	ands	r1, r4
   10f30:	0309      	lsls	r1, r1, #12
   10f32:	4808      	ldr	r0, [pc, #32]	; (10f54 <system_clock_source_xosc32k_set_config+0xb4>)
   10f34:	4003      	ands	r3, r0
   10f36:	430b      	orrs	r3, r1
   10f38:	465a      	mov	r2, fp
   10f3a:	8293      	strh	r3, [r2, #20]
}
   10f3c:	bc3c      	pop	{r2, r3, r4, r5}
   10f3e:	4690      	mov	r8, r2
   10f40:	4699      	mov	r9, r3
   10f42:	46a2      	mov	sl, r4
   10f44:	46ab      	mov	fp, r5
   10f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f48:	40000800 	.word	0x40000800
   10f4c:	200003fc 	.word	0x200003fc
   10f50:	fffff8ff 	.word	0xfffff8ff
   10f54:	ffffefff 	.word	0xffffefff

00010f58 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   10f58:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10f5a:	7a03      	ldrb	r3, [r0, #8]
   10f5c:	069b      	lsls	r3, r3, #26
   10f5e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   10f60:	8942      	ldrh	r2, [r0, #10]
   10f62:	0592      	lsls	r2, r2, #22
   10f64:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10f66:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   10f68:	4918      	ldr	r1, [pc, #96]	; (10fcc <system_clock_source_dfll_set_config+0x74>)
   10f6a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   10f6c:	7983      	ldrb	r3, [r0, #6]
   10f6e:	79c2      	ldrb	r2, [r0, #7]
   10f70:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   10f72:	8842      	ldrh	r2, [r0, #2]
   10f74:	8884      	ldrh	r4, [r0, #4]
   10f76:	4322      	orrs	r2, r4
   10f78:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   10f7a:	7842      	ldrb	r2, [r0, #1]
   10f7c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   10f7e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   10f80:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   10f82:	7803      	ldrb	r3, [r0, #0]
   10f84:	2b04      	cmp	r3, #4
   10f86:	d011      	beq.n	10fac <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   10f88:	2b20      	cmp	r3, #32
   10f8a:	d10e      	bne.n	10faa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10f8c:	7b03      	ldrb	r3, [r0, #12]
   10f8e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10f90:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10f92:	4313      	orrs	r3, r2
   10f94:	89c2      	ldrh	r2, [r0, #14]
   10f96:	0412      	lsls	r2, r2, #16
   10f98:	490d      	ldr	r1, [pc, #52]	; (10fd0 <system_clock_source_dfll_set_config+0x78>)
   10f9a:	400a      	ands	r2, r1
   10f9c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   10f9e:	4a0b      	ldr	r2, [pc, #44]	; (10fcc <system_clock_source_dfll_set_config+0x74>)
   10fa0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   10fa2:	6811      	ldr	r1, [r2, #0]
   10fa4:	4b0b      	ldr	r3, [pc, #44]	; (10fd4 <system_clock_source_dfll_set_config+0x7c>)
   10fa6:	430b      	orrs	r3, r1
   10fa8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   10faa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10fac:	7b03      	ldrb	r3, [r0, #12]
   10fae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10fb0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10fb2:	4313      	orrs	r3, r2
   10fb4:	89c2      	ldrh	r2, [r0, #14]
   10fb6:	0412      	lsls	r2, r2, #16
   10fb8:	4905      	ldr	r1, [pc, #20]	; (10fd0 <system_clock_source_dfll_set_config+0x78>)
   10fba:	400a      	ands	r2, r1
   10fbc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   10fbe:	4a03      	ldr	r2, [pc, #12]	; (10fcc <system_clock_source_dfll_set_config+0x74>)
   10fc0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   10fc2:	6813      	ldr	r3, [r2, #0]
   10fc4:	2104      	movs	r1, #4
   10fc6:	430b      	orrs	r3, r1
   10fc8:	6013      	str	r3, [r2, #0]
   10fca:	e7ee      	b.n	10faa <system_clock_source_dfll_set_config+0x52>
   10fcc:	200003fc 	.word	0x200003fc
   10fd0:	03ff0000 	.word	0x03ff0000
   10fd4:	00000424 	.word	0x00000424

00010fd8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   10fd8:	2808      	cmp	r0, #8
   10fda:	d803      	bhi.n	10fe4 <system_clock_source_enable+0xc>
   10fdc:	0080      	lsls	r0, r0, #2
   10fde:	4b25      	ldr	r3, [pc, #148]	; (11074 <system_clock_source_enable+0x9c>)
   10fe0:	581b      	ldr	r3, [r3, r0]
   10fe2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   10fe4:	2017      	movs	r0, #23
   10fe6:	e044      	b.n	11072 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   10fe8:	4a23      	ldr	r2, [pc, #140]	; (11078 <system_clock_source_enable+0xa0>)
   10fea:	6a13      	ldr	r3, [r2, #32]
   10fec:	2102      	movs	r1, #2
   10fee:	430b      	orrs	r3, r1
   10ff0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   10ff2:	2000      	movs	r0, #0
   10ff4:	e03d      	b.n	11072 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   10ff6:	4a20      	ldr	r2, [pc, #128]	; (11078 <system_clock_source_enable+0xa0>)
   10ff8:	6993      	ldr	r3, [r2, #24]
   10ffa:	2102      	movs	r1, #2
   10ffc:	430b      	orrs	r3, r1
   10ffe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   11000:	2000      	movs	r0, #0
		break;
   11002:	e036      	b.n	11072 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   11004:	4a1c      	ldr	r2, [pc, #112]	; (11078 <system_clock_source_enable+0xa0>)
   11006:	8a13      	ldrh	r3, [r2, #16]
   11008:	2102      	movs	r1, #2
   1100a:	430b      	orrs	r3, r1
   1100c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1100e:	2000      	movs	r0, #0
		break;
   11010:	e02f      	b.n	11072 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   11012:	4a19      	ldr	r2, [pc, #100]	; (11078 <system_clock_source_enable+0xa0>)
   11014:	8a93      	ldrh	r3, [r2, #20]
   11016:	2102      	movs	r1, #2
   11018:	430b      	orrs	r3, r1
   1101a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1101c:	2000      	movs	r0, #0
		break;
   1101e:	e028      	b.n	11072 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   11020:	4916      	ldr	r1, [pc, #88]	; (1107c <system_clock_source_enable+0xa4>)
   11022:	680b      	ldr	r3, [r1, #0]
   11024:	2202      	movs	r2, #2
   11026:	4313      	orrs	r3, r2
   11028:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1102a:	4b13      	ldr	r3, [pc, #76]	; (11078 <system_clock_source_enable+0xa0>)
   1102c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1102e:	0019      	movs	r1, r3
   11030:	320e      	adds	r2, #14
   11032:	68cb      	ldr	r3, [r1, #12]
   11034:	421a      	tst	r2, r3
   11036:	d0fc      	beq.n	11032 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   11038:	4a10      	ldr	r2, [pc, #64]	; (1107c <system_clock_source_enable+0xa4>)
   1103a:	6891      	ldr	r1, [r2, #8]
   1103c:	4b0e      	ldr	r3, [pc, #56]	; (11078 <system_clock_source_enable+0xa0>)
   1103e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   11040:	6852      	ldr	r2, [r2, #4]
   11042:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   11044:	2200      	movs	r2, #0
   11046:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   11048:	0019      	movs	r1, r3
   1104a:	3210      	adds	r2, #16
   1104c:	68cb      	ldr	r3, [r1, #12]
   1104e:	421a      	tst	r2, r3
   11050:	d0fc      	beq.n	1104c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   11052:	4b0a      	ldr	r3, [pc, #40]	; (1107c <system_clock_source_enable+0xa4>)
   11054:	681b      	ldr	r3, [r3, #0]
   11056:	b29b      	uxth	r3, r3
   11058:	4a07      	ldr	r2, [pc, #28]	; (11078 <system_clock_source_enable+0xa0>)
   1105a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1105c:	2000      	movs	r0, #0
   1105e:	e008      	b.n	11072 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   11060:	4905      	ldr	r1, [pc, #20]	; (11078 <system_clock_source_enable+0xa0>)
   11062:	2244      	movs	r2, #68	; 0x44
   11064:	5c8b      	ldrb	r3, [r1, r2]
   11066:	2002      	movs	r0, #2
   11068:	4303      	orrs	r3, r0
   1106a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1106c:	2000      	movs	r0, #0
		break;
   1106e:	e000      	b.n	11072 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   11070:	2000      	movs	r0, #0
}
   11072:	4770      	bx	lr
   11074:	000195c0 	.word	0x000195c0
   11078:	40000800 	.word	0x40000800
   1107c:	200003fc 	.word	0x200003fc

00011080 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   11080:	b5f0      	push	{r4, r5, r6, r7, lr}
   11082:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   11084:	22c2      	movs	r2, #194	; 0xc2
   11086:	00d2      	lsls	r2, r2, #3
   11088:	4b47      	ldr	r3, [pc, #284]	; (111a8 <system_clock_init+0x128>)
   1108a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1108c:	4a47      	ldr	r2, [pc, #284]	; (111ac <system_clock_init+0x12c>)
   1108e:	6853      	ldr	r3, [r2, #4]
   11090:	211e      	movs	r1, #30
   11092:	438b      	bics	r3, r1
   11094:	391a      	subs	r1, #26
   11096:	430b      	orrs	r3, r1
   11098:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1109a:	2202      	movs	r2, #2
   1109c:	ab01      	add	r3, sp, #4
   1109e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   110a0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   110a2:	4d43      	ldr	r5, [pc, #268]	; (111b0 <system_clock_init+0x130>)
   110a4:	b2e0      	uxtb	r0, r4
   110a6:	a901      	add	r1, sp, #4
   110a8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   110aa:	3401      	adds	r4, #1
   110ac:	2c25      	cmp	r4, #37	; 0x25
   110ae:	d1f9      	bne.n	110a4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   110b0:	a80a      	add	r0, sp, #40	; 0x28
   110b2:	2300      	movs	r3, #0
   110b4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   110b6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   110b8:	2280      	movs	r2, #128	; 0x80
   110ba:	0212      	lsls	r2, r2, #8
   110bc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   110be:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   110c0:	2201      	movs	r2, #1
   110c2:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   110c4:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   110c6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   110c8:	3202      	adds	r2, #2
   110ca:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   110cc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   110ce:	4b39      	ldr	r3, [pc, #228]	; (111b4 <system_clock_init+0x134>)
   110d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   110d2:	2005      	movs	r0, #5
   110d4:	4b38      	ldr	r3, [pc, #224]	; (111b8 <system_clock_init+0x138>)
   110d6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   110d8:	4933      	ldr	r1, [pc, #204]	; (111a8 <system_clock_init+0x128>)
   110da:	2202      	movs	r2, #2
   110dc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   110de:	421a      	tst	r2, r3
   110e0:	d0fc      	beq.n	110dc <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   110e2:	4a31      	ldr	r2, [pc, #196]	; (111a8 <system_clock_init+0x128>)
   110e4:	8a93      	ldrh	r3, [r2, #20]
   110e6:	2180      	movs	r1, #128	; 0x80
   110e8:	430b      	orrs	r3, r1
   110ea:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   110ec:	ab05      	add	r3, sp, #20
   110ee:	2100      	movs	r1, #0
   110f0:	2200      	movs	r2, #0
   110f2:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   110f4:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   110f6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   110f8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   110fa:	313f      	adds	r1, #63	; 0x3f
   110fc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   110fe:	393b      	subs	r1, #59	; 0x3b
   11100:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   11102:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   11104:	4b2d      	ldr	r3, [pc, #180]	; (111bc <system_clock_init+0x13c>)
   11106:	681b      	ldr	r3, [r3, #0]
   11108:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   1110a:	2b3f      	cmp	r3, #63	; 0x3f
   1110c:	d04a      	beq.n	111a4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   1110e:	a805      	add	r0, sp, #20
   11110:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   11112:	4b2b      	ldr	r3, [pc, #172]	; (111c0 <system_clock_init+0x140>)
   11114:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   11116:	2307      	movs	r3, #7
   11118:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   1111a:	3338      	adds	r3, #56	; 0x38
   1111c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1111e:	4b29      	ldr	r3, [pc, #164]	; (111c4 <system_clock_init+0x144>)
   11120:	4798      	blx	r3
	config->run_in_standby  = false;
   11122:	a804      	add	r0, sp, #16
   11124:	2500      	movs	r5, #0
   11126:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   11128:	2601      	movs	r6, #1
   1112a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1112c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1112e:	4b26      	ldr	r3, [pc, #152]	; (111c8 <system_clock_init+0x148>)
   11130:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   11132:	2006      	movs	r0, #6
   11134:	4f20      	ldr	r7, [pc, #128]	; (111b8 <system_clock_init+0x138>)
   11136:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11138:	4b24      	ldr	r3, [pc, #144]	; (111cc <system_clock_init+0x14c>)
   1113a:	4798      	blx	r3
	config->division_factor    = 1;
   1113c:	ac01      	add	r4, sp, #4
   1113e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   11140:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   11142:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   11144:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   11146:	2305      	movs	r3, #5
   11148:	7023      	strb	r3, [r4, #0]
   1114a:	0021      	movs	r1, r4
   1114c:	2001      	movs	r0, #1
   1114e:	4b20      	ldr	r3, [pc, #128]	; (111d0 <system_clock_init+0x150>)
   11150:	4798      	blx	r3
   11152:	2001      	movs	r0, #1
   11154:	4b1f      	ldr	r3, [pc, #124]	; (111d4 <system_clock_init+0x154>)
   11156:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   11158:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1115a:	0021      	movs	r1, r4
   1115c:	2000      	movs	r0, #0
   1115e:	4b14      	ldr	r3, [pc, #80]	; (111b0 <system_clock_init+0x130>)
   11160:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   11162:	2000      	movs	r0, #0
   11164:	4b1c      	ldr	r3, [pc, #112]	; (111d8 <system_clock_init+0x158>)
   11166:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   11168:	2007      	movs	r0, #7
   1116a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1116c:	490e      	ldr	r1, [pc, #56]	; (111a8 <system_clock_init+0x128>)
   1116e:	22d0      	movs	r2, #208	; 0xd0
   11170:	68cb      	ldr	r3, [r1, #12]
   11172:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   11174:	2bd0      	cmp	r3, #208	; 0xd0
   11176:	d1fb      	bne.n	11170 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   11178:	4a18      	ldr	r2, [pc, #96]	; (111dc <system_clock_init+0x15c>)
   1117a:	2300      	movs	r3, #0
   1117c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1117e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   11180:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   11182:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   11184:	a901      	add	r1, sp, #4
   11186:	2201      	movs	r2, #1
   11188:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1118a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1118c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   1118e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   11190:	3307      	adds	r3, #7
   11192:	700b      	strb	r3, [r1, #0]
   11194:	2000      	movs	r0, #0
   11196:	4b0e      	ldr	r3, [pc, #56]	; (111d0 <system_clock_init+0x150>)
   11198:	4798      	blx	r3
   1119a:	2000      	movs	r0, #0
   1119c:	4b0d      	ldr	r3, [pc, #52]	; (111d4 <system_clock_init+0x154>)
   1119e:	4798      	blx	r3
#endif
}
   111a0:	b00f      	add	sp, #60	; 0x3c
   111a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   111a4:	3b20      	subs	r3, #32
   111a6:	e7b2      	b.n	1110e <system_clock_init+0x8e>
   111a8:	40000800 	.word	0x40000800
   111ac:	41004000 	.word	0x41004000
   111b0:	00011419 	.word	0x00011419
   111b4:	00010ea1 	.word	0x00010ea1
   111b8:	00010fd9 	.word	0x00010fd9
   111bc:	00806024 	.word	0x00806024
   111c0:	000005b9 	.word	0x000005b9
   111c4:	00010f59 	.word	0x00010f59
   111c8:	00010e65 	.word	0x00010e65
   111cc:	000111e1 	.word	0x000111e1
   111d0:	00011205 	.word	0x00011205
   111d4:	000112bd 	.word	0x000112bd
   111d8:	0001138d 	.word	0x0001138d
   111dc:	40000400 	.word	0x40000400

000111e0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   111e0:	4a06      	ldr	r2, [pc, #24]	; (111fc <system_gclk_init+0x1c>)
   111e2:	6993      	ldr	r3, [r2, #24]
   111e4:	2108      	movs	r1, #8
   111e6:	430b      	orrs	r3, r1
   111e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   111ea:	2201      	movs	r2, #1
   111ec:	4b04      	ldr	r3, [pc, #16]	; (11200 <system_gclk_init+0x20>)
   111ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   111f0:	0019      	movs	r1, r3
   111f2:	780b      	ldrb	r3, [r1, #0]
   111f4:	4213      	tst	r3, r2
   111f6:	d1fc      	bne.n	111f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   111f8:	4770      	bx	lr
   111fa:	46c0      	nop			; (mov r8, r8)
   111fc:	40000400 	.word	0x40000400
   11200:	40000c00 	.word	0x40000c00

00011204 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   11204:	b570      	push	{r4, r5, r6, lr}
   11206:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   11208:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1120a:	780d      	ldrb	r5, [r1, #0]
   1120c:	022d      	lsls	r5, r5, #8
   1120e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   11210:	784b      	ldrb	r3, [r1, #1]
   11212:	2b00      	cmp	r3, #0
   11214:	d002      	beq.n	1121c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   11216:	2380      	movs	r3, #128	; 0x80
   11218:	02db      	lsls	r3, r3, #11
   1121a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1121c:	7a4b      	ldrb	r3, [r1, #9]
   1121e:	2b00      	cmp	r3, #0
   11220:	d002      	beq.n	11228 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   11222:	2380      	movs	r3, #128	; 0x80
   11224:	031b      	lsls	r3, r3, #12
   11226:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   11228:	6848      	ldr	r0, [r1, #4]
   1122a:	2801      	cmp	r0, #1
   1122c:	d910      	bls.n	11250 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1122e:	1e43      	subs	r3, r0, #1
   11230:	4218      	tst	r0, r3
   11232:	d134      	bne.n	1129e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   11234:	2802      	cmp	r0, #2
   11236:	d930      	bls.n	1129a <system_gclk_gen_set_config+0x96>
   11238:	2302      	movs	r3, #2
   1123a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1123c:	3201      	adds	r2, #1
						mask <<= 1) {
   1123e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   11240:	4298      	cmp	r0, r3
   11242:	d8fb      	bhi.n	1123c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   11244:	0212      	lsls	r2, r2, #8
   11246:	4332      	orrs	r2, r6
   11248:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1124a:	2380      	movs	r3, #128	; 0x80
   1124c:	035b      	lsls	r3, r3, #13
   1124e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11250:	7a0b      	ldrb	r3, [r1, #8]
   11252:	2b00      	cmp	r3, #0
   11254:	d002      	beq.n	1125c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   11256:	2380      	movs	r3, #128	; 0x80
   11258:	039b      	lsls	r3, r3, #14
   1125a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1125c:	4a13      	ldr	r2, [pc, #76]	; (112ac <system_gclk_gen_set_config+0xa8>)
   1125e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   11260:	b25b      	sxtb	r3, r3
   11262:	2b00      	cmp	r3, #0
   11264:	dbfb      	blt.n	1125e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   11266:	4b12      	ldr	r3, [pc, #72]	; (112b0 <system_gclk_gen_set_config+0xac>)
   11268:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1126a:	4b12      	ldr	r3, [pc, #72]	; (112b4 <system_gclk_gen_set_config+0xb0>)
   1126c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1126e:	4a0f      	ldr	r2, [pc, #60]	; (112ac <system_gclk_gen_set_config+0xa8>)
   11270:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   11272:	b25b      	sxtb	r3, r3
   11274:	2b00      	cmp	r3, #0
   11276:	dbfb      	blt.n	11270 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   11278:	4b0c      	ldr	r3, [pc, #48]	; (112ac <system_gclk_gen_set_config+0xa8>)
   1127a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1127c:	001a      	movs	r2, r3
   1127e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   11280:	b25b      	sxtb	r3, r3
   11282:	2b00      	cmp	r3, #0
   11284:	dbfb      	blt.n	1127e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   11286:	4a09      	ldr	r2, [pc, #36]	; (112ac <system_gclk_gen_set_config+0xa8>)
   11288:	6853      	ldr	r3, [r2, #4]
   1128a:	2180      	movs	r1, #128	; 0x80
   1128c:	0249      	lsls	r1, r1, #9
   1128e:	400b      	ands	r3, r1
   11290:	431d      	orrs	r5, r3
   11292:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   11294:	4b08      	ldr	r3, [pc, #32]	; (112b8 <system_gclk_gen_set_config+0xb4>)
   11296:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   11298:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1129a:	2200      	movs	r2, #0
   1129c:	e7d2      	b.n	11244 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1129e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   112a0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   112a2:	2380      	movs	r3, #128	; 0x80
   112a4:	029b      	lsls	r3, r3, #10
   112a6:	431d      	orrs	r5, r3
   112a8:	e7d2      	b.n	11250 <system_gclk_gen_set_config+0x4c>
   112aa:	46c0      	nop			; (mov r8, r8)
   112ac:	40000c00 	.word	0x40000c00
   112b0:	0000f74d 	.word	0x0000f74d
   112b4:	40000c08 	.word	0x40000c08
   112b8:	0000f78d 	.word	0x0000f78d

000112bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   112bc:	b510      	push	{r4, lr}
   112be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   112c0:	4a0b      	ldr	r2, [pc, #44]	; (112f0 <system_gclk_gen_enable+0x34>)
   112c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   112c4:	b25b      	sxtb	r3, r3
   112c6:	2b00      	cmp	r3, #0
   112c8:	dbfb      	blt.n	112c2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   112ca:	4b0a      	ldr	r3, [pc, #40]	; (112f4 <system_gclk_gen_enable+0x38>)
   112cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   112ce:	4b0a      	ldr	r3, [pc, #40]	; (112f8 <system_gclk_gen_enable+0x3c>)
   112d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   112d2:	4a07      	ldr	r2, [pc, #28]	; (112f0 <system_gclk_gen_enable+0x34>)
   112d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   112d6:	b25b      	sxtb	r3, r3
   112d8:	2b00      	cmp	r3, #0
   112da:	dbfb      	blt.n	112d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   112dc:	4a04      	ldr	r2, [pc, #16]	; (112f0 <system_gclk_gen_enable+0x34>)
   112de:	6851      	ldr	r1, [r2, #4]
   112e0:	2380      	movs	r3, #128	; 0x80
   112e2:	025b      	lsls	r3, r3, #9
   112e4:	430b      	orrs	r3, r1
   112e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   112e8:	4b04      	ldr	r3, [pc, #16]	; (112fc <system_gclk_gen_enable+0x40>)
   112ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   112ec:	bd10      	pop	{r4, pc}
   112ee:	46c0      	nop			; (mov r8, r8)
   112f0:	40000c00 	.word	0x40000c00
   112f4:	0000f74d 	.word	0x0000f74d
   112f8:	40000c04 	.word	0x40000c04
   112fc:	0000f78d 	.word	0x0000f78d

00011300 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   11300:	b570      	push	{r4, r5, r6, lr}
   11302:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11304:	4a1a      	ldr	r2, [pc, #104]	; (11370 <system_gclk_gen_get_hz+0x70>)
   11306:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11308:	b25b      	sxtb	r3, r3
   1130a:	2b00      	cmp	r3, #0
   1130c:	dbfb      	blt.n	11306 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1130e:	4b19      	ldr	r3, [pc, #100]	; (11374 <system_gclk_gen_get_hz+0x74>)
   11310:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11312:	4b19      	ldr	r3, [pc, #100]	; (11378 <system_gclk_gen_get_hz+0x78>)
   11314:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   11316:	4a16      	ldr	r2, [pc, #88]	; (11370 <system_gclk_gen_get_hz+0x70>)
   11318:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1131a:	b25b      	sxtb	r3, r3
   1131c:	2b00      	cmp	r3, #0
   1131e:	dbfb      	blt.n	11318 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   11320:	4e13      	ldr	r6, [pc, #76]	; (11370 <system_gclk_gen_get_hz+0x70>)
   11322:	6870      	ldr	r0, [r6, #4]
   11324:	04c0      	lsls	r0, r0, #19
   11326:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   11328:	4b14      	ldr	r3, [pc, #80]	; (1137c <system_gclk_gen_get_hz+0x7c>)
   1132a:	4798      	blx	r3
   1132c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1132e:	4b12      	ldr	r3, [pc, #72]	; (11378 <system_gclk_gen_get_hz+0x78>)
   11330:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   11332:	6876      	ldr	r6, [r6, #4]
   11334:	02f6      	lsls	r6, r6, #11
   11336:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11338:	4b11      	ldr	r3, [pc, #68]	; (11380 <system_gclk_gen_get_hz+0x80>)
   1133a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1133c:	4a0c      	ldr	r2, [pc, #48]	; (11370 <system_gclk_gen_get_hz+0x70>)
   1133e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   11340:	b25b      	sxtb	r3, r3
   11342:	2b00      	cmp	r3, #0
   11344:	dbfb      	blt.n	1133e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   11346:	4b0a      	ldr	r3, [pc, #40]	; (11370 <system_gclk_gen_get_hz+0x70>)
   11348:	689c      	ldr	r4, [r3, #8]
   1134a:	0224      	lsls	r4, r4, #8
   1134c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1134e:	4b0d      	ldr	r3, [pc, #52]	; (11384 <system_gclk_gen_get_hz+0x84>)
   11350:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   11352:	2e00      	cmp	r6, #0
   11354:	d107      	bne.n	11366 <system_gclk_gen_get_hz+0x66>
   11356:	2c01      	cmp	r4, #1
   11358:	d907      	bls.n	1136a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1135a:	0021      	movs	r1, r4
   1135c:	0028      	movs	r0, r5
   1135e:	4b0a      	ldr	r3, [pc, #40]	; (11388 <system_gclk_gen_get_hz+0x88>)
   11360:	4798      	blx	r3
   11362:	0005      	movs	r5, r0
   11364:	e001      	b.n	1136a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   11366:	3401      	adds	r4, #1
   11368:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1136a:	0028      	movs	r0, r5
   1136c:	bd70      	pop	{r4, r5, r6, pc}
   1136e:	46c0      	nop			; (mov r8, r8)
   11370:	40000c00 	.word	0x40000c00
   11374:	0000f74d 	.word	0x0000f74d
   11378:	40000c04 	.word	0x40000c04
   1137c:	00010dd1 	.word	0x00010dd1
   11380:	40000c08 	.word	0x40000c08
   11384:	0000f78d 	.word	0x0000f78d
   11388:	00016bbd 	.word	0x00016bbd

0001138c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1138c:	b510      	push	{r4, lr}
   1138e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11390:	4b06      	ldr	r3, [pc, #24]	; (113ac <system_gclk_chan_enable+0x20>)
   11392:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11394:	4b06      	ldr	r3, [pc, #24]	; (113b0 <system_gclk_chan_enable+0x24>)
   11396:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   11398:	4a06      	ldr	r2, [pc, #24]	; (113b4 <system_gclk_chan_enable+0x28>)
   1139a:	8853      	ldrh	r3, [r2, #2]
   1139c:	2180      	movs	r1, #128	; 0x80
   1139e:	01c9      	lsls	r1, r1, #7
   113a0:	430b      	orrs	r3, r1
   113a2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   113a4:	4b04      	ldr	r3, [pc, #16]	; (113b8 <system_gclk_chan_enable+0x2c>)
   113a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   113a8:	bd10      	pop	{r4, pc}
   113aa:	46c0      	nop			; (mov r8, r8)
   113ac:	0000f74d 	.word	0x0000f74d
   113b0:	40000c02 	.word	0x40000c02
   113b4:	40000c00 	.word	0x40000c00
   113b8:	0000f78d 	.word	0x0000f78d

000113bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   113bc:	b510      	push	{r4, lr}
   113be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   113c0:	4b0f      	ldr	r3, [pc, #60]	; (11400 <system_gclk_chan_disable+0x44>)
   113c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   113c4:	4b0f      	ldr	r3, [pc, #60]	; (11404 <system_gclk_chan_disable+0x48>)
   113c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   113c8:	4a0f      	ldr	r2, [pc, #60]	; (11408 <system_gclk_chan_disable+0x4c>)
   113ca:	8853      	ldrh	r3, [r2, #2]
   113cc:	051b      	lsls	r3, r3, #20
   113ce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   113d0:	8853      	ldrh	r3, [r2, #2]
   113d2:	490e      	ldr	r1, [pc, #56]	; (1140c <system_gclk_chan_disable+0x50>)
   113d4:	400b      	ands	r3, r1
   113d6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   113d8:	8853      	ldrh	r3, [r2, #2]
   113da:	490d      	ldr	r1, [pc, #52]	; (11410 <system_gclk_chan_disable+0x54>)
   113dc:	400b      	ands	r3, r1
   113de:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   113e0:	0011      	movs	r1, r2
   113e2:	2280      	movs	r2, #128	; 0x80
   113e4:	01d2      	lsls	r2, r2, #7
   113e6:	884b      	ldrh	r3, [r1, #2]
   113e8:	4213      	tst	r3, r2
   113ea:	d1fc      	bne.n	113e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   113ec:	4906      	ldr	r1, [pc, #24]	; (11408 <system_gclk_chan_disable+0x4c>)
   113ee:	884a      	ldrh	r2, [r1, #2]
   113f0:	0203      	lsls	r3, r0, #8
   113f2:	4806      	ldr	r0, [pc, #24]	; (1140c <system_gclk_chan_disable+0x50>)
   113f4:	4002      	ands	r2, r0
   113f6:	4313      	orrs	r3, r2
   113f8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   113fa:	4b06      	ldr	r3, [pc, #24]	; (11414 <system_gclk_chan_disable+0x58>)
   113fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   113fe:	bd10      	pop	{r4, pc}
   11400:	0000f74d 	.word	0x0000f74d
   11404:	40000c02 	.word	0x40000c02
   11408:	40000c00 	.word	0x40000c00
   1140c:	fffff0ff 	.word	0xfffff0ff
   11410:	ffffbfff 	.word	0xffffbfff
   11414:	0000f78d 	.word	0x0000f78d

00011418 <system_gclk_chan_set_config>:
{
   11418:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1141a:	780c      	ldrb	r4, [r1, #0]
   1141c:	0224      	lsls	r4, r4, #8
   1141e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   11420:	4b02      	ldr	r3, [pc, #8]	; (1142c <system_gclk_chan_set_config+0x14>)
   11422:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   11424:	b2a4      	uxth	r4, r4
   11426:	4b02      	ldr	r3, [pc, #8]	; (11430 <system_gclk_chan_set_config+0x18>)
   11428:	805c      	strh	r4, [r3, #2]
}
   1142a:	bd10      	pop	{r4, pc}
   1142c:	000113bd 	.word	0x000113bd
   11430:	40000c00 	.word	0x40000c00

00011434 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   11434:	b510      	push	{r4, lr}
   11436:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   11438:	4b06      	ldr	r3, [pc, #24]	; (11454 <system_gclk_chan_get_hz+0x20>)
   1143a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1143c:	4b06      	ldr	r3, [pc, #24]	; (11458 <system_gclk_chan_get_hz+0x24>)
   1143e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   11440:	4b06      	ldr	r3, [pc, #24]	; (1145c <system_gclk_chan_get_hz+0x28>)
   11442:	885c      	ldrh	r4, [r3, #2]
   11444:	0524      	lsls	r4, r4, #20
   11446:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   11448:	4b05      	ldr	r3, [pc, #20]	; (11460 <system_gclk_chan_get_hz+0x2c>)
   1144a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1144c:	0020      	movs	r0, r4
   1144e:	4b05      	ldr	r3, [pc, #20]	; (11464 <system_gclk_chan_get_hz+0x30>)
   11450:	4798      	blx	r3
}
   11452:	bd10      	pop	{r4, pc}
   11454:	0000f74d 	.word	0x0000f74d
   11458:	40000c02 	.word	0x40000c02
   1145c:	40000c00 	.word	0x40000c00
   11460:	0000f78d 	.word	0x0000f78d
   11464:	00011301 	.word	0x00011301

00011468 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   11468:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1146a:	78d3      	ldrb	r3, [r2, #3]
   1146c:	2b00      	cmp	r3, #0
   1146e:	d135      	bne.n	114dc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   11470:	7813      	ldrb	r3, [r2, #0]
   11472:	2b80      	cmp	r3, #128	; 0x80
   11474:	d029      	beq.n	114ca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   11476:	061b      	lsls	r3, r3, #24
   11478:	2480      	movs	r4, #128	; 0x80
   1147a:	0264      	lsls	r4, r4, #9
   1147c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1147e:	7854      	ldrb	r4, [r2, #1]
   11480:	2502      	movs	r5, #2
   11482:	43ac      	bics	r4, r5
   11484:	d106      	bne.n	11494 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   11486:	7894      	ldrb	r4, [r2, #2]
   11488:	2c00      	cmp	r4, #0
   1148a:	d120      	bne.n	114ce <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1148c:	2480      	movs	r4, #128	; 0x80
   1148e:	02a4      	lsls	r4, r4, #10
   11490:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   11492:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11494:	7854      	ldrb	r4, [r2, #1]
   11496:	3c01      	subs	r4, #1
   11498:	2c01      	cmp	r4, #1
   1149a:	d91c      	bls.n	114d6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1149c:	040d      	lsls	r5, r1, #16
   1149e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   114a0:	24a0      	movs	r4, #160	; 0xa0
   114a2:	05e4      	lsls	r4, r4, #23
   114a4:	432c      	orrs	r4, r5
   114a6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   114a8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   114aa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   114ac:	24d0      	movs	r4, #208	; 0xd0
   114ae:	0624      	lsls	r4, r4, #24
   114b0:	432c      	orrs	r4, r5
   114b2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   114b4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   114b6:	78d4      	ldrb	r4, [r2, #3]
   114b8:	2c00      	cmp	r4, #0
   114ba:	d122      	bne.n	11502 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   114bc:	035b      	lsls	r3, r3, #13
   114be:	d51c      	bpl.n	114fa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   114c0:	7893      	ldrb	r3, [r2, #2]
   114c2:	2b01      	cmp	r3, #1
   114c4:	d01e      	beq.n	11504 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   114c6:	6141      	str	r1, [r0, #20]
   114c8:	e017      	b.n	114fa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   114ca:	2300      	movs	r3, #0
   114cc:	e7d7      	b.n	1147e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   114ce:	24c0      	movs	r4, #192	; 0xc0
   114d0:	02e4      	lsls	r4, r4, #11
   114d2:	4323      	orrs	r3, r4
   114d4:	e7dd      	b.n	11492 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   114d6:	4c0d      	ldr	r4, [pc, #52]	; (1150c <_system_pinmux_config+0xa4>)
   114d8:	4023      	ands	r3, r4
   114da:	e7df      	b.n	1149c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   114dc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   114de:	040c      	lsls	r4, r1, #16
   114e0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   114e2:	23a0      	movs	r3, #160	; 0xa0
   114e4:	05db      	lsls	r3, r3, #23
   114e6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   114e8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   114ea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   114ec:	23d0      	movs	r3, #208	; 0xd0
   114ee:	061b      	lsls	r3, r3, #24
   114f0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   114f2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   114f4:	78d3      	ldrb	r3, [r2, #3]
   114f6:	2b00      	cmp	r3, #0
   114f8:	d103      	bne.n	11502 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   114fa:	7853      	ldrb	r3, [r2, #1]
   114fc:	3b01      	subs	r3, #1
   114fe:	2b01      	cmp	r3, #1
   11500:	d902      	bls.n	11508 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   11502:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   11504:	6181      	str	r1, [r0, #24]
   11506:	e7f8      	b.n	114fa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   11508:	6081      	str	r1, [r0, #8]
}
   1150a:	e7fa      	b.n	11502 <_system_pinmux_config+0x9a>
   1150c:	fffbffff 	.word	0xfffbffff

00011510 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   11510:	b510      	push	{r4, lr}
   11512:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   11514:	09c1      	lsrs	r1, r0, #7
		return NULL;
   11516:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   11518:	2900      	cmp	r1, #0
   1151a:	d104      	bne.n	11526 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1151c:	0943      	lsrs	r3, r0, #5
   1151e:	01db      	lsls	r3, r3, #7
   11520:	4905      	ldr	r1, [pc, #20]	; (11538 <system_pinmux_pin_set_config+0x28>)
   11522:	468c      	mov	ip, r1
   11524:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   11526:	241f      	movs	r4, #31
   11528:	4020      	ands	r0, r4
   1152a:	2101      	movs	r1, #1
   1152c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1152e:	0018      	movs	r0, r3
   11530:	4b02      	ldr	r3, [pc, #8]	; (1153c <system_pinmux_pin_set_config+0x2c>)
   11532:	4798      	blx	r3
}
   11534:	bd10      	pop	{r4, pc}
   11536:	46c0      	nop			; (mov r8, r8)
   11538:	41004400 	.word	0x41004400
   1153c:	00011469 	.word	0x00011469

00011540 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   11540:	4770      	bx	lr
	...

00011544 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11544:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11546:	4b05      	ldr	r3, [pc, #20]	; (1155c <system_init+0x18>)
   11548:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1154a:	4b05      	ldr	r3, [pc, #20]	; (11560 <system_init+0x1c>)
   1154c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1154e:	4b05      	ldr	r3, [pc, #20]	; (11564 <system_init+0x20>)
   11550:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11552:	4b05      	ldr	r3, [pc, #20]	; (11568 <system_init+0x24>)
   11554:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11556:	4b05      	ldr	r3, [pc, #20]	; (1156c <system_init+0x28>)
   11558:	4798      	blx	r3
}
   1155a:	bd10      	pop	{r4, pc}
   1155c:	00011081 	.word	0x00011081
   11560:	0000f7bd 	.word	0x0000f7bd
   11564:	00011541 	.word	0x00011541
   11568:	0000f8cd 	.word	0x0000f8cd
   1156c:	00011541 	.word	0x00011541

00011570 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   11570:	4b09      	ldr	r3, [pc, #36]	; (11598 <_tcc_get_inst_index+0x28>)
   11572:	4298      	cmp	r0, r3
   11574:	d00c      	beq.n	11590 <_tcc_get_inst_index+0x20>
   11576:	4b09      	ldr	r3, [pc, #36]	; (1159c <_tcc_get_inst_index+0x2c>)
   11578:	4298      	cmp	r0, r3
   1157a:	d007      	beq.n	1158c <_tcc_get_inst_index+0x1c>
   1157c:	4a08      	ldr	r2, [pc, #32]	; (115a0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1157e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   11580:	4290      	cmp	r0, r2
   11582:	d001      	beq.n	11588 <_tcc_get_inst_index+0x18>
}
   11584:	0018      	movs	r0, r3
   11586:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   11588:	3302      	adds	r3, #2
   1158a:	e002      	b.n	11592 <_tcc_get_inst_index+0x22>
   1158c:	2301      	movs	r3, #1
   1158e:	e000      	b.n	11592 <_tcc_get_inst_index+0x22>
   11590:	2300      	movs	r3, #0
			return i;
   11592:	b2db      	uxtb	r3, r3
   11594:	e7f6      	b.n	11584 <_tcc_get_inst_index+0x14>
   11596:	46c0      	nop			; (mov r8, r8)
   11598:	42002000 	.word	0x42002000
   1159c:	42002400 	.word	0x42002400
   115a0:	42002800 	.word	0x42002800

000115a4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   115a4:	b510      	push	{r4, lr}
   115a6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   115a8:	0008      	movs	r0, r1
   115aa:	4b4f      	ldr	r3, [pc, #316]	; (116e8 <tcc_get_config_defaults+0x144>)
   115ac:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   115ae:	2300      	movs	r3, #0
   115b0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   115b2:	0080      	lsls	r0, r0, #2
   115b4:	4a4d      	ldr	r2, [pc, #308]	; (116ec <tcc_get_config_defaults+0x148>)
   115b6:	5882      	ldr	r2, [r0, r2]
   115b8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   115ba:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   115bc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   115be:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   115c0:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   115c2:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   115c4:	61e3      	str	r3, [r4, #28]
   115c6:	6223      	str	r3, [r4, #32]
   115c8:	6263      	str	r3, [r4, #36]	; 0x24
   115ca:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   115cc:	7523      	strb	r3, [r4, #20]
   115ce:	7563      	strb	r3, [r4, #21]
   115d0:	75a3      	strb	r3, [r4, #22]
   115d2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   115d4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   115d6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   115d8:	7423      	strb	r3, [r4, #16]
   115da:	7463      	strb	r3, [r4, #17]
   115dc:	74a3      	strb	r3, [r4, #18]
   115de:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   115e0:	222c      	movs	r2, #44	; 0x2c
   115e2:	54a3      	strb	r3, [r4, r2]
   115e4:	3201      	adds	r2, #1
   115e6:	54a3      	strb	r3, [r4, r2]
   115e8:	3201      	adds	r2, #1
   115ea:	54a3      	strb	r3, [r4, r2]
   115ec:	3201      	adds	r2, #1
   115ee:	54a3      	strb	r3, [r4, r2]
   115f0:	3201      	adds	r2, #1
   115f2:	54a3      	strb	r3, [r4, r2]
   115f4:	3201      	adds	r2, #1
   115f6:	54a3      	strb	r3, [r4, r2]
   115f8:	3201      	adds	r2, #1
   115fa:	54a3      	strb	r3, [r4, r2]
   115fc:	3201      	adds	r2, #1
   115fe:	54a3      	strb	r3, [r4, r2]
   11600:	3201      	adds	r2, #1
   11602:	54a3      	strb	r3, [r4, r2]
   11604:	3201      	adds	r2, #1
   11606:	54a3      	strb	r3, [r4, r2]
   11608:	3201      	adds	r2, #1
   1160a:	54a3      	strb	r3, [r4, r2]
   1160c:	3201      	adds	r2, #1
   1160e:	54a3      	strb	r3, [r4, r2]
   11610:	3201      	adds	r2, #1
   11612:	54a3      	strb	r3, [r4, r2]
   11614:	3201      	adds	r2, #1
   11616:	54a3      	strb	r3, [r4, r2]
   11618:	3201      	adds	r2, #1
   1161a:	54a3      	strb	r3, [r4, r2]
   1161c:	3201      	adds	r2, #1
   1161e:	54a3      	strb	r3, [r4, r2]
   11620:	3201      	adds	r2, #1
   11622:	54a3      	strb	r3, [r4, r2]
   11624:	3201      	adds	r2, #1
   11626:	54a3      	strb	r3, [r4, r2]
   11628:	3201      	adds	r2, #1
   1162a:	54a3      	strb	r3, [r4, r2]
   1162c:	3201      	adds	r2, #1
   1162e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   11630:	3201      	adds	r2, #1
   11632:	54a3      	strb	r3, [r4, r2]
   11634:	3201      	adds	r2, #1
   11636:	54a3      	strb	r3, [r4, r2]
   11638:	3201      	adds	r2, #1
   1163a:	54a3      	strb	r3, [r4, r2]
   1163c:	3201      	adds	r2, #1
   1163e:	54a3      	strb	r3, [r4, r2]
   11640:	3201      	adds	r2, #1
   11642:	54a3      	strb	r3, [r4, r2]
   11644:	3201      	adds	r2, #1
   11646:	54a3      	strb	r3, [r4, r2]
   11648:	3201      	adds	r2, #1
   1164a:	54a3      	strb	r3, [r4, r2]
   1164c:	3201      	adds	r2, #1
   1164e:	54a3      	strb	r3, [r4, r2]
   11650:	3201      	adds	r2, #1
   11652:	54a3      	strb	r3, [r4, r2]
   11654:	3201      	adds	r2, #1
   11656:	54a3      	strb	r3, [r4, r2]
   11658:	3201      	adds	r2, #1
   1165a:	54a3      	strb	r3, [r4, r2]
   1165c:	3201      	adds	r2, #1
   1165e:	54a3      	strb	r3, [r4, r2]
   11660:	3201      	adds	r2, #1
   11662:	54a3      	strb	r3, [r4, r2]
   11664:	3201      	adds	r2, #1
   11666:	54a3      	strb	r3, [r4, r2]
   11668:	3201      	adds	r2, #1
   1166a:	54a3      	strb	r3, [r4, r2]
   1166c:	3201      	adds	r2, #1
   1166e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   11670:	3201      	adds	r2, #1
   11672:	54a3      	strb	r3, [r4, r2]
   11674:	3201      	adds	r2, #1
   11676:	54a3      	strb	r3, [r4, r2]
   11678:	3201      	adds	r2, #1
   1167a:	54a3      	strb	r3, [r4, r2]
   1167c:	3201      	adds	r2, #1
   1167e:	54a3      	strb	r3, [r4, r2]
   11680:	3201      	adds	r2, #1
   11682:	54a3      	strb	r3, [r4, r2]
   11684:	3201      	adds	r2, #1
   11686:	54a3      	strb	r3, [r4, r2]
   11688:	3201      	adds	r2, #1
   1168a:	54a3      	strb	r3, [r4, r2]
   1168c:	3201      	adds	r2, #1
   1168e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   11690:	3241      	adds	r2, #65	; 0x41
   11692:	54a3      	strb	r3, [r4, r2]
   11694:	65a3      	str	r3, [r4, #88]	; 0x58
   11696:	67a3      	str	r3, [r4, #120]	; 0x78
   11698:	3201      	adds	r2, #1
   1169a:	54a3      	strb	r3, [r4, r2]
   1169c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1169e:	67e3      	str	r3, [r4, #124]	; 0x7c
   116a0:	3201      	adds	r2, #1
   116a2:	54a3      	strb	r3, [r4, r2]
   116a4:	6623      	str	r3, [r4, #96]	; 0x60
   116a6:	3a1a      	subs	r2, #26
   116a8:	50a3      	str	r3, [r4, r2]
   116aa:	321b      	adds	r2, #27
   116ac:	54a3      	strb	r3, [r4, r2]
   116ae:	6663      	str	r3, [r4, #100]	; 0x64
   116b0:	3a17      	subs	r2, #23
   116b2:	50a3      	str	r3, [r4, r2]
   116b4:	3218      	adds	r2, #24
   116b6:	54a3      	strb	r3, [r4, r2]
   116b8:	66a3      	str	r3, [r4, #104]	; 0x68
   116ba:	3a14      	subs	r2, #20
   116bc:	50a3      	str	r3, [r4, r2]
   116be:	3215      	adds	r2, #21
   116c0:	54a3      	strb	r3, [r4, r2]
   116c2:	66e3      	str	r3, [r4, #108]	; 0x6c
   116c4:	3a11      	subs	r2, #17
   116c6:	50a3      	str	r3, [r4, r2]
   116c8:	3212      	adds	r2, #18
   116ca:	54a3      	strb	r3, [r4, r2]
   116cc:	6723      	str	r3, [r4, #112]	; 0x70
   116ce:	3a0e      	subs	r2, #14
   116d0:	50a3      	str	r3, [r4, r2]
   116d2:	320f      	adds	r2, #15
   116d4:	54a3      	strb	r3, [r4, r2]
   116d6:	6763      	str	r3, [r4, #116]	; 0x74
   116d8:	3a0b      	subs	r2, #11
   116da:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   116dc:	2101      	movs	r1, #1
   116de:	320c      	adds	r2, #12
   116e0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   116e2:	3201      	adds	r2, #1
   116e4:	54a3      	strb	r3, [r4, r2]
}
   116e6:	bd10      	pop	{r4, pc}
   116e8:	00011571 	.word	0x00011571
   116ec:	000195f8 	.word	0x000195f8

000116f0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   116f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   116f2:	46de      	mov	lr, fp
   116f4:	4657      	mov	r7, sl
   116f6:	464e      	mov	r6, r9
   116f8:	4645      	mov	r5, r8
   116fa:	b5e0      	push	{r5, r6, r7, lr}
   116fc:	b091      	sub	sp, #68	; 0x44
   116fe:	9001      	str	r0, [sp, #4]
   11700:	000c      	movs	r4, r1
   11702:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   11704:	0008      	movs	r0, r1
   11706:	4bc3      	ldr	r3, [pc, #780]	; (11a14 <tcc_init+0x324>)
   11708:	4798      	blx	r3
   1170a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1170c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1170e:	48c2      	ldr	r0, [pc, #776]	; (11a18 <tcc_init+0x328>)
   11710:	6a02      	ldr	r2, [r0, #32]
   11712:	009e      	lsls	r6, r3, #2
   11714:	4fc1      	ldr	r7, [pc, #772]	; (11a1c <tcc_init+0x32c>)
   11716:	59f7      	ldr	r7, [r6, r7]
   11718:	433a      	orrs	r2, r7
   1171a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1171c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1171e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   11720:	0792      	lsls	r2, r2, #30
   11722:	d506      	bpl.n	11732 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   11724:	b011      	add	sp, #68	; 0x44
   11726:	bc3c      	pop	{r2, r3, r4, r5}
   11728:	4690      	mov	r8, r2
   1172a:	4699      	mov	r9, r3
   1172c:	46a2      	mov	sl, r4
   1172e:	46ab      	mov	fp, r5
   11730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   11732:	6822      	ldr	r2, [r4, #0]
   11734:	2701      	movs	r7, #1
   11736:	4017      	ands	r7, r2
   11738:	d1f4      	bne.n	11724 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1173a:	48b9      	ldr	r0, [pc, #740]	; (11a20 <tcc_init+0x330>)
   1173c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1173e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   11740:	682e      	ldr	r6, [r5, #0]
   11742:	42b2      	cmp	r2, r6
   11744:	d3ee      	bcc.n	11724 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   11746:	686e      	ldr	r6, [r5, #4]
   11748:	42b2      	cmp	r2, r6
   1174a:	d3eb      	bcc.n	11724 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1174c:	69e8      	ldr	r0, [r5, #28]
   1174e:	4282      	cmp	r2, r0
   11750:	d200      	bcs.n	11754 <tcc_init+0x64>
   11752:	e1b9      	b.n	11ac8 <tcc_init+0x3d8>
   11754:	6a28      	ldr	r0, [r5, #32]
   11756:	4282      	cmp	r2, r0
   11758:	d200      	bcs.n	1175c <tcc_init+0x6c>
   1175a:	e1b7      	b.n	11acc <tcc_init+0x3dc>
   1175c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1175e:	4282      	cmp	r2, r0
   11760:	d200      	bcs.n	11764 <tcc_init+0x74>
   11762:	e1b5      	b.n	11ad0 <tcc_init+0x3e0>
   11764:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11766:	4282      	cmp	r2, r0
   11768:	d200      	bcs.n	1176c <tcc_init+0x7c>
   1176a:	e1b3      	b.n	11ad4 <tcc_init+0x3e4>
   1176c:	2298      	movs	r2, #152	; 0x98
   1176e:	4694      	mov	ip, r2
   11770:	44ac      	add	ip, r5
   11772:	4662      	mov	r2, ip
   11774:	9208      	str	r2, [sp, #32]
   11776:	2000      	movs	r0, #0
   11778:	e003      	b.n	11782 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1177a:	3001      	adds	r0, #1
   1177c:	3201      	adds	r2, #1
   1177e:	2808      	cmp	r0, #8
   11780:	d008      	beq.n	11794 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   11782:	7816      	ldrb	r6, [r2, #0]
   11784:	2e00      	cmp	r6, #0
   11786:	d0f8      	beq.n	1177a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   11788:	4ea6      	ldr	r6, [pc, #664]	; (11a24 <tcc_init+0x334>)
   1178a:	5c76      	ldrb	r6, [r6, r1]
   1178c:	4286      	cmp	r6, r0
   1178e:	dcf4      	bgt.n	1177a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   11790:	2017      	movs	r0, #23
   11792:	e7c7      	b.n	11724 <tcc_init+0x34>
   11794:	2200      	movs	r2, #0
   11796:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   11798:	2080      	movs	r0, #128	; 0x80
   1179a:	0440      	lsls	r0, r0, #17
   1179c:	4684      	mov	ip, r0
   1179e:	e002      	b.n	117a6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   117a0:	3201      	adds	r2, #1
   117a2:	2a04      	cmp	r2, #4
   117a4:	d00e      	beq.n	117c4 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   117a6:	18a8      	adds	r0, r5, r2
   117a8:	7c00      	ldrb	r0, [r0, #16]
   117aa:	2801      	cmp	r0, #1
   117ac:	d1f8      	bne.n	117a0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   117ae:	489e      	ldr	r0, [pc, #632]	; (11a28 <tcc_init+0x338>)
   117b0:	5c40      	ldrb	r0, [r0, r1]
   117b2:	4290      	cmp	r0, r2
   117b4:	da00      	bge.n	117b8 <tcc_init+0xc8>
   117b6:	e18f      	b.n	11ad8 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   117b8:	4660      	mov	r0, ip
   117ba:	4090      	lsls	r0, r2
   117bc:	9e02      	ldr	r6, [sp, #8]
   117be:	4306      	orrs	r6, r0
   117c0:	9602      	str	r6, [sp, #8]
   117c2:	e7ed      	b.n	117a0 <tcc_init+0xb0>
	if (config->run_in_standby) {
   117c4:	329d      	adds	r2, #157	; 0x9d
   117c6:	5caa      	ldrb	r2, [r5, r2]
   117c8:	2a00      	cmp	r2, #0
   117ca:	d004      	beq.n	117d6 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   117cc:	2280      	movs	r2, #128	; 0x80
   117ce:	0112      	lsls	r2, r2, #4
   117d0:	9902      	ldr	r1, [sp, #8]
   117d2:	4311      	orrs	r1, r2
   117d4:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   117d6:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   117d8:	1e51      	subs	r1, r2, #1
   117da:	418a      	sbcs	r2, r1
   117dc:	0092      	lsls	r2, r2, #2
   117de:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   117e0:	7a6a      	ldrb	r2, [r5, #9]
   117e2:	2a01      	cmp	r2, #1
   117e4:	d022      	beq.n	1182c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   117e6:	4a90      	ldr	r2, [pc, #576]	; (11a28 <tcc_init+0x338>)
   117e8:	5cd2      	ldrb	r2, [r2, r3]
   117ea:	0011      	movs	r1, r2
   117ec:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   117ee:	2235      	movs	r2, #53	; 0x35
   117f0:	5caa      	ldrb	r2, [r5, r2]
   117f2:	428a      	cmp	r2, r1
   117f4:	d300      	bcc.n	117f8 <tcc_init+0x108>
   117f6:	e179      	b.n	11aec <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   117f8:	212c      	movs	r1, #44	; 0x2c
   117fa:	5c69      	ldrb	r1, [r5, r1]
   117fc:	290f      	cmp	r1, #15
   117fe:	d900      	bls.n	11802 <tcc_init+0x112>
   11800:	e174      	b.n	11aec <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11802:	7b28      	ldrb	r0, [r5, #12]
   11804:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11806:	7ae8      	ldrb	r0, [r5, #11]
   11808:	900b      	str	r0, [sp, #44]	; 0x2c
   1180a:	202d      	movs	r0, #45	; 0x2d
   1180c:	4682      	mov	sl, r0
   1180e:	44aa      	add	sl, r5
   11810:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   11812:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   11814:	ae0e      	add	r6, sp, #56	; 0x38
   11816:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11818:	26c0      	movs	r6, #192	; 0xc0
   1181a:	0136      	lsls	r6, r6, #4
   1181c:	46b1      	mov	r9, r6
   1181e:	4684      	mov	ip, r0
   11820:	46a0      	mov	r8, r4
   11822:	0028      	movs	r0, r5
   11824:	4655      	mov	r5, sl
   11826:	9309      	str	r3, [sp, #36]	; 0x24
   11828:	4682      	mov	sl, r0
   1182a:	e035      	b.n	11898 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1182c:	9906      	ldr	r1, [sp, #24]
   1182e:	4311      	orrs	r1, r2
   11830:	9106      	str	r1, [sp, #24]
   11832:	e7d8      	b.n	117e6 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   11834:	0292      	lsls	r2, r2, #10
   11836:	464f      	mov	r7, r9
   11838:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1183a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1183c:	7919      	ldrb	r1, [r3, #4]
   1183e:	468b      	mov	fp, r1
   11840:	2103      	movs	r1, #3
   11842:	465f      	mov	r7, fp
   11844:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11846:	430a      	orrs	r2, r1
   11848:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1184a:	795a      	ldrb	r2, [r3, #5]
   1184c:	0152      	lsls	r2, r2, #5
   1184e:	2160      	movs	r1, #96	; 0x60
   11850:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11852:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   11854:	7999      	ldrb	r1, [r3, #6]
   11856:	0209      	lsls	r1, r1, #8
   11858:	26c0      	movs	r6, #192	; 0xc0
   1185a:	00b6      	lsls	r6, r6, #2
   1185c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1185e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   11860:	79da      	ldrb	r2, [r3, #7]
   11862:	0312      	lsls	r2, r2, #12
   11864:	21e0      	movs	r1, #224	; 0xe0
   11866:	01c9      	lsls	r1, r1, #7
   11868:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1186a:	4316      	orrs	r6, r2
   1186c:	4334      	orrs	r4, r6
   1186e:	9a03      	ldr	r2, [sp, #12]
   11870:	4314      	orrs	r4, r2
   11872:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   11874:	4662      	mov	r2, ip
   11876:	9907      	ldr	r1, [sp, #28]
   11878:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1187a:	2a04      	cmp	r2, #4
   1187c:	d02a      	beq.n	118d4 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1187e:	7c9a      	ldrb	r2, [r3, #18]
   11880:	9905      	ldr	r1, [sp, #20]
   11882:	4291      	cmp	r1, r2
   11884:	d800      	bhi.n	11888 <tcc_init+0x198>
   11886:	e131      	b.n	11aec <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   11888:	7a59      	ldrb	r1, [r3, #9]
   1188a:	350a      	adds	r5, #10
   1188c:	2304      	movs	r3, #4
   1188e:	469b      	mov	fp, r3
   11890:	44dc      	add	ip, fp
   11892:	290f      	cmp	r1, #15
   11894:	d900      	bls.n	11898 <tcc_init+0x1a8>
   11896:	e129      	b.n	11aec <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   11898:	0609      	lsls	r1, r1, #24
   1189a:	23f0      	movs	r3, #240	; 0xf0
   1189c:	051b      	lsls	r3, r3, #20
   1189e:	4019      	ands	r1, r3
   118a0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   118a2:	782e      	ldrb	r6, [r5, #0]
   118a4:	0436      	lsls	r6, r6, #16
   118a6:	20ff      	movs	r0, #255	; 0xff
   118a8:	0400      	lsls	r0, r0, #16
   118aa:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   118ac:	7868      	ldrb	r0, [r5, #1]
   118ae:	2480      	movs	r4, #128	; 0x80
   118b0:	2800      	cmp	r0, #0
   118b2:	d100      	bne.n	118b6 <tcc_init+0x1c6>
   118b4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   118b6:	7898      	ldrb	r0, [r3, #2]
   118b8:	2708      	movs	r7, #8
   118ba:	9703      	str	r7, [sp, #12]
   118bc:	2800      	cmp	r0, #0
   118be:	d101      	bne.n	118c4 <tcc_init+0x1d4>
   118c0:	9804      	ldr	r0, [sp, #16]
   118c2:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   118c4:	78d8      	ldrb	r0, [r3, #3]
   118c6:	4683      	mov	fp, r0
   118c8:	2010      	movs	r0, #16
   118ca:	465f      	mov	r7, fp
   118cc:	2f00      	cmp	r7, #0
   118ce:	d1b1      	bne.n	11834 <tcc_init+0x144>
   118d0:	9804      	ldr	r0, [sp, #16]
   118d2:	e7af      	b.n	11834 <tcc_init+0x144>
   118d4:	4644      	mov	r4, r8
   118d6:	4655      	mov	r5, sl
   118d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   118da:	4a52      	ldr	r2, [pc, #328]	; (11a24 <tcc_init+0x334>)
   118dc:	5cd2      	ldrb	r2, [r2, r3]
   118de:	4691      	mov	r9, r2
   118e0:	4651      	mov	r1, sl
   118e2:	3150      	adds	r1, #80	; 0x50
   118e4:	4650      	mov	r0, sl
   118e6:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   118e8:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   118ea:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   118ec:	2601      	movs	r6, #1
   118ee:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   118f0:	2602      	movs	r6, #2
   118f2:	36ff      	adds	r6, #255	; 0xff
   118f4:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   118f6:	2680      	movs	r6, #128	; 0x80
   118f8:	0276      	lsls	r6, r6, #9
   118fa:	46b0      	mov	r8, r6
   118fc:	46a4      	mov	ip, r4
   118fe:	001c      	movs	r4, r3
   11900:	464b      	mov	r3, r9
   11902:	e00f      	b.n	11924 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11904:	7806      	ldrb	r6, [r0, #0]
   11906:	2e00      	cmp	r6, #0
   11908:	d007      	beq.n	1191a <tcc_init+0x22a>
			if (i >= ow_num) {
   1190a:	4293      	cmp	r3, r2
   1190c:	d800      	bhi.n	11910 <tcc_init+0x220>
   1190e:	e0e7      	b.n	11ae0 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   11910:	2e02      	cmp	r6, #2
   11912:	d014      	beq.n	1193e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   11914:	4656      	mov	r6, sl
   11916:	4096      	lsls	r6, r2
   11918:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1191a:	3201      	adds	r2, #1
   1191c:	3101      	adds	r1, #1
   1191e:	3002      	adds	r0, #2
   11920:	2a08      	cmp	r2, #8
   11922:	d010      	beq.n	11946 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   11924:	780e      	ldrb	r6, [r1, #0]
   11926:	2e00      	cmp	r6, #0
   11928:	d0ec      	beq.n	11904 <tcc_init+0x214>
			if (i >= ow_num) {
   1192a:	4293      	cmp	r3, r2
   1192c:	d800      	bhi.n	11930 <tcc_init+0x240>
   1192e:	e0d5      	b.n	11adc <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   11930:	4646      	mov	r6, r8
   11932:	4096      	lsls	r6, r2
   11934:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   11936:	7806      	ldrb	r6, [r0, #0]
   11938:	2e00      	cmp	r6, #0
   1193a:	d1e9      	bne.n	11910 <tcc_init+0x220>
   1193c:	e7ed      	b.n	1191a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1193e:	465e      	mov	r6, fp
   11940:	4096      	lsls	r6, r2
   11942:	4337      	orrs	r7, r6
   11944:	e7e9      	b.n	1191a <tcc_init+0x22a>
   11946:	4699      	mov	r9, r3
   11948:	0023      	movs	r3, r4
   1194a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1194c:	7e6a      	ldrb	r2, [r5, #25]
   1194e:	0112      	lsls	r2, r2, #4
   11950:	2130      	movs	r1, #48	; 0x30
   11952:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   11954:	7e28      	ldrb	r0, [r5, #24]
   11956:	2207      	movs	r2, #7
   11958:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1195a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1195c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1195e:	2080      	movs	r0, #128	; 0x80
   11960:	0240      	lsls	r0, r0, #9
   11962:	000e      	movs	r6, r1
   11964:	e002      	b.n	1196c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   11966:	3201      	adds	r2, #1
   11968:	2a04      	cmp	r2, #4
   1196a:	d00b      	beq.n	11984 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1196c:	18a9      	adds	r1, r5, r2
   1196e:	7d09      	ldrb	r1, [r1, #20]
   11970:	2900      	cmp	r1, #0
   11972:	d0f8      	beq.n	11966 <tcc_init+0x276>
			if (n >= cc_num) {
   11974:	9905      	ldr	r1, [sp, #20]
   11976:	4291      	cmp	r1, r2
   11978:	dc00      	bgt.n	1197c <tcc_init+0x28c>
   1197a:	e0b3      	b.n	11ae4 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1197c:	0001      	movs	r1, r0
   1197e:	4091      	lsls	r1, r2
   11980:	430e      	orrs	r6, r1
   11982:	e7f0      	b.n	11966 <tcc_init+0x276>
   11984:	46b2      	mov	sl, r6
   11986:	9801      	ldr	r0, [sp, #4]
   11988:	0002      	movs	r2, r0
   1198a:	3204      	adds	r2, #4
   1198c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1198e:	2100      	movs	r1, #0
   11990:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11992:	4282      	cmp	r2, r0
   11994:	d1fc      	bne.n	11990 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   11996:	2200      	movs	r2, #0
   11998:	9801      	ldr	r0, [sp, #4]
   1199a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1199c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1199e:	0099      	lsls	r1, r3, #2
   119a0:	4a22      	ldr	r2, [pc, #136]	; (11a2c <tcc_init+0x33c>)
   119a2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   119a4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   119a6:	22a0      	movs	r2, #160	; 0xa0
   119a8:	5ca9      	ldrb	r1, [r5, r2]
   119aa:	3a64      	subs	r2, #100	; 0x64
   119ac:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   119ae:	a90d      	add	r1, sp, #52	; 0x34
   119b0:	7aaa      	ldrb	r2, [r5, #10]
   119b2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   119b4:	4a1e      	ldr	r2, [pc, #120]	; (11a30 <tcc_init+0x340>)
   119b6:	5cd6      	ldrb	r6, [r2, r3]
   119b8:	0030      	movs	r0, r6
   119ba:	4b1e      	ldr	r3, [pc, #120]	; (11a34 <tcc_init+0x344>)
   119bc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   119be:	0030      	movs	r0, r6
   119c0:	4b1d      	ldr	r3, [pc, #116]	; (11a38 <tcc_init+0x348>)
   119c2:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   119c4:	464b      	mov	r3, r9
   119c6:	2b00      	cmp	r3, #0
   119c8:	dd3c      	ble.n	11a44 <tcc_init+0x354>
   119ca:	002e      	movs	r6, r5
   119cc:	3658      	adds	r6, #88	; 0x58
   119ce:	3398      	adds	r3, #152	; 0x98
   119d0:	4698      	mov	r8, r3
   119d2:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   119d4:	2301      	movs	r3, #1
   119d6:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   119d8:	46ab      	mov	fp, r5
   119da:	4645      	mov	r5, r8
   119dc:	46a0      	mov	r8, r4
   119de:	9c08      	ldr	r4, [sp, #32]
   119e0:	e003      	b.n	119ea <tcc_init+0x2fa>
   119e2:	3401      	adds	r4, #1
   119e4:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   119e6:	42ac      	cmp	r4, r5
   119e8:	d02a      	beq.n	11a40 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   119ea:	7823      	ldrb	r3, [r4, #0]
   119ec:	2b00      	cmp	r3, #0
   119ee:	d0f8      	beq.n	119e2 <tcc_init+0x2f2>
   119f0:	ab0c      	add	r3, sp, #48	; 0x30
   119f2:	464a      	mov	r2, r9
   119f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   119f6:	2300      	movs	r3, #0
   119f8:	aa0c      	add	r2, sp, #48	; 0x30
   119fa:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   119fc:	0013      	movs	r3, r2
   119fe:	2220      	movs	r2, #32
   11a00:	18b2      	adds	r2, r6, r2
   11a02:	7812      	ldrb	r2, [r2, #0]
   11a04:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   11a06:	464a      	mov	r2, r9
   11a08:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   11a0a:	7830      	ldrb	r0, [r6, #0]
   11a0c:	0019      	movs	r1, r3
   11a0e:	4b0b      	ldr	r3, [pc, #44]	; (11a3c <tcc_init+0x34c>)
   11a10:	4798      	blx	r3
   11a12:	e7e6      	b.n	119e2 <tcc_init+0x2f2>
   11a14:	00011571 	.word	0x00011571
   11a18:	40000400 	.word	0x40000400
   11a1c:	000195e4 	.word	0x000195e4
   11a20:	000195f8 	.word	0x000195f8
   11a24:	00019604 	.word	0x00019604
   11a28:	000195f0 	.word	0x000195f0
   11a2c:	200014cc 	.word	0x200014cc
   11a30:	000195f4 	.word	0x000195f4
   11a34:	00011419 	.word	0x00011419
   11a38:	0001138d 	.word	0x0001138d
   11a3c:	00011511 	.word	0x00011511
   11a40:	4644      	mov	r4, r8
   11a42:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   11a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11a46:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   11a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11a4a:	0212      	lsls	r2, r2, #8
   11a4c:	4313      	orrs	r3, r2
   11a4e:	9a02      	ldr	r2, [sp, #8]
   11a50:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   11a52:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11a54:	2204      	movs	r2, #4
   11a56:	68a3      	ldr	r3, [r4, #8]
   11a58:	421a      	tst	r2, r3
   11a5a:	d1fc      	bne.n	11a56 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   11a5c:	23ff      	movs	r3, #255	; 0xff
   11a5e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11a60:	2204      	movs	r2, #4
   11a62:	68a3      	ldr	r3, [r4, #8]
   11a64:	421a      	tst	r2, r3
   11a66:	d1fc      	bne.n	11a62 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11a68:	466b      	mov	r3, sp
   11a6a:	7e1b      	ldrb	r3, [r3, #24]
   11a6c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   11a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11a70:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11a74:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11a76:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11a78:	4a1d      	ldr	r2, [pc, #116]	; (11af0 <tcc_init+0x400>)
   11a7a:	68a3      	ldr	r3, [r4, #8]
   11a7c:	4213      	tst	r3, r2
   11a7e:	d1fc      	bne.n	11a7a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11a80:	4653      	mov	r3, sl
   11a82:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11a84:	2210      	movs	r2, #16
   11a86:	68a3      	ldr	r3, [r4, #8]
   11a88:	421a      	tst	r2, r3
   11a8a:	d1fc      	bne.n	11a86 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   11a8c:	682b      	ldr	r3, [r5, #0]
   11a8e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11a90:	4a18      	ldr	r2, [pc, #96]	; (11af4 <tcc_init+0x404>)
   11a92:	68a3      	ldr	r3, [r4, #8]
   11a94:	4213      	tst	r3, r2
   11a96:	d1fc      	bne.n	11a92 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11a98:	686b      	ldr	r3, [r5, #4]
   11a9a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11a9c:	9805      	ldr	r0, [sp, #20]
   11a9e:	2800      	cmp	r0, #0
   11aa0:	dd22      	ble.n	11ae8 <tcc_init+0x3f8>
   11aa2:	351c      	adds	r5, #28
   11aa4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11aa6:	4e14      	ldr	r6, [pc, #80]	; (11af8 <tcc_init+0x408>)
   11aa8:	0032      	movs	r2, r6
   11aaa:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   11aac:	68a3      	ldr	r3, [r4, #8]
   11aae:	421a      	tst	r2, r3
   11ab0:	d1fc      	bne.n	11aac <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11ab2:	cd04      	ldmia	r5!, {r2}
   11ab4:	000b      	movs	r3, r1
   11ab6:	3310      	adds	r3, #16
   11ab8:	009b      	lsls	r3, r3, #2
   11aba:	18e3      	adds	r3, r4, r3
   11abc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   11abe:	3101      	adds	r1, #1
   11ac0:	4288      	cmp	r0, r1
   11ac2:	dcf1      	bgt.n	11aa8 <tcc_init+0x3b8>
	return STATUS_OK;
   11ac4:	2000      	movs	r0, #0
   11ac6:	e62d      	b.n	11724 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   11ac8:	2017      	movs	r0, #23
   11aca:	e62b      	b.n	11724 <tcc_init+0x34>
   11acc:	2017      	movs	r0, #23
   11ace:	e629      	b.n	11724 <tcc_init+0x34>
   11ad0:	2017      	movs	r0, #23
   11ad2:	e627      	b.n	11724 <tcc_init+0x34>
   11ad4:	2017      	movs	r0, #23
   11ad6:	e625      	b.n	11724 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11ad8:	2017      	movs	r0, #23
   11ada:	e623      	b.n	11724 <tcc_init+0x34>
			if (i >= ow_num) {
   11adc:	2017      	movs	r0, #23
   11ade:	e621      	b.n	11724 <tcc_init+0x34>
			if (i >= ow_num) {
   11ae0:	2017      	movs	r0, #23
   11ae2:	e61f      	b.n	11724 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11ae4:	2017      	movs	r0, #23
   11ae6:	e61d      	b.n	11724 <tcc_init+0x34>
	return STATUS_OK;
   11ae8:	2000      	movs	r0, #0
   11aea:	e61b      	b.n	11724 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11aec:	2017      	movs	r0, #23
   11aee:	e619      	b.n	11724 <tcc_init+0x34>
   11af0:	00020040 	.word	0x00020040
   11af4:	00040080 	.word	0x00040080
   11af8:	00080100 	.word	0x00080100

00011afc <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   11afc:	0092      	lsls	r2, r2, #2
   11afe:	1883      	adds	r3, r0, r2
   11b00:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   11b02:	4b03      	ldr	r3, [pc, #12]	; (11b10 <tcc_register_callback+0x14>)
   11b04:	58d3      	ldr	r3, [r2, r3]
   11b06:	6b42      	ldr	r2, [r0, #52]	; 0x34
   11b08:	4313      	orrs	r3, r2
   11b0a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   11b0c:	2000      	movs	r0, #0
   11b0e:	4770      	bx	lr
   11b10:	00019608 	.word	0x00019608

00011b14 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   11b14:	b570      	push	{r4, r5, r6, lr}
   11b16:	0004      	movs	r4, r0
   11b18:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   11b1a:	6800      	ldr	r0, [r0, #0]
   11b1c:	4b09      	ldr	r3, [pc, #36]	; (11b44 <tcc_enable_callback+0x30>)
   11b1e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   11b20:	4b09      	ldr	r3, [pc, #36]	; (11b48 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11b22:	5c1b      	ldrb	r3, [r3, r0]
   11b24:	221f      	movs	r2, #31
   11b26:	401a      	ands	r2, r3
   11b28:	2301      	movs	r3, #1
   11b2a:	4093      	lsls	r3, r2
   11b2c:	4a07      	ldr	r2, [pc, #28]	; (11b4c <tcc_enable_callback+0x38>)
   11b2e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   11b30:	00ad      	lsls	r5, r5, #2
   11b32:	4b07      	ldr	r3, [pc, #28]	; (11b50 <tcc_enable_callback+0x3c>)
   11b34:	58ea      	ldr	r2, [r5, r3]
   11b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11b38:	4313      	orrs	r3, r2
   11b3a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   11b3c:	6823      	ldr	r3, [r4, #0]
   11b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
   11b40:	bd70      	pop	{r4, r5, r6, pc}
   11b42:	46c0      	nop			; (mov r8, r8)
   11b44:	00011571 	.word	0x00011571
   11b48:	00019638 	.word	0x00019638
   11b4c:	e000e100 	.word	0xe000e100
   11b50:	00019608 	.word	0x00019608

00011b54 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   11b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b56:	46c6      	mov	lr, r8
   11b58:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   11b5a:	0080      	lsls	r0, r0, #2
   11b5c:	4b0e      	ldr	r3, [pc, #56]	; (11b98 <_tcc_interrupt_handler+0x44>)
   11b5e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   11b60:	683b      	ldr	r3, [r7, #0]
   11b62:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   11b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11b68:	4013      	ands	r3, r2
   11b6a:	401e      	ands	r6, r3
   11b6c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11b6e:	4b0b      	ldr	r3, [pc, #44]	; (11b9c <_tcc_interrupt_handler+0x48>)
   11b70:	4698      	mov	r8, r3
   11b72:	e002      	b.n	11b7a <_tcc_interrupt_handler+0x26>
   11b74:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11b76:	2c30      	cmp	r4, #48	; 0x30
   11b78:	d00a      	beq.n	11b90 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   11b7a:	4643      	mov	r3, r8
   11b7c:	58e5      	ldr	r5, [r4, r3]
   11b7e:	4235      	tst	r5, r6
   11b80:	d0f8      	beq.n	11b74 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   11b82:	193b      	adds	r3, r7, r4
   11b84:	685b      	ldr	r3, [r3, #4]
   11b86:	0038      	movs	r0, r7
   11b88:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   11b8a:	683b      	ldr	r3, [r7, #0]
   11b8c:	62dd      	str	r5, [r3, #44]	; 0x2c
   11b8e:	e7f1      	b.n	11b74 <_tcc_interrupt_handler+0x20>
		}
	}
}
   11b90:	bc04      	pop	{r2}
   11b92:	4690      	mov	r8, r2
   11b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	200014cc 	.word	0x200014cc
   11b9c:	00019608 	.word	0x00019608

00011ba0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   11ba0:	b510      	push	{r4, lr}
   11ba2:	2000      	movs	r0, #0
   11ba4:	4b01      	ldr	r3, [pc, #4]	; (11bac <TCC0_Handler+0xc>)
   11ba6:	4798      	blx	r3
   11ba8:	bd10      	pop	{r4, pc}
   11baa:	46c0      	nop			; (mov r8, r8)
   11bac:	00011b55 	.word	0x00011b55

00011bb0 <TCC1_Handler>:
   11bb0:	b510      	push	{r4, lr}
   11bb2:	2001      	movs	r0, #1
   11bb4:	4b01      	ldr	r3, [pc, #4]	; (11bbc <TCC1_Handler+0xc>)
   11bb6:	4798      	blx	r3
   11bb8:	bd10      	pop	{r4, pc}
   11bba:	46c0      	nop			; (mov r8, r8)
   11bbc:	00011b55 	.word	0x00011b55

00011bc0 <TCC2_Handler>:
   11bc0:	b510      	push	{r4, lr}
   11bc2:	2002      	movs	r0, #2
   11bc4:	4b01      	ldr	r3, [pc, #4]	; (11bcc <TCC2_Handler+0xc>)
   11bc6:	4798      	blx	r3
   11bc8:	bd10      	pop	{r4, pc}
   11bca:	46c0      	nop			; (mov r8, r8)
   11bcc:	00011b55 	.word	0x00011b55

00011bd0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11bd0:	e7fe      	b.n	11bd0 <Dummy_Handler>
	...

00011bd4 <Reset_Handler>:
{
   11bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11bd6:	4a2a      	ldr	r2, [pc, #168]	; (11c80 <Reset_Handler+0xac>)
   11bd8:	4b2a      	ldr	r3, [pc, #168]	; (11c84 <Reset_Handler+0xb0>)
   11bda:	429a      	cmp	r2, r3
   11bdc:	d011      	beq.n	11c02 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   11bde:	001a      	movs	r2, r3
   11be0:	4b29      	ldr	r3, [pc, #164]	; (11c88 <Reset_Handler+0xb4>)
   11be2:	429a      	cmp	r2, r3
   11be4:	d20d      	bcs.n	11c02 <Reset_Handler+0x2e>
   11be6:	4a29      	ldr	r2, [pc, #164]	; (11c8c <Reset_Handler+0xb8>)
   11be8:	3303      	adds	r3, #3
   11bea:	1a9b      	subs	r3, r3, r2
   11bec:	089b      	lsrs	r3, r3, #2
   11bee:	3301      	adds	r3, #1
   11bf0:	009b      	lsls	r3, r3, #2
   11bf2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   11bf4:	4823      	ldr	r0, [pc, #140]	; (11c84 <Reset_Handler+0xb0>)
   11bf6:	4922      	ldr	r1, [pc, #136]	; (11c80 <Reset_Handler+0xac>)
   11bf8:	588c      	ldr	r4, [r1, r2]
   11bfa:	5084      	str	r4, [r0, r2]
   11bfc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   11bfe:	429a      	cmp	r2, r3
   11c00:	d1fa      	bne.n	11bf8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   11c02:	4a23      	ldr	r2, [pc, #140]	; (11c90 <Reset_Handler+0xbc>)
   11c04:	4b23      	ldr	r3, [pc, #140]	; (11c94 <Reset_Handler+0xc0>)
   11c06:	429a      	cmp	r2, r3
   11c08:	d20a      	bcs.n	11c20 <Reset_Handler+0x4c>
   11c0a:	43d3      	mvns	r3, r2
   11c0c:	4921      	ldr	r1, [pc, #132]	; (11c94 <Reset_Handler+0xc0>)
   11c0e:	185b      	adds	r3, r3, r1
   11c10:	2103      	movs	r1, #3
   11c12:	438b      	bics	r3, r1
   11c14:	3304      	adds	r3, #4
   11c16:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   11c18:	2100      	movs	r1, #0
   11c1a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   11c1c:	4293      	cmp	r3, r2
   11c1e:	d1fc      	bne.n	11c1a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11c20:	4a1d      	ldr	r2, [pc, #116]	; (11c98 <Reset_Handler+0xc4>)
   11c22:	21ff      	movs	r1, #255	; 0xff
   11c24:	4b1d      	ldr	r3, [pc, #116]	; (11c9c <Reset_Handler+0xc8>)
   11c26:	438b      	bics	r3, r1
   11c28:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11c2a:	39fd      	subs	r1, #253	; 0xfd
   11c2c:	2390      	movs	r3, #144	; 0x90
   11c2e:	005b      	lsls	r3, r3, #1
   11c30:	4a1b      	ldr	r2, [pc, #108]	; (11ca0 <Reset_Handler+0xcc>)
   11c32:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11c34:	4a1b      	ldr	r2, [pc, #108]	; (11ca4 <Reset_Handler+0xd0>)
   11c36:	78d3      	ldrb	r3, [r2, #3]
   11c38:	2503      	movs	r5, #3
   11c3a:	43ab      	bics	r3, r5
   11c3c:	2402      	movs	r4, #2
   11c3e:	4323      	orrs	r3, r4
   11c40:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11c42:	78d3      	ldrb	r3, [r2, #3]
   11c44:	270c      	movs	r7, #12
   11c46:	43bb      	bics	r3, r7
   11c48:	2608      	movs	r6, #8
   11c4a:	4333      	orrs	r3, r6
   11c4c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   11c4e:	4b16      	ldr	r3, [pc, #88]	; (11ca8 <Reset_Handler+0xd4>)
   11c50:	7b98      	ldrb	r0, [r3, #14]
   11c52:	2230      	movs	r2, #48	; 0x30
   11c54:	4390      	bics	r0, r2
   11c56:	2220      	movs	r2, #32
   11c58:	4310      	orrs	r0, r2
   11c5a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11c5c:	7b99      	ldrb	r1, [r3, #14]
   11c5e:	43b9      	bics	r1, r7
   11c60:	4331      	orrs	r1, r6
   11c62:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11c64:	7b9a      	ldrb	r2, [r3, #14]
   11c66:	43aa      	bics	r2, r5
   11c68:	4322      	orrs	r2, r4
   11c6a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11c6c:	4a0f      	ldr	r2, [pc, #60]	; (11cac <Reset_Handler+0xd8>)
   11c6e:	6853      	ldr	r3, [r2, #4]
   11c70:	2180      	movs	r1, #128	; 0x80
   11c72:	430b      	orrs	r3, r1
   11c74:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11c76:	4b0e      	ldr	r3, [pc, #56]	; (11cb0 <Reset_Handler+0xdc>)
   11c78:	4798      	blx	r3
        main();
   11c7a:	4b0e      	ldr	r3, [pc, #56]	; (11cb4 <Reset_Handler+0xe0>)
   11c7c:	4798      	blx	r3
   11c7e:	e7fe      	b.n	11c7e <Reset_Handler+0xaa>
   11c80:	0001a91c 	.word	0x0001a91c
   11c84:	20000000 	.word	0x20000000
   11c88:	20000320 	.word	0x20000320
   11c8c:	20000004 	.word	0x20000004
   11c90:	20000320 	.word	0x20000320
   11c94:	2000163c 	.word	0x2000163c
   11c98:	e000ed00 	.word	0xe000ed00
   11c9c:	0000b000 	.word	0x0000b000
   11ca0:	41007000 	.word	0x41007000
   11ca4:	41005000 	.word	0x41005000
   11ca8:	41004800 	.word	0x41004800
   11cac:	41004000 	.word	0x41004000
   11cb0:	00016f09 	.word	0x00016f09
   11cb4:	0001673d 	.word	0x0001673d

00011cb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cba:	46c6      	mov	lr, r8
   11cbc:	b500      	push	{lr}
   11cbe:	000c      	movs	r4, r1
   11cc0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   11cc2:	2800      	cmp	r0, #0
   11cc4:	d10f      	bne.n	11ce6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   11cc6:	2a00      	cmp	r2, #0
   11cc8:	dd11      	ble.n	11cee <_read+0x36>
   11cca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   11ccc:	4e09      	ldr	r6, [pc, #36]	; (11cf4 <_read+0x3c>)
   11cce:	4d0a      	ldr	r5, [pc, #40]	; (11cf8 <_read+0x40>)
   11cd0:	6830      	ldr	r0, [r6, #0]
   11cd2:	0021      	movs	r1, r4
   11cd4:	682b      	ldr	r3, [r5, #0]
   11cd6:	4798      	blx	r3
		ptr++;
   11cd8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   11cda:	42bc      	cmp	r4, r7
   11cdc:	d1f8      	bne.n	11cd0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   11cde:	4640      	mov	r0, r8
   11ce0:	bc04      	pop	{r2}
   11ce2:	4690      	mov	r8, r2
   11ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   11ce6:	2301      	movs	r3, #1
   11ce8:	425b      	negs	r3, r3
   11cea:	4698      	mov	r8, r3
   11cec:	e7f7      	b.n	11cde <_read+0x26>
	for (; len > 0; --len) {
   11cee:	4680      	mov	r8, r0
   11cf0:	e7f5      	b.n	11cde <_read+0x26>
   11cf2:	46c0      	nop			; (mov r8, r8)
   11cf4:	200014e0 	.word	0x200014e0
   11cf8:	200014d8 	.word	0x200014d8

00011cfc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   11cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cfe:	46c6      	mov	lr, r8
   11d00:	b500      	push	{lr}
   11d02:	000e      	movs	r6, r1
   11d04:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   11d06:	3801      	subs	r0, #1
   11d08:	2802      	cmp	r0, #2
   11d0a:	d810      	bhi.n	11d2e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   11d0c:	2a00      	cmp	r2, #0
   11d0e:	d011      	beq.n	11d34 <_write+0x38>
   11d10:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   11d12:	4b0c      	ldr	r3, [pc, #48]	; (11d44 <_write+0x48>)
   11d14:	4698      	mov	r8, r3
   11d16:	4f0c      	ldr	r7, [pc, #48]	; (11d48 <_write+0x4c>)
   11d18:	4643      	mov	r3, r8
   11d1a:	6818      	ldr	r0, [r3, #0]
   11d1c:	5d31      	ldrb	r1, [r6, r4]
   11d1e:	683b      	ldr	r3, [r7, #0]
   11d20:	4798      	blx	r3
   11d22:	2800      	cmp	r0, #0
   11d24:	db08      	blt.n	11d38 <_write+0x3c>
			return -1;
		}
		++nChars;
   11d26:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   11d28:	42a5      	cmp	r5, r4
   11d2a:	d1f5      	bne.n	11d18 <_write+0x1c>
   11d2c:	e006      	b.n	11d3c <_write+0x40>
		return -1;
   11d2e:	2401      	movs	r4, #1
   11d30:	4264      	negs	r4, r4
   11d32:	e003      	b.n	11d3c <_write+0x40>
	for (; len != 0; --len) {
   11d34:	0014      	movs	r4, r2
   11d36:	e001      	b.n	11d3c <_write+0x40>
			return -1;
   11d38:	2401      	movs	r4, #1
   11d3a:	4264      	negs	r4, r4
	}
	return nChars;
}
   11d3c:	0020      	movs	r0, r4
   11d3e:	bc04      	pop	{r2}
   11d40:	4690      	mov	r8, r2
   11d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d44:	200014e0 	.word	0x200014e0
   11d48:	200014dc 	.word	0x200014dc

00011d4c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   11d4c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   11d4e:	4a06      	ldr	r2, [pc, #24]	; (11d68 <_sbrk+0x1c>)
   11d50:	6812      	ldr	r2, [r2, #0]
   11d52:	2a00      	cmp	r2, #0
   11d54:	d004      	beq.n	11d60 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   11d56:	4a04      	ldr	r2, [pc, #16]	; (11d68 <_sbrk+0x1c>)
   11d58:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   11d5a:	18c3      	adds	r3, r0, r3
   11d5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   11d5e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   11d60:	4902      	ldr	r1, [pc, #8]	; (11d6c <_sbrk+0x20>)
   11d62:	4a01      	ldr	r2, [pc, #4]	; (11d68 <_sbrk+0x1c>)
   11d64:	6011      	str	r1, [r2, #0]
   11d66:	e7f6      	b.n	11d56 <_sbrk+0xa>
   11d68:	20000414 	.word	0x20000414
   11d6c:	20003640 	.word	0x20003640

00011d70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   11d70:	2001      	movs	r0, #1
   11d72:	4240      	negs	r0, r0
   11d74:	4770      	bx	lr

00011d76 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   11d76:	2380      	movs	r3, #128	; 0x80
   11d78:	019b      	lsls	r3, r3, #6
   11d7a:	604b      	str	r3, [r1, #4]

	return 0;
}
   11d7c:	2000      	movs	r0, #0
   11d7e:	4770      	bx	lr

00011d80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   11d80:	2001      	movs	r0, #1
   11d82:	4770      	bx	lr

00011d84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   11d84:	2000      	movs	r0, #0
   11d86:	4770      	bx	lr

00011d88 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11d88:	b530      	push	{r4, r5, lr}
   11d8a:	b087      	sub	sp, #28
   11d8c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   11d8e:	aa01      	add	r2, sp, #4
   11d90:	23a0      	movs	r3, #160	; 0xa0
   11d92:	011b      	lsls	r3, r3, #4
   11d94:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   11d96:	2300      	movs	r3, #0
   11d98:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   11d9a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   11d9c:	21fa      	movs	r1, #250	; 0xfa
   11d9e:	00c9      	lsls	r1, r1, #3
   11da0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   11da2:	2101      	movs	r1, #1
   11da4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   11da6:	2004      	movs	r0, #4
   11da8:	7210      	strb	r0, [r2, #8]
   11daa:	7253      	strb	r3, [r2, #9]
   11dac:	7293      	strb	r3, [r2, #10]
   11dae:	72d3      	strb	r3, [r2, #11]
   11db0:	7311      	strb	r1, [r2, #12]
   11db2:	7351      	strb	r1, [r2, #13]
   11db4:	4b14      	ldr	r3, [pc, #80]	; (11e08 <disk_initialize+0x80>)
   11db6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11db8:	2306      	movs	r3, #6
   11dba:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   11dbc:	4d13      	ldr	r5, [pc, #76]	; (11e0c <disk_initialize+0x84>)
   11dbe:	4914      	ldr	r1, [pc, #80]	; (11e10 <disk_initialize+0x88>)
   11dc0:	0028      	movs	r0, r5
   11dc2:	4b14      	ldr	r3, [pc, #80]	; (11e14 <disk_initialize+0x8c>)
   11dc4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   11dc6:	0028      	movs	r0, r5
   11dc8:	4b13      	ldr	r3, [pc, #76]	; (11e18 <disk_initialize+0x90>)
   11dca:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   11dcc:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   11dce:	2c01      	cmp	r4, #1
   11dd0:	d901      	bls.n	11dd6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   11dd2:	b007      	add	sp, #28
   11dd4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   11dd6:	0020      	movs	r0, r4
   11dd8:	4b10      	ldr	r3, [pc, #64]	; (11e1c <disk_initialize+0x94>)
   11dda:	4798      	blx	r3
   11ddc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   11dde:	2803      	cmp	r0, #3
   11de0:	d106      	bne.n	11df0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   11de2:	0020      	movs	r0, r4
   11de4:	4b0d      	ldr	r3, [pc, #52]	; (11e1c <disk_initialize+0x94>)
   11de6:	4798      	blx	r3
   11de8:	0003      	movs	r3, r0
		return STA_NOINIT;
   11dea:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   11dec:	2b03      	cmp	r3, #3
   11dee:	d0f0      	beq.n	11dd2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   11df0:	2b00      	cmp	r3, #0
   11df2:	d106      	bne.n	11e02 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   11df4:	0020      	movs	r0, r4
   11df6:	4b0a      	ldr	r3, [pc, #40]	; (11e20 <disk_initialize+0x98>)
   11df8:	4798      	blx	r3
	return 0;
   11dfa:	1e43      	subs	r3, r0, #1
   11dfc:	4198      	sbcs	r0, r3
   11dfe:	0080      	lsls	r0, r0, #2
   11e00:	e7e7      	b.n	11dd2 <disk_initialize+0x4a>
		return STA_NOINIT;
   11e02:	2001      	movs	r0, #1
   11e04:	e7e5      	b.n	11dd2 <disk_initialize+0x4a>
   11e06:	46c0      	nop			; (mov r8, r8)
   11e08:	000007de 	.word	0x000007de
   11e0c:	200014e4 	.word	0x200014e4
   11e10:	40001400 	.word	0x40001400
   11e14:	0000fb4d 	.word	0x0000fb4d
   11e18:	0000f9e9 	.word	0x0000f9e9
   11e1c:	0000f6b9 	.word	0x0000f6b9
   11e20:	0000f6f5 	.word	0x0000f6f5

00011e24 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   11e24:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   11e26:	4b05      	ldr	r3, [pc, #20]	; (11e3c <disk_status+0x18>)
   11e28:	4798      	blx	r3
   11e2a:	1e03      	subs	r3, r0, #0
   11e2c:	d004      	beq.n	11e38 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   11e2e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   11e30:	2b02      	cmp	r3, #2
   11e32:	d000      	beq.n	11e36 <disk_status+0x12>
	default:
		return STA_NOINIT;
   11e34:	3802      	subs	r0, #2
	}
}
   11e36:	bd10      	pop	{r4, pc}
		return 0;
   11e38:	2000      	movs	r0, #0
   11e3a:	e7fc      	b.n	11e36 <disk_status+0x12>
   11e3c:	0000f6b9 	.word	0x0000f6b9

00011e40 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   11e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e42:	46de      	mov	lr, fp
   11e44:	464f      	mov	r7, r9
   11e46:	4646      	mov	r6, r8
   11e48:	b5c0      	push	{r6, r7, lr}
   11e4a:	b084      	sub	sp, #16
   11e4c:	9001      	str	r0, [sp, #4]
   11e4e:	000d      	movs	r5, r1
   11e50:	0014      	movs	r4, r2
   11e52:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   11e54:	4b18      	ldr	r3, [pc, #96]	; (11eb8 <disk_read+0x78>)
   11e56:	4798      	blx	r3
   11e58:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   11e5a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   11e5c:	2e00      	cmp	r6, #0
   11e5e:	d105      	bne.n	11e6c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11e60:	b004      	add	sp, #16
   11e62:	bc1c      	pop	{r2, r3, r4}
   11e64:	4690      	mov	r8, r2
   11e66:	4699      	mov	r9, r3
   11e68:	46a3      	mov	fp, r4
   11e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   11e6c:	a903      	add	r1, sp, #12
   11e6e:	9801      	ldr	r0, [sp, #4]
   11e70:	4b12      	ldr	r3, [pc, #72]	; (11ebc <disk_read+0x7c>)
   11e72:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11e74:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   11e76:	0032      	movs	r2, r6
   11e78:	437a      	muls	r2, r7
   11e7a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   11e7c:	9b03      	ldr	r3, [sp, #12]
   11e7e:	3301      	adds	r3, #1
   11e80:	4373      	muls	r3, r6
		return RES_PARERR;
   11e82:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   11e84:	429a      	cmp	r2, r3
   11e86:	d8eb      	bhi.n	11e60 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   11e88:	2f00      	cmp	r7, #0
   11e8a:	d011      	beq.n	11eb0 <disk_read+0x70>
   11e8c:	0273      	lsls	r3, r6, #9
   11e8e:	4698      	mov	r8, r3
   11e90:	1c7b      	adds	r3, r7, #1
   11e92:	469b      	mov	fp, r3
   11e94:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   11e96:	4e0a      	ldr	r6, [pc, #40]	; (11ec0 <disk_read+0x80>)
   11e98:	002a      	movs	r2, r5
   11e9a:	0021      	movs	r1, r4
   11e9c:	9801      	ldr	r0, [sp, #4]
   11e9e:	47b0      	blx	r6
   11ea0:	2800      	cmp	r0, #0
   11ea2:	d107      	bne.n	11eb4 <disk_read+0x74>
   11ea4:	3701      	adds	r7, #1
   11ea6:	444c      	add	r4, r9
   11ea8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   11eaa:	455f      	cmp	r7, fp
   11eac:	d1f4      	bne.n	11e98 <disk_read+0x58>
   11eae:	e7d7      	b.n	11e60 <disk_read+0x20>
	return RES_OK;
   11eb0:	2000      	movs	r0, #0
   11eb2:	e7d5      	b.n	11e60 <disk_read+0x20>
			return RES_ERROR;
   11eb4:	2001      	movs	r0, #1
   11eb6:	e7d3      	b.n	11e60 <disk_read+0x20>
   11eb8:	0000f6ed 	.word	0x0000f6ed
   11ebc:	0000f6d1 	.word	0x0000f6d1
   11ec0:	0000f70d 	.word	0x0000f70d

00011ec4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   11ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ec6:	46de      	mov	lr, fp
   11ec8:	464f      	mov	r7, r9
   11eca:	4646      	mov	r6, r8
   11ecc:	b5c0      	push	{r6, r7, lr}
   11ece:	b084      	sub	sp, #16
   11ed0:	9001      	str	r0, [sp, #4]
   11ed2:	000d      	movs	r5, r1
   11ed4:	0014      	movs	r4, r2
   11ed6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   11ed8:	4b18      	ldr	r3, [pc, #96]	; (11f3c <disk_write+0x78>)
   11eda:	4798      	blx	r3
   11edc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   11ede:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   11ee0:	2e00      	cmp	r6, #0
   11ee2:	d105      	bne.n	11ef0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11ee4:	b004      	add	sp, #16
   11ee6:	bc1c      	pop	{r2, r3, r4}
   11ee8:	4690      	mov	r8, r2
   11eea:	4699      	mov	r9, r3
   11eec:	46a3      	mov	fp, r4
   11eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   11ef0:	a903      	add	r1, sp, #12
   11ef2:	9801      	ldr	r0, [sp, #4]
   11ef4:	4b12      	ldr	r3, [pc, #72]	; (11f40 <disk_write+0x7c>)
   11ef6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11ef8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   11efa:	0032      	movs	r2, r6
   11efc:	437a      	muls	r2, r7
   11efe:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   11f00:	9b03      	ldr	r3, [sp, #12]
   11f02:	3301      	adds	r3, #1
   11f04:	4373      	muls	r3, r6
		return RES_PARERR;
   11f06:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   11f08:	429a      	cmp	r2, r3
   11f0a:	d8eb      	bhi.n	11ee4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   11f0c:	2f00      	cmp	r7, #0
   11f0e:	d011      	beq.n	11f34 <disk_write+0x70>
   11f10:	0273      	lsls	r3, r6, #9
   11f12:	4698      	mov	r8, r3
   11f14:	1c7b      	adds	r3, r7, #1
   11f16:	469b      	mov	fp, r3
   11f18:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   11f1a:	4e0a      	ldr	r6, [pc, #40]	; (11f44 <disk_write+0x80>)
   11f1c:	002a      	movs	r2, r5
   11f1e:	0021      	movs	r1, r4
   11f20:	9801      	ldr	r0, [sp, #4]
   11f22:	47b0      	blx	r6
   11f24:	2800      	cmp	r0, #0
   11f26:	d107      	bne.n	11f38 <disk_write+0x74>
   11f28:	3701      	adds	r7, #1
   11f2a:	444c      	add	r4, r9
   11f2c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   11f2e:	455f      	cmp	r7, fp
   11f30:	d1f4      	bne.n	11f1c <disk_write+0x58>
   11f32:	e7d7      	b.n	11ee4 <disk_write+0x20>
	return RES_OK;
   11f34:	2000      	movs	r0, #0
   11f36:	e7d5      	b.n	11ee4 <disk_write+0x20>
			return RES_ERROR;
   11f38:	2001      	movs	r0, #1
   11f3a:	e7d3      	b.n	11ee4 <disk_write+0x20>
   11f3c:	0000f6ed 	.word	0x0000f6ed
   11f40:	0000f6d1 	.word	0x0000f6d1
   11f44:	0000f72d 	.word	0x0000f72d

00011f48 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   11f48:	b510      	push	{r4, lr}
   11f4a:	b082      	sub	sp, #8
   11f4c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   11f4e:	2901      	cmp	r1, #1
   11f50:	d00b      	beq.n	11f6a <disk_ioctl+0x22>
   11f52:	2900      	cmp	r1, #0
   11f54:	d020      	beq.n	11f98 <disk_ioctl+0x50>
   11f56:	2902      	cmp	r1, #2
   11f58:	d00f      	beq.n	11f7a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   11f5a:	2004      	movs	r0, #4
	switch (ctrl) {
   11f5c:	2903      	cmp	r1, #3
   11f5e:	d102      	bne.n	11f66 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   11f60:	2301      	movs	r3, #1
   11f62:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   11f64:	2000      	movs	r0, #0
	}

	return res;
}
   11f66:	b002      	add	sp, #8
   11f68:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   11f6a:	a901      	add	r1, sp, #4
   11f6c:	4b0e      	ldr	r3, [pc, #56]	; (11fa8 <disk_ioctl+0x60>)
   11f6e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   11f70:	9b01      	ldr	r3, [sp, #4]
   11f72:	3301      	adds	r3, #1
   11f74:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   11f76:	2000      	movs	r0, #0
	break;
   11f78:	e7f5      	b.n	11f66 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   11f7a:	4b0c      	ldr	r3, [pc, #48]	; (11fac <disk_ioctl+0x64>)
   11f7c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   11f7e:	1e43      	subs	r3, r0, #1
   11f80:	b2db      	uxtb	r3, r3
   11f82:	2b01      	cmp	r3, #1
   11f84:	d904      	bls.n	11f90 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   11f86:	1f03      	subs	r3, r0, #4
   11f88:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   11f8a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   11f8c:	4213      	tst	r3, r2
   11f8e:	d1ea      	bne.n	11f66 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   11f90:	2300      	movs	r3, #0
   11f92:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   11f94:	2000      	movs	r0, #0
	break;
   11f96:	e7e6      	b.n	11f66 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   11f98:	4b05      	ldr	r3, [pc, #20]	; (11fb0 <disk_ioctl+0x68>)
   11f9a:	4798      	blx	r3
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d001      	beq.n	11fa4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   11fa0:	2003      	movs	r0, #3
   11fa2:	e7e0      	b.n	11f66 <disk_ioctl+0x1e>
			res = RES_OK;
   11fa4:	2000      	movs	r0, #0
   11fa6:	e7de      	b.n	11f66 <disk_ioctl+0x1e>
   11fa8:	0000f6d1 	.word	0x0000f6d1
   11fac:	0000f6ed 	.word	0x0000f6ed
   11fb0:	0000f6b9 	.word	0x0000f6b9

00011fb4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   11fb4:	b500      	push	{lr}
   11fb6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   11fb8:	4669      	mov	r1, sp
   11fba:	480f      	ldr	r0, [pc, #60]	; (11ff8 <get_fattime+0x44>)
   11fbc:	4b0f      	ldr	r3, [pc, #60]	; (11ffc <get_fattime+0x48>)
   11fbe:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   11fc0:	466b      	mov	r3, sp
   11fc2:	7958      	ldrb	r0, [r3, #5]
   11fc4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   11fc6:	791b      	ldrb	r3, [r3, #4]
   11fc8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   11fca:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   11fcc:	466b      	mov	r3, sp
   11fce:	789b      	ldrb	r3, [r3, #2]
   11fd0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   11fd2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   11fd4:	466b      	mov	r3, sp
   11fd6:	785b      	ldrb	r3, [r3, #1]
   11fd8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   11fda:	4318      	orrs	r0, r3
   11fdc:	466b      	mov	r3, sp
   11fde:	781b      	ldrb	r3, [r3, #0]
   11fe0:	085b      	lsrs	r3, r3, #1
   11fe2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   11fe4:	466b      	mov	r3, sp
   11fe6:	88db      	ldrh	r3, [r3, #6]
   11fe8:	4a05      	ldr	r2, [pc, #20]	; (12000 <get_fattime+0x4c>)
   11fea:	4694      	mov	ip, r2
   11fec:	4463      	add	r3, ip
   11fee:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   11ff0:	4318      	orrs	r0, r3

	return ul_time;
}
   11ff2:	b003      	add	sp, #12
   11ff4:	bd00      	pop	{pc}
   11ff6:	46c0      	nop			; (mov r8, r8)
   11ff8:	200014e4 	.word	0x200014e4
   11ffc:	0000fad5 	.word	0x0000fad5
   12000:	fffff844 	.word	0xfffff844

00012004 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   12004:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   12006:	2a00      	cmp	r2, #0
   12008:	d005      	beq.n	12016 <mem_cpy+0x12>
   1200a:	2300      	movs	r3, #0
		*d++ = *s++;
   1200c:	5ccc      	ldrb	r4, [r1, r3]
   1200e:	54c4      	strb	r4, [r0, r3]
   12010:	3301      	adds	r3, #1
	while (cnt--)
   12012:	4293      	cmp	r3, r2
   12014:	d1fa      	bne.n	1200c <mem_cpy+0x8>
}
   12016:	bd10      	pop	{r4, pc}

00012018 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   12018:	2a00      	cmp	r2, #0
   1201a:	d005      	beq.n	12028 <mem_set+0x10>
   1201c:	0003      	movs	r3, r0
   1201e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   12020:	7019      	strb	r1, [r3, #0]
   12022:	3301      	adds	r3, #1
	while (cnt--)
   12024:	4293      	cmp	r3, r2
   12026:	d1fb      	bne.n	12020 <mem_set+0x8>
}
   12028:	4770      	bx	lr

0001202a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1202a:	0002      	movs	r2, r0
	clst -= 2;
   1202c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1202e:	6983      	ldr	r3, [r0, #24]
   12030:	3b02      	subs	r3, #2
   12032:	2000      	movs	r0, #0
   12034:	4299      	cmp	r1, r3
   12036:	d203      	bcs.n	12040 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   12038:	7890      	ldrb	r0, [r2, #2]
   1203a:	4341      	muls	r1, r0
   1203c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1203e:	1808      	adds	r0, r1, r0
}
   12040:	4770      	bx	lr

00012042 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   12042:	0002      	movs	r2, r0
   12044:	0001      	movs	r1, r0
   12046:	310b      	adds	r1, #11
	BYTE sum = 0;
   12048:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1204a:	0843      	lsrs	r3, r0, #1
   1204c:	01c0      	lsls	r0, r0, #7
   1204e:	4303      	orrs	r3, r0
   12050:	7810      	ldrb	r0, [r2, #0]
   12052:	1818      	adds	r0, r3, r0
   12054:	b2c0      	uxtb	r0, r0
   12056:	3201      	adds	r2, #1
   12058:	428a      	cmp	r2, r1
   1205a:	d1f6      	bne.n	1204a <sum_sfn+0x8>
	return sum;
}
   1205c:	4770      	bx	lr
	...

00012060 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   12060:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   12062:	2800      	cmp	r0, #0
   12064:	d010      	beq.n	12088 <validate+0x28>
   12066:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   12068:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1206a:	2a00      	cmp	r2, #0
   1206c:	d101      	bne.n	12072 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1206e:	0018      	movs	r0, r3
   12070:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   12072:	88c2      	ldrh	r2, [r0, #6]
   12074:	428a      	cmp	r2, r1
   12076:	d1fa      	bne.n	1206e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   12078:	7840      	ldrb	r0, [r0, #1]
   1207a:	4b04      	ldr	r3, [pc, #16]	; (1208c <validate+0x2c>)
   1207c:	4798      	blx	r3
		return FR_NOT_READY;
   1207e:	2303      	movs	r3, #3
	return FR_OK;
   12080:	07c0      	lsls	r0, r0, #31
   12082:	17c0      	asrs	r0, r0, #31
   12084:	4003      	ands	r3, r0
   12086:	e7f2      	b.n	1206e <validate+0xe>
		return FR_INVALID_OBJECT;
   12088:	2309      	movs	r3, #9
   1208a:	e7f0      	b.n	1206e <validate+0xe>
   1208c:	00011e25 	.word	0x00011e25

00012090 <check_fs>:
{
   12090:	b570      	push	{r4, r5, r6, lr}
   12092:	0004      	movs	r4, r0
   12094:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12096:	0001      	movs	r1, r0
   12098:	3130      	adds	r1, #48	; 0x30
   1209a:	7840      	ldrb	r0, [r0, #1]
   1209c:	2301      	movs	r3, #1
   1209e:	4d1f      	ldr	r5, [pc, #124]	; (1211c <check_fs+0x8c>)
   120a0:	47a8      	blx	r5
		return 3;
   120a2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   120a4:	2800      	cmp	r0, #0
   120a6:	d001      	beq.n	120ac <check_fs+0x1c>
}
   120a8:	0018      	movs	r0, r3
   120aa:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   120ac:	4b1c      	ldr	r3, [pc, #112]	; (12120 <check_fs+0x90>)
   120ae:	5ce3      	ldrb	r3, [r4, r3]
   120b0:	021b      	lsls	r3, r3, #8
   120b2:	4a1c      	ldr	r2, [pc, #112]	; (12124 <check_fs+0x94>)
   120b4:	5ca2      	ldrb	r2, [r4, r2]
   120b6:	431a      	orrs	r2, r3
   120b8:	491b      	ldr	r1, [pc, #108]	; (12128 <check_fs+0x98>)
   120ba:	b212      	sxth	r2, r2
		return 2;
   120bc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   120be:	428a      	cmp	r2, r1
   120c0:	d1f2      	bne.n	120a8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   120c2:	3367      	adds	r3, #103	; 0x67
   120c4:	5ce3      	ldrb	r3, [r4, r3]
   120c6:	061b      	lsls	r3, r3, #24
   120c8:	2268      	movs	r2, #104	; 0x68
   120ca:	5ca2      	ldrb	r2, [r4, r2]
   120cc:	0412      	lsls	r2, r2, #16
   120ce:	4313      	orrs	r3, r2
   120d0:	2266      	movs	r2, #102	; 0x66
   120d2:	5ca2      	ldrb	r2, [r4, r2]
   120d4:	4313      	orrs	r3, r2
   120d6:	2267      	movs	r2, #103	; 0x67
   120d8:	5ca2      	ldrb	r2, [r4, r2]
   120da:	0212      	lsls	r2, r2, #8
   120dc:	4313      	orrs	r3, r2
   120de:	021b      	lsls	r3, r3, #8
   120e0:	0a1b      	lsrs	r3, r3, #8
   120e2:	4a12      	ldr	r2, [pc, #72]	; (1212c <check_fs+0x9c>)
   120e4:	4293      	cmp	r3, r2
   120e6:	d016      	beq.n	12116 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   120e8:	2385      	movs	r3, #133	; 0x85
   120ea:	5ce3      	ldrb	r3, [r4, r3]
   120ec:	061b      	lsls	r3, r3, #24
   120ee:	2284      	movs	r2, #132	; 0x84
   120f0:	5ca2      	ldrb	r2, [r4, r2]
   120f2:	0412      	lsls	r2, r2, #16
   120f4:	4313      	orrs	r3, r2
   120f6:	2282      	movs	r2, #130	; 0x82
   120f8:	5ca2      	ldrb	r2, [r4, r2]
   120fa:	4313      	orrs	r3, r2
   120fc:	2283      	movs	r2, #131	; 0x83
   120fe:	5ca2      	ldrb	r2, [r4, r2]
   12100:	0212      	lsls	r2, r2, #8
   12102:	4313      	orrs	r3, r2
   12104:	021b      	lsls	r3, r3, #8
   12106:	0a1b      	lsrs	r3, r3, #8
   12108:	4a09      	ldr	r2, [pc, #36]	; (12130 <check_fs+0xa0>)
   1210a:	4694      	mov	ip, r2
   1210c:	4463      	add	r3, ip
   1210e:	1e58      	subs	r0, r3, #1
   12110:	4183      	sbcs	r3, r0
		return 3;
   12112:	b2db      	uxtb	r3, r3
   12114:	e7c8      	b.n	120a8 <check_fs+0x18>
		return 0;
   12116:	2300      	movs	r3, #0
   12118:	e7c6      	b.n	120a8 <check_fs+0x18>
   1211a:	46c0      	nop			; (mov r8, r8)
   1211c:	00011e41 	.word	0x00011e41
   12120:	0000022f 	.word	0x0000022f
   12124:	0000022e 	.word	0x0000022e
   12128:	ffffaa55 	.word	0xffffaa55
   1212c:	00544146 	.word	0x00544146
   12130:	ffabbeba 	.word	0xffabbeba

00012134 <chk_mounted>:
{
   12134:	b5f0      	push	{r4, r5, r6, r7, lr}
   12136:	46d6      	mov	lr, sl
   12138:	464f      	mov	r7, r9
   1213a:	4646      	mov	r6, r8
   1213c:	b5c0      	push	{r6, r7, lr}
   1213e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12140:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   12142:	781c      	ldrb	r4, [r3, #0]
   12144:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   12146:	2c09      	cmp	r4, #9
   12148:	d80e      	bhi.n	12168 <chk_mounted+0x34>
   1214a:	785a      	ldrb	r2, [r3, #1]
   1214c:	2a3a      	cmp	r2, #58	; 0x3a
   1214e:	d001      	beq.n	12154 <chk_mounted+0x20>
   12150:	2400      	movs	r4, #0
   12152:	e00a      	b.n	1216a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   12154:	3302      	adds	r3, #2
   12156:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   12158:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1215a:	2c07      	cmp	r4, #7
   1215c:	d905      	bls.n	1216a <chk_mounted+0x36>
}
   1215e:	bc1c      	pop	{r2, r3, r4}
   12160:	4690      	mov	r8, r2
   12162:	4699      	mov	r9, r3
   12164:	46a2      	mov	sl, r4
   12166:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12168:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1216a:	00a3      	lsls	r3, r4, #2
   1216c:	4ac5      	ldr	r2, [pc, #788]	; (12484 <chk_mounted+0x350>)
   1216e:	589e      	ldr	r6, [r3, r2]
   12170:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   12172:	2e00      	cmp	r6, #0
   12174:	d100      	bne.n	12178 <chk_mounted+0x44>
   12176:	e0e8      	b.n	1234a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   12178:	7833      	ldrb	r3, [r6, #0]
   1217a:	2b00      	cmp	r3, #0
   1217c:	d00d      	beq.n	1219a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1217e:	7870      	ldrb	r0, [r6, #1]
   12180:	4bc1      	ldr	r3, [pc, #772]	; (12488 <chk_mounted+0x354>)
   12182:	4798      	blx	r3
   12184:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   12186:	07c2      	lsls	r2, r0, #31
   12188:	d407      	bmi.n	1219a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1218a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1218c:	2d00      	cmp	r5, #0
   1218e:	d0e6      	beq.n	1215e <chk_mounted+0x2a>
   12190:	075b      	lsls	r3, r3, #29
   12192:	d400      	bmi.n	12196 <chk_mounted+0x62>
   12194:	e0db      	b.n	1234e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   12196:	300a      	adds	r0, #10
   12198:	e7e1      	b.n	1215e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1219a:	2300      	movs	r3, #0
   1219c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1219e:	b2e0      	uxtb	r0, r4
   121a0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   121a2:	4bba      	ldr	r3, [pc, #744]	; (1248c <chk_mounted+0x358>)
   121a4:	4798      	blx	r3
   121a6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   121a8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   121aa:	07da      	lsls	r2, r3, #31
   121ac:	d4d7      	bmi.n	1215e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   121ae:	2d00      	cmp	r5, #0
   121b0:	d002      	beq.n	121b8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   121b2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   121b4:	075b      	lsls	r3, r3, #29
   121b6:	d4d2      	bmi.n	1215e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   121b8:	2100      	movs	r1, #0
   121ba:	0030      	movs	r0, r6
   121bc:	4bb4      	ldr	r3, [pc, #720]	; (12490 <chk_mounted+0x35c>)
   121be:	4798      	blx	r3
   121c0:	0003      	movs	r3, r0
   121c2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   121c4:	2801      	cmp	r0, #1
   121c6:	d100      	bne.n	121ca <chk_mounted+0x96>
   121c8:	e09a      	b.n	12300 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   121ca:	2b03      	cmp	r3, #3
   121cc:	d100      	bne.n	121d0 <chk_mounted+0x9c>
   121ce:	e0c0      	b.n	12352 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   121d0:	200d      	movs	r0, #13
   121d2:	2b00      	cmp	r3, #0
   121d4:	d1c3      	bne.n	1215e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   121d6:	333c      	adds	r3, #60	; 0x3c
   121d8:	5cf2      	ldrb	r2, [r6, r3]
   121da:	0212      	lsls	r2, r2, #8
   121dc:	3b01      	subs	r3, #1
   121de:	5cf3      	ldrb	r3, [r6, r3]
   121e0:	4313      	orrs	r3, r2
   121e2:	2280      	movs	r2, #128	; 0x80
   121e4:	0092      	lsls	r2, r2, #2
   121e6:	b21b      	sxth	r3, r3
   121e8:	4293      	cmp	r3, r2
   121ea:	d1b8      	bne.n	1215e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   121ec:	2347      	movs	r3, #71	; 0x47
   121ee:	5cf3      	ldrb	r3, [r6, r3]
   121f0:	021b      	lsls	r3, r3, #8
   121f2:	3abb      	subs	r2, #187	; 0xbb
   121f4:	3aff      	subs	r2, #255	; 0xff
   121f6:	5cb5      	ldrb	r5, [r6, r2]
   121f8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   121fa:	d10d      	bne.n	12218 <chk_mounted+0xe4>
   121fc:	2357      	movs	r3, #87	; 0x57
   121fe:	5cf5      	ldrb	r5, [r6, r3]
   12200:	062d      	lsls	r5, r5, #24
   12202:	3b01      	subs	r3, #1
   12204:	5cf3      	ldrb	r3, [r6, r3]
   12206:	041b      	lsls	r3, r3, #16
   12208:	431d      	orrs	r5, r3
   1220a:	2354      	movs	r3, #84	; 0x54
   1220c:	5cf3      	ldrb	r3, [r6, r3]
   1220e:	431d      	orrs	r5, r3
   12210:	2355      	movs	r3, #85	; 0x55
   12212:	5cf3      	ldrb	r3, [r6, r3]
   12214:	021b      	lsls	r3, r3, #8
   12216:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   12218:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1221a:	2340      	movs	r3, #64	; 0x40
   1221c:	5cf2      	ldrb	r2, [r6, r3]
   1221e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   12220:	1e53      	subs	r3, r2, #1
   12222:	200d      	movs	r0, #13
   12224:	2b01      	cmp	r3, #1
   12226:	d89a      	bhi.n	1215e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   12228:	233d      	movs	r3, #61	; 0x3d
   1222a:	5cf1      	ldrb	r1, [r6, r3]
   1222c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1222e:	2900      	cmp	r1, #0
   12230:	d095      	beq.n	1215e <chk_mounted+0x2a>
   12232:	1e4b      	subs	r3, r1, #1
   12234:	4219      	tst	r1, r3
   12236:	d192      	bne.n	1215e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12238:	2342      	movs	r3, #66	; 0x42
   1223a:	5cf3      	ldrb	r3, [r6, r3]
   1223c:	021b      	lsls	r3, r3, #8
   1223e:	3034      	adds	r0, #52	; 0x34
   12240:	5c30      	ldrb	r0, [r6, r0]
   12242:	4318      	orrs	r0, r3
   12244:	4680      	mov	r8, r0
   12246:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12248:	200d      	movs	r0, #13
   1224a:	4643      	mov	r3, r8
   1224c:	071b      	lsls	r3, r3, #28
   1224e:	d000      	beq.n	12252 <chk_mounted+0x11e>
   12250:	e785      	b.n	1215e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   12252:	2344      	movs	r3, #68	; 0x44
   12254:	5cf3      	ldrb	r3, [r6, r3]
   12256:	021b      	lsls	r3, r3, #8
   12258:	3036      	adds	r0, #54	; 0x36
   1225a:	5c30      	ldrb	r0, [r6, r0]
   1225c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1225e:	d10d      	bne.n	1227c <chk_mounted+0x148>
   12260:	3353      	adds	r3, #83	; 0x53
   12262:	5cf3      	ldrb	r3, [r6, r3]
   12264:	061b      	lsls	r3, r3, #24
   12266:	2052      	movs	r0, #82	; 0x52
   12268:	5c30      	ldrb	r0, [r6, r0]
   1226a:	0400      	lsls	r0, r0, #16
   1226c:	4303      	orrs	r3, r0
   1226e:	2050      	movs	r0, #80	; 0x50
   12270:	5c30      	ldrb	r0, [r6, r0]
   12272:	4303      	orrs	r3, r0
   12274:	2051      	movs	r0, #81	; 0x51
   12276:	5c30      	ldrb	r0, [r6, r0]
   12278:	0200      	lsls	r0, r0, #8
   1227a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1227c:	203f      	movs	r0, #63	; 0x3f
   1227e:	5c30      	ldrb	r0, [r6, r0]
   12280:	0200      	lsls	r0, r0, #8
   12282:	273e      	movs	r7, #62	; 0x3e
   12284:	5df7      	ldrb	r7, [r6, r7]
   12286:	4307      	orrs	r7, r0
   12288:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1228a:	200d      	movs	r0, #13
   1228c:	2f00      	cmp	r7, #0
   1228e:	d100      	bne.n	12292 <chk_mounted+0x15e>
   12290:	e765      	b.n	1215e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   12292:	436a      	muls	r2, r5
   12294:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   12296:	4642      	mov	r2, r8
   12298:	0917      	lsrs	r7, r2, #4
   1229a:	4457      	add	r7, sl
   1229c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1229e:	42bb      	cmp	r3, r7
   122a0:	d200      	bcs.n	122a4 <chk_mounted+0x170>
   122a2:	e75c      	b.n	1215e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   122a4:	1bd8      	subs	r0, r3, r7
   122a6:	4b7b      	ldr	r3, [pc, #492]	; (12494 <chk_mounted+0x360>)
   122a8:	4798      	blx	r3
   122aa:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   122ac:	200d      	movs	r0, #13
   122ae:	2b00      	cmp	r3, #0
   122b0:	d100      	bne.n	122b4 <chk_mounted+0x180>
   122b2:	e754      	b.n	1215e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   122b4:	4a78      	ldr	r2, [pc, #480]	; (12498 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   122b6:	429a      	cmp	r2, r3
   122b8:	4192      	sbcs	r2, r2
   122ba:	4252      	negs	r2, r2
   122bc:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   122be:	4977      	ldr	r1, [pc, #476]	; (1249c <chk_mounted+0x368>)
   122c0:	428b      	cmp	r3, r1
   122c2:	d848      	bhi.n	12356 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   122c4:	3302      	adds	r3, #2
   122c6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   122c8:	19e7      	adds	r7, r4, r7
   122ca:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   122cc:	4454      	add	r4, sl
   122ce:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   122d0:	200d      	movs	r0, #13
   122d2:	4641      	mov	r1, r8
   122d4:	2900      	cmp	r1, #0
   122d6:	d100      	bne.n	122da <chk_mounted+0x1a6>
   122d8:	e741      	b.n	1215e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   122da:	444c      	add	r4, r9
   122dc:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   122de:	2a02      	cmp	r2, #2
   122e0:	d12c      	bne.n	1233c <chk_mounted+0x208>
   122e2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   122e4:	496e      	ldr	r1, [pc, #440]	; (124a0 <chk_mounted+0x36c>)
   122e6:	468c      	mov	ip, r1
   122e8:	4463      	add	r3, ip
   122ea:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   122ec:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   122ee:	429d      	cmp	r5, r3
   122f0:	d200      	bcs.n	122f4 <chk_mounted+0x1c0>
   122f2:	e734      	b.n	1215e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   122f4:	2301      	movs	r3, #1
   122f6:	425b      	negs	r3, r3
   122f8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   122fa:	2300      	movs	r3, #0
   122fc:	60f3      	str	r3, [r6, #12]
   122fe:	e0b6      	b.n	1246e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   12300:	33f2      	adds	r3, #242	; 0xf2
   12302:	33ff      	adds	r3, #255	; 0xff
   12304:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   12306:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   12308:	2b00      	cmp	r3, #0
   1230a:	d100      	bne.n	1230e <chk_mounted+0x1da>
   1230c:	e727      	b.n	1215e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1230e:	23fa      	movs	r3, #250	; 0xfa
   12310:	33ff      	adds	r3, #255	; 0xff
   12312:	5cf4      	ldrb	r4, [r6, r3]
   12314:	0624      	lsls	r4, r4, #24
   12316:	3b01      	subs	r3, #1
   12318:	5cf3      	ldrb	r3, [r6, r3]
   1231a:	041b      	lsls	r3, r3, #16
   1231c:	431c      	orrs	r4, r3
   1231e:	23fb      	movs	r3, #251	; 0xfb
   12320:	005b      	lsls	r3, r3, #1
   12322:	5cf3      	ldrb	r3, [r6, r3]
   12324:	431c      	orrs	r4, r3
   12326:	23f8      	movs	r3, #248	; 0xf8
   12328:	33ff      	adds	r3, #255	; 0xff
   1232a:	5cf2      	ldrb	r2, [r6, r3]
   1232c:	0212      	lsls	r2, r2, #8
   1232e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12330:	0021      	movs	r1, r4
   12332:	0030      	movs	r0, r6
   12334:	4b56      	ldr	r3, [pc, #344]	; (12490 <chk_mounted+0x35c>)
   12336:	4798      	blx	r3
   12338:	0003      	movs	r3, r0
   1233a:	e746      	b.n	121ca <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1233c:	2103      	movs	r1, #3
   1233e:	4359      	muls	r1, r3
   12340:	0849      	lsrs	r1, r1, #1
   12342:	2001      	movs	r0, #1
   12344:	4003      	ands	r3, r0
   12346:	18cb      	adds	r3, r1, r3
   12348:	e7cc      	b.n	122e4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1234a:	200c      	movs	r0, #12
   1234c:	e707      	b.n	1215e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   1234e:	2000      	movs	r0, #0
   12350:	e705      	b.n	1215e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   12352:	2001      	movs	r0, #1
   12354:	e703      	b.n	1215e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12356:	3302      	adds	r3, #2
   12358:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1235a:	19e7      	adds	r7, r4, r7
   1235c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1235e:	4652      	mov	r2, sl
   12360:	18a2      	adds	r2, r4, r2
   12362:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12364:	200d      	movs	r0, #13
   12366:	4642      	mov	r2, r8
   12368:	2a00      	cmp	r2, #0
   1236a:	d000      	beq.n	1236e <chk_mounted+0x23a>
   1236c:	e6f7      	b.n	1215e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1236e:	225f      	movs	r2, #95	; 0x5f
   12370:	5cb2      	ldrb	r2, [r6, r2]
   12372:	0612      	lsls	r2, r2, #24
   12374:	215e      	movs	r1, #94	; 0x5e
   12376:	5c71      	ldrb	r1, [r6, r1]
   12378:	0409      	lsls	r1, r1, #16
   1237a:	430a      	orrs	r2, r1
   1237c:	215c      	movs	r1, #92	; 0x5c
   1237e:	5c71      	ldrb	r1, [r6, r1]
   12380:	430a      	orrs	r2, r1
   12382:	215d      	movs	r1, #93	; 0x5d
   12384:	5c71      	ldrb	r1, [r6, r1]
   12386:	0209      	lsls	r1, r1, #8
   12388:	430a      	orrs	r2, r1
   1238a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1238c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1238e:	4a44      	ldr	r2, [pc, #272]	; (124a0 <chk_mounted+0x36c>)
   12390:	4694      	mov	ip, r2
   12392:	4463      	add	r3, ip
   12394:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   12396:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12398:	429d      	cmp	r5, r3
   1239a:	d200      	bcs.n	1239e <chk_mounted+0x26a>
   1239c:	e6df      	b.n	1215e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1239e:	2301      	movs	r3, #1
   123a0:	425b      	negs	r3, r3
   123a2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   123a4:	2300      	movs	r3, #0
   123a6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   123a8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   123aa:	3361      	adds	r3, #97	; 0x61
   123ac:	5cf3      	ldrb	r3, [r6, r3]
   123ae:	021b      	lsls	r3, r3, #8
   123b0:	2260      	movs	r2, #96	; 0x60
   123b2:	5cb2      	ldrb	r2, [r6, r2]
   123b4:	431a      	orrs	r2, r3
   123b6:	1912      	adds	r2, r2, r4
   123b8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   123ba:	0031      	movs	r1, r6
   123bc:	3130      	adds	r1, #48	; 0x30
   123be:	7870      	ldrb	r0, [r6, #1]
   123c0:	2301      	movs	r3, #1
   123c2:	4c38      	ldr	r4, [pc, #224]	; (124a4 <chk_mounted+0x370>)
   123c4:	47a0      	blx	r4
   123c6:	2203      	movs	r2, #3
   123c8:	2800      	cmp	r0, #0
   123ca:	d150      	bne.n	1246e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   123cc:	4b36      	ldr	r3, [pc, #216]	; (124a8 <chk_mounted+0x374>)
   123ce:	5cf2      	ldrb	r2, [r6, r3]
   123d0:	0212      	lsls	r2, r2, #8
   123d2:	4b36      	ldr	r3, [pc, #216]	; (124ac <chk_mounted+0x378>)
   123d4:	5cf3      	ldrb	r3, [r6, r3]
   123d6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   123d8:	4935      	ldr	r1, [pc, #212]	; (124b0 <chk_mounted+0x37c>)
   123da:	b21b      	sxth	r3, r3
   123dc:	2203      	movs	r2, #3
   123de:	428b      	cmp	r3, r1
   123e0:	d145      	bne.n	1246e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   123e2:	2333      	movs	r3, #51	; 0x33
   123e4:	5cf3      	ldrb	r3, [r6, r3]
   123e6:	061b      	lsls	r3, r3, #24
   123e8:	322f      	adds	r2, #47	; 0x2f
   123ea:	5cb2      	ldrb	r2, [r6, r2]
   123ec:	0412      	lsls	r2, r2, #16
   123ee:	4313      	orrs	r3, r2
   123f0:	2230      	movs	r2, #48	; 0x30
   123f2:	5cb2      	ldrb	r2, [r6, r2]
   123f4:	4313      	orrs	r3, r2
   123f6:	2231      	movs	r2, #49	; 0x31
   123f8:	5cb2      	ldrb	r2, [r6, r2]
   123fa:	0212      	lsls	r2, r2, #8
   123fc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   123fe:	492d      	ldr	r1, [pc, #180]	; (124b4 <chk_mounted+0x380>)
   12400:	2203      	movs	r2, #3
   12402:	428b      	cmp	r3, r1
   12404:	d133      	bne.n	1246e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   12406:	4b2c      	ldr	r3, [pc, #176]	; (124b8 <chk_mounted+0x384>)
   12408:	5cf3      	ldrb	r3, [r6, r3]
   1240a:	061b      	lsls	r3, r3, #24
   1240c:	4a2b      	ldr	r2, [pc, #172]	; (124bc <chk_mounted+0x388>)
   1240e:	5cb2      	ldrb	r2, [r6, r2]
   12410:	0412      	lsls	r2, r2, #16
   12412:	4313      	orrs	r3, r2
   12414:	2285      	movs	r2, #133	; 0x85
   12416:	0092      	lsls	r2, r2, #2
   12418:	5cb2      	ldrb	r2, [r6, r2]
   1241a:	4313      	orrs	r3, r2
   1241c:	4a28      	ldr	r2, [pc, #160]	; (124c0 <chk_mounted+0x38c>)
   1241e:	5cb2      	ldrb	r2, [r6, r2]
   12420:	0212      	lsls	r2, r2, #8
   12422:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   12424:	4927      	ldr	r1, [pc, #156]	; (124c4 <chk_mounted+0x390>)
   12426:	2203      	movs	r2, #3
   12428:	428b      	cmp	r3, r1
   1242a:	d120      	bne.n	1246e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1242c:	4b26      	ldr	r3, [pc, #152]	; (124c8 <chk_mounted+0x394>)
   1242e:	5cf3      	ldrb	r3, [r6, r3]
   12430:	061b      	lsls	r3, r3, #24
   12432:	4a26      	ldr	r2, [pc, #152]	; (124cc <chk_mounted+0x398>)
   12434:	5cb2      	ldrb	r2, [r6, r2]
   12436:	0412      	lsls	r2, r2, #16
   12438:	4313      	orrs	r3, r2
   1243a:	2287      	movs	r2, #135	; 0x87
   1243c:	0092      	lsls	r2, r2, #2
   1243e:	5cb2      	ldrb	r2, [r6, r2]
   12440:	4313      	orrs	r3, r2
   12442:	4a23      	ldr	r2, [pc, #140]	; (124d0 <chk_mounted+0x39c>)
   12444:	5cb2      	ldrb	r2, [r6, r2]
   12446:	0212      	lsls	r2, r2, #8
   12448:	4313      	orrs	r3, r2
   1244a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1244c:	4b21      	ldr	r3, [pc, #132]	; (124d4 <chk_mounted+0x3a0>)
   1244e:	5cf3      	ldrb	r3, [r6, r3]
   12450:	061b      	lsls	r3, r3, #24
   12452:	4a21      	ldr	r2, [pc, #132]	; (124d8 <chk_mounted+0x3a4>)
   12454:	5cb2      	ldrb	r2, [r6, r2]
   12456:	0412      	lsls	r2, r2, #16
   12458:	4313      	orrs	r3, r2
   1245a:	2286      	movs	r2, #134	; 0x86
   1245c:	0092      	lsls	r2, r2, #2
   1245e:	5cb2      	ldrb	r2, [r6, r2]
   12460:	4313      	orrs	r3, r2
   12462:	4a1e      	ldr	r2, [pc, #120]	; (124dc <chk_mounted+0x3a8>)
   12464:	5cb2      	ldrb	r2, [r6, r2]
   12466:	0212      	lsls	r2, r2, #8
   12468:	4313      	orrs	r3, r2
   1246a:	6133      	str	r3, [r6, #16]
   1246c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   1246e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   12470:	4a1b      	ldr	r2, [pc, #108]	; (124e0 <chk_mounted+0x3ac>)
   12472:	8813      	ldrh	r3, [r2, #0]
   12474:	3301      	adds	r3, #1
   12476:	b29b      	uxth	r3, r3
   12478:	8013      	strh	r3, [r2, #0]
   1247a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1247c:	2000      	movs	r0, #0
   1247e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   12480:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   12482:	e66c      	b.n	1215e <chk_mounted+0x2a>
   12484:	20000418 	.word	0x20000418
   12488:	00011e25 	.word	0x00011e25
   1248c:	00011d89 	.word	0x00011d89
   12490:	00012091 	.word	0x00012091
   12494:	00016bbd 	.word	0x00016bbd
   12498:	00000ff5 	.word	0x00000ff5
   1249c:	0000fff5 	.word	0x0000fff5
   124a0:	000001ff 	.word	0x000001ff
   124a4:	00011e41 	.word	0x00011e41
   124a8:	0000022f 	.word	0x0000022f
   124ac:	0000022e 	.word	0x0000022e
   124b0:	ffffaa55 	.word	0xffffaa55
   124b4:	41615252 	.word	0x41615252
   124b8:	00000217 	.word	0x00000217
   124bc:	00000216 	.word	0x00000216
   124c0:	00000215 	.word	0x00000215
   124c4:	61417272 	.word	0x61417272
   124c8:	0000021f 	.word	0x0000021f
   124cc:	0000021e 	.word	0x0000021e
   124d0:	0000021d 	.word	0x0000021d
   124d4:	0000021b 	.word	0x0000021b
   124d8:	0000021a 	.word	0x0000021a
   124dc:	00000219 	.word	0x00000219
   124e0:	20000438 	.word	0x20000438

000124e4 <move_window>:
{
   124e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   124e6:	46ce      	mov	lr, r9
   124e8:	b500      	push	{lr}
   124ea:	b082      	sub	sp, #8
   124ec:	0004      	movs	r4, r0
   124ee:	000f      	movs	r7, r1
	wsect = fs->winsect;
   124f0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   124f2:	428d      	cmp	r5, r1
   124f4:	d03f      	beq.n	12576 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   124f6:	7903      	ldrb	r3, [r0, #4]
   124f8:	2b00      	cmp	r3, #0
   124fa:	d107      	bne.n	1250c <move_window+0x28>
	return FR_OK;
   124fc:	2300      	movs	r3, #0
		if (sector) {
   124fe:	2f00      	cmp	r7, #0
   12500:	d12c      	bne.n	1255c <move_window+0x78>
}
   12502:	0018      	movs	r0, r3
   12504:	b002      	add	sp, #8
   12506:	bc04      	pop	{r2}
   12508:	4691      	mov	r9, r2
   1250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1250c:	2330      	movs	r3, #48	; 0x30
   1250e:	469c      	mov	ip, r3
   12510:	4484      	add	ip, r0
   12512:	4663      	mov	r3, ip
   12514:	4661      	mov	r1, ip
   12516:	9301      	str	r3, [sp, #4]
   12518:	7840      	ldrb	r0, [r0, #1]
   1251a:	2301      	movs	r3, #1
   1251c:	002a      	movs	r2, r5
   1251e:	4e17      	ldr	r6, [pc, #92]	; (1257c <move_window+0x98>)
   12520:	47b0      	blx	r6
				return FR_DISK_ERR;
   12522:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12524:	2800      	cmp	r0, #0
   12526:	d1ec      	bne.n	12502 <move_window+0x1e>
			fs->wflag = 0;
   12528:	2300      	movs	r3, #0
   1252a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1252c:	6a23      	ldr	r3, [r4, #32]
   1252e:	69e2      	ldr	r2, [r4, #28]
   12530:	4694      	mov	ip, r2
   12532:	4463      	add	r3, ip
   12534:	429d      	cmp	r5, r3
   12536:	d2e1      	bcs.n	124fc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12538:	78e6      	ldrb	r6, [r4, #3]
   1253a:	2e01      	cmp	r6, #1
   1253c:	d9de      	bls.n	124fc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1253e:	4b0f      	ldr	r3, [pc, #60]	; (1257c <move_window+0x98>)
   12540:	4699      	mov	r9, r3
					wsect += fs->fsize;
   12542:	69e3      	ldr	r3, [r4, #28]
   12544:	469c      	mov	ip, r3
   12546:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   12548:	7860      	ldrb	r0, [r4, #1]
   1254a:	2301      	movs	r3, #1
   1254c:	002a      	movs	r2, r5
   1254e:	9901      	ldr	r1, [sp, #4]
   12550:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12552:	3e01      	subs	r6, #1
   12554:	b2f6      	uxtb	r6, r6
   12556:	2e01      	cmp	r6, #1
   12558:	d1f3      	bne.n	12542 <move_window+0x5e>
   1255a:	e7cf      	b.n	124fc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1255c:	0021      	movs	r1, r4
   1255e:	3130      	adds	r1, #48	; 0x30
   12560:	7860      	ldrb	r0, [r4, #1]
   12562:	3301      	adds	r3, #1
   12564:	003a      	movs	r2, r7
   12566:	4d06      	ldr	r5, [pc, #24]	; (12580 <move_window+0x9c>)
   12568:	47a8      	blx	r5
				return FR_DISK_ERR;
   1256a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1256c:	2800      	cmp	r0, #0
   1256e:	d1c8      	bne.n	12502 <move_window+0x1e>
			fs->winsect = sector;
   12570:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   12572:	2300      	movs	r3, #0
   12574:	e7c5      	b.n	12502 <move_window+0x1e>
   12576:	2300      	movs	r3, #0
   12578:	e7c3      	b.n	12502 <move_window+0x1e>
   1257a:	46c0      	nop			; (mov r8, r8)
   1257c:	00011ec5 	.word	0x00011ec5
   12580:	00011e41 	.word	0x00011e41

00012584 <get_fat>:
{
   12584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12586:	0005      	movs	r5, r0
   12588:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1258a:	2901      	cmp	r1, #1
   1258c:	d974      	bls.n	12678 <get_fat+0xf4>
		return 1;
   1258e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12590:	69ab      	ldr	r3, [r5, #24]
   12592:	4299      	cmp	r1, r3
   12594:	d271      	bcs.n	1267a <get_fat+0xf6>
	switch (fs->fs_type) {
   12596:	782b      	ldrb	r3, [r5, #0]
   12598:	2b02      	cmp	r3, #2
   1259a:	d034      	beq.n	12606 <get_fat+0x82>
   1259c:	2b03      	cmp	r3, #3
   1259e:	d049      	beq.n	12634 <get_fat+0xb0>
   125a0:	2b01      	cmp	r3, #1
   125a2:	d002      	beq.n	125aa <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   125a4:	2001      	movs	r0, #1
   125a6:	4240      	negs	r0, r0
   125a8:	e067      	b.n	1267a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   125aa:	084e      	lsrs	r6, r1, #1
   125ac:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125ae:	0a71      	lsrs	r1, r6, #9
   125b0:	6a2b      	ldr	r3, [r5, #32]
   125b2:	469c      	mov	ip, r3
   125b4:	4461      	add	r1, ip
   125b6:	0028      	movs	r0, r5
   125b8:	4b30      	ldr	r3, [pc, #192]	; (1267c <get_fat+0xf8>)
   125ba:	4798      	blx	r3
   125bc:	2800      	cmp	r0, #0
   125be:	d002      	beq.n	125c6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   125c0:	2001      	movs	r0, #1
   125c2:	4240      	negs	r0, r0
   125c4:	e059      	b.n	1267a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   125c6:	05f3      	lsls	r3, r6, #23
   125c8:	0ddb      	lsrs	r3, r3, #23
   125ca:	18eb      	adds	r3, r5, r3
   125cc:	3330      	adds	r3, #48	; 0x30
   125ce:	781f      	ldrb	r7, [r3, #0]
   125d0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125d2:	0a71      	lsrs	r1, r6, #9
   125d4:	6a2b      	ldr	r3, [r5, #32]
   125d6:	469c      	mov	ip, r3
   125d8:	4461      	add	r1, ip
   125da:	0028      	movs	r0, r5
   125dc:	4b27      	ldr	r3, [pc, #156]	; (1267c <get_fat+0xf8>)
   125de:	4798      	blx	r3
   125e0:	2800      	cmp	r0, #0
   125e2:	d002      	beq.n	125ea <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   125e4:	2001      	movs	r0, #1
   125e6:	4240      	negs	r0, r0
   125e8:	e047      	b.n	1267a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   125ea:	05f6      	lsls	r6, r6, #23
   125ec:	0df6      	lsrs	r6, r6, #23
   125ee:	19ad      	adds	r5, r5, r6
   125f0:	3530      	adds	r5, #48	; 0x30
   125f2:	7828      	ldrb	r0, [r5, #0]
   125f4:	0200      	lsls	r0, r0, #8
   125f6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   125f8:	07e3      	lsls	r3, r4, #31
   125fa:	d501      	bpl.n	12600 <get_fat+0x7c>
   125fc:	0900      	lsrs	r0, r0, #4
   125fe:	e03c      	b.n	1267a <get_fat+0xf6>
   12600:	0500      	lsls	r0, r0, #20
   12602:	0d00      	lsrs	r0, r0, #20
   12604:	e039      	b.n	1267a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   12606:	0a09      	lsrs	r1, r1, #8
   12608:	6a2b      	ldr	r3, [r5, #32]
   1260a:	469c      	mov	ip, r3
   1260c:	4461      	add	r1, ip
   1260e:	0028      	movs	r0, r5
   12610:	4b1a      	ldr	r3, [pc, #104]	; (1267c <get_fat+0xf8>)
   12612:	4798      	blx	r3
   12614:	2800      	cmp	r0, #0
   12616:	d002      	beq.n	1261e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12618:	2001      	movs	r0, #1
   1261a:	4240      	negs	r0, r0
   1261c:	e02d      	b.n	1267a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   1261e:	0064      	lsls	r4, r4, #1
   12620:	23ff      	movs	r3, #255	; 0xff
   12622:	005b      	lsls	r3, r3, #1
   12624:	401c      	ands	r4, r3
		return LD_WORD(p);
   12626:	192d      	adds	r5, r5, r4
   12628:	3530      	adds	r5, #48	; 0x30
   1262a:	786b      	ldrb	r3, [r5, #1]
   1262c:	021b      	lsls	r3, r3, #8
   1262e:	7828      	ldrb	r0, [r5, #0]
   12630:	4318      	orrs	r0, r3
   12632:	e022      	b.n	1267a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12634:	09c9      	lsrs	r1, r1, #7
   12636:	6a2b      	ldr	r3, [r5, #32]
   12638:	469c      	mov	ip, r3
   1263a:	4461      	add	r1, ip
   1263c:	0028      	movs	r0, r5
   1263e:	4b0f      	ldr	r3, [pc, #60]	; (1267c <get_fat+0xf8>)
   12640:	4798      	blx	r3
   12642:	2800      	cmp	r0, #0
   12644:	d002      	beq.n	1264c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12646:	2001      	movs	r0, #1
   12648:	4240      	negs	r0, r0
   1264a:	e016      	b.n	1267a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1264c:	00a4      	lsls	r4, r4, #2
   1264e:	23fe      	movs	r3, #254	; 0xfe
   12650:	005b      	lsls	r3, r3, #1
   12652:	401c      	ands	r4, r3
   12654:	0023      	movs	r3, r4
   12656:	3330      	adds	r3, #48	; 0x30
   12658:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1265a:	78d8      	ldrb	r0, [r3, #3]
   1265c:	0600      	lsls	r0, r0, #24
   1265e:	789a      	ldrb	r2, [r3, #2]
   12660:	0412      	lsls	r2, r2, #16
   12662:	4310      	orrs	r0, r2
   12664:	192c      	adds	r4, r5, r4
   12666:	3430      	adds	r4, #48	; 0x30
   12668:	7822      	ldrb	r2, [r4, #0]
   1266a:	4310      	orrs	r0, r2
   1266c:	785b      	ldrb	r3, [r3, #1]
   1266e:	021b      	lsls	r3, r3, #8
   12670:	4318      	orrs	r0, r3
   12672:	0100      	lsls	r0, r0, #4
   12674:	0900      	lsrs	r0, r0, #4
   12676:	e000      	b.n	1267a <get_fat+0xf6>
		return 1;
   12678:	2001      	movs	r0, #1
}
   1267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1267c:	000124e5 	.word	0x000124e5

00012680 <dir_sdi>:
{
   12680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12682:	0004      	movs	r4, r0
   12684:	000d      	movs	r5, r1
	dj->index = idx;
   12686:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   12688:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   1268a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   1268c:	2901      	cmp	r1, #1
   1268e:	d003      	beq.n	12698 <dir_sdi+0x18>
   12690:	6823      	ldr	r3, [r4, #0]
   12692:	699a      	ldr	r2, [r3, #24]
   12694:	4291      	cmp	r1, r2
   12696:	d300      	bcc.n	1269a <dir_sdi+0x1a>
}
   12698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1269a:	2900      	cmp	r1, #0
   1269c:	d119      	bne.n	126d2 <dir_sdi+0x52>
   1269e:	781a      	ldrb	r2, [r3, #0]
   126a0:	2a03      	cmp	r2, #3
   126a2:	d013      	beq.n	126cc <dir_sdi+0x4c>
		dj->clust = clst;
   126a4:	2200      	movs	r2, #0
   126a6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   126a8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   126aa:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   126ac:	42aa      	cmp	r2, r5
   126ae:	d9f3      	bls.n	12698 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   126b0:	092a      	lsrs	r2, r5, #4
   126b2:	b292      	uxth	r2, r2
   126b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   126b6:	189b      	adds	r3, r3, r2
   126b8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   126ba:	6823      	ldr	r3, [r4, #0]
   126bc:	3330      	adds	r3, #48	; 0x30
   126be:	220f      	movs	r2, #15
   126c0:	4015      	ands	r5, r2
   126c2:	016d      	lsls	r5, r5, #5
   126c4:	195d      	adds	r5, r3, r5
   126c6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   126c8:	2000      	movs	r0, #0
   126ca:	e7e5      	b.n	12698 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   126cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   126ce:	2900      	cmp	r1, #0
   126d0:	d0e8      	beq.n	126a4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   126d2:	789e      	ldrb	r6, [r3, #2]
   126d4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   126d6:	42b5      	cmp	r5, r6
   126d8:	d313      	bcc.n	12702 <dir_sdi+0x82>
   126da:	1bad      	subs	r5, r5, r6
   126dc:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   126de:	4f10      	ldr	r7, [pc, #64]	; (12720 <dir_sdi+0xa0>)
   126e0:	e000      	b.n	126e4 <dir_sdi+0x64>
   126e2:	001d      	movs	r5, r3
   126e4:	6820      	ldr	r0, [r4, #0]
   126e6:	47b8      	blx	r7
   126e8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   126ea:	1c43      	adds	r3, r0, #1
   126ec:	d012      	beq.n	12714 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   126ee:	2801      	cmp	r0, #1
   126f0:	d912      	bls.n	12718 <dir_sdi+0x98>
   126f2:	6823      	ldr	r3, [r4, #0]
   126f4:	699b      	ldr	r3, [r3, #24]
   126f6:	4298      	cmp	r0, r3
   126f8:	d210      	bcs.n	1271c <dir_sdi+0x9c>
   126fa:	1bab      	subs	r3, r5, r6
   126fc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   126fe:	42b5      	cmp	r5, r6
   12700:	d2ef      	bcs.n	126e2 <dir_sdi+0x62>
		dj->clust = clst;
   12702:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12704:	6820      	ldr	r0, [r4, #0]
   12706:	4b07      	ldr	r3, [pc, #28]	; (12724 <dir_sdi+0xa4>)
   12708:	4798      	blx	r3
   1270a:	092b      	lsrs	r3, r5, #4
   1270c:	b29b      	uxth	r3, r3
   1270e:	1818      	adds	r0, r3, r0
   12710:	6120      	str	r0, [r4, #16]
   12712:	e7d2      	b.n	126ba <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12714:	2001      	movs	r0, #1
   12716:	e7bf      	b.n	12698 <dir_sdi+0x18>
				return FR_INT_ERR;
   12718:	2002      	movs	r0, #2
   1271a:	e7bd      	b.n	12698 <dir_sdi+0x18>
   1271c:	2002      	movs	r0, #2
   1271e:	e7bb      	b.n	12698 <dir_sdi+0x18>
   12720:	00012585 	.word	0x00012585
   12724:	0001202b 	.word	0x0001202b

00012728 <put_fat>:
{
   12728:	b5f0      	push	{r4, r5, r6, r7, lr}
   1272a:	46c6      	mov	lr, r8
   1272c:	b500      	push	{lr}
   1272e:	0007      	movs	r7, r0
   12730:	000c      	movs	r4, r1
   12732:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   12734:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12736:	2901      	cmp	r1, #1
   12738:	d902      	bls.n	12740 <put_fat+0x18>
   1273a:	6983      	ldr	r3, [r0, #24]
   1273c:	4299      	cmp	r1, r3
   1273e:	d303      	bcc.n	12748 <put_fat+0x20>
}
   12740:	0028      	movs	r0, r5
   12742:	bc04      	pop	{r2}
   12744:	4690      	mov	r8, r2
   12746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   12748:	7803      	ldrb	r3, [r0, #0]
   1274a:	2b02      	cmp	r3, #2
   1274c:	d053      	beq.n	127f6 <put_fat+0xce>
   1274e:	2b03      	cmp	r3, #3
   12750:	d063      	beq.n	1281a <put_fat+0xf2>
			res = FR_INT_ERR;
   12752:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   12754:	2b01      	cmp	r3, #1
   12756:	d002      	beq.n	1275e <put_fat+0x36>
		fs->wflag = 1;
   12758:	2301      	movs	r3, #1
   1275a:	713b      	strb	r3, [r7, #4]
   1275c:	e7f0      	b.n	12740 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   1275e:	084b      	lsrs	r3, r1, #1
   12760:	4698      	mov	r8, r3
   12762:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12764:	4643      	mov	r3, r8
   12766:	0a59      	lsrs	r1, r3, #9
   12768:	6a03      	ldr	r3, [r0, #32]
   1276a:	469c      	mov	ip, r3
   1276c:	4461      	add	r1, ip
   1276e:	4b3b      	ldr	r3, [pc, #236]	; (1285c <put_fat+0x134>)
   12770:	4798      	blx	r3
   12772:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12774:	d1f0      	bne.n	12758 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   12776:	4643      	mov	r3, r8
   12778:	05db      	lsls	r3, r3, #23
   1277a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1277c:	07e2      	lsls	r2, r4, #31
   1277e:	d51f      	bpl.n	127c0 <put_fat+0x98>
   12780:	18fb      	adds	r3, r7, r3
   12782:	3330      	adds	r3, #48	; 0x30
   12784:	7819      	ldrb	r1, [r3, #0]
   12786:	220f      	movs	r2, #15
   12788:	400a      	ands	r2, r1
   1278a:	0131      	lsls	r1, r6, #4
   1278c:	20ff      	movs	r0, #255	; 0xff
   1278e:	0100      	lsls	r0, r0, #4
   12790:	4001      	ands	r1, r0
   12792:	430a      	orrs	r2, r1
   12794:	701a      	strb	r2, [r3, #0]
			bc++;
   12796:	4644      	mov	r4, r8
   12798:	3401      	adds	r4, #1
			fs->wflag = 1;
   1279a:	2301      	movs	r3, #1
   1279c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1279e:	0a61      	lsrs	r1, r4, #9
   127a0:	6a3b      	ldr	r3, [r7, #32]
   127a2:	469c      	mov	ip, r3
   127a4:	4461      	add	r1, ip
   127a6:	0038      	movs	r0, r7
   127a8:	4b2c      	ldr	r3, [pc, #176]	; (1285c <put_fat+0x134>)
   127aa:	4798      	blx	r3
			if (res != FR_OK) break;
   127ac:	2800      	cmp	r0, #0
   127ae:	d151      	bne.n	12854 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   127b0:	05e4      	lsls	r4, r4, #23
   127b2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   127b4:	0936      	lsrs	r6, r6, #4
   127b6:	b2f6      	uxtb	r6, r6
   127b8:	193c      	adds	r4, r7, r4
   127ba:	3430      	adds	r4, #48	; 0x30
   127bc:	7026      	strb	r6, [r4, #0]
			break;
   127be:	e7cb      	b.n	12758 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   127c0:	18fb      	adds	r3, r7, r3
   127c2:	3330      	adds	r3, #48	; 0x30
   127c4:	701e      	strb	r6, [r3, #0]
			bc++;
   127c6:	4644      	mov	r4, r8
   127c8:	3401      	adds	r4, #1
			fs->wflag = 1;
   127ca:	2301      	movs	r3, #1
   127cc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   127ce:	0a61      	lsrs	r1, r4, #9
   127d0:	6a3b      	ldr	r3, [r7, #32]
   127d2:	469c      	mov	ip, r3
   127d4:	4461      	add	r1, ip
   127d6:	0038      	movs	r0, r7
   127d8:	4b20      	ldr	r3, [pc, #128]	; (1285c <put_fat+0x134>)
   127da:	4798      	blx	r3
			if (res != FR_OK) break;
   127dc:	2800      	cmp	r0, #0
   127de:	d13b      	bne.n	12858 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   127e0:	05e4      	lsls	r4, r4, #23
   127e2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   127e4:	193b      	adds	r3, r7, r4
   127e6:	3330      	adds	r3, #48	; 0x30
   127e8:	781b      	ldrb	r3, [r3, #0]
   127ea:	220f      	movs	r2, #15
   127ec:	4393      	bics	r3, r2
   127ee:	0536      	lsls	r6, r6, #20
   127f0:	0f36      	lsrs	r6, r6, #28
   127f2:	431e      	orrs	r6, r3
   127f4:	e7e0      	b.n	127b8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   127f6:	0a09      	lsrs	r1, r1, #8
   127f8:	6a03      	ldr	r3, [r0, #32]
   127fa:	469c      	mov	ip, r3
   127fc:	4461      	add	r1, ip
   127fe:	4b17      	ldr	r3, [pc, #92]	; (1285c <put_fat+0x134>)
   12800:	4798      	blx	r3
   12802:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12804:	d1a8      	bne.n	12758 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   12806:	0063      	lsls	r3, r4, #1
   12808:	24ff      	movs	r4, #255	; 0xff
   1280a:	0064      	lsls	r4, r4, #1
   1280c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   1280e:	18fb      	adds	r3, r7, r3
   12810:	3330      	adds	r3, #48	; 0x30
   12812:	701e      	strb	r6, [r3, #0]
   12814:	0a36      	lsrs	r6, r6, #8
   12816:	705e      	strb	r6, [r3, #1]
			break;
   12818:	e79e      	b.n	12758 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1281a:	09c9      	lsrs	r1, r1, #7
   1281c:	6a03      	ldr	r3, [r0, #32]
   1281e:	469c      	mov	ip, r3
   12820:	4461      	add	r1, ip
   12822:	4b0e      	ldr	r3, [pc, #56]	; (1285c <put_fat+0x134>)
   12824:	4798      	blx	r3
   12826:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   12828:	d196      	bne.n	12758 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   1282a:	00a4      	lsls	r4, r4, #2
   1282c:	23fe      	movs	r3, #254	; 0xfe
   1282e:	005b      	lsls	r3, r3, #1
   12830:	401c      	ands	r4, r3
   12832:	0022      	movs	r2, r4
   12834:	3230      	adds	r2, #48	; 0x30
   12836:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12838:	78d3      	ldrb	r3, [r2, #3]
   1283a:	193c      	adds	r4, r7, r4
   1283c:	3430      	adds	r4, #48	; 0x30
   1283e:	091b      	lsrs	r3, r3, #4
   12840:	071b      	lsls	r3, r3, #28
   12842:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   12844:	7026      	strb	r6, [r4, #0]
   12846:	0a33      	lsrs	r3, r6, #8
   12848:	7053      	strb	r3, [r2, #1]
   1284a:	0c33      	lsrs	r3, r6, #16
   1284c:	7093      	strb	r3, [r2, #2]
   1284e:	0e36      	lsrs	r6, r6, #24
   12850:	70d6      	strb	r6, [r2, #3]
			break;
   12852:	e781      	b.n	12758 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12854:	0005      	movs	r5, r0
   12856:	e77f      	b.n	12758 <put_fat+0x30>
   12858:	0005      	movs	r5, r0
   1285a:	e77d      	b.n	12758 <put_fat+0x30>
   1285c:	000124e5 	.word	0x000124e5

00012860 <create_chain>:
{
   12860:	b5f0      	push	{r4, r5, r6, r7, lr}
   12862:	46c6      	mov	lr, r8
   12864:	b500      	push	{lr}
   12866:	0005      	movs	r5, r0
   12868:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   1286a:	2900      	cmp	r1, #0
   1286c:	d107      	bne.n	1287e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   1286e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12870:	2e00      	cmp	r6, #0
   12872:	d00d      	beq.n	12890 <create_chain+0x30>
   12874:	6983      	ldr	r3, [r0, #24]
   12876:	429e      	cmp	r6, r3
   12878:	d30b      	bcc.n	12892 <create_chain+0x32>
   1287a:	2601      	movs	r6, #1
   1287c:	e009      	b.n	12892 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   1287e:	4b26      	ldr	r3, [pc, #152]	; (12918 <create_chain+0xb8>)
   12880:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12882:	2801      	cmp	r0, #1
   12884:	d93d      	bls.n	12902 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12886:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   12888:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1288a:	4298      	cmp	r0, r3
   1288c:	d201      	bcs.n	12892 <create_chain+0x32>
   1288e:	e03d      	b.n	1290c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12890:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   12892:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   12894:	4f20      	ldr	r7, [pc, #128]	; (12918 <create_chain+0xb8>)
   12896:	e00a      	b.n	128ae <create_chain+0x4e>
   12898:	0021      	movs	r1, r4
   1289a:	0028      	movs	r0, r5
   1289c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   1289e:	2800      	cmp	r0, #0
   128a0:	d00d      	beq.n	128be <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   128a2:	1c43      	adds	r3, r0, #1
   128a4:	d032      	beq.n	1290c <create_chain+0xac>
   128a6:	2801      	cmp	r0, #1
   128a8:	d030      	beq.n	1290c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   128aa:	42b4      	cmp	r4, r6
   128ac:	d02d      	beq.n	1290a <create_chain+0xaa>
		ncl++;							/* Next cluster */
   128ae:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   128b0:	69ab      	ldr	r3, [r5, #24]
   128b2:	429c      	cmp	r4, r3
   128b4:	d3f0      	bcc.n	12898 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   128b6:	2e01      	cmp	r6, #1
   128b8:	d925      	bls.n	12906 <create_chain+0xa6>
			ncl = 2;
   128ba:	2402      	movs	r4, #2
   128bc:	e7ec      	b.n	12898 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   128be:	4a17      	ldr	r2, [pc, #92]	; (1291c <create_chain+0xbc>)
   128c0:	0021      	movs	r1, r4
   128c2:	0028      	movs	r0, r5
   128c4:	4b16      	ldr	r3, [pc, #88]	; (12920 <create_chain+0xc0>)
   128c6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   128c8:	2800      	cmp	r0, #0
   128ca:	d113      	bne.n	128f4 <create_chain+0x94>
   128cc:	4643      	mov	r3, r8
   128ce:	2b00      	cmp	r3, #0
   128d0:	d109      	bne.n	128e6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   128d2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   128d4:	692b      	ldr	r3, [r5, #16]
   128d6:	1c5a      	adds	r2, r3, #1
   128d8:	d01b      	beq.n	12912 <create_chain+0xb2>
			fs->free_clust--;
   128da:	3b01      	subs	r3, #1
   128dc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   128de:	2301      	movs	r3, #1
   128e0:	716b      	strb	r3, [r5, #5]
   128e2:	0020      	movs	r0, r4
   128e4:	e012      	b.n	1290c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   128e6:	0022      	movs	r2, r4
   128e8:	4641      	mov	r1, r8
   128ea:	0028      	movs	r0, r5
   128ec:	4b0c      	ldr	r3, [pc, #48]	; (12920 <create_chain+0xc0>)
   128ee:	4798      	blx	r3
	if (res == FR_OK) {
   128f0:	2800      	cmp	r0, #0
   128f2:	d0ee      	beq.n	128d2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   128f4:	3801      	subs	r0, #1
   128f6:	4242      	negs	r2, r0
   128f8:	4142      	adcs	r2, r0
   128fa:	4250      	negs	r0, r2
   128fc:	2301      	movs	r3, #1
   128fe:	4318      	orrs	r0, r3
   12900:	e004      	b.n	1290c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12902:	2001      	movs	r0, #1
   12904:	e002      	b.n	1290c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   12906:	2000      	movs	r0, #0
   12908:	e000      	b.n	1290c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1290a:	2000      	movs	r0, #0
}
   1290c:	bc04      	pop	{r2}
   1290e:	4690      	mov	r8, r2
   12910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12912:	0020      	movs	r0, r4
   12914:	e7fa      	b.n	1290c <create_chain+0xac>
   12916:	46c0      	nop			; (mov r8, r8)
   12918:	00012585 	.word	0x00012585
   1291c:	0fffffff 	.word	0x0fffffff
   12920:	00012729 	.word	0x00012729

00012924 <remove_chain>:
{
   12924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12926:	46ce      	mov	lr, r9
   12928:	4647      	mov	r7, r8
   1292a:	b580      	push	{r7, lr}
   1292c:	0004      	movs	r4, r0
   1292e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   12930:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12932:	2901      	cmp	r1, #1
   12934:	d902      	bls.n	1293c <remove_chain+0x18>
   12936:	69a3      	ldr	r3, [r4, #24]
   12938:	4299      	cmp	r1, r3
   1293a:	d303      	bcc.n	12944 <remove_chain+0x20>
}
   1293c:	bc0c      	pop	{r2, r3}
   1293e:	4690      	mov	r8, r2
   12940:	4699      	mov	r9, r3
   12942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12944:	4f13      	ldr	r7, [pc, #76]	; (12994 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   12946:	4b14      	ldr	r3, [pc, #80]	; (12998 <remove_chain+0x74>)
   12948:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   1294a:	2301      	movs	r3, #1
   1294c:	4699      	mov	r9, r3
   1294e:	e003      	b.n	12958 <remove_chain+0x34>
   12950:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12952:	69a3      	ldr	r3, [r4, #24]
   12954:	42b3      	cmp	r3, r6
   12956:	d9f1      	bls.n	1293c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   12958:	0029      	movs	r1, r5
   1295a:	0020      	movs	r0, r4
   1295c:	47b8      	blx	r7
   1295e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12960:	d011      	beq.n	12986 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12962:	2801      	cmp	r0, #1
   12964:	d011      	beq.n	1298a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12966:	1c43      	adds	r3, r0, #1
   12968:	d011      	beq.n	1298e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   1296a:	2200      	movs	r2, #0
   1296c:	0029      	movs	r1, r5
   1296e:	0020      	movs	r0, r4
   12970:	47c0      	blx	r8
			if (res != FR_OK) break;
   12972:	2800      	cmp	r0, #0
   12974:	d1e2      	bne.n	1293c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12976:	6923      	ldr	r3, [r4, #16]
   12978:	1c5a      	adds	r2, r3, #1
   1297a:	d0e9      	beq.n	12950 <remove_chain+0x2c>
				fs->free_clust++;
   1297c:	3301      	adds	r3, #1
   1297e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12980:	464b      	mov	r3, r9
   12982:	7163      	strb	r3, [r4, #5]
   12984:	e7e4      	b.n	12950 <remove_chain+0x2c>
   12986:	2000      	movs	r0, #0
   12988:	e7d8      	b.n	1293c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   1298a:	2002      	movs	r0, #2
   1298c:	e7d6      	b.n	1293c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   1298e:	2001      	movs	r0, #1
   12990:	e7d4      	b.n	1293c <remove_chain+0x18>
   12992:	46c0      	nop			; (mov r8, r8)
   12994:	00012585 	.word	0x00012585
   12998:	00012729 	.word	0x00012729

0001299c <dir_next>:
{
   1299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1299e:	46d6      	mov	lr, sl
   129a0:	4647      	mov	r7, r8
   129a2:	b580      	push	{r7, lr}
   129a4:	0006      	movs	r6, r0
   129a6:	000d      	movs	r5, r1
	i = dj->index + 1;
   129a8:	88c4      	ldrh	r4, [r0, #6]
   129aa:	3401      	adds	r4, #1
   129ac:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   129ae:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   129b0:	2c00      	cmp	r4, #0
   129b2:	d103      	bne.n	129bc <dir_next+0x20>
}
   129b4:	bc0c      	pop	{r2, r3}
   129b6:	4690      	mov	r8, r2
   129b8:	469a      	mov	sl, r3
   129ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   129bc:	6933      	ldr	r3, [r6, #16]
   129be:	2b00      	cmp	r3, #0
   129c0:	d0f8      	beq.n	129b4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   129c2:	270f      	movs	r7, #15
   129c4:	4027      	ands	r7, r4
   129c6:	d10f      	bne.n	129e8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   129c8:	3301      	adds	r3, #1
   129ca:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   129cc:	68f1      	ldr	r1, [r6, #12]
   129ce:	2900      	cmp	r1, #0
   129d0:	d104      	bne.n	129dc <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   129d2:	6833      	ldr	r3, [r6, #0]
   129d4:	891b      	ldrh	r3, [r3, #8]
   129d6:	42a3      	cmp	r3, r4
   129d8:	d9ec      	bls.n	129b4 <dir_next+0x18>
   129da:	e005      	b.n	129e8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   129dc:	6830      	ldr	r0, [r6, #0]
   129de:	7883      	ldrb	r3, [r0, #2]
   129e0:	3b01      	subs	r3, #1
   129e2:	0922      	lsrs	r2, r4, #4
   129e4:	421a      	tst	r2, r3
   129e6:	d007      	beq.n	129f8 <dir_next+0x5c>
	dj->index = i;
   129e8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   129ea:	6833      	ldr	r3, [r6, #0]
   129ec:	3330      	adds	r3, #48	; 0x30
   129ee:	017f      	lsls	r7, r7, #5
   129f0:	19df      	adds	r7, r3, r7
   129f2:	6177      	str	r7, [r6, #20]
	return FR_OK;
   129f4:	2000      	movs	r0, #0
   129f6:	e7dd      	b.n	129b4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   129f8:	4b2c      	ldr	r3, [pc, #176]	; (12aac <dir_next+0x110>)
   129fa:	4798      	blx	r3
   129fc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   129fe:	2002      	movs	r0, #2
   12a00:	4643      	mov	r3, r8
   12a02:	2b01      	cmp	r3, #1
   12a04:	d9d6      	bls.n	129b4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12a06:	3301      	adds	r3, #1
   12a08:	d04b      	beq.n	12aa2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12a0a:	6833      	ldr	r3, [r6, #0]
   12a0c:	699a      	ldr	r2, [r3, #24]
   12a0e:	4590      	cmp	r8, r2
   12a10:	d33f      	bcc.n	12a92 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   12a12:	3002      	adds	r0, #2
   12a14:	2d00      	cmp	r5, #0
   12a16:	d0cd      	beq.n	129b4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   12a18:	68f1      	ldr	r1, [r6, #12]
   12a1a:	0018      	movs	r0, r3
   12a1c:	4b24      	ldr	r3, [pc, #144]	; (12ab0 <dir_next+0x114>)
   12a1e:	4798      	blx	r3
   12a20:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   12a22:	2007      	movs	r0, #7
   12a24:	4643      	mov	r3, r8
   12a26:	2b00      	cmp	r3, #0
   12a28:	d0c4      	beq.n	129b4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   12a2a:	3805      	subs	r0, #5
   12a2c:	2b01      	cmp	r3, #1
   12a2e:	d0c1      	beq.n	129b4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12a30:	3801      	subs	r0, #1
   12a32:	3301      	adds	r3, #1
   12a34:	d0be      	beq.n	129b4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   12a36:	2100      	movs	r1, #0
   12a38:	6830      	ldr	r0, [r6, #0]
   12a3a:	4b1e      	ldr	r3, [pc, #120]	; (12ab4 <dir_next+0x118>)
   12a3c:	4798      	blx	r3
   12a3e:	0003      	movs	r3, r0
   12a40:	2001      	movs	r0, #1
   12a42:	2b00      	cmp	r3, #0
   12a44:	d1b6      	bne.n	129b4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   12a46:	6830      	ldr	r0, [r6, #0]
   12a48:	3030      	adds	r0, #48	; 0x30
   12a4a:	2280      	movs	r2, #128	; 0x80
   12a4c:	0092      	lsls	r2, r2, #2
   12a4e:	2100      	movs	r1, #0
   12a50:	4b19      	ldr	r3, [pc, #100]	; (12ab8 <dir_next+0x11c>)
   12a52:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12a54:	6835      	ldr	r5, [r6, #0]
   12a56:	4641      	mov	r1, r8
   12a58:	0028      	movs	r0, r5
   12a5a:	4b18      	ldr	r3, [pc, #96]	; (12abc <dir_next+0x120>)
   12a5c:	4798      	blx	r3
   12a5e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a60:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12a62:	2301      	movs	r3, #1
   12a64:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a66:	6833      	ldr	r3, [r6, #0]
   12a68:	789a      	ldrb	r2, [r3, #2]
   12a6a:	42aa      	cmp	r2, r5
   12a6c:	d90e      	bls.n	12a8c <dir_next+0xf0>
						dj->fs->wflag = 1;
   12a6e:	4652      	mov	r2, sl
   12a70:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12a72:	2100      	movs	r1, #0
   12a74:	6830      	ldr	r0, [r6, #0]
   12a76:	4b0f      	ldr	r3, [pc, #60]	; (12ab4 <dir_next+0x118>)
   12a78:	4798      	blx	r3
   12a7a:	2800      	cmp	r0, #0
   12a7c:	d113      	bne.n	12aa6 <dir_next+0x10a>
						dj->fs->winsect++;
   12a7e:	6832      	ldr	r2, [r6, #0]
   12a80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12a82:	3301      	adds	r3, #1
   12a84:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a86:	3501      	adds	r5, #1
   12a88:	b2ed      	uxtb	r5, r5
   12a8a:	e7ec      	b.n	12a66 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   12a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12a8e:	1b52      	subs	r2, r2, r5
   12a90:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12a92:	4643      	mov	r3, r8
   12a94:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12a96:	4641      	mov	r1, r8
   12a98:	6830      	ldr	r0, [r6, #0]
   12a9a:	4b08      	ldr	r3, [pc, #32]	; (12abc <dir_next+0x120>)
   12a9c:	4798      	blx	r3
   12a9e:	6130      	str	r0, [r6, #16]
   12aa0:	e7a2      	b.n	129e8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12aa2:	2001      	movs	r0, #1
   12aa4:	e786      	b.n	129b4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12aa6:	2001      	movs	r0, #1
   12aa8:	e784      	b.n	129b4 <dir_next+0x18>
   12aaa:	46c0      	nop			; (mov r8, r8)
   12aac:	00012585 	.word	0x00012585
   12ab0:	00012861 	.word	0x00012861
   12ab4:	000124e5 	.word	0x000124e5
   12ab8:	00012019 	.word	0x00012019
   12abc:	0001202b 	.word	0x0001202b

00012ac0 <dir_find>:
{
   12ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ac2:	46de      	mov	lr, fp
   12ac4:	4657      	mov	r7, sl
   12ac6:	464e      	mov	r6, r9
   12ac8:	4645      	mov	r5, r8
   12aca:	b5e0      	push	{r5, r6, r7, lr}
   12acc:	b083      	sub	sp, #12
   12ace:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12ad0:	2100      	movs	r1, #0
   12ad2:	4b5a      	ldr	r3, [pc, #360]	; (12c3c <dir_find+0x17c>)
   12ad4:	4798      	blx	r3
   12ad6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   12ad8:	d000      	beq.n	12adc <dir_find+0x1c>
   12ada:	e09e      	b.n	12c1a <dir_find+0x15a>
   12adc:	23ff      	movs	r3, #255	; 0xff
   12ade:	4699      	mov	r9, r3
   12ae0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   12ae2:	4b57      	ldr	r3, [pc, #348]	; (12c40 <dir_find+0x180>)
   12ae4:	469b      	mov	fp, r3
   12ae6:	e01b      	b.n	12b20 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   12ae8:	2b0f      	cmp	r3, #15
   12aea:	d030      	beq.n	12b4e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   12aec:	4653      	mov	r3, sl
   12aee:	2b00      	cmp	r3, #0
   12af0:	d105      	bne.n	12afe <dir_find+0x3e>
   12af2:	0020      	movs	r0, r4
   12af4:	4b53      	ldr	r3, [pc, #332]	; (12c44 <dir_find+0x184>)
   12af6:	4798      	blx	r3
   12af8:	4581      	cmp	r9, r0
   12afa:	d100      	bne.n	12afe <dir_find+0x3e>
   12afc:	e08d      	b.n	12c1a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12afe:	2301      	movs	r3, #1
   12b00:	425b      	negs	r3, r3
   12b02:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   12b04:	69a8      	ldr	r0, [r5, #24]
   12b06:	7ac3      	ldrb	r3, [r0, #11]
   12b08:	07db      	lsls	r3, r3, #31
   12b0a:	d400      	bmi.n	12b0e <dir_find+0x4e>
   12b0c:	e07d      	b.n	12c0a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12b0e:	23ff      	movs	r3, #255	; 0xff
   12b10:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   12b12:	2100      	movs	r1, #0
   12b14:	0028      	movs	r0, r5
   12b16:	4b4c      	ldr	r3, [pc, #304]	; (12c48 <dir_find+0x188>)
   12b18:	4798      	blx	r3
   12b1a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   12b1c:	d000      	beq.n	12b20 <dir_find+0x60>
   12b1e:	e07c      	b.n	12c1a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   12b20:	6929      	ldr	r1, [r5, #16]
   12b22:	6828      	ldr	r0, [r5, #0]
   12b24:	47d8      	blx	fp
   12b26:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   12b28:	d177      	bne.n	12c1a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   12b2a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   12b2c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12b2e:	2e00      	cmp	r6, #0
   12b30:	d100      	bne.n	12b34 <dir_find+0x74>
   12b32:	e080      	b.n	12c36 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   12b34:	7ae2      	ldrb	r2, [r4, #11]
   12b36:	233f      	movs	r3, #63	; 0x3f
   12b38:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   12b3a:	2ee5      	cmp	r6, #229	; 0xe5
   12b3c:	d100      	bne.n	12b40 <dir_find+0x80>
   12b3e:	e077      	b.n	12c30 <dir_find+0x170>
   12b40:	0712      	lsls	r2, r2, #28
   12b42:	d5d1      	bpl.n	12ae8 <dir_find+0x28>
   12b44:	2b0f      	cmp	r3, #15
   12b46:	d002      	beq.n	12b4e <dir_find+0x8e>
			ord = 0xFF;
   12b48:	23ff      	movs	r3, #255	; 0xff
   12b4a:	469a      	mov	sl, r3
   12b4c:	e7e1      	b.n	12b12 <dir_find+0x52>
				if (dj->lfn) {
   12b4e:	69ef      	ldr	r7, [r5, #28]
   12b50:	2f00      	cmp	r7, #0
   12b52:	d0de      	beq.n	12b12 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   12b54:	0673      	lsls	r3, r6, #25
   12b56:	d518      	bpl.n	12b8a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   12b58:	7b63      	ldrb	r3, [r4, #13]
   12b5a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   12b5c:	2340      	movs	r3, #64	; 0x40
   12b5e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   12b60:	88eb      	ldrh	r3, [r5, #6]
   12b62:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12b64:	7b63      	ldrb	r3, [r4, #13]
   12b66:	9300      	str	r3, [sp, #0]
   12b68:	22ff      	movs	r2, #255	; 0xff
   12b6a:	4692      	mov	sl, r2
   12b6c:	454b      	cmp	r3, r9
   12b6e:	d1d0      	bne.n	12b12 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   12b70:	7823      	ldrb	r3, [r4, #0]
   12b72:	3abf      	subs	r2, #191	; 0xbf
   12b74:	4393      	bics	r3, r2
   12b76:	3b01      	subs	r3, #1
   12b78:	005a      	lsls	r2, r3, #1
   12b7a:	18d2      	adds	r2, r2, r3
   12b7c:	0092      	lsls	r2, r2, #2
   12b7e:	4692      	mov	sl, r2
   12b80:	449a      	add	sl, r3
	s = 0; wc = 1;
   12b82:	2201      	movs	r2, #1
   12b84:	2300      	movs	r3, #0
   12b86:	4699      	mov	r9, r3
   12b88:	e01d      	b.n	12bc6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12b8a:	45b2      	cmp	sl, r6
   12b8c:	d0ea      	beq.n	12b64 <dir_find+0xa4>
   12b8e:	23ff      	movs	r3, #255	; 0xff
   12b90:	469a      	mov	sl, r3
   12b92:	e7be      	b.n	12b12 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   12b94:	4b2d      	ldr	r3, [pc, #180]	; (12c4c <dir_find+0x18c>)
   12b96:	4798      	blx	r3
   12b98:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   12b9a:	4653      	mov	r3, sl
   12b9c:	2bfe      	cmp	r3, #254	; 0xfe
   12b9e:	d81f      	bhi.n	12be0 <dir_find+0x120>
   12ba0:	2301      	movs	r3, #1
   12ba2:	4453      	add	r3, sl
   12ba4:	4698      	mov	r8, r3
   12ba6:	4653      	mov	r3, sl
   12ba8:	005b      	lsls	r3, r3, #1
   12baa:	5bd8      	ldrh	r0, [r3, r7]
   12bac:	4b27      	ldr	r3, [pc, #156]	; (12c4c <dir_find+0x18c>)
   12bae:	4798      	blx	r3
   12bb0:	0002      	movs	r2, r0
   12bb2:	9b01      	ldr	r3, [sp, #4]
   12bb4:	4283      	cmp	r3, r0
   12bb6:	d113      	bne.n	12be0 <dir_find+0x120>
   12bb8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   12bba:	2301      	movs	r3, #1
   12bbc:	469c      	mov	ip, r3
   12bbe:	44e1      	add	r9, ip
   12bc0:	464b      	mov	r3, r9
   12bc2:	2b0d      	cmp	r3, #13
   12bc4:	d011      	beq.n	12bea <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   12bc6:	4b22      	ldr	r3, [pc, #136]	; (12c50 <dir_find+0x190>)
   12bc8:	4649      	mov	r1, r9
   12bca:	5cc9      	ldrb	r1, [r1, r3]
   12bcc:	1863      	adds	r3, r4, r1
   12bce:	785b      	ldrb	r3, [r3, #1]
   12bd0:	021b      	lsls	r3, r3, #8
   12bd2:	5c60      	ldrb	r0, [r4, r1]
   12bd4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   12bd6:	2a00      	cmp	r2, #0
   12bd8:	d1dc      	bne.n	12b94 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   12bda:	4b1e      	ldr	r3, [pc, #120]	; (12c54 <dir_find+0x194>)
   12bdc:	4298      	cmp	r0, r3
   12bde:	d0ec      	beq.n	12bba <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12be0:	9b00      	ldr	r3, [sp, #0]
   12be2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12be4:	23ff      	movs	r3, #255	; 0xff
   12be6:	469a      	mov	sl, r3
   12be8:	e793      	b.n	12b12 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   12bea:	7823      	ldrb	r3, [r4, #0]
   12bec:	065b      	lsls	r3, r3, #25
   12bee:	d506      	bpl.n	12bfe <dir_find+0x13e>
   12bf0:	2a00      	cmp	r2, #0
   12bf2:	d004      	beq.n	12bfe <dir_find+0x13e>
   12bf4:	4653      	mov	r3, sl
   12bf6:	005b      	lsls	r3, r3, #1
   12bf8:	5bdb      	ldrh	r3, [r3, r7]
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	d1f0      	bne.n	12be0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12bfe:	3e01      	subs	r6, #1
   12c00:	b2f3      	uxtb	r3, r6
   12c02:	469a      	mov	sl, r3
   12c04:	9b00      	ldr	r3, [sp, #0]
   12c06:	4699      	mov	r9, r3
   12c08:	e783      	b.n	12b12 <dir_find+0x52>
   12c0a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   12c0c:	5ce1      	ldrb	r1, [r4, r3]
   12c0e:	5cc2      	ldrb	r2, [r0, r3]
   12c10:	4291      	cmp	r1, r2
   12c12:	d10a      	bne.n	12c2a <dir_find+0x16a>
   12c14:	3301      	adds	r3, #1
   12c16:	2b0b      	cmp	r3, #11
   12c18:	d1f8      	bne.n	12c0c <dir_find+0x14c>
}
   12c1a:	0038      	movs	r0, r7
   12c1c:	b003      	add	sp, #12
   12c1e:	bc3c      	pop	{r2, r3, r4, r5}
   12c20:	4690      	mov	r8, r2
   12c22:	4699      	mov	r9, r3
   12c24:	46a2      	mov	sl, r4
   12c26:	46ab      	mov	fp, r5
   12c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12c2a:	23ff      	movs	r3, #255	; 0xff
   12c2c:	469a      	mov	sl, r3
   12c2e:	e770      	b.n	12b12 <dir_find+0x52>
			ord = 0xFF;
   12c30:	23ff      	movs	r3, #255	; 0xff
   12c32:	469a      	mov	sl, r3
   12c34:	e76d      	b.n	12b12 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12c36:	2704      	movs	r7, #4
   12c38:	e7ef      	b.n	12c1a <dir_find+0x15a>
   12c3a:	46c0      	nop			; (mov r8, r8)
   12c3c:	00012681 	.word	0x00012681
   12c40:	000124e5 	.word	0x000124e5
   12c44:	00012043 	.word	0x00012043
   12c48:	0001299d 	.word	0x0001299d
   12c4c:	00013851 	.word	0x00013851
   12c50:	0001963c 	.word	0x0001963c
   12c54:	0000ffff 	.word	0x0000ffff

00012c58 <dir_register>:
{
   12c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c5a:	46de      	mov	lr, fp
   12c5c:	4657      	mov	r7, sl
   12c5e:	464e      	mov	r6, r9
   12c60:	4645      	mov	r5, r8
   12c62:	b5e0      	push	{r5, r6, r7, lr}
   12c64:	b089      	sub	sp, #36	; 0x24
   12c66:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   12c68:	6987      	ldr	r7, [r0, #24]
   12c6a:	69c3      	ldr	r3, [r0, #28]
   12c6c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   12c6e:	ad05      	add	r5, sp, #20
   12c70:	220c      	movs	r2, #12
   12c72:	0039      	movs	r1, r7
   12c74:	0028      	movs	r0, r5
   12c76:	4ba7      	ldr	r3, [pc, #668]	; (12f14 <dir_register+0x2bc>)
   12c78:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   12c7a:	7aeb      	ldrb	r3, [r5, #11]
   12c7c:	07db      	lsls	r3, r3, #31
   12c7e:	d400      	bmi.n	12c82 <dir_register+0x2a>
   12c80:	e070      	b.n	12d64 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   12c82:	2300      	movs	r3, #0
   12c84:	72fb      	strb	r3, [r7, #11]
   12c86:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   12c88:	220b      	movs	r2, #11
   12c8a:	a905      	add	r1, sp, #20
   12c8c:	0038      	movs	r0, r7
   12c8e:	4ba1      	ldr	r3, [pc, #644]	; (12f14 <dir_register+0x2bc>)
   12c90:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12c92:	2301      	movs	r3, #1
		ns[i--] = c;
   12c94:	ad03      	add	r5, sp, #12
   12c96:	001e      	movs	r6, r3
   12c98:	46a0      	mov	r8, r4
   12c9a:	e049      	b.n	12d30 <dir_register+0xd8>
   12c9c:	3801      	subs	r0, #1
   12c9e:	1829      	adds	r1, r5, r0
   12ca0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   12ca2:	091b      	lsrs	r3, r3, #4
   12ca4:	b29b      	uxth	r3, r3
	} while (seq);
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d007      	beq.n	12cba <dir_register+0x62>
		c = (seq % 16) + '0';
   12caa:	0021      	movs	r1, r4
   12cac:	4019      	ands	r1, r3
   12cae:	000a      	movs	r2, r1
   12cb0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   12cb2:	2a39      	cmp	r2, #57	; 0x39
   12cb4:	d9f2      	bls.n	12c9c <dir_register+0x44>
   12cb6:	3207      	adds	r2, #7
   12cb8:	e7f0      	b.n	12c9c <dir_register+0x44>
	ns[i] = '~';
   12cba:	337e      	adds	r3, #126	; 0x7e
   12cbc:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   12cbe:	2800      	cmp	r0, #0
   12cc0:	d00a      	beq.n	12cd8 <dir_register+0x80>
   12cc2:	783b      	ldrb	r3, [r7, #0]
   12cc4:	2b20      	cmp	r3, #32
   12cc6:	d009      	beq.n	12cdc <dir_register+0x84>
   12cc8:	2300      	movs	r3, #0
   12cca:	3301      	adds	r3, #1
   12ccc:	4298      	cmp	r0, r3
   12cce:	d007      	beq.n	12ce0 <dir_register+0x88>
   12cd0:	5cfa      	ldrb	r2, [r7, r3]
   12cd2:	2a20      	cmp	r2, #32
   12cd4:	d1f9      	bne.n	12cca <dir_register+0x72>
   12cd6:	e009      	b.n	12cec <dir_register+0x94>
   12cd8:	0003      	movs	r3, r0
   12cda:	e007      	b.n	12cec <dir_register+0x94>
   12cdc:	2300      	movs	r3, #0
   12cde:	e005      	b.n	12cec <dir_register+0x94>
   12ce0:	0003      	movs	r3, r0
   12ce2:	e003      	b.n	12cec <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12ce4:	54fa      	strb	r2, [r7, r3]
   12ce6:	3301      	adds	r3, #1
	} while (j < 8);
   12ce8:	2b07      	cmp	r3, #7
   12cea:	d805      	bhi.n	12cf8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12cec:	2220      	movs	r2, #32
   12cee:	2807      	cmp	r0, #7
   12cf0:	d8f8      	bhi.n	12ce4 <dir_register+0x8c>
   12cf2:	5c2a      	ldrb	r2, [r5, r0]
   12cf4:	3001      	adds	r0, #1
   12cf6:	e7f5      	b.n	12ce4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   12cf8:	4640      	mov	r0, r8
   12cfa:	4b87      	ldr	r3, [pc, #540]	; (12f18 <dir_register+0x2c0>)
   12cfc:	4798      	blx	r3
			if (res != FR_OK) break;
   12cfe:	2800      	cmp	r0, #0
   12d00:	d11c      	bne.n	12d3c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   12d02:	3601      	adds	r6, #1
   12d04:	b2b6      	uxth	r6, r6
   12d06:	2e64      	cmp	r6, #100	; 0x64
   12d08:	d015      	beq.n	12d36 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   12d0a:	220b      	movs	r2, #11
   12d0c:	a905      	add	r1, sp, #20
   12d0e:	0038      	movs	r0, r7
   12d10:	4b80      	ldr	r3, [pc, #512]	; (12f14 <dir_register+0x2bc>)
   12d12:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12d14:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   12d16:	2e05      	cmp	r6, #5
   12d18:	d90a      	bls.n	12d30 <dir_register+0xd8>
   12d1a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   12d1c:	085a      	lsrs	r2, r3, #1
   12d1e:	03db      	lsls	r3, r3, #15
   12d20:	4313      	orrs	r3, r2
   12d22:	880a      	ldrh	r2, [r1, #0]
   12d24:	189b      	adds	r3, r3, r2
   12d26:	b29b      	uxth	r3, r3
   12d28:	3102      	adds	r1, #2
   12d2a:	880a      	ldrh	r2, [r1, #0]
   12d2c:	2a00      	cmp	r2, #0
   12d2e:	d1f5      	bne.n	12d1c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   12d30:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   12d32:	240f      	movs	r4, #15
   12d34:	e7b9      	b.n	12caa <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12d36:	2307      	movs	r3, #7
   12d38:	4698      	mov	r8, r3
   12d3a:	e006      	b.n	12d4a <dir_register+0xf2>
   12d3c:	4644      	mov	r4, r8
   12d3e:	4680      	mov	r8, r0
   12d40:	2e64      	cmp	r6, #100	; 0x64
   12d42:	d100      	bne.n	12d46 <dir_register+0xee>
   12d44:	e0a5      	b.n	12e92 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   12d46:	2804      	cmp	r0, #4
   12d48:	d007      	beq.n	12d5a <dir_register+0x102>
}
   12d4a:	4640      	mov	r0, r8
   12d4c:	b009      	add	sp, #36	; 0x24
   12d4e:	bc3c      	pop	{r2, r3, r4, r5}
   12d50:	4690      	mov	r8, r2
   12d52:	4699      	mov	r9, r3
   12d54:	46a2      	mov	sl, r4
   12d56:	46ab      	mov	fp, r5
   12d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   12d5a:	ab05      	add	r3, sp, #20
   12d5c:	7adb      	ldrb	r3, [r3, #11]
   12d5e:	72fb      	strb	r3, [r7, #11]
   12d60:	4653      	mov	r3, sl
   12d62:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12d64:	ab05      	add	r3, sp, #20
   12d66:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   12d68:	2201      	movs	r2, #1
   12d6a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12d6c:	079b      	lsls	r3, r3, #30
   12d6e:	d511      	bpl.n	12d94 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   12d70:	4653      	mov	r3, sl
   12d72:	881b      	ldrh	r3, [r3, #0]
   12d74:	2b00      	cmp	r3, #0
   12d76:	d01b      	beq.n	12db0 <dir_register+0x158>
   12d78:	2000      	movs	r0, #0
   12d7a:	4652      	mov	r2, sl
   12d7c:	3001      	adds	r0, #1
   12d7e:	b280      	uxth	r0, r0
   12d80:	0043      	lsls	r3, r0, #1
   12d82:	5a9b      	ldrh	r3, [r3, r2]
   12d84:	2b00      	cmp	r3, #0
   12d86:	d1f9      	bne.n	12d7c <dir_register+0x124>
		ne = (ne + 25) / 13;
   12d88:	3019      	adds	r0, #25
   12d8a:	210d      	movs	r1, #13
   12d8c:	4b63      	ldr	r3, [pc, #396]	; (12f1c <dir_register+0x2c4>)
   12d8e:	4798      	blx	r3
   12d90:	b283      	uxth	r3, r0
   12d92:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   12d94:	2100      	movs	r1, #0
   12d96:	0020      	movs	r0, r4
   12d98:	4b61      	ldr	r3, [pc, #388]	; (12f20 <dir_register+0x2c8>)
   12d9a:	4798      	blx	r3
   12d9c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   12d9e:	2800      	cmp	r0, #0
   12da0:	d1d3      	bne.n	12d4a <dir_register+0xf2>
   12da2:	4682      	mov	sl, r0
   12da4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   12da6:	4f5f      	ldr	r7, [pc, #380]	; (12f24 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   12da8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12daa:	4b5f      	ldr	r3, [pc, #380]	; (12f28 <dir_register+0x2d0>)
   12dac:	4699      	mov	r9, r3
   12dae:	e00b      	b.n	12dc8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   12db0:	2000      	movs	r0, #0
   12db2:	e7e9      	b.n	12d88 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   12db4:	1c6b      	adds	r3, r5, #1
   12db6:	b29b      	uxth	r3, r3
   12db8:	459b      	cmp	fp, r3
   12dba:	d06d      	beq.n	12e98 <dir_register+0x240>
   12dbc:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   12dbe:	2101      	movs	r1, #1
   12dc0:	0020      	movs	r0, r4
   12dc2:	47c8      	blx	r9
	} while (res == FR_OK);
   12dc4:	2800      	cmp	r0, #0
   12dc6:	d112      	bne.n	12dee <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   12dc8:	6921      	ldr	r1, [r4, #16]
   12dca:	6820      	ldr	r0, [r4, #0]
   12dcc:	47b8      	blx	r7
		if (res != FR_OK) break;
   12dce:	2800      	cmp	r0, #0
   12dd0:	d000      	beq.n	12dd4 <dir_register+0x17c>
   12dd2:	e098      	b.n	12f06 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   12dd4:	6963      	ldr	r3, [r4, #20]
   12dd6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   12dd8:	2be5      	cmp	r3, #229	; 0xe5
   12dda:	d001      	beq.n	12de0 <dir_register+0x188>
   12ddc:	2b00      	cmp	r3, #0
   12dde:	d104      	bne.n	12dea <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   12de0:	2d00      	cmp	r5, #0
   12de2:	d1e7      	bne.n	12db4 <dir_register+0x15c>
   12de4:	88e3      	ldrh	r3, [r4, #6]
   12de6:	469a      	mov	sl, r3
   12de8:	e7e4      	b.n	12db4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   12dea:	0035      	movs	r5, r6
   12dec:	e7e7      	b.n	12dbe <dir_register+0x166>
   12dee:	4680      	mov	r8, r0
   12df0:	e7ab      	b.n	12d4a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   12df2:	4651      	mov	r1, sl
   12df4:	0020      	movs	r0, r4
   12df6:	4b4a      	ldr	r3, [pc, #296]	; (12f20 <dir_register+0x2c8>)
   12df8:	4798      	blx	r3
   12dfa:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12dfc:	2800      	cmp	r0, #0
   12dfe:	d1a4      	bne.n	12d4a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   12e00:	69a0      	ldr	r0, [r4, #24]
   12e02:	4b4a      	ldr	r3, [pc, #296]	; (12f2c <dir_register+0x2d4>)
   12e04:	4798      	blx	r3
   12e06:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12e08:	46a8      	mov	r8, r5
   12e0a:	e01f      	b.n	12e4c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12e0c:	0022      	movs	r2, r4
   12e0e:	e067      	b.n	12ee0 <dir_register+0x288>
   12e10:	465e      	mov	r6, fp
   12e12:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   12e14:	4946      	ldr	r1, [pc, #280]	; (12f30 <dir_register+0x2d8>)
   12e16:	428b      	cmp	r3, r1
   12e18:	d003      	beq.n	12e22 <dir_register+0x1ca>
   12e1a:	0052      	lsls	r2, r2, #1
   12e1c:	5b93      	ldrh	r3, [r2, r6]
   12e1e:	2b00      	cmp	r3, #0
   12e20:	d103      	bne.n	12e2a <dir_register+0x1d2>
   12e22:	2340      	movs	r3, #64	; 0x40
   12e24:	464a      	mov	r2, r9
   12e26:	431a      	orrs	r2, r3
   12e28:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   12e2a:	464b      	mov	r3, r9
   12e2c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   12e2e:	2301      	movs	r3, #1
   12e30:	6822      	ldr	r2, [r4, #0]
   12e32:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   12e34:	2100      	movs	r1, #0
   12e36:	0020      	movs	r0, r4
   12e38:	4b3b      	ldr	r3, [pc, #236]	; (12f28 <dir_register+0x2d0>)
   12e3a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   12e3c:	2800      	cmp	r0, #0
   12e3e:	d166      	bne.n	12f0e <dir_register+0x2b6>
   12e40:	4645      	mov	r5, r8
   12e42:	3d01      	subs	r5, #1
   12e44:	b2ab      	uxth	r3, r5
   12e46:	4698      	mov	r8, r3
   12e48:	2b00      	cmp	r3, #0
   12e4a:	d027      	beq.n	12e9c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   12e4c:	6921      	ldr	r1, [r4, #16]
   12e4e:	6820      	ldr	r0, [r4, #0]
   12e50:	4b34      	ldr	r3, [pc, #208]	; (12f24 <dir_register+0x2cc>)
   12e52:	4798      	blx	r3
				if (res != FR_OK) break;
   12e54:	2800      	cmp	r0, #0
   12e56:	d158      	bne.n	12f0a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   12e58:	69e6      	ldr	r6, [r4, #28]
   12e5a:	6960      	ldr	r0, [r4, #20]
   12e5c:	4643      	mov	r3, r8
   12e5e:	466a      	mov	r2, sp
   12e60:	70d3      	strb	r3, [r2, #3]
   12e62:	78d3      	ldrb	r3, [r2, #3]
   12e64:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   12e66:	7913      	ldrb	r3, [r2, #4]
   12e68:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   12e6a:	230f      	movs	r3, #15
   12e6c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   12e6e:	2300      	movs	r3, #0
   12e70:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   12e72:	7683      	strb	r3, [r0, #26]
   12e74:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   12e76:	464b      	mov	r3, r9
   12e78:	3b01      	subs	r3, #1
   12e7a:	005a      	lsls	r2, r3, #1
   12e7c:	18d2      	adds	r2, r2, r3
   12e7e:	0092      	lsls	r2, r2, #2
   12e80:	18d2      	adds	r2, r2, r3
   12e82:	492c      	ldr	r1, [pc, #176]	; (12f34 <dir_register+0x2dc>)
   12e84:	000d      	movs	r5, r1
   12e86:	350d      	adds	r5, #13
	s = wc = 0;
   12e88:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12e8a:	4f29      	ldr	r7, [pc, #164]	; (12f30 <dir_register+0x2d8>)
   12e8c:	46b3      	mov	fp, r6
   12e8e:	46a4      	mov	ip, r4
   12e90:	e029      	b.n	12ee6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12e92:	2307      	movs	r3, #7
   12e94:	4698      	mov	r8, r3
   12e96:	e758      	b.n	12d4a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   12e98:	2b01      	cmp	r3, #1
   12e9a:	d8aa      	bhi.n	12df2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   12e9c:	6921      	ldr	r1, [r4, #16]
   12e9e:	6820      	ldr	r0, [r4, #0]
   12ea0:	4b20      	ldr	r3, [pc, #128]	; (12f24 <dir_register+0x2cc>)
   12ea2:	4798      	blx	r3
   12ea4:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12ea6:	2800      	cmp	r0, #0
   12ea8:	d000      	beq.n	12eac <dir_register+0x254>
   12eaa:	e74e      	b.n	12d4a <dir_register+0xf2>
			dir = dj->dir;
   12eac:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   12eae:	2220      	movs	r2, #32
   12eb0:	2100      	movs	r1, #0
   12eb2:	0028      	movs	r0, r5
   12eb4:	4b20      	ldr	r3, [pc, #128]	; (12f38 <dir_register+0x2e0>)
   12eb6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   12eb8:	220b      	movs	r2, #11
   12eba:	69a1      	ldr	r1, [r4, #24]
   12ebc:	0028      	movs	r0, r5
   12ebe:	4b15      	ldr	r3, [pc, #84]	; (12f14 <dir_register+0x2bc>)
   12ec0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   12ec2:	69a3      	ldr	r3, [r4, #24]
   12ec4:	7ada      	ldrb	r2, [r3, #11]
   12ec6:	2318      	movs	r3, #24
   12ec8:	4013      	ands	r3, r2
   12eca:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   12ecc:	6823      	ldr	r3, [r4, #0]
   12ece:	2201      	movs	r2, #1
   12ed0:	711a      	strb	r2, [r3, #4]
   12ed2:	e73a      	b.n	12d4a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12ed4:	780c      	ldrb	r4, [r1, #0]
   12ed6:	26ff      	movs	r6, #255	; 0xff
   12ed8:	5506      	strb	r6, [r0, r4]
   12eda:	1904      	adds	r4, r0, r4
   12edc:	26ff      	movs	r6, #255	; 0xff
   12ede:	7066      	strb	r6, [r4, #1]
   12ee0:	3101      	adds	r1, #1
	} while (++s < 13);
   12ee2:	42a9      	cmp	r1, r5
   12ee4:	d094      	beq.n	12e10 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12ee6:	42bb      	cmp	r3, r7
   12ee8:	d0f4      	beq.n	12ed4 <dir_register+0x27c>
   12eea:	1c54      	adds	r4, r2, #1
   12eec:	0052      	lsls	r2, r2, #1
   12eee:	465b      	mov	r3, fp
   12ef0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12ef2:	780a      	ldrb	r2, [r1, #0]
   12ef4:	5483      	strb	r3, [r0, r2]
   12ef6:	1882      	adds	r2, r0, r2
   12ef8:	0a1e      	lsrs	r6, r3, #8
   12efa:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   12efc:	2b00      	cmp	r3, #0
   12efe:	d185      	bne.n	12e0c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12f00:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   12f02:	003b      	movs	r3, r7
   12f04:	e7ec      	b.n	12ee0 <dir_register+0x288>
   12f06:	4680      	mov	r8, r0
   12f08:	e71f      	b.n	12d4a <dir_register+0xf2>
   12f0a:	4680      	mov	r8, r0
   12f0c:	e71d      	b.n	12d4a <dir_register+0xf2>
   12f0e:	4680      	mov	r8, r0
   12f10:	e71b      	b.n	12d4a <dir_register+0xf2>
   12f12:	46c0      	nop			; (mov r8, r8)
   12f14:	00012005 	.word	0x00012005
   12f18:	00012ac1 	.word	0x00012ac1
   12f1c:	00016cd1 	.word	0x00016cd1
   12f20:	00012681 	.word	0x00012681
   12f24:	000124e5 	.word	0x000124e5
   12f28:	0001299d 	.word	0x0001299d
   12f2c:	00012043 	.word	0x00012043
   12f30:	0000ffff 	.word	0x0000ffff
   12f34:	0001963c 	.word	0x0001963c
   12f38:	00012019 	.word	0x00012019

00012f3c <sync>:
{
   12f3c:	b570      	push	{r4, r5, r6, lr}
   12f3e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   12f40:	2100      	movs	r1, #0
   12f42:	4b2c      	ldr	r3, [pc, #176]	; (12ff4 <sync+0xb8>)
   12f44:	4798      	blx	r3
	if (res == FR_OK) {
   12f46:	2800      	cmp	r0, #0
   12f48:	d10a      	bne.n	12f60 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   12f4a:	7823      	ldrb	r3, [r4, #0]
   12f4c:	2b03      	cmp	r3, #3
   12f4e:	d008      	beq.n	12f62 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   12f50:	7860      	ldrb	r0, [r4, #1]
   12f52:	2200      	movs	r2, #0
   12f54:	2100      	movs	r1, #0
   12f56:	4b28      	ldr	r3, [pc, #160]	; (12ff8 <sync+0xbc>)
   12f58:	4798      	blx	r3
   12f5a:	1e43      	subs	r3, r0, #1
   12f5c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   12f5e:	b2c0      	uxtb	r0, r0
}
   12f60:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   12f62:	7963      	ldrb	r3, [r4, #5]
   12f64:	2b00      	cmp	r3, #0
   12f66:	d0f3      	beq.n	12f50 <sync+0x14>
			fs->winsect = 0;
   12f68:	2600      	movs	r6, #0
   12f6a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   12f6c:	0025      	movs	r5, r4
   12f6e:	3530      	adds	r5, #48	; 0x30
   12f70:	2280      	movs	r2, #128	; 0x80
   12f72:	0092      	lsls	r2, r2, #2
   12f74:	2100      	movs	r1, #0
   12f76:	0028      	movs	r0, r5
   12f78:	4b20      	ldr	r3, [pc, #128]	; (12ffc <sync+0xc0>)
   12f7a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   12f7c:	2255      	movs	r2, #85	; 0x55
   12f7e:	4b20      	ldr	r3, [pc, #128]	; (13000 <sync+0xc4>)
   12f80:	54e2      	strb	r2, [r4, r3]
   12f82:	3255      	adds	r2, #85	; 0x55
   12f84:	4b1f      	ldr	r3, [pc, #124]	; (13004 <sync+0xc8>)
   12f86:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   12f88:	3bde      	subs	r3, #222	; 0xde
   12f8a:	3bff      	subs	r3, #255	; 0xff
   12f8c:	3a7a      	subs	r2, #122	; 0x7a
   12f8e:	54a3      	strb	r3, [r4, r2]
   12f90:	3201      	adds	r2, #1
   12f92:	54a3      	strb	r3, [r4, r2]
   12f94:	330f      	adds	r3, #15
   12f96:	3201      	adds	r2, #1
   12f98:	54a3      	strb	r3, [r4, r2]
   12f9a:	320f      	adds	r2, #15
   12f9c:	2133      	movs	r1, #51	; 0x33
   12f9e:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   12fa0:	313f      	adds	r1, #63	; 0x3f
   12fa2:	2085      	movs	r0, #133	; 0x85
   12fa4:	0080      	lsls	r0, r0, #2
   12fa6:	5421      	strb	r1, [r4, r0]
   12fa8:	4817      	ldr	r0, [pc, #92]	; (13008 <sync+0xcc>)
   12faa:	5421      	strb	r1, [r4, r0]
   12fac:	4917      	ldr	r1, [pc, #92]	; (1300c <sync+0xd0>)
   12fae:	5462      	strb	r2, [r4, r1]
   12fb0:	4a17      	ldr	r2, [pc, #92]	; (13010 <sync+0xd4>)
   12fb2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   12fb4:	6923      	ldr	r3, [r4, #16]
   12fb6:	3201      	adds	r2, #1
   12fb8:	54a3      	strb	r3, [r4, r2]
   12fba:	0a19      	lsrs	r1, r3, #8
   12fbc:	4a15      	ldr	r2, [pc, #84]	; (13014 <sync+0xd8>)
   12fbe:	54a1      	strb	r1, [r4, r2]
   12fc0:	0c19      	lsrs	r1, r3, #16
   12fc2:	4a15      	ldr	r2, [pc, #84]	; (13018 <sync+0xdc>)
   12fc4:	54a1      	strb	r1, [r4, r2]
   12fc6:	0e1b      	lsrs	r3, r3, #24
   12fc8:	4a14      	ldr	r2, [pc, #80]	; (1301c <sync+0xe0>)
   12fca:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   12fcc:	68e3      	ldr	r3, [r4, #12]
   12fce:	3201      	adds	r2, #1
   12fd0:	54a3      	strb	r3, [r4, r2]
   12fd2:	0a19      	lsrs	r1, r3, #8
   12fd4:	4a12      	ldr	r2, [pc, #72]	; (13020 <sync+0xe4>)
   12fd6:	54a1      	strb	r1, [r4, r2]
   12fd8:	0c19      	lsrs	r1, r3, #16
   12fda:	4a12      	ldr	r2, [pc, #72]	; (13024 <sync+0xe8>)
   12fdc:	54a1      	strb	r1, [r4, r2]
   12fde:	0e1b      	lsrs	r3, r3, #24
   12fe0:	4a11      	ldr	r2, [pc, #68]	; (13028 <sync+0xec>)
   12fe2:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   12fe4:	7860      	ldrb	r0, [r4, #1]
   12fe6:	2301      	movs	r3, #1
   12fe8:	6962      	ldr	r2, [r4, #20]
   12fea:	0029      	movs	r1, r5
   12fec:	4d0f      	ldr	r5, [pc, #60]	; (1302c <sync+0xf0>)
   12fee:	47a8      	blx	r5
			fs->fsi_flag = 0;
   12ff0:	7166      	strb	r6, [r4, #5]
   12ff2:	e7ad      	b.n	12f50 <sync+0x14>
   12ff4:	000124e5 	.word	0x000124e5
   12ff8:	00011f49 	.word	0x00011f49
   12ffc:	00012019 	.word	0x00012019
   13000:	0000022e 	.word	0x0000022e
   13004:	0000022f 	.word	0x0000022f
   13008:	00000215 	.word	0x00000215
   1300c:	00000216 	.word	0x00000216
   13010:	00000217 	.word	0x00000217
   13014:	00000219 	.word	0x00000219
   13018:	0000021a 	.word	0x0000021a
   1301c:	0000021b 	.word	0x0000021b
   13020:	0000021d 	.word	0x0000021d
   13024:	0000021e 	.word	0x0000021e
   13028:	0000021f 	.word	0x0000021f
   1302c:	00011ec5 	.word	0x00011ec5

00013030 <follow_path>:
{
   13030:	b5f0      	push	{r4, r5, r6, r7, lr}
   13032:	46de      	mov	lr, fp
   13034:	4657      	mov	r7, sl
   13036:	464e      	mov	r6, r9
   13038:	4645      	mov	r5, r8
   1303a:	b5e0      	push	{r5, r6, r7, lr}
   1303c:	b083      	sub	sp, #12
   1303e:	4682      	mov	sl, r0
   13040:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   13042:	780b      	ldrb	r3, [r1, #0]
   13044:	2b2f      	cmp	r3, #47	; 0x2f
   13046:	d00f      	beq.n	13068 <follow_path+0x38>
   13048:	2b5c      	cmp	r3, #92	; 0x5c
   1304a:	d00d      	beq.n	13068 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   1304c:	2300      	movs	r3, #0
   1304e:	4652      	mov	r2, sl
   13050:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   13052:	782b      	ldrb	r3, [r5, #0]
   13054:	4657      	mov	r7, sl
   13056:	2b1f      	cmp	r3, #31
   13058:	d809      	bhi.n	1306e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   1305a:	2100      	movs	r1, #0
   1305c:	4650      	mov	r0, sl
   1305e:	4bb2      	ldr	r3, [pc, #712]	; (13328 <follow_path+0x2f8>)
   13060:	4798      	blx	r3
		dj->dir = 0;
   13062:	2300      	movs	r3, #0
   13064:	617b      	str	r3, [r7, #20]
   13066:	e13a      	b.n	132de <follow_path+0x2ae>
		path++;
   13068:	3501      	adds	r5, #1
   1306a:	e7ef      	b.n	1304c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   1306c:	3501      	adds	r5, #1
   1306e:	7828      	ldrb	r0, [r5, #0]
   13070:	282f      	cmp	r0, #47	; 0x2f
   13072:	d0fb      	beq.n	1306c <follow_path+0x3c>
   13074:	285c      	cmp	r0, #92	; 0x5c
   13076:	d0f9      	beq.n	1306c <follow_path+0x3c>
	lfn = dj->lfn;
   13078:	69fb      	ldr	r3, [r7, #28]
   1307a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   1307c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1307e:	281f      	cmp	r0, #31
   13080:	d800      	bhi.n	13084 <follow_path+0x54>
   13082:	e13b      	b.n	132fc <follow_path+0x2cc>
   13084:	282f      	cmp	r0, #47	; 0x2f
   13086:	d100      	bne.n	1308a <follow_path+0x5a>
   13088:	e13b      	b.n	13302 <follow_path+0x2d2>
   1308a:	285c      	cmp	r0, #92	; 0x5c
   1308c:	d100      	bne.n	13090 <follow_path+0x60>
   1308e:	e13b      	b.n	13308 <follow_path+0x2d8>
   13090:	1c6e      	adds	r6, r5, #1
   13092:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   13094:	2380      	movs	r3, #128	; 0x80
   13096:	005b      	lsls	r3, r3, #1
   13098:	4698      	mov	r8, r3
   1309a:	46bb      	mov	fp, r7
   1309c:	002b      	movs	r3, r5
   1309e:	0025      	movs	r5, r4
   130a0:	0034      	movs	r4, r6
   130a2:	4656      	mov	r6, sl
   130a4:	4699      	mov	r9, r3
   130a6:	e011      	b.n	130cc <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   130a8:	2b00      	cmp	r3, #0
   130aa:	d135      	bne.n	13118 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   130ac:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   130ae:	1c6b      	adds	r3, r5, #1
   130b0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   130b2:	281f      	cmp	r0, #31
   130b4:	d91e      	bls.n	130f4 <follow_path+0xc4>
   130b6:	282f      	cmp	r0, #47	; 0x2f
   130b8:	d100      	bne.n	130bc <follow_path+0x8c>
   130ba:	e128      	b.n	1330e <follow_path+0x2de>
   130bc:	285c      	cmp	r0, #92	; 0x5c
   130be:	d100      	bne.n	130c2 <follow_path+0x92>
   130c0:	e142      	b.n	13348 <follow_path+0x318>
   130c2:	3602      	adds	r6, #2
   130c4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   130c6:	4543      	cmp	r3, r8
   130c8:	d026      	beq.n	13118 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   130ca:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   130cc:	2101      	movs	r1, #1
   130ce:	4b97      	ldr	r3, [pc, #604]	; (1332c <follow_path+0x2fc>)
   130d0:	4798      	blx	r3
   130d2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   130d4:	d020      	beq.n	13118 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   130d6:	287f      	cmp	r0, #127	; 0x7f
   130d8:	d8e8      	bhi.n	130ac <follow_path+0x7c>
	while (*str && *str != chr) str++;
   130da:	2822      	cmp	r0, #34	; 0x22
   130dc:	d100      	bne.n	130e0 <follow_path+0xb0>
   130de:	e0fd      	b.n	132dc <follow_path+0x2ac>
   130e0:	232a      	movs	r3, #42	; 0x2a
   130e2:	4a93      	ldr	r2, [pc, #588]	; (13330 <follow_path+0x300>)
   130e4:	b29f      	uxth	r7, r3
   130e6:	428f      	cmp	r7, r1
   130e8:	d0de      	beq.n	130a8 <follow_path+0x78>
   130ea:	3201      	adds	r2, #1
   130ec:	7813      	ldrb	r3, [r2, #0]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d1f8      	bne.n	130e4 <follow_path+0xb4>
   130f2:	e7db      	b.n	130ac <follow_path+0x7c>
   130f4:	002c      	movs	r4, r5
   130f6:	465f      	mov	r7, fp
   130f8:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   130fa:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   130fc:	2604      	movs	r6, #4
   130fe:	e10b      	b.n	13318 <follow_path+0x2e8>
		di--;
   13100:	3c01      	subs	r4, #1
   13102:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   13104:	2c00      	cmp	r4, #0
   13106:	d100      	bne.n	1310a <follow_path+0xda>
   13108:	e0e8      	b.n	132dc <follow_path+0x2ac>
		w = lfn[di-1];
   1310a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   1310c:	2a20      	cmp	r2, #32
   1310e:	d0f7      	beq.n	13100 <follow_path+0xd0>
   13110:	2a2e      	cmp	r2, #46	; 0x2e
   13112:	d0f5      	beq.n	13100 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   13114:	2c00      	cmp	r4, #0
   13116:	d101      	bne.n	1311c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13118:	2006      	movs	r0, #6
	return res;
   1311a:	e0e0      	b.n	132de <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   1311c:	0063      	lsls	r3, r4, #1
   1311e:	4698      	mov	r8, r3
   13120:	2300      	movs	r3, #0
   13122:	4652      	mov	r2, sl
   13124:	4641      	mov	r1, r8
   13126:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   13128:	220b      	movs	r2, #11
   1312a:	2120      	movs	r1, #32
   1312c:	69b8      	ldr	r0, [r7, #24]
   1312e:	4b81      	ldr	r3, [pc, #516]	; (13334 <follow_path+0x304>)
   13130:	4798      	blx	r3
   13132:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   13134:	2300      	movs	r3, #0
   13136:	e001      	b.n	1313c <follow_path+0x10c>
   13138:	3301      	adds	r3, #1
   1313a:	3202      	adds	r2, #2
   1313c:	8811      	ldrh	r1, [r2, #0]
   1313e:	2920      	cmp	r1, #32
   13140:	d0fa      	beq.n	13138 <follow_path+0x108>
   13142:	292e      	cmp	r1, #46	; 0x2e
   13144:	d0f8      	beq.n	13138 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   13146:	2b00      	cmp	r3, #0
   13148:	d001      	beq.n	1314e <follow_path+0x11e>
   1314a:	2203      	movs	r2, #3
   1314c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1314e:	4652      	mov	r2, sl
   13150:	4442      	add	r2, r8
   13152:	3a02      	subs	r2, #2
   13154:	8812      	ldrh	r2, [r2, #0]
   13156:	2a2e      	cmp	r2, #46	; 0x2e
   13158:	d009      	beq.n	1316e <follow_path+0x13e>
   1315a:	4642      	mov	r2, r8
   1315c:	3a04      	subs	r2, #4
   1315e:	4452      	add	r2, sl
   13160:	3c01      	subs	r4, #1
   13162:	2c00      	cmp	r4, #0
   13164:	d003      	beq.n	1316e <follow_path+0x13e>
   13166:	3a02      	subs	r2, #2
   13168:	8851      	ldrh	r1, [r2, #2]
   1316a:	292e      	cmp	r1, #46	; 0x2e
   1316c:	d1f8      	bne.n	13160 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   1316e:	2208      	movs	r2, #8
   13170:	9201      	str	r2, [sp, #4]
   13172:	2200      	movs	r2, #0
   13174:	4693      	mov	fp, r2
   13176:	4691      	mov	r9, r2
   13178:	46a0      	mov	r8, r4
   1317a:	e006      	b.n	1318a <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1317c:	4544      	cmp	r4, r8
   1317e:	d100      	bne.n	13182 <follow_path+0x152>
   13180:	e0e6      	b.n	13350 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   13182:	2303      	movs	r3, #3
   13184:	431e      	orrs	r6, r3
   13186:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   13188:	0023      	movs	r3, r4
   1318a:	1c5c      	adds	r4, r3, #1
   1318c:	005b      	lsls	r3, r3, #1
   1318e:	4652      	mov	r2, sl
   13190:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   13192:	2800      	cmp	r0, #0
   13194:	d02c      	beq.n	131f0 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   13196:	2820      	cmp	r0, #32
   13198:	d0f3      	beq.n	13182 <follow_path+0x152>
   1319a:	282e      	cmp	r0, #46	; 0x2e
   1319c:	d0ee      	beq.n	1317c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1319e:	9b01      	ldr	r3, [sp, #4]
   131a0:	459b      	cmp	fp, r3
   131a2:	d219      	bcs.n	131d8 <follow_path+0x1a8>
   131a4:	4544      	cmp	r4, r8
   131a6:	d100      	bne.n	131aa <follow_path+0x17a>
   131a8:	e0d2      	b.n	13350 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   131aa:	287f      	cmp	r0, #127	; 0x7f
   131ac:	d85e      	bhi.n	1326c <follow_path+0x23c>
	while (*str && *str != chr) str++;
   131ae:	282b      	cmp	r0, #43	; 0x2b
   131b0:	d06e      	beq.n	13290 <follow_path+0x260>
   131b2:	232c      	movs	r3, #44	; 0x2c
   131b4:	4a60      	ldr	r2, [pc, #384]	; (13338 <follow_path+0x308>)
   131b6:	b299      	uxth	r1, r3
   131b8:	4281      	cmp	r1, r0
   131ba:	d067      	beq.n	1328c <follow_path+0x25c>
   131bc:	3201      	adds	r2, #1
   131be:	7813      	ldrb	r3, [r2, #0]
   131c0:	2b00      	cmp	r3, #0
   131c2:	d1f8      	bne.n	131b6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   131c4:	0003      	movs	r3, r0
   131c6:	3b41      	subs	r3, #65	; 0x41
   131c8:	b29b      	uxth	r3, r3
   131ca:	2b19      	cmp	r3, #25
   131cc:	d86c      	bhi.n	132a8 <follow_path+0x278>
					b |= 2;
   131ce:	2302      	movs	r3, #2
   131d0:	464a      	mov	r2, r9
   131d2:	431a      	orrs	r2, r3
   131d4:	4691      	mov	r9, r2
   131d6:	e05f      	b.n	13298 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	2b0b      	cmp	r3, #11
   131dc:	d03b      	beq.n	13256 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   131de:	4544      	cmp	r4, r8
   131e0:	d100      	bne.n	131e4 <follow_path+0x1b4>
   131e2:	e0b9      	b.n	13358 <follow_path+0x328>
   131e4:	2303      	movs	r3, #3
   131e6:	431e      	orrs	r6, r3
   131e8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   131ea:	4544      	cmp	r4, r8
   131ec:	d800      	bhi.n	131f0 <follow_path+0x1c0>
   131ee:	e0b3      	b.n	13358 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   131f0:	69bb      	ldr	r3, [r7, #24]
   131f2:	781a      	ldrb	r2, [r3, #0]
   131f4:	2ae5      	cmp	r2, #229	; 0xe5
   131f6:	d036      	beq.n	13266 <follow_path+0x236>
	if (ni == 8) b <<= 2;
   131f8:	9b01      	ldr	r3, [sp, #4]
   131fa:	2b08      	cmp	r3, #8
   131fc:	d060      	beq.n	132c0 <follow_path+0x290>
   131fe:	230c      	movs	r3, #12
   13200:	464a      	mov	r2, r9
   13202:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   13204:	2b0c      	cmp	r3, #12
   13206:	d060      	beq.n	132ca <follow_path+0x29a>
   13208:	43d2      	mvns	r2, r2
   1320a:	0792      	lsls	r2, r2, #30
   1320c:	d05d      	beq.n	132ca <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   1320e:	07b2      	lsls	r2, r6, #30
   13210:	d406      	bmi.n	13220 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   13212:	2203      	movs	r2, #3
   13214:	4649      	mov	r1, r9
   13216:	400a      	ands	r2, r1
   13218:	2a01      	cmp	r2, #1
   1321a:	d059      	beq.n	132d0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1321c:	2b04      	cmp	r3, #4
   1321e:	d05a      	beq.n	132d6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   13220:	69bb      	ldr	r3, [r7, #24]
   13222:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   13224:	0038      	movs	r0, r7
   13226:	4b45      	ldr	r3, [pc, #276]	; (1333c <follow_path+0x30c>)
   13228:	4798      	blx	r3
			ns = *(dj->fn+NS);
   1322a:	69bb      	ldr	r3, [r7, #24]
   1322c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   1322e:	2800      	cmp	r0, #0
   13230:	d15c      	bne.n	132ec <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   13232:	075b      	lsls	r3, r3, #29
   13234:	d453      	bmi.n	132de <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   13236:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   13238:	7ad3      	ldrb	r3, [r2, #11]
   1323a:	06db      	lsls	r3, r3, #27
   1323c:	d55c      	bpl.n	132f8 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   1323e:	7d51      	ldrb	r1, [r2, #21]
   13240:	0209      	lsls	r1, r1, #8
   13242:	7d13      	ldrb	r3, [r2, #20]
   13244:	430b      	orrs	r3, r1
   13246:	041b      	lsls	r3, r3, #16
   13248:	7ed1      	ldrb	r1, [r2, #27]
   1324a:	0209      	lsls	r1, r1, #8
   1324c:	7e92      	ldrb	r2, [r2, #26]
   1324e:	430a      	orrs	r2, r1
   13250:	4313      	orrs	r3, r2
   13252:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   13254:	e70b      	b.n	1306e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   13256:	2303      	movs	r3, #3
   13258:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   1325a:	69bb      	ldr	r3, [r7, #24]
   1325c:	781a      	ldrb	r2, [r3, #0]
   1325e:	2ae5      	cmp	r2, #229	; 0xe5
   13260:	d1cd      	bne.n	131fe <follow_path+0x1ce>
   13262:	220b      	movs	r2, #11
   13264:	9201      	str	r2, [sp, #4]
   13266:	2205      	movs	r2, #5
   13268:	701a      	strb	r2, [r3, #0]
   1326a:	e7c5      	b.n	131f8 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1326c:	2100      	movs	r1, #0
   1326e:	4b2f      	ldr	r3, [pc, #188]	; (1332c <follow_path+0x2fc>)
   13270:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   13272:	2800      	cmp	r0, #0
   13274:	d100      	bne.n	13278 <follow_path+0x248>
   13276:	e079      	b.n	1336c <follow_path+0x33c>
   13278:	4b31      	ldr	r3, [pc, #196]	; (13340 <follow_path+0x310>)
   1327a:	469c      	mov	ip, r3
   1327c:	4460      	add	r0, ip
   1327e:	3880      	subs	r0, #128	; 0x80
   13280:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   13282:	2302      	movs	r3, #2
   13284:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   13286:	2800      	cmp	r0, #0
   13288:	d002      	beq.n	13290 <follow_path+0x260>
   1328a:	e790      	b.n	131ae <follow_path+0x17e>
   1328c:	2b00      	cmp	r3, #0
   1328e:	d099      	beq.n	131c4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   13290:	2303      	movs	r3, #3
   13292:	431e      	orrs	r6, r3
   13294:	b2f6      	uxtb	r6, r6
   13296:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   13298:	69bb      	ldr	r3, [r7, #24]
   1329a:	465a      	mov	r2, fp
   1329c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   1329e:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   132a0:	2201      	movs	r2, #1
   132a2:	4694      	mov	ip, r2
   132a4:	44e3      	add	fp, ip
   132a6:	e770      	b.n	1318a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   132a8:	0003      	movs	r3, r0
   132aa:	3b61      	subs	r3, #97	; 0x61
   132ac:	b29b      	uxth	r3, r3
   132ae:	2b19      	cmp	r3, #25
   132b0:	d8f2      	bhi.n	13298 <follow_path+0x268>
						b |= 1; w -= 0x20;
   132b2:	2301      	movs	r3, #1
   132b4:	464a      	mov	r2, r9
   132b6:	431a      	orrs	r2, r3
   132b8:	4691      	mov	r9, r2
   132ba:	3820      	subs	r0, #32
   132bc:	b280      	uxth	r0, r0
   132be:	e7eb      	b.n	13298 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   132c0:	464b      	mov	r3, r9
   132c2:	009b      	lsls	r3, r3, #2
   132c4:	b2db      	uxtb	r3, r3
   132c6:	4699      	mov	r9, r3
   132c8:	e799      	b.n	131fe <follow_path+0x1ce>
		cf |= NS_LFN;
   132ca:	2202      	movs	r2, #2
   132cc:	4316      	orrs	r6, r2
   132ce:	e79e      	b.n	1320e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   132d0:	320f      	adds	r2, #15
   132d2:	4316      	orrs	r6, r2
   132d4:	e7a2      	b.n	1321c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   132d6:	3304      	adds	r3, #4
   132d8:	431e      	orrs	r6, r3
   132da:	e7a1      	b.n	13220 <follow_path+0x1f0>
   132dc:	2006      	movs	r0, #6
}
   132de:	b003      	add	sp, #12
   132e0:	bc3c      	pop	{r2, r3, r4, r5}
   132e2:	4690      	mov	r8, r2
   132e4:	4699      	mov	r9, r3
   132e6:	46a2      	mov	sl, r4
   132e8:	46ab      	mov	fp, r5
   132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   132ec:	2804      	cmp	r0, #4
   132ee:	d1f6      	bne.n	132de <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   132f0:	075b      	lsls	r3, r3, #29
   132f2:	d4f4      	bmi.n	132de <follow_path+0x2ae>
   132f4:	3001      	adds	r0, #1
   132f6:	e7f2      	b.n	132de <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   132f8:	2005      	movs	r0, #5
   132fa:	e7f0      	b.n	132de <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   132fc:	2301      	movs	r3, #1
	si = di = 0;
   132fe:	2400      	movs	r4, #0
   13300:	e6fb      	b.n	130fa <follow_path+0xca>
		w = p[si++];					/* Get a character */
   13302:	2301      	movs	r3, #1
	si = di = 0;
   13304:	2400      	movs	r4, #0
   13306:	e005      	b.n	13314 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   13308:	2301      	movs	r3, #1
	si = di = 0;
   1330a:	2400      	movs	r4, #0
   1330c:	e002      	b.n	13314 <follow_path+0x2e4>
   1330e:	002c      	movs	r4, r5
   13310:	465f      	mov	r7, fp
   13312:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   13314:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   13316:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   13318:	2c00      	cmp	r4, #0
   1331a:	d0df      	beq.n	132dc <follow_path+0x2ac>
   1331c:	4b09      	ldr	r3, [pc, #36]	; (13344 <follow_path+0x314>)
   1331e:	18e3      	adds	r3, r4, r3
   13320:	005b      	lsls	r3, r3, #1
   13322:	4453      	add	r3, sl
   13324:	e6f1      	b.n	1310a <follow_path+0xda>
   13326:	46c0      	nop			; (mov r8, r8)
   13328:	00012681 	.word	0x00012681
   1332c:	00013809 	.word	0x00013809
   13330:	000196cd 	.word	0x000196cd
   13334:	00012019 	.word	0x00012019
   13338:	000196d9 	.word	0x000196d9
   1333c:	00012ac1 	.word	0x00012ac1
   13340:	0001964c 	.word	0x0001964c
   13344:	7fffffff 	.word	0x7fffffff
   13348:	002c      	movs	r4, r5
   1334a:	465f      	mov	r7, fp
   1334c:	464d      	mov	r5, r9
   1334e:	e7e1      	b.n	13314 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	2b0b      	cmp	r3, #11
   13354:	d100      	bne.n	13358 <follow_path+0x328>
   13356:	e77e      	b.n	13256 <follow_path+0x226>
			b <<= 2; continue;
   13358:	464b      	mov	r3, r9
   1335a:	009b      	lsls	r3, r3, #2
   1335c:	b2db      	uxtb	r3, r3
   1335e:	4699      	mov	r9, r3
   13360:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   13362:	220b      	movs	r2, #11
   13364:	9201      	str	r2, [sp, #4]
   13366:	3a03      	subs	r2, #3
   13368:	4693      	mov	fp, r2
   1336a:	e70e      	b.n	1318a <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   1336c:	2302      	movs	r3, #2
   1336e:	431e      	orrs	r6, r3
   13370:	e78e      	b.n	13290 <follow_path+0x260>
   13372:	46c0      	nop			; (mov r8, r8)

00013374 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   13374:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   13376:	2807      	cmp	r0, #7
   13378:	d901      	bls.n	1337e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   1337a:	0018      	movs	r0, r3
   1337c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   1337e:	0083      	lsls	r3, r0, #2
   13380:	4a07      	ldr	r2, [pc, #28]	; (133a0 <f_mount+0x2c>)
   13382:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   13384:	2b00      	cmp	r3, #0
   13386:	d001      	beq.n	1338c <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   13388:	2200      	movs	r2, #0
   1338a:	701a      	strb	r2, [r3, #0]
	if (fs) {
   1338c:	2900      	cmp	r1, #0
   1338e:	d001      	beq.n	13394 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   13390:	2300      	movs	r3, #0
   13392:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   13394:	0080      	lsls	r0, r0, #2
   13396:	4b02      	ldr	r3, [pc, #8]	; (133a0 <f_mount+0x2c>)
   13398:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   1339a:	2300      	movs	r3, #0
   1339c:	e7ed      	b.n	1337a <f_mount+0x6>
   1339e:	46c0      	nop			; (mov r8, r8)
   133a0:	20000418 	.word	0x20000418

000133a4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   133a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   133a6:	46c6      	mov	lr, r8
   133a8:	b500      	push	{lr}
   133aa:	4c59      	ldr	r4, [pc, #356]	; (13510 <f_open+0x16c>)
   133ac:	44a5      	add	sp, r4
   133ae:	0005      	movs	r5, r0
   133b0:	9101      	str	r1, [sp, #4]
   133b2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   133b4:	2300      	movs	r3, #0
   133b6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   133b8:	261f      	movs	r6, #31
   133ba:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   133bc:	221e      	movs	r2, #30
   133be:	403a      	ands	r2, r7
   133c0:	a985      	add	r1, sp, #532	; 0x214
   133c2:	a801      	add	r0, sp, #4
   133c4:	4b53      	ldr	r3, [pc, #332]	; (13514 <f_open+0x170>)
   133c6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   133c8:	ab82      	add	r3, sp, #520	; 0x208
   133ca:	938b      	str	r3, [sp, #556]	; 0x22c
   133cc:	ab02      	add	r3, sp, #8
   133ce:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   133d0:	2800      	cmp	r0, #0
   133d2:	d006      	beq.n	133e2 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   133d4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   133d6:	231c      	movs	r3, #28
   133d8:	423b      	tst	r3, r7
   133da:	d145      	bne.n	13468 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   133dc:	2800      	cmp	r0, #0
   133de:	d13d      	bne.n	1345c <f_open+0xb8>
   133e0:	e00c      	b.n	133fc <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   133e2:	9901      	ldr	r1, [sp, #4]
   133e4:	a885      	add	r0, sp, #532	; 0x214
   133e6:	4b4c      	ldr	r3, [pc, #304]	; (13518 <f_open+0x174>)
   133e8:	4798      	blx	r3
	dir = dj.dir;
   133ea:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   133ec:	2800      	cmp	r0, #0
   133ee:	d1f2      	bne.n	133d6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
   133f0:	2c00      	cmp	r4, #0
   133f2:	d100      	bne.n	133f6 <f_open+0x52>
   133f4:	e086      	b.n	13504 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   133f6:	231c      	movs	r3, #28
   133f8:	423b      	tst	r3, r7
   133fa:	d146      	bne.n	1348a <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   133fc:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   133fe:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13400:	06da      	lsls	r2, r3, #27
   13402:	d42b      	bmi.n	1345c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   13404:	07ba      	lsls	r2, r7, #30
   13406:	d502      	bpl.n	1340e <f_open+0x6a>
					res = FR_DENIED;
   13408:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1340a:	07db      	lsls	r3, r3, #31
   1340c:	d426      	bmi.n	1345c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1340e:	073b      	lsls	r3, r7, #28
   13410:	d501      	bpl.n	13416 <f_open+0x72>
			mode |= FA__WRITTEN;
   13412:	2320      	movs	r3, #32
   13414:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   13416:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1341a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   1341c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   1341e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   13420:	7d62      	ldrb	r2, [r4, #21]
   13422:	0212      	lsls	r2, r2, #8
   13424:	7d23      	ldrb	r3, [r4, #20]
   13426:	4313      	orrs	r3, r2
   13428:	041b      	lsls	r3, r3, #16
   1342a:	7ee1      	ldrb	r1, [r4, #27]
   1342c:	0209      	lsls	r1, r1, #8
   1342e:	7ea2      	ldrb	r2, [r4, #26]
   13430:	430a      	orrs	r2, r1
   13432:	4313      	orrs	r3, r2
   13434:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   13436:	7fe3      	ldrb	r3, [r4, #31]
   13438:	061b      	lsls	r3, r3, #24
   1343a:	7fa2      	ldrb	r2, [r4, #30]
   1343c:	0412      	lsls	r2, r2, #16
   1343e:	4313      	orrs	r3, r2
   13440:	7f22      	ldrb	r2, [r4, #28]
   13442:	4313      	orrs	r3, r2
   13444:	7f62      	ldrb	r2, [r4, #29]
   13446:	0212      	lsls	r2, r2, #8
   13448:	4313      	orrs	r3, r2
   1344a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   1344c:	2300      	movs	r3, #0
   1344e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   13450:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   13452:	9b85      	ldr	r3, [sp, #532]	; 0x214
   13454:	602b      	str	r3, [r5, #0]
   13456:	88db      	ldrh	r3, [r3, #6]
   13458:	80ab      	strh	r3, [r5, #4]
   1345a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   1345c:	238e      	movs	r3, #142	; 0x8e
   1345e:	009b      	lsls	r3, r3, #2
   13460:	449d      	add	sp, r3
   13462:	bc04      	pop	{r2}
   13464:	4690      	mov	r8, r2
   13466:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   13468:	2804      	cmp	r0, #4
   1346a:	d005      	beq.n	13478 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1346c:	2308      	movs	r3, #8
   1346e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   13470:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   13472:	2800      	cmp	r0, #0
   13474:	d0d3      	beq.n	1341e <f_open+0x7a>
   13476:	e7f1      	b.n	1345c <f_open+0xb8>
				res = dir_register(&dj);
   13478:	a885      	add	r0, sp, #532	; 0x214
   1347a:	4b28      	ldr	r3, [pc, #160]	; (1351c <f_open+0x178>)
   1347c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1347e:	2308      	movs	r3, #8
   13480:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   13482:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   13484:	2800      	cmp	r0, #0
   13486:	d008      	beq.n	1349a <f_open+0xf6>
   13488:	e7e8      	b.n	1345c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1348a:	7ae3      	ldrb	r3, [r4, #11]
   1348c:	2211      	movs	r2, #17
				res = FR_DENIED;
   1348e:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13490:	421a      	tst	r2, r3
   13492:	d1e3      	bne.n	1345c <f_open+0xb8>
					res = FR_EXIST;
   13494:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   13496:	077b      	lsls	r3, r7, #29
   13498:	d4e0      	bmi.n	1345c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1349a:	0733      	lsls	r3, r6, #28
   1349c:	d5bb      	bpl.n	13416 <f_open+0x72>
			dw = get_fattime();					/* Created time */
   1349e:	4b20      	ldr	r3, [pc, #128]	; (13520 <f_open+0x17c>)
   134a0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   134a2:	73a0      	strb	r0, [r4, #14]
   134a4:	0a03      	lsrs	r3, r0, #8
   134a6:	73e3      	strb	r3, [r4, #15]
   134a8:	0c03      	lsrs	r3, r0, #16
   134aa:	7423      	strb	r3, [r4, #16]
   134ac:	0e00      	lsrs	r0, r0, #24
   134ae:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   134b0:	2300      	movs	r3, #0
   134b2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   134b4:	7723      	strb	r3, [r4, #28]
   134b6:	7763      	strb	r3, [r4, #29]
   134b8:	77a3      	strb	r3, [r4, #30]
   134ba:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   134bc:	7d62      	ldrb	r2, [r4, #21]
   134be:	0212      	lsls	r2, r2, #8
   134c0:	7d27      	ldrb	r7, [r4, #20]
   134c2:	4317      	orrs	r7, r2
   134c4:	043f      	lsls	r7, r7, #16
   134c6:	7ee1      	ldrb	r1, [r4, #27]
   134c8:	0209      	lsls	r1, r1, #8
   134ca:	7ea2      	ldrb	r2, [r4, #26]
   134cc:	430a      	orrs	r2, r1
   134ce:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   134d0:	76a3      	strb	r3, [r4, #26]
   134d2:	76e3      	strb	r3, [r4, #27]
   134d4:	7523      	strb	r3, [r4, #20]
   134d6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   134d8:	9885      	ldr	r0, [sp, #532]	; 0x214
   134da:	3301      	adds	r3, #1
   134dc:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   134de:	2f00      	cmp	r7, #0
   134e0:	d097      	beq.n	13412 <f_open+0x6e>
				dw = dj.fs->winsect;
   134e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   134e4:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   134e6:	0039      	movs	r1, r7
   134e8:	4b0e      	ldr	r3, [pc, #56]	; (13524 <f_open+0x180>)
   134ea:	4798      	blx	r3
				if (res == FR_OK) {
   134ec:	2800      	cmp	r0, #0
   134ee:	d1b5      	bne.n	1345c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   134f0:	9885      	ldr	r0, [sp, #532]	; 0x214
   134f2:	3f01      	subs	r7, #1
   134f4:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   134f6:	4641      	mov	r1, r8
   134f8:	4b0b      	ldr	r3, [pc, #44]	; (13528 <f_open+0x184>)
   134fa:	4798      	blx	r3
	if (res == FR_OK) {
   134fc:	2800      	cmp	r0, #0
   134fe:	d100      	bne.n	13502 <f_open+0x15e>
   13500:	e787      	b.n	13412 <f_open+0x6e>
   13502:	e7ab      	b.n	1345c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13504:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   13506:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13508:	423b      	tst	r3, r7
   1350a:	d0b2      	beq.n	13472 <f_open+0xce>
			res = FR_INVALID_NAME;
   1350c:	2006      	movs	r0, #6
   1350e:	e7ad      	b.n	1346c <f_open+0xc8>
   13510:	fffffdc8 	.word	0xfffffdc8
   13514:	00012135 	.word	0x00012135
   13518:	00013031 	.word	0x00013031
   1351c:	00012c59 	.word	0x00012c59
   13520:	00011fb5 	.word	0x00011fb5
   13524:	00012925 	.word	0x00012925
   13528:	000124e5 	.word	0x000124e5

0001352c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1352c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1352e:	46de      	mov	lr, fp
   13530:	4657      	mov	r7, sl
   13532:	464e      	mov	r6, r9
   13534:	4645      	mov	r5, r8
   13536:	b5e0      	push	{r5, r6, r7, lr}
   13538:	b083      	sub	sp, #12
   1353a:	0004      	movs	r4, r0
   1353c:	000d      	movs	r5, r1
   1353e:	0016      	movs	r6, r2
   13540:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   13542:	2300      	movs	r3, #0
   13544:	464a      	mov	r2, r9
   13546:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   13548:	8881      	ldrh	r1, [r0, #4]
   1354a:	6800      	ldr	r0, [r0, #0]
   1354c:	4b7f      	ldr	r3, [pc, #508]	; (1374c <f_write+0x220>)
   1354e:	4798      	blx	r3
   13550:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   13552:	2800      	cmp	r0, #0
   13554:	d000      	beq.n	13558 <f_write+0x2c>
   13556:	e0f1      	b.n	1373c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   13558:	79a3      	ldrb	r3, [r4, #6]
   1355a:	b25a      	sxtb	r2, r3
   1355c:	2a00      	cmp	r2, #0
   1355e:	da00      	bge.n	13562 <f_write+0x36>
   13560:	e0ea      	b.n	13738 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   13562:	079b      	lsls	r3, r3, #30
   13564:	d402      	bmi.n	1356c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   13566:	2307      	movs	r3, #7
   13568:	9300      	str	r3, [sp, #0]
   1356a:	e0e7      	b.n	1373c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1356c:	68e3      	ldr	r3, [r4, #12]
   1356e:	199a      	adds	r2, r3, r6
   13570:	4293      	cmp	r3, r2
   13572:	d810      	bhi.n	13596 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   13574:	2e00      	cmp	r6, #0
   13576:	d00e      	beq.n	13596 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   13578:	002f      	movs	r7, r5
   1357a:	e07b      	b.n	13674 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1357c:	2100      	movs	r1, #0
   1357e:	4b74      	ldr	r3, [pc, #464]	; (13750 <f_write+0x224>)
   13580:	4798      	blx	r3
   13582:	0003      	movs	r3, r0
   13584:	6120      	str	r0, [r4, #16]
   13586:	e003      	b.n	13590 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13588:	6961      	ldr	r1, [r4, #20]
   1358a:	4b71      	ldr	r3, [pc, #452]	; (13750 <f_write+0x224>)
   1358c:	4798      	blx	r3
   1358e:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13590:	2b00      	cmp	r3, #0
   13592:	d000      	beq.n	13596 <f_write+0x6a>
   13594:	e080      	b.n	13698 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   13596:	68a3      	ldr	r3, [r4, #8]
   13598:	68e2      	ldr	r2, [r4, #12]
   1359a:	4293      	cmp	r3, r2
   1359c:	d900      	bls.n	135a0 <f_write+0x74>
   1359e:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   135a0:	79a3      	ldrb	r3, [r4, #6]
   135a2:	2220      	movs	r2, #32
   135a4:	4313      	orrs	r3, r2
   135a6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   135a8:	e0c8      	b.n	1373c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   135aa:	79a2      	ldrb	r2, [r4, #6]
   135ac:	3b81      	subs	r3, #129	; 0x81
   135ae:	4313      	orrs	r3, r2
   135b0:	71a3      	strb	r3, [r4, #6]
   135b2:	2302      	movs	r3, #2
   135b4:	9300      	str	r3, [sp, #0]
   135b6:	e0c1      	b.n	1373c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   135b8:	79a2      	ldrb	r2, [r4, #6]
   135ba:	3b7f      	subs	r3, #127	; 0x7f
   135bc:	4313      	orrs	r3, r2
   135be:	71a3      	strb	r3, [r4, #6]
   135c0:	2301      	movs	r3, #1
   135c2:	9300      	str	r3, [sp, #0]
   135c4:	e0ba      	b.n	1373c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   135c6:	2100      	movs	r1, #0
   135c8:	4b62      	ldr	r3, [pc, #392]	; (13754 <f_write+0x228>)
   135ca:	4798      	blx	r3
   135cc:	2800      	cmp	r0, #0
   135ce:	d06d      	beq.n	136ac <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   135d0:	79a2      	ldrb	r2, [r4, #6]
   135d2:	2380      	movs	r3, #128	; 0x80
   135d4:	425b      	negs	r3, r3
   135d6:	4313      	orrs	r3, r2
   135d8:	71a3      	strb	r3, [r4, #6]
   135da:	2301      	movs	r3, #1
   135dc:	9300      	str	r3, [sp, #0]
   135de:	e0ad      	b.n	1373c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   135e0:	79a2      	ldrb	r2, [r4, #6]
   135e2:	2380      	movs	r3, #128	; 0x80
   135e4:	425b      	negs	r3, r3
   135e6:	4313      	orrs	r3, r2
   135e8:	71a3      	strb	r3, [r4, #6]
   135ea:	2302      	movs	r3, #2
   135ec:	9300      	str	r3, [sp, #0]
   135ee:	e0a5      	b.n	1373c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   135f0:	79a2      	ldrb	r2, [r4, #6]
   135f2:	2380      	movs	r3, #128	; 0x80
   135f4:	425b      	negs	r3, r3
   135f6:	4313      	orrs	r3, r2
   135f8:	71a3      	strb	r3, [r4, #6]
   135fa:	2301      	movs	r3, #1
   135fc:	9300      	str	r3, [sp, #0]
   135fe:	e09d      	b.n	1373c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13600:	0240      	lsls	r0, r0, #9
   13602:	1839      	adds	r1, r7, r0
   13604:	3330      	adds	r3, #48	; 0x30
   13606:	0018      	movs	r0, r3
   13608:	2280      	movs	r2, #128	; 0x80
   1360a:	0092      	lsls	r2, r2, #2
   1360c:	4b52      	ldr	r3, [pc, #328]	; (13758 <f_write+0x22c>)
   1360e:	4798      	blx	r3
					fp->fs->wflag = 0;
   13610:	2300      	movs	r3, #0
   13612:	6822      	ldr	r2, [r4, #0]
   13614:	7113      	strb	r3, [r2, #4]
   13616:	e072      	b.n	136fe <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   13618:	68a3      	ldr	r3, [r4, #8]
   1361a:	68e2      	ldr	r2, [r4, #12]
   1361c:	4293      	cmp	r3, r2
   1361e:	d271      	bcs.n	13704 <f_write+0x1d8>
			fp->dsect = sect;
   13620:	4643      	mov	r3, r8
   13622:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   13624:	68a3      	ldr	r3, [r4, #8]
   13626:	05dd      	lsls	r5, r3, #23
   13628:	0ded      	lsrs	r5, r5, #23
   1362a:	2380      	movs	r3, #128	; 0x80
   1362c:	009b      	lsls	r3, r3, #2
   1362e:	1b5d      	subs	r5, r3, r5
   13630:	42b5      	cmp	r5, r6
   13632:	d900      	bls.n	13636 <f_write+0x10a>
   13634:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   13636:	69a1      	ldr	r1, [r4, #24]
   13638:	6820      	ldr	r0, [r4, #0]
   1363a:	4b46      	ldr	r3, [pc, #280]	; (13754 <f_write+0x228>)
   1363c:	4798      	blx	r3
   1363e:	2800      	cmp	r0, #0
   13640:	d172      	bne.n	13728 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   13642:	68a3      	ldr	r3, [r4, #8]
   13644:	05d8      	lsls	r0, r3, #23
   13646:	0dc0      	lsrs	r0, r0, #23
   13648:	3030      	adds	r0, #48	; 0x30
   1364a:	6823      	ldr	r3, [r4, #0]
   1364c:	469c      	mov	ip, r3
   1364e:	4460      	add	r0, ip
   13650:	002a      	movs	r2, r5
   13652:	0039      	movs	r1, r7
   13654:	4b40      	ldr	r3, [pc, #256]	; (13758 <f_write+0x22c>)
   13656:	4798      	blx	r3
		fp->fs->wflag = 1;
   13658:	2301      	movs	r3, #1
   1365a:	6822      	ldr	r2, [r4, #0]
   1365c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1365e:	197f      	adds	r7, r7, r5
   13660:	68a3      	ldr	r3, [r4, #8]
   13662:	195b      	adds	r3, r3, r5
   13664:	60a3      	str	r3, [r4, #8]
   13666:	464b      	mov	r3, r9
   13668:	681b      	ldr	r3, [r3, #0]
   1366a:	195b      	adds	r3, r3, r5
   1366c:	464a      	mov	r2, r9
   1366e:	6013      	str	r3, [r2, #0]
   13670:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   13672:	d090      	beq.n	13596 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   13674:	68a3      	ldr	r3, [r4, #8]
   13676:	05da      	lsls	r2, r3, #23
   13678:	d1d4      	bne.n	13624 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1367a:	6820      	ldr	r0, [r4, #0]
   1367c:	7882      	ldrb	r2, [r0, #2]
   1367e:	3a01      	subs	r2, #1
   13680:	0a5d      	lsrs	r5, r3, #9
   13682:	4015      	ands	r5, r2
   13684:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   13686:	2d00      	cmp	r5, #0
   13688:	d10b      	bne.n	136a2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1368a:	2b00      	cmp	r3, #0
   1368c:	d000      	beq.n	13690 <f_write+0x164>
   1368e:	e77b      	b.n	13588 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   13690:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   13692:	2b00      	cmp	r3, #0
   13694:	d100      	bne.n	13698 <f_write+0x16c>
   13696:	e771      	b.n	1357c <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13698:	2b01      	cmp	r3, #1
   1369a:	d086      	beq.n	135aa <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1369c:	1c5a      	adds	r2, r3, #1
   1369e:	d08b      	beq.n	135b8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   136a0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   136a2:	6820      	ldr	r0, [r4, #0]
   136a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   136a6:	69a2      	ldr	r2, [r4, #24]
   136a8:	4293      	cmp	r3, r2
   136aa:	d08c      	beq.n	135c6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   136ac:	6823      	ldr	r3, [r4, #0]
   136ae:	469a      	mov	sl, r3
   136b0:	6961      	ldr	r1, [r4, #20]
   136b2:	0018      	movs	r0, r3
   136b4:	4b29      	ldr	r3, [pc, #164]	; (1375c <f_write+0x230>)
   136b6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   136b8:	2800      	cmp	r0, #0
   136ba:	d091      	beq.n	135e0 <f_write+0xb4>
			sect += csect;
   136bc:	4680      	mov	r8, r0
   136be:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   136c0:	0a73      	lsrs	r3, r6, #9
   136c2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   136c4:	d0a8      	beq.n	13618 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   136c6:	4653      	mov	r3, sl
   136c8:	789b      	ldrb	r3, [r3, #2]
   136ca:	465a      	mov	r2, fp
   136cc:	18aa      	adds	r2, r5, r2
   136ce:	429a      	cmp	r2, r3
   136d0:	d901      	bls.n	136d6 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   136d2:	1b5b      	subs	r3, r3, r5
   136d4:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   136d6:	465b      	mov	r3, fp
   136d8:	466a      	mov	r2, sp
   136da:	71d3      	strb	r3, [r2, #7]
   136dc:	79d3      	ldrb	r3, [r2, #7]
   136de:	4652      	mov	r2, sl
   136e0:	7850      	ldrb	r0, [r2, #1]
   136e2:	4642      	mov	r2, r8
   136e4:	0039      	movs	r1, r7
   136e6:	4d1e      	ldr	r5, [pc, #120]	; (13760 <f_write+0x234>)
   136e8:	47a8      	blx	r5
   136ea:	2800      	cmp	r0, #0
   136ec:	d000      	beq.n	136f0 <f_write+0x1c4>
   136ee:	e77f      	b.n	135f0 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   136f0:	6823      	ldr	r3, [r4, #0]
   136f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   136f4:	4641      	mov	r1, r8
   136f6:	1a50      	subs	r0, r2, r1
   136f8:	4583      	cmp	fp, r0
   136fa:	d900      	bls.n	136fe <f_write+0x1d2>
   136fc:	e780      	b.n	13600 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   136fe:	465b      	mov	r3, fp
   13700:	025d      	lsls	r5, r3, #9
				continue;
   13702:	e7ac      	b.n	1365e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13704:	2100      	movs	r1, #0
   13706:	4650      	mov	r0, sl
   13708:	4b12      	ldr	r3, [pc, #72]	; (13754 <f_write+0x228>)
   1370a:	4798      	blx	r3
   1370c:	2800      	cmp	r0, #0
   1370e:	d103      	bne.n	13718 <f_write+0x1ec>
				fp->fs->winsect = sect;
   13710:	6823      	ldr	r3, [r4, #0]
   13712:	4642      	mov	r2, r8
   13714:	62da      	str	r2, [r3, #44]	; 0x2c
   13716:	e783      	b.n	13620 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13718:	79a2      	ldrb	r2, [r4, #6]
   1371a:	2380      	movs	r3, #128	; 0x80
   1371c:	425b      	negs	r3, r3
   1371e:	4313      	orrs	r3, r2
   13720:	71a3      	strb	r3, [r4, #6]
   13722:	2301      	movs	r3, #1
   13724:	9300      	str	r3, [sp, #0]
   13726:	e009      	b.n	1373c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   13728:	79a2      	ldrb	r2, [r4, #6]
   1372a:	2380      	movs	r3, #128	; 0x80
   1372c:	425b      	negs	r3, r3
   1372e:	4313      	orrs	r3, r2
   13730:	71a3      	strb	r3, [r4, #6]
   13732:	2301      	movs	r3, #1
   13734:	9300      	str	r3, [sp, #0]
   13736:	e001      	b.n	1373c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13738:	2302      	movs	r3, #2
   1373a:	9300      	str	r3, [sp, #0]
}
   1373c:	9800      	ldr	r0, [sp, #0]
   1373e:	b003      	add	sp, #12
   13740:	bc3c      	pop	{r2, r3, r4, r5}
   13742:	4690      	mov	r8, r2
   13744:	4699      	mov	r9, r3
   13746:	46a2      	mov	sl, r4
   13748:	46ab      	mov	fp, r5
   1374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1374c:	00012061 	.word	0x00012061
   13750:	00012861 	.word	0x00012861
   13754:	000124e5 	.word	0x000124e5
   13758:	00012005 	.word	0x00012005
   1375c:	0001202b 	.word	0x0001202b
   13760:	00011ec5 	.word	0x00011ec5

00013764 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13764:	b570      	push	{r4, r5, r6, lr}
   13766:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13768:	8881      	ldrh	r1, [r0, #4]
   1376a:	6800      	ldr	r0, [r0, #0]
   1376c:	4b1c      	ldr	r3, [pc, #112]	; (137e0 <f_sync+0x7c>)
   1376e:	4798      	blx	r3
	if (res == FR_OK) {
   13770:	2800      	cmp	r0, #0
   13772:	d102      	bne.n	1377a <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13774:	79a3      	ldrb	r3, [r4, #6]
   13776:	069b      	lsls	r3, r3, #26
   13778:	d400      	bmi.n	1377c <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   1377a:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   1377c:	69e1      	ldr	r1, [r4, #28]
   1377e:	6820      	ldr	r0, [r4, #0]
   13780:	4b18      	ldr	r3, [pc, #96]	; (137e4 <f_sync+0x80>)
   13782:	4798      	blx	r3
			if (res == FR_OK) {
   13784:	2800      	cmp	r0, #0
   13786:	d1f8      	bne.n	1377a <f_sync+0x16>
				dir = fp->dir_ptr;
   13788:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1378a:	7aeb      	ldrb	r3, [r5, #11]
   1378c:	2220      	movs	r2, #32
   1378e:	4313      	orrs	r3, r2
   13790:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13792:	7b23      	ldrb	r3, [r4, #12]
   13794:	772b      	strb	r3, [r5, #28]
   13796:	89a3      	ldrh	r3, [r4, #12]
   13798:	0a1b      	lsrs	r3, r3, #8
   1379a:	776b      	strb	r3, [r5, #29]
   1379c:	89e3      	ldrh	r3, [r4, #14]
   1379e:	77ab      	strb	r3, [r5, #30]
   137a0:	7be3      	ldrb	r3, [r4, #15]
   137a2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   137a4:	7c23      	ldrb	r3, [r4, #16]
   137a6:	76ab      	strb	r3, [r5, #26]
   137a8:	8a23      	ldrh	r3, [r4, #16]
   137aa:	0a1b      	lsrs	r3, r3, #8
   137ac:	76eb      	strb	r3, [r5, #27]
   137ae:	8a63      	ldrh	r3, [r4, #18]
   137b0:	752b      	strb	r3, [r5, #20]
   137b2:	8a63      	ldrh	r3, [r4, #18]
   137b4:	0a1b      	lsrs	r3, r3, #8
   137b6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   137b8:	4b0b      	ldr	r3, [pc, #44]	; (137e8 <f_sync+0x84>)
   137ba:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   137bc:	75a8      	strb	r0, [r5, #22]
   137be:	0a03      	lsrs	r3, r0, #8
   137c0:	75eb      	strb	r3, [r5, #23]
   137c2:	0c03      	lsrs	r3, r0, #16
   137c4:	762b      	strb	r3, [r5, #24]
   137c6:	0e00      	lsrs	r0, r0, #24
   137c8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   137ca:	79a3      	ldrb	r3, [r4, #6]
   137cc:	2220      	movs	r2, #32
   137ce:	4393      	bics	r3, r2
   137d0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   137d2:	2301      	movs	r3, #1
   137d4:	6822      	ldr	r2, [r4, #0]
   137d6:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   137d8:	6820      	ldr	r0, [r4, #0]
   137da:	4b04      	ldr	r3, [pc, #16]	; (137ec <f_sync+0x88>)
   137dc:	4798      	blx	r3
   137de:	e7cc      	b.n	1377a <f_sync+0x16>
   137e0:	00012061 	.word	0x00012061
   137e4:	000124e5 	.word	0x000124e5
   137e8:	00011fb5 	.word	0x00011fb5
   137ec:	00012f3d 	.word	0x00012f3d

000137f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   137f0:	b510      	push	{r4, lr}
   137f2:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   137f4:	4b03      	ldr	r3, [pc, #12]	; (13804 <f_close+0x14>)
   137f6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   137f8:	2800      	cmp	r0, #0
   137fa:	d101      	bne.n	13800 <f_close+0x10>
   137fc:	2300      	movs	r3, #0
   137fe:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   13800:	bd10      	pop	{r4, pc}
   13802:	46c0      	nop			; (mov r8, r8)
   13804:	00013765 	.word	0x00013765

00013808 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13808:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   1380a:	287f      	cmp	r0, #127	; 0x7f
   1380c:	d911      	bls.n	13832 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1380e:	2900      	cmp	r1, #0
   13810:	d111      	bne.n	13836 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   13812:	28c7      	cmp	r0, #199	; 0xc7
   13814:	d017      	beq.n	13846 <ff_convert+0x3e>
   13816:	4a0d      	ldr	r2, [pc, #52]	; (1384c <ff_convert+0x44>)
   13818:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   1381a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   1381c:	8811      	ldrh	r1, [r2, #0]
   1381e:	4281      	cmp	r1, r0
   13820:	d004      	beq.n	1382c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   13822:	3301      	adds	r3, #1
   13824:	b29b      	uxth	r3, r3
   13826:	3202      	adds	r2, #2
   13828:	2b80      	cmp	r3, #128	; 0x80
   1382a:	d1f7      	bne.n	1381c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   1382c:	3380      	adds	r3, #128	; 0x80
   1382e:	20ff      	movs	r0, #255	; 0xff
   13830:	4003      	ands	r3, r0
		}
	}

	return c;
}
   13832:	0018      	movs	r0, r3
   13834:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   13836:	2300      	movs	r3, #0
   13838:	28ff      	cmp	r0, #255	; 0xff
   1383a:	d8fa      	bhi.n	13832 <ff_convert+0x2a>
   1383c:	3880      	subs	r0, #128	; 0x80
   1383e:	0040      	lsls	r0, r0, #1
   13840:	4b02      	ldr	r3, [pc, #8]	; (1384c <ff_convert+0x44>)
   13842:	5ac3      	ldrh	r3, [r0, r3]
   13844:	e7f5      	b.n	13832 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   13846:	2300      	movs	r3, #0
   13848:	e7f0      	b.n	1382c <ff_convert+0x24>
   1384a:	46c0      	nop			; (mov r8, r8)
   1384c:	000196e0 	.word	0x000196e0

00013850 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13850:	2861      	cmp	r0, #97	; 0x61
   13852:	d014      	beq.n	1387e <ff_wtoupper+0x2e>
   13854:	4b0b      	ldr	r3, [pc, #44]	; (13884 <ff_wtoupper+0x34>)
   13856:	3304      	adds	r3, #4
   13858:	2101      	movs	r1, #1
   1385a:	2262      	movs	r2, #98	; 0x62
   1385c:	4290      	cmp	r0, r2
   1385e:	d007      	beq.n	13870 <ff_wtoupper+0x20>
   13860:	3101      	adds	r1, #1
   13862:	3302      	adds	r3, #2
   13864:	1e9a      	subs	r2, r3, #2
   13866:	8812      	ldrh	r2, [r2, #0]
   13868:	2a00      	cmp	r2, #0
   1386a:	d1f7      	bne.n	1385c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1386c:	0003      	movs	r3, r0
   1386e:	e004      	b.n	1387a <ff_wtoupper+0x2a>
   13870:	1e03      	subs	r3, r0, #0
   13872:	d002      	beq.n	1387a <ff_wtoupper+0x2a>
   13874:	0049      	lsls	r1, r1, #1
   13876:	4b04      	ldr	r3, [pc, #16]	; (13888 <ff_wtoupper+0x38>)
   13878:	5acb      	ldrh	r3, [r1, r3]
}
   1387a:	0018      	movs	r0, r3
   1387c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1387e:	2100      	movs	r1, #0
   13880:	e7f8      	b.n	13874 <ff_wtoupper+0x24>
   13882:	46c0      	nop			; (mov r8, r8)
   13884:	000197e0 	.word	0x000197e0
   13888:	000199c0 	.word	0x000199c0

0001388c <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1388c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1388e:	46de      	mov	lr, fp
   13890:	4657      	mov	r7, sl
   13892:	464e      	mov	r6, r9
   13894:	4645      	mov	r5, r8
   13896:	b5e0      	push	{r5, r6, r7, lr}
   13898:	b083      	sub	sp, #12
   1389a:	0007      	movs	r7, r0
   1389c:	4688      	mov	r8, r1
   1389e:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   138a0:	2400      	movs	r4, #0
   138a2:	2900      	cmp	r1, #0
   138a4:	dd18      	ble.n	138d8 <sendPacket+0x4c>
   138a6:	4b15      	ldr	r3, [pc, #84]	; (138fc <sendPacket+0x70>)
   138a8:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   138aa:	4b15      	ldr	r3, [pc, #84]	; (13900 <sendPacket+0x74>)
   138ac:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   138ae:	9801      	ldr	r0, [sp, #4]
   138b0:	47d0      	blx	sl
   138b2:	2800      	cmp	r0, #0
   138b4:	d110      	bne.n	138d8 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   138b6:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   138b8:	68f3      	ldr	r3, [r6, #12]
   138ba:	4699      	mov	r9, r3
   138bc:	693b      	ldr	r3, [r7, #16]
   138be:	191d      	adds	r5, r3, r4
   138c0:	9801      	ldr	r0, [sp, #4]
   138c2:	47d8      	blx	fp
   138c4:	0003      	movs	r3, r0
   138c6:	4642      	mov	r2, r8
   138c8:	0029      	movs	r1, r5
   138ca:	0030      	movs	r0, r6
   138cc:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   138ce:	2800      	cmp	r0, #0
   138d0:	db02      	blt.n	138d8 <sendPacket+0x4c>
            break;
        sent += rc;
   138d2:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   138d4:	45a0      	cmp	r8, r4
   138d6:	dcea      	bgt.n	138ae <sendPacket+0x22>
    }
    if (sent == length)
   138d8:	45a0      	cmp	r8, r4
   138da:	d10c      	bne.n	138f6 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   138dc:	69b9      	ldr	r1, [r7, #24]
   138de:	0038      	movs	r0, r7
   138e0:	3054      	adds	r0, #84	; 0x54
   138e2:	4b08      	ldr	r3, [pc, #32]	; (13904 <sendPacket+0x78>)
   138e4:	4798      	blx	r3
        rc = SUCCESS;
   138e6:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   138e8:	b003      	add	sp, #12
   138ea:	bc3c      	pop	{r2, r3, r4, r5}
   138ec:	4690      	mov	r8, r2
   138ee:	4699      	mov	r9, r3
   138f0:	46a2      	mov	sl, r4
   138f2:	46ab      	mov	fp, r5
   138f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   138f6:	2001      	movs	r0, #1
   138f8:	4240      	negs	r0, r0
    return rc;
   138fa:	e7f5      	b.n	138e8 <sendPacket+0x5c>
   138fc:	00014209 	.word	0x00014209
   13900:	0001423d 	.word	0x0001423d
   13904:	00014229 	.word	0x00014229

00013908 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13908:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   1390a:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   1390c:	2100      	movs	r1, #0
   1390e:	6241      	str	r1, [r0, #36]	; 0x24
   13910:	62c1      	str	r1, [r0, #44]	; 0x2c
   13912:	6341      	str	r1, [r0, #52]	; 0x34
   13914:	63c1      	str	r1, [r0, #60]	; 0x3c
   13916:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   13918:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   1391a:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   1391c:	9b02      	ldr	r3, [sp, #8]
   1391e:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   13920:	9b03      	ldr	r3, [sp, #12]
   13922:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   13924:	9b04      	ldr	r3, [sp, #16]
   13926:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   13928:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   1392a:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   1392c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   1392e:	2301      	movs	r3, #1
   13930:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   13932:	3054      	adds	r0, #84	; 0x54
   13934:	4b01      	ldr	r3, [pc, #4]	; (1393c <MQTTClientInit+0x34>)
   13936:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   13938:	bd10      	pop	{r4, pc}
   1393a:	46c0      	nop			; (mov r8, r8)
   1393c:	00014251 	.word	0x00014251

00013940 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   13940:	b5f0      	push	{r4, r5, r6, r7, lr}
   13942:	46de      	mov	lr, fp
   13944:	4657      	mov	r7, sl
   13946:	464e      	mov	r6, r9
   13948:	4645      	mov	r5, r8
   1394a:	b5e0      	push	{r5, r6, r7, lr}
   1394c:	b085      	sub	sp, #20
   1394e:	4682      	mov	sl, r0
   13950:	000f      	movs	r7, r1
   13952:	4691      	mov	r9, r2
   13954:	0004      	movs	r4, r0
   13956:	3424      	adds	r4, #36	; 0x24
   13958:	234c      	movs	r3, #76	; 0x4c
   1395a:	4453      	add	r3, sl
   1395c:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   1395e:	2301      	movs	r3, #1
   13960:	425b      	negs	r3, r3
   13962:	9301      	str	r3, [sp, #4]
   13964:	e056      	b.n	13a14 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   13966:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   13968:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   1396a:	687a      	ldr	r2, [r7, #4]
   1396c:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   1396e:	780a      	ldrb	r2, [r1, #0]
   13970:	2a00      	cmp	r2, #0
   13972:	d04a      	beq.n	13a0a <deliverMessage+0xca>
   13974:	42b3      	cmp	r3, r6
   13976:	d24a      	bcs.n	13a0e <deliverMessage+0xce>
   13978:	3101      	adds	r1, #1
   1397a:	1e70      	subs	r0, r6, #1
   1397c:	e008      	b.n	13990 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   1397e:	2a2f      	cmp	r2, #47	; 0x2f
   13980:	d10f      	bne.n	139a2 <deliverMessage+0x62>
        curn++;
   13982:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13984:	780a      	ldrb	r2, [r1, #0]
   13986:	2a00      	cmp	r2, #0
   13988:	d03f      	beq.n	13a0a <deliverMessage+0xca>
   1398a:	429e      	cmp	r6, r3
   1398c:	d93f      	bls.n	13a0e <deliverMessage+0xce>
   1398e:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   13990:	781d      	ldrb	r5, [r3, #0]
   13992:	2d2f      	cmp	r5, #47	; 0x2f
   13994:	d0f3      	beq.n	1397e <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   13996:	2a2b      	cmp	r2, #43	; 0x2b
   13998:	d008      	beq.n	139ac <deliverMessage+0x6c>
   1399a:	2a23      	cmp	r2, #35	; 0x23
   1399c:	d013      	beq.n	139c6 <deliverMessage+0x86>
   1399e:	4295      	cmp	r5, r2
   139a0:	d0ef      	beq.n	13982 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   139a2:	429e      	cmp	r6, r3
   139a4:	d133      	bne.n	13a0e <deliverMessage+0xce>
   139a6:	2a00      	cmp	r2, #0
   139a8:	d03d      	beq.n	13a26 <deliverMessage+0xe6>
   139aa:	e030      	b.n	13a0e <deliverMessage+0xce>
            char* nextpos = curn + 1;
   139ac:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   139ae:	42ae      	cmp	r6, r5
   139b0:	d927      	bls.n	13a02 <deliverMessage+0xc2>
   139b2:	785a      	ldrb	r2, [r3, #1]
   139b4:	2a2f      	cmp	r2, #47	; 0x2f
   139b6:	d01f      	beq.n	139f8 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   139b8:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   139ba:	4283      	cmp	r3, r0
   139bc:	d0e1      	beq.n	13982 <deliverMessage+0x42>
   139be:	785a      	ldrb	r2, [r3, #1]
   139c0:	2a2f      	cmp	r2, #47	; 0x2f
   139c2:	d1f9      	bne.n	139b8 <deliverMessage+0x78>
   139c4:	e7dd      	b.n	13982 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   139c6:	1e73      	subs	r3, r6, #1
   139c8:	e7db      	b.n	13982 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   139ca:	9b01      	ldr	r3, [sp, #4]
   139cc:	3301      	adds	r3, #1
   139ce:	d007      	beq.n	139e0 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   139d0:	9801      	ldr	r0, [sp, #4]
   139d2:	b005      	add	sp, #20
   139d4:	bc3c      	pop	{r2, r3, r4, r5}
   139d6:	4690      	mov	r8, r2
   139d8:	4699      	mov	r9, r3
   139da:	46a2      	mov	sl, r4
   139dc:	46ab      	mov	fp, r5
   139de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   139e0:	4653      	mov	r3, sl
   139e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   139e4:	2b00      	cmp	r3, #0
   139e6:	d0f3      	beq.n	139d0 <deliverMessage+0x90>
    md->topicName = aTopicName;
   139e8:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   139ea:	464a      	mov	r2, r9
   139ec:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   139ee:	a802      	add	r0, sp, #8
   139f0:	4798      	blx	r3
        rc = SUCCESS;
   139f2:	2300      	movs	r3, #0
   139f4:	9301      	str	r3, [sp, #4]
    return rc;
   139f6:	e7eb      	b.n	139d0 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   139f8:	780a      	ldrb	r2, [r1, #0]
   139fa:	2a00      	cmp	r2, #0
   139fc:	d007      	beq.n	13a0e <deliverMessage+0xce>
        curn++;
   139fe:	002b      	movs	r3, r5
   13a00:	e7c5      	b.n	1398e <deliverMessage+0x4e>
   13a02:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   13a04:	780a      	ldrb	r2, [r1, #0]
   13a06:	2a00      	cmp	r2, #0
   13a08:	d101      	bne.n	13a0e <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   13a0a:	429e      	cmp	r6, r3
   13a0c:	d00b      	beq.n	13a26 <deliverMessage+0xe6>
   13a0e:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13a10:	4544      	cmp	r4, r8
   13a12:	d0da      	beq.n	139ca <deliverMessage+0x8a>
   13a14:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   13a16:	6821      	ldr	r1, [r4, #0]
   13a18:	2900      	cmp	r1, #0
   13a1a:	d0f8      	beq.n	13a0e <deliverMessage+0xce>
   13a1c:	0038      	movs	r0, r7
   13a1e:	4b08      	ldr	r3, [pc, #32]	; (13a40 <deliverMessage+0x100>)
   13a20:	4798      	blx	r3
   13a22:	2800      	cmp	r0, #0
   13a24:	d09f      	beq.n	13966 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   13a26:	465b      	mov	r3, fp
   13a28:	685b      	ldr	r3, [r3, #4]
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	d0ef      	beq.n	13a0e <deliverMessage+0xce>
    md->topicName = aTopicName;
   13a2e:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13a30:	464a      	mov	r2, r9
   13a32:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   13a34:	a802      	add	r0, sp, #8
   13a36:	4798      	blx	r3
                rc = SUCCESS;
   13a38:	2300      	movs	r3, #0
   13a3a:	9301      	str	r3, [sp, #4]
   13a3c:	e7e7      	b.n	13a0e <deliverMessage+0xce>
   13a3e:	46c0      	nop			; (mov r8, r8)
   13a40:	00014b81 	.word	0x00014b81

00013a44 <keepalive>:


int keepalive(MQTTClient* c)
{
   13a44:	b510      	push	{r4, lr}
   13a46:	b082      	sub	sp, #8
   13a48:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   13a4a:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   13a4c:	69a3      	ldr	r3, [r4, #24]
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d101      	bne.n	13a56 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   13a52:	b002      	add	sp, #8
   13a54:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   13a56:	0020      	movs	r0, r4
   13a58:	3054      	adds	r0, #84	; 0x54
   13a5a:	4b14      	ldr	r3, [pc, #80]	; (13aac <keepalive+0x68>)
   13a5c:	4798      	blx	r3
   13a5e:	2800      	cmp	r0, #0
   13a60:	d01d      	beq.n	13a9e <keepalive+0x5a>
        if (!c->ping_outstanding)
   13a62:	7f23      	ldrb	r3, [r4, #28]
   13a64:	2b00      	cmp	r3, #0
   13a66:	d11d      	bne.n	13aa4 <keepalive+0x60>
            TimerInit(&timer);
   13a68:	4668      	mov	r0, sp
   13a6a:	4b11      	ldr	r3, [pc, #68]	; (13ab0 <keepalive+0x6c>)
   13a6c:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   13a6e:	21fa      	movs	r1, #250	; 0xfa
   13a70:	0089      	lsls	r1, r1, #2
   13a72:	4668      	mov	r0, sp
   13a74:	4b0f      	ldr	r3, [pc, #60]	; (13ab4 <keepalive+0x70>)
   13a76:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   13a78:	68a1      	ldr	r1, [r4, #8]
   13a7a:	6920      	ldr	r0, [r4, #16]
   13a7c:	4b0e      	ldr	r3, [pc, #56]	; (13ab8 <keepalive+0x74>)
   13a7e:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   13a80:	2800      	cmp	r0, #0
   13a82:	dd09      	ble.n	13a98 <keepalive+0x54>
   13a84:	466a      	mov	r2, sp
   13a86:	0001      	movs	r1, r0
   13a88:	0020      	movs	r0, r4
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <keepalive+0x78>)
   13a8c:	4798      	blx	r3
   13a8e:	2800      	cmp	r0, #0
   13a90:	d1df      	bne.n	13a52 <keepalive+0xe>
                c->ping_outstanding = 1;
   13a92:	2301      	movs	r3, #1
   13a94:	7723      	strb	r3, [r4, #28]
   13a96:	e7dc      	b.n	13a52 <keepalive+0xe>
    int rc = FAILURE;
   13a98:	2001      	movs	r0, #1
   13a9a:	4240      	negs	r0, r0
   13a9c:	e7d9      	b.n	13a52 <keepalive+0xe>
   13a9e:	2001      	movs	r0, #1
   13aa0:	4240      	negs	r0, r0
   13aa2:	e7d6      	b.n	13a52 <keepalive+0xe>
   13aa4:	2001      	movs	r0, #1
   13aa6:	4240      	negs	r0, r0
    return rc;
   13aa8:	e7d3      	b.n	13a52 <keepalive+0xe>
   13aaa:	46c0      	nop			; (mov r8, r8)
   13aac:	00014209 	.word	0x00014209
   13ab0:	00014251 	.word	0x00014251
   13ab4:	00014219 	.word	0x00014219
   13ab8:	00014869 	.word	0x00014869
   13abc:	0001388d 	.word	0x0001388d

00013ac0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   13ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ac2:	46de      	mov	lr, fp
   13ac4:	464f      	mov	r7, r9
   13ac6:	4646      	mov	r6, r8
   13ac8:	b5c0      	push	{r6, r7, lr}
   13aca:	b090      	sub	sp, #64	; 0x40
   13acc:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   13ace:	6d05      	ldr	r5, [r0, #80]	; 0x50
   13ad0:	68ae      	ldr	r6, [r5, #8]
   13ad2:	6947      	ldr	r7, [r0, #20]
   13ad4:	9107      	str	r1, [sp, #28]
   13ad6:	0008      	movs	r0, r1
   13ad8:	4b65      	ldr	r3, [pc, #404]	; (13c70 <cycle+0x1b0>)
   13ada:	4798      	blx	r3
   13adc:	0003      	movs	r3, r0
   13ade:	2201      	movs	r2, #1
   13ae0:	0039      	movs	r1, r7
   13ae2:	0028      	movs	r0, r5
   13ae4:	47b0      	blx	r6
   13ae6:	0005      	movs	r5, r0
   13ae8:	2801      	cmp	r0, #1
   13aea:	d000      	beq.n	13aee <cycle+0x2e>
   13aec:	e0bd      	b.n	13c6a <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   13aee:	9807      	ldr	r0, [sp, #28]
   13af0:	4b5f      	ldr	r3, [pc, #380]	; (13c70 <cycle+0x1b0>)
   13af2:	4798      	blx	r3
   13af4:	9006      	str	r0, [sp, #24]
   13af6:	2604      	movs	r6, #4
    *value = 0;
   13af8:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   13afa:	237f      	movs	r3, #127	; 0x7f
   13afc:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   13afe:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13b00:	6883      	ldr	r3, [r0, #8]
   13b02:	4698      	mov	r8, r3
   13b04:	9b06      	ldr	r3, [sp, #24]
   13b06:	2201      	movs	r2, #1
   13b08:	a90c      	add	r1, sp, #48	; 0x30
   13b0a:	47c0      	blx	r8
        if (rc != 1)
   13b0c:	2801      	cmp	r0, #1
   13b0e:	d10e      	bne.n	13b2e <cycle+0x6e>
        *value += (i & 127) * multiplier;
   13b10:	ab02      	add	r3, sp, #8
   13b12:	2228      	movs	r2, #40	; 0x28
   13b14:	189b      	adds	r3, r3, r2
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	465a      	mov	r2, fp
   13b1a:	401a      	ands	r2, r3
   13b1c:	436a      	muls	r2, r5
   13b1e:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   13b20:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   13b22:	b25b      	sxtb	r3, r3
   13b24:	2b00      	cmp	r3, #0
   13b26:	da02      	bge.n	13b2e <cycle+0x6e>
   13b28:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13b2a:	2e00      	cmp	r6, #0
   13b2c:	d1e7      	bne.n	13afe <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13b2e:	6963      	ldr	r3, [r4, #20]
   13b30:	1c58      	adds	r0, r3, #1
   13b32:	0039      	movs	r1, r7
   13b34:	4b4f      	ldr	r3, [pc, #316]	; (13c74 <cycle+0x1b4>)
   13b36:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13b38:	2f00      	cmp	r7, #0
   13b3a:	dd10      	ble.n	13b5e <cycle+0x9e>
   13b3c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13b3e:	68b3      	ldr	r3, [r6, #8]
   13b40:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13b42:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13b44:	6963      	ldr	r3, [r4, #20]
   13b46:	181d      	adds	r5, r3, r0
   13b48:	9807      	ldr	r0, [sp, #28]
   13b4a:	4b49      	ldr	r3, [pc, #292]	; (13c70 <cycle+0x1b0>)
   13b4c:	4798      	blx	r3
   13b4e:	0003      	movs	r3, r0
   13b50:	003a      	movs	r2, r7
   13b52:	0029      	movs	r1, r5
   13b54:	0030      	movs	r0, r6
   13b56:	47c8      	blx	r9
   13b58:	42b8      	cmp	r0, r7
   13b5a:	d000      	beq.n	13b5e <cycle+0x9e>
   13b5c:	e085      	b.n	13c6a <cycle+0x1aa>
    header.byte = c->readbuf[0];
   13b5e:	6963      	ldr	r3, [r4, #20]
   13b60:	781d      	ldrb	r5, [r3, #0]
   13b62:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   13b64:	2d05      	cmp	r5, #5
   13b66:	d051      	beq.n	13c0c <cycle+0x14c>
   13b68:	2d0d      	cmp	r5, #13
   13b6a:	d06e      	beq.n	13c4a <cycle+0x18a>
        rc = SUCCESS;
   13b6c:	2600      	movs	r6, #0
    switch (packet_type)
   13b6e:	2d03      	cmp	r5, #3
   13b70:	d16e      	bne.n	13c50 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13b72:	68e2      	ldr	r2, [r4, #12]
   13b74:	9204      	str	r2, [sp, #16]
   13b76:	9303      	str	r3, [sp, #12]
   13b78:	ab0f      	add	r3, sp, #60	; 0x3c
   13b7a:	9302      	str	r3, [sp, #8]
   13b7c:	ab0e      	add	r3, sp, #56	; 0x38
   13b7e:	9301      	str	r3, [sp, #4]
   13b80:	ab09      	add	r3, sp, #36	; 0x24
   13b82:	9300      	str	r3, [sp, #0]
   13b84:	ab0d      	add	r3, sp, #52	; 0x34
   13b86:	2229      	movs	r2, #41	; 0x29
   13b88:	a902      	add	r1, sp, #8
   13b8a:	468c      	mov	ip, r1
   13b8c:	4462      	add	r2, ip
   13b8e:	a908      	add	r1, sp, #32
   13b90:	202a      	movs	r0, #42	; 0x2a
   13b92:	4460      	add	r0, ip
   13b94:	4e38      	ldr	r6, [pc, #224]	; (13c78 <cycle+0x1b8>)
   13b96:	47b0      	blx	r6
        rc = SUCCESS;
   13b98:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   13b9a:	2801      	cmp	r0, #1
   13b9c:	d15b      	bne.n	13c56 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   13b9e:	ae0c      	add	r6, sp, #48	; 0x30
   13ba0:	ab02      	add	r3, sp, #8
   13ba2:	7e1b      	ldrb	r3, [r3, #24]
   13ba4:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   13ba6:	0032      	movs	r2, r6
   13ba8:	a909      	add	r1, sp, #36	; 0x24
   13baa:	0020      	movs	r0, r4
   13bac:	4b33      	ldr	r3, [pc, #204]	; (13c7c <cycle+0x1bc>)
   13bae:	4798      	blx	r3
            if (msg.qos != QOS0)
   13bb0:	7833      	ldrb	r3, [r6, #0]
   13bb2:	2b00      	cmp	r3, #0
   13bb4:	d028      	beq.n	13c08 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   13bb6:	2b01      	cmp	r3, #1
   13bb8:	d004      	beq.n	13bc4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   13bba:	2b02      	cmp	r3, #2
   13bbc:	d016      	beq.n	13bec <cycle+0x12c>
   13bbe:	2601      	movs	r6, #1
   13bc0:	4276      	negs	r6, r6
   13bc2:	e048      	b.n	13c56 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   13bc4:	ab0c      	add	r3, sp, #48	; 0x30
   13bc6:	889b      	ldrh	r3, [r3, #4]
   13bc8:	9300      	str	r3, [sp, #0]
   13bca:	2300      	movs	r3, #0
   13bcc:	2204      	movs	r2, #4
   13bce:	68a1      	ldr	r1, [r4, #8]
   13bd0:	6920      	ldr	r0, [r4, #16]
   13bd2:	4e2b      	ldr	r6, [pc, #172]	; (13c80 <cycle+0x1c0>)
   13bd4:	47b0      	blx	r6
   13bd6:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   13bd8:	2900      	cmp	r1, #0
   13bda:	dd12      	ble.n	13c02 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   13bdc:	9a07      	ldr	r2, [sp, #28]
   13bde:	0020      	movs	r0, r4
   13be0:	4b28      	ldr	r3, [pc, #160]	; (13c84 <cycle+0x1c4>)
   13be2:	4798      	blx	r3
   13be4:	0006      	movs	r6, r0
                if (rc == FAILURE)
   13be6:	1c43      	adds	r3, r0, #1
   13be8:	d132      	bne.n	13c50 <cycle+0x190>
   13bea:	e034      	b.n	13c56 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   13bec:	ab0c      	add	r3, sp, #48	; 0x30
   13bee:	889b      	ldrh	r3, [r3, #4]
   13bf0:	9300      	str	r3, [sp, #0]
   13bf2:	2300      	movs	r3, #0
   13bf4:	2205      	movs	r2, #5
   13bf6:	68a1      	ldr	r1, [r4, #8]
   13bf8:	6920      	ldr	r0, [r4, #16]
   13bfa:	4e21      	ldr	r6, [pc, #132]	; (13c80 <cycle+0x1c0>)
   13bfc:	47b0      	blx	r6
   13bfe:	0001      	movs	r1, r0
   13c00:	e7ea      	b.n	13bd8 <cycle+0x118>
   13c02:	2601      	movs	r6, #1
   13c04:	4276      	negs	r6, r6
   13c06:	e026      	b.n	13c56 <cycle+0x196>
        rc = SUCCESS;
   13c08:	2600      	movs	r6, #0
   13c0a:	e021      	b.n	13c50 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13c0c:	68e2      	ldr	r2, [r4, #12]
   13c0e:	9200      	str	r2, [sp, #0]
   13c10:	aa0c      	add	r2, sp, #48	; 0x30
   13c12:	a908      	add	r1, sp, #32
   13c14:	a809      	add	r0, sp, #36	; 0x24
   13c16:	4e1c      	ldr	r6, [pc, #112]	; (13c88 <cycle+0x1c8>)
   13c18:	47b0      	blx	r6
   13c1a:	2801      	cmp	r0, #1
   13c1c:	d002      	beq.n	13c24 <cycle+0x164>
   13c1e:	2601      	movs	r6, #1
   13c20:	4276      	negs	r6, r6
   13c22:	e01b      	b.n	13c5c <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   13c24:	ab0c      	add	r3, sp, #48	; 0x30
   13c26:	881b      	ldrh	r3, [r3, #0]
   13c28:	9300      	str	r3, [sp, #0]
   13c2a:	2300      	movs	r3, #0
   13c2c:	2206      	movs	r2, #6
   13c2e:	68a1      	ldr	r1, [r4, #8]
   13c30:	6920      	ldr	r0, [r4, #16]
   13c32:	4e13      	ldr	r6, [pc, #76]	; (13c80 <cycle+0x1c0>)
   13c34:	47b0      	blx	r6
   13c36:	2800      	cmp	r0, #0
   13c38:	ddf1      	ble.n	13c1e <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   13c3a:	9a07      	ldr	r2, [sp, #28]
   13c3c:	0001      	movs	r1, r0
   13c3e:	0020      	movs	r0, r4
   13c40:	4b10      	ldr	r3, [pc, #64]	; (13c84 <cycle+0x1c4>)
   13c42:	4798      	blx	r3
   13c44:	1e06      	subs	r6, r0, #0
   13c46:	d1ea      	bne.n	13c1e <cycle+0x15e>
   13c48:	e002      	b.n	13c50 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   13c4a:	2300      	movs	r3, #0
   13c4c:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   13c4e:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   13c50:	0020      	movs	r0, r4
   13c52:	4b0e      	ldr	r3, [pc, #56]	; (13c8c <cycle+0x1cc>)
   13c54:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   13c56:	2e00      	cmp	r6, #0
   13c58:	d100      	bne.n	13c5c <cycle+0x19c>
   13c5a:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   13c5c:	0030      	movs	r0, r6
   13c5e:	b010      	add	sp, #64	; 0x40
   13c60:	bc1c      	pop	{r2, r3, r4}
   13c62:	4690      	mov	r8, r2
   13c64:	4699      	mov	r9, r3
   13c66:	46a3      	mov	fp, r4
   13c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c6a:	4d09      	ldr	r5, [pc, #36]	; (13c90 <cycle+0x1d0>)
        rc = SUCCESS;
   13c6c:	2600      	movs	r6, #0
   13c6e:	e7ef      	b.n	13c50 <cycle+0x190>
   13c70:	0001423d 	.word	0x0001423d
   13c74:	00014981 	.word	0x00014981
   13c78:	00014879 	.word	0x00014879
   13c7c:	00013941 	.word	0x00013941
   13c80:	00014cb5 	.word	0x00014cb5
   13c84:	0001388d 	.word	0x0001388d
   13c88:	00014911 	.word	0x00014911
   13c8c:	00013a45 	.word	0x00013a45
   13c90:	0000ffff 	.word	0x0000ffff

00013c94 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   13c94:	b570      	push	{r4, r5, r6, lr}
   13c96:	b082      	sub	sp, #8
   13c98:	0005      	movs	r5, r0
   13c9a:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   13c9c:	4668      	mov	r0, sp
   13c9e:	4b0a      	ldr	r3, [pc, #40]	; (13cc8 <MQTTYield+0x34>)
   13ca0:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   13ca2:	0021      	movs	r1, r4
   13ca4:	4668      	mov	r0, sp
   13ca6:	4b09      	ldr	r3, [pc, #36]	; (13ccc <MQTTYield+0x38>)
   13ca8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   13caa:	4c09      	ldr	r4, [pc, #36]	; (13cd0 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   13cac:	4e09      	ldr	r6, [pc, #36]	; (13cd4 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   13cae:	4669      	mov	r1, sp
   13cb0:	0028      	movs	r0, r5
   13cb2:	47a0      	blx	r4
   13cb4:	1c43      	adds	r3, r0, #1
   13cb6:	d004      	beq.n	13cc2 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   13cb8:	4668      	mov	r0, sp
   13cba:	47b0      	blx	r6
   13cbc:	2800      	cmp	r0, #0
   13cbe:	d0f6      	beq.n	13cae <MQTTYield+0x1a>
    int rc = SUCCESS;
   13cc0:	2000      	movs	r0, #0
        
    return rc;
}
   13cc2:	b002      	add	sp, #8
   13cc4:	bd70      	pop	{r4, r5, r6, pc}
   13cc6:	46c0      	nop			; (mov r8, r8)
   13cc8:	00014251 	.word	0x00014251
   13ccc:	00014219 	.word	0x00014219
   13cd0:	00013ac1 	.word	0x00013ac1
   13cd4:	00014209 	.word	0x00014209

00013cd8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   13cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cda:	b083      	sub	sp, #12
   13cdc:	9001      	str	r0, [sp, #4]
   13cde:	000e      	movs	r6, r1
   13ce0:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   13ce2:	2401      	movs	r4, #1
   13ce4:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   13ce6:	4f08      	ldr	r7, [pc, #32]	; (13d08 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   13ce8:	4d08      	ldr	r5, [pc, #32]	; (13d0c <waitfor+0x34>)
        if (TimerIsExpired(timer))
   13cea:	9800      	ldr	r0, [sp, #0]
   13cec:	47b8      	blx	r7
   13cee:	2800      	cmp	r0, #0
   13cf0:	d106      	bne.n	13d00 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   13cf2:	9900      	ldr	r1, [sp, #0]
   13cf4:	9801      	ldr	r0, [sp, #4]
   13cf6:	47a8      	blx	r5
   13cf8:	0004      	movs	r4, r0
   13cfa:	42b0      	cmp	r0, r6
   13cfc:	d1f5      	bne.n	13cea <waitfor+0x12>
   13cfe:	0034      	movs	r4, r6
    
    return rc;
}
   13d00:	0020      	movs	r0, r4
   13d02:	b003      	add	sp, #12
   13d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d06:	46c0      	nop			; (mov r8, r8)
   13d08:	00014209 	.word	0x00014209
   13d0c:	00013ac1 	.word	0x00013ac1

00013d10 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   13d10:	b530      	push	{r4, r5, lr}
   13d12:	b09b      	sub	sp, #108	; 0x6c
   13d14:	0004      	movs	r4, r0
   13d16:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   13d18:	2258      	movs	r2, #88	; 0x58
   13d1a:	4928      	ldr	r1, [pc, #160]	; (13dbc <MQTTConnect+0xac>)
   13d1c:	a802      	add	r0, sp, #8
   13d1e:	4b28      	ldr	r3, [pc, #160]	; (13dc0 <MQTTConnect+0xb0>)
   13d20:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   13d22:	6a23      	ldr	r3, [r4, #32]
   13d24:	2b00      	cmp	r3, #0
   13d26:	d13f      	bne.n	13da8 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   13d28:	a818      	add	r0, sp, #96	; 0x60
   13d2a:	4b26      	ldr	r3, [pc, #152]	; (13dc4 <MQTTConnect+0xb4>)
   13d2c:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   13d2e:	6861      	ldr	r1, [r4, #4]
   13d30:	a818      	add	r0, sp, #96	; 0x60
   13d32:	4b25      	ldr	r3, [pc, #148]	; (13dc8 <MQTTConnect+0xb8>)
   13d34:	4798      	blx	r3

    if (options == 0)
   13d36:	2d00      	cmp	r5, #0
   13d38:	d015      	beq.n	13d66 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   13d3a:	8b29      	ldrh	r1, [r5, #24]
   13d3c:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   13d3e:	0020      	movs	r0, r4
   13d40:	3054      	adds	r0, #84	; 0x54
   13d42:	4b22      	ldr	r3, [pc, #136]	; (13dcc <MQTTConnect+0xbc>)
   13d44:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   13d46:	002a      	movs	r2, r5
   13d48:	68a1      	ldr	r1, [r4, #8]
   13d4a:	6920      	ldr	r0, [r4, #16]
   13d4c:	4b20      	ldr	r3, [pc, #128]	; (13dd0 <MQTTConnect+0xc0>)
   13d4e:	4798      	blx	r3
   13d50:	2800      	cmp	r0, #0
   13d52:	dd2c      	ble.n	13dae <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   13d54:	aa18      	add	r2, sp, #96	; 0x60
   13d56:	0001      	movs	r1, r0
   13d58:	0020      	movs	r0, r4
   13d5a:	4b1e      	ldr	r3, [pc, #120]	; (13dd4 <MQTTConnect+0xc4>)
   13d5c:	4798      	blx	r3
   13d5e:	2800      	cmp	r0, #0
   13d60:	d003      	beq.n	13d6a <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   13d62:	b01b      	add	sp, #108	; 0x6c
   13d64:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   13d66:	ad02      	add	r5, sp, #8
   13d68:	e7e7      	b.n	13d3a <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   13d6a:	aa18      	add	r2, sp, #96	; 0x60
   13d6c:	2102      	movs	r1, #2
   13d6e:	0020      	movs	r0, r4
   13d70:	4b19      	ldr	r3, [pc, #100]	; (13dd8 <MQTTConnect+0xc8>)
   13d72:	4798      	blx	r3
   13d74:	2802      	cmp	r0, #2
   13d76:	d11d      	bne.n	13db4 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   13d78:	466b      	mov	r3, sp
   13d7a:	1d99      	adds	r1, r3, #6
   13d7c:	23ff      	movs	r3, #255	; 0xff
   13d7e:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   13d80:	466b      	mov	r3, sp
   13d82:	1dd8      	adds	r0, r3, #7
   13d84:	2300      	movs	r3, #0
   13d86:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   13d88:	68e3      	ldr	r3, [r4, #12]
   13d8a:	6962      	ldr	r2, [r4, #20]
   13d8c:	4d13      	ldr	r5, [pc, #76]	; (13ddc <MQTTConnect+0xcc>)
   13d8e:	47a8      	blx	r5
   13d90:	2801      	cmp	r0, #1
   13d92:	d002      	beq.n	13d9a <MQTTConnect+0x8a>
            rc = FAILURE;
   13d94:	2001      	movs	r0, #1
   13d96:	4240      	negs	r0, r0
   13d98:	e7e3      	b.n	13d62 <MQTTConnect+0x52>
            rc = connack_rc;
   13d9a:	466b      	mov	r3, sp
   13d9c:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   13d9e:	2800      	cmp	r0, #0
   13da0:	d1df      	bne.n	13d62 <MQTTConnect+0x52>
        c->isconnected = 1;
   13da2:	2301      	movs	r3, #1
   13da4:	6223      	str	r3, [r4, #32]
    return rc;
   13da6:	e7dc      	b.n	13d62 <MQTTConnect+0x52>
    int rc = FAILURE;
   13da8:	2001      	movs	r0, #1
   13daa:	4240      	negs	r0, r0
   13dac:	e7d9      	b.n	13d62 <MQTTConnect+0x52>
   13dae:	2001      	movs	r0, #1
   13db0:	4240      	negs	r0, r0
   13db2:	e7d6      	b.n	13d62 <MQTTConnect+0x52>
        rc = FAILURE;
   13db4:	2001      	movs	r0, #1
   13db6:	4240      	negs	r0, r0
   13db8:	e7d3      	b.n	13d62 <MQTTConnect+0x52>
   13dba:	46c0      	nop			; (mov r8, r8)
   13dbc:	00019ba0 	.word	0x00019ba0
   13dc0:	00016f79 	.word	0x00016f79
   13dc4:	00014251 	.word	0x00014251
   13dc8:	00014219 	.word	0x00014219
   13dcc:	00014229 	.word	0x00014229
   13dd0:	00014685 	.word	0x00014685
   13dd4:	0001388d 	.word	0x0001388d
   13dd8:	00013cd9 	.word	0x00013cd9
   13ddc:	000147cd 	.word	0x000147cd

00013de0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   13de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13de2:	b091      	sub	sp, #68	; 0x44
   13de4:	0004      	movs	r4, r0
   13de6:	000f      	movs	r7, r1
   13de8:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   13dea:	2300      	movs	r3, #0
   13dec:	930c      	str	r3, [sp, #48]	; 0x30
   13dee:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   13df0:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   13df2:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   13df4:	6a03      	ldr	r3, [r0, #32]
   13df6:	2b00      	cmp	r3, #0
   13df8:	d05c      	beq.n	13eb4 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   13dfa:	a80e      	add	r0, sp, #56	; 0x38
   13dfc:	4b32      	ldr	r3, [pc, #200]	; (13ec8 <MQTTSubscribe+0xe8>)
   13dfe:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13e00:	6861      	ldr	r1, [r4, #4]
   13e02:	a80e      	add	r0, sp, #56	; 0x38
   13e04:	4b31      	ldr	r3, [pc, #196]	; (13ecc <MQTTSubscribe+0xec>)
   13e06:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   13e08:	6920      	ldr	r0, [r4, #16]
   13e0a:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13e0c:	6823      	ldr	r3, [r4, #0]
   13e0e:	4a30      	ldr	r2, [pc, #192]	; (13ed0 <MQTTSubscribe+0xf0>)
   13e10:	4293      	cmp	r3, r2
   13e12:	d017      	beq.n	13e44 <MQTTSubscribe+0x64>
   13e14:	3301      	adds	r3, #1
   13e16:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   13e18:	b29b      	uxth	r3, r3
   13e1a:	aa0a      	add	r2, sp, #40	; 0x28
   13e1c:	9202      	str	r2, [sp, #8]
   13e1e:	aa0b      	add	r2, sp, #44	; 0x2c
   13e20:	9201      	str	r2, [sp, #4]
   13e22:	2201      	movs	r2, #1
   13e24:	9200      	str	r2, [sp, #0]
   13e26:	2200      	movs	r2, #0
   13e28:	4e2a      	ldr	r6, [pc, #168]	; (13ed4 <MQTTSubscribe+0xf4>)
   13e2a:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   13e2c:	2800      	cmp	r0, #0
   13e2e:	dd44      	ble.n	13eba <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   13e30:	aa0e      	add	r2, sp, #56	; 0x38
   13e32:	0001      	movs	r1, r0
   13e34:	0020      	movs	r0, r4
   13e36:	4b28      	ldr	r3, [pc, #160]	; (13ed8 <MQTTSubscribe+0xf8>)
   13e38:	4798      	blx	r3
   13e3a:	1e06      	subs	r6, r0, #0
   13e3c:	d004      	beq.n	13e48 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13e3e:	0030      	movs	r0, r6
   13e40:	b011      	add	sp, #68	; 0x44
   13e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13e44:	2301      	movs	r3, #1
   13e46:	e7e6      	b.n	13e16 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   13e48:	aa0e      	add	r2, sp, #56	; 0x38
   13e4a:	2109      	movs	r1, #9
   13e4c:	0020      	movs	r0, r4
   13e4e:	4b23      	ldr	r3, [pc, #140]	; (13edc <MQTTSubscribe+0xfc>)
   13e50:	4798      	blx	r3
   13e52:	2809      	cmp	r0, #9
   13e54:	d134      	bne.n	13ec0 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   13e56:	2300      	movs	r3, #0
   13e58:	9308      	str	r3, [sp, #32]
   13e5a:	3b01      	subs	r3, #1
   13e5c:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   13e5e:	68e3      	ldr	r3, [r4, #12]
   13e60:	9301      	str	r3, [sp, #4]
   13e62:	6963      	ldr	r3, [r4, #20]
   13e64:	9300      	str	r3, [sp, #0]
   13e66:	ab09      	add	r3, sp, #36	; 0x24
   13e68:	aa08      	add	r2, sp, #32
   13e6a:	2101      	movs	r1, #1
   13e6c:	300d      	adds	r0, #13
   13e6e:	ad02      	add	r5, sp, #8
   13e70:	46ac      	mov	ip, r5
   13e72:	4460      	add	r0, ip
   13e74:	4d1a      	ldr	r5, [pc, #104]	; (13ee0 <MQTTSubscribe+0x100>)
   13e76:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   13e78:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   13e7a:	2801      	cmp	r0, #1
   13e7c:	d00e      	beq.n	13e9c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   13e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13e80:	2b00      	cmp	r3, #0
   13e82:	d010      	beq.n	13ea6 <MQTTSubscribe+0xc6>
   13e84:	0022      	movs	r2, r4
   13e86:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13e88:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   13e8a:	6810      	ldr	r0, [r2, #0]
   13e8c:	2800      	cmp	r0, #0
   13e8e:	d00b      	beq.n	13ea8 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13e90:	3301      	adds	r3, #1
   13e92:	3208      	adds	r2, #8
   13e94:	2b05      	cmp	r3, #5
   13e96:	d1f8      	bne.n	13e8a <MQTTSubscribe+0xaa>
   13e98:	000e      	movs	r6, r1
   13e9a:	e7d0      	b.n	13e3e <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   13e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   13e9e:	2980      	cmp	r1, #128	; 0x80
   13ea0:	d1ed      	bne.n	13e7e <MQTTSubscribe+0x9e>
   13ea2:	000e      	movs	r6, r1
   13ea4:	e7cb      	b.n	13e3e <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   13ea6:	0033      	movs	r3, r6
   13ea8:	00db      	lsls	r3, r3, #3
   13eaa:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   13eac:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   13eae:	9b05      	ldr	r3, [sp, #20]
   13eb0:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   13eb2:	e7c4      	b.n	13e3e <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   13eb4:	2601      	movs	r6, #1
   13eb6:	4276      	negs	r6, r6
   13eb8:	e7c1      	b.n	13e3e <MQTTSubscribe+0x5e>
   13eba:	2601      	movs	r6, #1
   13ebc:	4276      	negs	r6, r6
   13ebe:	e7be      	b.n	13e3e <MQTTSubscribe+0x5e>
        rc = FAILURE;
   13ec0:	2601      	movs	r6, #1
   13ec2:	4276      	negs	r6, r6
    return rc;
   13ec4:	e7bb      	b.n	13e3e <MQTTSubscribe+0x5e>
   13ec6:	46c0      	nop			; (mov r8, r8)
   13ec8:	00014251 	.word	0x00014251
   13ecc:	00014219 	.word	0x00014219
   13ed0:	0000ffff 	.word	0x0000ffff
   13ed4:	00014d4d 	.word	0x00014d4d
   13ed8:	0001388d 	.word	0x0001388d
   13edc:	00013cd9 	.word	0x00013cd9
   13ee0:	00014e01 	.word	0x00014e01

00013ee4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   13ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ee6:	b08f      	sub	sp, #60	; 0x3c
   13ee8:	0005      	movs	r5, r0
   13eea:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   13eec:	2300      	movs	r3, #0
   13eee:	930a      	str	r3, [sp, #40]	; 0x28
   13ef0:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   13ef2:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   13ef4:	6a03      	ldr	r3, [r0, #32]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d062      	beq.n	13fc0 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   13efa:	a80c      	add	r0, sp, #48	; 0x30
   13efc:	4b36      	ldr	r3, [pc, #216]	; (13fd8 <MQTTPublish+0xf4>)
   13efe:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13f00:	6869      	ldr	r1, [r5, #4]
   13f02:	a80c      	add	r0, sp, #48	; 0x30
   13f04:	4b35      	ldr	r3, [pc, #212]	; (13fdc <MQTTPublish+0xf8>)
   13f06:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   13f08:	7823      	ldrb	r3, [r4, #0]
   13f0a:	3b01      	subs	r3, #1
   13f0c:	2b01      	cmp	r3, #1
   13f0e:	d921      	bls.n	13f54 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   13f10:	7823      	ldrb	r3, [r4, #0]
   13f12:	68e2      	ldr	r2, [r4, #12]
   13f14:	9206      	str	r2, [sp, #24]
   13f16:	68a2      	ldr	r2, [r4, #8]
   13f18:	9205      	str	r2, [sp, #20]
   13f1a:	aa09      	add	r2, sp, #36	; 0x24
   13f1c:	a902      	add	r1, sp, #8
   13f1e:	cac1      	ldmia	r2!, {r0, r6, r7}
   13f20:	c1c1      	stmia	r1!, {r0, r6, r7}
   13f22:	88a2      	ldrh	r2, [r4, #4]
   13f24:	9201      	str	r2, [sp, #4]
   13f26:	7862      	ldrb	r2, [r4, #1]
   13f28:	9200      	str	r2, [sp, #0]
   13f2a:	2200      	movs	r2, #0
   13f2c:	68a9      	ldr	r1, [r5, #8]
   13f2e:	6928      	ldr	r0, [r5, #16]
   13f30:	4e2b      	ldr	r6, [pc, #172]	; (13fe0 <MQTTPublish+0xfc>)
   13f32:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   13f34:	2800      	cmp	r0, #0
   13f36:	dd46      	ble.n	13fc6 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   13f38:	aa0c      	add	r2, sp, #48	; 0x30
   13f3a:	0001      	movs	r1, r0
   13f3c:	0028      	movs	r0, r5
   13f3e:	4b29      	ldr	r3, [pc, #164]	; (13fe4 <MQTTPublish+0x100>)
   13f40:	4798      	blx	r3
   13f42:	2800      	cmp	r0, #0
   13f44:	d104      	bne.n	13f50 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   13f46:	7823      	ldrb	r3, [r4, #0]
   13f48:	2b01      	cmp	r3, #1
   13f4a:	d00d      	beq.n	13f68 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   13f4c:	2b02      	cmp	r3, #2
   13f4e:	d021      	beq.n	13f94 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13f50:	b00f      	add	sp, #60	; 0x3c
   13f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13f54:	682b      	ldr	r3, [r5, #0]
   13f56:	4a24      	ldr	r2, [pc, #144]	; (13fe8 <MQTTPublish+0x104>)
   13f58:	4293      	cmp	r3, r2
   13f5a:	d003      	beq.n	13f64 <MQTTPublish+0x80>
   13f5c:	3301      	adds	r3, #1
   13f5e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   13f60:	80a3      	strh	r3, [r4, #4]
   13f62:	e7d5      	b.n	13f10 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13f64:	2301      	movs	r3, #1
   13f66:	e7fa      	b.n	13f5e <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   13f68:	aa0c      	add	r2, sp, #48	; 0x30
   13f6a:	2104      	movs	r1, #4
   13f6c:	0028      	movs	r0, r5
   13f6e:	4b1f      	ldr	r3, [pc, #124]	; (13fec <MQTTPublish+0x108>)
   13f70:	4798      	blx	r3
   13f72:	2804      	cmp	r0, #4
   13f74:	d12a      	bne.n	13fcc <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13f76:	696b      	ldr	r3, [r5, #20]
   13f78:	68ea      	ldr	r2, [r5, #12]
   13f7a:	9200      	str	r2, [sp, #0]
   13f7c:	2222      	movs	r2, #34	; 0x22
   13f7e:	446a      	add	r2, sp
   13f80:	a908      	add	r1, sp, #32
   13f82:	301d      	adds	r0, #29
   13f84:	4468      	add	r0, sp
   13f86:	4c1a      	ldr	r4, [pc, #104]	; (13ff0 <MQTTPublish+0x10c>)
   13f88:	47a0      	blx	r4
   13f8a:	3801      	subs	r0, #1
   13f8c:	1e43      	subs	r3, r0, #1
   13f8e:	4198      	sbcs	r0, r3
   13f90:	4240      	negs	r0, r0
   13f92:	e7dd      	b.n	13f50 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   13f94:	aa0c      	add	r2, sp, #48	; 0x30
   13f96:	2107      	movs	r1, #7
   13f98:	0028      	movs	r0, r5
   13f9a:	4b14      	ldr	r3, [pc, #80]	; (13fec <MQTTPublish+0x108>)
   13f9c:	4798      	blx	r3
   13f9e:	2807      	cmp	r0, #7
   13fa0:	d117      	bne.n	13fd2 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13fa2:	696b      	ldr	r3, [r5, #20]
   13fa4:	68ea      	ldr	r2, [r5, #12]
   13fa6:	9200      	str	r2, [sp, #0]
   13fa8:	2222      	movs	r2, #34	; 0x22
   13faa:	446a      	add	r2, sp
   13fac:	a908      	add	r1, sp, #32
   13fae:	301a      	adds	r0, #26
   13fb0:	4468      	add	r0, sp
   13fb2:	4c0f      	ldr	r4, [pc, #60]	; (13ff0 <MQTTPublish+0x10c>)
   13fb4:	47a0      	blx	r4
   13fb6:	3801      	subs	r0, #1
   13fb8:	1e43      	subs	r3, r0, #1
   13fba:	4198      	sbcs	r0, r3
   13fbc:	4240      	negs	r0, r0
   13fbe:	e7c7      	b.n	13f50 <MQTTPublish+0x6c>
    int rc = FAILURE;
   13fc0:	2001      	movs	r0, #1
   13fc2:	4240      	negs	r0, r0
   13fc4:	e7c4      	b.n	13f50 <MQTTPublish+0x6c>
   13fc6:	2001      	movs	r0, #1
   13fc8:	4240      	negs	r0, r0
   13fca:	e7c1      	b.n	13f50 <MQTTPublish+0x6c>
            rc = FAILURE;
   13fcc:	2001      	movs	r0, #1
   13fce:	4240      	negs	r0, r0
   13fd0:	e7be      	b.n	13f50 <MQTTPublish+0x6c>
            rc = FAILURE;
   13fd2:	2001      	movs	r0, #1
   13fd4:	4240      	negs	r0, r0
    return rc;
   13fd6:	e7bb      	b.n	13f50 <MQTTPublish+0x6c>
   13fd8:	00014251 	.word	0x00014251
   13fdc:	00014219 	.word	0x00014219
   13fe0:	00014bed 	.word	0x00014bed
   13fe4:	0001388d 	.word	0x0001388d
   13fe8:	0000ffff 	.word	0x0000ffff
   13fec:	00013cd9 	.word	0x00013cd9
   13ff0:	00014911 	.word	0x00014911

00013ff4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   13ff4:	b510      	push	{r4, lr}
   13ff6:	b082      	sub	sp, #8
   13ff8:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   13ffa:	4668      	mov	r0, sp
   13ffc:	4b0b      	ldr	r3, [pc, #44]	; (1402c <MQTTDisconnect+0x38>)
   13ffe:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   14000:	6861      	ldr	r1, [r4, #4]
   14002:	4668      	mov	r0, sp
   14004:	4b0a      	ldr	r3, [pc, #40]	; (14030 <MQTTDisconnect+0x3c>)
   14006:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   14008:	68a1      	ldr	r1, [r4, #8]
   1400a:	6920      	ldr	r0, [r4, #16]
   1400c:	4b09      	ldr	r3, [pc, #36]	; (14034 <MQTTDisconnect+0x40>)
   1400e:	4798      	blx	r3
    if (len > 0)
   14010:	2800      	cmp	r0, #0
   14012:	dd08      	ble.n	14026 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   14014:	466a      	mov	r2, sp
   14016:	0001      	movs	r1, r0
   14018:	0020      	movs	r0, r4
   1401a:	4b07      	ldr	r3, [pc, #28]	; (14038 <MQTTDisconnect+0x44>)
   1401c:	4798      	blx	r3
        
    c->isconnected = 0;
   1401e:	2300      	movs	r3, #0
   14020:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   14022:	b002      	add	sp, #8
   14024:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   14026:	2001      	movs	r0, #1
   14028:	4240      	negs	r0, r0
   1402a:	e7f8      	b.n	1401e <MQTTDisconnect+0x2a>
   1402c:	00014251 	.word	0x00014251
   14030:	00014219 	.word	0x00014219
   14034:	00014859 	.word	0x00014859
   14038:	0001388d 	.word	0x0001388d

0001403c <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   1403c:	b510      	push	{r4, lr}
   1403e:	0004      	movs	r4, r0
	close(n->socket);
   14040:	2000      	movs	r0, #0
   14042:	5620      	ldrsb	r0, [r4, r0]
   14044:	4b04      	ldr	r3, [pc, #16]	; (14058 <WINC1500_disconnect+0x1c>)
   14046:	4798      	blx	r3
	n->socket=-1;
   14048:	2301      	movs	r3, #1
   1404a:	425b      	negs	r3, r3
   1404c:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   1404e:	2200      	movs	r2, #0
   14050:	4b02      	ldr	r3, [pc, #8]	; (1405c <WINC1500_disconnect+0x20>)
   14052:	701a      	strb	r2, [r3, #0]
}
   14054:	bd10      	pop	{r4, pc}
   14056:	46c0      	nop			; (mov r8, r8)
   14058:	0000f48d 	.word	0x0000f48d
   1405c:	20000440 	.word	0x20000440

00014060 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   14060:	b570      	push	{r4, r5, r6, lr}
   14062:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   14064:	2200      	movs	r2, #0
   14066:	4b0d      	ldr	r3, [pc, #52]	; (1409c <WINC1500_write+0x3c>)
   14068:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1406a:	b2b2      	uxth	r2, r6
   1406c:	7800      	ldrb	r0, [r0, #0]
   1406e:	b240      	sxtb	r0, r0
   14070:	2300      	movs	r3, #0
   14072:	4c0b      	ldr	r4, [pc, #44]	; (140a0 <WINC1500_write+0x40>)
   14074:	47a0      	blx	r4
   14076:	2800      	cmp	r0, #0
   14078:	d10c      	bne.n	14094 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   1407a:	4b08      	ldr	r3, [pc, #32]	; (1409c <WINC1500_write+0x3c>)
   1407c:	781b      	ldrb	r3, [r3, #0]
   1407e:	2b00      	cmp	r3, #0
   14080:	d106      	bne.n	14090 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   14082:	4d08      	ldr	r5, [pc, #32]	; (140a4 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   14084:	4c05      	ldr	r4, [pc, #20]	; (1409c <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   14086:	2000      	movs	r0, #0
   14088:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   1408a:	7823      	ldrb	r3, [r4, #0]
   1408c:	2b00      	cmp	r3, #0
   1408e:	d0fa      	beq.n	14086 <WINC1500_write+0x26>
}
   14090:	0030      	movs	r0, r6
   14092:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   14094:	2601      	movs	r6, #1
   14096:	4276      	negs	r6, r6
   14098:	e7fa      	b.n	14090 <WINC1500_write+0x30>
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	20000443 	.word	0x20000443
   140a0:	0000f361 	.word	0x0000f361
   140a4:	0000d5c5 	.word	0x0000d5c5

000140a8 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   140a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   140aa:	b083      	sub	sp, #12
   140ac:	9101      	str	r1, [sp, #4]
   140ae:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   140b0:	2b00      	cmp	r3, #0
   140b2:	d100      	bne.n	140b6 <WINC1500_read+0xe>
   140b4:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   140b6:	4a22      	ldr	r2, [pc, #136]	; (14140 <WINC1500_read+0x98>)
   140b8:	6812      	ldr	r2, [r2, #0]
   140ba:	2a00      	cmp	r2, #0
   140bc:	d013      	beq.n	140e6 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   140be:	4b20      	ldr	r3, [pc, #128]	; (14140 <WINC1500_read+0x98>)
   140c0:	681d      	ldr	r5, [r3, #0]
   140c2:	42a5      	cmp	r5, r4
   140c4:	db39      	blt.n	1413a <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   140c6:	4e1f      	ldr	r6, [pc, #124]	; (14144 <WINC1500_read+0x9c>)
   140c8:	6837      	ldr	r7, [r6, #0]
   140ca:	491f      	ldr	r1, [pc, #124]	; (14148 <WINC1500_read+0xa0>)
   140cc:	19c9      	adds	r1, r1, r7
   140ce:	0022      	movs	r2, r4
   140d0:	9801      	ldr	r0, [sp, #4]
   140d2:	4b1e      	ldr	r3, [pc, #120]	; (1414c <WINC1500_read+0xa4>)
   140d4:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   140d6:	1b2d      	subs	r5, r5, r4
   140d8:	4b19      	ldr	r3, [pc, #100]	; (14140 <WINC1500_read+0x98>)
   140da:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   140dc:	193f      	adds	r7, r7, r4
   140de:	6037      	str	r7, [r6, #0]
  return len;
   140e0:	0020      	movs	r0, r4
}
   140e2:	b003      	add	sp, #12
   140e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   140e6:	2100      	movs	r1, #0
   140e8:	4a19      	ldr	r2, [pc, #100]	; (14150 <WINC1500_read+0xa8>)
   140ea:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   140ec:	7800      	ldrb	r0, [r0, #0]
   140ee:	b240      	sxtb	r0, r0
   140f0:	2280      	movs	r2, #128	; 0x80
   140f2:	0052      	lsls	r2, r2, #1
   140f4:	4914      	ldr	r1, [pc, #80]	; (14148 <WINC1500_read+0xa0>)
   140f6:	4d17      	ldr	r5, [pc, #92]	; (14154 <WINC1500_read+0xac>)
   140f8:	47a8      	blx	r5
   140fa:	2800      	cmp	r0, #0
   140fc:	d11a      	bne.n	14134 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   140fe:	4b14      	ldr	r3, [pc, #80]	; (14150 <WINC1500_read+0xa8>)
   14100:	781b      	ldrb	r3, [r3, #0]
   14102:	2b00      	cmp	r3, #0
   14104:	d106      	bne.n	14114 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   14106:	4f14      	ldr	r7, [pc, #80]	; (14158 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   14108:	4d11      	ldr	r5, [pc, #68]	; (14150 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   1410a:	2000      	movs	r0, #0
   1410c:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   1410e:	782b      	ldrb	r3, [r5, #0]
   14110:	2b00      	cmp	r3, #0
   14112:	d0fa      	beq.n	1410a <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   14114:	4b11      	ldr	r3, [pc, #68]	; (1415c <WINC1500_read+0xb4>)
   14116:	6818      	ldr	r0, [r3, #0]
   14118:	2800      	cmp	r0, #0
   1411a:	dd05      	ble.n	14128 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1411c:	4b08      	ldr	r3, [pc, #32]	; (14140 <WINC1500_read+0x98>)
   1411e:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   14120:	2200      	movs	r2, #0
   14122:	4b08      	ldr	r3, [pc, #32]	; (14144 <WINC1500_read+0x9c>)
   14124:	601a      	str	r2, [r3, #0]
   14126:	e7ca      	b.n	140be <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   14128:	2300      	movs	r3, #0
   1412a:	4a05      	ldr	r2, [pc, #20]	; (14140 <WINC1500_read+0x98>)
   1412c:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   1412e:	4a05      	ldr	r2, [pc, #20]	; (14144 <WINC1500_read+0x9c>)
   14130:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   14132:	e7d6      	b.n	140e2 <WINC1500_read+0x3a>
		  return -1;
   14134:	2001      	movs	r0, #1
   14136:	4240      	negs	r0, r0
   14138:	e7d3      	b.n	140e2 <WINC1500_read+0x3a>
	  return -1;
   1413a:	2001      	movs	r0, #1
   1413c:	4240      	negs	r0, r0
   1413e:	e7d0      	b.n	140e2 <WINC1500_read+0x3a>
   14140:	20000550 	.word	0x20000550
   14144:	20000554 	.word	0x20000554
   14148:	20000444 	.word	0x20000444
   1414c:	00016f79 	.word	0x00016f79
   14150:	20000442 	.word	0x20000442
   14154:	0000f3f9 	.word	0x0000f3f9
   14158:	0000d5c5 	.word	0x0000d5c5
   1415c:	20000548 	.word	0x20000548

00014160 <dnsResolveCallback>:
{
   14160:	b510      	push	{r4, lr}
   14162:	0002      	movs	r2, r0
   14164:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   14166:	4b08      	ldr	r3, [pc, #32]	; (14188 <dnsResolveCallback+0x28>)
   14168:	781b      	ldrb	r3, [r3, #0]
   1416a:	2b00      	cmp	r3, #0
   1416c:	d10b      	bne.n	14186 <dnsResolveCallback+0x26>
   1416e:	4b07      	ldr	r3, [pc, #28]	; (1418c <dnsResolveCallback+0x2c>)
   14170:	6818      	ldr	r0, [r3, #0]
   14172:	0011      	movs	r1, r2
   14174:	4b06      	ldr	r3, [pc, #24]	; (14190 <dnsResolveCallback+0x30>)
   14176:	4798      	blx	r3
   14178:	2800      	cmp	r0, #0
   1417a:	d104      	bne.n	14186 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   1417c:	4b05      	ldr	r3, [pc, #20]	; (14194 <dnsResolveCallback+0x34>)
   1417e:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   14180:	2201      	movs	r2, #1
   14182:	4b01      	ldr	r3, [pc, #4]	; (14188 <dnsResolveCallback+0x28>)
   14184:	701a      	strb	r2, [r3, #0]
}
   14186:	bd10      	pop	{r4, pc}
   14188:	20000441 	.word	0x20000441
   1418c:	2000054c 	.word	0x2000054c
   14190:	00017479 	.word	0x00017479
   14194:	20000544 	.word	0x20000544

00014198 <tcpClientSocketEventHandler>:
{
   14198:	b530      	push	{r4, r5, lr}
   1419a:	4b12      	ldr	r3, [pc, #72]	; (141e4 <tcpClientSocketEventHandler+0x4c>)
   1419c:	24a8      	movs	r4, #168	; 0xa8
   1419e:	00a4      	lsls	r4, r4, #2
   141a0:	191d      	adds	r5, r3, r4
   141a2:	e002      	b.n	141aa <tcpClientSocketEventHandler+0x12>
   141a4:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   141a6:	42ab      	cmp	r3, r5
   141a8:	d00b      	beq.n	141c2 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   141aa:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   141ac:	2c00      	cmp	r4, #0
   141ae:	d0f9      	beq.n	141a4 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   141b0:	6a24      	ldr	r4, [r4, #32]
   141b2:	4284      	cmp	r4, r0
   141b4:	d1f6      	bne.n	141a4 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   141b6:	2906      	cmp	r1, #6
   141b8:	d00c      	beq.n	141d4 <tcpClientSocketEventHandler+0x3c>
   141ba:	2907      	cmp	r1, #7
   141bc:	d006      	beq.n	141cc <tcpClientSocketEventHandler+0x34>
   141be:	2905      	cmp	r1, #5
   141c0:	d000      	beq.n	141c4 <tcpClientSocketEventHandler+0x2c>
}
   141c2:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   141c4:	2201      	movs	r2, #1
   141c6:	4b08      	ldr	r3, [pc, #32]	; (141e8 <tcpClientSocketEventHandler+0x50>)
   141c8:	701a      	strb	r2, [r3, #0]
			break;
   141ca:	e7fa      	b.n	141c2 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   141cc:	2201      	movs	r2, #1
   141ce:	4b07      	ldr	r3, [pc, #28]	; (141ec <tcpClientSocketEventHandler+0x54>)
   141d0:	701a      	strb	r2, [r3, #0]
			break;
   141d2:	e7f6      	b.n	141c2 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   141d4:	2304      	movs	r3, #4
   141d6:	5ed2      	ldrsh	r2, [r2, r3]
   141d8:	4b05      	ldr	r3, [pc, #20]	; (141f0 <tcpClientSocketEventHandler+0x58>)
   141da:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   141dc:	2201      	movs	r2, #1
   141de:	4b05      	ldr	r3, [pc, #20]	; (141f4 <tcpClientSocketEventHandler+0x5c>)
   141e0:	701a      	strb	r2, [r3, #0]
}
   141e2:	e7ee      	b.n	141c2 <tcpClientSocketEventHandler+0x2a>
   141e4:	20000558 	.word	0x20000558
   141e8:	20000440 	.word	0x20000440
   141ec:	20000443 	.word	0x20000443
   141f0:	20000548 	.word	0x20000548
   141f4:	20000442 	.word	0x20000442

000141f8 <SysTick_Handler>:
	MilliTimer++;
   141f8:	4a02      	ldr	r2, [pc, #8]	; (14204 <SysTick_Handler+0xc>)
   141fa:	6813      	ldr	r3, [r2, #0]
   141fc:	3301      	adds	r3, #1
   141fe:	6013      	str	r3, [r2, #0]
}
   14200:	4770      	bx	lr
   14202:	46c0      	nop			; (mov r8, r8)
   14204:	2000043c 	.word	0x2000043c

00014208 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   14208:	6840      	ldr	r0, [r0, #4]
   1420a:	4b02      	ldr	r3, [pc, #8]	; (14214 <TimerIsExpired+0xc>)
   1420c:	681b      	ldr	r3, [r3, #0]
   1420e:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   14210:	0fc0      	lsrs	r0, r0, #31
}
   14212:	4770      	bx	lr
   14214:	2000043c 	.word	0x2000043c

00014218 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   14218:	4b02      	ldr	r3, [pc, #8]	; (14224 <TimerCountdownMS+0xc>)
   1421a:	681b      	ldr	r3, [r3, #0]
   1421c:	1859      	adds	r1, r3, r1
   1421e:	6041      	str	r1, [r0, #4]
}
   14220:	4770      	bx	lr
   14222:	46c0      	nop			; (mov r8, r8)
   14224:	2000043c 	.word	0x2000043c

00014228 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   14228:	23fa      	movs	r3, #250	; 0xfa
   1422a:	009b      	lsls	r3, r3, #2
   1422c:	4359      	muls	r1, r3
   1422e:	4b02      	ldr	r3, [pc, #8]	; (14238 <TimerCountdown+0x10>)
   14230:	681b      	ldr	r3, [r3, #0]
   14232:	18c9      	adds	r1, r1, r3
   14234:	6041      	str	r1, [r0, #4]
}
   14236:	4770      	bx	lr
   14238:	2000043c 	.word	0x2000043c

0001423c <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   1423c:	6840      	ldr	r0, [r0, #4]
   1423e:	4b03      	ldr	r3, [pc, #12]	; (1424c <TimerLeftMS+0x10>)
   14240:	681b      	ldr	r3, [r3, #0]
   14242:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   14244:	43c3      	mvns	r3, r0
   14246:	17db      	asrs	r3, r3, #31
   14248:	4018      	ands	r0, r3
}
   1424a:	4770      	bx	lr
   1424c:	2000043c 	.word	0x2000043c

00014250 <TimerInit>:
	timer->end_time = 0;
   14250:	2300      	movs	r3, #0
   14252:	6043      	str	r3, [r0, #4]
}
   14254:	4770      	bx	lr
	...

00014258 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   14258:	2301      	movs	r3, #1
   1425a:	425b      	negs	r3, r3
   1425c:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   1425e:	4b03      	ldr	r3, [pc, #12]	; (1426c <NetworkInit+0x14>)
   14260:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   14262:	4b03      	ldr	r3, [pc, #12]	; (14270 <NetworkInit+0x18>)
   14264:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   14266:	4b03      	ldr	r3, [pc, #12]	; (14274 <NetworkInit+0x1c>)
   14268:	6103      	str	r3, [r0, #16]
}
   1426a:	4770      	bx	lr
   1426c:	000140a9 	.word	0x000140a9
   14270:	00014061 	.word	0x00014061
   14274:	0001403d 	.word	0x0001403d

00014278 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   14278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1427a:	b087      	sub	sp, #28
   1427c:	0006      	movs	r6, r0
   1427e:	0015      	movs	r5, r2
   14280:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   14282:	4c25      	ldr	r4, [pc, #148]	; (14318 <ConnectNetwork+0xa0>)
   14284:	2300      	movs	r3, #0
   14286:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   14288:	4b24      	ldr	r3, [pc, #144]	; (1431c <ConnectNetwork+0xa4>)
   1428a:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   1428c:	0008      	movs	r0, r1
   1428e:	4b24      	ldr	r3, [pc, #144]	; (14320 <ConnectNetwork+0xa8>)
   14290:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   14292:	7823      	ldrb	r3, [r4, #0]
   14294:	2b00      	cmp	r3, #0
   14296:	d106      	bne.n	142a6 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   14298:	4f22      	ldr	r7, [pc, #136]	; (14324 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   1429a:	4c1f      	ldr	r4, [pc, #124]	; (14318 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   1429c:	2000      	movs	r0, #0
   1429e:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   142a0:	7823      	ldrb	r3, [r4, #0]
   142a2:	2b00      	cmp	r3, #0
   142a4:	d0fa      	beq.n	1429c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   142a6:	4b20      	ldr	r3, [pc, #128]	; (14328 <ConnectNetwork+0xb0>)
   142a8:	681a      	ldr	r2, [r3, #0]
   142aa:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   142ac:	2302      	movs	r3, #2
   142ae:	a902      	add	r1, sp, #8
   142b0:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   142b2:	022b      	lsls	r3, r5, #8
   142b4:	491d      	ldr	r1, [pc, #116]	; (1432c <ConnectNetwork+0xb4>)
   142b6:	400b      	ands	r3, r1
   142b8:	b2ad      	uxth	r5, r5
   142ba:	0a2d      	lsrs	r5, r5, #8
   142bc:	431d      	orrs	r5, r3
   142be:	ab02      	add	r3, sp, #8
   142c0:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   142c2:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   142c4:	6833      	ldr	r3, [r6, #0]
   142c6:	2b00      	cmp	r3, #0
   142c8:	db16      	blt.n	142f8 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   142ca:	6830      	ldr	r0, [r6, #0]
   142cc:	1c43      	adds	r3, r0, #1
   142ce:	d01b      	beq.n	14308 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   142d0:	b240      	sxtb	r0, r0
   142d2:	2210      	movs	r2, #16
   142d4:	a902      	add	r1, sp, #8
   142d6:	4b16      	ldr	r3, [pc, #88]	; (14330 <ConnectNetwork+0xb8>)
   142d8:	4798      	blx	r3
   142da:	2800      	cmp	r0, #0
   142dc:	d119      	bne.n	14312 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   142de:	2200      	movs	r2, #0
   142e0:	4b14      	ldr	r3, [pc, #80]	; (14334 <ConnectNetwork+0xbc>)
   142e2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   142e4:	4d0f      	ldr	r5, [pc, #60]	; (14324 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   142e6:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   142e8:	2000      	movs	r0, #0
   142ea:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   142ec:	7823      	ldrb	r3, [r4, #0]
   142ee:	2b00      	cmp	r3, #0
   142f0:	d0fa      	beq.n	142e8 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   142f2:	2000      	movs	r0, #0
   142f4:	b007      	add	sp, #28
   142f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   142f8:	466b      	mov	r3, sp
   142fa:	791a      	ldrb	r2, [r3, #4]
   142fc:	2101      	movs	r1, #1
   142fe:	2002      	movs	r0, #2
   14300:	4b0d      	ldr	r3, [pc, #52]	; (14338 <ConnectNetwork+0xc0>)
   14302:	4798      	blx	r3
   14304:	6030      	str	r0, [r6, #0]
   14306:	e7e0      	b.n	142ca <ConnectNetwork+0x52>
   close(n->socket);
   14308:	4b0c      	ldr	r3, [pc, #48]	; (1433c <ConnectNetwork+0xc4>)
   1430a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1430c:	2009      	movs	r0, #9
   1430e:	4240      	negs	r0, r0
   14310:	e7f0      	b.n	142f4 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   14312:	2009      	movs	r0, #9
   14314:	4240      	negs	r0, r0
   14316:	e7ed      	b.n	142f4 <ConnectNetwork+0x7c>
   14318:	20000441 	.word	0x20000441
   1431c:	2000054c 	.word	0x2000054c
   14320:	0000f595 	.word	0x0000f595
   14324:	0000d5c5 	.word	0x0000d5c5
   14328:	20000544 	.word	0x20000544
   1432c:	00ffff00 	.word	0x00ffff00
   14330:	0000f2d1 	.word	0x0000f2d1
   14334:	20000440 	.word	0x20000440
   14338:	0000f14d 	.word	0x0000f14d
   1433c:	0000f48d 	.word	0x0000f48d

00014340 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   14340:	b5f0      	push	{r4, r5, r6, r7, lr}
   14342:	b085      	sub	sp, #20
   14344:	0006      	movs	r6, r0
   14346:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   14348:	2800      	cmp	r0, #0
   1434a:	d03d      	beq.n	143c8 <mqtt_init+0x88>
   1434c:	2900      	cmp	r1, #0
   1434e:	d03e      	beq.n	143ce <mqtt_init+0x8e>
   14350:	690b      	ldr	r3, [r1, #16]
   14352:	2b00      	cmp	r3, #0
   14354:	d03e      	beq.n	143d4 <mqtt_init+0x94>
   14356:	688b      	ldr	r3, [r1, #8]
   14358:	2b00      	cmp	r3, #0
   1435a:	d03e      	beq.n	143da <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   1435c:	888b      	ldrh	r3, [r1, #4]
   1435e:	27fa      	movs	r7, #250	; 0xfa
   14360:	00bf      	lsls	r7, r7, #2
   14362:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   14364:	0004      	movs	r4, r0
   14366:	3420      	adds	r4, #32
   14368:	0020      	movs	r0, r4
   1436a:	4b1f      	ldr	r3, [pc, #124]	; (143e8 <mqtt_init+0xa8>)
   1436c:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1436e:	1d30      	adds	r0, r6, #4
   14370:	2218      	movs	r2, #24
   14372:	0029      	movs	r1, r5
   14374:	4b1d      	ldr	r3, [pc, #116]	; (143ec <mqtt_init+0xac>)
   14376:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14378:	4b1d      	ldr	r3, [pc, #116]	; (143f0 <mqtt_init+0xb0>)
   1437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1437c:	2b00      	cmp	r3, #0
   1437e:	d01a      	beq.n	143b6 <mqtt_init+0x76>
   14380:	4b1b      	ldr	r3, [pc, #108]	; (143f0 <mqtt_init+0xb0>)
   14382:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14384:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   14386:	6819      	ldr	r1, [r3, #0]
   14388:	2900      	cmp	r1, #0
   1438a:	d015      	beq.n	143b8 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1438c:	3201      	adds	r2, #1
   1438e:	3360      	adds	r3, #96	; 0x60
   14390:	2a07      	cmp	r2, #7
   14392:	d1f8      	bne.n	14386 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   14394:	69f0      	ldr	r0, [r6, #28]
   14396:	2800      	cmp	r0, #0
   14398:	d022      	beq.n	143e0 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1439a:	692b      	ldr	r3, [r5, #16]
   1439c:	68ea      	ldr	r2, [r5, #12]
   1439e:	9202      	str	r2, [sp, #8]
   143a0:	68aa      	ldr	r2, [r5, #8]
   143a2:	9201      	str	r2, [sp, #4]
   143a4:	696a      	ldr	r2, [r5, #20]
   143a6:	9200      	str	r2, [sp, #0]
   143a8:	003a      	movs	r2, r7
   143aa:	0021      	movs	r1, r4
   143ac:	4c11      	ldr	r4, [pc, #68]	; (143f4 <mqtt_init+0xb4>)
   143ae:	47a0      	blx	r4
		return SUCCESS;
   143b0:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   143b2:	b005      	add	sp, #20
   143b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   143b6:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   143b8:	480d      	ldr	r0, [pc, #52]	; (143f0 <mqtt_init+0xb0>)
   143ba:	0053      	lsls	r3, r2, #1
   143bc:	1899      	adds	r1, r3, r2
   143be:	0149      	lsls	r1, r1, #5
   143c0:	1841      	adds	r1, r0, r1
   143c2:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   143c4:	61f1      	str	r1, [r6, #28]
   143c6:	e7e5      	b.n	14394 <mqtt_init+0x54>
		return FAILURE;
   143c8:	2001      	movs	r0, #1
   143ca:	4240      	negs	r0, r0
   143cc:	e7f1      	b.n	143b2 <mqtt_init+0x72>
   143ce:	2001      	movs	r0, #1
   143d0:	4240      	negs	r0, r0
   143d2:	e7ee      	b.n	143b2 <mqtt_init+0x72>
   143d4:	2001      	movs	r0, #1
   143d6:	4240      	negs	r0, r0
   143d8:	e7eb      	b.n	143b2 <mqtt_init+0x72>
   143da:	2001      	movs	r0, #1
   143dc:	4240      	negs	r0, r0
   143de:	e7e8      	b.n	143b2 <mqtt_init+0x72>
		return FAILURE;
   143e0:	2001      	movs	r0, #1
   143e2:	4240      	negs	r0, r0
   143e4:	e7e5      	b.n	143b2 <mqtt_init+0x72>
   143e6:	46c0      	nop			; (mov r8, r8)
   143e8:	00014259 	.word	0x00014259
   143ec:	00016f79 	.word	0x00016f79
   143f0:	20000558 	.word	0x20000558
   143f4:	00013909 	.word	0x00013909

000143f8 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   143f8:	4b05      	ldr	r3, [pc, #20]	; (14410 <mqtt_get_config_defaults+0x18>)
   143fa:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   143fc:	2300      	movs	r3, #0
   143fe:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   14400:	223c      	movs	r2, #60	; 0x3c
   14402:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   14404:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   14406:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   14408:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   1440a:	6143      	str	r3, [r0, #20]
}
   1440c:	4770      	bx	lr
   1440e:	46c0      	nop			; (mov r8, r8)
   14410:	0000075b 	.word	0x0000075b

00014414 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   14414:	2800      	cmp	r0, #0
   14416:	d002      	beq.n	1441e <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   14418:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   1441a:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   1441c:	4770      	bx	lr
		return FAILURE;
   1441e:	2001      	movs	r0, #1
   14420:	4240      	negs	r0, r0
   14422:	e7fb      	b.n	1441c <mqtt_register_callback+0x8>

00014424 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   14424:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   14426:	4b01      	ldr	r3, [pc, #4]	; (1442c <mqtt_socket_event_handler+0x8>)
   14428:	4798      	blx	r3
}
   1442a:	bd10      	pop	{r4, pc}
   1442c:	00014199 	.word	0x00014199

00014430 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   14430:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   14432:	4b01      	ldr	r3, [pc, #4]	; (14438 <mqtt_socket_resolve_handler+0x8>)
   14434:	4798      	blx	r3
}
   14436:	bd10      	pop	{r4, pc}
   14438:	00014161 	.word	0x00014161

0001443c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1443c:	b530      	push	{r4, r5, lr}
   1443e:	b083      	sub	sp, #12
   14440:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   14442:	7983      	ldrb	r3, [r0, #6]
   14444:	8882      	ldrh	r2, [r0, #4]
   14446:	3020      	adds	r0, #32
   14448:	4d06      	ldr	r5, [pc, #24]	; (14464 <mqtt_connect+0x28>)
   1444a:	47a8      	blx	r5
   1444c:	9001      	str	r0, [sp, #4]
	if(module->callback)
   1444e:	6823      	ldr	r3, [r4, #0]
   14450:	2b00      	cmp	r3, #0
   14452:	d003      	beq.n	1445c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   14454:	aa01      	add	r2, sp, #4
   14456:	2100      	movs	r1, #0
   14458:	0020      	movs	r0, r4
   1445a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   1445c:	9801      	ldr	r0, [sp, #4]
   1445e:	b003      	add	sp, #12
   14460:	bd30      	pop	{r4, r5, pc}
   14462:	46c0      	nop			; (mov r8, r8)
   14464:	00014279 	.word	0x00014279

00014468 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   14468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1446a:	46de      	mov	lr, fp
   1446c:	4657      	mov	r7, sl
   1446e:	464e      	mov	r6, r9
   14470:	b5c0      	push	{r6, r7, lr}
   14472:	b098      	sub	sp, #96	; 0x60
   14474:	0005      	movs	r5, r0
   14476:	4689      	mov	r9, r1
   14478:	4693      	mov	fp, r2
   1447a:	469a      	mov	sl, r3
   1447c:	ab24      	add	r3, sp, #144	; 0x90
   1447e:	781f      	ldrb	r7, [r3, #0]
   14480:	ab25      	add	r3, sp, #148	; 0x94
   14482:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   14484:	ac01      	add	r4, sp, #4
   14486:	2258      	movs	r2, #88	; 0x58
   14488:	491a      	ldr	r1, [pc, #104]	; (144f4 <mqtt_connect_broker+0x8c>)
   1448a:	0020      	movs	r0, r4
   1448c:	4b1a      	ldr	r3, [pc, #104]	; (144f8 <mqtt_connect_broker+0x90>)
   1448e:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   14490:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14492:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   14494:	465b      	mov	r3, fp
   14496:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   14498:	4653      	mov	r3, sl
   1449a:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1449c:	464b      	mov	r3, r9
   1449e:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   144a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   144a2:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   144a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   144a6:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   144a8:	233c      	movs	r3, #60	; 0x3c
   144aa:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   144ac:	3301      	adds	r3, #1
   144ae:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   144b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   144b2:	2b00      	cmp	r3, #0
   144b4:	d005      	beq.n	144c2 <mqtt_connect_broker+0x5a>
   144b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   144b8:	2b00      	cmp	r3, #0
   144ba:	d002      	beq.n	144c2 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   144bc:	2201      	movs	r2, #1
   144be:	ab01      	add	r3, sp, #4
   144c0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   144c2:	a901      	add	r1, sp, #4
   144c4:	69e8      	ldr	r0, [r5, #28]
   144c6:	4b0d      	ldr	r3, [pc, #52]	; (144fc <mqtt_connect_broker+0x94>)
   144c8:	4798      	blx	r3
   144ca:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   144cc:	ab17      	add	r3, sp, #92	; 0x5c
   144ce:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   144d0:	682b      	ldr	r3, [r5, #0]
   144d2:	2b00      	cmp	r3, #0
   144d4:	d003      	beq.n	144de <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   144d6:	aa17      	add	r2, sp, #92	; 0x5c
   144d8:	2101      	movs	r1, #1
   144da:	0028      	movs	r0, r5
   144dc:	4798      	blx	r3
	
	module->isConnected = true;
   144de:	2201      	movs	r2, #1
   144e0:	2334      	movs	r3, #52	; 0x34
   144e2:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   144e4:	0020      	movs	r0, r4
   144e6:	b018      	add	sp, #96	; 0x60
   144e8:	bc1c      	pop	{r2, r3, r4}
   144ea:	4691      	mov	r9, r2
   144ec:	469a      	mov	sl, r3
   144ee:	46a3      	mov	fp, r4
   144f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144f2:	46c0      	nop			; (mov r8, r8)
   144f4:	00019bf8 	.word	0x00019bf8
   144f8:	00016f79 	.word	0x00016f79
   144fc:	00013d11 	.word	0x00013d11

00014500 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   14500:	b530      	push	{r4, r5, lr}
   14502:	b083      	sub	sp, #12
   14504:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   14506:	69c0      	ldr	r0, [r0, #28]
   14508:	4b08      	ldr	r3, [pc, #32]	; (1452c <mqtt_disconnect+0x2c>)
   1450a:	4798      	blx	r3
   1450c:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   1450e:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   14510:	6823      	ldr	r3, [r4, #0]
   14512:	2b00      	cmp	r3, #0
   14514:	d003      	beq.n	1451e <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   14516:	aa01      	add	r2, sp, #4
   14518:	2105      	movs	r1, #5
   1451a:	0020      	movs	r0, r4
   1451c:	4798      	blx	r3
	
	module->isConnected = false;
   1451e:	2200      	movs	r2, #0
   14520:	2334      	movs	r3, #52	; 0x34
   14522:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   14524:	0028      	movs	r0, r5
   14526:	b003      	add	sp, #12
   14528:	bd30      	pop	{r4, r5, pc}
   1452a:	46c0      	nop			; (mov r8, r8)
   1452c:	00013ff5 	.word	0x00013ff5

00014530 <mqtt_deinit>:
{
   14530:	b510      	push	{r4, lr}
   14532:	1e04      	subs	r4, r0, #0
	if(module)
   14534:	d022      	beq.n	1457c <mqtt_deinit+0x4c>
		if(module->isConnected)
   14536:	2334      	movs	r3, #52	; 0x34
   14538:	5cc3      	ldrb	r3, [r0, r3]
   1453a:	2b00      	cmp	r3, #0
   1453c:	d10f      	bne.n	1455e <mqtt_deinit+0x2e>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   1453e:	4b11      	ldr	r3, [pc, #68]	; (14584 <mqtt_deinit+0x54>)
   14540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14542:	429c      	cmp	r4, r3
   14544:	d00f      	beq.n	14566 <mqtt_deinit+0x36>
   14546:	4b0f      	ldr	r3, [pc, #60]	; (14584 <mqtt_deinit+0x54>)
   14548:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1454a:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == module)
   1454c:	6819      	ldr	r1, [r3, #0]
   1454e:	428c      	cmp	r4, r1
   14550:	d00a      	beq.n	14568 <mqtt_deinit+0x38>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   14552:	3201      	adds	r2, #1
   14554:	3360      	adds	r3, #96	; 0x60
   14556:	2a07      	cmp	r2, #7
   14558:	d1f8      	bne.n	1454c <mqtt_deinit+0x1c>
		return SUCCESS;
   1455a:	2000      	movs	r0, #0
}
   1455c:	bd10      	pop	{r4, pc}
			mqtt_disconnect(module, 0);
   1455e:	2100      	movs	r1, #0
   14560:	4b09      	ldr	r3, [pc, #36]	; (14588 <mqtt_deinit+0x58>)
   14562:	4798      	blx	r3
   14564:	e7eb      	b.n	1453e <mqtt_deinit+0xe>
		if(mqttClientPool[cIdx].mqtt_instance == module)
   14566:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = NULL;
   14568:	0053      	lsls	r3, r2, #1
   1456a:	189a      	adds	r2, r3, r2
   1456c:	0152      	lsls	r2, r2, #5
   1456e:	4b05      	ldr	r3, [pc, #20]	; (14584 <mqtt_deinit+0x54>)
   14570:	189a      	adds	r2, r3, r2
   14572:	2300      	movs	r3, #0
   14574:	65d3      	str	r3, [r2, #92]	; 0x5c
			module->client = NULL;
   14576:	61e3      	str	r3, [r4, #28]
		return SUCCESS;
   14578:	2000      	movs	r0, #0
   1457a:	e7ef      	b.n	1455c <mqtt_deinit+0x2c>
		return FAILURE;
   1457c:	2001      	movs	r0, #1
   1457e:	4240      	negs	r0, r0
   14580:	e7ec      	b.n	1455c <mqtt_deinit+0x2c>
   14582:	46c0      	nop			; (mov r8, r8)
   14584:	20000558 	.word	0x20000558
   14588:	00014501 	.word	0x00014501

0001458c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1458c:	b570      	push	{r4, r5, r6, lr}
   1458e:	b084      	sub	sp, #16
   14590:	0004      	movs	r4, r0
   14592:	a808      	add	r0, sp, #32
   14594:	7805      	ldrb	r5, [r0, #0]
   14596:	a809      	add	r0, sp, #36	; 0x24
   14598:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1459a:	466e      	mov	r6, sp
   1459c:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   1459e:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   145a0:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   145a2:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   145a4:	466a      	mov	r2, sp
   145a6:	69e0      	ldr	r0, [r4, #28]
   145a8:	4b06      	ldr	r3, [pc, #24]	; (145c4 <mqtt_publish+0x38>)
   145aa:	4798      	blx	r3
   145ac:	0005      	movs	r5, r0
	
	if(module->callback)
   145ae:	6823      	ldr	r3, [r4, #0]
   145b0:	2b00      	cmp	r3, #0
   145b2:	d003      	beq.n	145bc <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   145b4:	2200      	movs	r2, #0
   145b6:	2102      	movs	r1, #2
   145b8:	0020      	movs	r0, r4
   145ba:	4798      	blx	r3
	
	return rc;
}
   145bc:	0028      	movs	r0, r5
   145be:	b004      	add	sp, #16
   145c0:	bd70      	pop	{r4, r5, r6, pc}
   145c2:	46c0      	nop			; (mov r8, r8)
   145c4:	00013ee5 	.word	0x00013ee5

000145c8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   145c8:	b570      	push	{r4, r5, r6, lr}
   145ca:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   145cc:	69c0      	ldr	r0, [r0, #28]
   145ce:	4d06      	ldr	r5, [pc, #24]	; (145e8 <mqtt_subscribe+0x20>)
   145d0:	47a8      	blx	r5
   145d2:	0005      	movs	r5, r0
	
	if(module->callback)
   145d4:	6823      	ldr	r3, [r4, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d003      	beq.n	145e2 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   145da:	2200      	movs	r2, #0
   145dc:	2103      	movs	r1, #3
   145de:	0020      	movs	r0, r4
   145e0:	4798      	blx	r3
	
	return rc;
}
   145e2:	0028      	movs	r0, r5
   145e4:	bd70      	pop	{r4, r5, r6, pc}
   145e6:	46c0      	nop			; (mov r8, r8)
   145e8:	00013de1 	.word	0x00013de1

000145ec <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   145ec:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   145ee:	69c0      	ldr	r0, [r0, #28]
   145f0:	4b01      	ldr	r3, [pc, #4]	; (145f8 <mqtt_yield+0xc>)
   145f2:	4798      	blx	r3
   145f4:	bd10      	pop	{r4, pc}
   145f6:	46c0      	nop			; (mov r8, r8)
   145f8:	00013c95 	.word	0x00013c95

000145fc <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   145fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145fe:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   14600:	7a03      	ldrb	r3, [r0, #8]
   14602:	2b03      	cmp	r3, #3
   14604:	d024      	beq.n	14650 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   14606:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   14608:	2b04      	cmp	r3, #4
   1460a:	d01f      	beq.n	1464c <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   1460c:	68e0      	ldr	r0, [r4, #12]
   1460e:	6921      	ldr	r1, [r4, #16]
   14610:	6962      	ldr	r2, [r4, #20]
   14612:	4b1b      	ldr	r3, [pc, #108]	; (14680 <MQTTSerialize_connectLength+0x84>)
   14614:	4798      	blx	r3
   14616:	1c85      	adds	r5, r0, #2
   14618:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   1461a:	7ee3      	ldrb	r3, [r4, #27]
   1461c:	2b00      	cmp	r3, #0
   1461e:	d119      	bne.n	14654 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   14620:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14622:	2b00      	cmp	r3, #0
   14624:	d024      	beq.n	14670 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   14626:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14628:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1462a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1462c:	4b14      	ldr	r3, [pc, #80]	; (14680 <MQTTSerialize_connectLength+0x84>)
   1462e:	4798      	blx	r3
   14630:	3002      	adds	r0, #2
   14632:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   14634:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14636:	2b00      	cmp	r3, #0
   14638:	d01e      	beq.n	14678 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   1463a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1463c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1463e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   14640:	4b0f      	ldr	r3, [pc, #60]	; (14680 <MQTTSerialize_connectLength+0x84>)
   14642:	4798      	blx	r3
   14644:	3002      	adds	r0, #2
   14646:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   14648:	0028      	movs	r0, r5
   1464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   1464c:	360a      	adds	r6, #10
   1464e:	e7dd      	b.n	1460c <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   14650:	260c      	movs	r6, #12
   14652:	e7db      	b.n	1460c <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   14654:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14656:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1465a:	4f09      	ldr	r7, [pc, #36]	; (14680 <MQTTSerialize_connectLength+0x84>)
   1465c:	47b8      	blx	r7
   1465e:	0006      	movs	r6, r0
   14660:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14662:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14664:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14666:	47b8      	blx	r7
   14668:	1836      	adds	r6, r6, r0
   1466a:	3604      	adds	r6, #4
   1466c:	19ad      	adds	r5, r5, r6
   1466e:	e7d7      	b.n	14620 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   14670:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14672:	2b00      	cmp	r3, #0
   14674:	d1d7      	bne.n	14626 <MQTTSerialize_connectLength+0x2a>
   14676:	e7dd      	b.n	14634 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   14678:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1467a:	2b00      	cmp	r3, #0
   1467c:	d1dd      	bne.n	1463a <MQTTSerialize_connectLength+0x3e>
   1467e:	e7e3      	b.n	14648 <MQTTSerialize_connectLength+0x4c>
   14680:	00014b65 	.word	0x00014b65

00014684 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14684:	b5f0      	push	{r4, r5, r6, r7, lr}
   14686:	b083      	sub	sp, #12
   14688:	0006      	movs	r6, r0
   1468a:	000f      	movs	r7, r1
   1468c:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   1468e:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   14690:	0010      	movs	r0, r2
   14692:	4b45      	ldr	r3, [pc, #276]	; (147a8 <MQTTSerialize_connect+0x124>)
   14694:	4798      	blx	r3
   14696:	0004      	movs	r4, r0
   14698:	4b44      	ldr	r3, [pc, #272]	; (147ac <MQTTSerialize_connect+0x128>)
   1469a:	4798      	blx	r3
   1469c:	42b8      	cmp	r0, r7
   1469e:	dd00      	ble.n	146a2 <MQTTSerialize_connect+0x1e>
   146a0:	e07f      	b.n	147a2 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   146a2:	2110      	movs	r1, #16
   146a4:	a801      	add	r0, sp, #4
   146a6:	4b42      	ldr	r3, [pc, #264]	; (147b0 <MQTTSerialize_connect+0x12c>)
   146a8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   146aa:	0021      	movs	r1, r4
   146ac:	9801      	ldr	r0, [sp, #4]
   146ae:	4b41      	ldr	r3, [pc, #260]	; (147b4 <MQTTSerialize_connect+0x130>)
   146b0:	4798      	blx	r3
   146b2:	9b01      	ldr	r3, [sp, #4]
   146b4:	469c      	mov	ip, r3
   146b6:	4460      	add	r0, ip
   146b8:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   146ba:	7a2b      	ldrb	r3, [r5, #8]
   146bc:	2b04      	cmp	r3, #4
   146be:	d045      	beq.n	1474c <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   146c0:	493d      	ldr	r1, [pc, #244]	; (147b8 <MQTTSerialize_connect+0x134>)
   146c2:	a801      	add	r0, sp, #4
   146c4:	4b3d      	ldr	r3, [pc, #244]	; (147bc <MQTTSerialize_connect+0x138>)
   146c6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   146c8:	2103      	movs	r1, #3
   146ca:	a801      	add	r0, sp, #4
   146cc:	4b38      	ldr	r3, [pc, #224]	; (147b0 <MQTTSerialize_connect+0x12c>)
   146ce:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   146d0:	7ea9      	ldrb	r1, [r5, #26]
   146d2:	2301      	movs	r3, #1
   146d4:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   146d6:	7eea      	ldrb	r2, [r5, #27]
   146d8:	1e50      	subs	r0, r2, #1
   146da:	4182      	sbcs	r2, r0
   146dc:	b2d2      	uxtb	r2, r2
   146de:	4013      	ands	r3, r2
   146e0:	009b      	lsls	r3, r3, #2
   146e2:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   146e4:	4319      	orrs	r1, r3
   146e6:	2b00      	cmp	r3, #0
   146e8:	d00b      	beq.n	14702 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   146ea:	233d      	movs	r3, #61	; 0x3d
   146ec:	5cea      	ldrb	r2, [r5, r3]
   146ee:	3b3a      	subs	r3, #58	; 0x3a
   146f0:	4013      	ands	r3, r2
   146f2:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   146f4:	223c      	movs	r2, #60	; 0x3c
   146f6:	5ca8      	ldrb	r0, [r5, r2]
   146f8:	3a3b      	subs	r2, #59	; 0x3b
   146fa:	4002      	ands	r2, r0
   146fc:	0152      	lsls	r2, r2, #5
   146fe:	4319      	orrs	r1, r3
   14700:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   14702:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   14704:	2b00      	cmp	r3, #0
   14706:	d02a      	beq.n	1475e <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   14708:	2380      	movs	r3, #128	; 0x80
   1470a:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   1470c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1470e:	2b00      	cmp	r3, #0
   14710:	d029      	beq.n	14766 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   14712:	2340      	movs	r3, #64	; 0x40
   14714:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   14716:	b2cc      	uxtb	r4, r1
   14718:	0021      	movs	r1, r4
   1471a:	a801      	add	r0, sp, #4
   1471c:	4b24      	ldr	r3, [pc, #144]	; (147b0 <MQTTSerialize_connect+0x12c>)
   1471e:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   14720:	8b29      	ldrh	r1, [r5, #24]
   14722:	a801      	add	r0, sp, #4
   14724:	4b26      	ldr	r3, [pc, #152]	; (147c0 <MQTTSerialize_connect+0x13c>)
   14726:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   14728:	68e9      	ldr	r1, [r5, #12]
   1472a:	692a      	ldr	r2, [r5, #16]
   1472c:	696b      	ldr	r3, [r5, #20]
   1472e:	a801      	add	r0, sp, #4
   14730:	4f24      	ldr	r7, [pc, #144]	; (147c4 <MQTTSerialize_connect+0x140>)
   14732:	47b8      	blx	r7
	if (options->willFlag)
   14734:	7eeb      	ldrb	r3, [r5, #27]
   14736:	2b00      	cmp	r3, #0
   14738:	d119      	bne.n	1476e <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   1473a:	b263      	sxtb	r3, r4
   1473c:	2b00      	cmp	r3, #0
   1473e:	db22      	blt.n	14786 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   14740:	0663      	lsls	r3, r4, #25
   14742:	d427      	bmi.n	14794 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   14744:	9b01      	ldr	r3, [sp, #4]
   14746:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   14748:	b003      	add	sp, #12
   1474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   1474c:	491e      	ldr	r1, [pc, #120]	; (147c8 <MQTTSerialize_connect+0x144>)
   1474e:	a801      	add	r0, sp, #4
   14750:	4b1a      	ldr	r3, [pc, #104]	; (147bc <MQTTSerialize_connect+0x138>)
   14752:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   14754:	2104      	movs	r1, #4
   14756:	a801      	add	r0, sp, #4
   14758:	4b15      	ldr	r3, [pc, #84]	; (147b0 <MQTTSerialize_connect+0x12c>)
   1475a:	4798      	blx	r3
   1475c:	e7b8      	b.n	146d0 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   1475e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14760:	2b00      	cmp	r3, #0
   14762:	d1d1      	bne.n	14708 <MQTTSerialize_connect+0x84>
   14764:	e7d2      	b.n	1470c <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   14766:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14768:	2b00      	cmp	r3, #0
   1476a:	d1d2      	bne.n	14712 <MQTTSerialize_connect+0x8e>
   1476c:	e7d3      	b.n	14716 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   1476e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   14770:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14772:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14774:	a801      	add	r0, sp, #4
   14776:	4f13      	ldr	r7, [pc, #76]	; (147c4 <MQTTSerialize_connect+0x140>)
   14778:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   1477a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1477c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1477e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14780:	a801      	add	r0, sp, #4
   14782:	47b8      	blx	r7
   14784:	e7d9      	b.n	1473a <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14786:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14788:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   1478a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1478c:	a801      	add	r0, sp, #4
   1478e:	4f0d      	ldr	r7, [pc, #52]	; (147c4 <MQTTSerialize_connect+0x140>)
   14790:	47b8      	blx	r7
   14792:	e7d5      	b.n	14740 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14794:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14796:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14798:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1479a:	a801      	add	r0, sp, #4
   1479c:	4c09      	ldr	r4, [pc, #36]	; (147c4 <MQTTSerialize_connect+0x140>)
   1479e:	47a0      	blx	r4
   147a0:	e7d0      	b.n	14744 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   147a2:	2002      	movs	r0, #2
   147a4:	4240      	negs	r0, r0
	return rc;
   147a6:	e7cf      	b.n	14748 <MQTTSerialize_connect+0xc4>
   147a8:	000145fd 	.word	0x000145fd
   147ac:	00014a09 	.word	0x00014a09
   147b0:	00014a6b 	.word	0x00014a6b
   147b4:	00014981 	.word	0x00014981
   147b8:	00019c58 	.word	0x00019c58
   147bc:	00014aa1 	.word	0x00014aa1
   147c0:	00014a77 	.word	0x00014a77
   147c4:	00014ad9 	.word	0x00014ad9
   147c8:	00019c50 	.word	0x00019c50

000147cc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   147cc:	b570      	push	{r4, r5, r6, lr}
   147ce:	b082      	sub	sp, #8
   147d0:	0005      	movs	r5, r0
   147d2:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   147d4:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   147d6:	a801      	add	r0, sp, #4
   147d8:	4b0e      	ldr	r3, [pc, #56]	; (14814 <MQTTDeserialize_connack+0x48>)
   147da:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   147dc:	23f0      	movs	r3, #240	; 0xf0
   147de:	4003      	ands	r3, r0
	int rc = 0;
   147e0:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   147e2:	2b20      	cmp	r3, #32
   147e4:	d001      	beq.n	147ea <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   147e6:	b002      	add	sp, #8
   147e8:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   147ea:	4669      	mov	r1, sp
   147ec:	9801      	ldr	r0, [sp, #4]
   147ee:	4b0a      	ldr	r3, [pc, #40]	; (14818 <MQTTDeserialize_connack+0x4c>)
   147f0:	4798      	blx	r3
   147f2:	9b01      	ldr	r3, [sp, #4]
   147f4:	181b      	adds	r3, r3, r0
   147f6:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   147f8:	9b00      	ldr	r3, [sp, #0]
   147fa:	2b01      	cmp	r3, #1
   147fc:	ddf3      	ble.n	147e6 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   147fe:	a801      	add	r0, sp, #4
   14800:	4e04      	ldr	r6, [pc, #16]	; (14814 <MQTTDeserialize_connack+0x48>)
   14802:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   14804:	0600      	lsls	r0, r0, #24
   14806:	0fc0      	lsrs	r0, r0, #31
   14808:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   1480a:	a801      	add	r0, sp, #4
   1480c:	47b0      	blx	r6
   1480e:	7020      	strb	r0, [r4, #0]
	rc = 1;
   14810:	2001      	movs	r0, #1
   14812:	e7e8      	b.n	147e6 <MQTTDeserialize_connack+0x1a>
   14814:	00014a5f 	.word	0x00014a5f
   14818:	00014a31 	.word	0x00014a31

0001481c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1481c:	b510      	push	{r4, lr}
   1481e:	b082      	sub	sp, #8
   14820:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   14822:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   14824:	2901      	cmp	r1, #1
   14826:	dd0f      	ble.n	14848 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   14828:	210f      	movs	r1, #15
   1482a:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1482c:	0109      	lsls	r1, r1, #4
   1482e:	a801      	add	r0, sp, #4
   14830:	4b07      	ldr	r3, [pc, #28]	; (14850 <MQTTSerialize_zero+0x34>)
   14832:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14834:	2100      	movs	r1, #0
   14836:	9801      	ldr	r0, [sp, #4]
   14838:	4b06      	ldr	r3, [pc, #24]	; (14854 <MQTTSerialize_zero+0x38>)
   1483a:	4798      	blx	r3
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	469c      	mov	ip, r3
   14840:	4460      	add	r0, ip
	rc = ptr - buf;
   14842:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14844:	b002      	add	sp, #8
   14846:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14848:	2002      	movs	r0, #2
   1484a:	4240      	negs	r0, r0
	return rc;
   1484c:	e7fa      	b.n	14844 <MQTTSerialize_zero+0x28>
   1484e:	46c0      	nop			; (mov r8, r8)
   14850:	00014a6b 	.word	0x00014a6b
   14854:	00014981 	.word	0x00014981

00014858 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14858:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1485a:	220e      	movs	r2, #14
   1485c:	4b01      	ldr	r3, [pc, #4]	; (14864 <MQTTSerialize_disconnect+0xc>)
   1485e:	4798      	blx	r3
}
   14860:	bd10      	pop	{r4, pc}
   14862:	46c0      	nop			; (mov r8, r8)
   14864:	0001481d 	.word	0x0001481d

00014868 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14868:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1486a:	220c      	movs	r2, #12
   1486c:	4b01      	ldr	r3, [pc, #4]	; (14874 <MQTTSerialize_pingreq+0xc>)
   1486e:	4798      	blx	r3
}
   14870:	bd10      	pop	{r4, pc}
   14872:	46c0      	nop			; (mov r8, r8)
   14874:	0001481d 	.word	0x0001481d

00014878 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1487a:	b085      	sub	sp, #20
   1487c:	0005      	movs	r5, r0
   1487e:	000e      	movs	r6, r1
   14880:	0014      	movs	r4, r2
   14882:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14886:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14888:	2300      	movs	r3, #0
   1488a:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1488c:	a803      	add	r0, sp, #12
   1488e:	4b1c      	ldr	r3, [pc, #112]	; (14900 <MQTTDeserialize_publish+0x88>)
   14890:	4798      	blx	r3
   14892:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14894:	22f0      	movs	r2, #240	; 0xf0
   14896:	4010      	ands	r0, r2
	int rc = 0;
   14898:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   1489a:	2830      	cmp	r0, #48	; 0x30
   1489c:	d002      	beq.n	148a4 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1489e:	0038      	movs	r0, r7
   148a0:	b005      	add	sp, #20
   148a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   148a4:	071a      	lsls	r2, r3, #28
   148a6:	0fd2      	lsrs	r2, r2, #31
   148a8:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   148aa:	075a      	lsls	r2, r3, #29
   148ac:	0f92      	lsrs	r2, r2, #30
   148ae:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   148b0:	07db      	lsls	r3, r3, #31
   148b2:	0fdb      	lsrs	r3, r3, #31
   148b4:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   148b6:	a902      	add	r1, sp, #8
   148b8:	9803      	ldr	r0, [sp, #12]
   148ba:	4b12      	ldr	r3, [pc, #72]	; (14904 <MQTTDeserialize_publish+0x8c>)
   148bc:	4798      	blx	r3
   148be:	0007      	movs	r7, r0
   148c0:	9b03      	ldr	r3, [sp, #12]
   148c2:	181c      	adds	r4, r3, r0
   148c4:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   148c6:	9b02      	ldr	r3, [sp, #8]
   148c8:	469c      	mov	ip, r3
   148ca:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   148cc:	0022      	movs	r2, r4
   148ce:	a903      	add	r1, sp, #12
   148d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   148d2:	4b0d      	ldr	r3, [pc, #52]	; (14908 <MQTTDeserialize_publish+0x90>)
   148d4:	4798      	blx	r3
   148d6:	2800      	cmp	r0, #0
   148d8:	d0e1      	beq.n	1489e <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   148da:	9b03      	ldr	r3, [sp, #12]
   148dc:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   148de:	d4de      	bmi.n	1489e <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   148e0:	6833      	ldr	r3, [r6, #0]
   148e2:	2b00      	cmp	r3, #0
   148e4:	dd04      	ble.n	148f0 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   148e6:	a803      	add	r0, sp, #12
   148e8:	4b08      	ldr	r3, [pc, #32]	; (1490c <MQTTDeserialize_publish+0x94>)
   148ea:	4798      	blx	r3
   148ec:	9b01      	ldr	r3, [sp, #4]
   148ee:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   148f0:	9b03      	ldr	r3, [sp, #12]
   148f2:	1ae4      	subs	r4, r4, r3
   148f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   148f6:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   148f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   148fa:	6013      	str	r3, [r2, #0]
	rc = 1;
   148fc:	2701      	movs	r7, #1
   148fe:	e7ce      	b.n	1489e <MQTTDeserialize_publish+0x26>
   14900:	00014a5f 	.word	0x00014a5f
   14904:	00014a31 	.word	0x00014a31
   14908:	00014b25 	.word	0x00014b25
   1490c:	00014a4d 	.word	0x00014a4d

00014910 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   14910:	b570      	push	{r4, r5, r6, lr}
   14912:	b082      	sub	sp, #8
   14914:	0005      	movs	r5, r0
   14916:	000e      	movs	r6, r1
   14918:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1491a:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1491c:	a801      	add	r0, sp, #4
   1491e:	4b0c      	ldr	r3, [pc, #48]	; (14950 <MQTTDeserialize_ack+0x40>)
   14920:	4798      	blx	r3
	*dup = header.bits.dup;
   14922:	0703      	lsls	r3, r0, #28
   14924:	0fdb      	lsrs	r3, r3, #31
   14926:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   14928:	0600      	lsls	r0, r0, #24
   1492a:	0f00      	lsrs	r0, r0, #28
   1492c:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1492e:	4669      	mov	r1, sp
   14930:	9801      	ldr	r0, [sp, #4]
   14932:	4b08      	ldr	r3, [pc, #32]	; (14954 <MQTTDeserialize_ack+0x44>)
   14934:	4798      	blx	r3
   14936:	9b01      	ldr	r3, [sp, #4]
   14938:	181b      	adds	r3, r3, r0
   1493a:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   1493c:	9b00      	ldr	r3, [sp, #0]
   1493e:	2b01      	cmp	r3, #1
   14940:	dd04      	ble.n	1494c <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   14942:	a801      	add	r0, sp, #4
   14944:	4b04      	ldr	r3, [pc, #16]	; (14958 <MQTTDeserialize_ack+0x48>)
   14946:	4798      	blx	r3
   14948:	8020      	strh	r0, [r4, #0]

	rc = 1;
   1494a:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1494c:	b002      	add	sp, #8
   1494e:	bd70      	pop	{r4, r5, r6, pc}
   14950:	00014a5f 	.word	0x00014a5f
   14954:	00014a31 	.word	0x00014a31
   14958:	00014a4d 	.word	0x00014a4d

0001495c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1495c:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   1495e:	2900      	cmp	r1, #0
   14960:	dd0a      	ble.n	14978 <bufchar+0x1c>
   14962:	4b06      	ldr	r3, [pc, #24]	; (1497c <bufchar+0x20>)
   14964:	681b      	ldr	r3, [r3, #0]
   14966:	185d      	adds	r5, r3, r1
   14968:	002c      	movs	r4, r5
		*c = *bufptr++;
   1496a:	781a      	ldrb	r2, [r3, #0]
   1496c:	7002      	strb	r2, [r0, #0]
   1496e:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   14970:	42a3      	cmp	r3, r4
   14972:	d1fa      	bne.n	1496a <bufchar+0xe>
   14974:	4b01      	ldr	r3, [pc, #4]	; (1497c <bufchar+0x20>)
   14976:	601d      	str	r5, [r3, #0]
	return count;
}
   14978:	0008      	movs	r0, r1
   1497a:	bd30      	pop	{r4, r5, pc}
   1497c:	200007f8 	.word	0x200007f8

00014980 <MQTTPacket_encode>:
{
   14980:	b5f0      	push	{r4, r5, r6, r7, lr}
   14982:	b083      	sub	sp, #12
   14984:	2500      	movs	r5, #0
		char d = length % 128;
   14986:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   14988:	2780      	movs	r7, #128	; 0x80
   1498a:	427f      	negs	r7, r7
   1498c:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   1498e:	17ca      	asrs	r2, r1, #31
   14990:	0e54      	lsrs	r4, r2, #25
   14992:	190b      	adds	r3, r1, r4
   14994:	4033      	ands	r3, r6
   14996:	1b1b      	subs	r3, r3, r4
   14998:	b2db      	uxtb	r3, r3
		length /= 128;
   1499a:	4032      	ands	r2, r6
   1499c:	1851      	adds	r1, r2, r1
   1499e:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   149a0:	2900      	cmp	r1, #0
   149a2:	dd03      	ble.n	149ac <MQTTPacket_encode+0x2c>
			d |= 0x80;
   149a4:	433b      	orrs	r3, r7
		buf[rc++] = d;
   149a6:	5543      	strb	r3, [r0, r5]
   149a8:	3501      	adds	r5, #1
   149aa:	e7ef      	b.n	1498c <MQTTPacket_encode+0xc>
   149ac:	5543      	strb	r3, [r0, r5]
   149ae:	9801      	ldr	r0, [sp, #4]
   149b0:	3001      	adds	r0, #1
}
   149b2:	b003      	add	sp, #12
   149b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000149b6 <MQTTPacket_decode>:
{
   149b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   149b8:	46ce      	mov	lr, r9
   149ba:	4647      	mov	r7, r8
   149bc:	b580      	push	{r7, lr}
   149be:	b083      	sub	sp, #12
   149c0:	4680      	mov	r8, r0
   149c2:	000f      	movs	r7, r1
	*value = 0;
   149c4:	2300      	movs	r3, #0
   149c6:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   149c8:	2401      	movs	r4, #1
	int multiplier = 1;
   149ca:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   149cc:	466b      	mov	r3, sp
   149ce:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   149d0:	237f      	movs	r3, #127	; 0x7f
   149d2:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   149d4:	2101      	movs	r1, #1
   149d6:	0028      	movs	r0, r5
   149d8:	47c0      	blx	r8
		if (rc != 1)
   149da:	2801      	cmp	r0, #1
   149dc:	d10e      	bne.n	149fc <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   149de:	782b      	ldrb	r3, [r5, #0]
   149e0:	464a      	mov	r2, r9
   149e2:	401a      	ands	r2, r3
   149e4:	4372      	muls	r2, r6
   149e6:	6839      	ldr	r1, [r7, #0]
   149e8:	468c      	mov	ip, r1
   149ea:	4462      	add	r2, ip
   149ec:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   149ee:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   149f0:	b25b      	sxtb	r3, r3
   149f2:	2b00      	cmp	r3, #0
   149f4:	da02      	bge.n	149fc <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   149f6:	3401      	adds	r4, #1
   149f8:	2c05      	cmp	r4, #5
   149fa:	d1eb      	bne.n	149d4 <MQTTPacket_decode+0x1e>
}
   149fc:	0020      	movs	r0, r4
   149fe:	b003      	add	sp, #12
   14a00:	bc0c      	pop	{r2, r3}
   14a02:	4690      	mov	r8, r2
   14a04:	4699      	mov	r9, r3
   14a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014a08 <MQTTPacket_len>:
{
   14a08:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   14a0a:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   14a0c:	3002      	adds	r0, #2
	if (rem_len < 128)
   14a0e:	2a7f      	cmp	r2, #127	; 0x7f
   14a10:	dd07      	ble.n	14a22 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   14a12:	4905      	ldr	r1, [pc, #20]	; (14a28 <MQTTPacket_len+0x20>)
		rem_len += 2;
   14a14:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   14a16:	428a      	cmp	r2, r1
   14a18:	dd03      	ble.n	14a22 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   14a1a:	4904      	ldr	r1, [pc, #16]	; (14a2c <MQTTPacket_len+0x24>)
		rem_len += 4;
   14a1c:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   14a1e:	428a      	cmp	r2, r1
   14a20:	dd00      	ble.n	14a24 <MQTTPacket_len+0x1c>
}
   14a22:	4770      	bx	lr
		rem_len += 3;
   14a24:	1d18      	adds	r0, r3, #4
   14a26:	e7fc      	b.n	14a22 <MQTTPacket_len+0x1a>
   14a28:	00003fff 	.word	0x00003fff
   14a2c:	001ffffe 	.word	0x001ffffe

00014a30 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   14a30:	b510      	push	{r4, lr}
	bufptr = buf;
   14a32:	4b03      	ldr	r3, [pc, #12]	; (14a40 <MQTTPacket_decodeBuf+0x10>)
   14a34:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   14a36:	4803      	ldr	r0, [pc, #12]	; (14a44 <MQTTPacket_decodeBuf+0x14>)
   14a38:	4b03      	ldr	r3, [pc, #12]	; (14a48 <MQTTPacket_decodeBuf+0x18>)
   14a3a:	4798      	blx	r3
}
   14a3c:	bd10      	pop	{r4, pc}
   14a3e:	46c0      	nop			; (mov r8, r8)
   14a40:	200007f8 	.word	0x200007f8
   14a44:	0001495d 	.word	0x0001495d
   14a48:	000149b7 	.word	0x000149b7

00014a4c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   14a4c:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   14a4e:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   14a50:	7813      	ldrb	r3, [r2, #0]
   14a52:	021b      	lsls	r3, r3, #8
   14a54:	7850      	ldrb	r0, [r2, #1]
   14a56:	1818      	adds	r0, r3, r0
	*pptr += 2;
   14a58:	3202      	adds	r2, #2
   14a5a:	600a      	str	r2, [r1, #0]
	return len;
}
   14a5c:	4770      	bx	lr

00014a5e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   14a5e:	0002      	movs	r2, r0
	char c = **pptr;
   14a60:	6803      	ldr	r3, [r0, #0]
   14a62:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   14a64:	3301      	adds	r3, #1
   14a66:	6013      	str	r3, [r2, #0]
	return c;
}
   14a68:	4770      	bx	lr

00014a6a <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   14a6a:	6803      	ldr	r3, [r0, #0]
   14a6c:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   14a6e:	6803      	ldr	r3, [r0, #0]
   14a70:	3301      	adds	r3, #1
   14a72:	6003      	str	r3, [r0, #0]
}
   14a74:	4770      	bx	lr

00014a76 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   14a76:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   14a78:	17ca      	asrs	r2, r1, #31
   14a7a:	23ff      	movs	r3, #255	; 0xff
   14a7c:	001c      	movs	r4, r3
   14a7e:	4014      	ands	r4, r2
   14a80:	1864      	adds	r4, r4, r1
   14a82:	1224      	asrs	r4, r4, #8
   14a84:	6805      	ldr	r5, [r0, #0]
   14a86:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   14a88:	6804      	ldr	r4, [r0, #0]
   14a8a:	1c65      	adds	r5, r4, #1
   14a8c:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   14a8e:	0e12      	lsrs	r2, r2, #24
   14a90:	1889      	adds	r1, r1, r2
   14a92:	400b      	ands	r3, r1
   14a94:	1a9b      	subs	r3, r3, r2
   14a96:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   14a98:	6803      	ldr	r3, [r0, #0]
   14a9a:	3301      	adds	r3, #1
   14a9c:	6003      	str	r3, [r0, #0]
}
   14a9e:	bd30      	pop	{r4, r5, pc}

00014aa0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   14aa0:	b570      	push	{r4, r5, r6, lr}
   14aa2:	0004      	movs	r4, r0
   14aa4:	000e      	movs	r6, r1
	int len = strlen(string);
   14aa6:	0008      	movs	r0, r1
   14aa8:	4b08      	ldr	r3, [pc, #32]	; (14acc <writeCString+0x2c>)
   14aaa:	4798      	blx	r3
   14aac:	0005      	movs	r5, r0
	writeInt(pptr, len);
   14aae:	0001      	movs	r1, r0
   14ab0:	0020      	movs	r0, r4
   14ab2:	4b07      	ldr	r3, [pc, #28]	; (14ad0 <writeCString+0x30>)
   14ab4:	4798      	blx	r3
	memcpy(*pptr, string, len);
   14ab6:	002a      	movs	r2, r5
   14ab8:	0031      	movs	r1, r6
   14aba:	6820      	ldr	r0, [r4, #0]
   14abc:	4b05      	ldr	r3, [pc, #20]	; (14ad4 <writeCString+0x34>)
   14abe:	4798      	blx	r3
	*pptr += len;
   14ac0:	6823      	ldr	r3, [r4, #0]
   14ac2:	469c      	mov	ip, r3
   14ac4:	4465      	add	r5, ip
   14ac6:	6025      	str	r5, [r4, #0]
}
   14ac8:	bd70      	pop	{r4, r5, r6, pc}
   14aca:	46c0      	nop			; (mov r8, r8)
   14acc:	000174d7 	.word	0x000174d7
   14ad0:	00014a77 	.word	0x00014a77
   14ad4:	00016f79 	.word	0x00016f79

00014ad8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   14ad8:	b530      	push	{r4, r5, lr}
   14ada:	b085      	sub	sp, #20
   14adc:	0005      	movs	r5, r0
   14ade:	9101      	str	r1, [sp, #4]
   14ae0:	9303      	str	r3, [sp, #12]
   14ae2:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   14ae4:	dc06      	bgt.n	14af4 <writeMQTTString+0x1c>
   14ae6:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   14ae8:	2900      	cmp	r1, #0
   14aea:	d010      	beq.n	14b0e <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   14aec:	4b0a      	ldr	r3, [pc, #40]	; (14b18 <writeMQTTString+0x40>)
   14aee:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   14af0:	b005      	add	sp, #20
   14af2:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   14af4:	0011      	movs	r1, r2
   14af6:	4b09      	ldr	r3, [pc, #36]	; (14b1c <writeMQTTString+0x44>)
   14af8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   14afa:	0022      	movs	r2, r4
   14afc:	9903      	ldr	r1, [sp, #12]
   14afe:	6828      	ldr	r0, [r5, #0]
   14b00:	4b07      	ldr	r3, [pc, #28]	; (14b20 <writeMQTTString+0x48>)
   14b02:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   14b04:	682b      	ldr	r3, [r5, #0]
   14b06:	469c      	mov	ip, r3
   14b08:	4464      	add	r4, ip
   14b0a:	602c      	str	r4, [r5, #0]
   14b0c:	e7f0      	b.n	14af0 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   14b0e:	2100      	movs	r1, #0
   14b10:	4b02      	ldr	r3, [pc, #8]	; (14b1c <writeMQTTString+0x44>)
   14b12:	4798      	blx	r3
}
   14b14:	e7ec      	b.n	14af0 <writeMQTTString+0x18>
   14b16:	46c0      	nop			; (mov r8, r8)
   14b18:	00014aa1 	.word	0x00014aa1
   14b1c:	00014a77 	.word	0x00014a77
   14b20:	00016f79 	.word	0x00016f79

00014b24 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   14b24:	b570      	push	{r4, r5, r6, lr}
   14b26:	0005      	movs	r5, r0
   14b28:	000c      	movs	r4, r1
   14b2a:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   14b2c:	680b      	ldr	r3, [r1, #0]
   14b2e:	1ad3      	subs	r3, r2, r3
   14b30:	2b01      	cmp	r3, #1
   14b32:	dd12      	ble.n	14b5a <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   14b34:	0008      	movs	r0, r1
   14b36:	4b0a      	ldr	r3, [pc, #40]	; (14b60 <readMQTTLenString+0x3c>)
   14b38:	4798      	blx	r3
   14b3a:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14b3c:	6822      	ldr	r2, [r4, #0]
   14b3e:	1811      	adds	r1, r2, r0
	int rc = 0;
   14b40:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14b42:	428e      	cmp	r6, r1
   14b44:	d305      	bcc.n	14b52 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   14b46:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   14b48:	6823      	ldr	r3, [r4, #0]
   14b4a:	469c      	mov	ip, r3
   14b4c:	4460      	add	r0, ip
   14b4e:	6020      	str	r0, [r4, #0]
			rc = 1;
   14b50:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   14b52:	2200      	movs	r2, #0
   14b54:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   14b56:	0018      	movs	r0, r3
   14b58:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   14b5a:	2300      	movs	r3, #0
   14b5c:	e7f9      	b.n	14b52 <readMQTTLenString+0x2e>
   14b5e:	46c0      	nop			; (mov r8, r8)
   14b60:	00014a4d 	.word	0x00014a4d

00014b64 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   14b64:	b500      	push	{lr}
   14b66:	b085      	sub	sp, #20
   14b68:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   14b6a:	2800      	cmp	r0, #0
   14b6c:	d003      	beq.n	14b76 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   14b6e:	4b03      	ldr	r3, [pc, #12]	; (14b7c <MQTTstrlen+0x18>)
   14b70:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   14b72:	b005      	add	sp, #20
   14b74:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   14b76:	9802      	ldr	r0, [sp, #8]
	return rc;
   14b78:	e7fb      	b.n	14b72 <MQTTstrlen+0xe>
   14b7a:	46c0      	nop			; (mov r8, r8)
   14b7c:	000174d7 	.word	0x000174d7

00014b80 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   14b80:	b570      	push	{r4, r5, r6, lr}
   14b82:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   14b84:	6806      	ldr	r6, [r0, #0]
   14b86:	2e00      	cmp	r6, #0
   14b88:	d00b      	beq.n	14ba2 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   14b8a:	0030      	movs	r0, r6
   14b8c:	4b0b      	ldr	r3, [pc, #44]	; (14bbc <MQTTPacket_equals+0x3c>)
   14b8e:	4798      	blx	r3
   14b90:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   14b92:	0028      	movs	r0, r5
   14b94:	4b09      	ldr	r3, [pc, #36]	; (14bbc <MQTTPacket_equals+0x3c>)
   14b96:	4798      	blx	r3
   14b98:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14b9a:	4284      	cmp	r4, r0
   14b9c:	d004      	beq.n	14ba8 <MQTTPacket_equals+0x28>
}
   14b9e:	0018      	movs	r0, r3
   14ba0:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   14ba2:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   14ba4:	6844      	ldr	r4, [r0, #4]
   14ba6:	e7f4      	b.n	14b92 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14ba8:	0022      	movs	r2, r4
   14baa:	0029      	movs	r1, r5
   14bac:	0030      	movs	r0, r6
   14bae:	4b04      	ldr	r3, [pc, #16]	; (14bc0 <MQTTPacket_equals+0x40>)
   14bb0:	4798      	blx	r3
   14bb2:	4243      	negs	r3, r0
   14bb4:	4143      	adcs	r3, r0
   14bb6:	b2db      	uxtb	r3, r3
   14bb8:	e7f1      	b.n	14b9e <MQTTPacket_equals+0x1e>
   14bba:	46c0      	nop			; (mov r8, r8)
   14bbc:	000174d7 	.word	0x000174d7
   14bc0:	000174e5 	.word	0x000174e5

00014bc4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14bc4:	b510      	push	{r4, lr}
   14bc6:	b084      	sub	sp, #16
   14bc8:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14bca:	0008      	movs	r0, r1
   14bcc:	0011      	movs	r1, r2
   14bce:	001a      	movs	r2, r3
   14bd0:	4b05      	ldr	r3, [pc, #20]	; (14be8 <MQTTSerialize_publishLength+0x24>)
   14bd2:	4798      	blx	r3
   14bd4:	3002      	adds	r0, #2
   14bd6:	9b06      	ldr	r3, [sp, #24]
   14bd8:	469c      	mov	ip, r3
   14bda:	4460      	add	r0, ip
	if (qos > 0)
   14bdc:	2c00      	cmp	r4, #0
   14bde:	dd00      	ble.n	14be2 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   14be0:	3002      	adds	r0, #2
	return len;
}
   14be2:	b004      	add	sp, #16
   14be4:	bd10      	pop	{r4, pc}
   14be6:	46c0      	nop			; (mov r8, r8)
   14be8:	00014b65 	.word	0x00014b65

00014bec <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   14bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bee:	46de      	mov	lr, fp
   14bf0:	4657      	mov	r7, sl
   14bf2:	464e      	mov	r6, r9
   14bf4:	b5c0      	push	{r6, r7, lr}
   14bf6:	b084      	sub	sp, #16
   14bf8:	0007      	movs	r7, r0
   14bfa:	468b      	mov	fp, r1
   14bfc:	4692      	mov	sl, r2
   14bfe:	001e      	movs	r6, r3
   14c00:	ab0c      	add	r3, sp, #48	; 0x30
   14c02:	781b      	ldrb	r3, [r3, #0]
   14c04:	4699      	mov	r9, r3
   14c06:	ab0d      	add	r3, sp, #52	; 0x34
   14c08:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   14c0a:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   14c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14c0e:	9300      	str	r3, [sp, #0]
   14c10:	990e      	ldr	r1, [sp, #56]	; 0x38
   14c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c16:	0030      	movs	r0, r6
   14c18:	4d1f      	ldr	r5, [pc, #124]	; (14c98 <MQTTSerialize_publish+0xac>)
   14c1a:	47a8      	blx	r5
   14c1c:	0005      	movs	r5, r0
   14c1e:	4b1f      	ldr	r3, [pc, #124]	; (14c9c <MQTTSerialize_publish+0xb0>)
   14c20:	4798      	blx	r3
   14c22:	4558      	cmp	r0, fp
   14c24:	dc34      	bgt.n	14c90 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   14c26:	2201      	movs	r2, #1
   14c28:	4653      	mov	r3, sl
   14c2a:	4013      	ands	r3, r2
   14c2c:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   14c2e:	2103      	movs	r1, #3
   14c30:	4031      	ands	r1, r6
   14c32:	0048      	lsls	r0, r1, #1
   14c34:	2130      	movs	r1, #48	; 0x30
   14c36:	4319      	orrs	r1, r3
   14c38:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   14c3a:	464b      	mov	r3, r9
   14c3c:	4013      	ands	r3, r2
   14c3e:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14c40:	4319      	orrs	r1, r3
   14c42:	a803      	add	r0, sp, #12
   14c44:	4b16      	ldr	r3, [pc, #88]	; (14ca0 <MQTTSerialize_publish+0xb4>)
   14c46:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14c48:	0029      	movs	r1, r5
   14c4a:	9803      	ldr	r0, [sp, #12]
   14c4c:	4b15      	ldr	r3, [pc, #84]	; (14ca4 <MQTTSerialize_publish+0xb8>)
   14c4e:	4798      	blx	r3
   14c50:	9b03      	ldr	r3, [sp, #12]
   14c52:	469c      	mov	ip, r3
   14c54:	4460      	add	r0, ip
   14c56:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   14c58:	990e      	ldr	r1, [sp, #56]	; 0x38
   14c5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c5e:	a803      	add	r0, sp, #12
   14c60:	4d11      	ldr	r5, [pc, #68]	; (14ca8 <MQTTSerialize_publish+0xbc>)
   14c62:	47a8      	blx	r5

	if (qos > 0)
   14c64:	2e00      	cmp	r6, #0
   14c66:	dd03      	ble.n	14c70 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   14c68:	0021      	movs	r1, r4
   14c6a:	a803      	add	r0, sp, #12
   14c6c:	4b0f      	ldr	r3, [pc, #60]	; (14cac <MQTTSerialize_publish+0xc0>)
   14c6e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   14c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14c72:	9911      	ldr	r1, [sp, #68]	; 0x44
   14c74:	9803      	ldr	r0, [sp, #12]
   14c76:	4b0e      	ldr	r3, [pc, #56]	; (14cb0 <MQTTSerialize_publish+0xc4>)
   14c78:	4798      	blx	r3
	ptr += payloadlen;
   14c7a:	9b03      	ldr	r3, [sp, #12]
   14c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14c7e:	4694      	mov	ip, r2
   14c80:	4463      	add	r3, ip

	rc = ptr - buf;
   14c82:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14c84:	b004      	add	sp, #16
   14c86:	bc1c      	pop	{r2, r3, r4}
   14c88:	4691      	mov	r9, r2
   14c8a:	469a      	mov	sl, r3
   14c8c:	46a3      	mov	fp, r4
   14c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14c90:	2002      	movs	r0, #2
   14c92:	4240      	negs	r0, r0
	return rc;
   14c94:	e7f6      	b.n	14c84 <MQTTSerialize_publish+0x98>
   14c96:	46c0      	nop			; (mov r8, r8)
   14c98:	00014bc5 	.word	0x00014bc5
   14c9c:	00014a09 	.word	0x00014a09
   14ca0:	00014a6b 	.word	0x00014a6b
   14ca4:	00014981 	.word	0x00014981
   14ca8:	00014ad9 	.word	0x00014ad9
   14cac:	00014a77 	.word	0x00014a77
   14cb0:	00016f79 	.word	0x00016f79

00014cb4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14cb4:	b530      	push	{r4, r5, lr}
   14cb6:	b083      	sub	sp, #12
   14cb8:	0004      	movs	r4, r0
   14cba:	a806      	add	r0, sp, #24
   14cbc:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   14cbe:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   14cc0:	2903      	cmp	r1, #3
   14cc2:	dd1e      	ble.n	14d02 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   14cc4:	210f      	movs	r1, #15
   14cc6:	4011      	ands	r1, r2
	header.bits.dup = dup;
   14cc8:	2001      	movs	r0, #1
   14cca:	4003      	ands	r3, r0
   14ccc:	00db      	lsls	r3, r3, #3
   14cce:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   14cd0:	3a06      	subs	r2, #6
   14cd2:	4250      	negs	r0, r2
   14cd4:	4142      	adcs	r2, r0
   14cd6:	0052      	lsls	r2, r2, #1
   14cd8:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   14cda:	4311      	orrs	r1, r2
   14cdc:	a801      	add	r0, sp, #4
   14cde:	4b0a      	ldr	r3, [pc, #40]	; (14d08 <MQTTSerialize_ack+0x54>)
   14ce0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   14ce2:	2102      	movs	r1, #2
   14ce4:	9801      	ldr	r0, [sp, #4]
   14ce6:	4b09      	ldr	r3, [pc, #36]	; (14d0c <MQTTSerialize_ack+0x58>)
   14ce8:	4798      	blx	r3
   14cea:	9b01      	ldr	r3, [sp, #4]
   14cec:	469c      	mov	ip, r3
   14cee:	4460      	add	r0, ip
   14cf0:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   14cf2:	0029      	movs	r1, r5
   14cf4:	a801      	add	r0, sp, #4
   14cf6:	4b06      	ldr	r3, [pc, #24]	; (14d10 <MQTTSerialize_ack+0x5c>)
   14cf8:	4798      	blx	r3
	rc = ptr - buf;
   14cfa:	9b01      	ldr	r3, [sp, #4]
   14cfc:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14cfe:	b003      	add	sp, #12
   14d00:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14d02:	2002      	movs	r0, #2
   14d04:	4240      	negs	r0, r0
	return rc;
   14d06:	e7fa      	b.n	14cfe <MQTTSerialize_ack+0x4a>
   14d08:	00014a6b 	.word	0x00014a6b
   14d0c:	00014981 	.word	0x00014981
   14d10:	00014a77 	.word	0x00014a77

00014d14 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   14d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d16:	46c6      	mov	lr, r8
   14d18:	b500      	push	{lr}
   14d1a:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   14d1c:	dd12      	ble.n	14d44 <MQTTSerialize_subscribeLength+0x30>
   14d1e:	000c      	movs	r4, r1
   14d20:	2602      	movs	r6, #2
   14d22:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   14d24:	4b08      	ldr	r3, [pc, #32]	; (14d48 <MQTTSerialize_subscribeLength+0x34>)
   14d26:	4698      	mov	r8, r3
   14d28:	6820      	ldr	r0, [r4, #0]
   14d2a:	6861      	ldr	r1, [r4, #4]
   14d2c:	68a2      	ldr	r2, [r4, #8]
   14d2e:	47c0      	blx	r8
   14d30:	3003      	adds	r0, #3
   14d32:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   14d34:	3501      	adds	r5, #1
   14d36:	340c      	adds	r4, #12
   14d38:	42af      	cmp	r7, r5
   14d3a:	d1f5      	bne.n	14d28 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   14d3c:	0030      	movs	r0, r6
   14d3e:	bc04      	pop	{r2}
   14d40:	4690      	mov	r8, r2
   14d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   14d44:	2602      	movs	r6, #2
	return len;
   14d46:	e7f9      	b.n	14d3c <MQTTSerialize_subscribeLength+0x28>
   14d48:	00014b65 	.word	0x00014b65

00014d4c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   14d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d4e:	46d6      	mov	lr, sl
   14d50:	464f      	mov	r7, r9
   14d52:	4646      	mov	r6, r8
   14d54:	b5c0      	push	{r6, r7, lr}
   14d56:	b084      	sub	sp, #16
   14d58:	4682      	mov	sl, r0
   14d5a:	000e      	movs	r6, r1
   14d5c:	0015      	movs	r5, r2
   14d5e:	9301      	str	r3, [sp, #4]
   14d60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   14d62:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   14d64:	990d      	ldr	r1, [sp, #52]	; 0x34
   14d66:	0038      	movs	r0, r7
   14d68:	4b1f      	ldr	r3, [pc, #124]	; (14de8 <MQTTSerialize_subscribe+0x9c>)
   14d6a:	4798      	blx	r3
   14d6c:	0004      	movs	r4, r0
   14d6e:	4b1f      	ldr	r3, [pc, #124]	; (14dec <MQTTSerialize_subscribe+0xa0>)
   14d70:	4798      	blx	r3
   14d72:	42b0      	cmp	r0, r6
   14d74:	dc34      	bgt.n	14de0 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   14d76:	2101      	movs	r1, #1
   14d78:	4029      	ands	r1, r5
   14d7a:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   14d7c:	2180      	movs	r1, #128	; 0x80
   14d7e:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   14d80:	2302      	movs	r3, #2
   14d82:	4319      	orrs	r1, r3
   14d84:	a803      	add	r0, sp, #12
   14d86:	4b1a      	ldr	r3, [pc, #104]	; (14df0 <MQTTSerialize_subscribe+0xa4>)
   14d88:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14d8a:	0021      	movs	r1, r4
   14d8c:	9803      	ldr	r0, [sp, #12]
   14d8e:	4b19      	ldr	r3, [pc, #100]	; (14df4 <MQTTSerialize_subscribe+0xa8>)
   14d90:	4798      	blx	r3
   14d92:	9a03      	ldr	r2, [sp, #12]
   14d94:	4694      	mov	ip, r2
   14d96:	4460      	add	r0, ip
   14d98:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   14d9a:	9901      	ldr	r1, [sp, #4]
   14d9c:	a803      	add	r0, sp, #12
   14d9e:	4b16      	ldr	r3, [pc, #88]	; (14df8 <MQTTSerialize_subscribe+0xac>)
   14da0:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   14da2:	2f00      	cmp	r7, #0
   14da4:	dd13      	ble.n	14dce <MQTTSerialize_subscribe+0x82>
   14da6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14da8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14daa:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   14dac:	4b13      	ldr	r3, [pc, #76]	; (14dfc <MQTTSerialize_subscribe+0xb0>)
   14dae:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   14db0:	4b0f      	ldr	r3, [pc, #60]	; (14df0 <MQTTSerialize_subscribe+0xa4>)
   14db2:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   14db4:	6821      	ldr	r1, [r4, #0]
   14db6:	6862      	ldr	r2, [r4, #4]
   14db8:	68a3      	ldr	r3, [r4, #8]
   14dba:	a803      	add	r0, sp, #12
   14dbc:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   14dbe:	ce02      	ldmia	r6!, {r1}
   14dc0:	b2c9      	uxtb	r1, r1
   14dc2:	a803      	add	r0, sp, #12
   14dc4:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   14dc6:	3501      	adds	r5, #1
   14dc8:	340c      	adds	r4, #12
   14dca:	42af      	cmp	r7, r5
   14dcc:	d1f2      	bne.n	14db4 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   14dce:	9b03      	ldr	r3, [sp, #12]
   14dd0:	4652      	mov	r2, sl
   14dd2:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14dd4:	b004      	add	sp, #16
   14dd6:	bc1c      	pop	{r2, r3, r4}
   14dd8:	4690      	mov	r8, r2
   14dda:	4699      	mov	r9, r3
   14ddc:	46a2      	mov	sl, r4
   14dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14de0:	2002      	movs	r0, #2
   14de2:	4240      	negs	r0, r0
	return rc;
   14de4:	e7f6      	b.n	14dd4 <MQTTSerialize_subscribe+0x88>
   14de6:	46c0      	nop			; (mov r8, r8)
   14de8:	00014d15 	.word	0x00014d15
   14dec:	00014a09 	.word	0x00014a09
   14df0:	00014a6b 	.word	0x00014a6b
   14df4:	00014981 	.word	0x00014981
   14df8:	00014a77 	.word	0x00014a77
   14dfc:	00014ad9 	.word	0x00014ad9

00014e00 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   14e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e02:	46ce      	mov	lr, r9
   14e04:	4647      	mov	r7, r8
   14e06:	b580      	push	{r7, lr}
   14e08:	b083      	sub	sp, #12
   14e0a:	0004      	movs	r4, r0
   14e0c:	000e      	movs	r6, r1
   14e0e:	0015      	movs	r5, r2
   14e10:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e14:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14e16:	a801      	add	r0, sp, #4
   14e18:	4b1e      	ldr	r3, [pc, #120]	; (14e94 <MQTTDeserialize_suback+0x94>)
   14e1a:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   14e1c:	23f0      	movs	r3, #240	; 0xf0
   14e1e:	4003      	ands	r3, r0
	int rc = 0;
   14e20:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   14e22:	2b90      	cmp	r3, #144	; 0x90
   14e24:	d004      	beq.n	14e30 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14e26:	b003      	add	sp, #12
   14e28:	bc0c      	pop	{r2, r3}
   14e2a:	4690      	mov	r8, r2
   14e2c:	4699      	mov	r9, r3
   14e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14e30:	4669      	mov	r1, sp
   14e32:	9801      	ldr	r0, [sp, #4]
   14e34:	4b18      	ldr	r3, [pc, #96]	; (14e98 <MQTTDeserialize_suback+0x98>)
   14e36:	4798      	blx	r3
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	181b      	adds	r3, r3, r0
   14e3c:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   14e3e:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   14e40:	2a01      	cmp	r2, #1
   14e42:	ddf0      	ble.n	14e26 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   14e44:	4698      	mov	r8, r3
   14e46:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   14e48:	a801      	add	r0, sp, #4
   14e4a:	4b14      	ldr	r3, [pc, #80]	; (14e9c <MQTTDeserialize_suback+0x9c>)
   14e4c:	4798      	blx	r3
   14e4e:	8020      	strh	r0, [r4, #0]
	*count = 0;
   14e50:	2300      	movs	r3, #0
   14e52:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   14e54:	9b01      	ldr	r3, [sp, #4]
   14e56:	4598      	cmp	r8, r3
   14e58:	d916      	bls.n	14e88 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   14e5a:	2e00      	cmp	r6, #0
   14e5c:	db16      	blt.n	14e8c <MQTTDeserialize_suback+0x8c>
   14e5e:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   14e60:	4a0c      	ldr	r2, [pc, #48]	; (14e94 <MQTTDeserialize_suback+0x94>)
   14e62:	4691      	mov	r9, r2
   14e64:	1c5a      	adds	r2, r3, #1
   14e66:	602a      	str	r2, [r5, #0]
   14e68:	009b      	lsls	r3, r3, #2
   14e6a:	18fc      	adds	r4, r7, r3
   14e6c:	a801      	add	r0, sp, #4
   14e6e:	47c8      	blx	r9
   14e70:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   14e72:	9b01      	ldr	r3, [sp, #4]
   14e74:	4598      	cmp	r8, r3
   14e76:	d905      	bls.n	14e84 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   14e78:	682b      	ldr	r3, [r5, #0]
   14e7a:	42b3      	cmp	r3, r6
   14e7c:	ddf2      	ble.n	14e64 <MQTTDeserialize_suback+0x64>
			rc = -1;
   14e7e:	2001      	movs	r0, #1
   14e80:	4240      	negs	r0, r0
	return rc;
   14e82:	e7d0      	b.n	14e26 <MQTTDeserialize_suback+0x26>
	rc = 1;
   14e84:	2001      	movs	r0, #1
   14e86:	e7ce      	b.n	14e26 <MQTTDeserialize_suback+0x26>
   14e88:	2001      	movs	r0, #1
   14e8a:	e7cc      	b.n	14e26 <MQTTDeserialize_suback+0x26>
			rc = -1;
   14e8c:	2001      	movs	r0, #1
   14e8e:	4240      	negs	r0, r0
   14e90:	e7c9      	b.n	14e26 <MQTTDeserialize_suback+0x26>
   14e92:	46c0      	nop			; (mov r8, r8)
   14e94:	00014a5f 	.word	0x00014a5f
   14e98:	00014a31 	.word	0x00014a31
   14e9c:	00014a4d 	.word	0x00014a4d

00014ea0 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   14ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ea2:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   14ea4:	2041      	movs	r0, #65	; 0x41
   14ea6:	5c23      	ldrb	r3, [r4, r0]
   14ea8:	2501      	movs	r5, #1
   14eaa:	432b      	orrs	r3, r5
   14eac:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   14eae:	b292      	uxth	r2, r2
   14eb0:	2000      	movs	r0, #0
   14eb2:	5620      	ldrsb	r0, [r4, r0]
   14eb4:	2300      	movs	r3, #0
   14eb6:	4d12      	ldr	r5, [pc, #72]	; (14f00 <_http_client_send_wait+0x60>)
   14eb8:	47a8      	blx	r5
   14eba:	2800      	cmp	r0, #0
   14ebc:	db16      	blt.n	14eec <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14ebe:	2341      	movs	r3, #65	; 0x41
   14ec0:	5ce3      	ldrb	r3, [r4, r3]
   14ec2:	07db      	lsls	r3, r3, #31
   14ec4:	d518      	bpl.n	14ef8 <_http_client_send_wait+0x58>
   14ec6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   14ec8:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14eca:	2b02      	cmp	r3, #2
   14ecc:	d917      	bls.n	14efe <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   14ece:	4f0d      	ldr	r7, [pc, #52]	; (14f04 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   14ed0:	4e0d      	ldr	r6, [pc, #52]	; (14f08 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14ed2:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   14ed4:	2000      	movs	r0, #0
   14ed6:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   14ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14eda:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14edc:	5d63      	ldrb	r3, [r4, r5]
   14ede:	07db      	lsls	r3, r3, #31
   14ee0:	d50c      	bpl.n	14efc <_http_client_send_wait+0x5c>
   14ee2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14ee4:	2b02      	cmp	r3, #2
   14ee6:	d8f5      	bhi.n	14ed4 <_http_client_send_wait+0x34>
	return 0;
   14ee8:	2000      	movs	r0, #0
   14eea:	e008      	b.n	14efe <_http_client_send_wait+0x5e>
		module->sending = 0;
   14eec:	2241      	movs	r2, #65	; 0x41
   14eee:	5ca3      	ldrb	r3, [r4, r2]
   14ef0:	2101      	movs	r1, #1
   14ef2:	438b      	bics	r3, r1
   14ef4:	54a3      	strb	r3, [r4, r2]
		return result;
   14ef6:	e002      	b.n	14efe <_http_client_send_wait+0x5e>
	return 0;
   14ef8:	2000      	movs	r0, #0
   14efa:	e000      	b.n	14efe <_http_client_send_wait+0x5e>
   14efc:	2000      	movs	r0, #0
}
   14efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f00:	0000f361 	.word	0x0000f361
   14f04:	0000d5c5 	.word	0x0000d5c5
   14f08:	00016035 	.word	0x00016035

00014f0c <http_client_get_config_defaults>:
	config->port = 80;
   14f0c:	2350      	movs	r3, #80	; 0x50
   14f0e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   14f10:	2300      	movs	r3, #0
   14f12:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   14f14:	4a05      	ldr	r2, [pc, #20]	; (14f2c <http_client_get_config_defaults+0x20>)
   14f16:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   14f18:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   14f1a:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   14f1c:	3301      	adds	r3, #1
   14f1e:	33ff      	adds	r3, #255	; 0xff
   14f20:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   14f22:	3bae      	subs	r3, #174	; 0xae
   14f24:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   14f26:	4b02      	ldr	r3, [pc, #8]	; (14f30 <http_client_get_config_defaults+0x24>)
   14f28:	6183      	str	r3, [r0, #24]
}
   14f2a:	4770      	bx	lr
   14f2c:	00004e20 	.word	0x00004e20
   14f30:	00019e28 	.word	0x00019e28

00014f34 <http_client_init>:
{
   14f34:	b570      	push	{r4, r5, r6, lr}
   14f36:	0004      	movs	r4, r0
   14f38:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   14f3a:	2800      	cmp	r0, #0
   14f3c:	d038      	beq.n	14fb0 <http_client_init+0x7c>
   14f3e:	2900      	cmp	r1, #0
   14f40:	d039      	beq.n	14fb6 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   14f42:	690b      	ldr	r3, [r1, #16]
   14f44:	2b00      	cmp	r3, #0
   14f46:	d039      	beq.n	14fbc <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   14f48:	684b      	ldr	r3, [r1, #4]
   14f4a:	2b00      	cmp	r3, #0
   14f4c:	d039      	beq.n	14fc2 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   14f4e:	694b      	ldr	r3, [r1, #20]
   14f50:	2b51      	cmp	r3, #81	; 0x51
   14f52:	d939      	bls.n	14fc8 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   14f54:	22e8      	movs	r2, #232	; 0xe8
   14f56:	2100      	movs	r1, #0
   14f58:	4b1e      	ldr	r3, [pc, #120]	; (14fd4 <http_client_init+0xa0>)
   14f5a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   14f5c:	0020      	movs	r0, r4
   14f5e:	3050      	adds	r0, #80	; 0x50
   14f60:	221c      	movs	r2, #28
   14f62:	0029      	movs	r1, r5
   14f64:	4b1c      	ldr	r3, [pc, #112]	; (14fd8 <http_client_init+0xa4>)
   14f66:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   14f68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14f6a:	2b00      	cmp	r3, #0
   14f6c:	d008      	beq.n	14f80 <http_client_init+0x4c>
	if (config->timeout > 0) {
   14f6e:	892b      	ldrh	r3, [r5, #8]
   14f70:	2b00      	cmp	r3, #0
   14f72:	d111      	bne.n	14f98 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   14f74:	2300      	movs	r3, #0
   14f76:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   14f78:	22d8      	movs	r2, #216	; 0xd8
   14f7a:	50a3      	str	r3, [r4, r2]
	return 0;
   14f7c:	2000      	movs	r0, #0
}
   14f7e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   14f80:	6928      	ldr	r0, [r5, #16]
   14f82:	4b16      	ldr	r3, [pc, #88]	; (14fdc <http_client_init+0xa8>)
   14f84:	4798      	blx	r3
   14f86:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   14f88:	2800      	cmp	r0, #0
   14f8a:	d020      	beq.n	14fce <http_client_init+0x9a>
		module->alloc_buffer = 1;
   14f8c:	2241      	movs	r2, #65	; 0x41
   14f8e:	5ca3      	ldrb	r3, [r4, r2]
   14f90:	2104      	movs	r1, #4
   14f92:	430b      	orrs	r3, r1
   14f94:	54a3      	strb	r3, [r4, r2]
   14f96:	e7ea      	b.n	14f6e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   14f98:	6868      	ldr	r0, [r5, #4]
   14f9a:	2300      	movs	r3, #0
   14f9c:	0022      	movs	r2, r4
   14f9e:	4910      	ldr	r1, [pc, #64]	; (14fe0 <http_client_init+0xac>)
   14fa0:	4d10      	ldr	r5, [pc, #64]	; (14fe4 <http_client_init+0xb0>)
   14fa2:	47a8      	blx	r5
   14fa4:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   14fa6:	2800      	cmp	r0, #0
   14fa8:	dae4      	bge.n	14f74 <http_client_init+0x40>
			return -ENOSPC;
   14faa:	201c      	movs	r0, #28
   14fac:	4240      	negs	r0, r0
   14fae:	e7e6      	b.n	14f7e <http_client_init+0x4a>
		return -EINVAL;
   14fb0:	2016      	movs	r0, #22
   14fb2:	4240      	negs	r0, r0
   14fb4:	e7e3      	b.n	14f7e <http_client_init+0x4a>
   14fb6:	2016      	movs	r0, #22
   14fb8:	4240      	negs	r0, r0
   14fba:	e7e0      	b.n	14f7e <http_client_init+0x4a>
		return -EINVAL;
   14fbc:	2016      	movs	r0, #22
   14fbe:	4240      	negs	r0, r0
   14fc0:	e7dd      	b.n	14f7e <http_client_init+0x4a>
		return -EINVAL;
   14fc2:	2016      	movs	r0, #22
   14fc4:	4240      	negs	r0, r0
   14fc6:	e7da      	b.n	14f7e <http_client_init+0x4a>
		return -EINVAL;
   14fc8:	2016      	movs	r0, #22
   14fca:	4240      	negs	r0, r0
   14fcc:	e7d7      	b.n	14f7e <http_client_init+0x4a>
			return -ENOMEM;
   14fce:	200c      	movs	r0, #12
   14fd0:	4240      	negs	r0, r0
   14fd2:	e7d4      	b.n	14f7e <http_client_init+0x4a>
   14fd4:	00016faf 	.word	0x00016faf
   14fd8:	00016f79 	.word	0x00016f79
   14fdc:	00016f51 	.word	0x00016f51
   14fe0:	000150f9 	.word	0x000150f9
   14fe4:	00015fc1 	.word	0x00015fc1

00014fe8 <http_client_register_callback>:
	if (module == NULL) {
   14fe8:	2800      	cmp	r0, #0
   14fea:	d002      	beq.n	14ff2 <http_client_register_callback+0xa>
	module->cb = callback;
   14fec:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   14fee:	2000      	movs	r0, #0
}
   14ff0:	4770      	bx	lr
		return -EINVAL;
   14ff2:	2016      	movs	r0, #22
   14ff4:	4240      	negs	r0, r0
   14ff6:	e7fb      	b.n	14ff0 <http_client_register_callback+0x8>

00014ff8 <_http_client_clear_conn>:
{
   14ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ffa:	b085      	sub	sp, #20
   14ffc:	0004      	movs	r4, r0
   14ffe:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   15000:	23c0      	movs	r3, #192	; 0xc0
   15002:	58c3      	ldr	r3, [r0, r3]
   15004:	2b00      	cmp	r3, #0
   15006:	d002      	beq.n	1500e <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   15008:	22c4      	movs	r2, #196	; 0xc4
   1500a:	5880      	ldr	r0, [r0, r2]
   1500c:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1500e:	0020      	movs	r0, r4
   15010:	30b0      	adds	r0, #176	; 0xb0
   15012:	2218      	movs	r2, #24
   15014:	2100      	movs	r1, #0
   15016:	4b17      	ldr	r3, [pc, #92]	; (15074 <_http_client_clear_conn+0x7c>)
   15018:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1501a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1501c:	2b00      	cmp	r3, #0
   1501e:	d124      	bne.n	1506a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   15020:	2300      	movs	r3, #0
   15022:	56e3      	ldrsb	r3, [r4, r3]
   15024:	009b      	lsls	r3, r3, #2
   15026:	2500      	movs	r5, #0
   15028:	4a13      	ldr	r2, [pc, #76]	; (15078 <_http_client_clear_conn+0x80>)
   1502a:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1502c:	0020      	movs	r0, r4
   1502e:	306c      	adds	r0, #108	; 0x6c
   15030:	226c      	movs	r2, #108	; 0x6c
   15032:	2100      	movs	r1, #0
   15034:	4f0f      	ldr	r7, [pc, #60]	; (15074 <_http_client_clear_conn+0x7c>)
   15036:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   15038:	0020      	movs	r0, r4
   1503a:	30d8      	adds	r0, #216	; 0xd8
   1503c:	2210      	movs	r2, #16
   1503e:	2100      	movs	r1, #0
   15040:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   15042:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   15044:	23d8      	movs	r3, #216	; 0xd8
   15046:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   15048:	2241      	movs	r2, #65	; 0x41
   1504a:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   1504c:	2101      	movs	r1, #1
   1504e:	438b      	bics	r3, r1
   15050:	3101      	adds	r1, #1
   15052:	438b      	bics	r3, r1
   15054:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   15056:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   15058:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1505a:	2b00      	cmp	r3, #0
   1505c:	d003      	beq.n	15066 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1505e:	aa01      	add	r2, sp, #4
   15060:	3102      	adds	r1, #2
   15062:	0020      	movs	r0, r4
   15064:	4798      	blx	r3
}
   15066:	b005      	add	sp, #20
   15068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   1506a:	2000      	movs	r0, #0
   1506c:	5620      	ldrsb	r0, [r4, r0]
   1506e:	4b03      	ldr	r3, [pc, #12]	; (1507c <_http_client_clear_conn+0x84>)
   15070:	4798      	blx	r3
   15072:	e7d5      	b.n	15020 <_http_client_clear_conn+0x28>
   15074:	00016faf 	.word	0x00016faf
   15078:	200007fc 	.word	0x200007fc
   1507c:	0000f48d 	.word	0x0000f48d

00015080 <http_client_socket_resolve_handler>:
{
   15080:	b5f0      	push	{r4, r5, r6, r7, lr}
   15082:	b087      	sub	sp, #28
   15084:	9000      	str	r0, [sp, #0]
   15086:	9101      	str	r1, [sp, #4]
   15088:	4c17      	ldr	r4, [pc, #92]	; (150e8 <http_client_socket_resolve_handler+0x68>)
   1508a:	0026      	movs	r6, r4
   1508c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1508e:	4f17      	ldr	r7, [pc, #92]	; (150ec <http_client_socket_resolve_handler+0x6c>)
   15090:	e015      	b.n	150be <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   15092:	2302      	movs	r3, #2
   15094:	aa02      	add	r2, sp, #8
   15096:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15098:	334e      	adds	r3, #78	; 0x4e
   1509a:	5aeb      	ldrh	r3, [r5, r3]
   1509c:	021a      	lsls	r2, r3, #8
   1509e:	0a1b      	lsrs	r3, r3, #8
   150a0:	4313      	orrs	r3, r2
   150a2:	aa02      	add	r2, sp, #8
   150a4:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   150a6:	9b01      	ldr	r3, [sp, #4]
   150a8:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   150aa:	2000      	movs	r0, #0
   150ac:	5628      	ldrsb	r0, [r5, r0]
   150ae:	2210      	movs	r2, #16
   150b0:	a902      	add	r1, sp, #8
   150b2:	4b0f      	ldr	r3, [pc, #60]	; (150f0 <http_client_socket_resolve_handler+0x70>)
   150b4:	4798      	blx	r3
				return;
   150b6:	e015      	b.n	150e4 <http_client_socket_resolve_handler+0x64>
   150b8:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   150ba:	42b4      	cmp	r4, r6
   150bc:	d012      	beq.n	150e4 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   150be:	6825      	ldr	r5, [r4, #0]
   150c0:	2d00      	cmp	r5, #0
   150c2:	d0f9      	beq.n	150b8 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   150c4:	1c69      	adds	r1, r5, #1
   150c6:	9800      	ldr	r0, [sp, #0]
   150c8:	47b8      	blx	r7
   150ca:	2800      	cmp	r0, #0
   150cc:	d1f4      	bne.n	150b8 <http_client_socket_resolve_handler+0x38>
   150ce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   150d0:	2b01      	cmp	r3, #1
   150d2:	d1f1      	bne.n	150b8 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   150d4:	9b01      	ldr	r3, [sp, #4]
   150d6:	2b00      	cmp	r3, #0
   150d8:	d1db      	bne.n	15092 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   150da:	2176      	movs	r1, #118	; 0x76
   150dc:	4249      	negs	r1, r1
   150de:	0028      	movs	r0, r5
   150e0:	4b04      	ldr	r3, [pc, #16]	; (150f4 <http_client_socket_resolve_handler+0x74>)
   150e2:	4798      	blx	r3
}
   150e4:	b007      	add	sp, #28
   150e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150e8:	200007fc 	.word	0x200007fc
   150ec:	00017479 	.word	0x00017479
   150f0:	0000f2d1 	.word	0x0000f2d1
   150f4:	00014ff9 	.word	0x00014ff9

000150f8 <http_client_timer_callback>:
{
   150f8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   150fa:	2a00      	cmp	r2, #0
   150fc:	d004      	beq.n	15108 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   150fe:	213e      	movs	r1, #62	; 0x3e
   15100:	4249      	negs	r1, r1
   15102:	0010      	movs	r0, r2
   15104:	4b01      	ldr	r3, [pc, #4]	; (1510c <http_client_timer_callback+0x14>)
   15106:	4798      	blx	r3
}
   15108:	bd10      	pop	{r4, pc}
   1510a:	46c0      	nop			; (mov r8, r8)
   1510c:	00014ff9 	.word	0x00014ff9

00015110 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   15110:	b5f0      	push	{r4, r5, r6, r7, lr}
   15112:	46de      	mov	lr, fp
   15114:	4657      	mov	r7, sl
   15116:	b580      	push	{r7, lr}
   15118:	b095      	sub	sp, #84	; 0x54
   1511a:	af02      	add	r7, sp, #8
   1511c:	0004      	movs	r4, r0
   1511e:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   15120:	2310      	movs	r3, #16
   15122:	2208      	movs	r2, #8
   15124:	18ba      	adds	r2, r7, r2
   15126:	18d2      	adds	r2, r2, r3
   15128:	4bb1      	ldr	r3, [pc, #708]	; (153f0 <_http_client_request+0x2e0>)
   1512a:	cb23      	ldmia	r3!, {r0, r1, r5}
   1512c:	c223      	stmia	r2!, {r0, r1, r5}
   1512e:	681b      	ldr	r3, [r3, #0]
   15130:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   15132:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15134:	1dd3      	adds	r3, r2, #7
   15136:	08db      	lsrs	r3, r3, #3
   15138:	00db      	lsls	r3, r3, #3
   1513a:	4669      	mov	r1, sp
   1513c:	1acb      	subs	r3, r1, r3
   1513e:	469d      	mov	sp, r3
   15140:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   15142:	2c00      	cmp	r4, #0
   15144:	d100      	bne.n	15148 <_http_client_request+0x38>
   15146:	e1f0      	b.n	1552a <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   15148:	2341      	movs	r3, #65	; 0x41
   1514a:	5ce3      	ldrb	r3, [r4, r3]
   1514c:	07db      	lsls	r3, r3, #31
   1514e:	d500      	bpl.n	15152 <_http_client_request+0x42>
   15150:	e1eb      	b.n	1552a <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   15152:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15154:	2b03      	cmp	r3, #3
   15156:	d004      	beq.n	15162 <_http_client_request+0x52>
   15158:	2b04      	cmp	r3, #4
   1515a:	d100      	bne.n	1515e <_http_client_request+0x4e>
   1515c:	e120      	b.n	153a0 <_http_client_request+0x290>
   1515e:	46dd      	mov	sp, fp
   15160:	e1e4      	b.n	1552c <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   15162:	2300      	movs	r3, #0
   15164:	21cc      	movs	r1, #204	; 0xcc
   15166:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   15168:	3104      	adds	r1, #4
   1516a:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1516c:	9400      	str	r4, [sp, #0]
   1516e:	4ba1      	ldr	r3, [pc, #644]	; (153f4 <_http_client_request+0x2e4>)
   15170:	0031      	movs	r1, r6
   15172:	202c      	movs	r0, #44	; 0x2c
   15174:	2508      	movs	r5, #8
   15176:	46ac      	mov	ip, r5
   15178:	44bc      	add	ip, r7
   1517a:	4460      	add	r0, ip
   1517c:	4d9e      	ldr	r5, [pc, #632]	; (153f8 <_http_client_request+0x2e8>)
   1517e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   15180:	23c8      	movs	r3, #200	; 0xc8
   15182:	5ce3      	ldrb	r3, [r4, r3]
   15184:	2b01      	cmp	r3, #1
   15186:	d100      	bne.n	1518a <_http_client_request+0x7a>
   15188:	e0a9      	b.n	152de <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   1518a:	2b02      	cmp	r3, #2
   1518c:	d100      	bne.n	15190 <_http_client_request+0x80>
   1518e:	e0af      	b.n	152f0 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   15190:	2b03      	cmp	r3, #3
   15192:	d100      	bne.n	15196 <_http_client_request+0x86>
   15194:	e0b5      	b.n	15302 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   15196:	2b04      	cmp	r3, #4
   15198:	d100      	bne.n	1519c <_http_client_request+0x8c>
   1519a:	e0bb      	b.n	15314 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1519c:	2b05      	cmp	r3, #5
   1519e:	d100      	bne.n	151a2 <_http_client_request+0x92>
   151a0:	e0c1      	b.n	15326 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   151a2:	2b06      	cmp	r3, #6
   151a4:	d100      	bne.n	151a8 <_http_client_request+0x98>
   151a6:	e0c7      	b.n	15338 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   151a8:	0025      	movs	r5, r4
   151aa:	3570      	adds	r5, #112	; 0x70
   151ac:	0028      	movs	r0, r5
   151ae:	4b93      	ldr	r3, [pc, #588]	; (153fc <_http_client_request+0x2ec>)
   151b0:	469a      	mov	sl, r3
   151b2:	4798      	blx	r3
   151b4:	0002      	movs	r2, r0
   151b6:	0029      	movs	r1, r5
   151b8:	232c      	movs	r3, #44	; 0x2c
   151ba:	2008      	movs	r0, #8
   151bc:	1838      	adds	r0, r7, r0
   151be:	18c0      	adds	r0, r0, r3
   151c0:	4d8f      	ldr	r5, [pc, #572]	; (15400 <_http_client_request+0x2f0>)
   151c2:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   151c4:	220b      	movs	r2, #11
   151c6:	498f      	ldr	r1, [pc, #572]	; (15404 <_http_client_request+0x2f4>)
   151c8:	232c      	movs	r3, #44	; 0x2c
   151ca:	2008      	movs	r0, #8
   151cc:	1838      	adds	r0, r7, r0
   151ce:	18c0      	adds	r0, r0, r3
   151d0:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   151d2:	220c      	movs	r2, #12
   151d4:	498c      	ldr	r1, [pc, #560]	; (15408 <_http_client_request+0x2f8>)
   151d6:	232c      	movs	r3, #44	; 0x2c
   151d8:	2008      	movs	r0, #8
   151da:	1838      	adds	r0, r7, r0
   151dc:	18c0      	adds	r0, r0, r3
   151de:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   151e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   151e2:	607b      	str	r3, [r7, #4]
   151e4:	0018      	movs	r0, r3
   151e6:	47d0      	blx	sl
   151e8:	0002      	movs	r2, r0
   151ea:	6879      	ldr	r1, [r7, #4]
   151ec:	232c      	movs	r3, #44	; 0x2c
   151ee:	2008      	movs	r0, #8
   151f0:	1838      	adds	r0, r7, r0
   151f2:	18c0      	adds	r0, r0, r3
   151f4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   151f6:	2202      	movs	r2, #2
   151f8:	4984      	ldr	r1, [pc, #528]	; (1540c <_http_client_request+0x2fc>)
   151fa:	232c      	movs	r3, #44	; 0x2c
   151fc:	2008      	movs	r0, #8
   151fe:	1838      	adds	r0, r7, r0
   15200:	18c0      	adds	r0, r0, r3
   15202:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   15204:	2206      	movs	r2, #6
   15206:	4982      	ldr	r1, [pc, #520]	; (15410 <_http_client_request+0x300>)
   15208:	232c      	movs	r3, #44	; 0x2c
   1520a:	2008      	movs	r0, #8
   1520c:	1838      	adds	r0, r7, r0
   1520e:	18c0      	adds	r0, r0, r3
   15210:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   15212:	1c63      	adds	r3, r4, #1
   15214:	607b      	str	r3, [r7, #4]
   15216:	0018      	movs	r0, r3
   15218:	47d0      	blx	sl
   1521a:	0002      	movs	r2, r0
   1521c:	6879      	ldr	r1, [r7, #4]
   1521e:	232c      	movs	r3, #44	; 0x2c
   15220:	2008      	movs	r0, #8
   15222:	1838      	adds	r0, r7, r0
   15224:	18c0      	adds	r0, r0, r3
   15226:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15228:	2202      	movs	r2, #2
   1522a:	4978      	ldr	r1, [pc, #480]	; (1540c <_http_client_request+0x2fc>)
   1522c:	232c      	movs	r3, #44	; 0x2c
   1522e:	2008      	movs	r0, #8
   15230:	1838      	adds	r0, r7, r0
   15232:	18c0      	adds	r0, r0, r3
   15234:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   15236:	2218      	movs	r2, #24
   15238:	4976      	ldr	r1, [pc, #472]	; (15414 <_http_client_request+0x304>)
   1523a:	232c      	movs	r3, #44	; 0x2c
   1523c:	2008      	movs	r0, #8
   1523e:	1838      	adds	r0, r7, r0
   15240:	18c0      	adds	r0, r0, r3
   15242:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   15244:	2213      	movs	r2, #19
   15246:	4974      	ldr	r1, [pc, #464]	; (15418 <_http_client_request+0x308>)
   15248:	232c      	movs	r3, #44	; 0x2c
   1524a:	2008      	movs	r0, #8
   1524c:	1838      	adds	r0, r7, r0
   1524e:	18c0      	adds	r0, r0, r3
   15250:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   15252:	2217      	movs	r2, #23
   15254:	4971      	ldr	r1, [pc, #452]	; (1541c <_http_client_request+0x30c>)
   15256:	232c      	movs	r3, #44	; 0x2c
   15258:	2008      	movs	r0, #8
   1525a:	1838      	adds	r0, r7, r0
   1525c:	18c0      	adds	r0, r0, r3
   1525e:	47a8      	blx	r5

		if (entity->read != NULL) {
   15260:	0023      	movs	r3, r4
   15262:	33b0      	adds	r3, #176	; 0xb0
   15264:	68db      	ldr	r3, [r3, #12]
   15266:	2b00      	cmp	r3, #0
   15268:	d07b      	beq.n	15362 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   1526a:	23b0      	movs	r3, #176	; 0xb0
   1526c:	5ce3      	ldrb	r3, [r4, r3]
   1526e:	2b00      	cmp	r3, #0
   15270:	d16b      	bne.n	1534a <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   15272:	0023      	movs	r3, r4
   15274:	33b0      	adds	r3, #176	; 0xb0
   15276:	689b      	ldr	r3, [r3, #8]
   15278:	2b00      	cmp	r3, #0
   1527a:	d072      	beq.n	15362 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1527c:	0022      	movs	r2, r4
   1527e:	32b0      	adds	r2, #176	; 0xb0
   15280:	6950      	ldr	r0, [r2, #20]
   15282:	4798      	blx	r3
   15284:	23cc      	movs	r3, #204	; 0xcc
   15286:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   15288:	2800      	cmp	r0, #0
   1528a:	da00      	bge.n	1528e <_http_client_request+0x17e>
   1528c:	e0ac      	b.n	153e8 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1528e:	0002      	movs	r2, r0
   15290:	4963      	ldr	r1, [pc, #396]	; (15420 <_http_client_request+0x310>)
   15292:	2320      	movs	r3, #32
   15294:	2008      	movs	r0, #8
   15296:	1838      	adds	r0, r7, r0
   15298:	18c0      	adds	r0, r0, r3
   1529a:	4b62      	ldr	r3, [pc, #392]	; (15424 <_http_client_request+0x314>)
   1529c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1529e:	2210      	movs	r2, #16
   152a0:	4961      	ldr	r1, [pc, #388]	; (15428 <_http_client_request+0x318>)
   152a2:	232c      	movs	r3, #44	; 0x2c
   152a4:	2008      	movs	r0, #8
   152a6:	1838      	adds	r0, r7, r0
   152a8:	18c0      	adds	r0, r0, r3
   152aa:	4d55      	ldr	r5, [pc, #340]	; (15400 <_http_client_request+0x2f0>)
   152ac:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   152ae:	2320      	movs	r3, #32
   152b0:	2208      	movs	r2, #8
   152b2:	18ba      	adds	r2, r7, r2
   152b4:	18d0      	adds	r0, r2, r3
   152b6:	4b51      	ldr	r3, [pc, #324]	; (153fc <_http_client_request+0x2ec>)
   152b8:	4798      	blx	r3
   152ba:	0002      	movs	r2, r0
   152bc:	2320      	movs	r3, #32
   152be:	2108      	movs	r1, #8
   152c0:	1879      	adds	r1, r7, r1
   152c2:	18c9      	adds	r1, r1, r3
   152c4:	330c      	adds	r3, #12
   152c6:	2008      	movs	r0, #8
   152c8:	1838      	adds	r0, r7, r0
   152ca:	18c0      	adds	r0, r0, r3
   152cc:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   152ce:	2202      	movs	r2, #2
   152d0:	494e      	ldr	r1, [pc, #312]	; (1540c <_http_client_request+0x2fc>)
   152d2:	232c      	movs	r3, #44	; 0x2c
   152d4:	2008      	movs	r0, #8
   152d6:	1838      	adds	r0, r7, r0
   152d8:	18c0      	adds	r0, r0, r3
   152da:	47a8      	blx	r5
   152dc:	e041      	b.n	15362 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   152de:	2204      	movs	r2, #4
   152e0:	4952      	ldr	r1, [pc, #328]	; (1542c <_http_client_request+0x31c>)
   152e2:	332b      	adds	r3, #43	; 0x2b
   152e4:	2008      	movs	r0, #8
   152e6:	1838      	adds	r0, r7, r0
   152e8:	18c0      	adds	r0, r0, r3
   152ea:	4b45      	ldr	r3, [pc, #276]	; (15400 <_http_client_request+0x2f0>)
   152ec:	4798      	blx	r3
   152ee:	e75b      	b.n	151a8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   152f0:	2205      	movs	r2, #5
   152f2:	494f      	ldr	r1, [pc, #316]	; (15430 <_http_client_request+0x320>)
   152f4:	332a      	adds	r3, #42	; 0x2a
   152f6:	2008      	movs	r0, #8
   152f8:	1838      	adds	r0, r7, r0
   152fa:	18c0      	adds	r0, r0, r3
   152fc:	4b40      	ldr	r3, [pc, #256]	; (15400 <_http_client_request+0x2f0>)
   152fe:	4798      	blx	r3
   15300:	e752      	b.n	151a8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   15302:	2207      	movs	r2, #7
   15304:	494b      	ldr	r1, [pc, #300]	; (15434 <_http_client_request+0x324>)
   15306:	3329      	adds	r3, #41	; 0x29
   15308:	2008      	movs	r0, #8
   1530a:	1838      	adds	r0, r7, r0
   1530c:	18c0      	adds	r0, r0, r3
   1530e:	4b3c      	ldr	r3, [pc, #240]	; (15400 <_http_client_request+0x2f0>)
   15310:	4798      	blx	r3
   15312:	e749      	b.n	151a8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   15314:	2204      	movs	r2, #4
   15316:	4948      	ldr	r1, [pc, #288]	; (15438 <_http_client_request+0x328>)
   15318:	3328      	adds	r3, #40	; 0x28
   1531a:	2008      	movs	r0, #8
   1531c:	1838      	adds	r0, r7, r0
   1531e:	18c0      	adds	r0, r0, r3
   15320:	4b37      	ldr	r3, [pc, #220]	; (15400 <_http_client_request+0x2f0>)
   15322:	4798      	blx	r3
   15324:	e740      	b.n	151a8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   15326:	2208      	movs	r2, #8
   15328:	4944      	ldr	r1, [pc, #272]	; (1543c <_http_client_request+0x32c>)
   1532a:	3327      	adds	r3, #39	; 0x27
   1532c:	2008      	movs	r0, #8
   1532e:	1838      	adds	r0, r7, r0
   15330:	18c0      	adds	r0, r0, r3
   15332:	4b33      	ldr	r3, [pc, #204]	; (15400 <_http_client_request+0x2f0>)
   15334:	4798      	blx	r3
   15336:	e737      	b.n	151a8 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   15338:	2205      	movs	r2, #5
   1533a:	4941      	ldr	r1, [pc, #260]	; (15440 <_http_client_request+0x330>)
   1533c:	3326      	adds	r3, #38	; 0x26
   1533e:	2008      	movs	r0, #8
   15340:	1838      	adds	r0, r7, r0
   15342:	18c0      	adds	r0, r0, r3
   15344:	4b2e      	ldr	r3, [pc, #184]	; (15400 <_http_client_request+0x2f0>)
   15346:	4798      	blx	r3
   15348:	e72e      	b.n	151a8 <_http_client_request+0x98>
				module->req.content_length = -1;
   1534a:	2201      	movs	r2, #1
   1534c:	4252      	negs	r2, r2
   1534e:	23cc      	movs	r3, #204	; 0xcc
   15350:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   15352:	321d      	adds	r2, #29
   15354:	493b      	ldr	r1, [pc, #236]	; (15444 <_http_client_request+0x334>)
   15356:	3ba0      	subs	r3, #160	; 0xa0
   15358:	2008      	movs	r0, #8
   1535a:	1838      	adds	r0, r7, r0
   1535c:	18c0      	adds	r0, r0, r3
   1535e:	4b28      	ldr	r3, [pc, #160]	; (15400 <_http_client_request+0x2f0>)
   15360:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   15362:	23d4      	movs	r3, #212	; 0xd4
   15364:	58e5      	ldr	r5, [r4, r3]
   15366:	2d00      	cmp	r5, #0
   15368:	d00a      	beq.n	15380 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   1536a:	0028      	movs	r0, r5
   1536c:	4b23      	ldr	r3, [pc, #140]	; (153fc <_http_client_request+0x2ec>)
   1536e:	4798      	blx	r3
   15370:	0002      	movs	r2, r0
   15372:	0029      	movs	r1, r5
   15374:	232c      	movs	r3, #44	; 0x2c
   15376:	2008      	movs	r0, #8
   15378:	1838      	adds	r0, r7, r0
   1537a:	18c0      	adds	r0, r0, r3
   1537c:	4b20      	ldr	r3, [pc, #128]	; (15400 <_http_client_request+0x2f0>)
   1537e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   15380:	2202      	movs	r2, #2
   15382:	4922      	ldr	r1, [pc, #136]	; (1540c <_http_client_request+0x2fc>)
   15384:	232c      	movs	r3, #44	; 0x2c
   15386:	2008      	movs	r0, #8
   15388:	1838      	adds	r0, r7, r0
   1538a:	18c0      	adds	r0, r0, r3
   1538c:	4b1c      	ldr	r3, [pc, #112]	; (15400 <_http_client_request+0x2f0>)
   1538e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   15390:	232c      	movs	r3, #44	; 0x2c
   15392:	2208      	movs	r2, #8
   15394:	18ba      	adds	r2, r7, r2
   15396:	18d0      	adds	r0, r2, r3
   15398:	4b2b      	ldr	r3, [pc, #172]	; (15448 <_http_client_request+0x338>)
   1539a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   1539c:	2304      	movs	r3, #4
   1539e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   153a0:	23cc      	movs	r3, #204	; 0xcc
   153a2:	58e2      	ldr	r2, [r4, r3]
   153a4:	2a00      	cmp	r2, #0
   153a6:	db51      	blt.n	1544c <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   153a8:	dc00      	bgt.n	153ac <_http_client_request+0x29c>
   153aa:	e0f0      	b.n	1558e <_http_client_request+0x47e>
   153ac:	0023      	movs	r3, r4
   153ae:	33b0      	adds	r3, #176	; 0xb0
   153b0:	68dd      	ldr	r5, [r3, #12]
   153b2:	2d00      	cmp	r5, #0
   153b4:	d100      	bne.n	153b8 <_http_client_request+0x2a8>
   153b6:	e0ea      	b.n	1558e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   153b8:	23d0      	movs	r3, #208	; 0xd0
   153ba:	58e3      	ldr	r3, [r4, r3]
   153bc:	429a      	cmp	r2, r3
   153be:	dd00      	ble.n	153c2 <_http_client_request+0x2b2>
   153c0:	e0ba      	b.n	15538 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   153c2:	23c0      	movs	r3, #192	; 0xc0
   153c4:	58e3      	ldr	r3, [r4, r3]
   153c6:	2b00      	cmp	r3, #0
   153c8:	d002      	beq.n	153d0 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   153ca:	22c4      	movs	r2, #196	; 0xc4
   153cc:	58a0      	ldr	r0, [r4, r2]
   153ce:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   153d0:	2302      	movs	r3, #2
   153d2:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   153d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   153d6:	2b00      	cmp	r3, #0
   153d8:	d100      	bne.n	153dc <_http_client_request+0x2cc>
   153da:	e6c0      	b.n	1515e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   153dc:	220c      	movs	r2, #12
   153de:	18ba      	adds	r2, r7, r2
   153e0:	2101      	movs	r1, #1
   153e2:	0020      	movs	r0, r4
   153e4:	4798      	blx	r3
   153e6:	e6ba      	b.n	1515e <_http_client_request+0x4e>
					module->req.content_length = 0;
   153e8:	2200      	movs	r2, #0
   153ea:	50e2      	str	r2, [r4, r3]
   153ec:	e7b9      	b.n	15362 <_http_client_request+0x252>
   153ee:	46c0      	nop			; (mov r8, r8)
   153f0:	00019d10 	.word	0x00019d10
   153f4:	00014ea1 	.word	0x00014ea1
   153f8:	00015e6d 	.word	0x00015e6d
   153fc:	000174d7 	.word	0x000174d7
   15400:	00015ec1 	.word	0x00015ec1
   15404:	00019d84 	.word	0x00019d84
   15408:	00019d90 	.word	0x00019d90
   1540c:	0001a114 	.word	0x0001a114
   15410:	00019da0 	.word	0x00019da0
   15414:	00019da8 	.word	0x00019da8
   15418:	00019dc4 	.word	0x00019dc4
   1541c:	00019dd8 	.word	0x00019dd8
   15420:	00019e10 	.word	0x00019e10
   15424:	00017435 	.word	0x00017435
   15428:	00019e14 	.word	0x00019e14
   1542c:	00019d50 	.word	0x00019d50
   15430:	00019d58 	.word	0x00019d58
   15434:	00019d60 	.word	0x00019d60
   15438:	00019d68 	.word	0x00019d68
   1543c:	00019d70 	.word	0x00019d70
   15440:	00019d7c 	.word	0x00019d7c
   15444:	00019df0 	.word	0x00019df0
   15448:	00015e7d 	.word	0x00015e7d
		if (module->req.content_length < 0 && entity->read) {
   1544c:	0023      	movs	r3, r4
   1544e:	33b0      	adds	r3, #176	; 0xb0
   15450:	68dd      	ldr	r5, [r3, #12]
   15452:	2d00      	cmp	r5, #0
   15454:	d100      	bne.n	15458 <_http_client_request+0x348>
   15456:	e09a      	b.n	1558e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   15458:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1545a:	58e3      	ldr	r3, [r4, r3]
   1545c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1545e:	3a07      	subs	r2, #7
   15460:	1d71      	adds	r1, r6, #5
   15462:	0020      	movs	r0, r4
   15464:	30b0      	adds	r0, #176	; 0xb0
   15466:	6940      	ldr	r0, [r0, #20]
   15468:	47a8      	blx	r5
   1546a:	0005      	movs	r5, r0
   1546c:	43c3      	mvns	r3, r0
   1546e:	17db      	asrs	r3, r3, #31
   15470:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   15472:	220a      	movs	r2, #10
   15474:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   15476:	210d      	movs	r1, #13
   15478:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1547a:	1973      	adds	r3, r6, r5
   1547c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1547e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   15480:	230f      	movs	r3, #15
   15482:	402b      	ands	r3, r5
   15484:	3206      	adds	r2, #6
   15486:	3905      	subs	r1, #5
   15488:	468c      	mov	ip, r1
   1548a:	44bc      	add	ip, r7
   1548c:	4462      	add	r2, ip
   1548e:	5cd3      	ldrb	r3, [r2, r3]
   15490:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   15492:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   15494:	2d0f      	cmp	r5, #15
   15496:	dd0d      	ble.n	154b4 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   15498:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   1549a:	17eb      	asrs	r3, r5, #31
   1549c:	220f      	movs	r2, #15
   1549e:	4013      	ands	r3, r2
   154a0:	195b      	adds	r3, r3, r5
   154a2:	111b      	asrs	r3, r3, #4
   154a4:	4013      	ands	r3, r2
   154a6:	3201      	adds	r2, #1
   154a8:	2008      	movs	r0, #8
   154aa:	4684      	mov	ip, r0
   154ac:	44bc      	add	ip, r7
   154ae:	4462      	add	r2, ip
   154b0:	5cd3      	ldrb	r3, [r2, r3]
   154b2:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   154b4:	2dff      	cmp	r5, #255	; 0xff
   154b6:	dd0d      	ble.n	154d4 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   154b8:	17ea      	asrs	r2, r5, #31
   154ba:	23ff      	movs	r3, #255	; 0xff
   154bc:	4013      	ands	r3, r2
   154be:	195b      	adds	r3, r3, r5
   154c0:	051b      	lsls	r3, r3, #20
   154c2:	0f1b      	lsrs	r3, r3, #28
   154c4:	2210      	movs	r2, #16
   154c6:	2108      	movs	r1, #8
   154c8:	468c      	mov	ip, r1
   154ca:	44bc      	add	ip, r7
   154cc:	4462      	add	r2, ip
   154ce:	5cd3      	ldrb	r3, [r2, r3]
   154d0:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   154d2:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   154d4:	1cca      	adds	r2, r1, #3
   154d6:	1b92      	subs	r2, r2, r6
   154d8:	1d2b      	adds	r3, r5, #4
   154da:	18d2      	adds	r2, r2, r3
   154dc:	b292      	uxth	r2, r2
   154de:	2000      	movs	r0, #0
   154e0:	5620      	ldrsb	r0, [r4, r0]
   154e2:	2300      	movs	r3, #0
   154e4:	4e30      	ldr	r6, [pc, #192]	; (155a8 <_http_client_request+0x498>)
   154e6:	47b0      	blx	r6
   154e8:	2800      	cmp	r0, #0
   154ea:	db19      	blt.n	15520 <_http_client_request+0x410>
			module->req.sent_length += size;
   154ec:	22d0      	movs	r2, #208	; 0xd0
   154ee:	58a3      	ldr	r3, [r4, r2]
   154f0:	195b      	adds	r3, r3, r5
   154f2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   154f4:	2d00      	cmp	r5, #0
   154f6:	d000      	beq.n	154fa <_http_client_request+0x3ea>
   154f8:	e631      	b.n	1515e <_http_client_request+0x4e>
				if (module->req.entity.close) {
   154fa:	23c0      	movs	r3, #192	; 0xc0
   154fc:	58e3      	ldr	r3, [r4, r3]
   154fe:	2b00      	cmp	r3, #0
   15500:	d002      	beq.n	15508 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   15502:	3a0c      	subs	r2, #12
   15504:	58a0      	ldr	r0, [r4, r2]
   15506:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   15508:	2302      	movs	r3, #2
   1550a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   1550c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1550e:	2b00      	cmp	r3, #0
   15510:	d100      	bne.n	15514 <_http_client_request+0x404>
   15512:	e624      	b.n	1515e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15514:	220c      	movs	r2, #12
   15516:	18ba      	adds	r2, r7, r2
   15518:	2101      	movs	r1, #1
   1551a:	0020      	movs	r0, r4
   1551c:	4798      	blx	r3
   1551e:	e61e      	b.n	1515e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   15520:	2105      	movs	r1, #5
   15522:	4249      	negs	r1, r1
   15524:	0020      	movs	r0, r4
   15526:	4b21      	ldr	r3, [pc, #132]	; (155ac <_http_client_request+0x49c>)
   15528:	4798      	blx	r3
   1552a:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   1552c:	46bd      	mov	sp, r7
   1552e:	b013      	add	sp, #76	; 0x4c
   15530:	bc0c      	pop	{r2, r3}
   15532:	4692      	mov	sl, r2
   15534:	469b      	mov	fp, r3
   15536:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   15538:	0022      	movs	r2, r4
   1553a:	32b0      	adds	r2, #176	; 0xb0
   1553c:	6950      	ldr	r0, [r2, #20]
   1553e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15540:	0031      	movs	r1, r6
   15542:	47a8      	blx	r5
			if (size < 0) {
   15544:	2800      	cmp	r0, #0
   15546:	db16      	blt.n	15576 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   15548:	23cc      	movs	r3, #204	; 0xcc
   1554a:	58e5      	ldr	r5, [r4, r3]
   1554c:	3304      	adds	r3, #4
   1554e:	58e3      	ldr	r3, [r4, r3]
   15550:	1aed      	subs	r5, r5, r3
   15552:	4285      	cmp	r5, r0
   15554:	dd00      	ble.n	15558 <_http_client_request+0x448>
   15556:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   15558:	b2aa      	uxth	r2, r5
   1555a:	2000      	movs	r0, #0
   1555c:	5620      	ldrsb	r0, [r4, r0]
   1555e:	2300      	movs	r3, #0
   15560:	0031      	movs	r1, r6
   15562:	4e11      	ldr	r6, [pc, #68]	; (155a8 <_http_client_request+0x498>)
   15564:	47b0      	blx	r6
   15566:	2800      	cmp	r0, #0
   15568:	db0b      	blt.n	15582 <_http_client_request+0x472>
				module->req.sent_length += size;
   1556a:	23d0      	movs	r3, #208	; 0xd0
   1556c:	58e2      	ldr	r2, [r4, r3]
   1556e:	4694      	mov	ip, r2
   15570:	4465      	add	r5, ip
   15572:	50e5      	str	r5, [r4, r3]
   15574:	e5f3      	b.n	1515e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   15576:	2105      	movs	r1, #5
   15578:	4249      	negs	r1, r1
   1557a:	0020      	movs	r0, r4
   1557c:	4b0b      	ldr	r3, [pc, #44]	; (155ac <_http_client_request+0x49c>)
   1557e:	4798      	blx	r3
   15580:	e5ed      	b.n	1515e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   15582:	2105      	movs	r1, #5
   15584:	4249      	negs	r1, r1
   15586:	0020      	movs	r0, r4
   15588:	4b08      	ldr	r3, [pc, #32]	; (155ac <_http_client_request+0x49c>)
   1558a:	4798      	blx	r3
					return;
   1558c:	e7cd      	b.n	1552a <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   1558e:	2302      	movs	r3, #2
   15590:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   15592:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15594:	2b00      	cmp	r3, #0
   15596:	d100      	bne.n	1559a <_http_client_request+0x48a>
   15598:	e5e1      	b.n	1515e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1559a:	220c      	movs	r2, #12
   1559c:	18ba      	adds	r2, r7, r2
   1559e:	2101      	movs	r1, #1
   155a0:	0020      	movs	r0, r4
   155a2:	4798      	blx	r3
   155a4:	e5db      	b.n	1515e <_http_client_request+0x4e>
   155a6:	46c0      	nop			; (mov r8, r8)
   155a8:	0000f361 	.word	0x0000f361
   155ac:	00014ff9 	.word	0x00014ff9

000155b0 <http_client_send_request>:
{
   155b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155b2:	46d6      	mov	lr, sl
   155b4:	b500      	push	{lr}
   155b6:	b088      	sub	sp, #32
   155b8:	0004      	movs	r4, r0
   155ba:	000f      	movs	r7, r1
   155bc:	4692      	mov	sl, r2
   155be:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   155c0:	2800      	cmp	r0, #0
   155c2:	d100      	bne.n	155c6 <http_client_send_request+0x16>
   155c4:	e0d3      	b.n	1576e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   155c6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   155c8:	2b02      	cmp	r3, #2
   155ca:	d900      	bls.n	155ce <http_client_send_request+0x1e>
   155cc:	e0d3      	b.n	15776 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   155ce:	2207      	movs	r2, #7
   155d0:	4981      	ldr	r1, [pc, #516]	; (157d8 <http_client_send_request+0x228>)
   155d2:	0038      	movs	r0, r7
   155d4:	4b81      	ldr	r3, [pc, #516]	; (157dc <http_client_send_request+0x22c>)
   155d6:	4798      	blx	r3
		i = 7;
   155d8:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   155da:	2800      	cmp	r0, #0
   155dc:	d007      	beq.n	155ee <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   155de:	2208      	movs	r2, #8
   155e0:	497f      	ldr	r1, [pc, #508]	; (157e0 <http_client_send_request+0x230>)
   155e2:	0038      	movs	r0, r7
   155e4:	4b7d      	ldr	r3, [pc, #500]	; (157dc <http_client_send_request+0x22c>)
   155e6:	4798      	blx	r3
		i = 8;
   155e8:	4246      	negs	r6, r0
   155ea:	4146      	adcs	r6, r0
   155ec:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   155ee:	1c63      	adds	r3, r4, #1
   155f0:	19bd      	adds	r5, r7, r6
   155f2:	9302      	str	r3, [sp, #8]
   155f4:	0018      	movs	r0, r3
   155f6:	4b7b      	ldr	r3, [pc, #492]	; (157e4 <http_client_send_request+0x234>)
   155f8:	4798      	blx	r3
   155fa:	0002      	movs	r2, r0
   155fc:	0029      	movs	r1, r5
   155fe:	9802      	ldr	r0, [sp, #8]
   15600:	4b76      	ldr	r3, [pc, #472]	; (157dc <http_client_send_request+0x22c>)
   15602:	4798      	blx	r3
   15604:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15606:	782b      	ldrb	r3, [r5, #0]
   15608:	2b00      	cmp	r3, #0
   1560a:	d052      	beq.n	156b2 <http_client_send_request+0x102>
   1560c:	2b2f      	cmp	r3, #47	; 0x2f
   1560e:	d052      	beq.n	156b6 <http_client_send_request+0x106>
   15610:	1c71      	adds	r1, r6, #1
   15612:	1879      	adds	r1, r7, r1
   15614:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   15616:	3201      	adds	r2, #1
   15618:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1561a:	000d      	movs	r5, r1
   1561c:	780b      	ldrb	r3, [r1, #0]
   1561e:	2b00      	cmp	r3, #0
   15620:	d002      	beq.n	15628 <http_client_send_request+0x78>
   15622:	3101      	adds	r1, #1
   15624:	2b2f      	cmp	r3, #47	; 0x2f
   15626:	d1f6      	bne.n	15616 <http_client_send_request+0x66>
	module->host[j] = '\0';
   15628:	18a2      	adds	r2, r4, r2
   1562a:	2300      	movs	r3, #0
   1562c:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   1562e:	7863      	ldrb	r3, [r4, #1]
   15630:	2b00      	cmp	r3, #0
   15632:	d100      	bne.n	15636 <http_client_send_request+0x86>
   15634:	e0a3      	b.n	1577e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   15636:	0028      	movs	r0, r5
   15638:	4b6a      	ldr	r3, [pc, #424]	; (157e4 <http_client_send_request+0x234>)
   1563a:	4798      	blx	r3
   1563c:	283f      	cmp	r0, #63	; 0x3f
   1563e:	d900      	bls.n	15642 <http_client_send_request+0x92>
   15640:	e0a1      	b.n	15786 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   15642:	23d4      	movs	r3, #212	; 0xd4
   15644:	58e0      	ldr	r0, [r4, r3]
   15646:	2800      	cmp	r0, #0
   15648:	d001      	beq.n	1564e <http_client_send_request+0x9e>
		free(module->req.ext_header);
   1564a:	4b67      	ldr	r3, [pc, #412]	; (157e8 <http_client_send_request+0x238>)
   1564c:	4798      	blx	r3
	if (ext_header != NULL) {
   1564e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15650:	2b00      	cmp	r3, #0
   15652:	d032      	beq.n	156ba <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   15654:	0018      	movs	r0, r3
   15656:	4b65      	ldr	r3, [pc, #404]	; (157ec <http_client_send_request+0x23c>)
   15658:	4798      	blx	r3
   1565a:	23d4      	movs	r3, #212	; 0xd4
   1565c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   1565e:	2800      	cmp	r0, #0
   15660:	d100      	bne.n	15664 <http_client_send_request+0xb4>
   15662:	e094      	b.n	1578e <http_client_send_request+0x1de>
	module->sending = 0;
   15664:	2241      	movs	r2, #65	; 0x41
   15666:	5ca3      	ldrb	r3, [r4, r2]
   15668:	2101      	movs	r1, #1
   1566a:	438b      	bics	r3, r1
   1566c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   1566e:	2300      	movs	r3, #0
   15670:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   15672:	782b      	ldrb	r3, [r5, #0]
   15674:	2b2f      	cmp	r3, #47	; 0x2f
   15676:	d024      	beq.n	156c2 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   15678:	222f      	movs	r2, #47	; 0x2f
   1567a:	2370      	movs	r3, #112	; 0x70
   1567c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   1567e:	782b      	ldrb	r3, [r5, #0]
   15680:	2b00      	cmp	r3, #0
   15682:	d124      	bne.n	156ce <http_client_send_request+0x11e>
	if (entity != NULL) {
   15684:	9b03      	ldr	r3, [sp, #12]
   15686:	2b00      	cmp	r3, #0
   15688:	d027      	beq.n	156da <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1568a:	0020      	movs	r0, r4
   1568c:	30b0      	adds	r0, #176	; 0xb0
   1568e:	2218      	movs	r2, #24
   15690:	0019      	movs	r1, r3
   15692:	4b57      	ldr	r3, [pc, #348]	; (157f0 <http_client_send_request+0x240>)
   15694:	4798      	blx	r3
	module->req.method = method;
   15696:	23c8      	movs	r3, #200	; 0xc8
   15698:	4652      	mov	r2, sl
   1569a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   1569c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1569e:	2b01      	cmp	r3, #1
   156a0:	d022      	beq.n	156e8 <http_client_send_request+0x138>
   156a2:	2b00      	cmp	r3, #0
   156a4:	d027      	beq.n	156f6 <http_client_send_request+0x146>
   156a6:	2b02      	cmp	r3, #2
   156a8:	d03a      	beq.n	15720 <http_client_send_request+0x170>
		return -EAGAIN;
   156aa:	230b      	movs	r3, #11
   156ac:	425b      	negs	r3, r3
   156ae:	9301      	str	r3, [sp, #4]
   156b0:	e08d      	b.n	157ce <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   156b2:	2200      	movs	r2, #0
   156b4:	e7b8      	b.n	15628 <http_client_send_request+0x78>
   156b6:	2200      	movs	r2, #0
   156b8:	e7b6      	b.n	15628 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   156ba:	2200      	movs	r2, #0
   156bc:	23d4      	movs	r3, #212	; 0xd4
   156be:	50e2      	str	r2, [r4, r3]
   156c0:	e7d0      	b.n	15664 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   156c2:	0020      	movs	r0, r4
   156c4:	3070      	adds	r0, #112	; 0x70
   156c6:	0029      	movs	r1, r5
   156c8:	4b4a      	ldr	r3, [pc, #296]	; (157f4 <http_client_send_request+0x244>)
   156ca:	4798      	blx	r3
   156cc:	e7da      	b.n	15684 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   156ce:	0029      	movs	r1, r5
   156d0:	0020      	movs	r0, r4
   156d2:	3071      	adds	r0, #113	; 0x71
   156d4:	4b47      	ldr	r3, [pc, #284]	; (157f4 <http_client_send_request+0x244>)
   156d6:	4798      	blx	r3
   156d8:	e7d4      	b.n	15684 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   156da:	0020      	movs	r0, r4
   156dc:	30b0      	adds	r0, #176	; 0xb0
   156de:	2218      	movs	r2, #24
   156e0:	2100      	movs	r1, #0
   156e2:	4b45      	ldr	r3, [pc, #276]	; (157f8 <http_client_send_request+0x248>)
   156e4:	4798      	blx	r3
   156e6:	e7d6      	b.n	15696 <http_client_send_request+0xe6>
		if (!reconnect) {
   156e8:	9b01      	ldr	r3, [sp, #4]
   156ea:	2b00      	cmp	r3, #0
   156ec:	d06f      	beq.n	157ce <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   156ee:	2100      	movs	r1, #0
   156f0:	0020      	movs	r0, r4
   156f2:	4b42      	ldr	r3, [pc, #264]	; (157fc <http_client_send_request+0x24c>)
   156f4:	4798      	blx	r3
		if (module->config.tls) {
   156f6:	2352      	movs	r3, #82	; 0x52
   156f8:	5ce2      	ldrb	r2, [r4, r3]
   156fa:	1e53      	subs	r3, r2, #1
   156fc:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   156fe:	b2d2      	uxtb	r2, r2
   15700:	2101      	movs	r1, #1
   15702:	2002      	movs	r0, #2
   15704:	4b3e      	ldr	r3, [pc, #248]	; (15800 <http_client_send_request+0x250>)
   15706:	4798      	blx	r3
   15708:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   1570a:	2800      	cmp	r0, #0
   1570c:	db43      	blt.n	15796 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   1570e:	0080      	lsls	r0, r0, #2
   15710:	4b3c      	ldr	r3, [pc, #240]	; (15804 <http_client_send_request+0x254>)
   15712:	50c4      	str	r4, [r0, r3]
   15714:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   15716:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15718:	2620      	movs	r6, #32
			isv6 = 1;
   1571a:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   1571c:	2730      	movs	r7, #48	; 0x30
   1571e:	e00c      	b.n	1573a <http_client_send_request+0x18a>
		if (!reconnect) {
   15720:	9b01      	ldr	r3, [sp, #4]
   15722:	2b00      	cmp	r3, #0
   15724:	d1e3      	bne.n	156ee <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   15726:	3303      	adds	r3, #3
   15728:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   1572a:	0020      	movs	r0, r4
   1572c:	4b36      	ldr	r3, [pc, #216]	; (15808 <http_client_send_request+0x258>)
   1572e:	4798      	blx	r3
			break;
   15730:	e04d      	b.n	157ce <http_client_send_request+0x21e>
			if (isv6) {
   15732:	2900      	cmp	r1, #0
   15734:	d001      	beq.n	1573a <http_client_send_request+0x18a>
   15736:	e012      	b.n	1575e <http_client_send_request+0x1ae>
			isv6 = 1;
   15738:	0001      	movs	r1, r0
	while (*host != '\0') {
   1573a:	782a      	ldrb	r2, [r5, #0]
   1573c:	2a00      	cmp	r2, #0
   1573e:	d02e      	beq.n	1579e <http_client_send_request+0x1ee>
		ch = *host++;
   15740:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15742:	0013      	movs	r3, r2
   15744:	43b3      	bics	r3, r6
   15746:	3b41      	subs	r3, #65	; 0x41
   15748:	2b05      	cmp	r3, #5
   1574a:	d9f5      	bls.n	15738 <http_client_send_request+0x188>
   1574c:	2a3a      	cmp	r2, #58	; 0x3a
   1574e:	d00a      	beq.n	15766 <http_client_send_request+0x1b6>
   15750:	2a2f      	cmp	r2, #47	; 0x2f
   15752:	d00a      	beq.n	1576a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   15754:	2a2e      	cmp	r2, #46	; 0x2e
   15756:	d0ec      	beq.n	15732 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   15758:	403a      	ands	r2, r7
   1575a:	2a30      	cmp	r2, #48	; 0x30
   1575c:	d0ed      	beq.n	1573a <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   1575e:	9802      	ldr	r0, [sp, #8]
   15760:	4b2a      	ldr	r3, [pc, #168]	; (1580c <http_client_send_request+0x25c>)
   15762:	4798      	blx	r3
   15764:	e02f      	b.n	157c6 <http_client_send_request+0x216>
			isv6 = 1;
   15766:	0001      	movs	r1, r0
   15768:	e7e7      	b.n	1573a <http_client_send_request+0x18a>
   1576a:	0001      	movs	r1, r0
   1576c:	e7e5      	b.n	1573a <http_client_send_request+0x18a>
		return -EINVAL;
   1576e:	2316      	movs	r3, #22
   15770:	425b      	negs	r3, r3
   15772:	9301      	str	r3, [sp, #4]
   15774:	e02b      	b.n	157ce <http_client_send_request+0x21e>
		return -EBUSY;
   15776:	2310      	movs	r3, #16
   15778:	425b      	negs	r3, r3
   1577a:	9301      	str	r3, [sp, #4]
   1577c:	e027      	b.n	157ce <http_client_send_request+0x21e>
		return -EINVAL;
   1577e:	2316      	movs	r3, #22
   15780:	425b      	negs	r3, r3
   15782:	9301      	str	r3, [sp, #4]
   15784:	e023      	b.n	157ce <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   15786:	235b      	movs	r3, #91	; 0x5b
   15788:	425b      	negs	r3, r3
   1578a:	9301      	str	r3, [sp, #4]
   1578c:	e01f      	b.n	157ce <http_client_send_request+0x21e>
			return -ENOMEM;
   1578e:	230c      	movs	r3, #12
   15790:	425b      	negs	r3, r3
   15792:	9301      	str	r3, [sp, #4]
   15794:	e01b      	b.n	157ce <http_client_send_request+0x21e>
			return -ENOSPC;
   15796:	231c      	movs	r3, #28
   15798:	425b      	negs	r3, r3
   1579a:	9301      	str	r3, [sp, #4]
   1579c:	e017      	b.n	157ce <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   1579e:	2302      	movs	r3, #2
   157a0:	aa04      	add	r2, sp, #16
   157a2:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   157a4:	334e      	adds	r3, #78	; 0x4e
   157a6:	5ae3      	ldrh	r3, [r4, r3]
   157a8:	021a      	lsls	r2, r3, #8
   157aa:	0a1b      	lsrs	r3, r3, #8
   157ac:	4313      	orrs	r3, r2
   157ae:	aa04      	add	r2, sp, #16
   157b0:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   157b2:	9802      	ldr	r0, [sp, #8]
   157b4:	4b16      	ldr	r3, [pc, #88]	; (15810 <http_client_send_request+0x260>)
   157b6:	4798      	blx	r3
   157b8:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   157ba:	2000      	movs	r0, #0
   157bc:	5620      	ldrsb	r0, [r4, r0]
   157be:	2210      	movs	r2, #16
   157c0:	a904      	add	r1, sp, #16
   157c2:	4b14      	ldr	r3, [pc, #80]	; (15814 <http_client_send_request+0x264>)
   157c4:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   157c6:	2301      	movs	r3, #1
   157c8:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   157ca:	2300      	movs	r3, #0
   157cc:	9301      	str	r3, [sp, #4]
}
   157ce:	9801      	ldr	r0, [sp, #4]
   157d0:	b008      	add	sp, #32
   157d2:	bc04      	pop	{r2}
   157d4:	4692      	mov	sl, r2
   157d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157d8:	00019e34 	.word	0x00019e34
   157dc:	000174e5 	.word	0x000174e5
   157e0:	00019e3c 	.word	0x00019e3c
   157e4:	000174d7 	.word	0x000174d7
   157e8:	00016f65 	.word	0x00016f65
   157ec:	0001749d 	.word	0x0001749d
   157f0:	00016f79 	.word	0x00016f79
   157f4:	0001748d 	.word	0x0001748d
   157f8:	00016faf 	.word	0x00016faf
   157fc:	00014ff9 	.word	0x00014ff9
   15800:	0000f14d 	.word	0x0000f14d
   15804:	200007fc 	.word	0x200007fc
   15808:	00015111 	.word	0x00015111
   1580c:	0000f595 	.word	0x0000f595
   15810:	0000f529 	.word	0x0000f529
   15814:	0000f2d1 	.word	0x0000f2d1

00015818 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   15818:	b510      	push	{r4, lr}
	if (module == NULL) {
   1581a:	2800      	cmp	r0, #0
   1581c:	d00d      	beq.n	1583a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1581e:	6c41      	ldr	r1, [r0, #68]	; 0x44
   15820:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15822:	4291      	cmp	r1, r2
   15824:	d20a      	bcs.n	1583c <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   15826:	1a52      	subs	r2, r2, r1
   15828:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   1582a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1582c:	469c      	mov	ip, r3
   1582e:	4461      	add	r1, ip
	recv(module->sock,
   15830:	7800      	ldrb	r0, [r0, #0]
   15832:	b240      	sxtb	r0, r0
   15834:	2300      	movs	r3, #0
   15836:	4c04      	ldr	r4, [pc, #16]	; (15848 <_http_client_recv_packet+0x30>)
   15838:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   1583a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   1583c:	218b      	movs	r1, #139	; 0x8b
   1583e:	4249      	negs	r1, r1
   15840:	4b02      	ldr	r3, [pc, #8]	; (1584c <_http_client_recv_packet+0x34>)
   15842:	4798      	blx	r3
		return;
   15844:	e7f9      	b.n	1583a <_http_client_recv_packet+0x22>
   15846:	46c0      	nop			; (mov r8, r8)
   15848:	0000f3f9 	.word	0x0000f3f9
   1584c:	00014ff9 	.word	0x00014ff9

00015850 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   15850:	b570      	push	{r4, r5, r6, lr}
   15852:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   15854:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   15856:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   15858:	1a5c      	subs	r4, r3, r1
   1585a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   1585c:	2c00      	cmp	r4, #0
   1585e:	dc02      	bgt.n	15866 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   15860:	2300      	movs	r3, #0
   15862:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   15864:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   15866:	0022      	movs	r2, r4
   15868:	4b01      	ldr	r3, [pc, #4]	; (15870 <_http_client_move_buffer+0x20>)
   1586a:	4798      	blx	r3
		module->recved_size = remain;
   1586c:	646c      	str	r4, [r5, #68]	; 0x44
   1586e:	e7f9      	b.n	15864 <_http_client_move_buffer+0x14>
   15870:	00016f8b 	.word	0x00016f8b

00015874 <_http_client_handle_header>:
{
   15874:	b5f0      	push	{r4, r5, r6, r7, lr}
   15876:	46ce      	mov	lr, r9
   15878:	b500      	push	{lr}
   1587a:	b084      	sub	sp, #16
   1587c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   1587e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   15880:	4b62      	ldr	r3, [pc, #392]	; (15a0c <_http_client_handle_header+0x198>)
   15882:	4699      	mov	r9, r3
   15884:	e049      	b.n	1591a <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   15886:	0021      	movs	r1, r4
   15888:	0038      	movs	r0, r7
   1588a:	4b61      	ldr	r3, [pc, #388]	; (15a10 <_http_client_handle_header+0x19c>)
   1588c:	4798      	blx	r3
			return 0;
   1588e:	2600      	movs	r6, #0
}
   15890:	0030      	movs	r0, r6
   15892:	b004      	add	sp, #16
   15894:	bc04      	pop	{r2}
   15896:	4691      	mov	r9, r2
   15898:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1589a:	1ca1      	adds	r1, r4, #2
   1589c:	0038      	movs	r0, r7
   1589e:	4b5c      	ldr	r3, [pc, #368]	; (15a10 <_http_client_handle_header+0x19c>)
   158a0:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   158a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   158a4:	2b00      	cmp	r3, #0
   158a6:	d00a      	beq.n	158be <_http_client_handle_header+0x4a>
   158a8:	22e4      	movs	r2, #228	; 0xe4
   158aa:	5ab9      	ldrh	r1, [r7, r2]
   158ac:	2900      	cmp	r1, #0
   158ae:	d006      	beq.n	158be <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   158b0:	3a08      	subs	r2, #8
   158b2:	58b8      	ldr	r0, [r7, r2]
   158b4:	2800      	cmp	r0, #0
   158b6:	db07      	blt.n	158c8 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   158b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   158ba:	4290      	cmp	r0, r2
   158bc:	dc10      	bgt.n	158e0 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   158be:	2201      	movs	r2, #1
   158c0:	23d8      	movs	r3, #216	; 0xd8
   158c2:	50fa      	str	r2, [r7, r3]
			return 1;
   158c4:	2601      	movs	r6, #1
   158c6:	e7e3      	b.n	15890 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   158c8:	aa01      	add	r2, sp, #4
   158ca:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   158cc:	2101      	movs	r1, #1
   158ce:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   158d0:	2100      	movs	r1, #0
   158d2:	20e0      	movs	r0, #224	; 0xe0
   158d4:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   158d6:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   158d8:	3102      	adds	r1, #2
   158da:	0038      	movs	r0, r7
   158dc:	4798      	blx	r3
   158de:	e7ee      	b.n	158be <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   158e0:	aa01      	add	r2, sp, #4
   158e2:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   158e4:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   158e6:	2100      	movs	r1, #0
   158e8:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   158ea:	20e0      	movs	r0, #224	; 0xe0
   158ec:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   158ee:	3102      	adds	r1, #2
   158f0:	0038      	movs	r0, r7
   158f2:	4798      	blx	r3
   158f4:	e7e3      	b.n	158be <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   158f6:	0020      	movs	r0, r4
   158f8:	3010      	adds	r0, #16
   158fa:	4b46      	ldr	r3, [pc, #280]	; (15a14 <_http_client_handle_header+0x1a0>)
   158fc:	4798      	blx	r3
   158fe:	23dc      	movs	r3, #220	; 0xdc
   15900:	50f8      	str	r0, [r7, r3]
   15902:	e009      	b.n	15918 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15904:	3201      	adds	r2, #1
   15906:	4295      	cmp	r5, r2
   15908:	d006      	beq.n	15918 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1590a:	7813      	ldrb	r3, [r2, #0]
   1590c:	2b20      	cmp	r3, #32
   1590e:	d12b      	bne.n	15968 <_http_client_handle_header+0xf4>
   15910:	e7f8      	b.n	15904 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   15912:	3a21      	subs	r2, #33	; 0x21
   15914:	3389      	adds	r3, #137	; 0x89
   15916:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   15918:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   1591a:	493f      	ldr	r1, [pc, #252]	; (15a18 <_http_client_handle_header+0x1a4>)
   1591c:	0020      	movs	r0, r4
   1591e:	47c8      	blx	r9
   15920:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   15922:	d0b0      	beq.n	15886 <_http_client_handle_header+0x12>
   15924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15928:	4694      	mov	ip, r2
   1592a:	4463      	add	r3, ip
   1592c:	4298      	cmp	r0, r3
   1592e:	d2aa      	bcs.n	15886 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   15930:	2202      	movs	r2, #2
   15932:	4939      	ldr	r1, [pc, #228]	; (15a18 <_http_client_handle_header+0x1a4>)
   15934:	0020      	movs	r0, r4
   15936:	4b39      	ldr	r3, [pc, #228]	; (15a1c <_http_client_handle_header+0x1a8>)
   15938:	4798      	blx	r3
   1593a:	2800      	cmp	r0, #0
   1593c:	d0ad      	beq.n	1589a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1593e:	2210      	movs	r2, #16
   15940:	4937      	ldr	r1, [pc, #220]	; (15a20 <_http_client_handle_header+0x1ac>)
   15942:	0020      	movs	r0, r4
   15944:	4b35      	ldr	r3, [pc, #212]	; (15a1c <_http_client_handle_header+0x1a8>)
   15946:	4798      	blx	r3
   15948:	2800      	cmp	r0, #0
   1594a:	d0d4      	beq.n	158f6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1594c:	2213      	movs	r2, #19
   1594e:	4935      	ldr	r1, [pc, #212]	; (15a24 <_http_client_handle_header+0x1b0>)
   15950:	0020      	movs	r0, r4
   15952:	4b32      	ldr	r3, [pc, #200]	; (15a1c <_http_client_handle_header+0x1a8>)
   15954:	4798      	blx	r3
   15956:	1e06      	subs	r6, r0, #0
   15958:	d110      	bne.n	1597c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1595a:	0022      	movs	r2, r4
   1595c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1595e:	4295      	cmp	r5, r2
   15960:	d9da      	bls.n	15918 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15962:	7ce3      	ldrb	r3, [r4, #19]
   15964:	2b20      	cmp	r3, #32
   15966:	d0cd      	beq.n	15904 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   15968:	2220      	movs	r2, #32
   1596a:	4393      	bics	r3, r2
   1596c:	2b43      	cmp	r3, #67	; 0x43
   1596e:	d0d0      	beq.n	15912 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   15970:	2186      	movs	r1, #134	; 0x86
   15972:	4249      	negs	r1, r1
   15974:	0038      	movs	r0, r7
   15976:	4b2c      	ldr	r3, [pc, #176]	; (15a28 <_http_client_handle_header+0x1b4>)
   15978:	4798      	blx	r3
					return 0;
   1597a:	e789      	b.n	15890 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1597c:	220c      	movs	r2, #12
   1597e:	492b      	ldr	r1, [pc, #172]	; (15a2c <_http_client_handle_header+0x1b8>)
   15980:	0020      	movs	r0, r4
   15982:	4b26      	ldr	r3, [pc, #152]	; (15a1c <_http_client_handle_header+0x1a8>)
   15984:	4798      	blx	r3
   15986:	2800      	cmp	r0, #0
   15988:	d11d      	bne.n	159c6 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   1598a:	0022      	movs	r2, r4
   1598c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1598e:	4295      	cmp	r5, r2
   15990:	d9c2      	bls.n	15918 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15992:	7b23      	ldrb	r3, [r4, #12]
   15994:	2b20      	cmp	r3, #32
   15996:	d009      	beq.n	159ac <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   15998:	2220      	movs	r2, #32
   1599a:	4393      	bics	r3, r2
   1599c:	2b4b      	cmp	r3, #75	; 0x4b
   1599e:	d00c      	beq.n	159ba <_http_client_handle_header+0x146>
					module->permanent = 0;
   159a0:	2241      	movs	r2, #65	; 0x41
   159a2:	5cbb      	ldrb	r3, [r7, r2]
   159a4:	2102      	movs	r1, #2
   159a6:	438b      	bics	r3, r1
   159a8:	54bb      	strb	r3, [r7, r2]
   159aa:	e7b5      	b.n	15918 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   159ac:	3201      	adds	r2, #1
   159ae:	4295      	cmp	r5, r2
   159b0:	d0b2      	beq.n	15918 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   159b2:	7813      	ldrb	r3, [r2, #0]
   159b4:	2b20      	cmp	r3, #32
   159b6:	d1ef      	bne.n	15998 <_http_client_handle_header+0x124>
   159b8:	e7f8      	b.n	159ac <_http_client_handle_header+0x138>
					module->permanent = 1;
   159ba:	3221      	adds	r2, #33	; 0x21
   159bc:	5cbb      	ldrb	r3, [r7, r2]
   159be:	2102      	movs	r1, #2
   159c0:	430b      	orrs	r3, r1
   159c2:	54bb      	strb	r3, [r7, r2]
   159c4:	e7a8      	b.n	15918 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   159c6:	2205      	movs	r2, #5
   159c8:	4919      	ldr	r1, [pc, #100]	; (15a30 <_http_client_handle_header+0x1bc>)
   159ca:	0020      	movs	r0, r4
   159cc:	4b13      	ldr	r3, [pc, #76]	; (15a1c <_http_client_handle_header+0x1a8>)
   159ce:	4798      	blx	r3
   159d0:	2800      	cmp	r0, #0
   159d2:	d1a1      	bne.n	15918 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   159d4:	0020      	movs	r0, r4
   159d6:	3009      	adds	r0, #9
   159d8:	4b0e      	ldr	r3, [pc, #56]	; (15a14 <_http_client_handle_header+0x1a0>)
   159da:	4798      	blx	r3
   159dc:	23e4      	movs	r3, #228	; 0xe4
   159de:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   159e0:	2200      	movs	r2, #0
   159e2:	3b08      	subs	r3, #8
   159e4:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   159e6:	7963      	ldrb	r3, [r4, #5]
   159e8:	2b31      	cmp	r3, #49	; 0x31
   159ea:	d802      	bhi.n	159f2 <_http_client_handle_header+0x17e>
   159ec:	79e3      	ldrb	r3, [r4, #7]
   159ee:	2b30      	cmp	r3, #48	; 0x30
   159f0:	d905      	bls.n	159fe <_http_client_handle_header+0x18a>
				module->permanent = 1;
   159f2:	2241      	movs	r2, #65	; 0x41
   159f4:	5cbb      	ldrb	r3, [r7, r2]
   159f6:	2102      	movs	r1, #2
   159f8:	430b      	orrs	r3, r1
   159fa:	54bb      	strb	r3, [r7, r2]
   159fc:	e78c      	b.n	15918 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   159fe:	2241      	movs	r2, #65	; 0x41
   15a00:	5cbb      	ldrb	r3, [r7, r2]
   15a02:	2102      	movs	r1, #2
   15a04:	438b      	bics	r3, r1
   15a06:	54bb      	strb	r3, [r7, r2]
   15a08:	e786      	b.n	15918 <_http_client_handle_header+0xa4>
   15a0a:	46c0      	nop			; (mov r8, r8)
   15a0c:	00017507 	.word	0x00017507
   15a10:	00015851 	.word	0x00015851
   15a14:	00016efd 	.word	0x00016efd
   15a18:	0001a114 	.word	0x0001a114
   15a1c:	000174e5 	.word	0x000174e5
   15a20:	00019e14 	.word	0x00019e14
   15a24:	00019d24 	.word	0x00019d24
   15a28:	00014ff9 	.word	0x00014ff9
   15a2c:	00019d38 	.word	0x00019d38
   15a30:	00019d48 	.word	0x00019d48

00015a34 <_http_client_handle_entity>:
{
   15a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a36:	46ce      	mov	lr, r9
   15a38:	b500      	push	{lr}
   15a3a:	b086      	sub	sp, #24
   15a3c:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   15a3e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   15a40:	23dc      	movs	r3, #220	; 0xdc
   15a42:	58c3      	ldr	r3, [r0, r3]
   15a44:	2b00      	cmp	r3, #0
   15a46:	db69      	blt.n	15b1c <_http_client_handle_entity+0xe8>
   15a48:	6e02      	ldr	r2, [r0, #96]	; 0x60
   15a4a:	4293      	cmp	r3, r2
   15a4c:	dc2b      	bgt.n	15aa6 <_http_client_handle_entity+0x72>
	return 0;
   15a4e:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   15a50:	6c62      	ldr	r2, [r4, #68]	; 0x44
   15a52:	4293      	cmp	r3, r2
   15a54:	dc4e      	bgt.n	15af4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   15a56:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   15a58:	2e00      	cmp	r6, #0
   15a5a:	d003      	beq.n	15a64 <_http_client_handle_entity+0x30>
   15a5c:	22e4      	movs	r2, #228	; 0xe4
   15a5e:	5aa1      	ldrh	r1, [r4, r2]
   15a60:	2900      	cmp	r1, #0
   15a62:	d10e      	bne.n	15a82 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   15a64:	2300      	movs	r3, #0
   15a66:	22d8      	movs	r2, #216	; 0xd8
   15a68:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   15a6a:	320c      	adds	r2, #12
   15a6c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   15a6e:	3341      	adds	r3, #65	; 0x41
   15a70:	5ce3      	ldrb	r3, [r4, r3]
   15a72:	079b      	lsls	r3, r3, #30
   15a74:	d40f      	bmi.n	15a96 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   15a76:	2100      	movs	r1, #0
   15a78:	0020      	movs	r0, r4
   15a7a:	4b71      	ldr	r3, [pc, #452]	; (15c40 <_http_client_handle_entity+0x20c>)
   15a7c:	4798      	blx	r3
	return 0;
   15a7e:	2000      	movs	r0, #0
   15a80:	e038      	b.n	15af4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   15a82:	aa03      	add	r2, sp, #12
   15a84:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   15a86:	2100      	movs	r1, #0
   15a88:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   15a8a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   15a8c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15a8e:	3102      	adds	r1, #2
   15a90:	0020      	movs	r0, r4
   15a92:	47b0      	blx	r6
   15a94:	e7e6      	b.n	15a64 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   15a96:	23dc      	movs	r3, #220	; 0xdc
   15a98:	58e1      	ldr	r1, [r4, r3]
   15a9a:	1869      	adds	r1, r5, r1
   15a9c:	0020      	movs	r0, r4
   15a9e:	4b69      	ldr	r3, [pc, #420]	; (15c44 <_http_client_handle_entity+0x210>)
   15aa0:	4798      	blx	r3
				return module->recved_size;
   15aa2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   15aa4:	e026      	b.n	15af4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   15aa6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15aa8:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   15aaa:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   15aac:	21e0      	movs	r1, #224	; 0xe0
   15aae:	5840      	ldr	r0, [r0, r1]
   15ab0:	4684      	mov	ip, r0
   15ab2:	4462      	add	r2, ip
   15ab4:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   15ab6:	4293      	cmp	r3, r2
   15ab8:	dc20      	bgt.n	15afc <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   15aba:	2300      	movs	r3, #0
   15abc:	22d8      	movs	r2, #216	; 0xd8
   15abe:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15ac0:	320c      	adds	r2, #12
   15ac2:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15ac4:	3ae3      	subs	r2, #227	; 0xe3
   15ac6:	ab03      	add	r3, sp, #12
   15ac8:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15aca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15acc:	2b00      	cmp	r3, #0
   15ace:	d007      	beq.n	15ae0 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15ad0:	ae03      	add	r6, sp, #12
   15ad2:	0032      	movs	r2, r6
   15ad4:	2103      	movs	r1, #3
   15ad6:	0020      	movs	r0, r4
   15ad8:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   15ada:	7a33      	ldrb	r3, [r6, #8]
   15adc:	2b01      	cmp	r3, #1
   15ade:	d103      	bne.n	15ae8 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   15ae0:	2341      	movs	r3, #65	; 0x41
   15ae2:	5ce3      	ldrb	r3, [r4, r3]
   15ae4:	079b      	lsls	r3, r3, #30
   15ae6:	d510      	bpl.n	15b0a <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   15ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15aea:	18e9      	adds	r1, r5, r3
   15aec:	0020      	movs	r0, r4
   15aee:	4b55      	ldr	r3, [pc, #340]	; (15c44 <_http_client_handle_entity+0x210>)
   15af0:	4798      	blx	r3
	return 0;
   15af2:	2000      	movs	r0, #0
}
   15af4:	b006      	add	sp, #24
   15af6:	bc04      	pop	{r2}
   15af8:	4691      	mov	r9, r2
   15afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   15afc:	2200      	movs	r2, #0
   15afe:	ab03      	add	r3, sp, #12
   15b00:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15b02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15b04:	2b00      	cmp	r3, #0
   15b06:	d0ef      	beq.n	15ae8 <_http_client_handle_entity+0xb4>
   15b08:	e7e2      	b.n	15ad0 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   15b0a:	484f      	ldr	r0, [pc, #316]	; (15c48 <_http_client_handle_entity+0x214>)
   15b0c:	4b4f      	ldr	r3, [pc, #316]	; (15c4c <_http_client_handle_entity+0x218>)
   15b0e:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   15b10:	2100      	movs	r1, #0
   15b12:	0020      	movs	r0, r4
   15b14:	4b4a      	ldr	r3, [pc, #296]	; (15c40 <_http_client_handle_entity+0x20c>)
   15b16:	4798      	blx	r3
					return 0;
   15b18:	2000      	movs	r0, #0
   15b1a:	e7eb      	b.n	15af4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   15b1c:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   15b1e:	2300      	movs	r3, #0
   15b20:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   15b22:	26e0      	movs	r6, #224	; 0xe0
   15b24:	e00a      	b.n	15b3c <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   15b26:	2341      	movs	r3, #65	; 0x41
   15b28:	5ce3      	ldrb	r3, [r4, r3]
   15b2a:	079b      	lsls	r3, r3, #30
   15b2c:	d51b      	bpl.n	15b66 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   15b2e:	1ca9      	adds	r1, r5, #2
   15b30:	0020      	movs	r0, r4
   15b32:	4b44      	ldr	r3, [pc, #272]	; (15c44 <_http_client_handle_entity+0x210>)
   15b34:	4798      	blx	r3
	} while(module->recved_size > 0);
   15b36:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d073      	beq.n	15c24 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   15b3c:	59a3      	ldr	r3, [r4, r6]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	db30      	blt.n	15ba4 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   15b42:	d116      	bne.n	15b72 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   15b44:	22d8      	movs	r2, #216	; 0xd8
   15b46:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   15b48:	320c      	adds	r2, #12
   15b4a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15b4c:	3ae3      	subs	r2, #227	; 0xe3
   15b4e:	4669      	mov	r1, sp
   15b50:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   15b52:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   15b54:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   15b56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d0e4      	beq.n	15b26 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15b5c:	466a      	mov	r2, sp
   15b5e:	2103      	movs	r1, #3
   15b60:	0020      	movs	r0, r4
   15b62:	4798      	blx	r3
   15b64:	e7df      	b.n	15b26 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   15b66:	2100      	movs	r1, #0
   15b68:	0020      	movs	r0, r4
   15b6a:	4b35      	ldr	r3, [pc, #212]	; (15c40 <_http_client_handle_entity+0x20c>)
   15b6c:	4798      	blx	r3
	return 0;
   15b6e:	2000      	movs	r0, #0
   15b70:	e7c0      	b.n	15af4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   15b72:	42bb      	cmp	r3, r7
   15b74:	dcdf      	bgt.n	15b36 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   15b76:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   15b78:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   15b7a:	2300      	movs	r3, #0
   15b7c:	466a      	mov	r2, sp
   15b7e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   15b80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15b82:	2b00      	cmp	r3, #0
   15b84:	d002      	beq.n	15b8c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   15b86:	2103      	movs	r1, #3
   15b88:	0020      	movs	r0, r4
   15b8a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   15b8c:	59a3      	ldr	r3, [r4, r6]
   15b8e:	1c99      	adds	r1, r3, #2
   15b90:	1869      	adds	r1, r5, r1
   15b92:	0020      	movs	r0, r4
   15b94:	4b2b      	ldr	r3, [pc, #172]	; (15c44 <_http_client_handle_entity+0x210>)
   15b96:	4798      	blx	r3
				length = (int)module->recved_size;
   15b98:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   15b9a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   15b9c:	2301      	movs	r3, #1
   15b9e:	425b      	negs	r3, r3
   15ba0:	51a3      	str	r3, [r4, r6]
   15ba2:	e7c8      	b.n	15b36 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   15ba4:	2300      	movs	r3, #0
   15ba6:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15ba8:	2f00      	cmp	r7, #0
   15baa:	dd04      	ble.n	15bb6 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   15bac:	782b      	ldrb	r3, [r5, #0]
   15bae:	2b0a      	cmp	r3, #10
   15bb0:	d11c      	bne.n	15bec <_http_client_handle_entity+0x1b8>
					buffer++;
   15bb2:	3501      	adds	r5, #1
					length--;
   15bb4:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15bb6:	59a3      	ldr	r3, [r4, r6]
   15bb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15bba:	4293      	cmp	r3, r2
   15bbc:	dc39      	bgt.n	15c32 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   15bbe:	2f00      	cmp	r7, #0
   15bc0:	d1b9      	bne.n	15b36 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   15bc2:	2201      	movs	r2, #1
   15bc4:	4252      	negs	r2, r2
   15bc6:	23e0      	movs	r3, #224	; 0xe0
   15bc8:	50e2      	str	r2, [r4, r3]
   15bca:	e7d0      	b.n	15b6e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   15bcc:	001a      	movs	r2, r3
   15bce:	3a61      	subs	r2, #97	; 0x61
   15bd0:	2a05      	cmp	r2, #5
   15bd2:	d818      	bhi.n	15c06 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   15bd4:	59a2      	ldr	r2, [r4, r6]
   15bd6:	0112      	lsls	r2, r2, #4
   15bd8:	18d3      	adds	r3, r2, r3
   15bda:	3b61      	subs	r3, #97	; 0x61
   15bdc:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15bde:	3501      	adds	r5, #1
   15be0:	3f01      	subs	r7, #1
   15be2:	2f00      	cmp	r7, #0
   15be4:	d020      	beq.n	15c28 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   15be6:	782b      	ldrb	r3, [r5, #0]
   15be8:	2b0a      	cmp	r3, #10
   15bea:	d0e2      	beq.n	15bb2 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   15bec:	464a      	mov	r2, r9
   15bee:	2a00      	cmp	r2, #0
   15bf0:	d1f5      	bne.n	15bde <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   15bf2:	001a      	movs	r2, r3
   15bf4:	3a30      	subs	r2, #48	; 0x30
   15bf6:	2a09      	cmp	r2, #9
   15bf8:	d8e8      	bhi.n	15bcc <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   15bfa:	59a2      	ldr	r2, [r4, r6]
   15bfc:	0112      	lsls	r2, r2, #4
   15bfe:	18d3      	adds	r3, r2, r3
   15c00:	3b30      	subs	r3, #48	; 0x30
   15c02:	51a3      	str	r3, [r4, r6]
   15c04:	e7eb      	b.n	15bde <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   15c06:	001a      	movs	r2, r3
   15c08:	3a41      	subs	r2, #65	; 0x41
   15c0a:	2a05      	cmp	r2, #5
   15c0c:	d805      	bhi.n	15c1a <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   15c0e:	59a2      	ldr	r2, [r4, r6]
   15c10:	0112      	lsls	r2, r2, #4
   15c12:	18d3      	adds	r3, r2, r3
   15c14:	3b41      	subs	r3, #65	; 0x41
   15c16:	51a3      	str	r3, [r4, r6]
   15c18:	e7e1      	b.n	15bde <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   15c1a:	3b3b      	subs	r3, #59	; 0x3b
   15c1c:	425a      	negs	r2, r3
   15c1e:	415a      	adcs	r2, r3
   15c20:	4691      	mov	r9, r2
   15c22:	e7dc      	b.n	15bde <_http_client_handle_entity+0x1aa>
	return 0;
   15c24:	2000      	movs	r0, #0
   15c26:	e765      	b.n	15af4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15c28:	23e0      	movs	r3, #224	; 0xe0
   15c2a:	58e3      	ldr	r3, [r4, r3]
   15c2c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15c2e:	4293      	cmp	r3, r2
   15c30:	ddc7      	ble.n	15bc2 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   15c32:	218b      	movs	r1, #139	; 0x8b
   15c34:	4249      	negs	r1, r1
   15c36:	0020      	movs	r0, r4
   15c38:	4b01      	ldr	r3, [pc, #4]	; (15c40 <_http_client_handle_entity+0x20c>)
   15c3a:	4798      	blx	r3
   15c3c:	e797      	b.n	15b6e <_http_client_handle_entity+0x13a>
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	00014ff9 	.word	0x00014ff9
   15c44:	00015851 	.word	0x00015851
   15c48:	00019d20 	.word	0x00019d20
   15c4c:	0001722d 	.word	0x0001722d

00015c50 <_http_client_handle_response>:
{
   15c50:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   15c52:	23d8      	movs	r3, #216	; 0xd8
   15c54:	58c3      	ldr	r3, [r0, r3]
   15c56:	2b00      	cmp	r3, #0
   15c58:	d003      	beq.n	15c62 <_http_client_handle_response+0x12>
   15c5a:	2b01      	cmp	r3, #1
   15c5c:	d004      	beq.n	15c68 <_http_client_handle_response+0x18>
	return 0;
   15c5e:	2000      	movs	r0, #0
   15c60:	e001      	b.n	15c66 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   15c62:	4b03      	ldr	r3, [pc, #12]	; (15c70 <_http_client_handle_response+0x20>)
   15c64:	4798      	blx	r3
}
   15c66:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   15c68:	4b02      	ldr	r3, [pc, #8]	; (15c74 <_http_client_handle_response+0x24>)
   15c6a:	4798      	blx	r3
   15c6c:	e7fb      	b.n	15c66 <_http_client_handle_response+0x16>
   15c6e:	46c0      	nop			; (mov r8, r8)
   15c70:	00015875 	.word	0x00015875
   15c74:	00015a35 	.word	0x00015a35

00015c78 <_http_client_recved_packet>:
{
   15c78:	b570      	push	{r4, r5, r6, lr}
   15c7a:	0004      	movs	r4, r0
	module->recved_size += read_len;
   15c7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15c7e:	469c      	mov	ip, r3
   15c80:	4461      	add	r1, ip
   15c82:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   15c84:	2358      	movs	r3, #88	; 0x58
   15c86:	5ac3      	ldrh	r3, [r0, r3]
   15c88:	2b00      	cmp	r3, #0
   15c8a:	d105      	bne.n	15c98 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   15c8c:	4d05      	ldr	r5, [pc, #20]	; (15ca4 <_http_client_recved_packet+0x2c>)
   15c8e:	0020      	movs	r0, r4
   15c90:	47a8      	blx	r5
   15c92:	2800      	cmp	r0, #0
   15c94:	d1fb      	bne.n	15c8e <_http_client_recved_packet+0x16>
}
   15c96:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   15c98:	6c81      	ldr	r1, [r0, #72]	; 0x48
   15c9a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   15c9c:	4b02      	ldr	r3, [pc, #8]	; (15ca8 <_http_client_recved_packet+0x30>)
   15c9e:	4798      	blx	r3
   15ca0:	e7f4      	b.n	15c8c <_http_client_recved_packet+0x14>
   15ca2:	46c0      	nop			; (mov r8, r8)
   15ca4:	00015c51 	.word	0x00015c51
   15ca8:	00016025 	.word	0x00016025

00015cac <http_client_socket_event_handler>:
{
   15cac:	b510      	push	{r4, lr}
   15cae:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   15cb0:	0080      	lsls	r0, r0, #2
   15cb2:	4b65      	ldr	r3, [pc, #404]	; (15e48 <http_client_socket_event_handler+0x19c>)
   15cb4:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   15cb6:	2c00      	cmp	r4, #0
   15cb8:	d006      	beq.n	15cc8 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   15cba:	2906      	cmp	r1, #6
   15cbc:	d051      	beq.n	15d62 <http_client_socket_event_handler+0xb6>
   15cbe:	2907      	cmp	r1, #7
   15cc0:	d100      	bne.n	15cc4 <http_client_socket_event_handler+0x18>
   15cc2:	e08a      	b.n	15dda <http_client_socket_event_handler+0x12e>
   15cc4:	2905      	cmp	r1, #5
   15cc6:	d001      	beq.n	15ccc <http_client_socket_event_handler+0x20>
}
   15cc8:	b004      	add	sp, #16
   15cca:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   15ccc:	2301      	movs	r3, #1
   15cce:	56d3      	ldrsb	r3, [r2, r3]
   15cd0:	1e1a      	subs	r2, r3, #0
   15cd2:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   15cd4:	db15      	blt.n	15d02 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   15cd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15cd8:	2b00      	cmp	r3, #0
   15cda:	d003      	beq.n	15ce4 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   15cdc:	aa01      	add	r2, sp, #4
   15cde:	2100      	movs	r1, #0
   15ce0:	0020      	movs	r0, r4
   15ce2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   15ce4:	2303      	movs	r3, #3
   15ce6:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   15ce8:	3355      	adds	r3, #85	; 0x55
   15cea:	5ae2      	ldrh	r2, [r4, r3]
   15cec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   15cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15cf0:	4b56      	ldr	r3, [pc, #344]	; (15e4c <http_client_socket_event_handler+0x1a0>)
   15cf2:	4798      	blx	r3
    		_http_client_recv_packet(module);
   15cf4:	0020      	movs	r0, r4
   15cf6:	4b56      	ldr	r3, [pc, #344]	; (15e50 <http_client_socket_event_handler+0x1a4>)
   15cf8:	4798      	blx	r3
			_http_client_request(module);
   15cfa:	0020      	movs	r0, r4
   15cfc:	4b55      	ldr	r3, [pc, #340]	; (15e54 <http_client_socket_event_handler+0x1a8>)
   15cfe:	4798      	blx	r3
   15d00:	e7e2      	b.n	15cc8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15d02:	330e      	adds	r3, #14
   15d04:	b2d9      	uxtb	r1, r3
   15d06:	290e      	cmp	r1, #14
   15d08:	d81e      	bhi.n	15d48 <http_client_socket_event_handler+0x9c>
   15d0a:	008b      	lsls	r3, r1, #2
   15d0c:	4952      	ldr	r1, [pc, #328]	; (15e58 <http_client_socket_event_handler+0x1ac>)
   15d0e:	58cb      	ldr	r3, [r1, r3]
   15d10:	469f      	mov	pc, r3
			return -ENOENT;
   15d12:	2102      	movs	r1, #2
   15d14:	4249      	negs	r1, r1
   15d16:	e01d      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   15d18:	2170      	movs	r1, #112	; 0x70
   15d1a:	4249      	negs	r1, r1
   15d1c:	e01a      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15d1e:	210c      	movs	r1, #12
   15d20:	4249      	negs	r1, r1
   15d22:	e017      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   15d24:	2116      	movs	r1, #22
   15d26:	4249      	negs	r1, r1
   15d28:	e014      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15d2a:	210c      	movs	r1, #12
   15d2c:	4249      	negs	r1, r1
   15d2e:	e011      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   15d30:	2179      	movs	r1, #121	; 0x79
   15d32:	4249      	negs	r1, r1
   15d34:	e00e      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   15d36:	2168      	movs	r1, #104	; 0x68
   15d38:	4249      	negs	r1, r1
   15d3a:	e00b      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   15d3c:	210b      	movs	r1, #11
   15d3e:	4249      	negs	r1, r1
   15d40:	e008      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   15d42:	2110      	movs	r1, #16
   15d44:	4249      	negs	r1, r1
   15d46:	e005      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   15d48:	2a00      	cmp	r2, #0
   15d4a:	db07      	blt.n	15d5c <http_client_socket_event_handler+0xb0>
			return 0;
   15d4c:	2100      	movs	r1, #0
   15d4e:	e001      	b.n	15d54 <http_client_socket_event_handler+0xa8>
			return -EIO;
   15d50:	2105      	movs	r1, #5
   15d52:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   15d54:	0020      	movs	r0, r4
   15d56:	4b41      	ldr	r3, [pc, #260]	; (15e5c <http_client_socket_event_handler+0x1b0>)
   15d58:	4798      	blx	r3
   15d5a:	e7b5      	b.n	15cc8 <http_client_socket_event_handler+0x1c>
				return -EIO;
   15d5c:	2105      	movs	r1, #5
   15d5e:	4249      	negs	r1, r1
   15d60:	e7f8      	b.n	15d54 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   15d62:	2304      	movs	r3, #4
   15d64:	5ed1      	ldrsh	r1, [r2, r3]
   15d66:	2900      	cmp	r1, #0
   15d68:	dd06      	ble.n	15d78 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   15d6a:	0020      	movs	r0, r4
   15d6c:	4b3c      	ldr	r3, [pc, #240]	; (15e60 <http_client_socket_event_handler+0x1b4>)
   15d6e:	4798      	blx	r3
		_http_client_recv_packet(module);
   15d70:	0020      	movs	r0, r4
   15d72:	4b37      	ldr	r3, [pc, #220]	; (15e50 <http_client_socket_event_handler+0x1a4>)
   15d74:	4798      	blx	r3
		break;
   15d76:	e7a7      	b.n	15cc8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15d78:	000b      	movs	r3, r1
   15d7a:	330e      	adds	r3, #14
   15d7c:	b29a      	uxth	r2, r3
   15d7e:	2a0e      	cmp	r2, #14
   15d80:	d81e      	bhi.n	15dc0 <http_client_socket_event_handler+0x114>
   15d82:	0093      	lsls	r3, r2, #2
   15d84:	4a37      	ldr	r2, [pc, #220]	; (15e64 <http_client_socket_event_handler+0x1b8>)
   15d86:	58d3      	ldr	r3, [r2, r3]
   15d88:	469f      	mov	pc, r3
			return -ENOENT;
   15d8a:	2102      	movs	r1, #2
   15d8c:	4249      	negs	r1, r1
   15d8e:	e01d      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   15d90:	2170      	movs	r1, #112	; 0x70
   15d92:	4249      	negs	r1, r1
   15d94:	e01a      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   15d96:	210c      	movs	r1, #12
   15d98:	4249      	negs	r1, r1
   15d9a:	e017      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EINVAL;
   15d9c:	2116      	movs	r1, #22
   15d9e:	4249      	negs	r1, r1
   15da0:	e014      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   15da2:	210c      	movs	r1, #12
   15da4:	4249      	negs	r1, r1
   15da6:	e011      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   15da8:	2179      	movs	r1, #121	; 0x79
   15daa:	4249      	negs	r1, r1
   15dac:	e00e      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   15dae:	2168      	movs	r1, #104	; 0x68
   15db0:	4249      	negs	r1, r1
   15db2:	e00b      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   15db4:	210b      	movs	r1, #11
   15db6:	4249      	negs	r1, r1
   15db8:	e008      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   15dba:	2110      	movs	r1, #16
   15dbc:	4249      	negs	r1, r1
   15dbe:	e005      	b.n	15dcc <http_client_socket_event_handler+0x120>
			if (err < 0) {
   15dc0:	2900      	cmp	r1, #0
   15dc2:	db07      	blt.n	15dd4 <http_client_socket_event_handler+0x128>
			return 0;
   15dc4:	2100      	movs	r1, #0
   15dc6:	e001      	b.n	15dcc <http_client_socket_event_handler+0x120>
			return -EIO;
   15dc8:	2105      	movs	r1, #5
   15dca:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   15dcc:	0020      	movs	r0, r4
   15dce:	4b23      	ldr	r3, [pc, #140]	; (15e5c <http_client_socket_event_handler+0x1b0>)
   15dd0:	4798      	blx	r3
   15dd2:	e7cd      	b.n	15d70 <http_client_socket_event_handler+0xc4>
				return -EIO;
   15dd4:	2105      	movs	r1, #5
   15dd6:	4249      	negs	r1, r1
   15dd8:	e7f8      	b.n	15dcc <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   15dda:	2300      	movs	r3, #0
   15ddc:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   15dde:	2b00      	cmp	r3, #0
   15de0:	db08      	blt.n	15df4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   15de2:	0020      	movs	r0, r4
   15de4:	4b1b      	ldr	r3, [pc, #108]	; (15e54 <http_client_socket_event_handler+0x1a8>)
   15de6:	4798      	blx	r3
		module->sending = 0;
   15de8:	2241      	movs	r2, #65	; 0x41
   15dea:	5ca3      	ldrb	r3, [r4, r2]
   15dec:	2101      	movs	r1, #1
   15dee:	438b      	bics	r3, r1
   15df0:	54a3      	strb	r3, [r4, r2]
    	break;
   15df2:	e769      	b.n	15cc8 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15df4:	330e      	adds	r3, #14
   15df6:	b29a      	uxth	r2, r3
   15df8:	2a0d      	cmp	r2, #13
   15dfa:	d81e      	bhi.n	15e3a <http_client_socket_event_handler+0x18e>
   15dfc:	0093      	lsls	r3, r2, #2
   15dfe:	4a1a      	ldr	r2, [pc, #104]	; (15e68 <http_client_socket_event_handler+0x1bc>)
   15e00:	58d3      	ldr	r3, [r2, r3]
   15e02:	469f      	mov	pc, r3
			return -ENOENT;
   15e04:	2102      	movs	r1, #2
   15e06:	4249      	negs	r1, r1
   15e08:	e019      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   15e0a:	2170      	movs	r1, #112	; 0x70
   15e0c:	4249      	negs	r1, r1
   15e0e:	e016      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15e10:	210c      	movs	r1, #12
   15e12:	4249      	negs	r1, r1
   15e14:	e013      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EINVAL;
   15e16:	2116      	movs	r1, #22
   15e18:	4249      	negs	r1, r1
   15e1a:	e010      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15e1c:	210c      	movs	r1, #12
   15e1e:	4249      	negs	r1, r1
   15e20:	e00d      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   15e22:	2179      	movs	r1, #121	; 0x79
   15e24:	4249      	negs	r1, r1
   15e26:	e00a      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   15e28:	2168      	movs	r1, #104	; 0x68
   15e2a:	4249      	negs	r1, r1
   15e2c:	e007      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   15e2e:	210b      	movs	r1, #11
   15e30:	4249      	negs	r1, r1
   15e32:	e004      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   15e34:	2110      	movs	r1, #16
   15e36:	4249      	negs	r1, r1
   15e38:	e001      	b.n	15e3e <http_client_socket_event_handler+0x192>
			return -EIO;
   15e3a:	2105      	movs	r1, #5
   15e3c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   15e3e:	0020      	movs	r0, r4
   15e40:	4b06      	ldr	r3, [pc, #24]	; (15e5c <http_client_socket_event_handler+0x1b0>)
   15e42:	4798      	blx	r3
   15e44:	e7d0      	b.n	15de8 <http_client_socket_event_handler+0x13c>
   15e46:	46c0      	nop			; (mov r8, r8)
   15e48:	200007fc 	.word	0x200007fc
   15e4c:	00015ff9 	.word	0x00015ff9
   15e50:	00015819 	.word	0x00015819
   15e54:	00015111 	.word	0x00015111
   15e58:	00019c60 	.word	0x00019c60
   15e5c:	00014ff9 	.word	0x00014ff9
   15e60:	00015c79 	.word	0x00015c79
   15e64:	00019c9c 	.word	0x00019c9c
   15e68:	00019cd8 	.word	0x00019cd8

00015e6c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   15e6c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   15e6e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   15e70:	2200      	movs	r2, #0
   15e72:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   15e74:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   15e76:	9b00      	ldr	r3, [sp, #0]
   15e78:	60c3      	str	r3, [r0, #12]
}
   15e7a:	4770      	bx	lr

00015e7c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   15e7c:	b510      	push	{r4, lr}
   15e7e:	0004      	movs	r4, r0
	if(writer->written > 0) {
   15e80:	6842      	ldr	r2, [r0, #4]
   15e82:	2a00      	cmp	r2, #0
   15e84:	d100      	bne.n	15e88 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   15e86:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   15e88:	6901      	ldr	r1, [r0, #16]
   15e8a:	68c0      	ldr	r0, [r0, #12]
   15e8c:	68a3      	ldr	r3, [r4, #8]
   15e8e:	4798      	blx	r3
		writer->written = 0;
   15e90:	2300      	movs	r3, #0
   15e92:	6063      	str	r3, [r4, #4]
}
   15e94:	e7f7      	b.n	15e86 <stream_writer_send_remain+0xa>
	...

00015e98 <stream_writer_send_8>:
{
   15e98:	b570      	push	{r4, r5, r6, lr}
   15e9a:	0004      	movs	r4, r0
   15e9c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   15e9e:	6803      	ldr	r3, [r0, #0]
   15ea0:	6842      	ldr	r2, [r0, #4]
   15ea2:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   15ea4:	2b00      	cmp	r3, #0
   15ea6:	dd05      	ble.n	15eb4 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   15ea8:	6922      	ldr	r2, [r4, #16]
   15eaa:	6863      	ldr	r3, [r4, #4]
   15eac:	1c59      	adds	r1, r3, #1
   15eae:	6061      	str	r1, [r4, #4]
   15eb0:	54d5      	strb	r5, [r2, r3]
}
   15eb2:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   15eb4:	4b01      	ldr	r3, [pc, #4]	; (15ebc <stream_writer_send_8+0x24>)
   15eb6:	4798      	blx	r3
   15eb8:	e7f6      	b.n	15ea8 <stream_writer_send_8+0x10>
   15eba:	46c0      	nop			; (mov r8, r8)
   15ebc:	00015e7d 	.word	0x00015e7d

00015ec0 <stream_writer_send_buffer>:
{
   15ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ec2:	0006      	movs	r6, r0
   15ec4:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   15ec6:	2a00      	cmp	r2, #0
   15ec8:	d008      	beq.n	15edc <stream_writer_send_buffer+0x1c>
   15eca:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   15ecc:	4f04      	ldr	r7, [pc, #16]	; (15ee0 <stream_writer_send_buffer+0x20>)
   15ece:	2100      	movs	r1, #0
   15ed0:	5661      	ldrsb	r1, [r4, r1]
   15ed2:	0030      	movs	r0, r6
   15ed4:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   15ed6:	3401      	adds	r4, #1
   15ed8:	42a5      	cmp	r5, r4
   15eda:	d1f8      	bne.n	15ece <stream_writer_send_buffer+0xe>
}
   15edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ede:	46c0      	nop			; (mov r8, r8)
   15ee0:	00015e99 	.word	0x00015e99

00015ee4 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   15ee4:	4a02      	ldr	r2, [pc, #8]	; (15ef0 <sw_timer_tcc_callback+0xc>)
   15ee6:	6813      	ldr	r3, [r2, #0]
   15ee8:	3301      	adds	r3, #1
   15eea:	6013      	str	r3, [r2, #0]
}
   15eec:	4770      	bx	lr
   15eee:	46c0      	nop			; (mov r8, r8)
   15ef0:	20000818 	.word	0x20000818

00015ef4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   15ef4:	2364      	movs	r3, #100	; 0x64
   15ef6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   15ef8:	2300      	movs	r3, #0
   15efa:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   15efc:	7043      	strb	r3, [r0, #1]
}
   15efe:	4770      	bx	lr

00015f00 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   15f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f02:	46c6      	mov	lr, r8
   15f04:	b500      	push	{lr}
   15f06:	b0ac      	sub	sp, #176	; 0xb0
   15f08:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   15f0a:	466e      	mov	r6, sp
   15f0c:	4b1d      	ldr	r3, [pc, #116]	; (15f84 <sw_timer_init+0x84>)
   15f0e:	466a      	mov	r2, sp
   15f10:	cb92      	ldmia	r3!, {r1, r4, r7}
   15f12:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   15f14:	886b      	ldrh	r3, [r5, #2]
   15f16:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   15f18:	3014      	adds	r0, #20
   15f1a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   15f1c:	782b      	ldrb	r3, [r5, #0]
   15f1e:	009b      	lsls	r3, r3, #2
   15f20:	5999      	ldr	r1, [r3, r6]
   15f22:	0017      	movs	r7, r2
   15f24:	0010      	movs	r0, r2
   15f26:	4b18      	ldr	r3, [pc, #96]	; (15f88 <sw_timer_init+0x88>)
   15f28:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   15f2a:	2000      	movs	r0, #0
   15f2c:	4b17      	ldr	r3, [pc, #92]	; (15f8c <sw_timer_init+0x8c>)
   15f2e:	4798      	blx	r3
   15f30:	4b17      	ldr	r3, [pc, #92]	; (15f90 <sw_timer_init+0x90>)
   15f32:	7a1b      	ldrb	r3, [r3, #8]
   15f34:	b2db      	uxtb	r3, r3
   15f36:	40d8      	lsrs	r0, r3
   15f38:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   15f3a:	8869      	ldrh	r1, [r5, #2]
   15f3c:	20fa      	movs	r0, #250	; 0xfa
   15f3e:	0200      	lsls	r0, r0, #8
   15f40:	4b14      	ldr	r3, [pc, #80]	; (15f94 <sw_timer_init+0x94>)
   15f42:	4798      	blx	r3
   15f44:	0001      	movs	r1, r0
   15f46:	4640      	mov	r0, r8
   15f48:	4b13      	ldr	r3, [pc, #76]	; (15f98 <sw_timer_init+0x98>)
   15f4a:	4798      	blx	r3
   15f4c:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   15f4e:	2305      	movs	r3, #5
   15f50:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   15f52:	782b      	ldrb	r3, [r5, #0]
   15f54:	009b      	lsls	r3, r3, #2
   15f56:	5999      	ldr	r1, [r3, r6]
   15f58:	003a      	movs	r2, r7
   15f5a:	0020      	movs	r0, r4
   15f5c:	4b0f      	ldr	r3, [pc, #60]	; (15f9c <sw_timer_init+0x9c>)
   15f5e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15f60:	786a      	ldrb	r2, [r5, #1]
   15f62:	3208      	adds	r2, #8
   15f64:	b2d2      	uxtb	r2, r2
   15f66:	490e      	ldr	r1, [pc, #56]	; (15fa0 <sw_timer_init+0xa0>)
   15f68:	0020      	movs	r0, r4
   15f6a:	4b0e      	ldr	r3, [pc, #56]	; (15fa4 <sw_timer_init+0xa4>)
   15f6c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15f6e:	7869      	ldrb	r1, [r5, #1]
   15f70:	3108      	adds	r1, #8
   15f72:	b2c9      	uxtb	r1, r1
   15f74:	0020      	movs	r0, r4
   15f76:	4b0c      	ldr	r3, [pc, #48]	; (15fa8 <sw_timer_init+0xa8>)
   15f78:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   15f7a:	b02c      	add	sp, #176	; 0xb0
   15f7c:	bc04      	pop	{r2}
   15f7e:	4690      	mov	r8, r2
   15f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f82:	46c0      	nop			; (mov r8, r8)
   15f84:	00019e48 	.word	0x00019e48
   15f88:	000115a5 	.word	0x000115a5
   15f8c:	00011301 	.word	0x00011301
   15f90:	40000400 	.word	0x40000400
   15f94:	00016cd1 	.word	0x00016cd1
   15f98:	00016bbd 	.word	0x00016bbd
   15f9c:	000116f1 	.word	0x000116f1
   15fa0:	00015ee5 	.word	0x00015ee5
   15fa4:	00011afd 	.word	0x00011afd
   15fa8:	00011b15 	.word	0x00011b15

00015fac <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   15fac:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   15fae:	2102      	movs	r1, #2
   15fb0:	6893      	ldr	r3, [r2, #8]
   15fb2:	4219      	tst	r1, r3
   15fb4:	d1fc      	bne.n	15fb0 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   15fb6:	6813      	ldr	r3, [r2, #0]
   15fb8:	2102      	movs	r1, #2
   15fba:	430b      	orrs	r3, r1
   15fbc:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   15fbe:	4770      	bx	lr

00015fc0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   15fc0:	b570      	push	{r4, r5, r6, lr}
   15fc2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   15fc4:	7805      	ldrb	r5, [r0, #0]
   15fc6:	07e8      	lsls	r0, r5, #31
   15fc8:	d502      	bpl.n	15fd0 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   15fca:	2001      	movs	r0, #1
   15fcc:	4240      	negs	r0, r0
}
   15fce:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   15fd0:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   15fd2:	0029      	movs	r1, r5
   15fd4:	2002      	movs	r0, #2
   15fd6:	4381      	bics	r1, r0
   15fd8:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   15fda:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   15fdc:	6d61      	ldr	r1, [r4, #84]	; 0x54
   15fde:	0018      	movs	r0, r3
   15fe0:	4b04      	ldr	r3, [pc, #16]	; (15ff4 <sw_timer_register_callback+0x34>)
   15fe2:	4798      	blx	r3
   15fe4:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   15fe6:	7823      	ldrb	r3, [r4, #0]
   15fe8:	2201      	movs	r2, #1
   15fea:	4313      	orrs	r3, r2
   15fec:	7023      	strb	r3, [r4, #0]
			return index;
   15fee:	2000      	movs	r0, #0
   15ff0:	e7ed      	b.n	15fce <sw_timer_register_callback+0xe>
   15ff2:	46c0      	nop			; (mov r8, r8)
   15ff4:	00016bbd 	.word	0x00016bbd

00015ff8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   15ff8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   15ffa:	008b      	lsls	r3, r1, #2
   15ffc:	185d      	adds	r5, r3, r1
   15ffe:	00ad      	lsls	r5, r5, #2
   16000:	5c29      	ldrb	r1, [r5, r0]
   16002:	2602      	movs	r6, #2
   16004:	4331      	orrs	r1, r6
   16006:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   16008:	1944      	adds	r4, r0, r5
   1600a:	6d41      	ldr	r1, [r0, #84]	; 0x54
   1600c:	0010      	movs	r0, r2
   1600e:	4b03      	ldr	r3, [pc, #12]	; (1601c <sw_timer_enable_callback+0x24>)
   16010:	4798      	blx	r3
   16012:	4b03      	ldr	r3, [pc, #12]	; (16020 <sw_timer_enable_callback+0x28>)
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	18c0      	adds	r0, r0, r3
   16018:	6120      	str	r0, [r4, #16]
}
   1601a:	bd70      	pop	{r4, r5, r6, pc}
   1601c:	00016bbd 	.word	0x00016bbd
   16020:	20000818 	.word	0x20000818

00016024 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   16024:	008b      	lsls	r3, r1, #2
   16026:	1859      	adds	r1, r3, r1
   16028:	0089      	lsls	r1, r1, #2
   1602a:	5c0b      	ldrb	r3, [r1, r0]
   1602c:	2202      	movs	r2, #2
   1602e:	4393      	bics	r3, r2
   16030:	540b      	strb	r3, [r1, r0]
}
   16032:	4770      	bx	lr

00016034 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   16034:	b570      	push	{r4, r5, r6, lr}
   16036:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   16038:	7803      	ldrb	r3, [r0, #0]
   1603a:	07db      	lsls	r3, r3, #31
   1603c:	d507      	bpl.n	1604e <sw_timer_task+0x1a>
   1603e:	7803      	ldrb	r3, [r0, #0]
   16040:	079b      	lsls	r3, r3, #30
   16042:	d504      	bpl.n	1604e <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   16044:	4b10      	ldr	r3, [pc, #64]	; (16088 <sw_timer_task+0x54>)
   16046:	681a      	ldr	r2, [r3, #0]
   16048:	6903      	ldr	r3, [r0, #16]
   1604a:	1a9b      	subs	r3, r3, r2
   1604c:	d400      	bmi.n	16050 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   1604e:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   16050:	7803      	ldrb	r3, [r0, #0]
   16052:	075b      	lsls	r3, r3, #29
   16054:	d4fb      	bmi.n	1604e <sw_timer_task+0x1a>
				handler->busy = 1;
   16056:	7803      	ldrb	r3, [r0, #0]
   16058:	2104      	movs	r1, #4
   1605a:	430b      	orrs	r3, r1
   1605c:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   1605e:	68c3      	ldr	r3, [r0, #12]
   16060:	2b00      	cmp	r3, #0
   16062:	d00b      	beq.n	1607c <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   16064:	18d2      	adds	r2, r2, r3
   16066:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   16068:	68a2      	ldr	r2, [r4, #8]
   1606a:	2100      	movs	r1, #0
   1606c:	0020      	movs	r0, r4
   1606e:	6865      	ldr	r5, [r4, #4]
   16070:	47a8      	blx	r5
				handler->busy = 0;
   16072:	7823      	ldrb	r3, [r4, #0]
   16074:	2204      	movs	r2, #4
   16076:	4393      	bics	r3, r2
   16078:	7023      	strb	r3, [r4, #0]
}
   1607a:	e7e8      	b.n	1604e <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   1607c:	7802      	ldrb	r2, [r0, #0]
   1607e:	2102      	movs	r1, #2
   16080:	438a      	bics	r2, r1
   16082:	7002      	strb	r2, [r0, #0]
   16084:	e7f0      	b.n	16068 <sw_timer_task+0x34>
   16086:	46c0      	nop			; (mov r8, r8)
   16088:	20000818 	.word	0x20000818

0001608c <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   1608c:	4b02      	ldr	r3, [pc, #8]	; (16098 <add_state+0xc>)
   1608e:	781a      	ldrb	r2, [r3, #0]
   16090:	4310      	orrs	r0, r2
   16092:	7018      	strb	r0, [r3, #0]
}
   16094:	4770      	bx	lr
   16096:	46c0      	nop			; (mov r8, r8)
   16098:	20000851 	.word	0x20000851

0001609c <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
   1609c:	b570      	push	{r4, r5, r6, lr}
   1609e:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   160a0:	6843      	ldr	r3, [r0, #4]
   160a2:	689a      	ldr	r2, [r3, #8]
   160a4:	6859      	ldr	r1, [r3, #4]
   160a6:	4816      	ldr	r0, [pc, #88]	; (16100 <SubscribeHandler+0x64>)
   160a8:	4d16      	ldr	r5, [pc, #88]	; (16104 <SubscribeHandler+0x68>)
   160aa:	47a8      	blx	r5
	printf(" >> ");
   160ac:	4816      	ldr	r0, [pc, #88]	; (16108 <SubscribeHandler+0x6c>)
   160ae:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
   160b0:	6823      	ldr	r3, [r4, #0]
   160b2:	689a      	ldr	r2, [r3, #8]
   160b4:	68d9      	ldr	r1, [r3, #12]
   160b6:	4815      	ldr	r0, [pc, #84]	; (1610c <SubscribeHandler+0x70>)
   160b8:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
   160ba:	6826      	ldr	r6, [r4, #0]
   160bc:	68f5      	ldr	r5, [r6, #12]
   160be:	6863      	ldr	r3, [r4, #4]
   160c0:	6898      	ldr	r0, [r3, #8]
   160c2:	002a      	movs	r2, r5
   160c4:	4912      	ldr	r1, [pc, #72]	; (16110 <SubscribeHandler+0x74>)
   160c6:	4b13      	ldr	r3, [pc, #76]	; (16114 <SubscribeHandler+0x78>)
   160c8:	4798      	blx	r3
   160ca:	2800      	cmp	r0, #0
   160cc:	d117      	bne.n	160fe <SubscribeHandler+0x62>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
   160ce:	68b4      	ldr	r4, [r6, #8]
   160d0:	002a      	movs	r2, r5
   160d2:	4911      	ldr	r1, [pc, #68]	; (16118 <SubscribeHandler+0x7c>)
   160d4:	0020      	movs	r0, r4
   160d6:	4b0f      	ldr	r3, [pc, #60]	; (16114 <SubscribeHandler+0x78>)
   160d8:	4798      	blx	r3
   160da:	2800      	cmp	r0, #0
   160dc:	d00b      	beq.n	160f6 <SubscribeHandler+0x5a>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
   160de:	002a      	movs	r2, r5
   160e0:	490e      	ldr	r1, [pc, #56]	; (1611c <SubscribeHandler+0x80>)
   160e2:	0020      	movs	r0, r4
   160e4:	4b0b      	ldr	r3, [pc, #44]	; (16114 <SubscribeHandler+0x78>)
   160e6:	4798      	blx	r3
   160e8:	2800      	cmp	r0, #0
   160ea:	d108      	bne.n	160fe <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
   160ec:	2280      	movs	r2, #128	; 0x80
   160ee:	0412      	lsls	r2, r2, #16
   160f0:	4b0b      	ldr	r3, [pc, #44]	; (16120 <SubscribeHandler+0x84>)
   160f2:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
   160f4:	e003      	b.n	160fe <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
   160f6:	2280      	movs	r2, #128	; 0x80
   160f8:	0412      	lsls	r2, r2, #16
   160fa:	4b09      	ldr	r3, [pc, #36]	; (16120 <SubscribeHandler+0x84>)
   160fc:	619a      	str	r2, [r3, #24]
   160fe:	bd70      	pop	{r4, r5, r6, pc}
   16100:	00019e68 	.word	0x00019e68
   16104:	00017111 	.word	0x00017111
   16108:	00019e70 	.word	0x00019e70
   1610c:	00019e78 	.word	0x00019e78
   16110:	00019e80 	.word	0x00019e80
   16114:	000174e5 	.word	0x000174e5
   16118:	00019e88 	.word	0x00019e88
   1611c:	00019e90 	.word	0x00019e90
   16120:	41004400 	.word	0x41004400

00016124 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16124:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   16126:	4b0a      	ldr	r3, [pc, #40]	; (16150 <extint_detection_callback+0x2c>)
   16128:	681a      	ldr	r2, [r3, #0]
   1612a:	3201      	adds	r2, #1
   1612c:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   1612e:	681b      	ldr	r3, [r3, #0]
   16130:	2b28      	cmp	r3, #40	; 0x28
   16132:	d902      	bls.n	1613a <extint_detection_callback+0x16>
   16134:	2201      	movs	r2, #1
   16136:	4b06      	ldr	r3, [pc, #24]	; (16150 <extint_detection_callback+0x2c>)
   16138:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1613a:	4b05      	ldr	r3, [pc, #20]	; (16150 <extint_detection_callback+0x2c>)
   1613c:	681b      	ldr	r3, [r3, #0]
   1613e:	4a05      	ldr	r2, [pc, #20]	; (16154 <extint_detection_callback+0x30>)
   16140:	213f      	movs	r1, #63	; 0x3f
   16142:	4805      	ldr	r0, [pc, #20]	; (16158 <extint_detection_callback+0x34>)
   16144:	4c05      	ldr	r4, [pc, #20]	; (1615c <extint_detection_callback+0x38>)
   16146:	47a0      	blx	r4
	isPressed = true;
   16148:	2201      	movs	r2, #1
   1614a:	4b05      	ldr	r3, [pc, #20]	; (16160 <extint_detection_callback+0x3c>)
   1614c:	701a      	strb	r2, [r3, #0]
	
}
   1614e:	bd10      	pop	{r4, pc}
   16150:	2000014c 	.word	0x2000014c
   16154:	00019e98 	.word	0x00019e98
   16158:	20000010 	.word	0x20000010
   1615c:	000173d1 	.word	0x000173d1
   16160:	20000aac 	.word	0x20000aac

00016164 <socket_resolve_handler>:
{
   16164:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   16166:	4b01      	ldr	r3, [pc, #4]	; (1616c <socket_resolve_handler+0x8>)
   16168:	4798      	blx	r3
}
   1616a:	bd10      	pop	{r4, pc}
   1616c:	00014431 	.word	0x00014431

00016170 <socket_event_handler>:
{
   16170:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   16172:	4b01      	ldr	r3, [pc, #4]	; (16178 <socket_event_handler+0x8>)
   16174:	4798      	blx	r3
}
   16176:	bd10      	pop	{r4, pc}
   16178:	00014425 	.word	0x00014425

0001617c <start_download>:
{
   1617c:	b510      	push	{r4, lr}
   1617e:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   16180:	4b18      	ldr	r3, [pc, #96]	; (161e4 <start_download+0x68>)
   16182:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   16184:	07da      	lsls	r2, r3, #31
   16186:	d514      	bpl.n	161b2 <start_download+0x36>
	if (!is_state_set(WIFI_CONNECTED)) {
   16188:	079a      	lsls	r2, r3, #30
   1618a:	d517      	bpl.n	161bc <start_download+0x40>
	if (is_state_set(GET_REQUESTED)) {
   1618c:	075a      	lsls	r2, r3, #29
   1618e:	d419      	bmi.n	161c4 <start_download+0x48>
	if (is_state_set(DOWNLOADING)) {
   16190:	071b      	lsls	r3, r3, #28
   16192:	d41b      	bmi.n	161cc <start_download+0x50>
	printf("start_download: sending HTTP request...\r\n");
   16194:	4814      	ldr	r0, [pc, #80]	; (161e8 <start_download+0x6c>)
   16196:	4b15      	ldr	r3, [pc, #84]	; (161ec <start_download+0x70>)
   16198:	4798      	blx	r3
	if(second_file == 0){
   1619a:	4b15      	ldr	r3, [pc, #84]	; (161f0 <start_download+0x74>)
   1619c:	781b      	ldrb	r3, [r3, #0]
   1619e:	2b00      	cmp	r3, #0
   161a0:	d018      	beq.n	161d4 <start_download+0x58>
		http_client_send_request(&http_client_module_inst, PARAMS_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   161a2:	2300      	movs	r3, #0
   161a4:	9300      	str	r3, [sp, #0]
   161a6:	2201      	movs	r2, #1
   161a8:	4912      	ldr	r1, [pc, #72]	; (161f4 <start_download+0x78>)
   161aa:	4813      	ldr	r0, [pc, #76]	; (161f8 <start_download+0x7c>)
   161ac:	4c13      	ldr	r4, [pc, #76]	; (161fc <start_download+0x80>)
   161ae:	47a0      	blx	r4
   161b0:	e002      	b.n	161b8 <start_download+0x3c>
		printf("start_download: MMC storage not ready.\r\n");
   161b2:	4813      	ldr	r0, [pc, #76]	; (16200 <start_download+0x84>)
   161b4:	4b0d      	ldr	r3, [pc, #52]	; (161ec <start_download+0x70>)
   161b6:	4798      	blx	r3
}
   161b8:	b002      	add	sp, #8
   161ba:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
   161bc:	4811      	ldr	r0, [pc, #68]	; (16204 <start_download+0x88>)
   161be:	4b0b      	ldr	r3, [pc, #44]	; (161ec <start_download+0x70>)
   161c0:	4798      	blx	r3
		return;
   161c2:	e7f9      	b.n	161b8 <start_download+0x3c>
		printf("start_download: request is sent already.\r\n");
   161c4:	4810      	ldr	r0, [pc, #64]	; (16208 <start_download+0x8c>)
   161c6:	4b09      	ldr	r3, [pc, #36]	; (161ec <start_download+0x70>)
   161c8:	4798      	blx	r3
		return;
   161ca:	e7f5      	b.n	161b8 <start_download+0x3c>
		printf("start_download: running download already.\r\n");
   161cc:	480f      	ldr	r0, [pc, #60]	; (1620c <start_download+0x90>)
   161ce:	4b07      	ldr	r3, [pc, #28]	; (161ec <start_download+0x70>)
   161d0:	4798      	blx	r3
		return;
   161d2:	e7f1      	b.n	161b8 <start_download+0x3c>
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   161d4:	9300      	str	r3, [sp, #0]
   161d6:	2201      	movs	r2, #1
   161d8:	490d      	ldr	r1, [pc, #52]	; (16210 <start_download+0x94>)
   161da:	4807      	ldr	r0, [pc, #28]	; (161f8 <start_download+0x7c>)
   161dc:	4c07      	ldr	r4, [pc, #28]	; (161fc <start_download+0x80>)
   161de:	47a0      	blx	r4
   161e0:	e7ea      	b.n	161b8 <start_download+0x3c>
   161e2:	46c0      	nop			; (mov r8, r8)
   161e4:	20000851 	.word	0x20000851
   161e8:	0001a498 	.word	0x0001a498
   161ec:	0001722d 	.word	0x0001722d
   161f0:	20000eec 	.word	0x20000eec
   161f4:	0001a508 	.word	0x0001a508
   161f8:	20001550 	.word	0x20001550
   161fc:	000155b1 	.word	0x000155b1
   16200:	0001a3ec 	.word	0x0001a3ec
   16204:	0001a414 	.word	0x0001a414
   16208:	0001a440 	.word	0x0001a440
   1620c:	0001a46c 	.word	0x0001a46c
   16210:	0001a4c4 	.word	0x0001a4c4

00016214 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   16214:	b570      	push	{r4, r5, r6, lr}
   16216:	b082      	sub	sp, #8
   16218:	0005      	movs	r5, r0
   1621a:	000e      	movs	r6, r1
	uint16_t temp = 0;
   1621c:	2200      	movs	r2, #0
   1621e:	466b      	mov	r3, sp
   16220:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   16222:	4c06      	ldr	r4, [pc, #24]	; (1623c <usart_serial_getchar+0x28>)
   16224:	466b      	mov	r3, sp
   16226:	1d99      	adds	r1, r3, #6
   16228:	0028      	movs	r0, r5
   1622a:	47a0      	blx	r4
   1622c:	2800      	cmp	r0, #0
   1622e:	d1f9      	bne.n	16224 <usart_serial_getchar+0x10>

	*c = temp;
   16230:	466b      	mov	r3, sp
   16232:	3306      	adds	r3, #6
   16234:	881b      	ldrh	r3, [r3, #0]
   16236:	7033      	strb	r3, [r6, #0]
}
   16238:	b002      	add	sp, #8
   1623a:	bd70      	pop	{r4, r5, r6, pc}
   1623c:	00010acd 	.word	0x00010acd

00016240 <usart_serial_putchar>:
{
   16240:	b570      	push	{r4, r5, r6, lr}
   16242:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   16244:	b28c      	uxth	r4, r1
   16246:	4e03      	ldr	r6, [pc, #12]	; (16254 <usart_serial_putchar+0x14>)
   16248:	0021      	movs	r1, r4
   1624a:	0028      	movs	r0, r5
   1624c:	47b0      	blx	r6
   1624e:	2800      	cmp	r0, #0
   16250:	d1fa      	bne.n	16248 <usart_serial_putchar+0x8>
}
   16252:	bd70      	pop	{r4, r5, r6, pc}
   16254:	00010aa1 	.word	0x00010aa1

00016258 <store_file_packet>:
{
   16258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1625a:	b083      	sub	sp, #12
   1625c:	0005      	movs	r5, r0
   1625e:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   16260:	2800      	cmp	r0, #0
   16262:	d010      	beq.n	16286 <store_file_packet+0x2e>
   16264:	2900      	cmp	r1, #0
   16266:	d00e      	beq.n	16286 <store_file_packet+0x2e>
	return ((down_state & mask) != 0);
   16268:	4b3b      	ldr	r3, [pc, #236]	; (16358 <store_file_packet+0x100>)
   1626a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   1626c:	071b      	lsls	r3, r3, #28
   1626e:	d432      	bmi.n	162d6 <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16270:	4b3a      	ldr	r3, [pc, #232]	; (1635c <store_file_packet+0x104>)
   16272:	2230      	movs	r2, #48	; 0x30
   16274:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   16276:	320a      	adds	r2, #10
   16278:	705a      	strb	r2, [r3, #1]
		if(second_file == 0){
   1627a:	4b39      	ldr	r3, [pc, #228]	; (16360 <store_file_packet+0x108>)
   1627c:	781b      	ldrb	r3, [r3, #0]
   1627e:	2b00      	cmp	r3, #0
   16280:	d067      	beq.n	16352 <store_file_packet+0xfa>
			cp = (char *)(PARAMS_HTTP_FILE_URL + strlen(PARAMS_HTTP_FILE_URL));
   16282:	4c38      	ldr	r4, [pc, #224]	; (16364 <store_file_packet+0x10c>)
   16284:	e005      	b.n	16292 <store_file_packet+0x3a>
		printf("store_file_packet: empty data.\r\n");
   16286:	4838      	ldr	r0, [pc, #224]	; (16368 <store_file_packet+0x110>)
   16288:	4b38      	ldr	r3, [pc, #224]	; (1636c <store_file_packet+0x114>)
   1628a:	4798      	blx	r3
}
   1628c:	b003      	add	sp, #12
   1628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   16290:	0004      	movs	r4, r0
   16292:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   16294:	7803      	ldrb	r3, [r0, #0]
   16296:	2b2f      	cmp	r3, #47	; 0x2f
   16298:	d1fa      	bne.n	16290 <store_file_packet+0x38>
		if (strlen(cp) > 1) {
   1629a:	4b35      	ldr	r3, [pc, #212]	; (16370 <store_file_packet+0x118>)
   1629c:	4798      	blx	r3
   1629e:	2801      	cmp	r0, #1
   162a0:	d92d      	bls.n	162fe <store_file_packet+0xa6>
			strcpy(&save_file_name[2], cp);
   162a2:	4f2e      	ldr	r7, [pc, #184]	; (1635c <store_file_packet+0x104>)
   162a4:	1cb8      	adds	r0, r7, #2
   162a6:	0021      	movs	r1, r4
   162a8:	4b32      	ldr	r3, [pc, #200]	; (16374 <store_file_packet+0x11c>)
   162aa:	4798      	blx	r3
		f_open(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   162ac:	22fa      	movs	r2, #250	; 0xfa
   162ae:	0039      	movs	r1, r7
   162b0:	4831      	ldr	r0, [pc, #196]	; (16378 <store_file_packet+0x120>)
   162b2:	4c32      	ldr	r4, [pc, #200]	; (1637c <store_file_packet+0x124>)
   162b4:	47a0      	blx	r4
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   162b6:	0039      	movs	r1, r7
   162b8:	4831      	ldr	r0, [pc, #196]	; (16380 <store_file_packet+0x128>)
   162ba:	4b32      	ldr	r3, [pc, #200]	; (16384 <store_file_packet+0x12c>)
   162bc:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   162be:	220a      	movs	r2, #10
   162c0:	0039      	movs	r1, r7
   162c2:	482d      	ldr	r0, [pc, #180]	; (16378 <store_file_packet+0x120>)
   162c4:	47a0      	blx	r4
		if (ret != FR_OK) {
   162c6:	2800      	cmp	r0, #0
   162c8:	d120      	bne.n	1630c <store_file_packet+0xb4>
		received_file_size = 0;
   162ca:	2200      	movs	r2, #0
   162cc:	4b2e      	ldr	r3, [pc, #184]	; (16388 <store_file_packet+0x130>)
   162ce:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   162d0:	2008      	movs	r0, #8
   162d2:	4b2e      	ldr	r3, [pc, #184]	; (1638c <store_file_packet+0x134>)
   162d4:	4798      	blx	r3
		UINT wsize = 0;
   162d6:	2300      	movs	r3, #0
   162d8:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   162da:	ab01      	add	r3, sp, #4
   162dc:	0032      	movs	r2, r6
   162de:	0029      	movs	r1, r5
   162e0:	4825      	ldr	r0, [pc, #148]	; (16378 <store_file_packet+0x120>)
   162e2:	4c2b      	ldr	r4, [pc, #172]	; (16390 <store_file_packet+0x138>)
   162e4:	47a0      	blx	r4
		if (ret != FR_OK) {
   162e6:	2800      	cmp	r0, #0
   162e8:	d015      	beq.n	16316 <store_file_packet+0xbe>
			f_close(&file_object);
   162ea:	4823      	ldr	r0, [pc, #140]	; (16378 <store_file_packet+0x120>)
   162ec:	4b29      	ldr	r3, [pc, #164]	; (16394 <store_file_packet+0x13c>)
   162ee:	4798      	blx	r3
			add_state(CANCELED);
   162f0:	2020      	movs	r0, #32
   162f2:	4b26      	ldr	r3, [pc, #152]	; (1638c <store_file_packet+0x134>)
   162f4:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   162f6:	4828      	ldr	r0, [pc, #160]	; (16398 <store_file_packet+0x140>)
   162f8:	4b1c      	ldr	r3, [pc, #112]	; (1636c <store_file_packet+0x114>)
   162fa:	4798      	blx	r3
			return;
   162fc:	e7c6      	b.n	1628c <store_file_packet+0x34>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   162fe:	4827      	ldr	r0, [pc, #156]	; (1639c <store_file_packet+0x144>)
   16300:	4b1a      	ldr	r3, [pc, #104]	; (1636c <store_file_packet+0x114>)
   16302:	4798      	blx	r3
			add_state(CANCELED);
   16304:	2020      	movs	r0, #32
   16306:	4b21      	ldr	r3, [pc, #132]	; (1638c <store_file_packet+0x134>)
   16308:	4798      	blx	r3
			return;
   1630a:	e7bf      	b.n	1628c <store_file_packet+0x34>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   1630c:	0001      	movs	r1, r0
   1630e:	4824      	ldr	r0, [pc, #144]	; (163a0 <store_file_packet+0x148>)
   16310:	4b1c      	ldr	r3, [pc, #112]	; (16384 <store_file_packet+0x12c>)
   16312:	4798      	blx	r3
			return;
   16314:	e7ba      	b.n	1628c <store_file_packet+0x34>
		received_file_size += wsize;
   16316:	4c1c      	ldr	r4, [pc, #112]	; (16388 <store_file_packet+0x130>)
   16318:	6823      	ldr	r3, [r4, #0]
   1631a:	9a01      	ldr	r2, [sp, #4]
   1631c:	4694      	mov	ip, r2
   1631e:	4463      	add	r3, ip
   16320:	0019      	movs	r1, r3
   16322:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16324:	4d1f      	ldr	r5, [pc, #124]	; (163a4 <store_file_packet+0x14c>)
   16326:	682a      	ldr	r2, [r5, #0]
   16328:	481f      	ldr	r0, [pc, #124]	; (163a8 <store_file_packet+0x150>)
   1632a:	4b16      	ldr	r3, [pc, #88]	; (16384 <store_file_packet+0x12c>)
   1632c:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   1632e:	6822      	ldr	r2, [r4, #0]
   16330:	682b      	ldr	r3, [r5, #0]
   16332:	429a      	cmp	r2, r3
   16334:	d3aa      	bcc.n	1628c <store_file_packet+0x34>
			f_close(&file_object);
   16336:	4810      	ldr	r0, [pc, #64]	; (16378 <store_file_packet+0x120>)
   16338:	4b16      	ldr	r3, [pc, #88]	; (16394 <store_file_packet+0x13c>)
   1633a:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   1633c:	481b      	ldr	r0, [pc, #108]	; (163ac <store_file_packet+0x154>)
   1633e:	4b0b      	ldr	r3, [pc, #44]	; (1636c <store_file_packet+0x114>)
   16340:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16342:	2280      	movs	r2, #128	; 0x80
   16344:	0412      	lsls	r2, r2, #16
   16346:	4b1a      	ldr	r3, [pc, #104]	; (163b0 <store_file_packet+0x158>)
   16348:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   1634a:	2010      	movs	r0, #16
   1634c:	4b0f      	ldr	r3, [pc, #60]	; (1638c <store_file_packet+0x134>)
   1634e:	4798      	blx	r3
			return;
   16350:	e79c      	b.n	1628c <store_file_packet+0x34>
			cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16352:	4c18      	ldr	r4, [pc, #96]	; (163b4 <store_file_packet+0x15c>)
   16354:	e79d      	b.n	16292 <store_file_packet+0x3a>
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	20000851 	.word	0x20000851
   1635c:	20000050 	.word	0x20000050
   16360:	20000eec 	.word	0x20000eec
   16364:	0001a546 	.word	0x0001a546
   16368:	0001a548 	.word	0x0001a548
   1636c:	0001722d 	.word	0x0001722d
   16370:	000174d7 	.word	0x000174d7
   16374:	0001748d 	.word	0x0001748d
   16378:	20000a84 	.word	0x20000a84
   1637c:	000133a5 	.word	0x000133a5
   16380:	0001a568 	.word	0x0001a568
   16384:	00017111 	.word	0x00017111
   16388:	20000ee8 	.word	0x20000ee8
   1638c:	0001608d 	.word	0x0001608d
   16390:	0001352d 	.word	0x0001352d
   16394:	000137f1 	.word	0x000137f1
   16398:	0001a604 	.word	0x0001a604
   1639c:	0001a590 	.word	0x0001a590
   163a0:	0001a5d0 	.word	0x0001a5d0
   163a4:	20000aa8 	.word	0x20000aa8
   163a8:	0001a640 	.word	0x0001a640
   163ac:	0001a674 	.word	0x0001a674
   163b0:	41004400 	.word	0x41004400
   163b4:	0001a505 	.word	0x0001a505

000163b8 <mqtt_callback>:
{
   163b8:	b570      	push	{r4, r5, r6, lr}
   163ba:	b086      	sub	sp, #24
   163bc:	0004      	movs	r4, r0
	switch (type) {
   163be:	2901      	cmp	r1, #1
   163c0:	d02c      	beq.n	1641c <mqtt_callback+0x64>
   163c2:	2905      	cmp	r1, #5
   163c4:	d040      	beq.n	16448 <mqtt_callback+0x90>
   163c6:	2900      	cmp	r1, #0
   163c8:	d001      	beq.n	163ce <mqtt_callback+0x16>
}
   163ca:	b006      	add	sp, #24
   163cc:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   163ce:	6813      	ldr	r3, [r2, #0]
   163d0:	2b00      	cmp	r3, #0
   163d2:	db19      	blt.n	16408 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   163d4:	4821      	ldr	r0, [pc, #132]	; (1645c <mqtt_callback+0xa4>)
   163d6:	4b22      	ldr	r3, [pc, #136]	; (16460 <mqtt_callback+0xa8>)
   163d8:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   163da:	4a22      	ldr	r2, [pc, #136]	; (16464 <mqtt_callback+0xac>)
   163dc:	2300      	movs	r3, #0
   163de:	9305      	str	r3, [sp, #20]
   163e0:	9304      	str	r3, [sp, #16]
   163e2:	9303      	str	r3, [sp, #12]
   163e4:	9302      	str	r3, [sp, #8]
   163e6:	9301      	str	r3, [sp, #4]
   163e8:	9200      	str	r2, [sp, #0]
   163ea:	4b1f      	ldr	r3, [pc, #124]	; (16468 <mqtt_callback+0xb0>)
   163ec:	2101      	movs	r1, #1
   163ee:	0020      	movs	r0, r4
   163f0:	4c1e      	ldr	r4, [pc, #120]	; (1646c <mqtt_callback+0xb4>)
   163f2:	47a0      	blx	r4
   163f4:	2800      	cmp	r0, #0
   163f6:	d003      	beq.n	16400 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   163f8:	481d      	ldr	r0, [pc, #116]	; (16470 <mqtt_callback+0xb8>)
   163fa:	4b1e      	ldr	r3, [pc, #120]	; (16474 <mqtt_callback+0xbc>)
   163fc:	4798      	blx	r3
   163fe:	e7e4      	b.n	163ca <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   16400:	481d      	ldr	r0, [pc, #116]	; (16478 <mqtt_callback+0xc0>)
   16402:	4b1c      	ldr	r3, [pc, #112]	; (16474 <mqtt_callback+0xbc>)
   16404:	4798      	blx	r3
   16406:	e7e0      	b.n	163ca <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16408:	4d1c      	ldr	r5, [pc, #112]	; (1647c <mqtt_callback+0xc4>)
   1640a:	0029      	movs	r1, r5
   1640c:	481c      	ldr	r0, [pc, #112]	; (16480 <mqtt_callback+0xc8>)
   1640e:	4b14      	ldr	r3, [pc, #80]	; (16460 <mqtt_callback+0xa8>)
   16410:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16412:	0029      	movs	r1, r5
   16414:	0020      	movs	r0, r4
   16416:	4b1b      	ldr	r3, [pc, #108]	; (16484 <mqtt_callback+0xcc>)
   16418:	4798      	blx	r3
   1641a:	e7d6      	b.n	163ca <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1641c:	7811      	ldrb	r1, [r2, #0]
   1641e:	2900      	cmp	r1, #0
   16420:	d10e      	bne.n	16440 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
   16422:	4e19      	ldr	r6, [pc, #100]	; (16488 <mqtt_callback+0xd0>)
   16424:	0033      	movs	r3, r6
   16426:	2202      	movs	r2, #2
   16428:	4918      	ldr	r1, [pc, #96]	; (1648c <mqtt_callback+0xd4>)
   1642a:	4d19      	ldr	r5, [pc, #100]	; (16490 <mqtt_callback+0xd8>)
   1642c:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   1642e:	0033      	movs	r3, r6
   16430:	2202      	movs	r2, #2
   16432:	4918      	ldr	r1, [pc, #96]	; (16494 <mqtt_callback+0xdc>)
   16434:	0020      	movs	r0, r4
   16436:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   16438:	4817      	ldr	r0, [pc, #92]	; (16498 <mqtt_callback+0xe0>)
   1643a:	4b0e      	ldr	r3, [pc, #56]	; (16474 <mqtt_callback+0xbc>)
   1643c:	4798      	blx	r3
   1643e:	e7c4      	b.n	163ca <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16440:	4816      	ldr	r0, [pc, #88]	; (1649c <mqtt_callback+0xe4>)
   16442:	4b07      	ldr	r3, [pc, #28]	; (16460 <mqtt_callback+0xa8>)
   16444:	4798      	blx	r3
   16446:	e7c0      	b.n	163ca <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   16448:	4815      	ldr	r0, [pc, #84]	; (164a0 <mqtt_callback+0xe8>)
   1644a:	4b0a      	ldr	r3, [pc, #40]	; (16474 <mqtt_callback+0xbc>)
   1644c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   1644e:	4915      	ldr	r1, [pc, #84]	; (164a4 <mqtt_callback+0xec>)
   16450:	2231      	movs	r2, #49	; 0x31
   16452:	5c8b      	ldrb	r3, [r1, r2]
   16454:	2002      	movs	r0, #2
   16456:	4383      	bics	r3, r0
   16458:	548b      	strb	r3, [r1, r2]
}
   1645a:	e7b6      	b.n	163ca <mqtt_callback+0x12>
   1645c:	0001a2a4 	.word	0x0001a2a4
   16460:	00017111 	.word	0x00017111
   16464:	0001a2d0 	.word	0x0001a2d0
   16468:	0001a2c0 	.word	0x0001a2c0
   1646c:	00014469 	.word	0x00014469
   16470:	0001a2dc 	.word	0x0001a2dc
   16474:	0001722d 	.word	0x0001722d
   16478:	0001a304 	.word	0x0001a304
   1647c:	0001a290 	.word	0x0001a290
   16480:	0001a320 	.word	0x0001a320
   16484:	0001443d 	.word	0x0001443d
   16488:	0001609d 	.word	0x0001609d
   1648c:	0001a358 	.word	0x0001a358
   16490:	000145c9 	.word	0x000145c9
   16494:	00019e80 	.word	0x00019e80
   16498:	0001a364 	.word	0x0001a364
   1649c:	0001a374 	.word	0x0001a374
   164a0:	0001a3a8 	.word	0x0001a3a8
   164a4:	2000081c 	.word	0x2000081c

000164a8 <resolve_cb>:
{
   164a8:	b570      	push	{r4, r5, r6, lr}
   164aa:	b082      	sub	sp, #8
   164ac:	0005      	movs	r5, r0
   164ae:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   164b0:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   164b2:	21ff      	movs	r1, #255	; 0xff
   164b4:	400b      	ands	r3, r1
   164b6:	000a      	movs	r2, r1
   164b8:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   164ba:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   164bc:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   164be:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   164c0:	4001      	ands	r1, r0
   164c2:	9100      	str	r1, [sp, #0]
   164c4:	0029      	movs	r1, r5
   164c6:	4804      	ldr	r0, [pc, #16]	; (164d8 <resolve_cb+0x30>)
   164c8:	4e04      	ldr	r6, [pc, #16]	; (164dc <resolve_cb+0x34>)
   164ca:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   164cc:	0021      	movs	r1, r4
   164ce:	0028      	movs	r0, r5
   164d0:	4b03      	ldr	r3, [pc, #12]	; (164e0 <resolve_cb+0x38>)
   164d2:	4798      	blx	r3
}
   164d4:	b002      	add	sp, #8
   164d6:	bd70      	pop	{r4, r5, r6, pc}
   164d8:	0001a3bc 	.word	0x0001a3bc
   164dc:	00017111 	.word	0x00017111
   164e0:	00015081 	.word	0x00015081

000164e4 <socket_cb>:
{
   164e4:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   164e6:	4b01      	ldr	r3, [pc, #4]	; (164ec <socket_cb+0x8>)
   164e8:	4798      	blx	r3
}
   164ea:	bd10      	pop	{r4, pc}
   164ec:	00015cad 	.word	0x00015cad

000164f0 <http_client_callback>:
{
   164f0:	b510      	push	{r4, lr}
   164f2:	0014      	movs	r4, r2
	switch (type) {
   164f4:	2904      	cmp	r1, #4
   164f6:	d806      	bhi.n	16506 <http_client_callback+0x16>
   164f8:	0089      	lsls	r1, r1, #2
   164fa:	4b2a      	ldr	r3, [pc, #168]	; (165a4 <http_client_callback+0xb4>)
   164fc:	585b      	ldr	r3, [r3, r1]
   164fe:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16500:	4829      	ldr	r0, [pc, #164]	; (165a8 <http_client_callback+0xb8>)
   16502:	4b2a      	ldr	r3, [pc, #168]	; (165ac <http_client_callback+0xbc>)
   16504:	4798      	blx	r3
}
   16506:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   16508:	4829      	ldr	r0, [pc, #164]	; (165b0 <http_client_callback+0xc0>)
   1650a:	4b28      	ldr	r3, [pc, #160]	; (165ac <http_client_callback+0xbc>)
   1650c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   1650e:	2004      	movs	r0, #4
   16510:	4b28      	ldr	r3, [pc, #160]	; (165b4 <http_client_callback+0xc4>)
   16512:	4798      	blx	r3
		break;
   16514:	e7f7      	b.n	16506 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   16516:	8811      	ldrh	r1, [r2, #0]
   16518:	6852      	ldr	r2, [r2, #4]
   1651a:	4827      	ldr	r0, [pc, #156]	; (165b8 <http_client_callback+0xc8>)
   1651c:	4b27      	ldr	r3, [pc, #156]	; (165bc <http_client_callback+0xcc>)
   1651e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   16520:	8823      	ldrh	r3, [r4, #0]
   16522:	2bc8      	cmp	r3, #200	; 0xc8
   16524:	d10f      	bne.n	16546 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   16526:	6861      	ldr	r1, [r4, #4]
   16528:	4b25      	ldr	r3, [pc, #148]	; (165c0 <http_client_callback+0xd0>)
   1652a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   1652c:	2200      	movs	r2, #0
   1652e:	4b25      	ldr	r3, [pc, #148]	; (165c4 <http_client_callback+0xd4>)
   16530:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16532:	4b25      	ldr	r3, [pc, #148]	; (165c8 <http_client_callback+0xd8>)
   16534:	4299      	cmp	r1, r3
   16536:	d8e6      	bhi.n	16506 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16538:	68a0      	ldr	r0, [r4, #8]
   1653a:	4b24      	ldr	r3, [pc, #144]	; (165cc <http_client_callback+0xdc>)
   1653c:	4798      	blx	r3
			add_state(COMPLETED);
   1653e:	2010      	movs	r0, #16
   16540:	4b1c      	ldr	r3, [pc, #112]	; (165b4 <http_client_callback+0xc4>)
   16542:	4798      	blx	r3
   16544:	e7df      	b.n	16506 <http_client_callback+0x16>
			add_state(CANCELED);
   16546:	2020      	movs	r0, #32
   16548:	4b1a      	ldr	r3, [pc, #104]	; (165b4 <http_client_callback+0xc4>)
   1654a:	4798      	blx	r3
			return;
   1654c:	e7db      	b.n	16506 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   1654e:	6811      	ldr	r1, [r2, #0]
   16550:	6850      	ldr	r0, [r2, #4]
   16552:	4b1e      	ldr	r3, [pc, #120]	; (165cc <http_client_callback+0xdc>)
   16554:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   16556:	7a23      	ldrb	r3, [r4, #8]
   16558:	2b00      	cmp	r3, #0
   1655a:	d0d4      	beq.n	16506 <http_client_callback+0x16>
			add_state(COMPLETED);
   1655c:	2010      	movs	r0, #16
   1655e:	4b15      	ldr	r3, [pc, #84]	; (165b4 <http_client_callback+0xc4>)
   16560:	4798      	blx	r3
   16562:	e7d0      	b.n	16506 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16564:	6811      	ldr	r1, [r2, #0]
   16566:	481a      	ldr	r0, [pc, #104]	; (165d0 <http_client_callback+0xe0>)
   16568:	4b14      	ldr	r3, [pc, #80]	; (165bc <http_client_callback+0xcc>)
   1656a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   1656c:	6823      	ldr	r3, [r4, #0]
   1656e:	330b      	adds	r3, #11
   16570:	d1c9      	bne.n	16506 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   16572:	4b18      	ldr	r3, [pc, #96]	; (165d4 <http_client_callback+0xe4>)
   16574:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   16576:	071b      	lsls	r3, r3, #28
   16578:	d406      	bmi.n	16588 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   1657a:	4b16      	ldr	r3, [pc, #88]	; (165d4 <http_client_callback+0xe4>)
   1657c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   1657e:	075a      	lsls	r2, r3, #29
   16580:	d40b      	bmi.n	1659a <http_client_callback+0xaa>
			start_download();
   16582:	4b15      	ldr	r3, [pc, #84]	; (165d8 <http_client_callback+0xe8>)
   16584:	4798      	blx	r3
   16586:	e7be      	b.n	16506 <http_client_callback+0x16>
				f_close(&file_object);
   16588:	4814      	ldr	r0, [pc, #80]	; (165dc <http_client_callback+0xec>)
   1658a:	4b15      	ldr	r3, [pc, #84]	; (165e0 <http_client_callback+0xf0>)
   1658c:	4798      	blx	r3
	down_state &= ~mask;
   1658e:	4a11      	ldr	r2, [pc, #68]	; (165d4 <http_client_callback+0xe4>)
   16590:	7813      	ldrb	r3, [r2, #0]
   16592:	2108      	movs	r1, #8
   16594:	438b      	bics	r3, r1
   16596:	7013      	strb	r3, [r2, #0]
   16598:	e7ef      	b.n	1657a <http_client_callback+0x8a>
   1659a:	2204      	movs	r2, #4
   1659c:	4393      	bics	r3, r2
   1659e:	4a0d      	ldr	r2, [pc, #52]	; (165d4 <http_client_callback+0xe4>)
   165a0:	7013      	strb	r3, [r2, #0]
   165a2:	e7ee      	b.n	16582 <http_client_callback+0x92>
   165a4:	00019e54 	.word	0x00019e54
   165a8:	00019eac 	.word	0x00019eac
   165ac:	0001722d 	.word	0x0001722d
   165b0:	00019ee4 	.word	0x00019ee4
   165b4:	0001608d 	.word	0x0001608d
   165b8:	00019f10 	.word	0x00019f10
   165bc:	00017111 	.word	0x00017111
   165c0:	20000aa8 	.word	0x20000aa8
   165c4:	20000ee8 	.word	0x20000ee8
   165c8:	000005a6 	.word	0x000005a6
   165cc:	00016259 	.word	0x00016259
   165d0:	00019f4c 	.word	0x00019f4c
   165d4:	20000851 	.word	0x20000851
   165d8:	0001617d 	.word	0x0001617d
   165dc:	20000a84 	.word	0x20000a84
   165e0:	000137f1 	.word	0x000137f1

000165e4 <wifi_cb>:
{
   165e4:	b510      	push	{r4, lr}
   165e6:	b082      	sub	sp, #8
	switch (u8MsgType) {
   165e8:	282c      	cmp	r0, #44	; 0x2c
   165ea:	d003      	beq.n	165f4 <wifi_cb+0x10>
   165ec:	2832      	cmp	r0, #50	; 0x32
   165ee:	d035      	beq.n	1665c <wifi_cb+0x78>
}
   165f0:	b002      	add	sp, #8
   165f2:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   165f4:	780b      	ldrb	r3, [r1, #0]
   165f6:	2b01      	cmp	r3, #1
   165f8:	d01c      	beq.n	16634 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   165fa:	2b00      	cmp	r3, #0
   165fc:	d1f8      	bne.n	165f0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   165fe:	4826      	ldr	r0, [pc, #152]	; (16698 <wifi_cb+0xb4>)
   16600:	4b26      	ldr	r3, [pc, #152]	; (1669c <wifi_cb+0xb8>)
   16602:	4798      	blx	r3
	down_state &= ~mask;
   16604:	4a26      	ldr	r2, [pc, #152]	; (166a0 <wifi_cb+0xbc>)
   16606:	7813      	ldrb	r3, [r2, #0]
   16608:	2102      	movs	r1, #2
   1660a:	438b      	bics	r3, r1
   1660c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   1660e:	071b      	lsls	r3, r3, #28
   16610:	d416      	bmi.n	16640 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   16612:	4b23      	ldr	r3, [pc, #140]	; (166a0 <wifi_cb+0xbc>)
   16614:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16616:	075a      	lsls	r2, r3, #29
   16618:	d41b      	bmi.n	16652 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
   1661a:	2101      	movs	r1, #1
   1661c:	4821      	ldr	r0, [pc, #132]	; (166a4 <wifi_cb+0xc0>)
   1661e:	4b22      	ldr	r3, [pc, #136]	; (166a8 <wifi_cb+0xc4>)
   16620:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16622:	23ff      	movs	r3, #255	; 0xff
   16624:	9300      	str	r3, [sp, #0]
   16626:	4b21      	ldr	r3, [pc, #132]	; (166ac <wifi_cb+0xc8>)
   16628:	2202      	movs	r2, #2
   1662a:	2112      	movs	r1, #18
   1662c:	4820      	ldr	r0, [pc, #128]	; (166b0 <wifi_cb+0xcc>)
   1662e:	4c21      	ldr	r4, [pc, #132]	; (166b4 <wifi_cb+0xd0>)
   16630:	47a0      	blx	r4
   16632:	e7dd      	b.n	165f0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16634:	4820      	ldr	r0, [pc, #128]	; (166b8 <wifi_cb+0xd4>)
   16636:	4b19      	ldr	r3, [pc, #100]	; (1669c <wifi_cb+0xb8>)
   16638:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   1663a:	4b20      	ldr	r3, [pc, #128]	; (166bc <wifi_cb+0xd8>)
   1663c:	4798      	blx	r3
   1663e:	e7d7      	b.n	165f0 <wifi_cb+0xc>
				f_close(&file_object);
   16640:	481f      	ldr	r0, [pc, #124]	; (166c0 <wifi_cb+0xdc>)
   16642:	4b20      	ldr	r3, [pc, #128]	; (166c4 <wifi_cb+0xe0>)
   16644:	4798      	blx	r3
	down_state &= ~mask;
   16646:	4a16      	ldr	r2, [pc, #88]	; (166a0 <wifi_cb+0xbc>)
   16648:	7813      	ldrb	r3, [r2, #0]
   1664a:	2108      	movs	r1, #8
   1664c:	438b      	bics	r3, r1
   1664e:	7013      	strb	r3, [r2, #0]
   16650:	e7df      	b.n	16612 <wifi_cb+0x2e>
   16652:	2204      	movs	r2, #4
   16654:	4393      	bics	r3, r2
   16656:	4a12      	ldr	r2, [pc, #72]	; (166a0 <wifi_cb+0xbc>)
   16658:	7013      	strb	r3, [r2, #0]
   1665a:	e7de      	b.n	1661a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   1665c:	788b      	ldrb	r3, [r1, #2]
   1665e:	784a      	ldrb	r2, [r1, #1]
   16660:	7808      	ldrb	r0, [r1, #0]
   16662:	78c9      	ldrb	r1, [r1, #3]
   16664:	9100      	str	r1, [sp, #0]
   16666:	0001      	movs	r1, r0
   16668:	4817      	ldr	r0, [pc, #92]	; (166c8 <wifi_cb+0xe4>)
   1666a:	4c18      	ldr	r4, [pc, #96]	; (166cc <wifi_cb+0xe8>)
   1666c:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   1666e:	2002      	movs	r0, #2
   16670:	4b17      	ldr	r3, [pc, #92]	; (166d0 <wifi_cb+0xec>)
   16672:	4798      	blx	r3
		if(do_download_flag == 1)
   16674:	4b17      	ldr	r3, [pc, #92]	; (166d4 <wifi_cb+0xf0>)
   16676:	781b      	ldrb	r3, [r3, #0]
   16678:	2b01      	cmp	r3, #1
   1667a:	d009      	beq.n	16690 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   1667c:	4916      	ldr	r1, [pc, #88]	; (166d8 <wifi_cb+0xf4>)
   1667e:	4809      	ldr	r0, [pc, #36]	; (166a4 <wifi_cb+0xc0>)
   16680:	4b16      	ldr	r3, [pc, #88]	; (166dc <wifi_cb+0xf8>)
   16682:	4798      	blx	r3
   16684:	2800      	cmp	r0, #0
   16686:	d0b3      	beq.n	165f0 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   16688:	4815      	ldr	r0, [pc, #84]	; (166e0 <wifi_cb+0xfc>)
   1668a:	4b04      	ldr	r3, [pc, #16]	; (1669c <wifi_cb+0xb8>)
   1668c:	4798      	blx	r3
}
   1668e:	e7af      	b.n	165f0 <wifi_cb+0xc>
			start_download();
   16690:	4b14      	ldr	r3, [pc, #80]	; (166e4 <wifi_cb+0x100>)
   16692:	4798      	blx	r3
   16694:	e7ac      	b.n	165f0 <wifi_cb+0xc>
   16696:	46c0      	nop			; (mov r8, r8)
   16698:	0001a6c8 	.word	0x0001a6c8
   1669c:	0001722d 	.word	0x0001722d
   166a0:	20000851 	.word	0x20000851
   166a4:	20000ab0 	.word	0x20000ab0
   166a8:	00014501 	.word	0x00014501
   166ac:	0001a6e8 	.word	0x0001a6e8
   166b0:	0001a6f8 	.word	0x0001a6f8
   166b4:	0000d861 	.word	0x0000d861
   166b8:	0001a6a8 	.word	0x0001a6a8
   166bc:	0000d87d 	.word	0x0000d87d
   166c0:	20000a84 	.word	0x20000a84
   166c4:	000137f1 	.word	0x000137f1
   166c8:	0001a70c 	.word	0x0001a70c
   166cc:	00017111 	.word	0x00017111
   166d0:	0001608d 	.word	0x0001608d
   166d4:	20000850 	.word	0x20000850
   166d8:	0001a290 	.word	0x0001a290
   166dc:	0001443d 	.word	0x0001443d
   166e0:	0001a734 	.word	0x0001a734
   166e4:	0001617d 	.word	0x0001617d

000166e8 <configure_extint_channel>:
{
   166e8:	b510      	push	{r4, lr}
   166ea:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   166ec:	ac01      	add	r4, sp, #4
   166ee:	0020      	movs	r0, r4
   166f0:	4b07      	ldr	r3, [pc, #28]	; (16710 <configure_extint_channel+0x28>)
   166f2:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   166f4:	2337      	movs	r3, #55	; 0x37
   166f6:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   166f8:	2300      	movs	r3, #0
   166fa:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   166fc:	3301      	adds	r3, #1
   166fe:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16700:	3301      	adds	r3, #1
   16702:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16704:	0021      	movs	r1, r4
   16706:	2007      	movs	r0, #7
   16708:	4b02      	ldr	r3, [pc, #8]	; (16714 <configure_extint_channel+0x2c>)
   1670a:	4798      	blx	r3
}
   1670c:	b004      	add	sp, #16
   1670e:	bd10      	pop	{r4, pc}
   16710:	0000f939 	.word	0x0000f939
   16714:	0000f94d 	.word	0x0000f94d

00016718 <configure_extint_callbacks>:
{
   16718:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   1671a:	2200      	movs	r2, #0
   1671c:	2107      	movs	r1, #7
   1671e:	4804      	ldr	r0, [pc, #16]	; (16730 <configure_extint_callbacks+0x18>)
   16720:	4b04      	ldr	r3, [pc, #16]	; (16734 <configure_extint_callbacks+0x1c>)
   16722:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   16724:	2100      	movs	r1, #0
   16726:	2007      	movs	r0, #7
   16728:	4b03      	ldr	r3, [pc, #12]	; (16738 <configure_extint_callbacks+0x20>)
   1672a:	4798      	blx	r3
}
   1672c:	bd10      	pop	{r4, pc}
   1672e:	46c0      	nop			; (mov r8, r8)
   16730:	00016125 	.word	0x00016125
   16734:	0000f7f5 	.word	0x0000f7f5
   16738:	0000f821 	.word	0x0000f821

0001673c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   1673c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1673e:	b091      	sub	sp, #68	; 0x44
	down_state = NOT_READY;
   16740:	2200      	movs	r2, #0
   16742:	4bc1      	ldr	r3, [pc, #772]	; (16a48 <main+0x30c>)
   16744:	701a      	strb	r2, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
   16746:	4bc1      	ldr	r3, [pc, #772]	; (16a4c <main+0x310>)
   16748:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   1674a:	4bc1      	ldr	r3, [pc, #772]	; (16a50 <main+0x314>)
   1674c:	4798      	blx	r3
	stdio_base = (void *)GetUsartModule();
   1674e:	4bc1      	ldr	r3, [pc, #772]	; (16a54 <main+0x318>)
   16750:	4798      	blx	r3
   16752:	4bc1      	ldr	r3, [pc, #772]	; (16a58 <main+0x31c>)
   16754:	6018      	str	r0, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   16756:	4ac1      	ldr	r2, [pc, #772]	; (16a5c <main+0x320>)
   16758:	4bc1      	ldr	r3, [pc, #772]	; (16a60 <main+0x324>)
   1675a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   1675c:	4ac1      	ldr	r2, [pc, #772]	; (16a64 <main+0x328>)
   1675e:	4bc2      	ldr	r3, [pc, #776]	; (16a68 <main+0x32c>)
   16760:	601a      	str	r2, [r3, #0]
	setbuf(stdout, NULL);
   16762:	4dc2      	ldr	r5, [pc, #776]	; (16a6c <main+0x330>)
   16764:	682b      	ldr	r3, [r5, #0]
   16766:	6898      	ldr	r0, [r3, #8]
   16768:	2100      	movs	r1, #0
   1676a:	4cc1      	ldr	r4, [pc, #772]	; (16a70 <main+0x334>)
   1676c:	47a0      	blx	r4
	setbuf(stdin, NULL);
   1676e:	682b      	ldr	r3, [r5, #0]
   16770:	6858      	ldr	r0, [r3, #4]
   16772:	2100      	movs	r1, #0
   16774:	47a0      	blx	r4
	configure_console();
	printf(STRING_HEADER);
   16776:	48bf      	ldr	r0, [pc, #764]	; (16a74 <main+0x338>)
   16778:	4cbf      	ldr	r4, [pc, #764]	; (16a78 <main+0x33c>)
   1677a:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
   1677c:	48bf      	ldr	r0, [pc, #764]	; (16a7c <main+0x340>)
   1677e:	47a0      	blx	r4
	printf("ESE516 - Wifi Init Code\r\n");
   16780:	48bf      	ldr	r0, [pc, #764]	; (16a80 <main+0x344>)
   16782:	47a0      	blx	r4
	sd_mmc_init();
   16784:	4bbf      	ldr	r3, [pc, #764]	; (16a84 <main+0x348>)
   16786:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");		
   16788:	48bf      	ldr	r0, [pc, #764]	; (16a88 <main+0x34c>)
   1678a:	47a0      	blx	r4
			status = sd_mmc_test_unit_ready(0);
   1678c:	4ebf      	ldr	r6, [pc, #764]	; (16a8c <main+0x350>)
				printf("init_storage: SD Card install failed.\r\n");
   1678e:	4cba      	ldr	r4, [pc, #744]	; (16a78 <main+0x33c>)
   16790:	e008      	b.n	167a4 <main+0x68>
   16792:	48bf      	ldr	r0, [pc, #764]	; (16a90 <main+0x354>)
   16794:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   16796:	48bf      	ldr	r0, [pc, #764]	; (16a94 <main+0x358>)
   16798:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1679a:	4dbf      	ldr	r5, [pc, #764]	; (16a98 <main+0x35c>)
   1679c:	2000      	movs	r0, #0
   1679e:	47a8      	blx	r5
   167a0:	2802      	cmp	r0, #2
   167a2:	d1fb      	bne.n	1679c <main+0x60>
			status = sd_mmc_test_unit_ready(0);
   167a4:	2000      	movs	r0, #0
   167a6:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   167a8:	2801      	cmp	r0, #1
   167aa:	d0f2      	beq.n	16792 <main+0x56>
		} while (CTRL_GOOD != status);
   167ac:	2800      	cmp	r0, #0
   167ae:	d1f9      	bne.n	167a4 <main+0x68>
		printf("init_storage: mounting SD card...\r\n");
   167b0:	48ba      	ldr	r0, [pc, #744]	; (16a9c <main+0x360>)
   167b2:	4bb1      	ldr	r3, [pc, #708]	; (16a78 <main+0x33c>)
   167b4:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   167b6:	4cba      	ldr	r4, [pc, #744]	; (16aa0 <main+0x364>)
   167b8:	228c      	movs	r2, #140	; 0x8c
   167ba:	0092      	lsls	r2, r2, #2
   167bc:	2100      	movs	r1, #0
   167be:	0020      	movs	r0, r4
   167c0:	4bb8      	ldr	r3, [pc, #736]	; (16aa4 <main+0x368>)
   167c2:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   167c4:	0021      	movs	r1, r4
   167c6:	2000      	movs	r0, #0
   167c8:	4bb7      	ldr	r3, [pc, #732]	; (16aa8 <main+0x36c>)
   167ca:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   167cc:	280b      	cmp	r0, #11
   167ce:	d041      	beq.n	16854 <main+0x118>
		printf("init_storage: SD card mount OK.\r\n");
   167d0:	48b6      	ldr	r0, [pc, #728]	; (16aac <main+0x370>)
   167d2:	4ba9      	ldr	r3, [pc, #676]	; (16a78 <main+0x33c>)
   167d4:	4798      	blx	r3
		add_state(STORAGE_READY);
   167d6:	2001      	movs	r0, #1
   167d8:	4bb5      	ldr	r3, [pc, #724]	; (16ab0 <main+0x374>)
   167da:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   167dc:	ac03      	add	r4, sp, #12
   167de:	0020      	movs	r0, r4
   167e0:	4bb4      	ldr	r3, [pc, #720]	; (16ab4 <main+0x378>)
   167e2:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   167e4:	4db4      	ldr	r5, [pc, #720]	; (16ab8 <main+0x37c>)
   167e6:	0021      	movs	r1, r4
   167e8:	0028      	movs	r0, r5
   167ea:	4bb4      	ldr	r3, [pc, #720]	; (16abc <main+0x380>)
   167ec:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   167ee:	0028      	movs	r0, r5
   167f0:	4bb3      	ldr	r3, [pc, #716]	; (16ac0 <main+0x384>)
   167f2:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   167f4:	0020      	movs	r0, r4
   167f6:	4bb3      	ldr	r3, [pc, #716]	; (16ac4 <main+0x388>)
   167f8:	4798      	blx	r3
	httpc_conf.port = 443;
   167fa:	23bc      	movs	r3, #188	; 0xbc
   167fc:	33ff      	adds	r3, #255	; 0xff
   167fe:	8023      	strh	r3, [r4, #0]
	httpc_conf.tls = 1;
   16800:	3bbb      	subs	r3, #187	; 0xbb
   16802:	3bff      	subs	r3, #255	; 0xff
   16804:	70a3      	strb	r3, [r4, #2]
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16806:	4bb0      	ldr	r3, [pc, #704]	; (16ac8 <main+0x38c>)
   16808:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1680a:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1680c:	0021      	movs	r1, r4
   1680e:	48af      	ldr	r0, [pc, #700]	; (16acc <main+0x390>)
   16810:	4baf      	ldr	r3, [pc, #700]	; (16ad0 <main+0x394>)
   16812:	4798      	blx	r3
   16814:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   16816:	db22      	blt.n	1685e <main+0x122>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   16818:	49ae      	ldr	r1, [pc, #696]	; (16ad4 <main+0x398>)
   1681a:	48ac      	ldr	r0, [pc, #688]	; (16acc <main+0x390>)
   1681c:	4bae      	ldr	r3, [pc, #696]	; (16ad8 <main+0x39c>)
   1681e:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   16820:	ac03      	add	r4, sp, #12
   16822:	0020      	movs	r0, r4
   16824:	4bad      	ldr	r3, [pc, #692]	; (16adc <main+0x3a0>)
   16826:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   16828:	4bad      	ldr	r3, [pc, #692]	; (16ae0 <main+0x3a4>)
   1682a:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1682c:	2380      	movs	r3, #128	; 0x80
   1682e:	009b      	lsls	r3, r3, #2
   16830:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   16832:	4aac      	ldr	r2, [pc, #688]	; (16ae4 <main+0x3a8>)
   16834:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16836:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   16838:	4bab      	ldr	r3, [pc, #684]	; (16ae8 <main+0x3ac>)
   1683a:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   1683c:	4bab      	ldr	r3, [pc, #684]	; (16aec <main+0x3b0>)
   1683e:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16840:	0021      	movs	r1, r4
   16842:	48ab      	ldr	r0, [pc, #684]	; (16af0 <main+0x3b4>)
   16844:	4bab      	ldr	r3, [pc, #684]	; (16af4 <main+0x3b8>)
   16846:	4798      	blx	r3
   16848:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   1684a:	da0c      	bge.n	16866 <main+0x12a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   1684c:	48aa      	ldr	r0, [pc, #680]	; (16af8 <main+0x3bc>)
   1684e:	4bab      	ldr	r3, [pc, #684]	; (16afc <main+0x3c0>)
   16850:	4798      	blx	r3
   16852:	e7fe      	b.n	16852 <main+0x116>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   16854:	210b      	movs	r1, #11
   16856:	48aa      	ldr	r0, [pc, #680]	; (16b00 <main+0x3c4>)
   16858:	4ba8      	ldr	r3, [pc, #672]	; (16afc <main+0x3c0>)
   1685a:	4798      	blx	r3
   1685c:	e7be      	b.n	167dc <main+0xa0>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1685e:	48a9      	ldr	r0, [pc, #676]	; (16b04 <main+0x3c8>)
   16860:	4ba6      	ldr	r3, [pc, #664]	; (16afc <main+0x3c0>)
   16862:	4798      	blx	r3
   16864:	e7fe      	b.n	16864 <main+0x128>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16866:	49a8      	ldr	r1, [pc, #672]	; (16b08 <main+0x3cc>)
   16868:	48a1      	ldr	r0, [pc, #644]	; (16af0 <main+0x3b4>)
   1686a:	4ba8      	ldr	r3, [pc, #672]	; (16b0c <main+0x3d0>)
   1686c:	4798      	blx	r3
   1686e:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   16870:	db15      	blt.n	1689e <main+0x162>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
   16872:	4ba7      	ldr	r3, [pc, #668]	; (16b10 <main+0x3d4>)
   16874:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   16876:	4ba7      	ldr	r3, [pc, #668]	; (16b14 <main+0x3d8>)
   16878:	4798      	blx	r3
	configure_extint_callbacks();
   1687a:	4ba7      	ldr	r3, [pc, #668]	; (16b18 <main+0x3dc>)
   1687c:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1687e:	2218      	movs	r2, #24
   16880:	2100      	movs	r1, #0
   16882:	a80a      	add	r0, sp, #40	; 0x28
   16884:	4b87      	ldr	r3, [pc, #540]	; (16aa4 <main+0x368>)
   16886:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   16888:	4ba4      	ldr	r3, [pc, #656]	; (16b1c <main+0x3e0>)
   1688a:	930a      	str	r3, [sp, #40]	; 0x28
	ret = m2m_wifi_init(&param);
   1688c:	a80a      	add	r0, sp, #40	; 0x28
   1688e:	4ba4      	ldr	r3, [pc, #656]	; (16b20 <main+0x3e4>)
   16890:	4798      	blx	r3
   16892:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   16894:	d007      	beq.n	168a6 <main+0x16a>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16896:	48a3      	ldr	r0, [pc, #652]	; (16b24 <main+0x3e8>)
   16898:	4b98      	ldr	r3, [pc, #608]	; (16afc <main+0x3c0>)
   1689a:	4798      	blx	r3
   1689c:	e7fe      	b.n	1689c <main+0x160>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   1689e:	48a2      	ldr	r0, [pc, #648]	; (16b28 <main+0x3ec>)
   168a0:	4b96      	ldr	r3, [pc, #600]	; (16afc <main+0x3c0>)
   168a2:	4798      	blx	r3
   168a4:	e7fe      	b.n	168a4 <main+0x168>
   168a6:	2000      	movs	r0, #0
   168a8:	4ba0      	ldr	r3, [pc, #640]	; (16b2c <main+0x3f0>)
   168aa:	4798      	blx	r3
   168ac:	4ba0      	ldr	r3, [pc, #640]	; (16b30 <main+0x3f4>)
   168ae:	7a1b      	ldrb	r3, [r3, #8]
   168b0:	b2db      	uxtb	r3, r3
   168b2:	40d8      	lsrs	r0, r3
		while (1) {
				}
		}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   168b4:	21fa      	movs	r1, #250	; 0xfa
   168b6:	0089      	lsls	r1, r1, #2
   168b8:	4b9e      	ldr	r3, [pc, #632]	; (16b34 <main+0x3f8>)
   168ba:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   168bc:	3801      	subs	r0, #1
   168be:	4b9e      	ldr	r3, [pc, #632]	; (16b38 <main+0x3fc>)
   168c0:	4298      	cmp	r0, r3
   168c2:	d900      	bls.n	168c6 <main+0x18a>
   168c4:	e0bb      	b.n	16a3e <main+0x302>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   168c6:	4a9d      	ldr	r2, [pc, #628]	; (16b3c <main+0x400>)
   168c8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   168ca:	489d      	ldr	r0, [pc, #628]	; (16b40 <main+0x404>)
   168cc:	6a03      	ldr	r3, [r0, #32]
   168ce:	021b      	lsls	r3, r3, #8
   168d0:	0a1b      	lsrs	r3, r3, #8
   168d2:	21c0      	movs	r1, #192	; 0xc0
   168d4:	0609      	lsls	r1, r1, #24
   168d6:	430b      	orrs	r3, r1
   168d8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   168da:	2300      	movs	r3, #0
   168dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   168de:	2107      	movs	r1, #7
   168e0:	6011      	str	r1, [r2, #0]
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	//DOWNLOAD A FILE
	do_download_flag = false; // might hold off on download for now
   168e2:	4a98      	ldr	r2, [pc, #608]	; (16b44 <main+0x408>)
   168e4:	7013      	strb	r3, [r2, #0]

	/* Initialize socket module. */
	socketInit();
   168e6:	4b98      	ldr	r3, [pc, #608]	; (16b48 <main+0x40c>)
   168e8:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_event_handler, socket_resolve_handler);//registerSocketCallback(socket_cb, resolve_cb);
   168ea:	4998      	ldr	r1, [pc, #608]	; (16b4c <main+0x410>)
   168ec:	4898      	ldr	r0, [pc, #608]	; (16b50 <main+0x414>)
   168ee:	4b99      	ldr	r3, [pc, #612]	; (16b54 <main+0x418>)
   168f0:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   168f2:	4c99      	ldr	r4, [pc, #612]	; (16b58 <main+0x41c>)
   168f4:	0021      	movs	r1, r4
   168f6:	4899      	ldr	r0, [pc, #612]	; (16b5c <main+0x420>)
   168f8:	4b80      	ldr	r3, [pc, #512]	; (16afc <main+0x3c0>)
   168fa:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   168fc:	23ff      	movs	r3, #255	; 0xff
   168fe:	9300      	str	r3, [sp, #0]
   16900:	4b97      	ldr	r3, [pc, #604]	; (16b60 <main+0x424>)
   16902:	2202      	movs	r2, #2
   16904:	2112      	movs	r1, #18
   16906:	0020      	movs	r0, r4
   16908:	4c96      	ldr	r4, [pc, #600]	; (16b64 <main+0x428>)
   1690a:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   1690c:	4b4e      	ldr	r3, [pc, #312]	; (16a48 <main+0x30c>)

	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1690e:	781a      	ldrb	r2, [r3, #0]
   16910:	2332      	movs	r3, #50	; 0x32
   16912:	421a      	tst	r2, r3
   16914:	d022      	beq.n	1695c <main+0x220>
		sw_timer_task(&swt_module_inst);
	}
	
	//temporarily not downloading before program, just downloading after

	printf("main: done.\r\n");
   16916:	4894      	ldr	r0, [pc, #592]	; (16b68 <main+0x42c>)
   16918:	4c57      	ldr	r4, [pc, #348]	; (16a78 <main+0x33c>)
   1691a:	47a0      	blx	r4
	//printf("main2: done.\r\n");

	//Disable socket for HTTP Transfer
	//socketDeinit();

	delay_s(1);
   1691c:	20fa      	movs	r0, #250	; 0xfa
   1691e:	0080      	lsls	r0, r0, #2
   16920:	4b92      	ldr	r3, [pc, #584]	; (16b6c <main+0x430>)
   16922:	4798      	blx	r3
	//CONNECT TO MQTT BROKER

	do_download_flag = false;
   16924:	2200      	movs	r2, #0
   16926:	4b87      	ldr	r3, [pc, #540]	; (16b44 <main+0x408>)
   16928:	701a      	strb	r2, [r3, #0]
	//Re-enable socket for MQTT Transfer
	//socketInit();
	//registerSocketCallback(socket_event_handler, socket_resolve_handler);

		/* Connect to router. */
	printf("check3\r\n");
   1692a:	4891      	ldr	r0, [pc, #580]	; (16b70 <main+0x434>)
   1692c:	47a0      	blx	r4
	//if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
	//{
	//	printf("Error connecting to MQTT Broker!\r\n");
	//}
	printf("check4\r\n");
   1692e:	4891      	ldr	r0, [pc, #580]	; (16b74 <main+0x438>)
   16930:	47a0      	blx	r4


	while (1) {
	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   16932:	4d91      	ldr	r5, [pc, #580]	; (16b78 <main+0x43c>)
		sw_timer_task(&swt_module_inst);
		if(isPressed)
   16934:	4c91      	ldr	r4, [pc, #580]	; (16b7c <main+0x440>)
		sw_timer_task(&swt_module_inst);
   16936:	4f60      	ldr	r7, [pc, #384]	; (16ab8 <main+0x37c>)
   16938:	4e91      	ldr	r6, [pc, #580]	; (16b80 <main+0x444>)
		m2m_wifi_handle_events(NULL);
   1693a:	2000      	movs	r0, #0
   1693c:	47a8      	blx	r5
		sw_timer_task(&swt_module_inst);
   1693e:	0038      	movs	r0, r7
   16940:	47b0      	blx	r6
		if(isPressed)
   16942:	7823      	ldrb	r3, [r4, #0]
   16944:	2b00      	cmp	r3, #0
   16946:	d116      	bne.n	16976 <main+0x23a>
			otafu();
			isPressed = false;
		}

		//Handle MQTT messages
			if(mqtt_inst.isConnected)
   16948:	2334      	movs	r3, #52	; 0x34
   1694a:	4a69      	ldr	r2, [pc, #420]	; (16af0 <main+0x3b4>)
   1694c:	5cd3      	ldrb	r3, [r2, r3]
   1694e:	2b00      	cmp	r3, #0
   16950:	d0f3      	beq.n	1693a <main+0x1fe>
			mqtt_yield(&mqtt_inst, 100);
   16952:	2164      	movs	r1, #100	; 0x64
   16954:	0010      	movs	r0, r2
   16956:	4b8b      	ldr	r3, [pc, #556]	; (16b84 <main+0x448>)
   16958:	4798      	blx	r3
   1695a:	e7ec      	b.n	16936 <main+0x1fa>
		m2m_wifi_handle_events(NULL);
   1695c:	4e86      	ldr	r6, [pc, #536]	; (16b78 <main+0x43c>)
		sw_timer_task(&swt_module_inst);
   1695e:	4d56      	ldr	r5, [pc, #344]	; (16ab8 <main+0x37c>)
   16960:	4c87      	ldr	r4, [pc, #540]	; (16b80 <main+0x444>)
		m2m_wifi_handle_events(NULL);
   16962:	2000      	movs	r0, #0
   16964:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16966:	0028      	movs	r0, r5
   16968:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   1696a:	4b37      	ldr	r3, [pc, #220]	; (16a48 <main+0x30c>)
	while (!( is_state_set(WIFI_CONNECTED)||is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1696c:	781b      	ldrb	r3, [r3, #0]
   1696e:	2232      	movs	r2, #50	; 0x32
   16970:	421a      	tst	r2, r3
   16972:	d0f6      	beq.n	16962 <main+0x226>
   16974:	e7cf      	b.n	16916 <main+0x1da>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   16976:	4e84      	ldr	r6, [pc, #528]	; (16b88 <main+0x44c>)
   16978:	0030      	movs	r0, r6
   1697a:	4b84      	ldr	r3, [pc, #528]	; (16b8c <main+0x450>)
   1697c:	4798      	blx	r3
   1697e:	0003      	movs	r3, r0
   16980:	4d5b      	ldr	r5, [pc, #364]	; (16af0 <main+0x3b4>)
   16982:	2400      	movs	r4, #0
   16984:	9401      	str	r4, [sp, #4]
   16986:	2702      	movs	r7, #2
   16988:	9700      	str	r7, [sp, #0]
   1698a:	0032      	movs	r2, r6
   1698c:	4980      	ldr	r1, [pc, #512]	; (16b90 <main+0x454>)
   1698e:	0028      	movs	r0, r5
   16990:	4e80      	ldr	r6, [pc, #512]	; (16b94 <main+0x458>)
   16992:	47b0      	blx	r6
	do_download_flag = true;
   16994:	2601      	movs	r6, #1
   16996:	4b6b      	ldr	r3, [pc, #428]	; (16b44 <main+0x408>)
   16998:	701e      	strb	r6, [r3, #0]
	second_file = 0;
   1699a:	4b7f      	ldr	r3, [pc, #508]	; (16b98 <main+0x45c>)
   1699c:	701c      	strb	r4, [r3, #0]
	mqtt_deinit(&mqtt_inst);
   1699e:	0028      	movs	r0, r5
   169a0:	4b7e      	ldr	r3, [pc, #504]	; (16b9c <main+0x460>)
   169a2:	4798      	blx	r3
	socketDeinit();
   169a4:	4b7e      	ldr	r3, [pc, #504]	; (16ba0 <main+0x464>)
   169a6:	4798      	blx	r3
	delay_s(1);
   169a8:	20fa      	movs	r0, #250	; 0xfa
   169aa:	0080      	lsls	r0, r0, #2
   169ac:	4b6f      	ldr	r3, [pc, #444]	; (16b6c <main+0x430>)
   169ae:	4798      	blx	r3
	socketInit();
   169b0:	4b65      	ldr	r3, [pc, #404]	; (16b48 <main+0x40c>)
   169b2:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
   169b4:	497b      	ldr	r1, [pc, #492]	; (16ba4 <main+0x468>)
   169b6:	487c      	ldr	r0, [pc, #496]	; (16ba8 <main+0x46c>)
   169b8:	4b66      	ldr	r3, [pc, #408]	; (16b54 <main+0x418>)
   169ba:	4798      	blx	r3
	down_state = NOT_READY;
   169bc:	4d22      	ldr	r5, [pc, #136]	; (16a48 <main+0x30c>)
   169be:	702c      	strb	r4, [r5, #0]
	add_state(WIFI_CONNECTED);
   169c0:	0038      	movs	r0, r7
   169c2:	4c3b      	ldr	r4, [pc, #236]	; (16ab0 <main+0x374>)
   169c4:	47a0      	blx	r4
	add_state(STORAGE_READY);
   169c6:	0030      	movs	r0, r6
   169c8:	47a0      	blx	r4
	start_download();
   169ca:	4b78      	ldr	r3, [pc, #480]	; (16bac <main+0x470>)
   169cc:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   169ce:	782a      	ldrb	r2, [r5, #0]
   169d0:	2330      	movs	r3, #48	; 0x30
   169d2:	421a      	tst	r2, r3
   169d4:	d10b      	bne.n	169ee <main+0x2b2>
		m2m_wifi_handle_events(NULL);
   169d6:	4e68      	ldr	r6, [pc, #416]	; (16b78 <main+0x43c>)
		sw_timer_task(&swt_module_inst);
   169d8:	4d37      	ldr	r5, [pc, #220]	; (16ab8 <main+0x37c>)
   169da:	4c69      	ldr	r4, [pc, #420]	; (16b80 <main+0x444>)
		m2m_wifi_handle_events(NULL);
   169dc:	2000      	movs	r0, #0
   169de:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   169e0:	0028      	movs	r0, r5
   169e2:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   169e4:	4b18      	ldr	r3, [pc, #96]	; (16a48 <main+0x30c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   169e6:	781b      	ldrb	r3, [r3, #0]
   169e8:	2230      	movs	r2, #48	; 0x30
   169ea:	421a      	tst	r2, r3
   169ec:	d0f6      	beq.n	169dc <main+0x2a0>
	second_file = 1;
   169ee:	2601      	movs	r6, #1
   169f0:	4b69      	ldr	r3, [pc, #420]	; (16b98 <main+0x45c>)
   169f2:	701e      	strb	r6, [r3, #0]
	down_state = NOT_READY;
   169f4:	4c14      	ldr	r4, [pc, #80]	; (16a48 <main+0x30c>)
   169f6:	2300      	movs	r3, #0
   169f8:	7023      	strb	r3, [r4, #0]
	add_state(WIFI_CONNECTED);
   169fa:	2002      	movs	r0, #2
   169fc:	4d2c      	ldr	r5, [pc, #176]	; (16ab0 <main+0x374>)
   169fe:	47a8      	blx	r5
	add_state(STORAGE_READY);
   16a00:	0030      	movs	r0, r6
   16a02:	47a8      	blx	r5
	start_download();
   16a04:	4b69      	ldr	r3, [pc, #420]	; (16bac <main+0x470>)
   16a06:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16a08:	7822      	ldrb	r2, [r4, #0]
   16a0a:	2330      	movs	r3, #48	; 0x30
   16a0c:	421a      	tst	r2, r3
   16a0e:	d10b      	bne.n	16a28 <main+0x2ec>
		m2m_wifi_handle_events(NULL);
   16a10:	4e59      	ldr	r6, [pc, #356]	; (16b78 <main+0x43c>)
		sw_timer_task(&swt_module_inst);
   16a12:	4d29      	ldr	r5, [pc, #164]	; (16ab8 <main+0x37c>)
   16a14:	4c5a      	ldr	r4, [pc, #360]	; (16b80 <main+0x444>)
		m2m_wifi_handle_events(NULL);
   16a16:	2000      	movs	r0, #0
   16a18:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16a1a:	0028      	movs	r0, r5
   16a1c:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   16a1e:	4b0a      	ldr	r3, [pc, #40]	; (16a48 <main+0x30c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16a20:	781b      	ldrb	r3, [r3, #0]
   16a22:	2230      	movs	r2, #48	; 0x30
   16a24:	421a      	tst	r2, r3
   16a26:	d0f6      	beq.n	16a16 <main+0x2da>
	printf("otafu: done.\r\n");
   16a28:	4861      	ldr	r0, [pc, #388]	; (16bb0 <main+0x474>)
   16a2a:	4b13      	ldr	r3, [pc, #76]	; (16a78 <main+0x33c>)
   16a2c:	4798      	blx	r3
  __ASM volatile ("dsb");
   16a2e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16a32:	4a60      	ldr	r2, [pc, #384]	; (16bb4 <main+0x478>)
   16a34:	4b42      	ldr	r3, [pc, #264]	; (16b40 <main+0x404>)
   16a36:	60da      	str	r2, [r3, #12]
   16a38:	f3bf 8f4f 	dsb	sy
   16a3c:	e7fe      	b.n	16a3c <main+0x300>
		puts("ERR>> Systick configuration error\r\n");
   16a3e:	485e      	ldr	r0, [pc, #376]	; (16bb8 <main+0x47c>)
   16a40:	4b0d      	ldr	r3, [pc, #52]	; (16a78 <main+0x33c>)
   16a42:	4798      	blx	r3
   16a44:	e7fe      	b.n	16a44 <main+0x308>
   16a46:	46c0      	nop			; (mov r8, r8)
   16a48:	20000851 	.word	0x20000851
   16a4c:	00011545 	.word	0x00011545
   16a50:	0000b1fd 	.word	0x0000b1fd
   16a54:	0000b3d1 	.word	0x0000b3d1
   16a58:	200014e0 	.word	0x200014e0
   16a5c:	00016241 	.word	0x00016241
   16a60:	200014dc 	.word	0x200014dc
   16a64:	00016215 	.word	0x00016215
   16a68:	200014d8 	.word	0x200014d8
   16a6c:	20000150 	.word	0x20000150
   16a70:	00017265 	.word	0x00017265
   16a74:	00019f7c 	.word	0x00019f7c
   16a78:	0001722d 	.word	0x0001722d
   16a7c:	00019fdc 	.word	0x00019fdc
   16a80:	0001a018 	.word	0x0001a018
   16a84:	0000b4fd 	.word	0x0000b4fd
   16a88:	0001a034 	.word	0x0001a034
   16a8c:	0000bc31 	.word	0x0000bc31
   16a90:	0001a06c 	.word	0x0001a06c
   16a94:	0001a094 	.word	0x0001a094
   16a98:	0000b51d 	.word	0x0000b51d
   16a9c:	0001a0c4 	.word	0x0001a0c4
   16aa0:	20000854 	.word	0x20000854
   16aa4:	00016faf 	.word	0x00016faf
   16aa8:	00013375 	.word	0x00013375
   16aac:	0001a118 	.word	0x0001a118
   16ab0:	0001608d 	.word	0x0001608d
   16ab4:	00015ef5 	.word	0x00015ef5
   16ab8:	200014f8 	.word	0x200014f8
   16abc:	00015f01 	.word	0x00015f01
   16ac0:	00015fad 	.word	0x00015fad
   16ac4:	00014f0d 	.word	0x00014f0d
   16ac8:	000005a6 	.word	0x000005a6
   16acc:	20001550 	.word	0x20001550
   16ad0:	00014f35 	.word	0x00014f35
   16ad4:	000164f1 	.word	0x000164f1
   16ad8:	00014fe9 	.word	0x00014fe9
   16adc:	000143f9 	.word	0x000143f9
   16ae0:	20000ae8 	.word	0x20000ae8
   16ae4:	20000ce8 	.word	0x20000ce8
   16ae8:	00002d69 	.word	0x00002d69
   16aec:	00001770 	.word	0x00001770
   16af0:	20000ab0 	.word	0x20000ab0
   16af4:	00014341 	.word	0x00014341
   16af8:	0001a184 	.word	0x0001a184
   16afc:	00017111 	.word	0x00017111
   16b00:	0001a0e8 	.word	0x0001a0e8
   16b04:	0001a13c 	.word	0x0001a13c
   16b08:	000163b9 	.word	0x000163b9
   16b0c:	00014415 	.word	0x00014415
   16b10:	0000c515 	.word	0x0000c515
   16b14:	000166e9 	.word	0x000166e9
   16b18:	00016719 	.word	0x00016719
   16b1c:	000165e5 	.word	0x000165e5
   16b20:	0000d491 	.word	0x0000d491
   16b24:	0001a1ec 	.word	0x0001a1ec
   16b28:	0001a1b8 	.word	0x0001a1b8
   16b2c:	00011301 	.word	0x00011301
   16b30:	40000400 	.word	0x40000400
   16b34:	00016bbd 	.word	0x00016bbd
   16b38:	00ffffff 	.word	0x00ffffff
   16b3c:	e000e010 	.word	0xe000e010
   16b40:	e000ed00 	.word	0xe000ed00
   16b44:	20000850 	.word	0x20000850
   16b48:	0000f0b9 	.word	0x0000f0b9
   16b4c:	00016165 	.word	0x00016165
   16b50:	00016171 	.word	0x00016171
   16b54:	0000f139 	.word	0x0000f139
   16b58:	0001a6f8 	.word	0x0001a6f8
   16b5c:	0001a218 	.word	0x0001a218
   16b60:	0001a6e8 	.word	0x0001a6e8
   16b64:	0000d861 	.word	0x0000d861
   16b68:	0001a23c 	.word	0x0001a23c
   16b6c:	0000c4d5 	.word	0x0000c4d5
   16b70:	0001a24c 	.word	0x0001a24c
   16b74:	0001a254 	.word	0x0001a254
   16b78:	0000d5c5 	.word	0x0000d5c5
   16b7c:	20000aac 	.word	0x20000aac
   16b80:	00016035 	.word	0x00016035
   16b84:	000145ed 	.word	0x000145ed
   16b88:	20000010 	.word	0x20000010
   16b8c:	000174d7 	.word	0x000174d7
   16b90:	0001a358 	.word	0x0001a358
   16b94:	0001458d 	.word	0x0001458d
   16b98:	20000eec 	.word	0x20000eec
   16b9c:	00014531 	.word	0x00014531
   16ba0:	0000f0fd 	.word	0x0000f0fd
   16ba4:	000164a9 	.word	0x000164a9
   16ba8:	000164e5 	.word	0x000164e5
   16bac:	0001617d 	.word	0x0001617d
   16bb0:	0001a25c 	.word	0x0001a25c
   16bb4:	05fa0004 	.word	0x05fa0004
   16bb8:	0001a26c 	.word	0x0001a26c

00016bbc <__udivsi3>:
   16bbc:	2200      	movs	r2, #0
   16bbe:	0843      	lsrs	r3, r0, #1
   16bc0:	428b      	cmp	r3, r1
   16bc2:	d374      	bcc.n	16cae <__udivsi3+0xf2>
   16bc4:	0903      	lsrs	r3, r0, #4
   16bc6:	428b      	cmp	r3, r1
   16bc8:	d35f      	bcc.n	16c8a <__udivsi3+0xce>
   16bca:	0a03      	lsrs	r3, r0, #8
   16bcc:	428b      	cmp	r3, r1
   16bce:	d344      	bcc.n	16c5a <__udivsi3+0x9e>
   16bd0:	0b03      	lsrs	r3, r0, #12
   16bd2:	428b      	cmp	r3, r1
   16bd4:	d328      	bcc.n	16c28 <__udivsi3+0x6c>
   16bd6:	0c03      	lsrs	r3, r0, #16
   16bd8:	428b      	cmp	r3, r1
   16bda:	d30d      	bcc.n	16bf8 <__udivsi3+0x3c>
   16bdc:	22ff      	movs	r2, #255	; 0xff
   16bde:	0209      	lsls	r1, r1, #8
   16be0:	ba12      	rev	r2, r2
   16be2:	0c03      	lsrs	r3, r0, #16
   16be4:	428b      	cmp	r3, r1
   16be6:	d302      	bcc.n	16bee <__udivsi3+0x32>
   16be8:	1212      	asrs	r2, r2, #8
   16bea:	0209      	lsls	r1, r1, #8
   16bec:	d065      	beq.n	16cba <__udivsi3+0xfe>
   16bee:	0b03      	lsrs	r3, r0, #12
   16bf0:	428b      	cmp	r3, r1
   16bf2:	d319      	bcc.n	16c28 <__udivsi3+0x6c>
   16bf4:	e000      	b.n	16bf8 <__udivsi3+0x3c>
   16bf6:	0a09      	lsrs	r1, r1, #8
   16bf8:	0bc3      	lsrs	r3, r0, #15
   16bfa:	428b      	cmp	r3, r1
   16bfc:	d301      	bcc.n	16c02 <__udivsi3+0x46>
   16bfe:	03cb      	lsls	r3, r1, #15
   16c00:	1ac0      	subs	r0, r0, r3
   16c02:	4152      	adcs	r2, r2
   16c04:	0b83      	lsrs	r3, r0, #14
   16c06:	428b      	cmp	r3, r1
   16c08:	d301      	bcc.n	16c0e <__udivsi3+0x52>
   16c0a:	038b      	lsls	r3, r1, #14
   16c0c:	1ac0      	subs	r0, r0, r3
   16c0e:	4152      	adcs	r2, r2
   16c10:	0b43      	lsrs	r3, r0, #13
   16c12:	428b      	cmp	r3, r1
   16c14:	d301      	bcc.n	16c1a <__udivsi3+0x5e>
   16c16:	034b      	lsls	r3, r1, #13
   16c18:	1ac0      	subs	r0, r0, r3
   16c1a:	4152      	adcs	r2, r2
   16c1c:	0b03      	lsrs	r3, r0, #12
   16c1e:	428b      	cmp	r3, r1
   16c20:	d301      	bcc.n	16c26 <__udivsi3+0x6a>
   16c22:	030b      	lsls	r3, r1, #12
   16c24:	1ac0      	subs	r0, r0, r3
   16c26:	4152      	adcs	r2, r2
   16c28:	0ac3      	lsrs	r3, r0, #11
   16c2a:	428b      	cmp	r3, r1
   16c2c:	d301      	bcc.n	16c32 <__udivsi3+0x76>
   16c2e:	02cb      	lsls	r3, r1, #11
   16c30:	1ac0      	subs	r0, r0, r3
   16c32:	4152      	adcs	r2, r2
   16c34:	0a83      	lsrs	r3, r0, #10
   16c36:	428b      	cmp	r3, r1
   16c38:	d301      	bcc.n	16c3e <__udivsi3+0x82>
   16c3a:	028b      	lsls	r3, r1, #10
   16c3c:	1ac0      	subs	r0, r0, r3
   16c3e:	4152      	adcs	r2, r2
   16c40:	0a43      	lsrs	r3, r0, #9
   16c42:	428b      	cmp	r3, r1
   16c44:	d301      	bcc.n	16c4a <__udivsi3+0x8e>
   16c46:	024b      	lsls	r3, r1, #9
   16c48:	1ac0      	subs	r0, r0, r3
   16c4a:	4152      	adcs	r2, r2
   16c4c:	0a03      	lsrs	r3, r0, #8
   16c4e:	428b      	cmp	r3, r1
   16c50:	d301      	bcc.n	16c56 <__udivsi3+0x9a>
   16c52:	020b      	lsls	r3, r1, #8
   16c54:	1ac0      	subs	r0, r0, r3
   16c56:	4152      	adcs	r2, r2
   16c58:	d2cd      	bcs.n	16bf6 <__udivsi3+0x3a>
   16c5a:	09c3      	lsrs	r3, r0, #7
   16c5c:	428b      	cmp	r3, r1
   16c5e:	d301      	bcc.n	16c64 <__udivsi3+0xa8>
   16c60:	01cb      	lsls	r3, r1, #7
   16c62:	1ac0      	subs	r0, r0, r3
   16c64:	4152      	adcs	r2, r2
   16c66:	0983      	lsrs	r3, r0, #6
   16c68:	428b      	cmp	r3, r1
   16c6a:	d301      	bcc.n	16c70 <__udivsi3+0xb4>
   16c6c:	018b      	lsls	r3, r1, #6
   16c6e:	1ac0      	subs	r0, r0, r3
   16c70:	4152      	adcs	r2, r2
   16c72:	0943      	lsrs	r3, r0, #5
   16c74:	428b      	cmp	r3, r1
   16c76:	d301      	bcc.n	16c7c <__udivsi3+0xc0>
   16c78:	014b      	lsls	r3, r1, #5
   16c7a:	1ac0      	subs	r0, r0, r3
   16c7c:	4152      	adcs	r2, r2
   16c7e:	0903      	lsrs	r3, r0, #4
   16c80:	428b      	cmp	r3, r1
   16c82:	d301      	bcc.n	16c88 <__udivsi3+0xcc>
   16c84:	010b      	lsls	r3, r1, #4
   16c86:	1ac0      	subs	r0, r0, r3
   16c88:	4152      	adcs	r2, r2
   16c8a:	08c3      	lsrs	r3, r0, #3
   16c8c:	428b      	cmp	r3, r1
   16c8e:	d301      	bcc.n	16c94 <__udivsi3+0xd8>
   16c90:	00cb      	lsls	r3, r1, #3
   16c92:	1ac0      	subs	r0, r0, r3
   16c94:	4152      	adcs	r2, r2
   16c96:	0883      	lsrs	r3, r0, #2
   16c98:	428b      	cmp	r3, r1
   16c9a:	d301      	bcc.n	16ca0 <__udivsi3+0xe4>
   16c9c:	008b      	lsls	r3, r1, #2
   16c9e:	1ac0      	subs	r0, r0, r3
   16ca0:	4152      	adcs	r2, r2
   16ca2:	0843      	lsrs	r3, r0, #1
   16ca4:	428b      	cmp	r3, r1
   16ca6:	d301      	bcc.n	16cac <__udivsi3+0xf0>
   16ca8:	004b      	lsls	r3, r1, #1
   16caa:	1ac0      	subs	r0, r0, r3
   16cac:	4152      	adcs	r2, r2
   16cae:	1a41      	subs	r1, r0, r1
   16cb0:	d200      	bcs.n	16cb4 <__udivsi3+0xf8>
   16cb2:	4601      	mov	r1, r0
   16cb4:	4152      	adcs	r2, r2
   16cb6:	4610      	mov	r0, r2
   16cb8:	4770      	bx	lr
   16cba:	e7ff      	b.n	16cbc <__udivsi3+0x100>
   16cbc:	b501      	push	{r0, lr}
   16cbe:	2000      	movs	r0, #0
   16cc0:	f000 f8f0 	bl	16ea4 <__aeabi_idiv0>
   16cc4:	bd02      	pop	{r1, pc}
   16cc6:	46c0      	nop			; (mov r8, r8)

00016cc8 <__aeabi_uidivmod>:
   16cc8:	2900      	cmp	r1, #0
   16cca:	d0f7      	beq.n	16cbc <__udivsi3+0x100>
   16ccc:	e776      	b.n	16bbc <__udivsi3>
   16cce:	4770      	bx	lr

00016cd0 <__divsi3>:
   16cd0:	4603      	mov	r3, r0
   16cd2:	430b      	orrs	r3, r1
   16cd4:	d47f      	bmi.n	16dd6 <__divsi3+0x106>
   16cd6:	2200      	movs	r2, #0
   16cd8:	0843      	lsrs	r3, r0, #1
   16cda:	428b      	cmp	r3, r1
   16cdc:	d374      	bcc.n	16dc8 <__divsi3+0xf8>
   16cde:	0903      	lsrs	r3, r0, #4
   16ce0:	428b      	cmp	r3, r1
   16ce2:	d35f      	bcc.n	16da4 <__divsi3+0xd4>
   16ce4:	0a03      	lsrs	r3, r0, #8
   16ce6:	428b      	cmp	r3, r1
   16ce8:	d344      	bcc.n	16d74 <__divsi3+0xa4>
   16cea:	0b03      	lsrs	r3, r0, #12
   16cec:	428b      	cmp	r3, r1
   16cee:	d328      	bcc.n	16d42 <__divsi3+0x72>
   16cf0:	0c03      	lsrs	r3, r0, #16
   16cf2:	428b      	cmp	r3, r1
   16cf4:	d30d      	bcc.n	16d12 <__divsi3+0x42>
   16cf6:	22ff      	movs	r2, #255	; 0xff
   16cf8:	0209      	lsls	r1, r1, #8
   16cfa:	ba12      	rev	r2, r2
   16cfc:	0c03      	lsrs	r3, r0, #16
   16cfe:	428b      	cmp	r3, r1
   16d00:	d302      	bcc.n	16d08 <__divsi3+0x38>
   16d02:	1212      	asrs	r2, r2, #8
   16d04:	0209      	lsls	r1, r1, #8
   16d06:	d065      	beq.n	16dd4 <__divsi3+0x104>
   16d08:	0b03      	lsrs	r3, r0, #12
   16d0a:	428b      	cmp	r3, r1
   16d0c:	d319      	bcc.n	16d42 <__divsi3+0x72>
   16d0e:	e000      	b.n	16d12 <__divsi3+0x42>
   16d10:	0a09      	lsrs	r1, r1, #8
   16d12:	0bc3      	lsrs	r3, r0, #15
   16d14:	428b      	cmp	r3, r1
   16d16:	d301      	bcc.n	16d1c <__divsi3+0x4c>
   16d18:	03cb      	lsls	r3, r1, #15
   16d1a:	1ac0      	subs	r0, r0, r3
   16d1c:	4152      	adcs	r2, r2
   16d1e:	0b83      	lsrs	r3, r0, #14
   16d20:	428b      	cmp	r3, r1
   16d22:	d301      	bcc.n	16d28 <__divsi3+0x58>
   16d24:	038b      	lsls	r3, r1, #14
   16d26:	1ac0      	subs	r0, r0, r3
   16d28:	4152      	adcs	r2, r2
   16d2a:	0b43      	lsrs	r3, r0, #13
   16d2c:	428b      	cmp	r3, r1
   16d2e:	d301      	bcc.n	16d34 <__divsi3+0x64>
   16d30:	034b      	lsls	r3, r1, #13
   16d32:	1ac0      	subs	r0, r0, r3
   16d34:	4152      	adcs	r2, r2
   16d36:	0b03      	lsrs	r3, r0, #12
   16d38:	428b      	cmp	r3, r1
   16d3a:	d301      	bcc.n	16d40 <__divsi3+0x70>
   16d3c:	030b      	lsls	r3, r1, #12
   16d3e:	1ac0      	subs	r0, r0, r3
   16d40:	4152      	adcs	r2, r2
   16d42:	0ac3      	lsrs	r3, r0, #11
   16d44:	428b      	cmp	r3, r1
   16d46:	d301      	bcc.n	16d4c <__divsi3+0x7c>
   16d48:	02cb      	lsls	r3, r1, #11
   16d4a:	1ac0      	subs	r0, r0, r3
   16d4c:	4152      	adcs	r2, r2
   16d4e:	0a83      	lsrs	r3, r0, #10
   16d50:	428b      	cmp	r3, r1
   16d52:	d301      	bcc.n	16d58 <__divsi3+0x88>
   16d54:	028b      	lsls	r3, r1, #10
   16d56:	1ac0      	subs	r0, r0, r3
   16d58:	4152      	adcs	r2, r2
   16d5a:	0a43      	lsrs	r3, r0, #9
   16d5c:	428b      	cmp	r3, r1
   16d5e:	d301      	bcc.n	16d64 <__divsi3+0x94>
   16d60:	024b      	lsls	r3, r1, #9
   16d62:	1ac0      	subs	r0, r0, r3
   16d64:	4152      	adcs	r2, r2
   16d66:	0a03      	lsrs	r3, r0, #8
   16d68:	428b      	cmp	r3, r1
   16d6a:	d301      	bcc.n	16d70 <__divsi3+0xa0>
   16d6c:	020b      	lsls	r3, r1, #8
   16d6e:	1ac0      	subs	r0, r0, r3
   16d70:	4152      	adcs	r2, r2
   16d72:	d2cd      	bcs.n	16d10 <__divsi3+0x40>
   16d74:	09c3      	lsrs	r3, r0, #7
   16d76:	428b      	cmp	r3, r1
   16d78:	d301      	bcc.n	16d7e <__divsi3+0xae>
   16d7a:	01cb      	lsls	r3, r1, #7
   16d7c:	1ac0      	subs	r0, r0, r3
   16d7e:	4152      	adcs	r2, r2
   16d80:	0983      	lsrs	r3, r0, #6
   16d82:	428b      	cmp	r3, r1
   16d84:	d301      	bcc.n	16d8a <__divsi3+0xba>
   16d86:	018b      	lsls	r3, r1, #6
   16d88:	1ac0      	subs	r0, r0, r3
   16d8a:	4152      	adcs	r2, r2
   16d8c:	0943      	lsrs	r3, r0, #5
   16d8e:	428b      	cmp	r3, r1
   16d90:	d301      	bcc.n	16d96 <__divsi3+0xc6>
   16d92:	014b      	lsls	r3, r1, #5
   16d94:	1ac0      	subs	r0, r0, r3
   16d96:	4152      	adcs	r2, r2
   16d98:	0903      	lsrs	r3, r0, #4
   16d9a:	428b      	cmp	r3, r1
   16d9c:	d301      	bcc.n	16da2 <__divsi3+0xd2>
   16d9e:	010b      	lsls	r3, r1, #4
   16da0:	1ac0      	subs	r0, r0, r3
   16da2:	4152      	adcs	r2, r2
   16da4:	08c3      	lsrs	r3, r0, #3
   16da6:	428b      	cmp	r3, r1
   16da8:	d301      	bcc.n	16dae <__divsi3+0xde>
   16daa:	00cb      	lsls	r3, r1, #3
   16dac:	1ac0      	subs	r0, r0, r3
   16dae:	4152      	adcs	r2, r2
   16db0:	0883      	lsrs	r3, r0, #2
   16db2:	428b      	cmp	r3, r1
   16db4:	d301      	bcc.n	16dba <__divsi3+0xea>
   16db6:	008b      	lsls	r3, r1, #2
   16db8:	1ac0      	subs	r0, r0, r3
   16dba:	4152      	adcs	r2, r2
   16dbc:	0843      	lsrs	r3, r0, #1
   16dbe:	428b      	cmp	r3, r1
   16dc0:	d301      	bcc.n	16dc6 <__divsi3+0xf6>
   16dc2:	004b      	lsls	r3, r1, #1
   16dc4:	1ac0      	subs	r0, r0, r3
   16dc6:	4152      	adcs	r2, r2
   16dc8:	1a41      	subs	r1, r0, r1
   16dca:	d200      	bcs.n	16dce <__divsi3+0xfe>
   16dcc:	4601      	mov	r1, r0
   16dce:	4152      	adcs	r2, r2
   16dd0:	4610      	mov	r0, r2
   16dd2:	4770      	bx	lr
   16dd4:	e05d      	b.n	16e92 <__divsi3+0x1c2>
   16dd6:	0fca      	lsrs	r2, r1, #31
   16dd8:	d000      	beq.n	16ddc <__divsi3+0x10c>
   16dda:	4249      	negs	r1, r1
   16ddc:	1003      	asrs	r3, r0, #32
   16dde:	d300      	bcc.n	16de2 <__divsi3+0x112>
   16de0:	4240      	negs	r0, r0
   16de2:	4053      	eors	r3, r2
   16de4:	2200      	movs	r2, #0
   16de6:	469c      	mov	ip, r3
   16de8:	0903      	lsrs	r3, r0, #4
   16dea:	428b      	cmp	r3, r1
   16dec:	d32d      	bcc.n	16e4a <__divsi3+0x17a>
   16dee:	0a03      	lsrs	r3, r0, #8
   16df0:	428b      	cmp	r3, r1
   16df2:	d312      	bcc.n	16e1a <__divsi3+0x14a>
   16df4:	22fc      	movs	r2, #252	; 0xfc
   16df6:	0189      	lsls	r1, r1, #6
   16df8:	ba12      	rev	r2, r2
   16dfa:	0a03      	lsrs	r3, r0, #8
   16dfc:	428b      	cmp	r3, r1
   16dfe:	d30c      	bcc.n	16e1a <__divsi3+0x14a>
   16e00:	0189      	lsls	r1, r1, #6
   16e02:	1192      	asrs	r2, r2, #6
   16e04:	428b      	cmp	r3, r1
   16e06:	d308      	bcc.n	16e1a <__divsi3+0x14a>
   16e08:	0189      	lsls	r1, r1, #6
   16e0a:	1192      	asrs	r2, r2, #6
   16e0c:	428b      	cmp	r3, r1
   16e0e:	d304      	bcc.n	16e1a <__divsi3+0x14a>
   16e10:	0189      	lsls	r1, r1, #6
   16e12:	d03a      	beq.n	16e8a <__divsi3+0x1ba>
   16e14:	1192      	asrs	r2, r2, #6
   16e16:	e000      	b.n	16e1a <__divsi3+0x14a>
   16e18:	0989      	lsrs	r1, r1, #6
   16e1a:	09c3      	lsrs	r3, r0, #7
   16e1c:	428b      	cmp	r3, r1
   16e1e:	d301      	bcc.n	16e24 <__divsi3+0x154>
   16e20:	01cb      	lsls	r3, r1, #7
   16e22:	1ac0      	subs	r0, r0, r3
   16e24:	4152      	adcs	r2, r2
   16e26:	0983      	lsrs	r3, r0, #6
   16e28:	428b      	cmp	r3, r1
   16e2a:	d301      	bcc.n	16e30 <__divsi3+0x160>
   16e2c:	018b      	lsls	r3, r1, #6
   16e2e:	1ac0      	subs	r0, r0, r3
   16e30:	4152      	adcs	r2, r2
   16e32:	0943      	lsrs	r3, r0, #5
   16e34:	428b      	cmp	r3, r1
   16e36:	d301      	bcc.n	16e3c <__divsi3+0x16c>
   16e38:	014b      	lsls	r3, r1, #5
   16e3a:	1ac0      	subs	r0, r0, r3
   16e3c:	4152      	adcs	r2, r2
   16e3e:	0903      	lsrs	r3, r0, #4
   16e40:	428b      	cmp	r3, r1
   16e42:	d301      	bcc.n	16e48 <__divsi3+0x178>
   16e44:	010b      	lsls	r3, r1, #4
   16e46:	1ac0      	subs	r0, r0, r3
   16e48:	4152      	adcs	r2, r2
   16e4a:	08c3      	lsrs	r3, r0, #3
   16e4c:	428b      	cmp	r3, r1
   16e4e:	d301      	bcc.n	16e54 <__divsi3+0x184>
   16e50:	00cb      	lsls	r3, r1, #3
   16e52:	1ac0      	subs	r0, r0, r3
   16e54:	4152      	adcs	r2, r2
   16e56:	0883      	lsrs	r3, r0, #2
   16e58:	428b      	cmp	r3, r1
   16e5a:	d301      	bcc.n	16e60 <__divsi3+0x190>
   16e5c:	008b      	lsls	r3, r1, #2
   16e5e:	1ac0      	subs	r0, r0, r3
   16e60:	4152      	adcs	r2, r2
   16e62:	d2d9      	bcs.n	16e18 <__divsi3+0x148>
   16e64:	0843      	lsrs	r3, r0, #1
   16e66:	428b      	cmp	r3, r1
   16e68:	d301      	bcc.n	16e6e <__divsi3+0x19e>
   16e6a:	004b      	lsls	r3, r1, #1
   16e6c:	1ac0      	subs	r0, r0, r3
   16e6e:	4152      	adcs	r2, r2
   16e70:	1a41      	subs	r1, r0, r1
   16e72:	d200      	bcs.n	16e76 <__divsi3+0x1a6>
   16e74:	4601      	mov	r1, r0
   16e76:	4663      	mov	r3, ip
   16e78:	4152      	adcs	r2, r2
   16e7a:	105b      	asrs	r3, r3, #1
   16e7c:	4610      	mov	r0, r2
   16e7e:	d301      	bcc.n	16e84 <__divsi3+0x1b4>
   16e80:	4240      	negs	r0, r0
   16e82:	2b00      	cmp	r3, #0
   16e84:	d500      	bpl.n	16e88 <__divsi3+0x1b8>
   16e86:	4249      	negs	r1, r1
   16e88:	4770      	bx	lr
   16e8a:	4663      	mov	r3, ip
   16e8c:	105b      	asrs	r3, r3, #1
   16e8e:	d300      	bcc.n	16e92 <__divsi3+0x1c2>
   16e90:	4240      	negs	r0, r0
   16e92:	b501      	push	{r0, lr}
   16e94:	2000      	movs	r0, #0
   16e96:	f000 f805 	bl	16ea4 <__aeabi_idiv0>
   16e9a:	bd02      	pop	{r1, pc}

00016e9c <__aeabi_idivmod>:
   16e9c:	2900      	cmp	r1, #0
   16e9e:	d0f8      	beq.n	16e92 <__divsi3+0x1c2>
   16ea0:	e716      	b.n	16cd0 <__divsi3>
   16ea2:	4770      	bx	lr

00016ea4 <__aeabi_idiv0>:
   16ea4:	4770      	bx	lr
   16ea6:	46c0      	nop			; (mov r8, r8)

00016ea8 <__aeabi_lmul>:
   16ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eaa:	46ce      	mov	lr, r9
   16eac:	4647      	mov	r7, r8
   16eae:	0415      	lsls	r5, r2, #16
   16eb0:	0c2d      	lsrs	r5, r5, #16
   16eb2:	002e      	movs	r6, r5
   16eb4:	b580      	push	{r7, lr}
   16eb6:	0407      	lsls	r7, r0, #16
   16eb8:	0c14      	lsrs	r4, r2, #16
   16eba:	0c3f      	lsrs	r7, r7, #16
   16ebc:	4699      	mov	r9, r3
   16ebe:	0c03      	lsrs	r3, r0, #16
   16ec0:	437e      	muls	r6, r7
   16ec2:	435d      	muls	r5, r3
   16ec4:	4367      	muls	r7, r4
   16ec6:	4363      	muls	r3, r4
   16ec8:	197f      	adds	r7, r7, r5
   16eca:	0c34      	lsrs	r4, r6, #16
   16ecc:	19e4      	adds	r4, r4, r7
   16ece:	469c      	mov	ip, r3
   16ed0:	42a5      	cmp	r5, r4
   16ed2:	d903      	bls.n	16edc <__aeabi_lmul+0x34>
   16ed4:	2380      	movs	r3, #128	; 0x80
   16ed6:	025b      	lsls	r3, r3, #9
   16ed8:	4698      	mov	r8, r3
   16eda:	44c4      	add	ip, r8
   16edc:	464b      	mov	r3, r9
   16ede:	4351      	muls	r1, r2
   16ee0:	4343      	muls	r3, r0
   16ee2:	0436      	lsls	r6, r6, #16
   16ee4:	0c36      	lsrs	r6, r6, #16
   16ee6:	0c25      	lsrs	r5, r4, #16
   16ee8:	0424      	lsls	r4, r4, #16
   16eea:	4465      	add	r5, ip
   16eec:	19a4      	adds	r4, r4, r6
   16eee:	1859      	adds	r1, r3, r1
   16ef0:	1949      	adds	r1, r1, r5
   16ef2:	0020      	movs	r0, r4
   16ef4:	bc0c      	pop	{r2, r3}
   16ef6:	4690      	mov	r8, r2
   16ef8:	4699      	mov	r9, r3
   16efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016efc <atoi>:
   16efc:	b510      	push	{r4, lr}
   16efe:	220a      	movs	r2, #10
   16f00:	2100      	movs	r1, #0
   16f02:	f000 fb9f 	bl	17644 <strtol>
   16f06:	bd10      	pop	{r4, pc}

00016f08 <__libc_init_array>:
   16f08:	b570      	push	{r4, r5, r6, lr}
   16f0a:	2600      	movs	r6, #0
   16f0c:	4d0c      	ldr	r5, [pc, #48]	; (16f40 <__libc_init_array+0x38>)
   16f0e:	4c0d      	ldr	r4, [pc, #52]	; (16f44 <__libc_init_array+0x3c>)
   16f10:	1b64      	subs	r4, r4, r5
   16f12:	10a4      	asrs	r4, r4, #2
   16f14:	42a6      	cmp	r6, r4
   16f16:	d109      	bne.n	16f2c <__libc_init_array+0x24>
   16f18:	2600      	movs	r6, #0
   16f1a:	f003 fcef 	bl	1a8fc <_init>
   16f1e:	4d0a      	ldr	r5, [pc, #40]	; (16f48 <__libc_init_array+0x40>)
   16f20:	4c0a      	ldr	r4, [pc, #40]	; (16f4c <__libc_init_array+0x44>)
   16f22:	1b64      	subs	r4, r4, r5
   16f24:	10a4      	asrs	r4, r4, #2
   16f26:	42a6      	cmp	r6, r4
   16f28:	d105      	bne.n	16f36 <__libc_init_array+0x2e>
   16f2a:	bd70      	pop	{r4, r5, r6, pc}
   16f2c:	00b3      	lsls	r3, r6, #2
   16f2e:	58eb      	ldr	r3, [r5, r3]
   16f30:	4798      	blx	r3
   16f32:	3601      	adds	r6, #1
   16f34:	e7ee      	b.n	16f14 <__libc_init_array+0xc>
   16f36:	00b3      	lsls	r3, r6, #2
   16f38:	58eb      	ldr	r3, [r5, r3]
   16f3a:	4798      	blx	r3
   16f3c:	3601      	adds	r6, #1
   16f3e:	e7f2      	b.n	16f26 <__libc_init_array+0x1e>
   16f40:	0001a908 	.word	0x0001a908
   16f44:	0001a908 	.word	0x0001a908
   16f48:	0001a908 	.word	0x0001a908
   16f4c:	0001a90c 	.word	0x0001a90c

00016f50 <malloc>:
   16f50:	b510      	push	{r4, lr}
   16f52:	4b03      	ldr	r3, [pc, #12]	; (16f60 <malloc+0x10>)
   16f54:	0001      	movs	r1, r0
   16f56:	6818      	ldr	r0, [r3, #0]
   16f58:	f000 f87c 	bl	17054 <_malloc_r>
   16f5c:	bd10      	pop	{r4, pc}
   16f5e:	46c0      	nop			; (mov r8, r8)
   16f60:	20000150 	.word	0x20000150

00016f64 <free>:
   16f64:	b510      	push	{r4, lr}
   16f66:	4b03      	ldr	r3, [pc, #12]	; (16f74 <free+0x10>)
   16f68:	0001      	movs	r1, r0
   16f6a:	6818      	ldr	r0, [r3, #0]
   16f6c:	f000 f828 	bl	16fc0 <_free_r>
   16f70:	bd10      	pop	{r4, pc}
   16f72:	46c0      	nop			; (mov r8, r8)
   16f74:	20000150 	.word	0x20000150

00016f78 <memcpy>:
   16f78:	2300      	movs	r3, #0
   16f7a:	b510      	push	{r4, lr}
   16f7c:	429a      	cmp	r2, r3
   16f7e:	d100      	bne.n	16f82 <memcpy+0xa>
   16f80:	bd10      	pop	{r4, pc}
   16f82:	5ccc      	ldrb	r4, [r1, r3]
   16f84:	54c4      	strb	r4, [r0, r3]
   16f86:	3301      	adds	r3, #1
   16f88:	e7f8      	b.n	16f7c <memcpy+0x4>

00016f8a <memmove>:
   16f8a:	b510      	push	{r4, lr}
   16f8c:	4288      	cmp	r0, r1
   16f8e:	d902      	bls.n	16f96 <memmove+0xc>
   16f90:	188b      	adds	r3, r1, r2
   16f92:	4298      	cmp	r0, r3
   16f94:	d308      	bcc.n	16fa8 <memmove+0x1e>
   16f96:	2300      	movs	r3, #0
   16f98:	429a      	cmp	r2, r3
   16f9a:	d007      	beq.n	16fac <memmove+0x22>
   16f9c:	5ccc      	ldrb	r4, [r1, r3]
   16f9e:	54c4      	strb	r4, [r0, r3]
   16fa0:	3301      	adds	r3, #1
   16fa2:	e7f9      	b.n	16f98 <memmove+0xe>
   16fa4:	5c8b      	ldrb	r3, [r1, r2]
   16fa6:	5483      	strb	r3, [r0, r2]
   16fa8:	3a01      	subs	r2, #1
   16faa:	d2fb      	bcs.n	16fa4 <memmove+0x1a>
   16fac:	bd10      	pop	{r4, pc}

00016fae <memset>:
   16fae:	0003      	movs	r3, r0
   16fb0:	1882      	adds	r2, r0, r2
   16fb2:	4293      	cmp	r3, r2
   16fb4:	d100      	bne.n	16fb8 <memset+0xa>
   16fb6:	4770      	bx	lr
   16fb8:	7019      	strb	r1, [r3, #0]
   16fba:	3301      	adds	r3, #1
   16fbc:	e7f9      	b.n	16fb2 <memset+0x4>
	...

00016fc0 <_free_r>:
   16fc0:	b570      	push	{r4, r5, r6, lr}
   16fc2:	0005      	movs	r5, r0
   16fc4:	2900      	cmp	r1, #0
   16fc6:	d010      	beq.n	16fea <_free_r+0x2a>
   16fc8:	1f0c      	subs	r4, r1, #4
   16fca:	6823      	ldr	r3, [r4, #0]
   16fcc:	2b00      	cmp	r3, #0
   16fce:	da00      	bge.n	16fd2 <_free_r+0x12>
   16fd0:	18e4      	adds	r4, r4, r3
   16fd2:	0028      	movs	r0, r5
   16fd4:	f000 fe24 	bl	17c20 <__malloc_lock>
   16fd8:	4a1d      	ldr	r2, [pc, #116]	; (17050 <_free_r+0x90>)
   16fda:	6813      	ldr	r3, [r2, #0]
   16fdc:	2b00      	cmp	r3, #0
   16fde:	d105      	bne.n	16fec <_free_r+0x2c>
   16fe0:	6063      	str	r3, [r4, #4]
   16fe2:	6014      	str	r4, [r2, #0]
   16fe4:	0028      	movs	r0, r5
   16fe6:	f000 fe1c 	bl	17c22 <__malloc_unlock>
   16fea:	bd70      	pop	{r4, r5, r6, pc}
   16fec:	42a3      	cmp	r3, r4
   16fee:	d909      	bls.n	17004 <_free_r+0x44>
   16ff0:	6821      	ldr	r1, [r4, #0]
   16ff2:	1860      	adds	r0, r4, r1
   16ff4:	4283      	cmp	r3, r0
   16ff6:	d1f3      	bne.n	16fe0 <_free_r+0x20>
   16ff8:	6818      	ldr	r0, [r3, #0]
   16ffa:	685b      	ldr	r3, [r3, #4]
   16ffc:	1841      	adds	r1, r0, r1
   16ffe:	6021      	str	r1, [r4, #0]
   17000:	e7ee      	b.n	16fe0 <_free_r+0x20>
   17002:	0013      	movs	r3, r2
   17004:	685a      	ldr	r2, [r3, #4]
   17006:	2a00      	cmp	r2, #0
   17008:	d001      	beq.n	1700e <_free_r+0x4e>
   1700a:	42a2      	cmp	r2, r4
   1700c:	d9f9      	bls.n	17002 <_free_r+0x42>
   1700e:	6819      	ldr	r1, [r3, #0]
   17010:	1858      	adds	r0, r3, r1
   17012:	42a0      	cmp	r0, r4
   17014:	d10b      	bne.n	1702e <_free_r+0x6e>
   17016:	6820      	ldr	r0, [r4, #0]
   17018:	1809      	adds	r1, r1, r0
   1701a:	1858      	adds	r0, r3, r1
   1701c:	6019      	str	r1, [r3, #0]
   1701e:	4282      	cmp	r2, r0
   17020:	d1e0      	bne.n	16fe4 <_free_r+0x24>
   17022:	6810      	ldr	r0, [r2, #0]
   17024:	6852      	ldr	r2, [r2, #4]
   17026:	1841      	adds	r1, r0, r1
   17028:	6019      	str	r1, [r3, #0]
   1702a:	605a      	str	r2, [r3, #4]
   1702c:	e7da      	b.n	16fe4 <_free_r+0x24>
   1702e:	42a0      	cmp	r0, r4
   17030:	d902      	bls.n	17038 <_free_r+0x78>
   17032:	230c      	movs	r3, #12
   17034:	602b      	str	r3, [r5, #0]
   17036:	e7d5      	b.n	16fe4 <_free_r+0x24>
   17038:	6821      	ldr	r1, [r4, #0]
   1703a:	1860      	adds	r0, r4, r1
   1703c:	4282      	cmp	r2, r0
   1703e:	d103      	bne.n	17048 <_free_r+0x88>
   17040:	6810      	ldr	r0, [r2, #0]
   17042:	6852      	ldr	r2, [r2, #4]
   17044:	1841      	adds	r1, r0, r1
   17046:	6021      	str	r1, [r4, #0]
   17048:	6062      	str	r2, [r4, #4]
   1704a:	605c      	str	r4, [r3, #4]
   1704c:	e7ca      	b.n	16fe4 <_free_r+0x24>
   1704e:	46c0      	nop			; (mov r8, r8)
   17050:	20000ef0 	.word	0x20000ef0

00017054 <_malloc_r>:
   17054:	2303      	movs	r3, #3
   17056:	b570      	push	{r4, r5, r6, lr}
   17058:	1ccd      	adds	r5, r1, #3
   1705a:	439d      	bics	r5, r3
   1705c:	3508      	adds	r5, #8
   1705e:	0006      	movs	r6, r0
   17060:	2d0c      	cmp	r5, #12
   17062:	d21e      	bcs.n	170a2 <_malloc_r+0x4e>
   17064:	250c      	movs	r5, #12
   17066:	42a9      	cmp	r1, r5
   17068:	d81d      	bhi.n	170a6 <_malloc_r+0x52>
   1706a:	0030      	movs	r0, r6
   1706c:	f000 fdd8 	bl	17c20 <__malloc_lock>
   17070:	4a25      	ldr	r2, [pc, #148]	; (17108 <_malloc_r+0xb4>)
   17072:	6814      	ldr	r4, [r2, #0]
   17074:	0021      	movs	r1, r4
   17076:	2900      	cmp	r1, #0
   17078:	d119      	bne.n	170ae <_malloc_r+0x5a>
   1707a:	4c24      	ldr	r4, [pc, #144]	; (1710c <_malloc_r+0xb8>)
   1707c:	6823      	ldr	r3, [r4, #0]
   1707e:	2b00      	cmp	r3, #0
   17080:	d103      	bne.n	1708a <_malloc_r+0x36>
   17082:	0030      	movs	r0, r6
   17084:	f000 f8dc 	bl	17240 <_sbrk_r>
   17088:	6020      	str	r0, [r4, #0]
   1708a:	0029      	movs	r1, r5
   1708c:	0030      	movs	r0, r6
   1708e:	f000 f8d7 	bl	17240 <_sbrk_r>
   17092:	1c43      	adds	r3, r0, #1
   17094:	d12c      	bne.n	170f0 <_malloc_r+0x9c>
   17096:	230c      	movs	r3, #12
   17098:	0030      	movs	r0, r6
   1709a:	6033      	str	r3, [r6, #0]
   1709c:	f000 fdc1 	bl	17c22 <__malloc_unlock>
   170a0:	e003      	b.n	170aa <_malloc_r+0x56>
   170a2:	2d00      	cmp	r5, #0
   170a4:	dadf      	bge.n	17066 <_malloc_r+0x12>
   170a6:	230c      	movs	r3, #12
   170a8:	6033      	str	r3, [r6, #0]
   170aa:	2000      	movs	r0, #0
   170ac:	bd70      	pop	{r4, r5, r6, pc}
   170ae:	680b      	ldr	r3, [r1, #0]
   170b0:	1b5b      	subs	r3, r3, r5
   170b2:	d41a      	bmi.n	170ea <_malloc_r+0x96>
   170b4:	2b0b      	cmp	r3, #11
   170b6:	d903      	bls.n	170c0 <_malloc_r+0x6c>
   170b8:	600b      	str	r3, [r1, #0]
   170ba:	18cc      	adds	r4, r1, r3
   170bc:	6025      	str	r5, [r4, #0]
   170be:	e003      	b.n	170c8 <_malloc_r+0x74>
   170c0:	428c      	cmp	r4, r1
   170c2:	d10e      	bne.n	170e2 <_malloc_r+0x8e>
   170c4:	6863      	ldr	r3, [r4, #4]
   170c6:	6013      	str	r3, [r2, #0]
   170c8:	0030      	movs	r0, r6
   170ca:	f000 fdaa 	bl	17c22 <__malloc_unlock>
   170ce:	0020      	movs	r0, r4
   170d0:	2207      	movs	r2, #7
   170d2:	300b      	adds	r0, #11
   170d4:	1d23      	adds	r3, r4, #4
   170d6:	4390      	bics	r0, r2
   170d8:	1ac3      	subs	r3, r0, r3
   170da:	d0e7      	beq.n	170ac <_malloc_r+0x58>
   170dc:	425a      	negs	r2, r3
   170de:	50e2      	str	r2, [r4, r3]
   170e0:	e7e4      	b.n	170ac <_malloc_r+0x58>
   170e2:	684b      	ldr	r3, [r1, #4]
   170e4:	6063      	str	r3, [r4, #4]
   170e6:	000c      	movs	r4, r1
   170e8:	e7ee      	b.n	170c8 <_malloc_r+0x74>
   170ea:	000c      	movs	r4, r1
   170ec:	6849      	ldr	r1, [r1, #4]
   170ee:	e7c2      	b.n	17076 <_malloc_r+0x22>
   170f0:	2303      	movs	r3, #3
   170f2:	1cc4      	adds	r4, r0, #3
   170f4:	439c      	bics	r4, r3
   170f6:	42a0      	cmp	r0, r4
   170f8:	d0e0      	beq.n	170bc <_malloc_r+0x68>
   170fa:	1a21      	subs	r1, r4, r0
   170fc:	0030      	movs	r0, r6
   170fe:	f000 f89f 	bl	17240 <_sbrk_r>
   17102:	1c43      	adds	r3, r0, #1
   17104:	d1da      	bne.n	170bc <_malloc_r+0x68>
   17106:	e7c6      	b.n	17096 <_malloc_r+0x42>
   17108:	20000ef0 	.word	0x20000ef0
   1710c:	20000ef4 	.word	0x20000ef4

00017110 <iprintf>:
   17110:	b40f      	push	{r0, r1, r2, r3}
   17112:	4b0b      	ldr	r3, [pc, #44]	; (17140 <iprintf+0x30>)
   17114:	b513      	push	{r0, r1, r4, lr}
   17116:	681c      	ldr	r4, [r3, #0]
   17118:	2c00      	cmp	r4, #0
   1711a:	d005      	beq.n	17128 <iprintf+0x18>
   1711c:	69a3      	ldr	r3, [r4, #24]
   1711e:	2b00      	cmp	r3, #0
   17120:	d102      	bne.n	17128 <iprintf+0x18>
   17122:	0020      	movs	r0, r4
   17124:	f000 fc66 	bl	179f4 <__sinit>
   17128:	ab05      	add	r3, sp, #20
   1712a:	9a04      	ldr	r2, [sp, #16]
   1712c:	68a1      	ldr	r1, [r4, #8]
   1712e:	0020      	movs	r0, r4
   17130:	9301      	str	r3, [sp, #4]
   17132:	f000 ff05 	bl	17f40 <_vfiprintf_r>
   17136:	bc16      	pop	{r1, r2, r4}
   17138:	bc08      	pop	{r3}
   1713a:	b004      	add	sp, #16
   1713c:	4718      	bx	r3
   1713e:	46c0      	nop			; (mov r8, r8)
   17140:	20000150 	.word	0x20000150

00017144 <putchar>:
   17144:	4b08      	ldr	r3, [pc, #32]	; (17168 <putchar+0x24>)
   17146:	b570      	push	{r4, r5, r6, lr}
   17148:	681c      	ldr	r4, [r3, #0]
   1714a:	0005      	movs	r5, r0
   1714c:	2c00      	cmp	r4, #0
   1714e:	d005      	beq.n	1715c <putchar+0x18>
   17150:	69a3      	ldr	r3, [r4, #24]
   17152:	2b00      	cmp	r3, #0
   17154:	d102      	bne.n	1715c <putchar+0x18>
   17156:	0020      	movs	r0, r4
   17158:	f000 fc4c 	bl	179f4 <__sinit>
   1715c:	0029      	movs	r1, r5
   1715e:	68a2      	ldr	r2, [r4, #8]
   17160:	0020      	movs	r0, r4
   17162:	f001 f991 	bl	18488 <_putc_r>
   17166:	bd70      	pop	{r4, r5, r6, pc}
   17168:	20000150 	.word	0x20000150

0001716c <_puts_r>:
   1716c:	b570      	push	{r4, r5, r6, lr}
   1716e:	0005      	movs	r5, r0
   17170:	000e      	movs	r6, r1
   17172:	2800      	cmp	r0, #0
   17174:	d004      	beq.n	17180 <_puts_r+0x14>
   17176:	6983      	ldr	r3, [r0, #24]
   17178:	2b00      	cmp	r3, #0
   1717a:	d101      	bne.n	17180 <_puts_r+0x14>
   1717c:	f000 fc3a 	bl	179f4 <__sinit>
   17180:	69ab      	ldr	r3, [r5, #24]
   17182:	68ac      	ldr	r4, [r5, #8]
   17184:	2b00      	cmp	r3, #0
   17186:	d102      	bne.n	1718e <_puts_r+0x22>
   17188:	0028      	movs	r0, r5
   1718a:	f000 fc33 	bl	179f4 <__sinit>
   1718e:	4b24      	ldr	r3, [pc, #144]	; (17220 <_puts_r+0xb4>)
   17190:	429c      	cmp	r4, r3
   17192:	d10f      	bne.n	171b4 <_puts_r+0x48>
   17194:	686c      	ldr	r4, [r5, #4]
   17196:	89a3      	ldrh	r3, [r4, #12]
   17198:	071b      	lsls	r3, r3, #28
   1719a:	d502      	bpl.n	171a2 <_puts_r+0x36>
   1719c:	6923      	ldr	r3, [r4, #16]
   1719e:	2b00      	cmp	r3, #0
   171a0:	d120      	bne.n	171e4 <_puts_r+0x78>
   171a2:	0021      	movs	r1, r4
   171a4:	0028      	movs	r0, r5
   171a6:	f000 fab7 	bl	17718 <__swsetup_r>
   171aa:	2800      	cmp	r0, #0
   171ac:	d01a      	beq.n	171e4 <_puts_r+0x78>
   171ae:	2001      	movs	r0, #1
   171b0:	4240      	negs	r0, r0
   171b2:	bd70      	pop	{r4, r5, r6, pc}
   171b4:	4b1b      	ldr	r3, [pc, #108]	; (17224 <_puts_r+0xb8>)
   171b6:	429c      	cmp	r4, r3
   171b8:	d101      	bne.n	171be <_puts_r+0x52>
   171ba:	68ac      	ldr	r4, [r5, #8]
   171bc:	e7eb      	b.n	17196 <_puts_r+0x2a>
   171be:	4b1a      	ldr	r3, [pc, #104]	; (17228 <_puts_r+0xbc>)
   171c0:	429c      	cmp	r4, r3
   171c2:	d1e8      	bne.n	17196 <_puts_r+0x2a>
   171c4:	68ec      	ldr	r4, [r5, #12]
   171c6:	e7e6      	b.n	17196 <_puts_r+0x2a>
   171c8:	3b01      	subs	r3, #1
   171ca:	3601      	adds	r6, #1
   171cc:	60a3      	str	r3, [r4, #8]
   171ce:	2b00      	cmp	r3, #0
   171d0:	da04      	bge.n	171dc <_puts_r+0x70>
   171d2:	69a2      	ldr	r2, [r4, #24]
   171d4:	4293      	cmp	r3, r2
   171d6:	db16      	blt.n	17206 <_puts_r+0x9a>
   171d8:	290a      	cmp	r1, #10
   171da:	d014      	beq.n	17206 <_puts_r+0x9a>
   171dc:	6823      	ldr	r3, [r4, #0]
   171de:	1c5a      	adds	r2, r3, #1
   171e0:	6022      	str	r2, [r4, #0]
   171e2:	7019      	strb	r1, [r3, #0]
   171e4:	7831      	ldrb	r1, [r6, #0]
   171e6:	68a3      	ldr	r3, [r4, #8]
   171e8:	2900      	cmp	r1, #0
   171ea:	d1ed      	bne.n	171c8 <_puts_r+0x5c>
   171ec:	3b01      	subs	r3, #1
   171ee:	60a3      	str	r3, [r4, #8]
   171f0:	2b00      	cmp	r3, #0
   171f2:	da0f      	bge.n	17214 <_puts_r+0xa8>
   171f4:	0022      	movs	r2, r4
   171f6:	310a      	adds	r1, #10
   171f8:	0028      	movs	r0, r5
   171fa:	f000 fa37 	bl	1766c <__swbuf_r>
   171fe:	1c43      	adds	r3, r0, #1
   17200:	d0d5      	beq.n	171ae <_puts_r+0x42>
   17202:	200a      	movs	r0, #10
   17204:	e7d5      	b.n	171b2 <_puts_r+0x46>
   17206:	0022      	movs	r2, r4
   17208:	0028      	movs	r0, r5
   1720a:	f000 fa2f 	bl	1766c <__swbuf_r>
   1720e:	1c43      	adds	r3, r0, #1
   17210:	d1e8      	bne.n	171e4 <_puts_r+0x78>
   17212:	e7cc      	b.n	171ae <_puts_r+0x42>
   17214:	200a      	movs	r0, #10
   17216:	6823      	ldr	r3, [r4, #0]
   17218:	1c5a      	adds	r2, r3, #1
   1721a:	6022      	str	r2, [r4, #0]
   1721c:	7018      	strb	r0, [r3, #0]
   1721e:	e7c8      	b.n	171b2 <_puts_r+0x46>
   17220:	0001a77c 	.word	0x0001a77c
   17224:	0001a79c 	.word	0x0001a79c
   17228:	0001a75c 	.word	0x0001a75c

0001722c <puts>:
   1722c:	b510      	push	{r4, lr}
   1722e:	4b03      	ldr	r3, [pc, #12]	; (1723c <puts+0x10>)
   17230:	0001      	movs	r1, r0
   17232:	6818      	ldr	r0, [r3, #0]
   17234:	f7ff ff9a 	bl	1716c <_puts_r>
   17238:	bd10      	pop	{r4, pc}
   1723a:	46c0      	nop			; (mov r8, r8)
   1723c:	20000150 	.word	0x20000150

00017240 <_sbrk_r>:
   17240:	2300      	movs	r3, #0
   17242:	b570      	push	{r4, r5, r6, lr}
   17244:	4c06      	ldr	r4, [pc, #24]	; (17260 <_sbrk_r+0x20>)
   17246:	0005      	movs	r5, r0
   17248:	0008      	movs	r0, r1
   1724a:	6023      	str	r3, [r4, #0]
   1724c:	f7fa fd7e 	bl	11d4c <_sbrk>
   17250:	1c43      	adds	r3, r0, #1
   17252:	d103      	bne.n	1725c <_sbrk_r+0x1c>
   17254:	6823      	ldr	r3, [r4, #0]
   17256:	2b00      	cmp	r3, #0
   17258:	d000      	beq.n	1725c <_sbrk_r+0x1c>
   1725a:	602b      	str	r3, [r5, #0]
   1725c:	bd70      	pop	{r4, r5, r6, pc}
   1725e:	46c0      	nop			; (mov r8, r8)
   17260:	20001638 	.word	0x20001638

00017264 <setbuf>:
   17264:	424a      	negs	r2, r1
   17266:	414a      	adcs	r2, r1
   17268:	2380      	movs	r3, #128	; 0x80
   1726a:	b510      	push	{r4, lr}
   1726c:	0052      	lsls	r2, r2, #1
   1726e:	00db      	lsls	r3, r3, #3
   17270:	f000 f802 	bl	17278 <setvbuf>
   17274:	bd10      	pop	{r4, pc}
	...

00017278 <setvbuf>:
   17278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1727a:	001d      	movs	r5, r3
   1727c:	4b4f      	ldr	r3, [pc, #316]	; (173bc <setvbuf+0x144>)
   1727e:	b085      	sub	sp, #20
   17280:	681e      	ldr	r6, [r3, #0]
   17282:	0004      	movs	r4, r0
   17284:	000f      	movs	r7, r1
   17286:	9200      	str	r2, [sp, #0]
   17288:	2e00      	cmp	r6, #0
   1728a:	d005      	beq.n	17298 <setvbuf+0x20>
   1728c:	69b3      	ldr	r3, [r6, #24]
   1728e:	2b00      	cmp	r3, #0
   17290:	d102      	bne.n	17298 <setvbuf+0x20>
   17292:	0030      	movs	r0, r6
   17294:	f000 fbae 	bl	179f4 <__sinit>
   17298:	4b49      	ldr	r3, [pc, #292]	; (173c0 <setvbuf+0x148>)
   1729a:	429c      	cmp	r4, r3
   1729c:	d150      	bne.n	17340 <setvbuf+0xc8>
   1729e:	6874      	ldr	r4, [r6, #4]
   172a0:	9b00      	ldr	r3, [sp, #0]
   172a2:	2b02      	cmp	r3, #2
   172a4:	d005      	beq.n	172b2 <setvbuf+0x3a>
   172a6:	2b01      	cmp	r3, #1
   172a8:	d900      	bls.n	172ac <setvbuf+0x34>
   172aa:	e084      	b.n	173b6 <setvbuf+0x13e>
   172ac:	2d00      	cmp	r5, #0
   172ae:	da00      	bge.n	172b2 <setvbuf+0x3a>
   172b0:	e081      	b.n	173b6 <setvbuf+0x13e>
   172b2:	0021      	movs	r1, r4
   172b4:	0030      	movs	r0, r6
   172b6:	f000 fb2f 	bl	17918 <_fflush_r>
   172ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
   172bc:	2900      	cmp	r1, #0
   172be:	d008      	beq.n	172d2 <setvbuf+0x5a>
   172c0:	0023      	movs	r3, r4
   172c2:	3344      	adds	r3, #68	; 0x44
   172c4:	4299      	cmp	r1, r3
   172c6:	d002      	beq.n	172ce <setvbuf+0x56>
   172c8:	0030      	movs	r0, r6
   172ca:	f7ff fe79 	bl	16fc0 <_free_r>
   172ce:	2300      	movs	r3, #0
   172d0:	6363      	str	r3, [r4, #52]	; 0x34
   172d2:	2300      	movs	r3, #0
   172d4:	61a3      	str	r3, [r4, #24]
   172d6:	6063      	str	r3, [r4, #4]
   172d8:	89a3      	ldrh	r3, [r4, #12]
   172da:	061b      	lsls	r3, r3, #24
   172dc:	d503      	bpl.n	172e6 <setvbuf+0x6e>
   172de:	6921      	ldr	r1, [r4, #16]
   172e0:	0030      	movs	r0, r6
   172e2:	f7ff fe6d 	bl	16fc0 <_free_r>
   172e6:	89a3      	ldrh	r3, [r4, #12]
   172e8:	4a36      	ldr	r2, [pc, #216]	; (173c4 <setvbuf+0x14c>)
   172ea:	4013      	ands	r3, r2
   172ec:	81a3      	strh	r3, [r4, #12]
   172ee:	9b00      	ldr	r3, [sp, #0]
   172f0:	2b02      	cmp	r3, #2
   172f2:	d05a      	beq.n	173aa <setvbuf+0x132>
   172f4:	ab03      	add	r3, sp, #12
   172f6:	aa02      	add	r2, sp, #8
   172f8:	0021      	movs	r1, r4
   172fa:	0030      	movs	r0, r6
   172fc:	f000 fc12 	bl	17b24 <__swhatbuf_r>
   17300:	89a3      	ldrh	r3, [r4, #12]
   17302:	4318      	orrs	r0, r3
   17304:	81a0      	strh	r0, [r4, #12]
   17306:	2d00      	cmp	r5, #0
   17308:	d124      	bne.n	17354 <setvbuf+0xdc>
   1730a:	9d02      	ldr	r5, [sp, #8]
   1730c:	0028      	movs	r0, r5
   1730e:	f7ff fe1f 	bl	16f50 <malloc>
   17312:	9501      	str	r5, [sp, #4]
   17314:	1e07      	subs	r7, r0, #0
   17316:	d142      	bne.n	1739e <setvbuf+0x126>
   17318:	9b02      	ldr	r3, [sp, #8]
   1731a:	9301      	str	r3, [sp, #4]
   1731c:	42ab      	cmp	r3, r5
   1731e:	d139      	bne.n	17394 <setvbuf+0x11c>
   17320:	2001      	movs	r0, #1
   17322:	4240      	negs	r0, r0
   17324:	2302      	movs	r3, #2
   17326:	89a2      	ldrh	r2, [r4, #12]
   17328:	4313      	orrs	r3, r2
   1732a:	81a3      	strh	r3, [r4, #12]
   1732c:	2300      	movs	r3, #0
   1732e:	60a3      	str	r3, [r4, #8]
   17330:	0023      	movs	r3, r4
   17332:	3347      	adds	r3, #71	; 0x47
   17334:	6023      	str	r3, [r4, #0]
   17336:	6123      	str	r3, [r4, #16]
   17338:	2301      	movs	r3, #1
   1733a:	6163      	str	r3, [r4, #20]
   1733c:	b005      	add	sp, #20
   1733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17340:	4b21      	ldr	r3, [pc, #132]	; (173c8 <setvbuf+0x150>)
   17342:	429c      	cmp	r4, r3
   17344:	d101      	bne.n	1734a <setvbuf+0xd2>
   17346:	68b4      	ldr	r4, [r6, #8]
   17348:	e7aa      	b.n	172a0 <setvbuf+0x28>
   1734a:	4b20      	ldr	r3, [pc, #128]	; (173cc <setvbuf+0x154>)
   1734c:	429c      	cmp	r4, r3
   1734e:	d1a7      	bne.n	172a0 <setvbuf+0x28>
   17350:	68f4      	ldr	r4, [r6, #12]
   17352:	e7a5      	b.n	172a0 <setvbuf+0x28>
   17354:	2f00      	cmp	r7, #0
   17356:	d0d9      	beq.n	1730c <setvbuf+0x94>
   17358:	69b3      	ldr	r3, [r6, #24]
   1735a:	2b00      	cmp	r3, #0
   1735c:	d102      	bne.n	17364 <setvbuf+0xec>
   1735e:	0030      	movs	r0, r6
   17360:	f000 fb48 	bl	179f4 <__sinit>
   17364:	9b00      	ldr	r3, [sp, #0]
   17366:	2b01      	cmp	r3, #1
   17368:	d103      	bne.n	17372 <setvbuf+0xfa>
   1736a:	89a3      	ldrh	r3, [r4, #12]
   1736c:	9a00      	ldr	r2, [sp, #0]
   1736e:	431a      	orrs	r2, r3
   17370:	81a2      	strh	r2, [r4, #12]
   17372:	2008      	movs	r0, #8
   17374:	89a3      	ldrh	r3, [r4, #12]
   17376:	6027      	str	r7, [r4, #0]
   17378:	6127      	str	r7, [r4, #16]
   1737a:	6165      	str	r5, [r4, #20]
   1737c:	4018      	ands	r0, r3
   1737e:	d018      	beq.n	173b2 <setvbuf+0x13a>
   17380:	2001      	movs	r0, #1
   17382:	4018      	ands	r0, r3
   17384:	2300      	movs	r3, #0
   17386:	4298      	cmp	r0, r3
   17388:	d011      	beq.n	173ae <setvbuf+0x136>
   1738a:	426d      	negs	r5, r5
   1738c:	60a3      	str	r3, [r4, #8]
   1738e:	61a5      	str	r5, [r4, #24]
   17390:	0018      	movs	r0, r3
   17392:	e7d3      	b.n	1733c <setvbuf+0xc4>
   17394:	9801      	ldr	r0, [sp, #4]
   17396:	f7ff fddb 	bl	16f50 <malloc>
   1739a:	1e07      	subs	r7, r0, #0
   1739c:	d0c0      	beq.n	17320 <setvbuf+0xa8>
   1739e:	2380      	movs	r3, #128	; 0x80
   173a0:	89a2      	ldrh	r2, [r4, #12]
   173a2:	9d01      	ldr	r5, [sp, #4]
   173a4:	4313      	orrs	r3, r2
   173a6:	81a3      	strh	r3, [r4, #12]
   173a8:	e7d6      	b.n	17358 <setvbuf+0xe0>
   173aa:	2000      	movs	r0, #0
   173ac:	e7ba      	b.n	17324 <setvbuf+0xac>
   173ae:	60a5      	str	r5, [r4, #8]
   173b0:	e7c4      	b.n	1733c <setvbuf+0xc4>
   173b2:	60a0      	str	r0, [r4, #8]
   173b4:	e7c2      	b.n	1733c <setvbuf+0xc4>
   173b6:	2001      	movs	r0, #1
   173b8:	4240      	negs	r0, r0
   173ba:	e7bf      	b.n	1733c <setvbuf+0xc4>
   173bc:	20000150 	.word	0x20000150
   173c0:	0001a77c 	.word	0x0001a77c
   173c4:	fffff35c 	.word	0xfffff35c
   173c8:	0001a79c 	.word	0x0001a79c
   173cc:	0001a75c 	.word	0x0001a75c

000173d0 <sniprintf>:
   173d0:	b40c      	push	{r2, r3}
   173d2:	b530      	push	{r4, r5, lr}
   173d4:	4b16      	ldr	r3, [pc, #88]	; (17430 <sniprintf+0x60>)
   173d6:	b09d      	sub	sp, #116	; 0x74
   173d8:	1e0c      	subs	r4, r1, #0
   173da:	681d      	ldr	r5, [r3, #0]
   173dc:	da08      	bge.n	173f0 <sniprintf+0x20>
   173de:	238b      	movs	r3, #139	; 0x8b
   173e0:	2001      	movs	r0, #1
   173e2:	602b      	str	r3, [r5, #0]
   173e4:	4240      	negs	r0, r0
   173e6:	b01d      	add	sp, #116	; 0x74
   173e8:	bc30      	pop	{r4, r5}
   173ea:	bc08      	pop	{r3}
   173ec:	b002      	add	sp, #8
   173ee:	4718      	bx	r3
   173f0:	2382      	movs	r3, #130	; 0x82
   173f2:	a902      	add	r1, sp, #8
   173f4:	009b      	lsls	r3, r3, #2
   173f6:	818b      	strh	r3, [r1, #12]
   173f8:	2300      	movs	r3, #0
   173fa:	9002      	str	r0, [sp, #8]
   173fc:	6108      	str	r0, [r1, #16]
   173fe:	429c      	cmp	r4, r3
   17400:	d000      	beq.n	17404 <sniprintf+0x34>
   17402:	1e63      	subs	r3, r4, #1
   17404:	608b      	str	r3, [r1, #8]
   17406:	614b      	str	r3, [r1, #20]
   17408:	2301      	movs	r3, #1
   1740a:	425b      	negs	r3, r3
   1740c:	81cb      	strh	r3, [r1, #14]
   1740e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17410:	ab21      	add	r3, sp, #132	; 0x84
   17412:	0028      	movs	r0, r5
   17414:	9301      	str	r3, [sp, #4]
   17416:	f000 fc67 	bl	17ce8 <_svfiprintf_r>
   1741a:	1c43      	adds	r3, r0, #1
   1741c:	da01      	bge.n	17422 <sniprintf+0x52>
   1741e:	238b      	movs	r3, #139	; 0x8b
   17420:	602b      	str	r3, [r5, #0]
   17422:	2c00      	cmp	r4, #0
   17424:	d0df      	beq.n	173e6 <sniprintf+0x16>
   17426:	2300      	movs	r3, #0
   17428:	9a02      	ldr	r2, [sp, #8]
   1742a:	7013      	strb	r3, [r2, #0]
   1742c:	e7db      	b.n	173e6 <sniprintf+0x16>
   1742e:	46c0      	nop			; (mov r8, r8)
   17430:	20000150 	.word	0x20000150

00017434 <siprintf>:
   17434:	b40e      	push	{r1, r2, r3}
   17436:	b510      	push	{r4, lr}
   17438:	b09d      	sub	sp, #116	; 0x74
   1743a:	a902      	add	r1, sp, #8
   1743c:	9002      	str	r0, [sp, #8]
   1743e:	6108      	str	r0, [r1, #16]
   17440:	480b      	ldr	r0, [pc, #44]	; (17470 <siprintf+0x3c>)
   17442:	2482      	movs	r4, #130	; 0x82
   17444:	6088      	str	r0, [r1, #8]
   17446:	6148      	str	r0, [r1, #20]
   17448:	2001      	movs	r0, #1
   1744a:	4240      	negs	r0, r0
   1744c:	ab1f      	add	r3, sp, #124	; 0x7c
   1744e:	81c8      	strh	r0, [r1, #14]
   17450:	4808      	ldr	r0, [pc, #32]	; (17474 <siprintf+0x40>)
   17452:	cb04      	ldmia	r3!, {r2}
   17454:	00a4      	lsls	r4, r4, #2
   17456:	6800      	ldr	r0, [r0, #0]
   17458:	9301      	str	r3, [sp, #4]
   1745a:	818c      	strh	r4, [r1, #12]
   1745c:	f000 fc44 	bl	17ce8 <_svfiprintf_r>
   17460:	2300      	movs	r3, #0
   17462:	9a02      	ldr	r2, [sp, #8]
   17464:	7013      	strb	r3, [r2, #0]
   17466:	b01d      	add	sp, #116	; 0x74
   17468:	bc10      	pop	{r4}
   1746a:	bc08      	pop	{r3}
   1746c:	b003      	add	sp, #12
   1746e:	4718      	bx	r3
   17470:	7fffffff 	.word	0x7fffffff
   17474:	20000150 	.word	0x20000150

00017478 <strcmp>:
   17478:	7802      	ldrb	r2, [r0, #0]
   1747a:	780b      	ldrb	r3, [r1, #0]
   1747c:	2a00      	cmp	r2, #0
   1747e:	d003      	beq.n	17488 <strcmp+0x10>
   17480:	3001      	adds	r0, #1
   17482:	3101      	adds	r1, #1
   17484:	429a      	cmp	r2, r3
   17486:	d0f7      	beq.n	17478 <strcmp>
   17488:	1ad0      	subs	r0, r2, r3
   1748a:	4770      	bx	lr

0001748c <strcpy>:
   1748c:	1c03      	adds	r3, r0, #0
   1748e:	780a      	ldrb	r2, [r1, #0]
   17490:	3101      	adds	r1, #1
   17492:	701a      	strb	r2, [r3, #0]
   17494:	3301      	adds	r3, #1
   17496:	2a00      	cmp	r2, #0
   17498:	d1f9      	bne.n	1748e <strcpy+0x2>
   1749a:	4770      	bx	lr

0001749c <strdup>:
   1749c:	b510      	push	{r4, lr}
   1749e:	4b03      	ldr	r3, [pc, #12]	; (174ac <strdup+0x10>)
   174a0:	0001      	movs	r1, r0
   174a2:	6818      	ldr	r0, [r3, #0]
   174a4:	f000 f804 	bl	174b0 <_strdup_r>
   174a8:	bd10      	pop	{r4, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	20000150 	.word	0x20000150

000174b0 <_strdup_r>:
   174b0:	b570      	push	{r4, r5, r6, lr}
   174b2:	0005      	movs	r5, r0
   174b4:	0008      	movs	r0, r1
   174b6:	000e      	movs	r6, r1
   174b8:	f000 f80d 	bl	174d6 <strlen>
   174bc:	1c44      	adds	r4, r0, #1
   174be:	0021      	movs	r1, r4
   174c0:	0028      	movs	r0, r5
   174c2:	f7ff fdc7 	bl	17054 <_malloc_r>
   174c6:	1e05      	subs	r5, r0, #0
   174c8:	d003      	beq.n	174d2 <_strdup_r+0x22>
   174ca:	0022      	movs	r2, r4
   174cc:	0031      	movs	r1, r6
   174ce:	f7ff fd53 	bl	16f78 <memcpy>
   174d2:	0028      	movs	r0, r5
   174d4:	bd70      	pop	{r4, r5, r6, pc}

000174d6 <strlen>:
   174d6:	2300      	movs	r3, #0
   174d8:	5cc2      	ldrb	r2, [r0, r3]
   174da:	3301      	adds	r3, #1
   174dc:	2a00      	cmp	r2, #0
   174de:	d1fb      	bne.n	174d8 <strlen+0x2>
   174e0:	1e58      	subs	r0, r3, #1
   174e2:	4770      	bx	lr

000174e4 <strncmp>:
   174e4:	2300      	movs	r3, #0
   174e6:	b530      	push	{r4, r5, lr}
   174e8:	429a      	cmp	r2, r3
   174ea:	d00a      	beq.n	17502 <strncmp+0x1e>
   174ec:	3a01      	subs	r2, #1
   174ee:	5cc4      	ldrb	r4, [r0, r3]
   174f0:	5ccd      	ldrb	r5, [r1, r3]
   174f2:	42ac      	cmp	r4, r5
   174f4:	d104      	bne.n	17500 <strncmp+0x1c>
   174f6:	429a      	cmp	r2, r3
   174f8:	d002      	beq.n	17500 <strncmp+0x1c>
   174fa:	3301      	adds	r3, #1
   174fc:	2c00      	cmp	r4, #0
   174fe:	d1f6      	bne.n	174ee <strncmp+0xa>
   17500:	1b63      	subs	r3, r4, r5
   17502:	0018      	movs	r0, r3
   17504:	bd30      	pop	{r4, r5, pc}

00017506 <strstr>:
   17506:	b510      	push	{r4, lr}
   17508:	0002      	movs	r2, r0
   1750a:	7800      	ldrb	r0, [r0, #0]
   1750c:	2800      	cmp	r0, #0
   1750e:	d104      	bne.n	1751a <strstr+0x14>
   17510:	7809      	ldrb	r1, [r1, #0]
   17512:	2900      	cmp	r1, #0
   17514:	d00d      	beq.n	17532 <strstr+0x2c>
   17516:	bd10      	pop	{r4, pc}
   17518:	3201      	adds	r2, #1
   1751a:	7810      	ldrb	r0, [r2, #0]
   1751c:	2800      	cmp	r0, #0
   1751e:	d0fa      	beq.n	17516 <strstr+0x10>
   17520:	2300      	movs	r3, #0
   17522:	5cc8      	ldrb	r0, [r1, r3]
   17524:	2800      	cmp	r0, #0
   17526:	d004      	beq.n	17532 <strstr+0x2c>
   17528:	5cd4      	ldrb	r4, [r2, r3]
   1752a:	4284      	cmp	r4, r0
   1752c:	d1f4      	bne.n	17518 <strstr+0x12>
   1752e:	3301      	adds	r3, #1
   17530:	e7f7      	b.n	17522 <strstr+0x1c>
   17532:	0010      	movs	r0, r2
   17534:	e7ef      	b.n	17516 <strstr+0x10>
	...

00017538 <_strtol_l.isra.0>:
   17538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1753a:	001f      	movs	r7, r3
   1753c:	000e      	movs	r6, r1
   1753e:	b087      	sub	sp, #28
   17540:	9005      	str	r0, [sp, #20]
   17542:	9103      	str	r1, [sp, #12]
   17544:	9202      	str	r2, [sp, #8]
   17546:	980c      	ldr	r0, [sp, #48]	; 0x30
   17548:	7834      	ldrb	r4, [r6, #0]
   1754a:	f000 fae8 	bl	17b1e <__locale_ctype_ptr_l>
   1754e:	2208      	movs	r2, #8
   17550:	1900      	adds	r0, r0, r4
   17552:	7843      	ldrb	r3, [r0, #1]
   17554:	1c75      	adds	r5, r6, #1
   17556:	4013      	ands	r3, r2
   17558:	d10c      	bne.n	17574 <_strtol_l.isra.0+0x3c>
   1755a:	2c2d      	cmp	r4, #45	; 0x2d
   1755c:	d10c      	bne.n	17578 <_strtol_l.isra.0+0x40>
   1755e:	3301      	adds	r3, #1
   17560:	782c      	ldrb	r4, [r5, #0]
   17562:	9301      	str	r3, [sp, #4]
   17564:	1cb5      	adds	r5, r6, #2
   17566:	2f00      	cmp	r7, #0
   17568:	d00c      	beq.n	17584 <_strtol_l.isra.0+0x4c>
   1756a:	2f10      	cmp	r7, #16
   1756c:	d114      	bne.n	17598 <_strtol_l.isra.0+0x60>
   1756e:	2c30      	cmp	r4, #48	; 0x30
   17570:	d00a      	beq.n	17588 <_strtol_l.isra.0+0x50>
   17572:	e011      	b.n	17598 <_strtol_l.isra.0+0x60>
   17574:	002e      	movs	r6, r5
   17576:	e7e6      	b.n	17546 <_strtol_l.isra.0+0xe>
   17578:	9301      	str	r3, [sp, #4]
   1757a:	2c2b      	cmp	r4, #43	; 0x2b
   1757c:	d1f3      	bne.n	17566 <_strtol_l.isra.0+0x2e>
   1757e:	782c      	ldrb	r4, [r5, #0]
   17580:	1cb5      	adds	r5, r6, #2
   17582:	e7f0      	b.n	17566 <_strtol_l.isra.0+0x2e>
   17584:	2c30      	cmp	r4, #48	; 0x30
   17586:	d12f      	bne.n	175e8 <_strtol_l.isra.0+0xb0>
   17588:	2220      	movs	r2, #32
   1758a:	782b      	ldrb	r3, [r5, #0]
   1758c:	4393      	bics	r3, r2
   1758e:	2b58      	cmp	r3, #88	; 0x58
   17590:	d151      	bne.n	17636 <_strtol_l.isra.0+0xfe>
   17592:	2710      	movs	r7, #16
   17594:	786c      	ldrb	r4, [r5, #1]
   17596:	3502      	adds	r5, #2
   17598:	9b01      	ldr	r3, [sp, #4]
   1759a:	4a29      	ldr	r2, [pc, #164]	; (17640 <_strtol_l.isra.0+0x108>)
   1759c:	0039      	movs	r1, r7
   1759e:	189e      	adds	r6, r3, r2
   175a0:	0030      	movs	r0, r6
   175a2:	f7ff fb91 	bl	16cc8 <__aeabi_uidivmod>
   175a6:	0030      	movs	r0, r6
   175a8:	9104      	str	r1, [sp, #16]
   175aa:	0039      	movs	r1, r7
   175ac:	f7ff fb06 	bl	16bbc <__udivsi3>
   175b0:	2101      	movs	r1, #1
   175b2:	2300      	movs	r3, #0
   175b4:	4249      	negs	r1, r1
   175b6:	0002      	movs	r2, r0
   175b8:	468c      	mov	ip, r1
   175ba:	0018      	movs	r0, r3
   175bc:	0021      	movs	r1, r4
   175be:	3930      	subs	r1, #48	; 0x30
   175c0:	2909      	cmp	r1, #9
   175c2:	d813      	bhi.n	175ec <_strtol_l.isra.0+0xb4>
   175c4:	000c      	movs	r4, r1
   175c6:	42a7      	cmp	r7, r4
   175c8:	dd1c      	ble.n	17604 <_strtol_l.isra.0+0xcc>
   175ca:	1c59      	adds	r1, r3, #1
   175cc:	d009      	beq.n	175e2 <_strtol_l.isra.0+0xaa>
   175ce:	4663      	mov	r3, ip
   175d0:	4282      	cmp	r2, r0
   175d2:	d306      	bcc.n	175e2 <_strtol_l.isra.0+0xaa>
   175d4:	d102      	bne.n	175dc <_strtol_l.isra.0+0xa4>
   175d6:	9904      	ldr	r1, [sp, #16]
   175d8:	42a1      	cmp	r1, r4
   175da:	db02      	blt.n	175e2 <_strtol_l.isra.0+0xaa>
   175dc:	2301      	movs	r3, #1
   175de:	4378      	muls	r0, r7
   175e0:	1820      	adds	r0, r4, r0
   175e2:	782c      	ldrb	r4, [r5, #0]
   175e4:	3501      	adds	r5, #1
   175e6:	e7e9      	b.n	175bc <_strtol_l.isra.0+0x84>
   175e8:	270a      	movs	r7, #10
   175ea:	e7d5      	b.n	17598 <_strtol_l.isra.0+0x60>
   175ec:	0021      	movs	r1, r4
   175ee:	3941      	subs	r1, #65	; 0x41
   175f0:	2919      	cmp	r1, #25
   175f2:	d801      	bhi.n	175f8 <_strtol_l.isra.0+0xc0>
   175f4:	3c37      	subs	r4, #55	; 0x37
   175f6:	e7e6      	b.n	175c6 <_strtol_l.isra.0+0x8e>
   175f8:	0021      	movs	r1, r4
   175fa:	3961      	subs	r1, #97	; 0x61
   175fc:	2919      	cmp	r1, #25
   175fe:	d801      	bhi.n	17604 <_strtol_l.isra.0+0xcc>
   17600:	3c57      	subs	r4, #87	; 0x57
   17602:	e7e0      	b.n	175c6 <_strtol_l.isra.0+0x8e>
   17604:	1c5a      	adds	r2, r3, #1
   17606:	d108      	bne.n	1761a <_strtol_l.isra.0+0xe2>
   17608:	9a05      	ldr	r2, [sp, #20]
   1760a:	3323      	adds	r3, #35	; 0x23
   1760c:	6013      	str	r3, [r2, #0]
   1760e:	9b02      	ldr	r3, [sp, #8]
   17610:	0030      	movs	r0, r6
   17612:	2b00      	cmp	r3, #0
   17614:	d10b      	bne.n	1762e <_strtol_l.isra.0+0xf6>
   17616:	b007      	add	sp, #28
   17618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1761a:	9a01      	ldr	r2, [sp, #4]
   1761c:	2a00      	cmp	r2, #0
   1761e:	d000      	beq.n	17622 <_strtol_l.isra.0+0xea>
   17620:	4240      	negs	r0, r0
   17622:	9a02      	ldr	r2, [sp, #8]
   17624:	2a00      	cmp	r2, #0
   17626:	d0f6      	beq.n	17616 <_strtol_l.isra.0+0xde>
   17628:	9a03      	ldr	r2, [sp, #12]
   1762a:	2b00      	cmp	r3, #0
   1762c:	d000      	beq.n	17630 <_strtol_l.isra.0+0xf8>
   1762e:	1e6a      	subs	r2, r5, #1
   17630:	9b02      	ldr	r3, [sp, #8]
   17632:	601a      	str	r2, [r3, #0]
   17634:	e7ef      	b.n	17616 <_strtol_l.isra.0+0xde>
   17636:	2430      	movs	r4, #48	; 0x30
   17638:	2f00      	cmp	r7, #0
   1763a:	d1ad      	bne.n	17598 <_strtol_l.isra.0+0x60>
   1763c:	3708      	adds	r7, #8
   1763e:	e7ab      	b.n	17598 <_strtol_l.isra.0+0x60>
   17640:	7fffffff 	.word	0x7fffffff

00017644 <strtol>:
   17644:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17646:	0013      	movs	r3, r2
   17648:	4a06      	ldr	r2, [pc, #24]	; (17664 <strtol+0x20>)
   1764a:	0005      	movs	r5, r0
   1764c:	6810      	ldr	r0, [r2, #0]
   1764e:	6a04      	ldr	r4, [r0, #32]
   17650:	2c00      	cmp	r4, #0
   17652:	d100      	bne.n	17656 <strtol+0x12>
   17654:	4c04      	ldr	r4, [pc, #16]	; (17668 <strtol+0x24>)
   17656:	000a      	movs	r2, r1
   17658:	9400      	str	r4, [sp, #0]
   1765a:	0029      	movs	r1, r5
   1765c:	f7ff ff6c 	bl	17538 <_strtol_l.isra.0>
   17660:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17662:	46c0      	nop			; (mov r8, r8)
   17664:	20000150 	.word	0x20000150
   17668:	200001b4 	.word	0x200001b4

0001766c <__swbuf_r>:
   1766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1766e:	0005      	movs	r5, r0
   17670:	000e      	movs	r6, r1
   17672:	0014      	movs	r4, r2
   17674:	2800      	cmp	r0, #0
   17676:	d004      	beq.n	17682 <__swbuf_r+0x16>
   17678:	6983      	ldr	r3, [r0, #24]
   1767a:	2b00      	cmp	r3, #0
   1767c:	d101      	bne.n	17682 <__swbuf_r+0x16>
   1767e:	f000 f9b9 	bl	179f4 <__sinit>
   17682:	4b22      	ldr	r3, [pc, #136]	; (1770c <__swbuf_r+0xa0>)
   17684:	429c      	cmp	r4, r3
   17686:	d12d      	bne.n	176e4 <__swbuf_r+0x78>
   17688:	686c      	ldr	r4, [r5, #4]
   1768a:	69a3      	ldr	r3, [r4, #24]
   1768c:	60a3      	str	r3, [r4, #8]
   1768e:	89a3      	ldrh	r3, [r4, #12]
   17690:	071b      	lsls	r3, r3, #28
   17692:	d531      	bpl.n	176f8 <__swbuf_r+0x8c>
   17694:	6923      	ldr	r3, [r4, #16]
   17696:	2b00      	cmp	r3, #0
   17698:	d02e      	beq.n	176f8 <__swbuf_r+0x8c>
   1769a:	6823      	ldr	r3, [r4, #0]
   1769c:	6922      	ldr	r2, [r4, #16]
   1769e:	b2f7      	uxtb	r7, r6
   176a0:	1a98      	subs	r0, r3, r2
   176a2:	6963      	ldr	r3, [r4, #20]
   176a4:	b2f6      	uxtb	r6, r6
   176a6:	4298      	cmp	r0, r3
   176a8:	db05      	blt.n	176b6 <__swbuf_r+0x4a>
   176aa:	0021      	movs	r1, r4
   176ac:	0028      	movs	r0, r5
   176ae:	f000 f933 	bl	17918 <_fflush_r>
   176b2:	2800      	cmp	r0, #0
   176b4:	d126      	bne.n	17704 <__swbuf_r+0x98>
   176b6:	68a3      	ldr	r3, [r4, #8]
   176b8:	3001      	adds	r0, #1
   176ba:	3b01      	subs	r3, #1
   176bc:	60a3      	str	r3, [r4, #8]
   176be:	6823      	ldr	r3, [r4, #0]
   176c0:	1c5a      	adds	r2, r3, #1
   176c2:	6022      	str	r2, [r4, #0]
   176c4:	701f      	strb	r7, [r3, #0]
   176c6:	6963      	ldr	r3, [r4, #20]
   176c8:	4298      	cmp	r0, r3
   176ca:	d004      	beq.n	176d6 <__swbuf_r+0x6a>
   176cc:	89a3      	ldrh	r3, [r4, #12]
   176ce:	07db      	lsls	r3, r3, #31
   176d0:	d51a      	bpl.n	17708 <__swbuf_r+0x9c>
   176d2:	2e0a      	cmp	r6, #10
   176d4:	d118      	bne.n	17708 <__swbuf_r+0x9c>
   176d6:	0021      	movs	r1, r4
   176d8:	0028      	movs	r0, r5
   176da:	f000 f91d 	bl	17918 <_fflush_r>
   176de:	2800      	cmp	r0, #0
   176e0:	d012      	beq.n	17708 <__swbuf_r+0x9c>
   176e2:	e00f      	b.n	17704 <__swbuf_r+0x98>
   176e4:	4b0a      	ldr	r3, [pc, #40]	; (17710 <__swbuf_r+0xa4>)
   176e6:	429c      	cmp	r4, r3
   176e8:	d101      	bne.n	176ee <__swbuf_r+0x82>
   176ea:	68ac      	ldr	r4, [r5, #8]
   176ec:	e7cd      	b.n	1768a <__swbuf_r+0x1e>
   176ee:	4b09      	ldr	r3, [pc, #36]	; (17714 <__swbuf_r+0xa8>)
   176f0:	429c      	cmp	r4, r3
   176f2:	d1ca      	bne.n	1768a <__swbuf_r+0x1e>
   176f4:	68ec      	ldr	r4, [r5, #12]
   176f6:	e7c8      	b.n	1768a <__swbuf_r+0x1e>
   176f8:	0021      	movs	r1, r4
   176fa:	0028      	movs	r0, r5
   176fc:	f000 f80c 	bl	17718 <__swsetup_r>
   17700:	2800      	cmp	r0, #0
   17702:	d0ca      	beq.n	1769a <__swbuf_r+0x2e>
   17704:	2601      	movs	r6, #1
   17706:	4276      	negs	r6, r6
   17708:	0030      	movs	r0, r6
   1770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1770c:	0001a77c 	.word	0x0001a77c
   17710:	0001a79c 	.word	0x0001a79c
   17714:	0001a75c 	.word	0x0001a75c

00017718 <__swsetup_r>:
   17718:	4b36      	ldr	r3, [pc, #216]	; (177f4 <__swsetup_r+0xdc>)
   1771a:	b570      	push	{r4, r5, r6, lr}
   1771c:	681d      	ldr	r5, [r3, #0]
   1771e:	0006      	movs	r6, r0
   17720:	000c      	movs	r4, r1
   17722:	2d00      	cmp	r5, #0
   17724:	d005      	beq.n	17732 <__swsetup_r+0x1a>
   17726:	69ab      	ldr	r3, [r5, #24]
   17728:	2b00      	cmp	r3, #0
   1772a:	d102      	bne.n	17732 <__swsetup_r+0x1a>
   1772c:	0028      	movs	r0, r5
   1772e:	f000 f961 	bl	179f4 <__sinit>
   17732:	4b31      	ldr	r3, [pc, #196]	; (177f8 <__swsetup_r+0xe0>)
   17734:	429c      	cmp	r4, r3
   17736:	d10f      	bne.n	17758 <__swsetup_r+0x40>
   17738:	686c      	ldr	r4, [r5, #4]
   1773a:	230c      	movs	r3, #12
   1773c:	5ee2      	ldrsh	r2, [r4, r3]
   1773e:	b293      	uxth	r3, r2
   17740:	0719      	lsls	r1, r3, #28
   17742:	d42d      	bmi.n	177a0 <__swsetup_r+0x88>
   17744:	06d9      	lsls	r1, r3, #27
   17746:	d411      	bmi.n	1776c <__swsetup_r+0x54>
   17748:	2309      	movs	r3, #9
   1774a:	2001      	movs	r0, #1
   1774c:	6033      	str	r3, [r6, #0]
   1774e:	3337      	adds	r3, #55	; 0x37
   17750:	4313      	orrs	r3, r2
   17752:	81a3      	strh	r3, [r4, #12]
   17754:	4240      	negs	r0, r0
   17756:	bd70      	pop	{r4, r5, r6, pc}
   17758:	4b28      	ldr	r3, [pc, #160]	; (177fc <__swsetup_r+0xe4>)
   1775a:	429c      	cmp	r4, r3
   1775c:	d101      	bne.n	17762 <__swsetup_r+0x4a>
   1775e:	68ac      	ldr	r4, [r5, #8]
   17760:	e7eb      	b.n	1773a <__swsetup_r+0x22>
   17762:	4b27      	ldr	r3, [pc, #156]	; (17800 <__swsetup_r+0xe8>)
   17764:	429c      	cmp	r4, r3
   17766:	d1e8      	bne.n	1773a <__swsetup_r+0x22>
   17768:	68ec      	ldr	r4, [r5, #12]
   1776a:	e7e6      	b.n	1773a <__swsetup_r+0x22>
   1776c:	075b      	lsls	r3, r3, #29
   1776e:	d513      	bpl.n	17798 <__swsetup_r+0x80>
   17770:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17772:	2900      	cmp	r1, #0
   17774:	d008      	beq.n	17788 <__swsetup_r+0x70>
   17776:	0023      	movs	r3, r4
   17778:	3344      	adds	r3, #68	; 0x44
   1777a:	4299      	cmp	r1, r3
   1777c:	d002      	beq.n	17784 <__swsetup_r+0x6c>
   1777e:	0030      	movs	r0, r6
   17780:	f7ff fc1e 	bl	16fc0 <_free_r>
   17784:	2300      	movs	r3, #0
   17786:	6363      	str	r3, [r4, #52]	; 0x34
   17788:	2224      	movs	r2, #36	; 0x24
   1778a:	89a3      	ldrh	r3, [r4, #12]
   1778c:	4393      	bics	r3, r2
   1778e:	81a3      	strh	r3, [r4, #12]
   17790:	2300      	movs	r3, #0
   17792:	6063      	str	r3, [r4, #4]
   17794:	6923      	ldr	r3, [r4, #16]
   17796:	6023      	str	r3, [r4, #0]
   17798:	2308      	movs	r3, #8
   1779a:	89a2      	ldrh	r2, [r4, #12]
   1779c:	4313      	orrs	r3, r2
   1779e:	81a3      	strh	r3, [r4, #12]
   177a0:	6923      	ldr	r3, [r4, #16]
   177a2:	2b00      	cmp	r3, #0
   177a4:	d10b      	bne.n	177be <__swsetup_r+0xa6>
   177a6:	21a0      	movs	r1, #160	; 0xa0
   177a8:	2280      	movs	r2, #128	; 0x80
   177aa:	89a3      	ldrh	r3, [r4, #12]
   177ac:	0089      	lsls	r1, r1, #2
   177ae:	0092      	lsls	r2, r2, #2
   177b0:	400b      	ands	r3, r1
   177b2:	4293      	cmp	r3, r2
   177b4:	d003      	beq.n	177be <__swsetup_r+0xa6>
   177b6:	0021      	movs	r1, r4
   177b8:	0030      	movs	r0, r6
   177ba:	f000 f9db 	bl	17b74 <__smakebuf_r>
   177be:	2301      	movs	r3, #1
   177c0:	89a2      	ldrh	r2, [r4, #12]
   177c2:	4013      	ands	r3, r2
   177c4:	d011      	beq.n	177ea <__swsetup_r+0xd2>
   177c6:	2300      	movs	r3, #0
   177c8:	60a3      	str	r3, [r4, #8]
   177ca:	6963      	ldr	r3, [r4, #20]
   177cc:	425b      	negs	r3, r3
   177ce:	61a3      	str	r3, [r4, #24]
   177d0:	2000      	movs	r0, #0
   177d2:	6923      	ldr	r3, [r4, #16]
   177d4:	4283      	cmp	r3, r0
   177d6:	d1be      	bne.n	17756 <__swsetup_r+0x3e>
   177d8:	230c      	movs	r3, #12
   177da:	5ee2      	ldrsh	r2, [r4, r3]
   177dc:	0613      	lsls	r3, r2, #24
   177de:	d5ba      	bpl.n	17756 <__swsetup_r+0x3e>
   177e0:	2340      	movs	r3, #64	; 0x40
   177e2:	4313      	orrs	r3, r2
   177e4:	81a3      	strh	r3, [r4, #12]
   177e6:	3801      	subs	r0, #1
   177e8:	e7b5      	b.n	17756 <__swsetup_r+0x3e>
   177ea:	0792      	lsls	r2, r2, #30
   177ec:	d400      	bmi.n	177f0 <__swsetup_r+0xd8>
   177ee:	6963      	ldr	r3, [r4, #20]
   177f0:	60a3      	str	r3, [r4, #8]
   177f2:	e7ed      	b.n	177d0 <__swsetup_r+0xb8>
   177f4:	20000150 	.word	0x20000150
   177f8:	0001a77c 	.word	0x0001a77c
   177fc:	0001a79c 	.word	0x0001a79c
   17800:	0001a75c 	.word	0x0001a75c

00017804 <__sflush_r>:
   17804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17806:	898a      	ldrh	r2, [r1, #12]
   17808:	0005      	movs	r5, r0
   1780a:	000c      	movs	r4, r1
   1780c:	0713      	lsls	r3, r2, #28
   1780e:	d460      	bmi.n	178d2 <__sflush_r+0xce>
   17810:	684b      	ldr	r3, [r1, #4]
   17812:	2b00      	cmp	r3, #0
   17814:	dc04      	bgt.n	17820 <__sflush_r+0x1c>
   17816:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17818:	2b00      	cmp	r3, #0
   1781a:	dc01      	bgt.n	17820 <__sflush_r+0x1c>
   1781c:	2000      	movs	r0, #0
   1781e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17820:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17822:	2f00      	cmp	r7, #0
   17824:	d0fa      	beq.n	1781c <__sflush_r+0x18>
   17826:	2300      	movs	r3, #0
   17828:	682e      	ldr	r6, [r5, #0]
   1782a:	602b      	str	r3, [r5, #0]
   1782c:	2380      	movs	r3, #128	; 0x80
   1782e:	015b      	lsls	r3, r3, #5
   17830:	401a      	ands	r2, r3
   17832:	d034      	beq.n	1789e <__sflush_r+0x9a>
   17834:	6d60      	ldr	r0, [r4, #84]	; 0x54
   17836:	89a3      	ldrh	r3, [r4, #12]
   17838:	075b      	lsls	r3, r3, #29
   1783a:	d506      	bpl.n	1784a <__sflush_r+0x46>
   1783c:	6863      	ldr	r3, [r4, #4]
   1783e:	1ac0      	subs	r0, r0, r3
   17840:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17842:	2b00      	cmp	r3, #0
   17844:	d001      	beq.n	1784a <__sflush_r+0x46>
   17846:	6c23      	ldr	r3, [r4, #64]	; 0x40
   17848:	1ac0      	subs	r0, r0, r3
   1784a:	0002      	movs	r2, r0
   1784c:	6a21      	ldr	r1, [r4, #32]
   1784e:	2300      	movs	r3, #0
   17850:	0028      	movs	r0, r5
   17852:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17854:	47b8      	blx	r7
   17856:	89a1      	ldrh	r1, [r4, #12]
   17858:	1c43      	adds	r3, r0, #1
   1785a:	d106      	bne.n	1786a <__sflush_r+0x66>
   1785c:	682b      	ldr	r3, [r5, #0]
   1785e:	2b1d      	cmp	r3, #29
   17860:	d831      	bhi.n	178c6 <__sflush_r+0xc2>
   17862:	4a2c      	ldr	r2, [pc, #176]	; (17914 <__sflush_r+0x110>)
   17864:	40da      	lsrs	r2, r3
   17866:	07d3      	lsls	r3, r2, #31
   17868:	d52d      	bpl.n	178c6 <__sflush_r+0xc2>
   1786a:	2300      	movs	r3, #0
   1786c:	6063      	str	r3, [r4, #4]
   1786e:	6923      	ldr	r3, [r4, #16]
   17870:	6023      	str	r3, [r4, #0]
   17872:	04cb      	lsls	r3, r1, #19
   17874:	d505      	bpl.n	17882 <__sflush_r+0x7e>
   17876:	1c43      	adds	r3, r0, #1
   17878:	d102      	bne.n	17880 <__sflush_r+0x7c>
   1787a:	682b      	ldr	r3, [r5, #0]
   1787c:	2b00      	cmp	r3, #0
   1787e:	d100      	bne.n	17882 <__sflush_r+0x7e>
   17880:	6560      	str	r0, [r4, #84]	; 0x54
   17882:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17884:	602e      	str	r6, [r5, #0]
   17886:	2900      	cmp	r1, #0
   17888:	d0c8      	beq.n	1781c <__sflush_r+0x18>
   1788a:	0023      	movs	r3, r4
   1788c:	3344      	adds	r3, #68	; 0x44
   1788e:	4299      	cmp	r1, r3
   17890:	d002      	beq.n	17898 <__sflush_r+0x94>
   17892:	0028      	movs	r0, r5
   17894:	f7ff fb94 	bl	16fc0 <_free_r>
   17898:	2000      	movs	r0, #0
   1789a:	6360      	str	r0, [r4, #52]	; 0x34
   1789c:	e7bf      	b.n	1781e <__sflush_r+0x1a>
   1789e:	2301      	movs	r3, #1
   178a0:	6a21      	ldr	r1, [r4, #32]
   178a2:	0028      	movs	r0, r5
   178a4:	47b8      	blx	r7
   178a6:	1c43      	adds	r3, r0, #1
   178a8:	d1c5      	bne.n	17836 <__sflush_r+0x32>
   178aa:	682b      	ldr	r3, [r5, #0]
   178ac:	2b00      	cmp	r3, #0
   178ae:	d0c2      	beq.n	17836 <__sflush_r+0x32>
   178b0:	2b1d      	cmp	r3, #29
   178b2:	d001      	beq.n	178b8 <__sflush_r+0xb4>
   178b4:	2b16      	cmp	r3, #22
   178b6:	d101      	bne.n	178bc <__sflush_r+0xb8>
   178b8:	602e      	str	r6, [r5, #0]
   178ba:	e7af      	b.n	1781c <__sflush_r+0x18>
   178bc:	2340      	movs	r3, #64	; 0x40
   178be:	89a2      	ldrh	r2, [r4, #12]
   178c0:	4313      	orrs	r3, r2
   178c2:	81a3      	strh	r3, [r4, #12]
   178c4:	e7ab      	b.n	1781e <__sflush_r+0x1a>
   178c6:	2340      	movs	r3, #64	; 0x40
   178c8:	430b      	orrs	r3, r1
   178ca:	2001      	movs	r0, #1
   178cc:	81a3      	strh	r3, [r4, #12]
   178ce:	4240      	negs	r0, r0
   178d0:	e7a5      	b.n	1781e <__sflush_r+0x1a>
   178d2:	690f      	ldr	r7, [r1, #16]
   178d4:	2f00      	cmp	r7, #0
   178d6:	d0a1      	beq.n	1781c <__sflush_r+0x18>
   178d8:	680b      	ldr	r3, [r1, #0]
   178da:	600f      	str	r7, [r1, #0]
   178dc:	1bdb      	subs	r3, r3, r7
   178de:	9301      	str	r3, [sp, #4]
   178e0:	2300      	movs	r3, #0
   178e2:	0792      	lsls	r2, r2, #30
   178e4:	d100      	bne.n	178e8 <__sflush_r+0xe4>
   178e6:	694b      	ldr	r3, [r1, #20]
   178e8:	60a3      	str	r3, [r4, #8]
   178ea:	9b01      	ldr	r3, [sp, #4]
   178ec:	2b00      	cmp	r3, #0
   178ee:	dc00      	bgt.n	178f2 <__sflush_r+0xee>
   178f0:	e794      	b.n	1781c <__sflush_r+0x18>
   178f2:	9b01      	ldr	r3, [sp, #4]
   178f4:	003a      	movs	r2, r7
   178f6:	6a21      	ldr	r1, [r4, #32]
   178f8:	0028      	movs	r0, r5
   178fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   178fc:	47b0      	blx	r6
   178fe:	2800      	cmp	r0, #0
   17900:	dc03      	bgt.n	1790a <__sflush_r+0x106>
   17902:	2340      	movs	r3, #64	; 0x40
   17904:	89a2      	ldrh	r2, [r4, #12]
   17906:	4313      	orrs	r3, r2
   17908:	e7df      	b.n	178ca <__sflush_r+0xc6>
   1790a:	9b01      	ldr	r3, [sp, #4]
   1790c:	183f      	adds	r7, r7, r0
   1790e:	1a1b      	subs	r3, r3, r0
   17910:	9301      	str	r3, [sp, #4]
   17912:	e7ea      	b.n	178ea <__sflush_r+0xe6>
   17914:	20400001 	.word	0x20400001

00017918 <_fflush_r>:
   17918:	690b      	ldr	r3, [r1, #16]
   1791a:	b570      	push	{r4, r5, r6, lr}
   1791c:	0005      	movs	r5, r0
   1791e:	000c      	movs	r4, r1
   17920:	2b00      	cmp	r3, #0
   17922:	d101      	bne.n	17928 <_fflush_r+0x10>
   17924:	2000      	movs	r0, #0
   17926:	bd70      	pop	{r4, r5, r6, pc}
   17928:	2800      	cmp	r0, #0
   1792a:	d004      	beq.n	17936 <_fflush_r+0x1e>
   1792c:	6983      	ldr	r3, [r0, #24]
   1792e:	2b00      	cmp	r3, #0
   17930:	d101      	bne.n	17936 <_fflush_r+0x1e>
   17932:	f000 f85f 	bl	179f4 <__sinit>
   17936:	4b0b      	ldr	r3, [pc, #44]	; (17964 <_fflush_r+0x4c>)
   17938:	429c      	cmp	r4, r3
   1793a:	d109      	bne.n	17950 <_fflush_r+0x38>
   1793c:	686c      	ldr	r4, [r5, #4]
   1793e:	220c      	movs	r2, #12
   17940:	5ea3      	ldrsh	r3, [r4, r2]
   17942:	2b00      	cmp	r3, #0
   17944:	d0ee      	beq.n	17924 <_fflush_r+0xc>
   17946:	0021      	movs	r1, r4
   17948:	0028      	movs	r0, r5
   1794a:	f7ff ff5b 	bl	17804 <__sflush_r>
   1794e:	e7ea      	b.n	17926 <_fflush_r+0xe>
   17950:	4b05      	ldr	r3, [pc, #20]	; (17968 <_fflush_r+0x50>)
   17952:	429c      	cmp	r4, r3
   17954:	d101      	bne.n	1795a <_fflush_r+0x42>
   17956:	68ac      	ldr	r4, [r5, #8]
   17958:	e7f1      	b.n	1793e <_fflush_r+0x26>
   1795a:	4b04      	ldr	r3, [pc, #16]	; (1796c <_fflush_r+0x54>)
   1795c:	429c      	cmp	r4, r3
   1795e:	d1ee      	bne.n	1793e <_fflush_r+0x26>
   17960:	68ec      	ldr	r4, [r5, #12]
   17962:	e7ec      	b.n	1793e <_fflush_r+0x26>
   17964:	0001a77c 	.word	0x0001a77c
   17968:	0001a79c 	.word	0x0001a79c
   1796c:	0001a75c 	.word	0x0001a75c

00017970 <_cleanup_r>:
   17970:	b510      	push	{r4, lr}
   17972:	4902      	ldr	r1, [pc, #8]	; (1797c <_cleanup_r+0xc>)
   17974:	f000 f8b2 	bl	17adc <_fwalk_reent>
   17978:	bd10      	pop	{r4, pc}
   1797a:	46c0      	nop			; (mov r8, r8)
   1797c:	00017919 	.word	0x00017919

00017980 <std.isra.0>:
   17980:	2300      	movs	r3, #0
   17982:	b510      	push	{r4, lr}
   17984:	0004      	movs	r4, r0
   17986:	6003      	str	r3, [r0, #0]
   17988:	6043      	str	r3, [r0, #4]
   1798a:	6083      	str	r3, [r0, #8]
   1798c:	8181      	strh	r1, [r0, #12]
   1798e:	6643      	str	r3, [r0, #100]	; 0x64
   17990:	81c2      	strh	r2, [r0, #14]
   17992:	6103      	str	r3, [r0, #16]
   17994:	6143      	str	r3, [r0, #20]
   17996:	6183      	str	r3, [r0, #24]
   17998:	0019      	movs	r1, r3
   1799a:	2208      	movs	r2, #8
   1799c:	305c      	adds	r0, #92	; 0x5c
   1799e:	f7ff fb06 	bl	16fae <memset>
   179a2:	4b05      	ldr	r3, [pc, #20]	; (179b8 <std.isra.0+0x38>)
   179a4:	6224      	str	r4, [r4, #32]
   179a6:	6263      	str	r3, [r4, #36]	; 0x24
   179a8:	4b04      	ldr	r3, [pc, #16]	; (179bc <std.isra.0+0x3c>)
   179aa:	62a3      	str	r3, [r4, #40]	; 0x28
   179ac:	4b04      	ldr	r3, [pc, #16]	; (179c0 <std.isra.0+0x40>)
   179ae:	62e3      	str	r3, [r4, #44]	; 0x2c
   179b0:	4b04      	ldr	r3, [pc, #16]	; (179c4 <std.isra.0+0x44>)
   179b2:	6323      	str	r3, [r4, #48]	; 0x30
   179b4:	bd10      	pop	{r4, pc}
   179b6:	46c0      	nop			; (mov r8, r8)
   179b8:	000184f5 	.word	0x000184f5
   179bc:	0001851d 	.word	0x0001851d
   179c0:	00018555 	.word	0x00018555
   179c4:	00018581 	.word	0x00018581

000179c8 <__sfmoreglue>:
   179c8:	b570      	push	{r4, r5, r6, lr}
   179ca:	2568      	movs	r5, #104	; 0x68
   179cc:	1e4a      	subs	r2, r1, #1
   179ce:	4355      	muls	r5, r2
   179d0:	000e      	movs	r6, r1
   179d2:	0029      	movs	r1, r5
   179d4:	3174      	adds	r1, #116	; 0x74
   179d6:	f7ff fb3d 	bl	17054 <_malloc_r>
   179da:	1e04      	subs	r4, r0, #0
   179dc:	d008      	beq.n	179f0 <__sfmoreglue+0x28>
   179de:	2100      	movs	r1, #0
   179e0:	002a      	movs	r2, r5
   179e2:	6001      	str	r1, [r0, #0]
   179e4:	6046      	str	r6, [r0, #4]
   179e6:	300c      	adds	r0, #12
   179e8:	60a0      	str	r0, [r4, #8]
   179ea:	3268      	adds	r2, #104	; 0x68
   179ec:	f7ff fadf 	bl	16fae <memset>
   179f0:	0020      	movs	r0, r4
   179f2:	bd70      	pop	{r4, r5, r6, pc}

000179f4 <__sinit>:
   179f4:	6983      	ldr	r3, [r0, #24]
   179f6:	b513      	push	{r0, r1, r4, lr}
   179f8:	0004      	movs	r4, r0
   179fa:	2b00      	cmp	r3, #0
   179fc:	d128      	bne.n	17a50 <__sinit+0x5c>
   179fe:	6483      	str	r3, [r0, #72]	; 0x48
   17a00:	64c3      	str	r3, [r0, #76]	; 0x4c
   17a02:	6503      	str	r3, [r0, #80]	; 0x50
   17a04:	4b13      	ldr	r3, [pc, #76]	; (17a54 <__sinit+0x60>)
   17a06:	4a14      	ldr	r2, [pc, #80]	; (17a58 <__sinit+0x64>)
   17a08:	681b      	ldr	r3, [r3, #0]
   17a0a:	6282      	str	r2, [r0, #40]	; 0x28
   17a0c:	9301      	str	r3, [sp, #4]
   17a0e:	4298      	cmp	r0, r3
   17a10:	d101      	bne.n	17a16 <__sinit+0x22>
   17a12:	2301      	movs	r3, #1
   17a14:	6183      	str	r3, [r0, #24]
   17a16:	0020      	movs	r0, r4
   17a18:	f000 f820 	bl	17a5c <__sfp>
   17a1c:	6060      	str	r0, [r4, #4]
   17a1e:	0020      	movs	r0, r4
   17a20:	f000 f81c 	bl	17a5c <__sfp>
   17a24:	60a0      	str	r0, [r4, #8]
   17a26:	0020      	movs	r0, r4
   17a28:	f000 f818 	bl	17a5c <__sfp>
   17a2c:	2200      	movs	r2, #0
   17a2e:	60e0      	str	r0, [r4, #12]
   17a30:	2104      	movs	r1, #4
   17a32:	6860      	ldr	r0, [r4, #4]
   17a34:	f7ff ffa4 	bl	17980 <std.isra.0>
   17a38:	2201      	movs	r2, #1
   17a3a:	2109      	movs	r1, #9
   17a3c:	68a0      	ldr	r0, [r4, #8]
   17a3e:	f7ff ff9f 	bl	17980 <std.isra.0>
   17a42:	2202      	movs	r2, #2
   17a44:	2112      	movs	r1, #18
   17a46:	68e0      	ldr	r0, [r4, #12]
   17a48:	f7ff ff9a 	bl	17980 <std.isra.0>
   17a4c:	2301      	movs	r3, #1
   17a4e:	61a3      	str	r3, [r4, #24]
   17a50:	bd13      	pop	{r0, r1, r4, pc}
   17a52:	46c0      	nop			; (mov r8, r8)
   17a54:	0001a758 	.word	0x0001a758
   17a58:	00017971 	.word	0x00017971

00017a5c <__sfp>:
   17a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a5e:	4b1e      	ldr	r3, [pc, #120]	; (17ad8 <__sfp+0x7c>)
   17a60:	0007      	movs	r7, r0
   17a62:	681e      	ldr	r6, [r3, #0]
   17a64:	69b3      	ldr	r3, [r6, #24]
   17a66:	2b00      	cmp	r3, #0
   17a68:	d102      	bne.n	17a70 <__sfp+0x14>
   17a6a:	0030      	movs	r0, r6
   17a6c:	f7ff ffc2 	bl	179f4 <__sinit>
   17a70:	3648      	adds	r6, #72	; 0x48
   17a72:	68b4      	ldr	r4, [r6, #8]
   17a74:	6873      	ldr	r3, [r6, #4]
   17a76:	3b01      	subs	r3, #1
   17a78:	d504      	bpl.n	17a84 <__sfp+0x28>
   17a7a:	6833      	ldr	r3, [r6, #0]
   17a7c:	2b00      	cmp	r3, #0
   17a7e:	d007      	beq.n	17a90 <__sfp+0x34>
   17a80:	6836      	ldr	r6, [r6, #0]
   17a82:	e7f6      	b.n	17a72 <__sfp+0x16>
   17a84:	220c      	movs	r2, #12
   17a86:	5ea5      	ldrsh	r5, [r4, r2]
   17a88:	2d00      	cmp	r5, #0
   17a8a:	d00d      	beq.n	17aa8 <__sfp+0x4c>
   17a8c:	3468      	adds	r4, #104	; 0x68
   17a8e:	e7f2      	b.n	17a76 <__sfp+0x1a>
   17a90:	2104      	movs	r1, #4
   17a92:	0038      	movs	r0, r7
   17a94:	f7ff ff98 	bl	179c8 <__sfmoreglue>
   17a98:	6030      	str	r0, [r6, #0]
   17a9a:	2800      	cmp	r0, #0
   17a9c:	d1f0      	bne.n	17a80 <__sfp+0x24>
   17a9e:	230c      	movs	r3, #12
   17aa0:	0004      	movs	r4, r0
   17aa2:	603b      	str	r3, [r7, #0]
   17aa4:	0020      	movs	r0, r4
   17aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17aa8:	2301      	movs	r3, #1
   17aaa:	0020      	movs	r0, r4
   17aac:	425b      	negs	r3, r3
   17aae:	81e3      	strh	r3, [r4, #14]
   17ab0:	3302      	adds	r3, #2
   17ab2:	81a3      	strh	r3, [r4, #12]
   17ab4:	6665      	str	r5, [r4, #100]	; 0x64
   17ab6:	6025      	str	r5, [r4, #0]
   17ab8:	60a5      	str	r5, [r4, #8]
   17aba:	6065      	str	r5, [r4, #4]
   17abc:	6125      	str	r5, [r4, #16]
   17abe:	6165      	str	r5, [r4, #20]
   17ac0:	61a5      	str	r5, [r4, #24]
   17ac2:	2208      	movs	r2, #8
   17ac4:	0029      	movs	r1, r5
   17ac6:	305c      	adds	r0, #92	; 0x5c
   17ac8:	f7ff fa71 	bl	16fae <memset>
   17acc:	6365      	str	r5, [r4, #52]	; 0x34
   17ace:	63a5      	str	r5, [r4, #56]	; 0x38
   17ad0:	64a5      	str	r5, [r4, #72]	; 0x48
   17ad2:	64e5      	str	r5, [r4, #76]	; 0x4c
   17ad4:	e7e6      	b.n	17aa4 <__sfp+0x48>
   17ad6:	46c0      	nop			; (mov r8, r8)
   17ad8:	0001a758 	.word	0x0001a758

00017adc <_fwalk_reent>:
   17adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17ade:	0004      	movs	r4, r0
   17ae0:	0007      	movs	r7, r0
   17ae2:	2600      	movs	r6, #0
   17ae4:	9101      	str	r1, [sp, #4]
   17ae6:	3448      	adds	r4, #72	; 0x48
   17ae8:	2c00      	cmp	r4, #0
   17aea:	d101      	bne.n	17af0 <_fwalk_reent+0x14>
   17aec:	0030      	movs	r0, r6
   17aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17af0:	6863      	ldr	r3, [r4, #4]
   17af2:	68a5      	ldr	r5, [r4, #8]
   17af4:	9300      	str	r3, [sp, #0]
   17af6:	9b00      	ldr	r3, [sp, #0]
   17af8:	3b01      	subs	r3, #1
   17afa:	9300      	str	r3, [sp, #0]
   17afc:	d501      	bpl.n	17b02 <_fwalk_reent+0x26>
   17afe:	6824      	ldr	r4, [r4, #0]
   17b00:	e7f2      	b.n	17ae8 <_fwalk_reent+0xc>
   17b02:	89ab      	ldrh	r3, [r5, #12]
   17b04:	2b01      	cmp	r3, #1
   17b06:	d908      	bls.n	17b1a <_fwalk_reent+0x3e>
   17b08:	220e      	movs	r2, #14
   17b0a:	5eab      	ldrsh	r3, [r5, r2]
   17b0c:	3301      	adds	r3, #1
   17b0e:	d004      	beq.n	17b1a <_fwalk_reent+0x3e>
   17b10:	0029      	movs	r1, r5
   17b12:	0038      	movs	r0, r7
   17b14:	9b01      	ldr	r3, [sp, #4]
   17b16:	4798      	blx	r3
   17b18:	4306      	orrs	r6, r0
   17b1a:	3568      	adds	r5, #104	; 0x68
   17b1c:	e7eb      	b.n	17af6 <_fwalk_reent+0x1a>

00017b1e <__locale_ctype_ptr_l>:
   17b1e:	30ec      	adds	r0, #236	; 0xec
   17b20:	6800      	ldr	r0, [r0, #0]
   17b22:	4770      	bx	lr

00017b24 <__swhatbuf_r>:
   17b24:	b570      	push	{r4, r5, r6, lr}
   17b26:	000e      	movs	r6, r1
   17b28:	001d      	movs	r5, r3
   17b2a:	230e      	movs	r3, #14
   17b2c:	5ec9      	ldrsh	r1, [r1, r3]
   17b2e:	b090      	sub	sp, #64	; 0x40
   17b30:	0014      	movs	r4, r2
   17b32:	2900      	cmp	r1, #0
   17b34:	da07      	bge.n	17b46 <__swhatbuf_r+0x22>
   17b36:	2300      	movs	r3, #0
   17b38:	602b      	str	r3, [r5, #0]
   17b3a:	89b3      	ldrh	r3, [r6, #12]
   17b3c:	061b      	lsls	r3, r3, #24
   17b3e:	d411      	bmi.n	17b64 <__swhatbuf_r+0x40>
   17b40:	2380      	movs	r3, #128	; 0x80
   17b42:	00db      	lsls	r3, r3, #3
   17b44:	e00f      	b.n	17b66 <__swhatbuf_r+0x42>
   17b46:	aa01      	add	r2, sp, #4
   17b48:	f000 fd52 	bl	185f0 <_fstat_r>
   17b4c:	2800      	cmp	r0, #0
   17b4e:	dbf2      	blt.n	17b36 <__swhatbuf_r+0x12>
   17b50:	22f0      	movs	r2, #240	; 0xf0
   17b52:	9b02      	ldr	r3, [sp, #8]
   17b54:	0212      	lsls	r2, r2, #8
   17b56:	4013      	ands	r3, r2
   17b58:	4a05      	ldr	r2, [pc, #20]	; (17b70 <__swhatbuf_r+0x4c>)
   17b5a:	189b      	adds	r3, r3, r2
   17b5c:	425a      	negs	r2, r3
   17b5e:	4153      	adcs	r3, r2
   17b60:	602b      	str	r3, [r5, #0]
   17b62:	e7ed      	b.n	17b40 <__swhatbuf_r+0x1c>
   17b64:	2340      	movs	r3, #64	; 0x40
   17b66:	2000      	movs	r0, #0
   17b68:	6023      	str	r3, [r4, #0]
   17b6a:	b010      	add	sp, #64	; 0x40
   17b6c:	bd70      	pop	{r4, r5, r6, pc}
   17b6e:	46c0      	nop			; (mov r8, r8)
   17b70:	ffffe000 	.word	0xffffe000

00017b74 <__smakebuf_r>:
   17b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17b76:	2602      	movs	r6, #2
   17b78:	898b      	ldrh	r3, [r1, #12]
   17b7a:	0005      	movs	r5, r0
   17b7c:	000c      	movs	r4, r1
   17b7e:	4233      	tst	r3, r6
   17b80:	d006      	beq.n	17b90 <__smakebuf_r+0x1c>
   17b82:	0023      	movs	r3, r4
   17b84:	3347      	adds	r3, #71	; 0x47
   17b86:	6023      	str	r3, [r4, #0]
   17b88:	6123      	str	r3, [r4, #16]
   17b8a:	2301      	movs	r3, #1
   17b8c:	6163      	str	r3, [r4, #20]
   17b8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17b90:	ab01      	add	r3, sp, #4
   17b92:	466a      	mov	r2, sp
   17b94:	f7ff ffc6 	bl	17b24 <__swhatbuf_r>
   17b98:	9900      	ldr	r1, [sp, #0]
   17b9a:	0007      	movs	r7, r0
   17b9c:	0028      	movs	r0, r5
   17b9e:	f7ff fa59 	bl	17054 <_malloc_r>
   17ba2:	2800      	cmp	r0, #0
   17ba4:	d108      	bne.n	17bb8 <__smakebuf_r+0x44>
   17ba6:	220c      	movs	r2, #12
   17ba8:	5ea3      	ldrsh	r3, [r4, r2]
   17baa:	059a      	lsls	r2, r3, #22
   17bac:	d4ef      	bmi.n	17b8e <__smakebuf_r+0x1a>
   17bae:	2203      	movs	r2, #3
   17bb0:	4393      	bics	r3, r2
   17bb2:	431e      	orrs	r6, r3
   17bb4:	81a6      	strh	r6, [r4, #12]
   17bb6:	e7e4      	b.n	17b82 <__smakebuf_r+0xe>
   17bb8:	4b0f      	ldr	r3, [pc, #60]	; (17bf8 <__smakebuf_r+0x84>)
   17bba:	62ab      	str	r3, [r5, #40]	; 0x28
   17bbc:	2380      	movs	r3, #128	; 0x80
   17bbe:	89a2      	ldrh	r2, [r4, #12]
   17bc0:	6020      	str	r0, [r4, #0]
   17bc2:	4313      	orrs	r3, r2
   17bc4:	81a3      	strh	r3, [r4, #12]
   17bc6:	9b00      	ldr	r3, [sp, #0]
   17bc8:	6120      	str	r0, [r4, #16]
   17bca:	6163      	str	r3, [r4, #20]
   17bcc:	9b01      	ldr	r3, [sp, #4]
   17bce:	2b00      	cmp	r3, #0
   17bd0:	d00d      	beq.n	17bee <__smakebuf_r+0x7a>
   17bd2:	230e      	movs	r3, #14
   17bd4:	5ee1      	ldrsh	r1, [r4, r3]
   17bd6:	0028      	movs	r0, r5
   17bd8:	f000 fd1c 	bl	18614 <_isatty_r>
   17bdc:	2800      	cmp	r0, #0
   17bde:	d006      	beq.n	17bee <__smakebuf_r+0x7a>
   17be0:	2203      	movs	r2, #3
   17be2:	89a3      	ldrh	r3, [r4, #12]
   17be4:	4393      	bics	r3, r2
   17be6:	001a      	movs	r2, r3
   17be8:	2301      	movs	r3, #1
   17bea:	4313      	orrs	r3, r2
   17bec:	81a3      	strh	r3, [r4, #12]
   17bee:	89a0      	ldrh	r0, [r4, #12]
   17bf0:	4338      	orrs	r0, r7
   17bf2:	81a0      	strh	r0, [r4, #12]
   17bf4:	e7cb      	b.n	17b8e <__smakebuf_r+0x1a>
   17bf6:	46c0      	nop			; (mov r8, r8)
   17bf8:	00017971 	.word	0x00017971

00017bfc <__ascii_mbtowc>:
   17bfc:	b082      	sub	sp, #8
   17bfe:	2900      	cmp	r1, #0
   17c00:	d100      	bne.n	17c04 <__ascii_mbtowc+0x8>
   17c02:	a901      	add	r1, sp, #4
   17c04:	1e10      	subs	r0, r2, #0
   17c06:	d006      	beq.n	17c16 <__ascii_mbtowc+0x1a>
   17c08:	2b00      	cmp	r3, #0
   17c0a:	d006      	beq.n	17c1a <__ascii_mbtowc+0x1e>
   17c0c:	7813      	ldrb	r3, [r2, #0]
   17c0e:	600b      	str	r3, [r1, #0]
   17c10:	7810      	ldrb	r0, [r2, #0]
   17c12:	1e43      	subs	r3, r0, #1
   17c14:	4198      	sbcs	r0, r3
   17c16:	b002      	add	sp, #8
   17c18:	4770      	bx	lr
   17c1a:	2002      	movs	r0, #2
   17c1c:	4240      	negs	r0, r0
   17c1e:	e7fa      	b.n	17c16 <__ascii_mbtowc+0x1a>

00017c20 <__malloc_lock>:
   17c20:	4770      	bx	lr

00017c22 <__malloc_unlock>:
   17c22:	4770      	bx	lr

00017c24 <__ssputs_r>:
   17c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c26:	688e      	ldr	r6, [r1, #8]
   17c28:	b085      	sub	sp, #20
   17c2a:	0007      	movs	r7, r0
   17c2c:	000c      	movs	r4, r1
   17c2e:	9203      	str	r2, [sp, #12]
   17c30:	9301      	str	r3, [sp, #4]
   17c32:	429e      	cmp	r6, r3
   17c34:	d839      	bhi.n	17caa <__ssputs_r+0x86>
   17c36:	2390      	movs	r3, #144	; 0x90
   17c38:	898a      	ldrh	r2, [r1, #12]
   17c3a:	00db      	lsls	r3, r3, #3
   17c3c:	421a      	tst	r2, r3
   17c3e:	d034      	beq.n	17caa <__ssputs_r+0x86>
   17c40:	2503      	movs	r5, #3
   17c42:	6909      	ldr	r1, [r1, #16]
   17c44:	6823      	ldr	r3, [r4, #0]
   17c46:	1a5b      	subs	r3, r3, r1
   17c48:	9302      	str	r3, [sp, #8]
   17c4a:	6963      	ldr	r3, [r4, #20]
   17c4c:	9802      	ldr	r0, [sp, #8]
   17c4e:	435d      	muls	r5, r3
   17c50:	0feb      	lsrs	r3, r5, #31
   17c52:	195d      	adds	r5, r3, r5
   17c54:	9b01      	ldr	r3, [sp, #4]
   17c56:	106d      	asrs	r5, r5, #1
   17c58:	3301      	adds	r3, #1
   17c5a:	181b      	adds	r3, r3, r0
   17c5c:	42ab      	cmp	r3, r5
   17c5e:	d900      	bls.n	17c62 <__ssputs_r+0x3e>
   17c60:	001d      	movs	r5, r3
   17c62:	0553      	lsls	r3, r2, #21
   17c64:	d532      	bpl.n	17ccc <__ssputs_r+0xa8>
   17c66:	0029      	movs	r1, r5
   17c68:	0038      	movs	r0, r7
   17c6a:	f7ff f9f3 	bl	17054 <_malloc_r>
   17c6e:	1e06      	subs	r6, r0, #0
   17c70:	d109      	bne.n	17c86 <__ssputs_r+0x62>
   17c72:	230c      	movs	r3, #12
   17c74:	603b      	str	r3, [r7, #0]
   17c76:	2340      	movs	r3, #64	; 0x40
   17c78:	2001      	movs	r0, #1
   17c7a:	89a2      	ldrh	r2, [r4, #12]
   17c7c:	4240      	negs	r0, r0
   17c7e:	4313      	orrs	r3, r2
   17c80:	81a3      	strh	r3, [r4, #12]
   17c82:	b005      	add	sp, #20
   17c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c86:	9a02      	ldr	r2, [sp, #8]
   17c88:	6921      	ldr	r1, [r4, #16]
   17c8a:	f7ff f975 	bl	16f78 <memcpy>
   17c8e:	89a3      	ldrh	r3, [r4, #12]
   17c90:	4a14      	ldr	r2, [pc, #80]	; (17ce4 <__ssputs_r+0xc0>)
   17c92:	401a      	ands	r2, r3
   17c94:	2380      	movs	r3, #128	; 0x80
   17c96:	4313      	orrs	r3, r2
   17c98:	81a3      	strh	r3, [r4, #12]
   17c9a:	9b02      	ldr	r3, [sp, #8]
   17c9c:	6126      	str	r6, [r4, #16]
   17c9e:	18f6      	adds	r6, r6, r3
   17ca0:	6026      	str	r6, [r4, #0]
   17ca2:	6165      	str	r5, [r4, #20]
   17ca4:	9e01      	ldr	r6, [sp, #4]
   17ca6:	1aed      	subs	r5, r5, r3
   17ca8:	60a5      	str	r5, [r4, #8]
   17caa:	9b01      	ldr	r3, [sp, #4]
   17cac:	42b3      	cmp	r3, r6
   17cae:	d200      	bcs.n	17cb2 <__ssputs_r+0x8e>
   17cb0:	001e      	movs	r6, r3
   17cb2:	0032      	movs	r2, r6
   17cb4:	9903      	ldr	r1, [sp, #12]
   17cb6:	6820      	ldr	r0, [r4, #0]
   17cb8:	f7ff f967 	bl	16f8a <memmove>
   17cbc:	68a3      	ldr	r3, [r4, #8]
   17cbe:	2000      	movs	r0, #0
   17cc0:	1b9b      	subs	r3, r3, r6
   17cc2:	60a3      	str	r3, [r4, #8]
   17cc4:	6823      	ldr	r3, [r4, #0]
   17cc6:	199e      	adds	r6, r3, r6
   17cc8:	6026      	str	r6, [r4, #0]
   17cca:	e7da      	b.n	17c82 <__ssputs_r+0x5e>
   17ccc:	002a      	movs	r2, r5
   17cce:	0038      	movs	r0, r7
   17cd0:	f000 fcd1 	bl	18676 <_realloc_r>
   17cd4:	1e06      	subs	r6, r0, #0
   17cd6:	d1e0      	bne.n	17c9a <__ssputs_r+0x76>
   17cd8:	6921      	ldr	r1, [r4, #16]
   17cda:	0038      	movs	r0, r7
   17cdc:	f7ff f970 	bl	16fc0 <_free_r>
   17ce0:	e7c7      	b.n	17c72 <__ssputs_r+0x4e>
   17ce2:	46c0      	nop			; (mov r8, r8)
   17ce4:	fffffb7f 	.word	0xfffffb7f

00017ce8 <_svfiprintf_r>:
   17ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17cea:	b09f      	sub	sp, #124	; 0x7c
   17cec:	9002      	str	r0, [sp, #8]
   17cee:	9305      	str	r3, [sp, #20]
   17cf0:	898b      	ldrh	r3, [r1, #12]
   17cf2:	000f      	movs	r7, r1
   17cf4:	0016      	movs	r6, r2
   17cf6:	061b      	lsls	r3, r3, #24
   17cf8:	d511      	bpl.n	17d1e <_svfiprintf_r+0x36>
   17cfa:	690b      	ldr	r3, [r1, #16]
   17cfc:	2b00      	cmp	r3, #0
   17cfe:	d10e      	bne.n	17d1e <_svfiprintf_r+0x36>
   17d00:	2140      	movs	r1, #64	; 0x40
   17d02:	f7ff f9a7 	bl	17054 <_malloc_r>
   17d06:	6038      	str	r0, [r7, #0]
   17d08:	6138      	str	r0, [r7, #16]
   17d0a:	2800      	cmp	r0, #0
   17d0c:	d105      	bne.n	17d1a <_svfiprintf_r+0x32>
   17d0e:	230c      	movs	r3, #12
   17d10:	9a02      	ldr	r2, [sp, #8]
   17d12:	3801      	subs	r0, #1
   17d14:	6013      	str	r3, [r2, #0]
   17d16:	b01f      	add	sp, #124	; 0x7c
   17d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d1a:	2340      	movs	r3, #64	; 0x40
   17d1c:	617b      	str	r3, [r7, #20]
   17d1e:	2300      	movs	r3, #0
   17d20:	ad06      	add	r5, sp, #24
   17d22:	616b      	str	r3, [r5, #20]
   17d24:	3320      	adds	r3, #32
   17d26:	766b      	strb	r3, [r5, #25]
   17d28:	3310      	adds	r3, #16
   17d2a:	76ab      	strb	r3, [r5, #26]
   17d2c:	0034      	movs	r4, r6
   17d2e:	7823      	ldrb	r3, [r4, #0]
   17d30:	2b00      	cmp	r3, #0
   17d32:	d147      	bne.n	17dc4 <_svfiprintf_r+0xdc>
   17d34:	1ba3      	subs	r3, r4, r6
   17d36:	9304      	str	r3, [sp, #16]
   17d38:	d00d      	beq.n	17d56 <_svfiprintf_r+0x6e>
   17d3a:	1ba3      	subs	r3, r4, r6
   17d3c:	0032      	movs	r2, r6
   17d3e:	0039      	movs	r1, r7
   17d40:	9802      	ldr	r0, [sp, #8]
   17d42:	f7ff ff6f 	bl	17c24 <__ssputs_r>
   17d46:	1c43      	adds	r3, r0, #1
   17d48:	d100      	bne.n	17d4c <_svfiprintf_r+0x64>
   17d4a:	e0b5      	b.n	17eb8 <_svfiprintf_r+0x1d0>
   17d4c:	696a      	ldr	r2, [r5, #20]
   17d4e:	9b04      	ldr	r3, [sp, #16]
   17d50:	4694      	mov	ip, r2
   17d52:	4463      	add	r3, ip
   17d54:	616b      	str	r3, [r5, #20]
   17d56:	7823      	ldrb	r3, [r4, #0]
   17d58:	2b00      	cmp	r3, #0
   17d5a:	d100      	bne.n	17d5e <_svfiprintf_r+0x76>
   17d5c:	e0ac      	b.n	17eb8 <_svfiprintf_r+0x1d0>
   17d5e:	2201      	movs	r2, #1
   17d60:	2300      	movs	r3, #0
   17d62:	4252      	negs	r2, r2
   17d64:	606a      	str	r2, [r5, #4]
   17d66:	a902      	add	r1, sp, #8
   17d68:	3254      	adds	r2, #84	; 0x54
   17d6a:	1852      	adds	r2, r2, r1
   17d6c:	3401      	adds	r4, #1
   17d6e:	602b      	str	r3, [r5, #0]
   17d70:	60eb      	str	r3, [r5, #12]
   17d72:	60ab      	str	r3, [r5, #8]
   17d74:	7013      	strb	r3, [r2, #0]
   17d76:	65ab      	str	r3, [r5, #88]	; 0x58
   17d78:	4e58      	ldr	r6, [pc, #352]	; (17edc <_svfiprintf_r+0x1f4>)
   17d7a:	2205      	movs	r2, #5
   17d7c:	7821      	ldrb	r1, [r4, #0]
   17d7e:	0030      	movs	r0, r6
   17d80:	f000 fc6e 	bl	18660 <memchr>
   17d84:	1c62      	adds	r2, r4, #1
   17d86:	2800      	cmp	r0, #0
   17d88:	d120      	bne.n	17dcc <_svfiprintf_r+0xe4>
   17d8a:	6829      	ldr	r1, [r5, #0]
   17d8c:	06cb      	lsls	r3, r1, #27
   17d8e:	d504      	bpl.n	17d9a <_svfiprintf_r+0xb2>
   17d90:	2353      	movs	r3, #83	; 0x53
   17d92:	ae02      	add	r6, sp, #8
   17d94:	3020      	adds	r0, #32
   17d96:	199b      	adds	r3, r3, r6
   17d98:	7018      	strb	r0, [r3, #0]
   17d9a:	070b      	lsls	r3, r1, #28
   17d9c:	d504      	bpl.n	17da8 <_svfiprintf_r+0xc0>
   17d9e:	2353      	movs	r3, #83	; 0x53
   17da0:	202b      	movs	r0, #43	; 0x2b
   17da2:	ae02      	add	r6, sp, #8
   17da4:	199b      	adds	r3, r3, r6
   17da6:	7018      	strb	r0, [r3, #0]
   17da8:	7823      	ldrb	r3, [r4, #0]
   17daa:	2b2a      	cmp	r3, #42	; 0x2a
   17dac:	d016      	beq.n	17ddc <_svfiprintf_r+0xf4>
   17dae:	2000      	movs	r0, #0
   17db0:	210a      	movs	r1, #10
   17db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17db4:	7822      	ldrb	r2, [r4, #0]
   17db6:	3a30      	subs	r2, #48	; 0x30
   17db8:	2a09      	cmp	r2, #9
   17dba:	d955      	bls.n	17e68 <_svfiprintf_r+0x180>
   17dbc:	2800      	cmp	r0, #0
   17dbe:	d015      	beq.n	17dec <_svfiprintf_r+0x104>
   17dc0:	9309      	str	r3, [sp, #36]	; 0x24
   17dc2:	e013      	b.n	17dec <_svfiprintf_r+0x104>
   17dc4:	2b25      	cmp	r3, #37	; 0x25
   17dc6:	d0b5      	beq.n	17d34 <_svfiprintf_r+0x4c>
   17dc8:	3401      	adds	r4, #1
   17dca:	e7b0      	b.n	17d2e <_svfiprintf_r+0x46>
   17dcc:	2301      	movs	r3, #1
   17dce:	1b80      	subs	r0, r0, r6
   17dd0:	4083      	lsls	r3, r0
   17dd2:	6829      	ldr	r1, [r5, #0]
   17dd4:	0014      	movs	r4, r2
   17dd6:	430b      	orrs	r3, r1
   17dd8:	602b      	str	r3, [r5, #0]
   17dda:	e7cd      	b.n	17d78 <_svfiprintf_r+0x90>
   17ddc:	9b05      	ldr	r3, [sp, #20]
   17dde:	1d18      	adds	r0, r3, #4
   17de0:	681b      	ldr	r3, [r3, #0]
   17de2:	9005      	str	r0, [sp, #20]
   17de4:	2b00      	cmp	r3, #0
   17de6:	db39      	blt.n	17e5c <_svfiprintf_r+0x174>
   17de8:	9309      	str	r3, [sp, #36]	; 0x24
   17dea:	0014      	movs	r4, r2
   17dec:	7823      	ldrb	r3, [r4, #0]
   17dee:	2b2e      	cmp	r3, #46	; 0x2e
   17df0:	d10b      	bne.n	17e0a <_svfiprintf_r+0x122>
   17df2:	7863      	ldrb	r3, [r4, #1]
   17df4:	1c62      	adds	r2, r4, #1
   17df6:	2b2a      	cmp	r3, #42	; 0x2a
   17df8:	d13e      	bne.n	17e78 <_svfiprintf_r+0x190>
   17dfa:	9b05      	ldr	r3, [sp, #20]
   17dfc:	3402      	adds	r4, #2
   17dfe:	1d1a      	adds	r2, r3, #4
   17e00:	681b      	ldr	r3, [r3, #0]
   17e02:	9205      	str	r2, [sp, #20]
   17e04:	2b00      	cmp	r3, #0
   17e06:	db34      	blt.n	17e72 <_svfiprintf_r+0x18a>
   17e08:	9307      	str	r3, [sp, #28]
   17e0a:	4e35      	ldr	r6, [pc, #212]	; (17ee0 <_svfiprintf_r+0x1f8>)
   17e0c:	7821      	ldrb	r1, [r4, #0]
   17e0e:	2203      	movs	r2, #3
   17e10:	0030      	movs	r0, r6
   17e12:	f000 fc25 	bl	18660 <memchr>
   17e16:	2800      	cmp	r0, #0
   17e18:	d006      	beq.n	17e28 <_svfiprintf_r+0x140>
   17e1a:	2340      	movs	r3, #64	; 0x40
   17e1c:	1b80      	subs	r0, r0, r6
   17e1e:	4083      	lsls	r3, r0
   17e20:	682a      	ldr	r2, [r5, #0]
   17e22:	3401      	adds	r4, #1
   17e24:	4313      	orrs	r3, r2
   17e26:	602b      	str	r3, [r5, #0]
   17e28:	7821      	ldrb	r1, [r4, #0]
   17e2a:	2206      	movs	r2, #6
   17e2c:	482d      	ldr	r0, [pc, #180]	; (17ee4 <_svfiprintf_r+0x1fc>)
   17e2e:	1c66      	adds	r6, r4, #1
   17e30:	7629      	strb	r1, [r5, #24]
   17e32:	f000 fc15 	bl	18660 <memchr>
   17e36:	2800      	cmp	r0, #0
   17e38:	d046      	beq.n	17ec8 <_svfiprintf_r+0x1e0>
   17e3a:	4b2b      	ldr	r3, [pc, #172]	; (17ee8 <_svfiprintf_r+0x200>)
   17e3c:	2b00      	cmp	r3, #0
   17e3e:	d12f      	bne.n	17ea0 <_svfiprintf_r+0x1b8>
   17e40:	6829      	ldr	r1, [r5, #0]
   17e42:	9b05      	ldr	r3, [sp, #20]
   17e44:	2207      	movs	r2, #7
   17e46:	05c9      	lsls	r1, r1, #23
   17e48:	d528      	bpl.n	17e9c <_svfiprintf_r+0x1b4>
   17e4a:	189b      	adds	r3, r3, r2
   17e4c:	4393      	bics	r3, r2
   17e4e:	3308      	adds	r3, #8
   17e50:	9305      	str	r3, [sp, #20]
   17e52:	696b      	ldr	r3, [r5, #20]
   17e54:	9a03      	ldr	r2, [sp, #12]
   17e56:	189b      	adds	r3, r3, r2
   17e58:	616b      	str	r3, [r5, #20]
   17e5a:	e767      	b.n	17d2c <_svfiprintf_r+0x44>
   17e5c:	425b      	negs	r3, r3
   17e5e:	60eb      	str	r3, [r5, #12]
   17e60:	2302      	movs	r3, #2
   17e62:	430b      	orrs	r3, r1
   17e64:	602b      	str	r3, [r5, #0]
   17e66:	e7c0      	b.n	17dea <_svfiprintf_r+0x102>
   17e68:	434b      	muls	r3, r1
   17e6a:	3401      	adds	r4, #1
   17e6c:	189b      	adds	r3, r3, r2
   17e6e:	2001      	movs	r0, #1
   17e70:	e7a0      	b.n	17db4 <_svfiprintf_r+0xcc>
   17e72:	2301      	movs	r3, #1
   17e74:	425b      	negs	r3, r3
   17e76:	e7c7      	b.n	17e08 <_svfiprintf_r+0x120>
   17e78:	2300      	movs	r3, #0
   17e7a:	0014      	movs	r4, r2
   17e7c:	200a      	movs	r0, #10
   17e7e:	001a      	movs	r2, r3
   17e80:	606b      	str	r3, [r5, #4]
   17e82:	7821      	ldrb	r1, [r4, #0]
   17e84:	3930      	subs	r1, #48	; 0x30
   17e86:	2909      	cmp	r1, #9
   17e88:	d903      	bls.n	17e92 <_svfiprintf_r+0x1aa>
   17e8a:	2b00      	cmp	r3, #0
   17e8c:	d0bd      	beq.n	17e0a <_svfiprintf_r+0x122>
   17e8e:	9207      	str	r2, [sp, #28]
   17e90:	e7bb      	b.n	17e0a <_svfiprintf_r+0x122>
   17e92:	4342      	muls	r2, r0
   17e94:	3401      	adds	r4, #1
   17e96:	1852      	adds	r2, r2, r1
   17e98:	2301      	movs	r3, #1
   17e9a:	e7f2      	b.n	17e82 <_svfiprintf_r+0x19a>
   17e9c:	3307      	adds	r3, #7
   17e9e:	e7d5      	b.n	17e4c <_svfiprintf_r+0x164>
   17ea0:	ab05      	add	r3, sp, #20
   17ea2:	9300      	str	r3, [sp, #0]
   17ea4:	003a      	movs	r2, r7
   17ea6:	4b11      	ldr	r3, [pc, #68]	; (17eec <_svfiprintf_r+0x204>)
   17ea8:	0029      	movs	r1, r5
   17eaa:	9802      	ldr	r0, [sp, #8]
   17eac:	e000      	b.n	17eb0 <_svfiprintf_r+0x1c8>
   17eae:	bf00      	nop
   17eb0:	9003      	str	r0, [sp, #12]
   17eb2:	9b03      	ldr	r3, [sp, #12]
   17eb4:	3301      	adds	r3, #1
   17eb6:	d1cc      	bne.n	17e52 <_svfiprintf_r+0x16a>
   17eb8:	89bb      	ldrh	r3, [r7, #12]
   17eba:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17ebc:	065b      	lsls	r3, r3, #25
   17ebe:	d400      	bmi.n	17ec2 <_svfiprintf_r+0x1da>
   17ec0:	e729      	b.n	17d16 <_svfiprintf_r+0x2e>
   17ec2:	2001      	movs	r0, #1
   17ec4:	4240      	negs	r0, r0
   17ec6:	e726      	b.n	17d16 <_svfiprintf_r+0x2e>
   17ec8:	ab05      	add	r3, sp, #20
   17eca:	9300      	str	r3, [sp, #0]
   17ecc:	003a      	movs	r2, r7
   17ece:	4b07      	ldr	r3, [pc, #28]	; (17eec <_svfiprintf_r+0x204>)
   17ed0:	0029      	movs	r1, r5
   17ed2:	9802      	ldr	r0, [sp, #8]
   17ed4:	f000 f9be 	bl	18254 <_printf_i>
   17ed8:	e7ea      	b.n	17eb0 <_svfiprintf_r+0x1c8>
   17eda:	46c0      	nop			; (mov r8, r8)
   17edc:	0001a7c6 	.word	0x0001a7c6
   17ee0:	0001a7cc 	.word	0x0001a7cc
   17ee4:	0001a7d0 	.word	0x0001a7d0
   17ee8:	00000000 	.word	0x00000000
   17eec:	00017c25 	.word	0x00017c25

00017ef0 <__sfputc_r>:
   17ef0:	6893      	ldr	r3, [r2, #8]
   17ef2:	b510      	push	{r4, lr}
   17ef4:	3b01      	subs	r3, #1
   17ef6:	6093      	str	r3, [r2, #8]
   17ef8:	2b00      	cmp	r3, #0
   17efa:	da05      	bge.n	17f08 <__sfputc_r+0x18>
   17efc:	6994      	ldr	r4, [r2, #24]
   17efe:	42a3      	cmp	r3, r4
   17f00:	db08      	blt.n	17f14 <__sfputc_r+0x24>
   17f02:	b2cb      	uxtb	r3, r1
   17f04:	2b0a      	cmp	r3, #10
   17f06:	d005      	beq.n	17f14 <__sfputc_r+0x24>
   17f08:	6813      	ldr	r3, [r2, #0]
   17f0a:	1c58      	adds	r0, r3, #1
   17f0c:	6010      	str	r0, [r2, #0]
   17f0e:	7019      	strb	r1, [r3, #0]
   17f10:	b2c8      	uxtb	r0, r1
   17f12:	bd10      	pop	{r4, pc}
   17f14:	f7ff fbaa 	bl	1766c <__swbuf_r>
   17f18:	e7fb      	b.n	17f12 <__sfputc_r+0x22>

00017f1a <__sfputs_r>:
   17f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f1c:	0006      	movs	r6, r0
   17f1e:	000f      	movs	r7, r1
   17f20:	0014      	movs	r4, r2
   17f22:	18d5      	adds	r5, r2, r3
   17f24:	42ac      	cmp	r4, r5
   17f26:	d101      	bne.n	17f2c <__sfputs_r+0x12>
   17f28:	2000      	movs	r0, #0
   17f2a:	e007      	b.n	17f3c <__sfputs_r+0x22>
   17f2c:	7821      	ldrb	r1, [r4, #0]
   17f2e:	003a      	movs	r2, r7
   17f30:	0030      	movs	r0, r6
   17f32:	f7ff ffdd 	bl	17ef0 <__sfputc_r>
   17f36:	3401      	adds	r4, #1
   17f38:	1c43      	adds	r3, r0, #1
   17f3a:	d1f3      	bne.n	17f24 <__sfputs_r+0xa>
   17f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00017f40 <_vfiprintf_r>:
   17f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f42:	b09f      	sub	sp, #124	; 0x7c
   17f44:	0006      	movs	r6, r0
   17f46:	000f      	movs	r7, r1
   17f48:	0014      	movs	r4, r2
   17f4a:	9305      	str	r3, [sp, #20]
   17f4c:	2800      	cmp	r0, #0
   17f4e:	d004      	beq.n	17f5a <_vfiprintf_r+0x1a>
   17f50:	6983      	ldr	r3, [r0, #24]
   17f52:	2b00      	cmp	r3, #0
   17f54:	d101      	bne.n	17f5a <_vfiprintf_r+0x1a>
   17f56:	f7ff fd4d 	bl	179f4 <__sinit>
   17f5a:	4b7f      	ldr	r3, [pc, #508]	; (18158 <_vfiprintf_r+0x218>)
   17f5c:	429f      	cmp	r7, r3
   17f5e:	d15c      	bne.n	1801a <_vfiprintf_r+0xda>
   17f60:	6877      	ldr	r7, [r6, #4]
   17f62:	89bb      	ldrh	r3, [r7, #12]
   17f64:	071b      	lsls	r3, r3, #28
   17f66:	d562      	bpl.n	1802e <_vfiprintf_r+0xee>
   17f68:	693b      	ldr	r3, [r7, #16]
   17f6a:	2b00      	cmp	r3, #0
   17f6c:	d05f      	beq.n	1802e <_vfiprintf_r+0xee>
   17f6e:	2300      	movs	r3, #0
   17f70:	ad06      	add	r5, sp, #24
   17f72:	616b      	str	r3, [r5, #20]
   17f74:	3320      	adds	r3, #32
   17f76:	766b      	strb	r3, [r5, #25]
   17f78:	3310      	adds	r3, #16
   17f7a:	76ab      	strb	r3, [r5, #26]
   17f7c:	9402      	str	r4, [sp, #8]
   17f7e:	9c02      	ldr	r4, [sp, #8]
   17f80:	7823      	ldrb	r3, [r4, #0]
   17f82:	2b00      	cmp	r3, #0
   17f84:	d15d      	bne.n	18042 <_vfiprintf_r+0x102>
   17f86:	9b02      	ldr	r3, [sp, #8]
   17f88:	1ae3      	subs	r3, r4, r3
   17f8a:	9304      	str	r3, [sp, #16]
   17f8c:	d00d      	beq.n	17faa <_vfiprintf_r+0x6a>
   17f8e:	9b04      	ldr	r3, [sp, #16]
   17f90:	9a02      	ldr	r2, [sp, #8]
   17f92:	0039      	movs	r1, r7
   17f94:	0030      	movs	r0, r6
   17f96:	f7ff ffc0 	bl	17f1a <__sfputs_r>
   17f9a:	1c43      	adds	r3, r0, #1
   17f9c:	d100      	bne.n	17fa0 <_vfiprintf_r+0x60>
   17f9e:	e0cc      	b.n	1813a <_vfiprintf_r+0x1fa>
   17fa0:	696a      	ldr	r2, [r5, #20]
   17fa2:	9b04      	ldr	r3, [sp, #16]
   17fa4:	4694      	mov	ip, r2
   17fa6:	4463      	add	r3, ip
   17fa8:	616b      	str	r3, [r5, #20]
   17faa:	7823      	ldrb	r3, [r4, #0]
   17fac:	2b00      	cmp	r3, #0
   17fae:	d100      	bne.n	17fb2 <_vfiprintf_r+0x72>
   17fb0:	e0c3      	b.n	1813a <_vfiprintf_r+0x1fa>
   17fb2:	2201      	movs	r2, #1
   17fb4:	2300      	movs	r3, #0
   17fb6:	4252      	negs	r2, r2
   17fb8:	606a      	str	r2, [r5, #4]
   17fba:	a902      	add	r1, sp, #8
   17fbc:	3254      	adds	r2, #84	; 0x54
   17fbe:	1852      	adds	r2, r2, r1
   17fc0:	3401      	adds	r4, #1
   17fc2:	602b      	str	r3, [r5, #0]
   17fc4:	60eb      	str	r3, [r5, #12]
   17fc6:	60ab      	str	r3, [r5, #8]
   17fc8:	7013      	strb	r3, [r2, #0]
   17fca:	65ab      	str	r3, [r5, #88]	; 0x58
   17fcc:	7821      	ldrb	r1, [r4, #0]
   17fce:	2205      	movs	r2, #5
   17fd0:	4862      	ldr	r0, [pc, #392]	; (1815c <_vfiprintf_r+0x21c>)
   17fd2:	f000 fb45 	bl	18660 <memchr>
   17fd6:	1c63      	adds	r3, r4, #1
   17fd8:	469c      	mov	ip, r3
   17fda:	2800      	cmp	r0, #0
   17fdc:	d135      	bne.n	1804a <_vfiprintf_r+0x10a>
   17fde:	6829      	ldr	r1, [r5, #0]
   17fe0:	06cb      	lsls	r3, r1, #27
   17fe2:	d504      	bpl.n	17fee <_vfiprintf_r+0xae>
   17fe4:	2353      	movs	r3, #83	; 0x53
   17fe6:	aa02      	add	r2, sp, #8
   17fe8:	3020      	adds	r0, #32
   17fea:	189b      	adds	r3, r3, r2
   17fec:	7018      	strb	r0, [r3, #0]
   17fee:	070b      	lsls	r3, r1, #28
   17ff0:	d504      	bpl.n	17ffc <_vfiprintf_r+0xbc>
   17ff2:	2353      	movs	r3, #83	; 0x53
   17ff4:	202b      	movs	r0, #43	; 0x2b
   17ff6:	aa02      	add	r2, sp, #8
   17ff8:	189b      	adds	r3, r3, r2
   17ffa:	7018      	strb	r0, [r3, #0]
   17ffc:	7823      	ldrb	r3, [r4, #0]
   17ffe:	2b2a      	cmp	r3, #42	; 0x2a
   18000:	d02c      	beq.n	1805c <_vfiprintf_r+0x11c>
   18002:	2000      	movs	r0, #0
   18004:	210a      	movs	r1, #10
   18006:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18008:	7822      	ldrb	r2, [r4, #0]
   1800a:	3a30      	subs	r2, #48	; 0x30
   1800c:	2a09      	cmp	r2, #9
   1800e:	d800      	bhi.n	18012 <_vfiprintf_r+0xd2>
   18010:	e06b      	b.n	180ea <_vfiprintf_r+0x1aa>
   18012:	2800      	cmp	r0, #0
   18014:	d02a      	beq.n	1806c <_vfiprintf_r+0x12c>
   18016:	9309      	str	r3, [sp, #36]	; 0x24
   18018:	e028      	b.n	1806c <_vfiprintf_r+0x12c>
   1801a:	4b51      	ldr	r3, [pc, #324]	; (18160 <_vfiprintf_r+0x220>)
   1801c:	429f      	cmp	r7, r3
   1801e:	d101      	bne.n	18024 <_vfiprintf_r+0xe4>
   18020:	68b7      	ldr	r7, [r6, #8]
   18022:	e79e      	b.n	17f62 <_vfiprintf_r+0x22>
   18024:	4b4f      	ldr	r3, [pc, #316]	; (18164 <_vfiprintf_r+0x224>)
   18026:	429f      	cmp	r7, r3
   18028:	d19b      	bne.n	17f62 <_vfiprintf_r+0x22>
   1802a:	68f7      	ldr	r7, [r6, #12]
   1802c:	e799      	b.n	17f62 <_vfiprintf_r+0x22>
   1802e:	0039      	movs	r1, r7
   18030:	0030      	movs	r0, r6
   18032:	f7ff fb71 	bl	17718 <__swsetup_r>
   18036:	2800      	cmp	r0, #0
   18038:	d099      	beq.n	17f6e <_vfiprintf_r+0x2e>
   1803a:	2001      	movs	r0, #1
   1803c:	4240      	negs	r0, r0
   1803e:	b01f      	add	sp, #124	; 0x7c
   18040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18042:	2b25      	cmp	r3, #37	; 0x25
   18044:	d09f      	beq.n	17f86 <_vfiprintf_r+0x46>
   18046:	3401      	adds	r4, #1
   18048:	e79a      	b.n	17f80 <_vfiprintf_r+0x40>
   1804a:	4b44      	ldr	r3, [pc, #272]	; (1815c <_vfiprintf_r+0x21c>)
   1804c:	6829      	ldr	r1, [r5, #0]
   1804e:	1ac0      	subs	r0, r0, r3
   18050:	2301      	movs	r3, #1
   18052:	4083      	lsls	r3, r0
   18054:	430b      	orrs	r3, r1
   18056:	602b      	str	r3, [r5, #0]
   18058:	4664      	mov	r4, ip
   1805a:	e7b7      	b.n	17fcc <_vfiprintf_r+0x8c>
   1805c:	9b05      	ldr	r3, [sp, #20]
   1805e:	1d18      	adds	r0, r3, #4
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	9005      	str	r0, [sp, #20]
   18064:	2b00      	cmp	r3, #0
   18066:	db3a      	blt.n	180de <_vfiprintf_r+0x19e>
   18068:	9309      	str	r3, [sp, #36]	; 0x24
   1806a:	4664      	mov	r4, ip
   1806c:	7823      	ldrb	r3, [r4, #0]
   1806e:	2b2e      	cmp	r3, #46	; 0x2e
   18070:	d10b      	bne.n	1808a <_vfiprintf_r+0x14a>
   18072:	7863      	ldrb	r3, [r4, #1]
   18074:	1c62      	adds	r2, r4, #1
   18076:	2b2a      	cmp	r3, #42	; 0x2a
   18078:	d13f      	bne.n	180fa <_vfiprintf_r+0x1ba>
   1807a:	9b05      	ldr	r3, [sp, #20]
   1807c:	3402      	adds	r4, #2
   1807e:	1d1a      	adds	r2, r3, #4
   18080:	681b      	ldr	r3, [r3, #0]
   18082:	9205      	str	r2, [sp, #20]
   18084:	2b00      	cmp	r3, #0
   18086:	db35      	blt.n	180f4 <_vfiprintf_r+0x1b4>
   18088:	9307      	str	r3, [sp, #28]
   1808a:	7821      	ldrb	r1, [r4, #0]
   1808c:	2203      	movs	r2, #3
   1808e:	4836      	ldr	r0, [pc, #216]	; (18168 <_vfiprintf_r+0x228>)
   18090:	f000 fae6 	bl	18660 <memchr>
   18094:	2800      	cmp	r0, #0
   18096:	d007      	beq.n	180a8 <_vfiprintf_r+0x168>
   18098:	4b33      	ldr	r3, [pc, #204]	; (18168 <_vfiprintf_r+0x228>)
   1809a:	682a      	ldr	r2, [r5, #0]
   1809c:	1ac0      	subs	r0, r0, r3
   1809e:	2340      	movs	r3, #64	; 0x40
   180a0:	4083      	lsls	r3, r0
   180a2:	4313      	orrs	r3, r2
   180a4:	602b      	str	r3, [r5, #0]
   180a6:	3401      	adds	r4, #1
   180a8:	7821      	ldrb	r1, [r4, #0]
   180aa:	1c63      	adds	r3, r4, #1
   180ac:	2206      	movs	r2, #6
   180ae:	482f      	ldr	r0, [pc, #188]	; (1816c <_vfiprintf_r+0x22c>)
   180b0:	9302      	str	r3, [sp, #8]
   180b2:	7629      	strb	r1, [r5, #24]
   180b4:	f000 fad4 	bl	18660 <memchr>
   180b8:	2800      	cmp	r0, #0
   180ba:	d044      	beq.n	18146 <_vfiprintf_r+0x206>
   180bc:	4b2c      	ldr	r3, [pc, #176]	; (18170 <_vfiprintf_r+0x230>)
   180be:	2b00      	cmp	r3, #0
   180c0:	d12f      	bne.n	18122 <_vfiprintf_r+0x1e2>
   180c2:	6829      	ldr	r1, [r5, #0]
   180c4:	9b05      	ldr	r3, [sp, #20]
   180c6:	2207      	movs	r2, #7
   180c8:	05c9      	lsls	r1, r1, #23
   180ca:	d528      	bpl.n	1811e <_vfiprintf_r+0x1de>
   180cc:	189b      	adds	r3, r3, r2
   180ce:	4393      	bics	r3, r2
   180d0:	3308      	adds	r3, #8
   180d2:	9305      	str	r3, [sp, #20]
   180d4:	696b      	ldr	r3, [r5, #20]
   180d6:	9a03      	ldr	r2, [sp, #12]
   180d8:	189b      	adds	r3, r3, r2
   180da:	616b      	str	r3, [r5, #20]
   180dc:	e74f      	b.n	17f7e <_vfiprintf_r+0x3e>
   180de:	425b      	negs	r3, r3
   180e0:	60eb      	str	r3, [r5, #12]
   180e2:	2302      	movs	r3, #2
   180e4:	430b      	orrs	r3, r1
   180e6:	602b      	str	r3, [r5, #0]
   180e8:	e7bf      	b.n	1806a <_vfiprintf_r+0x12a>
   180ea:	434b      	muls	r3, r1
   180ec:	3401      	adds	r4, #1
   180ee:	189b      	adds	r3, r3, r2
   180f0:	2001      	movs	r0, #1
   180f2:	e789      	b.n	18008 <_vfiprintf_r+0xc8>
   180f4:	2301      	movs	r3, #1
   180f6:	425b      	negs	r3, r3
   180f8:	e7c6      	b.n	18088 <_vfiprintf_r+0x148>
   180fa:	2300      	movs	r3, #0
   180fc:	0014      	movs	r4, r2
   180fe:	200a      	movs	r0, #10
   18100:	001a      	movs	r2, r3
   18102:	606b      	str	r3, [r5, #4]
   18104:	7821      	ldrb	r1, [r4, #0]
   18106:	3930      	subs	r1, #48	; 0x30
   18108:	2909      	cmp	r1, #9
   1810a:	d903      	bls.n	18114 <_vfiprintf_r+0x1d4>
   1810c:	2b00      	cmp	r3, #0
   1810e:	d0bc      	beq.n	1808a <_vfiprintf_r+0x14a>
   18110:	9207      	str	r2, [sp, #28]
   18112:	e7ba      	b.n	1808a <_vfiprintf_r+0x14a>
   18114:	4342      	muls	r2, r0
   18116:	3401      	adds	r4, #1
   18118:	1852      	adds	r2, r2, r1
   1811a:	2301      	movs	r3, #1
   1811c:	e7f2      	b.n	18104 <_vfiprintf_r+0x1c4>
   1811e:	3307      	adds	r3, #7
   18120:	e7d5      	b.n	180ce <_vfiprintf_r+0x18e>
   18122:	ab05      	add	r3, sp, #20
   18124:	9300      	str	r3, [sp, #0]
   18126:	003a      	movs	r2, r7
   18128:	4b12      	ldr	r3, [pc, #72]	; (18174 <_vfiprintf_r+0x234>)
   1812a:	0029      	movs	r1, r5
   1812c:	0030      	movs	r0, r6
   1812e:	e000      	b.n	18132 <_vfiprintf_r+0x1f2>
   18130:	bf00      	nop
   18132:	9003      	str	r0, [sp, #12]
   18134:	9b03      	ldr	r3, [sp, #12]
   18136:	3301      	adds	r3, #1
   18138:	d1cc      	bne.n	180d4 <_vfiprintf_r+0x194>
   1813a:	89bb      	ldrh	r3, [r7, #12]
   1813c:	065b      	lsls	r3, r3, #25
   1813e:	d500      	bpl.n	18142 <_vfiprintf_r+0x202>
   18140:	e77b      	b.n	1803a <_vfiprintf_r+0xfa>
   18142:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18144:	e77b      	b.n	1803e <_vfiprintf_r+0xfe>
   18146:	ab05      	add	r3, sp, #20
   18148:	9300      	str	r3, [sp, #0]
   1814a:	003a      	movs	r2, r7
   1814c:	4b09      	ldr	r3, [pc, #36]	; (18174 <_vfiprintf_r+0x234>)
   1814e:	0029      	movs	r1, r5
   18150:	0030      	movs	r0, r6
   18152:	f000 f87f 	bl	18254 <_printf_i>
   18156:	e7ec      	b.n	18132 <_vfiprintf_r+0x1f2>
   18158:	0001a77c 	.word	0x0001a77c
   1815c:	0001a7c6 	.word	0x0001a7c6
   18160:	0001a79c 	.word	0x0001a79c
   18164:	0001a75c 	.word	0x0001a75c
   18168:	0001a7cc 	.word	0x0001a7cc
   1816c:	0001a7d0 	.word	0x0001a7d0
   18170:	00000000 	.word	0x00000000
   18174:	00017f1b 	.word	0x00017f1b

00018178 <_printf_common>:
   18178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1817a:	0015      	movs	r5, r2
   1817c:	9301      	str	r3, [sp, #4]
   1817e:	688a      	ldr	r2, [r1, #8]
   18180:	690b      	ldr	r3, [r1, #16]
   18182:	9000      	str	r0, [sp, #0]
   18184:	000c      	movs	r4, r1
   18186:	4293      	cmp	r3, r2
   18188:	da00      	bge.n	1818c <_printf_common+0x14>
   1818a:	0013      	movs	r3, r2
   1818c:	0022      	movs	r2, r4
   1818e:	602b      	str	r3, [r5, #0]
   18190:	3243      	adds	r2, #67	; 0x43
   18192:	7812      	ldrb	r2, [r2, #0]
   18194:	2a00      	cmp	r2, #0
   18196:	d001      	beq.n	1819c <_printf_common+0x24>
   18198:	3301      	adds	r3, #1
   1819a:	602b      	str	r3, [r5, #0]
   1819c:	6823      	ldr	r3, [r4, #0]
   1819e:	069b      	lsls	r3, r3, #26
   181a0:	d502      	bpl.n	181a8 <_printf_common+0x30>
   181a2:	682b      	ldr	r3, [r5, #0]
   181a4:	3302      	adds	r3, #2
   181a6:	602b      	str	r3, [r5, #0]
   181a8:	2706      	movs	r7, #6
   181aa:	6823      	ldr	r3, [r4, #0]
   181ac:	401f      	ands	r7, r3
   181ae:	d027      	beq.n	18200 <_printf_common+0x88>
   181b0:	0023      	movs	r3, r4
   181b2:	3343      	adds	r3, #67	; 0x43
   181b4:	781b      	ldrb	r3, [r3, #0]
   181b6:	1e5a      	subs	r2, r3, #1
   181b8:	4193      	sbcs	r3, r2
   181ba:	6822      	ldr	r2, [r4, #0]
   181bc:	0692      	lsls	r2, r2, #26
   181be:	d430      	bmi.n	18222 <_printf_common+0xaa>
   181c0:	0022      	movs	r2, r4
   181c2:	9901      	ldr	r1, [sp, #4]
   181c4:	3243      	adds	r2, #67	; 0x43
   181c6:	9800      	ldr	r0, [sp, #0]
   181c8:	9e08      	ldr	r6, [sp, #32]
   181ca:	47b0      	blx	r6
   181cc:	1c43      	adds	r3, r0, #1
   181ce:	d025      	beq.n	1821c <_printf_common+0xa4>
   181d0:	2306      	movs	r3, #6
   181d2:	6820      	ldr	r0, [r4, #0]
   181d4:	682a      	ldr	r2, [r5, #0]
   181d6:	68e1      	ldr	r1, [r4, #12]
   181d8:	4003      	ands	r3, r0
   181da:	2500      	movs	r5, #0
   181dc:	2b04      	cmp	r3, #4
   181de:	d103      	bne.n	181e8 <_printf_common+0x70>
   181e0:	1a8d      	subs	r5, r1, r2
   181e2:	43eb      	mvns	r3, r5
   181e4:	17db      	asrs	r3, r3, #31
   181e6:	401d      	ands	r5, r3
   181e8:	68a3      	ldr	r3, [r4, #8]
   181ea:	6922      	ldr	r2, [r4, #16]
   181ec:	4293      	cmp	r3, r2
   181ee:	dd01      	ble.n	181f4 <_printf_common+0x7c>
   181f0:	1a9b      	subs	r3, r3, r2
   181f2:	18ed      	adds	r5, r5, r3
   181f4:	2700      	movs	r7, #0
   181f6:	42bd      	cmp	r5, r7
   181f8:	d120      	bne.n	1823c <_printf_common+0xc4>
   181fa:	2000      	movs	r0, #0
   181fc:	e010      	b.n	18220 <_printf_common+0xa8>
   181fe:	3701      	adds	r7, #1
   18200:	68e3      	ldr	r3, [r4, #12]
   18202:	682a      	ldr	r2, [r5, #0]
   18204:	1a9b      	subs	r3, r3, r2
   18206:	429f      	cmp	r7, r3
   18208:	dad2      	bge.n	181b0 <_printf_common+0x38>
   1820a:	0022      	movs	r2, r4
   1820c:	2301      	movs	r3, #1
   1820e:	3219      	adds	r2, #25
   18210:	9901      	ldr	r1, [sp, #4]
   18212:	9800      	ldr	r0, [sp, #0]
   18214:	9e08      	ldr	r6, [sp, #32]
   18216:	47b0      	blx	r6
   18218:	1c43      	adds	r3, r0, #1
   1821a:	d1f0      	bne.n	181fe <_printf_common+0x86>
   1821c:	2001      	movs	r0, #1
   1821e:	4240      	negs	r0, r0
   18220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18222:	2030      	movs	r0, #48	; 0x30
   18224:	18e1      	adds	r1, r4, r3
   18226:	3143      	adds	r1, #67	; 0x43
   18228:	7008      	strb	r0, [r1, #0]
   1822a:	0021      	movs	r1, r4
   1822c:	1c5a      	adds	r2, r3, #1
   1822e:	3145      	adds	r1, #69	; 0x45
   18230:	7809      	ldrb	r1, [r1, #0]
   18232:	18a2      	adds	r2, r4, r2
   18234:	3243      	adds	r2, #67	; 0x43
   18236:	3302      	adds	r3, #2
   18238:	7011      	strb	r1, [r2, #0]
   1823a:	e7c1      	b.n	181c0 <_printf_common+0x48>
   1823c:	0022      	movs	r2, r4
   1823e:	2301      	movs	r3, #1
   18240:	321a      	adds	r2, #26
   18242:	9901      	ldr	r1, [sp, #4]
   18244:	9800      	ldr	r0, [sp, #0]
   18246:	9e08      	ldr	r6, [sp, #32]
   18248:	47b0      	blx	r6
   1824a:	1c43      	adds	r3, r0, #1
   1824c:	d0e6      	beq.n	1821c <_printf_common+0xa4>
   1824e:	3701      	adds	r7, #1
   18250:	e7d1      	b.n	181f6 <_printf_common+0x7e>
	...

00018254 <_printf_i>:
   18254:	b5f0      	push	{r4, r5, r6, r7, lr}
   18256:	b08b      	sub	sp, #44	; 0x2c
   18258:	9206      	str	r2, [sp, #24]
   1825a:	000a      	movs	r2, r1
   1825c:	3243      	adds	r2, #67	; 0x43
   1825e:	9307      	str	r3, [sp, #28]
   18260:	9005      	str	r0, [sp, #20]
   18262:	9204      	str	r2, [sp, #16]
   18264:	7e0a      	ldrb	r2, [r1, #24]
   18266:	000c      	movs	r4, r1
   18268:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1826a:	2a6e      	cmp	r2, #110	; 0x6e
   1826c:	d100      	bne.n	18270 <_printf_i+0x1c>
   1826e:	e08f      	b.n	18390 <_printf_i+0x13c>
   18270:	d817      	bhi.n	182a2 <_printf_i+0x4e>
   18272:	2a63      	cmp	r2, #99	; 0x63
   18274:	d02c      	beq.n	182d0 <_printf_i+0x7c>
   18276:	d808      	bhi.n	1828a <_printf_i+0x36>
   18278:	2a00      	cmp	r2, #0
   1827a:	d100      	bne.n	1827e <_printf_i+0x2a>
   1827c:	e099      	b.n	183b2 <_printf_i+0x15e>
   1827e:	2a58      	cmp	r2, #88	; 0x58
   18280:	d054      	beq.n	1832c <_printf_i+0xd8>
   18282:	0026      	movs	r6, r4
   18284:	3642      	adds	r6, #66	; 0x42
   18286:	7032      	strb	r2, [r6, #0]
   18288:	e029      	b.n	182de <_printf_i+0x8a>
   1828a:	2a64      	cmp	r2, #100	; 0x64
   1828c:	d001      	beq.n	18292 <_printf_i+0x3e>
   1828e:	2a69      	cmp	r2, #105	; 0x69
   18290:	d1f7      	bne.n	18282 <_printf_i+0x2e>
   18292:	6821      	ldr	r1, [r4, #0]
   18294:	681a      	ldr	r2, [r3, #0]
   18296:	0608      	lsls	r0, r1, #24
   18298:	d523      	bpl.n	182e2 <_printf_i+0x8e>
   1829a:	1d11      	adds	r1, r2, #4
   1829c:	6019      	str	r1, [r3, #0]
   1829e:	6815      	ldr	r5, [r2, #0]
   182a0:	e025      	b.n	182ee <_printf_i+0x9a>
   182a2:	2a73      	cmp	r2, #115	; 0x73
   182a4:	d100      	bne.n	182a8 <_printf_i+0x54>
   182a6:	e088      	b.n	183ba <_printf_i+0x166>
   182a8:	d808      	bhi.n	182bc <_printf_i+0x68>
   182aa:	2a6f      	cmp	r2, #111	; 0x6f
   182ac:	d029      	beq.n	18302 <_printf_i+0xae>
   182ae:	2a70      	cmp	r2, #112	; 0x70
   182b0:	d1e7      	bne.n	18282 <_printf_i+0x2e>
   182b2:	2220      	movs	r2, #32
   182b4:	6809      	ldr	r1, [r1, #0]
   182b6:	430a      	orrs	r2, r1
   182b8:	6022      	str	r2, [r4, #0]
   182ba:	e003      	b.n	182c4 <_printf_i+0x70>
   182bc:	2a75      	cmp	r2, #117	; 0x75
   182be:	d020      	beq.n	18302 <_printf_i+0xae>
   182c0:	2a78      	cmp	r2, #120	; 0x78
   182c2:	d1de      	bne.n	18282 <_printf_i+0x2e>
   182c4:	0022      	movs	r2, r4
   182c6:	2178      	movs	r1, #120	; 0x78
   182c8:	3245      	adds	r2, #69	; 0x45
   182ca:	7011      	strb	r1, [r2, #0]
   182cc:	4a6c      	ldr	r2, [pc, #432]	; (18480 <_printf_i+0x22c>)
   182ce:	e030      	b.n	18332 <_printf_i+0xde>
   182d0:	000e      	movs	r6, r1
   182d2:	681a      	ldr	r2, [r3, #0]
   182d4:	3642      	adds	r6, #66	; 0x42
   182d6:	1d11      	adds	r1, r2, #4
   182d8:	6019      	str	r1, [r3, #0]
   182da:	6813      	ldr	r3, [r2, #0]
   182dc:	7033      	strb	r3, [r6, #0]
   182de:	2301      	movs	r3, #1
   182e0:	e079      	b.n	183d6 <_printf_i+0x182>
   182e2:	0649      	lsls	r1, r1, #25
   182e4:	d5d9      	bpl.n	1829a <_printf_i+0x46>
   182e6:	1d11      	adds	r1, r2, #4
   182e8:	6019      	str	r1, [r3, #0]
   182ea:	2300      	movs	r3, #0
   182ec:	5ed5      	ldrsh	r5, [r2, r3]
   182ee:	2d00      	cmp	r5, #0
   182f0:	da03      	bge.n	182fa <_printf_i+0xa6>
   182f2:	232d      	movs	r3, #45	; 0x2d
   182f4:	9a04      	ldr	r2, [sp, #16]
   182f6:	426d      	negs	r5, r5
   182f8:	7013      	strb	r3, [r2, #0]
   182fa:	4b62      	ldr	r3, [pc, #392]	; (18484 <_printf_i+0x230>)
   182fc:	270a      	movs	r7, #10
   182fe:	9303      	str	r3, [sp, #12]
   18300:	e02f      	b.n	18362 <_printf_i+0x10e>
   18302:	6820      	ldr	r0, [r4, #0]
   18304:	6819      	ldr	r1, [r3, #0]
   18306:	0605      	lsls	r5, r0, #24
   18308:	d503      	bpl.n	18312 <_printf_i+0xbe>
   1830a:	1d08      	adds	r0, r1, #4
   1830c:	6018      	str	r0, [r3, #0]
   1830e:	680d      	ldr	r5, [r1, #0]
   18310:	e005      	b.n	1831e <_printf_i+0xca>
   18312:	0640      	lsls	r0, r0, #25
   18314:	d5f9      	bpl.n	1830a <_printf_i+0xb6>
   18316:	680d      	ldr	r5, [r1, #0]
   18318:	1d08      	adds	r0, r1, #4
   1831a:	6018      	str	r0, [r3, #0]
   1831c:	b2ad      	uxth	r5, r5
   1831e:	4b59      	ldr	r3, [pc, #356]	; (18484 <_printf_i+0x230>)
   18320:	2708      	movs	r7, #8
   18322:	9303      	str	r3, [sp, #12]
   18324:	2a6f      	cmp	r2, #111	; 0x6f
   18326:	d018      	beq.n	1835a <_printf_i+0x106>
   18328:	270a      	movs	r7, #10
   1832a:	e016      	b.n	1835a <_printf_i+0x106>
   1832c:	3145      	adds	r1, #69	; 0x45
   1832e:	700a      	strb	r2, [r1, #0]
   18330:	4a54      	ldr	r2, [pc, #336]	; (18484 <_printf_i+0x230>)
   18332:	9203      	str	r2, [sp, #12]
   18334:	681a      	ldr	r2, [r3, #0]
   18336:	6821      	ldr	r1, [r4, #0]
   18338:	1d10      	adds	r0, r2, #4
   1833a:	6018      	str	r0, [r3, #0]
   1833c:	6815      	ldr	r5, [r2, #0]
   1833e:	0608      	lsls	r0, r1, #24
   18340:	d522      	bpl.n	18388 <_printf_i+0x134>
   18342:	07cb      	lsls	r3, r1, #31
   18344:	d502      	bpl.n	1834c <_printf_i+0xf8>
   18346:	2320      	movs	r3, #32
   18348:	4319      	orrs	r1, r3
   1834a:	6021      	str	r1, [r4, #0]
   1834c:	2710      	movs	r7, #16
   1834e:	2d00      	cmp	r5, #0
   18350:	d103      	bne.n	1835a <_printf_i+0x106>
   18352:	2320      	movs	r3, #32
   18354:	6822      	ldr	r2, [r4, #0]
   18356:	439a      	bics	r2, r3
   18358:	6022      	str	r2, [r4, #0]
   1835a:	0023      	movs	r3, r4
   1835c:	2200      	movs	r2, #0
   1835e:	3343      	adds	r3, #67	; 0x43
   18360:	701a      	strb	r2, [r3, #0]
   18362:	6863      	ldr	r3, [r4, #4]
   18364:	60a3      	str	r3, [r4, #8]
   18366:	2b00      	cmp	r3, #0
   18368:	db5c      	blt.n	18424 <_printf_i+0x1d0>
   1836a:	2204      	movs	r2, #4
   1836c:	6821      	ldr	r1, [r4, #0]
   1836e:	4391      	bics	r1, r2
   18370:	6021      	str	r1, [r4, #0]
   18372:	2d00      	cmp	r5, #0
   18374:	d158      	bne.n	18428 <_printf_i+0x1d4>
   18376:	9e04      	ldr	r6, [sp, #16]
   18378:	2b00      	cmp	r3, #0
   1837a:	d064      	beq.n	18446 <_printf_i+0x1f2>
   1837c:	0026      	movs	r6, r4
   1837e:	9b03      	ldr	r3, [sp, #12]
   18380:	3642      	adds	r6, #66	; 0x42
   18382:	781b      	ldrb	r3, [r3, #0]
   18384:	7033      	strb	r3, [r6, #0]
   18386:	e05e      	b.n	18446 <_printf_i+0x1f2>
   18388:	0648      	lsls	r0, r1, #25
   1838a:	d5da      	bpl.n	18342 <_printf_i+0xee>
   1838c:	b2ad      	uxth	r5, r5
   1838e:	e7d8      	b.n	18342 <_printf_i+0xee>
   18390:	6809      	ldr	r1, [r1, #0]
   18392:	681a      	ldr	r2, [r3, #0]
   18394:	0608      	lsls	r0, r1, #24
   18396:	d505      	bpl.n	183a4 <_printf_i+0x150>
   18398:	1d11      	adds	r1, r2, #4
   1839a:	6019      	str	r1, [r3, #0]
   1839c:	6813      	ldr	r3, [r2, #0]
   1839e:	6962      	ldr	r2, [r4, #20]
   183a0:	601a      	str	r2, [r3, #0]
   183a2:	e006      	b.n	183b2 <_printf_i+0x15e>
   183a4:	0649      	lsls	r1, r1, #25
   183a6:	d5f7      	bpl.n	18398 <_printf_i+0x144>
   183a8:	1d11      	adds	r1, r2, #4
   183aa:	6019      	str	r1, [r3, #0]
   183ac:	6813      	ldr	r3, [r2, #0]
   183ae:	8aa2      	ldrh	r2, [r4, #20]
   183b0:	801a      	strh	r2, [r3, #0]
   183b2:	2300      	movs	r3, #0
   183b4:	9e04      	ldr	r6, [sp, #16]
   183b6:	6123      	str	r3, [r4, #16]
   183b8:	e054      	b.n	18464 <_printf_i+0x210>
   183ba:	681a      	ldr	r2, [r3, #0]
   183bc:	1d11      	adds	r1, r2, #4
   183be:	6019      	str	r1, [r3, #0]
   183c0:	6816      	ldr	r6, [r2, #0]
   183c2:	2100      	movs	r1, #0
   183c4:	6862      	ldr	r2, [r4, #4]
   183c6:	0030      	movs	r0, r6
   183c8:	f000 f94a 	bl	18660 <memchr>
   183cc:	2800      	cmp	r0, #0
   183ce:	d001      	beq.n	183d4 <_printf_i+0x180>
   183d0:	1b80      	subs	r0, r0, r6
   183d2:	6060      	str	r0, [r4, #4]
   183d4:	6863      	ldr	r3, [r4, #4]
   183d6:	6123      	str	r3, [r4, #16]
   183d8:	2300      	movs	r3, #0
   183da:	9a04      	ldr	r2, [sp, #16]
   183dc:	7013      	strb	r3, [r2, #0]
   183de:	e041      	b.n	18464 <_printf_i+0x210>
   183e0:	6923      	ldr	r3, [r4, #16]
   183e2:	0032      	movs	r2, r6
   183e4:	9906      	ldr	r1, [sp, #24]
   183e6:	9805      	ldr	r0, [sp, #20]
   183e8:	9d07      	ldr	r5, [sp, #28]
   183ea:	47a8      	blx	r5
   183ec:	1c43      	adds	r3, r0, #1
   183ee:	d043      	beq.n	18478 <_printf_i+0x224>
   183f0:	6823      	ldr	r3, [r4, #0]
   183f2:	2500      	movs	r5, #0
   183f4:	079b      	lsls	r3, r3, #30
   183f6:	d40f      	bmi.n	18418 <_printf_i+0x1c4>
   183f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183fa:	68e0      	ldr	r0, [r4, #12]
   183fc:	4298      	cmp	r0, r3
   183fe:	da3d      	bge.n	1847c <_printf_i+0x228>
   18400:	0018      	movs	r0, r3
   18402:	e03b      	b.n	1847c <_printf_i+0x228>
   18404:	0022      	movs	r2, r4
   18406:	2301      	movs	r3, #1
   18408:	3219      	adds	r2, #25
   1840a:	9906      	ldr	r1, [sp, #24]
   1840c:	9805      	ldr	r0, [sp, #20]
   1840e:	9e07      	ldr	r6, [sp, #28]
   18410:	47b0      	blx	r6
   18412:	1c43      	adds	r3, r0, #1
   18414:	d030      	beq.n	18478 <_printf_i+0x224>
   18416:	3501      	adds	r5, #1
   18418:	68e3      	ldr	r3, [r4, #12]
   1841a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1841c:	1a9b      	subs	r3, r3, r2
   1841e:	429d      	cmp	r5, r3
   18420:	dbf0      	blt.n	18404 <_printf_i+0x1b0>
   18422:	e7e9      	b.n	183f8 <_printf_i+0x1a4>
   18424:	2d00      	cmp	r5, #0
   18426:	d0a9      	beq.n	1837c <_printf_i+0x128>
   18428:	9e04      	ldr	r6, [sp, #16]
   1842a:	0028      	movs	r0, r5
   1842c:	0039      	movs	r1, r7
   1842e:	f7fe fc4b 	bl	16cc8 <__aeabi_uidivmod>
   18432:	9b03      	ldr	r3, [sp, #12]
   18434:	3e01      	subs	r6, #1
   18436:	5c5b      	ldrb	r3, [r3, r1]
   18438:	0028      	movs	r0, r5
   1843a:	7033      	strb	r3, [r6, #0]
   1843c:	0039      	movs	r1, r7
   1843e:	f7fe fbbd 	bl	16bbc <__udivsi3>
   18442:	1e05      	subs	r5, r0, #0
   18444:	d1f1      	bne.n	1842a <_printf_i+0x1d6>
   18446:	2f08      	cmp	r7, #8
   18448:	d109      	bne.n	1845e <_printf_i+0x20a>
   1844a:	6823      	ldr	r3, [r4, #0]
   1844c:	07db      	lsls	r3, r3, #31
   1844e:	d506      	bpl.n	1845e <_printf_i+0x20a>
   18450:	6863      	ldr	r3, [r4, #4]
   18452:	6922      	ldr	r2, [r4, #16]
   18454:	4293      	cmp	r3, r2
   18456:	dc02      	bgt.n	1845e <_printf_i+0x20a>
   18458:	2330      	movs	r3, #48	; 0x30
   1845a:	3e01      	subs	r6, #1
   1845c:	7033      	strb	r3, [r6, #0]
   1845e:	9b04      	ldr	r3, [sp, #16]
   18460:	1b9b      	subs	r3, r3, r6
   18462:	6123      	str	r3, [r4, #16]
   18464:	9b07      	ldr	r3, [sp, #28]
   18466:	aa09      	add	r2, sp, #36	; 0x24
   18468:	9300      	str	r3, [sp, #0]
   1846a:	0021      	movs	r1, r4
   1846c:	9b06      	ldr	r3, [sp, #24]
   1846e:	9805      	ldr	r0, [sp, #20]
   18470:	f7ff fe82 	bl	18178 <_printf_common>
   18474:	1c43      	adds	r3, r0, #1
   18476:	d1b3      	bne.n	183e0 <_printf_i+0x18c>
   18478:	2001      	movs	r0, #1
   1847a:	4240      	negs	r0, r0
   1847c:	b00b      	add	sp, #44	; 0x2c
   1847e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18480:	0001a7e8 	.word	0x0001a7e8
   18484:	0001a7d7 	.word	0x0001a7d7

00018488 <_putc_r>:
   18488:	b570      	push	{r4, r5, r6, lr}
   1848a:	0006      	movs	r6, r0
   1848c:	000d      	movs	r5, r1
   1848e:	0014      	movs	r4, r2
   18490:	2800      	cmp	r0, #0
   18492:	d004      	beq.n	1849e <_putc_r+0x16>
   18494:	6983      	ldr	r3, [r0, #24]
   18496:	2b00      	cmp	r3, #0
   18498:	d101      	bne.n	1849e <_putc_r+0x16>
   1849a:	f7ff faab 	bl	179f4 <__sinit>
   1849e:	4b12      	ldr	r3, [pc, #72]	; (184e8 <_putc_r+0x60>)
   184a0:	429c      	cmp	r4, r3
   184a2:	d111      	bne.n	184c8 <_putc_r+0x40>
   184a4:	6874      	ldr	r4, [r6, #4]
   184a6:	68a3      	ldr	r3, [r4, #8]
   184a8:	3b01      	subs	r3, #1
   184aa:	60a3      	str	r3, [r4, #8]
   184ac:	2b00      	cmp	r3, #0
   184ae:	da05      	bge.n	184bc <_putc_r+0x34>
   184b0:	69a2      	ldr	r2, [r4, #24]
   184b2:	4293      	cmp	r3, r2
   184b4:	db12      	blt.n	184dc <_putc_r+0x54>
   184b6:	b2eb      	uxtb	r3, r5
   184b8:	2b0a      	cmp	r3, #10
   184ba:	d00f      	beq.n	184dc <_putc_r+0x54>
   184bc:	6823      	ldr	r3, [r4, #0]
   184be:	b2e8      	uxtb	r0, r5
   184c0:	1c5a      	adds	r2, r3, #1
   184c2:	6022      	str	r2, [r4, #0]
   184c4:	701d      	strb	r5, [r3, #0]
   184c6:	bd70      	pop	{r4, r5, r6, pc}
   184c8:	4b08      	ldr	r3, [pc, #32]	; (184ec <_putc_r+0x64>)
   184ca:	429c      	cmp	r4, r3
   184cc:	d101      	bne.n	184d2 <_putc_r+0x4a>
   184ce:	68b4      	ldr	r4, [r6, #8]
   184d0:	e7e9      	b.n	184a6 <_putc_r+0x1e>
   184d2:	4b07      	ldr	r3, [pc, #28]	; (184f0 <_putc_r+0x68>)
   184d4:	429c      	cmp	r4, r3
   184d6:	d1e6      	bne.n	184a6 <_putc_r+0x1e>
   184d8:	68f4      	ldr	r4, [r6, #12]
   184da:	e7e4      	b.n	184a6 <_putc_r+0x1e>
   184dc:	0022      	movs	r2, r4
   184de:	0029      	movs	r1, r5
   184e0:	0030      	movs	r0, r6
   184e2:	f7ff f8c3 	bl	1766c <__swbuf_r>
   184e6:	e7ee      	b.n	184c6 <_putc_r+0x3e>
   184e8:	0001a77c 	.word	0x0001a77c
   184ec:	0001a79c 	.word	0x0001a79c
   184f0:	0001a75c 	.word	0x0001a75c

000184f4 <__sread>:
   184f4:	b570      	push	{r4, r5, r6, lr}
   184f6:	000c      	movs	r4, r1
   184f8:	250e      	movs	r5, #14
   184fa:	5f49      	ldrsh	r1, [r1, r5]
   184fc:	f000 f8e2 	bl	186c4 <_read_r>
   18500:	2800      	cmp	r0, #0
   18502:	db03      	blt.n	1850c <__sread+0x18>
   18504:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18506:	181b      	adds	r3, r3, r0
   18508:	6563      	str	r3, [r4, #84]	; 0x54
   1850a:	bd70      	pop	{r4, r5, r6, pc}
   1850c:	89a3      	ldrh	r3, [r4, #12]
   1850e:	4a02      	ldr	r2, [pc, #8]	; (18518 <__sread+0x24>)
   18510:	4013      	ands	r3, r2
   18512:	81a3      	strh	r3, [r4, #12]
   18514:	e7f9      	b.n	1850a <__sread+0x16>
   18516:	46c0      	nop			; (mov r8, r8)
   18518:	ffffefff 	.word	0xffffefff

0001851c <__swrite>:
   1851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1851e:	001f      	movs	r7, r3
   18520:	898b      	ldrh	r3, [r1, #12]
   18522:	0005      	movs	r5, r0
   18524:	000c      	movs	r4, r1
   18526:	0016      	movs	r6, r2
   18528:	05db      	lsls	r3, r3, #23
   1852a:	d505      	bpl.n	18538 <__swrite+0x1c>
   1852c:	230e      	movs	r3, #14
   1852e:	5ec9      	ldrsh	r1, [r1, r3]
   18530:	2200      	movs	r2, #0
   18532:	2302      	movs	r3, #2
   18534:	f000 f880 	bl	18638 <_lseek_r>
   18538:	89a3      	ldrh	r3, [r4, #12]
   1853a:	4a05      	ldr	r2, [pc, #20]	; (18550 <__swrite+0x34>)
   1853c:	0028      	movs	r0, r5
   1853e:	4013      	ands	r3, r2
   18540:	81a3      	strh	r3, [r4, #12]
   18542:	0032      	movs	r2, r6
   18544:	230e      	movs	r3, #14
   18546:	5ee1      	ldrsh	r1, [r4, r3]
   18548:	003b      	movs	r3, r7
   1854a:	f000 f82b 	bl	185a4 <_write_r>
   1854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18550:	ffffefff 	.word	0xffffefff

00018554 <__sseek>:
   18554:	b570      	push	{r4, r5, r6, lr}
   18556:	000c      	movs	r4, r1
   18558:	250e      	movs	r5, #14
   1855a:	5f49      	ldrsh	r1, [r1, r5]
   1855c:	f000 f86c 	bl	18638 <_lseek_r>
   18560:	89a3      	ldrh	r3, [r4, #12]
   18562:	1c42      	adds	r2, r0, #1
   18564:	d103      	bne.n	1856e <__sseek+0x1a>
   18566:	4a05      	ldr	r2, [pc, #20]	; (1857c <__sseek+0x28>)
   18568:	4013      	ands	r3, r2
   1856a:	81a3      	strh	r3, [r4, #12]
   1856c:	bd70      	pop	{r4, r5, r6, pc}
   1856e:	2280      	movs	r2, #128	; 0x80
   18570:	0152      	lsls	r2, r2, #5
   18572:	4313      	orrs	r3, r2
   18574:	81a3      	strh	r3, [r4, #12]
   18576:	6560      	str	r0, [r4, #84]	; 0x54
   18578:	e7f8      	b.n	1856c <__sseek+0x18>
   1857a:	46c0      	nop			; (mov r8, r8)
   1857c:	ffffefff 	.word	0xffffefff

00018580 <__sclose>:
   18580:	b510      	push	{r4, lr}
   18582:	230e      	movs	r3, #14
   18584:	5ec9      	ldrsh	r1, [r1, r3]
   18586:	f000 f821 	bl	185cc <_close_r>
   1858a:	bd10      	pop	{r4, pc}

0001858c <__ascii_wctomb>:
   1858c:	1e0b      	subs	r3, r1, #0
   1858e:	d004      	beq.n	1859a <__ascii_wctomb+0xe>
   18590:	2aff      	cmp	r2, #255	; 0xff
   18592:	d904      	bls.n	1859e <__ascii_wctomb+0x12>
   18594:	238a      	movs	r3, #138	; 0x8a
   18596:	6003      	str	r3, [r0, #0]
   18598:	3b8b      	subs	r3, #139	; 0x8b
   1859a:	0018      	movs	r0, r3
   1859c:	4770      	bx	lr
   1859e:	700a      	strb	r2, [r1, #0]
   185a0:	2301      	movs	r3, #1
   185a2:	e7fa      	b.n	1859a <__ascii_wctomb+0xe>

000185a4 <_write_r>:
   185a4:	b570      	push	{r4, r5, r6, lr}
   185a6:	0005      	movs	r5, r0
   185a8:	0008      	movs	r0, r1
   185aa:	0011      	movs	r1, r2
   185ac:	2200      	movs	r2, #0
   185ae:	4c06      	ldr	r4, [pc, #24]	; (185c8 <_write_r+0x24>)
   185b0:	6022      	str	r2, [r4, #0]
   185b2:	001a      	movs	r2, r3
   185b4:	f7f9 fba2 	bl	11cfc <_write>
   185b8:	1c43      	adds	r3, r0, #1
   185ba:	d103      	bne.n	185c4 <_write_r+0x20>
   185bc:	6823      	ldr	r3, [r4, #0]
   185be:	2b00      	cmp	r3, #0
   185c0:	d000      	beq.n	185c4 <_write_r+0x20>
   185c2:	602b      	str	r3, [r5, #0]
   185c4:	bd70      	pop	{r4, r5, r6, pc}
   185c6:	46c0      	nop			; (mov r8, r8)
   185c8:	20001638 	.word	0x20001638

000185cc <_close_r>:
   185cc:	2300      	movs	r3, #0
   185ce:	b570      	push	{r4, r5, r6, lr}
   185d0:	4c06      	ldr	r4, [pc, #24]	; (185ec <_close_r+0x20>)
   185d2:	0005      	movs	r5, r0
   185d4:	0008      	movs	r0, r1
   185d6:	6023      	str	r3, [r4, #0]
   185d8:	f7f9 fbca 	bl	11d70 <_close>
   185dc:	1c43      	adds	r3, r0, #1
   185de:	d103      	bne.n	185e8 <_close_r+0x1c>
   185e0:	6823      	ldr	r3, [r4, #0]
   185e2:	2b00      	cmp	r3, #0
   185e4:	d000      	beq.n	185e8 <_close_r+0x1c>
   185e6:	602b      	str	r3, [r5, #0]
   185e8:	bd70      	pop	{r4, r5, r6, pc}
   185ea:	46c0      	nop			; (mov r8, r8)
   185ec:	20001638 	.word	0x20001638

000185f0 <_fstat_r>:
   185f0:	2300      	movs	r3, #0
   185f2:	b570      	push	{r4, r5, r6, lr}
   185f4:	4c06      	ldr	r4, [pc, #24]	; (18610 <_fstat_r+0x20>)
   185f6:	0005      	movs	r5, r0
   185f8:	0008      	movs	r0, r1
   185fa:	0011      	movs	r1, r2
   185fc:	6023      	str	r3, [r4, #0]
   185fe:	f7f9 fbba 	bl	11d76 <_fstat>
   18602:	1c43      	adds	r3, r0, #1
   18604:	d103      	bne.n	1860e <_fstat_r+0x1e>
   18606:	6823      	ldr	r3, [r4, #0]
   18608:	2b00      	cmp	r3, #0
   1860a:	d000      	beq.n	1860e <_fstat_r+0x1e>
   1860c:	602b      	str	r3, [r5, #0]
   1860e:	bd70      	pop	{r4, r5, r6, pc}
   18610:	20001638 	.word	0x20001638

00018614 <_isatty_r>:
   18614:	2300      	movs	r3, #0
   18616:	b570      	push	{r4, r5, r6, lr}
   18618:	4c06      	ldr	r4, [pc, #24]	; (18634 <_isatty_r+0x20>)
   1861a:	0005      	movs	r5, r0
   1861c:	0008      	movs	r0, r1
   1861e:	6023      	str	r3, [r4, #0]
   18620:	f7f9 fbae 	bl	11d80 <_isatty>
   18624:	1c43      	adds	r3, r0, #1
   18626:	d103      	bne.n	18630 <_isatty_r+0x1c>
   18628:	6823      	ldr	r3, [r4, #0]
   1862a:	2b00      	cmp	r3, #0
   1862c:	d000      	beq.n	18630 <_isatty_r+0x1c>
   1862e:	602b      	str	r3, [r5, #0]
   18630:	bd70      	pop	{r4, r5, r6, pc}
   18632:	46c0      	nop			; (mov r8, r8)
   18634:	20001638 	.word	0x20001638

00018638 <_lseek_r>:
   18638:	b570      	push	{r4, r5, r6, lr}
   1863a:	0005      	movs	r5, r0
   1863c:	0008      	movs	r0, r1
   1863e:	0011      	movs	r1, r2
   18640:	2200      	movs	r2, #0
   18642:	4c06      	ldr	r4, [pc, #24]	; (1865c <_lseek_r+0x24>)
   18644:	6022      	str	r2, [r4, #0]
   18646:	001a      	movs	r2, r3
   18648:	f7f9 fb9c 	bl	11d84 <_lseek>
   1864c:	1c43      	adds	r3, r0, #1
   1864e:	d103      	bne.n	18658 <_lseek_r+0x20>
   18650:	6823      	ldr	r3, [r4, #0]
   18652:	2b00      	cmp	r3, #0
   18654:	d000      	beq.n	18658 <_lseek_r+0x20>
   18656:	602b      	str	r3, [r5, #0]
   18658:	bd70      	pop	{r4, r5, r6, pc}
   1865a:	46c0      	nop			; (mov r8, r8)
   1865c:	20001638 	.word	0x20001638

00018660 <memchr>:
   18660:	b2c9      	uxtb	r1, r1
   18662:	1882      	adds	r2, r0, r2
   18664:	4290      	cmp	r0, r2
   18666:	d101      	bne.n	1866c <memchr+0xc>
   18668:	2000      	movs	r0, #0
   1866a:	4770      	bx	lr
   1866c:	7803      	ldrb	r3, [r0, #0]
   1866e:	428b      	cmp	r3, r1
   18670:	d0fb      	beq.n	1866a <memchr+0xa>
   18672:	3001      	adds	r0, #1
   18674:	e7f6      	b.n	18664 <memchr+0x4>

00018676 <_realloc_r>:
   18676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18678:	0007      	movs	r7, r0
   1867a:	000d      	movs	r5, r1
   1867c:	0016      	movs	r6, r2
   1867e:	2900      	cmp	r1, #0
   18680:	d105      	bne.n	1868e <_realloc_r+0x18>
   18682:	0011      	movs	r1, r2
   18684:	f7fe fce6 	bl	17054 <_malloc_r>
   18688:	0004      	movs	r4, r0
   1868a:	0020      	movs	r0, r4
   1868c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1868e:	2a00      	cmp	r2, #0
   18690:	d103      	bne.n	1869a <_realloc_r+0x24>
   18692:	f7fe fc95 	bl	16fc0 <_free_r>
   18696:	0034      	movs	r4, r6
   18698:	e7f7      	b.n	1868a <_realloc_r+0x14>
   1869a:	f000 f827 	bl	186ec <_malloc_usable_size_r>
   1869e:	002c      	movs	r4, r5
   186a0:	4286      	cmp	r6, r0
   186a2:	d9f2      	bls.n	1868a <_realloc_r+0x14>
   186a4:	0031      	movs	r1, r6
   186a6:	0038      	movs	r0, r7
   186a8:	f7fe fcd4 	bl	17054 <_malloc_r>
   186ac:	1e04      	subs	r4, r0, #0
   186ae:	d0ec      	beq.n	1868a <_realloc_r+0x14>
   186b0:	0029      	movs	r1, r5
   186b2:	0032      	movs	r2, r6
   186b4:	f7fe fc60 	bl	16f78 <memcpy>
   186b8:	0029      	movs	r1, r5
   186ba:	0038      	movs	r0, r7
   186bc:	f7fe fc80 	bl	16fc0 <_free_r>
   186c0:	e7e3      	b.n	1868a <_realloc_r+0x14>
	...

000186c4 <_read_r>:
   186c4:	b570      	push	{r4, r5, r6, lr}
   186c6:	0005      	movs	r5, r0
   186c8:	0008      	movs	r0, r1
   186ca:	0011      	movs	r1, r2
   186cc:	2200      	movs	r2, #0
   186ce:	4c06      	ldr	r4, [pc, #24]	; (186e8 <_read_r+0x24>)
   186d0:	6022      	str	r2, [r4, #0]
   186d2:	001a      	movs	r2, r3
   186d4:	f7f9 faf0 	bl	11cb8 <_read>
   186d8:	1c43      	adds	r3, r0, #1
   186da:	d103      	bne.n	186e4 <_read_r+0x20>
   186dc:	6823      	ldr	r3, [r4, #0]
   186de:	2b00      	cmp	r3, #0
   186e0:	d000      	beq.n	186e4 <_read_r+0x20>
   186e2:	602b      	str	r3, [r5, #0]
   186e4:	bd70      	pop	{r4, r5, r6, pc}
   186e6:	46c0      	nop			; (mov r8, r8)
   186e8:	20001638 	.word	0x20001638

000186ec <_malloc_usable_size_r>:
   186ec:	1f0b      	subs	r3, r1, #4
   186ee:	681b      	ldr	r3, [r3, #0]
   186f0:	1f18      	subs	r0, r3, #4
   186f2:	2b00      	cmp	r3, #0
   186f4:	da01      	bge.n	186fa <_malloc_usable_size_r+0xe>
   186f6:	580b      	ldr	r3, [r1, r0]
   186f8:	18c0      	adds	r0, r0, r3
   186fa:	4770      	bx	lr

000186fc <mmc_trans_multipliers>:
   186fc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   1870c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   1871c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   1872c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0001873c <sd_mmc_trans_units>:
   1873c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00018758 <sd_trans_multipliers>:
   18758:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18768:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   18778:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   18788:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018798 <__FUNCTION__.14672>:
   18798:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   187a8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   187b8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   187c8:	746c 6320 646d 0000 d170 0000 d140 0000     lt cmd..p...@...
   187d8:	d138 0000 d150 0000 d148 0000 d168 0000     8...P...H...h...
   187e8:	d158 0000 d160 0000                         X...`...

000187f0 <__FUNCTION__.13113>:
   187f0:	6968 5f66 6573 646e 0000 0000               hif_send....

000187fc <__FUNCTION__.13123>:
   187fc:	6968 5f66 7369 0072                         hif_isr.

00018804 <__FUNCTION__.13132>:
   18804:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00018814 <__FUNCTION__.13144>:
   18814:	6968 5f66 6572 6563 7669 0065               hif_receive.

00018820 <__FUNCTION__.13160>:
   18820:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   18830:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   18840:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   18850:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   18860:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   18870:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   18880:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   18890:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   188a0:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   188b0:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   188c0:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   188d0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   188e0:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   188f0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   18900:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   18910:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   18920:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   18930:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   18940:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   18950:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   18960:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   18970:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   18980:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   18990:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   189a0:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   189b0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   189c0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   189d0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   189e0:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   189f0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   18a00:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   18a10:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   18a20:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   18a30:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   18a40:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   18a50:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   18a60:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   18a70:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   18a80:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   18a90:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   18aa0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   18ab0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   18ac0:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   18ad0:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   18ae0:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   18af0:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   18b00:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00018b10 <__FUNCTION__.13095>:
   18b10:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00018b1c <__FUNCTION__.13124>:
   18b1c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00018b2c <__FUNCTION__.13155>:
   18b2c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   18b3c:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   18b4c:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   18b5c:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   18b6c:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   18b7c:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   18b8c:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   18b9c:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   18bac:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   18bbc:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   18bcc:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   18bdc:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   18bec:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   18bfc:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   18c0c:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   18c1c:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   18c2c:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   18c3c:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   18c4c:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   18c5c:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   18c6c:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   18c7c:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   18c8c:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   18c9c:	3731 303a 3a39 3132 0000 0000 6f4e 2076     17:09:21....Nov 
   18cac:	3131 3220 3130 0039 7244 7669 7265 6220     11 2019.Driver b
   18cbc:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   18ccc:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   18cdc:	2065 6556 7372 6f69 006e 0000               e Version...

00018ce8 <__FUNCTION__.12952>:
   18ce8:	6863 7069 775f 6b61 0065 0000               chip_wake...

00018cf4 <__FUNCTION__.13001>:
   18cf4:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   18d04:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   18d14:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   18d24:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   18d34:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   18d44:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   18d54:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00018d64 <__FUNCTION__.12999>:
   18d64:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00018d70 <__FUNCTION__.13006>:
   18d70:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   18d80:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   18d90:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   18da0:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   18db0:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   18dc0:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   18dd0:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   18de0:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   18df0:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   18e00:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   18e10:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   18e20:	4920 2044 6c25 0a78 0000 0000 e150 0000      ID %lx.....P...
   18e30:	e150 0000 e180 0000 e102 0000 e126 0000     P...........&...
   18e40:	e134 0000 e166 0000 e166 0000 e1ae 0000     4...f...f.......
   18e50:	e0e6 0000 e1e8 0000 e1e8 0000 e1e8 0000     ................
   18e60:	e1e8 0000 e142 0000 c9c3 cac4               ....B.......

00018e6c <__FUNCTION__.12268>:
   18e6c:	7073 5f69 6d63 0064                         spi_cmd.

00018e74 <__FUNCTION__.12275>:
   18e74:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00018e84 <__FUNCTION__.12284>:
   18e84:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00018e90 <__FUNCTION__.12300>:
   18e90:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00018ea0 <__FUNCTION__.12315>:
   18ea0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00018eb0 <__FUNCTION__.12327>:
   18eb0:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00018ec0 <__FUNCTION__.12338>:
   18ec0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00018ed0 <__FUNCTION__.12350>:
   18ed0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00018ee0 <__FUNCTION__.12363>:
   18ee0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00018eec <__FUNCTION__.12384>:
   18eec:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00018ef8 <crc7_syndrome_table>:
   18ef8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   18f08:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   18f18:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   18f28:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   18f38:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   18f48:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   18f58:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   18f68:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   18f78:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   18f88:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   18f98:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   18fa8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   18fb8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   18fc8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   18fd8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   18fe8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   18ff8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19008:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   19018:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   19028:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   19038:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   19048:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19058:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   19068:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   19078:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   19088:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   19098:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   190a8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   190b8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   190c8:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   190d8:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   190e8:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   190f8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19108:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   19118:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   19128:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   19138:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   19148:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   19158:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   19168:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   19178:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19188:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   19198:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   191a8:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   191b8:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   191c8:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   191d8:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   191e8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   191f8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   19208:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   19218:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19228:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   19238:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   19248:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19258:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   19268:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   19278:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   19288:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   19298:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   192a8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   192b8:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   192c8:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   192d8:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   192e8:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   192f8:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19308:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   19318:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   19328:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19338:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   19348:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   19358:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19368:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   19378:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   19388:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   19398:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   193a8:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   193b8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   193c8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   193d8:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   193e8:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   193f8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   19408:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   19418:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   19428:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   19438:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   19448:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   19458:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   19468:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   19478:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   19488:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19498:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   194a8:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   194b8:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   194c8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   194d8:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   194e8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   194f8:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   19508:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   19518:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   19528:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   19538:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   19548:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   19558:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   19568:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   19578:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
   19588:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   19598:	1c00 4200 0de2 0001 0dde 0001 0dde 0001     ...B............
   195a8:	0e44 0001 0e44 0001 0df6 0001 0de8 0001     D...D...........
   195b8:	0dfc 0001 0e32 0001 1004 0001 0fe4 0001     ....2...........
   195c8:	0fe4 0001 1070 0001 0ff6 0001 1012 0001     ....p...........
   195d8:	0fe8 0001 1020 0001 1060 0001               .... ...`...

000195e4 <_tcc_apbcmasks>:
   195e4:	0100 0000 0200 0000 0400 0000               ............

000195f0 <_tcc_cc_nums>:
   195f0:	0204 0002                                   ....

000195f4 <_tcc_gclk_ids>:
   195f4:	1a1a 001b                                   ....

000195f8 <_tcc_maxs>:
   195f8:	ffff 00ff ffff 00ff ffff 0000               ............

00019604 <_tcc_ow_nums>:
   19604:	0408 0002                                   ....

00019608 <_tcc_intflag>:
   19608:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   19618:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   19628:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00019638 <tcc_interrupt_vectors.12458>:
   19638:	100f 0011                                   ....

0001963c <LfnOfs>:
   1963c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0001964c <excvt.4558>:
   1964c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   1965c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   1966c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   1967c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   1968c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   1969c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   196ac:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   196bc:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   196cc:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   196dc:	5d5b 0000                                   []..

000196e0 <Tbl>:
   196e0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   196f0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   19700:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   19710:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   19720:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   19730:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   19740:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   19750:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   19760:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   19770:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   19780:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   19790:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   197a0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   197b0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   197c0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   197d0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000197e0 <tbl_lower.4308>:
   197e0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   197f0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   19800:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   19810:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   19820:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   19830:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   19840:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   19850:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   19860:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   19870:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   19880:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   19890:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   198a0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   198b0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   198c0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   198d0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   198e0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   198f0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   19900:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   19910:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   19920:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   19930:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   19940:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   19950:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   19960:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   19970:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   19980:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   19990:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   199a0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   199b0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

000199c0 <tbl_upper.4309>:
   199c0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   199d0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   199e0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   199f0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   19a00:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   19a10:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   19a20:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   19a30:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   19a40:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   19a50:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   19a60:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   19a70:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   19a80:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   19a90:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   19aa0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   19ab0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   19ac0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   19ad0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   19ae0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   19af0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   19b00:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   19b10:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   19b20:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   19b30:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   19b40:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   19b50:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   19b60:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   19b70:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   19b80:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   19b90:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   19ba0:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   19bb8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   19bf8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   19c10:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   19c50:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   19c60:	5d42 0001 5d3c 0001 5d36 0001 5d30 0001     B]..<]..6]..0]..
   19c70:	5d48 0001 5d50 0001 5d48 0001 5d2a 0001     H]..P]..H]..*]..
   19c80:	5d24 0001 5d48 0001 5d1e 0001 5d1e 0001     $]..H]...]...]..
   19c90:	5d18 0001 5d12 0001 5d50 0001 5dba 0001     .]...]..P]...]..
   19ca0:	5db4 0001 5dae 0001 5da8 0001 5dc0 0001     .]...]...]...]..
   19cb0:	5dc8 0001 5dc0 0001 5da2 0001 5d9c 0001     .]...]...]...]..
   19cc0:	5dc0 0001 5d96 0001 5d96 0001 5d90 0001     .]...]...]...]..
   19cd0:	5d8a 0001 5dc8 0001 5e34 0001 5e2e 0001     .]...]..4^...^..
   19ce0:	5e28 0001 5e22 0001 5e3a 0001 5e3a 0001     (^.."^..:^..:^..
   19cf0:	5e3a 0001 5e1c 0001 5e16 0001 5e3a 0001     :^...^...^..:^..
   19d00:	5e10 0001 5e10 0001 5e0a 0001 5e04 0001     .^...^...^...^..
   19d10:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   19d20:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
   19d30:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
   19d40:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
   19d50:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   19d60:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   19d70:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   19d80:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   19d90:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   19da0:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
   19db0:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
   19dc0:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
   19dd0:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
   19de0:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
   19df0:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
   19e00:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
   19e10:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
   19e20:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
   19e30:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
   19e40:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
   19e50:	2800 4200 6500 0001 6508 0001 6516 0001     .(.B.e...e...e..
   19e60:	654e 0001 6564 0001 0a0d 2520 2a2e 0073     Ne..de.... %.*s.
   19e70:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
   19e80:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
   19e90:	7274 6575 0000 0000 227b 2264 7b3a 7422     true....{"d":{"t
   19ea0:	6d65 2270 253a 7d64 007d 0000 7468 7074     emp":%d}}...http
   19eb0:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   19ec0:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   19ed0:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   19ee0:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   19ef0:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   19f00:	2074 6f63 706d 656c 6574 2e64 000d 0000     t completed.....
   19f10:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   19f20:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   19f30:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   19f40:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   19f50:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   19f60:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   19f70:	6572 7361 6e6f 253a 0d64 000a 2d2d 5320     reason:%d...-- S
   19f80:	414d 5452 4420 534f 2045 5041 4c50 4349     MART DOSE APPLIC
   19f90:	5441 4f49 204e 2d2d 0a0d 2d2d 5320 4d41     ATION --..-- SAM
   19fa0:	3257 5f35 5058 414c 4e49 4445 505f 4f52     W25_XPLAINED_PRO
   19fb0:	2d20 0d2d 2d0a 202d 6f43 706d 6c69 6465      --..-- Compiled
   19fc0:	203a 6f4e 2076 3231 3220 3130 2039 3331     : Nov 12 2019 13
   19fd0:	343a 3a37 3030 2d20 0d2d 0000 0a0d 6854     :47:00 --.....Th
   19fe0:	7369 6520 6178 706d 656c 7220 7165 6975     is example requi
   19ff0:	6572 2073 6874 2065 5041 7420 206f 6168     res the AP to ha
   1a000:	6576 6920 746e 7265 656e 2074 6361 6563     ve internet acce
   1a010:	7373 0d2e 0d0a 0000 5345 3545 3631 2d20     ss......ESE516 -
   1a020:	5720 6669 2069 6e49 7469 4320 646f 0d65      Wifi Init Code.
   1a030:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1a040:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   1a050:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   1a060:	6c73 746f 2e2e 0d2e 0000 0000 6e69 7469     slot........init
   1a070:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   1a080:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   1a090:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1a0a0:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   1a0b0:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   1a0c0:	2e64 000d 6e69 7469 735f 6f74 6172 6567     d...init_storage
   1a0d0:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   1a0e0:	6472 2e2e 0d2e 0000 6e69 7469 735f 6f74     rd......init_sto
   1a0f0:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1a100:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   1a110:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   1a120:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1a130:	6e75 2074 4b4f 0d2e 0000 0000 6f63 666e     unt OK......conf
   1a140:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   1a150:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   1a160:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   1a170:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   1a180:	0000 0000 514d 5454 6920 696e 6974 6c61     ....MQTT initial
   1a190:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   1a1a0:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   1a1b0:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   1a1c0:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   1a1d0:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   1a1e0:	2065 7369 2820 6425 0d29 000a 616d 6e69     e is (%d)...main
   1a1f0:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   1a200:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   1a210:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   1a220:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   1a230:	4120 2050 7325 2e2e 0d2e 000a 616d 6e69      AP %s......main
   1a240:	203a 6f64 656e 0d2e 0000 0000 6863 6365     : done......chec
   1a250:	336b 000d 6863 6365 346b 000d 746f 6661     k3..check4..otaf
   1a260:	3a75 6420 6e6f 2e65 000d 0000 5245 3e52     u: done.....ERR>
   1a270:	203e 7953 7473 6369 206b 6f63 666e 6769     > Systick config
   1a280:	7275 7461 6f69 206e 7265 6f72 0d72 000a     uration error...

0001a290 <main_mqtt_broker>:
   1a290:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
   1a2a0:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
   1a2b0:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   1a2c0:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   1a2d0:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   1a2e0:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   1a2f0:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   1a300:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   1a310:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
   1a320:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   1a330:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   1a340:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   1a350:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
   1a360:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   1a370:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
   1a380:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   1a390:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   1a3a0:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   1a3b0:	6f63 6e6e 6365 6574 0d64 0000 6572 6f73     connected...reso
   1a3c0:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   1a3d0:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   1a3e0:	2e64 6425 0a0d 0a0d 0000 0000 7473 7261     d.%d........star
   1a3f0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   1a400:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   1a410:	2e79 000d 7473 7261 5f74 6f64 6e77 6f6c     y...start_downlo
   1a420:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   1a430:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
   1a440:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1a450:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   1a460:	6c61 6572 6461 2e79 000d 0000 7473 7261     already.....star
   1a470:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   1a480:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   1a490:	6165 7964 0d2e 0000 7473 7261 5f74 6f64     eady....start_do
   1a4a0:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   1a4b0:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   1a4c0:	0000 0000 7468 7074 3a73 2f2f 7777 2e77     ....https://www.
   1a4d0:	6573 7361 752e 6570 6e6e 652e 7564 7e2f     seas.upenn.edu/~
   1a4e0:	7262 6169 6b6e 6e77 532f 616d 7472 6f44     briankwn/SmartDo
   1a4f0:	6573 6946 6d72 6177 6572 702f 7261 6d61     seFirmware/param
   1a500:	2e73 7363 0076 0000 7468 7074 3a73 2f2f     s.csv...https://
   1a510:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   1a520:	7564 7e2f 7262 6169 6b6e 6e77 532f 616d     du/~briankwn/Sma
   1a530:	7472 6f44 6573 6946 6d72 6177 6572 612f     rtDoseFirmware/a
   1a540:	7070 622e 6e69 0000 7473 726f 5f65 6966     pp.bin..store_fi
   1a550:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   1a560:	6420 7461 2e61 000d 7473 726f 5f65 6966      data...store_fi
   1a570:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   1a580:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   1a590:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1a5a0:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   1a5b0:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   1a5c0:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1a5d0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1a5e0:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   1a5f0:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   1a600:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1a610:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   1a620:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   1a630:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1a640:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1a650:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   1a660:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   1a670:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1a680:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   1a690:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   1a6a0:	6c6c 2e79 000d 0000 6977 6966 635f 3a62     lly.....wifi_cb:
   1a6b0:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   1a6c0:	4554 0d44 0000 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   1a6d0:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   1a6e0:	454e 5443 4445 000d 6570 6e6e 3731 3034     NECTED..penn1740
   1a6f0:	6977 6966 0000 0000 6941 5072 6e65 4e6e     wifi....AirPennN
   1a700:	7465 442d 7665 6369 0065 0000 6977 6966     et-Device...wifi
   1a710:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
   1a720:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
   1a730:	0000 0000 7245 6f72 2072 6f63 6e6e 6365     ....Error connec
   1a740:	6974 676e 7420 206f 514d 5454 4220 6f72     ting to MQTT Bro
   1a750:	656b 2172 000d 0000                         ker!....

0001a758 <_global_impure_ptr>:
   1a758:	0154 2000                                   T.. 

0001a75c <__sf_fake_stderr>:
	...

0001a77c <__sf_fake_stdin>:
	...

0001a79c <__sf_fake_stdout>:
	...
   1a7bc:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   1a7cc:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   1a7dc:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   1a7ec:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0001a7f9 <_ctype_>:
   1a7f9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1a809:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1a819:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1a829:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1a839:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1a849:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1a859:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1a869:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1a879:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0001a8fc <_init>:
   1a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8fe:	46c0      	nop			; (mov r8, r8)
   1a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a902:	bc08      	pop	{r3}
   1a904:	469e      	mov	lr, r3
   1a906:	4770      	bx	lr

0001a908 <__init_array_start>:
   1a908:	0000b0dd 	.word	0x0000b0dd

0001a90c <_fini>:
   1a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a90e:	46c0      	nop			; (mov r8, r8)
   1a910:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1a912:	bc08      	pop	{r3}
   1a914:	469e      	mov	lr, r3
   1a916:	4770      	bx	lr

0001a918 <__fini_array_start>:
   1a918:	0000b0b5 	.word	0x0000b0b5
